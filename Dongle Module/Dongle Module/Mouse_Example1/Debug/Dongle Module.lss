
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009110  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00009110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000051c  200000e0  000091f0  000200e0  2**2
                  ALLOC
  3 .stack        00002004  200005fc  0000970c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028c7e  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036e1  00000000  00000000  00048ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004ddd  00000000  00000000  0004c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd0  00000000  00000000  0005129d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c50  00000000  00000000  0005206d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee06  00000000  00000000  00052cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011c76  00000000  00000000  00071ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094ee7  00000000  00000000  00083739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f80  00000000  00000000  00118620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002600 	.word	0x20002600
       4:	00008895 	.word	0x00008895
       8:	0000898d 	.word	0x0000898d
       c:	0000898d 	.word	0x0000898d
	...
      2c:	0000898d 	.word	0x0000898d
	...
      38:	0000898d 	.word	0x0000898d
      3c:	0000898d 	.word	0x0000898d
      40:	0000898d 	.word	0x0000898d
      44:	0000898d 	.word	0x0000898d
      48:	0000898d 	.word	0x0000898d
      4c:	0000898d 	.word	0x0000898d
      50:	00004075 	.word	0x00004075
      54:	0000898d 	.word	0x0000898d
      58:	0000898d 	.word	0x0000898d
      5c:	000084dd 	.word	0x000084dd
      60:	0000898d 	.word	0x0000898d
      64:	0000898d 	.word	0x0000898d
      68:	0000898d 	.word	0x0000898d
      6c:	0000898d 	.word	0x0000898d
      70:	0000898d 	.word	0x0000898d
      74:	0000898d 	.word	0x0000898d
      78:	0000898d 	.word	0x0000898d
      7c:	0000898d 	.word	0x0000898d
      80:	0000898d 	.word	0x0000898d
      84:	0000898d 	.word	0x0000898d
      88:	0000898d 	.word	0x0000898d
      8c:	0000898d 	.word	0x0000898d
      90:	0000898d 	.word	0x0000898d
	...
      9c:	0000898d 	.word	0x0000898d
      a0:	0000898d 	.word	0x0000898d
      a4:	0000898d 	.word	0x0000898d
      a8:	0000898d 	.word	0x0000898d
      ac:	0000898d 	.word	0x0000898d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00009110 	.word	0x00009110

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00009110 	.word	0x00009110
     10c:	00009110 	.word	0x00009110
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     188:	b580      	push	{r7, lr}
     18a:	b084      	sub	sp, #16
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     190:	687b      	ldr	r3, [r7, #4]
     192:	681b      	ldr	r3, [r3, #0]
     194:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     196:	68fb      	ldr	r3, [r7, #12]
     198:	7a9b      	ldrb	r3, [r3, #10]
     19a:	b2db      	uxtb	r3, r3
     19c:	b25b      	sxtb	r3, r3
     19e:	2b00      	cmp	r3, #0
     1a0:	da01      	bge.n	1a6 <rtc_count_is_syncing+0x1e>
                return true;
     1a2:	2301      	movs	r3, #1
     1a4:	e000      	b.n	1a8 <rtc_count_is_syncing+0x20>
        }

        return false;
     1a6:	2300      	movs	r3, #0
}
     1a8:	0018      	movs	r0, r3
     1aa:	46bd      	mov	sp, r7
     1ac:	b004      	add	sp, #16
     1ae:	bd80      	pop	{r7, pc}

000001b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b084      	sub	sp, #16
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	0018      	movs	r0, r3
     1c4:	4b07      	ldr	r3, [pc, #28]	; (1e4 <rtc_count_enable+0x34>)
     1c6:	4798      	blx	r3
     1c8:	1e03      	subs	r3, r0, #0
     1ca:	d1f9      	bne.n	1c0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	881b      	ldrh	r3, [r3, #0]
     1d0:	b29b      	uxth	r3, r3
     1d2:	2202      	movs	r2, #2
     1d4:	4313      	orrs	r3, r2
     1d6:	b29a      	uxth	r2, r3
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	801a      	strh	r2, [r3, #0]
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}
     1e4:	00000189 	.word	0x00000189

000001e8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	0018      	movs	r0, r3
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_count_disable+0x34>)
     1fe:	4798      	blx	r3
     200:	1e03      	subs	r3, r0, #0
     202:	d1f9      	bne.n	1f8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	2202      	movs	r2, #2
     20c:	4393      	bics	r3, r2
     20e:	b29a      	uxth	r2, r3
     210:	68fb      	ldr	r3, [r7, #12]
     212:	801a      	strh	r2, [r3, #0]
}
     214:	46c0      	nop			; (mov r8, r8)
     216:	46bd      	mov	sp, r7
     218:	b004      	add	sp, #16
     21a:	bd80      	pop	{r7, pc}
     21c:	00000189 	.word	0x00000189

00000220 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     22e:	687b      	ldr	r3, [r7, #4]
     230:	0018      	movs	r0, r3
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <rtc_count_reset+0x3c>)
     234:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     236:	46c0      	nop			; (mov r8, r8)
     238:	687b      	ldr	r3, [r7, #4]
     23a:	0018      	movs	r0, r3
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <rtc_count_reset+0x40>)
     23e:	4798      	blx	r3
     240:	1e03      	subs	r3, r0, #0
     242:	d1f9      	bne.n	238 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29b      	uxth	r3, r3
     24a:	2201      	movs	r2, #1
     24c:	4313      	orrs	r3, r2
     24e:	b29a      	uxth	r2, r3
     250:	68fb      	ldr	r3, [r7, #12]
     252:	801a      	strh	r2, [r3, #0]
}
     254:	46c0      	nop			; (mov r8, r8)
     256:	46bd      	mov	sp, r7
     258:	b004      	add	sp, #16
     25a:	bd80      	pop	{r7, pc}
     25c:	000001e9 	.word	0x000001e9
     260:	00000189 	.word	0x00000189

00000264 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
     26c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     274:	683b      	ldr	r3, [r7, #0]
     276:	881a      	ldrh	r2, [r3, #0]
     278:	68bb      	ldr	r3, [r7, #8]
     27a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	789b      	ldrb	r3, [r3, #2]
     280:	2b00      	cmp	r3, #0
     282:	d03a      	beq.n	2fa <_rtc_count_set_config+0x96>
     284:	2b01      	cmp	r3, #1
     286:	d000      	beq.n	28a <_rtc_count_set_config+0x26>
     288:	e06c      	b.n	364 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	881b      	ldrh	r3, [r3, #0]
     28e:	b29a      	uxth	r2, r3
     290:	68bb      	ldr	r3, [r7, #8]
     292:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     294:	683b      	ldr	r3, [r7, #0]
     296:	78db      	ldrb	r3, [r3, #3]
     298:	2b00      	cmp	r3, #0
     29a:	d007      	beq.n	2ac <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	881b      	ldrh	r3, [r3, #0]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	4313      	orrs	r3, r2
     2a6:	b29a      	uxth	r2, r3
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2ac:	230f      	movs	r3, #15
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	2200      	movs	r2, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	e01b      	b.n	2ee <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	0018      	movs	r0, r3
     2bc:	4b33      	ldr	r3, [pc, #204]	; (38c <_rtc_count_set_config+0x128>)
     2be:	4798      	blx	r3
     2c0:	1e03      	subs	r3, r0, #0
     2c2:	d1f9      	bne.n	2b8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c4:	230f      	movs	r3, #15
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	781a      	ldrb	r2, [r3, #0]
     2ca:	683b      	ldr	r3, [r7, #0]
     2cc:	3202      	adds	r2, #2
     2ce:	0092      	lsls	r2, r2, #2
     2d0:	58d1      	ldr	r1, [r2, r3]
     2d2:	230f      	movs	r3, #15
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	781a      	ldrb	r2, [r3, #0]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b2c      	ldr	r3, [pc, #176]	; (390 <_rtc_count_set_config+0x12c>)
     2de:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2e0:	230f      	movs	r3, #15
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	781a      	ldrb	r2, [r3, #0]
     2e6:	230f      	movs	r3, #15
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	3201      	adds	r2, #1
     2ec:	701a      	strb	r2, [r3, #0]
     2ee:	230f      	movs	r3, #15
     2f0:	18fb      	adds	r3, r7, r3
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0de      	beq.n	2b6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     2f8:	e036      	b.n	368 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2fa:	68bb      	ldr	r3, [r7, #8]
     2fc:	881b      	ldrh	r3, [r3, #0]
     2fe:	b29b      	uxth	r3, r3
     300:	2204      	movs	r2, #4
     302:	4313      	orrs	r3, r2
     304:	b29a      	uxth	r2, r3
     306:	68bb      	ldr	r3, [r7, #8]
     308:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     30a:	683b      	ldr	r3, [r7, #0]
     30c:	78db      	ldrb	r3, [r3, #3]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     312:	2317      	movs	r3, #23
     314:	e036      	b.n	384 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     316:	230e      	movs	r3, #14
     318:	18fb      	adds	r3, r7, r3
     31a:	2200      	movs	r2, #0
     31c:	701a      	strb	r2, [r3, #0]
     31e:	e01b      	b.n	358 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     320:	46c0      	nop			; (mov r8, r8)
     322:	687b      	ldr	r3, [r7, #4]
     324:	0018      	movs	r0, r3
     326:	4b19      	ldr	r3, [pc, #100]	; (38c <_rtc_count_set_config+0x128>)
     328:	4798      	blx	r3
     32a:	1e03      	subs	r3, r0, #0
     32c:	d1f9      	bne.n	322 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     32e:	230e      	movs	r3, #14
     330:	18fb      	adds	r3, r7, r3
     332:	781a      	ldrb	r2, [r3, #0]
     334:	683b      	ldr	r3, [r7, #0]
     336:	3202      	adds	r2, #2
     338:	0092      	lsls	r2, r2, #2
     33a:	58d1      	ldr	r1, [r2, r3]
     33c:	230e      	movs	r3, #14
     33e:	18fb      	adds	r3, r7, r3
     340:	781a      	ldrb	r2, [r3, #0]
     342:	687b      	ldr	r3, [r7, #4]
     344:	0018      	movs	r0, r3
     346:	4b12      	ldr	r3, [pc, #72]	; (390 <_rtc_count_set_config+0x12c>)
     348:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     34a:	230e      	movs	r3, #14
     34c:	18fb      	adds	r3, r7, r3
     34e:	781a      	ldrb	r2, [r3, #0]
     350:	230e      	movs	r3, #14
     352:	18fb      	adds	r3, r7, r3
     354:	3201      	adds	r2, #1
     356:	701a      	strb	r2, [r3, #0]
     358:	230e      	movs	r3, #14
     35a:	18fb      	adds	r3, r7, r3
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	2b01      	cmp	r3, #1
     360:	d9de      	bls.n	320 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     362:	e001      	b.n	368 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     364:	2317      	movs	r3, #23
     366:	e00d      	b.n	384 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     368:	683b      	ldr	r3, [r7, #0]
     36a:	791b      	ldrb	r3, [r3, #4]
     36c:	2b00      	cmp	r3, #0
     36e:	d008      	beq.n	382 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     370:	68bb      	ldr	r3, [r7, #8]
     372:	885b      	ldrh	r3, [r3, #2]
     374:	b29b      	uxth	r3, r3
     376:	2280      	movs	r2, #128	; 0x80
     378:	01d2      	lsls	r2, r2, #7
     37a:	4313      	orrs	r3, r2
     37c:	b29a      	uxth	r2, r3
     37e:	68bb      	ldr	r3, [r7, #8]
     380:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     382:	2300      	movs	r3, #0
}
     384:	0018      	movs	r0, r3
     386:	46bd      	mov	sp, r7
     388:	b004      	add	sp, #16
     38a:	bd80      	pop	{r7, pc}
     38c:	00000189 	.word	0x00000189
     390:	000004ed 	.word	0x000004ed

00000394 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     394:	b580      	push	{r7, lr}
     396:	b086      	sub	sp, #24
     398:	af00      	add	r7, sp, #0
     39a:	60f8      	str	r0, [r7, #12]
     39c:	60b9      	str	r1, [r7, #8]
     39e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	68ba      	ldr	r2, [r7, #8]
     3a4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     3a6:	2120      	movs	r1, #32
     3a8:	2000      	movs	r0, #0
     3aa:	4b17      	ldr	r3, [pc, #92]	; (408 <rtc_count_init+0x74>)
     3ac:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3ae:	2314      	movs	r3, #20
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	0018      	movs	r0, r3
     3b4:	4b15      	ldr	r3, [pc, #84]	; (40c <rtc_count_init+0x78>)
     3b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3b8:	2314      	movs	r3, #20
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	2202      	movs	r2, #2
     3be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3c0:	2314      	movs	r3, #20
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	0019      	movs	r1, r3
     3c6:	2004      	movs	r0, #4
     3c8:	4b11      	ldr	r3, [pc, #68]	; (410 <rtc_count_init+0x7c>)
     3ca:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3cc:	2004      	movs	r0, #4
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <rtc_count_init+0x80>)
     3d0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     3d2:	68fb      	ldr	r3, [r7, #12]
     3d4:	0018      	movs	r0, r3
     3d6:	4b10      	ldr	r3, [pc, #64]	; (418 <rtc_count_init+0x84>)
     3d8:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	789a      	ldrb	r2, [r3, #2]
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	791a      	ldrb	r2, [r3, #4]
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <rtc_count_init+0x88>)
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     3f0:	687a      	ldr	r2, [r7, #4]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	0011      	movs	r1, r2
     3f6:	0018      	movs	r0, r3
     3f8:	4b09      	ldr	r3, [pc, #36]	; (420 <rtc_count_init+0x8c>)
     3fa:	4798      	blx	r3
     3fc:	0003      	movs	r3, r0
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b006      	add	sp, #24
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	0000012d 	.word	0x0000012d
     40c:	00000115 	.word	0x00000115
     410:	00004f99 	.word	0x00004f99
     414:	00004fdd 	.word	0x00004fdd
     418:	00000221 	.word	0x00000221
     41c:	20000234 	.word	0x20000234
     420:	00000265 	.word	0x00000265

00000424 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     424:	b580      	push	{r7, lr}
     426:	b084      	sub	sp, #16
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	681b      	ldr	r3, [r3, #0]
     432:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     434:	46c0      	nop			; (mov r8, r8)
     436:	687b      	ldr	r3, [r7, #4]
     438:	0018      	movs	r0, r3
     43a:	4b10      	ldr	r3, [pc, #64]	; (47c <rtc_count_set_count+0x58>)
     43c:	4798      	blx	r3
     43e:	1e03      	subs	r3, r0, #0
     440:	d1f9      	bne.n	436 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     442:	687b      	ldr	r3, [r7, #4]
     444:	791b      	ldrb	r3, [r3, #4]
     446:	2b00      	cmp	r3, #0
     448:	d005      	beq.n	456 <rtc_count_set_count+0x32>
     44a:	2b01      	cmp	r3, #1
     44c:	d10e      	bne.n	46c <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	683a      	ldr	r2, [r7, #0]
     452:	611a      	str	r2, [r3, #16]

			break;
     454:	e00c      	b.n	470 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     456:	683b      	ldr	r3, [r7, #0]
     458:	4a09      	ldr	r2, [pc, #36]	; (480 <rtc_count_set_count+0x5c>)
     45a:	4293      	cmp	r3, r2
     45c:	d901      	bls.n	462 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     45e:	2317      	movs	r3, #23
     460:	e007      	b.n	472 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     462:	683b      	ldr	r3, [r7, #0]
     464:	b29a      	uxth	r2, r3
     466:	68fb      	ldr	r3, [r7, #12]
     468:	821a      	strh	r2, [r3, #16]

			break;
     46a:	e001      	b.n	470 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     46c:	2317      	movs	r3, #23
     46e:	e000      	b.n	472 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     470:	2300      	movs	r3, #0
}
     472:	0018      	movs	r0, r3
     474:	46bd      	mov	sp, r7
     476:	b004      	add	sp, #16
     478:	bd80      	pop	{r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	00000189 	.word	0x00000189
     480:	0000ffff 	.word	0x0000ffff

00000484 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     484:	b580      	push	{r7, lr}
     486:	b084      	sub	sp, #16
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	681b      	ldr	r3, [r3, #0]
     490:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     492:	687b      	ldr	r3, [r7, #4]
     494:	795b      	ldrb	r3, [r3, #5]
     496:	2201      	movs	r2, #1
     498:	4053      	eors	r3, r2
     49a:	b2db      	uxtb	r3, r3
     49c:	2b00      	cmp	r3, #0
     49e:	d009      	beq.n	4b4 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	4a10      	ldr	r2, [pc, #64]	; (4e4 <rtc_count_get_count+0x60>)
     4a4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	0018      	movs	r0, r3
     4ac:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <rtc_count_get_count+0x64>)
     4ae:	4798      	blx	r3
     4b0:	1e03      	subs	r3, r0, #0
     4b2:	d1f9      	bne.n	4a8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	791b      	ldrb	r3, [r3, #4]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d005      	beq.n	4c8 <rtc_count_get_count+0x44>
     4bc:	2b01      	cmp	r3, #1
     4be:	d108      	bne.n	4d2 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     4c0:	68bb      	ldr	r3, [r7, #8]
     4c2:	691b      	ldr	r3, [r3, #16]
     4c4:	60fb      	str	r3, [r7, #12]

			break;
     4c6:	e007      	b.n	4d8 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	8a1b      	ldrh	r3, [r3, #16]
     4cc:	b29b      	uxth	r3, r3
     4ce:	60fb      	str	r3, [r7, #12]

			break;
     4d0:	e002      	b.n	4d8 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     4d2:	2300      	movs	r3, #0
     4d4:	60fb      	str	r3, [r7, #12]
			break;
     4d6:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	0018      	movs	r0, r3
     4dc:	46bd      	mov	sp, r7
     4de:	b004      	add	sp, #16
     4e0:	bd80      	pop	{r7, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	ffff8000 	.word	0xffff8000
     4e8:	00000189 	.word	0x00000189

000004ec <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b086      	sub	sp, #24
     4f0:	af00      	add	r7, sp, #0
     4f2:	60f8      	str	r0, [r7, #12]
     4f4:	60b9      	str	r1, [r7, #8]
     4f6:	1dfb      	adds	r3, r7, #7
     4f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4fa:	68fb      	ldr	r3, [r7, #12]
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     500:	46c0      	nop			; (mov r8, r8)
     502:	68fb      	ldr	r3, [r7, #12]
     504:	0018      	movs	r0, r3
     506:	4b1a      	ldr	r3, [pc, #104]	; (570 <rtc_count_set_compare+0x84>)
     508:	4798      	blx	r3
     50a:	1e03      	subs	r3, r0, #0
     50c:	d1f9      	bne.n	502 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     50e:	68fb      	ldr	r3, [r7, #12]
     510:	791b      	ldrb	r3, [r3, #4]
     512:	2b00      	cmp	r3, #0
     514:	d00f      	beq.n	536 <rtc_count_set_compare+0x4a>
     516:	2b01      	cmp	r3, #1
     518:	d122      	bne.n	560 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     51a:	1dfb      	adds	r3, r7, #7
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2b01      	cmp	r3, #1
     520:	d901      	bls.n	526 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     522:	2317      	movs	r3, #23
     524:	e01f      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     526:	1dfb      	adds	r3, r7, #7
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	697b      	ldr	r3, [r7, #20]
     52c:	3206      	adds	r2, #6
     52e:	0092      	lsls	r2, r2, #2
     530:	68b9      	ldr	r1, [r7, #8]
     532:	50d1      	str	r1, [r2, r3]

			break;
     534:	e016      	b.n	564 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2b02      	cmp	r3, #2
     53c:	d901      	bls.n	542 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     53e:	2317      	movs	r3, #23
     540:	e011      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     542:	68bb      	ldr	r3, [r7, #8]
     544:	4a0b      	ldr	r2, [pc, #44]	; (574 <rtc_count_set_compare+0x88>)
     546:	4293      	cmp	r3, r2
     548:	d901      	bls.n	54e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     54a:	2317      	movs	r3, #23
     54c:	e00b      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     54e:	1dfb      	adds	r3, r7, #7
     550:	781a      	ldrb	r2, [r3, #0]
     552:	68bb      	ldr	r3, [r7, #8]
     554:	b299      	uxth	r1, r3
     556:	697b      	ldr	r3, [r7, #20]
     558:	320c      	adds	r2, #12
     55a:	0052      	lsls	r2, r2, #1
     55c:	52d1      	strh	r1, [r2, r3]

			break;
     55e:	e001      	b.n	564 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     560:	231a      	movs	r3, #26
     562:	e000      	b.n	566 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     564:	2300      	movs	r3, #0
}
     566:	0018      	movs	r0, r3
     568:	46bd      	mov	sp, r7
     56a:	b006      	add	sp, #24
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00000189 	.word	0x00000189
     574:	0000ffff 	.word	0x0000ffff

00000578 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     578:	b580      	push	{r7, lr}
     57a:	b084      	sub	sp, #16
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
     580:	000a      	movs	r2, r1
     582:	1cbb      	adds	r3, r7, #2
     584:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     586:	687b      	ldr	r3, [r7, #4]
     588:	681b      	ldr	r3, [r3, #0]
     58a:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	791b      	ldrb	r3, [r3, #4]
     590:	2b00      	cmp	r3, #0
     592:	d001      	beq.n	598 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     594:	2315      	movs	r3, #21
     596:	e00b      	b.n	5b0 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     598:	46c0      	nop			; (mov r8, r8)
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	0018      	movs	r0, r3
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <rtc_count_set_period+0x40>)
     5a0:	4798      	blx	r3
     5a2:	1e03      	subs	r3, r0, #0
     5a4:	d1f9      	bne.n	59a <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	1cba      	adds	r2, r7, #2
     5aa:	8812      	ldrh	r2, [r2, #0]
     5ac:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     5ae:	2300      	movs	r3, #0
}
     5b0:	0018      	movs	r0, r3
     5b2:	46bd      	mov	sp, r7
     5b4:	b004      	add	sp, #16
     5b6:	bd80      	pop	{r7, pc}
     5b8:	00000189 	.word	0x00000189

000005bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b082      	sub	sp, #8
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	46bd      	mov	sp, r7
     5ce:	b002      	add	sp, #8
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b086      	sub	sp, #24
     5d8:	af00      	add	r7, sp, #0
     5da:	60f8      	str	r0, [r7, #12]
     5dc:	60b9      	str	r1, [r7, #8]
     5de:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     5e0:	2316      	movs	r3, #22
     5e2:	18fb      	adds	r3, r7, r3
     5e4:	2200      	movs	r2, #0
     5e6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     5e8:	68bb      	ldr	r3, [r7, #8]
     5ea:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5ec:	68bb      	ldr	r3, [r7, #8]
     5ee:	085a      	lsrs	r2, r3, #1
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	429a      	cmp	r2, r3
     5f4:	d201      	bcs.n	5fa <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5f6:	2340      	movs	r3, #64	; 0x40
     5f8:	e026      	b.n	648 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     5fa:	68bb      	ldr	r3, [r7, #8]
     5fc:	085b      	lsrs	r3, r3, #1
     5fe:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     600:	e00a      	b.n	618 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     602:	693a      	ldr	r2, [r7, #16]
     604:	68fb      	ldr	r3, [r7, #12]
     606:	1ad3      	subs	r3, r2, r3
     608:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     60a:	2316      	movs	r3, #22
     60c:	18fb      	adds	r3, r7, r3
     60e:	881a      	ldrh	r2, [r3, #0]
     610:	2316      	movs	r3, #22
     612:	18fb      	adds	r3, r7, r3
     614:	3201      	adds	r2, #1
     616:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     618:	693a      	ldr	r2, [r7, #16]
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	429a      	cmp	r2, r3
     61e:	d2f0      	bcs.n	602 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     620:	2316      	movs	r3, #22
     622:	18fb      	adds	r3, r7, r3
     624:	2216      	movs	r2, #22
     626:	18ba      	adds	r2, r7, r2
     628:	8812      	ldrh	r2, [r2, #0]
     62a:	3a01      	subs	r2, #1
     62c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     62e:	2316      	movs	r3, #22
     630:	18fb      	adds	r3, r7, r3
     632:	881b      	ldrh	r3, [r3, #0]
     634:	2bff      	cmp	r3, #255	; 0xff
     636:	d901      	bls.n	63c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     638:	2340      	movs	r3, #64	; 0x40
     63a:	e005      	b.n	648 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	2216      	movs	r2, #22
     640:	18ba      	adds	r2, r7, r2
     642:	8812      	ldrh	r2, [r2, #0]
     644:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     646:	2300      	movs	r3, #0
	}
}
     648:	0018      	movs	r0, r3
     64a:	46bd      	mov	sp, r7
     64c:	b006      	add	sp, #24
     64e:	bd80      	pop	{r7, pc}

00000650 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     650:	b580      	push	{r7, lr}
     652:	b084      	sub	sp, #16
     654:	af00      	add	r7, sp, #0
     656:	0002      	movs	r2, r0
     658:	1dfb      	adds	r3, r7, #7
     65a:	701a      	strb	r2, [r3, #0]
     65c:	1dbb      	adds	r3, r7, #6
     65e:	1c0a      	adds	r2, r1, #0
     660:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     662:	4b1a      	ldr	r3, [pc, #104]	; (6cc <sercom_set_gclk_generator+0x7c>)
     664:	781b      	ldrb	r3, [r3, #0]
     666:	2201      	movs	r2, #1
     668:	4053      	eors	r3, r2
     66a:	b2db      	uxtb	r3, r3
     66c:	2b00      	cmp	r3, #0
     66e:	d103      	bne.n	678 <sercom_set_gclk_generator+0x28>
     670:	1dbb      	adds	r3, r7, #6
     672:	781b      	ldrb	r3, [r3, #0]
     674:	2b00      	cmp	r3, #0
     676:	d01b      	beq.n	6b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     678:	230c      	movs	r3, #12
     67a:	18fb      	adds	r3, r7, r3
     67c:	0018      	movs	r0, r3
     67e:	4b14      	ldr	r3, [pc, #80]	; (6d0 <sercom_set_gclk_generator+0x80>)
     680:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     682:	230c      	movs	r3, #12
     684:	18fb      	adds	r3, r7, r3
     686:	1dfa      	adds	r2, r7, #7
     688:	7812      	ldrb	r2, [r2, #0]
     68a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     68c:	230c      	movs	r3, #12
     68e:	18fb      	adds	r3, r7, r3
     690:	0019      	movs	r1, r3
     692:	2013      	movs	r0, #19
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <sercom_set_gclk_generator+0x84>)
     696:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     698:	2013      	movs	r0, #19
     69a:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <sercom_set_gclk_generator+0x88>)
     69c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     69e:	4b0b      	ldr	r3, [pc, #44]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6a0:	1dfa      	adds	r2, r7, #7
     6a2:	7812      	ldrb	r2, [r2, #0]
     6a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     6a6:	4b09      	ldr	r3, [pc, #36]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6a8:	2201      	movs	r2, #1
     6aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6ac:	2300      	movs	r3, #0
     6ae:	e008      	b.n	6c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6b2:	785b      	ldrb	r3, [r3, #1]
     6b4:	1dfa      	adds	r2, r7, #7
     6b6:	7812      	ldrb	r2, [r2, #0]
     6b8:	429a      	cmp	r2, r3
     6ba:	d101      	bne.n	6c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     6bc:	2300      	movs	r3, #0
     6be:	e000      	b.n	6c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6c0:	231d      	movs	r3, #29
}
     6c2:	0018      	movs	r0, r3
     6c4:	46bd      	mov	sp, r7
     6c6:	b004      	add	sp, #16
     6c8:	bd80      	pop	{r7, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	200000fc 	.word	0x200000fc
     6d0:	000005bd 	.word	0x000005bd
     6d4:	00004f99 	.word	0x00004f99
     6d8:	00004fdd 	.word	0x00004fdd

000006dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
     6e4:	000a      	movs	r2, r1
     6e6:	1cfb      	adds	r3, r7, #3
     6e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	4a4d      	ldr	r2, [pc, #308]	; (824 <_sercom_get_default_pad+0x148>)
     6ee:	4293      	cmp	r3, r2
     6f0:	d03f      	beq.n	772 <_sercom_get_default_pad+0x96>
     6f2:	4a4c      	ldr	r2, [pc, #304]	; (824 <_sercom_get_default_pad+0x148>)
     6f4:	4293      	cmp	r3, r2
     6f6:	d806      	bhi.n	706 <_sercom_get_default_pad+0x2a>
     6f8:	4a4b      	ldr	r2, [pc, #300]	; (828 <_sercom_get_default_pad+0x14c>)
     6fa:	4293      	cmp	r3, r2
     6fc:	d00f      	beq.n	71e <_sercom_get_default_pad+0x42>
     6fe:	4a4b      	ldr	r2, [pc, #300]	; (82c <_sercom_get_default_pad+0x150>)
     700:	4293      	cmp	r3, r2
     702:	d021      	beq.n	748 <_sercom_get_default_pad+0x6c>
     704:	e089      	b.n	81a <_sercom_get_default_pad+0x13e>
     706:	4a4a      	ldr	r2, [pc, #296]	; (830 <_sercom_get_default_pad+0x154>)
     708:	4293      	cmp	r3, r2
     70a:	d100      	bne.n	70e <_sercom_get_default_pad+0x32>
     70c:	e05b      	b.n	7c6 <_sercom_get_default_pad+0xea>
     70e:	4a49      	ldr	r2, [pc, #292]	; (834 <_sercom_get_default_pad+0x158>)
     710:	4293      	cmp	r3, r2
     712:	d100      	bne.n	716 <_sercom_get_default_pad+0x3a>
     714:	e06c      	b.n	7f0 <_sercom_get_default_pad+0x114>
     716:	4a48      	ldr	r2, [pc, #288]	; (838 <_sercom_get_default_pad+0x15c>)
     718:	4293      	cmp	r3, r2
     71a:	d03f      	beq.n	79c <_sercom_get_default_pad+0xc0>
     71c:	e07d      	b.n	81a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     71e:	1cfb      	adds	r3, r7, #3
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b01      	cmp	r3, #1
     724:	d00a      	beq.n	73c <_sercom_get_default_pad+0x60>
     726:	dc02      	bgt.n	72e <_sercom_get_default_pad+0x52>
     728:	2b00      	cmp	r3, #0
     72a:	d005      	beq.n	738 <_sercom_get_default_pad+0x5c>
     72c:	e075      	b.n	81a <_sercom_get_default_pad+0x13e>
     72e:	2b02      	cmp	r3, #2
     730:	d006      	beq.n	740 <_sercom_get_default_pad+0x64>
     732:	2b03      	cmp	r3, #3
     734:	d006      	beq.n	744 <_sercom_get_default_pad+0x68>
     736:	e070      	b.n	81a <_sercom_get_default_pad+0x13e>
     738:	4b40      	ldr	r3, [pc, #256]	; (83c <_sercom_get_default_pad+0x160>)
     73a:	e06f      	b.n	81c <_sercom_get_default_pad+0x140>
     73c:	4b40      	ldr	r3, [pc, #256]	; (840 <_sercom_get_default_pad+0x164>)
     73e:	e06d      	b.n	81c <_sercom_get_default_pad+0x140>
     740:	4b40      	ldr	r3, [pc, #256]	; (844 <_sercom_get_default_pad+0x168>)
     742:	e06b      	b.n	81c <_sercom_get_default_pad+0x140>
     744:	4b40      	ldr	r3, [pc, #256]	; (848 <_sercom_get_default_pad+0x16c>)
     746:	e069      	b.n	81c <_sercom_get_default_pad+0x140>
     748:	1cfb      	adds	r3, r7, #3
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	2b01      	cmp	r3, #1
     74e:	d00a      	beq.n	766 <_sercom_get_default_pad+0x8a>
     750:	dc02      	bgt.n	758 <_sercom_get_default_pad+0x7c>
     752:	2b00      	cmp	r3, #0
     754:	d005      	beq.n	762 <_sercom_get_default_pad+0x86>
     756:	e060      	b.n	81a <_sercom_get_default_pad+0x13e>
     758:	2b02      	cmp	r3, #2
     75a:	d006      	beq.n	76a <_sercom_get_default_pad+0x8e>
     75c:	2b03      	cmp	r3, #3
     75e:	d006      	beq.n	76e <_sercom_get_default_pad+0x92>
     760:	e05b      	b.n	81a <_sercom_get_default_pad+0x13e>
     762:	2303      	movs	r3, #3
     764:	e05a      	b.n	81c <_sercom_get_default_pad+0x140>
     766:	4b39      	ldr	r3, [pc, #228]	; (84c <_sercom_get_default_pad+0x170>)
     768:	e058      	b.n	81c <_sercom_get_default_pad+0x140>
     76a:	4b39      	ldr	r3, [pc, #228]	; (850 <_sercom_get_default_pad+0x174>)
     76c:	e056      	b.n	81c <_sercom_get_default_pad+0x140>
     76e:	4b39      	ldr	r3, [pc, #228]	; (854 <_sercom_get_default_pad+0x178>)
     770:	e054      	b.n	81c <_sercom_get_default_pad+0x140>
     772:	1cfb      	adds	r3, r7, #3
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b01      	cmp	r3, #1
     778:	d00a      	beq.n	790 <_sercom_get_default_pad+0xb4>
     77a:	dc02      	bgt.n	782 <_sercom_get_default_pad+0xa6>
     77c:	2b00      	cmp	r3, #0
     77e:	d005      	beq.n	78c <_sercom_get_default_pad+0xb0>
     780:	e04b      	b.n	81a <_sercom_get_default_pad+0x13e>
     782:	2b02      	cmp	r3, #2
     784:	d006      	beq.n	794 <_sercom_get_default_pad+0xb8>
     786:	2b03      	cmp	r3, #3
     788:	d006      	beq.n	798 <_sercom_get_default_pad+0xbc>
     78a:	e046      	b.n	81a <_sercom_get_default_pad+0x13e>
     78c:	4b32      	ldr	r3, [pc, #200]	; (858 <_sercom_get_default_pad+0x17c>)
     78e:	e045      	b.n	81c <_sercom_get_default_pad+0x140>
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <_sercom_get_default_pad+0x180>)
     792:	e043      	b.n	81c <_sercom_get_default_pad+0x140>
     794:	4b32      	ldr	r3, [pc, #200]	; (860 <_sercom_get_default_pad+0x184>)
     796:	e041      	b.n	81c <_sercom_get_default_pad+0x140>
     798:	4b32      	ldr	r3, [pc, #200]	; (864 <_sercom_get_default_pad+0x188>)
     79a:	e03f      	b.n	81c <_sercom_get_default_pad+0x140>
     79c:	1cfb      	adds	r3, r7, #3
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	2b01      	cmp	r3, #1
     7a2:	d00a      	beq.n	7ba <_sercom_get_default_pad+0xde>
     7a4:	dc02      	bgt.n	7ac <_sercom_get_default_pad+0xd0>
     7a6:	2b00      	cmp	r3, #0
     7a8:	d005      	beq.n	7b6 <_sercom_get_default_pad+0xda>
     7aa:	e036      	b.n	81a <_sercom_get_default_pad+0x13e>
     7ac:	2b02      	cmp	r3, #2
     7ae:	d006      	beq.n	7be <_sercom_get_default_pad+0xe2>
     7b0:	2b03      	cmp	r3, #3
     7b2:	d006      	beq.n	7c2 <_sercom_get_default_pad+0xe6>
     7b4:	e031      	b.n	81a <_sercom_get_default_pad+0x13e>
     7b6:	4b2c      	ldr	r3, [pc, #176]	; (868 <_sercom_get_default_pad+0x18c>)
     7b8:	e030      	b.n	81c <_sercom_get_default_pad+0x140>
     7ba:	4b2c      	ldr	r3, [pc, #176]	; (86c <_sercom_get_default_pad+0x190>)
     7bc:	e02e      	b.n	81c <_sercom_get_default_pad+0x140>
     7be:	4b2c      	ldr	r3, [pc, #176]	; (870 <_sercom_get_default_pad+0x194>)
     7c0:	e02c      	b.n	81c <_sercom_get_default_pad+0x140>
     7c2:	4b2c      	ldr	r3, [pc, #176]	; (874 <_sercom_get_default_pad+0x198>)
     7c4:	e02a      	b.n	81c <_sercom_get_default_pad+0x140>
     7c6:	1cfb      	adds	r3, r7, #3
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	2b01      	cmp	r3, #1
     7cc:	d00a      	beq.n	7e4 <_sercom_get_default_pad+0x108>
     7ce:	dc02      	bgt.n	7d6 <_sercom_get_default_pad+0xfa>
     7d0:	2b00      	cmp	r3, #0
     7d2:	d005      	beq.n	7e0 <_sercom_get_default_pad+0x104>
     7d4:	e021      	b.n	81a <_sercom_get_default_pad+0x13e>
     7d6:	2b02      	cmp	r3, #2
     7d8:	d006      	beq.n	7e8 <_sercom_get_default_pad+0x10c>
     7da:	2b03      	cmp	r3, #3
     7dc:	d006      	beq.n	7ec <_sercom_get_default_pad+0x110>
     7de:	e01c      	b.n	81a <_sercom_get_default_pad+0x13e>
     7e0:	4b25      	ldr	r3, [pc, #148]	; (878 <_sercom_get_default_pad+0x19c>)
     7e2:	e01b      	b.n	81c <_sercom_get_default_pad+0x140>
     7e4:	4b25      	ldr	r3, [pc, #148]	; (87c <_sercom_get_default_pad+0x1a0>)
     7e6:	e019      	b.n	81c <_sercom_get_default_pad+0x140>
     7e8:	4b25      	ldr	r3, [pc, #148]	; (880 <_sercom_get_default_pad+0x1a4>)
     7ea:	e017      	b.n	81c <_sercom_get_default_pad+0x140>
     7ec:	4b25      	ldr	r3, [pc, #148]	; (884 <_sercom_get_default_pad+0x1a8>)
     7ee:	e015      	b.n	81c <_sercom_get_default_pad+0x140>
     7f0:	1cfb      	adds	r3, r7, #3
     7f2:	781b      	ldrb	r3, [r3, #0]
     7f4:	2b01      	cmp	r3, #1
     7f6:	d00a      	beq.n	80e <_sercom_get_default_pad+0x132>
     7f8:	dc02      	bgt.n	800 <_sercom_get_default_pad+0x124>
     7fa:	2b00      	cmp	r3, #0
     7fc:	d005      	beq.n	80a <_sercom_get_default_pad+0x12e>
     7fe:	e00c      	b.n	81a <_sercom_get_default_pad+0x13e>
     800:	2b02      	cmp	r3, #2
     802:	d006      	beq.n	812 <_sercom_get_default_pad+0x136>
     804:	2b03      	cmp	r3, #3
     806:	d006      	beq.n	816 <_sercom_get_default_pad+0x13a>
     808:	e007      	b.n	81a <_sercom_get_default_pad+0x13e>
     80a:	4b1f      	ldr	r3, [pc, #124]	; (888 <_sercom_get_default_pad+0x1ac>)
     80c:	e006      	b.n	81c <_sercom_get_default_pad+0x140>
     80e:	4b1f      	ldr	r3, [pc, #124]	; (88c <_sercom_get_default_pad+0x1b0>)
     810:	e004      	b.n	81c <_sercom_get_default_pad+0x140>
     812:	4b1f      	ldr	r3, [pc, #124]	; (890 <_sercom_get_default_pad+0x1b4>)
     814:	e002      	b.n	81c <_sercom_get_default_pad+0x140>
     816:	4b1f      	ldr	r3, [pc, #124]	; (894 <_sercom_get_default_pad+0x1b8>)
     818:	e000      	b.n	81c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     81a:	2300      	movs	r3, #0
}
     81c:	0018      	movs	r0, r3
     81e:	46bd      	mov	sp, r7
     820:	b002      	add	sp, #8
     822:	bd80      	pop	{r7, pc}
     824:	42001000 	.word	0x42001000
     828:	42000800 	.word	0x42000800
     82c:	42000c00 	.word	0x42000c00
     830:	42001800 	.word	0x42001800
     834:	42001c00 	.word	0x42001c00
     838:	42001400 	.word	0x42001400
     83c:	00040003 	.word	0x00040003
     840:	00050003 	.word	0x00050003
     844:	00060003 	.word	0x00060003
     848:	00070003 	.word	0x00070003
     84c:	00010003 	.word	0x00010003
     850:	001e0003 	.word	0x001e0003
     854:	001f0003 	.word	0x001f0003
     858:	00080003 	.word	0x00080003
     85c:	00090003 	.word	0x00090003
     860:	000a0003 	.word	0x000a0003
     864:	000b0003 	.word	0x000b0003
     868:	00100003 	.word	0x00100003
     86c:	00110003 	.word	0x00110003
     870:	00120003 	.word	0x00120003
     874:	00130003 	.word	0x00130003
     878:	000c0003 	.word	0x000c0003
     87c:	000d0003 	.word	0x000d0003
     880:	000e0003 	.word	0x000e0003
     884:	000f0003 	.word	0x000f0003
     888:	00160003 	.word	0x00160003
     88c:	00170003 	.word	0x00170003
     890:	00180003 	.word	0x00180003
     894:	00190003 	.word	0x00190003

00000898 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     898:	b590      	push	{r4, r7, lr}
     89a:	b08b      	sub	sp, #44	; 0x2c
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8a0:	230c      	movs	r3, #12
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	4a0f      	ldr	r2, [pc, #60]	; (8e4 <_sercom_get_sercom_inst_index+0x4c>)
     8a6:	ca13      	ldmia	r2!, {r0, r1, r4}
     8a8:	c313      	stmia	r3!, {r0, r1, r4}
     8aa:	ca13      	ldmia	r2!, {r0, r1, r4}
     8ac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ae:	2300      	movs	r3, #0
     8b0:	627b      	str	r3, [r7, #36]	; 0x24
     8b2:	e00e      	b.n	8d2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8b4:	230c      	movs	r3, #12
     8b6:	18fb      	adds	r3, r7, r3
     8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     8ba:	0092      	lsls	r2, r2, #2
     8bc:	58d3      	ldr	r3, [r2, r3]
     8be:	1e1a      	subs	r2, r3, #0
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	429a      	cmp	r2, r3
     8c4:	d102      	bne.n	8cc <_sercom_get_sercom_inst_index+0x34>
			return i;
     8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8c8:	b2db      	uxtb	r3, r3
     8ca:	e006      	b.n	8da <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8ce:	3301      	adds	r3, #1
     8d0:	627b      	str	r3, [r7, #36]	; 0x24
     8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8d4:	2b05      	cmp	r3, #5
     8d6:	d9ed      	bls.n	8b4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8d8:	2300      	movs	r3, #0
}
     8da:	0018      	movs	r0, r3
     8dc:	46bd      	mov	sp, r7
     8de:	b00b      	add	sp, #44	; 0x2c
     8e0:	bd90      	pop	{r4, r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00008ff0 	.word	0x00008ff0

000008e8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	2280      	movs	r2, #128	; 0x80
     8f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	2200      	movs	r2, #0
     8fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2201      	movs	r2, #1
     900:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     902:	687b      	ldr	r3, [r7, #4]
     904:	2200      	movs	r2, #0
     906:	70da      	strb	r2, [r3, #3]
}
     908:	46c0      	nop			; (mov r8, r8)
     90a:	46bd      	mov	sp, r7
     90c:	b002      	add	sp, #8
     90e:	bd80      	pop	{r7, pc}

00000910 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     910:	b580      	push	{r7, lr}
     912:	b084      	sub	sp, #16
     914:	af00      	add	r7, sp, #0
     916:	0002      	movs	r2, r0
     918:	1dfb      	adds	r3, r7, #7
     91a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     91c:	230f      	movs	r3, #15
     91e:	18fb      	adds	r3, r7, r3
     920:	1dfa      	adds	r2, r7, #7
     922:	7812      	ldrb	r2, [r2, #0]
     924:	09d2      	lsrs	r2, r2, #7
     926:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     928:	230e      	movs	r3, #14
     92a:	18fb      	adds	r3, r7, r3
     92c:	1dfa      	adds	r2, r7, #7
     92e:	7812      	ldrb	r2, [r2, #0]
     930:	0952      	lsrs	r2, r2, #5
     932:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     936:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     938:	230f      	movs	r3, #15
     93a:	18fb      	adds	r3, r7, r3
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d10f      	bne.n	962 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     942:	230f      	movs	r3, #15
     944:	18fb      	adds	r3, r7, r3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	009b      	lsls	r3, r3, #2
     94a:	2210      	movs	r2, #16
     94c:	4694      	mov	ip, r2
     94e:	44bc      	add	ip, r7
     950:	4463      	add	r3, ip
     952:	3b08      	subs	r3, #8
     954:	681a      	ldr	r2, [r3, #0]
     956:	230e      	movs	r3, #14
     958:	18fb      	adds	r3, r7, r3
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	01db      	lsls	r3, r3, #7
     95e:	18d3      	adds	r3, r2, r3
     960:	e000      	b.n	964 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     962:	2300      	movs	r3, #0
	}
}
     964:	0018      	movs	r0, r3
     966:	46bd      	mov	sp, r7
     968:	b004      	add	sp, #16
     96a:	bd80      	pop	{r7, pc}
     96c:	41004400 	.word	0x41004400

00000970 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     970:	b580      	push	{r7, lr}
     972:	b086      	sub	sp, #24
     974:	af00      	add	r7, sp, #0
     976:	0002      	movs	r2, r0
     978:	1dfb      	adds	r3, r7, #7
     97a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     97c:	1dfb      	adds	r3, r7, #7
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	0018      	movs	r0, r3
     982:	4b19      	ldr	r3, [pc, #100]	; (9e8 <system_pinmux_pin_get_mux_position+0x78>)
     984:	4798      	blx	r3
     986:	0003      	movs	r3, r0
     988:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     98a:	1dfb      	adds	r3, r7, #7
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	221f      	movs	r2, #31
     990:	4013      	ands	r3, r2
     992:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     994:	697a      	ldr	r2, [r7, #20]
     996:	2140      	movs	r1, #64	; 0x40
     998:	693b      	ldr	r3, [r7, #16]
     99a:	18d3      	adds	r3, r2, r3
     99c:	185b      	adds	r3, r3, r1
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	b2db      	uxtb	r3, r3
     9a2:	001a      	movs	r2, r3
     9a4:	2301      	movs	r3, #1
     9a6:	4013      	ands	r3, r2
     9a8:	d101      	bne.n	9ae <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     9aa:	2380      	movs	r3, #128	; 0x80
     9ac:	e018      	b.n	9e0 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9ae:	693b      	ldr	r3, [r7, #16]
     9b0:	085b      	lsrs	r3, r3, #1
     9b2:	697a      	ldr	r2, [r7, #20]
     9b4:	2130      	movs	r1, #48	; 0x30
     9b6:	18d3      	adds	r3, r2, r3
     9b8:	185b      	adds	r3, r3, r1
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	b2db      	uxtb	r3, r3
     9be:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     9c0:	693b      	ldr	r3, [r7, #16]
     9c2:	2201      	movs	r2, #1
     9c4:	4013      	ands	r3, r2
     9c6:	d006      	beq.n	9d6 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	091b      	lsrs	r3, r3, #4
     9cc:	b2db      	uxtb	r3, r3
     9ce:	220f      	movs	r2, #15
     9d0:	4013      	ands	r3, r2
     9d2:	b2db      	uxtb	r3, r3
     9d4:	e004      	b.n	9e0 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     9d6:	68fb      	ldr	r3, [r7, #12]
     9d8:	b2db      	uxtb	r3, r3
     9da:	220f      	movs	r2, #15
     9dc:	4013      	ands	r3, r2
     9de:	b2db      	uxtb	r3, r3
	}
}
     9e0:	0018      	movs	r0, r3
     9e2:	46bd      	mov	sp, r7
     9e4:	b006      	add	sp, #24
     9e6:	bd80      	pop	{r7, pc}
     9e8:	00000911 	.word	0x00000911

000009ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	0018      	movs	r0, r3
     9fe:	4b03      	ldr	r3, [pc, #12]	; (a0c <port_get_group_from_gpio_pin+0x20>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
}
     a04:	0018      	movs	r0, r3
     a06:	46bd      	mov	sp, r7
     a08:	b002      	add	sp, #8
     a0a:	bd80      	pop	{r7, pc}
     a0c:	00000911 	.word	0x00000911

00000a10 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     a10:	b580      	push	{r7, lr}
     a12:	b084      	sub	sp, #16
     a14:	af00      	add	r7, sp, #0
     a16:	0002      	movs	r2, r0
     a18:	1dfb      	adds	r3, r7, #7
     a1a:	701a      	strb	r2, [r3, #0]
     a1c:	1dbb      	adds	r3, r7, #6
     a1e:	1c0a      	adds	r2, r1, #0
     a20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     a22:	1dfb      	adds	r3, r7, #7
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	0018      	movs	r0, r3
     a28:	4b0d      	ldr	r3, [pc, #52]	; (a60 <port_pin_set_output_level+0x50>)
     a2a:	4798      	blx	r3
     a2c:	0003      	movs	r3, r0
     a2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a30:	1dfb      	adds	r3, r7, #7
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	221f      	movs	r2, #31
     a36:	4013      	ands	r3, r2
     a38:	2201      	movs	r2, #1
     a3a:	409a      	lsls	r2, r3
     a3c:	0013      	movs	r3, r2
     a3e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a40:	1dbb      	adds	r3, r7, #6
     a42:	781b      	ldrb	r3, [r3, #0]
     a44:	2b00      	cmp	r3, #0
     a46:	d003      	beq.n	a50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	68ba      	ldr	r2, [r7, #8]
     a4c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a4e:	e002      	b.n	a56 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a50:	68fb      	ldr	r3, [r7, #12]
     a52:	68ba      	ldr	r2, [r7, #8]
     a54:	615a      	str	r2, [r3, #20]
	}
}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	46bd      	mov	sp, r7
     a5a:	b004      	add	sp, #16
     a5c:	bd80      	pop	{r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	000009ed 	.word	0x000009ed

00000a64 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a64:	b580      	push	{r7, lr}
     a66:	b082      	sub	sp, #8
     a68:	af00      	add	r7, sp, #0
     a6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	2200      	movs	r2, #0
     a70:	701a      	strb	r2, [r3, #0]
}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	46bd      	mov	sp, r7
     a76:	b002      	add	sp, #8
     a78:	bd80      	pop	{r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)

00000a7c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b082      	sub	sp, #8
     a80:	af00      	add	r7, sp, #0
     a82:	0002      	movs	r2, r0
     a84:	6039      	str	r1, [r7, #0]
     a86:	1dfb      	adds	r3, r7, #7
     a88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     a8a:	1dfb      	adds	r3, r7, #7
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b01      	cmp	r3, #1
     a90:	d00a      	beq.n	aa8 <system_apb_clock_set_mask+0x2c>
     a92:	2b02      	cmp	r3, #2
     a94:	d00f      	beq.n	ab6 <system_apb_clock_set_mask+0x3a>
     a96:	2b00      	cmp	r3, #0
     a98:	d114      	bne.n	ac4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <system_apb_clock_set_mask+0x58>)
     a9c:	4a0d      	ldr	r2, [pc, #52]	; (ad4 <system_apb_clock_set_mask+0x58>)
     a9e:	6991      	ldr	r1, [r2, #24]
     aa0:	683a      	ldr	r2, [r7, #0]
     aa2:	430a      	orrs	r2, r1
     aa4:	619a      	str	r2, [r3, #24]
			break;
     aa6:	e00f      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     aa8:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aaa:	4a0a      	ldr	r2, [pc, #40]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aac:	69d1      	ldr	r1, [r2, #28]
     aae:	683a      	ldr	r2, [r7, #0]
     ab0:	430a      	orrs	r2, r1
     ab2:	61da      	str	r2, [r3, #28]
			break;
     ab4:	e008      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ab6:	4b07      	ldr	r3, [pc, #28]	; (ad4 <system_apb_clock_set_mask+0x58>)
     ab8:	4a06      	ldr	r2, [pc, #24]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aba:	6a11      	ldr	r1, [r2, #32]
     abc:	683a      	ldr	r2, [r7, #0]
     abe:	430a      	orrs	r2, r1
     ac0:	621a      	str	r2, [r3, #32]
			break;
     ac2:	e001      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ac4:	2317      	movs	r3, #23
     ac6:	e000      	b.n	aca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ac8:	2300      	movs	r3, #0
}
     aca:	0018      	movs	r0, r3
     acc:	46bd      	mov	sp, r7
     ace:	b002      	add	sp, #8
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	40000400 	.word	0x40000400

00000ad8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <system_is_debugger_present+0x1c>)
     ade:	789b      	ldrb	r3, [r3, #2]
     ae0:	b2db      	uxtb	r3, r3
     ae2:	001a      	movs	r2, r3
     ae4:	2302      	movs	r3, #2
     ae6:	4013      	ands	r3, r2
     ae8:	1e5a      	subs	r2, r3, #1
     aea:	4193      	sbcs	r3, r2
     aec:	b2db      	uxtb	r3, r3
}
     aee:	0018      	movs	r0, r3
     af0:	46bd      	mov	sp, r7
     af2:	bd80      	pop	{r7, pc}
     af4:	41002000 	.word	0x41002000

00000af8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     af8:	b580      	push	{r7, lr}
     afa:	b084      	sub	sp, #16
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	7e1b      	ldrb	r3, [r3, #24]
     b0a:	b2db      	uxtb	r3, r3
     b0c:	001a      	movs	r2, r3
     b0e:	2301      	movs	r3, #1
     b10:	4013      	ands	r3, r2
     b12:	1e5a      	subs	r2, r3, #1
     b14:	4193      	sbcs	r3, r2
     b16:	b2db      	uxtb	r3, r3
}
     b18:	0018      	movs	r0, r3
     b1a:	46bd      	mov	sp, r7
     b1c:	b004      	add	sp, #16
     b1e:	bd80      	pop	{r7, pc}

00000b20 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     b20:	b580      	push	{r7, lr}
     b22:	b084      	sub	sp, #16
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	7e1b      	ldrb	r3, [r3, #24]
     b32:	b2db      	uxtb	r3, r3
     b34:	001a      	movs	r2, r3
     b36:	2304      	movs	r3, #4
     b38:	4013      	ands	r3, r2
     b3a:	1e5a      	subs	r2, r3, #1
     b3c:	4193      	sbcs	r3, r2
     b3e:	b2db      	uxtb	r3, r3
}
     b40:	0018      	movs	r0, r3
     b42:	46bd      	mov	sp, r7
     b44:	b004      	add	sp, #16
     b46:	bd80      	pop	{r7, pc}

00000b48 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b084      	sub	sp, #16
     b4c:	af00      	add	r7, sp, #0
     b4e:	6078      	str	r0, [r7, #4]
     b50:	000a      	movs	r2, r1
     b52:	1cbb      	adds	r3, r7, #2
     b54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	0018      	movs	r0, r3
     b60:	4b0a      	ldr	r3, [pc, #40]	; (b8c <spi_write+0x44>)
     b62:	4798      	blx	r3
     b64:	0003      	movs	r3, r0
     b66:	001a      	movs	r2, r3
     b68:	2301      	movs	r3, #1
     b6a:	4053      	eors	r3, r2
     b6c:	b2db      	uxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	d001      	beq.n	b76 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     b72:	2305      	movs	r3, #5
     b74:	e006      	b.n	b84 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b76:	1cbb      	adds	r3, r7, #2
     b78:	881b      	ldrh	r3, [r3, #0]
     b7a:	05db      	lsls	r3, r3, #23
     b7c:	0dda      	lsrs	r2, r3, #23
     b7e:	68fb      	ldr	r3, [r7, #12]
     b80:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     b82:	2300      	movs	r3, #0
}
     b84:	0018      	movs	r0, r3
     b86:	46bd      	mov	sp, r7
     b88:	b004      	add	sp, #16
     b8a:	bd80      	pop	{r7, pc}
     b8c:	00000af9 	.word	0x00000af9

00000b90 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     b90:	b580      	push	{r7, lr}
     b92:	b084      	sub	sp, #16
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
     b98:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	0018      	movs	r0, r3
     ba4:	4b1d      	ldr	r3, [pc, #116]	; (c1c <spi_read+0x8c>)
     ba6:	4798      	blx	r3
     ba8:	0003      	movs	r3, r0
     baa:	001a      	movs	r2, r3
     bac:	2301      	movs	r3, #1
     bae:	4053      	eors	r3, r2
     bb0:	b2db      	uxtb	r3, r3
     bb2:	2b00      	cmp	r3, #0
     bb4:	d001      	beq.n	bba <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     bb6:	2310      	movs	r3, #16
     bb8:	e02c      	b.n	c14 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     bba:	230f      	movs	r3, #15
     bbc:	18fb      	adds	r3, r7, r3
     bbe:	2200      	movs	r2, #0
     bc0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	8b5b      	ldrh	r3, [r3, #26]
     bc6:	b29b      	uxth	r3, r3
     bc8:	001a      	movs	r2, r3
     bca:	2304      	movs	r3, #4
     bcc:	4013      	ands	r3, r2
     bce:	d00b      	beq.n	be8 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     bd0:	230f      	movs	r3, #15
     bd2:	18fb      	adds	r3, r7, r3
     bd4:	221e      	movs	r2, #30
     bd6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     bd8:	68bb      	ldr	r3, [r7, #8]
     bda:	8b5b      	ldrh	r3, [r3, #26]
     bdc:	b29b      	uxth	r3, r3
     bde:	2204      	movs	r2, #4
     be0:	4313      	orrs	r3, r2
     be2:	b29a      	uxth	r2, r3
     be4:	68bb      	ldr	r3, [r7, #8]
     be6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	799b      	ldrb	r3, [r3, #6]
     bec:	2b01      	cmp	r3, #1
     bee:	d108      	bne.n	c02 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     bf0:	68bb      	ldr	r3, [r7, #8]
     bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bf4:	b29b      	uxth	r3, r3
     bf6:	05db      	lsls	r3, r3, #23
     bf8:	0ddb      	lsrs	r3, r3, #23
     bfa:	b29a      	uxth	r2, r3
     bfc:	683b      	ldr	r3, [r7, #0]
     bfe:	801a      	strh	r2, [r3, #0]
     c00:	e005      	b.n	c0e <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c02:	68bb      	ldr	r3, [r7, #8]
     c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c06:	b2db      	uxtb	r3, r3
     c08:	b29a      	uxth	r2, r3
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     c0e:	230f      	movs	r3, #15
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b004      	add	sp, #16
     c1a:	bd80      	pop	{r7, pc}
     c1c:	00000b21 	.word	0x00000b21

00000c20 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     c20:	b590      	push	{r4, r7, lr}
     c22:	b093      	sub	sp, #76	; 0x4c
     c24:	af00      	add	r7, sp, #0
     c26:	6078      	str	r0, [r7, #4]
     c28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     c36:	231c      	movs	r3, #28
     c38:	18fb      	adds	r3, r7, r3
     c3a:	0018      	movs	r0, r3
     c3c:	4b85      	ldr	r3, [pc, #532]	; (e54 <_spi_set_config+0x234>)
     c3e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c40:	231c      	movs	r3, #28
     c42:	18fb      	adds	r3, r7, r3
     c44:	2200      	movs	r2, #0
     c46:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     c48:	683b      	ldr	r3, [r7, #0]
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d103      	bne.n	c58 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c50:	231c      	movs	r3, #28
     c52:	18fb      	adds	r3, r7, r3
     c54:	2200      	movs	r2, #0
     c56:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     c58:	683b      	ldr	r3, [r7, #0]
     c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c5c:	230c      	movs	r3, #12
     c5e:	18fb      	adds	r3, r7, r3
     c60:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     c62:	683b      	ldr	r3, [r7, #0]
     c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c66:	230c      	movs	r3, #12
     c68:	18fb      	adds	r3, r7, r3
     c6a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c70:	230c      	movs	r3, #12
     c72:	18fb      	adds	r3, r7, r3
     c74:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c76:	683b      	ldr	r3, [r7, #0]
     c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c7a:	230c      	movs	r3, #12
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c80:	2347      	movs	r3, #71	; 0x47
     c82:	18fb      	adds	r3, r7, r3
     c84:	2200      	movs	r2, #0
     c86:	701a      	strb	r2, [r3, #0]
     c88:	e02c      	b.n	ce4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c8a:	2347      	movs	r3, #71	; 0x47
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	781a      	ldrb	r2, [r3, #0]
     c90:	230c      	movs	r3, #12
     c92:	18fb      	adds	r3, r7, r3
     c94:	0092      	lsls	r2, r2, #2
     c96:	58d3      	ldr	r3, [r2, r3]
     c98:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c9c:	2b00      	cmp	r3, #0
     c9e:	d109      	bne.n	cb4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ca0:	2347      	movs	r3, #71	; 0x47
     ca2:	18fb      	adds	r3, r7, r3
     ca4:	781a      	ldrb	r2, [r3, #0]
     ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ca8:	0011      	movs	r1, r2
     caa:	0018      	movs	r0, r3
     cac:	4b6a      	ldr	r3, [pc, #424]	; (e58 <_spi_set_config+0x238>)
     cae:	4798      	blx	r3
     cb0:	0003      	movs	r3, r0
     cb2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cb6:	3301      	adds	r3, #1
     cb8:	d00d      	beq.n	cd6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cbc:	b2da      	uxtb	r2, r3
     cbe:	231c      	movs	r3, #28
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cc6:	0c1b      	lsrs	r3, r3, #16
     cc8:	b2db      	uxtb	r3, r3
     cca:	221c      	movs	r2, #28
     ccc:	18ba      	adds	r2, r7, r2
     cce:	0011      	movs	r1, r2
     cd0:	0018      	movs	r0, r3
     cd2:	4b62      	ldr	r3, [pc, #392]	; (e5c <_spi_set_config+0x23c>)
     cd4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cd6:	2347      	movs	r3, #71	; 0x47
     cd8:	18fb      	adds	r3, r7, r3
     cda:	781a      	ldrb	r2, [r3, #0]
     cdc:	2347      	movs	r3, #71	; 0x47
     cde:	18fb      	adds	r3, r7, r3
     ce0:	3201      	adds	r2, #1
     ce2:	701a      	strb	r2, [r3, #0]
     ce4:	2347      	movs	r3, #71	; 0x47
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b03      	cmp	r3, #3
     cec:	d9cd      	bls.n	c8a <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	781a      	ldrb	r2, [r3, #0]
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	7c1a      	ldrb	r2, [r3, #16]
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     cfe:	683b      	ldr	r3, [r7, #0]
     d00:	7c9a      	ldrb	r2, [r3, #18]
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     d06:	683b      	ldr	r3, [r7, #0]
     d08:	7d1a      	ldrb	r2, [r3, #20]
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     d0e:	230a      	movs	r3, #10
     d10:	18fb      	adds	r3, r7, r3
     d12:	2200      	movs	r2, #0
     d14:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     d16:	2300      	movs	r3, #0
     d18:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     d1a:	2300      	movs	r3, #0
     d1c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     d1e:	683b      	ldr	r3, [r7, #0]
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	2b01      	cmp	r3, #1
     d24:	d129      	bne.n	d7a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	0018      	movs	r0, r3
     d2c:	4b4c      	ldr	r3, [pc, #304]	; (e60 <_spi_set_config+0x240>)
     d2e:	4798      	blx	r3
     d30:	0003      	movs	r3, r0
     d32:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d36:	3314      	adds	r3, #20
     d38:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d3c:	b2db      	uxtb	r3, r3
     d3e:	0018      	movs	r0, r3
     d40:	4b48      	ldr	r3, [pc, #288]	; (e64 <_spi_set_config+0x244>)
     d42:	4798      	blx	r3
     d44:	0003      	movs	r3, r0
     d46:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     d48:	683b      	ldr	r3, [r7, #0]
     d4a:	699b      	ldr	r3, [r3, #24]
     d4c:	2223      	movs	r2, #35	; 0x23
     d4e:	18bc      	adds	r4, r7, r2
     d50:	220a      	movs	r2, #10
     d52:	18ba      	adds	r2, r7, r2
     d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d56:	0018      	movs	r0, r3
     d58:	4b43      	ldr	r3, [pc, #268]	; (e68 <_spi_set_config+0x248>)
     d5a:	4798      	blx	r3
     d5c:	0003      	movs	r3, r0
     d5e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     d60:	2323      	movs	r3, #35	; 0x23
     d62:	18fb      	adds	r3, r7, r3
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	2b00      	cmp	r3, #0
     d68:	d001      	beq.n	d6e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     d6a:	2317      	movs	r3, #23
     d6c:	e06d      	b.n	e4a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     d6e:	230a      	movs	r3, #10
     d70:	18fb      	adds	r3, r7, r3
     d72:	881b      	ldrh	r3, [r3, #0]
     d74:	b2da      	uxtb	r2, r3
     d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d78:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d7a:	683b      	ldr	r3, [r7, #0]
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b00      	cmp	r3, #0
     d80:	d11a      	bne.n	db8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     d82:	683b      	ldr	r3, [r7, #0]
     d84:	699b      	ldr	r3, [r3, #24]
     d86:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     d88:	683b      	ldr	r3, [r7, #0]
     d8a:	8b9b      	ldrh	r3, [r3, #28]
     d8c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	7f92      	ldrb	r2, [r2, #30]
     d96:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     d98:	683a      	ldr	r2, [r7, #0]
     d9a:	7fd2      	ldrb	r2, [r2, #31]
     d9c:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d9e:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     da0:	431a      	orrs	r2, r3
     da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     da4:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     da6:	683b      	ldr	r3, [r7, #0]
     da8:	2220      	movs	r2, #32
     daa:	5c9b      	ldrb	r3, [r3, r2]
     dac:	2b00      	cmp	r3, #0
     dae:	d003      	beq.n	db8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     db2:	2240      	movs	r2, #64	; 0x40
     db4:	4313      	orrs	r3, r2
     db6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     db8:	683b      	ldr	r3, [r7, #0]
     dba:	685b      	ldr	r3, [r3, #4]
     dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dbe:	4313      	orrs	r3, r2
     dc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     dc2:	683b      	ldr	r3, [r7, #0]
     dc4:	689b      	ldr	r3, [r3, #8]
     dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dc8:	4313      	orrs	r3, r2
     dca:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     dcc:	683b      	ldr	r3, [r7, #0]
     dce:	68db      	ldr	r3, [r3, #12]
     dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dd2:	4313      	orrs	r3, r2
     dd4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     dd6:	683b      	ldr	r3, [r7, #0]
     dd8:	7c1b      	ldrb	r3, [r3, #16]
     dda:	001a      	movs	r2, r3
     ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dde:	4313      	orrs	r3, r2
     de0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     de2:	683b      	ldr	r3, [r7, #0]
     de4:	7c5b      	ldrb	r3, [r3, #17]
     de6:	2b00      	cmp	r3, #0
     de8:	d103      	bne.n	df2 <_spi_set_config+0x1d2>
     dea:	4b20      	ldr	r3, [pc, #128]	; (e6c <_spi_set_config+0x24c>)
     dec:	4798      	blx	r3
     dee:	1e03      	subs	r3, r0, #0
     df0:	d003      	beq.n	dfa <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     df4:	2280      	movs	r2, #128	; 0x80
     df6:	4313      	orrs	r3, r2
     df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     dfa:	683b      	ldr	r3, [r7, #0]
     dfc:	7c9b      	ldrb	r3, [r3, #18]
     dfe:	2b00      	cmp	r3, #0
     e00:	d004      	beq.n	e0c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e04:	2280      	movs	r2, #128	; 0x80
     e06:	0292      	lsls	r2, r2, #10
     e08:	4313      	orrs	r3, r2
     e0a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     e0c:	683b      	ldr	r3, [r7, #0]
     e0e:	7cdb      	ldrb	r3, [r3, #19]
     e10:	2b00      	cmp	r3, #0
     e12:	d004      	beq.n	e1e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e16:	2280      	movs	r2, #128	; 0x80
     e18:	0092      	lsls	r2, r2, #2
     e1a:	4313      	orrs	r3, r2
     e1c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     e1e:	683b      	ldr	r3, [r7, #0]
     e20:	7d1b      	ldrb	r3, [r3, #20]
     e22:	2b00      	cmp	r3, #0
     e24:	d004      	beq.n	e30 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e28:	2280      	movs	r2, #128	; 0x80
     e2a:	0192      	lsls	r2, r2, #6
     e2c:	4313      	orrs	r3, r2
     e2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e32:	681a      	ldr	r2, [r3, #0]
     e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e36:	431a      	orrs	r2, r3
     e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3e:	685a      	ldr	r2, [r3, #4]
     e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e42:	431a      	orrs	r2, r3
     e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e46:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     e48:	2300      	movs	r3, #0
}
     e4a:	0018      	movs	r0, r3
     e4c:	46bd      	mov	sp, r7
     e4e:	b013      	add	sp, #76	; 0x4c
     e50:	bd90      	pop	{r4, r7, pc}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	000008e9 	.word	0x000008e9
     e58:	000006dd 	.word	0x000006dd
     e5c:	00005285 	.word	0x00005285
     e60:	00000899 	.word	0x00000899
     e64:	000050bd 	.word	0x000050bd
     e68:	000005d5 	.word	0x000005d5
     e6c:	00000ad9 	.word	0x00000ad9

00000e70 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     e70:	b590      	push	{r4, r7, lr}
     e72:	b091      	sub	sp, #68	; 0x44
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     e86:	683b      	ldr	r3, [r7, #0]
     e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e8a:	230c      	movs	r3, #12
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     e90:	683b      	ldr	r3, [r7, #0]
     e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e94:	230c      	movs	r3, #12
     e96:	18fb      	adds	r3, r7, r3
     e98:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     e9a:	683b      	ldr	r3, [r7, #0]
     e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e9e:	230c      	movs	r3, #12
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     ea4:	683b      	ldr	r3, [r7, #0]
     ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     ea8:	230c      	movs	r3, #12
     eaa:	18fb      	adds	r3, r7, r3
     eac:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     eae:	233f      	movs	r3, #63	; 0x3f
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	2200      	movs	r2, #0
     eb4:	701a      	strb	r2, [r3, #0]
     eb6:	e030      	b.n	f1a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eb8:	233f      	movs	r3, #63	; 0x3f
     eba:	18fb      	adds	r3, r7, r3
     ebc:	781a      	ldrb	r2, [r3, #0]
     ebe:	230c      	movs	r3, #12
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	0092      	lsls	r2, r2, #2
     ec4:	58d3      	ldr	r3, [r2, r3]
     ec6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eca:	2b00      	cmp	r3, #0
     ecc:	d109      	bne.n	ee2 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ece:	233f      	movs	r3, #63	; 0x3f
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	781a      	ldrb	r2, [r3, #0]
     ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ed6:	0011      	movs	r1, r2
     ed8:	0018      	movs	r0, r3
     eda:	4b6e      	ldr	r3, [pc, #440]	; (1094 <_spi_check_config+0x224>)
     edc:	4798      	blx	r3
     ede:	0003      	movs	r3, r0
     ee0:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee4:	3301      	adds	r3, #1
     ee6:	d010      	beq.n	f0a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eea:	041b      	lsls	r3, r3, #16
     eec:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef0:	0c1b      	lsrs	r3, r3, #16
     ef2:	b2db      	uxtb	r3, r3
     ef4:	0018      	movs	r0, r3
     ef6:	4b68      	ldr	r3, [pc, #416]	; (1098 <_spi_check_config+0x228>)
     ef8:	4798      	blx	r3
     efa:	0003      	movs	r3, r0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     efc:	429c      	cmp	r4, r3
     efe:	d005      	beq.n	f0c <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2200      	movs	r2, #0
     f04:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     f06:	231c      	movs	r3, #28
     f08:	e0bf      	b.n	108a <_spi_check_config+0x21a>
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
     f0a:	46c0      	nop			; (mov r8, r8)
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f0c:	233f      	movs	r3, #63	; 0x3f
     f0e:	18fb      	adds	r3, r7, r3
     f10:	781a      	ldrb	r2, [r3, #0]
     f12:	233f      	movs	r3, #63	; 0x3f
     f14:	18fb      	adds	r3, r7, r3
     f16:	3201      	adds	r2, #1
     f18:	701a      	strb	r2, [r3, #0]
     f1a:	233f      	movs	r3, #63	; 0x3f
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2b03      	cmp	r3, #3
     f22:	d9c9      	bls.n	eb8 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     f24:	2013      	movs	r0, #19
     f26:	4b5d      	ldr	r3, [pc, #372]	; (109c <_spi_check_config+0x22c>)
     f28:	4798      	blx	r3
     f2a:	0003      	movs	r3, r0
     f2c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     f2e:	2300      	movs	r3, #0
     f30:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     f32:	2300      	movs	r3, #0
     f34:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
     f36:	2300      	movs	r3, #0
     f38:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f3a:	683b      	ldr	r3, [r7, #0]
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	2b01      	cmp	r3, #1
     f40:	d121      	bne.n	f86 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     f42:	683b      	ldr	r3, [r7, #0]
     f44:	699b      	ldr	r3, [r3, #24]
     f46:	221f      	movs	r2, #31
     f48:	18bc      	adds	r4, r7, r2
     f4a:	220a      	movs	r2, #10
     f4c:	18ba      	adds	r2, r7, r2
     f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     f50:	0018      	movs	r0, r3
     f52:	4b53      	ldr	r3, [pc, #332]	; (10a0 <_spi_check_config+0x230>)
     f54:	4798      	blx	r3
     f56:	0003      	movs	r3, r0
     f58:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     f5a:	231f      	movs	r3, #31
     f5c:	18fb      	adds	r3, r7, r3
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b00      	cmp	r3, #0
     f62:	d001      	beq.n	f68 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     f64:	2317      	movs	r3, #23
     f66:	e090      	b.n	108a <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f6a:	7b1b      	ldrb	r3, [r3, #12]
     f6c:	b2da      	uxtb	r2, r3
     f6e:	230a      	movs	r3, #10
     f70:	18fb      	adds	r3, r7, r3
     f72:	881b      	ldrh	r3, [r3, #0]
     f74:	b2db      	uxtb	r3, r3
     f76:	429a      	cmp	r2, r3
     f78:	d001      	beq.n	f7e <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     f7a:	231c      	movs	r3, #28
     f7c:	e085      	b.n	108a <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f80:	220c      	movs	r2, #12
     f82:	4313      	orrs	r3, r2
     f84:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     f86:	683b      	ldr	r3, [r7, #0]
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d129      	bne.n	fe2 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     f8e:	683b      	ldr	r3, [r7, #0]
     f90:	699b      	ldr	r3, [r3, #24]
     f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f94:	4313      	orrs	r3, r2
     f96:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	8b9b      	ldrh	r3, [r3, #28]
     f9c:	001a      	movs	r2, r3
     f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa0:	4313      	orrs	r3, r2
     fa2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fa4:	683b      	ldr	r3, [r7, #0]
     fa6:	7f9b      	ldrb	r3, [r3, #30]
     fa8:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     faa:	683b      	ldr	r3, [r7, #0]
     fac:	7fdb      	ldrb	r3, [r3, #31]
     fae:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fb0:	4313      	orrs	r3, r2
     fb2:	001a      	movs	r2, r3
     fb4:	6a3b      	ldr	r3, [r7, #32]
     fb6:	4313      	orrs	r3, r2
     fb8:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fbc:	681a      	ldr	r2, [r3, #0]
     fbe:	6a3b      	ldr	r3, [r7, #32]
     fc0:	429a      	cmp	r2, r3
     fc2:	d001      	beq.n	fc8 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
     fc4:	231c      	movs	r3, #28
     fc6:	e060      	b.n	108a <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	2220      	movs	r2, #32
     fcc:	5c9b      	ldrb	r3, [r3, r2]
     fce:	2b00      	cmp	r3, #0
     fd0:	d003      	beq.n	fda <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fd4:	2240      	movs	r2, #64	; 0x40
     fd6:	4313      	orrs	r3, r2
     fd8:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fdc:	2208      	movs	r2, #8
     fde:	4313      	orrs	r3, r2
     fe0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     fe8:	4313      	orrs	r3, r2
     fea:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	689b      	ldr	r3, [r3, #8]
     ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ff2:	4313      	orrs	r3, r2
     ff4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ffc:	4313      	orrs	r3, r2
     ffe:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1000:	683b      	ldr	r3, [r7, #0]
    1002:	7c1b      	ldrb	r3, [r3, #16]
    1004:	001a      	movs	r2, r3
    1006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1008:	4313      	orrs	r3, r2
    100a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	7c5b      	ldrb	r3, [r3, #17]
    1010:	2b00      	cmp	r3, #0
    1012:	d003      	beq.n	101c <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1016:	2280      	movs	r2, #128	; 0x80
    1018:	4313      	orrs	r3, r2
    101a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    101c:	683b      	ldr	r3, [r7, #0]
    101e:	7c9b      	ldrb	r3, [r3, #18]
    1020:	2b00      	cmp	r3, #0
    1022:	d004      	beq.n	102e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	0292      	lsls	r2, r2, #10
    102a:	4313      	orrs	r3, r2
    102c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	7cdb      	ldrb	r3, [r3, #19]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0092      	lsls	r2, r2, #2
    103c:	4313      	orrs	r3, r2
    103e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	7d1b      	ldrb	r3, [r3, #20]
    1044:	2b00      	cmp	r3, #0
    1046:	d004      	beq.n	1052 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104a:	2280      	movs	r2, #128	; 0x80
    104c:	0192      	lsls	r2, r2, #6
    104e:	4313      	orrs	r3, r2
    1050:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1054:	2202      	movs	r2, #2
    1056:	4313      	orrs	r3, r2
    1058:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    105c:	681a      	ldr	r2, [r3, #0]
    105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1060:	429a      	cmp	r2, r3
    1062:	d10e      	bne.n	1082 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    1064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1066:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    106a:	429a      	cmp	r2, r3
    106c:	d109      	bne.n	1082 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	781a      	ldrb	r2, [r3, #0]
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	7c1a      	ldrb	r2, [r3, #16]
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    107e:	2300      	movs	r3, #0
    1080:	e003      	b.n	108a <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	2200      	movs	r2, #0
    1086:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1088:	231c      	movs	r3, #28
}
    108a:	0018      	movs	r0, r3
    108c:	46bd      	mov	sp, r7
    108e:	b011      	add	sp, #68	; 0x44
    1090:	bd90      	pop	{r4, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000006dd 	.word	0x000006dd
    1098:	00000971 	.word	0x00000971
    109c:	000050bd 	.word	0x000050bd
    10a0:	000005d5 	.word	0x000005d5

000010a4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b08a      	sub	sp, #40	; 0x28
    10a8:	af00      	add	r7, sp, #0
    10aa:	60f8      	str	r0, [r7, #12]
    10ac:	60b9      	str	r1, [r7, #8]
    10ae:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	68ba      	ldr	r2, [r7, #8]
    10b4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	2202      	movs	r2, #2
    10c2:	4013      	ands	r3, r2
    10c4:	d007      	beq.n	10d6 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    10c6:	687a      	ldr	r2, [r7, #4]
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	0011      	movs	r1, r2
    10cc:	0018      	movs	r0, r3
    10ce:	4b2f      	ldr	r3, [pc, #188]	; (118c <spi_init+0xe8>)
    10d0:	4798      	blx	r3
    10d2:	0003      	movs	r3, r0
    10d4:	e055      	b.n	1182 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    10d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	2201      	movs	r2, #1
    10dc:	4013      	ands	r3, r2
    10de:	d001      	beq.n	10e4 <spi_init+0x40>
		return STATUS_BUSY;
    10e0:	2305      	movs	r3, #5
    10e2:	e04e      	b.n	1182 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	0018      	movs	r0, r3
    10ea:	4b29      	ldr	r3, [pc, #164]	; (1190 <spi_init+0xec>)
    10ec:	4798      	blx	r3
    10ee:	0003      	movs	r3, r0
    10f0:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10f2:	6a3b      	ldr	r3, [r7, #32]
    10f4:	3302      	adds	r3, #2
    10f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f8:	6a3b      	ldr	r3, [r7, #32]
    10fa:	3314      	adds	r3, #20
    10fc:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10fe:	2201      	movs	r2, #1
    1100:	69fb      	ldr	r3, [r7, #28]
    1102:	409a      	lsls	r2, r3
    1104:	0013      	movs	r3, r2
    1106:	0019      	movs	r1, r3
    1108:	2002      	movs	r0, #2
    110a:	4b22      	ldr	r3, [pc, #136]	; (1194 <spi_init+0xf0>)
    110c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    110e:	2314      	movs	r3, #20
    1110:	18fb      	adds	r3, r7, r3
    1112:	0018      	movs	r0, r3
    1114:	4b20      	ldr	r3, [pc, #128]	; (1198 <spi_init+0xf4>)
    1116:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	2224      	movs	r2, #36	; 0x24
    111c:	5c9a      	ldrb	r2, [r3, r2]
    111e:	2314      	movs	r3, #20
    1120:	18fb      	adds	r3, r7, r3
    1122:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1124:	69bb      	ldr	r3, [r7, #24]
    1126:	b2db      	uxtb	r3, r3
    1128:	2214      	movs	r2, #20
    112a:	18ba      	adds	r2, r7, r2
    112c:	0011      	movs	r1, r2
    112e:	0018      	movs	r0, r3
    1130:	4b1a      	ldr	r3, [pc, #104]	; (119c <spi_init+0xf8>)
    1132:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1134:	69bb      	ldr	r3, [r7, #24]
    1136:	b2db      	uxtb	r3, r3
    1138:	0018      	movs	r0, r3
    113a:	4b19      	ldr	r3, [pc, #100]	; (11a0 <spi_init+0xfc>)
    113c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	2224      	movs	r2, #36	; 0x24
    1142:	5c9b      	ldrb	r3, [r3, r2]
    1144:	2100      	movs	r1, #0
    1146:	0018      	movs	r0, r3
    1148:	4b16      	ldr	r3, [pc, #88]	; (11a4 <spi_init+0x100>)
    114a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	2b01      	cmp	r3, #1
    1152:	d105      	bne.n	1160 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	220c      	movs	r2, #12
    115a:	431a      	orrs	r2, r3
    115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    115e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d105      	bne.n	1174 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	2208      	movs	r2, #8
    116e:	431a      	orrs	r2, r3
    1170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1172:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1174:	687a      	ldr	r2, [r7, #4]
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	0011      	movs	r1, r2
    117a:	0018      	movs	r0, r3
    117c:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <spi_init+0x104>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
}
    1182:	0018      	movs	r0, r3
    1184:	46bd      	mov	sp, r7
    1186:	b00a      	add	sp, #40	; 0x28
    1188:	bd80      	pop	{r7, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000e71 	.word	0x00000e71
    1190:	00000899 	.word	0x00000899
    1194:	00000a7d 	.word	0x00000a7d
    1198:	00000a65 	.word	0x00000a65
    119c:	00004f99 	.word	0x00004f99
    11a0:	00004fdd 	.word	0x00004fdd
    11a4:	00000651 	.word	0x00000651
    11a8:	00000c21 	.word	0x00000c21

000011ac <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    11ac:	b590      	push	{r4, r7, lr}
    11ae:	b087      	sub	sp, #28
    11b0:	af00      	add	r7, sp, #0
    11b2:	60f8      	str	r0, [r7, #12]
    11b4:	607a      	str	r2, [r7, #4]
    11b6:	230a      	movs	r3, #10
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	1c0a      	adds	r2, r1, #0
    11bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	79db      	ldrb	r3, [r3, #7]
    11c2:	2201      	movs	r2, #1
    11c4:	4053      	eors	r3, r2
    11c6:	b2db      	uxtb	r3, r3
    11c8:	2b00      	cmp	r3, #0
    11ca:	d001      	beq.n	11d0 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    11cc:	231c      	movs	r3, #28
    11ce:	e07c      	b.n	12ca <spi_transceive_wait+0x11e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    11d0:	2315      	movs	r3, #21
    11d2:	18fb      	adds	r3, r7, r3
    11d4:	2200      	movs	r2, #0
    11d6:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	795b      	ldrb	r3, [r3, #5]
    11dc:	2b00      	cmp	r3, #0
    11de:	d121      	bne.n	1224 <spi_transceive_wait+0x78>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    11e0:	2316      	movs	r3, #22
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	2200      	movs	r2, #0
    11e6:	801a      	strh	r2, [r3, #0]
    11e8:	e014      	b.n	1214 <spi_transceive_wait+0x68>
			if (spi_is_ready_to_write(module)) {
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	0018      	movs	r0, r3
    11ee:	4b39      	ldr	r3, [pc, #228]	; (12d4 <spi_transceive_wait+0x128>)
    11f0:	4798      	blx	r3
    11f2:	1e03      	subs	r3, r0, #0
    11f4:	d115      	bne.n	1222 <spi_transceive_wait+0x76>
				break;
			} else if (j == SPI_TIMEOUT) {
    11f6:	2316      	movs	r3, #22
    11f8:	18fb      	adds	r3, r7, r3
    11fa:	881b      	ldrh	r3, [r3, #0]
    11fc:	4a36      	ldr	r2, [pc, #216]	; (12d8 <spi_transceive_wait+0x12c>)
    11fe:	4293      	cmp	r3, r2
    1200:	d101      	bne.n	1206 <spi_transceive_wait+0x5a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1202:	2312      	movs	r3, #18
    1204:	e061      	b.n	12ca <spi_transceive_wait+0x11e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1206:	2316      	movs	r3, #22
    1208:	18fb      	adds	r3, r7, r3
    120a:	881a      	ldrh	r2, [r3, #0]
    120c:	2316      	movs	r3, #22
    120e:	18fb      	adds	r3, r7, r3
    1210:	3201      	adds	r2, #1
    1212:	801a      	strh	r2, [r3, #0]
    1214:	2316      	movs	r3, #22
    1216:	18fb      	adds	r3, r7, r3
    1218:	881b      	ldrh	r3, [r3, #0]
    121a:	4a2f      	ldr	r2, [pc, #188]	; (12d8 <spi_transceive_wait+0x12c>)
    121c:	4293      	cmp	r3, r2
    121e:	d9e4      	bls.n	11ea <spi_transceive_wait+0x3e>
    1220:	e000      	b.n	1224 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
				break;
    1222:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    1224:	46c0      	nop			; (mov r8, r8)
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	0018      	movs	r0, r3
    122a:	4b2a      	ldr	r3, [pc, #168]	; (12d4 <spi_transceive_wait+0x128>)
    122c:	4798      	blx	r3
    122e:	0003      	movs	r3, r0
    1230:	001a      	movs	r2, r3
    1232:	2301      	movs	r3, #1
    1234:	4053      	eors	r3, r2
    1236:	b2db      	uxtb	r3, r3
    1238:	2b00      	cmp	r3, #0
    123a:	d1f4      	bne.n	1226 <spi_transceive_wait+0x7a>
	}

	/* Write data */
	spi_write(module, tx_data);
    123c:	230a      	movs	r3, #10
    123e:	18fb      	adds	r3, r7, r3
    1240:	881a      	ldrh	r2, [r3, #0]
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	0011      	movs	r1, r2
    1246:	0018      	movs	r0, r3
    1248:	4b24      	ldr	r3, [pc, #144]	; (12dc <spi_transceive_wait+0x130>)
    124a:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    124c:	68fb      	ldr	r3, [r7, #12]
    124e:	795b      	ldrb	r3, [r3, #5]
    1250:	2b00      	cmp	r3, #0
    1252:	d121      	bne.n	1298 <spi_transceive_wait+0xec>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1254:	2316      	movs	r3, #22
    1256:	18fb      	adds	r3, r7, r3
    1258:	2200      	movs	r2, #0
    125a:	801a      	strh	r2, [r3, #0]
    125c:	e014      	b.n	1288 <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    125e:	68fb      	ldr	r3, [r7, #12]
    1260:	0018      	movs	r0, r3
    1262:	4b1f      	ldr	r3, [pc, #124]	; (12e0 <spi_transceive_wait+0x134>)
    1264:	4798      	blx	r3
    1266:	1e03      	subs	r3, r0, #0
    1268:	d115      	bne.n	1296 <spi_transceive_wait+0xea>
				break;
			} else if (j == SPI_TIMEOUT) {
    126a:	2316      	movs	r3, #22
    126c:	18fb      	adds	r3, r7, r3
    126e:	881b      	ldrh	r3, [r3, #0]
    1270:	4a19      	ldr	r2, [pc, #100]	; (12d8 <spi_transceive_wait+0x12c>)
    1272:	4293      	cmp	r3, r2
    1274:	d101      	bne.n	127a <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1276:	2312      	movs	r3, #18
    1278:	e027      	b.n	12ca <spi_transceive_wait+0x11e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    127a:	2316      	movs	r3, #22
    127c:	18fb      	adds	r3, r7, r3
    127e:	881a      	ldrh	r2, [r3, #0]
    1280:	2316      	movs	r3, #22
    1282:	18fb      	adds	r3, r7, r3
    1284:	3201      	adds	r2, #1
    1286:	801a      	strh	r2, [r3, #0]
    1288:	2316      	movs	r3, #22
    128a:	18fb      	adds	r3, r7, r3
    128c:	881b      	ldrh	r3, [r3, #0]
    128e:	4a12      	ldr	r2, [pc, #72]	; (12d8 <spi_transceive_wait+0x12c>)
    1290:	4293      	cmp	r3, r2
    1292:	d9e4      	bls.n	125e <spi_transceive_wait+0xb2>
    1294:	e000      	b.n	1298 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
				break;
    1296:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1298:	46c0      	nop			; (mov r8, r8)
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	0018      	movs	r0, r3
    129e:	4b10      	ldr	r3, [pc, #64]	; (12e0 <spi_transceive_wait+0x134>)
    12a0:	4798      	blx	r3
    12a2:	0003      	movs	r3, r0
    12a4:	001a      	movs	r2, r3
    12a6:	2301      	movs	r3, #1
    12a8:	4053      	eors	r3, r2
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b00      	cmp	r3, #0
    12ae:	d1f4      	bne.n	129a <spi_transceive_wait+0xee>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    12b0:	2315      	movs	r3, #21
    12b2:	18fc      	adds	r4, r7, r3
    12b4:	687a      	ldr	r2, [r7, #4]
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	0011      	movs	r1, r2
    12ba:	0018      	movs	r0, r3
    12bc:	4b09      	ldr	r3, [pc, #36]	; (12e4 <spi_transceive_wait+0x138>)
    12be:	4798      	blx	r3
    12c0:	0003      	movs	r3, r0
    12c2:	7023      	strb	r3, [r4, #0]

	return retval;
    12c4:	2315      	movs	r3, #21
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	781b      	ldrb	r3, [r3, #0]
}
    12ca:	0018      	movs	r0, r3
    12cc:	46bd      	mov	sp, r7
    12ce:	b007      	add	sp, #28
    12d0:	bd90      	pop	{r4, r7, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	00000af9 	.word	0x00000af9
    12d8:	00002710 	.word	0x00002710
    12dc:	00000b49 	.word	0x00000b49
    12e0:	00000b21 	.word	0x00000b21
    12e4:	00000b91 	.word	0x00000b91

000012e8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	b086      	sub	sp, #24
    12ec:	af00      	add	r7, sp, #0
    12ee:	60f8      	str	r0, [r7, #12]
    12f0:	60b9      	str	r1, [r7, #8]
    12f2:	1dfb      	adds	r3, r7, #7
    12f4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	795b      	ldrb	r3, [r3, #5]
    12fa:	2b01      	cmp	r3, #1
    12fc:	d001      	beq.n	1302 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    12fe:	2315      	movs	r3, #21
    1300:	e05c      	b.n	13bc <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	7a1b      	ldrb	r3, [r3, #8]
    1306:	2201      	movs	r2, #1
    1308:	4053      	eors	r3, r2
    130a:	b2db      	uxtb	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	d054      	beq.n	13ba <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1310:	1dfb      	adds	r3, r7, #7
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d04a      	beq.n	13ae <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1318:	68bb      	ldr	r3, [r7, #8]
    131a:	785b      	ldrb	r3, [r3, #1]
    131c:	2b00      	cmp	r3, #0
    131e:	d03f      	beq.n	13a0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	0018      	movs	r0, r3
    1324:	4b27      	ldr	r3, [pc, #156]	; (13c4 <spi_select_slave+0xdc>)
    1326:	4798      	blx	r3
    1328:	0003      	movs	r3, r0
    132a:	001a      	movs	r2, r3
    132c:	2301      	movs	r3, #1
    132e:	4053      	eors	r3, r2
    1330:	b2db      	uxtb	r3, r3
    1332:	2b00      	cmp	r3, #0
    1334:	d007      	beq.n	1346 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1336:	68bb      	ldr	r3, [r7, #8]
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	2101      	movs	r1, #1
    133c:	0018      	movs	r0, r3
    133e:	4b22      	ldr	r3, [pc, #136]	; (13c8 <spi_select_slave+0xe0>)
    1340:	4798      	blx	r3
					return STATUS_BUSY;
    1342:	2305      	movs	r3, #5
    1344:	e03a      	b.n	13bc <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1346:	68bb      	ldr	r3, [r7, #8]
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	2100      	movs	r1, #0
    134c:	0018      	movs	r0, r3
    134e:	4b1e      	ldr	r3, [pc, #120]	; (13c8 <spi_select_slave+0xe0>)
    1350:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	789b      	ldrb	r3, [r3, #2]
    1356:	b29a      	uxth	r2, r3
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	0011      	movs	r1, r2
    135c:	0018      	movs	r0, r3
    135e:	4b1b      	ldr	r3, [pc, #108]	; (13cc <spi_select_slave+0xe4>)
    1360:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	79db      	ldrb	r3, [r3, #7]
    1366:	2201      	movs	r2, #1
    1368:	4053      	eors	r3, r2
    136a:	b2db      	uxtb	r3, r3
    136c:	2b00      	cmp	r3, #0
    136e:	d024      	beq.n	13ba <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1370:	46c0      	nop			; (mov r8, r8)
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	0018      	movs	r0, r3
    1376:	4b16      	ldr	r3, [pc, #88]	; (13d0 <spi_select_slave+0xe8>)
    1378:	4798      	blx	r3
    137a:	0003      	movs	r3, r0
    137c:	001a      	movs	r2, r3
    137e:	2301      	movs	r3, #1
    1380:	4053      	eors	r3, r2
    1382:	b2db      	uxtb	r3, r3
    1384:	2b00      	cmp	r3, #0
    1386:	d1f4      	bne.n	1372 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1388:	2316      	movs	r3, #22
    138a:	18fb      	adds	r3, r7, r3
    138c:	2200      	movs	r2, #0
    138e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1390:	2316      	movs	r3, #22
    1392:	18fa      	adds	r2, r7, r3
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	0011      	movs	r1, r2
    1398:	0018      	movs	r0, r3
    139a:	4b0e      	ldr	r3, [pc, #56]	; (13d4 <spi_select_slave+0xec>)
    139c:	4798      	blx	r3
    139e:	e00c      	b.n	13ba <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2100      	movs	r1, #0
    13a6:	0018      	movs	r0, r3
    13a8:	4b07      	ldr	r3, [pc, #28]	; (13c8 <spi_select_slave+0xe0>)
    13aa:	4798      	blx	r3
    13ac:	e005      	b.n	13ba <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    13ae:	68bb      	ldr	r3, [r7, #8]
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	2101      	movs	r1, #1
    13b4:	0018      	movs	r0, r3
    13b6:	4b04      	ldr	r3, [pc, #16]	; (13c8 <spi_select_slave+0xe0>)
    13b8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    13ba:	2300      	movs	r3, #0
}
    13bc:	0018      	movs	r0, r3
    13be:	46bd      	mov	sp, r7
    13c0:	b006      	add	sp, #24
    13c2:	bd80      	pop	{r7, pc}
    13c4:	00000af9 	.word	0x00000af9
    13c8:	00000a11 	.word	0x00000a11
    13cc:	00000b49 	.word	0x00000b49
    13d0:	00000b21 	.word	0x00000b21
    13d4:	00000b91 	.word	0x00000b91

000013d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b084      	sub	sp, #16
    13dc:	af00      	add	r7, sp, #0
    13de:	0002      	movs	r2, r0
    13e0:	1dfb      	adds	r3, r7, #7
    13e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    13e4:	230f      	movs	r3, #15
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	1dfa      	adds	r2, r7, #7
    13ea:	7812      	ldrb	r2, [r2, #0]
    13ec:	09d2      	lsrs	r2, r2, #7
    13ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13f0:	230e      	movs	r3, #14
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	1dfa      	adds	r2, r7, #7
    13f6:	7812      	ldrb	r2, [r2, #0]
    13f8:	0952      	lsrs	r2, r2, #5
    13fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13fc:	4b0d      	ldr	r3, [pc, #52]	; (1434 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1400:	230f      	movs	r3, #15
    1402:	18fb      	adds	r3, r7, r3
    1404:	781b      	ldrb	r3, [r3, #0]
    1406:	2b00      	cmp	r3, #0
    1408:	d10f      	bne.n	142a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    140a:	230f      	movs	r3, #15
    140c:	18fb      	adds	r3, r7, r3
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	009b      	lsls	r3, r3, #2
    1412:	2210      	movs	r2, #16
    1414:	4694      	mov	ip, r2
    1416:	44bc      	add	ip, r7
    1418:	4463      	add	r3, ip
    141a:	3b08      	subs	r3, #8
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	230e      	movs	r3, #14
    1420:	18fb      	adds	r3, r7, r3
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	01db      	lsls	r3, r3, #7
    1426:	18d3      	adds	r3, r2, r3
    1428:	e000      	b.n	142c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    142a:	2300      	movs	r3, #0
	}
}
    142c:	0018      	movs	r0, r3
    142e:	46bd      	mov	sp, r7
    1430:	b004      	add	sp, #16
    1432:	bd80      	pop	{r7, pc}
    1434:	41004400 	.word	0x41004400

00001438 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1438:	b580      	push	{r7, lr}
    143a:	b082      	sub	sp, #8
    143c:	af00      	add	r7, sp, #0
    143e:	0002      	movs	r2, r0
    1440:	1dfb      	adds	r3, r7, #7
    1442:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1444:	1dfb      	adds	r3, r7, #7
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	0018      	movs	r0, r3
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <port_get_group_from_gpio_pin+0x20>)
    144c:	4798      	blx	r3
    144e:	0003      	movs	r3, r0
}
    1450:	0018      	movs	r0, r3
    1452:	46bd      	mov	sp, r7
    1454:	b002      	add	sp, #8
    1456:	bd80      	pop	{r7, pc}
    1458:	000013d9 	.word	0x000013d9

0000145c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2200      	movs	r2, #0
    1468:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	2201      	movs	r2, #1
    146e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	2200      	movs	r2, #0
    1474:	709a      	strb	r2, [r3, #2]
}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	46bd      	mov	sp, r7
    147a:	b002      	add	sp, #8
    147c:	bd80      	pop	{r7, pc}
    147e:	46c0      	nop			; (mov r8, r8)

00001480 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1480:	b580      	push	{r7, lr}
    1482:	b084      	sub	sp, #16
    1484:	af00      	add	r7, sp, #0
    1486:	0002      	movs	r2, r0
    1488:	1dfb      	adds	r3, r7, #7
    148a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    148c:	1dfb      	adds	r3, r7, #7
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	0018      	movs	r0, r3
    1492:	4b0b      	ldr	r3, [pc, #44]	; (14c0 <port_pin_get_input_level+0x40>)
    1494:	4798      	blx	r3
    1496:	0003      	movs	r3, r0
    1498:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    149a:	1dfb      	adds	r3, r7, #7
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	221f      	movs	r2, #31
    14a0:	4013      	ands	r3, r2
    14a2:	2201      	movs	r2, #1
    14a4:	409a      	lsls	r2, r3
    14a6:	0013      	movs	r3, r2
    14a8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    14aa:	68fb      	ldr	r3, [r7, #12]
    14ac:	6a1b      	ldr	r3, [r3, #32]
    14ae:	68ba      	ldr	r2, [r7, #8]
    14b0:	4013      	ands	r3, r2
    14b2:	1e5a      	subs	r2, r3, #1
    14b4:	4193      	sbcs	r3, r2
    14b6:	b2db      	uxtb	r3, r3
}
    14b8:	0018      	movs	r0, r3
    14ba:	46bd      	mov	sp, r7
    14bc:	b004      	add	sp, #16
    14be:	bd80      	pop	{r7, pc}
    14c0:	00001439 	.word	0x00001439

000014c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b084      	sub	sp, #16
    14c8:	af00      	add	r7, sp, #0
    14ca:	0002      	movs	r2, r0
    14cc:	1dfb      	adds	r3, r7, #7
    14ce:	701a      	strb	r2, [r3, #0]
    14d0:	1dbb      	adds	r3, r7, #6
    14d2:	1c0a      	adds	r2, r1, #0
    14d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    14d6:	1dfb      	adds	r3, r7, #7
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	0018      	movs	r0, r3
    14dc:	4b0d      	ldr	r3, [pc, #52]	; (1514 <port_pin_set_output_level+0x50>)
    14de:	4798      	blx	r3
    14e0:	0003      	movs	r3, r0
    14e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14e4:	1dfb      	adds	r3, r7, #7
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	221f      	movs	r2, #31
    14ea:	4013      	ands	r3, r2
    14ec:	2201      	movs	r2, #1
    14ee:	409a      	lsls	r2, r3
    14f0:	0013      	movs	r3, r2
    14f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    14f4:	1dbb      	adds	r3, r7, #6
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d003      	beq.n	1504 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	68ba      	ldr	r2, [r7, #8]
    1500:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1502:	e002      	b.n	150a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	68ba      	ldr	r2, [r7, #8]
    1508:	615a      	str	r2, [r3, #20]
	}
}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	46bd      	mov	sp, r7
    150e:	b004      	add	sp, #16
    1510:	bd80      	pop	{r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	00001439 	.word	0x00001439

00001518 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    1518:	b580      	push	{r7, lr}
    151a:	b084      	sub	sp, #16
    151c:	af00      	add	r7, sp, #0
    151e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	22a0      	movs	r2, #160	; 0xa0
    1524:	0112      	lsls	r2, r2, #4
    1526:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	2201      	movs	r2, #1
    152c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	2200      	movs	r2, #0
    1532:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	2200      	movs	r2, #0
    1538:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    153a:	230f      	movs	r3, #15
    153c:	18fb      	adds	r3, r7, r3
    153e:	2200      	movs	r2, #0
    1540:	701a      	strb	r2, [r3, #0]
    1542:	e00e      	b.n	1562 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    1544:	230f      	movs	r3, #15
    1546:	18fb      	adds	r3, r7, r3
    1548:	781a      	ldrb	r2, [r3, #0]
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	3202      	adds	r2, #2
    154e:	0092      	lsls	r2, r2, #2
    1550:	2100      	movs	r1, #0
    1552:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1554:	230f      	movs	r3, #15
    1556:	18fb      	adds	r3, r7, r3
    1558:	781a      	ldrb	r2, [r3, #0]
    155a:	230f      	movs	r3, #15
    155c:	18fb      	adds	r3, r7, r3
    155e:	3201      	adds	r2, #1
    1560:	701a      	strb	r2, [r3, #0]
    1562:	230f      	movs	r3, #15
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2b01      	cmp	r3, #1
    156a:	d9eb      	bls.n	1544 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    156c:	46c0      	nop			; (mov r8, r8)
    156e:	46bd      	mov	sp, r7
    1570:	b004      	add	sp, #16
    1572:	bd80      	pop	{r7, pc}

00001574 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	69db      	ldr	r3, [r3, #28]
    1586:	1e5a      	subs	r2, r3, #1
    1588:	4193      	sbcs	r3, r2
    158a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    158c:	0018      	movs	r0, r3
    158e:	46bd      	mov	sp, r7
    1590:	b004      	add	sp, #16
    1592:	bd80      	pop	{r7, pc}

00001594 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1594:	b580      	push	{r7, lr}
    1596:	b082      	sub	sp, #8
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	2201      	movs	r2, #1
    15a0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	2200      	movs	r2, #0
    15a6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	2200      	movs	r2, #0
    15ac:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	22c0      	movs	r2, #192	; 0xc0
    15b2:	0392      	lsls	r2, r2, #14
    15b4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2200      	movs	r2, #0
    15ba:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	2200      	movs	r2, #0
    15c0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	2201      	movs	r2, #1
    15c6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2201      	movs	r2, #1
    15cc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	2200      	movs	r2, #0
    15d2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	2224      	movs	r2, #36	; 0x24
    15d8:	2100      	movs	r1, #0
    15da:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	3318      	adds	r3, #24
    15e0:	220c      	movs	r2, #12
    15e2:	2100      	movs	r1, #0
    15e4:	0018      	movs	r0, r3
    15e6:	4b0a      	ldr	r3, [pc, #40]	; (1610 <spi_get_config_defaults+0x7c>)
    15e8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	4a09      	ldr	r2, [pc, #36]	; (1614 <spi_get_config_defaults+0x80>)
    15ee:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	2200      	movs	r2, #0
    15f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	2200      	movs	r2, #0
    15fa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	2200      	movs	r2, #0
    1600:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	2200      	movs	r2, #0
    1606:	635a      	str	r2, [r3, #52]	; 0x34

};
    1608:	46c0      	nop			; (mov r8, r8)
    160a:	46bd      	mov	sp, r7
    160c:	b002      	add	sp, #8
    160e:	bd80      	pop	{r7, pc}
    1610:	00008fdf 	.word	0x00008fdf
    1614:	000186a0 	.word	0x000186a0

00001618 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	220a      	movs	r2, #10
    1624:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	2200      	movs	r2, #0
    162a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	2200      	movs	r2, #0
    1630:	709a      	strb	r2, [r3, #2]
}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	46bd      	mov	sp, r7
    1636:	b002      	add	sp, #8
    1638:	bd80      	pop	{r7, pc}
    163a:	46c0      	nop			; (mov r8, r8)

0000163c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    163c:	b580      	push	{r7, lr}
    163e:	b084      	sub	sp, #16
    1640:	af00      	add	r7, sp, #0
    1642:	6078      	str	r0, [r7, #4]
    1644:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1646:	683b      	ldr	r3, [r7, #0]
    1648:	781a      	ldrb	r2, [r3, #0]
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    164e:	683b      	ldr	r3, [r7, #0]
    1650:	785a      	ldrb	r2, [r3, #1]
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	789a      	ldrb	r2, [r3, #2]
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    165e:	230c      	movs	r3, #12
    1660:	18fb      	adds	r3, r7, r3
    1662:	0018      	movs	r0, r3
    1664:	4b0b      	ldr	r3, [pc, #44]	; (1694 <spi_attach_slave+0x58>)
    1666:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1668:	230c      	movs	r3, #12
    166a:	18fb      	adds	r3, r7, r3
    166c:	2201      	movs	r2, #1
    166e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	220c      	movs	r2, #12
    1676:	18ba      	adds	r2, r7, r2
    1678:	0011      	movs	r1, r2
    167a:	0018      	movs	r0, r3
    167c:	4b06      	ldr	r3, [pc, #24]	; (1698 <spi_attach_slave+0x5c>)
    167e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	2101      	movs	r1, #1
    1686:	0018      	movs	r0, r3
    1688:	4b04      	ldr	r3, [pc, #16]	; (169c <spi_attach_slave+0x60>)
    168a:	4798      	blx	r3
}
    168c:	46c0      	nop			; (mov r8, r8)
    168e:	46bd      	mov	sp, r7
    1690:	b004      	add	sp, #16
    1692:	bd80      	pop	{r7, pc}
    1694:	0000145d 	.word	0x0000145d
    1698:	000044d9 	.word	0x000044d9
    169c:	000014c5 	.word	0x000014c5

000016a0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b084      	sub	sp, #16
    16a4:	af00      	add	r7, sp, #0
    16a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	0018      	movs	r0, r3
    16b4:	4b06      	ldr	r3, [pc, #24]	; (16d0 <spi_enable+0x30>)
    16b6:	4798      	blx	r3
    16b8:	1e03      	subs	r3, r0, #0
    16ba:	d1f9      	bne.n	16b0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	2202      	movs	r2, #2
    16c2:	431a      	orrs	r2, r3
    16c4:	68fb      	ldr	r3, [r7, #12]
    16c6:	601a      	str	r2, [r3, #0]
}
    16c8:	46c0      	nop			; (mov r8, r8)
    16ca:	46bd      	mov	sp, r7
    16cc:	b004      	add	sp, #16
    16ce:	bd80      	pop	{r7, pc}
    16d0:	00001575 	.word	0x00001575

000016d4 <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b082      	sub	sp, #8
    16d8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    16da:	1d3b      	adds	r3, r7, #4
    16dc:	0018      	movs	r0, r3
    16de:	4b07      	ldr	r3, [pc, #28]	; (16fc <configure_port_pins+0x28>)
    16e0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    16e2:	1d3b      	adds	r3, r7, #4
    16e4:	2200      	movs	r2, #0
    16e6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    16e8:	1d3b      	adds	r3, r7, #4
    16ea:	0019      	movs	r1, r3
    16ec:	2003      	movs	r0, #3
    16ee:	4b04      	ldr	r3, [pc, #16]	; (1700 <configure_port_pins+0x2c>)
    16f0:	4798      	blx	r3
}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	46bd      	mov	sp, r7
    16f6:	b002      	add	sp, #8
    16f8:	bd80      	pop	{r7, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	0000145d 	.word	0x0000145d
    1700:	000044d9 	.word	0x000044d9

00001704 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	b084      	sub	sp, #16
    1708:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    170a:	1d3b      	adds	r3, r7, #4
    170c:	0018      	movs	r0, r3
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <configure_extint_channel+0x38>)
    1710:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    1712:	1d3b      	adds	r3, r7, #4
    1714:	2203      	movs	r2, #3
    1716:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    1718:	1d3b      	adds	r3, r7, #4
    171a:	2200      	movs	r2, #0
    171c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    171e:	1d3b      	adds	r3, r7, #4
    1720:	2201      	movs	r2, #1
    1722:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1724:	1d3b      	adds	r3, r7, #4
    1726:	2201      	movs	r2, #1
    1728:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    172a:	1d3b      	adds	r3, r7, #4
    172c:	0019      	movs	r1, r3
    172e:	2003      	movs	r0, #3
    1730:	4b03      	ldr	r3, [pc, #12]	; (1740 <configure_extint_channel+0x3c>)
    1732:	4798      	blx	r3
}
    1734:	46c0      	nop			; (mov r8, r8)
    1736:	46bd      	mov	sp, r7
    1738:	b004      	add	sp, #16
    173a:	bd80      	pop	{r7, pc}
    173c:	00004381 	.word	0x00004381
    1740:	000043b5 	.word	0x000043b5

00001744 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    1748:	4b06      	ldr	r3, [pc, #24]	; (1764 <configure_extint_callbacks+0x20>)
    174a:	2200      	movs	r2, #0
    174c:	2103      	movs	r1, #3
    174e:	0018      	movs	r0, r3
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <configure_extint_callbacks+0x24>)
    1752:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    1754:	2100      	movs	r1, #0
    1756:	2003      	movs	r0, #3
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <configure_extint_callbacks+0x28>)
    175a:	4798      	blx	r3
}
    175c:	46c0      	nop			; (mov r8, r8)
    175e:	46bd      	mov	sp, r7
    1760:	bd80      	pop	{r7, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00002269 	.word	0x00002269
    1768:	00003f81 	.word	0x00003f81
    176c:	00003fe5 	.word	0x00003fe5

00001770 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	b090      	sub	sp, #64	; 0x40
    1774:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    1776:	1d3b      	adds	r3, r7, #4
    1778:	0018      	movs	r0, r3
    177a:	4b21      	ldr	r3, [pc, #132]	; (1800 <configure_RFM69_spi+0x90>)
    177c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    177e:	1d3b      	adds	r3, r7, #4
    1780:	2212      	movs	r2, #18
    1782:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    1784:	1d3a      	adds	r2, r7, #4
    1786:	4b1f      	ldr	r3, [pc, #124]	; (1804 <configure_RFM69_spi+0x94>)
    1788:	0011      	movs	r1, r2
    178a:	0018      	movs	r0, r3
    178c:	4b1e      	ldr	r3, [pc, #120]	; (1808 <configure_RFM69_spi+0x98>)
    178e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    1790:	2308      	movs	r3, #8
    1792:	18fb      	adds	r3, r7, r3
    1794:	0018      	movs	r0, r3
    1796:	4b1d      	ldr	r3, [pc, #116]	; (180c <configure_RFM69_spi+0x9c>)
    1798:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    179a:	2308      	movs	r3, #8
    179c:	18fb      	adds	r3, r7, r3
    179e:	22c0      	movs	r2, #192	; 0xc0
    17a0:	0392      	lsls	r2, r2, #14
    17a2:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    17a4:	2308      	movs	r3, #8
    17a6:	18fb      	adds	r3, r7, r3
    17a8:	4a19      	ldr	r2, [pc, #100]	; (1810 <configure_RFM69_spi+0xa0>)
    17aa:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    17ac:	2308      	movs	r3, #8
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	4a18      	ldr	r2, [pc, #96]	; (1814 <configure_RFM69_spi+0xa4>)
    17b2:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    17b4:	2308      	movs	r3, #8
    17b6:	18fb      	adds	r3, r7, r3
    17b8:	2201      	movs	r2, #1
    17ba:	4252      	negs	r2, r2
    17bc:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    17be:	2308      	movs	r3, #8
    17c0:	18fb      	adds	r3, r7, r3
    17c2:	4a15      	ldr	r2, [pc, #84]	; (1818 <configure_RFM69_spi+0xa8>)
    17c4:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    17c6:	2308      	movs	r3, #8
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	2200      	movs	r2, #0
    17cc:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    17ce:	2308      	movs	r3, #8
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	2200      	movs	r2, #0
    17d4:	609a      	str	r2, [r3, #8]
	//config_spi_master.generator_source = GCLK_CLKCTRL_GEN_GCLK1;
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    17d6:	2308      	movs	r3, #8
    17d8:	18fa      	adds	r2, r7, r3
    17da:	4910      	ldr	r1, [pc, #64]	; (181c <configure_RFM69_spi+0xac>)
    17dc:	4b10      	ldr	r3, [pc, #64]	; (1820 <configure_RFM69_spi+0xb0>)
    17de:	0018      	movs	r0, r3
    17e0:	4b10      	ldr	r3, [pc, #64]	; (1824 <configure_RFM69_spi+0xb4>)
    17e2:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    17e4:	4b0e      	ldr	r3, [pc, #56]	; (1820 <configure_RFM69_spi+0xb0>)
    17e6:	0018      	movs	r0, r3
    17e8:	4b0f      	ldr	r3, [pc, #60]	; (1828 <configure_RFM69_spi+0xb8>)
    17ea:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    17ec:	4905      	ldr	r1, [pc, #20]	; (1804 <configure_RFM69_spi+0x94>)
    17ee:	4b0c      	ldr	r3, [pc, #48]	; (1820 <configure_RFM69_spi+0xb0>)
    17f0:	2200      	movs	r2, #0
    17f2:	0018      	movs	r0, r3
    17f4:	4b0d      	ldr	r3, [pc, #52]	; (182c <configure_RFM69_spi+0xbc>)
    17f6:	4798      	blx	r3
}
    17f8:	46c0      	nop			; (mov r8, r8)
    17fa:	46bd      	mov	sp, r7
    17fc:	b010      	add	sp, #64	; 0x40
    17fe:	bd80      	pop	{r7, pc}
    1800:	00001619 	.word	0x00001619
    1804:	200002e8 	.word	0x200002e8
    1808:	0000163d 	.word	0x0000163d
    180c:	00001595 	.word	0x00001595
    1810:	00100002 	.word	0x00100002
    1814:	00110002 	.word	0x00110002
    1818:	00130002 	.word	0x00130002
    181c:	42000c00 	.word	0x42000c00
    1820:	200002d8 	.word	0x200002d8
    1824:	000010a5 	.word	0x000010a5
    1828:	000016a1 	.word	0x000016a1
    182c:	000012e9 	.word	0x000012e9

00001830 <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    1830:	b580      	push	{r7, lr}
    1832:	b084      	sub	sp, #16
    1834:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    1836:	003b      	movs	r3, r7
    1838:	0018      	movs	r0, r3
    183a:	4b0f      	ldr	r3, [pc, #60]	; (1878 <configure_rtc_count+0x48>)
    183c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    183e:	003b      	movs	r3, r7
    1840:	2200      	movs	r2, #0
    1842:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1844:	003b      	movs	r3, r7
    1846:	2200      	movs	r2, #0
    1848:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    184a:	003b      	movs	r3, r7
    184c:	2201      	movs	r2, #1
    184e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1850:	003a      	movs	r2, r7
    1852:	490a      	ldr	r1, [pc, #40]	; (187c <configure_rtc_count+0x4c>)
    1854:	4b0a      	ldr	r3, [pc, #40]	; (1880 <configure_rtc_count+0x50>)
    1856:	0018      	movs	r0, r3
    1858:	4b0a      	ldr	r3, [pc, #40]	; (1884 <configure_rtc_count+0x54>)
    185a:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    185c:	4b08      	ldr	r3, [pc, #32]	; (1880 <configure_rtc_count+0x50>)
    185e:	0018      	movs	r0, r3
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <configure_rtc_count+0x58>)
    1862:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    1864:	4a09      	ldr	r2, [pc, #36]	; (188c <configure_rtc_count+0x5c>)
    1866:	4b06      	ldr	r3, [pc, #24]	; (1880 <configure_rtc_count+0x50>)
    1868:	0011      	movs	r1, r2
    186a:	0018      	movs	r0, r3
    186c:	4b08      	ldr	r3, [pc, #32]	; (1890 <configure_rtc_count+0x60>)
    186e:	4798      	blx	r3
}
    1870:	46c0      	nop			; (mov r8, r8)
    1872:	46bd      	mov	sp, r7
    1874:	b004      	add	sp, #16
    1876:	bd80      	pop	{r7, pc}
    1878:	00001519 	.word	0x00001519
    187c:	40001400 	.word	0x40001400
    1880:	2000023c 	.word	0x2000023c
    1884:	00000395 	.word	0x00000395
    1888:	000001b1 	.word	0x000001b1
    188c:	00002710 	.word	0x00002710
    1890:	00000579 	.word	0x00000579

00001894 <reset_millis>:

void reset_millis(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <reset_millis+0x1c>)
    189a:	2100      	movs	r1, #0
    189c:	0018      	movs	r0, r3
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <reset_millis+0x20>)
    18a0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    18a2:	4b03      	ldr	r3, [pc, #12]	; (18b0 <reset_millis+0x1c>)
    18a4:	0018      	movs	r0, r3
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <reset_millis+0x24>)
    18a8:	4798      	blx	r3
}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	46bd      	mov	sp, r7
    18ae:	bd80      	pop	{r7, pc}
    18b0:	2000023c 	.word	0x2000023c
    18b4:	00000425 	.word	0x00000425
    18b8:	000001b1 	.word	0x000001b1

000018bc <millis>:

uint32_t millis(void)
{
    18bc:	b580      	push	{r7, lr}
    18be:	b082      	sub	sp, #8
    18c0:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    18c2:	2300      	movs	r3, #0
    18c4:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <millis+0x20>)
    18c8:	0018      	movs	r0, r3
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <millis+0x24>)
    18cc:	4798      	blx	r3
    18ce:	0003      	movs	r3, r0
    18d0:	607b      	str	r3, [r7, #4]
	return milli;
    18d2:	687b      	ldr	r3, [r7, #4]
}
    18d4:	0018      	movs	r0, r3
    18d6:	46bd      	mov	sp, r7
    18d8:	b002      	add	sp, #8
    18da:	bd80      	pop	{r7, pc}
    18dc:	2000023c 	.word	0x2000023c
    18e0:	00000485 	.word	0x00000485

000018e4 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    18e4:	b590      	push	{r4, r7, lr}
    18e6:	b085      	sub	sp, #20
    18e8:	af00      	add	r7, sp, #0
    18ea:	0004      	movs	r4, r0
    18ec:	6039      	str	r1, [r7, #0]
    18ee:	0010      	movs	r0, r2
    18f0:	0019      	movs	r1, r3
    18f2:	1dfb      	adds	r3, r7, #7
    18f4:	1c22      	adds	r2, r4, #0
    18f6:	701a      	strb	r2, [r3, #0]
    18f8:	1dbb      	adds	r3, r7, #6
    18fa:	1c02      	adds	r2, r0, #0
    18fc:	701a      	strb	r2, [r3, #0]
    18fe:	1d7b      	adds	r3, r7, #5
    1900:	1c0a      	adds	r2, r1, #0
    1902:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    1904:	2001      	movs	r0, #1
    1906:	4b4b      	ldr	r3, [pc, #300]	; (1a34 <sendFrame+0x150>)
    1908:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	2027      	movs	r0, #39	; 0x27
    190e:	4b4a      	ldr	r3, [pc, #296]	; (1a38 <sendFrame+0x154>)
    1910:	4798      	blx	r3
    1912:	0003      	movs	r3, r0
    1914:	b25b      	sxtb	r3, r3
    1916:	2b00      	cmp	r3, #0
    1918:	daf8      	bge.n	190c <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    191a:	2100      	movs	r1, #0
    191c:	2025      	movs	r0, #37	; 0x25
    191e:	4b47      	ldr	r3, [pc, #284]	; (1a3c <sendFrame+0x158>)
    1920:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    1922:	1dbb      	adds	r3, r7, #6
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	2b3d      	cmp	r3, #61	; 0x3d
    1928:	d902      	bls.n	1930 <sendFrame+0x4c>
    192a:	1dbb      	adds	r3, r7, #6
    192c:	223d      	movs	r2, #61	; 0x3d
    192e:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    1930:	230e      	movs	r3, #14
    1932:	18fb      	adds	r3, r7, r3
    1934:	2200      	movs	r2, #0
    1936:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    1938:	2320      	movs	r3, #32
    193a:	18fb      	adds	r3, r7, r3
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d004      	beq.n	194c <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    1942:	230e      	movs	r3, #14
    1944:	18fb      	adds	r3, r7, r3
    1946:	2280      	movs	r2, #128	; 0x80
    1948:	701a      	strb	r2, [r3, #0]
    194a:	e007      	b.n	195c <sendFrame+0x78>
	else if (requestACK)
    194c:	1d7b      	adds	r3, r7, #5
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	2b00      	cmp	r3, #0
    1952:	d003      	beq.n	195c <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    1954:	230e      	movs	r3, #14
    1956:	18fb      	adds	r3, r7, r3
    1958:	2240      	movs	r2, #64	; 0x40
    195a:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	selectrf();
    195c:	4b38      	ldr	r3, [pc, #224]	; (1a40 <sendFrame+0x15c>)
    195e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    1960:	4a38      	ldr	r2, [pc, #224]	; (1a44 <sendFrame+0x160>)
    1962:	4b39      	ldr	r3, [pc, #228]	; (1a48 <sendFrame+0x164>)
    1964:	2180      	movs	r1, #128	; 0x80
    1966:	0018      	movs	r0, r3
    1968:	4b38      	ldr	r3, [pc, #224]	; (1a4c <sendFrame+0x168>)
    196a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    196c:	1dbb      	adds	r3, r7, #6
    196e:	781b      	ldrb	r3, [r3, #0]
    1970:	b29b      	uxth	r3, r3
    1972:	3303      	adds	r3, #3
    1974:	b299      	uxth	r1, r3
    1976:	4a33      	ldr	r2, [pc, #204]	; (1a44 <sendFrame+0x160>)
    1978:	4b33      	ldr	r3, [pc, #204]	; (1a48 <sendFrame+0x164>)
    197a:	0018      	movs	r0, r3
    197c:	4b33      	ldr	r3, [pc, #204]	; (1a4c <sendFrame+0x168>)
    197e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    1980:	1dfb      	adds	r3, r7, #7
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	b299      	uxth	r1, r3
    1986:	4a2f      	ldr	r2, [pc, #188]	; (1a44 <sendFrame+0x160>)
    1988:	4b2f      	ldr	r3, [pc, #188]	; (1a48 <sendFrame+0x164>)
    198a:	0018      	movs	r0, r3
    198c:	4b2f      	ldr	r3, [pc, #188]	; (1a4c <sendFrame+0x168>)
    198e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    1990:	4b2f      	ldr	r3, [pc, #188]	; (1a50 <sendFrame+0x16c>)
    1992:	781b      	ldrb	r3, [r3, #0]
    1994:	b2db      	uxtb	r3, r3
    1996:	b299      	uxth	r1, r3
    1998:	4a2a      	ldr	r2, [pc, #168]	; (1a44 <sendFrame+0x160>)
    199a:	4b2b      	ldr	r3, [pc, #172]	; (1a48 <sendFrame+0x164>)
    199c:	0018      	movs	r0, r3
    199e:	4b2b      	ldr	r3, [pc, #172]	; (1a4c <sendFrame+0x168>)
    19a0:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    19a2:	230e      	movs	r3, #14
    19a4:	18fb      	adds	r3, r7, r3
    19a6:	781b      	ldrb	r3, [r3, #0]
    19a8:	b2db      	uxtb	r3, r3
    19aa:	b299      	uxth	r1, r3
    19ac:	4a25      	ldr	r2, [pc, #148]	; (1a44 <sendFrame+0x160>)
    19ae:	4b26      	ldr	r3, [pc, #152]	; (1a48 <sendFrame+0x164>)
    19b0:	0018      	movs	r0, r3
    19b2:	4b26      	ldr	r3, [pc, #152]	; (1a4c <sendFrame+0x168>)
    19b4:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    19b6:	230f      	movs	r3, #15
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	2200      	movs	r2, #0
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	e012      	b.n	19e6 <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	683a      	ldr	r2, [r7, #0]
    19c8:	18d3      	adds	r3, r2, r3
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	b299      	uxth	r1, r3
    19ce:	4a1d      	ldr	r2, [pc, #116]	; (1a44 <sendFrame+0x160>)
    19d0:	4b1d      	ldr	r3, [pc, #116]	; (1a48 <sendFrame+0x164>)
    19d2:	0018      	movs	r0, r3
    19d4:	4b1d      	ldr	r3, [pc, #116]	; (1a4c <sendFrame+0x168>)
    19d6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    19d8:	230f      	movs	r3, #15
    19da:	18fb      	adds	r3, r7, r3
    19dc:	781a      	ldrb	r2, [r3, #0]
    19de:	230f      	movs	r3, #15
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	3201      	adds	r2, #1
    19e4:	701a      	strb	r2, [r3, #0]
    19e6:	230f      	movs	r3, #15
    19e8:	18fa      	adds	r2, r7, r3
    19ea:	1dbb      	adds	r3, r7, #6
    19ec:	7812      	ldrb	r2, [r2, #0]
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	429a      	cmp	r2, r3
    19f2:	d3e5      	bcc.n	19c0 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    19f4:	4b17      	ldr	r3, [pc, #92]	; (1a54 <sendFrame+0x170>)
    19f6:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the 
	
	
	setMode(RF69_MODE_TX);
    19f8:	2004      	movs	r0, #4
    19fa:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <sendFrame+0x150>)
    19fc:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    19fe:	4b16      	ldr	r3, [pc, #88]	; (1a58 <sendFrame+0x174>)
    1a00:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	2003      	movs	r0, #3
    1a06:	4b15      	ldr	r3, [pc, #84]	; (1a5c <sendFrame+0x178>)
    1a08:	4798      	blx	r3
    1a0a:	0003      	movs	r3, r0
    1a0c:	001a      	movs	r2, r3
    1a0e:	2301      	movs	r3, #1
    1a10:	4053      	eors	r3, r2
    1a12:	b2db      	uxtb	r3, r3
    1a14:	2b00      	cmp	r3, #0
    1a16:	d005      	beq.n	1a24 <sendFrame+0x140>
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <sendFrame+0x17c>)
    1a1a:	4798      	blx	r3
    1a1c:	1e02      	subs	r2, r0, #0
    1a1e:	4b11      	ldr	r3, [pc, #68]	; (1a64 <sendFrame+0x180>)
    1a20:	429a      	cmp	r2, r3
    1a22:	d9ef      	bls.n	1a04 <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    1a24:	2001      	movs	r0, #1
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <sendFrame+0x150>)
    1a28:	4798      	blx	r3
}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	46bd      	mov	sp, r7
    1a2e:	b005      	add	sp, #20
    1a30:	bd90      	pop	{r4, r7, pc}
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	00001e85 	.word	0x00001e85
    1a38:	00002461 	.word	0x00002461
    1a3c:	000024c9 	.word	0x000024c9
    1a40:	00002529 	.word	0x00002529
    1a44:	200000fe 	.word	0x200000fe
    1a48:	200002d8 	.word	0x200002d8
    1a4c:	000011ad 	.word	0x000011ad
    1a50:	20000246 	.word	0x20000246
    1a54:	0000254d 	.word	0x0000254d
    1a58:	00001895 	.word	0x00001895
    1a5c:	00001481 	.word	0x00001481
    1a60:	000018bd 	.word	0x000018bd
    1a64:	000003e7 	.word	0x000003e7

00001a68 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    1a68:	b580      	push	{r7, lr}
    1a6a:	b082      	sub	sp, #8
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	0002      	movs	r2, r0
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    1a74:	4b19      	ldr	r3, [pc, #100]	; (1adc <RFM_setHighPower+0x74>)
    1a76:	1dfa      	adds	r2, r7, #7
    1a78:	7812      	ldrb	r2, [r2, #0]
    1a7a:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    1a7c:	4b17      	ldr	r3, [pc, #92]	; (1adc <RFM_setHighPower+0x74>)
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	b2db      	uxtb	r3, r3
    1a82:	2b00      	cmp	r3, #0
    1a84:	d001      	beq.n	1a8a <RFM_setHighPower+0x22>
    1a86:	230f      	movs	r3, #15
    1a88:	e000      	b.n	1a8c <RFM_setHighPower+0x24>
    1a8a:	231a      	movs	r3, #26
    1a8c:	0019      	movs	r1, r3
    1a8e:	2013      	movs	r0, #19
    1a90:	4b13      	ldr	r3, [pc, #76]	; (1ae0 <RFM_setHighPower+0x78>)
    1a92:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    1a94:	4b11      	ldr	r3, [pc, #68]	; (1adc <RFM_setHighPower+0x74>)
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d010      	beq.n	1ac0 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    1a9e:	2011      	movs	r0, #17
    1aa0:	4b10      	ldr	r3, [pc, #64]	; (1ae4 <RFM_setHighPower+0x7c>)
    1aa2:	4798      	blx	r3
    1aa4:	0003      	movs	r3, r0
    1aa6:	b25b      	sxtb	r3, r3
    1aa8:	221f      	movs	r2, #31
    1aaa:	4013      	ands	r3, r2
    1aac:	b25b      	sxtb	r3, r3
    1aae:	2260      	movs	r2, #96	; 0x60
    1ab0:	4313      	orrs	r3, r2
    1ab2:	b25b      	sxtb	r3, r3
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	0019      	movs	r1, r3
    1ab8:	2011      	movs	r0, #17
    1aba:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <RFM_setHighPower+0x78>)
    1abc:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    1abe:	e009      	b.n	1ad4 <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    1ac0:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <RFM_setHighPower+0x80>)
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	2280      	movs	r2, #128	; 0x80
    1ac6:	4252      	negs	r2, r2
    1ac8:	4313      	orrs	r3, r2
    1aca:	b2db      	uxtb	r3, r3
    1acc:	0019      	movs	r1, r3
    1ace:	2011      	movs	r0, #17
    1ad0:	4b03      	ldr	r3, [pc, #12]	; (1ae0 <RFM_setHighPower+0x78>)
    1ad2:	4798      	blx	r3
}
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b002      	add	sp, #8
    1ada:	bd80      	pop	{r7, pc}
    1adc:	200002d4 	.word	0x200002d4
    1ae0:	000024c9 	.word	0x000024c9
    1ae4:	00002461 	.word	0x00002461
    1ae8:	20000244 	.word	0x20000244

00001aec <RFM69>:

void RFM69()
{
    1aec:	b580      	push	{r7, lr}
    1aee:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    1af0:	4b07      	ldr	r3, [pc, #28]	; (1b10 <RFM69+0x24>)
    1af2:	2201      	movs	r2, #1
    1af4:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    1af6:	4b07      	ldr	r3, [pc, #28]	; (1b14 <RFM69+0x28>)
    1af8:	2200      	movs	r2, #0
    1afa:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    1afc:	4b06      	ldr	r3, [pc, #24]	; (1b18 <RFM69+0x2c>)
    1afe:	221f      	movs	r2, #31
    1b00:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <RFM69+0x30>)
    1b04:	2200      	movs	r2, #0
    1b06:	701a      	strb	r2, [r3, #0]
}
    1b08:	46c0      	nop			; (mov r8, r8)
    1b0a:	46bd      	mov	sp, r7
    1b0c:	bd80      	pop	{r7, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	200002d2 	.word	0x200002d2
    1b14:	2000024c 	.word	0x2000024c
    1b18:	20000244 	.word	0x20000244
    1b1c:	200002d4 	.word	0x200002d4

00001b20 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    1b20:	b590      	push	{r4, r7, lr}
    1b22:	b091      	sub	sp, #68	; 0x44
    1b24:	af00      	add	r7, sp, #0
    1b26:	0004      	movs	r4, r0
    1b28:	0008      	movs	r0, r1
    1b2a:	0011      	movs	r1, r2
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	1c22      	adds	r2, r4, #0
    1b30:	701a      	strb	r2, [r3, #0]
    1b32:	1dbb      	adds	r3, r7, #6
    1b34:	1c02      	adds	r2, r0, #0
    1b36:	701a      	strb	r2, [r3, #0]
    1b38:	1d7b      	adds	r3, r7, #5
    1b3a:	1c0a      	adds	r2, r1, #0
    1b3c:	701a      	strb	r2, [r3, #0]
  RFM69();
    1b3e:	4bc1      	ldr	r3, [pc, #772]	; (1e44 <RFM_initialize+0x324>)
    1b40:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    1b42:	2310      	movs	r3, #16
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	2201      	movs	r2, #1
    1b48:	701a      	strb	r2, [r3, #0]
    1b4a:	2310      	movs	r3, #16
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	2204      	movs	r2, #4
    1b50:	705a      	strb	r2, [r3, #1]
    1b52:	2310      	movs	r3, #16
    1b54:	18fb      	adds	r3, r7, r3
    1b56:	2202      	movs	r2, #2
    1b58:	709a      	strb	r2, [r3, #2]
    1b5a:	2310      	movs	r3, #16
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2200      	movs	r2, #0
    1b60:	70da      	strb	r2, [r3, #3]
    1b62:	2310      	movs	r3, #16
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2203      	movs	r2, #3
    1b68:	711a      	strb	r2, [r3, #4]
    1b6a:	2310      	movs	r3, #16
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	2202      	movs	r2, #2
    1b70:	715a      	strb	r2, [r3, #5]
    1b72:	2310      	movs	r3, #16
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	2204      	movs	r2, #4
    1b78:	719a      	strb	r2, [r3, #6]
    1b7a:	2310      	movs	r3, #16
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	2240      	movs	r2, #64	; 0x40
    1b80:	71da      	strb	r2, [r3, #7]
    1b82:	2310      	movs	r3, #16
    1b84:	18fb      	adds	r3, r7, r3
    1b86:	2205      	movs	r2, #5
    1b88:	721a      	strb	r2, [r3, #8]
    1b8a:	2310      	movs	r3, #16
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	2203      	movs	r2, #3
    1b90:	725a      	strb	r2, [r3, #9]
    1b92:	2310      	movs	r3, #16
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	2206      	movs	r2, #6
    1b98:	729a      	strb	r2, [r3, #10]
    1b9a:	2310      	movs	r3, #16
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	2233      	movs	r2, #51	; 0x33
    1ba0:	72da      	strb	r2, [r3, #11]
    1ba2:	2310      	movs	r3, #16
    1ba4:	18fb      	adds	r3, r7, r3
    1ba6:	2207      	movs	r2, #7
    1ba8:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b1f      	cmp	r3, #31
    1bb0:	d00d      	beq.n	1bce <RFM_initialize+0xae>
    1bb2:	1dfb      	adds	r3, r7, #7
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b2b      	cmp	r3, #43	; 0x2b
    1bb8:	d007      	beq.n	1bca <RFM_initialize+0xaa>
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	2b56      	cmp	r3, #86	; 0x56
    1bc0:	d101      	bne.n	1bc6 <RFM_initialize+0xa6>
    1bc2:	23d9      	movs	r3, #217	; 0xd9
    1bc4:	e004      	b.n	1bd0 <RFM_initialize+0xb0>
    1bc6:	23e4      	movs	r3, #228	; 0xe4
    1bc8:	e002      	b.n	1bd0 <RFM_initialize+0xb0>
    1bca:	236c      	movs	r3, #108	; 0x6c
    1bcc:	e000      	b.n	1bd0 <RFM_initialize+0xb0>
    1bce:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1bd0:	2210      	movs	r2, #16
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7353      	strb	r3, [r2, #13]
    1bd6:	2310      	movs	r3, #16
    1bd8:	18fb      	adds	r3, r7, r3
    1bda:	2208      	movs	r2, #8
    1bdc:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1bde:	1dfb      	adds	r3, r7, #7
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	2b1f      	cmp	r3, #31
    1be4:	d00d      	beq.n	1c02 <RFM_initialize+0xe2>
    1be6:	1dfb      	adds	r3, r7, #7
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	2b2b      	cmp	r3, #43	; 0x2b
    1bec:	d007      	beq.n	1bfe <RFM_initialize+0xde>
    1bee:	1dfb      	adds	r3, r7, #7
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	2b56      	cmp	r3, #86	; 0x56
    1bf4:	d101      	bne.n	1bfa <RFM_initialize+0xda>
    1bf6:	2300      	movs	r3, #0
    1bf8:	e004      	b.n	1c04 <RFM_initialize+0xe4>
    1bfa:	23c0      	movs	r3, #192	; 0xc0
    1bfc:	e002      	b.n	1c04 <RFM_initialize+0xe4>
    1bfe:	2340      	movs	r3, #64	; 0x40
    1c00:	e000      	b.n	1c04 <RFM_initialize+0xe4>
    1c02:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1c04:	2210      	movs	r2, #16
    1c06:	18ba      	adds	r2, r7, r2
    1c08:	73d3      	strb	r3, [r2, #15]
    1c0a:	2310      	movs	r3, #16
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	2209      	movs	r2, #9
    1c10:	741a      	strb	r2, [r3, #16]
    1c12:	2310      	movs	r3, #16
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	2200      	movs	r2, #0
    1c18:	745a      	strb	r2, [r3, #17]
    1c1a:	2310      	movs	r3, #16
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	2219      	movs	r2, #25
    1c20:	749a      	strb	r2, [r3, #18]
    1c22:	2310      	movs	r3, #16
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	2242      	movs	r2, #66	; 0x42
    1c28:	74da      	strb	r2, [r3, #19]
    1c2a:	2310      	movs	r3, #16
    1c2c:	18fb      	adds	r3, r7, r3
    1c2e:	2225      	movs	r2, #37	; 0x25
    1c30:	751a      	strb	r2, [r3, #20]
    1c32:	2310      	movs	r3, #16
    1c34:	18fb      	adds	r3, r7, r3
    1c36:	2240      	movs	r2, #64	; 0x40
    1c38:	755a      	strb	r2, [r3, #21]
    1c3a:	2310      	movs	r3, #16
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	2226      	movs	r2, #38	; 0x26
    1c40:	759a      	strb	r2, [r3, #22]
    1c42:	2310      	movs	r3, #16
    1c44:	18fb      	adds	r3, r7, r3
    1c46:	2207      	movs	r2, #7
    1c48:	75da      	strb	r2, [r3, #23]
    1c4a:	2310      	movs	r3, #16
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	2228      	movs	r2, #40	; 0x28
    1c50:	761a      	strb	r2, [r3, #24]
    1c52:	2310      	movs	r3, #16
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	2210      	movs	r2, #16
    1c58:	765a      	strb	r2, [r3, #25]
    1c5a:	2310      	movs	r3, #16
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	2229      	movs	r2, #41	; 0x29
    1c60:	769a      	strb	r2, [r3, #26]
    1c62:	2310      	movs	r3, #16
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	22dc      	movs	r2, #220	; 0xdc
    1c68:	76da      	strb	r2, [r3, #27]
    1c6a:	2310      	movs	r3, #16
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	222e      	movs	r2, #46	; 0x2e
    1c70:	771a      	strb	r2, [r3, #28]
    1c72:	2310      	movs	r3, #16
    1c74:	18fb      	adds	r3, r7, r3
    1c76:	2288      	movs	r2, #136	; 0x88
    1c78:	775a      	strb	r2, [r3, #29]
    1c7a:	2310      	movs	r3, #16
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	222f      	movs	r2, #47	; 0x2f
    1c80:	779a      	strb	r2, [r3, #30]
    1c82:	2310      	movs	r3, #16
    1c84:	18fb      	adds	r3, r7, r3
    1c86:	222d      	movs	r2, #45	; 0x2d
    1c88:	77da      	strb	r2, [r3, #31]
    1c8a:	2310      	movs	r3, #16
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	2220      	movs	r2, #32
    1c90:	2130      	movs	r1, #48	; 0x30
    1c92:	5499      	strb	r1, [r3, r2]
    1c94:	2310      	movs	r3, #16
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	1d7a      	adds	r2, r7, #5
    1c9a:	2121      	movs	r1, #33	; 0x21
    1c9c:	7812      	ldrb	r2, [r2, #0]
    1c9e:	545a      	strb	r2, [r3, r1]
    1ca0:	2310      	movs	r3, #16
    1ca2:	18fb      	adds	r3, r7, r3
    1ca4:	2222      	movs	r2, #34	; 0x22
    1ca6:	2137      	movs	r1, #55	; 0x37
    1ca8:	5499      	strb	r1, [r3, r2]
    1caa:	2310      	movs	r3, #16
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	2223      	movs	r2, #35	; 0x23
    1cb0:	2190      	movs	r1, #144	; 0x90
    1cb2:	5499      	strb	r1, [r3, r2]
    1cb4:	2310      	movs	r3, #16
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	2224      	movs	r2, #36	; 0x24
    1cba:	2138      	movs	r1, #56	; 0x38
    1cbc:	5499      	strb	r1, [r3, r2]
    1cbe:	2310      	movs	r3, #16
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	2225      	movs	r2, #37	; 0x25
    1cc4:	2142      	movs	r1, #66	; 0x42
    1cc6:	5499      	strb	r1, [r3, r2]
    1cc8:	2310      	movs	r3, #16
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	2226      	movs	r2, #38	; 0x26
    1cce:	213c      	movs	r1, #60	; 0x3c
    1cd0:	5499      	strb	r1, [r3, r2]
    1cd2:	2310      	movs	r3, #16
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	2227      	movs	r2, #39	; 0x27
    1cd8:	218f      	movs	r1, #143	; 0x8f
    1cda:	5499      	strb	r1, [r3, r2]
    1cdc:	2310      	movs	r3, #16
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	2228      	movs	r2, #40	; 0x28
    1ce2:	213d      	movs	r1, #61	; 0x3d
    1ce4:	5499      	strb	r1, [r3, r2]
    1ce6:	2310      	movs	r3, #16
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	2229      	movs	r2, #41	; 0x29
    1cec:	2112      	movs	r1, #18
    1cee:	5499      	strb	r1, [r3, r2]
    1cf0:	2310      	movs	r3, #16
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	222a      	movs	r2, #42	; 0x2a
    1cf6:	216f      	movs	r1, #111	; 0x6f
    1cf8:	5499      	strb	r1, [r3, r2]
    1cfa:	2310      	movs	r3, #16
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	222b      	movs	r2, #43	; 0x2b
    1d00:	2130      	movs	r1, #48	; 0x30
    1d02:	5499      	strb	r1, [r3, r2]
    1d04:	2310      	movs	r3, #16
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	222c      	movs	r2, #44	; 0x2c
    1d0a:	21ff      	movs	r1, #255	; 0xff
    1d0c:	5499      	strb	r1, [r3, r2]
    1d0e:	2310      	movs	r3, #16
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	222d      	movs	r2, #45	; 0x2d
    1d14:	2100      	movs	r1, #0
    1d16:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    1d18:	4b4b      	ldr	r3, [pc, #300]	; (1e48 <RFM_initialize+0x328>)
    1d1a:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    1d1c:	4b4b      	ldr	r3, [pc, #300]	; (1e4c <RFM_initialize+0x32c>)
    1d1e:	4798      	blx	r3
  configure_port_pins();
    1d20:	4b4b      	ldr	r3, [pc, #300]	; (1e50 <RFM_initialize+0x330>)
    1d22:	4798      	blx	r3
  configure_extint_channel();
    1d24:	4b4b      	ldr	r3, [pc, #300]	; (1e54 <RFM_initialize+0x334>)
    1d26:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    1d28:	4b4b      	ldr	r3, [pc, #300]	; (1e58 <RFM_initialize+0x338>)
    1d2a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    1d2c:	230f      	movs	r3, #15
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	2232      	movs	r2, #50	; 0x32
    1d32:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    1d34:	21aa      	movs	r1, #170	; 0xaa
    1d36:	202f      	movs	r0, #47	; 0x2f
    1d38:	4b48      	ldr	r3, [pc, #288]	; (1e5c <RFM_initialize+0x33c>)
    1d3a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    1d3c:	202f      	movs	r0, #47	; 0x2f
    1d3e:	4b48      	ldr	r3, [pc, #288]	; (1e60 <RFM_initialize+0x340>)
    1d40:	4798      	blx	r3
    1d42:	1e03      	subs	r3, r0, #0
    1d44:	2baa      	cmp	r3, #170	; 0xaa
    1d46:	d008      	beq.n	1d5a <RFM_initialize+0x23a>
    1d48:	4b46      	ldr	r3, [pc, #280]	; (1e64 <RFM_initialize+0x344>)
    1d4a:	4798      	blx	r3
    1d4c:	0002      	movs	r2, r0
    1d4e:	230f      	movs	r3, #15
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	b2db      	uxtb	r3, r3
    1d56:	429a      	cmp	r2, r3
    1d58:	d3ec      	bcc.n	1d34 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    1d5a:	4b3f      	ldr	r3, [pc, #252]	; (1e58 <RFM_initialize+0x338>)
    1d5c:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    1d5e:	2155      	movs	r1, #85	; 0x55
    1d60:	202f      	movs	r0, #47	; 0x2f
    1d62:	4b3e      	ldr	r3, [pc, #248]	; (1e5c <RFM_initialize+0x33c>)
    1d64:	4798      	blx	r3
    1d66:	202f      	movs	r0, #47	; 0x2f
    1d68:	4b3d      	ldr	r3, [pc, #244]	; (1e60 <RFM_initialize+0x340>)
    1d6a:	4798      	blx	r3
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	2b55      	cmp	r3, #85	; 0x55
    1d70:	d008      	beq.n	1d84 <RFM_initialize+0x264>
    1d72:	4b3c      	ldr	r3, [pc, #240]	; (1e64 <RFM_initialize+0x344>)
    1d74:	4798      	blx	r3
    1d76:	0002      	movs	r2, r0
    1d78:	230f      	movs	r3, #15
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	429a      	cmp	r2, r3
    1d82:	d3ec      	bcc.n	1d5e <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1d84:	233f      	movs	r3, #63	; 0x3f
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	2200      	movs	r2, #0
    1d8a:	701a      	strb	r2, [r3, #0]
    1d8c:	e019      	b.n	1dc2 <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    1d8e:	233f      	movs	r3, #63	; 0x3f
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	781a      	ldrb	r2, [r3, #0]
    1d94:	2310      	movs	r3, #16
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	5cd0      	ldrb	r0, [r2, r3]
    1d9c:	233f      	movs	r3, #63	; 0x3f
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	2210      	movs	r2, #16
    1da4:	18ba      	adds	r2, r7, r2
    1da6:	005b      	lsls	r3, r3, #1
    1da8:	18d3      	adds	r3, r2, r3
    1daa:	3301      	adds	r3, #1
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	0019      	movs	r1, r3
    1db0:	4b2a      	ldr	r3, [pc, #168]	; (1e5c <RFM_initialize+0x33c>)
    1db2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1db4:	233f      	movs	r3, #63	; 0x3f
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	781a      	ldrb	r2, [r3, #0]
    1dba:	233f      	movs	r3, #63	; 0x3f
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	3201      	adds	r2, #1
    1dc0:	701a      	strb	r2, [r3, #0]
    1dc2:	233f      	movs	r3, #63	; 0x3f
    1dc4:	18fb      	adds	r3, r7, r3
    1dc6:	781a      	ldrb	r2, [r3, #0]
    1dc8:	2310      	movs	r3, #16
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	0052      	lsls	r2, r2, #1
    1dce:	5cd3      	ldrb	r3, [r2, r3]
    1dd0:	2bff      	cmp	r3, #255	; 0xff
    1dd2:	d1dc      	bne.n	1d8e <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    1dd4:	2000      	movs	r0, #0
    1dd6:	4b24      	ldr	r3, [pc, #144]	; (1e68 <RFM_initialize+0x348>)
    1dd8:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    1dda:	4b24      	ldr	r3, [pc, #144]	; (1e6c <RFM_initialize+0x34c>)
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	b2db      	uxtb	r3, r3
    1de0:	0018      	movs	r0, r3
    1de2:	4b23      	ldr	r3, [pc, #140]	; (1e70 <RFM_initialize+0x350>)
    1de4:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    1de6:	2001      	movs	r0, #1
    1de8:	4b22      	ldr	r3, [pc, #136]	; (1e74 <RFM_initialize+0x354>)
    1dea:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    1dec:	4b1a      	ldr	r3, [pc, #104]	; (1e58 <RFM_initialize+0x338>)
    1dee:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    1df0:	46c0      	nop			; (mov r8, r8)
    1df2:	2027      	movs	r0, #39	; 0x27
    1df4:	4b1a      	ldr	r3, [pc, #104]	; (1e60 <RFM_initialize+0x340>)
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
    1dfa:	b25b      	sxtb	r3, r3
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	db08      	blt.n	1e12 <RFM_initialize+0x2f2>
    1e00:	4b18      	ldr	r3, [pc, #96]	; (1e64 <RFM_initialize+0x344>)
    1e02:	4798      	blx	r3
    1e04:	0002      	movs	r2, r0
    1e06:	230f      	movs	r3, #15
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	781b      	ldrb	r3, [r3, #0]
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	429a      	cmp	r2, r3
    1e10:	d3ef      	bcc.n	1df2 <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    1e12:	4b14      	ldr	r3, [pc, #80]	; (1e64 <RFM_initialize+0x344>)
    1e14:	4798      	blx	r3
    1e16:	0002      	movs	r2, r0
    1e18:	230f      	movs	r3, #15
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	b2db      	uxtb	r3, r3
    1e20:	429a      	cmp	r2, r3
    1e22:	d301      	bcc.n	1e28 <RFM_initialize+0x308>
    return false;
    1e24:	2300      	movs	r3, #0
    1e26:	e009      	b.n	1e3c <RFM_initialize+0x31c>
  _inISR = false;
    1e28:	4b13      	ldr	r3, [pc, #76]	; (1e78 <RFM_initialize+0x358>)
    1e2a:	2200      	movs	r2, #0
    1e2c:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    1e2e:	4b13      	ldr	r3, [pc, #76]	; (1e7c <RFM_initialize+0x35c>)
    1e30:	4798      	blx	r3

  _address = nodeID;
    1e32:	4b13      	ldr	r3, [pc, #76]	; (1e80 <RFM_initialize+0x360>)
    1e34:	1dba      	adds	r2, r7, #6
    1e36:	7812      	ldrb	r2, [r2, #0]
    1e38:	701a      	strb	r2, [r3, #0]
  return true;
    1e3a:	2301      	movs	r3, #1
}
    1e3c:	0018      	movs	r0, r3
    1e3e:	46bd      	mov	sp, r7
    1e40:	b011      	add	sp, #68	; 0x44
    1e42:	bd90      	pop	{r4, r7, pc}
    1e44:	00001aed 	.word	0x00001aed
    1e48:	00001771 	.word	0x00001771
    1e4c:	00001831 	.word	0x00001831
    1e50:	000016d5 	.word	0x000016d5
    1e54:	00001705 	.word	0x00001705
    1e58:	00001895 	.word	0x00001895
    1e5c:	000024c9 	.word	0x000024c9
    1e60:	00002461 	.word	0x00002461
    1e64:	000018bd 	.word	0x000018bd
    1e68:	0000236d 	.word	0x0000236d
    1e6c:	200002d4 	.word	0x200002d4
    1e70:	00001a69 	.word	0x00001a69
    1e74:	00001e85 	.word	0x00001e85
    1e78:	20000245 	.word	0x20000245
    1e7c:	00001745 	.word	0x00001745
    1e80:	20000246 	.word	0x20000246

00001e84 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b082      	sub	sp, #8
    1e88:	af00      	add	r7, sp, #0
    1e8a:	0002      	movs	r2, r0
    1e8c:	1dfb      	adds	r3, r7, #7
    1e8e:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    1e90:	1dfb      	adds	r3, r7, #7
    1e92:	781b      	ldrb	r3, [r3, #0]
    1e94:	b29a      	uxth	r2, r3
    1e96:	4b47      	ldr	r3, [pc, #284]	; (1fb4 <setMode+0x130>)
    1e98:	881b      	ldrh	r3, [r3, #0]
    1e9a:	b29b      	uxth	r3, r3
    1e9c:	429a      	cmp	r2, r3
    1e9e:	d100      	bne.n	1ea2 <setMode+0x1e>
    1ea0:	e081      	b.n	1fa6 <setMode+0x122>
    return;

  switch (newMode) {
    1ea2:	1dfb      	adds	r3, r7, #7
    1ea4:	781b      	ldrb	r3, [r3, #0]
    1ea6:	2b04      	cmp	r3, #4
    1ea8:	d900      	bls.n	1eac <setMode+0x28>
    1eaa:	e07e      	b.n	1faa <setMode+0x126>
    1eac:	009a      	lsls	r2, r3, #2
    1eae:	4b42      	ldr	r3, [pc, #264]	; (1fb8 <setMode+0x134>)
    1eb0:	18d3      	adds	r3, r2, r3
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    1eb6:	2001      	movs	r0, #1
    1eb8:	4b40      	ldr	r3, [pc, #256]	; (1fbc <setMode+0x138>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	b25b      	sxtb	r3, r3
    1ec0:	221c      	movs	r2, #28
    1ec2:	4393      	bics	r3, r2
    1ec4:	b25b      	sxtb	r3, r3
    1ec6:	220c      	movs	r2, #12
    1ec8:	4313      	orrs	r3, r2
    1eca:	b25b      	sxtb	r3, r3
    1ecc:	b2db      	uxtb	r3, r3
    1ece:	0019      	movs	r1, r3
    1ed0:	2001      	movs	r0, #1
    1ed2:	4b3b      	ldr	r3, [pc, #236]	; (1fc0 <setMode+0x13c>)
    1ed4:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    1ed6:	4b3b      	ldr	r3, [pc, #236]	; (1fc4 <setMode+0x140>)
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	b2db      	uxtb	r3, r3
    1edc:	2b00      	cmp	r3, #0
    1ede:	d04c      	beq.n	1f7a <setMode+0xf6>
    1ee0:	2001      	movs	r0, #1
    1ee2:	4b39      	ldr	r3, [pc, #228]	; (1fc8 <setMode+0x144>)
    1ee4:	4798      	blx	r3
      break;
    1ee6:	e048      	b.n	1f7a <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    1ee8:	2001      	movs	r0, #1
    1eea:	4b34      	ldr	r3, [pc, #208]	; (1fbc <setMode+0x138>)
    1eec:	4798      	blx	r3
    1eee:	0003      	movs	r3, r0
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	221c      	movs	r2, #28
    1ef4:	4393      	bics	r3, r2
    1ef6:	b25b      	sxtb	r3, r3
    1ef8:	2210      	movs	r2, #16
    1efa:	4313      	orrs	r3, r2
    1efc:	b25b      	sxtb	r3, r3
    1efe:	b2db      	uxtb	r3, r3
    1f00:	0019      	movs	r1, r3
    1f02:	2001      	movs	r0, #1
    1f04:	4b2e      	ldr	r3, [pc, #184]	; (1fc0 <setMode+0x13c>)
    1f06:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    1f08:	4b2e      	ldr	r3, [pc, #184]	; (1fc4 <setMode+0x140>)
    1f0a:	781b      	ldrb	r3, [r3, #0]
    1f0c:	b2db      	uxtb	r3, r3
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d035      	beq.n	1f7e <setMode+0xfa>
    1f12:	2000      	movs	r0, #0
    1f14:	4b2c      	ldr	r3, [pc, #176]	; (1fc8 <setMode+0x144>)
    1f16:	4798      	blx	r3
      break;
    1f18:	e031      	b.n	1f7e <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    1f1a:	2001      	movs	r0, #1
    1f1c:	4b27      	ldr	r3, [pc, #156]	; (1fbc <setMode+0x138>)
    1f1e:	4798      	blx	r3
    1f20:	0003      	movs	r3, r0
    1f22:	b25b      	sxtb	r3, r3
    1f24:	221c      	movs	r2, #28
    1f26:	4393      	bics	r3, r2
    1f28:	b25b      	sxtb	r3, r3
    1f2a:	2208      	movs	r2, #8
    1f2c:	4313      	orrs	r3, r2
    1f2e:	b25b      	sxtb	r3, r3
    1f30:	b2db      	uxtb	r3, r3
    1f32:	0019      	movs	r1, r3
    1f34:	2001      	movs	r0, #1
    1f36:	4b22      	ldr	r3, [pc, #136]	; (1fc0 <setMode+0x13c>)
    1f38:	4798      	blx	r3
      break;
    1f3a:	e021      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    1f3c:	2001      	movs	r0, #1
    1f3e:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <setMode+0x138>)
    1f40:	4798      	blx	r3
    1f42:	0003      	movs	r3, r0
    1f44:	b25b      	sxtb	r3, r3
    1f46:	221c      	movs	r2, #28
    1f48:	4393      	bics	r3, r2
    1f4a:	b25b      	sxtb	r3, r3
    1f4c:	2204      	movs	r2, #4
    1f4e:	4313      	orrs	r3, r2
    1f50:	b25b      	sxtb	r3, r3
    1f52:	b2db      	uxtb	r3, r3
    1f54:	0019      	movs	r1, r3
    1f56:	2001      	movs	r0, #1
    1f58:	4b19      	ldr	r3, [pc, #100]	; (1fc0 <setMode+0x13c>)
    1f5a:	4798      	blx	r3
      break;
    1f5c:	e010      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    1f5e:	2001      	movs	r0, #1
    1f60:	4b16      	ldr	r3, [pc, #88]	; (1fbc <setMode+0x138>)
    1f62:	4798      	blx	r3
    1f64:	0003      	movs	r3, r0
    1f66:	001a      	movs	r2, r3
    1f68:	231c      	movs	r3, #28
    1f6a:	439a      	bics	r2, r3
    1f6c:	0013      	movs	r3, r2
    1f6e:	b2db      	uxtb	r3, r3
    1f70:	0019      	movs	r1, r3
    1f72:	2001      	movs	r0, #1
    1f74:	4b12      	ldr	r3, [pc, #72]	; (1fc0 <setMode+0x13c>)
    1f76:	4798      	blx	r3
      break;
    1f78:	e002      	b.n	1f80 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	e000      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    1f7e:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	4b0c      	ldr	r3, [pc, #48]	; (1fb4 <setMode+0x130>)
    1f84:	881b      	ldrh	r3, [r3, #0]
    1f86:	b29b      	uxth	r3, r3
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d106      	bne.n	1f9a <setMode+0x116>
    1f8c:	2027      	movs	r0, #39	; 0x27
    1f8e:	4b0b      	ldr	r3, [pc, #44]	; (1fbc <setMode+0x138>)
    1f90:	4798      	blx	r3
    1f92:	0003      	movs	r3, r0
    1f94:	b25b      	sxtb	r3, r3
    1f96:	2b00      	cmp	r3, #0
    1f98:	daf3      	bge.n	1f82 <setMode+0xfe>

  _mode = newMode;
    1f9a:	1dfb      	adds	r3, r7, #7
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	b29a      	uxth	r2, r3
    1fa0:	4b04      	ldr	r3, [pc, #16]	; (1fb4 <setMode+0x130>)
    1fa2:	801a      	strh	r2, [r3, #0]
    1fa4:	e002      	b.n	1fac <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	e000      	b.n	1fac <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    1faa:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	200002d2 	.word	0x200002d2
    1fb8:	00009008 	.word	0x00009008
    1fbc:	00002461 	.word	0x00002461
    1fc0:	000024c9 	.word	0x000024c9
    1fc4:	200002d4 	.word	0x200002d4
    1fc8:	00002579 	.word	0x00002579

00001fcc <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    1fd0:	4b0b      	ldr	r3, [pc, #44]	; (2000 <STACK_SIZE>)
    1fd2:	881b      	ldrh	r3, [r3, #0]
    1fd4:	b29b      	uxth	r3, r3
    1fd6:	2b03      	cmp	r3, #3
    1fd8:	d10e      	bne.n	1ff8 <canSend+0x2c>
    1fda:	4b0a      	ldr	r3, [pc, #40]	; (2004 <STACK_SIZE+0x4>)
    1fdc:	881b      	ldrh	r3, [r3, #0]
    1fde:	b29b      	uxth	r3, r3
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d109      	bne.n	1ff8 <canSend+0x2c>
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <STACK_SIZE+0x8>)
    1fe6:	4798      	blx	r3
    1fe8:	0003      	movs	r3, r0
    1fea:	335a      	adds	r3, #90	; 0x5a
    1fec:	da04      	bge.n	1ff8 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    1fee:	2001      	movs	r0, #1
    1ff0:	4b06      	ldr	r3, [pc, #24]	; (200c <STACK_SIZE+0xc>)
    1ff2:	4798      	blx	r3
    return true;
    1ff4:	2301      	movs	r3, #1
    1ff6:	e000      	b.n	1ffa <canSend+0x2e>
  }
  return false;
    1ff8:	2300      	movs	r3, #0
}
    1ffa:	0018      	movs	r0, r3
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}
    2000:	200002d2 	.word	0x200002d2
    2004:	200002cc 	.word	0x200002cc
    2008:	00002421 	.word	0x00002421
    200c:	00001e85 	.word	0x00001e85

00002010 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    2010:	b590      	push	{r4, r7, lr}
    2012:	b085      	sub	sp, #20
    2014:	af02      	add	r7, sp, #8
    2016:	0004      	movs	r4, r0
    2018:	6039      	str	r1, [r7, #0]
    201a:	0010      	movs	r0, r2
    201c:	0019      	movs	r1, r3
    201e:	1dfb      	adds	r3, r7, #7
    2020:	1c22      	adds	r2, r4, #0
    2022:	701a      	strb	r2, [r3, #0]
    2024:	1dbb      	adds	r3, r7, #6
    2026:	1c02      	adds	r2, r0, #0
    2028:	701a      	strb	r2, [r3, #0]
    202a:	1d7b      	adds	r3, r7, #5
    202c:	1c0a      	adds	r2, r1, #0
    202e:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    2030:	203d      	movs	r0, #61	; 0x3d
    2032:	4b17      	ldr	r3, [pc, #92]	; (2090 <RFM_send+0x80>)
    2034:	4798      	blx	r3
    2036:	0003      	movs	r3, r0
    2038:	001a      	movs	r2, r3
    203a:	2304      	movs	r3, #4
    203c:	4313      	orrs	r3, r2
    203e:	b2db      	uxtb	r3, r3
    2040:	0019      	movs	r1, r3
    2042:	203d      	movs	r0, #61	; 0x3d
    2044:	4b13      	ldr	r3, [pc, #76]	; (2094 <RFM_send+0x84>)
    2046:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <RFM_send+0x88>)
    204a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    204c:	e001      	b.n	2052 <RFM_send+0x42>
    204e:	4b13      	ldr	r3, [pc, #76]	; (209c <RFM_send+0x8c>)
    2050:	4798      	blx	r3
    2052:	4b13      	ldr	r3, [pc, #76]	; (20a0 <RFM_send+0x90>)
    2054:	4798      	blx	r3
    2056:	0003      	movs	r3, r0
    2058:	001a      	movs	r2, r3
    205a:	2301      	movs	r3, #1
    205c:	4053      	eors	r3, r2
    205e:	b2db      	uxtb	r3, r3
    2060:	2b00      	cmp	r3, #0
    2062:	d005      	beq.n	2070 <RFM_send+0x60>
    2064:	4b0f      	ldr	r3, [pc, #60]	; (20a4 <RFM_send+0x94>)
    2066:	4798      	blx	r3
    2068:	1e02      	subs	r2, r0, #0
    206a:	4b0f      	ldr	r3, [pc, #60]	; (20a8 <RFM_send+0x98>)
    206c:	429a      	cmp	r2, r3
    206e:	d9ee      	bls.n	204e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    2070:	1d7b      	adds	r3, r7, #5
    2072:	781c      	ldrb	r4, [r3, #0]
    2074:	1dbb      	adds	r3, r7, #6
    2076:	781a      	ldrb	r2, [r3, #0]
    2078:	6839      	ldr	r1, [r7, #0]
    207a:	1dfb      	adds	r3, r7, #7
    207c:	7818      	ldrb	r0, [r3, #0]
    207e:	2300      	movs	r3, #0
    2080:	9300      	str	r3, [sp, #0]
    2082:	0023      	movs	r3, r4
    2084:	4c09      	ldr	r4, [pc, #36]	; (20ac <RFM_send+0x9c>)
    2086:	47a0      	blx	r4
}
    2088:	46c0      	nop			; (mov r8, r8)
    208a:	46bd      	mov	sp, r7
    208c:	b003      	add	sp, #12
    208e:	bd90      	pop	{r4, r7, pc}
    2090:	00002461 	.word	0x00002461
    2094:	000024c9 	.word	0x000024c9
    2098:	00001895 	.word	0x00001895
    209c:	00002321 	.word	0x00002321
    20a0:	00001fcd 	.word	0x00001fcd
    20a4:	000018bd 	.word	0x000018bd
    20a8:	000003e7 	.word	0x000003e7
    20ac:	000018e5 	.word	0x000018e5

000020b0 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    20b6:	4b58      	ldr	r3, [pc, #352]	; (2218 <interruptHandler+0x168>)
    20b8:	881b      	ldrh	r3, [r3, #0]
    20ba:	b29b      	uxth	r3, r3
    20bc:	2b03      	cmp	r3, #3
    20be:	d000      	beq.n	20c2 <interruptHandler+0x12>
    20c0:	e0a1      	b.n	2206 <interruptHandler+0x156>
    20c2:	2028      	movs	r0, #40	; 0x28
    20c4:	4b55      	ldr	r3, [pc, #340]	; (221c <interruptHandler+0x16c>)
    20c6:	4798      	blx	r3
    20c8:	0003      	movs	r3, r0
    20ca:	001a      	movs	r2, r3
    20cc:	2304      	movs	r3, #4
    20ce:	4013      	ands	r3, r2
    20d0:	d100      	bne.n	20d4 <interruptHandler+0x24>
    20d2:	e098      	b.n	2206 <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    20d4:	2001      	movs	r0, #1
    20d6:	4b52      	ldr	r3, [pc, #328]	; (2220 <interruptHandler+0x170>)
    20d8:	4798      	blx	r3
    selectrf();
    20da:	4b52      	ldr	r3, [pc, #328]	; (2224 <interruptHandler+0x174>)
    20dc:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    20de:	4a52      	ldr	r2, [pc, #328]	; (2228 <interruptHandler+0x178>)
    20e0:	4b52      	ldr	r3, [pc, #328]	; (222c <interruptHandler+0x17c>)
    20e2:	2100      	movs	r1, #0
    20e4:	0018      	movs	r0, r3
    20e6:	4b52      	ldr	r3, [pc, #328]	; (2230 <interruptHandler+0x180>)
    20e8:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    20ea:	4a52      	ldr	r2, [pc, #328]	; (2234 <interruptHandler+0x184>)
    20ec:	4b4f      	ldr	r3, [pc, #316]	; (222c <interruptHandler+0x17c>)
    20ee:	2100      	movs	r1, #0
    20f0:	0018      	movs	r0, r3
    20f2:	4b4f      	ldr	r3, [pc, #316]	; (2230 <interruptHandler+0x180>)
    20f4:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    20f6:	4b4f      	ldr	r3, [pc, #316]	; (2234 <interruptHandler+0x184>)
    20f8:	881b      	ldrh	r3, [r3, #0]
    20fa:	b29b      	uxth	r3, r3
    20fc:	2b42      	cmp	r3, #66	; 0x42
    20fe:	d803      	bhi.n	2108 <interruptHandler+0x58>
    2100:	4b4c      	ldr	r3, [pc, #304]	; (2234 <interruptHandler+0x184>)
    2102:	881b      	ldrh	r3, [r3, #0]
    2104:	b29a      	uxth	r2, r3
    2106:	e000      	b.n	210a <interruptHandler+0x5a>
    2108:	2242      	movs	r2, #66	; 0x42
    210a:	4b4a      	ldr	r3, [pc, #296]	; (2234 <interruptHandler+0x184>)
    210c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    210e:	4a4a      	ldr	r2, [pc, #296]	; (2238 <interruptHandler+0x188>)
    2110:	4b46      	ldr	r3, [pc, #280]	; (222c <interruptHandler+0x17c>)
    2112:	2100      	movs	r1, #0
    2114:	0018      	movs	r0, r3
    2116:	4b46      	ldr	r3, [pc, #280]	; (2230 <interruptHandler+0x180>)
    2118:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    211a:	4b48      	ldr	r3, [pc, #288]	; (223c <interruptHandler+0x18c>)
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	b2db      	uxtb	r3, r3
    2120:	2201      	movs	r2, #1
    2122:	4053      	eors	r3, r2
    2124:	b2db      	uxtb	r3, r3
    2126:	2b00      	cmp	r3, #0
    2128:	d00d      	beq.n	2146 <interruptHandler+0x96>
    212a:	4b45      	ldr	r3, [pc, #276]	; (2240 <interruptHandler+0x190>)
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	b2db      	uxtb	r3, r3
    2130:	b29a      	uxth	r2, r3
    2132:	4b41      	ldr	r3, [pc, #260]	; (2238 <interruptHandler+0x188>)
    2134:	881b      	ldrh	r3, [r3, #0]
    2136:	b29b      	uxth	r3, r3
    2138:	429a      	cmp	r2, r3
    213a:	d004      	beq.n	2146 <interruptHandler+0x96>
    213c:	4b3e      	ldr	r3, [pc, #248]	; (2238 <interruptHandler+0x188>)
    213e:	881b      	ldrh	r3, [r3, #0]
    2140:	b29b      	uxth	r3, r3
    2142:	2bff      	cmp	r3, #255	; 0xff
    2144:	d104      	bne.n	2150 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    2146:	4b3b      	ldr	r3, [pc, #236]	; (2234 <interruptHandler+0x184>)
    2148:	881b      	ldrh	r3, [r3, #0]
    214a:	b29b      	uxth	r3, r3
    214c:	2b02      	cmp	r3, #2
    214e:	d807      	bhi.n	2160 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    2150:	4b38      	ldr	r3, [pc, #224]	; (2234 <interruptHandler+0x184>)
    2152:	2200      	movs	r2, #0
    2154:	801a      	strh	r2, [r3, #0]
      unselect();
    2156:	4b3b      	ldr	r3, [pc, #236]	; (2244 <interruptHandler+0x194>)
    2158:	4798      	blx	r3
      receiveBegin();
    215a:	4b3b      	ldr	r3, [pc, #236]	; (2248 <interruptHandler+0x198>)
    215c:	4798      	blx	r3
    215e:	e058      	b.n	2212 <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    2160:	4b34      	ldr	r3, [pc, #208]	; (2234 <interruptHandler+0x184>)
    2162:	881b      	ldrh	r3, [r3, #0]
    2164:	b29b      	uxth	r3, r3
    2166:	3b03      	subs	r3, #3
    2168:	b29a      	uxth	r2, r3
    216a:	4b38      	ldr	r3, [pc, #224]	; (224c <interruptHandler+0x19c>)
    216c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    216e:	4a38      	ldr	r2, [pc, #224]	; (2250 <interruptHandler+0x1a0>)
    2170:	4b2e      	ldr	r3, [pc, #184]	; (222c <interruptHandler+0x17c>)
    2172:	2100      	movs	r1, #0
    2174:	0018      	movs	r0, r3
    2176:	4b2e      	ldr	r3, [pc, #184]	; (2230 <interruptHandler+0x180>)
    2178:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    217a:	1dbb      	adds	r3, r7, #6
    217c:	2200      	movs	r2, #0
    217e:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    2180:	1dba      	adds	r2, r7, #6
    2182:	4b2a      	ldr	r3, [pc, #168]	; (222c <interruptHandler+0x17c>)
    2184:	2100      	movs	r1, #0
    2186:	0018      	movs	r0, r3
    2188:	4b29      	ldr	r3, [pc, #164]	; (2230 <interruptHandler+0x180>)
    218a:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    218c:	1dbb      	adds	r3, r7, #6
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	b29b      	uxth	r3, r3
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	4013      	ands	r3, r2
    2196:	b29a      	uxth	r2, r3
    2198:	4b2e      	ldr	r3, [pc, #184]	; (2254 <interruptHandler+0x1a4>)
    219a:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    219c:	1dbb      	adds	r3, r7, #6
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	b29b      	uxth	r3, r3
    21a2:	2240      	movs	r2, #64	; 0x40
    21a4:	4013      	ands	r3, r2
    21a6:	b29a      	uxth	r2, r3
    21a8:	4b2b      	ldr	r3, [pc, #172]	; (2258 <interruptHandler+0x1a8>)
    21aa:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21ac:	1dfb      	adds	r3, r7, #7
    21ae:	2200      	movs	r2, #0
    21b0:	701a      	strb	r2, [r3, #0]
    21b2:	e00e      	b.n	21d2 <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    21b4:	1dfb      	adds	r3, r7, #7
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	005a      	lsls	r2, r3, #1
    21ba:	4b28      	ldr	r3, [pc, #160]	; (225c <interruptHandler+0x1ac>)
    21bc:	18d2      	adds	r2, r2, r3
    21be:	4b1b      	ldr	r3, [pc, #108]	; (222c <interruptHandler+0x17c>)
    21c0:	2100      	movs	r1, #0
    21c2:	0018      	movs	r0, r3
    21c4:	4b1a      	ldr	r3, [pc, #104]	; (2230 <interruptHandler+0x180>)
    21c6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	781a      	ldrb	r2, [r3, #0]
    21cc:	1dfb      	adds	r3, r7, #7
    21ce:	3201      	adds	r2, #1
    21d0:	701a      	strb	r2, [r3, #0]
    21d2:	1dfb      	adds	r3, r7, #7
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	b29a      	uxth	r2, r3
    21d8:	4b1c      	ldr	r3, [pc, #112]	; (224c <interruptHandler+0x19c>)
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	b29b      	uxth	r3, r3
    21de:	429a      	cmp	r2, r3
    21e0:	d3e8      	bcc.n	21b4 <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    21e2:	4b1a      	ldr	r3, [pc, #104]	; (224c <interruptHandler+0x19c>)
    21e4:	881b      	ldrh	r3, [r3, #0]
    21e6:	b29b      	uxth	r3, r3
    21e8:	2b3c      	cmp	r3, #60	; 0x3c
    21ea:	d807      	bhi.n	21fc <interruptHandler+0x14c>
    21ec:	4b17      	ldr	r3, [pc, #92]	; (224c <interruptHandler+0x19c>)
    21ee:	881b      	ldrh	r3, [r3, #0]
    21f0:	b29b      	uxth	r3, r3
    21f2:	001a      	movs	r2, r3
    21f4:	4b19      	ldr	r3, [pc, #100]	; (225c <interruptHandler+0x1ac>)
    21f6:	0052      	lsls	r2, r2, #1
    21f8:	2100      	movs	r1, #0
    21fa:	52d1      	strh	r1, [r2, r3]
    unselect();
    21fc:	4b11      	ldr	r3, [pc, #68]	; (2244 <interruptHandler+0x194>)
    21fe:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    2200:	2003      	movs	r0, #3
    2202:	4b07      	ldr	r3, [pc, #28]	; (2220 <interruptHandler+0x170>)
    2204:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    2206:	4b16      	ldr	r3, [pc, #88]	; (2260 <interruptHandler+0x1b0>)
    2208:	4798      	blx	r3
    220a:	0003      	movs	r3, r0
    220c:	001a      	movs	r2, r3
    220e:	4b15      	ldr	r3, [pc, #84]	; (2264 <interruptHandler+0x1b4>)
    2210:	801a      	strh	r2, [r3, #0]
}
    2212:	46bd      	mov	sp, r7
    2214:	b002      	add	sp, #8
    2216:	bd80      	pop	{r7, pc}
    2218:	200002d2 	.word	0x200002d2
    221c:	00002461 	.word	0x00002461
    2220:	00001e85 	.word	0x00001e85
    2224:	00002529 	.word	0x00002529
    2228:	200000fe 	.word	0x200000fe
    222c:	200002d8 	.word	0x200002d8
    2230:	000011ad 	.word	0x000011ad
    2234:	200002cc 	.word	0x200002cc
    2238:	200002d0 	.word	0x200002d0
    223c:	2000024c 	.word	0x2000024c
    2240:	20000246 	.word	0x20000246
    2244:	0000254d 	.word	0x0000254d
    2248:	0000228d 	.word	0x0000228d
    224c:	2000024a 	.word	0x2000024a
    2250:	2000023a 	.word	0x2000023a
    2254:	20000248 	.word	0x20000248
    2258:	200002ce 	.word	0x200002ce
    225c:	20000250 	.word	0x20000250
    2260:	00002421 	.word	0x00002421
    2264:	200002e4 	.word	0x200002e4

00002268 <isr0>:

// internal function
void isr0()
{ 
    2268:	b580      	push	{r7, lr}
    226a:	af00      	add	r7, sp, #0
	_inISR = true; 
    226c:	4b05      	ldr	r3, [pc, #20]	; (2284 <isr0+0x1c>)
    226e:	2201      	movs	r2, #1
    2270:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    2272:	4b05      	ldr	r3, [pc, #20]	; (2288 <isr0+0x20>)
    2274:	4798      	blx	r3
	_inISR = false;
    2276:	4b03      	ldr	r3, [pc, #12]	; (2284 <isr0+0x1c>)
    2278:	2200      	movs	r2, #0
    227a:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    227c:	46c0      	nop			; (mov r8, r8)
    227e:	46bd      	mov	sp, r7
    2280:	bd80      	pop	{r7, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	20000245 	.word	0x20000245
    2288:	000020b1 	.word	0x000020b1

0000228c <receiveBegin>:

// internal function
void receiveBegin() {
    228c:	b580      	push	{r7, lr}
    228e:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    2290:	4b19      	ldr	r3, [pc, #100]	; (22f8 <receiveBegin+0x6c>)
    2292:	2200      	movs	r2, #0
    2294:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    2296:	4b19      	ldr	r3, [pc, #100]	; (22fc <receiveBegin+0x70>)
    2298:	2200      	movs	r2, #0
    229a:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    229c:	4b18      	ldr	r3, [pc, #96]	; (2300 <receiveBegin+0x74>)
    229e:	2200      	movs	r2, #0
    22a0:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    22a2:	4b18      	ldr	r3, [pc, #96]	; (2304 <receiveBegin+0x78>)
    22a4:	2200      	movs	r2, #0
    22a6:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    22a8:	4b17      	ldr	r3, [pc, #92]	; (2308 <receiveBegin+0x7c>)
    22aa:	2200      	movs	r2, #0
    22ac:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    22ae:	4b17      	ldr	r3, [pc, #92]	; (230c <receiveBegin+0x80>)
    22b0:	2200      	movs	r2, #0
    22b2:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    22b4:	4b16      	ldr	r3, [pc, #88]	; (2310 <receiveBegin+0x84>)
    22b6:	2200      	movs	r2, #0
    22b8:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    22ba:	2028      	movs	r0, #40	; 0x28
    22bc:	4b15      	ldr	r3, [pc, #84]	; (2314 <receiveBegin+0x88>)
    22be:	4798      	blx	r3
    22c0:	0003      	movs	r3, r0
    22c2:	001a      	movs	r2, r3
    22c4:	2304      	movs	r3, #4
    22c6:	4013      	ands	r3, r2
    22c8:	d00b      	beq.n	22e2 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    22ca:	203d      	movs	r0, #61	; 0x3d
    22cc:	4b11      	ldr	r3, [pc, #68]	; (2314 <receiveBegin+0x88>)
    22ce:	4798      	blx	r3
    22d0:	0003      	movs	r3, r0
    22d2:	001a      	movs	r2, r3
    22d4:	2304      	movs	r3, #4
    22d6:	4313      	orrs	r3, r2
    22d8:	b2db      	uxtb	r3, r3
    22da:	0019      	movs	r1, r3
    22dc:	203d      	movs	r0, #61	; 0x3d
    22de:	4b0e      	ldr	r3, [pc, #56]	; (2318 <receiveBegin+0x8c>)
    22e0:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    22e2:	2140      	movs	r1, #64	; 0x40
    22e4:	2025      	movs	r0, #37	; 0x25
    22e6:	4b0c      	ldr	r3, [pc, #48]	; (2318 <receiveBegin+0x8c>)
    22e8:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    22ea:	2003      	movs	r0, #3
    22ec:	4b0b      	ldr	r3, [pc, #44]	; (231c <receiveBegin+0x90>)
    22ee:	4798      	blx	r3
}
    22f0:	46c0      	nop			; (mov r8, r8)
    22f2:	46bd      	mov	sp, r7
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	2000024a 	.word	0x2000024a
    22fc:	2000023a 	.word	0x2000023a
    2300:	200002d0 	.word	0x200002d0
    2304:	200002cc 	.word	0x200002cc
    2308:	200002ce 	.word	0x200002ce
    230c:	20000248 	.word	0x20000248
    2310:	200002e4 	.word	0x200002e4
    2314:	00002461 	.word	0x00002461
    2318:	000024c9 	.word	0x000024c9
    231c:	00001e85 	.word	0x00001e85

00002320 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    2320:	b580      	push	{r7, lr}
    2322:	af00      	add	r7, sp, #0
  //system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    2324:	4b0d      	ldr	r3, [pc, #52]	; (235c <RFM_receiveDone+0x3c>)
    2326:	881b      	ldrh	r3, [r3, #0]
    2328:	b29b      	uxth	r3, r3
    232a:	2b03      	cmp	r3, #3
    232c:	d109      	bne.n	2342 <RFM_receiveDone+0x22>
    232e:	4b0c      	ldr	r3, [pc, #48]	; (2360 <RFM_receiveDone+0x40>)
    2330:	881b      	ldrh	r3, [r3, #0]
    2332:	b29b      	uxth	r3, r3
    2334:	2b00      	cmp	r3, #0
    2336:	d004      	beq.n	2342 <RFM_receiveDone+0x22>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    2338:	2001      	movs	r0, #1
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <RFM_receiveDone+0x44>)
    233c:	4798      	blx	r3
    return true;
    233e:	2301      	movs	r3, #1
    2340:	e009      	b.n	2356 <RFM_receiveDone+0x36>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    2342:	4b06      	ldr	r3, [pc, #24]	; (235c <RFM_receiveDone+0x3c>)
    2344:	881b      	ldrh	r3, [r3, #0]
    2346:	b29b      	uxth	r3, r3
    2348:	2b03      	cmp	r3, #3
    234a:	d101      	bne.n	2350 <RFM_receiveDone+0x30>
  {
    //system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    return false;
    234c:	2300      	movs	r3, #0
    234e:	e002      	b.n	2356 <RFM_receiveDone+0x36>
  }
  receiveBegin();
    2350:	4b05      	ldr	r3, [pc, #20]	; (2368 <RFM_receiveDone+0x48>)
    2352:	4798      	blx	r3
  return false;
    2354:	2300      	movs	r3, #0
}
    2356:	0018      	movs	r0, r3
    2358:	46bd      	mov	sp, r7
    235a:	bd80      	pop	{r7, pc}
    235c:	200002d2 	.word	0x200002d2
    2360:	200002cc 	.word	0x200002cc
    2364:	00001e85 	.word	0x00001e85
    2368:	0000228d 	.word	0x0000228d

0000236c <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    2374:	2001      	movs	r0, #1
    2376:	4b22      	ldr	r3, [pc, #136]	; (2400 <RFM_encrypt+0x94>)
    2378:	4798      	blx	r3
  if (key != 0)
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	2b00      	cmp	r3, #0
    237e:	d026      	beq.n	23ce <RFM_encrypt+0x62>
  {
    selectrf();
    2380:	4b20      	ldr	r3, [pc, #128]	; (2404 <RFM_encrypt+0x98>)
    2382:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    2384:	4a20      	ldr	r2, [pc, #128]	; (2408 <RFM_encrypt+0x9c>)
    2386:	4b21      	ldr	r3, [pc, #132]	; (240c <RFM_encrypt+0xa0>)
    2388:	21be      	movs	r1, #190	; 0xbe
    238a:	0018      	movs	r0, r3
    238c:	4b20      	ldr	r3, [pc, #128]	; (2410 <RFM_encrypt+0xa4>)
    238e:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    2390:	230f      	movs	r3, #15
    2392:	18fb      	adds	r3, r7, r3
    2394:	2200      	movs	r2, #0
    2396:	701a      	strb	r2, [r3, #0]
    2398:	e012      	b.n	23c0 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    239a:	230f      	movs	r3, #15
    239c:	18fb      	adds	r3, r7, r3
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	687a      	ldr	r2, [r7, #4]
    23a2:	18d3      	adds	r3, r2, r3
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	b299      	uxth	r1, r3
    23a8:	4a17      	ldr	r2, [pc, #92]	; (2408 <RFM_encrypt+0x9c>)
    23aa:	4b18      	ldr	r3, [pc, #96]	; (240c <RFM_encrypt+0xa0>)
    23ac:	0018      	movs	r0, r3
    23ae:	4b18      	ldr	r3, [pc, #96]	; (2410 <RFM_encrypt+0xa4>)
    23b0:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    23b2:	230f      	movs	r3, #15
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	781a      	ldrb	r2, [r3, #0]
    23b8:	230f      	movs	r3, #15
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	3201      	adds	r2, #1
    23be:	701a      	strb	r2, [r3, #0]
    23c0:	230f      	movs	r3, #15
    23c2:	18fb      	adds	r3, r7, r3
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	2b0f      	cmp	r3, #15
    23c8:	d9e7      	bls.n	239a <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    23ca:	4b12      	ldr	r3, [pc, #72]	; (2414 <RFM_encrypt+0xa8>)
    23cc:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    23ce:	203d      	movs	r0, #61	; 0x3d
    23d0:	4b11      	ldr	r3, [pc, #68]	; (2418 <RFM_encrypt+0xac>)
    23d2:	4798      	blx	r3
    23d4:	0003      	movs	r3, r0
    23d6:	b25b      	sxtb	r3, r3
    23d8:	2201      	movs	r2, #1
    23da:	4393      	bics	r3, r2
    23dc:	b25a      	sxtb	r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	1e59      	subs	r1, r3, #1
    23e2:	418b      	sbcs	r3, r1
    23e4:	b2db      	uxtb	r3, r3
    23e6:	b25b      	sxtb	r3, r3
    23e8:	4313      	orrs	r3, r2
    23ea:	b25b      	sxtb	r3, r3
    23ec:	b2db      	uxtb	r3, r3
    23ee:	0019      	movs	r1, r3
    23f0:	203d      	movs	r0, #61	; 0x3d
    23f2:	4b0a      	ldr	r3, [pc, #40]	; (241c <RFM_encrypt+0xb0>)
    23f4:	4798      	blx	r3
}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	46bd      	mov	sp, r7
    23fa:	b004      	add	sp, #16
    23fc:	bd80      	pop	{r7, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	00001e85 	.word	0x00001e85
    2404:	00002529 	.word	0x00002529
    2408:	200000fe 	.word	0x200000fe
    240c:	200002d8 	.word	0x200002d8
    2410:	000011ad 	.word	0x000011ad
    2414:	0000254d 	.word	0x0000254d
    2418:	00002461 	.word	0x00002461
    241c:	000024c9 	.word	0x000024c9

00002420 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    2426:	1dbb      	adds	r3, r7, #6
    2428:	2200      	movs	r2, #0
    242a:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    242c:	2024      	movs	r0, #36	; 0x24
    242e:	4b0b      	ldr	r3, [pc, #44]	; (245c <readRSSI+0x3c>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	b29b      	uxth	r3, r3
    2436:	425b      	negs	r3, r3
    2438:	b29b      	uxth	r3, r3
    243a:	b21a      	sxth	r2, r3
    243c:	1dbb      	adds	r3, r7, #6
    243e:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    2440:	1dbb      	adds	r3, r7, #6
    2442:	881b      	ldrh	r3, [r3, #0]
    2444:	b21b      	sxth	r3, r3
    2446:	105b      	asrs	r3, r3, #1
    2448:	b21a      	sxth	r2, r3
    244a:	1dbb      	adds	r3, r7, #6
    244c:	801a      	strh	r2, [r3, #0]
  return rssi;
    244e:	1dbb      	adds	r3, r7, #6
    2450:	881b      	ldrh	r3, [r3, #0]
    2452:	b21b      	sxth	r3, r3
}
    2454:	0018      	movs	r0, r3
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}
    245c:	00002461 	.word	0x00002461

00002460 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    2460:	b580      	push	{r7, lr}
    2462:	b084      	sub	sp, #16
    2464:	af00      	add	r7, sp, #0
    2466:	0002      	movs	r2, r0
    2468:	1dbb      	adds	r3, r7, #6
    246a:	801a      	strh	r2, [r3, #0]
  selectrf();
    246c:	4b11      	ldr	r3, [pc, #68]	; (24b4 <readReg+0x54>)
    246e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    2470:	1dbb      	adds	r3, r7, #6
    2472:	881b      	ldrh	r3, [r3, #0]
    2474:	b29b      	uxth	r3, r3
    2476:	227f      	movs	r2, #127	; 0x7f
    2478:	4013      	ands	r3, r2
    247a:	b299      	uxth	r1, r3
    247c:	4a0e      	ldr	r2, [pc, #56]	; (24b8 <readReg+0x58>)
    247e:	4b0f      	ldr	r3, [pc, #60]	; (24bc <readReg+0x5c>)
    2480:	0018      	movs	r0, r3
    2482:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <readReg+0x60>)
    2484:	4798      	blx	r3
  volatile uint16_t regval = 0;
    2486:	230e      	movs	r3, #14
    2488:	18fb      	adds	r3, r7, r3
    248a:	2200      	movs	r2, #0
    248c:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    248e:	230e      	movs	r3, #14
    2490:	18fa      	adds	r2, r7, r3
    2492:	4b0a      	ldr	r3, [pc, #40]	; (24bc <readReg+0x5c>)
    2494:	2100      	movs	r1, #0
    2496:	0018      	movs	r0, r3
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <readReg+0x60>)
    249a:	4798      	blx	r3
  unselect();
    249c:	4b09      	ldr	r3, [pc, #36]	; (24c4 <readReg+0x64>)
    249e:	4798      	blx	r3
  return (uint8_t)regval;
    24a0:	230e      	movs	r3, #14
    24a2:	18fb      	adds	r3, r7, r3
    24a4:	881b      	ldrh	r3, [r3, #0]
    24a6:	b29b      	uxth	r3, r3
    24a8:	b2db      	uxtb	r3, r3
}
    24aa:	0018      	movs	r0, r3
    24ac:	46bd      	mov	sp, r7
    24ae:	b004      	add	sp, #16
    24b0:	bd80      	pop	{r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	00002529 	.word	0x00002529
    24b8:	200000fe 	.word	0x200000fe
    24bc:	200002d8 	.word	0x200002d8
    24c0:	000011ad 	.word	0x000011ad
    24c4:	0000254d 	.word	0x0000254d

000024c8 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	0002      	movs	r2, r0
    24d0:	1dfb      	adds	r3, r7, #7
    24d2:	701a      	strb	r2, [r3, #0]
    24d4:	1dbb      	adds	r3, r7, #6
    24d6:	1c0a      	adds	r2, r1, #0
    24d8:	701a      	strb	r2, [r3, #0]
  selectrf();
    24da:	4b0e      	ldr	r3, [pc, #56]	; (2514 <writeReg+0x4c>)
    24dc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    24de:	1dfb      	adds	r3, r7, #7
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2280      	movs	r2, #128	; 0x80
    24e4:	4252      	negs	r2, r2
    24e6:	4313      	orrs	r3, r2
    24e8:	b2db      	uxtb	r3, r3
    24ea:	b299      	uxth	r1, r3
    24ec:	4a0a      	ldr	r2, [pc, #40]	; (2518 <writeReg+0x50>)
    24ee:	4b0b      	ldr	r3, [pc, #44]	; (251c <writeReg+0x54>)
    24f0:	0018      	movs	r0, r3
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <writeReg+0x58>)
    24f4:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    24f6:	1dbb      	adds	r3, r7, #6
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	b299      	uxth	r1, r3
    24fc:	4a06      	ldr	r2, [pc, #24]	; (2518 <writeReg+0x50>)
    24fe:	4b07      	ldr	r3, [pc, #28]	; (251c <writeReg+0x54>)
    2500:	0018      	movs	r0, r3
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <writeReg+0x58>)
    2504:	4798      	blx	r3
  unselect();
    2506:	4b07      	ldr	r3, [pc, #28]	; (2524 <writeReg+0x5c>)
    2508:	4798      	blx	r3
}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	46bd      	mov	sp, r7
    250e:	b002      	add	sp, #8
    2510:	bd80      	pop	{r7, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	00002529 	.word	0x00002529
    2518:	200000fe 	.word	0x200000fe
    251c:	200002d8 	.word	0x200002d8
    2520:	000011ad 	.word	0x000011ad
    2524:	0000254d 	.word	0x0000254d

00002528 <selectrf>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
    2528:	b580      	push	{r7, lr}
    252a:	af00      	add	r7, sp, #0

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    252c:	4904      	ldr	r1, [pc, #16]	; (2540 <selectrf+0x18>)
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <selectrf+0x1c>)
    2530:	2201      	movs	r2, #1
    2532:	0018      	movs	r0, r3
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <selectrf+0x20>)
    2536:	4798      	blx	r3
}
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	46bd      	mov	sp, r7
    253c:	bd80      	pop	{r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	200002e8 	.word	0x200002e8
    2544:	200002d8 	.word	0x200002d8
    2548:	000012e9 	.word	0x000012e9

0000254c <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    254c:	b580      	push	{r7, lr}
    254e:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    2550:	4905      	ldr	r1, [pc, #20]	; (2568 <unselect+0x1c>)
    2552:	4b06      	ldr	r3, [pc, #24]	; (256c <unselect+0x20>)
    2554:	2200      	movs	r2, #0
    2556:	0018      	movs	r0, r3
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <unselect+0x24>)
    255a:	4798      	blx	r3
  maybeInterrupts();
    255c:	4b05      	ldr	r3, [pc, #20]	; (2574 <unselect+0x28>)
    255e:	4798      	blx	r3
}
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46bd      	mov	sp, r7
    2564:	bd80      	pop	{r7, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	200002e8 	.word	0x200002e8
    256c:	200002d8 	.word	0x200002d8
    2570:	000012e9 	.word	0x000012e9
    2574:	000025bd 	.word	0x000025bd

00002578 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    2578:	b580      	push	{r7, lr}
    257a:	b082      	sub	sp, #8
    257c:	af00      	add	r7, sp, #0
    257e:	0002      	movs	r2, r0
    2580:	1dfb      	adds	r3, r7, #7
    2582:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    2584:	1dfb      	adds	r3, r7, #7
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2b00      	cmp	r3, #0
    258a:	d001      	beq.n	2590 <setHighPowerRegs+0x18>
    258c:	235d      	movs	r3, #93	; 0x5d
    258e:	e000      	b.n	2592 <setHighPowerRegs+0x1a>
    2590:	2355      	movs	r3, #85	; 0x55
    2592:	0019      	movs	r1, r3
    2594:	205a      	movs	r0, #90	; 0x5a
    2596:	4b08      	ldr	r3, [pc, #32]	; (25b8 <setHighPowerRegs+0x40>)
    2598:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    259a:	1dfb      	adds	r3, r7, #7
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b00      	cmp	r3, #0
    25a0:	d001      	beq.n	25a6 <setHighPowerRegs+0x2e>
    25a2:	237c      	movs	r3, #124	; 0x7c
    25a4:	e000      	b.n	25a8 <setHighPowerRegs+0x30>
    25a6:	2370      	movs	r3, #112	; 0x70
    25a8:	0019      	movs	r1, r3
    25aa:	205c      	movs	r0, #92	; 0x5c
    25ac:	4b02      	ldr	r3, [pc, #8]	; (25b8 <setHighPowerRegs+0x40>)
    25ae:	4798      	blx	r3
}
    25b0:	46c0      	nop			; (mov r8, r8)
    25b2:	46bd      	mov	sp, r7
    25b4:	b002      	add	sp, #8
    25b6:	bd80      	pop	{r7, pc}
    25b8:	000024c9 	.word	0x000024c9

000025bc <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    25bc:	b580      	push	{r7, lr}
    25be:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  //if (!_inISR) 
	  //system_interrupt_enable_global(); //interrupts(); // CHANGE //
    25c0:	46c0      	nop			; (mov r8, r8)
    25c2:	46bd      	mov	sp, r7
    25c4:	bd80      	pop	{r7, pc}
    25c6:	46c0      	nop			; (mov r8, r8)

000025c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	0002      	movs	r2, r0
    25d0:	1dfb      	adds	r3, r7, #7
    25d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25d4:	230f      	movs	r3, #15
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	1dfa      	adds	r2, r7, #7
    25da:	7812      	ldrb	r2, [r2, #0]
    25dc:	09d2      	lsrs	r2, r2, #7
    25de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25e0:	230e      	movs	r3, #14
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	1dfa      	adds	r2, r7, #7
    25e6:	7812      	ldrb	r2, [r2, #0]
    25e8:	0952      	lsrs	r2, r2, #5
    25ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25ec:	4b0d      	ldr	r3, [pc, #52]	; (2624 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    25f0:	230f      	movs	r3, #15
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	781b      	ldrb	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d10f      	bne.n	261a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25fa:	230f      	movs	r3, #15
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	009b      	lsls	r3, r3, #2
    2602:	2210      	movs	r2, #16
    2604:	4694      	mov	ip, r2
    2606:	44bc      	add	ip, r7
    2608:	4463      	add	r3, ip
    260a:	3b08      	subs	r3, #8
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	230e      	movs	r3, #14
    2610:	18fb      	adds	r3, r7, r3
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	01db      	lsls	r3, r3, #7
    2616:	18d3      	adds	r3, r2, r3
    2618:	e000      	b.n	261c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    261a:	2300      	movs	r3, #0
	}
}
    261c:	0018      	movs	r0, r3
    261e:	46bd      	mov	sp, r7
    2620:	b004      	add	sp, #16
    2622:	bd80      	pop	{r7, pc}
    2624:	41004400 	.word	0x41004400

00002628 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	0002      	movs	r2, r0
    2630:	1dfb      	adds	r3, r7, #7
    2632:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2634:	1dfb      	adds	r3, r7, #7
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	0018      	movs	r0, r3
    263a:	4b03      	ldr	r3, [pc, #12]	; (2648 <port_get_group_from_gpio_pin+0x20>)
    263c:	4798      	blx	r3
    263e:	0003      	movs	r3, r0
}
    2640:	0018      	movs	r0, r3
    2642:	46bd      	mov	sp, r7
    2644:	b002      	add	sp, #8
    2646:	bd80      	pop	{r7, pc}
    2648:	000025c9 	.word	0x000025c9

0000264c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    264c:	b580      	push	{r7, lr}
    264e:	b084      	sub	sp, #16
    2650:	af00      	add	r7, sp, #0
    2652:	0002      	movs	r2, r0
    2654:	1dfb      	adds	r3, r7, #7
    2656:	701a      	strb	r2, [r3, #0]
    2658:	1dbb      	adds	r3, r7, #6
    265a:	1c0a      	adds	r2, r1, #0
    265c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    265e:	1dfb      	adds	r3, r7, #7
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	0018      	movs	r0, r3
    2664:	4b0d      	ldr	r3, [pc, #52]	; (269c <port_pin_set_output_level+0x50>)
    2666:	4798      	blx	r3
    2668:	0003      	movs	r3, r0
    266a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    266c:	1dfb      	adds	r3, r7, #7
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	221f      	movs	r2, #31
    2672:	4013      	ands	r3, r2
    2674:	2201      	movs	r2, #1
    2676:	409a      	lsls	r2, r3
    2678:	0013      	movs	r3, r2
    267a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    267c:	1dbb      	adds	r3, r7, #6
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b00      	cmp	r3, #0
    2682:	d003      	beq.n	268c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2684:	68fb      	ldr	r3, [r7, #12]
    2686:	68ba      	ldr	r2, [r7, #8]
    2688:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    268a:	e002      	b.n	2692 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	68ba      	ldr	r2, [r7, #8]
    2690:	615a      	str	r2, [r3, #20]
	}
}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	46bd      	mov	sp, r7
    2696:	b004      	add	sp, #16
    2698:	bd80      	pop	{r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	00002629 	.word	0x00002629

000026a0 <configure_radio>:
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA15, &config_port_pin);
}
//configure the RFM69 module
void configure_radio(void) {
    26a0:	b580      	push	{r7, lr}
    26a2:	af00      	add	r7, sp, #0
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    26a4:	2200      	movs	r2, #0
    26a6:	2102      	movs	r1, #2
    26a8:	205b      	movs	r0, #91	; 0x5b
    26aa:	4b06      	ldr	r3, [pc, #24]	; (26c4 <configure_radio+0x24>)
    26ac:	4798      	blx	r3
	RFM_setHighPower(true);
    26ae:	2001      	movs	r0, #1
    26b0:	4b05      	ldr	r3, [pc, #20]	; (26c8 <configure_radio+0x28>)
    26b2:	4798      	blx	r3
		
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <configure_radio+0x2c>)
    26b6:	0018      	movs	r0, r3
    26b8:	4b05      	ldr	r3, [pc, #20]	; (26d0 <configure_radio+0x30>)
    26ba:	4798      	blx	r3
}
    26bc:	46c0      	nop			; (mov r8, r8)
    26be:	46bd      	mov	sp, r7
    26c0:	bd80      	pop	{r7, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00001b21 	.word	0x00001b21
    26c8:	00001a69 	.word	0x00001a69
    26cc:	0000901c 	.word	0x0000901c
    26d0:	0000236d 	.word	0x0000236d

000026d4 <ui_init>:
	LED_On(LED_0_PIN);
}


void ui_init(void)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
    26d8:	2101      	movs	r1, #1
    26da:	2011      	movs	r0, #17
    26dc:	4b03      	ldr	r3, [pc, #12]	; (26ec <ui_init+0x18>)
    26de:	4798      	blx	r3
	
	// Initialize the RFM69HCW:
	configure_radio();
    26e0:	4b03      	ldr	r3, [pc, #12]	; (26f0 <ui_init+0x1c>)
    26e2:	4798      	blx	r3
	//configure_port_pins();
}
    26e4:	46c0      	nop			; (mov r8, r8)
    26e6:	46bd      	mov	sp, r7
    26e8:	bd80      	pop	{r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	0000264d 	.word	0x0000264d
    26f0:	000026a1 	.word	0x000026a1

000026f4 <ui_powerdown>:

void ui_powerdown(void)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
    26f8:	2101      	movs	r1, #1
    26fa:	2011      	movs	r0, #17
    26fc:	4b02      	ldr	r3, [pc, #8]	; (2708 <ui_powerdown+0x14>)
    26fe:	4798      	blx	r3
}
    2700:	46c0      	nop			; (mov r8, r8)
    2702:	46bd      	mov	sp, r7
    2704:	bd80      	pop	{r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	0000264d 	.word	0x0000264d

0000270c <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    270c:	b580      	push	{r7, lr}
    270e:	af00      	add	r7, sp, #0
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2710:	2100      	movs	r1, #0
    2712:	200f      	movs	r0, #15
    2714:	4b02      	ldr	r3, [pc, #8]	; (2720 <ui_wakeup_enable+0x14>)
    2716:	4798      	blx	r3
}
    2718:	46c0      	nop			; (mov r8, r8)
    271a:	46bd      	mov	sp, r7
    271c:	bd80      	pop	{r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	00003fe5 	.word	0x00003fe5

00002724 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    2724:	b580      	push	{r7, lr}
    2726:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2728:	2100      	movs	r1, #0
    272a:	200f      	movs	r0, #15
    272c:	4b02      	ldr	r3, [pc, #8]	; (2738 <ui_wakeup_disable+0x14>)
    272e:	4798      	blx	r3
}
    2730:	46c0      	nop			; (mov r8, r8)
    2732:	46bd      	mov	sp, r7
    2734:	bd80      	pop	{r7, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	0000402d 	.word	0x0000402d

0000273c <ui_wakeup>:

void ui_wakeup(void)
{
    273c:	b580      	push	{r7, lr}
    273e:	af00      	add	r7, sp, #0
	LED_On(LED_0_PIN);
    2740:	2100      	movs	r1, #0
    2742:	2011      	movs	r0, #17
    2744:	4b02      	ldr	r3, [pc, #8]	; (2750 <ui_wakeup+0x14>)
    2746:	4798      	blx	r3
}
    2748:	46c0      	nop			; (mov r8, r8)
    274a:	46bd      	mov	sp, r7
    274c:	bd80      	pop	{r7, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	0000264d 	.word	0x0000264d

00002754 <ui_process>:

void ui_process(uint16_t framenumber)
{
    2754:	b5f0      	push	{r4, r5, r6, r7, lr}
    2756:	b08b      	sub	sp, #44	; 0x2c
    2758:	af04      	add	r7, sp, #16
    275a:	0002      	movs	r2, r0
    275c:	1dbb      	adds	r3, r7, #6
    275e:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
    2760:	1dbb      	adds	r3, r7, #6
    2762:	8818      	ldrh	r0, [r3, #0]
    2764:	4bbd      	ldr	r3, [pc, #756]	; (2a5c <ui_process+0x308>)
    2766:	22fa      	movs	r2, #250	; 0xfa
    2768:	0091      	lsls	r1, r2, #2
    276a:	4798      	blx	r3
    276c:	000b      	movs	r3, r1
    276e:	b29b      	uxth	r3, r3
    2770:	2b00      	cmp	r3, #0
    2772:	d103      	bne.n	277c <ui_process+0x28>
		LED_On(LED_0_PIN);
    2774:	2100      	movs	r1, #0
    2776:	2011      	movs	r0, #17
    2778:	4bb9      	ldr	r3, [pc, #740]	; (2a60 <ui_process+0x30c>)
    277a:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
    277c:	1dbb      	adds	r3, r7, #6
    277e:	8818      	ldrh	r0, [r3, #0]
    2780:	4bb6      	ldr	r3, [pc, #728]	; (2a5c <ui_process+0x308>)
    2782:	22fa      	movs	r2, #250	; 0xfa
    2784:	0091      	lsls	r1, r2, #2
    2786:	4798      	blx	r3
    2788:	000b      	movs	r3, r1
    278a:	b29a      	uxth	r2, r3
    278c:	23fa      	movs	r3, #250	; 0xfa
    278e:	005b      	lsls	r3, r3, #1
    2790:	429a      	cmp	r2, r3
    2792:	d103      	bne.n	279c <ui_process+0x48>
		LED_Off(LED_0_PIN);
    2794:	2101      	movs	r1, #1
    2796:	2011      	movs	r0, #17
    2798:	4bb1      	ldr	r3, [pc, #708]	; (2a60 <ui_process+0x30c>)
    279a:	4798      	blx	r3
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    279c:	4bb1      	ldr	r3, [pc, #708]	; (2a64 <ui_process+0x310>)
    279e:	781b      	ldrb	r3, [r3, #0]
    27a0:	3301      	adds	r3, #1
    27a2:	b2da      	uxtb	r2, r3
    27a4:	4baf      	ldr	r3, [pc, #700]	; (2a64 <ui_process+0x310>)
    27a6:	701a      	strb	r2, [r3, #0]
	if (cpt_sof < 5) {
    27a8:	4bae      	ldr	r3, [pc, #696]	; (2a64 <ui_process+0x310>)
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	2b04      	cmp	r3, #4
    27ae:	d800      	bhi.n	27b2 <ui_process+0x5e>
    27b0:	e1e7      	b.n	2b82 <ui_process+0x42e>
		return;
	}
	cpt_sof = 0;
    27b2:	4bac      	ldr	r3, [pc, #688]	; (2a64 <ui_process+0x310>)
    27b4:	2200      	movs	r2, #0
    27b6:	701a      	strb	r2, [r3, #0]
	static bool right = false;
	
	static uint8_t button_info = 0x00; //order is: ? ? ? ? left_click right_click middle_click laser_on?

	// this will receive the mouse location from the camera module
	if (RFM_receiveDone()) {
    27b8:	4bab      	ldr	r3, [pc, #684]	; (2a68 <ui_process+0x314>)
    27ba:	4798      	blx	r3
    27bc:	1e03      	subs	r3, r0, #0
    27be:	d100      	bne.n	27c2 <ui_process+0x6e>
    27c0:	e1ae      	b.n	2b20 <ui_process+0x3cc>
		//info received from camera module (mouse movement)
		if (RFM_SENDERID == CAMERA_MODULE_NODE_ID) {
    27c2:	4baa      	ldr	r3, [pc, #680]	; (2a6c <ui_process+0x318>)
    27c4:	881b      	ldrh	r3, [r3, #0]
    27c6:	b29b      	uxth	r3, r3
    27c8:	2b01      	cmp	r3, #1
    27ca:	d000      	beq.n	27ce <ui_process+0x7a>
    27cc:	e124      	b.n	2a18 <ui_process+0x2c4>
			lx = x;
    27ce:	4ba8      	ldr	r3, [pc, #672]	; (2a70 <ui_process+0x31c>)
    27d0:	2200      	movs	r2, #0
    27d2:	5e9a      	ldrsh	r2, [r3, r2]
    27d4:	4ba7      	ldr	r3, [pc, #668]	; (2a74 <ui_process+0x320>)
    27d6:	801a      	strh	r2, [r3, #0]
			ly = y;
    27d8:	4ba7      	ldr	r3, [pc, #668]	; (2a78 <ui_process+0x324>)
    27da:	2200      	movs	r2, #0
    27dc:	5e9a      	ldrsh	r2, [r3, r2]
    27de:	4ba7      	ldr	r3, [pc, #668]	; (2a7c <ui_process+0x328>)
    27e0:	801a      	strh	r2, [r3, #0]
			xCount = 0;
    27e2:	4ba7      	ldr	r3, [pc, #668]	; (2a80 <ui_process+0x32c>)
    27e4:	2200      	movs	r2, #0
    27e6:	601a      	str	r2, [r3, #0]
			yCount = 0;
    27e8:	4ba6      	ldr	r3, [pc, #664]	; (2a84 <ui_process+0x330>)
    27ea:	2200      	movs	r2, #0
    27ec:	601a      	str	r2, [r3, #0]

			for (int i = 0; i < RFM_DATALEN; i++) {
    27ee:	2300      	movs	r3, #0
    27f0:	617b      	str	r3, [r7, #20]
    27f2:	e074      	b.n	28de <ui_process+0x18a>
				//x LSB 00<data>	x MSB 01<data>
				//y LSB 10<data>	y MSB 11<data>
				switch (RFM_DATA[i] >> 6) {
    27f4:	4ba4      	ldr	r3, [pc, #656]	; (2a88 <ui_process+0x334>)
    27f6:	697a      	ldr	r2, [r7, #20]
    27f8:	0052      	lsls	r2, r2, #1
    27fa:	5ad3      	ldrh	r3, [r2, r3]
    27fc:	b29b      	uxth	r3, r3
    27fe:	099b      	lsrs	r3, r3, #6
    2800:	b29b      	uxth	r3, r3
    2802:	2b01      	cmp	r3, #1
    2804:	d01d      	beq.n	2842 <ui_process+0xee>
    2806:	dc02      	bgt.n	280e <ui_process+0xba>
    2808:	2b00      	cmp	r3, #0
    280a:	d005      	beq.n	2818 <ui_process+0xc4>
    280c:	e064      	b.n	28d8 <ui_process+0x184>
    280e:	2b02      	cmp	r3, #2
    2810:	d032      	beq.n	2878 <ui_process+0x124>
    2812:	2b03      	cmp	r3, #3
    2814:	d045      	beq.n	28a2 <ui_process+0x14e>
    2816:	e05f      	b.n	28d8 <ui_process+0x184>
					case 0: //x LSB
						xCount += 2;
    2818:	4b99      	ldr	r3, [pc, #612]	; (2a80 <ui_process+0x32c>)
    281a:	681b      	ldr	r3, [r3, #0]
    281c:	1c9a      	adds	r2, r3, #2
    281e:	4b98      	ldr	r3, [pc, #608]	; (2a80 <ui_process+0x32c>)
    2820:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    2822:	4b99      	ldr	r3, [pc, #612]	; (2a88 <ui_process+0x334>)
    2824:	697a      	ldr	r2, [r7, #20]
    2826:	0052      	lsls	r2, r2, #1
    2828:	5ad3      	ldrh	r3, [r2, r3]
    282a:	b29b      	uxth	r3, r3
    282c:	001a      	movs	r2, r3
    282e:	233f      	movs	r3, #63	; 0x3f
    2830:	401a      	ands	r2, r3
    2832:	4b96      	ldr	r3, [pc, #600]	; (2a8c <ui_process+0x338>)
    2834:	601a      	str	r2, [r3, #0]
						x = temp;
    2836:	4b95      	ldr	r3, [pc, #596]	; (2a8c <ui_process+0x338>)
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	b21a      	sxth	r2, r3
    283c:	4b8c      	ldr	r3, [pc, #560]	; (2a70 <ui_process+0x31c>)
    283e:	801a      	strh	r2, [r3, #0]
						break;
    2840:	e04a      	b.n	28d8 <ui_process+0x184>
				
					case 1: //x MSB
						xCount += 3;
    2842:	4b8f      	ldr	r3, [pc, #572]	; (2a80 <ui_process+0x32c>)
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	1cda      	adds	r2, r3, #3
    2848:	4b8d      	ldr	r3, [pc, #564]	; (2a80 <ui_process+0x32c>)
    284a:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    284c:	4b8e      	ldr	r3, [pc, #568]	; (2a88 <ui_process+0x334>)
    284e:	697a      	ldr	r2, [r7, #20]
    2850:	0052      	lsls	r2, r2, #1
    2852:	5ad3      	ldrh	r3, [r2, r3]
    2854:	b29b      	uxth	r3, r3
    2856:	001a      	movs	r2, r3
    2858:	233f      	movs	r3, #63	; 0x3f
    285a:	401a      	ands	r2, r3
    285c:	4b8b      	ldr	r3, [pc, #556]	; (2a8c <ui_process+0x338>)
    285e:	601a      	str	r2, [r3, #0]
						x = x | (temp << 6);
    2860:	4b8a      	ldr	r3, [pc, #552]	; (2a8c <ui_process+0x338>)
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	019b      	lsls	r3, r3, #6
    2866:	b21a      	sxth	r2, r3
    2868:	4b81      	ldr	r3, [pc, #516]	; (2a70 <ui_process+0x31c>)
    286a:	2100      	movs	r1, #0
    286c:	5e5b      	ldrsh	r3, [r3, r1]
    286e:	4313      	orrs	r3, r2
    2870:	b21a      	sxth	r2, r3
    2872:	4b7f      	ldr	r3, [pc, #508]	; (2a70 <ui_process+0x31c>)
    2874:	801a      	strh	r2, [r3, #0]
						break;
    2876:	e02f      	b.n	28d8 <ui_process+0x184>
				
					case 2: //y LSB
						yCount += 2;
    2878:	4b82      	ldr	r3, [pc, #520]	; (2a84 <ui_process+0x330>)
    287a:	681b      	ldr	r3, [r3, #0]
    287c:	1c9a      	adds	r2, r3, #2
    287e:	4b81      	ldr	r3, [pc, #516]	; (2a84 <ui_process+0x330>)
    2880:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    2882:	4b81      	ldr	r3, [pc, #516]	; (2a88 <ui_process+0x334>)
    2884:	697a      	ldr	r2, [r7, #20]
    2886:	0052      	lsls	r2, r2, #1
    2888:	5ad3      	ldrh	r3, [r2, r3]
    288a:	b29b      	uxth	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	233f      	movs	r3, #63	; 0x3f
    2890:	401a      	ands	r2, r3
    2892:	4b7e      	ldr	r3, [pc, #504]	; (2a8c <ui_process+0x338>)
    2894:	601a      	str	r2, [r3, #0]
						y = temp;
    2896:	4b7d      	ldr	r3, [pc, #500]	; (2a8c <ui_process+0x338>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	b21a      	sxth	r2, r3
    289c:	4b76      	ldr	r3, [pc, #472]	; (2a78 <ui_process+0x324>)
    289e:	801a      	strh	r2, [r3, #0]
						break;
    28a0:	e01a      	b.n	28d8 <ui_process+0x184>
				
					case 3: //y MSB
						yCount += 3;
    28a2:	4b78      	ldr	r3, [pc, #480]	; (2a84 <ui_process+0x330>)
    28a4:	681b      	ldr	r3, [r3, #0]
    28a6:	1cda      	adds	r2, r3, #3
    28a8:	4b76      	ldr	r3, [pc, #472]	; (2a84 <ui_process+0x330>)
    28aa:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    28ac:	4b76      	ldr	r3, [pc, #472]	; (2a88 <ui_process+0x334>)
    28ae:	697a      	ldr	r2, [r7, #20]
    28b0:	0052      	lsls	r2, r2, #1
    28b2:	5ad3      	ldrh	r3, [r2, r3]
    28b4:	b29b      	uxth	r3, r3
    28b6:	001a      	movs	r2, r3
    28b8:	233f      	movs	r3, #63	; 0x3f
    28ba:	401a      	ands	r2, r3
    28bc:	4b73      	ldr	r3, [pc, #460]	; (2a8c <ui_process+0x338>)
    28be:	601a      	str	r2, [r3, #0]
						y = y | (temp << 6);
    28c0:	4b72      	ldr	r3, [pc, #456]	; (2a8c <ui_process+0x338>)
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	019b      	lsls	r3, r3, #6
    28c6:	b21a      	sxth	r2, r3
    28c8:	4b6b      	ldr	r3, [pc, #428]	; (2a78 <ui_process+0x324>)
    28ca:	2100      	movs	r1, #0
    28cc:	5e5b      	ldrsh	r3, [r3, r1]
    28ce:	4313      	orrs	r3, r2
    28d0:	b21a      	sxth	r2, r3
    28d2:	4b69      	ldr	r3, [pc, #420]	; (2a78 <ui_process+0x324>)
    28d4:	801a      	strh	r2, [r3, #0]
						break;
    28d6:	46c0      	nop			; (mov r8, r8)
			lx = x;
			ly = y;
			xCount = 0;
			yCount = 0;

			for (int i = 0; i < RFM_DATALEN; i++) {
    28d8:	697b      	ldr	r3, [r7, #20]
    28da:	3301      	adds	r3, #1
    28dc:	617b      	str	r3, [r7, #20]
    28de:	4b6c      	ldr	r3, [pc, #432]	; (2a90 <ui_process+0x33c>)
    28e0:	881b      	ldrh	r3, [r3, #0]
    28e2:	b29b      	uxth	r3, r3
    28e4:	1e1a      	subs	r2, r3, #0
    28e6:	697b      	ldr	r3, [r7, #20]
    28e8:	429a      	cmp	r2, r3
    28ea:	dd00      	ble.n	28ee <ui_process+0x19a>
    28ec:	e782      	b.n	27f4 <ui_process+0xa0>
						y = y | (temp << 6);
						break;
				}
			}

			if(xCount != 5 || yCount != 5)
    28ee:	4b64      	ldr	r3, [pc, #400]	; (2a80 <ui_process+0x32c>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	2b05      	cmp	r3, #5
    28f4:	d103      	bne.n	28fe <ui_process+0x1aa>
    28f6:	4b63      	ldr	r3, [pc, #396]	; (2a84 <ui_process+0x330>)
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	2b05      	cmp	r3, #5
    28fc:	d00a      	beq.n	2914 <ui_process+0x1c0>
			{
				x = lx;
    28fe:	4b5d      	ldr	r3, [pc, #372]	; (2a74 <ui_process+0x320>)
    2900:	2200      	movs	r2, #0
    2902:	5e9a      	ldrsh	r2, [r3, r2]
    2904:	4b5a      	ldr	r3, [pc, #360]	; (2a70 <ui_process+0x31c>)
    2906:	801a      	strh	r2, [r3, #0]
				y = ly;
    2908:	4b5c      	ldr	r3, [pc, #368]	; (2a7c <ui_process+0x328>)
    290a:	2200      	movs	r2, #0
    290c:	5e9a      	ldrsh	r2, [r3, r2]
    290e:	4b5a      	ldr	r3, [pc, #360]	; (2a78 <ui_process+0x324>)
    2910:	801a      	strh	r2, [r3, #0]
    2912:	e075      	b.n	2a00 <ui_process+0x2ac>
			}
			else
			{
				Xtotal -= xVals[0];
    2914:	4b5f      	ldr	r3, [pc, #380]	; (2a94 <ui_process+0x340>)
    2916:	681a      	ldr	r2, [r3, #0]
    2918:	4b5f      	ldr	r3, [pc, #380]	; (2a98 <ui_process+0x344>)
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	1ad2      	subs	r2, r2, r3
    291e:	4b5d      	ldr	r3, [pc, #372]	; (2a94 <ui_process+0x340>)
    2920:	601a      	str	r2, [r3, #0]
				Ytotal -= yVals[0];
    2922:	4b5e      	ldr	r3, [pc, #376]	; (2a9c <ui_process+0x348>)
    2924:	681a      	ldr	r2, [r3, #0]
    2926:	4b5e      	ldr	r3, [pc, #376]	; (2aa0 <ui_process+0x34c>)
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	1ad2      	subs	r2, r2, r3
    292c:	4b5b      	ldr	r3, [pc, #364]	; (2a9c <ui_process+0x348>)
    292e:	601a      	str	r2, [r3, #0]
				
				for(int i = 0; i < 4; i++)
    2930:	2300      	movs	r3, #0
    2932:	613b      	str	r3, [r7, #16]
    2934:	e014      	b.n	2960 <ui_process+0x20c>
				{
					yVals[i] = yVals[i + 1];
    2936:	693b      	ldr	r3, [r7, #16]
    2938:	1c5a      	adds	r2, r3, #1
    293a:	4b59      	ldr	r3, [pc, #356]	; (2aa0 <ui_process+0x34c>)
    293c:	0092      	lsls	r2, r2, #2
    293e:	58d1      	ldr	r1, [r2, r3]
    2940:	4b57      	ldr	r3, [pc, #348]	; (2aa0 <ui_process+0x34c>)
    2942:	693a      	ldr	r2, [r7, #16]
    2944:	0092      	lsls	r2, r2, #2
    2946:	50d1      	str	r1, [r2, r3]
					xVals[i] = xVals[i + 1];
    2948:	693b      	ldr	r3, [r7, #16]
    294a:	1c5a      	adds	r2, r3, #1
    294c:	4b52      	ldr	r3, [pc, #328]	; (2a98 <ui_process+0x344>)
    294e:	0092      	lsls	r2, r2, #2
    2950:	58d1      	ldr	r1, [r2, r3]
    2952:	4b51      	ldr	r3, [pc, #324]	; (2a98 <ui_process+0x344>)
    2954:	693a      	ldr	r2, [r7, #16]
    2956:	0092      	lsls	r2, r2, #2
    2958:	50d1      	str	r1, [r2, r3]
			else
			{
				Xtotal -= xVals[0];
				Ytotal -= yVals[0];
				
				for(int i = 0; i < 4; i++)
    295a:	693b      	ldr	r3, [r7, #16]
    295c:	3301      	adds	r3, #1
    295e:	613b      	str	r3, [r7, #16]
    2960:	693b      	ldr	r3, [r7, #16]
    2962:	2b03      	cmp	r3, #3
    2964:	dde7      	ble.n	2936 <ui_process+0x1e2>
				{
					yVals[i] = yVals[i + 1];
					xVals[i] = xVals[i + 1];
				}
				
				Xtotal += x;
    2966:	4b42      	ldr	r3, [pc, #264]	; (2a70 <ui_process+0x31c>)
    2968:	2200      	movs	r2, #0
    296a:	5e9b      	ldrsh	r3, [r3, r2]
    296c:	001a      	movs	r2, r3
    296e:	4b49      	ldr	r3, [pc, #292]	; (2a94 <ui_process+0x340>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	18d2      	adds	r2, r2, r3
    2974:	4b47      	ldr	r3, [pc, #284]	; (2a94 <ui_process+0x340>)
    2976:	601a      	str	r2, [r3, #0]
				Ytotal += y;
    2978:	4b3f      	ldr	r3, [pc, #252]	; (2a78 <ui_process+0x324>)
    297a:	2200      	movs	r2, #0
    297c:	5e9b      	ldrsh	r3, [r3, r2]
    297e:	001a      	movs	r2, r3
    2980:	4b46      	ldr	r3, [pc, #280]	; (2a9c <ui_process+0x348>)
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	18d2      	adds	r2, r2, r3
    2986:	4b45      	ldr	r3, [pc, #276]	; (2a9c <ui_process+0x348>)
    2988:	601a      	str	r2, [r3, #0]

				yVals[4] = y;
    298a:	4b3b      	ldr	r3, [pc, #236]	; (2a78 <ui_process+0x324>)
    298c:	2200      	movs	r2, #0
    298e:	5e9b      	ldrsh	r3, [r3, r2]
    2990:	001a      	movs	r2, r3
    2992:	4b43      	ldr	r3, [pc, #268]	; (2aa0 <ui_process+0x34c>)
    2994:	611a      	str	r2, [r3, #16]
				xVals[4] = x;
    2996:	4b36      	ldr	r3, [pc, #216]	; (2a70 <ui_process+0x31c>)
    2998:	2200      	movs	r2, #0
    299a:	5e9b      	ldrsh	r3, [r3, r2]
    299c:	001a      	movs	r2, r3
    299e:	4b3e      	ldr	r3, [pc, #248]	; (2a98 <ui_process+0x344>)
    29a0:	611a      	str	r2, [r3, #16]
				
				x = Xtotal/5;
    29a2:	4b3c      	ldr	r3, [pc, #240]	; (2a94 <ui_process+0x340>)
    29a4:	681a      	ldr	r2, [r3, #0]
    29a6:	4b3f      	ldr	r3, [pc, #252]	; (2aa4 <ui_process+0x350>)
    29a8:	2105      	movs	r1, #5
    29aa:	0010      	movs	r0, r2
    29ac:	4798      	blx	r3
    29ae:	0003      	movs	r3, r0
    29b0:	b21a      	sxth	r2, r3
    29b2:	4b2f      	ldr	r3, [pc, #188]	; (2a70 <ui_process+0x31c>)
    29b4:	801a      	strh	r2, [r3, #0]
				y = Ytotal/5;	
    29b6:	4b39      	ldr	r3, [pc, #228]	; (2a9c <ui_process+0x348>)
    29b8:	681a      	ldr	r2, [r3, #0]
    29ba:	4b3a      	ldr	r3, [pc, #232]	; (2aa4 <ui_process+0x350>)
    29bc:	2105      	movs	r1, #5
    29be:	0010      	movs	r0, r2
    29c0:	4798      	blx	r3
    29c2:	0003      	movs	r3, r0
    29c4:	b21a      	sxth	r2, r3
    29c6:	4b2c      	ldr	r3, [pc, #176]	; (2a78 <ui_process+0x324>)
    29c8:	801a      	strh	r2, [r3, #0]

				x = x*(0x7FFF/640);
    29ca:	4b29      	ldr	r3, [pc, #164]	; (2a70 <ui_process+0x31c>)
    29cc:	2200      	movs	r2, #0
    29ce:	5e9b      	ldrsh	r3, [r3, r2]
    29d0:	b29b      	uxth	r3, r3
    29d2:	1c1a      	adds	r2, r3, #0
    29d4:	1c13      	adds	r3, r2, #0
    29d6:	18db      	adds	r3, r3, r3
    29d8:	189b      	adds	r3, r3, r2
    29da:	1c1a      	adds	r2, r3, #0
    29dc:	0111      	lsls	r1, r2, #4
    29de:	1c1a      	adds	r2, r3, #0
    29e0:	1c0b      	adds	r3, r1, #0
    29e2:	18d3      	adds	r3, r2, r3
    29e4:	b29b      	uxth	r3, r3
    29e6:	b21a      	sxth	r2, r3
    29e8:	4b21      	ldr	r3, [pc, #132]	; (2a70 <ui_process+0x31c>)
    29ea:	801a      	strh	r2, [r3, #0]
				y = y*(0x7FFF/480);
    29ec:	4b22      	ldr	r3, [pc, #136]	; (2a78 <ui_process+0x324>)
    29ee:	2200      	movs	r2, #0
    29f0:	5e9b      	ldrsh	r3, [r3, r2]
    29f2:	b29b      	uxth	r3, r3
    29f4:	2244      	movs	r2, #68	; 0x44
    29f6:	4353      	muls	r3, r2
    29f8:	b29b      	uxth	r3, r3
    29fa:	b21a      	sxth	r2, r3
    29fc:	4b1e      	ldr	r3, [pc, #120]	; (2a78 <ui_process+0x324>)
    29fe:	801a      	strh	r2, [r3, #0]
			}
			
			// request info from laser module
			radio_sendbuffer[0] = 'B';
    2a00:	4b29      	ldr	r3, [pc, #164]	; (2aa8 <ui_process+0x354>)
    2a02:	2242      	movs	r2, #66	; 0x42
    2a04:	701a      	strb	r2, [r3, #0]
			RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
    2a06:	4b29      	ldr	r3, [pc, #164]	; (2aac <ui_process+0x358>)
    2a08:	681b      	ldr	r3, [r3, #0]
    2a0a:	b2da      	uxtb	r2, r3
    2a0c:	4926      	ldr	r1, [pc, #152]	; (2aa8 <ui_process+0x354>)
    2a0e:	2300      	movs	r3, #0
    2a10:	2003      	movs	r0, #3
    2a12:	4c27      	ldr	r4, [pc, #156]	; (2ab0 <ui_process+0x35c>)
    2a14:	47a0      	blx	r4
    2a16:	e083      	b.n	2b20 <ui_process+0x3cc>
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
    2a18:	4b14      	ldr	r3, [pc, #80]	; (2a6c <ui_process+0x318>)
    2a1a:	881b      	ldrh	r3, [r3, #0]
    2a1c:	b29b      	uxth	r3, r3
    2a1e:	2b03      	cmp	r3, #3
    2a20:	d000      	beq.n	2a24 <ui_process+0x2d0>
    2a22:	e07d      	b.n	2b20 <ui_process+0x3cc>
			for (int i = 0; i < RFM_DATALEN; i++) {
    2a24:	2300      	movs	r3, #0
    2a26:	60fb      	str	r3, [r7, #12]
    2a28:	e072      	b.n	2b10 <ui_process+0x3bc>
				switch (i) {
    2a2a:	68fb      	ldr	r3, [r7, #12]
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d00c      	beq.n	2a4a <ui_process+0x2f6>
    2a30:	2b02      	cmp	r3, #2
    2a32:	d043      	beq.n	2abc <ui_process+0x368>
    2a34:	2b00      	cmp	r3, #0
    2a36:	d168      	bne.n	2b0a <ui_process+0x3b6>
					case 0: //x axis scroll
						scrollX = RFM_DATA[i];
    2a38:	4b13      	ldr	r3, [pc, #76]	; (2a88 <ui_process+0x334>)
    2a3a:	68fa      	ldr	r2, [r7, #12]
    2a3c:	0052      	lsls	r2, r2, #1
    2a3e:	5ad3      	ldrh	r3, [r2, r3]
    2a40:	b29b      	uxth	r3, r3
    2a42:	001a      	movs	r2, r3
    2a44:	4b1b      	ldr	r3, [pc, #108]	; (2ab4 <ui_process+0x360>)
    2a46:	601a      	str	r2, [r3, #0]
						break;
    2a48:	e05f      	b.n	2b0a <ui_process+0x3b6>
					
					case 1: //y axis scroll
						scrollY = RFM_DATA[i];
    2a4a:	4b0f      	ldr	r3, [pc, #60]	; (2a88 <ui_process+0x334>)
    2a4c:	68fa      	ldr	r2, [r7, #12]
    2a4e:	0052      	lsls	r2, r2, #1
    2a50:	5ad3      	ldrh	r3, [r2, r3]
    2a52:	b29b      	uxth	r3, r3
    2a54:	001a      	movs	r2, r3
    2a56:	4b18      	ldr	r3, [pc, #96]	; (2ab8 <ui_process+0x364>)
    2a58:	601a      	str	r2, [r3, #0]
						break;
    2a5a:	e056      	b.n	2b0a <ui_process+0x3b6>
    2a5c:	00008d61 	.word	0x00008d61
    2a60:	0000264d 	.word	0x0000264d
    2a64:	2000013e 	.word	0x2000013e
    2a68:	00002321 	.word	0x00002321
    2a6c:	2000023a 	.word	0x2000023a
    2a70:	20000140 	.word	0x20000140
    2a74:	20000142 	.word	0x20000142
    2a78:	20000144 	.word	0x20000144
    2a7c:	20000146 	.word	0x20000146
    2a80:	20000148 	.word	0x20000148
    2a84:	2000014c 	.word	0x2000014c
    2a88:	20000250 	.word	0x20000250
    2a8c:	20000150 	.word	0x20000150
    2a90:	2000024a 	.word	0x2000024a
    2a94:	20000154 	.word	0x20000154
    2a98:	20000158 	.word	0x20000158
    2a9c:	2000016c 	.word	0x2000016c
    2aa0:	20000170 	.word	0x20000170
    2aa4:	00008c55 	.word	0x00008c55
    2aa8:	20000100 	.word	0x20000100
    2aac:	20000000 	.word	0x20000000
    2ab0:	00002011 	.word	0x00002011
    2ab4:	20000184 	.word	0x20000184
    2ab8:	20000188 	.word	0x20000188
					
					case 2: //button info byte
						button_info = RFM_DATA[i];
    2abc:	4b33      	ldr	r3, [pc, #204]	; (2b8c <ui_process+0x438>)
    2abe:	68fa      	ldr	r2, [r7, #12]
    2ac0:	0052      	lsls	r2, r2, #1
    2ac2:	5ad3      	ldrh	r3, [r2, r3]
    2ac4:	b29b      	uxth	r3, r3
    2ac6:	b2da      	uxtb	r2, r3
    2ac8:	4b31      	ldr	r3, [pc, #196]	; (2b90 <ui_process+0x43c>)
    2aca:	701a      	strb	r2, [r3, #0]
						
						//mouse_move(x, y);
						//mouse_buttons((button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
						left = (button_info & 0x08) >> 3;
    2acc:	4b30      	ldr	r3, [pc, #192]	; (2b90 <ui_process+0x43c>)
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	10db      	asrs	r3, r3, #3
    2ad2:	2201      	movs	r2, #1
    2ad4:	4013      	ands	r3, r2
    2ad6:	1e5a      	subs	r2, r3, #1
    2ad8:	4193      	sbcs	r3, r2
    2ada:	b2da      	uxtb	r2, r3
    2adc:	4b2d      	ldr	r3, [pc, #180]	; (2b94 <ui_process+0x440>)
    2ade:	701a      	strb	r2, [r3, #0]
						middle = (button_info & 0x02) >> 1;
    2ae0:	4b2b      	ldr	r3, [pc, #172]	; (2b90 <ui_process+0x43c>)
    2ae2:	781b      	ldrb	r3, [r3, #0]
    2ae4:	105b      	asrs	r3, r3, #1
    2ae6:	2201      	movs	r2, #1
    2ae8:	4013      	ands	r3, r2
    2aea:	1e5a      	subs	r2, r3, #1
    2aec:	4193      	sbcs	r3, r2
    2aee:	b2da      	uxtb	r2, r3
    2af0:	4b29      	ldr	r3, [pc, #164]	; (2b98 <ui_process+0x444>)
    2af2:	701a      	strb	r2, [r3, #0]
						right = (button_info & 0x04) >> 2;
    2af4:	4b26      	ldr	r3, [pc, #152]	; (2b90 <ui_process+0x43c>)
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	109b      	asrs	r3, r3, #2
    2afa:	2201      	movs	r2, #1
    2afc:	4013      	ands	r3, r2
    2afe:	1e5a      	subs	r2, r3, #1
    2b00:	4193      	sbcs	r3, r2
    2b02:	b2da      	uxtb	r2, r3
    2b04:	4b25      	ldr	r3, [pc, #148]	; (2b9c <ui_process+0x448>)
    2b06:	701a      	strb	r2, [r3, #0]
						
						break;
    2b08:	46c0      	nop			; (mov r8, r8)
			RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
			for (int i = 0; i < RFM_DATALEN; i++) {
    2b0a:	68fb      	ldr	r3, [r7, #12]
    2b0c:	3301      	adds	r3, #1
    2b0e:	60fb      	str	r3, [r7, #12]
    2b10:	4b23      	ldr	r3, [pc, #140]	; (2ba0 <ui_process+0x44c>)
    2b12:	881b      	ldrh	r3, [r3, #0]
    2b14:	b29b      	uxth	r3, r3
    2b16:	1e1a      	subs	r2, r3, #0
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	429a      	cmp	r2, r3
    2b1c:	dd00      	ble.n	2b20 <ui_process+0x3cc>
    2b1e:	e784      	b.n	2a2a <ui_process+0x2d6>
		//y += 50;
		//udi_hid_mouse_moveX(x);
		//udi_hid_mouse_moveY(y);
	}*/
	
	mouse_move(x, y, scrollX, scrollY, (button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
    2b20:	4b20      	ldr	r3, [pc, #128]	; (2ba4 <ui_process+0x450>)
    2b22:	2200      	movs	r2, #0
    2b24:	5e9b      	ldrsh	r3, [r3, r2]
    2b26:	b29c      	uxth	r4, r3
    2b28:	4b1f      	ldr	r3, [pc, #124]	; (2ba8 <ui_process+0x454>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	5e9b      	ldrsh	r3, [r3, r2]
    2b2e:	b29d      	uxth	r5, r3
    2b30:	4b1e      	ldr	r3, [pc, #120]	; (2bac <ui_process+0x458>)
    2b32:	681b      	ldr	r3, [r3, #0]
    2b34:	b29e      	uxth	r6, r3
    2b36:	4b1e      	ldr	r3, [pc, #120]	; (2bb0 <ui_process+0x45c>)
    2b38:	681b      	ldr	r3, [r3, #0]
    2b3a:	b29b      	uxth	r3, r3
    2b3c:	469c      	mov	ip, r3
    2b3e:	4b14      	ldr	r3, [pc, #80]	; (2b90 <ui_process+0x43c>)
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	10db      	asrs	r3, r3, #3
    2b44:	2201      	movs	r2, #1
    2b46:	4013      	ands	r3, r2
    2b48:	1e5a      	subs	r2, r3, #1
    2b4a:	4193      	sbcs	r3, r2
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	4a10      	ldr	r2, [pc, #64]	; (2b90 <ui_process+0x43c>)
    2b50:	7812      	ldrb	r2, [r2, #0]
    2b52:	1052      	asrs	r2, r2, #1
    2b54:	2101      	movs	r1, #1
    2b56:	400a      	ands	r2, r1
    2b58:	1e51      	subs	r1, r2, #1
    2b5a:	418a      	sbcs	r2, r1
    2b5c:	b2d2      	uxtb	r2, r2
    2b5e:	490c      	ldr	r1, [pc, #48]	; (2b90 <ui_process+0x43c>)
    2b60:	7809      	ldrb	r1, [r1, #0]
    2b62:	1089      	asrs	r1, r1, #2
    2b64:	2001      	movs	r0, #1
    2b66:	4001      	ands	r1, r0
    2b68:	1e48      	subs	r0, r1, #1
    2b6a:	4181      	sbcs	r1, r0
    2b6c:	b2c9      	uxtb	r1, r1
    2b6e:	9102      	str	r1, [sp, #8]
    2b70:	9201      	str	r2, [sp, #4]
    2b72:	9300      	str	r3, [sp, #0]
    2b74:	4663      	mov	r3, ip
    2b76:	0032      	movs	r2, r6
    2b78:	0029      	movs	r1, r5
    2b7a:	0020      	movs	r0, r4
    2b7c:	4c0d      	ldr	r4, [pc, #52]	; (2bb4 <ui_process+0x460>)
    2b7e:	47a0      	blx	r4
    2b80:	e000      	b.n	2b84 <ui_process+0x430>
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
	if (cpt_sof < 5) {
		return;
    2b82:	46c0      	nop			; (mov r8, r8)
	mouse_move(x, y, scrollX, scrollY, (button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
		/*x += 50;
		y += 50;
		udi_hid_mouse_moveX(x);
		udi_hid_mouse_moveY(y);*/
}
    2b84:	46bd      	mov	sp, r7
    2b86:	b007      	add	sp, #28
    2b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	20000250 	.word	0x20000250
    2b90:	2000018c 	.word	0x2000018c
    2b94:	2000018d 	.word	0x2000018d
    2b98:	2000018e 	.word	0x2000018e
    2b9c:	2000018f 	.word	0x2000018f
    2ba0:	2000024a 	.word	0x2000024a
    2ba4:	20000140 	.word	0x20000140
    2ba8:	20000144 	.word	0x20000144
    2bac:	20000184 	.word	0x20000184
    2bb0:	20000188 	.word	0x20000188
    2bb4:	00002cd9 	.word	0x00002cd9

00002bb8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b082      	sub	sp, #8
    2bbc:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2bbe:	f3ef 8310 	mrs	r3, PRIMASK
    2bc2:	603b      	str	r3, [r7, #0]
  return(result);
    2bc4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    2bc6:	425a      	negs	r2, r3
    2bc8:	4153      	adcs	r3, r2
    2bca:	b2db      	uxtb	r3, r3
    2bcc:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2bce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2bd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2bd4:	4b03      	ldr	r3, [pc, #12]	; (2be4 <cpu_irq_save+0x2c>)
    2bd6:	2200      	movs	r2, #0
    2bd8:	701a      	strb	r2, [r3, #0]
	return flags;
    2bda:	687b      	ldr	r3, [r7, #4]
}
    2bdc:	0018      	movs	r0, r3
    2bde:	46bd      	mov	sp, r7
    2be0:	b002      	add	sp, #8
    2be2:	bd80      	pop	{r7, pc}
    2be4:	200000dc 	.word	0x200000dc

00002be8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b082      	sub	sp, #8
    2bec:	af00      	add	r7, sp, #0
    2bee:	6078      	str	r0, [r7, #4]
	return (flags);
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	1e5a      	subs	r2, r3, #1
    2bf4:	4193      	sbcs	r3, r2
    2bf6:	b2db      	uxtb	r3, r3
}
    2bf8:	0018      	movs	r0, r3
    2bfa:	46bd      	mov	sp, r7
    2bfc:	b002      	add	sp, #8
    2bfe:	bd80      	pop	{r7, pc}

00002c00 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2c00:	b580      	push	{r7, lr}
    2c02:	b082      	sub	sp, #8
    2c04:	af00      	add	r7, sp, #0
    2c06:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2c08:	687b      	ldr	r3, [r7, #4]
    2c0a:	0018      	movs	r0, r3
    2c0c:	4b06      	ldr	r3, [pc, #24]	; (2c28 <cpu_irq_restore+0x28>)
    2c0e:	4798      	blx	r3
    2c10:	1e03      	subs	r3, r0, #0
    2c12:	d005      	beq.n	2c20 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    2c14:	4b05      	ldr	r3, [pc, #20]	; (2c2c <cpu_irq_restore+0x2c>)
    2c16:	2201      	movs	r2, #1
    2c18:	701a      	strb	r2, [r3, #0]
    2c1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2c1e:	b662      	cpsie	i
}
    2c20:	46c0      	nop			; (mov r8, r8)
    2c22:	46bd      	mov	sp, r7
    2c24:	b002      	add	sp, #8
    2c26:	bd80      	pop	{r7, pc}
    2c28:	00002be9 	.word	0x00002be9
    2c2c:	200000dc 	.word	0x200000dc

00002c30 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    2c34:	4b0b      	ldr	r3, [pc, #44]	; (2c64 <udi_hid_mouse_enable+0x34>)
    2c36:	2200      	movs	r2, #0
    2c38:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    2c3a:	4b0b      	ldr	r3, [pc, #44]	; (2c68 <udi_hid_mouse_enable+0x38>)
    2c3c:	2200      	movs	r2, #0
    2c3e:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    2c40:	4b0a      	ldr	r3, [pc, #40]	; (2c6c <udi_hid_mouse_enable+0x3c>)
    2c42:	2200      	movs	r2, #0
    2c44:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    2c46:	4b0a      	ldr	r3, [pc, #40]	; (2c70 <udi_hid_mouse_enable+0x40>)
    2c48:	2207      	movs	r2, #7
    2c4a:	2100      	movs	r1, #0
    2c4c:	0018      	movs	r0, r3
    2c4e:	4b09      	ldr	r3, [pc, #36]	; (2c74 <udi_hid_mouse_enable+0x44>)
    2c50:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2c52:	4b09      	ldr	r3, [pc, #36]	; (2c78 <udi_hid_mouse_enable+0x48>)
    2c54:	2200      	movs	r2, #0
    2c56:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    2c58:	4b08      	ldr	r3, [pc, #32]	; (2c7c <udi_hid_mouse_enable+0x4c>)
    2c5a:	4798      	blx	r3
    2c5c:	0003      	movs	r3, r0
}
    2c5e:	0018      	movs	r0, r3
    2c60:	46bd      	mov	sp, r7
    2c62:	bd80      	pop	{r7, pc}
    2c64:	20000190 	.word	0x20000190
    2c68:	20000194 	.word	0x20000194
    2c6c:	2000019f 	.word	0x2000019f
    2c70:	20000198 	.word	0x20000198
    2c74:	00008fdf 	.word	0x00008fdf
    2c78:	20000195 	.word	0x20000195
    2c7c:	00008c29 	.word	0x00008c29

00002c80 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    2c84:	4b02      	ldr	r3, [pc, #8]	; (2c90 <udi_hid_mouse_disable+0x10>)
    2c86:	4798      	blx	r3
}
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46bd      	mov	sp, r7
    2c8c:	bd80      	pop	{r7, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	00008c41 	.word	0x00008c41

00002c94 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2c94:	b5b0      	push	{r4, r5, r7, lr}
    2c96:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2c98:	4b04      	ldr	r3, [pc, #16]	; (2cac <udi_hid_mouse_setup+0x18>)
    2c9a:	4a05      	ldr	r2, [pc, #20]	; (2cb0 <udi_hid_mouse_setup+0x1c>)
    2c9c:	4905      	ldr	r1, [pc, #20]	; (2cb4 <udi_hid_mouse_setup+0x20>)
    2c9e:	4806      	ldr	r0, [pc, #24]	; (2cb8 <udi_hid_mouse_setup+0x24>)
    2ca0:	4c06      	ldr	r4, [pc, #24]	; (2cbc <udi_hid_mouse_setup+0x28>)
    2ca2:	47a0      	blx	r4
    2ca4:	0003      	movs	r3, r0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    2ca6:	0018      	movs	r0, r3
    2ca8:	46bd      	mov	sp, r7
    2caa:	bdb0      	pop	{r4, r5, r7, pc}
    2cac:	00002ccd 	.word	0x00002ccd
    2cb0:	20000018 	.word	0x20000018
    2cb4:	20000194 	.word	0x20000194
    2cb8:	20000190 	.word	0x20000190
    2cbc:	00002eb9 	.word	0x00002eb9

00002cc0 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	af00      	add	r7, sp, #0
	return 0;
    2cc4:	2300      	movs	r3, #0
}
    2cc6:	0018      	movs	r0, r3
    2cc8:	46bd      	mov	sp, r7
    2cca:	bd80      	pop	{r7, pc}

00002ccc <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    2ccc:	b580      	push	{r7, lr}
    2cce:	af00      	add	r7, sp, #0
	return false;
    2cd0:	2300      	movs	r3, #0
}
    2cd2:	0018      	movs	r0, r3
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bd80      	pop	{r7, pc}

00002cd8 <mouse_move>:
	cpu_irq_restore(flags);
	return true;
}

bool mouse_move(uint16_t x, uint16_t y, uint16_t scrollX, uint16_t scrollY, bool left, bool middle, bool right)
{
    2cd8:	b5b0      	push	{r4, r5, r7, lr}
    2cda:	b084      	sub	sp, #16
    2cdc:	af00      	add	r7, sp, #0
    2cde:	0005      	movs	r5, r0
    2ce0:	000c      	movs	r4, r1
    2ce2:	0010      	movs	r0, r2
    2ce4:	0019      	movs	r1, r3
    2ce6:	1dbb      	adds	r3, r7, #6
    2ce8:	1c2a      	adds	r2, r5, #0
    2cea:	801a      	strh	r2, [r3, #0]
    2cec:	1d3b      	adds	r3, r7, #4
    2cee:	1c22      	adds	r2, r4, #0
    2cf0:	801a      	strh	r2, [r3, #0]
    2cf2:	1cbb      	adds	r3, r7, #2
    2cf4:	1c02      	adds	r2, r0, #0
    2cf6:	801a      	strh	r2, [r3, #0]
    2cf8:	003b      	movs	r3, r7
    2cfa:	1c0a      	adds	r2, r1, #0
    2cfc:	801a      	strh	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2cfe:	4b3c      	ldr	r3, [pc, #240]	; (2df0 <mouse_move+0x118>)
    2d00:	4798      	blx	r3
    2d02:	0003      	movs	r3, r0
    2d04:	60fb      	str	r3, [r7, #12]

	udi_hid_mouse_report[1] = x & 0x00FF;
    2d06:	1dbb      	adds	r3, r7, #6
    2d08:	881b      	ldrh	r3, [r3, #0]
    2d0a:	b2da      	uxtb	r2, r3
    2d0c:	4b39      	ldr	r3, [pc, #228]	; (2df4 <mouse_move+0x11c>)
    2d0e:	705a      	strb	r2, [r3, #1]
	udi_hid_mouse_report[2] = (x & 0x7F00) >> 8;
    2d10:	1dbb      	adds	r3, r7, #6
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	121b      	asrs	r3, r3, #8
    2d16:	b2db      	uxtb	r3, r3
    2d18:	227f      	movs	r2, #127	; 0x7f
    2d1a:	4013      	ands	r3, r2
    2d1c:	b2da      	uxtb	r2, r3
    2d1e:	4b35      	ldr	r3, [pc, #212]	; (2df4 <mouse_move+0x11c>)
    2d20:	709a      	strb	r2, [r3, #2]
	udi_hid_mouse_report[3] = y & 0x00FF;
    2d22:	1d3b      	adds	r3, r7, #4
    2d24:	881b      	ldrh	r3, [r3, #0]
    2d26:	b2da      	uxtb	r2, r3
    2d28:	4b32      	ldr	r3, [pc, #200]	; (2df4 <mouse_move+0x11c>)
    2d2a:	70da      	strb	r2, [r3, #3]
	udi_hid_mouse_report[4] = (y & 0x7F00) >> 8;
    2d2c:	1d3b      	adds	r3, r7, #4
    2d2e:	881b      	ldrh	r3, [r3, #0]
    2d30:	121b      	asrs	r3, r3, #8
    2d32:	b2db      	uxtb	r3, r3
    2d34:	227f      	movs	r2, #127	; 0x7f
    2d36:	4013      	ands	r3, r2
    2d38:	b2da      	uxtb	r2, r3
    2d3a:	4b2e      	ldr	r3, [pc, #184]	; (2df4 <mouse_move+0x11c>)
    2d3c:	711a      	strb	r2, [r3, #4]
	udi_hid_mouse_report[5] = scrollX & 0x00FF;
    2d3e:	1cbb      	adds	r3, r7, #2
    2d40:	881b      	ldrh	r3, [r3, #0]
    2d42:	b2da      	uxtb	r2, r3
    2d44:	4b2b      	ldr	r3, [pc, #172]	; (2df4 <mouse_move+0x11c>)
    2d46:	715a      	strb	r2, [r3, #5]
	udi_hid_mouse_report[6] = (scrollX & 0x7F00) >> 8;
    2d48:	1cbb      	adds	r3, r7, #2
    2d4a:	881b      	ldrh	r3, [r3, #0]
    2d4c:	121b      	asrs	r3, r3, #8
    2d4e:	b2db      	uxtb	r3, r3
    2d50:	227f      	movs	r2, #127	; 0x7f
    2d52:	4013      	ands	r3, r2
    2d54:	b2da      	uxtb	r2, r3
    2d56:	4b27      	ldr	r3, [pc, #156]	; (2df4 <mouse_move+0x11c>)
    2d58:	719a      	strb	r2, [r3, #6]

	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == left)
    2d5a:	2320      	movs	r3, #32
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d007      	beq.n	2d74 <mouse_move+0x9c>
	udi_hid_mouse_report[0] |= 0x01;
    2d64:	4b23      	ldr	r3, [pc, #140]	; (2df4 <mouse_move+0x11c>)
    2d66:	781b      	ldrb	r3, [r3, #0]
    2d68:	2201      	movs	r2, #1
    2d6a:	4313      	orrs	r3, r2
    2d6c:	b2da      	uxtb	r2, r3
    2d6e:	4b21      	ldr	r3, [pc, #132]	; (2df4 <mouse_move+0x11c>)
    2d70:	701a      	strb	r2, [r3, #0]
    2d72:	e006      	b.n	2d82 <mouse_move+0xaa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x01;
    2d74:	4b1f      	ldr	r3, [pc, #124]	; (2df4 <mouse_move+0x11c>)
    2d76:	781b      	ldrb	r3, [r3, #0]
    2d78:	2201      	movs	r2, #1
    2d7a:	4393      	bics	r3, r2
    2d7c:	b2da      	uxtb	r2, r3
    2d7e:	4b1d      	ldr	r3, [pc, #116]	; (2df4 <mouse_move+0x11c>)
    2d80:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == right)
    2d82:	2328      	movs	r3, #40	; 0x28
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	781b      	ldrb	r3, [r3, #0]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d007      	beq.n	2d9c <mouse_move+0xc4>
	udi_hid_mouse_report[0] |= 0x02;
    2d8c:	4b19      	ldr	r3, [pc, #100]	; (2df4 <mouse_move+0x11c>)
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	2202      	movs	r2, #2
    2d92:	4313      	orrs	r3, r2
    2d94:	b2da      	uxtb	r2, r3
    2d96:	4b17      	ldr	r3, [pc, #92]	; (2df4 <mouse_move+0x11c>)
    2d98:	701a      	strb	r2, [r3, #0]
    2d9a:	e006      	b.n	2daa <mouse_move+0xd2>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x02;
    2d9c:	4b15      	ldr	r3, [pc, #84]	; (2df4 <mouse_move+0x11c>)
    2d9e:	781b      	ldrb	r3, [r3, #0]
    2da0:	2202      	movs	r2, #2
    2da2:	4393      	bics	r3, r2
    2da4:	b2da      	uxtb	r2, r3
    2da6:	4b13      	ldr	r3, [pc, #76]	; (2df4 <mouse_move+0x11c>)
    2da8:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == middle)
    2daa:	2324      	movs	r3, #36	; 0x24
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d007      	beq.n	2dc4 <mouse_move+0xec>
	udi_hid_mouse_report[0] |= 0x04;
    2db4:	4b0f      	ldr	r3, [pc, #60]	; (2df4 <mouse_move+0x11c>)
    2db6:	781b      	ldrb	r3, [r3, #0]
    2db8:	2204      	movs	r2, #4
    2dba:	4313      	orrs	r3, r2
    2dbc:	b2da      	uxtb	r2, r3
    2dbe:	4b0d      	ldr	r3, [pc, #52]	; (2df4 <mouse_move+0x11c>)
    2dc0:	701a      	strb	r2, [r3, #0]
    2dc2:	e006      	b.n	2dd2 <mouse_move+0xfa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x04;
    2dc4:	4b0b      	ldr	r3, [pc, #44]	; (2df4 <mouse_move+0x11c>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	2204      	movs	r2, #4
    2dca:	4393      	bics	r3, r2
    2dcc:	b2da      	uxtb	r2, r3
    2dce:	4b09      	ldr	r3, [pc, #36]	; (2df4 <mouse_move+0x11c>)
    2dd0:	701a      	strb	r2, [r3, #0]

	// Valid and send report

	udi_hid_mouse_b_report_valid = true;
    2dd2:	4b09      	ldr	r3, [pc, #36]	; (2df8 <mouse_move+0x120>)
    2dd4:	2201      	movs	r2, #1
    2dd6:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_send_report();
    2dd8:	4b08      	ldr	r3, [pc, #32]	; (2dfc <mouse_move+0x124>)
    2dda:	4798      	blx	r3

	cpu_irq_restore(flags);
    2ddc:	68fb      	ldr	r3, [r7, #12]
    2dde:	0018      	movs	r0, r3
    2de0:	4b07      	ldr	r3, [pc, #28]	; (2e00 <mouse_move+0x128>)
    2de2:	4798      	blx	r3
	return true;
    2de4:	2301      	movs	r3, #1
}
    2de6:	0018      	movs	r0, r3
    2de8:	46bd      	mov	sp, r7
    2dea:	b004      	add	sp, #16
    2dec:	bdb0      	pop	{r4, r5, r7, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	00002bb9 	.word	0x00002bb9
    2df4:	20000198 	.word	0x20000198
    2df8:	20000195 	.word	0x20000195
    2dfc:	00002e05 	.word	0x00002e05
    2e00:	00002c01 	.word	0x00002c01

00002e04 <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 10, false);
}


static bool udi_hid_mouse_send_report(void)
{
    2e04:	b590      	push	{r4, r7, lr}
    2e06:	b083      	sub	sp, #12
    2e08:	af02      	add	r7, sp, #8
	if (udi_hid_mouse_report_trans_ongoing)
    2e0a:	4b14      	ldr	r3, [pc, #80]	; (2e5c <udi_hid_mouse_send_report+0x58>)
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d001      	beq.n	2e16 <udi_hid_mouse_send_report+0x12>
		return false;	// Transfer on going then send this one after transfer complete
    2e12:	2300      	movs	r3, #0
    2e14:	e01e      	b.n	2e54 <udi_hid_mouse_send_report+0x50>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
    2e16:	4b12      	ldr	r3, [pc, #72]	; (2e60 <udi_hid_mouse_send_report+0x5c>)
    2e18:	4a12      	ldr	r2, [pc, #72]	; (2e64 <udi_hid_mouse_send_report+0x60>)
    2e1a:	6811      	ldr	r1, [r2, #0]
    2e1c:	6019      	str	r1, [r3, #0]
    2e1e:	8891      	ldrh	r1, [r2, #4]
    2e20:	8099      	strh	r1, [r3, #4]
    2e22:	7992      	ldrb	r2, [r2, #6]
    2e24:	719a      	strb	r2, [r3, #6]
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
    2e26:	4b10      	ldr	r3, [pc, #64]	; (2e68 <udi_hid_mouse_send_report+0x64>)
    2e28:	2203      	movs	r2, #3
    2e2a:	2100      	movs	r1, #0
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b0f      	ldr	r3, [pc, #60]	; (2e6c <udi_hid_mouse_send_report+0x68>)
    2e30:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2e32:	4b0f      	ldr	r3, [pc, #60]	; (2e70 <udi_hid_mouse_send_report+0x6c>)
    2e34:	2200      	movs	r2, #0
    2e36:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
    2e38:	4a09      	ldr	r2, [pc, #36]	; (2e60 <udi_hid_mouse_send_report+0x5c>)
    2e3a:	4b0e      	ldr	r3, [pc, #56]	; (2e74 <udi_hid_mouse_send_report+0x70>)
    2e3c:	9300      	str	r3, [sp, #0]
    2e3e:	2307      	movs	r3, #7
    2e40:	2100      	movs	r1, #0
    2e42:	2081      	movs	r0, #129	; 0x81
    2e44:	4c0c      	ldr	r4, [pc, #48]	; (2e78 <udi_hid_mouse_send_report+0x74>)
    2e46:	47a0      	blx	r4
    2e48:	0003      	movs	r3, r0
    2e4a:	001a      	movs	r2, r3
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <udi_hid_mouse_send_report+0x58>)
    2e4e:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
    2e50:	4b02      	ldr	r3, [pc, #8]	; (2e5c <udi_hid_mouse_send_report+0x58>)
    2e52:	781b      	ldrb	r3, [r3, #0]
}
    2e54:	0018      	movs	r0, r3
    2e56:	46bd      	mov	sp, r7
    2e58:	b001      	add	sp, #4
    2e5a:	bd90      	pop	{r4, r7, pc}
    2e5c:	2000019f 	.word	0x2000019f
    2e60:	200001a0 	.word	0x200001a0
    2e64:	20000198 	.word	0x20000198
    2e68:	20000199 	.word	0x20000199
    2e6c:	00008fdf 	.word	0x00008fdf
    2e70:	20000195 	.word	0x20000195
    2e74:	00002e7d 	.word	0x00002e7d
    2e78:	00005e69 	.word	0x00005e69

00002e7c <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b082      	sub	sp, #8
    2e80:	af00      	add	r7, sp, #0
    2e82:	6039      	str	r1, [r7, #0]
    2e84:	0011      	movs	r1, r2
    2e86:	1dfb      	adds	r3, r7, #7
    2e88:	1c02      	adds	r2, r0, #0
    2e8a:	701a      	strb	r2, [r3, #0]
    2e8c:	1dbb      	adds	r3, r7, #6
    2e8e:	1c0a      	adds	r2, r1, #0
    2e90:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <udi_hid_mouse_report_sent+0x30>)
    2e94:	2200      	movs	r2, #0
    2e96:	701a      	strb	r2, [r3, #0]
	if (udi_hid_mouse_b_report_valid) {
    2e98:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <udi_hid_mouse_report_sent+0x34>)
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d001      	beq.n	2ea4 <udi_hid_mouse_report_sent+0x28>
		// Send new valid report
		udi_hid_mouse_send_report();
    2ea0:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <udi_hid_mouse_report_sent+0x38>)
    2ea2:	4798      	blx	r3
	}
}
    2ea4:	46c0      	nop			; (mov r8, r8)
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b002      	add	sp, #8
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	2000019f 	.word	0x2000019f
    2eb0:	20000195 	.word	0x20000195
    2eb4:	00002e05 	.word	0x00002e05

00002eb8 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b084      	sub	sp, #16
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	60f8      	str	r0, [r7, #12]
    2ec0:	60b9      	str	r1, [r7, #8]
    2ec2:	607a      	str	r2, [r7, #4]
    2ec4:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    2ec6:	4b35      	ldr	r3, [pc, #212]	; (2f9c <udi_hid_setup+0xe4>)
    2ec8:	781b      	ldrb	r3, [r3, #0]
    2eca:	b25b      	sxtb	r3, r3
    2ecc:	2b00      	cmp	r3, #0
    2ece:	da32      	bge.n	2f36 <udi_hid_setup+0x7e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2ed0:	4b32      	ldr	r3, [pc, #200]	; (2f9c <udi_hid_setup+0xe4>)
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	001a      	movs	r2, r3
    2ed6:	2360      	movs	r3, #96	; 0x60
    2ed8:	4013      	ands	r3, r2
    2eda:	d109      	bne.n	2ef0 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2edc:	4b2f      	ldr	r3, [pc, #188]	; (2f9c <udi_hid_setup+0xe4>)
    2ede:	785b      	ldrb	r3, [r3, #1]
    2ee0:	2b06      	cmp	r3, #6
    2ee2:	d105      	bne.n	2ef0 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	0018      	movs	r0, r3
    2ee8:	4b2d      	ldr	r3, [pc, #180]	; (2fa0 <udi_hid_setup+0xe8>)
    2eea:	4798      	blx	r3
    2eec:	0003      	movs	r3, r0
    2eee:	e051      	b.n	2f94 <udi_hid_setup+0xdc>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2ef0:	4b2a      	ldr	r3, [pc, #168]	; (2f9c <udi_hid_setup+0xe4>)
    2ef2:	781b      	ldrb	r3, [r3, #0]
    2ef4:	001a      	movs	r2, r3
    2ef6:	2360      	movs	r3, #96	; 0x60
    2ef8:	4013      	ands	r3, r2
    2efa:	2b20      	cmp	r3, #32
    2efc:	d11b      	bne.n	2f36 <udi_hid_setup+0x7e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2efe:	4b27      	ldr	r3, [pc, #156]	; (2f9c <udi_hid_setup+0xe4>)
    2f00:	785b      	ldrb	r3, [r3, #1]
    2f02:	2b02      	cmp	r3, #2
    2f04:	d007      	beq.n	2f16 <udi_hid_setup+0x5e>
    2f06:	2b03      	cmp	r3, #3
    2f08:	d00d      	beq.n	2f26 <udi_hid_setup+0x6e>
    2f0a:	2b01      	cmp	r3, #1
    2f0c:	d113      	bne.n	2f36 <udi_hid_setup+0x7e>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    2f0e:	683b      	ldr	r3, [r7, #0]
    2f10:	4798      	blx	r3
    2f12:	0003      	movs	r3, r0
    2f14:	e03e      	b.n	2f94 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    2f16:	4b21      	ldr	r3, [pc, #132]	; (2f9c <udi_hid_setup+0xe4>)
    2f18:	68fa      	ldr	r2, [r7, #12]
    2f1a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2f1c:	4b1f      	ldr	r3, [pc, #124]	; (2f9c <udi_hid_setup+0xe4>)
    2f1e:	2201      	movs	r2, #1
    2f20:	819a      	strh	r2, [r3, #12]
				return true;
    2f22:	2301      	movs	r3, #1
    2f24:	e036      	b.n	2f94 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    2f26:	4b1d      	ldr	r3, [pc, #116]	; (2f9c <udi_hid_setup+0xe4>)
    2f28:	68ba      	ldr	r2, [r7, #8]
    2f2a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2f2c:	4b1b      	ldr	r3, [pc, #108]	; (2f9c <udi_hid_setup+0xe4>)
    2f2e:	2201      	movs	r2, #1
    2f30:	819a      	strh	r2, [r3, #12]
				return true;
    2f32:	2301      	movs	r3, #1
    2f34:	e02e      	b.n	2f94 <udi_hid_setup+0xdc>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2f36:	4b19      	ldr	r3, [pc, #100]	; (2f9c <udi_hid_setup+0xe4>)
    2f38:	781b      	ldrb	r3, [r3, #0]
    2f3a:	b25b      	sxtb	r3, r3
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	db28      	blt.n	2f92 <udi_hid_setup+0xda>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2f40:	4b16      	ldr	r3, [pc, #88]	; (2f9c <udi_hid_setup+0xe4>)
    2f42:	781b      	ldrb	r3, [r3, #0]
    2f44:	001a      	movs	r2, r3
    2f46:	2360      	movs	r3, #96	; 0x60
    2f48:	4013      	ands	r3, r2
    2f4a:	2b20      	cmp	r3, #32
    2f4c:	d121      	bne.n	2f92 <udi_hid_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2f4e:	4b13      	ldr	r3, [pc, #76]	; (2f9c <udi_hid_setup+0xe4>)
    2f50:	785b      	ldrb	r3, [r3, #1]
    2f52:	2b0a      	cmp	r3, #10
    2f54:	d007      	beq.n	2f66 <udi_hid_setup+0xae>
    2f56:	2b0b      	cmp	r3, #11
    2f58:	d00e      	beq.n	2f78 <udi_hid_setup+0xc0>
    2f5a:	2b09      	cmp	r3, #9
    2f5c:	d119      	bne.n	2f92 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    2f5e:	683b      	ldr	r3, [r7, #0]
    2f60:	4798      	blx	r3
    2f62:	0003      	movs	r3, r0
    2f64:	e016      	b.n	2f94 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    2f66:	4b0d      	ldr	r3, [pc, #52]	; (2f9c <udi_hid_setup+0xe4>)
    2f68:	885b      	ldrh	r3, [r3, #2]
    2f6a:	0a1b      	lsrs	r3, r3, #8
    2f6c:	b29b      	uxth	r3, r3
    2f6e:	b2da      	uxtb	r2, r3
    2f70:	68fb      	ldr	r3, [r7, #12]
    2f72:	701a      	strb	r2, [r3, #0]
				return true;
    2f74:	2301      	movs	r3, #1
    2f76:	e00d      	b.n	2f94 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    2f78:	4b08      	ldr	r3, [pc, #32]	; (2f9c <udi_hid_setup+0xe4>)
    2f7a:	88db      	ldrh	r3, [r3, #6]
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d001      	beq.n	2f84 <udi_hid_setup+0xcc>
					return false;
    2f80:	2300      	movs	r3, #0
    2f82:	e007      	b.n	2f94 <udi_hid_setup+0xdc>
				*protocol = udd_g_ctrlreq.req.wValue;
    2f84:	4b05      	ldr	r3, [pc, #20]	; (2f9c <udi_hid_setup+0xe4>)
    2f86:	885b      	ldrh	r3, [r3, #2]
    2f88:	b2da      	uxtb	r2, r3
    2f8a:	68bb      	ldr	r3, [r7, #8]
    2f8c:	701a      	strb	r2, [r3, #0]
				return true;
    2f8e:	2301      	movs	r3, #1
    2f90:	e000      	b.n	2f94 <udi_hid_setup+0xdc>
			}
		}
	}
	return false;	// Request not supported
    2f92:	2300      	movs	r3, #0
}
    2f94:	0018      	movs	r0, r3
    2f96:	46bd      	mov	sp, r7
    2f98:	b004      	add	sp, #16
    2f9a:	bd80      	pop	{r7, pc}
    2f9c:	200004dc 	.word	0x200004dc
    2fa0:	00002fa5 	.word	0x00002fa5

00002fa4 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b084      	sub	sp, #16
    2fa8:	af00      	add	r7, sp, #0
    2faa:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    2fac:	4b25      	ldr	r3, [pc, #148]	; (3044 <udi_hid_reqstdifaceget_descriptor+0xa0>)
    2fae:	4798      	blx	r3
    2fb0:	0003      	movs	r3, r0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    2fb2:	3309      	adds	r3, #9
    2fb4:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    2fb6:	68fb      	ldr	r3, [r7, #12]
    2fb8:	785b      	ldrb	r3, [r3, #1]
    2fba:	2b21      	cmp	r3, #33	; 0x21
    2fbc:	d001      	beq.n	2fc2 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    2fbe:	2300      	movs	r3, #0
    2fc0:	e03b      	b.n	303a <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2fc2:	4b21      	ldr	r3, [pc, #132]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2fc4:	885b      	ldrh	r3, [r3, #2]
    2fc6:	0a1b      	lsrs	r3, r3, #8
    2fc8:	b29b      	uxth	r3, r3
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	2b21      	cmp	r3, #33	; 0x21
    2fce:	d113      	bne.n	2ff8 <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2fd0:	4b1d      	ldr	r3, [pc, #116]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2fd2:	68fa      	ldr	r2, [r7, #12]
    2fd4:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    2fd6:	68fb      	ldr	r3, [r7, #12]
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	b29a      	uxth	r2, r3
    2fdc:	4b1a      	ldr	r3, [pc, #104]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2fde:	88db      	ldrh	r3, [r3, #6]
    2fe0:	1c18      	adds	r0, r3, #0
    2fe2:	1c11      	adds	r1, r2, #0
    2fe4:	b28a      	uxth	r2, r1
    2fe6:	b283      	uxth	r3, r0
    2fe8:	429a      	cmp	r2, r3
    2fea:	d900      	bls.n	2fee <udi_hid_reqstdifaceget_descriptor+0x4a>
    2fec:	1c01      	adds	r1, r0, #0
    2fee:	b28a      	uxth	r2, r1
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    2ff0:	4b15      	ldr	r3, [pc, #84]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ff2:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    2ff4:	2301      	movs	r3, #1
    2ff6:	e020      	b.n	303a <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2ff8:	68fb      	ldr	r3, [r7, #12]
    2ffa:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2ffc:	4b12      	ldr	r3, [pc, #72]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ffe:	885b      	ldrh	r3, [r3, #2]
    3000:	0a1b      	lsrs	r3, r3, #8
    3002:	b29b      	uxth	r3, r3
    3004:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    3006:	429a      	cmp	r2, r3
    3008:	d116      	bne.n	3038 <udi_hid_reqstdifaceget_descriptor+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    300a:	4b0f      	ldr	r3, [pc, #60]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    3010:	68fb      	ldr	r3, [r7, #12]
    3012:	79da      	ldrb	r2, [r3, #7]
    3014:	7a1b      	ldrb	r3, [r3, #8]
    3016:	021b      	lsls	r3, r3, #8
    3018:	4313      	orrs	r3, r2
    301a:	b29a      	uxth	r2, r3
    301c:	4b0a      	ldr	r3, [pc, #40]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    301e:	88db      	ldrh	r3, [r3, #6]
    3020:	1c18      	adds	r0, r3, #0
    3022:	1c11      	adds	r1, r2, #0
    3024:	b28a      	uxth	r2, r1
    3026:	b283      	uxth	r3, r0
    3028:	429a      	cmp	r2, r3
    302a:	d900      	bls.n	302e <udi_hid_reqstdifaceget_descriptor+0x8a>
    302c:	1c01      	adds	r1, r0, #0
    302e:	b28a      	uxth	r2, r1
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    3032:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    3034:	2301      	movs	r3, #1
    3036:	e000      	b.n	303a <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
    3038:	2300      	movs	r3, #0
}
    303a:	0018      	movs	r0, r3
    303c:	46bd      	mov	sp, r7
    303e:	b004      	add	sp, #16
    3040:	bd80      	pop	{r7, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	0000304d 	.word	0x0000304d
    3048:	200004dc 	.word	0x200004dc

0000304c <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    304c:	b580      	push	{r7, lr}
    304e:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    3050:	4b02      	ldr	r3, [pc, #8]	; (305c <udc_get_interface_desc+0x10>)
    3052:	681b      	ldr	r3, [r3, #0]
}
    3054:	0018      	movs	r0, r3
    3056:	46bd      	mov	sp, r7
    3058:	bd80      	pop	{r7, pc}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	200001b8 	.word	0x200001b8

00003060 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    3060:	b580      	push	{r7, lr}
    3062:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3064:	4b07      	ldr	r3, [pc, #28]	; (3084 <udc_get_eof_conf+0x24>)
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    306a:	4b06      	ldr	r3, [pc, #24]	; (3084 <udc_get_eof_conf+0x24>)
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	681b      	ldr	r3, [r3, #0]
    3070:	7899      	ldrb	r1, [r3, #2]
    3072:	78db      	ldrb	r3, [r3, #3]
    3074:	021b      	lsls	r3, r3, #8
    3076:	430b      	orrs	r3, r1
    3078:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    307a:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    307c:	0018      	movs	r0, r3
    307e:	46bd      	mov	sp, r7
    3080:	bd80      	pop	{r7, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	200001b4 	.word	0x200001b4

00003088 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
    3090:	000a      	movs	r2, r1
    3092:	1cfb      	adds	r3, r7, #3
    3094:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3096:	4b14      	ldr	r3, [pc, #80]	; (30e8 <udc_next_desc_in_iface+0x60>)
    3098:	4798      	blx	r3
    309a:	0003      	movs	r3, r0
    309c:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    30a2:	001a      	movs	r2, r3
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	189b      	adds	r3, r3, r2
    30a8:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    30aa:	e011      	b.n	30d0 <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	785b      	ldrb	r3, [r3, #1]
    30b0:	2b04      	cmp	r3, #4
    30b2:	d012      	beq.n	30da <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	785b      	ldrb	r3, [r3, #1]
    30b8:	1cfa      	adds	r2, r7, #3
    30ba:	7812      	ldrb	r2, [r2, #0]
    30bc:	429a      	cmp	r2, r3
    30be:	d101      	bne.n	30c4 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	e00c      	b.n	30de <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    30c8:	001a      	movs	r2, r3
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	189b      	adds	r3, r3, r2
    30ce:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    30d0:	68fa      	ldr	r2, [r7, #12]
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	429a      	cmp	r2, r3
    30d6:	d8e9      	bhi.n	30ac <udc_next_desc_in_iface+0x24>
    30d8:	e000      	b.n	30dc <udc_next_desc_in_iface+0x54>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
    30da:	46c0      	nop			; (mov r8, r8)
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    30dc:	2300      	movs	r3, #0
}
    30de:	0018      	movs	r0, r3
    30e0:	46bd      	mov	sp, r7
    30e2:	b004      	add	sp, #16
    30e4:	bd80      	pop	{r7, pc}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	00003061 	.word	0x00003061

000030ec <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b084      	sub	sp, #16
    30f0:	af00      	add	r7, sp, #0
    30f2:	0002      	movs	r2, r0
    30f4:	1dfb      	adds	r3, r7, #7
    30f6:	701a      	strb	r2, [r3, #0]
    30f8:	1dbb      	adds	r3, r7, #6
    30fa:	1c0a      	adds	r2, r1, #0
    30fc:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    30fe:	4b20      	ldr	r3, [pc, #128]	; (3180 <udc_update_iface_desc+0x94>)
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	2b00      	cmp	r3, #0
    3104:	d101      	bne.n	310a <udc_update_iface_desc+0x1e>
		return false;
    3106:	2300      	movs	r3, #0
    3108:	e036      	b.n	3178 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    310a:	4b1e      	ldr	r3, [pc, #120]	; (3184 <udc_update_iface_desc+0x98>)
    310c:	681b      	ldr	r3, [r3, #0]
    310e:	681b      	ldr	r3, [r3, #0]
    3110:	791b      	ldrb	r3, [r3, #4]
    3112:	1dfa      	adds	r2, r7, #7
    3114:	7812      	ldrb	r2, [r2, #0]
    3116:	429a      	cmp	r2, r3
    3118:	d301      	bcc.n	311e <udc_update_iface_desc+0x32>
		return false;
    311a:	2300      	movs	r3, #0
    311c:	e02c      	b.n	3178 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    311e:	4b19      	ldr	r3, [pc, #100]	; (3184 <udc_update_iface_desc+0x98>)
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3124:	4b18      	ldr	r3, [pc, #96]	; (3188 <udc_update_iface_desc+0x9c>)
    3126:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3128:	4b18      	ldr	r3, [pc, #96]	; (318c <udc_update_iface_desc+0xa0>)
    312a:	4798      	blx	r3
    312c:	0003      	movs	r3, r0
    312e:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3130:	e01c      	b.n	316c <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3132:	4b15      	ldr	r3, [pc, #84]	; (3188 <udc_update_iface_desc+0x9c>)
    3134:	681b      	ldr	r3, [r3, #0]
    3136:	785b      	ldrb	r3, [r3, #1]
    3138:	2b04      	cmp	r3, #4
    313a:	d10f      	bne.n	315c <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    313c:	4b12      	ldr	r3, [pc, #72]	; (3188 <udc_update_iface_desc+0x9c>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	789b      	ldrb	r3, [r3, #2]
    3142:	1dfa      	adds	r2, r7, #7
    3144:	7812      	ldrb	r2, [r2, #0]
    3146:	429a      	cmp	r2, r3
    3148:	d108      	bne.n	315c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    314a:	4b0f      	ldr	r3, [pc, #60]	; (3188 <udc_update_iface_desc+0x9c>)
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3150:	1dba      	adds	r2, r7, #6
    3152:	7812      	ldrb	r2, [r2, #0]
    3154:	429a      	cmp	r2, r3
    3156:	d101      	bne.n	315c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3158:	2301      	movs	r3, #1
    315a:	e00d      	b.n	3178 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    315c:	4b0a      	ldr	r3, [pc, #40]	; (3188 <udc_update_iface_desc+0x9c>)
    315e:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3160:	4b09      	ldr	r3, [pc, #36]	; (3188 <udc_update_iface_desc+0x9c>)
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3166:	18d2      	adds	r2, r2, r3
    3168:	4b07      	ldr	r3, [pc, #28]	; (3188 <udc_update_iface_desc+0x9c>)
    316a:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    316c:	4b06      	ldr	r3, [pc, #24]	; (3188 <udc_update_iface_desc+0x9c>)
    316e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	429a      	cmp	r2, r3
    3174:	d8dd      	bhi.n	3132 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3176:	2300      	movs	r3, #0
}
    3178:	0018      	movs	r0, r3
    317a:	46bd      	mov	sp, r7
    317c:	b004      	add	sp, #16
    317e:	bd80      	pop	{r7, pc}
    3180:	200001b0 	.word	0x200001b0
    3184:	200001b4 	.word	0x200001b4
    3188:	200001b8 	.word	0x200001b8
    318c:	00003061 	.word	0x00003061

00003190 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3190:	b580      	push	{r7, lr}
    3192:	b084      	sub	sp, #16
    3194:	af00      	add	r7, sp, #0
    3196:	0002      	movs	r2, r0
    3198:	1dfb      	adds	r3, r7, #7
    319a:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    319c:	1dfb      	adds	r3, r7, #7
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	2100      	movs	r1, #0
    31a2:	0018      	movs	r0, r3
    31a4:	4b21      	ldr	r3, [pc, #132]	; (322c <udc_iface_disable+0x9c>)
    31a6:	4798      	blx	r3
    31a8:	0003      	movs	r3, r0
    31aa:	001a      	movs	r2, r3
    31ac:	2301      	movs	r3, #1
    31ae:	4053      	eors	r3, r2
    31b0:	b2db      	uxtb	r3, r3
    31b2:	2b00      	cmp	r3, #0
    31b4:	d001      	beq.n	31ba <udc_iface_disable+0x2a>
		return false;
    31b6:	2300      	movs	r3, #0
    31b8:	e034      	b.n	3224 <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    31ba:	4b1d      	ldr	r3, [pc, #116]	; (3230 <udc_iface_disable+0xa0>)
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	685a      	ldr	r2, [r3, #4]
    31c0:	1dfb      	adds	r3, r7, #7
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	009b      	lsls	r3, r3, #2
    31c6:	18d3      	adds	r3, r2, r3
    31c8:	681b      	ldr	r3, [r3, #0]
    31ca:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    31cc:	68bb      	ldr	r3, [r7, #8]
    31ce:	68db      	ldr	r3, [r3, #12]
    31d0:	4798      	blx	r3
    31d2:	0003      	movs	r3, r0
    31d4:	001a      	movs	r2, r3
    31d6:	1dfb      	adds	r3, r7, #7
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	0011      	movs	r1, r2
    31dc:	0018      	movs	r0, r3
    31de:	4b13      	ldr	r3, [pc, #76]	; (322c <udc_iface_disable+0x9c>)
    31e0:	4798      	blx	r3
    31e2:	0003      	movs	r3, r0
    31e4:	001a      	movs	r2, r3
    31e6:	2301      	movs	r3, #1
    31e8:	4053      	eors	r3, r2
    31ea:	b2db      	uxtb	r3, r3
    31ec:	2b00      	cmp	r3, #0
    31ee:	d001      	beq.n	31f4 <udc_iface_disable+0x64>
		return false;
    31f0:	2300      	movs	r3, #0
    31f2:	e017      	b.n	3224 <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    31f4:	4b0f      	ldr	r3, [pc, #60]	; (3234 <udc_iface_disable+0xa4>)
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	2105      	movs	r1, #5
    31fe:	0018      	movs	r0, r3
    3200:	4b0d      	ldr	r3, [pc, #52]	; (3238 <udc_iface_disable+0xa8>)
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3208:	68fb      	ldr	r3, [r7, #12]
    320a:	2b00      	cmp	r3, #0
    320c:	d005      	beq.n	321a <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	789b      	ldrb	r3, [r3, #2]
    3212:	0018      	movs	r0, r3
    3214:	4b09      	ldr	r3, [pc, #36]	; (323c <udc_iface_disable+0xac>)
    3216:	4798      	blx	r3
		}
    3218:	e7ef      	b.n	31fa <udc_iface_disable+0x6a>
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
    321a:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    321c:	68bb      	ldr	r3, [r7, #8]
    321e:	685b      	ldr	r3, [r3, #4]
    3220:	4798      	blx	r3
	return true;
    3222:	2301      	movs	r3, #1
}
    3224:	0018      	movs	r0, r3
    3226:	46bd      	mov	sp, r7
    3228:	b004      	add	sp, #16
    322a:	bd80      	pop	{r7, pc}
    322c:	000030ed 	.word	0x000030ed
    3230:	200001b4 	.word	0x200001b4
    3234:	200001b8 	.word	0x200001b8
    3238:	00003089 	.word	0x00003089
    323c:	00005b05 	.word	0x00005b05

00003240 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3240:	b580      	push	{r7, lr}
    3242:	b084      	sub	sp, #16
    3244:	af00      	add	r7, sp, #0
    3246:	0002      	movs	r2, r0
    3248:	1dfb      	adds	r3, r7, #7
    324a:	701a      	strb	r2, [r3, #0]
    324c:	1dbb      	adds	r3, r7, #6
    324e:	1c0a      	adds	r2, r1, #0
    3250:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3252:	1dbb      	adds	r3, r7, #6
    3254:	781a      	ldrb	r2, [r3, #0]
    3256:	1dfb      	adds	r3, r7, #7
    3258:	781b      	ldrb	r3, [r3, #0]
    325a:	0011      	movs	r1, r2
    325c:	0018      	movs	r0, r3
    325e:	4b1f      	ldr	r3, [pc, #124]	; (32dc <udc_iface_enable+0x9c>)
    3260:	4798      	blx	r3
    3262:	0003      	movs	r3, r0
    3264:	001a      	movs	r2, r3
    3266:	2301      	movs	r3, #1
    3268:	4053      	eors	r3, r2
    326a:	b2db      	uxtb	r3, r3
    326c:	2b00      	cmp	r3, #0
    326e:	d001      	beq.n	3274 <udc_iface_enable+0x34>
		return false;
    3270:	2300      	movs	r3, #0
    3272:	e02e      	b.n	32d2 <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3274:	4b1a      	ldr	r3, [pc, #104]	; (32e0 <udc_iface_enable+0xa0>)
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	2105      	movs	r1, #5
    327e:	0018      	movs	r0, r3
    3280:	4b18      	ldr	r3, [pc, #96]	; (32e4 <udc_iface_enable+0xa4>)
    3282:	4798      	blx	r3
    3284:	0003      	movs	r3, r0
    3286:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	2b00      	cmp	r3, #0
    328c:	d015      	beq.n	32ba <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    328e:	68fb      	ldr	r3, [r7, #12]
    3290:	7898      	ldrb	r0, [r3, #2]
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	78d9      	ldrb	r1, [r3, #3]
    3296:	68fb      	ldr	r3, [r7, #12]
    3298:	791a      	ldrb	r2, [r3, #4]
    329a:	795b      	ldrb	r3, [r3, #5]
    329c:	021b      	lsls	r3, r3, #8
    329e:	4313      	orrs	r3, r2
    32a0:	b29b      	uxth	r3, r3
    32a2:	001a      	movs	r2, r3
    32a4:	4b10      	ldr	r3, [pc, #64]	; (32e8 <udc_iface_enable+0xa8>)
    32a6:	4798      	blx	r3
    32a8:	0003      	movs	r3, r0
    32aa:	001a      	movs	r2, r3
    32ac:	2301      	movs	r3, #1
    32ae:	4053      	eors	r3, r2
    32b0:	b2db      	uxtb	r3, r3
    32b2:	2b00      	cmp	r3, #0
    32b4:	d0e1      	beq.n	327a <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    32b6:	2300      	movs	r3, #0
    32b8:	e00b      	b.n	32d2 <udc_iface_enable+0x92>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
    32ba:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    32bc:	4b0b      	ldr	r3, [pc, #44]	; (32ec <udc_iface_enable+0xac>)
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	685a      	ldr	r2, [r3, #4]
    32c2:	1dfb      	adds	r3, r7, #7
    32c4:	781b      	ldrb	r3, [r3, #0]
    32c6:	009b      	lsls	r3, r3, #2
    32c8:	18d3      	adds	r3, r2, r3
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	4798      	blx	r3
    32d0:	0003      	movs	r3, r0
}
    32d2:	0018      	movs	r0, r3
    32d4:	46bd      	mov	sp, r7
    32d6:	b004      	add	sp, #16
    32d8:	bd80      	pop	{r7, pc}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	000030ed 	.word	0x000030ed
    32e0:	200001b8 	.word	0x200001b8
    32e4:	00003089 	.word	0x00003089
    32e8:	00005b91 	.word	0x00005b91
    32ec:	200001b4 	.word	0x200001b4

000032f0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    32f0:	b580      	push	{r7, lr}
    32f2:	af00      	add	r7, sp, #0
	udd_enable();
    32f4:	4b02      	ldr	r3, [pc, #8]	; (3300 <udc_start+0x10>)
    32f6:	4798      	blx	r3
}
    32f8:	46c0      	nop			; (mov r8, r8)
    32fa:	46bd      	mov	sp, r7
    32fc:	bd80      	pop	{r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	00006a81 	.word	0x00006a81

00003304 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3304:	b580      	push	{r7, lr}
    3306:	b082      	sub	sp, #8
    3308:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    330a:	4b16      	ldr	r3, [pc, #88]	; (3364 <udc_reset+0x60>)
    330c:	781b      	ldrb	r3, [r3, #0]
    330e:	2b00      	cmp	r3, #0
    3310:	d015      	beq.n	333e <udc_reset+0x3a>
		for (iface_num = 0;
    3312:	1dfb      	adds	r3, r7, #7
    3314:	2200      	movs	r2, #0
    3316:	701a      	strb	r2, [r3, #0]
    3318:	e009      	b.n	332e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    331a:	1dfb      	adds	r3, r7, #7
    331c:	781b      	ldrb	r3, [r3, #0]
    331e:	0018      	movs	r0, r3
    3320:	4b11      	ldr	r3, [pc, #68]	; (3368 <udc_reset+0x64>)
    3322:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3324:	1dfb      	adds	r3, r7, #7
    3326:	781a      	ldrb	r2, [r3, #0]
    3328:	1dfb      	adds	r3, r7, #7
    332a:	3201      	adds	r2, #1
    332c:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    332e:	4b0f      	ldr	r3, [pc, #60]	; (336c <udc_reset+0x68>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3336:	1dfa      	adds	r2, r7, #7
    3338:	7812      	ldrb	r2, [r2, #0]
    333a:	429a      	cmp	r2, r3
    333c:	d3ed      	bcc.n	331a <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    333e:	4b09      	ldr	r3, [pc, #36]	; (3364 <udc_reset+0x60>)
    3340:	2200      	movs	r2, #0
    3342:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    3344:	4b0a      	ldr	r3, [pc, #40]	; (3370 <udc_reset+0x6c>)
    3346:	881b      	ldrh	r3, [r3, #0]
    3348:	2202      	movs	r2, #2
    334a:	4013      	ands	r3, r2
    334c:	b29b      	uxth	r3, r3
    334e:	2b00      	cmp	r3, #0
    3350:	d001      	beq.n	3356 <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    3352:	4b08      	ldr	r3, [pc, #32]	; (3374 <udc_reset+0x70>)
    3354:	4798      	blx	r3
	}
#endif
	udc_device_status =
    3356:	4b06      	ldr	r3, [pc, #24]	; (3370 <udc_reset+0x6c>)
    3358:	2200      	movs	r2, #0
    335a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    335c:	46c0      	nop			; (mov r8, r8)
    335e:	46bd      	mov	sp, r7
    3360:	b002      	add	sp, #8
    3362:	bd80      	pop	{r7, pc}
    3364:	200001b0 	.word	0x200001b0
    3368:	00003191 	.word	0x00003191
    336c:	200001b4 	.word	0x200001b4
    3370:	200001a8 	.word	0x200001a8
    3374:	00008bd9 	.word	0x00008bd9

00003378 <udc_sof_notify>:

void udc_sof_notify(void)
{
    3378:	b580      	push	{r7, lr}
    337a:	b082      	sub	sp, #8
    337c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    337e:	4b17      	ldr	r3, [pc, #92]	; (33dc <udc_sof_notify+0x64>)
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	2b00      	cmp	r3, #0
    3384:	d025      	beq.n	33d2 <udc_sof_notify+0x5a>
		for (iface_num = 0;
    3386:	1dfb      	adds	r3, r7, #7
    3388:	2200      	movs	r2, #0
    338a:	701a      	strb	r2, [r3, #0]
    338c:	e019      	b.n	33c2 <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    338e:	4b14      	ldr	r3, [pc, #80]	; (33e0 <udc_sof_notify+0x68>)
    3390:	681b      	ldr	r3, [r3, #0]
    3392:	685a      	ldr	r2, [r3, #4]
    3394:	1dfb      	adds	r3, r7, #7
    3396:	781b      	ldrb	r3, [r3, #0]
    3398:	009b      	lsls	r3, r3, #2
    339a:	18d3      	adds	r3, r2, r3
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	691b      	ldr	r3, [r3, #16]
    33a0:	2b00      	cmp	r3, #0
    33a2:	d009      	beq.n	33b8 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    33a4:	4b0e      	ldr	r3, [pc, #56]	; (33e0 <udc_sof_notify+0x68>)
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	685a      	ldr	r2, [r3, #4]
    33aa:	1dfb      	adds	r3, r7, #7
    33ac:	781b      	ldrb	r3, [r3, #0]
    33ae:	009b      	lsls	r3, r3, #2
    33b0:	18d3      	adds	r3, r2, r3
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	691b      	ldr	r3, [r3, #16]
    33b6:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    33b8:	1dfb      	adds	r3, r7, #7
    33ba:	781a      	ldrb	r2, [r3, #0]
    33bc:	1dfb      	adds	r3, r7, #7
    33be:	3201      	adds	r2, #1
    33c0:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    33c2:	4b07      	ldr	r3, [pc, #28]	; (33e0 <udc_sof_notify+0x68>)
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    33ca:	1dfa      	adds	r2, r7, #7
    33cc:	7812      	ldrb	r2, [r2, #0]
    33ce:	429a      	cmp	r2, r3
    33d0:	d3dd      	bcc.n	338e <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	46bd      	mov	sp, r7
    33d6:	b002      	add	sp, #8
    33d8:	bd80      	pop	{r7, pc}
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	200001b0 	.word	0x200001b0
    33e0:	200001b4 	.word	0x200001b4

000033e4 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    33e8:	4b07      	ldr	r3, [pc, #28]	; (3408 <udc_req_std_dev_get_status+0x24>)
    33ea:	88db      	ldrh	r3, [r3, #6]
    33ec:	2b02      	cmp	r3, #2
    33ee:	d001      	beq.n	33f4 <udc_req_std_dev_get_status+0x10>
		return false;
    33f0:	2300      	movs	r3, #0
    33f2:	e005      	b.n	3400 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    33f4:	4b05      	ldr	r3, [pc, #20]	; (340c <udc_req_std_dev_get_status+0x28>)
    33f6:	2102      	movs	r1, #2
    33f8:	0018      	movs	r0, r3
    33fa:	4b05      	ldr	r3, [pc, #20]	; (3410 <udc_req_std_dev_get_status+0x2c>)
    33fc:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    33fe:	2301      	movs	r3, #1
}
    3400:	0018      	movs	r0, r3
    3402:	46bd      	mov	sp, r7
    3404:	bd80      	pop	{r7, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	200004dc 	.word	0x200004dc
    340c:	200001a8 	.word	0x200001a8
    3410:	00006199 	.word	0x00006199

00003414 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    3414:	b580      	push	{r7, lr}
    3416:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3418:	4b0c      	ldr	r3, [pc, #48]	; (344c <udc_req_std_ep_get_status+0x38>)
    341a:	88db      	ldrh	r3, [r3, #6]
    341c:	2b02      	cmp	r3, #2
    341e:	d001      	beq.n	3424 <udc_req_std_ep_get_status+0x10>
		return false;
    3420:	2300      	movs	r3, #0
    3422:	e00f      	b.n	3444 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3424:	4b09      	ldr	r3, [pc, #36]	; (344c <udc_req_std_ep_get_status+0x38>)
    3426:	889b      	ldrh	r3, [r3, #4]
    3428:	b2db      	uxtb	r3, r3
    342a:	0018      	movs	r0, r3
    342c:	4b08      	ldr	r3, [pc, #32]	; (3450 <udc_req_std_ep_get_status+0x3c>)
    342e:	4798      	blx	r3
    3430:	0003      	movs	r3, r0
    3432:	b29a      	uxth	r2, r3
    3434:	4b07      	ldr	r3, [pc, #28]	; (3454 <udc_req_std_ep_get_status+0x40>)
    3436:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <udc_req_std_ep_get_status+0x40>)
    343a:	2102      	movs	r1, #2
    343c:	0018      	movs	r0, r3
    343e:	4b06      	ldr	r3, [pc, #24]	; (3458 <udc_req_std_ep_get_status+0x44>)
    3440:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    3442:	2301      	movs	r3, #1
}
    3444:	0018      	movs	r0, r3
    3446:	46bd      	mov	sp, r7
    3448:	bd80      	pop	{r7, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	200004dc 	.word	0x200004dc
    3450:	00005d39 	.word	0x00005d39
    3454:	200001bc 	.word	0x200001bc
    3458:	00006199 	.word	0x00006199

0000345c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    345c:	b580      	push	{r7, lr}
    345e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3460:	4b0c      	ldr	r3, [pc, #48]	; (3494 <udc_req_std_dev_clear_feature+0x38>)
    3462:	88db      	ldrh	r3, [r3, #6]
    3464:	2b00      	cmp	r3, #0
    3466:	d001      	beq.n	346c <udc_req_std_dev_clear_feature+0x10>
		return false;
    3468:	2300      	movs	r3, #0
    346a:	e00f      	b.n	348c <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    346c:	4b09      	ldr	r3, [pc, #36]	; (3494 <udc_req_std_dev_clear_feature+0x38>)
    346e:	885b      	ldrh	r3, [r3, #2]
    3470:	2b01      	cmp	r3, #1
    3472:	d10a      	bne.n	348a <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3474:	4b08      	ldr	r3, [pc, #32]	; (3498 <udc_req_std_dev_clear_feature+0x3c>)
    3476:	881b      	ldrh	r3, [r3, #0]
    3478:	2202      	movs	r2, #2
    347a:	4393      	bics	r3, r2
    347c:	b29a      	uxth	r2, r3
    347e:	4b06      	ldr	r3, [pc, #24]	; (3498 <udc_req_std_dev_clear_feature+0x3c>)
    3480:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3482:	4b06      	ldr	r3, [pc, #24]	; (349c <udc_req_std_dev_clear_feature+0x40>)
    3484:	4798      	blx	r3
#endif
		return true;
    3486:	2301      	movs	r3, #1
    3488:	e000      	b.n	348c <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    348a:	2300      	movs	r3, #0
}
    348c:	0018      	movs	r0, r3
    348e:	46bd      	mov	sp, r7
    3490:	bd80      	pop	{r7, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	200004dc 	.word	0x200004dc
    3498:	200001a8 	.word	0x200001a8
    349c:	00008bd9 	.word	0x00008bd9

000034a0 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    34a4:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <udc_req_std_ep_clear_feature+0x30>)
    34a6:	88db      	ldrh	r3, [r3, #6]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d001      	beq.n	34b0 <udc_req_std_ep_clear_feature+0x10>
		return false;
    34ac:	2300      	movs	r3, #0
    34ae:	e00c      	b.n	34ca <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    34b0:	4b07      	ldr	r3, [pc, #28]	; (34d0 <udc_req_std_ep_clear_feature+0x30>)
    34b2:	885b      	ldrh	r3, [r3, #2]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d107      	bne.n	34c8 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    34b8:	4b05      	ldr	r3, [pc, #20]	; (34d0 <udc_req_std_ep_clear_feature+0x30>)
    34ba:	889b      	ldrh	r3, [r3, #4]
    34bc:	b2db      	uxtb	r3, r3
    34be:	0018      	movs	r0, r3
    34c0:	4b04      	ldr	r3, [pc, #16]	; (34d4 <udc_req_std_ep_clear_feature+0x34>)
    34c2:	4798      	blx	r3
    34c4:	0003      	movs	r3, r0
    34c6:	e000      	b.n	34ca <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    34c8:	2300      	movs	r3, #0
}
    34ca:	0018      	movs	r0, r3
    34cc:	46bd      	mov	sp, r7
    34ce:	bd80      	pop	{r7, pc}
    34d0:	200004dc 	.word	0x200004dc
    34d4:	00005dbd 	.word	0x00005dbd

000034d8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    34d8:	b580      	push	{r7, lr}
    34da:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    34dc:	4b0c      	ldr	r3, [pc, #48]	; (3510 <udc_req_std_dev_set_feature+0x38>)
    34de:	88db      	ldrh	r3, [r3, #6]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d001      	beq.n	34e8 <udc_req_std_dev_set_feature+0x10>
		return false;
    34e4:	2300      	movs	r3, #0
    34e6:	e010      	b.n	350a <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    34e8:	4b09      	ldr	r3, [pc, #36]	; (3510 <udc_req_std_dev_set_feature+0x38>)
    34ea:	885b      	ldrh	r3, [r3, #2]
    34ec:	2b01      	cmp	r3, #1
    34ee:	d002      	beq.n	34f6 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    34f0:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    34f2:	2300      	movs	r3, #0
    34f4:	e009      	b.n	350a <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    34f6:	4b07      	ldr	r3, [pc, #28]	; (3514 <udc_req_std_dev_set_feature+0x3c>)
    34f8:	881b      	ldrh	r3, [r3, #0]
    34fa:	2202      	movs	r2, #2
    34fc:	4313      	orrs	r3, r2
    34fe:	b29a      	uxth	r2, r3
    3500:	4b04      	ldr	r3, [pc, #16]	; (3514 <udc_req_std_dev_set_feature+0x3c>)
    3502:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    3504:	4b04      	ldr	r3, [pc, #16]	; (3518 <udc_req_std_dev_set_feature+0x40>)
    3506:	4798      	blx	r3
		return true;
    3508:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    350a:	0018      	movs	r0, r3
    350c:	46bd      	mov	sp, r7
    350e:	bd80      	pop	{r7, pc}
    3510:	200004dc 	.word	0x200004dc
    3514:	200001a8 	.word	0x200001a8
    3518:	00008bc5 	.word	0x00008bc5

0000351c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    351c:	b580      	push	{r7, lr}
    351e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3520:	4b0d      	ldr	r3, [pc, #52]	; (3558 <udc_req_std_ep_set_feature+0x3c>)
    3522:	88db      	ldrh	r3, [r3, #6]
    3524:	2b00      	cmp	r3, #0
    3526:	d001      	beq.n	352c <udc_req_std_ep_set_feature+0x10>
		return false;
    3528:	2300      	movs	r3, #0
    352a:	e012      	b.n	3552 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    352c:	4b0a      	ldr	r3, [pc, #40]	; (3558 <udc_req_std_ep_set_feature+0x3c>)
    352e:	885b      	ldrh	r3, [r3, #2]
    3530:	2b00      	cmp	r3, #0
    3532:	d10d      	bne.n	3550 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3534:	4b08      	ldr	r3, [pc, #32]	; (3558 <udc_req_std_ep_set_feature+0x3c>)
    3536:	889b      	ldrh	r3, [r3, #4]
    3538:	b2db      	uxtb	r3, r3
    353a:	0018      	movs	r0, r3
    353c:	4b07      	ldr	r3, [pc, #28]	; (355c <udc_req_std_ep_set_feature+0x40>)
    353e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3540:	4b05      	ldr	r3, [pc, #20]	; (3558 <udc_req_std_ep_set_feature+0x3c>)
    3542:	889b      	ldrh	r3, [r3, #4]
    3544:	b2db      	uxtb	r3, r3
    3546:	0018      	movs	r0, r3
    3548:	4b05      	ldr	r3, [pc, #20]	; (3560 <udc_req_std_ep_set_feature+0x44>)
    354a:	4798      	blx	r3
    354c:	0003      	movs	r3, r0
    354e:	e000      	b.n	3552 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3550:	2300      	movs	r3, #0
}
    3552:	0018      	movs	r0, r3
    3554:	46bd      	mov	sp, r7
    3556:	bd80      	pop	{r7, pc}
    3558:	200004dc 	.word	0x200004dc
    355c:	00005a79 	.word	0x00005a79
    3560:	00005d65 	.word	0x00005d65

00003564 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3564:	b580      	push	{r7, lr}
    3566:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3568:	4b05      	ldr	r3, [pc, #20]	; (3580 <udc_valid_address+0x1c>)
    356a:	885b      	ldrh	r3, [r3, #2]
    356c:	b2db      	uxtb	r3, r3
    356e:	227f      	movs	r2, #127	; 0x7f
    3570:	4013      	ands	r3, r2
    3572:	b2db      	uxtb	r3, r3
    3574:	0018      	movs	r0, r3
    3576:	4b03      	ldr	r3, [pc, #12]	; (3584 <udc_valid_address+0x20>)
    3578:	4798      	blx	r3
}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	46bd      	mov	sp, r7
    357e:	bd80      	pop	{r7, pc}
    3580:	200004dc 	.word	0x200004dc
    3584:	00006151 	.word	0x00006151

00003588 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    3588:	b580      	push	{r7, lr}
    358a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    358c:	4b06      	ldr	r3, [pc, #24]	; (35a8 <udc_req_std_dev_set_address+0x20>)
    358e:	88db      	ldrh	r3, [r3, #6]
    3590:	2b00      	cmp	r3, #0
    3592:	d001      	beq.n	3598 <udc_req_std_dev_set_address+0x10>
		return false;
    3594:	2300      	movs	r3, #0
    3596:	e003      	b.n	35a0 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3598:	4b03      	ldr	r3, [pc, #12]	; (35a8 <udc_req_std_dev_set_address+0x20>)
    359a:	4a04      	ldr	r2, [pc, #16]	; (35ac <udc_req_std_dev_set_address+0x24>)
    359c:	611a      	str	r2, [r3, #16]
	return true;
    359e:	2301      	movs	r3, #1
}
    35a0:	0018      	movs	r0, r3
    35a2:	46bd      	mov	sp, r7
    35a4:	bd80      	pop	{r7, pc}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	200004dc 	.word	0x200004dc
    35ac:	00003565 	.word	0x00003565

000035b0 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b084      	sub	sp, #16
    35b4:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    35b6:	1dfb      	adds	r3, r7, #7
    35b8:	2200      	movs	r2, #0
    35ba:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    35bc:	4b2d      	ldr	r3, [pc, #180]	; (3674 <udc_req_std_dev_get_str_desc+0xc4>)
    35be:	885b      	ldrh	r3, [r3, #2]
    35c0:	001a      	movs	r2, r3
    35c2:	23ff      	movs	r3, #255	; 0xff
    35c4:	4013      	ands	r3, r2
    35c6:	2b01      	cmp	r3, #1
    35c8:	d009      	beq.n	35de <udc_req_std_dev_get_str_desc+0x2e>
    35ca:	2b02      	cmp	r3, #2
    35cc:	d00d      	beq.n	35ea <udc_req_std_dev_get_str_desc+0x3a>
    35ce:	2b00      	cmp	r3, #0
    35d0:	d111      	bne.n	35f6 <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    35d2:	4b29      	ldr	r3, [pc, #164]	; (3678 <udc_req_std_dev_get_str_desc+0xc8>)
    35d4:	2104      	movs	r1, #4
    35d6:	0018      	movs	r0, r3
    35d8:	4b28      	ldr	r3, [pc, #160]	; (367c <udc_req_std_dev_get_str_desc+0xcc>)
    35da:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    35dc:	e00d      	b.n	35fa <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    35de:	1dfb      	adds	r3, r7, #7
    35e0:	2209      	movs	r2, #9
    35e2:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    35e4:	4b26      	ldr	r3, [pc, #152]	; (3680 <udc_req_std_dev_get_str_desc+0xd0>)
    35e6:	60bb      	str	r3, [r7, #8]
		break;
    35e8:	e007      	b.n	35fa <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    35ea:	1dfb      	adds	r3, r7, #7
    35ec:	2209      	movs	r2, #9
    35ee:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    35f0:	4b24      	ldr	r3, [pc, #144]	; (3684 <udc_req_std_dev_get_str_desc+0xd4>)
    35f2:	60bb      	str	r3, [r7, #8]
		break;
    35f4:	e001      	b.n	35fa <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    35f6:	2300      	movs	r3, #0
    35f8:	e037      	b.n	366a <udc_req_std_dev_get_str_desc+0xba>
	}

	if (str_length) {
    35fa:	1dfb      	adds	r3, r7, #7
    35fc:	781b      	ldrb	r3, [r3, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	d032      	beq.n	3668 <udc_req_std_dev_get_str_desc+0xb8>
		for(i = 0; i < str_length; i++) {
    3602:	230f      	movs	r3, #15
    3604:	18fb      	adds	r3, r7, r3
    3606:	2200      	movs	r2, #0
    3608:	701a      	strb	r2, [r3, #0]
    360a:	e016      	b.n	363a <udc_req_std_dev_get_str_desc+0x8a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    360c:	230f      	movs	r3, #15
    360e:	18fb      	adds	r3, r7, r3
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	220f      	movs	r2, #15
    3614:	18ba      	adds	r2, r7, r2
    3616:	7812      	ldrb	r2, [r2, #0]
    3618:	68b9      	ldr	r1, [r7, #8]
    361a:	188a      	adds	r2, r1, r2
    361c:	7812      	ldrb	r2, [r2, #0]
    361e:	b291      	uxth	r1, r2
    3620:	4a19      	ldr	r2, [pc, #100]	; (3688 <udc_req_std_dev_get_str_desc+0xd8>)
    3622:	005b      	lsls	r3, r3, #1
    3624:	18d3      	adds	r3, r2, r3
    3626:	3302      	adds	r3, #2
    3628:	1c0a      	adds	r2, r1, #0
    362a:	801a      	strh	r2, [r3, #0]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    362c:	230f      	movs	r3, #15
    362e:	18fb      	adds	r3, r7, r3
    3630:	781a      	ldrb	r2, [r3, #0]
    3632:	230f      	movs	r3, #15
    3634:	18fb      	adds	r3, r7, r3
    3636:	3201      	adds	r2, #1
    3638:	701a      	strb	r2, [r3, #0]
    363a:	230f      	movs	r3, #15
    363c:	18fa      	adds	r2, r7, r3
    363e:	1dfb      	adds	r3, r7, #7
    3640:	7812      	ldrb	r2, [r2, #0]
    3642:	781b      	ldrb	r3, [r3, #0]
    3644:	429a      	cmp	r2, r3
    3646:	d3e1      	bcc.n	360c <udc_req_std_dev_get_str_desc+0x5c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3648:	1dfb      	adds	r3, r7, #7
    364a:	781b      	ldrb	r3, [r3, #0]
    364c:	3301      	adds	r3, #1
    364e:	b2db      	uxtb	r3, r3
    3650:	18db      	adds	r3, r3, r3
    3652:	b2da      	uxtb	r2, r3
    3654:	4b0c      	ldr	r3, [pc, #48]	; (3688 <udc_req_std_dev_get_str_desc+0xd8>)
    3656:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    3658:	4b0b      	ldr	r3, [pc, #44]	; (3688 <udc_req_std_dev_get_str_desc+0xd8>)
    365a:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    365c:	b29a      	uxth	r2, r3
    365e:	4b0a      	ldr	r3, [pc, #40]	; (3688 <udc_req_std_dev_get_str_desc+0xd8>)
    3660:	0011      	movs	r1, r2
    3662:	0018      	movs	r0, r3
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <udc_req_std_dev_get_str_desc+0xcc>)
    3666:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    3668:	2301      	movs	r3, #1
}
    366a:	0018      	movs	r0, r3
    366c:	46bd      	mov	sp, r7
    366e:	b004      	add	sp, #16
    3670:	bd80      	pop	{r7, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	200004dc 	.word	0x200004dc
    3678:	200000ac 	.word	0x200000ac
    367c:	00006199 	.word	0x00006199
    3680:	200000b0 	.word	0x200000b0
    3684:	200000bc 	.word	0x200000bc
    3688:	200000c8 	.word	0x200000c8

0000368c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    368c:	b580      	push	{r7, lr}
    368e:	b082      	sub	sp, #8
    3690:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3692:	4b39      	ldr	r3, [pc, #228]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    3694:	885a      	ldrh	r2, [r3, #2]
    3696:	1dfb      	adds	r3, r7, #7
    3698:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    369a:	4b37      	ldr	r3, [pc, #220]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    369c:	885b      	ldrh	r3, [r3, #2]
    369e:	0a1b      	lsrs	r3, r3, #8
    36a0:	b29b      	uxth	r3, r3
    36a2:	b2db      	uxtb	r3, r3
    36a4:	2b02      	cmp	r3, #2
    36a6:	d013      	beq.n	36d0 <udc_req_std_dev_get_descriptor+0x44>
    36a8:	dc02      	bgt.n	36b0 <udc_req_std_dev_get_descriptor+0x24>
    36aa:	2b01      	cmp	r3, #1
    36ac:	d005      	beq.n	36ba <udc_req_std_dev_get_descriptor+0x2e>
    36ae:	e051      	b.n	3754 <udc_req_std_dev_get_descriptor+0xc8>
    36b0:	2b03      	cmp	r3, #3
    36b2:	d044      	beq.n	373e <udc_req_std_dev_get_descriptor+0xb2>
    36b4:	2b0f      	cmp	r3, #15
    36b6:	d02f      	beq.n	3718 <udc_req_std_dev_get_descriptor+0x8c>
    36b8:	e04c      	b.n	3754 <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    36ba:	4b30      	ldr	r3, [pc, #192]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    36bc:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    36be:	4b2f      	ldr	r3, [pc, #188]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    36c0:	681b      	ldr	r3, [r3, #0]
    36c2:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    36c4:	b29b      	uxth	r3, r3
    36c6:	0019      	movs	r1, r3
    36c8:	0010      	movs	r0, r2
    36ca:	4b2d      	ldr	r3, [pc, #180]	; (3780 <udc_req_std_dev_get_descriptor+0xf4>)
    36cc:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    36ce:	e044      	b.n	375a <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    36d0:	4b2a      	ldr	r3, [pc, #168]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    36d2:	681b      	ldr	r3, [r3, #0]
    36d4:	7c5b      	ldrb	r3, [r3, #17]
    36d6:	1dfa      	adds	r2, r7, #7
    36d8:	7812      	ldrb	r2, [r2, #0]
    36da:	429a      	cmp	r2, r3
    36dc:	d301      	bcc.n	36e2 <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    36de:	2300      	movs	r3, #0
    36e0:	e046      	b.n	3770 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    36e2:	4b26      	ldr	r3, [pc, #152]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    36e4:	685a      	ldr	r2, [r3, #4]
    36e6:	1dfb      	adds	r3, r7, #7
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	00db      	lsls	r3, r3, #3
    36ec:	18d3      	adds	r3, r2, r3
    36ee:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    36f0:	4b22      	ldr	r3, [pc, #136]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    36f2:	685a      	ldr	r2, [r3, #4]
    36f4:	1dfb      	adds	r3, r7, #7
    36f6:	781b      	ldrb	r3, [r3, #0]
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	18d3      	adds	r3, r2, r3
    36fc:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    36fe:	789a      	ldrb	r2, [r3, #2]
    3700:	78db      	ldrb	r3, [r3, #3]
    3702:	021b      	lsls	r3, r3, #8
    3704:	4313      	orrs	r3, r2
    3706:	b29b      	uxth	r3, r3
    3708:	0019      	movs	r1, r3
    370a:	4b1d      	ldr	r3, [pc, #116]	; (3780 <udc_req_std_dev_get_descriptor+0xf4>)
    370c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    370e:	4b1a      	ldr	r3, [pc, #104]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    3710:	689b      	ldr	r3, [r3, #8]
    3712:	2202      	movs	r2, #2
    3714:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    3716:	e020      	b.n	375a <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3718:	4b18      	ldr	r3, [pc, #96]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    371a:	689b      	ldr	r3, [r3, #8]
    371c:	2b00      	cmp	r3, #0
    371e:	d101      	bne.n	3724 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    3720:	2300      	movs	r3, #0
    3722:	e025      	b.n	3770 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3724:	4b15      	ldr	r3, [pc, #84]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    3726:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    3728:	4b14      	ldr	r3, [pc, #80]	; (377c <udc_req_std_dev_get_descriptor+0xf0>)
    372a:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    372c:	789a      	ldrb	r2, [r3, #2]
    372e:	78db      	ldrb	r3, [r3, #3]
    3730:	021b      	lsls	r3, r3, #8
    3732:	4313      	orrs	r3, r2
    3734:	b29b      	uxth	r3, r3
    3736:	0019      	movs	r1, r3
    3738:	4b11      	ldr	r3, [pc, #68]	; (3780 <udc_req_std_dev_get_descriptor+0xf4>)
    373a:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    373c:	e00d      	b.n	375a <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    373e:	4b11      	ldr	r3, [pc, #68]	; (3784 <udc_req_std_dev_get_descriptor+0xf8>)
    3740:	4798      	blx	r3
    3742:	0003      	movs	r3, r0
    3744:	001a      	movs	r2, r3
    3746:	2301      	movs	r3, #1
    3748:	4053      	eors	r3, r2
    374a:	b2db      	uxtb	r3, r3
    374c:	2b00      	cmp	r3, #0
    374e:	d003      	beq.n	3758 <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    3750:	2300      	movs	r3, #0
    3752:	e00d      	b.n	3770 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    3754:	2300      	movs	r3, #0
    3756:	e00b      	b.n	3770 <udc_req_std_dev_get_descriptor+0xe4>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
    3758:	46c0      	nop			; (mov r8, r8)
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    375a:	4b07      	ldr	r3, [pc, #28]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    375c:	88da      	ldrh	r2, [r3, #6]
    375e:	4b06      	ldr	r3, [pc, #24]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    3760:	899b      	ldrh	r3, [r3, #12]
    3762:	429a      	cmp	r2, r3
    3764:	d203      	bcs.n	376e <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3766:	4b04      	ldr	r3, [pc, #16]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    3768:	88da      	ldrh	r2, [r3, #6]
    376a:	4b03      	ldr	r3, [pc, #12]	; (3778 <udc_req_std_dev_get_descriptor+0xec>)
    376c:	819a      	strh	r2, [r3, #12]
	}
	return true;
    376e:	2301      	movs	r3, #1
}
    3770:	0018      	movs	r0, r3
    3772:	46bd      	mov	sp, r7
    3774:	b002      	add	sp, #8
    3776:	bd80      	pop	{r7, pc}
    3778:	200004dc 	.word	0x200004dc
    377c:	200000a0 	.word	0x200000a0
    3780:	00006199 	.word	0x00006199
    3784:	000035b1 	.word	0x000035b1

00003788 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    3788:	b580      	push	{r7, lr}
    378a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    378c:	4b07      	ldr	r3, [pc, #28]	; (37ac <udc_req_std_dev_get_configuration+0x24>)
    378e:	88db      	ldrh	r3, [r3, #6]
    3790:	2b01      	cmp	r3, #1
    3792:	d001      	beq.n	3798 <udc_req_std_dev_get_configuration+0x10>
		return false;
    3794:	2300      	movs	r3, #0
    3796:	e005      	b.n	37a4 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3798:	4b05      	ldr	r3, [pc, #20]	; (37b0 <udc_req_std_dev_get_configuration+0x28>)
    379a:	2101      	movs	r1, #1
    379c:	0018      	movs	r0, r3
    379e:	4b05      	ldr	r3, [pc, #20]	; (37b4 <udc_req_std_dev_get_configuration+0x2c>)
    37a0:	4798      	blx	r3
	return true;
    37a2:	2301      	movs	r3, #1
}
    37a4:	0018      	movs	r0, r3
    37a6:	46bd      	mov	sp, r7
    37a8:	bd80      	pop	{r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	200004dc 	.word	0x200004dc
    37b0:	200001b0 	.word	0x200001b0
    37b4:	00006199 	.word	0x00006199

000037b8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    37b8:	b580      	push	{r7, lr}
    37ba:	b082      	sub	sp, #8
    37bc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    37be:	4b2a      	ldr	r3, [pc, #168]	; (3868 <udc_req_std_dev_set_configuration+0xb0>)
    37c0:	88db      	ldrh	r3, [r3, #6]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d001      	beq.n	37ca <udc_req_std_dev_set_configuration+0x12>
		return false;
    37c6:	2300      	movs	r3, #0
    37c8:	e04a      	b.n	3860 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    37ca:	4b28      	ldr	r3, [pc, #160]	; (386c <udc_req_std_dev_set_configuration+0xb4>)
    37cc:	4798      	blx	r3
    37ce:	1e03      	subs	r3, r0, #0
    37d0:	d101      	bne.n	37d6 <udc_req_std_dev_set_configuration+0x1e>
		return false;
    37d2:	2300      	movs	r3, #0
    37d4:	e044      	b.n	3860 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    37d6:	4b24      	ldr	r3, [pc, #144]	; (3868 <udc_req_std_dev_set_configuration+0xb0>)
    37d8:	885b      	ldrh	r3, [r3, #2]
    37da:	001a      	movs	r2, r3
    37dc:	23ff      	movs	r3, #255	; 0xff
    37de:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    37e0:	4b23      	ldr	r3, [pc, #140]	; (3870 <udc_req_std_dev_set_configuration+0xb8>)
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    37e6:	429a      	cmp	r2, r3
    37e8:	dd01      	ble.n	37ee <udc_req_std_dev_set_configuration+0x36>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    37ea:	2300      	movs	r3, #0
    37ec:	e038      	b.n	3860 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    37ee:	4b21      	ldr	r3, [pc, #132]	; (3874 <udc_req_std_dev_set_configuration+0xbc>)
    37f0:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    37f2:	4b1d      	ldr	r3, [pc, #116]	; (3868 <udc_req_std_dev_set_configuration+0xb0>)
    37f4:	885b      	ldrh	r3, [r3, #2]
    37f6:	b2da      	uxtb	r2, r3
    37f8:	4b1f      	ldr	r3, [pc, #124]	; (3878 <udc_req_std_dev_set_configuration+0xc0>)
    37fa:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    37fc:	4b1e      	ldr	r3, [pc, #120]	; (3878 <udc_req_std_dev_set_configuration+0xc0>)
    37fe:	781b      	ldrb	r3, [r3, #0]
    3800:	2b00      	cmp	r3, #0
    3802:	d101      	bne.n	3808 <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    3804:	2301      	movs	r3, #1
    3806:	e02b      	b.n	3860 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3808:	4b19      	ldr	r3, [pc, #100]	; (3870 <udc_req_std_dev_set_configuration+0xb8>)
    380a:	685a      	ldr	r2, [r3, #4]
    380c:	4b1a      	ldr	r3, [pc, #104]	; (3878 <udc_req_std_dev_set_configuration+0xc0>)
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	491a      	ldr	r1, [pc, #104]	; (387c <udc_req_std_dev_set_configuration+0xc4>)
    3812:	468c      	mov	ip, r1
    3814:	4463      	add	r3, ip
    3816:	00db      	lsls	r3, r3, #3
    3818:	18d2      	adds	r2, r2, r3
    381a:	4b19      	ldr	r3, [pc, #100]	; (3880 <udc_req_std_dev_set_configuration+0xc8>)
    381c:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    381e:	1dfb      	adds	r3, r7, #7
    3820:	2200      	movs	r2, #0
    3822:	701a      	strb	r2, [r3, #0]
    3824:	e013      	b.n	384e <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3826:	1dfb      	adds	r3, r7, #7
    3828:	781b      	ldrb	r3, [r3, #0]
    382a:	2100      	movs	r1, #0
    382c:	0018      	movs	r0, r3
    382e:	4b15      	ldr	r3, [pc, #84]	; (3884 <udc_req_std_dev_set_configuration+0xcc>)
    3830:	4798      	blx	r3
    3832:	0003      	movs	r3, r0
    3834:	001a      	movs	r2, r3
    3836:	2301      	movs	r3, #1
    3838:	4053      	eors	r3, r2
    383a:	b2db      	uxtb	r3, r3
    383c:	2b00      	cmp	r3, #0
    383e:	d001      	beq.n	3844 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    3840:	2300      	movs	r3, #0
    3842:	e00d      	b.n	3860 <udc_req_std_dev_set_configuration+0xa8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3844:	1dfb      	adds	r3, r7, #7
    3846:	781a      	ldrb	r2, [r3, #0]
    3848:	1dfb      	adds	r3, r7, #7
    384a:	3201      	adds	r2, #1
    384c:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    384e:	4b0c      	ldr	r3, [pc, #48]	; (3880 <udc_req_std_dev_set_configuration+0xc8>)
    3850:	681b      	ldr	r3, [r3, #0]
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	791b      	ldrb	r3, [r3, #4]
    3856:	1dfa      	adds	r2, r7, #7
    3858:	7812      	ldrb	r2, [r2, #0]
    385a:	429a      	cmp	r2, r3
    385c:	d3e3      	bcc.n	3826 <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    385e:	2301      	movs	r3, #1
}
    3860:	0018      	movs	r0, r3
    3862:	46bd      	mov	sp, r7
    3864:	b002      	add	sp, #8
    3866:	bd80      	pop	{r7, pc}
    3868:	200004dc 	.word	0x200004dc
    386c:	0000617d 	.word	0x0000617d
    3870:	200000a0 	.word	0x200000a0
    3874:	00003305 	.word	0x00003305
    3878:	200001b0 	.word	0x200001b0
    387c:	1fffffff 	.word	0x1fffffff
    3880:	200001b4 	.word	0x200001b4
    3884:	00003241 	.word	0x00003241

00003888 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    3888:	b580      	push	{r7, lr}
    388a:	b082      	sub	sp, #8
    388c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    388e:	4b21      	ldr	r3, [pc, #132]	; (3914 <udc_req_std_iface_get_setting+0x8c>)
    3890:	88db      	ldrh	r3, [r3, #6]
    3892:	2b01      	cmp	r3, #1
    3894:	d001      	beq.n	389a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    3896:	2300      	movs	r3, #0
    3898:	e038      	b.n	390c <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    389a:	4b1f      	ldr	r3, [pc, #124]	; (3918 <udc_req_std_iface_get_setting+0x90>)
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	2b00      	cmp	r3, #0
    38a0:	d101      	bne.n	38a6 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    38a2:	2300      	movs	r3, #0
    38a4:	e032      	b.n	390c <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    38a6:	4b1b      	ldr	r3, [pc, #108]	; (3914 <udc_req_std_iface_get_setting+0x8c>)
    38a8:	889a      	ldrh	r2, [r3, #4]
    38aa:	1dfb      	adds	r3, r7, #7
    38ac:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    38ae:	4b1b      	ldr	r3, [pc, #108]	; (391c <udc_req_std_iface_get_setting+0x94>)
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	681b      	ldr	r3, [r3, #0]
    38b4:	791b      	ldrb	r3, [r3, #4]
    38b6:	1dfa      	adds	r2, r7, #7
    38b8:	7812      	ldrb	r2, [r2, #0]
    38ba:	429a      	cmp	r2, r3
    38bc:	d301      	bcc.n	38c2 <udc_req_std_iface_get_setting+0x3a>
		return false;
    38be:	2300      	movs	r3, #0
    38c0:	e024      	b.n	390c <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    38c2:	1dfb      	adds	r3, r7, #7
    38c4:	781b      	ldrb	r3, [r3, #0]
    38c6:	2100      	movs	r1, #0
    38c8:	0018      	movs	r0, r3
    38ca:	4b15      	ldr	r3, [pc, #84]	; (3920 <udc_req_std_iface_get_setting+0x98>)
    38cc:	4798      	blx	r3
    38ce:	0003      	movs	r3, r0
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4053      	eors	r3, r2
    38d6:	b2db      	uxtb	r3, r3
    38d8:	2b00      	cmp	r3, #0
    38da:	d001      	beq.n	38e0 <udc_req_std_iface_get_setting+0x58>
		return false;
    38dc:	2300      	movs	r3, #0
    38de:	e015      	b.n	390c <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    38e0:	4b0e      	ldr	r3, [pc, #56]	; (391c <udc_req_std_iface_get_setting+0x94>)
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	685a      	ldr	r2, [r3, #4]
    38e6:	1dfb      	adds	r3, r7, #7
    38e8:	781b      	ldrb	r3, [r3, #0]
    38ea:	009b      	lsls	r3, r3, #2
    38ec:	18d3      	adds	r3, r2, r3
    38ee:	681b      	ldr	r3, [r3, #0]
    38f0:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    38f2:	683b      	ldr	r3, [r7, #0]
    38f4:	68db      	ldr	r3, [r3, #12]
    38f6:	4798      	blx	r3
    38f8:	0003      	movs	r3, r0
    38fa:	001a      	movs	r2, r3
    38fc:	4b09      	ldr	r3, [pc, #36]	; (3924 <udc_req_std_iface_get_setting+0x9c>)
    38fe:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3900:	4b08      	ldr	r3, [pc, #32]	; (3924 <udc_req_std_iface_get_setting+0x9c>)
    3902:	2101      	movs	r1, #1
    3904:	0018      	movs	r0, r3
    3906:	4b08      	ldr	r3, [pc, #32]	; (3928 <udc_req_std_iface_get_setting+0xa0>)
    3908:	4798      	blx	r3
	return true;
    390a:	2301      	movs	r3, #1
}
    390c:	0018      	movs	r0, r3
    390e:	46bd      	mov	sp, r7
    3910:	b002      	add	sp, #8
    3912:	bd80      	pop	{r7, pc}
    3914:	200004dc 	.word	0x200004dc
    3918:	200001b0 	.word	0x200001b0
    391c:	200001b4 	.word	0x200001b4
    3920:	000030ed 	.word	0x000030ed
    3924:	200001ac 	.word	0x200001ac
    3928:	00006199 	.word	0x00006199

0000392c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    392c:	b580      	push	{r7, lr}
    392e:	b082      	sub	sp, #8
    3930:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3932:	4b17      	ldr	r3, [pc, #92]	; (3990 <udc_req_std_iface_set_setting+0x64>)
    3934:	88db      	ldrh	r3, [r3, #6]
    3936:	2b00      	cmp	r3, #0
    3938:	d001      	beq.n	393e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    393a:	2300      	movs	r3, #0
    393c:	e024      	b.n	3988 <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    393e:	4b15      	ldr	r3, [pc, #84]	; (3994 <udc_req_std_iface_set_setting+0x68>)
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	2b00      	cmp	r3, #0
    3944:	d101      	bne.n	394a <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    3946:	2300      	movs	r3, #0
    3948:	e01e      	b.n	3988 <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    394a:	4b11      	ldr	r3, [pc, #68]	; (3990 <udc_req_std_iface_set_setting+0x64>)
    394c:	889a      	ldrh	r2, [r3, #4]
    394e:	1dfb      	adds	r3, r7, #7
    3950:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3952:	4b0f      	ldr	r3, [pc, #60]	; (3990 <udc_req_std_iface_set_setting+0x64>)
    3954:	885a      	ldrh	r2, [r3, #2]
    3956:	1dbb      	adds	r3, r7, #6
    3958:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    395a:	1dfb      	adds	r3, r7, #7
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	0018      	movs	r0, r3
    3960:	4b0d      	ldr	r3, [pc, #52]	; (3998 <udc_req_std_iface_set_setting+0x6c>)
    3962:	4798      	blx	r3
    3964:	0003      	movs	r3, r0
    3966:	001a      	movs	r2, r3
    3968:	2301      	movs	r3, #1
    396a:	4053      	eors	r3, r2
    396c:	b2db      	uxtb	r3, r3
    396e:	2b00      	cmp	r3, #0
    3970:	d001      	beq.n	3976 <udc_req_std_iface_set_setting+0x4a>
		return false;
    3972:	2300      	movs	r3, #0
    3974:	e008      	b.n	3988 <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3976:	1dbb      	adds	r3, r7, #6
    3978:	781a      	ldrb	r2, [r3, #0]
    397a:	1dfb      	adds	r3, r7, #7
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	0011      	movs	r1, r2
    3980:	0018      	movs	r0, r3
    3982:	4b06      	ldr	r3, [pc, #24]	; (399c <udc_req_std_iface_set_setting+0x70>)
    3984:	4798      	blx	r3
    3986:	0003      	movs	r3, r0
}
    3988:	0018      	movs	r0, r3
    398a:	46bd      	mov	sp, r7
    398c:	b002      	add	sp, #8
    398e:	bd80      	pop	{r7, pc}
    3990:	200004dc 	.word	0x200004dc
    3994:	200001b0 	.word	0x200001b0
    3998:	00003191 	.word	0x00003191
    399c:	00003241 	.word	0x00003241

000039a0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    39a0:	b580      	push	{r7, lr}
    39a2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    39a4:	4b47      	ldr	r3, [pc, #284]	; (3ac4 <udc_reqstd+0x124>)
    39a6:	781b      	ldrb	r3, [r3, #0]
    39a8:	b25b      	sxtb	r3, r3
    39aa:	2b00      	cmp	r3, #0
    39ac:	da40      	bge.n	3a30 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    39ae:	4b45      	ldr	r3, [pc, #276]	; (3ac4 <udc_reqstd+0x124>)
    39b0:	88db      	ldrh	r3, [r3, #6]
    39b2:	2b00      	cmp	r3, #0
    39b4:	d101      	bne.n	39ba <udc_reqstd+0x1a>
			return false; // Error for USB host
    39b6:	2300      	movs	r3, #0
    39b8:	e081      	b.n	3abe <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    39ba:	4b42      	ldr	r3, [pc, #264]	; (3ac4 <udc_reqstd+0x124>)
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	001a      	movs	r2, r3
    39c0:	231f      	movs	r3, #31
    39c2:	4013      	ands	r3, r2
    39c4:	d114      	bne.n	39f0 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    39c6:	4b3f      	ldr	r3, [pc, #252]	; (3ac4 <udc_reqstd+0x124>)
    39c8:	785b      	ldrb	r3, [r3, #1]
    39ca:	2b06      	cmp	r3, #6
    39cc:	d008      	beq.n	39e0 <udc_reqstd+0x40>
    39ce:	2b08      	cmp	r3, #8
    39d0:	d00a      	beq.n	39e8 <udc_reqstd+0x48>
    39d2:	2b00      	cmp	r3, #0
    39d4:	d000      	beq.n	39d8 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    39d6:	e00b      	b.n	39f0 <udc_reqstd+0x50>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    39d8:	4b3b      	ldr	r3, [pc, #236]	; (3ac8 <udc_reqstd+0x128>)
    39da:	4798      	blx	r3
    39dc:	0003      	movs	r3, r0
    39de:	e06e      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    39e0:	4b3a      	ldr	r3, [pc, #232]	; (3acc <udc_reqstd+0x12c>)
    39e2:	4798      	blx	r3
    39e4:	0003      	movs	r3, r0
    39e6:	e06a      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    39e8:	4b39      	ldr	r3, [pc, #228]	; (3ad0 <udc_reqstd+0x130>)
    39ea:	4798      	blx	r3
    39ec:	0003      	movs	r3, r0
    39ee:	e066      	b.n	3abe <udc_reqstd+0x11e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    39f0:	4b34      	ldr	r3, [pc, #208]	; (3ac4 <udc_reqstd+0x124>)
    39f2:	781b      	ldrb	r3, [r3, #0]
    39f4:	001a      	movs	r2, r3
    39f6:	231f      	movs	r3, #31
    39f8:	4013      	ands	r3, r2
    39fa:	2b01      	cmp	r3, #1
    39fc:	d108      	bne.n	3a10 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    39fe:	4b31      	ldr	r3, [pc, #196]	; (3ac4 <udc_reqstd+0x124>)
    3a00:	785b      	ldrb	r3, [r3, #1]
    3a02:	2b0a      	cmp	r3, #10
    3a04:	d000      	beq.n	3a08 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    3a06:	e003      	b.n	3a10 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    3a08:	4b32      	ldr	r3, [pc, #200]	; (3ad4 <udc_reqstd+0x134>)
    3a0a:	4798      	blx	r3
    3a0c:	0003      	movs	r3, r0
    3a0e:	e056      	b.n	3abe <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3a10:	4b2c      	ldr	r3, [pc, #176]	; (3ac4 <udc_reqstd+0x124>)
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	001a      	movs	r2, r3
    3a16:	231f      	movs	r3, #31
    3a18:	4013      	ands	r3, r2
    3a1a:	2b02      	cmp	r3, #2
    3a1c:	d14e      	bne.n	3abc <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a1e:	4b29      	ldr	r3, [pc, #164]	; (3ac4 <udc_reqstd+0x124>)
    3a20:	785b      	ldrb	r3, [r3, #1]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d000      	beq.n	3a28 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    3a26:	e049      	b.n	3abc <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    3a28:	4b2b      	ldr	r3, [pc, #172]	; (3ad8 <udc_reqstd+0x138>)
    3a2a:	4798      	blx	r3
    3a2c:	0003      	movs	r3, r0
    3a2e:	e046      	b.n	3abe <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3a30:	4b24      	ldr	r3, [pc, #144]	; (3ac4 <udc_reqstd+0x124>)
    3a32:	781b      	ldrb	r3, [r3, #0]
    3a34:	001a      	movs	r2, r3
    3a36:	231f      	movs	r3, #31
    3a38:	4013      	ands	r3, r2
    3a3a:	d119      	bne.n	3a70 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a3c:	4b21      	ldr	r3, [pc, #132]	; (3ac4 <udc_reqstd+0x124>)
    3a3e:	785b      	ldrb	r3, [r3, #1]
    3a40:	2b09      	cmp	r3, #9
    3a42:	d814      	bhi.n	3a6e <udc_reqstd+0xce>
    3a44:	009a      	lsls	r2, r3, #2
    3a46:	4b25      	ldr	r3, [pc, #148]	; (3adc <udc_reqstd+0x13c>)
    3a48:	18d3      	adds	r3, r2, r3
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    3a4e:	4b24      	ldr	r3, [pc, #144]	; (3ae0 <udc_reqstd+0x140>)
    3a50:	4798      	blx	r3
    3a52:	0003      	movs	r3, r0
    3a54:	e033      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    3a56:	4b23      	ldr	r3, [pc, #140]	; (3ae4 <udc_reqstd+0x144>)
    3a58:	4798      	blx	r3
    3a5a:	0003      	movs	r3, r0
    3a5c:	e02f      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    3a5e:	4b22      	ldr	r3, [pc, #136]	; (3ae8 <udc_reqstd+0x148>)
    3a60:	4798      	blx	r3
    3a62:	0003      	movs	r3, r0
    3a64:	e02b      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    3a66:	4b21      	ldr	r3, [pc, #132]	; (3aec <udc_reqstd+0x14c>)
    3a68:	4798      	blx	r3
    3a6a:	0003      	movs	r3, r0
    3a6c:	e027      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    3a6e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3a70:	4b14      	ldr	r3, [pc, #80]	; (3ac4 <udc_reqstd+0x124>)
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	001a      	movs	r2, r3
    3a76:	231f      	movs	r3, #31
    3a78:	4013      	ands	r3, r2
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	d108      	bne.n	3a90 <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a7e:	4b11      	ldr	r3, [pc, #68]	; (3ac4 <udc_reqstd+0x124>)
    3a80:	785b      	ldrb	r3, [r3, #1]
    3a82:	2b0b      	cmp	r3, #11
    3a84:	d000      	beq.n	3a88 <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    3a86:	e003      	b.n	3a90 <udc_reqstd+0xf0>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    3a88:	4b19      	ldr	r3, [pc, #100]	; (3af0 <udc_reqstd+0x150>)
    3a8a:	4798      	blx	r3
    3a8c:	0003      	movs	r3, r0
    3a8e:	e016      	b.n	3abe <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3a90:	4b0c      	ldr	r3, [pc, #48]	; (3ac4 <udc_reqstd+0x124>)
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	001a      	movs	r2, r3
    3a96:	231f      	movs	r3, #31
    3a98:	4013      	ands	r3, r2
    3a9a:	2b02      	cmp	r3, #2
    3a9c:	d10e      	bne.n	3abc <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a9e:	4b09      	ldr	r3, [pc, #36]	; (3ac4 <udc_reqstd+0x124>)
    3aa0:	785b      	ldrb	r3, [r3, #1]
    3aa2:	2b01      	cmp	r3, #1
    3aa4:	d002      	beq.n	3aac <udc_reqstd+0x10c>
    3aa6:	2b03      	cmp	r3, #3
    3aa8:	d004      	beq.n	3ab4 <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    3aaa:	e007      	b.n	3abc <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    3aac:	4b11      	ldr	r3, [pc, #68]	; (3af4 <udc_reqstd+0x154>)
    3aae:	4798      	blx	r3
    3ab0:	0003      	movs	r3, r0
    3ab2:	e004      	b.n	3abe <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    3ab4:	4b10      	ldr	r3, [pc, #64]	; (3af8 <udc_reqstd+0x158>)
    3ab6:	4798      	blx	r3
    3ab8:	0003      	movs	r3, r0
    3aba:	e000      	b.n	3abe <udc_reqstd+0x11e>
				break;
			}
		}
#endif
	}
	return false;
    3abc:	2300      	movs	r3, #0
}
    3abe:	0018      	movs	r0, r3
    3ac0:	46bd      	mov	sp, r7
    3ac2:	bd80      	pop	{r7, pc}
    3ac4:	200004dc 	.word	0x200004dc
    3ac8:	000033e5 	.word	0x000033e5
    3acc:	0000368d 	.word	0x0000368d
    3ad0:	00003789 	.word	0x00003789
    3ad4:	00003889 	.word	0x00003889
    3ad8:	00003415 	.word	0x00003415
    3adc:	00009030 	.word	0x00009030
    3ae0:	00003589 	.word	0x00003589
    3ae4:	0000345d 	.word	0x0000345d
    3ae8:	000034d9 	.word	0x000034d9
    3aec:	000037b9 	.word	0x000037b9
    3af0:	0000392d 	.word	0x0000392d
    3af4:	000034a1 	.word	0x000034a1
    3af8:	0000351d 	.word	0x0000351d

00003afc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    3afc:	b580      	push	{r7, lr}
    3afe:	b082      	sub	sp, #8
    3b00:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3b02:	4b24      	ldr	r3, [pc, #144]	; (3b94 <udc_req_iface+0x98>)
    3b04:	781b      	ldrb	r3, [r3, #0]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d101      	bne.n	3b0e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    3b0a:	2300      	movs	r3, #0
    3b0c:	e03d      	b.n	3b8a <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3b0e:	4b22      	ldr	r3, [pc, #136]	; (3b98 <udc_req_iface+0x9c>)
    3b10:	889a      	ldrh	r2, [r3, #4]
    3b12:	1dfb      	adds	r3, r7, #7
    3b14:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3b16:	4b21      	ldr	r3, [pc, #132]	; (3b9c <udc_req_iface+0xa0>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	791b      	ldrb	r3, [r3, #4]
    3b1e:	1dfa      	adds	r2, r7, #7
    3b20:	7812      	ldrb	r2, [r2, #0]
    3b22:	429a      	cmp	r2, r3
    3b24:	d301      	bcc.n	3b2a <udc_req_iface+0x2e>
		return false;
    3b26:	2300      	movs	r3, #0
    3b28:	e02f      	b.n	3b8a <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3b2a:	1dfb      	adds	r3, r7, #7
    3b2c:	781b      	ldrb	r3, [r3, #0]
    3b2e:	2100      	movs	r1, #0
    3b30:	0018      	movs	r0, r3
    3b32:	4b1b      	ldr	r3, [pc, #108]	; (3ba0 <udc_req_iface+0xa4>)
    3b34:	4798      	blx	r3
    3b36:	0003      	movs	r3, r0
    3b38:	001a      	movs	r2, r3
    3b3a:	2301      	movs	r3, #1
    3b3c:	4053      	eors	r3, r2
    3b3e:	b2db      	uxtb	r3, r3
    3b40:	2b00      	cmp	r3, #0
    3b42:	d001      	beq.n	3b48 <udc_req_iface+0x4c>
		return false;
    3b44:	2300      	movs	r3, #0
    3b46:	e020      	b.n	3b8a <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3b48:	4b14      	ldr	r3, [pc, #80]	; (3b9c <udc_req_iface+0xa0>)
    3b4a:	681b      	ldr	r3, [r3, #0]
    3b4c:	685a      	ldr	r2, [r3, #4]
    3b4e:	1dfb      	adds	r3, r7, #7
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	009b      	lsls	r3, r3, #2
    3b54:	18d3      	adds	r3, r2, r3
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3b5a:	683b      	ldr	r3, [r7, #0]
    3b5c:	68db      	ldr	r3, [r3, #12]
    3b5e:	4798      	blx	r3
    3b60:	0003      	movs	r3, r0
    3b62:	001a      	movs	r2, r3
    3b64:	1dfb      	adds	r3, r7, #7
    3b66:	781b      	ldrb	r3, [r3, #0]
    3b68:	0011      	movs	r1, r2
    3b6a:	0018      	movs	r0, r3
    3b6c:	4b0c      	ldr	r3, [pc, #48]	; (3ba0 <udc_req_iface+0xa4>)
    3b6e:	4798      	blx	r3
    3b70:	0003      	movs	r3, r0
    3b72:	001a      	movs	r2, r3
    3b74:	2301      	movs	r3, #1
    3b76:	4053      	eors	r3, r2
    3b78:	b2db      	uxtb	r3, r3
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d001      	beq.n	3b82 <udc_req_iface+0x86>
		return false;
    3b7e:	2300      	movs	r3, #0
    3b80:	e003      	b.n	3b8a <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	689b      	ldr	r3, [r3, #8]
    3b86:	4798      	blx	r3
    3b88:	0003      	movs	r3, r0
}
    3b8a:	0018      	movs	r0, r3
    3b8c:	46bd      	mov	sp, r7
    3b8e:	b002      	add	sp, #8
    3b90:	bd80      	pop	{r7, pc}
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	200001b0 	.word	0x200001b0
    3b98:	200004dc 	.word	0x200004dc
    3b9c:	200001b4 	.word	0x200001b4
    3ba0:	000030ed 	.word	0x000030ed

00003ba4 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b082      	sub	sp, #8
    3ba8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3baa:	4b22      	ldr	r3, [pc, #136]	; (3c34 <udc_req_ep+0x90>)
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	2b00      	cmp	r3, #0
    3bb0:	d101      	bne.n	3bb6 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    3bb2:	2300      	movs	r3, #0
    3bb4:	e039      	b.n	3c2a <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3bb6:	4b20      	ldr	r3, [pc, #128]	; (3c38 <udc_req_ep+0x94>)
    3bb8:	889a      	ldrh	r2, [r3, #4]
    3bba:	1dfb      	adds	r3, r7, #7
    3bbc:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3bbe:	1dfb      	adds	r3, r7, #7
    3bc0:	2200      	movs	r2, #0
    3bc2:	701a      	strb	r2, [r3, #0]
    3bc4:	e028      	b.n	3c18 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3bc6:	4b1d      	ldr	r3, [pc, #116]	; (3c3c <udc_req_ep+0x98>)
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	685a      	ldr	r2, [r3, #4]
    3bcc:	1dfb      	adds	r3, r7, #7
    3bce:	781b      	ldrb	r3, [r3, #0]
    3bd0:	009b      	lsls	r3, r3, #2
    3bd2:	18d3      	adds	r3, r2, r3
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3bd8:	683b      	ldr	r3, [r7, #0]
    3bda:	68db      	ldr	r3, [r3, #12]
    3bdc:	4798      	blx	r3
    3bde:	0003      	movs	r3, r0
    3be0:	001a      	movs	r2, r3
    3be2:	1dfb      	adds	r3, r7, #7
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	0011      	movs	r1, r2
    3be8:	0018      	movs	r0, r3
    3bea:	4b15      	ldr	r3, [pc, #84]	; (3c40 <udc_req_ep+0x9c>)
    3bec:	4798      	blx	r3
    3bee:	0003      	movs	r3, r0
    3bf0:	001a      	movs	r2, r3
    3bf2:	2301      	movs	r3, #1
    3bf4:	4053      	eors	r3, r2
    3bf6:	b2db      	uxtb	r3, r3
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d001      	beq.n	3c00 <udc_req_ep+0x5c>
			return false;
    3bfc:	2300      	movs	r3, #0
    3bfe:	e014      	b.n	3c2a <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3c00:	683b      	ldr	r3, [r7, #0]
    3c02:	689b      	ldr	r3, [r3, #8]
    3c04:	4798      	blx	r3
    3c06:	1e03      	subs	r3, r0, #0
    3c08:	d001      	beq.n	3c0e <udc_req_ep+0x6a>
			return true;
    3c0a:	2301      	movs	r3, #1
    3c0c:	e00d      	b.n	3c2a <udc_req_ep+0x86>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3c0e:	1dfb      	adds	r3, r7, #7
    3c10:	781a      	ldrb	r2, [r3, #0]
    3c12:	1dfb      	adds	r3, r7, #7
    3c14:	3201      	adds	r2, #1
    3c16:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3c18:	4b08      	ldr	r3, [pc, #32]	; (3c3c <udc_req_ep+0x98>)
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	681b      	ldr	r3, [r3, #0]
    3c1e:	791b      	ldrb	r3, [r3, #4]
    3c20:	1dfa      	adds	r2, r7, #7
    3c22:	7812      	ldrb	r2, [r2, #0]
    3c24:	429a      	cmp	r2, r3
    3c26:	d3ce      	bcc.n	3bc6 <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3c28:	2300      	movs	r3, #0
}
    3c2a:	0018      	movs	r0, r3
    3c2c:	46bd      	mov	sp, r7
    3c2e:	b002      	add	sp, #8
    3c30:	bd80      	pop	{r7, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	200001b0 	.word	0x200001b0
    3c38:	200004dc 	.word	0x200004dc
    3c3c:	200001b4 	.word	0x200001b4
    3c40:	000030ed 	.word	0x000030ed

00003c44 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3c48:	4b1e      	ldr	r3, [pc, #120]	; (3cc4 <udc_process_setup+0x80>)
    3c4a:	2200      	movs	r2, #0
    3c4c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    3c4e:	4b1d      	ldr	r3, [pc, #116]	; (3cc4 <udc_process_setup+0x80>)
    3c50:	2200      	movs	r2, #0
    3c52:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    3c54:	4b1b      	ldr	r3, [pc, #108]	; (3cc4 <udc_process_setup+0x80>)
    3c56:	2200      	movs	r2, #0
    3c58:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    3c5a:	4b1a      	ldr	r3, [pc, #104]	; (3cc4 <udc_process_setup+0x80>)
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	b25b      	sxtb	r3, r3
    3c60:	2b00      	cmp	r3, #0
    3c62:	da05      	bge.n	3c70 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3c64:	4b17      	ldr	r3, [pc, #92]	; (3cc4 <udc_process_setup+0x80>)
    3c66:	88db      	ldrh	r3, [r3, #6]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d101      	bne.n	3c70 <udc_process_setup+0x2c>
			return false; // Error from USB host
    3c6c:	2300      	movs	r3, #0
    3c6e:	e026      	b.n	3cbe <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3c70:	4b14      	ldr	r3, [pc, #80]	; (3cc4 <udc_process_setup+0x80>)
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	001a      	movs	r2, r3
    3c76:	2360      	movs	r3, #96	; 0x60
    3c78:	4013      	ands	r3, r2
    3c7a:	d105      	bne.n	3c88 <udc_process_setup+0x44>
		if (udc_reqstd()) {
    3c7c:	4b12      	ldr	r3, [pc, #72]	; (3cc8 <udc_process_setup+0x84>)
    3c7e:	4798      	blx	r3
    3c80:	1e03      	subs	r3, r0, #0
    3c82:	d001      	beq.n	3c88 <udc_process_setup+0x44>
			return true;
    3c84:	2301      	movs	r3, #1
    3c86:	e01a      	b.n	3cbe <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3c88:	4b0e      	ldr	r3, [pc, #56]	; (3cc4 <udc_process_setup+0x80>)
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	001a      	movs	r2, r3
    3c8e:	231f      	movs	r3, #31
    3c90:	4013      	ands	r3, r2
    3c92:	2b01      	cmp	r3, #1
    3c94:	d105      	bne.n	3ca2 <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    3c96:	4b0d      	ldr	r3, [pc, #52]	; (3ccc <udc_process_setup+0x88>)
    3c98:	4798      	blx	r3
    3c9a:	1e03      	subs	r3, r0, #0
    3c9c:	d001      	beq.n	3ca2 <udc_process_setup+0x5e>
			return true;
    3c9e:	2301      	movs	r3, #1
    3ca0:	e00d      	b.n	3cbe <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3ca2:	4b08      	ldr	r3, [pc, #32]	; (3cc4 <udc_process_setup+0x80>)
    3ca4:	781b      	ldrb	r3, [r3, #0]
    3ca6:	001a      	movs	r2, r3
    3ca8:	231f      	movs	r3, #31
    3caa:	4013      	ands	r3, r2
    3cac:	2b02      	cmp	r3, #2
    3cae:	d105      	bne.n	3cbc <udc_process_setup+0x78>
		if (udc_req_ep()) {
    3cb0:	4b07      	ldr	r3, [pc, #28]	; (3cd0 <udc_process_setup+0x8c>)
    3cb2:	4798      	blx	r3
    3cb4:	1e03      	subs	r3, r0, #0
    3cb6:	d001      	beq.n	3cbc <udc_process_setup+0x78>
			return true;
    3cb8:	2301      	movs	r3, #1
    3cba:	e000      	b.n	3cbe <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3cbc:	2300      	movs	r3, #0
#endif
}
    3cbe:	0018      	movs	r0, r3
    3cc0:	46bd      	mov	sp, r7
    3cc2:	bd80      	pop	{r7, pc}
    3cc4:	200004dc 	.word	0x200004dc
    3cc8:	000039a1 	.word	0x000039a1
    3ccc:	00003afd 	.word	0x00003afd
    3cd0:	00003ba5 	.word	0x00003ba5

00003cd4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b082      	sub	sp, #8
    3cd8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3cda:	4b10      	ldr	r3, [pc, #64]	; (3d1c <cpu_irq_enter_critical+0x48>)
    3cdc:	681b      	ldr	r3, [r3, #0]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d112      	bne.n	3d08 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ce2:	f3ef 8310 	mrs	r3, PRIMASK
    3ce6:	607b      	str	r3, [r7, #4]
  return(result);
    3ce8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3cea:	2b00      	cmp	r3, #0
    3cec:	d109      	bne.n	3d02 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3cee:	b672      	cpsid	i
    3cf0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3cf4:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <cpu_irq_enter_critical+0x4c>)
    3cf6:	2200      	movs	r2, #0
    3cf8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3cfa:	4b0a      	ldr	r3, [pc, #40]	; (3d24 <cpu_irq_enter_critical+0x50>)
    3cfc:	2201      	movs	r2, #1
    3cfe:	701a      	strb	r2, [r3, #0]
    3d00:	e002      	b.n	3d08 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3d02:	4b08      	ldr	r3, [pc, #32]	; (3d24 <cpu_irq_enter_critical+0x50>)
    3d04:	2200      	movs	r2, #0
    3d06:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3d08:	4b04      	ldr	r3, [pc, #16]	; (3d1c <cpu_irq_enter_critical+0x48>)
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	1c5a      	adds	r2, r3, #1
    3d0e:	4b03      	ldr	r3, [pc, #12]	; (3d1c <cpu_irq_enter_critical+0x48>)
    3d10:	601a      	str	r2, [r3, #0]
}
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	46bd      	mov	sp, r7
    3d16:	b002      	add	sp, #8
    3d18:	bd80      	pop	{r7, pc}
    3d1a:	46c0      	nop			; (mov r8, r8)
    3d1c:	200001c0 	.word	0x200001c0
    3d20:	200000dc 	.word	0x200000dc
    3d24:	200001c4 	.word	0x200001c4

00003d28 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3d2c:	4b0b      	ldr	r3, [pc, #44]	; (3d5c <cpu_irq_leave_critical+0x34>)
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	1e5a      	subs	r2, r3, #1
    3d32:	4b0a      	ldr	r3, [pc, #40]	; (3d5c <cpu_irq_leave_critical+0x34>)
    3d34:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3d36:	4b09      	ldr	r3, [pc, #36]	; (3d5c <cpu_irq_leave_critical+0x34>)
    3d38:	681b      	ldr	r3, [r3, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d10a      	bne.n	3d54 <cpu_irq_leave_critical+0x2c>
    3d3e:	4b08      	ldr	r3, [pc, #32]	; (3d60 <cpu_irq_leave_critical+0x38>)
    3d40:	781b      	ldrb	r3, [r3, #0]
    3d42:	b2db      	uxtb	r3, r3
    3d44:	2b00      	cmp	r3, #0
    3d46:	d005      	beq.n	3d54 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3d48:	4b06      	ldr	r3, [pc, #24]	; (3d64 <cpu_irq_leave_critical+0x3c>)
    3d4a:	2201      	movs	r2, #1
    3d4c:	701a      	strb	r2, [r3, #0]
    3d4e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3d52:	b662      	cpsie	i
	}
}
    3d54:	46c0      	nop			; (mov r8, r8)
    3d56:	46bd      	mov	sp, r7
    3d58:	bd80      	pop	{r7, pc}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	200001c0 	.word	0x200001c0
    3d60:	200001c4 	.word	0x200001c4
    3d64:	200000dc 	.word	0x200000dc

00003d68 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b084      	sub	sp, #16
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	0002      	movs	r2, r0
    3d70:	1dfb      	adds	r3, r7, #7
    3d72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3d74:	230f      	movs	r3, #15
    3d76:	18fb      	adds	r3, r7, r3
    3d78:	1dfa      	adds	r2, r7, #7
    3d7a:	7812      	ldrb	r2, [r2, #0]
    3d7c:	09d2      	lsrs	r2, r2, #7
    3d7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3d80:	230e      	movs	r3, #14
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	1dfa      	adds	r2, r7, #7
    3d86:	7812      	ldrb	r2, [r2, #0]
    3d88:	0952      	lsrs	r2, r2, #5
    3d8a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3d8c:	4b0d      	ldr	r3, [pc, #52]	; (3dc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3d8e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3d90:	230f      	movs	r3, #15
    3d92:	18fb      	adds	r3, r7, r3
    3d94:	781b      	ldrb	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d10f      	bne.n	3dba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3d9a:	230f      	movs	r3, #15
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	009b      	lsls	r3, r3, #2
    3da2:	2210      	movs	r2, #16
    3da4:	4694      	mov	ip, r2
    3da6:	44bc      	add	ip, r7
    3da8:	4463      	add	r3, ip
    3daa:	3b08      	subs	r3, #8
    3dac:	681a      	ldr	r2, [r3, #0]
    3dae:	230e      	movs	r3, #14
    3db0:	18fb      	adds	r3, r7, r3
    3db2:	781b      	ldrb	r3, [r3, #0]
    3db4:	01db      	lsls	r3, r3, #7
    3db6:	18d3      	adds	r3, r2, r3
    3db8:	e000      	b.n	3dbc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3dba:	2300      	movs	r3, #0
	}
}
    3dbc:	0018      	movs	r0, r3
    3dbe:	46bd      	mov	sp, r7
    3dc0:	b004      	add	sp, #16
    3dc2:	bd80      	pop	{r7, pc}
    3dc4:	41004400 	.word	0x41004400

00003dc8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b082      	sub	sp, #8
    3dcc:	af00      	add	r7, sp, #0
    3dce:	0002      	movs	r2, r0
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3dd4:	1dfb      	adds	r3, r7, #7
    3dd6:	781b      	ldrb	r3, [r3, #0]
    3dd8:	0018      	movs	r0, r3
    3dda:	4b03      	ldr	r3, [pc, #12]	; (3de8 <port_get_group_from_gpio_pin+0x20>)
    3ddc:	4798      	blx	r3
    3dde:	0003      	movs	r3, r0
}
    3de0:	0018      	movs	r0, r3
    3de2:	46bd      	mov	sp, r7
    3de4:	b002      	add	sp, #8
    3de6:	bd80      	pop	{r7, pc}
    3de8:	00003d69 	.word	0x00003d69

00003dec <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b082      	sub	sp, #8
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	2200      	movs	r2, #0
    3df8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	2201      	movs	r2, #1
    3dfe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	2200      	movs	r2, #0
    3e04:	709a      	strb	r2, [r3, #2]
}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	46bd      	mov	sp, r7
    3e0a:	b002      	add	sp, #8
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)

00003e10 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b084      	sub	sp, #16
    3e14:	af00      	add	r7, sp, #0
    3e16:	0002      	movs	r2, r0
    3e18:	1dfb      	adds	r3, r7, #7
    3e1a:	701a      	strb	r2, [r3, #0]
    3e1c:	1dbb      	adds	r3, r7, #6
    3e1e:	1c0a      	adds	r2, r1, #0
    3e20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e22:	1dfb      	adds	r3, r7, #7
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	0018      	movs	r0, r3
    3e28:	4b0d      	ldr	r3, [pc, #52]	; (3e60 <port_pin_set_output_level+0x50>)
    3e2a:	4798      	blx	r3
    3e2c:	0003      	movs	r3, r0
    3e2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e30:	1dfb      	adds	r3, r7, #7
    3e32:	781b      	ldrb	r3, [r3, #0]
    3e34:	221f      	movs	r2, #31
    3e36:	4013      	ands	r3, r2
    3e38:	2201      	movs	r2, #1
    3e3a:	409a      	lsls	r2, r3
    3e3c:	0013      	movs	r3, r2
    3e3e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3e40:	1dbb      	adds	r3, r7, #6
    3e42:	781b      	ldrb	r3, [r3, #0]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d003      	beq.n	3e50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3e48:	68fb      	ldr	r3, [r7, #12]
    3e4a:	68ba      	ldr	r2, [r7, #8]
    3e4c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3e4e:	e002      	b.n	3e56 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	68ba      	ldr	r2, [r7, #8]
    3e54:	615a      	str	r2, [r3, #20]
	}
}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	46bd      	mov	sp, r7
    3e5a:	b004      	add	sp, #16
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	00003dc9 	.word	0x00003dc9

00003e64 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3e6a:	1d3b      	adds	r3, r7, #4
    3e6c:	0018      	movs	r0, r3
    3e6e:	4b0e      	ldr	r3, [pc, #56]	; (3ea8 <system_board_init+0x44>)
    3e70:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3e72:	1d3b      	adds	r3, r7, #4
    3e74:	2201      	movs	r2, #1
    3e76:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3e78:	1d3b      	adds	r3, r7, #4
    3e7a:	0019      	movs	r1, r3
    3e7c:	2011      	movs	r0, #17
    3e7e:	4b0b      	ldr	r3, [pc, #44]	; (3eac <system_board_init+0x48>)
    3e80:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3e82:	2101      	movs	r1, #1
    3e84:	2011      	movs	r0, #17
    3e86:	4b0a      	ldr	r3, [pc, #40]	; (3eb0 <system_board_init+0x4c>)
    3e88:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3e8a:	1d3b      	adds	r3, r7, #4
    3e8c:	2200      	movs	r2, #0
    3e8e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3e90:	1d3b      	adds	r3, r7, #4
    3e92:	2201      	movs	r2, #1
    3e94:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3e96:	1d3b      	adds	r3, r7, #4
    3e98:	0019      	movs	r1, r3
    3e9a:	200f      	movs	r0, #15
    3e9c:	4b03      	ldr	r3, [pc, #12]	; (3eac <system_board_init+0x48>)
    3e9e:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3ea0:	46c0      	nop			; (mov r8, r8)
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b002      	add	sp, #8
    3ea6:	bd80      	pop	{r7, pc}
    3ea8:	00003ded 	.word	0x00003ded
    3eac:	000044d9 	.word	0x000044d9
    3eb0:	00003e11 	.word	0x00003e11

00003eb4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b084      	sub	sp, #16
    3eb8:	af00      	add	r7, sp, #0
    3eba:	0002      	movs	r2, r0
    3ebc:	1dfb      	adds	r3, r7, #7
    3ebe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3ec0:	230f      	movs	r3, #15
    3ec2:	18fb      	adds	r3, r7, r3
    3ec4:	1dfa      	adds	r2, r7, #7
    3ec6:	7812      	ldrb	r2, [r2, #0]
    3ec8:	0952      	lsrs	r2, r2, #5
    3eca:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3ecc:	230f      	movs	r3, #15
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d10c      	bne.n	3ef0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3ed6:	4b09      	ldr	r3, [pc, #36]	; (3efc <_extint_get_eic_from_channel+0x48>)
    3ed8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3eda:	230f      	movs	r3, #15
    3edc:	18fb      	adds	r3, r7, r3
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	009b      	lsls	r3, r3, #2
    3ee2:	2210      	movs	r2, #16
    3ee4:	4694      	mov	ip, r2
    3ee6:	44bc      	add	ip, r7
    3ee8:	4463      	add	r3, ip
    3eea:	3b08      	subs	r3, #8
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	e000      	b.n	3ef2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3ef0:	2300      	movs	r3, #0
	}
}
    3ef2:	0018      	movs	r0, r3
    3ef4:	46bd      	mov	sp, r7
    3ef6:	b004      	add	sp, #16
    3ef8:	bd80      	pop	{r7, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	40001800 	.word	0x40001800

00003f00 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b084      	sub	sp, #16
    3f04:	af00      	add	r7, sp, #0
    3f06:	0002      	movs	r2, r0
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3f0c:	1dfb      	adds	r3, r7, #7
    3f0e:	781b      	ldrb	r3, [r3, #0]
    3f10:	0018      	movs	r0, r3
    3f12:	4b0b      	ldr	r3, [pc, #44]	; (3f40 <extint_chan_is_detected+0x40>)
    3f14:	4798      	blx	r3
    3f16:	0003      	movs	r3, r0
    3f18:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f1a:	1dfb      	adds	r3, r7, #7
    3f1c:	781b      	ldrb	r3, [r3, #0]
    3f1e:	221f      	movs	r2, #31
    3f20:	4013      	ands	r3, r2
    3f22:	2201      	movs	r2, #1
    3f24:	409a      	lsls	r2, r3
    3f26:	0013      	movs	r3, r2
    3f28:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3f2a:	68fb      	ldr	r3, [r7, #12]
    3f2c:	691b      	ldr	r3, [r3, #16]
    3f2e:	68ba      	ldr	r2, [r7, #8]
    3f30:	4013      	ands	r3, r2
    3f32:	1e5a      	subs	r2, r3, #1
    3f34:	4193      	sbcs	r3, r2
    3f36:	b2db      	uxtb	r3, r3
}
    3f38:	0018      	movs	r0, r3
    3f3a:	46bd      	mov	sp, r7
    3f3c:	b004      	add	sp, #16
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	00003eb5 	.word	0x00003eb5

00003f44 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b084      	sub	sp, #16
    3f48:	af00      	add	r7, sp, #0
    3f4a:	0002      	movs	r2, r0
    3f4c:	1dfb      	adds	r3, r7, #7
    3f4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3f50:	1dfb      	adds	r3, r7, #7
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	0018      	movs	r0, r3
    3f56:	4b09      	ldr	r3, [pc, #36]	; (3f7c <extint_chan_clear_detected+0x38>)
    3f58:	4798      	blx	r3
    3f5a:	0003      	movs	r3, r0
    3f5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f5e:	1dfb      	adds	r3, r7, #7
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	221f      	movs	r2, #31
    3f64:	4013      	ands	r3, r2
    3f66:	2201      	movs	r2, #1
    3f68:	409a      	lsls	r2, r3
    3f6a:	0013      	movs	r3, r2
    3f6c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3f6e:	68fb      	ldr	r3, [r7, #12]
    3f70:	68ba      	ldr	r2, [r7, #8]
    3f72:	611a      	str	r2, [r3, #16]
}
    3f74:	46c0      	nop			; (mov r8, r8)
    3f76:	46bd      	mov	sp, r7
    3f78:	b004      	add	sp, #16
    3f7a:	bd80      	pop	{r7, pc}
    3f7c:	00003eb5 	.word	0x00003eb5

00003f80 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3f80:	b580      	push	{r7, lr}
    3f82:	b082      	sub	sp, #8
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	0008      	movs	r0, r1
    3f8a:	0011      	movs	r1, r2
    3f8c:	1cfb      	adds	r3, r7, #3
    3f8e:	1c02      	adds	r2, r0, #0
    3f90:	701a      	strb	r2, [r3, #0]
    3f92:	1cbb      	adds	r3, r7, #2
    3f94:	1c0a      	adds	r2, r1, #0
    3f96:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3f98:	1cbb      	adds	r3, r7, #2
    3f9a:	781b      	ldrb	r3, [r3, #0]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d001      	beq.n	3fa4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3fa0:	2317      	movs	r3, #23
    3fa2:	e019      	b.n	3fd8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    3fa4:	1cfb      	adds	r3, r7, #3
    3fa6:	781a      	ldrb	r2, [r3, #0]
    3fa8:	4b0d      	ldr	r3, [pc, #52]	; (3fe0 <extint_register_callback+0x60>)
    3faa:	0092      	lsls	r2, r2, #2
    3fac:	58d3      	ldr	r3, [r2, r3]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d107      	bne.n	3fc2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    3fb2:	1cfb      	adds	r3, r7, #3
    3fb4:	781a      	ldrb	r2, [r3, #0]
    3fb6:	4b0a      	ldr	r3, [pc, #40]	; (3fe0 <extint_register_callback+0x60>)
    3fb8:	0092      	lsls	r2, r2, #2
    3fba:	6879      	ldr	r1, [r7, #4]
    3fbc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    3fbe:	2300      	movs	r3, #0
    3fc0:	e00a      	b.n	3fd8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3fc2:	1cfb      	adds	r3, r7, #3
    3fc4:	781a      	ldrb	r2, [r3, #0]
    3fc6:	4b06      	ldr	r3, [pc, #24]	; (3fe0 <extint_register_callback+0x60>)
    3fc8:	0092      	lsls	r2, r2, #2
    3fca:	58d2      	ldr	r2, [r2, r3]
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	429a      	cmp	r2, r3
    3fd0:	d101      	bne.n	3fd6 <extint_register_callback+0x56>
		return STATUS_OK;
    3fd2:	2300      	movs	r3, #0
    3fd4:	e000      	b.n	3fd8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3fd6:	231d      	movs	r3, #29
}
    3fd8:	0018      	movs	r0, r3
    3fda:	46bd      	mov	sp, r7
    3fdc:	b002      	add	sp, #8
    3fde:	bd80      	pop	{r7, pc}
    3fe0:	200002f4 	.word	0x200002f4

00003fe4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3fe4:	b580      	push	{r7, lr}
    3fe6:	b084      	sub	sp, #16
    3fe8:	af00      	add	r7, sp, #0
    3fea:	0002      	movs	r2, r0
    3fec:	1dfb      	adds	r3, r7, #7
    3fee:	701a      	strb	r2, [r3, #0]
    3ff0:	1dbb      	adds	r3, r7, #6
    3ff2:	1c0a      	adds	r2, r1, #0
    3ff4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3ff6:	1dbb      	adds	r3, r7, #6
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d10e      	bne.n	401c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3ffe:	1dfb      	adds	r3, r7, #7
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	0018      	movs	r0, r3
    4004:	4b08      	ldr	r3, [pc, #32]	; (4028 <extint_chan_enable_callback+0x44>)
    4006:	4798      	blx	r3
    4008:	0003      	movs	r3, r0
    400a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    400c:	1dfb      	adds	r3, r7, #7
    400e:	781b      	ldrb	r3, [r3, #0]
    4010:	2201      	movs	r2, #1
    4012:	409a      	lsls	r2, r3
    4014:	68fb      	ldr	r3, [r7, #12]
    4016:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4018:	2300      	movs	r3, #0
    401a:	e000      	b.n	401e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    401c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    401e:	0018      	movs	r0, r3
    4020:	46bd      	mov	sp, r7
    4022:	b004      	add	sp, #16
    4024:	bd80      	pop	{r7, pc}
    4026:	46c0      	nop			; (mov r8, r8)
    4028:	00003eb5 	.word	0x00003eb5

0000402c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    402c:	b580      	push	{r7, lr}
    402e:	b084      	sub	sp, #16
    4030:	af00      	add	r7, sp, #0
    4032:	0002      	movs	r2, r0
    4034:	1dfb      	adds	r3, r7, #7
    4036:	701a      	strb	r2, [r3, #0]
    4038:	1dbb      	adds	r3, r7, #6
    403a:	1c0a      	adds	r2, r1, #0
    403c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    403e:	1dbb      	adds	r3, r7, #6
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	2b00      	cmp	r3, #0
    4044:	d10e      	bne.n	4064 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4046:	1dfb      	adds	r3, r7, #7
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	0018      	movs	r0, r3
    404c:	4b08      	ldr	r3, [pc, #32]	; (4070 <extint_chan_disable_callback+0x44>)
    404e:	4798      	blx	r3
    4050:	0003      	movs	r3, r0
    4052:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4054:	1dfb      	adds	r3, r7, #7
    4056:	781b      	ldrb	r3, [r3, #0]
    4058:	2201      	movs	r2, #1
    405a:	409a      	lsls	r2, r3
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4060:	2300      	movs	r3, #0
    4062:	e000      	b.n	4066 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4064:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4066:	0018      	movs	r0, r3
    4068:	46bd      	mov	sp, r7
    406a:	b004      	add	sp, #16
    406c:	bd80      	pop	{r7, pc}
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	00003eb5 	.word	0x00003eb5

00004074 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4074:	b580      	push	{r7, lr}
    4076:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4078:	4b15      	ldr	r3, [pc, #84]	; (40d0 <EIC_Handler+0x5c>)
    407a:	2200      	movs	r2, #0
    407c:	701a      	strb	r2, [r3, #0]
    407e:	e020      	b.n	40c2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    4080:	4b13      	ldr	r3, [pc, #76]	; (40d0 <EIC_Handler+0x5c>)
    4082:	781b      	ldrb	r3, [r3, #0]
    4084:	0018      	movs	r0, r3
    4086:	4b13      	ldr	r3, [pc, #76]	; (40d4 <EIC_Handler+0x60>)
    4088:	4798      	blx	r3
    408a:	1e03      	subs	r3, r0, #0
    408c:	d013      	beq.n	40b6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    408e:	4b10      	ldr	r3, [pc, #64]	; (40d0 <EIC_Handler+0x5c>)
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	0018      	movs	r0, r3
    4094:	4b10      	ldr	r3, [pc, #64]	; (40d8 <EIC_Handler+0x64>)
    4096:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4098:	4b0d      	ldr	r3, [pc, #52]	; (40d0 <EIC_Handler+0x5c>)
    409a:	781b      	ldrb	r3, [r3, #0]
    409c:	001a      	movs	r2, r3
    409e:	4b0f      	ldr	r3, [pc, #60]	; (40dc <EIC_Handler+0x68>)
    40a0:	0092      	lsls	r2, r2, #2
    40a2:	58d3      	ldr	r3, [r2, r3]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d006      	beq.n	40b6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    40a8:	4b09      	ldr	r3, [pc, #36]	; (40d0 <EIC_Handler+0x5c>)
    40aa:	781b      	ldrb	r3, [r3, #0]
    40ac:	001a      	movs	r2, r3
    40ae:	4b0b      	ldr	r3, [pc, #44]	; (40dc <EIC_Handler+0x68>)
    40b0:	0092      	lsls	r2, r2, #2
    40b2:	58d3      	ldr	r3, [r2, r3]
    40b4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    40b6:	4b06      	ldr	r3, [pc, #24]	; (40d0 <EIC_Handler+0x5c>)
    40b8:	781b      	ldrb	r3, [r3, #0]
    40ba:	3301      	adds	r3, #1
    40bc:	b2da      	uxtb	r2, r3
    40be:	4b04      	ldr	r3, [pc, #16]	; (40d0 <EIC_Handler+0x5c>)
    40c0:	701a      	strb	r2, [r3, #0]
    40c2:	4b03      	ldr	r3, [pc, #12]	; (40d0 <EIC_Handler+0x5c>)
    40c4:	781b      	ldrb	r3, [r3, #0]
    40c6:	2b0f      	cmp	r3, #15
    40c8:	d9da      	bls.n	4080 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	46bd      	mov	sp, r7
    40ce:	bd80      	pop	{r7, pc}
    40d0:	200002f1 	.word	0x200002f1
    40d4:	00003f01 	.word	0x00003f01
    40d8:	00003f45 	.word	0x00003f45
    40dc:	200002f4 	.word	0x200002f4

000040e0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    40e0:	b580      	push	{r7, lr}
    40e2:	b082      	sub	sp, #8
    40e4:	af00      	add	r7, sp, #0
    40e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	2200      	movs	r2, #0
    40ec:	701a      	strb	r2, [r3, #0]
}
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	46bd      	mov	sp, r7
    40f2:	b002      	add	sp, #8
    40f4:	bd80      	pop	{r7, pc}
    40f6:	46c0      	nop			; (mov r8, r8)

000040f8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b082      	sub	sp, #8
    40fc:	af00      	add	r7, sp, #0
    40fe:	0002      	movs	r2, r0
    4100:	6039      	str	r1, [r7, #0]
    4102:	1dfb      	adds	r3, r7, #7
    4104:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	2b01      	cmp	r3, #1
    410c:	d00a      	beq.n	4124 <system_apb_clock_set_mask+0x2c>
    410e:	2b02      	cmp	r3, #2
    4110:	d00f      	beq.n	4132 <system_apb_clock_set_mask+0x3a>
    4112:	2b00      	cmp	r3, #0
    4114:	d114      	bne.n	4140 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4116:	4b0e      	ldr	r3, [pc, #56]	; (4150 <system_apb_clock_set_mask+0x58>)
    4118:	4a0d      	ldr	r2, [pc, #52]	; (4150 <system_apb_clock_set_mask+0x58>)
    411a:	6991      	ldr	r1, [r2, #24]
    411c:	683a      	ldr	r2, [r7, #0]
    411e:	430a      	orrs	r2, r1
    4120:	619a      	str	r2, [r3, #24]
			break;
    4122:	e00f      	b.n	4144 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4124:	4b0a      	ldr	r3, [pc, #40]	; (4150 <system_apb_clock_set_mask+0x58>)
    4126:	4a0a      	ldr	r2, [pc, #40]	; (4150 <system_apb_clock_set_mask+0x58>)
    4128:	69d1      	ldr	r1, [r2, #28]
    412a:	683a      	ldr	r2, [r7, #0]
    412c:	430a      	orrs	r2, r1
    412e:	61da      	str	r2, [r3, #28]
			break;
    4130:	e008      	b.n	4144 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4132:	4b07      	ldr	r3, [pc, #28]	; (4150 <system_apb_clock_set_mask+0x58>)
    4134:	4a06      	ldr	r2, [pc, #24]	; (4150 <system_apb_clock_set_mask+0x58>)
    4136:	6a11      	ldr	r1, [r2, #32]
    4138:	683a      	ldr	r2, [r7, #0]
    413a:	430a      	orrs	r2, r1
    413c:	621a      	str	r2, [r3, #32]
			break;
    413e:	e001      	b.n	4144 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4140:	2317      	movs	r3, #23
    4142:	e000      	b.n	4146 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4144:	2300      	movs	r3, #0
}
    4146:	0018      	movs	r0, r3
    4148:	46bd      	mov	sp, r7
    414a:	b002      	add	sp, #8
    414c:	bd80      	pop	{r7, pc}
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	40000400 	.word	0x40000400

00004154 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4154:	b580      	push	{r7, lr}
    4156:	b082      	sub	sp, #8
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	2280      	movs	r2, #128	; 0x80
    4160:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	2200      	movs	r2, #0
    4166:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	2201      	movs	r2, #1
    416c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	2200      	movs	r2, #0
    4172:	70da      	strb	r2, [r3, #3]
}
    4174:	46c0      	nop			; (mov r8, r8)
    4176:	46bd      	mov	sp, r7
    4178:	b002      	add	sp, #8
    417a:	bd80      	pop	{r7, pc}

0000417c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    417c:	b580      	push	{r7, lr}
    417e:	b082      	sub	sp, #8
    4180:	af00      	add	r7, sp, #0
    4182:	0002      	movs	r2, r0
    4184:	1dfb      	adds	r3, r7, #7
    4186:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4188:	4b06      	ldr	r3, [pc, #24]	; (41a4 <system_interrupt_enable+0x28>)
    418a:	1dfa      	adds	r2, r7, #7
    418c:	7812      	ldrb	r2, [r2, #0]
    418e:	0011      	movs	r1, r2
    4190:	221f      	movs	r2, #31
    4192:	400a      	ands	r2, r1
    4194:	2101      	movs	r1, #1
    4196:	4091      	lsls	r1, r2
    4198:	000a      	movs	r2, r1
    419a:	601a      	str	r2, [r3, #0]
}
    419c:	46c0      	nop			; (mov r8, r8)
    419e:	46bd      	mov	sp, r7
    41a0:	b002      	add	sp, #8
    41a2:	bd80      	pop	{r7, pc}
    41a4:	e000e100 	.word	0xe000e100

000041a8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b084      	sub	sp, #16
    41ac:	af00      	add	r7, sp, #0
    41ae:	0002      	movs	r2, r0
    41b0:	1dfb      	adds	r3, r7, #7
    41b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    41b4:	230f      	movs	r3, #15
    41b6:	18fb      	adds	r3, r7, r3
    41b8:	1dfa      	adds	r2, r7, #7
    41ba:	7812      	ldrb	r2, [r2, #0]
    41bc:	0952      	lsrs	r2, r2, #5
    41be:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    41c0:	230f      	movs	r3, #15
    41c2:	18fb      	adds	r3, r7, r3
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d10c      	bne.n	41e4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    41ca:	4b09      	ldr	r3, [pc, #36]	; (41f0 <_extint_get_eic_from_channel+0x48>)
    41cc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    41ce:	230f      	movs	r3, #15
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	009b      	lsls	r3, r3, #2
    41d6:	2210      	movs	r2, #16
    41d8:	4694      	mov	ip, r2
    41da:	44bc      	add	ip, r7
    41dc:	4463      	add	r3, ip
    41de:	3b08      	subs	r3, #8
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	e000      	b.n	41e6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    41e4:	2300      	movs	r3, #0
	}
}
    41e6:	0018      	movs	r0, r3
    41e8:	46bd      	mov	sp, r7
    41ea:	b004      	add	sp, #16
    41ec:	bd80      	pop	{r7, pc}
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	40001800 	.word	0x40001800

000041f4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b082      	sub	sp, #8
    41f8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    41fa:	4b0f      	ldr	r3, [pc, #60]	; (4238 <extint_is_syncing+0x44>)
    41fc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    41fe:	2300      	movs	r3, #0
    4200:	607b      	str	r3, [r7, #4]
    4202:	e011      	b.n	4228 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	009b      	lsls	r3, r3, #2
    4208:	2208      	movs	r2, #8
    420a:	4694      	mov	ip, r2
    420c:	44bc      	add	ip, r7
    420e:	4463      	add	r3, ip
    4210:	3b08      	subs	r3, #8
    4212:	681b      	ldr	r3, [r3, #0]
    4214:	785b      	ldrb	r3, [r3, #1]
    4216:	b2db      	uxtb	r3, r3
    4218:	b25b      	sxtb	r3, r3
    421a:	2b00      	cmp	r3, #0
    421c:	da01      	bge.n	4222 <extint_is_syncing+0x2e>
			return true;
    421e:	2301      	movs	r3, #1
    4220:	e006      	b.n	4230 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	3301      	adds	r3, #1
    4226:	607b      	str	r3, [r7, #4]
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	2b00      	cmp	r3, #0
    422c:	d0ea      	beq.n	4204 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    422e:	2300      	movs	r3, #0
}
    4230:	0018      	movs	r0, r3
    4232:	46bd      	mov	sp, r7
    4234:	b002      	add	sp, #8
    4236:	bd80      	pop	{r7, pc}
    4238:	40001800 	.word	0x40001800

0000423c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    423c:	b580      	push	{r7, lr}
    423e:	b084      	sub	sp, #16
    4240:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4242:	4b2d      	ldr	r3, [pc, #180]	; (42f8 <_system_extint_init+0xbc>)
    4244:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4246:	2140      	movs	r1, #64	; 0x40
    4248:	2000      	movs	r0, #0
    424a:	4b2c      	ldr	r3, [pc, #176]	; (42fc <_system_extint_init+0xc0>)
    424c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    424e:	003b      	movs	r3, r7
    4250:	0018      	movs	r0, r3
    4252:	4b2b      	ldr	r3, [pc, #172]	; (4300 <_system_extint_init+0xc4>)
    4254:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4256:	003b      	movs	r3, r7
    4258:	2200      	movs	r2, #0
    425a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    425c:	003b      	movs	r3, r7
    425e:	0019      	movs	r1, r3
    4260:	2005      	movs	r0, #5
    4262:	4b28      	ldr	r3, [pc, #160]	; (4304 <_system_extint_init+0xc8>)
    4264:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4266:	2005      	movs	r0, #5
    4268:	4b27      	ldr	r3, [pc, #156]	; (4308 <_system_extint_init+0xcc>)
    426a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    426c:	2300      	movs	r3, #0
    426e:	60fb      	str	r3, [r7, #12]
    4270:	e018      	b.n	42a4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	009b      	lsls	r3, r3, #2
    4276:	2210      	movs	r2, #16
    4278:	4694      	mov	ip, r2
    427a:	44bc      	add	ip, r7
    427c:	4463      	add	r3, ip
    427e:	3b0c      	subs	r3, #12
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	68fb      	ldr	r3, [r7, #12]
    4284:	009b      	lsls	r3, r3, #2
    4286:	2110      	movs	r1, #16
    4288:	468c      	mov	ip, r1
    428a:	44bc      	add	ip, r7
    428c:	4463      	add	r3, ip
    428e:	3b0c      	subs	r3, #12
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	781b      	ldrb	r3, [r3, #0]
    4294:	b2db      	uxtb	r3, r3
    4296:	2101      	movs	r1, #1
    4298:	430b      	orrs	r3, r1
    429a:	b2db      	uxtb	r3, r3
    429c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    429e:	68fb      	ldr	r3, [r7, #12]
    42a0:	3301      	adds	r3, #1
    42a2:	60fb      	str	r3, [r7, #12]
    42a4:	68fb      	ldr	r3, [r7, #12]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d0e3      	beq.n	4272 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    42aa:	46c0      	nop			; (mov r8, r8)
    42ac:	4b17      	ldr	r3, [pc, #92]	; (430c <_system_extint_init+0xd0>)
    42ae:	4798      	blx	r3
    42b0:	1e03      	subs	r3, r0, #0
    42b2:	d1fb      	bne.n	42ac <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    42b4:	230b      	movs	r3, #11
    42b6:	18fb      	adds	r3, r7, r3
    42b8:	2200      	movs	r2, #0
    42ba:	701a      	strb	r2, [r3, #0]
    42bc:	e00d      	b.n	42da <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    42be:	230b      	movs	r3, #11
    42c0:	18fb      	adds	r3, r7, r3
    42c2:	781a      	ldrb	r2, [r3, #0]
    42c4:	4b12      	ldr	r3, [pc, #72]	; (4310 <_system_extint_init+0xd4>)
    42c6:	0092      	lsls	r2, r2, #2
    42c8:	2100      	movs	r1, #0
    42ca:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    42cc:	230b      	movs	r3, #11
    42ce:	18fb      	adds	r3, r7, r3
    42d0:	781a      	ldrb	r2, [r3, #0]
    42d2:	230b      	movs	r3, #11
    42d4:	18fb      	adds	r3, r7, r3
    42d6:	3201      	adds	r2, #1
    42d8:	701a      	strb	r2, [r3, #0]
    42da:	230b      	movs	r3, #11
    42dc:	18fb      	adds	r3, r7, r3
    42de:	781b      	ldrb	r3, [r3, #0]
    42e0:	2b0f      	cmp	r3, #15
    42e2:	d9ec      	bls.n	42be <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    42e4:	2004      	movs	r0, #4
    42e6:	4b0b      	ldr	r3, [pc, #44]	; (4314 <_system_extint_init+0xd8>)
    42e8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    42ea:	4b0b      	ldr	r3, [pc, #44]	; (4318 <_system_extint_init+0xdc>)
    42ec:	4798      	blx	r3
}
    42ee:	46c0      	nop			; (mov r8, r8)
    42f0:	46bd      	mov	sp, r7
    42f2:	b004      	add	sp, #16
    42f4:	bd80      	pop	{r7, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	40001800 	.word	0x40001800
    42fc:	000040f9 	.word	0x000040f9
    4300:	000040e1 	.word	0x000040e1
    4304:	00004f99 	.word	0x00004f99
    4308:	00004fdd 	.word	0x00004fdd
    430c:	000041f5 	.word	0x000041f5
    4310:	200002f4 	.word	0x200002f4
    4314:	0000417d 	.word	0x0000417d
    4318:	0000431d 	.word	0x0000431d

0000431c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4322:	4b15      	ldr	r3, [pc, #84]	; (4378 <_extint_enable+0x5c>)
    4324:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4326:	2300      	movs	r3, #0
    4328:	607b      	str	r3, [r7, #4]
    432a:	e018      	b.n	435e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	009b      	lsls	r3, r3, #2
    4330:	2208      	movs	r2, #8
    4332:	4694      	mov	ip, r2
    4334:	44bc      	add	ip, r7
    4336:	4463      	add	r3, ip
    4338:	3b08      	subs	r3, #8
    433a:	681a      	ldr	r2, [r3, #0]
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	009b      	lsls	r3, r3, #2
    4340:	2108      	movs	r1, #8
    4342:	468c      	mov	ip, r1
    4344:	44bc      	add	ip, r7
    4346:	4463      	add	r3, ip
    4348:	3b08      	subs	r3, #8
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	781b      	ldrb	r3, [r3, #0]
    434e:	b2db      	uxtb	r3, r3
    4350:	2102      	movs	r1, #2
    4352:	430b      	orrs	r3, r1
    4354:	b2db      	uxtb	r3, r3
    4356:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	3301      	adds	r3, #1
    435c:	607b      	str	r3, [r7, #4]
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	2b00      	cmp	r3, #0
    4362:	d0e3      	beq.n	432c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4364:	46c0      	nop			; (mov r8, r8)
    4366:	4b05      	ldr	r3, [pc, #20]	; (437c <_extint_enable+0x60>)
    4368:	4798      	blx	r3
    436a:	1e03      	subs	r3, r0, #0
    436c:	d1fb      	bne.n	4366 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	46bd      	mov	sp, r7
    4372:	b002      	add	sp, #8
    4374:	bd80      	pop	{r7, pc}
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	40001800 	.word	0x40001800
    437c:	000041f5 	.word	0x000041f5

00004380 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4380:	b580      	push	{r7, lr}
    4382:	b082      	sub	sp, #8
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	2200      	movs	r2, #0
    438c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	2200      	movs	r2, #0
    4392:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	2201      	movs	r2, #1
    4398:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	2201      	movs	r2, #1
    439e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	2200      	movs	r2, #0
    43a4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	2202      	movs	r2, #2
    43aa:	72da      	strb	r2, [r3, #11]
}
    43ac:	46c0      	nop			; (mov r8, r8)
    43ae:	46bd      	mov	sp, r7
    43b0:	b002      	add	sp, #8
    43b2:	bd80      	pop	{r7, pc}

000043b4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    43b4:	b580      	push	{r7, lr}
    43b6:	b086      	sub	sp, #24
    43b8:	af00      	add	r7, sp, #0
    43ba:	0002      	movs	r2, r0
    43bc:	6039      	str	r1, [r7, #0]
    43be:	1dfb      	adds	r3, r7, #7
    43c0:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    43c2:	2308      	movs	r3, #8
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	0018      	movs	r0, r3
    43c8:	4b36      	ldr	r3, [pc, #216]	; (44a4 <extint_chan_set_config+0xf0>)
    43ca:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    43cc:	683b      	ldr	r3, [r7, #0]
    43ce:	685b      	ldr	r3, [r3, #4]
    43d0:	b2da      	uxtb	r2, r3
    43d2:	2308      	movs	r3, #8
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    43d8:	2308      	movs	r3, #8
    43da:	18fb      	adds	r3, r7, r3
    43dc:	2200      	movs	r2, #0
    43de:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    43e0:	683b      	ldr	r3, [r7, #0]
    43e2:	7a1a      	ldrb	r2, [r3, #8]
    43e4:	2308      	movs	r3, #8
    43e6:	18fb      	adds	r3, r7, r3
    43e8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    43ea:	683b      	ldr	r3, [r7, #0]
    43ec:	681b      	ldr	r3, [r3, #0]
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2b      	ldr	r3, [pc, #172]	; (44a8 <extint_chan_set_config+0xf4>)
    43fa:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    43fc:	1dfb      	adds	r3, r7, #7
    43fe:	781b      	ldrb	r3, [r3, #0]
    4400:	0018      	movs	r0, r3
    4402:	4b2a      	ldr	r3, [pc, #168]	; (44ac <extint_chan_set_config+0xf8>)
    4404:	4798      	blx	r3
    4406:	0003      	movs	r3, r0
    4408:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    440a:	1dfb      	adds	r3, r7, #7
    440c:	781b      	ldrb	r3, [r3, #0]
    440e:	2207      	movs	r2, #7
    4410:	4013      	ands	r3, r2
    4412:	009b      	lsls	r3, r3, #2
    4414:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	7adb      	ldrb	r3, [r3, #11]
    441a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    441c:	683b      	ldr	r3, [r7, #0]
    441e:	7a9b      	ldrb	r3, [r3, #10]
    4420:	2b00      	cmp	r3, #0
    4422:	d003      	beq.n	442c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    4424:	697b      	ldr	r3, [r7, #20]
    4426:	2208      	movs	r2, #8
    4428:	4313      	orrs	r3, r2
    442a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    442c:	1dfb      	adds	r3, r7, #7
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	08db      	lsrs	r3, r3, #3
    4432:	b2db      	uxtb	r3, r3
    4434:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    4436:	1dfb      	adds	r3, r7, #7
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	08db      	lsrs	r3, r3, #3
    443c:	b2db      	uxtb	r3, r3
    443e:	001a      	movs	r2, r3
    4440:	693b      	ldr	r3, [r7, #16]
    4442:	3206      	adds	r2, #6
    4444:	0092      	lsls	r2, r2, #2
    4446:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4448:	210f      	movs	r1, #15
    444a:	68fa      	ldr	r2, [r7, #12]
    444c:	4091      	lsls	r1, r2
    444e:	000a      	movs	r2, r1
    4450:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4452:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4454:	6979      	ldr	r1, [r7, #20]
    4456:	68fb      	ldr	r3, [r7, #12]
    4458:	4099      	lsls	r1, r3
    445a:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    445c:	431a      	orrs	r2, r3
    445e:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4460:	693b      	ldr	r3, [r7, #16]
    4462:	1d82      	adds	r2, r0, #6
    4464:	0092      	lsls	r2, r2, #2
    4466:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4468:	683b      	ldr	r3, [r7, #0]
    446a:	7a5b      	ldrb	r3, [r3, #9]
    446c:	2b00      	cmp	r3, #0
    446e:	d00a      	beq.n	4486 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4470:	693b      	ldr	r3, [r7, #16]
    4472:	695a      	ldr	r2, [r3, #20]
    4474:	1dfb      	adds	r3, r7, #7
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	2101      	movs	r1, #1
    447a:	4099      	lsls	r1, r3
    447c:	000b      	movs	r3, r1
    447e:	431a      	orrs	r2, r3
    4480:	693b      	ldr	r3, [r7, #16]
    4482:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    4484:	e00a      	b.n	449c <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4486:	693b      	ldr	r3, [r7, #16]
    4488:	695b      	ldr	r3, [r3, #20]
    448a:	1dfa      	adds	r2, r7, #7
    448c:	7812      	ldrb	r2, [r2, #0]
    448e:	2101      	movs	r1, #1
    4490:	4091      	lsls	r1, r2
    4492:	000a      	movs	r2, r1
    4494:	43d2      	mvns	r2, r2
    4496:	401a      	ands	r2, r3
    4498:	693b      	ldr	r3, [r7, #16]
    449a:	615a      	str	r2, [r3, #20]
	}
}
    449c:	46c0      	nop			; (mov r8, r8)
    449e:	46bd      	mov	sp, r7
    44a0:	b006      	add	sp, #24
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004155 	.word	0x00004155
    44a8:	00005285 	.word	0x00005285
    44ac:	000041a9 	.word	0x000041a9

000044b0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	2280      	movs	r2, #128	; 0x80
    44bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	2200      	movs	r2, #0
    44c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	2201      	movs	r2, #1
    44c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	2200      	movs	r2, #0
    44ce:	70da      	strb	r2, [r3, #3]
}
    44d0:	46c0      	nop			; (mov r8, r8)
    44d2:	46bd      	mov	sp, r7
    44d4:	b002      	add	sp, #8
    44d6:	bd80      	pop	{r7, pc}

000044d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b084      	sub	sp, #16
    44dc:	af00      	add	r7, sp, #0
    44de:	0002      	movs	r2, r0
    44e0:	6039      	str	r1, [r7, #0]
    44e2:	1dfb      	adds	r3, r7, #7
    44e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    44e6:	230c      	movs	r3, #12
    44e8:	18fb      	adds	r3, r7, r3
    44ea:	0018      	movs	r0, r3
    44ec:	4b10      	ldr	r3, [pc, #64]	; (4530 <port_pin_set_config+0x58>)
    44ee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    44f0:	230c      	movs	r3, #12
    44f2:	18fb      	adds	r3, r7, r3
    44f4:	2280      	movs	r2, #128	; 0x80
    44f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    44f8:	683b      	ldr	r3, [r7, #0]
    44fa:	781a      	ldrb	r2, [r3, #0]
    44fc:	230c      	movs	r3, #12
    44fe:	18fb      	adds	r3, r7, r3
    4500:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4502:	683b      	ldr	r3, [r7, #0]
    4504:	785a      	ldrb	r2, [r3, #1]
    4506:	230c      	movs	r3, #12
    4508:	18fb      	adds	r3, r7, r3
    450a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    450c:	683b      	ldr	r3, [r7, #0]
    450e:	789a      	ldrb	r2, [r3, #2]
    4510:	230c      	movs	r3, #12
    4512:	18fb      	adds	r3, r7, r3
    4514:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4516:	230c      	movs	r3, #12
    4518:	18fa      	adds	r2, r7, r3
    451a:	1dfb      	adds	r3, r7, #7
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	0011      	movs	r1, r2
    4520:	0018      	movs	r0, r3
    4522:	4b04      	ldr	r3, [pc, #16]	; (4534 <port_pin_set_config+0x5c>)
    4524:	4798      	blx	r3
}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	46bd      	mov	sp, r7
    452a:	b004      	add	sp, #16
    452c:	bd80      	pop	{r7, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000044b1 	.word	0x000044b1
    4534:	00005285 	.word	0x00005285

00004538 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4538:	b580      	push	{r7, lr}
    453a:	b082      	sub	sp, #8
    453c:	af00      	add	r7, sp, #0
    453e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	2201      	movs	r2, #1
    4544:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4546:	687b      	ldr	r3, [r7, #4]
    4548:	2200      	movs	r2, #0
    454a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	2206      	movs	r2, #6
    4550:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	2200      	movs	r2, #0
    4556:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	2200      	movs	r2, #0
    455c:	725a      	strb	r2, [r3, #9]
}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	46bd      	mov	sp, r7
    4562:	b002      	add	sp, #8
    4564:	bd80      	pop	{r7, pc}
    4566:	46c0      	nop			; (mov r8, r8)

00004568 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4568:	b580      	push	{r7, lr}
    456a:	b082      	sub	sp, #8
    456c:	af00      	add	r7, sp, #0
    456e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	2203      	movs	r2, #3
    4574:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	2200      	movs	r2, #0
    457a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	2201      	movs	r2, #1
    4580:	709a      	strb	r2, [r3, #2]
}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	46bd      	mov	sp, r7
    4586:	b002      	add	sp, #8
    4588:	bd80      	pop	{r7, pc}
    458a:	46c0      	nop			; (mov r8, r8)

0000458c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    458c:	b580      	push	{r7, lr}
    458e:	b082      	sub	sp, #8
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	2200      	movs	r2, #0
    4598:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	2200      	movs	r2, #0
    459e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	2200      	movs	r2, #0
    45a4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	2200      	movs	r2, #0
    45aa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	2200      	movs	r2, #0
    45b0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	2201      	movs	r2, #1
    45b6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    45b8:	687b      	ldr	r3, [r7, #4]
    45ba:	2207      	movs	r2, #7
    45bc:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	223f      	movs	r2, #63	; 0x3f
    45c2:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	2201      	movs	r2, #1
    45c8:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	2201      	movs	r2, #1
    45ce:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	2206      	movs	r2, #6
    45d4:	821a      	strh	r2, [r3, #16]
}
    45d6:	46c0      	nop			; (mov r8, r8)
    45d8:	46bd      	mov	sp, r7
    45da:	b002      	add	sp, #8
    45dc:	bd80      	pop	{r7, pc}
    45de:	46c0      	nop			; (mov r8, r8)

000045e0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    45e0:	b580      	push	{r7, lr}
    45e2:	b082      	sub	sp, #8
    45e4:	af00      	add	r7, sp, #0
    45e6:	0002      	movs	r2, r0
    45e8:	1dfb      	adds	r3, r7, #7
    45ea:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    45ec:	4a03      	ldr	r2, [pc, #12]	; (45fc <system_cpu_clock_set_divider+0x1c>)
    45ee:	1dfb      	adds	r3, r7, #7
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	7213      	strb	r3, [r2, #8]
}
    45f4:	46c0      	nop			; (mov r8, r8)
    45f6:	46bd      	mov	sp, r7
    45f8:	b002      	add	sp, #8
    45fa:	bd80      	pop	{r7, pc}
    45fc:	40000400 	.word	0x40000400

00004600 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4600:	b580      	push	{r7, lr}
    4602:	b082      	sub	sp, #8
    4604:	af00      	add	r7, sp, #0
    4606:	0002      	movs	r2, r0
    4608:	1dfb      	adds	r3, r7, #7
    460a:	701a      	strb	r2, [r3, #0]
    460c:	1dbb      	adds	r3, r7, #6
    460e:	1c0a      	adds	r2, r1, #0
    4610:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4612:	1dfb      	adds	r3, r7, #7
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	2b01      	cmp	r3, #1
    4618:	d008      	beq.n	462c <system_apb_clock_set_divider+0x2c>
    461a:	2b02      	cmp	r3, #2
    461c:	d00b      	beq.n	4636 <system_apb_clock_set_divider+0x36>
    461e:	2b00      	cmp	r3, #0
    4620:	d10e      	bne.n	4640 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4622:	4a0b      	ldr	r2, [pc, #44]	; (4650 <system_apb_clock_set_divider+0x50>)
    4624:	1dbb      	adds	r3, r7, #6
    4626:	781b      	ldrb	r3, [r3, #0]
    4628:	7253      	strb	r3, [r2, #9]
			break;
    462a:	e00b      	b.n	4644 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    462c:	4a08      	ldr	r2, [pc, #32]	; (4650 <system_apb_clock_set_divider+0x50>)
    462e:	1dbb      	adds	r3, r7, #6
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	7293      	strb	r3, [r2, #10]
			break;
    4634:	e006      	b.n	4644 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4636:	4a06      	ldr	r2, [pc, #24]	; (4650 <system_apb_clock_set_divider+0x50>)
    4638:	1dbb      	adds	r3, r7, #6
    463a:	781b      	ldrb	r3, [r3, #0]
    463c:	72d3      	strb	r3, [r2, #11]
			break;
    463e:	e001      	b.n	4644 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4640:	2317      	movs	r3, #23
    4642:	e000      	b.n	4646 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4644:	2300      	movs	r3, #0
}
    4646:	0018      	movs	r0, r3
    4648:	46bd      	mov	sp, r7
    464a:	b002      	add	sp, #8
    464c:	bd80      	pop	{r7, pc}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	40000400 	.word	0x40000400

00004654 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4654:	b580      	push	{r7, lr}
    4656:	b082      	sub	sp, #8
    4658:	af00      	add	r7, sp, #0
    465a:	0002      	movs	r2, r0
    465c:	1dfb      	adds	r3, r7, #7
    465e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4660:	4a08      	ldr	r2, [pc, #32]	; (4684 <system_flash_set_waitstates+0x30>)
    4662:	1dfb      	adds	r3, r7, #7
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	210f      	movs	r1, #15
    4668:	400b      	ands	r3, r1
    466a:	b2d9      	uxtb	r1, r3
    466c:	6853      	ldr	r3, [r2, #4]
    466e:	200f      	movs	r0, #15
    4670:	4001      	ands	r1, r0
    4672:	0049      	lsls	r1, r1, #1
    4674:	201e      	movs	r0, #30
    4676:	4383      	bics	r3, r0
    4678:	430b      	orrs	r3, r1
    467a:	6053      	str	r3, [r2, #4]
}
    467c:	46c0      	nop			; (mov r8, r8)
    467e:	46bd      	mov	sp, r7
    4680:	b002      	add	sp, #8
    4682:	bd80      	pop	{r7, pc}
    4684:	41004000 	.word	0x41004000

00004688 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4688:	b580      	push	{r7, lr}
    468a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    468c:	46c0      	nop			; (mov r8, r8)
    468e:	4b04      	ldr	r3, [pc, #16]	; (46a0 <_system_dfll_wait_for_sync+0x18>)
    4690:	68db      	ldr	r3, [r3, #12]
    4692:	2210      	movs	r2, #16
    4694:	4013      	ands	r3, r2
    4696:	d0fa      	beq.n	468e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4698:	46c0      	nop			; (mov r8, r8)
    469a:	46bd      	mov	sp, r7
    469c:	bd80      	pop	{r7, pc}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	40000800 	.word	0x40000800

000046a4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    46a4:	b580      	push	{r7, lr}
    46a6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    46a8:	4b0c      	ldr	r3, [pc, #48]	; (46dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    46aa:	2202      	movs	r2, #2
    46ac:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    46ae:	4b0c      	ldr	r3, [pc, #48]	; (46e0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    46b0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46b2:	4a0a      	ldr	r2, [pc, #40]	; (46dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    46b4:	4b0b      	ldr	r3, [pc, #44]	; (46e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    46b6:	689b      	ldr	r3, [r3, #8]
    46b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46ba:	4a08      	ldr	r2, [pc, #32]	; (46dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    46bc:	4b09      	ldr	r3, [pc, #36]	; (46e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    46be:	685b      	ldr	r3, [r3, #4]
    46c0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    46c2:	4b06      	ldr	r3, [pc, #24]	; (46dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    46c4:	2200      	movs	r2, #0
    46c6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    46c8:	4b05      	ldr	r3, [pc, #20]	; (46e0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    46ca:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46cc:	4a03      	ldr	r2, [pc, #12]	; (46dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    46ce:	4b05      	ldr	r3, [pc, #20]	; (46e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    46d0:	681b      	ldr	r3, [r3, #0]
    46d2:	b29b      	uxth	r3, r3
    46d4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	46bd      	mov	sp, r7
    46da:	bd80      	pop	{r7, pc}
    46dc:	40000800 	.word	0x40000800
    46e0:	00004689 	.word	0x00004689
    46e4:	200001c8 	.word	0x200001c8

000046e8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	b082      	sub	sp, #8
    46ec:	af00      	add	r7, sp, #0
    46ee:	0002      	movs	r2, r0
    46f0:	1dfb      	adds	r3, r7, #7
    46f2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    46f4:	1dfb      	adds	r3, r7, #7
    46f6:	781b      	ldrb	r3, [r3, #0]
    46f8:	2b08      	cmp	r3, #8
    46fa:	d847      	bhi.n	478c <system_clock_source_get_hz+0xa4>
    46fc:	009a      	lsls	r2, r3, #2
    46fe:	4b26      	ldr	r3, [pc, #152]	; (4798 <system_clock_source_get_hz+0xb0>)
    4700:	18d3      	adds	r3, r2, r3
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4706:	4b25      	ldr	r3, [pc, #148]	; (479c <system_clock_source_get_hz+0xb4>)
    4708:	691b      	ldr	r3, [r3, #16]
    470a:	e040      	b.n	478e <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    470c:	4b24      	ldr	r3, [pc, #144]	; (47a0 <system_clock_source_get_hz+0xb8>)
    470e:	6a1b      	ldr	r3, [r3, #32]
    4710:	059b      	lsls	r3, r3, #22
    4712:	0f9b      	lsrs	r3, r3, #30
    4714:	b2db      	uxtb	r3, r3
    4716:	001a      	movs	r2, r3
    4718:	4b22      	ldr	r3, [pc, #136]	; (47a4 <system_clock_source_get_hz+0xbc>)
    471a:	40d3      	lsrs	r3, r2
    471c:	e037      	b.n	478e <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    471e:	2380      	movs	r3, #128	; 0x80
    4720:	021b      	lsls	r3, r3, #8
    4722:	e034      	b.n	478e <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4724:	2380      	movs	r3, #128	; 0x80
    4726:	021b      	lsls	r3, r3, #8
    4728:	e031      	b.n	478e <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    472a:	4b1c      	ldr	r3, [pc, #112]	; (479c <system_clock_source_get_hz+0xb4>)
    472c:	695b      	ldr	r3, [r3, #20]
    472e:	e02e      	b.n	478e <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4730:	4b1a      	ldr	r3, [pc, #104]	; (479c <system_clock_source_get_hz+0xb4>)
    4732:	681b      	ldr	r3, [r3, #0]
    4734:	2202      	movs	r2, #2
    4736:	4013      	ands	r3, r2
    4738:	d101      	bne.n	473e <system_clock_source_get_hz+0x56>
			return 0;
    473a:	2300      	movs	r3, #0
    473c:	e027      	b.n	478e <system_clock_source_get_hz+0xa6>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    473e:	4b1a      	ldr	r3, [pc, #104]	; (47a8 <system_clock_source_get_hz+0xc0>)
    4740:	4798      	blx	r3

		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
    4742:	4b16      	ldr	r3, [pc, #88]	; (479c <system_clock_source_get_hz+0xb4>)
    4744:	681b      	ldr	r3, [r3, #0]
    4746:	2220      	movs	r2, #32
    4748:	4013      	ands	r3, r2
    474a:	d001      	beq.n	4750 <system_clock_source_get_hz+0x68>
			return 48000000UL;
    474c:	4b17      	ldr	r3, [pc, #92]	; (47ac <system_clock_source_get_hz+0xc4>)
    474e:	e01e      	b.n	478e <system_clock_source_get_hz+0xa6>

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4750:	4b12      	ldr	r3, [pc, #72]	; (479c <system_clock_source_get_hz+0xb4>)
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	2204      	movs	r2, #4
    4756:	4013      	ands	r3, r2
    4758:	d009      	beq.n	476e <system_clock_source_get_hz+0x86>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    475a:	2000      	movs	r0, #0
    475c:	4b14      	ldr	r3, [pc, #80]	; (47b0 <system_clock_source_get_hz+0xc8>)
    475e:	4798      	blx	r3
    4760:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4762:	4b0e      	ldr	r3, [pc, #56]	; (479c <system_clock_source_get_hz+0xb4>)
    4764:	689b      	ldr	r3, [r3, #8]
    4766:	041b      	lsls	r3, r3, #16
    4768:	0c1b      	lsrs	r3, r3, #16
		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
			return 48000000UL;

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    476a:	4353      	muls	r3, r2
    476c:	e00f      	b.n	478e <system_clock_source_get_hz+0xa6>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    476e:	4b0f      	ldr	r3, [pc, #60]	; (47ac <system_clock_source_get_hz+0xc4>)
    4770:	e00d      	b.n	478e <system_clock_source_get_hz+0xa6>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4772:	4a0b      	ldr	r2, [pc, #44]	; (47a0 <system_clock_source_get_hz+0xb8>)
    4774:	2350      	movs	r3, #80	; 0x50
    4776:	5cd3      	ldrb	r3, [r2, r3]
    4778:	b2db      	uxtb	r3, r3
    477a:	001a      	movs	r2, r3
    477c:	2304      	movs	r3, #4
    477e:	4013      	ands	r3, r2
    4780:	d101      	bne.n	4786 <system_clock_source_get_hz+0x9e>
			return 0;
    4782:	2300      	movs	r3, #0
    4784:	e003      	b.n	478e <system_clock_source_get_hz+0xa6>
		}

		return _system_clock_inst.dpll.frequency;
    4786:	4b05      	ldr	r3, [pc, #20]	; (479c <system_clock_source_get_hz+0xb4>)
    4788:	68db      	ldr	r3, [r3, #12]
    478a:	e000      	b.n	478e <system_clock_source_get_hz+0xa6>
#endif

	default:
		return 0;
    478c:	2300      	movs	r3, #0
	}
}
    478e:	0018      	movs	r0, r3
    4790:	46bd      	mov	sp, r7
    4792:	b002      	add	sp, #8
    4794:	bd80      	pop	{r7, pc}
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	00009058 	.word	0x00009058
    479c:	200001c8 	.word	0x200001c8
    47a0:	40000800 	.word	0x40000800
    47a4:	007a1200 	.word	0x007a1200
    47a8:	00004689 	.word	0x00004689
    47ac:	02dc6c00 	.word	0x02dc6c00
    47b0:	000050bd 	.word	0x000050bd

000047b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    47bc:	4b1a      	ldr	r3, [pc, #104]	; (4828 <system_clock_source_osc8m_set_config+0x74>)
    47be:	6a1b      	ldr	r3, [r3, #32]
    47c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	1c1a      	adds	r2, r3, #0
    47c8:	2303      	movs	r3, #3
    47ca:	4013      	ands	r3, r2
    47cc:	b2da      	uxtb	r2, r3
    47ce:	230d      	movs	r3, #13
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	2103      	movs	r1, #3
    47d4:	400a      	ands	r2, r1
    47d6:	0010      	movs	r0, r2
    47d8:	781a      	ldrb	r2, [r3, #0]
    47da:	2103      	movs	r1, #3
    47dc:	438a      	bics	r2, r1
    47de:	1c11      	adds	r1, r2, #0
    47e0:	1c02      	adds	r2, r0, #0
    47e2:	430a      	orrs	r2, r1
    47e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	789a      	ldrb	r2, [r3, #2]
    47ea:	230c      	movs	r3, #12
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	01d0      	lsls	r0, r2, #7
    47f0:	781a      	ldrb	r2, [r3, #0]
    47f2:	217f      	movs	r1, #127	; 0x7f
    47f4:	400a      	ands	r2, r1
    47f6:	1c11      	adds	r1, r2, #0
    47f8:	1c02      	adds	r2, r0, #0
    47fa:	430a      	orrs	r2, r1
    47fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    47fe:	687b      	ldr	r3, [r7, #4]
    4800:	785a      	ldrb	r2, [r3, #1]
    4802:	230c      	movs	r3, #12
    4804:	18fb      	adds	r3, r7, r3
    4806:	2101      	movs	r1, #1
    4808:	400a      	ands	r2, r1
    480a:	0190      	lsls	r0, r2, #6
    480c:	781a      	ldrb	r2, [r3, #0]
    480e:	2140      	movs	r1, #64	; 0x40
    4810:	438a      	bics	r2, r1
    4812:	1c11      	adds	r1, r2, #0
    4814:	1c02      	adds	r2, r0, #0
    4816:	430a      	orrs	r2, r1
    4818:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    481a:	4b03      	ldr	r3, [pc, #12]	; (4828 <system_clock_source_osc8m_set_config+0x74>)
    481c:	68fa      	ldr	r2, [r7, #12]
    481e:	621a      	str	r2, [r3, #32]
}
    4820:	46c0      	nop			; (mov r8, r8)
    4822:	46bd      	mov	sp, r7
    4824:	b004      	add	sp, #16
    4826:	bd80      	pop	{r7, pc}
    4828:	40000800 	.word	0x40000800

0000482c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    482c:	b580      	push	{r7, lr}
    482e:	b082      	sub	sp, #8
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	7a1b      	ldrb	r3, [r3, #8]
    4838:	029b      	lsls	r3, r3, #10
    483a:	041b      	lsls	r3, r3, #16
    483c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	895b      	ldrh	r3, [r3, #10]
    4842:	059b      	lsls	r3, r3, #22
    4844:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4846:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    4848:	4b2a      	ldr	r3, [pc, #168]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    484a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4854:	4313      	orrs	r3, r2
    4856:	b2db      	uxtb	r3, r3
    4858:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    485e:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4860:	687a      	ldr	r2, [r7, #4]
    4862:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4864:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	785b      	ldrb	r3, [r3, #1]
    486a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    486c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    486e:	4b21      	ldr	r3, [pc, #132]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    4870:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	781b      	ldrb	r3, [r3, #0]
    4876:	2b04      	cmp	r3, #4
    4878:	d116      	bne.n	48a8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	7b1b      	ldrb	r3, [r3, #12]
    487e:	069b      	lsls	r3, r3, #26
    4880:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	89db      	ldrh	r3, [r3, #14]
    4886:	041b      	lsls	r3, r3, #16
    4888:	0019      	movs	r1, r3
    488a:	4b1b      	ldr	r3, [pc, #108]	; (48f8 <system_clock_source_dfll_set_config+0xcc>)
    488c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    488e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4890:	687a      	ldr	r2, [r7, #4]
    4892:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4894:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4896:	4b17      	ldr	r3, [pc, #92]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    4898:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    489a:	4b16      	ldr	r3, [pc, #88]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    489c:	681b      	ldr	r3, [r3, #0]
    489e:	687a      	ldr	r2, [r7, #4]
    48a0:	7812      	ldrb	r2, [r2, #0]
    48a2:	431a      	orrs	r2, r3
    48a4:	4b13      	ldr	r3, [pc, #76]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    48a6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	781b      	ldrb	r3, [r3, #0]
    48ac:	2b20      	cmp	r3, #32
    48ae:	d11c      	bne.n	48ea <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	7b1b      	ldrb	r3, [r3, #12]
    48b4:	069b      	lsls	r3, r3, #26
    48b6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	89db      	ldrh	r3, [r3, #14]
    48bc:	041b      	lsls	r3, r3, #16
    48be:	0019      	movs	r1, r3
    48c0:	4b0d      	ldr	r3, [pc, #52]	; (48f8 <system_clock_source_dfll_set_config+0xcc>)
    48c2:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    48c4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    48c6:	687a      	ldr	r2, [r7, #4]
    48c8:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    48ca:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    48cc:	4b09      	ldr	r3, [pc, #36]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    48ce:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    48d0:	4b08      	ldr	r3, [pc, #32]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	687a      	ldr	r2, [r7, #4]
    48d6:	7812      	ldrb	r2, [r2, #0]
    48d8:	2104      	movs	r1, #4
    48da:	430a      	orrs	r2, r1
    48dc:	b2d2      	uxtb	r2, r2
    48de:	4313      	orrs	r3, r2
    48e0:	2280      	movs	r2, #128	; 0x80
    48e2:	00d2      	lsls	r2, r2, #3
    48e4:	431a      	orrs	r2, r3
    48e6:	4b03      	ldr	r3, [pc, #12]	; (48f4 <system_clock_source_dfll_set_config+0xc8>)
    48e8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	46bd      	mov	sp, r7
    48ee:	b002      	add	sp, #8
    48f0:	bd80      	pop	{r7, pc}
    48f2:	46c0      	nop			; (mov r8, r8)
    48f4:	200001c8 	.word	0x200001c8
    48f8:	03ff0000 	.word	0x03ff0000

000048fc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b082      	sub	sp, #8
    4900:	af00      	add	r7, sp, #0
    4902:	0002      	movs	r2, r0
    4904:	1dfb      	adds	r3, r7, #7
    4906:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4908:	1dfb      	adds	r3, r7, #7
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	2b08      	cmp	r3, #8
    490e:	d83b      	bhi.n	4988 <system_clock_source_enable+0x8c>
    4910:	009a      	lsls	r2, r3, #2
    4912:	4b21      	ldr	r3, [pc, #132]	; (4998 <system_clock_source_enable+0x9c>)
    4914:	18d3      	adds	r3, r2, r3
    4916:	681b      	ldr	r3, [r3, #0]
    4918:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    491a:	4b20      	ldr	r3, [pc, #128]	; (499c <system_clock_source_enable+0xa0>)
    491c:	4a1f      	ldr	r2, [pc, #124]	; (499c <system_clock_source_enable+0xa0>)
    491e:	6a12      	ldr	r2, [r2, #32]
    4920:	2102      	movs	r1, #2
    4922:	430a      	orrs	r2, r1
    4924:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4926:	2300      	movs	r3, #0
    4928:	e031      	b.n	498e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    492a:	4b1c      	ldr	r3, [pc, #112]	; (499c <system_clock_source_enable+0xa0>)
    492c:	4a1b      	ldr	r2, [pc, #108]	; (499c <system_clock_source_enable+0xa0>)
    492e:	6992      	ldr	r2, [r2, #24]
    4930:	2102      	movs	r1, #2
    4932:	430a      	orrs	r2, r1
    4934:	619a      	str	r2, [r3, #24]
		break;
    4936:	e029      	b.n	498c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4938:	4a18      	ldr	r2, [pc, #96]	; (499c <system_clock_source_enable+0xa0>)
    493a:	4b18      	ldr	r3, [pc, #96]	; (499c <system_clock_source_enable+0xa0>)
    493c:	8a1b      	ldrh	r3, [r3, #16]
    493e:	b29b      	uxth	r3, r3
    4940:	2102      	movs	r1, #2
    4942:	430b      	orrs	r3, r1
    4944:	b29b      	uxth	r3, r3
    4946:	8213      	strh	r3, [r2, #16]
		break;
    4948:	e020      	b.n	498c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    494a:	4a14      	ldr	r2, [pc, #80]	; (499c <system_clock_source_enable+0xa0>)
    494c:	4b13      	ldr	r3, [pc, #76]	; (499c <system_clock_source_enable+0xa0>)
    494e:	8a9b      	ldrh	r3, [r3, #20]
    4950:	b29b      	uxth	r3, r3
    4952:	2102      	movs	r1, #2
    4954:	430b      	orrs	r3, r1
    4956:	b29b      	uxth	r3, r3
    4958:	8293      	strh	r3, [r2, #20]
		break;
    495a:	e017      	b.n	498c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    495c:	4b10      	ldr	r3, [pc, #64]	; (49a0 <system_clock_source_enable+0xa4>)
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	2202      	movs	r2, #2
    4962:	431a      	orrs	r2, r3
    4964:	4b0e      	ldr	r3, [pc, #56]	; (49a0 <system_clock_source_enable+0xa4>)
    4966:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4968:	4b0e      	ldr	r3, [pc, #56]	; (49a4 <system_clock_source_enable+0xa8>)
    496a:	4798      	blx	r3
		break;
    496c:	e00e      	b.n	498c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    496e:	4a0b      	ldr	r2, [pc, #44]	; (499c <system_clock_source_enable+0xa0>)
    4970:	490a      	ldr	r1, [pc, #40]	; (499c <system_clock_source_enable+0xa0>)
    4972:	2344      	movs	r3, #68	; 0x44
    4974:	5ccb      	ldrb	r3, [r1, r3]
    4976:	b2db      	uxtb	r3, r3
    4978:	2102      	movs	r1, #2
    497a:	430b      	orrs	r3, r1
    497c:	b2d9      	uxtb	r1, r3
    497e:	2344      	movs	r3, #68	; 0x44
    4980:	54d1      	strb	r1, [r2, r3]
		break;
    4982:	e003      	b.n	498c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4984:	2300      	movs	r3, #0
    4986:	e002      	b.n	498e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4988:	2317      	movs	r3, #23
    498a:	e000      	b.n	498e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    498c:	2300      	movs	r3, #0
}
    498e:	0018      	movs	r0, r3
    4990:	46bd      	mov	sp, r7
    4992:	b002      	add	sp, #8
    4994:	bd80      	pop	{r7, pc}
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	0000907c 	.word	0x0000907c
    499c:	40000800 	.word	0x40000800
    49a0:	200001c8 	.word	0x200001c8
    49a4:	000046a5 	.word	0x000046a5

000049a8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
    49ae:	0002      	movs	r2, r0
    49b0:	1dfb      	adds	r3, r7, #7
    49b2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    49b4:	2300      	movs	r3, #0
    49b6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    49b8:	1dfb      	adds	r3, r7, #7
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	2b08      	cmp	r3, #8
    49be:	d821      	bhi.n	4a04 <system_clock_source_is_ready+0x5c>
    49c0:	009a      	lsls	r2, r3, #2
    49c2:	4b18      	ldr	r3, [pc, #96]	; (4a24 <system_clock_source_is_ready+0x7c>)
    49c4:	18d3      	adds	r3, r2, r3
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    49ca:	2308      	movs	r3, #8
    49cc:	60fb      	str	r3, [r7, #12]
		break;
    49ce:	e01b      	b.n	4a08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    49d0:	2304      	movs	r3, #4
    49d2:	60fb      	str	r3, [r7, #12]
		break;
    49d4:	e018      	b.n	4a08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    49d6:	2301      	movs	r3, #1
    49d8:	60fb      	str	r3, [r7, #12]
		break;
    49da:	e015      	b.n	4a08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    49dc:	2302      	movs	r3, #2
    49de:	60fb      	str	r3, [r7, #12]
		break;
    49e0:	e012      	b.n	4a08 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    49e2:	2310      	movs	r3, #16
    49e4:	60fb      	str	r3, [r7, #12]
		}
		break;
    49e6:	e00f      	b.n	4a08 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    49e8:	4a0f      	ldr	r2, [pc, #60]	; (4a28 <system_clock_source_is_ready+0x80>)
    49ea:	2350      	movs	r3, #80	; 0x50
    49ec:	5cd3      	ldrb	r3, [r2, r3]
    49ee:	b2db      	uxtb	r3, r3
    49f0:	001a      	movs	r2, r3
    49f2:	2303      	movs	r3, #3
    49f4:	4013      	ands	r3, r2
    49f6:	3b03      	subs	r3, #3
    49f8:	425a      	negs	r2, r3
    49fa:	4153      	adcs	r3, r2
    49fc:	b2db      	uxtb	r3, r3
    49fe:	e00c      	b.n	4a1a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4a00:	2301      	movs	r3, #1
    4a02:	e00a      	b.n	4a1a <system_clock_source_is_ready+0x72>

	default:
		return false;
    4a04:	2300      	movs	r3, #0
    4a06:	e008      	b.n	4a1a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4a08:	4b07      	ldr	r3, [pc, #28]	; (4a28 <system_clock_source_is_ready+0x80>)
    4a0a:	68db      	ldr	r3, [r3, #12]
    4a0c:	68fa      	ldr	r2, [r7, #12]
    4a0e:	401a      	ands	r2, r3
    4a10:	68fb      	ldr	r3, [r7, #12]
    4a12:	1ad3      	subs	r3, r2, r3
    4a14:	425a      	negs	r2, r3
    4a16:	4153      	adcs	r3, r2
    4a18:	b2db      	uxtb	r3, r3
}
    4a1a:	0018      	movs	r0, r3
    4a1c:	46bd      	mov	sp, r7
    4a1e:	b004      	add	sp, #16
    4a20:	bd80      	pop	{r7, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	000090a0 	.word	0x000090a0
    4a28:	40000800 	.word	0x40000800

00004a2c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b082      	sub	sp, #8
    4a30:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4a32:	003b      	movs	r3, r7
    4a34:	2202      	movs	r2, #2
    4a36:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4a38:	2300      	movs	r3, #0
    4a3a:	607b      	str	r3, [r7, #4]
    4a3c:	e009      	b.n	4a52 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4a3e:	687b      	ldr	r3, [r7, #4]
    4a40:	b2db      	uxtb	r3, r3
    4a42:	003a      	movs	r2, r7
    4a44:	0011      	movs	r1, r2
    4a46:	0018      	movs	r0, r3
    4a48:	4b05      	ldr	r3, [pc, #20]	; (4a60 <_switch_peripheral_gclk+0x34>)
    4a4a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	3301      	adds	r3, #1
    4a50:	607b      	str	r3, [r7, #4]
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	2b24      	cmp	r3, #36	; 0x24
    4a56:	d9f2      	bls.n	4a3e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4a58:	46c0      	nop			; (mov r8, r8)
    4a5a:	46bd      	mov	sp, r7
    4a5c:	b002      	add	sp, #8
    4a5e:	bd80      	pop	{r7, pc}
    4a60:	00004f99 	.word	0x00004f99

00004a64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4a64:	b580      	push	{r7, lr}
    4a66:	b0a6      	sub	sp, #152	; 0x98
    4a68:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4a6a:	4b6e      	ldr	r3, [pc, #440]	; (4c24 <system_clock_init+0x1c0>)
    4a6c:	22c2      	movs	r2, #194	; 0xc2
    4a6e:	00d2      	lsls	r2, r2, #3
    4a70:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4a72:	2002      	movs	r0, #2
    4a74:	4b6c      	ldr	r3, [pc, #432]	; (4c28 <system_clock_init+0x1c4>)
    4a76:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4a78:	4b6c      	ldr	r3, [pc, #432]	; (4c2c <system_clock_init+0x1c8>)
    4a7a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    4a7c:	2380      	movs	r3, #128	; 0x80
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	0018      	movs	r0, r3
    4a82:	4b6b      	ldr	r3, [pc, #428]	; (4c30 <system_clock_init+0x1cc>)
    4a84:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4a86:	2380      	movs	r3, #128	; 0x80
    4a88:	18fb      	adds	r3, r7, r3
    4a8a:	2220      	movs	r2, #32
    4a8c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    4a8e:	2380      	movs	r3, #128	; 0x80
    4a90:	18fb      	adds	r3, r7, r3
    4a92:	2200      	movs	r2, #0
    4a94:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4a96:	4b67      	ldr	r3, [pc, #412]	; (4c34 <system_clock_init+0x1d0>)
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	0e9b      	lsrs	r3, r3, #26
    4a9c:	2294      	movs	r2, #148	; 0x94
    4a9e:	18ba      	adds	r2, r7, r2
    4aa0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4aa2:	2394      	movs	r3, #148	; 0x94
    4aa4:	18fb      	adds	r3, r7, r3
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	2b3f      	cmp	r3, #63	; 0x3f
    4aaa:	d103      	bne.n	4ab4 <system_clock_init+0x50>
		coarse = 0x1f;
    4aac:	231f      	movs	r3, #31
    4aae:	2294      	movs	r2, #148	; 0x94
    4ab0:	18ba      	adds	r2, r7, r2
    4ab2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    4ab4:	2394      	movs	r3, #148	; 0x94
    4ab6:	18fb      	adds	r3, r7, r3
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	b2da      	uxtb	r2, r3
    4abc:	2380      	movs	r3, #128	; 0x80
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4ac2:	2380      	movs	r3, #128	; 0x80
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	2200      	movs	r2, #0
    4ac8:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4aca:	2380      	movs	r3, #128	; 0x80
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	2200      	movs	r2, #0
    4ad0:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4ad2:	2380      	movs	r3, #128	; 0x80
    4ad4:	18fb      	adds	r3, r7, r3
    4ad6:	2200      	movs	r2, #0
    4ad8:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4ada:	2380      	movs	r3, #128	; 0x80
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	2200      	movs	r2, #0
    4ae0:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4ae2:	2380      	movs	r3, #128	; 0x80
    4ae4:	18fb      	adds	r3, r7, r3
    4ae6:	2207      	movs	r2, #7
    4ae8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4aea:	2380      	movs	r3, #128	; 0x80
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	223f      	movs	r2, #63	; 0x3f
    4af0:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    4af2:	2380      	movs	r3, #128	; 0x80
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	220a      	movs	r2, #10
    4af8:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    4afa:	2380      	movs	r3, #128	; 0x80
    4afc:	18fb      	adds	r3, r7, r3
    4afe:	4a4e      	ldr	r2, [pc, #312]	; (4c38 <system_clock_init+0x1d4>)
    4b00:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4b02:	2380      	movs	r3, #128	; 0x80
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	2200      	movs	r2, #0
    4b08:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4b0a:	2380      	movs	r3, #128	; 0x80
    4b0c:	18fb      	adds	r3, r7, r3
    4b0e:	2200      	movs	r2, #0
    4b10:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4b12:	2380      	movs	r3, #128	; 0x80
    4b14:	18fb      	adds	r3, r7, r3
    4b16:	2200      	movs	r2, #0
    4b18:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    4b1a:	2380      	movs	r3, #128	; 0x80
    4b1c:	18fb      	adds	r3, r7, r3
    4b1e:	2280      	movs	r2, #128	; 0x80
    4b20:	0052      	lsls	r2, r2, #1
    4b22:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	18fb      	adds	r3, r7, r3
    4b28:	4a44      	ldr	r2, [pc, #272]	; (4c3c <system_clock_init+0x1d8>)
    4b2a:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4b2c:	2380      	movs	r3, #128	; 0x80
    4b2e:	18fb      	adds	r3, r7, r3
    4b30:	0018      	movs	r0, r3
    4b32:	4b43      	ldr	r3, [pc, #268]	; (4c40 <system_clock_init+0x1dc>)
    4b34:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4b36:	237c      	movs	r3, #124	; 0x7c
    4b38:	18fb      	adds	r3, r7, r3
    4b3a:	0018      	movs	r0, r3
    4b3c:	4b41      	ldr	r3, [pc, #260]	; (4c44 <system_clock_init+0x1e0>)
    4b3e:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4b40:	237c      	movs	r3, #124	; 0x7c
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	2200      	movs	r2, #0
    4b46:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4b48:	237c      	movs	r3, #124	; 0x7c
    4b4a:	18fb      	adds	r3, r7, r3
    4b4c:	2201      	movs	r2, #1
    4b4e:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4b50:	237c      	movs	r3, #124	; 0x7c
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	2200      	movs	r2, #0
    4b56:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4b58:	237c      	movs	r3, #124	; 0x7c
    4b5a:	18fb      	adds	r3, r7, r3
    4b5c:	0018      	movs	r0, r3
    4b5e:	4b3a      	ldr	r3, [pc, #232]	; (4c48 <system_clock_init+0x1e4>)
    4b60:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4b62:	2006      	movs	r0, #6
    4b64:	4b39      	ldr	r3, [pc, #228]	; (4c4c <system_clock_init+0x1e8>)
    4b66:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4b68:	4b39      	ldr	r3, [pc, #228]	; (4c50 <system_clock_init+0x1ec>)
    4b6a:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4b6c:	2364      	movs	r3, #100	; 0x64
    4b6e:	18fb      	adds	r3, r7, r3
    4b70:	0018      	movs	r0, r3
    4b72:	4b38      	ldr	r3, [pc, #224]	; (4c54 <system_clock_init+0x1f0>)
    4b74:	4798      	blx	r3
    4b76:	2364      	movs	r3, #100	; 0x64
    4b78:	18fb      	adds	r3, r7, r3
    4b7a:	2205      	movs	r2, #5
    4b7c:	701a      	strb	r2, [r3, #0]
    4b7e:	2364      	movs	r3, #100	; 0x64
    4b80:	18fb      	adds	r3, r7, r3
    4b82:	2201      	movs	r2, #1
    4b84:	605a      	str	r2, [r3, #4]
    4b86:	2364      	movs	r3, #100	; 0x64
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	2200      	movs	r2, #0
    4b8c:	721a      	strb	r2, [r3, #8]
    4b8e:	2364      	movs	r3, #100	; 0x64
    4b90:	18fb      	adds	r3, r7, r3
    4b92:	2200      	movs	r2, #0
    4b94:	725a      	strb	r2, [r3, #9]
    4b96:	2364      	movs	r3, #100	; 0x64
    4b98:	18fb      	adds	r3, r7, r3
    4b9a:	0019      	movs	r1, r3
    4b9c:	2001      	movs	r0, #1
    4b9e:	4b2e      	ldr	r3, [pc, #184]	; (4c58 <system_clock_init+0x1f4>)
    4ba0:	4798      	blx	r3
    4ba2:	2001      	movs	r0, #1
    4ba4:	4b2d      	ldr	r3, [pc, #180]	; (4c5c <system_clock_init+0x1f8>)
    4ba6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4ba8:	2007      	movs	r0, #7
    4baa:	4b28      	ldr	r3, [pc, #160]	; (4c4c <system_clock_init+0x1e8>)
    4bac:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	2007      	movs	r0, #7
    4bb2:	4b2b      	ldr	r3, [pc, #172]	; (4c60 <system_clock_init+0x1fc>)
    4bb4:	4798      	blx	r3
    4bb6:	0003      	movs	r3, r0
    4bb8:	001a      	movs	r2, r3
    4bba:	2301      	movs	r3, #1
    4bbc:	4053      	eors	r3, r2
    4bbe:	b2db      	uxtb	r3, r3
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d1f5      	bne.n	4bb0 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4bc4:	4a17      	ldr	r2, [pc, #92]	; (4c24 <system_clock_init+0x1c0>)
    4bc6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    4bc8:	2180      	movs	r1, #128	; 0x80
    4bca:	430b      	orrs	r3, r1
    4bcc:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4bce:	2000      	movs	r0, #0
    4bd0:	4b24      	ldr	r3, [pc, #144]	; (4c64 <system_clock_init+0x200>)
    4bd2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4bd4:	2100      	movs	r1, #0
    4bd6:	2000      	movs	r0, #0
    4bd8:	4b23      	ldr	r3, [pc, #140]	; (4c68 <system_clock_init+0x204>)
    4bda:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4bdc:	2100      	movs	r1, #0
    4bde:	2001      	movs	r0, #1
    4be0:	4b21      	ldr	r3, [pc, #132]	; (4c68 <system_clock_init+0x204>)
    4be2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4be4:	2100      	movs	r1, #0
    4be6:	2002      	movs	r0, #2
    4be8:	4b1f      	ldr	r3, [pc, #124]	; (4c68 <system_clock_init+0x204>)
    4bea:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4bec:	003b      	movs	r3, r7
    4bee:	0018      	movs	r0, r3
    4bf0:	4b18      	ldr	r3, [pc, #96]	; (4c54 <system_clock_init+0x1f0>)
    4bf2:	4798      	blx	r3
    4bf4:	003b      	movs	r3, r7
    4bf6:	2207      	movs	r2, #7
    4bf8:	701a      	strb	r2, [r3, #0]
    4bfa:	003b      	movs	r3, r7
    4bfc:	2201      	movs	r2, #1
    4bfe:	605a      	str	r2, [r3, #4]
    4c00:	003b      	movs	r3, r7
    4c02:	2201      	movs	r2, #1
    4c04:	721a      	strb	r2, [r3, #8]
    4c06:	003b      	movs	r3, r7
    4c08:	2200      	movs	r2, #0
    4c0a:	725a      	strb	r2, [r3, #9]
    4c0c:	003b      	movs	r3, r7
    4c0e:	0019      	movs	r1, r3
    4c10:	2000      	movs	r0, #0
    4c12:	4b11      	ldr	r3, [pc, #68]	; (4c58 <system_clock_init+0x1f4>)
    4c14:	4798      	blx	r3
    4c16:	2000      	movs	r0, #0
    4c18:	4b10      	ldr	r3, [pc, #64]	; (4c5c <system_clock_init+0x1f8>)
    4c1a:	4798      	blx	r3
#endif
}
    4c1c:	46c0      	nop			; (mov r8, r8)
    4c1e:	46bd      	mov	sp, r7
    4c20:	b026      	add	sp, #152	; 0x98
    4c22:	bd80      	pop	{r7, pc}
    4c24:	40000800 	.word	0x40000800
    4c28:	00004655 	.word	0x00004655
    4c2c:	00004a2d 	.word	0x00004a2d
    4c30:	0000458d 	.word	0x0000458d
    4c34:	00806024 	.word	0x00806024
    4c38:	000001ff 	.word	0x000001ff
    4c3c:	ffffbb80 	.word	0xffffbb80
    4c40:	0000482d 	.word	0x0000482d
    4c44:	00004569 	.word	0x00004569
    4c48:	000047b5 	.word	0x000047b5
    4c4c:	000048fd 	.word	0x000048fd
    4c50:	00004d11 	.word	0x00004d11
    4c54:	00004539 	.word	0x00004539
    4c58:	00004d41 	.word	0x00004d41
    4c5c:	00004e65 	.word	0x00004e65
    4c60:	000049a9 	.word	0x000049a9
    4c64:	000045e1 	.word	0x000045e1
    4c68:	00004601 	.word	0x00004601

00004c6c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b082      	sub	sp, #8
    4c70:	af00      	add	r7, sp, #0
    4c72:	0002      	movs	r2, r0
    4c74:	6039      	str	r1, [r7, #0]
    4c76:	1dfb      	adds	r3, r7, #7
    4c78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4c7a:	1dfb      	adds	r3, r7, #7
    4c7c:	781b      	ldrb	r3, [r3, #0]
    4c7e:	2b01      	cmp	r3, #1
    4c80:	d00a      	beq.n	4c98 <system_apb_clock_set_mask+0x2c>
    4c82:	2b02      	cmp	r3, #2
    4c84:	d00f      	beq.n	4ca6 <system_apb_clock_set_mask+0x3a>
    4c86:	2b00      	cmp	r3, #0
    4c88:	d114      	bne.n	4cb4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4c8a:	4b0e      	ldr	r3, [pc, #56]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4c8c:	4a0d      	ldr	r2, [pc, #52]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4c8e:	6991      	ldr	r1, [r2, #24]
    4c90:	683a      	ldr	r2, [r7, #0]
    4c92:	430a      	orrs	r2, r1
    4c94:	619a      	str	r2, [r3, #24]
			break;
    4c96:	e00f      	b.n	4cb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4c9a:	4a0a      	ldr	r2, [pc, #40]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4c9c:	69d1      	ldr	r1, [r2, #28]
    4c9e:	683a      	ldr	r2, [r7, #0]
    4ca0:	430a      	orrs	r2, r1
    4ca2:	61da      	str	r2, [r3, #28]
			break;
    4ca4:	e008      	b.n	4cb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4ca6:	4b07      	ldr	r3, [pc, #28]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4ca8:	4a06      	ldr	r2, [pc, #24]	; (4cc4 <system_apb_clock_set_mask+0x58>)
    4caa:	6a11      	ldr	r1, [r2, #32]
    4cac:	683a      	ldr	r2, [r7, #0]
    4cae:	430a      	orrs	r2, r1
    4cb0:	621a      	str	r2, [r3, #32]
			break;
    4cb2:	e001      	b.n	4cb8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4cb4:	2317      	movs	r3, #23
    4cb6:	e000      	b.n	4cba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4cb8:	2300      	movs	r3, #0
}
    4cba:	0018      	movs	r0, r3
    4cbc:	46bd      	mov	sp, r7
    4cbe:	b002      	add	sp, #8
    4cc0:	bd80      	pop	{r7, pc}
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	40000400 	.word	0x40000400

00004cc8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4ccc:	4b02      	ldr	r3, [pc, #8]	; (4cd8 <system_interrupt_enter_critical_section+0x10>)
    4cce:	4798      	blx	r3
}
    4cd0:	46c0      	nop			; (mov r8, r8)
    4cd2:	46bd      	mov	sp, r7
    4cd4:	bd80      	pop	{r7, pc}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	00003cd5 	.word	0x00003cd5

00004cdc <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4ce0:	4b02      	ldr	r3, [pc, #8]	; (4cec <system_interrupt_leave_critical_section+0x10>)
    4ce2:	4798      	blx	r3
}
    4ce4:	46c0      	nop			; (mov r8, r8)
    4ce6:	46bd      	mov	sp, r7
    4ce8:	bd80      	pop	{r7, pc}
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	00003d29 	.word	0x00003d29

00004cf0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4cf0:	b580      	push	{r7, lr}
    4cf2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4cf4:	4b05      	ldr	r3, [pc, #20]	; (4d0c <system_gclk_is_syncing+0x1c>)
    4cf6:	785b      	ldrb	r3, [r3, #1]
    4cf8:	b2db      	uxtb	r3, r3
    4cfa:	b25b      	sxtb	r3, r3
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	da01      	bge.n	4d04 <system_gclk_is_syncing+0x14>
		return true;
    4d00:	2301      	movs	r3, #1
    4d02:	e000      	b.n	4d06 <system_gclk_is_syncing+0x16>
	}

	return false;
    4d04:	2300      	movs	r3, #0
}
    4d06:	0018      	movs	r0, r3
    4d08:	46bd      	mov	sp, r7
    4d0a:	bd80      	pop	{r7, pc}
    4d0c:	40000c00 	.word	0x40000c00

00004d10 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4d10:	b580      	push	{r7, lr}
    4d12:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4d14:	2108      	movs	r1, #8
    4d16:	2000      	movs	r0, #0
    4d18:	4b07      	ldr	r3, [pc, #28]	; (4d38 <system_gclk_init+0x28>)
    4d1a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4d1c:	4b07      	ldr	r3, [pc, #28]	; (4d3c <system_gclk_init+0x2c>)
    4d1e:	2201      	movs	r2, #1
    4d20:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	4b05      	ldr	r3, [pc, #20]	; (4d3c <system_gclk_init+0x2c>)
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	b2db      	uxtb	r3, r3
    4d2a:	001a      	movs	r2, r3
    4d2c:	2301      	movs	r3, #1
    4d2e:	4013      	ands	r3, r2
    4d30:	d1f8      	bne.n	4d24 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	46bd      	mov	sp, r7
    4d36:	bd80      	pop	{r7, pc}
    4d38:	00004c6d 	.word	0x00004c6d
    4d3c:	40000c00 	.word	0x40000c00

00004d40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b086      	sub	sp, #24
    4d44:	af00      	add	r7, sp, #0
    4d46:	0002      	movs	r2, r0
    4d48:	6039      	str	r1, [r7, #0]
    4d4a:	1dfb      	adds	r3, r7, #7
    4d4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4d4e:	1dfb      	adds	r3, r7, #7
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4d54:	1dfb      	adds	r3, r7, #7
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4d5a:	683b      	ldr	r3, [r7, #0]
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	021b      	lsls	r3, r3, #8
    4d60:	001a      	movs	r2, r3
    4d62:	697b      	ldr	r3, [r7, #20]
    4d64:	4313      	orrs	r3, r2
    4d66:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	785b      	ldrb	r3, [r3, #1]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d004      	beq.n	4d7a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4d70:	697b      	ldr	r3, [r7, #20]
    4d72:	2280      	movs	r2, #128	; 0x80
    4d74:	02d2      	lsls	r2, r2, #11
    4d76:	4313      	orrs	r3, r2
    4d78:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4d7a:	683b      	ldr	r3, [r7, #0]
    4d7c:	7a5b      	ldrb	r3, [r3, #9]
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d004      	beq.n	4d8c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4d82:	697b      	ldr	r3, [r7, #20]
    4d84:	2280      	movs	r2, #128	; 0x80
    4d86:	0312      	lsls	r2, r2, #12
    4d88:	4313      	orrs	r3, r2
    4d8a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4d8c:	683b      	ldr	r3, [r7, #0]
    4d8e:	685b      	ldr	r3, [r3, #4]
    4d90:	2b01      	cmp	r3, #1
    4d92:	d92c      	bls.n	4dee <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4d94:	683b      	ldr	r3, [r7, #0]
    4d96:	685a      	ldr	r2, [r3, #4]
    4d98:	683b      	ldr	r3, [r7, #0]
    4d9a:	685b      	ldr	r3, [r3, #4]
    4d9c:	3b01      	subs	r3, #1
    4d9e:	4013      	ands	r3, r2
    4da0:	d11a      	bne.n	4dd8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4da2:	2300      	movs	r3, #0
    4da4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4da6:	2302      	movs	r3, #2
    4da8:	60bb      	str	r3, [r7, #8]
    4daa:	e005      	b.n	4db8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4dac:	68fb      	ldr	r3, [r7, #12]
    4dae:	3301      	adds	r3, #1
    4db0:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4db2:	68bb      	ldr	r3, [r7, #8]
    4db4:	005b      	lsls	r3, r3, #1
    4db6:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4db8:	683b      	ldr	r3, [r7, #0]
    4dba:	685a      	ldr	r2, [r3, #4]
    4dbc:	68bb      	ldr	r3, [r7, #8]
    4dbe:	429a      	cmp	r2, r3
    4dc0:	d8f4      	bhi.n	4dac <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4dc2:	68fb      	ldr	r3, [r7, #12]
    4dc4:	021b      	lsls	r3, r3, #8
    4dc6:	693a      	ldr	r2, [r7, #16]
    4dc8:	4313      	orrs	r3, r2
    4dca:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4dcc:	697b      	ldr	r3, [r7, #20]
    4dce:	2280      	movs	r2, #128	; 0x80
    4dd0:	0352      	lsls	r2, r2, #13
    4dd2:	4313      	orrs	r3, r2
    4dd4:	617b      	str	r3, [r7, #20]
    4dd6:	e00a      	b.n	4dee <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	685b      	ldr	r3, [r3, #4]
    4ddc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4dde:	693a      	ldr	r2, [r7, #16]
    4de0:	4313      	orrs	r3, r2
    4de2:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4de4:	697b      	ldr	r3, [r7, #20]
    4de6:	2280      	movs	r2, #128	; 0x80
    4de8:	0292      	lsls	r2, r2, #10
    4dea:	4313      	orrs	r3, r2
    4dec:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4dee:	683b      	ldr	r3, [r7, #0]
    4df0:	7a1b      	ldrb	r3, [r3, #8]
    4df2:	2b00      	cmp	r3, #0
    4df4:	d004      	beq.n	4e00 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4df6:	697b      	ldr	r3, [r7, #20]
    4df8:	2280      	movs	r2, #128	; 0x80
    4dfa:	0392      	lsls	r2, r2, #14
    4dfc:	4313      	orrs	r3, r2
    4dfe:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4e00:	46c0      	nop			; (mov r8, r8)
    4e02:	4b13      	ldr	r3, [pc, #76]	; (4e50 <system_gclk_gen_set_config+0x110>)
    4e04:	4798      	blx	r3
    4e06:	1e03      	subs	r3, r0, #0
    4e08:	d1fb      	bne.n	4e02 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4e0a:	4b12      	ldr	r3, [pc, #72]	; (4e54 <system_gclk_gen_set_config+0x114>)
    4e0c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4e0e:	4a12      	ldr	r2, [pc, #72]	; (4e58 <system_gclk_gen_set_config+0x118>)
    4e10:	1dfb      	adds	r3, r7, #7
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	4b0d      	ldr	r3, [pc, #52]	; (4e50 <system_gclk_gen_set_config+0x110>)
    4e1a:	4798      	blx	r3
    4e1c:	1e03      	subs	r3, r0, #0
    4e1e:	d1fb      	bne.n	4e18 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4e20:	4b0e      	ldr	r3, [pc, #56]	; (4e5c <system_gclk_gen_set_config+0x11c>)
    4e22:	693a      	ldr	r2, [r7, #16]
    4e24:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	4b09      	ldr	r3, [pc, #36]	; (4e50 <system_gclk_gen_set_config+0x110>)
    4e2a:	4798      	blx	r3
    4e2c:	1e03      	subs	r3, r0, #0
    4e2e:	d1fb      	bne.n	4e28 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4e30:	4b0a      	ldr	r3, [pc, #40]	; (4e5c <system_gclk_gen_set_config+0x11c>)
    4e32:	4a0a      	ldr	r2, [pc, #40]	; (4e5c <system_gclk_gen_set_config+0x11c>)
    4e34:	6851      	ldr	r1, [r2, #4]
    4e36:	2280      	movs	r2, #128	; 0x80
    4e38:	0252      	lsls	r2, r2, #9
    4e3a:	4011      	ands	r1, r2
    4e3c:	697a      	ldr	r2, [r7, #20]
    4e3e:	430a      	orrs	r2, r1
    4e40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4e42:	4b07      	ldr	r3, [pc, #28]	; (4e60 <system_gclk_gen_set_config+0x120>)
    4e44:	4798      	blx	r3
}
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	46bd      	mov	sp, r7
    4e4a:	b006      	add	sp, #24
    4e4c:	bd80      	pop	{r7, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	00004cf1 	.word	0x00004cf1
    4e54:	00004cc9 	.word	0x00004cc9
    4e58:	40000c08 	.word	0x40000c08
    4e5c:	40000c00 	.word	0x40000c00
    4e60:	00004cdd 	.word	0x00004cdd

00004e64 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4e64:	b580      	push	{r7, lr}
    4e66:	b082      	sub	sp, #8
    4e68:	af00      	add	r7, sp, #0
    4e6a:	0002      	movs	r2, r0
    4e6c:	1dfb      	adds	r3, r7, #7
    4e6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4e70:	46c0      	nop			; (mov r8, r8)
    4e72:	4b0e      	ldr	r3, [pc, #56]	; (4eac <system_gclk_gen_enable+0x48>)
    4e74:	4798      	blx	r3
    4e76:	1e03      	subs	r3, r0, #0
    4e78:	d1fb      	bne.n	4e72 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4e7a:	4b0d      	ldr	r3, [pc, #52]	; (4eb0 <system_gclk_gen_enable+0x4c>)
    4e7c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e7e:	4a0d      	ldr	r2, [pc, #52]	; (4eb4 <system_gclk_gen_enable+0x50>)
    4e80:	1dfb      	adds	r3, r7, #7
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4e86:	46c0      	nop			; (mov r8, r8)
    4e88:	4b08      	ldr	r3, [pc, #32]	; (4eac <system_gclk_gen_enable+0x48>)
    4e8a:	4798      	blx	r3
    4e8c:	1e03      	subs	r3, r0, #0
    4e8e:	d1fb      	bne.n	4e88 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4e90:	4b09      	ldr	r3, [pc, #36]	; (4eb8 <system_gclk_gen_enable+0x54>)
    4e92:	4a09      	ldr	r2, [pc, #36]	; (4eb8 <system_gclk_gen_enable+0x54>)
    4e94:	6852      	ldr	r2, [r2, #4]
    4e96:	2180      	movs	r1, #128	; 0x80
    4e98:	0249      	lsls	r1, r1, #9
    4e9a:	430a      	orrs	r2, r1
    4e9c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4e9e:	4b07      	ldr	r3, [pc, #28]	; (4ebc <system_gclk_gen_enable+0x58>)
    4ea0:	4798      	blx	r3
}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	46bd      	mov	sp, r7
    4ea6:	b002      	add	sp, #8
    4ea8:	bd80      	pop	{r7, pc}
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	00004cf1 	.word	0x00004cf1
    4eb0:	00004cc9 	.word	0x00004cc9
    4eb4:	40000c04 	.word	0x40000c04
    4eb8:	40000c00 	.word	0x40000c00
    4ebc:	00004cdd 	.word	0x00004cdd

00004ec0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b086      	sub	sp, #24
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	0002      	movs	r2, r0
    4ec8:	1dfb      	adds	r3, r7, #7
    4eca:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4ecc:	46c0      	nop			; (mov r8, r8)
    4ece:	4b2a      	ldr	r3, [pc, #168]	; (4f78 <system_gclk_gen_get_hz+0xb8>)
    4ed0:	4798      	blx	r3
    4ed2:	1e03      	subs	r3, r0, #0
    4ed4:	d1fb      	bne.n	4ece <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4ed6:	4b29      	ldr	r3, [pc, #164]	; (4f7c <system_gclk_gen_get_hz+0xbc>)
    4ed8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4eda:	4a29      	ldr	r2, [pc, #164]	; (4f80 <system_gclk_gen_get_hz+0xc0>)
    4edc:	1dfb      	adds	r3, r7, #7
    4ede:	781b      	ldrb	r3, [r3, #0]
    4ee0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4ee2:	46c0      	nop			; (mov r8, r8)
    4ee4:	4b24      	ldr	r3, [pc, #144]	; (4f78 <system_gclk_gen_get_hz+0xb8>)
    4ee6:	4798      	blx	r3
    4ee8:	1e03      	subs	r3, r0, #0
    4eea:	d1fb      	bne.n	4ee4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4eec:	4b25      	ldr	r3, [pc, #148]	; (4f84 <system_gclk_gen_get_hz+0xc4>)
    4eee:	685b      	ldr	r3, [r3, #4]
    4ef0:	04db      	lsls	r3, r3, #19
    4ef2:	0edb      	lsrs	r3, r3, #27
    4ef4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4ef6:	0018      	movs	r0, r3
    4ef8:	4b23      	ldr	r3, [pc, #140]	; (4f88 <system_gclk_gen_get_hz+0xc8>)
    4efa:	4798      	blx	r3
    4efc:	0003      	movs	r3, r0
    4efe:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4f00:	4a1f      	ldr	r2, [pc, #124]	; (4f80 <system_gclk_gen_get_hz+0xc0>)
    4f02:	1dfb      	adds	r3, r7, #7
    4f04:	781b      	ldrb	r3, [r3, #0]
    4f06:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4f08:	4b1e      	ldr	r3, [pc, #120]	; (4f84 <system_gclk_gen_get_hz+0xc4>)
    4f0a:	685b      	ldr	r3, [r3, #4]
    4f0c:	02db      	lsls	r3, r3, #11
    4f0e:	0fdb      	lsrs	r3, r3, #31
    4f10:	b2da      	uxtb	r2, r3
    4f12:	2313      	movs	r3, #19
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4f18:	4a1c      	ldr	r2, [pc, #112]	; (4f8c <system_gclk_gen_get_hz+0xcc>)
    4f1a:	1dfb      	adds	r3, r7, #7
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4f20:	46c0      	nop			; (mov r8, r8)
    4f22:	4b15      	ldr	r3, [pc, #84]	; (4f78 <system_gclk_gen_get_hz+0xb8>)
    4f24:	4798      	blx	r3
    4f26:	1e03      	subs	r3, r0, #0
    4f28:	d1fb      	bne.n	4f22 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4f2a:	4b16      	ldr	r3, [pc, #88]	; (4f84 <system_gclk_gen_get_hz+0xc4>)
    4f2c:	689b      	ldr	r3, [r3, #8]
    4f2e:	021b      	lsls	r3, r3, #8
    4f30:	0c1b      	lsrs	r3, r3, #16
    4f32:	b29b      	uxth	r3, r3
    4f34:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4f36:	4b16      	ldr	r3, [pc, #88]	; (4f90 <system_gclk_gen_get_hz+0xd0>)
    4f38:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4f3a:	2313      	movs	r3, #19
    4f3c:	18fb      	adds	r3, r7, r3
    4f3e:	781b      	ldrb	r3, [r3, #0]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d109      	bne.n	4f58 <system_gclk_gen_get_hz+0x98>
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	2b01      	cmp	r3, #1
    4f48:	d906      	bls.n	4f58 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4f4a:	4b12      	ldr	r3, [pc, #72]	; (4f94 <system_gclk_gen_get_hz+0xd4>)
    4f4c:	68f9      	ldr	r1, [r7, #12]
    4f4e:	6978      	ldr	r0, [r7, #20]
    4f50:	4798      	blx	r3
    4f52:	0003      	movs	r3, r0
    4f54:	617b      	str	r3, [r7, #20]
    4f56:	e00a      	b.n	4f6e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4f58:	2313      	movs	r3, #19
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	781b      	ldrb	r3, [r3, #0]
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d005      	beq.n	4f6e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	3301      	adds	r3, #1
    4f66:	697a      	ldr	r2, [r7, #20]
    4f68:	40da      	lsrs	r2, r3
    4f6a:	0013      	movs	r3, r2
    4f6c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4f6e:	697b      	ldr	r3, [r7, #20]
}
    4f70:	0018      	movs	r0, r3
    4f72:	46bd      	mov	sp, r7
    4f74:	b006      	add	sp, #24
    4f76:	bd80      	pop	{r7, pc}
    4f78:	00004cf1 	.word	0x00004cf1
    4f7c:	00004cc9 	.word	0x00004cc9
    4f80:	40000c04 	.word	0x40000c04
    4f84:	40000c00 	.word	0x40000c00
    4f88:	000046e9 	.word	0x000046e9
    4f8c:	40000c08 	.word	0x40000c08
    4f90:	00004cdd 	.word	0x00004cdd
    4f94:	00008c55 	.word	0x00008c55

00004f98 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4f98:	b580      	push	{r7, lr}
    4f9a:	b084      	sub	sp, #16
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	0002      	movs	r2, r0
    4fa0:	6039      	str	r1, [r7, #0]
    4fa2:	1dfb      	adds	r3, r7, #7
    4fa4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4fa6:	1dfb      	adds	r3, r7, #7
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4fac:	683b      	ldr	r3, [r7, #0]
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	021b      	lsls	r3, r3, #8
    4fb2:	001a      	movs	r2, r3
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	4313      	orrs	r3, r2
    4fb8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4fba:	1dfb      	adds	r3, r7, #7
    4fbc:	781b      	ldrb	r3, [r3, #0]
    4fbe:	0018      	movs	r0, r3
    4fc0:	4b04      	ldr	r3, [pc, #16]	; (4fd4 <system_gclk_chan_set_config+0x3c>)
    4fc2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4fc4:	4b04      	ldr	r3, [pc, #16]	; (4fd8 <system_gclk_chan_set_config+0x40>)
    4fc6:	68fa      	ldr	r2, [r7, #12]
    4fc8:	b292      	uxth	r2, r2
    4fca:	805a      	strh	r2, [r3, #2]
}
    4fcc:	46c0      	nop			; (mov r8, r8)
    4fce:	46bd      	mov	sp, r7
    4fd0:	b004      	add	sp, #16
    4fd2:	bd80      	pop	{r7, pc}
    4fd4:	00005025 	.word	0x00005025
    4fd8:	40000c00 	.word	0x40000c00

00004fdc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	0002      	movs	r2, r0
    4fe4:	1dfb      	adds	r3, r7, #7
    4fe6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4fe8:	4b0a      	ldr	r3, [pc, #40]	; (5014 <system_gclk_chan_enable+0x38>)
    4fea:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4fec:	4a0a      	ldr	r2, [pc, #40]	; (5018 <system_gclk_chan_enable+0x3c>)
    4fee:	1dfb      	adds	r3, r7, #7
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4ff4:	4909      	ldr	r1, [pc, #36]	; (501c <system_gclk_chan_enable+0x40>)
    4ff6:	4b09      	ldr	r3, [pc, #36]	; (501c <system_gclk_chan_enable+0x40>)
    4ff8:	885b      	ldrh	r3, [r3, #2]
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	2280      	movs	r2, #128	; 0x80
    4ffe:	01d2      	lsls	r2, r2, #7
    5000:	4313      	orrs	r3, r2
    5002:	b29b      	uxth	r3, r3
    5004:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5006:	4b06      	ldr	r3, [pc, #24]	; (5020 <system_gclk_chan_enable+0x44>)
    5008:	4798      	blx	r3
}
    500a:	46c0      	nop			; (mov r8, r8)
    500c:	46bd      	mov	sp, r7
    500e:	b002      	add	sp, #8
    5010:	bd80      	pop	{r7, pc}
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	00004cc9 	.word	0x00004cc9
    5018:	40000c02 	.word	0x40000c02
    501c:	40000c00 	.word	0x40000c00
    5020:	00004cdd 	.word	0x00004cdd

00005024 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5024:	b580      	push	{r7, lr}
    5026:	b084      	sub	sp, #16
    5028:	af00      	add	r7, sp, #0
    502a:	0002      	movs	r2, r0
    502c:	1dfb      	adds	r3, r7, #7
    502e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5030:	4b1c      	ldr	r3, [pc, #112]	; (50a4 <system_gclk_chan_disable+0x80>)
    5032:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5034:	4a1c      	ldr	r2, [pc, #112]	; (50a8 <system_gclk_chan_disable+0x84>)
    5036:	1dfb      	adds	r3, r7, #7
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    503c:	4b1b      	ldr	r3, [pc, #108]	; (50ac <system_gclk_chan_disable+0x88>)
    503e:	885b      	ldrh	r3, [r3, #2]
    5040:	051b      	lsls	r3, r3, #20
    5042:	0f1b      	lsrs	r3, r3, #28
    5044:	b2db      	uxtb	r3, r3
    5046:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5048:	4a18      	ldr	r2, [pc, #96]	; (50ac <system_gclk_chan_disable+0x88>)
    504a:	8853      	ldrh	r3, [r2, #2]
    504c:	4918      	ldr	r1, [pc, #96]	; (50b0 <system_gclk_chan_disable+0x8c>)
    504e:	400b      	ands	r3, r1
    5050:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5052:	4a16      	ldr	r2, [pc, #88]	; (50ac <system_gclk_chan_disable+0x88>)
    5054:	4b15      	ldr	r3, [pc, #84]	; (50ac <system_gclk_chan_disable+0x88>)
    5056:	885b      	ldrh	r3, [r3, #2]
    5058:	b29b      	uxth	r3, r3
    505a:	4916      	ldr	r1, [pc, #88]	; (50b4 <system_gclk_chan_disable+0x90>)
    505c:	400b      	ands	r3, r1
    505e:	b29b      	uxth	r3, r3
    5060:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	4b11      	ldr	r3, [pc, #68]	; (50ac <system_gclk_chan_disable+0x88>)
    5066:	885b      	ldrh	r3, [r3, #2]
    5068:	b29b      	uxth	r3, r3
    506a:	001a      	movs	r2, r3
    506c:	2380      	movs	r3, #128	; 0x80
    506e:	01db      	lsls	r3, r3, #7
    5070:	4013      	ands	r3, r2
    5072:	d1f7      	bne.n	5064 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5074:	4a0d      	ldr	r2, [pc, #52]	; (50ac <system_gclk_chan_disable+0x88>)
    5076:	68fb      	ldr	r3, [r7, #12]
    5078:	b2db      	uxtb	r3, r3
    507a:	1c19      	adds	r1, r3, #0
    507c:	230f      	movs	r3, #15
    507e:	400b      	ands	r3, r1
    5080:	b2d9      	uxtb	r1, r3
    5082:	8853      	ldrh	r3, [r2, #2]
    5084:	1c08      	adds	r0, r1, #0
    5086:	210f      	movs	r1, #15
    5088:	4001      	ands	r1, r0
    508a:	0208      	lsls	r0, r1, #8
    508c:	4908      	ldr	r1, [pc, #32]	; (50b0 <system_gclk_chan_disable+0x8c>)
    508e:	400b      	ands	r3, r1
    5090:	1c19      	adds	r1, r3, #0
    5092:	1c03      	adds	r3, r0, #0
    5094:	430b      	orrs	r3, r1
    5096:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5098:	4b07      	ldr	r3, [pc, #28]	; (50b8 <system_gclk_chan_disable+0x94>)
    509a:	4798      	blx	r3
}
    509c:	46c0      	nop			; (mov r8, r8)
    509e:	46bd      	mov	sp, r7
    50a0:	b004      	add	sp, #16
    50a2:	bd80      	pop	{r7, pc}
    50a4:	00004cc9 	.word	0x00004cc9
    50a8:	40000c02 	.word	0x40000c02
    50ac:	40000c00 	.word	0x40000c00
    50b0:	fffff0ff 	.word	0xfffff0ff
    50b4:	ffffbfff 	.word	0xffffbfff
    50b8:	00004cdd 	.word	0x00004cdd

000050bc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    50bc:	b580      	push	{r7, lr}
    50be:	b084      	sub	sp, #16
    50c0:	af00      	add	r7, sp, #0
    50c2:	0002      	movs	r2, r0
    50c4:	1dfb      	adds	r3, r7, #7
    50c6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    50c8:	4b0d      	ldr	r3, [pc, #52]	; (5100 <system_gclk_chan_get_hz+0x44>)
    50ca:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    50cc:	4a0d      	ldr	r2, [pc, #52]	; (5104 <system_gclk_chan_get_hz+0x48>)
    50ce:	1dfb      	adds	r3, r7, #7
    50d0:	781b      	ldrb	r3, [r3, #0]
    50d2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    50d4:	4b0c      	ldr	r3, [pc, #48]	; (5108 <system_gclk_chan_get_hz+0x4c>)
    50d6:	885b      	ldrh	r3, [r3, #2]
    50d8:	051b      	lsls	r3, r3, #20
    50da:	0f1b      	lsrs	r3, r3, #28
    50dc:	b2da      	uxtb	r2, r3
    50de:	230f      	movs	r3, #15
    50e0:	18fb      	adds	r3, r7, r3
    50e2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    50e4:	4b09      	ldr	r3, [pc, #36]	; (510c <system_gclk_chan_get_hz+0x50>)
    50e6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    50e8:	230f      	movs	r3, #15
    50ea:	18fb      	adds	r3, r7, r3
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	0018      	movs	r0, r3
    50f0:	4b07      	ldr	r3, [pc, #28]	; (5110 <system_gclk_chan_get_hz+0x54>)
    50f2:	4798      	blx	r3
    50f4:	0003      	movs	r3, r0
}
    50f6:	0018      	movs	r0, r3
    50f8:	46bd      	mov	sp, r7
    50fa:	b004      	add	sp, #16
    50fc:	bd80      	pop	{r7, pc}
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	00004cc9 	.word	0x00004cc9
    5104:	40000c02 	.word	0x40000c02
    5108:	40000c00 	.word	0x40000c00
    510c:	00004cdd 	.word	0x00004cdd
    5110:	00004ec1 	.word	0x00004ec1

00005114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5114:	b580      	push	{r7, lr}
    5116:	b084      	sub	sp, #16
    5118:	af00      	add	r7, sp, #0
    511a:	0002      	movs	r2, r0
    511c:	1dfb      	adds	r3, r7, #7
    511e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5120:	230f      	movs	r3, #15
    5122:	18fb      	adds	r3, r7, r3
    5124:	1dfa      	adds	r2, r7, #7
    5126:	7812      	ldrb	r2, [r2, #0]
    5128:	09d2      	lsrs	r2, r2, #7
    512a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    512c:	230e      	movs	r3, #14
    512e:	18fb      	adds	r3, r7, r3
    5130:	1dfa      	adds	r2, r7, #7
    5132:	7812      	ldrb	r2, [r2, #0]
    5134:	0952      	lsrs	r2, r2, #5
    5136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5138:	4b0d      	ldr	r3, [pc, #52]	; (5170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    513a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    513c:	230f      	movs	r3, #15
    513e:	18fb      	adds	r3, r7, r3
    5140:	781b      	ldrb	r3, [r3, #0]
    5142:	2b00      	cmp	r3, #0
    5144:	d10f      	bne.n	5166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5146:	230f      	movs	r3, #15
    5148:	18fb      	adds	r3, r7, r3
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	009b      	lsls	r3, r3, #2
    514e:	2210      	movs	r2, #16
    5150:	4694      	mov	ip, r2
    5152:	44bc      	add	ip, r7
    5154:	4463      	add	r3, ip
    5156:	3b08      	subs	r3, #8
    5158:	681a      	ldr	r2, [r3, #0]
    515a:	230e      	movs	r3, #14
    515c:	18fb      	adds	r3, r7, r3
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	01db      	lsls	r3, r3, #7
    5162:	18d3      	adds	r3, r2, r3
    5164:	e000      	b.n	5168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5166:	2300      	movs	r3, #0
	}
}
    5168:	0018      	movs	r0, r3
    516a:	46bd      	mov	sp, r7
    516c:	b004      	add	sp, #16
    516e:	bd80      	pop	{r7, pc}
    5170:	41004400 	.word	0x41004400

00005174 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5174:	b580      	push	{r7, lr}
    5176:	b088      	sub	sp, #32
    5178:	af00      	add	r7, sp, #0
    517a:	60f8      	str	r0, [r7, #12]
    517c:	60b9      	str	r1, [r7, #8]
    517e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5180:	2300      	movs	r3, #0
    5182:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	78db      	ldrb	r3, [r3, #3]
    5188:	2201      	movs	r2, #1
    518a:	4053      	eors	r3, r2
    518c:	b2db      	uxtb	r3, r3
    518e:	2b00      	cmp	r3, #0
    5190:	d035      	beq.n	51fe <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	781b      	ldrb	r3, [r3, #0]
    5196:	2b80      	cmp	r3, #128	; 0x80
    5198:	d00b      	beq.n	51b2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    519a:	69fb      	ldr	r3, [r7, #28]
    519c:	2280      	movs	r2, #128	; 0x80
    519e:	0252      	lsls	r2, r2, #9
    51a0:	4313      	orrs	r3, r2
    51a2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    51a4:	687b      	ldr	r3, [r7, #4]
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	061b      	lsls	r3, r3, #24
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	4313      	orrs	r3, r2
    51b0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	785b      	ldrb	r3, [r3, #1]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d003      	beq.n	51c2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    51be:	2b02      	cmp	r3, #2
    51c0:	d110      	bne.n	51e4 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    51c2:	69fb      	ldr	r3, [r7, #28]
    51c4:	2280      	movs	r2, #128	; 0x80
    51c6:	0292      	lsls	r2, r2, #10
    51c8:	4313      	orrs	r3, r2
    51ca:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	789b      	ldrb	r3, [r3, #2]
    51d0:	2b00      	cmp	r3, #0
    51d2:	d004      	beq.n	51de <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    51d4:	69fb      	ldr	r3, [r7, #28]
    51d6:	2280      	movs	r2, #128	; 0x80
    51d8:	02d2      	lsls	r2, r2, #11
    51da:	4313      	orrs	r3, r2
    51dc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	68ba      	ldr	r2, [r7, #8]
    51e2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	785b      	ldrb	r3, [r3, #1]
    51e8:	2b01      	cmp	r3, #1
    51ea:	d003      	beq.n	51f4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    51f0:	2b02      	cmp	r3, #2
    51f2:	d107      	bne.n	5204 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    51f4:	69fb      	ldr	r3, [r7, #28]
    51f6:	4a22      	ldr	r2, [pc, #136]	; (5280 <_system_pinmux_config+0x10c>)
    51f8:	4013      	ands	r3, r2
    51fa:	61fb      	str	r3, [r7, #28]
    51fc:	e002      	b.n	5204 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	68ba      	ldr	r2, [r7, #8]
    5202:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5204:	68bb      	ldr	r3, [r7, #8]
    5206:	041b      	lsls	r3, r3, #16
    5208:	0c1b      	lsrs	r3, r3, #16
    520a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    520c:	68bb      	ldr	r3, [r7, #8]
    520e:	0c1b      	lsrs	r3, r3, #16
    5210:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5212:	69ba      	ldr	r2, [r7, #24]
    5214:	69fb      	ldr	r3, [r7, #28]
    5216:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5218:	22a0      	movs	r2, #160	; 0xa0
    521a:	05d2      	lsls	r2, r2, #23
    521c:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    521e:	68fb      	ldr	r3, [r7, #12]
    5220:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5222:	697a      	ldr	r2, [r7, #20]
    5224:	69fb      	ldr	r3, [r7, #28]
    5226:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5228:	22d0      	movs	r2, #208	; 0xd0
    522a:	0612      	lsls	r2, r2, #24
    522c:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    522e:	68fb      	ldr	r3, [r7, #12]
    5230:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	78db      	ldrb	r3, [r3, #3]
    5236:	2201      	movs	r2, #1
    5238:	4053      	eors	r3, r2
    523a:	b2db      	uxtb	r3, r3
    523c:	2b00      	cmp	r3, #0
    523e:	d01a      	beq.n	5276 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5240:	69fa      	ldr	r2, [r7, #28]
    5242:	2380      	movs	r3, #128	; 0x80
    5244:	02db      	lsls	r3, r3, #11
    5246:	4013      	ands	r3, r2
    5248:	d00a      	beq.n	5260 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	789b      	ldrb	r3, [r3, #2]
    524e:	2b01      	cmp	r3, #1
    5250:	d103      	bne.n	525a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5252:	68fb      	ldr	r3, [r7, #12]
    5254:	68ba      	ldr	r2, [r7, #8]
    5256:	619a      	str	r2, [r3, #24]
    5258:	e002      	b.n	5260 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    525a:	68fb      	ldr	r3, [r7, #12]
    525c:	68ba      	ldr	r2, [r7, #8]
    525e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	785b      	ldrb	r3, [r3, #1]
    5264:	2b01      	cmp	r3, #1
    5266:	d003      	beq.n	5270 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    526c:	2b02      	cmp	r3, #2
    526e:	d102      	bne.n	5276 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5270:	68fb      	ldr	r3, [r7, #12]
    5272:	68ba      	ldr	r2, [r7, #8]
    5274:	609a      	str	r2, [r3, #8]
		}
	}
}
    5276:	46c0      	nop			; (mov r8, r8)
    5278:	46bd      	mov	sp, r7
    527a:	b008      	add	sp, #32
    527c:	bd80      	pop	{r7, pc}
    527e:	46c0      	nop			; (mov r8, r8)
    5280:	fffbffff 	.word	0xfffbffff

00005284 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5284:	b580      	push	{r7, lr}
    5286:	b084      	sub	sp, #16
    5288:	af00      	add	r7, sp, #0
    528a:	0002      	movs	r2, r0
    528c:	6039      	str	r1, [r7, #0]
    528e:	1dfb      	adds	r3, r7, #7
    5290:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5292:	1dfb      	adds	r3, r7, #7
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	0018      	movs	r0, r3
    5298:	4b0a      	ldr	r3, [pc, #40]	; (52c4 <system_pinmux_pin_set_config+0x40>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    52a0:	1dfb      	adds	r3, r7, #7
    52a2:	781b      	ldrb	r3, [r3, #0]
    52a4:	221f      	movs	r2, #31
    52a6:	4013      	ands	r3, r2
    52a8:	2201      	movs	r2, #1
    52aa:	409a      	lsls	r2, r3
    52ac:	0013      	movs	r3, r2
    52ae:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    52b0:	683a      	ldr	r2, [r7, #0]
    52b2:	68b9      	ldr	r1, [r7, #8]
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	0018      	movs	r0, r3
    52b8:	4b03      	ldr	r3, [pc, #12]	; (52c8 <system_pinmux_pin_set_config+0x44>)
    52ba:	4798      	blx	r3
}
    52bc:	46c0      	nop			; (mov r8, r8)
    52be:	46bd      	mov	sp, r7
    52c0:	b004      	add	sp, #16
    52c2:	bd80      	pop	{r7, pc}
    52c4:	00005115 	.word	0x00005115
    52c8:	00005175 	.word	0x00005175

000052cc <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    52cc:	b580      	push	{r7, lr}
    52ce:	af00      	add	r7, sp, #0
	return;
    52d0:	46c0      	nop			; (mov r8, r8)
}
    52d2:	46bd      	mov	sp, r7
    52d4:	bd80      	pop	{r7, pc}
    52d6:	46c0      	nop			; (mov r8, r8)

000052d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    52d8:	b580      	push	{r7, lr}
    52da:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    52dc:	4b06      	ldr	r3, [pc, #24]	; (52f8 <system_init+0x20>)
    52de:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    52e0:	4b06      	ldr	r3, [pc, #24]	; (52fc <system_init+0x24>)
    52e2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    52e4:	4b06      	ldr	r3, [pc, #24]	; (5300 <system_init+0x28>)
    52e6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    52e8:	4b06      	ldr	r3, [pc, #24]	; (5304 <system_init+0x2c>)
    52ea:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    52ec:	4b06      	ldr	r3, [pc, #24]	; (5308 <system_init+0x30>)
    52ee:	4798      	blx	r3
}
    52f0:	46c0      	nop			; (mov r8, r8)
    52f2:	46bd      	mov	sp, r7
    52f4:	bd80      	pop	{r7, pc}
    52f6:	46c0      	nop			; (mov r8, r8)
    52f8:	00004a65 	.word	0x00004a65
    52fc:	00003e65 	.word	0x00003e65
    5300:	000052cd 	.word	0x000052cd
    5304:	0000423d 	.word	0x0000423d
    5308:	000052cd 	.word	0x000052cd

0000530c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    530c:	b580      	push	{r7, lr}
    530e:	b082      	sub	sp, #8
    5310:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5312:	f3ef 8310 	mrs	r3, PRIMASK
    5316:	603b      	str	r3, [r7, #0]
  return(result);
    5318:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    531a:	425a      	negs	r2, r3
    531c:	4153      	adcs	r3, r2
    531e:	b2db      	uxtb	r3, r3
    5320:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5322:	b672      	cpsid	i
    5324:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5328:	4b03      	ldr	r3, [pc, #12]	; (5338 <cpu_irq_save+0x2c>)
    532a:	2200      	movs	r2, #0
    532c:	701a      	strb	r2, [r3, #0]
	return flags;
    532e:	687b      	ldr	r3, [r7, #4]
}
    5330:	0018      	movs	r0, r3
    5332:	46bd      	mov	sp, r7
    5334:	b002      	add	sp, #8
    5336:	bd80      	pop	{r7, pc}
    5338:	200000dc 	.word	0x200000dc

0000533c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    533c:	b580      	push	{r7, lr}
    533e:	b082      	sub	sp, #8
    5340:	af00      	add	r7, sp, #0
    5342:	6078      	str	r0, [r7, #4]
	return (flags);
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	1e5a      	subs	r2, r3, #1
    5348:	4193      	sbcs	r3, r2
    534a:	b2db      	uxtb	r3, r3
}
    534c:	0018      	movs	r0, r3
    534e:	46bd      	mov	sp, r7
    5350:	b002      	add	sp, #8
    5352:	bd80      	pop	{r7, pc}

00005354 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5354:	b580      	push	{r7, lr}
    5356:	b082      	sub	sp, #8
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	0018      	movs	r0, r3
    5360:	4b06      	ldr	r3, [pc, #24]	; (537c <cpu_irq_restore+0x28>)
    5362:	4798      	blx	r3
    5364:	1e03      	subs	r3, r0, #0
    5366:	d005      	beq.n	5374 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    5368:	4b05      	ldr	r3, [pc, #20]	; (5380 <cpu_irq_restore+0x2c>)
    536a:	2201      	movs	r2, #1
    536c:	701a      	strb	r2, [r3, #0]
    536e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5372:	b662      	cpsie	i
}
    5374:	46c0      	nop			; (mov r8, r8)
    5376:	46bd      	mov	sp, r7
    5378:	b002      	add	sp, #8
    537a:	bd80      	pop	{r7, pc}
    537c:	0000533d 	.word	0x0000533d
    5380:	200000dc 	.word	0x200000dc

00005384 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5384:	b580      	push	{r7, lr}
    5386:	b084      	sub	sp, #16
    5388:	af00      	add	r7, sp, #0
    538a:	0002      	movs	r2, r0
    538c:	1dfb      	adds	r3, r7, #7
    538e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5390:	230f      	movs	r3, #15
    5392:	18fb      	adds	r3, r7, r3
    5394:	1dfa      	adds	r2, r7, #7
    5396:	7812      	ldrb	r2, [r2, #0]
    5398:	09d2      	lsrs	r2, r2, #7
    539a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    539c:	230e      	movs	r3, #14
    539e:	18fb      	adds	r3, r7, r3
    53a0:	1dfa      	adds	r2, r7, #7
    53a2:	7812      	ldrb	r2, [r2, #0]
    53a4:	0952      	lsrs	r2, r2, #5
    53a6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    53a8:	4b0d      	ldr	r3, [pc, #52]	; (53e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    53aa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    53ac:	230f      	movs	r3, #15
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	2b00      	cmp	r3, #0
    53b4:	d10f      	bne.n	53d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    53b6:	230f      	movs	r3, #15
    53b8:	18fb      	adds	r3, r7, r3
    53ba:	781b      	ldrb	r3, [r3, #0]
    53bc:	009b      	lsls	r3, r3, #2
    53be:	2210      	movs	r2, #16
    53c0:	4694      	mov	ip, r2
    53c2:	44bc      	add	ip, r7
    53c4:	4463      	add	r3, ip
    53c6:	3b08      	subs	r3, #8
    53c8:	681a      	ldr	r2, [r3, #0]
    53ca:	230e      	movs	r3, #14
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	781b      	ldrb	r3, [r3, #0]
    53d0:	01db      	lsls	r3, r3, #7
    53d2:	18d3      	adds	r3, r2, r3
    53d4:	e000      	b.n	53d8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    53d6:	2300      	movs	r3, #0
	}
}
    53d8:	0018      	movs	r0, r3
    53da:	46bd      	mov	sp, r7
    53dc:	b004      	add	sp, #16
    53de:	bd80      	pop	{r7, pc}
    53e0:	41004400 	.word	0x41004400

000053e4 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b082      	sub	sp, #8
    53e8:	af00      	add	r7, sp, #0
    53ea:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	681a      	ldr	r2, [r3, #0]
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	891b      	ldrh	r3, [r3, #8]
    53f6:	b29b      	uxth	r3, r3
    53f8:	2101      	movs	r1, #1
    53fa:	438b      	bics	r3, r1
    53fc:	b29b      	uxth	r3, r3
    53fe:	8113      	strh	r3, [r2, #8]
}
    5400:	46c0      	nop			; (mov r8, r8)
    5402:	46bd      	mov	sp, r7
    5404:	b002      	add	sp, #8
    5406:	bd80      	pop	{r7, pc}

00005408 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    5408:	b580      	push	{r7, lr}
    540a:	b082      	sub	sp, #8
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	681a      	ldr	r2, [r3, #0]
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	891b      	ldrh	r3, [r3, #8]
    541a:	b29b      	uxth	r3, r3
    541c:	2101      	movs	r1, #1
    541e:	430b      	orrs	r3, r1
    5420:	b29b      	uxth	r3, r3
    5422:	8113      	strh	r3, [r2, #8]
}
    5424:	46c0      	nop			; (mov r8, r8)
    5426:	46bd      	mov	sp, r7
    5428:	b002      	add	sp, #8
    542a:	bd80      	pop	{r7, pc}

0000542c <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    542c:	b580      	push	{r7, lr}
    542e:	b082      	sub	sp, #8
    5430:	af00      	add	r7, sp, #0
    5432:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    5434:	687b      	ldr	r3, [r7, #4]
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	7a9b      	ldrb	r3, [r3, #10]
    543a:	065b      	lsls	r3, r3, #25
    543c:	0e5b      	lsrs	r3, r3, #25
    543e:	b2db      	uxtb	r3, r3
}
    5440:	0018      	movs	r0, r3
    5442:	46bd      	mov	sp, r7
    5444:	b002      	add	sp, #8
    5446:	bd80      	pop	{r7, pc}

00005448 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    5448:	b580      	push	{r7, lr}
    544a:	b082      	sub	sp, #8
    544c:	af00      	add	r7, sp, #0
    544e:	6078      	str	r0, [r7, #4]
    5450:	000a      	movs	r2, r1
    5452:	1cfb      	adds	r3, r7, #3
    5454:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	1cfa      	adds	r2, r7, #3
    545c:	7812      	ldrb	r2, [r2, #0]
    545e:	2180      	movs	r1, #128	; 0x80
    5460:	4249      	negs	r1, r1
    5462:	430a      	orrs	r2, r1
    5464:	b2d2      	uxtb	r2, r2
    5466:	729a      	strb	r2, [r3, #10]
}
    5468:	46c0      	nop			; (mov r8, r8)
    546a:	46bd      	mov	sp, r7
    546c:	b002      	add	sp, #8
    546e:	bd80      	pop	{r7, pc}

00005470 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    5470:	b580      	push	{r7, lr}
    5472:	b082      	sub	sp, #8
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	8a1b      	ldrh	r3, [r3, #16]
    547e:	049b      	lsls	r3, r3, #18
    5480:	0d5b      	lsrs	r3, r3, #21
    5482:	b29b      	uxth	r3, r3
}
    5484:	0018      	movs	r0, r3
    5486:	46bd      	mov	sp, r7
    5488:	b002      	add	sp, #8
    548a:	bd80      	pop	{r7, pc}

0000548c <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    548c:	b580      	push	{r7, lr}
    548e:	b082      	sub	sp, #8
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
    5494:	000a      	movs	r2, r1
    5496:	1cfb      	adds	r3, r7, #3
    5498:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	681a      	ldr	r2, [r3, #0]
    549e:	1cfb      	adds	r3, r7, #3
    54a0:	781b      	ldrb	r3, [r3, #0]
    54a2:	2103      	movs	r1, #3
    54a4:	400b      	ands	r3, r1
    54a6:	b2d9      	uxtb	r1, r3
    54a8:	8913      	ldrh	r3, [r2, #8]
    54aa:	1c08      	adds	r0, r1, #0
    54ac:	2103      	movs	r1, #3
    54ae:	4001      	ands	r1, r0
    54b0:	0288      	lsls	r0, r1, #10
    54b2:	4905      	ldr	r1, [pc, #20]	; (54c8 <usb_device_set_lpm_mode+0x3c>)
    54b4:	400b      	ands	r3, r1
    54b6:	1c19      	adds	r1, r3, #0
    54b8:	1c03      	adds	r3, r0, #0
    54ba:	430b      	orrs	r3, r1
    54bc:	8113      	strh	r3, [r2, #8]
}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	46bd      	mov	sp, r7
    54c2:	b002      	add	sp, #8
    54c4:	bd80      	pop	{r7, pc}
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	fffff3ff 	.word	0xfffff3ff

000054cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	af00      	add	r7, sp, #0
    54d2:	0002      	movs	r2, r0
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    54d8:	1dfb      	adds	r3, r7, #7
    54da:	781b      	ldrb	r3, [r3, #0]
    54dc:	0018      	movs	r0, r3
    54de:	4b03      	ldr	r3, [pc, #12]	; (54ec <port_get_group_from_gpio_pin+0x20>)
    54e0:	4798      	blx	r3
    54e2:	0003      	movs	r3, r0
}
    54e4:	0018      	movs	r0, r3
    54e6:	46bd      	mov	sp, r7
    54e8:	b002      	add	sp, #8
    54ea:	bd80      	pop	{r7, pc}
    54ec:	00005385 	.word	0x00005385

000054f0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	b084      	sub	sp, #16
    54f4:	af00      	add	r7, sp, #0
    54f6:	0002      	movs	r2, r0
    54f8:	1dfb      	adds	r3, r7, #7
    54fa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    54fc:	1dfb      	adds	r3, r7, #7
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	0018      	movs	r0, r3
    5502:	4b0b      	ldr	r3, [pc, #44]	; (5530 <port_pin_get_input_level+0x40>)
    5504:	4798      	blx	r3
    5506:	0003      	movs	r3, r0
    5508:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    550a:	1dfb      	adds	r3, r7, #7
    550c:	781b      	ldrb	r3, [r3, #0]
    550e:	221f      	movs	r2, #31
    5510:	4013      	ands	r3, r2
    5512:	2201      	movs	r2, #1
    5514:	409a      	lsls	r2, r3
    5516:	0013      	movs	r3, r2
    5518:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    551a:	68fb      	ldr	r3, [r7, #12]
    551c:	6a1b      	ldr	r3, [r3, #32]
    551e:	68ba      	ldr	r2, [r7, #8]
    5520:	4013      	ands	r3, r2
    5522:	1e5a      	subs	r2, r3, #1
    5524:	4193      	sbcs	r3, r2
    5526:	b2db      	uxtb	r3, r3
}
    5528:	0018      	movs	r0, r3
    552a:	46bd      	mov	sp, r7
    552c:	b004      	add	sp, #16
    552e:	bd80      	pop	{r7, pc}
    5530:	000054cd 	.word	0x000054cd

00005534 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    5534:	b580      	push	{r7, lr}
    5536:	b084      	sub	sp, #16
    5538:	af00      	add	r7, sp, #0
    553a:	0002      	movs	r2, r0
    553c:	1dfb      	adds	r3, r7, #7
    553e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    5540:	1dfb      	adds	r3, r7, #7
    5542:	781b      	ldrb	r3, [r3, #0]
    5544:	4a0c      	ldr	r2, [pc, #48]	; (5578 <sleepmgr_lock_mode+0x44>)
    5546:	5cd3      	ldrb	r3, [r2, r3]
    5548:	2bff      	cmp	r3, #255	; 0xff
    554a:	d100      	bne.n	554e <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    554c:	e7fe      	b.n	554c <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    554e:	4b0b      	ldr	r3, [pc, #44]	; (557c <sleepmgr_lock_mode+0x48>)
    5550:	4798      	blx	r3
    5552:	0003      	movs	r3, r0
    5554:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    5556:	1dfb      	adds	r3, r7, #7
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	4a07      	ldr	r2, [pc, #28]	; (5578 <sleepmgr_lock_mode+0x44>)
    555c:	5cd2      	ldrb	r2, [r2, r3]
    555e:	3201      	adds	r2, #1
    5560:	b2d1      	uxtb	r1, r2
    5562:	4a05      	ldr	r2, [pc, #20]	; (5578 <sleepmgr_lock_mode+0x44>)
    5564:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    5566:	68fb      	ldr	r3, [r7, #12]
    5568:	0018      	movs	r0, r3
    556a:	4b05      	ldr	r3, [pc, #20]	; (5580 <sleepmgr_lock_mode+0x4c>)
    556c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    556e:	46c0      	nop			; (mov r8, r8)
    5570:	46bd      	mov	sp, r7
    5572:	b004      	add	sp, #16
    5574:	bd80      	pop	{r7, pc}
    5576:	46c0      	nop			; (mov r8, r8)
    5578:	200002ec 	.word	0x200002ec
    557c:	0000530d 	.word	0x0000530d
    5580:	00005355 	.word	0x00005355

00005584 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    5584:	b580      	push	{r7, lr}
    5586:	b084      	sub	sp, #16
    5588:	af00      	add	r7, sp, #0
    558a:	0002      	movs	r2, r0
    558c:	1dfb      	adds	r3, r7, #7
    558e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    5590:	1dfb      	adds	r3, r7, #7
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	4a0c      	ldr	r2, [pc, #48]	; (55c8 <sleepmgr_unlock_mode+0x44>)
    5596:	5cd3      	ldrb	r3, [r2, r3]
    5598:	2b00      	cmp	r3, #0
    559a:	d100      	bne.n	559e <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    559c:	e7fe      	b.n	559c <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    559e:	4b0b      	ldr	r3, [pc, #44]	; (55cc <sleepmgr_unlock_mode+0x48>)
    55a0:	4798      	blx	r3
    55a2:	0003      	movs	r3, r0
    55a4:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    55a6:	1dfb      	adds	r3, r7, #7
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	4a07      	ldr	r2, [pc, #28]	; (55c8 <sleepmgr_unlock_mode+0x44>)
    55ac:	5cd2      	ldrb	r2, [r2, r3]
    55ae:	3a01      	subs	r2, #1
    55b0:	b2d1      	uxtb	r1, r2
    55b2:	4a05      	ldr	r2, [pc, #20]	; (55c8 <sleepmgr_unlock_mode+0x44>)
    55b4:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    55b6:	68fb      	ldr	r3, [r7, #12]
    55b8:	0018      	movs	r0, r3
    55ba:	4b05      	ldr	r3, [pc, #20]	; (55d0 <sleepmgr_unlock_mode+0x4c>)
    55bc:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    55be:	46c0      	nop			; (mov r8, r8)
    55c0:	46bd      	mov	sp, r7
    55c2:	b004      	add	sp, #16
    55c4:	bd80      	pop	{r7, pc}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	200002ec 	.word	0x200002ec
    55cc:	0000530d 	.word	0x0000530d
    55d0:	00005355 	.word	0x00005355

000055d4 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    55d8:	4b0b      	ldr	r3, [pc, #44]	; (5608 <udd_wait_clock_ready+0x34>)
    55da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    55dc:	b29b      	uxth	r3, r3
    55de:	001a      	movs	r2, r3
    55e0:	2320      	movs	r3, #32
    55e2:	4013      	ands	r3, r2
    55e4:	d107      	bne.n	55f6 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	4b07      	ldr	r3, [pc, #28]	; (5608 <udd_wait_clock_ready+0x34>)
    55ea:	68db      	ldr	r3, [r3, #12]
    55ec:	22d0      	movs	r2, #208	; 0xd0
    55ee:	4013      	ands	r3, r2
    55f0:	2bd0      	cmp	r3, #208	; 0xd0
    55f2:	d1f9      	bne.n	55e8 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    55f4:	e005      	b.n	5602 <udd_wait_clock_ready+0x2e>

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	4b03      	ldr	r3, [pc, #12]	; (5608 <udd_wait_clock_ready+0x34>)
    55fa:	68db      	ldr	r3, [r3, #12]
    55fc:	2210      	movs	r2, #16
    55fe:	4013      	ands	r3, r2
    5600:	d0fa      	beq.n	55f8 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    5602:	46c0      	nop			; (mov r8, r8)
    5604:	46bd      	mov	sp, r7
    5606:	bd80      	pop	{r7, pc}
    5608:	40000800 	.word	0x40000800

0000560c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    560c:	b580      	push	{r7, lr}
    560e:	b084      	sub	sp, #16
    5610:	af00      	add	r7, sp, #0
    5612:	0002      	movs	r2, r0
    5614:	1dfb      	adds	r3, r7, #7
    5616:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    5618:	230c      	movs	r3, #12
    561a:	18fa      	adds	r2, r7, r3
    561c:	4b17      	ldr	r3, [pc, #92]	; (567c <udd_sleep_mode+0x70>)
    561e:	0010      	movs	r0, r2
    5620:	0019      	movs	r1, r3
    5622:	2304      	movs	r3, #4
    5624:	001a      	movs	r2, r3
    5626:	4b16      	ldr	r3, [pc, #88]	; (5680 <udd_sleep_mode+0x74>)
    5628:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    562a:	4b16      	ldr	r3, [pc, #88]	; (5684 <udd_sleep_mode+0x78>)
    562c:	781b      	ldrb	r3, [r3, #0]
    562e:	1dfa      	adds	r2, r7, #7
    5630:	7812      	ldrb	r2, [r2, #0]
    5632:	429a      	cmp	r2, r3
    5634:	d01d      	beq.n	5672 <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    5636:	1dfb      	adds	r3, r7, #7
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	2b00      	cmp	r3, #0
    563c:	d007      	beq.n	564e <udd_sleep_mode+0x42>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    563e:	1dfb      	adds	r3, r7, #7
    5640:	781b      	ldrb	r3, [r3, #0]
    5642:	220c      	movs	r2, #12
    5644:	18ba      	adds	r2, r7, r2
    5646:	5cd3      	ldrb	r3, [r2, r3]
    5648:	0018      	movs	r0, r3
    564a:	4b0f      	ldr	r3, [pc, #60]	; (5688 <udd_sleep_mode+0x7c>)
    564c:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    564e:	4b0d      	ldr	r3, [pc, #52]	; (5684 <udd_sleep_mode+0x78>)
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	2b00      	cmp	r3, #0
    5654:	d008      	beq.n	5668 <udd_sleep_mode+0x5c>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    5656:	4b0b      	ldr	r3, [pc, #44]	; (5684 <udd_sleep_mode+0x78>)
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	001a      	movs	r2, r3
    565c:	230c      	movs	r3, #12
    565e:	18fb      	adds	r3, r7, r3
    5660:	5c9b      	ldrb	r3, [r3, r2]
    5662:	0018      	movs	r0, r3
    5664:	4b09      	ldr	r3, [pc, #36]	; (568c <udd_sleep_mode+0x80>)
    5666:	4798      	blx	r3
	}
	udd_state = new_state;
    5668:	4b06      	ldr	r3, [pc, #24]	; (5684 <udd_sleep_mode+0x78>)
    566a:	1dfa      	adds	r2, r7, #7
    566c:	7812      	ldrb	r2, [r2, #0]
    566e:	701a      	strb	r2, [r3, #0]
    5670:	e000      	b.n	5674 <udd_sleep_mode+0x68>
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
		return; // No change
    5672:	46c0      	nop			; (mov r8, r8)
	if (udd_state != UDD_STATE_OFF) {
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
}
    5674:	46bd      	mov	sp, r7
    5676:	b004      	add	sp, #16
    5678:	bd80      	pop	{r7, pc}
    567a:	46c0      	nop			; (mov r8, r8)
    567c:	000090c4 	.word	0x000090c4
    5680:	00008fcd 	.word	0x00008fcd
    5684:	20000210 	.word	0x20000210
    5688:	00005535 	.word	0x00005535
    568c:	00005585 	.word	0x00005585

00005690 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    5690:	b580      	push	{r7, lr}
    5692:	b082      	sub	sp, #8
    5694:	af00      	add	r7, sp, #0
    5696:	0002      	movs	r2, r0
    5698:	1dfb      	adds	r3, r7, #7
    569a:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    569c:	1dfb      	adds	r3, r7, #7
    569e:	781b      	ldrb	r3, [r3, #0]
    56a0:	220f      	movs	r2, #15
    56a2:	4013      	ands	r3, r2
    56a4:	005b      	lsls	r3, r3, #1
    56a6:	1dfa      	adds	r2, r7, #7
    56a8:	7812      	ldrb	r2, [r2, #0]
    56aa:	b252      	sxtb	r2, r2
    56ac:	b2d2      	uxtb	r2, r2
    56ae:	09d2      	lsrs	r2, r2, #7
    56b0:	b2d2      	uxtb	r2, r2
    56b2:	189b      	adds	r3, r3, r2
    56b4:	1e9a      	subs	r2, r3, #2
    56b6:	0013      	movs	r3, r2
    56b8:	009b      	lsls	r3, r3, #2
    56ba:	189b      	adds	r3, r3, r2
    56bc:	009b      	lsls	r3, r3, #2
    56be:	4a03      	ldr	r2, [pc, #12]	; (56cc <udd_ep_get_job+0x3c>)
    56c0:	189b      	adds	r3, r3, r2
}
    56c2:	0018      	movs	r0, r3
    56c4:	46bd      	mov	sp, r7
    56c6:	b002      	add	sp, #8
    56c8:	bd80      	pop	{r7, pc}
    56ca:	46c0      	nop			; (mov r8, r8)
    56cc:	200001e8 	.word	0x200001e8

000056d0 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    56d0:	b590      	push	{r4, r7, lr}
    56d2:	b089      	sub	sp, #36	; 0x24
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    56dc:	2317      	movs	r3, #23
    56de:	18fb      	adds	r3, r7, r3
    56e0:	69ba      	ldr	r2, [r7, #24]
    56e2:	7992      	ldrb	r2, [r2, #6]
    56e4:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    56e6:	2317      	movs	r3, #23
    56e8:	18fb      	adds	r3, r7, r3
    56ea:	781b      	ldrb	r3, [r3, #0]
    56ec:	0018      	movs	r0, r3
    56ee:	4b54      	ldr	r3, [pc, #336]	; (5840 <udd_ep_trans_in_next+0x170>)
    56f0:	4798      	blx	r3
    56f2:	0003      	movs	r3, r0
    56f4:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    56f6:	230f      	movs	r3, #15
    56f8:	18fb      	adds	r3, r7, r3
    56fa:	2217      	movs	r2, #23
    56fc:	18ba      	adds	r2, r7, r2
    56fe:	7812      	ldrb	r2, [r2, #0]
    5700:	210f      	movs	r1, #15
    5702:	400a      	ands	r2, r1
    5704:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    5706:	230c      	movs	r3, #12
    5708:	18fb      	adds	r3, r7, r3
    570a:	693a      	ldr	r2, [r7, #16]
    570c:	8a12      	ldrh	r2, [r2, #16]
    570e:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    5710:	230a      	movs	r3, #10
    5712:	18fb      	adds	r3, r7, r3
    5714:	69ba      	ldr	r2, [r7, #24]
    5716:	8852      	ldrh	r2, [r2, #2]
    5718:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    571a:	693b      	ldr	r3, [r7, #16]
    571c:	68da      	ldr	r2, [r3, #12]
    571e:	230a      	movs	r3, #10
    5720:	18fb      	adds	r3, r7, r3
    5722:	881b      	ldrh	r3, [r3, #0]
    5724:	18d2      	adds	r2, r2, r3
    5726:	693b      	ldr	r3, [r7, #16]
    5728:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    572a:	693b      	ldr	r3, [r7, #16]
    572c:	68da      	ldr	r2, [r3, #12]
    572e:	693b      	ldr	r3, [r7, #16]
    5730:	689b      	ldr	r3, [r3, #8]
    5732:	429a      	cmp	r2, r3
    5734:	d054      	beq.n	57e0 <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5736:	693b      	ldr	r3, [r7, #16]
    5738:	689b      	ldr	r3, [r3, #8]
    573a:	b299      	uxth	r1, r3
    573c:	693b      	ldr	r3, [r7, #16]
    573e:	68db      	ldr	r3, [r3, #12]
    5740:	b29a      	uxth	r2, r3
    5742:	231e      	movs	r3, #30
    5744:	18fb      	adds	r3, r7, r3
    5746:	1a8a      	subs	r2, r1, r2
    5748:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    574a:	231e      	movs	r3, #30
    574c:	18fb      	adds	r3, r7, r3
    574e:	881b      	ldrh	r3, [r3, #0]
    5750:	4a3c      	ldr	r2, [pc, #240]	; (5844 <udd_ep_trans_in_next+0x174>)
    5752:	4293      	cmp	r3, r2
    5754:	d90d      	bls.n	5772 <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    5756:	230c      	movs	r3, #12
    5758:	18fb      	adds	r3, r7, r3
    575a:	881a      	ldrh	r2, [r3, #0]
    575c:	4839      	ldr	r0, [pc, #228]	; (5844 <udd_ep_trans_in_next+0x174>)
    575e:	4b3a      	ldr	r3, [pc, #232]	; (5848 <udd_ep_trans_in_next+0x178>)
    5760:	0011      	movs	r1, r2
    5762:	4798      	blx	r3
    5764:	000b      	movs	r3, r1
    5766:	b29a      	uxth	r2, r3
    5768:	231e      	movs	r3, #30
    576a:	18fb      	adds	r3, r7, r3
    576c:	4935      	ldr	r1, [pc, #212]	; (5844 <udd_ep_trans_in_next+0x174>)
    576e:	1a8a      	subs	r2, r1, r2
    5770:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    5772:	693b      	ldr	r3, [r7, #16]
    5774:	7c9b      	ldrb	r3, [r3, #18]
    5776:	2202      	movs	r2, #2
    5778:	4013      	ands	r3, r2
    577a:	b2db      	uxtb	r3, r3
    577c:	2b00      	cmp	r3, #0
    577e:	d00e      	beq.n	579e <udd_ep_trans_in_next+0xce>
    5780:	231e      	movs	r3, #30
    5782:	18fa      	adds	r2, r7, r3
    5784:	230c      	movs	r3, #12
    5786:	18fb      	adds	r3, r7, r3
    5788:	8812      	ldrh	r2, [r2, #0]
    578a:	8819      	ldrh	r1, [r3, #0]
    578c:	4b2f      	ldr	r3, [pc, #188]	; (584c <udd_ep_trans_in_next+0x17c>)
    578e:	0010      	movs	r0, r2
    5790:	4798      	blx	r3
    5792:	000b      	movs	r3, r1
    5794:	b29b      	uxth	r3, r3
    5796:	2b00      	cmp	r3, #0
    5798:	d101      	bne.n	579e <udd_ep_trans_in_next+0xce>
    579a:	2301      	movs	r3, #1
    579c:	e000      	b.n	57a0 <udd_ep_trans_in_next+0xd0>
    579e:	2300      	movs	r3, #0
    57a0:	b2db      	uxtb	r3, r3
    57a2:	1c1a      	adds	r2, r3, #0
    57a4:	2301      	movs	r3, #1
    57a6:	4013      	ands	r3, r2
    57a8:	b2da      	uxtb	r2, r3
    57aa:	693b      	ldr	r3, [r7, #16]
    57ac:	2101      	movs	r1, #1
    57ae:	400a      	ands	r2, r1
    57b0:	1890      	adds	r0, r2, r2
    57b2:	7c9a      	ldrb	r2, [r3, #18]
    57b4:	2102      	movs	r1, #2
    57b6:	438a      	bics	r2, r1
    57b8:	1c11      	adds	r1, r2, #0
    57ba:	1c02      	adds	r2, r0, #0
    57bc:	430a      	orrs	r2, r1
    57be:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    57c0:	693b      	ldr	r3, [r7, #16]
    57c2:	685a      	ldr	r2, [r3, #4]
    57c4:	693b      	ldr	r3, [r7, #16]
    57c6:	68db      	ldr	r3, [r3, #12]
    57c8:	18d2      	adds	r2, r2, r3
    57ca:	231e      	movs	r3, #30
    57cc:	18fb      	adds	r3, r7, r3
    57ce:	881c      	ldrh	r4, [r3, #0]
    57d0:	230f      	movs	r3, #15
    57d2:	18fb      	adds	r3, r7, r3
    57d4:	7819      	ldrb	r1, [r3, #0]
    57d6:	481e      	ldr	r0, [pc, #120]	; (5850 <udd_ep_trans_in_next+0x180>)
    57d8:	0023      	movs	r3, r4
    57da:	4c1e      	ldr	r4, [pc, #120]	; (5854 <udd_ep_trans_in_next+0x184>)
    57dc:	47a0      	blx	r4
		return;
    57de:	e02b      	b.n	5838 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    57e0:	693b      	ldr	r3, [r7, #16]
    57e2:	7c9b      	ldrb	r3, [r3, #18]
    57e4:	2202      	movs	r2, #2
    57e6:	4013      	ands	r3, r2
    57e8:	b2db      	uxtb	r3, r3
    57ea:	2b00      	cmp	r3, #0
    57ec:	d011      	beq.n	5812 <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    57ee:	693b      	ldr	r3, [r7, #16]
    57f0:	7c9a      	ldrb	r2, [r3, #18]
    57f2:	2102      	movs	r1, #2
    57f4:	438a      	bics	r2, r1
    57f6:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    57f8:	693b      	ldr	r3, [r7, #16]
    57fa:	685a      	ldr	r2, [r3, #4]
    57fc:	693b      	ldr	r3, [r7, #16]
    57fe:	68db      	ldr	r3, [r3, #12]
    5800:	18d2      	adds	r2, r2, r3
    5802:	230f      	movs	r3, #15
    5804:	18fb      	adds	r3, r7, r3
    5806:	7819      	ldrb	r1, [r3, #0]
    5808:	4811      	ldr	r0, [pc, #68]	; (5850 <udd_ep_trans_in_next+0x180>)
    580a:	2300      	movs	r3, #0
    580c:	4c11      	ldr	r4, [pc, #68]	; (5854 <udd_ep_trans_in_next+0x184>)
    580e:	47a0      	blx	r4
		return;
    5810:	e012      	b.n	5838 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    5812:	693b      	ldr	r3, [r7, #16]
    5814:	7c9a      	ldrb	r2, [r3, #18]
    5816:	2101      	movs	r1, #1
    5818:	438a      	bics	r2, r1
    581a:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    581c:	693b      	ldr	r3, [r7, #16]
    581e:	681b      	ldr	r3, [r3, #0]
    5820:	2b00      	cmp	r3, #0
    5822:	d009      	beq.n	5838 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    5824:	693b      	ldr	r3, [r7, #16]
    5826:	681c      	ldr	r4, [r3, #0]
    5828:	693b      	ldr	r3, [r7, #16]
    582a:	68d9      	ldr	r1, [r3, #12]
    582c:	2317      	movs	r3, #23
    582e:	18fb      	adds	r3, r7, r3
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	001a      	movs	r2, r3
    5834:	2000      	movs	r0, #0
    5836:	47a0      	blx	r4
	}
}
    5838:	46bd      	mov	sp, r7
    583a:	b009      	add	sp, #36	; 0x24
    583c:	bd90      	pop	{r4, r7, pc}
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	00005691 	.word	0x00005691
    5844:	00001fff 	.word	0x00001fff
    5848:	00008f35 	.word	0x00008f35
    584c:	00008d61 	.word	0x00008d61
    5850:	20000374 	.word	0x20000374
    5854:	00007d7d 	.word	0x00007d7d

00005858 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    5858:	b5b0      	push	{r4, r5, r7, lr}
    585a:	b088      	sub	sp, #32
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5864:	2317      	movs	r3, #23
    5866:	18fb      	adds	r3, r7, r3
    5868:	69ba      	ldr	r2, [r7, #24]
    586a:	7992      	ldrb	r2, [r2, #6]
    586c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    586e:	2317      	movs	r3, #23
    5870:	18fb      	adds	r3, r7, r3
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	0018      	movs	r0, r3
    5876:	4b66      	ldr	r3, [pc, #408]	; (5a10 <udd_ep_trans_out_next+0x1b8>)
    5878:	4798      	blx	r3
    587a:	0003      	movs	r3, r0
    587c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    587e:	230f      	movs	r3, #15
    5880:	18fb      	adds	r3, r7, r3
    5882:	2217      	movs	r2, #23
    5884:	18ba      	adds	r2, r7, r2
    5886:	7812      	ldrb	r2, [r2, #0]
    5888:	210f      	movs	r1, #15
    588a:	400a      	ands	r2, r1
    588c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    588e:	230c      	movs	r3, #12
    5890:	18fb      	adds	r3, r7, r3
    5892:	693a      	ldr	r2, [r7, #16]
    5894:	8a12      	ldrh	r2, [r2, #16]
    5896:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    5898:	230a      	movs	r3, #10
    589a:	18fb      	adds	r3, r7, r3
    589c:	69ba      	ldr	r2, [r7, #24]
    589e:	8812      	ldrh	r2, [r2, #0]
    58a0:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    58a2:	693b      	ldr	r3, [r7, #16]
    58a4:	7c9b      	ldrb	r3, [r3, #18]
    58a6:	2204      	movs	r2, #4
    58a8:	4013      	ands	r3, r2
    58aa:	b2db      	uxtb	r3, r3
    58ac:	2b00      	cmp	r3, #0
    58ae:	d019      	beq.n	58e4 <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    58b0:	693b      	ldr	r3, [r7, #16]
    58b2:	685a      	ldr	r2, [r3, #4]
    58b4:	693b      	ldr	r3, [r7, #16]
    58b6:	68db      	ldr	r3, [r3, #12]
    58b8:	18d4      	adds	r4, r2, r3
    58ba:	230f      	movs	r3, #15
    58bc:	18fb      	adds	r3, r7, r3
    58be:	781b      	ldrb	r3, [r3, #0]
    58c0:	3b01      	subs	r3, #1
    58c2:	019a      	lsls	r2, r3, #6
    58c4:	4b53      	ldr	r3, [pc, #332]	; (5a14 <udd_ep_trans_out_next+0x1bc>)
    58c6:	18d5      	adds	r5, r2, r3
    58c8:	693b      	ldr	r3, [r7, #16]
    58ca:	689a      	ldr	r2, [r3, #8]
    58cc:	230c      	movs	r3, #12
    58ce:	18fb      	adds	r3, r7, r3
    58d0:	8819      	ldrh	r1, [r3, #0]
    58d2:	4b51      	ldr	r3, [pc, #324]	; (5a18 <udd_ep_trans_out_next+0x1c0>)
    58d4:	0010      	movs	r0, r2
    58d6:	4798      	blx	r3
    58d8:	000b      	movs	r3, r1
    58da:	001a      	movs	r2, r3
    58dc:	0029      	movs	r1, r5
    58de:	0020      	movs	r0, r4
    58e0:	4b4e      	ldr	r3, [pc, #312]	; (5a1c <udd_ep_trans_out_next+0x1c4>)
    58e2:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    58e4:	693b      	ldr	r3, [r7, #16]
    58e6:	68da      	ldr	r2, [r3, #12]
    58e8:	230a      	movs	r3, #10
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	881b      	ldrh	r3, [r3, #0]
    58ee:	18d2      	adds	r2, r2, r3
    58f0:	693b      	ldr	r3, [r7, #16]
    58f2:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    58f4:	693b      	ldr	r3, [r7, #16]
    58f6:	68da      	ldr	r2, [r3, #12]
    58f8:	693b      	ldr	r3, [r7, #16]
    58fa:	689b      	ldr	r3, [r3, #8]
    58fc:	429a      	cmp	r2, r3
    58fe:	d903      	bls.n	5908 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    5900:	693b      	ldr	r3, [r7, #16]
    5902:	689a      	ldr	r2, [r3, #8]
    5904:	693b      	ldr	r3, [r7, #16]
    5906:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    5908:	69bb      	ldr	r3, [r7, #24]
    590a:	889b      	ldrh	r3, [r3, #4]
    590c:	220a      	movs	r2, #10
    590e:	18ba      	adds	r2, r7, r2
    5910:	8812      	ldrh	r2, [r2, #0]
    5912:	429a      	cmp	r2, r3
    5914:	d165      	bne.n	59e2 <udd_ep_trans_out_next+0x18a>
    5916:	693b      	ldr	r3, [r7, #16]
    5918:	68da      	ldr	r2, [r3, #12]
    591a:	693b      	ldr	r3, [r7, #16]
    591c:	689b      	ldr	r3, [r3, #8]
    591e:	429a      	cmp	r2, r3
    5920:	d05f      	beq.n	59e2 <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5922:	693b      	ldr	r3, [r7, #16]
    5924:	689b      	ldr	r3, [r3, #8]
    5926:	b299      	uxth	r1, r3
    5928:	693b      	ldr	r3, [r7, #16]
    592a:	68db      	ldr	r3, [r3, #12]
    592c:	b29a      	uxth	r2, r3
    592e:	231e      	movs	r3, #30
    5930:	18fb      	adds	r3, r7, r3
    5932:	1a8a      	subs	r2, r1, r2
    5934:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5936:	231e      	movs	r3, #30
    5938:	18fb      	adds	r3, r7, r3
    593a:	881b      	ldrh	r3, [r3, #0]
    593c:	4a38      	ldr	r2, [pc, #224]	; (5a20 <udd_ep_trans_out_next+0x1c8>)
    593e:	4293      	cmp	r3, r2
    5940:	d90e      	bls.n	5960 <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    5942:	230c      	movs	r3, #12
    5944:	18fb      	adds	r3, r7, r3
    5946:	881a      	ldrh	r2, [r3, #0]
    5948:	4835      	ldr	r0, [pc, #212]	; (5a20 <udd_ep_trans_out_next+0x1c8>)
    594a:	4b36      	ldr	r3, [pc, #216]	; (5a24 <udd_ep_trans_out_next+0x1cc>)
    594c:	0011      	movs	r1, r2
    594e:	4798      	blx	r3
    5950:	000b      	movs	r3, r1
    5952:	b29a      	uxth	r2, r3
    5954:	231e      	movs	r3, #30
    5956:	18fb      	adds	r3, r7, r3
    5958:	4931      	ldr	r1, [pc, #196]	; (5a20 <udd_ep_trans_out_next+0x1c8>)
    595a:	1a8a      	subs	r2, r1, r2
    595c:	801a      	strh	r2, [r3, #0]
    595e:	e011      	b.n	5984 <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    5960:	231e      	movs	r3, #30
    5962:	18fa      	adds	r2, r7, r3
    5964:	230c      	movs	r3, #12
    5966:	18fb      	adds	r3, r7, r3
    5968:	8812      	ldrh	r2, [r2, #0]
    596a:	8819      	ldrh	r1, [r3, #0]
    596c:	4b2a      	ldr	r3, [pc, #168]	; (5a18 <udd_ep_trans_out_next+0x1c0>)
    596e:	0010      	movs	r0, r2
    5970:	4798      	blx	r3
    5972:	000b      	movs	r3, r1
    5974:	b29a      	uxth	r2, r3
    5976:	231e      	movs	r3, #30
    5978:	18fb      	adds	r3, r7, r3
    597a:	211e      	movs	r1, #30
    597c:	1879      	adds	r1, r7, r1
    597e:	8809      	ldrh	r1, [r1, #0]
    5980:	1a8a      	subs	r2, r1, r2
    5982:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    5984:	231e      	movs	r3, #30
    5986:	18fa      	adds	r2, r7, r3
    5988:	230c      	movs	r3, #12
    598a:	18fb      	adds	r3, r7, r3
    598c:	8812      	ldrh	r2, [r2, #0]
    598e:	881b      	ldrh	r3, [r3, #0]
    5990:	429a      	cmp	r2, r3
    5992:	d216      	bcs.n	59c2 <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    5994:	693b      	ldr	r3, [r7, #16]
    5996:	7c9a      	ldrb	r2, [r3, #18]
    5998:	2104      	movs	r1, #4
    599a:	430a      	orrs	r2, r1
    599c:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    599e:	230f      	movs	r3, #15
    59a0:	18fb      	adds	r3, r7, r3
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	3b01      	subs	r3, #1
    59a6:	019a      	lsls	r2, r3, #6
    59a8:	4b1a      	ldr	r3, [pc, #104]	; (5a14 <udd_ep_trans_out_next+0x1bc>)
    59aa:	18d2      	adds	r2, r2, r3
    59ac:	230c      	movs	r3, #12
    59ae:	18fb      	adds	r3, r7, r3
    59b0:	881c      	ldrh	r4, [r3, #0]
    59b2:	230f      	movs	r3, #15
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	7819      	ldrb	r1, [r3, #0]
    59b8:	481b      	ldr	r0, [pc, #108]	; (5a28 <udd_ep_trans_out_next+0x1d0>)
    59ba:	0023      	movs	r3, r4
    59bc:	4c1b      	ldr	r4, [pc, #108]	; (5a2c <udd_ep_trans_out_next+0x1d4>)
    59be:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    59c0:	e022      	b.n	5a08 <udd_ep_trans_out_next+0x1b0>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    59c2:	693b      	ldr	r3, [r7, #16]
    59c4:	685a      	ldr	r2, [r3, #4]
    59c6:	693b      	ldr	r3, [r7, #16]
    59c8:	68db      	ldr	r3, [r3, #12]
    59ca:	18d2      	adds	r2, r2, r3
    59cc:	231e      	movs	r3, #30
    59ce:	18fb      	adds	r3, r7, r3
    59d0:	881c      	ldrh	r4, [r3, #0]
    59d2:	230f      	movs	r3, #15
    59d4:	18fb      	adds	r3, r7, r3
    59d6:	7819      	ldrb	r1, [r3, #0]
    59d8:	4813      	ldr	r0, [pc, #76]	; (5a28 <udd_ep_trans_out_next+0x1d0>)
    59da:	0023      	movs	r3, r4
    59dc:	4c13      	ldr	r4, [pc, #76]	; (5a2c <udd_ep_trans_out_next+0x1d4>)
    59de:	47a0      	blx	r4
		}
		return;
    59e0:	e012      	b.n	5a08 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    59e2:	693b      	ldr	r3, [r7, #16]
    59e4:	7c9a      	ldrb	r2, [r3, #18]
    59e6:	2101      	movs	r1, #1
    59e8:	438a      	bics	r2, r1
    59ea:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    59ec:	693b      	ldr	r3, [r7, #16]
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	2b00      	cmp	r3, #0
    59f2:	d009      	beq.n	5a08 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    59f4:	693b      	ldr	r3, [r7, #16]
    59f6:	681c      	ldr	r4, [r3, #0]
    59f8:	693b      	ldr	r3, [r7, #16]
    59fa:	68d9      	ldr	r1, [r3, #12]
    59fc:	2317      	movs	r3, #23
    59fe:	18fb      	adds	r3, r7, r3
    5a00:	781b      	ldrb	r3, [r3, #0]
    5a02:	001a      	movs	r2, r3
    5a04:	2000      	movs	r0, #0
    5a06:	47a0      	blx	r4
	}
}
    5a08:	46bd      	mov	sp, r7
    5a0a:	b008      	add	sp, #32
    5a0c:	bdb0      	pop	{r4, r5, r7, pc}
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	00005691 	.word	0x00005691
    5a14:	20000334 	.word	0x20000334
    5a18:	00008d61 	.word	0x00008d61
    5a1c:	00008fcd 	.word	0x00008fcd
    5a20:	00001fff 	.word	0x00001fff
    5a24:	00008f35 	.word	0x00008f35
    5a28:	20000374 	.word	0x20000374
    5a2c:	00007e31 	.word	0x00007e31

00005a30 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    5a30:	b580      	push	{r7, lr}
    5a32:	b084      	sub	sp, #16
    5a34:	af00      	add	r7, sp, #0
    5a36:	6078      	str	r0, [r7, #4]
    5a38:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5a3a:	683b      	ldr	r3, [r7, #0]
    5a3c:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5a3e:	230b      	movs	r3, #11
    5a40:	18fb      	adds	r3, r7, r3
    5a42:	68fa      	ldr	r2, [r7, #12]
    5a44:	7992      	ldrb	r2, [r2, #6]
    5a46:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    5a48:	230b      	movs	r3, #11
    5a4a:	18fb      	adds	r3, r7, r3
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	b25b      	sxtb	r3, r3
    5a50:	2b00      	cmp	r3, #0
    5a52:	da04      	bge.n	5a5e <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    5a54:	683b      	ldr	r3, [r7, #0]
    5a56:	0018      	movs	r0, r3
    5a58:	4b05      	ldr	r3, [pc, #20]	; (5a70 <udd_ep_transfer_process+0x40>)
    5a5a:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    5a5c:	e003      	b.n	5a66 <udd_ep_transfer_process+0x36>
	udd_ep_id_t ep = ep_callback_para->endpoint_address;

	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
    5a5e:	683b      	ldr	r3, [r7, #0]
    5a60:	0018      	movs	r0, r3
    5a62:	4b04      	ldr	r3, [pc, #16]	; (5a74 <udd_ep_transfer_process+0x44>)
    5a64:	4798      	blx	r3
	}
}
    5a66:	46c0      	nop			; (mov r8, r8)
    5a68:	46bd      	mov	sp, r7
    5a6a:	b004      	add	sp, #16
    5a6c:	bd80      	pop	{r7, pc}
    5a6e:	46c0      	nop			; (mov r8, r8)
    5a70:	000056d1 	.word	0x000056d1
    5a74:	00005859 	.word	0x00005859

00005a78 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    5a78:	b590      	push	{r4, r7, lr}
    5a7a:	b085      	sub	sp, #20
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	0002      	movs	r2, r0
    5a80:	1dfb      	adds	r3, r7, #7
    5a82:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    5a84:	1dfb      	adds	r3, r7, #7
    5a86:	781a      	ldrb	r2, [r3, #0]
    5a88:	4b14      	ldr	r3, [pc, #80]	; (5adc <udd_ep_abort+0x64>)
    5a8a:	0011      	movs	r1, r2
    5a8c:	0018      	movs	r0, r3
    5a8e:	4b14      	ldr	r3, [pc, #80]	; (5ae0 <udd_ep_abort+0x68>)
    5a90:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    5a92:	1dfb      	adds	r3, r7, #7
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	0018      	movs	r0, r3
    5a98:	4b12      	ldr	r3, [pc, #72]	; (5ae4 <udd_ep_abort+0x6c>)
    5a9a:	4798      	blx	r3
    5a9c:	0003      	movs	r3, r0
    5a9e:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	7c9b      	ldrb	r3, [r3, #18]
    5aa4:	2201      	movs	r2, #1
    5aa6:	4013      	ands	r3, r2
    5aa8:	b2db      	uxtb	r3, r3
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d012      	beq.n	5ad4 <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	7c9a      	ldrb	r2, [r3, #18]
    5ab2:	2101      	movs	r1, #1
    5ab4:	438a      	bics	r2, r1
    5ab6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5ab8:	68fb      	ldr	r3, [r7, #12]
    5aba:	681b      	ldr	r3, [r3, #0]
    5abc:	2b00      	cmp	r3, #0
    5abe:	d00a      	beq.n	5ad6 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	681c      	ldr	r4, [r3, #0]
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	68d9      	ldr	r1, [r3, #12]
    5ac8:	1dfb      	adds	r3, r7, #7
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	001a      	movs	r2, r3
    5ace:	2001      	movs	r0, #1
    5ad0:	47a0      	blx	r4
    5ad2:	e000      	b.n	5ad6 <udd_ep_abort+0x5e>
	usb_device_endpoint_abort_job(&usb_device, ep);

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
	if (!ptr_job->busy) {
		return;
    5ad4:	46c0      	nop			; (mov r8, r8)
	ptr_job->busy = false;
	if (NULL != ptr_job->call_trans) {
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
	}
}
    5ad6:	46bd      	mov	sp, r7
    5ad8:	b005      	add	sp, #20
    5ada:	bd90      	pop	{r4, r7, pc}
    5adc:	20000374 	.word	0x20000374
    5ae0:	00007af9 	.word	0x00007af9
    5ae4:	00005691 	.word	0x00005691

00005ae8 <udd_get_frame_number>:
	return false;
#endif
}

uint16_t udd_get_frame_number(void)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    5aec:	4b03      	ldr	r3, [pc, #12]	; (5afc <udd_get_frame_number+0x14>)
    5aee:	0018      	movs	r0, r3
    5af0:	4b03      	ldr	r3, [pc, #12]	; (5b00 <udd_get_frame_number+0x18>)
    5af2:	4798      	blx	r3
    5af4:	0003      	movs	r3, r0
}
    5af6:	0018      	movs	r0, r3
    5af8:	46bd      	mov	sp, r7
    5afa:	bd80      	pop	{r7, pc}
    5afc:	20000374 	.word	0x20000374
    5b00:	00005471 	.word	0x00005471

00005b04 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b084      	sub	sp, #16
    5b08:	af00      	add	r7, sp, #0
    5b0a:	0002      	movs	r2, r0
    5b0c:	1dfb      	adds	r3, r7, #7
    5b0e:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5b10:	2308      	movs	r3, #8
    5b12:	18fb      	adds	r3, r7, r3
    5b14:	0018      	movs	r0, r3
    5b16:	4b18      	ldr	r3, [pc, #96]	; (5b78 <udd_ep_free+0x74>)
    5b18:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5b1a:	230f      	movs	r3, #15
    5b1c:	18fb      	adds	r3, r7, r3
    5b1e:	1dfa      	adds	r2, r7, #7
    5b20:	7812      	ldrb	r2, [r2, #0]
    5b22:	210f      	movs	r1, #15
    5b24:	400a      	ands	r2, r1
    5b26:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    5b28:	1dfb      	adds	r3, r7, #7
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	0018      	movs	r0, r3
    5b2e:	4b13      	ldr	r3, [pc, #76]	; (5b7c <udd_ep_free+0x78>)
    5b30:	4798      	blx	r3

	config_ep.ep_address = ep;
    5b32:	2308      	movs	r3, #8
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	1dfa      	adds	r2, r7, #7
    5b38:	7812      	ldrb	r2, [r2, #0]
    5b3a:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    5b3c:	2308      	movs	r3, #8
    5b3e:	18fb      	adds	r3, r7, r3
    5b40:	2200      	movs	r2, #0
    5b42:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    5b44:	2308      	movs	r3, #8
    5b46:	18fa      	adds	r2, r7, r3
    5b48:	4b0d      	ldr	r3, [pc, #52]	; (5b80 <udd_ep_free+0x7c>)
    5b4a:	0011      	movs	r1, r2
    5b4c:	0018      	movs	r0, r3
    5b4e:	4b0d      	ldr	r3, [pc, #52]	; (5b84 <udd_ep_free+0x80>)
    5b50:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5b52:	230f      	movs	r3, #15
    5b54:	18fb      	adds	r3, r7, r3
    5b56:	7819      	ldrb	r1, [r3, #0]
    5b58:	4b09      	ldr	r3, [pc, #36]	; (5b80 <udd_ep_free+0x7c>)
    5b5a:	2200      	movs	r2, #0
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b0a      	ldr	r3, [pc, #40]	; (5b88 <udd_ep_free+0x84>)
    5b60:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5b62:	1dfb      	adds	r3, r7, #7
    5b64:	7819      	ldrb	r1, [r3, #0]
    5b66:	4b06      	ldr	r3, [pc, #24]	; (5b80 <udd_ep_free+0x7c>)
    5b68:	2200      	movs	r2, #0
    5b6a:	0018      	movs	r0, r3
    5b6c:	4b07      	ldr	r3, [pc, #28]	; (5b8c <udd_ep_free+0x88>)
    5b6e:	4798      	blx	r3
}
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	46bd      	mov	sp, r7
    5b74:	b004      	add	sp, #16
    5b76:	bd80      	pop	{r7, pc}
    5b78:	000075d9 	.word	0x000075d9
    5b7c:	00005a79 	.word	0x00005a79
    5b80:	20000374 	.word	0x20000374
    5b84:	00007601 	.word	0x00007601
    5b88:	00007221 	.word	0x00007221
    5b8c:	00007435 	.word	0x00007435

00005b90 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    5b90:	b590      	push	{r4, r7, lr}
    5b92:	b087      	sub	sp, #28
    5b94:	af00      	add	r7, sp, #0
    5b96:	0004      	movs	r4, r0
    5b98:	0008      	movs	r0, r1
    5b9a:	0011      	movs	r1, r2
    5b9c:	1dfb      	adds	r3, r7, #7
    5b9e:	1c22      	adds	r2, r4, #0
    5ba0:	701a      	strb	r2, [r3, #0]
    5ba2:	1dbb      	adds	r3, r7, #6
    5ba4:	1c02      	adds	r2, r0, #0
    5ba6:	701a      	strb	r2, [r3, #0]
    5ba8:	1d3b      	adds	r3, r7, #4
    5baa:	1c0a      	adds	r2, r1, #0
    5bac:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5bae:	230c      	movs	r3, #12
    5bb0:	18fb      	adds	r3, r7, r3
    5bb2:	0018      	movs	r0, r3
    5bb4:	4b58      	ldr	r3, [pc, #352]	; (5d18 <udd_ep_alloc+0x188>)
    5bb6:	4798      	blx	r3

	config_ep.ep_address = ep;
    5bb8:	230c      	movs	r3, #12
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	1dfa      	adds	r2, r7, #7
    5bbe:	7812      	ldrb	r2, [r2, #0]
    5bc0:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    5bc2:	1d3b      	adds	r3, r7, #4
    5bc4:	881b      	ldrh	r3, [r3, #0]
    5bc6:	2b08      	cmp	r3, #8
    5bc8:	d804      	bhi.n	5bd4 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5bca:	230c      	movs	r3, #12
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	2200      	movs	r2, #0
    5bd0:	705a      	strb	r2, [r3, #1]
    5bd2:	e045      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    5bd4:	1d3b      	adds	r3, r7, #4
    5bd6:	881b      	ldrh	r3, [r3, #0]
    5bd8:	2b10      	cmp	r3, #16
    5bda:	d804      	bhi.n	5be6 <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    5bdc:	230c      	movs	r3, #12
    5bde:	18fb      	adds	r3, r7, r3
    5be0:	2201      	movs	r2, #1
    5be2:	705a      	strb	r2, [r3, #1]
    5be4:	e03c      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    5be6:	1d3b      	adds	r3, r7, #4
    5be8:	881b      	ldrh	r3, [r3, #0]
    5bea:	2b20      	cmp	r3, #32
    5bec:	d804      	bhi.n	5bf8 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    5bee:	230c      	movs	r3, #12
    5bf0:	18fb      	adds	r3, r7, r3
    5bf2:	2202      	movs	r2, #2
    5bf4:	705a      	strb	r2, [r3, #1]
    5bf6:	e033      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    5bf8:	1d3b      	adds	r3, r7, #4
    5bfa:	881b      	ldrh	r3, [r3, #0]
    5bfc:	2b40      	cmp	r3, #64	; 0x40
    5bfe:	d804      	bhi.n	5c0a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5c00:	230c      	movs	r3, #12
    5c02:	18fb      	adds	r3, r7, r3
    5c04:	2203      	movs	r2, #3
    5c06:	705a      	strb	r2, [r3, #1]
    5c08:	e02a      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    5c0a:	1d3b      	adds	r3, r7, #4
    5c0c:	881b      	ldrh	r3, [r3, #0]
    5c0e:	2b80      	cmp	r3, #128	; 0x80
    5c10:	d804      	bhi.n	5c1c <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5c12:	230c      	movs	r3, #12
    5c14:	18fb      	adds	r3, r7, r3
    5c16:	2204      	movs	r2, #4
    5c18:	705a      	strb	r2, [r3, #1]
    5c1a:	e021      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    5c1c:	1d3b      	adds	r3, r7, #4
    5c1e:	881a      	ldrh	r2, [r3, #0]
    5c20:	2380      	movs	r3, #128	; 0x80
    5c22:	005b      	lsls	r3, r3, #1
    5c24:	429a      	cmp	r2, r3
    5c26:	d804      	bhi.n	5c32 <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5c28:	230c      	movs	r3, #12
    5c2a:	18fb      	adds	r3, r7, r3
    5c2c:	2205      	movs	r2, #5
    5c2e:	705a      	strb	r2, [r3, #1]
    5c30:	e016      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    5c32:	1d3b      	adds	r3, r7, #4
    5c34:	881a      	ldrh	r2, [r3, #0]
    5c36:	2380      	movs	r3, #128	; 0x80
    5c38:	009b      	lsls	r3, r3, #2
    5c3a:	429a      	cmp	r2, r3
    5c3c:	d804      	bhi.n	5c48 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    5c3e:	230c      	movs	r3, #12
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	2206      	movs	r2, #6
    5c44:	705a      	strb	r2, [r3, #1]
    5c46:	e00b      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    5c48:	1d3b      	adds	r3, r7, #4
    5c4a:	881b      	ldrh	r3, [r3, #0]
    5c4c:	4a33      	ldr	r2, [pc, #204]	; (5d1c <udd_ep_alloc+0x18c>)
    5c4e:	4293      	cmp	r3, r2
    5c50:	d804      	bhi.n	5c5c <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5c52:	230c      	movs	r3, #12
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	2207      	movs	r2, #7
    5c58:	705a      	strb	r2, [r3, #1]
    5c5a:	e001      	b.n	5c60 <udd_ep_alloc+0xd0>
	} else {
		return false;
    5c5c:	2300      	movs	r3, #0
    5c5e:	e057      	b.n	5d10 <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    5c60:	1dfb      	adds	r3, r7, #7
    5c62:	781b      	ldrb	r3, [r3, #0]
    5c64:	0018      	movs	r0, r3
    5c66:	4b2e      	ldr	r3, [pc, #184]	; (5d20 <udd_ep_alloc+0x190>)
    5c68:	4798      	blx	r3
    5c6a:	0003      	movs	r3, r0
    5c6c:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    5c6e:	697b      	ldr	r3, [r7, #20]
    5c70:	1d3a      	adds	r2, r7, #4
    5c72:	8812      	ldrh	r2, [r2, #0]
    5c74:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5c76:	1dbb      	adds	r3, r7, #6
    5c78:	1dba      	adds	r2, r7, #6
    5c7a:	7812      	ldrb	r2, [r2, #0]
    5c7c:	2103      	movs	r1, #3
    5c7e:	400a      	ands	r2, r1
    5c80:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    5c82:	1dbb      	adds	r3, r7, #6
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	2b01      	cmp	r3, #1
    5c88:	d104      	bne.n	5c94 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    5c8a:	230c      	movs	r3, #12
    5c8c:	18fb      	adds	r3, r7, r3
    5c8e:	2202      	movs	r2, #2
    5c90:	70da      	strb	r2, [r3, #3]
    5c92:	e013      	b.n	5cbc <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    5c94:	1dbb      	adds	r3, r7, #6
    5c96:	781b      	ldrb	r3, [r3, #0]
    5c98:	2b02      	cmp	r3, #2
    5c9a:	d104      	bne.n	5ca6 <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    5c9c:	230c      	movs	r3, #12
    5c9e:	18fb      	adds	r3, r7, r3
    5ca0:	2203      	movs	r2, #3
    5ca2:	70da      	strb	r2, [r3, #3]
    5ca4:	e00a      	b.n	5cbc <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    5ca6:	1dbb      	adds	r3, r7, #6
    5ca8:	781b      	ldrb	r3, [r3, #0]
    5caa:	2b03      	cmp	r3, #3
    5cac:	d104      	bne.n	5cb8 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    5cae:	230c      	movs	r3, #12
    5cb0:	18fb      	adds	r3, r7, r3
    5cb2:	2204      	movs	r2, #4
    5cb4:	70da      	strb	r2, [r3, #3]
    5cb6:	e001      	b.n	5cbc <udd_ep_alloc+0x12c>
	} else {
		return false;
    5cb8:	2300      	movs	r3, #0
    5cba:	e029      	b.n	5d10 <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5cbc:	2313      	movs	r3, #19
    5cbe:	18fb      	adds	r3, r7, r3
    5cc0:	1dfa      	adds	r2, r7, #7
    5cc2:	7812      	ldrb	r2, [r2, #0]
    5cc4:	210f      	movs	r1, #15
    5cc6:	400a      	ands	r2, r1
    5cc8:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    5cca:	230c      	movs	r3, #12
    5ccc:	18fa      	adds	r2, r7, r3
    5cce:	4b15      	ldr	r3, [pc, #84]	; (5d24 <udd_ep_alloc+0x194>)
    5cd0:	0011      	movs	r1, r2
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b14      	ldr	r3, [pc, #80]	; (5d28 <udd_ep_alloc+0x198>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d001      	beq.n	5ce0 <udd_ep_alloc+0x150>
		return false;
    5cdc:	2300      	movs	r3, #0
    5cde:	e017      	b.n	5d10 <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    5ce0:	4a12      	ldr	r2, [pc, #72]	; (5d2c <udd_ep_alloc+0x19c>)
    5ce2:	2313      	movs	r3, #19
    5ce4:	18fb      	adds	r3, r7, r3
    5ce6:	7819      	ldrb	r1, [r3, #0]
    5ce8:	480e      	ldr	r0, [pc, #56]	; (5d24 <udd_ep_alloc+0x194>)
    5cea:	0013      	movs	r3, r2
    5cec:	2200      	movs	r2, #0
    5cee:	4c10      	ldr	r4, [pc, #64]	; (5d30 <udd_ep_alloc+0x1a0>)
    5cf0:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5cf2:	1dfb      	adds	r3, r7, #7
    5cf4:	7819      	ldrb	r1, [r3, #0]
    5cf6:	4b0b      	ldr	r3, [pc, #44]	; (5d24 <udd_ep_alloc+0x194>)
    5cf8:	2200      	movs	r2, #0
    5cfa:	0018      	movs	r0, r3
    5cfc:	4b0d      	ldr	r3, [pc, #52]	; (5d34 <udd_ep_alloc+0x1a4>)
    5cfe:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5d00:	1dfb      	adds	r3, r7, #7
    5d02:	7819      	ldrb	r1, [r3, #0]
    5d04:	4b07      	ldr	r3, [pc, #28]	; (5d24 <udd_ep_alloc+0x194>)
    5d06:	2201      	movs	r2, #1
    5d08:	0018      	movs	r0, r3
    5d0a:	4b0a      	ldr	r3, [pc, #40]	; (5d34 <udd_ep_alloc+0x1a4>)
    5d0c:	4798      	blx	r3

	return true;
    5d0e:	2301      	movs	r3, #1
}
    5d10:	0018      	movs	r0, r3
    5d12:	46bd      	mov	sp, r7
    5d14:	b007      	add	sp, #28
    5d16:	bd90      	pop	{r4, r7, pc}
    5d18:	000075d9 	.word	0x000075d9
    5d1c:	000003ff 	.word	0x000003ff
    5d20:	00005691 	.word	0x00005691
    5d24:	20000374 	.word	0x20000374
    5d28:	00007601 	.word	0x00007601
    5d2c:	00005a31 	.word	0x00005a31
    5d30:	000071a1 	.word	0x000071a1
    5d34:	00007299 	.word	0x00007299

00005d38 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    5d38:	b580      	push	{r7, lr}
    5d3a:	b082      	sub	sp, #8
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	0002      	movs	r2, r0
    5d40:	1dfb      	adds	r3, r7, #7
    5d42:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5d44:	1dfb      	adds	r3, r7, #7
    5d46:	781a      	ldrb	r2, [r3, #0]
    5d48:	4b04      	ldr	r3, [pc, #16]	; (5d5c <udd_ep_is_halted+0x24>)
    5d4a:	0011      	movs	r1, r2
    5d4c:	0018      	movs	r0, r3
    5d4e:	4b04      	ldr	r3, [pc, #16]	; (5d60 <udd_ep_is_halted+0x28>)
    5d50:	4798      	blx	r3
    5d52:	0003      	movs	r3, r0
}
    5d54:	0018      	movs	r0, r3
    5d56:	46bd      	mov	sp, r7
    5d58:	b002      	add	sp, #8
    5d5a:	bd80      	pop	{r7, pc}
    5d5c:	20000374 	.word	0x20000374
    5d60:	00007b81 	.word	0x00007b81

00005d64 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    5d64:	b580      	push	{r7, lr}
    5d66:	b084      	sub	sp, #16
    5d68:	af00      	add	r7, sp, #0
    5d6a:	0002      	movs	r2, r0
    5d6c:	1dfb      	adds	r3, r7, #7
    5d6e:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5d70:	230f      	movs	r3, #15
    5d72:	18fb      	adds	r3, r7, r3
    5d74:	1dfa      	adds	r2, r7, #7
    5d76:	7812      	ldrb	r2, [r2, #0]
    5d78:	210f      	movs	r1, #15
    5d7a:	400a      	ands	r2, r1
    5d7c:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5d7e:	230f      	movs	r3, #15
    5d80:	18fb      	adds	r3, r7, r3
    5d82:	781b      	ldrb	r3, [r3, #0]
    5d84:	2b01      	cmp	r3, #1
    5d86:	d901      	bls.n	5d8c <udd_ep_set_halt+0x28>
		return false;
    5d88:	2300      	movs	r3, #0
    5d8a:	e00c      	b.n	5da6 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    5d8c:	1dfb      	adds	r3, r7, #7
    5d8e:	781a      	ldrb	r2, [r3, #0]
    5d90:	4b07      	ldr	r3, [pc, #28]	; (5db0 <udd_ep_set_halt+0x4c>)
    5d92:	0011      	movs	r1, r2
    5d94:	0018      	movs	r0, r3
    5d96:	4b07      	ldr	r3, [pc, #28]	; (5db4 <udd_ep_set_halt+0x50>)
    5d98:	4798      	blx	r3

	udd_ep_abort(ep);
    5d9a:	1dfb      	adds	r3, r7, #7
    5d9c:	781b      	ldrb	r3, [r3, #0]
    5d9e:	0018      	movs	r0, r3
    5da0:	4b05      	ldr	r3, [pc, #20]	; (5db8 <udd_ep_set_halt+0x54>)
    5da2:	4798      	blx	r3
	return true;
    5da4:	2301      	movs	r3, #1
}
    5da6:	0018      	movs	r0, r3
    5da8:	46bd      	mov	sp, r7
    5daa:	b004      	add	sp, #16
    5dac:	bd80      	pop	{r7, pc}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	20000374 	.word	0x20000374
    5db4:	00007bf5 	.word	0x00007bf5
    5db8:	00005a79 	.word	0x00005a79

00005dbc <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b084      	sub	sp, #16
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	0002      	movs	r2, r0
    5dc4:	1dfb      	adds	r3, r7, #7
    5dc6:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5dc8:	230f      	movs	r3, #15
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	1dfa      	adds	r2, r7, #7
    5dce:	7812      	ldrb	r2, [r2, #0]
    5dd0:	210f      	movs	r1, #15
    5dd2:	400a      	ands	r2, r1
    5dd4:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5dd6:	230f      	movs	r3, #15
    5dd8:	18fb      	adds	r3, r7, r3
    5dda:	781b      	ldrb	r3, [r3, #0]
    5ddc:	2b01      	cmp	r3, #1
    5dde:	d901      	bls.n	5de4 <udd_ep_clear_halt+0x28>
		return false;
    5de0:	2300      	movs	r3, #0
    5de2:	e01d      	b.n	5e20 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    5de4:	1dfb      	adds	r3, r7, #7
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	0018      	movs	r0, r3
    5dea:	4b0f      	ldr	r3, [pc, #60]	; (5e28 <udd_ep_clear_halt+0x6c>)
    5dec:	4798      	blx	r3
    5dee:	0003      	movs	r3, r0
    5df0:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    5df2:	1dfb      	adds	r3, r7, #7
    5df4:	781a      	ldrb	r2, [r3, #0]
    5df6:	4b0d      	ldr	r3, [pc, #52]	; (5e2c <udd_ep_clear_halt+0x70>)
    5df8:	0011      	movs	r1, r2
    5dfa:	0018      	movs	r0, r3
    5dfc:	4b0c      	ldr	r3, [pc, #48]	; (5e30 <udd_ep_clear_halt+0x74>)
    5dfe:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    5e00:	68bb      	ldr	r3, [r7, #8]
    5e02:	7c9b      	ldrb	r3, [r3, #18]
    5e04:	2201      	movs	r2, #1
    5e06:	4013      	ands	r3, r2
    5e08:	b2db      	uxtb	r3, r3
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d007      	beq.n	5e1e <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    5e0e:	68bb      	ldr	r3, [r7, #8]
    5e10:	7c9a      	ldrb	r2, [r3, #18]
    5e12:	2101      	movs	r1, #1
    5e14:	438a      	bics	r2, r1
    5e16:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    5e18:	68bb      	ldr	r3, [r7, #8]
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	4798      	blx	r3
	}

	return true;
    5e1e:	2301      	movs	r3, #1
}
    5e20:	0018      	movs	r0, r3
    5e22:	46bd      	mov	sp, r7
    5e24:	b004      	add	sp, #16
    5e26:	bd80      	pop	{r7, pc}
    5e28:	00005691 	.word	0x00005691
    5e2c:	20000374 	.word	0x20000374
    5e30:	00007c51 	.word	0x00007c51

00005e34 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    5e34:	b580      	push	{r7, lr}
    5e36:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5e38:	4b07      	ldr	r3, [pc, #28]	; (5e58 <udd_ctrl_stall_data+0x24>)
    5e3a:	2205      	movs	r2, #5
    5e3c:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    5e3e:	4b07      	ldr	r3, [pc, #28]	; (5e5c <udd_ctrl_stall_data+0x28>)
    5e40:	2180      	movs	r1, #128	; 0x80
    5e42:	0018      	movs	r0, r3
    5e44:	4b06      	ldr	r3, [pc, #24]	; (5e60 <udd_ctrl_stall_data+0x2c>)
    5e46:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    5e48:	4b04      	ldr	r3, [pc, #16]	; (5e5c <udd_ctrl_stall_data+0x28>)
    5e4a:	2100      	movs	r1, #0
    5e4c:	0018      	movs	r0, r3
    5e4e:	4b05      	ldr	r3, [pc, #20]	; (5e64 <udd_ctrl_stall_data+0x30>)
    5e50:	4798      	blx	r3
}
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	46bd      	mov	sp, r7
    5e56:	bd80      	pop	{r7, pc}
    5e58:	200001e0 	.word	0x200001e0
    5e5c:	20000374 	.word	0x20000374
    5e60:	00007bf5 	.word	0x00007bf5
    5e64:	00007c51 	.word	0x00007c51

00005e68 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    5e68:	b590      	push	{r4, r7, lr}
    5e6a:	b089      	sub	sp, #36	; 0x24
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	60ba      	str	r2, [r7, #8]
    5e70:	607b      	str	r3, [r7, #4]
    5e72:	230f      	movs	r3, #15
    5e74:	18fb      	adds	r3, r7, r3
    5e76:	1c02      	adds	r2, r0, #0
    5e78:	701a      	strb	r2, [r3, #0]
    5e7a:	230e      	movs	r3, #14
    5e7c:	18fb      	adds	r3, r7, r3
    5e7e:	1c0a      	adds	r2, r1, #0
    5e80:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    5e82:	231d      	movs	r3, #29
    5e84:	18fb      	adds	r3, r7, r3
    5e86:	220f      	movs	r2, #15
    5e88:	18ba      	adds	r2, r7, r2
    5e8a:	7812      	ldrb	r2, [r2, #0]
    5e8c:	210f      	movs	r1, #15
    5e8e:	400a      	ands	r2, r1
    5e90:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    5e92:	231d      	movs	r3, #29
    5e94:	18fb      	adds	r3, r7, r3
    5e96:	781b      	ldrb	r3, [r3, #0]
    5e98:	2b01      	cmp	r3, #1
    5e9a:	d807      	bhi.n	5eac <udd_ep_run+0x44>
    5e9c:	230f      	movs	r3, #15
    5e9e:	18fb      	adds	r3, r7, r3
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	0018      	movs	r0, r3
    5ea4:	4b9f      	ldr	r3, [pc, #636]	; (6124 <udd_ep_run+0x2bc>)
    5ea6:	4798      	blx	r3
    5ea8:	1e03      	subs	r3, r0, #0
    5eaa:	d001      	beq.n	5eb0 <udd_ep_run+0x48>
		return false;
    5eac:	2300      	movs	r3, #0
    5eae:	e134      	b.n	611a <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    5eb0:	230f      	movs	r3, #15
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	781b      	ldrb	r3, [r3, #0]
    5eb6:	0018      	movs	r0, r3
    5eb8:	4b9b      	ldr	r3, [pc, #620]	; (6128 <udd_ep_run+0x2c0>)
    5eba:	4798      	blx	r3
    5ebc:	0003      	movs	r3, r0
    5ebe:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    5ec0:	4b9a      	ldr	r3, [pc, #616]	; (612c <udd_ep_run+0x2c4>)
    5ec2:	4798      	blx	r3
    5ec4:	0003      	movs	r3, r0
    5ec6:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    5ec8:	69bb      	ldr	r3, [r7, #24]
    5eca:	7c9b      	ldrb	r3, [r3, #18]
    5ecc:	2201      	movs	r2, #1
    5ece:	4013      	ands	r3, r2
    5ed0:	b2db      	uxtb	r3, r3
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d005      	beq.n	5ee2 <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    5ed6:	697b      	ldr	r3, [r7, #20]
    5ed8:	0018      	movs	r0, r3
    5eda:	4b95      	ldr	r3, [pc, #596]	; (6130 <udd_ep_run+0x2c8>)
    5edc:	4798      	blx	r3
		return false; /* Job already on going */
    5ede:	2300      	movs	r3, #0
    5ee0:	e11b      	b.n	611a <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    5ee2:	69bb      	ldr	r3, [r7, #24]
    5ee4:	7c9a      	ldrb	r2, [r3, #18]
    5ee6:	2101      	movs	r1, #1
    5ee8:	430a      	orrs	r2, r1
    5eea:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    5eec:	697b      	ldr	r3, [r7, #20]
    5eee:	0018      	movs	r0, r3
    5ef0:	4b8f      	ldr	r3, [pc, #572]	; (6130 <udd_ep_run+0x2c8>)
    5ef2:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    5ef4:	69bb      	ldr	r3, [r7, #24]
    5ef6:	68ba      	ldr	r2, [r7, #8]
    5ef8:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    5efa:	69bb      	ldr	r3, [r7, #24]
    5efc:	687a      	ldr	r2, [r7, #4]
    5efe:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    5f00:	69bb      	ldr	r3, [r7, #24]
    5f02:	2200      	movs	r2, #0
    5f04:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    5f06:	69bb      	ldr	r3, [r7, #24]
    5f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5f0a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5f0c:	69bb      	ldr	r3, [r7, #24]
    5f0e:	220e      	movs	r2, #14
    5f10:	18ba      	adds	r2, r7, r2
    5f12:	7812      	ldrb	r2, [r2, #0]
    5f14:	2101      	movs	r1, #1
    5f16:	400a      	ands	r2, r1
    5f18:	1890      	adds	r0, r2, r2
    5f1a:	7c9a      	ldrb	r2, [r3, #18]
    5f1c:	2102      	movs	r1, #2
    5f1e:	438a      	bics	r2, r1
    5f20:	1c11      	adds	r1, r2, #0
    5f22:	1c02      	adds	r2, r0, #0
    5f24:	430a      	orrs	r2, r1
    5f26:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    5f28:	69bb      	ldr	r3, [r7, #24]
    5f2a:	7c9a      	ldrb	r2, [r3, #18]
    5f2c:	2104      	movs	r1, #4
    5f2e:	438a      	bics	r2, r1
    5f30:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    5f32:	230f      	movs	r3, #15
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	781b      	ldrb	r3, [r3, #0]
    5f38:	b25b      	sxtb	r3, r3
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	db00      	blt.n	5f40 <udd_ep_run+0xd8>
    5f3e:	e078      	b.n	6032 <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    5f40:	69bb      	ldr	r3, [r7, #24]
    5f42:	689b      	ldr	r3, [r3, #8]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d03f      	beq.n	5fc8 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    5f48:	69bb      	ldr	r3, [r7, #24]
    5f4a:	689a      	ldr	r2, [r3, #8]
    5f4c:	231e      	movs	r3, #30
    5f4e:	18fb      	adds	r3, r7, r3
    5f50:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5f52:	231e      	movs	r3, #30
    5f54:	18fb      	adds	r3, r7, r3
    5f56:	881b      	ldrh	r3, [r3, #0]
    5f58:	4a76      	ldr	r2, [pc, #472]	; (6134 <udd_ep_run+0x2cc>)
    5f5a:	4293      	cmp	r3, r2
    5f5c:	d90d      	bls.n	5f7a <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5f5e:	69bb      	ldr	r3, [r7, #24]
    5f60:	8a1b      	ldrh	r3, [r3, #16]
    5f62:	0019      	movs	r1, r3
    5f64:	4a73      	ldr	r2, [pc, #460]	; (6134 <udd_ep_run+0x2cc>)
    5f66:	4b74      	ldr	r3, [pc, #464]	; (6138 <udd_ep_run+0x2d0>)
    5f68:	0010      	movs	r0, r2
    5f6a:	4798      	blx	r3
    5f6c:	000b      	movs	r3, r1

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5f6e:	b29a      	uxth	r2, r3
    5f70:	231e      	movs	r3, #30
    5f72:	18fb      	adds	r3, r7, r3
    5f74:	496f      	ldr	r1, [pc, #444]	; (6134 <udd_ep_run+0x2cc>)
    5f76:	1a8a      	subs	r2, r1, r2
    5f78:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5f7a:	69bb      	ldr	r3, [r7, #24]
    5f7c:	7c9b      	ldrb	r3, [r3, #18]
    5f7e:	2202      	movs	r2, #2
    5f80:	4013      	ands	r3, r2
    5f82:	b2db      	uxtb	r3, r3
    5f84:	2b00      	cmp	r3, #0
    5f86:	d00d      	beq.n	5fa4 <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    5f88:	69bb      	ldr	r3, [r7, #24]
    5f8a:	8a19      	ldrh	r1, [r3, #16]
    5f8c:	231e      	movs	r3, #30
    5f8e:	18fb      	adds	r3, r7, r3
    5f90:	881a      	ldrh	r2, [r3, #0]
    5f92:	4b6a      	ldr	r3, [pc, #424]	; (613c <udd_ep_run+0x2d4>)
    5f94:	0010      	movs	r0, r2
    5f96:	4798      	blx	r3
    5f98:	000b      	movs	r3, r1
    5f9a:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d101      	bne.n	5fa4 <udd_ep_run+0x13c>
    5fa0:	2301      	movs	r3, #1
    5fa2:	e000      	b.n	5fa6 <udd_ep_run+0x13e>
    5fa4:	2300      	movs	r3, #0
    5fa6:	b2db      	uxtb	r3, r3
    5fa8:	1c1a      	adds	r2, r3, #0
    5faa:	2301      	movs	r3, #1
    5fac:	4013      	ands	r3, r2
    5fae:	b2da      	uxtb	r2, r3
    5fb0:	69bb      	ldr	r3, [r7, #24]
    5fb2:	2101      	movs	r1, #1
    5fb4:	400a      	ands	r2, r1
    5fb6:	1890      	adds	r0, r2, r2
    5fb8:	7c9a      	ldrb	r2, [r3, #18]
    5fba:	2102      	movs	r1, #2
    5fbc:	438a      	bics	r2, r1
    5fbe:	1c11      	adds	r1, r2, #0
    5fc0:	1c02      	adds	r2, r0, #0
    5fc2:	430a      	orrs	r2, r1
    5fc4:	749a      	strb	r2, [r3, #18]
    5fc6:	e023      	b.n	6010 <udd_ep_run+0x1a8>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    5fc8:	69bb      	ldr	r3, [r7, #24]
    5fca:	7c9b      	ldrb	r3, [r3, #18]
    5fcc:	2202      	movs	r2, #2
    5fce:	4013      	ands	r3, r2
    5fd0:	b2db      	uxtb	r3, r3
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d009      	beq.n	5fea <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    5fd6:	69bb      	ldr	r3, [r7, #24]
    5fd8:	7c9a      	ldrb	r2, [r3, #18]
    5fda:	2102      	movs	r1, #2
    5fdc:	438a      	bics	r2, r1
    5fde:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    5fe0:	231e      	movs	r3, #30
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2200      	movs	r2, #0
    5fe6:	801a      	strh	r2, [r3, #0]
    5fe8:	e012      	b.n	6010 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	7c9a      	ldrb	r2, [r3, #18]
    5fee:	2101      	movs	r1, #1
    5ff0:	438a      	bics	r2, r1
    5ff2:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    5ff4:	69bb      	ldr	r3, [r7, #24]
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d007      	beq.n	600c <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	681b      	ldr	r3, [r3, #0]
    6000:	220f      	movs	r2, #15
    6002:	18ba      	adds	r2, r7, r2
    6004:	7812      	ldrb	r2, [r2, #0]
    6006:	2100      	movs	r1, #0
    6008:	2000      	movs	r0, #0
    600a:	4798      	blx	r3
			}
			return true;
    600c:	2301      	movs	r3, #1
    600e:	e084      	b.n	611a <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    6010:	69bb      	ldr	r3, [r7, #24]
    6012:	685a      	ldr	r2, [r3, #4]
    6014:	231e      	movs	r3, #30
    6016:	18fb      	adds	r3, r7, r3
    6018:	881c      	ldrh	r4, [r3, #0]
    601a:	231d      	movs	r3, #29
    601c:	18fb      	adds	r3, r7, r3
    601e:	7819      	ldrb	r1, [r3, #0]
    6020:	4847      	ldr	r0, [pc, #284]	; (6140 <udd_ep_run+0x2d8>)
    6022:	0023      	movs	r3, r4
    6024:	4c47      	ldr	r4, [pc, #284]	; (6144 <udd_ep_run+0x2dc>)
    6026:	47a0      	blx	r4
    6028:	0003      	movs	r3, r0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    602a:	425a      	negs	r2, r3
    602c:	4153      	adcs	r3, r2
    602e:	b2db      	uxtb	r3, r3
    6030:	e073      	b.n	611a <udd_ep_run+0x2b2>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    6032:	69bb      	ldr	r3, [r7, #24]
    6034:	689b      	ldr	r3, [r3, #8]
    6036:	2b00      	cmp	r3, #0
    6038:	d05d      	beq.n	60f6 <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    603a:	69bb      	ldr	r3, [r7, #24]
    603c:	689a      	ldr	r2, [r3, #8]
    603e:	231e      	movs	r3, #30
    6040:	18fb      	adds	r3, r7, r3
    6042:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    6044:	231e      	movs	r3, #30
    6046:	18fb      	adds	r3, r7, r3
    6048:	881b      	ldrh	r3, [r3, #0]
    604a:	4a3a      	ldr	r2, [pc, #232]	; (6134 <udd_ep_run+0x2cc>)
    604c:	4293      	cmp	r3, r2
    604e:	d90e      	bls.n	606e <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    6050:	69bb      	ldr	r3, [r7, #24]
    6052:	8a1b      	ldrh	r3, [r3, #16]
    6054:	0019      	movs	r1, r3
    6056:	4a37      	ldr	r2, [pc, #220]	; (6134 <udd_ep_run+0x2cc>)
    6058:	4b37      	ldr	r3, [pc, #220]	; (6138 <udd_ep_run+0x2d0>)
    605a:	0010      	movs	r0, r2
    605c:	4798      	blx	r3
    605e:	000b      	movs	r3, r1
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    6060:	b29a      	uxth	r2, r3
    6062:	231e      	movs	r3, #30
    6064:	18fb      	adds	r3, r7, r3
    6066:	4933      	ldr	r1, [pc, #204]	; (6134 <udd_ep_run+0x2cc>)
    6068:	1a8a      	subs	r2, r1, r2
    606a:	801a      	strh	r2, [r3, #0]
    606c:	e010      	b.n	6090 <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    606e:	69bb      	ldr	r3, [r7, #24]
    6070:	8a19      	ldrh	r1, [r3, #16]
    6072:	231e      	movs	r3, #30
    6074:	18fb      	adds	r3, r7, r3
    6076:	881a      	ldrh	r2, [r3, #0]
    6078:	4b30      	ldr	r3, [pc, #192]	; (613c <udd_ep_run+0x2d4>)
    607a:	0010      	movs	r0, r2
    607c:	4798      	blx	r3
    607e:	000b      	movs	r3, r1
    6080:	b29a      	uxth	r2, r3
    6082:	231e      	movs	r3, #30
    6084:	18fb      	adds	r3, r7, r3
    6086:	211e      	movs	r1, #30
    6088:	1879      	adds	r1, r7, r1
    608a:	8809      	ldrh	r1, [r1, #0]
    608c:	1a8a      	subs	r2, r1, r2
    608e:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    6090:	69bb      	ldr	r3, [r7, #24]
    6092:	8a1b      	ldrh	r3, [r3, #16]
    6094:	221e      	movs	r2, #30
    6096:	18ba      	adds	r2, r7, r2
    6098:	8812      	ldrh	r2, [r2, #0]
    609a:	429a      	cmp	r2, r3
    609c:	d21a      	bcs.n	60d4 <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    609e:	69bb      	ldr	r3, [r7, #24]
    60a0:	7c9a      	ldrb	r2, [r3, #18]
    60a2:	2104      	movs	r1, #4
    60a4:	430a      	orrs	r2, r1
    60a6:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    60a8:	231d      	movs	r3, #29
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	3b01      	subs	r3, #1
    60b0:	019a      	lsls	r2, r3, #6
    60b2:	4b25      	ldr	r3, [pc, #148]	; (6148 <udd_ep_run+0x2e0>)
    60b4:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    60b6:	69bb      	ldr	r3, [r7, #24]
    60b8:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    60ba:	001c      	movs	r4, r3
    60bc:	231d      	movs	r3, #29
    60be:	18fb      	adds	r3, r7, r3
    60c0:	7819      	ldrb	r1, [r3, #0]
    60c2:	481f      	ldr	r0, [pc, #124]	; (6140 <udd_ep_run+0x2d8>)
    60c4:	0023      	movs	r3, r4
    60c6:	4c21      	ldr	r4, [pc, #132]	; (614c <udd_ep_run+0x2e4>)
    60c8:	47a0      	blx	r4
    60ca:	0003      	movs	r3, r0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    60cc:	425a      	negs	r2, r3
    60ce:	4153      	adcs	r3, r2
    60d0:	b2db      	uxtb	r3, r3
    60d2:	e022      	b.n	611a <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    60d4:	69bb      	ldr	r3, [r7, #24]
    60d6:	685a      	ldr	r2, [r3, #4]
    60d8:	231e      	movs	r3, #30
    60da:	18fb      	adds	r3, r7, r3
    60dc:	881c      	ldrh	r4, [r3, #0]
    60de:	231d      	movs	r3, #29
    60e0:	18fb      	adds	r3, r7, r3
    60e2:	7819      	ldrb	r1, [r3, #0]
    60e4:	4816      	ldr	r0, [pc, #88]	; (6140 <udd_ep_run+0x2d8>)
    60e6:	0023      	movs	r3, r4
    60e8:	4c18      	ldr	r4, [pc, #96]	; (614c <udd_ep_run+0x2e4>)
    60ea:	47a0      	blx	r4
    60ec:	0003      	movs	r3, r0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    60ee:	425a      	negs	r2, r3
    60f0:	4153      	adcs	r3, r2
    60f2:	b2db      	uxtb	r3, r3
    60f4:	e011      	b.n	611a <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    60f6:	69bb      	ldr	r3, [r7, #24]
    60f8:	7c9a      	ldrb	r2, [r3, #18]
    60fa:	2101      	movs	r1, #1
    60fc:	438a      	bics	r2, r1
    60fe:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    6100:	69bb      	ldr	r3, [r7, #24]
    6102:	681b      	ldr	r3, [r3, #0]
    6104:	2b00      	cmp	r3, #0
    6106:	d007      	beq.n	6118 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    6108:	69bb      	ldr	r3, [r7, #24]
    610a:	681b      	ldr	r3, [r3, #0]
    610c:	220f      	movs	r2, #15
    610e:	18ba      	adds	r2, r7, r2
    6110:	7812      	ldrb	r2, [r2, #0]
    6112:	2100      	movs	r1, #0
    6114:	2000      	movs	r0, #0
    6116:	4798      	blx	r3
			}
			return true;
    6118:	2301      	movs	r3, #1
		}
	}
}
    611a:	0018      	movs	r0, r3
    611c:	46bd      	mov	sp, r7
    611e:	b009      	add	sp, #36	; 0x24
    6120:	bd90      	pop	{r4, r7, pc}
    6122:	46c0      	nop			; (mov r8, r8)
    6124:	00005d39 	.word	0x00005d39
    6128:	00005691 	.word	0x00005691
    612c:	0000530d 	.word	0x0000530d
    6130:	00005355 	.word	0x00005355
    6134:	00001fff 	.word	0x00001fff
    6138:	00008f35 	.word	0x00008f35
    613c:	00008d61 	.word	0x00008d61
    6140:	20000374 	.word	0x20000374
    6144:	00007d7d 	.word	0x00007d7d
    6148:	20000334 	.word	0x20000334
    614c:	00007e31 	.word	0x00007e31

00006150 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    6150:	b580      	push	{r7, lr}
    6152:	b082      	sub	sp, #8
    6154:	af00      	add	r7, sp, #0
    6156:	0002      	movs	r2, r0
    6158:	1dfb      	adds	r3, r7, #7
    615a:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    615c:	1dfb      	adds	r3, r7, #7
    615e:	781a      	ldrb	r2, [r3, #0]
    6160:	4b04      	ldr	r3, [pc, #16]	; (6174 <udd_set_address+0x24>)
    6162:	0011      	movs	r1, r2
    6164:	0018      	movs	r0, r3
    6166:	4b04      	ldr	r3, [pc, #16]	; (6178 <udd_set_address+0x28>)
    6168:	4798      	blx	r3
}
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	46bd      	mov	sp, r7
    616e:	b002      	add	sp, #8
    6170:	bd80      	pop	{r7, pc}
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	20000374 	.word	0x20000374
    6178:	00005449 	.word	0x00005449

0000617c <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    617c:	b580      	push	{r7, lr}
    617e:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <udd_getaddress+0x14>)
    6182:	0018      	movs	r0, r3
    6184:	4b03      	ldr	r3, [pc, #12]	; (6194 <udd_getaddress+0x18>)
    6186:	4798      	blx	r3
    6188:	0003      	movs	r3, r0
}
    618a:	0018      	movs	r0, r3
    618c:	46bd      	mov	sp, r7
    618e:	bd80      	pop	{r7, pc}
    6190:	20000374 	.word	0x20000374
    6194:	0000542d 	.word	0x0000542d

00006198 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    6198:	b580      	push	{r7, lr}
    619a:	b082      	sub	sp, #8
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
    61a0:	000a      	movs	r2, r1
    61a2:	1cbb      	adds	r3, r7, #2
    61a4:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    61a6:	4b05      	ldr	r3, [pc, #20]	; (61bc <udd_set_setup_payload+0x24>)
    61a8:	687a      	ldr	r2, [r7, #4]
    61aa:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    61ac:	4b03      	ldr	r3, [pc, #12]	; (61bc <udd_set_setup_payload+0x24>)
    61ae:	1cba      	adds	r2, r7, #2
    61b0:	8812      	ldrh	r2, [r2, #0]
    61b2:	819a      	strh	r2, [r3, #12]
}
    61b4:	46c0      	nop			; (mov r8, r8)
    61b6:	46bd      	mov	sp, r7
    61b8:	b002      	add	sp, #8
    61ba:	bd80      	pop	{r7, pc}
    61bc:	200004dc 	.word	0x200004dc

000061c0 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    61c0:	b580      	push	{r7, lr}
    61c2:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    61c4:	4b17      	ldr	r3, [pc, #92]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61c6:	781a      	ldrb	r2, [r3, #0]
    61c8:	4b17      	ldr	r3, [pc, #92]	; (6228 <udd_ctrl_fetch_ram+0x68>)
    61ca:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    61cc:	4b15      	ldr	r3, [pc, #84]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61ce:	785a      	ldrb	r2, [r3, #1]
    61d0:	4b15      	ldr	r3, [pc, #84]	; (6228 <udd_ctrl_fetch_ram+0x68>)
    61d2:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    61d4:	4b13      	ldr	r3, [pc, #76]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61d6:	78db      	ldrb	r3, [r3, #3]
    61d8:	b29b      	uxth	r3, r3
    61da:	021b      	lsls	r3, r3, #8
    61dc:	b29a      	uxth	r2, r3
    61de:	4b11      	ldr	r3, [pc, #68]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61e0:	789b      	ldrb	r3, [r3, #2]
    61e2:	b29b      	uxth	r3, r3
    61e4:	18d3      	adds	r3, r2, r3
    61e6:	b29a      	uxth	r2, r3
    61e8:	4b0f      	ldr	r3, [pc, #60]	; (6228 <udd_ctrl_fetch_ram+0x68>)
    61ea:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    61ec:	4b0d      	ldr	r3, [pc, #52]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61ee:	795b      	ldrb	r3, [r3, #5]
    61f0:	b29b      	uxth	r3, r3
    61f2:	021b      	lsls	r3, r3, #8
    61f4:	b29a      	uxth	r2, r3
    61f6:	4b0b      	ldr	r3, [pc, #44]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    61f8:	791b      	ldrb	r3, [r3, #4]
    61fa:	b29b      	uxth	r3, r3
    61fc:	18d3      	adds	r3, r2, r3
    61fe:	b29a      	uxth	r2, r3
    6200:	4b09      	ldr	r3, [pc, #36]	; (6228 <udd_ctrl_fetch_ram+0x68>)
    6202:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    6204:	4b07      	ldr	r3, [pc, #28]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    6206:	79db      	ldrb	r3, [r3, #7]
    6208:	b29b      	uxth	r3, r3
    620a:	021b      	lsls	r3, r3, #8
    620c:	b29a      	uxth	r2, r3
    620e:	4b05      	ldr	r3, [pc, #20]	; (6224 <udd_ctrl_fetch_ram+0x64>)
    6210:	799b      	ldrb	r3, [r3, #6]
    6212:	b29b      	uxth	r3, r3
    6214:	18d3      	adds	r3, r2, r3
    6216:	b29a      	uxth	r2, r3
    6218:	4b03      	ldr	r3, [pc, #12]	; (6228 <udd_ctrl_fetch_ram+0x68>)
    621a:	80da      	strh	r2, [r3, #6]
}
    621c:	46c0      	nop			; (mov r8, r8)
    621e:	46bd      	mov	sp, r7
    6220:	bd80      	pop	{r7, pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	200004f4 	.word	0x200004f4
    6228:	200004dc 	.word	0x200004dc

0000622c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    622c:	b5b0      	push	{r4, r5, r7, lr}
    622e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    6230:	4b09      	ldr	r3, [pc, #36]	; (6258 <udd_ctrl_send_zlp_in+0x2c>)
    6232:	2203      	movs	r2, #3
    6234:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    6236:	4a09      	ldr	r2, [pc, #36]	; (625c <udd_ctrl_send_zlp_in+0x30>)
    6238:	4b09      	ldr	r3, [pc, #36]	; (6260 <udd_ctrl_send_zlp_in+0x34>)
    623a:	0011      	movs	r1, r2
    623c:	0018      	movs	r0, r3
    623e:	4b09      	ldr	r3, [pc, #36]	; (6264 <udd_ctrl_send_zlp_in+0x38>)
    6240:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    6242:	4b09      	ldr	r3, [pc, #36]	; (6268 <udd_ctrl_send_zlp_in+0x3c>)
    6244:	689a      	ldr	r2, [r3, #8]
    6246:	4806      	ldr	r0, [pc, #24]	; (6260 <udd_ctrl_send_zlp_in+0x34>)
    6248:	2300      	movs	r3, #0
    624a:	2100      	movs	r1, #0
    624c:	4c07      	ldr	r4, [pc, #28]	; (626c <udd_ctrl_send_zlp_in+0x40>)
    624e:	47a0      	blx	r4
}
    6250:	46c0      	nop			; (mov r8, r8)
    6252:	46bd      	mov	sp, r7
    6254:	bdb0      	pop	{r4, r5, r7, pc}
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	200001e0 	.word	0x200001e0
    625c:	200004f4 	.word	0x200004f4
    6260:	20000374 	.word	0x20000374
    6264:	00007ee1 	.word	0x00007ee1
    6268:	200004dc 	.word	0x200004dc
    626c:	00007d7d 	.word	0x00007d7d

00006270 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    6270:	b590      	push	{r4, r7, lr}
    6272:	b083      	sub	sp, #12
    6274:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6276:	4b30      	ldr	r3, [pc, #192]	; (6338 <udd_ctrl_in_sent+0xc8>)
    6278:	8999      	ldrh	r1, [r3, #12]
    627a:	4b30      	ldr	r3, [pc, #192]	; (633c <udd_ctrl_in_sent+0xcc>)
    627c:	881a      	ldrh	r2, [r3, #0]
    627e:	1dbb      	adds	r3, r7, #6
    6280:	1a8a      	subs	r2, r1, r2
    6282:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    6284:	1dbb      	adds	r3, r7, #6
    6286:	881b      	ldrh	r3, [r3, #0]
    6288:	2b00      	cmp	r3, #0
    628a:	d130      	bne.n	62ee <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    628c:	4b2c      	ldr	r3, [pc, #176]	; (6340 <udd_ctrl_in_sent+0xd0>)
    628e:	881a      	ldrh	r2, [r3, #0]
    6290:	4b2a      	ldr	r3, [pc, #168]	; (633c <udd_ctrl_in_sent+0xcc>)
    6292:	881b      	ldrh	r3, [r3, #0]
    6294:	18d3      	adds	r3, r2, r3
    6296:	b29a      	uxth	r2, r3
    6298:	4b29      	ldr	r3, [pc, #164]	; (6340 <udd_ctrl_in_sent+0xd0>)
    629a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    629c:	4b26      	ldr	r3, [pc, #152]	; (6338 <udd_ctrl_in_sent+0xc8>)
    629e:	88da      	ldrh	r2, [r3, #6]
    62a0:	4b27      	ldr	r3, [pc, #156]	; (6340 <udd_ctrl_in_sent+0xd0>)
    62a2:	881b      	ldrh	r3, [r3, #0]
    62a4:	429a      	cmp	r2, r3
    62a6:	d003      	beq.n	62b0 <udd_ctrl_in_sent+0x40>
    62a8:	4b26      	ldr	r3, [pc, #152]	; (6344 <udd_ctrl_in_sent+0xd4>)
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d009      	beq.n	62c4 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    62b0:	4b25      	ldr	r3, [pc, #148]	; (6348 <udd_ctrl_in_sent+0xd8>)
    62b2:	2204      	movs	r2, #4
    62b4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    62b6:	4a25      	ldr	r2, [pc, #148]	; (634c <udd_ctrl_in_sent+0xdc>)
    62b8:	4b25      	ldr	r3, [pc, #148]	; (6350 <udd_ctrl_in_sent+0xe0>)
    62ba:	0011      	movs	r1, r2
    62bc:	0018      	movs	r0, r3
    62be:	4b25      	ldr	r3, [pc, #148]	; (6354 <udd_ctrl_in_sent+0xe4>)
    62c0:	4798      	blx	r3
			return;
    62c2:	e035      	b.n	6330 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    62c4:	4b1c      	ldr	r3, [pc, #112]	; (6338 <udd_ctrl_in_sent+0xc8>)
    62c6:	695b      	ldr	r3, [r3, #20]
    62c8:	2b00      	cmp	r3, #0
    62ca:	d010      	beq.n	62ee <udd_ctrl_in_sent+0x7e>
    62cc:	4b1a      	ldr	r3, [pc, #104]	; (6338 <udd_ctrl_in_sent+0xc8>)
    62ce:	695b      	ldr	r3, [r3, #20]
    62d0:	4798      	blx	r3
    62d2:	0003      	movs	r3, r0
    62d4:	001a      	movs	r2, r3
    62d6:	2301      	movs	r3, #1
    62d8:	4053      	eors	r3, r2
    62da:	b2db      	uxtb	r3, r3
    62dc:	2b00      	cmp	r3, #0
    62de:	d106      	bne.n	62ee <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    62e0:	4b16      	ldr	r3, [pc, #88]	; (633c <udd_ctrl_in_sent+0xcc>)
    62e2:	2200      	movs	r2, #0
    62e4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    62e6:	1dbb      	adds	r3, r7, #6
    62e8:	4a13      	ldr	r2, [pc, #76]	; (6338 <udd_ctrl_in_sent+0xc8>)
    62ea:	8992      	ldrh	r2, [r2, #12]
    62ec:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    62ee:	1dbb      	adds	r3, r7, #6
    62f0:	881b      	ldrh	r3, [r3, #0]
    62f2:	2b07      	cmp	r3, #7
    62f4:	d906      	bls.n	6304 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    62f6:	1dbb      	adds	r3, r7, #6
    62f8:	2208      	movs	r2, #8
    62fa:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    62fc:	4b11      	ldr	r3, [pc, #68]	; (6344 <udd_ctrl_in_sent+0xd4>)
    62fe:	2200      	movs	r2, #0
    6300:	701a      	strb	r2, [r3, #0]
    6302:	e002      	b.n	630a <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    6304:	4b0f      	ldr	r3, [pc, #60]	; (6344 <udd_ctrl_in_sent+0xd4>)
    6306:	2201      	movs	r2, #1
    6308:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    630a:	4b0b      	ldr	r3, [pc, #44]	; (6338 <udd_ctrl_in_sent+0xc8>)
    630c:	689b      	ldr	r3, [r3, #8]
    630e:	4a0b      	ldr	r2, [pc, #44]	; (633c <udd_ctrl_in_sent+0xcc>)
    6310:	8812      	ldrh	r2, [r2, #0]
    6312:	189a      	adds	r2, r3, r2
    6314:	1dbb      	adds	r3, r7, #6
    6316:	881b      	ldrh	r3, [r3, #0]
    6318:	480d      	ldr	r0, [pc, #52]	; (6350 <udd_ctrl_in_sent+0xe0>)
    631a:	2100      	movs	r1, #0
    631c:	4c0e      	ldr	r4, [pc, #56]	; (6358 <udd_ctrl_in_sent+0xe8>)
    631e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    6320:	4b06      	ldr	r3, [pc, #24]	; (633c <udd_ctrl_in_sent+0xcc>)
    6322:	881a      	ldrh	r2, [r3, #0]
    6324:	1dbb      	adds	r3, r7, #6
    6326:	881b      	ldrh	r3, [r3, #0]
    6328:	18d3      	adds	r3, r2, r3
    632a:	b29a      	uxth	r2, r3
    632c:	4b03      	ldr	r3, [pc, #12]	; (633c <udd_ctrl_in_sent+0xcc>)
    632e:	801a      	strh	r2, [r3, #0]
}
    6330:	46bd      	mov	sp, r7
    6332:	b003      	add	sp, #12
    6334:	bd90      	pop	{r4, r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	200004dc 	.word	0x200004dc
    633c:	200001e4 	.word	0x200001e4
    6340:	200001e2 	.word	0x200001e2
    6344:	20000211 	.word	0x20000211
    6348:	200001e0 	.word	0x200001e0
    634c:	200004f4 	.word	0x200004f4
    6350:	20000374 	.word	0x20000374
    6354:	00007ee1 	.word	0x00007ee1
    6358:	00007d7d 	.word	0x00007d7d

0000635c <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    635c:	b590      	push	{r4, r7, lr}
    635e:	b085      	sub	sp, #20
    6360:	af00      	add	r7, sp, #0
    6362:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6364:	687b      	ldr	r3, [r7, #4]
    6366:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    6368:	230e      	movs	r3, #14
    636a:	18fb      	adds	r3, r7, r3
    636c:	68ba      	ldr	r2, [r7, #8]
    636e:	8812      	ldrh	r2, [r2, #0]
    6370:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6372:	4b45      	ldr	r3, [pc, #276]	; (6488 <udd_ctrl_out_received+0x12c>)
    6374:	899b      	ldrh	r3, [r3, #12]
    6376:	001a      	movs	r2, r3
    6378:	4b44      	ldr	r3, [pc, #272]	; (648c <udd_ctrl_out_received+0x130>)
    637a:	881b      	ldrh	r3, [r3, #0]
    637c:	0019      	movs	r1, r3
    637e:	230e      	movs	r3, #14
    6380:	18fb      	adds	r3, r7, r3
    6382:	881b      	ldrh	r3, [r3, #0]
    6384:	18cb      	adds	r3, r1, r3
    6386:	429a      	cmp	r2, r3
    6388:	da07      	bge.n	639a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    638a:	4b3f      	ldr	r3, [pc, #252]	; (6488 <udd_ctrl_out_received+0x12c>)
    638c:	8999      	ldrh	r1, [r3, #12]
    638e:	4b3f      	ldr	r3, [pc, #252]	; (648c <udd_ctrl_out_received+0x130>)
    6390:	881a      	ldrh	r2, [r3, #0]
    6392:	230e      	movs	r3, #14
    6394:	18fb      	adds	r3, r7, r3
    6396:	1a8a      	subs	r2, r1, r2
    6398:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    639a:	4b3b      	ldr	r3, [pc, #236]	; (6488 <udd_ctrl_out_received+0x12c>)
    639c:	689b      	ldr	r3, [r3, #8]
    639e:	4a3b      	ldr	r2, [pc, #236]	; (648c <udd_ctrl_out_received+0x130>)
    63a0:	8812      	ldrh	r2, [r2, #0]
    63a2:	1898      	adds	r0, r3, r2
    63a4:	230e      	movs	r3, #14
    63a6:	18fb      	adds	r3, r7, r3
    63a8:	881a      	ldrh	r2, [r3, #0]
    63aa:	4b39      	ldr	r3, [pc, #228]	; (6490 <udd_ctrl_out_received+0x134>)
    63ac:	0019      	movs	r1, r3
    63ae:	4b39      	ldr	r3, [pc, #228]	; (6494 <udd_ctrl_out_received+0x138>)
    63b0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    63b2:	4b36      	ldr	r3, [pc, #216]	; (648c <udd_ctrl_out_received+0x130>)
    63b4:	881a      	ldrh	r2, [r3, #0]
    63b6:	230e      	movs	r3, #14
    63b8:	18fb      	adds	r3, r7, r3
    63ba:	881b      	ldrh	r3, [r3, #0]
    63bc:	18d3      	adds	r3, r2, r3
    63be:	b29a      	uxth	r2, r3
    63c0:	4b32      	ldr	r3, [pc, #200]	; (648c <udd_ctrl_out_received+0x130>)
    63c2:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    63c4:	230e      	movs	r3, #14
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	881b      	ldrh	r3, [r3, #0]
    63ca:	2b08      	cmp	r3, #8
    63cc:	d10a      	bne.n	63e4 <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    63ce:	4b2e      	ldr	r3, [pc, #184]	; (6488 <udd_ctrl_out_received+0x12c>)
    63d0:	88db      	ldrh	r3, [r3, #6]
    63d2:	001a      	movs	r2, r3
    63d4:	4b30      	ldr	r3, [pc, #192]	; (6498 <udd_ctrl_out_received+0x13c>)
    63d6:	881b      	ldrh	r3, [r3, #0]
    63d8:	0019      	movs	r1, r3
    63da:	4b2c      	ldr	r3, [pc, #176]	; (648c <udd_ctrl_out_received+0x130>)
    63dc:	881b      	ldrh	r3, [r3, #0]
    63de:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    63e0:	429a      	cmp	r2, r3
    63e2:	dc1b      	bgt.n	641c <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    63e4:	4b29      	ldr	r3, [pc, #164]	; (648c <udd_ctrl_out_received+0x130>)
    63e6:	881a      	ldrh	r2, [r3, #0]
    63e8:	4b27      	ldr	r3, [pc, #156]	; (6488 <udd_ctrl_out_received+0x12c>)
    63ea:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    63ec:	4b26      	ldr	r3, [pc, #152]	; (6488 <udd_ctrl_out_received+0x12c>)
    63ee:	695b      	ldr	r3, [r3, #20]
    63f0:	2b00      	cmp	r3, #0
    63f2:	d010      	beq.n	6416 <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    63f4:	4b24      	ldr	r3, [pc, #144]	; (6488 <udd_ctrl_out_received+0x12c>)
    63f6:	695b      	ldr	r3, [r3, #20]
    63f8:	4798      	blx	r3
    63fa:	0003      	movs	r3, r0
    63fc:	001a      	movs	r2, r3
    63fe:	2301      	movs	r3, #1
    6400:	4053      	eors	r3, r2
    6402:	b2db      	uxtb	r3, r3
    6404:	2b00      	cmp	r3, #0
    6406:	d006      	beq.n	6416 <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6408:	4b24      	ldr	r3, [pc, #144]	; (649c <udd_ctrl_out_received+0x140>)
    640a:	2205      	movs	r2, #5
    640c:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    640e:	2000      	movs	r0, #0
    6410:	4b23      	ldr	r3, [pc, #140]	; (64a0 <udd_ctrl_out_received+0x144>)
    6412:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    6414:	e035      	b.n	6482 <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    6416:	4b23      	ldr	r3, [pc, #140]	; (64a4 <udd_ctrl_out_received+0x148>)
    6418:	4798      	blx	r3
		return;
    641a:	e032      	b.n	6482 <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    641c:	4b1a      	ldr	r3, [pc, #104]	; (6488 <udd_ctrl_out_received+0x12c>)
    641e:	899a      	ldrh	r2, [r3, #12]
    6420:	4b1a      	ldr	r3, [pc, #104]	; (648c <udd_ctrl_out_received+0x130>)
    6422:	881b      	ldrh	r3, [r3, #0]
    6424:	429a      	cmp	r2, r3
    6426:	d126      	bne.n	6476 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    6428:	4b17      	ldr	r3, [pc, #92]	; (6488 <udd_ctrl_out_received+0x12c>)
    642a:	695b      	ldr	r3, [r3, #20]
    642c:	2b00      	cmp	r3, #0
    642e:	d106      	bne.n	643e <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6430:	4b1a      	ldr	r3, [pc, #104]	; (649c <udd_ctrl_out_received+0x140>)
    6432:	2205      	movs	r2, #5
    6434:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6436:	2000      	movs	r0, #0
    6438:	4b19      	ldr	r3, [pc, #100]	; (64a0 <udd_ctrl_out_received+0x144>)
    643a:	4798      	blx	r3
			return;
    643c:	e021      	b.n	6482 <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    643e:	4b12      	ldr	r3, [pc, #72]	; (6488 <udd_ctrl_out_received+0x12c>)
    6440:	695b      	ldr	r3, [r3, #20]
    6442:	4798      	blx	r3
    6444:	0003      	movs	r3, r0
    6446:	001a      	movs	r2, r3
    6448:	2301      	movs	r3, #1
    644a:	4053      	eors	r3, r2
    644c:	b2db      	uxtb	r3, r3
    644e:	2b00      	cmp	r3, #0
    6450:	d006      	beq.n	6460 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6452:	4b12      	ldr	r3, [pc, #72]	; (649c <udd_ctrl_out_received+0x140>)
    6454:	2205      	movs	r2, #5
    6456:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6458:	2000      	movs	r0, #0
    645a:	4b11      	ldr	r3, [pc, #68]	; (64a0 <udd_ctrl_out_received+0x144>)
    645c:	4798      	blx	r3
			return;
    645e:	e010      	b.n	6482 <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6460:	4b0d      	ldr	r3, [pc, #52]	; (6498 <udd_ctrl_out_received+0x13c>)
    6462:	881a      	ldrh	r2, [r3, #0]
    6464:	4b09      	ldr	r3, [pc, #36]	; (648c <udd_ctrl_out_received+0x130>)
    6466:	881b      	ldrh	r3, [r3, #0]
    6468:	18d3      	adds	r3, r2, r3
    646a:	b29a      	uxth	r2, r3
    646c:	4b0a      	ldr	r3, [pc, #40]	; (6498 <udd_ctrl_out_received+0x13c>)
    646e:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    6470:	4b06      	ldr	r3, [pc, #24]	; (648c <udd_ctrl_out_received+0x130>)
    6472:	2200      	movs	r2, #0
    6474:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6476:	4a06      	ldr	r2, [pc, #24]	; (6490 <udd_ctrl_out_received+0x134>)
    6478:	480b      	ldr	r0, [pc, #44]	; (64a8 <udd_ctrl_out_received+0x14c>)
    647a:	2308      	movs	r3, #8
    647c:	2100      	movs	r1, #0
    647e:	4c0b      	ldr	r4, [pc, #44]	; (64ac <udd_ctrl_out_received+0x150>)
    6480:	47a0      	blx	r4
}
    6482:	46bd      	mov	sp, r7
    6484:	b005      	add	sp, #20
    6486:	bd90      	pop	{r4, r7, pc}
    6488:	200004dc 	.word	0x200004dc
    648c:	200001e4 	.word	0x200001e4
    6490:	200004f4 	.word	0x200004f4
    6494:	00008fcd 	.word	0x00008fcd
    6498:	200001e2 	.word	0x200001e2
    649c:	200001e0 	.word	0x200001e0
    64a0:	00005d65 	.word	0x00005d65
    64a4:	0000622d 	.word	0x0000622d
    64a8:	20000374 	.word	0x20000374
    64ac:	00007e31 	.word	0x00007e31

000064b0 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    64b0:	b590      	push	{r4, r7, lr}
    64b2:	b085      	sub	sp, #20
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
    64b8:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    64ba:	683b      	ldr	r3, [r7, #0]
    64bc:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    64be:	4b29      	ldr	r3, [pc, #164]	; (6564 <_usb_ep0_on_setup+0xb4>)
    64c0:	781b      	ldrb	r3, [r3, #0]
    64c2:	2b00      	cmp	r3, #0
    64c4:	d009      	beq.n	64da <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    64c6:	4b28      	ldr	r3, [pc, #160]	; (6568 <_usb_ep0_on_setup+0xb8>)
    64c8:	691b      	ldr	r3, [r3, #16]
    64ca:	2b00      	cmp	r3, #0
    64cc:	d002      	beq.n	64d4 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    64ce:	4b26      	ldr	r3, [pc, #152]	; (6568 <_usb_ep0_on_setup+0xb8>)
    64d0:	691b      	ldr	r3, [r3, #16]
    64d2:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    64d4:	4b23      	ldr	r3, [pc, #140]	; (6564 <_usb_ep0_on_setup+0xb4>)
    64d6:	2200      	movs	r2, #0
    64d8:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	881b      	ldrh	r3, [r3, #0]
    64de:	2b08      	cmp	r3, #8
    64e0:	d002      	beq.n	64e8 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    64e2:	4b22      	ldr	r3, [pc, #136]	; (656c <_usb_ep0_on_setup+0xbc>)
    64e4:	4798      	blx	r3
		return;
    64e6:	e03a      	b.n	655e <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    64e8:	4b21      	ldr	r3, [pc, #132]	; (6570 <_usb_ep0_on_setup+0xc0>)
    64ea:	4798      	blx	r3
		if (false == udc_process_setup()) {
    64ec:	4b21      	ldr	r3, [pc, #132]	; (6574 <_usb_ep0_on_setup+0xc4>)
    64ee:	4798      	blx	r3
    64f0:	0003      	movs	r3, r0
    64f2:	001a      	movs	r2, r3
    64f4:	2301      	movs	r3, #1
    64f6:	4053      	eors	r3, r2
    64f8:	b2db      	uxtb	r3, r3
    64fa:	2b00      	cmp	r3, #0
    64fc:	d002      	beq.n	6504 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    64fe:	4b1b      	ldr	r3, [pc, #108]	; (656c <_usb_ep0_on_setup+0xbc>)
    6500:	4798      	blx	r3
			return;
    6502:	e02c      	b.n	655e <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    6504:	4b18      	ldr	r3, [pc, #96]	; (6568 <_usb_ep0_on_setup+0xb8>)
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	b25b      	sxtb	r3, r3
    650a:	2b00      	cmp	r3, #0
    650c:	da11      	bge.n	6532 <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    650e:	4b1a      	ldr	r3, [pc, #104]	; (6578 <_usb_ep0_on_setup+0xc8>)
    6510:	2200      	movs	r2, #0
    6512:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    6514:	4b19      	ldr	r3, [pc, #100]	; (657c <_usb_ep0_on_setup+0xcc>)
    6516:	2200      	movs	r2, #0
    6518:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    651a:	4b12      	ldr	r3, [pc, #72]	; (6564 <_usb_ep0_on_setup+0xb4>)
    651c:	2202      	movs	r2, #2
    651e:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6520:	4a17      	ldr	r2, [pc, #92]	; (6580 <_usb_ep0_on_setup+0xd0>)
    6522:	4818      	ldr	r0, [pc, #96]	; (6584 <_usb_ep0_on_setup+0xd4>)
    6524:	2308      	movs	r3, #8
    6526:	2100      	movs	r1, #0
    6528:	4c17      	ldr	r4, [pc, #92]	; (6588 <_usb_ep0_on_setup+0xd8>)
    652a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    652c:	4b17      	ldr	r3, [pc, #92]	; (658c <_usb_ep0_on_setup+0xdc>)
    652e:	4798      	blx	r3
    6530:	e015      	b.n	655e <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    6532:	4b0d      	ldr	r3, [pc, #52]	; (6568 <_usb_ep0_on_setup+0xb8>)
    6534:	88db      	ldrh	r3, [r3, #6]
    6536:	2b00      	cmp	r3, #0
    6538:	d102      	bne.n	6540 <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    653a:	4b15      	ldr	r3, [pc, #84]	; (6590 <_usb_ep0_on_setup+0xe0>)
    653c:	4798      	blx	r3
				return;
    653e:	e00e      	b.n	655e <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    6540:	4b0d      	ldr	r3, [pc, #52]	; (6578 <_usb_ep0_on_setup+0xc8>)
    6542:	2200      	movs	r2, #0
    6544:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    6546:	4b0d      	ldr	r3, [pc, #52]	; (657c <_usb_ep0_on_setup+0xcc>)
    6548:	2200      	movs	r2, #0
    654a:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    654c:	4b05      	ldr	r3, [pc, #20]	; (6564 <_usb_ep0_on_setup+0xb4>)
    654e:	2201      	movs	r2, #1
    6550:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6552:	4a0b      	ldr	r2, [pc, #44]	; (6580 <_usb_ep0_on_setup+0xd0>)
    6554:	480b      	ldr	r0, [pc, #44]	; (6584 <_usb_ep0_on_setup+0xd4>)
    6556:	2308      	movs	r3, #8
    6558:	2100      	movs	r1, #0
    655a:	4c0b      	ldr	r4, [pc, #44]	; (6588 <_usb_ep0_on_setup+0xd8>)
    655c:	47a0      	blx	r4
			}
		}
	}
}
    655e:	46bd      	mov	sp, r7
    6560:	b005      	add	sp, #20
    6562:	bd90      	pop	{r4, r7, pc}
    6564:	200001e0 	.word	0x200001e0
    6568:	200004dc 	.word	0x200004dc
    656c:	00005e35 	.word	0x00005e35
    6570:	000061c1 	.word	0x000061c1
    6574:	00003c45 	.word	0x00003c45
    6578:	200001e2 	.word	0x200001e2
    657c:	200001e4 	.word	0x200001e4
    6580:	200004f4 	.word	0x200004f4
    6584:	20000374 	.word	0x20000374
    6588:	00007e31 	.word	0x00007e31
    658c:	00006271 	.word	0x00006271
    6590:	0000622d 	.word	0x0000622d

00006594 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    6594:	b580      	push	{r7, lr}
    6596:	b084      	sub	sp, #16
    6598:	af00      	add	r7, sp, #0
    659a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    659c:	687b      	ldr	r3, [r7, #4]
    659e:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    65a0:	4b0a      	ldr	r3, [pc, #40]	; (65cc <udd_ctrl_underflow+0x38>)
    65a2:	781b      	ldrb	r3, [r3, #0]
    65a4:	2b01      	cmp	r3, #1
    65a6:	d102      	bne.n	65ae <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    65a8:	4b09      	ldr	r3, [pc, #36]	; (65d0 <udd_ctrl_underflow+0x3c>)
    65aa:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    65ac:	e00a      	b.n	65c4 <udd_ctrl_underflow+0x30>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    65ae:	4b07      	ldr	r3, [pc, #28]	; (65cc <udd_ctrl_underflow+0x38>)
    65b0:	781b      	ldrb	r3, [r3, #0]
    65b2:	2b04      	cmp	r3, #4
    65b4:	d106      	bne.n	65c4 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    65b6:	68fb      	ldr	r3, [r7, #12]
    65b8:	799a      	ldrb	r2, [r3, #6]
    65ba:	4b06      	ldr	r3, [pc, #24]	; (65d4 <udd_ctrl_underflow+0x40>)
    65bc:	0011      	movs	r1, r2
    65be:	0018      	movs	r0, r3
    65c0:	4b05      	ldr	r3, [pc, #20]	; (65d8 <udd_ctrl_underflow+0x44>)
    65c2:	4798      	blx	r3
	}
}
    65c4:	46c0      	nop			; (mov r8, r8)
    65c6:	46bd      	mov	sp, r7
    65c8:	b004      	add	sp, #16
    65ca:	bd80      	pop	{r7, pc}
    65cc:	200001e0 	.word	0x200001e0
    65d0:	0000622d 	.word	0x0000622d
    65d4:	20000374 	.word	0x20000374
    65d8:	00007bf5 	.word	0x00007bf5

000065dc <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    65dc:	b580      	push	{r7, lr}
    65de:	b084      	sub	sp, #16
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    65e8:	4b0b      	ldr	r3, [pc, #44]	; (6618 <udd_ctrl_overflow+0x3c>)
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	2b02      	cmp	r3, #2
    65ee:	d103      	bne.n	65f8 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    65f0:	4b09      	ldr	r3, [pc, #36]	; (6618 <udd_ctrl_overflow+0x3c>)
    65f2:	2204      	movs	r2, #4
    65f4:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    65f6:	e00a      	b.n	660e <udd_ctrl_overflow+0x32>

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    65f8:	4b07      	ldr	r3, [pc, #28]	; (6618 <udd_ctrl_overflow+0x3c>)
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	2b03      	cmp	r3, #3
    65fe:	d106      	bne.n	660e <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    6600:	68fb      	ldr	r3, [r7, #12]
    6602:	799a      	ldrb	r2, [r3, #6]
    6604:	4b05      	ldr	r3, [pc, #20]	; (661c <udd_ctrl_overflow+0x40>)
    6606:	0011      	movs	r1, r2
    6608:	0018      	movs	r0, r3
    660a:	4b05      	ldr	r3, [pc, #20]	; (6620 <udd_ctrl_overflow+0x44>)
    660c:	4798      	blx	r3
	}
}
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	46bd      	mov	sp, r7
    6612:	b004      	add	sp, #16
    6614:	bd80      	pop	{r7, pc}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	200001e0 	.word	0x200001e0
    661c:	20000374 	.word	0x20000374
    6620:	00007bf5 	.word	0x00007bf5

00006624 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    6624:	b580      	push	{r7, lr}
    6626:	b084      	sub	sp, #16
    6628:	af00      	add	r7, sp, #0
    662a:	6078      	str	r0, [r7, #4]
    662c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    662e:	683b      	ldr	r3, [r7, #0]
    6630:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    6632:	68fb      	ldr	r3, [r7, #12]
    6634:	799b      	ldrb	r3, [r3, #6]
    6636:	b25b      	sxtb	r3, r3
    6638:	2b00      	cmp	r3, #0
    663a:	da04      	bge.n	6646 <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    663c:	683b      	ldr	r3, [r7, #0]
    663e:	0018      	movs	r0, r3
    6640:	4b05      	ldr	r3, [pc, #20]	; (6658 <_usb_ep0_on_tansfer_fail+0x34>)
    6642:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    6644:	e003      	b.n	664e <_usb_ep0_on_tansfer_fail+0x2a>
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
    6646:	683b      	ldr	r3, [r7, #0]
    6648:	0018      	movs	r0, r3
    664a:	4b04      	ldr	r3, [pc, #16]	; (665c <_usb_ep0_on_tansfer_fail+0x38>)
    664c:	4798      	blx	r3
	}
}
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	46bd      	mov	sp, r7
    6652:	b004      	add	sp, #16
    6654:	bd80      	pop	{r7, pc}
    6656:	46c0      	nop			; (mov r8, r8)
    6658:	00006595 	.word	0x00006595
    665c:	000065dd 	.word	0x000065dd

00006660 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    6660:	b580      	push	{r7, lr}
    6662:	b082      	sub	sp, #8
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
    6668:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    666a:	4b0f      	ldr	r3, [pc, #60]	; (66a8 <_usb_ep0_on_tansfer_ok+0x48>)
    666c:	781b      	ldrb	r3, [r3, #0]
    666e:	2b01      	cmp	r3, #1
    6670:	d104      	bne.n	667c <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    6672:	683b      	ldr	r3, [r7, #0]
    6674:	0018      	movs	r0, r3
    6676:	4b0d      	ldr	r3, [pc, #52]	; (66ac <_usb_ep0_on_tansfer_ok+0x4c>)
    6678:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    667a:	e010      	b.n	669e <_usb_ep0_on_tansfer_ok+0x3e>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    667c:	4b0a      	ldr	r3, [pc, #40]	; (66a8 <_usb_ep0_on_tansfer_ok+0x48>)
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	2b02      	cmp	r3, #2
    6682:	d102      	bne.n	668a <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    6684:	4b0a      	ldr	r3, [pc, #40]	; (66b0 <_usb_ep0_on_tansfer_ok+0x50>)
    6686:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    6688:	e009      	b.n	669e <_usb_ep0_on_tansfer_ok+0x3e>
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
			udd_ctrl_in_sent();
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    668a:	4b0a      	ldr	r3, [pc, #40]	; (66b4 <_usb_ep0_on_tansfer_ok+0x54>)
    668c:	691b      	ldr	r3, [r3, #16]
    668e:	2b00      	cmp	r3, #0
    6690:	d002      	beq.n	6698 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    6692:	4b08      	ldr	r3, [pc, #32]	; (66b4 <_usb_ep0_on_tansfer_ok+0x54>)
    6694:	691b      	ldr	r3, [r3, #16]
    6696:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    6698:	4b03      	ldr	r3, [pc, #12]	; (66a8 <_usb_ep0_on_tansfer_ok+0x48>)
    669a:	2200      	movs	r2, #0
    669c:	701a      	strb	r2, [r3, #0]
		}
}
    669e:	46c0      	nop			; (mov r8, r8)
    66a0:	46bd      	mov	sp, r7
    66a2:	b002      	add	sp, #8
    66a4:	bd80      	pop	{r7, pc}
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	200001e0 	.word	0x200001e0
    66ac:	0000635d 	.word	0x0000635d
    66b0:	00006271 	.word	0x00006271
    66b4:	200004dc 	.word	0x200004dc

000066b8 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    66b8:	b590      	push	{r4, r7, lr}
    66ba:	b085      	sub	sp, #20
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    66c0:	230c      	movs	r3, #12
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	0018      	movs	r0, r3
    66c6:	4b21      	ldr	r3, [pc, #132]	; (674c <udd_ctrl_ep_enable+0x94>)
    66c8:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    66ca:	230c      	movs	r3, #12
    66cc:	18fb      	adds	r3, r7, r3
    66ce:	2200      	movs	r2, #0
    66d0:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    66d2:	230c      	movs	r3, #12
    66d4:	18fa      	adds	r2, r7, r3
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	0011      	movs	r1, r2
    66da:	0018      	movs	r0, r3
    66dc:	4b1c      	ldr	r3, [pc, #112]	; (6750 <udd_ctrl_ep_enable+0x98>)
    66de:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    66e0:	4a1c      	ldr	r2, [pc, #112]	; (6754 <udd_ctrl_ep_enable+0x9c>)
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	0011      	movs	r1, r2
    66e6:	0018      	movs	r0, r3
    66e8:	4b1b      	ldr	r3, [pc, #108]	; (6758 <udd_ctrl_ep_enable+0xa0>)
    66ea:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    66ec:	4b1b      	ldr	r3, [pc, #108]	; (675c <udd_ctrl_ep_enable+0xa4>)
    66ee:	6878      	ldr	r0, [r7, #4]
    66f0:	2202      	movs	r2, #2
    66f2:	2100      	movs	r1, #0
    66f4:	4c1a      	ldr	r4, [pc, #104]	; (6760 <udd_ctrl_ep_enable+0xa8>)
    66f6:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    66f8:	4b1a      	ldr	r3, [pc, #104]	; (6764 <udd_ctrl_ep_enable+0xac>)
    66fa:	6878      	ldr	r0, [r7, #4]
    66fc:	2200      	movs	r2, #0
    66fe:	2100      	movs	r1, #0
    6700:	4c17      	ldr	r4, [pc, #92]	; (6760 <udd_ctrl_ep_enable+0xa8>)
    6702:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    6704:	4b18      	ldr	r3, [pc, #96]	; (6768 <udd_ctrl_ep_enable+0xb0>)
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	2201      	movs	r2, #1
    670a:	2100      	movs	r1, #0
    670c:	4c14      	ldr	r4, [pc, #80]	; (6760 <udd_ctrl_ep_enable+0xa8>)
    670e:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	2202      	movs	r2, #2
    6714:	2100      	movs	r1, #0
    6716:	0018      	movs	r0, r3
    6718:	4b14      	ldr	r3, [pc, #80]	; (676c <udd_ctrl_ep_enable+0xb4>)
    671a:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	2200      	movs	r2, #0
    6720:	2100      	movs	r1, #0
    6722:	0018      	movs	r0, r3
    6724:	4b11      	ldr	r3, [pc, #68]	; (676c <udd_ctrl_ep_enable+0xb4>)
    6726:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	2201      	movs	r2, #1
    672c:	2100      	movs	r1, #0
    672e:	0018      	movs	r0, r3
    6730:	4b0e      	ldr	r3, [pc, #56]	; (676c <udd_ctrl_ep_enable+0xb4>)
    6732:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	2101      	movs	r1, #1
    6738:	0018      	movs	r0, r3
    673a:	4b0d      	ldr	r3, [pc, #52]	; (6770 <udd_ctrl_ep_enable+0xb8>)
    673c:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    673e:	4b0d      	ldr	r3, [pc, #52]	; (6774 <udd_ctrl_ep_enable+0xbc>)
    6740:	2200      	movs	r2, #0
    6742:	701a      	strb	r2, [r3, #0]
}
    6744:	46c0      	nop			; (mov r8, r8)
    6746:	46bd      	mov	sp, r7
    6748:	b005      	add	sp, #20
    674a:	bd90      	pop	{r4, r7, pc}
    674c:	000075d9 	.word	0x000075d9
    6750:	00007601 	.word	0x00007601
    6754:	200004f4 	.word	0x200004f4
    6758:	00007ee1 	.word	0x00007ee1
    675c:	000064b1 	.word	0x000064b1
    6760:	000071a1 	.word	0x000071a1
    6764:	00006661 	.word	0x00006661
    6768:	00006625 	.word	0x00006625
    676c:	00007299 	.word	0x00007299
    6770:	0000548d 	.word	0x0000548d
    6774:	200001e0 	.word	0x200001e0

00006778 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    6778:	b580      	push	{r7, lr}
    677a:	b082      	sub	sp, #8
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
    6780:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    6782:	4b09      	ldr	r3, [pc, #36]	; (67a8 <_usb_on_suspend+0x30>)
    6784:	2104      	movs	r1, #4
    6786:	0018      	movs	r0, r3
    6788:	4b08      	ldr	r3, [pc, #32]	; (67ac <_usb_on_suspend+0x34>)
    678a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    678c:	4b06      	ldr	r3, [pc, #24]	; (67a8 <_usb_on_suspend+0x30>)
    678e:	2102      	movs	r1, #2
    6790:	0018      	movs	r0, r3
    6792:	4b07      	ldr	r3, [pc, #28]	; (67b0 <_usb_on_suspend+0x38>)
    6794:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    6796:	2001      	movs	r0, #1
    6798:	4b06      	ldr	r3, [pc, #24]	; (67b4 <_usb_on_suspend+0x3c>)
    679a:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    679c:	4b06      	ldr	r3, [pc, #24]	; (67b8 <_usb_on_suspend+0x40>)
    679e:	4798      	blx	r3
#endif
}
    67a0:	46c0      	nop			; (mov r8, r8)
    67a2:	46bd      	mov	sp, r7
    67a4:	b002      	add	sp, #8
    67a6:	bd80      	pop	{r7, pc}
    67a8:	20000374 	.word	0x20000374
    67ac:	0000714d 	.word	0x0000714d
    67b0:	000070f1 	.word	0x000070f1
    67b4:	0000560d 	.word	0x0000560d
    67b8:	00008b69 	.word	0x00008b69

000067bc <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    67bc:	b580      	push	{r7, lr}
    67be:	b084      	sub	sp, #16
    67c0:	af00      	add	r7, sp, #0
    67c2:	6078      	str	r0, [r7, #4]
    67c4:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    67c6:	683b      	ldr	r3, [r7, #0]
    67c8:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    67ca:	4b12      	ldr	r3, [pc, #72]	; (6814 <_usb_device_lpm_suspend+0x58>)
    67cc:	2106      	movs	r1, #6
    67ce:	0018      	movs	r0, r3
    67d0:	4b11      	ldr	r3, [pc, #68]	; (6818 <_usb_device_lpm_suspend+0x5c>)
    67d2:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    67d4:	4b0f      	ldr	r3, [pc, #60]	; (6814 <_usb_device_lpm_suspend+0x58>)
    67d6:	2104      	movs	r1, #4
    67d8:	0018      	movs	r0, r3
    67da:	4b0f      	ldr	r3, [pc, #60]	; (6818 <_usb_device_lpm_suspend+0x5c>)
    67dc:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    67de:	4b0d      	ldr	r3, [pc, #52]	; (6814 <_usb_device_lpm_suspend+0x58>)
    67e0:	2102      	movs	r1, #2
    67e2:	0018      	movs	r0, r3
    67e4:	4b0d      	ldr	r3, [pc, #52]	; (681c <_usb_device_lpm_suspend+0x60>)
    67e6:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    67e8:	2002      	movs	r0, #2
    67ea:	4b0d      	ldr	r3, [pc, #52]	; (6820 <_usb_device_lpm_suspend+0x64>)
    67ec:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    67ee:	68fb      	ldr	r3, [r7, #12]
    67f0:	681b      	ldr	r3, [r3, #0]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d001      	beq.n	67fa <_usb_device_lpm_suspend+0x3e>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    67f6:	4b0b      	ldr	r3, [pc, #44]	; (6824 <_usb_device_lpm_suspend+0x68>)
    67f8:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    67fa:	68fb      	ldr	r3, [r7, #12]
    67fc:	681b      	ldr	r3, [r3, #0]
    67fe:	2b00      	cmp	r3, #0
    6800:	d101      	bne.n	6806 <_usb_device_lpm_suspend+0x4a>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    6802:	4b09      	ldr	r3, [pc, #36]	; (6828 <_usb_device_lpm_suspend+0x6c>)
    6804:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    6806:	4b09      	ldr	r3, [pc, #36]	; (682c <_usb_device_lpm_suspend+0x70>)
    6808:	4798      	blx	r3
}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	46bd      	mov	sp, r7
    680e:	b004      	add	sp, #16
    6810:	bd80      	pop	{r7, pc}
    6812:	46c0      	nop			; (mov r8, r8)
    6814:	20000374 	.word	0x20000374
    6818:	0000714d 	.word	0x0000714d
    681c:	000070f1 	.word	0x000070f1
    6820:	0000560d 	.word	0x0000560d
    6824:	00008c15 	.word	0x00008c15
    6828:	00008c01 	.word	0x00008c01
    682c:	00008bed 	.word	0x00008bed

00006830 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    6830:	b580      	push	{r7, lr}
    6832:	b082      	sub	sp, #8
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
    6838:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    683a:	4b04      	ldr	r3, [pc, #16]	; (684c <_usb_on_sof_notify+0x1c>)
    683c:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    683e:	4b04      	ldr	r3, [pc, #16]	; (6850 <_usb_on_sof_notify+0x20>)
    6840:	4798      	blx	r3
#endif
}
    6842:	46c0      	nop			; (mov r8, r8)
    6844:	46bd      	mov	sp, r7
    6846:	b002      	add	sp, #8
    6848:	bd80      	pop	{r7, pc}
    684a:	46c0      	nop			; (mov r8, r8)
    684c:	00003379 	.word	0x00003379
    6850:	00008b91 	.word	0x00008b91

00006854 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    6854:	b580      	push	{r7, lr}
    6856:	b082      	sub	sp, #8
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
    685c:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    685e:	4b07      	ldr	r3, [pc, #28]	; (687c <_usb_on_bus_reset+0x28>)
    6860:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	2100      	movs	r1, #0
    6866:	0018      	movs	r0, r3
    6868:	4b05      	ldr	r3, [pc, #20]	; (6880 <_usb_on_bus_reset+0x2c>)
    686a:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    686c:	687b      	ldr	r3, [r7, #4]
    686e:	0018      	movs	r0, r3
    6870:	4b04      	ldr	r3, [pc, #16]	; (6884 <_usb_on_bus_reset+0x30>)
    6872:	4798      	blx	r3
}
    6874:	46c0      	nop			; (mov r8, r8)
    6876:	46bd      	mov	sp, r7
    6878:	b002      	add	sp, #8
    687a:	bd80      	pop	{r7, pc}
    687c:	00003305 	.word	0x00003305
    6880:	00005449 	.word	0x00005449
    6884:	000066b9 	.word	0x000066b9

00006888 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    6888:	b580      	push	{r7, lr}
    688a:	b082      	sub	sp, #8
    688c:	af00      	add	r7, sp, #0
    688e:	6078      	str	r0, [r7, #4]
    6890:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    6892:	4b10      	ldr	r3, [pc, #64]	; (68d4 <_usb_on_wakeup+0x4c>)
    6894:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6896:	4b10      	ldr	r3, [pc, #64]	; (68d8 <_usb_on_wakeup+0x50>)
    6898:	2102      	movs	r1, #2
    689a:	0018      	movs	r0, r3
    689c:	4b0f      	ldr	r3, [pc, #60]	; (68dc <_usb_on_wakeup+0x54>)
    689e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    68a0:	4b0d      	ldr	r3, [pc, #52]	; (68d8 <_usb_on_wakeup+0x50>)
    68a2:	2104      	movs	r1, #4
    68a4:	0018      	movs	r0, r3
    68a6:	4b0e      	ldr	r3, [pc, #56]	; (68e0 <_usb_on_wakeup+0x58>)
    68a8:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    68aa:	4a0e      	ldr	r2, [pc, #56]	; (68e4 <_usb_on_wakeup+0x5c>)
    68ac:	4b0a      	ldr	r3, [pc, #40]	; (68d8 <_usb_on_wakeup+0x50>)
    68ae:	2106      	movs	r1, #6
    68b0:	0018      	movs	r0, r3
    68b2:	4b0d      	ldr	r3, [pc, #52]	; (68e8 <_usb_on_wakeup+0x60>)
    68b4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    68b6:	4b08      	ldr	r3, [pc, #32]	; (68d8 <_usb_on_wakeup+0x50>)
    68b8:	2106      	movs	r1, #6
    68ba:	0018      	movs	r0, r3
    68bc:	4b08      	ldr	r3, [pc, #32]	; (68e0 <_usb_on_wakeup+0x58>)
    68be:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    68c0:	2003      	movs	r0, #3
    68c2:	4b0a      	ldr	r3, [pc, #40]	; (68ec <_usb_on_wakeup+0x64>)
    68c4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    68c6:	4b0a      	ldr	r3, [pc, #40]	; (68f0 <_usb_on_wakeup+0x68>)
    68c8:	4798      	blx	r3
#endif
}
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	46bd      	mov	sp, r7
    68ce:	b002      	add	sp, #8
    68d0:	bd80      	pop	{r7, pc}
    68d2:	46c0      	nop			; (mov r8, r8)
    68d4:	000055d5 	.word	0x000055d5
    68d8:	20000374 	.word	0x20000374
    68dc:	0000714d 	.word	0x0000714d
    68e0:	000070f1 	.word	0x000070f1
    68e4:	000067bd 	.word	0x000067bd
    68e8:	000070a1 	.word	0x000070a1
    68ec:	0000560d 	.word	0x0000560d
    68f0:	00008b7d 	.word	0x00008b7d

000068f4 <udd_detach>:

void udd_detach(void)
{
    68f4:	b580      	push	{r7, lr}
    68f6:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    68f8:	4b04      	ldr	r3, [pc, #16]	; (690c <udd_detach+0x18>)
    68fa:	0018      	movs	r0, r3
    68fc:	4b04      	ldr	r3, [pc, #16]	; (6910 <udd_detach+0x1c>)
    68fe:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    6900:	2001      	movs	r0, #1
    6902:	4b04      	ldr	r3, [pc, #16]	; (6914 <udd_detach+0x20>)
    6904:	4798      	blx	r3
}
    6906:	46c0      	nop			; (mov r8, r8)
    6908:	46bd      	mov	sp, r7
    690a:	bd80      	pop	{r7, pc}
    690c:	20000374 	.word	0x20000374
    6910:	00005409 	.word	0x00005409
    6914:	0000560d 	.word	0x0000560d

00006918 <udd_attach>:

void udd_attach(void)
{
    6918:	b580      	push	{r7, lr}
    691a:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    691c:	2003      	movs	r0, #3
    691e:	4b20      	ldr	r3, [pc, #128]	; (69a0 <udd_attach+0x88>)
    6920:	4798      	blx	r3
	usb_device_attach(&usb_device);
    6922:	4b20      	ldr	r3, [pc, #128]	; (69a4 <udd_attach+0x8c>)
    6924:	0018      	movs	r0, r3
    6926:	4b20      	ldr	r3, [pc, #128]	; (69a8 <udd_attach+0x90>)
    6928:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    692a:	4a20      	ldr	r2, [pc, #128]	; (69ac <udd_attach+0x94>)
    692c:	4b1d      	ldr	r3, [pc, #116]	; (69a4 <udd_attach+0x8c>)
    692e:	2104      	movs	r1, #4
    6930:	0018      	movs	r0, r3
    6932:	4b1f      	ldr	r3, [pc, #124]	; (69b0 <udd_attach+0x98>)
    6934:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    6936:	4a1f      	ldr	r2, [pc, #124]	; (69b4 <udd_attach+0x9c>)
    6938:	4b1a      	ldr	r3, [pc, #104]	; (69a4 <udd_attach+0x8c>)
    693a:	2100      	movs	r1, #0
    693c:	0018      	movs	r0, r3
    693e:	4b1c      	ldr	r3, [pc, #112]	; (69b0 <udd_attach+0x98>)
    6940:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    6942:	4a1d      	ldr	r2, [pc, #116]	; (69b8 <udd_attach+0xa0>)
    6944:	4b17      	ldr	r3, [pc, #92]	; (69a4 <udd_attach+0x8c>)
    6946:	2101      	movs	r1, #1
    6948:	0018      	movs	r0, r3
    694a:	4b19      	ldr	r3, [pc, #100]	; (69b0 <udd_attach+0x98>)
    694c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    694e:	4a1b      	ldr	r2, [pc, #108]	; (69bc <udd_attach+0xa4>)
    6950:	4b14      	ldr	r3, [pc, #80]	; (69a4 <udd_attach+0x8c>)
    6952:	2102      	movs	r1, #2
    6954:	0018      	movs	r0, r3
    6956:	4b16      	ldr	r3, [pc, #88]	; (69b0 <udd_attach+0x98>)
    6958:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    695a:	4b12      	ldr	r3, [pc, #72]	; (69a4 <udd_attach+0x8c>)
    695c:	2104      	movs	r1, #4
    695e:	0018      	movs	r0, r3
    6960:	4b17      	ldr	r3, [pc, #92]	; (69c0 <udd_attach+0xa8>)
    6962:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    6964:	4b0f      	ldr	r3, [pc, #60]	; (69a4 <udd_attach+0x8c>)
    6966:	2100      	movs	r1, #0
    6968:	0018      	movs	r0, r3
    696a:	4b15      	ldr	r3, [pc, #84]	; (69c0 <udd_attach+0xa8>)
    696c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    696e:	4b0d      	ldr	r3, [pc, #52]	; (69a4 <udd_attach+0x8c>)
    6970:	2101      	movs	r1, #1
    6972:	0018      	movs	r0, r3
    6974:	4b12      	ldr	r3, [pc, #72]	; (69c0 <udd_attach+0xa8>)
    6976:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6978:	4b0a      	ldr	r3, [pc, #40]	; (69a4 <udd_attach+0x8c>)
    697a:	2102      	movs	r1, #2
    697c:	0018      	movs	r0, r3
    697e:	4b10      	ldr	r3, [pc, #64]	; (69c0 <udd_attach+0xa8>)
    6980:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    6982:	4a10      	ldr	r2, [pc, #64]	; (69c4 <udd_attach+0xac>)
    6984:	4b07      	ldr	r3, [pc, #28]	; (69a4 <udd_attach+0x8c>)
    6986:	2106      	movs	r1, #6
    6988:	0018      	movs	r0, r3
    698a:	4b09      	ldr	r3, [pc, #36]	; (69b0 <udd_attach+0x98>)
    698c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    698e:	4b05      	ldr	r3, [pc, #20]	; (69a4 <udd_attach+0x8c>)
    6990:	2106      	movs	r1, #6
    6992:	0018      	movs	r0, r3
    6994:	4b0a      	ldr	r3, [pc, #40]	; (69c0 <udd_attach+0xa8>)
    6996:	4798      	blx	r3
#endif
}
    6998:	46c0      	nop			; (mov r8, r8)
    699a:	46bd      	mov	sp, r7
    699c:	bd80      	pop	{r7, pc}
    699e:	46c0      	nop			; (mov r8, r8)
    69a0:	0000560d 	.word	0x0000560d
    69a4:	20000374 	.word	0x20000374
    69a8:	000053e5 	.word	0x000053e5
    69ac:	00006779 	.word	0x00006779
    69b0:	000070a1 	.word	0x000070a1
    69b4:	00006831 	.word	0x00006831
    69b8:	00006855 	.word	0x00006855
    69bc:	00006889 	.word	0x00006889
    69c0:	000070f1 	.word	0x000070f1
    69c4:	000067bd 	.word	0x000067bd

000069c8 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    69c8:	b580      	push	{r7, lr}
    69ca:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    69cc:	2100      	movs	r1, #0
    69ce:	200e      	movs	r0, #14
    69d0:	4b09      	ldr	r3, [pc, #36]	; (69f8 <_uhd_vbus_handler+0x30>)
    69d2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    69d4:	200e      	movs	r0, #14
    69d6:	4b09      	ldr	r3, [pc, #36]	; (69fc <_uhd_vbus_handler+0x34>)
    69d8:	4798      	blx	r3
    69da:	1e03      	subs	r3, r0, #0
    69dc:	d002      	beq.n	69e4 <_uhd_vbus_handler+0x1c>
		udd_attach();
    69de:	4b08      	ldr	r3, [pc, #32]	; (6a00 <_uhd_vbus_handler+0x38>)
    69e0:	4798      	blx	r3
    69e2:	e001      	b.n	69e8 <_uhd_vbus_handler+0x20>
	} else {
		udd_detach();
    69e4:	4b07      	ldr	r3, [pc, #28]	; (6a04 <_uhd_vbus_handler+0x3c>)
    69e6:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    69e8:	2100      	movs	r1, #0
    69ea:	200e      	movs	r0, #14
    69ec:	4b06      	ldr	r3, [pc, #24]	; (6a08 <_uhd_vbus_handler+0x40>)
    69ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    69f0:	46c0      	nop			; (mov r8, r8)
    69f2:	46bd      	mov	sp, r7
    69f4:	bd80      	pop	{r7, pc}
    69f6:	46c0      	nop			; (mov r8, r8)
    69f8:	0000402d 	.word	0x0000402d
    69fc:	000054f1 	.word	0x000054f1
    6a00:	00006919 	.word	0x00006919
    6a04:	000068f5 	.word	0x000068f5
    6a08:	00003fe5 	.word	0x00003fe5

00006a0c <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    6a0c:	b580      	push	{r7, lr}
    6a0e:	b084      	sub	sp, #16
    6a10:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    6a12:	1d3b      	adds	r3, r7, #4
    6a14:	0018      	movs	r0, r3
    6a16:	4b14      	ldr	r3, [pc, #80]	; (6a68 <_usb_vbus_config+0x5c>)
    6a18:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    6a1a:	1d3b      	adds	r3, r7, #4
    6a1c:	220e      	movs	r2, #14
    6a1e:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    6a20:	1d3b      	adds	r3, r7, #4
    6a22:	2200      	movs	r2, #0
    6a24:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    6a26:	1d3b      	adds	r3, r7, #4
    6a28:	2200      	movs	r2, #0
    6a2a:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    6a2c:	1d3b      	adds	r3, r7, #4
    6a2e:	2203      	movs	r2, #3
    6a30:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    6a32:	1d3b      	adds	r3, r7, #4
    6a34:	2201      	movs	r2, #1
    6a36:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    6a38:	2100      	movs	r1, #0
    6a3a:	200e      	movs	r0, #14
    6a3c:	4b0b      	ldr	r3, [pc, #44]	; (6a6c <_usb_vbus_config+0x60>)
    6a3e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    6a40:	1d3b      	adds	r3, r7, #4
    6a42:	0019      	movs	r1, r3
    6a44:	200e      	movs	r0, #14
    6a46:	4b0a      	ldr	r3, [pc, #40]	; (6a70 <_usb_vbus_config+0x64>)
    6a48:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    6a4a:	4b0a      	ldr	r3, [pc, #40]	; (6a74 <_usb_vbus_config+0x68>)
    6a4c:	2200      	movs	r2, #0
    6a4e:	210e      	movs	r1, #14
    6a50:	0018      	movs	r0, r3
    6a52:	4b09      	ldr	r3, [pc, #36]	; (6a78 <_usb_vbus_config+0x6c>)
    6a54:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    6a56:	2100      	movs	r1, #0
    6a58:	200e      	movs	r0, #14
    6a5a:	4b08      	ldr	r3, [pc, #32]	; (6a7c <_usb_vbus_config+0x70>)
    6a5c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	46bd      	mov	sp, r7
    6a62:	b004      	add	sp, #16
    6a64:	bd80      	pop	{r7, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	00004381 	.word	0x00004381
    6a6c:	0000402d 	.word	0x0000402d
    6a70:	000043b5 	.word	0x000043b5
    6a74:	000069c9 	.word	0x000069c9
    6a78:	00003f81 	.word	0x00003f81
    6a7c:	00003fe5 	.word	0x00003fe5

00006a80 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    6a86:	4b15      	ldr	r3, [pc, #84]	; (6adc <udd_enable+0x5c>)
    6a88:	4798      	blx	r3
    6a8a:	0003      	movs	r3, r0
    6a8c:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    6a8e:	003b      	movs	r3, r7
    6a90:	0018      	movs	r0, r3
    6a92:	4b13      	ldr	r3, [pc, #76]	; (6ae0 <udd_enable+0x60>)
    6a94:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    6a96:	003b      	movs	r3, r7
    6a98:	2200      	movs	r2, #0
    6a9a:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    6a9c:	003a      	movs	r2, r7
    6a9e:	4911      	ldr	r1, [pc, #68]	; (6ae4 <udd_enable+0x64>)
    6aa0:	4b11      	ldr	r3, [pc, #68]	; (6ae8 <udd_enable+0x68>)
    6aa2:	0018      	movs	r0, r3
    6aa4:	4b11      	ldr	r3, [pc, #68]	; (6aec <udd_enable+0x6c>)
    6aa6:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    6aa8:	4b0f      	ldr	r3, [pc, #60]	; (6ae8 <udd_enable+0x68>)
    6aaa:	0018      	movs	r0, r3
    6aac:	4b10      	ldr	r3, [pc, #64]	; (6af0 <udd_enable+0x70>)
    6aae:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    6ab0:	4b10      	ldr	r3, [pc, #64]	; (6af4 <udd_enable+0x74>)
    6ab2:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    6ab4:	2001      	movs	r0, #1
    6ab6:	4b10      	ldr	r3, [pc, #64]	; (6af8 <udd_enable+0x78>)
    6ab8:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    6aba:	4b10      	ldr	r3, [pc, #64]	; (6afc <udd_enable+0x7c>)
    6abc:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    6abe:	200e      	movs	r0, #14
    6ac0:	4b0f      	ldr	r3, [pc, #60]	; (6b00 <udd_enable+0x80>)
    6ac2:	4798      	blx	r3
    6ac4:	1e03      	subs	r3, r0, #0
    6ac6:	d001      	beq.n	6acc <udd_enable+0x4c>
		/* USB Attach */
		_uhd_vbus_handler();
    6ac8:	4b0e      	ldr	r3, [pc, #56]	; (6b04 <udd_enable+0x84>)
    6aca:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	0018      	movs	r0, r3
    6ad0:	4b0d      	ldr	r3, [pc, #52]	; (6b08 <udd_enable+0x88>)
    6ad2:	4798      	blx	r3
}
    6ad4:	46c0      	nop			; (mov r8, r8)
    6ad6:	46bd      	mov	sp, r7
    6ad8:	b002      	add	sp, #8
    6ada:	bd80      	pop	{r7, pc}
    6adc:	0000530d 	.word	0x0000530d
    6ae0:	00008511 	.word	0x00008511
    6ae4:	41005000 	.word	0x41005000
    6ae8:	20000374 	.word	0x20000374
    6aec:	00008539 	.word	0x00008539
    6af0:	000084a9 	.word	0x000084a9
    6af4:	000055d5 	.word	0x000055d5
    6af8:	0000560d 	.word	0x0000560d
    6afc:	00006a0d 	.word	0x00006a0d
    6b00:	000054f1 	.word	0x000054f1
    6b04:	000069c9 	.word	0x000069c9
    6b08:	00005355 	.word	0x00005355

00006b0c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6b0c:	b580      	push	{r7, lr}
    6b0e:	b082      	sub	sp, #8
    6b10:	af00      	add	r7, sp, #0
    6b12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	2200      	movs	r2, #0
    6b18:	701a      	strb	r2, [r3, #0]
}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	46bd      	mov	sp, r7
    6b1e:	b002      	add	sp, #8
    6b20:	bd80      	pop	{r7, pc}
    6b22:	46c0      	nop			; (mov r8, r8)

00006b24 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6b24:	b580      	push	{r7, lr}
    6b26:	b082      	sub	sp, #8
    6b28:	af00      	add	r7, sp, #0
    6b2a:	0002      	movs	r2, r0
    6b2c:	6039      	str	r1, [r7, #0]
    6b2e:	1dfb      	adds	r3, r7, #7
    6b30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6b32:	1dfb      	adds	r3, r7, #7
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	2b01      	cmp	r3, #1
    6b38:	d00a      	beq.n	6b50 <system_apb_clock_set_mask+0x2c>
    6b3a:	2b02      	cmp	r3, #2
    6b3c:	d00f      	beq.n	6b5e <system_apb_clock_set_mask+0x3a>
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d114      	bne.n	6b6c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6b42:	4b0e      	ldr	r3, [pc, #56]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b44:	4a0d      	ldr	r2, [pc, #52]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b46:	6991      	ldr	r1, [r2, #24]
    6b48:	683a      	ldr	r2, [r7, #0]
    6b4a:	430a      	orrs	r2, r1
    6b4c:	619a      	str	r2, [r3, #24]
			break;
    6b4e:	e00f      	b.n	6b70 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6b50:	4b0a      	ldr	r3, [pc, #40]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b52:	4a0a      	ldr	r2, [pc, #40]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b54:	69d1      	ldr	r1, [r2, #28]
    6b56:	683a      	ldr	r2, [r7, #0]
    6b58:	430a      	orrs	r2, r1
    6b5a:	61da      	str	r2, [r3, #28]
			break;
    6b5c:	e008      	b.n	6b70 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6b5e:	4b07      	ldr	r3, [pc, #28]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b60:	4a06      	ldr	r2, [pc, #24]	; (6b7c <system_apb_clock_set_mask+0x58>)
    6b62:	6a11      	ldr	r1, [r2, #32]
    6b64:	683a      	ldr	r2, [r7, #0]
    6b66:	430a      	orrs	r2, r1
    6b68:	621a      	str	r2, [r3, #32]
			break;
    6b6a:	e001      	b.n	6b70 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6b6c:	2317      	movs	r3, #23
    6b6e:	e000      	b.n	6b72 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6b70:	2300      	movs	r3, #0
}
    6b72:	0018      	movs	r0, r3
    6b74:	46bd      	mov	sp, r7
    6b76:	b002      	add	sp, #8
    6b78:	bd80      	pop	{r7, pc}
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	40000400 	.word	0x40000400

00006b80 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6b80:	b580      	push	{r7, lr}
    6b82:	b082      	sub	sp, #8
    6b84:	af00      	add	r7, sp, #0
    6b86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6b88:	687b      	ldr	r3, [r7, #4]
    6b8a:	2280      	movs	r2, #128	; 0x80
    6b8c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	2200      	movs	r2, #0
    6b92:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	2201      	movs	r2, #1
    6b98:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	2200      	movs	r2, #0
    6b9e:	70da      	strb	r2, [r3, #3]
}
    6ba0:	46c0      	nop			; (mov r8, r8)
    6ba2:	46bd      	mov	sp, r7
    6ba4:	b002      	add	sp, #8
    6ba6:	bd80      	pop	{r7, pc}

00006ba8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b082      	sub	sp, #8
    6bac:	af00      	add	r7, sp, #0
    6bae:	0002      	movs	r2, r0
    6bb0:	1dfb      	adds	r3, r7, #7
    6bb2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6bb4:	4b06      	ldr	r3, [pc, #24]	; (6bd0 <system_interrupt_enable+0x28>)
    6bb6:	1dfa      	adds	r2, r7, #7
    6bb8:	7812      	ldrb	r2, [r2, #0]
    6bba:	0011      	movs	r1, r2
    6bbc:	221f      	movs	r2, #31
    6bbe:	400a      	ands	r2, r1
    6bc0:	2101      	movs	r1, #1
    6bc2:	4091      	lsls	r1, r2
    6bc4:	000a      	movs	r2, r1
    6bc6:	601a      	str	r2, [r3, #0]
}
    6bc8:	46c0      	nop			; (mov r8, r8)
    6bca:	46bd      	mov	sp, r7
    6bcc:	b002      	add	sp, #8
    6bce:	bd80      	pop	{r7, pc}
    6bd0:	e000e100 	.word	0xe000e100

00006bd4 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    6bd4:	b580      	push	{r7, lr}
    6bd6:	b082      	sub	sp, #8
    6bd8:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6bda:	4bbc      	ldr	r3, [pc, #752]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	681b      	ldr	r3, [r3, #0]
    6be0:	8c1b      	ldrh	r3, [r3, #32]
    6be2:	b29b      	uxth	r3, r3
    6be4:	001a      	movs	r2, r3
    6be6:	4bba      	ldr	r3, [pc, #744]	; (6ed0 <_usb_host_interrupt_handler+0x2fc>)
    6be8:	0010      	movs	r0, r2
    6bea:	4798      	blx	r3
    6bec:	0003      	movs	r3, r0
    6bee:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	2b1f      	cmp	r3, #31
    6bf4:	d900      	bls.n	6bf8 <_usb_host_interrupt_handler+0x24>
    6bf6:	e175      	b.n	6ee4 <_usb_host_interrupt_handler+0x310>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6bf8:	4bb4      	ldr	r3, [pc, #720]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	3308      	adds	r3, #8
    6c02:	015b      	lsls	r3, r3, #5
    6c04:	18d3      	adds	r3, r2, r3
    6c06:	3307      	adds	r3, #7
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	b2db      	uxtb	r3, r3
    6c0c:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6c0e:	683b      	ldr	r3, [r7, #0]
    6c10:	2203      	movs	r2, #3
    6c12:	4013      	ands	r3, r2
    6c14:	d100      	bne.n	6c18 <_usb_host_interrupt_handler+0x44>
    6c16:	e088      	b.n	6d2a <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6c18:	2201      	movs	r2, #1
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	409a      	lsls	r2, r3
    6c1e:	0013      	movs	r3, r2
    6c20:	43db      	mvns	r3, r3
    6c22:	001a      	movs	r2, r3
    6c24:	4bab      	ldr	r3, [pc, #684]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	401a      	ands	r2, r3
    6c2a:	4baa      	ldr	r3, [pc, #680]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6c2c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c2e:	4ba7      	ldr	r3, [pc, #668]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6c30:	681b      	ldr	r3, [r3, #0]
    6c32:	681a      	ldr	r2, [r3, #0]
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	3308      	adds	r3, #8
    6c38:	015b      	lsls	r3, r3, #5
    6c3a:	18d3      	adds	r3, r2, r3
    6c3c:	3307      	adds	r3, #7
    6c3e:	2203      	movs	r2, #3
    6c40:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6c42:	4ba2      	ldr	r3, [pc, #648]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6c44:	681a      	ldr	r2, [r3, #0]
    6c46:	21ae      	movs	r1, #174	; 0xae
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	18d3      	adds	r3, r2, r3
    6c4c:	185b      	adds	r3, r3, r1
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	001a      	movs	r2, r3
    6c52:	2301      	movs	r3, #1
    6c54:	4013      	ands	r3, r2
    6c56:	d068      	beq.n	6d2a <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	b2da      	uxtb	r2, r3
    6c5c:	4b9e      	ldr	r3, [pc, #632]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6c5e:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6c60:	4b9a      	ldr	r3, [pc, #616]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	681b      	ldr	r3, [r3, #0]
    6c66:	687a      	ldr	r2, [r7, #4]
    6c68:	3208      	adds	r2, #8
    6c6a:	0152      	lsls	r2, r2, #5
    6c6c:	5cd3      	ldrb	r3, [r2, r3]
    6c6e:	079b      	lsls	r3, r3, #30
    6c70:	0f9b      	lsrs	r3, r3, #30
    6c72:	b2db      	uxtb	r3, r3
    6c74:	2b01      	cmp	r3, #1
    6c76:	d11e      	bne.n	6cb6 <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6c78:	4a98      	ldr	r2, [pc, #608]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	015b      	lsls	r3, r3, #5
    6c7e:	18d3      	adds	r3, r2, r3
    6c80:	685b      	ldr	r3, [r3, #4]
    6c82:	049b      	lsls	r3, r3, #18
    6c84:	0c9b      	lsrs	r3, r3, #18
    6c86:	b29b      	uxth	r3, r3
    6c88:	001a      	movs	r2, r3
    6c8a:	4b93      	ldr	r3, [pc, #588]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6c8c:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6c8e:	4a93      	ldr	r2, [pc, #588]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	015b      	lsls	r3, r3, #5
    6c94:	18d3      	adds	r3, r2, r3
    6c96:	685b      	ldr	r3, [r3, #4]
    6c98:	011b      	lsls	r3, r3, #4
    6c9a:	0c9b      	lsrs	r3, r3, #18
    6c9c:	b29b      	uxth	r3, r3
    6c9e:	001a      	movs	r2, r3
    6ca0:	4b8d      	ldr	r3, [pc, #564]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6ca2:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6ca4:	4a8d      	ldr	r2, [pc, #564]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6ca6:	687b      	ldr	r3, [r7, #4]
    6ca8:	015b      	lsls	r3, r3, #5
    6caa:	18d3      	adds	r3, r2, r3
    6cac:	685a      	ldr	r2, [r3, #4]
    6cae:	0b92      	lsrs	r2, r2, #14
    6cb0:	0392      	lsls	r2, r2, #14
    6cb2:	605a      	str	r2, [r3, #4]
    6cb4:	e02c      	b.n	6d10 <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6cb6:	4a89      	ldr	r2, [pc, #548]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	015b      	lsls	r3, r3, #5
    6cbc:	18d3      	adds	r3, r2, r3
    6cbe:	685b      	ldr	r3, [r3, #4]
    6cc0:	011b      	lsls	r3, r3, #4
    6cc2:	0c9b      	lsrs	r3, r3, #18
    6cc4:	b29b      	uxth	r3, r3
    6cc6:	001a      	movs	r2, r3
    6cc8:	4b83      	ldr	r3, [pc, #524]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6cca:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6ccc:	4a83      	ldr	r2, [pc, #524]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6cce:	687b      	ldr	r3, [r7, #4]
    6cd0:	015b      	lsls	r3, r3, #5
    6cd2:	18d3      	adds	r3, r2, r3
    6cd4:	685b      	ldr	r3, [r3, #4]
    6cd6:	049b      	lsls	r3, r3, #18
    6cd8:	0c9b      	lsrs	r3, r3, #18
    6cda:	b29b      	uxth	r3, r3
    6cdc:	001a      	movs	r2, r3
    6cde:	4b7e      	ldr	r3, [pc, #504]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6ce0:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6ce2:	4a7e      	ldr	r2, [pc, #504]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	015b      	lsls	r3, r3, #5
    6ce8:	18d3      	adds	r3, r2, r3
    6cea:	685a      	ldr	r2, [r3, #4]
    6cec:	497c      	ldr	r1, [pc, #496]	; (6ee0 <_usb_host_interrupt_handler+0x30c>)
    6cee:	400a      	ands	r2, r1
    6cf0:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6cf2:	4b79      	ldr	r3, [pc, #484]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6cf4:	885b      	ldrh	r3, [r3, #2]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d10a      	bne.n	6d10 <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6cfa:	4a78      	ldr	r2, [pc, #480]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6cfc:	687b      	ldr	r3, [r7, #4]
    6cfe:	015b      	lsls	r3, r3, #5
    6d00:	18d3      	adds	r3, r2, r3
    6d02:	685b      	ldr	r3, [r3, #4]
    6d04:	049b      	lsls	r3, r3, #18
    6d06:	0c9b      	lsrs	r3, r3, #18
    6d08:	b29b      	uxth	r3, r3
    6d0a:	001a      	movs	r2, r3
    6d0c:	4b72      	ldr	r3, [pc, #456]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6d0e:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6d10:	4b6e      	ldr	r3, [pc, #440]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6d12:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	3302      	adds	r3, #2
    6d18:	011b      	lsls	r3, r3, #4
    6d1a:	18d3      	adds	r3, r2, r3
    6d1c:	3304      	adds	r3, #4
    6d1e:	681a      	ldr	r2, [r3, #0]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6d20:	4b6a      	ldr	r3, [pc, #424]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6d22:	681b      	ldr	r3, [r3, #0]
    6d24:	496c      	ldr	r1, [pc, #432]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6d26:	0018      	movs	r0, r3
    6d28:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6d2a:	683b      	ldr	r3, [r7, #0]
    6d2c:	2204      	movs	r2, #4
    6d2e:	4013      	ands	r3, r2
    6d30:	d014      	beq.n	6d5c <_usb_host_interrupt_handler+0x188>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6d32:	2201      	movs	r2, #1
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	409a      	lsls	r2, r3
    6d38:	0013      	movs	r3, r2
    6d3a:	43db      	mvns	r3, r3
    6d3c:	001a      	movs	r2, r3
    6d3e:	4b65      	ldr	r3, [pc, #404]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6d40:	681b      	ldr	r3, [r3, #0]
    6d42:	401a      	ands	r2, r3
    6d44:	4b63      	ldr	r3, [pc, #396]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6d46:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6d48:	4b60      	ldr	r3, [pc, #384]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6d4a:	681b      	ldr	r3, [r3, #0]
    6d4c:	681a      	ldr	r2, [r3, #0]
    6d4e:	687b      	ldr	r3, [r7, #4]
    6d50:	3308      	adds	r3, #8
    6d52:	015b      	lsls	r3, r3, #5
    6d54:	18d3      	adds	r3, r2, r3
    6d56:	3307      	adds	r3, #7
    6d58:	2204      	movs	r2, #4
    6d5a:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6d5c:	683b      	ldr	r3, [r7, #0]
    6d5e:	2208      	movs	r2, #8
    6d60:	4013      	ands	r3, r2
    6d62:	d03c      	beq.n	6dde <_usb_host_interrupt_handler+0x20a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6d64:	2201      	movs	r2, #1
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	409a      	lsls	r2, r3
    6d6a:	0013      	movs	r3, r2
    6d6c:	43db      	mvns	r3, r3
    6d6e:	001a      	movs	r2, r3
    6d70:	4b58      	ldr	r3, [pc, #352]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	401a      	ands	r2, r3
    6d76:	4b57      	ldr	r3, [pc, #348]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6d78:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6d7a:	4b54      	ldr	r3, [pc, #336]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6d7c:	681b      	ldr	r3, [r3, #0]
    6d7e:	681a      	ldr	r2, [r3, #0]
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	3308      	adds	r3, #8
    6d84:	015b      	lsls	r3, r3, #5
    6d86:	18d3      	adds	r3, r2, r3
    6d88:	3307      	adds	r3, #7
    6d8a:	2208      	movs	r2, #8
    6d8c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6d8e:	4b4f      	ldr	r3, [pc, #316]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6d90:	681a      	ldr	r2, [r3, #0]
    6d92:	21ae      	movs	r1, #174	; 0xae
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	18d3      	adds	r3, r2, r3
    6d98:	185b      	adds	r3, r3, r1
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	001a      	movs	r2, r3
    6d9e:	2302      	movs	r3, #2
    6da0:	4013      	ands	r3, r2
    6da2:	d01c      	beq.n	6dde <_usb_host_interrupt_handler+0x20a>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	b2da      	uxtb	r2, r3
    6da8:	4b4b      	ldr	r3, [pc, #300]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6daa:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6dac:	4a4b      	ldr	r2, [pc, #300]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	015b      	lsls	r3, r3, #5
    6db2:	18d3      	adds	r3, r2, r3
    6db4:	330e      	adds	r3, #14
    6db6:	881b      	ldrh	r3, [r3, #0]
    6db8:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    6dba:	b2db      	uxtb	r3, r3
    6dbc:	221f      	movs	r2, #31
    6dbe:	4013      	ands	r3, r2
    6dc0:	b2da      	uxtb	r2, r3
    6dc2:	4b45      	ldr	r3, [pc, #276]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6dc4:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6dc6:	4b41      	ldr	r3, [pc, #260]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6dc8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	011b      	lsls	r3, r3, #4
    6dce:	18d3      	adds	r3, r2, r3
    6dd0:	3328      	adds	r3, #40	; 0x28
    6dd2:	681a      	ldr	r2, [r3, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6dd4:	4b3d      	ldr	r3, [pc, #244]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	493f      	ldr	r1, [pc, #252]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6dda:	0018      	movs	r0, r3
    6ddc:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6dde:	683b      	ldr	r3, [r7, #0]
    6de0:	2210      	movs	r2, #16
    6de2:	4013      	ands	r3, r2
    6de4:	d03a      	beq.n	6e5c <_usb_host_interrupt_handler+0x288>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6de6:	2201      	movs	r2, #1
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	409a      	lsls	r2, r3
    6dec:	0013      	movs	r3, r2
    6dee:	43db      	mvns	r3, r3
    6df0:	001a      	movs	r2, r3
    6df2:	4b38      	ldr	r3, [pc, #224]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6df4:	681b      	ldr	r3, [r3, #0]
    6df6:	401a      	ands	r2, r3
    6df8:	4b36      	ldr	r3, [pc, #216]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6dfa:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6dfc:	4b33      	ldr	r3, [pc, #204]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6dfe:	681b      	ldr	r3, [r3, #0]
    6e00:	681a      	ldr	r2, [r3, #0]
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	3308      	adds	r3, #8
    6e06:	015b      	lsls	r3, r3, #5
    6e08:	18d3      	adds	r3, r2, r3
    6e0a:	3307      	adds	r3, #7
    6e0c:	2210      	movs	r2, #16
    6e0e:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6e10:	4b2e      	ldr	r3, [pc, #184]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6e12:	681a      	ldr	r2, [r3, #0]
    6e14:	21ae      	movs	r1, #174	; 0xae
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	18d3      	adds	r3, r2, r3
    6e1a:	185b      	adds	r3, r3, r1
    6e1c:	781b      	ldrb	r3, [r3, #0]
    6e1e:	001a      	movs	r2, r3
    6e20:	2304      	movs	r3, #4
    6e22:	4013      	ands	r3, r2
    6e24:	d01a      	beq.n	6e5c <_usb_host_interrupt_handler+0x288>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	b2da      	uxtb	r2, r3
    6e2a:	4b2b      	ldr	r3, [pc, #172]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6e2c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6e2e:	4a2b      	ldr	r2, [pc, #172]	; (6edc <_usb_host_interrupt_handler+0x308>)
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	015b      	lsls	r3, r3, #5
    6e34:	18d3      	adds	r3, r2, r3
    6e36:	685b      	ldr	r3, [r3, #4]
    6e38:	011b      	lsls	r3, r3, #4
    6e3a:	0c9b      	lsrs	r3, r3, #18
    6e3c:	b29b      	uxth	r3, r3
    6e3e:	001a      	movs	r2, r3
    6e40:	4b25      	ldr	r3, [pc, #148]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6e42:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6e44:	4b21      	ldr	r3, [pc, #132]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6e46:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	011b      	lsls	r3, r3, #4
    6e4c:	18d3      	adds	r3, r2, r3
    6e4e:	332c      	adds	r3, #44	; 0x2c
    6e50:	681a      	ldr	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    6e52:	4b1e      	ldr	r3, [pc, #120]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	2100      	movs	r1, #0
    6e58:	0018      	movs	r0, r3
    6e5a:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	2220      	movs	r2, #32
    6e60:	4013      	ands	r3, r2
    6e62:	d100      	bne.n	6e66 <_usb_host_interrupt_handler+0x292>
    6e64:	e113      	b.n	708e <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6e66:	2201      	movs	r2, #1
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	409a      	lsls	r2, r3
    6e6c:	0013      	movs	r3, r2
    6e6e:	43db      	mvns	r3, r3
    6e70:	001a      	movs	r2, r3
    6e72:	4b18      	ldr	r3, [pc, #96]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	401a      	ands	r2, r3
    6e78:	4b16      	ldr	r3, [pc, #88]	; (6ed4 <_usb_host_interrupt_handler+0x300>)
    6e7a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6e7c:	4b13      	ldr	r3, [pc, #76]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6e7e:	681b      	ldr	r3, [r3, #0]
    6e80:	681a      	ldr	r2, [r3, #0]
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	3308      	adds	r3, #8
    6e86:	015b      	lsls	r3, r3, #5
    6e88:	18d3      	adds	r3, r2, r3
    6e8a:	3307      	adds	r3, #7
    6e8c:	2220      	movs	r2, #32
    6e8e:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6e90:	4b0e      	ldr	r3, [pc, #56]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6e92:	681a      	ldr	r2, [r3, #0]
    6e94:	21ae      	movs	r1, #174	; 0xae
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	18d3      	adds	r3, r2, r3
    6e9a:	185b      	adds	r3, r3, r1
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	001a      	movs	r2, r3
    6ea0:	2308      	movs	r3, #8
    6ea2:	4013      	ands	r3, r2
    6ea4:	d100      	bne.n	6ea8 <_usb_host_interrupt_handler+0x2d4>
    6ea6:	e0f2      	b.n	708e <_usb_host_interrupt_handler+0x4ba>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	b2da      	uxtb	r2, r3
    6eac:	4b0a      	ldr	r3, [pc, #40]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6eae:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    6eb0:	4b06      	ldr	r3, [pc, #24]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6eb2:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	011b      	lsls	r3, r3, #4
    6eb8:	18d3      	adds	r3, r2, r3
    6eba:	3330      	adds	r3, #48	; 0x30
    6ebc:	681a      	ldr	r2, [r3, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    6ebe:	4b03      	ldr	r3, [pc, #12]	; (6ecc <_usb_host_interrupt_handler+0x2f8>)
    6ec0:	681b      	ldr	r3, [r3, #0]
    6ec2:	4905      	ldr	r1, [pc, #20]	; (6ed8 <_usb_host_interrupt_handler+0x304>)
    6ec4:	0018      	movs	r0, r3
    6ec6:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    6ec8:	e0e1      	b.n	708e <_usb_host_interrupt_handler+0x4ba>
    6eca:	46c0      	nop			; (mov r8, r8)
    6ecc:	20000214 	.word	0x20000214
    6ed0:	00008f41 	.word	0x00008f41
    6ed4:	2000022c 	.word	0x2000022c
    6ed8:	20000218 	.word	0x20000218
    6edc:	200004fc 	.word	0x200004fc
    6ee0:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6ee4:	4b6c      	ldr	r3, [pc, #432]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6ee6:	681b      	ldr	r3, [r3, #0]
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	8b9b      	ldrh	r3, [r3, #28]
    6eec:	b29b      	uxth	r3, r3
    6eee:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6ef0:	683b      	ldr	r3, [r7, #0]
    6ef2:	2204      	movs	r2, #4
    6ef4:	4013      	ands	r3, r2
    6ef6:	d013      	beq.n	6f20 <_usb_host_interrupt_handler+0x34c>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6ef8:	4b67      	ldr	r3, [pc, #412]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6efa:	681b      	ldr	r3, [r3, #0]
    6efc:	681b      	ldr	r3, [r3, #0]
    6efe:	2204      	movs	r2, #4
    6f00:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6f02:	4b65      	ldr	r3, [pc, #404]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f04:	681b      	ldr	r3, [r3, #0]
    6f06:	22a5      	movs	r2, #165	; 0xa5
    6f08:	5c9b      	ldrb	r3, [r3, r2]
    6f0a:	001a      	movs	r2, r3
    6f0c:	2301      	movs	r3, #1
    6f0e:	4013      	ands	r3, r2
    6f10:	d006      	beq.n	6f20 <_usb_host_interrupt_handler+0x34c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6f12:	4b61      	ldr	r3, [pc, #388]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	685a      	ldr	r2, [r3, #4]
    6f18:	4b5f      	ldr	r3, [pc, #380]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f1a:	681b      	ldr	r3, [r3, #0]
    6f1c:	0018      	movs	r0, r3
    6f1e:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    6f20:	683b      	ldr	r3, [r7, #0]
    6f22:	2208      	movs	r2, #8
    6f24:	4013      	ands	r3, r2
    6f26:	d016      	beq.n	6f56 <_usb_host_interrupt_handler+0x382>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6f28:	4b5c      	ldr	r3, [pc, #368]	; (709c <_usb_host_interrupt_handler+0x4c8>)
    6f2a:	2200      	movs	r2, #0
    6f2c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6f2e:	4b5a      	ldr	r3, [pc, #360]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	2208      	movs	r2, #8
    6f36:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6f38:	4b57      	ldr	r3, [pc, #348]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f3a:	681b      	ldr	r3, [r3, #0]
    6f3c:	22a5      	movs	r2, #165	; 0xa5
    6f3e:	5c9b      	ldrb	r3, [r3, r2]
    6f40:	001a      	movs	r2, r3
    6f42:	2302      	movs	r3, #2
    6f44:	4013      	ands	r3, r2
    6f46:	d006      	beq.n	6f56 <_usb_host_interrupt_handler+0x382>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6f48:	4b53      	ldr	r3, [pc, #332]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f4a:	681b      	ldr	r3, [r3, #0]
    6f4c:	689a      	ldr	r2, [r3, #8]
    6f4e:	4b52      	ldr	r3, [pc, #328]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f50:	681b      	ldr	r3, [r3, #0]
    6f52:	0018      	movs	r0, r3
    6f54:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6f56:	683b      	ldr	r3, [r7, #0]
    6f58:	2240      	movs	r2, #64	; 0x40
    6f5a:	4013      	ands	r3, r2
    6f5c:	d013      	beq.n	6f86 <_usb_host_interrupt_handler+0x3b2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6f5e:	4b4e      	ldr	r3, [pc, #312]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f60:	681b      	ldr	r3, [r3, #0]
    6f62:	681b      	ldr	r3, [r3, #0]
    6f64:	2240      	movs	r2, #64	; 0x40
    6f66:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6f68:	4b4b      	ldr	r3, [pc, #300]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	22a5      	movs	r2, #165	; 0xa5
    6f6e:	5c9b      	ldrb	r3, [r3, r2]
    6f70:	001a      	movs	r2, r3
    6f72:	2310      	movs	r3, #16
    6f74:	4013      	ands	r3, r2
    6f76:	d006      	beq.n	6f86 <_usb_host_interrupt_handler+0x3b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6f78:	4b47      	ldr	r3, [pc, #284]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f7a:	681b      	ldr	r3, [r3, #0]
    6f7c:	695a      	ldr	r2, [r3, #20]
    6f7e:	4b46      	ldr	r3, [pc, #280]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f80:	681b      	ldr	r3, [r3, #0]
    6f82:	0018      	movs	r0, r3
    6f84:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6f86:	683b      	ldr	r3, [r7, #0]
    6f88:	2220      	movs	r2, #32
    6f8a:	4013      	ands	r3, r2
    6f8c:	d013      	beq.n	6fb6 <_usb_host_interrupt_handler+0x3e2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6f8e:	4b42      	ldr	r3, [pc, #264]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f90:	681b      	ldr	r3, [r3, #0]
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	2220      	movs	r2, #32
    6f96:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6f98:	4b3f      	ldr	r3, [pc, #252]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6f9a:	681b      	ldr	r3, [r3, #0]
    6f9c:	22a5      	movs	r2, #165	; 0xa5
    6f9e:	5c9b      	ldrb	r3, [r3, r2]
    6fa0:	001a      	movs	r2, r3
    6fa2:	2308      	movs	r3, #8
    6fa4:	4013      	ands	r3, r2
    6fa6:	d006      	beq.n	6fb6 <_usb_host_interrupt_handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6fa8:	4b3b      	ldr	r3, [pc, #236]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6faa:	681b      	ldr	r3, [r3, #0]
    6fac:	691a      	ldr	r2, [r3, #16]
    6fae:	4b3a      	ldr	r3, [pc, #232]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	0018      	movs	r0, r3
    6fb4:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6fb6:	683b      	ldr	r3, [r7, #0]
    6fb8:	2210      	movs	r2, #16
    6fba:	4013      	ands	r3, r2
    6fbc:	d013      	beq.n	6fe6 <_usb_host_interrupt_handler+0x412>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6fbe:	4b36      	ldr	r3, [pc, #216]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6fc0:	681b      	ldr	r3, [r3, #0]
    6fc2:	681b      	ldr	r3, [r3, #0]
    6fc4:	2210      	movs	r2, #16
    6fc6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6fc8:	4b33      	ldr	r3, [pc, #204]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6fca:	681b      	ldr	r3, [r3, #0]
    6fcc:	22a5      	movs	r2, #165	; 0xa5
    6fce:	5c9b      	ldrb	r3, [r3, r2]
    6fd0:	001a      	movs	r2, r3
    6fd2:	2304      	movs	r3, #4
    6fd4:	4013      	ands	r3, r2
    6fd6:	d006      	beq.n	6fe6 <_usb_host_interrupt_handler+0x412>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6fd8:	4b2f      	ldr	r3, [pc, #188]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	68da      	ldr	r2, [r3, #12]
    6fde:	4b2e      	ldr	r3, [pc, #184]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6fe0:	681b      	ldr	r3, [r3, #0]
    6fe2:	0018      	movs	r0, r3
    6fe4:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6fe6:	683b      	ldr	r3, [r7, #0]
    6fe8:	2280      	movs	r2, #128	; 0x80
    6fea:	4013      	ands	r3, r2
    6fec:	d016      	beq.n	701c <_usb_host_interrupt_handler+0x448>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6fee:	4b2b      	ldr	r3, [pc, #172]	; (709c <_usb_host_interrupt_handler+0x4c8>)
    6ff0:	2200      	movs	r2, #0
    6ff2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6ff4:	4b28      	ldr	r3, [pc, #160]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	2280      	movs	r2, #128	; 0x80
    6ffc:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6ffe:	4b26      	ldr	r3, [pc, #152]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7000:	681b      	ldr	r3, [r3, #0]
    7002:	22a5      	movs	r2, #165	; 0xa5
    7004:	5c9b      	ldrb	r3, [r3, r2]
    7006:	001a      	movs	r2, r3
    7008:	2320      	movs	r3, #32
    700a:	4013      	ands	r3, r2
    700c:	d006      	beq.n	701c <_usb_host_interrupt_handler+0x448>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    700e:	4b22      	ldr	r3, [pc, #136]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7010:	681b      	ldr	r3, [r3, #0]
    7012:	699a      	ldr	r2, [r3, #24]
    7014:	4b20      	ldr	r3, [pc, #128]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7016:	681b      	ldr	r3, [r3, #0]
    7018:	0018      	movs	r0, r3
    701a:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    701c:	683a      	ldr	r2, [r7, #0]
    701e:	2380      	movs	r3, #128	; 0x80
    7020:	005b      	lsls	r3, r3, #1
    7022:	4013      	ands	r3, r2
    7024:	d017      	beq.n	7056 <_usb_host_interrupt_handler+0x482>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7026:	4b1d      	ldr	r3, [pc, #116]	; (709c <_usb_host_interrupt_handler+0x4c8>)
    7028:	2200      	movs	r2, #0
    702a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    702c:	4b1a      	ldr	r3, [pc, #104]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    702e:	681b      	ldr	r3, [r3, #0]
    7030:	681b      	ldr	r3, [r3, #0]
    7032:	2280      	movs	r2, #128	; 0x80
    7034:	0052      	lsls	r2, r2, #1
    7036:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    7038:	4b17      	ldr	r3, [pc, #92]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    703a:	681b      	ldr	r3, [r3, #0]
    703c:	22a5      	movs	r2, #165	; 0xa5
    703e:	5c9b      	ldrb	r3, [r3, r2]
    7040:	001a      	movs	r2, r3
    7042:	2340      	movs	r3, #64	; 0x40
    7044:	4013      	ands	r3, r2
    7046:	d006      	beq.n	7056 <_usb_host_interrupt_handler+0x482>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    7048:	4b13      	ldr	r3, [pc, #76]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    704a:	681b      	ldr	r3, [r3, #0]
    704c:	69da      	ldr	r2, [r3, #28]
    704e:	4b12      	ldr	r3, [pc, #72]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7050:	681b      	ldr	r3, [r3, #0]
    7052:	0018      	movs	r0, r3
    7054:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    7056:	683a      	ldr	r2, [r7, #0]
    7058:	2380      	movs	r3, #128	; 0x80
    705a:	009b      	lsls	r3, r3, #2
    705c:	4013      	ands	r3, r2
    705e:	d016      	beq.n	708e <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7060:	4b0e      	ldr	r3, [pc, #56]	; (709c <_usb_host_interrupt_handler+0x4c8>)
    7062:	2200      	movs	r2, #0
    7064:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    7066:	4b0c      	ldr	r3, [pc, #48]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	681b      	ldr	r3, [r3, #0]
    706c:	2280      	movs	r2, #128	; 0x80
    706e:	0092      	lsls	r2, r2, #2
    7070:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    7072:	4b09      	ldr	r3, [pc, #36]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7074:	681b      	ldr	r3, [r3, #0]
    7076:	22a5      	movs	r2, #165	; 0xa5
    7078:	5c9b      	ldrb	r3, [r3, r2]
    707a:	b25b      	sxtb	r3, r3
    707c:	2b00      	cmp	r3, #0
    707e:	da06      	bge.n	708e <_usb_host_interrupt_handler+0x4ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    7080:	4b05      	ldr	r3, [pc, #20]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	6a1a      	ldr	r2, [r3, #32]
    7086:	4b04      	ldr	r3, [pc, #16]	; (7098 <_usb_host_interrupt_handler+0x4c4>)
    7088:	681b      	ldr	r3, [r3, #0]
    708a:	0018      	movs	r0, r3
    708c:	4790      	blx	r2
			}
		}

	}
}
    708e:	46c0      	nop			; (mov r8, r8)
    7090:	46bd      	mov	sp, r7
    7092:	b002      	add	sp, #8
    7094:	bd80      	pop	{r7, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	20000214 	.word	0x20000214
    709c:	2000022c 	.word	0x2000022c

000070a0 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    70a0:	b580      	push	{r7, lr}
    70a2:	b084      	sub	sp, #16
    70a4:	af00      	add	r7, sp, #0
    70a6:	60f8      	str	r0, [r7, #12]
    70a8:	607a      	str	r2, [r7, #4]
    70aa:	230b      	movs	r3, #11
    70ac:	18fb      	adds	r3, r7, r3
    70ae:	1c0a      	adds	r2, r1, #0
    70b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    70b2:	230b      	movs	r3, #11
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	781a      	ldrb	r2, [r3, #0]
    70b8:	68fb      	ldr	r3, [r7, #12]
    70ba:	322e      	adds	r2, #46	; 0x2e
    70bc:	0092      	lsls	r2, r2, #2
    70be:	6879      	ldr	r1, [r7, #4]
    70c0:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    70c2:	68fa      	ldr	r2, [r7, #12]
    70c4:	23aa      	movs	r3, #170	; 0xaa
    70c6:	005b      	lsls	r3, r3, #1
    70c8:	5ad2      	ldrh	r2, [r2, r3]
    70ca:	230b      	movs	r3, #11
    70cc:	18fb      	adds	r3, r7, r3
    70ce:	7819      	ldrb	r1, [r3, #0]
    70d0:	4b06      	ldr	r3, [pc, #24]	; (70ec <usb_device_register_callback+0x4c>)
    70d2:	0049      	lsls	r1, r1, #1
    70d4:	5acb      	ldrh	r3, [r1, r3]
    70d6:	4313      	orrs	r3, r2
    70d8:	b299      	uxth	r1, r3
    70da:	68fa      	ldr	r2, [r7, #12]
    70dc:	23aa      	movs	r3, #170	; 0xaa
    70de:	005b      	lsls	r3, r3, #1
    70e0:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    70e2:	2300      	movs	r3, #0
}
    70e4:	0018      	movs	r0, r3
    70e6:	46bd      	mov	sp, r7
    70e8:	b004      	add	sp, #16
    70ea:	bd80      	pop	{r7, pc}
    70ec:	000090c8 	.word	0x000090c8

000070f0 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    70f0:	b580      	push	{r7, lr}
    70f2:	b082      	sub	sp, #8
    70f4:	af00      	add	r7, sp, #0
    70f6:	6078      	str	r0, [r7, #4]
    70f8:	000a      	movs	r2, r1
    70fa:	1cfb      	adds	r3, r7, #3
    70fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	1cfa      	adds	r2, r7, #3
    7104:	7811      	ldrb	r1, [r2, #0]
    7106:	4a10      	ldr	r2, [pc, #64]	; (7148 <usb_device_enable_callback+0x58>)
    7108:	0049      	lsls	r1, r1, #1
    710a:	5a8a      	ldrh	r2, [r1, r2]
    710c:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    710e:	687a      	ldr	r2, [r7, #4]
    7110:	23ab      	movs	r3, #171	; 0xab
    7112:	005b      	lsls	r3, r3, #1
    7114:	5ad2      	ldrh	r2, [r2, r3]
    7116:	1cfb      	adds	r3, r7, #3
    7118:	7819      	ldrb	r1, [r3, #0]
    711a:	4b0b      	ldr	r3, [pc, #44]	; (7148 <usb_device_enable_callback+0x58>)
    711c:	0049      	lsls	r1, r1, #1
    711e:	5acb      	ldrh	r3, [r1, r3]
    7120:	4313      	orrs	r3, r2
    7122:	b299      	uxth	r1, r3
    7124:	687a      	ldr	r2, [r7, #4]
    7126:	23ab      	movs	r3, #171	; 0xab
    7128:	005b      	lsls	r3, r3, #1
    712a:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    712c:	687b      	ldr	r3, [r7, #4]
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	1cfa      	adds	r2, r7, #3
    7132:	7811      	ldrb	r1, [r2, #0]
    7134:	4a04      	ldr	r2, [pc, #16]	; (7148 <usb_device_enable_callback+0x58>)
    7136:	0049      	lsls	r1, r1, #1
    7138:	5a8a      	ldrh	r2, [r1, r2]
    713a:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    713c:	2300      	movs	r3, #0
}
    713e:	0018      	movs	r0, r3
    7140:	46bd      	mov	sp, r7
    7142:	b002      	add	sp, #8
    7144:	bd80      	pop	{r7, pc}
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	000090c8 	.word	0x000090c8

0000714c <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    714c:	b580      	push	{r7, lr}
    714e:	b082      	sub	sp, #8
    7150:	af00      	add	r7, sp, #0
    7152:	6078      	str	r0, [r7, #4]
    7154:	000a      	movs	r2, r1
    7156:	1cfb      	adds	r3, r7, #3
    7158:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    715a:	687a      	ldr	r2, [r7, #4]
    715c:	23ab      	movs	r3, #171	; 0xab
    715e:	005b      	lsls	r3, r3, #1
    7160:	5ad3      	ldrh	r3, [r2, r3]
    7162:	b21b      	sxth	r3, r3
    7164:	1cfa      	adds	r2, r7, #3
    7166:	7811      	ldrb	r1, [r2, #0]
    7168:	4a0c      	ldr	r2, [pc, #48]	; (719c <usb_device_disable_callback+0x50>)
    716a:	0049      	lsls	r1, r1, #1
    716c:	5a8a      	ldrh	r2, [r1, r2]
    716e:	b212      	sxth	r2, r2
    7170:	43d2      	mvns	r2, r2
    7172:	b212      	sxth	r2, r2
    7174:	4013      	ands	r3, r2
    7176:	b21b      	sxth	r3, r3
    7178:	b299      	uxth	r1, r3
    717a:	687a      	ldr	r2, [r7, #4]
    717c:	23ab      	movs	r3, #171	; 0xab
    717e:	005b      	lsls	r3, r3, #1
    7180:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	1cfa      	adds	r2, r7, #3
    7188:	7811      	ldrb	r1, [r2, #0]
    718a:	4a04      	ldr	r2, [pc, #16]	; (719c <usb_device_disable_callback+0x50>)
    718c:	0049      	lsls	r1, r1, #1
    718e:	5a8a      	ldrh	r2, [r1, r2]
    7190:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    7192:	2300      	movs	r3, #0
}
    7194:	0018      	movs	r0, r3
    7196:	46bd      	mov	sp, r7
    7198:	b002      	add	sp, #8
    719a:	bd80      	pop	{r7, pc}
    719c:	000090c8 	.word	0x000090c8

000071a0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b084      	sub	sp, #16
    71a4:	af00      	add	r7, sp, #0
    71a6:	60f8      	str	r0, [r7, #12]
    71a8:	0008      	movs	r0, r1
    71aa:	0011      	movs	r1, r2
    71ac:	607b      	str	r3, [r7, #4]
    71ae:	230b      	movs	r3, #11
    71b0:	18fb      	adds	r3, r7, r3
    71b2:	1c02      	adds	r2, r0, #0
    71b4:	701a      	strb	r2, [r3, #0]
    71b6:	230a      	movs	r3, #10
    71b8:	18fb      	adds	r3, r7, r3
    71ba:	1c0a      	adds	r2, r1, #0
    71bc:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    71be:	230b      	movs	r3, #11
    71c0:	18fb      	adds	r3, r7, r3
    71c2:	7819      	ldrb	r1, [r3, #0]
    71c4:	230a      	movs	r3, #10
    71c6:	18fb      	adds	r3, r7, r3
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	68fa      	ldr	r2, [r7, #12]
    71cc:	0089      	lsls	r1, r1, #2
    71ce:	18cb      	adds	r3, r1, r3
    71d0:	3334      	adds	r3, #52	; 0x34
    71d2:	009b      	lsls	r3, r3, #2
    71d4:	18d3      	adds	r3, r2, r3
    71d6:	3304      	adds	r3, #4
    71d8:	687a      	ldr	r2, [r7, #4]
    71da:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    71dc:	230b      	movs	r3, #11
    71de:	18fb      	adds	r3, r7, r3
    71e0:	781a      	ldrb	r2, [r3, #0]
    71e2:	230b      	movs	r3, #11
    71e4:	18fb      	adds	r3, r7, r3
    71e6:	7819      	ldrb	r1, [r3, #0]
    71e8:	68f8      	ldr	r0, [r7, #12]
    71ea:	23ac      	movs	r3, #172	; 0xac
    71ec:	005b      	lsls	r3, r3, #1
    71ee:	1841      	adds	r1, r0, r1
    71f0:	18cb      	adds	r3, r1, r3
    71f2:	7819      	ldrb	r1, [r3, #0]
    71f4:	230a      	movs	r3, #10
    71f6:	18fb      	adds	r3, r7, r3
    71f8:	781b      	ldrb	r3, [r3, #0]
    71fa:	4808      	ldr	r0, [pc, #32]	; (721c <usb_device_endpoint_register_callback+0x7c>)
    71fc:	5cc3      	ldrb	r3, [r0, r3]
    71fe:	430b      	orrs	r3, r1
    7200:	b2d8      	uxtb	r0, r3
    7202:	68f9      	ldr	r1, [r7, #12]
    7204:	23ac      	movs	r3, #172	; 0xac
    7206:	005b      	lsls	r3, r3, #1
    7208:	188a      	adds	r2, r1, r2
    720a:	18d3      	adds	r3, r2, r3
    720c:	1c02      	adds	r2, r0, #0
    720e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7210:	2300      	movs	r3, #0
}
    7212:	0018      	movs	r0, r3
    7214:	46bd      	mov	sp, r7
    7216:	b004      	add	sp, #16
    7218:	bd80      	pop	{r7, pc}
    721a:	46c0      	nop			; (mov r8, r8)
    721c:	000090d8 	.word	0x000090d8

00007220 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    7220:	b580      	push	{r7, lr}
    7222:	b082      	sub	sp, #8
    7224:	af00      	add	r7, sp, #0
    7226:	6078      	str	r0, [r7, #4]
    7228:	0008      	movs	r0, r1
    722a:	0011      	movs	r1, r2
    722c:	1cfb      	adds	r3, r7, #3
    722e:	1c02      	adds	r2, r0, #0
    7230:	701a      	strb	r2, [r3, #0]
    7232:	1cbb      	adds	r3, r7, #2
    7234:	1c0a      	adds	r2, r1, #0
    7236:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    7238:	1cfb      	adds	r3, r7, #3
    723a:	7819      	ldrb	r1, [r3, #0]
    723c:	1cbb      	adds	r3, r7, #2
    723e:	781b      	ldrb	r3, [r3, #0]
    7240:	687a      	ldr	r2, [r7, #4]
    7242:	0089      	lsls	r1, r1, #2
    7244:	18cb      	adds	r3, r1, r3
    7246:	3334      	adds	r3, #52	; 0x34
    7248:	009b      	lsls	r3, r3, #2
    724a:	18d3      	adds	r3, r2, r3
    724c:	3304      	adds	r3, #4
    724e:	2200      	movs	r2, #0
    7250:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    7252:	1cfb      	adds	r3, r7, #3
    7254:	781a      	ldrb	r2, [r3, #0]
    7256:	1cfb      	adds	r3, r7, #3
    7258:	7819      	ldrb	r1, [r3, #0]
    725a:	6878      	ldr	r0, [r7, #4]
    725c:	23ac      	movs	r3, #172	; 0xac
    725e:	005b      	lsls	r3, r3, #1
    7260:	1841      	adds	r1, r0, r1
    7262:	18cb      	adds	r3, r1, r3
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	b25b      	sxtb	r3, r3
    7268:	1cb9      	adds	r1, r7, #2
    726a:	7809      	ldrb	r1, [r1, #0]
    726c:	4809      	ldr	r0, [pc, #36]	; (7294 <usb_device_endpoint_unregister_callback+0x74>)
    726e:	5c41      	ldrb	r1, [r0, r1]
    7270:	b249      	sxtb	r1, r1
    7272:	43c9      	mvns	r1, r1
    7274:	b249      	sxtb	r1, r1
    7276:	400b      	ands	r3, r1
    7278:	b25b      	sxtb	r3, r3
    727a:	b2d8      	uxtb	r0, r3
    727c:	6879      	ldr	r1, [r7, #4]
    727e:	23ac      	movs	r3, #172	; 0xac
    7280:	005b      	lsls	r3, r3, #1
    7282:	188a      	adds	r2, r1, r2
    7284:	18d3      	adds	r3, r2, r3
    7286:	1c02      	adds	r2, r0, #0
    7288:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    728a:	2300      	movs	r3, #0
}
    728c:	0018      	movs	r0, r3
    728e:	46bd      	mov	sp, r7
    7290:	b002      	add	sp, #8
    7292:	bd80      	pop	{r7, pc}
    7294:	000090d8 	.word	0x000090d8

00007298 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    7298:	b580      	push	{r7, lr}
    729a:	b084      	sub	sp, #16
    729c:	af00      	add	r7, sp, #0
    729e:	6078      	str	r0, [r7, #4]
    72a0:	0008      	movs	r0, r1
    72a2:	0011      	movs	r1, r2
    72a4:	1cfb      	adds	r3, r7, #3
    72a6:	1c02      	adds	r2, r0, #0
    72a8:	701a      	strb	r2, [r3, #0]
    72aa:	1cbb      	adds	r3, r7, #2
    72ac:	1c0a      	adds	r2, r1, #0
    72ae:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    72b0:	230f      	movs	r3, #15
    72b2:	18fb      	adds	r3, r7, r3
    72b4:	1cfa      	adds	r2, r7, #3
    72b6:	7812      	ldrb	r2, [r2, #0]
    72b8:	210f      	movs	r1, #15
    72ba:	400a      	ands	r2, r1
    72bc:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    72be:	230f      	movs	r3, #15
    72c0:	18fb      	adds	r3, r7, r3
    72c2:	781a      	ldrb	r2, [r3, #0]
    72c4:	230f      	movs	r3, #15
    72c6:	18fb      	adds	r3, r7, r3
    72c8:	7819      	ldrb	r1, [r3, #0]
    72ca:	6878      	ldr	r0, [r7, #4]
    72cc:	23b0      	movs	r3, #176	; 0xb0
    72ce:	005b      	lsls	r3, r3, #1
    72d0:	1841      	adds	r1, r0, r1
    72d2:	18cb      	adds	r3, r1, r3
    72d4:	7819      	ldrb	r1, [r3, #0]
    72d6:	1cbb      	adds	r3, r7, #2
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	4855      	ldr	r0, [pc, #340]	; (7430 <usb_device_endpoint_enable_callback+0x198>)
    72dc:	5cc3      	ldrb	r3, [r0, r3]
    72de:	430b      	orrs	r3, r1
    72e0:	b2d8      	uxtb	r0, r3
    72e2:	6879      	ldr	r1, [r7, #4]
    72e4:	23b0      	movs	r3, #176	; 0xb0
    72e6:	005b      	lsls	r3, r3, #1
    72e8:	188a      	adds	r2, r1, r2
    72ea:	18d3      	adds	r3, r2, r3
    72ec:	1c02      	adds	r2, r0, #0
    72ee:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    72f0:	1cbb      	adds	r3, r7, #2
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	2b00      	cmp	r3, #0
    72f6:	d12f      	bne.n	7358 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    72f8:	230f      	movs	r3, #15
    72fa:	18fb      	adds	r3, r7, r3
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	2b00      	cmp	r3, #0
    7300:	d10c      	bne.n	731c <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	6819      	ldr	r1, [r3, #0]
    7306:	230f      	movs	r3, #15
    7308:	18fb      	adds	r3, r7, r3
    730a:	781a      	ldrb	r2, [r3, #0]
    730c:	230a      	movs	r3, #10
    730e:	33ff      	adds	r3, #255	; 0xff
    7310:	0152      	lsls	r2, r2, #5
    7312:	188a      	adds	r2, r1, r2
    7314:	18d3      	adds	r3, r2, r3
    7316:	2203      	movs	r2, #3
    7318:	701a      	strb	r2, [r3, #0]
    731a:	e01d      	b.n	7358 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    731c:	1cfb      	adds	r3, r7, #3
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	b25b      	sxtb	r3, r3
    7322:	2b00      	cmp	r3, #0
    7324:	da0c      	bge.n	7340 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    7326:	687b      	ldr	r3, [r7, #4]
    7328:	6819      	ldr	r1, [r3, #0]
    732a:	230f      	movs	r3, #15
    732c:	18fb      	adds	r3, r7, r3
    732e:	781a      	ldrb	r2, [r3, #0]
    7330:	230a      	movs	r3, #10
    7332:	33ff      	adds	r3, #255	; 0xff
    7334:	0152      	lsls	r2, r2, #5
    7336:	188a      	adds	r2, r1, r2
    7338:	18d3      	adds	r3, r2, r3
    733a:	2202      	movs	r2, #2
    733c:	701a      	strb	r2, [r3, #0]
    733e:	e00b      	b.n	7358 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    7340:	687b      	ldr	r3, [r7, #4]
    7342:	6819      	ldr	r1, [r3, #0]
    7344:	230f      	movs	r3, #15
    7346:	18fb      	adds	r3, r7, r3
    7348:	781a      	ldrb	r2, [r3, #0]
    734a:	230a      	movs	r3, #10
    734c:	33ff      	adds	r3, #255	; 0xff
    734e:	0152      	lsls	r2, r2, #5
    7350:	188a      	adds	r2, r1, r2
    7352:	18d3      	adds	r3, r2, r3
    7354:	2201      	movs	r2, #1
    7356:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    7358:	1cbb      	adds	r3, r7, #2
    735a:	781b      	ldrb	r3, [r3, #0]
    735c:	2b01      	cmp	r3, #1
    735e:	d12f      	bne.n	73c0 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    7360:	230f      	movs	r3, #15
    7362:	18fb      	adds	r3, r7, r3
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	2b00      	cmp	r3, #0
    7368:	d10c      	bne.n	7384 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	6819      	ldr	r1, [r3, #0]
    736e:	230f      	movs	r3, #15
    7370:	18fb      	adds	r3, r7, r3
    7372:	781a      	ldrb	r2, [r3, #0]
    7374:	230a      	movs	r3, #10
    7376:	33ff      	adds	r3, #255	; 0xff
    7378:	0152      	lsls	r2, r2, #5
    737a:	188a      	adds	r2, r1, r2
    737c:	18d3      	adds	r3, r2, r3
    737e:	220c      	movs	r2, #12
    7380:	701a      	strb	r2, [r3, #0]
    7382:	e01d      	b.n	73c0 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    7384:	1cfb      	adds	r3, r7, #3
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	b25b      	sxtb	r3, r3
    738a:	2b00      	cmp	r3, #0
    738c:	da0c      	bge.n	73a8 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	6819      	ldr	r1, [r3, #0]
    7392:	230f      	movs	r3, #15
    7394:	18fb      	adds	r3, r7, r3
    7396:	781a      	ldrb	r2, [r3, #0]
    7398:	230a      	movs	r3, #10
    739a:	33ff      	adds	r3, #255	; 0xff
    739c:	0152      	lsls	r2, r2, #5
    739e:	188a      	adds	r2, r1, r2
    73a0:	18d3      	adds	r3, r2, r3
    73a2:	2208      	movs	r2, #8
    73a4:	701a      	strb	r2, [r3, #0]
    73a6:	e00b      	b.n	73c0 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	6819      	ldr	r1, [r3, #0]
    73ac:	230f      	movs	r3, #15
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	781a      	ldrb	r2, [r3, #0]
    73b2:	230a      	movs	r3, #10
    73b4:	33ff      	adds	r3, #255	; 0xff
    73b6:	0152      	lsls	r2, r2, #5
    73b8:	188a      	adds	r2, r1, r2
    73ba:	18d3      	adds	r3, r2, r3
    73bc:	2204      	movs	r2, #4
    73be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    73c0:	1cbb      	adds	r3, r7, #2
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	2b02      	cmp	r3, #2
    73c6:	d10b      	bne.n	73e0 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	6819      	ldr	r1, [r3, #0]
    73cc:	230f      	movs	r3, #15
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	781a      	ldrb	r2, [r3, #0]
    73d2:	230a      	movs	r3, #10
    73d4:	33ff      	adds	r3, #255	; 0xff
    73d6:	0152      	lsls	r2, r2, #5
    73d8:	188a      	adds	r2, r1, r2
    73da:	18d3      	adds	r3, r2, r3
    73dc:	2210      	movs	r2, #16
    73de:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    73e0:	1cbb      	adds	r3, r7, #2
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	2b03      	cmp	r3, #3
    73e6:	d11d      	bne.n	7424 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    73e8:	1cfb      	adds	r3, r7, #3
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	b25b      	sxtb	r3, r3
    73ee:	2b00      	cmp	r3, #0
    73f0:	da0c      	bge.n	740c <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	6819      	ldr	r1, [r3, #0]
    73f6:	230f      	movs	r3, #15
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	781a      	ldrb	r2, [r3, #0]
    73fc:	230a      	movs	r3, #10
    73fe:	33ff      	adds	r3, #255	; 0xff
    7400:	0152      	lsls	r2, r2, #5
    7402:	188a      	adds	r2, r1, r2
    7404:	18d3      	adds	r3, r2, r3
    7406:	2240      	movs	r2, #64	; 0x40
    7408:	701a      	strb	r2, [r3, #0]
    740a:	e00b      	b.n	7424 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	6819      	ldr	r1, [r3, #0]
    7410:	230f      	movs	r3, #15
    7412:	18fb      	adds	r3, r7, r3
    7414:	781a      	ldrb	r2, [r3, #0]
    7416:	230a      	movs	r3, #10
    7418:	33ff      	adds	r3, #255	; 0xff
    741a:	0152      	lsls	r2, r2, #5
    741c:	188a      	adds	r2, r1, r2
    741e:	18d3      	adds	r3, r2, r3
    7420:	2220      	movs	r2, #32
    7422:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    7424:	2300      	movs	r3, #0
}
    7426:	0018      	movs	r0, r3
    7428:	46bd      	mov	sp, r7
    742a:	b004      	add	sp, #16
    742c:	bd80      	pop	{r7, pc}
    742e:	46c0      	nop			; (mov r8, r8)
    7430:	000090d8 	.word	0x000090d8

00007434 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
    743c:	0008      	movs	r0, r1
    743e:	0011      	movs	r1, r2
    7440:	1cfb      	adds	r3, r7, #3
    7442:	1c02      	adds	r2, r0, #0
    7444:	701a      	strb	r2, [r3, #0]
    7446:	1cbb      	adds	r3, r7, #2
    7448:	1c0a      	adds	r2, r1, #0
    744a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    744c:	230f      	movs	r3, #15
    744e:	18fb      	adds	r3, r7, r3
    7450:	1cfa      	adds	r2, r7, #3
    7452:	7812      	ldrb	r2, [r2, #0]
    7454:	210f      	movs	r1, #15
    7456:	400a      	ands	r2, r1
    7458:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    745a:	230f      	movs	r3, #15
    745c:	18fb      	adds	r3, r7, r3
    745e:	781a      	ldrb	r2, [r3, #0]
    7460:	230f      	movs	r3, #15
    7462:	18fb      	adds	r3, r7, r3
    7464:	7819      	ldrb	r1, [r3, #0]
    7466:	6878      	ldr	r0, [r7, #4]
    7468:	23b0      	movs	r3, #176	; 0xb0
    746a:	005b      	lsls	r3, r3, #1
    746c:	1841      	adds	r1, r0, r1
    746e:	18cb      	adds	r3, r1, r3
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	b25b      	sxtb	r3, r3
    7474:	1cb9      	adds	r1, r7, #2
    7476:	7809      	ldrb	r1, [r1, #0]
    7478:	4856      	ldr	r0, [pc, #344]	; (75d4 <usb_device_endpoint_disable_callback+0x1a0>)
    747a:	5c41      	ldrb	r1, [r0, r1]
    747c:	b249      	sxtb	r1, r1
    747e:	43c9      	mvns	r1, r1
    7480:	b249      	sxtb	r1, r1
    7482:	400b      	ands	r3, r1
    7484:	b25b      	sxtb	r3, r3
    7486:	b2d8      	uxtb	r0, r3
    7488:	6879      	ldr	r1, [r7, #4]
    748a:	23b0      	movs	r3, #176	; 0xb0
    748c:	005b      	lsls	r3, r3, #1
    748e:	188a      	adds	r2, r1, r2
    7490:	18d3      	adds	r3, r2, r3
    7492:	1c02      	adds	r2, r0, #0
    7494:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    7496:	1cbb      	adds	r3, r7, #2
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	2b00      	cmp	r3, #0
    749c:	d12f      	bne.n	74fe <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    749e:	230f      	movs	r3, #15
    74a0:	18fb      	adds	r3, r7, r3
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d10c      	bne.n	74c2 <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	6819      	ldr	r1, [r3, #0]
    74ac:	230f      	movs	r3, #15
    74ae:	18fb      	adds	r3, r7, r3
    74b0:	781a      	ldrb	r2, [r3, #0]
    74b2:	2384      	movs	r3, #132	; 0x84
    74b4:	005b      	lsls	r3, r3, #1
    74b6:	0152      	lsls	r2, r2, #5
    74b8:	188a      	adds	r2, r1, r2
    74ba:	18d3      	adds	r3, r2, r3
    74bc:	2203      	movs	r2, #3
    74be:	701a      	strb	r2, [r3, #0]
    74c0:	e01d      	b.n	74fe <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    74c2:	1cfb      	adds	r3, r7, #3
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	b25b      	sxtb	r3, r3
    74c8:	2b00      	cmp	r3, #0
    74ca:	da0c      	bge.n	74e6 <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	6819      	ldr	r1, [r3, #0]
    74d0:	230f      	movs	r3, #15
    74d2:	18fb      	adds	r3, r7, r3
    74d4:	781a      	ldrb	r2, [r3, #0]
    74d6:	2384      	movs	r3, #132	; 0x84
    74d8:	005b      	lsls	r3, r3, #1
    74da:	0152      	lsls	r2, r2, #5
    74dc:	188a      	adds	r2, r1, r2
    74de:	18d3      	adds	r3, r2, r3
    74e0:	2202      	movs	r2, #2
    74e2:	701a      	strb	r2, [r3, #0]
    74e4:	e00b      	b.n	74fe <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    74e6:	687b      	ldr	r3, [r7, #4]
    74e8:	6819      	ldr	r1, [r3, #0]
    74ea:	230f      	movs	r3, #15
    74ec:	18fb      	adds	r3, r7, r3
    74ee:	781a      	ldrb	r2, [r3, #0]
    74f0:	2384      	movs	r3, #132	; 0x84
    74f2:	005b      	lsls	r3, r3, #1
    74f4:	0152      	lsls	r2, r2, #5
    74f6:	188a      	adds	r2, r1, r2
    74f8:	18d3      	adds	r3, r2, r3
    74fa:	2201      	movs	r2, #1
    74fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    74fe:	1cbb      	adds	r3, r7, #2
    7500:	781b      	ldrb	r3, [r3, #0]
    7502:	2b01      	cmp	r3, #1
    7504:	d12f      	bne.n	7566 <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    7506:	230f      	movs	r3, #15
    7508:	18fb      	adds	r3, r7, r3
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	2b00      	cmp	r3, #0
    750e:	d10c      	bne.n	752a <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	6819      	ldr	r1, [r3, #0]
    7514:	230f      	movs	r3, #15
    7516:	18fb      	adds	r3, r7, r3
    7518:	781a      	ldrb	r2, [r3, #0]
    751a:	2384      	movs	r3, #132	; 0x84
    751c:	005b      	lsls	r3, r3, #1
    751e:	0152      	lsls	r2, r2, #5
    7520:	188a      	adds	r2, r1, r2
    7522:	18d3      	adds	r3, r2, r3
    7524:	220c      	movs	r2, #12
    7526:	701a      	strb	r2, [r3, #0]
    7528:	e01d      	b.n	7566 <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    752a:	1cfb      	adds	r3, r7, #3
    752c:	781b      	ldrb	r3, [r3, #0]
    752e:	b25b      	sxtb	r3, r3
    7530:	2b00      	cmp	r3, #0
    7532:	da0c      	bge.n	754e <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    7534:	687b      	ldr	r3, [r7, #4]
    7536:	6819      	ldr	r1, [r3, #0]
    7538:	230f      	movs	r3, #15
    753a:	18fb      	adds	r3, r7, r3
    753c:	781a      	ldrb	r2, [r3, #0]
    753e:	2384      	movs	r3, #132	; 0x84
    7540:	005b      	lsls	r3, r3, #1
    7542:	0152      	lsls	r2, r2, #5
    7544:	188a      	adds	r2, r1, r2
    7546:	18d3      	adds	r3, r2, r3
    7548:	2208      	movs	r2, #8
    754a:	701a      	strb	r2, [r3, #0]
    754c:	e00b      	b.n	7566 <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    754e:	687b      	ldr	r3, [r7, #4]
    7550:	6819      	ldr	r1, [r3, #0]
    7552:	230f      	movs	r3, #15
    7554:	18fb      	adds	r3, r7, r3
    7556:	781a      	ldrb	r2, [r3, #0]
    7558:	2384      	movs	r3, #132	; 0x84
    755a:	005b      	lsls	r3, r3, #1
    755c:	0152      	lsls	r2, r2, #5
    755e:	188a      	adds	r2, r1, r2
    7560:	18d3      	adds	r3, r2, r3
    7562:	2204      	movs	r2, #4
    7564:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    7566:	1cbb      	adds	r3, r7, #2
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	2b02      	cmp	r3, #2
    756c:	d10b      	bne.n	7586 <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	6819      	ldr	r1, [r3, #0]
    7572:	230f      	movs	r3, #15
    7574:	18fb      	adds	r3, r7, r3
    7576:	781a      	ldrb	r2, [r3, #0]
    7578:	2384      	movs	r3, #132	; 0x84
    757a:	005b      	lsls	r3, r3, #1
    757c:	0152      	lsls	r2, r2, #5
    757e:	188a      	adds	r2, r1, r2
    7580:	18d3      	adds	r3, r2, r3
    7582:	2210      	movs	r2, #16
    7584:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    7586:	1cbb      	adds	r3, r7, #2
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	2b03      	cmp	r3, #3
    758c:	d11d      	bne.n	75ca <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    758e:	1cfb      	adds	r3, r7, #3
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	b25b      	sxtb	r3, r3
    7594:	2b00      	cmp	r3, #0
    7596:	da0c      	bge.n	75b2 <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	6819      	ldr	r1, [r3, #0]
    759c:	230f      	movs	r3, #15
    759e:	18fb      	adds	r3, r7, r3
    75a0:	781a      	ldrb	r2, [r3, #0]
    75a2:	2384      	movs	r3, #132	; 0x84
    75a4:	005b      	lsls	r3, r3, #1
    75a6:	0152      	lsls	r2, r2, #5
    75a8:	188a      	adds	r2, r1, r2
    75aa:	18d3      	adds	r3, r2, r3
    75ac:	2240      	movs	r2, #64	; 0x40
    75ae:	701a      	strb	r2, [r3, #0]
    75b0:	e00b      	b.n	75ca <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	6819      	ldr	r1, [r3, #0]
    75b6:	230f      	movs	r3, #15
    75b8:	18fb      	adds	r3, r7, r3
    75ba:	781a      	ldrb	r2, [r3, #0]
    75bc:	2384      	movs	r3, #132	; 0x84
    75be:	005b      	lsls	r3, r3, #1
    75c0:	0152      	lsls	r2, r2, #5
    75c2:	188a      	adds	r2, r1, r2
    75c4:	18d3      	adds	r3, r2, r3
    75c6:	2220      	movs	r2, #32
    75c8:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    75ca:	2300      	movs	r3, #0
}
    75cc:	0018      	movs	r0, r3
    75ce:	46bd      	mov	sp, r7
    75d0:	b004      	add	sp, #16
    75d2:	bd80      	pop	{r7, pc}
    75d4:	000090d8 	.word	0x000090d8

000075d8 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    75d8:	b580      	push	{r7, lr}
    75da:	b082      	sub	sp, #8
    75dc:	af00      	add	r7, sp, #0
    75de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    75e0:	687b      	ldr	r3, [r7, #4]
    75e2:	2200      	movs	r2, #0
    75e4:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	2200      	movs	r2, #0
    75ea:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	2200      	movs	r2, #0
    75f0:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	2201      	movs	r2, #1
    75f6:	70da      	strb	r2, [r3, #3]
}
    75f8:	46c0      	nop			; (mov r8, r8)
    75fa:	46bd      	mov	sp, r7
    75fc:	b002      	add	sp, #8
    75fe:	bd80      	pop	{r7, pc}

00007600 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    7600:	b590      	push	{r4, r7, lr}
    7602:	b085      	sub	sp, #20
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
    7608:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    760a:	683b      	ldr	r3, [r7, #0]
    760c:	781a      	ldrb	r2, [r3, #0]
    760e:	230f      	movs	r3, #15
    7610:	18fb      	adds	r3, r7, r3
    7612:	210f      	movs	r1, #15
    7614:	400a      	ands	r2, r1
    7616:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    7618:	683b      	ldr	r3, [r7, #0]
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	b25b      	sxtb	r3, r3
    761e:	b2db      	uxtb	r3, r3
    7620:	09db      	lsrs	r3, r3, #7
    7622:	b2da      	uxtb	r2, r3
    7624:	230e      	movs	r3, #14
    7626:	18fb      	adds	r3, r7, r3
    7628:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	78db      	ldrb	r3, [r3, #3]
    762e:	2b04      	cmp	r3, #4
    7630:	d900      	bls.n	7634 <usb_device_endpoint_set_config+0x34>
    7632:	e200      	b.n	7a36 <usb_device_endpoint_set_config+0x436>
    7634:	009a      	lsls	r2, r3, #2
    7636:	4be4      	ldr	r3, [pc, #912]	; (79c8 <usb_device_endpoint_set_config+0x3c8>)
    7638:	18d3      	adds	r3, r2, r3
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	681b      	ldr	r3, [r3, #0]
    7642:	220f      	movs	r2, #15
    7644:	18ba      	adds	r2, r7, r2
    7646:	7812      	ldrb	r2, [r2, #0]
    7648:	3208      	adds	r2, #8
    764a:	0152      	lsls	r2, r2, #5
    764c:	2100      	movs	r1, #0
    764e:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    7650:	2300      	movs	r3, #0
    7652:	e249      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	681b      	ldr	r3, [r3, #0]
    7658:	220f      	movs	r2, #15
    765a:	18ba      	adds	r2, r7, r2
    765c:	7812      	ldrb	r2, [r2, #0]
    765e:	3208      	adds	r2, #8
    7660:	0152      	lsls	r2, r2, #5
    7662:	5cd3      	ldrb	r3, [r2, r3]
    7664:	b2db      	uxtb	r3, r3
    7666:	001a      	movs	r2, r3
    7668:	2307      	movs	r3, #7
    766a:	4013      	ands	r3, r2
    766c:	d130      	bne.n	76d0 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	681b      	ldr	r3, [r3, #0]
    7672:	220f      	movs	r2, #15
    7674:	18ba      	adds	r2, r7, r2
    7676:	7812      	ldrb	r2, [r2, #0]
    7678:	3208      	adds	r2, #8
    767a:	0152      	lsls	r2, r2, #5
    767c:	5cd3      	ldrb	r3, [r2, r3]
    767e:	b2db      	uxtb	r3, r3
    7680:	001a      	movs	r2, r3
    7682:	2370      	movs	r3, #112	; 0x70
    7684:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    7686:	d123      	bne.n	76d0 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	681b      	ldr	r3, [r3, #0]
    768c:	220f      	movs	r2, #15
    768e:	18ba      	adds	r2, r7, r2
    7690:	7812      	ldrb	r2, [r2, #0]
    7692:	3208      	adds	r2, #8
    7694:	0152      	lsls	r2, r2, #5
    7696:	2111      	movs	r1, #17
    7698:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    769a:	687b      	ldr	r3, [r7, #4]
    769c:	681a      	ldr	r2, [r3, #0]
    769e:	230f      	movs	r3, #15
    76a0:	18fb      	adds	r3, r7, r3
    76a2:	781b      	ldrb	r3, [r3, #0]
    76a4:	3308      	adds	r3, #8
    76a6:	015b      	lsls	r3, r3, #5
    76a8:	18d3      	adds	r3, r2, r3
    76aa:	3305      	adds	r3, #5
    76ac:	2240      	movs	r2, #64	; 0x40
    76ae:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	681a      	ldr	r2, [r3, #0]
    76b4:	230f      	movs	r3, #15
    76b6:	18fb      	adds	r3, r7, r3
    76b8:	781b      	ldrb	r3, [r3, #0]
    76ba:	3308      	adds	r3, #8
    76bc:	015b      	lsls	r3, r3, #5
    76be:	18d3      	adds	r3, r2, r3
    76c0:	3304      	adds	r3, #4
    76c2:	2280      	movs	r2, #128	; 0x80
    76c4:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    76c6:	683b      	ldr	r3, [r7, #0]
    76c8:	789b      	ldrb	r3, [r3, #2]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d102      	bne.n	76d4 <usb_device_endpoint_set_config+0xd4>
    76ce:	e028      	b.n	7722 <usb_device_endpoint_set_config+0x122>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    76d0:	231c      	movs	r3, #28
    76d2:	e209      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    76d4:	230f      	movs	r3, #15
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	7818      	ldrb	r0, [r3, #0]
    76da:	230f      	movs	r3, #15
    76dc:	18fb      	adds	r3, r7, r3
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	4aba      	ldr	r2, [pc, #744]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    76e2:	015b      	lsls	r3, r3, #5
    76e4:	18d3      	adds	r3, r2, r3
    76e6:	3304      	adds	r3, #4
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	2280      	movs	r2, #128	; 0x80
    76ec:	0612      	lsls	r2, r2, #24
    76ee:	431a      	orrs	r2, r3
    76f0:	49b6      	ldr	r1, [pc, #728]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    76f2:	0143      	lsls	r3, r0, #5
    76f4:	18cb      	adds	r3, r1, r3
    76f6:	3304      	adds	r3, #4
    76f8:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    76fa:	230f      	movs	r3, #15
    76fc:	18fb      	adds	r3, r7, r3
    76fe:	7818      	ldrb	r0, [r3, #0]
    7700:	230f      	movs	r3, #15
    7702:	18fb      	adds	r3, r7, r3
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	4ab1      	ldr	r2, [pc, #708]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    7708:	015b      	lsls	r3, r3, #5
    770a:	18d3      	adds	r3, r2, r3
    770c:	3314      	adds	r3, #20
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2280      	movs	r2, #128	; 0x80
    7712:	0612      	lsls	r2, r2, #24
    7714:	431a      	orrs	r2, r3
    7716:	49ad      	ldr	r1, [pc, #692]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    7718:	0143      	lsls	r3, r0, #5
    771a:	18cb      	adds	r3, r1, r3
    771c:	3314      	adds	r3, #20
    771e:	601a      	str	r2, [r3, #0]
    7720:	e023      	b.n	776a <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7722:	230f      	movs	r3, #15
    7724:	18fb      	adds	r3, r7, r3
    7726:	7818      	ldrb	r0, [r3, #0]
    7728:	230f      	movs	r3, #15
    772a:	18fb      	adds	r3, r7, r3
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	4aa7      	ldr	r2, [pc, #668]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    7730:	015b      	lsls	r3, r3, #5
    7732:	18d3      	adds	r3, r2, r3
    7734:	3304      	adds	r3, #4
    7736:	681b      	ldr	r3, [r3, #0]
    7738:	005b      	lsls	r3, r3, #1
    773a:	085a      	lsrs	r2, r3, #1
    773c:	49a3      	ldr	r1, [pc, #652]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    773e:	0143      	lsls	r3, r0, #5
    7740:	18cb      	adds	r3, r1, r3
    7742:	3304      	adds	r3, #4
    7744:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7746:	230f      	movs	r3, #15
    7748:	18fb      	adds	r3, r7, r3
    774a:	7818      	ldrb	r0, [r3, #0]
    774c:	230f      	movs	r3, #15
    774e:	18fb      	adds	r3, r7, r3
    7750:	781b      	ldrb	r3, [r3, #0]
    7752:	4a9e      	ldr	r2, [pc, #632]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    7754:	015b      	lsls	r3, r3, #5
    7756:	18d3      	adds	r3, r2, r3
    7758:	3314      	adds	r3, #20
    775a:	681b      	ldr	r3, [r3, #0]
    775c:	005b      	lsls	r3, r3, #1
    775e:	085a      	lsrs	r2, r3, #1
    7760:	499a      	ldr	r1, [pc, #616]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    7762:	0143      	lsls	r3, r0, #5
    7764:	18cb      	adds	r3, r1, r3
    7766:	3314      	adds	r3, #20
    7768:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    776a:	230f      	movs	r3, #15
    776c:	18fb      	adds	r3, r7, r3
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	683a      	ldr	r2, [r7, #0]
    7772:	7852      	ldrb	r2, [r2, #1]
    7774:	1c11      	adds	r1, r2, #0
    7776:	2207      	movs	r2, #7
    7778:	400a      	ands	r2, r1
    777a:	b2d1      	uxtb	r1, r2
    777c:	4a93      	ldr	r2, [pc, #588]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    777e:	015b      	lsls	r3, r3, #5
    7780:	18d3      	adds	r3, r2, r3
    7782:	685a      	ldr	r2, [r3, #4]
    7784:	2007      	movs	r0, #7
    7786:	4001      	ands	r1, r0
    7788:	0709      	lsls	r1, r1, #28
    778a:	4891      	ldr	r0, [pc, #580]	; (79d0 <usb_device_endpoint_set_config+0x3d0>)
    778c:	4002      	ands	r2, r0
    778e:	430a      	orrs	r2, r1
    7790:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7792:	230f      	movs	r3, #15
    7794:	18fb      	adds	r3, r7, r3
    7796:	781b      	ldrb	r3, [r3, #0]
    7798:	683a      	ldr	r2, [r7, #0]
    779a:	7852      	ldrb	r2, [r2, #1]
    779c:	1c11      	adds	r1, r2, #0
    779e:	2207      	movs	r2, #7
    77a0:	400a      	ands	r2, r1
    77a2:	b2d1      	uxtb	r1, r2
    77a4:	4a89      	ldr	r2, [pc, #548]	; (79cc <usb_device_endpoint_set_config+0x3cc>)
    77a6:	015b      	lsls	r3, r3, #5
    77a8:	18d3      	adds	r3, r2, r3
    77aa:	3310      	adds	r3, #16
    77ac:	685a      	ldr	r2, [r3, #4]
    77ae:	2007      	movs	r0, #7
    77b0:	4001      	ands	r1, r0
    77b2:	0709      	lsls	r1, r1, #28
    77b4:	4886      	ldr	r0, [pc, #536]	; (79d0 <usb_device_endpoint_set_config+0x3d0>)
    77b6:	4002      	ands	r2, r0
    77b8:	430a      	orrs	r2, r1
    77ba:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    77bc:	2300      	movs	r3, #0
    77be:	e193      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    77c0:	230e      	movs	r3, #14
    77c2:	18fb      	adds	r3, r7, r3
    77c4:	781b      	ldrb	r3, [r3, #0]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d030      	beq.n	782c <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	681b      	ldr	r3, [r3, #0]
    77ce:	220f      	movs	r2, #15
    77d0:	18ba      	adds	r2, r7, r2
    77d2:	7812      	ldrb	r2, [r2, #0]
    77d4:	3208      	adds	r2, #8
    77d6:	0152      	lsls	r2, r2, #5
    77d8:	5cd3      	ldrb	r3, [r2, r3]
    77da:	b2db      	uxtb	r3, r3
    77dc:	001a      	movs	r2, r3
    77de:	2370      	movs	r3, #112	; 0x70
    77e0:	4013      	ands	r3, r2
    77e2:	d121      	bne.n	7828 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	681a      	ldr	r2, [r3, #0]
    77e8:	230f      	movs	r3, #15
    77ea:	18fb      	adds	r3, r7, r3
    77ec:	7819      	ldrb	r1, [r3, #0]
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	200f      	movs	r0, #15
    77f4:	1838      	adds	r0, r7, r0
    77f6:	7800      	ldrb	r0, [r0, #0]
    77f8:	3008      	adds	r0, #8
    77fa:	0140      	lsls	r0, r0, #5
    77fc:	5cc3      	ldrb	r3, [r0, r3]
    77fe:	b2db      	uxtb	r3, r3
    7800:	2020      	movs	r0, #32
    7802:	4303      	orrs	r3, r0
    7804:	b2d8      	uxtb	r0, r3
    7806:	000b      	movs	r3, r1
    7808:	3308      	adds	r3, #8
    780a:	015b      	lsls	r3, r3, #5
    780c:	1c01      	adds	r1, r0, #0
    780e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	681a      	ldr	r2, [r3, #0]
    7814:	230f      	movs	r3, #15
    7816:	18fb      	adds	r3, r7, r3
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	3308      	adds	r3, #8
    781c:	015b      	lsls	r3, r3, #5
    781e:	18d3      	adds	r3, r2, r3
    7820:	3304      	adds	r3, #4
    7822:	2280      	movs	r2, #128	; 0x80
    7824:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7826:	e107      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    7828:	231c      	movs	r3, #28
    782a:	e15d      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    782c:	687b      	ldr	r3, [r7, #4]
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	220f      	movs	r2, #15
    7832:	18ba      	adds	r2, r7, r2
    7834:	7812      	ldrb	r2, [r2, #0]
    7836:	3208      	adds	r2, #8
    7838:	0152      	lsls	r2, r2, #5
    783a:	5cd3      	ldrb	r3, [r2, r3]
    783c:	b2db      	uxtb	r3, r3
    783e:	001a      	movs	r2, r3
    7840:	2307      	movs	r3, #7
    7842:	4013      	ands	r3, r2
    7844:	d121      	bne.n	788a <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	681a      	ldr	r2, [r3, #0]
    784a:	230f      	movs	r3, #15
    784c:	18fb      	adds	r3, r7, r3
    784e:	7819      	ldrb	r1, [r3, #0]
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	681b      	ldr	r3, [r3, #0]
    7854:	200f      	movs	r0, #15
    7856:	1838      	adds	r0, r7, r0
    7858:	7800      	ldrb	r0, [r0, #0]
    785a:	3008      	adds	r0, #8
    785c:	0140      	lsls	r0, r0, #5
    785e:	5cc3      	ldrb	r3, [r0, r3]
    7860:	b2db      	uxtb	r3, r3
    7862:	2002      	movs	r0, #2
    7864:	4303      	orrs	r3, r0
    7866:	b2d8      	uxtb	r0, r3
    7868:	000b      	movs	r3, r1
    786a:	3308      	adds	r3, #8
    786c:	015b      	lsls	r3, r3, #5
    786e:	1c01      	adds	r1, r0, #0
    7870:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	681a      	ldr	r2, [r3, #0]
    7876:	230f      	movs	r3, #15
    7878:	18fb      	adds	r3, r7, r3
    787a:	781b      	ldrb	r3, [r3, #0]
    787c:	3308      	adds	r3, #8
    787e:	015b      	lsls	r3, r3, #5
    7880:	18d3      	adds	r3, r2, r3
    7882:	3305      	adds	r3, #5
    7884:	2240      	movs	r2, #64	; 0x40
    7886:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7888:	e0d6      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    788a:	231c      	movs	r3, #28
    788c:	e12c      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    788e:	230e      	movs	r3, #14
    7890:	18fb      	adds	r3, r7, r3
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	2b00      	cmp	r3, #0
    7896:	d030      	beq.n	78fa <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	220f      	movs	r2, #15
    789e:	18ba      	adds	r2, r7, r2
    78a0:	7812      	ldrb	r2, [r2, #0]
    78a2:	3208      	adds	r2, #8
    78a4:	0152      	lsls	r2, r2, #5
    78a6:	5cd3      	ldrb	r3, [r2, r3]
    78a8:	b2db      	uxtb	r3, r3
    78aa:	001a      	movs	r2, r3
    78ac:	2370      	movs	r3, #112	; 0x70
    78ae:	4013      	ands	r3, r2
    78b0:	d121      	bne.n	78f6 <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    78b2:	687b      	ldr	r3, [r7, #4]
    78b4:	681a      	ldr	r2, [r3, #0]
    78b6:	230f      	movs	r3, #15
    78b8:	18fb      	adds	r3, r7, r3
    78ba:	7819      	ldrb	r1, [r3, #0]
    78bc:	687b      	ldr	r3, [r7, #4]
    78be:	681b      	ldr	r3, [r3, #0]
    78c0:	200f      	movs	r0, #15
    78c2:	1838      	adds	r0, r7, r0
    78c4:	7800      	ldrb	r0, [r0, #0]
    78c6:	3008      	adds	r0, #8
    78c8:	0140      	lsls	r0, r0, #5
    78ca:	5cc3      	ldrb	r3, [r0, r3]
    78cc:	b2db      	uxtb	r3, r3
    78ce:	2030      	movs	r0, #48	; 0x30
    78d0:	4303      	orrs	r3, r0
    78d2:	b2d8      	uxtb	r0, r3
    78d4:	000b      	movs	r3, r1
    78d6:	3308      	adds	r3, #8
    78d8:	015b      	lsls	r3, r3, #5
    78da:	1c01      	adds	r1, r0, #0
    78dc:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	681a      	ldr	r2, [r3, #0]
    78e2:	230f      	movs	r3, #15
    78e4:	18fb      	adds	r3, r7, r3
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	3308      	adds	r3, #8
    78ea:	015b      	lsls	r3, r3, #5
    78ec:	18d3      	adds	r3, r2, r3
    78ee:	3304      	adds	r3, #4
    78f0:	2280      	movs	r2, #128	; 0x80
    78f2:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    78f4:	e0a0      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    78f6:	231c      	movs	r3, #28
    78f8:	e0f6      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	681b      	ldr	r3, [r3, #0]
    78fe:	220f      	movs	r2, #15
    7900:	18ba      	adds	r2, r7, r2
    7902:	7812      	ldrb	r2, [r2, #0]
    7904:	3208      	adds	r2, #8
    7906:	0152      	lsls	r2, r2, #5
    7908:	5cd3      	ldrb	r3, [r2, r3]
    790a:	b2db      	uxtb	r3, r3
    790c:	001a      	movs	r2, r3
    790e:	2307      	movs	r3, #7
    7910:	4013      	ands	r3, r2
    7912:	d121      	bne.n	7958 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	681a      	ldr	r2, [r3, #0]
    7918:	230f      	movs	r3, #15
    791a:	18fb      	adds	r3, r7, r3
    791c:	7819      	ldrb	r1, [r3, #0]
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	681b      	ldr	r3, [r3, #0]
    7922:	200f      	movs	r0, #15
    7924:	1838      	adds	r0, r7, r0
    7926:	7800      	ldrb	r0, [r0, #0]
    7928:	3008      	adds	r0, #8
    792a:	0140      	lsls	r0, r0, #5
    792c:	5cc3      	ldrb	r3, [r0, r3]
    792e:	b2db      	uxtb	r3, r3
    7930:	2003      	movs	r0, #3
    7932:	4303      	orrs	r3, r0
    7934:	b2d8      	uxtb	r0, r3
    7936:	000b      	movs	r3, r1
    7938:	3308      	adds	r3, #8
    793a:	015b      	lsls	r3, r3, #5
    793c:	1c01      	adds	r1, r0, #0
    793e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	681a      	ldr	r2, [r3, #0]
    7944:	230f      	movs	r3, #15
    7946:	18fb      	adds	r3, r7, r3
    7948:	781b      	ldrb	r3, [r3, #0]
    794a:	3308      	adds	r3, #8
    794c:	015b      	lsls	r3, r3, #5
    794e:	18d3      	adds	r3, r2, r3
    7950:	3305      	adds	r3, #5
    7952:	2240      	movs	r2, #64	; 0x40
    7954:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7956:	e06f      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    7958:	231c      	movs	r3, #28
    795a:	e0c5      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    795c:	230e      	movs	r3, #14
    795e:	18fb      	adds	r3, r7, r3
    7960:	781b      	ldrb	r3, [r3, #0]
    7962:	2b00      	cmp	r3, #0
    7964:	d036      	beq.n	79d4 <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	681b      	ldr	r3, [r3, #0]
    796a:	220f      	movs	r2, #15
    796c:	18ba      	adds	r2, r7, r2
    796e:	7812      	ldrb	r2, [r2, #0]
    7970:	3208      	adds	r2, #8
    7972:	0152      	lsls	r2, r2, #5
    7974:	5cd3      	ldrb	r3, [r2, r3]
    7976:	b2db      	uxtb	r3, r3
    7978:	001a      	movs	r2, r3
    797a:	2370      	movs	r3, #112	; 0x70
    797c:	4013      	ands	r3, r2
    797e:	d121      	bne.n	79c4 <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	681a      	ldr	r2, [r3, #0]
    7984:	230f      	movs	r3, #15
    7986:	18fb      	adds	r3, r7, r3
    7988:	7819      	ldrb	r1, [r3, #0]
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	681b      	ldr	r3, [r3, #0]
    798e:	200f      	movs	r0, #15
    7990:	1838      	adds	r0, r7, r0
    7992:	7800      	ldrb	r0, [r0, #0]
    7994:	3008      	adds	r0, #8
    7996:	0140      	lsls	r0, r0, #5
    7998:	5cc3      	ldrb	r3, [r0, r3]
    799a:	b2db      	uxtb	r3, r3
    799c:	2040      	movs	r0, #64	; 0x40
    799e:	4303      	orrs	r3, r0
    79a0:	b2d8      	uxtb	r0, r3
    79a2:	000b      	movs	r3, r1
    79a4:	3308      	adds	r3, #8
    79a6:	015b      	lsls	r3, r3, #5
    79a8:	1c01      	adds	r1, r0, #0
    79aa:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	681a      	ldr	r2, [r3, #0]
    79b0:	230f      	movs	r3, #15
    79b2:	18fb      	adds	r3, r7, r3
    79b4:	781b      	ldrb	r3, [r3, #0]
    79b6:	3308      	adds	r3, #8
    79b8:	015b      	lsls	r3, r3, #5
    79ba:	18d3      	adds	r3, r2, r3
    79bc:	3304      	adds	r3, #4
    79be:	2280      	movs	r2, #128	; 0x80
    79c0:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    79c2:	e039      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    79c4:	231c      	movs	r3, #28
    79c6:	e08f      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
    79c8:	000090dc 	.word	0x000090dc
    79cc:	200004fc 	.word	0x200004fc
    79d0:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	681b      	ldr	r3, [r3, #0]
    79d8:	220f      	movs	r2, #15
    79da:	18ba      	adds	r2, r7, r2
    79dc:	7812      	ldrb	r2, [r2, #0]
    79de:	3208      	adds	r2, #8
    79e0:	0152      	lsls	r2, r2, #5
    79e2:	5cd3      	ldrb	r3, [r2, r3]
    79e4:	b2db      	uxtb	r3, r3
    79e6:	001a      	movs	r2, r3
    79e8:	2307      	movs	r3, #7
    79ea:	4013      	ands	r3, r2
    79ec:	d121      	bne.n	7a32 <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    79ee:	687b      	ldr	r3, [r7, #4]
    79f0:	681a      	ldr	r2, [r3, #0]
    79f2:	230f      	movs	r3, #15
    79f4:	18fb      	adds	r3, r7, r3
    79f6:	7819      	ldrb	r1, [r3, #0]
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	200f      	movs	r0, #15
    79fe:	1838      	adds	r0, r7, r0
    7a00:	7800      	ldrb	r0, [r0, #0]
    7a02:	3008      	adds	r0, #8
    7a04:	0140      	lsls	r0, r0, #5
    7a06:	5cc3      	ldrb	r3, [r0, r3]
    7a08:	b2db      	uxtb	r3, r3
    7a0a:	2004      	movs	r0, #4
    7a0c:	4303      	orrs	r3, r0
    7a0e:	b2d8      	uxtb	r0, r3
    7a10:	000b      	movs	r3, r1
    7a12:	3308      	adds	r3, #8
    7a14:	015b      	lsls	r3, r3, #5
    7a16:	1c01      	adds	r1, r0, #0
    7a18:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7a1a:	687b      	ldr	r3, [r7, #4]
    7a1c:	681a      	ldr	r2, [r3, #0]
    7a1e:	230f      	movs	r3, #15
    7a20:	18fb      	adds	r3, r7, r3
    7a22:	781b      	ldrb	r3, [r3, #0]
    7a24:	3308      	adds	r3, #8
    7a26:	015b      	lsls	r3, r3, #5
    7a28:	18d3      	adds	r3, r2, r3
    7a2a:	3305      	adds	r3, #5
    7a2c:	2240      	movs	r2, #64	; 0x40
    7a2e:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7a30:	e002      	b.n	7a38 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    7a32:	231c      	movs	r3, #28
    7a34:	e058      	b.n	7ae8 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		default:
			break;
    7a36:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7a38:	230f      	movs	r3, #15
    7a3a:	18fb      	adds	r3, r7, r3
    7a3c:	7818      	ldrb	r0, [r3, #0]
    7a3e:	230e      	movs	r3, #14
    7a40:	18fb      	adds	r3, r7, r3
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	683a      	ldr	r2, [r7, #0]
    7a46:	7852      	ldrb	r2, [r2, #1]
    7a48:	1c11      	adds	r1, r2, #0
    7a4a:	2207      	movs	r2, #7
    7a4c:	400a      	ands	r2, r1
    7a4e:	b2d1      	uxtb	r1, r2
    7a50:	4a27      	ldr	r2, [pc, #156]	; (7af0 <usb_device_endpoint_set_config+0x4f0>)
    7a52:	0040      	lsls	r0, r0, #1
    7a54:	18c3      	adds	r3, r0, r3
    7a56:	011b      	lsls	r3, r3, #4
    7a58:	18d3      	adds	r3, r2, r3
    7a5a:	685a      	ldr	r2, [r3, #4]
    7a5c:	2007      	movs	r0, #7
    7a5e:	4001      	ands	r1, r0
    7a60:	0709      	lsls	r1, r1, #28
    7a62:	4824      	ldr	r0, [pc, #144]	; (7af4 <usb_device_endpoint_set_config+0x4f4>)
    7a64:	4002      	ands	r2, r0
    7a66:	430a      	orrs	r2, r1
    7a68:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    7a6a:	683b      	ldr	r3, [r7, #0]
    7a6c:	789b      	ldrb	r3, [r3, #2]
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d01d      	beq.n	7aae <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7a72:	230f      	movs	r3, #15
    7a74:	18fb      	adds	r3, r7, r3
    7a76:	781c      	ldrb	r4, [r3, #0]
    7a78:	230e      	movs	r3, #14
    7a7a:	18fb      	adds	r3, r7, r3
    7a7c:	7818      	ldrb	r0, [r3, #0]
    7a7e:	230f      	movs	r3, #15
    7a80:	18fb      	adds	r3, r7, r3
    7a82:	7819      	ldrb	r1, [r3, #0]
    7a84:	230e      	movs	r3, #14
    7a86:	18fb      	adds	r3, r7, r3
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	4a19      	ldr	r2, [pc, #100]	; (7af0 <usb_device_endpoint_set_config+0x4f0>)
    7a8c:	0049      	lsls	r1, r1, #1
    7a8e:	18cb      	adds	r3, r1, r3
    7a90:	011b      	lsls	r3, r3, #4
    7a92:	18d3      	adds	r3, r2, r3
    7a94:	3304      	adds	r3, #4
    7a96:	681b      	ldr	r3, [r3, #0]
    7a98:	2280      	movs	r2, #128	; 0x80
    7a9a:	0612      	lsls	r2, r2, #24
    7a9c:	431a      	orrs	r2, r3
    7a9e:	4914      	ldr	r1, [pc, #80]	; (7af0 <usb_device_endpoint_set_config+0x4f0>)
    7aa0:	0063      	lsls	r3, r4, #1
    7aa2:	181b      	adds	r3, r3, r0
    7aa4:	011b      	lsls	r3, r3, #4
    7aa6:	18cb      	adds	r3, r1, r3
    7aa8:	3304      	adds	r3, #4
    7aaa:	601a      	str	r2, [r3, #0]
    7aac:	e01b      	b.n	7ae6 <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7aae:	230f      	movs	r3, #15
    7ab0:	18fb      	adds	r3, r7, r3
    7ab2:	781c      	ldrb	r4, [r3, #0]
    7ab4:	230e      	movs	r3, #14
    7ab6:	18fb      	adds	r3, r7, r3
    7ab8:	7818      	ldrb	r0, [r3, #0]
    7aba:	230f      	movs	r3, #15
    7abc:	18fb      	adds	r3, r7, r3
    7abe:	7819      	ldrb	r1, [r3, #0]
    7ac0:	230e      	movs	r3, #14
    7ac2:	18fb      	adds	r3, r7, r3
    7ac4:	781b      	ldrb	r3, [r3, #0]
    7ac6:	4a0a      	ldr	r2, [pc, #40]	; (7af0 <usb_device_endpoint_set_config+0x4f0>)
    7ac8:	0049      	lsls	r1, r1, #1
    7aca:	18cb      	adds	r3, r1, r3
    7acc:	011b      	lsls	r3, r3, #4
    7ace:	18d3      	adds	r3, r2, r3
    7ad0:	3304      	adds	r3, #4
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	005b      	lsls	r3, r3, #1
    7ad6:	085a      	lsrs	r2, r3, #1
    7ad8:	4905      	ldr	r1, [pc, #20]	; (7af0 <usb_device_endpoint_set_config+0x4f0>)
    7ada:	0063      	lsls	r3, r4, #1
    7adc:	181b      	adds	r3, r3, r0
    7ade:	011b      	lsls	r3, r3, #4
    7ae0:	18cb      	adds	r3, r1, r3
    7ae2:	3304      	adds	r3, #4
    7ae4:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    7ae6:	2300      	movs	r3, #0
}
    7ae8:	0018      	movs	r0, r3
    7aea:	46bd      	mov	sp, r7
    7aec:	b005      	add	sp, #20
    7aee:	bd90      	pop	{r4, r7, pc}
    7af0:	200004fc 	.word	0x200004fc
    7af4:	8fffffff 	.word	0x8fffffff

00007af8 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b084      	sub	sp, #16
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
    7b00:	000a      	movs	r2, r1
    7b02:	1cfb      	adds	r3, r7, #3
    7b04:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    7b06:	230f      	movs	r3, #15
    7b08:	18fb      	adds	r3, r7, r3
    7b0a:	1cfa      	adds	r2, r7, #3
    7b0c:	7812      	ldrb	r2, [r2, #0]
    7b0e:	210f      	movs	r1, #15
    7b10:	400a      	ands	r2, r1
    7b12:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    7b14:	1cfb      	adds	r3, r7, #3
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	b25b      	sxtb	r3, r3
    7b1a:	2b00      	cmp	r3, #0
    7b1c:	da16      	bge.n	7b4c <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	681a      	ldr	r2, [r3, #0]
    7b22:	230f      	movs	r3, #15
    7b24:	18fb      	adds	r3, r7, r3
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	3308      	adds	r3, #8
    7b2a:	015b      	lsls	r3, r3, #5
    7b2c:	18d3      	adds	r3, r2, r3
    7b2e:	3304      	adds	r3, #4
    7b30:	2280      	movs	r2, #128	; 0x80
    7b32:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7b34:	687b      	ldr	r3, [r7, #4]
    7b36:	681a      	ldr	r2, [r3, #0]
    7b38:	230f      	movs	r3, #15
    7b3a:	18fb      	adds	r3, r7, r3
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	3308      	adds	r3, #8
    7b40:	015b      	lsls	r3, r3, #5
    7b42:	18d3      	adds	r3, r2, r3
    7b44:	3307      	adds	r3, #7
    7b46:	2202      	movs	r2, #2
    7b48:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    7b4a:	e015      	b.n	7b78 <usb_device_endpoint_abort_job+0x80>
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	681a      	ldr	r2, [r3, #0]
    7b50:	230f      	movs	r3, #15
    7b52:	18fb      	adds	r3, r7, r3
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	3308      	adds	r3, #8
    7b58:	015b      	lsls	r3, r3, #5
    7b5a:	18d3      	adds	r3, r2, r3
    7b5c:	3305      	adds	r3, #5
    7b5e:	2240      	movs	r2, #64	; 0x40
    7b60:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	681a      	ldr	r2, [r3, #0]
    7b66:	230f      	movs	r3, #15
    7b68:	18fb      	adds	r3, r7, r3
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	3308      	adds	r3, #8
    7b6e:	015b      	lsls	r3, r3, #5
    7b70:	18d3      	adds	r3, r2, r3
    7b72:	3307      	adds	r3, #7
    7b74:	2201      	movs	r2, #1
    7b76:	701a      	strb	r2, [r3, #0]
	}
}
    7b78:	46c0      	nop			; (mov r8, r8)
    7b7a:	46bd      	mov	sp, r7
    7b7c:	b004      	add	sp, #16
    7b7e:	bd80      	pop	{r7, pc}

00007b80 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    7b80:	b580      	push	{r7, lr}
    7b82:	b084      	sub	sp, #16
    7b84:	af00      	add	r7, sp, #0
    7b86:	6078      	str	r0, [r7, #4]
    7b88:	000a      	movs	r2, r1
    7b8a:	1cfb      	adds	r3, r7, #3
    7b8c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7b8e:	230f      	movs	r3, #15
    7b90:	18fb      	adds	r3, r7, r3
    7b92:	1cfa      	adds	r2, r7, #3
    7b94:	7812      	ldrb	r2, [r2, #0]
    7b96:	210f      	movs	r1, #15
    7b98:	400a      	ands	r2, r1
    7b9a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7b9c:	1cfb      	adds	r3, r7, #3
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	b25b      	sxtb	r3, r3
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	da11      	bge.n	7bca <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	681a      	ldr	r2, [r3, #0]
    7baa:	230f      	movs	r3, #15
    7bac:	18fb      	adds	r3, r7, r3
    7bae:	781b      	ldrb	r3, [r3, #0]
    7bb0:	3308      	adds	r3, #8
    7bb2:	015b      	lsls	r3, r3, #5
    7bb4:	18d3      	adds	r3, r2, r3
    7bb6:	3306      	adds	r3, #6
    7bb8:	781b      	ldrb	r3, [r3, #0]
    7bba:	b2db      	uxtb	r3, r3
    7bbc:	001a      	movs	r2, r3
    7bbe:	2320      	movs	r3, #32
    7bc0:	4013      	ands	r3, r2
    7bc2:	1e5a      	subs	r2, r3, #1
    7bc4:	4193      	sbcs	r3, r2
    7bc6:	b2db      	uxtb	r3, r3
    7bc8:	e010      	b.n	7bec <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    7bca:	687b      	ldr	r3, [r7, #4]
    7bcc:	681a      	ldr	r2, [r3, #0]
    7bce:	230f      	movs	r3, #15
    7bd0:	18fb      	adds	r3, r7, r3
    7bd2:	781b      	ldrb	r3, [r3, #0]
    7bd4:	3308      	adds	r3, #8
    7bd6:	015b      	lsls	r3, r3, #5
    7bd8:	18d3      	adds	r3, r2, r3
    7bda:	3306      	adds	r3, #6
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	b2db      	uxtb	r3, r3
    7be0:	001a      	movs	r2, r3
    7be2:	2310      	movs	r3, #16
    7be4:	4013      	ands	r3, r2
    7be6:	1e5a      	subs	r2, r3, #1
    7be8:	4193      	sbcs	r3, r2
    7bea:	b2db      	uxtb	r3, r3
	}
}
    7bec:	0018      	movs	r0, r3
    7bee:	46bd      	mov	sp, r7
    7bf0:	b004      	add	sp, #16
    7bf2:	bd80      	pop	{r7, pc}

00007bf4 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    7bf4:	b580      	push	{r7, lr}
    7bf6:	b084      	sub	sp, #16
    7bf8:	af00      	add	r7, sp, #0
    7bfa:	6078      	str	r0, [r7, #4]
    7bfc:	000a      	movs	r2, r1
    7bfe:	1cfb      	adds	r3, r7, #3
    7c00:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7c02:	230f      	movs	r3, #15
    7c04:	18fb      	adds	r3, r7, r3
    7c06:	1cfa      	adds	r2, r7, #3
    7c08:	7812      	ldrb	r2, [r2, #0]
    7c0a:	210f      	movs	r1, #15
    7c0c:	400a      	ands	r2, r1
    7c0e:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    7c10:	1cfb      	adds	r3, r7, #3
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	b25b      	sxtb	r3, r3
    7c16:	2b00      	cmp	r3, #0
    7c18:	da0b      	bge.n	7c32 <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	681a      	ldr	r2, [r3, #0]
    7c1e:	230f      	movs	r3, #15
    7c20:	18fb      	adds	r3, r7, r3
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	3308      	adds	r3, #8
    7c26:	015b      	lsls	r3, r3, #5
    7c28:	18d3      	adds	r3, r2, r3
    7c2a:	3305      	adds	r3, #5
    7c2c:	2220      	movs	r2, #32
    7c2e:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    7c30:	e00a      	b.n	7c48 <usb_device_endpoint_set_halt+0x54>

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	681a      	ldr	r2, [r3, #0]
    7c36:	230f      	movs	r3, #15
    7c38:	18fb      	adds	r3, r7, r3
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	3308      	adds	r3, #8
    7c3e:	015b      	lsls	r3, r3, #5
    7c40:	18d3      	adds	r3, r2, r3
    7c42:	3305      	adds	r3, #5
    7c44:	2210      	movs	r2, #16
    7c46:	701a      	strb	r2, [r3, #0]
	}
}
    7c48:	46c0      	nop			; (mov r8, r8)
    7c4a:	46bd      	mov	sp, r7
    7c4c:	b004      	add	sp, #16
    7c4e:	bd80      	pop	{r7, pc}

00007c50 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    7c50:	b580      	push	{r7, lr}
    7c52:	b084      	sub	sp, #16
    7c54:	af00      	add	r7, sp, #0
    7c56:	6078      	str	r0, [r7, #4]
    7c58:	000a      	movs	r2, r1
    7c5a:	1cfb      	adds	r3, r7, #3
    7c5c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7c5e:	230f      	movs	r3, #15
    7c60:	18fb      	adds	r3, r7, r3
    7c62:	1cfa      	adds	r2, r7, #3
    7c64:	7812      	ldrb	r2, [r2, #0]
    7c66:	210f      	movs	r1, #15
    7c68:	400a      	ands	r2, r1
    7c6a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7c6c:	1cfb      	adds	r3, r7, #3
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	b25b      	sxtb	r3, r3
    7c72:	2b00      	cmp	r3, #0
    7c74:	da3f      	bge.n	7cf6 <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	681a      	ldr	r2, [r3, #0]
    7c7a:	230f      	movs	r3, #15
    7c7c:	18fb      	adds	r3, r7, r3
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	3308      	adds	r3, #8
    7c82:	015b      	lsls	r3, r3, #5
    7c84:	18d3      	adds	r3, r2, r3
    7c86:	3306      	adds	r3, #6
    7c88:	781b      	ldrb	r3, [r3, #0]
    7c8a:	b2db      	uxtb	r3, r3
    7c8c:	001a      	movs	r2, r3
    7c8e:	2320      	movs	r3, #32
    7c90:	4013      	ands	r3, r2
    7c92:	d06f      	beq.n	7d74 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	681a      	ldr	r2, [r3, #0]
    7c98:	230f      	movs	r3, #15
    7c9a:	18fb      	adds	r3, r7, r3
    7c9c:	781b      	ldrb	r3, [r3, #0]
    7c9e:	3308      	adds	r3, #8
    7ca0:	015b      	lsls	r3, r3, #5
    7ca2:	18d3      	adds	r3, r2, r3
    7ca4:	3304      	adds	r3, #4
    7ca6:	2220      	movs	r2, #32
    7ca8:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	681a      	ldr	r2, [r3, #0]
    7cae:	230f      	movs	r3, #15
    7cb0:	18fb      	adds	r3, r7, r3
    7cb2:	781b      	ldrb	r3, [r3, #0]
    7cb4:	3308      	adds	r3, #8
    7cb6:	015b      	lsls	r3, r3, #5
    7cb8:	18d3      	adds	r3, r2, r3
    7cba:	3307      	adds	r3, #7
    7cbc:	781b      	ldrb	r3, [r3, #0]
    7cbe:	b2db      	uxtb	r3, r3
    7cc0:	001a      	movs	r2, r3
    7cc2:	2340      	movs	r3, #64	; 0x40
    7cc4:	4013      	ands	r3, r2
    7cc6:	d055      	beq.n	7d74 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	681a      	ldr	r2, [r3, #0]
    7ccc:	230f      	movs	r3, #15
    7cce:	18fb      	adds	r3, r7, r3
    7cd0:	781b      	ldrb	r3, [r3, #0]
    7cd2:	3308      	adds	r3, #8
    7cd4:	015b      	lsls	r3, r3, #5
    7cd6:	18d3      	adds	r3, r2, r3
    7cd8:	3307      	adds	r3, #7
    7cda:	2240      	movs	r2, #64	; 0x40
    7cdc:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	681a      	ldr	r2, [r3, #0]
    7ce2:	230f      	movs	r3, #15
    7ce4:	18fb      	adds	r3, r7, r3
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	3308      	adds	r3, #8
    7cea:	015b      	lsls	r3, r3, #5
    7cec:	18d3      	adds	r3, r2, r3
    7cee:	3304      	adds	r3, #4
    7cf0:	2202      	movs	r2, #2
    7cf2:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    7cf4:	e03e      	b.n	7d74 <usb_device_endpoint_clear_halt+0x124>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	681a      	ldr	r2, [r3, #0]
    7cfa:	230f      	movs	r3, #15
    7cfc:	18fb      	adds	r3, r7, r3
    7cfe:	781b      	ldrb	r3, [r3, #0]
    7d00:	3308      	adds	r3, #8
    7d02:	015b      	lsls	r3, r3, #5
    7d04:	18d3      	adds	r3, r2, r3
    7d06:	3306      	adds	r3, #6
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	b2db      	uxtb	r3, r3
    7d0c:	001a      	movs	r2, r3
    7d0e:	2310      	movs	r3, #16
    7d10:	4013      	ands	r3, r2
    7d12:	d02f      	beq.n	7d74 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	681a      	ldr	r2, [r3, #0]
    7d18:	230f      	movs	r3, #15
    7d1a:	18fb      	adds	r3, r7, r3
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	3308      	adds	r3, #8
    7d20:	015b      	lsls	r3, r3, #5
    7d22:	18d3      	adds	r3, r2, r3
    7d24:	3304      	adds	r3, #4
    7d26:	2210      	movs	r2, #16
    7d28:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	681a      	ldr	r2, [r3, #0]
    7d2e:	230f      	movs	r3, #15
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	3308      	adds	r3, #8
    7d36:	015b      	lsls	r3, r3, #5
    7d38:	18d3      	adds	r3, r2, r3
    7d3a:	3307      	adds	r3, #7
    7d3c:	781b      	ldrb	r3, [r3, #0]
    7d3e:	b2db      	uxtb	r3, r3
    7d40:	001a      	movs	r2, r3
    7d42:	2320      	movs	r3, #32
    7d44:	4013      	ands	r3, r2
    7d46:	d015      	beq.n	7d74 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	681a      	ldr	r2, [r3, #0]
    7d4c:	230f      	movs	r3, #15
    7d4e:	18fb      	adds	r3, r7, r3
    7d50:	781b      	ldrb	r3, [r3, #0]
    7d52:	3308      	adds	r3, #8
    7d54:	015b      	lsls	r3, r3, #5
    7d56:	18d3      	adds	r3, r2, r3
    7d58:	3307      	adds	r3, #7
    7d5a:	2220      	movs	r2, #32
    7d5c:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	681a      	ldr	r2, [r3, #0]
    7d62:	230f      	movs	r3, #15
    7d64:	18fb      	adds	r3, r7, r3
    7d66:	781b      	ldrb	r3, [r3, #0]
    7d68:	3308      	adds	r3, #8
    7d6a:	015b      	lsls	r3, r3, #5
    7d6c:	18d3      	adds	r3, r2, r3
    7d6e:	3304      	adds	r3, #4
    7d70:	2201      	movs	r2, #1
    7d72:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
    7d74:	46c0      	nop			; (mov r8, r8)
    7d76:	46bd      	mov	sp, r7
    7d78:	b004      	add	sp, #16
    7d7a:	bd80      	pop	{r7, pc}

00007d7c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b086      	sub	sp, #24
    7d80:	af00      	add	r7, sp, #0
    7d82:	60f8      	str	r0, [r7, #12]
    7d84:	607a      	str	r2, [r7, #4]
    7d86:	603b      	str	r3, [r7, #0]
    7d88:	230b      	movs	r3, #11
    7d8a:	18fb      	adds	r3, r7, r3
    7d8c:	1c0a      	adds	r2, r1, #0
    7d8e:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    7d90:	68fb      	ldr	r3, [r7, #12]
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	220b      	movs	r2, #11
    7d96:	18ba      	adds	r2, r7, r2
    7d98:	7812      	ldrb	r2, [r2, #0]
    7d9a:	3208      	adds	r2, #8
    7d9c:	0152      	lsls	r2, r2, #5
    7d9e:	5cd3      	ldrb	r3, [r2, r3]
    7da0:	065b      	lsls	r3, r3, #25
    7da2:	0f5b      	lsrs	r3, r3, #29
    7da4:	b2da      	uxtb	r2, r3
    7da6:	2317      	movs	r3, #23
    7da8:	18fb      	adds	r3, r7, r3
    7daa:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7dac:	2317      	movs	r3, #23
    7dae:	18fb      	adds	r3, r7, r3
    7db0:	781b      	ldrb	r3, [r3, #0]
    7db2:	2b00      	cmp	r3, #0
    7db4:	d101      	bne.n	7dba <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    7db6:	231c      	movs	r3, #28
    7db8:	e032      	b.n	7e20 <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    7dba:	230b      	movs	r3, #11
    7dbc:	18fb      	adds	r3, r7, r3
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	687a      	ldr	r2, [r7, #4]
    7dc2:	4919      	ldr	r1, [pc, #100]	; (7e28 <usb_device_endpoint_write_buffer_job+0xac>)
    7dc4:	015b      	lsls	r3, r3, #5
    7dc6:	18cb      	adds	r3, r1, r3
    7dc8:	3310      	adds	r3, #16
    7dca:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7dcc:	230b      	movs	r3, #11
    7dce:	18fb      	adds	r3, r7, r3
    7dd0:	781b      	ldrb	r3, [r3, #0]
    7dd2:	4a15      	ldr	r2, [pc, #84]	; (7e28 <usb_device_endpoint_write_buffer_job+0xac>)
    7dd4:	015b      	lsls	r3, r3, #5
    7dd6:	18d3      	adds	r3, r2, r3
    7dd8:	3310      	adds	r3, #16
    7dda:	685a      	ldr	r2, [r3, #4]
    7ddc:	4913      	ldr	r1, [pc, #76]	; (7e2c <usb_device_endpoint_write_buffer_job+0xb0>)
    7dde:	400a      	ands	r2, r1
    7de0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    7de2:	230b      	movs	r3, #11
    7de4:	18fb      	adds	r3, r7, r3
    7de6:	781b      	ldrb	r3, [r3, #0]
    7de8:	683a      	ldr	r2, [r7, #0]
    7dea:	b292      	uxth	r2, r2
    7dec:	0492      	lsls	r2, r2, #18
    7dee:	0c92      	lsrs	r2, r2, #18
    7df0:	b291      	uxth	r1, r2
    7df2:	4a0d      	ldr	r2, [pc, #52]	; (7e28 <usb_device_endpoint_write_buffer_job+0xac>)
    7df4:	015b      	lsls	r3, r3, #5
    7df6:	18d3      	adds	r3, r2, r3
    7df8:	3310      	adds	r3, #16
    7dfa:	685a      	ldr	r2, [r3, #4]
    7dfc:	0489      	lsls	r1, r1, #18
    7dfe:	0c89      	lsrs	r1, r1, #18
    7e00:	0b92      	lsrs	r2, r2, #14
    7e02:	0392      	lsls	r2, r2, #14
    7e04:	430a      	orrs	r2, r1
    7e06:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	681a      	ldr	r2, [r3, #0]
    7e0c:	230b      	movs	r3, #11
    7e0e:	18fb      	adds	r3, r7, r3
    7e10:	781b      	ldrb	r3, [r3, #0]
    7e12:	3308      	adds	r3, #8
    7e14:	015b      	lsls	r3, r3, #5
    7e16:	18d3      	adds	r3, r2, r3
    7e18:	3305      	adds	r3, #5
    7e1a:	2280      	movs	r2, #128	; 0x80
    7e1c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7e1e:	2300      	movs	r3, #0
}
    7e20:	0018      	movs	r0, r3
    7e22:	46bd      	mov	sp, r7
    7e24:	b006      	add	sp, #24
    7e26:	bd80      	pop	{r7, pc}
    7e28:	200004fc 	.word	0x200004fc
    7e2c:	f0003fff 	.word	0xf0003fff

00007e30 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b086      	sub	sp, #24
    7e34:	af00      	add	r7, sp, #0
    7e36:	60f8      	str	r0, [r7, #12]
    7e38:	607a      	str	r2, [r7, #4]
    7e3a:	603b      	str	r3, [r7, #0]
    7e3c:	230b      	movs	r3, #11
    7e3e:	18fb      	adds	r3, r7, r3
    7e40:	1c0a      	adds	r2, r1, #0
    7e42:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	220b      	movs	r2, #11
    7e4a:	18ba      	adds	r2, r7, r2
    7e4c:	7812      	ldrb	r2, [r2, #0]
    7e4e:	3208      	adds	r2, #8
    7e50:	0152      	lsls	r2, r2, #5
    7e52:	5cd3      	ldrb	r3, [r2, r3]
    7e54:	075b      	lsls	r3, r3, #29
    7e56:	0f5b      	lsrs	r3, r3, #29
    7e58:	b2da      	uxtb	r2, r3
    7e5a:	2317      	movs	r3, #23
    7e5c:	18fb      	adds	r3, r7, r3
    7e5e:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7e60:	2317      	movs	r3, #23
    7e62:	18fb      	adds	r3, r7, r3
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d101      	bne.n	7e6e <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    7e6a:	231c      	movs	r3, #28
    7e6c:	e02f      	b.n	7ece <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    7e6e:	230b      	movs	r3, #11
    7e70:	18fb      	adds	r3, r7, r3
    7e72:	781a      	ldrb	r2, [r3, #0]
    7e74:	6879      	ldr	r1, [r7, #4]
    7e76:	4b18      	ldr	r3, [pc, #96]	; (7ed8 <usb_device_endpoint_read_buffer_job+0xa8>)
    7e78:	0152      	lsls	r2, r2, #5
    7e7a:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    7e7c:	230b      	movs	r3, #11
    7e7e:	18fb      	adds	r3, r7, r3
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	683a      	ldr	r2, [r7, #0]
    7e84:	b292      	uxth	r2, r2
    7e86:	0492      	lsls	r2, r2, #18
    7e88:	0c92      	lsrs	r2, r2, #18
    7e8a:	b291      	uxth	r1, r2
    7e8c:	4a12      	ldr	r2, [pc, #72]	; (7ed8 <usb_device_endpoint_read_buffer_job+0xa8>)
    7e8e:	015b      	lsls	r3, r3, #5
    7e90:	18d3      	adds	r3, r2, r3
    7e92:	685a      	ldr	r2, [r3, #4]
    7e94:	0489      	lsls	r1, r1, #18
    7e96:	0c89      	lsrs	r1, r1, #18
    7e98:	0389      	lsls	r1, r1, #14
    7e9a:	4810      	ldr	r0, [pc, #64]	; (7edc <usb_device_endpoint_read_buffer_job+0xac>)
    7e9c:	4002      	ands	r2, r0
    7e9e:	430a      	orrs	r2, r1
    7ea0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7ea2:	230b      	movs	r3, #11
    7ea4:	18fb      	adds	r3, r7, r3
    7ea6:	781b      	ldrb	r3, [r3, #0]
    7ea8:	4a0b      	ldr	r2, [pc, #44]	; (7ed8 <usb_device_endpoint_read_buffer_job+0xa8>)
    7eaa:	015b      	lsls	r3, r3, #5
    7eac:	18d3      	adds	r3, r2, r3
    7eae:	685a      	ldr	r2, [r3, #4]
    7eb0:	0b92      	lsrs	r2, r2, #14
    7eb2:	0392      	lsls	r2, r2, #14
    7eb4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	681a      	ldr	r2, [r3, #0]
    7eba:	230b      	movs	r3, #11
    7ebc:	18fb      	adds	r3, r7, r3
    7ebe:	781b      	ldrb	r3, [r3, #0]
    7ec0:	3308      	adds	r3, #8
    7ec2:	015b      	lsls	r3, r3, #5
    7ec4:	18d3      	adds	r3, r2, r3
    7ec6:	3304      	adds	r3, #4
    7ec8:	2240      	movs	r2, #64	; 0x40
    7eca:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7ecc:	2300      	movs	r3, #0
}
    7ece:	0018      	movs	r0, r3
    7ed0:	46bd      	mov	sp, r7
    7ed2:	b006      	add	sp, #24
    7ed4:	bd80      	pop	{r7, pc}
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	200004fc 	.word	0x200004fc
    7edc:	f0003fff 	.word	0xf0003fff

00007ee0 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	b082      	sub	sp, #8
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	6078      	str	r0, [r7, #4]
    7ee8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    7eea:	683a      	ldr	r2, [r7, #0]
    7eec:	4b0c      	ldr	r3, [pc, #48]	; (7f20 <usb_device_endpoint_setup_buffer_job+0x40>)
    7eee:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    7ef0:	4b0b      	ldr	r3, [pc, #44]	; (7f20 <usb_device_endpoint_setup_buffer_job+0x40>)
    7ef2:	685a      	ldr	r2, [r3, #4]
    7ef4:	490b      	ldr	r1, [pc, #44]	; (7f24 <usb_device_endpoint_setup_buffer_job+0x44>)
    7ef6:	400a      	ands	r2, r1
    7ef8:	2180      	movs	r1, #128	; 0x80
    7efa:	0289      	lsls	r1, r1, #10
    7efc:	430a      	orrs	r2, r1
    7efe:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7f00:	4b07      	ldr	r3, [pc, #28]	; (7f20 <usb_device_endpoint_setup_buffer_job+0x40>)
    7f02:	685a      	ldr	r2, [r3, #4]
    7f04:	0b92      	lsrs	r2, r2, #14
    7f06:	0392      	lsls	r2, r2, #14
    7f08:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	681a      	ldr	r2, [r3, #0]
    7f0e:	2382      	movs	r3, #130	; 0x82
    7f10:	005b      	lsls	r3, r3, #1
    7f12:	2140      	movs	r1, #64	; 0x40
    7f14:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    7f16:	2300      	movs	r3, #0
}
    7f18:	0018      	movs	r0, r3
    7f1a:	46bd      	mov	sp, r7
    7f1c:	b002      	add	sp, #8
    7f1e:	bd80      	pop	{r7, pc}
    7f20:	200004fc 	.word	0x200004fc
    7f24:	f0003fff 	.word	0xf0003fff

00007f28 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    7f2e:	4bbd      	ldr	r3, [pc, #756]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7f30:	681b      	ldr	r3, [r3, #0]
    7f32:	681a      	ldr	r2, [r3, #0]
    7f34:	2308      	movs	r3, #8
    7f36:	18fb      	adds	r3, r7, r3
    7f38:	8c12      	ldrh	r2, [r2, #32]
    7f3a:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    7f3c:	2308      	movs	r3, #8
    7f3e:	18fb      	adds	r3, r7, r3
    7f40:	881b      	ldrh	r3, [r3, #0]
    7f42:	2b00      	cmp	r3, #0
    7f44:	d155      	bne.n	7ff2 <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    7f46:	4bb7      	ldr	r3, [pc, #732]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7f48:	681b      	ldr	r3, [r3, #0]
    7f4a:	681a      	ldr	r2, [r3, #0]
    7f4c:	1dbb      	adds	r3, r7, #6
    7f4e:	8b92      	ldrh	r2, [r2, #28]
    7f50:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    7f52:	4bb4      	ldr	r3, [pc, #720]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7f54:	681a      	ldr	r2, [r3, #0]
    7f56:	23ab      	movs	r3, #171	; 0xab
    7f58:	005b      	lsls	r3, r3, #1
    7f5a:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    7f5c:	1dba      	adds	r2, r7, #6
    7f5e:	8812      	ldrh	r2, [r2, #0]
    7f60:	4013      	ands	r3, r2
    7f62:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    7f64:	4baf      	ldr	r3, [pc, #700]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7f66:	6819      	ldr	r1, [r3, #0]
    7f68:	23aa      	movs	r3, #170	; 0xaa
    7f6a:	005b      	lsls	r3, r3, #1
    7f6c:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    7f6e:	1d3b      	adds	r3, r7, #4
    7f70:	400a      	ands	r2, r1
    7f72:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    7f74:	2300      	movs	r3, #0
    7f76:	60fb      	str	r3, [r7, #12]
    7f78:	e037      	b.n	7fea <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    7f7a:	4bab      	ldr	r3, [pc, #684]	; (8228 <_usb_device_interrupt_handler+0x300>)
    7f7c:	68fa      	ldr	r2, [r7, #12]
    7f7e:	0052      	lsls	r2, r2, #1
    7f80:	5ad3      	ldrh	r3, [r2, r3]
    7f82:	1dba      	adds	r2, r7, #6
    7f84:	8812      	ldrh	r2, [r2, #0]
    7f86:	4013      	ands	r3, r2
    7f88:	b29b      	uxth	r3, r3
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d007      	beq.n	7f9e <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    7f8e:	4ba5      	ldr	r3, [pc, #660]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    7f94:	4aa4      	ldr	r2, [pc, #656]	; (8228 <_usb_device_interrupt_handler+0x300>)
    7f96:	68f9      	ldr	r1, [r7, #12]
    7f98:	0049      	lsls	r1, r1, #1
    7f9a:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    7f9c:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    7f9e:	4ba2      	ldr	r3, [pc, #648]	; (8228 <_usb_device_interrupt_handler+0x300>)
    7fa0:	68fa      	ldr	r2, [r7, #12]
    7fa2:	0052      	lsls	r2, r2, #1
    7fa4:	5ad3      	ldrh	r3, [r2, r3]
    7fa6:	1d3a      	adds	r2, r7, #4
    7fa8:	8812      	ldrh	r2, [r2, #0]
    7faa:	4013      	ands	r3, r2
    7fac:	b29b      	uxth	r3, r3
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d018      	beq.n	7fe4 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    7fb2:	68fb      	ldr	r3, [r7, #12]
    7fb4:	2b06      	cmp	r3, #6
    7fb6:	d10a      	bne.n	7fce <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    7fb8:	4b9c      	ldr	r3, [pc, #624]	; (822c <_usb_device_interrupt_handler+0x304>)
    7fba:	891b      	ldrh	r3, [r3, #8]
    7fbc:	045b      	lsls	r3, r3, #17
    7fbe:	0d5b      	lsrs	r3, r3, #21
    7fc0:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    7fc2:	001a      	movs	r2, r3
    7fc4:	2380      	movs	r3, #128	; 0x80
    7fc6:	005b      	lsls	r3, r3, #1
    7fc8:	401a      	ands	r2, r3
    7fca:	4b99      	ldr	r3, [pc, #612]	; (8230 <_usb_device_interrupt_handler+0x308>)
    7fcc:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    7fce:	4b95      	ldr	r3, [pc, #596]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	68fa      	ldr	r2, [r7, #12]
    7fd4:	322e      	adds	r2, #46	; 0x2e
    7fd6:	0092      	lsls	r2, r2, #2
    7fd8:	58d2      	ldr	r2, [r2, r3]
    7fda:	4b92      	ldr	r3, [pc, #584]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    7fdc:	681b      	ldr	r3, [r3, #0]
    7fde:	4994      	ldr	r1, [pc, #592]	; (8230 <_usb_device_interrupt_handler+0x308>)
    7fe0:	0018      	movs	r0, r3
    7fe2:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    7fe4:	68fb      	ldr	r3, [r7, #12]
    7fe6:	3301      	adds	r3, #1
    7fe8:	60fb      	str	r3, [r7, #12]
    7fea:	68fb      	ldr	r3, [r7, #12]
    7fec:	2b06      	cmp	r3, #6
    7fee:	ddc4      	ble.n	7f7a <_usb_device_interrupt_handler+0x52>
    7ff0:	e250      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7ff2:	230b      	movs	r3, #11
    7ff4:	18fb      	adds	r3, r7, r3
    7ff6:	2200      	movs	r2, #0
    7ff8:	701a      	strb	r2, [r3, #0]
    7ffa:	e23b      	b.n	8474 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    7ffc:	2308      	movs	r3, #8
    7ffe:	18fb      	adds	r3, r7, r3
    8000:	881a      	ldrh	r2, [r3, #0]
    8002:	230b      	movs	r3, #11
    8004:	18fb      	adds	r3, r7, r3
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	411a      	asrs	r2, r3
    800a:	0013      	movs	r3, r2
    800c:	2201      	movs	r2, #1
    800e:	4013      	ands	r3, r2
    8010:	d100      	bne.n	8014 <_usb_device_interrupt_handler+0xec>
    8012:	e228      	b.n	8466 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    8014:	4b83      	ldr	r3, [pc, #524]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8016:	681b      	ldr	r3, [r3, #0]
    8018:	681a      	ldr	r2, [r3, #0]
    801a:	230b      	movs	r3, #11
    801c:	18fb      	adds	r3, r7, r3
    801e:	781b      	ldrb	r3, [r3, #0]
    8020:	3308      	adds	r3, #8
    8022:	015b      	lsls	r3, r3, #5
    8024:	18d3      	adds	r3, r2, r3
    8026:	3307      	adds	r3, #7
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	b2da      	uxtb	r2, r3
    802c:	1dbb      	adds	r3, r7, #6
    802e:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    8030:	4b7c      	ldr	r3, [pc, #496]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8032:	6819      	ldr	r1, [r3, #0]
    8034:	230b      	movs	r3, #11
    8036:	18fb      	adds	r3, r7, r3
    8038:	781a      	ldrb	r2, [r3, #0]
    803a:	23b0      	movs	r3, #176	; 0xb0
    803c:	005b      	lsls	r3, r3, #1
    803e:	188a      	adds	r2, r1, r2
    8040:	18d3      	adds	r3, r2, r3
    8042:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    8044:	b29b      	uxth	r3, r3
    8046:	1dba      	adds	r2, r7, #6
    8048:	8812      	ldrh	r2, [r2, #0]
    804a:	4013      	ands	r3, r2
    804c:	b29b      	uxth	r3, r3
    804e:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    8050:	4b74      	ldr	r3, [pc, #464]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8052:	6818      	ldr	r0, [r3, #0]
    8054:	230b      	movs	r3, #11
    8056:	18fb      	adds	r3, r7, r3
    8058:	7819      	ldrb	r1, [r3, #0]
    805a:	23ac      	movs	r3, #172	; 0xac
    805c:	005b      	lsls	r3, r3, #1
    805e:	1841      	adds	r1, r0, r1
    8060:	18cb      	adds	r3, r1, r3
    8062:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    8064:	b21b      	sxth	r3, r3
    8066:	4013      	ands	r3, r2
    8068:	b21a      	sxth	r2, r3
    806a:	1d3b      	adds	r3, r7, #4
    806c:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    806e:	1dbb      	adds	r3, r7, #6
    8070:	881b      	ldrh	r3, [r3, #0]
    8072:	2260      	movs	r2, #96	; 0x60
    8074:	4013      	ands	r3, r2
    8076:	d05c      	beq.n	8132 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    8078:	4b6a      	ldr	r3, [pc, #424]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    807a:	681b      	ldr	r3, [r3, #0]
    807c:	681a      	ldr	r2, [r3, #0]
    807e:	230b      	movs	r3, #11
    8080:	18fb      	adds	r3, r7, r3
    8082:	781b      	ldrb	r3, [r3, #0]
    8084:	3308      	adds	r3, #8
    8086:	015b      	lsls	r3, r3, #5
    8088:	18d3      	adds	r3, r2, r3
    808a:	3307      	adds	r3, #7
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	b2db      	uxtb	r3, r3
    8090:	001a      	movs	r2, r3
    8092:	2340      	movs	r3, #64	; 0x40
    8094:	4013      	ands	r3, r2
    8096:	d015      	beq.n	80c4 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    8098:	4b62      	ldr	r3, [pc, #392]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    809a:	681b      	ldr	r3, [r3, #0]
    809c:	681a      	ldr	r2, [r3, #0]
    809e:	230b      	movs	r3, #11
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	3308      	adds	r3, #8
    80a6:	015b      	lsls	r3, r3, #5
    80a8:	18d3      	adds	r3, r2, r3
    80aa:	3307      	adds	r3, #7
    80ac:	2240      	movs	r2, #64	; 0x40
    80ae:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    80b0:	230b      	movs	r3, #11
    80b2:	18fb      	adds	r3, r7, r3
    80b4:	781b      	ldrb	r3, [r3, #0]
    80b6:	2280      	movs	r2, #128	; 0x80
    80b8:	4252      	negs	r2, r2
    80ba:	4313      	orrs	r3, r2
    80bc:	b2da      	uxtb	r2, r3
    80be:	4b5d      	ldr	r3, [pc, #372]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    80c0:	719a      	strb	r2, [r3, #6]
    80c2:	e020      	b.n	8106 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    80c4:	4b57      	ldr	r3, [pc, #348]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	681a      	ldr	r2, [r3, #0]
    80ca:	230b      	movs	r3, #11
    80cc:	18fb      	adds	r3, r7, r3
    80ce:	781b      	ldrb	r3, [r3, #0]
    80d0:	3308      	adds	r3, #8
    80d2:	015b      	lsls	r3, r3, #5
    80d4:	18d3      	adds	r3, r2, r3
    80d6:	3307      	adds	r3, #7
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	b2db      	uxtb	r3, r3
    80dc:	001a      	movs	r2, r3
    80de:	2320      	movs	r3, #32
    80e0:	4013      	ands	r3, r2
    80e2:	d010      	beq.n	8106 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    80e4:	4b4f      	ldr	r3, [pc, #316]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    80e6:	681b      	ldr	r3, [r3, #0]
    80e8:	681a      	ldr	r2, [r3, #0]
    80ea:	230b      	movs	r3, #11
    80ec:	18fb      	adds	r3, r7, r3
    80ee:	781b      	ldrb	r3, [r3, #0]
    80f0:	3308      	adds	r3, #8
    80f2:	015b      	lsls	r3, r3, #5
    80f4:	18d3      	adds	r3, r2, r3
    80f6:	3307      	adds	r3, #7
    80f8:	2220      	movs	r2, #32
    80fa:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    80fc:	4b4d      	ldr	r3, [pc, #308]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    80fe:	220b      	movs	r2, #11
    8100:	18ba      	adds	r2, r7, r2
    8102:	7812      	ldrb	r2, [r2, #0]
    8104:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    8106:	1d3b      	adds	r3, r7, #4
    8108:	881b      	ldrh	r3, [r3, #0]
    810a:	2260      	movs	r2, #96	; 0x60
    810c:	4013      	ands	r3, r2
    810e:	d100      	bne.n	8112 <_usb_device_interrupt_handler+0x1ea>
    8110:	e1b7      	b.n	8482 <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    8112:	4b44      	ldr	r3, [pc, #272]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8114:	681a      	ldr	r2, [r3, #0]
    8116:	230b      	movs	r3, #11
    8118:	18fb      	adds	r3, r7, r3
    811a:	781b      	ldrb	r3, [r3, #0]
    811c:	21e0      	movs	r1, #224	; 0xe0
    811e:	011b      	lsls	r3, r3, #4
    8120:	18d3      	adds	r3, r2, r3
    8122:	185b      	adds	r3, r3, r1
    8124:	681a      	ldr	r2, [r3, #0]
    8126:	4b3f      	ldr	r3, [pc, #252]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8128:	681b      	ldr	r3, [r3, #0]
    812a:	4942      	ldr	r1, [pc, #264]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    812c:	0018      	movs	r0, r3
    812e:	4790      	blx	r2
					}
					return;
    8130:	e1a7      	b.n	8482 <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8132:	1dbb      	adds	r3, r7, #6
    8134:	881b      	ldrh	r3, [r3, #0]
    8136:	2210      	movs	r2, #16
    8138:	4013      	ands	r3, r2
    813a:	d038      	beq.n	81ae <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    813c:	4b39      	ldr	r3, [pc, #228]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    813e:	681b      	ldr	r3, [r3, #0]
    8140:	681a      	ldr	r2, [r3, #0]
    8142:	230b      	movs	r3, #11
    8144:	18fb      	adds	r3, r7, r3
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	3308      	adds	r3, #8
    814a:	015b      	lsls	r3, r3, #5
    814c:	18d3      	adds	r3, r2, r3
    814e:	3307      	adds	r3, #7
    8150:	2210      	movs	r2, #16
    8152:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    8154:	4b33      	ldr	r3, [pc, #204]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8156:	6819      	ldr	r1, [r3, #0]
    8158:	230b      	movs	r3, #11
    815a:	18fb      	adds	r3, r7, r3
    815c:	781a      	ldrb	r2, [r3, #0]
    815e:	23b0      	movs	r3, #176	; 0xb0
    8160:	005b      	lsls	r3, r3, #1
    8162:	188a      	adds	r2, r1, r2
    8164:	18d3      	adds	r3, r2, r3
    8166:	781b      	ldrb	r3, [r3, #0]
    8168:	2210      	movs	r2, #16
    816a:	4013      	ands	r3, r2
    816c:	b2db      	uxtb	r3, r3
    816e:	2b00      	cmp	r3, #0
    8170:	d100      	bne.n	8174 <_usb_device_interrupt_handler+0x24c>
    8172:	e188      	b.n	8486 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    8174:	230b      	movs	r3, #11
    8176:	18fb      	adds	r3, r7, r3
    8178:	781b      	ldrb	r3, [r3, #0]
    817a:	4a2c      	ldr	r2, [pc, #176]	; (822c <_usb_device_interrupt_handler+0x304>)
    817c:	015b      	lsls	r3, r3, #5
    817e:	18d3      	adds	r3, r2, r3
    8180:	685b      	ldr	r3, [r3, #4]
    8182:	049b      	lsls	r3, r3, #18
    8184:	0c9b      	lsrs	r3, r3, #18
    8186:	b29b      	uxth	r3, r3
    8188:	001a      	movs	r2, r3
    818a:	4b2a      	ldr	r3, [pc, #168]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    818c:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    818e:	4b25      	ldr	r3, [pc, #148]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    8190:	681a      	ldr	r2, [r3, #0]
    8192:	230b      	movs	r3, #11
    8194:	18fb      	adds	r3, r7, r3
    8196:	781b      	ldrb	r3, [r3, #0]
    8198:	21dc      	movs	r1, #220	; 0xdc
    819a:	011b      	lsls	r3, r3, #4
    819c:	18d3      	adds	r3, r2, r3
    819e:	185b      	adds	r3, r3, r1
    81a0:	681a      	ldr	r2, [r3, #0]
    81a2:	4b20      	ldr	r3, [pc, #128]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	4923      	ldr	r1, [pc, #140]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    81a8:	0018      	movs	r0, r3
    81aa:	4790      	blx	r2
					}
					return;
    81ac:	e16b      	b.n	8486 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    81ae:	1dbb      	adds	r3, r7, #6
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	2203      	movs	r2, #3
    81b4:	4013      	ands	r3, r2
    81b6:	d100      	bne.n	81ba <_usb_device_interrupt_handler+0x292>
    81b8:	e08f      	b.n	82da <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    81ba:	4b1a      	ldr	r3, [pc, #104]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    81bc:	681b      	ldr	r3, [r3, #0]
    81be:	681a      	ldr	r2, [r3, #0]
    81c0:	230b      	movs	r3, #11
    81c2:	18fb      	adds	r3, r7, r3
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	3308      	adds	r3, #8
    81c8:	015b      	lsls	r3, r3, #5
    81ca:	18d3      	adds	r3, r2, r3
    81cc:	3307      	adds	r3, #7
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	b2db      	uxtb	r3, r3
    81d2:	001a      	movs	r2, r3
    81d4:	2302      	movs	r3, #2
    81d6:	4013      	ands	r3, r2
    81d8:	d02e      	beq.n	8238 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    81da:	4b12      	ldr	r3, [pc, #72]	; (8224 <_usb_device_interrupt_handler+0x2fc>)
    81dc:	681b      	ldr	r3, [r3, #0]
    81de:	681a      	ldr	r2, [r3, #0]
    81e0:	230b      	movs	r3, #11
    81e2:	18fb      	adds	r3, r7, r3
    81e4:	781b      	ldrb	r3, [r3, #0]
    81e6:	3308      	adds	r3, #8
    81e8:	015b      	lsls	r3, r3, #5
    81ea:	18d3      	adds	r3, r2, r3
    81ec:	3307      	adds	r3, #7
    81ee:	2202      	movs	r2, #2
    81f0:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    81f2:	230b      	movs	r3, #11
    81f4:	18fb      	adds	r3, r7, r3
    81f6:	781b      	ldrb	r3, [r3, #0]
    81f8:	2280      	movs	r2, #128	; 0x80
    81fa:	4252      	negs	r2, r2
    81fc:	4313      	orrs	r3, r2
    81fe:	b2da      	uxtb	r2, r3
    8200:	4b0c      	ldr	r3, [pc, #48]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    8202:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    8204:	230b      	movs	r3, #11
    8206:	18fb      	adds	r3, r7, r3
    8208:	781b      	ldrb	r3, [r3, #0]
    820a:	4a08      	ldr	r2, [pc, #32]	; (822c <_usb_device_interrupt_handler+0x304>)
    820c:	015b      	lsls	r3, r3, #5
    820e:	18d3      	adds	r3, r2, r3
    8210:	3310      	adds	r3, #16
    8212:	685b      	ldr	r3, [r3, #4]
    8214:	049b      	lsls	r3, r3, #18
    8216:	0c9b      	lsrs	r3, r3, #18
    8218:	b29b      	uxth	r3, r3
    821a:	001a      	movs	r2, r3
    821c:	4b05      	ldr	r3, [pc, #20]	; (8234 <_usb_device_interrupt_handler+0x30c>)
    821e:	805a      	strh	r2, [r3, #2]
    8220:	e045      	b.n	82ae <_usb_device_interrupt_handler+0x386>
    8222:	46c0      	nop			; (mov r8, r8)
    8224:	20000214 	.word	0x20000214
    8228:	000090c8 	.word	0x000090c8
    822c:	200004fc 	.word	0x200004fc
    8230:	20000220 	.word	0x20000220
    8234:	20000224 	.word	0x20000224

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8238:	4b98      	ldr	r3, [pc, #608]	; (849c <_usb_device_interrupt_handler+0x574>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	681a      	ldr	r2, [r3, #0]
    823e:	230b      	movs	r3, #11
    8240:	18fb      	adds	r3, r7, r3
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	3308      	adds	r3, #8
    8246:	015b      	lsls	r3, r3, #5
    8248:	18d3      	adds	r3, r2, r3
    824a:	3307      	adds	r3, #7
    824c:	781b      	ldrb	r3, [r3, #0]
    824e:	b2db      	uxtb	r3, r3
    8250:	001a      	movs	r2, r3
    8252:	2301      	movs	r3, #1
    8254:	4013      	ands	r3, r2
    8256:	d02a      	beq.n	82ae <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    8258:	4b90      	ldr	r3, [pc, #576]	; (849c <_usb_device_interrupt_handler+0x574>)
    825a:	681b      	ldr	r3, [r3, #0]
    825c:	681a      	ldr	r2, [r3, #0]
    825e:	230b      	movs	r3, #11
    8260:	18fb      	adds	r3, r7, r3
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	3308      	adds	r3, #8
    8266:	015b      	lsls	r3, r3, #5
    8268:	18d3      	adds	r3, r2, r3
    826a:	3307      	adds	r3, #7
    826c:	2201      	movs	r2, #1
    826e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    8270:	4b8b      	ldr	r3, [pc, #556]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    8272:	220b      	movs	r2, #11
    8274:	18ba      	adds	r2, r7, r2
    8276:	7812      	ldrb	r2, [r2, #0]
    8278:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    827a:	230b      	movs	r3, #11
    827c:	18fb      	adds	r3, r7, r3
    827e:	781b      	ldrb	r3, [r3, #0]
    8280:	4a88      	ldr	r2, [pc, #544]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    8282:	015b      	lsls	r3, r3, #5
    8284:	18d3      	adds	r3, r2, r3
    8286:	685b      	ldr	r3, [r3, #4]
    8288:	049b      	lsls	r3, r3, #18
    828a:	0c9b      	lsrs	r3, r3, #18
    828c:	b29b      	uxth	r3, r3
    828e:	001a      	movs	r2, r3
    8290:	4b83      	ldr	r3, [pc, #524]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    8292:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    8294:	230b      	movs	r3, #11
    8296:	18fb      	adds	r3, r7, r3
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	4a82      	ldr	r2, [pc, #520]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    829c:	015b      	lsls	r3, r3, #5
    829e:	18d3      	adds	r3, r2, r3
    82a0:	685b      	ldr	r3, [r3, #4]
    82a2:	011b      	lsls	r3, r3, #4
    82a4:	0c9b      	lsrs	r3, r3, #18
    82a6:	b29b      	uxth	r3, r3
    82a8:	001a      	movs	r2, r3
    82aa:	4b7d      	ldr	r3, [pc, #500]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    82ac:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    82ae:	1d3b      	adds	r3, r7, #4
    82b0:	881b      	ldrh	r3, [r3, #0]
    82b2:	2203      	movs	r2, #3
    82b4:	4013      	ands	r3, r2
    82b6:	d100      	bne.n	82ba <_usb_device_interrupt_handler+0x392>
    82b8:	e0e7      	b.n	848a <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    82ba:	4b78      	ldr	r3, [pc, #480]	; (849c <_usb_device_interrupt_handler+0x574>)
    82bc:	681a      	ldr	r2, [r3, #0]
    82be:	230b      	movs	r3, #11
    82c0:	18fb      	adds	r3, r7, r3
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	330d      	adds	r3, #13
    82c6:	011b      	lsls	r3, r3, #4
    82c8:	18d3      	adds	r3, r2, r3
    82ca:	3304      	adds	r3, #4
    82cc:	681a      	ldr	r2, [r3, #0]
    82ce:	4b73      	ldr	r3, [pc, #460]	; (849c <_usb_device_interrupt_handler+0x574>)
    82d0:	681b      	ldr	r3, [r3, #0]
    82d2:	4973      	ldr	r1, [pc, #460]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    82d4:	0018      	movs	r0, r3
    82d6:	4790      	blx	r2
					}
					return;
    82d8:	e0d7      	b.n	848a <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    82da:	1dbb      	adds	r3, r7, #6
    82dc:	881b      	ldrh	r3, [r3, #0]
    82de:	220c      	movs	r2, #12
    82e0:	4013      	ands	r3, r2
    82e2:	d100      	bne.n	82e6 <_usb_device_interrupt_handler+0x3be>
    82e4:	e0bf      	b.n	8466 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    82e6:	4b6d      	ldr	r3, [pc, #436]	; (849c <_usb_device_interrupt_handler+0x574>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	681a      	ldr	r2, [r3, #0]
    82ec:	230b      	movs	r3, #11
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	3308      	adds	r3, #8
    82f4:	015b      	lsls	r3, r3, #5
    82f6:	18d3      	adds	r3, r2, r3
    82f8:	3307      	adds	r3, #7
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	b2db      	uxtb	r3, r3
    82fe:	001a      	movs	r2, r3
    8300:	2308      	movs	r3, #8
    8302:	4013      	ands	r3, r2
    8304:	d047      	beq.n	8396 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    8306:	4b65      	ldr	r3, [pc, #404]	; (849c <_usb_device_interrupt_handler+0x574>)
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	681a      	ldr	r2, [r3, #0]
    830c:	230b      	movs	r3, #11
    830e:	18fb      	adds	r3, r7, r3
    8310:	781b      	ldrb	r3, [r3, #0]
    8312:	3308      	adds	r3, #8
    8314:	015b      	lsls	r3, r3, #5
    8316:	18d3      	adds	r3, r2, r3
    8318:	3307      	adds	r3, #7
    831a:	2208      	movs	r2, #8
    831c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    831e:	230b      	movs	r3, #11
    8320:	18fb      	adds	r3, r7, r3
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	4a5f      	ldr	r2, [pc, #380]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    8326:	015b      	lsls	r3, r3, #5
    8328:	18d3      	adds	r3, r2, r3
    832a:	331a      	adds	r3, #26
    832c:	781b      	ldrb	r3, [r3, #0]
    832e:	b2db      	uxtb	r3, r3
    8330:	001a      	movs	r2, r3
    8332:	2302      	movs	r3, #2
    8334:	4013      	ands	r3, r2
    8336:	d014      	beq.n	8362 <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8338:	230b      	movs	r3, #11
    833a:	18fb      	adds	r3, r7, r3
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	220b      	movs	r2, #11
    8340:	18ba      	adds	r2, r7, r2
    8342:	7812      	ldrb	r2, [r2, #0]
    8344:	4957      	ldr	r1, [pc, #348]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    8346:	0152      	lsls	r2, r2, #5
    8348:	188a      	adds	r2, r1, r2
    834a:	321a      	adds	r2, #26
    834c:	7812      	ldrb	r2, [r2, #0]
    834e:	b2d2      	uxtb	r2, r2
    8350:	2102      	movs	r1, #2
    8352:	438a      	bics	r2, r1
    8354:	b2d1      	uxtb	r1, r2
    8356:	4a53      	ldr	r2, [pc, #332]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    8358:	015b      	lsls	r3, r3, #5
    835a:	18d3      	adds	r3, r2, r3
    835c:	331a      	adds	r3, #26
    835e:	1c0a      	adds	r2, r1, #0
    8360:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    8362:	230b      	movs	r3, #11
    8364:	18fb      	adds	r3, r7, r3
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	2280      	movs	r2, #128	; 0x80
    836a:	4252      	negs	r2, r2
    836c:	4313      	orrs	r3, r2
    836e:	b2da      	uxtb	r2, r3
    8370:	4b4b      	ldr	r3, [pc, #300]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    8372:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8374:	4b49      	ldr	r3, [pc, #292]	; (849c <_usb_device_interrupt_handler+0x574>)
    8376:	681b      	ldr	r3, [r3, #0]
    8378:	681a      	ldr	r2, [r3, #0]
    837a:	230b      	movs	r3, #11
    837c:	18fb      	adds	r3, r7, r3
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	3308      	adds	r3, #8
    8382:	015b      	lsls	r3, r3, #5
    8384:	18d3      	adds	r3, r2, r3
    8386:	3307      	adds	r3, #7
    8388:	781b      	ldrb	r3, [r3, #0]
    838a:	b2db      	uxtb	r3, r3
    838c:	001a      	movs	r2, r3
    838e:	2302      	movs	r3, #2
    8390:	4013      	ands	r3, r2
    8392:	d053      	beq.n	843c <_usb_device_interrupt_handler+0x514>
							return;
    8394:	e07e      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8396:	4b41      	ldr	r3, [pc, #260]	; (849c <_usb_device_interrupt_handler+0x574>)
    8398:	681b      	ldr	r3, [r3, #0]
    839a:	681a      	ldr	r2, [r3, #0]
    839c:	230b      	movs	r3, #11
    839e:	18fb      	adds	r3, r7, r3
    83a0:	781b      	ldrb	r3, [r3, #0]
    83a2:	3308      	adds	r3, #8
    83a4:	015b      	lsls	r3, r3, #5
    83a6:	18d3      	adds	r3, r2, r3
    83a8:	3307      	adds	r3, #7
    83aa:	781b      	ldrb	r3, [r3, #0]
    83ac:	b2db      	uxtb	r3, r3
    83ae:	001a      	movs	r2, r3
    83b0:	2304      	movs	r3, #4
    83b2:	4013      	ands	r3, r2
    83b4:	d042      	beq.n	843c <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    83b6:	4b39      	ldr	r3, [pc, #228]	; (849c <_usb_device_interrupt_handler+0x574>)
    83b8:	681b      	ldr	r3, [r3, #0]
    83ba:	681a      	ldr	r2, [r3, #0]
    83bc:	230b      	movs	r3, #11
    83be:	18fb      	adds	r3, r7, r3
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	3308      	adds	r3, #8
    83c4:	015b      	lsls	r3, r3, #5
    83c6:	18d3      	adds	r3, r2, r3
    83c8:	3307      	adds	r3, #7
    83ca:	2204      	movs	r2, #4
    83cc:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    83ce:	230b      	movs	r3, #11
    83d0:	18fb      	adds	r3, r7, r3
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	4a33      	ldr	r2, [pc, #204]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    83d6:	015b      	lsls	r3, r3, #5
    83d8:	18d3      	adds	r3, r2, r3
    83da:	330a      	adds	r3, #10
    83dc:	781b      	ldrb	r3, [r3, #0]
    83de:	b2db      	uxtb	r3, r3
    83e0:	001a      	movs	r2, r3
    83e2:	2302      	movs	r3, #2
    83e4:	4013      	ands	r3, r2
    83e6:	d014      	beq.n	8412 <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    83e8:	230b      	movs	r3, #11
    83ea:	18fb      	adds	r3, r7, r3
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	220b      	movs	r2, #11
    83f0:	18ba      	adds	r2, r7, r2
    83f2:	7812      	ldrb	r2, [r2, #0]
    83f4:	492b      	ldr	r1, [pc, #172]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    83f6:	0152      	lsls	r2, r2, #5
    83f8:	188a      	adds	r2, r1, r2
    83fa:	320a      	adds	r2, #10
    83fc:	7812      	ldrb	r2, [r2, #0]
    83fe:	b2d2      	uxtb	r2, r2
    8400:	2102      	movs	r1, #2
    8402:	438a      	bics	r2, r1
    8404:	b2d1      	uxtb	r1, r2
    8406:	4a27      	ldr	r2, [pc, #156]	; (84a4 <_usb_device_interrupt_handler+0x57c>)
    8408:	015b      	lsls	r3, r3, #5
    840a:	18d3      	adds	r3, r2, r3
    840c:	330a      	adds	r3, #10
    840e:	1c0a      	adds	r2, r1, #0
    8410:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    8412:	4b23      	ldr	r3, [pc, #140]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    8414:	220b      	movs	r2, #11
    8416:	18ba      	adds	r2, r7, r2
    8418:	7812      	ldrb	r2, [r2, #0]
    841a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    841c:	4b1f      	ldr	r3, [pc, #124]	; (849c <_usb_device_interrupt_handler+0x574>)
    841e:	681b      	ldr	r3, [r3, #0]
    8420:	681a      	ldr	r2, [r3, #0]
    8422:	230b      	movs	r3, #11
    8424:	18fb      	adds	r3, r7, r3
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	3308      	adds	r3, #8
    842a:	015b      	lsls	r3, r3, #5
    842c:	18d3      	adds	r3, r2, r3
    842e:	3307      	adds	r3, #7
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	b2db      	uxtb	r3, r3
    8434:	001a      	movs	r2, r3
    8436:	2301      	movs	r3, #1
    8438:	4013      	ands	r3, r2
    843a:	d128      	bne.n	848e <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    843c:	1d3b      	adds	r3, r7, #4
    843e:	881b      	ldrh	r3, [r3, #0]
    8440:	220c      	movs	r2, #12
    8442:	4013      	ands	r3, r2
    8444:	d025      	beq.n	8492 <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    8446:	4b15      	ldr	r3, [pc, #84]	; (849c <_usb_device_interrupt_handler+0x574>)
    8448:	681a      	ldr	r2, [r3, #0]
    844a:	230b      	movs	r3, #11
    844c:	18fb      	adds	r3, r7, r3
    844e:	781b      	ldrb	r3, [r3, #0]
    8450:	21d8      	movs	r1, #216	; 0xd8
    8452:	011b      	lsls	r3, r3, #4
    8454:	18d3      	adds	r3, r2, r3
    8456:	185b      	adds	r3, r3, r1
    8458:	681a      	ldr	r2, [r3, #0]
    845a:	4b10      	ldr	r3, [pc, #64]	; (849c <_usb_device_interrupt_handler+0x574>)
    845c:	681b      	ldr	r3, [r3, #0]
    845e:	4910      	ldr	r1, [pc, #64]	; (84a0 <_usb_device_interrupt_handler+0x578>)
    8460:	0018      	movs	r0, r3
    8462:	4790      	blx	r2
					}
					return;
    8464:	e015      	b.n	8492 <_usb_device_interrupt_handler+0x56a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    8466:	230b      	movs	r3, #11
    8468:	18fb      	adds	r3, r7, r3
    846a:	781a      	ldrb	r2, [r3, #0]
    846c:	230b      	movs	r3, #11
    846e:	18fb      	adds	r3, r7, r3
    8470:	3201      	adds	r2, #1
    8472:	701a      	strb	r2, [r3, #0]
    8474:	230b      	movs	r3, #11
    8476:	18fb      	adds	r3, r7, r3
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	2b07      	cmp	r3, #7
    847c:	d800      	bhi.n	8480 <_usb_device_interrupt_handler+0x558>
    847e:	e5bd      	b.n	7ffc <_usb_device_interrupt_handler+0xd4>
    8480:	e008      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
					}
					return;
    8482:	46c0      	nop			; (mov r8, r8)
    8484:	e006      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
					}
					return;
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	e004      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
					}
					return;
    848a:	46c0      	nop			; (mov r8, r8)
    848c:	e002      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
							return;
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	e000      	b.n	8494 <_usb_device_interrupt_handler+0x56c>
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
					}
					return;
    8492:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    8494:	46bd      	mov	sp, r7
    8496:	b004      	add	sp, #16
    8498:	bd80      	pop	{r7, pc}
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	20000214 	.word	0x20000214
    84a0:	20000224 	.word	0x20000224
    84a4:	200004fc 	.word	0x200004fc

000084a8 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    84a8:	b580      	push	{r7, lr}
    84aa:	b082      	sub	sp, #8
    84ac:	af00      	add	r7, sp, #0
    84ae:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	681a      	ldr	r2, [r3, #0]
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	681b      	ldr	r3, [r3, #0]
    84b8:	781b      	ldrb	r3, [r3, #0]
    84ba:	b2db      	uxtb	r3, r3
    84bc:	2102      	movs	r1, #2
    84be:	430b      	orrs	r3, r1
    84c0:	b2db      	uxtb	r3, r3
    84c2:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    84c4:	46c0      	nop			; (mov r8, r8)
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	789b      	ldrb	r3, [r3, #2]
    84cc:	b2db      	uxtb	r3, r3
    84ce:	2b02      	cmp	r3, #2
    84d0:	d0f9      	beq.n	84c6 <usb_enable+0x1e>
}
    84d2:	46c0      	nop			; (mov r8, r8)
    84d4:	46bd      	mov	sp, r7
    84d6:	b002      	add	sp, #8
    84d8:	bd80      	pop	{r7, pc}
    84da:	46c0      	nop			; (mov r8, r8)

000084dc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    84dc:	b580      	push	{r7, lr}
    84de:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    84e0:	4b08      	ldr	r3, [pc, #32]	; (8504 <USB_Handler+0x28>)
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	061b      	lsls	r3, r3, #24
    84ea:	0fdb      	lsrs	r3, r3, #31
    84ec:	b2db      	uxtb	r3, r3
    84ee:	2b00      	cmp	r3, #0
    84f0:	d002      	beq.n	84f8 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    84f2:	4b05      	ldr	r3, [pc, #20]	; (8508 <USB_Handler+0x2c>)
    84f4:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    84f6:	e001      	b.n	84fc <USB_Handler+0x20>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    84f8:	4b04      	ldr	r3, [pc, #16]	; (850c <USB_Handler+0x30>)
    84fa:	4798      	blx	r3
	}
}
    84fc:	46c0      	nop			; (mov r8, r8)
    84fe:	46bd      	mov	sp, r7
    8500:	bd80      	pop	{r7, pc}
    8502:	46c0      	nop			; (mov r8, r8)
    8504:	20000214 	.word	0x20000214
    8508:	00006bd5 	.word	0x00006bd5
    850c:	00007f29 	.word	0x00007f29

00008510 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    8510:	b580      	push	{r7, lr}
    8512:	b082      	sub	sp, #8
    8514:	af00      	add	r7, sp, #0
    8516:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    8518:	687b      	ldr	r3, [r7, #4]
    851a:	2200      	movs	r2, #0
    851c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	2201      	movs	r2, #1
    8522:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	2200      	movs	r2, #0
    8528:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	2201      	movs	r2, #1
    852e:	70da      	strb	r2, [r3, #3]
}
    8530:	46c0      	nop			; (mov r8, r8)
    8532:	46bd      	mov	sp, r7
    8534:	b002      	add	sp, #8
    8536:	bd80      	pop	{r7, pc}

00008538 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    8538:	b580      	push	{r7, lr}
    853a:	b08c      	sub	sp, #48	; 0x30
    853c:	af00      	add	r7, sp, #0
    853e:	60f8      	str	r0, [r7, #12]
    8540:	60b9      	str	r1, [r7, #8]
    8542:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    8544:	4bc4      	ldr	r3, [pc, #784]	; (8858 <usb_init+0x320>)
    8546:	2200      	movs	r2, #0
    8548:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    854a:	4bc4      	ldr	r3, [pc, #784]	; (885c <usb_init+0x324>)
    854c:	68fa      	ldr	r2, [r7, #12]
    854e:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    8550:	68fb      	ldr	r3, [r7, #12]
    8552:	68ba      	ldr	r2, [r7, #8]
    8554:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    8556:	2120      	movs	r1, #32
    8558:	2001      	movs	r0, #1
    855a:	4bc1      	ldr	r3, [pc, #772]	; (8860 <usb_init+0x328>)
    855c:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    855e:	2318      	movs	r3, #24
    8560:	18fb      	adds	r3, r7, r3
    8562:	0018      	movs	r0, r3
    8564:	4bbf      	ldr	r3, [pc, #764]	; (8864 <usb_init+0x32c>)
    8566:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    8568:	2318      	movs	r3, #24
    856a:	18fb      	adds	r3, r7, r3
    856c:	2206      	movs	r2, #6
    856e:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    8570:	2318      	movs	r3, #24
    8572:	18fb      	adds	r3, r7, r3
    8574:	0019      	movs	r1, r3
    8576:	2018      	movs	r0, #24
    8578:	4bbb      	ldr	r3, [pc, #748]	; (8868 <usb_init+0x330>)
    857a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    857c:	2318      	movs	r3, #24
    857e:	18fb      	adds	r3, r7, r3
    8580:	2206      	movs	r2, #6
    8582:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    8584:	2318      	movs	r3, #24
    8586:	18fb      	adds	r3, r7, r3
    8588:	0019      	movs	r1, r3
    858a:	2019      	movs	r0, #25
    858c:	4bb6      	ldr	r3, [pc, #728]	; (8868 <usb_init+0x330>)
    858e:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    8590:	2314      	movs	r3, #20
    8592:	18fb      	adds	r3, r7, r3
    8594:	0018      	movs	r0, r3
    8596:	4bb5      	ldr	r3, [pc, #724]	; (886c <usb_init+0x334>)
    8598:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	789a      	ldrb	r2, [r3, #2]
    859e:	2314      	movs	r3, #20
    85a0:	18fb      	adds	r3, r7, r3
    85a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    85a4:	2314      	movs	r3, #20
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	0019      	movs	r1, r3
    85aa:	2006      	movs	r0, #6
    85ac:	4bb0      	ldr	r3, [pc, #704]	; (8870 <usb_init+0x338>)
    85ae:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    85b0:	2006      	movs	r0, #6
    85b2:	4bb0      	ldr	r3, [pc, #704]	; (8874 <usb_init+0x33c>)
    85b4:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    85b6:	68ba      	ldr	r2, [r7, #8]
    85b8:	7813      	ldrb	r3, [r2, #0]
    85ba:	2101      	movs	r1, #1
    85bc:	430b      	orrs	r3, r1
    85be:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    85c0:	46c0      	nop			; (mov r8, r8)
    85c2:	68bb      	ldr	r3, [r7, #8]
    85c4:	789b      	ldrb	r3, [r3, #2]
    85c6:	07db      	lsls	r3, r3, #31
    85c8:	0fdb      	lsrs	r3, r3, #31
    85ca:	b2db      	uxtb	r3, r3
    85cc:	2b00      	cmp	r3, #0
    85ce:	d1f8      	bne.n	85c2 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    85d0:	4aa9      	ldr	r2, [pc, #676]	; (8878 <usb_init+0x340>)
    85d2:	78d3      	ldrb	r3, [r2, #3]
    85d4:	2103      	movs	r1, #3
    85d6:	438b      	bics	r3, r1
    85d8:	1c19      	adds	r1, r3, #0
    85da:	2302      	movs	r3, #2
    85dc:	430b      	orrs	r3, r1
    85de:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    85e0:	4aa5      	ldr	r2, [pc, #660]	; (8878 <usb_init+0x340>)
    85e2:	78d3      	ldrb	r3, [r2, #3]
    85e4:	210c      	movs	r1, #12
    85e6:	438b      	bics	r3, r1
    85e8:	1c19      	adds	r1, r3, #0
    85ea:	2308      	movs	r3, #8
    85ec:	430b      	orrs	r3, r1
    85ee:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    85f0:	4ba2      	ldr	r3, [pc, #648]	; (887c <usb_init+0x344>)
    85f2:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    85f4:	0b5b      	lsrs	r3, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    85f6:	221f      	movs	r2, #31
    85f8:	4013      	ands	r3, r2
    85fa:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    85fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85fe:	2b1f      	cmp	r3, #31
    8600:	d101      	bne.n	8606 <usb_init+0xce>
		pad_transn = 5;
    8602:	2305      	movs	r3, #5
    8604:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    8606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8608:	b2db      	uxtb	r3, r3
    860a:	1c1a      	adds	r2, r3, #0
    860c:	231f      	movs	r3, #31
    860e:	4013      	ands	r3, r2
    8610:	b2d9      	uxtb	r1, r3
    8612:	68ba      	ldr	r2, [r7, #8]
    8614:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8616:	1c08      	adds	r0, r1, #0
    8618:	211f      	movs	r1, #31
    861a:	4001      	ands	r1, r0
    861c:	0188      	lsls	r0, r1, #6
    861e:	4998      	ldr	r1, [pc, #608]	; (8880 <usb_init+0x348>)
    8620:	400b      	ands	r3, r1
    8622:	1c19      	adds	r1, r3, #0
    8624:	1c03      	adds	r3, r0, #0
    8626:	430b      	orrs	r3, r1
    8628:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    862a:	4b94      	ldr	r3, [pc, #592]	; (887c <usb_init+0x344>)
    862c:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    862e:	0c9b      	lsrs	r3, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8630:	221f      	movs	r2, #31
    8632:	4013      	ands	r3, r2
    8634:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    8636:	6a3b      	ldr	r3, [r7, #32]
    8638:	2b1f      	cmp	r3, #31
    863a:	d101      	bne.n	8640 <usb_init+0x108>
		pad_transp = 29;
    863c:	231d      	movs	r3, #29
    863e:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    8640:	6a3b      	ldr	r3, [r7, #32]
    8642:	b2db      	uxtb	r3, r3
    8644:	1c1a      	adds	r2, r3, #0
    8646:	231f      	movs	r3, #31
    8648:	4013      	ands	r3, r2
    864a:	b2d9      	uxtb	r1, r3
    864c:	68ba      	ldr	r2, [r7, #8]
    864e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8650:	1c08      	adds	r0, r1, #0
    8652:	211f      	movs	r1, #31
    8654:	4008      	ands	r0, r1
    8656:	211f      	movs	r1, #31
    8658:	438b      	bics	r3, r1
    865a:	1c19      	adds	r1, r3, #0
    865c:	1c03      	adds	r3, r0, #0
    865e:	430b      	orrs	r3, r1
    8660:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    8662:	4b86      	ldr	r3, [pc, #536]	; (887c <usb_init+0x344>)
    8664:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    8666:	0ddb      	lsrs	r3, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    8668:	2207      	movs	r2, #7
    866a:	4013      	ands	r3, r2
    866c:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    866e:	69fb      	ldr	r3, [r7, #28]
    8670:	2b07      	cmp	r3, #7
    8672:	d101      	bne.n	8678 <usb_init+0x140>
		pad_trim = 3;
    8674:	2303      	movs	r3, #3
    8676:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    8678:	69fb      	ldr	r3, [r7, #28]
    867a:	b2db      	uxtb	r3, r3
    867c:	1c1a      	adds	r2, r3, #0
    867e:	2307      	movs	r3, #7
    8680:	4013      	ands	r3, r2
    8682:	b2d9      	uxtb	r1, r3
    8684:	68ba      	ldr	r2, [r7, #8]
    8686:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8688:	1c08      	adds	r0, r1, #0
    868a:	2107      	movs	r1, #7
    868c:	4001      	ands	r1, r0
    868e:	0308      	lsls	r0, r1, #12
    8690:	497c      	ldr	r1, [pc, #496]	; (8884 <usb_init+0x34c>)
    8692:	400b      	ands	r3, r1
    8694:	1c19      	adds	r1, r3, #0
    8696:	1c03      	adds	r3, r0, #0
    8698:	430b      	orrs	r3, r1
    869a:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    869c:	687b      	ldr	r3, [r7, #4]
    869e:	7819      	ldrb	r1, [r3, #0]
    86a0:	68ba      	ldr	r2, [r7, #8]
    86a2:	7813      	ldrb	r3, [r2, #0]
    86a4:	01c8      	lsls	r0, r1, #7
    86a6:	217f      	movs	r1, #127	; 0x7f
    86a8:	400b      	ands	r3, r1
    86aa:	1c19      	adds	r1, r3, #0
    86ac:	1c03      	adds	r3, r0, #0
    86ae:	430b      	orrs	r3, r1
    86b0:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	7859      	ldrb	r1, [r3, #1]
    86b6:	68ba      	ldr	r2, [r7, #8]
    86b8:	7813      	ldrb	r3, [r2, #0]
    86ba:	2001      	movs	r0, #1
    86bc:	4001      	ands	r1, r0
    86be:	0088      	lsls	r0, r1, #2
    86c0:	2104      	movs	r1, #4
    86c2:	438b      	bics	r3, r1
    86c4:	1c19      	adds	r1, r3, #0
    86c6:	1c03      	adds	r3, r0, #0
    86c8:	430b      	orrs	r3, r1
    86ca:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    86cc:	4a6e      	ldr	r2, [pc, #440]	; (8888 <usb_init+0x350>)
    86ce:	68bb      	ldr	r3, [r7, #8]
    86d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	78db      	ldrb	r3, [r3, #3]
    86d6:	2b01      	cmp	r3, #1
    86d8:	d106      	bne.n	86e8 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    86da:	68fb      	ldr	r3, [r7, #12]
    86dc:	681a      	ldr	r2, [r3, #0]
    86de:	8913      	ldrh	r3, [r2, #8]
    86e0:	210c      	movs	r1, #12
    86e2:	438b      	bics	r3, r1
    86e4:	8113      	strh	r3, [r2, #8]
    86e6:	e00c      	b.n	8702 <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	78db      	ldrb	r3, [r3, #3]
    86ec:	2b00      	cmp	r3, #0
    86ee:	d108      	bne.n	8702 <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    86f0:	68fb      	ldr	r3, [r7, #12]
    86f2:	681a      	ldr	r2, [r3, #0]
    86f4:	8913      	ldrh	r3, [r2, #8]
    86f6:	210c      	movs	r1, #12
    86f8:	438b      	bics	r3, r1
    86fa:	1c19      	adds	r1, r3, #0
    86fc:	2304      	movs	r3, #4
    86fe:	430b      	orrs	r3, r1
    8700:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    8702:	2380      	movs	r3, #128	; 0x80
    8704:	005a      	lsls	r2, r3, #1
    8706:	4b60      	ldr	r3, [pc, #384]	; (8888 <usb_init+0x350>)
    8708:	2100      	movs	r1, #0
    870a:	0018      	movs	r0, r3
    870c:	4b5f      	ldr	r3, [pc, #380]	; (888c <usb_init+0x354>)
    870e:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8710:	2300      	movs	r3, #0
    8712:	62fb      	str	r3, [r7, #44]	; 0x2c
    8714:	e009      	b.n	872a <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    8716:	68fa      	ldr	r2, [r7, #12]
    8718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    871a:	009b      	lsls	r3, r3, #2
    871c:	18d3      	adds	r3, r2, r3
    871e:	3304      	adds	r3, #4
    8720:	2200      	movs	r2, #0
    8722:	601a      	str	r2, [r3, #0]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8726:	3301      	adds	r3, #1
    8728:	62fb      	str	r3, [r7, #44]	; 0x2c
    872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    872c:	2b07      	cmp	r3, #7
    872e:	d9f2      	bls.n	8716 <usb_init+0x1de>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8730:	2300      	movs	r3, #0
    8732:	62fb      	str	r3, [r7, #44]	; 0x2c
    8734:	e016      	b.n	8764 <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    8736:	2300      	movs	r3, #0
    8738:	62bb      	str	r3, [r7, #40]	; 0x28
    873a:	e00d      	b.n	8758 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    873c:	68fa      	ldr	r2, [r7, #12]
    873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8740:	0099      	lsls	r1, r3, #2
    8742:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8744:	18cb      	adds	r3, r1, r3
    8746:	3308      	adds	r3, #8
    8748:	009b      	lsls	r3, r3, #2
    874a:	18d3      	adds	r3, r2, r3
    874c:	3304      	adds	r3, #4
    874e:	2200      	movs	r2, #0
    8750:	601a      	str	r2, [r3, #0]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    8752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8754:	3301      	adds	r3, #1
    8756:	62bb      	str	r3, [r7, #40]	; 0x28
    8758:	6abb      	ldr	r3, [r7, #40]	; 0x28
    875a:	2b03      	cmp	r3, #3
    875c:	d9ee      	bls.n	873c <usb_init+0x204>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8760:	3301      	adds	r3, #1
    8762:	62fb      	str	r3, [r7, #44]	; 0x2c
    8764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8766:	2b07      	cmp	r3, #7
    8768:	d9e5      	bls.n	8736 <usb_init+0x1fe>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    876a:	68fb      	ldr	r3, [r7, #12]
    876c:	22a4      	movs	r2, #164	; 0xa4
    876e:	2100      	movs	r1, #0
    8770:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	22a5      	movs	r2, #165	; 0xa5
    8776:	2100      	movs	r1, #0
    8778:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    877a:	2300      	movs	r3, #0
    877c:	62fb      	str	r3, [r7, #44]	; 0x2c
    877e:	e010      	b.n	87a2 <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    8780:	68fa      	ldr	r2, [r7, #12]
    8782:	21a6      	movs	r1, #166	; 0xa6
    8784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8786:	18d3      	adds	r3, r2, r3
    8788:	185b      	adds	r3, r3, r1
    878a:	2200      	movs	r2, #0
    878c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    878e:	68fa      	ldr	r2, [r7, #12]
    8790:	21ae      	movs	r1, #174	; 0xae
    8792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8794:	18d3      	adds	r3, r2, r3
    8796:	185b      	adds	r3, r3, r1
    8798:	2200      	movs	r2, #0
    879a:	701a      	strb	r2, [r3, #0]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    879e:	3301      	adds	r3, #1
    87a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    87a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87a4:	2b07      	cmp	r3, #7
    87a6:	d9eb      	bls.n	8780 <usb_init+0x248>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    87a8:	2300      	movs	r3, #0
    87aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    87ac:	e008      	b.n	87c0 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    87ae:	68fb      	ldr	r3, [r7, #12]
    87b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    87b2:	322e      	adds	r2, #46	; 0x2e
    87b4:	0092      	lsls	r2, r2, #2
    87b6:	2100      	movs	r1, #0
    87b8:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    87ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87bc:	3301      	adds	r3, #1
    87be:	62fb      	str	r3, [r7, #44]	; 0x2c
    87c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87c2:	2b06      	cmp	r3, #6
    87c4:	d9f3      	bls.n	87ae <usb_init+0x276>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    87c6:	2300      	movs	r3, #0
    87c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    87ca:	e016      	b.n	87fa <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    87cc:	2300      	movs	r3, #0
    87ce:	62bb      	str	r3, [r7, #40]	; 0x28
    87d0:	e00d      	b.n	87ee <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    87d2:	68fa      	ldr	r2, [r7, #12]
    87d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87d6:	0099      	lsls	r1, r3, #2
    87d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    87da:	18cb      	adds	r3, r1, r3
    87dc:	3334      	adds	r3, #52	; 0x34
    87de:	009b      	lsls	r3, r3, #2
    87e0:	18d3      	adds	r3, r2, r3
    87e2:	3304      	adds	r3, #4
    87e4:	2200      	movs	r2, #0
    87e6:	601a      	str	r2, [r3, #0]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    87e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    87ea:	3301      	adds	r3, #1
    87ec:	62bb      	str	r3, [r7, #40]	; 0x28
    87ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    87f0:	2b03      	cmp	r3, #3
    87f2:	d9ee      	bls.n	87d2 <usb_init+0x29a>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    87f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87f6:	3301      	adds	r3, #1
    87f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    87fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87fc:	2b07      	cmp	r3, #7
    87fe:	d9e5      	bls.n	87cc <usb_init+0x294>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    8800:	68fa      	ldr	r2, [r7, #12]
    8802:	23aa      	movs	r3, #170	; 0xaa
    8804:	005b      	lsls	r3, r3, #1
    8806:	2100      	movs	r1, #0
    8808:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    880a:	68fa      	ldr	r2, [r7, #12]
    880c:	23ab      	movs	r3, #171	; 0xab
    880e:	005b      	lsls	r3, r3, #1
    8810:	2100      	movs	r1, #0
    8812:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    8814:	2300      	movs	r3, #0
    8816:	62bb      	str	r3, [r7, #40]	; 0x28
    8818:	e012      	b.n	8840 <usb_init+0x308>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    881a:	68f9      	ldr	r1, [r7, #12]
    881c:	23ac      	movs	r3, #172	; 0xac
    881e:	005b      	lsls	r3, r3, #1
    8820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8822:	188a      	adds	r2, r1, r2
    8824:	18d3      	adds	r3, r2, r3
    8826:	2200      	movs	r2, #0
    8828:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    882a:	68f9      	ldr	r1, [r7, #12]
    882c:	23b0      	movs	r3, #176	; 0xb0
    882e:	005b      	lsls	r3, r3, #1
    8830:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8832:	188a      	adds	r2, r1, r2
    8834:	18d3      	adds	r3, r2, r3
    8836:	2200      	movs	r2, #0
    8838:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    883c:	3301      	adds	r3, #1
    883e:	62bb      	str	r3, [r7, #40]	; 0x28
    8840:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8842:	2b07      	cmp	r3, #7
    8844:	d9e9      	bls.n	881a <usb_init+0x2e2>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    8846:	2007      	movs	r0, #7
    8848:	4b11      	ldr	r3, [pc, #68]	; (8890 <usb_init+0x358>)
    884a:	4798      	blx	r3

	return STATUS_OK;
    884c:	2300      	movs	r3, #0
}
    884e:	0018      	movs	r0, r3
    8850:	46bd      	mov	sp, r7
    8852:	b00c      	add	sp, #48	; 0x30
    8854:	bd80      	pop	{r7, pc}
    8856:	46c0      	nop			; (mov r8, r8)
    8858:	2000022c 	.word	0x2000022c
    885c:	20000214 	.word	0x20000214
    8860:	00006b25 	.word	0x00006b25
    8864:	00006b81 	.word	0x00006b81
    8868:	00005285 	.word	0x00005285
    886c:	00006b0d 	.word	0x00006b0d
    8870:	00004f99 	.word	0x00004f99
    8874:	00004fdd 	.word	0x00004fdd
    8878:	41005000 	.word	0x41005000
    887c:	00806024 	.word	0x00806024
    8880:	fffff83f 	.word	0xfffff83f
    8884:	ffff8fff 	.word	0xffff8fff
    8888:	200004fc 	.word	0x200004fc
    888c:	00008fdf 	.word	0x00008fdf
    8890:	00006ba9 	.word	0x00006ba9

00008894 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8894:	b580      	push	{r7, lr}
    8896:	b082      	sub	sp, #8
    8898:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    889a:	4b2f      	ldr	r3, [pc, #188]	; (8958 <Reset_Handler+0xc4>)
    889c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    889e:	4b2f      	ldr	r3, [pc, #188]	; (895c <Reset_Handler+0xc8>)
    88a0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    88a2:	687a      	ldr	r2, [r7, #4]
    88a4:	683b      	ldr	r3, [r7, #0]
    88a6:	429a      	cmp	r2, r3
    88a8:	d00c      	beq.n	88c4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    88aa:	e007      	b.n	88bc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    88ac:	683b      	ldr	r3, [r7, #0]
    88ae:	1d1a      	adds	r2, r3, #4
    88b0:	603a      	str	r2, [r7, #0]
    88b2:	687a      	ldr	r2, [r7, #4]
    88b4:	1d11      	adds	r1, r2, #4
    88b6:	6079      	str	r1, [r7, #4]
    88b8:	6812      	ldr	r2, [r2, #0]
    88ba:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    88bc:	683a      	ldr	r2, [r7, #0]
    88be:	4b28      	ldr	r3, [pc, #160]	; (8960 <Reset_Handler+0xcc>)
    88c0:	429a      	cmp	r2, r3
    88c2:	d3f3      	bcc.n	88ac <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    88c4:	4b27      	ldr	r3, [pc, #156]	; (8964 <Reset_Handler+0xd0>)
    88c6:	603b      	str	r3, [r7, #0]
    88c8:	e004      	b.n	88d4 <Reset_Handler+0x40>
                *pDest++ = 0;
    88ca:	683b      	ldr	r3, [r7, #0]
    88cc:	1d1a      	adds	r2, r3, #4
    88ce:	603a      	str	r2, [r7, #0]
    88d0:	2200      	movs	r2, #0
    88d2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    88d4:	683a      	ldr	r2, [r7, #0]
    88d6:	4b24      	ldr	r3, [pc, #144]	; (8968 <Reset_Handler+0xd4>)
    88d8:	429a      	cmp	r2, r3
    88da:	d3f6      	bcc.n	88ca <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    88dc:	4b23      	ldr	r3, [pc, #140]	; (896c <Reset_Handler+0xd8>)
    88de:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    88e0:	4b23      	ldr	r3, [pc, #140]	; (8970 <Reset_Handler+0xdc>)
    88e2:	687a      	ldr	r2, [r7, #4]
    88e4:	21ff      	movs	r1, #255	; 0xff
    88e6:	438a      	bics	r2, r1
    88e8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    88ea:	4a22      	ldr	r2, [pc, #136]	; (8974 <Reset_Handler+0xe0>)
    88ec:	2390      	movs	r3, #144	; 0x90
    88ee:	005b      	lsls	r3, r3, #1
    88f0:	2102      	movs	r1, #2
    88f2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    88f4:	4a20      	ldr	r2, [pc, #128]	; (8978 <Reset_Handler+0xe4>)
    88f6:	78d3      	ldrb	r3, [r2, #3]
    88f8:	2103      	movs	r1, #3
    88fa:	438b      	bics	r3, r1
    88fc:	1c19      	adds	r1, r3, #0
    88fe:	2302      	movs	r3, #2
    8900:	430b      	orrs	r3, r1
    8902:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8904:	4a1c      	ldr	r2, [pc, #112]	; (8978 <Reset_Handler+0xe4>)
    8906:	78d3      	ldrb	r3, [r2, #3]
    8908:	210c      	movs	r1, #12
    890a:	438b      	bics	r3, r1
    890c:	1c19      	adds	r1, r3, #0
    890e:	2308      	movs	r3, #8
    8910:	430b      	orrs	r3, r1
    8912:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    8914:	4a19      	ldr	r2, [pc, #100]	; (897c <Reset_Handler+0xe8>)
    8916:	7b93      	ldrb	r3, [r2, #14]
    8918:	2130      	movs	r1, #48	; 0x30
    891a:	438b      	bics	r3, r1
    891c:	1c19      	adds	r1, r3, #0
    891e:	2320      	movs	r3, #32
    8920:	430b      	orrs	r3, r1
    8922:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8924:	4a15      	ldr	r2, [pc, #84]	; (897c <Reset_Handler+0xe8>)
    8926:	7b93      	ldrb	r3, [r2, #14]
    8928:	210c      	movs	r1, #12
    892a:	438b      	bics	r3, r1
    892c:	1c19      	adds	r1, r3, #0
    892e:	2308      	movs	r3, #8
    8930:	430b      	orrs	r3, r1
    8932:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8934:	4a11      	ldr	r2, [pc, #68]	; (897c <Reset_Handler+0xe8>)
    8936:	7b93      	ldrb	r3, [r2, #14]
    8938:	2103      	movs	r1, #3
    893a:	438b      	bics	r3, r1
    893c:	1c19      	adds	r1, r3, #0
    893e:	2302      	movs	r3, #2
    8940:	430b      	orrs	r3, r1
    8942:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    8944:	4a0e      	ldr	r2, [pc, #56]	; (8980 <Reset_Handler+0xec>)
    8946:	6853      	ldr	r3, [r2, #4]
    8948:	2180      	movs	r1, #128	; 0x80
    894a:	430b      	orrs	r3, r1
    894c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    894e:	4b0d      	ldr	r3, [pc, #52]	; (8984 <Reset_Handler+0xf0>)
    8950:	4798      	blx	r3

        /* Branch to main function */
        main();
    8952:	4b0d      	ldr	r3, [pc, #52]	; (8988 <Reset_Handler+0xf4>)
    8954:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8956:	e7fe      	b.n	8956 <Reset_Handler+0xc2>
    8958:	00009110 	.word	0x00009110
    895c:	20000000 	.word	0x20000000
    8960:	200000e0 	.word	0x200000e0
    8964:	200000e0 	.word	0x200000e0
    8968:	200005fc 	.word	0x200005fc
    896c:	00000000 	.word	0x00000000
    8970:	e000ed00 	.word	0xe000ed00
    8974:	41007000 	.word	0x41007000
    8978:	41005000 	.word	0x41005000
    897c:	41004800 	.word	0x41004800
    8980:	41004000 	.word	0x41004000
    8984:	00008f81 	.word	0x00008f81
    8988:	00008b21 	.word	0x00008b21

0000898c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    898c:	b580      	push	{r7, lr}
    898e:	af00      	add	r7, sp, #0
        while (1) {
        }
    8990:	e7fe      	b.n	8990 <Dummy_Handler+0x4>
    8992:	46c0      	nop			; (mov r8, r8)

00008994 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    8994:	b580      	push	{r7, lr}
    8996:	b082      	sub	sp, #8
    8998:	af00      	add	r7, sp, #0
    899a:	0002      	movs	r2, r0
    899c:	1dfb      	adds	r3, r7, #7
    899e:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    89a0:	4a13      	ldr	r2, [pc, #76]	; (89f0 <system_set_sleepmode+0x5c>)
    89a2:	6853      	ldr	r3, [r2, #4]
    89a4:	21c0      	movs	r1, #192	; 0xc0
    89a6:	0089      	lsls	r1, r1, #2
    89a8:	430b      	orrs	r3, r1
    89aa:	6053      	str	r3, [r2, #4]
#endif

	switch (sleep_mode) {
    89ac:	1dfb      	adds	r3, r7, #7
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	2b00      	cmp	r3, #0
    89b2:	db16      	blt.n	89e2 <system_set_sleepmode+0x4e>
    89b4:	2b02      	cmp	r3, #2
    89b6:	dd02      	ble.n	89be <system_set_sleepmode+0x2a>
    89b8:	2b03      	cmp	r3, #3
    89ba:	d00b      	beq.n	89d4 <system_set_sleepmode+0x40>
    89bc:	e011      	b.n	89e2 <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    89be:	4b0d      	ldr	r3, [pc, #52]	; (89f4 <system_set_sleepmode+0x60>)
    89c0:	4a0c      	ldr	r2, [pc, #48]	; (89f4 <system_set_sleepmode+0x60>)
    89c2:	6912      	ldr	r2, [r2, #16]
    89c4:	2104      	movs	r1, #4
    89c6:	438a      	bics	r2, r1
    89c8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    89ca:	4a0b      	ldr	r2, [pc, #44]	; (89f8 <system_set_sleepmode+0x64>)
    89cc:	1dfb      	adds	r3, r7, #7
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	7053      	strb	r3, [r2, #1]
			break;
    89d2:	e008      	b.n	89e6 <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    89d4:	4b07      	ldr	r3, [pc, #28]	; (89f4 <system_set_sleepmode+0x60>)
    89d6:	4a07      	ldr	r2, [pc, #28]	; (89f4 <system_set_sleepmode+0x60>)
    89d8:	6912      	ldr	r2, [r2, #16]
    89da:	2104      	movs	r1, #4
    89dc:	430a      	orrs	r2, r1
    89de:	611a      	str	r2, [r3, #16]
			break;
    89e0:	e001      	b.n	89e6 <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    89e2:	2317      	movs	r3, #23
    89e4:	e000      	b.n	89e8 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    89e6:	2300      	movs	r3, #0
}
    89e8:	0018      	movs	r0, r3
    89ea:	46bd      	mov	sp, r7
    89ec:	b002      	add	sp, #8
    89ee:	bd80      	pop	{r7, pc}
    89f0:	41004000 	.word	0x41004000
    89f4:	e000ed00 	.word	0xe000ed00
    89f8:	40000400 	.word	0x40000400

000089fc <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    8a00:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    8a04:	bf30      	wfi
	__DSB();
	__WFI();
}
    8a06:	46c0      	nop			; (mov r8, r8)
    8a08:	46bd      	mov	sp, r7
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    8a0c:	b580      	push	{r7, lr}
    8a0e:	b082      	sub	sp, #8
    8a10:	af00      	add	r7, sp, #0
    8a12:	0002      	movs	r2, r0
    8a14:	1dfb      	adds	r3, r7, #7
    8a16:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8a18:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8a1a:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    8a1e:	4b0b      	ldr	r3, [pc, #44]	; (8a4c <sleepmgr_sleep+0x40>)
    8a20:	2200      	movs	r2, #0
    8a22:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    8a24:	1dfb      	adds	r3, r7, #7
    8a26:	781b      	ldrb	r3, [r3, #0]
    8a28:	3b01      	subs	r3, #1
    8a2a:	b2db      	uxtb	r3, r3
    8a2c:	0018      	movs	r0, r3
    8a2e:	4b08      	ldr	r3, [pc, #32]	; (8a50 <sleepmgr_sleep+0x44>)
    8a30:	4798      	blx	r3
	cpu_irq_enable();
    8a32:	4b06      	ldr	r3, [pc, #24]	; (8a4c <sleepmgr_sleep+0x40>)
    8a34:	2201      	movs	r2, #1
    8a36:	701a      	strb	r2, [r3, #0]
    8a38:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8a3c:	b662      	cpsie	i
	system_sleep();
    8a3e:	4b05      	ldr	r3, [pc, #20]	; (8a54 <sleepmgr_sleep+0x48>)
    8a40:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8a42:	46c0      	nop			; (mov r8, r8)
    8a44:	46bd      	mov	sp, r7
    8a46:	b002      	add	sp, #8
    8a48:	bd80      	pop	{r7, pc}
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	200000dc 	.word	0x200000dc
    8a50:	00008995 	.word	0x00008995
    8a54:	000089fd 	.word	0x000089fd

00008a58 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    8a58:	b580      	push	{r7, lr}
    8a5a:	b082      	sub	sp, #8
    8a5c:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    8a5e:	1dfb      	adds	r3, r7, #7
    8a60:	2200      	movs	r2, #0
    8a62:	701a      	strb	r2, [r3, #0]
    8a64:	e009      	b.n	8a7a <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    8a66:	1dfb      	adds	r3, r7, #7
    8a68:	781b      	ldrb	r3, [r3, #0]
    8a6a:	4a09      	ldr	r2, [pc, #36]	; (8a90 <sleepmgr_init+0x38>)
    8a6c:	2100      	movs	r1, #0
    8a6e:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    8a70:	1dfb      	adds	r3, r7, #7
    8a72:	781a      	ldrb	r2, [r3, #0]
    8a74:	1dfb      	adds	r3, r7, #7
    8a76:	3201      	adds	r2, #1
    8a78:	701a      	strb	r2, [r3, #0]
    8a7a:	1dfb      	adds	r3, r7, #7
    8a7c:	781b      	ldrb	r3, [r3, #0]
    8a7e:	2b03      	cmp	r3, #3
    8a80:	d9f1      	bls.n	8a66 <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    8a82:	4b03      	ldr	r3, [pc, #12]	; (8a90 <sleepmgr_init+0x38>)
    8a84:	2201      	movs	r2, #1
    8a86:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8a88:	46c0      	nop			; (mov r8, r8)
    8a8a:	46bd      	mov	sp, r7
    8a8c:	b002      	add	sp, #8
    8a8e:	bd80      	pop	{r7, pc}
    8a90:	200002ec 	.word	0x200002ec

00008a94 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    8a94:	b580      	push	{r7, lr}
    8a96:	b082      	sub	sp, #8
    8a98:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    8a9a:	1dfb      	adds	r3, r7, #7
    8a9c:	2200      	movs	r2, #0
    8a9e:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    8aa0:	4b0a      	ldr	r3, [pc, #40]	; (8acc <sleepmgr_get_sleep_mode+0x38>)
    8aa2:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8aa4:	e007      	b.n	8ab6 <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    8aa6:	683b      	ldr	r3, [r7, #0]
    8aa8:	3301      	adds	r3, #1
    8aaa:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    8aac:	1dfb      	adds	r3, r7, #7
    8aae:	1dfa      	adds	r2, r7, #7
    8ab0:	7812      	ldrb	r2, [r2, #0]
    8ab2:	3201      	adds	r2, #1
    8ab4:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8ab6:	683b      	ldr	r3, [r7, #0]
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	2b00      	cmp	r3, #0
    8abc:	d0f3      	beq.n	8aa6 <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    8abe:	1dfb      	adds	r3, r7, #7
    8ac0:	781b      	ldrb	r3, [r3, #0]
}
    8ac2:	0018      	movs	r0, r3
    8ac4:	46bd      	mov	sp, r7
    8ac6:	b002      	add	sp, #8
    8ac8:	bd80      	pop	{r7, pc}
    8aca:	46c0      	nop			; (mov r8, r8)
    8acc:	200002ec 	.word	0x200002ec

00008ad0 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    8ad0:	b590      	push	{r4, r7, lr}
    8ad2:	b083      	sub	sp, #12
    8ad4:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8ad6:	b672      	cpsid	i
    8ad8:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    8adc:	4b0d      	ldr	r3, [pc, #52]	; (8b14 <sleepmgr_enter_sleep+0x44>)
    8ade:	2200      	movs	r2, #0
    8ae0:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    8ae2:	1dfc      	adds	r4, r7, #7
    8ae4:	4b0c      	ldr	r3, [pc, #48]	; (8b18 <sleepmgr_enter_sleep+0x48>)
    8ae6:	4798      	blx	r3
    8ae8:	0003      	movs	r3, r0
    8aea:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    8aec:	1dfb      	adds	r3, r7, #7
    8aee:	781b      	ldrb	r3, [r3, #0]
    8af0:	2b00      	cmp	r3, #0
    8af2:	d106      	bne.n	8b02 <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    8af4:	4b07      	ldr	r3, [pc, #28]	; (8b14 <sleepmgr_enter_sleep+0x44>)
    8af6:	2201      	movs	r2, #1
    8af8:	701a      	strb	r2, [r3, #0]
    8afa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8afe:	b662      	cpsie	i
		return;
    8b00:	e004      	b.n	8b0c <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    8b02:	1dfb      	adds	r3, r7, #7
    8b04:	781b      	ldrb	r3, [r3, #0]
    8b06:	0018      	movs	r0, r3
    8b08:	4b04      	ldr	r3, [pc, #16]	; (8b1c <sleepmgr_enter_sleep+0x4c>)
    8b0a:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8b0c:	46bd      	mov	sp, r7
    8b0e:	b003      	add	sp, #12
    8b10:	bd90      	pop	{r4, r7, pc}
    8b12:	46c0      	nop			; (mov r8, r8)
    8b14:	200000dc 	.word	0x200000dc
    8b18:	00008a95 	.word	0x00008a95
    8b1c:	00008a0d 	.word	0x00008a0d

00008b20 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    8b24:	4b09      	ldr	r3, [pc, #36]	; (8b4c <main+0x2c>)
    8b26:	2201      	movs	r2, #1
    8b28:	701a      	strb	r2, [r3, #0]
    8b2a:	f3bf 8f5f 	dmb	sy
    8b2e:	b662      	cpsie	i
	system_init();
    8b30:	4b07      	ldr	r3, [pc, #28]	; (8b50 <main+0x30>)
    8b32:	4798      	blx	r3

	// Initialize the sleep manager
	sleepmgr_init();
    8b34:	4b07      	ldr	r3, [pc, #28]	; (8b54 <main+0x34>)
    8b36:	4798      	blx	r3
	ui_init();
    8b38:	4b07      	ldr	r3, [pc, #28]	; (8b58 <main+0x38>)
    8b3a:	4798      	blx	r3
	ui_powerdown();
    8b3c:	4b07      	ldr	r3, [pc, #28]	; (8b5c <main+0x3c>)
    8b3e:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    8b40:	4b07      	ldr	r3, [pc, #28]	; (8b60 <main+0x40>)
    8b42:	4798      	blx	r3
				static uint16_t virtual_sof = 0;
				ui_process(virtual_sof++);
			}
		}
#else /* #ifdef USB_DEVICE_LOW_SPEED */
		sleepmgr_enter_sleep();
    8b44:	4b07      	ldr	r3, [pc, #28]	; (8b64 <main+0x44>)
    8b46:	4798      	blx	r3
#endif
	}
    8b48:	e7fc      	b.n	8b44 <main+0x24>
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	200000dc 	.word	0x200000dc
    8b50:	000052d9 	.word	0x000052d9
    8b54:	00008a59 	.word	0x00008a59
    8b58:	000026d5 	.word	0x000026d5
    8b5c:	000026f5 	.word	0x000026f5
    8b60:	000032f1 	.word	0x000032f1
    8b64:	00008ad1 	.word	0x00008ad1

00008b68 <main_suspend_action>:
}

void main_suspend_action(void)
{
    8b68:	b580      	push	{r7, lr}
    8b6a:	af00      	add	r7, sp, #0
	ui_powerdown();
    8b6c:	4b02      	ldr	r3, [pc, #8]	; (8b78 <main_suspend_action+0x10>)
    8b6e:	4798      	blx	r3
}
    8b70:	46c0      	nop			; (mov r8, r8)
    8b72:	46bd      	mov	sp, r7
    8b74:	bd80      	pop	{r7, pc}
    8b76:	46c0      	nop			; (mov r8, r8)
    8b78:	000026f5 	.word	0x000026f5

00008b7c <main_resume_action>:

void main_resume_action(void)
{
    8b7c:	b580      	push	{r7, lr}
    8b7e:	af00      	add	r7, sp, #0
	ui_wakeup();
    8b80:	4b02      	ldr	r3, [pc, #8]	; (8b8c <main_resume_action+0x10>)
    8b82:	4798      	blx	r3
}
    8b84:	46c0      	nop			; (mov r8, r8)
    8b86:	46bd      	mov	sp, r7
    8b88:	bd80      	pop	{r7, pc}
    8b8a:	46c0      	nop			; (mov r8, r8)
    8b8c:	0000273d 	.word	0x0000273d

00008b90 <main_sof_action>:

void main_sof_action(void)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	af00      	add	r7, sp, #0
	if (!main_b_mouse_enable)
    8b94:	4b08      	ldr	r3, [pc, #32]	; (8bb8 <main_sof_action+0x28>)
    8b96:	781b      	ldrb	r3, [r3, #0]
    8b98:	b2db      	uxtb	r3, r3
    8b9a:	2201      	movs	r2, #1
    8b9c:	4053      	eors	r3, r2
    8b9e:	b2db      	uxtb	r3, r3
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d106      	bne.n	8bb2 <main_sof_action+0x22>
		return;
	ui_process(udd_get_frame_number());
    8ba4:	4b05      	ldr	r3, [pc, #20]	; (8bbc <main_sof_action+0x2c>)
    8ba6:	4798      	blx	r3
    8ba8:	0003      	movs	r3, r0
    8baa:	0018      	movs	r0, r3
    8bac:	4b04      	ldr	r3, [pc, #16]	; (8bc0 <main_sof_action+0x30>)
    8bae:	4798      	blx	r3
    8bb0:	e000      	b.n	8bb4 <main_sof_action+0x24>
}

void main_sof_action(void)
{
	if (!main_b_mouse_enable)
		return;
    8bb2:	46c0      	nop			; (mov r8, r8)
	ui_process(udd_get_frame_number());
}
    8bb4:	46bd      	mov	sp, r7
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	20000230 	.word	0x20000230
    8bbc:	00005ae9 	.word	0x00005ae9
    8bc0:	00002755 	.word	0x00002755

00008bc4 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    8bc4:	b580      	push	{r7, lr}
    8bc6:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8bc8:	4b02      	ldr	r3, [pc, #8]	; (8bd4 <main_remotewakeup_enable+0x10>)
    8bca:	4798      	blx	r3
}
    8bcc:	46c0      	nop			; (mov r8, r8)
    8bce:	46bd      	mov	sp, r7
    8bd0:	bd80      	pop	{r7, pc}
    8bd2:	46c0      	nop			; (mov r8, r8)
    8bd4:	0000270d 	.word	0x0000270d

00008bd8 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    8bd8:	b580      	push	{r7, lr}
    8bda:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8bdc:	4b02      	ldr	r3, [pc, #8]	; (8be8 <main_remotewakeup_disable+0x10>)
    8bde:	4798      	blx	r3
}
    8be0:	46c0      	nop			; (mov r8, r8)
    8be2:	46bd      	mov	sp, r7
    8be4:	bd80      	pop	{r7, pc}
    8be6:	46c0      	nop			; (mov r8, r8)
    8be8:	00002725 	.word	0x00002725

00008bec <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    8bec:	b580      	push	{r7, lr}
    8bee:	af00      	add	r7, sp, #0
	ui_powerdown();
    8bf0:	4b02      	ldr	r3, [pc, #8]	; (8bfc <main_suspend_lpm_action+0x10>)
    8bf2:	4798      	blx	r3
}
    8bf4:	46c0      	nop			; (mov r8, r8)
    8bf6:	46bd      	mov	sp, r7
    8bf8:	bd80      	pop	{r7, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	000026f5 	.word	0x000026f5

00008c00 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8c04:	4b02      	ldr	r3, [pc, #8]	; (8c10 <main_remotewakeup_lpm_disable+0x10>)
    8c06:	4798      	blx	r3
}
    8c08:	46c0      	nop			; (mov r8, r8)
    8c0a:	46bd      	mov	sp, r7
    8c0c:	bd80      	pop	{r7, pc}
    8c0e:	46c0      	nop			; (mov r8, r8)
    8c10:	00002725 	.word	0x00002725

00008c14 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8c18:	4b02      	ldr	r3, [pc, #8]	; (8c24 <main_remotewakeup_lpm_enable+0x10>)
    8c1a:	4798      	blx	r3
}
    8c1c:	46c0      	nop			; (mov r8, r8)
    8c1e:	46bd      	mov	sp, r7
    8c20:	bd80      	pop	{r7, pc}
    8c22:	46c0      	nop			; (mov r8, r8)
    8c24:	0000270d 	.word	0x0000270d

00008c28 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    8c2c:	4b03      	ldr	r3, [pc, #12]	; (8c3c <main_mouse_enable+0x14>)
    8c2e:	2201      	movs	r2, #1
    8c30:	701a      	strb	r2, [r3, #0]
	return true;
    8c32:	2301      	movs	r3, #1
}
    8c34:	0018      	movs	r0, r3
    8c36:	46bd      	mov	sp, r7
    8c38:	bd80      	pop	{r7, pc}
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	20000230 	.word	0x20000230

00008c40 <main_mouse_disable>:

void main_mouse_disable(void)
{
    8c40:	b580      	push	{r7, lr}
    8c42:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    8c44:	4b02      	ldr	r3, [pc, #8]	; (8c50 <main_mouse_disable+0x10>)
    8c46:	2200      	movs	r2, #0
    8c48:	701a      	strb	r2, [r3, #0]
}
    8c4a:	46c0      	nop			; (mov r8, r8)
    8c4c:	46bd      	mov	sp, r7
    8c4e:	bd80      	pop	{r7, pc}
    8c50:	20000230 	.word	0x20000230

00008c54 <__aeabi_uidiv>:
    8c54:	2200      	movs	r2, #0
    8c56:	0843      	lsrs	r3, r0, #1
    8c58:	428b      	cmp	r3, r1
    8c5a:	d374      	bcc.n	8d46 <__aeabi_uidiv+0xf2>
    8c5c:	0903      	lsrs	r3, r0, #4
    8c5e:	428b      	cmp	r3, r1
    8c60:	d35f      	bcc.n	8d22 <__aeabi_uidiv+0xce>
    8c62:	0a03      	lsrs	r3, r0, #8
    8c64:	428b      	cmp	r3, r1
    8c66:	d344      	bcc.n	8cf2 <__aeabi_uidiv+0x9e>
    8c68:	0b03      	lsrs	r3, r0, #12
    8c6a:	428b      	cmp	r3, r1
    8c6c:	d328      	bcc.n	8cc0 <__aeabi_uidiv+0x6c>
    8c6e:	0c03      	lsrs	r3, r0, #16
    8c70:	428b      	cmp	r3, r1
    8c72:	d30d      	bcc.n	8c90 <__aeabi_uidiv+0x3c>
    8c74:	22ff      	movs	r2, #255	; 0xff
    8c76:	0209      	lsls	r1, r1, #8
    8c78:	ba12      	rev	r2, r2
    8c7a:	0c03      	lsrs	r3, r0, #16
    8c7c:	428b      	cmp	r3, r1
    8c7e:	d302      	bcc.n	8c86 <__aeabi_uidiv+0x32>
    8c80:	1212      	asrs	r2, r2, #8
    8c82:	0209      	lsls	r1, r1, #8
    8c84:	d065      	beq.n	8d52 <__aeabi_uidiv+0xfe>
    8c86:	0b03      	lsrs	r3, r0, #12
    8c88:	428b      	cmp	r3, r1
    8c8a:	d319      	bcc.n	8cc0 <__aeabi_uidiv+0x6c>
    8c8c:	e000      	b.n	8c90 <__aeabi_uidiv+0x3c>
    8c8e:	0a09      	lsrs	r1, r1, #8
    8c90:	0bc3      	lsrs	r3, r0, #15
    8c92:	428b      	cmp	r3, r1
    8c94:	d301      	bcc.n	8c9a <__aeabi_uidiv+0x46>
    8c96:	03cb      	lsls	r3, r1, #15
    8c98:	1ac0      	subs	r0, r0, r3
    8c9a:	4152      	adcs	r2, r2
    8c9c:	0b83      	lsrs	r3, r0, #14
    8c9e:	428b      	cmp	r3, r1
    8ca0:	d301      	bcc.n	8ca6 <__aeabi_uidiv+0x52>
    8ca2:	038b      	lsls	r3, r1, #14
    8ca4:	1ac0      	subs	r0, r0, r3
    8ca6:	4152      	adcs	r2, r2
    8ca8:	0b43      	lsrs	r3, r0, #13
    8caa:	428b      	cmp	r3, r1
    8cac:	d301      	bcc.n	8cb2 <__aeabi_uidiv+0x5e>
    8cae:	034b      	lsls	r3, r1, #13
    8cb0:	1ac0      	subs	r0, r0, r3
    8cb2:	4152      	adcs	r2, r2
    8cb4:	0b03      	lsrs	r3, r0, #12
    8cb6:	428b      	cmp	r3, r1
    8cb8:	d301      	bcc.n	8cbe <__aeabi_uidiv+0x6a>
    8cba:	030b      	lsls	r3, r1, #12
    8cbc:	1ac0      	subs	r0, r0, r3
    8cbe:	4152      	adcs	r2, r2
    8cc0:	0ac3      	lsrs	r3, r0, #11
    8cc2:	428b      	cmp	r3, r1
    8cc4:	d301      	bcc.n	8cca <__aeabi_uidiv+0x76>
    8cc6:	02cb      	lsls	r3, r1, #11
    8cc8:	1ac0      	subs	r0, r0, r3
    8cca:	4152      	adcs	r2, r2
    8ccc:	0a83      	lsrs	r3, r0, #10
    8cce:	428b      	cmp	r3, r1
    8cd0:	d301      	bcc.n	8cd6 <__aeabi_uidiv+0x82>
    8cd2:	028b      	lsls	r3, r1, #10
    8cd4:	1ac0      	subs	r0, r0, r3
    8cd6:	4152      	adcs	r2, r2
    8cd8:	0a43      	lsrs	r3, r0, #9
    8cda:	428b      	cmp	r3, r1
    8cdc:	d301      	bcc.n	8ce2 <__aeabi_uidiv+0x8e>
    8cde:	024b      	lsls	r3, r1, #9
    8ce0:	1ac0      	subs	r0, r0, r3
    8ce2:	4152      	adcs	r2, r2
    8ce4:	0a03      	lsrs	r3, r0, #8
    8ce6:	428b      	cmp	r3, r1
    8ce8:	d301      	bcc.n	8cee <__aeabi_uidiv+0x9a>
    8cea:	020b      	lsls	r3, r1, #8
    8cec:	1ac0      	subs	r0, r0, r3
    8cee:	4152      	adcs	r2, r2
    8cf0:	d2cd      	bcs.n	8c8e <__aeabi_uidiv+0x3a>
    8cf2:	09c3      	lsrs	r3, r0, #7
    8cf4:	428b      	cmp	r3, r1
    8cf6:	d301      	bcc.n	8cfc <__aeabi_uidiv+0xa8>
    8cf8:	01cb      	lsls	r3, r1, #7
    8cfa:	1ac0      	subs	r0, r0, r3
    8cfc:	4152      	adcs	r2, r2
    8cfe:	0983      	lsrs	r3, r0, #6
    8d00:	428b      	cmp	r3, r1
    8d02:	d301      	bcc.n	8d08 <__aeabi_uidiv+0xb4>
    8d04:	018b      	lsls	r3, r1, #6
    8d06:	1ac0      	subs	r0, r0, r3
    8d08:	4152      	adcs	r2, r2
    8d0a:	0943      	lsrs	r3, r0, #5
    8d0c:	428b      	cmp	r3, r1
    8d0e:	d301      	bcc.n	8d14 <__aeabi_uidiv+0xc0>
    8d10:	014b      	lsls	r3, r1, #5
    8d12:	1ac0      	subs	r0, r0, r3
    8d14:	4152      	adcs	r2, r2
    8d16:	0903      	lsrs	r3, r0, #4
    8d18:	428b      	cmp	r3, r1
    8d1a:	d301      	bcc.n	8d20 <__aeabi_uidiv+0xcc>
    8d1c:	010b      	lsls	r3, r1, #4
    8d1e:	1ac0      	subs	r0, r0, r3
    8d20:	4152      	adcs	r2, r2
    8d22:	08c3      	lsrs	r3, r0, #3
    8d24:	428b      	cmp	r3, r1
    8d26:	d301      	bcc.n	8d2c <__aeabi_uidiv+0xd8>
    8d28:	00cb      	lsls	r3, r1, #3
    8d2a:	1ac0      	subs	r0, r0, r3
    8d2c:	4152      	adcs	r2, r2
    8d2e:	0883      	lsrs	r3, r0, #2
    8d30:	428b      	cmp	r3, r1
    8d32:	d301      	bcc.n	8d38 <__aeabi_uidiv+0xe4>
    8d34:	008b      	lsls	r3, r1, #2
    8d36:	1ac0      	subs	r0, r0, r3
    8d38:	4152      	adcs	r2, r2
    8d3a:	0843      	lsrs	r3, r0, #1
    8d3c:	428b      	cmp	r3, r1
    8d3e:	d301      	bcc.n	8d44 <__aeabi_uidiv+0xf0>
    8d40:	004b      	lsls	r3, r1, #1
    8d42:	1ac0      	subs	r0, r0, r3
    8d44:	4152      	adcs	r2, r2
    8d46:	1a41      	subs	r1, r0, r1
    8d48:	d200      	bcs.n	8d4c <__aeabi_uidiv+0xf8>
    8d4a:	4601      	mov	r1, r0
    8d4c:	4152      	adcs	r2, r2
    8d4e:	4610      	mov	r0, r2
    8d50:	4770      	bx	lr
    8d52:	e7ff      	b.n	8d54 <__aeabi_uidiv+0x100>
    8d54:	b501      	push	{r0, lr}
    8d56:	2000      	movs	r0, #0
    8d58:	f000 f8f0 	bl	8f3c <__aeabi_idiv0>
    8d5c:	bd02      	pop	{r1, pc}
    8d5e:	46c0      	nop			; (mov r8, r8)

00008d60 <__aeabi_uidivmod>:
    8d60:	2900      	cmp	r1, #0
    8d62:	d0f7      	beq.n	8d54 <__aeabi_uidiv+0x100>
    8d64:	e776      	b.n	8c54 <__aeabi_uidiv>
    8d66:	4770      	bx	lr

00008d68 <__aeabi_idiv>:
    8d68:	4603      	mov	r3, r0
    8d6a:	430b      	orrs	r3, r1
    8d6c:	d47f      	bmi.n	8e6e <__aeabi_idiv+0x106>
    8d6e:	2200      	movs	r2, #0
    8d70:	0843      	lsrs	r3, r0, #1
    8d72:	428b      	cmp	r3, r1
    8d74:	d374      	bcc.n	8e60 <__aeabi_idiv+0xf8>
    8d76:	0903      	lsrs	r3, r0, #4
    8d78:	428b      	cmp	r3, r1
    8d7a:	d35f      	bcc.n	8e3c <__aeabi_idiv+0xd4>
    8d7c:	0a03      	lsrs	r3, r0, #8
    8d7e:	428b      	cmp	r3, r1
    8d80:	d344      	bcc.n	8e0c <__aeabi_idiv+0xa4>
    8d82:	0b03      	lsrs	r3, r0, #12
    8d84:	428b      	cmp	r3, r1
    8d86:	d328      	bcc.n	8dda <__aeabi_idiv+0x72>
    8d88:	0c03      	lsrs	r3, r0, #16
    8d8a:	428b      	cmp	r3, r1
    8d8c:	d30d      	bcc.n	8daa <__aeabi_idiv+0x42>
    8d8e:	22ff      	movs	r2, #255	; 0xff
    8d90:	0209      	lsls	r1, r1, #8
    8d92:	ba12      	rev	r2, r2
    8d94:	0c03      	lsrs	r3, r0, #16
    8d96:	428b      	cmp	r3, r1
    8d98:	d302      	bcc.n	8da0 <__aeabi_idiv+0x38>
    8d9a:	1212      	asrs	r2, r2, #8
    8d9c:	0209      	lsls	r1, r1, #8
    8d9e:	d065      	beq.n	8e6c <__aeabi_idiv+0x104>
    8da0:	0b03      	lsrs	r3, r0, #12
    8da2:	428b      	cmp	r3, r1
    8da4:	d319      	bcc.n	8dda <__aeabi_idiv+0x72>
    8da6:	e000      	b.n	8daa <__aeabi_idiv+0x42>
    8da8:	0a09      	lsrs	r1, r1, #8
    8daa:	0bc3      	lsrs	r3, r0, #15
    8dac:	428b      	cmp	r3, r1
    8dae:	d301      	bcc.n	8db4 <__aeabi_idiv+0x4c>
    8db0:	03cb      	lsls	r3, r1, #15
    8db2:	1ac0      	subs	r0, r0, r3
    8db4:	4152      	adcs	r2, r2
    8db6:	0b83      	lsrs	r3, r0, #14
    8db8:	428b      	cmp	r3, r1
    8dba:	d301      	bcc.n	8dc0 <__aeabi_idiv+0x58>
    8dbc:	038b      	lsls	r3, r1, #14
    8dbe:	1ac0      	subs	r0, r0, r3
    8dc0:	4152      	adcs	r2, r2
    8dc2:	0b43      	lsrs	r3, r0, #13
    8dc4:	428b      	cmp	r3, r1
    8dc6:	d301      	bcc.n	8dcc <__aeabi_idiv+0x64>
    8dc8:	034b      	lsls	r3, r1, #13
    8dca:	1ac0      	subs	r0, r0, r3
    8dcc:	4152      	adcs	r2, r2
    8dce:	0b03      	lsrs	r3, r0, #12
    8dd0:	428b      	cmp	r3, r1
    8dd2:	d301      	bcc.n	8dd8 <__aeabi_idiv+0x70>
    8dd4:	030b      	lsls	r3, r1, #12
    8dd6:	1ac0      	subs	r0, r0, r3
    8dd8:	4152      	adcs	r2, r2
    8dda:	0ac3      	lsrs	r3, r0, #11
    8ddc:	428b      	cmp	r3, r1
    8dde:	d301      	bcc.n	8de4 <__aeabi_idiv+0x7c>
    8de0:	02cb      	lsls	r3, r1, #11
    8de2:	1ac0      	subs	r0, r0, r3
    8de4:	4152      	adcs	r2, r2
    8de6:	0a83      	lsrs	r3, r0, #10
    8de8:	428b      	cmp	r3, r1
    8dea:	d301      	bcc.n	8df0 <__aeabi_idiv+0x88>
    8dec:	028b      	lsls	r3, r1, #10
    8dee:	1ac0      	subs	r0, r0, r3
    8df0:	4152      	adcs	r2, r2
    8df2:	0a43      	lsrs	r3, r0, #9
    8df4:	428b      	cmp	r3, r1
    8df6:	d301      	bcc.n	8dfc <__aeabi_idiv+0x94>
    8df8:	024b      	lsls	r3, r1, #9
    8dfa:	1ac0      	subs	r0, r0, r3
    8dfc:	4152      	adcs	r2, r2
    8dfe:	0a03      	lsrs	r3, r0, #8
    8e00:	428b      	cmp	r3, r1
    8e02:	d301      	bcc.n	8e08 <__aeabi_idiv+0xa0>
    8e04:	020b      	lsls	r3, r1, #8
    8e06:	1ac0      	subs	r0, r0, r3
    8e08:	4152      	adcs	r2, r2
    8e0a:	d2cd      	bcs.n	8da8 <__aeabi_idiv+0x40>
    8e0c:	09c3      	lsrs	r3, r0, #7
    8e0e:	428b      	cmp	r3, r1
    8e10:	d301      	bcc.n	8e16 <__aeabi_idiv+0xae>
    8e12:	01cb      	lsls	r3, r1, #7
    8e14:	1ac0      	subs	r0, r0, r3
    8e16:	4152      	adcs	r2, r2
    8e18:	0983      	lsrs	r3, r0, #6
    8e1a:	428b      	cmp	r3, r1
    8e1c:	d301      	bcc.n	8e22 <__aeabi_idiv+0xba>
    8e1e:	018b      	lsls	r3, r1, #6
    8e20:	1ac0      	subs	r0, r0, r3
    8e22:	4152      	adcs	r2, r2
    8e24:	0943      	lsrs	r3, r0, #5
    8e26:	428b      	cmp	r3, r1
    8e28:	d301      	bcc.n	8e2e <__aeabi_idiv+0xc6>
    8e2a:	014b      	lsls	r3, r1, #5
    8e2c:	1ac0      	subs	r0, r0, r3
    8e2e:	4152      	adcs	r2, r2
    8e30:	0903      	lsrs	r3, r0, #4
    8e32:	428b      	cmp	r3, r1
    8e34:	d301      	bcc.n	8e3a <__aeabi_idiv+0xd2>
    8e36:	010b      	lsls	r3, r1, #4
    8e38:	1ac0      	subs	r0, r0, r3
    8e3a:	4152      	adcs	r2, r2
    8e3c:	08c3      	lsrs	r3, r0, #3
    8e3e:	428b      	cmp	r3, r1
    8e40:	d301      	bcc.n	8e46 <__aeabi_idiv+0xde>
    8e42:	00cb      	lsls	r3, r1, #3
    8e44:	1ac0      	subs	r0, r0, r3
    8e46:	4152      	adcs	r2, r2
    8e48:	0883      	lsrs	r3, r0, #2
    8e4a:	428b      	cmp	r3, r1
    8e4c:	d301      	bcc.n	8e52 <__aeabi_idiv+0xea>
    8e4e:	008b      	lsls	r3, r1, #2
    8e50:	1ac0      	subs	r0, r0, r3
    8e52:	4152      	adcs	r2, r2
    8e54:	0843      	lsrs	r3, r0, #1
    8e56:	428b      	cmp	r3, r1
    8e58:	d301      	bcc.n	8e5e <__aeabi_idiv+0xf6>
    8e5a:	004b      	lsls	r3, r1, #1
    8e5c:	1ac0      	subs	r0, r0, r3
    8e5e:	4152      	adcs	r2, r2
    8e60:	1a41      	subs	r1, r0, r1
    8e62:	d200      	bcs.n	8e66 <__aeabi_idiv+0xfe>
    8e64:	4601      	mov	r1, r0
    8e66:	4152      	adcs	r2, r2
    8e68:	4610      	mov	r0, r2
    8e6a:	4770      	bx	lr
    8e6c:	e05d      	b.n	8f2a <__aeabi_idiv+0x1c2>
    8e6e:	0fca      	lsrs	r2, r1, #31
    8e70:	d000      	beq.n	8e74 <__aeabi_idiv+0x10c>
    8e72:	4249      	negs	r1, r1
    8e74:	1003      	asrs	r3, r0, #32
    8e76:	d300      	bcc.n	8e7a <__aeabi_idiv+0x112>
    8e78:	4240      	negs	r0, r0
    8e7a:	4053      	eors	r3, r2
    8e7c:	2200      	movs	r2, #0
    8e7e:	469c      	mov	ip, r3
    8e80:	0903      	lsrs	r3, r0, #4
    8e82:	428b      	cmp	r3, r1
    8e84:	d32d      	bcc.n	8ee2 <__aeabi_idiv+0x17a>
    8e86:	0a03      	lsrs	r3, r0, #8
    8e88:	428b      	cmp	r3, r1
    8e8a:	d312      	bcc.n	8eb2 <__aeabi_idiv+0x14a>
    8e8c:	22fc      	movs	r2, #252	; 0xfc
    8e8e:	0189      	lsls	r1, r1, #6
    8e90:	ba12      	rev	r2, r2
    8e92:	0a03      	lsrs	r3, r0, #8
    8e94:	428b      	cmp	r3, r1
    8e96:	d30c      	bcc.n	8eb2 <__aeabi_idiv+0x14a>
    8e98:	0189      	lsls	r1, r1, #6
    8e9a:	1192      	asrs	r2, r2, #6
    8e9c:	428b      	cmp	r3, r1
    8e9e:	d308      	bcc.n	8eb2 <__aeabi_idiv+0x14a>
    8ea0:	0189      	lsls	r1, r1, #6
    8ea2:	1192      	asrs	r2, r2, #6
    8ea4:	428b      	cmp	r3, r1
    8ea6:	d304      	bcc.n	8eb2 <__aeabi_idiv+0x14a>
    8ea8:	0189      	lsls	r1, r1, #6
    8eaa:	d03a      	beq.n	8f22 <__aeabi_idiv+0x1ba>
    8eac:	1192      	asrs	r2, r2, #6
    8eae:	e000      	b.n	8eb2 <__aeabi_idiv+0x14a>
    8eb0:	0989      	lsrs	r1, r1, #6
    8eb2:	09c3      	lsrs	r3, r0, #7
    8eb4:	428b      	cmp	r3, r1
    8eb6:	d301      	bcc.n	8ebc <__aeabi_idiv+0x154>
    8eb8:	01cb      	lsls	r3, r1, #7
    8eba:	1ac0      	subs	r0, r0, r3
    8ebc:	4152      	adcs	r2, r2
    8ebe:	0983      	lsrs	r3, r0, #6
    8ec0:	428b      	cmp	r3, r1
    8ec2:	d301      	bcc.n	8ec8 <__aeabi_idiv+0x160>
    8ec4:	018b      	lsls	r3, r1, #6
    8ec6:	1ac0      	subs	r0, r0, r3
    8ec8:	4152      	adcs	r2, r2
    8eca:	0943      	lsrs	r3, r0, #5
    8ecc:	428b      	cmp	r3, r1
    8ece:	d301      	bcc.n	8ed4 <__aeabi_idiv+0x16c>
    8ed0:	014b      	lsls	r3, r1, #5
    8ed2:	1ac0      	subs	r0, r0, r3
    8ed4:	4152      	adcs	r2, r2
    8ed6:	0903      	lsrs	r3, r0, #4
    8ed8:	428b      	cmp	r3, r1
    8eda:	d301      	bcc.n	8ee0 <__aeabi_idiv+0x178>
    8edc:	010b      	lsls	r3, r1, #4
    8ede:	1ac0      	subs	r0, r0, r3
    8ee0:	4152      	adcs	r2, r2
    8ee2:	08c3      	lsrs	r3, r0, #3
    8ee4:	428b      	cmp	r3, r1
    8ee6:	d301      	bcc.n	8eec <__aeabi_idiv+0x184>
    8ee8:	00cb      	lsls	r3, r1, #3
    8eea:	1ac0      	subs	r0, r0, r3
    8eec:	4152      	adcs	r2, r2
    8eee:	0883      	lsrs	r3, r0, #2
    8ef0:	428b      	cmp	r3, r1
    8ef2:	d301      	bcc.n	8ef8 <__aeabi_idiv+0x190>
    8ef4:	008b      	lsls	r3, r1, #2
    8ef6:	1ac0      	subs	r0, r0, r3
    8ef8:	4152      	adcs	r2, r2
    8efa:	d2d9      	bcs.n	8eb0 <__aeabi_idiv+0x148>
    8efc:	0843      	lsrs	r3, r0, #1
    8efe:	428b      	cmp	r3, r1
    8f00:	d301      	bcc.n	8f06 <__aeabi_idiv+0x19e>
    8f02:	004b      	lsls	r3, r1, #1
    8f04:	1ac0      	subs	r0, r0, r3
    8f06:	4152      	adcs	r2, r2
    8f08:	1a41      	subs	r1, r0, r1
    8f0a:	d200      	bcs.n	8f0e <__aeabi_idiv+0x1a6>
    8f0c:	4601      	mov	r1, r0
    8f0e:	4663      	mov	r3, ip
    8f10:	4152      	adcs	r2, r2
    8f12:	105b      	asrs	r3, r3, #1
    8f14:	4610      	mov	r0, r2
    8f16:	d301      	bcc.n	8f1c <__aeabi_idiv+0x1b4>
    8f18:	4240      	negs	r0, r0
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d500      	bpl.n	8f20 <__aeabi_idiv+0x1b8>
    8f1e:	4249      	negs	r1, r1
    8f20:	4770      	bx	lr
    8f22:	4663      	mov	r3, ip
    8f24:	105b      	asrs	r3, r3, #1
    8f26:	d300      	bcc.n	8f2a <__aeabi_idiv+0x1c2>
    8f28:	4240      	negs	r0, r0
    8f2a:	b501      	push	{r0, lr}
    8f2c:	2000      	movs	r0, #0
    8f2e:	f000 f805 	bl	8f3c <__aeabi_idiv0>
    8f32:	bd02      	pop	{r1, pc}

00008f34 <__aeabi_idivmod>:
    8f34:	2900      	cmp	r1, #0
    8f36:	d0f8      	beq.n	8f2a <__aeabi_idiv+0x1c2>
    8f38:	e716      	b.n	8d68 <__aeabi_idiv>
    8f3a:	4770      	bx	lr

00008f3c <__aeabi_idiv0>:
    8f3c:	4770      	bx	lr
    8f3e:	46c0      	nop			; (mov r8, r8)

00008f40 <__ctzsi2>:
    8f40:	4241      	negs	r1, r0
    8f42:	4008      	ands	r0, r1
    8f44:	211c      	movs	r1, #28
    8f46:	2301      	movs	r3, #1
    8f48:	041b      	lsls	r3, r3, #16
    8f4a:	4298      	cmp	r0, r3
    8f4c:	d301      	bcc.n	8f52 <__ctzsi2+0x12>
    8f4e:	0c00      	lsrs	r0, r0, #16
    8f50:	3910      	subs	r1, #16
    8f52:	0a1b      	lsrs	r3, r3, #8
    8f54:	4298      	cmp	r0, r3
    8f56:	d301      	bcc.n	8f5c <__ctzsi2+0x1c>
    8f58:	0a00      	lsrs	r0, r0, #8
    8f5a:	3908      	subs	r1, #8
    8f5c:	091b      	lsrs	r3, r3, #4
    8f5e:	4298      	cmp	r0, r3
    8f60:	d301      	bcc.n	8f66 <__ctzsi2+0x26>
    8f62:	0900      	lsrs	r0, r0, #4
    8f64:	3904      	subs	r1, #4
    8f66:	a202      	add	r2, pc, #8	; (adr r2, 8f70 <__ctzsi2+0x30>)
    8f68:	5c10      	ldrb	r0, [r2, r0]
    8f6a:	1a40      	subs	r0, r0, r1
    8f6c:	4770      	bx	lr
    8f6e:	46c0      	nop			; (mov r8, r8)
    8f70:	1d1d1c1b 	.word	0x1d1d1c1b
    8f74:	1e1e1e1e 	.word	0x1e1e1e1e
    8f78:	1f1f1f1f 	.word	0x1f1f1f1f
    8f7c:	1f1f1f1f 	.word	0x1f1f1f1f

00008f80 <__libc_init_array>:
    8f80:	4b0e      	ldr	r3, [pc, #56]	; (8fbc <__libc_init_array+0x3c>)
    8f82:	b570      	push	{r4, r5, r6, lr}
    8f84:	2500      	movs	r5, #0
    8f86:	001e      	movs	r6, r3
    8f88:	4c0d      	ldr	r4, [pc, #52]	; (8fc0 <__libc_init_array+0x40>)
    8f8a:	1ae4      	subs	r4, r4, r3
    8f8c:	10a4      	asrs	r4, r4, #2
    8f8e:	42a5      	cmp	r5, r4
    8f90:	d004      	beq.n	8f9c <__libc_init_array+0x1c>
    8f92:	00ab      	lsls	r3, r5, #2
    8f94:	58f3      	ldr	r3, [r6, r3]
    8f96:	4798      	blx	r3
    8f98:	3501      	adds	r5, #1
    8f9a:	e7f8      	b.n	8f8e <__libc_init_array+0xe>
    8f9c:	f000 f8a8 	bl	90f0 <_init>
    8fa0:	4b08      	ldr	r3, [pc, #32]	; (8fc4 <__libc_init_array+0x44>)
    8fa2:	2500      	movs	r5, #0
    8fa4:	001e      	movs	r6, r3
    8fa6:	4c08      	ldr	r4, [pc, #32]	; (8fc8 <__libc_init_array+0x48>)
    8fa8:	1ae4      	subs	r4, r4, r3
    8faa:	10a4      	asrs	r4, r4, #2
    8fac:	42a5      	cmp	r5, r4
    8fae:	d004      	beq.n	8fba <__libc_init_array+0x3a>
    8fb0:	00ab      	lsls	r3, r5, #2
    8fb2:	58f3      	ldr	r3, [r6, r3]
    8fb4:	4798      	blx	r3
    8fb6:	3501      	adds	r5, #1
    8fb8:	e7f8      	b.n	8fac <__libc_init_array+0x2c>
    8fba:	bd70      	pop	{r4, r5, r6, pc}
    8fbc:	000090fc 	.word	0x000090fc
    8fc0:	000090fc 	.word	0x000090fc
    8fc4:	000090fc 	.word	0x000090fc
    8fc8:	00009100 	.word	0x00009100

00008fcc <memcpy>:
    8fcc:	2300      	movs	r3, #0
    8fce:	b510      	push	{r4, lr}
    8fd0:	429a      	cmp	r2, r3
    8fd2:	d003      	beq.n	8fdc <memcpy+0x10>
    8fd4:	5ccc      	ldrb	r4, [r1, r3]
    8fd6:	54c4      	strb	r4, [r0, r3]
    8fd8:	3301      	adds	r3, #1
    8fda:	e7f9      	b.n	8fd0 <memcpy+0x4>
    8fdc:	bd10      	pop	{r4, pc}

00008fde <memset>:
    8fde:	0003      	movs	r3, r0
    8fe0:	1882      	adds	r2, r0, r2
    8fe2:	4293      	cmp	r3, r2
    8fe4:	d002      	beq.n	8fec <memset+0xe>
    8fe6:	7019      	strb	r1, [r3, #0]
    8fe8:	3301      	adds	r3, #1
    8fea:	e7fa      	b.n	8fe2 <memset+0x4>
    8fec:	4770      	bx	lr
    8fee:	0000      	movs	r0, r0
    8ff0:	42000800 	.word	0x42000800
    8ff4:	42000c00 	.word	0x42000c00
    8ff8:	42001000 	.word	0x42001000
    8ffc:	42001400 	.word	0x42001400
    9000:	42001800 	.word	0x42001800
    9004:	42001c00 	.word	0x42001c00
    9008:	00001f5e 	.word	0x00001f5e
    900c:	00001f3c 	.word	0x00001f3c
    9010:	00001f1a 	.word	0x00001f1a
    9014:	00001ee8 	.word	0x00001ee8
    9018:	00001eb6 	.word	0x00001eb6
    901c:	53504f54 	.word	0x53504f54
    9020:	45524345 	.word	0x45524345
    9024:	53415054 	.word	0x53415054
    9028:	44525753 	.word	0x44525753
    902c:	00000000 	.word	0x00000000
    9030:	00003a6e 	.word	0x00003a6e
    9034:	00003a56 	.word	0x00003a56
    9038:	00003a6e 	.word	0x00003a6e
    903c:	00003a5e 	.word	0x00003a5e
    9040:	00003a6e 	.word	0x00003a6e
    9044:	00003a4e 	.word	0x00003a4e
    9048:	00003a6e 	.word	0x00003a6e
    904c:	00003a6e 	.word	0x00003a6e
    9050:	00003a6e 	.word	0x00003a6e
    9054:	00003a66 	.word	0x00003a66
    9058:	00004706 	.word	0x00004706
    905c:	0000478c 	.word	0x0000478c
    9060:	0000478c 	.word	0x0000478c
    9064:	00004724 	.word	0x00004724
    9068:	0000471e 	.word	0x0000471e
    906c:	0000472a 	.word	0x0000472a
    9070:	0000470c 	.word	0x0000470c
    9074:	00004730 	.word	0x00004730
    9078:	00004772 	.word	0x00004772
    907c:	00004938 	.word	0x00004938
    9080:	00004988 	.word	0x00004988
    9084:	00004988 	.word	0x00004988
    9088:	00004984 	.word	0x00004984
    908c:	0000492a 	.word	0x0000492a
    9090:	0000494a 	.word	0x0000494a
    9094:	0000491a 	.word	0x0000491a
    9098:	0000495c 	.word	0x0000495c
    909c:	0000496e 	.word	0x0000496e
    90a0:	000049d6 	.word	0x000049d6
    90a4:	00004a04 	.word	0x00004a04
    90a8:	00004a04 	.word	0x00004a04
    90ac:	00004a00 	.word	0x00004a00
    90b0:	000049d0 	.word	0x000049d0
    90b4:	000049dc 	.word	0x000049dc
    90b8:	000049ca 	.word	0x000049ca
    90bc:	000049e2 	.word	0x000049e2
    90c0:	000049e8 	.word	0x000049e8
    90c4:	01020300 	.word	0x01020300

000090c8 <_usb_device_irq_bits>:
    90c8:	00080004 00800070 01000001 00000200     ....p...........

000090d8 <_usb_endpoint_irq_bits>:
    90d8:	60100c03 0000763e 00007654 000077c0     ...`>v..Tv...w..
    90e8:	0000788e 0000795c                       .x..\y..

000090f0 <_init>:
    90f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    90f6:	bc08      	pop	{r3}
    90f8:	469e      	mov	lr, r3
    90fa:	4770      	bx	lr

000090fc <__init_array_start>:
    90fc:	000000dd 	.word	0x000000dd

00009100 <_fini>:
    9100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9102:	46c0      	nop			; (mov r8, r8)
    9104:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9106:	bc08      	pop	{r3}
    9108:	469e      	mov	lr, r3
    910a:	4770      	bx	lr

0000910c <__fini_array_start>:
    910c:	000000b5 	.word	0x000000b5
