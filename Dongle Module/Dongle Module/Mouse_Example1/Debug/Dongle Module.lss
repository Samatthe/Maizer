
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ef0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00009ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000054c  200000e0  00009fd0  000200e0  2**2
                  ALLOC
  3 .stack        00002004  2000062c  0000a51c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   000308f6  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a90  00000000  00000000  00050a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000520b  00000000  00000000  000544e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e80  00000000  00000000  000596f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf0  00000000  00000000  0005a572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f4d3  00000000  00000000  0005b262  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012b03  00000000  00000000  0007a735  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000969c0  00000000  00000000  0008d238  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003228  00000000  00000000  00123bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002630 	.word	0x20002630
       4:	00009071 	.word	0x00009071
       8:	00009169 	.word	0x00009169
       c:	00009169 	.word	0x00009169
	...
      2c:	00009169 	.word	0x00009169
	...
      38:	00009169 	.word	0x00009169
      3c:	00009169 	.word	0x00009169
      40:	00009169 	.word	0x00009169
      44:	00009169 	.word	0x00009169
      48:	00009169 	.word	0x00009169
      4c:	00009169 	.word	0x00009169
      50:	00004851 	.word	0x00004851
      54:	00009169 	.word	0x00009169
      58:	00009169 	.word	0x00009169
      5c:	00008cb9 	.word	0x00008cb9
      60:	00009169 	.word	0x00009169
      64:	00009169 	.word	0x00009169
      68:	00009169 	.word	0x00009169
      6c:	00009169 	.word	0x00009169
      70:	00009169 	.word	0x00009169
      74:	00009169 	.word	0x00009169
      78:	00009169 	.word	0x00009169
      7c:	00009169 	.word	0x00009169
      80:	00009169 	.word	0x00009169
      84:	00009169 	.word	0x00009169
      88:	00009169 	.word	0x00009169
      8c:	00009169 	.word	0x00009169
      90:	00009169 	.word	0x00009169
	...
      9c:	00009169 	.word	0x00009169
      a0:	00009169 	.word	0x00009169
      a4:	00009169 	.word	0x00009169
      a8:	00009169 	.word	0x00009169
      ac:	00009169 	.word	0x00009169
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00009ef0 	.word	0x00009ef0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00009ef0 	.word	0x00009ef0
     10c:	00009ef0 	.word	0x00009ef0
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     188:	b580      	push	{r7, lr}
     18a:	b084      	sub	sp, #16
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     190:	687b      	ldr	r3, [r7, #4]
     192:	681b      	ldr	r3, [r3, #0]
     194:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     196:	68fb      	ldr	r3, [r7, #12]
     198:	7a9b      	ldrb	r3, [r3, #10]
     19a:	b2db      	uxtb	r3, r3
     19c:	b25b      	sxtb	r3, r3
     19e:	2b00      	cmp	r3, #0
     1a0:	da01      	bge.n	1a6 <rtc_count_is_syncing+0x1e>
                return true;
     1a2:	2301      	movs	r3, #1
     1a4:	e000      	b.n	1a8 <rtc_count_is_syncing+0x20>
        }

        return false;
     1a6:	2300      	movs	r3, #0
}
     1a8:	0018      	movs	r0, r3
     1aa:	46bd      	mov	sp, r7
     1ac:	b004      	add	sp, #16
     1ae:	bd80      	pop	{r7, pc}

000001b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b084      	sub	sp, #16
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	0018      	movs	r0, r3
     1c4:	4b07      	ldr	r3, [pc, #28]	; (1e4 <rtc_count_enable+0x34>)
     1c6:	4798      	blx	r3
     1c8:	1e03      	subs	r3, r0, #0
     1ca:	d1f9      	bne.n	1c0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	881b      	ldrh	r3, [r3, #0]
     1d0:	b29b      	uxth	r3, r3
     1d2:	2202      	movs	r2, #2
     1d4:	4313      	orrs	r3, r2
     1d6:	b29a      	uxth	r2, r3
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	801a      	strh	r2, [r3, #0]
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}
     1e4:	00000189 	.word	0x00000189

000001e8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	0018      	movs	r0, r3
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_count_disable+0x34>)
     1fe:	4798      	blx	r3
     200:	1e03      	subs	r3, r0, #0
     202:	d1f9      	bne.n	1f8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	2202      	movs	r2, #2
     20c:	4393      	bics	r3, r2
     20e:	b29a      	uxth	r2, r3
     210:	68fb      	ldr	r3, [r7, #12]
     212:	801a      	strh	r2, [r3, #0]
}
     214:	46c0      	nop			; (mov r8, r8)
     216:	46bd      	mov	sp, r7
     218:	b004      	add	sp, #16
     21a:	bd80      	pop	{r7, pc}
     21c:	00000189 	.word	0x00000189

00000220 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     22e:	687b      	ldr	r3, [r7, #4]
     230:	0018      	movs	r0, r3
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <rtc_count_reset+0x3c>)
     234:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     236:	46c0      	nop			; (mov r8, r8)
     238:	687b      	ldr	r3, [r7, #4]
     23a:	0018      	movs	r0, r3
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <rtc_count_reset+0x40>)
     23e:	4798      	blx	r3
     240:	1e03      	subs	r3, r0, #0
     242:	d1f9      	bne.n	238 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29b      	uxth	r3, r3
     24a:	2201      	movs	r2, #1
     24c:	4313      	orrs	r3, r2
     24e:	b29a      	uxth	r2, r3
     250:	68fb      	ldr	r3, [r7, #12]
     252:	801a      	strh	r2, [r3, #0]
}
     254:	46c0      	nop			; (mov r8, r8)
     256:	46bd      	mov	sp, r7
     258:	b004      	add	sp, #16
     25a:	bd80      	pop	{r7, pc}
     25c:	000001e9 	.word	0x000001e9
     260:	00000189 	.word	0x00000189

00000264 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
     26c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     274:	683b      	ldr	r3, [r7, #0]
     276:	881a      	ldrh	r2, [r3, #0]
     278:	68bb      	ldr	r3, [r7, #8]
     27a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	789b      	ldrb	r3, [r3, #2]
     280:	2b00      	cmp	r3, #0
     282:	d03a      	beq.n	2fa <_rtc_count_set_config+0x96>
     284:	2b01      	cmp	r3, #1
     286:	d000      	beq.n	28a <_rtc_count_set_config+0x26>
     288:	e06c      	b.n	364 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	881b      	ldrh	r3, [r3, #0]
     28e:	b29a      	uxth	r2, r3
     290:	68bb      	ldr	r3, [r7, #8]
     292:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     294:	683b      	ldr	r3, [r7, #0]
     296:	78db      	ldrb	r3, [r3, #3]
     298:	2b00      	cmp	r3, #0
     29a:	d007      	beq.n	2ac <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	881b      	ldrh	r3, [r3, #0]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	4313      	orrs	r3, r2
     2a6:	b29a      	uxth	r2, r3
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2ac:	230f      	movs	r3, #15
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	2200      	movs	r2, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	e01b      	b.n	2ee <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	0018      	movs	r0, r3
     2bc:	4b33      	ldr	r3, [pc, #204]	; (38c <_rtc_count_set_config+0x128>)
     2be:	4798      	blx	r3
     2c0:	1e03      	subs	r3, r0, #0
     2c2:	d1f9      	bne.n	2b8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c4:	230f      	movs	r3, #15
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	781a      	ldrb	r2, [r3, #0]
     2ca:	683b      	ldr	r3, [r7, #0]
     2cc:	3202      	adds	r2, #2
     2ce:	0092      	lsls	r2, r2, #2
     2d0:	58d1      	ldr	r1, [r2, r3]
     2d2:	230f      	movs	r3, #15
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	781a      	ldrb	r2, [r3, #0]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b2c      	ldr	r3, [pc, #176]	; (390 <_rtc_count_set_config+0x12c>)
     2de:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2e0:	230f      	movs	r3, #15
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	781a      	ldrb	r2, [r3, #0]
     2e6:	230f      	movs	r3, #15
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	3201      	adds	r2, #1
     2ec:	701a      	strb	r2, [r3, #0]
     2ee:	230f      	movs	r3, #15
     2f0:	18fb      	adds	r3, r7, r3
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0de      	beq.n	2b6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     2f8:	e036      	b.n	368 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2fa:	68bb      	ldr	r3, [r7, #8]
     2fc:	881b      	ldrh	r3, [r3, #0]
     2fe:	b29b      	uxth	r3, r3
     300:	2204      	movs	r2, #4
     302:	4313      	orrs	r3, r2
     304:	b29a      	uxth	r2, r3
     306:	68bb      	ldr	r3, [r7, #8]
     308:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     30a:	683b      	ldr	r3, [r7, #0]
     30c:	78db      	ldrb	r3, [r3, #3]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     312:	2317      	movs	r3, #23
     314:	e036      	b.n	384 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     316:	230e      	movs	r3, #14
     318:	18fb      	adds	r3, r7, r3
     31a:	2200      	movs	r2, #0
     31c:	701a      	strb	r2, [r3, #0]
     31e:	e01b      	b.n	358 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     320:	46c0      	nop			; (mov r8, r8)
     322:	687b      	ldr	r3, [r7, #4]
     324:	0018      	movs	r0, r3
     326:	4b19      	ldr	r3, [pc, #100]	; (38c <_rtc_count_set_config+0x128>)
     328:	4798      	blx	r3
     32a:	1e03      	subs	r3, r0, #0
     32c:	d1f9      	bne.n	322 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     32e:	230e      	movs	r3, #14
     330:	18fb      	adds	r3, r7, r3
     332:	781a      	ldrb	r2, [r3, #0]
     334:	683b      	ldr	r3, [r7, #0]
     336:	3202      	adds	r2, #2
     338:	0092      	lsls	r2, r2, #2
     33a:	58d1      	ldr	r1, [r2, r3]
     33c:	230e      	movs	r3, #14
     33e:	18fb      	adds	r3, r7, r3
     340:	781a      	ldrb	r2, [r3, #0]
     342:	687b      	ldr	r3, [r7, #4]
     344:	0018      	movs	r0, r3
     346:	4b12      	ldr	r3, [pc, #72]	; (390 <_rtc_count_set_config+0x12c>)
     348:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     34a:	230e      	movs	r3, #14
     34c:	18fb      	adds	r3, r7, r3
     34e:	781a      	ldrb	r2, [r3, #0]
     350:	230e      	movs	r3, #14
     352:	18fb      	adds	r3, r7, r3
     354:	3201      	adds	r2, #1
     356:	701a      	strb	r2, [r3, #0]
     358:	230e      	movs	r3, #14
     35a:	18fb      	adds	r3, r7, r3
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	2b01      	cmp	r3, #1
     360:	d9de      	bls.n	320 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     362:	e001      	b.n	368 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     364:	2317      	movs	r3, #23
     366:	e00d      	b.n	384 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     368:	683b      	ldr	r3, [r7, #0]
     36a:	791b      	ldrb	r3, [r3, #4]
     36c:	2b00      	cmp	r3, #0
     36e:	d008      	beq.n	382 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     370:	68bb      	ldr	r3, [r7, #8]
     372:	885b      	ldrh	r3, [r3, #2]
     374:	b29b      	uxth	r3, r3
     376:	2280      	movs	r2, #128	; 0x80
     378:	01d2      	lsls	r2, r2, #7
     37a:	4313      	orrs	r3, r2
     37c:	b29a      	uxth	r2, r3
     37e:	68bb      	ldr	r3, [r7, #8]
     380:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     382:	2300      	movs	r3, #0
}
     384:	0018      	movs	r0, r3
     386:	46bd      	mov	sp, r7
     388:	b004      	add	sp, #16
     38a:	bd80      	pop	{r7, pc}
     38c:	00000189 	.word	0x00000189
     390:	000004ed 	.word	0x000004ed

00000394 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     394:	b580      	push	{r7, lr}
     396:	b086      	sub	sp, #24
     398:	af00      	add	r7, sp, #0
     39a:	60f8      	str	r0, [r7, #12]
     39c:	60b9      	str	r1, [r7, #8]
     39e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	68ba      	ldr	r2, [r7, #8]
     3a4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     3a6:	2120      	movs	r1, #32
     3a8:	2000      	movs	r0, #0
     3aa:	4b17      	ldr	r3, [pc, #92]	; (408 <rtc_count_init+0x74>)
     3ac:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3ae:	2314      	movs	r3, #20
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	0018      	movs	r0, r3
     3b4:	4b15      	ldr	r3, [pc, #84]	; (40c <rtc_count_init+0x78>)
     3b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3b8:	2314      	movs	r3, #20
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	2202      	movs	r2, #2
     3be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3c0:	2314      	movs	r3, #20
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	0019      	movs	r1, r3
     3c6:	2004      	movs	r0, #4
     3c8:	4b11      	ldr	r3, [pc, #68]	; (410 <rtc_count_init+0x7c>)
     3ca:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3cc:	2004      	movs	r0, #4
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <rtc_count_init+0x80>)
     3d0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     3d2:	68fb      	ldr	r3, [r7, #12]
     3d4:	0018      	movs	r0, r3
     3d6:	4b10      	ldr	r3, [pc, #64]	; (418 <rtc_count_init+0x84>)
     3d8:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	789a      	ldrb	r2, [r3, #2]
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	791a      	ldrb	r2, [r3, #4]
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <rtc_count_init+0x88>)
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     3f0:	687a      	ldr	r2, [r7, #4]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	0011      	movs	r1, r2
     3f6:	0018      	movs	r0, r3
     3f8:	4b09      	ldr	r3, [pc, #36]	; (420 <rtc_count_init+0x8c>)
     3fa:	4798      	blx	r3
     3fc:	0003      	movs	r3, r0
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b006      	add	sp, #24
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	0000012d 	.word	0x0000012d
     40c:	00000115 	.word	0x00000115
     410:	00005775 	.word	0x00005775
     414:	000057b9 	.word	0x000057b9
     418:	00000221 	.word	0x00000221
     41c:	20000238 	.word	0x20000238
     420:	00000265 	.word	0x00000265

00000424 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     424:	b580      	push	{r7, lr}
     426:	b084      	sub	sp, #16
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	681b      	ldr	r3, [r3, #0]
     432:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     434:	46c0      	nop			; (mov r8, r8)
     436:	687b      	ldr	r3, [r7, #4]
     438:	0018      	movs	r0, r3
     43a:	4b10      	ldr	r3, [pc, #64]	; (47c <rtc_count_set_count+0x58>)
     43c:	4798      	blx	r3
     43e:	1e03      	subs	r3, r0, #0
     440:	d1f9      	bne.n	436 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     442:	687b      	ldr	r3, [r7, #4]
     444:	791b      	ldrb	r3, [r3, #4]
     446:	2b00      	cmp	r3, #0
     448:	d005      	beq.n	456 <rtc_count_set_count+0x32>
     44a:	2b01      	cmp	r3, #1
     44c:	d10e      	bne.n	46c <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	683a      	ldr	r2, [r7, #0]
     452:	611a      	str	r2, [r3, #16]

			break;
     454:	e00c      	b.n	470 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     456:	683b      	ldr	r3, [r7, #0]
     458:	4a09      	ldr	r2, [pc, #36]	; (480 <rtc_count_set_count+0x5c>)
     45a:	4293      	cmp	r3, r2
     45c:	d901      	bls.n	462 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     45e:	2317      	movs	r3, #23
     460:	e007      	b.n	472 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     462:	683b      	ldr	r3, [r7, #0]
     464:	b29a      	uxth	r2, r3
     466:	68fb      	ldr	r3, [r7, #12]
     468:	821a      	strh	r2, [r3, #16]

			break;
     46a:	e001      	b.n	470 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     46c:	2317      	movs	r3, #23
     46e:	e000      	b.n	472 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     470:	2300      	movs	r3, #0
}
     472:	0018      	movs	r0, r3
     474:	46bd      	mov	sp, r7
     476:	b004      	add	sp, #16
     478:	bd80      	pop	{r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	00000189 	.word	0x00000189
     480:	0000ffff 	.word	0x0000ffff

00000484 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     484:	b580      	push	{r7, lr}
     486:	b084      	sub	sp, #16
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	681b      	ldr	r3, [r3, #0]
     490:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     492:	687b      	ldr	r3, [r7, #4]
     494:	795b      	ldrb	r3, [r3, #5]
     496:	2201      	movs	r2, #1
     498:	4053      	eors	r3, r2
     49a:	b2db      	uxtb	r3, r3
     49c:	2b00      	cmp	r3, #0
     49e:	d009      	beq.n	4b4 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	4a10      	ldr	r2, [pc, #64]	; (4e4 <rtc_count_get_count+0x60>)
     4a4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	0018      	movs	r0, r3
     4ac:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <rtc_count_get_count+0x64>)
     4ae:	4798      	blx	r3
     4b0:	1e03      	subs	r3, r0, #0
     4b2:	d1f9      	bne.n	4a8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	791b      	ldrb	r3, [r3, #4]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d005      	beq.n	4c8 <rtc_count_get_count+0x44>
     4bc:	2b01      	cmp	r3, #1
     4be:	d108      	bne.n	4d2 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     4c0:	68bb      	ldr	r3, [r7, #8]
     4c2:	691b      	ldr	r3, [r3, #16]
     4c4:	60fb      	str	r3, [r7, #12]

			break;
     4c6:	e007      	b.n	4d8 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	8a1b      	ldrh	r3, [r3, #16]
     4cc:	b29b      	uxth	r3, r3
     4ce:	60fb      	str	r3, [r7, #12]

			break;
     4d0:	e002      	b.n	4d8 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     4d2:	2300      	movs	r3, #0
     4d4:	60fb      	str	r3, [r7, #12]
			break;
     4d6:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	0018      	movs	r0, r3
     4dc:	46bd      	mov	sp, r7
     4de:	b004      	add	sp, #16
     4e0:	bd80      	pop	{r7, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	ffff8000 	.word	0xffff8000
     4e8:	00000189 	.word	0x00000189

000004ec <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b086      	sub	sp, #24
     4f0:	af00      	add	r7, sp, #0
     4f2:	60f8      	str	r0, [r7, #12]
     4f4:	60b9      	str	r1, [r7, #8]
     4f6:	1dfb      	adds	r3, r7, #7
     4f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4fa:	68fb      	ldr	r3, [r7, #12]
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     500:	46c0      	nop			; (mov r8, r8)
     502:	68fb      	ldr	r3, [r7, #12]
     504:	0018      	movs	r0, r3
     506:	4b1a      	ldr	r3, [pc, #104]	; (570 <rtc_count_set_compare+0x84>)
     508:	4798      	blx	r3
     50a:	1e03      	subs	r3, r0, #0
     50c:	d1f9      	bne.n	502 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     50e:	68fb      	ldr	r3, [r7, #12]
     510:	791b      	ldrb	r3, [r3, #4]
     512:	2b00      	cmp	r3, #0
     514:	d00f      	beq.n	536 <rtc_count_set_compare+0x4a>
     516:	2b01      	cmp	r3, #1
     518:	d122      	bne.n	560 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     51a:	1dfb      	adds	r3, r7, #7
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2b01      	cmp	r3, #1
     520:	d901      	bls.n	526 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     522:	2317      	movs	r3, #23
     524:	e01f      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     526:	1dfb      	adds	r3, r7, #7
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	697b      	ldr	r3, [r7, #20]
     52c:	3206      	adds	r2, #6
     52e:	0092      	lsls	r2, r2, #2
     530:	68b9      	ldr	r1, [r7, #8]
     532:	50d1      	str	r1, [r2, r3]

			break;
     534:	e016      	b.n	564 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2b02      	cmp	r3, #2
     53c:	d901      	bls.n	542 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     53e:	2317      	movs	r3, #23
     540:	e011      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     542:	68bb      	ldr	r3, [r7, #8]
     544:	4a0b      	ldr	r2, [pc, #44]	; (574 <rtc_count_set_compare+0x88>)
     546:	4293      	cmp	r3, r2
     548:	d901      	bls.n	54e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     54a:	2317      	movs	r3, #23
     54c:	e00b      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     54e:	1dfb      	adds	r3, r7, #7
     550:	781a      	ldrb	r2, [r3, #0]
     552:	68bb      	ldr	r3, [r7, #8]
     554:	b299      	uxth	r1, r3
     556:	697b      	ldr	r3, [r7, #20]
     558:	320c      	adds	r2, #12
     55a:	0052      	lsls	r2, r2, #1
     55c:	52d1      	strh	r1, [r2, r3]

			break;
     55e:	e001      	b.n	564 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     560:	231a      	movs	r3, #26
     562:	e000      	b.n	566 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     564:	2300      	movs	r3, #0
}
     566:	0018      	movs	r0, r3
     568:	46bd      	mov	sp, r7
     56a:	b006      	add	sp, #24
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00000189 	.word	0x00000189
     574:	0000ffff 	.word	0x0000ffff

00000578 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     578:	b580      	push	{r7, lr}
     57a:	b084      	sub	sp, #16
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
     580:	000a      	movs	r2, r1
     582:	1cbb      	adds	r3, r7, #2
     584:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     586:	687b      	ldr	r3, [r7, #4]
     588:	681b      	ldr	r3, [r3, #0]
     58a:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	791b      	ldrb	r3, [r3, #4]
     590:	2b00      	cmp	r3, #0
     592:	d001      	beq.n	598 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     594:	2315      	movs	r3, #21
     596:	e00b      	b.n	5b0 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     598:	46c0      	nop			; (mov r8, r8)
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	0018      	movs	r0, r3
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <rtc_count_set_period+0x40>)
     5a0:	4798      	blx	r3
     5a2:	1e03      	subs	r3, r0, #0
     5a4:	d1f9      	bne.n	59a <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	1cba      	adds	r2, r7, #2
     5aa:	8812      	ldrh	r2, [r2, #0]
     5ac:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     5ae:	2300      	movs	r3, #0
}
     5b0:	0018      	movs	r0, r3
     5b2:	46bd      	mov	sp, r7
     5b4:	b004      	add	sp, #16
     5b6:	bd80      	pop	{r7, pc}
     5b8:	00000189 	.word	0x00000189

000005bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b082      	sub	sp, #8
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	46bd      	mov	sp, r7
     5ce:	b002      	add	sp, #8
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5d6:	b08d      	sub	sp, #52	; 0x34
     5d8:	af00      	add	r7, sp, #0
     5da:	60b8      	str	r0, [r7, #8]
     5dc:	60f9      	str	r1, [r7, #12]
     5de:	603a      	str	r2, [r7, #0]
     5e0:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5e2:	2300      	movs	r3, #0
     5e4:	2400      	movs	r4, #0
     5e6:	623b      	str	r3, [r7, #32]
     5e8:	627c      	str	r4, [r7, #36]	; 0x24
     5ea:	2300      	movs	r3, #0
     5ec:	2400      	movs	r4, #0
     5ee:	61bb      	str	r3, [r7, #24]
     5f0:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     5f2:	233f      	movs	r3, #63	; 0x3f
     5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
     5f6:	e053      	b.n	6a0 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     5fa:	3b20      	subs	r3, #32
     5fc:	2b00      	cmp	r3, #0
     5fe:	db04      	blt.n	60a <long_division+0x36>
     600:	2201      	movs	r2, #1
     602:	409a      	lsls	r2, r3
     604:	0013      	movs	r3, r2
     606:	617b      	str	r3, [r7, #20]
     608:	e00b      	b.n	622 <long_division+0x4e>
     60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     60c:	2220      	movs	r2, #32
     60e:	1ad3      	subs	r3, r2, r3
     610:	2201      	movs	r2, #1
     612:	40da      	lsrs	r2, r3
     614:	0013      	movs	r3, r2
     616:	2100      	movs	r1, #0
     618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     61a:	4091      	lsls	r1, r2
     61c:	000a      	movs	r2, r1
     61e:	4313      	orrs	r3, r2
     620:	617b      	str	r3, [r7, #20]
     622:	2201      	movs	r2, #1
     624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     626:	409a      	lsls	r2, r3
     628:	0013      	movs	r3, r2
     62a:	613b      	str	r3, [r7, #16]

		r = r << 1;
     62c:	69bb      	ldr	r3, [r7, #24]
     62e:	69fc      	ldr	r4, [r7, #28]
     630:	18db      	adds	r3, r3, r3
     632:	4164      	adcs	r4, r4
     634:	61bb      	str	r3, [r7, #24]
     636:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	693a      	ldr	r2, [r7, #16]
     63c:	401a      	ands	r2, r3
     63e:	0015      	movs	r5, r2
     640:	68fb      	ldr	r3, [r7, #12]
     642:	697a      	ldr	r2, [r7, #20]
     644:	401a      	ands	r2, r3
     646:	0016      	movs	r6, r2
     648:	002b      	movs	r3, r5
     64a:	4333      	orrs	r3, r6
     64c:	d007      	beq.n	65e <long_division+0x8a>
			r |= 0x01;
     64e:	69bb      	ldr	r3, [r7, #24]
     650:	2201      	movs	r2, #1
     652:	4313      	orrs	r3, r2
     654:	61bb      	str	r3, [r7, #24]
     656:	69fb      	ldr	r3, [r7, #28]
     658:	2200      	movs	r2, #0
     65a:	4313      	orrs	r3, r2
     65c:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     65e:	687a      	ldr	r2, [r7, #4]
     660:	69fb      	ldr	r3, [r7, #28]
     662:	429a      	cmp	r2, r3
     664:	d819      	bhi.n	69a <long_division+0xc6>
     666:	687a      	ldr	r2, [r7, #4]
     668:	69fb      	ldr	r3, [r7, #28]
     66a:	429a      	cmp	r2, r3
     66c:	d103      	bne.n	676 <long_division+0xa2>
     66e:	683a      	ldr	r2, [r7, #0]
     670:	69bb      	ldr	r3, [r7, #24]
     672:	429a      	cmp	r2, r3
     674:	d811      	bhi.n	69a <long_division+0xc6>
			r = r - d;
     676:	69b9      	ldr	r1, [r7, #24]
     678:	69fa      	ldr	r2, [r7, #28]
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	687c      	ldr	r4, [r7, #4]
     67e:	1ac9      	subs	r1, r1, r3
     680:	41a2      	sbcs	r2, r4
     682:	000b      	movs	r3, r1
     684:	0014      	movs	r4, r2
     686:	61bb      	str	r3, [r7, #24]
     688:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     68a:	6a3a      	ldr	r2, [r7, #32]
     68c:	693b      	ldr	r3, [r7, #16]
     68e:	4313      	orrs	r3, r2
     690:	623b      	str	r3, [r7, #32]
     692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     694:	697b      	ldr	r3, [r7, #20]
     696:	4313      	orrs	r3, r2
     698:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     69c:	3b01      	subs	r3, #1
     69e:	62fb      	str	r3, [r7, #44]	; 0x2c
     6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     6a2:	2b00      	cmp	r3, #0
     6a4:	daa8      	bge.n	5f8 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     6a6:	6a3b      	ldr	r3, [r7, #32]
     6a8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     6aa:	0018      	movs	r0, r3
     6ac:	0021      	movs	r1, r4
     6ae:	46bd      	mov	sp, r7
     6b0:	b00d      	add	sp, #52	; 0x34
     6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006b4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	b086      	sub	sp, #24
     6b8:	af00      	add	r7, sp, #0
     6ba:	60f8      	str	r0, [r7, #12]
     6bc:	60b9      	str	r1, [r7, #8]
     6be:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     6c0:	2316      	movs	r3, #22
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	2200      	movs	r2, #0
     6c6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     6c8:	68bb      	ldr	r3, [r7, #8]
     6ca:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6cc:	68bb      	ldr	r3, [r7, #8]
     6ce:	085a      	lsrs	r2, r3, #1
     6d0:	68fb      	ldr	r3, [r7, #12]
     6d2:	429a      	cmp	r2, r3
     6d4:	d201      	bcs.n	6da <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6d6:	2340      	movs	r3, #64	; 0x40
     6d8:	e026      	b.n	728 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     6da:	68bb      	ldr	r3, [r7, #8]
     6dc:	085b      	lsrs	r3, r3, #1
     6de:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     6e0:	e00a      	b.n	6f8 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     6e2:	693a      	ldr	r2, [r7, #16]
     6e4:	68fb      	ldr	r3, [r7, #12]
     6e6:	1ad3      	subs	r3, r2, r3
     6e8:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     6ea:	2316      	movs	r3, #22
     6ec:	18fb      	adds	r3, r7, r3
     6ee:	881a      	ldrh	r2, [r3, #0]
     6f0:	2316      	movs	r3, #22
     6f2:	18fb      	adds	r3, r7, r3
     6f4:	3201      	adds	r2, #1
     6f6:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     6f8:	693a      	ldr	r2, [r7, #16]
     6fa:	68fb      	ldr	r3, [r7, #12]
     6fc:	429a      	cmp	r2, r3
     6fe:	d2f0      	bcs.n	6e2 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     700:	2316      	movs	r3, #22
     702:	18fb      	adds	r3, r7, r3
     704:	2216      	movs	r2, #22
     706:	18ba      	adds	r2, r7, r2
     708:	8812      	ldrh	r2, [r2, #0]
     70a:	3a01      	subs	r2, #1
     70c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     70e:	2316      	movs	r3, #22
     710:	18fb      	adds	r3, r7, r3
     712:	881b      	ldrh	r3, [r3, #0]
     714:	2bff      	cmp	r3, #255	; 0xff
     716:	d901      	bls.n	71c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     718:	2340      	movs	r3, #64	; 0x40
     71a:	e005      	b.n	728 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	2216      	movs	r2, #22
     720:	18ba      	adds	r2, r7, r2
     722:	8812      	ldrh	r2, [r2, #0]
     724:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     726:	2300      	movs	r3, #0
	}
}
     728:	0018      	movs	r0, r3
     72a:	46bd      	mov	sp, r7
     72c:	b006      	add	sp, #24
     72e:	bd80      	pop	{r7, pc}

00000730 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
     732:	b09d      	sub	sp, #116	; 0x74
     734:	af00      	add	r7, sp, #0
     736:	63f8      	str	r0, [r7, #60]	; 0x3c
     738:	63b9      	str	r1, [r7, #56]	; 0x38
     73a:	637a      	str	r2, [r7, #52]	; 0x34
     73c:	2233      	movs	r2, #51	; 0x33
     73e:	18ba      	adds	r2, r7, r2
     740:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     742:	2300      	movs	r3, #0
     744:	2400      	movs	r4, #0
     746:	65bb      	str	r3, [r7, #88]	; 0x58
     748:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
     74a:	2300      	movs	r3, #0
     74c:	2400      	movs	r4, #0
     74e:	653b      	str	r3, [r7, #80]	; 0x50
     750:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
     752:	2300      	movs	r3, #0
     754:	2400      	movs	r4, #0
     756:	66bb      	str	r3, [r7, #104]	; 0x68
     758:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     75a:	2300      	movs	r3, #0
     75c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     75e:	2358      	movs	r3, #88	; 0x58
     760:	2230      	movs	r2, #48	; 0x30
     762:	4694      	mov	ip, r2
     764:	44bc      	add	ip, r7
     766:	4463      	add	r3, ip
     768:	781a      	ldrb	r2, [r3, #0]
     76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     76c:	435a      	muls	r2, r3
     76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     770:	429a      	cmp	r2, r3
     772:	d901      	bls.n	778 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     774:	2340      	movs	r3, #64	; 0x40
     776:	e0c6      	b.n	906 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     778:	2333      	movs	r3, #51	; 0x33
     77a:	18fb      	adds	r3, r7, r3
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	2b00      	cmp	r3, #0
     780:	d13d      	bne.n	7fe <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     782:	2358      	movs	r3, #88	; 0x58
     784:	2230      	movs	r2, #48	; 0x30
     786:	4694      	mov	ip, r2
     788:	44bc      	add	ip, r7
     78a:	4463      	add	r3, ip
     78c:	781b      	ldrb	r3, [r3, #0]
     78e:	b2db      	uxtb	r3, r3
     790:	613b      	str	r3, [r7, #16]
     792:	2300      	movs	r3, #0
     794:	617b      	str	r3, [r7, #20]
     796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     798:	60bb      	str	r3, [r7, #8]
     79a:	2300      	movs	r3, #0
     79c:	60fb      	str	r3, [r7, #12]
     79e:	4c5c      	ldr	r4, [pc, #368]	; (910 <_sercom_get_async_baud_val+0x1e0>)
     7a0:	68ba      	ldr	r2, [r7, #8]
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	6938      	ldr	r0, [r7, #16]
     7a6:	6979      	ldr	r1, [r7, #20]
     7a8:	47a0      	blx	r4
     7aa:	0003      	movs	r3, r0
     7ac:	000c      	movs	r4, r1
     7ae:	001b      	movs	r3, r3
     7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
     7b2:	2300      	movs	r3, #0
     7b4:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
     7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     7b8:	603b      	str	r3, [r7, #0]
     7ba:	2300      	movs	r3, #0
     7bc:	607b      	str	r3, [r7, #4]
     7be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
     7c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
     7c2:	683a      	ldr	r2, [r7, #0]
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	4c53      	ldr	r4, [pc, #332]	; (914 <_sercom_get_async_baud_val+0x1e4>)
     7c8:	47a0      	blx	r4
     7ca:	0003      	movs	r3, r0
     7cc:	000c      	movs	r4, r1
     7ce:	65bb      	str	r3, [r7, #88]	; 0x58
     7d0:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7d2:	2100      	movs	r1, #0
     7d4:	2201      	movs	r2, #1
     7d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     7d8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     7da:	1ac9      	subs	r1, r1, r3
     7dc:	41a2      	sbcs	r2, r4
     7de:	000b      	movs	r3, r1
     7e0:	0014      	movs	r4, r2
     7e2:	653b      	str	r3, [r7, #80]	; 0x50
     7e4:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
     7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     7e8:	0c1b      	lsrs	r3, r3, #16
     7ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     7ec:	0416      	lsls	r6, r2, #16
     7ee:	431e      	orrs	r6, r3
     7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     7f2:	041d      	lsls	r5, r3, #16
     7f4:	0033      	movs	r3, r6
     7f6:	66bb      	str	r3, [r7, #104]	; 0x68
     7f8:	2300      	movs	r3, #0
     7fa:	66fb      	str	r3, [r7, #108]	; 0x6c
     7fc:	e07d      	b.n	8fa <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7fe:	2333      	movs	r3, #51	; 0x33
     800:	18fb      	adds	r3, r7, r3
     802:	781b      	ldrb	r3, [r3, #0]
     804:	2b01      	cmp	r3, #1
     806:	d000      	beq.n	80a <_sercom_get_async_baud_val+0xda>
     808:	e077      	b.n	8fa <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     80a:	2337      	movs	r3, #55	; 0x37
     80c:	2230      	movs	r2, #48	; 0x30
     80e:	4694      	mov	ip, r2
     810:	44bc      	add	ip, r7
     812:	4463      	add	r3, ip
     814:	2200      	movs	r2, #0
     816:	701a      	strb	r2, [r3, #0]
     818:	e04e      	b.n	8b8 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     81c:	62bb      	str	r3, [r7, #40]	; 0x28
     81e:	2300      	movs	r3, #0
     820:	62fb      	str	r3, [r7, #44]	; 0x2c
     822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     826:	0003      	movs	r3, r0
     828:	0f5b      	lsrs	r3, r3, #29
     82a:	000a      	movs	r2, r1
     82c:	00d2      	lsls	r2, r2, #3
     82e:	4313      	orrs	r3, r2
     830:	64fb      	str	r3, [r7, #76]	; 0x4c
     832:	0003      	movs	r3, r0
     834:	00db      	lsls	r3, r3, #3
     836:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
     838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     83a:	623b      	str	r3, [r7, #32]
     83c:	2300      	movs	r3, #0
     83e:	627b      	str	r3, [r7, #36]	; 0x24
     840:	2358      	movs	r3, #88	; 0x58
     842:	2230      	movs	r2, #48	; 0x30
     844:	4694      	mov	ip, r2
     846:	44bc      	add	ip, r7
     848:	4463      	add	r3, ip
     84a:	781b      	ldrb	r3, [r3, #0]
     84c:	b2db      	uxtb	r3, r3
     84e:	61bb      	str	r3, [r7, #24]
     850:	2300      	movs	r3, #0
     852:	61fb      	str	r3, [r7, #28]
     854:	4c2e      	ldr	r4, [pc, #184]	; (910 <_sercom_get_async_baud_val+0x1e0>)
     856:	69ba      	ldr	r2, [r7, #24]
     858:	69fb      	ldr	r3, [r7, #28]
     85a:	6a38      	ldr	r0, [r7, #32]
     85c:	6a79      	ldr	r1, [r7, #36]	; 0x24
     85e:	47a0      	blx	r4
     860:	0003      	movs	r3, r0
     862:	000c      	movs	r4, r1
     864:	643b      	str	r3, [r7, #64]	; 0x40
     866:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
     868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     86a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     86c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
     86e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
     870:	001a      	movs	r2, r3
     872:	0023      	movs	r3, r4
     874:	4c27      	ldr	r4, [pc, #156]	; (914 <_sercom_get_async_baud_val+0x1e4>)
     876:	47a0      	blx	r4
     878:	0003      	movs	r3, r0
     87a:	000c      	movs	r4, r1
     87c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
     87e:	2337      	movs	r3, #55	; 0x37
     880:	2230      	movs	r2, #48	; 0x30
     882:	4694      	mov	ip, r2
     884:	44bc      	add	ip, r7
     886:	4463      	add	r3, ip
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     88c:	1ad3      	subs	r3, r2, r3
     88e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
     890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     892:	08db      	lsrs	r3, r3, #3
     894:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
     896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     898:	4a1f      	ldr	r2, [pc, #124]	; (918 <_sercom_get_async_baud_val+0x1e8>)
     89a:	4293      	cmp	r3, r2
     89c:	d915      	bls.n	8ca <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     89e:	2337      	movs	r3, #55	; 0x37
     8a0:	2230      	movs	r2, #48	; 0x30
     8a2:	4694      	mov	ip, r2
     8a4:	44bc      	add	ip, r7
     8a6:	4463      	add	r3, ip
     8a8:	781a      	ldrb	r2, [r3, #0]
     8aa:	2337      	movs	r3, #55	; 0x37
     8ac:	2130      	movs	r1, #48	; 0x30
     8ae:	468c      	mov	ip, r1
     8b0:	44bc      	add	ip, r7
     8b2:	4463      	add	r3, ip
     8b4:	3201      	adds	r2, #1
     8b6:	701a      	strb	r2, [r3, #0]
     8b8:	2337      	movs	r3, #55	; 0x37
     8ba:	2230      	movs	r2, #48	; 0x30
     8bc:	4694      	mov	ip, r2
     8be:	44bc      	add	ip, r7
     8c0:	4463      	add	r3, ip
     8c2:	781b      	ldrb	r3, [r3, #0]
     8c4:	2b07      	cmp	r3, #7
     8c6:	d9a8      	bls.n	81a <_sercom_get_async_baud_val+0xea>
     8c8:	e000      	b.n	8cc <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
     8ca:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     8cc:	2337      	movs	r3, #55	; 0x37
     8ce:	2230      	movs	r2, #48	; 0x30
     8d0:	4694      	mov	ip, r2
     8d2:	44bc      	add	ip, r7
     8d4:	4463      	add	r3, ip
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	2b08      	cmp	r3, #8
     8da:	d101      	bne.n	8e0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8dc:	2340      	movs	r3, #64	; 0x40
     8de:	e012      	b.n	906 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
     8e0:	2337      	movs	r3, #55	; 0x37
     8e2:	2230      	movs	r2, #48	; 0x30
     8e4:	4694      	mov	ip, r2
     8e6:	44bc      	add	ip, r7
     8e8:	4463      	add	r3, ip
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	035b      	lsls	r3, r3, #13
     8ee:	001a      	movs	r2, r3
     8f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     8f2:	4313      	orrs	r3, r2
     8f4:	66bb      	str	r3, [r7, #104]	; 0x68
     8f6:	2300      	movs	r3, #0
     8f8:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
     8fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     8fc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     8fe:	b29a      	uxth	r2, r3
     900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     902:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     904:	2300      	movs	r3, #0
}
     906:	0018      	movs	r0, r3
     908:	46bd      	mov	sp, r7
     90a:	b01d      	add	sp, #116	; 0x74
     90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00009d09 	.word	0x00009d09
     914:	000005d5 	.word	0x000005d5
     918:	00001fff 	.word	0x00001fff

0000091c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     91c:	b580      	push	{r7, lr}
     91e:	b084      	sub	sp, #16
     920:	af00      	add	r7, sp, #0
     922:	0002      	movs	r2, r0
     924:	1dfb      	adds	r3, r7, #7
     926:	701a      	strb	r2, [r3, #0]
     928:	1dbb      	adds	r3, r7, #6
     92a:	1c0a      	adds	r2, r1, #0
     92c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     92e:	4b1a      	ldr	r3, [pc, #104]	; (998 <sercom_set_gclk_generator+0x7c>)
     930:	781b      	ldrb	r3, [r3, #0]
     932:	2201      	movs	r2, #1
     934:	4053      	eors	r3, r2
     936:	b2db      	uxtb	r3, r3
     938:	2b00      	cmp	r3, #0
     93a:	d103      	bne.n	944 <sercom_set_gclk_generator+0x28>
     93c:	1dbb      	adds	r3, r7, #6
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	2b00      	cmp	r3, #0
     942:	d01b      	beq.n	97c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     944:	230c      	movs	r3, #12
     946:	18fb      	adds	r3, r7, r3
     948:	0018      	movs	r0, r3
     94a:	4b14      	ldr	r3, [pc, #80]	; (99c <sercom_set_gclk_generator+0x80>)
     94c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     94e:	230c      	movs	r3, #12
     950:	18fb      	adds	r3, r7, r3
     952:	1dfa      	adds	r2, r7, #7
     954:	7812      	ldrb	r2, [r2, #0]
     956:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     958:	230c      	movs	r3, #12
     95a:	18fb      	adds	r3, r7, r3
     95c:	0019      	movs	r1, r3
     95e:	2013      	movs	r0, #19
     960:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <sercom_set_gclk_generator+0x84>)
     962:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     964:	2013      	movs	r0, #19
     966:	4b0f      	ldr	r3, [pc, #60]	; (9a4 <sercom_set_gclk_generator+0x88>)
     968:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     96a:	4b0b      	ldr	r3, [pc, #44]	; (998 <sercom_set_gclk_generator+0x7c>)
     96c:	1dfa      	adds	r2, r7, #7
     96e:	7812      	ldrb	r2, [r2, #0]
     970:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     972:	4b09      	ldr	r3, [pc, #36]	; (998 <sercom_set_gclk_generator+0x7c>)
     974:	2201      	movs	r2, #1
     976:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     978:	2300      	movs	r3, #0
     97a:	e008      	b.n	98e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     97c:	4b06      	ldr	r3, [pc, #24]	; (998 <sercom_set_gclk_generator+0x7c>)
     97e:	785b      	ldrb	r3, [r3, #1]
     980:	1dfa      	adds	r2, r7, #7
     982:	7812      	ldrb	r2, [r2, #0]
     984:	429a      	cmp	r2, r3
     986:	d101      	bne.n	98c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     988:	2300      	movs	r3, #0
     98a:	e000      	b.n	98e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     98c:	231d      	movs	r3, #29
}
     98e:	0018      	movs	r0, r3
     990:	46bd      	mov	sp, r7
     992:	b004      	add	sp, #16
     994:	bd80      	pop	{r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	200000fc 	.word	0x200000fc
     99c:	000005bd 	.word	0x000005bd
     9a0:	00005775 	.word	0x00005775
     9a4:	000057b9 	.word	0x000057b9

000009a8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
     9b0:	000a      	movs	r2, r1
     9b2:	1cfb      	adds	r3, r7, #3
     9b4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	4a4d      	ldr	r2, [pc, #308]	; (af0 <_sercom_get_default_pad+0x148>)
     9ba:	4293      	cmp	r3, r2
     9bc:	d03f      	beq.n	a3e <_sercom_get_default_pad+0x96>
     9be:	4a4c      	ldr	r2, [pc, #304]	; (af0 <_sercom_get_default_pad+0x148>)
     9c0:	4293      	cmp	r3, r2
     9c2:	d806      	bhi.n	9d2 <_sercom_get_default_pad+0x2a>
     9c4:	4a4b      	ldr	r2, [pc, #300]	; (af4 <_sercom_get_default_pad+0x14c>)
     9c6:	4293      	cmp	r3, r2
     9c8:	d00f      	beq.n	9ea <_sercom_get_default_pad+0x42>
     9ca:	4a4b      	ldr	r2, [pc, #300]	; (af8 <_sercom_get_default_pad+0x150>)
     9cc:	4293      	cmp	r3, r2
     9ce:	d021      	beq.n	a14 <_sercom_get_default_pad+0x6c>
     9d0:	e089      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     9d2:	4a4a      	ldr	r2, [pc, #296]	; (afc <_sercom_get_default_pad+0x154>)
     9d4:	4293      	cmp	r3, r2
     9d6:	d100      	bne.n	9da <_sercom_get_default_pad+0x32>
     9d8:	e05b      	b.n	a92 <_sercom_get_default_pad+0xea>
     9da:	4a49      	ldr	r2, [pc, #292]	; (b00 <_sercom_get_default_pad+0x158>)
     9dc:	4293      	cmp	r3, r2
     9de:	d100      	bne.n	9e2 <_sercom_get_default_pad+0x3a>
     9e0:	e06c      	b.n	abc <_sercom_get_default_pad+0x114>
     9e2:	4a48      	ldr	r2, [pc, #288]	; (b04 <_sercom_get_default_pad+0x15c>)
     9e4:	4293      	cmp	r3, r2
     9e6:	d03f      	beq.n	a68 <_sercom_get_default_pad+0xc0>
     9e8:	e07d      	b.n	ae6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ea:	1cfb      	adds	r3, r7, #3
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	2b01      	cmp	r3, #1
     9f0:	d00a      	beq.n	a08 <_sercom_get_default_pad+0x60>
     9f2:	dc02      	bgt.n	9fa <_sercom_get_default_pad+0x52>
     9f4:	2b00      	cmp	r3, #0
     9f6:	d005      	beq.n	a04 <_sercom_get_default_pad+0x5c>
     9f8:	e075      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     9fa:	2b02      	cmp	r3, #2
     9fc:	d006      	beq.n	a0c <_sercom_get_default_pad+0x64>
     9fe:	2b03      	cmp	r3, #3
     a00:	d006      	beq.n	a10 <_sercom_get_default_pad+0x68>
     a02:	e070      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a04:	4b40      	ldr	r3, [pc, #256]	; (b08 <_sercom_get_default_pad+0x160>)
     a06:	e06f      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a08:	4b40      	ldr	r3, [pc, #256]	; (b0c <_sercom_get_default_pad+0x164>)
     a0a:	e06d      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a0c:	4b40      	ldr	r3, [pc, #256]	; (b10 <_sercom_get_default_pad+0x168>)
     a0e:	e06b      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a10:	4b40      	ldr	r3, [pc, #256]	; (b14 <_sercom_get_default_pad+0x16c>)
     a12:	e069      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a14:	1cfb      	adds	r3, r7, #3
     a16:	781b      	ldrb	r3, [r3, #0]
     a18:	2b01      	cmp	r3, #1
     a1a:	d00a      	beq.n	a32 <_sercom_get_default_pad+0x8a>
     a1c:	dc02      	bgt.n	a24 <_sercom_get_default_pad+0x7c>
     a1e:	2b00      	cmp	r3, #0
     a20:	d005      	beq.n	a2e <_sercom_get_default_pad+0x86>
     a22:	e060      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a24:	2b02      	cmp	r3, #2
     a26:	d006      	beq.n	a36 <_sercom_get_default_pad+0x8e>
     a28:	2b03      	cmp	r3, #3
     a2a:	d006      	beq.n	a3a <_sercom_get_default_pad+0x92>
     a2c:	e05b      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a2e:	2303      	movs	r3, #3
     a30:	e05a      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a32:	4b39      	ldr	r3, [pc, #228]	; (b18 <_sercom_get_default_pad+0x170>)
     a34:	e058      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a36:	4b39      	ldr	r3, [pc, #228]	; (b1c <_sercom_get_default_pad+0x174>)
     a38:	e056      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a3a:	4b39      	ldr	r3, [pc, #228]	; (b20 <_sercom_get_default_pad+0x178>)
     a3c:	e054      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a3e:	1cfb      	adds	r3, r7, #3
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b01      	cmp	r3, #1
     a44:	d00a      	beq.n	a5c <_sercom_get_default_pad+0xb4>
     a46:	dc02      	bgt.n	a4e <_sercom_get_default_pad+0xa6>
     a48:	2b00      	cmp	r3, #0
     a4a:	d005      	beq.n	a58 <_sercom_get_default_pad+0xb0>
     a4c:	e04b      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a4e:	2b02      	cmp	r3, #2
     a50:	d006      	beq.n	a60 <_sercom_get_default_pad+0xb8>
     a52:	2b03      	cmp	r3, #3
     a54:	d006      	beq.n	a64 <_sercom_get_default_pad+0xbc>
     a56:	e046      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a58:	4b32      	ldr	r3, [pc, #200]	; (b24 <_sercom_get_default_pad+0x17c>)
     a5a:	e045      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a5c:	4b32      	ldr	r3, [pc, #200]	; (b28 <_sercom_get_default_pad+0x180>)
     a5e:	e043      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a60:	4b32      	ldr	r3, [pc, #200]	; (b2c <_sercom_get_default_pad+0x184>)
     a62:	e041      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a64:	4b32      	ldr	r3, [pc, #200]	; (b30 <_sercom_get_default_pad+0x188>)
     a66:	e03f      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a68:	1cfb      	adds	r3, r7, #3
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	2b01      	cmp	r3, #1
     a6e:	d00a      	beq.n	a86 <_sercom_get_default_pad+0xde>
     a70:	dc02      	bgt.n	a78 <_sercom_get_default_pad+0xd0>
     a72:	2b00      	cmp	r3, #0
     a74:	d005      	beq.n	a82 <_sercom_get_default_pad+0xda>
     a76:	e036      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a78:	2b02      	cmp	r3, #2
     a7a:	d006      	beq.n	a8a <_sercom_get_default_pad+0xe2>
     a7c:	2b03      	cmp	r3, #3
     a7e:	d006      	beq.n	a8e <_sercom_get_default_pad+0xe6>
     a80:	e031      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     a82:	4b2c      	ldr	r3, [pc, #176]	; (b34 <_sercom_get_default_pad+0x18c>)
     a84:	e030      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a86:	4b2c      	ldr	r3, [pc, #176]	; (b38 <_sercom_get_default_pad+0x190>)
     a88:	e02e      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a8a:	4b2c      	ldr	r3, [pc, #176]	; (b3c <_sercom_get_default_pad+0x194>)
     a8c:	e02c      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a8e:	4b2c      	ldr	r3, [pc, #176]	; (b40 <_sercom_get_default_pad+0x198>)
     a90:	e02a      	b.n	ae8 <_sercom_get_default_pad+0x140>
     a92:	1cfb      	adds	r3, r7, #3
     a94:	781b      	ldrb	r3, [r3, #0]
     a96:	2b01      	cmp	r3, #1
     a98:	d00a      	beq.n	ab0 <_sercom_get_default_pad+0x108>
     a9a:	dc02      	bgt.n	aa2 <_sercom_get_default_pad+0xfa>
     a9c:	2b00      	cmp	r3, #0
     a9e:	d005      	beq.n	aac <_sercom_get_default_pad+0x104>
     aa0:	e021      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     aa2:	2b02      	cmp	r3, #2
     aa4:	d006      	beq.n	ab4 <_sercom_get_default_pad+0x10c>
     aa6:	2b03      	cmp	r3, #3
     aa8:	d006      	beq.n	ab8 <_sercom_get_default_pad+0x110>
     aaa:	e01c      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     aac:	4b25      	ldr	r3, [pc, #148]	; (b44 <_sercom_get_default_pad+0x19c>)
     aae:	e01b      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ab0:	4b25      	ldr	r3, [pc, #148]	; (b48 <_sercom_get_default_pad+0x1a0>)
     ab2:	e019      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ab4:	4b25      	ldr	r3, [pc, #148]	; (b4c <_sercom_get_default_pad+0x1a4>)
     ab6:	e017      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ab8:	4b25      	ldr	r3, [pc, #148]	; (b50 <_sercom_get_default_pad+0x1a8>)
     aba:	e015      	b.n	ae8 <_sercom_get_default_pad+0x140>
     abc:	1cfb      	adds	r3, r7, #3
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	2b01      	cmp	r3, #1
     ac2:	d00a      	beq.n	ada <_sercom_get_default_pad+0x132>
     ac4:	dc02      	bgt.n	acc <_sercom_get_default_pad+0x124>
     ac6:	2b00      	cmp	r3, #0
     ac8:	d005      	beq.n	ad6 <_sercom_get_default_pad+0x12e>
     aca:	e00c      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     acc:	2b02      	cmp	r3, #2
     ace:	d006      	beq.n	ade <_sercom_get_default_pad+0x136>
     ad0:	2b03      	cmp	r3, #3
     ad2:	d006      	beq.n	ae2 <_sercom_get_default_pad+0x13a>
     ad4:	e007      	b.n	ae6 <_sercom_get_default_pad+0x13e>
     ad6:	4b1f      	ldr	r3, [pc, #124]	; (b54 <_sercom_get_default_pad+0x1ac>)
     ad8:	e006      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ada:	4b1f      	ldr	r3, [pc, #124]	; (b58 <_sercom_get_default_pad+0x1b0>)
     adc:	e004      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ade:	4b1f      	ldr	r3, [pc, #124]	; (b5c <_sercom_get_default_pad+0x1b4>)
     ae0:	e002      	b.n	ae8 <_sercom_get_default_pad+0x140>
     ae2:	4b1f      	ldr	r3, [pc, #124]	; (b60 <_sercom_get_default_pad+0x1b8>)
     ae4:	e000      	b.n	ae8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     ae6:	2300      	movs	r3, #0
}
     ae8:	0018      	movs	r0, r3
     aea:	46bd      	mov	sp, r7
     aec:	b002      	add	sp, #8
     aee:	bd80      	pop	{r7, pc}
     af0:	42001000 	.word	0x42001000
     af4:	42000800 	.word	0x42000800
     af8:	42000c00 	.word	0x42000c00
     afc:	42001800 	.word	0x42001800
     b00:	42001c00 	.word	0x42001c00
     b04:	42001400 	.word	0x42001400
     b08:	00040003 	.word	0x00040003
     b0c:	00050003 	.word	0x00050003
     b10:	00060003 	.word	0x00060003
     b14:	00070003 	.word	0x00070003
     b18:	00010003 	.word	0x00010003
     b1c:	001e0003 	.word	0x001e0003
     b20:	001f0003 	.word	0x001f0003
     b24:	00080003 	.word	0x00080003
     b28:	00090003 	.word	0x00090003
     b2c:	000a0003 	.word	0x000a0003
     b30:	000b0003 	.word	0x000b0003
     b34:	00100003 	.word	0x00100003
     b38:	00110003 	.word	0x00110003
     b3c:	00120003 	.word	0x00120003
     b40:	00130003 	.word	0x00130003
     b44:	000c0003 	.word	0x000c0003
     b48:	000d0003 	.word	0x000d0003
     b4c:	000e0003 	.word	0x000e0003
     b50:	000f0003 	.word	0x000f0003
     b54:	00160003 	.word	0x00160003
     b58:	00170003 	.word	0x00170003
     b5c:	00180003 	.word	0x00180003
     b60:	00190003 	.word	0x00190003

00000b64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b64:	b590      	push	{r4, r7, lr}
     b66:	b08b      	sub	sp, #44	; 0x2c
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b6c:	230c      	movs	r3, #12
     b6e:	18fb      	adds	r3, r7, r3
     b70:	4a0f      	ldr	r2, [pc, #60]	; (bb0 <_sercom_get_sercom_inst_index+0x4c>)
     b72:	ca13      	ldmia	r2!, {r0, r1, r4}
     b74:	c313      	stmia	r3!, {r0, r1, r4}
     b76:	ca13      	ldmia	r2!, {r0, r1, r4}
     b78:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b7a:	2300      	movs	r3, #0
     b7c:	627b      	str	r3, [r7, #36]	; 0x24
     b7e:	e00e      	b.n	b9e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b80:	230c      	movs	r3, #12
     b82:	18fb      	adds	r3, r7, r3
     b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b86:	0092      	lsls	r2, r2, #2
     b88:	58d3      	ldr	r3, [r2, r3]
     b8a:	1e1a      	subs	r2, r3, #0
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	429a      	cmp	r2, r3
     b90:	d102      	bne.n	b98 <_sercom_get_sercom_inst_index+0x34>
			return i;
     b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b94:	b2db      	uxtb	r3, r3
     b96:	e006      	b.n	ba6 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b9a:	3301      	adds	r3, #1
     b9c:	627b      	str	r3, [r7, #36]	; 0x24
     b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ba0:	2b05      	cmp	r3, #5
     ba2:	d9ed      	bls.n	b80 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ba4:	2300      	movs	r3, #0
}
     ba6:	0018      	movs	r0, r3
     ba8:	46bd      	mov	sp, r7
     baa:	b00b      	add	sp, #44	; 0x2c
     bac:	bd90      	pop	{r4, r7, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00009dd0 	.word	0x00009dd0

00000bb4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     bb4:	b580      	push	{r7, lr}
     bb6:	b082      	sub	sp, #8
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	2280      	movs	r2, #128	; 0x80
     bc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	2200      	movs	r2, #0
     bc6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bc8:	687b      	ldr	r3, [r7, #4]
     bca:	2201      	movs	r2, #1
     bcc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	2200      	movs	r2, #0
     bd2:	70da      	strb	r2, [r3, #3]
}
     bd4:	46c0      	nop			; (mov r8, r8)
     bd6:	46bd      	mov	sp, r7
     bd8:	b002      	add	sp, #8
     bda:	bd80      	pop	{r7, pc}

00000bdc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b084      	sub	sp, #16
     be0:	af00      	add	r7, sp, #0
     be2:	0002      	movs	r2, r0
     be4:	1dfb      	adds	r3, r7, #7
     be6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     be8:	230f      	movs	r3, #15
     bea:	18fb      	adds	r3, r7, r3
     bec:	1dfa      	adds	r2, r7, #7
     bee:	7812      	ldrb	r2, [r2, #0]
     bf0:	09d2      	lsrs	r2, r2, #7
     bf2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     bf4:	230e      	movs	r3, #14
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	1dfa      	adds	r2, r7, #7
     bfa:	7812      	ldrb	r2, [r2, #0]
     bfc:	0952      	lsrs	r2, r2, #5
     bfe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     c00:	4b0d      	ldr	r3, [pc, #52]	; (c38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     c02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     c04:	230f      	movs	r3, #15
     c06:	18fb      	adds	r3, r7, r3
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d10f      	bne.n	c2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     c0e:	230f      	movs	r3, #15
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
     c14:	009b      	lsls	r3, r3, #2
     c16:	2210      	movs	r2, #16
     c18:	4694      	mov	ip, r2
     c1a:	44bc      	add	ip, r7
     c1c:	4463      	add	r3, ip
     c1e:	3b08      	subs	r3, #8
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	230e      	movs	r3, #14
     c24:	18fb      	adds	r3, r7, r3
     c26:	781b      	ldrb	r3, [r3, #0]
     c28:	01db      	lsls	r3, r3, #7
     c2a:	18d3      	adds	r3, r2, r3
     c2c:	e000      	b.n	c30 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     c2e:	2300      	movs	r3, #0
	}
}
     c30:	0018      	movs	r0, r3
     c32:	46bd      	mov	sp, r7
     c34:	b004      	add	sp, #16
     c36:	bd80      	pop	{r7, pc}
     c38:	41004400 	.word	0x41004400

00000c3c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b086      	sub	sp, #24
     c40:	af00      	add	r7, sp, #0
     c42:	0002      	movs	r2, r0
     c44:	1dfb      	adds	r3, r7, #7
     c46:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     c48:	1dfb      	adds	r3, r7, #7
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	0018      	movs	r0, r3
     c4e:	4b19      	ldr	r3, [pc, #100]	; (cb4 <system_pinmux_pin_get_mux_position+0x78>)
     c50:	4798      	blx	r3
     c52:	0003      	movs	r3, r0
     c54:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     c56:	1dfb      	adds	r3, r7, #7
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	221f      	movs	r2, #31
     c5c:	4013      	ands	r3, r2
     c5e:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     c60:	697a      	ldr	r2, [r7, #20]
     c62:	2140      	movs	r1, #64	; 0x40
     c64:	693b      	ldr	r3, [r7, #16]
     c66:	18d3      	adds	r3, r2, r3
     c68:	185b      	adds	r3, r3, r1
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	b2db      	uxtb	r3, r3
     c6e:	001a      	movs	r2, r3
     c70:	2301      	movs	r3, #1
     c72:	4013      	ands	r3, r2
     c74:	d101      	bne.n	c7a <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     c76:	2380      	movs	r3, #128	; 0x80
     c78:	e018      	b.n	cac <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     c7a:	693b      	ldr	r3, [r7, #16]
     c7c:	085b      	lsrs	r3, r3, #1
     c7e:	697a      	ldr	r2, [r7, #20]
     c80:	2130      	movs	r1, #48	; 0x30
     c82:	18d3      	adds	r3, r2, r3
     c84:	185b      	adds	r3, r3, r1
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	b2db      	uxtb	r3, r3
     c8a:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     c8c:	693b      	ldr	r3, [r7, #16]
     c8e:	2201      	movs	r2, #1
     c90:	4013      	ands	r3, r2
     c92:	d006      	beq.n	ca2 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     c94:	68fb      	ldr	r3, [r7, #12]
     c96:	091b      	lsrs	r3, r3, #4
     c98:	b2db      	uxtb	r3, r3
     c9a:	220f      	movs	r2, #15
     c9c:	4013      	ands	r3, r2
     c9e:	b2db      	uxtb	r3, r3
     ca0:	e004      	b.n	cac <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	b2db      	uxtb	r3, r3
     ca6:	220f      	movs	r2, #15
     ca8:	4013      	ands	r3, r2
     caa:	b2db      	uxtb	r3, r3
	}
}
     cac:	0018      	movs	r0, r3
     cae:	46bd      	mov	sp, r7
     cb0:	b006      	add	sp, #24
     cb2:	bd80      	pop	{r7, pc}
     cb4:	00000bdd 	.word	0x00000bdd

00000cb8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	0002      	movs	r2, r0
     cc0:	1dfb      	adds	r3, r7, #7
     cc2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     cc4:	1dfb      	adds	r3, r7, #7
     cc6:	781b      	ldrb	r3, [r3, #0]
     cc8:	0018      	movs	r0, r3
     cca:	4b03      	ldr	r3, [pc, #12]	; (cd8 <port_get_group_from_gpio_pin+0x20>)
     ccc:	4798      	blx	r3
     cce:	0003      	movs	r3, r0
}
     cd0:	0018      	movs	r0, r3
     cd2:	46bd      	mov	sp, r7
     cd4:	b002      	add	sp, #8
     cd6:	bd80      	pop	{r7, pc}
     cd8:	00000bdd 	.word	0x00000bdd

00000cdc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     cdc:	b580      	push	{r7, lr}
     cde:	b084      	sub	sp, #16
     ce0:	af00      	add	r7, sp, #0
     ce2:	0002      	movs	r2, r0
     ce4:	1dfb      	adds	r3, r7, #7
     ce6:	701a      	strb	r2, [r3, #0]
     ce8:	1dbb      	adds	r3, r7, #6
     cea:	1c0a      	adds	r2, r1, #0
     cec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     cee:	1dfb      	adds	r3, r7, #7
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	0018      	movs	r0, r3
     cf4:	4b0d      	ldr	r3, [pc, #52]	; (d2c <port_pin_set_output_level+0x50>)
     cf6:	4798      	blx	r3
     cf8:	0003      	movs	r3, r0
     cfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cfc:	1dfb      	adds	r3, r7, #7
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	221f      	movs	r2, #31
     d02:	4013      	ands	r3, r2
     d04:	2201      	movs	r2, #1
     d06:	409a      	lsls	r2, r3
     d08:	0013      	movs	r3, r2
     d0a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     d0c:	1dbb      	adds	r3, r7, #6
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b00      	cmp	r3, #0
     d12:	d003      	beq.n	d1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     d14:	68fb      	ldr	r3, [r7, #12]
     d16:	68ba      	ldr	r2, [r7, #8]
     d18:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     d1a:	e002      	b.n	d22 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d1c:	68fb      	ldr	r3, [r7, #12]
     d1e:	68ba      	ldr	r2, [r7, #8]
     d20:	615a      	str	r2, [r3, #20]
	}
}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	46bd      	mov	sp, r7
     d26:	b004      	add	sp, #16
     d28:	bd80      	pop	{r7, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000cb9 	.word	0x00000cb9

00000d30 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	2200      	movs	r2, #0
     d3c:	701a      	strb	r2, [r3, #0]
}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	b002      	add	sp, #8
     d44:	bd80      	pop	{r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)

00000d48 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	0002      	movs	r2, r0
     d50:	6039      	str	r1, [r7, #0]
     d52:	1dfb      	adds	r3, r7, #7
     d54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d56:	1dfb      	adds	r3, r7, #7
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b01      	cmp	r3, #1
     d5c:	d00a      	beq.n	d74 <system_apb_clock_set_mask+0x2c>
     d5e:	2b02      	cmp	r3, #2
     d60:	d00f      	beq.n	d82 <system_apb_clock_set_mask+0x3a>
     d62:	2b00      	cmp	r3, #0
     d64:	d114      	bne.n	d90 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d66:	4b0e      	ldr	r3, [pc, #56]	; (da0 <system_apb_clock_set_mask+0x58>)
     d68:	4a0d      	ldr	r2, [pc, #52]	; (da0 <system_apb_clock_set_mask+0x58>)
     d6a:	6991      	ldr	r1, [r2, #24]
     d6c:	683a      	ldr	r2, [r7, #0]
     d6e:	430a      	orrs	r2, r1
     d70:	619a      	str	r2, [r3, #24]
			break;
     d72:	e00f      	b.n	d94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d74:	4b0a      	ldr	r3, [pc, #40]	; (da0 <system_apb_clock_set_mask+0x58>)
     d76:	4a0a      	ldr	r2, [pc, #40]	; (da0 <system_apb_clock_set_mask+0x58>)
     d78:	69d1      	ldr	r1, [r2, #28]
     d7a:	683a      	ldr	r2, [r7, #0]
     d7c:	430a      	orrs	r2, r1
     d7e:	61da      	str	r2, [r3, #28]
			break;
     d80:	e008      	b.n	d94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d82:	4b07      	ldr	r3, [pc, #28]	; (da0 <system_apb_clock_set_mask+0x58>)
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <system_apb_clock_set_mask+0x58>)
     d86:	6a11      	ldr	r1, [r2, #32]
     d88:	683a      	ldr	r2, [r7, #0]
     d8a:	430a      	orrs	r2, r1
     d8c:	621a      	str	r2, [r3, #32]
			break;
     d8e:	e001      	b.n	d94 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     d90:	2317      	movs	r3, #23
     d92:	e000      	b.n	d96 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     d94:	2300      	movs	r3, #0
}
     d96:	0018      	movs	r0, r3
     d98:	46bd      	mov	sp, r7
     d9a:	b002      	add	sp, #8
     d9c:	bd80      	pop	{r7, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	40000400 	.word	0x40000400

00000da4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     da4:	b580      	push	{r7, lr}
     da6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     da8:	4b05      	ldr	r3, [pc, #20]	; (dc0 <system_is_debugger_present+0x1c>)
     daa:	789b      	ldrb	r3, [r3, #2]
     dac:	b2db      	uxtb	r3, r3
     dae:	001a      	movs	r2, r3
     db0:	2302      	movs	r3, #2
     db2:	4013      	ands	r3, r2
     db4:	1e5a      	subs	r2, r3, #1
     db6:	4193      	sbcs	r3, r2
     db8:	b2db      	uxtb	r3, r3
}
     dba:	0018      	movs	r0, r3
     dbc:	46bd      	mov	sp, r7
     dbe:	bd80      	pop	{r7, pc}
     dc0:	41002000 	.word	0x41002000

00000dc4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b084      	sub	sp, #16
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	7e1b      	ldrb	r3, [r3, #24]
     dd6:	b2db      	uxtb	r3, r3
     dd8:	001a      	movs	r2, r3
     dda:	2301      	movs	r3, #1
     ddc:	4013      	ands	r3, r2
     dde:	1e5a      	subs	r2, r3, #1
     de0:	4193      	sbcs	r3, r2
     de2:	b2db      	uxtb	r3, r3
}
     de4:	0018      	movs	r0, r3
     de6:	46bd      	mov	sp, r7
     de8:	b004      	add	sp, #16
     dea:	bd80      	pop	{r7, pc}

00000dec <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     dec:	b580      	push	{r7, lr}
     dee:	b084      	sub	sp, #16
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	7e1b      	ldrb	r3, [r3, #24]
     dfe:	b2db      	uxtb	r3, r3
     e00:	001a      	movs	r2, r3
     e02:	2304      	movs	r3, #4
     e04:	4013      	ands	r3, r2
     e06:	1e5a      	subs	r2, r3, #1
     e08:	4193      	sbcs	r3, r2
     e0a:	b2db      	uxtb	r3, r3
}
     e0c:	0018      	movs	r0, r3
     e0e:	46bd      	mov	sp, r7
     e10:	b004      	add	sp, #16
     e12:	bd80      	pop	{r7, pc}

00000e14 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     e14:	b580      	push	{r7, lr}
     e16:	b084      	sub	sp, #16
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	000a      	movs	r2, r1
     e1e:	1cbb      	adds	r3, r7, #2
     e20:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	0018      	movs	r0, r3
     e2c:	4b0a      	ldr	r3, [pc, #40]	; (e58 <spi_write+0x44>)
     e2e:	4798      	blx	r3
     e30:	0003      	movs	r3, r0
     e32:	001a      	movs	r2, r3
     e34:	2301      	movs	r3, #1
     e36:	4053      	eors	r3, r2
     e38:	b2db      	uxtb	r3, r3
     e3a:	2b00      	cmp	r3, #0
     e3c:	d001      	beq.n	e42 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     e3e:	2305      	movs	r3, #5
     e40:	e006      	b.n	e50 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e42:	1cbb      	adds	r3, r7, #2
     e44:	881b      	ldrh	r3, [r3, #0]
     e46:	05db      	lsls	r3, r3, #23
     e48:	0dda      	lsrs	r2, r3, #23
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     e4e:	2300      	movs	r3, #0
}
     e50:	0018      	movs	r0, r3
     e52:	46bd      	mov	sp, r7
     e54:	b004      	add	sp, #16
     e56:	bd80      	pop	{r7, pc}
     e58:	00000dc5 	.word	0x00000dc5

00000e5c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	b084      	sub	sp, #16
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	0018      	movs	r0, r3
     e70:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <spi_read+0x8c>)
     e72:	4798      	blx	r3
     e74:	0003      	movs	r3, r0
     e76:	001a      	movs	r2, r3
     e78:	2301      	movs	r3, #1
     e7a:	4053      	eors	r3, r2
     e7c:	b2db      	uxtb	r3, r3
     e7e:	2b00      	cmp	r3, #0
     e80:	d001      	beq.n	e86 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     e82:	2310      	movs	r3, #16
     e84:	e02c      	b.n	ee0 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     e86:	230f      	movs	r3, #15
     e88:	18fb      	adds	r3, r7, r3
     e8a:	2200      	movs	r2, #0
     e8c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e8e:	68bb      	ldr	r3, [r7, #8]
     e90:	8b5b      	ldrh	r3, [r3, #26]
     e92:	b29b      	uxth	r3, r3
     e94:	001a      	movs	r2, r3
     e96:	2304      	movs	r3, #4
     e98:	4013      	ands	r3, r2
     e9a:	d00b      	beq.n	eb4 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     e9c:	230f      	movs	r3, #15
     e9e:	18fb      	adds	r3, r7, r3
     ea0:	221e      	movs	r2, #30
     ea2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ea4:	68bb      	ldr	r3, [r7, #8]
     ea6:	8b5b      	ldrh	r3, [r3, #26]
     ea8:	b29b      	uxth	r3, r3
     eaa:	2204      	movs	r2, #4
     eac:	4313      	orrs	r3, r2
     eae:	b29a      	uxth	r2, r3
     eb0:	68bb      	ldr	r3, [r7, #8]
     eb2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb4:	687b      	ldr	r3, [r7, #4]
     eb6:	799b      	ldrb	r3, [r3, #6]
     eb8:	2b01      	cmp	r3, #1
     eba:	d108      	bne.n	ece <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ebc:	68bb      	ldr	r3, [r7, #8]
     ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ec0:	b29b      	uxth	r3, r3
     ec2:	05db      	lsls	r3, r3, #23
     ec4:	0ddb      	lsrs	r3, r3, #23
     ec6:	b29a      	uxth	r2, r3
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	801a      	strh	r2, [r3, #0]
     ecc:	e005      	b.n	eda <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ece:	68bb      	ldr	r3, [r7, #8]
     ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ed2:	b2db      	uxtb	r3, r3
     ed4:	b29a      	uxth	r2, r3
     ed6:	683b      	ldr	r3, [r7, #0]
     ed8:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     eda:	230f      	movs	r3, #15
     edc:	18fb      	adds	r3, r7, r3
     ede:	781b      	ldrb	r3, [r3, #0]
}
     ee0:	0018      	movs	r0, r3
     ee2:	46bd      	mov	sp, r7
     ee4:	b004      	add	sp, #16
     ee6:	bd80      	pop	{r7, pc}
     ee8:	00000ded 	.word	0x00000ded

00000eec <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     eec:	b590      	push	{r4, r7, lr}
     eee:	b093      	sub	sp, #76	; 0x4c
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
     ef4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     f02:	231c      	movs	r3, #28
     f04:	18fb      	adds	r3, r7, r3
     f06:	0018      	movs	r0, r3
     f08:	4b85      	ldr	r3, [pc, #532]	; (1120 <_spi_set_config+0x234>)
     f0a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f0c:	231c      	movs	r3, #28
     f0e:	18fb      	adds	r3, r7, r3
     f10:	2200      	movs	r2, #0
     f12:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     f14:	683b      	ldr	r3, [r7, #0]
     f16:	781b      	ldrb	r3, [r3, #0]
     f18:	2b00      	cmp	r3, #0
     f1a:	d103      	bne.n	f24 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f1c:	231c      	movs	r3, #28
     f1e:	18fb      	adds	r3, r7, r3
     f20:	2200      	movs	r2, #0
     f22:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     f24:	683b      	ldr	r3, [r7, #0]
     f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     f28:	230c      	movs	r3, #12
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     f32:	230c      	movs	r3, #12
     f34:	18fb      	adds	r3, r7, r3
     f36:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     f38:	683b      	ldr	r3, [r7, #0]
     f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     f3c:	230c      	movs	r3, #12
     f3e:	18fb      	adds	r3, r7, r3
     f40:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     f42:	683b      	ldr	r3, [r7, #0]
     f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     f46:	230c      	movs	r3, #12
     f48:	18fb      	adds	r3, r7, r3
     f4a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f4c:	2347      	movs	r3, #71	; 0x47
     f4e:	18fb      	adds	r3, r7, r3
     f50:	2200      	movs	r2, #0
     f52:	701a      	strb	r2, [r3, #0]
     f54:	e02c      	b.n	fb0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f56:	2347      	movs	r3, #71	; 0x47
     f58:	18fb      	adds	r3, r7, r3
     f5a:	781a      	ldrb	r2, [r3, #0]
     f5c:	230c      	movs	r3, #12
     f5e:	18fb      	adds	r3, r7, r3
     f60:	0092      	lsls	r2, r2, #2
     f62:	58d3      	ldr	r3, [r2, r3]
     f64:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f68:	2b00      	cmp	r3, #0
     f6a:	d109      	bne.n	f80 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f6c:	2347      	movs	r3, #71	; 0x47
     f6e:	18fb      	adds	r3, r7, r3
     f70:	781a      	ldrb	r2, [r3, #0]
     f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f74:	0011      	movs	r1, r2
     f76:	0018      	movs	r0, r3
     f78:	4b6a      	ldr	r3, [pc, #424]	; (1124 <_spi_set_config+0x238>)
     f7a:	4798      	blx	r3
     f7c:	0003      	movs	r3, r0
     f7e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f82:	3301      	adds	r3, #1
     f84:	d00d      	beq.n	fa2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f88:	b2da      	uxtb	r2, r3
     f8a:	231c      	movs	r3, #28
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f92:	0c1b      	lsrs	r3, r3, #16
     f94:	b2db      	uxtb	r3, r3
     f96:	221c      	movs	r2, #28
     f98:	18ba      	adds	r2, r7, r2
     f9a:	0011      	movs	r1, r2
     f9c:	0018      	movs	r0, r3
     f9e:	4b62      	ldr	r3, [pc, #392]	; (1128 <_spi_set_config+0x23c>)
     fa0:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fa2:	2347      	movs	r3, #71	; 0x47
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	781a      	ldrb	r2, [r3, #0]
     fa8:	2347      	movs	r3, #71	; 0x47
     faa:	18fb      	adds	r3, r7, r3
     fac:	3201      	adds	r2, #1
     fae:	701a      	strb	r2, [r3, #0]
     fb0:	2347      	movs	r3, #71	; 0x47
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	2b03      	cmp	r3, #3
     fb8:	d9cd      	bls.n	f56 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     fba:	683b      	ldr	r3, [r7, #0]
     fbc:	781a      	ldrb	r2, [r3, #0]
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     fc2:	683b      	ldr	r3, [r7, #0]
     fc4:	7c1a      	ldrb	r2, [r3, #16]
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     fca:	683b      	ldr	r3, [r7, #0]
     fcc:	7c9a      	ldrb	r2, [r3, #18]
     fce:	687b      	ldr	r3, [r7, #4]
     fd0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	7d1a      	ldrb	r2, [r3, #20]
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     fda:	230a      	movs	r3, #10
     fdc:	18fb      	adds	r3, r7, r3
     fde:	2200      	movs	r2, #0
     fe0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     fe2:	2300      	movs	r3, #0
     fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     fe6:	2300      	movs	r3, #0
     fe8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	2b01      	cmp	r3, #1
     ff0:	d129      	bne.n	1046 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	0018      	movs	r0, r3
     ff8:	4b4c      	ldr	r3, [pc, #304]	; (112c <_spi_set_config+0x240>)
     ffa:	4798      	blx	r3
     ffc:	0003      	movs	r3, r0
     ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1002:	3314      	adds	r3, #20
    1004:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1006:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1008:	b2db      	uxtb	r3, r3
    100a:	0018      	movs	r0, r3
    100c:	4b48      	ldr	r3, [pc, #288]	; (1130 <_spi_set_config+0x244>)
    100e:	4798      	blx	r3
    1010:	0003      	movs	r3, r0
    1012:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1014:	683b      	ldr	r3, [r7, #0]
    1016:	699b      	ldr	r3, [r3, #24]
    1018:	2223      	movs	r2, #35	; 0x23
    101a:	18bc      	adds	r4, r7, r2
    101c:	220a      	movs	r2, #10
    101e:	18ba      	adds	r2, r7, r2
    1020:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1022:	0018      	movs	r0, r3
    1024:	4b43      	ldr	r3, [pc, #268]	; (1134 <_spi_set_config+0x248>)
    1026:	4798      	blx	r3
    1028:	0003      	movs	r3, r0
    102a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    102c:	2323      	movs	r3, #35	; 0x23
    102e:	18fb      	adds	r3, r7, r3
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	d001      	beq.n	103a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1036:	2317      	movs	r3, #23
    1038:	e06d      	b.n	1116 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    103a:	230a      	movs	r3, #10
    103c:	18fb      	adds	r3, r7, r3
    103e:	881b      	ldrh	r3, [r3, #0]
    1040:	b2da      	uxtb	r2, r3
    1042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1044:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1046:	683b      	ldr	r3, [r7, #0]
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	2b00      	cmp	r3, #0
    104c:	d11a      	bne.n	1084 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    104e:	683b      	ldr	r3, [r7, #0]
    1050:	699b      	ldr	r3, [r3, #24]
    1052:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1054:	683b      	ldr	r3, [r7, #0]
    1056:	8b9b      	ldrh	r3, [r3, #28]
    1058:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    105e:	683a      	ldr	r2, [r7, #0]
    1060:	7f92      	ldrb	r2, [r2, #30]
    1062:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1064:	683a      	ldr	r2, [r7, #0]
    1066:	7fd2      	ldrb	r2, [r2, #31]
    1068:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    106a:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    106c:	431a      	orrs	r2, r3
    106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1070:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    1072:	683b      	ldr	r3, [r7, #0]
    1074:	2220      	movs	r2, #32
    1076:	5c9b      	ldrb	r3, [r3, r2]
    1078:	2b00      	cmp	r3, #0
    107a:	d003      	beq.n	1084 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    107c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    107e:	2240      	movs	r2, #64	; 0x40
    1080:	4313      	orrs	r3, r2
    1082:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1084:	683b      	ldr	r3, [r7, #0]
    1086:	685b      	ldr	r3, [r3, #4]
    1088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    108a:	4313      	orrs	r3, r2
    108c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    108e:	683b      	ldr	r3, [r7, #0]
    1090:	689b      	ldr	r3, [r3, #8]
    1092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1094:	4313      	orrs	r3, r2
    1096:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1098:	683b      	ldr	r3, [r7, #0]
    109a:	68db      	ldr	r3, [r3, #12]
    109c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    109e:	4313      	orrs	r3, r2
    10a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    10a2:	683b      	ldr	r3, [r7, #0]
    10a4:	7c1b      	ldrb	r3, [r3, #16]
    10a6:	001a      	movs	r2, r3
    10a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10aa:	4313      	orrs	r3, r2
    10ac:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	7c5b      	ldrb	r3, [r3, #17]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d103      	bne.n	10be <_spi_set_config+0x1d2>
    10b6:	4b20      	ldr	r3, [pc, #128]	; (1138 <_spi_set_config+0x24c>)
    10b8:	4798      	blx	r3
    10ba:	1e03      	subs	r3, r0, #0
    10bc:	d003      	beq.n	10c6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    10be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	4313      	orrs	r3, r2
    10c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	7c9b      	ldrb	r3, [r3, #18]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d004      	beq.n	10d8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    10ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10d0:	2280      	movs	r2, #128	; 0x80
    10d2:	0292      	lsls	r2, r2, #10
    10d4:	4313      	orrs	r3, r2
    10d6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    10d8:	683b      	ldr	r3, [r7, #0]
    10da:	7cdb      	ldrb	r3, [r3, #19]
    10dc:	2b00      	cmp	r3, #0
    10de:	d004      	beq.n	10ea <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    10e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10e2:	2280      	movs	r2, #128	; 0x80
    10e4:	0092      	lsls	r2, r2, #2
    10e6:	4313      	orrs	r3, r2
    10e8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    10ea:	683b      	ldr	r3, [r7, #0]
    10ec:	7d1b      	ldrb	r3, [r3, #20]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d004      	beq.n	10fc <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    10f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f4:	2280      	movs	r2, #128	; 0x80
    10f6:	0192      	lsls	r2, r2, #6
    10f8:	4313      	orrs	r3, r2
    10fa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    10fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10fe:	681a      	ldr	r2, [r3, #0]
    1100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1102:	431a      	orrs	r2, r3
    1104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1106:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110a:	685a      	ldr	r2, [r3, #4]
    110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    110e:	431a      	orrs	r2, r3
    1110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1112:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1114:	2300      	movs	r3, #0
}
    1116:	0018      	movs	r0, r3
    1118:	46bd      	mov	sp, r7
    111a:	b013      	add	sp, #76	; 0x4c
    111c:	bd90      	pop	{r4, r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	00000bb5 	.word	0x00000bb5
    1124:	000009a9 	.word	0x000009a9
    1128:	00005a61 	.word	0x00005a61
    112c:	00000b65 	.word	0x00000b65
    1130:	00005899 	.word	0x00005899
    1134:	000006b5 	.word	0x000006b5
    1138:	00000da5 	.word	0x00000da5

0000113c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    113c:	b590      	push	{r4, r7, lr}
    113e:	b091      	sub	sp, #68	; 0x44
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1156:	230c      	movs	r3, #12
    1158:	18fb      	adds	r3, r7, r3
    115a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    115c:	683b      	ldr	r3, [r7, #0]
    115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1160:	230c      	movs	r3, #12
    1162:	18fb      	adds	r3, r7, r3
    1164:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    1166:	683b      	ldr	r3, [r7, #0]
    1168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    116a:	230c      	movs	r3, #12
    116c:	18fb      	adds	r3, r7, r3
    116e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1174:	230c      	movs	r3, #12
    1176:	18fb      	adds	r3, r7, r3
    1178:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    117a:	233f      	movs	r3, #63	; 0x3f
    117c:	18fb      	adds	r3, r7, r3
    117e:	2200      	movs	r2, #0
    1180:	701a      	strb	r2, [r3, #0]
    1182:	e030      	b.n	11e6 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1184:	233f      	movs	r3, #63	; 0x3f
    1186:	18fb      	adds	r3, r7, r3
    1188:	781a      	ldrb	r2, [r3, #0]
    118a:	230c      	movs	r3, #12
    118c:	18fb      	adds	r3, r7, r3
    118e:	0092      	lsls	r2, r2, #2
    1190:	58d3      	ldr	r3, [r2, r3]
    1192:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    1194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1196:	2b00      	cmp	r3, #0
    1198:	d109      	bne.n	11ae <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    119a:	233f      	movs	r3, #63	; 0x3f
    119c:	18fb      	adds	r3, r7, r3
    119e:	781a      	ldrb	r2, [r3, #0]
    11a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    11a2:	0011      	movs	r1, r2
    11a4:	0018      	movs	r0, r3
    11a6:	4b6e      	ldr	r3, [pc, #440]	; (1360 <_spi_check_config+0x224>)
    11a8:	4798      	blx	r3
    11aa:	0003      	movs	r3, r0
    11ac:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    11ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b0:	3301      	adds	r3, #1
    11b2:	d010      	beq.n	11d6 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    11b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b6:	041b      	lsls	r3, r3, #16
    11b8:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    11ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11bc:	0c1b      	lsrs	r3, r3, #16
    11be:	b2db      	uxtb	r3, r3
    11c0:	0018      	movs	r0, r3
    11c2:	4b68      	ldr	r3, [pc, #416]	; (1364 <_spi_check_config+0x228>)
    11c4:	4798      	blx	r3
    11c6:	0003      	movs	r3, r0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    11c8:	429c      	cmp	r4, r3
    11ca:	d005      	beq.n	11d8 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	2200      	movs	r2, #0
    11d0:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    11d2:	231c      	movs	r3, #28
    11d4:	e0bf      	b.n	1356 <_spi_check_config+0x21a>
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
    11d6:	46c0      	nop			; (mov r8, r8)
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11d8:	233f      	movs	r3, #63	; 0x3f
    11da:	18fb      	adds	r3, r7, r3
    11dc:	781a      	ldrb	r2, [r3, #0]
    11de:	233f      	movs	r3, #63	; 0x3f
    11e0:	18fb      	adds	r3, r7, r3
    11e2:	3201      	adds	r2, #1
    11e4:	701a      	strb	r2, [r3, #0]
    11e6:	233f      	movs	r3, #63	; 0x3f
    11e8:	18fb      	adds	r3, r7, r3
    11ea:	781b      	ldrb	r3, [r3, #0]
    11ec:	2b03      	cmp	r3, #3
    11ee:	d9c9      	bls.n	1184 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    11f0:	2013      	movs	r0, #19
    11f2:	4b5d      	ldr	r3, [pc, #372]	; (1368 <_spi_check_config+0x22c>)
    11f4:	4798      	blx	r3
    11f6:	0003      	movs	r3, r0
    11f8:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    11fa:	2300      	movs	r3, #0
    11fc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    11fe:	2300      	movs	r3, #0
    1200:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    1202:	2300      	movs	r3, #0
    1204:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2b01      	cmp	r3, #1
    120c:	d121      	bne.n	1252 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    120e:	683b      	ldr	r3, [r7, #0]
    1210:	699b      	ldr	r3, [r3, #24]
    1212:	221f      	movs	r2, #31
    1214:	18bc      	adds	r4, r7, r2
    1216:	220a      	movs	r2, #10
    1218:	18ba      	adds	r2, r7, r2
    121a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    121c:	0018      	movs	r0, r3
    121e:	4b53      	ldr	r3, [pc, #332]	; (136c <_spi_check_config+0x230>)
    1220:	4798      	blx	r3
    1222:	0003      	movs	r3, r0
    1224:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1226:	231f      	movs	r3, #31
    1228:	18fb      	adds	r3, r7, r3
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	2b00      	cmp	r3, #0
    122e:	d001      	beq.n	1234 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1230:	2317      	movs	r3, #23
    1232:	e090      	b.n	1356 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1236:	7b1b      	ldrb	r3, [r3, #12]
    1238:	b2da      	uxtb	r2, r3
    123a:	230a      	movs	r3, #10
    123c:	18fb      	adds	r3, r7, r3
    123e:	881b      	ldrh	r3, [r3, #0]
    1240:	b2db      	uxtb	r3, r3
    1242:	429a      	cmp	r2, r3
    1244:	d001      	beq.n	124a <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    1246:	231c      	movs	r3, #28
    1248:	e085      	b.n	1356 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    124c:	220c      	movs	r2, #12
    124e:	4313      	orrs	r3, r2
    1250:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d129      	bne.n	12ae <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	699b      	ldr	r3, [r3, #24]
    125e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1260:	4313      	orrs	r3, r2
    1262:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    1264:	683b      	ldr	r3, [r7, #0]
    1266:	8b9b      	ldrh	r3, [r3, #28]
    1268:	001a      	movs	r2, r3
    126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    126c:	4313      	orrs	r3, r2
    126e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1270:	683b      	ldr	r3, [r7, #0]
    1272:	7f9b      	ldrb	r3, [r3, #30]
    1274:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1276:	683b      	ldr	r3, [r7, #0]
    1278:	7fdb      	ldrb	r3, [r3, #31]
    127a:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    127c:	4313      	orrs	r3, r2
    127e:	001a      	movs	r2, r3
    1280:	6a3b      	ldr	r3, [r7, #32]
    1282:	4313      	orrs	r3, r2
    1284:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    1286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1288:	681a      	ldr	r2, [r3, #0]
    128a:	6a3b      	ldr	r3, [r7, #32]
    128c:	429a      	cmp	r2, r3
    128e:	d001      	beq.n	1294 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    1290:	231c      	movs	r3, #28
    1292:	e060      	b.n	1356 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    1294:	683b      	ldr	r3, [r7, #0]
    1296:	2220      	movs	r2, #32
    1298:	5c9b      	ldrb	r3, [r3, r2]
    129a:	2b00      	cmp	r3, #0
    129c:	d003      	beq.n	12a6 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12a0:	2240      	movs	r2, #64	; 0x40
    12a2:	4313      	orrs	r3, r2
    12a4:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    12a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12a8:	2208      	movs	r2, #8
    12aa:	4313      	orrs	r3, r2
    12ac:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	685b      	ldr	r3, [r3, #4]
    12b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    12b4:	4313      	orrs	r3, r2
    12b6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    12b8:	683b      	ldr	r3, [r7, #0]
    12ba:	689b      	ldr	r3, [r3, #8]
    12bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    12be:	4313      	orrs	r3, r2
    12c0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    12c2:	683b      	ldr	r3, [r7, #0]
    12c4:	68db      	ldr	r3, [r3, #12]
    12c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    12c8:	4313      	orrs	r3, r2
    12ca:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    12cc:	683b      	ldr	r3, [r7, #0]
    12ce:	7c1b      	ldrb	r3, [r3, #16]
    12d0:	001a      	movs	r2, r3
    12d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12d4:	4313      	orrs	r3, r2
    12d6:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    12d8:	683b      	ldr	r3, [r7, #0]
    12da:	7c5b      	ldrb	r3, [r3, #17]
    12dc:	2b00      	cmp	r3, #0
    12de:	d003      	beq.n	12e8 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	4313      	orrs	r3, r2
    12e6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    12e8:	683b      	ldr	r3, [r7, #0]
    12ea:	7c9b      	ldrb	r3, [r3, #18]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d004      	beq.n	12fa <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12f2:	2280      	movs	r2, #128	; 0x80
    12f4:	0292      	lsls	r2, r2, #10
    12f6:	4313      	orrs	r3, r2
    12f8:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    12fa:	683b      	ldr	r3, [r7, #0]
    12fc:	7cdb      	ldrb	r3, [r3, #19]
    12fe:	2b00      	cmp	r3, #0
    1300:	d004      	beq.n	130c <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1304:	2280      	movs	r2, #128	; 0x80
    1306:	0092      	lsls	r2, r2, #2
    1308:	4313      	orrs	r3, r2
    130a:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    130c:	683b      	ldr	r3, [r7, #0]
    130e:	7d1b      	ldrb	r3, [r3, #20]
    1310:	2b00      	cmp	r3, #0
    1312:	d004      	beq.n	131e <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	0192      	lsls	r2, r2, #6
    131a:	4313      	orrs	r3, r2
    131c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1320:	2202      	movs	r2, #2
    1322:	4313      	orrs	r3, r2
    1324:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1328:	681a      	ldr	r2, [r3, #0]
    132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    132c:	429a      	cmp	r2, r3
    132e:	d10e      	bne.n	134e <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    1330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1332:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1336:	429a      	cmp	r2, r3
    1338:	d109      	bne.n	134e <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    133a:	683b      	ldr	r3, [r7, #0]
    133c:	781a      	ldrb	r2, [r3, #0]
    133e:	687b      	ldr	r3, [r7, #4]
    1340:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1342:	683b      	ldr	r3, [r7, #0]
    1344:	7c1a      	ldrb	r2, [r3, #16]
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    134a:	2300      	movs	r3, #0
    134c:	e003      	b.n	1356 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	2200      	movs	r2, #0
    1352:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1354:	231c      	movs	r3, #28
}
    1356:	0018      	movs	r0, r3
    1358:	46bd      	mov	sp, r7
    135a:	b011      	add	sp, #68	; 0x44
    135c:	bd90      	pop	{r4, r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000009a9 	.word	0x000009a9
    1364:	00000c3d 	.word	0x00000c3d
    1368:	00005899 	.word	0x00005899
    136c:	000006b5 	.word	0x000006b5

00001370 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1370:	b580      	push	{r7, lr}
    1372:	b08a      	sub	sp, #40	; 0x28
    1374:	af00      	add	r7, sp, #0
    1376:	60f8      	str	r0, [r7, #12]
    1378:	60b9      	str	r1, [r7, #8]
    137a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	68ba      	ldr	r2, [r7, #8]
    1380:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1382:	68fb      	ldr	r3, [r7, #12]
    1384:	681b      	ldr	r3, [r3, #0]
    1386:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	2202      	movs	r2, #2
    138e:	4013      	ands	r3, r2
    1390:	d007      	beq.n	13a2 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    1392:	687a      	ldr	r2, [r7, #4]
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	0011      	movs	r1, r2
    1398:	0018      	movs	r0, r3
    139a:	4b2f      	ldr	r3, [pc, #188]	; (1458 <spi_init+0xe8>)
    139c:	4798      	blx	r3
    139e:	0003      	movs	r3, r0
    13a0:	e055      	b.n	144e <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    13a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	2201      	movs	r2, #1
    13a8:	4013      	ands	r3, r2
    13aa:	d001      	beq.n	13b0 <spi_init+0x40>
		return STATUS_BUSY;
    13ac:	2305      	movs	r3, #5
    13ae:	e04e      	b.n	144e <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	0018      	movs	r0, r3
    13b6:	4b29      	ldr	r3, [pc, #164]	; (145c <spi_init+0xec>)
    13b8:	4798      	blx	r3
    13ba:	0003      	movs	r3, r0
    13bc:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13be:	6a3b      	ldr	r3, [r7, #32]
    13c0:	3302      	adds	r3, #2
    13c2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13c4:	6a3b      	ldr	r3, [r7, #32]
    13c6:	3314      	adds	r3, #20
    13c8:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13ca:	2201      	movs	r2, #1
    13cc:	69fb      	ldr	r3, [r7, #28]
    13ce:	409a      	lsls	r2, r3
    13d0:	0013      	movs	r3, r2
    13d2:	0019      	movs	r1, r3
    13d4:	2002      	movs	r0, #2
    13d6:	4b22      	ldr	r3, [pc, #136]	; (1460 <spi_init+0xf0>)
    13d8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    13da:	2314      	movs	r3, #20
    13dc:	18fb      	adds	r3, r7, r3
    13de:	0018      	movs	r0, r3
    13e0:	4b20      	ldr	r3, [pc, #128]	; (1464 <spi_init+0xf4>)
    13e2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	2224      	movs	r2, #36	; 0x24
    13e8:	5c9a      	ldrb	r2, [r3, r2]
    13ea:	2314      	movs	r3, #20
    13ec:	18fb      	adds	r3, r7, r3
    13ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13f0:	69bb      	ldr	r3, [r7, #24]
    13f2:	b2db      	uxtb	r3, r3
    13f4:	2214      	movs	r2, #20
    13f6:	18ba      	adds	r2, r7, r2
    13f8:	0011      	movs	r1, r2
    13fa:	0018      	movs	r0, r3
    13fc:	4b1a      	ldr	r3, [pc, #104]	; (1468 <spi_init+0xf8>)
    13fe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1400:	69bb      	ldr	r3, [r7, #24]
    1402:	b2db      	uxtb	r3, r3
    1404:	0018      	movs	r0, r3
    1406:	4b19      	ldr	r3, [pc, #100]	; (146c <spi_init+0xfc>)
    1408:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	2224      	movs	r2, #36	; 0x24
    140e:	5c9b      	ldrb	r3, [r3, r2]
    1410:	2100      	movs	r1, #0
    1412:	0018      	movs	r0, r3
    1414:	4b16      	ldr	r3, [pc, #88]	; (1470 <spi_init+0x100>)
    1416:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	2b01      	cmp	r3, #1
    141e:	d105      	bne.n	142c <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	220c      	movs	r2, #12
    1426:	431a      	orrs	r2, r3
    1428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    142a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	2b00      	cmp	r3, #0
    1432:	d105      	bne.n	1440 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2208      	movs	r2, #8
    143a:	431a      	orrs	r2, r3
    143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    143e:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1440:	687a      	ldr	r2, [r7, #4]
    1442:	68fb      	ldr	r3, [r7, #12]
    1444:	0011      	movs	r1, r2
    1446:	0018      	movs	r0, r3
    1448:	4b0a      	ldr	r3, [pc, #40]	; (1474 <spi_init+0x104>)
    144a:	4798      	blx	r3
    144c:	0003      	movs	r3, r0
}
    144e:	0018      	movs	r0, r3
    1450:	46bd      	mov	sp, r7
    1452:	b00a      	add	sp, #40	; 0x28
    1454:	bd80      	pop	{r7, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	0000113d 	.word	0x0000113d
    145c:	00000b65 	.word	0x00000b65
    1460:	00000d49 	.word	0x00000d49
    1464:	00000d31 	.word	0x00000d31
    1468:	00005775 	.word	0x00005775
    146c:	000057b9 	.word	0x000057b9
    1470:	0000091d 	.word	0x0000091d
    1474:	00000eed 	.word	0x00000eed

00001478 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    1478:	b590      	push	{r4, r7, lr}
    147a:	b087      	sub	sp, #28
    147c:	af00      	add	r7, sp, #0
    147e:	60f8      	str	r0, [r7, #12]
    1480:	607a      	str	r2, [r7, #4]
    1482:	230a      	movs	r3, #10
    1484:	18fb      	adds	r3, r7, r3
    1486:	1c0a      	adds	r2, r1, #0
    1488:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	79db      	ldrb	r3, [r3, #7]
    148e:	2201      	movs	r2, #1
    1490:	4053      	eors	r3, r2
    1492:	b2db      	uxtb	r3, r3
    1494:	2b00      	cmp	r3, #0
    1496:	d001      	beq.n	149c <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    1498:	231c      	movs	r3, #28
    149a:	e07c      	b.n	1596 <spi_transceive_wait+0x11e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    149c:	2315      	movs	r3, #21
    149e:	18fb      	adds	r3, r7, r3
    14a0:	2200      	movs	r2, #0
    14a2:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	795b      	ldrb	r3, [r3, #5]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d121      	bne.n	14f0 <spi_transceive_wait+0x78>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    14ac:	2316      	movs	r3, #22
    14ae:	18fb      	adds	r3, r7, r3
    14b0:	2200      	movs	r2, #0
    14b2:	801a      	strh	r2, [r3, #0]
    14b4:	e014      	b.n	14e0 <spi_transceive_wait+0x68>
			if (spi_is_ready_to_write(module)) {
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	0018      	movs	r0, r3
    14ba:	4b39      	ldr	r3, [pc, #228]	; (15a0 <spi_transceive_wait+0x128>)
    14bc:	4798      	blx	r3
    14be:	1e03      	subs	r3, r0, #0
    14c0:	d115      	bne.n	14ee <spi_transceive_wait+0x76>
				break;
			} else if (j == SPI_TIMEOUT) {
    14c2:	2316      	movs	r3, #22
    14c4:	18fb      	adds	r3, r7, r3
    14c6:	881b      	ldrh	r3, [r3, #0]
    14c8:	4a36      	ldr	r2, [pc, #216]	; (15a4 <spi_transceive_wait+0x12c>)
    14ca:	4293      	cmp	r3, r2
    14cc:	d101      	bne.n	14d2 <spi_transceive_wait+0x5a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    14ce:	2312      	movs	r3, #18
    14d0:	e061      	b.n	1596 <spi_transceive_wait+0x11e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    14d2:	2316      	movs	r3, #22
    14d4:	18fb      	adds	r3, r7, r3
    14d6:	881a      	ldrh	r2, [r3, #0]
    14d8:	2316      	movs	r3, #22
    14da:	18fb      	adds	r3, r7, r3
    14dc:	3201      	adds	r2, #1
    14de:	801a      	strh	r2, [r3, #0]
    14e0:	2316      	movs	r3, #22
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	881b      	ldrh	r3, [r3, #0]
    14e6:	4a2f      	ldr	r2, [pc, #188]	; (15a4 <spi_transceive_wait+0x12c>)
    14e8:	4293      	cmp	r3, r2
    14ea:	d9e4      	bls.n	14b6 <spi_transceive_wait+0x3e>
    14ec:	e000      	b.n	14f0 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
				break;
    14ee:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    14f0:	46c0      	nop			; (mov r8, r8)
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	0018      	movs	r0, r3
    14f6:	4b2a      	ldr	r3, [pc, #168]	; (15a0 <spi_transceive_wait+0x128>)
    14f8:	4798      	blx	r3
    14fa:	0003      	movs	r3, r0
    14fc:	001a      	movs	r2, r3
    14fe:	2301      	movs	r3, #1
    1500:	4053      	eors	r3, r2
    1502:	b2db      	uxtb	r3, r3
    1504:	2b00      	cmp	r3, #0
    1506:	d1f4      	bne.n	14f2 <spi_transceive_wait+0x7a>
	}

	/* Write data */
	spi_write(module, tx_data);
    1508:	230a      	movs	r3, #10
    150a:	18fb      	adds	r3, r7, r3
    150c:	881a      	ldrh	r2, [r3, #0]
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	0011      	movs	r1, r2
    1512:	0018      	movs	r0, r3
    1514:	4b24      	ldr	r3, [pc, #144]	; (15a8 <spi_transceive_wait+0x130>)
    1516:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    1518:	68fb      	ldr	r3, [r7, #12]
    151a:	795b      	ldrb	r3, [r3, #5]
    151c:	2b00      	cmp	r3, #0
    151e:	d121      	bne.n	1564 <spi_transceive_wait+0xec>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1520:	2316      	movs	r3, #22
    1522:	18fb      	adds	r3, r7, r3
    1524:	2200      	movs	r2, #0
    1526:	801a      	strh	r2, [r3, #0]
    1528:	e014      	b.n	1554 <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	0018      	movs	r0, r3
    152e:	4b1f      	ldr	r3, [pc, #124]	; (15ac <spi_transceive_wait+0x134>)
    1530:	4798      	blx	r3
    1532:	1e03      	subs	r3, r0, #0
    1534:	d115      	bne.n	1562 <spi_transceive_wait+0xea>
				break;
			} else if (j == SPI_TIMEOUT) {
    1536:	2316      	movs	r3, #22
    1538:	18fb      	adds	r3, r7, r3
    153a:	881b      	ldrh	r3, [r3, #0]
    153c:	4a19      	ldr	r2, [pc, #100]	; (15a4 <spi_transceive_wait+0x12c>)
    153e:	4293      	cmp	r3, r2
    1540:	d101      	bne.n	1546 <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1542:	2312      	movs	r3, #18
    1544:	e027      	b.n	1596 <spi_transceive_wait+0x11e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1546:	2316      	movs	r3, #22
    1548:	18fb      	adds	r3, r7, r3
    154a:	881a      	ldrh	r2, [r3, #0]
    154c:	2316      	movs	r3, #22
    154e:	18fb      	adds	r3, r7, r3
    1550:	3201      	adds	r2, #1
    1552:	801a      	strh	r2, [r3, #0]
    1554:	2316      	movs	r3, #22
    1556:	18fb      	adds	r3, r7, r3
    1558:	881b      	ldrh	r3, [r3, #0]
    155a:	4a12      	ldr	r2, [pc, #72]	; (15a4 <spi_transceive_wait+0x12c>)
    155c:	4293      	cmp	r3, r2
    155e:	d9e4      	bls.n	152a <spi_transceive_wait+0xb2>
    1560:	e000      	b.n	1564 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
				break;
    1562:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1564:	46c0      	nop			; (mov r8, r8)
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	0018      	movs	r0, r3
    156a:	4b10      	ldr	r3, [pc, #64]	; (15ac <spi_transceive_wait+0x134>)
    156c:	4798      	blx	r3
    156e:	0003      	movs	r3, r0
    1570:	001a      	movs	r2, r3
    1572:	2301      	movs	r3, #1
    1574:	4053      	eors	r3, r2
    1576:	b2db      	uxtb	r3, r3
    1578:	2b00      	cmp	r3, #0
    157a:	d1f4      	bne.n	1566 <spi_transceive_wait+0xee>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    157c:	2315      	movs	r3, #21
    157e:	18fc      	adds	r4, r7, r3
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	0011      	movs	r1, r2
    1586:	0018      	movs	r0, r3
    1588:	4b09      	ldr	r3, [pc, #36]	; (15b0 <spi_transceive_wait+0x138>)
    158a:	4798      	blx	r3
    158c:	0003      	movs	r3, r0
    158e:	7023      	strb	r3, [r4, #0]

	return retval;
    1590:	2315      	movs	r3, #21
    1592:	18fb      	adds	r3, r7, r3
    1594:	781b      	ldrb	r3, [r3, #0]
}
    1596:	0018      	movs	r0, r3
    1598:	46bd      	mov	sp, r7
    159a:	b007      	add	sp, #28
    159c:	bd90      	pop	{r4, r7, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	00000dc5 	.word	0x00000dc5
    15a4:	00002710 	.word	0x00002710
    15a8:	00000e15 	.word	0x00000e15
    15ac:	00000ded 	.word	0x00000ded
    15b0:	00000e5d 	.word	0x00000e5d

000015b4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	b086      	sub	sp, #24
    15b8:	af00      	add	r7, sp, #0
    15ba:	60f8      	str	r0, [r7, #12]
    15bc:	60b9      	str	r1, [r7, #8]
    15be:	1dfb      	adds	r3, r7, #7
    15c0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	795b      	ldrb	r3, [r3, #5]
    15c6:	2b01      	cmp	r3, #1
    15c8:	d001      	beq.n	15ce <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    15ca:	2315      	movs	r3, #21
    15cc:	e05c      	b.n	1688 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	7a1b      	ldrb	r3, [r3, #8]
    15d2:	2201      	movs	r2, #1
    15d4:	4053      	eors	r3, r2
    15d6:	b2db      	uxtb	r3, r3
    15d8:	2b00      	cmp	r3, #0
    15da:	d054      	beq.n	1686 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    15dc:	1dfb      	adds	r3, r7, #7
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d04a      	beq.n	167a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    15e4:	68bb      	ldr	r3, [r7, #8]
    15e6:	785b      	ldrb	r3, [r3, #1]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d03f      	beq.n	166c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	0018      	movs	r0, r3
    15f0:	4b27      	ldr	r3, [pc, #156]	; (1690 <spi_select_slave+0xdc>)
    15f2:	4798      	blx	r3
    15f4:	0003      	movs	r3, r0
    15f6:	001a      	movs	r2, r3
    15f8:	2301      	movs	r3, #1
    15fa:	4053      	eors	r3, r2
    15fc:	b2db      	uxtb	r3, r3
    15fe:	2b00      	cmp	r3, #0
    1600:	d007      	beq.n	1612 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1602:	68bb      	ldr	r3, [r7, #8]
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	2101      	movs	r1, #1
    1608:	0018      	movs	r0, r3
    160a:	4b22      	ldr	r3, [pc, #136]	; (1694 <spi_select_slave+0xe0>)
    160c:	4798      	blx	r3
					return STATUS_BUSY;
    160e:	2305      	movs	r3, #5
    1610:	e03a      	b.n	1688 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1612:	68bb      	ldr	r3, [r7, #8]
    1614:	781b      	ldrb	r3, [r3, #0]
    1616:	2100      	movs	r1, #0
    1618:	0018      	movs	r0, r3
    161a:	4b1e      	ldr	r3, [pc, #120]	; (1694 <spi_select_slave+0xe0>)
    161c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    161e:	68bb      	ldr	r3, [r7, #8]
    1620:	789b      	ldrb	r3, [r3, #2]
    1622:	b29a      	uxth	r2, r3
    1624:	68fb      	ldr	r3, [r7, #12]
    1626:	0011      	movs	r1, r2
    1628:	0018      	movs	r0, r3
    162a:	4b1b      	ldr	r3, [pc, #108]	; (1698 <spi_select_slave+0xe4>)
    162c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	79db      	ldrb	r3, [r3, #7]
    1632:	2201      	movs	r2, #1
    1634:	4053      	eors	r3, r2
    1636:	b2db      	uxtb	r3, r3
    1638:	2b00      	cmp	r3, #0
    163a:	d024      	beq.n	1686 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    163c:	46c0      	nop			; (mov r8, r8)
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	0018      	movs	r0, r3
    1642:	4b16      	ldr	r3, [pc, #88]	; (169c <spi_select_slave+0xe8>)
    1644:	4798      	blx	r3
    1646:	0003      	movs	r3, r0
    1648:	001a      	movs	r2, r3
    164a:	2301      	movs	r3, #1
    164c:	4053      	eors	r3, r2
    164e:	b2db      	uxtb	r3, r3
    1650:	2b00      	cmp	r3, #0
    1652:	d1f4      	bne.n	163e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1654:	2316      	movs	r3, #22
    1656:	18fb      	adds	r3, r7, r3
    1658:	2200      	movs	r2, #0
    165a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    165c:	2316      	movs	r3, #22
    165e:	18fa      	adds	r2, r7, r3
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	0011      	movs	r1, r2
    1664:	0018      	movs	r0, r3
    1666:	4b0e      	ldr	r3, [pc, #56]	; (16a0 <spi_select_slave+0xec>)
    1668:	4798      	blx	r3
    166a:	e00c      	b.n	1686 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    166c:	68bb      	ldr	r3, [r7, #8]
    166e:	781b      	ldrb	r3, [r3, #0]
    1670:	2100      	movs	r1, #0
    1672:	0018      	movs	r0, r3
    1674:	4b07      	ldr	r3, [pc, #28]	; (1694 <spi_select_slave+0xe0>)
    1676:	4798      	blx	r3
    1678:	e005      	b.n	1686 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    167a:	68bb      	ldr	r3, [r7, #8]
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2101      	movs	r1, #1
    1680:	0018      	movs	r0, r3
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <spi_select_slave+0xe0>)
    1684:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1686:	2300      	movs	r3, #0
}
    1688:	0018      	movs	r0, r3
    168a:	46bd      	mov	sp, r7
    168c:	b006      	add	sp, #24
    168e:	bd80      	pop	{r7, pc}
    1690:	00000dc5 	.word	0x00000dc5
    1694:	00000cdd 	.word	0x00000cdd
    1698:	00000e15 	.word	0x00000e15
    169c:	00000ded 	.word	0x00000ded
    16a0:	00000e5d 	.word	0x00000e5d

000016a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    16ac:	687b      	ldr	r3, [r7, #4]
    16ae:	2200      	movs	r2, #0
    16b0:	701a      	strb	r2, [r3, #0]
}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	46bd      	mov	sp, r7
    16b6:	b002      	add	sp, #8
    16b8:	bd80      	pop	{r7, pc}
    16ba:	46c0      	nop			; (mov r8, r8)

000016bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	0002      	movs	r2, r0
    16c4:	6039      	str	r1, [r7, #0]
    16c6:	1dfb      	adds	r3, r7, #7
    16c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    16ca:	1dfb      	adds	r3, r7, #7
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2b01      	cmp	r3, #1
    16d0:	d00a      	beq.n	16e8 <system_apb_clock_set_mask+0x2c>
    16d2:	2b02      	cmp	r3, #2
    16d4:	d00f      	beq.n	16f6 <system_apb_clock_set_mask+0x3a>
    16d6:	2b00      	cmp	r3, #0
    16d8:	d114      	bne.n	1704 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    16da:	4b0e      	ldr	r3, [pc, #56]	; (1714 <system_apb_clock_set_mask+0x58>)
    16dc:	4a0d      	ldr	r2, [pc, #52]	; (1714 <system_apb_clock_set_mask+0x58>)
    16de:	6991      	ldr	r1, [r2, #24]
    16e0:	683a      	ldr	r2, [r7, #0]
    16e2:	430a      	orrs	r2, r1
    16e4:	619a      	str	r2, [r3, #24]
			break;
    16e6:	e00f      	b.n	1708 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    16e8:	4b0a      	ldr	r3, [pc, #40]	; (1714 <system_apb_clock_set_mask+0x58>)
    16ea:	4a0a      	ldr	r2, [pc, #40]	; (1714 <system_apb_clock_set_mask+0x58>)
    16ec:	69d1      	ldr	r1, [r2, #28]
    16ee:	683a      	ldr	r2, [r7, #0]
    16f0:	430a      	orrs	r2, r1
    16f2:	61da      	str	r2, [r3, #28]
			break;
    16f4:	e008      	b.n	1708 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    16f6:	4b07      	ldr	r3, [pc, #28]	; (1714 <system_apb_clock_set_mask+0x58>)
    16f8:	4a06      	ldr	r2, [pc, #24]	; (1714 <system_apb_clock_set_mask+0x58>)
    16fa:	6a11      	ldr	r1, [r2, #32]
    16fc:	683a      	ldr	r2, [r7, #0]
    16fe:	430a      	orrs	r2, r1
    1700:	621a      	str	r2, [r3, #32]
			break;
    1702:	e001      	b.n	1708 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1704:	2317      	movs	r3, #23
    1706:	e000      	b.n	170a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1708:	2300      	movs	r3, #0
}
    170a:	0018      	movs	r0, r3
    170c:	46bd      	mov	sp, r7
    170e:	b002      	add	sp, #8
    1710:	bd80      	pop	{r7, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	40000400 	.word	0x40000400

00001718 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	2280      	movs	r2, #128	; 0x80
    1724:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	2200      	movs	r2, #0
    172a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	2201      	movs	r2, #1
    1730:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	2200      	movs	r2, #0
    1736:	70da      	strb	r2, [r3, #3]
}
    1738:	46c0      	nop			; (mov r8, r8)
    173a:	46bd      	mov	sp, r7
    173c:	b002      	add	sp, #8
    173e:	bd80      	pop	{r7, pc}

00001740 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1740:	b580      	push	{r7, lr}
    1742:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1744:	4b05      	ldr	r3, [pc, #20]	; (175c <system_is_debugger_present+0x1c>)
    1746:	789b      	ldrb	r3, [r3, #2]
    1748:	b2db      	uxtb	r3, r3
    174a:	001a      	movs	r2, r3
    174c:	2302      	movs	r3, #2
    174e:	4013      	ands	r3, r2
    1750:	1e5a      	subs	r2, r3, #1
    1752:	4193      	sbcs	r3, r2
    1754:	b2db      	uxtb	r3, r3
}
    1756:	0018      	movs	r0, r3
    1758:	46bd      	mov	sp, r7
    175a:	bd80      	pop	{r7, pc}
    175c:	41002000 	.word	0x41002000

00001760 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1760:	b580      	push	{r7, lr}
    1762:	b084      	sub	sp, #16
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	69db      	ldr	r3, [r3, #28]
    1772:	1e5a      	subs	r2, r3, #1
    1774:	4193      	sbcs	r3, r2
    1776:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1778:	0018      	movs	r0, r3
    177a:	46bd      	mov	sp, r7
    177c:	b004      	add	sp, #16
    177e:	bd80      	pop	{r7, pc}

00001780 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1780:	b580      	push	{r7, lr}
    1782:	b082      	sub	sp, #8
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1788:	46c0      	nop			; (mov r8, r8)
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	0018      	movs	r0, r3
    178e:	4b04      	ldr	r3, [pc, #16]	; (17a0 <_usart_wait_for_sync+0x20>)
    1790:	4798      	blx	r3
    1792:	1e03      	subs	r3, r0, #0
    1794:	d1f9      	bne.n	178a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	46bd      	mov	sp, r7
    179a:	b002      	add	sp, #8
    179c:	bd80      	pop	{r7, pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	00001761 	.word	0x00001761

000017a4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    17a4:	b5b0      	push	{r4, r5, r7, lr}
    17a6:	b08c      	sub	sp, #48	; 0x30
    17a8:	af02      	add	r7, sp, #8
    17aa:	6078      	str	r0, [r7, #4]
    17ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	0018      	movs	r0, r3
    17ba:	4ba8      	ldr	r3, [pc, #672]	; (1a5c <_usart_set_config+0x2b8>)
    17bc:	4798      	blx	r3
    17be:	0003      	movs	r3, r0
    17c0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17c2:	697b      	ldr	r3, [r7, #20]
    17c4:	3314      	adds	r3, #20
    17c6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    17c8:	2300      	movs	r3, #0
    17ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    17cc:	2300      	movs	r3, #0
    17ce:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    17d0:	230a      	movs	r3, #10
    17d2:	18fb      	adds	r3, r7, r3
    17d4:	2200      	movs	r2, #0
    17d6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    17d8:	231f      	movs	r3, #31
    17da:	18fb      	adds	r3, r7, r3
    17dc:	2200      	movs	r2, #0
    17de:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    17e0:	231e      	movs	r3, #30
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	2210      	movs	r2, #16
    17e6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    17e8:	683b      	ldr	r3, [r7, #0]
    17ea:	8a1b      	ldrh	r3, [r3, #16]
    17ec:	2280      	movs	r2, #128	; 0x80
    17ee:	01d2      	lsls	r2, r2, #7
    17f0:	4293      	cmp	r3, r2
    17f2:	d01c      	beq.n	182e <_usart_set_config+0x8a>
    17f4:	2280      	movs	r2, #128	; 0x80
    17f6:	01d2      	lsls	r2, r2, #7
    17f8:	4293      	cmp	r3, r2
    17fa:	dc06      	bgt.n	180a <_usart_set_config+0x66>
    17fc:	2b00      	cmp	r3, #0
    17fe:	d00d      	beq.n	181c <_usart_set_config+0x78>
    1800:	2280      	movs	r2, #128	; 0x80
    1802:	0192      	lsls	r2, r2, #6
    1804:	4293      	cmp	r3, r2
    1806:	d024      	beq.n	1852 <_usart_set_config+0xae>
    1808:	e035      	b.n	1876 <_usart_set_config+0xd2>
    180a:	22c0      	movs	r2, #192	; 0xc0
    180c:	01d2      	lsls	r2, r2, #7
    180e:	4293      	cmp	r3, r2
    1810:	d028      	beq.n	1864 <_usart_set_config+0xc0>
    1812:	2280      	movs	r2, #128	; 0x80
    1814:	0212      	lsls	r2, r2, #8
    1816:	4293      	cmp	r3, r2
    1818:	d012      	beq.n	1840 <_usart_set_config+0x9c>
    181a:	e02c      	b.n	1876 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    181c:	231f      	movs	r3, #31
    181e:	18fb      	adds	r3, r7, r3
    1820:	2200      	movs	r2, #0
    1822:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1824:	231e      	movs	r3, #30
    1826:	18fb      	adds	r3, r7, r3
    1828:	2210      	movs	r2, #16
    182a:	701a      	strb	r2, [r3, #0]
			break;
    182c:	e023      	b.n	1876 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    182e:	231f      	movs	r3, #31
    1830:	18fb      	adds	r3, r7, r3
    1832:	2200      	movs	r2, #0
    1834:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1836:	231e      	movs	r3, #30
    1838:	18fb      	adds	r3, r7, r3
    183a:	2208      	movs	r2, #8
    183c:	701a      	strb	r2, [r3, #0]
			break;
    183e:	e01a      	b.n	1876 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1840:	231f      	movs	r3, #31
    1842:	18fb      	adds	r3, r7, r3
    1844:	2200      	movs	r2, #0
    1846:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1848:	231e      	movs	r3, #30
    184a:	18fb      	adds	r3, r7, r3
    184c:	2203      	movs	r2, #3
    184e:	701a      	strb	r2, [r3, #0]
			break;
    1850:	e011      	b.n	1876 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1852:	231f      	movs	r3, #31
    1854:	18fb      	adds	r3, r7, r3
    1856:	2201      	movs	r2, #1
    1858:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    185a:	231e      	movs	r3, #30
    185c:	18fb      	adds	r3, r7, r3
    185e:	2210      	movs	r2, #16
    1860:	701a      	strb	r2, [r3, #0]
			break;
    1862:	e008      	b.n	1876 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1864:	231f      	movs	r3, #31
    1866:	18fb      	adds	r3, r7, r3
    1868:	2201      	movs	r2, #1
    186a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    186c:	231e      	movs	r3, #30
    186e:	18fb      	adds	r3, r7, r3
    1870:	2208      	movs	r2, #8
    1872:	701a      	strb	r2, [r3, #0]
			break;
    1874:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1876:	683b      	ldr	r3, [r7, #0]
    1878:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    187a:	683b      	ldr	r3, [r7, #0]
    187c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    187e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1880:	683b      	ldr	r3, [r7, #0]
    1882:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1884:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1886:	683a      	ldr	r2, [r7, #0]
    1888:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    188a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    188c:	683a      	ldr	r2, [r7, #0]
    188e:	7e12      	ldrb	r2, [r2, #24]
    1890:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1892:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1894:	683a      	ldr	r2, [r7, #0]
    1896:	2126      	movs	r1, #38	; 0x26
    1898:	5c52      	ldrb	r2, [r2, r1]
    189a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    189c:	4313      	orrs	r3, r2
    189e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    18a0:	231d      	movs	r3, #29
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	2200      	movs	r2, #0
    18a6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    18a8:	683b      	ldr	r3, [r7, #0]
    18aa:	685b      	ldr	r3, [r3, #4]
    18ac:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    18ae:	68fb      	ldr	r3, [r7, #12]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d01e      	beq.n	18f2 <_usart_set_config+0x14e>
    18b4:	2280      	movs	r2, #128	; 0x80
    18b6:	0552      	lsls	r2, r2, #21
    18b8:	4293      	cmp	r3, r2
    18ba:	d14f      	bne.n	195c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    18bc:	683b      	ldr	r3, [r7, #0]
    18be:	2227      	movs	r2, #39	; 0x27
    18c0:	5c9b      	ldrb	r3, [r3, r2]
    18c2:	2201      	movs	r2, #1
    18c4:	4053      	eors	r3, r2
    18c6:	b2db      	uxtb	r3, r3
    18c8:	2b00      	cmp	r3, #0
    18ca:	d046      	beq.n	195a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    18cc:	683b      	ldr	r3, [r7, #0]
    18ce:	6a1d      	ldr	r5, [r3, #32]
    18d0:	693b      	ldr	r3, [r7, #16]
    18d2:	b2db      	uxtb	r3, r3
    18d4:	0018      	movs	r0, r3
    18d6:	4b62      	ldr	r3, [pc, #392]	; (1a60 <_usart_set_config+0x2bc>)
    18d8:	4798      	blx	r3
    18da:	0001      	movs	r1, r0
    18dc:	231d      	movs	r3, #29
    18de:	18fc      	adds	r4, r7, r3
    18e0:	230a      	movs	r3, #10
    18e2:	18fb      	adds	r3, r7, r3
    18e4:	001a      	movs	r2, r3
    18e6:	0028      	movs	r0, r5
    18e8:	4b5e      	ldr	r3, [pc, #376]	; (1a64 <_usart_set_config+0x2c0>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
    18ee:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    18f0:	e033      	b.n	195a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    18f2:	683b      	ldr	r3, [r7, #0]
    18f4:	2227      	movs	r2, #39	; 0x27
    18f6:	5c9b      	ldrb	r3, [r3, r2]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d014      	beq.n	1926 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    18fc:	683b      	ldr	r3, [r7, #0]
    18fe:	6a18      	ldr	r0, [r3, #32]
    1900:	683b      	ldr	r3, [r7, #0]
    1902:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    1904:	231d      	movs	r3, #29
    1906:	18fc      	adds	r4, r7, r3
    1908:	231f      	movs	r3, #31
    190a:	18fb      	adds	r3, r7, r3
    190c:	781d      	ldrb	r5, [r3, #0]
    190e:	230a      	movs	r3, #10
    1910:	18fa      	adds	r2, r7, r3
    1912:	231e      	movs	r3, #30
    1914:	18fb      	adds	r3, r7, r3
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	9300      	str	r3, [sp, #0]
    191a:	002b      	movs	r3, r5
    191c:	4d52      	ldr	r5, [pc, #328]	; (1a68 <_usart_set_config+0x2c4>)
    191e:	47a8      	blx	r5
    1920:	0003      	movs	r3, r0
    1922:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1924:	e01a      	b.n	195c <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1926:	683b      	ldr	r3, [r7, #0]
    1928:	6a1d      	ldr	r5, [r3, #32]
    192a:	693b      	ldr	r3, [r7, #16]
    192c:	b2db      	uxtb	r3, r3
    192e:	0018      	movs	r0, r3
    1930:	4b4b      	ldr	r3, [pc, #300]	; (1a60 <_usart_set_config+0x2bc>)
    1932:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1934:	231d      	movs	r3, #29
    1936:	18fc      	adds	r4, r7, r3
    1938:	231f      	movs	r3, #31
    193a:	18fb      	adds	r3, r7, r3
    193c:	7819      	ldrb	r1, [r3, #0]
    193e:	230a      	movs	r3, #10
    1940:	18fa      	adds	r2, r7, r3
    1942:	231e      	movs	r3, #30
    1944:	18fb      	adds	r3, r7, r3
    1946:	781b      	ldrb	r3, [r3, #0]
    1948:	9300      	str	r3, [sp, #0]
    194a:	000b      	movs	r3, r1
    194c:	0001      	movs	r1, r0
    194e:	0028      	movs	r0, r5
    1950:	4d45      	ldr	r5, [pc, #276]	; (1a68 <_usart_set_config+0x2c4>)
    1952:	47a8      	blx	r5
    1954:	0003      	movs	r3, r0
    1956:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1958:	e000      	b.n	195c <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    195a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    195c:	231d      	movs	r3, #29
    195e:	18fb      	adds	r3, r7, r3
    1960:	781b      	ldrb	r3, [r3, #0]
    1962:	2b00      	cmp	r3, #0
    1964:	d003      	beq.n	196e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    1966:	231d      	movs	r3, #29
    1968:	18fb      	adds	r3, r7, r3
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	e071      	b.n	1a52 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    196e:	683b      	ldr	r3, [r7, #0]
    1970:	7e5b      	ldrb	r3, [r3, #25]
    1972:	2b00      	cmp	r3, #0
    1974:	d003      	beq.n	197e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1976:	683b      	ldr	r3, [r7, #0]
    1978:	7e9a      	ldrb	r2, [r3, #26]
    197a:	69bb      	ldr	r3, [r7, #24]
    197c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	0018      	movs	r0, r3
    1982:	4b3a      	ldr	r3, [pc, #232]	; (1a6c <_usart_set_config+0x2c8>)
    1984:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1986:	230a      	movs	r3, #10
    1988:	18fb      	adds	r3, r7, r3
    198a:	881a      	ldrh	r2, [r3, #0]
    198c:	69bb      	ldr	r3, [r7, #24]
    198e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1992:	68fb      	ldr	r3, [r7, #12]
    1994:	4313      	orrs	r3, r2
    1996:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1998:	683b      	ldr	r3, [r7, #0]
    199a:	2227      	movs	r2, #39	; 0x27
    199c:	5c9b      	ldrb	r3, [r3, r2]
    199e:	2201      	movs	r2, #1
    19a0:	4053      	eors	r3, r2
    19a2:	b2db      	uxtb	r3, r3
    19a4:	2b00      	cmp	r3, #0
    19a6:	d003      	beq.n	19b0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    19a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19aa:	2204      	movs	r2, #4
    19ac:	4313      	orrs	r3, r2
    19ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    19b0:	683b      	ldr	r3, [r7, #0]
    19b2:	7e5b      	ldrb	r3, [r3, #25]
    19b4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	7f1b      	ldrb	r3, [r3, #28]
    19ba:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    19bc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    19be:	683b      	ldr	r3, [r7, #0]
    19c0:	7f5b      	ldrb	r3, [r3, #29]
    19c2:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    19c4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    19c6:	683b      	ldr	r3, [r7, #0]
    19c8:	2124      	movs	r1, #36	; 0x24
    19ca:	5c5b      	ldrb	r3, [r3, r1]
    19cc:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    19ce:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    19d0:	683b      	ldr	r3, [r7, #0]
    19d2:	2125      	movs	r1, #37	; 0x25
    19d4:	5c5b      	ldrb	r3, [r3, r1]
    19d6:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    19d8:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    19da:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    19dc:	683b      	ldr	r3, [r7, #0]
    19de:	7adb      	ldrb	r3, [r3, #11]
    19e0:	001a      	movs	r2, r3
    19e2:	6a3b      	ldr	r3, [r7, #32]
    19e4:	4313      	orrs	r3, r2
    19e6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    19e8:	683b      	ldr	r3, [r7, #0]
    19ea:	891b      	ldrh	r3, [r3, #8]
    19ec:	2bff      	cmp	r3, #255	; 0xff
    19ee:	d00b      	beq.n	1a08 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    19f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	0452      	lsls	r2, r2, #17
    19f6:	4313      	orrs	r3, r2
    19f8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    19fa:	683b      	ldr	r3, [r7, #0]
    19fc:	891b      	ldrh	r3, [r3, #8]
    19fe:	001a      	movs	r2, r3
    1a00:	6a3b      	ldr	r3, [r7, #32]
    1a02:	4313      	orrs	r3, r2
    1a04:	623b      	str	r3, [r7, #32]
    1a06:	e008      	b.n	1a1a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	7edb      	ldrb	r3, [r3, #27]
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d004      	beq.n	1a1a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a12:	2280      	movs	r2, #128	; 0x80
    1a14:	04d2      	lsls	r2, r2, #19
    1a16:	4313      	orrs	r3, r2
    1a18:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1a1a:	683b      	ldr	r3, [r7, #0]
    1a1c:	222c      	movs	r2, #44	; 0x2c
    1a1e:	5c9b      	ldrb	r3, [r3, r2]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d103      	bne.n	1a2c <_usart_set_config+0x288>
    1a24:	4b12      	ldr	r3, [pc, #72]	; (1a70 <_usart_set_config+0x2cc>)
    1a26:	4798      	blx	r3
    1a28:	1e03      	subs	r3, r0, #0
    1a2a:	d003      	beq.n	1a34 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a2e:	2280      	movs	r2, #128	; 0x80
    1a30:	4313      	orrs	r3, r2
    1a32:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	0018      	movs	r0, r3
    1a38:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <_usart_set_config+0x2c8>)
    1a3a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1a3c:	69bb      	ldr	r3, [r7, #24]
    1a3e:	6a3a      	ldr	r2, [r7, #32]
    1a40:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	0018      	movs	r0, r3
    1a46:	4b09      	ldr	r3, [pc, #36]	; (1a6c <_usart_set_config+0x2c8>)
    1a48:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1a4a:	69bb      	ldr	r3, [r7, #24]
    1a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a4e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1a50:	2300      	movs	r3, #0
}
    1a52:	0018      	movs	r0, r3
    1a54:	46bd      	mov	sp, r7
    1a56:	b00a      	add	sp, #40	; 0x28
    1a58:	bdb0      	pop	{r4, r5, r7, pc}
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	00000b65 	.word	0x00000b65
    1a60:	00005899 	.word	0x00005899
    1a64:	000006b5 	.word	0x000006b5
    1a68:	00000731 	.word	0x00000731
    1a6c:	00001781 	.word	0x00001781
    1a70:	00001741 	.word	0x00001741

00001a74 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a74:	b590      	push	{r4, r7, lr}
    1a76:	b093      	sub	sp, #76	; 0x4c
    1a78:	af00      	add	r7, sp, #0
    1a7a:	60f8      	str	r0, [r7, #12]
    1a7c:	60b9      	str	r1, [r7, #8]
    1a7e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1a80:	233f      	movs	r3, #63	; 0x3f
    1a82:	18fb      	adds	r3, r7, r3
    1a84:	2200      	movs	r2, #0
    1a86:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a88:	68fb      	ldr	r3, [r7, #12]
    1a8a:	68ba      	ldr	r2, [r7, #8]
    1a8c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a94:	68fb      	ldr	r3, [r7, #12]
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	0018      	movs	r0, r3
    1a9a:	4b63      	ldr	r3, [pc, #396]	; (1c28 <usart_init+0x1b4>)
    1a9c:	4798      	blx	r3
    1a9e:	0003      	movs	r3, r0
    1aa0:	637b      	str	r3, [r7, #52]	; 0x34
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1aa4:	3302      	adds	r3, #2
    1aa6:	633b      	str	r3, [r7, #48]	; 0x30
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1aaa:	3314      	adds	r3, #20
    1aac:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	2201      	movs	r2, #1
    1ab4:	4013      	ands	r3, r2
    1ab6:	d001      	beq.n	1abc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1ab8:	2305      	movs	r3, #5
    1aba:	e0b1      	b.n	1c20 <usart_init+0x1ac>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	2202      	movs	r2, #2
    1ac2:	4013      	ands	r3, r2
    1ac4:	d001      	beq.n	1aca <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1ac6:	231c      	movs	r3, #28
    1ac8:	e0aa      	b.n	1c20 <usart_init+0x1ac>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1aca:	2201      	movs	r2, #1
    1acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ace:	409a      	lsls	r2, r3
    1ad0:	0013      	movs	r3, r2
    1ad2:	0019      	movs	r1, r3
    1ad4:	2002      	movs	r0, #2
    1ad6:	4b55      	ldr	r3, [pc, #340]	; (1c2c <usart_init+0x1b8>)
    1ad8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1ada:	2328      	movs	r3, #40	; 0x28
    1adc:	18fb      	adds	r3, r7, r3
    1ade:	0018      	movs	r0, r3
    1ae0:	4b53      	ldr	r3, [pc, #332]	; (1c30 <usart_init+0x1bc>)
    1ae2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	222d      	movs	r2, #45	; 0x2d
    1ae8:	5c9a      	ldrb	r2, [r3, r2]
    1aea:	2328      	movs	r3, #40	; 0x28
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1af2:	b2db      	uxtb	r3, r3
    1af4:	2228      	movs	r2, #40	; 0x28
    1af6:	18ba      	adds	r2, r7, r2
    1af8:	0011      	movs	r1, r2
    1afa:	0018      	movs	r0, r3
    1afc:	4b4d      	ldr	r3, [pc, #308]	; (1c34 <usart_init+0x1c0>)
    1afe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b02:	b2db      	uxtb	r3, r3
    1b04:	0018      	movs	r0, r3
    1b06:	4b4c      	ldr	r3, [pc, #304]	; (1c38 <usart_init+0x1c4>)
    1b08:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	222d      	movs	r2, #45	; 0x2d
    1b0e:	5c9b      	ldrb	r3, [r3, r2]
    1b10:	2100      	movs	r1, #0
    1b12:	0018      	movs	r0, r3
    1b14:	4b49      	ldr	r3, [pc, #292]	; (1c3c <usart_init+0x1c8>)
    1b16:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	7ada      	ldrb	r2, [r3, #11]
    1b1c:	68fb      	ldr	r3, [r7, #12]
    1b1e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	2224      	movs	r2, #36	; 0x24
    1b24:	5c9a      	ldrb	r2, [r3, r2]
    1b26:	68fb      	ldr	r3, [r7, #12]
    1b28:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	2225      	movs	r2, #37	; 0x25
    1b2e:	5c9a      	ldrb	r2, [r3, r2]
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	7eda      	ldrb	r2, [r3, #27]
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	7f1a      	ldrb	r2, [r3, #28]
    1b40:	68fb      	ldr	r3, [r7, #12]
    1b42:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1b44:	233f      	movs	r3, #63	; 0x3f
    1b46:	18fc      	adds	r4, r7, r3
    1b48:	687a      	ldr	r2, [r7, #4]
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	0011      	movs	r1, r2
    1b4e:	0018      	movs	r0, r3
    1b50:	4b3b      	ldr	r3, [pc, #236]	; (1c40 <usart_init+0x1cc>)
    1b52:	4798      	blx	r3
    1b54:	0003      	movs	r3, r0
    1b56:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1b58:	233f      	movs	r3, #63	; 0x3f
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	781b      	ldrb	r3, [r3, #0]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d003      	beq.n	1b6a <usart_init+0xf6>
		return status_code;
    1b62:	233f      	movs	r3, #63	; 0x3f
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	e05a      	b.n	1c20 <usart_init+0x1ac>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1b6a:	2324      	movs	r3, #36	; 0x24
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	0018      	movs	r0, r3
    1b70:	4b34      	ldr	r3, [pc, #208]	; (1c44 <usart_init+0x1d0>)
    1b72:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b74:	2324      	movs	r3, #36	; 0x24
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	2200      	movs	r2, #0
    1b7a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b7c:	2324      	movs	r3, #36	; 0x24
    1b7e:	18fb      	adds	r3, r7, r3
    1b80:	2200      	movs	r2, #0
    1b82:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1b88:	2314      	movs	r3, #20
    1b8a:	18fb      	adds	r3, r7, r3
    1b8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1b92:	2314      	movs	r3, #20
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1b9c:	2314      	movs	r3, #20
    1b9e:	18fb      	adds	r3, r7, r3
    1ba0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1ba6:	2314      	movs	r3, #20
    1ba8:	18fb      	adds	r3, r7, r3
    1baa:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1bac:	2347      	movs	r3, #71	; 0x47
    1bae:	18fb      	adds	r3, r7, r3
    1bb0:	2200      	movs	r2, #0
    1bb2:	701a      	strb	r2, [r3, #0]
    1bb4:	e02c      	b.n	1c10 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1bb6:	2347      	movs	r3, #71	; 0x47
    1bb8:	18fb      	adds	r3, r7, r3
    1bba:	781a      	ldrb	r2, [r3, #0]
    1bbc:	2314      	movs	r3, #20
    1bbe:	18fb      	adds	r3, r7, r3
    1bc0:	0092      	lsls	r2, r2, #2
    1bc2:	58d3      	ldr	r3, [r2, r3]
    1bc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d109      	bne.n	1be0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1bcc:	2347      	movs	r3, #71	; 0x47
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	0011      	movs	r1, r2
    1bd6:	0018      	movs	r0, r3
    1bd8:	4b1b      	ldr	r3, [pc, #108]	; (1c48 <usart_init+0x1d4>)
    1bda:	4798      	blx	r3
    1bdc:	0003      	movs	r3, r0
    1bde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1be2:	3301      	adds	r3, #1
    1be4:	d00d      	beq.n	1c02 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1be8:	b2da      	uxtb	r2, r3
    1bea:	2324      	movs	r3, #36	; 0x24
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1bf2:	0c1b      	lsrs	r3, r3, #16
    1bf4:	b2db      	uxtb	r3, r3
    1bf6:	2224      	movs	r2, #36	; 0x24
    1bf8:	18ba      	adds	r2, r7, r2
    1bfa:	0011      	movs	r1, r2
    1bfc:	0018      	movs	r0, r3
    1bfe:	4b13      	ldr	r3, [pc, #76]	; (1c4c <usart_init+0x1d8>)
    1c00:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c02:	2347      	movs	r3, #71	; 0x47
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	781a      	ldrb	r2, [r3, #0]
    1c08:	2347      	movs	r3, #71	; 0x47
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	3201      	adds	r2, #1
    1c0e:	701a      	strb	r2, [r3, #0]
    1c10:	2347      	movs	r3, #71	; 0x47
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2b03      	cmp	r3, #3
    1c18:	d9cd      	bls.n	1bb6 <usart_init+0x142>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    1c1a:	233f      	movs	r3, #63	; 0x3f
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	781b      	ldrb	r3, [r3, #0]
}
    1c20:	0018      	movs	r0, r3
    1c22:	46bd      	mov	sp, r7
    1c24:	b013      	add	sp, #76	; 0x4c
    1c26:	bd90      	pop	{r4, r7, pc}
    1c28:	00000b65 	.word	0x00000b65
    1c2c:	000016bd 	.word	0x000016bd
    1c30:	000016a5 	.word	0x000016a5
    1c34:	00005775 	.word	0x00005775
    1c38:	000057b9 	.word	0x000057b9
    1c3c:	0000091d 	.word	0x0000091d
    1c40:	000017a5 	.word	0x000017a5
    1c44:	00001719 	.word	0x00001719
    1c48:	000009a9 	.word	0x000009a9
    1c4c:	00005a61 	.word	0x00005a61

00001c50 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	b084      	sub	sp, #16
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
    1c58:	000a      	movs	r2, r1
    1c5a:	1cbb      	adds	r3, r7, #2
    1c5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	79db      	ldrb	r3, [r3, #7]
    1c68:	2201      	movs	r2, #1
    1c6a:	4053      	eors	r3, r2
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d001      	beq.n	1c76 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    1c72:	231c      	movs	r3, #28
    1c74:	e019      	b.n	1caa <usart_write_wait+0x5a>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1c76:	68fb      	ldr	r3, [r7, #12]
    1c78:	7e1b      	ldrb	r3, [r3, #24]
    1c7a:	b2db      	uxtb	r3, r3
    1c7c:	001a      	movs	r2, r3
    1c7e:	2301      	movs	r3, #1
    1c80:	4013      	ands	r3, r2
    1c82:	d101      	bne.n	1c88 <usart_write_wait+0x38>
		/* Return error code */
		return STATUS_BUSY;
    1c84:	2305      	movs	r3, #5
    1c86:	e010      	b.n	1caa <usart_write_wait+0x5a>
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	0018      	movs	r0, r3
    1c8c:	4b09      	ldr	r3, [pc, #36]	; (1cb4 <usart_write_wait+0x64>)
    1c8e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1c90:	68fb      	ldr	r3, [r7, #12]
    1c92:	1cba      	adds	r2, r7, #2
    1c94:	8812      	ldrh	r2, [r2, #0]
    1c96:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	68fb      	ldr	r3, [r7, #12]
    1c9c:	7e1b      	ldrb	r3, [r3, #24]
    1c9e:	b2db      	uxtb	r3, r3
    1ca0:	001a      	movs	r2, r3
    1ca2:	2302      	movs	r3, #2
    1ca4:	4013      	ands	r3, r2
    1ca6:	d0f8      	beq.n	1c9a <usart_write_wait+0x4a>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1ca8:	2300      	movs	r3, #0
}
    1caa:	0018      	movs	r0, r3
    1cac:	46bd      	mov	sp, r7
    1cae:	b004      	add	sp, #16
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00001781 	.word	0x00001781

00001cb8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b084      	sub	sp, #16
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
    1cc0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	799b      	ldrb	r3, [r3, #6]
    1ccc:	2201      	movs	r2, #1
    1cce:	4053      	eors	r3, r2
    1cd0:	b2db      	uxtb	r3, r3
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d001      	beq.n	1cda <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1cd6:	231c      	movs	r3, #28
    1cd8:	e061      	b.n	1d9e <usart_read_wait+0xe6>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	7e1b      	ldrb	r3, [r3, #24]
    1cde:	b2db      	uxtb	r3, r3
    1ce0:	001a      	movs	r2, r3
    1ce2:	2304      	movs	r3, #4
    1ce4:	4013      	ands	r3, r2
    1ce6:	d101      	bne.n	1cec <usart_read_wait+0x34>
		/* Return error code */
		return STATUS_BUSY;
    1ce8:	2305      	movs	r3, #5
    1cea:	e058      	b.n	1d9e <usart_read_wait+0xe6>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	0018      	movs	r0, r3
    1cf0:	4b2d      	ldr	r3, [pc, #180]	; (1da8 <usart_read_wait+0xf0>)
    1cf2:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	8b5b      	ldrh	r3, [r3, #26]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	b2da      	uxtb	r2, r3
    1cfc:	230b      	movs	r3, #11
    1cfe:	18fb      	adds	r3, r7, r3
    1d00:	213f      	movs	r1, #63	; 0x3f
    1d02:	400a      	ands	r2, r1
    1d04:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1d06:	230b      	movs	r3, #11
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d040      	beq.n	1d92 <usart_read_wait+0xda>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1d10:	230b      	movs	r3, #11
    1d12:	18fb      	adds	r3, r7, r3
    1d14:	781b      	ldrb	r3, [r3, #0]
    1d16:	2202      	movs	r2, #2
    1d18:	4013      	ands	r3, r2
    1d1a:	d004      	beq.n	1d26 <usart_read_wait+0x6e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	2202      	movs	r2, #2
    1d20:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    1d22:	231a      	movs	r3, #26
    1d24:	e03b      	b.n	1d9e <usart_read_wait+0xe6>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d26:	230b      	movs	r3, #11
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	2204      	movs	r2, #4
    1d2e:	4013      	ands	r3, r2
    1d30:	d004      	beq.n	1d3c <usart_read_wait+0x84>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d32:	68fb      	ldr	r3, [r7, #12]
    1d34:	2204      	movs	r2, #4
    1d36:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    1d38:	231e      	movs	r3, #30
    1d3a:	e030      	b.n	1d9e <usart_read_wait+0xe6>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d3c:	230b      	movs	r3, #11
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	781b      	ldrb	r3, [r3, #0]
    1d42:	2201      	movs	r2, #1
    1d44:	4013      	ands	r3, r2
    1d46:	d004      	beq.n	1d52 <usart_read_wait+0x9a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	2201      	movs	r2, #1
    1d4c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1d4e:	2313      	movs	r3, #19
    1d50:	e025      	b.n	1d9e <usart_read_wait+0xe6>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d52:	230b      	movs	r3, #11
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	2210      	movs	r2, #16
    1d5a:	4013      	ands	r3, r2
    1d5c:	d009      	beq.n	1d72 <usart_read_wait+0xba>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	8b5b      	ldrh	r3, [r3, #26]
    1d62:	b29b      	uxth	r3, r3
    1d64:	2210      	movs	r2, #16
    1d66:	4313      	orrs	r3, r2
    1d68:	b29a      	uxth	r2, r3
    1d6a:	68fb      	ldr	r3, [r7, #12]
    1d6c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    1d6e:	2342      	movs	r3, #66	; 0x42
    1d70:	e015      	b.n	1d9e <usart_read_wait+0xe6>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1d72:	230b      	movs	r3, #11
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	2220      	movs	r2, #32
    1d7a:	4013      	ands	r3, r2
    1d7c:	d009      	beq.n	1d92 <usart_read_wait+0xda>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1d7e:	68fb      	ldr	r3, [r7, #12]
    1d80:	8b5b      	ldrh	r3, [r3, #26]
    1d82:	b29b      	uxth	r3, r3
    1d84:	2220      	movs	r2, #32
    1d86:	4313      	orrs	r3, r2
    1d88:	b29a      	uxth	r2, r3
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1d8e:	2341      	movs	r3, #65	; 0x41
    1d90:	e005      	b.n	1d9e <usart_read_wait+0xe6>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1d92:	68fb      	ldr	r3, [r7, #12]
    1d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1d96:	b29a      	uxth	r2, r3
    1d98:	683b      	ldr	r3, [r7, #0]
    1d9a:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    1d9c:	2300      	movs	r3, #0
}
    1d9e:	0018      	movs	r0, r3
    1da0:	46bd      	mov	sp, r7
    1da2:	b004      	add	sp, #16
    1da4:	bd80      	pop	{r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001781 	.word	0x00001781

00001dac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b08a      	sub	sp, #40	; 0x28
    1db0:	af00      	add	r7, sp, #0
    1db2:	60f8      	str	r0, [r7, #12]
    1db4:	60b9      	str	r1, [r7, #8]
    1db6:	1dbb      	adds	r3, r7, #6
    1db8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1dba:	1dbb      	adds	r3, r7, #6
    1dbc:	881b      	ldrh	r3, [r3, #0]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d101      	bne.n	1dc6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1dc2:	2317      	movs	r3, #23
    1dc4:	e07e      	b.n	1ec4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	79db      	ldrb	r3, [r3, #7]
    1dca:	2201      	movs	r2, #1
    1dcc:	4053      	eors	r3, r2
    1dce:	b2db      	uxtb	r3, r3
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d001      	beq.n	1dd8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1dd4:	231c      	movs	r3, #28
    1dd6:	e075      	b.n	1ec4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dd8:	68fb      	ldr	r3, [r7, #12]
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	0018      	movs	r0, r3
    1de2:	4b3a      	ldr	r3, [pc, #232]	; (1ecc <usart_write_buffer_wait+0x120>)
    1de4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    1de6:	2326      	movs	r3, #38	; 0x26
    1de8:	18fb      	adds	r3, r7, r3
    1dea:	2200      	movs	r2, #0
    1dec:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    1dee:	e048      	b.n	1e82 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1df0:	2300      	movs	r3, #0
    1df2:	623b      	str	r3, [r7, #32]
    1df4:	e00f      	b.n	1e16 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1df6:	697b      	ldr	r3, [r7, #20]
    1df8:	7e1b      	ldrb	r3, [r3, #24]
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	001a      	movs	r2, r3
    1dfe:	2301      	movs	r3, #1
    1e00:	4013      	ands	r3, r2
    1e02:	d10d      	bne.n	1e20 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    1e04:	6a3b      	ldr	r3, [r7, #32]
    1e06:	4a32      	ldr	r2, [pc, #200]	; (1ed0 <usart_write_buffer_wait+0x124>)
    1e08:	4293      	cmp	r3, r2
    1e0a:	d101      	bne.n	1e10 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    1e0c:	2312      	movs	r3, #18
    1e0e:	e059      	b.n	1ec4 <usart_write_buffer_wait+0x118>

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1e10:	6a3b      	ldr	r3, [r7, #32]
    1e12:	3301      	adds	r3, #1
    1e14:	623b      	str	r3, [r7, #32]
    1e16:	6a3b      	ldr	r3, [r7, #32]
    1e18:	4a2d      	ldr	r2, [pc, #180]	; (1ed0 <usart_write_buffer_wait+0x124>)
    1e1a:	4293      	cmp	r3, r2
    1e1c:	d9eb      	bls.n	1df6 <usart_write_buffer_wait+0x4a>
    1e1e:	e000      	b.n	1e22 <usart_write_buffer_wait+0x76>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
    1e20:	46c0      	nop			; (mov r8, r8)
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1e22:	2326      	movs	r3, #38	; 0x26
    1e24:	18fb      	adds	r3, r7, r3
    1e26:	881b      	ldrh	r3, [r3, #0]
    1e28:	2226      	movs	r2, #38	; 0x26
    1e2a:	18ba      	adds	r2, r7, r2
    1e2c:	1c59      	adds	r1, r3, #1
    1e2e:	8011      	strh	r1, [r2, #0]
    1e30:	001a      	movs	r2, r3
    1e32:	68bb      	ldr	r3, [r7, #8]
    1e34:	189b      	adds	r3, r3, r2
    1e36:	781a      	ldrb	r2, [r3, #0]
    1e38:	231e      	movs	r3, #30
    1e3a:	18fb      	adds	r3, r7, r3
    1e3c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e3e:	68fb      	ldr	r3, [r7, #12]
    1e40:	795b      	ldrb	r3, [r3, #5]
    1e42:	2b01      	cmp	r3, #1
    1e44:	d115      	bne.n	1e72 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1e46:	2326      	movs	r3, #38	; 0x26
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	881b      	ldrh	r3, [r3, #0]
    1e4c:	2226      	movs	r2, #38	; 0x26
    1e4e:	18ba      	adds	r2, r7, r2
    1e50:	1c59      	adds	r1, r3, #1
    1e52:	8011      	strh	r1, [r2, #0]
    1e54:	001a      	movs	r2, r3
    1e56:	68bb      	ldr	r3, [r7, #8]
    1e58:	189b      	adds	r3, r3, r2
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	021b      	lsls	r3, r3, #8
    1e5e:	b21a      	sxth	r2, r3
    1e60:	231e      	movs	r3, #30
    1e62:	18fb      	adds	r3, r7, r3
    1e64:	2100      	movs	r1, #0
    1e66:	5e5b      	ldrsh	r3, [r3, r1]
    1e68:	4313      	orrs	r3, r2
    1e6a:	b21a      	sxth	r2, r3
    1e6c:	231e      	movs	r3, #30
    1e6e:	18fb      	adds	r3, r7, r3
    1e70:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1e72:	231e      	movs	r3, #30
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	881a      	ldrh	r2, [r3, #0]
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	0011      	movs	r1, r2
    1e7c:	0018      	movs	r0, r3
    1e7e:	4b15      	ldr	r3, [pc, #84]	; (1ed4 <usart_write_buffer_wait+0x128>)
    1e80:	4798      	blx	r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    1e82:	1dbb      	adds	r3, r7, #6
    1e84:	881b      	ldrh	r3, [r3, #0]
    1e86:	1dba      	adds	r2, r7, #6
    1e88:	1e59      	subs	r1, r3, #1
    1e8a:	8011      	strh	r1, [r2, #0]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d1af      	bne.n	1df0 <usart_write_buffer_wait+0x44>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1e90:	2300      	movs	r3, #0
    1e92:	61bb      	str	r3, [r7, #24]
    1e94:	e00f      	b.n	1eb6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1e96:	697b      	ldr	r3, [r7, #20]
    1e98:	7e1b      	ldrb	r3, [r3, #24]
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	001a      	movs	r2, r3
    1e9e:	2302      	movs	r3, #2
    1ea0:	4013      	ands	r3, r2
    1ea2:	d10d      	bne.n	1ec0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1ea4:	69bb      	ldr	r3, [r7, #24]
    1ea6:	4a0a      	ldr	r2, [pc, #40]	; (1ed0 <usart_write_buffer_wait+0x124>)
    1ea8:	4293      	cmp	r3, r2
    1eaa:	d101      	bne.n	1eb0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    1eac:	2312      	movs	r3, #18
    1eae:	e009      	b.n	1ec4 <usart_write_buffer_wait+0x118>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1eb0:	69bb      	ldr	r3, [r7, #24]
    1eb2:	3301      	adds	r3, #1
    1eb4:	61bb      	str	r3, [r7, #24]
    1eb6:	69bb      	ldr	r3, [r7, #24]
    1eb8:	4a05      	ldr	r2, [pc, #20]	; (1ed0 <usart_write_buffer_wait+0x124>)
    1eba:	4293      	cmp	r3, r2
    1ebc:	d9eb      	bls.n	1e96 <usart_write_buffer_wait+0xea>
    1ebe:	e000      	b.n	1ec2 <usart_write_buffer_wait+0x116>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
    1ec0:	46c0      	nop			; (mov r8, r8)
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1ec2:	2300      	movs	r3, #0
}
    1ec4:	0018      	movs	r0, r3
    1ec6:	46bd      	mov	sp, r7
    1ec8:	b00a      	add	sp, #40	; 0x28
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	00001781 	.word	0x00001781
    1ed0:	0000ffff 	.word	0x0000ffff
    1ed4:	00001c51 	.word	0x00001c51

00001ed8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1ed8:	b590      	push	{r4, r7, lr}
    1eda:	b089      	sub	sp, #36	; 0x24
    1edc:	af00      	add	r7, sp, #0
    1ede:	60f8      	str	r0, [r7, #12]
    1ee0:	60b9      	str	r1, [r7, #8]
    1ee2:	1dbb      	adds	r3, r7, #6
    1ee4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1ee6:	1dbb      	adds	r3, r7, #6
    1ee8:	881b      	ldrh	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d101      	bne.n	1ef2 <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1eee:	2317      	movs	r3, #23
    1ef0:	e06d      	b.n	1fce <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1ef2:	68fb      	ldr	r3, [r7, #12]
    1ef4:	799b      	ldrb	r3, [r3, #6]
    1ef6:	2201      	movs	r2, #1
    1ef8:	4053      	eors	r3, r2
    1efa:	b2db      	uxtb	r3, r3
    1efc:	2b00      	cmp	r3, #0
    1efe:	d001      	beq.n	1f04 <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1f00:	231c      	movs	r3, #28
    1f02:	e064      	b.n	1fce <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    1f0a:	231e      	movs	r3, #30
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	2200      	movs	r2, #0
    1f10:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    1f12:	e054      	b.n	1fbe <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1f14:	2300      	movs	r3, #0
    1f16:	61bb      	str	r3, [r7, #24]
    1f18:	e00f      	b.n	1f3a <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1f1a:	697b      	ldr	r3, [r7, #20]
    1f1c:	7e1b      	ldrb	r3, [r3, #24]
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	001a      	movs	r2, r3
    1f22:	2304      	movs	r3, #4
    1f24:	4013      	ands	r3, r2
    1f26:	d10d      	bne.n	1f44 <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    1f28:	69bb      	ldr	r3, [r7, #24]
    1f2a:	4a2b      	ldr	r2, [pc, #172]	; (1fd8 <usart_read_buffer_wait+0x100>)
    1f2c:	4293      	cmp	r3, r2
    1f2e:	d101      	bne.n	1f34 <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    1f30:	2312      	movs	r3, #18
    1f32:	e04c      	b.n	1fce <usart_read_buffer_wait+0xf6>

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1f34:	69bb      	ldr	r3, [r7, #24]
    1f36:	3301      	adds	r3, #1
    1f38:	61bb      	str	r3, [r7, #24]
    1f3a:	69bb      	ldr	r3, [r7, #24]
    1f3c:	4a26      	ldr	r2, [pc, #152]	; (1fd8 <usart_read_buffer_wait+0x100>)
    1f3e:	4293      	cmp	r3, r2
    1f40:	d9eb      	bls.n	1f1a <usart_read_buffer_wait+0x42>
    1f42:	e000      	b.n	1f46 <usart_read_buffer_wait+0x6e>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
    1f44:	46c0      	nop			; (mov r8, r8)
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1f46:	2310      	movs	r3, #16
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	2200      	movs	r2, #0
    1f4c:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    1f4e:	2313      	movs	r3, #19
    1f50:	18fc      	adds	r4, r7, r3
    1f52:	2310      	movs	r3, #16
    1f54:	18fa      	adds	r2, r7, r3
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	0011      	movs	r1, r2
    1f5a:	0018      	movs	r0, r3
    1f5c:	4b1f      	ldr	r3, [pc, #124]	; (1fdc <usart_read_buffer_wait+0x104>)
    1f5e:	4798      	blx	r3
    1f60:	0003      	movs	r3, r0
    1f62:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    1f64:	2313      	movs	r3, #19
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d003      	beq.n	1f76 <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    1f6e:	2313      	movs	r3, #19
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	e02b      	b.n	1fce <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1f76:	231e      	movs	r3, #30
    1f78:	18fb      	adds	r3, r7, r3
    1f7a:	881b      	ldrh	r3, [r3, #0]
    1f7c:	221e      	movs	r2, #30
    1f7e:	18ba      	adds	r2, r7, r2
    1f80:	1c59      	adds	r1, r3, #1
    1f82:	8011      	strh	r1, [r2, #0]
    1f84:	001a      	movs	r2, r3
    1f86:	68bb      	ldr	r3, [r7, #8]
    1f88:	189b      	adds	r3, r3, r2
    1f8a:	2210      	movs	r2, #16
    1f8c:	18ba      	adds	r2, r7, r2
    1f8e:	8812      	ldrh	r2, [r2, #0]
    1f90:	b2d2      	uxtb	r2, r2
    1f92:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f94:	68fb      	ldr	r3, [r7, #12]
    1f96:	795b      	ldrb	r3, [r3, #5]
    1f98:	2b01      	cmp	r3, #1
    1f9a:	d110      	bne.n	1fbe <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    1f9c:	231e      	movs	r3, #30
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	881b      	ldrh	r3, [r3, #0]
    1fa2:	221e      	movs	r2, #30
    1fa4:	18ba      	adds	r2, r7, r2
    1fa6:	1c59      	adds	r1, r3, #1
    1fa8:	8011      	strh	r1, [r2, #0]
    1faa:	001a      	movs	r2, r3
    1fac:	68bb      	ldr	r3, [r7, #8]
    1fae:	189b      	adds	r3, r3, r2
    1fb0:	2210      	movs	r2, #16
    1fb2:	18ba      	adds	r2, r7, r2
    1fb4:	8812      	ldrh	r2, [r2, #0]
    1fb6:	0a12      	lsrs	r2, r2, #8
    1fb8:	b292      	uxth	r2, r2
    1fba:	b2d2      	uxtb	r2, r2
    1fbc:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    1fbe:	1dbb      	adds	r3, r7, #6
    1fc0:	881b      	ldrh	r3, [r3, #0]
    1fc2:	1dba      	adds	r2, r7, #6
    1fc4:	1e59      	subs	r1, r3, #1
    1fc6:	8011      	strh	r1, [r2, #0]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d1a3      	bne.n	1f14 <usart_read_buffer_wait+0x3c>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1fcc:	2300      	movs	r3, #0
}
    1fce:	0018      	movs	r0, r3
    1fd0:	46bd      	mov	sp, r7
    1fd2:	b009      	add	sp, #36	; 0x24
    1fd4:	bd90      	pop	{r4, r7, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	0000ffff 	.word	0x0000ffff
    1fdc:	00001cb9 	.word	0x00001cb9

00001fe0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b084      	sub	sp, #16
    1fe4:	af00      	add	r7, sp, #0
    1fe6:	0002      	movs	r2, r0
    1fe8:	1dfb      	adds	r3, r7, #7
    1fea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1fec:	230f      	movs	r3, #15
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	1dfa      	adds	r2, r7, #7
    1ff2:	7812      	ldrb	r2, [r2, #0]
    1ff4:	09d2      	lsrs	r2, r2, #7
    1ff6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1ff8:	230e      	movs	r3, #14
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	1dfa      	adds	r2, r7, #7
    1ffe:	7812      	ldrb	r2, [r2, #0]
    2000:	0952      	lsrs	r2, r2, #5
    2002:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2004:	4b0d      	ldr	r3, [pc, #52]	; (203c <STACK_SIZE+0x3c>)
    2006:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2008:	230f      	movs	r3, #15
    200a:	18fb      	adds	r3, r7, r3
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	2b00      	cmp	r3, #0
    2010:	d10f      	bne.n	2032 <STACK_SIZE+0x32>
		return &(ports[port_index]->Group[group_index]);
    2012:	230f      	movs	r3, #15
    2014:	18fb      	adds	r3, r7, r3
    2016:	781b      	ldrb	r3, [r3, #0]
    2018:	009b      	lsls	r3, r3, #2
    201a:	2210      	movs	r2, #16
    201c:	4694      	mov	ip, r2
    201e:	44bc      	add	ip, r7
    2020:	4463      	add	r3, ip
    2022:	3b08      	subs	r3, #8
    2024:	681a      	ldr	r2, [r3, #0]
    2026:	230e      	movs	r3, #14
    2028:	18fb      	adds	r3, r7, r3
    202a:	781b      	ldrb	r3, [r3, #0]
    202c:	01db      	lsls	r3, r3, #7
    202e:	18d3      	adds	r3, r2, r3
    2030:	e000      	b.n	2034 <STACK_SIZE+0x34>
	} else {
		Assert(false);
		return NULL;
    2032:	2300      	movs	r3, #0
	}
}
    2034:	0018      	movs	r0, r3
    2036:	46bd      	mov	sp, r7
    2038:	b004      	add	sp, #16
    203a:	bd80      	pop	{r7, pc}
    203c:	41004400 	.word	0x41004400

00002040 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2040:	b580      	push	{r7, lr}
    2042:	b082      	sub	sp, #8
    2044:	af00      	add	r7, sp, #0
    2046:	0002      	movs	r2, r0
    2048:	1dfb      	adds	r3, r7, #7
    204a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    204c:	1dfb      	adds	r3, r7, #7
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	0018      	movs	r0, r3
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <port_get_group_from_gpio_pin+0x20>)
    2054:	4798      	blx	r3
    2056:	0003      	movs	r3, r0
}
    2058:	0018      	movs	r0, r3
    205a:	46bd      	mov	sp, r7
    205c:	b002      	add	sp, #8
    205e:	bd80      	pop	{r7, pc}
    2060:	00001fe1 	.word	0x00001fe1

00002064 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2064:	b580      	push	{r7, lr}
    2066:	b082      	sub	sp, #8
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	2200      	movs	r2, #0
    2070:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	2201      	movs	r2, #1
    2076:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	2200      	movs	r2, #0
    207c:	709a      	strb	r2, [r3, #2]
}
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	46bd      	mov	sp, r7
    2082:	b002      	add	sp, #8
    2084:	bd80      	pop	{r7, pc}
    2086:	46c0      	nop			; (mov r8, r8)

00002088 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2088:	b580      	push	{r7, lr}
    208a:	b084      	sub	sp, #16
    208c:	af00      	add	r7, sp, #0
    208e:	0002      	movs	r2, r0
    2090:	1dfb      	adds	r3, r7, #7
    2092:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2094:	1dfb      	adds	r3, r7, #7
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	0018      	movs	r0, r3
    209a:	4b0b      	ldr	r3, [pc, #44]	; (20c8 <port_pin_get_input_level+0x40>)
    209c:	4798      	blx	r3
    209e:	0003      	movs	r3, r0
    20a0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20a2:	1dfb      	adds	r3, r7, #7
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	221f      	movs	r2, #31
    20a8:	4013      	ands	r3, r2
    20aa:	2201      	movs	r2, #1
    20ac:	409a      	lsls	r2, r3
    20ae:	0013      	movs	r3, r2
    20b0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    20b2:	68fb      	ldr	r3, [r7, #12]
    20b4:	6a1b      	ldr	r3, [r3, #32]
    20b6:	68ba      	ldr	r2, [r7, #8]
    20b8:	4013      	ands	r3, r2
    20ba:	1e5a      	subs	r2, r3, #1
    20bc:	4193      	sbcs	r3, r2
    20be:	b2db      	uxtb	r3, r3
}
    20c0:	0018      	movs	r0, r3
    20c2:	46bd      	mov	sp, r7
    20c4:	b004      	add	sp, #16
    20c6:	bd80      	pop	{r7, pc}
    20c8:	00002041 	.word	0x00002041

000020cc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b084      	sub	sp, #16
    20d0:	af00      	add	r7, sp, #0
    20d2:	0002      	movs	r2, r0
    20d4:	1dfb      	adds	r3, r7, #7
    20d6:	701a      	strb	r2, [r3, #0]
    20d8:	1dbb      	adds	r3, r7, #6
    20da:	1c0a      	adds	r2, r1, #0
    20dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20de:	1dfb      	adds	r3, r7, #7
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	0018      	movs	r0, r3
    20e4:	4b0d      	ldr	r3, [pc, #52]	; (211c <port_pin_set_output_level+0x50>)
    20e6:	4798      	blx	r3
    20e8:	0003      	movs	r3, r0
    20ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20ec:	1dfb      	adds	r3, r7, #7
    20ee:	781b      	ldrb	r3, [r3, #0]
    20f0:	221f      	movs	r2, #31
    20f2:	4013      	ands	r3, r2
    20f4:	2201      	movs	r2, #1
    20f6:	409a      	lsls	r2, r3
    20f8:	0013      	movs	r3, r2
    20fa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    20fc:	1dbb      	adds	r3, r7, #6
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	2b00      	cmp	r3, #0
    2102:	d003      	beq.n	210c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2104:	68fb      	ldr	r3, [r7, #12]
    2106:	68ba      	ldr	r2, [r7, #8]
    2108:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    210a:	e002      	b.n	2112 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    210c:	68fb      	ldr	r3, [r7, #12]
    210e:	68ba      	ldr	r2, [r7, #8]
    2110:	615a      	str	r2, [r3, #20]
	}
}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	46bd      	mov	sp, r7
    2116:	b004      	add	sp, #16
    2118:	bd80      	pop	{r7, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	00002041 	.word	0x00002041

00002120 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2120:	b580      	push	{r7, lr}
    2122:	b084      	sub	sp, #16
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	22a0      	movs	r2, #160	; 0xa0
    212c:	0112      	lsls	r2, r2, #4
    212e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	2201      	movs	r2, #1
    2134:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	2200      	movs	r2, #0
    213a:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	2200      	movs	r2, #0
    2140:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2142:	230f      	movs	r3, #15
    2144:	18fb      	adds	r3, r7, r3
    2146:	2200      	movs	r2, #0
    2148:	701a      	strb	r2, [r3, #0]
    214a:	e00e      	b.n	216a <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    214c:	230f      	movs	r3, #15
    214e:	18fb      	adds	r3, r7, r3
    2150:	781a      	ldrb	r2, [r3, #0]
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	3202      	adds	r2, #2
    2156:	0092      	lsls	r2, r2, #2
    2158:	2100      	movs	r1, #0
    215a:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    215c:	230f      	movs	r3, #15
    215e:	18fb      	adds	r3, r7, r3
    2160:	781a      	ldrb	r2, [r3, #0]
    2162:	230f      	movs	r3, #15
    2164:	18fb      	adds	r3, r7, r3
    2166:	3201      	adds	r2, #1
    2168:	701a      	strb	r2, [r3, #0]
    216a:	230f      	movs	r3, #15
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	2b01      	cmp	r3, #1
    2172:	d9eb      	bls.n	214c <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    2174:	46c0      	nop			; (mov r8, r8)
    2176:	46bd      	mov	sp, r7
    2178:	b004      	add	sp, #16
    217a:	bd80      	pop	{r7, pc}

0000217c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    217c:	b580      	push	{r7, lr}
    217e:	b084      	sub	sp, #16
    2180:	af00      	add	r7, sp, #0
    2182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    218a:	68fb      	ldr	r3, [r7, #12]
    218c:	69db      	ldr	r3, [r3, #28]
    218e:	1e5a      	subs	r2, r3, #1
    2190:	4193      	sbcs	r3, r2
    2192:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2194:	0018      	movs	r0, r3
    2196:	46bd      	mov	sp, r7
    2198:	b004      	add	sp, #16
    219a:	bd80      	pop	{r7, pc}

0000219c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    219c:	b580      	push	{r7, lr}
    219e:	b082      	sub	sp, #8
    21a0:	af00      	add	r7, sp, #0
    21a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	2201      	movs	r2, #1
    21a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2200      	movs	r2, #0
    21ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2200      	movs	r2, #0
    21b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	22c0      	movs	r2, #192	; 0xc0
    21ba:	0392      	lsls	r2, r2, #14
    21bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	2200      	movs	r2, #0
    21c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	2200      	movs	r2, #0
    21c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	2201      	movs	r2, #1
    21ce:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	2201      	movs	r2, #1
    21d4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	2200      	movs	r2, #0
    21da:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	2224      	movs	r2, #36	; 0x24
    21e0:	2100      	movs	r1, #0
    21e2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	3318      	adds	r3, #24
    21e8:	220c      	movs	r2, #12
    21ea:	2100      	movs	r1, #0
    21ec:	0018      	movs	r0, r3
    21ee:	4b0a      	ldr	r3, [pc, #40]	; (2218 <spi_get_config_defaults+0x7c>)
    21f0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	4a09      	ldr	r2, [pc, #36]	; (221c <spi_get_config_defaults+0x80>)
    21f6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	2200      	movs	r2, #0
    21fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	2200      	movs	r2, #0
    2202:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	2200      	movs	r2, #0
    2208:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	2200      	movs	r2, #0
    220e:	635a      	str	r2, [r3, #52]	; 0x34

};
    2210:	46c0      	nop			; (mov r8, r8)
    2212:	46bd      	mov	sp, r7
    2214:	b002      	add	sp, #8
    2216:	bd80      	pop	{r7, pc}
    2218:	00009dbf 	.word	0x00009dbf
    221c:	000186a0 	.word	0x000186a0

00002220 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	220a      	movs	r2, #10
    222c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    222e:	687b      	ldr	r3, [r7, #4]
    2230:	2200      	movs	r2, #0
    2232:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	2200      	movs	r2, #0
    2238:	709a      	strb	r2, [r3, #2]
}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	46bd      	mov	sp, r7
    223e:	b002      	add	sp, #8
    2240:	bd80      	pop	{r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)

00002244 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2244:	b580      	push	{r7, lr}
    2246:	b084      	sub	sp, #16
    2248:	af00      	add	r7, sp, #0
    224a:	6078      	str	r0, [r7, #4]
    224c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    224e:	683b      	ldr	r3, [r7, #0]
    2250:	781a      	ldrb	r2, [r3, #0]
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	785a      	ldrb	r2, [r3, #1]
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    225e:	683b      	ldr	r3, [r7, #0]
    2260:	789a      	ldrb	r2, [r3, #2]
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2266:	230c      	movs	r3, #12
    2268:	18fb      	adds	r3, r7, r3
    226a:	0018      	movs	r0, r3
    226c:	4b0b      	ldr	r3, [pc, #44]	; (229c <spi_attach_slave+0x58>)
    226e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2270:	230c      	movs	r3, #12
    2272:	18fb      	adds	r3, r7, r3
    2274:	2201      	movs	r2, #1
    2276:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	220c      	movs	r2, #12
    227e:	18ba      	adds	r2, r7, r2
    2280:	0011      	movs	r1, r2
    2282:	0018      	movs	r0, r3
    2284:	4b06      	ldr	r3, [pc, #24]	; (22a0 <spi_attach_slave+0x5c>)
    2286:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	2101      	movs	r1, #1
    228e:	0018      	movs	r0, r3
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <spi_attach_slave+0x60>)
    2292:	4798      	blx	r3
}
    2294:	46c0      	nop			; (mov r8, r8)
    2296:	46bd      	mov	sp, r7
    2298:	b004      	add	sp, #16
    229a:	bd80      	pop	{r7, pc}
    229c:	00002065 	.word	0x00002065
    22a0:	00004cb5 	.word	0x00004cb5
    22a4:	000020cd 	.word	0x000020cd

000022a8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b084      	sub	sp, #16
    22ac:	af00      	add	r7, sp, #0
    22ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	0018      	movs	r0, r3
    22bc:	4b06      	ldr	r3, [pc, #24]	; (22d8 <spi_enable+0x30>)
    22be:	4798      	blx	r3
    22c0:	1e03      	subs	r3, r0, #0
    22c2:	d1f9      	bne.n	22b8 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	2202      	movs	r2, #2
    22ca:	431a      	orrs	r2, r3
    22cc:	68fb      	ldr	r3, [r7, #12]
    22ce:	601a      	str	r2, [r3, #0]
}
    22d0:	46c0      	nop			; (mov r8, r8)
    22d2:	46bd      	mov	sp, r7
    22d4:	b004      	add	sp, #16
    22d6:	bd80      	pop	{r7, pc}
    22d8:	0000217d 	.word	0x0000217d

000022dc <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    22e2:	1d3b      	adds	r3, r7, #4
    22e4:	0018      	movs	r0, r3
    22e6:	4b07      	ldr	r3, [pc, #28]	; (2304 <configure_port_pins+0x28>)
    22e8:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    22ea:	1d3b      	adds	r3, r7, #4
    22ec:	2200      	movs	r2, #0
    22ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    22f0:	1d3b      	adds	r3, r7, #4
    22f2:	0019      	movs	r1, r3
    22f4:	2003      	movs	r0, #3
    22f6:	4b04      	ldr	r3, [pc, #16]	; (2308 <configure_port_pins+0x2c>)
    22f8:	4798      	blx	r3
}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	46bd      	mov	sp, r7
    22fe:	b002      	add	sp, #8
    2300:	bd80      	pop	{r7, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	00002065 	.word	0x00002065
    2308:	00004cb5 	.word	0x00004cb5

0000230c <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	b084      	sub	sp, #16
    2310:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    2312:	1d3b      	adds	r3, r7, #4
    2314:	0018      	movs	r0, r3
    2316:	4b0b      	ldr	r3, [pc, #44]	; (2344 <configure_extint_channel+0x38>)
    2318:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    231a:	1d3b      	adds	r3, r7, #4
    231c:	2203      	movs	r2, #3
    231e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    2320:	1d3b      	adds	r3, r7, #4
    2322:	2200      	movs	r2, #0
    2324:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    2326:	1d3b      	adds	r3, r7, #4
    2328:	2201      	movs	r2, #1
    232a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    232c:	1d3b      	adds	r3, r7, #4
    232e:	2201      	movs	r2, #1
    2330:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    2332:	1d3b      	adds	r3, r7, #4
    2334:	0019      	movs	r1, r3
    2336:	2003      	movs	r0, #3
    2338:	4b03      	ldr	r3, [pc, #12]	; (2348 <configure_extint_channel+0x3c>)
    233a:	4798      	blx	r3
}
    233c:	46c0      	nop			; (mov r8, r8)
    233e:	46bd      	mov	sp, r7
    2340:	b004      	add	sp, #16
    2342:	bd80      	pop	{r7, pc}
    2344:	00004b5d 	.word	0x00004b5d
    2348:	00004b91 	.word	0x00004b91

0000234c <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    234c:	b580      	push	{r7, lr}
    234e:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    2350:	4b06      	ldr	r3, [pc, #24]	; (236c <configure_extint_callbacks+0x20>)
    2352:	2200      	movs	r2, #0
    2354:	2103      	movs	r1, #3
    2356:	0018      	movs	r0, r3
    2358:	4b05      	ldr	r3, [pc, #20]	; (2370 <configure_extint_callbacks+0x24>)
    235a:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    235c:	2100      	movs	r1, #0
    235e:	2003      	movs	r0, #3
    2360:	4b04      	ldr	r3, [pc, #16]	; (2374 <configure_extint_callbacks+0x28>)
    2362:	4798      	blx	r3
}
    2364:	46c0      	nop			; (mov r8, r8)
    2366:	46bd      	mov	sp, r7
    2368:	bd80      	pop	{r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	00002e71 	.word	0x00002e71
    2370:	0000475d 	.word	0x0000475d
    2374:	000047c1 	.word	0x000047c1

00002378 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    2378:	b580      	push	{r7, lr}
    237a:	b090      	sub	sp, #64	; 0x40
    237c:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    237e:	1d3b      	adds	r3, r7, #4
    2380:	0018      	movs	r0, r3
    2382:	4b21      	ldr	r3, [pc, #132]	; (2408 <configure_RFM69_spi+0x90>)
    2384:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    2386:	1d3b      	adds	r3, r7, #4
    2388:	2212      	movs	r2, #18
    238a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    238c:	1d3a      	adds	r2, r7, #4
    238e:	4b1f      	ldr	r3, [pc, #124]	; (240c <configure_RFM69_spi+0x94>)
    2390:	0011      	movs	r1, r2
    2392:	0018      	movs	r0, r3
    2394:	4b1e      	ldr	r3, [pc, #120]	; (2410 <configure_RFM69_spi+0x98>)
    2396:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    2398:	2308      	movs	r3, #8
    239a:	18fb      	adds	r3, r7, r3
    239c:	0018      	movs	r0, r3
    239e:	4b1d      	ldr	r3, [pc, #116]	; (2414 <configure_RFM69_spi+0x9c>)
    23a0:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    23a2:	2308      	movs	r3, #8
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	22c0      	movs	r2, #192	; 0xc0
    23a8:	0392      	lsls	r2, r2, #14
    23aa:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    23ac:	2308      	movs	r3, #8
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	4a19      	ldr	r2, [pc, #100]	; (2418 <configure_RFM69_spi+0xa0>)
    23b2:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    23b4:	2308      	movs	r3, #8
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	4a18      	ldr	r2, [pc, #96]	; (241c <configure_RFM69_spi+0xa4>)
    23ba:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    23bc:	2308      	movs	r3, #8
    23be:	18fb      	adds	r3, r7, r3
    23c0:	2201      	movs	r2, #1
    23c2:	4252      	negs	r2, r2
    23c4:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    23c6:	2308      	movs	r3, #8
    23c8:	18fb      	adds	r3, r7, r3
    23ca:	4a15      	ldr	r2, [pc, #84]	; (2420 <configure_RFM69_spi+0xa8>)
    23cc:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    23ce:	2308      	movs	r3, #8
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	2200      	movs	r2, #0
    23d4:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    23d6:	2308      	movs	r3, #8
    23d8:	18fb      	adds	r3, r7, r3
    23da:	2200      	movs	r2, #0
    23dc:	609a      	str	r2, [r3, #8]
	//config_spi_master.generator_source = GCLK_CLKCTRL_GEN_GCLK1;
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    23de:	2308      	movs	r3, #8
    23e0:	18fa      	adds	r2, r7, r3
    23e2:	4910      	ldr	r1, [pc, #64]	; (2424 <configure_RFM69_spi+0xac>)
    23e4:	4b10      	ldr	r3, [pc, #64]	; (2428 <configure_RFM69_spi+0xb0>)
    23e6:	0018      	movs	r0, r3
    23e8:	4b10      	ldr	r3, [pc, #64]	; (242c <configure_RFM69_spi+0xb4>)
    23ea:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    23ec:	4b0e      	ldr	r3, [pc, #56]	; (2428 <configure_RFM69_spi+0xb0>)
    23ee:	0018      	movs	r0, r3
    23f0:	4b0f      	ldr	r3, [pc, #60]	; (2430 <configure_RFM69_spi+0xb8>)
    23f2:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    23f4:	4905      	ldr	r1, [pc, #20]	; (240c <configure_RFM69_spi+0x94>)
    23f6:	4b0c      	ldr	r3, [pc, #48]	; (2428 <configure_RFM69_spi+0xb0>)
    23f8:	2200      	movs	r2, #0
    23fa:	0018      	movs	r0, r3
    23fc:	4b0d      	ldr	r3, [pc, #52]	; (2434 <configure_RFM69_spi+0xbc>)
    23fe:	4798      	blx	r3
}
    2400:	46c0      	nop			; (mov r8, r8)
    2402:	46bd      	mov	sp, r7
    2404:	b010      	add	sp, #64	; 0x40
    2406:	bd80      	pop	{r7, pc}
    2408:	00002221 	.word	0x00002221
    240c:	200002ec 	.word	0x200002ec
    2410:	00002245 	.word	0x00002245
    2414:	0000219d 	.word	0x0000219d
    2418:	00100002 	.word	0x00100002
    241c:	00110002 	.word	0x00110002
    2420:	00130002 	.word	0x00130002
    2424:	42000c00 	.word	0x42000c00
    2428:	200002dc 	.word	0x200002dc
    242c:	00001371 	.word	0x00001371
    2430:	000022a9 	.word	0x000022a9
    2434:	000015b5 	.word	0x000015b5

00002438 <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	b084      	sub	sp, #16
    243c:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    243e:	003b      	movs	r3, r7
    2440:	0018      	movs	r0, r3
    2442:	4b0f      	ldr	r3, [pc, #60]	; (2480 <configure_rtc_count+0x48>)
    2444:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    2446:	003b      	movs	r3, r7
    2448:	2200      	movs	r2, #0
    244a:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    244c:	003b      	movs	r3, r7
    244e:	2200      	movs	r2, #0
    2450:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    2452:	003b      	movs	r3, r7
    2454:	2201      	movs	r2, #1
    2456:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2458:	003a      	movs	r2, r7
    245a:	490a      	ldr	r1, [pc, #40]	; (2484 <configure_rtc_count+0x4c>)
    245c:	4b0a      	ldr	r3, [pc, #40]	; (2488 <configure_rtc_count+0x50>)
    245e:	0018      	movs	r0, r3
    2460:	4b0a      	ldr	r3, [pc, #40]	; (248c <configure_rtc_count+0x54>)
    2462:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <configure_rtc_count+0x50>)
    2466:	0018      	movs	r0, r3
    2468:	4b09      	ldr	r3, [pc, #36]	; (2490 <configure_rtc_count+0x58>)
    246a:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 100000);
    246c:	4a09      	ldr	r2, [pc, #36]	; (2494 <configure_rtc_count+0x5c>)
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <configure_rtc_count+0x50>)
    2470:	0011      	movs	r1, r2
    2472:	0018      	movs	r0, r3
    2474:	4b08      	ldr	r3, [pc, #32]	; (2498 <configure_rtc_count+0x60>)
    2476:	4798      	blx	r3
}
    2478:	46c0      	nop			; (mov r8, r8)
    247a:	46bd      	mov	sp, r7
    247c:	b004      	add	sp, #16
    247e:	bd80      	pop	{r7, pc}
    2480:	00002121 	.word	0x00002121
    2484:	40001400 	.word	0x40001400
    2488:	20000240 	.word	0x20000240
    248c:	00000395 	.word	0x00000395
    2490:	000001b1 	.word	0x000001b1
    2494:	000086a0 	.word	0x000086a0
    2498:	00000579 	.word	0x00000579

0000249c <reset_millis>:

void reset_millis(void)
{
    249c:	b580      	push	{r7, lr}
    249e:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    24a0:	4b05      	ldr	r3, [pc, #20]	; (24b8 <reset_millis+0x1c>)
    24a2:	2100      	movs	r1, #0
    24a4:	0018      	movs	r0, r3
    24a6:	4b05      	ldr	r3, [pc, #20]	; (24bc <reset_millis+0x20>)
    24a8:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    24aa:	4b03      	ldr	r3, [pc, #12]	; (24b8 <reset_millis+0x1c>)
    24ac:	0018      	movs	r0, r3
    24ae:	4b04      	ldr	r3, [pc, #16]	; (24c0 <reset_millis+0x24>)
    24b0:	4798      	blx	r3
}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	46bd      	mov	sp, r7
    24b6:	bd80      	pop	{r7, pc}
    24b8:	20000240 	.word	0x20000240
    24bc:	00000425 	.word	0x00000425
    24c0:	000001b1 	.word	0x000001b1

000024c4 <millis>:

uint32_t millis(void)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b082      	sub	sp, #8
    24c8:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    24ca:	2300      	movs	r3, #0
    24cc:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    24ce:	4b05      	ldr	r3, [pc, #20]	; (24e4 <millis+0x20>)
    24d0:	0018      	movs	r0, r3
    24d2:	4b05      	ldr	r3, [pc, #20]	; (24e8 <millis+0x24>)
    24d4:	4798      	blx	r3
    24d6:	0003      	movs	r3, r0
    24d8:	607b      	str	r3, [r7, #4]
	return milli;
    24da:	687b      	ldr	r3, [r7, #4]
}
    24dc:	0018      	movs	r0, r3
    24de:	46bd      	mov	sp, r7
    24e0:	b002      	add	sp, #8
    24e2:	bd80      	pop	{r7, pc}
    24e4:	20000240 	.word	0x20000240
    24e8:	00000485 	.word	0x00000485

000024ec <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    24ec:	b590      	push	{r4, r7, lr}
    24ee:	b085      	sub	sp, #20
    24f0:	af00      	add	r7, sp, #0
    24f2:	0004      	movs	r4, r0
    24f4:	6039      	str	r1, [r7, #0]
    24f6:	0010      	movs	r0, r2
    24f8:	0019      	movs	r1, r3
    24fa:	1dfb      	adds	r3, r7, #7
    24fc:	1c22      	adds	r2, r4, #0
    24fe:	701a      	strb	r2, [r3, #0]
    2500:	1dbb      	adds	r3, r7, #6
    2502:	1c02      	adds	r2, r0, #0
    2504:	701a      	strb	r2, [r3, #0]
    2506:	1d7b      	adds	r3, r7, #5
    2508:	1c0a      	adds	r2, r1, #0
    250a:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    250c:	2001      	movs	r0, #1
    250e:	4b4b      	ldr	r3, [pc, #300]	; (263c <sendFrame+0x150>)
    2510:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	2027      	movs	r0, #39	; 0x27
    2516:	4b4a      	ldr	r3, [pc, #296]	; (2640 <sendFrame+0x154>)
    2518:	4798      	blx	r3
    251a:	0003      	movs	r3, r0
    251c:	b25b      	sxtb	r3, r3
    251e:	2b00      	cmp	r3, #0
    2520:	daf8      	bge.n	2514 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    2522:	2100      	movs	r1, #0
    2524:	2025      	movs	r0, #37	; 0x25
    2526:	4b47      	ldr	r3, [pc, #284]	; (2644 <sendFrame+0x158>)
    2528:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    252a:	1dbb      	adds	r3, r7, #6
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	2b3d      	cmp	r3, #61	; 0x3d
    2530:	d902      	bls.n	2538 <sendFrame+0x4c>
    2532:	1dbb      	adds	r3, r7, #6
    2534:	223d      	movs	r2, #61	; 0x3d
    2536:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    2538:	230e      	movs	r3, #14
    253a:	18fb      	adds	r3, r7, r3
    253c:	2200      	movs	r2, #0
    253e:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    2540:	2320      	movs	r3, #32
    2542:	18fb      	adds	r3, r7, r3
    2544:	781b      	ldrb	r3, [r3, #0]
    2546:	2b00      	cmp	r3, #0
    2548:	d004      	beq.n	2554 <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    254a:	230e      	movs	r3, #14
    254c:	18fb      	adds	r3, r7, r3
    254e:	2280      	movs	r2, #128	; 0x80
    2550:	701a      	strb	r2, [r3, #0]
    2552:	e007      	b.n	2564 <sendFrame+0x78>
	else if (requestACK)
    2554:	1d7b      	adds	r3, r7, #5
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	2b00      	cmp	r3, #0
    255a:	d003      	beq.n	2564 <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    255c:	230e      	movs	r3, #14
    255e:	18fb      	adds	r3, r7, r3
    2560:	2240      	movs	r2, #64	; 0x40
    2562:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	selectrf();
    2564:	4b38      	ldr	r3, [pc, #224]	; (2648 <sendFrame+0x15c>)
    2566:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    2568:	4a38      	ldr	r2, [pc, #224]	; (264c <sendFrame+0x160>)
    256a:	4b39      	ldr	r3, [pc, #228]	; (2650 <sendFrame+0x164>)
    256c:	2180      	movs	r1, #128	; 0x80
    256e:	0018      	movs	r0, r3
    2570:	4b38      	ldr	r3, [pc, #224]	; (2654 <sendFrame+0x168>)
    2572:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    2574:	1dbb      	adds	r3, r7, #6
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	b29b      	uxth	r3, r3
    257a:	3303      	adds	r3, #3
    257c:	b299      	uxth	r1, r3
    257e:	4a33      	ldr	r2, [pc, #204]	; (264c <sendFrame+0x160>)
    2580:	4b33      	ldr	r3, [pc, #204]	; (2650 <sendFrame+0x164>)
    2582:	0018      	movs	r0, r3
    2584:	4b33      	ldr	r3, [pc, #204]	; (2654 <sendFrame+0x168>)
    2586:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    2588:	1dfb      	adds	r3, r7, #7
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	b299      	uxth	r1, r3
    258e:	4a2f      	ldr	r2, [pc, #188]	; (264c <sendFrame+0x160>)
    2590:	4b2f      	ldr	r3, [pc, #188]	; (2650 <sendFrame+0x164>)
    2592:	0018      	movs	r0, r3
    2594:	4b2f      	ldr	r3, [pc, #188]	; (2654 <sendFrame+0x168>)
    2596:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    2598:	4b2f      	ldr	r3, [pc, #188]	; (2658 <sendFrame+0x16c>)
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	b2db      	uxtb	r3, r3
    259e:	b299      	uxth	r1, r3
    25a0:	4a2a      	ldr	r2, [pc, #168]	; (264c <sendFrame+0x160>)
    25a2:	4b2b      	ldr	r3, [pc, #172]	; (2650 <sendFrame+0x164>)
    25a4:	0018      	movs	r0, r3
    25a6:	4b2b      	ldr	r3, [pc, #172]	; (2654 <sendFrame+0x168>)
    25a8:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    25aa:	230e      	movs	r3, #14
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	b2db      	uxtb	r3, r3
    25b2:	b299      	uxth	r1, r3
    25b4:	4a25      	ldr	r2, [pc, #148]	; (264c <sendFrame+0x160>)
    25b6:	4b26      	ldr	r3, [pc, #152]	; (2650 <sendFrame+0x164>)
    25b8:	0018      	movs	r0, r3
    25ba:	4b26      	ldr	r3, [pc, #152]	; (2654 <sendFrame+0x168>)
    25bc:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    25be:	230f      	movs	r3, #15
    25c0:	18fb      	adds	r3, r7, r3
    25c2:	2200      	movs	r2, #0
    25c4:	701a      	strb	r2, [r3, #0]
    25c6:	e012      	b.n	25ee <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    25c8:	230f      	movs	r3, #15
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	683a      	ldr	r2, [r7, #0]
    25d0:	18d3      	adds	r3, r2, r3
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	b299      	uxth	r1, r3
    25d6:	4a1d      	ldr	r2, [pc, #116]	; (264c <sendFrame+0x160>)
    25d8:	4b1d      	ldr	r3, [pc, #116]	; (2650 <sendFrame+0x164>)
    25da:	0018      	movs	r0, r3
    25dc:	4b1d      	ldr	r3, [pc, #116]	; (2654 <sendFrame+0x168>)
    25de:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    25e0:	230f      	movs	r3, #15
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	781a      	ldrb	r2, [r3, #0]
    25e6:	230f      	movs	r3, #15
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	3201      	adds	r2, #1
    25ec:	701a      	strb	r2, [r3, #0]
    25ee:	230f      	movs	r3, #15
    25f0:	18fa      	adds	r2, r7, r3
    25f2:	1dbb      	adds	r3, r7, #6
    25f4:	7812      	ldrb	r2, [r2, #0]
    25f6:	781b      	ldrb	r3, [r3, #0]
    25f8:	429a      	cmp	r2, r3
    25fa:	d3e5      	bcc.n	25c8 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    25fc:	4b17      	ldr	r3, [pc, #92]	; (265c <sendFrame+0x170>)
    25fe:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the 
	
	
	setMode(RF69_MODE_TX);
    2600:	2004      	movs	r0, #4
    2602:	4b0e      	ldr	r3, [pc, #56]	; (263c <sendFrame+0x150>)
    2604:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    2606:	4b16      	ldr	r3, [pc, #88]	; (2660 <sendFrame+0x174>)
    2608:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	2003      	movs	r0, #3
    260e:	4b15      	ldr	r3, [pc, #84]	; (2664 <sendFrame+0x178>)
    2610:	4798      	blx	r3
    2612:	0003      	movs	r3, r0
    2614:	001a      	movs	r2, r3
    2616:	2301      	movs	r3, #1
    2618:	4053      	eors	r3, r2
    261a:	b2db      	uxtb	r3, r3
    261c:	2b00      	cmp	r3, #0
    261e:	d005      	beq.n	262c <sendFrame+0x140>
    2620:	4b11      	ldr	r3, [pc, #68]	; (2668 <sendFrame+0x17c>)
    2622:	4798      	blx	r3
    2624:	1e02      	subs	r2, r0, #0
    2626:	4b11      	ldr	r3, [pc, #68]	; (266c <sendFrame+0x180>)
    2628:	429a      	cmp	r2, r3
    262a:	d9ef      	bls.n	260c <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    262c:	2001      	movs	r0, #1
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <sendFrame+0x150>)
    2630:	4798      	blx	r3
}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	46bd      	mov	sp, r7
    2636:	b005      	add	sp, #20
    2638:	bd90      	pop	{r4, r7, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	00002a8d 	.word	0x00002a8d
    2640:	00003069 	.word	0x00003069
    2644:	000030d1 	.word	0x000030d1
    2648:	00003131 	.word	0x00003131
    264c:	200000fe 	.word	0x200000fe
    2650:	200002dc 	.word	0x200002dc
    2654:	00001479 	.word	0x00001479
    2658:	2000024a 	.word	0x2000024a
    265c:	00003155 	.word	0x00003155
    2660:	0000249d 	.word	0x0000249d
    2664:	00002089 	.word	0x00002089
    2668:	000024c5 	.word	0x000024c5
    266c:	000003e7 	.word	0x000003e7

00002670 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	0002      	movs	r2, r0
    2678:	1dfb      	adds	r3, r7, #7
    267a:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    267c:	4b19      	ldr	r3, [pc, #100]	; (26e4 <RFM_setHighPower+0x74>)
    267e:	1dfa      	adds	r2, r7, #7
    2680:	7812      	ldrb	r2, [r2, #0]
    2682:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    2684:	4b17      	ldr	r3, [pc, #92]	; (26e4 <RFM_setHighPower+0x74>)
    2686:	781b      	ldrb	r3, [r3, #0]
    2688:	b2db      	uxtb	r3, r3
    268a:	2b00      	cmp	r3, #0
    268c:	d001      	beq.n	2692 <RFM_setHighPower+0x22>
    268e:	230f      	movs	r3, #15
    2690:	e000      	b.n	2694 <RFM_setHighPower+0x24>
    2692:	231a      	movs	r3, #26
    2694:	0019      	movs	r1, r3
    2696:	2013      	movs	r0, #19
    2698:	4b13      	ldr	r3, [pc, #76]	; (26e8 <RFM_setHighPower+0x78>)
    269a:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    269c:	4b11      	ldr	r3, [pc, #68]	; (26e4 <RFM_setHighPower+0x74>)
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	b2db      	uxtb	r3, r3
    26a2:	2b00      	cmp	r3, #0
    26a4:	d010      	beq.n	26c8 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    26a6:	2011      	movs	r0, #17
    26a8:	4b10      	ldr	r3, [pc, #64]	; (26ec <RFM_setHighPower+0x7c>)
    26aa:	4798      	blx	r3
    26ac:	0003      	movs	r3, r0
    26ae:	b25b      	sxtb	r3, r3
    26b0:	221f      	movs	r2, #31
    26b2:	4013      	ands	r3, r2
    26b4:	b25b      	sxtb	r3, r3
    26b6:	2260      	movs	r2, #96	; 0x60
    26b8:	4313      	orrs	r3, r2
    26ba:	b25b      	sxtb	r3, r3
    26bc:	b2db      	uxtb	r3, r3
    26be:	0019      	movs	r1, r3
    26c0:	2011      	movs	r0, #17
    26c2:	4b09      	ldr	r3, [pc, #36]	; (26e8 <RFM_setHighPower+0x78>)
    26c4:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    26c6:	e009      	b.n	26dc <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <RFM_setHighPower+0x80>)
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	2280      	movs	r2, #128	; 0x80
    26ce:	4252      	negs	r2, r2
    26d0:	4313      	orrs	r3, r2
    26d2:	b2db      	uxtb	r3, r3
    26d4:	0019      	movs	r1, r3
    26d6:	2011      	movs	r0, #17
    26d8:	4b03      	ldr	r3, [pc, #12]	; (26e8 <RFM_setHighPower+0x78>)
    26da:	4798      	blx	r3
}
    26dc:	46c0      	nop			; (mov r8, r8)
    26de:	46bd      	mov	sp, r7
    26e0:	b002      	add	sp, #8
    26e2:	bd80      	pop	{r7, pc}
    26e4:	200002d8 	.word	0x200002d8
    26e8:	000030d1 	.word	0x000030d1
    26ec:	00003069 	.word	0x00003069
    26f0:	20000248 	.word	0x20000248

000026f4 <RFM69>:

void RFM69()
{
    26f4:	b580      	push	{r7, lr}
    26f6:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    26f8:	4b07      	ldr	r3, [pc, #28]	; (2718 <RFM69+0x24>)
    26fa:	2201      	movs	r2, #1
    26fc:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    26fe:	4b07      	ldr	r3, [pc, #28]	; (271c <RFM69+0x28>)
    2700:	2200      	movs	r2, #0
    2702:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    2704:	4b06      	ldr	r3, [pc, #24]	; (2720 <RFM69+0x2c>)
    2706:	221f      	movs	r2, #31
    2708:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    270a:	4b06      	ldr	r3, [pc, #24]	; (2724 <RFM69+0x30>)
    270c:	2200      	movs	r2, #0
    270e:	701a      	strb	r2, [r3, #0]
}
    2710:	46c0      	nop			; (mov r8, r8)
    2712:	46bd      	mov	sp, r7
    2714:	bd80      	pop	{r7, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	200002d6 	.word	0x200002d6
    271c:	20000250 	.word	0x20000250
    2720:	20000248 	.word	0x20000248
    2724:	200002d8 	.word	0x200002d8

00002728 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    2728:	b590      	push	{r4, r7, lr}
    272a:	b091      	sub	sp, #68	; 0x44
    272c:	af00      	add	r7, sp, #0
    272e:	0004      	movs	r4, r0
    2730:	0008      	movs	r0, r1
    2732:	0011      	movs	r1, r2
    2734:	1dfb      	adds	r3, r7, #7
    2736:	1c22      	adds	r2, r4, #0
    2738:	701a      	strb	r2, [r3, #0]
    273a:	1dbb      	adds	r3, r7, #6
    273c:	1c02      	adds	r2, r0, #0
    273e:	701a      	strb	r2, [r3, #0]
    2740:	1d7b      	adds	r3, r7, #5
    2742:	1c0a      	adds	r2, r1, #0
    2744:	701a      	strb	r2, [r3, #0]
  RFM69();
    2746:	4bc1      	ldr	r3, [pc, #772]	; (2a4c <RFM_initialize+0x324>)
    2748:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    274a:	2310      	movs	r3, #16
    274c:	18fb      	adds	r3, r7, r3
    274e:	2201      	movs	r2, #1
    2750:	701a      	strb	r2, [r3, #0]
    2752:	2310      	movs	r3, #16
    2754:	18fb      	adds	r3, r7, r3
    2756:	2204      	movs	r2, #4
    2758:	705a      	strb	r2, [r3, #1]
    275a:	2310      	movs	r3, #16
    275c:	18fb      	adds	r3, r7, r3
    275e:	2202      	movs	r2, #2
    2760:	709a      	strb	r2, [r3, #2]
    2762:	2310      	movs	r3, #16
    2764:	18fb      	adds	r3, r7, r3
    2766:	2200      	movs	r2, #0
    2768:	70da      	strb	r2, [r3, #3]
    276a:	2310      	movs	r3, #16
    276c:	18fb      	adds	r3, r7, r3
    276e:	2203      	movs	r2, #3
    2770:	711a      	strb	r2, [r3, #4]
    2772:	2310      	movs	r3, #16
    2774:	18fb      	adds	r3, r7, r3
    2776:	2202      	movs	r2, #2
    2778:	715a      	strb	r2, [r3, #5]
    277a:	2310      	movs	r3, #16
    277c:	18fb      	adds	r3, r7, r3
    277e:	2204      	movs	r2, #4
    2780:	719a      	strb	r2, [r3, #6]
    2782:	2310      	movs	r3, #16
    2784:	18fb      	adds	r3, r7, r3
    2786:	2240      	movs	r2, #64	; 0x40
    2788:	71da      	strb	r2, [r3, #7]
    278a:	2310      	movs	r3, #16
    278c:	18fb      	adds	r3, r7, r3
    278e:	2205      	movs	r2, #5
    2790:	721a      	strb	r2, [r3, #8]
    2792:	2310      	movs	r3, #16
    2794:	18fb      	adds	r3, r7, r3
    2796:	2203      	movs	r2, #3
    2798:	725a      	strb	r2, [r3, #9]
    279a:	2310      	movs	r3, #16
    279c:	18fb      	adds	r3, r7, r3
    279e:	2206      	movs	r2, #6
    27a0:	729a      	strb	r2, [r3, #10]
    27a2:	2310      	movs	r3, #16
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	2233      	movs	r2, #51	; 0x33
    27a8:	72da      	strb	r2, [r3, #11]
    27aa:	2310      	movs	r3, #16
    27ac:	18fb      	adds	r3, r7, r3
    27ae:	2207      	movs	r2, #7
    27b0:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    27b2:	1dfb      	adds	r3, r7, #7
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2b1f      	cmp	r3, #31
    27b8:	d00d      	beq.n	27d6 <RFM_initialize+0xae>
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	2b2b      	cmp	r3, #43	; 0x2b
    27c0:	d007      	beq.n	27d2 <RFM_initialize+0xaa>
    27c2:	1dfb      	adds	r3, r7, #7
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	2b56      	cmp	r3, #86	; 0x56
    27c8:	d101      	bne.n	27ce <RFM_initialize+0xa6>
    27ca:	23d9      	movs	r3, #217	; 0xd9
    27cc:	e004      	b.n	27d8 <RFM_initialize+0xb0>
    27ce:	23e4      	movs	r3, #228	; 0xe4
    27d0:	e002      	b.n	27d8 <RFM_initialize+0xb0>
    27d2:	236c      	movs	r3, #108	; 0x6c
    27d4:	e000      	b.n	27d8 <RFM_initialize+0xb0>
    27d6:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    27d8:	2210      	movs	r2, #16
    27da:	18ba      	adds	r2, r7, r2
    27dc:	7353      	strb	r3, [r2, #13]
    27de:	2310      	movs	r3, #16
    27e0:	18fb      	adds	r3, r7, r3
    27e2:	2208      	movs	r2, #8
    27e4:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    27e6:	1dfb      	adds	r3, r7, #7
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	2b1f      	cmp	r3, #31
    27ec:	d00d      	beq.n	280a <RFM_initialize+0xe2>
    27ee:	1dfb      	adds	r3, r7, #7
    27f0:	781b      	ldrb	r3, [r3, #0]
    27f2:	2b2b      	cmp	r3, #43	; 0x2b
    27f4:	d007      	beq.n	2806 <RFM_initialize+0xde>
    27f6:	1dfb      	adds	r3, r7, #7
    27f8:	781b      	ldrb	r3, [r3, #0]
    27fa:	2b56      	cmp	r3, #86	; 0x56
    27fc:	d101      	bne.n	2802 <RFM_initialize+0xda>
    27fe:	2300      	movs	r3, #0
    2800:	e004      	b.n	280c <RFM_initialize+0xe4>
    2802:	23c0      	movs	r3, #192	; 0xc0
    2804:	e002      	b.n	280c <RFM_initialize+0xe4>
    2806:	2340      	movs	r3, #64	; 0x40
    2808:	e000      	b.n	280c <RFM_initialize+0xe4>
    280a:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    280c:	2210      	movs	r2, #16
    280e:	18ba      	adds	r2, r7, r2
    2810:	73d3      	strb	r3, [r2, #15]
    2812:	2310      	movs	r3, #16
    2814:	18fb      	adds	r3, r7, r3
    2816:	2209      	movs	r2, #9
    2818:	741a      	strb	r2, [r3, #16]
    281a:	2310      	movs	r3, #16
    281c:	18fb      	adds	r3, r7, r3
    281e:	2200      	movs	r2, #0
    2820:	745a      	strb	r2, [r3, #17]
    2822:	2310      	movs	r3, #16
    2824:	18fb      	adds	r3, r7, r3
    2826:	2219      	movs	r2, #25
    2828:	749a      	strb	r2, [r3, #18]
    282a:	2310      	movs	r3, #16
    282c:	18fb      	adds	r3, r7, r3
    282e:	2242      	movs	r2, #66	; 0x42
    2830:	74da      	strb	r2, [r3, #19]
    2832:	2310      	movs	r3, #16
    2834:	18fb      	adds	r3, r7, r3
    2836:	2225      	movs	r2, #37	; 0x25
    2838:	751a      	strb	r2, [r3, #20]
    283a:	2310      	movs	r3, #16
    283c:	18fb      	adds	r3, r7, r3
    283e:	2240      	movs	r2, #64	; 0x40
    2840:	755a      	strb	r2, [r3, #21]
    2842:	2310      	movs	r3, #16
    2844:	18fb      	adds	r3, r7, r3
    2846:	2226      	movs	r2, #38	; 0x26
    2848:	759a      	strb	r2, [r3, #22]
    284a:	2310      	movs	r3, #16
    284c:	18fb      	adds	r3, r7, r3
    284e:	2207      	movs	r2, #7
    2850:	75da      	strb	r2, [r3, #23]
    2852:	2310      	movs	r3, #16
    2854:	18fb      	adds	r3, r7, r3
    2856:	2228      	movs	r2, #40	; 0x28
    2858:	761a      	strb	r2, [r3, #24]
    285a:	2310      	movs	r3, #16
    285c:	18fb      	adds	r3, r7, r3
    285e:	2210      	movs	r2, #16
    2860:	765a      	strb	r2, [r3, #25]
    2862:	2310      	movs	r3, #16
    2864:	18fb      	adds	r3, r7, r3
    2866:	2229      	movs	r2, #41	; 0x29
    2868:	769a      	strb	r2, [r3, #26]
    286a:	2310      	movs	r3, #16
    286c:	18fb      	adds	r3, r7, r3
    286e:	22dc      	movs	r2, #220	; 0xdc
    2870:	76da      	strb	r2, [r3, #27]
    2872:	2310      	movs	r3, #16
    2874:	18fb      	adds	r3, r7, r3
    2876:	222e      	movs	r2, #46	; 0x2e
    2878:	771a      	strb	r2, [r3, #28]
    287a:	2310      	movs	r3, #16
    287c:	18fb      	adds	r3, r7, r3
    287e:	2288      	movs	r2, #136	; 0x88
    2880:	775a      	strb	r2, [r3, #29]
    2882:	2310      	movs	r3, #16
    2884:	18fb      	adds	r3, r7, r3
    2886:	222f      	movs	r2, #47	; 0x2f
    2888:	779a      	strb	r2, [r3, #30]
    288a:	2310      	movs	r3, #16
    288c:	18fb      	adds	r3, r7, r3
    288e:	222d      	movs	r2, #45	; 0x2d
    2890:	77da      	strb	r2, [r3, #31]
    2892:	2310      	movs	r3, #16
    2894:	18fb      	adds	r3, r7, r3
    2896:	2220      	movs	r2, #32
    2898:	2130      	movs	r1, #48	; 0x30
    289a:	5499      	strb	r1, [r3, r2]
    289c:	2310      	movs	r3, #16
    289e:	18fb      	adds	r3, r7, r3
    28a0:	1d7a      	adds	r2, r7, #5
    28a2:	2121      	movs	r1, #33	; 0x21
    28a4:	7812      	ldrb	r2, [r2, #0]
    28a6:	545a      	strb	r2, [r3, r1]
    28a8:	2310      	movs	r3, #16
    28aa:	18fb      	adds	r3, r7, r3
    28ac:	2222      	movs	r2, #34	; 0x22
    28ae:	2137      	movs	r1, #55	; 0x37
    28b0:	5499      	strb	r1, [r3, r2]
    28b2:	2310      	movs	r3, #16
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	2223      	movs	r2, #35	; 0x23
    28b8:	2190      	movs	r1, #144	; 0x90
    28ba:	5499      	strb	r1, [r3, r2]
    28bc:	2310      	movs	r3, #16
    28be:	18fb      	adds	r3, r7, r3
    28c0:	2224      	movs	r2, #36	; 0x24
    28c2:	2138      	movs	r1, #56	; 0x38
    28c4:	5499      	strb	r1, [r3, r2]
    28c6:	2310      	movs	r3, #16
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	2225      	movs	r2, #37	; 0x25
    28cc:	2142      	movs	r1, #66	; 0x42
    28ce:	5499      	strb	r1, [r3, r2]
    28d0:	2310      	movs	r3, #16
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	2226      	movs	r2, #38	; 0x26
    28d6:	213c      	movs	r1, #60	; 0x3c
    28d8:	5499      	strb	r1, [r3, r2]
    28da:	2310      	movs	r3, #16
    28dc:	18fb      	adds	r3, r7, r3
    28de:	2227      	movs	r2, #39	; 0x27
    28e0:	218f      	movs	r1, #143	; 0x8f
    28e2:	5499      	strb	r1, [r3, r2]
    28e4:	2310      	movs	r3, #16
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	2228      	movs	r2, #40	; 0x28
    28ea:	213d      	movs	r1, #61	; 0x3d
    28ec:	5499      	strb	r1, [r3, r2]
    28ee:	2310      	movs	r3, #16
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	2229      	movs	r2, #41	; 0x29
    28f4:	2112      	movs	r1, #18
    28f6:	5499      	strb	r1, [r3, r2]
    28f8:	2310      	movs	r3, #16
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	222a      	movs	r2, #42	; 0x2a
    28fe:	216f      	movs	r1, #111	; 0x6f
    2900:	5499      	strb	r1, [r3, r2]
    2902:	2310      	movs	r3, #16
    2904:	18fb      	adds	r3, r7, r3
    2906:	222b      	movs	r2, #43	; 0x2b
    2908:	2130      	movs	r1, #48	; 0x30
    290a:	5499      	strb	r1, [r3, r2]
    290c:	2310      	movs	r3, #16
    290e:	18fb      	adds	r3, r7, r3
    2910:	222c      	movs	r2, #44	; 0x2c
    2912:	21ff      	movs	r1, #255	; 0xff
    2914:	5499      	strb	r1, [r3, r2]
    2916:	2310      	movs	r3, #16
    2918:	18fb      	adds	r3, r7, r3
    291a:	222d      	movs	r2, #45	; 0x2d
    291c:	2100      	movs	r1, #0
    291e:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    2920:	4b4b      	ldr	r3, [pc, #300]	; (2a50 <RFM_initialize+0x328>)
    2922:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    2924:	4b4b      	ldr	r3, [pc, #300]	; (2a54 <RFM_initialize+0x32c>)
    2926:	4798      	blx	r3
  configure_port_pins();
    2928:	4b4b      	ldr	r3, [pc, #300]	; (2a58 <RFM_initialize+0x330>)
    292a:	4798      	blx	r3
  configure_extint_channel();
    292c:	4b4b      	ldr	r3, [pc, #300]	; (2a5c <RFM_initialize+0x334>)
    292e:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    2930:	4b4b      	ldr	r3, [pc, #300]	; (2a60 <RFM_initialize+0x338>)
    2932:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    2934:	230f      	movs	r3, #15
    2936:	18fb      	adds	r3, r7, r3
    2938:	2232      	movs	r2, #50	; 0x32
    293a:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    293c:	21aa      	movs	r1, #170	; 0xaa
    293e:	202f      	movs	r0, #47	; 0x2f
    2940:	4b48      	ldr	r3, [pc, #288]	; (2a64 <RFM_initialize+0x33c>)
    2942:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    2944:	202f      	movs	r0, #47	; 0x2f
    2946:	4b48      	ldr	r3, [pc, #288]	; (2a68 <RFM_initialize+0x340>)
    2948:	4798      	blx	r3
    294a:	1e03      	subs	r3, r0, #0
    294c:	2baa      	cmp	r3, #170	; 0xaa
    294e:	d008      	beq.n	2962 <RFM_initialize+0x23a>
    2950:	4b46      	ldr	r3, [pc, #280]	; (2a6c <RFM_initialize+0x344>)
    2952:	4798      	blx	r3
    2954:	0002      	movs	r2, r0
    2956:	230f      	movs	r3, #15
    2958:	18fb      	adds	r3, r7, r3
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	b2db      	uxtb	r3, r3
    295e:	429a      	cmp	r2, r3
    2960:	d3ec      	bcc.n	293c <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    2962:	4b3f      	ldr	r3, [pc, #252]	; (2a60 <RFM_initialize+0x338>)
    2964:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    2966:	2155      	movs	r1, #85	; 0x55
    2968:	202f      	movs	r0, #47	; 0x2f
    296a:	4b3e      	ldr	r3, [pc, #248]	; (2a64 <RFM_initialize+0x33c>)
    296c:	4798      	blx	r3
    296e:	202f      	movs	r0, #47	; 0x2f
    2970:	4b3d      	ldr	r3, [pc, #244]	; (2a68 <RFM_initialize+0x340>)
    2972:	4798      	blx	r3
    2974:	1e03      	subs	r3, r0, #0
    2976:	2b55      	cmp	r3, #85	; 0x55
    2978:	d008      	beq.n	298c <RFM_initialize+0x264>
    297a:	4b3c      	ldr	r3, [pc, #240]	; (2a6c <RFM_initialize+0x344>)
    297c:	4798      	blx	r3
    297e:	0002      	movs	r2, r0
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	b2db      	uxtb	r3, r3
    2988:	429a      	cmp	r2, r3
    298a:	d3ec      	bcc.n	2966 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    298c:	233f      	movs	r3, #63	; 0x3f
    298e:	18fb      	adds	r3, r7, r3
    2990:	2200      	movs	r2, #0
    2992:	701a      	strb	r2, [r3, #0]
    2994:	e019      	b.n	29ca <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    2996:	233f      	movs	r3, #63	; 0x3f
    2998:	18fb      	adds	r3, r7, r3
    299a:	781a      	ldrb	r2, [r3, #0]
    299c:	2310      	movs	r3, #16
    299e:	18fb      	adds	r3, r7, r3
    29a0:	0052      	lsls	r2, r2, #1
    29a2:	5cd0      	ldrb	r0, [r2, r3]
    29a4:	233f      	movs	r3, #63	; 0x3f
    29a6:	18fb      	adds	r3, r7, r3
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	2210      	movs	r2, #16
    29ac:	18ba      	adds	r2, r7, r2
    29ae:	005b      	lsls	r3, r3, #1
    29b0:	18d3      	adds	r3, r2, r3
    29b2:	3301      	adds	r3, #1
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	0019      	movs	r1, r3
    29b8:	4b2a      	ldr	r3, [pc, #168]	; (2a64 <RFM_initialize+0x33c>)
    29ba:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    29bc:	233f      	movs	r3, #63	; 0x3f
    29be:	18fb      	adds	r3, r7, r3
    29c0:	781a      	ldrb	r2, [r3, #0]
    29c2:	233f      	movs	r3, #63	; 0x3f
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	3201      	adds	r2, #1
    29c8:	701a      	strb	r2, [r3, #0]
    29ca:	233f      	movs	r3, #63	; 0x3f
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	781a      	ldrb	r2, [r3, #0]
    29d0:	2310      	movs	r3, #16
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	0052      	lsls	r2, r2, #1
    29d6:	5cd3      	ldrb	r3, [r2, r3]
    29d8:	2bff      	cmp	r3, #255	; 0xff
    29da:	d1dc      	bne.n	2996 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    29dc:	2000      	movs	r0, #0
    29de:	4b24      	ldr	r3, [pc, #144]	; (2a70 <RFM_initialize+0x348>)
    29e0:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    29e2:	4b24      	ldr	r3, [pc, #144]	; (2a74 <RFM_initialize+0x34c>)
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	b2db      	uxtb	r3, r3
    29e8:	0018      	movs	r0, r3
    29ea:	4b23      	ldr	r3, [pc, #140]	; (2a78 <RFM_initialize+0x350>)
    29ec:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    29ee:	2001      	movs	r0, #1
    29f0:	4b22      	ldr	r3, [pc, #136]	; (2a7c <RFM_initialize+0x354>)
    29f2:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    29f4:	4b1a      	ldr	r3, [pc, #104]	; (2a60 <RFM_initialize+0x338>)
    29f6:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    29f8:	46c0      	nop			; (mov r8, r8)
    29fa:	2027      	movs	r0, #39	; 0x27
    29fc:	4b1a      	ldr	r3, [pc, #104]	; (2a68 <RFM_initialize+0x340>)
    29fe:	4798      	blx	r3
    2a00:	0003      	movs	r3, r0
    2a02:	b25b      	sxtb	r3, r3
    2a04:	2b00      	cmp	r3, #0
    2a06:	db08      	blt.n	2a1a <RFM_initialize+0x2f2>
    2a08:	4b18      	ldr	r3, [pc, #96]	; (2a6c <RFM_initialize+0x344>)
    2a0a:	4798      	blx	r3
    2a0c:	0002      	movs	r2, r0
    2a0e:	230f      	movs	r3, #15
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	b2db      	uxtb	r3, r3
    2a16:	429a      	cmp	r2, r3
    2a18:	d3ef      	bcc.n	29fa <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    2a1a:	4b14      	ldr	r3, [pc, #80]	; (2a6c <RFM_initialize+0x344>)
    2a1c:	4798      	blx	r3
    2a1e:	0002      	movs	r2, r0
    2a20:	230f      	movs	r3, #15
    2a22:	18fb      	adds	r3, r7, r3
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	b2db      	uxtb	r3, r3
    2a28:	429a      	cmp	r2, r3
    2a2a:	d301      	bcc.n	2a30 <RFM_initialize+0x308>
    return false;
    2a2c:	2300      	movs	r3, #0
    2a2e:	e009      	b.n	2a44 <RFM_initialize+0x31c>
  _inISR = false;
    2a30:	4b13      	ldr	r3, [pc, #76]	; (2a80 <RFM_initialize+0x358>)
    2a32:	2200      	movs	r2, #0
    2a34:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    2a36:	4b13      	ldr	r3, [pc, #76]	; (2a84 <RFM_initialize+0x35c>)
    2a38:	4798      	blx	r3

  _address = nodeID;
    2a3a:	4b13      	ldr	r3, [pc, #76]	; (2a88 <RFM_initialize+0x360>)
    2a3c:	1dba      	adds	r2, r7, #6
    2a3e:	7812      	ldrb	r2, [r2, #0]
    2a40:	701a      	strb	r2, [r3, #0]
  return true;
    2a42:	2301      	movs	r3, #1
}
    2a44:	0018      	movs	r0, r3
    2a46:	46bd      	mov	sp, r7
    2a48:	b011      	add	sp, #68	; 0x44
    2a4a:	bd90      	pop	{r4, r7, pc}
    2a4c:	000026f5 	.word	0x000026f5
    2a50:	00002379 	.word	0x00002379
    2a54:	00002439 	.word	0x00002439
    2a58:	000022dd 	.word	0x000022dd
    2a5c:	0000230d 	.word	0x0000230d
    2a60:	0000249d 	.word	0x0000249d
    2a64:	000030d1 	.word	0x000030d1
    2a68:	00003069 	.word	0x00003069
    2a6c:	000024c5 	.word	0x000024c5
    2a70:	00002f75 	.word	0x00002f75
    2a74:	200002d8 	.word	0x200002d8
    2a78:	00002671 	.word	0x00002671
    2a7c:	00002a8d 	.word	0x00002a8d
    2a80:	20000249 	.word	0x20000249
    2a84:	0000234d 	.word	0x0000234d
    2a88:	2000024a 	.word	0x2000024a

00002a8c <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b082      	sub	sp, #8
    2a90:	af00      	add	r7, sp, #0
    2a92:	0002      	movs	r2, r0
    2a94:	1dfb      	adds	r3, r7, #7
    2a96:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    2a98:	1dfb      	adds	r3, r7, #7
    2a9a:	781b      	ldrb	r3, [r3, #0]
    2a9c:	b29a      	uxth	r2, r3
    2a9e:	4b47      	ldr	r3, [pc, #284]	; (2bbc <setMode+0x130>)
    2aa0:	881b      	ldrh	r3, [r3, #0]
    2aa2:	b29b      	uxth	r3, r3
    2aa4:	429a      	cmp	r2, r3
    2aa6:	d100      	bne.n	2aaa <setMode+0x1e>
    2aa8:	e081      	b.n	2bae <setMode+0x122>
    return;

  switch (newMode) {
    2aaa:	1dfb      	adds	r3, r7, #7
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	2b04      	cmp	r3, #4
    2ab0:	d900      	bls.n	2ab4 <setMode+0x28>
    2ab2:	e07e      	b.n	2bb2 <setMode+0x126>
    2ab4:	009a      	lsls	r2, r3, #2
    2ab6:	4b42      	ldr	r3, [pc, #264]	; (2bc0 <setMode+0x134>)
    2ab8:	18d3      	adds	r3, r2, r3
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    2abe:	2001      	movs	r0, #1
    2ac0:	4b40      	ldr	r3, [pc, #256]	; (2bc4 <setMode+0x138>)
    2ac2:	4798      	blx	r3
    2ac4:	0003      	movs	r3, r0
    2ac6:	b25b      	sxtb	r3, r3
    2ac8:	221c      	movs	r2, #28
    2aca:	4393      	bics	r3, r2
    2acc:	b25b      	sxtb	r3, r3
    2ace:	220c      	movs	r2, #12
    2ad0:	4313      	orrs	r3, r2
    2ad2:	b25b      	sxtb	r3, r3
    2ad4:	b2db      	uxtb	r3, r3
    2ad6:	0019      	movs	r1, r3
    2ad8:	2001      	movs	r0, #1
    2ada:	4b3b      	ldr	r3, [pc, #236]	; (2bc8 <setMode+0x13c>)
    2adc:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    2ade:	4b3b      	ldr	r3, [pc, #236]	; (2bcc <setMode+0x140>)
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	b2db      	uxtb	r3, r3
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d04c      	beq.n	2b82 <setMode+0xf6>
    2ae8:	2001      	movs	r0, #1
    2aea:	4b39      	ldr	r3, [pc, #228]	; (2bd0 <setMode+0x144>)
    2aec:	4798      	blx	r3
      break;
    2aee:	e048      	b.n	2b82 <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    2af0:	2001      	movs	r0, #1
    2af2:	4b34      	ldr	r3, [pc, #208]	; (2bc4 <setMode+0x138>)
    2af4:	4798      	blx	r3
    2af6:	0003      	movs	r3, r0
    2af8:	b25b      	sxtb	r3, r3
    2afa:	221c      	movs	r2, #28
    2afc:	4393      	bics	r3, r2
    2afe:	b25b      	sxtb	r3, r3
    2b00:	2210      	movs	r2, #16
    2b02:	4313      	orrs	r3, r2
    2b04:	b25b      	sxtb	r3, r3
    2b06:	b2db      	uxtb	r3, r3
    2b08:	0019      	movs	r1, r3
    2b0a:	2001      	movs	r0, #1
    2b0c:	4b2e      	ldr	r3, [pc, #184]	; (2bc8 <setMode+0x13c>)
    2b0e:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    2b10:	4b2e      	ldr	r3, [pc, #184]	; (2bcc <setMode+0x140>)
    2b12:	781b      	ldrb	r3, [r3, #0]
    2b14:	b2db      	uxtb	r3, r3
    2b16:	2b00      	cmp	r3, #0
    2b18:	d035      	beq.n	2b86 <setMode+0xfa>
    2b1a:	2000      	movs	r0, #0
    2b1c:	4b2c      	ldr	r3, [pc, #176]	; (2bd0 <setMode+0x144>)
    2b1e:	4798      	blx	r3
      break;
    2b20:	e031      	b.n	2b86 <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    2b22:	2001      	movs	r0, #1
    2b24:	4b27      	ldr	r3, [pc, #156]	; (2bc4 <setMode+0x138>)
    2b26:	4798      	blx	r3
    2b28:	0003      	movs	r3, r0
    2b2a:	b25b      	sxtb	r3, r3
    2b2c:	221c      	movs	r2, #28
    2b2e:	4393      	bics	r3, r2
    2b30:	b25b      	sxtb	r3, r3
    2b32:	2208      	movs	r2, #8
    2b34:	4313      	orrs	r3, r2
    2b36:	b25b      	sxtb	r3, r3
    2b38:	b2db      	uxtb	r3, r3
    2b3a:	0019      	movs	r1, r3
    2b3c:	2001      	movs	r0, #1
    2b3e:	4b22      	ldr	r3, [pc, #136]	; (2bc8 <setMode+0x13c>)
    2b40:	4798      	blx	r3
      break;
    2b42:	e021      	b.n	2b88 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    2b44:	2001      	movs	r0, #1
    2b46:	4b1f      	ldr	r3, [pc, #124]	; (2bc4 <setMode+0x138>)
    2b48:	4798      	blx	r3
    2b4a:	0003      	movs	r3, r0
    2b4c:	b25b      	sxtb	r3, r3
    2b4e:	221c      	movs	r2, #28
    2b50:	4393      	bics	r3, r2
    2b52:	b25b      	sxtb	r3, r3
    2b54:	2204      	movs	r2, #4
    2b56:	4313      	orrs	r3, r2
    2b58:	b25b      	sxtb	r3, r3
    2b5a:	b2db      	uxtb	r3, r3
    2b5c:	0019      	movs	r1, r3
    2b5e:	2001      	movs	r0, #1
    2b60:	4b19      	ldr	r3, [pc, #100]	; (2bc8 <setMode+0x13c>)
    2b62:	4798      	blx	r3
      break;
    2b64:	e010      	b.n	2b88 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    2b66:	2001      	movs	r0, #1
    2b68:	4b16      	ldr	r3, [pc, #88]	; (2bc4 <setMode+0x138>)
    2b6a:	4798      	blx	r3
    2b6c:	0003      	movs	r3, r0
    2b6e:	001a      	movs	r2, r3
    2b70:	231c      	movs	r3, #28
    2b72:	439a      	bics	r2, r3
    2b74:	0013      	movs	r3, r2
    2b76:	b2db      	uxtb	r3, r3
    2b78:	0019      	movs	r1, r3
    2b7a:	2001      	movs	r0, #1
    2b7c:	4b12      	ldr	r3, [pc, #72]	; (2bc8 <setMode+0x13c>)
    2b7e:	4798      	blx	r3
      break;
    2b80:	e002      	b.n	2b88 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	e000      	b.n	2b88 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    2b86:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    2b88:	46c0      	nop			; (mov r8, r8)
    2b8a:	4b0c      	ldr	r3, [pc, #48]	; (2bbc <setMode+0x130>)
    2b8c:	881b      	ldrh	r3, [r3, #0]
    2b8e:	b29b      	uxth	r3, r3
    2b90:	2b00      	cmp	r3, #0
    2b92:	d106      	bne.n	2ba2 <setMode+0x116>
    2b94:	2027      	movs	r0, #39	; 0x27
    2b96:	4b0b      	ldr	r3, [pc, #44]	; (2bc4 <setMode+0x138>)
    2b98:	4798      	blx	r3
    2b9a:	0003      	movs	r3, r0
    2b9c:	b25b      	sxtb	r3, r3
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	daf3      	bge.n	2b8a <setMode+0xfe>

  _mode = newMode;
    2ba2:	1dfb      	adds	r3, r7, #7
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	b29a      	uxth	r2, r3
    2ba8:	4b04      	ldr	r3, [pc, #16]	; (2bbc <setMode+0x130>)
    2baa:	801a      	strh	r2, [r3, #0]
    2bac:	e002      	b.n	2bb4 <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	e000      	b.n	2bb4 <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    2bb2:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    2bb4:	46bd      	mov	sp, r7
    2bb6:	b002      	add	sp, #8
    2bb8:	bd80      	pop	{r7, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	200002d6 	.word	0x200002d6
    2bc0:	00009de8 	.word	0x00009de8
    2bc4:	00003069 	.word	0x00003069
    2bc8:	000030d1 	.word	0x000030d1
    2bcc:	200002d8 	.word	0x200002d8
    2bd0:	00003181 	.word	0x00003181

00002bd4 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    2bd8:	4b0b      	ldr	r3, [pc, #44]	; (2c08 <canSend+0x34>)
    2bda:	881b      	ldrh	r3, [r3, #0]
    2bdc:	b29b      	uxth	r3, r3
    2bde:	2b03      	cmp	r3, #3
    2be0:	d10e      	bne.n	2c00 <canSend+0x2c>
    2be2:	4b0a      	ldr	r3, [pc, #40]	; (2c0c <canSend+0x38>)
    2be4:	881b      	ldrh	r3, [r3, #0]
    2be6:	b29b      	uxth	r3, r3
    2be8:	2b00      	cmp	r3, #0
    2bea:	d109      	bne.n	2c00 <canSend+0x2c>
    2bec:	4b08      	ldr	r3, [pc, #32]	; (2c10 <canSend+0x3c>)
    2bee:	4798      	blx	r3
    2bf0:	0003      	movs	r3, r0
    2bf2:	335a      	adds	r3, #90	; 0x5a
    2bf4:	da04      	bge.n	2c00 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    2bf6:	2001      	movs	r0, #1
    2bf8:	4b06      	ldr	r3, [pc, #24]	; (2c14 <canSend+0x40>)
    2bfa:	4798      	blx	r3
    return true;
    2bfc:	2301      	movs	r3, #1
    2bfe:	e000      	b.n	2c02 <canSend+0x2e>
  }
  return false;
    2c00:	2300      	movs	r3, #0
}
    2c02:	0018      	movs	r0, r3
    2c04:	46bd      	mov	sp, r7
    2c06:	bd80      	pop	{r7, pc}
    2c08:	200002d6 	.word	0x200002d6
    2c0c:	200002d0 	.word	0x200002d0
    2c10:	00003029 	.word	0x00003029
    2c14:	00002a8d 	.word	0x00002a8d

00002c18 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    2c18:	b590      	push	{r4, r7, lr}
    2c1a:	b085      	sub	sp, #20
    2c1c:	af02      	add	r7, sp, #8
    2c1e:	0004      	movs	r4, r0
    2c20:	6039      	str	r1, [r7, #0]
    2c22:	0010      	movs	r0, r2
    2c24:	0019      	movs	r1, r3
    2c26:	1dfb      	adds	r3, r7, #7
    2c28:	1c22      	adds	r2, r4, #0
    2c2a:	701a      	strb	r2, [r3, #0]
    2c2c:	1dbb      	adds	r3, r7, #6
    2c2e:	1c02      	adds	r2, r0, #0
    2c30:	701a      	strb	r2, [r3, #0]
    2c32:	1d7b      	adds	r3, r7, #5
    2c34:	1c0a      	adds	r2, r1, #0
    2c36:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    2c38:	203d      	movs	r0, #61	; 0x3d
    2c3a:	4b17      	ldr	r3, [pc, #92]	; (2c98 <RFM_send+0x80>)
    2c3c:	4798      	blx	r3
    2c3e:	0003      	movs	r3, r0
    2c40:	001a      	movs	r2, r3
    2c42:	2304      	movs	r3, #4
    2c44:	4313      	orrs	r3, r2
    2c46:	b2db      	uxtb	r3, r3
    2c48:	0019      	movs	r1, r3
    2c4a:	203d      	movs	r0, #61	; 0x3d
    2c4c:	4b13      	ldr	r3, [pc, #76]	; (2c9c <RFM_send+0x84>)
    2c4e:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    2c50:	4b13      	ldr	r3, [pc, #76]	; (2ca0 <RFM_send+0x88>)
    2c52:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    2c54:	e001      	b.n	2c5a <RFM_send+0x42>
    2c56:	4b13      	ldr	r3, [pc, #76]	; (2ca4 <RFM_send+0x8c>)
    2c58:	4798      	blx	r3
    2c5a:	4b13      	ldr	r3, [pc, #76]	; (2ca8 <RFM_send+0x90>)
    2c5c:	4798      	blx	r3
    2c5e:	0003      	movs	r3, r0
    2c60:	001a      	movs	r2, r3
    2c62:	2301      	movs	r3, #1
    2c64:	4053      	eors	r3, r2
    2c66:	b2db      	uxtb	r3, r3
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d005      	beq.n	2c78 <RFM_send+0x60>
    2c6c:	4b0f      	ldr	r3, [pc, #60]	; (2cac <RFM_send+0x94>)
    2c6e:	4798      	blx	r3
    2c70:	1e02      	subs	r2, r0, #0
    2c72:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <RFM_send+0x98>)
    2c74:	429a      	cmp	r2, r3
    2c76:	d9ee      	bls.n	2c56 <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    2c78:	1d7b      	adds	r3, r7, #5
    2c7a:	781c      	ldrb	r4, [r3, #0]
    2c7c:	1dbb      	adds	r3, r7, #6
    2c7e:	781a      	ldrb	r2, [r3, #0]
    2c80:	6839      	ldr	r1, [r7, #0]
    2c82:	1dfb      	adds	r3, r7, #7
    2c84:	7818      	ldrb	r0, [r3, #0]
    2c86:	2300      	movs	r3, #0
    2c88:	9300      	str	r3, [sp, #0]
    2c8a:	0023      	movs	r3, r4
    2c8c:	4c09      	ldr	r4, [pc, #36]	; (2cb4 <RFM_send+0x9c>)
    2c8e:	47a0      	blx	r4
}
    2c90:	46c0      	nop			; (mov r8, r8)
    2c92:	46bd      	mov	sp, r7
    2c94:	b003      	add	sp, #12
    2c96:	bd90      	pop	{r4, r7, pc}
    2c98:	00003069 	.word	0x00003069
    2c9c:	000030d1 	.word	0x000030d1
    2ca0:	0000249d 	.word	0x0000249d
    2ca4:	00002f29 	.word	0x00002f29
    2ca8:	00002bd5 	.word	0x00002bd5
    2cac:	000024c5 	.word	0x000024c5
    2cb0:	000003e7 	.word	0x000003e7
    2cb4:	000024ed 	.word	0x000024ed

00002cb8 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    2cb8:	b580      	push	{r7, lr}
    2cba:	b082      	sub	sp, #8
    2cbc:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    2cbe:	4b58      	ldr	r3, [pc, #352]	; (2e20 <interruptHandler+0x168>)
    2cc0:	881b      	ldrh	r3, [r3, #0]
    2cc2:	b29b      	uxth	r3, r3
    2cc4:	2b03      	cmp	r3, #3
    2cc6:	d000      	beq.n	2cca <interruptHandler+0x12>
    2cc8:	e0a1      	b.n	2e0e <interruptHandler+0x156>
    2cca:	2028      	movs	r0, #40	; 0x28
    2ccc:	4b55      	ldr	r3, [pc, #340]	; (2e24 <interruptHandler+0x16c>)
    2cce:	4798      	blx	r3
    2cd0:	0003      	movs	r3, r0
    2cd2:	001a      	movs	r2, r3
    2cd4:	2304      	movs	r3, #4
    2cd6:	4013      	ands	r3, r2
    2cd8:	d100      	bne.n	2cdc <interruptHandler+0x24>
    2cda:	e098      	b.n	2e0e <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    2cdc:	2001      	movs	r0, #1
    2cde:	4b52      	ldr	r3, [pc, #328]	; (2e28 <interruptHandler+0x170>)
    2ce0:	4798      	blx	r3
    selectrf();
    2ce2:	4b52      	ldr	r3, [pc, #328]	; (2e2c <interruptHandler+0x174>)
    2ce4:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    2ce6:	4a52      	ldr	r2, [pc, #328]	; (2e30 <interruptHandler+0x178>)
    2ce8:	4b52      	ldr	r3, [pc, #328]	; (2e34 <interruptHandler+0x17c>)
    2cea:	2100      	movs	r1, #0
    2cec:	0018      	movs	r0, r3
    2cee:	4b52      	ldr	r3, [pc, #328]	; (2e38 <interruptHandler+0x180>)
    2cf0:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    2cf2:	4a52      	ldr	r2, [pc, #328]	; (2e3c <interruptHandler+0x184>)
    2cf4:	4b4f      	ldr	r3, [pc, #316]	; (2e34 <interruptHandler+0x17c>)
    2cf6:	2100      	movs	r1, #0
    2cf8:	0018      	movs	r0, r3
    2cfa:	4b4f      	ldr	r3, [pc, #316]	; (2e38 <interruptHandler+0x180>)
    2cfc:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    2cfe:	4b4f      	ldr	r3, [pc, #316]	; (2e3c <interruptHandler+0x184>)
    2d00:	881b      	ldrh	r3, [r3, #0]
    2d02:	b29b      	uxth	r3, r3
    2d04:	2b42      	cmp	r3, #66	; 0x42
    2d06:	d803      	bhi.n	2d10 <interruptHandler+0x58>
    2d08:	4b4c      	ldr	r3, [pc, #304]	; (2e3c <interruptHandler+0x184>)
    2d0a:	881b      	ldrh	r3, [r3, #0]
    2d0c:	b29a      	uxth	r2, r3
    2d0e:	e000      	b.n	2d12 <interruptHandler+0x5a>
    2d10:	2242      	movs	r2, #66	; 0x42
    2d12:	4b4a      	ldr	r3, [pc, #296]	; (2e3c <interruptHandler+0x184>)
    2d14:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    2d16:	4a4a      	ldr	r2, [pc, #296]	; (2e40 <interruptHandler+0x188>)
    2d18:	4b46      	ldr	r3, [pc, #280]	; (2e34 <interruptHandler+0x17c>)
    2d1a:	2100      	movs	r1, #0
    2d1c:	0018      	movs	r0, r3
    2d1e:	4b46      	ldr	r3, [pc, #280]	; (2e38 <interruptHandler+0x180>)
    2d20:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    2d22:	4b48      	ldr	r3, [pc, #288]	; (2e44 <interruptHandler+0x18c>)
    2d24:	781b      	ldrb	r3, [r3, #0]
    2d26:	b2db      	uxtb	r3, r3
    2d28:	2201      	movs	r2, #1
    2d2a:	4053      	eors	r3, r2
    2d2c:	b2db      	uxtb	r3, r3
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d00d      	beq.n	2d4e <interruptHandler+0x96>
    2d32:	4b45      	ldr	r3, [pc, #276]	; (2e48 <interruptHandler+0x190>)
    2d34:	781b      	ldrb	r3, [r3, #0]
    2d36:	b2db      	uxtb	r3, r3
    2d38:	b29a      	uxth	r2, r3
    2d3a:	4b41      	ldr	r3, [pc, #260]	; (2e40 <interruptHandler+0x188>)
    2d3c:	881b      	ldrh	r3, [r3, #0]
    2d3e:	b29b      	uxth	r3, r3
    2d40:	429a      	cmp	r2, r3
    2d42:	d004      	beq.n	2d4e <interruptHandler+0x96>
    2d44:	4b3e      	ldr	r3, [pc, #248]	; (2e40 <interruptHandler+0x188>)
    2d46:	881b      	ldrh	r3, [r3, #0]
    2d48:	b29b      	uxth	r3, r3
    2d4a:	2bff      	cmp	r3, #255	; 0xff
    2d4c:	d104      	bne.n	2d58 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    2d4e:	4b3b      	ldr	r3, [pc, #236]	; (2e3c <interruptHandler+0x184>)
    2d50:	881b      	ldrh	r3, [r3, #0]
    2d52:	b29b      	uxth	r3, r3
    2d54:	2b02      	cmp	r3, #2
    2d56:	d807      	bhi.n	2d68 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    2d58:	4b38      	ldr	r3, [pc, #224]	; (2e3c <interruptHandler+0x184>)
    2d5a:	2200      	movs	r2, #0
    2d5c:	801a      	strh	r2, [r3, #0]
      unselect();
    2d5e:	4b3b      	ldr	r3, [pc, #236]	; (2e4c <interruptHandler+0x194>)
    2d60:	4798      	blx	r3
      receiveBegin();
    2d62:	4b3b      	ldr	r3, [pc, #236]	; (2e50 <interruptHandler+0x198>)
    2d64:	4798      	blx	r3
    2d66:	e058      	b.n	2e1a <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    2d68:	4b34      	ldr	r3, [pc, #208]	; (2e3c <interruptHandler+0x184>)
    2d6a:	881b      	ldrh	r3, [r3, #0]
    2d6c:	b29b      	uxth	r3, r3
    2d6e:	3b03      	subs	r3, #3
    2d70:	b29a      	uxth	r2, r3
    2d72:	4b38      	ldr	r3, [pc, #224]	; (2e54 <interruptHandler+0x19c>)
    2d74:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    2d76:	4a38      	ldr	r2, [pc, #224]	; (2e58 <interruptHandler+0x1a0>)
    2d78:	4b2e      	ldr	r3, [pc, #184]	; (2e34 <interruptHandler+0x17c>)
    2d7a:	2100      	movs	r1, #0
    2d7c:	0018      	movs	r0, r3
    2d7e:	4b2e      	ldr	r3, [pc, #184]	; (2e38 <interruptHandler+0x180>)
    2d80:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    2d82:	1dbb      	adds	r3, r7, #6
    2d84:	2200      	movs	r2, #0
    2d86:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    2d88:	1dba      	adds	r2, r7, #6
    2d8a:	4b2a      	ldr	r3, [pc, #168]	; (2e34 <interruptHandler+0x17c>)
    2d8c:	2100      	movs	r1, #0
    2d8e:	0018      	movs	r0, r3
    2d90:	4b29      	ldr	r3, [pc, #164]	; (2e38 <interruptHandler+0x180>)
    2d92:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    2d94:	1dbb      	adds	r3, r7, #6
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	b29b      	uxth	r3, r3
    2d9a:	2280      	movs	r2, #128	; 0x80
    2d9c:	4013      	ands	r3, r2
    2d9e:	b29a      	uxth	r2, r3
    2da0:	4b2e      	ldr	r3, [pc, #184]	; (2e5c <interruptHandler+0x1a4>)
    2da2:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    2da4:	1dbb      	adds	r3, r7, #6
    2da6:	781b      	ldrb	r3, [r3, #0]
    2da8:	b29b      	uxth	r3, r3
    2daa:	2240      	movs	r2, #64	; 0x40
    2dac:	4013      	ands	r3, r2
    2dae:	b29a      	uxth	r2, r3
    2db0:	4b2b      	ldr	r3, [pc, #172]	; (2e60 <interruptHandler+0x1a8>)
    2db2:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    2db4:	1dfb      	adds	r3, r7, #7
    2db6:	2200      	movs	r2, #0
    2db8:	701a      	strb	r2, [r3, #0]
    2dba:	e00e      	b.n	2dda <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    2dbc:	1dfb      	adds	r3, r7, #7
    2dbe:	781b      	ldrb	r3, [r3, #0]
    2dc0:	005a      	lsls	r2, r3, #1
    2dc2:	4b28      	ldr	r3, [pc, #160]	; (2e64 <interruptHandler+0x1ac>)
    2dc4:	18d2      	adds	r2, r2, r3
    2dc6:	4b1b      	ldr	r3, [pc, #108]	; (2e34 <interruptHandler+0x17c>)
    2dc8:	2100      	movs	r1, #0
    2dca:	0018      	movs	r0, r3
    2dcc:	4b1a      	ldr	r3, [pc, #104]	; (2e38 <interruptHandler+0x180>)
    2dce:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    2dd0:	1dfb      	adds	r3, r7, #7
    2dd2:	781a      	ldrb	r2, [r3, #0]
    2dd4:	1dfb      	adds	r3, r7, #7
    2dd6:	3201      	adds	r2, #1
    2dd8:	701a      	strb	r2, [r3, #0]
    2dda:	1dfb      	adds	r3, r7, #7
    2ddc:	781b      	ldrb	r3, [r3, #0]
    2dde:	b29a      	uxth	r2, r3
    2de0:	4b1c      	ldr	r3, [pc, #112]	; (2e54 <interruptHandler+0x19c>)
    2de2:	881b      	ldrh	r3, [r3, #0]
    2de4:	b29b      	uxth	r3, r3
    2de6:	429a      	cmp	r2, r3
    2de8:	d3e8      	bcc.n	2dbc <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    2dea:	4b1a      	ldr	r3, [pc, #104]	; (2e54 <interruptHandler+0x19c>)
    2dec:	881b      	ldrh	r3, [r3, #0]
    2dee:	b29b      	uxth	r3, r3
    2df0:	2b3c      	cmp	r3, #60	; 0x3c
    2df2:	d807      	bhi.n	2e04 <interruptHandler+0x14c>
    2df4:	4b17      	ldr	r3, [pc, #92]	; (2e54 <interruptHandler+0x19c>)
    2df6:	881b      	ldrh	r3, [r3, #0]
    2df8:	b29b      	uxth	r3, r3
    2dfa:	001a      	movs	r2, r3
    2dfc:	4b19      	ldr	r3, [pc, #100]	; (2e64 <interruptHandler+0x1ac>)
    2dfe:	0052      	lsls	r2, r2, #1
    2e00:	2100      	movs	r1, #0
    2e02:	52d1      	strh	r1, [r2, r3]
    unselect();
    2e04:	4b11      	ldr	r3, [pc, #68]	; (2e4c <interruptHandler+0x194>)
    2e06:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    2e08:	2003      	movs	r0, #3
    2e0a:	4b07      	ldr	r3, [pc, #28]	; (2e28 <interruptHandler+0x170>)
    2e0c:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    2e0e:	4b16      	ldr	r3, [pc, #88]	; (2e68 <interruptHandler+0x1b0>)
    2e10:	4798      	blx	r3
    2e12:	0003      	movs	r3, r0
    2e14:	001a      	movs	r2, r3
    2e16:	4b15      	ldr	r3, [pc, #84]	; (2e6c <interruptHandler+0x1b4>)
    2e18:	801a      	strh	r2, [r3, #0]
}
    2e1a:	46bd      	mov	sp, r7
    2e1c:	b002      	add	sp, #8
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	200002d6 	.word	0x200002d6
    2e24:	00003069 	.word	0x00003069
    2e28:	00002a8d 	.word	0x00002a8d
    2e2c:	00003131 	.word	0x00003131
    2e30:	200000fe 	.word	0x200000fe
    2e34:	200002dc 	.word	0x200002dc
    2e38:	00001479 	.word	0x00001479
    2e3c:	200002d0 	.word	0x200002d0
    2e40:	200002d4 	.word	0x200002d4
    2e44:	20000250 	.word	0x20000250
    2e48:	2000024a 	.word	0x2000024a
    2e4c:	00003155 	.word	0x00003155
    2e50:	00002e95 	.word	0x00002e95
    2e54:	2000024e 	.word	0x2000024e
    2e58:	2000023e 	.word	0x2000023e
    2e5c:	2000024c 	.word	0x2000024c
    2e60:	200002d2 	.word	0x200002d2
    2e64:	20000254 	.word	0x20000254
    2e68:	00003029 	.word	0x00003029
    2e6c:	200002e8 	.word	0x200002e8

00002e70 <isr0>:

// internal function
void isr0()
{ 
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
	_inISR = true; 
    2e74:	4b05      	ldr	r3, [pc, #20]	; (2e8c <isr0+0x1c>)
    2e76:	2201      	movs	r2, #1
    2e78:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <isr0+0x20>)
    2e7c:	4798      	blx	r3
	_inISR = false;
    2e7e:	4b03      	ldr	r3, [pc, #12]	; (2e8c <isr0+0x1c>)
    2e80:	2200      	movs	r2, #0
    2e82:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    2e84:	46c0      	nop			; (mov r8, r8)
    2e86:	46bd      	mov	sp, r7
    2e88:	bd80      	pop	{r7, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000249 	.word	0x20000249
    2e90:	00002cb9 	.word	0x00002cb9

00002e94 <receiveBegin>:

// internal function
void receiveBegin() {
    2e94:	b580      	push	{r7, lr}
    2e96:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    2e98:	4b19      	ldr	r3, [pc, #100]	; (2f00 <receiveBegin+0x6c>)
    2e9a:	2200      	movs	r2, #0
    2e9c:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    2e9e:	4b19      	ldr	r3, [pc, #100]	; (2f04 <receiveBegin+0x70>)
    2ea0:	2200      	movs	r2, #0
    2ea2:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    2ea4:	4b18      	ldr	r3, [pc, #96]	; (2f08 <receiveBegin+0x74>)
    2ea6:	2200      	movs	r2, #0
    2ea8:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    2eaa:	4b18      	ldr	r3, [pc, #96]	; (2f0c <receiveBegin+0x78>)
    2eac:	2200      	movs	r2, #0
    2eae:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    2eb0:	4b17      	ldr	r3, [pc, #92]	; (2f10 <receiveBegin+0x7c>)
    2eb2:	2200      	movs	r2, #0
    2eb4:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    2eb6:	4b17      	ldr	r3, [pc, #92]	; (2f14 <receiveBegin+0x80>)
    2eb8:	2200      	movs	r2, #0
    2eba:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    2ebc:	4b16      	ldr	r3, [pc, #88]	; (2f18 <receiveBegin+0x84>)
    2ebe:	2200      	movs	r2, #0
    2ec0:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    2ec2:	2028      	movs	r0, #40	; 0x28
    2ec4:	4b15      	ldr	r3, [pc, #84]	; (2f1c <receiveBegin+0x88>)
    2ec6:	4798      	blx	r3
    2ec8:	0003      	movs	r3, r0
    2eca:	001a      	movs	r2, r3
    2ecc:	2304      	movs	r3, #4
    2ece:	4013      	ands	r3, r2
    2ed0:	d00b      	beq.n	2eea <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    2ed2:	203d      	movs	r0, #61	; 0x3d
    2ed4:	4b11      	ldr	r3, [pc, #68]	; (2f1c <receiveBegin+0x88>)
    2ed6:	4798      	blx	r3
    2ed8:	0003      	movs	r3, r0
    2eda:	001a      	movs	r2, r3
    2edc:	2304      	movs	r3, #4
    2ede:	4313      	orrs	r3, r2
    2ee0:	b2db      	uxtb	r3, r3
    2ee2:	0019      	movs	r1, r3
    2ee4:	203d      	movs	r0, #61	; 0x3d
    2ee6:	4b0e      	ldr	r3, [pc, #56]	; (2f20 <receiveBegin+0x8c>)
    2ee8:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    2eea:	2140      	movs	r1, #64	; 0x40
    2eec:	2025      	movs	r0, #37	; 0x25
    2eee:	4b0c      	ldr	r3, [pc, #48]	; (2f20 <receiveBegin+0x8c>)
    2ef0:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    2ef2:	2003      	movs	r0, #3
    2ef4:	4b0b      	ldr	r3, [pc, #44]	; (2f24 <receiveBegin+0x90>)
    2ef6:	4798      	blx	r3
}
    2ef8:	46c0      	nop			; (mov r8, r8)
    2efa:	46bd      	mov	sp, r7
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	2000024e 	.word	0x2000024e
    2f04:	2000023e 	.word	0x2000023e
    2f08:	200002d4 	.word	0x200002d4
    2f0c:	200002d0 	.word	0x200002d0
    2f10:	200002d2 	.word	0x200002d2
    2f14:	2000024c 	.word	0x2000024c
    2f18:	200002e8 	.word	0x200002e8
    2f1c:	00003069 	.word	0x00003069
    2f20:	000030d1 	.word	0x000030d1
    2f24:	00002a8d 	.word	0x00002a8d

00002f28 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    2f28:	b580      	push	{r7, lr}
    2f2a:	af00      	add	r7, sp, #0
  //system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    2f2c:	4b0d      	ldr	r3, [pc, #52]	; (2f64 <RFM_receiveDone+0x3c>)
    2f2e:	881b      	ldrh	r3, [r3, #0]
    2f30:	b29b      	uxth	r3, r3
    2f32:	2b03      	cmp	r3, #3
    2f34:	d109      	bne.n	2f4a <RFM_receiveDone+0x22>
    2f36:	4b0c      	ldr	r3, [pc, #48]	; (2f68 <RFM_receiveDone+0x40>)
    2f38:	881b      	ldrh	r3, [r3, #0]
    2f3a:	b29b      	uxth	r3, r3
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d004      	beq.n	2f4a <RFM_receiveDone+0x22>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    2f40:	2001      	movs	r0, #1
    2f42:	4b0a      	ldr	r3, [pc, #40]	; (2f6c <RFM_receiveDone+0x44>)
    2f44:	4798      	blx	r3
    return true;
    2f46:	2301      	movs	r3, #1
    2f48:	e009      	b.n	2f5e <RFM_receiveDone+0x36>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    2f4a:	4b06      	ldr	r3, [pc, #24]	; (2f64 <RFM_receiveDone+0x3c>)
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	b29b      	uxth	r3, r3
    2f50:	2b03      	cmp	r3, #3
    2f52:	d101      	bne.n	2f58 <RFM_receiveDone+0x30>
  {
    //system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    return false;
    2f54:	2300      	movs	r3, #0
    2f56:	e002      	b.n	2f5e <RFM_receiveDone+0x36>
  }
  receiveBegin();
    2f58:	4b05      	ldr	r3, [pc, #20]	; (2f70 <RFM_receiveDone+0x48>)
    2f5a:	4798      	blx	r3
  return false;
    2f5c:	2300      	movs	r3, #0
}
    2f5e:	0018      	movs	r0, r3
    2f60:	46bd      	mov	sp, r7
    2f62:	bd80      	pop	{r7, pc}
    2f64:	200002d6 	.word	0x200002d6
    2f68:	200002d0 	.word	0x200002d0
    2f6c:	00002a8d 	.word	0x00002a8d
    2f70:	00002e95 	.word	0x00002e95

00002f74 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    2f74:	b580      	push	{r7, lr}
    2f76:	b084      	sub	sp, #16
    2f78:	af00      	add	r7, sp, #0
    2f7a:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    2f7c:	2001      	movs	r0, #1
    2f7e:	4b22      	ldr	r3, [pc, #136]	; (3008 <RFM_encrypt+0x94>)
    2f80:	4798      	blx	r3
  if (key != 0)
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d026      	beq.n	2fd6 <RFM_encrypt+0x62>
  {
    selectrf();
    2f88:	4b20      	ldr	r3, [pc, #128]	; (300c <RFM_encrypt+0x98>)
    2f8a:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    2f8c:	4a20      	ldr	r2, [pc, #128]	; (3010 <RFM_encrypt+0x9c>)
    2f8e:	4b21      	ldr	r3, [pc, #132]	; (3014 <RFM_encrypt+0xa0>)
    2f90:	21be      	movs	r1, #190	; 0xbe
    2f92:	0018      	movs	r0, r3
    2f94:	4b20      	ldr	r3, [pc, #128]	; (3018 <RFM_encrypt+0xa4>)
    2f96:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    2f98:	230f      	movs	r3, #15
    2f9a:	18fb      	adds	r3, r7, r3
    2f9c:	2200      	movs	r2, #0
    2f9e:	701a      	strb	r2, [r3, #0]
    2fa0:	e012      	b.n	2fc8 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    2fa2:	230f      	movs	r3, #15
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	18d3      	adds	r3, r2, r3
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	b299      	uxth	r1, r3
    2fb0:	4a17      	ldr	r2, [pc, #92]	; (3010 <RFM_encrypt+0x9c>)
    2fb2:	4b18      	ldr	r3, [pc, #96]	; (3014 <RFM_encrypt+0xa0>)
    2fb4:	0018      	movs	r0, r3
    2fb6:	4b18      	ldr	r3, [pc, #96]	; (3018 <RFM_encrypt+0xa4>)
    2fb8:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    2fba:	230f      	movs	r3, #15
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	781a      	ldrb	r2, [r3, #0]
    2fc0:	230f      	movs	r3, #15
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	3201      	adds	r2, #1
    2fc6:	701a      	strb	r2, [r3, #0]
    2fc8:	230f      	movs	r3, #15
    2fca:	18fb      	adds	r3, r7, r3
    2fcc:	781b      	ldrb	r3, [r3, #0]
    2fce:	2b0f      	cmp	r3, #15
    2fd0:	d9e7      	bls.n	2fa2 <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    2fd2:	4b12      	ldr	r3, [pc, #72]	; (301c <RFM_encrypt+0xa8>)
    2fd4:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    2fd6:	203d      	movs	r0, #61	; 0x3d
    2fd8:	4b11      	ldr	r3, [pc, #68]	; (3020 <RFM_encrypt+0xac>)
    2fda:	4798      	blx	r3
    2fdc:	0003      	movs	r3, r0
    2fde:	b25b      	sxtb	r3, r3
    2fe0:	2201      	movs	r2, #1
    2fe2:	4393      	bics	r3, r2
    2fe4:	b25a      	sxtb	r2, r3
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	1e59      	subs	r1, r3, #1
    2fea:	418b      	sbcs	r3, r1
    2fec:	b2db      	uxtb	r3, r3
    2fee:	b25b      	sxtb	r3, r3
    2ff0:	4313      	orrs	r3, r2
    2ff2:	b25b      	sxtb	r3, r3
    2ff4:	b2db      	uxtb	r3, r3
    2ff6:	0019      	movs	r1, r3
    2ff8:	203d      	movs	r0, #61	; 0x3d
    2ffa:	4b0a      	ldr	r3, [pc, #40]	; (3024 <RFM_encrypt+0xb0>)
    2ffc:	4798      	blx	r3
}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	46bd      	mov	sp, r7
    3002:	b004      	add	sp, #16
    3004:	bd80      	pop	{r7, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	00002a8d 	.word	0x00002a8d
    300c:	00003131 	.word	0x00003131
    3010:	200000fe 	.word	0x200000fe
    3014:	200002dc 	.word	0x200002dc
    3018:	00001479 	.word	0x00001479
    301c:	00003155 	.word	0x00003155
    3020:	00003069 	.word	0x00003069
    3024:	000030d1 	.word	0x000030d1

00003028 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    3028:	b580      	push	{r7, lr}
    302a:	b082      	sub	sp, #8
    302c:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    302e:	1dbb      	adds	r3, r7, #6
    3030:	2200      	movs	r2, #0
    3032:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    3034:	2024      	movs	r0, #36	; 0x24
    3036:	4b0b      	ldr	r3, [pc, #44]	; (3064 <readRSSI+0x3c>)
    3038:	4798      	blx	r3
    303a:	0003      	movs	r3, r0
    303c:	b29b      	uxth	r3, r3
    303e:	425b      	negs	r3, r3
    3040:	b29b      	uxth	r3, r3
    3042:	b21a      	sxth	r2, r3
    3044:	1dbb      	adds	r3, r7, #6
    3046:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    3048:	1dbb      	adds	r3, r7, #6
    304a:	881b      	ldrh	r3, [r3, #0]
    304c:	b21b      	sxth	r3, r3
    304e:	105b      	asrs	r3, r3, #1
    3050:	b21a      	sxth	r2, r3
    3052:	1dbb      	adds	r3, r7, #6
    3054:	801a      	strh	r2, [r3, #0]
  return rssi;
    3056:	1dbb      	adds	r3, r7, #6
    3058:	881b      	ldrh	r3, [r3, #0]
    305a:	b21b      	sxth	r3, r3
}
    305c:	0018      	movs	r0, r3
    305e:	46bd      	mov	sp, r7
    3060:	b002      	add	sp, #8
    3062:	bd80      	pop	{r7, pc}
    3064:	00003069 	.word	0x00003069

00003068 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    3068:	b580      	push	{r7, lr}
    306a:	b084      	sub	sp, #16
    306c:	af00      	add	r7, sp, #0
    306e:	0002      	movs	r2, r0
    3070:	1dbb      	adds	r3, r7, #6
    3072:	801a      	strh	r2, [r3, #0]
  selectrf();
    3074:	4b11      	ldr	r3, [pc, #68]	; (30bc <readReg+0x54>)
    3076:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    3078:	1dbb      	adds	r3, r7, #6
    307a:	881b      	ldrh	r3, [r3, #0]
    307c:	b29b      	uxth	r3, r3
    307e:	227f      	movs	r2, #127	; 0x7f
    3080:	4013      	ands	r3, r2
    3082:	b299      	uxth	r1, r3
    3084:	4a0e      	ldr	r2, [pc, #56]	; (30c0 <readReg+0x58>)
    3086:	4b0f      	ldr	r3, [pc, #60]	; (30c4 <readReg+0x5c>)
    3088:	0018      	movs	r0, r3
    308a:	4b0f      	ldr	r3, [pc, #60]	; (30c8 <readReg+0x60>)
    308c:	4798      	blx	r3
  volatile uint16_t regval = 0;
    308e:	230e      	movs	r3, #14
    3090:	18fb      	adds	r3, r7, r3
    3092:	2200      	movs	r2, #0
    3094:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    3096:	230e      	movs	r3, #14
    3098:	18fa      	adds	r2, r7, r3
    309a:	4b0a      	ldr	r3, [pc, #40]	; (30c4 <readReg+0x5c>)
    309c:	2100      	movs	r1, #0
    309e:	0018      	movs	r0, r3
    30a0:	4b09      	ldr	r3, [pc, #36]	; (30c8 <readReg+0x60>)
    30a2:	4798      	blx	r3
  unselect();
    30a4:	4b09      	ldr	r3, [pc, #36]	; (30cc <readReg+0x64>)
    30a6:	4798      	blx	r3
  return (uint8_t)regval;
    30a8:	230e      	movs	r3, #14
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	881b      	ldrh	r3, [r3, #0]
    30ae:	b29b      	uxth	r3, r3
    30b0:	b2db      	uxtb	r3, r3
}
    30b2:	0018      	movs	r0, r3
    30b4:	46bd      	mov	sp, r7
    30b6:	b004      	add	sp, #16
    30b8:	bd80      	pop	{r7, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	00003131 	.word	0x00003131
    30c0:	200000fe 	.word	0x200000fe
    30c4:	200002dc 	.word	0x200002dc
    30c8:	00001479 	.word	0x00001479
    30cc:	00003155 	.word	0x00003155

000030d0 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	0002      	movs	r2, r0
    30d8:	1dfb      	adds	r3, r7, #7
    30da:	701a      	strb	r2, [r3, #0]
    30dc:	1dbb      	adds	r3, r7, #6
    30de:	1c0a      	adds	r2, r1, #0
    30e0:	701a      	strb	r2, [r3, #0]
  selectrf();
    30e2:	4b0e      	ldr	r3, [pc, #56]	; (311c <writeReg+0x4c>)
    30e4:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    30e6:	1dfb      	adds	r3, r7, #7
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	2280      	movs	r2, #128	; 0x80
    30ec:	4252      	negs	r2, r2
    30ee:	4313      	orrs	r3, r2
    30f0:	b2db      	uxtb	r3, r3
    30f2:	b299      	uxth	r1, r3
    30f4:	4a0a      	ldr	r2, [pc, #40]	; (3120 <writeReg+0x50>)
    30f6:	4b0b      	ldr	r3, [pc, #44]	; (3124 <writeReg+0x54>)
    30f8:	0018      	movs	r0, r3
    30fa:	4b0b      	ldr	r3, [pc, #44]	; (3128 <writeReg+0x58>)
    30fc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    30fe:	1dbb      	adds	r3, r7, #6
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	b299      	uxth	r1, r3
    3104:	4a06      	ldr	r2, [pc, #24]	; (3120 <writeReg+0x50>)
    3106:	4b07      	ldr	r3, [pc, #28]	; (3124 <writeReg+0x54>)
    3108:	0018      	movs	r0, r3
    310a:	4b07      	ldr	r3, [pc, #28]	; (3128 <writeReg+0x58>)
    310c:	4798      	blx	r3
  unselect();
    310e:	4b07      	ldr	r3, [pc, #28]	; (312c <writeReg+0x5c>)
    3110:	4798      	blx	r3
}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	46bd      	mov	sp, r7
    3116:	b002      	add	sp, #8
    3118:	bd80      	pop	{r7, pc}
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	00003131 	.word	0x00003131
    3120:	200000fe 	.word	0x200000fe
    3124:	200002dc 	.word	0x200002dc
    3128:	00001479 	.word	0x00001479
    312c:	00003155 	.word	0x00003155

00003130 <selectrf>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
    3130:	b580      	push	{r7, lr}
    3132:	af00      	add	r7, sp, #0

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    3134:	4904      	ldr	r1, [pc, #16]	; (3148 <selectrf+0x18>)
    3136:	4b05      	ldr	r3, [pc, #20]	; (314c <selectrf+0x1c>)
    3138:	2201      	movs	r2, #1
    313a:	0018      	movs	r0, r3
    313c:	4b04      	ldr	r3, [pc, #16]	; (3150 <selectrf+0x20>)
    313e:	4798      	blx	r3
}
    3140:	46c0      	nop			; (mov r8, r8)
    3142:	46bd      	mov	sp, r7
    3144:	bd80      	pop	{r7, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	200002ec 	.word	0x200002ec
    314c:	200002dc 	.word	0x200002dc
    3150:	000015b5 	.word	0x000015b5

00003154 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    3154:	b580      	push	{r7, lr}
    3156:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    3158:	4905      	ldr	r1, [pc, #20]	; (3170 <unselect+0x1c>)
    315a:	4b06      	ldr	r3, [pc, #24]	; (3174 <unselect+0x20>)
    315c:	2200      	movs	r2, #0
    315e:	0018      	movs	r0, r3
    3160:	4b05      	ldr	r3, [pc, #20]	; (3178 <unselect+0x24>)
    3162:	4798      	blx	r3
  maybeInterrupts();
    3164:	4b05      	ldr	r3, [pc, #20]	; (317c <unselect+0x28>)
    3166:	4798      	blx	r3
}
    3168:	46c0      	nop			; (mov r8, r8)
    316a:	46bd      	mov	sp, r7
    316c:	bd80      	pop	{r7, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	200002ec 	.word	0x200002ec
    3174:	200002dc 	.word	0x200002dc
    3178:	000015b5 	.word	0x000015b5
    317c:	000031c5 	.word	0x000031c5

00003180 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    3180:	b580      	push	{r7, lr}
    3182:	b082      	sub	sp, #8
    3184:	af00      	add	r7, sp, #0
    3186:	0002      	movs	r2, r0
    3188:	1dfb      	adds	r3, r7, #7
    318a:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    318c:	1dfb      	adds	r3, r7, #7
    318e:	781b      	ldrb	r3, [r3, #0]
    3190:	2b00      	cmp	r3, #0
    3192:	d001      	beq.n	3198 <setHighPowerRegs+0x18>
    3194:	235d      	movs	r3, #93	; 0x5d
    3196:	e000      	b.n	319a <setHighPowerRegs+0x1a>
    3198:	2355      	movs	r3, #85	; 0x55
    319a:	0019      	movs	r1, r3
    319c:	205a      	movs	r0, #90	; 0x5a
    319e:	4b08      	ldr	r3, [pc, #32]	; (31c0 <setHighPowerRegs+0x40>)
    31a0:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    31a2:	1dfb      	adds	r3, r7, #7
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	2b00      	cmp	r3, #0
    31a8:	d001      	beq.n	31ae <setHighPowerRegs+0x2e>
    31aa:	237c      	movs	r3, #124	; 0x7c
    31ac:	e000      	b.n	31b0 <setHighPowerRegs+0x30>
    31ae:	2370      	movs	r3, #112	; 0x70
    31b0:	0019      	movs	r1, r3
    31b2:	205c      	movs	r0, #92	; 0x5c
    31b4:	4b02      	ldr	r3, [pc, #8]	; (31c0 <setHighPowerRegs+0x40>)
    31b6:	4798      	blx	r3
}
    31b8:	46c0      	nop			; (mov r8, r8)
    31ba:	46bd      	mov	sp, r7
    31bc:	b002      	add	sp, #8
    31be:	bd80      	pop	{r7, pc}
    31c0:	000030d1 	.word	0x000030d1

000031c4 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    31c4:	b580      	push	{r7, lr}
    31c6:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  //if (!_inISR) 
	  //system_interrupt_enable_global(); //interrupts(); // CHANGE //
    31c8:	46c0      	nop			; (mov r8, r8)
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)

000031d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b084      	sub	sp, #16
    31d4:	af00      	add	r7, sp, #0
    31d6:	0002      	movs	r2, r0
    31d8:	1dfb      	adds	r3, r7, #7
    31da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    31dc:	230f      	movs	r3, #15
    31de:	18fb      	adds	r3, r7, r3
    31e0:	1dfa      	adds	r2, r7, #7
    31e2:	7812      	ldrb	r2, [r2, #0]
    31e4:	09d2      	lsrs	r2, r2, #7
    31e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    31e8:	230e      	movs	r3, #14
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	1dfa      	adds	r2, r7, #7
    31ee:	7812      	ldrb	r2, [r2, #0]
    31f0:	0952      	lsrs	r2, r2, #5
    31f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    31f4:	4b0d      	ldr	r3, [pc, #52]	; (322c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    31f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    31f8:	230f      	movs	r3, #15
    31fa:	18fb      	adds	r3, r7, r3
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	2b00      	cmp	r3, #0
    3200:	d10f      	bne.n	3222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3202:	230f      	movs	r3, #15
    3204:	18fb      	adds	r3, r7, r3
    3206:	781b      	ldrb	r3, [r3, #0]
    3208:	009b      	lsls	r3, r3, #2
    320a:	2210      	movs	r2, #16
    320c:	4694      	mov	ip, r2
    320e:	44bc      	add	ip, r7
    3210:	4463      	add	r3, ip
    3212:	3b08      	subs	r3, #8
    3214:	681a      	ldr	r2, [r3, #0]
    3216:	230e      	movs	r3, #14
    3218:	18fb      	adds	r3, r7, r3
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	01db      	lsls	r3, r3, #7
    321e:	18d3      	adds	r3, r2, r3
    3220:	e000      	b.n	3224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3222:	2300      	movs	r3, #0
	}
}
    3224:	0018      	movs	r0, r3
    3226:	46bd      	mov	sp, r7
    3228:	b004      	add	sp, #16
    322a:	bd80      	pop	{r7, pc}
    322c:	41004400 	.word	0x41004400

00003230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    3236:	0002      	movs	r2, r0
    3238:	1dfb      	adds	r3, r7, #7
    323a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    323c:	1dfb      	adds	r3, r7, #7
    323e:	781b      	ldrb	r3, [r3, #0]
    3240:	0018      	movs	r0, r3
    3242:	4b03      	ldr	r3, [pc, #12]	; (3250 <port_get_group_from_gpio_pin+0x20>)
    3244:	4798      	blx	r3
    3246:	0003      	movs	r3, r0
}
    3248:	0018      	movs	r0, r3
    324a:	46bd      	mov	sp, r7
    324c:	b002      	add	sp, #8
    324e:	bd80      	pop	{r7, pc}
    3250:	000031d1 	.word	0x000031d1

00003254 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3254:	b580      	push	{r7, lr}
    3256:	b084      	sub	sp, #16
    3258:	af00      	add	r7, sp, #0
    325a:	0002      	movs	r2, r0
    325c:	1dfb      	adds	r3, r7, #7
    325e:	701a      	strb	r2, [r3, #0]
    3260:	1dbb      	adds	r3, r7, #6
    3262:	1c0a      	adds	r2, r1, #0
    3264:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3266:	1dfb      	adds	r3, r7, #7
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	0018      	movs	r0, r3
    326c:	4b0d      	ldr	r3, [pc, #52]	; (32a4 <port_pin_set_output_level+0x50>)
    326e:	4798      	blx	r3
    3270:	0003      	movs	r3, r0
    3272:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3274:	1dfb      	adds	r3, r7, #7
    3276:	781b      	ldrb	r3, [r3, #0]
    3278:	221f      	movs	r2, #31
    327a:	4013      	ands	r3, r2
    327c:	2201      	movs	r2, #1
    327e:	409a      	lsls	r2, r3
    3280:	0013      	movs	r3, r2
    3282:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3284:	1dbb      	adds	r3, r7, #6
    3286:	781b      	ldrb	r3, [r3, #0]
    3288:	2b00      	cmp	r3, #0
    328a:	d003      	beq.n	3294 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    328c:	68fb      	ldr	r3, [r7, #12]
    328e:	68ba      	ldr	r2, [r7, #8]
    3290:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3292:	e002      	b.n	329a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3294:	68fb      	ldr	r3, [r7, #12]
    3296:	68ba      	ldr	r2, [r7, #8]
    3298:	615a      	str	r2, [r3, #20]
	}
}
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	46bd      	mov	sp, r7
    329e:	b004      	add	sp, #16
    32a0:	bd80      	pop	{r7, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	00003231 	.word	0x00003231

000032a8 <ui_init>:
	//LED_On(LED_0_PIN);
}


void ui_init(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
    32ac:	2101      	movs	r1, #1
    32ae:	2011      	movs	r0, #17
    32b0:	4b02      	ldr	r3, [pc, #8]	; (32bc <ui_init+0x14>)
    32b2:	4798      	blx	r3
	//configure_port_pins();
}
    32b4:	46c0      	nop			; (mov r8, r8)
    32b6:	46bd      	mov	sp, r7
    32b8:	bd80      	pop	{r7, pc}
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	00003255 	.word	0x00003255

000032c0 <ui_powerdown>:

void ui_powerdown(void)
{
    32c0:	b580      	push	{r7, lr}
    32c2:	af00      	add	r7, sp, #0
	//LED_Off(LED_0_PIN);
}
    32c4:	46c0      	nop			; (mov r8, r8)
    32c6:	46bd      	mov	sp, r7
    32c8:	bd80      	pop	{r7, pc}
    32ca:	46c0      	nop			; (mov r8, r8)

000032cc <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    32d0:	2100      	movs	r1, #0
    32d2:	200f      	movs	r0, #15
    32d4:	4b02      	ldr	r3, [pc, #8]	; (32e0 <ui_wakeup_enable+0x14>)
    32d6:	4798      	blx	r3
}
    32d8:	46c0      	nop			; (mov r8, r8)
    32da:	46bd      	mov	sp, r7
    32dc:	bd80      	pop	{r7, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	000047c1 	.word	0x000047c1

000032e4 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    32e8:	2100      	movs	r1, #0
    32ea:	200f      	movs	r0, #15
    32ec:	4b02      	ldr	r3, [pc, #8]	; (32f8 <ui_wakeup_disable+0x14>)
    32ee:	4798      	blx	r3
}
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	46bd      	mov	sp, r7
    32f4:	bd80      	pop	{r7, pc}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	00004809 	.word	0x00004809

000032fc <ui_wakeup>:

void ui_wakeup(void)
{
    32fc:	b580      	push	{r7, lr}
    32fe:	af00      	add	r7, sp, #0
	//LED_On(LED_0_PIN);
}
    3300:	46c0      	nop			; (mov r8, r8)
    3302:	46bd      	mov	sp, r7
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)

00003308 <ui_process>:

void ui_process(uint16_t framenumber)
{
    3308:	b5f0      	push	{r4, r5, r6, r7, lr}
    330a:	b087      	sub	sp, #28
    330c:	af04      	add	r7, sp, #16
    330e:	0002      	movs	r2, r0
    3310:	1dbb      	adds	r3, r7, #6
    3312:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	
	/* Scan process running each 5ms */
	cpt_sof++;
    3314:	4b16      	ldr	r3, [pc, #88]	; (3370 <ui_process+0x68>)
    3316:	781b      	ldrb	r3, [r3, #0]
    3318:	3301      	adds	r3, #1
    331a:	b2da      	uxtb	r2, r3
    331c:	4b14      	ldr	r3, [pc, #80]	; (3370 <ui_process+0x68>)
    331e:	701a      	strb	r2, [r3, #0]
	if (cpt_sof < 5) {
    3320:	4b13      	ldr	r3, [pc, #76]	; (3370 <ui_process+0x68>)
    3322:	781b      	ldrb	r3, [r3, #0]
    3324:	2b04      	cmp	r3, #4
    3326:	d91f      	bls.n	3368 <ui_process+0x60>
		return;
	}
	cpt_sof = 0;
    3328:	4b11      	ldr	r3, [pc, #68]	; (3370 <ui_process+0x68>)
    332a:	2200      	movs	r2, #0
    332c:	701a      	strb	r2, [r3, #0]

	//if (!calibration) // move mouse only if laser enabled and not calibrating
		mouse_move(x, y, scrollX, scrollY, left, middle, right);
    332e:	4b11      	ldr	r3, [pc, #68]	; (3374 <ui_process+0x6c>)
    3330:	2200      	movs	r2, #0
    3332:	5e9b      	ldrsh	r3, [r3, r2]
    3334:	b298      	uxth	r0, r3
    3336:	4b10      	ldr	r3, [pc, #64]	; (3378 <ui_process+0x70>)
    3338:	2200      	movs	r2, #0
    333a:	5e9b      	ldrsh	r3, [r3, r2]
    333c:	b29c      	uxth	r4, r3
    333e:	4b0f      	ldr	r3, [pc, #60]	; (337c <ui_process+0x74>)
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	b29d      	uxth	r5, r3
    3344:	4b0e      	ldr	r3, [pc, #56]	; (3380 <ui_process+0x78>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	b29e      	uxth	r6, r3
    334a:	4b0e      	ldr	r3, [pc, #56]	; (3384 <ui_process+0x7c>)
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	4a0e      	ldr	r2, [pc, #56]	; (3388 <ui_process+0x80>)
    3350:	7812      	ldrb	r2, [r2, #0]
    3352:	490e      	ldr	r1, [pc, #56]	; (338c <ui_process+0x84>)
    3354:	7809      	ldrb	r1, [r1, #0]
    3356:	9102      	str	r1, [sp, #8]
    3358:	9201      	str	r2, [sp, #4]
    335a:	9300      	str	r3, [sp, #0]
    335c:	0033      	movs	r3, r6
    335e:	002a      	movs	r2, r5
    3360:	0021      	movs	r1, r4
    3362:	4c0b      	ldr	r4, [pc, #44]	; (3390 <ui_process+0x88>)
    3364:	47a0      	blx	r4
    3366:	e000      	b.n	336a <ui_process+0x62>
	static uint8_t cpt_sof = 0;
	
	/* Scan process running each 5ms */
	cpt_sof++;
	if (cpt_sof < 5) {
		return;
    3368:	46c0      	nop			; (mov r8, r8)
	}
	cpt_sof = 0;

	//if (!calibration) // move mouse only if laser enabled and not calibrating
		mouse_move(x, y, scrollX, scrollY, left, middle, right);
}
    336a:	46bd      	mov	sp, r7
    336c:	b003      	add	sp, #12
    336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3370:	20000100 	.word	0x20000100
    3374:	200001e2 	.word	0x200001e2
    3378:	200001e4 	.word	0x200001e4
    337c:	200001f8 	.word	0x200001f8
    3380:	200001fc 	.word	0x200001fc
    3384:	20000230 	.word	0x20000230
    3388:	20000231 	.word	0x20000231
    338c:	20000232 	.word	0x20000232
    3390:	000034b5 	.word	0x000034b5

00003394 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    339a:	f3ef 8310 	mrs	r3, PRIMASK
    339e:	603b      	str	r3, [r7, #0]
  return(result);
    33a0:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    33a2:	425a      	negs	r2, r3
    33a4:	4153      	adcs	r3, r2
    33a6:	b2db      	uxtb	r3, r3
    33a8:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    33aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    33ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    33b0:	4b03      	ldr	r3, [pc, #12]	; (33c0 <cpu_irq_save+0x2c>)
    33b2:	2200      	movs	r2, #0
    33b4:	701a      	strb	r2, [r3, #0]
	return flags;
    33b6:	687b      	ldr	r3, [r7, #4]
}
    33b8:	0018      	movs	r0, r3
    33ba:	46bd      	mov	sp, r7
    33bc:	b002      	add	sp, #8
    33be:	bd80      	pop	{r7, pc}
    33c0:	200000d8 	.word	0x200000d8

000033c4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
	return (flags);
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	1e5a      	subs	r2, r3, #1
    33d0:	4193      	sbcs	r3, r2
    33d2:	b2db      	uxtb	r3, r3
}
    33d4:	0018      	movs	r0, r3
    33d6:	46bd      	mov	sp, r7
    33d8:	b002      	add	sp, #8
    33da:	bd80      	pop	{r7, pc}

000033dc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    33dc:	b580      	push	{r7, lr}
    33de:	b082      	sub	sp, #8
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    33e4:	687b      	ldr	r3, [r7, #4]
    33e6:	0018      	movs	r0, r3
    33e8:	4b06      	ldr	r3, [pc, #24]	; (3404 <cpu_irq_restore+0x28>)
    33ea:	4798      	blx	r3
    33ec:	1e03      	subs	r3, r0, #0
    33ee:	d005      	beq.n	33fc <cpu_irq_restore+0x20>
		cpu_irq_enable();
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <cpu_irq_restore+0x2c>)
    33f2:	2201      	movs	r2, #1
    33f4:	701a      	strb	r2, [r3, #0]
    33f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    33fa:	b662      	cpsie	i
}
    33fc:	46c0      	nop			; (mov r8, r8)
    33fe:	46bd      	mov	sp, r7
    3400:	b002      	add	sp, #8
    3402:	bd80      	pop	{r7, pc}
    3404:	000033c5 	.word	0x000033c5
    3408:	200000d8 	.word	0x200000d8

0000340c <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    340c:	b580      	push	{r7, lr}
    340e:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    3410:	4b0b      	ldr	r3, [pc, #44]	; (3440 <udi_hid_mouse_enable+0x34>)
    3412:	2200      	movs	r2, #0
    3414:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    3416:	4b0b      	ldr	r3, [pc, #44]	; (3444 <udi_hid_mouse_enable+0x38>)
    3418:	2200      	movs	r2, #0
    341a:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    341c:	4b0a      	ldr	r3, [pc, #40]	; (3448 <udi_hid_mouse_enable+0x3c>)
    341e:	2200      	movs	r2, #0
    3420:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    3422:	4b0a      	ldr	r3, [pc, #40]	; (344c <udi_hid_mouse_enable+0x40>)
    3424:	2207      	movs	r2, #7
    3426:	2100      	movs	r1, #0
    3428:	0018      	movs	r0, r3
    342a:	4b09      	ldr	r3, [pc, #36]	; (3450 <udi_hid_mouse_enable+0x44>)
    342c:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    342e:	4b09      	ldr	r3, [pc, #36]	; (3454 <udi_hid_mouse_enable+0x48>)
    3430:	2200      	movs	r2, #0
    3432:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    3434:	4b08      	ldr	r3, [pc, #32]	; (3458 <udi_hid_mouse_enable+0x4c>)
    3436:	4798      	blx	r3
    3438:	0003      	movs	r3, r0
}
    343a:	0018      	movs	r0, r3
    343c:	46bd      	mov	sp, r7
    343e:	bd80      	pop	{r7, pc}
    3440:	20000104 	.word	0x20000104
    3444:	20000108 	.word	0x20000108
    3448:	20000113 	.word	0x20000113
    344c:	2000010c 	.word	0x2000010c
    3450:	00009dbf 	.word	0x00009dbf
    3454:	20000109 	.word	0x20000109
    3458:	000099b1 	.word	0x000099b1

0000345c <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    345c:	b580      	push	{r7, lr}
    345e:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <udi_hid_mouse_disable+0x10>)
    3462:	4798      	blx	r3
}
    3464:	46c0      	nop			; (mov r8, r8)
    3466:	46bd      	mov	sp, r7
    3468:	bd80      	pop	{r7, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	000099c9 	.word	0x000099c9

00003470 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    3470:	b5b0      	push	{r4, r5, r7, lr}
    3472:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    3474:	4b04      	ldr	r3, [pc, #16]	; (3488 <udi_hid_mouse_setup+0x18>)
    3476:	4a05      	ldr	r2, [pc, #20]	; (348c <udi_hid_mouse_setup+0x1c>)
    3478:	4905      	ldr	r1, [pc, #20]	; (3490 <udi_hid_mouse_setup+0x20>)
    347a:	4806      	ldr	r0, [pc, #24]	; (3494 <udi_hid_mouse_setup+0x24>)
    347c:	4c06      	ldr	r4, [pc, #24]	; (3498 <udi_hid_mouse_setup+0x28>)
    347e:	47a0      	blx	r4
    3480:	0003      	movs	r3, r0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    3482:	0018      	movs	r0, r3
    3484:	46bd      	mov	sp, r7
    3486:	bdb0      	pop	{r4, r5, r7, pc}
    3488:	000034a9 	.word	0x000034a9
    348c:	20000014 	.word	0x20000014
    3490:	20000108 	.word	0x20000108
    3494:	20000104 	.word	0x20000104
    3498:	00003695 	.word	0x00003695

0000349c <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    349c:	b580      	push	{r7, lr}
    349e:	af00      	add	r7, sp, #0
	return 0;
    34a0:	2300      	movs	r3, #0
}
    34a2:	0018      	movs	r0, r3
    34a4:	46bd      	mov	sp, r7
    34a6:	bd80      	pop	{r7, pc}

000034a8 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    34a8:	b580      	push	{r7, lr}
    34aa:	af00      	add	r7, sp, #0
	return false;
    34ac:	2300      	movs	r3, #0
}
    34ae:	0018      	movs	r0, r3
    34b0:	46bd      	mov	sp, r7
    34b2:	bd80      	pop	{r7, pc}

000034b4 <mouse_move>:
	cpu_irq_restore(flags);
	return true;
}

bool mouse_move(uint16_t x, uint16_t y, uint16_t scrollX, uint16_t scrollY, bool left, bool middle, bool right)
{
    34b4:	b5b0      	push	{r4, r5, r7, lr}
    34b6:	b084      	sub	sp, #16
    34b8:	af00      	add	r7, sp, #0
    34ba:	0005      	movs	r5, r0
    34bc:	000c      	movs	r4, r1
    34be:	0010      	movs	r0, r2
    34c0:	0019      	movs	r1, r3
    34c2:	1dbb      	adds	r3, r7, #6
    34c4:	1c2a      	adds	r2, r5, #0
    34c6:	801a      	strh	r2, [r3, #0]
    34c8:	1d3b      	adds	r3, r7, #4
    34ca:	1c22      	adds	r2, r4, #0
    34cc:	801a      	strh	r2, [r3, #0]
    34ce:	1cbb      	adds	r3, r7, #2
    34d0:	1c02      	adds	r2, r0, #0
    34d2:	801a      	strh	r2, [r3, #0]
    34d4:	003b      	movs	r3, r7
    34d6:	1c0a      	adds	r2, r1, #0
    34d8:	801a      	strh	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    34da:	4b3c      	ldr	r3, [pc, #240]	; (35cc <mouse_move+0x118>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	60fb      	str	r3, [r7, #12]

	udi_hid_mouse_report[1] = x & 0x00FF;
    34e2:	1dbb      	adds	r3, r7, #6
    34e4:	881b      	ldrh	r3, [r3, #0]
    34e6:	b2da      	uxtb	r2, r3
    34e8:	4b39      	ldr	r3, [pc, #228]	; (35d0 <mouse_move+0x11c>)
    34ea:	705a      	strb	r2, [r3, #1]
	udi_hid_mouse_report[2] = (x & 0x7F00) >> 8;
    34ec:	1dbb      	adds	r3, r7, #6
    34ee:	881b      	ldrh	r3, [r3, #0]
    34f0:	121b      	asrs	r3, r3, #8
    34f2:	b2db      	uxtb	r3, r3
    34f4:	227f      	movs	r2, #127	; 0x7f
    34f6:	4013      	ands	r3, r2
    34f8:	b2da      	uxtb	r2, r3
    34fa:	4b35      	ldr	r3, [pc, #212]	; (35d0 <mouse_move+0x11c>)
    34fc:	709a      	strb	r2, [r3, #2]
	udi_hid_mouse_report[3] = y & 0x00FF;
    34fe:	1d3b      	adds	r3, r7, #4
    3500:	881b      	ldrh	r3, [r3, #0]
    3502:	b2da      	uxtb	r2, r3
    3504:	4b32      	ldr	r3, [pc, #200]	; (35d0 <mouse_move+0x11c>)
    3506:	70da      	strb	r2, [r3, #3]
	udi_hid_mouse_report[4] = (y & 0x7F00) >> 8;
    3508:	1d3b      	adds	r3, r7, #4
    350a:	881b      	ldrh	r3, [r3, #0]
    350c:	121b      	asrs	r3, r3, #8
    350e:	b2db      	uxtb	r3, r3
    3510:	227f      	movs	r2, #127	; 0x7f
    3512:	4013      	ands	r3, r2
    3514:	b2da      	uxtb	r2, r3
    3516:	4b2e      	ldr	r3, [pc, #184]	; (35d0 <mouse_move+0x11c>)
    3518:	711a      	strb	r2, [r3, #4]
	udi_hid_mouse_report[5] = scrollX & 0x00FF;
    351a:	1cbb      	adds	r3, r7, #2
    351c:	881b      	ldrh	r3, [r3, #0]
    351e:	b2da      	uxtb	r2, r3
    3520:	4b2b      	ldr	r3, [pc, #172]	; (35d0 <mouse_move+0x11c>)
    3522:	715a      	strb	r2, [r3, #5]
	udi_hid_mouse_report[6] = (scrollX & 0x7F00) >> 8;
    3524:	1cbb      	adds	r3, r7, #2
    3526:	881b      	ldrh	r3, [r3, #0]
    3528:	121b      	asrs	r3, r3, #8
    352a:	b2db      	uxtb	r3, r3
    352c:	227f      	movs	r2, #127	; 0x7f
    352e:	4013      	ands	r3, r2
    3530:	b2da      	uxtb	r2, r3
    3532:	4b27      	ldr	r3, [pc, #156]	; (35d0 <mouse_move+0x11c>)
    3534:	719a      	strb	r2, [r3, #6]

	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == left)
    3536:	2320      	movs	r3, #32
    3538:	18fb      	adds	r3, r7, r3
    353a:	781b      	ldrb	r3, [r3, #0]
    353c:	2b00      	cmp	r3, #0
    353e:	d007      	beq.n	3550 <mouse_move+0x9c>
	udi_hid_mouse_report[0] |= 0x01;
    3540:	4b23      	ldr	r3, [pc, #140]	; (35d0 <mouse_move+0x11c>)
    3542:	781b      	ldrb	r3, [r3, #0]
    3544:	2201      	movs	r2, #1
    3546:	4313      	orrs	r3, r2
    3548:	b2da      	uxtb	r2, r3
    354a:	4b21      	ldr	r3, [pc, #132]	; (35d0 <mouse_move+0x11c>)
    354c:	701a      	strb	r2, [r3, #0]
    354e:	e006      	b.n	355e <mouse_move+0xaa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x01;
    3550:	4b1f      	ldr	r3, [pc, #124]	; (35d0 <mouse_move+0x11c>)
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	2201      	movs	r2, #1
    3556:	4393      	bics	r3, r2
    3558:	b2da      	uxtb	r2, r3
    355a:	4b1d      	ldr	r3, [pc, #116]	; (35d0 <mouse_move+0x11c>)
    355c:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == right)
    355e:	2328      	movs	r3, #40	; 0x28
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b00      	cmp	r3, #0
    3566:	d007      	beq.n	3578 <mouse_move+0xc4>
	udi_hid_mouse_report[0] |= 0x02;
    3568:	4b19      	ldr	r3, [pc, #100]	; (35d0 <mouse_move+0x11c>)
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	2202      	movs	r2, #2
    356e:	4313      	orrs	r3, r2
    3570:	b2da      	uxtb	r2, r3
    3572:	4b17      	ldr	r3, [pc, #92]	; (35d0 <mouse_move+0x11c>)
    3574:	701a      	strb	r2, [r3, #0]
    3576:	e006      	b.n	3586 <mouse_move+0xd2>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x02;
    3578:	4b15      	ldr	r3, [pc, #84]	; (35d0 <mouse_move+0x11c>)
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2202      	movs	r2, #2
    357e:	4393      	bics	r3, r2
    3580:	b2da      	uxtb	r2, r3
    3582:	4b13      	ldr	r3, [pc, #76]	; (35d0 <mouse_move+0x11c>)
    3584:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == middle)
    3586:	2324      	movs	r3, #36	; 0x24
    3588:	18fb      	adds	r3, r7, r3
    358a:	781b      	ldrb	r3, [r3, #0]
    358c:	2b00      	cmp	r3, #0
    358e:	d007      	beq.n	35a0 <mouse_move+0xec>
	udi_hid_mouse_report[0] |= 0x04;
    3590:	4b0f      	ldr	r3, [pc, #60]	; (35d0 <mouse_move+0x11c>)
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2204      	movs	r2, #4
    3596:	4313      	orrs	r3, r2
    3598:	b2da      	uxtb	r2, r3
    359a:	4b0d      	ldr	r3, [pc, #52]	; (35d0 <mouse_move+0x11c>)
    359c:	701a      	strb	r2, [r3, #0]
    359e:	e006      	b.n	35ae <mouse_move+0xfa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x04;
    35a0:	4b0b      	ldr	r3, [pc, #44]	; (35d0 <mouse_move+0x11c>)
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	2204      	movs	r2, #4
    35a6:	4393      	bics	r3, r2
    35a8:	b2da      	uxtb	r2, r3
    35aa:	4b09      	ldr	r3, [pc, #36]	; (35d0 <mouse_move+0x11c>)
    35ac:	701a      	strb	r2, [r3, #0]

	// Valid and send report

	udi_hid_mouse_b_report_valid = true;
    35ae:	4b09      	ldr	r3, [pc, #36]	; (35d4 <mouse_move+0x120>)
    35b0:	2201      	movs	r2, #1
    35b2:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_send_report();
    35b4:	4b08      	ldr	r3, [pc, #32]	; (35d8 <mouse_move+0x124>)
    35b6:	4798      	blx	r3

	cpu_irq_restore(flags);
    35b8:	68fb      	ldr	r3, [r7, #12]
    35ba:	0018      	movs	r0, r3
    35bc:	4b07      	ldr	r3, [pc, #28]	; (35dc <mouse_move+0x128>)
    35be:	4798      	blx	r3
	return true;
    35c0:	2301      	movs	r3, #1
}
    35c2:	0018      	movs	r0, r3
    35c4:	46bd      	mov	sp, r7
    35c6:	b004      	add	sp, #16
    35c8:	bdb0      	pop	{r4, r5, r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	00003395 	.word	0x00003395
    35d0:	2000010c 	.word	0x2000010c
    35d4:	20000109 	.word	0x20000109
    35d8:	000035e1 	.word	0x000035e1
    35dc:	000033dd 	.word	0x000033dd

000035e0 <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 10, false);
}


static bool udi_hid_mouse_send_report(void)
{
    35e0:	b590      	push	{r4, r7, lr}
    35e2:	b083      	sub	sp, #12
    35e4:	af02      	add	r7, sp, #8
	if (udi_hid_mouse_report_trans_ongoing)
    35e6:	4b14      	ldr	r3, [pc, #80]	; (3638 <udi_hid_mouse_send_report+0x58>)
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d001      	beq.n	35f2 <udi_hid_mouse_send_report+0x12>
		return false;	// Transfer on going then send this one after transfer complete
    35ee:	2300      	movs	r3, #0
    35f0:	e01e      	b.n	3630 <udi_hid_mouse_send_report+0x50>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
    35f2:	4b12      	ldr	r3, [pc, #72]	; (363c <udi_hid_mouse_send_report+0x5c>)
    35f4:	4a12      	ldr	r2, [pc, #72]	; (3640 <udi_hid_mouse_send_report+0x60>)
    35f6:	6811      	ldr	r1, [r2, #0]
    35f8:	6019      	str	r1, [r3, #0]
    35fa:	8891      	ldrh	r1, [r2, #4]
    35fc:	8099      	strh	r1, [r3, #4]
    35fe:	7992      	ldrb	r2, [r2, #6]
    3600:	719a      	strb	r2, [r3, #6]
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
    3602:	4b10      	ldr	r3, [pc, #64]	; (3644 <udi_hid_mouse_send_report+0x64>)
    3604:	2203      	movs	r2, #3
    3606:	2100      	movs	r1, #0
    3608:	0018      	movs	r0, r3
    360a:	4b0f      	ldr	r3, [pc, #60]	; (3648 <udi_hid_mouse_send_report+0x68>)
    360c:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    360e:	4b0f      	ldr	r3, [pc, #60]	; (364c <udi_hid_mouse_send_report+0x6c>)
    3610:	2200      	movs	r2, #0
    3612:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
    3614:	4a09      	ldr	r2, [pc, #36]	; (363c <udi_hid_mouse_send_report+0x5c>)
    3616:	4b0e      	ldr	r3, [pc, #56]	; (3650 <udi_hid_mouse_send_report+0x70>)
    3618:	9300      	str	r3, [sp, #0]
    361a:	2307      	movs	r3, #7
    361c:	2100      	movs	r1, #0
    361e:	2081      	movs	r0, #129	; 0x81
    3620:	4c0c      	ldr	r4, [pc, #48]	; (3654 <udi_hid_mouse_send_report+0x74>)
    3622:	47a0      	blx	r4
    3624:	0003      	movs	r3, r0
    3626:	001a      	movs	r2, r3
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
    3628:	4b03      	ldr	r3, [pc, #12]	; (3638 <udi_hid_mouse_send_report+0x58>)
    362a:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
    362c:	4b02      	ldr	r3, [pc, #8]	; (3638 <udi_hid_mouse_send_report+0x58>)
    362e:	781b      	ldrb	r3, [r3, #0]
}
    3630:	0018      	movs	r0, r3
    3632:	46bd      	mov	sp, r7
    3634:	b001      	add	sp, #4
    3636:	bd90      	pop	{r4, r7, pc}
    3638:	20000113 	.word	0x20000113
    363c:	20000114 	.word	0x20000114
    3640:	2000010c 	.word	0x2000010c
    3644:	2000010d 	.word	0x2000010d
    3648:	00009dbf 	.word	0x00009dbf
    364c:	20000109 	.word	0x20000109
    3650:	00003659 	.word	0x00003659
    3654:	00006645 	.word	0x00006645

00003658 <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
    3658:	b580      	push	{r7, lr}
    365a:	b082      	sub	sp, #8
    365c:	af00      	add	r7, sp, #0
    365e:	6039      	str	r1, [r7, #0]
    3660:	0011      	movs	r1, r2
    3662:	1dfb      	adds	r3, r7, #7
    3664:	1c02      	adds	r2, r0, #0
    3666:	701a      	strb	r2, [r3, #0]
    3668:	1dbb      	adds	r3, r7, #6
    366a:	1c0a      	adds	r2, r1, #0
    366c:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
    366e:	4b06      	ldr	r3, [pc, #24]	; (3688 <udi_hid_mouse_report_sent+0x30>)
    3670:	2200      	movs	r2, #0
    3672:	701a      	strb	r2, [r3, #0]
	if (udi_hid_mouse_b_report_valid) {
    3674:	4b05      	ldr	r3, [pc, #20]	; (368c <udi_hid_mouse_report_sent+0x34>)
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	2b00      	cmp	r3, #0
    367a:	d001      	beq.n	3680 <udi_hid_mouse_report_sent+0x28>
		// Send new valid report
		udi_hid_mouse_send_report();
    367c:	4b04      	ldr	r3, [pc, #16]	; (3690 <udi_hid_mouse_report_sent+0x38>)
    367e:	4798      	blx	r3
	}
}
    3680:	46c0      	nop			; (mov r8, r8)
    3682:	46bd      	mov	sp, r7
    3684:	b002      	add	sp, #8
    3686:	bd80      	pop	{r7, pc}
    3688:	20000113 	.word	0x20000113
    368c:	20000109 	.word	0x20000109
    3690:	000035e1 	.word	0x000035e1

00003694 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    3694:	b580      	push	{r7, lr}
    3696:	b084      	sub	sp, #16
    3698:	af00      	add	r7, sp, #0
    369a:	60f8      	str	r0, [r7, #12]
    369c:	60b9      	str	r1, [r7, #8]
    369e:	607a      	str	r2, [r7, #4]
    36a0:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    36a2:	4b35      	ldr	r3, [pc, #212]	; (3778 <udi_hid_setup+0xe4>)
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	b25b      	sxtb	r3, r3
    36a8:	2b00      	cmp	r3, #0
    36aa:	da32      	bge.n	3712 <udi_hid_setup+0x7e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    36ac:	4b32      	ldr	r3, [pc, #200]	; (3778 <udi_hid_setup+0xe4>)
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	001a      	movs	r2, r3
    36b2:	2360      	movs	r3, #96	; 0x60
    36b4:	4013      	ands	r3, r2
    36b6:	d109      	bne.n	36cc <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    36b8:	4b2f      	ldr	r3, [pc, #188]	; (3778 <udi_hid_setup+0xe4>)
    36ba:	785b      	ldrb	r3, [r3, #1]
    36bc:	2b06      	cmp	r3, #6
    36be:	d105      	bne.n	36cc <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	0018      	movs	r0, r3
    36c4:	4b2d      	ldr	r3, [pc, #180]	; (377c <udi_hid_setup+0xe8>)
    36c6:	4798      	blx	r3
    36c8:	0003      	movs	r3, r0
    36ca:	e051      	b.n	3770 <udi_hid_setup+0xdc>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    36cc:	4b2a      	ldr	r3, [pc, #168]	; (3778 <udi_hid_setup+0xe4>)
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	001a      	movs	r2, r3
    36d2:	2360      	movs	r3, #96	; 0x60
    36d4:	4013      	ands	r3, r2
    36d6:	2b20      	cmp	r3, #32
    36d8:	d11b      	bne.n	3712 <udi_hid_setup+0x7e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    36da:	4b27      	ldr	r3, [pc, #156]	; (3778 <udi_hid_setup+0xe4>)
    36dc:	785b      	ldrb	r3, [r3, #1]
    36de:	2b02      	cmp	r3, #2
    36e0:	d007      	beq.n	36f2 <udi_hid_setup+0x5e>
    36e2:	2b03      	cmp	r3, #3
    36e4:	d00d      	beq.n	3702 <udi_hid_setup+0x6e>
    36e6:	2b01      	cmp	r3, #1
    36e8:	d113      	bne.n	3712 <udi_hid_setup+0x7e>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    36ea:	683b      	ldr	r3, [r7, #0]
    36ec:	4798      	blx	r3
    36ee:	0003      	movs	r3, r0
    36f0:	e03e      	b.n	3770 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    36f2:	4b21      	ldr	r3, [pc, #132]	; (3778 <udi_hid_setup+0xe4>)
    36f4:	68fa      	ldr	r2, [r7, #12]
    36f6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    36f8:	4b1f      	ldr	r3, [pc, #124]	; (3778 <udi_hid_setup+0xe4>)
    36fa:	2201      	movs	r2, #1
    36fc:	819a      	strh	r2, [r3, #12]
				return true;
    36fe:	2301      	movs	r3, #1
    3700:	e036      	b.n	3770 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    3702:	4b1d      	ldr	r3, [pc, #116]	; (3778 <udi_hid_setup+0xe4>)
    3704:	68ba      	ldr	r2, [r7, #8]
    3706:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    3708:	4b1b      	ldr	r3, [pc, #108]	; (3778 <udi_hid_setup+0xe4>)
    370a:	2201      	movs	r2, #1
    370c:	819a      	strh	r2, [r3, #12]
				return true;
    370e:	2301      	movs	r3, #1
    3710:	e02e      	b.n	3770 <udi_hid_setup+0xdc>
			}
		}
	}
	if (Udd_setup_is_out()) {
    3712:	4b19      	ldr	r3, [pc, #100]	; (3778 <udi_hid_setup+0xe4>)
    3714:	781b      	ldrb	r3, [r3, #0]
    3716:	b25b      	sxtb	r3, r3
    3718:	2b00      	cmp	r3, #0
    371a:	db28      	blt.n	376e <udi_hid_setup+0xda>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    371c:	4b16      	ldr	r3, [pc, #88]	; (3778 <udi_hid_setup+0xe4>)
    371e:	781b      	ldrb	r3, [r3, #0]
    3720:	001a      	movs	r2, r3
    3722:	2360      	movs	r3, #96	; 0x60
    3724:	4013      	ands	r3, r2
    3726:	2b20      	cmp	r3, #32
    3728:	d121      	bne.n	376e <udi_hid_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    372a:	4b13      	ldr	r3, [pc, #76]	; (3778 <udi_hid_setup+0xe4>)
    372c:	785b      	ldrb	r3, [r3, #1]
    372e:	2b0a      	cmp	r3, #10
    3730:	d007      	beq.n	3742 <udi_hid_setup+0xae>
    3732:	2b0b      	cmp	r3, #11
    3734:	d00e      	beq.n	3754 <udi_hid_setup+0xc0>
    3736:	2b09      	cmp	r3, #9
    3738:	d119      	bne.n	376e <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    373a:	683b      	ldr	r3, [r7, #0]
    373c:	4798      	blx	r3
    373e:	0003      	movs	r3, r0
    3740:	e016      	b.n	3770 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    3742:	4b0d      	ldr	r3, [pc, #52]	; (3778 <udi_hid_setup+0xe4>)
    3744:	885b      	ldrh	r3, [r3, #2]
    3746:	0a1b      	lsrs	r3, r3, #8
    3748:	b29b      	uxth	r3, r3
    374a:	b2da      	uxtb	r2, r3
    374c:	68fb      	ldr	r3, [r7, #12]
    374e:	701a      	strb	r2, [r3, #0]
				return true;
    3750:	2301      	movs	r3, #1
    3752:	e00d      	b.n	3770 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    3754:	4b08      	ldr	r3, [pc, #32]	; (3778 <udi_hid_setup+0xe4>)
    3756:	88db      	ldrh	r3, [r3, #6]
    3758:	2b00      	cmp	r3, #0
    375a:	d001      	beq.n	3760 <udi_hid_setup+0xcc>
					return false;
    375c:	2300      	movs	r3, #0
    375e:	e007      	b.n	3770 <udi_hid_setup+0xdc>
				*protocol = udd_g_ctrlreq.req.wValue;
    3760:	4b05      	ldr	r3, [pc, #20]	; (3778 <udi_hid_setup+0xe4>)
    3762:	885b      	ldrh	r3, [r3, #2]
    3764:	b2da      	uxtb	r2, r3
    3766:	68bb      	ldr	r3, [r7, #8]
    3768:	701a      	strb	r2, [r3, #0]
				return true;
    376a:	2301      	movs	r3, #1
    376c:	e000      	b.n	3770 <udi_hid_setup+0xdc>
			}
		}
	}
	return false;	// Request not supported
    376e:	2300      	movs	r3, #0
}
    3770:	0018      	movs	r0, r3
    3772:	46bd      	mov	sp, r7
    3774:	b004      	add	sp, #16
    3776:	bd80      	pop	{r7, pc}
    3778:	200004e0 	.word	0x200004e0
    377c:	00003781 	.word	0x00003781

00003780 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    3780:	b580      	push	{r7, lr}
    3782:	b084      	sub	sp, #16
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    3788:	4b25      	ldr	r3, [pc, #148]	; (3820 <udi_hid_reqstdifaceget_descriptor+0xa0>)
    378a:	4798      	blx	r3
    378c:	0003      	movs	r3, r0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    378e:	3309      	adds	r3, #9
    3790:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    3792:	68fb      	ldr	r3, [r7, #12]
    3794:	785b      	ldrb	r3, [r3, #1]
    3796:	2b21      	cmp	r3, #33	; 0x21
    3798:	d001      	beq.n	379e <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    379a:	2300      	movs	r3, #0
    379c:	e03b      	b.n	3816 <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    379e:	4b21      	ldr	r3, [pc, #132]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37a0:	885b      	ldrh	r3, [r3, #2]
    37a2:	0a1b      	lsrs	r3, r3, #8
    37a4:	b29b      	uxth	r3, r3
    37a6:	b2db      	uxtb	r3, r3
    37a8:	2b21      	cmp	r3, #33	; 0x21
    37aa:	d113      	bne.n	37d4 <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    37ac:	4b1d      	ldr	r3, [pc, #116]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37ae:	68fa      	ldr	r2, [r7, #12]
    37b0:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    37b2:	68fb      	ldr	r3, [r7, #12]
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	b29a      	uxth	r2, r3
    37b8:	4b1a      	ldr	r3, [pc, #104]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37ba:	88db      	ldrh	r3, [r3, #6]
    37bc:	1c18      	adds	r0, r3, #0
    37be:	1c11      	adds	r1, r2, #0
    37c0:	b28a      	uxth	r2, r1
    37c2:	b283      	uxth	r3, r0
    37c4:	429a      	cmp	r2, r3
    37c6:	d900      	bls.n	37ca <udi_hid_reqstdifaceget_descriptor+0x4a>
    37c8:	1c01      	adds	r1, r0, #0
    37ca:	b28a      	uxth	r2, r1
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    37cc:	4b15      	ldr	r3, [pc, #84]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37ce:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    37d0:	2301      	movs	r3, #1
    37d2:	e020      	b.n	3816 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    37d8:	4b12      	ldr	r3, [pc, #72]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37da:	885b      	ldrh	r3, [r3, #2]
    37dc:	0a1b      	lsrs	r3, r3, #8
    37de:	b29b      	uxth	r3, r3
    37e0:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    37e2:	429a      	cmp	r2, r3
    37e4:	d116      	bne.n	3814 <udi_hid_reqstdifaceget_descriptor+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    37e6:	4b0f      	ldr	r3, [pc, #60]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37e8:	687a      	ldr	r2, [r7, #4]
    37ea:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    37ec:	68fb      	ldr	r3, [r7, #12]
    37ee:	79da      	ldrb	r2, [r3, #7]
    37f0:	7a1b      	ldrb	r3, [r3, #8]
    37f2:	021b      	lsls	r3, r3, #8
    37f4:	4313      	orrs	r3, r2
    37f6:	b29a      	uxth	r2, r3
    37f8:	4b0a      	ldr	r3, [pc, #40]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    37fa:	88db      	ldrh	r3, [r3, #6]
    37fc:	1c18      	adds	r0, r3, #0
    37fe:	1c11      	adds	r1, r2, #0
    3800:	b28a      	uxth	r2, r1
    3802:	b283      	uxth	r3, r0
    3804:	429a      	cmp	r2, r3
    3806:	d900      	bls.n	380a <udi_hid_reqstdifaceget_descriptor+0x8a>
    3808:	1c01      	adds	r1, r0, #0
    380a:	b28a      	uxth	r2, r1
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    380c:	4b05      	ldr	r3, [pc, #20]	; (3824 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    380e:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    3810:	2301      	movs	r3, #1
    3812:	e000      	b.n	3816 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
    3814:	2300      	movs	r3, #0
}
    3816:	0018      	movs	r0, r3
    3818:	46bd      	mov	sp, r7
    381a:	b004      	add	sp, #16
    381c:	bd80      	pop	{r7, pc}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	00003829 	.word	0x00003829
    3824:	200004e0 	.word	0x200004e0

00003828 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    3828:	b580      	push	{r7, lr}
    382a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    382c:	4b02      	ldr	r3, [pc, #8]	; (3838 <udc_get_interface_desc+0x10>)
    382e:	681b      	ldr	r3, [r3, #0]
}
    3830:	0018      	movs	r0, r3
    3832:	46bd      	mov	sp, r7
    3834:	bd80      	pop	{r7, pc}
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	2000012c 	.word	0x2000012c

0000383c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    383c:	b580      	push	{r7, lr}
    383e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3840:	4b07      	ldr	r3, [pc, #28]	; (3860 <udc_get_eof_conf+0x24>)
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3846:	4b06      	ldr	r3, [pc, #24]	; (3860 <udc_get_eof_conf+0x24>)
    3848:	681b      	ldr	r3, [r3, #0]
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	7899      	ldrb	r1, [r3, #2]
    384e:	78db      	ldrb	r3, [r3, #3]
    3850:	021b      	lsls	r3, r3, #8
    3852:	430b      	orrs	r3, r1
    3854:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3856:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    3858:	0018      	movs	r0, r3
    385a:	46bd      	mov	sp, r7
    385c:	bd80      	pop	{r7, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	20000128 	.word	0x20000128

00003864 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3864:	b580      	push	{r7, lr}
    3866:	b084      	sub	sp, #16
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	000a      	movs	r2, r1
    386e:	1cfb      	adds	r3, r7, #3
    3870:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3872:	4b14      	ldr	r3, [pc, #80]	; (38c4 <udc_next_desc_in_iface+0x60>)
    3874:	4798      	blx	r3
    3876:	0003      	movs	r3, r0
    3878:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    387e:	001a      	movs	r2, r3
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	189b      	adds	r3, r3, r2
    3884:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3886:	e011      	b.n	38ac <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	785b      	ldrb	r3, [r3, #1]
    388c:	2b04      	cmp	r3, #4
    388e:	d012      	beq.n	38b6 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	785b      	ldrb	r3, [r3, #1]
    3894:	1cfa      	adds	r2, r7, #3
    3896:	7812      	ldrb	r2, [r2, #0]
    3898:	429a      	cmp	r2, r3
    389a:	d101      	bne.n	38a0 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	e00c      	b.n	38ba <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    38a4:	001a      	movs	r2, r3
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	189b      	adds	r3, r3, r2
    38aa:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    38ac:	68fa      	ldr	r2, [r7, #12]
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	429a      	cmp	r2, r3
    38b2:	d8e9      	bhi.n	3888 <udc_next_desc_in_iface+0x24>
    38b4:	e000      	b.n	38b8 <udc_next_desc_in_iface+0x54>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
    38b6:	46c0      	nop			; (mov r8, r8)
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    38b8:	2300      	movs	r3, #0
}
    38ba:	0018      	movs	r0, r3
    38bc:	46bd      	mov	sp, r7
    38be:	b004      	add	sp, #16
    38c0:	bd80      	pop	{r7, pc}
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	0000383d 	.word	0x0000383d

000038c8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    38c8:	b580      	push	{r7, lr}
    38ca:	b084      	sub	sp, #16
    38cc:	af00      	add	r7, sp, #0
    38ce:	0002      	movs	r2, r0
    38d0:	1dfb      	adds	r3, r7, #7
    38d2:	701a      	strb	r2, [r3, #0]
    38d4:	1dbb      	adds	r3, r7, #6
    38d6:	1c0a      	adds	r2, r1, #0
    38d8:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    38da:	4b20      	ldr	r3, [pc, #128]	; (395c <udc_update_iface_desc+0x94>)
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	2b00      	cmp	r3, #0
    38e0:	d101      	bne.n	38e6 <udc_update_iface_desc+0x1e>
		return false;
    38e2:	2300      	movs	r3, #0
    38e4:	e036      	b.n	3954 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    38e6:	4b1e      	ldr	r3, [pc, #120]	; (3960 <udc_update_iface_desc+0x98>)
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	791b      	ldrb	r3, [r3, #4]
    38ee:	1dfa      	adds	r2, r7, #7
    38f0:	7812      	ldrb	r2, [r2, #0]
    38f2:	429a      	cmp	r2, r3
    38f4:	d301      	bcc.n	38fa <udc_update_iface_desc+0x32>
		return false;
    38f6:	2300      	movs	r3, #0
    38f8:	e02c      	b.n	3954 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    38fa:	4b19      	ldr	r3, [pc, #100]	; (3960 <udc_update_iface_desc+0x98>)
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3900:	4b18      	ldr	r3, [pc, #96]	; (3964 <udc_update_iface_desc+0x9c>)
    3902:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3904:	4b18      	ldr	r3, [pc, #96]	; (3968 <udc_update_iface_desc+0xa0>)
    3906:	4798      	blx	r3
    3908:	0003      	movs	r3, r0
    390a:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    390c:	e01c      	b.n	3948 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    390e:	4b15      	ldr	r3, [pc, #84]	; (3964 <udc_update_iface_desc+0x9c>)
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	785b      	ldrb	r3, [r3, #1]
    3914:	2b04      	cmp	r3, #4
    3916:	d10f      	bne.n	3938 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3918:	4b12      	ldr	r3, [pc, #72]	; (3964 <udc_update_iface_desc+0x9c>)
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	789b      	ldrb	r3, [r3, #2]
    391e:	1dfa      	adds	r2, r7, #7
    3920:	7812      	ldrb	r2, [r2, #0]
    3922:	429a      	cmp	r2, r3
    3924:	d108      	bne.n	3938 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    3926:	4b0f      	ldr	r3, [pc, #60]	; (3964 <udc_update_iface_desc+0x9c>)
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    392c:	1dba      	adds	r2, r7, #6
    392e:	7812      	ldrb	r2, [r2, #0]
    3930:	429a      	cmp	r2, r3
    3932:	d101      	bne.n	3938 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3934:	2301      	movs	r3, #1
    3936:	e00d      	b.n	3954 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3938:	4b0a      	ldr	r3, [pc, #40]	; (3964 <udc_update_iface_desc+0x9c>)
    393a:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    393c:	4b09      	ldr	r3, [pc, #36]	; (3964 <udc_update_iface_desc+0x9c>)
    393e:	681b      	ldr	r3, [r3, #0]
    3940:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3942:	18d2      	adds	r2, r2, r3
    3944:	4b07      	ldr	r3, [pc, #28]	; (3964 <udc_update_iface_desc+0x9c>)
    3946:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    3948:	4b06      	ldr	r3, [pc, #24]	; (3964 <udc_update_iface_desc+0x9c>)
    394a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    394c:	68fa      	ldr	r2, [r7, #12]
    394e:	429a      	cmp	r2, r3
    3950:	d8dd      	bhi.n	390e <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3952:	2300      	movs	r3, #0
}
    3954:	0018      	movs	r0, r3
    3956:	46bd      	mov	sp, r7
    3958:	b004      	add	sp, #16
    395a:	bd80      	pop	{r7, pc}
    395c:	20000124 	.word	0x20000124
    3960:	20000128 	.word	0x20000128
    3964:	2000012c 	.word	0x2000012c
    3968:	0000383d 	.word	0x0000383d

0000396c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    396c:	b580      	push	{r7, lr}
    396e:	b084      	sub	sp, #16
    3970:	af00      	add	r7, sp, #0
    3972:	0002      	movs	r2, r0
    3974:	1dfb      	adds	r3, r7, #7
    3976:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3978:	1dfb      	adds	r3, r7, #7
    397a:	781b      	ldrb	r3, [r3, #0]
    397c:	2100      	movs	r1, #0
    397e:	0018      	movs	r0, r3
    3980:	4b21      	ldr	r3, [pc, #132]	; (3a08 <udc_iface_disable+0x9c>)
    3982:	4798      	blx	r3
    3984:	0003      	movs	r3, r0
    3986:	001a      	movs	r2, r3
    3988:	2301      	movs	r3, #1
    398a:	4053      	eors	r3, r2
    398c:	b2db      	uxtb	r3, r3
    398e:	2b00      	cmp	r3, #0
    3990:	d001      	beq.n	3996 <udc_iface_disable+0x2a>
		return false;
    3992:	2300      	movs	r3, #0
    3994:	e034      	b.n	3a00 <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3996:	4b1d      	ldr	r3, [pc, #116]	; (3a0c <udc_iface_disable+0xa0>)
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	685a      	ldr	r2, [r3, #4]
    399c:	1dfb      	adds	r3, r7, #7
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	009b      	lsls	r3, r3, #2
    39a2:	18d3      	adds	r3, r2, r3
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    39a8:	68bb      	ldr	r3, [r7, #8]
    39aa:	68db      	ldr	r3, [r3, #12]
    39ac:	4798      	blx	r3
    39ae:	0003      	movs	r3, r0
    39b0:	001a      	movs	r2, r3
    39b2:	1dfb      	adds	r3, r7, #7
    39b4:	781b      	ldrb	r3, [r3, #0]
    39b6:	0011      	movs	r1, r2
    39b8:	0018      	movs	r0, r3
    39ba:	4b13      	ldr	r3, [pc, #76]	; (3a08 <udc_iface_disable+0x9c>)
    39bc:	4798      	blx	r3
    39be:	0003      	movs	r3, r0
    39c0:	001a      	movs	r2, r3
    39c2:	2301      	movs	r3, #1
    39c4:	4053      	eors	r3, r2
    39c6:	b2db      	uxtb	r3, r3
    39c8:	2b00      	cmp	r3, #0
    39ca:	d001      	beq.n	39d0 <udc_iface_disable+0x64>
		return false;
    39cc:	2300      	movs	r3, #0
    39ce:	e017      	b.n	3a00 <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    39d0:	4b0f      	ldr	r3, [pc, #60]	; (3a10 <udc_iface_disable+0xa4>)
    39d2:	681b      	ldr	r3, [r3, #0]
    39d4:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	2105      	movs	r1, #5
    39da:	0018      	movs	r0, r3
    39dc:	4b0d      	ldr	r3, [pc, #52]	; (3a14 <udc_iface_disable+0xa8>)
    39de:	4798      	blx	r3
    39e0:	0003      	movs	r3, r0
    39e2:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    39e4:	68fb      	ldr	r3, [r7, #12]
    39e6:	2b00      	cmp	r3, #0
    39e8:	d005      	beq.n	39f6 <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	789b      	ldrb	r3, [r3, #2]
    39ee:	0018      	movs	r0, r3
    39f0:	4b09      	ldr	r3, [pc, #36]	; (3a18 <udc_iface_disable+0xac>)
    39f2:	4798      	blx	r3
		}
    39f4:	e7ef      	b.n	39d6 <udc_iface_disable+0x6a>
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
    39f6:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    39f8:	68bb      	ldr	r3, [r7, #8]
    39fa:	685b      	ldr	r3, [r3, #4]
    39fc:	4798      	blx	r3
	return true;
    39fe:	2301      	movs	r3, #1
}
    3a00:	0018      	movs	r0, r3
    3a02:	46bd      	mov	sp, r7
    3a04:	b004      	add	sp, #16
    3a06:	bd80      	pop	{r7, pc}
    3a08:	000038c9 	.word	0x000038c9
    3a0c:	20000128 	.word	0x20000128
    3a10:	2000012c 	.word	0x2000012c
    3a14:	00003865 	.word	0x00003865
    3a18:	000062e1 	.word	0x000062e1

00003a1c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3a1c:	b580      	push	{r7, lr}
    3a1e:	b084      	sub	sp, #16
    3a20:	af00      	add	r7, sp, #0
    3a22:	0002      	movs	r2, r0
    3a24:	1dfb      	adds	r3, r7, #7
    3a26:	701a      	strb	r2, [r3, #0]
    3a28:	1dbb      	adds	r3, r7, #6
    3a2a:	1c0a      	adds	r2, r1, #0
    3a2c:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3a2e:	1dbb      	adds	r3, r7, #6
    3a30:	781a      	ldrb	r2, [r3, #0]
    3a32:	1dfb      	adds	r3, r7, #7
    3a34:	781b      	ldrb	r3, [r3, #0]
    3a36:	0011      	movs	r1, r2
    3a38:	0018      	movs	r0, r3
    3a3a:	4b1f      	ldr	r3, [pc, #124]	; (3ab8 <udc_iface_enable+0x9c>)
    3a3c:	4798      	blx	r3
    3a3e:	0003      	movs	r3, r0
    3a40:	001a      	movs	r2, r3
    3a42:	2301      	movs	r3, #1
    3a44:	4053      	eors	r3, r2
    3a46:	b2db      	uxtb	r3, r3
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d001      	beq.n	3a50 <udc_iface_enable+0x34>
		return false;
    3a4c:	2300      	movs	r3, #0
    3a4e:	e02e      	b.n	3aae <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3a50:	4b1a      	ldr	r3, [pc, #104]	; (3abc <udc_iface_enable+0xa0>)
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	2105      	movs	r1, #5
    3a5a:	0018      	movs	r0, r3
    3a5c:	4b18      	ldr	r3, [pc, #96]	; (3ac0 <udc_iface_enable+0xa4>)
    3a5e:	4798      	blx	r3
    3a60:	0003      	movs	r3, r0
    3a62:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3a64:	68fb      	ldr	r3, [r7, #12]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d015      	beq.n	3a96 <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	7898      	ldrb	r0, [r3, #2]
    3a6e:	68fb      	ldr	r3, [r7, #12]
    3a70:	78d9      	ldrb	r1, [r3, #3]
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	791a      	ldrb	r2, [r3, #4]
    3a76:	795b      	ldrb	r3, [r3, #5]
    3a78:	021b      	lsls	r3, r3, #8
    3a7a:	4313      	orrs	r3, r2
    3a7c:	b29b      	uxth	r3, r3
    3a7e:	001a      	movs	r2, r3
    3a80:	4b10      	ldr	r3, [pc, #64]	; (3ac4 <udc_iface_enable+0xa8>)
    3a82:	4798      	blx	r3
    3a84:	0003      	movs	r3, r0
    3a86:	001a      	movs	r2, r3
    3a88:	2301      	movs	r3, #1
    3a8a:	4053      	eors	r3, r2
    3a8c:	b2db      	uxtb	r3, r3
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d0e1      	beq.n	3a56 <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    3a92:	2300      	movs	r3, #0
    3a94:	e00b      	b.n	3aae <udc_iface_enable+0x92>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
    3a96:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3a98:	4b0b      	ldr	r3, [pc, #44]	; (3ac8 <udc_iface_enable+0xac>)
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	685a      	ldr	r2, [r3, #4]
    3a9e:	1dfb      	adds	r3, r7, #7
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	009b      	lsls	r3, r3, #2
    3aa4:	18d3      	adds	r3, r2, r3
    3aa6:	681b      	ldr	r3, [r3, #0]
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	4798      	blx	r3
    3aac:	0003      	movs	r3, r0
}
    3aae:	0018      	movs	r0, r3
    3ab0:	46bd      	mov	sp, r7
    3ab2:	b004      	add	sp, #16
    3ab4:	bd80      	pop	{r7, pc}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	000038c9 	.word	0x000038c9
    3abc:	2000012c 	.word	0x2000012c
    3ac0:	00003865 	.word	0x00003865
    3ac4:	0000636d 	.word	0x0000636d
    3ac8:	20000128 	.word	0x20000128

00003acc <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    3acc:	b580      	push	{r7, lr}
    3ace:	af00      	add	r7, sp, #0
	udd_enable();
    3ad0:	4b02      	ldr	r3, [pc, #8]	; (3adc <udc_start+0x10>)
    3ad2:	4798      	blx	r3
}
    3ad4:	46c0      	nop			; (mov r8, r8)
    3ad6:	46bd      	mov	sp, r7
    3ad8:	bd80      	pop	{r7, pc}
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	0000725d 	.word	0x0000725d

00003ae0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b082      	sub	sp, #8
    3ae4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3ae6:	4b16      	ldr	r3, [pc, #88]	; (3b40 <udc_reset+0x60>)
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d015      	beq.n	3b1a <udc_reset+0x3a>
		for (iface_num = 0;
    3aee:	1dfb      	adds	r3, r7, #7
    3af0:	2200      	movs	r2, #0
    3af2:	701a      	strb	r2, [r3, #0]
    3af4:	e009      	b.n	3b0a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3af6:	1dfb      	adds	r3, r7, #7
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	0018      	movs	r0, r3
    3afc:	4b11      	ldr	r3, [pc, #68]	; (3b44 <udc_reset+0x64>)
    3afe:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3b00:	1dfb      	adds	r3, r7, #7
    3b02:	781a      	ldrb	r2, [r3, #0]
    3b04:	1dfb      	adds	r3, r7, #7
    3b06:	3201      	adds	r2, #1
    3b08:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b0a:	4b0f      	ldr	r3, [pc, #60]	; (3b48 <udc_reset+0x68>)
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3b12:	1dfa      	adds	r2, r7, #7
    3b14:	7812      	ldrb	r2, [r2, #0]
    3b16:	429a      	cmp	r2, r3
    3b18:	d3ed      	bcc.n	3af6 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3b1a:	4b09      	ldr	r3, [pc, #36]	; (3b40 <udc_reset+0x60>)
    3b1c:	2200      	movs	r2, #0
    3b1e:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    3b20:	4b0a      	ldr	r3, [pc, #40]	; (3b4c <udc_reset+0x6c>)
    3b22:	881b      	ldrh	r3, [r3, #0]
    3b24:	2202      	movs	r2, #2
    3b26:	4013      	ands	r3, r2
    3b28:	b29b      	uxth	r3, r3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d001      	beq.n	3b32 <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    3b2e:	4b08      	ldr	r3, [pc, #32]	; (3b50 <udc_reset+0x70>)
    3b30:	4798      	blx	r3
	}
#endif
	udc_device_status =
    3b32:	4b06      	ldr	r3, [pc, #24]	; (3b4c <udc_reset+0x6c>)
    3b34:	2200      	movs	r2, #0
    3b36:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3b38:	46c0      	nop			; (mov r8, r8)
    3b3a:	46bd      	mov	sp, r7
    3b3c:	b002      	add	sp, #8
    3b3e:	bd80      	pop	{r7, pc}
    3b40:	20000124 	.word	0x20000124
    3b44:	0000396d 	.word	0x0000396d
    3b48:	20000128 	.word	0x20000128
    3b4c:	2000011c 	.word	0x2000011c
    3b50:	00009961 	.word	0x00009961

00003b54 <udc_sof_notify>:

void udc_sof_notify(void)
{
    3b54:	b580      	push	{r7, lr}
    3b56:	b082      	sub	sp, #8
    3b58:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3b5a:	4b17      	ldr	r3, [pc, #92]	; (3bb8 <udc_sof_notify+0x64>)
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d025      	beq.n	3bae <udc_sof_notify+0x5a>
		for (iface_num = 0;
    3b62:	1dfb      	adds	r3, r7, #7
    3b64:	2200      	movs	r2, #0
    3b66:	701a      	strb	r2, [r3, #0]
    3b68:	e019      	b.n	3b9e <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3b6a:	4b14      	ldr	r3, [pc, #80]	; (3bbc <udc_sof_notify+0x68>)
    3b6c:	681b      	ldr	r3, [r3, #0]
    3b6e:	685a      	ldr	r2, [r3, #4]
    3b70:	1dfb      	adds	r3, r7, #7
    3b72:	781b      	ldrb	r3, [r3, #0]
    3b74:	009b      	lsls	r3, r3, #2
    3b76:	18d3      	adds	r3, r2, r3
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	691b      	ldr	r3, [r3, #16]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d009      	beq.n	3b94 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3b80:	4b0e      	ldr	r3, [pc, #56]	; (3bbc <udc_sof_notify+0x68>)
    3b82:	681b      	ldr	r3, [r3, #0]
    3b84:	685a      	ldr	r2, [r3, #4]
    3b86:	1dfb      	adds	r3, r7, #7
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	009b      	lsls	r3, r3, #2
    3b8c:	18d3      	adds	r3, r2, r3
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	691b      	ldr	r3, [r3, #16]
    3b92:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3b94:	1dfb      	adds	r3, r7, #7
    3b96:	781a      	ldrb	r2, [r3, #0]
    3b98:	1dfb      	adds	r3, r7, #7
    3b9a:	3201      	adds	r2, #1
    3b9c:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b9e:	4b07      	ldr	r3, [pc, #28]	; (3bbc <udc_sof_notify+0x68>)
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3ba6:	1dfa      	adds	r2, r7, #7
    3ba8:	7812      	ldrb	r2, [r2, #0]
    3baa:	429a      	cmp	r2, r3
    3bac:	d3dd      	bcc.n	3b6a <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	46bd      	mov	sp, r7
    3bb2:	b002      	add	sp, #8
    3bb4:	bd80      	pop	{r7, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	20000124 	.word	0x20000124
    3bbc:	20000128 	.word	0x20000128

00003bc0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3bc4:	4b07      	ldr	r3, [pc, #28]	; (3be4 <udc_req_std_dev_get_status+0x24>)
    3bc6:	88db      	ldrh	r3, [r3, #6]
    3bc8:	2b02      	cmp	r3, #2
    3bca:	d001      	beq.n	3bd0 <udc_req_std_dev_get_status+0x10>
		return false;
    3bcc:	2300      	movs	r3, #0
    3bce:	e005      	b.n	3bdc <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3bd0:	4b05      	ldr	r3, [pc, #20]	; (3be8 <udc_req_std_dev_get_status+0x28>)
    3bd2:	2102      	movs	r1, #2
    3bd4:	0018      	movs	r0, r3
    3bd6:	4b05      	ldr	r3, [pc, #20]	; (3bec <udc_req_std_dev_get_status+0x2c>)
    3bd8:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    3bda:	2301      	movs	r3, #1
}
    3bdc:	0018      	movs	r0, r3
    3bde:	46bd      	mov	sp, r7
    3be0:	bd80      	pop	{r7, pc}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	200004e0 	.word	0x200004e0
    3be8:	2000011c 	.word	0x2000011c
    3bec:	00006975 	.word	0x00006975

00003bf0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3bf4:	4b0c      	ldr	r3, [pc, #48]	; (3c28 <udc_req_std_ep_get_status+0x38>)
    3bf6:	88db      	ldrh	r3, [r3, #6]
    3bf8:	2b02      	cmp	r3, #2
    3bfa:	d001      	beq.n	3c00 <udc_req_std_ep_get_status+0x10>
		return false;
    3bfc:	2300      	movs	r3, #0
    3bfe:	e00f      	b.n	3c20 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <udc_req_std_ep_get_status+0x38>)
    3c02:	889b      	ldrh	r3, [r3, #4]
    3c04:	b2db      	uxtb	r3, r3
    3c06:	0018      	movs	r0, r3
    3c08:	4b08      	ldr	r3, [pc, #32]	; (3c2c <udc_req_std_ep_get_status+0x3c>)
    3c0a:	4798      	blx	r3
    3c0c:	0003      	movs	r3, r0
    3c0e:	b29a      	uxth	r2, r3
    3c10:	4b07      	ldr	r3, [pc, #28]	; (3c30 <udc_req_std_ep_get_status+0x40>)
    3c12:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3c14:	4b06      	ldr	r3, [pc, #24]	; (3c30 <udc_req_std_ep_get_status+0x40>)
    3c16:	2102      	movs	r1, #2
    3c18:	0018      	movs	r0, r3
    3c1a:	4b06      	ldr	r3, [pc, #24]	; (3c34 <udc_req_std_ep_get_status+0x44>)
    3c1c:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    3c1e:	2301      	movs	r3, #1
}
    3c20:	0018      	movs	r0, r3
    3c22:	46bd      	mov	sp, r7
    3c24:	bd80      	pop	{r7, pc}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	200004e0 	.word	0x200004e0
    3c2c:	00006515 	.word	0x00006515
    3c30:	20000130 	.word	0x20000130
    3c34:	00006975 	.word	0x00006975

00003c38 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3c3c:	4b0c      	ldr	r3, [pc, #48]	; (3c70 <udc_req_std_dev_clear_feature+0x38>)
    3c3e:	88db      	ldrh	r3, [r3, #6]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d001      	beq.n	3c48 <udc_req_std_dev_clear_feature+0x10>
		return false;
    3c44:	2300      	movs	r3, #0
    3c46:	e00f      	b.n	3c68 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3c48:	4b09      	ldr	r3, [pc, #36]	; (3c70 <udc_req_std_dev_clear_feature+0x38>)
    3c4a:	885b      	ldrh	r3, [r3, #2]
    3c4c:	2b01      	cmp	r3, #1
    3c4e:	d10a      	bne.n	3c66 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3c50:	4b08      	ldr	r3, [pc, #32]	; (3c74 <udc_req_std_dev_clear_feature+0x3c>)
    3c52:	881b      	ldrh	r3, [r3, #0]
    3c54:	2202      	movs	r2, #2
    3c56:	4393      	bics	r3, r2
    3c58:	b29a      	uxth	r2, r3
    3c5a:	4b06      	ldr	r3, [pc, #24]	; (3c74 <udc_req_std_dev_clear_feature+0x3c>)
    3c5c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3c5e:	4b06      	ldr	r3, [pc, #24]	; (3c78 <udc_req_std_dev_clear_feature+0x40>)
    3c60:	4798      	blx	r3
#endif
		return true;
    3c62:	2301      	movs	r3, #1
    3c64:	e000      	b.n	3c68 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    3c66:	2300      	movs	r3, #0
}
    3c68:	0018      	movs	r0, r3
    3c6a:	46bd      	mov	sp, r7
    3c6c:	bd80      	pop	{r7, pc}
    3c6e:	46c0      	nop			; (mov r8, r8)
    3c70:	200004e0 	.word	0x200004e0
    3c74:	2000011c 	.word	0x2000011c
    3c78:	00009961 	.word	0x00009961

00003c7c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3c80:	4b0a      	ldr	r3, [pc, #40]	; (3cac <udc_req_std_ep_clear_feature+0x30>)
    3c82:	88db      	ldrh	r3, [r3, #6]
    3c84:	2b00      	cmp	r3, #0
    3c86:	d001      	beq.n	3c8c <udc_req_std_ep_clear_feature+0x10>
		return false;
    3c88:	2300      	movs	r3, #0
    3c8a:	e00c      	b.n	3ca6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3c8c:	4b07      	ldr	r3, [pc, #28]	; (3cac <udc_req_std_ep_clear_feature+0x30>)
    3c8e:	885b      	ldrh	r3, [r3, #2]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d107      	bne.n	3ca4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c94:	4b05      	ldr	r3, [pc, #20]	; (3cac <udc_req_std_ep_clear_feature+0x30>)
    3c96:	889b      	ldrh	r3, [r3, #4]
    3c98:	b2db      	uxtb	r3, r3
    3c9a:	0018      	movs	r0, r3
    3c9c:	4b04      	ldr	r3, [pc, #16]	; (3cb0 <udc_req_std_ep_clear_feature+0x34>)
    3c9e:	4798      	blx	r3
    3ca0:	0003      	movs	r3, r0
    3ca2:	e000      	b.n	3ca6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    3ca4:	2300      	movs	r3, #0
}
    3ca6:	0018      	movs	r0, r3
    3ca8:	46bd      	mov	sp, r7
    3caa:	bd80      	pop	{r7, pc}
    3cac:	200004e0 	.word	0x200004e0
    3cb0:	00006599 	.word	0x00006599

00003cb4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3cb8:	4b0c      	ldr	r3, [pc, #48]	; (3cec <udc_req_std_dev_set_feature+0x38>)
    3cba:	88db      	ldrh	r3, [r3, #6]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d001      	beq.n	3cc4 <udc_req_std_dev_set_feature+0x10>
		return false;
    3cc0:	2300      	movs	r3, #0
    3cc2:	e010      	b.n	3ce6 <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3cc4:	4b09      	ldr	r3, [pc, #36]	; (3cec <udc_req_std_dev_set_feature+0x38>)
    3cc6:	885b      	ldrh	r3, [r3, #2]
    3cc8:	2b01      	cmp	r3, #1
    3cca:	d002      	beq.n	3cd2 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    3ccc:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    3cce:	2300      	movs	r3, #0
    3cd0:	e009      	b.n	3ce6 <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    3cd2:	4b07      	ldr	r3, [pc, #28]	; (3cf0 <udc_req_std_dev_set_feature+0x3c>)
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2202      	movs	r2, #2
    3cd8:	4313      	orrs	r3, r2
    3cda:	b29a      	uxth	r2, r3
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <udc_req_std_dev_set_feature+0x3c>)
    3cde:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    3ce0:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <udc_req_std_dev_set_feature+0x40>)
    3ce2:	4798      	blx	r3
		return true;
    3ce4:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    3ce6:	0018      	movs	r0, r3
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}
    3cec:	200004e0 	.word	0x200004e0
    3cf0:	2000011c 	.word	0x2000011c
    3cf4:	0000994d 	.word	0x0000994d

00003cf8 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3cfc:	4b0d      	ldr	r3, [pc, #52]	; (3d34 <udc_req_std_ep_set_feature+0x3c>)
    3cfe:	88db      	ldrh	r3, [r3, #6]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d001      	beq.n	3d08 <udc_req_std_ep_set_feature+0x10>
		return false;
    3d04:	2300      	movs	r3, #0
    3d06:	e012      	b.n	3d2e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3d08:	4b0a      	ldr	r3, [pc, #40]	; (3d34 <udc_req_std_ep_set_feature+0x3c>)
    3d0a:	885b      	ldrh	r3, [r3, #2]
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d10d      	bne.n	3d2c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3d10:	4b08      	ldr	r3, [pc, #32]	; (3d34 <udc_req_std_ep_set_feature+0x3c>)
    3d12:	889b      	ldrh	r3, [r3, #4]
    3d14:	b2db      	uxtb	r3, r3
    3d16:	0018      	movs	r0, r3
    3d18:	4b07      	ldr	r3, [pc, #28]	; (3d38 <udc_req_std_ep_set_feature+0x40>)
    3d1a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3d1c:	4b05      	ldr	r3, [pc, #20]	; (3d34 <udc_req_std_ep_set_feature+0x3c>)
    3d1e:	889b      	ldrh	r3, [r3, #4]
    3d20:	b2db      	uxtb	r3, r3
    3d22:	0018      	movs	r0, r3
    3d24:	4b05      	ldr	r3, [pc, #20]	; (3d3c <udc_req_std_ep_set_feature+0x44>)
    3d26:	4798      	blx	r3
    3d28:	0003      	movs	r3, r0
    3d2a:	e000      	b.n	3d2e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3d2c:	2300      	movs	r3, #0
}
    3d2e:	0018      	movs	r0, r3
    3d30:	46bd      	mov	sp, r7
    3d32:	bd80      	pop	{r7, pc}
    3d34:	200004e0 	.word	0x200004e0
    3d38:	00006255 	.word	0x00006255
    3d3c:	00006541 	.word	0x00006541

00003d40 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3d40:	b580      	push	{r7, lr}
    3d42:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3d44:	4b05      	ldr	r3, [pc, #20]	; (3d5c <udc_valid_address+0x1c>)
    3d46:	885b      	ldrh	r3, [r3, #2]
    3d48:	b2db      	uxtb	r3, r3
    3d4a:	227f      	movs	r2, #127	; 0x7f
    3d4c:	4013      	ands	r3, r2
    3d4e:	b2db      	uxtb	r3, r3
    3d50:	0018      	movs	r0, r3
    3d52:	4b03      	ldr	r3, [pc, #12]	; (3d60 <udc_valid_address+0x20>)
    3d54:	4798      	blx	r3
}
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	46bd      	mov	sp, r7
    3d5a:	bd80      	pop	{r7, pc}
    3d5c:	200004e0 	.word	0x200004e0
    3d60:	0000692d 	.word	0x0000692d

00003d64 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    3d64:	b580      	push	{r7, lr}
    3d66:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3d68:	4b06      	ldr	r3, [pc, #24]	; (3d84 <udc_req_std_dev_set_address+0x20>)
    3d6a:	88db      	ldrh	r3, [r3, #6]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d001      	beq.n	3d74 <udc_req_std_dev_set_address+0x10>
		return false;
    3d70:	2300      	movs	r3, #0
    3d72:	e003      	b.n	3d7c <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3d74:	4b03      	ldr	r3, [pc, #12]	; (3d84 <udc_req_std_dev_set_address+0x20>)
    3d76:	4a04      	ldr	r2, [pc, #16]	; (3d88 <udc_req_std_dev_set_address+0x24>)
    3d78:	611a      	str	r2, [r3, #16]
	return true;
    3d7a:	2301      	movs	r3, #1
}
    3d7c:	0018      	movs	r0, r3
    3d7e:	46bd      	mov	sp, r7
    3d80:	bd80      	pop	{r7, pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	200004e0 	.word	0x200004e0
    3d88:	00003d41 	.word	0x00003d41

00003d8c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    3d8c:	b580      	push	{r7, lr}
    3d8e:	b084      	sub	sp, #16
    3d90:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    3d92:	1dfb      	adds	r3, r7, #7
    3d94:	2200      	movs	r2, #0
    3d96:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3d98:	4b2d      	ldr	r3, [pc, #180]	; (3e50 <udc_req_std_dev_get_str_desc+0xc4>)
    3d9a:	885b      	ldrh	r3, [r3, #2]
    3d9c:	001a      	movs	r2, r3
    3d9e:	23ff      	movs	r3, #255	; 0xff
    3da0:	4013      	ands	r3, r2
    3da2:	2b01      	cmp	r3, #1
    3da4:	d009      	beq.n	3dba <udc_req_std_dev_get_str_desc+0x2e>
    3da6:	2b02      	cmp	r3, #2
    3da8:	d00d      	beq.n	3dc6 <udc_req_std_dev_get_str_desc+0x3a>
    3daa:	2b00      	cmp	r3, #0
    3dac:	d111      	bne.n	3dd2 <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3dae:	4b29      	ldr	r3, [pc, #164]	; (3e54 <udc_req_std_dev_get_str_desc+0xc8>)
    3db0:	2104      	movs	r1, #4
    3db2:	0018      	movs	r0, r3
    3db4:	4b28      	ldr	r3, [pc, #160]	; (3e58 <udc_req_std_dev_get_str_desc+0xcc>)
    3db6:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    3db8:	e00d      	b.n	3dd6 <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3dba:	1dfb      	adds	r3, r7, #7
    3dbc:	2209      	movs	r2, #9
    3dbe:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    3dc0:	4b26      	ldr	r3, [pc, #152]	; (3e5c <udc_req_std_dev_get_str_desc+0xd0>)
    3dc2:	60bb      	str	r3, [r7, #8]
		break;
    3dc4:	e007      	b.n	3dd6 <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3dc6:	1dfb      	adds	r3, r7, #7
    3dc8:	2209      	movs	r2, #9
    3dca:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    3dcc:	4b24      	ldr	r3, [pc, #144]	; (3e60 <udc_req_std_dev_get_str_desc+0xd4>)
    3dce:	60bb      	str	r3, [r7, #8]
		break;
    3dd0:	e001      	b.n	3dd6 <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    3dd2:	2300      	movs	r3, #0
    3dd4:	e037      	b.n	3e46 <udc_req_std_dev_get_str_desc+0xba>
	}

	if (str_length) {
    3dd6:	1dfb      	adds	r3, r7, #7
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d032      	beq.n	3e44 <udc_req_std_dev_get_str_desc+0xb8>
		for(i = 0; i < str_length; i++) {
    3dde:	230f      	movs	r3, #15
    3de0:	18fb      	adds	r3, r7, r3
    3de2:	2200      	movs	r2, #0
    3de4:	701a      	strb	r2, [r3, #0]
    3de6:	e016      	b.n	3e16 <udc_req_std_dev_get_str_desc+0x8a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3de8:	230f      	movs	r3, #15
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	781b      	ldrb	r3, [r3, #0]
    3dee:	220f      	movs	r2, #15
    3df0:	18ba      	adds	r2, r7, r2
    3df2:	7812      	ldrb	r2, [r2, #0]
    3df4:	68b9      	ldr	r1, [r7, #8]
    3df6:	188a      	adds	r2, r1, r2
    3df8:	7812      	ldrb	r2, [r2, #0]
    3dfa:	b291      	uxth	r1, r2
    3dfc:	4a19      	ldr	r2, [pc, #100]	; (3e64 <udc_req_std_dev_get_str_desc+0xd8>)
    3dfe:	005b      	lsls	r3, r3, #1
    3e00:	18d3      	adds	r3, r2, r3
    3e02:	3302      	adds	r3, #2
    3e04:	1c0a      	adds	r2, r1, #0
    3e06:	801a      	strh	r2, [r3, #0]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3e08:	230f      	movs	r3, #15
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	781a      	ldrb	r2, [r3, #0]
    3e0e:	230f      	movs	r3, #15
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	3201      	adds	r2, #1
    3e14:	701a      	strb	r2, [r3, #0]
    3e16:	230f      	movs	r3, #15
    3e18:	18fa      	adds	r2, r7, r3
    3e1a:	1dfb      	adds	r3, r7, #7
    3e1c:	7812      	ldrb	r2, [r2, #0]
    3e1e:	781b      	ldrb	r3, [r3, #0]
    3e20:	429a      	cmp	r2, r3
    3e22:	d3e1      	bcc.n	3de8 <udc_req_std_dev_get_str_desc+0x5c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3e24:	1dfb      	adds	r3, r7, #7
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	3301      	adds	r3, #1
    3e2a:	b2db      	uxtb	r3, r3
    3e2c:	18db      	adds	r3, r3, r3
    3e2e:	b2da      	uxtb	r2, r3
    3e30:	4b0c      	ldr	r3, [pc, #48]	; (3e64 <udc_req_std_dev_get_str_desc+0xd8>)
    3e32:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    3e34:	4b0b      	ldr	r3, [pc, #44]	; (3e64 <udc_req_std_dev_get_str_desc+0xd8>)
    3e36:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    3e38:	b29a      	uxth	r2, r3
    3e3a:	4b0a      	ldr	r3, [pc, #40]	; (3e64 <udc_req_std_dev_get_str_desc+0xd8>)
    3e3c:	0011      	movs	r1, r2
    3e3e:	0018      	movs	r0, r3
    3e40:	4b05      	ldr	r3, [pc, #20]	; (3e58 <udc_req_std_dev_get_str_desc+0xcc>)
    3e42:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    3e44:	2301      	movs	r3, #1
}
    3e46:	0018      	movs	r0, r3
    3e48:	46bd      	mov	sp, r7
    3e4a:	b004      	add	sp, #16
    3e4c:	bd80      	pop	{r7, pc}
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	200004e0 	.word	0x200004e0
    3e54:	200000a8 	.word	0x200000a8
    3e58:	00006975 	.word	0x00006975
    3e5c:	200000ac 	.word	0x200000ac
    3e60:	200000b8 	.word	0x200000b8
    3e64:	200000c4 	.word	0x200000c4

00003e68 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	b082      	sub	sp, #8
    3e6c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3e6e:	4b39      	ldr	r3, [pc, #228]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3e70:	885a      	ldrh	r2, [r3, #2]
    3e72:	1dfb      	adds	r3, r7, #7
    3e74:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3e76:	4b37      	ldr	r3, [pc, #220]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3e78:	885b      	ldrh	r3, [r3, #2]
    3e7a:	0a1b      	lsrs	r3, r3, #8
    3e7c:	b29b      	uxth	r3, r3
    3e7e:	b2db      	uxtb	r3, r3
    3e80:	2b02      	cmp	r3, #2
    3e82:	d013      	beq.n	3eac <udc_req_std_dev_get_descriptor+0x44>
    3e84:	dc02      	bgt.n	3e8c <udc_req_std_dev_get_descriptor+0x24>
    3e86:	2b01      	cmp	r3, #1
    3e88:	d005      	beq.n	3e96 <udc_req_std_dev_get_descriptor+0x2e>
    3e8a:	e051      	b.n	3f30 <udc_req_std_dev_get_descriptor+0xc8>
    3e8c:	2b03      	cmp	r3, #3
    3e8e:	d044      	beq.n	3f1a <udc_req_std_dev_get_descriptor+0xb2>
    3e90:	2b0f      	cmp	r3, #15
    3e92:	d02f      	beq.n	3ef4 <udc_req_std_dev_get_descriptor+0x8c>
    3e94:	e04c      	b.n	3f30 <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    3e96:	4b30      	ldr	r3, [pc, #192]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3e98:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    3e9a:	4b2f      	ldr	r3, [pc, #188]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3ea0:	b29b      	uxth	r3, r3
    3ea2:	0019      	movs	r1, r3
    3ea4:	0010      	movs	r0, r2
    3ea6:	4b2d      	ldr	r3, [pc, #180]	; (3f5c <udc_req_std_dev_get_descriptor+0xf4>)
    3ea8:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    3eaa:	e044      	b.n	3f36 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3eac:	4b2a      	ldr	r3, [pc, #168]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	7c5b      	ldrb	r3, [r3, #17]
    3eb2:	1dfa      	adds	r2, r7, #7
    3eb4:	7812      	ldrb	r2, [r2, #0]
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d301      	bcc.n	3ebe <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    3eba:	2300      	movs	r3, #0
    3ebc:	e046      	b.n	3f4c <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    3ebe:	4b26      	ldr	r3, [pc, #152]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3ec0:	685a      	ldr	r2, [r3, #4]
    3ec2:	1dfb      	adds	r3, r7, #7
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	00db      	lsls	r3, r3, #3
    3ec8:	18d3      	adds	r3, r2, r3
    3eca:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3ecc:	4b22      	ldr	r3, [pc, #136]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3ece:	685a      	ldr	r2, [r3, #4]
    3ed0:	1dfb      	adds	r3, r7, #7
    3ed2:	781b      	ldrb	r3, [r3, #0]
    3ed4:	00db      	lsls	r3, r3, #3
    3ed6:	18d3      	adds	r3, r2, r3
    3ed8:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3eda:	789a      	ldrb	r2, [r3, #2]
    3edc:	78db      	ldrb	r3, [r3, #3]
    3ede:	021b      	lsls	r3, r3, #8
    3ee0:	4313      	orrs	r3, r2
    3ee2:	b29b      	uxth	r3, r3
    3ee4:	0019      	movs	r1, r3
    3ee6:	4b1d      	ldr	r3, [pc, #116]	; (3f5c <udc_req_std_dev_get_descriptor+0xf4>)
    3ee8:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3eea:	4b1a      	ldr	r3, [pc, #104]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3eec:	689b      	ldr	r3, [r3, #8]
    3eee:	2202      	movs	r2, #2
    3ef0:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    3ef2:	e020      	b.n	3f36 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3ef4:	4b18      	ldr	r3, [pc, #96]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3ef6:	689b      	ldr	r3, [r3, #8]
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d101      	bne.n	3f00 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    3efc:	2300      	movs	r3, #0
    3efe:	e025      	b.n	3f4c <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3f00:	4b15      	ldr	r3, [pc, #84]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3f02:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    3f04:	4b14      	ldr	r3, [pc, #80]	; (3f58 <udc_req_std_dev_get_descriptor+0xf0>)
    3f06:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3f08:	789a      	ldrb	r2, [r3, #2]
    3f0a:	78db      	ldrb	r3, [r3, #3]
    3f0c:	021b      	lsls	r3, r3, #8
    3f0e:	4313      	orrs	r3, r2
    3f10:	b29b      	uxth	r3, r3
    3f12:	0019      	movs	r1, r3
    3f14:	4b11      	ldr	r3, [pc, #68]	; (3f5c <udc_req_std_dev_get_descriptor+0xf4>)
    3f16:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    3f18:	e00d      	b.n	3f36 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    3f1a:	4b11      	ldr	r3, [pc, #68]	; (3f60 <udc_req_std_dev_get_descriptor+0xf8>)
    3f1c:	4798      	blx	r3
    3f1e:	0003      	movs	r3, r0
    3f20:	001a      	movs	r2, r3
    3f22:	2301      	movs	r3, #1
    3f24:	4053      	eors	r3, r2
    3f26:	b2db      	uxtb	r3, r3
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d003      	beq.n	3f34 <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    3f2c:	2300      	movs	r3, #0
    3f2e:	e00d      	b.n	3f4c <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    3f30:	2300      	movs	r3, #0
    3f32:	e00b      	b.n	3f4c <udc_req_std_dev_get_descriptor+0xe4>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
    3f34:	46c0      	nop			; (mov r8, r8)
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3f36:	4b07      	ldr	r3, [pc, #28]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3f38:	88da      	ldrh	r2, [r3, #6]
    3f3a:	4b06      	ldr	r3, [pc, #24]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3f3c:	899b      	ldrh	r3, [r3, #12]
    3f3e:	429a      	cmp	r2, r3
    3f40:	d203      	bcs.n	3f4a <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3f42:	4b04      	ldr	r3, [pc, #16]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3f44:	88da      	ldrh	r2, [r3, #6]
    3f46:	4b03      	ldr	r3, [pc, #12]	; (3f54 <udc_req_std_dev_get_descriptor+0xec>)
    3f48:	819a      	strh	r2, [r3, #12]
	}
	return true;
    3f4a:	2301      	movs	r3, #1
}
    3f4c:	0018      	movs	r0, r3
    3f4e:	46bd      	mov	sp, r7
    3f50:	b002      	add	sp, #8
    3f52:	bd80      	pop	{r7, pc}
    3f54:	200004e0 	.word	0x200004e0
    3f58:	2000009c 	.word	0x2000009c
    3f5c:	00006975 	.word	0x00006975
    3f60:	00003d8d 	.word	0x00003d8d

00003f64 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    3f68:	4b07      	ldr	r3, [pc, #28]	; (3f88 <udc_req_std_dev_get_configuration+0x24>)
    3f6a:	88db      	ldrh	r3, [r3, #6]
    3f6c:	2b01      	cmp	r3, #1
    3f6e:	d001      	beq.n	3f74 <udc_req_std_dev_get_configuration+0x10>
		return false;
    3f70:	2300      	movs	r3, #0
    3f72:	e005      	b.n	3f80 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3f74:	4b05      	ldr	r3, [pc, #20]	; (3f8c <udc_req_std_dev_get_configuration+0x28>)
    3f76:	2101      	movs	r1, #1
    3f78:	0018      	movs	r0, r3
    3f7a:	4b05      	ldr	r3, [pc, #20]	; (3f90 <udc_req_std_dev_get_configuration+0x2c>)
    3f7c:	4798      	blx	r3
	return true;
    3f7e:	2301      	movs	r3, #1
}
    3f80:	0018      	movs	r0, r3
    3f82:	46bd      	mov	sp, r7
    3f84:	bd80      	pop	{r7, pc}
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	200004e0 	.word	0x200004e0
    3f8c:	20000124 	.word	0x20000124
    3f90:	00006975 	.word	0x00006975

00003f94 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    3f94:	b580      	push	{r7, lr}
    3f96:	b082      	sub	sp, #8
    3f98:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3f9a:	4b2a      	ldr	r3, [pc, #168]	; (4044 <udc_req_std_dev_set_configuration+0xb0>)
    3f9c:	88db      	ldrh	r3, [r3, #6]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d001      	beq.n	3fa6 <udc_req_std_dev_set_configuration+0x12>
		return false;
    3fa2:	2300      	movs	r3, #0
    3fa4:	e04a      	b.n	403c <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3fa6:	4b28      	ldr	r3, [pc, #160]	; (4048 <udc_req_std_dev_set_configuration+0xb4>)
    3fa8:	4798      	blx	r3
    3faa:	1e03      	subs	r3, r0, #0
    3fac:	d101      	bne.n	3fb2 <udc_req_std_dev_set_configuration+0x1e>
		return false;
    3fae:	2300      	movs	r3, #0
    3fb0:	e044      	b.n	403c <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3fb2:	4b24      	ldr	r3, [pc, #144]	; (4044 <udc_req_std_dev_set_configuration+0xb0>)
    3fb4:	885b      	ldrh	r3, [r3, #2]
    3fb6:	001a      	movs	r2, r3
    3fb8:	23ff      	movs	r3, #255	; 0xff
    3fba:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    3fbc:	4b23      	ldr	r3, [pc, #140]	; (404c <udc_req_std_dev_set_configuration+0xb8>)
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3fc2:	429a      	cmp	r2, r3
    3fc4:	dd01      	ble.n	3fca <udc_req_std_dev_set_configuration+0x36>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    3fc6:	2300      	movs	r3, #0
    3fc8:	e038      	b.n	403c <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    3fca:	4b21      	ldr	r3, [pc, #132]	; (4050 <udc_req_std_dev_set_configuration+0xbc>)
    3fcc:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3fce:	4b1d      	ldr	r3, [pc, #116]	; (4044 <udc_req_std_dev_set_configuration+0xb0>)
    3fd0:	885b      	ldrh	r3, [r3, #2]
    3fd2:	b2da      	uxtb	r2, r3
    3fd4:	4b1f      	ldr	r3, [pc, #124]	; (4054 <udc_req_std_dev_set_configuration+0xc0>)
    3fd6:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    3fd8:	4b1e      	ldr	r3, [pc, #120]	; (4054 <udc_req_std_dev_set_configuration+0xc0>)
    3fda:	781b      	ldrb	r3, [r3, #0]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	d101      	bne.n	3fe4 <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    3fe0:	2301      	movs	r3, #1
    3fe2:	e02b      	b.n	403c <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3fe4:	4b19      	ldr	r3, [pc, #100]	; (404c <udc_req_std_dev_set_configuration+0xb8>)
    3fe6:	685a      	ldr	r2, [r3, #4]
    3fe8:	4b1a      	ldr	r3, [pc, #104]	; (4054 <udc_req_std_dev_set_configuration+0xc0>)
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	491a      	ldr	r1, [pc, #104]	; (4058 <udc_req_std_dev_set_configuration+0xc4>)
    3fee:	468c      	mov	ip, r1
    3ff0:	4463      	add	r3, ip
    3ff2:	00db      	lsls	r3, r3, #3
    3ff4:	18d2      	adds	r2, r2, r3
    3ff6:	4b19      	ldr	r3, [pc, #100]	; (405c <udc_req_std_dev_set_configuration+0xc8>)
    3ff8:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3ffa:	1dfb      	adds	r3, r7, #7
    3ffc:	2200      	movs	r2, #0
    3ffe:	701a      	strb	r2, [r3, #0]
    4000:	e013      	b.n	402a <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4002:	1dfb      	adds	r3, r7, #7
    4004:	781b      	ldrb	r3, [r3, #0]
    4006:	2100      	movs	r1, #0
    4008:	0018      	movs	r0, r3
    400a:	4b15      	ldr	r3, [pc, #84]	; (4060 <udc_req_std_dev_set_configuration+0xcc>)
    400c:	4798      	blx	r3
    400e:	0003      	movs	r3, r0
    4010:	001a      	movs	r2, r3
    4012:	2301      	movs	r3, #1
    4014:	4053      	eors	r3, r2
    4016:	b2db      	uxtb	r3, r3
    4018:	2b00      	cmp	r3, #0
    401a:	d001      	beq.n	4020 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    401c:	2300      	movs	r3, #0
    401e:	e00d      	b.n	403c <udc_req_std_dev_set_configuration+0xa8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4020:	1dfb      	adds	r3, r7, #7
    4022:	781a      	ldrb	r2, [r3, #0]
    4024:	1dfb      	adds	r3, r7, #7
    4026:	3201      	adds	r2, #1
    4028:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    402a:	4b0c      	ldr	r3, [pc, #48]	; (405c <udc_req_std_dev_set_configuration+0xc8>)
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	791b      	ldrb	r3, [r3, #4]
    4032:	1dfa      	adds	r2, r7, #7
    4034:	7812      	ldrb	r2, [r2, #0]
    4036:	429a      	cmp	r2, r3
    4038:	d3e3      	bcc.n	4002 <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    403a:	2301      	movs	r3, #1
}
    403c:	0018      	movs	r0, r3
    403e:	46bd      	mov	sp, r7
    4040:	b002      	add	sp, #8
    4042:	bd80      	pop	{r7, pc}
    4044:	200004e0 	.word	0x200004e0
    4048:	00006959 	.word	0x00006959
    404c:	2000009c 	.word	0x2000009c
    4050:	00003ae1 	.word	0x00003ae1
    4054:	20000124 	.word	0x20000124
    4058:	1fffffff 	.word	0x1fffffff
    405c:	20000128 	.word	0x20000128
    4060:	00003a1d 	.word	0x00003a1d

00004064 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    406a:	4b21      	ldr	r3, [pc, #132]	; (40f0 <udc_req_std_iface_get_setting+0x8c>)
    406c:	88db      	ldrh	r3, [r3, #6]
    406e:	2b01      	cmp	r3, #1
    4070:	d001      	beq.n	4076 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    4072:	2300      	movs	r3, #0
    4074:	e038      	b.n	40e8 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    4076:	4b1f      	ldr	r3, [pc, #124]	; (40f4 <udc_req_std_iface_get_setting+0x90>)
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	2b00      	cmp	r3, #0
    407c:	d101      	bne.n	4082 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    407e:	2300      	movs	r3, #0
    4080:	e032      	b.n	40e8 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4082:	4b1b      	ldr	r3, [pc, #108]	; (40f0 <udc_req_std_iface_get_setting+0x8c>)
    4084:	889a      	ldrh	r2, [r3, #4]
    4086:	1dfb      	adds	r3, r7, #7
    4088:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    408a:	4b1b      	ldr	r3, [pc, #108]	; (40f8 <udc_req_std_iface_get_setting+0x94>)
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	791b      	ldrb	r3, [r3, #4]
    4092:	1dfa      	adds	r2, r7, #7
    4094:	7812      	ldrb	r2, [r2, #0]
    4096:	429a      	cmp	r2, r3
    4098:	d301      	bcc.n	409e <udc_req_std_iface_get_setting+0x3a>
		return false;
    409a:	2300      	movs	r3, #0
    409c:	e024      	b.n	40e8 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    409e:	1dfb      	adds	r3, r7, #7
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	2100      	movs	r1, #0
    40a4:	0018      	movs	r0, r3
    40a6:	4b15      	ldr	r3, [pc, #84]	; (40fc <udc_req_std_iface_get_setting+0x98>)
    40a8:	4798      	blx	r3
    40aa:	0003      	movs	r3, r0
    40ac:	001a      	movs	r2, r3
    40ae:	2301      	movs	r3, #1
    40b0:	4053      	eors	r3, r2
    40b2:	b2db      	uxtb	r3, r3
    40b4:	2b00      	cmp	r3, #0
    40b6:	d001      	beq.n	40bc <udc_req_std_iface_get_setting+0x58>
		return false;
    40b8:	2300      	movs	r3, #0
    40ba:	e015      	b.n	40e8 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    40bc:	4b0e      	ldr	r3, [pc, #56]	; (40f8 <udc_req_std_iface_get_setting+0x94>)
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	685a      	ldr	r2, [r3, #4]
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	781b      	ldrb	r3, [r3, #0]
    40c6:	009b      	lsls	r3, r3, #2
    40c8:	18d3      	adds	r3, r2, r3
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	68db      	ldr	r3, [r3, #12]
    40d2:	4798      	blx	r3
    40d4:	0003      	movs	r3, r0
    40d6:	001a      	movs	r2, r3
    40d8:	4b09      	ldr	r3, [pc, #36]	; (4100 <udc_req_std_iface_get_setting+0x9c>)
    40da:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <udc_req_std_iface_get_setting+0x9c>)
    40de:	2101      	movs	r1, #1
    40e0:	0018      	movs	r0, r3
    40e2:	4b08      	ldr	r3, [pc, #32]	; (4104 <udc_req_std_iface_get_setting+0xa0>)
    40e4:	4798      	blx	r3
	return true;
    40e6:	2301      	movs	r3, #1
}
    40e8:	0018      	movs	r0, r3
    40ea:	46bd      	mov	sp, r7
    40ec:	b002      	add	sp, #8
    40ee:	bd80      	pop	{r7, pc}
    40f0:	200004e0 	.word	0x200004e0
    40f4:	20000124 	.word	0x20000124
    40f8:	20000128 	.word	0x20000128
    40fc:	000038c9 	.word	0x000038c9
    4100:	20000120 	.word	0x20000120
    4104:	00006975 	.word	0x00006975

00004108 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    4108:	b580      	push	{r7, lr}
    410a:	b082      	sub	sp, #8
    410c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    410e:	4b17      	ldr	r3, [pc, #92]	; (416c <udc_req_std_iface_set_setting+0x64>)
    4110:	88db      	ldrh	r3, [r3, #6]
    4112:	2b00      	cmp	r3, #0
    4114:	d001      	beq.n	411a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    4116:	2300      	movs	r3, #0
    4118:	e024      	b.n	4164 <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    411a:	4b15      	ldr	r3, [pc, #84]	; (4170 <udc_req_std_iface_set_setting+0x68>)
    411c:	781b      	ldrb	r3, [r3, #0]
    411e:	2b00      	cmp	r3, #0
    4120:	d101      	bne.n	4126 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    4122:	2300      	movs	r3, #0
    4124:	e01e      	b.n	4164 <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4126:	4b11      	ldr	r3, [pc, #68]	; (416c <udc_req_std_iface_set_setting+0x64>)
    4128:	889a      	ldrh	r2, [r3, #4]
    412a:	1dfb      	adds	r3, r7, #7
    412c:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    412e:	4b0f      	ldr	r3, [pc, #60]	; (416c <udc_req_std_iface_set_setting+0x64>)
    4130:	885a      	ldrh	r2, [r3, #2]
    4132:	1dbb      	adds	r3, r7, #6
    4134:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4136:	1dfb      	adds	r3, r7, #7
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	0018      	movs	r0, r3
    413c:	4b0d      	ldr	r3, [pc, #52]	; (4174 <udc_req_std_iface_set_setting+0x6c>)
    413e:	4798      	blx	r3
    4140:	0003      	movs	r3, r0
    4142:	001a      	movs	r2, r3
    4144:	2301      	movs	r3, #1
    4146:	4053      	eors	r3, r2
    4148:	b2db      	uxtb	r3, r3
    414a:	2b00      	cmp	r3, #0
    414c:	d001      	beq.n	4152 <udc_req_std_iface_set_setting+0x4a>
		return false;
    414e:	2300      	movs	r3, #0
    4150:	e008      	b.n	4164 <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4152:	1dbb      	adds	r3, r7, #6
    4154:	781a      	ldrb	r2, [r3, #0]
    4156:	1dfb      	adds	r3, r7, #7
    4158:	781b      	ldrb	r3, [r3, #0]
    415a:	0011      	movs	r1, r2
    415c:	0018      	movs	r0, r3
    415e:	4b06      	ldr	r3, [pc, #24]	; (4178 <udc_req_std_iface_set_setting+0x70>)
    4160:	4798      	blx	r3
    4162:	0003      	movs	r3, r0
}
    4164:	0018      	movs	r0, r3
    4166:	46bd      	mov	sp, r7
    4168:	b002      	add	sp, #8
    416a:	bd80      	pop	{r7, pc}
    416c:	200004e0 	.word	0x200004e0
    4170:	20000124 	.word	0x20000124
    4174:	0000396d 	.word	0x0000396d
    4178:	00003a1d 	.word	0x00003a1d

0000417c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    417c:	b580      	push	{r7, lr}
    417e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    4180:	4b47      	ldr	r3, [pc, #284]	; (42a0 <udc_reqstd+0x124>)
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	b25b      	sxtb	r3, r3
    4186:	2b00      	cmp	r3, #0
    4188:	da40      	bge.n	420c <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    418a:	4b45      	ldr	r3, [pc, #276]	; (42a0 <udc_reqstd+0x124>)
    418c:	88db      	ldrh	r3, [r3, #6]
    418e:	2b00      	cmp	r3, #0
    4190:	d101      	bne.n	4196 <udc_reqstd+0x1a>
			return false; // Error for USB host
    4192:	2300      	movs	r3, #0
    4194:	e081      	b.n	429a <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4196:	4b42      	ldr	r3, [pc, #264]	; (42a0 <udc_reqstd+0x124>)
    4198:	781b      	ldrb	r3, [r3, #0]
    419a:	001a      	movs	r2, r3
    419c:	231f      	movs	r3, #31
    419e:	4013      	ands	r3, r2
    41a0:	d114      	bne.n	41cc <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    41a2:	4b3f      	ldr	r3, [pc, #252]	; (42a0 <udc_reqstd+0x124>)
    41a4:	785b      	ldrb	r3, [r3, #1]
    41a6:	2b06      	cmp	r3, #6
    41a8:	d008      	beq.n	41bc <udc_reqstd+0x40>
    41aa:	2b08      	cmp	r3, #8
    41ac:	d00a      	beq.n	41c4 <udc_reqstd+0x48>
    41ae:	2b00      	cmp	r3, #0
    41b0:	d000      	beq.n	41b4 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    41b2:	e00b      	b.n	41cc <udc_reqstd+0x50>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    41b4:	4b3b      	ldr	r3, [pc, #236]	; (42a4 <udc_reqstd+0x128>)
    41b6:	4798      	blx	r3
    41b8:	0003      	movs	r3, r0
    41ba:	e06e      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    41bc:	4b3a      	ldr	r3, [pc, #232]	; (42a8 <udc_reqstd+0x12c>)
    41be:	4798      	blx	r3
    41c0:	0003      	movs	r3, r0
    41c2:	e06a      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    41c4:	4b39      	ldr	r3, [pc, #228]	; (42ac <udc_reqstd+0x130>)
    41c6:	4798      	blx	r3
    41c8:	0003      	movs	r3, r0
    41ca:	e066      	b.n	429a <udc_reqstd+0x11e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    41cc:	4b34      	ldr	r3, [pc, #208]	; (42a0 <udc_reqstd+0x124>)
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	001a      	movs	r2, r3
    41d2:	231f      	movs	r3, #31
    41d4:	4013      	ands	r3, r2
    41d6:	2b01      	cmp	r3, #1
    41d8:	d108      	bne.n	41ec <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    41da:	4b31      	ldr	r3, [pc, #196]	; (42a0 <udc_reqstd+0x124>)
    41dc:	785b      	ldrb	r3, [r3, #1]
    41de:	2b0a      	cmp	r3, #10
    41e0:	d000      	beq.n	41e4 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    41e2:	e003      	b.n	41ec <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    41e4:	4b32      	ldr	r3, [pc, #200]	; (42b0 <udc_reqstd+0x134>)
    41e6:	4798      	blx	r3
    41e8:	0003      	movs	r3, r0
    41ea:	e056      	b.n	429a <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    41ec:	4b2c      	ldr	r3, [pc, #176]	; (42a0 <udc_reqstd+0x124>)
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	001a      	movs	r2, r3
    41f2:	231f      	movs	r3, #31
    41f4:	4013      	ands	r3, r2
    41f6:	2b02      	cmp	r3, #2
    41f8:	d14e      	bne.n	4298 <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    41fa:	4b29      	ldr	r3, [pc, #164]	; (42a0 <udc_reqstd+0x124>)
    41fc:	785b      	ldrb	r3, [r3, #1]
    41fe:	2b00      	cmp	r3, #0
    4200:	d000      	beq.n	4204 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    4202:	e049      	b.n	4298 <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    4204:	4b2b      	ldr	r3, [pc, #172]	; (42b4 <udc_reqstd+0x138>)
    4206:	4798      	blx	r3
    4208:	0003      	movs	r3, r0
    420a:	e046      	b.n	429a <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    420c:	4b24      	ldr	r3, [pc, #144]	; (42a0 <udc_reqstd+0x124>)
    420e:	781b      	ldrb	r3, [r3, #0]
    4210:	001a      	movs	r2, r3
    4212:	231f      	movs	r3, #31
    4214:	4013      	ands	r3, r2
    4216:	d119      	bne.n	424c <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4218:	4b21      	ldr	r3, [pc, #132]	; (42a0 <udc_reqstd+0x124>)
    421a:	785b      	ldrb	r3, [r3, #1]
    421c:	2b09      	cmp	r3, #9
    421e:	d814      	bhi.n	424a <udc_reqstd+0xce>
    4220:	009a      	lsls	r2, r3, #2
    4222:	4b25      	ldr	r3, [pc, #148]	; (42b8 <udc_reqstd+0x13c>)
    4224:	18d3      	adds	r3, r2, r3
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    422a:	4b24      	ldr	r3, [pc, #144]	; (42bc <udc_reqstd+0x140>)
    422c:	4798      	blx	r3
    422e:	0003      	movs	r3, r0
    4230:	e033      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    4232:	4b23      	ldr	r3, [pc, #140]	; (42c0 <udc_reqstd+0x144>)
    4234:	4798      	blx	r3
    4236:	0003      	movs	r3, r0
    4238:	e02f      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    423a:	4b22      	ldr	r3, [pc, #136]	; (42c4 <udc_reqstd+0x148>)
    423c:	4798      	blx	r3
    423e:	0003      	movs	r3, r0
    4240:	e02b      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    4242:	4b21      	ldr	r3, [pc, #132]	; (42c8 <udc_reqstd+0x14c>)
    4244:	4798      	blx	r3
    4246:	0003      	movs	r3, r0
    4248:	e027      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    424a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    424c:	4b14      	ldr	r3, [pc, #80]	; (42a0 <udc_reqstd+0x124>)
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	001a      	movs	r2, r3
    4252:	231f      	movs	r3, #31
    4254:	4013      	ands	r3, r2
    4256:	2b01      	cmp	r3, #1
    4258:	d108      	bne.n	426c <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    425a:	4b11      	ldr	r3, [pc, #68]	; (42a0 <udc_reqstd+0x124>)
    425c:	785b      	ldrb	r3, [r3, #1]
    425e:	2b0b      	cmp	r3, #11
    4260:	d000      	beq.n	4264 <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    4262:	e003      	b.n	426c <udc_reqstd+0xf0>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    4264:	4b19      	ldr	r3, [pc, #100]	; (42cc <udc_reqstd+0x150>)
    4266:	4798      	blx	r3
    4268:	0003      	movs	r3, r0
    426a:	e016      	b.n	429a <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    426c:	4b0c      	ldr	r3, [pc, #48]	; (42a0 <udc_reqstd+0x124>)
    426e:	781b      	ldrb	r3, [r3, #0]
    4270:	001a      	movs	r2, r3
    4272:	231f      	movs	r3, #31
    4274:	4013      	ands	r3, r2
    4276:	2b02      	cmp	r3, #2
    4278:	d10e      	bne.n	4298 <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    427a:	4b09      	ldr	r3, [pc, #36]	; (42a0 <udc_reqstd+0x124>)
    427c:	785b      	ldrb	r3, [r3, #1]
    427e:	2b01      	cmp	r3, #1
    4280:	d002      	beq.n	4288 <udc_reqstd+0x10c>
    4282:	2b03      	cmp	r3, #3
    4284:	d004      	beq.n	4290 <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    4286:	e007      	b.n	4298 <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    4288:	4b11      	ldr	r3, [pc, #68]	; (42d0 <udc_reqstd+0x154>)
    428a:	4798      	blx	r3
    428c:	0003      	movs	r3, r0
    428e:	e004      	b.n	429a <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    4290:	4b10      	ldr	r3, [pc, #64]	; (42d4 <udc_reqstd+0x158>)
    4292:	4798      	blx	r3
    4294:	0003      	movs	r3, r0
    4296:	e000      	b.n	429a <udc_reqstd+0x11e>
				break;
			}
		}
#endif
	}
	return false;
    4298:	2300      	movs	r3, #0
}
    429a:	0018      	movs	r0, r3
    429c:	46bd      	mov	sp, r7
    429e:	bd80      	pop	{r7, pc}
    42a0:	200004e0 	.word	0x200004e0
    42a4:	00003bc1 	.word	0x00003bc1
    42a8:	00003e69 	.word	0x00003e69
    42ac:	00003f65 	.word	0x00003f65
    42b0:	00004065 	.word	0x00004065
    42b4:	00003bf1 	.word	0x00003bf1
    42b8:	00009dfc 	.word	0x00009dfc
    42bc:	00003d65 	.word	0x00003d65
    42c0:	00003c39 	.word	0x00003c39
    42c4:	00003cb5 	.word	0x00003cb5
    42c8:	00003f95 	.word	0x00003f95
    42cc:	00004109 	.word	0x00004109
    42d0:	00003c7d 	.word	0x00003c7d
    42d4:	00003cf9 	.word	0x00003cf9

000042d8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    42d8:	b580      	push	{r7, lr}
    42da:	b082      	sub	sp, #8
    42dc:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    42de:	4b24      	ldr	r3, [pc, #144]	; (4370 <udc_req_iface+0x98>)
    42e0:	781b      	ldrb	r3, [r3, #0]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d101      	bne.n	42ea <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    42e6:	2300      	movs	r3, #0
    42e8:	e03d      	b.n	4366 <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    42ea:	4b22      	ldr	r3, [pc, #136]	; (4374 <udc_req_iface+0x9c>)
    42ec:	889a      	ldrh	r2, [r3, #4]
    42ee:	1dfb      	adds	r3, r7, #7
    42f0:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    42f2:	4b21      	ldr	r3, [pc, #132]	; (4378 <udc_req_iface+0xa0>)
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	791b      	ldrb	r3, [r3, #4]
    42fa:	1dfa      	adds	r2, r7, #7
    42fc:	7812      	ldrb	r2, [r2, #0]
    42fe:	429a      	cmp	r2, r3
    4300:	d301      	bcc.n	4306 <udc_req_iface+0x2e>
		return false;
    4302:	2300      	movs	r3, #0
    4304:	e02f      	b.n	4366 <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4306:	1dfb      	adds	r3, r7, #7
    4308:	781b      	ldrb	r3, [r3, #0]
    430a:	2100      	movs	r1, #0
    430c:	0018      	movs	r0, r3
    430e:	4b1b      	ldr	r3, [pc, #108]	; (437c <udc_req_iface+0xa4>)
    4310:	4798      	blx	r3
    4312:	0003      	movs	r3, r0
    4314:	001a      	movs	r2, r3
    4316:	2301      	movs	r3, #1
    4318:	4053      	eors	r3, r2
    431a:	b2db      	uxtb	r3, r3
    431c:	2b00      	cmp	r3, #0
    431e:	d001      	beq.n	4324 <udc_req_iface+0x4c>
		return false;
    4320:	2300      	movs	r3, #0
    4322:	e020      	b.n	4366 <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4324:	4b14      	ldr	r3, [pc, #80]	; (4378 <udc_req_iface+0xa0>)
    4326:	681b      	ldr	r3, [r3, #0]
    4328:	685a      	ldr	r2, [r3, #4]
    432a:	1dfb      	adds	r3, r7, #7
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	009b      	lsls	r3, r3, #2
    4330:	18d3      	adds	r3, r2, r3
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4336:	683b      	ldr	r3, [r7, #0]
    4338:	68db      	ldr	r3, [r3, #12]
    433a:	4798      	blx	r3
    433c:	0003      	movs	r3, r0
    433e:	001a      	movs	r2, r3
    4340:	1dfb      	adds	r3, r7, #7
    4342:	781b      	ldrb	r3, [r3, #0]
    4344:	0011      	movs	r1, r2
    4346:	0018      	movs	r0, r3
    4348:	4b0c      	ldr	r3, [pc, #48]	; (437c <udc_req_iface+0xa4>)
    434a:	4798      	blx	r3
    434c:	0003      	movs	r3, r0
    434e:	001a      	movs	r2, r3
    4350:	2301      	movs	r3, #1
    4352:	4053      	eors	r3, r2
    4354:	b2db      	uxtb	r3, r3
    4356:	2b00      	cmp	r3, #0
    4358:	d001      	beq.n	435e <udc_req_iface+0x86>
		return false;
    435a:	2300      	movs	r3, #0
    435c:	e003      	b.n	4366 <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    435e:	683b      	ldr	r3, [r7, #0]
    4360:	689b      	ldr	r3, [r3, #8]
    4362:	4798      	blx	r3
    4364:	0003      	movs	r3, r0
}
    4366:	0018      	movs	r0, r3
    4368:	46bd      	mov	sp, r7
    436a:	b002      	add	sp, #8
    436c:	bd80      	pop	{r7, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	20000124 	.word	0x20000124
    4374:	200004e0 	.word	0x200004e0
    4378:	20000128 	.word	0x20000128
    437c:	000038c9 	.word	0x000038c9

00004380 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    4380:	b580      	push	{r7, lr}
    4382:	b082      	sub	sp, #8
    4384:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4386:	4b22      	ldr	r3, [pc, #136]	; (4410 <udc_req_ep+0x90>)
    4388:	781b      	ldrb	r3, [r3, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d101      	bne.n	4392 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    438e:	2300      	movs	r3, #0
    4390:	e039      	b.n	4406 <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4392:	4b20      	ldr	r3, [pc, #128]	; (4414 <udc_req_ep+0x94>)
    4394:	889a      	ldrh	r2, [r3, #4]
    4396:	1dfb      	adds	r3, r7, #7
    4398:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    439a:	1dfb      	adds	r3, r7, #7
    439c:	2200      	movs	r2, #0
    439e:	701a      	strb	r2, [r3, #0]
    43a0:	e028      	b.n	43f4 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    43a2:	4b1d      	ldr	r3, [pc, #116]	; (4418 <udc_req_ep+0x98>)
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	685a      	ldr	r2, [r3, #4]
    43a8:	1dfb      	adds	r3, r7, #7
    43aa:	781b      	ldrb	r3, [r3, #0]
    43ac:	009b      	lsls	r3, r3, #2
    43ae:	18d3      	adds	r3, r2, r3
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    43b4:	683b      	ldr	r3, [r7, #0]
    43b6:	68db      	ldr	r3, [r3, #12]
    43b8:	4798      	blx	r3
    43ba:	0003      	movs	r3, r0
    43bc:	001a      	movs	r2, r3
    43be:	1dfb      	adds	r3, r7, #7
    43c0:	781b      	ldrb	r3, [r3, #0]
    43c2:	0011      	movs	r1, r2
    43c4:	0018      	movs	r0, r3
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <udc_req_ep+0x9c>)
    43c8:	4798      	blx	r3
    43ca:	0003      	movs	r3, r0
    43cc:	001a      	movs	r2, r3
    43ce:	2301      	movs	r3, #1
    43d0:	4053      	eors	r3, r2
    43d2:	b2db      	uxtb	r3, r3
    43d4:	2b00      	cmp	r3, #0
    43d6:	d001      	beq.n	43dc <udc_req_ep+0x5c>
			return false;
    43d8:	2300      	movs	r3, #0
    43da:	e014      	b.n	4406 <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    43dc:	683b      	ldr	r3, [r7, #0]
    43de:	689b      	ldr	r3, [r3, #8]
    43e0:	4798      	blx	r3
    43e2:	1e03      	subs	r3, r0, #0
    43e4:	d001      	beq.n	43ea <udc_req_ep+0x6a>
			return true;
    43e6:	2301      	movs	r3, #1
    43e8:	e00d      	b.n	4406 <udc_req_ep+0x86>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    43ea:	1dfb      	adds	r3, r7, #7
    43ec:	781a      	ldrb	r2, [r3, #0]
    43ee:	1dfb      	adds	r3, r7, #7
    43f0:	3201      	adds	r2, #1
    43f2:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    43f4:	4b08      	ldr	r3, [pc, #32]	; (4418 <udc_req_ep+0x98>)
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	791b      	ldrb	r3, [r3, #4]
    43fc:	1dfa      	adds	r2, r7, #7
    43fe:	7812      	ldrb	r2, [r2, #0]
    4400:	429a      	cmp	r2, r3
    4402:	d3ce      	bcc.n	43a2 <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4404:	2300      	movs	r3, #0
}
    4406:	0018      	movs	r0, r3
    4408:	46bd      	mov	sp, r7
    440a:	b002      	add	sp, #8
    440c:	bd80      	pop	{r7, pc}
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	20000124 	.word	0x20000124
    4414:	200004e0 	.word	0x200004e0
    4418:	20000128 	.word	0x20000128
    441c:	000038c9 	.word	0x000038c9

00004420 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4420:	b580      	push	{r7, lr}
    4422:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4424:	4b1e      	ldr	r3, [pc, #120]	; (44a0 <udc_process_setup+0x80>)
    4426:	2200      	movs	r2, #0
    4428:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    442a:	4b1d      	ldr	r3, [pc, #116]	; (44a0 <udc_process_setup+0x80>)
    442c:	2200      	movs	r2, #0
    442e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    4430:	4b1b      	ldr	r3, [pc, #108]	; (44a0 <udc_process_setup+0x80>)
    4432:	2200      	movs	r2, #0
    4434:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    4436:	4b1a      	ldr	r3, [pc, #104]	; (44a0 <udc_process_setup+0x80>)
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	b25b      	sxtb	r3, r3
    443c:	2b00      	cmp	r3, #0
    443e:	da05      	bge.n	444c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4440:	4b17      	ldr	r3, [pc, #92]	; (44a0 <udc_process_setup+0x80>)
    4442:	88db      	ldrh	r3, [r3, #6]
    4444:	2b00      	cmp	r3, #0
    4446:	d101      	bne.n	444c <udc_process_setup+0x2c>
			return false; // Error from USB host
    4448:	2300      	movs	r3, #0
    444a:	e026      	b.n	449a <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    444c:	4b14      	ldr	r3, [pc, #80]	; (44a0 <udc_process_setup+0x80>)
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	001a      	movs	r2, r3
    4452:	2360      	movs	r3, #96	; 0x60
    4454:	4013      	ands	r3, r2
    4456:	d105      	bne.n	4464 <udc_process_setup+0x44>
		if (udc_reqstd()) {
    4458:	4b12      	ldr	r3, [pc, #72]	; (44a4 <udc_process_setup+0x84>)
    445a:	4798      	blx	r3
    445c:	1e03      	subs	r3, r0, #0
    445e:	d001      	beq.n	4464 <udc_process_setup+0x44>
			return true;
    4460:	2301      	movs	r3, #1
    4462:	e01a      	b.n	449a <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4464:	4b0e      	ldr	r3, [pc, #56]	; (44a0 <udc_process_setup+0x80>)
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	001a      	movs	r2, r3
    446a:	231f      	movs	r3, #31
    446c:	4013      	ands	r3, r2
    446e:	2b01      	cmp	r3, #1
    4470:	d105      	bne.n	447e <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    4472:	4b0d      	ldr	r3, [pc, #52]	; (44a8 <udc_process_setup+0x88>)
    4474:	4798      	blx	r3
    4476:	1e03      	subs	r3, r0, #0
    4478:	d001      	beq.n	447e <udc_process_setup+0x5e>
			return true;
    447a:	2301      	movs	r3, #1
    447c:	e00d      	b.n	449a <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    447e:	4b08      	ldr	r3, [pc, #32]	; (44a0 <udc_process_setup+0x80>)
    4480:	781b      	ldrb	r3, [r3, #0]
    4482:	001a      	movs	r2, r3
    4484:	231f      	movs	r3, #31
    4486:	4013      	ands	r3, r2
    4488:	2b02      	cmp	r3, #2
    448a:	d105      	bne.n	4498 <udc_process_setup+0x78>
		if (udc_req_ep()) {
    448c:	4b07      	ldr	r3, [pc, #28]	; (44ac <udc_process_setup+0x8c>)
    448e:	4798      	blx	r3
    4490:	1e03      	subs	r3, r0, #0
    4492:	d001      	beq.n	4498 <udc_process_setup+0x78>
			return true;
    4494:	2301      	movs	r3, #1
    4496:	e000      	b.n	449a <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4498:	2300      	movs	r3, #0
#endif
}
    449a:	0018      	movs	r0, r3
    449c:	46bd      	mov	sp, r7
    449e:	bd80      	pop	{r7, pc}
    44a0:	200004e0 	.word	0x200004e0
    44a4:	0000417d 	.word	0x0000417d
    44a8:	000042d9 	.word	0x000042d9
    44ac:	00004381 	.word	0x00004381

000044b0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    44b6:	4b10      	ldr	r3, [pc, #64]	; (44f8 <cpu_irq_enter_critical+0x48>)
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	2b00      	cmp	r3, #0
    44bc:	d112      	bne.n	44e4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    44be:	f3ef 8310 	mrs	r3, PRIMASK
    44c2:	607b      	str	r3, [r7, #4]
  return(result);
    44c4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    44c6:	2b00      	cmp	r3, #0
    44c8:	d109      	bne.n	44de <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    44ca:	b672      	cpsid	i
    44cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    44d0:	4b0a      	ldr	r3, [pc, #40]	; (44fc <cpu_irq_enter_critical+0x4c>)
    44d2:	2200      	movs	r2, #0
    44d4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    44d6:	4b0a      	ldr	r3, [pc, #40]	; (4500 <cpu_irq_enter_critical+0x50>)
    44d8:	2201      	movs	r2, #1
    44da:	701a      	strb	r2, [r3, #0]
    44dc:	e002      	b.n	44e4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    44de:	4b08      	ldr	r3, [pc, #32]	; (4500 <cpu_irq_enter_critical+0x50>)
    44e0:	2200      	movs	r2, #0
    44e2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    44e4:	4b04      	ldr	r3, [pc, #16]	; (44f8 <cpu_irq_enter_critical+0x48>)
    44e6:	681b      	ldr	r3, [r3, #0]
    44e8:	1c5a      	adds	r2, r3, #1
    44ea:	4b03      	ldr	r3, [pc, #12]	; (44f8 <cpu_irq_enter_critical+0x48>)
    44ec:	601a      	str	r2, [r3, #0]
}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	46bd      	mov	sp, r7
    44f2:	b002      	add	sp, #8
    44f4:	bd80      	pop	{r7, pc}
    44f6:	46c0      	nop			; (mov r8, r8)
    44f8:	20000134 	.word	0x20000134
    44fc:	200000d8 	.word	0x200000d8
    4500:	20000138 	.word	0x20000138

00004504 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4504:	b580      	push	{r7, lr}
    4506:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4508:	4b0b      	ldr	r3, [pc, #44]	; (4538 <cpu_irq_leave_critical+0x34>)
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	1e5a      	subs	r2, r3, #1
    450e:	4b0a      	ldr	r3, [pc, #40]	; (4538 <cpu_irq_leave_critical+0x34>)
    4510:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4512:	4b09      	ldr	r3, [pc, #36]	; (4538 <cpu_irq_leave_critical+0x34>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	2b00      	cmp	r3, #0
    4518:	d10a      	bne.n	4530 <cpu_irq_leave_critical+0x2c>
    451a:	4b08      	ldr	r3, [pc, #32]	; (453c <cpu_irq_leave_critical+0x38>)
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	b2db      	uxtb	r3, r3
    4520:	2b00      	cmp	r3, #0
    4522:	d005      	beq.n	4530 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4524:	4b06      	ldr	r3, [pc, #24]	; (4540 <cpu_irq_leave_critical+0x3c>)
    4526:	2201      	movs	r2, #1
    4528:	701a      	strb	r2, [r3, #0]
    452a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    452e:	b662      	cpsie	i
	}
}
    4530:	46c0      	nop			; (mov r8, r8)
    4532:	46bd      	mov	sp, r7
    4534:	bd80      	pop	{r7, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	20000134 	.word	0x20000134
    453c:	20000138 	.word	0x20000138
    4540:	200000d8 	.word	0x200000d8

00004544 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4544:	b580      	push	{r7, lr}
    4546:	b084      	sub	sp, #16
    4548:	af00      	add	r7, sp, #0
    454a:	0002      	movs	r2, r0
    454c:	1dfb      	adds	r3, r7, #7
    454e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4550:	230f      	movs	r3, #15
    4552:	18fb      	adds	r3, r7, r3
    4554:	1dfa      	adds	r2, r7, #7
    4556:	7812      	ldrb	r2, [r2, #0]
    4558:	09d2      	lsrs	r2, r2, #7
    455a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    455c:	230e      	movs	r3, #14
    455e:	18fb      	adds	r3, r7, r3
    4560:	1dfa      	adds	r2, r7, #7
    4562:	7812      	ldrb	r2, [r2, #0]
    4564:	0952      	lsrs	r2, r2, #5
    4566:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4568:	4b0d      	ldr	r3, [pc, #52]	; (45a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    456a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    456c:	230f      	movs	r3, #15
    456e:	18fb      	adds	r3, r7, r3
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d10f      	bne.n	4596 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4576:	230f      	movs	r3, #15
    4578:	18fb      	adds	r3, r7, r3
    457a:	781b      	ldrb	r3, [r3, #0]
    457c:	009b      	lsls	r3, r3, #2
    457e:	2210      	movs	r2, #16
    4580:	4694      	mov	ip, r2
    4582:	44bc      	add	ip, r7
    4584:	4463      	add	r3, ip
    4586:	3b08      	subs	r3, #8
    4588:	681a      	ldr	r2, [r3, #0]
    458a:	230e      	movs	r3, #14
    458c:	18fb      	adds	r3, r7, r3
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	01db      	lsls	r3, r3, #7
    4592:	18d3      	adds	r3, r2, r3
    4594:	e000      	b.n	4598 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4596:	2300      	movs	r3, #0
	}
}
    4598:	0018      	movs	r0, r3
    459a:	46bd      	mov	sp, r7
    459c:	b004      	add	sp, #16
    459e:	bd80      	pop	{r7, pc}
    45a0:	41004400 	.word	0x41004400

000045a4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b082      	sub	sp, #8
    45a8:	af00      	add	r7, sp, #0
    45aa:	0002      	movs	r2, r0
    45ac:	1dfb      	adds	r3, r7, #7
    45ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    45b0:	1dfb      	adds	r3, r7, #7
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	0018      	movs	r0, r3
    45b6:	4b03      	ldr	r3, [pc, #12]	; (45c4 <port_get_group_from_gpio_pin+0x20>)
    45b8:	4798      	blx	r3
    45ba:	0003      	movs	r3, r0
}
    45bc:	0018      	movs	r0, r3
    45be:	46bd      	mov	sp, r7
    45c0:	b002      	add	sp, #8
    45c2:	bd80      	pop	{r7, pc}
    45c4:	00004545 	.word	0x00004545

000045c8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	b082      	sub	sp, #8
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	2200      	movs	r2, #0
    45d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	2201      	movs	r2, #1
    45da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	2200      	movs	r2, #0
    45e0:	709a      	strb	r2, [r3, #2]
}
    45e2:	46c0      	nop			; (mov r8, r8)
    45e4:	46bd      	mov	sp, r7
    45e6:	b002      	add	sp, #8
    45e8:	bd80      	pop	{r7, pc}
    45ea:	46c0      	nop			; (mov r8, r8)

000045ec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b084      	sub	sp, #16
    45f0:	af00      	add	r7, sp, #0
    45f2:	0002      	movs	r2, r0
    45f4:	1dfb      	adds	r3, r7, #7
    45f6:	701a      	strb	r2, [r3, #0]
    45f8:	1dbb      	adds	r3, r7, #6
    45fa:	1c0a      	adds	r2, r1, #0
    45fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    45fe:	1dfb      	adds	r3, r7, #7
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	0018      	movs	r0, r3
    4604:	4b0d      	ldr	r3, [pc, #52]	; (463c <port_pin_set_output_level+0x50>)
    4606:	4798      	blx	r3
    4608:	0003      	movs	r3, r0
    460a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    460c:	1dfb      	adds	r3, r7, #7
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	221f      	movs	r2, #31
    4612:	4013      	ands	r3, r2
    4614:	2201      	movs	r2, #1
    4616:	409a      	lsls	r2, r3
    4618:	0013      	movs	r3, r2
    461a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    461c:	1dbb      	adds	r3, r7, #6
    461e:	781b      	ldrb	r3, [r3, #0]
    4620:	2b00      	cmp	r3, #0
    4622:	d003      	beq.n	462c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	68ba      	ldr	r2, [r7, #8]
    4628:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    462a:	e002      	b.n	4632 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	68ba      	ldr	r2, [r7, #8]
    4630:	615a      	str	r2, [r3, #20]
	}
}
    4632:	46c0      	nop			; (mov r8, r8)
    4634:	46bd      	mov	sp, r7
    4636:	b004      	add	sp, #16
    4638:	bd80      	pop	{r7, pc}
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	000045a5 	.word	0x000045a5

00004640 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4640:	b580      	push	{r7, lr}
    4642:	b082      	sub	sp, #8
    4644:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4646:	1d3b      	adds	r3, r7, #4
    4648:	0018      	movs	r0, r3
    464a:	4b0e      	ldr	r3, [pc, #56]	; (4684 <system_board_init+0x44>)
    464c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    464e:	1d3b      	adds	r3, r7, #4
    4650:	2201      	movs	r2, #1
    4652:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4654:	1d3b      	adds	r3, r7, #4
    4656:	0019      	movs	r1, r3
    4658:	2011      	movs	r0, #17
    465a:	4b0b      	ldr	r3, [pc, #44]	; (4688 <system_board_init+0x48>)
    465c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    465e:	2101      	movs	r1, #1
    4660:	2011      	movs	r0, #17
    4662:	4b0a      	ldr	r3, [pc, #40]	; (468c <system_board_init+0x4c>)
    4664:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4666:	1d3b      	adds	r3, r7, #4
    4668:	2200      	movs	r2, #0
    466a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    466c:	1d3b      	adds	r3, r7, #4
    466e:	2201      	movs	r2, #1
    4670:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4672:	1d3b      	adds	r3, r7, #4
    4674:	0019      	movs	r1, r3
    4676:	200f      	movs	r0, #15
    4678:	4b03      	ldr	r3, [pc, #12]	; (4688 <system_board_init+0x48>)
    467a:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    467c:	46c0      	nop			; (mov r8, r8)
    467e:	46bd      	mov	sp, r7
    4680:	b002      	add	sp, #8
    4682:	bd80      	pop	{r7, pc}
    4684:	000045c9 	.word	0x000045c9
    4688:	00004cb5 	.word	0x00004cb5
    468c:	000045ed 	.word	0x000045ed

00004690 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4690:	b580      	push	{r7, lr}
    4692:	b084      	sub	sp, #16
    4694:	af00      	add	r7, sp, #0
    4696:	0002      	movs	r2, r0
    4698:	1dfb      	adds	r3, r7, #7
    469a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    469c:	230f      	movs	r3, #15
    469e:	18fb      	adds	r3, r7, r3
    46a0:	1dfa      	adds	r2, r7, #7
    46a2:	7812      	ldrb	r2, [r2, #0]
    46a4:	0952      	lsrs	r2, r2, #5
    46a6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    46a8:	230f      	movs	r3, #15
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	781b      	ldrb	r3, [r3, #0]
    46ae:	2b00      	cmp	r3, #0
    46b0:	d10c      	bne.n	46cc <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    46b2:	4b09      	ldr	r3, [pc, #36]	; (46d8 <_extint_get_eic_from_channel+0x48>)
    46b4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    46b6:	230f      	movs	r3, #15
    46b8:	18fb      	adds	r3, r7, r3
    46ba:	781b      	ldrb	r3, [r3, #0]
    46bc:	009b      	lsls	r3, r3, #2
    46be:	2210      	movs	r2, #16
    46c0:	4694      	mov	ip, r2
    46c2:	44bc      	add	ip, r7
    46c4:	4463      	add	r3, ip
    46c6:	3b08      	subs	r3, #8
    46c8:	681b      	ldr	r3, [r3, #0]
    46ca:	e000      	b.n	46ce <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    46cc:	2300      	movs	r3, #0
	}
}
    46ce:	0018      	movs	r0, r3
    46d0:	46bd      	mov	sp, r7
    46d2:	b004      	add	sp, #16
    46d4:	bd80      	pop	{r7, pc}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	40001800 	.word	0x40001800

000046dc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b084      	sub	sp, #16
    46e0:	af00      	add	r7, sp, #0
    46e2:	0002      	movs	r2, r0
    46e4:	1dfb      	adds	r3, r7, #7
    46e6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    46e8:	1dfb      	adds	r3, r7, #7
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	0018      	movs	r0, r3
    46ee:	4b0b      	ldr	r3, [pc, #44]	; (471c <extint_chan_is_detected+0x40>)
    46f0:	4798      	blx	r3
    46f2:	0003      	movs	r3, r0
    46f4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    46f6:	1dfb      	adds	r3, r7, #7
    46f8:	781b      	ldrb	r3, [r3, #0]
    46fa:	221f      	movs	r2, #31
    46fc:	4013      	ands	r3, r2
    46fe:	2201      	movs	r2, #1
    4700:	409a      	lsls	r2, r3
    4702:	0013      	movs	r3, r2
    4704:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	691b      	ldr	r3, [r3, #16]
    470a:	68ba      	ldr	r2, [r7, #8]
    470c:	4013      	ands	r3, r2
    470e:	1e5a      	subs	r2, r3, #1
    4710:	4193      	sbcs	r3, r2
    4712:	b2db      	uxtb	r3, r3
}
    4714:	0018      	movs	r0, r3
    4716:	46bd      	mov	sp, r7
    4718:	b004      	add	sp, #16
    471a:	bd80      	pop	{r7, pc}
    471c:	00004691 	.word	0x00004691

00004720 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4720:	b580      	push	{r7, lr}
    4722:	b084      	sub	sp, #16
    4724:	af00      	add	r7, sp, #0
    4726:	0002      	movs	r2, r0
    4728:	1dfb      	adds	r3, r7, #7
    472a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    472c:	1dfb      	adds	r3, r7, #7
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	0018      	movs	r0, r3
    4732:	4b09      	ldr	r3, [pc, #36]	; (4758 <extint_chan_clear_detected+0x38>)
    4734:	4798      	blx	r3
    4736:	0003      	movs	r3, r0
    4738:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    473a:	1dfb      	adds	r3, r7, #7
    473c:	781b      	ldrb	r3, [r3, #0]
    473e:	221f      	movs	r2, #31
    4740:	4013      	ands	r3, r2
    4742:	2201      	movs	r2, #1
    4744:	409a      	lsls	r2, r3
    4746:	0013      	movs	r3, r2
    4748:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	68ba      	ldr	r2, [r7, #8]
    474e:	611a      	str	r2, [r3, #16]
}
    4750:	46c0      	nop			; (mov r8, r8)
    4752:	46bd      	mov	sp, r7
    4754:	b004      	add	sp, #16
    4756:	bd80      	pop	{r7, pc}
    4758:	00004691 	.word	0x00004691

0000475c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    475c:	b580      	push	{r7, lr}
    475e:	b082      	sub	sp, #8
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
    4764:	0008      	movs	r0, r1
    4766:	0011      	movs	r1, r2
    4768:	1cfb      	adds	r3, r7, #3
    476a:	1c02      	adds	r2, r0, #0
    476c:	701a      	strb	r2, [r3, #0]
    476e:	1cbb      	adds	r3, r7, #2
    4770:	1c0a      	adds	r2, r1, #0
    4772:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4774:	1cbb      	adds	r3, r7, #2
    4776:	781b      	ldrb	r3, [r3, #0]
    4778:	2b00      	cmp	r3, #0
    477a:	d001      	beq.n	4780 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    477c:	2317      	movs	r3, #23
    477e:	e019      	b.n	47b4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4780:	1cfb      	adds	r3, r7, #3
    4782:	781a      	ldrb	r2, [r3, #0]
    4784:	4b0d      	ldr	r3, [pc, #52]	; (47bc <extint_register_callback+0x60>)
    4786:	0092      	lsls	r2, r2, #2
    4788:	58d3      	ldr	r3, [r2, r3]
    478a:	2b00      	cmp	r3, #0
    478c:	d107      	bne.n	479e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    478e:	1cfb      	adds	r3, r7, #3
    4790:	781a      	ldrb	r2, [r3, #0]
    4792:	4b0a      	ldr	r3, [pc, #40]	; (47bc <extint_register_callback+0x60>)
    4794:	0092      	lsls	r2, r2, #2
    4796:	6879      	ldr	r1, [r7, #4]
    4798:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    479a:	2300      	movs	r3, #0
    479c:	e00a      	b.n	47b4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    479e:	1cfb      	adds	r3, r7, #3
    47a0:	781a      	ldrb	r2, [r3, #0]
    47a2:	4b06      	ldr	r3, [pc, #24]	; (47bc <extint_register_callback+0x60>)
    47a4:	0092      	lsls	r2, r2, #2
    47a6:	58d2      	ldr	r2, [r2, r3]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	429a      	cmp	r2, r3
    47ac:	d101      	bne.n	47b2 <extint_register_callback+0x56>
		return STATUS_OK;
    47ae:	2300      	movs	r3, #0
    47b0:	e000      	b.n	47b4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    47b2:	231d      	movs	r3, #29
}
    47b4:	0018      	movs	r0, r3
    47b6:	46bd      	mov	sp, r7
    47b8:	b002      	add	sp, #8
    47ba:	bd80      	pop	{r7, pc}
    47bc:	200002f8 	.word	0x200002f8

000047c0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b084      	sub	sp, #16
    47c4:	af00      	add	r7, sp, #0
    47c6:	0002      	movs	r2, r0
    47c8:	1dfb      	adds	r3, r7, #7
    47ca:	701a      	strb	r2, [r3, #0]
    47cc:	1dbb      	adds	r3, r7, #6
    47ce:	1c0a      	adds	r2, r1, #0
    47d0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    47d2:	1dbb      	adds	r3, r7, #6
    47d4:	781b      	ldrb	r3, [r3, #0]
    47d6:	2b00      	cmp	r3, #0
    47d8:	d10e      	bne.n	47f8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    47da:	1dfb      	adds	r3, r7, #7
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	0018      	movs	r0, r3
    47e0:	4b08      	ldr	r3, [pc, #32]	; (4804 <extint_chan_enable_callback+0x44>)
    47e2:	4798      	blx	r3
    47e4:	0003      	movs	r3, r0
    47e6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    47e8:	1dfb      	adds	r3, r7, #7
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	2201      	movs	r2, #1
    47ee:	409a      	lsls	r2, r3
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    47f4:	2300      	movs	r3, #0
    47f6:	e000      	b.n	47fa <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47f8:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    47fa:	0018      	movs	r0, r3
    47fc:	46bd      	mov	sp, r7
    47fe:	b004      	add	sp, #16
    4800:	bd80      	pop	{r7, pc}
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	00004691 	.word	0x00004691

00004808 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4808:	b580      	push	{r7, lr}
    480a:	b084      	sub	sp, #16
    480c:	af00      	add	r7, sp, #0
    480e:	0002      	movs	r2, r0
    4810:	1dfb      	adds	r3, r7, #7
    4812:	701a      	strb	r2, [r3, #0]
    4814:	1dbb      	adds	r3, r7, #6
    4816:	1c0a      	adds	r2, r1, #0
    4818:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    481a:	1dbb      	adds	r3, r7, #6
    481c:	781b      	ldrb	r3, [r3, #0]
    481e:	2b00      	cmp	r3, #0
    4820:	d10e      	bne.n	4840 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4822:	1dfb      	adds	r3, r7, #7
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	0018      	movs	r0, r3
    4828:	4b08      	ldr	r3, [pc, #32]	; (484c <extint_chan_disable_callback+0x44>)
    482a:	4798      	blx	r3
    482c:	0003      	movs	r3, r0
    482e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4830:	1dfb      	adds	r3, r7, #7
    4832:	781b      	ldrb	r3, [r3, #0]
    4834:	2201      	movs	r2, #1
    4836:	409a      	lsls	r2, r3
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    483c:	2300      	movs	r3, #0
    483e:	e000      	b.n	4842 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4840:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4842:	0018      	movs	r0, r3
    4844:	46bd      	mov	sp, r7
    4846:	b004      	add	sp, #16
    4848:	bd80      	pop	{r7, pc}
    484a:	46c0      	nop			; (mov r8, r8)
    484c:	00004691 	.word	0x00004691

00004850 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4850:	b580      	push	{r7, lr}
    4852:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4854:	4b15      	ldr	r3, [pc, #84]	; (48ac <EIC_Handler+0x5c>)
    4856:	2200      	movs	r2, #0
    4858:	701a      	strb	r2, [r3, #0]
    485a:	e020      	b.n	489e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    485c:	4b13      	ldr	r3, [pc, #76]	; (48ac <EIC_Handler+0x5c>)
    485e:	781b      	ldrb	r3, [r3, #0]
    4860:	0018      	movs	r0, r3
    4862:	4b13      	ldr	r3, [pc, #76]	; (48b0 <EIC_Handler+0x60>)
    4864:	4798      	blx	r3
    4866:	1e03      	subs	r3, r0, #0
    4868:	d013      	beq.n	4892 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    486a:	4b10      	ldr	r3, [pc, #64]	; (48ac <EIC_Handler+0x5c>)
    486c:	781b      	ldrb	r3, [r3, #0]
    486e:	0018      	movs	r0, r3
    4870:	4b10      	ldr	r3, [pc, #64]	; (48b4 <EIC_Handler+0x64>)
    4872:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4874:	4b0d      	ldr	r3, [pc, #52]	; (48ac <EIC_Handler+0x5c>)
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	001a      	movs	r2, r3
    487a:	4b0f      	ldr	r3, [pc, #60]	; (48b8 <EIC_Handler+0x68>)
    487c:	0092      	lsls	r2, r2, #2
    487e:	58d3      	ldr	r3, [r2, r3]
    4880:	2b00      	cmp	r3, #0
    4882:	d006      	beq.n	4892 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4884:	4b09      	ldr	r3, [pc, #36]	; (48ac <EIC_Handler+0x5c>)
    4886:	781b      	ldrb	r3, [r3, #0]
    4888:	001a      	movs	r2, r3
    488a:	4b0b      	ldr	r3, [pc, #44]	; (48b8 <EIC_Handler+0x68>)
    488c:	0092      	lsls	r2, r2, #2
    488e:	58d3      	ldr	r3, [r2, r3]
    4890:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4892:	4b06      	ldr	r3, [pc, #24]	; (48ac <EIC_Handler+0x5c>)
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	3301      	adds	r3, #1
    4898:	b2da      	uxtb	r2, r3
    489a:	4b04      	ldr	r3, [pc, #16]	; (48ac <EIC_Handler+0x5c>)
    489c:	701a      	strb	r2, [r3, #0]
    489e:	4b03      	ldr	r3, [pc, #12]	; (48ac <EIC_Handler+0x5c>)
    48a0:	781b      	ldrb	r3, [r3, #0]
    48a2:	2b0f      	cmp	r3, #15
    48a4:	d9da      	bls.n	485c <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	46bd      	mov	sp, r7
    48aa:	bd80      	pop	{r7, pc}
    48ac:	200002f5 	.word	0x200002f5
    48b0:	000046dd 	.word	0x000046dd
    48b4:	00004721 	.word	0x00004721
    48b8:	200002f8 	.word	0x200002f8

000048bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	2200      	movs	r2, #0
    48c8:	701a      	strb	r2, [r3, #0]
}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	46bd      	mov	sp, r7
    48ce:	b002      	add	sp, #8
    48d0:	bd80      	pop	{r7, pc}
    48d2:	46c0      	nop			; (mov r8, r8)

000048d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	af00      	add	r7, sp, #0
    48da:	0002      	movs	r2, r0
    48dc:	6039      	str	r1, [r7, #0]
    48de:	1dfb      	adds	r3, r7, #7
    48e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    48e2:	1dfb      	adds	r3, r7, #7
    48e4:	781b      	ldrb	r3, [r3, #0]
    48e6:	2b01      	cmp	r3, #1
    48e8:	d00a      	beq.n	4900 <system_apb_clock_set_mask+0x2c>
    48ea:	2b02      	cmp	r3, #2
    48ec:	d00f      	beq.n	490e <system_apb_clock_set_mask+0x3a>
    48ee:	2b00      	cmp	r3, #0
    48f0:	d114      	bne.n	491c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    48f2:	4b0e      	ldr	r3, [pc, #56]	; (492c <system_apb_clock_set_mask+0x58>)
    48f4:	4a0d      	ldr	r2, [pc, #52]	; (492c <system_apb_clock_set_mask+0x58>)
    48f6:	6991      	ldr	r1, [r2, #24]
    48f8:	683a      	ldr	r2, [r7, #0]
    48fa:	430a      	orrs	r2, r1
    48fc:	619a      	str	r2, [r3, #24]
			break;
    48fe:	e00f      	b.n	4920 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4900:	4b0a      	ldr	r3, [pc, #40]	; (492c <system_apb_clock_set_mask+0x58>)
    4902:	4a0a      	ldr	r2, [pc, #40]	; (492c <system_apb_clock_set_mask+0x58>)
    4904:	69d1      	ldr	r1, [r2, #28]
    4906:	683a      	ldr	r2, [r7, #0]
    4908:	430a      	orrs	r2, r1
    490a:	61da      	str	r2, [r3, #28]
			break;
    490c:	e008      	b.n	4920 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    490e:	4b07      	ldr	r3, [pc, #28]	; (492c <system_apb_clock_set_mask+0x58>)
    4910:	4a06      	ldr	r2, [pc, #24]	; (492c <system_apb_clock_set_mask+0x58>)
    4912:	6a11      	ldr	r1, [r2, #32]
    4914:	683a      	ldr	r2, [r7, #0]
    4916:	430a      	orrs	r2, r1
    4918:	621a      	str	r2, [r3, #32]
			break;
    491a:	e001      	b.n	4920 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    491c:	2317      	movs	r3, #23
    491e:	e000      	b.n	4922 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4920:	2300      	movs	r3, #0
}
    4922:	0018      	movs	r0, r3
    4924:	46bd      	mov	sp, r7
    4926:	b002      	add	sp, #8
    4928:	bd80      	pop	{r7, pc}
    492a:	46c0      	nop			; (mov r8, r8)
    492c:	40000400 	.word	0x40000400

00004930 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4930:	b580      	push	{r7, lr}
    4932:	b082      	sub	sp, #8
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	2280      	movs	r2, #128	; 0x80
    493c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	2200      	movs	r2, #0
    4942:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	2201      	movs	r2, #1
    4948:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	2200      	movs	r2, #0
    494e:	70da      	strb	r2, [r3, #3]
}
    4950:	46c0      	nop			; (mov r8, r8)
    4952:	46bd      	mov	sp, r7
    4954:	b002      	add	sp, #8
    4956:	bd80      	pop	{r7, pc}

00004958 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4958:	b580      	push	{r7, lr}
    495a:	b082      	sub	sp, #8
    495c:	af00      	add	r7, sp, #0
    495e:	0002      	movs	r2, r0
    4960:	1dfb      	adds	r3, r7, #7
    4962:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4964:	4b06      	ldr	r3, [pc, #24]	; (4980 <system_interrupt_enable+0x28>)
    4966:	1dfa      	adds	r2, r7, #7
    4968:	7812      	ldrb	r2, [r2, #0]
    496a:	0011      	movs	r1, r2
    496c:	221f      	movs	r2, #31
    496e:	400a      	ands	r2, r1
    4970:	2101      	movs	r1, #1
    4972:	4091      	lsls	r1, r2
    4974:	000a      	movs	r2, r1
    4976:	601a      	str	r2, [r3, #0]
}
    4978:	46c0      	nop			; (mov r8, r8)
    497a:	46bd      	mov	sp, r7
    497c:	b002      	add	sp, #8
    497e:	bd80      	pop	{r7, pc}
    4980:	e000e100 	.word	0xe000e100

00004984 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4984:	b580      	push	{r7, lr}
    4986:	b084      	sub	sp, #16
    4988:	af00      	add	r7, sp, #0
    498a:	0002      	movs	r2, r0
    498c:	1dfb      	adds	r3, r7, #7
    498e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4990:	230f      	movs	r3, #15
    4992:	18fb      	adds	r3, r7, r3
    4994:	1dfa      	adds	r2, r7, #7
    4996:	7812      	ldrb	r2, [r2, #0]
    4998:	0952      	lsrs	r2, r2, #5
    499a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    499c:	230f      	movs	r3, #15
    499e:	18fb      	adds	r3, r7, r3
    49a0:	781b      	ldrb	r3, [r3, #0]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d10c      	bne.n	49c0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    49a6:	4b09      	ldr	r3, [pc, #36]	; (49cc <_extint_get_eic_from_channel+0x48>)
    49a8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    49aa:	230f      	movs	r3, #15
    49ac:	18fb      	adds	r3, r7, r3
    49ae:	781b      	ldrb	r3, [r3, #0]
    49b0:	009b      	lsls	r3, r3, #2
    49b2:	2210      	movs	r2, #16
    49b4:	4694      	mov	ip, r2
    49b6:	44bc      	add	ip, r7
    49b8:	4463      	add	r3, ip
    49ba:	3b08      	subs	r3, #8
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	e000      	b.n	49c2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    49c0:	2300      	movs	r3, #0
	}
}
    49c2:	0018      	movs	r0, r3
    49c4:	46bd      	mov	sp, r7
    49c6:	b004      	add	sp, #16
    49c8:	bd80      	pop	{r7, pc}
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	40001800 	.word	0x40001800

000049d0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    49d0:	b580      	push	{r7, lr}
    49d2:	b082      	sub	sp, #8
    49d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    49d6:	4b0f      	ldr	r3, [pc, #60]	; (4a14 <extint_is_syncing+0x44>)
    49d8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49da:	2300      	movs	r3, #0
    49dc:	607b      	str	r3, [r7, #4]
    49de:	e011      	b.n	4a04 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	009b      	lsls	r3, r3, #2
    49e4:	2208      	movs	r2, #8
    49e6:	4694      	mov	ip, r2
    49e8:	44bc      	add	ip, r7
    49ea:	4463      	add	r3, ip
    49ec:	3b08      	subs	r3, #8
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	785b      	ldrb	r3, [r3, #1]
    49f2:	b2db      	uxtb	r3, r3
    49f4:	b25b      	sxtb	r3, r3
    49f6:	2b00      	cmp	r3, #0
    49f8:	da01      	bge.n	49fe <extint_is_syncing+0x2e>
			return true;
    49fa:	2301      	movs	r3, #1
    49fc:	e006      	b.n	4a0c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49fe:	687b      	ldr	r3, [r7, #4]
    4a00:	3301      	adds	r3, #1
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d0ea      	beq.n	49e0 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4a0a:	2300      	movs	r3, #0
}
    4a0c:	0018      	movs	r0, r3
    4a0e:	46bd      	mov	sp, r7
    4a10:	b002      	add	sp, #8
    4a12:	bd80      	pop	{r7, pc}
    4a14:	40001800 	.word	0x40001800

00004a18 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b084      	sub	sp, #16
    4a1c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4a1e:	4b2d      	ldr	r3, [pc, #180]	; (4ad4 <_system_extint_init+0xbc>)
    4a20:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4a22:	2140      	movs	r1, #64	; 0x40
    4a24:	2000      	movs	r0, #0
    4a26:	4b2c      	ldr	r3, [pc, #176]	; (4ad8 <_system_extint_init+0xc0>)
    4a28:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4a2a:	003b      	movs	r3, r7
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b2b      	ldr	r3, [pc, #172]	; (4adc <_system_extint_init+0xc4>)
    4a30:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4a32:	003b      	movs	r3, r7
    4a34:	2200      	movs	r2, #0
    4a36:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4a38:	003b      	movs	r3, r7
    4a3a:	0019      	movs	r1, r3
    4a3c:	2005      	movs	r0, #5
    4a3e:	4b28      	ldr	r3, [pc, #160]	; (4ae0 <_system_extint_init+0xc8>)
    4a40:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4a42:	2005      	movs	r0, #5
    4a44:	4b27      	ldr	r3, [pc, #156]	; (4ae4 <_system_extint_init+0xcc>)
    4a46:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4a48:	2300      	movs	r3, #0
    4a4a:	60fb      	str	r3, [r7, #12]
    4a4c:	e018      	b.n	4a80 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	009b      	lsls	r3, r3, #2
    4a52:	2210      	movs	r2, #16
    4a54:	4694      	mov	ip, r2
    4a56:	44bc      	add	ip, r7
    4a58:	4463      	add	r3, ip
    4a5a:	3b0c      	subs	r3, #12
    4a5c:	681a      	ldr	r2, [r3, #0]
    4a5e:	68fb      	ldr	r3, [r7, #12]
    4a60:	009b      	lsls	r3, r3, #2
    4a62:	2110      	movs	r1, #16
    4a64:	468c      	mov	ip, r1
    4a66:	44bc      	add	ip, r7
    4a68:	4463      	add	r3, ip
    4a6a:	3b0c      	subs	r3, #12
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	781b      	ldrb	r3, [r3, #0]
    4a70:	b2db      	uxtb	r3, r3
    4a72:	2101      	movs	r1, #1
    4a74:	430b      	orrs	r3, r1
    4a76:	b2db      	uxtb	r3, r3
    4a78:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4a7a:	68fb      	ldr	r3, [r7, #12]
    4a7c:	3301      	adds	r3, #1
    4a7e:	60fb      	str	r3, [r7, #12]
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	2b00      	cmp	r3, #0
    4a84:	d0e3      	beq.n	4a4e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    4a86:	46c0      	nop			; (mov r8, r8)
    4a88:	4b17      	ldr	r3, [pc, #92]	; (4ae8 <_system_extint_init+0xd0>)
    4a8a:	4798      	blx	r3
    4a8c:	1e03      	subs	r3, r0, #0
    4a8e:	d1fb      	bne.n	4a88 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a90:	230b      	movs	r3, #11
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	2200      	movs	r2, #0
    4a96:	701a      	strb	r2, [r3, #0]
    4a98:	e00d      	b.n	4ab6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    4a9a:	230b      	movs	r3, #11
    4a9c:	18fb      	adds	r3, r7, r3
    4a9e:	781a      	ldrb	r2, [r3, #0]
    4aa0:	4b12      	ldr	r3, [pc, #72]	; (4aec <_system_extint_init+0xd4>)
    4aa2:	0092      	lsls	r2, r2, #2
    4aa4:	2100      	movs	r1, #0
    4aa6:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4aa8:	230b      	movs	r3, #11
    4aaa:	18fb      	adds	r3, r7, r3
    4aac:	781a      	ldrb	r2, [r3, #0]
    4aae:	230b      	movs	r3, #11
    4ab0:	18fb      	adds	r3, r7, r3
    4ab2:	3201      	adds	r2, #1
    4ab4:	701a      	strb	r2, [r3, #0]
    4ab6:	230b      	movs	r3, #11
    4ab8:	18fb      	adds	r3, r7, r3
    4aba:	781b      	ldrb	r3, [r3, #0]
    4abc:	2b0f      	cmp	r3, #15
    4abe:	d9ec      	bls.n	4a9a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4ac0:	2004      	movs	r0, #4
    4ac2:	4b0b      	ldr	r3, [pc, #44]	; (4af0 <_system_extint_init+0xd8>)
    4ac4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4ac6:	4b0b      	ldr	r3, [pc, #44]	; (4af4 <_system_extint_init+0xdc>)
    4ac8:	4798      	blx	r3
}
    4aca:	46c0      	nop			; (mov r8, r8)
    4acc:	46bd      	mov	sp, r7
    4ace:	b004      	add	sp, #16
    4ad0:	bd80      	pop	{r7, pc}
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	40001800 	.word	0x40001800
    4ad8:	000048d5 	.word	0x000048d5
    4adc:	000048bd 	.word	0x000048bd
    4ae0:	00005775 	.word	0x00005775
    4ae4:	000057b9 	.word	0x000057b9
    4ae8:	000049d1 	.word	0x000049d1
    4aec:	200002f8 	.word	0x200002f8
    4af0:	00004959 	.word	0x00004959
    4af4:	00004af9 	.word	0x00004af9

00004af8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b082      	sub	sp, #8
    4afc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4afe:	4b15      	ldr	r3, [pc, #84]	; (4b54 <_extint_enable+0x5c>)
    4b00:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4b02:	2300      	movs	r3, #0
    4b04:	607b      	str	r3, [r7, #4]
    4b06:	e018      	b.n	4b3a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	009b      	lsls	r3, r3, #2
    4b0c:	2208      	movs	r2, #8
    4b0e:	4694      	mov	ip, r2
    4b10:	44bc      	add	ip, r7
    4b12:	4463      	add	r3, ip
    4b14:	3b08      	subs	r3, #8
    4b16:	681a      	ldr	r2, [r3, #0]
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	009b      	lsls	r3, r3, #2
    4b1c:	2108      	movs	r1, #8
    4b1e:	468c      	mov	ip, r1
    4b20:	44bc      	add	ip, r7
    4b22:	4463      	add	r3, ip
    4b24:	3b08      	subs	r3, #8
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	781b      	ldrb	r3, [r3, #0]
    4b2a:	b2db      	uxtb	r3, r3
    4b2c:	2102      	movs	r1, #2
    4b2e:	430b      	orrs	r3, r1
    4b30:	b2db      	uxtb	r3, r3
    4b32:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	3301      	adds	r3, #1
    4b38:	607b      	str	r3, [r7, #4]
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d0e3      	beq.n	4b08 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	4b05      	ldr	r3, [pc, #20]	; (4b58 <_extint_enable+0x60>)
    4b44:	4798      	blx	r3
    4b46:	1e03      	subs	r3, r0, #0
    4b48:	d1fb      	bne.n	4b42 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b002      	add	sp, #8
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	40001800 	.word	0x40001800
    4b58:	000049d1 	.word	0x000049d1

00004b5c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4b5c:	b580      	push	{r7, lr}
    4b5e:	b082      	sub	sp, #8
    4b60:	af00      	add	r7, sp, #0
    4b62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	2200      	movs	r2, #0
    4b68:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	2200      	movs	r2, #0
    4b6e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	2201      	movs	r2, #1
    4b74:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    4b76:	687b      	ldr	r3, [r7, #4]
    4b78:	2201      	movs	r2, #1
    4b7a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	2200      	movs	r2, #0
    4b80:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	2202      	movs	r2, #2
    4b86:	72da      	strb	r2, [r3, #11]
}
    4b88:	46c0      	nop			; (mov r8, r8)
    4b8a:	46bd      	mov	sp, r7
    4b8c:	b002      	add	sp, #8
    4b8e:	bd80      	pop	{r7, pc}

00004b90 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4b90:	b580      	push	{r7, lr}
    4b92:	b086      	sub	sp, #24
    4b94:	af00      	add	r7, sp, #0
    4b96:	0002      	movs	r2, r0
    4b98:	6039      	str	r1, [r7, #0]
    4b9a:	1dfb      	adds	r3, r7, #7
    4b9c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4b9e:	2308      	movs	r3, #8
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	0018      	movs	r0, r3
    4ba4:	4b36      	ldr	r3, [pc, #216]	; (4c80 <extint_chan_set_config+0xf0>)
    4ba6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ba8:	683b      	ldr	r3, [r7, #0]
    4baa:	685b      	ldr	r3, [r3, #4]
    4bac:	b2da      	uxtb	r2, r3
    4bae:	2308      	movs	r3, #8
    4bb0:	18fb      	adds	r3, r7, r3
    4bb2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bb4:	2308      	movs	r3, #8
    4bb6:	18fb      	adds	r3, r7, r3
    4bb8:	2200      	movs	r2, #0
    4bba:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4bbc:	683b      	ldr	r3, [r7, #0]
    4bbe:	7a1a      	ldrb	r2, [r3, #8]
    4bc0:	2308      	movs	r3, #8
    4bc2:	18fb      	adds	r3, r7, r3
    4bc4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4bc6:	683b      	ldr	r3, [r7, #0]
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	b2db      	uxtb	r3, r3
    4bcc:	2208      	movs	r2, #8
    4bce:	18ba      	adds	r2, r7, r2
    4bd0:	0011      	movs	r1, r2
    4bd2:	0018      	movs	r0, r3
    4bd4:	4b2b      	ldr	r3, [pc, #172]	; (4c84 <extint_chan_set_config+0xf4>)
    4bd6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    4bd8:	1dfb      	adds	r3, r7, #7
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	0018      	movs	r0, r3
    4bde:	4b2a      	ldr	r3, [pc, #168]	; (4c88 <extint_chan_set_config+0xf8>)
    4be0:	4798      	blx	r3
    4be2:	0003      	movs	r3, r0
    4be4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    4be6:	1dfb      	adds	r3, r7, #7
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	2207      	movs	r2, #7
    4bec:	4013      	ands	r3, r2
    4bee:	009b      	lsls	r3, r3, #2
    4bf0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4bf2:	683b      	ldr	r3, [r7, #0]
    4bf4:	7adb      	ldrb	r3, [r3, #11]
    4bf6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	7a9b      	ldrb	r3, [r3, #10]
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d003      	beq.n	4c08 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    4c00:	697b      	ldr	r3, [r7, #20]
    4c02:	2208      	movs	r2, #8
    4c04:	4313      	orrs	r3, r2
    4c06:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    4c08:	1dfb      	adds	r3, r7, #7
    4c0a:	781b      	ldrb	r3, [r3, #0]
    4c0c:	08db      	lsrs	r3, r3, #3
    4c0e:	b2db      	uxtb	r3, r3
    4c10:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    4c12:	1dfb      	adds	r3, r7, #7
    4c14:	781b      	ldrb	r3, [r3, #0]
    4c16:	08db      	lsrs	r3, r3, #3
    4c18:	b2db      	uxtb	r3, r3
    4c1a:	001a      	movs	r2, r3
    4c1c:	693b      	ldr	r3, [r7, #16]
    4c1e:	3206      	adds	r2, #6
    4c20:	0092      	lsls	r2, r2, #2
    4c22:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4c24:	210f      	movs	r1, #15
    4c26:	68fa      	ldr	r2, [r7, #12]
    4c28:	4091      	lsls	r1, r2
    4c2a:	000a      	movs	r2, r1
    4c2c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4c2e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4c30:	6979      	ldr	r1, [r7, #20]
    4c32:	68fb      	ldr	r3, [r7, #12]
    4c34:	4099      	lsls	r1, r3
    4c36:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4c38:	431a      	orrs	r2, r3
    4c3a:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4c3c:	693b      	ldr	r3, [r7, #16]
    4c3e:	1d82      	adds	r2, r0, #6
    4c40:	0092      	lsls	r2, r2, #2
    4c42:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4c44:	683b      	ldr	r3, [r7, #0]
    4c46:	7a5b      	ldrb	r3, [r3, #9]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d00a      	beq.n	4c62 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4c4c:	693b      	ldr	r3, [r7, #16]
    4c4e:	695a      	ldr	r2, [r3, #20]
    4c50:	1dfb      	adds	r3, r7, #7
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	2101      	movs	r1, #1
    4c56:	4099      	lsls	r1, r3
    4c58:	000b      	movs	r3, r1
    4c5a:	431a      	orrs	r2, r3
    4c5c:	693b      	ldr	r3, [r7, #16]
    4c5e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    4c60:	e00a      	b.n	4c78 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4c62:	693b      	ldr	r3, [r7, #16]
    4c64:	695b      	ldr	r3, [r3, #20]
    4c66:	1dfa      	adds	r2, r7, #7
    4c68:	7812      	ldrb	r2, [r2, #0]
    4c6a:	2101      	movs	r1, #1
    4c6c:	4091      	lsls	r1, r2
    4c6e:	000a      	movs	r2, r1
    4c70:	43d2      	mvns	r2, r2
    4c72:	401a      	ands	r2, r3
    4c74:	693b      	ldr	r3, [r7, #16]
    4c76:	615a      	str	r2, [r3, #20]
	}
}
    4c78:	46c0      	nop			; (mov r8, r8)
    4c7a:	46bd      	mov	sp, r7
    4c7c:	b006      	add	sp, #24
    4c7e:	bd80      	pop	{r7, pc}
    4c80:	00004931 	.word	0x00004931
    4c84:	00005a61 	.word	0x00005a61
    4c88:	00004985 	.word	0x00004985

00004c8c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b082      	sub	sp, #8
    4c90:	af00      	add	r7, sp, #0
    4c92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2280      	movs	r2, #128	; 0x80
    4c98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2201      	movs	r2, #1
    4ca4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	70da      	strb	r2, [r3, #3]
}
    4cac:	46c0      	nop			; (mov r8, r8)
    4cae:	46bd      	mov	sp, r7
    4cb0:	b002      	add	sp, #8
    4cb2:	bd80      	pop	{r7, pc}

00004cb4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b084      	sub	sp, #16
    4cb8:	af00      	add	r7, sp, #0
    4cba:	0002      	movs	r2, r0
    4cbc:	6039      	str	r1, [r7, #0]
    4cbe:	1dfb      	adds	r3, r7, #7
    4cc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4cc2:	230c      	movs	r3, #12
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	0018      	movs	r0, r3
    4cc8:	4b10      	ldr	r3, [pc, #64]	; (4d0c <port_pin_set_config+0x58>)
    4cca:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4ccc:	230c      	movs	r3, #12
    4cce:	18fb      	adds	r3, r7, r3
    4cd0:	2280      	movs	r2, #128	; 0x80
    4cd2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4cd4:	683b      	ldr	r3, [r7, #0]
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	230c      	movs	r3, #12
    4cda:	18fb      	adds	r3, r7, r3
    4cdc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4cde:	683b      	ldr	r3, [r7, #0]
    4ce0:	785a      	ldrb	r2, [r3, #1]
    4ce2:	230c      	movs	r3, #12
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4ce8:	683b      	ldr	r3, [r7, #0]
    4cea:	789a      	ldrb	r2, [r3, #2]
    4cec:	230c      	movs	r3, #12
    4cee:	18fb      	adds	r3, r7, r3
    4cf0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4cf2:	230c      	movs	r3, #12
    4cf4:	18fa      	adds	r2, r7, r3
    4cf6:	1dfb      	adds	r3, r7, #7
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	0011      	movs	r1, r2
    4cfc:	0018      	movs	r0, r3
    4cfe:	4b04      	ldr	r3, [pc, #16]	; (4d10 <port_pin_set_config+0x5c>)
    4d00:	4798      	blx	r3
}
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	46bd      	mov	sp, r7
    4d06:	b004      	add	sp, #16
    4d08:	bd80      	pop	{r7, pc}
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	00004c8d 	.word	0x00004c8d
    4d10:	00005a61 	.word	0x00005a61

00004d14 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4d14:	b580      	push	{r7, lr}
    4d16:	b082      	sub	sp, #8
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	2201      	movs	r2, #1
    4d20:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2200      	movs	r2, #0
    4d26:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	2206      	movs	r2, #6
    4d2c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4d2e:	687b      	ldr	r3, [r7, #4]
    4d30:	2200      	movs	r2, #0
    4d32:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	2200      	movs	r2, #0
    4d38:	725a      	strb	r2, [r3, #9]
}
    4d3a:	46c0      	nop			; (mov r8, r8)
    4d3c:	46bd      	mov	sp, r7
    4d3e:	b002      	add	sp, #8
    4d40:	bd80      	pop	{r7, pc}
    4d42:	46c0      	nop			; (mov r8, r8)

00004d44 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b082      	sub	sp, #8
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	2203      	movs	r2, #3
    4d50:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	2200      	movs	r2, #0
    4d56:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	2201      	movs	r2, #1
    4d5c:	709a      	strb	r2, [r3, #2]
}
    4d5e:	46c0      	nop			; (mov r8, r8)
    4d60:	46bd      	mov	sp, r7
    4d62:	b002      	add	sp, #8
    4d64:	bd80      	pop	{r7, pc}
    4d66:	46c0      	nop			; (mov r8, r8)

00004d68 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    4d68:	b580      	push	{r7, lr}
    4d6a:	b082      	sub	sp, #8
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	2200      	movs	r2, #0
    4d74:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	2200      	movs	r2, #0
    4d7a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	2200      	movs	r2, #0
    4d80:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2200      	movs	r2, #0
    4d86:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	2200      	movs	r2, #0
    4d8c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    4d8e:	687b      	ldr	r3, [r7, #4]
    4d90:	2201      	movs	r2, #1
    4d92:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	2207      	movs	r2, #7
    4d98:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	223f      	movs	r2, #63	; 0x3f
    4d9e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	2201      	movs	r2, #1
    4da4:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	2201      	movs	r2, #1
    4daa:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	2206      	movs	r2, #6
    4db0:	821a      	strh	r2, [r3, #16]
}
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	46bd      	mov	sp, r7
    4db6:	b002      	add	sp, #8
    4db8:	bd80      	pop	{r7, pc}
    4dba:	46c0      	nop			; (mov r8, r8)

00004dbc <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4dbc:	b580      	push	{r7, lr}
    4dbe:	b082      	sub	sp, #8
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	0002      	movs	r2, r0
    4dc4:	1dfb      	adds	r3, r7, #7
    4dc6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4dc8:	4a03      	ldr	r2, [pc, #12]	; (4dd8 <system_cpu_clock_set_divider+0x1c>)
    4dca:	1dfb      	adds	r3, r7, #7
    4dcc:	781b      	ldrb	r3, [r3, #0]
    4dce:	7213      	strb	r3, [r2, #8]
}
    4dd0:	46c0      	nop			; (mov r8, r8)
    4dd2:	46bd      	mov	sp, r7
    4dd4:	b002      	add	sp, #8
    4dd6:	bd80      	pop	{r7, pc}
    4dd8:	40000400 	.word	0x40000400

00004ddc <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b082      	sub	sp, #8
    4de0:	af00      	add	r7, sp, #0
    4de2:	0002      	movs	r2, r0
    4de4:	1dfb      	adds	r3, r7, #7
    4de6:	701a      	strb	r2, [r3, #0]
    4de8:	1dbb      	adds	r3, r7, #6
    4dea:	1c0a      	adds	r2, r1, #0
    4dec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4dee:	1dfb      	adds	r3, r7, #7
    4df0:	781b      	ldrb	r3, [r3, #0]
    4df2:	2b01      	cmp	r3, #1
    4df4:	d008      	beq.n	4e08 <system_apb_clock_set_divider+0x2c>
    4df6:	2b02      	cmp	r3, #2
    4df8:	d00b      	beq.n	4e12 <system_apb_clock_set_divider+0x36>
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d10e      	bne.n	4e1c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4dfe:	4a0b      	ldr	r2, [pc, #44]	; (4e2c <system_apb_clock_set_divider+0x50>)
    4e00:	1dbb      	adds	r3, r7, #6
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	7253      	strb	r3, [r2, #9]
			break;
    4e06:	e00b      	b.n	4e20 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4e08:	4a08      	ldr	r2, [pc, #32]	; (4e2c <system_apb_clock_set_divider+0x50>)
    4e0a:	1dbb      	adds	r3, r7, #6
    4e0c:	781b      	ldrb	r3, [r3, #0]
    4e0e:	7293      	strb	r3, [r2, #10]
			break;
    4e10:	e006      	b.n	4e20 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4e12:	4a06      	ldr	r2, [pc, #24]	; (4e2c <system_apb_clock_set_divider+0x50>)
    4e14:	1dbb      	adds	r3, r7, #6
    4e16:	781b      	ldrb	r3, [r3, #0]
    4e18:	72d3      	strb	r3, [r2, #11]
			break;
    4e1a:	e001      	b.n	4e20 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4e1c:	2317      	movs	r3, #23
    4e1e:	e000      	b.n	4e22 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4e20:	2300      	movs	r3, #0
}
    4e22:	0018      	movs	r0, r3
    4e24:	46bd      	mov	sp, r7
    4e26:	b002      	add	sp, #8
    4e28:	bd80      	pop	{r7, pc}
    4e2a:	46c0      	nop			; (mov r8, r8)
    4e2c:	40000400 	.word	0x40000400

00004e30 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4e30:	b580      	push	{r7, lr}
    4e32:	b082      	sub	sp, #8
    4e34:	af00      	add	r7, sp, #0
    4e36:	0002      	movs	r2, r0
    4e38:	1dfb      	adds	r3, r7, #7
    4e3a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4e3c:	4a08      	ldr	r2, [pc, #32]	; (4e60 <system_flash_set_waitstates+0x30>)
    4e3e:	1dfb      	adds	r3, r7, #7
    4e40:	781b      	ldrb	r3, [r3, #0]
    4e42:	210f      	movs	r1, #15
    4e44:	400b      	ands	r3, r1
    4e46:	b2d9      	uxtb	r1, r3
    4e48:	6853      	ldr	r3, [r2, #4]
    4e4a:	200f      	movs	r0, #15
    4e4c:	4001      	ands	r1, r0
    4e4e:	0049      	lsls	r1, r1, #1
    4e50:	201e      	movs	r0, #30
    4e52:	4383      	bics	r3, r0
    4e54:	430b      	orrs	r3, r1
    4e56:	6053      	str	r3, [r2, #4]
}
    4e58:	46c0      	nop			; (mov r8, r8)
    4e5a:	46bd      	mov	sp, r7
    4e5c:	b002      	add	sp, #8
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	41004000 	.word	0x41004000

00004e64 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4e64:	b580      	push	{r7, lr}
    4e66:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4e68:	46c0      	nop			; (mov r8, r8)
    4e6a:	4b04      	ldr	r3, [pc, #16]	; (4e7c <_system_dfll_wait_for_sync+0x18>)
    4e6c:	68db      	ldr	r3, [r3, #12]
    4e6e:	2210      	movs	r2, #16
    4e70:	4013      	ands	r3, r2
    4e72:	d0fa      	beq.n	4e6a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4e74:	46c0      	nop			; (mov r8, r8)
    4e76:	46bd      	mov	sp, r7
    4e78:	bd80      	pop	{r7, pc}
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	40000800 	.word	0x40000800

00004e80 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4e84:	4b0c      	ldr	r3, [pc, #48]	; (4eb8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4e86:	2202      	movs	r2, #2
    4e88:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4e8a:	4b0c      	ldr	r3, [pc, #48]	; (4ebc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4e8c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4e8e:	4a0a      	ldr	r2, [pc, #40]	; (4eb8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4e90:	4b0b      	ldr	r3, [pc, #44]	; (4ec0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4e92:	689b      	ldr	r3, [r3, #8]
    4e94:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4e96:	4a08      	ldr	r2, [pc, #32]	; (4eb8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4e98:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4e9a:	685b      	ldr	r3, [r3, #4]
    4e9c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4e9e:	4b06      	ldr	r3, [pc, #24]	; (4eb8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4ea0:	2200      	movs	r2, #0
    4ea2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4ea4:	4b05      	ldr	r3, [pc, #20]	; (4ebc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4ea6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4ea8:	4a03      	ldr	r2, [pc, #12]	; (4eb8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4eaa:	4b05      	ldr	r3, [pc, #20]	; (4ec0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	b29b      	uxth	r3, r3
    4eb0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	46bd      	mov	sp, r7
    4eb6:	bd80      	pop	{r7, pc}
    4eb8:	40000800 	.word	0x40000800
    4ebc:	00004e65 	.word	0x00004e65
    4ec0:	2000013c 	.word	0x2000013c

00004ec4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ec4:	b580      	push	{r7, lr}
    4ec6:	b082      	sub	sp, #8
    4ec8:	af00      	add	r7, sp, #0
    4eca:	0002      	movs	r2, r0
    4ecc:	1dfb      	adds	r3, r7, #7
    4ece:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4ed0:	1dfb      	adds	r3, r7, #7
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	2b08      	cmp	r3, #8
    4ed6:	d847      	bhi.n	4f68 <system_clock_source_get_hz+0xa4>
    4ed8:	009a      	lsls	r2, r3, #2
    4eda:	4b26      	ldr	r3, [pc, #152]	; (4f74 <system_clock_source_get_hz+0xb0>)
    4edc:	18d3      	adds	r3, r2, r3
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4ee2:	4b25      	ldr	r3, [pc, #148]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4ee4:	691b      	ldr	r3, [r3, #16]
    4ee6:	e040      	b.n	4f6a <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4ee8:	4b24      	ldr	r3, [pc, #144]	; (4f7c <system_clock_source_get_hz+0xb8>)
    4eea:	6a1b      	ldr	r3, [r3, #32]
    4eec:	059b      	lsls	r3, r3, #22
    4eee:	0f9b      	lsrs	r3, r3, #30
    4ef0:	b2db      	uxtb	r3, r3
    4ef2:	001a      	movs	r2, r3
    4ef4:	4b22      	ldr	r3, [pc, #136]	; (4f80 <system_clock_source_get_hz+0xbc>)
    4ef6:	40d3      	lsrs	r3, r2
    4ef8:	e037      	b.n	4f6a <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4efa:	2380      	movs	r3, #128	; 0x80
    4efc:	021b      	lsls	r3, r3, #8
    4efe:	e034      	b.n	4f6a <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4f00:	2380      	movs	r3, #128	; 0x80
    4f02:	021b      	lsls	r3, r3, #8
    4f04:	e031      	b.n	4f6a <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4f06:	4b1c      	ldr	r3, [pc, #112]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f08:	695b      	ldr	r3, [r3, #20]
    4f0a:	e02e      	b.n	4f6a <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4f0c:	4b1a      	ldr	r3, [pc, #104]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	2202      	movs	r2, #2
    4f12:	4013      	ands	r3, r2
    4f14:	d101      	bne.n	4f1a <system_clock_source_get_hz+0x56>
			return 0;
    4f16:	2300      	movs	r3, #0
    4f18:	e027      	b.n	4f6a <system_clock_source_get_hz+0xa6>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4f1a:	4b1a      	ldr	r3, [pc, #104]	; (4f84 <system_clock_source_get_hz+0xc0>)
    4f1c:	4798      	blx	r3

		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
    4f1e:	4b16      	ldr	r3, [pc, #88]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	2220      	movs	r2, #32
    4f24:	4013      	ands	r3, r2
    4f26:	d001      	beq.n	4f2c <system_clock_source_get_hz+0x68>
			return 48000000UL;
    4f28:	4b17      	ldr	r3, [pc, #92]	; (4f88 <system_clock_source_get_hz+0xc4>)
    4f2a:	e01e      	b.n	4f6a <system_clock_source_get_hz+0xa6>

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4f2c:	4b12      	ldr	r3, [pc, #72]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f2e:	681b      	ldr	r3, [r3, #0]
    4f30:	2204      	movs	r2, #4
    4f32:	4013      	ands	r3, r2
    4f34:	d009      	beq.n	4f4a <system_clock_source_get_hz+0x86>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4f36:	2000      	movs	r0, #0
    4f38:	4b14      	ldr	r3, [pc, #80]	; (4f8c <system_clock_source_get_hz+0xc8>)
    4f3a:	4798      	blx	r3
    4f3c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4f3e:	4b0e      	ldr	r3, [pc, #56]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f40:	689b      	ldr	r3, [r3, #8]
    4f42:	041b      	lsls	r3, r3, #16
    4f44:	0c1b      	lsrs	r3, r3, #16
		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
			return 48000000UL;

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4f46:	4353      	muls	r3, r2
    4f48:	e00f      	b.n	4f6a <system_clock_source_get_hz+0xa6>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4f4a:	4b0f      	ldr	r3, [pc, #60]	; (4f88 <system_clock_source_get_hz+0xc4>)
    4f4c:	e00d      	b.n	4f6a <system_clock_source_get_hz+0xa6>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4f4e:	4a0b      	ldr	r2, [pc, #44]	; (4f7c <system_clock_source_get_hz+0xb8>)
    4f50:	2350      	movs	r3, #80	; 0x50
    4f52:	5cd3      	ldrb	r3, [r2, r3]
    4f54:	b2db      	uxtb	r3, r3
    4f56:	001a      	movs	r2, r3
    4f58:	2304      	movs	r3, #4
    4f5a:	4013      	ands	r3, r2
    4f5c:	d101      	bne.n	4f62 <system_clock_source_get_hz+0x9e>
			return 0;
    4f5e:	2300      	movs	r3, #0
    4f60:	e003      	b.n	4f6a <system_clock_source_get_hz+0xa6>
		}

		return _system_clock_inst.dpll.frequency;
    4f62:	4b05      	ldr	r3, [pc, #20]	; (4f78 <system_clock_source_get_hz+0xb4>)
    4f64:	68db      	ldr	r3, [r3, #12]
    4f66:	e000      	b.n	4f6a <system_clock_source_get_hz+0xa6>
#endif

	default:
		return 0;
    4f68:	2300      	movs	r3, #0
	}
}
    4f6a:	0018      	movs	r0, r3
    4f6c:	46bd      	mov	sp, r7
    4f6e:	b002      	add	sp, #8
    4f70:	bd80      	pop	{r7, pc}
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	00009e24 	.word	0x00009e24
    4f78:	2000013c 	.word	0x2000013c
    4f7c:	40000800 	.word	0x40000800
    4f80:	007a1200 	.word	0x007a1200
    4f84:	00004e65 	.word	0x00004e65
    4f88:	02dc6c00 	.word	0x02dc6c00
    4f8c:	00005899 	.word	0x00005899

00004f90 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b084      	sub	sp, #16
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4f98:	4b1a      	ldr	r3, [pc, #104]	; (5004 <system_clock_source_osc8m_set_config+0x74>)
    4f9a:	6a1b      	ldr	r3, [r3, #32]
    4f9c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	1c1a      	adds	r2, r3, #0
    4fa4:	2303      	movs	r3, #3
    4fa6:	4013      	ands	r3, r2
    4fa8:	b2da      	uxtb	r2, r3
    4faa:	230d      	movs	r3, #13
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	2103      	movs	r1, #3
    4fb0:	400a      	ands	r2, r1
    4fb2:	0010      	movs	r0, r2
    4fb4:	781a      	ldrb	r2, [r3, #0]
    4fb6:	2103      	movs	r1, #3
    4fb8:	438a      	bics	r2, r1
    4fba:	1c11      	adds	r1, r2, #0
    4fbc:	1c02      	adds	r2, r0, #0
    4fbe:	430a      	orrs	r2, r1
    4fc0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	789a      	ldrb	r2, [r3, #2]
    4fc6:	230c      	movs	r3, #12
    4fc8:	18fb      	adds	r3, r7, r3
    4fca:	01d0      	lsls	r0, r2, #7
    4fcc:	781a      	ldrb	r2, [r3, #0]
    4fce:	217f      	movs	r1, #127	; 0x7f
    4fd0:	400a      	ands	r2, r1
    4fd2:	1c11      	adds	r1, r2, #0
    4fd4:	1c02      	adds	r2, r0, #0
    4fd6:	430a      	orrs	r2, r1
    4fd8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	785a      	ldrb	r2, [r3, #1]
    4fde:	230c      	movs	r3, #12
    4fe0:	18fb      	adds	r3, r7, r3
    4fe2:	2101      	movs	r1, #1
    4fe4:	400a      	ands	r2, r1
    4fe6:	0190      	lsls	r0, r2, #6
    4fe8:	781a      	ldrb	r2, [r3, #0]
    4fea:	2140      	movs	r1, #64	; 0x40
    4fec:	438a      	bics	r2, r1
    4fee:	1c11      	adds	r1, r2, #0
    4ff0:	1c02      	adds	r2, r0, #0
    4ff2:	430a      	orrs	r2, r1
    4ff4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4ff6:	4b03      	ldr	r3, [pc, #12]	; (5004 <system_clock_source_osc8m_set_config+0x74>)
    4ff8:	68fa      	ldr	r2, [r7, #12]
    4ffa:	621a      	str	r2, [r3, #32]
}
    4ffc:	46c0      	nop			; (mov r8, r8)
    4ffe:	46bd      	mov	sp, r7
    5000:	b004      	add	sp, #16
    5002:	bd80      	pop	{r7, pc}
    5004:	40000800 	.word	0x40000800

00005008 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5008:	b580      	push	{r7, lr}
    500a:	b082      	sub	sp, #8
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5010:	687b      	ldr	r3, [r7, #4]
    5012:	7a1b      	ldrb	r3, [r3, #8]
    5014:	029b      	lsls	r3, r3, #10
    5016:	041b      	lsls	r3, r3, #16
    5018:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	895b      	ldrh	r3, [r3, #10]
    501e:	059b      	lsls	r3, r3, #22
    5020:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5022:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5024:	4b2a      	ldr	r3, [pc, #168]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    5026:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5030:	4313      	orrs	r3, r2
    5032:	b2db      	uxtb	r3, r3
    5034:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    503a:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    503c:	687a      	ldr	r2, [r7, #4]
    503e:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5040:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	785b      	ldrb	r3, [r3, #1]
    5046:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5048:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    504a:	4b21      	ldr	r3, [pc, #132]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    504c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	2b04      	cmp	r3, #4
    5054:	d116      	bne.n	5084 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	7b1b      	ldrb	r3, [r3, #12]
    505a:	069b      	lsls	r3, r3, #26
    505c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	89db      	ldrh	r3, [r3, #14]
    5062:	041b      	lsls	r3, r3, #16
    5064:	0019      	movs	r1, r3
    5066:	4b1b      	ldr	r3, [pc, #108]	; (50d4 <system_clock_source_dfll_set_config+0xcc>)
    5068:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    506a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    506c:	687a      	ldr	r2, [r7, #4]
    506e:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5070:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    5072:	4b17      	ldr	r3, [pc, #92]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    5074:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5076:	4b16      	ldr	r3, [pc, #88]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	687a      	ldr	r2, [r7, #4]
    507c:	7812      	ldrb	r2, [r2, #0]
    507e:	431a      	orrs	r2, r3
    5080:	4b13      	ldr	r3, [pc, #76]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    5082:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	2b20      	cmp	r3, #32
    508a:	d11c      	bne.n	50c6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	7b1b      	ldrb	r3, [r3, #12]
    5090:	069b      	lsls	r3, r3, #26
    5092:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	89db      	ldrh	r3, [r3, #14]
    5098:	041b      	lsls	r3, r3, #16
    509a:	0019      	movs	r1, r3
    509c:	4b0d      	ldr	r3, [pc, #52]	; (50d4 <system_clock_source_dfll_set_config+0xcc>)
    509e:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    50a0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    50a2:	687a      	ldr	r2, [r7, #4]
    50a4:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    50a6:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    50a8:	4b09      	ldr	r3, [pc, #36]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    50aa:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    50ac:	4b08      	ldr	r3, [pc, #32]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	687a      	ldr	r2, [r7, #4]
    50b2:	7812      	ldrb	r2, [r2, #0]
    50b4:	2104      	movs	r1, #4
    50b6:	430a      	orrs	r2, r1
    50b8:	b2d2      	uxtb	r2, r2
    50ba:	4313      	orrs	r3, r2
    50bc:	2280      	movs	r2, #128	; 0x80
    50be:	00d2      	lsls	r2, r2, #3
    50c0:	431a      	orrs	r2, r3
    50c2:	4b03      	ldr	r3, [pc, #12]	; (50d0 <system_clock_source_dfll_set_config+0xc8>)
    50c4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    50c6:	46c0      	nop			; (mov r8, r8)
    50c8:	46bd      	mov	sp, r7
    50ca:	b002      	add	sp, #8
    50cc:	bd80      	pop	{r7, pc}
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	2000013c 	.word	0x2000013c
    50d4:	03ff0000 	.word	0x03ff0000

000050d8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b082      	sub	sp, #8
    50dc:	af00      	add	r7, sp, #0
    50de:	0002      	movs	r2, r0
    50e0:	1dfb      	adds	r3, r7, #7
    50e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    50e4:	1dfb      	adds	r3, r7, #7
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	2b08      	cmp	r3, #8
    50ea:	d83b      	bhi.n	5164 <system_clock_source_enable+0x8c>
    50ec:	009a      	lsls	r2, r3, #2
    50ee:	4b21      	ldr	r3, [pc, #132]	; (5174 <system_clock_source_enable+0x9c>)
    50f0:	18d3      	adds	r3, r2, r3
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    50f6:	4b20      	ldr	r3, [pc, #128]	; (5178 <system_clock_source_enable+0xa0>)
    50f8:	4a1f      	ldr	r2, [pc, #124]	; (5178 <system_clock_source_enable+0xa0>)
    50fa:	6a12      	ldr	r2, [r2, #32]
    50fc:	2102      	movs	r1, #2
    50fe:	430a      	orrs	r2, r1
    5100:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5102:	2300      	movs	r3, #0
    5104:	e031      	b.n	516a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5106:	4b1c      	ldr	r3, [pc, #112]	; (5178 <system_clock_source_enable+0xa0>)
    5108:	4a1b      	ldr	r2, [pc, #108]	; (5178 <system_clock_source_enable+0xa0>)
    510a:	6992      	ldr	r2, [r2, #24]
    510c:	2102      	movs	r1, #2
    510e:	430a      	orrs	r2, r1
    5110:	619a      	str	r2, [r3, #24]
		break;
    5112:	e029      	b.n	5168 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5114:	4a18      	ldr	r2, [pc, #96]	; (5178 <system_clock_source_enable+0xa0>)
    5116:	4b18      	ldr	r3, [pc, #96]	; (5178 <system_clock_source_enable+0xa0>)
    5118:	8a1b      	ldrh	r3, [r3, #16]
    511a:	b29b      	uxth	r3, r3
    511c:	2102      	movs	r1, #2
    511e:	430b      	orrs	r3, r1
    5120:	b29b      	uxth	r3, r3
    5122:	8213      	strh	r3, [r2, #16]
		break;
    5124:	e020      	b.n	5168 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5126:	4a14      	ldr	r2, [pc, #80]	; (5178 <system_clock_source_enable+0xa0>)
    5128:	4b13      	ldr	r3, [pc, #76]	; (5178 <system_clock_source_enable+0xa0>)
    512a:	8a9b      	ldrh	r3, [r3, #20]
    512c:	b29b      	uxth	r3, r3
    512e:	2102      	movs	r1, #2
    5130:	430b      	orrs	r3, r1
    5132:	b29b      	uxth	r3, r3
    5134:	8293      	strh	r3, [r2, #20]
		break;
    5136:	e017      	b.n	5168 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5138:	4b10      	ldr	r3, [pc, #64]	; (517c <system_clock_source_enable+0xa4>)
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	2202      	movs	r2, #2
    513e:	431a      	orrs	r2, r3
    5140:	4b0e      	ldr	r3, [pc, #56]	; (517c <system_clock_source_enable+0xa4>)
    5142:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5144:	4b0e      	ldr	r3, [pc, #56]	; (5180 <system_clock_source_enable+0xa8>)
    5146:	4798      	blx	r3
		break;
    5148:	e00e      	b.n	5168 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    514a:	4a0b      	ldr	r2, [pc, #44]	; (5178 <system_clock_source_enable+0xa0>)
    514c:	490a      	ldr	r1, [pc, #40]	; (5178 <system_clock_source_enable+0xa0>)
    514e:	2344      	movs	r3, #68	; 0x44
    5150:	5ccb      	ldrb	r3, [r1, r3]
    5152:	b2db      	uxtb	r3, r3
    5154:	2102      	movs	r1, #2
    5156:	430b      	orrs	r3, r1
    5158:	b2d9      	uxtb	r1, r3
    515a:	2344      	movs	r3, #68	; 0x44
    515c:	54d1      	strb	r1, [r2, r3]
		break;
    515e:	e003      	b.n	5168 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5160:	2300      	movs	r3, #0
    5162:	e002      	b.n	516a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5164:	2317      	movs	r3, #23
    5166:	e000      	b.n	516a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5168:	2300      	movs	r3, #0
}
    516a:	0018      	movs	r0, r3
    516c:	46bd      	mov	sp, r7
    516e:	b002      	add	sp, #8
    5170:	bd80      	pop	{r7, pc}
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	00009e48 	.word	0x00009e48
    5178:	40000800 	.word	0x40000800
    517c:	2000013c 	.word	0x2000013c
    5180:	00004e81 	.word	0x00004e81

00005184 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5184:	b580      	push	{r7, lr}
    5186:	b084      	sub	sp, #16
    5188:	af00      	add	r7, sp, #0
    518a:	0002      	movs	r2, r0
    518c:	1dfb      	adds	r3, r7, #7
    518e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5190:	2300      	movs	r3, #0
    5192:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5194:	1dfb      	adds	r3, r7, #7
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	2b08      	cmp	r3, #8
    519a:	d821      	bhi.n	51e0 <system_clock_source_is_ready+0x5c>
    519c:	009a      	lsls	r2, r3, #2
    519e:	4b18      	ldr	r3, [pc, #96]	; (5200 <system_clock_source_is_ready+0x7c>)
    51a0:	18d3      	adds	r3, r2, r3
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    51a6:	2308      	movs	r3, #8
    51a8:	60fb      	str	r3, [r7, #12]
		break;
    51aa:	e01b      	b.n	51e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    51ac:	2304      	movs	r3, #4
    51ae:	60fb      	str	r3, [r7, #12]
		break;
    51b0:	e018      	b.n	51e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    51b2:	2301      	movs	r3, #1
    51b4:	60fb      	str	r3, [r7, #12]
		break;
    51b6:	e015      	b.n	51e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    51b8:	2302      	movs	r3, #2
    51ba:	60fb      	str	r3, [r7, #12]
		break;
    51bc:	e012      	b.n	51e4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    51be:	2310      	movs	r3, #16
    51c0:	60fb      	str	r3, [r7, #12]
		}
		break;
    51c2:	e00f      	b.n	51e4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    51c4:	4a0f      	ldr	r2, [pc, #60]	; (5204 <system_clock_source_is_ready+0x80>)
    51c6:	2350      	movs	r3, #80	; 0x50
    51c8:	5cd3      	ldrb	r3, [r2, r3]
    51ca:	b2db      	uxtb	r3, r3
    51cc:	001a      	movs	r2, r3
    51ce:	2303      	movs	r3, #3
    51d0:	4013      	ands	r3, r2
    51d2:	3b03      	subs	r3, #3
    51d4:	425a      	negs	r2, r3
    51d6:	4153      	adcs	r3, r2
    51d8:	b2db      	uxtb	r3, r3
    51da:	e00c      	b.n	51f6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    51dc:	2301      	movs	r3, #1
    51de:	e00a      	b.n	51f6 <system_clock_source_is_ready+0x72>

	default:
		return false;
    51e0:	2300      	movs	r3, #0
    51e2:	e008      	b.n	51f6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    51e4:	4b07      	ldr	r3, [pc, #28]	; (5204 <system_clock_source_is_ready+0x80>)
    51e6:	68db      	ldr	r3, [r3, #12]
    51e8:	68fa      	ldr	r2, [r7, #12]
    51ea:	401a      	ands	r2, r3
    51ec:	68fb      	ldr	r3, [r7, #12]
    51ee:	1ad3      	subs	r3, r2, r3
    51f0:	425a      	negs	r2, r3
    51f2:	4153      	adcs	r3, r2
    51f4:	b2db      	uxtb	r3, r3
}
    51f6:	0018      	movs	r0, r3
    51f8:	46bd      	mov	sp, r7
    51fa:	b004      	add	sp, #16
    51fc:	bd80      	pop	{r7, pc}
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	00009e6c 	.word	0x00009e6c
    5204:	40000800 	.word	0x40000800

00005208 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5208:	b580      	push	{r7, lr}
    520a:	b082      	sub	sp, #8
    520c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    520e:	003b      	movs	r3, r7
    5210:	2202      	movs	r2, #2
    5212:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5214:	2300      	movs	r3, #0
    5216:	607b      	str	r3, [r7, #4]
    5218:	e009      	b.n	522e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	b2db      	uxtb	r3, r3
    521e:	003a      	movs	r2, r7
    5220:	0011      	movs	r1, r2
    5222:	0018      	movs	r0, r3
    5224:	4b05      	ldr	r3, [pc, #20]	; (523c <_switch_peripheral_gclk+0x34>)
    5226:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	3301      	adds	r3, #1
    522c:	607b      	str	r3, [r7, #4]
    522e:	687b      	ldr	r3, [r7, #4]
    5230:	2b24      	cmp	r3, #36	; 0x24
    5232:	d9f2      	bls.n	521a <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    5234:	46c0      	nop			; (mov r8, r8)
    5236:	46bd      	mov	sp, r7
    5238:	b002      	add	sp, #8
    523a:	bd80      	pop	{r7, pc}
    523c:	00005775 	.word	0x00005775

00005240 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5240:	b580      	push	{r7, lr}
    5242:	b0a6      	sub	sp, #152	; 0x98
    5244:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5246:	4b6e      	ldr	r3, [pc, #440]	; (5400 <system_clock_init+0x1c0>)
    5248:	22c2      	movs	r2, #194	; 0xc2
    524a:	00d2      	lsls	r2, r2, #3
    524c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    524e:	2002      	movs	r0, #2
    5250:	4b6c      	ldr	r3, [pc, #432]	; (5404 <system_clock_init+0x1c4>)
    5252:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5254:	4b6c      	ldr	r3, [pc, #432]	; (5408 <system_clock_init+0x1c8>)
    5256:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5258:	2380      	movs	r3, #128	; 0x80
    525a:	18fb      	adds	r3, r7, r3
    525c:	0018      	movs	r0, r3
    525e:	4b6b      	ldr	r3, [pc, #428]	; (540c <system_clock_init+0x1cc>)
    5260:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5262:	2380      	movs	r3, #128	; 0x80
    5264:	18fb      	adds	r3, r7, r3
    5266:	2220      	movs	r2, #32
    5268:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    526a:	2380      	movs	r3, #128	; 0x80
    526c:	18fb      	adds	r3, r7, r3
    526e:	2200      	movs	r2, #0
    5270:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5272:	4b67      	ldr	r3, [pc, #412]	; (5410 <system_clock_init+0x1d0>)
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	0e9b      	lsrs	r3, r3, #26
    5278:	2294      	movs	r2, #148	; 0x94
    527a:	18ba      	adds	r2, r7, r2
    527c:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    527e:	2394      	movs	r3, #148	; 0x94
    5280:	18fb      	adds	r3, r7, r3
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	2b3f      	cmp	r3, #63	; 0x3f
    5286:	d103      	bne.n	5290 <system_clock_init+0x50>
		coarse = 0x1f;
    5288:	231f      	movs	r3, #31
    528a:	2294      	movs	r2, #148	; 0x94
    528c:	18ba      	adds	r2, r7, r2
    528e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    5290:	2394      	movs	r3, #148	; 0x94
    5292:	18fb      	adds	r3, r7, r3
    5294:	681b      	ldr	r3, [r3, #0]
    5296:	b2da      	uxtb	r2, r3
    5298:	2380      	movs	r3, #128	; 0x80
    529a:	18fb      	adds	r3, r7, r3
    529c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    529e:	2380      	movs	r3, #128	; 0x80
    52a0:	18fb      	adds	r3, r7, r3
    52a2:	2200      	movs	r2, #0
    52a4:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    52a6:	2380      	movs	r3, #128	; 0x80
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	2200      	movs	r2, #0
    52ac:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    52ae:	2380      	movs	r3, #128	; 0x80
    52b0:	18fb      	adds	r3, r7, r3
    52b2:	2200      	movs	r2, #0
    52b4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    52b6:	2380      	movs	r3, #128	; 0x80
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	2200      	movs	r2, #0
    52bc:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    52be:	2380      	movs	r3, #128	; 0x80
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	2207      	movs	r2, #7
    52c4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    52c6:	2380      	movs	r3, #128	; 0x80
    52c8:	18fb      	adds	r3, r7, r3
    52ca:	223f      	movs	r2, #63	; 0x3f
    52cc:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    52ce:	2380      	movs	r3, #128	; 0x80
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	220a      	movs	r2, #10
    52d4:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    52d6:	2380      	movs	r3, #128	; 0x80
    52d8:	18fb      	adds	r3, r7, r3
    52da:	4a4e      	ldr	r2, [pc, #312]	; (5414 <system_clock_init+0x1d4>)
    52dc:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    52de:	2380      	movs	r3, #128	; 0x80
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	2200      	movs	r2, #0
    52e4:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    52e6:	2380      	movs	r3, #128	; 0x80
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	2200      	movs	r2, #0
    52ec:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    52ee:	2380      	movs	r3, #128	; 0x80
    52f0:	18fb      	adds	r3, r7, r3
    52f2:	2200      	movs	r2, #0
    52f4:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    52f6:	2380      	movs	r3, #128	; 0x80
    52f8:	18fb      	adds	r3, r7, r3
    52fa:	2280      	movs	r2, #128	; 0x80
    52fc:	0052      	lsls	r2, r2, #1
    52fe:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	18fb      	adds	r3, r7, r3
    5304:	4a44      	ldr	r2, [pc, #272]	; (5418 <system_clock_init+0x1d8>)
    5306:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5308:	2380      	movs	r3, #128	; 0x80
    530a:	18fb      	adds	r3, r7, r3
    530c:	0018      	movs	r0, r3
    530e:	4b43      	ldr	r3, [pc, #268]	; (541c <system_clock_init+0x1dc>)
    5310:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5312:	237c      	movs	r3, #124	; 0x7c
    5314:	18fb      	adds	r3, r7, r3
    5316:	0018      	movs	r0, r3
    5318:	4b41      	ldr	r3, [pc, #260]	; (5420 <system_clock_init+0x1e0>)
    531a:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    531c:	237c      	movs	r3, #124	; 0x7c
    531e:	18fb      	adds	r3, r7, r3
    5320:	2200      	movs	r2, #0
    5322:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5324:	237c      	movs	r3, #124	; 0x7c
    5326:	18fb      	adds	r3, r7, r3
    5328:	2201      	movs	r2, #1
    532a:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    532c:	237c      	movs	r3, #124	; 0x7c
    532e:	18fb      	adds	r3, r7, r3
    5330:	2200      	movs	r2, #0
    5332:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5334:	237c      	movs	r3, #124	; 0x7c
    5336:	18fb      	adds	r3, r7, r3
    5338:	0018      	movs	r0, r3
    533a:	4b3a      	ldr	r3, [pc, #232]	; (5424 <system_clock_init+0x1e4>)
    533c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    533e:	2006      	movs	r0, #6
    5340:	4b39      	ldr	r3, [pc, #228]	; (5428 <system_clock_init+0x1e8>)
    5342:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5344:	4b39      	ldr	r3, [pc, #228]	; (542c <system_clock_init+0x1ec>)
    5346:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5348:	2364      	movs	r3, #100	; 0x64
    534a:	18fb      	adds	r3, r7, r3
    534c:	0018      	movs	r0, r3
    534e:	4b38      	ldr	r3, [pc, #224]	; (5430 <system_clock_init+0x1f0>)
    5350:	4798      	blx	r3
    5352:	2364      	movs	r3, #100	; 0x64
    5354:	18fb      	adds	r3, r7, r3
    5356:	2205      	movs	r2, #5
    5358:	701a      	strb	r2, [r3, #0]
    535a:	2364      	movs	r3, #100	; 0x64
    535c:	18fb      	adds	r3, r7, r3
    535e:	2201      	movs	r2, #1
    5360:	605a      	str	r2, [r3, #4]
    5362:	2364      	movs	r3, #100	; 0x64
    5364:	18fb      	adds	r3, r7, r3
    5366:	2200      	movs	r2, #0
    5368:	721a      	strb	r2, [r3, #8]
    536a:	2364      	movs	r3, #100	; 0x64
    536c:	18fb      	adds	r3, r7, r3
    536e:	2200      	movs	r2, #0
    5370:	725a      	strb	r2, [r3, #9]
    5372:	2364      	movs	r3, #100	; 0x64
    5374:	18fb      	adds	r3, r7, r3
    5376:	0019      	movs	r1, r3
    5378:	2001      	movs	r0, #1
    537a:	4b2e      	ldr	r3, [pc, #184]	; (5434 <system_clock_init+0x1f4>)
    537c:	4798      	blx	r3
    537e:	2001      	movs	r0, #1
    5380:	4b2d      	ldr	r3, [pc, #180]	; (5438 <system_clock_init+0x1f8>)
    5382:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5384:	2007      	movs	r0, #7
    5386:	4b28      	ldr	r3, [pc, #160]	; (5428 <system_clock_init+0x1e8>)
    5388:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    538a:	46c0      	nop			; (mov r8, r8)
    538c:	2007      	movs	r0, #7
    538e:	4b2b      	ldr	r3, [pc, #172]	; (543c <system_clock_init+0x1fc>)
    5390:	4798      	blx	r3
    5392:	0003      	movs	r3, r0
    5394:	001a      	movs	r2, r3
    5396:	2301      	movs	r3, #1
    5398:	4053      	eors	r3, r2
    539a:	b2db      	uxtb	r3, r3
    539c:	2b00      	cmp	r3, #0
    539e:	d1f5      	bne.n	538c <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    53a0:	4a17      	ldr	r2, [pc, #92]	; (5400 <system_clock_init+0x1c0>)
    53a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    53a4:	2180      	movs	r1, #128	; 0x80
    53a6:	430b      	orrs	r3, r1
    53a8:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    53aa:	2000      	movs	r0, #0
    53ac:	4b24      	ldr	r3, [pc, #144]	; (5440 <system_clock_init+0x200>)
    53ae:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    53b0:	2100      	movs	r1, #0
    53b2:	2000      	movs	r0, #0
    53b4:	4b23      	ldr	r3, [pc, #140]	; (5444 <system_clock_init+0x204>)
    53b6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    53b8:	2100      	movs	r1, #0
    53ba:	2001      	movs	r0, #1
    53bc:	4b21      	ldr	r3, [pc, #132]	; (5444 <system_clock_init+0x204>)
    53be:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    53c0:	2100      	movs	r1, #0
    53c2:	2002      	movs	r0, #2
    53c4:	4b1f      	ldr	r3, [pc, #124]	; (5444 <system_clock_init+0x204>)
    53c6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    53c8:	003b      	movs	r3, r7
    53ca:	0018      	movs	r0, r3
    53cc:	4b18      	ldr	r3, [pc, #96]	; (5430 <system_clock_init+0x1f0>)
    53ce:	4798      	blx	r3
    53d0:	003b      	movs	r3, r7
    53d2:	2207      	movs	r2, #7
    53d4:	701a      	strb	r2, [r3, #0]
    53d6:	003b      	movs	r3, r7
    53d8:	2201      	movs	r2, #1
    53da:	605a      	str	r2, [r3, #4]
    53dc:	003b      	movs	r3, r7
    53de:	2201      	movs	r2, #1
    53e0:	721a      	strb	r2, [r3, #8]
    53e2:	003b      	movs	r3, r7
    53e4:	2200      	movs	r2, #0
    53e6:	725a      	strb	r2, [r3, #9]
    53e8:	003b      	movs	r3, r7
    53ea:	0019      	movs	r1, r3
    53ec:	2000      	movs	r0, #0
    53ee:	4b11      	ldr	r3, [pc, #68]	; (5434 <system_clock_init+0x1f4>)
    53f0:	4798      	blx	r3
    53f2:	2000      	movs	r0, #0
    53f4:	4b10      	ldr	r3, [pc, #64]	; (5438 <system_clock_init+0x1f8>)
    53f6:	4798      	blx	r3
#endif
}
    53f8:	46c0      	nop			; (mov r8, r8)
    53fa:	46bd      	mov	sp, r7
    53fc:	b026      	add	sp, #152	; 0x98
    53fe:	bd80      	pop	{r7, pc}
    5400:	40000800 	.word	0x40000800
    5404:	00004e31 	.word	0x00004e31
    5408:	00005209 	.word	0x00005209
    540c:	00004d69 	.word	0x00004d69
    5410:	00806024 	.word	0x00806024
    5414:	000001ff 	.word	0x000001ff
    5418:	ffffbb80 	.word	0xffffbb80
    541c:	00005009 	.word	0x00005009
    5420:	00004d45 	.word	0x00004d45
    5424:	00004f91 	.word	0x00004f91
    5428:	000050d9 	.word	0x000050d9
    542c:	000054ed 	.word	0x000054ed
    5430:	00004d15 	.word	0x00004d15
    5434:	0000551d 	.word	0x0000551d
    5438:	00005641 	.word	0x00005641
    543c:	00005185 	.word	0x00005185
    5440:	00004dbd 	.word	0x00004dbd
    5444:	00004ddd 	.word	0x00004ddd

00005448 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5448:	b580      	push	{r7, lr}
    544a:	b082      	sub	sp, #8
    544c:	af00      	add	r7, sp, #0
    544e:	0002      	movs	r2, r0
    5450:	6039      	str	r1, [r7, #0]
    5452:	1dfb      	adds	r3, r7, #7
    5454:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5456:	1dfb      	adds	r3, r7, #7
    5458:	781b      	ldrb	r3, [r3, #0]
    545a:	2b01      	cmp	r3, #1
    545c:	d00a      	beq.n	5474 <system_apb_clock_set_mask+0x2c>
    545e:	2b02      	cmp	r3, #2
    5460:	d00f      	beq.n	5482 <system_apb_clock_set_mask+0x3a>
    5462:	2b00      	cmp	r3, #0
    5464:	d114      	bne.n	5490 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5466:	4b0e      	ldr	r3, [pc, #56]	; (54a0 <system_apb_clock_set_mask+0x58>)
    5468:	4a0d      	ldr	r2, [pc, #52]	; (54a0 <system_apb_clock_set_mask+0x58>)
    546a:	6991      	ldr	r1, [r2, #24]
    546c:	683a      	ldr	r2, [r7, #0]
    546e:	430a      	orrs	r2, r1
    5470:	619a      	str	r2, [r3, #24]
			break;
    5472:	e00f      	b.n	5494 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5474:	4b0a      	ldr	r3, [pc, #40]	; (54a0 <system_apb_clock_set_mask+0x58>)
    5476:	4a0a      	ldr	r2, [pc, #40]	; (54a0 <system_apb_clock_set_mask+0x58>)
    5478:	69d1      	ldr	r1, [r2, #28]
    547a:	683a      	ldr	r2, [r7, #0]
    547c:	430a      	orrs	r2, r1
    547e:	61da      	str	r2, [r3, #28]
			break;
    5480:	e008      	b.n	5494 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5482:	4b07      	ldr	r3, [pc, #28]	; (54a0 <system_apb_clock_set_mask+0x58>)
    5484:	4a06      	ldr	r2, [pc, #24]	; (54a0 <system_apb_clock_set_mask+0x58>)
    5486:	6a11      	ldr	r1, [r2, #32]
    5488:	683a      	ldr	r2, [r7, #0]
    548a:	430a      	orrs	r2, r1
    548c:	621a      	str	r2, [r3, #32]
			break;
    548e:	e001      	b.n	5494 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5490:	2317      	movs	r3, #23
    5492:	e000      	b.n	5496 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5494:	2300      	movs	r3, #0
}
    5496:	0018      	movs	r0, r3
    5498:	46bd      	mov	sp, r7
    549a:	b002      	add	sp, #8
    549c:	bd80      	pop	{r7, pc}
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	40000400 	.word	0x40000400

000054a4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    54a8:	4b02      	ldr	r3, [pc, #8]	; (54b4 <system_interrupt_enter_critical_section+0x10>)
    54aa:	4798      	blx	r3
}
    54ac:	46c0      	nop			; (mov r8, r8)
    54ae:	46bd      	mov	sp, r7
    54b0:	bd80      	pop	{r7, pc}
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	000044b1 	.word	0x000044b1

000054b8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    54bc:	4b02      	ldr	r3, [pc, #8]	; (54c8 <system_interrupt_leave_critical_section+0x10>)
    54be:	4798      	blx	r3
}
    54c0:	46c0      	nop			; (mov r8, r8)
    54c2:	46bd      	mov	sp, r7
    54c4:	bd80      	pop	{r7, pc}
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	00004505 	.word	0x00004505

000054cc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    54d0:	4b05      	ldr	r3, [pc, #20]	; (54e8 <system_gclk_is_syncing+0x1c>)
    54d2:	785b      	ldrb	r3, [r3, #1]
    54d4:	b2db      	uxtb	r3, r3
    54d6:	b25b      	sxtb	r3, r3
    54d8:	2b00      	cmp	r3, #0
    54da:	da01      	bge.n	54e0 <system_gclk_is_syncing+0x14>
		return true;
    54dc:	2301      	movs	r3, #1
    54de:	e000      	b.n	54e2 <system_gclk_is_syncing+0x16>
	}

	return false;
    54e0:	2300      	movs	r3, #0
}
    54e2:	0018      	movs	r0, r3
    54e4:	46bd      	mov	sp, r7
    54e6:	bd80      	pop	{r7, pc}
    54e8:	40000c00 	.word	0x40000c00

000054ec <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    54f0:	2108      	movs	r1, #8
    54f2:	2000      	movs	r0, #0
    54f4:	4b07      	ldr	r3, [pc, #28]	; (5514 <system_gclk_init+0x28>)
    54f6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    54f8:	4b07      	ldr	r3, [pc, #28]	; (5518 <system_gclk_init+0x2c>)
    54fa:	2201      	movs	r2, #1
    54fc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    54fe:	46c0      	nop			; (mov r8, r8)
    5500:	4b05      	ldr	r3, [pc, #20]	; (5518 <system_gclk_init+0x2c>)
    5502:	781b      	ldrb	r3, [r3, #0]
    5504:	b2db      	uxtb	r3, r3
    5506:	001a      	movs	r2, r3
    5508:	2301      	movs	r3, #1
    550a:	4013      	ands	r3, r2
    550c:	d1f8      	bne.n	5500 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	46bd      	mov	sp, r7
    5512:	bd80      	pop	{r7, pc}
    5514:	00005449 	.word	0x00005449
    5518:	40000c00 	.word	0x40000c00

0000551c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    551c:	b580      	push	{r7, lr}
    551e:	b086      	sub	sp, #24
    5520:	af00      	add	r7, sp, #0
    5522:	0002      	movs	r2, r0
    5524:	6039      	str	r1, [r7, #0]
    5526:	1dfb      	adds	r3, r7, #7
    5528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    552a:	1dfb      	adds	r3, r7, #7
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5530:	1dfb      	adds	r3, r7, #7
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5536:	683b      	ldr	r3, [r7, #0]
    5538:	781b      	ldrb	r3, [r3, #0]
    553a:	021b      	lsls	r3, r3, #8
    553c:	001a      	movs	r2, r3
    553e:	697b      	ldr	r3, [r7, #20]
    5540:	4313      	orrs	r3, r2
    5542:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5544:	683b      	ldr	r3, [r7, #0]
    5546:	785b      	ldrb	r3, [r3, #1]
    5548:	2b00      	cmp	r3, #0
    554a:	d004      	beq.n	5556 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    554c:	697b      	ldr	r3, [r7, #20]
    554e:	2280      	movs	r2, #128	; 0x80
    5550:	02d2      	lsls	r2, r2, #11
    5552:	4313      	orrs	r3, r2
    5554:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5556:	683b      	ldr	r3, [r7, #0]
    5558:	7a5b      	ldrb	r3, [r3, #9]
    555a:	2b00      	cmp	r3, #0
    555c:	d004      	beq.n	5568 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    555e:	697b      	ldr	r3, [r7, #20]
    5560:	2280      	movs	r2, #128	; 0x80
    5562:	0312      	lsls	r2, r2, #12
    5564:	4313      	orrs	r3, r2
    5566:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5568:	683b      	ldr	r3, [r7, #0]
    556a:	685b      	ldr	r3, [r3, #4]
    556c:	2b01      	cmp	r3, #1
    556e:	d92c      	bls.n	55ca <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5570:	683b      	ldr	r3, [r7, #0]
    5572:	685a      	ldr	r2, [r3, #4]
    5574:	683b      	ldr	r3, [r7, #0]
    5576:	685b      	ldr	r3, [r3, #4]
    5578:	3b01      	subs	r3, #1
    557a:	4013      	ands	r3, r2
    557c:	d11a      	bne.n	55b4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    557e:	2300      	movs	r3, #0
    5580:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5582:	2302      	movs	r3, #2
    5584:	60bb      	str	r3, [r7, #8]
    5586:	e005      	b.n	5594 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	3301      	adds	r3, #1
    558c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	005b      	lsls	r3, r3, #1
    5592:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5594:	683b      	ldr	r3, [r7, #0]
    5596:	685a      	ldr	r2, [r3, #4]
    5598:	68bb      	ldr	r3, [r7, #8]
    559a:	429a      	cmp	r2, r3
    559c:	d8f4      	bhi.n	5588 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    559e:	68fb      	ldr	r3, [r7, #12]
    55a0:	021b      	lsls	r3, r3, #8
    55a2:	693a      	ldr	r2, [r7, #16]
    55a4:	4313      	orrs	r3, r2
    55a6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    55a8:	697b      	ldr	r3, [r7, #20]
    55aa:	2280      	movs	r2, #128	; 0x80
    55ac:	0352      	lsls	r2, r2, #13
    55ae:	4313      	orrs	r3, r2
    55b0:	617b      	str	r3, [r7, #20]
    55b2:	e00a      	b.n	55ca <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    55b4:	683b      	ldr	r3, [r7, #0]
    55b6:	685b      	ldr	r3, [r3, #4]
    55b8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    55ba:	693a      	ldr	r2, [r7, #16]
    55bc:	4313      	orrs	r3, r2
    55be:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    55c0:	697b      	ldr	r3, [r7, #20]
    55c2:	2280      	movs	r2, #128	; 0x80
    55c4:	0292      	lsls	r2, r2, #10
    55c6:	4313      	orrs	r3, r2
    55c8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    55ca:	683b      	ldr	r3, [r7, #0]
    55cc:	7a1b      	ldrb	r3, [r3, #8]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d004      	beq.n	55dc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    55d2:	697b      	ldr	r3, [r7, #20]
    55d4:	2280      	movs	r2, #128	; 0x80
    55d6:	0392      	lsls	r2, r2, #14
    55d8:	4313      	orrs	r3, r2
    55da:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    55dc:	46c0      	nop			; (mov r8, r8)
    55de:	4b13      	ldr	r3, [pc, #76]	; (562c <system_gclk_gen_set_config+0x110>)
    55e0:	4798      	blx	r3
    55e2:	1e03      	subs	r3, r0, #0
    55e4:	d1fb      	bne.n	55de <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    55e6:	4b12      	ldr	r3, [pc, #72]	; (5630 <system_gclk_gen_set_config+0x114>)
    55e8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    55ea:	4a12      	ldr	r2, [pc, #72]	; (5634 <system_gclk_gen_set_config+0x118>)
    55ec:	1dfb      	adds	r3, r7, #7
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	4b0d      	ldr	r3, [pc, #52]	; (562c <system_gclk_gen_set_config+0x110>)
    55f6:	4798      	blx	r3
    55f8:	1e03      	subs	r3, r0, #0
    55fa:	d1fb      	bne.n	55f4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    55fc:	4b0e      	ldr	r3, [pc, #56]	; (5638 <system_gclk_gen_set_config+0x11c>)
    55fe:	693a      	ldr	r2, [r7, #16]
    5600:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5602:	46c0      	nop			; (mov r8, r8)
    5604:	4b09      	ldr	r3, [pc, #36]	; (562c <system_gclk_gen_set_config+0x110>)
    5606:	4798      	blx	r3
    5608:	1e03      	subs	r3, r0, #0
    560a:	d1fb      	bne.n	5604 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    560c:	4b0a      	ldr	r3, [pc, #40]	; (5638 <system_gclk_gen_set_config+0x11c>)
    560e:	4a0a      	ldr	r2, [pc, #40]	; (5638 <system_gclk_gen_set_config+0x11c>)
    5610:	6851      	ldr	r1, [r2, #4]
    5612:	2280      	movs	r2, #128	; 0x80
    5614:	0252      	lsls	r2, r2, #9
    5616:	4011      	ands	r1, r2
    5618:	697a      	ldr	r2, [r7, #20]
    561a:	430a      	orrs	r2, r1
    561c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    561e:	4b07      	ldr	r3, [pc, #28]	; (563c <system_gclk_gen_set_config+0x120>)
    5620:	4798      	blx	r3
}
    5622:	46c0      	nop			; (mov r8, r8)
    5624:	46bd      	mov	sp, r7
    5626:	b006      	add	sp, #24
    5628:	bd80      	pop	{r7, pc}
    562a:	46c0      	nop			; (mov r8, r8)
    562c:	000054cd 	.word	0x000054cd
    5630:	000054a5 	.word	0x000054a5
    5634:	40000c08 	.word	0x40000c08
    5638:	40000c00 	.word	0x40000c00
    563c:	000054b9 	.word	0x000054b9

00005640 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	0002      	movs	r2, r0
    5648:	1dfb      	adds	r3, r7, #7
    564a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    564c:	46c0      	nop			; (mov r8, r8)
    564e:	4b0e      	ldr	r3, [pc, #56]	; (5688 <system_gclk_gen_enable+0x48>)
    5650:	4798      	blx	r3
    5652:	1e03      	subs	r3, r0, #0
    5654:	d1fb      	bne.n	564e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5656:	4b0d      	ldr	r3, [pc, #52]	; (568c <system_gclk_gen_enable+0x4c>)
    5658:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    565a:	4a0d      	ldr	r2, [pc, #52]	; (5690 <system_gclk_gen_enable+0x50>)
    565c:	1dfb      	adds	r3, r7, #7
    565e:	781b      	ldrb	r3, [r3, #0]
    5660:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5662:	46c0      	nop			; (mov r8, r8)
    5664:	4b08      	ldr	r3, [pc, #32]	; (5688 <system_gclk_gen_enable+0x48>)
    5666:	4798      	blx	r3
    5668:	1e03      	subs	r3, r0, #0
    566a:	d1fb      	bne.n	5664 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    566c:	4b09      	ldr	r3, [pc, #36]	; (5694 <system_gclk_gen_enable+0x54>)
    566e:	4a09      	ldr	r2, [pc, #36]	; (5694 <system_gclk_gen_enable+0x54>)
    5670:	6852      	ldr	r2, [r2, #4]
    5672:	2180      	movs	r1, #128	; 0x80
    5674:	0249      	lsls	r1, r1, #9
    5676:	430a      	orrs	r2, r1
    5678:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    567a:	4b07      	ldr	r3, [pc, #28]	; (5698 <system_gclk_gen_enable+0x58>)
    567c:	4798      	blx	r3
}
    567e:	46c0      	nop			; (mov r8, r8)
    5680:	46bd      	mov	sp, r7
    5682:	b002      	add	sp, #8
    5684:	bd80      	pop	{r7, pc}
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	000054cd 	.word	0x000054cd
    568c:	000054a5 	.word	0x000054a5
    5690:	40000c04 	.word	0x40000c04
    5694:	40000c00 	.word	0x40000c00
    5698:	000054b9 	.word	0x000054b9

0000569c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    569c:	b580      	push	{r7, lr}
    569e:	b086      	sub	sp, #24
    56a0:	af00      	add	r7, sp, #0
    56a2:	0002      	movs	r2, r0
    56a4:	1dfb      	adds	r3, r7, #7
    56a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    56a8:	46c0      	nop			; (mov r8, r8)
    56aa:	4b2a      	ldr	r3, [pc, #168]	; (5754 <system_gclk_gen_get_hz+0xb8>)
    56ac:	4798      	blx	r3
    56ae:	1e03      	subs	r3, r0, #0
    56b0:	d1fb      	bne.n	56aa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    56b2:	4b29      	ldr	r3, [pc, #164]	; (5758 <system_gclk_gen_get_hz+0xbc>)
    56b4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    56b6:	4a29      	ldr	r2, [pc, #164]	; (575c <system_gclk_gen_get_hz+0xc0>)
    56b8:	1dfb      	adds	r3, r7, #7
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    56be:	46c0      	nop			; (mov r8, r8)
    56c0:	4b24      	ldr	r3, [pc, #144]	; (5754 <system_gclk_gen_get_hz+0xb8>)
    56c2:	4798      	blx	r3
    56c4:	1e03      	subs	r3, r0, #0
    56c6:	d1fb      	bne.n	56c0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    56c8:	4b25      	ldr	r3, [pc, #148]	; (5760 <system_gclk_gen_get_hz+0xc4>)
    56ca:	685b      	ldr	r3, [r3, #4]
    56cc:	04db      	lsls	r3, r3, #19
    56ce:	0edb      	lsrs	r3, r3, #27
    56d0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    56d2:	0018      	movs	r0, r3
    56d4:	4b23      	ldr	r3, [pc, #140]	; (5764 <system_gclk_gen_get_hz+0xc8>)
    56d6:	4798      	blx	r3
    56d8:	0003      	movs	r3, r0
    56da:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    56dc:	4a1f      	ldr	r2, [pc, #124]	; (575c <system_gclk_gen_get_hz+0xc0>)
    56de:	1dfb      	adds	r3, r7, #7
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    56e4:	4b1e      	ldr	r3, [pc, #120]	; (5760 <system_gclk_gen_get_hz+0xc4>)
    56e6:	685b      	ldr	r3, [r3, #4]
    56e8:	02db      	lsls	r3, r3, #11
    56ea:	0fdb      	lsrs	r3, r3, #31
    56ec:	b2da      	uxtb	r2, r3
    56ee:	2313      	movs	r3, #19
    56f0:	18fb      	adds	r3, r7, r3
    56f2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    56f4:	4a1c      	ldr	r2, [pc, #112]	; (5768 <system_gclk_gen_get_hz+0xcc>)
    56f6:	1dfb      	adds	r3, r7, #7
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    56fc:	46c0      	nop			; (mov r8, r8)
    56fe:	4b15      	ldr	r3, [pc, #84]	; (5754 <system_gclk_gen_get_hz+0xb8>)
    5700:	4798      	blx	r3
    5702:	1e03      	subs	r3, r0, #0
    5704:	d1fb      	bne.n	56fe <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5706:	4b16      	ldr	r3, [pc, #88]	; (5760 <system_gclk_gen_get_hz+0xc4>)
    5708:	689b      	ldr	r3, [r3, #8]
    570a:	021b      	lsls	r3, r3, #8
    570c:	0c1b      	lsrs	r3, r3, #16
    570e:	b29b      	uxth	r3, r3
    5710:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5712:	4b16      	ldr	r3, [pc, #88]	; (576c <system_gclk_gen_get_hz+0xd0>)
    5714:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5716:	2313      	movs	r3, #19
    5718:	18fb      	adds	r3, r7, r3
    571a:	781b      	ldrb	r3, [r3, #0]
    571c:	2b00      	cmp	r3, #0
    571e:	d109      	bne.n	5734 <system_gclk_gen_get_hz+0x98>
    5720:	68fb      	ldr	r3, [r7, #12]
    5722:	2b01      	cmp	r3, #1
    5724:	d906      	bls.n	5734 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5726:	4b12      	ldr	r3, [pc, #72]	; (5770 <system_gclk_gen_get_hz+0xd4>)
    5728:	68f9      	ldr	r1, [r7, #12]
    572a:	6978      	ldr	r0, [r7, #20]
    572c:	4798      	blx	r3
    572e:	0003      	movs	r3, r0
    5730:	617b      	str	r3, [r7, #20]
    5732:	e00a      	b.n	574a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5734:	2313      	movs	r3, #19
    5736:	18fb      	adds	r3, r7, r3
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d005      	beq.n	574a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	3301      	adds	r3, #1
    5742:	697a      	ldr	r2, [r7, #20]
    5744:	40da      	lsrs	r2, r3
    5746:	0013      	movs	r3, r2
    5748:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    574a:	697b      	ldr	r3, [r7, #20]
}
    574c:	0018      	movs	r0, r3
    574e:	46bd      	mov	sp, r7
    5750:	b006      	add	sp, #24
    5752:	bd80      	pop	{r7, pc}
    5754:	000054cd 	.word	0x000054cd
    5758:	000054a5 	.word	0x000054a5
    575c:	40000c04 	.word	0x40000c04
    5760:	40000c00 	.word	0x40000c00
    5764:	00004ec5 	.word	0x00004ec5
    5768:	40000c08 	.word	0x40000c08
    576c:	000054b9 	.word	0x000054b9
    5770:	000099dd 	.word	0x000099dd

00005774 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5774:	b580      	push	{r7, lr}
    5776:	b084      	sub	sp, #16
    5778:	af00      	add	r7, sp, #0
    577a:	0002      	movs	r2, r0
    577c:	6039      	str	r1, [r7, #0]
    577e:	1dfb      	adds	r3, r7, #7
    5780:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    5782:	1dfb      	adds	r3, r7, #7
    5784:	781b      	ldrb	r3, [r3, #0]
    5786:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5788:	683b      	ldr	r3, [r7, #0]
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	021b      	lsls	r3, r3, #8
    578e:	001a      	movs	r2, r3
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	4313      	orrs	r3, r2
    5794:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5796:	1dfb      	adds	r3, r7, #7
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	0018      	movs	r0, r3
    579c:	4b04      	ldr	r3, [pc, #16]	; (57b0 <system_gclk_chan_set_config+0x3c>)
    579e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    57a0:	4b04      	ldr	r3, [pc, #16]	; (57b4 <system_gclk_chan_set_config+0x40>)
    57a2:	68fa      	ldr	r2, [r7, #12]
    57a4:	b292      	uxth	r2, r2
    57a6:	805a      	strh	r2, [r3, #2]
}
    57a8:	46c0      	nop			; (mov r8, r8)
    57aa:	46bd      	mov	sp, r7
    57ac:	b004      	add	sp, #16
    57ae:	bd80      	pop	{r7, pc}
    57b0:	00005801 	.word	0x00005801
    57b4:	40000c00 	.word	0x40000c00

000057b8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    57b8:	b580      	push	{r7, lr}
    57ba:	b082      	sub	sp, #8
    57bc:	af00      	add	r7, sp, #0
    57be:	0002      	movs	r2, r0
    57c0:	1dfb      	adds	r3, r7, #7
    57c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    57c4:	4b0a      	ldr	r3, [pc, #40]	; (57f0 <system_gclk_chan_enable+0x38>)
    57c6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    57c8:	4a0a      	ldr	r2, [pc, #40]	; (57f4 <system_gclk_chan_enable+0x3c>)
    57ca:	1dfb      	adds	r3, r7, #7
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    57d0:	4909      	ldr	r1, [pc, #36]	; (57f8 <system_gclk_chan_enable+0x40>)
    57d2:	4b09      	ldr	r3, [pc, #36]	; (57f8 <system_gclk_chan_enable+0x40>)
    57d4:	885b      	ldrh	r3, [r3, #2]
    57d6:	b29b      	uxth	r3, r3
    57d8:	2280      	movs	r2, #128	; 0x80
    57da:	01d2      	lsls	r2, r2, #7
    57dc:	4313      	orrs	r3, r2
    57de:	b29b      	uxth	r3, r3
    57e0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    57e2:	4b06      	ldr	r3, [pc, #24]	; (57fc <system_gclk_chan_enable+0x44>)
    57e4:	4798      	blx	r3
}
    57e6:	46c0      	nop			; (mov r8, r8)
    57e8:	46bd      	mov	sp, r7
    57ea:	b002      	add	sp, #8
    57ec:	bd80      	pop	{r7, pc}
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	000054a5 	.word	0x000054a5
    57f4:	40000c02 	.word	0x40000c02
    57f8:	40000c00 	.word	0x40000c00
    57fc:	000054b9 	.word	0x000054b9

00005800 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	0002      	movs	r2, r0
    5808:	1dfb      	adds	r3, r7, #7
    580a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    580c:	4b1c      	ldr	r3, [pc, #112]	; (5880 <system_gclk_chan_disable+0x80>)
    580e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5810:	4a1c      	ldr	r2, [pc, #112]	; (5884 <system_gclk_chan_disable+0x84>)
    5812:	1dfb      	adds	r3, r7, #7
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5818:	4b1b      	ldr	r3, [pc, #108]	; (5888 <system_gclk_chan_disable+0x88>)
    581a:	885b      	ldrh	r3, [r3, #2]
    581c:	051b      	lsls	r3, r3, #20
    581e:	0f1b      	lsrs	r3, r3, #28
    5820:	b2db      	uxtb	r3, r3
    5822:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5824:	4a18      	ldr	r2, [pc, #96]	; (5888 <system_gclk_chan_disable+0x88>)
    5826:	8853      	ldrh	r3, [r2, #2]
    5828:	4918      	ldr	r1, [pc, #96]	; (588c <system_gclk_chan_disable+0x8c>)
    582a:	400b      	ands	r3, r1
    582c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    582e:	4a16      	ldr	r2, [pc, #88]	; (5888 <system_gclk_chan_disable+0x88>)
    5830:	4b15      	ldr	r3, [pc, #84]	; (5888 <system_gclk_chan_disable+0x88>)
    5832:	885b      	ldrh	r3, [r3, #2]
    5834:	b29b      	uxth	r3, r3
    5836:	4916      	ldr	r1, [pc, #88]	; (5890 <system_gclk_chan_disable+0x90>)
    5838:	400b      	ands	r3, r1
    583a:	b29b      	uxth	r3, r3
    583c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	4b11      	ldr	r3, [pc, #68]	; (5888 <system_gclk_chan_disable+0x88>)
    5842:	885b      	ldrh	r3, [r3, #2]
    5844:	b29b      	uxth	r3, r3
    5846:	001a      	movs	r2, r3
    5848:	2380      	movs	r3, #128	; 0x80
    584a:	01db      	lsls	r3, r3, #7
    584c:	4013      	ands	r3, r2
    584e:	d1f7      	bne.n	5840 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5850:	4a0d      	ldr	r2, [pc, #52]	; (5888 <system_gclk_chan_disable+0x88>)
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	b2db      	uxtb	r3, r3
    5856:	1c19      	adds	r1, r3, #0
    5858:	230f      	movs	r3, #15
    585a:	400b      	ands	r3, r1
    585c:	b2d9      	uxtb	r1, r3
    585e:	8853      	ldrh	r3, [r2, #2]
    5860:	1c08      	adds	r0, r1, #0
    5862:	210f      	movs	r1, #15
    5864:	4001      	ands	r1, r0
    5866:	0208      	lsls	r0, r1, #8
    5868:	4908      	ldr	r1, [pc, #32]	; (588c <system_gclk_chan_disable+0x8c>)
    586a:	400b      	ands	r3, r1
    586c:	1c19      	adds	r1, r3, #0
    586e:	1c03      	adds	r3, r0, #0
    5870:	430b      	orrs	r3, r1
    5872:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5874:	4b07      	ldr	r3, [pc, #28]	; (5894 <system_gclk_chan_disable+0x94>)
    5876:	4798      	blx	r3
}
    5878:	46c0      	nop			; (mov r8, r8)
    587a:	46bd      	mov	sp, r7
    587c:	b004      	add	sp, #16
    587e:	bd80      	pop	{r7, pc}
    5880:	000054a5 	.word	0x000054a5
    5884:	40000c02 	.word	0x40000c02
    5888:	40000c00 	.word	0x40000c00
    588c:	fffff0ff 	.word	0xfffff0ff
    5890:	ffffbfff 	.word	0xffffbfff
    5894:	000054b9 	.word	0x000054b9

00005898 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5898:	b580      	push	{r7, lr}
    589a:	b084      	sub	sp, #16
    589c:	af00      	add	r7, sp, #0
    589e:	0002      	movs	r2, r0
    58a0:	1dfb      	adds	r3, r7, #7
    58a2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    58a4:	4b0d      	ldr	r3, [pc, #52]	; (58dc <system_gclk_chan_get_hz+0x44>)
    58a6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    58a8:	4a0d      	ldr	r2, [pc, #52]	; (58e0 <system_gclk_chan_get_hz+0x48>)
    58aa:	1dfb      	adds	r3, r7, #7
    58ac:	781b      	ldrb	r3, [r3, #0]
    58ae:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    58b0:	4b0c      	ldr	r3, [pc, #48]	; (58e4 <system_gclk_chan_get_hz+0x4c>)
    58b2:	885b      	ldrh	r3, [r3, #2]
    58b4:	051b      	lsls	r3, r3, #20
    58b6:	0f1b      	lsrs	r3, r3, #28
    58b8:	b2da      	uxtb	r2, r3
    58ba:	230f      	movs	r3, #15
    58bc:	18fb      	adds	r3, r7, r3
    58be:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    58c0:	4b09      	ldr	r3, [pc, #36]	; (58e8 <system_gclk_chan_get_hz+0x50>)
    58c2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    58c4:	230f      	movs	r3, #15
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	0018      	movs	r0, r3
    58cc:	4b07      	ldr	r3, [pc, #28]	; (58ec <system_gclk_chan_get_hz+0x54>)
    58ce:	4798      	blx	r3
    58d0:	0003      	movs	r3, r0
}
    58d2:	0018      	movs	r0, r3
    58d4:	46bd      	mov	sp, r7
    58d6:	b004      	add	sp, #16
    58d8:	bd80      	pop	{r7, pc}
    58da:	46c0      	nop			; (mov r8, r8)
    58dc:	000054a5 	.word	0x000054a5
    58e0:	40000c02 	.word	0x40000c02
    58e4:	40000c00 	.word	0x40000c00
    58e8:	000054b9 	.word	0x000054b9
    58ec:	0000569d 	.word	0x0000569d

000058f0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    58f0:	b580      	push	{r7, lr}
    58f2:	b084      	sub	sp, #16
    58f4:	af00      	add	r7, sp, #0
    58f6:	0002      	movs	r2, r0
    58f8:	1dfb      	adds	r3, r7, #7
    58fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    58fc:	230f      	movs	r3, #15
    58fe:	18fb      	adds	r3, r7, r3
    5900:	1dfa      	adds	r2, r7, #7
    5902:	7812      	ldrb	r2, [r2, #0]
    5904:	09d2      	lsrs	r2, r2, #7
    5906:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5908:	230e      	movs	r3, #14
    590a:	18fb      	adds	r3, r7, r3
    590c:	1dfa      	adds	r2, r7, #7
    590e:	7812      	ldrb	r2, [r2, #0]
    5910:	0952      	lsrs	r2, r2, #5
    5912:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5914:	4b0d      	ldr	r3, [pc, #52]	; (594c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5916:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5918:	230f      	movs	r3, #15
    591a:	18fb      	adds	r3, r7, r3
    591c:	781b      	ldrb	r3, [r3, #0]
    591e:	2b00      	cmp	r3, #0
    5920:	d10f      	bne.n	5942 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5922:	230f      	movs	r3, #15
    5924:	18fb      	adds	r3, r7, r3
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	009b      	lsls	r3, r3, #2
    592a:	2210      	movs	r2, #16
    592c:	4694      	mov	ip, r2
    592e:	44bc      	add	ip, r7
    5930:	4463      	add	r3, ip
    5932:	3b08      	subs	r3, #8
    5934:	681a      	ldr	r2, [r3, #0]
    5936:	230e      	movs	r3, #14
    5938:	18fb      	adds	r3, r7, r3
    593a:	781b      	ldrb	r3, [r3, #0]
    593c:	01db      	lsls	r3, r3, #7
    593e:	18d3      	adds	r3, r2, r3
    5940:	e000      	b.n	5944 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5942:	2300      	movs	r3, #0
	}
}
    5944:	0018      	movs	r0, r3
    5946:	46bd      	mov	sp, r7
    5948:	b004      	add	sp, #16
    594a:	bd80      	pop	{r7, pc}
    594c:	41004400 	.word	0x41004400

00005950 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5950:	b580      	push	{r7, lr}
    5952:	b088      	sub	sp, #32
    5954:	af00      	add	r7, sp, #0
    5956:	60f8      	str	r0, [r7, #12]
    5958:	60b9      	str	r1, [r7, #8]
    595a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    595c:	2300      	movs	r3, #0
    595e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	78db      	ldrb	r3, [r3, #3]
    5964:	2201      	movs	r2, #1
    5966:	4053      	eors	r3, r2
    5968:	b2db      	uxtb	r3, r3
    596a:	2b00      	cmp	r3, #0
    596c:	d035      	beq.n	59da <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	781b      	ldrb	r3, [r3, #0]
    5972:	2b80      	cmp	r3, #128	; 0x80
    5974:	d00b      	beq.n	598e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5976:	69fb      	ldr	r3, [r7, #28]
    5978:	2280      	movs	r2, #128	; 0x80
    597a:	0252      	lsls	r2, r2, #9
    597c:	4313      	orrs	r3, r2
    597e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	781b      	ldrb	r3, [r3, #0]
    5984:	061b      	lsls	r3, r3, #24
    5986:	001a      	movs	r2, r3
    5988:	69fb      	ldr	r3, [r7, #28]
    598a:	4313      	orrs	r3, r2
    598c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    598e:	687b      	ldr	r3, [r7, #4]
    5990:	785b      	ldrb	r3, [r3, #1]
    5992:	2b00      	cmp	r3, #0
    5994:	d003      	beq.n	599e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    599a:	2b02      	cmp	r3, #2
    599c:	d110      	bne.n	59c0 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    599e:	69fb      	ldr	r3, [r7, #28]
    59a0:	2280      	movs	r2, #128	; 0x80
    59a2:	0292      	lsls	r2, r2, #10
    59a4:	4313      	orrs	r3, r2
    59a6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	789b      	ldrb	r3, [r3, #2]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d004      	beq.n	59ba <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    59b0:	69fb      	ldr	r3, [r7, #28]
    59b2:	2280      	movs	r2, #128	; 0x80
    59b4:	02d2      	lsls	r2, r2, #11
    59b6:	4313      	orrs	r3, r2
    59b8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    59ba:	68fb      	ldr	r3, [r7, #12]
    59bc:	68ba      	ldr	r2, [r7, #8]
    59be:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	785b      	ldrb	r3, [r3, #1]
    59c4:	2b01      	cmp	r3, #1
    59c6:	d003      	beq.n	59d0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    59cc:	2b02      	cmp	r3, #2
    59ce:	d107      	bne.n	59e0 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    59d0:	69fb      	ldr	r3, [r7, #28]
    59d2:	4a22      	ldr	r2, [pc, #136]	; (5a5c <_system_pinmux_config+0x10c>)
    59d4:	4013      	ands	r3, r2
    59d6:	61fb      	str	r3, [r7, #28]
    59d8:	e002      	b.n	59e0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	68ba      	ldr	r2, [r7, #8]
    59de:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    59e0:	68bb      	ldr	r3, [r7, #8]
    59e2:	041b      	lsls	r3, r3, #16
    59e4:	0c1b      	lsrs	r3, r3, #16
    59e6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    59e8:	68bb      	ldr	r3, [r7, #8]
    59ea:	0c1b      	lsrs	r3, r3, #16
    59ec:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    59ee:	69ba      	ldr	r2, [r7, #24]
    59f0:	69fb      	ldr	r3, [r7, #28]
    59f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    59f4:	22a0      	movs	r2, #160	; 0xa0
    59f6:	05d2      	lsls	r2, r2, #23
    59f8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    59fa:	68fb      	ldr	r3, [r7, #12]
    59fc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    59fe:	697a      	ldr	r2, [r7, #20]
    5a00:	69fb      	ldr	r3, [r7, #28]
    5a02:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a04:	22d0      	movs	r2, #208	; 0xd0
    5a06:	0612      	lsls	r2, r2, #24
    5a08:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	78db      	ldrb	r3, [r3, #3]
    5a12:	2201      	movs	r2, #1
    5a14:	4053      	eors	r3, r2
    5a16:	b2db      	uxtb	r3, r3
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d01a      	beq.n	5a52 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5a1c:	69fa      	ldr	r2, [r7, #28]
    5a1e:	2380      	movs	r3, #128	; 0x80
    5a20:	02db      	lsls	r3, r3, #11
    5a22:	4013      	ands	r3, r2
    5a24:	d00a      	beq.n	5a3c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	789b      	ldrb	r3, [r3, #2]
    5a2a:	2b01      	cmp	r3, #1
    5a2c:	d103      	bne.n	5a36 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5a2e:	68fb      	ldr	r3, [r7, #12]
    5a30:	68ba      	ldr	r2, [r7, #8]
    5a32:	619a      	str	r2, [r3, #24]
    5a34:	e002      	b.n	5a3c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	68ba      	ldr	r2, [r7, #8]
    5a3a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	785b      	ldrb	r3, [r3, #1]
    5a40:	2b01      	cmp	r3, #1
    5a42:	d003      	beq.n	5a4c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a48:	2b02      	cmp	r3, #2
    5a4a:	d102      	bne.n	5a52 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	68ba      	ldr	r2, [r7, #8]
    5a50:	609a      	str	r2, [r3, #8]
		}
	}
}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	46bd      	mov	sp, r7
    5a56:	b008      	add	sp, #32
    5a58:	bd80      	pop	{r7, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	fffbffff 	.word	0xfffbffff

00005a60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b084      	sub	sp, #16
    5a64:	af00      	add	r7, sp, #0
    5a66:	0002      	movs	r2, r0
    5a68:	6039      	str	r1, [r7, #0]
    5a6a:	1dfb      	adds	r3, r7, #7
    5a6c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5a6e:	1dfb      	adds	r3, r7, #7
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	0018      	movs	r0, r3
    5a74:	4b0a      	ldr	r3, [pc, #40]	; (5aa0 <system_pinmux_pin_set_config+0x40>)
    5a76:	4798      	blx	r3
    5a78:	0003      	movs	r3, r0
    5a7a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5a7c:	1dfb      	adds	r3, r7, #7
    5a7e:	781b      	ldrb	r3, [r3, #0]
    5a80:	221f      	movs	r2, #31
    5a82:	4013      	ands	r3, r2
    5a84:	2201      	movs	r2, #1
    5a86:	409a      	lsls	r2, r3
    5a88:	0013      	movs	r3, r2
    5a8a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5a8c:	683a      	ldr	r2, [r7, #0]
    5a8e:	68b9      	ldr	r1, [r7, #8]
    5a90:	68fb      	ldr	r3, [r7, #12]
    5a92:	0018      	movs	r0, r3
    5a94:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <system_pinmux_pin_set_config+0x44>)
    5a96:	4798      	blx	r3
}
    5a98:	46c0      	nop			; (mov r8, r8)
    5a9a:	46bd      	mov	sp, r7
    5a9c:	b004      	add	sp, #16
    5a9e:	bd80      	pop	{r7, pc}
    5aa0:	000058f1 	.word	0x000058f1
    5aa4:	00005951 	.word	0x00005951

00005aa8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5aa8:	b580      	push	{r7, lr}
    5aaa:	af00      	add	r7, sp, #0
	return;
    5aac:	46c0      	nop			; (mov r8, r8)
}
    5aae:	46bd      	mov	sp, r7
    5ab0:	bd80      	pop	{r7, pc}
    5ab2:	46c0      	nop			; (mov r8, r8)

00005ab4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5ab8:	4b06      	ldr	r3, [pc, #24]	; (5ad4 <system_init+0x20>)
    5aba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5abc:	4b06      	ldr	r3, [pc, #24]	; (5ad8 <system_init+0x24>)
    5abe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5ac0:	4b06      	ldr	r3, [pc, #24]	; (5adc <system_init+0x28>)
    5ac2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5ac4:	4b06      	ldr	r3, [pc, #24]	; (5ae0 <system_init+0x2c>)
    5ac6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5ac8:	4b06      	ldr	r3, [pc, #24]	; (5ae4 <system_init+0x30>)
    5aca:	4798      	blx	r3
}
    5acc:	46c0      	nop			; (mov r8, r8)
    5ace:	46bd      	mov	sp, r7
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	00005241 	.word	0x00005241
    5ad8:	00004641 	.word	0x00004641
    5adc:	00005aa9 	.word	0x00005aa9
    5ae0:	00004a19 	.word	0x00004a19
    5ae4:	00005aa9 	.word	0x00005aa9

00005ae8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b082      	sub	sp, #8
    5aec:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5aee:	f3ef 8310 	mrs	r3, PRIMASK
    5af2:	603b      	str	r3, [r7, #0]
  return(result);
    5af4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    5af6:	425a      	negs	r2, r3
    5af8:	4153      	adcs	r3, r2
    5afa:	b2db      	uxtb	r3, r3
    5afc:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5afe:	b672      	cpsid	i
    5b00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5b04:	4b03      	ldr	r3, [pc, #12]	; (5b14 <cpu_irq_save+0x2c>)
    5b06:	2200      	movs	r2, #0
    5b08:	701a      	strb	r2, [r3, #0]
	return flags;
    5b0a:	687b      	ldr	r3, [r7, #4]
}
    5b0c:	0018      	movs	r0, r3
    5b0e:	46bd      	mov	sp, r7
    5b10:	b002      	add	sp, #8
    5b12:	bd80      	pop	{r7, pc}
    5b14:	200000d8 	.word	0x200000d8

00005b18 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b082      	sub	sp, #8
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
	return (flags);
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	1e5a      	subs	r2, r3, #1
    5b24:	4193      	sbcs	r3, r2
    5b26:	b2db      	uxtb	r3, r3
}
    5b28:	0018      	movs	r0, r3
    5b2a:	46bd      	mov	sp, r7
    5b2c:	b002      	add	sp, #8
    5b2e:	bd80      	pop	{r7, pc}

00005b30 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b082      	sub	sp, #8
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	0018      	movs	r0, r3
    5b3c:	4b06      	ldr	r3, [pc, #24]	; (5b58 <cpu_irq_restore+0x28>)
    5b3e:	4798      	blx	r3
    5b40:	1e03      	subs	r3, r0, #0
    5b42:	d005      	beq.n	5b50 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    5b44:	4b05      	ldr	r3, [pc, #20]	; (5b5c <cpu_irq_restore+0x2c>)
    5b46:	2201      	movs	r2, #1
    5b48:	701a      	strb	r2, [r3, #0]
    5b4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5b4e:	b662      	cpsie	i
}
    5b50:	46c0      	nop			; (mov r8, r8)
    5b52:	46bd      	mov	sp, r7
    5b54:	b002      	add	sp, #8
    5b56:	bd80      	pop	{r7, pc}
    5b58:	00005b19 	.word	0x00005b19
    5b5c:	200000d8 	.word	0x200000d8

00005b60 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5b60:	b580      	push	{r7, lr}
    5b62:	b084      	sub	sp, #16
    5b64:	af00      	add	r7, sp, #0
    5b66:	0002      	movs	r2, r0
    5b68:	1dfb      	adds	r3, r7, #7
    5b6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5b6c:	230f      	movs	r3, #15
    5b6e:	18fb      	adds	r3, r7, r3
    5b70:	1dfa      	adds	r2, r7, #7
    5b72:	7812      	ldrb	r2, [r2, #0]
    5b74:	09d2      	lsrs	r2, r2, #7
    5b76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5b78:	230e      	movs	r3, #14
    5b7a:	18fb      	adds	r3, r7, r3
    5b7c:	1dfa      	adds	r2, r7, #7
    5b7e:	7812      	ldrb	r2, [r2, #0]
    5b80:	0952      	lsrs	r2, r2, #5
    5b82:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5b84:	4b0d      	ldr	r3, [pc, #52]	; (5bbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5b86:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5b88:	230f      	movs	r3, #15
    5b8a:	18fb      	adds	r3, r7, r3
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d10f      	bne.n	5bb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5b92:	230f      	movs	r3, #15
    5b94:	18fb      	adds	r3, r7, r3
    5b96:	781b      	ldrb	r3, [r3, #0]
    5b98:	009b      	lsls	r3, r3, #2
    5b9a:	2210      	movs	r2, #16
    5b9c:	4694      	mov	ip, r2
    5b9e:	44bc      	add	ip, r7
    5ba0:	4463      	add	r3, ip
    5ba2:	3b08      	subs	r3, #8
    5ba4:	681a      	ldr	r2, [r3, #0]
    5ba6:	230e      	movs	r3, #14
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	01db      	lsls	r3, r3, #7
    5bae:	18d3      	adds	r3, r2, r3
    5bb0:	e000      	b.n	5bb4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5bb2:	2300      	movs	r3, #0
	}
}
    5bb4:	0018      	movs	r0, r3
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b004      	add	sp, #16
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	41004400 	.word	0x41004400

00005bc0 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b082      	sub	sp, #8
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	681a      	ldr	r2, [r3, #0]
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	681b      	ldr	r3, [r3, #0]
    5bd0:	891b      	ldrh	r3, [r3, #8]
    5bd2:	b29b      	uxth	r3, r3
    5bd4:	2101      	movs	r1, #1
    5bd6:	438b      	bics	r3, r1
    5bd8:	b29b      	uxth	r3, r3
    5bda:	8113      	strh	r3, [r2, #8]
}
    5bdc:	46c0      	nop			; (mov r8, r8)
    5bde:	46bd      	mov	sp, r7
    5be0:	b002      	add	sp, #8
    5be2:	bd80      	pop	{r7, pc}

00005be4 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b082      	sub	sp, #8
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	681a      	ldr	r2, [r3, #0]
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	891b      	ldrh	r3, [r3, #8]
    5bf6:	b29b      	uxth	r3, r3
    5bf8:	2101      	movs	r1, #1
    5bfa:	430b      	orrs	r3, r1
    5bfc:	b29b      	uxth	r3, r3
    5bfe:	8113      	strh	r3, [r2, #8]
}
    5c00:	46c0      	nop			; (mov r8, r8)
    5c02:	46bd      	mov	sp, r7
    5c04:	b002      	add	sp, #8
    5c06:	bd80      	pop	{r7, pc}

00005c08 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b082      	sub	sp, #8
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	7a9b      	ldrb	r3, [r3, #10]
    5c16:	065b      	lsls	r3, r3, #25
    5c18:	0e5b      	lsrs	r3, r3, #25
    5c1a:	b2db      	uxtb	r3, r3
}
    5c1c:	0018      	movs	r0, r3
    5c1e:	46bd      	mov	sp, r7
    5c20:	b002      	add	sp, #8
    5c22:	bd80      	pop	{r7, pc}

00005c24 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    5c24:	b580      	push	{r7, lr}
    5c26:	b082      	sub	sp, #8
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	000a      	movs	r2, r1
    5c2e:	1cfb      	adds	r3, r7, #3
    5c30:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	1cfa      	adds	r2, r7, #3
    5c38:	7812      	ldrb	r2, [r2, #0]
    5c3a:	2180      	movs	r1, #128	; 0x80
    5c3c:	4249      	negs	r1, r1
    5c3e:	430a      	orrs	r2, r1
    5c40:	b2d2      	uxtb	r2, r2
    5c42:	729a      	strb	r2, [r3, #10]
}
    5c44:	46c0      	nop			; (mov r8, r8)
    5c46:	46bd      	mov	sp, r7
    5c48:	b002      	add	sp, #8
    5c4a:	bd80      	pop	{r7, pc}

00005c4c <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b082      	sub	sp, #8
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	8a1b      	ldrh	r3, [r3, #16]
    5c5a:	049b      	lsls	r3, r3, #18
    5c5c:	0d5b      	lsrs	r3, r3, #21
    5c5e:	b29b      	uxth	r3, r3
}
    5c60:	0018      	movs	r0, r3
    5c62:	46bd      	mov	sp, r7
    5c64:	b002      	add	sp, #8
    5c66:	bd80      	pop	{r7, pc}

00005c68 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	b082      	sub	sp, #8
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	6078      	str	r0, [r7, #4]
    5c70:	000a      	movs	r2, r1
    5c72:	1cfb      	adds	r3, r7, #3
    5c74:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	681a      	ldr	r2, [r3, #0]
    5c7a:	1cfb      	adds	r3, r7, #3
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	2103      	movs	r1, #3
    5c80:	400b      	ands	r3, r1
    5c82:	b2d9      	uxtb	r1, r3
    5c84:	8913      	ldrh	r3, [r2, #8]
    5c86:	1c08      	adds	r0, r1, #0
    5c88:	2103      	movs	r1, #3
    5c8a:	4001      	ands	r1, r0
    5c8c:	0288      	lsls	r0, r1, #10
    5c8e:	4905      	ldr	r1, [pc, #20]	; (5ca4 <usb_device_set_lpm_mode+0x3c>)
    5c90:	400b      	ands	r3, r1
    5c92:	1c19      	adds	r1, r3, #0
    5c94:	1c03      	adds	r3, r0, #0
    5c96:	430b      	orrs	r3, r1
    5c98:	8113      	strh	r3, [r2, #8]
}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	46bd      	mov	sp, r7
    5c9e:	b002      	add	sp, #8
    5ca0:	bd80      	pop	{r7, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	fffff3ff 	.word	0xfffff3ff

00005ca8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
    5cae:	0002      	movs	r2, r0
    5cb0:	1dfb      	adds	r3, r7, #7
    5cb2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5cb4:	1dfb      	adds	r3, r7, #7
    5cb6:	781b      	ldrb	r3, [r3, #0]
    5cb8:	0018      	movs	r0, r3
    5cba:	4b03      	ldr	r3, [pc, #12]	; (5cc8 <port_get_group_from_gpio_pin+0x20>)
    5cbc:	4798      	blx	r3
    5cbe:	0003      	movs	r3, r0
}
    5cc0:	0018      	movs	r0, r3
    5cc2:	46bd      	mov	sp, r7
    5cc4:	b002      	add	sp, #8
    5cc6:	bd80      	pop	{r7, pc}
    5cc8:	00005b61 	.word	0x00005b61

00005ccc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    5ccc:	b580      	push	{r7, lr}
    5cce:	b084      	sub	sp, #16
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	0002      	movs	r2, r0
    5cd4:	1dfb      	adds	r3, r7, #7
    5cd6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5cd8:	1dfb      	adds	r3, r7, #7
    5cda:	781b      	ldrb	r3, [r3, #0]
    5cdc:	0018      	movs	r0, r3
    5cde:	4b0b      	ldr	r3, [pc, #44]	; (5d0c <port_pin_get_input_level+0x40>)
    5ce0:	4798      	blx	r3
    5ce2:	0003      	movs	r3, r0
    5ce4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ce6:	1dfb      	adds	r3, r7, #7
    5ce8:	781b      	ldrb	r3, [r3, #0]
    5cea:	221f      	movs	r2, #31
    5cec:	4013      	ands	r3, r2
    5cee:	2201      	movs	r2, #1
    5cf0:	409a      	lsls	r2, r3
    5cf2:	0013      	movs	r3, r2
    5cf4:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	6a1b      	ldr	r3, [r3, #32]
    5cfa:	68ba      	ldr	r2, [r7, #8]
    5cfc:	4013      	ands	r3, r2
    5cfe:	1e5a      	subs	r2, r3, #1
    5d00:	4193      	sbcs	r3, r2
    5d02:	b2db      	uxtb	r3, r3
}
    5d04:	0018      	movs	r0, r3
    5d06:	46bd      	mov	sp, r7
    5d08:	b004      	add	sp, #16
    5d0a:	bd80      	pop	{r7, pc}
    5d0c:	00005ca9 	.word	0x00005ca9

00005d10 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    5d10:	b580      	push	{r7, lr}
    5d12:	b084      	sub	sp, #16
    5d14:	af00      	add	r7, sp, #0
    5d16:	0002      	movs	r2, r0
    5d18:	1dfb      	adds	r3, r7, #7
    5d1a:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    5d1c:	1dfb      	adds	r3, r7, #7
    5d1e:	781b      	ldrb	r3, [r3, #0]
    5d20:	4a0c      	ldr	r2, [pc, #48]	; (5d54 <sleepmgr_lock_mode+0x44>)
    5d22:	5cd3      	ldrb	r3, [r2, r3]
    5d24:	2bff      	cmp	r3, #255	; 0xff
    5d26:	d100      	bne.n	5d2a <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    5d28:	e7fe      	b.n	5d28 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    5d2a:	4b0b      	ldr	r3, [pc, #44]	; (5d58 <sleepmgr_lock_mode+0x48>)
    5d2c:	4798      	blx	r3
    5d2e:	0003      	movs	r3, r0
    5d30:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    5d32:	1dfb      	adds	r3, r7, #7
    5d34:	781b      	ldrb	r3, [r3, #0]
    5d36:	4a07      	ldr	r2, [pc, #28]	; (5d54 <sleepmgr_lock_mode+0x44>)
    5d38:	5cd2      	ldrb	r2, [r2, r3]
    5d3a:	3201      	adds	r2, #1
    5d3c:	b2d1      	uxtb	r1, r2
    5d3e:	4a05      	ldr	r2, [pc, #20]	; (5d54 <sleepmgr_lock_mode+0x44>)
    5d40:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    5d42:	68fb      	ldr	r3, [r7, #12]
    5d44:	0018      	movs	r0, r3
    5d46:	4b05      	ldr	r3, [pc, #20]	; (5d5c <sleepmgr_lock_mode+0x4c>)
    5d48:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	46bd      	mov	sp, r7
    5d4e:	b004      	add	sp, #16
    5d50:	bd80      	pop	{r7, pc}
    5d52:	46c0      	nop			; (mov r8, r8)
    5d54:	200002f0 	.word	0x200002f0
    5d58:	00005ae9 	.word	0x00005ae9
    5d5c:	00005b31 	.word	0x00005b31

00005d60 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    5d60:	b580      	push	{r7, lr}
    5d62:	b084      	sub	sp, #16
    5d64:	af00      	add	r7, sp, #0
    5d66:	0002      	movs	r2, r0
    5d68:	1dfb      	adds	r3, r7, #7
    5d6a:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    5d6c:	1dfb      	adds	r3, r7, #7
    5d6e:	781b      	ldrb	r3, [r3, #0]
    5d70:	4a0c      	ldr	r2, [pc, #48]	; (5da4 <sleepmgr_unlock_mode+0x44>)
    5d72:	5cd3      	ldrb	r3, [r2, r3]
    5d74:	2b00      	cmp	r3, #0
    5d76:	d100      	bne.n	5d7a <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    5d78:	e7fe      	b.n	5d78 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    5d7a:	4b0b      	ldr	r3, [pc, #44]	; (5da8 <sleepmgr_unlock_mode+0x48>)
    5d7c:	4798      	blx	r3
    5d7e:	0003      	movs	r3, r0
    5d80:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    5d82:	1dfb      	adds	r3, r7, #7
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	4a07      	ldr	r2, [pc, #28]	; (5da4 <sleepmgr_unlock_mode+0x44>)
    5d88:	5cd2      	ldrb	r2, [r2, r3]
    5d8a:	3a01      	subs	r2, #1
    5d8c:	b2d1      	uxtb	r1, r2
    5d8e:	4a05      	ldr	r2, [pc, #20]	; (5da4 <sleepmgr_unlock_mode+0x44>)
    5d90:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    5d92:	68fb      	ldr	r3, [r7, #12]
    5d94:	0018      	movs	r0, r3
    5d96:	4b05      	ldr	r3, [pc, #20]	; (5dac <sleepmgr_unlock_mode+0x4c>)
    5d98:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	46bd      	mov	sp, r7
    5d9e:	b004      	add	sp, #16
    5da0:	bd80      	pop	{r7, pc}
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	200002f0 	.word	0x200002f0
    5da8:	00005ae9 	.word	0x00005ae9
    5dac:	00005b31 	.word	0x00005b31

00005db0 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5db4:	4b0b      	ldr	r3, [pc, #44]	; (5de4 <udd_wait_clock_ready+0x34>)
    5db6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5db8:	b29b      	uxth	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2320      	movs	r3, #32
    5dbe:	4013      	ands	r3, r2
    5dc0:	d107      	bne.n	5dd2 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	4b07      	ldr	r3, [pc, #28]	; (5de4 <udd_wait_clock_ready+0x34>)
    5dc6:	68db      	ldr	r3, [r3, #12]
    5dc8:	22d0      	movs	r2, #208	; 0xd0
    5dca:	4013      	ands	r3, r2
    5dcc:	2bd0      	cmp	r3, #208	; 0xd0
    5dce:	d1f9      	bne.n	5dc4 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    5dd0:	e005      	b.n	5dde <udd_wait_clock_ready+0x2e>

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	4b03      	ldr	r3, [pc, #12]	; (5de4 <udd_wait_clock_ready+0x34>)
    5dd6:	68db      	ldr	r3, [r3, #12]
    5dd8:	2210      	movs	r2, #16
    5dda:	4013      	ands	r3, r2
    5ddc:	d0fa      	beq.n	5dd4 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	46bd      	mov	sp, r7
    5de2:	bd80      	pop	{r7, pc}
    5de4:	40000800 	.word	0x40000800

00005de8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	0002      	movs	r2, r0
    5df0:	1dfb      	adds	r3, r7, #7
    5df2:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    5df4:	230c      	movs	r3, #12
    5df6:	18fa      	adds	r2, r7, r3
    5df8:	4b17      	ldr	r3, [pc, #92]	; (5e58 <udd_sleep_mode+0x70>)
    5dfa:	0010      	movs	r0, r2
    5dfc:	0019      	movs	r1, r3
    5dfe:	2304      	movs	r3, #4
    5e00:	001a      	movs	r2, r3
    5e02:	4b16      	ldr	r3, [pc, #88]	; (5e5c <udd_sleep_mode+0x74>)
    5e04:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    5e06:	4b16      	ldr	r3, [pc, #88]	; (5e60 <udd_sleep_mode+0x78>)
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	1dfa      	adds	r2, r7, #7
    5e0c:	7812      	ldrb	r2, [r2, #0]
    5e0e:	429a      	cmp	r2, r3
    5e10:	d01d      	beq.n	5e4e <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    5e12:	1dfb      	adds	r3, r7, #7
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	2b00      	cmp	r3, #0
    5e18:	d007      	beq.n	5e2a <udd_sleep_mode+0x42>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    5e1a:	1dfb      	adds	r3, r7, #7
    5e1c:	781b      	ldrb	r3, [r3, #0]
    5e1e:	220c      	movs	r2, #12
    5e20:	18ba      	adds	r2, r7, r2
    5e22:	5cd3      	ldrb	r3, [r2, r3]
    5e24:	0018      	movs	r0, r3
    5e26:	4b0f      	ldr	r3, [pc, #60]	; (5e64 <udd_sleep_mode+0x7c>)
    5e28:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    5e2a:	4b0d      	ldr	r3, [pc, #52]	; (5e60 <udd_sleep_mode+0x78>)
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d008      	beq.n	5e44 <udd_sleep_mode+0x5c>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    5e32:	4b0b      	ldr	r3, [pc, #44]	; (5e60 <udd_sleep_mode+0x78>)
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	001a      	movs	r2, r3
    5e38:	230c      	movs	r3, #12
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	5c9b      	ldrb	r3, [r3, r2]
    5e3e:	0018      	movs	r0, r3
    5e40:	4b09      	ldr	r3, [pc, #36]	; (5e68 <udd_sleep_mode+0x80>)
    5e42:	4798      	blx	r3
	}
	udd_state = new_state;
    5e44:	4b06      	ldr	r3, [pc, #24]	; (5e60 <udd_sleep_mode+0x78>)
    5e46:	1dfa      	adds	r2, r7, #7
    5e48:	7812      	ldrb	r2, [r2, #0]
    5e4a:	701a      	strb	r2, [r3, #0]
    5e4c:	e000      	b.n	5e50 <udd_sleep_mode+0x68>
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
		return; // No change
    5e4e:	46c0      	nop			; (mov r8, r8)
	if (udd_state != UDD_STATE_OFF) {
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
}
    5e50:	46bd      	mov	sp, r7
    5e52:	b004      	add	sp, #16
    5e54:	bd80      	pop	{r7, pc}
    5e56:	46c0      	nop			; (mov r8, r8)
    5e58:	00009e90 	.word	0x00009e90
    5e5c:	00009dad 	.word	0x00009dad
    5e60:	20000184 	.word	0x20000184
    5e64:	00005d11 	.word	0x00005d11
    5e68:	00005d61 	.word	0x00005d61

00005e6c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    5e6c:	b580      	push	{r7, lr}
    5e6e:	b082      	sub	sp, #8
    5e70:	af00      	add	r7, sp, #0
    5e72:	0002      	movs	r2, r0
    5e74:	1dfb      	adds	r3, r7, #7
    5e76:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    5e78:	1dfb      	adds	r3, r7, #7
    5e7a:	781b      	ldrb	r3, [r3, #0]
    5e7c:	220f      	movs	r2, #15
    5e7e:	4013      	ands	r3, r2
    5e80:	005b      	lsls	r3, r3, #1
    5e82:	1dfa      	adds	r2, r7, #7
    5e84:	7812      	ldrb	r2, [r2, #0]
    5e86:	b252      	sxtb	r2, r2
    5e88:	b2d2      	uxtb	r2, r2
    5e8a:	09d2      	lsrs	r2, r2, #7
    5e8c:	b2d2      	uxtb	r2, r2
    5e8e:	189b      	adds	r3, r3, r2
    5e90:	1e9a      	subs	r2, r3, #2
    5e92:	0013      	movs	r3, r2
    5e94:	009b      	lsls	r3, r3, #2
    5e96:	189b      	adds	r3, r3, r2
    5e98:	009b      	lsls	r3, r3, #2
    5e9a:	4a03      	ldr	r2, [pc, #12]	; (5ea8 <udd_ep_get_job+0x3c>)
    5e9c:	189b      	adds	r3, r3, r2
}
    5e9e:	0018      	movs	r0, r3
    5ea0:	46bd      	mov	sp, r7
    5ea2:	b002      	add	sp, #8
    5ea4:	bd80      	pop	{r7, pc}
    5ea6:	46c0      	nop			; (mov r8, r8)
    5ea8:	2000015c 	.word	0x2000015c

00005eac <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    5eac:	b590      	push	{r4, r7, lr}
    5eae:	b089      	sub	sp, #36	; 0x24
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5eb8:	2317      	movs	r3, #23
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	69ba      	ldr	r2, [r7, #24]
    5ebe:	7992      	ldrb	r2, [r2, #6]
    5ec0:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    5ec2:	2317      	movs	r3, #23
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	781b      	ldrb	r3, [r3, #0]
    5ec8:	0018      	movs	r0, r3
    5eca:	4b54      	ldr	r3, [pc, #336]	; (601c <udd_ep_trans_in_next+0x170>)
    5ecc:	4798      	blx	r3
    5ece:	0003      	movs	r3, r0
    5ed0:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    5ed2:	230f      	movs	r3, #15
    5ed4:	18fb      	adds	r3, r7, r3
    5ed6:	2217      	movs	r2, #23
    5ed8:	18ba      	adds	r2, r7, r2
    5eda:	7812      	ldrb	r2, [r2, #0]
    5edc:	210f      	movs	r1, #15
    5ede:	400a      	ands	r2, r1
    5ee0:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    5ee2:	230c      	movs	r3, #12
    5ee4:	18fb      	adds	r3, r7, r3
    5ee6:	693a      	ldr	r2, [r7, #16]
    5ee8:	8a12      	ldrh	r2, [r2, #16]
    5eea:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    5eec:	230a      	movs	r3, #10
    5eee:	18fb      	adds	r3, r7, r3
    5ef0:	69ba      	ldr	r2, [r7, #24]
    5ef2:	8852      	ldrh	r2, [r2, #2]
    5ef4:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    5ef6:	693b      	ldr	r3, [r7, #16]
    5ef8:	68da      	ldr	r2, [r3, #12]
    5efa:	230a      	movs	r3, #10
    5efc:	18fb      	adds	r3, r7, r3
    5efe:	881b      	ldrh	r3, [r3, #0]
    5f00:	18d2      	adds	r2, r2, r3
    5f02:	693b      	ldr	r3, [r7, #16]
    5f04:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    5f06:	693b      	ldr	r3, [r7, #16]
    5f08:	68da      	ldr	r2, [r3, #12]
    5f0a:	693b      	ldr	r3, [r7, #16]
    5f0c:	689b      	ldr	r3, [r3, #8]
    5f0e:	429a      	cmp	r2, r3
    5f10:	d054      	beq.n	5fbc <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5f12:	693b      	ldr	r3, [r7, #16]
    5f14:	689b      	ldr	r3, [r3, #8]
    5f16:	b299      	uxth	r1, r3
    5f18:	693b      	ldr	r3, [r7, #16]
    5f1a:	68db      	ldr	r3, [r3, #12]
    5f1c:	b29a      	uxth	r2, r3
    5f1e:	231e      	movs	r3, #30
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	1a8a      	subs	r2, r1, r2
    5f24:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5f26:	231e      	movs	r3, #30
    5f28:	18fb      	adds	r3, r7, r3
    5f2a:	881b      	ldrh	r3, [r3, #0]
    5f2c:	4a3c      	ldr	r2, [pc, #240]	; (6020 <udd_ep_trans_in_next+0x174>)
    5f2e:	4293      	cmp	r3, r2
    5f30:	d90d      	bls.n	5f4e <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    5f32:	230c      	movs	r3, #12
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	881a      	ldrh	r2, [r3, #0]
    5f38:	4839      	ldr	r0, [pc, #228]	; (6020 <udd_ep_trans_in_next+0x174>)
    5f3a:	4b3a      	ldr	r3, [pc, #232]	; (6024 <udd_ep_trans_in_next+0x178>)
    5f3c:	0011      	movs	r1, r2
    5f3e:	4798      	blx	r3
    5f40:	000b      	movs	r3, r1
    5f42:	b29a      	uxth	r2, r3
    5f44:	231e      	movs	r3, #30
    5f46:	18fb      	adds	r3, r7, r3
    5f48:	4935      	ldr	r1, [pc, #212]	; (6020 <udd_ep_trans_in_next+0x174>)
    5f4a:	1a8a      	subs	r2, r1, r2
    5f4c:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    5f4e:	693b      	ldr	r3, [r7, #16]
    5f50:	7c9b      	ldrb	r3, [r3, #18]
    5f52:	2202      	movs	r2, #2
    5f54:	4013      	ands	r3, r2
    5f56:	b2db      	uxtb	r3, r3
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d00e      	beq.n	5f7a <udd_ep_trans_in_next+0xce>
    5f5c:	231e      	movs	r3, #30
    5f5e:	18fa      	adds	r2, r7, r3
    5f60:	230c      	movs	r3, #12
    5f62:	18fb      	adds	r3, r7, r3
    5f64:	8812      	ldrh	r2, [r2, #0]
    5f66:	8819      	ldrh	r1, [r3, #0]
    5f68:	4b2f      	ldr	r3, [pc, #188]	; (6028 <udd_ep_trans_in_next+0x17c>)
    5f6a:	0010      	movs	r0, r2
    5f6c:	4798      	blx	r3
    5f6e:	000b      	movs	r3, r1
    5f70:	b29b      	uxth	r3, r3
    5f72:	2b00      	cmp	r3, #0
    5f74:	d101      	bne.n	5f7a <udd_ep_trans_in_next+0xce>
    5f76:	2301      	movs	r3, #1
    5f78:	e000      	b.n	5f7c <udd_ep_trans_in_next+0xd0>
    5f7a:	2300      	movs	r3, #0
    5f7c:	b2db      	uxtb	r3, r3
    5f7e:	1c1a      	adds	r2, r3, #0
    5f80:	2301      	movs	r3, #1
    5f82:	4013      	ands	r3, r2
    5f84:	b2da      	uxtb	r2, r3
    5f86:	693b      	ldr	r3, [r7, #16]
    5f88:	2101      	movs	r1, #1
    5f8a:	400a      	ands	r2, r1
    5f8c:	1890      	adds	r0, r2, r2
    5f8e:	7c9a      	ldrb	r2, [r3, #18]
    5f90:	2102      	movs	r1, #2
    5f92:	438a      	bics	r2, r1
    5f94:	1c11      	adds	r1, r2, #0
    5f96:	1c02      	adds	r2, r0, #0
    5f98:	430a      	orrs	r2, r1
    5f9a:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5f9c:	693b      	ldr	r3, [r7, #16]
    5f9e:	685a      	ldr	r2, [r3, #4]
    5fa0:	693b      	ldr	r3, [r7, #16]
    5fa2:	68db      	ldr	r3, [r3, #12]
    5fa4:	18d2      	adds	r2, r2, r3
    5fa6:	231e      	movs	r3, #30
    5fa8:	18fb      	adds	r3, r7, r3
    5faa:	881c      	ldrh	r4, [r3, #0]
    5fac:	230f      	movs	r3, #15
    5fae:	18fb      	adds	r3, r7, r3
    5fb0:	7819      	ldrb	r1, [r3, #0]
    5fb2:	481e      	ldr	r0, [pc, #120]	; (602c <udd_ep_trans_in_next+0x180>)
    5fb4:	0023      	movs	r3, r4
    5fb6:	4c1e      	ldr	r4, [pc, #120]	; (6030 <udd_ep_trans_in_next+0x184>)
    5fb8:	47a0      	blx	r4
		return;
    5fba:	e02b      	b.n	6014 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    5fbc:	693b      	ldr	r3, [r7, #16]
    5fbe:	7c9b      	ldrb	r3, [r3, #18]
    5fc0:	2202      	movs	r2, #2
    5fc2:	4013      	ands	r3, r2
    5fc4:	b2db      	uxtb	r3, r3
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d011      	beq.n	5fee <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    5fca:	693b      	ldr	r3, [r7, #16]
    5fcc:	7c9a      	ldrb	r2, [r3, #18]
    5fce:	2102      	movs	r1, #2
    5fd0:	438a      	bics	r2, r1
    5fd2:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    5fd4:	693b      	ldr	r3, [r7, #16]
    5fd6:	685a      	ldr	r2, [r3, #4]
    5fd8:	693b      	ldr	r3, [r7, #16]
    5fda:	68db      	ldr	r3, [r3, #12]
    5fdc:	18d2      	adds	r2, r2, r3
    5fde:	230f      	movs	r3, #15
    5fe0:	18fb      	adds	r3, r7, r3
    5fe2:	7819      	ldrb	r1, [r3, #0]
    5fe4:	4811      	ldr	r0, [pc, #68]	; (602c <udd_ep_trans_in_next+0x180>)
    5fe6:	2300      	movs	r3, #0
    5fe8:	4c11      	ldr	r4, [pc, #68]	; (6030 <udd_ep_trans_in_next+0x184>)
    5fea:	47a0      	blx	r4
		return;
    5fec:	e012      	b.n	6014 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    5fee:	693b      	ldr	r3, [r7, #16]
    5ff0:	7c9a      	ldrb	r2, [r3, #18]
    5ff2:	2101      	movs	r1, #1
    5ff4:	438a      	bics	r2, r1
    5ff6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5ff8:	693b      	ldr	r3, [r7, #16]
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d009      	beq.n	6014 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    6000:	693b      	ldr	r3, [r7, #16]
    6002:	681c      	ldr	r4, [r3, #0]
    6004:	693b      	ldr	r3, [r7, #16]
    6006:	68d9      	ldr	r1, [r3, #12]
    6008:	2317      	movs	r3, #23
    600a:	18fb      	adds	r3, r7, r3
    600c:	781b      	ldrb	r3, [r3, #0]
    600e:	001a      	movs	r2, r3
    6010:	2000      	movs	r0, #0
    6012:	47a0      	blx	r4
	}
}
    6014:	46bd      	mov	sp, r7
    6016:	b009      	add	sp, #36	; 0x24
    6018:	bd90      	pop	{r4, r7, pc}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	00005e6d 	.word	0x00005e6d
    6020:	00001fff 	.word	0x00001fff
    6024:	00009cbd 	.word	0x00009cbd
    6028:	00009ae9 	.word	0x00009ae9
    602c:	20000378 	.word	0x20000378
    6030:	00008559 	.word	0x00008559

00006034 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    6034:	b5b0      	push	{r4, r5, r7, lr}
    6036:	b088      	sub	sp, #32
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    6040:	2317      	movs	r3, #23
    6042:	18fb      	adds	r3, r7, r3
    6044:	69ba      	ldr	r2, [r7, #24]
    6046:	7992      	ldrb	r2, [r2, #6]
    6048:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    604a:	2317      	movs	r3, #23
    604c:	18fb      	adds	r3, r7, r3
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	0018      	movs	r0, r3
    6052:	4b66      	ldr	r3, [pc, #408]	; (61ec <udd_ep_trans_out_next+0x1b8>)
    6054:	4798      	blx	r3
    6056:	0003      	movs	r3, r0
    6058:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    605a:	230f      	movs	r3, #15
    605c:	18fb      	adds	r3, r7, r3
    605e:	2217      	movs	r2, #23
    6060:	18ba      	adds	r2, r7, r2
    6062:	7812      	ldrb	r2, [r2, #0]
    6064:	210f      	movs	r1, #15
    6066:	400a      	ands	r2, r1
    6068:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    606a:	230c      	movs	r3, #12
    606c:	18fb      	adds	r3, r7, r3
    606e:	693a      	ldr	r2, [r7, #16]
    6070:	8a12      	ldrh	r2, [r2, #16]
    6072:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    6074:	230a      	movs	r3, #10
    6076:	18fb      	adds	r3, r7, r3
    6078:	69ba      	ldr	r2, [r7, #24]
    607a:	8812      	ldrh	r2, [r2, #0]
    607c:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    607e:	693b      	ldr	r3, [r7, #16]
    6080:	7c9b      	ldrb	r3, [r3, #18]
    6082:	2204      	movs	r2, #4
    6084:	4013      	ands	r3, r2
    6086:	b2db      	uxtb	r3, r3
    6088:	2b00      	cmp	r3, #0
    608a:	d019      	beq.n	60c0 <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    608c:	693b      	ldr	r3, [r7, #16]
    608e:	685a      	ldr	r2, [r3, #4]
    6090:	693b      	ldr	r3, [r7, #16]
    6092:	68db      	ldr	r3, [r3, #12]
    6094:	18d4      	adds	r4, r2, r3
    6096:	230f      	movs	r3, #15
    6098:	18fb      	adds	r3, r7, r3
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	3b01      	subs	r3, #1
    609e:	019a      	lsls	r2, r3, #6
    60a0:	4b53      	ldr	r3, [pc, #332]	; (61f0 <udd_ep_trans_out_next+0x1bc>)
    60a2:	18d5      	adds	r5, r2, r3
    60a4:	693b      	ldr	r3, [r7, #16]
    60a6:	689a      	ldr	r2, [r3, #8]
    60a8:	230c      	movs	r3, #12
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	8819      	ldrh	r1, [r3, #0]
    60ae:	4b51      	ldr	r3, [pc, #324]	; (61f4 <udd_ep_trans_out_next+0x1c0>)
    60b0:	0010      	movs	r0, r2
    60b2:	4798      	blx	r3
    60b4:	000b      	movs	r3, r1
    60b6:	001a      	movs	r2, r3
    60b8:	0029      	movs	r1, r5
    60ba:	0020      	movs	r0, r4
    60bc:	4b4e      	ldr	r3, [pc, #312]	; (61f8 <udd_ep_trans_out_next+0x1c4>)
    60be:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    60c0:	693b      	ldr	r3, [r7, #16]
    60c2:	68da      	ldr	r2, [r3, #12]
    60c4:	230a      	movs	r3, #10
    60c6:	18fb      	adds	r3, r7, r3
    60c8:	881b      	ldrh	r3, [r3, #0]
    60ca:	18d2      	adds	r2, r2, r3
    60cc:	693b      	ldr	r3, [r7, #16]
    60ce:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    60d0:	693b      	ldr	r3, [r7, #16]
    60d2:	68da      	ldr	r2, [r3, #12]
    60d4:	693b      	ldr	r3, [r7, #16]
    60d6:	689b      	ldr	r3, [r3, #8]
    60d8:	429a      	cmp	r2, r3
    60da:	d903      	bls.n	60e4 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    60dc:	693b      	ldr	r3, [r7, #16]
    60de:	689a      	ldr	r2, [r3, #8]
    60e0:	693b      	ldr	r3, [r7, #16]
    60e2:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    60e4:	69bb      	ldr	r3, [r7, #24]
    60e6:	889b      	ldrh	r3, [r3, #4]
    60e8:	220a      	movs	r2, #10
    60ea:	18ba      	adds	r2, r7, r2
    60ec:	8812      	ldrh	r2, [r2, #0]
    60ee:	429a      	cmp	r2, r3
    60f0:	d165      	bne.n	61be <udd_ep_trans_out_next+0x18a>
    60f2:	693b      	ldr	r3, [r7, #16]
    60f4:	68da      	ldr	r2, [r3, #12]
    60f6:	693b      	ldr	r3, [r7, #16]
    60f8:	689b      	ldr	r3, [r3, #8]
    60fa:	429a      	cmp	r2, r3
    60fc:	d05f      	beq.n	61be <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    60fe:	693b      	ldr	r3, [r7, #16]
    6100:	689b      	ldr	r3, [r3, #8]
    6102:	b299      	uxth	r1, r3
    6104:	693b      	ldr	r3, [r7, #16]
    6106:	68db      	ldr	r3, [r3, #12]
    6108:	b29a      	uxth	r2, r3
    610a:	231e      	movs	r3, #30
    610c:	18fb      	adds	r3, r7, r3
    610e:	1a8a      	subs	r2, r1, r2
    6110:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    6112:	231e      	movs	r3, #30
    6114:	18fb      	adds	r3, r7, r3
    6116:	881b      	ldrh	r3, [r3, #0]
    6118:	4a38      	ldr	r2, [pc, #224]	; (61fc <udd_ep_trans_out_next+0x1c8>)
    611a:	4293      	cmp	r3, r2
    611c:	d90e      	bls.n	613c <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    611e:	230c      	movs	r3, #12
    6120:	18fb      	adds	r3, r7, r3
    6122:	881a      	ldrh	r2, [r3, #0]
    6124:	4835      	ldr	r0, [pc, #212]	; (61fc <udd_ep_trans_out_next+0x1c8>)
    6126:	4b36      	ldr	r3, [pc, #216]	; (6200 <udd_ep_trans_out_next+0x1cc>)
    6128:	0011      	movs	r1, r2
    612a:	4798      	blx	r3
    612c:	000b      	movs	r3, r1
    612e:	b29a      	uxth	r2, r3
    6130:	231e      	movs	r3, #30
    6132:	18fb      	adds	r3, r7, r3
    6134:	4931      	ldr	r1, [pc, #196]	; (61fc <udd_ep_trans_out_next+0x1c8>)
    6136:	1a8a      	subs	r2, r1, r2
    6138:	801a      	strh	r2, [r3, #0]
    613a:	e011      	b.n	6160 <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    613c:	231e      	movs	r3, #30
    613e:	18fa      	adds	r2, r7, r3
    6140:	230c      	movs	r3, #12
    6142:	18fb      	adds	r3, r7, r3
    6144:	8812      	ldrh	r2, [r2, #0]
    6146:	8819      	ldrh	r1, [r3, #0]
    6148:	4b2a      	ldr	r3, [pc, #168]	; (61f4 <udd_ep_trans_out_next+0x1c0>)
    614a:	0010      	movs	r0, r2
    614c:	4798      	blx	r3
    614e:	000b      	movs	r3, r1
    6150:	b29a      	uxth	r2, r3
    6152:	231e      	movs	r3, #30
    6154:	18fb      	adds	r3, r7, r3
    6156:	211e      	movs	r1, #30
    6158:	1879      	adds	r1, r7, r1
    615a:	8809      	ldrh	r1, [r1, #0]
    615c:	1a8a      	subs	r2, r1, r2
    615e:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    6160:	231e      	movs	r3, #30
    6162:	18fa      	adds	r2, r7, r3
    6164:	230c      	movs	r3, #12
    6166:	18fb      	adds	r3, r7, r3
    6168:	8812      	ldrh	r2, [r2, #0]
    616a:	881b      	ldrh	r3, [r3, #0]
    616c:	429a      	cmp	r2, r3
    616e:	d216      	bcs.n	619e <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    6170:	693b      	ldr	r3, [r7, #16]
    6172:	7c9a      	ldrb	r2, [r3, #18]
    6174:	2104      	movs	r1, #4
    6176:	430a      	orrs	r2, r1
    6178:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    617a:	230f      	movs	r3, #15
    617c:	18fb      	adds	r3, r7, r3
    617e:	781b      	ldrb	r3, [r3, #0]
    6180:	3b01      	subs	r3, #1
    6182:	019a      	lsls	r2, r3, #6
    6184:	4b1a      	ldr	r3, [pc, #104]	; (61f0 <udd_ep_trans_out_next+0x1bc>)
    6186:	18d2      	adds	r2, r2, r3
    6188:	230c      	movs	r3, #12
    618a:	18fb      	adds	r3, r7, r3
    618c:	881c      	ldrh	r4, [r3, #0]
    618e:	230f      	movs	r3, #15
    6190:	18fb      	adds	r3, r7, r3
    6192:	7819      	ldrb	r1, [r3, #0]
    6194:	481b      	ldr	r0, [pc, #108]	; (6204 <udd_ep_trans_out_next+0x1d0>)
    6196:	0023      	movs	r3, r4
    6198:	4c1b      	ldr	r4, [pc, #108]	; (6208 <udd_ep_trans_out_next+0x1d4>)
    619a:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    619c:	e022      	b.n	61e4 <udd_ep_trans_out_next+0x1b0>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    619e:	693b      	ldr	r3, [r7, #16]
    61a0:	685a      	ldr	r2, [r3, #4]
    61a2:	693b      	ldr	r3, [r7, #16]
    61a4:	68db      	ldr	r3, [r3, #12]
    61a6:	18d2      	adds	r2, r2, r3
    61a8:	231e      	movs	r3, #30
    61aa:	18fb      	adds	r3, r7, r3
    61ac:	881c      	ldrh	r4, [r3, #0]
    61ae:	230f      	movs	r3, #15
    61b0:	18fb      	adds	r3, r7, r3
    61b2:	7819      	ldrb	r1, [r3, #0]
    61b4:	4813      	ldr	r0, [pc, #76]	; (6204 <udd_ep_trans_out_next+0x1d0>)
    61b6:	0023      	movs	r3, r4
    61b8:	4c13      	ldr	r4, [pc, #76]	; (6208 <udd_ep_trans_out_next+0x1d4>)
    61ba:	47a0      	blx	r4
		}
		return;
    61bc:	e012      	b.n	61e4 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    61be:	693b      	ldr	r3, [r7, #16]
    61c0:	7c9a      	ldrb	r2, [r3, #18]
    61c2:	2101      	movs	r1, #1
    61c4:	438a      	bics	r2, r1
    61c6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    61c8:	693b      	ldr	r3, [r7, #16]
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d009      	beq.n	61e4 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    61d0:	693b      	ldr	r3, [r7, #16]
    61d2:	681c      	ldr	r4, [r3, #0]
    61d4:	693b      	ldr	r3, [r7, #16]
    61d6:	68d9      	ldr	r1, [r3, #12]
    61d8:	2317      	movs	r3, #23
    61da:	18fb      	adds	r3, r7, r3
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	001a      	movs	r2, r3
    61e0:	2000      	movs	r0, #0
    61e2:	47a0      	blx	r4
	}
}
    61e4:	46bd      	mov	sp, r7
    61e6:	b008      	add	sp, #32
    61e8:	bdb0      	pop	{r4, r5, r7, pc}
    61ea:	46c0      	nop			; (mov r8, r8)
    61ec:	00005e6d 	.word	0x00005e6d
    61f0:	20000338 	.word	0x20000338
    61f4:	00009ae9 	.word	0x00009ae9
    61f8:	00009dad 	.word	0x00009dad
    61fc:	00001fff 	.word	0x00001fff
    6200:	00009cbd 	.word	0x00009cbd
    6204:	20000378 	.word	0x20000378
    6208:	0000860d 	.word	0x0000860d

0000620c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    620c:	b580      	push	{r7, lr}
    620e:	b084      	sub	sp, #16
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
    6214:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6216:	683b      	ldr	r3, [r7, #0]
    6218:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    621a:	230b      	movs	r3, #11
    621c:	18fb      	adds	r3, r7, r3
    621e:	68fa      	ldr	r2, [r7, #12]
    6220:	7992      	ldrb	r2, [r2, #6]
    6222:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    6224:	230b      	movs	r3, #11
    6226:	18fb      	adds	r3, r7, r3
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	b25b      	sxtb	r3, r3
    622c:	2b00      	cmp	r3, #0
    622e:	da04      	bge.n	623a <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    6230:	683b      	ldr	r3, [r7, #0]
    6232:	0018      	movs	r0, r3
    6234:	4b05      	ldr	r3, [pc, #20]	; (624c <udd_ep_transfer_process+0x40>)
    6236:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    6238:	e003      	b.n	6242 <udd_ep_transfer_process+0x36>
	udd_ep_id_t ep = ep_callback_para->endpoint_address;

	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
    623a:	683b      	ldr	r3, [r7, #0]
    623c:	0018      	movs	r0, r3
    623e:	4b04      	ldr	r3, [pc, #16]	; (6250 <udd_ep_transfer_process+0x44>)
    6240:	4798      	blx	r3
	}
}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	46bd      	mov	sp, r7
    6246:	b004      	add	sp, #16
    6248:	bd80      	pop	{r7, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	00005ead 	.word	0x00005ead
    6250:	00006035 	.word	0x00006035

00006254 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    6254:	b590      	push	{r4, r7, lr}
    6256:	b085      	sub	sp, #20
    6258:	af00      	add	r7, sp, #0
    625a:	0002      	movs	r2, r0
    625c:	1dfb      	adds	r3, r7, #7
    625e:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    6260:	1dfb      	adds	r3, r7, #7
    6262:	781a      	ldrb	r2, [r3, #0]
    6264:	4b14      	ldr	r3, [pc, #80]	; (62b8 <udd_ep_abort+0x64>)
    6266:	0011      	movs	r1, r2
    6268:	0018      	movs	r0, r3
    626a:	4b14      	ldr	r3, [pc, #80]	; (62bc <udd_ep_abort+0x68>)
    626c:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    626e:	1dfb      	adds	r3, r7, #7
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	0018      	movs	r0, r3
    6274:	4b12      	ldr	r3, [pc, #72]	; (62c0 <udd_ep_abort+0x6c>)
    6276:	4798      	blx	r3
    6278:	0003      	movs	r3, r0
    627a:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    627c:	68fb      	ldr	r3, [r7, #12]
    627e:	7c9b      	ldrb	r3, [r3, #18]
    6280:	2201      	movs	r2, #1
    6282:	4013      	ands	r3, r2
    6284:	b2db      	uxtb	r3, r3
    6286:	2b00      	cmp	r3, #0
    6288:	d012      	beq.n	62b0 <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    628a:	68fb      	ldr	r3, [r7, #12]
    628c:	7c9a      	ldrb	r2, [r3, #18]
    628e:	2101      	movs	r1, #1
    6290:	438a      	bics	r2, r1
    6292:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    6294:	68fb      	ldr	r3, [r7, #12]
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	2b00      	cmp	r3, #0
    629a:	d00a      	beq.n	62b2 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	681c      	ldr	r4, [r3, #0]
    62a0:	68fb      	ldr	r3, [r7, #12]
    62a2:	68d9      	ldr	r1, [r3, #12]
    62a4:	1dfb      	adds	r3, r7, #7
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	001a      	movs	r2, r3
    62aa:	2001      	movs	r0, #1
    62ac:	47a0      	blx	r4
    62ae:	e000      	b.n	62b2 <udd_ep_abort+0x5e>
	usb_device_endpoint_abort_job(&usb_device, ep);

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
	if (!ptr_job->busy) {
		return;
    62b0:	46c0      	nop			; (mov r8, r8)
	ptr_job->busy = false;
	if (NULL != ptr_job->call_trans) {
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
	}
}
    62b2:	46bd      	mov	sp, r7
    62b4:	b005      	add	sp, #20
    62b6:	bd90      	pop	{r4, r7, pc}
    62b8:	20000378 	.word	0x20000378
    62bc:	000082d5 	.word	0x000082d5
    62c0:	00005e6d 	.word	0x00005e6d

000062c4 <udd_get_frame_number>:
	return false;
#endif
}

uint16_t udd_get_frame_number(void)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    62c8:	4b03      	ldr	r3, [pc, #12]	; (62d8 <udd_get_frame_number+0x14>)
    62ca:	0018      	movs	r0, r3
    62cc:	4b03      	ldr	r3, [pc, #12]	; (62dc <udd_get_frame_number+0x18>)
    62ce:	4798      	blx	r3
    62d0:	0003      	movs	r3, r0
}
    62d2:	0018      	movs	r0, r3
    62d4:	46bd      	mov	sp, r7
    62d6:	bd80      	pop	{r7, pc}
    62d8:	20000378 	.word	0x20000378
    62dc:	00005c4d 	.word	0x00005c4d

000062e0 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b084      	sub	sp, #16
    62e4:	af00      	add	r7, sp, #0
    62e6:	0002      	movs	r2, r0
    62e8:	1dfb      	adds	r3, r7, #7
    62ea:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    62ec:	2308      	movs	r3, #8
    62ee:	18fb      	adds	r3, r7, r3
    62f0:	0018      	movs	r0, r3
    62f2:	4b18      	ldr	r3, [pc, #96]	; (6354 <udd_ep_free+0x74>)
    62f4:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    62f6:	230f      	movs	r3, #15
    62f8:	18fb      	adds	r3, r7, r3
    62fa:	1dfa      	adds	r2, r7, #7
    62fc:	7812      	ldrb	r2, [r2, #0]
    62fe:	210f      	movs	r1, #15
    6300:	400a      	ands	r2, r1
    6302:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    6304:	1dfb      	adds	r3, r7, #7
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	0018      	movs	r0, r3
    630a:	4b13      	ldr	r3, [pc, #76]	; (6358 <udd_ep_free+0x78>)
    630c:	4798      	blx	r3

	config_ep.ep_address = ep;
    630e:	2308      	movs	r3, #8
    6310:	18fb      	adds	r3, r7, r3
    6312:	1dfa      	adds	r2, r7, #7
    6314:	7812      	ldrb	r2, [r2, #0]
    6316:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    6318:	2308      	movs	r3, #8
    631a:	18fb      	adds	r3, r7, r3
    631c:	2200      	movs	r2, #0
    631e:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    6320:	2308      	movs	r3, #8
    6322:	18fa      	adds	r2, r7, r3
    6324:	4b0d      	ldr	r3, [pc, #52]	; (635c <udd_ep_free+0x7c>)
    6326:	0011      	movs	r1, r2
    6328:	0018      	movs	r0, r3
    632a:	4b0d      	ldr	r3, [pc, #52]	; (6360 <udd_ep_free+0x80>)
    632c:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    632e:	230f      	movs	r3, #15
    6330:	18fb      	adds	r3, r7, r3
    6332:	7819      	ldrb	r1, [r3, #0]
    6334:	4b09      	ldr	r3, [pc, #36]	; (635c <udd_ep_free+0x7c>)
    6336:	2200      	movs	r2, #0
    6338:	0018      	movs	r0, r3
    633a:	4b0a      	ldr	r3, [pc, #40]	; (6364 <udd_ep_free+0x84>)
    633c:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    633e:	1dfb      	adds	r3, r7, #7
    6340:	7819      	ldrb	r1, [r3, #0]
    6342:	4b06      	ldr	r3, [pc, #24]	; (635c <udd_ep_free+0x7c>)
    6344:	2200      	movs	r2, #0
    6346:	0018      	movs	r0, r3
    6348:	4b07      	ldr	r3, [pc, #28]	; (6368 <udd_ep_free+0x88>)
    634a:	4798      	blx	r3
}
    634c:	46c0      	nop			; (mov r8, r8)
    634e:	46bd      	mov	sp, r7
    6350:	b004      	add	sp, #16
    6352:	bd80      	pop	{r7, pc}
    6354:	00007db5 	.word	0x00007db5
    6358:	00006255 	.word	0x00006255
    635c:	20000378 	.word	0x20000378
    6360:	00007ddd 	.word	0x00007ddd
    6364:	000079fd 	.word	0x000079fd
    6368:	00007c11 	.word	0x00007c11

0000636c <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    636c:	b590      	push	{r4, r7, lr}
    636e:	b087      	sub	sp, #28
    6370:	af00      	add	r7, sp, #0
    6372:	0004      	movs	r4, r0
    6374:	0008      	movs	r0, r1
    6376:	0011      	movs	r1, r2
    6378:	1dfb      	adds	r3, r7, #7
    637a:	1c22      	adds	r2, r4, #0
    637c:	701a      	strb	r2, [r3, #0]
    637e:	1dbb      	adds	r3, r7, #6
    6380:	1c02      	adds	r2, r0, #0
    6382:	701a      	strb	r2, [r3, #0]
    6384:	1d3b      	adds	r3, r7, #4
    6386:	1c0a      	adds	r2, r1, #0
    6388:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    638a:	230c      	movs	r3, #12
    638c:	18fb      	adds	r3, r7, r3
    638e:	0018      	movs	r0, r3
    6390:	4b58      	ldr	r3, [pc, #352]	; (64f4 <udd_ep_alloc+0x188>)
    6392:	4798      	blx	r3

	config_ep.ep_address = ep;
    6394:	230c      	movs	r3, #12
    6396:	18fb      	adds	r3, r7, r3
    6398:	1dfa      	adds	r2, r7, #7
    639a:	7812      	ldrb	r2, [r2, #0]
    639c:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    639e:	1d3b      	adds	r3, r7, #4
    63a0:	881b      	ldrh	r3, [r3, #0]
    63a2:	2b08      	cmp	r3, #8
    63a4:	d804      	bhi.n	63b0 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    63a6:	230c      	movs	r3, #12
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	2200      	movs	r2, #0
    63ac:	705a      	strb	r2, [r3, #1]
    63ae:	e045      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    63b0:	1d3b      	adds	r3, r7, #4
    63b2:	881b      	ldrh	r3, [r3, #0]
    63b4:	2b10      	cmp	r3, #16
    63b6:	d804      	bhi.n	63c2 <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    63b8:	230c      	movs	r3, #12
    63ba:	18fb      	adds	r3, r7, r3
    63bc:	2201      	movs	r2, #1
    63be:	705a      	strb	r2, [r3, #1]
    63c0:	e03c      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    63c2:	1d3b      	adds	r3, r7, #4
    63c4:	881b      	ldrh	r3, [r3, #0]
    63c6:	2b20      	cmp	r3, #32
    63c8:	d804      	bhi.n	63d4 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    63ca:	230c      	movs	r3, #12
    63cc:	18fb      	adds	r3, r7, r3
    63ce:	2202      	movs	r2, #2
    63d0:	705a      	strb	r2, [r3, #1]
    63d2:	e033      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    63d4:	1d3b      	adds	r3, r7, #4
    63d6:	881b      	ldrh	r3, [r3, #0]
    63d8:	2b40      	cmp	r3, #64	; 0x40
    63da:	d804      	bhi.n	63e6 <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    63dc:	230c      	movs	r3, #12
    63de:	18fb      	adds	r3, r7, r3
    63e0:	2203      	movs	r2, #3
    63e2:	705a      	strb	r2, [r3, #1]
    63e4:	e02a      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    63e6:	1d3b      	adds	r3, r7, #4
    63e8:	881b      	ldrh	r3, [r3, #0]
    63ea:	2b80      	cmp	r3, #128	; 0x80
    63ec:	d804      	bhi.n	63f8 <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    63ee:	230c      	movs	r3, #12
    63f0:	18fb      	adds	r3, r7, r3
    63f2:	2204      	movs	r2, #4
    63f4:	705a      	strb	r2, [r3, #1]
    63f6:	e021      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    63f8:	1d3b      	adds	r3, r7, #4
    63fa:	881a      	ldrh	r2, [r3, #0]
    63fc:	2380      	movs	r3, #128	; 0x80
    63fe:	005b      	lsls	r3, r3, #1
    6400:	429a      	cmp	r2, r3
    6402:	d804      	bhi.n	640e <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    6404:	230c      	movs	r3, #12
    6406:	18fb      	adds	r3, r7, r3
    6408:	2205      	movs	r2, #5
    640a:	705a      	strb	r2, [r3, #1]
    640c:	e016      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    640e:	1d3b      	adds	r3, r7, #4
    6410:	881a      	ldrh	r2, [r3, #0]
    6412:	2380      	movs	r3, #128	; 0x80
    6414:	009b      	lsls	r3, r3, #2
    6416:	429a      	cmp	r2, r3
    6418:	d804      	bhi.n	6424 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    641a:	230c      	movs	r3, #12
    641c:	18fb      	adds	r3, r7, r3
    641e:	2206      	movs	r2, #6
    6420:	705a      	strb	r2, [r3, #1]
    6422:	e00b      	b.n	643c <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    6424:	1d3b      	adds	r3, r7, #4
    6426:	881b      	ldrh	r3, [r3, #0]
    6428:	4a33      	ldr	r2, [pc, #204]	; (64f8 <udd_ep_alloc+0x18c>)
    642a:	4293      	cmp	r3, r2
    642c:	d804      	bhi.n	6438 <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    642e:	230c      	movs	r3, #12
    6430:	18fb      	adds	r3, r7, r3
    6432:	2207      	movs	r2, #7
    6434:	705a      	strb	r2, [r3, #1]
    6436:	e001      	b.n	643c <udd_ep_alloc+0xd0>
	} else {
		return false;
    6438:	2300      	movs	r3, #0
    643a:	e057      	b.n	64ec <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    643c:	1dfb      	adds	r3, r7, #7
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	0018      	movs	r0, r3
    6442:	4b2e      	ldr	r3, [pc, #184]	; (64fc <udd_ep_alloc+0x190>)
    6444:	4798      	blx	r3
    6446:	0003      	movs	r3, r0
    6448:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    644a:	697b      	ldr	r3, [r7, #20]
    644c:	1d3a      	adds	r2, r7, #4
    644e:	8812      	ldrh	r2, [r2, #0]
    6450:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    6452:	1dbb      	adds	r3, r7, #6
    6454:	1dba      	adds	r2, r7, #6
    6456:	7812      	ldrb	r2, [r2, #0]
    6458:	2103      	movs	r1, #3
    645a:	400a      	ands	r2, r1
    645c:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    645e:	1dbb      	adds	r3, r7, #6
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	2b01      	cmp	r3, #1
    6464:	d104      	bne.n	6470 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    6466:	230c      	movs	r3, #12
    6468:	18fb      	adds	r3, r7, r3
    646a:	2202      	movs	r2, #2
    646c:	70da      	strb	r2, [r3, #3]
    646e:	e013      	b.n	6498 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    6470:	1dbb      	adds	r3, r7, #6
    6472:	781b      	ldrb	r3, [r3, #0]
    6474:	2b02      	cmp	r3, #2
    6476:	d104      	bne.n	6482 <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    6478:	230c      	movs	r3, #12
    647a:	18fb      	adds	r3, r7, r3
    647c:	2203      	movs	r2, #3
    647e:	70da      	strb	r2, [r3, #3]
    6480:	e00a      	b.n	6498 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    6482:	1dbb      	adds	r3, r7, #6
    6484:	781b      	ldrb	r3, [r3, #0]
    6486:	2b03      	cmp	r3, #3
    6488:	d104      	bne.n	6494 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    648a:	230c      	movs	r3, #12
    648c:	18fb      	adds	r3, r7, r3
    648e:	2204      	movs	r2, #4
    6490:	70da      	strb	r2, [r3, #3]
    6492:	e001      	b.n	6498 <udd_ep_alloc+0x12c>
	} else {
		return false;
    6494:	2300      	movs	r3, #0
    6496:	e029      	b.n	64ec <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6498:	2313      	movs	r3, #19
    649a:	18fb      	adds	r3, r7, r3
    649c:	1dfa      	adds	r2, r7, #7
    649e:	7812      	ldrb	r2, [r2, #0]
    64a0:	210f      	movs	r1, #15
    64a2:	400a      	ands	r2, r1
    64a4:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    64a6:	230c      	movs	r3, #12
    64a8:	18fa      	adds	r2, r7, r3
    64aa:	4b15      	ldr	r3, [pc, #84]	; (6500 <udd_ep_alloc+0x194>)
    64ac:	0011      	movs	r1, r2
    64ae:	0018      	movs	r0, r3
    64b0:	4b14      	ldr	r3, [pc, #80]	; (6504 <udd_ep_alloc+0x198>)
    64b2:	4798      	blx	r3
    64b4:	1e03      	subs	r3, r0, #0
    64b6:	d001      	beq.n	64bc <udd_ep_alloc+0x150>
		return false;
    64b8:	2300      	movs	r3, #0
    64ba:	e017      	b.n	64ec <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    64bc:	4a12      	ldr	r2, [pc, #72]	; (6508 <udd_ep_alloc+0x19c>)
    64be:	2313      	movs	r3, #19
    64c0:	18fb      	adds	r3, r7, r3
    64c2:	7819      	ldrb	r1, [r3, #0]
    64c4:	480e      	ldr	r0, [pc, #56]	; (6500 <udd_ep_alloc+0x194>)
    64c6:	0013      	movs	r3, r2
    64c8:	2200      	movs	r2, #0
    64ca:	4c10      	ldr	r4, [pc, #64]	; (650c <udd_ep_alloc+0x1a0>)
    64cc:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    64ce:	1dfb      	adds	r3, r7, #7
    64d0:	7819      	ldrb	r1, [r3, #0]
    64d2:	4b0b      	ldr	r3, [pc, #44]	; (6500 <udd_ep_alloc+0x194>)
    64d4:	2200      	movs	r2, #0
    64d6:	0018      	movs	r0, r3
    64d8:	4b0d      	ldr	r3, [pc, #52]	; (6510 <udd_ep_alloc+0x1a4>)
    64da:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    64dc:	1dfb      	adds	r3, r7, #7
    64de:	7819      	ldrb	r1, [r3, #0]
    64e0:	4b07      	ldr	r3, [pc, #28]	; (6500 <udd_ep_alloc+0x194>)
    64e2:	2201      	movs	r2, #1
    64e4:	0018      	movs	r0, r3
    64e6:	4b0a      	ldr	r3, [pc, #40]	; (6510 <udd_ep_alloc+0x1a4>)
    64e8:	4798      	blx	r3

	return true;
    64ea:	2301      	movs	r3, #1
}
    64ec:	0018      	movs	r0, r3
    64ee:	46bd      	mov	sp, r7
    64f0:	b007      	add	sp, #28
    64f2:	bd90      	pop	{r4, r7, pc}
    64f4:	00007db5 	.word	0x00007db5
    64f8:	000003ff 	.word	0x000003ff
    64fc:	00005e6d 	.word	0x00005e6d
    6500:	20000378 	.word	0x20000378
    6504:	00007ddd 	.word	0x00007ddd
    6508:	0000620d 	.word	0x0000620d
    650c:	0000797d 	.word	0x0000797d
    6510:	00007a75 	.word	0x00007a75

00006514 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    6514:	b580      	push	{r7, lr}
    6516:	b082      	sub	sp, #8
    6518:	af00      	add	r7, sp, #0
    651a:	0002      	movs	r2, r0
    651c:	1dfb      	adds	r3, r7, #7
    651e:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    6520:	1dfb      	adds	r3, r7, #7
    6522:	781a      	ldrb	r2, [r3, #0]
    6524:	4b04      	ldr	r3, [pc, #16]	; (6538 <udd_ep_is_halted+0x24>)
    6526:	0011      	movs	r1, r2
    6528:	0018      	movs	r0, r3
    652a:	4b04      	ldr	r3, [pc, #16]	; (653c <udd_ep_is_halted+0x28>)
    652c:	4798      	blx	r3
    652e:	0003      	movs	r3, r0
}
    6530:	0018      	movs	r0, r3
    6532:	46bd      	mov	sp, r7
    6534:	b002      	add	sp, #8
    6536:	bd80      	pop	{r7, pc}
    6538:	20000378 	.word	0x20000378
    653c:	0000835d 	.word	0x0000835d

00006540 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    6540:	b580      	push	{r7, lr}
    6542:	b084      	sub	sp, #16
    6544:	af00      	add	r7, sp, #0
    6546:	0002      	movs	r2, r0
    6548:	1dfb      	adds	r3, r7, #7
    654a:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    654c:	230f      	movs	r3, #15
    654e:	18fb      	adds	r3, r7, r3
    6550:	1dfa      	adds	r2, r7, #7
    6552:	7812      	ldrb	r2, [r2, #0]
    6554:	210f      	movs	r1, #15
    6556:	400a      	ands	r2, r1
    6558:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    655a:	230f      	movs	r3, #15
    655c:	18fb      	adds	r3, r7, r3
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2b01      	cmp	r3, #1
    6562:	d901      	bls.n	6568 <udd_ep_set_halt+0x28>
		return false;
    6564:	2300      	movs	r3, #0
    6566:	e00c      	b.n	6582 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    6568:	1dfb      	adds	r3, r7, #7
    656a:	781a      	ldrb	r2, [r3, #0]
    656c:	4b07      	ldr	r3, [pc, #28]	; (658c <udd_ep_set_halt+0x4c>)
    656e:	0011      	movs	r1, r2
    6570:	0018      	movs	r0, r3
    6572:	4b07      	ldr	r3, [pc, #28]	; (6590 <udd_ep_set_halt+0x50>)
    6574:	4798      	blx	r3

	udd_ep_abort(ep);
    6576:	1dfb      	adds	r3, r7, #7
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	0018      	movs	r0, r3
    657c:	4b05      	ldr	r3, [pc, #20]	; (6594 <udd_ep_set_halt+0x54>)
    657e:	4798      	blx	r3
	return true;
    6580:	2301      	movs	r3, #1
}
    6582:	0018      	movs	r0, r3
    6584:	46bd      	mov	sp, r7
    6586:	b004      	add	sp, #16
    6588:	bd80      	pop	{r7, pc}
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	20000378 	.word	0x20000378
    6590:	000083d1 	.word	0x000083d1
    6594:	00006255 	.word	0x00006255

00006598 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    6598:	b580      	push	{r7, lr}
    659a:	b084      	sub	sp, #16
    659c:	af00      	add	r7, sp, #0
    659e:	0002      	movs	r2, r0
    65a0:	1dfb      	adds	r3, r7, #7
    65a2:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    65a4:	230f      	movs	r3, #15
    65a6:	18fb      	adds	r3, r7, r3
    65a8:	1dfa      	adds	r2, r7, #7
    65aa:	7812      	ldrb	r2, [r2, #0]
    65ac:	210f      	movs	r1, #15
    65ae:	400a      	ands	r2, r1
    65b0:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    65b2:	230f      	movs	r3, #15
    65b4:	18fb      	adds	r3, r7, r3
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	2b01      	cmp	r3, #1
    65ba:	d901      	bls.n	65c0 <udd_ep_clear_halt+0x28>
		return false;
    65bc:	2300      	movs	r3, #0
    65be:	e01d      	b.n	65fc <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    65c0:	1dfb      	adds	r3, r7, #7
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	0018      	movs	r0, r3
    65c6:	4b0f      	ldr	r3, [pc, #60]	; (6604 <udd_ep_clear_halt+0x6c>)
    65c8:	4798      	blx	r3
    65ca:	0003      	movs	r3, r0
    65cc:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    65ce:	1dfb      	adds	r3, r7, #7
    65d0:	781a      	ldrb	r2, [r3, #0]
    65d2:	4b0d      	ldr	r3, [pc, #52]	; (6608 <udd_ep_clear_halt+0x70>)
    65d4:	0011      	movs	r1, r2
    65d6:	0018      	movs	r0, r3
    65d8:	4b0c      	ldr	r3, [pc, #48]	; (660c <udd_ep_clear_halt+0x74>)
    65da:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    65dc:	68bb      	ldr	r3, [r7, #8]
    65de:	7c9b      	ldrb	r3, [r3, #18]
    65e0:	2201      	movs	r2, #1
    65e2:	4013      	ands	r3, r2
    65e4:	b2db      	uxtb	r3, r3
    65e6:	2b00      	cmp	r3, #0
    65e8:	d007      	beq.n	65fa <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    65ea:	68bb      	ldr	r3, [r7, #8]
    65ec:	7c9a      	ldrb	r2, [r3, #18]
    65ee:	2101      	movs	r1, #1
    65f0:	438a      	bics	r2, r1
    65f2:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    65f4:	68bb      	ldr	r3, [r7, #8]
    65f6:	681b      	ldr	r3, [r3, #0]
    65f8:	4798      	blx	r3
	}

	return true;
    65fa:	2301      	movs	r3, #1
}
    65fc:	0018      	movs	r0, r3
    65fe:	46bd      	mov	sp, r7
    6600:	b004      	add	sp, #16
    6602:	bd80      	pop	{r7, pc}
    6604:	00005e6d 	.word	0x00005e6d
    6608:	20000378 	.word	0x20000378
    660c:	0000842d 	.word	0x0000842d

00006610 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    6610:	b580      	push	{r7, lr}
    6612:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6614:	4b07      	ldr	r3, [pc, #28]	; (6634 <udd_ctrl_stall_data+0x24>)
    6616:	2205      	movs	r2, #5
    6618:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    661a:	4b07      	ldr	r3, [pc, #28]	; (6638 <udd_ctrl_stall_data+0x28>)
    661c:	2180      	movs	r1, #128	; 0x80
    661e:	0018      	movs	r0, r3
    6620:	4b06      	ldr	r3, [pc, #24]	; (663c <udd_ctrl_stall_data+0x2c>)
    6622:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    6624:	4b04      	ldr	r3, [pc, #16]	; (6638 <udd_ctrl_stall_data+0x28>)
    6626:	2100      	movs	r1, #0
    6628:	0018      	movs	r0, r3
    662a:	4b05      	ldr	r3, [pc, #20]	; (6640 <udd_ctrl_stall_data+0x30>)
    662c:	4798      	blx	r3
}
    662e:	46c0      	nop			; (mov r8, r8)
    6630:	46bd      	mov	sp, r7
    6632:	bd80      	pop	{r7, pc}
    6634:	20000154 	.word	0x20000154
    6638:	20000378 	.word	0x20000378
    663c:	000083d1 	.word	0x000083d1
    6640:	0000842d 	.word	0x0000842d

00006644 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    6644:	b590      	push	{r4, r7, lr}
    6646:	b089      	sub	sp, #36	; 0x24
    6648:	af00      	add	r7, sp, #0
    664a:	60ba      	str	r2, [r7, #8]
    664c:	607b      	str	r3, [r7, #4]
    664e:	230f      	movs	r3, #15
    6650:	18fb      	adds	r3, r7, r3
    6652:	1c02      	adds	r2, r0, #0
    6654:	701a      	strb	r2, [r3, #0]
    6656:	230e      	movs	r3, #14
    6658:	18fb      	adds	r3, r7, r3
    665a:	1c0a      	adds	r2, r1, #0
    665c:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    665e:	231d      	movs	r3, #29
    6660:	18fb      	adds	r3, r7, r3
    6662:	220f      	movs	r2, #15
    6664:	18ba      	adds	r2, r7, r2
    6666:	7812      	ldrb	r2, [r2, #0]
    6668:	210f      	movs	r1, #15
    666a:	400a      	ands	r2, r1
    666c:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    666e:	231d      	movs	r3, #29
    6670:	18fb      	adds	r3, r7, r3
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	2b01      	cmp	r3, #1
    6676:	d807      	bhi.n	6688 <udd_ep_run+0x44>
    6678:	230f      	movs	r3, #15
    667a:	18fb      	adds	r3, r7, r3
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	0018      	movs	r0, r3
    6680:	4b9f      	ldr	r3, [pc, #636]	; (6900 <udd_ep_run+0x2bc>)
    6682:	4798      	blx	r3
    6684:	1e03      	subs	r3, r0, #0
    6686:	d001      	beq.n	668c <udd_ep_run+0x48>
		return false;
    6688:	2300      	movs	r3, #0
    668a:	e134      	b.n	68f6 <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    668c:	230f      	movs	r3, #15
    668e:	18fb      	adds	r3, r7, r3
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	0018      	movs	r0, r3
    6694:	4b9b      	ldr	r3, [pc, #620]	; (6904 <udd_ep_run+0x2c0>)
    6696:	4798      	blx	r3
    6698:	0003      	movs	r3, r0
    669a:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    669c:	4b9a      	ldr	r3, [pc, #616]	; (6908 <udd_ep_run+0x2c4>)
    669e:	4798      	blx	r3
    66a0:	0003      	movs	r3, r0
    66a2:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    66a4:	69bb      	ldr	r3, [r7, #24]
    66a6:	7c9b      	ldrb	r3, [r3, #18]
    66a8:	2201      	movs	r2, #1
    66aa:	4013      	ands	r3, r2
    66ac:	b2db      	uxtb	r3, r3
    66ae:	2b00      	cmp	r3, #0
    66b0:	d005      	beq.n	66be <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    66b2:	697b      	ldr	r3, [r7, #20]
    66b4:	0018      	movs	r0, r3
    66b6:	4b95      	ldr	r3, [pc, #596]	; (690c <udd_ep_run+0x2c8>)
    66b8:	4798      	blx	r3
		return false; /* Job already on going */
    66ba:	2300      	movs	r3, #0
    66bc:	e11b      	b.n	68f6 <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    66be:	69bb      	ldr	r3, [r7, #24]
    66c0:	7c9a      	ldrb	r2, [r3, #18]
    66c2:	2101      	movs	r1, #1
    66c4:	430a      	orrs	r2, r1
    66c6:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    66c8:	697b      	ldr	r3, [r7, #20]
    66ca:	0018      	movs	r0, r3
    66cc:	4b8f      	ldr	r3, [pc, #572]	; (690c <udd_ep_run+0x2c8>)
    66ce:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    66d0:	69bb      	ldr	r3, [r7, #24]
    66d2:	68ba      	ldr	r2, [r7, #8]
    66d4:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    66d6:	69bb      	ldr	r3, [r7, #24]
    66d8:	687a      	ldr	r2, [r7, #4]
    66da:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    66dc:	69bb      	ldr	r3, [r7, #24]
    66de:	2200      	movs	r2, #0
    66e0:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    66e2:	69bb      	ldr	r3, [r7, #24]
    66e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    66e6:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    66e8:	69bb      	ldr	r3, [r7, #24]
    66ea:	220e      	movs	r2, #14
    66ec:	18ba      	adds	r2, r7, r2
    66ee:	7812      	ldrb	r2, [r2, #0]
    66f0:	2101      	movs	r1, #1
    66f2:	400a      	ands	r2, r1
    66f4:	1890      	adds	r0, r2, r2
    66f6:	7c9a      	ldrb	r2, [r3, #18]
    66f8:	2102      	movs	r1, #2
    66fa:	438a      	bics	r2, r1
    66fc:	1c11      	adds	r1, r2, #0
    66fe:	1c02      	adds	r2, r0, #0
    6700:	430a      	orrs	r2, r1
    6702:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    6704:	69bb      	ldr	r3, [r7, #24]
    6706:	7c9a      	ldrb	r2, [r3, #18]
    6708:	2104      	movs	r1, #4
    670a:	438a      	bics	r2, r1
    670c:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    670e:	230f      	movs	r3, #15
    6710:	18fb      	adds	r3, r7, r3
    6712:	781b      	ldrb	r3, [r3, #0]
    6714:	b25b      	sxtb	r3, r3
    6716:	2b00      	cmp	r3, #0
    6718:	db00      	blt.n	671c <udd_ep_run+0xd8>
    671a:	e078      	b.n	680e <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    671c:	69bb      	ldr	r3, [r7, #24]
    671e:	689b      	ldr	r3, [r3, #8]
    6720:	2b00      	cmp	r3, #0
    6722:	d03f      	beq.n	67a4 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    6724:	69bb      	ldr	r3, [r7, #24]
    6726:	689a      	ldr	r2, [r3, #8]
    6728:	231e      	movs	r3, #30
    672a:	18fb      	adds	r3, r7, r3
    672c:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    672e:	231e      	movs	r3, #30
    6730:	18fb      	adds	r3, r7, r3
    6732:	881b      	ldrh	r3, [r3, #0]
    6734:	4a76      	ldr	r2, [pc, #472]	; (6910 <udd_ep_run+0x2cc>)
    6736:	4293      	cmp	r3, r2
    6738:	d90d      	bls.n	6756 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    673a:	69bb      	ldr	r3, [r7, #24]
    673c:	8a1b      	ldrh	r3, [r3, #16]
    673e:	0019      	movs	r1, r3
    6740:	4a73      	ldr	r2, [pc, #460]	; (6910 <udd_ep_run+0x2cc>)
    6742:	4b74      	ldr	r3, [pc, #464]	; (6914 <udd_ep_run+0x2d0>)
    6744:	0010      	movs	r0, r2
    6746:	4798      	blx	r3
    6748:	000b      	movs	r3, r1

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    674a:	b29a      	uxth	r2, r3
    674c:	231e      	movs	r3, #30
    674e:	18fb      	adds	r3, r7, r3
    6750:	496f      	ldr	r1, [pc, #444]	; (6910 <udd_ep_run+0x2cc>)
    6752:	1a8a      	subs	r2, r1, r2
    6754:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    6756:	69bb      	ldr	r3, [r7, #24]
    6758:	7c9b      	ldrb	r3, [r3, #18]
    675a:	2202      	movs	r2, #2
    675c:	4013      	ands	r3, r2
    675e:	b2db      	uxtb	r3, r3
    6760:	2b00      	cmp	r3, #0
    6762:	d00d      	beq.n	6780 <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    6764:	69bb      	ldr	r3, [r7, #24]
    6766:	8a19      	ldrh	r1, [r3, #16]
    6768:	231e      	movs	r3, #30
    676a:	18fb      	adds	r3, r7, r3
    676c:	881a      	ldrh	r2, [r3, #0]
    676e:	4b6a      	ldr	r3, [pc, #424]	; (6918 <udd_ep_run+0x2d4>)
    6770:	0010      	movs	r0, r2
    6772:	4798      	blx	r3
    6774:	000b      	movs	r3, r1
    6776:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    6778:	2b00      	cmp	r3, #0
    677a:	d101      	bne.n	6780 <udd_ep_run+0x13c>
    677c:	2301      	movs	r3, #1
    677e:	e000      	b.n	6782 <udd_ep_run+0x13e>
    6780:	2300      	movs	r3, #0
    6782:	b2db      	uxtb	r3, r3
    6784:	1c1a      	adds	r2, r3, #0
    6786:	2301      	movs	r3, #1
    6788:	4013      	ands	r3, r2
    678a:	b2da      	uxtb	r2, r3
    678c:	69bb      	ldr	r3, [r7, #24]
    678e:	2101      	movs	r1, #1
    6790:	400a      	ands	r2, r1
    6792:	1890      	adds	r0, r2, r2
    6794:	7c9a      	ldrb	r2, [r3, #18]
    6796:	2102      	movs	r1, #2
    6798:	438a      	bics	r2, r1
    679a:	1c11      	adds	r1, r2, #0
    679c:	1c02      	adds	r2, r0, #0
    679e:	430a      	orrs	r2, r1
    67a0:	749a      	strb	r2, [r3, #18]
    67a2:	e023      	b.n	67ec <udd_ep_run+0x1a8>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    67a4:	69bb      	ldr	r3, [r7, #24]
    67a6:	7c9b      	ldrb	r3, [r3, #18]
    67a8:	2202      	movs	r2, #2
    67aa:	4013      	ands	r3, r2
    67ac:	b2db      	uxtb	r3, r3
    67ae:	2b00      	cmp	r3, #0
    67b0:	d009      	beq.n	67c6 <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    67b2:	69bb      	ldr	r3, [r7, #24]
    67b4:	7c9a      	ldrb	r2, [r3, #18]
    67b6:	2102      	movs	r1, #2
    67b8:	438a      	bics	r2, r1
    67ba:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    67bc:	231e      	movs	r3, #30
    67be:	18fb      	adds	r3, r7, r3
    67c0:	2200      	movs	r2, #0
    67c2:	801a      	strh	r2, [r3, #0]
    67c4:	e012      	b.n	67ec <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    67c6:	69bb      	ldr	r3, [r7, #24]
    67c8:	7c9a      	ldrb	r2, [r3, #18]
    67ca:	2101      	movs	r1, #1
    67cc:	438a      	bics	r2, r1
    67ce:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    67d0:	69bb      	ldr	r3, [r7, #24]
    67d2:	681b      	ldr	r3, [r3, #0]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d007      	beq.n	67e8 <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    67d8:	69bb      	ldr	r3, [r7, #24]
    67da:	681b      	ldr	r3, [r3, #0]
    67dc:	220f      	movs	r2, #15
    67de:	18ba      	adds	r2, r7, r2
    67e0:	7812      	ldrb	r2, [r2, #0]
    67e2:	2100      	movs	r1, #0
    67e4:	2000      	movs	r0, #0
    67e6:	4798      	blx	r3
			}
			return true;
    67e8:	2301      	movs	r3, #1
    67ea:	e084      	b.n	68f6 <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    67ec:	69bb      	ldr	r3, [r7, #24]
    67ee:	685a      	ldr	r2, [r3, #4]
    67f0:	231e      	movs	r3, #30
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	881c      	ldrh	r4, [r3, #0]
    67f6:	231d      	movs	r3, #29
    67f8:	18fb      	adds	r3, r7, r3
    67fa:	7819      	ldrb	r1, [r3, #0]
    67fc:	4847      	ldr	r0, [pc, #284]	; (691c <udd_ep_run+0x2d8>)
    67fe:	0023      	movs	r3, r4
    6800:	4c47      	ldr	r4, [pc, #284]	; (6920 <udd_ep_run+0x2dc>)
    6802:	47a0      	blx	r4
    6804:	0003      	movs	r3, r0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    6806:	425a      	negs	r2, r3
    6808:	4153      	adcs	r3, r2
    680a:	b2db      	uxtb	r3, r3
    680c:	e073      	b.n	68f6 <udd_ep_run+0x2b2>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    680e:	69bb      	ldr	r3, [r7, #24]
    6810:	689b      	ldr	r3, [r3, #8]
    6812:	2b00      	cmp	r3, #0
    6814:	d05d      	beq.n	68d2 <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    6816:	69bb      	ldr	r3, [r7, #24]
    6818:	689a      	ldr	r2, [r3, #8]
    681a:	231e      	movs	r3, #30
    681c:	18fb      	adds	r3, r7, r3
    681e:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    6820:	231e      	movs	r3, #30
    6822:	18fb      	adds	r3, r7, r3
    6824:	881b      	ldrh	r3, [r3, #0]
    6826:	4a3a      	ldr	r2, [pc, #232]	; (6910 <udd_ep_run+0x2cc>)
    6828:	4293      	cmp	r3, r2
    682a:	d90e      	bls.n	684a <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    682c:	69bb      	ldr	r3, [r7, #24]
    682e:	8a1b      	ldrh	r3, [r3, #16]
    6830:	0019      	movs	r1, r3
    6832:	4a37      	ldr	r2, [pc, #220]	; (6910 <udd_ep_run+0x2cc>)
    6834:	4b37      	ldr	r3, [pc, #220]	; (6914 <udd_ep_run+0x2d0>)
    6836:	0010      	movs	r0, r2
    6838:	4798      	blx	r3
    683a:	000b      	movs	r3, r1
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    683c:	b29a      	uxth	r2, r3
    683e:	231e      	movs	r3, #30
    6840:	18fb      	adds	r3, r7, r3
    6842:	4933      	ldr	r1, [pc, #204]	; (6910 <udd_ep_run+0x2cc>)
    6844:	1a8a      	subs	r2, r1, r2
    6846:	801a      	strh	r2, [r3, #0]
    6848:	e010      	b.n	686c <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    684a:	69bb      	ldr	r3, [r7, #24]
    684c:	8a19      	ldrh	r1, [r3, #16]
    684e:	231e      	movs	r3, #30
    6850:	18fb      	adds	r3, r7, r3
    6852:	881a      	ldrh	r2, [r3, #0]
    6854:	4b30      	ldr	r3, [pc, #192]	; (6918 <udd_ep_run+0x2d4>)
    6856:	0010      	movs	r0, r2
    6858:	4798      	blx	r3
    685a:	000b      	movs	r3, r1
    685c:	b29a      	uxth	r2, r3
    685e:	231e      	movs	r3, #30
    6860:	18fb      	adds	r3, r7, r3
    6862:	211e      	movs	r1, #30
    6864:	1879      	adds	r1, r7, r1
    6866:	8809      	ldrh	r1, [r1, #0]
    6868:	1a8a      	subs	r2, r1, r2
    686a:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    686c:	69bb      	ldr	r3, [r7, #24]
    686e:	8a1b      	ldrh	r3, [r3, #16]
    6870:	221e      	movs	r2, #30
    6872:	18ba      	adds	r2, r7, r2
    6874:	8812      	ldrh	r2, [r2, #0]
    6876:	429a      	cmp	r2, r3
    6878:	d21a      	bcs.n	68b0 <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    687a:	69bb      	ldr	r3, [r7, #24]
    687c:	7c9a      	ldrb	r2, [r3, #18]
    687e:	2104      	movs	r1, #4
    6880:	430a      	orrs	r2, r1
    6882:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    6884:	231d      	movs	r3, #29
    6886:	18fb      	adds	r3, r7, r3
    6888:	781b      	ldrb	r3, [r3, #0]
    688a:	3b01      	subs	r3, #1
    688c:	019a      	lsls	r2, r3, #6
    688e:	4b25      	ldr	r3, [pc, #148]	; (6924 <udd_ep_run+0x2e0>)
    6890:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    6892:	69bb      	ldr	r3, [r7, #24]
    6894:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    6896:	001c      	movs	r4, r3
    6898:	231d      	movs	r3, #29
    689a:	18fb      	adds	r3, r7, r3
    689c:	7819      	ldrb	r1, [r3, #0]
    689e:	481f      	ldr	r0, [pc, #124]	; (691c <udd_ep_run+0x2d8>)
    68a0:	0023      	movs	r3, r4
    68a2:	4c21      	ldr	r4, [pc, #132]	; (6928 <udd_ep_run+0x2e4>)
    68a4:	47a0      	blx	r4
    68a6:	0003      	movs	r3, r0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    68a8:	425a      	negs	r2, r3
    68aa:	4153      	adcs	r3, r2
    68ac:	b2db      	uxtb	r3, r3
    68ae:	e022      	b.n	68f6 <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    68b0:	69bb      	ldr	r3, [r7, #24]
    68b2:	685a      	ldr	r2, [r3, #4]
    68b4:	231e      	movs	r3, #30
    68b6:	18fb      	adds	r3, r7, r3
    68b8:	881c      	ldrh	r4, [r3, #0]
    68ba:	231d      	movs	r3, #29
    68bc:	18fb      	adds	r3, r7, r3
    68be:	7819      	ldrb	r1, [r3, #0]
    68c0:	4816      	ldr	r0, [pc, #88]	; (691c <udd_ep_run+0x2d8>)
    68c2:	0023      	movs	r3, r4
    68c4:	4c18      	ldr	r4, [pc, #96]	; (6928 <udd_ep_run+0x2e4>)
    68c6:	47a0      	blx	r4
    68c8:	0003      	movs	r3, r0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    68ca:	425a      	negs	r2, r3
    68cc:	4153      	adcs	r3, r2
    68ce:	b2db      	uxtb	r3, r3
    68d0:	e011      	b.n	68f6 <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    68d2:	69bb      	ldr	r3, [r7, #24]
    68d4:	7c9a      	ldrb	r2, [r3, #18]
    68d6:	2101      	movs	r1, #1
    68d8:	438a      	bics	r2, r1
    68da:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    68dc:	69bb      	ldr	r3, [r7, #24]
    68de:	681b      	ldr	r3, [r3, #0]
    68e0:	2b00      	cmp	r3, #0
    68e2:	d007      	beq.n	68f4 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    68e4:	69bb      	ldr	r3, [r7, #24]
    68e6:	681b      	ldr	r3, [r3, #0]
    68e8:	220f      	movs	r2, #15
    68ea:	18ba      	adds	r2, r7, r2
    68ec:	7812      	ldrb	r2, [r2, #0]
    68ee:	2100      	movs	r1, #0
    68f0:	2000      	movs	r0, #0
    68f2:	4798      	blx	r3
			}
			return true;
    68f4:	2301      	movs	r3, #1
		}
	}
}
    68f6:	0018      	movs	r0, r3
    68f8:	46bd      	mov	sp, r7
    68fa:	b009      	add	sp, #36	; 0x24
    68fc:	bd90      	pop	{r4, r7, pc}
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	00006515 	.word	0x00006515
    6904:	00005e6d 	.word	0x00005e6d
    6908:	00005ae9 	.word	0x00005ae9
    690c:	00005b31 	.word	0x00005b31
    6910:	00001fff 	.word	0x00001fff
    6914:	00009cbd 	.word	0x00009cbd
    6918:	00009ae9 	.word	0x00009ae9
    691c:	20000378 	.word	0x20000378
    6920:	00008559 	.word	0x00008559
    6924:	20000338 	.word	0x20000338
    6928:	0000860d 	.word	0x0000860d

0000692c <udd_set_address>:

void udd_set_address(uint8_t address)
{
    692c:	b580      	push	{r7, lr}
    692e:	b082      	sub	sp, #8
    6930:	af00      	add	r7, sp, #0
    6932:	0002      	movs	r2, r0
    6934:	1dfb      	adds	r3, r7, #7
    6936:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    6938:	1dfb      	adds	r3, r7, #7
    693a:	781a      	ldrb	r2, [r3, #0]
    693c:	4b04      	ldr	r3, [pc, #16]	; (6950 <udd_set_address+0x24>)
    693e:	0011      	movs	r1, r2
    6940:	0018      	movs	r0, r3
    6942:	4b04      	ldr	r3, [pc, #16]	; (6954 <udd_set_address+0x28>)
    6944:	4798      	blx	r3
}
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	46bd      	mov	sp, r7
    694a:	b002      	add	sp, #8
    694c:	bd80      	pop	{r7, pc}
    694e:	46c0      	nop			; (mov r8, r8)
    6950:	20000378 	.word	0x20000378
    6954:	00005c25 	.word	0x00005c25

00006958 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    6958:	b580      	push	{r7, lr}
    695a:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    695c:	4b03      	ldr	r3, [pc, #12]	; (696c <udd_getaddress+0x14>)
    695e:	0018      	movs	r0, r3
    6960:	4b03      	ldr	r3, [pc, #12]	; (6970 <udd_getaddress+0x18>)
    6962:	4798      	blx	r3
    6964:	0003      	movs	r3, r0
}
    6966:	0018      	movs	r0, r3
    6968:	46bd      	mov	sp, r7
    696a:	bd80      	pop	{r7, pc}
    696c:	20000378 	.word	0x20000378
    6970:	00005c09 	.word	0x00005c09

00006974 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    6974:	b580      	push	{r7, lr}
    6976:	b082      	sub	sp, #8
    6978:	af00      	add	r7, sp, #0
    697a:	6078      	str	r0, [r7, #4]
    697c:	000a      	movs	r2, r1
    697e:	1cbb      	adds	r3, r7, #2
    6980:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    6982:	4b05      	ldr	r3, [pc, #20]	; (6998 <udd_set_setup_payload+0x24>)
    6984:	687a      	ldr	r2, [r7, #4]
    6986:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    6988:	4b03      	ldr	r3, [pc, #12]	; (6998 <udd_set_setup_payload+0x24>)
    698a:	1cba      	adds	r2, r7, #2
    698c:	8812      	ldrh	r2, [r2, #0]
    698e:	819a      	strh	r2, [r3, #12]
}
    6990:	46c0      	nop			; (mov r8, r8)
    6992:	46bd      	mov	sp, r7
    6994:	b002      	add	sp, #8
    6996:	bd80      	pop	{r7, pc}
    6998:	200004e0 	.word	0x200004e0

0000699c <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    699c:	b580      	push	{r7, lr}
    699e:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    69a0:	4b17      	ldr	r3, [pc, #92]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69a2:	781a      	ldrb	r2, [r3, #0]
    69a4:	4b17      	ldr	r3, [pc, #92]	; (6a04 <udd_ctrl_fetch_ram+0x68>)
    69a6:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    69a8:	4b15      	ldr	r3, [pc, #84]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69aa:	785a      	ldrb	r2, [r3, #1]
    69ac:	4b15      	ldr	r3, [pc, #84]	; (6a04 <udd_ctrl_fetch_ram+0x68>)
    69ae:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    69b0:	4b13      	ldr	r3, [pc, #76]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69b2:	78db      	ldrb	r3, [r3, #3]
    69b4:	b29b      	uxth	r3, r3
    69b6:	021b      	lsls	r3, r3, #8
    69b8:	b29a      	uxth	r2, r3
    69ba:	4b11      	ldr	r3, [pc, #68]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69bc:	789b      	ldrb	r3, [r3, #2]
    69be:	b29b      	uxth	r3, r3
    69c0:	18d3      	adds	r3, r2, r3
    69c2:	b29a      	uxth	r2, r3
    69c4:	4b0f      	ldr	r3, [pc, #60]	; (6a04 <udd_ctrl_fetch_ram+0x68>)
    69c6:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    69c8:	4b0d      	ldr	r3, [pc, #52]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69ca:	795b      	ldrb	r3, [r3, #5]
    69cc:	b29b      	uxth	r3, r3
    69ce:	021b      	lsls	r3, r3, #8
    69d0:	b29a      	uxth	r2, r3
    69d2:	4b0b      	ldr	r3, [pc, #44]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69d4:	791b      	ldrb	r3, [r3, #4]
    69d6:	b29b      	uxth	r3, r3
    69d8:	18d3      	adds	r3, r2, r3
    69da:	b29a      	uxth	r2, r3
    69dc:	4b09      	ldr	r3, [pc, #36]	; (6a04 <udd_ctrl_fetch_ram+0x68>)
    69de:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    69e0:	4b07      	ldr	r3, [pc, #28]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69e2:	79db      	ldrb	r3, [r3, #7]
    69e4:	b29b      	uxth	r3, r3
    69e6:	021b      	lsls	r3, r3, #8
    69e8:	b29a      	uxth	r2, r3
    69ea:	4b05      	ldr	r3, [pc, #20]	; (6a00 <udd_ctrl_fetch_ram+0x64>)
    69ec:	799b      	ldrb	r3, [r3, #6]
    69ee:	b29b      	uxth	r3, r3
    69f0:	18d3      	adds	r3, r2, r3
    69f2:	b29a      	uxth	r2, r3
    69f4:	4b03      	ldr	r3, [pc, #12]	; (6a04 <udd_ctrl_fetch_ram+0x68>)
    69f6:	80da      	strh	r2, [r3, #6]
}
    69f8:	46c0      	nop			; (mov r8, r8)
    69fa:	46bd      	mov	sp, r7
    69fc:	bd80      	pop	{r7, pc}
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	200004f8 	.word	0x200004f8
    6a04:	200004e0 	.word	0x200004e0

00006a08 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    6a08:	b5b0      	push	{r4, r5, r7, lr}
    6a0a:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    6a0c:	4b09      	ldr	r3, [pc, #36]	; (6a34 <udd_ctrl_send_zlp_in+0x2c>)
    6a0e:	2203      	movs	r2, #3
    6a10:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    6a12:	4a09      	ldr	r2, [pc, #36]	; (6a38 <udd_ctrl_send_zlp_in+0x30>)
    6a14:	4b09      	ldr	r3, [pc, #36]	; (6a3c <udd_ctrl_send_zlp_in+0x34>)
    6a16:	0011      	movs	r1, r2
    6a18:	0018      	movs	r0, r3
    6a1a:	4b09      	ldr	r3, [pc, #36]	; (6a40 <udd_ctrl_send_zlp_in+0x38>)
    6a1c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    6a1e:	4b09      	ldr	r3, [pc, #36]	; (6a44 <udd_ctrl_send_zlp_in+0x3c>)
    6a20:	689a      	ldr	r2, [r3, #8]
    6a22:	4806      	ldr	r0, [pc, #24]	; (6a3c <udd_ctrl_send_zlp_in+0x34>)
    6a24:	2300      	movs	r3, #0
    6a26:	2100      	movs	r1, #0
    6a28:	4c07      	ldr	r4, [pc, #28]	; (6a48 <udd_ctrl_send_zlp_in+0x40>)
    6a2a:	47a0      	blx	r4
}
    6a2c:	46c0      	nop			; (mov r8, r8)
    6a2e:	46bd      	mov	sp, r7
    6a30:	bdb0      	pop	{r4, r5, r7, pc}
    6a32:	46c0      	nop			; (mov r8, r8)
    6a34:	20000154 	.word	0x20000154
    6a38:	200004f8 	.word	0x200004f8
    6a3c:	20000378 	.word	0x20000378
    6a40:	000086bd 	.word	0x000086bd
    6a44:	200004e0 	.word	0x200004e0
    6a48:	00008559 	.word	0x00008559

00006a4c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    6a4c:	b590      	push	{r4, r7, lr}
    6a4e:	b083      	sub	sp, #12
    6a50:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6a52:	4b30      	ldr	r3, [pc, #192]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6a54:	8999      	ldrh	r1, [r3, #12]
    6a56:	4b30      	ldr	r3, [pc, #192]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6a58:	881a      	ldrh	r2, [r3, #0]
    6a5a:	1dbb      	adds	r3, r7, #6
    6a5c:	1a8a      	subs	r2, r1, r2
    6a5e:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    6a60:	1dbb      	adds	r3, r7, #6
    6a62:	881b      	ldrh	r3, [r3, #0]
    6a64:	2b00      	cmp	r3, #0
    6a66:	d130      	bne.n	6aca <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6a68:	4b2c      	ldr	r3, [pc, #176]	; (6b1c <udd_ctrl_in_sent+0xd0>)
    6a6a:	881a      	ldrh	r2, [r3, #0]
    6a6c:	4b2a      	ldr	r3, [pc, #168]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6a6e:	881b      	ldrh	r3, [r3, #0]
    6a70:	18d3      	adds	r3, r2, r3
    6a72:	b29a      	uxth	r2, r3
    6a74:	4b29      	ldr	r3, [pc, #164]	; (6b1c <udd_ctrl_in_sent+0xd0>)
    6a76:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    6a78:	4b26      	ldr	r3, [pc, #152]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6a7a:	88da      	ldrh	r2, [r3, #6]
    6a7c:	4b27      	ldr	r3, [pc, #156]	; (6b1c <udd_ctrl_in_sent+0xd0>)
    6a7e:	881b      	ldrh	r3, [r3, #0]
    6a80:	429a      	cmp	r2, r3
    6a82:	d003      	beq.n	6a8c <udd_ctrl_in_sent+0x40>
    6a84:	4b26      	ldr	r3, [pc, #152]	; (6b20 <udd_ctrl_in_sent+0xd4>)
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d009      	beq.n	6aa0 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6a8c:	4b25      	ldr	r3, [pc, #148]	; (6b24 <udd_ctrl_in_sent+0xd8>)
    6a8e:	2204      	movs	r2, #4
    6a90:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    6a92:	4a25      	ldr	r2, [pc, #148]	; (6b28 <udd_ctrl_in_sent+0xdc>)
    6a94:	4b25      	ldr	r3, [pc, #148]	; (6b2c <udd_ctrl_in_sent+0xe0>)
    6a96:	0011      	movs	r1, r2
    6a98:	0018      	movs	r0, r3
    6a9a:	4b25      	ldr	r3, [pc, #148]	; (6b30 <udd_ctrl_in_sent+0xe4>)
    6a9c:	4798      	blx	r3
			return;
    6a9e:	e035      	b.n	6b0c <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    6aa0:	4b1c      	ldr	r3, [pc, #112]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6aa2:	695b      	ldr	r3, [r3, #20]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d010      	beq.n	6aca <udd_ctrl_in_sent+0x7e>
    6aa8:	4b1a      	ldr	r3, [pc, #104]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6aaa:	695b      	ldr	r3, [r3, #20]
    6aac:	4798      	blx	r3
    6aae:	0003      	movs	r3, r0
    6ab0:	001a      	movs	r2, r3
    6ab2:	2301      	movs	r3, #1
    6ab4:	4053      	eors	r3, r2
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d106      	bne.n	6aca <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    6abc:	4b16      	ldr	r3, [pc, #88]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6abe:	2200      	movs	r2, #0
    6ac0:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    6ac2:	1dbb      	adds	r3, r7, #6
    6ac4:	4a13      	ldr	r2, [pc, #76]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6ac6:	8992      	ldrh	r2, [r2, #12]
    6ac8:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    6aca:	1dbb      	adds	r3, r7, #6
    6acc:	881b      	ldrh	r3, [r3, #0]
    6ace:	2b07      	cmp	r3, #7
    6ad0:	d906      	bls.n	6ae0 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    6ad2:	1dbb      	adds	r3, r7, #6
    6ad4:	2208      	movs	r2, #8
    6ad6:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    6ad8:	4b11      	ldr	r3, [pc, #68]	; (6b20 <udd_ctrl_in_sent+0xd4>)
    6ada:	2200      	movs	r2, #0
    6adc:	701a      	strb	r2, [r3, #0]
    6ade:	e002      	b.n	6ae6 <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    6ae0:	4b0f      	ldr	r3, [pc, #60]	; (6b20 <udd_ctrl_in_sent+0xd4>)
    6ae2:	2201      	movs	r2, #1
    6ae4:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    6ae6:	4b0b      	ldr	r3, [pc, #44]	; (6b14 <udd_ctrl_in_sent+0xc8>)
    6ae8:	689b      	ldr	r3, [r3, #8]
    6aea:	4a0b      	ldr	r2, [pc, #44]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6aec:	8812      	ldrh	r2, [r2, #0]
    6aee:	189a      	adds	r2, r3, r2
    6af0:	1dbb      	adds	r3, r7, #6
    6af2:	881b      	ldrh	r3, [r3, #0]
    6af4:	480d      	ldr	r0, [pc, #52]	; (6b2c <udd_ctrl_in_sent+0xe0>)
    6af6:	2100      	movs	r1, #0
    6af8:	4c0e      	ldr	r4, [pc, #56]	; (6b34 <udd_ctrl_in_sent+0xe8>)
    6afa:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    6afc:	4b06      	ldr	r3, [pc, #24]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6afe:	881a      	ldrh	r2, [r3, #0]
    6b00:	1dbb      	adds	r3, r7, #6
    6b02:	881b      	ldrh	r3, [r3, #0]
    6b04:	18d3      	adds	r3, r2, r3
    6b06:	b29a      	uxth	r2, r3
    6b08:	4b03      	ldr	r3, [pc, #12]	; (6b18 <udd_ctrl_in_sent+0xcc>)
    6b0a:	801a      	strh	r2, [r3, #0]
}
    6b0c:	46bd      	mov	sp, r7
    6b0e:	b003      	add	sp, #12
    6b10:	bd90      	pop	{r4, r7, pc}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	200004e0 	.word	0x200004e0
    6b18:	20000158 	.word	0x20000158
    6b1c:	20000156 	.word	0x20000156
    6b20:	20000185 	.word	0x20000185
    6b24:	20000154 	.word	0x20000154
    6b28:	200004f8 	.word	0x200004f8
    6b2c:	20000378 	.word	0x20000378
    6b30:	000086bd 	.word	0x000086bd
    6b34:	00008559 	.word	0x00008559

00006b38 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    6b38:	b590      	push	{r4, r7, lr}
    6b3a:	b085      	sub	sp, #20
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    6b44:	230e      	movs	r3, #14
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	68ba      	ldr	r2, [r7, #8]
    6b4a:	8812      	ldrh	r2, [r2, #0]
    6b4c:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6b4e:	4b45      	ldr	r3, [pc, #276]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6b50:	899b      	ldrh	r3, [r3, #12]
    6b52:	001a      	movs	r2, r3
    6b54:	4b44      	ldr	r3, [pc, #272]	; (6c68 <udd_ctrl_out_received+0x130>)
    6b56:	881b      	ldrh	r3, [r3, #0]
    6b58:	0019      	movs	r1, r3
    6b5a:	230e      	movs	r3, #14
    6b5c:	18fb      	adds	r3, r7, r3
    6b5e:	881b      	ldrh	r3, [r3, #0]
    6b60:	18cb      	adds	r3, r1, r3
    6b62:	429a      	cmp	r2, r3
    6b64:	da07      	bge.n	6b76 <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    6b66:	4b3f      	ldr	r3, [pc, #252]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6b68:	8999      	ldrh	r1, [r3, #12]
    6b6a:	4b3f      	ldr	r3, [pc, #252]	; (6c68 <udd_ctrl_out_received+0x130>)
    6b6c:	881a      	ldrh	r2, [r3, #0]
    6b6e:	230e      	movs	r3, #14
    6b70:	18fb      	adds	r3, r7, r3
    6b72:	1a8a      	subs	r2, r1, r2
    6b74:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    6b76:	4b3b      	ldr	r3, [pc, #236]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6b78:	689b      	ldr	r3, [r3, #8]
    6b7a:	4a3b      	ldr	r2, [pc, #236]	; (6c68 <udd_ctrl_out_received+0x130>)
    6b7c:	8812      	ldrh	r2, [r2, #0]
    6b7e:	1898      	adds	r0, r3, r2
    6b80:	230e      	movs	r3, #14
    6b82:	18fb      	adds	r3, r7, r3
    6b84:	881a      	ldrh	r2, [r3, #0]
    6b86:	4b39      	ldr	r3, [pc, #228]	; (6c6c <udd_ctrl_out_received+0x134>)
    6b88:	0019      	movs	r1, r3
    6b8a:	4b39      	ldr	r3, [pc, #228]	; (6c70 <udd_ctrl_out_received+0x138>)
    6b8c:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    6b8e:	4b36      	ldr	r3, [pc, #216]	; (6c68 <udd_ctrl_out_received+0x130>)
    6b90:	881a      	ldrh	r2, [r3, #0]
    6b92:	230e      	movs	r3, #14
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	881b      	ldrh	r3, [r3, #0]
    6b98:	18d3      	adds	r3, r2, r3
    6b9a:	b29a      	uxth	r2, r3
    6b9c:	4b32      	ldr	r3, [pc, #200]	; (6c68 <udd_ctrl_out_received+0x130>)
    6b9e:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    6ba0:	230e      	movs	r3, #14
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	881b      	ldrh	r3, [r3, #0]
    6ba6:	2b08      	cmp	r3, #8
    6ba8:	d10a      	bne.n	6bc0 <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    6baa:	4b2e      	ldr	r3, [pc, #184]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6bac:	88db      	ldrh	r3, [r3, #6]
    6bae:	001a      	movs	r2, r3
    6bb0:	4b30      	ldr	r3, [pc, #192]	; (6c74 <udd_ctrl_out_received+0x13c>)
    6bb2:	881b      	ldrh	r3, [r3, #0]
    6bb4:	0019      	movs	r1, r3
    6bb6:	4b2c      	ldr	r3, [pc, #176]	; (6c68 <udd_ctrl_out_received+0x130>)
    6bb8:	881b      	ldrh	r3, [r3, #0]
    6bba:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    6bbc:	429a      	cmp	r2, r3
    6bbe:	dc1b      	bgt.n	6bf8 <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    6bc0:	4b29      	ldr	r3, [pc, #164]	; (6c68 <udd_ctrl_out_received+0x130>)
    6bc2:	881a      	ldrh	r2, [r3, #0]
    6bc4:	4b27      	ldr	r3, [pc, #156]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6bc6:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    6bc8:	4b26      	ldr	r3, [pc, #152]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6bca:	695b      	ldr	r3, [r3, #20]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d010      	beq.n	6bf2 <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    6bd0:	4b24      	ldr	r3, [pc, #144]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6bd2:	695b      	ldr	r3, [r3, #20]
    6bd4:	4798      	blx	r3
    6bd6:	0003      	movs	r3, r0
    6bd8:	001a      	movs	r2, r3
    6bda:	2301      	movs	r3, #1
    6bdc:	4053      	eors	r3, r2
    6bde:	b2db      	uxtb	r3, r3
    6be0:	2b00      	cmp	r3, #0
    6be2:	d006      	beq.n	6bf2 <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6be4:	4b24      	ldr	r3, [pc, #144]	; (6c78 <udd_ctrl_out_received+0x140>)
    6be6:	2205      	movs	r2, #5
    6be8:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    6bea:	2000      	movs	r0, #0
    6bec:	4b23      	ldr	r3, [pc, #140]	; (6c7c <udd_ctrl_out_received+0x144>)
    6bee:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    6bf0:	e035      	b.n	6c5e <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    6bf2:	4b23      	ldr	r3, [pc, #140]	; (6c80 <udd_ctrl_out_received+0x148>)
    6bf4:	4798      	blx	r3
		return;
    6bf6:	e032      	b.n	6c5e <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6bf8:	4b1a      	ldr	r3, [pc, #104]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6bfa:	899a      	ldrh	r2, [r3, #12]
    6bfc:	4b1a      	ldr	r3, [pc, #104]	; (6c68 <udd_ctrl_out_received+0x130>)
    6bfe:	881b      	ldrh	r3, [r3, #0]
    6c00:	429a      	cmp	r2, r3
    6c02:	d126      	bne.n	6c52 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    6c04:	4b17      	ldr	r3, [pc, #92]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6c06:	695b      	ldr	r3, [r3, #20]
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d106      	bne.n	6c1a <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6c0c:	4b1a      	ldr	r3, [pc, #104]	; (6c78 <udd_ctrl_out_received+0x140>)
    6c0e:	2205      	movs	r2, #5
    6c10:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6c12:	2000      	movs	r0, #0
    6c14:	4b19      	ldr	r3, [pc, #100]	; (6c7c <udd_ctrl_out_received+0x144>)
    6c16:	4798      	blx	r3
			return;
    6c18:	e021      	b.n	6c5e <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6c1a:	4b12      	ldr	r3, [pc, #72]	; (6c64 <udd_ctrl_out_received+0x12c>)
    6c1c:	695b      	ldr	r3, [r3, #20]
    6c1e:	4798      	blx	r3
    6c20:	0003      	movs	r3, r0
    6c22:	001a      	movs	r2, r3
    6c24:	2301      	movs	r3, #1
    6c26:	4053      	eors	r3, r2
    6c28:	b2db      	uxtb	r3, r3
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d006      	beq.n	6c3c <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6c2e:	4b12      	ldr	r3, [pc, #72]	; (6c78 <udd_ctrl_out_received+0x140>)
    6c30:	2205      	movs	r2, #5
    6c32:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6c34:	2000      	movs	r0, #0
    6c36:	4b11      	ldr	r3, [pc, #68]	; (6c7c <udd_ctrl_out_received+0x144>)
    6c38:	4798      	blx	r3
			return;
    6c3a:	e010      	b.n	6c5e <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6c3c:	4b0d      	ldr	r3, [pc, #52]	; (6c74 <udd_ctrl_out_received+0x13c>)
    6c3e:	881a      	ldrh	r2, [r3, #0]
    6c40:	4b09      	ldr	r3, [pc, #36]	; (6c68 <udd_ctrl_out_received+0x130>)
    6c42:	881b      	ldrh	r3, [r3, #0]
    6c44:	18d3      	adds	r3, r2, r3
    6c46:	b29a      	uxth	r2, r3
    6c48:	4b0a      	ldr	r3, [pc, #40]	; (6c74 <udd_ctrl_out_received+0x13c>)
    6c4a:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    6c4c:	4b06      	ldr	r3, [pc, #24]	; (6c68 <udd_ctrl_out_received+0x130>)
    6c4e:	2200      	movs	r2, #0
    6c50:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6c52:	4a06      	ldr	r2, [pc, #24]	; (6c6c <udd_ctrl_out_received+0x134>)
    6c54:	480b      	ldr	r0, [pc, #44]	; (6c84 <udd_ctrl_out_received+0x14c>)
    6c56:	2308      	movs	r3, #8
    6c58:	2100      	movs	r1, #0
    6c5a:	4c0b      	ldr	r4, [pc, #44]	; (6c88 <udd_ctrl_out_received+0x150>)
    6c5c:	47a0      	blx	r4
}
    6c5e:	46bd      	mov	sp, r7
    6c60:	b005      	add	sp, #20
    6c62:	bd90      	pop	{r4, r7, pc}
    6c64:	200004e0 	.word	0x200004e0
    6c68:	20000158 	.word	0x20000158
    6c6c:	200004f8 	.word	0x200004f8
    6c70:	00009dad 	.word	0x00009dad
    6c74:	20000156 	.word	0x20000156
    6c78:	20000154 	.word	0x20000154
    6c7c:	00006541 	.word	0x00006541
    6c80:	00006a09 	.word	0x00006a09
    6c84:	20000378 	.word	0x20000378
    6c88:	0000860d 	.word	0x0000860d

00006c8c <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    6c8c:	b590      	push	{r4, r7, lr}
    6c8e:	b085      	sub	sp, #20
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
    6c94:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6c96:	683b      	ldr	r3, [r7, #0]
    6c98:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    6c9a:	4b29      	ldr	r3, [pc, #164]	; (6d40 <_usb_ep0_on_setup+0xb4>)
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d009      	beq.n	6cb6 <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    6ca2:	4b28      	ldr	r3, [pc, #160]	; (6d44 <_usb_ep0_on_setup+0xb8>)
    6ca4:	691b      	ldr	r3, [r3, #16]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d002      	beq.n	6cb0 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    6caa:	4b26      	ldr	r3, [pc, #152]	; (6d44 <_usb_ep0_on_setup+0xb8>)
    6cac:	691b      	ldr	r3, [r3, #16]
    6cae:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    6cb0:	4b23      	ldr	r3, [pc, #140]	; (6d40 <_usb_ep0_on_setup+0xb4>)
    6cb2:	2200      	movs	r2, #0
    6cb4:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	881b      	ldrh	r3, [r3, #0]
    6cba:	2b08      	cmp	r3, #8
    6cbc:	d002      	beq.n	6cc4 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    6cbe:	4b22      	ldr	r3, [pc, #136]	; (6d48 <_usb_ep0_on_setup+0xbc>)
    6cc0:	4798      	blx	r3
		return;
    6cc2:	e03a      	b.n	6d3a <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    6cc4:	4b21      	ldr	r3, [pc, #132]	; (6d4c <_usb_ep0_on_setup+0xc0>)
    6cc6:	4798      	blx	r3
		if (false == udc_process_setup()) {
    6cc8:	4b21      	ldr	r3, [pc, #132]	; (6d50 <_usb_ep0_on_setup+0xc4>)
    6cca:	4798      	blx	r3
    6ccc:	0003      	movs	r3, r0
    6cce:	001a      	movs	r2, r3
    6cd0:	2301      	movs	r3, #1
    6cd2:	4053      	eors	r3, r2
    6cd4:	b2db      	uxtb	r3, r3
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	d002      	beq.n	6ce0 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    6cda:	4b1b      	ldr	r3, [pc, #108]	; (6d48 <_usb_ep0_on_setup+0xbc>)
    6cdc:	4798      	blx	r3
			return;
    6cde:	e02c      	b.n	6d3a <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    6ce0:	4b18      	ldr	r3, [pc, #96]	; (6d44 <_usb_ep0_on_setup+0xb8>)
    6ce2:	781b      	ldrb	r3, [r3, #0]
    6ce4:	b25b      	sxtb	r3, r3
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	da11      	bge.n	6d0e <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    6cea:	4b1a      	ldr	r3, [pc, #104]	; (6d54 <_usb_ep0_on_setup+0xc8>)
    6cec:	2200      	movs	r2, #0
    6cee:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    6cf0:	4b19      	ldr	r3, [pc, #100]	; (6d58 <_usb_ep0_on_setup+0xcc>)
    6cf2:	2200      	movs	r2, #0
    6cf4:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    6cf6:	4b12      	ldr	r3, [pc, #72]	; (6d40 <_usb_ep0_on_setup+0xb4>)
    6cf8:	2202      	movs	r2, #2
    6cfa:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6cfc:	4a17      	ldr	r2, [pc, #92]	; (6d5c <_usb_ep0_on_setup+0xd0>)
    6cfe:	4818      	ldr	r0, [pc, #96]	; (6d60 <_usb_ep0_on_setup+0xd4>)
    6d00:	2308      	movs	r3, #8
    6d02:	2100      	movs	r1, #0
    6d04:	4c17      	ldr	r4, [pc, #92]	; (6d64 <_usb_ep0_on_setup+0xd8>)
    6d06:	47a0      	blx	r4
			udd_ctrl_in_sent();
    6d08:	4b17      	ldr	r3, [pc, #92]	; (6d68 <_usb_ep0_on_setup+0xdc>)
    6d0a:	4798      	blx	r3
    6d0c:	e015      	b.n	6d3a <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    6d0e:	4b0d      	ldr	r3, [pc, #52]	; (6d44 <_usb_ep0_on_setup+0xb8>)
    6d10:	88db      	ldrh	r3, [r3, #6]
    6d12:	2b00      	cmp	r3, #0
    6d14:	d102      	bne.n	6d1c <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    6d16:	4b15      	ldr	r3, [pc, #84]	; (6d6c <_usb_ep0_on_setup+0xe0>)
    6d18:	4798      	blx	r3
				return;
    6d1a:	e00e      	b.n	6d3a <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    6d1c:	4b0d      	ldr	r3, [pc, #52]	; (6d54 <_usb_ep0_on_setup+0xc8>)
    6d1e:	2200      	movs	r2, #0
    6d20:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    6d22:	4b0d      	ldr	r3, [pc, #52]	; (6d58 <_usb_ep0_on_setup+0xcc>)
    6d24:	2200      	movs	r2, #0
    6d26:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    6d28:	4b05      	ldr	r3, [pc, #20]	; (6d40 <_usb_ep0_on_setup+0xb4>)
    6d2a:	2201      	movs	r2, #1
    6d2c:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6d2e:	4a0b      	ldr	r2, [pc, #44]	; (6d5c <_usb_ep0_on_setup+0xd0>)
    6d30:	480b      	ldr	r0, [pc, #44]	; (6d60 <_usb_ep0_on_setup+0xd4>)
    6d32:	2308      	movs	r3, #8
    6d34:	2100      	movs	r1, #0
    6d36:	4c0b      	ldr	r4, [pc, #44]	; (6d64 <_usb_ep0_on_setup+0xd8>)
    6d38:	47a0      	blx	r4
			}
		}
	}
}
    6d3a:	46bd      	mov	sp, r7
    6d3c:	b005      	add	sp, #20
    6d3e:	bd90      	pop	{r4, r7, pc}
    6d40:	20000154 	.word	0x20000154
    6d44:	200004e0 	.word	0x200004e0
    6d48:	00006611 	.word	0x00006611
    6d4c:	0000699d 	.word	0x0000699d
    6d50:	00004421 	.word	0x00004421
    6d54:	20000156 	.word	0x20000156
    6d58:	20000158 	.word	0x20000158
    6d5c:	200004f8 	.word	0x200004f8
    6d60:	20000378 	.word	0x20000378
    6d64:	0000860d 	.word	0x0000860d
    6d68:	00006a4d 	.word	0x00006a4d
    6d6c:	00006a09 	.word	0x00006a09

00006d70 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    6d70:	b580      	push	{r7, lr}
    6d72:	b084      	sub	sp, #16
    6d74:	af00      	add	r7, sp, #0
    6d76:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    6d7c:	4b0a      	ldr	r3, [pc, #40]	; (6da8 <udd_ctrl_underflow+0x38>)
    6d7e:	781b      	ldrb	r3, [r3, #0]
    6d80:	2b01      	cmp	r3, #1
    6d82:	d102      	bne.n	6d8a <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    6d84:	4b09      	ldr	r3, [pc, #36]	; (6dac <udd_ctrl_underflow+0x3c>)
    6d86:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    6d88:	e00a      	b.n	6da0 <udd_ctrl_underflow+0x30>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6d8a:	4b07      	ldr	r3, [pc, #28]	; (6da8 <udd_ctrl_underflow+0x38>)
    6d8c:	781b      	ldrb	r3, [r3, #0]
    6d8e:	2b04      	cmp	r3, #4
    6d90:	d106      	bne.n	6da0 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	799a      	ldrb	r2, [r3, #6]
    6d96:	4b06      	ldr	r3, [pc, #24]	; (6db0 <udd_ctrl_underflow+0x40>)
    6d98:	0011      	movs	r1, r2
    6d9a:	0018      	movs	r0, r3
    6d9c:	4b05      	ldr	r3, [pc, #20]	; (6db4 <udd_ctrl_underflow+0x44>)
    6d9e:	4798      	blx	r3
	}
}
    6da0:	46c0      	nop			; (mov r8, r8)
    6da2:	46bd      	mov	sp, r7
    6da4:	b004      	add	sp, #16
    6da6:	bd80      	pop	{r7, pc}
    6da8:	20000154 	.word	0x20000154
    6dac:	00006a09 	.word	0x00006a09
    6db0:	20000378 	.word	0x20000378
    6db4:	000083d1 	.word	0x000083d1

00006db8 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b084      	sub	sp, #16
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    6dc4:	4b0b      	ldr	r3, [pc, #44]	; (6df4 <udd_ctrl_overflow+0x3c>)
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	2b02      	cmp	r3, #2
    6dca:	d103      	bne.n	6dd4 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6dcc:	4b09      	ldr	r3, [pc, #36]	; (6df4 <udd_ctrl_overflow+0x3c>)
    6dce:	2204      	movs	r2, #4
    6dd0:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    6dd2:	e00a      	b.n	6dea <udd_ctrl_overflow+0x32>

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    6dd4:	4b07      	ldr	r3, [pc, #28]	; (6df4 <udd_ctrl_overflow+0x3c>)
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	2b03      	cmp	r3, #3
    6dda:	d106      	bne.n	6dea <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    6ddc:	68fb      	ldr	r3, [r7, #12]
    6dde:	799a      	ldrb	r2, [r3, #6]
    6de0:	4b05      	ldr	r3, [pc, #20]	; (6df8 <udd_ctrl_overflow+0x40>)
    6de2:	0011      	movs	r1, r2
    6de4:	0018      	movs	r0, r3
    6de6:	4b05      	ldr	r3, [pc, #20]	; (6dfc <udd_ctrl_overflow+0x44>)
    6de8:	4798      	blx	r3
	}
}
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	46bd      	mov	sp, r7
    6dee:	b004      	add	sp, #16
    6df0:	bd80      	pop	{r7, pc}
    6df2:	46c0      	nop			; (mov r8, r8)
    6df4:	20000154 	.word	0x20000154
    6df8:	20000378 	.word	0x20000378
    6dfc:	000083d1 	.word	0x000083d1

00006e00 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b084      	sub	sp, #16
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
    6e08:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6e0a:	683b      	ldr	r3, [r7, #0]
    6e0c:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    6e0e:	68fb      	ldr	r3, [r7, #12]
    6e10:	799b      	ldrb	r3, [r3, #6]
    6e12:	b25b      	sxtb	r3, r3
    6e14:	2b00      	cmp	r3, #0
    6e16:	da04      	bge.n	6e22 <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    6e18:	683b      	ldr	r3, [r7, #0]
    6e1a:	0018      	movs	r0, r3
    6e1c:	4b05      	ldr	r3, [pc, #20]	; (6e34 <_usb_ep0_on_tansfer_fail+0x34>)
    6e1e:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    6e20:	e003      	b.n	6e2a <_usb_ep0_on_tansfer_fail+0x2a>
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
    6e22:	683b      	ldr	r3, [r7, #0]
    6e24:	0018      	movs	r0, r3
    6e26:	4b04      	ldr	r3, [pc, #16]	; (6e38 <_usb_ep0_on_tansfer_fail+0x38>)
    6e28:	4798      	blx	r3
	}
}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	46bd      	mov	sp, r7
    6e2e:	b004      	add	sp, #16
    6e30:	bd80      	pop	{r7, pc}
    6e32:	46c0      	nop			; (mov r8, r8)
    6e34:	00006d71 	.word	0x00006d71
    6e38:	00006db9 	.word	0x00006db9

00006e3c <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    6e3c:	b580      	push	{r7, lr}
    6e3e:	b082      	sub	sp, #8
    6e40:	af00      	add	r7, sp, #0
    6e42:	6078      	str	r0, [r7, #4]
    6e44:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    6e46:	4b0f      	ldr	r3, [pc, #60]	; (6e84 <_usb_ep0_on_tansfer_ok+0x48>)
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	2b01      	cmp	r3, #1
    6e4c:	d104      	bne.n	6e58 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    6e4e:	683b      	ldr	r3, [r7, #0]
    6e50:	0018      	movs	r0, r3
    6e52:	4b0d      	ldr	r3, [pc, #52]	; (6e88 <_usb_ep0_on_tansfer_ok+0x4c>)
    6e54:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    6e56:	e010      	b.n	6e7a <_usb_ep0_on_tansfer_ok+0x3e>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    6e58:	4b0a      	ldr	r3, [pc, #40]	; (6e84 <_usb_ep0_on_tansfer_ok+0x48>)
    6e5a:	781b      	ldrb	r3, [r3, #0]
    6e5c:	2b02      	cmp	r3, #2
    6e5e:	d102      	bne.n	6e66 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    6e60:	4b0a      	ldr	r3, [pc, #40]	; (6e8c <_usb_ep0_on_tansfer_ok+0x50>)
    6e62:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    6e64:	e009      	b.n	6e7a <_usb_ep0_on_tansfer_ok+0x3e>
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
			udd_ctrl_in_sent();
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    6e66:	4b0a      	ldr	r3, [pc, #40]	; (6e90 <_usb_ep0_on_tansfer_ok+0x54>)
    6e68:	691b      	ldr	r3, [r3, #16]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d002      	beq.n	6e74 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    6e6e:	4b08      	ldr	r3, [pc, #32]	; (6e90 <_usb_ep0_on_tansfer_ok+0x54>)
    6e70:	691b      	ldr	r3, [r3, #16]
    6e72:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    6e74:	4b03      	ldr	r3, [pc, #12]	; (6e84 <_usb_ep0_on_tansfer_ok+0x48>)
    6e76:	2200      	movs	r2, #0
    6e78:	701a      	strb	r2, [r3, #0]
		}
}
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	46bd      	mov	sp, r7
    6e7e:	b002      	add	sp, #8
    6e80:	bd80      	pop	{r7, pc}
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	20000154 	.word	0x20000154
    6e88:	00006b39 	.word	0x00006b39
    6e8c:	00006a4d 	.word	0x00006a4d
    6e90:	200004e0 	.word	0x200004e0

00006e94 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    6e94:	b590      	push	{r4, r7, lr}
    6e96:	b085      	sub	sp, #20
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    6e9c:	230c      	movs	r3, #12
    6e9e:	18fb      	adds	r3, r7, r3
    6ea0:	0018      	movs	r0, r3
    6ea2:	4b21      	ldr	r3, [pc, #132]	; (6f28 <udd_ctrl_ep_enable+0x94>)
    6ea4:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    6ea6:	230c      	movs	r3, #12
    6ea8:	18fb      	adds	r3, r7, r3
    6eaa:	2200      	movs	r2, #0
    6eac:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    6eae:	230c      	movs	r3, #12
    6eb0:	18fa      	adds	r2, r7, r3
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	0011      	movs	r1, r2
    6eb6:	0018      	movs	r0, r3
    6eb8:	4b1c      	ldr	r3, [pc, #112]	; (6f2c <udd_ctrl_ep_enable+0x98>)
    6eba:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    6ebc:	4a1c      	ldr	r2, [pc, #112]	; (6f30 <udd_ctrl_ep_enable+0x9c>)
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	0011      	movs	r1, r2
    6ec2:	0018      	movs	r0, r3
    6ec4:	4b1b      	ldr	r3, [pc, #108]	; (6f34 <udd_ctrl_ep_enable+0xa0>)
    6ec6:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    6ec8:	4b1b      	ldr	r3, [pc, #108]	; (6f38 <udd_ctrl_ep_enable+0xa4>)
    6eca:	6878      	ldr	r0, [r7, #4]
    6ecc:	2202      	movs	r2, #2
    6ece:	2100      	movs	r1, #0
    6ed0:	4c1a      	ldr	r4, [pc, #104]	; (6f3c <udd_ctrl_ep_enable+0xa8>)
    6ed2:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    6ed4:	4b1a      	ldr	r3, [pc, #104]	; (6f40 <udd_ctrl_ep_enable+0xac>)
    6ed6:	6878      	ldr	r0, [r7, #4]
    6ed8:	2200      	movs	r2, #0
    6eda:	2100      	movs	r1, #0
    6edc:	4c17      	ldr	r4, [pc, #92]	; (6f3c <udd_ctrl_ep_enable+0xa8>)
    6ede:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    6ee0:	4b18      	ldr	r3, [pc, #96]	; (6f44 <udd_ctrl_ep_enable+0xb0>)
    6ee2:	6878      	ldr	r0, [r7, #4]
    6ee4:	2201      	movs	r2, #1
    6ee6:	2100      	movs	r1, #0
    6ee8:	4c14      	ldr	r4, [pc, #80]	; (6f3c <udd_ctrl_ep_enable+0xa8>)
    6eea:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	2202      	movs	r2, #2
    6ef0:	2100      	movs	r1, #0
    6ef2:	0018      	movs	r0, r3
    6ef4:	4b14      	ldr	r3, [pc, #80]	; (6f48 <udd_ctrl_ep_enable+0xb4>)
    6ef6:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    6ef8:	687b      	ldr	r3, [r7, #4]
    6efa:	2200      	movs	r2, #0
    6efc:	2100      	movs	r1, #0
    6efe:	0018      	movs	r0, r3
    6f00:	4b11      	ldr	r3, [pc, #68]	; (6f48 <udd_ctrl_ep_enable+0xb4>)
    6f02:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	2201      	movs	r2, #1
    6f08:	2100      	movs	r1, #0
    6f0a:	0018      	movs	r0, r3
    6f0c:	4b0e      	ldr	r3, [pc, #56]	; (6f48 <udd_ctrl_ep_enable+0xb4>)
    6f0e:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	2101      	movs	r1, #1
    6f14:	0018      	movs	r0, r3
    6f16:	4b0d      	ldr	r3, [pc, #52]	; (6f4c <udd_ctrl_ep_enable+0xb8>)
    6f18:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    6f1a:	4b0d      	ldr	r3, [pc, #52]	; (6f50 <udd_ctrl_ep_enable+0xbc>)
    6f1c:	2200      	movs	r2, #0
    6f1e:	701a      	strb	r2, [r3, #0]
}
    6f20:	46c0      	nop			; (mov r8, r8)
    6f22:	46bd      	mov	sp, r7
    6f24:	b005      	add	sp, #20
    6f26:	bd90      	pop	{r4, r7, pc}
    6f28:	00007db5 	.word	0x00007db5
    6f2c:	00007ddd 	.word	0x00007ddd
    6f30:	200004f8 	.word	0x200004f8
    6f34:	000086bd 	.word	0x000086bd
    6f38:	00006c8d 	.word	0x00006c8d
    6f3c:	0000797d 	.word	0x0000797d
    6f40:	00006e3d 	.word	0x00006e3d
    6f44:	00006e01 	.word	0x00006e01
    6f48:	00007a75 	.word	0x00007a75
    6f4c:	00005c69 	.word	0x00005c69
    6f50:	20000154 	.word	0x20000154

00006f54 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    6f54:	b580      	push	{r7, lr}
    6f56:	b082      	sub	sp, #8
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
    6f5c:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    6f5e:	4b09      	ldr	r3, [pc, #36]	; (6f84 <_usb_on_suspend+0x30>)
    6f60:	2104      	movs	r1, #4
    6f62:	0018      	movs	r0, r3
    6f64:	4b08      	ldr	r3, [pc, #32]	; (6f88 <_usb_on_suspend+0x34>)
    6f66:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6f68:	4b06      	ldr	r3, [pc, #24]	; (6f84 <_usb_on_suspend+0x30>)
    6f6a:	2102      	movs	r1, #2
    6f6c:	0018      	movs	r0, r3
    6f6e:	4b07      	ldr	r3, [pc, #28]	; (6f8c <_usb_on_suspend+0x38>)
    6f70:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    6f72:	2001      	movs	r0, #1
    6f74:	4b06      	ldr	r3, [pc, #24]	; (6f90 <_usb_on_suspend+0x3c>)
    6f76:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    6f78:	4b06      	ldr	r3, [pc, #24]	; (6f94 <_usb_on_suspend+0x40>)
    6f7a:	4798      	blx	r3
#endif
}
    6f7c:	46c0      	nop			; (mov r8, r8)
    6f7e:	46bd      	mov	sp, r7
    6f80:	b002      	add	sp, #8
    6f82:	bd80      	pop	{r7, pc}
    6f84:	20000378 	.word	0x20000378
    6f88:	00007929 	.word	0x00007929
    6f8c:	000078cd 	.word	0x000078cd
    6f90:	00005de9 	.word	0x00005de9
    6f94:	000098f1 	.word	0x000098f1

00006f98 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b084      	sub	sp, #16
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    6fa2:	683b      	ldr	r3, [r7, #0]
    6fa4:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    6fa6:	4b12      	ldr	r3, [pc, #72]	; (6ff0 <_usb_device_lpm_suspend+0x58>)
    6fa8:	2106      	movs	r1, #6
    6faa:	0018      	movs	r0, r3
    6fac:	4b11      	ldr	r3, [pc, #68]	; (6ff4 <_usb_device_lpm_suspend+0x5c>)
    6fae:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    6fb0:	4b0f      	ldr	r3, [pc, #60]	; (6ff0 <_usb_device_lpm_suspend+0x58>)
    6fb2:	2104      	movs	r1, #4
    6fb4:	0018      	movs	r0, r3
    6fb6:	4b0f      	ldr	r3, [pc, #60]	; (6ff4 <_usb_device_lpm_suspend+0x5c>)
    6fb8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6fba:	4b0d      	ldr	r3, [pc, #52]	; (6ff0 <_usb_device_lpm_suspend+0x58>)
    6fbc:	2102      	movs	r1, #2
    6fbe:	0018      	movs	r0, r3
    6fc0:	4b0d      	ldr	r3, [pc, #52]	; (6ff8 <_usb_device_lpm_suspend+0x60>)
    6fc2:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    6fc4:	2002      	movs	r0, #2
    6fc6:	4b0d      	ldr	r3, [pc, #52]	; (6ffc <_usb_device_lpm_suspend+0x64>)
    6fc8:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    6fca:	68fb      	ldr	r3, [r7, #12]
    6fcc:	681b      	ldr	r3, [r3, #0]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d001      	beq.n	6fd6 <_usb_device_lpm_suspend+0x3e>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    6fd2:	4b0b      	ldr	r3, [pc, #44]	; (7000 <_usb_device_lpm_suspend+0x68>)
    6fd4:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    6fd6:	68fb      	ldr	r3, [r7, #12]
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d101      	bne.n	6fe2 <_usb_device_lpm_suspend+0x4a>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    6fde:	4b09      	ldr	r3, [pc, #36]	; (7004 <_usb_device_lpm_suspend+0x6c>)
    6fe0:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    6fe2:	4b09      	ldr	r3, [pc, #36]	; (7008 <_usb_device_lpm_suspend+0x70>)
    6fe4:	4798      	blx	r3
}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	46bd      	mov	sp, r7
    6fea:	b004      	add	sp, #16
    6fec:	bd80      	pop	{r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	20000378 	.word	0x20000378
    6ff4:	00007929 	.word	0x00007929
    6ff8:	000078cd 	.word	0x000078cd
    6ffc:	00005de9 	.word	0x00005de9
    7000:	0000999d 	.word	0x0000999d
    7004:	00009989 	.word	0x00009989
    7008:	00009975 	.word	0x00009975

0000700c <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    700c:	b580      	push	{r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
    7014:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    7016:	4b04      	ldr	r3, [pc, #16]	; (7028 <_usb_on_sof_notify+0x1c>)
    7018:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    701a:	4b04      	ldr	r3, [pc, #16]	; (702c <_usb_on_sof_notify+0x20>)
    701c:	4798      	blx	r3
#endif
}
    701e:	46c0      	nop			; (mov r8, r8)
    7020:	46bd      	mov	sp, r7
    7022:	b002      	add	sp, #8
    7024:	bd80      	pop	{r7, pc}
    7026:	46c0      	nop			; (mov r8, r8)
    7028:	00003b55 	.word	0x00003b55
    702c:	00009919 	.word	0x00009919

00007030 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    7030:	b580      	push	{r7, lr}
    7032:	b082      	sub	sp, #8
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
    7038:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    703a:	4b07      	ldr	r3, [pc, #28]	; (7058 <_usb_on_bus_reset+0x28>)
    703c:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    703e:	687b      	ldr	r3, [r7, #4]
    7040:	2100      	movs	r1, #0
    7042:	0018      	movs	r0, r3
    7044:	4b05      	ldr	r3, [pc, #20]	; (705c <_usb_on_bus_reset+0x2c>)
    7046:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	0018      	movs	r0, r3
    704c:	4b04      	ldr	r3, [pc, #16]	; (7060 <_usb_on_bus_reset+0x30>)
    704e:	4798      	blx	r3
}
    7050:	46c0      	nop			; (mov r8, r8)
    7052:	46bd      	mov	sp, r7
    7054:	b002      	add	sp, #8
    7056:	bd80      	pop	{r7, pc}
    7058:	00003ae1 	.word	0x00003ae1
    705c:	00005c25 	.word	0x00005c25
    7060:	00006e95 	.word	0x00006e95

00007064 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    7064:	b580      	push	{r7, lr}
    7066:	b082      	sub	sp, #8
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
    706c:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    706e:	4b10      	ldr	r3, [pc, #64]	; (70b0 <_usb_on_wakeup+0x4c>)
    7070:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7072:	4b10      	ldr	r3, [pc, #64]	; (70b4 <_usb_on_wakeup+0x50>)
    7074:	2102      	movs	r1, #2
    7076:	0018      	movs	r0, r3
    7078:	4b0f      	ldr	r3, [pc, #60]	; (70b8 <_usb_on_wakeup+0x54>)
    707a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    707c:	4b0d      	ldr	r3, [pc, #52]	; (70b4 <_usb_on_wakeup+0x50>)
    707e:	2104      	movs	r1, #4
    7080:	0018      	movs	r0, r3
    7082:	4b0e      	ldr	r3, [pc, #56]	; (70bc <_usb_on_wakeup+0x58>)
    7084:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    7086:	4a0e      	ldr	r2, [pc, #56]	; (70c0 <_usb_on_wakeup+0x5c>)
    7088:	4b0a      	ldr	r3, [pc, #40]	; (70b4 <_usb_on_wakeup+0x50>)
    708a:	2106      	movs	r1, #6
    708c:	0018      	movs	r0, r3
    708e:	4b0d      	ldr	r3, [pc, #52]	; (70c4 <_usb_on_wakeup+0x60>)
    7090:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7092:	4b08      	ldr	r3, [pc, #32]	; (70b4 <_usb_on_wakeup+0x50>)
    7094:	2106      	movs	r1, #6
    7096:	0018      	movs	r0, r3
    7098:	4b08      	ldr	r3, [pc, #32]	; (70bc <_usb_on_wakeup+0x58>)
    709a:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    709c:	2003      	movs	r0, #3
    709e:	4b0a      	ldr	r3, [pc, #40]	; (70c8 <_usb_on_wakeup+0x64>)
    70a0:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    70a2:	4b0a      	ldr	r3, [pc, #40]	; (70cc <_usb_on_wakeup+0x68>)
    70a4:	4798      	blx	r3
#endif
}
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	46bd      	mov	sp, r7
    70aa:	b002      	add	sp, #8
    70ac:	bd80      	pop	{r7, pc}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	00005db1 	.word	0x00005db1
    70b4:	20000378 	.word	0x20000378
    70b8:	00007929 	.word	0x00007929
    70bc:	000078cd 	.word	0x000078cd
    70c0:	00006f99 	.word	0x00006f99
    70c4:	0000787d 	.word	0x0000787d
    70c8:	00005de9 	.word	0x00005de9
    70cc:	00009905 	.word	0x00009905

000070d0 <udd_detach>:

void udd_detach(void)
{
    70d0:	b580      	push	{r7, lr}
    70d2:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    70d4:	4b04      	ldr	r3, [pc, #16]	; (70e8 <udd_detach+0x18>)
    70d6:	0018      	movs	r0, r3
    70d8:	4b04      	ldr	r3, [pc, #16]	; (70ec <udd_detach+0x1c>)
    70da:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    70dc:	2001      	movs	r0, #1
    70de:	4b04      	ldr	r3, [pc, #16]	; (70f0 <udd_detach+0x20>)
    70e0:	4798      	blx	r3
}
    70e2:	46c0      	nop			; (mov r8, r8)
    70e4:	46bd      	mov	sp, r7
    70e6:	bd80      	pop	{r7, pc}
    70e8:	20000378 	.word	0x20000378
    70ec:	00005be5 	.word	0x00005be5
    70f0:	00005de9 	.word	0x00005de9

000070f4 <udd_attach>:

void udd_attach(void)
{
    70f4:	b580      	push	{r7, lr}
    70f6:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    70f8:	2003      	movs	r0, #3
    70fa:	4b20      	ldr	r3, [pc, #128]	; (717c <udd_attach+0x88>)
    70fc:	4798      	blx	r3
	usb_device_attach(&usb_device);
    70fe:	4b20      	ldr	r3, [pc, #128]	; (7180 <udd_attach+0x8c>)
    7100:	0018      	movs	r0, r3
    7102:	4b20      	ldr	r3, [pc, #128]	; (7184 <udd_attach+0x90>)
    7104:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    7106:	4a20      	ldr	r2, [pc, #128]	; (7188 <udd_attach+0x94>)
    7108:	4b1d      	ldr	r3, [pc, #116]	; (7180 <udd_attach+0x8c>)
    710a:	2104      	movs	r1, #4
    710c:	0018      	movs	r0, r3
    710e:	4b1f      	ldr	r3, [pc, #124]	; (718c <udd_attach+0x98>)
    7110:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    7112:	4a1f      	ldr	r2, [pc, #124]	; (7190 <udd_attach+0x9c>)
    7114:	4b1a      	ldr	r3, [pc, #104]	; (7180 <udd_attach+0x8c>)
    7116:	2100      	movs	r1, #0
    7118:	0018      	movs	r0, r3
    711a:	4b1c      	ldr	r3, [pc, #112]	; (718c <udd_attach+0x98>)
    711c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    711e:	4a1d      	ldr	r2, [pc, #116]	; (7194 <udd_attach+0xa0>)
    7120:	4b17      	ldr	r3, [pc, #92]	; (7180 <udd_attach+0x8c>)
    7122:	2101      	movs	r1, #1
    7124:	0018      	movs	r0, r3
    7126:	4b19      	ldr	r3, [pc, #100]	; (718c <udd_attach+0x98>)
    7128:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    712a:	4a1b      	ldr	r2, [pc, #108]	; (7198 <udd_attach+0xa4>)
    712c:	4b14      	ldr	r3, [pc, #80]	; (7180 <udd_attach+0x8c>)
    712e:	2102      	movs	r1, #2
    7130:	0018      	movs	r0, r3
    7132:	4b16      	ldr	r3, [pc, #88]	; (718c <udd_attach+0x98>)
    7134:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7136:	4b12      	ldr	r3, [pc, #72]	; (7180 <udd_attach+0x8c>)
    7138:	2104      	movs	r1, #4
    713a:	0018      	movs	r0, r3
    713c:	4b17      	ldr	r3, [pc, #92]	; (719c <udd_attach+0xa8>)
    713e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    7140:	4b0f      	ldr	r3, [pc, #60]	; (7180 <udd_attach+0x8c>)
    7142:	2100      	movs	r1, #0
    7144:	0018      	movs	r0, r3
    7146:	4b15      	ldr	r3, [pc, #84]	; (719c <udd_attach+0xa8>)
    7148:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    714a:	4b0d      	ldr	r3, [pc, #52]	; (7180 <udd_attach+0x8c>)
    714c:	2101      	movs	r1, #1
    714e:	0018      	movs	r0, r3
    7150:	4b12      	ldr	r3, [pc, #72]	; (719c <udd_attach+0xa8>)
    7152:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7154:	4b0a      	ldr	r3, [pc, #40]	; (7180 <udd_attach+0x8c>)
    7156:	2102      	movs	r1, #2
    7158:	0018      	movs	r0, r3
    715a:	4b10      	ldr	r3, [pc, #64]	; (719c <udd_attach+0xa8>)
    715c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    715e:	4a10      	ldr	r2, [pc, #64]	; (71a0 <udd_attach+0xac>)
    7160:	4b07      	ldr	r3, [pc, #28]	; (7180 <udd_attach+0x8c>)
    7162:	2106      	movs	r1, #6
    7164:	0018      	movs	r0, r3
    7166:	4b09      	ldr	r3, [pc, #36]	; (718c <udd_attach+0x98>)
    7168:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    716a:	4b05      	ldr	r3, [pc, #20]	; (7180 <udd_attach+0x8c>)
    716c:	2106      	movs	r1, #6
    716e:	0018      	movs	r0, r3
    7170:	4b0a      	ldr	r3, [pc, #40]	; (719c <udd_attach+0xa8>)
    7172:	4798      	blx	r3
#endif
}
    7174:	46c0      	nop			; (mov r8, r8)
    7176:	46bd      	mov	sp, r7
    7178:	bd80      	pop	{r7, pc}
    717a:	46c0      	nop			; (mov r8, r8)
    717c:	00005de9 	.word	0x00005de9
    7180:	20000378 	.word	0x20000378
    7184:	00005bc1 	.word	0x00005bc1
    7188:	00006f55 	.word	0x00006f55
    718c:	0000787d 	.word	0x0000787d
    7190:	0000700d 	.word	0x0000700d
    7194:	00007031 	.word	0x00007031
    7198:	00007065 	.word	0x00007065
    719c:	000078cd 	.word	0x000078cd
    71a0:	00006f99 	.word	0x00006f99

000071a4 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    71a4:	b580      	push	{r7, lr}
    71a6:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    71a8:	2100      	movs	r1, #0
    71aa:	200e      	movs	r0, #14
    71ac:	4b09      	ldr	r3, [pc, #36]	; (71d4 <_uhd_vbus_handler+0x30>)
    71ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    71b0:	200e      	movs	r0, #14
    71b2:	4b09      	ldr	r3, [pc, #36]	; (71d8 <_uhd_vbus_handler+0x34>)
    71b4:	4798      	blx	r3
    71b6:	1e03      	subs	r3, r0, #0
    71b8:	d002      	beq.n	71c0 <_uhd_vbus_handler+0x1c>
		udd_attach();
    71ba:	4b08      	ldr	r3, [pc, #32]	; (71dc <_uhd_vbus_handler+0x38>)
    71bc:	4798      	blx	r3
    71be:	e001      	b.n	71c4 <_uhd_vbus_handler+0x20>
	} else {
		udd_detach();
    71c0:	4b07      	ldr	r3, [pc, #28]	; (71e0 <_uhd_vbus_handler+0x3c>)
    71c2:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    71c4:	2100      	movs	r1, #0
    71c6:	200e      	movs	r0, #14
    71c8:	4b06      	ldr	r3, [pc, #24]	; (71e4 <_uhd_vbus_handler+0x40>)
    71ca:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    71cc:	46c0      	nop			; (mov r8, r8)
    71ce:	46bd      	mov	sp, r7
    71d0:	bd80      	pop	{r7, pc}
    71d2:	46c0      	nop			; (mov r8, r8)
    71d4:	00004809 	.word	0x00004809
    71d8:	00005ccd 	.word	0x00005ccd
    71dc:	000070f5 	.word	0x000070f5
    71e0:	000070d1 	.word	0x000070d1
    71e4:	000047c1 	.word	0x000047c1

000071e8 <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    71e8:	b580      	push	{r7, lr}
    71ea:	b084      	sub	sp, #16
    71ec:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    71ee:	1d3b      	adds	r3, r7, #4
    71f0:	0018      	movs	r0, r3
    71f2:	4b14      	ldr	r3, [pc, #80]	; (7244 <_usb_vbus_config+0x5c>)
    71f4:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    71f6:	1d3b      	adds	r3, r7, #4
    71f8:	220e      	movs	r2, #14
    71fa:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    71fc:	1d3b      	adds	r3, r7, #4
    71fe:	2200      	movs	r2, #0
    7200:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    7202:	1d3b      	adds	r3, r7, #4
    7204:	2200      	movs	r2, #0
    7206:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    7208:	1d3b      	adds	r3, r7, #4
    720a:	2203      	movs	r2, #3
    720c:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    720e:	1d3b      	adds	r3, r7, #4
    7210:	2201      	movs	r2, #1
    7212:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    7214:	2100      	movs	r1, #0
    7216:	200e      	movs	r0, #14
    7218:	4b0b      	ldr	r3, [pc, #44]	; (7248 <_usb_vbus_config+0x60>)
    721a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    721c:	1d3b      	adds	r3, r7, #4
    721e:	0019      	movs	r1, r3
    7220:	200e      	movs	r0, #14
    7222:	4b0a      	ldr	r3, [pc, #40]	; (724c <_usb_vbus_config+0x64>)
    7224:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    7226:	4b0a      	ldr	r3, [pc, #40]	; (7250 <_usb_vbus_config+0x68>)
    7228:	2200      	movs	r2, #0
    722a:	210e      	movs	r1, #14
    722c:	0018      	movs	r0, r3
    722e:	4b09      	ldr	r3, [pc, #36]	; (7254 <_usb_vbus_config+0x6c>)
    7230:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    7232:	2100      	movs	r1, #0
    7234:	200e      	movs	r0, #14
    7236:	4b08      	ldr	r3, [pc, #32]	; (7258 <_usb_vbus_config+0x70>)
    7238:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    723a:	46c0      	nop			; (mov r8, r8)
    723c:	46bd      	mov	sp, r7
    723e:	b004      	add	sp, #16
    7240:	bd80      	pop	{r7, pc}
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	00004b5d 	.word	0x00004b5d
    7248:	00004809 	.word	0x00004809
    724c:	00004b91 	.word	0x00004b91
    7250:	000071a5 	.word	0x000071a5
    7254:	0000475d 	.word	0x0000475d
    7258:	000047c1 	.word	0x000047c1

0000725c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    725c:	b580      	push	{r7, lr}
    725e:	b082      	sub	sp, #8
    7260:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    7262:	4b15      	ldr	r3, [pc, #84]	; (72b8 <udd_enable+0x5c>)
    7264:	4798      	blx	r3
    7266:	0003      	movs	r3, r0
    7268:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    726a:	003b      	movs	r3, r7
    726c:	0018      	movs	r0, r3
    726e:	4b13      	ldr	r3, [pc, #76]	; (72bc <udd_enable+0x60>)
    7270:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    7272:	003b      	movs	r3, r7
    7274:	2200      	movs	r2, #0
    7276:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    7278:	003a      	movs	r2, r7
    727a:	4911      	ldr	r1, [pc, #68]	; (72c0 <udd_enable+0x64>)
    727c:	4b11      	ldr	r3, [pc, #68]	; (72c4 <udd_enable+0x68>)
    727e:	0018      	movs	r0, r3
    7280:	4b11      	ldr	r3, [pc, #68]	; (72c8 <udd_enable+0x6c>)
    7282:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    7284:	4b0f      	ldr	r3, [pc, #60]	; (72c4 <udd_enable+0x68>)
    7286:	0018      	movs	r0, r3
    7288:	4b10      	ldr	r3, [pc, #64]	; (72cc <udd_enable+0x70>)
    728a:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    728c:	4b10      	ldr	r3, [pc, #64]	; (72d0 <udd_enable+0x74>)
    728e:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    7290:	2001      	movs	r0, #1
    7292:	4b10      	ldr	r3, [pc, #64]	; (72d4 <udd_enable+0x78>)
    7294:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    7296:	4b10      	ldr	r3, [pc, #64]	; (72d8 <udd_enable+0x7c>)
    7298:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    729a:	200e      	movs	r0, #14
    729c:	4b0f      	ldr	r3, [pc, #60]	; (72dc <udd_enable+0x80>)
    729e:	4798      	blx	r3
    72a0:	1e03      	subs	r3, r0, #0
    72a2:	d001      	beq.n	72a8 <udd_enable+0x4c>
		/* USB Attach */
		_uhd_vbus_handler();
    72a4:	4b0e      	ldr	r3, [pc, #56]	; (72e0 <udd_enable+0x84>)
    72a6:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	0018      	movs	r0, r3
    72ac:	4b0d      	ldr	r3, [pc, #52]	; (72e4 <udd_enable+0x88>)
    72ae:	4798      	blx	r3
}
    72b0:	46c0      	nop			; (mov r8, r8)
    72b2:	46bd      	mov	sp, r7
    72b4:	b002      	add	sp, #8
    72b6:	bd80      	pop	{r7, pc}
    72b8:	00005ae9 	.word	0x00005ae9
    72bc:	00008ced 	.word	0x00008ced
    72c0:	41005000 	.word	0x41005000
    72c4:	20000378 	.word	0x20000378
    72c8:	00008d15 	.word	0x00008d15
    72cc:	00008c85 	.word	0x00008c85
    72d0:	00005db1 	.word	0x00005db1
    72d4:	00005de9 	.word	0x00005de9
    72d8:	000071e9 	.word	0x000071e9
    72dc:	00005ccd 	.word	0x00005ccd
    72e0:	000071a5 	.word	0x000071a5
    72e4:	00005b31 	.word	0x00005b31

000072e8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    72e8:	b580      	push	{r7, lr}
    72ea:	b082      	sub	sp, #8
    72ec:	af00      	add	r7, sp, #0
    72ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	2200      	movs	r2, #0
    72f4:	701a      	strb	r2, [r3, #0]
}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	46bd      	mov	sp, r7
    72fa:	b002      	add	sp, #8
    72fc:	bd80      	pop	{r7, pc}
    72fe:	46c0      	nop			; (mov r8, r8)

00007300 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    7300:	b580      	push	{r7, lr}
    7302:	b082      	sub	sp, #8
    7304:	af00      	add	r7, sp, #0
    7306:	0002      	movs	r2, r0
    7308:	6039      	str	r1, [r7, #0]
    730a:	1dfb      	adds	r3, r7, #7
    730c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    730e:	1dfb      	adds	r3, r7, #7
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	2b01      	cmp	r3, #1
    7314:	d00a      	beq.n	732c <system_apb_clock_set_mask+0x2c>
    7316:	2b02      	cmp	r3, #2
    7318:	d00f      	beq.n	733a <system_apb_clock_set_mask+0x3a>
    731a:	2b00      	cmp	r3, #0
    731c:	d114      	bne.n	7348 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    731e:	4b0e      	ldr	r3, [pc, #56]	; (7358 <system_apb_clock_set_mask+0x58>)
    7320:	4a0d      	ldr	r2, [pc, #52]	; (7358 <system_apb_clock_set_mask+0x58>)
    7322:	6991      	ldr	r1, [r2, #24]
    7324:	683a      	ldr	r2, [r7, #0]
    7326:	430a      	orrs	r2, r1
    7328:	619a      	str	r2, [r3, #24]
			break;
    732a:	e00f      	b.n	734c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    732c:	4b0a      	ldr	r3, [pc, #40]	; (7358 <system_apb_clock_set_mask+0x58>)
    732e:	4a0a      	ldr	r2, [pc, #40]	; (7358 <system_apb_clock_set_mask+0x58>)
    7330:	69d1      	ldr	r1, [r2, #28]
    7332:	683a      	ldr	r2, [r7, #0]
    7334:	430a      	orrs	r2, r1
    7336:	61da      	str	r2, [r3, #28]
			break;
    7338:	e008      	b.n	734c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    733a:	4b07      	ldr	r3, [pc, #28]	; (7358 <system_apb_clock_set_mask+0x58>)
    733c:	4a06      	ldr	r2, [pc, #24]	; (7358 <system_apb_clock_set_mask+0x58>)
    733e:	6a11      	ldr	r1, [r2, #32]
    7340:	683a      	ldr	r2, [r7, #0]
    7342:	430a      	orrs	r2, r1
    7344:	621a      	str	r2, [r3, #32]
			break;
    7346:	e001      	b.n	734c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7348:	2317      	movs	r3, #23
    734a:	e000      	b.n	734e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    734c:	2300      	movs	r3, #0
}
    734e:	0018      	movs	r0, r3
    7350:	46bd      	mov	sp, r7
    7352:	b002      	add	sp, #8
    7354:	bd80      	pop	{r7, pc}
    7356:	46c0      	nop			; (mov r8, r8)
    7358:	40000400 	.word	0x40000400

0000735c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    735c:	b580      	push	{r7, lr}
    735e:	b082      	sub	sp, #8
    7360:	af00      	add	r7, sp, #0
    7362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	2280      	movs	r2, #128	; 0x80
    7368:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	2200      	movs	r2, #0
    736e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	2201      	movs	r2, #1
    7374:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	2200      	movs	r2, #0
    737a:	70da      	strb	r2, [r3, #3]
}
    737c:	46c0      	nop			; (mov r8, r8)
    737e:	46bd      	mov	sp, r7
    7380:	b002      	add	sp, #8
    7382:	bd80      	pop	{r7, pc}

00007384 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    7384:	b580      	push	{r7, lr}
    7386:	b082      	sub	sp, #8
    7388:	af00      	add	r7, sp, #0
    738a:	0002      	movs	r2, r0
    738c:	1dfb      	adds	r3, r7, #7
    738e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7390:	4b06      	ldr	r3, [pc, #24]	; (73ac <system_interrupt_enable+0x28>)
    7392:	1dfa      	adds	r2, r7, #7
    7394:	7812      	ldrb	r2, [r2, #0]
    7396:	0011      	movs	r1, r2
    7398:	221f      	movs	r2, #31
    739a:	400a      	ands	r2, r1
    739c:	2101      	movs	r1, #1
    739e:	4091      	lsls	r1, r2
    73a0:	000a      	movs	r2, r1
    73a2:	601a      	str	r2, [r3, #0]
}
    73a4:	46c0      	nop			; (mov r8, r8)
    73a6:	46bd      	mov	sp, r7
    73a8:	b002      	add	sp, #8
    73aa:	bd80      	pop	{r7, pc}
    73ac:	e000e100 	.word	0xe000e100

000073b0 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    73b0:	b580      	push	{r7, lr}
    73b2:	b082      	sub	sp, #8
    73b4:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    73b6:	4bbc      	ldr	r3, [pc, #752]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    73b8:	681b      	ldr	r3, [r3, #0]
    73ba:	681b      	ldr	r3, [r3, #0]
    73bc:	8c1b      	ldrh	r3, [r3, #32]
    73be:	b29b      	uxth	r3, r3
    73c0:	001a      	movs	r2, r3
    73c2:	4bba      	ldr	r3, [pc, #744]	; (76ac <_usb_host_interrupt_handler+0x2fc>)
    73c4:	0010      	movs	r0, r2
    73c6:	4798      	blx	r3
    73c8:	0003      	movs	r3, r0
    73ca:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    73cc:	687b      	ldr	r3, [r7, #4]
    73ce:	2b1f      	cmp	r3, #31
    73d0:	d900      	bls.n	73d4 <_usb_host_interrupt_handler+0x24>
    73d2:	e175      	b.n	76c0 <_usb_host_interrupt_handler+0x310>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    73d4:	4bb4      	ldr	r3, [pc, #720]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	681a      	ldr	r2, [r3, #0]
    73da:	687b      	ldr	r3, [r7, #4]
    73dc:	3308      	adds	r3, #8
    73de:	015b      	lsls	r3, r3, #5
    73e0:	18d3      	adds	r3, r2, r3
    73e2:	3307      	adds	r3, #7
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	b2db      	uxtb	r3, r3
    73e8:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    73ea:	683b      	ldr	r3, [r7, #0]
    73ec:	2203      	movs	r2, #3
    73ee:	4013      	ands	r3, r2
    73f0:	d100      	bne.n	73f4 <_usb_host_interrupt_handler+0x44>
    73f2:	e088      	b.n	7506 <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    73f4:	2201      	movs	r2, #1
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	409a      	lsls	r2, r3
    73fa:	0013      	movs	r3, r2
    73fc:	43db      	mvns	r3, r3
    73fe:	001a      	movs	r2, r3
    7400:	4bab      	ldr	r3, [pc, #684]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	401a      	ands	r2, r3
    7406:	4baa      	ldr	r3, [pc, #680]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7408:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    740a:	4ba7      	ldr	r3, [pc, #668]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	681a      	ldr	r2, [r3, #0]
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	3308      	adds	r3, #8
    7414:	015b      	lsls	r3, r3, #5
    7416:	18d3      	adds	r3, r2, r3
    7418:	3307      	adds	r3, #7
    741a:	2203      	movs	r2, #3
    741c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    741e:	4ba2      	ldr	r3, [pc, #648]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    7420:	681a      	ldr	r2, [r3, #0]
    7422:	21ae      	movs	r1, #174	; 0xae
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	18d3      	adds	r3, r2, r3
    7428:	185b      	adds	r3, r3, r1
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	001a      	movs	r2, r3
    742e:	2301      	movs	r3, #1
    7430:	4013      	ands	r3, r2
    7432:	d068      	beq.n	7506 <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	b2da      	uxtb	r2, r3
    7438:	4b9e      	ldr	r3, [pc, #632]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    743a:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    743c:	4b9a      	ldr	r3, [pc, #616]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    743e:	681b      	ldr	r3, [r3, #0]
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	687a      	ldr	r2, [r7, #4]
    7444:	3208      	adds	r2, #8
    7446:	0152      	lsls	r2, r2, #5
    7448:	5cd3      	ldrb	r3, [r2, r3]
    744a:	079b      	lsls	r3, r3, #30
    744c:	0f9b      	lsrs	r3, r3, #30
    744e:	b2db      	uxtb	r3, r3
    7450:	2b01      	cmp	r3, #1
    7452:	d11e      	bne.n	7492 <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    7454:	4a98      	ldr	r2, [pc, #608]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	015b      	lsls	r3, r3, #5
    745a:	18d3      	adds	r3, r2, r3
    745c:	685b      	ldr	r3, [r3, #4]
    745e:	049b      	lsls	r3, r3, #18
    7460:	0c9b      	lsrs	r3, r3, #18
    7462:	b29b      	uxth	r3, r3
    7464:	001a      	movs	r2, r3
    7466:	4b93      	ldr	r3, [pc, #588]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    7468:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    746a:	4a93      	ldr	r2, [pc, #588]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	015b      	lsls	r3, r3, #5
    7470:	18d3      	adds	r3, r2, r3
    7472:	685b      	ldr	r3, [r3, #4]
    7474:	011b      	lsls	r3, r3, #4
    7476:	0c9b      	lsrs	r3, r3, #18
    7478:	b29b      	uxth	r3, r3
    747a:	001a      	movs	r2, r3
    747c:	4b8d      	ldr	r3, [pc, #564]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    747e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7480:	4a8d      	ldr	r2, [pc, #564]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	015b      	lsls	r3, r3, #5
    7486:	18d3      	adds	r3, r2, r3
    7488:	685a      	ldr	r2, [r3, #4]
    748a:	0b92      	lsrs	r2, r2, #14
    748c:	0392      	lsls	r2, r2, #14
    748e:	605a      	str	r2, [r3, #4]
    7490:	e02c      	b.n	74ec <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    7492:	4a89      	ldr	r2, [pc, #548]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    7494:	687b      	ldr	r3, [r7, #4]
    7496:	015b      	lsls	r3, r3, #5
    7498:	18d3      	adds	r3, r2, r3
    749a:	685b      	ldr	r3, [r3, #4]
    749c:	011b      	lsls	r3, r3, #4
    749e:	0c9b      	lsrs	r3, r3, #18
    74a0:	b29b      	uxth	r3, r3
    74a2:	001a      	movs	r2, r3
    74a4:	4b83      	ldr	r3, [pc, #524]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    74a6:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    74a8:	4a83      	ldr	r2, [pc, #524]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	015b      	lsls	r3, r3, #5
    74ae:	18d3      	adds	r3, r2, r3
    74b0:	685b      	ldr	r3, [r3, #4]
    74b2:	049b      	lsls	r3, r3, #18
    74b4:	0c9b      	lsrs	r3, r3, #18
    74b6:	b29b      	uxth	r3, r3
    74b8:	001a      	movs	r2, r3
    74ba:	4b7e      	ldr	r3, [pc, #504]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    74bc:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    74be:	4a7e      	ldr	r2, [pc, #504]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	015b      	lsls	r3, r3, #5
    74c4:	18d3      	adds	r3, r2, r3
    74c6:	685a      	ldr	r2, [r3, #4]
    74c8:	497c      	ldr	r1, [pc, #496]	; (76bc <_usb_host_interrupt_handler+0x30c>)
    74ca:	400a      	ands	r2, r1
    74cc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    74ce:	4b79      	ldr	r3, [pc, #484]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    74d0:	885b      	ldrh	r3, [r3, #2]
    74d2:	2b00      	cmp	r3, #0
    74d4:	d10a      	bne.n	74ec <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    74d6:	4a78      	ldr	r2, [pc, #480]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    74d8:	687b      	ldr	r3, [r7, #4]
    74da:	015b      	lsls	r3, r3, #5
    74dc:	18d3      	adds	r3, r2, r3
    74de:	685b      	ldr	r3, [r3, #4]
    74e0:	049b      	lsls	r3, r3, #18
    74e2:	0c9b      	lsrs	r3, r3, #18
    74e4:	b29b      	uxth	r3, r3
    74e6:	001a      	movs	r2, r3
    74e8:	4b72      	ldr	r3, [pc, #456]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    74ea:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    74ec:	4b6e      	ldr	r3, [pc, #440]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    74ee:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	3302      	adds	r3, #2
    74f4:	011b      	lsls	r3, r3, #4
    74f6:	18d3      	adds	r3, r2, r3
    74f8:	3304      	adds	r3, #4
    74fa:	681a      	ldr	r2, [r3, #0]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    74fc:	4b6a      	ldr	r3, [pc, #424]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    74fe:	681b      	ldr	r3, [r3, #0]
    7500:	496c      	ldr	r1, [pc, #432]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    7502:	0018      	movs	r0, r3
    7504:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    7506:	683b      	ldr	r3, [r7, #0]
    7508:	2204      	movs	r2, #4
    750a:	4013      	ands	r3, r2
    750c:	d014      	beq.n	7538 <_usb_host_interrupt_handler+0x188>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    750e:	2201      	movs	r2, #1
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	409a      	lsls	r2, r3
    7514:	0013      	movs	r3, r2
    7516:	43db      	mvns	r3, r3
    7518:	001a      	movs	r2, r3
    751a:	4b65      	ldr	r3, [pc, #404]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	401a      	ands	r2, r3
    7520:	4b63      	ldr	r3, [pc, #396]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7522:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    7524:	4b60      	ldr	r3, [pc, #384]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    7526:	681b      	ldr	r3, [r3, #0]
    7528:	681a      	ldr	r2, [r3, #0]
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	3308      	adds	r3, #8
    752e:	015b      	lsls	r3, r3, #5
    7530:	18d3      	adds	r3, r2, r3
    7532:	3307      	adds	r3, #7
    7534:	2204      	movs	r2, #4
    7536:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    7538:	683b      	ldr	r3, [r7, #0]
    753a:	2208      	movs	r2, #8
    753c:	4013      	ands	r3, r2
    753e:	d03c      	beq.n	75ba <_usb_host_interrupt_handler+0x20a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    7540:	2201      	movs	r2, #1
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	409a      	lsls	r2, r3
    7546:	0013      	movs	r3, r2
    7548:	43db      	mvns	r3, r3
    754a:	001a      	movs	r2, r3
    754c:	4b58      	ldr	r3, [pc, #352]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    754e:	681b      	ldr	r3, [r3, #0]
    7550:	401a      	ands	r2, r3
    7552:	4b57      	ldr	r3, [pc, #348]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7554:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    7556:	4b54      	ldr	r3, [pc, #336]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    7558:	681b      	ldr	r3, [r3, #0]
    755a:	681a      	ldr	r2, [r3, #0]
    755c:	687b      	ldr	r3, [r7, #4]
    755e:	3308      	adds	r3, #8
    7560:	015b      	lsls	r3, r3, #5
    7562:	18d3      	adds	r3, r2, r3
    7564:	3307      	adds	r3, #7
    7566:	2208      	movs	r2, #8
    7568:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    756a:	4b4f      	ldr	r3, [pc, #316]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    756c:	681a      	ldr	r2, [r3, #0]
    756e:	21ae      	movs	r1, #174	; 0xae
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	18d3      	adds	r3, r2, r3
    7574:	185b      	adds	r3, r3, r1
    7576:	781b      	ldrb	r3, [r3, #0]
    7578:	001a      	movs	r2, r3
    757a:	2302      	movs	r3, #2
    757c:	4013      	ands	r3, r2
    757e:	d01c      	beq.n	75ba <_usb_host_interrupt_handler+0x20a>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	b2da      	uxtb	r2, r3
    7584:	4b4b      	ldr	r3, [pc, #300]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    7586:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    7588:	4a4b      	ldr	r2, [pc, #300]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    758a:	687b      	ldr	r3, [r7, #4]
    758c:	015b      	lsls	r3, r3, #5
    758e:	18d3      	adds	r3, r2, r3
    7590:	330e      	adds	r3, #14
    7592:	881b      	ldrh	r3, [r3, #0]
    7594:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    7596:	b2db      	uxtb	r3, r3
    7598:	221f      	movs	r2, #31
    759a:	4013      	ands	r3, r2
    759c:	b2da      	uxtb	r2, r3
    759e:	4b45      	ldr	r3, [pc, #276]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    75a0:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    75a2:	4b41      	ldr	r3, [pc, #260]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    75a4:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    75a6:	687b      	ldr	r3, [r7, #4]
    75a8:	011b      	lsls	r3, r3, #4
    75aa:	18d3      	adds	r3, r2, r3
    75ac:	3328      	adds	r3, #40	; 0x28
    75ae:	681a      	ldr	r2, [r3, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    75b0:	4b3d      	ldr	r3, [pc, #244]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    75b2:	681b      	ldr	r3, [r3, #0]
    75b4:	493f      	ldr	r1, [pc, #252]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    75b6:	0018      	movs	r0, r3
    75b8:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    75ba:	683b      	ldr	r3, [r7, #0]
    75bc:	2210      	movs	r2, #16
    75be:	4013      	ands	r3, r2
    75c0:	d03a      	beq.n	7638 <_usb_host_interrupt_handler+0x288>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    75c2:	2201      	movs	r2, #1
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	409a      	lsls	r2, r3
    75c8:	0013      	movs	r3, r2
    75ca:	43db      	mvns	r3, r3
    75cc:	001a      	movs	r2, r3
    75ce:	4b38      	ldr	r3, [pc, #224]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    75d0:	681b      	ldr	r3, [r3, #0]
    75d2:	401a      	ands	r2, r3
    75d4:	4b36      	ldr	r3, [pc, #216]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    75d6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    75d8:	4b33      	ldr	r3, [pc, #204]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	681a      	ldr	r2, [r3, #0]
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	3308      	adds	r3, #8
    75e2:	015b      	lsls	r3, r3, #5
    75e4:	18d3      	adds	r3, r2, r3
    75e6:	3307      	adds	r3, #7
    75e8:	2210      	movs	r2, #16
    75ea:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    75ec:	4b2e      	ldr	r3, [pc, #184]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    75ee:	681a      	ldr	r2, [r3, #0]
    75f0:	21ae      	movs	r1, #174	; 0xae
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	18d3      	adds	r3, r2, r3
    75f6:	185b      	adds	r3, r3, r1
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	001a      	movs	r2, r3
    75fc:	2304      	movs	r3, #4
    75fe:	4013      	ands	r3, r2
    7600:	d01a      	beq.n	7638 <_usb_host_interrupt_handler+0x288>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    7602:	687b      	ldr	r3, [r7, #4]
    7604:	b2da      	uxtb	r2, r3
    7606:	4b2b      	ldr	r3, [pc, #172]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    7608:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    760a:	4a2b      	ldr	r2, [pc, #172]	; (76b8 <_usb_host_interrupt_handler+0x308>)
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	015b      	lsls	r3, r3, #5
    7610:	18d3      	adds	r3, r2, r3
    7612:	685b      	ldr	r3, [r3, #4]
    7614:	011b      	lsls	r3, r3, #4
    7616:	0c9b      	lsrs	r3, r3, #18
    7618:	b29b      	uxth	r3, r3
    761a:	001a      	movs	r2, r3
    761c:	4b25      	ldr	r3, [pc, #148]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    761e:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    7620:	4b21      	ldr	r3, [pc, #132]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    7622:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	011b      	lsls	r3, r3, #4
    7628:	18d3      	adds	r3, r2, r3
    762a:	332c      	adds	r3, #44	; 0x2c
    762c:	681a      	ldr	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    762e:	4b1e      	ldr	r3, [pc, #120]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    7630:	681b      	ldr	r3, [r3, #0]
    7632:	2100      	movs	r1, #0
    7634:	0018      	movs	r0, r3
    7636:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    7638:	683b      	ldr	r3, [r7, #0]
    763a:	2220      	movs	r2, #32
    763c:	4013      	ands	r3, r2
    763e:	d100      	bne.n	7642 <_usb_host_interrupt_handler+0x292>
    7640:	e113      	b.n	786a <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    7642:	2201      	movs	r2, #1
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	409a      	lsls	r2, r3
    7648:	0013      	movs	r3, r2
    764a:	43db      	mvns	r3, r3
    764c:	001a      	movs	r2, r3
    764e:	4b18      	ldr	r3, [pc, #96]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7650:	681b      	ldr	r3, [r3, #0]
    7652:	401a      	ands	r2, r3
    7654:	4b16      	ldr	r3, [pc, #88]	; (76b0 <_usb_host_interrupt_handler+0x300>)
    7656:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    7658:	4b13      	ldr	r3, [pc, #76]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    765a:	681b      	ldr	r3, [r3, #0]
    765c:	681a      	ldr	r2, [r3, #0]
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	3308      	adds	r3, #8
    7662:	015b      	lsls	r3, r3, #5
    7664:	18d3      	adds	r3, r2, r3
    7666:	3307      	adds	r3, #7
    7668:	2220      	movs	r2, #32
    766a:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    766c:	4b0e      	ldr	r3, [pc, #56]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    766e:	681a      	ldr	r2, [r3, #0]
    7670:	21ae      	movs	r1, #174	; 0xae
    7672:	687b      	ldr	r3, [r7, #4]
    7674:	18d3      	adds	r3, r2, r3
    7676:	185b      	adds	r3, r3, r1
    7678:	781b      	ldrb	r3, [r3, #0]
    767a:	001a      	movs	r2, r3
    767c:	2308      	movs	r3, #8
    767e:	4013      	ands	r3, r2
    7680:	d100      	bne.n	7684 <_usb_host_interrupt_handler+0x2d4>
    7682:	e0f2      	b.n	786a <_usb_host_interrupt_handler+0x4ba>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	b2da      	uxtb	r2, r3
    7688:	4b0a      	ldr	r3, [pc, #40]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    768a:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    768c:	4b06      	ldr	r3, [pc, #24]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    768e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    7690:	687b      	ldr	r3, [r7, #4]
    7692:	011b      	lsls	r3, r3, #4
    7694:	18d3      	adds	r3, r2, r3
    7696:	3330      	adds	r3, #48	; 0x30
    7698:	681a      	ldr	r2, [r3, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    769a:	4b03      	ldr	r3, [pc, #12]	; (76a8 <_usb_host_interrupt_handler+0x2f8>)
    769c:	681b      	ldr	r3, [r3, #0]
    769e:	4905      	ldr	r1, [pc, #20]	; (76b4 <_usb_host_interrupt_handler+0x304>)
    76a0:	0018      	movs	r0, r3
    76a2:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    76a4:	e0e1      	b.n	786a <_usb_host_interrupt_handler+0x4ba>
    76a6:	46c0      	nop			; (mov r8, r8)
    76a8:	20000188 	.word	0x20000188
    76ac:	00009cc9 	.word	0x00009cc9
    76b0:	200001a0 	.word	0x200001a0
    76b4:	2000018c 	.word	0x2000018c
    76b8:	20000500 	.word	0x20000500
    76bc:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    76c0:	4b6c      	ldr	r3, [pc, #432]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    76c2:	681b      	ldr	r3, [r3, #0]
    76c4:	681b      	ldr	r3, [r3, #0]
    76c6:	8b9b      	ldrh	r3, [r3, #28]
    76c8:	b29b      	uxth	r3, r3
    76ca:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    76cc:	683b      	ldr	r3, [r7, #0]
    76ce:	2204      	movs	r2, #4
    76d0:	4013      	ands	r3, r2
    76d2:	d013      	beq.n	76fc <_usb_host_interrupt_handler+0x34c>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    76d4:	4b67      	ldr	r3, [pc, #412]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	681b      	ldr	r3, [r3, #0]
    76da:	2204      	movs	r2, #4
    76dc:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    76de:	4b65      	ldr	r3, [pc, #404]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    76e0:	681b      	ldr	r3, [r3, #0]
    76e2:	22a5      	movs	r2, #165	; 0xa5
    76e4:	5c9b      	ldrb	r3, [r3, r2]
    76e6:	001a      	movs	r2, r3
    76e8:	2301      	movs	r3, #1
    76ea:	4013      	ands	r3, r2
    76ec:	d006      	beq.n	76fc <_usb_host_interrupt_handler+0x34c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    76ee:	4b61      	ldr	r3, [pc, #388]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    76f0:	681b      	ldr	r3, [r3, #0]
    76f2:	685a      	ldr	r2, [r3, #4]
    76f4:	4b5f      	ldr	r3, [pc, #380]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    76f6:	681b      	ldr	r3, [r3, #0]
    76f8:	0018      	movs	r0, r3
    76fa:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    76fc:	683b      	ldr	r3, [r7, #0]
    76fe:	2208      	movs	r2, #8
    7700:	4013      	ands	r3, r2
    7702:	d016      	beq.n	7732 <_usb_host_interrupt_handler+0x382>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7704:	4b5c      	ldr	r3, [pc, #368]	; (7878 <_usb_host_interrupt_handler+0x4c8>)
    7706:	2200      	movs	r2, #0
    7708:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    770a:	4b5a      	ldr	r3, [pc, #360]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2208      	movs	r2, #8
    7712:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    7714:	4b57      	ldr	r3, [pc, #348]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7716:	681b      	ldr	r3, [r3, #0]
    7718:	22a5      	movs	r2, #165	; 0xa5
    771a:	5c9b      	ldrb	r3, [r3, r2]
    771c:	001a      	movs	r2, r3
    771e:	2302      	movs	r3, #2
    7720:	4013      	ands	r3, r2
    7722:	d006      	beq.n	7732 <_usb_host_interrupt_handler+0x382>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    7724:	4b53      	ldr	r3, [pc, #332]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7726:	681b      	ldr	r3, [r3, #0]
    7728:	689a      	ldr	r2, [r3, #8]
    772a:	4b52      	ldr	r3, [pc, #328]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	0018      	movs	r0, r3
    7730:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    7732:	683b      	ldr	r3, [r7, #0]
    7734:	2240      	movs	r2, #64	; 0x40
    7736:	4013      	ands	r3, r2
    7738:	d013      	beq.n	7762 <_usb_host_interrupt_handler+0x3b2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    773a:	4b4e      	ldr	r3, [pc, #312]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    773c:	681b      	ldr	r3, [r3, #0]
    773e:	681b      	ldr	r3, [r3, #0]
    7740:	2240      	movs	r2, #64	; 0x40
    7742:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    7744:	4b4b      	ldr	r3, [pc, #300]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7746:	681b      	ldr	r3, [r3, #0]
    7748:	22a5      	movs	r2, #165	; 0xa5
    774a:	5c9b      	ldrb	r3, [r3, r2]
    774c:	001a      	movs	r2, r3
    774e:	2310      	movs	r3, #16
    7750:	4013      	ands	r3, r2
    7752:	d006      	beq.n	7762 <_usb_host_interrupt_handler+0x3b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    7754:	4b47      	ldr	r3, [pc, #284]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7756:	681b      	ldr	r3, [r3, #0]
    7758:	695a      	ldr	r2, [r3, #20]
    775a:	4b46      	ldr	r3, [pc, #280]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    775c:	681b      	ldr	r3, [r3, #0]
    775e:	0018      	movs	r0, r3
    7760:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    7762:	683b      	ldr	r3, [r7, #0]
    7764:	2220      	movs	r2, #32
    7766:	4013      	ands	r3, r2
    7768:	d013      	beq.n	7792 <_usb_host_interrupt_handler+0x3e2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    776a:	4b42      	ldr	r3, [pc, #264]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	2220      	movs	r2, #32
    7772:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    7774:	4b3f      	ldr	r3, [pc, #252]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	22a5      	movs	r2, #165	; 0xa5
    777a:	5c9b      	ldrb	r3, [r3, r2]
    777c:	001a      	movs	r2, r3
    777e:	2308      	movs	r3, #8
    7780:	4013      	ands	r3, r2
    7782:	d006      	beq.n	7792 <_usb_host_interrupt_handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    7784:	4b3b      	ldr	r3, [pc, #236]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7786:	681b      	ldr	r3, [r3, #0]
    7788:	691a      	ldr	r2, [r3, #16]
    778a:	4b3a      	ldr	r3, [pc, #232]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    778c:	681b      	ldr	r3, [r3, #0]
    778e:	0018      	movs	r0, r3
    7790:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    7792:	683b      	ldr	r3, [r7, #0]
    7794:	2210      	movs	r2, #16
    7796:	4013      	ands	r3, r2
    7798:	d013      	beq.n	77c2 <_usb_host_interrupt_handler+0x412>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    779a:	4b36      	ldr	r3, [pc, #216]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    779c:	681b      	ldr	r3, [r3, #0]
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	2210      	movs	r2, #16
    77a2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    77a4:	4b33      	ldr	r3, [pc, #204]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77a6:	681b      	ldr	r3, [r3, #0]
    77a8:	22a5      	movs	r2, #165	; 0xa5
    77aa:	5c9b      	ldrb	r3, [r3, r2]
    77ac:	001a      	movs	r2, r3
    77ae:	2304      	movs	r3, #4
    77b0:	4013      	ands	r3, r2
    77b2:	d006      	beq.n	77c2 <_usb_host_interrupt_handler+0x412>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    77b4:	4b2f      	ldr	r3, [pc, #188]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	68da      	ldr	r2, [r3, #12]
    77ba:	4b2e      	ldr	r3, [pc, #184]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77bc:	681b      	ldr	r3, [r3, #0]
    77be:	0018      	movs	r0, r3
    77c0:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    77c2:	683b      	ldr	r3, [r7, #0]
    77c4:	2280      	movs	r2, #128	; 0x80
    77c6:	4013      	ands	r3, r2
    77c8:	d016      	beq.n	77f8 <_usb_host_interrupt_handler+0x448>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    77ca:	4b2b      	ldr	r3, [pc, #172]	; (7878 <_usb_host_interrupt_handler+0x4c8>)
    77cc:	2200      	movs	r2, #0
    77ce:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    77d0:	4b28      	ldr	r3, [pc, #160]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77d2:	681b      	ldr	r3, [r3, #0]
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	2280      	movs	r2, #128	; 0x80
    77d8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    77da:	4b26      	ldr	r3, [pc, #152]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77dc:	681b      	ldr	r3, [r3, #0]
    77de:	22a5      	movs	r2, #165	; 0xa5
    77e0:	5c9b      	ldrb	r3, [r3, r2]
    77e2:	001a      	movs	r2, r3
    77e4:	2320      	movs	r3, #32
    77e6:	4013      	ands	r3, r2
    77e8:	d006      	beq.n	77f8 <_usb_host_interrupt_handler+0x448>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    77ea:	4b22      	ldr	r3, [pc, #136]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77ec:	681b      	ldr	r3, [r3, #0]
    77ee:	699a      	ldr	r2, [r3, #24]
    77f0:	4b20      	ldr	r3, [pc, #128]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    77f2:	681b      	ldr	r3, [r3, #0]
    77f4:	0018      	movs	r0, r3
    77f6:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    77f8:	683a      	ldr	r2, [r7, #0]
    77fa:	2380      	movs	r3, #128	; 0x80
    77fc:	005b      	lsls	r3, r3, #1
    77fe:	4013      	ands	r3, r2
    7800:	d017      	beq.n	7832 <_usb_host_interrupt_handler+0x482>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7802:	4b1d      	ldr	r3, [pc, #116]	; (7878 <_usb_host_interrupt_handler+0x4c8>)
    7804:	2200      	movs	r2, #0
    7806:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    7808:	4b1a      	ldr	r3, [pc, #104]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	2280      	movs	r2, #128	; 0x80
    7810:	0052      	lsls	r2, r2, #1
    7812:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    7814:	4b17      	ldr	r3, [pc, #92]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	22a5      	movs	r2, #165	; 0xa5
    781a:	5c9b      	ldrb	r3, [r3, r2]
    781c:	001a      	movs	r2, r3
    781e:	2340      	movs	r3, #64	; 0x40
    7820:	4013      	ands	r3, r2
    7822:	d006      	beq.n	7832 <_usb_host_interrupt_handler+0x482>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    7824:	4b13      	ldr	r3, [pc, #76]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7826:	681b      	ldr	r3, [r3, #0]
    7828:	69da      	ldr	r2, [r3, #28]
    782a:	4b12      	ldr	r3, [pc, #72]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	0018      	movs	r0, r3
    7830:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    7832:	683a      	ldr	r2, [r7, #0]
    7834:	2380      	movs	r3, #128	; 0x80
    7836:	009b      	lsls	r3, r3, #2
    7838:	4013      	ands	r3, r2
    783a:	d016      	beq.n	786a <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    783c:	4b0e      	ldr	r3, [pc, #56]	; (7878 <_usb_host_interrupt_handler+0x4c8>)
    783e:	2200      	movs	r2, #0
    7840:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    7842:	4b0c      	ldr	r3, [pc, #48]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7844:	681b      	ldr	r3, [r3, #0]
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	2280      	movs	r2, #128	; 0x80
    784a:	0092      	lsls	r2, r2, #2
    784c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    784e:	4b09      	ldr	r3, [pc, #36]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7850:	681b      	ldr	r3, [r3, #0]
    7852:	22a5      	movs	r2, #165	; 0xa5
    7854:	5c9b      	ldrb	r3, [r3, r2]
    7856:	b25b      	sxtb	r3, r3
    7858:	2b00      	cmp	r3, #0
    785a:	da06      	bge.n	786a <_usb_host_interrupt_handler+0x4ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    785c:	4b05      	ldr	r3, [pc, #20]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    785e:	681b      	ldr	r3, [r3, #0]
    7860:	6a1a      	ldr	r2, [r3, #32]
    7862:	4b04      	ldr	r3, [pc, #16]	; (7874 <_usb_host_interrupt_handler+0x4c4>)
    7864:	681b      	ldr	r3, [r3, #0]
    7866:	0018      	movs	r0, r3
    7868:	4790      	blx	r2
			}
		}

	}
}
    786a:	46c0      	nop			; (mov r8, r8)
    786c:	46bd      	mov	sp, r7
    786e:	b002      	add	sp, #8
    7870:	bd80      	pop	{r7, pc}
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	20000188 	.word	0x20000188
    7878:	200001a0 	.word	0x200001a0

0000787c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    787c:	b580      	push	{r7, lr}
    787e:	b084      	sub	sp, #16
    7880:	af00      	add	r7, sp, #0
    7882:	60f8      	str	r0, [r7, #12]
    7884:	607a      	str	r2, [r7, #4]
    7886:	230b      	movs	r3, #11
    7888:	18fb      	adds	r3, r7, r3
    788a:	1c0a      	adds	r2, r1, #0
    788c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    788e:	230b      	movs	r3, #11
    7890:	18fb      	adds	r3, r7, r3
    7892:	781a      	ldrb	r2, [r3, #0]
    7894:	68fb      	ldr	r3, [r7, #12]
    7896:	322e      	adds	r2, #46	; 0x2e
    7898:	0092      	lsls	r2, r2, #2
    789a:	6879      	ldr	r1, [r7, #4]
    789c:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    789e:	68fa      	ldr	r2, [r7, #12]
    78a0:	23aa      	movs	r3, #170	; 0xaa
    78a2:	005b      	lsls	r3, r3, #1
    78a4:	5ad2      	ldrh	r2, [r2, r3]
    78a6:	230b      	movs	r3, #11
    78a8:	18fb      	adds	r3, r7, r3
    78aa:	7819      	ldrb	r1, [r3, #0]
    78ac:	4b06      	ldr	r3, [pc, #24]	; (78c8 <usb_device_register_callback+0x4c>)
    78ae:	0049      	lsls	r1, r1, #1
    78b0:	5acb      	ldrh	r3, [r1, r3]
    78b2:	4313      	orrs	r3, r2
    78b4:	b299      	uxth	r1, r3
    78b6:	68fa      	ldr	r2, [r7, #12]
    78b8:	23aa      	movs	r3, #170	; 0xaa
    78ba:	005b      	lsls	r3, r3, #1
    78bc:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    78be:	2300      	movs	r3, #0
}
    78c0:	0018      	movs	r0, r3
    78c2:	46bd      	mov	sp, r7
    78c4:	b004      	add	sp, #16
    78c6:	bd80      	pop	{r7, pc}
    78c8:	00009e94 	.word	0x00009e94

000078cc <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b082      	sub	sp, #8
    78d0:	af00      	add	r7, sp, #0
    78d2:	6078      	str	r0, [r7, #4]
    78d4:	000a      	movs	r2, r1
    78d6:	1cfb      	adds	r3, r7, #3
    78d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	681b      	ldr	r3, [r3, #0]
    78de:	1cfa      	adds	r2, r7, #3
    78e0:	7811      	ldrb	r1, [r2, #0]
    78e2:	4a10      	ldr	r2, [pc, #64]	; (7924 <usb_device_enable_callback+0x58>)
    78e4:	0049      	lsls	r1, r1, #1
    78e6:	5a8a      	ldrh	r2, [r1, r2]
    78e8:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    78ea:	687a      	ldr	r2, [r7, #4]
    78ec:	23ab      	movs	r3, #171	; 0xab
    78ee:	005b      	lsls	r3, r3, #1
    78f0:	5ad2      	ldrh	r2, [r2, r3]
    78f2:	1cfb      	adds	r3, r7, #3
    78f4:	7819      	ldrb	r1, [r3, #0]
    78f6:	4b0b      	ldr	r3, [pc, #44]	; (7924 <usb_device_enable_callback+0x58>)
    78f8:	0049      	lsls	r1, r1, #1
    78fa:	5acb      	ldrh	r3, [r1, r3]
    78fc:	4313      	orrs	r3, r2
    78fe:	b299      	uxth	r1, r3
    7900:	687a      	ldr	r2, [r7, #4]
    7902:	23ab      	movs	r3, #171	; 0xab
    7904:	005b      	lsls	r3, r3, #1
    7906:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	681b      	ldr	r3, [r3, #0]
    790c:	1cfa      	adds	r2, r7, #3
    790e:	7811      	ldrb	r1, [r2, #0]
    7910:	4a04      	ldr	r2, [pc, #16]	; (7924 <usb_device_enable_callback+0x58>)
    7912:	0049      	lsls	r1, r1, #1
    7914:	5a8a      	ldrh	r2, [r1, r2]
    7916:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    7918:	2300      	movs	r3, #0
}
    791a:	0018      	movs	r0, r3
    791c:	46bd      	mov	sp, r7
    791e:	b002      	add	sp, #8
    7920:	bd80      	pop	{r7, pc}
    7922:	46c0      	nop			; (mov r8, r8)
    7924:	00009e94 	.word	0x00009e94

00007928 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    7928:	b580      	push	{r7, lr}
    792a:	b082      	sub	sp, #8
    792c:	af00      	add	r7, sp, #0
    792e:	6078      	str	r0, [r7, #4]
    7930:	000a      	movs	r2, r1
    7932:	1cfb      	adds	r3, r7, #3
    7934:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    7936:	687a      	ldr	r2, [r7, #4]
    7938:	23ab      	movs	r3, #171	; 0xab
    793a:	005b      	lsls	r3, r3, #1
    793c:	5ad3      	ldrh	r3, [r2, r3]
    793e:	b21b      	sxth	r3, r3
    7940:	1cfa      	adds	r2, r7, #3
    7942:	7811      	ldrb	r1, [r2, #0]
    7944:	4a0c      	ldr	r2, [pc, #48]	; (7978 <usb_device_disable_callback+0x50>)
    7946:	0049      	lsls	r1, r1, #1
    7948:	5a8a      	ldrh	r2, [r1, r2]
    794a:	b212      	sxth	r2, r2
    794c:	43d2      	mvns	r2, r2
    794e:	b212      	sxth	r2, r2
    7950:	4013      	ands	r3, r2
    7952:	b21b      	sxth	r3, r3
    7954:	b299      	uxth	r1, r3
    7956:	687a      	ldr	r2, [r7, #4]
    7958:	23ab      	movs	r3, #171	; 0xab
    795a:	005b      	lsls	r3, r3, #1
    795c:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    795e:	687b      	ldr	r3, [r7, #4]
    7960:	681b      	ldr	r3, [r3, #0]
    7962:	1cfa      	adds	r2, r7, #3
    7964:	7811      	ldrb	r1, [r2, #0]
    7966:	4a04      	ldr	r2, [pc, #16]	; (7978 <usb_device_disable_callback+0x50>)
    7968:	0049      	lsls	r1, r1, #1
    796a:	5a8a      	ldrh	r2, [r1, r2]
    796c:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    796e:	2300      	movs	r3, #0
}
    7970:	0018      	movs	r0, r3
    7972:	46bd      	mov	sp, r7
    7974:	b002      	add	sp, #8
    7976:	bd80      	pop	{r7, pc}
    7978:	00009e94 	.word	0x00009e94

0000797c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    797c:	b580      	push	{r7, lr}
    797e:	b084      	sub	sp, #16
    7980:	af00      	add	r7, sp, #0
    7982:	60f8      	str	r0, [r7, #12]
    7984:	0008      	movs	r0, r1
    7986:	0011      	movs	r1, r2
    7988:	607b      	str	r3, [r7, #4]
    798a:	230b      	movs	r3, #11
    798c:	18fb      	adds	r3, r7, r3
    798e:	1c02      	adds	r2, r0, #0
    7990:	701a      	strb	r2, [r3, #0]
    7992:	230a      	movs	r3, #10
    7994:	18fb      	adds	r3, r7, r3
    7996:	1c0a      	adds	r2, r1, #0
    7998:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    799a:	230b      	movs	r3, #11
    799c:	18fb      	adds	r3, r7, r3
    799e:	7819      	ldrb	r1, [r3, #0]
    79a0:	230a      	movs	r3, #10
    79a2:	18fb      	adds	r3, r7, r3
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	68fa      	ldr	r2, [r7, #12]
    79a8:	0089      	lsls	r1, r1, #2
    79aa:	18cb      	adds	r3, r1, r3
    79ac:	3334      	adds	r3, #52	; 0x34
    79ae:	009b      	lsls	r3, r3, #2
    79b0:	18d3      	adds	r3, r2, r3
    79b2:	3304      	adds	r3, #4
    79b4:	687a      	ldr	r2, [r7, #4]
    79b6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    79b8:	230b      	movs	r3, #11
    79ba:	18fb      	adds	r3, r7, r3
    79bc:	781a      	ldrb	r2, [r3, #0]
    79be:	230b      	movs	r3, #11
    79c0:	18fb      	adds	r3, r7, r3
    79c2:	7819      	ldrb	r1, [r3, #0]
    79c4:	68f8      	ldr	r0, [r7, #12]
    79c6:	23ac      	movs	r3, #172	; 0xac
    79c8:	005b      	lsls	r3, r3, #1
    79ca:	1841      	adds	r1, r0, r1
    79cc:	18cb      	adds	r3, r1, r3
    79ce:	7819      	ldrb	r1, [r3, #0]
    79d0:	230a      	movs	r3, #10
    79d2:	18fb      	adds	r3, r7, r3
    79d4:	781b      	ldrb	r3, [r3, #0]
    79d6:	4808      	ldr	r0, [pc, #32]	; (79f8 <usb_device_endpoint_register_callback+0x7c>)
    79d8:	5cc3      	ldrb	r3, [r0, r3]
    79da:	430b      	orrs	r3, r1
    79dc:	b2d8      	uxtb	r0, r3
    79de:	68f9      	ldr	r1, [r7, #12]
    79e0:	23ac      	movs	r3, #172	; 0xac
    79e2:	005b      	lsls	r3, r3, #1
    79e4:	188a      	adds	r2, r1, r2
    79e6:	18d3      	adds	r3, r2, r3
    79e8:	1c02      	adds	r2, r0, #0
    79ea:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    79ec:	2300      	movs	r3, #0
}
    79ee:	0018      	movs	r0, r3
    79f0:	46bd      	mov	sp, r7
    79f2:	b004      	add	sp, #16
    79f4:	bd80      	pop	{r7, pc}
    79f6:	46c0      	nop			; (mov r8, r8)
    79f8:	00009ea4 	.word	0x00009ea4

000079fc <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	6078      	str	r0, [r7, #4]
    7a04:	0008      	movs	r0, r1
    7a06:	0011      	movs	r1, r2
    7a08:	1cfb      	adds	r3, r7, #3
    7a0a:	1c02      	adds	r2, r0, #0
    7a0c:	701a      	strb	r2, [r3, #0]
    7a0e:	1cbb      	adds	r3, r7, #2
    7a10:	1c0a      	adds	r2, r1, #0
    7a12:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    7a14:	1cfb      	adds	r3, r7, #3
    7a16:	7819      	ldrb	r1, [r3, #0]
    7a18:	1cbb      	adds	r3, r7, #2
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	687a      	ldr	r2, [r7, #4]
    7a1e:	0089      	lsls	r1, r1, #2
    7a20:	18cb      	adds	r3, r1, r3
    7a22:	3334      	adds	r3, #52	; 0x34
    7a24:	009b      	lsls	r3, r3, #2
    7a26:	18d3      	adds	r3, r2, r3
    7a28:	3304      	adds	r3, #4
    7a2a:	2200      	movs	r2, #0
    7a2c:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    7a2e:	1cfb      	adds	r3, r7, #3
    7a30:	781a      	ldrb	r2, [r3, #0]
    7a32:	1cfb      	adds	r3, r7, #3
    7a34:	7819      	ldrb	r1, [r3, #0]
    7a36:	6878      	ldr	r0, [r7, #4]
    7a38:	23ac      	movs	r3, #172	; 0xac
    7a3a:	005b      	lsls	r3, r3, #1
    7a3c:	1841      	adds	r1, r0, r1
    7a3e:	18cb      	adds	r3, r1, r3
    7a40:	781b      	ldrb	r3, [r3, #0]
    7a42:	b25b      	sxtb	r3, r3
    7a44:	1cb9      	adds	r1, r7, #2
    7a46:	7809      	ldrb	r1, [r1, #0]
    7a48:	4809      	ldr	r0, [pc, #36]	; (7a70 <usb_device_endpoint_unregister_callback+0x74>)
    7a4a:	5c41      	ldrb	r1, [r0, r1]
    7a4c:	b249      	sxtb	r1, r1
    7a4e:	43c9      	mvns	r1, r1
    7a50:	b249      	sxtb	r1, r1
    7a52:	400b      	ands	r3, r1
    7a54:	b25b      	sxtb	r3, r3
    7a56:	b2d8      	uxtb	r0, r3
    7a58:	6879      	ldr	r1, [r7, #4]
    7a5a:	23ac      	movs	r3, #172	; 0xac
    7a5c:	005b      	lsls	r3, r3, #1
    7a5e:	188a      	adds	r2, r1, r2
    7a60:	18d3      	adds	r3, r2, r3
    7a62:	1c02      	adds	r2, r0, #0
    7a64:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7a66:	2300      	movs	r3, #0
}
    7a68:	0018      	movs	r0, r3
    7a6a:	46bd      	mov	sp, r7
    7a6c:	b002      	add	sp, #8
    7a6e:	bd80      	pop	{r7, pc}
    7a70:	00009ea4 	.word	0x00009ea4

00007a74 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b084      	sub	sp, #16
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	0008      	movs	r0, r1
    7a7e:	0011      	movs	r1, r2
    7a80:	1cfb      	adds	r3, r7, #3
    7a82:	1c02      	adds	r2, r0, #0
    7a84:	701a      	strb	r2, [r3, #0]
    7a86:	1cbb      	adds	r3, r7, #2
    7a88:	1c0a      	adds	r2, r1, #0
    7a8a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7a8c:	230f      	movs	r3, #15
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	1cfa      	adds	r2, r7, #3
    7a92:	7812      	ldrb	r2, [r2, #0]
    7a94:	210f      	movs	r1, #15
    7a96:	400a      	ands	r2, r1
    7a98:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    7a9a:	230f      	movs	r3, #15
    7a9c:	18fb      	adds	r3, r7, r3
    7a9e:	781a      	ldrb	r2, [r3, #0]
    7aa0:	230f      	movs	r3, #15
    7aa2:	18fb      	adds	r3, r7, r3
    7aa4:	7819      	ldrb	r1, [r3, #0]
    7aa6:	6878      	ldr	r0, [r7, #4]
    7aa8:	23b0      	movs	r3, #176	; 0xb0
    7aaa:	005b      	lsls	r3, r3, #1
    7aac:	1841      	adds	r1, r0, r1
    7aae:	18cb      	adds	r3, r1, r3
    7ab0:	7819      	ldrb	r1, [r3, #0]
    7ab2:	1cbb      	adds	r3, r7, #2
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	4855      	ldr	r0, [pc, #340]	; (7c0c <usb_device_endpoint_enable_callback+0x198>)
    7ab8:	5cc3      	ldrb	r3, [r0, r3]
    7aba:	430b      	orrs	r3, r1
    7abc:	b2d8      	uxtb	r0, r3
    7abe:	6879      	ldr	r1, [r7, #4]
    7ac0:	23b0      	movs	r3, #176	; 0xb0
    7ac2:	005b      	lsls	r3, r3, #1
    7ac4:	188a      	adds	r2, r1, r2
    7ac6:	18d3      	adds	r3, r2, r3
    7ac8:	1c02      	adds	r2, r0, #0
    7aca:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    7acc:	1cbb      	adds	r3, r7, #2
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d12f      	bne.n	7b34 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    7ad4:	230f      	movs	r3, #15
    7ad6:	18fb      	adds	r3, r7, r3
    7ad8:	781b      	ldrb	r3, [r3, #0]
    7ada:	2b00      	cmp	r3, #0
    7adc:	d10c      	bne.n	7af8 <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	6819      	ldr	r1, [r3, #0]
    7ae2:	230f      	movs	r3, #15
    7ae4:	18fb      	adds	r3, r7, r3
    7ae6:	781a      	ldrb	r2, [r3, #0]
    7ae8:	230a      	movs	r3, #10
    7aea:	33ff      	adds	r3, #255	; 0xff
    7aec:	0152      	lsls	r2, r2, #5
    7aee:	188a      	adds	r2, r1, r2
    7af0:	18d3      	adds	r3, r2, r3
    7af2:	2203      	movs	r2, #3
    7af4:	701a      	strb	r2, [r3, #0]
    7af6:	e01d      	b.n	7b34 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    7af8:	1cfb      	adds	r3, r7, #3
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	b25b      	sxtb	r3, r3
    7afe:	2b00      	cmp	r3, #0
    7b00:	da0c      	bge.n	7b1c <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	6819      	ldr	r1, [r3, #0]
    7b06:	230f      	movs	r3, #15
    7b08:	18fb      	adds	r3, r7, r3
    7b0a:	781a      	ldrb	r2, [r3, #0]
    7b0c:	230a      	movs	r3, #10
    7b0e:	33ff      	adds	r3, #255	; 0xff
    7b10:	0152      	lsls	r2, r2, #5
    7b12:	188a      	adds	r2, r1, r2
    7b14:	18d3      	adds	r3, r2, r3
    7b16:	2202      	movs	r2, #2
    7b18:	701a      	strb	r2, [r3, #0]
    7b1a:	e00b      	b.n	7b34 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	6819      	ldr	r1, [r3, #0]
    7b20:	230f      	movs	r3, #15
    7b22:	18fb      	adds	r3, r7, r3
    7b24:	781a      	ldrb	r2, [r3, #0]
    7b26:	230a      	movs	r3, #10
    7b28:	33ff      	adds	r3, #255	; 0xff
    7b2a:	0152      	lsls	r2, r2, #5
    7b2c:	188a      	adds	r2, r1, r2
    7b2e:	18d3      	adds	r3, r2, r3
    7b30:	2201      	movs	r2, #1
    7b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    7b34:	1cbb      	adds	r3, r7, #2
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	2b01      	cmp	r3, #1
    7b3a:	d12f      	bne.n	7b9c <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    7b3c:	230f      	movs	r3, #15
    7b3e:	18fb      	adds	r3, r7, r3
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	2b00      	cmp	r3, #0
    7b44:	d10c      	bne.n	7b60 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	6819      	ldr	r1, [r3, #0]
    7b4a:	230f      	movs	r3, #15
    7b4c:	18fb      	adds	r3, r7, r3
    7b4e:	781a      	ldrb	r2, [r3, #0]
    7b50:	230a      	movs	r3, #10
    7b52:	33ff      	adds	r3, #255	; 0xff
    7b54:	0152      	lsls	r2, r2, #5
    7b56:	188a      	adds	r2, r1, r2
    7b58:	18d3      	adds	r3, r2, r3
    7b5a:	220c      	movs	r2, #12
    7b5c:	701a      	strb	r2, [r3, #0]
    7b5e:	e01d      	b.n	7b9c <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    7b60:	1cfb      	adds	r3, r7, #3
    7b62:	781b      	ldrb	r3, [r3, #0]
    7b64:	b25b      	sxtb	r3, r3
    7b66:	2b00      	cmp	r3, #0
    7b68:	da0c      	bge.n	7b84 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    7b6a:	687b      	ldr	r3, [r7, #4]
    7b6c:	6819      	ldr	r1, [r3, #0]
    7b6e:	230f      	movs	r3, #15
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	781a      	ldrb	r2, [r3, #0]
    7b74:	230a      	movs	r3, #10
    7b76:	33ff      	adds	r3, #255	; 0xff
    7b78:	0152      	lsls	r2, r2, #5
    7b7a:	188a      	adds	r2, r1, r2
    7b7c:	18d3      	adds	r3, r2, r3
    7b7e:	2208      	movs	r2, #8
    7b80:	701a      	strb	r2, [r3, #0]
    7b82:	e00b      	b.n	7b9c <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	6819      	ldr	r1, [r3, #0]
    7b88:	230f      	movs	r3, #15
    7b8a:	18fb      	adds	r3, r7, r3
    7b8c:	781a      	ldrb	r2, [r3, #0]
    7b8e:	230a      	movs	r3, #10
    7b90:	33ff      	adds	r3, #255	; 0xff
    7b92:	0152      	lsls	r2, r2, #5
    7b94:	188a      	adds	r2, r1, r2
    7b96:	18d3      	adds	r3, r2, r3
    7b98:	2204      	movs	r2, #4
    7b9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    7b9c:	1cbb      	adds	r3, r7, #2
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	2b02      	cmp	r3, #2
    7ba2:	d10b      	bne.n	7bbc <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	6819      	ldr	r1, [r3, #0]
    7ba8:	230f      	movs	r3, #15
    7baa:	18fb      	adds	r3, r7, r3
    7bac:	781a      	ldrb	r2, [r3, #0]
    7bae:	230a      	movs	r3, #10
    7bb0:	33ff      	adds	r3, #255	; 0xff
    7bb2:	0152      	lsls	r2, r2, #5
    7bb4:	188a      	adds	r2, r1, r2
    7bb6:	18d3      	adds	r3, r2, r3
    7bb8:	2210      	movs	r2, #16
    7bba:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    7bbc:	1cbb      	adds	r3, r7, #2
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	2b03      	cmp	r3, #3
    7bc2:	d11d      	bne.n	7c00 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    7bc4:	1cfb      	adds	r3, r7, #3
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	b25b      	sxtb	r3, r3
    7bca:	2b00      	cmp	r3, #0
    7bcc:	da0c      	bge.n	7be8 <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	6819      	ldr	r1, [r3, #0]
    7bd2:	230f      	movs	r3, #15
    7bd4:	18fb      	adds	r3, r7, r3
    7bd6:	781a      	ldrb	r2, [r3, #0]
    7bd8:	230a      	movs	r3, #10
    7bda:	33ff      	adds	r3, #255	; 0xff
    7bdc:	0152      	lsls	r2, r2, #5
    7bde:	188a      	adds	r2, r1, r2
    7be0:	18d3      	adds	r3, r2, r3
    7be2:	2240      	movs	r2, #64	; 0x40
    7be4:	701a      	strb	r2, [r3, #0]
    7be6:	e00b      	b.n	7c00 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	6819      	ldr	r1, [r3, #0]
    7bec:	230f      	movs	r3, #15
    7bee:	18fb      	adds	r3, r7, r3
    7bf0:	781a      	ldrb	r2, [r3, #0]
    7bf2:	230a      	movs	r3, #10
    7bf4:	33ff      	adds	r3, #255	; 0xff
    7bf6:	0152      	lsls	r2, r2, #5
    7bf8:	188a      	adds	r2, r1, r2
    7bfa:	18d3      	adds	r3, r2, r3
    7bfc:	2220      	movs	r2, #32
    7bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    7c00:	2300      	movs	r3, #0
}
    7c02:	0018      	movs	r0, r3
    7c04:	46bd      	mov	sp, r7
    7c06:	b004      	add	sp, #16
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)
    7c0c:	00009ea4 	.word	0x00009ea4

00007c10 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    7c10:	b580      	push	{r7, lr}
    7c12:	b084      	sub	sp, #16
    7c14:	af00      	add	r7, sp, #0
    7c16:	6078      	str	r0, [r7, #4]
    7c18:	0008      	movs	r0, r1
    7c1a:	0011      	movs	r1, r2
    7c1c:	1cfb      	adds	r3, r7, #3
    7c1e:	1c02      	adds	r2, r0, #0
    7c20:	701a      	strb	r2, [r3, #0]
    7c22:	1cbb      	adds	r3, r7, #2
    7c24:	1c0a      	adds	r2, r1, #0
    7c26:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7c28:	230f      	movs	r3, #15
    7c2a:	18fb      	adds	r3, r7, r3
    7c2c:	1cfa      	adds	r2, r7, #3
    7c2e:	7812      	ldrb	r2, [r2, #0]
    7c30:	210f      	movs	r1, #15
    7c32:	400a      	ands	r2, r1
    7c34:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    7c36:	230f      	movs	r3, #15
    7c38:	18fb      	adds	r3, r7, r3
    7c3a:	781a      	ldrb	r2, [r3, #0]
    7c3c:	230f      	movs	r3, #15
    7c3e:	18fb      	adds	r3, r7, r3
    7c40:	7819      	ldrb	r1, [r3, #0]
    7c42:	6878      	ldr	r0, [r7, #4]
    7c44:	23b0      	movs	r3, #176	; 0xb0
    7c46:	005b      	lsls	r3, r3, #1
    7c48:	1841      	adds	r1, r0, r1
    7c4a:	18cb      	adds	r3, r1, r3
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	b25b      	sxtb	r3, r3
    7c50:	1cb9      	adds	r1, r7, #2
    7c52:	7809      	ldrb	r1, [r1, #0]
    7c54:	4856      	ldr	r0, [pc, #344]	; (7db0 <usb_device_endpoint_disable_callback+0x1a0>)
    7c56:	5c41      	ldrb	r1, [r0, r1]
    7c58:	b249      	sxtb	r1, r1
    7c5a:	43c9      	mvns	r1, r1
    7c5c:	b249      	sxtb	r1, r1
    7c5e:	400b      	ands	r3, r1
    7c60:	b25b      	sxtb	r3, r3
    7c62:	b2d8      	uxtb	r0, r3
    7c64:	6879      	ldr	r1, [r7, #4]
    7c66:	23b0      	movs	r3, #176	; 0xb0
    7c68:	005b      	lsls	r3, r3, #1
    7c6a:	188a      	adds	r2, r1, r2
    7c6c:	18d3      	adds	r3, r2, r3
    7c6e:	1c02      	adds	r2, r0, #0
    7c70:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    7c72:	1cbb      	adds	r3, r7, #2
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	2b00      	cmp	r3, #0
    7c78:	d12f      	bne.n	7cda <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    7c7a:	230f      	movs	r3, #15
    7c7c:	18fb      	adds	r3, r7, r3
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	2b00      	cmp	r3, #0
    7c82:	d10c      	bne.n	7c9e <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    7c84:	687b      	ldr	r3, [r7, #4]
    7c86:	6819      	ldr	r1, [r3, #0]
    7c88:	230f      	movs	r3, #15
    7c8a:	18fb      	adds	r3, r7, r3
    7c8c:	781a      	ldrb	r2, [r3, #0]
    7c8e:	2384      	movs	r3, #132	; 0x84
    7c90:	005b      	lsls	r3, r3, #1
    7c92:	0152      	lsls	r2, r2, #5
    7c94:	188a      	adds	r2, r1, r2
    7c96:	18d3      	adds	r3, r2, r3
    7c98:	2203      	movs	r2, #3
    7c9a:	701a      	strb	r2, [r3, #0]
    7c9c:	e01d      	b.n	7cda <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    7c9e:	1cfb      	adds	r3, r7, #3
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	b25b      	sxtb	r3, r3
    7ca4:	2b00      	cmp	r3, #0
    7ca6:	da0c      	bge.n	7cc2 <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	6819      	ldr	r1, [r3, #0]
    7cac:	230f      	movs	r3, #15
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	781a      	ldrb	r2, [r3, #0]
    7cb2:	2384      	movs	r3, #132	; 0x84
    7cb4:	005b      	lsls	r3, r3, #1
    7cb6:	0152      	lsls	r2, r2, #5
    7cb8:	188a      	adds	r2, r1, r2
    7cba:	18d3      	adds	r3, r2, r3
    7cbc:	2202      	movs	r2, #2
    7cbe:	701a      	strb	r2, [r3, #0]
    7cc0:	e00b      	b.n	7cda <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    7cc2:	687b      	ldr	r3, [r7, #4]
    7cc4:	6819      	ldr	r1, [r3, #0]
    7cc6:	230f      	movs	r3, #15
    7cc8:	18fb      	adds	r3, r7, r3
    7cca:	781a      	ldrb	r2, [r3, #0]
    7ccc:	2384      	movs	r3, #132	; 0x84
    7cce:	005b      	lsls	r3, r3, #1
    7cd0:	0152      	lsls	r2, r2, #5
    7cd2:	188a      	adds	r2, r1, r2
    7cd4:	18d3      	adds	r3, r2, r3
    7cd6:	2201      	movs	r2, #1
    7cd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    7cda:	1cbb      	adds	r3, r7, #2
    7cdc:	781b      	ldrb	r3, [r3, #0]
    7cde:	2b01      	cmp	r3, #1
    7ce0:	d12f      	bne.n	7d42 <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    7ce2:	230f      	movs	r3, #15
    7ce4:	18fb      	adds	r3, r7, r3
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d10c      	bne.n	7d06 <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	6819      	ldr	r1, [r3, #0]
    7cf0:	230f      	movs	r3, #15
    7cf2:	18fb      	adds	r3, r7, r3
    7cf4:	781a      	ldrb	r2, [r3, #0]
    7cf6:	2384      	movs	r3, #132	; 0x84
    7cf8:	005b      	lsls	r3, r3, #1
    7cfa:	0152      	lsls	r2, r2, #5
    7cfc:	188a      	adds	r2, r1, r2
    7cfe:	18d3      	adds	r3, r2, r3
    7d00:	220c      	movs	r2, #12
    7d02:	701a      	strb	r2, [r3, #0]
    7d04:	e01d      	b.n	7d42 <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    7d06:	1cfb      	adds	r3, r7, #3
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	b25b      	sxtb	r3, r3
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	da0c      	bge.n	7d2a <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	6819      	ldr	r1, [r3, #0]
    7d14:	230f      	movs	r3, #15
    7d16:	18fb      	adds	r3, r7, r3
    7d18:	781a      	ldrb	r2, [r3, #0]
    7d1a:	2384      	movs	r3, #132	; 0x84
    7d1c:	005b      	lsls	r3, r3, #1
    7d1e:	0152      	lsls	r2, r2, #5
    7d20:	188a      	adds	r2, r1, r2
    7d22:	18d3      	adds	r3, r2, r3
    7d24:	2208      	movs	r2, #8
    7d26:	701a      	strb	r2, [r3, #0]
    7d28:	e00b      	b.n	7d42 <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	6819      	ldr	r1, [r3, #0]
    7d2e:	230f      	movs	r3, #15
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	781a      	ldrb	r2, [r3, #0]
    7d34:	2384      	movs	r3, #132	; 0x84
    7d36:	005b      	lsls	r3, r3, #1
    7d38:	0152      	lsls	r2, r2, #5
    7d3a:	188a      	adds	r2, r1, r2
    7d3c:	18d3      	adds	r3, r2, r3
    7d3e:	2204      	movs	r2, #4
    7d40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    7d42:	1cbb      	adds	r3, r7, #2
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	2b02      	cmp	r3, #2
    7d48:	d10b      	bne.n	7d62 <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	6819      	ldr	r1, [r3, #0]
    7d4e:	230f      	movs	r3, #15
    7d50:	18fb      	adds	r3, r7, r3
    7d52:	781a      	ldrb	r2, [r3, #0]
    7d54:	2384      	movs	r3, #132	; 0x84
    7d56:	005b      	lsls	r3, r3, #1
    7d58:	0152      	lsls	r2, r2, #5
    7d5a:	188a      	adds	r2, r1, r2
    7d5c:	18d3      	adds	r3, r2, r3
    7d5e:	2210      	movs	r2, #16
    7d60:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    7d62:	1cbb      	adds	r3, r7, #2
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	2b03      	cmp	r3, #3
    7d68:	d11d      	bne.n	7da6 <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    7d6a:	1cfb      	adds	r3, r7, #3
    7d6c:	781b      	ldrb	r3, [r3, #0]
    7d6e:	b25b      	sxtb	r3, r3
    7d70:	2b00      	cmp	r3, #0
    7d72:	da0c      	bge.n	7d8e <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	6819      	ldr	r1, [r3, #0]
    7d78:	230f      	movs	r3, #15
    7d7a:	18fb      	adds	r3, r7, r3
    7d7c:	781a      	ldrb	r2, [r3, #0]
    7d7e:	2384      	movs	r3, #132	; 0x84
    7d80:	005b      	lsls	r3, r3, #1
    7d82:	0152      	lsls	r2, r2, #5
    7d84:	188a      	adds	r2, r1, r2
    7d86:	18d3      	adds	r3, r2, r3
    7d88:	2240      	movs	r2, #64	; 0x40
    7d8a:	701a      	strb	r2, [r3, #0]
    7d8c:	e00b      	b.n	7da6 <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    7d8e:	687b      	ldr	r3, [r7, #4]
    7d90:	6819      	ldr	r1, [r3, #0]
    7d92:	230f      	movs	r3, #15
    7d94:	18fb      	adds	r3, r7, r3
    7d96:	781a      	ldrb	r2, [r3, #0]
    7d98:	2384      	movs	r3, #132	; 0x84
    7d9a:	005b      	lsls	r3, r3, #1
    7d9c:	0152      	lsls	r2, r2, #5
    7d9e:	188a      	adds	r2, r1, r2
    7da0:	18d3      	adds	r3, r2, r3
    7da2:	2220      	movs	r2, #32
    7da4:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    7da6:	2300      	movs	r3, #0
}
    7da8:	0018      	movs	r0, r3
    7daa:	46bd      	mov	sp, r7
    7dac:	b004      	add	sp, #16
    7dae:	bd80      	pop	{r7, pc}
    7db0:	00009ea4 	.word	0x00009ea4

00007db4 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    7db4:	b580      	push	{r7, lr}
    7db6:	b082      	sub	sp, #8
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	2200      	movs	r2, #0
    7dc0:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    7dc2:	687b      	ldr	r3, [r7, #4]
    7dc4:	2200      	movs	r2, #0
    7dc6:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	2200      	movs	r2, #0
    7dcc:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    7dce:	687b      	ldr	r3, [r7, #4]
    7dd0:	2201      	movs	r2, #1
    7dd2:	70da      	strb	r2, [r3, #3]
}
    7dd4:	46c0      	nop			; (mov r8, r8)
    7dd6:	46bd      	mov	sp, r7
    7dd8:	b002      	add	sp, #8
    7dda:	bd80      	pop	{r7, pc}

00007ddc <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    7ddc:	b590      	push	{r4, r7, lr}
    7dde:	b085      	sub	sp, #20
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
    7de4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    7de6:	683b      	ldr	r3, [r7, #0]
    7de8:	781a      	ldrb	r2, [r3, #0]
    7dea:	230f      	movs	r3, #15
    7dec:	18fb      	adds	r3, r7, r3
    7dee:	210f      	movs	r1, #15
    7df0:	400a      	ands	r2, r1
    7df2:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    7df4:	683b      	ldr	r3, [r7, #0]
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	b25b      	sxtb	r3, r3
    7dfa:	b2db      	uxtb	r3, r3
    7dfc:	09db      	lsrs	r3, r3, #7
    7dfe:	b2da      	uxtb	r2, r3
    7e00:	230e      	movs	r3, #14
    7e02:	18fb      	adds	r3, r7, r3
    7e04:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    7e06:	683b      	ldr	r3, [r7, #0]
    7e08:	78db      	ldrb	r3, [r3, #3]
    7e0a:	2b04      	cmp	r3, #4
    7e0c:	d900      	bls.n	7e10 <usb_device_endpoint_set_config+0x34>
    7e0e:	e200      	b.n	8212 <usb_device_endpoint_set_config+0x436>
    7e10:	009a      	lsls	r2, r3, #2
    7e12:	4be4      	ldr	r3, [pc, #912]	; (81a4 <usb_device_endpoint_set_config+0x3c8>)
    7e14:	18d3      	adds	r3, r2, r3
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    7e1a:	687b      	ldr	r3, [r7, #4]
    7e1c:	681b      	ldr	r3, [r3, #0]
    7e1e:	220f      	movs	r2, #15
    7e20:	18ba      	adds	r2, r7, r2
    7e22:	7812      	ldrb	r2, [r2, #0]
    7e24:	3208      	adds	r2, #8
    7e26:	0152      	lsls	r2, r2, #5
    7e28:	2100      	movs	r1, #0
    7e2a:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    7e2c:	2300      	movs	r3, #0
    7e2e:	e249      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    7e30:	687b      	ldr	r3, [r7, #4]
    7e32:	681b      	ldr	r3, [r3, #0]
    7e34:	220f      	movs	r2, #15
    7e36:	18ba      	adds	r2, r7, r2
    7e38:	7812      	ldrb	r2, [r2, #0]
    7e3a:	3208      	adds	r2, #8
    7e3c:	0152      	lsls	r2, r2, #5
    7e3e:	5cd3      	ldrb	r3, [r2, r3]
    7e40:	b2db      	uxtb	r3, r3
    7e42:	001a      	movs	r2, r3
    7e44:	2307      	movs	r3, #7
    7e46:	4013      	ands	r3, r2
    7e48:	d130      	bne.n	7eac <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    7e4a:	687b      	ldr	r3, [r7, #4]
    7e4c:	681b      	ldr	r3, [r3, #0]
    7e4e:	220f      	movs	r2, #15
    7e50:	18ba      	adds	r2, r7, r2
    7e52:	7812      	ldrb	r2, [r2, #0]
    7e54:	3208      	adds	r2, #8
    7e56:	0152      	lsls	r2, r2, #5
    7e58:	5cd3      	ldrb	r3, [r2, r3]
    7e5a:	b2db      	uxtb	r3, r3
    7e5c:	001a      	movs	r2, r3
    7e5e:	2370      	movs	r3, #112	; 0x70
    7e60:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    7e62:	d123      	bne.n	7eac <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	681b      	ldr	r3, [r3, #0]
    7e68:	220f      	movs	r2, #15
    7e6a:	18ba      	adds	r2, r7, r2
    7e6c:	7812      	ldrb	r2, [r2, #0]
    7e6e:	3208      	adds	r2, #8
    7e70:	0152      	lsls	r2, r2, #5
    7e72:	2111      	movs	r1, #17
    7e74:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	681a      	ldr	r2, [r3, #0]
    7e7a:	230f      	movs	r3, #15
    7e7c:	18fb      	adds	r3, r7, r3
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	3308      	adds	r3, #8
    7e82:	015b      	lsls	r3, r3, #5
    7e84:	18d3      	adds	r3, r2, r3
    7e86:	3305      	adds	r3, #5
    7e88:	2240      	movs	r2, #64	; 0x40
    7e8a:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7e8c:	687b      	ldr	r3, [r7, #4]
    7e8e:	681a      	ldr	r2, [r3, #0]
    7e90:	230f      	movs	r3, #15
    7e92:	18fb      	adds	r3, r7, r3
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	3308      	adds	r3, #8
    7e98:	015b      	lsls	r3, r3, #5
    7e9a:	18d3      	adds	r3, r2, r3
    7e9c:	3304      	adds	r3, #4
    7e9e:	2280      	movs	r2, #128	; 0x80
    7ea0:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    7ea2:	683b      	ldr	r3, [r7, #0]
    7ea4:	789b      	ldrb	r3, [r3, #2]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d102      	bne.n	7eb0 <usb_device_endpoint_set_config+0xd4>
    7eaa:	e028      	b.n	7efe <usb_device_endpoint_set_config+0x122>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    7eac:	231c      	movs	r3, #28
    7eae:	e209      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7eb0:	230f      	movs	r3, #15
    7eb2:	18fb      	adds	r3, r7, r3
    7eb4:	7818      	ldrb	r0, [r3, #0]
    7eb6:	230f      	movs	r3, #15
    7eb8:	18fb      	adds	r3, r7, r3
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	4aba      	ldr	r2, [pc, #744]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7ebe:	015b      	lsls	r3, r3, #5
    7ec0:	18d3      	adds	r3, r2, r3
    7ec2:	3304      	adds	r3, #4
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	2280      	movs	r2, #128	; 0x80
    7ec8:	0612      	lsls	r2, r2, #24
    7eca:	431a      	orrs	r2, r3
    7ecc:	49b6      	ldr	r1, [pc, #728]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7ece:	0143      	lsls	r3, r0, #5
    7ed0:	18cb      	adds	r3, r1, r3
    7ed2:	3304      	adds	r3, #4
    7ed4:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7ed6:	230f      	movs	r3, #15
    7ed8:	18fb      	adds	r3, r7, r3
    7eda:	7818      	ldrb	r0, [r3, #0]
    7edc:	230f      	movs	r3, #15
    7ede:	18fb      	adds	r3, r7, r3
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	4ab1      	ldr	r2, [pc, #708]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7ee4:	015b      	lsls	r3, r3, #5
    7ee6:	18d3      	adds	r3, r2, r3
    7ee8:	3314      	adds	r3, #20
    7eea:	681b      	ldr	r3, [r3, #0]
    7eec:	2280      	movs	r2, #128	; 0x80
    7eee:	0612      	lsls	r2, r2, #24
    7ef0:	431a      	orrs	r2, r3
    7ef2:	49ad      	ldr	r1, [pc, #692]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7ef4:	0143      	lsls	r3, r0, #5
    7ef6:	18cb      	adds	r3, r1, r3
    7ef8:	3314      	adds	r3, #20
    7efa:	601a      	str	r2, [r3, #0]
    7efc:	e023      	b.n	7f46 <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7efe:	230f      	movs	r3, #15
    7f00:	18fb      	adds	r3, r7, r3
    7f02:	7818      	ldrb	r0, [r3, #0]
    7f04:	230f      	movs	r3, #15
    7f06:	18fb      	adds	r3, r7, r3
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	4aa7      	ldr	r2, [pc, #668]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f0c:	015b      	lsls	r3, r3, #5
    7f0e:	18d3      	adds	r3, r2, r3
    7f10:	3304      	adds	r3, #4
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	005b      	lsls	r3, r3, #1
    7f16:	085a      	lsrs	r2, r3, #1
    7f18:	49a3      	ldr	r1, [pc, #652]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f1a:	0143      	lsls	r3, r0, #5
    7f1c:	18cb      	adds	r3, r1, r3
    7f1e:	3304      	adds	r3, #4
    7f20:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7f22:	230f      	movs	r3, #15
    7f24:	18fb      	adds	r3, r7, r3
    7f26:	7818      	ldrb	r0, [r3, #0]
    7f28:	230f      	movs	r3, #15
    7f2a:	18fb      	adds	r3, r7, r3
    7f2c:	781b      	ldrb	r3, [r3, #0]
    7f2e:	4a9e      	ldr	r2, [pc, #632]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f30:	015b      	lsls	r3, r3, #5
    7f32:	18d3      	adds	r3, r2, r3
    7f34:	3314      	adds	r3, #20
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	005b      	lsls	r3, r3, #1
    7f3a:	085a      	lsrs	r2, r3, #1
    7f3c:	499a      	ldr	r1, [pc, #616]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f3e:	0143      	lsls	r3, r0, #5
    7f40:	18cb      	adds	r3, r1, r3
    7f42:	3314      	adds	r3, #20
    7f44:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7f46:	230f      	movs	r3, #15
    7f48:	18fb      	adds	r3, r7, r3
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	683a      	ldr	r2, [r7, #0]
    7f4e:	7852      	ldrb	r2, [r2, #1]
    7f50:	1c11      	adds	r1, r2, #0
    7f52:	2207      	movs	r2, #7
    7f54:	400a      	ands	r2, r1
    7f56:	b2d1      	uxtb	r1, r2
    7f58:	4a93      	ldr	r2, [pc, #588]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f5a:	015b      	lsls	r3, r3, #5
    7f5c:	18d3      	adds	r3, r2, r3
    7f5e:	685a      	ldr	r2, [r3, #4]
    7f60:	2007      	movs	r0, #7
    7f62:	4001      	ands	r1, r0
    7f64:	0709      	lsls	r1, r1, #28
    7f66:	4891      	ldr	r0, [pc, #580]	; (81ac <usb_device_endpoint_set_config+0x3d0>)
    7f68:	4002      	ands	r2, r0
    7f6a:	430a      	orrs	r2, r1
    7f6c:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7f6e:	230f      	movs	r3, #15
    7f70:	18fb      	adds	r3, r7, r3
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	683a      	ldr	r2, [r7, #0]
    7f76:	7852      	ldrb	r2, [r2, #1]
    7f78:	1c11      	adds	r1, r2, #0
    7f7a:	2207      	movs	r2, #7
    7f7c:	400a      	ands	r2, r1
    7f7e:	b2d1      	uxtb	r1, r2
    7f80:	4a89      	ldr	r2, [pc, #548]	; (81a8 <usb_device_endpoint_set_config+0x3cc>)
    7f82:	015b      	lsls	r3, r3, #5
    7f84:	18d3      	adds	r3, r2, r3
    7f86:	3310      	adds	r3, #16
    7f88:	685a      	ldr	r2, [r3, #4]
    7f8a:	2007      	movs	r0, #7
    7f8c:	4001      	ands	r1, r0
    7f8e:	0709      	lsls	r1, r1, #28
    7f90:	4886      	ldr	r0, [pc, #536]	; (81ac <usb_device_endpoint_set_config+0x3d0>)
    7f92:	4002      	ands	r2, r0
    7f94:	430a      	orrs	r2, r1
    7f96:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    7f98:	2300      	movs	r3, #0
    7f9a:	e193      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    7f9c:	230e      	movs	r3, #14
    7f9e:	18fb      	adds	r3, r7, r3
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d030      	beq.n	8008 <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	681b      	ldr	r3, [r3, #0]
    7faa:	220f      	movs	r2, #15
    7fac:	18ba      	adds	r2, r7, r2
    7fae:	7812      	ldrb	r2, [r2, #0]
    7fb0:	3208      	adds	r2, #8
    7fb2:	0152      	lsls	r2, r2, #5
    7fb4:	5cd3      	ldrb	r3, [r2, r3]
    7fb6:	b2db      	uxtb	r3, r3
    7fb8:	001a      	movs	r2, r3
    7fba:	2370      	movs	r3, #112	; 0x70
    7fbc:	4013      	ands	r3, r2
    7fbe:	d121      	bne.n	8004 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	681a      	ldr	r2, [r3, #0]
    7fc4:	230f      	movs	r3, #15
    7fc6:	18fb      	adds	r3, r7, r3
    7fc8:	7819      	ldrb	r1, [r3, #0]
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	681b      	ldr	r3, [r3, #0]
    7fce:	200f      	movs	r0, #15
    7fd0:	1838      	adds	r0, r7, r0
    7fd2:	7800      	ldrb	r0, [r0, #0]
    7fd4:	3008      	adds	r0, #8
    7fd6:	0140      	lsls	r0, r0, #5
    7fd8:	5cc3      	ldrb	r3, [r0, r3]
    7fda:	b2db      	uxtb	r3, r3
    7fdc:	2020      	movs	r0, #32
    7fde:	4303      	orrs	r3, r0
    7fe0:	b2d8      	uxtb	r0, r3
    7fe2:	000b      	movs	r3, r1
    7fe4:	3308      	adds	r3, #8
    7fe6:	015b      	lsls	r3, r3, #5
    7fe8:	1c01      	adds	r1, r0, #0
    7fea:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681a      	ldr	r2, [r3, #0]
    7ff0:	230f      	movs	r3, #15
    7ff2:	18fb      	adds	r3, r7, r3
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	3308      	adds	r3, #8
    7ff8:	015b      	lsls	r3, r3, #5
    7ffa:	18d3      	adds	r3, r2, r3
    7ffc:	3304      	adds	r3, #4
    7ffe:	2280      	movs	r2, #128	; 0x80
    8000:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    8002:	e107      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    8004:	231c      	movs	r3, #28
    8006:	e15d      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	220f      	movs	r2, #15
    800e:	18ba      	adds	r2, r7, r2
    8010:	7812      	ldrb	r2, [r2, #0]
    8012:	3208      	adds	r2, #8
    8014:	0152      	lsls	r2, r2, #5
    8016:	5cd3      	ldrb	r3, [r2, r3]
    8018:	b2db      	uxtb	r3, r3
    801a:	001a      	movs	r2, r3
    801c:	2307      	movs	r3, #7
    801e:	4013      	ands	r3, r2
    8020:	d121      	bne.n	8066 <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    8022:	687b      	ldr	r3, [r7, #4]
    8024:	681a      	ldr	r2, [r3, #0]
    8026:	230f      	movs	r3, #15
    8028:	18fb      	adds	r3, r7, r3
    802a:	7819      	ldrb	r1, [r3, #0]
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	200f      	movs	r0, #15
    8032:	1838      	adds	r0, r7, r0
    8034:	7800      	ldrb	r0, [r0, #0]
    8036:	3008      	adds	r0, #8
    8038:	0140      	lsls	r0, r0, #5
    803a:	5cc3      	ldrb	r3, [r0, r3]
    803c:	b2db      	uxtb	r3, r3
    803e:	2002      	movs	r0, #2
    8040:	4303      	orrs	r3, r0
    8042:	b2d8      	uxtb	r0, r3
    8044:	000b      	movs	r3, r1
    8046:	3308      	adds	r3, #8
    8048:	015b      	lsls	r3, r3, #5
    804a:	1c01      	adds	r1, r0, #0
    804c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    804e:	687b      	ldr	r3, [r7, #4]
    8050:	681a      	ldr	r2, [r3, #0]
    8052:	230f      	movs	r3, #15
    8054:	18fb      	adds	r3, r7, r3
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	3308      	adds	r3, #8
    805a:	015b      	lsls	r3, r3, #5
    805c:	18d3      	adds	r3, r2, r3
    805e:	3305      	adds	r3, #5
    8060:	2240      	movs	r2, #64	; 0x40
    8062:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    8064:	e0d6      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    8066:	231c      	movs	r3, #28
    8068:	e12c      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    806a:	230e      	movs	r3, #14
    806c:	18fb      	adds	r3, r7, r3
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	2b00      	cmp	r3, #0
    8072:	d030      	beq.n	80d6 <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	681b      	ldr	r3, [r3, #0]
    8078:	220f      	movs	r2, #15
    807a:	18ba      	adds	r2, r7, r2
    807c:	7812      	ldrb	r2, [r2, #0]
    807e:	3208      	adds	r2, #8
    8080:	0152      	lsls	r2, r2, #5
    8082:	5cd3      	ldrb	r3, [r2, r3]
    8084:	b2db      	uxtb	r3, r3
    8086:	001a      	movs	r2, r3
    8088:	2370      	movs	r3, #112	; 0x70
    808a:	4013      	ands	r3, r2
    808c:	d121      	bne.n	80d2 <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	681a      	ldr	r2, [r3, #0]
    8092:	230f      	movs	r3, #15
    8094:	18fb      	adds	r3, r7, r3
    8096:	7819      	ldrb	r1, [r3, #0]
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	681b      	ldr	r3, [r3, #0]
    809c:	200f      	movs	r0, #15
    809e:	1838      	adds	r0, r7, r0
    80a0:	7800      	ldrb	r0, [r0, #0]
    80a2:	3008      	adds	r0, #8
    80a4:	0140      	lsls	r0, r0, #5
    80a6:	5cc3      	ldrb	r3, [r0, r3]
    80a8:	b2db      	uxtb	r3, r3
    80aa:	2030      	movs	r0, #48	; 0x30
    80ac:	4303      	orrs	r3, r0
    80ae:	b2d8      	uxtb	r0, r3
    80b0:	000b      	movs	r3, r1
    80b2:	3308      	adds	r3, #8
    80b4:	015b      	lsls	r3, r3, #5
    80b6:	1c01      	adds	r1, r0, #0
    80b8:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    80ba:	687b      	ldr	r3, [r7, #4]
    80bc:	681a      	ldr	r2, [r3, #0]
    80be:	230f      	movs	r3, #15
    80c0:	18fb      	adds	r3, r7, r3
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	3308      	adds	r3, #8
    80c6:	015b      	lsls	r3, r3, #5
    80c8:	18d3      	adds	r3, r2, r3
    80ca:	3304      	adds	r3, #4
    80cc:	2280      	movs	r2, #128	; 0x80
    80ce:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    80d0:	e0a0      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    80d2:	231c      	movs	r3, #28
    80d4:	e0f6      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    80d6:	687b      	ldr	r3, [r7, #4]
    80d8:	681b      	ldr	r3, [r3, #0]
    80da:	220f      	movs	r2, #15
    80dc:	18ba      	adds	r2, r7, r2
    80de:	7812      	ldrb	r2, [r2, #0]
    80e0:	3208      	adds	r2, #8
    80e2:	0152      	lsls	r2, r2, #5
    80e4:	5cd3      	ldrb	r3, [r2, r3]
    80e6:	b2db      	uxtb	r3, r3
    80e8:	001a      	movs	r2, r3
    80ea:	2307      	movs	r3, #7
    80ec:	4013      	ands	r3, r2
    80ee:	d121      	bne.n	8134 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	681a      	ldr	r2, [r3, #0]
    80f4:	230f      	movs	r3, #15
    80f6:	18fb      	adds	r3, r7, r3
    80f8:	7819      	ldrb	r1, [r3, #0]
    80fa:	687b      	ldr	r3, [r7, #4]
    80fc:	681b      	ldr	r3, [r3, #0]
    80fe:	200f      	movs	r0, #15
    8100:	1838      	adds	r0, r7, r0
    8102:	7800      	ldrb	r0, [r0, #0]
    8104:	3008      	adds	r0, #8
    8106:	0140      	lsls	r0, r0, #5
    8108:	5cc3      	ldrb	r3, [r0, r3]
    810a:	b2db      	uxtb	r3, r3
    810c:	2003      	movs	r0, #3
    810e:	4303      	orrs	r3, r0
    8110:	b2d8      	uxtb	r0, r3
    8112:	000b      	movs	r3, r1
    8114:	3308      	adds	r3, #8
    8116:	015b      	lsls	r3, r3, #5
    8118:	1c01      	adds	r1, r0, #0
    811a:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	681a      	ldr	r2, [r3, #0]
    8120:	230f      	movs	r3, #15
    8122:	18fb      	adds	r3, r7, r3
    8124:	781b      	ldrb	r3, [r3, #0]
    8126:	3308      	adds	r3, #8
    8128:	015b      	lsls	r3, r3, #5
    812a:	18d3      	adds	r3, r2, r3
    812c:	3305      	adds	r3, #5
    812e:	2240      	movs	r2, #64	; 0x40
    8130:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    8132:	e06f      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    8134:	231c      	movs	r3, #28
    8136:	e0c5      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    8138:	230e      	movs	r3, #14
    813a:	18fb      	adds	r3, r7, r3
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	2b00      	cmp	r3, #0
    8140:	d036      	beq.n	81b0 <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8142:	687b      	ldr	r3, [r7, #4]
    8144:	681b      	ldr	r3, [r3, #0]
    8146:	220f      	movs	r2, #15
    8148:	18ba      	adds	r2, r7, r2
    814a:	7812      	ldrb	r2, [r2, #0]
    814c:	3208      	adds	r2, #8
    814e:	0152      	lsls	r2, r2, #5
    8150:	5cd3      	ldrb	r3, [r2, r3]
    8152:	b2db      	uxtb	r3, r3
    8154:	001a      	movs	r2, r3
    8156:	2370      	movs	r3, #112	; 0x70
    8158:	4013      	ands	r3, r2
    815a:	d121      	bne.n	81a0 <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	681a      	ldr	r2, [r3, #0]
    8160:	230f      	movs	r3, #15
    8162:	18fb      	adds	r3, r7, r3
    8164:	7819      	ldrb	r1, [r3, #0]
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	681b      	ldr	r3, [r3, #0]
    816a:	200f      	movs	r0, #15
    816c:	1838      	adds	r0, r7, r0
    816e:	7800      	ldrb	r0, [r0, #0]
    8170:	3008      	adds	r0, #8
    8172:	0140      	lsls	r0, r0, #5
    8174:	5cc3      	ldrb	r3, [r0, r3]
    8176:	b2db      	uxtb	r3, r3
    8178:	2040      	movs	r0, #64	; 0x40
    817a:	4303      	orrs	r3, r0
    817c:	b2d8      	uxtb	r0, r3
    817e:	000b      	movs	r3, r1
    8180:	3308      	adds	r3, #8
    8182:	015b      	lsls	r3, r3, #5
    8184:	1c01      	adds	r1, r0, #0
    8186:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	681a      	ldr	r2, [r3, #0]
    818c:	230f      	movs	r3, #15
    818e:	18fb      	adds	r3, r7, r3
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	3308      	adds	r3, #8
    8194:	015b      	lsls	r3, r3, #5
    8196:	18d3      	adds	r3, r2, r3
    8198:	3304      	adds	r3, #4
    819a:	2280      	movs	r2, #128	; 0x80
    819c:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    819e:	e039      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    81a0:	231c      	movs	r3, #28
    81a2:	e08f      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
    81a4:	00009ea8 	.word	0x00009ea8
    81a8:	20000500 	.word	0x20000500
    81ac:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	220f      	movs	r2, #15
    81b6:	18ba      	adds	r2, r7, r2
    81b8:	7812      	ldrb	r2, [r2, #0]
    81ba:	3208      	adds	r2, #8
    81bc:	0152      	lsls	r2, r2, #5
    81be:	5cd3      	ldrb	r3, [r2, r3]
    81c0:	b2db      	uxtb	r3, r3
    81c2:	001a      	movs	r2, r3
    81c4:	2307      	movs	r3, #7
    81c6:	4013      	ands	r3, r2
    81c8:	d121      	bne.n	820e <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	681a      	ldr	r2, [r3, #0]
    81ce:	230f      	movs	r3, #15
    81d0:	18fb      	adds	r3, r7, r3
    81d2:	7819      	ldrb	r1, [r3, #0]
    81d4:	687b      	ldr	r3, [r7, #4]
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	200f      	movs	r0, #15
    81da:	1838      	adds	r0, r7, r0
    81dc:	7800      	ldrb	r0, [r0, #0]
    81de:	3008      	adds	r0, #8
    81e0:	0140      	lsls	r0, r0, #5
    81e2:	5cc3      	ldrb	r3, [r0, r3]
    81e4:	b2db      	uxtb	r3, r3
    81e6:	2004      	movs	r0, #4
    81e8:	4303      	orrs	r3, r0
    81ea:	b2d8      	uxtb	r0, r3
    81ec:	000b      	movs	r3, r1
    81ee:	3308      	adds	r3, #8
    81f0:	015b      	lsls	r3, r3, #5
    81f2:	1c01      	adds	r1, r0, #0
    81f4:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    81f6:	687b      	ldr	r3, [r7, #4]
    81f8:	681a      	ldr	r2, [r3, #0]
    81fa:	230f      	movs	r3, #15
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	3308      	adds	r3, #8
    8202:	015b      	lsls	r3, r3, #5
    8204:	18d3      	adds	r3, r2, r3
    8206:	3305      	adds	r3, #5
    8208:	2240      	movs	r2, #64	; 0x40
    820a:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    820c:	e002      	b.n	8214 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    820e:	231c      	movs	r3, #28
    8210:	e058      	b.n	82c4 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		default:
			break;
    8212:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8214:	230f      	movs	r3, #15
    8216:	18fb      	adds	r3, r7, r3
    8218:	7818      	ldrb	r0, [r3, #0]
    821a:	230e      	movs	r3, #14
    821c:	18fb      	adds	r3, r7, r3
    821e:	781b      	ldrb	r3, [r3, #0]
    8220:	683a      	ldr	r2, [r7, #0]
    8222:	7852      	ldrb	r2, [r2, #1]
    8224:	1c11      	adds	r1, r2, #0
    8226:	2207      	movs	r2, #7
    8228:	400a      	ands	r2, r1
    822a:	b2d1      	uxtb	r1, r2
    822c:	4a27      	ldr	r2, [pc, #156]	; (82cc <usb_device_endpoint_set_config+0x4f0>)
    822e:	0040      	lsls	r0, r0, #1
    8230:	18c3      	adds	r3, r0, r3
    8232:	011b      	lsls	r3, r3, #4
    8234:	18d3      	adds	r3, r2, r3
    8236:	685a      	ldr	r2, [r3, #4]
    8238:	2007      	movs	r0, #7
    823a:	4001      	ands	r1, r0
    823c:	0709      	lsls	r1, r1, #28
    823e:	4824      	ldr	r0, [pc, #144]	; (82d0 <usb_device_endpoint_set_config+0x4f4>)
    8240:	4002      	ands	r2, r0
    8242:	430a      	orrs	r2, r1
    8244:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    8246:	683b      	ldr	r3, [r7, #0]
    8248:	789b      	ldrb	r3, [r3, #2]
    824a:	2b00      	cmp	r3, #0
    824c:	d01d      	beq.n	828a <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    824e:	230f      	movs	r3, #15
    8250:	18fb      	adds	r3, r7, r3
    8252:	781c      	ldrb	r4, [r3, #0]
    8254:	230e      	movs	r3, #14
    8256:	18fb      	adds	r3, r7, r3
    8258:	7818      	ldrb	r0, [r3, #0]
    825a:	230f      	movs	r3, #15
    825c:	18fb      	adds	r3, r7, r3
    825e:	7819      	ldrb	r1, [r3, #0]
    8260:	230e      	movs	r3, #14
    8262:	18fb      	adds	r3, r7, r3
    8264:	781b      	ldrb	r3, [r3, #0]
    8266:	4a19      	ldr	r2, [pc, #100]	; (82cc <usb_device_endpoint_set_config+0x4f0>)
    8268:	0049      	lsls	r1, r1, #1
    826a:	18cb      	adds	r3, r1, r3
    826c:	011b      	lsls	r3, r3, #4
    826e:	18d3      	adds	r3, r2, r3
    8270:	3304      	adds	r3, #4
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	2280      	movs	r2, #128	; 0x80
    8276:	0612      	lsls	r2, r2, #24
    8278:	431a      	orrs	r2, r3
    827a:	4914      	ldr	r1, [pc, #80]	; (82cc <usb_device_endpoint_set_config+0x4f0>)
    827c:	0063      	lsls	r3, r4, #1
    827e:	181b      	adds	r3, r3, r0
    8280:	011b      	lsls	r3, r3, #4
    8282:	18cb      	adds	r3, r1, r3
    8284:	3304      	adds	r3, #4
    8286:	601a      	str	r2, [r3, #0]
    8288:	e01b      	b.n	82c2 <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    828a:	230f      	movs	r3, #15
    828c:	18fb      	adds	r3, r7, r3
    828e:	781c      	ldrb	r4, [r3, #0]
    8290:	230e      	movs	r3, #14
    8292:	18fb      	adds	r3, r7, r3
    8294:	7818      	ldrb	r0, [r3, #0]
    8296:	230f      	movs	r3, #15
    8298:	18fb      	adds	r3, r7, r3
    829a:	7819      	ldrb	r1, [r3, #0]
    829c:	230e      	movs	r3, #14
    829e:	18fb      	adds	r3, r7, r3
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	4a0a      	ldr	r2, [pc, #40]	; (82cc <usb_device_endpoint_set_config+0x4f0>)
    82a4:	0049      	lsls	r1, r1, #1
    82a6:	18cb      	adds	r3, r1, r3
    82a8:	011b      	lsls	r3, r3, #4
    82aa:	18d3      	adds	r3, r2, r3
    82ac:	3304      	adds	r3, #4
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	005b      	lsls	r3, r3, #1
    82b2:	085a      	lsrs	r2, r3, #1
    82b4:	4905      	ldr	r1, [pc, #20]	; (82cc <usb_device_endpoint_set_config+0x4f0>)
    82b6:	0063      	lsls	r3, r4, #1
    82b8:	181b      	adds	r3, r3, r0
    82ba:	011b      	lsls	r3, r3, #4
    82bc:	18cb      	adds	r3, r1, r3
    82be:	3304      	adds	r3, #4
    82c0:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    82c2:	2300      	movs	r3, #0
}
    82c4:	0018      	movs	r0, r3
    82c6:	46bd      	mov	sp, r7
    82c8:	b005      	add	sp, #20
    82ca:	bd90      	pop	{r4, r7, pc}
    82cc:	20000500 	.word	0x20000500
    82d0:	8fffffff 	.word	0x8fffffff

000082d4 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b084      	sub	sp, #16
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
    82dc:	000a      	movs	r2, r1
    82de:	1cfb      	adds	r3, r7, #3
    82e0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    82e2:	230f      	movs	r3, #15
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	1cfa      	adds	r2, r7, #3
    82e8:	7812      	ldrb	r2, [r2, #0]
    82ea:	210f      	movs	r1, #15
    82ec:	400a      	ands	r2, r1
    82ee:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    82f0:	1cfb      	adds	r3, r7, #3
    82f2:	781b      	ldrb	r3, [r3, #0]
    82f4:	b25b      	sxtb	r3, r3
    82f6:	2b00      	cmp	r3, #0
    82f8:	da16      	bge.n	8328 <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    82fa:	687b      	ldr	r3, [r7, #4]
    82fc:	681a      	ldr	r2, [r3, #0]
    82fe:	230f      	movs	r3, #15
    8300:	18fb      	adds	r3, r7, r3
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	3308      	adds	r3, #8
    8306:	015b      	lsls	r3, r3, #5
    8308:	18d3      	adds	r3, r2, r3
    830a:	3304      	adds	r3, #4
    830c:	2280      	movs	r2, #128	; 0x80
    830e:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	681a      	ldr	r2, [r3, #0]
    8314:	230f      	movs	r3, #15
    8316:	18fb      	adds	r3, r7, r3
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	3308      	adds	r3, #8
    831c:	015b      	lsls	r3, r3, #5
    831e:	18d3      	adds	r3, r2, r3
    8320:	3307      	adds	r3, #7
    8322:	2202      	movs	r2, #2
    8324:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    8326:	e015      	b.n	8354 <usb_device_endpoint_abort_job+0x80>
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	681a      	ldr	r2, [r3, #0]
    832c:	230f      	movs	r3, #15
    832e:	18fb      	adds	r3, r7, r3
    8330:	781b      	ldrb	r3, [r3, #0]
    8332:	3308      	adds	r3, #8
    8334:	015b      	lsls	r3, r3, #5
    8336:	18d3      	adds	r3, r2, r3
    8338:	3305      	adds	r3, #5
    833a:	2240      	movs	r2, #64	; 0x40
    833c:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    833e:	687b      	ldr	r3, [r7, #4]
    8340:	681a      	ldr	r2, [r3, #0]
    8342:	230f      	movs	r3, #15
    8344:	18fb      	adds	r3, r7, r3
    8346:	781b      	ldrb	r3, [r3, #0]
    8348:	3308      	adds	r3, #8
    834a:	015b      	lsls	r3, r3, #5
    834c:	18d3      	adds	r3, r2, r3
    834e:	3307      	adds	r3, #7
    8350:	2201      	movs	r2, #1
    8352:	701a      	strb	r2, [r3, #0]
	}
}
    8354:	46c0      	nop			; (mov r8, r8)
    8356:	46bd      	mov	sp, r7
    8358:	b004      	add	sp, #16
    835a:	bd80      	pop	{r7, pc}

0000835c <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    835c:	b580      	push	{r7, lr}
    835e:	b084      	sub	sp, #16
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
    8364:	000a      	movs	r2, r1
    8366:	1cfb      	adds	r3, r7, #3
    8368:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    836a:	230f      	movs	r3, #15
    836c:	18fb      	adds	r3, r7, r3
    836e:	1cfa      	adds	r2, r7, #3
    8370:	7812      	ldrb	r2, [r2, #0]
    8372:	210f      	movs	r1, #15
    8374:	400a      	ands	r2, r1
    8376:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    8378:	1cfb      	adds	r3, r7, #3
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	b25b      	sxtb	r3, r3
    837e:	2b00      	cmp	r3, #0
    8380:	da11      	bge.n	83a6 <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    8382:	687b      	ldr	r3, [r7, #4]
    8384:	681a      	ldr	r2, [r3, #0]
    8386:	230f      	movs	r3, #15
    8388:	18fb      	adds	r3, r7, r3
    838a:	781b      	ldrb	r3, [r3, #0]
    838c:	3308      	adds	r3, #8
    838e:	015b      	lsls	r3, r3, #5
    8390:	18d3      	adds	r3, r2, r3
    8392:	3306      	adds	r3, #6
    8394:	781b      	ldrb	r3, [r3, #0]
    8396:	b2db      	uxtb	r3, r3
    8398:	001a      	movs	r2, r3
    839a:	2320      	movs	r3, #32
    839c:	4013      	ands	r3, r2
    839e:	1e5a      	subs	r2, r3, #1
    83a0:	4193      	sbcs	r3, r2
    83a2:	b2db      	uxtb	r3, r3
    83a4:	e010      	b.n	83c8 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    83a6:	687b      	ldr	r3, [r7, #4]
    83a8:	681a      	ldr	r2, [r3, #0]
    83aa:	230f      	movs	r3, #15
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	781b      	ldrb	r3, [r3, #0]
    83b0:	3308      	adds	r3, #8
    83b2:	015b      	lsls	r3, r3, #5
    83b4:	18d3      	adds	r3, r2, r3
    83b6:	3306      	adds	r3, #6
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	b2db      	uxtb	r3, r3
    83bc:	001a      	movs	r2, r3
    83be:	2310      	movs	r3, #16
    83c0:	4013      	ands	r3, r2
    83c2:	1e5a      	subs	r2, r3, #1
    83c4:	4193      	sbcs	r3, r2
    83c6:	b2db      	uxtb	r3, r3
	}
}
    83c8:	0018      	movs	r0, r3
    83ca:	46bd      	mov	sp, r7
    83cc:	b004      	add	sp, #16
    83ce:	bd80      	pop	{r7, pc}

000083d0 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    83d0:	b580      	push	{r7, lr}
    83d2:	b084      	sub	sp, #16
    83d4:	af00      	add	r7, sp, #0
    83d6:	6078      	str	r0, [r7, #4]
    83d8:	000a      	movs	r2, r1
    83da:	1cfb      	adds	r3, r7, #3
    83dc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    83de:	230f      	movs	r3, #15
    83e0:	18fb      	adds	r3, r7, r3
    83e2:	1cfa      	adds	r2, r7, #3
    83e4:	7812      	ldrb	r2, [r2, #0]
    83e6:	210f      	movs	r1, #15
    83e8:	400a      	ands	r2, r1
    83ea:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    83ec:	1cfb      	adds	r3, r7, #3
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	b25b      	sxtb	r3, r3
    83f2:	2b00      	cmp	r3, #0
    83f4:	da0b      	bge.n	840e <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    83f6:	687b      	ldr	r3, [r7, #4]
    83f8:	681a      	ldr	r2, [r3, #0]
    83fa:	230f      	movs	r3, #15
    83fc:	18fb      	adds	r3, r7, r3
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	3308      	adds	r3, #8
    8402:	015b      	lsls	r3, r3, #5
    8404:	18d3      	adds	r3, r2, r3
    8406:	3305      	adds	r3, #5
    8408:	2220      	movs	r2, #32
    840a:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    840c:	e00a      	b.n	8424 <usb_device_endpoint_set_halt+0x54>

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	681a      	ldr	r2, [r3, #0]
    8412:	230f      	movs	r3, #15
    8414:	18fb      	adds	r3, r7, r3
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	3308      	adds	r3, #8
    841a:	015b      	lsls	r3, r3, #5
    841c:	18d3      	adds	r3, r2, r3
    841e:	3305      	adds	r3, #5
    8420:	2210      	movs	r2, #16
    8422:	701a      	strb	r2, [r3, #0]
	}
}
    8424:	46c0      	nop			; (mov r8, r8)
    8426:	46bd      	mov	sp, r7
    8428:	b004      	add	sp, #16
    842a:	bd80      	pop	{r7, pc}

0000842c <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    842c:	b580      	push	{r7, lr}
    842e:	b084      	sub	sp, #16
    8430:	af00      	add	r7, sp, #0
    8432:	6078      	str	r0, [r7, #4]
    8434:	000a      	movs	r2, r1
    8436:	1cfb      	adds	r3, r7, #3
    8438:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    843a:	230f      	movs	r3, #15
    843c:	18fb      	adds	r3, r7, r3
    843e:	1cfa      	adds	r2, r7, #3
    8440:	7812      	ldrb	r2, [r2, #0]
    8442:	210f      	movs	r1, #15
    8444:	400a      	ands	r2, r1
    8446:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    8448:	1cfb      	adds	r3, r7, #3
    844a:	781b      	ldrb	r3, [r3, #0]
    844c:	b25b      	sxtb	r3, r3
    844e:	2b00      	cmp	r3, #0
    8450:	da3f      	bge.n	84d2 <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	681a      	ldr	r2, [r3, #0]
    8456:	230f      	movs	r3, #15
    8458:	18fb      	adds	r3, r7, r3
    845a:	781b      	ldrb	r3, [r3, #0]
    845c:	3308      	adds	r3, #8
    845e:	015b      	lsls	r3, r3, #5
    8460:	18d3      	adds	r3, r2, r3
    8462:	3306      	adds	r3, #6
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	b2db      	uxtb	r3, r3
    8468:	001a      	movs	r2, r3
    846a:	2320      	movs	r3, #32
    846c:	4013      	ands	r3, r2
    846e:	d06f      	beq.n	8550 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    8470:	687b      	ldr	r3, [r7, #4]
    8472:	681a      	ldr	r2, [r3, #0]
    8474:	230f      	movs	r3, #15
    8476:	18fb      	adds	r3, r7, r3
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	3308      	adds	r3, #8
    847c:	015b      	lsls	r3, r3, #5
    847e:	18d3      	adds	r3, r2, r3
    8480:	3304      	adds	r3, #4
    8482:	2220      	movs	r2, #32
    8484:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	681a      	ldr	r2, [r3, #0]
    848a:	230f      	movs	r3, #15
    848c:	18fb      	adds	r3, r7, r3
    848e:	781b      	ldrb	r3, [r3, #0]
    8490:	3308      	adds	r3, #8
    8492:	015b      	lsls	r3, r3, #5
    8494:	18d3      	adds	r3, r2, r3
    8496:	3307      	adds	r3, #7
    8498:	781b      	ldrb	r3, [r3, #0]
    849a:	b2db      	uxtb	r3, r3
    849c:	001a      	movs	r2, r3
    849e:	2340      	movs	r3, #64	; 0x40
    84a0:	4013      	ands	r3, r2
    84a2:	d055      	beq.n	8550 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	681a      	ldr	r2, [r3, #0]
    84a8:	230f      	movs	r3, #15
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	781b      	ldrb	r3, [r3, #0]
    84ae:	3308      	adds	r3, #8
    84b0:	015b      	lsls	r3, r3, #5
    84b2:	18d3      	adds	r3, r2, r3
    84b4:	3307      	adds	r3, #7
    84b6:	2240      	movs	r2, #64	; 0x40
    84b8:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    84ba:	687b      	ldr	r3, [r7, #4]
    84bc:	681a      	ldr	r2, [r3, #0]
    84be:	230f      	movs	r3, #15
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	3308      	adds	r3, #8
    84c6:	015b      	lsls	r3, r3, #5
    84c8:	18d3      	adds	r3, r2, r3
    84ca:	3304      	adds	r3, #4
    84cc:	2202      	movs	r2, #2
    84ce:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    84d0:	e03e      	b.n	8550 <usb_device_endpoint_clear_halt+0x124>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	681a      	ldr	r2, [r3, #0]
    84d6:	230f      	movs	r3, #15
    84d8:	18fb      	adds	r3, r7, r3
    84da:	781b      	ldrb	r3, [r3, #0]
    84dc:	3308      	adds	r3, #8
    84de:	015b      	lsls	r3, r3, #5
    84e0:	18d3      	adds	r3, r2, r3
    84e2:	3306      	adds	r3, #6
    84e4:	781b      	ldrb	r3, [r3, #0]
    84e6:	b2db      	uxtb	r3, r3
    84e8:	001a      	movs	r2, r3
    84ea:	2310      	movs	r3, #16
    84ec:	4013      	ands	r3, r2
    84ee:	d02f      	beq.n	8550 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    84f0:	687b      	ldr	r3, [r7, #4]
    84f2:	681a      	ldr	r2, [r3, #0]
    84f4:	230f      	movs	r3, #15
    84f6:	18fb      	adds	r3, r7, r3
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	3308      	adds	r3, #8
    84fc:	015b      	lsls	r3, r3, #5
    84fe:	18d3      	adds	r3, r2, r3
    8500:	3304      	adds	r3, #4
    8502:	2210      	movs	r2, #16
    8504:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    8506:	687b      	ldr	r3, [r7, #4]
    8508:	681a      	ldr	r2, [r3, #0]
    850a:	230f      	movs	r3, #15
    850c:	18fb      	adds	r3, r7, r3
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	3308      	adds	r3, #8
    8512:	015b      	lsls	r3, r3, #5
    8514:	18d3      	adds	r3, r2, r3
    8516:	3307      	adds	r3, #7
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	b2db      	uxtb	r3, r3
    851c:	001a      	movs	r2, r3
    851e:	2320      	movs	r3, #32
    8520:	4013      	ands	r3, r2
    8522:	d015      	beq.n	8550 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	681a      	ldr	r2, [r3, #0]
    8528:	230f      	movs	r3, #15
    852a:	18fb      	adds	r3, r7, r3
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	3308      	adds	r3, #8
    8530:	015b      	lsls	r3, r3, #5
    8532:	18d3      	adds	r3, r2, r3
    8534:	3307      	adds	r3, #7
    8536:	2220      	movs	r2, #32
    8538:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	681a      	ldr	r2, [r3, #0]
    853e:	230f      	movs	r3, #15
    8540:	18fb      	adds	r3, r7, r3
    8542:	781b      	ldrb	r3, [r3, #0]
    8544:	3308      	adds	r3, #8
    8546:	015b      	lsls	r3, r3, #5
    8548:	18d3      	adds	r3, r2, r3
    854a:	3304      	adds	r3, #4
    854c:	2201      	movs	r2, #1
    854e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
    8550:	46c0      	nop			; (mov r8, r8)
    8552:	46bd      	mov	sp, r7
    8554:	b004      	add	sp, #16
    8556:	bd80      	pop	{r7, pc}

00008558 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    8558:	b580      	push	{r7, lr}
    855a:	b086      	sub	sp, #24
    855c:	af00      	add	r7, sp, #0
    855e:	60f8      	str	r0, [r7, #12]
    8560:	607a      	str	r2, [r7, #4]
    8562:	603b      	str	r3, [r7, #0]
    8564:	230b      	movs	r3, #11
    8566:	18fb      	adds	r3, r7, r3
    8568:	1c0a      	adds	r2, r1, #0
    856a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    856c:	68fb      	ldr	r3, [r7, #12]
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	220b      	movs	r2, #11
    8572:	18ba      	adds	r2, r7, r2
    8574:	7812      	ldrb	r2, [r2, #0]
    8576:	3208      	adds	r2, #8
    8578:	0152      	lsls	r2, r2, #5
    857a:	5cd3      	ldrb	r3, [r2, r3]
    857c:	065b      	lsls	r3, r3, #25
    857e:	0f5b      	lsrs	r3, r3, #29
    8580:	b2da      	uxtb	r2, r3
    8582:	2317      	movs	r3, #23
    8584:	18fb      	adds	r3, r7, r3
    8586:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    8588:	2317      	movs	r3, #23
    858a:	18fb      	adds	r3, r7, r3
    858c:	781b      	ldrb	r3, [r3, #0]
    858e:	2b00      	cmp	r3, #0
    8590:	d101      	bne.n	8596 <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    8592:	231c      	movs	r3, #28
    8594:	e032      	b.n	85fc <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    8596:	230b      	movs	r3, #11
    8598:	18fb      	adds	r3, r7, r3
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	687a      	ldr	r2, [r7, #4]
    859e:	4919      	ldr	r1, [pc, #100]	; (8604 <usb_device_endpoint_write_buffer_job+0xac>)
    85a0:	015b      	lsls	r3, r3, #5
    85a2:	18cb      	adds	r3, r1, r3
    85a4:	3310      	adds	r3, #16
    85a6:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    85a8:	230b      	movs	r3, #11
    85aa:	18fb      	adds	r3, r7, r3
    85ac:	781b      	ldrb	r3, [r3, #0]
    85ae:	4a15      	ldr	r2, [pc, #84]	; (8604 <usb_device_endpoint_write_buffer_job+0xac>)
    85b0:	015b      	lsls	r3, r3, #5
    85b2:	18d3      	adds	r3, r2, r3
    85b4:	3310      	adds	r3, #16
    85b6:	685a      	ldr	r2, [r3, #4]
    85b8:	4913      	ldr	r1, [pc, #76]	; (8608 <usb_device_endpoint_write_buffer_job+0xb0>)
    85ba:	400a      	ands	r2, r1
    85bc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    85be:	230b      	movs	r3, #11
    85c0:	18fb      	adds	r3, r7, r3
    85c2:	781b      	ldrb	r3, [r3, #0]
    85c4:	683a      	ldr	r2, [r7, #0]
    85c6:	b292      	uxth	r2, r2
    85c8:	0492      	lsls	r2, r2, #18
    85ca:	0c92      	lsrs	r2, r2, #18
    85cc:	b291      	uxth	r1, r2
    85ce:	4a0d      	ldr	r2, [pc, #52]	; (8604 <usb_device_endpoint_write_buffer_job+0xac>)
    85d0:	015b      	lsls	r3, r3, #5
    85d2:	18d3      	adds	r3, r2, r3
    85d4:	3310      	adds	r3, #16
    85d6:	685a      	ldr	r2, [r3, #4]
    85d8:	0489      	lsls	r1, r1, #18
    85da:	0c89      	lsrs	r1, r1, #18
    85dc:	0b92      	lsrs	r2, r2, #14
    85de:	0392      	lsls	r2, r2, #14
    85e0:	430a      	orrs	r2, r1
    85e2:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    85e4:	68fb      	ldr	r3, [r7, #12]
    85e6:	681a      	ldr	r2, [r3, #0]
    85e8:	230b      	movs	r3, #11
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	3308      	adds	r3, #8
    85f0:	015b      	lsls	r3, r3, #5
    85f2:	18d3      	adds	r3, r2, r3
    85f4:	3305      	adds	r3, #5
    85f6:	2280      	movs	r2, #128	; 0x80
    85f8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    85fa:	2300      	movs	r3, #0
}
    85fc:	0018      	movs	r0, r3
    85fe:	46bd      	mov	sp, r7
    8600:	b006      	add	sp, #24
    8602:	bd80      	pop	{r7, pc}
    8604:	20000500 	.word	0x20000500
    8608:	f0003fff 	.word	0xf0003fff

0000860c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    860c:	b580      	push	{r7, lr}
    860e:	b086      	sub	sp, #24
    8610:	af00      	add	r7, sp, #0
    8612:	60f8      	str	r0, [r7, #12]
    8614:	607a      	str	r2, [r7, #4]
    8616:	603b      	str	r3, [r7, #0]
    8618:	230b      	movs	r3, #11
    861a:	18fb      	adds	r3, r7, r3
    861c:	1c0a      	adds	r2, r1, #0
    861e:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    8620:	68fb      	ldr	r3, [r7, #12]
    8622:	681b      	ldr	r3, [r3, #0]
    8624:	220b      	movs	r2, #11
    8626:	18ba      	adds	r2, r7, r2
    8628:	7812      	ldrb	r2, [r2, #0]
    862a:	3208      	adds	r2, #8
    862c:	0152      	lsls	r2, r2, #5
    862e:	5cd3      	ldrb	r3, [r2, r3]
    8630:	075b      	lsls	r3, r3, #29
    8632:	0f5b      	lsrs	r3, r3, #29
    8634:	b2da      	uxtb	r2, r3
    8636:	2317      	movs	r3, #23
    8638:	18fb      	adds	r3, r7, r3
    863a:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    863c:	2317      	movs	r3, #23
    863e:	18fb      	adds	r3, r7, r3
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2b00      	cmp	r3, #0
    8644:	d101      	bne.n	864a <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    8646:	231c      	movs	r3, #28
    8648:	e02f      	b.n	86aa <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    864a:	230b      	movs	r3, #11
    864c:	18fb      	adds	r3, r7, r3
    864e:	781a      	ldrb	r2, [r3, #0]
    8650:	6879      	ldr	r1, [r7, #4]
    8652:	4b18      	ldr	r3, [pc, #96]	; (86b4 <usb_device_endpoint_read_buffer_job+0xa8>)
    8654:	0152      	lsls	r2, r2, #5
    8656:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    8658:	230b      	movs	r3, #11
    865a:	18fb      	adds	r3, r7, r3
    865c:	781b      	ldrb	r3, [r3, #0]
    865e:	683a      	ldr	r2, [r7, #0]
    8660:	b292      	uxth	r2, r2
    8662:	0492      	lsls	r2, r2, #18
    8664:	0c92      	lsrs	r2, r2, #18
    8666:	b291      	uxth	r1, r2
    8668:	4a12      	ldr	r2, [pc, #72]	; (86b4 <usb_device_endpoint_read_buffer_job+0xa8>)
    866a:	015b      	lsls	r3, r3, #5
    866c:	18d3      	adds	r3, r2, r3
    866e:	685a      	ldr	r2, [r3, #4]
    8670:	0489      	lsls	r1, r1, #18
    8672:	0c89      	lsrs	r1, r1, #18
    8674:	0389      	lsls	r1, r1, #14
    8676:	4810      	ldr	r0, [pc, #64]	; (86b8 <usb_device_endpoint_read_buffer_job+0xac>)
    8678:	4002      	ands	r2, r0
    867a:	430a      	orrs	r2, r1
    867c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    867e:	230b      	movs	r3, #11
    8680:	18fb      	adds	r3, r7, r3
    8682:	781b      	ldrb	r3, [r3, #0]
    8684:	4a0b      	ldr	r2, [pc, #44]	; (86b4 <usb_device_endpoint_read_buffer_job+0xa8>)
    8686:	015b      	lsls	r3, r3, #5
    8688:	18d3      	adds	r3, r2, r3
    868a:	685a      	ldr	r2, [r3, #4]
    868c:	0b92      	lsrs	r2, r2, #14
    868e:	0392      	lsls	r2, r2, #14
    8690:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    8692:	68fb      	ldr	r3, [r7, #12]
    8694:	681a      	ldr	r2, [r3, #0]
    8696:	230b      	movs	r3, #11
    8698:	18fb      	adds	r3, r7, r3
    869a:	781b      	ldrb	r3, [r3, #0]
    869c:	3308      	adds	r3, #8
    869e:	015b      	lsls	r3, r3, #5
    86a0:	18d3      	adds	r3, r2, r3
    86a2:	3304      	adds	r3, #4
    86a4:	2240      	movs	r2, #64	; 0x40
    86a6:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    86a8:	2300      	movs	r3, #0
}
    86aa:	0018      	movs	r0, r3
    86ac:	46bd      	mov	sp, r7
    86ae:	b006      	add	sp, #24
    86b0:	bd80      	pop	{r7, pc}
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	20000500 	.word	0x20000500
    86b8:	f0003fff 	.word	0xf0003fff

000086bc <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    86bc:	b580      	push	{r7, lr}
    86be:	b082      	sub	sp, #8
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
    86c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    86c6:	683a      	ldr	r2, [r7, #0]
    86c8:	4b0c      	ldr	r3, [pc, #48]	; (86fc <usb_device_endpoint_setup_buffer_job+0x40>)
    86ca:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    86cc:	4b0b      	ldr	r3, [pc, #44]	; (86fc <usb_device_endpoint_setup_buffer_job+0x40>)
    86ce:	685a      	ldr	r2, [r3, #4]
    86d0:	490b      	ldr	r1, [pc, #44]	; (8700 <usb_device_endpoint_setup_buffer_job+0x44>)
    86d2:	400a      	ands	r2, r1
    86d4:	2180      	movs	r1, #128	; 0x80
    86d6:	0289      	lsls	r1, r1, #10
    86d8:	430a      	orrs	r2, r1
    86da:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    86dc:	4b07      	ldr	r3, [pc, #28]	; (86fc <usb_device_endpoint_setup_buffer_job+0x40>)
    86de:	685a      	ldr	r2, [r3, #4]
    86e0:	0b92      	lsrs	r2, r2, #14
    86e2:	0392      	lsls	r2, r2, #14
    86e4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	681a      	ldr	r2, [r3, #0]
    86ea:	2382      	movs	r3, #130	; 0x82
    86ec:	005b      	lsls	r3, r3, #1
    86ee:	2140      	movs	r1, #64	; 0x40
    86f0:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    86f2:	2300      	movs	r3, #0
}
    86f4:	0018      	movs	r0, r3
    86f6:	46bd      	mov	sp, r7
    86f8:	b002      	add	sp, #8
    86fa:	bd80      	pop	{r7, pc}
    86fc:	20000500 	.word	0x20000500
    8700:	f0003fff 	.word	0xf0003fff

00008704 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    8704:	b580      	push	{r7, lr}
    8706:	b084      	sub	sp, #16
    8708:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    870a:	4bbd      	ldr	r3, [pc, #756]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	681a      	ldr	r2, [r3, #0]
    8710:	2308      	movs	r3, #8
    8712:	18fb      	adds	r3, r7, r3
    8714:	8c12      	ldrh	r2, [r2, #32]
    8716:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    8718:	2308      	movs	r3, #8
    871a:	18fb      	adds	r3, r7, r3
    871c:	881b      	ldrh	r3, [r3, #0]
    871e:	2b00      	cmp	r3, #0
    8720:	d155      	bne.n	87ce <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    8722:	4bb7      	ldr	r3, [pc, #732]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8724:	681b      	ldr	r3, [r3, #0]
    8726:	681a      	ldr	r2, [r3, #0]
    8728:	1dbb      	adds	r3, r7, #6
    872a:	8b92      	ldrh	r2, [r2, #28]
    872c:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    872e:	4bb4      	ldr	r3, [pc, #720]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8730:	681a      	ldr	r2, [r3, #0]
    8732:	23ab      	movs	r3, #171	; 0xab
    8734:	005b      	lsls	r3, r3, #1
    8736:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    8738:	1dba      	adds	r2, r7, #6
    873a:	8812      	ldrh	r2, [r2, #0]
    873c:	4013      	ands	r3, r2
    873e:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    8740:	4baf      	ldr	r3, [pc, #700]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8742:	6819      	ldr	r1, [r3, #0]
    8744:	23aa      	movs	r3, #170	; 0xaa
    8746:	005b      	lsls	r3, r3, #1
    8748:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    874a:	1d3b      	adds	r3, r7, #4
    874c:	400a      	ands	r2, r1
    874e:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    8750:	2300      	movs	r3, #0
    8752:	60fb      	str	r3, [r7, #12]
    8754:	e037      	b.n	87c6 <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    8756:	4bab      	ldr	r3, [pc, #684]	; (8a04 <_usb_device_interrupt_handler+0x300>)
    8758:	68fa      	ldr	r2, [r7, #12]
    875a:	0052      	lsls	r2, r2, #1
    875c:	5ad3      	ldrh	r3, [r2, r3]
    875e:	1dba      	adds	r2, r7, #6
    8760:	8812      	ldrh	r2, [r2, #0]
    8762:	4013      	ands	r3, r2
    8764:	b29b      	uxth	r3, r3
    8766:	2b00      	cmp	r3, #0
    8768:	d007      	beq.n	877a <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    876a:	4ba5      	ldr	r3, [pc, #660]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    876c:	681b      	ldr	r3, [r3, #0]
    876e:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    8770:	4aa4      	ldr	r2, [pc, #656]	; (8a04 <_usb_device_interrupt_handler+0x300>)
    8772:	68f9      	ldr	r1, [r7, #12]
    8774:	0049      	lsls	r1, r1, #1
    8776:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    8778:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    877a:	4ba2      	ldr	r3, [pc, #648]	; (8a04 <_usb_device_interrupt_handler+0x300>)
    877c:	68fa      	ldr	r2, [r7, #12]
    877e:	0052      	lsls	r2, r2, #1
    8780:	5ad3      	ldrh	r3, [r2, r3]
    8782:	1d3a      	adds	r2, r7, #4
    8784:	8812      	ldrh	r2, [r2, #0]
    8786:	4013      	ands	r3, r2
    8788:	b29b      	uxth	r3, r3
    878a:	2b00      	cmp	r3, #0
    878c:	d018      	beq.n	87c0 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    878e:	68fb      	ldr	r3, [r7, #12]
    8790:	2b06      	cmp	r3, #6
    8792:	d10a      	bne.n	87aa <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    8794:	4b9c      	ldr	r3, [pc, #624]	; (8a08 <_usb_device_interrupt_handler+0x304>)
    8796:	891b      	ldrh	r3, [r3, #8]
    8798:	045b      	lsls	r3, r3, #17
    879a:	0d5b      	lsrs	r3, r3, #21
    879c:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    879e:	001a      	movs	r2, r3
    87a0:	2380      	movs	r3, #128	; 0x80
    87a2:	005b      	lsls	r3, r3, #1
    87a4:	401a      	ands	r2, r3
    87a6:	4b99      	ldr	r3, [pc, #612]	; (8a0c <_usb_device_interrupt_handler+0x308>)
    87a8:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    87aa:	4b95      	ldr	r3, [pc, #596]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    87ac:	681b      	ldr	r3, [r3, #0]
    87ae:	68fa      	ldr	r2, [r7, #12]
    87b0:	322e      	adds	r2, #46	; 0x2e
    87b2:	0092      	lsls	r2, r2, #2
    87b4:	58d2      	ldr	r2, [r2, r3]
    87b6:	4b92      	ldr	r3, [pc, #584]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    87b8:	681b      	ldr	r3, [r3, #0]
    87ba:	4994      	ldr	r1, [pc, #592]	; (8a0c <_usb_device_interrupt_handler+0x308>)
    87bc:	0018      	movs	r0, r3
    87be:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    87c0:	68fb      	ldr	r3, [r7, #12]
    87c2:	3301      	adds	r3, #1
    87c4:	60fb      	str	r3, [r7, #12]
    87c6:	68fb      	ldr	r3, [r7, #12]
    87c8:	2b06      	cmp	r3, #6
    87ca:	ddc4      	ble.n	8756 <_usb_device_interrupt_handler+0x52>
    87cc:	e250      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    87ce:	230b      	movs	r3, #11
    87d0:	18fb      	adds	r3, r7, r3
    87d2:	2200      	movs	r2, #0
    87d4:	701a      	strb	r2, [r3, #0]
    87d6:	e23b      	b.n	8c50 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    87d8:	2308      	movs	r3, #8
    87da:	18fb      	adds	r3, r7, r3
    87dc:	881a      	ldrh	r2, [r3, #0]
    87de:	230b      	movs	r3, #11
    87e0:	18fb      	adds	r3, r7, r3
    87e2:	781b      	ldrb	r3, [r3, #0]
    87e4:	411a      	asrs	r2, r3
    87e6:	0013      	movs	r3, r2
    87e8:	2201      	movs	r2, #1
    87ea:	4013      	ands	r3, r2
    87ec:	d100      	bne.n	87f0 <_usb_device_interrupt_handler+0xec>
    87ee:	e228      	b.n	8c42 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    87f0:	4b83      	ldr	r3, [pc, #524]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    87f2:	681b      	ldr	r3, [r3, #0]
    87f4:	681a      	ldr	r2, [r3, #0]
    87f6:	230b      	movs	r3, #11
    87f8:	18fb      	adds	r3, r7, r3
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	3308      	adds	r3, #8
    87fe:	015b      	lsls	r3, r3, #5
    8800:	18d3      	adds	r3, r2, r3
    8802:	3307      	adds	r3, #7
    8804:	781b      	ldrb	r3, [r3, #0]
    8806:	b2da      	uxtb	r2, r3
    8808:	1dbb      	adds	r3, r7, #6
    880a:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    880c:	4b7c      	ldr	r3, [pc, #496]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    880e:	6819      	ldr	r1, [r3, #0]
    8810:	230b      	movs	r3, #11
    8812:	18fb      	adds	r3, r7, r3
    8814:	781a      	ldrb	r2, [r3, #0]
    8816:	23b0      	movs	r3, #176	; 0xb0
    8818:	005b      	lsls	r3, r3, #1
    881a:	188a      	adds	r2, r1, r2
    881c:	18d3      	adds	r3, r2, r3
    881e:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    8820:	b29b      	uxth	r3, r3
    8822:	1dba      	adds	r2, r7, #6
    8824:	8812      	ldrh	r2, [r2, #0]
    8826:	4013      	ands	r3, r2
    8828:	b29b      	uxth	r3, r3
    882a:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    882c:	4b74      	ldr	r3, [pc, #464]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    882e:	6818      	ldr	r0, [r3, #0]
    8830:	230b      	movs	r3, #11
    8832:	18fb      	adds	r3, r7, r3
    8834:	7819      	ldrb	r1, [r3, #0]
    8836:	23ac      	movs	r3, #172	; 0xac
    8838:	005b      	lsls	r3, r3, #1
    883a:	1841      	adds	r1, r0, r1
    883c:	18cb      	adds	r3, r1, r3
    883e:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    8840:	b21b      	sxth	r3, r3
    8842:	4013      	ands	r3, r2
    8844:	b21a      	sxth	r2, r3
    8846:	1d3b      	adds	r3, r7, #4
    8848:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    884a:	1dbb      	adds	r3, r7, #6
    884c:	881b      	ldrh	r3, [r3, #0]
    884e:	2260      	movs	r2, #96	; 0x60
    8850:	4013      	ands	r3, r2
    8852:	d05c      	beq.n	890e <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    8854:	4b6a      	ldr	r3, [pc, #424]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8856:	681b      	ldr	r3, [r3, #0]
    8858:	681a      	ldr	r2, [r3, #0]
    885a:	230b      	movs	r3, #11
    885c:	18fb      	adds	r3, r7, r3
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	3308      	adds	r3, #8
    8862:	015b      	lsls	r3, r3, #5
    8864:	18d3      	adds	r3, r2, r3
    8866:	3307      	adds	r3, #7
    8868:	781b      	ldrb	r3, [r3, #0]
    886a:	b2db      	uxtb	r3, r3
    886c:	001a      	movs	r2, r3
    886e:	2340      	movs	r3, #64	; 0x40
    8870:	4013      	ands	r3, r2
    8872:	d015      	beq.n	88a0 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    8874:	4b62      	ldr	r3, [pc, #392]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8876:	681b      	ldr	r3, [r3, #0]
    8878:	681a      	ldr	r2, [r3, #0]
    887a:	230b      	movs	r3, #11
    887c:	18fb      	adds	r3, r7, r3
    887e:	781b      	ldrb	r3, [r3, #0]
    8880:	3308      	adds	r3, #8
    8882:	015b      	lsls	r3, r3, #5
    8884:	18d3      	adds	r3, r2, r3
    8886:	3307      	adds	r3, #7
    8888:	2240      	movs	r2, #64	; 0x40
    888a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    888c:	230b      	movs	r3, #11
    888e:	18fb      	adds	r3, r7, r3
    8890:	781b      	ldrb	r3, [r3, #0]
    8892:	2280      	movs	r2, #128	; 0x80
    8894:	4252      	negs	r2, r2
    8896:	4313      	orrs	r3, r2
    8898:	b2da      	uxtb	r2, r3
    889a:	4b5d      	ldr	r3, [pc, #372]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    889c:	719a      	strb	r2, [r3, #6]
    889e:	e020      	b.n	88e2 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    88a0:	4b57      	ldr	r3, [pc, #348]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    88a2:	681b      	ldr	r3, [r3, #0]
    88a4:	681a      	ldr	r2, [r3, #0]
    88a6:	230b      	movs	r3, #11
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	781b      	ldrb	r3, [r3, #0]
    88ac:	3308      	adds	r3, #8
    88ae:	015b      	lsls	r3, r3, #5
    88b0:	18d3      	adds	r3, r2, r3
    88b2:	3307      	adds	r3, #7
    88b4:	781b      	ldrb	r3, [r3, #0]
    88b6:	b2db      	uxtb	r3, r3
    88b8:	001a      	movs	r2, r3
    88ba:	2320      	movs	r3, #32
    88bc:	4013      	ands	r3, r2
    88be:	d010      	beq.n	88e2 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    88c0:	4b4f      	ldr	r3, [pc, #316]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    88c2:	681b      	ldr	r3, [r3, #0]
    88c4:	681a      	ldr	r2, [r3, #0]
    88c6:	230b      	movs	r3, #11
    88c8:	18fb      	adds	r3, r7, r3
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	3308      	adds	r3, #8
    88ce:	015b      	lsls	r3, r3, #5
    88d0:	18d3      	adds	r3, r2, r3
    88d2:	3307      	adds	r3, #7
    88d4:	2220      	movs	r2, #32
    88d6:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    88d8:	4b4d      	ldr	r3, [pc, #308]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    88da:	220b      	movs	r2, #11
    88dc:	18ba      	adds	r2, r7, r2
    88de:	7812      	ldrb	r2, [r2, #0]
    88e0:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    88e2:	1d3b      	adds	r3, r7, #4
    88e4:	881b      	ldrh	r3, [r3, #0]
    88e6:	2260      	movs	r2, #96	; 0x60
    88e8:	4013      	ands	r3, r2
    88ea:	d100      	bne.n	88ee <_usb_device_interrupt_handler+0x1ea>
    88ec:	e1b7      	b.n	8c5e <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    88ee:	4b44      	ldr	r3, [pc, #272]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    88f0:	681a      	ldr	r2, [r3, #0]
    88f2:	230b      	movs	r3, #11
    88f4:	18fb      	adds	r3, r7, r3
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	21e0      	movs	r1, #224	; 0xe0
    88fa:	011b      	lsls	r3, r3, #4
    88fc:	18d3      	adds	r3, r2, r3
    88fe:	185b      	adds	r3, r3, r1
    8900:	681a      	ldr	r2, [r3, #0]
    8902:	4b3f      	ldr	r3, [pc, #252]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	4942      	ldr	r1, [pc, #264]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    8908:	0018      	movs	r0, r3
    890a:	4790      	blx	r2
					}
					return;
    890c:	e1a7      	b.n	8c5e <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    890e:	1dbb      	adds	r3, r7, #6
    8910:	881b      	ldrh	r3, [r3, #0]
    8912:	2210      	movs	r2, #16
    8914:	4013      	ands	r3, r2
    8916:	d038      	beq.n	898a <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    8918:	4b39      	ldr	r3, [pc, #228]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	681a      	ldr	r2, [r3, #0]
    891e:	230b      	movs	r3, #11
    8920:	18fb      	adds	r3, r7, r3
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	3308      	adds	r3, #8
    8926:	015b      	lsls	r3, r3, #5
    8928:	18d3      	adds	r3, r2, r3
    892a:	3307      	adds	r3, #7
    892c:	2210      	movs	r2, #16
    892e:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    8930:	4b33      	ldr	r3, [pc, #204]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8932:	6819      	ldr	r1, [r3, #0]
    8934:	230b      	movs	r3, #11
    8936:	18fb      	adds	r3, r7, r3
    8938:	781a      	ldrb	r2, [r3, #0]
    893a:	23b0      	movs	r3, #176	; 0xb0
    893c:	005b      	lsls	r3, r3, #1
    893e:	188a      	adds	r2, r1, r2
    8940:	18d3      	adds	r3, r2, r3
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	2210      	movs	r2, #16
    8946:	4013      	ands	r3, r2
    8948:	b2db      	uxtb	r3, r3
    894a:	2b00      	cmp	r3, #0
    894c:	d100      	bne.n	8950 <_usb_device_interrupt_handler+0x24c>
    894e:	e188      	b.n	8c62 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    8950:	230b      	movs	r3, #11
    8952:	18fb      	adds	r3, r7, r3
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	4a2c      	ldr	r2, [pc, #176]	; (8a08 <_usb_device_interrupt_handler+0x304>)
    8958:	015b      	lsls	r3, r3, #5
    895a:	18d3      	adds	r3, r2, r3
    895c:	685b      	ldr	r3, [r3, #4]
    895e:	049b      	lsls	r3, r3, #18
    8960:	0c9b      	lsrs	r3, r3, #18
    8962:	b29b      	uxth	r3, r3
    8964:	001a      	movs	r2, r3
    8966:	4b2a      	ldr	r3, [pc, #168]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    8968:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    896a:	4b25      	ldr	r3, [pc, #148]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    896c:	681a      	ldr	r2, [r3, #0]
    896e:	230b      	movs	r3, #11
    8970:	18fb      	adds	r3, r7, r3
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	21dc      	movs	r1, #220	; 0xdc
    8976:	011b      	lsls	r3, r3, #4
    8978:	18d3      	adds	r3, r2, r3
    897a:	185b      	adds	r3, r3, r1
    897c:	681a      	ldr	r2, [r3, #0]
    897e:	4b20      	ldr	r3, [pc, #128]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8980:	681b      	ldr	r3, [r3, #0]
    8982:	4923      	ldr	r1, [pc, #140]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    8984:	0018      	movs	r0, r3
    8986:	4790      	blx	r2
					}
					return;
    8988:	e16b      	b.n	8c62 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    898a:	1dbb      	adds	r3, r7, #6
    898c:	881b      	ldrh	r3, [r3, #0]
    898e:	2203      	movs	r2, #3
    8990:	4013      	ands	r3, r2
    8992:	d100      	bne.n	8996 <_usb_device_interrupt_handler+0x292>
    8994:	e08f      	b.n	8ab6 <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8996:	4b1a      	ldr	r3, [pc, #104]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    8998:	681b      	ldr	r3, [r3, #0]
    899a:	681a      	ldr	r2, [r3, #0]
    899c:	230b      	movs	r3, #11
    899e:	18fb      	adds	r3, r7, r3
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	3308      	adds	r3, #8
    89a4:	015b      	lsls	r3, r3, #5
    89a6:	18d3      	adds	r3, r2, r3
    89a8:	3307      	adds	r3, #7
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	b2db      	uxtb	r3, r3
    89ae:	001a      	movs	r2, r3
    89b0:	2302      	movs	r3, #2
    89b2:	4013      	ands	r3, r2
    89b4:	d02e      	beq.n	8a14 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    89b6:	4b12      	ldr	r3, [pc, #72]	; (8a00 <_usb_device_interrupt_handler+0x2fc>)
    89b8:	681b      	ldr	r3, [r3, #0]
    89ba:	681a      	ldr	r2, [r3, #0]
    89bc:	230b      	movs	r3, #11
    89be:	18fb      	adds	r3, r7, r3
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	3308      	adds	r3, #8
    89c4:	015b      	lsls	r3, r3, #5
    89c6:	18d3      	adds	r3, r2, r3
    89c8:	3307      	adds	r3, #7
    89ca:	2202      	movs	r2, #2
    89cc:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    89ce:	230b      	movs	r3, #11
    89d0:	18fb      	adds	r3, r7, r3
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	2280      	movs	r2, #128	; 0x80
    89d6:	4252      	negs	r2, r2
    89d8:	4313      	orrs	r3, r2
    89da:	b2da      	uxtb	r2, r3
    89dc:	4b0c      	ldr	r3, [pc, #48]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    89de:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    89e0:	230b      	movs	r3, #11
    89e2:	18fb      	adds	r3, r7, r3
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	4a08      	ldr	r2, [pc, #32]	; (8a08 <_usb_device_interrupt_handler+0x304>)
    89e8:	015b      	lsls	r3, r3, #5
    89ea:	18d3      	adds	r3, r2, r3
    89ec:	3310      	adds	r3, #16
    89ee:	685b      	ldr	r3, [r3, #4]
    89f0:	049b      	lsls	r3, r3, #18
    89f2:	0c9b      	lsrs	r3, r3, #18
    89f4:	b29b      	uxth	r3, r3
    89f6:	001a      	movs	r2, r3
    89f8:	4b05      	ldr	r3, [pc, #20]	; (8a10 <_usb_device_interrupt_handler+0x30c>)
    89fa:	805a      	strh	r2, [r3, #2]
    89fc:	e045      	b.n	8a8a <_usb_device_interrupt_handler+0x386>
    89fe:	46c0      	nop			; (mov r8, r8)
    8a00:	20000188 	.word	0x20000188
    8a04:	00009e94 	.word	0x00009e94
    8a08:	20000500 	.word	0x20000500
    8a0c:	20000194 	.word	0x20000194
    8a10:	20000198 	.word	0x20000198

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8a14:	4b98      	ldr	r3, [pc, #608]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8a16:	681b      	ldr	r3, [r3, #0]
    8a18:	681a      	ldr	r2, [r3, #0]
    8a1a:	230b      	movs	r3, #11
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	3308      	adds	r3, #8
    8a22:	015b      	lsls	r3, r3, #5
    8a24:	18d3      	adds	r3, r2, r3
    8a26:	3307      	adds	r3, #7
    8a28:	781b      	ldrb	r3, [r3, #0]
    8a2a:	b2db      	uxtb	r3, r3
    8a2c:	001a      	movs	r2, r3
    8a2e:	2301      	movs	r3, #1
    8a30:	4013      	ands	r3, r2
    8a32:	d02a      	beq.n	8a8a <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    8a34:	4b90      	ldr	r3, [pc, #576]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8a36:	681b      	ldr	r3, [r3, #0]
    8a38:	681a      	ldr	r2, [r3, #0]
    8a3a:	230b      	movs	r3, #11
    8a3c:	18fb      	adds	r3, r7, r3
    8a3e:	781b      	ldrb	r3, [r3, #0]
    8a40:	3308      	adds	r3, #8
    8a42:	015b      	lsls	r3, r3, #5
    8a44:	18d3      	adds	r3, r2, r3
    8a46:	3307      	adds	r3, #7
    8a48:	2201      	movs	r2, #1
    8a4a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    8a4c:	4b8b      	ldr	r3, [pc, #556]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8a4e:	220b      	movs	r2, #11
    8a50:	18ba      	adds	r2, r7, r2
    8a52:	7812      	ldrb	r2, [r2, #0]
    8a54:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    8a56:	230b      	movs	r3, #11
    8a58:	18fb      	adds	r3, r7, r3
    8a5a:	781b      	ldrb	r3, [r3, #0]
    8a5c:	4a88      	ldr	r2, [pc, #544]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8a5e:	015b      	lsls	r3, r3, #5
    8a60:	18d3      	adds	r3, r2, r3
    8a62:	685b      	ldr	r3, [r3, #4]
    8a64:	049b      	lsls	r3, r3, #18
    8a66:	0c9b      	lsrs	r3, r3, #18
    8a68:	b29b      	uxth	r3, r3
    8a6a:	001a      	movs	r2, r3
    8a6c:	4b83      	ldr	r3, [pc, #524]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8a6e:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    8a70:	230b      	movs	r3, #11
    8a72:	18fb      	adds	r3, r7, r3
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	4a82      	ldr	r2, [pc, #520]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8a78:	015b      	lsls	r3, r3, #5
    8a7a:	18d3      	adds	r3, r2, r3
    8a7c:	685b      	ldr	r3, [r3, #4]
    8a7e:	011b      	lsls	r3, r3, #4
    8a80:	0c9b      	lsrs	r3, r3, #18
    8a82:	b29b      	uxth	r3, r3
    8a84:	001a      	movs	r2, r3
    8a86:	4b7d      	ldr	r3, [pc, #500]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8a88:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    8a8a:	1d3b      	adds	r3, r7, #4
    8a8c:	881b      	ldrh	r3, [r3, #0]
    8a8e:	2203      	movs	r2, #3
    8a90:	4013      	ands	r3, r2
    8a92:	d100      	bne.n	8a96 <_usb_device_interrupt_handler+0x392>
    8a94:	e0e7      	b.n	8c66 <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    8a96:	4b78      	ldr	r3, [pc, #480]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8a98:	681a      	ldr	r2, [r3, #0]
    8a9a:	230b      	movs	r3, #11
    8a9c:	18fb      	adds	r3, r7, r3
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	330d      	adds	r3, #13
    8aa2:	011b      	lsls	r3, r3, #4
    8aa4:	18d3      	adds	r3, r2, r3
    8aa6:	3304      	adds	r3, #4
    8aa8:	681a      	ldr	r2, [r3, #0]
    8aaa:	4b73      	ldr	r3, [pc, #460]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8aac:	681b      	ldr	r3, [r3, #0]
    8aae:	4973      	ldr	r1, [pc, #460]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8ab0:	0018      	movs	r0, r3
    8ab2:	4790      	blx	r2
					}
					return;
    8ab4:	e0d7      	b.n	8c66 <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    8ab6:	1dbb      	adds	r3, r7, #6
    8ab8:	881b      	ldrh	r3, [r3, #0]
    8aba:	220c      	movs	r2, #12
    8abc:	4013      	ands	r3, r2
    8abe:	d100      	bne.n	8ac2 <_usb_device_interrupt_handler+0x3be>
    8ac0:	e0bf      	b.n	8c42 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8ac2:	4b6d      	ldr	r3, [pc, #436]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8ac4:	681b      	ldr	r3, [r3, #0]
    8ac6:	681a      	ldr	r2, [r3, #0]
    8ac8:	230b      	movs	r3, #11
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	3308      	adds	r3, #8
    8ad0:	015b      	lsls	r3, r3, #5
    8ad2:	18d3      	adds	r3, r2, r3
    8ad4:	3307      	adds	r3, #7
    8ad6:	781b      	ldrb	r3, [r3, #0]
    8ad8:	b2db      	uxtb	r3, r3
    8ada:	001a      	movs	r2, r3
    8adc:	2308      	movs	r3, #8
    8ade:	4013      	ands	r3, r2
    8ae0:	d047      	beq.n	8b72 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    8ae2:	4b65      	ldr	r3, [pc, #404]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8ae4:	681b      	ldr	r3, [r3, #0]
    8ae6:	681a      	ldr	r2, [r3, #0]
    8ae8:	230b      	movs	r3, #11
    8aea:	18fb      	adds	r3, r7, r3
    8aec:	781b      	ldrb	r3, [r3, #0]
    8aee:	3308      	adds	r3, #8
    8af0:	015b      	lsls	r3, r3, #5
    8af2:	18d3      	adds	r3, r2, r3
    8af4:	3307      	adds	r3, #7
    8af6:	2208      	movs	r2, #8
    8af8:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    8afa:	230b      	movs	r3, #11
    8afc:	18fb      	adds	r3, r7, r3
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	4a5f      	ldr	r2, [pc, #380]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8b02:	015b      	lsls	r3, r3, #5
    8b04:	18d3      	adds	r3, r2, r3
    8b06:	331a      	adds	r3, #26
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	b2db      	uxtb	r3, r3
    8b0c:	001a      	movs	r2, r3
    8b0e:	2302      	movs	r3, #2
    8b10:	4013      	ands	r3, r2
    8b12:	d014      	beq.n	8b3e <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8b14:	230b      	movs	r3, #11
    8b16:	18fb      	adds	r3, r7, r3
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	220b      	movs	r2, #11
    8b1c:	18ba      	adds	r2, r7, r2
    8b1e:	7812      	ldrb	r2, [r2, #0]
    8b20:	4957      	ldr	r1, [pc, #348]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8b22:	0152      	lsls	r2, r2, #5
    8b24:	188a      	adds	r2, r1, r2
    8b26:	321a      	adds	r2, #26
    8b28:	7812      	ldrb	r2, [r2, #0]
    8b2a:	b2d2      	uxtb	r2, r2
    8b2c:	2102      	movs	r1, #2
    8b2e:	438a      	bics	r2, r1
    8b30:	b2d1      	uxtb	r1, r2
    8b32:	4a53      	ldr	r2, [pc, #332]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8b34:	015b      	lsls	r3, r3, #5
    8b36:	18d3      	adds	r3, r2, r3
    8b38:	331a      	adds	r3, #26
    8b3a:	1c0a      	adds	r2, r1, #0
    8b3c:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    8b3e:	230b      	movs	r3, #11
    8b40:	18fb      	adds	r3, r7, r3
    8b42:	781b      	ldrb	r3, [r3, #0]
    8b44:	2280      	movs	r2, #128	; 0x80
    8b46:	4252      	negs	r2, r2
    8b48:	4313      	orrs	r3, r2
    8b4a:	b2da      	uxtb	r2, r3
    8b4c:	4b4b      	ldr	r3, [pc, #300]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8b4e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8b50:	4b49      	ldr	r3, [pc, #292]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8b52:	681b      	ldr	r3, [r3, #0]
    8b54:	681a      	ldr	r2, [r3, #0]
    8b56:	230b      	movs	r3, #11
    8b58:	18fb      	adds	r3, r7, r3
    8b5a:	781b      	ldrb	r3, [r3, #0]
    8b5c:	3308      	adds	r3, #8
    8b5e:	015b      	lsls	r3, r3, #5
    8b60:	18d3      	adds	r3, r2, r3
    8b62:	3307      	adds	r3, #7
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	b2db      	uxtb	r3, r3
    8b68:	001a      	movs	r2, r3
    8b6a:	2302      	movs	r3, #2
    8b6c:	4013      	ands	r3, r2
    8b6e:	d053      	beq.n	8c18 <_usb_device_interrupt_handler+0x514>
							return;
    8b70:	e07e      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8b72:	4b41      	ldr	r3, [pc, #260]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8b74:	681b      	ldr	r3, [r3, #0]
    8b76:	681a      	ldr	r2, [r3, #0]
    8b78:	230b      	movs	r3, #11
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	3308      	adds	r3, #8
    8b80:	015b      	lsls	r3, r3, #5
    8b82:	18d3      	adds	r3, r2, r3
    8b84:	3307      	adds	r3, #7
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	b2db      	uxtb	r3, r3
    8b8a:	001a      	movs	r2, r3
    8b8c:	2304      	movs	r3, #4
    8b8e:	4013      	ands	r3, r2
    8b90:	d042      	beq.n	8c18 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    8b92:	4b39      	ldr	r3, [pc, #228]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	681a      	ldr	r2, [r3, #0]
    8b98:	230b      	movs	r3, #11
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	3308      	adds	r3, #8
    8ba0:	015b      	lsls	r3, r3, #5
    8ba2:	18d3      	adds	r3, r2, r3
    8ba4:	3307      	adds	r3, #7
    8ba6:	2204      	movs	r2, #4
    8ba8:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    8baa:	230b      	movs	r3, #11
    8bac:	18fb      	adds	r3, r7, r3
    8bae:	781b      	ldrb	r3, [r3, #0]
    8bb0:	4a33      	ldr	r2, [pc, #204]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8bb2:	015b      	lsls	r3, r3, #5
    8bb4:	18d3      	adds	r3, r2, r3
    8bb6:	330a      	adds	r3, #10
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	b2db      	uxtb	r3, r3
    8bbc:	001a      	movs	r2, r3
    8bbe:	2302      	movs	r3, #2
    8bc0:	4013      	ands	r3, r2
    8bc2:	d014      	beq.n	8bee <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8bc4:	230b      	movs	r3, #11
    8bc6:	18fb      	adds	r3, r7, r3
    8bc8:	781b      	ldrb	r3, [r3, #0]
    8bca:	220b      	movs	r2, #11
    8bcc:	18ba      	adds	r2, r7, r2
    8bce:	7812      	ldrb	r2, [r2, #0]
    8bd0:	492b      	ldr	r1, [pc, #172]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8bd2:	0152      	lsls	r2, r2, #5
    8bd4:	188a      	adds	r2, r1, r2
    8bd6:	320a      	adds	r2, #10
    8bd8:	7812      	ldrb	r2, [r2, #0]
    8bda:	b2d2      	uxtb	r2, r2
    8bdc:	2102      	movs	r1, #2
    8bde:	438a      	bics	r2, r1
    8be0:	b2d1      	uxtb	r1, r2
    8be2:	4a27      	ldr	r2, [pc, #156]	; (8c80 <_usb_device_interrupt_handler+0x57c>)
    8be4:	015b      	lsls	r3, r3, #5
    8be6:	18d3      	adds	r3, r2, r3
    8be8:	330a      	adds	r3, #10
    8bea:	1c0a      	adds	r2, r1, #0
    8bec:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    8bee:	4b23      	ldr	r3, [pc, #140]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8bf0:	220b      	movs	r2, #11
    8bf2:	18ba      	adds	r2, r7, r2
    8bf4:	7812      	ldrb	r2, [r2, #0]
    8bf6:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8bf8:	4b1f      	ldr	r3, [pc, #124]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8bfa:	681b      	ldr	r3, [r3, #0]
    8bfc:	681a      	ldr	r2, [r3, #0]
    8bfe:	230b      	movs	r3, #11
    8c00:	18fb      	adds	r3, r7, r3
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	3308      	adds	r3, #8
    8c06:	015b      	lsls	r3, r3, #5
    8c08:	18d3      	adds	r3, r2, r3
    8c0a:	3307      	adds	r3, #7
    8c0c:	781b      	ldrb	r3, [r3, #0]
    8c0e:	b2db      	uxtb	r3, r3
    8c10:	001a      	movs	r2, r3
    8c12:	2301      	movs	r3, #1
    8c14:	4013      	ands	r3, r2
    8c16:	d128      	bne.n	8c6a <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    8c18:	1d3b      	adds	r3, r7, #4
    8c1a:	881b      	ldrh	r3, [r3, #0]
    8c1c:	220c      	movs	r2, #12
    8c1e:	4013      	ands	r3, r2
    8c20:	d025      	beq.n	8c6e <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    8c22:	4b15      	ldr	r3, [pc, #84]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8c24:	681a      	ldr	r2, [r3, #0]
    8c26:	230b      	movs	r3, #11
    8c28:	18fb      	adds	r3, r7, r3
    8c2a:	781b      	ldrb	r3, [r3, #0]
    8c2c:	21d8      	movs	r1, #216	; 0xd8
    8c2e:	011b      	lsls	r3, r3, #4
    8c30:	18d3      	adds	r3, r2, r3
    8c32:	185b      	adds	r3, r3, r1
    8c34:	681a      	ldr	r2, [r3, #0]
    8c36:	4b10      	ldr	r3, [pc, #64]	; (8c78 <_usb_device_interrupt_handler+0x574>)
    8c38:	681b      	ldr	r3, [r3, #0]
    8c3a:	4910      	ldr	r1, [pc, #64]	; (8c7c <_usb_device_interrupt_handler+0x578>)
    8c3c:	0018      	movs	r0, r3
    8c3e:	4790      	blx	r2
					}
					return;
    8c40:	e015      	b.n	8c6e <_usb_device_interrupt_handler+0x56a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    8c42:	230b      	movs	r3, #11
    8c44:	18fb      	adds	r3, r7, r3
    8c46:	781a      	ldrb	r2, [r3, #0]
    8c48:	230b      	movs	r3, #11
    8c4a:	18fb      	adds	r3, r7, r3
    8c4c:	3201      	adds	r2, #1
    8c4e:	701a      	strb	r2, [r3, #0]
    8c50:	230b      	movs	r3, #11
    8c52:	18fb      	adds	r3, r7, r3
    8c54:	781b      	ldrb	r3, [r3, #0]
    8c56:	2b07      	cmp	r3, #7
    8c58:	d800      	bhi.n	8c5c <_usb_device_interrupt_handler+0x558>
    8c5a:	e5bd      	b.n	87d8 <_usb_device_interrupt_handler+0xd4>
    8c5c:	e008      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
					}
					return;
    8c5e:	46c0      	nop			; (mov r8, r8)
    8c60:	e006      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
					}
					return;
    8c62:	46c0      	nop			; (mov r8, r8)
    8c64:	e004      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
					}
					return;
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	e002      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
							return;
    8c6a:	46c0      	nop			; (mov r8, r8)
    8c6c:	e000      	b.n	8c70 <_usb_device_interrupt_handler+0x56c>
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
					}
					return;
    8c6e:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    8c70:	46bd      	mov	sp, r7
    8c72:	b004      	add	sp, #16
    8c74:	bd80      	pop	{r7, pc}
    8c76:	46c0      	nop			; (mov r8, r8)
    8c78:	20000188 	.word	0x20000188
    8c7c:	20000198 	.word	0x20000198
    8c80:	20000500 	.word	0x20000500

00008c84 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    8c84:	b580      	push	{r7, lr}
    8c86:	b082      	sub	sp, #8
    8c88:	af00      	add	r7, sp, #0
    8c8a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	681a      	ldr	r2, [r3, #0]
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	681b      	ldr	r3, [r3, #0]
    8c94:	781b      	ldrb	r3, [r3, #0]
    8c96:	b2db      	uxtb	r3, r3
    8c98:	2102      	movs	r1, #2
    8c9a:	430b      	orrs	r3, r1
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    8ca0:	46c0      	nop			; (mov r8, r8)
    8ca2:	687b      	ldr	r3, [r7, #4]
    8ca4:	681b      	ldr	r3, [r3, #0]
    8ca6:	789b      	ldrb	r3, [r3, #2]
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	2b02      	cmp	r3, #2
    8cac:	d0f9      	beq.n	8ca2 <usb_enable+0x1e>
}
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	46bd      	mov	sp, r7
    8cb2:	b002      	add	sp, #8
    8cb4:	bd80      	pop	{r7, pc}
    8cb6:	46c0      	nop			; (mov r8, r8)

00008cb8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    8cb8:	b580      	push	{r7, lr}
    8cba:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    8cbc:	4b08      	ldr	r3, [pc, #32]	; (8ce0 <USB_Handler+0x28>)
    8cbe:	681b      	ldr	r3, [r3, #0]
    8cc0:	681b      	ldr	r3, [r3, #0]
    8cc2:	781b      	ldrb	r3, [r3, #0]
    8cc4:	061b      	lsls	r3, r3, #24
    8cc6:	0fdb      	lsrs	r3, r3, #31
    8cc8:	b2db      	uxtb	r3, r3
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d002      	beq.n	8cd4 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    8cce:	4b05      	ldr	r3, [pc, #20]	; (8ce4 <USB_Handler+0x2c>)
    8cd0:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    8cd2:	e001      	b.n	8cd8 <USB_Handler+0x20>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    8cd4:	4b04      	ldr	r3, [pc, #16]	; (8ce8 <USB_Handler+0x30>)
    8cd6:	4798      	blx	r3
	}
}
    8cd8:	46c0      	nop			; (mov r8, r8)
    8cda:	46bd      	mov	sp, r7
    8cdc:	bd80      	pop	{r7, pc}
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	20000188 	.word	0x20000188
    8ce4:	000073b1 	.word	0x000073b1
    8ce8:	00008705 	.word	0x00008705

00008cec <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	b082      	sub	sp, #8
    8cf0:	af00      	add	r7, sp, #0
    8cf2:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	2200      	movs	r2, #0
    8cf8:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    8cfa:	687b      	ldr	r3, [r7, #4]
    8cfc:	2201      	movs	r2, #1
    8cfe:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	2200      	movs	r2, #0
    8d04:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	2201      	movs	r2, #1
    8d0a:	70da      	strb	r2, [r3, #3]
}
    8d0c:	46c0      	nop			; (mov r8, r8)
    8d0e:	46bd      	mov	sp, r7
    8d10:	b002      	add	sp, #8
    8d12:	bd80      	pop	{r7, pc}

00008d14 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    8d14:	b580      	push	{r7, lr}
    8d16:	b08c      	sub	sp, #48	; 0x30
    8d18:	af00      	add	r7, sp, #0
    8d1a:	60f8      	str	r0, [r7, #12]
    8d1c:	60b9      	str	r1, [r7, #8]
    8d1e:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    8d20:	4bc4      	ldr	r3, [pc, #784]	; (9034 <usb_init+0x320>)
    8d22:	2200      	movs	r2, #0
    8d24:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    8d26:	4bc4      	ldr	r3, [pc, #784]	; (9038 <usb_init+0x324>)
    8d28:	68fa      	ldr	r2, [r7, #12]
    8d2a:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    8d2c:	68fb      	ldr	r3, [r7, #12]
    8d2e:	68ba      	ldr	r2, [r7, #8]
    8d30:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    8d32:	2120      	movs	r1, #32
    8d34:	2001      	movs	r0, #1
    8d36:	4bc1      	ldr	r3, [pc, #772]	; (903c <usb_init+0x328>)
    8d38:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    8d3a:	2318      	movs	r3, #24
    8d3c:	18fb      	adds	r3, r7, r3
    8d3e:	0018      	movs	r0, r3
    8d40:	4bbf      	ldr	r3, [pc, #764]	; (9040 <usb_init+0x32c>)
    8d42:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    8d44:	2318      	movs	r3, #24
    8d46:	18fb      	adds	r3, r7, r3
    8d48:	2206      	movs	r2, #6
    8d4a:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    8d4c:	2318      	movs	r3, #24
    8d4e:	18fb      	adds	r3, r7, r3
    8d50:	0019      	movs	r1, r3
    8d52:	2018      	movs	r0, #24
    8d54:	4bbb      	ldr	r3, [pc, #748]	; (9044 <usb_init+0x330>)
    8d56:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    8d58:	2318      	movs	r3, #24
    8d5a:	18fb      	adds	r3, r7, r3
    8d5c:	2206      	movs	r2, #6
    8d5e:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    8d60:	2318      	movs	r3, #24
    8d62:	18fb      	adds	r3, r7, r3
    8d64:	0019      	movs	r1, r3
    8d66:	2019      	movs	r0, #25
    8d68:	4bb6      	ldr	r3, [pc, #728]	; (9044 <usb_init+0x330>)
    8d6a:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    8d6c:	2314      	movs	r3, #20
    8d6e:	18fb      	adds	r3, r7, r3
    8d70:	0018      	movs	r0, r3
    8d72:	4bb5      	ldr	r3, [pc, #724]	; (9048 <usb_init+0x334>)
    8d74:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	789a      	ldrb	r2, [r3, #2]
    8d7a:	2314      	movs	r3, #20
    8d7c:	18fb      	adds	r3, r7, r3
    8d7e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    8d80:	2314      	movs	r3, #20
    8d82:	18fb      	adds	r3, r7, r3
    8d84:	0019      	movs	r1, r3
    8d86:	2006      	movs	r0, #6
    8d88:	4bb0      	ldr	r3, [pc, #704]	; (904c <usb_init+0x338>)
    8d8a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    8d8c:	2006      	movs	r0, #6
    8d8e:	4bb0      	ldr	r3, [pc, #704]	; (9050 <usb_init+0x33c>)
    8d90:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    8d92:	68ba      	ldr	r2, [r7, #8]
    8d94:	7813      	ldrb	r3, [r2, #0]
    8d96:	2101      	movs	r1, #1
    8d98:	430b      	orrs	r3, r1
    8d9a:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    8d9c:	46c0      	nop			; (mov r8, r8)
    8d9e:	68bb      	ldr	r3, [r7, #8]
    8da0:	789b      	ldrb	r3, [r3, #2]
    8da2:	07db      	lsls	r3, r3, #31
    8da4:	0fdb      	lsrs	r3, r3, #31
    8da6:	b2db      	uxtb	r3, r3
    8da8:	2b00      	cmp	r3, #0
    8daa:	d1f8      	bne.n	8d9e <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8dac:	4aa9      	ldr	r2, [pc, #676]	; (9054 <usb_init+0x340>)
    8dae:	78d3      	ldrb	r3, [r2, #3]
    8db0:	2103      	movs	r1, #3
    8db2:	438b      	bics	r3, r1
    8db4:	1c19      	adds	r1, r3, #0
    8db6:	2302      	movs	r3, #2
    8db8:	430b      	orrs	r3, r1
    8dba:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8dbc:	4aa5      	ldr	r2, [pc, #660]	; (9054 <usb_init+0x340>)
    8dbe:	78d3      	ldrb	r3, [r2, #3]
    8dc0:	210c      	movs	r1, #12
    8dc2:	438b      	bics	r3, r1
    8dc4:	1c19      	adds	r1, r3, #0
    8dc6:	2308      	movs	r3, #8
    8dc8:	430b      	orrs	r3, r1
    8dca:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    8dcc:	4ba2      	ldr	r3, [pc, #648]	; (9058 <usb_init+0x344>)
    8dce:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    8dd0:	0b5b      	lsrs	r3, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    8dd2:	221f      	movs	r2, #31
    8dd4:	4013      	ands	r3, r2
    8dd6:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    8dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dda:	2b1f      	cmp	r3, #31
    8ddc:	d101      	bne.n	8de2 <usb_init+0xce>
		pad_transn = 5;
    8dde:	2305      	movs	r3, #5
    8de0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    8de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8de4:	b2db      	uxtb	r3, r3
    8de6:	1c1a      	adds	r2, r3, #0
    8de8:	231f      	movs	r3, #31
    8dea:	4013      	ands	r3, r2
    8dec:	b2d9      	uxtb	r1, r3
    8dee:	68ba      	ldr	r2, [r7, #8]
    8df0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8df2:	1c08      	adds	r0, r1, #0
    8df4:	211f      	movs	r1, #31
    8df6:	4001      	ands	r1, r0
    8df8:	0188      	lsls	r0, r1, #6
    8dfa:	4998      	ldr	r1, [pc, #608]	; (905c <usb_init+0x348>)
    8dfc:	400b      	ands	r3, r1
    8dfe:	1c19      	adds	r1, r3, #0
    8e00:	1c03      	adds	r3, r0, #0
    8e02:	430b      	orrs	r3, r1
    8e04:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8e06:	4b94      	ldr	r3, [pc, #592]	; (9058 <usb_init+0x344>)
    8e08:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    8e0a:	0c9b      	lsrs	r3, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8e0c:	221f      	movs	r2, #31
    8e0e:	4013      	ands	r3, r2
    8e10:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    8e12:	6a3b      	ldr	r3, [r7, #32]
    8e14:	2b1f      	cmp	r3, #31
    8e16:	d101      	bne.n	8e1c <usb_init+0x108>
		pad_transp = 29;
    8e18:	231d      	movs	r3, #29
    8e1a:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    8e1c:	6a3b      	ldr	r3, [r7, #32]
    8e1e:	b2db      	uxtb	r3, r3
    8e20:	1c1a      	adds	r2, r3, #0
    8e22:	231f      	movs	r3, #31
    8e24:	4013      	ands	r3, r2
    8e26:	b2d9      	uxtb	r1, r3
    8e28:	68ba      	ldr	r2, [r7, #8]
    8e2a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8e2c:	1c08      	adds	r0, r1, #0
    8e2e:	211f      	movs	r1, #31
    8e30:	4008      	ands	r0, r1
    8e32:	211f      	movs	r1, #31
    8e34:	438b      	bics	r3, r1
    8e36:	1c19      	adds	r1, r3, #0
    8e38:	1c03      	adds	r3, r0, #0
    8e3a:	430b      	orrs	r3, r1
    8e3c:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    8e3e:	4b86      	ldr	r3, [pc, #536]	; (9058 <usb_init+0x344>)
    8e40:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    8e42:	0ddb      	lsrs	r3, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    8e44:	2207      	movs	r2, #7
    8e46:	4013      	ands	r3, r2
    8e48:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    8e4a:	69fb      	ldr	r3, [r7, #28]
    8e4c:	2b07      	cmp	r3, #7
    8e4e:	d101      	bne.n	8e54 <usb_init+0x140>
		pad_trim = 3;
    8e50:	2303      	movs	r3, #3
    8e52:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    8e54:	69fb      	ldr	r3, [r7, #28]
    8e56:	b2db      	uxtb	r3, r3
    8e58:	1c1a      	adds	r2, r3, #0
    8e5a:	2307      	movs	r3, #7
    8e5c:	4013      	ands	r3, r2
    8e5e:	b2d9      	uxtb	r1, r3
    8e60:	68ba      	ldr	r2, [r7, #8]
    8e62:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8e64:	1c08      	adds	r0, r1, #0
    8e66:	2107      	movs	r1, #7
    8e68:	4001      	ands	r1, r0
    8e6a:	0308      	lsls	r0, r1, #12
    8e6c:	497c      	ldr	r1, [pc, #496]	; (9060 <usb_init+0x34c>)
    8e6e:	400b      	ands	r3, r1
    8e70:	1c19      	adds	r1, r3, #0
    8e72:	1c03      	adds	r3, r0, #0
    8e74:	430b      	orrs	r3, r1
    8e76:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	7819      	ldrb	r1, [r3, #0]
    8e7c:	68ba      	ldr	r2, [r7, #8]
    8e7e:	7813      	ldrb	r3, [r2, #0]
    8e80:	01c8      	lsls	r0, r1, #7
    8e82:	217f      	movs	r1, #127	; 0x7f
    8e84:	400b      	ands	r3, r1
    8e86:	1c19      	adds	r1, r3, #0
    8e88:	1c03      	adds	r3, r0, #0
    8e8a:	430b      	orrs	r3, r1
    8e8c:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	7859      	ldrb	r1, [r3, #1]
    8e92:	68ba      	ldr	r2, [r7, #8]
    8e94:	7813      	ldrb	r3, [r2, #0]
    8e96:	2001      	movs	r0, #1
    8e98:	4001      	ands	r1, r0
    8e9a:	0088      	lsls	r0, r1, #2
    8e9c:	2104      	movs	r1, #4
    8e9e:	438b      	bics	r3, r1
    8ea0:	1c19      	adds	r1, r3, #0
    8ea2:	1c03      	adds	r3, r0, #0
    8ea4:	430b      	orrs	r3, r1
    8ea6:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    8ea8:	4a6e      	ldr	r2, [pc, #440]	; (9064 <usb_init+0x350>)
    8eaa:	68bb      	ldr	r3, [r7, #8]
    8eac:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	78db      	ldrb	r3, [r3, #3]
    8eb2:	2b01      	cmp	r3, #1
    8eb4:	d106      	bne.n	8ec4 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    8eb6:	68fb      	ldr	r3, [r7, #12]
    8eb8:	681a      	ldr	r2, [r3, #0]
    8eba:	8913      	ldrh	r3, [r2, #8]
    8ebc:	210c      	movs	r1, #12
    8ebe:	438b      	bics	r3, r1
    8ec0:	8113      	strh	r3, [r2, #8]
    8ec2:	e00c      	b.n	8ede <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	78db      	ldrb	r3, [r3, #3]
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d108      	bne.n	8ede <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    8ecc:	68fb      	ldr	r3, [r7, #12]
    8ece:	681a      	ldr	r2, [r3, #0]
    8ed0:	8913      	ldrh	r3, [r2, #8]
    8ed2:	210c      	movs	r1, #12
    8ed4:	438b      	bics	r3, r1
    8ed6:	1c19      	adds	r1, r3, #0
    8ed8:	2304      	movs	r3, #4
    8eda:	430b      	orrs	r3, r1
    8edc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    8ede:	2380      	movs	r3, #128	; 0x80
    8ee0:	005a      	lsls	r2, r3, #1
    8ee2:	4b60      	ldr	r3, [pc, #384]	; (9064 <usb_init+0x350>)
    8ee4:	2100      	movs	r1, #0
    8ee6:	0018      	movs	r0, r3
    8ee8:	4b5f      	ldr	r3, [pc, #380]	; (9068 <usb_init+0x354>)
    8eea:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8eec:	2300      	movs	r3, #0
    8eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ef0:	e009      	b.n	8f06 <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    8ef2:	68fa      	ldr	r2, [r7, #12]
    8ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ef6:	009b      	lsls	r3, r3, #2
    8ef8:	18d3      	adds	r3, r2, r3
    8efa:	3304      	adds	r3, #4
    8efc:	2200      	movs	r2, #0
    8efe:	601a      	str	r2, [r3, #0]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f02:	3301      	adds	r3, #1
    8f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f08:	2b07      	cmp	r3, #7
    8f0a:	d9f2      	bls.n	8ef2 <usb_init+0x1de>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8f0c:	2300      	movs	r3, #0
    8f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f10:	e016      	b.n	8f40 <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    8f12:	2300      	movs	r3, #0
    8f14:	62bb      	str	r3, [r7, #40]	; 0x28
    8f16:	e00d      	b.n	8f34 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    8f18:	68fa      	ldr	r2, [r7, #12]
    8f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f1c:	0099      	lsls	r1, r3, #2
    8f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f20:	18cb      	adds	r3, r1, r3
    8f22:	3308      	adds	r3, #8
    8f24:	009b      	lsls	r3, r3, #2
    8f26:	18d3      	adds	r3, r2, r3
    8f28:	3304      	adds	r3, #4
    8f2a:	2200      	movs	r2, #0
    8f2c:	601a      	str	r2, [r3, #0]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    8f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f30:	3301      	adds	r3, #1
    8f32:	62bb      	str	r3, [r7, #40]	; 0x28
    8f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f36:	2b03      	cmp	r3, #3
    8f38:	d9ee      	bls.n	8f18 <usb_init+0x204>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f3c:	3301      	adds	r3, #1
    8f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f42:	2b07      	cmp	r3, #7
    8f44:	d9e5      	bls.n	8f12 <usb_init+0x1fe>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    8f46:	68fb      	ldr	r3, [r7, #12]
    8f48:	22a4      	movs	r2, #164	; 0xa4
    8f4a:	2100      	movs	r1, #0
    8f4c:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    8f4e:	68fb      	ldr	r3, [r7, #12]
    8f50:	22a5      	movs	r2, #165	; 0xa5
    8f52:	2100      	movs	r1, #0
    8f54:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8f56:	2300      	movs	r3, #0
    8f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f5a:	e010      	b.n	8f7e <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    8f5c:	68fa      	ldr	r2, [r7, #12]
    8f5e:	21a6      	movs	r1, #166	; 0xa6
    8f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f62:	18d3      	adds	r3, r2, r3
    8f64:	185b      	adds	r3, r3, r1
    8f66:	2200      	movs	r2, #0
    8f68:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    8f6a:	68fa      	ldr	r2, [r7, #12]
    8f6c:	21ae      	movs	r1, #174	; 0xae
    8f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f70:	18d3      	adds	r3, r2, r3
    8f72:	185b      	adds	r3, r3, r1
    8f74:	2200      	movs	r2, #0
    8f76:	701a      	strb	r2, [r3, #0]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f7a:	3301      	adds	r3, #1
    8f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f80:	2b07      	cmp	r3, #7
    8f82:	d9eb      	bls.n	8f5c <usb_init+0x248>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    8f84:	2300      	movs	r3, #0
    8f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f88:	e008      	b.n	8f9c <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    8f8a:	68fb      	ldr	r3, [r7, #12]
    8f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8f8e:	322e      	adds	r2, #46	; 0x2e
    8f90:	0092      	lsls	r2, r2, #2
    8f92:	2100      	movs	r1, #0
    8f94:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    8f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f98:	3301      	adds	r3, #1
    8f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f9e:	2b06      	cmp	r3, #6
    8fa0:	d9f3      	bls.n	8f8a <usb_init+0x276>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    8fa2:	2300      	movs	r3, #0
    8fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    8fa6:	e016      	b.n	8fd6 <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    8fa8:	2300      	movs	r3, #0
    8faa:	62bb      	str	r3, [r7, #40]	; 0x28
    8fac:	e00d      	b.n	8fca <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    8fae:	68fa      	ldr	r2, [r7, #12]
    8fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8fb2:	0099      	lsls	r1, r3, #2
    8fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fb6:	18cb      	adds	r3, r1, r3
    8fb8:	3334      	adds	r3, #52	; 0x34
    8fba:	009b      	lsls	r3, r3, #2
    8fbc:	18d3      	adds	r3, r2, r3
    8fbe:	3304      	adds	r3, #4
    8fc0:	2200      	movs	r2, #0
    8fc2:	601a      	str	r2, [r3, #0]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    8fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fc6:	3301      	adds	r3, #1
    8fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    8fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fcc:	2b03      	cmp	r3, #3
    8fce:	d9ee      	bls.n	8fae <usb_init+0x29a>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    8fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8fd2:	3301      	adds	r3, #1
    8fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    8fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8fd8:	2b07      	cmp	r3, #7
    8fda:	d9e5      	bls.n	8fa8 <usb_init+0x294>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    8fdc:	68fa      	ldr	r2, [r7, #12]
    8fde:	23aa      	movs	r3, #170	; 0xaa
    8fe0:	005b      	lsls	r3, r3, #1
    8fe2:	2100      	movs	r1, #0
    8fe4:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    8fe6:	68fa      	ldr	r2, [r7, #12]
    8fe8:	23ab      	movs	r3, #171	; 0xab
    8fea:	005b      	lsls	r3, r3, #1
    8fec:	2100      	movs	r1, #0
    8fee:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    8ff0:	2300      	movs	r3, #0
    8ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    8ff4:	e012      	b.n	901c <usb_init+0x308>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    8ff6:	68f9      	ldr	r1, [r7, #12]
    8ff8:	23ac      	movs	r3, #172	; 0xac
    8ffa:	005b      	lsls	r3, r3, #1
    8ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8ffe:	188a      	adds	r2, r1, r2
    9000:	18d3      	adds	r3, r2, r3
    9002:	2200      	movs	r2, #0
    9004:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    9006:	68f9      	ldr	r1, [r7, #12]
    9008:	23b0      	movs	r3, #176	; 0xb0
    900a:	005b      	lsls	r3, r3, #1
    900c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    900e:	188a      	adds	r2, r1, r2
    9010:	18d3      	adds	r3, r2, r3
    9012:	2200      	movs	r2, #0
    9014:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    9016:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9018:	3301      	adds	r3, #1
    901a:	62bb      	str	r3, [r7, #40]	; 0x28
    901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    901e:	2b07      	cmp	r3, #7
    9020:	d9e9      	bls.n	8ff6 <usb_init+0x2e2>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    9022:	2007      	movs	r0, #7
    9024:	4b11      	ldr	r3, [pc, #68]	; (906c <usb_init+0x358>)
    9026:	4798      	blx	r3

	return STATUS_OK;
    9028:	2300      	movs	r3, #0
}
    902a:	0018      	movs	r0, r3
    902c:	46bd      	mov	sp, r7
    902e:	b00c      	add	sp, #48	; 0x30
    9030:	bd80      	pop	{r7, pc}
    9032:	46c0      	nop			; (mov r8, r8)
    9034:	200001a0 	.word	0x200001a0
    9038:	20000188 	.word	0x20000188
    903c:	00007301 	.word	0x00007301
    9040:	0000735d 	.word	0x0000735d
    9044:	00005a61 	.word	0x00005a61
    9048:	000072e9 	.word	0x000072e9
    904c:	00005775 	.word	0x00005775
    9050:	000057b9 	.word	0x000057b9
    9054:	41005000 	.word	0x41005000
    9058:	00806024 	.word	0x00806024
    905c:	fffff83f 	.word	0xfffff83f
    9060:	ffff8fff 	.word	0xffff8fff
    9064:	20000500 	.word	0x20000500
    9068:	00009dbf 	.word	0x00009dbf
    906c:	00007385 	.word	0x00007385

00009070 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9070:	b580      	push	{r7, lr}
    9072:	b082      	sub	sp, #8
    9074:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9076:	4b2f      	ldr	r3, [pc, #188]	; (9134 <Reset_Handler+0xc4>)
    9078:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    907a:	4b2f      	ldr	r3, [pc, #188]	; (9138 <Reset_Handler+0xc8>)
    907c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    907e:	687a      	ldr	r2, [r7, #4]
    9080:	683b      	ldr	r3, [r7, #0]
    9082:	429a      	cmp	r2, r3
    9084:	d00c      	beq.n	90a0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9086:	e007      	b.n	9098 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9088:	683b      	ldr	r3, [r7, #0]
    908a:	1d1a      	adds	r2, r3, #4
    908c:	603a      	str	r2, [r7, #0]
    908e:	687a      	ldr	r2, [r7, #4]
    9090:	1d11      	adds	r1, r2, #4
    9092:	6079      	str	r1, [r7, #4]
    9094:	6812      	ldr	r2, [r2, #0]
    9096:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    9098:	683a      	ldr	r2, [r7, #0]
    909a:	4b28      	ldr	r3, [pc, #160]	; (913c <Reset_Handler+0xcc>)
    909c:	429a      	cmp	r2, r3
    909e:	d3f3      	bcc.n	9088 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    90a0:	4b27      	ldr	r3, [pc, #156]	; (9140 <Reset_Handler+0xd0>)
    90a2:	603b      	str	r3, [r7, #0]
    90a4:	e004      	b.n	90b0 <Reset_Handler+0x40>
                *pDest++ = 0;
    90a6:	683b      	ldr	r3, [r7, #0]
    90a8:	1d1a      	adds	r2, r3, #4
    90aa:	603a      	str	r2, [r7, #0]
    90ac:	2200      	movs	r2, #0
    90ae:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    90b0:	683a      	ldr	r2, [r7, #0]
    90b2:	4b24      	ldr	r3, [pc, #144]	; (9144 <Reset_Handler+0xd4>)
    90b4:	429a      	cmp	r2, r3
    90b6:	d3f6      	bcc.n	90a6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    90b8:	4b23      	ldr	r3, [pc, #140]	; (9148 <Reset_Handler+0xd8>)
    90ba:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    90bc:	4b23      	ldr	r3, [pc, #140]	; (914c <Reset_Handler+0xdc>)
    90be:	687a      	ldr	r2, [r7, #4]
    90c0:	21ff      	movs	r1, #255	; 0xff
    90c2:	438a      	bics	r2, r1
    90c4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    90c6:	4a22      	ldr	r2, [pc, #136]	; (9150 <Reset_Handler+0xe0>)
    90c8:	2390      	movs	r3, #144	; 0x90
    90ca:	005b      	lsls	r3, r3, #1
    90cc:	2102      	movs	r1, #2
    90ce:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    90d0:	4a20      	ldr	r2, [pc, #128]	; (9154 <Reset_Handler+0xe4>)
    90d2:	78d3      	ldrb	r3, [r2, #3]
    90d4:	2103      	movs	r1, #3
    90d6:	438b      	bics	r3, r1
    90d8:	1c19      	adds	r1, r3, #0
    90da:	2302      	movs	r3, #2
    90dc:	430b      	orrs	r3, r1
    90de:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    90e0:	4a1c      	ldr	r2, [pc, #112]	; (9154 <Reset_Handler+0xe4>)
    90e2:	78d3      	ldrb	r3, [r2, #3]
    90e4:	210c      	movs	r1, #12
    90e6:	438b      	bics	r3, r1
    90e8:	1c19      	adds	r1, r3, #0
    90ea:	2308      	movs	r3, #8
    90ec:	430b      	orrs	r3, r1
    90ee:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    90f0:	4a19      	ldr	r2, [pc, #100]	; (9158 <Reset_Handler+0xe8>)
    90f2:	7b93      	ldrb	r3, [r2, #14]
    90f4:	2130      	movs	r1, #48	; 0x30
    90f6:	438b      	bics	r3, r1
    90f8:	1c19      	adds	r1, r3, #0
    90fa:	2320      	movs	r3, #32
    90fc:	430b      	orrs	r3, r1
    90fe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9100:	4a15      	ldr	r2, [pc, #84]	; (9158 <Reset_Handler+0xe8>)
    9102:	7b93      	ldrb	r3, [r2, #14]
    9104:	210c      	movs	r1, #12
    9106:	438b      	bics	r3, r1
    9108:	1c19      	adds	r1, r3, #0
    910a:	2308      	movs	r3, #8
    910c:	430b      	orrs	r3, r1
    910e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9110:	4a11      	ldr	r2, [pc, #68]	; (9158 <Reset_Handler+0xe8>)
    9112:	7b93      	ldrb	r3, [r2, #14]
    9114:	2103      	movs	r1, #3
    9116:	438b      	bics	r3, r1
    9118:	1c19      	adds	r1, r3, #0
    911a:	2302      	movs	r3, #2
    911c:	430b      	orrs	r3, r1
    911e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9120:	4a0e      	ldr	r2, [pc, #56]	; (915c <Reset_Handler+0xec>)
    9122:	6853      	ldr	r3, [r2, #4]
    9124:	2180      	movs	r1, #128	; 0x80
    9126:	430b      	orrs	r3, r1
    9128:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    912a:	4b0d      	ldr	r3, [pc, #52]	; (9160 <Reset_Handler+0xf0>)
    912c:	4798      	blx	r3

        /* Branch to main function */
        main();
    912e:	4b0d      	ldr	r3, [pc, #52]	; (9164 <Reset_Handler+0xf4>)
    9130:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    9132:	e7fe      	b.n	9132 <Reset_Handler+0xc2>
    9134:	00009ef0 	.word	0x00009ef0
    9138:	20000000 	.word	0x20000000
    913c:	200000e0 	.word	0x200000e0
    9140:	200000e0 	.word	0x200000e0
    9144:	2000062c 	.word	0x2000062c
    9148:	00000000 	.word	0x00000000
    914c:	e000ed00 	.word	0xe000ed00
    9150:	41007000 	.word	0x41007000
    9154:	41005000 	.word	0x41005000
    9158:	41004800 	.word	0x41004800
    915c:	41004000 	.word	0x41004000
    9160:	00009d61 	.word	0x00009d61
    9164:	00009465 	.word	0x00009465

00009168 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9168:	b580      	push	{r7, lr}
    916a:	af00      	add	r7, sp, #0
        while (1) {
        }
    916c:	e7fe      	b.n	916c <Dummy_Handler+0x4>
    916e:	46c0      	nop			; (mov r8, r8)

00009170 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9170:	b580      	push	{r7, lr}
    9172:	b084      	sub	sp, #16
    9174:	af00      	add	r7, sp, #0
    9176:	0002      	movs	r2, r0
    9178:	1dfb      	adds	r3, r7, #7
    917a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    917c:	230f      	movs	r3, #15
    917e:	18fb      	adds	r3, r7, r3
    9180:	1dfa      	adds	r2, r7, #7
    9182:	7812      	ldrb	r2, [r2, #0]
    9184:	09d2      	lsrs	r2, r2, #7
    9186:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9188:	230e      	movs	r3, #14
    918a:	18fb      	adds	r3, r7, r3
    918c:	1dfa      	adds	r2, r7, #7
    918e:	7812      	ldrb	r2, [r2, #0]
    9190:	0952      	lsrs	r2, r2, #5
    9192:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9194:	4b0d      	ldr	r3, [pc, #52]	; (91cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9196:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    9198:	230f      	movs	r3, #15
    919a:	18fb      	adds	r3, r7, r3
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	2b00      	cmp	r3, #0
    91a0:	d10f      	bne.n	91c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    91a2:	230f      	movs	r3, #15
    91a4:	18fb      	adds	r3, r7, r3
    91a6:	781b      	ldrb	r3, [r3, #0]
    91a8:	009b      	lsls	r3, r3, #2
    91aa:	2210      	movs	r2, #16
    91ac:	4694      	mov	ip, r2
    91ae:	44bc      	add	ip, r7
    91b0:	4463      	add	r3, ip
    91b2:	3b08      	subs	r3, #8
    91b4:	681a      	ldr	r2, [r3, #0]
    91b6:	230e      	movs	r3, #14
    91b8:	18fb      	adds	r3, r7, r3
    91ba:	781b      	ldrb	r3, [r3, #0]
    91bc:	01db      	lsls	r3, r3, #7
    91be:	18d3      	adds	r3, r2, r3
    91c0:	e000      	b.n	91c4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    91c2:	2300      	movs	r3, #0
	}
}
    91c4:	0018      	movs	r0, r3
    91c6:	46bd      	mov	sp, r7
    91c8:	b004      	add	sp, #16
    91ca:	bd80      	pop	{r7, pc}
    91cc:	41004400 	.word	0x41004400

000091d0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    91d0:	b580      	push	{r7, lr}
    91d2:	b082      	sub	sp, #8
    91d4:	af00      	add	r7, sp, #0
    91d6:	0002      	movs	r2, r0
    91d8:	1dfb      	adds	r3, r7, #7
    91da:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    91dc:	1dfb      	adds	r3, r7, #7
    91de:	781b      	ldrb	r3, [r3, #0]
    91e0:	0018      	movs	r0, r3
    91e2:	4b03      	ldr	r3, [pc, #12]	; (91f0 <port_get_group_from_gpio_pin+0x20>)
    91e4:	4798      	blx	r3
    91e6:	0003      	movs	r3, r0
}
    91e8:	0018      	movs	r0, r3
    91ea:	46bd      	mov	sp, r7
    91ec:	b002      	add	sp, #8
    91ee:	bd80      	pop	{r7, pc}
    91f0:	00009171 	.word	0x00009171

000091f4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    91f4:	b580      	push	{r7, lr}
    91f6:	b084      	sub	sp, #16
    91f8:	af00      	add	r7, sp, #0
    91fa:	0002      	movs	r2, r0
    91fc:	1dfb      	adds	r3, r7, #7
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	1dbb      	adds	r3, r7, #6
    9202:	1c0a      	adds	r2, r1, #0
    9204:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9206:	1dfb      	adds	r3, r7, #7
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	0018      	movs	r0, r3
    920c:	4b0d      	ldr	r3, [pc, #52]	; (9244 <port_pin_set_output_level+0x50>)
    920e:	4798      	blx	r3
    9210:	0003      	movs	r3, r0
    9212:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9214:	1dfb      	adds	r3, r7, #7
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	221f      	movs	r2, #31
    921a:	4013      	ands	r3, r2
    921c:	2201      	movs	r2, #1
    921e:	409a      	lsls	r2, r3
    9220:	0013      	movs	r3, r2
    9222:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9224:	1dbb      	adds	r3, r7, #6
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	2b00      	cmp	r3, #0
    922a:	d003      	beq.n	9234 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    922c:	68fb      	ldr	r3, [r7, #12]
    922e:	68ba      	ldr	r2, [r7, #8]
    9230:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9232:	e002      	b.n	923a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9234:	68fb      	ldr	r3, [r7, #12]
    9236:	68ba      	ldr	r2, [r7, #8]
    9238:	615a      	str	r2, [r3, #20]
	}
}
    923a:	46c0      	nop			; (mov r8, r8)
    923c:	46bd      	mov	sp, r7
    923e:	b004      	add	sp, #16
    9240:	bd80      	pop	{r7, pc}
    9242:	46c0      	nop			; (mov r8, r8)
    9244:	000091d1 	.word	0x000091d1

00009248 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9248:	b580      	push	{r7, lr}
    924a:	b084      	sub	sp, #16
    924c:	af00      	add	r7, sp, #0
    924e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	681b      	ldr	r3, [r3, #0]
    9254:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    9256:	68fb      	ldr	r3, [r7, #12]
    9258:	69db      	ldr	r3, [r3, #28]
    925a:	1e5a      	subs	r2, r3, #1
    925c:	4193      	sbcs	r3, r2
    925e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9260:	0018      	movs	r0, r3
    9262:	46bd      	mov	sp, r7
    9264:	b004      	add	sp, #16
    9266:	bd80      	pop	{r7, pc}

00009268 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9268:	b580      	push	{r7, lr}
    926a:	b082      	sub	sp, #8
    926c:	af00      	add	r7, sp, #0
    926e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    9270:	46c0      	nop			; (mov r8, r8)
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	0018      	movs	r0, r3
    9276:	4b04      	ldr	r3, [pc, #16]	; (9288 <_usart_wait_for_sync+0x20>)
    9278:	4798      	blx	r3
    927a:	1e03      	subs	r3, r0, #0
    927c:	d1f9      	bne.n	9272 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    927e:	46c0      	nop			; (mov r8, r8)
    9280:	46bd      	mov	sp, r7
    9282:	b002      	add	sp, #8
    9284:	bd80      	pop	{r7, pc}
    9286:	46c0      	nop			; (mov r8, r8)
    9288:	00009249 	.word	0x00009249

0000928c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    928c:	b580      	push	{r7, lr}
    928e:	b082      	sub	sp, #8
    9290:	af00      	add	r7, sp, #0
    9292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	2280      	movs	r2, #128	; 0x80
    9298:	05d2      	lsls	r2, r2, #23
    929a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	2200      	movs	r2, #0
    92a0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	22ff      	movs	r2, #255	; 0xff
    92a6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	2200      	movs	r2, #0
    92ac:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	2200      	movs	r2, #0
    92b2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	2296      	movs	r2, #150	; 0x96
    92b8:	0192      	lsls	r2, r2, #6
    92ba:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	2224      	movs	r2, #36	; 0x24
    92c0:	2101      	movs	r1, #1
    92c2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	2225      	movs	r2, #37	; 0x25
    92c8:	2101      	movs	r1, #1
    92ca:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	2226      	movs	r2, #38	; 0x26
    92d0:	2100      	movs	r1, #0
    92d2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    92d4:	687b      	ldr	r3, [r7, #4]
    92d6:	2227      	movs	r2, #39	; 0x27
    92d8:	2100      	movs	r1, #0
    92da:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	2200      	movs	r2, #0
    92e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	2288      	movs	r2, #136	; 0x88
    92e6:	0352      	lsls	r2, r2, #13
    92e8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	222c      	movs	r2, #44	; 0x2c
    92ee:	2100      	movs	r1, #0
    92f0:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	222d      	movs	r2, #45	; 0x2d
    92f6:	2100      	movs	r1, #0
    92f8:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	2200      	movs	r2, #0
    92fe:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	2200      	movs	r2, #0
    9304:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	2200      	movs	r2, #0
    930a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	2200      	movs	r2, #0
    9310:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	2200      	movs	r2, #0
    9316:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9318:	687b      	ldr	r3, [r7, #4]
    931a:	2200      	movs	r2, #0
    931c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	2200      	movs	r2, #0
    9322:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	2200      	movs	r2, #0
    9328:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	2200      	movs	r2, #0
    932e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9330:	687b      	ldr	r3, [r7, #4]
    9332:	2200      	movs	r2, #0
    9334:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9336:	687b      	ldr	r3, [r7, #4]
    9338:	2213      	movs	r2, #19
    933a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    933c:	687b      	ldr	r3, [r7, #4]
    933e:	2200      	movs	r2, #0
    9340:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    9342:	46c0      	nop			; (mov r8, r8)
    9344:	46bd      	mov	sp, r7
    9346:	b002      	add	sp, #8
    9348:	bd80      	pop	{r7, pc}
    934a:	46c0      	nop			; (mov r8, r8)

0000934c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    934c:	b580      	push	{r7, lr}
    934e:	b084      	sub	sp, #16
    9350:	af00      	add	r7, sp, #0
    9352:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9354:	687b      	ldr	r3, [r7, #4]
    9356:	681b      	ldr	r3, [r3, #0]
    9358:	60fb      	str	r3, [r7, #12]
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	0018      	movs	r0, r3
    935e:	4b06      	ldr	r3, [pc, #24]	; (9378 <usart_enable+0x2c>)
    9360:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9362:	68fb      	ldr	r3, [r7, #12]
    9364:	681b      	ldr	r3, [r3, #0]
    9366:	2202      	movs	r2, #2
    9368:	431a      	orrs	r2, r3
    936a:	68fb      	ldr	r3, [r7, #12]
    936c:	601a      	str	r2, [r3, #0]
}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	46bd      	mov	sp, r7
    9372:	b004      	add	sp, #16
    9374:	bd80      	pop	{r7, pc}
    9376:	46c0      	nop			; (mov r8, r8)
    9378:	00009269 	.word	0x00009269

0000937c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    937c:	b580      	push	{r7, lr}
    937e:	b082      	sub	sp, #8
    9380:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    9382:	1dfb      	adds	r3, r7, #7
    9384:	2200      	movs	r2, #0
    9386:	701a      	strb	r2, [r3, #0]
    9388:	e009      	b.n	939e <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    938a:	1dfb      	adds	r3, r7, #7
    938c:	781b      	ldrb	r3, [r3, #0]
    938e:	4a09      	ldr	r2, [pc, #36]	; (93b4 <sleepmgr_init+0x38>)
    9390:	2100      	movs	r1, #0
    9392:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    9394:	1dfb      	adds	r3, r7, #7
    9396:	781a      	ldrb	r2, [r3, #0]
    9398:	1dfb      	adds	r3, r7, #7
    939a:	3201      	adds	r2, #1
    939c:	701a      	strb	r2, [r3, #0]
    939e:	1dfb      	adds	r3, r7, #7
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	2b03      	cmp	r3, #3
    93a4:	d9f1      	bls.n	938a <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    93a6:	4b03      	ldr	r3, [pc, #12]	; (93b4 <sleepmgr_init+0x38>)
    93a8:	2201      	movs	r2, #1
    93aa:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    93ac:	46c0      	nop			; (mov r8, r8)
    93ae:	46bd      	mov	sp, r7
    93b0:	b002      	add	sp, #8
    93b2:	bd80      	pop	{r7, pc}
    93b4:	200002f0 	.word	0x200002f0

000093b8 <configure_radio>:
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	//port_pin_set_config(PIN_PA0, &config_port_pin);
}

//configure the RFM69 module
void configure_radio(void) {
    93b8:	b580      	push	{r7, lr}
    93ba:	af00      	add	r7, sp, #0
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    93bc:	2200      	movs	r2, #0
    93be:	2102      	movs	r1, #2
    93c0:	205b      	movs	r0, #91	; 0x5b
    93c2:	4b06      	ldr	r3, [pc, #24]	; (93dc <configure_radio+0x24>)
    93c4:	4798      	blx	r3
	RFM_setHighPower(true);
    93c6:	2001      	movs	r0, #1
    93c8:	4b05      	ldr	r3, [pc, #20]	; (93e0 <configure_radio+0x28>)
    93ca:	4798      	blx	r3
	
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    93cc:	4b05      	ldr	r3, [pc, #20]	; (93e4 <configure_radio+0x2c>)
    93ce:	0018      	movs	r0, r3
    93d0:	4b05      	ldr	r3, [pc, #20]	; (93e8 <configure_radio+0x30>)
    93d2:	4798      	blx	r3
}
    93d4:	46c0      	nop			; (mov r8, r8)
    93d6:	46bd      	mov	sp, r7
    93d8:	bd80      	pop	{r7, pc}
    93da:	46c0      	nop			; (mov r8, r8)
    93dc:	00002729 	.word	0x00002729
    93e0:	00002671 	.word	0x00002671
    93e4:	00009ebc 	.word	0x00009ebc
    93e8:	00002f75 	.word	0x00002f75

000093ec <configure_usart>:

//Configure the USART port
void configure_usart(void){
    93ec:	b580      	push	{r7, lr}
    93ee:	b090      	sub	sp, #64	; 0x40
    93f0:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    93f2:	003b      	movs	r3, r7
    93f4:	0018      	movs	r0, r3
    93f6:	4b14      	ldr	r3, [pc, #80]	; (9448 <configure_usart+0x5c>)
    93f8:	4798      	blx	r3
	config_usart.baudrate = 57600;
    93fa:	003b      	movs	r3, r7
    93fc:	22e1      	movs	r2, #225	; 0xe1
    93fe:	0212      	lsls	r2, r2, #8
    9400:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    9402:	003b      	movs	r3, r7
    9404:	2280      	movs	r2, #128	; 0x80
    9406:	0352      	lsls	r2, r2, #13
    9408:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
    940a:	003b      	movs	r3, r7
    940c:	4a0f      	ldr	r2, [pc, #60]	; (944c <configure_usart+0x60>)
    940e:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;
    9410:	003b      	movs	r3, r7
    9412:	4a0f      	ldr	r2, [pc, #60]	; (9450 <configure_usart+0x64>)
    9414:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    9416:	003b      	movs	r3, r7
    9418:	2201      	movs	r2, #1
    941a:	4252      	negs	r2, r2
    941c:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    941e:	003b      	movs	r3, r7
    9420:	2201      	movs	r2, #1
    9422:	4252      	negs	r2, r2
    9424:	63da      	str	r2, [r3, #60]	; 0x3c

	while(usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK){}
    9426:	46c0      	nop			; (mov r8, r8)
    9428:	003a      	movs	r2, r7
    942a:	490a      	ldr	r1, [pc, #40]	; (9454 <configure_usart+0x68>)
    942c:	4b0a      	ldr	r3, [pc, #40]	; (9458 <configure_usart+0x6c>)
    942e:	0018      	movs	r0, r3
    9430:	4b0a      	ldr	r3, [pc, #40]	; (945c <configure_usart+0x70>)
    9432:	4798      	blx	r3
    9434:	1e03      	subs	r3, r0, #0
    9436:	d1f7      	bne.n	9428 <configure_usart+0x3c>

	usart_enable(&usart_instance);
    9438:	4b07      	ldr	r3, [pc, #28]	; (9458 <configure_usart+0x6c>)
    943a:	0018      	movs	r0, r3
    943c:	4b08      	ldr	r3, [pc, #32]	; (9460 <configure_usart+0x74>)
    943e:	4798      	blx	r3
}
    9440:	46c0      	nop			; (mov r8, r8)
    9442:	46bd      	mov	sp, r7
    9444:	b010      	add	sp, #64	; 0x40
    9446:	bd80      	pop	{r7, pc}
    9448:	0000928d 	.word	0x0000928d
    944c:	00280003 	.word	0x00280003
    9450:	00290003 	.word	0x00290003
    9454:	42001800 	.word	0x42001800
    9458:	20000600 	.word	0x20000600
    945c:	00001a75 	.word	0x00001a75
    9460:	0000934d 	.word	0x0000934d

00009464 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    9464:	b590      	push	{r4, r7, lr}
    9466:	b085      	sub	sp, #20
    9468:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    946a:	4bd3      	ldr	r3, [pc, #844]	; (97b8 <main+0x354>)
    946c:	2201      	movs	r2, #1
    946e:	701a      	strb	r2, [r3, #0]
    9470:	f3bf 8f5f 	dmb	sy
    9474:	b662      	cpsie	i
	system_init();
    9476:	4bd1      	ldr	r3, [pc, #836]	; (97bc <main+0x358>)
    9478:	4798      	blx	r3
	configure_radio();
    947a:	4bd1      	ldr	r3, [pc, #836]	; (97c0 <main+0x35c>)
    947c:	4798      	blx	r3
	configure_usart();
    947e:	4bd1      	ldr	r3, [pc, #836]	; (97c4 <main+0x360>)
    9480:	4798      	blx	r3
	//configure_LED_PWM();

	// Initialize the sleep manager
	sleepmgr_init();
    9482:	4bd1      	ldr	r3, [pc, #836]	; (97c8 <main+0x364>)
    9484:	4798      	blx	r3
	ui_init();
    9486:	4bd1      	ldr	r3, [pc, #836]	; (97cc <main+0x368>)
    9488:	4798      	blx	r3
	ui_powerdown();
    948a:	4bd1      	ldr	r3, [pc, #836]	; (97d0 <main+0x36c>)
    948c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    948e:	4bd1      	ldr	r3, [pc, #836]	; (97d4 <main+0x370>)
    9490:	4798      	blx	r3
	//xbee_sendbuffer[2] = 0x02;
	//xbee_sendbuffer[3] = 0x03;
	//while(usart_write_buffer_wait(&usart_instance, xbee_sendbuffer, sizeof(xbee_sendbuffer)) != STATUS_OK){}

		// this will receive the mouse location from the camera module
		if (usart_read_buffer_wait(&usart_instance, xbee_receivebuffer, sizeof(xbee_receivebuffer)) == STATUS_OK) 
    9492:	49d1      	ldr	r1, [pc, #836]	; (97d8 <main+0x374>)
    9494:	4bd1      	ldr	r3, [pc, #836]	; (97dc <main+0x378>)
    9496:	2204      	movs	r2, #4
    9498:	0018      	movs	r0, r3
    949a:	4bd1      	ldr	r3, [pc, #836]	; (97e0 <main+0x37c>)
    949c:	4798      	blx	r3
    949e:	1e03      	subs	r3, r0, #0
    94a0:	d000      	beq.n	94a4 <main+0x40>
    94a2:	e166      	b.n	9772 <main+0x30e>
		{
			//info received from camera module (mouse movement)
			if (xbee_receivebuffer[0] == 'Y' && xbee_receivebuffer[1] == 'C' && xbee_receivebuffer[2] == 'Y' && xbee_receivebuffer[3] == 'C'){ // set the system into calibration mode when button is pressed on camera
    94a4:	4bcc      	ldr	r3, [pc, #816]	; (97d8 <main+0x374>)
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	2b59      	cmp	r3, #89	; 0x59
    94aa:	d10f      	bne.n	94cc <main+0x68>
    94ac:	4bca      	ldr	r3, [pc, #808]	; (97d8 <main+0x374>)
    94ae:	785b      	ldrb	r3, [r3, #1]
    94b0:	2b43      	cmp	r3, #67	; 0x43
    94b2:	d10b      	bne.n	94cc <main+0x68>
    94b4:	4bc8      	ldr	r3, [pc, #800]	; (97d8 <main+0x374>)
    94b6:	789b      	ldrb	r3, [r3, #2]
    94b8:	2b59      	cmp	r3, #89	; 0x59
    94ba:	d107      	bne.n	94cc <main+0x68>
    94bc:	4bc6      	ldr	r3, [pc, #792]	; (97d8 <main+0x374>)
    94be:	78db      	ldrb	r3, [r3, #3]
    94c0:	2b43      	cmp	r3, #67	; 0x43
    94c2:	d103      	bne.n	94cc <main+0x68>
				calibration = true;
    94c4:	4bc7      	ldr	r3, [pc, #796]	; (97e4 <main+0x380>)
    94c6:	2201      	movs	r2, #1
    94c8:	701a      	strb	r2, [r3, #0]
    94ca:	e123      	b.n	9714 <main+0x2b0>
			}

			else if (xbee_receivebuffer[0] == 'N' && xbee_receivebuffer[1] == 'C' && xbee_receivebuffer[2] == 'N' && xbee_receivebuffer[3] == 'C'){ // set the system to regular operation mode when camera sends a 'N' packet
    94cc:	4bc2      	ldr	r3, [pc, #776]	; (97d8 <main+0x374>)
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	2b4e      	cmp	r3, #78	; 0x4e
    94d2:	d10f      	bne.n	94f4 <main+0x90>
    94d4:	4bc0      	ldr	r3, [pc, #768]	; (97d8 <main+0x374>)
    94d6:	785b      	ldrb	r3, [r3, #1]
    94d8:	2b43      	cmp	r3, #67	; 0x43
    94da:	d10b      	bne.n	94f4 <main+0x90>
    94dc:	4bbe      	ldr	r3, [pc, #760]	; (97d8 <main+0x374>)
    94de:	789b      	ldrb	r3, [r3, #2]
    94e0:	2b4e      	cmp	r3, #78	; 0x4e
    94e2:	d107      	bne.n	94f4 <main+0x90>
    94e4:	4bbc      	ldr	r3, [pc, #752]	; (97d8 <main+0x374>)
    94e6:	78db      	ldrb	r3, [r3, #3]
    94e8:	2b43      	cmp	r3, #67	; 0x43
    94ea:	d103      	bne.n	94f4 <main+0x90>
				calibration = false;
    94ec:	4bbd      	ldr	r3, [pc, #756]	; (97e4 <main+0x380>)
    94ee:	2200      	movs	r2, #0
    94f0:	701a      	strb	r2, [r3, #0]
    94f2:	e10f      	b.n	9714 <main+0x2b0>
			}
			
			else {//if (laserEnabled) {
				lx = x;
    94f4:	4bbc      	ldr	r3, [pc, #752]	; (97e8 <main+0x384>)
    94f6:	2200      	movs	r2, #0
    94f8:	5e9a      	ldrsh	r2, [r3, r2]
    94fa:	4bbc      	ldr	r3, [pc, #752]	; (97ec <main+0x388>)
    94fc:	801a      	strh	r2, [r3, #0]
				ly = y;
    94fe:	4bbc      	ldr	r3, [pc, #752]	; (97f0 <main+0x38c>)
    9500:	2200      	movs	r2, #0
    9502:	5e9a      	ldrsh	r2, [r3, r2]
    9504:	4bbb      	ldr	r3, [pc, #748]	; (97f4 <main+0x390>)
    9506:	801a      	strh	r2, [r3, #0]
				xCount = 0;
    9508:	4bbb      	ldr	r3, [pc, #748]	; (97f8 <main+0x394>)
    950a:	2200      	movs	r2, #0
    950c:	601a      	str	r2, [r3, #0]
				yCount = 0;
    950e:	4bbb      	ldr	r3, [pc, #748]	; (97fc <main+0x398>)
    9510:	2200      	movs	r2, #0
    9512:	601a      	str	r2, [r3, #0]

				for (int i = 0; i < 4; i++) {
    9514:	2300      	movs	r3, #0
    9516:	60fb      	str	r3, [r7, #12]
    9518:	e06f      	b.n	95fa <main+0x196>
					//x LSB 00<data>	x MSB 01<data>
					//y LSB 10<data>	y MSB 11<data>
					switch (xbee_receivebuffer[i] >> 6) {
    951a:	4aaf      	ldr	r2, [pc, #700]	; (97d8 <main+0x374>)
    951c:	68fb      	ldr	r3, [r7, #12]
    951e:	18d3      	adds	r3, r2, r3
    9520:	781b      	ldrb	r3, [r3, #0]
    9522:	099b      	lsrs	r3, r3, #6
    9524:	b2db      	uxtb	r3, r3
    9526:	2b01      	cmp	r3, #1
    9528:	d01c      	beq.n	9564 <main+0x100>
    952a:	dc02      	bgt.n	9532 <main+0xce>
    952c:	2b00      	cmp	r3, #0
    952e:	d005      	beq.n	953c <main+0xd8>
    9530:	e060      	b.n	95f4 <main+0x190>
    9532:	2b02      	cmp	r3, #2
    9534:	d030      	beq.n	9598 <main+0x134>
    9536:	2b03      	cmp	r3, #3
    9538:	d042      	beq.n	95c0 <main+0x15c>
    953a:	e05b      	b.n	95f4 <main+0x190>
						case 0: //x LSB
						xCount += 2;
    953c:	4bae      	ldr	r3, [pc, #696]	; (97f8 <main+0x394>)
    953e:	681b      	ldr	r3, [r3, #0]
    9540:	1c9a      	adds	r2, r3, #2
    9542:	4bad      	ldr	r3, [pc, #692]	; (97f8 <main+0x394>)
    9544:	601a      	str	r2, [r3, #0]
						temp = (xbee_receivebuffer[i] & 0x3F);
    9546:	4aa4      	ldr	r2, [pc, #656]	; (97d8 <main+0x374>)
    9548:	68fb      	ldr	r3, [r7, #12]
    954a:	18d3      	adds	r3, r2, r3
    954c:	781b      	ldrb	r3, [r3, #0]
    954e:	001a      	movs	r2, r3
    9550:	233f      	movs	r3, #63	; 0x3f
    9552:	401a      	ands	r2, r3
    9554:	4baa      	ldr	r3, [pc, #680]	; (9800 <main+0x39c>)
    9556:	601a      	str	r2, [r3, #0]
						x = temp;
    9558:	4ba9      	ldr	r3, [pc, #676]	; (9800 <main+0x39c>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	b21a      	sxth	r2, r3
    955e:	4ba2      	ldr	r3, [pc, #648]	; (97e8 <main+0x384>)
    9560:	801a      	strh	r2, [r3, #0]
						break;
    9562:	e047      	b.n	95f4 <main+0x190>
						
						case 1: //x MSB
						xCount += 3;
    9564:	4ba4      	ldr	r3, [pc, #656]	; (97f8 <main+0x394>)
    9566:	681b      	ldr	r3, [r3, #0]
    9568:	1cda      	adds	r2, r3, #3
    956a:	4ba3      	ldr	r3, [pc, #652]	; (97f8 <main+0x394>)
    956c:	601a      	str	r2, [r3, #0]
						temp = (xbee_receivebuffer[i] & 0x3F);
    956e:	4a9a      	ldr	r2, [pc, #616]	; (97d8 <main+0x374>)
    9570:	68fb      	ldr	r3, [r7, #12]
    9572:	18d3      	adds	r3, r2, r3
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	001a      	movs	r2, r3
    9578:	233f      	movs	r3, #63	; 0x3f
    957a:	401a      	ands	r2, r3
    957c:	4ba0      	ldr	r3, [pc, #640]	; (9800 <main+0x39c>)
    957e:	601a      	str	r2, [r3, #0]
						x = x | (temp << 6);
    9580:	4b9f      	ldr	r3, [pc, #636]	; (9800 <main+0x39c>)
    9582:	681b      	ldr	r3, [r3, #0]
    9584:	019b      	lsls	r3, r3, #6
    9586:	b21a      	sxth	r2, r3
    9588:	4b97      	ldr	r3, [pc, #604]	; (97e8 <main+0x384>)
    958a:	2100      	movs	r1, #0
    958c:	5e5b      	ldrsh	r3, [r3, r1]
    958e:	4313      	orrs	r3, r2
    9590:	b21a      	sxth	r2, r3
    9592:	4b95      	ldr	r3, [pc, #596]	; (97e8 <main+0x384>)
    9594:	801a      	strh	r2, [r3, #0]
						break;
    9596:	e02d      	b.n	95f4 <main+0x190>
						
						case 2: //y LSB
						yCount += 2;
    9598:	4b98      	ldr	r3, [pc, #608]	; (97fc <main+0x398>)
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	1c9a      	adds	r2, r3, #2
    959e:	4b97      	ldr	r3, [pc, #604]	; (97fc <main+0x398>)
    95a0:	601a      	str	r2, [r3, #0]
						temp = (xbee_receivebuffer[i] & 0x3F);
    95a2:	4a8d      	ldr	r2, [pc, #564]	; (97d8 <main+0x374>)
    95a4:	68fb      	ldr	r3, [r7, #12]
    95a6:	18d3      	adds	r3, r2, r3
    95a8:	781b      	ldrb	r3, [r3, #0]
    95aa:	001a      	movs	r2, r3
    95ac:	233f      	movs	r3, #63	; 0x3f
    95ae:	401a      	ands	r2, r3
    95b0:	4b93      	ldr	r3, [pc, #588]	; (9800 <main+0x39c>)
    95b2:	601a      	str	r2, [r3, #0]
						y = temp;
    95b4:	4b92      	ldr	r3, [pc, #584]	; (9800 <main+0x39c>)
    95b6:	681b      	ldr	r3, [r3, #0]
    95b8:	b21a      	sxth	r2, r3
    95ba:	4b8d      	ldr	r3, [pc, #564]	; (97f0 <main+0x38c>)
    95bc:	801a      	strh	r2, [r3, #0]
						break;
    95be:	e019      	b.n	95f4 <main+0x190>
						
						case 3: //y MSB
						yCount += 3;
    95c0:	4b8e      	ldr	r3, [pc, #568]	; (97fc <main+0x398>)
    95c2:	681b      	ldr	r3, [r3, #0]
    95c4:	1cda      	adds	r2, r3, #3
    95c6:	4b8d      	ldr	r3, [pc, #564]	; (97fc <main+0x398>)
    95c8:	601a      	str	r2, [r3, #0]
						temp = (xbee_receivebuffer[i] & 0x3F);
    95ca:	4a83      	ldr	r2, [pc, #524]	; (97d8 <main+0x374>)
    95cc:	68fb      	ldr	r3, [r7, #12]
    95ce:	18d3      	adds	r3, r2, r3
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	001a      	movs	r2, r3
    95d4:	233f      	movs	r3, #63	; 0x3f
    95d6:	401a      	ands	r2, r3
    95d8:	4b89      	ldr	r3, [pc, #548]	; (9800 <main+0x39c>)
    95da:	601a      	str	r2, [r3, #0]
						y = y | (temp << 6);
    95dc:	4b88      	ldr	r3, [pc, #544]	; (9800 <main+0x39c>)
    95de:	681b      	ldr	r3, [r3, #0]
    95e0:	019b      	lsls	r3, r3, #6
    95e2:	b21a      	sxth	r2, r3
    95e4:	4b82      	ldr	r3, [pc, #520]	; (97f0 <main+0x38c>)
    95e6:	2100      	movs	r1, #0
    95e8:	5e5b      	ldrsh	r3, [r3, r1]
    95ea:	4313      	orrs	r3, r2
    95ec:	b21a      	sxth	r2, r3
    95ee:	4b80      	ldr	r3, [pc, #512]	; (97f0 <main+0x38c>)
    95f0:	801a      	strh	r2, [r3, #0]
						break;
    95f2:	46c0      	nop			; (mov r8, r8)
				lx = x;
				ly = y;
				xCount = 0;
				yCount = 0;

				for (int i = 0; i < 4; i++) {
    95f4:	68fb      	ldr	r3, [r7, #12]
    95f6:	3301      	adds	r3, #1
    95f8:	60fb      	str	r3, [r7, #12]
    95fa:	68fb      	ldr	r3, [r7, #12]
    95fc:	2b03      	cmp	r3, #3
    95fe:	dd8c      	ble.n	951a <main+0xb6>
						y = y | (temp << 6);
						break;
					}
				}

				if(xCount != 5 || yCount != 5)
    9600:	4b7d      	ldr	r3, [pc, #500]	; (97f8 <main+0x394>)
    9602:	681b      	ldr	r3, [r3, #0]
    9604:	2b05      	cmp	r3, #5
    9606:	d103      	bne.n	9610 <main+0x1ac>
    9608:	4b7c      	ldr	r3, [pc, #496]	; (97fc <main+0x398>)
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	2b05      	cmp	r3, #5
    960e:	d00a      	beq.n	9626 <main+0x1c2>
				{
					x = lx;
    9610:	4b76      	ldr	r3, [pc, #472]	; (97ec <main+0x388>)
    9612:	2200      	movs	r2, #0
    9614:	5e9a      	ldrsh	r2, [r3, r2]
    9616:	4b74      	ldr	r3, [pc, #464]	; (97e8 <main+0x384>)
    9618:	801a      	strh	r2, [r3, #0]
					y = ly;
    961a:	4b76      	ldr	r3, [pc, #472]	; (97f4 <main+0x390>)
    961c:	2200      	movs	r2, #0
    961e:	5e9a      	ldrsh	r2, [r3, r2]
    9620:	4b73      	ldr	r3, [pc, #460]	; (97f0 <main+0x38c>)
    9622:	801a      	strh	r2, [r3, #0]
    9624:	e076      	b.n	9714 <main+0x2b0>
				}
				else
				{
					int avg = 4;
    9626:	2304      	movs	r3, #4
    9628:	603b      	str	r3, [r7, #0]
					Xtotal -= xVals[0];
    962a:	4b76      	ldr	r3, [pc, #472]	; (9804 <main+0x3a0>)
    962c:	681a      	ldr	r2, [r3, #0]
    962e:	4b76      	ldr	r3, [pc, #472]	; (9808 <main+0x3a4>)
    9630:	681b      	ldr	r3, [r3, #0]
    9632:	1ad2      	subs	r2, r2, r3
    9634:	4b73      	ldr	r3, [pc, #460]	; (9804 <main+0x3a0>)
    9636:	601a      	str	r2, [r3, #0]
					Ytotal -= yVals[0];
    9638:	4b74      	ldr	r3, [pc, #464]	; (980c <main+0x3a8>)
    963a:	681a      	ldr	r2, [r3, #0]
    963c:	4b74      	ldr	r3, [pc, #464]	; (9810 <main+0x3ac>)
    963e:	681b      	ldr	r3, [r3, #0]
    9640:	1ad2      	subs	r2, r2, r3
    9642:	4b72      	ldr	r3, [pc, #456]	; (980c <main+0x3a8>)
    9644:	601a      	str	r2, [r3, #0]
					
					for(int i = 0; i < avg-1; i++)
    9646:	2300      	movs	r3, #0
    9648:	60bb      	str	r3, [r7, #8]
    964a:	e014      	b.n	9676 <main+0x212>
					{
						yVals[i] = yVals[i + 1];
    964c:	68bb      	ldr	r3, [r7, #8]
    964e:	1c5a      	adds	r2, r3, #1
    9650:	4b6f      	ldr	r3, [pc, #444]	; (9810 <main+0x3ac>)
    9652:	0092      	lsls	r2, r2, #2
    9654:	58d1      	ldr	r1, [r2, r3]
    9656:	4b6e      	ldr	r3, [pc, #440]	; (9810 <main+0x3ac>)
    9658:	68ba      	ldr	r2, [r7, #8]
    965a:	0092      	lsls	r2, r2, #2
    965c:	50d1      	str	r1, [r2, r3]
						xVals[i] = xVals[i + 1];
    965e:	68bb      	ldr	r3, [r7, #8]
    9660:	1c5a      	adds	r2, r3, #1
    9662:	4b69      	ldr	r3, [pc, #420]	; (9808 <main+0x3a4>)
    9664:	0092      	lsls	r2, r2, #2
    9666:	58d1      	ldr	r1, [r2, r3]
    9668:	4b67      	ldr	r3, [pc, #412]	; (9808 <main+0x3a4>)
    966a:	68ba      	ldr	r2, [r7, #8]
    966c:	0092      	lsls	r2, r2, #2
    966e:	50d1      	str	r1, [r2, r3]
				{
					int avg = 4;
					Xtotal -= xVals[0];
					Ytotal -= yVals[0];
					
					for(int i = 0; i < avg-1; i++)
    9670:	68bb      	ldr	r3, [r7, #8]
    9672:	3301      	adds	r3, #1
    9674:	60bb      	str	r3, [r7, #8]
    9676:	683b      	ldr	r3, [r7, #0]
    9678:	1e5a      	subs	r2, r3, #1
    967a:	68bb      	ldr	r3, [r7, #8]
    967c:	429a      	cmp	r2, r3
    967e:	dce5      	bgt.n	964c <main+0x1e8>
					{
						yVals[i] = yVals[i + 1];
						xVals[i] = xVals[i + 1];
					}
					
					Xtotal += x;
    9680:	4b59      	ldr	r3, [pc, #356]	; (97e8 <main+0x384>)
    9682:	2200      	movs	r2, #0
    9684:	5e9b      	ldrsh	r3, [r3, r2]
    9686:	001a      	movs	r2, r3
    9688:	4b5e      	ldr	r3, [pc, #376]	; (9804 <main+0x3a0>)
    968a:	681b      	ldr	r3, [r3, #0]
    968c:	18d2      	adds	r2, r2, r3
    968e:	4b5d      	ldr	r3, [pc, #372]	; (9804 <main+0x3a0>)
    9690:	601a      	str	r2, [r3, #0]
					Ytotal += y;
    9692:	4b57      	ldr	r3, [pc, #348]	; (97f0 <main+0x38c>)
    9694:	2200      	movs	r2, #0
    9696:	5e9b      	ldrsh	r3, [r3, r2]
    9698:	001a      	movs	r2, r3
    969a:	4b5c      	ldr	r3, [pc, #368]	; (980c <main+0x3a8>)
    969c:	681b      	ldr	r3, [r3, #0]
    969e:	18d2      	adds	r2, r2, r3
    96a0:	4b5a      	ldr	r3, [pc, #360]	; (980c <main+0x3a8>)
    96a2:	601a      	str	r2, [r3, #0]

					yVals[avg-1] = y;
    96a4:	683b      	ldr	r3, [r7, #0]
    96a6:	1e5a      	subs	r2, r3, #1
    96a8:	4b51      	ldr	r3, [pc, #324]	; (97f0 <main+0x38c>)
    96aa:	2100      	movs	r1, #0
    96ac:	5e5b      	ldrsh	r3, [r3, r1]
    96ae:	0019      	movs	r1, r3
    96b0:	4b57      	ldr	r3, [pc, #348]	; (9810 <main+0x3ac>)
    96b2:	0092      	lsls	r2, r2, #2
    96b4:	50d1      	str	r1, [r2, r3]
					xVals[avg-1] = x;
    96b6:	683b      	ldr	r3, [r7, #0]
    96b8:	1e5a      	subs	r2, r3, #1
    96ba:	4b4b      	ldr	r3, [pc, #300]	; (97e8 <main+0x384>)
    96bc:	2100      	movs	r1, #0
    96be:	5e5b      	ldrsh	r3, [r3, r1]
    96c0:	0019      	movs	r1, r3
    96c2:	4b51      	ldr	r3, [pc, #324]	; (9808 <main+0x3a4>)
    96c4:	0092      	lsls	r2, r2, #2
    96c6:	50d1      	str	r1, [r2, r3]
					
					x = Xtotal/avg;
    96c8:	4b4e      	ldr	r3, [pc, #312]	; (9804 <main+0x3a0>)
    96ca:	681a      	ldr	r2, [r3, #0]
    96cc:	6839      	ldr	r1, [r7, #0]
    96ce:	4b51      	ldr	r3, [pc, #324]	; (9814 <main+0x3b0>)
    96d0:	0010      	movs	r0, r2
    96d2:	4798      	blx	r3
    96d4:	0003      	movs	r3, r0
    96d6:	b21a      	sxth	r2, r3
    96d8:	4b43      	ldr	r3, [pc, #268]	; (97e8 <main+0x384>)
    96da:	801a      	strh	r2, [r3, #0]
					y = Ytotal/avg;
    96dc:	4b4b      	ldr	r3, [pc, #300]	; (980c <main+0x3a8>)
    96de:	681a      	ldr	r2, [r3, #0]
    96e0:	6839      	ldr	r1, [r7, #0]
    96e2:	4b4c      	ldr	r3, [pc, #304]	; (9814 <main+0x3b0>)
    96e4:	0010      	movs	r0, r2
    96e6:	4798      	blx	r3
    96e8:	0003      	movs	r3, r0
    96ea:	b21a      	sxth	r2, r3
    96ec:	4b40      	ldr	r3, [pc, #256]	; (97f0 <main+0x38c>)
    96ee:	801a      	strh	r2, [r3, #0]

					x = x*(0x7FFF/4095);
    96f0:	4b3d      	ldr	r3, [pc, #244]	; (97e8 <main+0x384>)
    96f2:	2200      	movs	r2, #0
    96f4:	5e9b      	ldrsh	r3, [r3, r2]
    96f6:	b29b      	uxth	r3, r3
    96f8:	00db      	lsls	r3, r3, #3
    96fa:	b29b      	uxth	r3, r3
    96fc:	b21a      	sxth	r2, r3
    96fe:	4b3a      	ldr	r3, [pc, #232]	; (97e8 <main+0x384>)
    9700:	801a      	strh	r2, [r3, #0]
					y = y*(0x7FFF/4095);
    9702:	4b3b      	ldr	r3, [pc, #236]	; (97f0 <main+0x38c>)
    9704:	2200      	movs	r2, #0
    9706:	5e9b      	ldrsh	r3, [r3, r2]
    9708:	b29b      	uxth	r3, r3
    970a:	00db      	lsls	r3, r3, #3
    970c:	b29b      	uxth	r3, r3
    970e:	b21a      	sxth	r2, r3
    9710:	4b37      	ldr	r3, [pc, #220]	; (97f0 <main+0x38c>)
    9712:	801a      	strh	r2, [r3, #0]
				}
			}
			
			if (calibration) {
    9714:	4b33      	ldr	r3, [pc, #204]	; (97e4 <main+0x380>)
    9716:	781b      	ldrb	r3, [r3, #0]
    9718:	2b00      	cmp	r3, #0
    971a:	d016      	beq.n	974a <main+0x2e6>
				// request a new frame from camera module
				xbee_sendbuffer[0] = 'C';
    971c:	4b3e      	ldr	r3, [pc, #248]	; (9818 <main+0x3b4>)
    971e:	2243      	movs	r2, #67	; 0x43
    9720:	701a      	strb	r2, [r3, #0]
				xbee_sendbuffer[1] = button_info;
    9722:	4b3e      	ldr	r3, [pc, #248]	; (981c <main+0x3b8>)
    9724:	781a      	ldrb	r2, [r3, #0]
    9726:	4b3c      	ldr	r3, [pc, #240]	; (9818 <main+0x3b4>)
    9728:	705a      	strb	r2, [r3, #1]
				xbee_sendbuffer[2] = 0x00;
    972a:	4b3b      	ldr	r3, [pc, #236]	; (9818 <main+0x3b4>)
    972c:	2200      	movs	r2, #0
    972e:	709a      	strb	r2, [r3, #2]
				xbee_sendbuffer[3] = 0x00;
    9730:	4b39      	ldr	r3, [pc, #228]	; (9818 <main+0x3b4>)
    9732:	2200      	movs	r2, #0
    9734:	70da      	strb	r2, [r3, #3]
//				for (int i = 0; i < 2; i++)
				while(usart_write_buffer_wait(&usart_instance, xbee_sendbuffer, sizeof(xbee_sendbuffer)) != STATUS_OK){}
    9736:	46c0      	nop			; (mov r8, r8)
    9738:	4937      	ldr	r1, [pc, #220]	; (9818 <main+0x3b4>)
    973a:	4b28      	ldr	r3, [pc, #160]	; (97dc <main+0x378>)
    973c:	2204      	movs	r2, #4
    973e:	0018      	movs	r0, r3
    9740:	4b37      	ldr	r3, [pc, #220]	; (9820 <main+0x3bc>)
    9742:	4798      	blx	r3
    9744:	1e03      	subs	r3, r0, #0
    9746:	d1f7      	bne.n	9738 <main+0x2d4>
    9748:	e013      	b.n	9772 <main+0x30e>
			}
			else {
				// request info from laser module
				radio_sendbuffer[0] = 0x00; 
    974a:	4b36      	ldr	r3, [pc, #216]	; (9824 <main+0x3c0>)
    974c:	2200      	movs	r2, #0
    974e:	701a      	strb	r2, [r3, #0]
				radio_sendbuffer[1] = 0x00;
    9750:	4b34      	ldr	r3, [pc, #208]	; (9824 <main+0x3c0>)
    9752:	2200      	movs	r2, #0
    9754:	705a      	strb	r2, [r3, #1]
				radio_sendbuffer[2] = 0x00;
    9756:	4b33      	ldr	r3, [pc, #204]	; (9824 <main+0x3c0>)
    9758:	2200      	movs	r2, #0
    975a:	709a      	strb	r2, [r3, #2]
				radio_sendbuffer[3] = 0x00; //B is arbitrary. Y will set LEDs to color show. N will set it to white.
    975c:	4b31      	ldr	r3, [pc, #196]	; (9824 <main+0x3c0>)
    975e:	2200      	movs	r2, #0
    9760:	70da      	strb	r2, [r3, #3]
//					for (int i = 0; i < 2; i++)
				RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
    9762:	4b31      	ldr	r3, [pc, #196]	; (9828 <main+0x3c4>)
    9764:	681b      	ldr	r3, [r3, #0]
    9766:	b2da      	uxtb	r2, r3
    9768:	492e      	ldr	r1, [pc, #184]	; (9824 <main+0x3c0>)
    976a:	2300      	movs	r3, #0
    976c:	2003      	movs	r0, #3
    976e:	4c2f      	ldr	r4, [pc, #188]	; (982c <main+0x3c8>)
    9770:	47a0      	blx	r4
		}

		//END OF CAMERA MODULE CODE
			
		//info received from laser module (clicks)
		if (RFM_receiveDone())
    9772:	4b2f      	ldr	r3, [pc, #188]	; (9830 <main+0x3cc>)
    9774:	4798      	blx	r3
    9776:	1e03      	subs	r3, r0, #0
    9778:	d100      	bne.n	977c <main+0x318>
    977a:	e68a      	b.n	9492 <main+0x2e>
		{	
			for (int i = 0; i < RFM_DATALEN; i++) {
    977c:	2300      	movs	r3, #0
    977e:	607b      	str	r3, [r7, #4]
    9780:	e09d      	b.n	98be <main+0x45a>
				switch (i) {
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	2b01      	cmp	r3, #1
    9786:	d00d      	beq.n	97a4 <main+0x340>
    9788:	2b02      	cmp	r3, #2
    978a:	d059      	beq.n	9840 <main+0x3dc>
    978c:	2b00      	cmp	r3, #0
    978e:	d000      	beq.n	9792 <main+0x32e>
    9790:	e092      	b.n	98b8 <main+0x454>
					case 0: //x axis scroll
					scrollX = RFM_DATA[i];
    9792:	4b28      	ldr	r3, [pc, #160]	; (9834 <main+0x3d0>)
    9794:	687a      	ldr	r2, [r7, #4]
    9796:	0052      	lsls	r2, r2, #1
    9798:	5ad3      	ldrh	r3, [r2, r3]
    979a:	b29b      	uxth	r3, r3
    979c:	001a      	movs	r2, r3
    979e:	4b26      	ldr	r3, [pc, #152]	; (9838 <main+0x3d4>)
    97a0:	601a      	str	r2, [r3, #0]
					break;
    97a2:	e089      	b.n	98b8 <main+0x454>
					
					case 1: //y axis scroll
					scrollY = RFM_DATA[i];
    97a4:	4b23      	ldr	r3, [pc, #140]	; (9834 <main+0x3d0>)
    97a6:	687a      	ldr	r2, [r7, #4]
    97a8:	0052      	lsls	r2, r2, #1
    97aa:	5ad3      	ldrh	r3, [r2, r3]
    97ac:	b29b      	uxth	r3, r3
    97ae:	001a      	movs	r2, r3
    97b0:	4b22      	ldr	r3, [pc, #136]	; (983c <main+0x3d8>)
    97b2:	601a      	str	r2, [r3, #0]
					break;
    97b4:	e080      	b.n	98b8 <main+0x454>
    97b6:	46c0      	nop			; (mov r8, r8)
    97b8:	200000d8 	.word	0x200000d8
    97bc:	00005ab5 	.word	0x00005ab5
    97c0:	000093b9 	.word	0x000093b9
    97c4:	000093ed 	.word	0x000093ed
    97c8:	0000937d 	.word	0x0000937d
    97cc:	000032a9 	.word	0x000032a9
    97d0:	000032c1 	.word	0x000032c1
    97d4:	00003acd 	.word	0x00003acd
    97d8:	20000614 	.word	0x20000614
    97dc:	20000600 	.word	0x20000600
    97e0:	00001ed9 	.word	0x00001ed9
    97e4:	20000233 	.word	0x20000233
    97e8:	200001e2 	.word	0x200001e2
    97ec:	200001e6 	.word	0x200001e6
    97f0:	200001e4 	.word	0x200001e4
    97f4:	200001e8 	.word	0x200001e8
    97f8:	200001f0 	.word	0x200001f0
    97fc:	200001ec 	.word	0x200001ec
    9800:	200001f4 	.word	0x200001f4
    9804:	20000200 	.word	0x20000200
    9808:	20000208 	.word	0x20000208
    980c:	20000204 	.word	0x20000204
    9810:	2000021c 	.word	0x2000021c
    9814:	000099dd 	.word	0x000099dd
    9818:	20000620 	.word	0x20000620
    981c:	20000235 	.word	0x20000235
    9820:	00001dad 	.word	0x00001dad
    9824:	200001a4 	.word	0x200001a4
    9828:	200000dc 	.word	0x200000dc
    982c:	00002c19 	.word	0x00002c19
    9830:	00002f29 	.word	0x00002f29
    9834:	20000254 	.word	0x20000254
    9838:	200001f8 	.word	0x200001f8
    983c:	200001fc 	.word	0x200001fc
					
					case 2: //button info byte
					button_info = RFM_DATA[i];
    9840:	4b23      	ldr	r3, [pc, #140]	; (98d0 <main+0x46c>)
    9842:	687a      	ldr	r2, [r7, #4]
    9844:	0052      	lsls	r2, r2, #1
    9846:	5ad3      	ldrh	r3, [r2, r3]
    9848:	b29b      	uxth	r3, r3
    984a:	b2da      	uxtb	r2, r3
    984c:	4b21      	ldr	r3, [pc, #132]	; (98d4 <main+0x470>)
    984e:	701a      	strb	r2, [r3, #0]
					
					//mouse_move(x, y);
					//mouse_buttons((button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
					left = (button_info & 0x08) >> 3;
    9850:	4b20      	ldr	r3, [pc, #128]	; (98d4 <main+0x470>)
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	10db      	asrs	r3, r3, #3
    9856:	2201      	movs	r2, #1
    9858:	4013      	ands	r3, r2
    985a:	1e5a      	subs	r2, r3, #1
    985c:	4193      	sbcs	r3, r2
    985e:	b2da      	uxtb	r2, r3
    9860:	4b1d      	ldr	r3, [pc, #116]	; (98d8 <main+0x474>)
    9862:	701a      	strb	r2, [r3, #0]
					middle = (button_info & 0x02) >> 1;
    9864:	4b1b      	ldr	r3, [pc, #108]	; (98d4 <main+0x470>)
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	105b      	asrs	r3, r3, #1
    986a:	2201      	movs	r2, #1
    986c:	4013      	ands	r3, r2
    986e:	1e5a      	subs	r2, r3, #1
    9870:	4193      	sbcs	r3, r2
    9872:	b2da      	uxtb	r2, r3
    9874:	4b19      	ldr	r3, [pc, #100]	; (98dc <main+0x478>)
    9876:	701a      	strb	r2, [r3, #0]
					right = (button_info & 0x04) >> 2;
    9878:	4b16      	ldr	r3, [pc, #88]	; (98d4 <main+0x470>)
    987a:	781b      	ldrb	r3, [r3, #0]
    987c:	109b      	asrs	r3, r3, #2
    987e:	2201      	movs	r2, #1
    9880:	4013      	ands	r3, r2
    9882:	1e5a      	subs	r2, r3, #1
    9884:	4193      	sbcs	r3, r2
    9886:	b2da      	uxtb	r2, r3
    9888:	4b15      	ldr	r3, [pc, #84]	; (98e0 <main+0x47c>)
    988a:	701a      	strb	r2, [r3, #0]
					//arrow_up = (button_info & 0x80) >> 7;
					//arrow_down = (button_info & 0x40) >> 6;
					//arrow_left = (button_info & 0x20) >> 5;
					//arrow_right = (button_info & 0x10) >> 4;
					
					if (button_info & 0x01){ //if laser is enabled
    988c:	4b11      	ldr	r3, [pc, #68]	; (98d4 <main+0x470>)
    988e:	781b      	ldrb	r3, [r3, #0]
    9890:	001a      	movs	r2, r3
    9892:	2301      	movs	r3, #1
    9894:	4013      	ands	r3, r2
    9896:	d007      	beq.n	98a8 <main+0x444>
						laserEnabled = true;
    9898:	4b12      	ldr	r3, [pc, #72]	; (98e4 <main+0x480>)
    989a:	2201      	movs	r2, #1
    989c:	701a      	strb	r2, [r3, #0]
						port_pin_set_output_level(PIN_PA02, HIGH);
    989e:	2101      	movs	r1, #1
    98a0:	2002      	movs	r0, #2
    98a2:	4b11      	ldr	r3, [pc, #68]	; (98e8 <main+0x484>)
    98a4:	4798      	blx	r3
					else{
						laserEnabled = false;
						port_pin_set_output_level(PIN_PA02, LOW);
					}
					
					break;
    98a6:	e006      	b.n	98b6 <main+0x452>
					if (button_info & 0x01){ //if laser is enabled
						laserEnabled = true;
						port_pin_set_output_level(PIN_PA02, HIGH);
					}
					else{
						laserEnabled = false;
    98a8:	4b0e      	ldr	r3, [pc, #56]	; (98e4 <main+0x480>)
    98aa:	2200      	movs	r2, #0
    98ac:	701a      	strb	r2, [r3, #0]
						port_pin_set_output_level(PIN_PA02, LOW);
    98ae:	2100      	movs	r1, #0
    98b0:	2002      	movs	r0, #2
    98b2:	4b0d      	ldr	r3, [pc, #52]	; (98e8 <main+0x484>)
    98b4:	4798      	blx	r3
					}
					
					break;
    98b6:	46c0      	nop			; (mov r8, r8)
		//END OF CAMERA MODULE CODE
			
		//info received from laser module (clicks)
		if (RFM_receiveDone())
		{	
			for (int i = 0; i < RFM_DATALEN; i++) {
    98b8:	687b      	ldr	r3, [r7, #4]
    98ba:	3301      	adds	r3, #1
    98bc:	607b      	str	r3, [r7, #4]
    98be:	4b0b      	ldr	r3, [pc, #44]	; (98ec <main+0x488>)
    98c0:	881b      	ldrh	r3, [r3, #0]
    98c2:	b29b      	uxth	r3, r3
    98c4:	1e1a      	subs	r2, r3, #0
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	429a      	cmp	r2, r3
    98ca:	dd00      	ble.n	98ce <main+0x46a>
    98cc:	e759      	b.n	9782 <main+0x31e>

		//sleepmgr_enter_sleep();


#endif
	}
    98ce:	e5e0      	b.n	9492 <main+0x2e>
    98d0:	20000254 	.word	0x20000254
    98d4:	20000235 	.word	0x20000235
    98d8:	20000230 	.word	0x20000230
    98dc:	20000231 	.word	0x20000231
    98e0:	20000232 	.word	0x20000232
    98e4:	20000234 	.word	0x20000234
    98e8:	000091f5 	.word	0x000091f5
    98ec:	2000024e 	.word	0x2000024e

000098f0 <main_suspend_action>:
}

void main_suspend_action(void)
{
    98f0:	b580      	push	{r7, lr}
    98f2:	af00      	add	r7, sp, #0
	ui_powerdown();
    98f4:	4b02      	ldr	r3, [pc, #8]	; (9900 <main_suspend_action+0x10>)
    98f6:	4798      	blx	r3
}
    98f8:	46c0      	nop			; (mov r8, r8)
    98fa:	46bd      	mov	sp, r7
    98fc:	bd80      	pop	{r7, pc}
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	000032c1 	.word	0x000032c1

00009904 <main_resume_action>:

void main_resume_action(void)
{
    9904:	b580      	push	{r7, lr}
    9906:	af00      	add	r7, sp, #0
	ui_wakeup();
    9908:	4b02      	ldr	r3, [pc, #8]	; (9914 <main_resume_action+0x10>)
    990a:	4798      	blx	r3
}
    990c:	46c0      	nop			; (mov r8, r8)
    990e:	46bd      	mov	sp, r7
    9910:	bd80      	pop	{r7, pc}
    9912:	46c0      	nop			; (mov r8, r8)
    9914:	000032fd 	.word	0x000032fd

00009918 <main_sof_action>:

void main_sof_action(void)
{
    9918:	b580      	push	{r7, lr}
    991a:	af00      	add	r7, sp, #0
	if (!main_b_mouse_enable)
    991c:	4b08      	ldr	r3, [pc, #32]	; (9940 <main_sof_action+0x28>)
    991e:	781b      	ldrb	r3, [r3, #0]
    9920:	b2db      	uxtb	r3, r3
    9922:	2201      	movs	r2, #1
    9924:	4053      	eors	r3, r2
    9926:	b2db      	uxtb	r3, r3
    9928:	2b00      	cmp	r3, #0
    992a:	d106      	bne.n	993a <main_sof_action+0x22>
		return;
	ui_process(udd_get_frame_number());
    992c:	4b05      	ldr	r3, [pc, #20]	; (9944 <main_sof_action+0x2c>)
    992e:	4798      	blx	r3
    9930:	0003      	movs	r3, r0
    9932:	0018      	movs	r0, r3
    9934:	4b04      	ldr	r3, [pc, #16]	; (9948 <main_sof_action+0x30>)
    9936:	4798      	blx	r3
    9938:	e000      	b.n	993c <main_sof_action+0x24>
}

void main_sof_action(void)
{
	if (!main_b_mouse_enable)
		return;
    993a:	46c0      	nop			; (mov r8, r8)
	ui_process(udd_get_frame_number());
}
    993c:	46bd      	mov	sp, r7
    993e:	bd80      	pop	{r7, pc}
    9940:	20000236 	.word	0x20000236
    9944:	000062c5 	.word	0x000062c5
    9948:	00003309 	.word	0x00003309

0000994c <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    994c:	b580      	push	{r7, lr}
    994e:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    9950:	4b02      	ldr	r3, [pc, #8]	; (995c <main_remotewakeup_enable+0x10>)
    9952:	4798      	blx	r3
}
    9954:	46c0      	nop			; (mov r8, r8)
    9956:	46bd      	mov	sp, r7
    9958:	bd80      	pop	{r7, pc}
    995a:	46c0      	nop			; (mov r8, r8)
    995c:	000032cd 	.word	0x000032cd

00009960 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    9960:	b580      	push	{r7, lr}
    9962:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    9964:	4b02      	ldr	r3, [pc, #8]	; (9970 <main_remotewakeup_disable+0x10>)
    9966:	4798      	blx	r3
}
    9968:	46c0      	nop			; (mov r8, r8)
    996a:	46bd      	mov	sp, r7
    996c:	bd80      	pop	{r7, pc}
    996e:	46c0      	nop			; (mov r8, r8)
    9970:	000032e5 	.word	0x000032e5

00009974 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    9974:	b580      	push	{r7, lr}
    9976:	af00      	add	r7, sp, #0
	ui_powerdown();
    9978:	4b02      	ldr	r3, [pc, #8]	; (9984 <main_suspend_lpm_action+0x10>)
    997a:	4798      	blx	r3
}
    997c:	46c0      	nop			; (mov r8, r8)
    997e:	46bd      	mov	sp, r7
    9980:	bd80      	pop	{r7, pc}
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	000032c1 	.word	0x000032c1

00009988 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    9988:	b580      	push	{r7, lr}
    998a:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <main_remotewakeup_lpm_disable+0x10>)
    998e:	4798      	blx	r3
}
    9990:	46c0      	nop			; (mov r8, r8)
    9992:	46bd      	mov	sp, r7
    9994:	bd80      	pop	{r7, pc}
    9996:	46c0      	nop			; (mov r8, r8)
    9998:	000032e5 	.word	0x000032e5

0000999c <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    999c:	b580      	push	{r7, lr}
    999e:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    99a0:	4b02      	ldr	r3, [pc, #8]	; (99ac <main_remotewakeup_lpm_enable+0x10>)
    99a2:	4798      	blx	r3
}
    99a4:	46c0      	nop			; (mov r8, r8)
    99a6:	46bd      	mov	sp, r7
    99a8:	bd80      	pop	{r7, pc}
    99aa:	46c0      	nop			; (mov r8, r8)
    99ac:	000032cd 	.word	0x000032cd

000099b0 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
    99b0:	b580      	push	{r7, lr}
    99b2:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    99b4:	4b03      	ldr	r3, [pc, #12]	; (99c4 <main_mouse_enable+0x14>)
    99b6:	2201      	movs	r2, #1
    99b8:	701a      	strb	r2, [r3, #0]
	return true;
    99ba:	2301      	movs	r3, #1
}
    99bc:	0018      	movs	r0, r3
    99be:	46bd      	mov	sp, r7
    99c0:	bd80      	pop	{r7, pc}
    99c2:	46c0      	nop			; (mov r8, r8)
    99c4:	20000236 	.word	0x20000236

000099c8 <main_mouse_disable>:

void main_mouse_disable(void)
{
    99c8:	b580      	push	{r7, lr}
    99ca:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    99cc:	4b02      	ldr	r3, [pc, #8]	; (99d8 <main_mouse_disable+0x10>)
    99ce:	2200      	movs	r2, #0
    99d0:	701a      	strb	r2, [r3, #0]
}
    99d2:	46c0      	nop			; (mov r8, r8)
    99d4:	46bd      	mov	sp, r7
    99d6:	bd80      	pop	{r7, pc}
    99d8:	20000236 	.word	0x20000236

000099dc <__aeabi_uidiv>:
    99dc:	2200      	movs	r2, #0
    99de:	0843      	lsrs	r3, r0, #1
    99e0:	428b      	cmp	r3, r1
    99e2:	d374      	bcc.n	9ace <__aeabi_uidiv+0xf2>
    99e4:	0903      	lsrs	r3, r0, #4
    99e6:	428b      	cmp	r3, r1
    99e8:	d35f      	bcc.n	9aaa <__aeabi_uidiv+0xce>
    99ea:	0a03      	lsrs	r3, r0, #8
    99ec:	428b      	cmp	r3, r1
    99ee:	d344      	bcc.n	9a7a <__aeabi_uidiv+0x9e>
    99f0:	0b03      	lsrs	r3, r0, #12
    99f2:	428b      	cmp	r3, r1
    99f4:	d328      	bcc.n	9a48 <__aeabi_uidiv+0x6c>
    99f6:	0c03      	lsrs	r3, r0, #16
    99f8:	428b      	cmp	r3, r1
    99fa:	d30d      	bcc.n	9a18 <__aeabi_uidiv+0x3c>
    99fc:	22ff      	movs	r2, #255	; 0xff
    99fe:	0209      	lsls	r1, r1, #8
    9a00:	ba12      	rev	r2, r2
    9a02:	0c03      	lsrs	r3, r0, #16
    9a04:	428b      	cmp	r3, r1
    9a06:	d302      	bcc.n	9a0e <__aeabi_uidiv+0x32>
    9a08:	1212      	asrs	r2, r2, #8
    9a0a:	0209      	lsls	r1, r1, #8
    9a0c:	d065      	beq.n	9ada <__aeabi_uidiv+0xfe>
    9a0e:	0b03      	lsrs	r3, r0, #12
    9a10:	428b      	cmp	r3, r1
    9a12:	d319      	bcc.n	9a48 <__aeabi_uidiv+0x6c>
    9a14:	e000      	b.n	9a18 <__aeabi_uidiv+0x3c>
    9a16:	0a09      	lsrs	r1, r1, #8
    9a18:	0bc3      	lsrs	r3, r0, #15
    9a1a:	428b      	cmp	r3, r1
    9a1c:	d301      	bcc.n	9a22 <__aeabi_uidiv+0x46>
    9a1e:	03cb      	lsls	r3, r1, #15
    9a20:	1ac0      	subs	r0, r0, r3
    9a22:	4152      	adcs	r2, r2
    9a24:	0b83      	lsrs	r3, r0, #14
    9a26:	428b      	cmp	r3, r1
    9a28:	d301      	bcc.n	9a2e <__aeabi_uidiv+0x52>
    9a2a:	038b      	lsls	r3, r1, #14
    9a2c:	1ac0      	subs	r0, r0, r3
    9a2e:	4152      	adcs	r2, r2
    9a30:	0b43      	lsrs	r3, r0, #13
    9a32:	428b      	cmp	r3, r1
    9a34:	d301      	bcc.n	9a3a <__aeabi_uidiv+0x5e>
    9a36:	034b      	lsls	r3, r1, #13
    9a38:	1ac0      	subs	r0, r0, r3
    9a3a:	4152      	adcs	r2, r2
    9a3c:	0b03      	lsrs	r3, r0, #12
    9a3e:	428b      	cmp	r3, r1
    9a40:	d301      	bcc.n	9a46 <__aeabi_uidiv+0x6a>
    9a42:	030b      	lsls	r3, r1, #12
    9a44:	1ac0      	subs	r0, r0, r3
    9a46:	4152      	adcs	r2, r2
    9a48:	0ac3      	lsrs	r3, r0, #11
    9a4a:	428b      	cmp	r3, r1
    9a4c:	d301      	bcc.n	9a52 <__aeabi_uidiv+0x76>
    9a4e:	02cb      	lsls	r3, r1, #11
    9a50:	1ac0      	subs	r0, r0, r3
    9a52:	4152      	adcs	r2, r2
    9a54:	0a83      	lsrs	r3, r0, #10
    9a56:	428b      	cmp	r3, r1
    9a58:	d301      	bcc.n	9a5e <__aeabi_uidiv+0x82>
    9a5a:	028b      	lsls	r3, r1, #10
    9a5c:	1ac0      	subs	r0, r0, r3
    9a5e:	4152      	adcs	r2, r2
    9a60:	0a43      	lsrs	r3, r0, #9
    9a62:	428b      	cmp	r3, r1
    9a64:	d301      	bcc.n	9a6a <__aeabi_uidiv+0x8e>
    9a66:	024b      	lsls	r3, r1, #9
    9a68:	1ac0      	subs	r0, r0, r3
    9a6a:	4152      	adcs	r2, r2
    9a6c:	0a03      	lsrs	r3, r0, #8
    9a6e:	428b      	cmp	r3, r1
    9a70:	d301      	bcc.n	9a76 <__aeabi_uidiv+0x9a>
    9a72:	020b      	lsls	r3, r1, #8
    9a74:	1ac0      	subs	r0, r0, r3
    9a76:	4152      	adcs	r2, r2
    9a78:	d2cd      	bcs.n	9a16 <__aeabi_uidiv+0x3a>
    9a7a:	09c3      	lsrs	r3, r0, #7
    9a7c:	428b      	cmp	r3, r1
    9a7e:	d301      	bcc.n	9a84 <__aeabi_uidiv+0xa8>
    9a80:	01cb      	lsls	r3, r1, #7
    9a82:	1ac0      	subs	r0, r0, r3
    9a84:	4152      	adcs	r2, r2
    9a86:	0983      	lsrs	r3, r0, #6
    9a88:	428b      	cmp	r3, r1
    9a8a:	d301      	bcc.n	9a90 <__aeabi_uidiv+0xb4>
    9a8c:	018b      	lsls	r3, r1, #6
    9a8e:	1ac0      	subs	r0, r0, r3
    9a90:	4152      	adcs	r2, r2
    9a92:	0943      	lsrs	r3, r0, #5
    9a94:	428b      	cmp	r3, r1
    9a96:	d301      	bcc.n	9a9c <__aeabi_uidiv+0xc0>
    9a98:	014b      	lsls	r3, r1, #5
    9a9a:	1ac0      	subs	r0, r0, r3
    9a9c:	4152      	adcs	r2, r2
    9a9e:	0903      	lsrs	r3, r0, #4
    9aa0:	428b      	cmp	r3, r1
    9aa2:	d301      	bcc.n	9aa8 <__aeabi_uidiv+0xcc>
    9aa4:	010b      	lsls	r3, r1, #4
    9aa6:	1ac0      	subs	r0, r0, r3
    9aa8:	4152      	adcs	r2, r2
    9aaa:	08c3      	lsrs	r3, r0, #3
    9aac:	428b      	cmp	r3, r1
    9aae:	d301      	bcc.n	9ab4 <__aeabi_uidiv+0xd8>
    9ab0:	00cb      	lsls	r3, r1, #3
    9ab2:	1ac0      	subs	r0, r0, r3
    9ab4:	4152      	adcs	r2, r2
    9ab6:	0883      	lsrs	r3, r0, #2
    9ab8:	428b      	cmp	r3, r1
    9aba:	d301      	bcc.n	9ac0 <__aeabi_uidiv+0xe4>
    9abc:	008b      	lsls	r3, r1, #2
    9abe:	1ac0      	subs	r0, r0, r3
    9ac0:	4152      	adcs	r2, r2
    9ac2:	0843      	lsrs	r3, r0, #1
    9ac4:	428b      	cmp	r3, r1
    9ac6:	d301      	bcc.n	9acc <__aeabi_uidiv+0xf0>
    9ac8:	004b      	lsls	r3, r1, #1
    9aca:	1ac0      	subs	r0, r0, r3
    9acc:	4152      	adcs	r2, r2
    9ace:	1a41      	subs	r1, r0, r1
    9ad0:	d200      	bcs.n	9ad4 <__aeabi_uidiv+0xf8>
    9ad2:	4601      	mov	r1, r0
    9ad4:	4152      	adcs	r2, r2
    9ad6:	4610      	mov	r0, r2
    9ad8:	4770      	bx	lr
    9ada:	e7ff      	b.n	9adc <__aeabi_uidiv+0x100>
    9adc:	b501      	push	{r0, lr}
    9ade:	2000      	movs	r0, #0
    9ae0:	f000 f8f0 	bl	9cc4 <__aeabi_idiv0>
    9ae4:	bd02      	pop	{r1, pc}
    9ae6:	46c0      	nop			; (mov r8, r8)

00009ae8 <__aeabi_uidivmod>:
    9ae8:	2900      	cmp	r1, #0
    9aea:	d0f7      	beq.n	9adc <__aeabi_uidiv+0x100>
    9aec:	e776      	b.n	99dc <__aeabi_uidiv>
    9aee:	4770      	bx	lr

00009af0 <__aeabi_idiv>:
    9af0:	4603      	mov	r3, r0
    9af2:	430b      	orrs	r3, r1
    9af4:	d47f      	bmi.n	9bf6 <__aeabi_idiv+0x106>
    9af6:	2200      	movs	r2, #0
    9af8:	0843      	lsrs	r3, r0, #1
    9afa:	428b      	cmp	r3, r1
    9afc:	d374      	bcc.n	9be8 <__aeabi_idiv+0xf8>
    9afe:	0903      	lsrs	r3, r0, #4
    9b00:	428b      	cmp	r3, r1
    9b02:	d35f      	bcc.n	9bc4 <__aeabi_idiv+0xd4>
    9b04:	0a03      	lsrs	r3, r0, #8
    9b06:	428b      	cmp	r3, r1
    9b08:	d344      	bcc.n	9b94 <__aeabi_idiv+0xa4>
    9b0a:	0b03      	lsrs	r3, r0, #12
    9b0c:	428b      	cmp	r3, r1
    9b0e:	d328      	bcc.n	9b62 <__aeabi_idiv+0x72>
    9b10:	0c03      	lsrs	r3, r0, #16
    9b12:	428b      	cmp	r3, r1
    9b14:	d30d      	bcc.n	9b32 <__aeabi_idiv+0x42>
    9b16:	22ff      	movs	r2, #255	; 0xff
    9b18:	0209      	lsls	r1, r1, #8
    9b1a:	ba12      	rev	r2, r2
    9b1c:	0c03      	lsrs	r3, r0, #16
    9b1e:	428b      	cmp	r3, r1
    9b20:	d302      	bcc.n	9b28 <__aeabi_idiv+0x38>
    9b22:	1212      	asrs	r2, r2, #8
    9b24:	0209      	lsls	r1, r1, #8
    9b26:	d065      	beq.n	9bf4 <__aeabi_idiv+0x104>
    9b28:	0b03      	lsrs	r3, r0, #12
    9b2a:	428b      	cmp	r3, r1
    9b2c:	d319      	bcc.n	9b62 <__aeabi_idiv+0x72>
    9b2e:	e000      	b.n	9b32 <__aeabi_idiv+0x42>
    9b30:	0a09      	lsrs	r1, r1, #8
    9b32:	0bc3      	lsrs	r3, r0, #15
    9b34:	428b      	cmp	r3, r1
    9b36:	d301      	bcc.n	9b3c <__aeabi_idiv+0x4c>
    9b38:	03cb      	lsls	r3, r1, #15
    9b3a:	1ac0      	subs	r0, r0, r3
    9b3c:	4152      	adcs	r2, r2
    9b3e:	0b83      	lsrs	r3, r0, #14
    9b40:	428b      	cmp	r3, r1
    9b42:	d301      	bcc.n	9b48 <__aeabi_idiv+0x58>
    9b44:	038b      	lsls	r3, r1, #14
    9b46:	1ac0      	subs	r0, r0, r3
    9b48:	4152      	adcs	r2, r2
    9b4a:	0b43      	lsrs	r3, r0, #13
    9b4c:	428b      	cmp	r3, r1
    9b4e:	d301      	bcc.n	9b54 <__aeabi_idiv+0x64>
    9b50:	034b      	lsls	r3, r1, #13
    9b52:	1ac0      	subs	r0, r0, r3
    9b54:	4152      	adcs	r2, r2
    9b56:	0b03      	lsrs	r3, r0, #12
    9b58:	428b      	cmp	r3, r1
    9b5a:	d301      	bcc.n	9b60 <__aeabi_idiv+0x70>
    9b5c:	030b      	lsls	r3, r1, #12
    9b5e:	1ac0      	subs	r0, r0, r3
    9b60:	4152      	adcs	r2, r2
    9b62:	0ac3      	lsrs	r3, r0, #11
    9b64:	428b      	cmp	r3, r1
    9b66:	d301      	bcc.n	9b6c <__aeabi_idiv+0x7c>
    9b68:	02cb      	lsls	r3, r1, #11
    9b6a:	1ac0      	subs	r0, r0, r3
    9b6c:	4152      	adcs	r2, r2
    9b6e:	0a83      	lsrs	r3, r0, #10
    9b70:	428b      	cmp	r3, r1
    9b72:	d301      	bcc.n	9b78 <__aeabi_idiv+0x88>
    9b74:	028b      	lsls	r3, r1, #10
    9b76:	1ac0      	subs	r0, r0, r3
    9b78:	4152      	adcs	r2, r2
    9b7a:	0a43      	lsrs	r3, r0, #9
    9b7c:	428b      	cmp	r3, r1
    9b7e:	d301      	bcc.n	9b84 <__aeabi_idiv+0x94>
    9b80:	024b      	lsls	r3, r1, #9
    9b82:	1ac0      	subs	r0, r0, r3
    9b84:	4152      	adcs	r2, r2
    9b86:	0a03      	lsrs	r3, r0, #8
    9b88:	428b      	cmp	r3, r1
    9b8a:	d301      	bcc.n	9b90 <__aeabi_idiv+0xa0>
    9b8c:	020b      	lsls	r3, r1, #8
    9b8e:	1ac0      	subs	r0, r0, r3
    9b90:	4152      	adcs	r2, r2
    9b92:	d2cd      	bcs.n	9b30 <__aeabi_idiv+0x40>
    9b94:	09c3      	lsrs	r3, r0, #7
    9b96:	428b      	cmp	r3, r1
    9b98:	d301      	bcc.n	9b9e <__aeabi_idiv+0xae>
    9b9a:	01cb      	lsls	r3, r1, #7
    9b9c:	1ac0      	subs	r0, r0, r3
    9b9e:	4152      	adcs	r2, r2
    9ba0:	0983      	lsrs	r3, r0, #6
    9ba2:	428b      	cmp	r3, r1
    9ba4:	d301      	bcc.n	9baa <__aeabi_idiv+0xba>
    9ba6:	018b      	lsls	r3, r1, #6
    9ba8:	1ac0      	subs	r0, r0, r3
    9baa:	4152      	adcs	r2, r2
    9bac:	0943      	lsrs	r3, r0, #5
    9bae:	428b      	cmp	r3, r1
    9bb0:	d301      	bcc.n	9bb6 <__aeabi_idiv+0xc6>
    9bb2:	014b      	lsls	r3, r1, #5
    9bb4:	1ac0      	subs	r0, r0, r3
    9bb6:	4152      	adcs	r2, r2
    9bb8:	0903      	lsrs	r3, r0, #4
    9bba:	428b      	cmp	r3, r1
    9bbc:	d301      	bcc.n	9bc2 <__aeabi_idiv+0xd2>
    9bbe:	010b      	lsls	r3, r1, #4
    9bc0:	1ac0      	subs	r0, r0, r3
    9bc2:	4152      	adcs	r2, r2
    9bc4:	08c3      	lsrs	r3, r0, #3
    9bc6:	428b      	cmp	r3, r1
    9bc8:	d301      	bcc.n	9bce <__aeabi_idiv+0xde>
    9bca:	00cb      	lsls	r3, r1, #3
    9bcc:	1ac0      	subs	r0, r0, r3
    9bce:	4152      	adcs	r2, r2
    9bd0:	0883      	lsrs	r3, r0, #2
    9bd2:	428b      	cmp	r3, r1
    9bd4:	d301      	bcc.n	9bda <__aeabi_idiv+0xea>
    9bd6:	008b      	lsls	r3, r1, #2
    9bd8:	1ac0      	subs	r0, r0, r3
    9bda:	4152      	adcs	r2, r2
    9bdc:	0843      	lsrs	r3, r0, #1
    9bde:	428b      	cmp	r3, r1
    9be0:	d301      	bcc.n	9be6 <__aeabi_idiv+0xf6>
    9be2:	004b      	lsls	r3, r1, #1
    9be4:	1ac0      	subs	r0, r0, r3
    9be6:	4152      	adcs	r2, r2
    9be8:	1a41      	subs	r1, r0, r1
    9bea:	d200      	bcs.n	9bee <__aeabi_idiv+0xfe>
    9bec:	4601      	mov	r1, r0
    9bee:	4152      	adcs	r2, r2
    9bf0:	4610      	mov	r0, r2
    9bf2:	4770      	bx	lr
    9bf4:	e05d      	b.n	9cb2 <__aeabi_idiv+0x1c2>
    9bf6:	0fca      	lsrs	r2, r1, #31
    9bf8:	d000      	beq.n	9bfc <__aeabi_idiv+0x10c>
    9bfa:	4249      	negs	r1, r1
    9bfc:	1003      	asrs	r3, r0, #32
    9bfe:	d300      	bcc.n	9c02 <__aeabi_idiv+0x112>
    9c00:	4240      	negs	r0, r0
    9c02:	4053      	eors	r3, r2
    9c04:	2200      	movs	r2, #0
    9c06:	469c      	mov	ip, r3
    9c08:	0903      	lsrs	r3, r0, #4
    9c0a:	428b      	cmp	r3, r1
    9c0c:	d32d      	bcc.n	9c6a <__aeabi_idiv+0x17a>
    9c0e:	0a03      	lsrs	r3, r0, #8
    9c10:	428b      	cmp	r3, r1
    9c12:	d312      	bcc.n	9c3a <__aeabi_idiv+0x14a>
    9c14:	22fc      	movs	r2, #252	; 0xfc
    9c16:	0189      	lsls	r1, r1, #6
    9c18:	ba12      	rev	r2, r2
    9c1a:	0a03      	lsrs	r3, r0, #8
    9c1c:	428b      	cmp	r3, r1
    9c1e:	d30c      	bcc.n	9c3a <__aeabi_idiv+0x14a>
    9c20:	0189      	lsls	r1, r1, #6
    9c22:	1192      	asrs	r2, r2, #6
    9c24:	428b      	cmp	r3, r1
    9c26:	d308      	bcc.n	9c3a <__aeabi_idiv+0x14a>
    9c28:	0189      	lsls	r1, r1, #6
    9c2a:	1192      	asrs	r2, r2, #6
    9c2c:	428b      	cmp	r3, r1
    9c2e:	d304      	bcc.n	9c3a <__aeabi_idiv+0x14a>
    9c30:	0189      	lsls	r1, r1, #6
    9c32:	d03a      	beq.n	9caa <__aeabi_idiv+0x1ba>
    9c34:	1192      	asrs	r2, r2, #6
    9c36:	e000      	b.n	9c3a <__aeabi_idiv+0x14a>
    9c38:	0989      	lsrs	r1, r1, #6
    9c3a:	09c3      	lsrs	r3, r0, #7
    9c3c:	428b      	cmp	r3, r1
    9c3e:	d301      	bcc.n	9c44 <__aeabi_idiv+0x154>
    9c40:	01cb      	lsls	r3, r1, #7
    9c42:	1ac0      	subs	r0, r0, r3
    9c44:	4152      	adcs	r2, r2
    9c46:	0983      	lsrs	r3, r0, #6
    9c48:	428b      	cmp	r3, r1
    9c4a:	d301      	bcc.n	9c50 <__aeabi_idiv+0x160>
    9c4c:	018b      	lsls	r3, r1, #6
    9c4e:	1ac0      	subs	r0, r0, r3
    9c50:	4152      	adcs	r2, r2
    9c52:	0943      	lsrs	r3, r0, #5
    9c54:	428b      	cmp	r3, r1
    9c56:	d301      	bcc.n	9c5c <__aeabi_idiv+0x16c>
    9c58:	014b      	lsls	r3, r1, #5
    9c5a:	1ac0      	subs	r0, r0, r3
    9c5c:	4152      	adcs	r2, r2
    9c5e:	0903      	lsrs	r3, r0, #4
    9c60:	428b      	cmp	r3, r1
    9c62:	d301      	bcc.n	9c68 <__aeabi_idiv+0x178>
    9c64:	010b      	lsls	r3, r1, #4
    9c66:	1ac0      	subs	r0, r0, r3
    9c68:	4152      	adcs	r2, r2
    9c6a:	08c3      	lsrs	r3, r0, #3
    9c6c:	428b      	cmp	r3, r1
    9c6e:	d301      	bcc.n	9c74 <__aeabi_idiv+0x184>
    9c70:	00cb      	lsls	r3, r1, #3
    9c72:	1ac0      	subs	r0, r0, r3
    9c74:	4152      	adcs	r2, r2
    9c76:	0883      	lsrs	r3, r0, #2
    9c78:	428b      	cmp	r3, r1
    9c7a:	d301      	bcc.n	9c80 <__aeabi_idiv+0x190>
    9c7c:	008b      	lsls	r3, r1, #2
    9c7e:	1ac0      	subs	r0, r0, r3
    9c80:	4152      	adcs	r2, r2
    9c82:	d2d9      	bcs.n	9c38 <__aeabi_idiv+0x148>
    9c84:	0843      	lsrs	r3, r0, #1
    9c86:	428b      	cmp	r3, r1
    9c88:	d301      	bcc.n	9c8e <__aeabi_idiv+0x19e>
    9c8a:	004b      	lsls	r3, r1, #1
    9c8c:	1ac0      	subs	r0, r0, r3
    9c8e:	4152      	adcs	r2, r2
    9c90:	1a41      	subs	r1, r0, r1
    9c92:	d200      	bcs.n	9c96 <__aeabi_idiv+0x1a6>
    9c94:	4601      	mov	r1, r0
    9c96:	4663      	mov	r3, ip
    9c98:	4152      	adcs	r2, r2
    9c9a:	105b      	asrs	r3, r3, #1
    9c9c:	4610      	mov	r0, r2
    9c9e:	d301      	bcc.n	9ca4 <__aeabi_idiv+0x1b4>
    9ca0:	4240      	negs	r0, r0
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d500      	bpl.n	9ca8 <__aeabi_idiv+0x1b8>
    9ca6:	4249      	negs	r1, r1
    9ca8:	4770      	bx	lr
    9caa:	4663      	mov	r3, ip
    9cac:	105b      	asrs	r3, r3, #1
    9cae:	d300      	bcc.n	9cb2 <__aeabi_idiv+0x1c2>
    9cb0:	4240      	negs	r0, r0
    9cb2:	b501      	push	{r0, lr}
    9cb4:	2000      	movs	r0, #0
    9cb6:	f000 f805 	bl	9cc4 <__aeabi_idiv0>
    9cba:	bd02      	pop	{r1, pc}

00009cbc <__aeabi_idivmod>:
    9cbc:	2900      	cmp	r1, #0
    9cbe:	d0f8      	beq.n	9cb2 <__aeabi_idiv+0x1c2>
    9cc0:	e716      	b.n	9af0 <__aeabi_idiv>
    9cc2:	4770      	bx	lr

00009cc4 <__aeabi_idiv0>:
    9cc4:	4770      	bx	lr
    9cc6:	46c0      	nop			; (mov r8, r8)

00009cc8 <__ctzsi2>:
    9cc8:	4241      	negs	r1, r0
    9cca:	4008      	ands	r0, r1
    9ccc:	211c      	movs	r1, #28
    9cce:	2301      	movs	r3, #1
    9cd0:	041b      	lsls	r3, r3, #16
    9cd2:	4298      	cmp	r0, r3
    9cd4:	d301      	bcc.n	9cda <__ctzsi2+0x12>
    9cd6:	0c00      	lsrs	r0, r0, #16
    9cd8:	3910      	subs	r1, #16
    9cda:	0a1b      	lsrs	r3, r3, #8
    9cdc:	4298      	cmp	r0, r3
    9cde:	d301      	bcc.n	9ce4 <__ctzsi2+0x1c>
    9ce0:	0a00      	lsrs	r0, r0, #8
    9ce2:	3908      	subs	r1, #8
    9ce4:	091b      	lsrs	r3, r3, #4
    9ce6:	4298      	cmp	r0, r3
    9ce8:	d301      	bcc.n	9cee <__ctzsi2+0x26>
    9cea:	0900      	lsrs	r0, r0, #4
    9cec:	3904      	subs	r1, #4
    9cee:	a202      	add	r2, pc, #8	; (adr r2, 9cf8 <__ctzsi2+0x30>)
    9cf0:	5c10      	ldrb	r0, [r2, r0]
    9cf2:	1a40      	subs	r0, r0, r1
    9cf4:	4770      	bx	lr
    9cf6:	46c0      	nop			; (mov r8, r8)
    9cf8:	1d1d1c1b 	.word	0x1d1d1c1b
    9cfc:	1e1e1e1e 	.word	0x1e1e1e1e
    9d00:	1f1f1f1f 	.word	0x1f1f1f1f
    9d04:	1f1f1f1f 	.word	0x1f1f1f1f

00009d08 <__aeabi_lmul>:
    9d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d0a:	464f      	mov	r7, r9
    9d0c:	4646      	mov	r6, r8
    9d0e:	b4c0      	push	{r6, r7}
    9d10:	0416      	lsls	r6, r2, #16
    9d12:	0c36      	lsrs	r6, r6, #16
    9d14:	4699      	mov	r9, r3
    9d16:	0033      	movs	r3, r6
    9d18:	0405      	lsls	r5, r0, #16
    9d1a:	0c2c      	lsrs	r4, r5, #16
    9d1c:	0c07      	lsrs	r7, r0, #16
    9d1e:	0c15      	lsrs	r5, r2, #16
    9d20:	4363      	muls	r3, r4
    9d22:	437e      	muls	r6, r7
    9d24:	436f      	muls	r7, r5
    9d26:	4365      	muls	r5, r4
    9d28:	0c1c      	lsrs	r4, r3, #16
    9d2a:	19ad      	adds	r5, r5, r6
    9d2c:	1964      	adds	r4, r4, r5
    9d2e:	469c      	mov	ip, r3
    9d30:	42a6      	cmp	r6, r4
    9d32:	d903      	bls.n	9d3c <__aeabi_lmul+0x34>
    9d34:	2380      	movs	r3, #128	; 0x80
    9d36:	025b      	lsls	r3, r3, #9
    9d38:	4698      	mov	r8, r3
    9d3a:	4447      	add	r7, r8
    9d3c:	4663      	mov	r3, ip
    9d3e:	0c25      	lsrs	r5, r4, #16
    9d40:	19ef      	adds	r7, r5, r7
    9d42:	041d      	lsls	r5, r3, #16
    9d44:	464b      	mov	r3, r9
    9d46:	434a      	muls	r2, r1
    9d48:	4343      	muls	r3, r0
    9d4a:	0c2d      	lsrs	r5, r5, #16
    9d4c:	0424      	lsls	r4, r4, #16
    9d4e:	1964      	adds	r4, r4, r5
    9d50:	1899      	adds	r1, r3, r2
    9d52:	19c9      	adds	r1, r1, r7
    9d54:	0020      	movs	r0, r4
    9d56:	bc0c      	pop	{r2, r3}
    9d58:	4690      	mov	r8, r2
    9d5a:	4699      	mov	r9, r3
    9d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d5e:	46c0      	nop			; (mov r8, r8)

00009d60 <__libc_init_array>:
    9d60:	4b0e      	ldr	r3, [pc, #56]	; (9d9c <__libc_init_array+0x3c>)
    9d62:	b570      	push	{r4, r5, r6, lr}
    9d64:	2500      	movs	r5, #0
    9d66:	001e      	movs	r6, r3
    9d68:	4c0d      	ldr	r4, [pc, #52]	; (9da0 <__libc_init_array+0x40>)
    9d6a:	1ae4      	subs	r4, r4, r3
    9d6c:	10a4      	asrs	r4, r4, #2
    9d6e:	42a5      	cmp	r5, r4
    9d70:	d004      	beq.n	9d7c <__libc_init_array+0x1c>
    9d72:	00ab      	lsls	r3, r5, #2
    9d74:	58f3      	ldr	r3, [r6, r3]
    9d76:	4798      	blx	r3
    9d78:	3501      	adds	r5, #1
    9d7a:	e7f8      	b.n	9d6e <__libc_init_array+0xe>
    9d7c:	f000 f8a8 	bl	9ed0 <_init>
    9d80:	4b08      	ldr	r3, [pc, #32]	; (9da4 <__libc_init_array+0x44>)
    9d82:	2500      	movs	r5, #0
    9d84:	001e      	movs	r6, r3
    9d86:	4c08      	ldr	r4, [pc, #32]	; (9da8 <__libc_init_array+0x48>)
    9d88:	1ae4      	subs	r4, r4, r3
    9d8a:	10a4      	asrs	r4, r4, #2
    9d8c:	42a5      	cmp	r5, r4
    9d8e:	d004      	beq.n	9d9a <__libc_init_array+0x3a>
    9d90:	00ab      	lsls	r3, r5, #2
    9d92:	58f3      	ldr	r3, [r6, r3]
    9d94:	4798      	blx	r3
    9d96:	3501      	adds	r5, #1
    9d98:	e7f8      	b.n	9d8c <__libc_init_array+0x2c>
    9d9a:	bd70      	pop	{r4, r5, r6, pc}
    9d9c:	00009edc 	.word	0x00009edc
    9da0:	00009edc 	.word	0x00009edc
    9da4:	00009edc 	.word	0x00009edc
    9da8:	00009ee0 	.word	0x00009ee0

00009dac <memcpy>:
    9dac:	2300      	movs	r3, #0
    9dae:	b510      	push	{r4, lr}
    9db0:	429a      	cmp	r2, r3
    9db2:	d003      	beq.n	9dbc <memcpy+0x10>
    9db4:	5ccc      	ldrb	r4, [r1, r3]
    9db6:	54c4      	strb	r4, [r0, r3]
    9db8:	3301      	adds	r3, #1
    9dba:	e7f9      	b.n	9db0 <memcpy+0x4>
    9dbc:	bd10      	pop	{r4, pc}

00009dbe <memset>:
    9dbe:	0003      	movs	r3, r0
    9dc0:	1882      	adds	r2, r0, r2
    9dc2:	4293      	cmp	r3, r2
    9dc4:	d002      	beq.n	9dcc <memset+0xe>
    9dc6:	7019      	strb	r1, [r3, #0]
    9dc8:	3301      	adds	r3, #1
    9dca:	e7fa      	b.n	9dc2 <memset+0x4>
    9dcc:	4770      	bx	lr
    9dce:	0000      	movs	r0, r0
    9dd0:	42000800 	.word	0x42000800
    9dd4:	42000c00 	.word	0x42000c00
    9dd8:	42001000 	.word	0x42001000
    9ddc:	42001400 	.word	0x42001400
    9de0:	42001800 	.word	0x42001800
    9de4:	42001c00 	.word	0x42001c00
    9de8:	00002b66 	.word	0x00002b66
    9dec:	00002b44 	.word	0x00002b44
    9df0:	00002b22 	.word	0x00002b22
    9df4:	00002af0 	.word	0x00002af0
    9df8:	00002abe 	.word	0x00002abe
    9dfc:	0000424a 	.word	0x0000424a
    9e00:	00004232 	.word	0x00004232
    9e04:	0000424a 	.word	0x0000424a
    9e08:	0000423a 	.word	0x0000423a
    9e0c:	0000424a 	.word	0x0000424a
    9e10:	0000422a 	.word	0x0000422a
    9e14:	0000424a 	.word	0x0000424a
    9e18:	0000424a 	.word	0x0000424a
    9e1c:	0000424a 	.word	0x0000424a
    9e20:	00004242 	.word	0x00004242
    9e24:	00004ee2 	.word	0x00004ee2
    9e28:	00004f68 	.word	0x00004f68
    9e2c:	00004f68 	.word	0x00004f68
    9e30:	00004f00 	.word	0x00004f00
    9e34:	00004efa 	.word	0x00004efa
    9e38:	00004f06 	.word	0x00004f06
    9e3c:	00004ee8 	.word	0x00004ee8
    9e40:	00004f0c 	.word	0x00004f0c
    9e44:	00004f4e 	.word	0x00004f4e
    9e48:	00005114 	.word	0x00005114
    9e4c:	00005164 	.word	0x00005164
    9e50:	00005164 	.word	0x00005164
    9e54:	00005160 	.word	0x00005160
    9e58:	00005106 	.word	0x00005106
    9e5c:	00005126 	.word	0x00005126
    9e60:	000050f6 	.word	0x000050f6
    9e64:	00005138 	.word	0x00005138
    9e68:	0000514a 	.word	0x0000514a
    9e6c:	000051b2 	.word	0x000051b2
    9e70:	000051e0 	.word	0x000051e0
    9e74:	000051e0 	.word	0x000051e0
    9e78:	000051dc 	.word	0x000051dc
    9e7c:	000051ac 	.word	0x000051ac
    9e80:	000051b8 	.word	0x000051b8
    9e84:	000051a6 	.word	0x000051a6
    9e88:	000051be 	.word	0x000051be
    9e8c:	000051c4 	.word	0x000051c4
    9e90:	01020300 	.word	0x01020300

00009e94 <_usb_device_irq_bits>:
    9e94:	00080004 00800070 01000001 00000200     ....p...........

00009ea4 <_usb_endpoint_irq_bits>:
    9ea4:	60100c03 00007e1a 00007e30 00007f9c     ...`.~..0~......
    9eb4:	0000806a 00008138 53504f54 45524345     j...8...TOPSECRE
    9ec4:	53415054 44525753 00000000              TPASSWRD....

00009ed0 <_init>:
    9ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ed2:	46c0      	nop			; (mov r8, r8)
    9ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9ed6:	bc08      	pop	{r3}
    9ed8:	469e      	mov	lr, r3
    9eda:	4770      	bx	lr

00009edc <__init_array_start>:
    9edc:	000000dd 	.word	0x000000dd

00009ee0 <_fini>:
    9ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ee2:	46c0      	nop			; (mov r8, r8)
    9ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9ee6:	bc08      	pop	{r3}
    9ee8:	469e      	mov	lr, r3
    9eea:	4770      	bx	lr

00009eec <__fini_array_start>:
    9eec:	000000b5 	.word	0x000000b5
