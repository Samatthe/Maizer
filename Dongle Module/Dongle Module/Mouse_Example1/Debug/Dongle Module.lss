
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009248  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00009248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000524  200000e0  00009328  000200e0  2**2
                  ALLOC
  3 .stack        00002004  20000604  0000984c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028cfe  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036e1  00000000  00000000  00048e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004e15  00000000  00000000  0004c540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd8  00000000  00000000  00051355  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c58  00000000  00000000  0005212d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee06  00000000  00000000  00052d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011ca1  00000000  00000000  00071b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094f06  00000000  00000000  0008382c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fa0  00000000  00000000  00118734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002608 	.word	0x20002608
       4:	000089cd 	.word	0x000089cd
       8:	00008ac5 	.word	0x00008ac5
       c:	00008ac5 	.word	0x00008ac5
	...
      2c:	00008ac5 	.word	0x00008ac5
	...
      38:	00008ac5 	.word	0x00008ac5
      3c:	00008ac5 	.word	0x00008ac5
      40:	00008ac5 	.word	0x00008ac5
      44:	00008ac5 	.word	0x00008ac5
      48:	00008ac5 	.word	0x00008ac5
      4c:	00008ac5 	.word	0x00008ac5
      50:	000041ad 	.word	0x000041ad
      54:	00008ac5 	.word	0x00008ac5
      58:	00008ac5 	.word	0x00008ac5
      5c:	00008615 	.word	0x00008615
      60:	00008ac5 	.word	0x00008ac5
      64:	00008ac5 	.word	0x00008ac5
      68:	00008ac5 	.word	0x00008ac5
      6c:	00008ac5 	.word	0x00008ac5
      70:	00008ac5 	.word	0x00008ac5
      74:	00008ac5 	.word	0x00008ac5
      78:	00008ac5 	.word	0x00008ac5
      7c:	00008ac5 	.word	0x00008ac5
      80:	00008ac5 	.word	0x00008ac5
      84:	00008ac5 	.word	0x00008ac5
      88:	00008ac5 	.word	0x00008ac5
      8c:	00008ac5 	.word	0x00008ac5
      90:	00008ac5 	.word	0x00008ac5
	...
      9c:	00008ac5 	.word	0x00008ac5
      a0:	00008ac5 	.word	0x00008ac5
      a4:	00008ac5 	.word	0x00008ac5
      a8:	00008ac5 	.word	0x00008ac5
      ac:	00008ac5 	.word	0x00008ac5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00009248 	.word	0x00009248

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00009248 	.word	0x00009248
     10c:	00009248 	.word	0x00009248
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     188:	b580      	push	{r7, lr}
     18a:	b084      	sub	sp, #16
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     190:	687b      	ldr	r3, [r7, #4]
     192:	681b      	ldr	r3, [r3, #0]
     194:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     196:	68fb      	ldr	r3, [r7, #12]
     198:	7a9b      	ldrb	r3, [r3, #10]
     19a:	b2db      	uxtb	r3, r3
     19c:	b25b      	sxtb	r3, r3
     19e:	2b00      	cmp	r3, #0
     1a0:	da01      	bge.n	1a6 <rtc_count_is_syncing+0x1e>
                return true;
     1a2:	2301      	movs	r3, #1
     1a4:	e000      	b.n	1a8 <rtc_count_is_syncing+0x20>
        }

        return false;
     1a6:	2300      	movs	r3, #0
}
     1a8:	0018      	movs	r0, r3
     1aa:	46bd      	mov	sp, r7
     1ac:	b004      	add	sp, #16
     1ae:	bd80      	pop	{r7, pc}

000001b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b084      	sub	sp, #16
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	0018      	movs	r0, r3
     1c4:	4b07      	ldr	r3, [pc, #28]	; (1e4 <rtc_count_enable+0x34>)
     1c6:	4798      	blx	r3
     1c8:	1e03      	subs	r3, r0, #0
     1ca:	d1f9      	bne.n	1c0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	881b      	ldrh	r3, [r3, #0]
     1d0:	b29b      	uxth	r3, r3
     1d2:	2202      	movs	r2, #2
     1d4:	4313      	orrs	r3, r2
     1d6:	b29a      	uxth	r2, r3
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	801a      	strh	r2, [r3, #0]
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}
     1e4:	00000189 	.word	0x00000189

000001e8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	0018      	movs	r0, r3
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_count_disable+0x34>)
     1fe:	4798      	blx	r3
     200:	1e03      	subs	r3, r0, #0
     202:	d1f9      	bne.n	1f8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	2202      	movs	r2, #2
     20c:	4393      	bics	r3, r2
     20e:	b29a      	uxth	r2, r3
     210:	68fb      	ldr	r3, [r7, #12]
     212:	801a      	strh	r2, [r3, #0]
}
     214:	46c0      	nop			; (mov r8, r8)
     216:	46bd      	mov	sp, r7
     218:	b004      	add	sp, #16
     21a:	bd80      	pop	{r7, pc}
     21c:	00000189 	.word	0x00000189

00000220 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     22e:	687b      	ldr	r3, [r7, #4]
     230:	0018      	movs	r0, r3
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <rtc_count_reset+0x3c>)
     234:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     236:	46c0      	nop			; (mov r8, r8)
     238:	687b      	ldr	r3, [r7, #4]
     23a:	0018      	movs	r0, r3
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <rtc_count_reset+0x40>)
     23e:	4798      	blx	r3
     240:	1e03      	subs	r3, r0, #0
     242:	d1f9      	bne.n	238 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29b      	uxth	r3, r3
     24a:	2201      	movs	r2, #1
     24c:	4313      	orrs	r3, r2
     24e:	b29a      	uxth	r2, r3
     250:	68fb      	ldr	r3, [r7, #12]
     252:	801a      	strh	r2, [r3, #0]
}
     254:	46c0      	nop			; (mov r8, r8)
     256:	46bd      	mov	sp, r7
     258:	b004      	add	sp, #16
     25a:	bd80      	pop	{r7, pc}
     25c:	000001e9 	.word	0x000001e9
     260:	00000189 	.word	0x00000189

00000264 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
     26c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     274:	683b      	ldr	r3, [r7, #0]
     276:	881a      	ldrh	r2, [r3, #0]
     278:	68bb      	ldr	r3, [r7, #8]
     27a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	789b      	ldrb	r3, [r3, #2]
     280:	2b00      	cmp	r3, #0
     282:	d03a      	beq.n	2fa <_rtc_count_set_config+0x96>
     284:	2b01      	cmp	r3, #1
     286:	d000      	beq.n	28a <_rtc_count_set_config+0x26>
     288:	e06c      	b.n	364 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	881b      	ldrh	r3, [r3, #0]
     28e:	b29a      	uxth	r2, r3
     290:	68bb      	ldr	r3, [r7, #8]
     292:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     294:	683b      	ldr	r3, [r7, #0]
     296:	78db      	ldrb	r3, [r3, #3]
     298:	2b00      	cmp	r3, #0
     29a:	d007      	beq.n	2ac <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	881b      	ldrh	r3, [r3, #0]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	4313      	orrs	r3, r2
     2a6:	b29a      	uxth	r2, r3
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2ac:	230f      	movs	r3, #15
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	2200      	movs	r2, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	e01b      	b.n	2ee <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	0018      	movs	r0, r3
     2bc:	4b33      	ldr	r3, [pc, #204]	; (38c <_rtc_count_set_config+0x128>)
     2be:	4798      	blx	r3
     2c0:	1e03      	subs	r3, r0, #0
     2c2:	d1f9      	bne.n	2b8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c4:	230f      	movs	r3, #15
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	781a      	ldrb	r2, [r3, #0]
     2ca:	683b      	ldr	r3, [r7, #0]
     2cc:	3202      	adds	r2, #2
     2ce:	0092      	lsls	r2, r2, #2
     2d0:	58d1      	ldr	r1, [r2, r3]
     2d2:	230f      	movs	r3, #15
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	781a      	ldrb	r2, [r3, #0]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b2c      	ldr	r3, [pc, #176]	; (390 <_rtc_count_set_config+0x12c>)
     2de:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2e0:	230f      	movs	r3, #15
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	781a      	ldrb	r2, [r3, #0]
     2e6:	230f      	movs	r3, #15
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	3201      	adds	r2, #1
     2ec:	701a      	strb	r2, [r3, #0]
     2ee:	230f      	movs	r3, #15
     2f0:	18fb      	adds	r3, r7, r3
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0de      	beq.n	2b6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     2f8:	e036      	b.n	368 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2fa:	68bb      	ldr	r3, [r7, #8]
     2fc:	881b      	ldrh	r3, [r3, #0]
     2fe:	b29b      	uxth	r3, r3
     300:	2204      	movs	r2, #4
     302:	4313      	orrs	r3, r2
     304:	b29a      	uxth	r2, r3
     306:	68bb      	ldr	r3, [r7, #8]
     308:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     30a:	683b      	ldr	r3, [r7, #0]
     30c:	78db      	ldrb	r3, [r3, #3]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     312:	2317      	movs	r3, #23
     314:	e036      	b.n	384 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     316:	230e      	movs	r3, #14
     318:	18fb      	adds	r3, r7, r3
     31a:	2200      	movs	r2, #0
     31c:	701a      	strb	r2, [r3, #0]
     31e:	e01b      	b.n	358 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     320:	46c0      	nop			; (mov r8, r8)
     322:	687b      	ldr	r3, [r7, #4]
     324:	0018      	movs	r0, r3
     326:	4b19      	ldr	r3, [pc, #100]	; (38c <_rtc_count_set_config+0x128>)
     328:	4798      	blx	r3
     32a:	1e03      	subs	r3, r0, #0
     32c:	d1f9      	bne.n	322 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     32e:	230e      	movs	r3, #14
     330:	18fb      	adds	r3, r7, r3
     332:	781a      	ldrb	r2, [r3, #0]
     334:	683b      	ldr	r3, [r7, #0]
     336:	3202      	adds	r2, #2
     338:	0092      	lsls	r2, r2, #2
     33a:	58d1      	ldr	r1, [r2, r3]
     33c:	230e      	movs	r3, #14
     33e:	18fb      	adds	r3, r7, r3
     340:	781a      	ldrb	r2, [r3, #0]
     342:	687b      	ldr	r3, [r7, #4]
     344:	0018      	movs	r0, r3
     346:	4b12      	ldr	r3, [pc, #72]	; (390 <_rtc_count_set_config+0x12c>)
     348:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     34a:	230e      	movs	r3, #14
     34c:	18fb      	adds	r3, r7, r3
     34e:	781a      	ldrb	r2, [r3, #0]
     350:	230e      	movs	r3, #14
     352:	18fb      	adds	r3, r7, r3
     354:	3201      	adds	r2, #1
     356:	701a      	strb	r2, [r3, #0]
     358:	230e      	movs	r3, #14
     35a:	18fb      	adds	r3, r7, r3
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	2b01      	cmp	r3, #1
     360:	d9de      	bls.n	320 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     362:	e001      	b.n	368 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     364:	2317      	movs	r3, #23
     366:	e00d      	b.n	384 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     368:	683b      	ldr	r3, [r7, #0]
     36a:	791b      	ldrb	r3, [r3, #4]
     36c:	2b00      	cmp	r3, #0
     36e:	d008      	beq.n	382 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     370:	68bb      	ldr	r3, [r7, #8]
     372:	885b      	ldrh	r3, [r3, #2]
     374:	b29b      	uxth	r3, r3
     376:	2280      	movs	r2, #128	; 0x80
     378:	01d2      	lsls	r2, r2, #7
     37a:	4313      	orrs	r3, r2
     37c:	b29a      	uxth	r2, r3
     37e:	68bb      	ldr	r3, [r7, #8]
     380:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     382:	2300      	movs	r3, #0
}
     384:	0018      	movs	r0, r3
     386:	46bd      	mov	sp, r7
     388:	b004      	add	sp, #16
     38a:	bd80      	pop	{r7, pc}
     38c:	00000189 	.word	0x00000189
     390:	000004ed 	.word	0x000004ed

00000394 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     394:	b580      	push	{r7, lr}
     396:	b086      	sub	sp, #24
     398:	af00      	add	r7, sp, #0
     39a:	60f8      	str	r0, [r7, #12]
     39c:	60b9      	str	r1, [r7, #8]
     39e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3a0:	68fb      	ldr	r3, [r7, #12]
     3a2:	68ba      	ldr	r2, [r7, #8]
     3a4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     3a6:	2120      	movs	r1, #32
     3a8:	2000      	movs	r0, #0
     3aa:	4b17      	ldr	r3, [pc, #92]	; (408 <rtc_count_init+0x74>)
     3ac:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3ae:	2314      	movs	r3, #20
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	0018      	movs	r0, r3
     3b4:	4b15      	ldr	r3, [pc, #84]	; (40c <rtc_count_init+0x78>)
     3b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3b8:	2314      	movs	r3, #20
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	2202      	movs	r2, #2
     3be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3c0:	2314      	movs	r3, #20
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	0019      	movs	r1, r3
     3c6:	2004      	movs	r0, #4
     3c8:	4b11      	ldr	r3, [pc, #68]	; (410 <rtc_count_init+0x7c>)
     3ca:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3cc:	2004      	movs	r0, #4
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <rtc_count_init+0x80>)
     3d0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     3d2:	68fb      	ldr	r3, [r7, #12]
     3d4:	0018      	movs	r0, r3
     3d6:	4b10      	ldr	r3, [pc, #64]	; (418 <rtc_count_init+0x84>)
     3d8:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	789a      	ldrb	r2, [r3, #2]
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	791a      	ldrb	r2, [r3, #4]
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <rtc_count_init+0x88>)
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     3f0:	687a      	ldr	r2, [r7, #4]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	0011      	movs	r1, r2
     3f6:	0018      	movs	r0, r3
     3f8:	4b09      	ldr	r3, [pc, #36]	; (420 <rtc_count_init+0x8c>)
     3fa:	4798      	blx	r3
     3fc:	0003      	movs	r3, r0
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b006      	add	sp, #24
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	0000012d 	.word	0x0000012d
     40c:	00000115 	.word	0x00000115
     410:	000050d1 	.word	0x000050d1
     414:	00005115 	.word	0x00005115
     418:	00000221 	.word	0x00000221
     41c:	2000023c 	.word	0x2000023c
     420:	00000265 	.word	0x00000265

00000424 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     424:	b580      	push	{r7, lr}
     426:	b084      	sub	sp, #16
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	681b      	ldr	r3, [r3, #0]
     432:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     434:	46c0      	nop			; (mov r8, r8)
     436:	687b      	ldr	r3, [r7, #4]
     438:	0018      	movs	r0, r3
     43a:	4b10      	ldr	r3, [pc, #64]	; (47c <rtc_count_set_count+0x58>)
     43c:	4798      	blx	r3
     43e:	1e03      	subs	r3, r0, #0
     440:	d1f9      	bne.n	436 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     442:	687b      	ldr	r3, [r7, #4]
     444:	791b      	ldrb	r3, [r3, #4]
     446:	2b00      	cmp	r3, #0
     448:	d005      	beq.n	456 <rtc_count_set_count+0x32>
     44a:	2b01      	cmp	r3, #1
     44c:	d10e      	bne.n	46c <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	683a      	ldr	r2, [r7, #0]
     452:	611a      	str	r2, [r3, #16]

			break;
     454:	e00c      	b.n	470 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     456:	683b      	ldr	r3, [r7, #0]
     458:	4a09      	ldr	r2, [pc, #36]	; (480 <rtc_count_set_count+0x5c>)
     45a:	4293      	cmp	r3, r2
     45c:	d901      	bls.n	462 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     45e:	2317      	movs	r3, #23
     460:	e007      	b.n	472 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     462:	683b      	ldr	r3, [r7, #0]
     464:	b29a      	uxth	r2, r3
     466:	68fb      	ldr	r3, [r7, #12]
     468:	821a      	strh	r2, [r3, #16]

			break;
     46a:	e001      	b.n	470 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     46c:	2317      	movs	r3, #23
     46e:	e000      	b.n	472 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     470:	2300      	movs	r3, #0
}
     472:	0018      	movs	r0, r3
     474:	46bd      	mov	sp, r7
     476:	b004      	add	sp, #16
     478:	bd80      	pop	{r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	00000189 	.word	0x00000189
     480:	0000ffff 	.word	0x0000ffff

00000484 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     484:	b580      	push	{r7, lr}
     486:	b084      	sub	sp, #16
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	681b      	ldr	r3, [r3, #0]
     490:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     492:	687b      	ldr	r3, [r7, #4]
     494:	795b      	ldrb	r3, [r3, #5]
     496:	2201      	movs	r2, #1
     498:	4053      	eors	r3, r2
     49a:	b2db      	uxtb	r3, r3
     49c:	2b00      	cmp	r3, #0
     49e:	d009      	beq.n	4b4 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	4a10      	ldr	r2, [pc, #64]	; (4e4 <rtc_count_get_count+0x60>)
     4a4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	0018      	movs	r0, r3
     4ac:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <rtc_count_get_count+0x64>)
     4ae:	4798      	blx	r3
     4b0:	1e03      	subs	r3, r0, #0
     4b2:	d1f9      	bne.n	4a8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	791b      	ldrb	r3, [r3, #4]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d005      	beq.n	4c8 <rtc_count_get_count+0x44>
     4bc:	2b01      	cmp	r3, #1
     4be:	d108      	bne.n	4d2 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     4c0:	68bb      	ldr	r3, [r7, #8]
     4c2:	691b      	ldr	r3, [r3, #16]
     4c4:	60fb      	str	r3, [r7, #12]

			break;
     4c6:	e007      	b.n	4d8 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	8a1b      	ldrh	r3, [r3, #16]
     4cc:	b29b      	uxth	r3, r3
     4ce:	60fb      	str	r3, [r7, #12]

			break;
     4d0:	e002      	b.n	4d8 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     4d2:	2300      	movs	r3, #0
     4d4:	60fb      	str	r3, [r7, #12]
			break;
     4d6:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     4d8:	68fb      	ldr	r3, [r7, #12]
}
     4da:	0018      	movs	r0, r3
     4dc:	46bd      	mov	sp, r7
     4de:	b004      	add	sp, #16
     4e0:	bd80      	pop	{r7, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	ffff8000 	.word	0xffff8000
     4e8:	00000189 	.word	0x00000189

000004ec <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b086      	sub	sp, #24
     4f0:	af00      	add	r7, sp, #0
     4f2:	60f8      	str	r0, [r7, #12]
     4f4:	60b9      	str	r1, [r7, #8]
     4f6:	1dfb      	adds	r3, r7, #7
     4f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4fa:	68fb      	ldr	r3, [r7, #12]
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     500:	46c0      	nop			; (mov r8, r8)
     502:	68fb      	ldr	r3, [r7, #12]
     504:	0018      	movs	r0, r3
     506:	4b1a      	ldr	r3, [pc, #104]	; (570 <rtc_count_set_compare+0x84>)
     508:	4798      	blx	r3
     50a:	1e03      	subs	r3, r0, #0
     50c:	d1f9      	bne.n	502 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     50e:	68fb      	ldr	r3, [r7, #12]
     510:	791b      	ldrb	r3, [r3, #4]
     512:	2b00      	cmp	r3, #0
     514:	d00f      	beq.n	536 <rtc_count_set_compare+0x4a>
     516:	2b01      	cmp	r3, #1
     518:	d122      	bne.n	560 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     51a:	1dfb      	adds	r3, r7, #7
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2b01      	cmp	r3, #1
     520:	d901      	bls.n	526 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     522:	2317      	movs	r3, #23
     524:	e01f      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     526:	1dfb      	adds	r3, r7, #7
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	697b      	ldr	r3, [r7, #20]
     52c:	3206      	adds	r2, #6
     52e:	0092      	lsls	r2, r2, #2
     530:	68b9      	ldr	r1, [r7, #8]
     532:	50d1      	str	r1, [r2, r3]

			break;
     534:	e016      	b.n	564 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2b02      	cmp	r3, #2
     53c:	d901      	bls.n	542 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     53e:	2317      	movs	r3, #23
     540:	e011      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     542:	68bb      	ldr	r3, [r7, #8]
     544:	4a0b      	ldr	r2, [pc, #44]	; (574 <rtc_count_set_compare+0x88>)
     546:	4293      	cmp	r3, r2
     548:	d901      	bls.n	54e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     54a:	2317      	movs	r3, #23
     54c:	e00b      	b.n	566 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     54e:	1dfb      	adds	r3, r7, #7
     550:	781a      	ldrb	r2, [r3, #0]
     552:	68bb      	ldr	r3, [r7, #8]
     554:	b299      	uxth	r1, r3
     556:	697b      	ldr	r3, [r7, #20]
     558:	320c      	adds	r2, #12
     55a:	0052      	lsls	r2, r2, #1
     55c:	52d1      	strh	r1, [r2, r3]

			break;
     55e:	e001      	b.n	564 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     560:	231a      	movs	r3, #26
     562:	e000      	b.n	566 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     564:	2300      	movs	r3, #0
}
     566:	0018      	movs	r0, r3
     568:	46bd      	mov	sp, r7
     56a:	b006      	add	sp, #24
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00000189 	.word	0x00000189
     574:	0000ffff 	.word	0x0000ffff

00000578 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     578:	b580      	push	{r7, lr}
     57a:	b084      	sub	sp, #16
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
     580:	000a      	movs	r2, r1
     582:	1cbb      	adds	r3, r7, #2
     584:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     586:	687b      	ldr	r3, [r7, #4]
     588:	681b      	ldr	r3, [r3, #0]
     58a:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	791b      	ldrb	r3, [r3, #4]
     590:	2b00      	cmp	r3, #0
     592:	d001      	beq.n	598 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     594:	2315      	movs	r3, #21
     596:	e00b      	b.n	5b0 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     598:	46c0      	nop			; (mov r8, r8)
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	0018      	movs	r0, r3
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <rtc_count_set_period+0x40>)
     5a0:	4798      	blx	r3
     5a2:	1e03      	subs	r3, r0, #0
     5a4:	d1f9      	bne.n	59a <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	1cba      	adds	r2, r7, #2
     5aa:	8812      	ldrh	r2, [r2, #0]
     5ac:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     5ae:	2300      	movs	r3, #0
}
     5b0:	0018      	movs	r0, r3
     5b2:	46bd      	mov	sp, r7
     5b4:	b004      	add	sp, #16
     5b6:	bd80      	pop	{r7, pc}
     5b8:	00000189 	.word	0x00000189

000005bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b082      	sub	sp, #8
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	46bd      	mov	sp, r7
     5ce:	b002      	add	sp, #8
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b086      	sub	sp, #24
     5d8:	af00      	add	r7, sp, #0
     5da:	60f8      	str	r0, [r7, #12]
     5dc:	60b9      	str	r1, [r7, #8]
     5de:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     5e0:	2316      	movs	r3, #22
     5e2:	18fb      	adds	r3, r7, r3
     5e4:	2200      	movs	r2, #0
     5e6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     5e8:	68bb      	ldr	r3, [r7, #8]
     5ea:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5ec:	68bb      	ldr	r3, [r7, #8]
     5ee:	085a      	lsrs	r2, r3, #1
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	429a      	cmp	r2, r3
     5f4:	d201      	bcs.n	5fa <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5f6:	2340      	movs	r3, #64	; 0x40
     5f8:	e026      	b.n	648 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     5fa:	68bb      	ldr	r3, [r7, #8]
     5fc:	085b      	lsrs	r3, r3, #1
     5fe:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     600:	e00a      	b.n	618 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     602:	693a      	ldr	r2, [r7, #16]
     604:	68fb      	ldr	r3, [r7, #12]
     606:	1ad3      	subs	r3, r2, r3
     608:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     60a:	2316      	movs	r3, #22
     60c:	18fb      	adds	r3, r7, r3
     60e:	881a      	ldrh	r2, [r3, #0]
     610:	2316      	movs	r3, #22
     612:	18fb      	adds	r3, r7, r3
     614:	3201      	adds	r2, #1
     616:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     618:	693a      	ldr	r2, [r7, #16]
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	429a      	cmp	r2, r3
     61e:	d2f0      	bcs.n	602 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     620:	2316      	movs	r3, #22
     622:	18fb      	adds	r3, r7, r3
     624:	2216      	movs	r2, #22
     626:	18ba      	adds	r2, r7, r2
     628:	8812      	ldrh	r2, [r2, #0]
     62a:	3a01      	subs	r2, #1
     62c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     62e:	2316      	movs	r3, #22
     630:	18fb      	adds	r3, r7, r3
     632:	881b      	ldrh	r3, [r3, #0]
     634:	2bff      	cmp	r3, #255	; 0xff
     636:	d901      	bls.n	63c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     638:	2340      	movs	r3, #64	; 0x40
     63a:	e005      	b.n	648 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	2216      	movs	r2, #22
     640:	18ba      	adds	r2, r7, r2
     642:	8812      	ldrh	r2, [r2, #0]
     644:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     646:	2300      	movs	r3, #0
	}
}
     648:	0018      	movs	r0, r3
     64a:	46bd      	mov	sp, r7
     64c:	b006      	add	sp, #24
     64e:	bd80      	pop	{r7, pc}

00000650 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     650:	b580      	push	{r7, lr}
     652:	b084      	sub	sp, #16
     654:	af00      	add	r7, sp, #0
     656:	0002      	movs	r2, r0
     658:	1dfb      	adds	r3, r7, #7
     65a:	701a      	strb	r2, [r3, #0]
     65c:	1dbb      	adds	r3, r7, #6
     65e:	1c0a      	adds	r2, r1, #0
     660:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     662:	4b1a      	ldr	r3, [pc, #104]	; (6cc <sercom_set_gclk_generator+0x7c>)
     664:	781b      	ldrb	r3, [r3, #0]
     666:	2201      	movs	r2, #1
     668:	4053      	eors	r3, r2
     66a:	b2db      	uxtb	r3, r3
     66c:	2b00      	cmp	r3, #0
     66e:	d103      	bne.n	678 <sercom_set_gclk_generator+0x28>
     670:	1dbb      	adds	r3, r7, #6
     672:	781b      	ldrb	r3, [r3, #0]
     674:	2b00      	cmp	r3, #0
     676:	d01b      	beq.n	6b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     678:	230c      	movs	r3, #12
     67a:	18fb      	adds	r3, r7, r3
     67c:	0018      	movs	r0, r3
     67e:	4b14      	ldr	r3, [pc, #80]	; (6d0 <sercom_set_gclk_generator+0x80>)
     680:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     682:	230c      	movs	r3, #12
     684:	18fb      	adds	r3, r7, r3
     686:	1dfa      	adds	r2, r7, #7
     688:	7812      	ldrb	r2, [r2, #0]
     68a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     68c:	230c      	movs	r3, #12
     68e:	18fb      	adds	r3, r7, r3
     690:	0019      	movs	r1, r3
     692:	2013      	movs	r0, #19
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <sercom_set_gclk_generator+0x84>)
     696:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     698:	2013      	movs	r0, #19
     69a:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <sercom_set_gclk_generator+0x88>)
     69c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     69e:	4b0b      	ldr	r3, [pc, #44]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6a0:	1dfa      	adds	r2, r7, #7
     6a2:	7812      	ldrb	r2, [r2, #0]
     6a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     6a6:	4b09      	ldr	r3, [pc, #36]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6a8:	2201      	movs	r2, #1
     6aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6ac:	2300      	movs	r3, #0
     6ae:	e008      	b.n	6c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <sercom_set_gclk_generator+0x7c>)
     6b2:	785b      	ldrb	r3, [r3, #1]
     6b4:	1dfa      	adds	r2, r7, #7
     6b6:	7812      	ldrb	r2, [r2, #0]
     6b8:	429a      	cmp	r2, r3
     6ba:	d101      	bne.n	6c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     6bc:	2300      	movs	r3, #0
     6be:	e000      	b.n	6c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6c0:	231d      	movs	r3, #29
}
     6c2:	0018      	movs	r0, r3
     6c4:	46bd      	mov	sp, r7
     6c6:	b004      	add	sp, #16
     6c8:	bd80      	pop	{r7, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	200000fc 	.word	0x200000fc
     6d0:	000005bd 	.word	0x000005bd
     6d4:	000050d1 	.word	0x000050d1
     6d8:	00005115 	.word	0x00005115

000006dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
     6e4:	000a      	movs	r2, r1
     6e6:	1cfb      	adds	r3, r7, #3
     6e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	4a4d      	ldr	r2, [pc, #308]	; (824 <_sercom_get_default_pad+0x148>)
     6ee:	4293      	cmp	r3, r2
     6f0:	d03f      	beq.n	772 <_sercom_get_default_pad+0x96>
     6f2:	4a4c      	ldr	r2, [pc, #304]	; (824 <_sercom_get_default_pad+0x148>)
     6f4:	4293      	cmp	r3, r2
     6f6:	d806      	bhi.n	706 <_sercom_get_default_pad+0x2a>
     6f8:	4a4b      	ldr	r2, [pc, #300]	; (828 <_sercom_get_default_pad+0x14c>)
     6fa:	4293      	cmp	r3, r2
     6fc:	d00f      	beq.n	71e <_sercom_get_default_pad+0x42>
     6fe:	4a4b      	ldr	r2, [pc, #300]	; (82c <_sercom_get_default_pad+0x150>)
     700:	4293      	cmp	r3, r2
     702:	d021      	beq.n	748 <_sercom_get_default_pad+0x6c>
     704:	e089      	b.n	81a <_sercom_get_default_pad+0x13e>
     706:	4a4a      	ldr	r2, [pc, #296]	; (830 <_sercom_get_default_pad+0x154>)
     708:	4293      	cmp	r3, r2
     70a:	d100      	bne.n	70e <_sercom_get_default_pad+0x32>
     70c:	e05b      	b.n	7c6 <_sercom_get_default_pad+0xea>
     70e:	4a49      	ldr	r2, [pc, #292]	; (834 <_sercom_get_default_pad+0x158>)
     710:	4293      	cmp	r3, r2
     712:	d100      	bne.n	716 <_sercom_get_default_pad+0x3a>
     714:	e06c      	b.n	7f0 <_sercom_get_default_pad+0x114>
     716:	4a48      	ldr	r2, [pc, #288]	; (838 <_sercom_get_default_pad+0x15c>)
     718:	4293      	cmp	r3, r2
     71a:	d03f      	beq.n	79c <_sercom_get_default_pad+0xc0>
     71c:	e07d      	b.n	81a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     71e:	1cfb      	adds	r3, r7, #3
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b01      	cmp	r3, #1
     724:	d00a      	beq.n	73c <_sercom_get_default_pad+0x60>
     726:	dc02      	bgt.n	72e <_sercom_get_default_pad+0x52>
     728:	2b00      	cmp	r3, #0
     72a:	d005      	beq.n	738 <_sercom_get_default_pad+0x5c>
     72c:	e075      	b.n	81a <_sercom_get_default_pad+0x13e>
     72e:	2b02      	cmp	r3, #2
     730:	d006      	beq.n	740 <_sercom_get_default_pad+0x64>
     732:	2b03      	cmp	r3, #3
     734:	d006      	beq.n	744 <_sercom_get_default_pad+0x68>
     736:	e070      	b.n	81a <_sercom_get_default_pad+0x13e>
     738:	4b40      	ldr	r3, [pc, #256]	; (83c <_sercom_get_default_pad+0x160>)
     73a:	e06f      	b.n	81c <_sercom_get_default_pad+0x140>
     73c:	4b40      	ldr	r3, [pc, #256]	; (840 <_sercom_get_default_pad+0x164>)
     73e:	e06d      	b.n	81c <_sercom_get_default_pad+0x140>
     740:	4b40      	ldr	r3, [pc, #256]	; (844 <_sercom_get_default_pad+0x168>)
     742:	e06b      	b.n	81c <_sercom_get_default_pad+0x140>
     744:	4b40      	ldr	r3, [pc, #256]	; (848 <_sercom_get_default_pad+0x16c>)
     746:	e069      	b.n	81c <_sercom_get_default_pad+0x140>
     748:	1cfb      	adds	r3, r7, #3
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	2b01      	cmp	r3, #1
     74e:	d00a      	beq.n	766 <_sercom_get_default_pad+0x8a>
     750:	dc02      	bgt.n	758 <_sercom_get_default_pad+0x7c>
     752:	2b00      	cmp	r3, #0
     754:	d005      	beq.n	762 <_sercom_get_default_pad+0x86>
     756:	e060      	b.n	81a <_sercom_get_default_pad+0x13e>
     758:	2b02      	cmp	r3, #2
     75a:	d006      	beq.n	76a <_sercom_get_default_pad+0x8e>
     75c:	2b03      	cmp	r3, #3
     75e:	d006      	beq.n	76e <_sercom_get_default_pad+0x92>
     760:	e05b      	b.n	81a <_sercom_get_default_pad+0x13e>
     762:	2303      	movs	r3, #3
     764:	e05a      	b.n	81c <_sercom_get_default_pad+0x140>
     766:	4b39      	ldr	r3, [pc, #228]	; (84c <_sercom_get_default_pad+0x170>)
     768:	e058      	b.n	81c <_sercom_get_default_pad+0x140>
     76a:	4b39      	ldr	r3, [pc, #228]	; (850 <_sercom_get_default_pad+0x174>)
     76c:	e056      	b.n	81c <_sercom_get_default_pad+0x140>
     76e:	4b39      	ldr	r3, [pc, #228]	; (854 <_sercom_get_default_pad+0x178>)
     770:	e054      	b.n	81c <_sercom_get_default_pad+0x140>
     772:	1cfb      	adds	r3, r7, #3
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b01      	cmp	r3, #1
     778:	d00a      	beq.n	790 <_sercom_get_default_pad+0xb4>
     77a:	dc02      	bgt.n	782 <_sercom_get_default_pad+0xa6>
     77c:	2b00      	cmp	r3, #0
     77e:	d005      	beq.n	78c <_sercom_get_default_pad+0xb0>
     780:	e04b      	b.n	81a <_sercom_get_default_pad+0x13e>
     782:	2b02      	cmp	r3, #2
     784:	d006      	beq.n	794 <_sercom_get_default_pad+0xb8>
     786:	2b03      	cmp	r3, #3
     788:	d006      	beq.n	798 <_sercom_get_default_pad+0xbc>
     78a:	e046      	b.n	81a <_sercom_get_default_pad+0x13e>
     78c:	4b32      	ldr	r3, [pc, #200]	; (858 <_sercom_get_default_pad+0x17c>)
     78e:	e045      	b.n	81c <_sercom_get_default_pad+0x140>
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <_sercom_get_default_pad+0x180>)
     792:	e043      	b.n	81c <_sercom_get_default_pad+0x140>
     794:	4b32      	ldr	r3, [pc, #200]	; (860 <_sercom_get_default_pad+0x184>)
     796:	e041      	b.n	81c <_sercom_get_default_pad+0x140>
     798:	4b32      	ldr	r3, [pc, #200]	; (864 <_sercom_get_default_pad+0x188>)
     79a:	e03f      	b.n	81c <_sercom_get_default_pad+0x140>
     79c:	1cfb      	adds	r3, r7, #3
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	2b01      	cmp	r3, #1
     7a2:	d00a      	beq.n	7ba <_sercom_get_default_pad+0xde>
     7a4:	dc02      	bgt.n	7ac <_sercom_get_default_pad+0xd0>
     7a6:	2b00      	cmp	r3, #0
     7a8:	d005      	beq.n	7b6 <_sercom_get_default_pad+0xda>
     7aa:	e036      	b.n	81a <_sercom_get_default_pad+0x13e>
     7ac:	2b02      	cmp	r3, #2
     7ae:	d006      	beq.n	7be <_sercom_get_default_pad+0xe2>
     7b0:	2b03      	cmp	r3, #3
     7b2:	d006      	beq.n	7c2 <_sercom_get_default_pad+0xe6>
     7b4:	e031      	b.n	81a <_sercom_get_default_pad+0x13e>
     7b6:	4b2c      	ldr	r3, [pc, #176]	; (868 <_sercom_get_default_pad+0x18c>)
     7b8:	e030      	b.n	81c <_sercom_get_default_pad+0x140>
     7ba:	4b2c      	ldr	r3, [pc, #176]	; (86c <_sercom_get_default_pad+0x190>)
     7bc:	e02e      	b.n	81c <_sercom_get_default_pad+0x140>
     7be:	4b2c      	ldr	r3, [pc, #176]	; (870 <_sercom_get_default_pad+0x194>)
     7c0:	e02c      	b.n	81c <_sercom_get_default_pad+0x140>
     7c2:	4b2c      	ldr	r3, [pc, #176]	; (874 <_sercom_get_default_pad+0x198>)
     7c4:	e02a      	b.n	81c <_sercom_get_default_pad+0x140>
     7c6:	1cfb      	adds	r3, r7, #3
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	2b01      	cmp	r3, #1
     7cc:	d00a      	beq.n	7e4 <_sercom_get_default_pad+0x108>
     7ce:	dc02      	bgt.n	7d6 <_sercom_get_default_pad+0xfa>
     7d0:	2b00      	cmp	r3, #0
     7d2:	d005      	beq.n	7e0 <_sercom_get_default_pad+0x104>
     7d4:	e021      	b.n	81a <_sercom_get_default_pad+0x13e>
     7d6:	2b02      	cmp	r3, #2
     7d8:	d006      	beq.n	7e8 <_sercom_get_default_pad+0x10c>
     7da:	2b03      	cmp	r3, #3
     7dc:	d006      	beq.n	7ec <_sercom_get_default_pad+0x110>
     7de:	e01c      	b.n	81a <_sercom_get_default_pad+0x13e>
     7e0:	4b25      	ldr	r3, [pc, #148]	; (878 <_sercom_get_default_pad+0x19c>)
     7e2:	e01b      	b.n	81c <_sercom_get_default_pad+0x140>
     7e4:	4b25      	ldr	r3, [pc, #148]	; (87c <_sercom_get_default_pad+0x1a0>)
     7e6:	e019      	b.n	81c <_sercom_get_default_pad+0x140>
     7e8:	4b25      	ldr	r3, [pc, #148]	; (880 <_sercom_get_default_pad+0x1a4>)
     7ea:	e017      	b.n	81c <_sercom_get_default_pad+0x140>
     7ec:	4b25      	ldr	r3, [pc, #148]	; (884 <_sercom_get_default_pad+0x1a8>)
     7ee:	e015      	b.n	81c <_sercom_get_default_pad+0x140>
     7f0:	1cfb      	adds	r3, r7, #3
     7f2:	781b      	ldrb	r3, [r3, #0]
     7f4:	2b01      	cmp	r3, #1
     7f6:	d00a      	beq.n	80e <_sercom_get_default_pad+0x132>
     7f8:	dc02      	bgt.n	800 <_sercom_get_default_pad+0x124>
     7fa:	2b00      	cmp	r3, #0
     7fc:	d005      	beq.n	80a <_sercom_get_default_pad+0x12e>
     7fe:	e00c      	b.n	81a <_sercom_get_default_pad+0x13e>
     800:	2b02      	cmp	r3, #2
     802:	d006      	beq.n	812 <_sercom_get_default_pad+0x136>
     804:	2b03      	cmp	r3, #3
     806:	d006      	beq.n	816 <_sercom_get_default_pad+0x13a>
     808:	e007      	b.n	81a <_sercom_get_default_pad+0x13e>
     80a:	4b1f      	ldr	r3, [pc, #124]	; (888 <_sercom_get_default_pad+0x1ac>)
     80c:	e006      	b.n	81c <_sercom_get_default_pad+0x140>
     80e:	4b1f      	ldr	r3, [pc, #124]	; (88c <_sercom_get_default_pad+0x1b0>)
     810:	e004      	b.n	81c <_sercom_get_default_pad+0x140>
     812:	4b1f      	ldr	r3, [pc, #124]	; (890 <_sercom_get_default_pad+0x1b4>)
     814:	e002      	b.n	81c <_sercom_get_default_pad+0x140>
     816:	4b1f      	ldr	r3, [pc, #124]	; (894 <_sercom_get_default_pad+0x1b8>)
     818:	e000      	b.n	81c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     81a:	2300      	movs	r3, #0
}
     81c:	0018      	movs	r0, r3
     81e:	46bd      	mov	sp, r7
     820:	b002      	add	sp, #8
     822:	bd80      	pop	{r7, pc}
     824:	42001000 	.word	0x42001000
     828:	42000800 	.word	0x42000800
     82c:	42000c00 	.word	0x42000c00
     830:	42001800 	.word	0x42001800
     834:	42001c00 	.word	0x42001c00
     838:	42001400 	.word	0x42001400
     83c:	00040003 	.word	0x00040003
     840:	00050003 	.word	0x00050003
     844:	00060003 	.word	0x00060003
     848:	00070003 	.word	0x00070003
     84c:	00010003 	.word	0x00010003
     850:	001e0003 	.word	0x001e0003
     854:	001f0003 	.word	0x001f0003
     858:	00080003 	.word	0x00080003
     85c:	00090003 	.word	0x00090003
     860:	000a0003 	.word	0x000a0003
     864:	000b0003 	.word	0x000b0003
     868:	00100003 	.word	0x00100003
     86c:	00110003 	.word	0x00110003
     870:	00120003 	.word	0x00120003
     874:	00130003 	.word	0x00130003
     878:	000c0003 	.word	0x000c0003
     87c:	000d0003 	.word	0x000d0003
     880:	000e0003 	.word	0x000e0003
     884:	000f0003 	.word	0x000f0003
     888:	00160003 	.word	0x00160003
     88c:	00170003 	.word	0x00170003
     890:	00180003 	.word	0x00180003
     894:	00190003 	.word	0x00190003

00000898 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     898:	b590      	push	{r4, r7, lr}
     89a:	b08b      	sub	sp, #44	; 0x2c
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8a0:	230c      	movs	r3, #12
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	4a0f      	ldr	r2, [pc, #60]	; (8e4 <_sercom_get_sercom_inst_index+0x4c>)
     8a6:	ca13      	ldmia	r2!, {r0, r1, r4}
     8a8:	c313      	stmia	r3!, {r0, r1, r4}
     8aa:	ca13      	ldmia	r2!, {r0, r1, r4}
     8ac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ae:	2300      	movs	r3, #0
     8b0:	627b      	str	r3, [r7, #36]	; 0x24
     8b2:	e00e      	b.n	8d2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8b4:	230c      	movs	r3, #12
     8b6:	18fb      	adds	r3, r7, r3
     8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     8ba:	0092      	lsls	r2, r2, #2
     8bc:	58d3      	ldr	r3, [r2, r3]
     8be:	1e1a      	subs	r2, r3, #0
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	429a      	cmp	r2, r3
     8c4:	d102      	bne.n	8cc <_sercom_get_sercom_inst_index+0x34>
			return i;
     8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8c8:	b2db      	uxtb	r3, r3
     8ca:	e006      	b.n	8da <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8ce:	3301      	adds	r3, #1
     8d0:	627b      	str	r3, [r7, #36]	; 0x24
     8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8d4:	2b05      	cmp	r3, #5
     8d6:	d9ed      	bls.n	8b4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8d8:	2300      	movs	r3, #0
}
     8da:	0018      	movs	r0, r3
     8dc:	46bd      	mov	sp, r7
     8de:	b00b      	add	sp, #44	; 0x2c
     8e0:	bd90      	pop	{r4, r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00009128 	.word	0x00009128

000008e8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	2280      	movs	r2, #128	; 0x80
     8f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	2200      	movs	r2, #0
     8fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2201      	movs	r2, #1
     900:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     902:	687b      	ldr	r3, [r7, #4]
     904:	2200      	movs	r2, #0
     906:	70da      	strb	r2, [r3, #3]
}
     908:	46c0      	nop			; (mov r8, r8)
     90a:	46bd      	mov	sp, r7
     90c:	b002      	add	sp, #8
     90e:	bd80      	pop	{r7, pc}

00000910 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     910:	b580      	push	{r7, lr}
     912:	b084      	sub	sp, #16
     914:	af00      	add	r7, sp, #0
     916:	0002      	movs	r2, r0
     918:	1dfb      	adds	r3, r7, #7
     91a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     91c:	230f      	movs	r3, #15
     91e:	18fb      	adds	r3, r7, r3
     920:	1dfa      	adds	r2, r7, #7
     922:	7812      	ldrb	r2, [r2, #0]
     924:	09d2      	lsrs	r2, r2, #7
     926:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     928:	230e      	movs	r3, #14
     92a:	18fb      	adds	r3, r7, r3
     92c:	1dfa      	adds	r2, r7, #7
     92e:	7812      	ldrb	r2, [r2, #0]
     930:	0952      	lsrs	r2, r2, #5
     932:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     936:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     938:	230f      	movs	r3, #15
     93a:	18fb      	adds	r3, r7, r3
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d10f      	bne.n	962 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     942:	230f      	movs	r3, #15
     944:	18fb      	adds	r3, r7, r3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	009b      	lsls	r3, r3, #2
     94a:	2210      	movs	r2, #16
     94c:	4694      	mov	ip, r2
     94e:	44bc      	add	ip, r7
     950:	4463      	add	r3, ip
     952:	3b08      	subs	r3, #8
     954:	681a      	ldr	r2, [r3, #0]
     956:	230e      	movs	r3, #14
     958:	18fb      	adds	r3, r7, r3
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	01db      	lsls	r3, r3, #7
     95e:	18d3      	adds	r3, r2, r3
     960:	e000      	b.n	964 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     962:	2300      	movs	r3, #0
	}
}
     964:	0018      	movs	r0, r3
     966:	46bd      	mov	sp, r7
     968:	b004      	add	sp, #16
     96a:	bd80      	pop	{r7, pc}
     96c:	41004400 	.word	0x41004400

00000970 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     970:	b580      	push	{r7, lr}
     972:	b086      	sub	sp, #24
     974:	af00      	add	r7, sp, #0
     976:	0002      	movs	r2, r0
     978:	1dfb      	adds	r3, r7, #7
     97a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     97c:	1dfb      	adds	r3, r7, #7
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	0018      	movs	r0, r3
     982:	4b19      	ldr	r3, [pc, #100]	; (9e8 <system_pinmux_pin_get_mux_position+0x78>)
     984:	4798      	blx	r3
     986:	0003      	movs	r3, r0
     988:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     98a:	1dfb      	adds	r3, r7, #7
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	221f      	movs	r2, #31
     990:	4013      	ands	r3, r2
     992:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     994:	697a      	ldr	r2, [r7, #20]
     996:	2140      	movs	r1, #64	; 0x40
     998:	693b      	ldr	r3, [r7, #16]
     99a:	18d3      	adds	r3, r2, r3
     99c:	185b      	adds	r3, r3, r1
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	b2db      	uxtb	r3, r3
     9a2:	001a      	movs	r2, r3
     9a4:	2301      	movs	r3, #1
     9a6:	4013      	ands	r3, r2
     9a8:	d101      	bne.n	9ae <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     9aa:	2380      	movs	r3, #128	; 0x80
     9ac:	e018      	b.n	9e0 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9ae:	693b      	ldr	r3, [r7, #16]
     9b0:	085b      	lsrs	r3, r3, #1
     9b2:	697a      	ldr	r2, [r7, #20]
     9b4:	2130      	movs	r1, #48	; 0x30
     9b6:	18d3      	adds	r3, r2, r3
     9b8:	185b      	adds	r3, r3, r1
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	b2db      	uxtb	r3, r3
     9be:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     9c0:	693b      	ldr	r3, [r7, #16]
     9c2:	2201      	movs	r2, #1
     9c4:	4013      	ands	r3, r2
     9c6:	d006      	beq.n	9d6 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	091b      	lsrs	r3, r3, #4
     9cc:	b2db      	uxtb	r3, r3
     9ce:	220f      	movs	r2, #15
     9d0:	4013      	ands	r3, r2
     9d2:	b2db      	uxtb	r3, r3
     9d4:	e004      	b.n	9e0 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     9d6:	68fb      	ldr	r3, [r7, #12]
     9d8:	b2db      	uxtb	r3, r3
     9da:	220f      	movs	r2, #15
     9dc:	4013      	ands	r3, r2
     9de:	b2db      	uxtb	r3, r3
	}
}
     9e0:	0018      	movs	r0, r3
     9e2:	46bd      	mov	sp, r7
     9e4:	b006      	add	sp, #24
     9e6:	bd80      	pop	{r7, pc}
     9e8:	00000911 	.word	0x00000911

000009ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	0018      	movs	r0, r3
     9fe:	4b03      	ldr	r3, [pc, #12]	; (a0c <port_get_group_from_gpio_pin+0x20>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
}
     a04:	0018      	movs	r0, r3
     a06:	46bd      	mov	sp, r7
     a08:	b002      	add	sp, #8
     a0a:	bd80      	pop	{r7, pc}
     a0c:	00000911 	.word	0x00000911

00000a10 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     a10:	b580      	push	{r7, lr}
     a12:	b084      	sub	sp, #16
     a14:	af00      	add	r7, sp, #0
     a16:	0002      	movs	r2, r0
     a18:	1dfb      	adds	r3, r7, #7
     a1a:	701a      	strb	r2, [r3, #0]
     a1c:	1dbb      	adds	r3, r7, #6
     a1e:	1c0a      	adds	r2, r1, #0
     a20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     a22:	1dfb      	adds	r3, r7, #7
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	0018      	movs	r0, r3
     a28:	4b0d      	ldr	r3, [pc, #52]	; (a60 <port_pin_set_output_level+0x50>)
     a2a:	4798      	blx	r3
     a2c:	0003      	movs	r3, r0
     a2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a30:	1dfb      	adds	r3, r7, #7
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	221f      	movs	r2, #31
     a36:	4013      	ands	r3, r2
     a38:	2201      	movs	r2, #1
     a3a:	409a      	lsls	r2, r3
     a3c:	0013      	movs	r3, r2
     a3e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a40:	1dbb      	adds	r3, r7, #6
     a42:	781b      	ldrb	r3, [r3, #0]
     a44:	2b00      	cmp	r3, #0
     a46:	d003      	beq.n	a50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	68ba      	ldr	r2, [r7, #8]
     a4c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a4e:	e002      	b.n	a56 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a50:	68fb      	ldr	r3, [r7, #12]
     a52:	68ba      	ldr	r2, [r7, #8]
     a54:	615a      	str	r2, [r3, #20]
	}
}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	46bd      	mov	sp, r7
     a5a:	b004      	add	sp, #16
     a5c:	bd80      	pop	{r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	000009ed 	.word	0x000009ed

00000a64 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a64:	b580      	push	{r7, lr}
     a66:	b082      	sub	sp, #8
     a68:	af00      	add	r7, sp, #0
     a6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	2200      	movs	r2, #0
     a70:	701a      	strb	r2, [r3, #0]
}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	46bd      	mov	sp, r7
     a76:	b002      	add	sp, #8
     a78:	bd80      	pop	{r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)

00000a7c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b082      	sub	sp, #8
     a80:	af00      	add	r7, sp, #0
     a82:	0002      	movs	r2, r0
     a84:	6039      	str	r1, [r7, #0]
     a86:	1dfb      	adds	r3, r7, #7
     a88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     a8a:	1dfb      	adds	r3, r7, #7
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b01      	cmp	r3, #1
     a90:	d00a      	beq.n	aa8 <system_apb_clock_set_mask+0x2c>
     a92:	2b02      	cmp	r3, #2
     a94:	d00f      	beq.n	ab6 <system_apb_clock_set_mask+0x3a>
     a96:	2b00      	cmp	r3, #0
     a98:	d114      	bne.n	ac4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <system_apb_clock_set_mask+0x58>)
     a9c:	4a0d      	ldr	r2, [pc, #52]	; (ad4 <system_apb_clock_set_mask+0x58>)
     a9e:	6991      	ldr	r1, [r2, #24]
     aa0:	683a      	ldr	r2, [r7, #0]
     aa2:	430a      	orrs	r2, r1
     aa4:	619a      	str	r2, [r3, #24]
			break;
     aa6:	e00f      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     aa8:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aaa:	4a0a      	ldr	r2, [pc, #40]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aac:	69d1      	ldr	r1, [r2, #28]
     aae:	683a      	ldr	r2, [r7, #0]
     ab0:	430a      	orrs	r2, r1
     ab2:	61da      	str	r2, [r3, #28]
			break;
     ab4:	e008      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ab6:	4b07      	ldr	r3, [pc, #28]	; (ad4 <system_apb_clock_set_mask+0x58>)
     ab8:	4a06      	ldr	r2, [pc, #24]	; (ad4 <system_apb_clock_set_mask+0x58>)
     aba:	6a11      	ldr	r1, [r2, #32]
     abc:	683a      	ldr	r2, [r7, #0]
     abe:	430a      	orrs	r2, r1
     ac0:	621a      	str	r2, [r3, #32]
			break;
     ac2:	e001      	b.n	ac8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ac4:	2317      	movs	r3, #23
     ac6:	e000      	b.n	aca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ac8:	2300      	movs	r3, #0
}
     aca:	0018      	movs	r0, r3
     acc:	46bd      	mov	sp, r7
     ace:	b002      	add	sp, #8
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	40000400 	.word	0x40000400

00000ad8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <system_is_debugger_present+0x1c>)
     ade:	789b      	ldrb	r3, [r3, #2]
     ae0:	b2db      	uxtb	r3, r3
     ae2:	001a      	movs	r2, r3
     ae4:	2302      	movs	r3, #2
     ae6:	4013      	ands	r3, r2
     ae8:	1e5a      	subs	r2, r3, #1
     aea:	4193      	sbcs	r3, r2
     aec:	b2db      	uxtb	r3, r3
}
     aee:	0018      	movs	r0, r3
     af0:	46bd      	mov	sp, r7
     af2:	bd80      	pop	{r7, pc}
     af4:	41002000 	.word	0x41002000

00000af8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     af8:	b580      	push	{r7, lr}
     afa:	b084      	sub	sp, #16
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	7e1b      	ldrb	r3, [r3, #24]
     b0a:	b2db      	uxtb	r3, r3
     b0c:	001a      	movs	r2, r3
     b0e:	2301      	movs	r3, #1
     b10:	4013      	ands	r3, r2
     b12:	1e5a      	subs	r2, r3, #1
     b14:	4193      	sbcs	r3, r2
     b16:	b2db      	uxtb	r3, r3
}
     b18:	0018      	movs	r0, r3
     b1a:	46bd      	mov	sp, r7
     b1c:	b004      	add	sp, #16
     b1e:	bd80      	pop	{r7, pc}

00000b20 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     b20:	b580      	push	{r7, lr}
     b22:	b084      	sub	sp, #16
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	7e1b      	ldrb	r3, [r3, #24]
     b32:	b2db      	uxtb	r3, r3
     b34:	001a      	movs	r2, r3
     b36:	2304      	movs	r3, #4
     b38:	4013      	ands	r3, r2
     b3a:	1e5a      	subs	r2, r3, #1
     b3c:	4193      	sbcs	r3, r2
     b3e:	b2db      	uxtb	r3, r3
}
     b40:	0018      	movs	r0, r3
     b42:	46bd      	mov	sp, r7
     b44:	b004      	add	sp, #16
     b46:	bd80      	pop	{r7, pc}

00000b48 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b084      	sub	sp, #16
     b4c:	af00      	add	r7, sp, #0
     b4e:	6078      	str	r0, [r7, #4]
     b50:	000a      	movs	r2, r1
     b52:	1cbb      	adds	r3, r7, #2
     b54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	0018      	movs	r0, r3
     b60:	4b0a      	ldr	r3, [pc, #40]	; (b8c <spi_write+0x44>)
     b62:	4798      	blx	r3
     b64:	0003      	movs	r3, r0
     b66:	001a      	movs	r2, r3
     b68:	2301      	movs	r3, #1
     b6a:	4053      	eors	r3, r2
     b6c:	b2db      	uxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	d001      	beq.n	b76 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     b72:	2305      	movs	r3, #5
     b74:	e006      	b.n	b84 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b76:	1cbb      	adds	r3, r7, #2
     b78:	881b      	ldrh	r3, [r3, #0]
     b7a:	05db      	lsls	r3, r3, #23
     b7c:	0dda      	lsrs	r2, r3, #23
     b7e:	68fb      	ldr	r3, [r7, #12]
     b80:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     b82:	2300      	movs	r3, #0
}
     b84:	0018      	movs	r0, r3
     b86:	46bd      	mov	sp, r7
     b88:	b004      	add	sp, #16
     b8a:	bd80      	pop	{r7, pc}
     b8c:	00000af9 	.word	0x00000af9

00000b90 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     b90:	b580      	push	{r7, lr}
     b92:	b084      	sub	sp, #16
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
     b98:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	0018      	movs	r0, r3
     ba4:	4b1d      	ldr	r3, [pc, #116]	; (c1c <spi_read+0x8c>)
     ba6:	4798      	blx	r3
     ba8:	0003      	movs	r3, r0
     baa:	001a      	movs	r2, r3
     bac:	2301      	movs	r3, #1
     bae:	4053      	eors	r3, r2
     bb0:	b2db      	uxtb	r3, r3
     bb2:	2b00      	cmp	r3, #0
     bb4:	d001      	beq.n	bba <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     bb6:	2310      	movs	r3, #16
     bb8:	e02c      	b.n	c14 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     bba:	230f      	movs	r3, #15
     bbc:	18fb      	adds	r3, r7, r3
     bbe:	2200      	movs	r2, #0
     bc0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	8b5b      	ldrh	r3, [r3, #26]
     bc6:	b29b      	uxth	r3, r3
     bc8:	001a      	movs	r2, r3
     bca:	2304      	movs	r3, #4
     bcc:	4013      	ands	r3, r2
     bce:	d00b      	beq.n	be8 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     bd0:	230f      	movs	r3, #15
     bd2:	18fb      	adds	r3, r7, r3
     bd4:	221e      	movs	r2, #30
     bd6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     bd8:	68bb      	ldr	r3, [r7, #8]
     bda:	8b5b      	ldrh	r3, [r3, #26]
     bdc:	b29b      	uxth	r3, r3
     bde:	2204      	movs	r2, #4
     be0:	4313      	orrs	r3, r2
     be2:	b29a      	uxth	r2, r3
     be4:	68bb      	ldr	r3, [r7, #8]
     be6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	799b      	ldrb	r3, [r3, #6]
     bec:	2b01      	cmp	r3, #1
     bee:	d108      	bne.n	c02 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     bf0:	68bb      	ldr	r3, [r7, #8]
     bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bf4:	b29b      	uxth	r3, r3
     bf6:	05db      	lsls	r3, r3, #23
     bf8:	0ddb      	lsrs	r3, r3, #23
     bfa:	b29a      	uxth	r2, r3
     bfc:	683b      	ldr	r3, [r7, #0]
     bfe:	801a      	strh	r2, [r3, #0]
     c00:	e005      	b.n	c0e <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c02:	68bb      	ldr	r3, [r7, #8]
     c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c06:	b2db      	uxtb	r3, r3
     c08:	b29a      	uxth	r2, r3
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     c0e:	230f      	movs	r3, #15
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b004      	add	sp, #16
     c1a:	bd80      	pop	{r7, pc}
     c1c:	00000b21 	.word	0x00000b21

00000c20 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     c20:	b590      	push	{r4, r7, lr}
     c22:	b093      	sub	sp, #76	; 0x4c
     c24:	af00      	add	r7, sp, #0
     c26:	6078      	str	r0, [r7, #4]
     c28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     c36:	231c      	movs	r3, #28
     c38:	18fb      	adds	r3, r7, r3
     c3a:	0018      	movs	r0, r3
     c3c:	4b85      	ldr	r3, [pc, #532]	; (e54 <_spi_set_config+0x234>)
     c3e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c40:	231c      	movs	r3, #28
     c42:	18fb      	adds	r3, r7, r3
     c44:	2200      	movs	r2, #0
     c46:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     c48:	683b      	ldr	r3, [r7, #0]
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d103      	bne.n	c58 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c50:	231c      	movs	r3, #28
     c52:	18fb      	adds	r3, r7, r3
     c54:	2200      	movs	r2, #0
     c56:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     c58:	683b      	ldr	r3, [r7, #0]
     c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c5c:	230c      	movs	r3, #12
     c5e:	18fb      	adds	r3, r7, r3
     c60:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     c62:	683b      	ldr	r3, [r7, #0]
     c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c66:	230c      	movs	r3, #12
     c68:	18fb      	adds	r3, r7, r3
     c6a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c70:	230c      	movs	r3, #12
     c72:	18fb      	adds	r3, r7, r3
     c74:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c76:	683b      	ldr	r3, [r7, #0]
     c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c7a:	230c      	movs	r3, #12
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c80:	2347      	movs	r3, #71	; 0x47
     c82:	18fb      	adds	r3, r7, r3
     c84:	2200      	movs	r2, #0
     c86:	701a      	strb	r2, [r3, #0]
     c88:	e02c      	b.n	ce4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c8a:	2347      	movs	r3, #71	; 0x47
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	781a      	ldrb	r2, [r3, #0]
     c90:	230c      	movs	r3, #12
     c92:	18fb      	adds	r3, r7, r3
     c94:	0092      	lsls	r2, r2, #2
     c96:	58d3      	ldr	r3, [r2, r3]
     c98:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c9c:	2b00      	cmp	r3, #0
     c9e:	d109      	bne.n	cb4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ca0:	2347      	movs	r3, #71	; 0x47
     ca2:	18fb      	adds	r3, r7, r3
     ca4:	781a      	ldrb	r2, [r3, #0]
     ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ca8:	0011      	movs	r1, r2
     caa:	0018      	movs	r0, r3
     cac:	4b6a      	ldr	r3, [pc, #424]	; (e58 <_spi_set_config+0x238>)
     cae:	4798      	blx	r3
     cb0:	0003      	movs	r3, r0
     cb2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cb6:	3301      	adds	r3, #1
     cb8:	d00d      	beq.n	cd6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cbc:	b2da      	uxtb	r2, r3
     cbe:	231c      	movs	r3, #28
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cc6:	0c1b      	lsrs	r3, r3, #16
     cc8:	b2db      	uxtb	r3, r3
     cca:	221c      	movs	r2, #28
     ccc:	18ba      	adds	r2, r7, r2
     cce:	0011      	movs	r1, r2
     cd0:	0018      	movs	r0, r3
     cd2:	4b62      	ldr	r3, [pc, #392]	; (e5c <_spi_set_config+0x23c>)
     cd4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cd6:	2347      	movs	r3, #71	; 0x47
     cd8:	18fb      	adds	r3, r7, r3
     cda:	781a      	ldrb	r2, [r3, #0]
     cdc:	2347      	movs	r3, #71	; 0x47
     cde:	18fb      	adds	r3, r7, r3
     ce0:	3201      	adds	r2, #1
     ce2:	701a      	strb	r2, [r3, #0]
     ce4:	2347      	movs	r3, #71	; 0x47
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b03      	cmp	r3, #3
     cec:	d9cd      	bls.n	c8a <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	781a      	ldrb	r2, [r3, #0]
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	7c1a      	ldrb	r2, [r3, #16]
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     cfe:	683b      	ldr	r3, [r7, #0]
     d00:	7c9a      	ldrb	r2, [r3, #18]
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     d06:	683b      	ldr	r3, [r7, #0]
     d08:	7d1a      	ldrb	r2, [r3, #20]
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     d0e:	230a      	movs	r3, #10
     d10:	18fb      	adds	r3, r7, r3
     d12:	2200      	movs	r2, #0
     d14:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     d16:	2300      	movs	r3, #0
     d18:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     d1a:	2300      	movs	r3, #0
     d1c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     d1e:	683b      	ldr	r3, [r7, #0]
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	2b01      	cmp	r3, #1
     d24:	d129      	bne.n	d7a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	0018      	movs	r0, r3
     d2c:	4b4c      	ldr	r3, [pc, #304]	; (e60 <_spi_set_config+0x240>)
     d2e:	4798      	blx	r3
     d30:	0003      	movs	r3, r0
     d32:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d36:	3314      	adds	r3, #20
     d38:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d3c:	b2db      	uxtb	r3, r3
     d3e:	0018      	movs	r0, r3
     d40:	4b48      	ldr	r3, [pc, #288]	; (e64 <_spi_set_config+0x244>)
     d42:	4798      	blx	r3
     d44:	0003      	movs	r3, r0
     d46:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     d48:	683b      	ldr	r3, [r7, #0]
     d4a:	699b      	ldr	r3, [r3, #24]
     d4c:	2223      	movs	r2, #35	; 0x23
     d4e:	18bc      	adds	r4, r7, r2
     d50:	220a      	movs	r2, #10
     d52:	18ba      	adds	r2, r7, r2
     d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d56:	0018      	movs	r0, r3
     d58:	4b43      	ldr	r3, [pc, #268]	; (e68 <_spi_set_config+0x248>)
     d5a:	4798      	blx	r3
     d5c:	0003      	movs	r3, r0
     d5e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     d60:	2323      	movs	r3, #35	; 0x23
     d62:	18fb      	adds	r3, r7, r3
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	2b00      	cmp	r3, #0
     d68:	d001      	beq.n	d6e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     d6a:	2317      	movs	r3, #23
     d6c:	e06d      	b.n	e4a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     d6e:	230a      	movs	r3, #10
     d70:	18fb      	adds	r3, r7, r3
     d72:	881b      	ldrh	r3, [r3, #0]
     d74:	b2da      	uxtb	r2, r3
     d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d78:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d7a:	683b      	ldr	r3, [r7, #0]
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b00      	cmp	r3, #0
     d80:	d11a      	bne.n	db8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     d82:	683b      	ldr	r3, [r7, #0]
     d84:	699b      	ldr	r3, [r3, #24]
     d86:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     d88:	683b      	ldr	r3, [r7, #0]
     d8a:	8b9b      	ldrh	r3, [r3, #28]
     d8c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	7f92      	ldrb	r2, [r2, #30]
     d96:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     d98:	683a      	ldr	r2, [r7, #0]
     d9a:	7fd2      	ldrb	r2, [r2, #31]
     d9c:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d9e:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     da0:	431a      	orrs	r2, r3
     da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     da4:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     da6:	683b      	ldr	r3, [r7, #0]
     da8:	2220      	movs	r2, #32
     daa:	5c9b      	ldrb	r3, [r3, r2]
     dac:	2b00      	cmp	r3, #0
     dae:	d003      	beq.n	db8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     db2:	2240      	movs	r2, #64	; 0x40
     db4:	4313      	orrs	r3, r2
     db6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     db8:	683b      	ldr	r3, [r7, #0]
     dba:	685b      	ldr	r3, [r3, #4]
     dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dbe:	4313      	orrs	r3, r2
     dc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     dc2:	683b      	ldr	r3, [r7, #0]
     dc4:	689b      	ldr	r3, [r3, #8]
     dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dc8:	4313      	orrs	r3, r2
     dca:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     dcc:	683b      	ldr	r3, [r7, #0]
     dce:	68db      	ldr	r3, [r3, #12]
     dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dd2:	4313      	orrs	r3, r2
     dd4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     dd6:	683b      	ldr	r3, [r7, #0]
     dd8:	7c1b      	ldrb	r3, [r3, #16]
     dda:	001a      	movs	r2, r3
     ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dde:	4313      	orrs	r3, r2
     de0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     de2:	683b      	ldr	r3, [r7, #0]
     de4:	7c5b      	ldrb	r3, [r3, #17]
     de6:	2b00      	cmp	r3, #0
     de8:	d103      	bne.n	df2 <_spi_set_config+0x1d2>
     dea:	4b20      	ldr	r3, [pc, #128]	; (e6c <_spi_set_config+0x24c>)
     dec:	4798      	blx	r3
     dee:	1e03      	subs	r3, r0, #0
     df0:	d003      	beq.n	dfa <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     df4:	2280      	movs	r2, #128	; 0x80
     df6:	4313      	orrs	r3, r2
     df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     dfa:	683b      	ldr	r3, [r7, #0]
     dfc:	7c9b      	ldrb	r3, [r3, #18]
     dfe:	2b00      	cmp	r3, #0
     e00:	d004      	beq.n	e0c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e04:	2280      	movs	r2, #128	; 0x80
     e06:	0292      	lsls	r2, r2, #10
     e08:	4313      	orrs	r3, r2
     e0a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     e0c:	683b      	ldr	r3, [r7, #0]
     e0e:	7cdb      	ldrb	r3, [r3, #19]
     e10:	2b00      	cmp	r3, #0
     e12:	d004      	beq.n	e1e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e16:	2280      	movs	r2, #128	; 0x80
     e18:	0092      	lsls	r2, r2, #2
     e1a:	4313      	orrs	r3, r2
     e1c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     e1e:	683b      	ldr	r3, [r7, #0]
     e20:	7d1b      	ldrb	r3, [r3, #20]
     e22:	2b00      	cmp	r3, #0
     e24:	d004      	beq.n	e30 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e28:	2280      	movs	r2, #128	; 0x80
     e2a:	0192      	lsls	r2, r2, #6
     e2c:	4313      	orrs	r3, r2
     e2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e32:	681a      	ldr	r2, [r3, #0]
     e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e36:	431a      	orrs	r2, r3
     e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3e:	685a      	ldr	r2, [r3, #4]
     e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e42:	431a      	orrs	r2, r3
     e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e46:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     e48:	2300      	movs	r3, #0
}
     e4a:	0018      	movs	r0, r3
     e4c:	46bd      	mov	sp, r7
     e4e:	b013      	add	sp, #76	; 0x4c
     e50:	bd90      	pop	{r4, r7, pc}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	000008e9 	.word	0x000008e9
     e58:	000006dd 	.word	0x000006dd
     e5c:	000053bd 	.word	0x000053bd
     e60:	00000899 	.word	0x00000899
     e64:	000051f5 	.word	0x000051f5
     e68:	000005d5 	.word	0x000005d5
     e6c:	00000ad9 	.word	0x00000ad9

00000e70 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     e70:	b590      	push	{r4, r7, lr}
     e72:	b091      	sub	sp, #68	; 0x44
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     e86:	683b      	ldr	r3, [r7, #0]
     e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e8a:	230c      	movs	r3, #12
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     e90:	683b      	ldr	r3, [r7, #0]
     e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e94:	230c      	movs	r3, #12
     e96:	18fb      	adds	r3, r7, r3
     e98:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     e9a:	683b      	ldr	r3, [r7, #0]
     e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e9e:	230c      	movs	r3, #12
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     ea4:	683b      	ldr	r3, [r7, #0]
     ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     ea8:	230c      	movs	r3, #12
     eaa:	18fb      	adds	r3, r7, r3
     eac:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     eae:	233f      	movs	r3, #63	; 0x3f
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	2200      	movs	r2, #0
     eb4:	701a      	strb	r2, [r3, #0]
     eb6:	e030      	b.n	f1a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eb8:	233f      	movs	r3, #63	; 0x3f
     eba:	18fb      	adds	r3, r7, r3
     ebc:	781a      	ldrb	r2, [r3, #0]
     ebe:	230c      	movs	r3, #12
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	0092      	lsls	r2, r2, #2
     ec4:	58d3      	ldr	r3, [r2, r3]
     ec6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eca:	2b00      	cmp	r3, #0
     ecc:	d109      	bne.n	ee2 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ece:	233f      	movs	r3, #63	; 0x3f
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	781a      	ldrb	r2, [r3, #0]
     ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ed6:	0011      	movs	r1, r2
     ed8:	0018      	movs	r0, r3
     eda:	4b6e      	ldr	r3, [pc, #440]	; (1094 <_spi_check_config+0x224>)
     edc:	4798      	blx	r3
     ede:	0003      	movs	r3, r0
     ee0:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee4:	3301      	adds	r3, #1
     ee6:	d010      	beq.n	f0a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eea:	041b      	lsls	r3, r3, #16
     eec:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef0:	0c1b      	lsrs	r3, r3, #16
     ef2:	b2db      	uxtb	r3, r3
     ef4:	0018      	movs	r0, r3
     ef6:	4b68      	ldr	r3, [pc, #416]	; (1098 <_spi_check_config+0x228>)
     ef8:	4798      	blx	r3
     efa:	0003      	movs	r3, r0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     efc:	429c      	cmp	r4, r3
     efe:	d005      	beq.n	f0c <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2200      	movs	r2, #0
     f04:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     f06:	231c      	movs	r3, #28
     f08:	e0bf      	b.n	108a <_spi_check_config+0x21a>
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
     f0a:	46c0      	nop			; (mov r8, r8)
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f0c:	233f      	movs	r3, #63	; 0x3f
     f0e:	18fb      	adds	r3, r7, r3
     f10:	781a      	ldrb	r2, [r3, #0]
     f12:	233f      	movs	r3, #63	; 0x3f
     f14:	18fb      	adds	r3, r7, r3
     f16:	3201      	adds	r2, #1
     f18:	701a      	strb	r2, [r3, #0]
     f1a:	233f      	movs	r3, #63	; 0x3f
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2b03      	cmp	r3, #3
     f22:	d9c9      	bls.n	eb8 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     f24:	2013      	movs	r0, #19
     f26:	4b5d      	ldr	r3, [pc, #372]	; (109c <_spi_check_config+0x22c>)
     f28:	4798      	blx	r3
     f2a:	0003      	movs	r3, r0
     f2c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     f2e:	2300      	movs	r3, #0
     f30:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     f32:	2300      	movs	r3, #0
     f34:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
     f36:	2300      	movs	r3, #0
     f38:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f3a:	683b      	ldr	r3, [r7, #0]
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	2b01      	cmp	r3, #1
     f40:	d121      	bne.n	f86 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     f42:	683b      	ldr	r3, [r7, #0]
     f44:	699b      	ldr	r3, [r3, #24]
     f46:	221f      	movs	r2, #31
     f48:	18bc      	adds	r4, r7, r2
     f4a:	220a      	movs	r2, #10
     f4c:	18ba      	adds	r2, r7, r2
     f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     f50:	0018      	movs	r0, r3
     f52:	4b53      	ldr	r3, [pc, #332]	; (10a0 <_spi_check_config+0x230>)
     f54:	4798      	blx	r3
     f56:	0003      	movs	r3, r0
     f58:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     f5a:	231f      	movs	r3, #31
     f5c:	18fb      	adds	r3, r7, r3
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b00      	cmp	r3, #0
     f62:	d001      	beq.n	f68 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     f64:	2317      	movs	r3, #23
     f66:	e090      	b.n	108a <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f6a:	7b1b      	ldrb	r3, [r3, #12]
     f6c:	b2da      	uxtb	r2, r3
     f6e:	230a      	movs	r3, #10
     f70:	18fb      	adds	r3, r7, r3
     f72:	881b      	ldrh	r3, [r3, #0]
     f74:	b2db      	uxtb	r3, r3
     f76:	429a      	cmp	r2, r3
     f78:	d001      	beq.n	f7e <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     f7a:	231c      	movs	r3, #28
     f7c:	e085      	b.n	108a <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f80:	220c      	movs	r2, #12
     f82:	4313      	orrs	r3, r2
     f84:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     f86:	683b      	ldr	r3, [r7, #0]
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d129      	bne.n	fe2 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     f8e:	683b      	ldr	r3, [r7, #0]
     f90:	699b      	ldr	r3, [r3, #24]
     f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f94:	4313      	orrs	r3, r2
     f96:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	8b9b      	ldrh	r3, [r3, #28]
     f9c:	001a      	movs	r2, r3
     f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa0:	4313      	orrs	r3, r2
     fa2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fa4:	683b      	ldr	r3, [r7, #0]
     fa6:	7f9b      	ldrb	r3, [r3, #30]
     fa8:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     faa:	683b      	ldr	r3, [r7, #0]
     fac:	7fdb      	ldrb	r3, [r3, #31]
     fae:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fb0:	4313      	orrs	r3, r2
     fb2:	001a      	movs	r2, r3
     fb4:	6a3b      	ldr	r3, [r7, #32]
     fb6:	4313      	orrs	r3, r2
     fb8:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fbc:	681a      	ldr	r2, [r3, #0]
     fbe:	6a3b      	ldr	r3, [r7, #32]
     fc0:	429a      	cmp	r2, r3
     fc2:	d001      	beq.n	fc8 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
     fc4:	231c      	movs	r3, #28
     fc6:	e060      	b.n	108a <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	2220      	movs	r2, #32
     fcc:	5c9b      	ldrb	r3, [r3, r2]
     fce:	2b00      	cmp	r3, #0
     fd0:	d003      	beq.n	fda <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fd4:	2240      	movs	r2, #64	; 0x40
     fd6:	4313      	orrs	r3, r2
     fd8:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fdc:	2208      	movs	r2, #8
     fde:	4313      	orrs	r3, r2
     fe0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     fe8:	4313      	orrs	r3, r2
     fea:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	689b      	ldr	r3, [r3, #8]
     ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ff2:	4313      	orrs	r3, r2
     ff4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ffc:	4313      	orrs	r3, r2
     ffe:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1000:	683b      	ldr	r3, [r7, #0]
    1002:	7c1b      	ldrb	r3, [r3, #16]
    1004:	001a      	movs	r2, r3
    1006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1008:	4313      	orrs	r3, r2
    100a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	7c5b      	ldrb	r3, [r3, #17]
    1010:	2b00      	cmp	r3, #0
    1012:	d003      	beq.n	101c <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1016:	2280      	movs	r2, #128	; 0x80
    1018:	4313      	orrs	r3, r2
    101a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    101c:	683b      	ldr	r3, [r7, #0]
    101e:	7c9b      	ldrb	r3, [r3, #18]
    1020:	2b00      	cmp	r3, #0
    1022:	d004      	beq.n	102e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	0292      	lsls	r2, r2, #10
    102a:	4313      	orrs	r3, r2
    102c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	7cdb      	ldrb	r3, [r3, #19]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0092      	lsls	r2, r2, #2
    103c:	4313      	orrs	r3, r2
    103e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	7d1b      	ldrb	r3, [r3, #20]
    1044:	2b00      	cmp	r3, #0
    1046:	d004      	beq.n	1052 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104a:	2280      	movs	r2, #128	; 0x80
    104c:	0192      	lsls	r2, r2, #6
    104e:	4313      	orrs	r3, r2
    1050:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1054:	2202      	movs	r2, #2
    1056:	4313      	orrs	r3, r2
    1058:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    105c:	681a      	ldr	r2, [r3, #0]
    105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1060:	429a      	cmp	r2, r3
    1062:	d10e      	bne.n	1082 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    1064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1066:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    106a:	429a      	cmp	r2, r3
    106c:	d109      	bne.n	1082 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	781a      	ldrb	r2, [r3, #0]
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	7c1a      	ldrb	r2, [r3, #16]
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    107e:	2300      	movs	r3, #0
    1080:	e003      	b.n	108a <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	2200      	movs	r2, #0
    1086:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1088:	231c      	movs	r3, #28
}
    108a:	0018      	movs	r0, r3
    108c:	46bd      	mov	sp, r7
    108e:	b011      	add	sp, #68	; 0x44
    1090:	bd90      	pop	{r4, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000006dd 	.word	0x000006dd
    1098:	00000971 	.word	0x00000971
    109c:	000051f5 	.word	0x000051f5
    10a0:	000005d5 	.word	0x000005d5

000010a4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b08a      	sub	sp, #40	; 0x28
    10a8:	af00      	add	r7, sp, #0
    10aa:	60f8      	str	r0, [r7, #12]
    10ac:	60b9      	str	r1, [r7, #8]
    10ae:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	68ba      	ldr	r2, [r7, #8]
    10b4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	2202      	movs	r2, #2
    10c2:	4013      	ands	r3, r2
    10c4:	d007      	beq.n	10d6 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    10c6:	687a      	ldr	r2, [r7, #4]
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	0011      	movs	r1, r2
    10cc:	0018      	movs	r0, r3
    10ce:	4b2f      	ldr	r3, [pc, #188]	; (118c <spi_init+0xe8>)
    10d0:	4798      	blx	r3
    10d2:	0003      	movs	r3, r0
    10d4:	e055      	b.n	1182 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    10d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	2201      	movs	r2, #1
    10dc:	4013      	ands	r3, r2
    10de:	d001      	beq.n	10e4 <spi_init+0x40>
		return STATUS_BUSY;
    10e0:	2305      	movs	r3, #5
    10e2:	e04e      	b.n	1182 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	0018      	movs	r0, r3
    10ea:	4b29      	ldr	r3, [pc, #164]	; (1190 <spi_init+0xec>)
    10ec:	4798      	blx	r3
    10ee:	0003      	movs	r3, r0
    10f0:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10f2:	6a3b      	ldr	r3, [r7, #32]
    10f4:	3302      	adds	r3, #2
    10f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f8:	6a3b      	ldr	r3, [r7, #32]
    10fa:	3314      	adds	r3, #20
    10fc:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10fe:	2201      	movs	r2, #1
    1100:	69fb      	ldr	r3, [r7, #28]
    1102:	409a      	lsls	r2, r3
    1104:	0013      	movs	r3, r2
    1106:	0019      	movs	r1, r3
    1108:	2002      	movs	r0, #2
    110a:	4b22      	ldr	r3, [pc, #136]	; (1194 <spi_init+0xf0>)
    110c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    110e:	2314      	movs	r3, #20
    1110:	18fb      	adds	r3, r7, r3
    1112:	0018      	movs	r0, r3
    1114:	4b20      	ldr	r3, [pc, #128]	; (1198 <spi_init+0xf4>)
    1116:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	2224      	movs	r2, #36	; 0x24
    111c:	5c9a      	ldrb	r2, [r3, r2]
    111e:	2314      	movs	r3, #20
    1120:	18fb      	adds	r3, r7, r3
    1122:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1124:	69bb      	ldr	r3, [r7, #24]
    1126:	b2db      	uxtb	r3, r3
    1128:	2214      	movs	r2, #20
    112a:	18ba      	adds	r2, r7, r2
    112c:	0011      	movs	r1, r2
    112e:	0018      	movs	r0, r3
    1130:	4b1a      	ldr	r3, [pc, #104]	; (119c <spi_init+0xf8>)
    1132:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1134:	69bb      	ldr	r3, [r7, #24]
    1136:	b2db      	uxtb	r3, r3
    1138:	0018      	movs	r0, r3
    113a:	4b19      	ldr	r3, [pc, #100]	; (11a0 <spi_init+0xfc>)
    113c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	2224      	movs	r2, #36	; 0x24
    1142:	5c9b      	ldrb	r3, [r3, r2]
    1144:	2100      	movs	r1, #0
    1146:	0018      	movs	r0, r3
    1148:	4b16      	ldr	r3, [pc, #88]	; (11a4 <spi_init+0x100>)
    114a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	2b01      	cmp	r3, #1
    1152:	d105      	bne.n	1160 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	220c      	movs	r2, #12
    115a:	431a      	orrs	r2, r3
    115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    115e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d105      	bne.n	1174 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	2208      	movs	r2, #8
    116e:	431a      	orrs	r2, r3
    1170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1172:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1174:	687a      	ldr	r2, [r7, #4]
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	0011      	movs	r1, r2
    117a:	0018      	movs	r0, r3
    117c:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <spi_init+0x104>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
}
    1182:	0018      	movs	r0, r3
    1184:	46bd      	mov	sp, r7
    1186:	b00a      	add	sp, #40	; 0x28
    1188:	bd80      	pop	{r7, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000e71 	.word	0x00000e71
    1190:	00000899 	.word	0x00000899
    1194:	00000a7d 	.word	0x00000a7d
    1198:	00000a65 	.word	0x00000a65
    119c:	000050d1 	.word	0x000050d1
    11a0:	00005115 	.word	0x00005115
    11a4:	00000651 	.word	0x00000651
    11a8:	00000c21 	.word	0x00000c21

000011ac <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    11ac:	b590      	push	{r4, r7, lr}
    11ae:	b087      	sub	sp, #28
    11b0:	af00      	add	r7, sp, #0
    11b2:	60f8      	str	r0, [r7, #12]
    11b4:	607a      	str	r2, [r7, #4]
    11b6:	230a      	movs	r3, #10
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	1c0a      	adds	r2, r1, #0
    11bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	79db      	ldrb	r3, [r3, #7]
    11c2:	2201      	movs	r2, #1
    11c4:	4053      	eors	r3, r2
    11c6:	b2db      	uxtb	r3, r3
    11c8:	2b00      	cmp	r3, #0
    11ca:	d001      	beq.n	11d0 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    11cc:	231c      	movs	r3, #28
    11ce:	e07c      	b.n	12ca <spi_transceive_wait+0x11e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    11d0:	2315      	movs	r3, #21
    11d2:	18fb      	adds	r3, r7, r3
    11d4:	2200      	movs	r2, #0
    11d6:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	795b      	ldrb	r3, [r3, #5]
    11dc:	2b00      	cmp	r3, #0
    11de:	d121      	bne.n	1224 <spi_transceive_wait+0x78>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    11e0:	2316      	movs	r3, #22
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	2200      	movs	r2, #0
    11e6:	801a      	strh	r2, [r3, #0]
    11e8:	e014      	b.n	1214 <spi_transceive_wait+0x68>
			if (spi_is_ready_to_write(module)) {
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	0018      	movs	r0, r3
    11ee:	4b39      	ldr	r3, [pc, #228]	; (12d4 <spi_transceive_wait+0x128>)
    11f0:	4798      	blx	r3
    11f2:	1e03      	subs	r3, r0, #0
    11f4:	d115      	bne.n	1222 <spi_transceive_wait+0x76>
				break;
			} else if (j == SPI_TIMEOUT) {
    11f6:	2316      	movs	r3, #22
    11f8:	18fb      	adds	r3, r7, r3
    11fa:	881b      	ldrh	r3, [r3, #0]
    11fc:	4a36      	ldr	r2, [pc, #216]	; (12d8 <spi_transceive_wait+0x12c>)
    11fe:	4293      	cmp	r3, r2
    1200:	d101      	bne.n	1206 <spi_transceive_wait+0x5a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1202:	2312      	movs	r3, #18
    1204:	e061      	b.n	12ca <spi_transceive_wait+0x11e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1206:	2316      	movs	r3, #22
    1208:	18fb      	adds	r3, r7, r3
    120a:	881a      	ldrh	r2, [r3, #0]
    120c:	2316      	movs	r3, #22
    120e:	18fb      	adds	r3, r7, r3
    1210:	3201      	adds	r2, #1
    1212:	801a      	strh	r2, [r3, #0]
    1214:	2316      	movs	r3, #22
    1216:	18fb      	adds	r3, r7, r3
    1218:	881b      	ldrh	r3, [r3, #0]
    121a:	4a2f      	ldr	r2, [pc, #188]	; (12d8 <spi_transceive_wait+0x12c>)
    121c:	4293      	cmp	r3, r2
    121e:	d9e4      	bls.n	11ea <spi_transceive_wait+0x3e>
    1220:	e000      	b.n	1224 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
				break;
    1222:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    1224:	46c0      	nop			; (mov r8, r8)
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	0018      	movs	r0, r3
    122a:	4b2a      	ldr	r3, [pc, #168]	; (12d4 <spi_transceive_wait+0x128>)
    122c:	4798      	blx	r3
    122e:	0003      	movs	r3, r0
    1230:	001a      	movs	r2, r3
    1232:	2301      	movs	r3, #1
    1234:	4053      	eors	r3, r2
    1236:	b2db      	uxtb	r3, r3
    1238:	2b00      	cmp	r3, #0
    123a:	d1f4      	bne.n	1226 <spi_transceive_wait+0x7a>
	}

	/* Write data */
	spi_write(module, tx_data);
    123c:	230a      	movs	r3, #10
    123e:	18fb      	adds	r3, r7, r3
    1240:	881a      	ldrh	r2, [r3, #0]
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	0011      	movs	r1, r2
    1246:	0018      	movs	r0, r3
    1248:	4b24      	ldr	r3, [pc, #144]	; (12dc <spi_transceive_wait+0x130>)
    124a:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    124c:	68fb      	ldr	r3, [r7, #12]
    124e:	795b      	ldrb	r3, [r3, #5]
    1250:	2b00      	cmp	r3, #0
    1252:	d121      	bne.n	1298 <spi_transceive_wait+0xec>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1254:	2316      	movs	r3, #22
    1256:	18fb      	adds	r3, r7, r3
    1258:	2200      	movs	r2, #0
    125a:	801a      	strh	r2, [r3, #0]
    125c:	e014      	b.n	1288 <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    125e:	68fb      	ldr	r3, [r7, #12]
    1260:	0018      	movs	r0, r3
    1262:	4b1f      	ldr	r3, [pc, #124]	; (12e0 <spi_transceive_wait+0x134>)
    1264:	4798      	blx	r3
    1266:	1e03      	subs	r3, r0, #0
    1268:	d115      	bne.n	1296 <spi_transceive_wait+0xea>
				break;
			} else if (j == SPI_TIMEOUT) {
    126a:	2316      	movs	r3, #22
    126c:	18fb      	adds	r3, r7, r3
    126e:	881b      	ldrh	r3, [r3, #0]
    1270:	4a19      	ldr	r2, [pc, #100]	; (12d8 <spi_transceive_wait+0x12c>)
    1272:	4293      	cmp	r3, r2
    1274:	d101      	bne.n	127a <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1276:	2312      	movs	r3, #18
    1278:	e027      	b.n	12ca <spi_transceive_wait+0x11e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    127a:	2316      	movs	r3, #22
    127c:	18fb      	adds	r3, r7, r3
    127e:	881a      	ldrh	r2, [r3, #0]
    1280:	2316      	movs	r3, #22
    1282:	18fb      	adds	r3, r7, r3
    1284:	3201      	adds	r2, #1
    1286:	801a      	strh	r2, [r3, #0]
    1288:	2316      	movs	r3, #22
    128a:	18fb      	adds	r3, r7, r3
    128c:	881b      	ldrh	r3, [r3, #0]
    128e:	4a12      	ldr	r2, [pc, #72]	; (12d8 <spi_transceive_wait+0x12c>)
    1290:	4293      	cmp	r3, r2
    1292:	d9e4      	bls.n	125e <spi_transceive_wait+0xb2>
    1294:	e000      	b.n	1298 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
				break;
    1296:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1298:	46c0      	nop			; (mov r8, r8)
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	0018      	movs	r0, r3
    129e:	4b10      	ldr	r3, [pc, #64]	; (12e0 <spi_transceive_wait+0x134>)
    12a0:	4798      	blx	r3
    12a2:	0003      	movs	r3, r0
    12a4:	001a      	movs	r2, r3
    12a6:	2301      	movs	r3, #1
    12a8:	4053      	eors	r3, r2
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b00      	cmp	r3, #0
    12ae:	d1f4      	bne.n	129a <spi_transceive_wait+0xee>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    12b0:	2315      	movs	r3, #21
    12b2:	18fc      	adds	r4, r7, r3
    12b4:	687a      	ldr	r2, [r7, #4]
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	0011      	movs	r1, r2
    12ba:	0018      	movs	r0, r3
    12bc:	4b09      	ldr	r3, [pc, #36]	; (12e4 <spi_transceive_wait+0x138>)
    12be:	4798      	blx	r3
    12c0:	0003      	movs	r3, r0
    12c2:	7023      	strb	r3, [r4, #0]

	return retval;
    12c4:	2315      	movs	r3, #21
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	781b      	ldrb	r3, [r3, #0]
}
    12ca:	0018      	movs	r0, r3
    12cc:	46bd      	mov	sp, r7
    12ce:	b007      	add	sp, #28
    12d0:	bd90      	pop	{r4, r7, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	00000af9 	.word	0x00000af9
    12d8:	00002710 	.word	0x00002710
    12dc:	00000b49 	.word	0x00000b49
    12e0:	00000b21 	.word	0x00000b21
    12e4:	00000b91 	.word	0x00000b91

000012e8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	b086      	sub	sp, #24
    12ec:	af00      	add	r7, sp, #0
    12ee:	60f8      	str	r0, [r7, #12]
    12f0:	60b9      	str	r1, [r7, #8]
    12f2:	1dfb      	adds	r3, r7, #7
    12f4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	795b      	ldrb	r3, [r3, #5]
    12fa:	2b01      	cmp	r3, #1
    12fc:	d001      	beq.n	1302 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    12fe:	2315      	movs	r3, #21
    1300:	e05c      	b.n	13bc <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	7a1b      	ldrb	r3, [r3, #8]
    1306:	2201      	movs	r2, #1
    1308:	4053      	eors	r3, r2
    130a:	b2db      	uxtb	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	d054      	beq.n	13ba <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1310:	1dfb      	adds	r3, r7, #7
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d04a      	beq.n	13ae <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1318:	68bb      	ldr	r3, [r7, #8]
    131a:	785b      	ldrb	r3, [r3, #1]
    131c:	2b00      	cmp	r3, #0
    131e:	d03f      	beq.n	13a0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	0018      	movs	r0, r3
    1324:	4b27      	ldr	r3, [pc, #156]	; (13c4 <spi_select_slave+0xdc>)
    1326:	4798      	blx	r3
    1328:	0003      	movs	r3, r0
    132a:	001a      	movs	r2, r3
    132c:	2301      	movs	r3, #1
    132e:	4053      	eors	r3, r2
    1330:	b2db      	uxtb	r3, r3
    1332:	2b00      	cmp	r3, #0
    1334:	d007      	beq.n	1346 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1336:	68bb      	ldr	r3, [r7, #8]
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	2101      	movs	r1, #1
    133c:	0018      	movs	r0, r3
    133e:	4b22      	ldr	r3, [pc, #136]	; (13c8 <spi_select_slave+0xe0>)
    1340:	4798      	blx	r3
					return STATUS_BUSY;
    1342:	2305      	movs	r3, #5
    1344:	e03a      	b.n	13bc <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1346:	68bb      	ldr	r3, [r7, #8]
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	2100      	movs	r1, #0
    134c:	0018      	movs	r0, r3
    134e:	4b1e      	ldr	r3, [pc, #120]	; (13c8 <spi_select_slave+0xe0>)
    1350:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	789b      	ldrb	r3, [r3, #2]
    1356:	b29a      	uxth	r2, r3
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	0011      	movs	r1, r2
    135c:	0018      	movs	r0, r3
    135e:	4b1b      	ldr	r3, [pc, #108]	; (13cc <spi_select_slave+0xe4>)
    1360:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	79db      	ldrb	r3, [r3, #7]
    1366:	2201      	movs	r2, #1
    1368:	4053      	eors	r3, r2
    136a:	b2db      	uxtb	r3, r3
    136c:	2b00      	cmp	r3, #0
    136e:	d024      	beq.n	13ba <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1370:	46c0      	nop			; (mov r8, r8)
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	0018      	movs	r0, r3
    1376:	4b16      	ldr	r3, [pc, #88]	; (13d0 <spi_select_slave+0xe8>)
    1378:	4798      	blx	r3
    137a:	0003      	movs	r3, r0
    137c:	001a      	movs	r2, r3
    137e:	2301      	movs	r3, #1
    1380:	4053      	eors	r3, r2
    1382:	b2db      	uxtb	r3, r3
    1384:	2b00      	cmp	r3, #0
    1386:	d1f4      	bne.n	1372 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1388:	2316      	movs	r3, #22
    138a:	18fb      	adds	r3, r7, r3
    138c:	2200      	movs	r2, #0
    138e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1390:	2316      	movs	r3, #22
    1392:	18fa      	adds	r2, r7, r3
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	0011      	movs	r1, r2
    1398:	0018      	movs	r0, r3
    139a:	4b0e      	ldr	r3, [pc, #56]	; (13d4 <spi_select_slave+0xec>)
    139c:	4798      	blx	r3
    139e:	e00c      	b.n	13ba <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2100      	movs	r1, #0
    13a6:	0018      	movs	r0, r3
    13a8:	4b07      	ldr	r3, [pc, #28]	; (13c8 <spi_select_slave+0xe0>)
    13aa:	4798      	blx	r3
    13ac:	e005      	b.n	13ba <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    13ae:	68bb      	ldr	r3, [r7, #8]
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	2101      	movs	r1, #1
    13b4:	0018      	movs	r0, r3
    13b6:	4b04      	ldr	r3, [pc, #16]	; (13c8 <spi_select_slave+0xe0>)
    13b8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    13ba:	2300      	movs	r3, #0
}
    13bc:	0018      	movs	r0, r3
    13be:	46bd      	mov	sp, r7
    13c0:	b006      	add	sp, #24
    13c2:	bd80      	pop	{r7, pc}
    13c4:	00000af9 	.word	0x00000af9
    13c8:	00000a11 	.word	0x00000a11
    13cc:	00000b49 	.word	0x00000b49
    13d0:	00000b21 	.word	0x00000b21
    13d4:	00000b91 	.word	0x00000b91

000013d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b084      	sub	sp, #16
    13dc:	af00      	add	r7, sp, #0
    13de:	0002      	movs	r2, r0
    13e0:	1dfb      	adds	r3, r7, #7
    13e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    13e4:	230f      	movs	r3, #15
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	1dfa      	adds	r2, r7, #7
    13ea:	7812      	ldrb	r2, [r2, #0]
    13ec:	09d2      	lsrs	r2, r2, #7
    13ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13f0:	230e      	movs	r3, #14
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	1dfa      	adds	r2, r7, #7
    13f6:	7812      	ldrb	r2, [r2, #0]
    13f8:	0952      	lsrs	r2, r2, #5
    13fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13fc:	4b0d      	ldr	r3, [pc, #52]	; (1434 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1400:	230f      	movs	r3, #15
    1402:	18fb      	adds	r3, r7, r3
    1404:	781b      	ldrb	r3, [r3, #0]
    1406:	2b00      	cmp	r3, #0
    1408:	d10f      	bne.n	142a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    140a:	230f      	movs	r3, #15
    140c:	18fb      	adds	r3, r7, r3
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	009b      	lsls	r3, r3, #2
    1412:	2210      	movs	r2, #16
    1414:	4694      	mov	ip, r2
    1416:	44bc      	add	ip, r7
    1418:	4463      	add	r3, ip
    141a:	3b08      	subs	r3, #8
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	230e      	movs	r3, #14
    1420:	18fb      	adds	r3, r7, r3
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	01db      	lsls	r3, r3, #7
    1426:	18d3      	adds	r3, r2, r3
    1428:	e000      	b.n	142c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    142a:	2300      	movs	r3, #0
	}
}
    142c:	0018      	movs	r0, r3
    142e:	46bd      	mov	sp, r7
    1430:	b004      	add	sp, #16
    1432:	bd80      	pop	{r7, pc}
    1434:	41004400 	.word	0x41004400

00001438 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1438:	b580      	push	{r7, lr}
    143a:	b082      	sub	sp, #8
    143c:	af00      	add	r7, sp, #0
    143e:	0002      	movs	r2, r0
    1440:	1dfb      	adds	r3, r7, #7
    1442:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1444:	1dfb      	adds	r3, r7, #7
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	0018      	movs	r0, r3
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <port_get_group_from_gpio_pin+0x20>)
    144c:	4798      	blx	r3
    144e:	0003      	movs	r3, r0
}
    1450:	0018      	movs	r0, r3
    1452:	46bd      	mov	sp, r7
    1454:	b002      	add	sp, #8
    1456:	bd80      	pop	{r7, pc}
    1458:	000013d9 	.word	0x000013d9

0000145c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2200      	movs	r2, #0
    1468:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	2201      	movs	r2, #1
    146e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	2200      	movs	r2, #0
    1474:	709a      	strb	r2, [r3, #2]
}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	46bd      	mov	sp, r7
    147a:	b002      	add	sp, #8
    147c:	bd80      	pop	{r7, pc}
    147e:	46c0      	nop			; (mov r8, r8)

00001480 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1480:	b580      	push	{r7, lr}
    1482:	b084      	sub	sp, #16
    1484:	af00      	add	r7, sp, #0
    1486:	0002      	movs	r2, r0
    1488:	1dfb      	adds	r3, r7, #7
    148a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    148c:	1dfb      	adds	r3, r7, #7
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	0018      	movs	r0, r3
    1492:	4b0b      	ldr	r3, [pc, #44]	; (14c0 <port_pin_get_input_level+0x40>)
    1494:	4798      	blx	r3
    1496:	0003      	movs	r3, r0
    1498:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    149a:	1dfb      	adds	r3, r7, #7
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	221f      	movs	r2, #31
    14a0:	4013      	ands	r3, r2
    14a2:	2201      	movs	r2, #1
    14a4:	409a      	lsls	r2, r3
    14a6:	0013      	movs	r3, r2
    14a8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    14aa:	68fb      	ldr	r3, [r7, #12]
    14ac:	6a1b      	ldr	r3, [r3, #32]
    14ae:	68ba      	ldr	r2, [r7, #8]
    14b0:	4013      	ands	r3, r2
    14b2:	1e5a      	subs	r2, r3, #1
    14b4:	4193      	sbcs	r3, r2
    14b6:	b2db      	uxtb	r3, r3
}
    14b8:	0018      	movs	r0, r3
    14ba:	46bd      	mov	sp, r7
    14bc:	b004      	add	sp, #16
    14be:	bd80      	pop	{r7, pc}
    14c0:	00001439 	.word	0x00001439

000014c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b084      	sub	sp, #16
    14c8:	af00      	add	r7, sp, #0
    14ca:	0002      	movs	r2, r0
    14cc:	1dfb      	adds	r3, r7, #7
    14ce:	701a      	strb	r2, [r3, #0]
    14d0:	1dbb      	adds	r3, r7, #6
    14d2:	1c0a      	adds	r2, r1, #0
    14d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    14d6:	1dfb      	adds	r3, r7, #7
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	0018      	movs	r0, r3
    14dc:	4b0d      	ldr	r3, [pc, #52]	; (1514 <port_pin_set_output_level+0x50>)
    14de:	4798      	blx	r3
    14e0:	0003      	movs	r3, r0
    14e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14e4:	1dfb      	adds	r3, r7, #7
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	221f      	movs	r2, #31
    14ea:	4013      	ands	r3, r2
    14ec:	2201      	movs	r2, #1
    14ee:	409a      	lsls	r2, r3
    14f0:	0013      	movs	r3, r2
    14f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    14f4:	1dbb      	adds	r3, r7, #6
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d003      	beq.n	1504 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	68ba      	ldr	r2, [r7, #8]
    1500:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1502:	e002      	b.n	150a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	68ba      	ldr	r2, [r7, #8]
    1508:	615a      	str	r2, [r3, #20]
	}
}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	46bd      	mov	sp, r7
    150e:	b004      	add	sp, #16
    1510:	bd80      	pop	{r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	00001439 	.word	0x00001439

00001518 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    1518:	b580      	push	{r7, lr}
    151a:	b084      	sub	sp, #16
    151c:	af00      	add	r7, sp, #0
    151e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	22a0      	movs	r2, #160	; 0xa0
    1524:	0112      	lsls	r2, r2, #4
    1526:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	2201      	movs	r2, #1
    152c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	2200      	movs	r2, #0
    1532:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	2200      	movs	r2, #0
    1538:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    153a:	230f      	movs	r3, #15
    153c:	18fb      	adds	r3, r7, r3
    153e:	2200      	movs	r2, #0
    1540:	701a      	strb	r2, [r3, #0]
    1542:	e00e      	b.n	1562 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    1544:	230f      	movs	r3, #15
    1546:	18fb      	adds	r3, r7, r3
    1548:	781a      	ldrb	r2, [r3, #0]
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	3202      	adds	r2, #2
    154e:	0092      	lsls	r2, r2, #2
    1550:	2100      	movs	r1, #0
    1552:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1554:	230f      	movs	r3, #15
    1556:	18fb      	adds	r3, r7, r3
    1558:	781a      	ldrb	r2, [r3, #0]
    155a:	230f      	movs	r3, #15
    155c:	18fb      	adds	r3, r7, r3
    155e:	3201      	adds	r2, #1
    1560:	701a      	strb	r2, [r3, #0]
    1562:	230f      	movs	r3, #15
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2b01      	cmp	r3, #1
    156a:	d9eb      	bls.n	1544 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    156c:	46c0      	nop			; (mov r8, r8)
    156e:	46bd      	mov	sp, r7
    1570:	b004      	add	sp, #16
    1572:	bd80      	pop	{r7, pc}

00001574 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	69db      	ldr	r3, [r3, #28]
    1586:	1e5a      	subs	r2, r3, #1
    1588:	4193      	sbcs	r3, r2
    158a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    158c:	0018      	movs	r0, r3
    158e:	46bd      	mov	sp, r7
    1590:	b004      	add	sp, #16
    1592:	bd80      	pop	{r7, pc}

00001594 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1594:	b580      	push	{r7, lr}
    1596:	b082      	sub	sp, #8
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	2201      	movs	r2, #1
    15a0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	2200      	movs	r2, #0
    15a6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	2200      	movs	r2, #0
    15ac:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	22c0      	movs	r2, #192	; 0xc0
    15b2:	0392      	lsls	r2, r2, #14
    15b4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2200      	movs	r2, #0
    15ba:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	2200      	movs	r2, #0
    15c0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	2201      	movs	r2, #1
    15c6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2201      	movs	r2, #1
    15cc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	2200      	movs	r2, #0
    15d2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	2224      	movs	r2, #36	; 0x24
    15d8:	2100      	movs	r1, #0
    15da:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	3318      	adds	r3, #24
    15e0:	220c      	movs	r2, #12
    15e2:	2100      	movs	r1, #0
    15e4:	0018      	movs	r0, r3
    15e6:	4b0a      	ldr	r3, [pc, #40]	; (1610 <spi_get_config_defaults+0x7c>)
    15e8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	4a09      	ldr	r2, [pc, #36]	; (1614 <spi_get_config_defaults+0x80>)
    15ee:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	2200      	movs	r2, #0
    15f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	2200      	movs	r2, #0
    15fa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	2200      	movs	r2, #0
    1600:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	2200      	movs	r2, #0
    1606:	635a      	str	r2, [r3, #52]	; 0x34

};
    1608:	46c0      	nop			; (mov r8, r8)
    160a:	46bd      	mov	sp, r7
    160c:	b002      	add	sp, #8
    160e:	bd80      	pop	{r7, pc}
    1610:	00009117 	.word	0x00009117
    1614:	000186a0 	.word	0x000186a0

00001618 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	220a      	movs	r2, #10
    1624:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	2200      	movs	r2, #0
    162a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	2200      	movs	r2, #0
    1630:	709a      	strb	r2, [r3, #2]
}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	46bd      	mov	sp, r7
    1636:	b002      	add	sp, #8
    1638:	bd80      	pop	{r7, pc}
    163a:	46c0      	nop			; (mov r8, r8)

0000163c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    163c:	b580      	push	{r7, lr}
    163e:	b084      	sub	sp, #16
    1640:	af00      	add	r7, sp, #0
    1642:	6078      	str	r0, [r7, #4]
    1644:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1646:	683b      	ldr	r3, [r7, #0]
    1648:	781a      	ldrb	r2, [r3, #0]
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    164e:	683b      	ldr	r3, [r7, #0]
    1650:	785a      	ldrb	r2, [r3, #1]
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	789a      	ldrb	r2, [r3, #2]
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    165e:	230c      	movs	r3, #12
    1660:	18fb      	adds	r3, r7, r3
    1662:	0018      	movs	r0, r3
    1664:	4b0b      	ldr	r3, [pc, #44]	; (1694 <spi_attach_slave+0x58>)
    1666:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1668:	230c      	movs	r3, #12
    166a:	18fb      	adds	r3, r7, r3
    166c:	2201      	movs	r2, #1
    166e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	220c      	movs	r2, #12
    1676:	18ba      	adds	r2, r7, r2
    1678:	0011      	movs	r1, r2
    167a:	0018      	movs	r0, r3
    167c:	4b06      	ldr	r3, [pc, #24]	; (1698 <spi_attach_slave+0x5c>)
    167e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	2101      	movs	r1, #1
    1686:	0018      	movs	r0, r3
    1688:	4b04      	ldr	r3, [pc, #16]	; (169c <spi_attach_slave+0x60>)
    168a:	4798      	blx	r3
}
    168c:	46c0      	nop			; (mov r8, r8)
    168e:	46bd      	mov	sp, r7
    1690:	b004      	add	sp, #16
    1692:	bd80      	pop	{r7, pc}
    1694:	0000145d 	.word	0x0000145d
    1698:	00004611 	.word	0x00004611
    169c:	000014c5 	.word	0x000014c5

000016a0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b084      	sub	sp, #16
    16a4:	af00      	add	r7, sp, #0
    16a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	0018      	movs	r0, r3
    16b4:	4b06      	ldr	r3, [pc, #24]	; (16d0 <spi_enable+0x30>)
    16b6:	4798      	blx	r3
    16b8:	1e03      	subs	r3, r0, #0
    16ba:	d1f9      	bne.n	16b0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	2202      	movs	r2, #2
    16c2:	431a      	orrs	r2, r3
    16c4:	68fb      	ldr	r3, [r7, #12]
    16c6:	601a      	str	r2, [r3, #0]
}
    16c8:	46c0      	nop			; (mov r8, r8)
    16ca:	46bd      	mov	sp, r7
    16cc:	b004      	add	sp, #16
    16ce:	bd80      	pop	{r7, pc}
    16d0:	00001575 	.word	0x00001575

000016d4 <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b082      	sub	sp, #8
    16d8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    16da:	1d3b      	adds	r3, r7, #4
    16dc:	0018      	movs	r0, r3
    16de:	4b07      	ldr	r3, [pc, #28]	; (16fc <configure_port_pins+0x28>)
    16e0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    16e2:	1d3b      	adds	r3, r7, #4
    16e4:	2200      	movs	r2, #0
    16e6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    16e8:	1d3b      	adds	r3, r7, #4
    16ea:	0019      	movs	r1, r3
    16ec:	2003      	movs	r0, #3
    16ee:	4b04      	ldr	r3, [pc, #16]	; (1700 <configure_port_pins+0x2c>)
    16f0:	4798      	blx	r3
}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	46bd      	mov	sp, r7
    16f6:	b002      	add	sp, #8
    16f8:	bd80      	pop	{r7, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	0000145d 	.word	0x0000145d
    1700:	00004611 	.word	0x00004611

00001704 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	b084      	sub	sp, #16
    1708:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    170a:	1d3b      	adds	r3, r7, #4
    170c:	0018      	movs	r0, r3
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <configure_extint_channel+0x38>)
    1710:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    1712:	1d3b      	adds	r3, r7, #4
    1714:	2203      	movs	r2, #3
    1716:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    1718:	1d3b      	adds	r3, r7, #4
    171a:	2200      	movs	r2, #0
    171c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    171e:	1d3b      	adds	r3, r7, #4
    1720:	2201      	movs	r2, #1
    1722:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1724:	1d3b      	adds	r3, r7, #4
    1726:	2201      	movs	r2, #1
    1728:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    172a:	1d3b      	adds	r3, r7, #4
    172c:	0019      	movs	r1, r3
    172e:	2003      	movs	r0, #3
    1730:	4b03      	ldr	r3, [pc, #12]	; (1740 <configure_extint_channel+0x3c>)
    1732:	4798      	blx	r3
}
    1734:	46c0      	nop			; (mov r8, r8)
    1736:	46bd      	mov	sp, r7
    1738:	b004      	add	sp, #16
    173a:	bd80      	pop	{r7, pc}
    173c:	000044b9 	.word	0x000044b9
    1740:	000044ed 	.word	0x000044ed

00001744 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    1748:	4b06      	ldr	r3, [pc, #24]	; (1764 <configure_extint_callbacks+0x20>)
    174a:	2200      	movs	r2, #0
    174c:	2103      	movs	r1, #3
    174e:	0018      	movs	r0, r3
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <configure_extint_callbacks+0x24>)
    1752:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    1754:	2100      	movs	r1, #0
    1756:	2003      	movs	r0, #3
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <configure_extint_callbacks+0x28>)
    175a:	4798      	blx	r3
}
    175c:	46c0      	nop			; (mov r8, r8)
    175e:	46bd      	mov	sp, r7
    1760:	bd80      	pop	{r7, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00002269 	.word	0x00002269
    1768:	000040b9 	.word	0x000040b9
    176c:	0000411d 	.word	0x0000411d

00001770 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	b090      	sub	sp, #64	; 0x40
    1774:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    1776:	1d3b      	adds	r3, r7, #4
    1778:	0018      	movs	r0, r3
    177a:	4b21      	ldr	r3, [pc, #132]	; (1800 <configure_RFM69_spi+0x90>)
    177c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    177e:	1d3b      	adds	r3, r7, #4
    1780:	2212      	movs	r2, #18
    1782:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    1784:	1d3a      	adds	r2, r7, #4
    1786:	4b1f      	ldr	r3, [pc, #124]	; (1804 <configure_RFM69_spi+0x94>)
    1788:	0011      	movs	r1, r2
    178a:	0018      	movs	r0, r3
    178c:	4b1e      	ldr	r3, [pc, #120]	; (1808 <configure_RFM69_spi+0x98>)
    178e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    1790:	2308      	movs	r3, #8
    1792:	18fb      	adds	r3, r7, r3
    1794:	0018      	movs	r0, r3
    1796:	4b1d      	ldr	r3, [pc, #116]	; (180c <configure_RFM69_spi+0x9c>)
    1798:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    179a:	2308      	movs	r3, #8
    179c:	18fb      	adds	r3, r7, r3
    179e:	22c0      	movs	r2, #192	; 0xc0
    17a0:	0392      	lsls	r2, r2, #14
    17a2:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    17a4:	2308      	movs	r3, #8
    17a6:	18fb      	adds	r3, r7, r3
    17a8:	4a19      	ldr	r2, [pc, #100]	; (1810 <configure_RFM69_spi+0xa0>)
    17aa:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    17ac:	2308      	movs	r3, #8
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	4a18      	ldr	r2, [pc, #96]	; (1814 <configure_RFM69_spi+0xa4>)
    17b2:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    17b4:	2308      	movs	r3, #8
    17b6:	18fb      	adds	r3, r7, r3
    17b8:	2201      	movs	r2, #1
    17ba:	4252      	negs	r2, r2
    17bc:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    17be:	2308      	movs	r3, #8
    17c0:	18fb      	adds	r3, r7, r3
    17c2:	4a15      	ldr	r2, [pc, #84]	; (1818 <configure_RFM69_spi+0xa8>)
    17c4:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    17c6:	2308      	movs	r3, #8
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	2200      	movs	r2, #0
    17cc:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    17ce:	2308      	movs	r3, #8
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	2200      	movs	r2, #0
    17d4:	609a      	str	r2, [r3, #8]
	//config_spi_master.generator_source = GCLK_CLKCTRL_GEN_GCLK1;
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    17d6:	2308      	movs	r3, #8
    17d8:	18fa      	adds	r2, r7, r3
    17da:	4910      	ldr	r1, [pc, #64]	; (181c <configure_RFM69_spi+0xac>)
    17dc:	4b10      	ldr	r3, [pc, #64]	; (1820 <configure_RFM69_spi+0xb0>)
    17de:	0018      	movs	r0, r3
    17e0:	4b10      	ldr	r3, [pc, #64]	; (1824 <configure_RFM69_spi+0xb4>)
    17e2:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    17e4:	4b0e      	ldr	r3, [pc, #56]	; (1820 <configure_RFM69_spi+0xb0>)
    17e6:	0018      	movs	r0, r3
    17e8:	4b0f      	ldr	r3, [pc, #60]	; (1828 <configure_RFM69_spi+0xb8>)
    17ea:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    17ec:	4905      	ldr	r1, [pc, #20]	; (1804 <configure_RFM69_spi+0x94>)
    17ee:	4b0c      	ldr	r3, [pc, #48]	; (1820 <configure_RFM69_spi+0xb0>)
    17f0:	2200      	movs	r2, #0
    17f2:	0018      	movs	r0, r3
    17f4:	4b0d      	ldr	r3, [pc, #52]	; (182c <configure_RFM69_spi+0xbc>)
    17f6:	4798      	blx	r3
}
    17f8:	46c0      	nop			; (mov r8, r8)
    17fa:	46bd      	mov	sp, r7
    17fc:	b010      	add	sp, #64	; 0x40
    17fe:	bd80      	pop	{r7, pc}
    1800:	00001619 	.word	0x00001619
    1804:	200002f0 	.word	0x200002f0
    1808:	0000163d 	.word	0x0000163d
    180c:	00001595 	.word	0x00001595
    1810:	00100002 	.word	0x00100002
    1814:	00110002 	.word	0x00110002
    1818:	00130002 	.word	0x00130002
    181c:	42000c00 	.word	0x42000c00
    1820:	200002e0 	.word	0x200002e0
    1824:	000010a5 	.word	0x000010a5
    1828:	000016a1 	.word	0x000016a1
    182c:	000012e9 	.word	0x000012e9

00001830 <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    1830:	b580      	push	{r7, lr}
    1832:	b084      	sub	sp, #16
    1834:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    1836:	003b      	movs	r3, r7
    1838:	0018      	movs	r0, r3
    183a:	4b0f      	ldr	r3, [pc, #60]	; (1878 <configure_rtc_count+0x48>)
    183c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    183e:	003b      	movs	r3, r7
    1840:	2200      	movs	r2, #0
    1842:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1844:	003b      	movs	r3, r7
    1846:	2200      	movs	r2, #0
    1848:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    184a:	003b      	movs	r3, r7
    184c:	2201      	movs	r2, #1
    184e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1850:	003a      	movs	r2, r7
    1852:	490a      	ldr	r1, [pc, #40]	; (187c <configure_rtc_count+0x4c>)
    1854:	4b0a      	ldr	r3, [pc, #40]	; (1880 <configure_rtc_count+0x50>)
    1856:	0018      	movs	r0, r3
    1858:	4b0a      	ldr	r3, [pc, #40]	; (1884 <configure_rtc_count+0x54>)
    185a:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    185c:	4b08      	ldr	r3, [pc, #32]	; (1880 <configure_rtc_count+0x50>)
    185e:	0018      	movs	r0, r3
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <configure_rtc_count+0x58>)
    1862:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    1864:	4a09      	ldr	r2, [pc, #36]	; (188c <configure_rtc_count+0x5c>)
    1866:	4b06      	ldr	r3, [pc, #24]	; (1880 <configure_rtc_count+0x50>)
    1868:	0011      	movs	r1, r2
    186a:	0018      	movs	r0, r3
    186c:	4b08      	ldr	r3, [pc, #32]	; (1890 <configure_rtc_count+0x60>)
    186e:	4798      	blx	r3
}
    1870:	46c0      	nop			; (mov r8, r8)
    1872:	46bd      	mov	sp, r7
    1874:	b004      	add	sp, #16
    1876:	bd80      	pop	{r7, pc}
    1878:	00001519 	.word	0x00001519
    187c:	40001400 	.word	0x40001400
    1880:	20000244 	.word	0x20000244
    1884:	00000395 	.word	0x00000395
    1888:	000001b1 	.word	0x000001b1
    188c:	00002710 	.word	0x00002710
    1890:	00000579 	.word	0x00000579

00001894 <reset_millis>:

void reset_millis(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <reset_millis+0x1c>)
    189a:	2100      	movs	r1, #0
    189c:	0018      	movs	r0, r3
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <reset_millis+0x20>)
    18a0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    18a2:	4b03      	ldr	r3, [pc, #12]	; (18b0 <reset_millis+0x1c>)
    18a4:	0018      	movs	r0, r3
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <reset_millis+0x24>)
    18a8:	4798      	blx	r3
}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	46bd      	mov	sp, r7
    18ae:	bd80      	pop	{r7, pc}
    18b0:	20000244 	.word	0x20000244
    18b4:	00000425 	.word	0x00000425
    18b8:	000001b1 	.word	0x000001b1

000018bc <millis>:

uint32_t millis(void)
{
    18bc:	b580      	push	{r7, lr}
    18be:	b082      	sub	sp, #8
    18c0:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    18c2:	2300      	movs	r3, #0
    18c4:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <millis+0x20>)
    18c8:	0018      	movs	r0, r3
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <millis+0x24>)
    18cc:	4798      	blx	r3
    18ce:	0003      	movs	r3, r0
    18d0:	607b      	str	r3, [r7, #4]
	return milli;
    18d2:	687b      	ldr	r3, [r7, #4]
}
    18d4:	0018      	movs	r0, r3
    18d6:	46bd      	mov	sp, r7
    18d8:	b002      	add	sp, #8
    18da:	bd80      	pop	{r7, pc}
    18dc:	20000244 	.word	0x20000244
    18e0:	00000485 	.word	0x00000485

000018e4 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    18e4:	b590      	push	{r4, r7, lr}
    18e6:	b085      	sub	sp, #20
    18e8:	af00      	add	r7, sp, #0
    18ea:	0004      	movs	r4, r0
    18ec:	6039      	str	r1, [r7, #0]
    18ee:	0010      	movs	r0, r2
    18f0:	0019      	movs	r1, r3
    18f2:	1dfb      	adds	r3, r7, #7
    18f4:	1c22      	adds	r2, r4, #0
    18f6:	701a      	strb	r2, [r3, #0]
    18f8:	1dbb      	adds	r3, r7, #6
    18fa:	1c02      	adds	r2, r0, #0
    18fc:	701a      	strb	r2, [r3, #0]
    18fe:	1d7b      	adds	r3, r7, #5
    1900:	1c0a      	adds	r2, r1, #0
    1902:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    1904:	2001      	movs	r0, #1
    1906:	4b4b      	ldr	r3, [pc, #300]	; (1a34 <sendFrame+0x150>)
    1908:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	2027      	movs	r0, #39	; 0x27
    190e:	4b4a      	ldr	r3, [pc, #296]	; (1a38 <sendFrame+0x154>)
    1910:	4798      	blx	r3
    1912:	0003      	movs	r3, r0
    1914:	b25b      	sxtb	r3, r3
    1916:	2b00      	cmp	r3, #0
    1918:	daf8      	bge.n	190c <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    191a:	2100      	movs	r1, #0
    191c:	2025      	movs	r0, #37	; 0x25
    191e:	4b47      	ldr	r3, [pc, #284]	; (1a3c <sendFrame+0x158>)
    1920:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    1922:	1dbb      	adds	r3, r7, #6
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	2b3d      	cmp	r3, #61	; 0x3d
    1928:	d902      	bls.n	1930 <sendFrame+0x4c>
    192a:	1dbb      	adds	r3, r7, #6
    192c:	223d      	movs	r2, #61	; 0x3d
    192e:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    1930:	230e      	movs	r3, #14
    1932:	18fb      	adds	r3, r7, r3
    1934:	2200      	movs	r2, #0
    1936:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    1938:	2320      	movs	r3, #32
    193a:	18fb      	adds	r3, r7, r3
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d004      	beq.n	194c <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    1942:	230e      	movs	r3, #14
    1944:	18fb      	adds	r3, r7, r3
    1946:	2280      	movs	r2, #128	; 0x80
    1948:	701a      	strb	r2, [r3, #0]
    194a:	e007      	b.n	195c <sendFrame+0x78>
	else if (requestACK)
    194c:	1d7b      	adds	r3, r7, #5
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	2b00      	cmp	r3, #0
    1952:	d003      	beq.n	195c <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    1954:	230e      	movs	r3, #14
    1956:	18fb      	adds	r3, r7, r3
    1958:	2240      	movs	r2, #64	; 0x40
    195a:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	selectrf();
    195c:	4b38      	ldr	r3, [pc, #224]	; (1a40 <sendFrame+0x15c>)
    195e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    1960:	4a38      	ldr	r2, [pc, #224]	; (1a44 <sendFrame+0x160>)
    1962:	4b39      	ldr	r3, [pc, #228]	; (1a48 <sendFrame+0x164>)
    1964:	2180      	movs	r1, #128	; 0x80
    1966:	0018      	movs	r0, r3
    1968:	4b38      	ldr	r3, [pc, #224]	; (1a4c <sendFrame+0x168>)
    196a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    196c:	1dbb      	adds	r3, r7, #6
    196e:	781b      	ldrb	r3, [r3, #0]
    1970:	b29b      	uxth	r3, r3
    1972:	3303      	adds	r3, #3
    1974:	b299      	uxth	r1, r3
    1976:	4a33      	ldr	r2, [pc, #204]	; (1a44 <sendFrame+0x160>)
    1978:	4b33      	ldr	r3, [pc, #204]	; (1a48 <sendFrame+0x164>)
    197a:	0018      	movs	r0, r3
    197c:	4b33      	ldr	r3, [pc, #204]	; (1a4c <sendFrame+0x168>)
    197e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    1980:	1dfb      	adds	r3, r7, #7
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	b299      	uxth	r1, r3
    1986:	4a2f      	ldr	r2, [pc, #188]	; (1a44 <sendFrame+0x160>)
    1988:	4b2f      	ldr	r3, [pc, #188]	; (1a48 <sendFrame+0x164>)
    198a:	0018      	movs	r0, r3
    198c:	4b2f      	ldr	r3, [pc, #188]	; (1a4c <sendFrame+0x168>)
    198e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    1990:	4b2f      	ldr	r3, [pc, #188]	; (1a50 <sendFrame+0x16c>)
    1992:	781b      	ldrb	r3, [r3, #0]
    1994:	b2db      	uxtb	r3, r3
    1996:	b299      	uxth	r1, r3
    1998:	4a2a      	ldr	r2, [pc, #168]	; (1a44 <sendFrame+0x160>)
    199a:	4b2b      	ldr	r3, [pc, #172]	; (1a48 <sendFrame+0x164>)
    199c:	0018      	movs	r0, r3
    199e:	4b2b      	ldr	r3, [pc, #172]	; (1a4c <sendFrame+0x168>)
    19a0:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    19a2:	230e      	movs	r3, #14
    19a4:	18fb      	adds	r3, r7, r3
    19a6:	781b      	ldrb	r3, [r3, #0]
    19a8:	b2db      	uxtb	r3, r3
    19aa:	b299      	uxth	r1, r3
    19ac:	4a25      	ldr	r2, [pc, #148]	; (1a44 <sendFrame+0x160>)
    19ae:	4b26      	ldr	r3, [pc, #152]	; (1a48 <sendFrame+0x164>)
    19b0:	0018      	movs	r0, r3
    19b2:	4b26      	ldr	r3, [pc, #152]	; (1a4c <sendFrame+0x168>)
    19b4:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    19b6:	230f      	movs	r3, #15
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	2200      	movs	r2, #0
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	e012      	b.n	19e6 <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	683a      	ldr	r2, [r7, #0]
    19c8:	18d3      	adds	r3, r2, r3
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	b299      	uxth	r1, r3
    19ce:	4a1d      	ldr	r2, [pc, #116]	; (1a44 <sendFrame+0x160>)
    19d0:	4b1d      	ldr	r3, [pc, #116]	; (1a48 <sendFrame+0x164>)
    19d2:	0018      	movs	r0, r3
    19d4:	4b1d      	ldr	r3, [pc, #116]	; (1a4c <sendFrame+0x168>)
    19d6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    19d8:	230f      	movs	r3, #15
    19da:	18fb      	adds	r3, r7, r3
    19dc:	781a      	ldrb	r2, [r3, #0]
    19de:	230f      	movs	r3, #15
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	3201      	adds	r2, #1
    19e4:	701a      	strb	r2, [r3, #0]
    19e6:	230f      	movs	r3, #15
    19e8:	18fa      	adds	r2, r7, r3
    19ea:	1dbb      	adds	r3, r7, #6
    19ec:	7812      	ldrb	r2, [r2, #0]
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	429a      	cmp	r2, r3
    19f2:	d3e5      	bcc.n	19c0 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    19f4:	4b17      	ldr	r3, [pc, #92]	; (1a54 <sendFrame+0x170>)
    19f6:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the 
	
	
	setMode(RF69_MODE_TX);
    19f8:	2004      	movs	r0, #4
    19fa:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <sendFrame+0x150>)
    19fc:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    19fe:	4b16      	ldr	r3, [pc, #88]	; (1a58 <sendFrame+0x174>)
    1a00:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	2003      	movs	r0, #3
    1a06:	4b15      	ldr	r3, [pc, #84]	; (1a5c <sendFrame+0x178>)
    1a08:	4798      	blx	r3
    1a0a:	0003      	movs	r3, r0
    1a0c:	001a      	movs	r2, r3
    1a0e:	2301      	movs	r3, #1
    1a10:	4053      	eors	r3, r2
    1a12:	b2db      	uxtb	r3, r3
    1a14:	2b00      	cmp	r3, #0
    1a16:	d005      	beq.n	1a24 <sendFrame+0x140>
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <sendFrame+0x17c>)
    1a1a:	4798      	blx	r3
    1a1c:	1e02      	subs	r2, r0, #0
    1a1e:	4b11      	ldr	r3, [pc, #68]	; (1a64 <sendFrame+0x180>)
    1a20:	429a      	cmp	r2, r3
    1a22:	d9ef      	bls.n	1a04 <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    1a24:	2001      	movs	r0, #1
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <sendFrame+0x150>)
    1a28:	4798      	blx	r3
}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	46bd      	mov	sp, r7
    1a2e:	b005      	add	sp, #20
    1a30:	bd90      	pop	{r4, r7, pc}
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	00001e85 	.word	0x00001e85
    1a38:	00002461 	.word	0x00002461
    1a3c:	000024c9 	.word	0x000024c9
    1a40:	00002529 	.word	0x00002529
    1a44:	200000fe 	.word	0x200000fe
    1a48:	200002e0 	.word	0x200002e0
    1a4c:	000011ad 	.word	0x000011ad
    1a50:	2000024e 	.word	0x2000024e
    1a54:	0000254d 	.word	0x0000254d
    1a58:	00001895 	.word	0x00001895
    1a5c:	00001481 	.word	0x00001481
    1a60:	000018bd 	.word	0x000018bd
    1a64:	000003e7 	.word	0x000003e7

00001a68 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    1a68:	b580      	push	{r7, lr}
    1a6a:	b082      	sub	sp, #8
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	0002      	movs	r2, r0
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    1a74:	4b19      	ldr	r3, [pc, #100]	; (1adc <RFM_setHighPower+0x74>)
    1a76:	1dfa      	adds	r2, r7, #7
    1a78:	7812      	ldrb	r2, [r2, #0]
    1a7a:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    1a7c:	4b17      	ldr	r3, [pc, #92]	; (1adc <RFM_setHighPower+0x74>)
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	b2db      	uxtb	r3, r3
    1a82:	2b00      	cmp	r3, #0
    1a84:	d001      	beq.n	1a8a <RFM_setHighPower+0x22>
    1a86:	230f      	movs	r3, #15
    1a88:	e000      	b.n	1a8c <RFM_setHighPower+0x24>
    1a8a:	231a      	movs	r3, #26
    1a8c:	0019      	movs	r1, r3
    1a8e:	2013      	movs	r0, #19
    1a90:	4b13      	ldr	r3, [pc, #76]	; (1ae0 <RFM_setHighPower+0x78>)
    1a92:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    1a94:	4b11      	ldr	r3, [pc, #68]	; (1adc <RFM_setHighPower+0x74>)
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d010      	beq.n	1ac0 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    1a9e:	2011      	movs	r0, #17
    1aa0:	4b10      	ldr	r3, [pc, #64]	; (1ae4 <RFM_setHighPower+0x7c>)
    1aa2:	4798      	blx	r3
    1aa4:	0003      	movs	r3, r0
    1aa6:	b25b      	sxtb	r3, r3
    1aa8:	221f      	movs	r2, #31
    1aaa:	4013      	ands	r3, r2
    1aac:	b25b      	sxtb	r3, r3
    1aae:	2260      	movs	r2, #96	; 0x60
    1ab0:	4313      	orrs	r3, r2
    1ab2:	b25b      	sxtb	r3, r3
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	0019      	movs	r1, r3
    1ab8:	2011      	movs	r0, #17
    1aba:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <RFM_setHighPower+0x78>)
    1abc:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    1abe:	e009      	b.n	1ad4 <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    1ac0:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <RFM_setHighPower+0x80>)
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	2280      	movs	r2, #128	; 0x80
    1ac6:	4252      	negs	r2, r2
    1ac8:	4313      	orrs	r3, r2
    1aca:	b2db      	uxtb	r3, r3
    1acc:	0019      	movs	r1, r3
    1ace:	2011      	movs	r0, #17
    1ad0:	4b03      	ldr	r3, [pc, #12]	; (1ae0 <RFM_setHighPower+0x78>)
    1ad2:	4798      	blx	r3
}
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b002      	add	sp, #8
    1ada:	bd80      	pop	{r7, pc}
    1adc:	200002dc 	.word	0x200002dc
    1ae0:	000024c9 	.word	0x000024c9
    1ae4:	00002461 	.word	0x00002461
    1ae8:	2000024c 	.word	0x2000024c

00001aec <RFM69>:

void RFM69()
{
    1aec:	b580      	push	{r7, lr}
    1aee:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    1af0:	4b07      	ldr	r3, [pc, #28]	; (1b10 <RFM69+0x24>)
    1af2:	2201      	movs	r2, #1
    1af4:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    1af6:	4b07      	ldr	r3, [pc, #28]	; (1b14 <RFM69+0x28>)
    1af8:	2200      	movs	r2, #0
    1afa:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    1afc:	4b06      	ldr	r3, [pc, #24]	; (1b18 <RFM69+0x2c>)
    1afe:	221f      	movs	r2, #31
    1b00:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <RFM69+0x30>)
    1b04:	2200      	movs	r2, #0
    1b06:	701a      	strb	r2, [r3, #0]
}
    1b08:	46c0      	nop			; (mov r8, r8)
    1b0a:	46bd      	mov	sp, r7
    1b0c:	bd80      	pop	{r7, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	200002da 	.word	0x200002da
    1b14:	20000254 	.word	0x20000254
    1b18:	2000024c 	.word	0x2000024c
    1b1c:	200002dc 	.word	0x200002dc

00001b20 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    1b20:	b590      	push	{r4, r7, lr}
    1b22:	b091      	sub	sp, #68	; 0x44
    1b24:	af00      	add	r7, sp, #0
    1b26:	0004      	movs	r4, r0
    1b28:	0008      	movs	r0, r1
    1b2a:	0011      	movs	r1, r2
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	1c22      	adds	r2, r4, #0
    1b30:	701a      	strb	r2, [r3, #0]
    1b32:	1dbb      	adds	r3, r7, #6
    1b34:	1c02      	adds	r2, r0, #0
    1b36:	701a      	strb	r2, [r3, #0]
    1b38:	1d7b      	adds	r3, r7, #5
    1b3a:	1c0a      	adds	r2, r1, #0
    1b3c:	701a      	strb	r2, [r3, #0]
  RFM69();
    1b3e:	4bc1      	ldr	r3, [pc, #772]	; (1e44 <RFM_initialize+0x324>)
    1b40:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    1b42:	2310      	movs	r3, #16
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	2201      	movs	r2, #1
    1b48:	701a      	strb	r2, [r3, #0]
    1b4a:	2310      	movs	r3, #16
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	2204      	movs	r2, #4
    1b50:	705a      	strb	r2, [r3, #1]
    1b52:	2310      	movs	r3, #16
    1b54:	18fb      	adds	r3, r7, r3
    1b56:	2202      	movs	r2, #2
    1b58:	709a      	strb	r2, [r3, #2]
    1b5a:	2310      	movs	r3, #16
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2200      	movs	r2, #0
    1b60:	70da      	strb	r2, [r3, #3]
    1b62:	2310      	movs	r3, #16
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2203      	movs	r2, #3
    1b68:	711a      	strb	r2, [r3, #4]
    1b6a:	2310      	movs	r3, #16
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	2202      	movs	r2, #2
    1b70:	715a      	strb	r2, [r3, #5]
    1b72:	2310      	movs	r3, #16
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	2204      	movs	r2, #4
    1b78:	719a      	strb	r2, [r3, #6]
    1b7a:	2310      	movs	r3, #16
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	2240      	movs	r2, #64	; 0x40
    1b80:	71da      	strb	r2, [r3, #7]
    1b82:	2310      	movs	r3, #16
    1b84:	18fb      	adds	r3, r7, r3
    1b86:	2205      	movs	r2, #5
    1b88:	721a      	strb	r2, [r3, #8]
    1b8a:	2310      	movs	r3, #16
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	2203      	movs	r2, #3
    1b90:	725a      	strb	r2, [r3, #9]
    1b92:	2310      	movs	r3, #16
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	2206      	movs	r2, #6
    1b98:	729a      	strb	r2, [r3, #10]
    1b9a:	2310      	movs	r3, #16
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	2233      	movs	r2, #51	; 0x33
    1ba0:	72da      	strb	r2, [r3, #11]
    1ba2:	2310      	movs	r3, #16
    1ba4:	18fb      	adds	r3, r7, r3
    1ba6:	2207      	movs	r2, #7
    1ba8:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b1f      	cmp	r3, #31
    1bb0:	d00d      	beq.n	1bce <RFM_initialize+0xae>
    1bb2:	1dfb      	adds	r3, r7, #7
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b2b      	cmp	r3, #43	; 0x2b
    1bb8:	d007      	beq.n	1bca <RFM_initialize+0xaa>
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	2b56      	cmp	r3, #86	; 0x56
    1bc0:	d101      	bne.n	1bc6 <RFM_initialize+0xa6>
    1bc2:	23d9      	movs	r3, #217	; 0xd9
    1bc4:	e004      	b.n	1bd0 <RFM_initialize+0xb0>
    1bc6:	23e4      	movs	r3, #228	; 0xe4
    1bc8:	e002      	b.n	1bd0 <RFM_initialize+0xb0>
    1bca:	236c      	movs	r3, #108	; 0x6c
    1bcc:	e000      	b.n	1bd0 <RFM_initialize+0xb0>
    1bce:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1bd0:	2210      	movs	r2, #16
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7353      	strb	r3, [r2, #13]
    1bd6:	2310      	movs	r3, #16
    1bd8:	18fb      	adds	r3, r7, r3
    1bda:	2208      	movs	r2, #8
    1bdc:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1bde:	1dfb      	adds	r3, r7, #7
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	2b1f      	cmp	r3, #31
    1be4:	d00d      	beq.n	1c02 <RFM_initialize+0xe2>
    1be6:	1dfb      	adds	r3, r7, #7
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	2b2b      	cmp	r3, #43	; 0x2b
    1bec:	d007      	beq.n	1bfe <RFM_initialize+0xde>
    1bee:	1dfb      	adds	r3, r7, #7
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	2b56      	cmp	r3, #86	; 0x56
    1bf4:	d101      	bne.n	1bfa <RFM_initialize+0xda>
    1bf6:	2300      	movs	r3, #0
    1bf8:	e004      	b.n	1c04 <RFM_initialize+0xe4>
    1bfa:	23c0      	movs	r3, #192	; 0xc0
    1bfc:	e002      	b.n	1c04 <RFM_initialize+0xe4>
    1bfe:	2340      	movs	r3, #64	; 0x40
    1c00:	e000      	b.n	1c04 <RFM_initialize+0xe4>
    1c02:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1c04:	2210      	movs	r2, #16
    1c06:	18ba      	adds	r2, r7, r2
    1c08:	73d3      	strb	r3, [r2, #15]
    1c0a:	2310      	movs	r3, #16
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	2209      	movs	r2, #9
    1c10:	741a      	strb	r2, [r3, #16]
    1c12:	2310      	movs	r3, #16
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	2200      	movs	r2, #0
    1c18:	745a      	strb	r2, [r3, #17]
    1c1a:	2310      	movs	r3, #16
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	2219      	movs	r2, #25
    1c20:	749a      	strb	r2, [r3, #18]
    1c22:	2310      	movs	r3, #16
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	2242      	movs	r2, #66	; 0x42
    1c28:	74da      	strb	r2, [r3, #19]
    1c2a:	2310      	movs	r3, #16
    1c2c:	18fb      	adds	r3, r7, r3
    1c2e:	2225      	movs	r2, #37	; 0x25
    1c30:	751a      	strb	r2, [r3, #20]
    1c32:	2310      	movs	r3, #16
    1c34:	18fb      	adds	r3, r7, r3
    1c36:	2240      	movs	r2, #64	; 0x40
    1c38:	755a      	strb	r2, [r3, #21]
    1c3a:	2310      	movs	r3, #16
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	2226      	movs	r2, #38	; 0x26
    1c40:	759a      	strb	r2, [r3, #22]
    1c42:	2310      	movs	r3, #16
    1c44:	18fb      	adds	r3, r7, r3
    1c46:	2207      	movs	r2, #7
    1c48:	75da      	strb	r2, [r3, #23]
    1c4a:	2310      	movs	r3, #16
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	2228      	movs	r2, #40	; 0x28
    1c50:	761a      	strb	r2, [r3, #24]
    1c52:	2310      	movs	r3, #16
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	2210      	movs	r2, #16
    1c58:	765a      	strb	r2, [r3, #25]
    1c5a:	2310      	movs	r3, #16
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	2229      	movs	r2, #41	; 0x29
    1c60:	769a      	strb	r2, [r3, #26]
    1c62:	2310      	movs	r3, #16
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	22dc      	movs	r2, #220	; 0xdc
    1c68:	76da      	strb	r2, [r3, #27]
    1c6a:	2310      	movs	r3, #16
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	222e      	movs	r2, #46	; 0x2e
    1c70:	771a      	strb	r2, [r3, #28]
    1c72:	2310      	movs	r3, #16
    1c74:	18fb      	adds	r3, r7, r3
    1c76:	2288      	movs	r2, #136	; 0x88
    1c78:	775a      	strb	r2, [r3, #29]
    1c7a:	2310      	movs	r3, #16
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	222f      	movs	r2, #47	; 0x2f
    1c80:	779a      	strb	r2, [r3, #30]
    1c82:	2310      	movs	r3, #16
    1c84:	18fb      	adds	r3, r7, r3
    1c86:	222d      	movs	r2, #45	; 0x2d
    1c88:	77da      	strb	r2, [r3, #31]
    1c8a:	2310      	movs	r3, #16
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	2220      	movs	r2, #32
    1c90:	2130      	movs	r1, #48	; 0x30
    1c92:	5499      	strb	r1, [r3, r2]
    1c94:	2310      	movs	r3, #16
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	1d7a      	adds	r2, r7, #5
    1c9a:	2121      	movs	r1, #33	; 0x21
    1c9c:	7812      	ldrb	r2, [r2, #0]
    1c9e:	545a      	strb	r2, [r3, r1]
    1ca0:	2310      	movs	r3, #16
    1ca2:	18fb      	adds	r3, r7, r3
    1ca4:	2222      	movs	r2, #34	; 0x22
    1ca6:	2137      	movs	r1, #55	; 0x37
    1ca8:	5499      	strb	r1, [r3, r2]
    1caa:	2310      	movs	r3, #16
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	2223      	movs	r2, #35	; 0x23
    1cb0:	2190      	movs	r1, #144	; 0x90
    1cb2:	5499      	strb	r1, [r3, r2]
    1cb4:	2310      	movs	r3, #16
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	2224      	movs	r2, #36	; 0x24
    1cba:	2138      	movs	r1, #56	; 0x38
    1cbc:	5499      	strb	r1, [r3, r2]
    1cbe:	2310      	movs	r3, #16
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	2225      	movs	r2, #37	; 0x25
    1cc4:	2142      	movs	r1, #66	; 0x42
    1cc6:	5499      	strb	r1, [r3, r2]
    1cc8:	2310      	movs	r3, #16
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	2226      	movs	r2, #38	; 0x26
    1cce:	213c      	movs	r1, #60	; 0x3c
    1cd0:	5499      	strb	r1, [r3, r2]
    1cd2:	2310      	movs	r3, #16
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	2227      	movs	r2, #39	; 0x27
    1cd8:	218f      	movs	r1, #143	; 0x8f
    1cda:	5499      	strb	r1, [r3, r2]
    1cdc:	2310      	movs	r3, #16
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	2228      	movs	r2, #40	; 0x28
    1ce2:	213d      	movs	r1, #61	; 0x3d
    1ce4:	5499      	strb	r1, [r3, r2]
    1ce6:	2310      	movs	r3, #16
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	2229      	movs	r2, #41	; 0x29
    1cec:	2112      	movs	r1, #18
    1cee:	5499      	strb	r1, [r3, r2]
    1cf0:	2310      	movs	r3, #16
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	222a      	movs	r2, #42	; 0x2a
    1cf6:	216f      	movs	r1, #111	; 0x6f
    1cf8:	5499      	strb	r1, [r3, r2]
    1cfa:	2310      	movs	r3, #16
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	222b      	movs	r2, #43	; 0x2b
    1d00:	2130      	movs	r1, #48	; 0x30
    1d02:	5499      	strb	r1, [r3, r2]
    1d04:	2310      	movs	r3, #16
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	222c      	movs	r2, #44	; 0x2c
    1d0a:	21ff      	movs	r1, #255	; 0xff
    1d0c:	5499      	strb	r1, [r3, r2]
    1d0e:	2310      	movs	r3, #16
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	222d      	movs	r2, #45	; 0x2d
    1d14:	2100      	movs	r1, #0
    1d16:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    1d18:	4b4b      	ldr	r3, [pc, #300]	; (1e48 <RFM_initialize+0x328>)
    1d1a:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    1d1c:	4b4b      	ldr	r3, [pc, #300]	; (1e4c <RFM_initialize+0x32c>)
    1d1e:	4798      	blx	r3
  configure_port_pins();
    1d20:	4b4b      	ldr	r3, [pc, #300]	; (1e50 <RFM_initialize+0x330>)
    1d22:	4798      	blx	r3
  configure_extint_channel();
    1d24:	4b4b      	ldr	r3, [pc, #300]	; (1e54 <RFM_initialize+0x334>)
    1d26:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    1d28:	4b4b      	ldr	r3, [pc, #300]	; (1e58 <RFM_initialize+0x338>)
    1d2a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    1d2c:	230f      	movs	r3, #15
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	2232      	movs	r2, #50	; 0x32
    1d32:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    1d34:	21aa      	movs	r1, #170	; 0xaa
    1d36:	202f      	movs	r0, #47	; 0x2f
    1d38:	4b48      	ldr	r3, [pc, #288]	; (1e5c <RFM_initialize+0x33c>)
    1d3a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    1d3c:	202f      	movs	r0, #47	; 0x2f
    1d3e:	4b48      	ldr	r3, [pc, #288]	; (1e60 <RFM_initialize+0x340>)
    1d40:	4798      	blx	r3
    1d42:	1e03      	subs	r3, r0, #0
    1d44:	2baa      	cmp	r3, #170	; 0xaa
    1d46:	d008      	beq.n	1d5a <RFM_initialize+0x23a>
    1d48:	4b46      	ldr	r3, [pc, #280]	; (1e64 <RFM_initialize+0x344>)
    1d4a:	4798      	blx	r3
    1d4c:	0002      	movs	r2, r0
    1d4e:	230f      	movs	r3, #15
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	b2db      	uxtb	r3, r3
    1d56:	429a      	cmp	r2, r3
    1d58:	d3ec      	bcc.n	1d34 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    1d5a:	4b3f      	ldr	r3, [pc, #252]	; (1e58 <RFM_initialize+0x338>)
    1d5c:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    1d5e:	2155      	movs	r1, #85	; 0x55
    1d60:	202f      	movs	r0, #47	; 0x2f
    1d62:	4b3e      	ldr	r3, [pc, #248]	; (1e5c <RFM_initialize+0x33c>)
    1d64:	4798      	blx	r3
    1d66:	202f      	movs	r0, #47	; 0x2f
    1d68:	4b3d      	ldr	r3, [pc, #244]	; (1e60 <RFM_initialize+0x340>)
    1d6a:	4798      	blx	r3
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	2b55      	cmp	r3, #85	; 0x55
    1d70:	d008      	beq.n	1d84 <RFM_initialize+0x264>
    1d72:	4b3c      	ldr	r3, [pc, #240]	; (1e64 <RFM_initialize+0x344>)
    1d74:	4798      	blx	r3
    1d76:	0002      	movs	r2, r0
    1d78:	230f      	movs	r3, #15
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	429a      	cmp	r2, r3
    1d82:	d3ec      	bcc.n	1d5e <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1d84:	233f      	movs	r3, #63	; 0x3f
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	2200      	movs	r2, #0
    1d8a:	701a      	strb	r2, [r3, #0]
    1d8c:	e019      	b.n	1dc2 <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    1d8e:	233f      	movs	r3, #63	; 0x3f
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	781a      	ldrb	r2, [r3, #0]
    1d94:	2310      	movs	r3, #16
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	5cd0      	ldrb	r0, [r2, r3]
    1d9c:	233f      	movs	r3, #63	; 0x3f
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	2210      	movs	r2, #16
    1da4:	18ba      	adds	r2, r7, r2
    1da6:	005b      	lsls	r3, r3, #1
    1da8:	18d3      	adds	r3, r2, r3
    1daa:	3301      	adds	r3, #1
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	0019      	movs	r1, r3
    1db0:	4b2a      	ldr	r3, [pc, #168]	; (1e5c <RFM_initialize+0x33c>)
    1db2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1db4:	233f      	movs	r3, #63	; 0x3f
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	781a      	ldrb	r2, [r3, #0]
    1dba:	233f      	movs	r3, #63	; 0x3f
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	3201      	adds	r2, #1
    1dc0:	701a      	strb	r2, [r3, #0]
    1dc2:	233f      	movs	r3, #63	; 0x3f
    1dc4:	18fb      	adds	r3, r7, r3
    1dc6:	781a      	ldrb	r2, [r3, #0]
    1dc8:	2310      	movs	r3, #16
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	0052      	lsls	r2, r2, #1
    1dce:	5cd3      	ldrb	r3, [r2, r3]
    1dd0:	2bff      	cmp	r3, #255	; 0xff
    1dd2:	d1dc      	bne.n	1d8e <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    1dd4:	2000      	movs	r0, #0
    1dd6:	4b24      	ldr	r3, [pc, #144]	; (1e68 <RFM_initialize+0x348>)
    1dd8:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    1dda:	4b24      	ldr	r3, [pc, #144]	; (1e6c <RFM_initialize+0x34c>)
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	b2db      	uxtb	r3, r3
    1de0:	0018      	movs	r0, r3
    1de2:	4b23      	ldr	r3, [pc, #140]	; (1e70 <RFM_initialize+0x350>)
    1de4:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    1de6:	2001      	movs	r0, #1
    1de8:	4b22      	ldr	r3, [pc, #136]	; (1e74 <RFM_initialize+0x354>)
    1dea:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    1dec:	4b1a      	ldr	r3, [pc, #104]	; (1e58 <RFM_initialize+0x338>)
    1dee:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    1df0:	46c0      	nop			; (mov r8, r8)
    1df2:	2027      	movs	r0, #39	; 0x27
    1df4:	4b1a      	ldr	r3, [pc, #104]	; (1e60 <RFM_initialize+0x340>)
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
    1dfa:	b25b      	sxtb	r3, r3
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	db08      	blt.n	1e12 <RFM_initialize+0x2f2>
    1e00:	4b18      	ldr	r3, [pc, #96]	; (1e64 <RFM_initialize+0x344>)
    1e02:	4798      	blx	r3
    1e04:	0002      	movs	r2, r0
    1e06:	230f      	movs	r3, #15
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	781b      	ldrb	r3, [r3, #0]
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	429a      	cmp	r2, r3
    1e10:	d3ef      	bcc.n	1df2 <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    1e12:	4b14      	ldr	r3, [pc, #80]	; (1e64 <RFM_initialize+0x344>)
    1e14:	4798      	blx	r3
    1e16:	0002      	movs	r2, r0
    1e18:	230f      	movs	r3, #15
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	b2db      	uxtb	r3, r3
    1e20:	429a      	cmp	r2, r3
    1e22:	d301      	bcc.n	1e28 <RFM_initialize+0x308>
    return false;
    1e24:	2300      	movs	r3, #0
    1e26:	e009      	b.n	1e3c <RFM_initialize+0x31c>
  _inISR = false;
    1e28:	4b13      	ldr	r3, [pc, #76]	; (1e78 <RFM_initialize+0x358>)
    1e2a:	2200      	movs	r2, #0
    1e2c:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    1e2e:	4b13      	ldr	r3, [pc, #76]	; (1e7c <RFM_initialize+0x35c>)
    1e30:	4798      	blx	r3

  _address = nodeID;
    1e32:	4b13      	ldr	r3, [pc, #76]	; (1e80 <RFM_initialize+0x360>)
    1e34:	1dba      	adds	r2, r7, #6
    1e36:	7812      	ldrb	r2, [r2, #0]
    1e38:	701a      	strb	r2, [r3, #0]
  return true;
    1e3a:	2301      	movs	r3, #1
}
    1e3c:	0018      	movs	r0, r3
    1e3e:	46bd      	mov	sp, r7
    1e40:	b011      	add	sp, #68	; 0x44
    1e42:	bd90      	pop	{r4, r7, pc}
    1e44:	00001aed 	.word	0x00001aed
    1e48:	00001771 	.word	0x00001771
    1e4c:	00001831 	.word	0x00001831
    1e50:	000016d5 	.word	0x000016d5
    1e54:	00001705 	.word	0x00001705
    1e58:	00001895 	.word	0x00001895
    1e5c:	000024c9 	.word	0x000024c9
    1e60:	00002461 	.word	0x00002461
    1e64:	000018bd 	.word	0x000018bd
    1e68:	0000236d 	.word	0x0000236d
    1e6c:	200002dc 	.word	0x200002dc
    1e70:	00001a69 	.word	0x00001a69
    1e74:	00001e85 	.word	0x00001e85
    1e78:	2000024d 	.word	0x2000024d
    1e7c:	00001745 	.word	0x00001745
    1e80:	2000024e 	.word	0x2000024e

00001e84 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b082      	sub	sp, #8
    1e88:	af00      	add	r7, sp, #0
    1e8a:	0002      	movs	r2, r0
    1e8c:	1dfb      	adds	r3, r7, #7
    1e8e:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    1e90:	1dfb      	adds	r3, r7, #7
    1e92:	781b      	ldrb	r3, [r3, #0]
    1e94:	b29a      	uxth	r2, r3
    1e96:	4b47      	ldr	r3, [pc, #284]	; (1fb4 <setMode+0x130>)
    1e98:	881b      	ldrh	r3, [r3, #0]
    1e9a:	b29b      	uxth	r3, r3
    1e9c:	429a      	cmp	r2, r3
    1e9e:	d100      	bne.n	1ea2 <setMode+0x1e>
    1ea0:	e081      	b.n	1fa6 <setMode+0x122>
    return;

  switch (newMode) {
    1ea2:	1dfb      	adds	r3, r7, #7
    1ea4:	781b      	ldrb	r3, [r3, #0]
    1ea6:	2b04      	cmp	r3, #4
    1ea8:	d900      	bls.n	1eac <setMode+0x28>
    1eaa:	e07e      	b.n	1faa <setMode+0x126>
    1eac:	009a      	lsls	r2, r3, #2
    1eae:	4b42      	ldr	r3, [pc, #264]	; (1fb8 <setMode+0x134>)
    1eb0:	18d3      	adds	r3, r2, r3
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    1eb6:	2001      	movs	r0, #1
    1eb8:	4b40      	ldr	r3, [pc, #256]	; (1fbc <setMode+0x138>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	b25b      	sxtb	r3, r3
    1ec0:	221c      	movs	r2, #28
    1ec2:	4393      	bics	r3, r2
    1ec4:	b25b      	sxtb	r3, r3
    1ec6:	220c      	movs	r2, #12
    1ec8:	4313      	orrs	r3, r2
    1eca:	b25b      	sxtb	r3, r3
    1ecc:	b2db      	uxtb	r3, r3
    1ece:	0019      	movs	r1, r3
    1ed0:	2001      	movs	r0, #1
    1ed2:	4b3b      	ldr	r3, [pc, #236]	; (1fc0 <setMode+0x13c>)
    1ed4:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    1ed6:	4b3b      	ldr	r3, [pc, #236]	; (1fc4 <setMode+0x140>)
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	b2db      	uxtb	r3, r3
    1edc:	2b00      	cmp	r3, #0
    1ede:	d04c      	beq.n	1f7a <setMode+0xf6>
    1ee0:	2001      	movs	r0, #1
    1ee2:	4b39      	ldr	r3, [pc, #228]	; (1fc8 <setMode+0x144>)
    1ee4:	4798      	blx	r3
      break;
    1ee6:	e048      	b.n	1f7a <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    1ee8:	2001      	movs	r0, #1
    1eea:	4b34      	ldr	r3, [pc, #208]	; (1fbc <setMode+0x138>)
    1eec:	4798      	blx	r3
    1eee:	0003      	movs	r3, r0
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	221c      	movs	r2, #28
    1ef4:	4393      	bics	r3, r2
    1ef6:	b25b      	sxtb	r3, r3
    1ef8:	2210      	movs	r2, #16
    1efa:	4313      	orrs	r3, r2
    1efc:	b25b      	sxtb	r3, r3
    1efe:	b2db      	uxtb	r3, r3
    1f00:	0019      	movs	r1, r3
    1f02:	2001      	movs	r0, #1
    1f04:	4b2e      	ldr	r3, [pc, #184]	; (1fc0 <setMode+0x13c>)
    1f06:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    1f08:	4b2e      	ldr	r3, [pc, #184]	; (1fc4 <setMode+0x140>)
    1f0a:	781b      	ldrb	r3, [r3, #0]
    1f0c:	b2db      	uxtb	r3, r3
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d035      	beq.n	1f7e <setMode+0xfa>
    1f12:	2000      	movs	r0, #0
    1f14:	4b2c      	ldr	r3, [pc, #176]	; (1fc8 <setMode+0x144>)
    1f16:	4798      	blx	r3
      break;
    1f18:	e031      	b.n	1f7e <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    1f1a:	2001      	movs	r0, #1
    1f1c:	4b27      	ldr	r3, [pc, #156]	; (1fbc <setMode+0x138>)
    1f1e:	4798      	blx	r3
    1f20:	0003      	movs	r3, r0
    1f22:	b25b      	sxtb	r3, r3
    1f24:	221c      	movs	r2, #28
    1f26:	4393      	bics	r3, r2
    1f28:	b25b      	sxtb	r3, r3
    1f2a:	2208      	movs	r2, #8
    1f2c:	4313      	orrs	r3, r2
    1f2e:	b25b      	sxtb	r3, r3
    1f30:	b2db      	uxtb	r3, r3
    1f32:	0019      	movs	r1, r3
    1f34:	2001      	movs	r0, #1
    1f36:	4b22      	ldr	r3, [pc, #136]	; (1fc0 <setMode+0x13c>)
    1f38:	4798      	blx	r3
      break;
    1f3a:	e021      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    1f3c:	2001      	movs	r0, #1
    1f3e:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <setMode+0x138>)
    1f40:	4798      	blx	r3
    1f42:	0003      	movs	r3, r0
    1f44:	b25b      	sxtb	r3, r3
    1f46:	221c      	movs	r2, #28
    1f48:	4393      	bics	r3, r2
    1f4a:	b25b      	sxtb	r3, r3
    1f4c:	2204      	movs	r2, #4
    1f4e:	4313      	orrs	r3, r2
    1f50:	b25b      	sxtb	r3, r3
    1f52:	b2db      	uxtb	r3, r3
    1f54:	0019      	movs	r1, r3
    1f56:	2001      	movs	r0, #1
    1f58:	4b19      	ldr	r3, [pc, #100]	; (1fc0 <setMode+0x13c>)
    1f5a:	4798      	blx	r3
      break;
    1f5c:	e010      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    1f5e:	2001      	movs	r0, #1
    1f60:	4b16      	ldr	r3, [pc, #88]	; (1fbc <setMode+0x138>)
    1f62:	4798      	blx	r3
    1f64:	0003      	movs	r3, r0
    1f66:	001a      	movs	r2, r3
    1f68:	231c      	movs	r3, #28
    1f6a:	439a      	bics	r2, r3
    1f6c:	0013      	movs	r3, r2
    1f6e:	b2db      	uxtb	r3, r3
    1f70:	0019      	movs	r1, r3
    1f72:	2001      	movs	r0, #1
    1f74:	4b12      	ldr	r3, [pc, #72]	; (1fc0 <setMode+0x13c>)
    1f76:	4798      	blx	r3
      break;
    1f78:	e002      	b.n	1f80 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	e000      	b.n	1f80 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    1f7e:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	4b0c      	ldr	r3, [pc, #48]	; (1fb4 <setMode+0x130>)
    1f84:	881b      	ldrh	r3, [r3, #0]
    1f86:	b29b      	uxth	r3, r3
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d106      	bne.n	1f9a <setMode+0x116>
    1f8c:	2027      	movs	r0, #39	; 0x27
    1f8e:	4b0b      	ldr	r3, [pc, #44]	; (1fbc <setMode+0x138>)
    1f90:	4798      	blx	r3
    1f92:	0003      	movs	r3, r0
    1f94:	b25b      	sxtb	r3, r3
    1f96:	2b00      	cmp	r3, #0
    1f98:	daf3      	bge.n	1f82 <setMode+0xfe>

  _mode = newMode;
    1f9a:	1dfb      	adds	r3, r7, #7
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	b29a      	uxth	r2, r3
    1fa0:	4b04      	ldr	r3, [pc, #16]	; (1fb4 <setMode+0x130>)
    1fa2:	801a      	strh	r2, [r3, #0]
    1fa4:	e002      	b.n	1fac <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	e000      	b.n	1fac <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    1faa:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	200002da 	.word	0x200002da
    1fb8:	00009140 	.word	0x00009140
    1fbc:	00002461 	.word	0x00002461
    1fc0:	000024c9 	.word	0x000024c9
    1fc4:	200002dc 	.word	0x200002dc
    1fc8:	00002579 	.word	0x00002579

00001fcc <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    1fd0:	4b0b      	ldr	r3, [pc, #44]	; (2000 <STACK_SIZE>)
    1fd2:	881b      	ldrh	r3, [r3, #0]
    1fd4:	b29b      	uxth	r3, r3
    1fd6:	2b03      	cmp	r3, #3
    1fd8:	d10e      	bne.n	1ff8 <canSend+0x2c>
    1fda:	4b0a      	ldr	r3, [pc, #40]	; (2004 <STACK_SIZE+0x4>)
    1fdc:	881b      	ldrh	r3, [r3, #0]
    1fde:	b29b      	uxth	r3, r3
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d109      	bne.n	1ff8 <canSend+0x2c>
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <STACK_SIZE+0x8>)
    1fe6:	4798      	blx	r3
    1fe8:	0003      	movs	r3, r0
    1fea:	335a      	adds	r3, #90	; 0x5a
    1fec:	da04      	bge.n	1ff8 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    1fee:	2001      	movs	r0, #1
    1ff0:	4b06      	ldr	r3, [pc, #24]	; (200c <STACK_SIZE+0xc>)
    1ff2:	4798      	blx	r3
    return true;
    1ff4:	2301      	movs	r3, #1
    1ff6:	e000      	b.n	1ffa <canSend+0x2e>
  }
  return false;
    1ff8:	2300      	movs	r3, #0
}
    1ffa:	0018      	movs	r0, r3
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}
    2000:	200002da 	.word	0x200002da
    2004:	200002d4 	.word	0x200002d4
    2008:	00002421 	.word	0x00002421
    200c:	00001e85 	.word	0x00001e85

00002010 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    2010:	b590      	push	{r4, r7, lr}
    2012:	b085      	sub	sp, #20
    2014:	af02      	add	r7, sp, #8
    2016:	0004      	movs	r4, r0
    2018:	6039      	str	r1, [r7, #0]
    201a:	0010      	movs	r0, r2
    201c:	0019      	movs	r1, r3
    201e:	1dfb      	adds	r3, r7, #7
    2020:	1c22      	adds	r2, r4, #0
    2022:	701a      	strb	r2, [r3, #0]
    2024:	1dbb      	adds	r3, r7, #6
    2026:	1c02      	adds	r2, r0, #0
    2028:	701a      	strb	r2, [r3, #0]
    202a:	1d7b      	adds	r3, r7, #5
    202c:	1c0a      	adds	r2, r1, #0
    202e:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    2030:	203d      	movs	r0, #61	; 0x3d
    2032:	4b17      	ldr	r3, [pc, #92]	; (2090 <RFM_send+0x80>)
    2034:	4798      	blx	r3
    2036:	0003      	movs	r3, r0
    2038:	001a      	movs	r2, r3
    203a:	2304      	movs	r3, #4
    203c:	4313      	orrs	r3, r2
    203e:	b2db      	uxtb	r3, r3
    2040:	0019      	movs	r1, r3
    2042:	203d      	movs	r0, #61	; 0x3d
    2044:	4b13      	ldr	r3, [pc, #76]	; (2094 <RFM_send+0x84>)
    2046:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <RFM_send+0x88>)
    204a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    204c:	e001      	b.n	2052 <RFM_send+0x42>
    204e:	4b13      	ldr	r3, [pc, #76]	; (209c <RFM_send+0x8c>)
    2050:	4798      	blx	r3
    2052:	4b13      	ldr	r3, [pc, #76]	; (20a0 <RFM_send+0x90>)
    2054:	4798      	blx	r3
    2056:	0003      	movs	r3, r0
    2058:	001a      	movs	r2, r3
    205a:	2301      	movs	r3, #1
    205c:	4053      	eors	r3, r2
    205e:	b2db      	uxtb	r3, r3
    2060:	2b00      	cmp	r3, #0
    2062:	d005      	beq.n	2070 <RFM_send+0x60>
    2064:	4b0f      	ldr	r3, [pc, #60]	; (20a4 <RFM_send+0x94>)
    2066:	4798      	blx	r3
    2068:	1e02      	subs	r2, r0, #0
    206a:	4b0f      	ldr	r3, [pc, #60]	; (20a8 <RFM_send+0x98>)
    206c:	429a      	cmp	r2, r3
    206e:	d9ee      	bls.n	204e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    2070:	1d7b      	adds	r3, r7, #5
    2072:	781c      	ldrb	r4, [r3, #0]
    2074:	1dbb      	adds	r3, r7, #6
    2076:	781a      	ldrb	r2, [r3, #0]
    2078:	6839      	ldr	r1, [r7, #0]
    207a:	1dfb      	adds	r3, r7, #7
    207c:	7818      	ldrb	r0, [r3, #0]
    207e:	2300      	movs	r3, #0
    2080:	9300      	str	r3, [sp, #0]
    2082:	0023      	movs	r3, r4
    2084:	4c09      	ldr	r4, [pc, #36]	; (20ac <RFM_send+0x9c>)
    2086:	47a0      	blx	r4
}
    2088:	46c0      	nop			; (mov r8, r8)
    208a:	46bd      	mov	sp, r7
    208c:	b003      	add	sp, #12
    208e:	bd90      	pop	{r4, r7, pc}
    2090:	00002461 	.word	0x00002461
    2094:	000024c9 	.word	0x000024c9
    2098:	00001895 	.word	0x00001895
    209c:	00002321 	.word	0x00002321
    20a0:	00001fcd 	.word	0x00001fcd
    20a4:	000018bd 	.word	0x000018bd
    20a8:	000003e7 	.word	0x000003e7
    20ac:	000018e5 	.word	0x000018e5

000020b0 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    20b6:	4b58      	ldr	r3, [pc, #352]	; (2218 <interruptHandler+0x168>)
    20b8:	881b      	ldrh	r3, [r3, #0]
    20ba:	b29b      	uxth	r3, r3
    20bc:	2b03      	cmp	r3, #3
    20be:	d000      	beq.n	20c2 <interruptHandler+0x12>
    20c0:	e0a1      	b.n	2206 <interruptHandler+0x156>
    20c2:	2028      	movs	r0, #40	; 0x28
    20c4:	4b55      	ldr	r3, [pc, #340]	; (221c <interruptHandler+0x16c>)
    20c6:	4798      	blx	r3
    20c8:	0003      	movs	r3, r0
    20ca:	001a      	movs	r2, r3
    20cc:	2304      	movs	r3, #4
    20ce:	4013      	ands	r3, r2
    20d0:	d100      	bne.n	20d4 <interruptHandler+0x24>
    20d2:	e098      	b.n	2206 <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    20d4:	2001      	movs	r0, #1
    20d6:	4b52      	ldr	r3, [pc, #328]	; (2220 <interruptHandler+0x170>)
    20d8:	4798      	blx	r3
    selectrf();
    20da:	4b52      	ldr	r3, [pc, #328]	; (2224 <interruptHandler+0x174>)
    20dc:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    20de:	4a52      	ldr	r2, [pc, #328]	; (2228 <interruptHandler+0x178>)
    20e0:	4b52      	ldr	r3, [pc, #328]	; (222c <interruptHandler+0x17c>)
    20e2:	2100      	movs	r1, #0
    20e4:	0018      	movs	r0, r3
    20e6:	4b52      	ldr	r3, [pc, #328]	; (2230 <interruptHandler+0x180>)
    20e8:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    20ea:	4a52      	ldr	r2, [pc, #328]	; (2234 <interruptHandler+0x184>)
    20ec:	4b4f      	ldr	r3, [pc, #316]	; (222c <interruptHandler+0x17c>)
    20ee:	2100      	movs	r1, #0
    20f0:	0018      	movs	r0, r3
    20f2:	4b4f      	ldr	r3, [pc, #316]	; (2230 <interruptHandler+0x180>)
    20f4:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    20f6:	4b4f      	ldr	r3, [pc, #316]	; (2234 <interruptHandler+0x184>)
    20f8:	881b      	ldrh	r3, [r3, #0]
    20fa:	b29b      	uxth	r3, r3
    20fc:	2b42      	cmp	r3, #66	; 0x42
    20fe:	d803      	bhi.n	2108 <interruptHandler+0x58>
    2100:	4b4c      	ldr	r3, [pc, #304]	; (2234 <interruptHandler+0x184>)
    2102:	881b      	ldrh	r3, [r3, #0]
    2104:	b29a      	uxth	r2, r3
    2106:	e000      	b.n	210a <interruptHandler+0x5a>
    2108:	2242      	movs	r2, #66	; 0x42
    210a:	4b4a      	ldr	r3, [pc, #296]	; (2234 <interruptHandler+0x184>)
    210c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    210e:	4a4a      	ldr	r2, [pc, #296]	; (2238 <interruptHandler+0x188>)
    2110:	4b46      	ldr	r3, [pc, #280]	; (222c <interruptHandler+0x17c>)
    2112:	2100      	movs	r1, #0
    2114:	0018      	movs	r0, r3
    2116:	4b46      	ldr	r3, [pc, #280]	; (2230 <interruptHandler+0x180>)
    2118:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    211a:	4b48      	ldr	r3, [pc, #288]	; (223c <interruptHandler+0x18c>)
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	b2db      	uxtb	r3, r3
    2120:	2201      	movs	r2, #1
    2122:	4053      	eors	r3, r2
    2124:	b2db      	uxtb	r3, r3
    2126:	2b00      	cmp	r3, #0
    2128:	d00d      	beq.n	2146 <interruptHandler+0x96>
    212a:	4b45      	ldr	r3, [pc, #276]	; (2240 <interruptHandler+0x190>)
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	b2db      	uxtb	r3, r3
    2130:	b29a      	uxth	r2, r3
    2132:	4b41      	ldr	r3, [pc, #260]	; (2238 <interruptHandler+0x188>)
    2134:	881b      	ldrh	r3, [r3, #0]
    2136:	b29b      	uxth	r3, r3
    2138:	429a      	cmp	r2, r3
    213a:	d004      	beq.n	2146 <interruptHandler+0x96>
    213c:	4b3e      	ldr	r3, [pc, #248]	; (2238 <interruptHandler+0x188>)
    213e:	881b      	ldrh	r3, [r3, #0]
    2140:	b29b      	uxth	r3, r3
    2142:	2bff      	cmp	r3, #255	; 0xff
    2144:	d104      	bne.n	2150 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    2146:	4b3b      	ldr	r3, [pc, #236]	; (2234 <interruptHandler+0x184>)
    2148:	881b      	ldrh	r3, [r3, #0]
    214a:	b29b      	uxth	r3, r3
    214c:	2b02      	cmp	r3, #2
    214e:	d807      	bhi.n	2160 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    2150:	4b38      	ldr	r3, [pc, #224]	; (2234 <interruptHandler+0x184>)
    2152:	2200      	movs	r2, #0
    2154:	801a      	strh	r2, [r3, #0]
      unselect();
    2156:	4b3b      	ldr	r3, [pc, #236]	; (2244 <interruptHandler+0x194>)
    2158:	4798      	blx	r3
      receiveBegin();
    215a:	4b3b      	ldr	r3, [pc, #236]	; (2248 <interruptHandler+0x198>)
    215c:	4798      	blx	r3
    215e:	e058      	b.n	2212 <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    2160:	4b34      	ldr	r3, [pc, #208]	; (2234 <interruptHandler+0x184>)
    2162:	881b      	ldrh	r3, [r3, #0]
    2164:	b29b      	uxth	r3, r3
    2166:	3b03      	subs	r3, #3
    2168:	b29a      	uxth	r2, r3
    216a:	4b38      	ldr	r3, [pc, #224]	; (224c <interruptHandler+0x19c>)
    216c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    216e:	4a38      	ldr	r2, [pc, #224]	; (2250 <interruptHandler+0x1a0>)
    2170:	4b2e      	ldr	r3, [pc, #184]	; (222c <interruptHandler+0x17c>)
    2172:	2100      	movs	r1, #0
    2174:	0018      	movs	r0, r3
    2176:	4b2e      	ldr	r3, [pc, #184]	; (2230 <interruptHandler+0x180>)
    2178:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    217a:	1dbb      	adds	r3, r7, #6
    217c:	2200      	movs	r2, #0
    217e:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    2180:	1dba      	adds	r2, r7, #6
    2182:	4b2a      	ldr	r3, [pc, #168]	; (222c <interruptHandler+0x17c>)
    2184:	2100      	movs	r1, #0
    2186:	0018      	movs	r0, r3
    2188:	4b29      	ldr	r3, [pc, #164]	; (2230 <interruptHandler+0x180>)
    218a:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    218c:	1dbb      	adds	r3, r7, #6
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	b29b      	uxth	r3, r3
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	4013      	ands	r3, r2
    2196:	b29a      	uxth	r2, r3
    2198:	4b2e      	ldr	r3, [pc, #184]	; (2254 <interruptHandler+0x1a4>)
    219a:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    219c:	1dbb      	adds	r3, r7, #6
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	b29b      	uxth	r3, r3
    21a2:	2240      	movs	r2, #64	; 0x40
    21a4:	4013      	ands	r3, r2
    21a6:	b29a      	uxth	r2, r3
    21a8:	4b2b      	ldr	r3, [pc, #172]	; (2258 <interruptHandler+0x1a8>)
    21aa:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21ac:	1dfb      	adds	r3, r7, #7
    21ae:	2200      	movs	r2, #0
    21b0:	701a      	strb	r2, [r3, #0]
    21b2:	e00e      	b.n	21d2 <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    21b4:	1dfb      	adds	r3, r7, #7
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	005a      	lsls	r2, r3, #1
    21ba:	4b28      	ldr	r3, [pc, #160]	; (225c <interruptHandler+0x1ac>)
    21bc:	18d2      	adds	r2, r2, r3
    21be:	4b1b      	ldr	r3, [pc, #108]	; (222c <interruptHandler+0x17c>)
    21c0:	2100      	movs	r1, #0
    21c2:	0018      	movs	r0, r3
    21c4:	4b1a      	ldr	r3, [pc, #104]	; (2230 <interruptHandler+0x180>)
    21c6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	781a      	ldrb	r2, [r3, #0]
    21cc:	1dfb      	adds	r3, r7, #7
    21ce:	3201      	adds	r2, #1
    21d0:	701a      	strb	r2, [r3, #0]
    21d2:	1dfb      	adds	r3, r7, #7
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	b29a      	uxth	r2, r3
    21d8:	4b1c      	ldr	r3, [pc, #112]	; (224c <interruptHandler+0x19c>)
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	b29b      	uxth	r3, r3
    21de:	429a      	cmp	r2, r3
    21e0:	d3e8      	bcc.n	21b4 <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    21e2:	4b1a      	ldr	r3, [pc, #104]	; (224c <interruptHandler+0x19c>)
    21e4:	881b      	ldrh	r3, [r3, #0]
    21e6:	b29b      	uxth	r3, r3
    21e8:	2b3c      	cmp	r3, #60	; 0x3c
    21ea:	d807      	bhi.n	21fc <interruptHandler+0x14c>
    21ec:	4b17      	ldr	r3, [pc, #92]	; (224c <interruptHandler+0x19c>)
    21ee:	881b      	ldrh	r3, [r3, #0]
    21f0:	b29b      	uxth	r3, r3
    21f2:	001a      	movs	r2, r3
    21f4:	4b19      	ldr	r3, [pc, #100]	; (225c <interruptHandler+0x1ac>)
    21f6:	0052      	lsls	r2, r2, #1
    21f8:	2100      	movs	r1, #0
    21fa:	52d1      	strh	r1, [r2, r3]
    unselect();
    21fc:	4b11      	ldr	r3, [pc, #68]	; (2244 <interruptHandler+0x194>)
    21fe:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    2200:	2003      	movs	r0, #3
    2202:	4b07      	ldr	r3, [pc, #28]	; (2220 <interruptHandler+0x170>)
    2204:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    2206:	4b16      	ldr	r3, [pc, #88]	; (2260 <interruptHandler+0x1b0>)
    2208:	4798      	blx	r3
    220a:	0003      	movs	r3, r0
    220c:	001a      	movs	r2, r3
    220e:	4b15      	ldr	r3, [pc, #84]	; (2264 <interruptHandler+0x1b4>)
    2210:	801a      	strh	r2, [r3, #0]
}
    2212:	46bd      	mov	sp, r7
    2214:	b002      	add	sp, #8
    2216:	bd80      	pop	{r7, pc}
    2218:	200002da 	.word	0x200002da
    221c:	00002461 	.word	0x00002461
    2220:	00001e85 	.word	0x00001e85
    2224:	00002529 	.word	0x00002529
    2228:	200000fe 	.word	0x200000fe
    222c:	200002e0 	.word	0x200002e0
    2230:	000011ad 	.word	0x000011ad
    2234:	200002d4 	.word	0x200002d4
    2238:	200002d8 	.word	0x200002d8
    223c:	20000254 	.word	0x20000254
    2240:	2000024e 	.word	0x2000024e
    2244:	0000254d 	.word	0x0000254d
    2248:	0000228d 	.word	0x0000228d
    224c:	20000252 	.word	0x20000252
    2250:	20000242 	.word	0x20000242
    2254:	20000250 	.word	0x20000250
    2258:	200002d6 	.word	0x200002d6
    225c:	20000258 	.word	0x20000258
    2260:	00002421 	.word	0x00002421
    2264:	200002ec 	.word	0x200002ec

00002268 <isr0>:

// internal function
void isr0()
{ 
    2268:	b580      	push	{r7, lr}
    226a:	af00      	add	r7, sp, #0
	_inISR = true; 
    226c:	4b05      	ldr	r3, [pc, #20]	; (2284 <isr0+0x1c>)
    226e:	2201      	movs	r2, #1
    2270:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    2272:	4b05      	ldr	r3, [pc, #20]	; (2288 <isr0+0x20>)
    2274:	4798      	blx	r3
	_inISR = false;
    2276:	4b03      	ldr	r3, [pc, #12]	; (2284 <isr0+0x1c>)
    2278:	2200      	movs	r2, #0
    227a:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    227c:	46c0      	nop			; (mov r8, r8)
    227e:	46bd      	mov	sp, r7
    2280:	bd80      	pop	{r7, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	2000024d 	.word	0x2000024d
    2288:	000020b1 	.word	0x000020b1

0000228c <receiveBegin>:

// internal function
void receiveBegin() {
    228c:	b580      	push	{r7, lr}
    228e:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    2290:	4b19      	ldr	r3, [pc, #100]	; (22f8 <receiveBegin+0x6c>)
    2292:	2200      	movs	r2, #0
    2294:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    2296:	4b19      	ldr	r3, [pc, #100]	; (22fc <receiveBegin+0x70>)
    2298:	2200      	movs	r2, #0
    229a:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    229c:	4b18      	ldr	r3, [pc, #96]	; (2300 <receiveBegin+0x74>)
    229e:	2200      	movs	r2, #0
    22a0:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    22a2:	4b18      	ldr	r3, [pc, #96]	; (2304 <receiveBegin+0x78>)
    22a4:	2200      	movs	r2, #0
    22a6:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    22a8:	4b17      	ldr	r3, [pc, #92]	; (2308 <receiveBegin+0x7c>)
    22aa:	2200      	movs	r2, #0
    22ac:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    22ae:	4b17      	ldr	r3, [pc, #92]	; (230c <receiveBegin+0x80>)
    22b0:	2200      	movs	r2, #0
    22b2:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    22b4:	4b16      	ldr	r3, [pc, #88]	; (2310 <receiveBegin+0x84>)
    22b6:	2200      	movs	r2, #0
    22b8:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    22ba:	2028      	movs	r0, #40	; 0x28
    22bc:	4b15      	ldr	r3, [pc, #84]	; (2314 <receiveBegin+0x88>)
    22be:	4798      	blx	r3
    22c0:	0003      	movs	r3, r0
    22c2:	001a      	movs	r2, r3
    22c4:	2304      	movs	r3, #4
    22c6:	4013      	ands	r3, r2
    22c8:	d00b      	beq.n	22e2 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    22ca:	203d      	movs	r0, #61	; 0x3d
    22cc:	4b11      	ldr	r3, [pc, #68]	; (2314 <receiveBegin+0x88>)
    22ce:	4798      	blx	r3
    22d0:	0003      	movs	r3, r0
    22d2:	001a      	movs	r2, r3
    22d4:	2304      	movs	r3, #4
    22d6:	4313      	orrs	r3, r2
    22d8:	b2db      	uxtb	r3, r3
    22da:	0019      	movs	r1, r3
    22dc:	203d      	movs	r0, #61	; 0x3d
    22de:	4b0e      	ldr	r3, [pc, #56]	; (2318 <receiveBegin+0x8c>)
    22e0:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    22e2:	2140      	movs	r1, #64	; 0x40
    22e4:	2025      	movs	r0, #37	; 0x25
    22e6:	4b0c      	ldr	r3, [pc, #48]	; (2318 <receiveBegin+0x8c>)
    22e8:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    22ea:	2003      	movs	r0, #3
    22ec:	4b0b      	ldr	r3, [pc, #44]	; (231c <receiveBegin+0x90>)
    22ee:	4798      	blx	r3
}
    22f0:	46c0      	nop			; (mov r8, r8)
    22f2:	46bd      	mov	sp, r7
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	20000252 	.word	0x20000252
    22fc:	20000242 	.word	0x20000242
    2300:	200002d8 	.word	0x200002d8
    2304:	200002d4 	.word	0x200002d4
    2308:	200002d6 	.word	0x200002d6
    230c:	20000250 	.word	0x20000250
    2310:	200002ec 	.word	0x200002ec
    2314:	00002461 	.word	0x00002461
    2318:	000024c9 	.word	0x000024c9
    231c:	00001e85 	.word	0x00001e85

00002320 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    2320:	b580      	push	{r7, lr}
    2322:	af00      	add	r7, sp, #0
  //system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    2324:	4b0d      	ldr	r3, [pc, #52]	; (235c <RFM_receiveDone+0x3c>)
    2326:	881b      	ldrh	r3, [r3, #0]
    2328:	b29b      	uxth	r3, r3
    232a:	2b03      	cmp	r3, #3
    232c:	d109      	bne.n	2342 <RFM_receiveDone+0x22>
    232e:	4b0c      	ldr	r3, [pc, #48]	; (2360 <RFM_receiveDone+0x40>)
    2330:	881b      	ldrh	r3, [r3, #0]
    2332:	b29b      	uxth	r3, r3
    2334:	2b00      	cmp	r3, #0
    2336:	d004      	beq.n	2342 <RFM_receiveDone+0x22>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    2338:	2001      	movs	r0, #1
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <RFM_receiveDone+0x44>)
    233c:	4798      	blx	r3
    return true;
    233e:	2301      	movs	r3, #1
    2340:	e009      	b.n	2356 <RFM_receiveDone+0x36>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    2342:	4b06      	ldr	r3, [pc, #24]	; (235c <RFM_receiveDone+0x3c>)
    2344:	881b      	ldrh	r3, [r3, #0]
    2346:	b29b      	uxth	r3, r3
    2348:	2b03      	cmp	r3, #3
    234a:	d101      	bne.n	2350 <RFM_receiveDone+0x30>
  {
    //system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    return false;
    234c:	2300      	movs	r3, #0
    234e:	e002      	b.n	2356 <RFM_receiveDone+0x36>
  }
  receiveBegin();
    2350:	4b05      	ldr	r3, [pc, #20]	; (2368 <RFM_receiveDone+0x48>)
    2352:	4798      	blx	r3
  return false;
    2354:	2300      	movs	r3, #0
}
    2356:	0018      	movs	r0, r3
    2358:	46bd      	mov	sp, r7
    235a:	bd80      	pop	{r7, pc}
    235c:	200002da 	.word	0x200002da
    2360:	200002d4 	.word	0x200002d4
    2364:	00001e85 	.word	0x00001e85
    2368:	0000228d 	.word	0x0000228d

0000236c <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    2374:	2001      	movs	r0, #1
    2376:	4b22      	ldr	r3, [pc, #136]	; (2400 <RFM_encrypt+0x94>)
    2378:	4798      	blx	r3
  if (key != 0)
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	2b00      	cmp	r3, #0
    237e:	d026      	beq.n	23ce <RFM_encrypt+0x62>
  {
    selectrf();
    2380:	4b20      	ldr	r3, [pc, #128]	; (2404 <RFM_encrypt+0x98>)
    2382:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    2384:	4a20      	ldr	r2, [pc, #128]	; (2408 <RFM_encrypt+0x9c>)
    2386:	4b21      	ldr	r3, [pc, #132]	; (240c <RFM_encrypt+0xa0>)
    2388:	21be      	movs	r1, #190	; 0xbe
    238a:	0018      	movs	r0, r3
    238c:	4b20      	ldr	r3, [pc, #128]	; (2410 <RFM_encrypt+0xa4>)
    238e:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    2390:	230f      	movs	r3, #15
    2392:	18fb      	adds	r3, r7, r3
    2394:	2200      	movs	r2, #0
    2396:	701a      	strb	r2, [r3, #0]
    2398:	e012      	b.n	23c0 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    239a:	230f      	movs	r3, #15
    239c:	18fb      	adds	r3, r7, r3
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	687a      	ldr	r2, [r7, #4]
    23a2:	18d3      	adds	r3, r2, r3
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	b299      	uxth	r1, r3
    23a8:	4a17      	ldr	r2, [pc, #92]	; (2408 <RFM_encrypt+0x9c>)
    23aa:	4b18      	ldr	r3, [pc, #96]	; (240c <RFM_encrypt+0xa0>)
    23ac:	0018      	movs	r0, r3
    23ae:	4b18      	ldr	r3, [pc, #96]	; (2410 <RFM_encrypt+0xa4>)
    23b0:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    23b2:	230f      	movs	r3, #15
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	781a      	ldrb	r2, [r3, #0]
    23b8:	230f      	movs	r3, #15
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	3201      	adds	r2, #1
    23be:	701a      	strb	r2, [r3, #0]
    23c0:	230f      	movs	r3, #15
    23c2:	18fb      	adds	r3, r7, r3
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	2b0f      	cmp	r3, #15
    23c8:	d9e7      	bls.n	239a <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    23ca:	4b12      	ldr	r3, [pc, #72]	; (2414 <RFM_encrypt+0xa8>)
    23cc:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    23ce:	203d      	movs	r0, #61	; 0x3d
    23d0:	4b11      	ldr	r3, [pc, #68]	; (2418 <RFM_encrypt+0xac>)
    23d2:	4798      	blx	r3
    23d4:	0003      	movs	r3, r0
    23d6:	b25b      	sxtb	r3, r3
    23d8:	2201      	movs	r2, #1
    23da:	4393      	bics	r3, r2
    23dc:	b25a      	sxtb	r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	1e59      	subs	r1, r3, #1
    23e2:	418b      	sbcs	r3, r1
    23e4:	b2db      	uxtb	r3, r3
    23e6:	b25b      	sxtb	r3, r3
    23e8:	4313      	orrs	r3, r2
    23ea:	b25b      	sxtb	r3, r3
    23ec:	b2db      	uxtb	r3, r3
    23ee:	0019      	movs	r1, r3
    23f0:	203d      	movs	r0, #61	; 0x3d
    23f2:	4b0a      	ldr	r3, [pc, #40]	; (241c <RFM_encrypt+0xb0>)
    23f4:	4798      	blx	r3
}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	46bd      	mov	sp, r7
    23fa:	b004      	add	sp, #16
    23fc:	bd80      	pop	{r7, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	00001e85 	.word	0x00001e85
    2404:	00002529 	.word	0x00002529
    2408:	200000fe 	.word	0x200000fe
    240c:	200002e0 	.word	0x200002e0
    2410:	000011ad 	.word	0x000011ad
    2414:	0000254d 	.word	0x0000254d
    2418:	00002461 	.word	0x00002461
    241c:	000024c9 	.word	0x000024c9

00002420 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    2426:	1dbb      	adds	r3, r7, #6
    2428:	2200      	movs	r2, #0
    242a:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    242c:	2024      	movs	r0, #36	; 0x24
    242e:	4b0b      	ldr	r3, [pc, #44]	; (245c <readRSSI+0x3c>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	b29b      	uxth	r3, r3
    2436:	425b      	negs	r3, r3
    2438:	b29b      	uxth	r3, r3
    243a:	b21a      	sxth	r2, r3
    243c:	1dbb      	adds	r3, r7, #6
    243e:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    2440:	1dbb      	adds	r3, r7, #6
    2442:	881b      	ldrh	r3, [r3, #0]
    2444:	b21b      	sxth	r3, r3
    2446:	105b      	asrs	r3, r3, #1
    2448:	b21a      	sxth	r2, r3
    244a:	1dbb      	adds	r3, r7, #6
    244c:	801a      	strh	r2, [r3, #0]
  return rssi;
    244e:	1dbb      	adds	r3, r7, #6
    2450:	881b      	ldrh	r3, [r3, #0]
    2452:	b21b      	sxth	r3, r3
}
    2454:	0018      	movs	r0, r3
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}
    245c:	00002461 	.word	0x00002461

00002460 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    2460:	b580      	push	{r7, lr}
    2462:	b084      	sub	sp, #16
    2464:	af00      	add	r7, sp, #0
    2466:	0002      	movs	r2, r0
    2468:	1dbb      	adds	r3, r7, #6
    246a:	801a      	strh	r2, [r3, #0]
  selectrf();
    246c:	4b11      	ldr	r3, [pc, #68]	; (24b4 <readReg+0x54>)
    246e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    2470:	1dbb      	adds	r3, r7, #6
    2472:	881b      	ldrh	r3, [r3, #0]
    2474:	b29b      	uxth	r3, r3
    2476:	227f      	movs	r2, #127	; 0x7f
    2478:	4013      	ands	r3, r2
    247a:	b299      	uxth	r1, r3
    247c:	4a0e      	ldr	r2, [pc, #56]	; (24b8 <readReg+0x58>)
    247e:	4b0f      	ldr	r3, [pc, #60]	; (24bc <readReg+0x5c>)
    2480:	0018      	movs	r0, r3
    2482:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <readReg+0x60>)
    2484:	4798      	blx	r3
  volatile uint16_t regval = 0;
    2486:	230e      	movs	r3, #14
    2488:	18fb      	adds	r3, r7, r3
    248a:	2200      	movs	r2, #0
    248c:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    248e:	230e      	movs	r3, #14
    2490:	18fa      	adds	r2, r7, r3
    2492:	4b0a      	ldr	r3, [pc, #40]	; (24bc <readReg+0x5c>)
    2494:	2100      	movs	r1, #0
    2496:	0018      	movs	r0, r3
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <readReg+0x60>)
    249a:	4798      	blx	r3
  unselect();
    249c:	4b09      	ldr	r3, [pc, #36]	; (24c4 <readReg+0x64>)
    249e:	4798      	blx	r3
  return (uint8_t)regval;
    24a0:	230e      	movs	r3, #14
    24a2:	18fb      	adds	r3, r7, r3
    24a4:	881b      	ldrh	r3, [r3, #0]
    24a6:	b29b      	uxth	r3, r3
    24a8:	b2db      	uxtb	r3, r3
}
    24aa:	0018      	movs	r0, r3
    24ac:	46bd      	mov	sp, r7
    24ae:	b004      	add	sp, #16
    24b0:	bd80      	pop	{r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	00002529 	.word	0x00002529
    24b8:	200000fe 	.word	0x200000fe
    24bc:	200002e0 	.word	0x200002e0
    24c0:	000011ad 	.word	0x000011ad
    24c4:	0000254d 	.word	0x0000254d

000024c8 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	0002      	movs	r2, r0
    24d0:	1dfb      	adds	r3, r7, #7
    24d2:	701a      	strb	r2, [r3, #0]
    24d4:	1dbb      	adds	r3, r7, #6
    24d6:	1c0a      	adds	r2, r1, #0
    24d8:	701a      	strb	r2, [r3, #0]
  selectrf();
    24da:	4b0e      	ldr	r3, [pc, #56]	; (2514 <writeReg+0x4c>)
    24dc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    24de:	1dfb      	adds	r3, r7, #7
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2280      	movs	r2, #128	; 0x80
    24e4:	4252      	negs	r2, r2
    24e6:	4313      	orrs	r3, r2
    24e8:	b2db      	uxtb	r3, r3
    24ea:	b299      	uxth	r1, r3
    24ec:	4a0a      	ldr	r2, [pc, #40]	; (2518 <writeReg+0x50>)
    24ee:	4b0b      	ldr	r3, [pc, #44]	; (251c <writeReg+0x54>)
    24f0:	0018      	movs	r0, r3
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <writeReg+0x58>)
    24f4:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    24f6:	1dbb      	adds	r3, r7, #6
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	b299      	uxth	r1, r3
    24fc:	4a06      	ldr	r2, [pc, #24]	; (2518 <writeReg+0x50>)
    24fe:	4b07      	ldr	r3, [pc, #28]	; (251c <writeReg+0x54>)
    2500:	0018      	movs	r0, r3
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <writeReg+0x58>)
    2504:	4798      	blx	r3
  unselect();
    2506:	4b07      	ldr	r3, [pc, #28]	; (2524 <writeReg+0x5c>)
    2508:	4798      	blx	r3
}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	46bd      	mov	sp, r7
    250e:	b002      	add	sp, #8
    2510:	bd80      	pop	{r7, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	00002529 	.word	0x00002529
    2518:	200000fe 	.word	0x200000fe
    251c:	200002e0 	.word	0x200002e0
    2520:	000011ad 	.word	0x000011ad
    2524:	0000254d 	.word	0x0000254d

00002528 <selectrf>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
    2528:	b580      	push	{r7, lr}
    252a:	af00      	add	r7, sp, #0

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    252c:	4904      	ldr	r1, [pc, #16]	; (2540 <selectrf+0x18>)
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <selectrf+0x1c>)
    2530:	2201      	movs	r2, #1
    2532:	0018      	movs	r0, r3
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <selectrf+0x20>)
    2536:	4798      	blx	r3
}
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	46bd      	mov	sp, r7
    253c:	bd80      	pop	{r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	200002f0 	.word	0x200002f0
    2544:	200002e0 	.word	0x200002e0
    2548:	000012e9 	.word	0x000012e9

0000254c <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    254c:	b580      	push	{r7, lr}
    254e:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    2550:	4905      	ldr	r1, [pc, #20]	; (2568 <unselect+0x1c>)
    2552:	4b06      	ldr	r3, [pc, #24]	; (256c <unselect+0x20>)
    2554:	2200      	movs	r2, #0
    2556:	0018      	movs	r0, r3
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <unselect+0x24>)
    255a:	4798      	blx	r3
  maybeInterrupts();
    255c:	4b05      	ldr	r3, [pc, #20]	; (2574 <unselect+0x28>)
    255e:	4798      	blx	r3
}
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46bd      	mov	sp, r7
    2564:	bd80      	pop	{r7, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	200002f0 	.word	0x200002f0
    256c:	200002e0 	.word	0x200002e0
    2570:	000012e9 	.word	0x000012e9
    2574:	000025bd 	.word	0x000025bd

00002578 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    2578:	b580      	push	{r7, lr}
    257a:	b082      	sub	sp, #8
    257c:	af00      	add	r7, sp, #0
    257e:	0002      	movs	r2, r0
    2580:	1dfb      	adds	r3, r7, #7
    2582:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    2584:	1dfb      	adds	r3, r7, #7
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2b00      	cmp	r3, #0
    258a:	d001      	beq.n	2590 <setHighPowerRegs+0x18>
    258c:	235d      	movs	r3, #93	; 0x5d
    258e:	e000      	b.n	2592 <setHighPowerRegs+0x1a>
    2590:	2355      	movs	r3, #85	; 0x55
    2592:	0019      	movs	r1, r3
    2594:	205a      	movs	r0, #90	; 0x5a
    2596:	4b08      	ldr	r3, [pc, #32]	; (25b8 <setHighPowerRegs+0x40>)
    2598:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    259a:	1dfb      	adds	r3, r7, #7
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b00      	cmp	r3, #0
    25a0:	d001      	beq.n	25a6 <setHighPowerRegs+0x2e>
    25a2:	237c      	movs	r3, #124	; 0x7c
    25a4:	e000      	b.n	25a8 <setHighPowerRegs+0x30>
    25a6:	2370      	movs	r3, #112	; 0x70
    25a8:	0019      	movs	r1, r3
    25aa:	205c      	movs	r0, #92	; 0x5c
    25ac:	4b02      	ldr	r3, [pc, #8]	; (25b8 <setHighPowerRegs+0x40>)
    25ae:	4798      	blx	r3
}
    25b0:	46c0      	nop			; (mov r8, r8)
    25b2:	46bd      	mov	sp, r7
    25b4:	b002      	add	sp, #8
    25b6:	bd80      	pop	{r7, pc}
    25b8:	000024c9 	.word	0x000024c9

000025bc <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    25bc:	b580      	push	{r7, lr}
    25be:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  //if (!_inISR) 
	  //system_interrupt_enable_global(); //interrupts(); // CHANGE //
    25c0:	46c0      	nop			; (mov r8, r8)
    25c2:	46bd      	mov	sp, r7
    25c4:	bd80      	pop	{r7, pc}
    25c6:	46c0      	nop			; (mov r8, r8)

000025c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	0002      	movs	r2, r0
    25d0:	1dfb      	adds	r3, r7, #7
    25d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25d4:	230f      	movs	r3, #15
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	1dfa      	adds	r2, r7, #7
    25da:	7812      	ldrb	r2, [r2, #0]
    25dc:	09d2      	lsrs	r2, r2, #7
    25de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25e0:	230e      	movs	r3, #14
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	1dfa      	adds	r2, r7, #7
    25e6:	7812      	ldrb	r2, [r2, #0]
    25e8:	0952      	lsrs	r2, r2, #5
    25ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25ec:	4b0d      	ldr	r3, [pc, #52]	; (2624 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    25f0:	230f      	movs	r3, #15
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	781b      	ldrb	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d10f      	bne.n	261a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25fa:	230f      	movs	r3, #15
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	009b      	lsls	r3, r3, #2
    2602:	2210      	movs	r2, #16
    2604:	4694      	mov	ip, r2
    2606:	44bc      	add	ip, r7
    2608:	4463      	add	r3, ip
    260a:	3b08      	subs	r3, #8
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	230e      	movs	r3, #14
    2610:	18fb      	adds	r3, r7, r3
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	01db      	lsls	r3, r3, #7
    2616:	18d3      	adds	r3, r2, r3
    2618:	e000      	b.n	261c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    261a:	2300      	movs	r3, #0
	}
}
    261c:	0018      	movs	r0, r3
    261e:	46bd      	mov	sp, r7
    2620:	b004      	add	sp, #16
    2622:	bd80      	pop	{r7, pc}
    2624:	41004400 	.word	0x41004400

00002628 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	0002      	movs	r2, r0
    2630:	1dfb      	adds	r3, r7, #7
    2632:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2634:	1dfb      	adds	r3, r7, #7
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	0018      	movs	r0, r3
    263a:	4b03      	ldr	r3, [pc, #12]	; (2648 <port_get_group_from_gpio_pin+0x20>)
    263c:	4798      	blx	r3
    263e:	0003      	movs	r3, r0
}
    2640:	0018      	movs	r0, r3
    2642:	46bd      	mov	sp, r7
    2644:	b002      	add	sp, #8
    2646:	bd80      	pop	{r7, pc}
    2648:	000025c9 	.word	0x000025c9

0000264c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    264c:	b580      	push	{r7, lr}
    264e:	b084      	sub	sp, #16
    2650:	af00      	add	r7, sp, #0
    2652:	0002      	movs	r2, r0
    2654:	1dfb      	adds	r3, r7, #7
    2656:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2658:	1dfb      	adds	r3, r7, #7
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	0018      	movs	r0, r3
    265e:	4b0b      	ldr	r3, [pc, #44]	; (268c <port_pin_get_input_level+0x40>)
    2660:	4798      	blx	r3
    2662:	0003      	movs	r3, r0
    2664:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2666:	1dfb      	adds	r3, r7, #7
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	221f      	movs	r2, #31
    266c:	4013      	ands	r3, r2
    266e:	2201      	movs	r2, #1
    2670:	409a      	lsls	r2, r3
    2672:	0013      	movs	r3, r2
    2674:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2676:	68fb      	ldr	r3, [r7, #12]
    2678:	6a1b      	ldr	r3, [r3, #32]
    267a:	68ba      	ldr	r2, [r7, #8]
    267c:	4013      	ands	r3, r2
    267e:	1e5a      	subs	r2, r3, #1
    2680:	4193      	sbcs	r3, r2
    2682:	b2db      	uxtb	r3, r3
}
    2684:	0018      	movs	r0, r3
    2686:	46bd      	mov	sp, r7
    2688:	b004      	add	sp, #16
    268a:	bd80      	pop	{r7, pc}
    268c:	00002629 	.word	0x00002629

00002690 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2690:	b580      	push	{r7, lr}
    2692:	b084      	sub	sp, #16
    2694:	af00      	add	r7, sp, #0
    2696:	0002      	movs	r2, r0
    2698:	1dfb      	adds	r3, r7, #7
    269a:	701a      	strb	r2, [r3, #0]
    269c:	1dbb      	adds	r3, r7, #6
    269e:	1c0a      	adds	r2, r1, #0
    26a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    26a2:	1dfb      	adds	r3, r7, #7
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	0018      	movs	r0, r3
    26a8:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <port_pin_set_output_level+0x50>)
    26aa:	4798      	blx	r3
    26ac:	0003      	movs	r3, r0
    26ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    26b0:	1dfb      	adds	r3, r7, #7
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	221f      	movs	r2, #31
    26b6:	4013      	ands	r3, r2
    26b8:	2201      	movs	r2, #1
    26ba:	409a      	lsls	r2, r3
    26bc:	0013      	movs	r3, r2
    26be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    26c0:	1dbb      	adds	r3, r7, #6
    26c2:	781b      	ldrb	r3, [r3, #0]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d003      	beq.n	26d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	68ba      	ldr	r2, [r7, #8]
    26cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    26ce:	e002      	b.n	26d6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	68ba      	ldr	r2, [r7, #8]
    26d4:	615a      	str	r2, [r3, #20]
	}
}
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	46bd      	mov	sp, r7
    26da:	b004      	add	sp, #16
    26dc:	bd80      	pop	{r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	00002629 	.word	0x00002629

000026e4 <configure_radio>:
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA15, &config_port_pin);
}
//configure the RFM69 module
void configure_radio(void) {
    26e4:	b580      	push	{r7, lr}
    26e6:	af00      	add	r7, sp, #0
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    26e8:	2200      	movs	r2, #0
    26ea:	2102      	movs	r1, #2
    26ec:	205b      	movs	r0, #91	; 0x5b
    26ee:	4b06      	ldr	r3, [pc, #24]	; (2708 <configure_radio+0x24>)
    26f0:	4798      	blx	r3
	RFM_setHighPower(true);
    26f2:	2001      	movs	r0, #1
    26f4:	4b05      	ldr	r3, [pc, #20]	; (270c <configure_radio+0x28>)
    26f6:	4798      	blx	r3
		
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
    26f8:	4b05      	ldr	r3, [pc, #20]	; (2710 <configure_radio+0x2c>)
    26fa:	0018      	movs	r0, r3
    26fc:	4b05      	ldr	r3, [pc, #20]	; (2714 <configure_radio+0x30>)
    26fe:	4798      	blx	r3
}
    2700:	46c0      	nop			; (mov r8, r8)
    2702:	46bd      	mov	sp, r7
    2704:	bd80      	pop	{r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	00001b21 	.word	0x00001b21
    270c:	00001a69 	.word	0x00001a69
    2710:	00009154 	.word	0x00009154
    2714:	0000236d 	.word	0x0000236d

00002718 <ui_init>:
	LED_On(LED_0_PIN);
}


void ui_init(void)
{
    2718:	b580      	push	{r7, lr}
    271a:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
    271c:	2101      	movs	r1, #1
    271e:	2011      	movs	r0, #17
    2720:	4b04      	ldr	r3, [pc, #16]	; (2734 <ui_init+0x1c>)
    2722:	4798      	blx	r3
	
	// Initialize the RFM69HCW:
	configure_radio();
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <ui_init+0x20>)
    2726:	4798      	blx	r3
	configure_port_pins();
    2728:	4b04      	ldr	r3, [pc, #16]	; (273c <ui_init+0x24>)
    272a:	4798      	blx	r3
}
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	46bd      	mov	sp, r7
    2730:	bd80      	pop	{r7, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00002691 	.word	0x00002691
    2738:	000026e5 	.word	0x000026e5
    273c:	000016d5 	.word	0x000016d5

00002740 <ui_powerdown>:

void ui_powerdown(void)
{
    2740:	b580      	push	{r7, lr}
    2742:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
    2744:	2101      	movs	r1, #1
    2746:	2011      	movs	r0, #17
    2748:	4b02      	ldr	r3, [pc, #8]	; (2754 <ui_powerdown+0x14>)
    274a:	4798      	blx	r3
}
    274c:	46c0      	nop			; (mov r8, r8)
    274e:	46bd      	mov	sp, r7
    2750:	bd80      	pop	{r7, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	00002691 	.word	0x00002691

00002758 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    2758:	b580      	push	{r7, lr}
    275a:	af00      	add	r7, sp, #0
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    275c:	2100      	movs	r1, #0
    275e:	200f      	movs	r0, #15
    2760:	4b02      	ldr	r3, [pc, #8]	; (276c <ui_wakeup_enable+0x14>)
    2762:	4798      	blx	r3
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	bd80      	pop	{r7, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	0000411d 	.word	0x0000411d

00002770 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    2770:	b580      	push	{r7, lr}
    2772:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2774:	2100      	movs	r1, #0
    2776:	200f      	movs	r0, #15
    2778:	4b02      	ldr	r3, [pc, #8]	; (2784 <ui_wakeup_disable+0x14>)
    277a:	4798      	blx	r3
}
    277c:	46c0      	nop			; (mov r8, r8)
    277e:	46bd      	mov	sp, r7
    2780:	bd80      	pop	{r7, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	00004165 	.word	0x00004165

00002788 <ui_wakeup>:

void ui_wakeup(void)
{
    2788:	b580      	push	{r7, lr}
    278a:	af00      	add	r7, sp, #0
	LED_On(LED_0_PIN);
    278c:	2100      	movs	r1, #0
    278e:	2011      	movs	r0, #17
    2790:	4b02      	ldr	r3, [pc, #8]	; (279c <ui_wakeup+0x14>)
    2792:	4798      	blx	r3
}
    2794:	46c0      	nop			; (mov r8, r8)
    2796:	46bd      	mov	sp, r7
    2798:	bd80      	pop	{r7, pc}
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	00002691 	.word	0x00002691

000027a0 <ui_process>:

void ui_process(uint16_t framenumber)
{
    27a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a2:	b08b      	sub	sp, #44	; 0x2c
    27a4:	af04      	add	r7, sp, #16
    27a6:	0002      	movs	r2, r0
    27a8:	1dbb      	adds	r3, r7, #6
    27aa:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	static uint32_t cameraTimeOut = 0;
	static bool calibration = false;
	static bool calibrate_button = 0;
	calibrate_button = port_pin_get_input_level(PIN_PA15);
    27ac:	200f      	movs	r0, #15
    27ae:	4bdc      	ldr	r3, [pc, #880]	; (2b20 <ui_process+0x380>)
    27b0:	4798      	blx	r3
    27b2:	0003      	movs	r3, r0
    27b4:	001a      	movs	r2, r3
    27b6:	4bdb      	ldr	r3, [pc, #876]	; (2b24 <ui_process+0x384>)
    27b8:	701a      	strb	r2, [r3, #0]
	
	cameraTimeOut = millis();
    27ba:	4bdb      	ldr	r3, [pc, #876]	; (2b28 <ui_process+0x388>)
    27bc:	4798      	blx	r3
    27be:	0002      	movs	r2, r0
    27c0:	4bda      	ldr	r3, [pc, #872]	; (2b2c <ui_process+0x38c>)
    27c2:	601a      	str	r2, [r3, #0]

	if ((framenumber % 1000) == 0) {
    27c4:	1dbb      	adds	r3, r7, #6
    27c6:	8818      	ldrh	r0, [r3, #0]
    27c8:	4bd9      	ldr	r3, [pc, #868]	; (2b30 <ui_process+0x390>)
    27ca:	22fa      	movs	r2, #250	; 0xfa
    27cc:	0091      	lsls	r1, r2, #2
    27ce:	4798      	blx	r3
    27d0:	000b      	movs	r3, r1
    27d2:	b29b      	uxth	r3, r3
    27d4:	2b00      	cmp	r3, #0
    27d6:	d103      	bne.n	27e0 <ui_process+0x40>
		LED_On(LED_0_PIN);
    27d8:	2100      	movs	r1, #0
    27da:	2011      	movs	r0, #17
    27dc:	4bd5      	ldr	r3, [pc, #852]	; (2b34 <ui_process+0x394>)
    27de:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
    27e0:	1dbb      	adds	r3, r7, #6
    27e2:	8818      	ldrh	r0, [r3, #0]
    27e4:	4bd2      	ldr	r3, [pc, #840]	; (2b30 <ui_process+0x390>)
    27e6:	22fa      	movs	r2, #250	; 0xfa
    27e8:	0091      	lsls	r1, r2, #2
    27ea:	4798      	blx	r3
    27ec:	000b      	movs	r3, r1
    27ee:	b29a      	uxth	r2, r3
    27f0:	23fa      	movs	r3, #250	; 0xfa
    27f2:	005b      	lsls	r3, r3, #1
    27f4:	429a      	cmp	r2, r3
    27f6:	d103      	bne.n	2800 <ui_process+0x60>
		LED_Off(LED_0_PIN);
    27f8:	2101      	movs	r1, #1
    27fa:	2011      	movs	r0, #17
    27fc:	4bcd      	ldr	r3, [pc, #820]	; (2b34 <ui_process+0x394>)
    27fe:	4798      	blx	r3
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    2800:	4bcd      	ldr	r3, [pc, #820]	; (2b38 <ui_process+0x398>)
    2802:	781b      	ldrb	r3, [r3, #0]
    2804:	3301      	adds	r3, #1
    2806:	b2da      	uxtb	r2, r3
    2808:	4bcb      	ldr	r3, [pc, #812]	; (2b38 <ui_process+0x398>)
    280a:	701a      	strb	r2, [r3, #0]
	if (cpt_sof < 5) {
    280c:	4bca      	ldr	r3, [pc, #808]	; (2b38 <ui_process+0x398>)
    280e:	781b      	ldrb	r3, [r3, #0]
    2810:	2b04      	cmp	r3, #4
    2812:	d800      	bhi.n	2816 <ui_process+0x76>
    2814:	e245      	b.n	2ca2 <ui_process+0x502>
		return;
	}
	cpt_sof = 0;
    2816:	4bc8      	ldr	r3, [pc, #800]	; (2b38 <ui_process+0x398>)
    2818:	2200      	movs	r2, #0
    281a:	701a      	strb	r2, [r3, #0]
	static bool right = false;
	
	static uint8_t button_info = 0x00; //order is: up down left right left_click right_click middle_click laser_enabled

	// this will receive the mouse location from the camera module
	if (RFM_receiveDone()) {
    281c:	4bc7      	ldr	r3, [pc, #796]	; (2b3c <ui_process+0x39c>)
    281e:	4798      	blx	r3
    2820:	1e03      	subs	r3, r0, #0
    2822:	d100      	bne.n	2826 <ui_process+0x86>
    2824:	e1e8      	b.n	2bf8 <ui_process+0x458>
		//info received from camera module (mouse movement)
		if (RFM_SENDERID == CAMERA_MODULE_NODE_ID) {
    2826:	4bc6      	ldr	r3, [pc, #792]	; (2b40 <ui_process+0x3a0>)
    2828:	881b      	ldrh	r3, [r3, #0]
    282a:	b29b      	uxth	r3, r3
    282c:	2b01      	cmp	r3, #1
    282e:	d000      	beq.n	2832 <ui_process+0x92>
    2830:	e154      	b.n	2adc <ui_process+0x33c>
			cameraTimeOut = millis(); //reset the timeout when receiving packet from camera
    2832:	4bbd      	ldr	r3, [pc, #756]	; (2b28 <ui_process+0x388>)
    2834:	4798      	blx	r3
    2836:	0002      	movs	r2, r0
    2838:	4bbc      	ldr	r3, [pc, #752]	; (2b2c <ui_process+0x38c>)
    283a:	601a      	str	r2, [r3, #0]
			
			if (calibrate_button) // set the system into calibration mode when button is pressed on dongle
    283c:	4bb9      	ldr	r3, [pc, #740]	; (2b24 <ui_process+0x384>)
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	2b00      	cmp	r3, #0
    2842:	d003      	beq.n	284c <ui_process+0xac>
				calibration = true;
    2844:	4bbf      	ldr	r3, [pc, #764]	; (2b44 <ui_process+0x3a4>)
    2846:	2201      	movs	r2, #1
    2848:	701a      	strb	r2, [r3, #0]
    284a:	e007      	b.n	285c <ui_process+0xbc>
			else if (RFM_DATA[0] == 'N') // set the system to regular operation mode when camera sends a 'N' packet
    284c:	4bbe      	ldr	r3, [pc, #760]	; (2b48 <ui_process+0x3a8>)
    284e:	881b      	ldrh	r3, [r3, #0]
    2850:	b29b      	uxth	r3, r3
    2852:	2b4e      	cmp	r3, #78	; 0x4e
    2854:	d102      	bne.n	285c <ui_process+0xbc>
				calibration = false;
    2856:	4bbb      	ldr	r3, [pc, #748]	; (2b44 <ui_process+0x3a4>)
    2858:	2200      	movs	r2, #0
    285a:	701a      	strb	r2, [r3, #0]
			
			lx = x;
    285c:	4bbb      	ldr	r3, [pc, #748]	; (2b4c <ui_process+0x3ac>)
    285e:	2200      	movs	r2, #0
    2860:	5e9a      	ldrsh	r2, [r3, r2]
    2862:	4bbb      	ldr	r3, [pc, #748]	; (2b50 <ui_process+0x3b0>)
    2864:	801a      	strh	r2, [r3, #0]
			ly = y;
    2866:	4bbb      	ldr	r3, [pc, #748]	; (2b54 <ui_process+0x3b4>)
    2868:	2200      	movs	r2, #0
    286a:	5e9a      	ldrsh	r2, [r3, r2]
    286c:	4bba      	ldr	r3, [pc, #744]	; (2b58 <ui_process+0x3b8>)
    286e:	801a      	strh	r2, [r3, #0]
			xCount = 0;
    2870:	4bba      	ldr	r3, [pc, #744]	; (2b5c <ui_process+0x3bc>)
    2872:	2200      	movs	r2, #0
    2874:	601a      	str	r2, [r3, #0]
			yCount = 0;
    2876:	4bba      	ldr	r3, [pc, #744]	; (2b60 <ui_process+0x3c0>)
    2878:	2200      	movs	r2, #0
    287a:	601a      	str	r2, [r3, #0]

			for (int i = 0; i < RFM_DATALEN; i++) {
    287c:	2300      	movs	r3, #0
    287e:	617b      	str	r3, [r7, #20]
    2880:	e074      	b.n	296c <ui_process+0x1cc>
				//x LSB 00<data>	x MSB 01<data>
				//y LSB 10<data>	y MSB 11<data>
				switch (RFM_DATA[i] >> 6) {
    2882:	4bb1      	ldr	r3, [pc, #708]	; (2b48 <ui_process+0x3a8>)
    2884:	697a      	ldr	r2, [r7, #20]
    2886:	0052      	lsls	r2, r2, #1
    2888:	5ad3      	ldrh	r3, [r2, r3]
    288a:	b29b      	uxth	r3, r3
    288c:	099b      	lsrs	r3, r3, #6
    288e:	b29b      	uxth	r3, r3
    2890:	2b01      	cmp	r3, #1
    2892:	d01d      	beq.n	28d0 <ui_process+0x130>
    2894:	dc02      	bgt.n	289c <ui_process+0xfc>
    2896:	2b00      	cmp	r3, #0
    2898:	d005      	beq.n	28a6 <ui_process+0x106>
    289a:	e064      	b.n	2966 <ui_process+0x1c6>
    289c:	2b02      	cmp	r3, #2
    289e:	d032      	beq.n	2906 <ui_process+0x166>
    28a0:	2b03      	cmp	r3, #3
    28a2:	d045      	beq.n	2930 <ui_process+0x190>
    28a4:	e05f      	b.n	2966 <ui_process+0x1c6>
					case 0: //x LSB
						xCount += 2;
    28a6:	4bad      	ldr	r3, [pc, #692]	; (2b5c <ui_process+0x3bc>)
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	1c9a      	adds	r2, r3, #2
    28ac:	4bab      	ldr	r3, [pc, #684]	; (2b5c <ui_process+0x3bc>)
    28ae:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    28b0:	4ba5      	ldr	r3, [pc, #660]	; (2b48 <ui_process+0x3a8>)
    28b2:	697a      	ldr	r2, [r7, #20]
    28b4:	0052      	lsls	r2, r2, #1
    28b6:	5ad3      	ldrh	r3, [r2, r3]
    28b8:	b29b      	uxth	r3, r3
    28ba:	001a      	movs	r2, r3
    28bc:	233f      	movs	r3, #63	; 0x3f
    28be:	401a      	ands	r2, r3
    28c0:	4ba8      	ldr	r3, [pc, #672]	; (2b64 <ui_process+0x3c4>)
    28c2:	601a      	str	r2, [r3, #0]
						x = temp;
    28c4:	4ba7      	ldr	r3, [pc, #668]	; (2b64 <ui_process+0x3c4>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	b21a      	sxth	r2, r3
    28ca:	4ba0      	ldr	r3, [pc, #640]	; (2b4c <ui_process+0x3ac>)
    28cc:	801a      	strh	r2, [r3, #0]
						break;
    28ce:	e04a      	b.n	2966 <ui_process+0x1c6>
				
					case 1: //x MSB
						xCount += 3;
    28d0:	4ba2      	ldr	r3, [pc, #648]	; (2b5c <ui_process+0x3bc>)
    28d2:	681b      	ldr	r3, [r3, #0]
    28d4:	1cda      	adds	r2, r3, #3
    28d6:	4ba1      	ldr	r3, [pc, #644]	; (2b5c <ui_process+0x3bc>)
    28d8:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    28da:	4b9b      	ldr	r3, [pc, #620]	; (2b48 <ui_process+0x3a8>)
    28dc:	697a      	ldr	r2, [r7, #20]
    28de:	0052      	lsls	r2, r2, #1
    28e0:	5ad3      	ldrh	r3, [r2, r3]
    28e2:	b29b      	uxth	r3, r3
    28e4:	001a      	movs	r2, r3
    28e6:	233f      	movs	r3, #63	; 0x3f
    28e8:	401a      	ands	r2, r3
    28ea:	4b9e      	ldr	r3, [pc, #632]	; (2b64 <ui_process+0x3c4>)
    28ec:	601a      	str	r2, [r3, #0]
						x = x | (temp << 6);
    28ee:	4b9d      	ldr	r3, [pc, #628]	; (2b64 <ui_process+0x3c4>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	019b      	lsls	r3, r3, #6
    28f4:	b21a      	sxth	r2, r3
    28f6:	4b95      	ldr	r3, [pc, #596]	; (2b4c <ui_process+0x3ac>)
    28f8:	2100      	movs	r1, #0
    28fa:	5e5b      	ldrsh	r3, [r3, r1]
    28fc:	4313      	orrs	r3, r2
    28fe:	b21a      	sxth	r2, r3
    2900:	4b92      	ldr	r3, [pc, #584]	; (2b4c <ui_process+0x3ac>)
    2902:	801a      	strh	r2, [r3, #0]
						break;
    2904:	e02f      	b.n	2966 <ui_process+0x1c6>
				
					case 2: //y LSB
						yCount += 2;
    2906:	4b96      	ldr	r3, [pc, #600]	; (2b60 <ui_process+0x3c0>)
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	1c9a      	adds	r2, r3, #2
    290c:	4b94      	ldr	r3, [pc, #592]	; (2b60 <ui_process+0x3c0>)
    290e:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    2910:	4b8d      	ldr	r3, [pc, #564]	; (2b48 <ui_process+0x3a8>)
    2912:	697a      	ldr	r2, [r7, #20]
    2914:	0052      	lsls	r2, r2, #1
    2916:	5ad3      	ldrh	r3, [r2, r3]
    2918:	b29b      	uxth	r3, r3
    291a:	001a      	movs	r2, r3
    291c:	233f      	movs	r3, #63	; 0x3f
    291e:	401a      	ands	r2, r3
    2920:	4b90      	ldr	r3, [pc, #576]	; (2b64 <ui_process+0x3c4>)
    2922:	601a      	str	r2, [r3, #0]
						y = temp;
    2924:	4b8f      	ldr	r3, [pc, #572]	; (2b64 <ui_process+0x3c4>)
    2926:	681b      	ldr	r3, [r3, #0]
    2928:	b21a      	sxth	r2, r3
    292a:	4b8a      	ldr	r3, [pc, #552]	; (2b54 <ui_process+0x3b4>)
    292c:	801a      	strh	r2, [r3, #0]
						break;
    292e:	e01a      	b.n	2966 <ui_process+0x1c6>
				
					case 3: //y MSB
						yCount += 3;
    2930:	4b8b      	ldr	r3, [pc, #556]	; (2b60 <ui_process+0x3c0>)
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	1cda      	adds	r2, r3, #3
    2936:	4b8a      	ldr	r3, [pc, #552]	; (2b60 <ui_process+0x3c0>)
    2938:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    293a:	4b83      	ldr	r3, [pc, #524]	; (2b48 <ui_process+0x3a8>)
    293c:	697a      	ldr	r2, [r7, #20]
    293e:	0052      	lsls	r2, r2, #1
    2940:	5ad3      	ldrh	r3, [r2, r3]
    2942:	b29b      	uxth	r3, r3
    2944:	001a      	movs	r2, r3
    2946:	233f      	movs	r3, #63	; 0x3f
    2948:	401a      	ands	r2, r3
    294a:	4b86      	ldr	r3, [pc, #536]	; (2b64 <ui_process+0x3c4>)
    294c:	601a      	str	r2, [r3, #0]
						y = y | (temp << 6);
    294e:	4b85      	ldr	r3, [pc, #532]	; (2b64 <ui_process+0x3c4>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	019b      	lsls	r3, r3, #6
    2954:	b21a      	sxth	r2, r3
    2956:	4b7f      	ldr	r3, [pc, #508]	; (2b54 <ui_process+0x3b4>)
    2958:	2100      	movs	r1, #0
    295a:	5e5b      	ldrsh	r3, [r3, r1]
    295c:	4313      	orrs	r3, r2
    295e:	b21a      	sxth	r2, r3
    2960:	4b7c      	ldr	r3, [pc, #496]	; (2b54 <ui_process+0x3b4>)
    2962:	801a      	strh	r2, [r3, #0]
						break;
    2964:	46c0      	nop			; (mov r8, r8)
			lx = x;
			ly = y;
			xCount = 0;
			yCount = 0;

			for (int i = 0; i < RFM_DATALEN; i++) {
    2966:	697b      	ldr	r3, [r7, #20]
    2968:	3301      	adds	r3, #1
    296a:	617b      	str	r3, [r7, #20]
    296c:	4b7e      	ldr	r3, [pc, #504]	; (2b68 <ui_process+0x3c8>)
    296e:	881b      	ldrh	r3, [r3, #0]
    2970:	b29b      	uxth	r3, r3
    2972:	1e1a      	subs	r2, r3, #0
    2974:	697b      	ldr	r3, [r7, #20]
    2976:	429a      	cmp	r2, r3
    2978:	dd00      	ble.n	297c <ui_process+0x1dc>
    297a:	e782      	b.n	2882 <ui_process+0xe2>
						y = y | (temp << 6);
						break;
				}
			}

			if(xCount != 5 || yCount != 5)
    297c:	4b77      	ldr	r3, [pc, #476]	; (2b5c <ui_process+0x3bc>)
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	2b05      	cmp	r3, #5
    2982:	d103      	bne.n	298c <ui_process+0x1ec>
    2984:	4b76      	ldr	r3, [pc, #472]	; (2b60 <ui_process+0x3c0>)
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	2b05      	cmp	r3, #5
    298a:	d00a      	beq.n	29a2 <ui_process+0x202>
			{
				x = lx;
    298c:	4b70      	ldr	r3, [pc, #448]	; (2b50 <ui_process+0x3b0>)
    298e:	2200      	movs	r2, #0
    2990:	5e9a      	ldrsh	r2, [r3, r2]
    2992:	4b6e      	ldr	r3, [pc, #440]	; (2b4c <ui_process+0x3ac>)
    2994:	801a      	strh	r2, [r3, #0]
				y = ly;
    2996:	4b70      	ldr	r3, [pc, #448]	; (2b58 <ui_process+0x3b8>)
    2998:	2200      	movs	r2, #0
    299a:	5e9a      	ldrsh	r2, [r3, r2]
    299c:	4b6d      	ldr	r3, [pc, #436]	; (2b54 <ui_process+0x3b4>)
    299e:	801a      	strh	r2, [r3, #0]
    29a0:	e075      	b.n	2a8e <ui_process+0x2ee>
			}
			else
			{
				Xtotal -= xVals[0];
    29a2:	4b72      	ldr	r3, [pc, #456]	; (2b6c <ui_process+0x3cc>)
    29a4:	681a      	ldr	r2, [r3, #0]
    29a6:	4b72      	ldr	r3, [pc, #456]	; (2b70 <ui_process+0x3d0>)
    29a8:	681b      	ldr	r3, [r3, #0]
    29aa:	1ad2      	subs	r2, r2, r3
    29ac:	4b6f      	ldr	r3, [pc, #444]	; (2b6c <ui_process+0x3cc>)
    29ae:	601a      	str	r2, [r3, #0]
				Ytotal -= yVals[0];
    29b0:	4b70      	ldr	r3, [pc, #448]	; (2b74 <ui_process+0x3d4>)
    29b2:	681a      	ldr	r2, [r3, #0]
    29b4:	4b70      	ldr	r3, [pc, #448]	; (2b78 <ui_process+0x3d8>)
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	1ad2      	subs	r2, r2, r3
    29ba:	4b6e      	ldr	r3, [pc, #440]	; (2b74 <ui_process+0x3d4>)
    29bc:	601a      	str	r2, [r3, #0]
				
				for(int i = 0; i < 4; i++)
    29be:	2300      	movs	r3, #0
    29c0:	613b      	str	r3, [r7, #16]
    29c2:	e014      	b.n	29ee <ui_process+0x24e>
				{
					yVals[i] = yVals[i + 1];
    29c4:	693b      	ldr	r3, [r7, #16]
    29c6:	1c5a      	adds	r2, r3, #1
    29c8:	4b6b      	ldr	r3, [pc, #428]	; (2b78 <ui_process+0x3d8>)
    29ca:	0092      	lsls	r2, r2, #2
    29cc:	58d1      	ldr	r1, [r2, r3]
    29ce:	4b6a      	ldr	r3, [pc, #424]	; (2b78 <ui_process+0x3d8>)
    29d0:	693a      	ldr	r2, [r7, #16]
    29d2:	0092      	lsls	r2, r2, #2
    29d4:	50d1      	str	r1, [r2, r3]
					xVals[i] = xVals[i + 1];
    29d6:	693b      	ldr	r3, [r7, #16]
    29d8:	1c5a      	adds	r2, r3, #1
    29da:	4b65      	ldr	r3, [pc, #404]	; (2b70 <ui_process+0x3d0>)
    29dc:	0092      	lsls	r2, r2, #2
    29de:	58d1      	ldr	r1, [r2, r3]
    29e0:	4b63      	ldr	r3, [pc, #396]	; (2b70 <ui_process+0x3d0>)
    29e2:	693a      	ldr	r2, [r7, #16]
    29e4:	0092      	lsls	r2, r2, #2
    29e6:	50d1      	str	r1, [r2, r3]
			else
			{
				Xtotal -= xVals[0];
				Ytotal -= yVals[0];
				
				for(int i = 0; i < 4; i++)
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	3301      	adds	r3, #1
    29ec:	613b      	str	r3, [r7, #16]
    29ee:	693b      	ldr	r3, [r7, #16]
    29f0:	2b03      	cmp	r3, #3
    29f2:	dde7      	ble.n	29c4 <ui_process+0x224>
				{
					yVals[i] = yVals[i + 1];
					xVals[i] = xVals[i + 1];
				}
				
				Xtotal += x;
    29f4:	4b55      	ldr	r3, [pc, #340]	; (2b4c <ui_process+0x3ac>)
    29f6:	2200      	movs	r2, #0
    29f8:	5e9b      	ldrsh	r3, [r3, r2]
    29fa:	001a      	movs	r2, r3
    29fc:	4b5b      	ldr	r3, [pc, #364]	; (2b6c <ui_process+0x3cc>)
    29fe:	681b      	ldr	r3, [r3, #0]
    2a00:	18d2      	adds	r2, r2, r3
    2a02:	4b5a      	ldr	r3, [pc, #360]	; (2b6c <ui_process+0x3cc>)
    2a04:	601a      	str	r2, [r3, #0]
				Ytotal += y;
    2a06:	4b53      	ldr	r3, [pc, #332]	; (2b54 <ui_process+0x3b4>)
    2a08:	2200      	movs	r2, #0
    2a0a:	5e9b      	ldrsh	r3, [r3, r2]
    2a0c:	001a      	movs	r2, r3
    2a0e:	4b59      	ldr	r3, [pc, #356]	; (2b74 <ui_process+0x3d4>)
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	18d2      	adds	r2, r2, r3
    2a14:	4b57      	ldr	r3, [pc, #348]	; (2b74 <ui_process+0x3d4>)
    2a16:	601a      	str	r2, [r3, #0]

				yVals[4] = y;
    2a18:	4b4e      	ldr	r3, [pc, #312]	; (2b54 <ui_process+0x3b4>)
    2a1a:	2200      	movs	r2, #0
    2a1c:	5e9b      	ldrsh	r3, [r3, r2]
    2a1e:	001a      	movs	r2, r3
    2a20:	4b55      	ldr	r3, [pc, #340]	; (2b78 <ui_process+0x3d8>)
    2a22:	611a      	str	r2, [r3, #16]
				xVals[4] = x;
    2a24:	4b49      	ldr	r3, [pc, #292]	; (2b4c <ui_process+0x3ac>)
    2a26:	2200      	movs	r2, #0
    2a28:	5e9b      	ldrsh	r3, [r3, r2]
    2a2a:	001a      	movs	r2, r3
    2a2c:	4b50      	ldr	r3, [pc, #320]	; (2b70 <ui_process+0x3d0>)
    2a2e:	611a      	str	r2, [r3, #16]
				
				x = Xtotal/5;
    2a30:	4b4e      	ldr	r3, [pc, #312]	; (2b6c <ui_process+0x3cc>)
    2a32:	681a      	ldr	r2, [r3, #0]
    2a34:	4b51      	ldr	r3, [pc, #324]	; (2b7c <ui_process+0x3dc>)
    2a36:	2105      	movs	r1, #5
    2a38:	0010      	movs	r0, r2
    2a3a:	4798      	blx	r3
    2a3c:	0003      	movs	r3, r0
    2a3e:	b21a      	sxth	r2, r3
    2a40:	4b42      	ldr	r3, [pc, #264]	; (2b4c <ui_process+0x3ac>)
    2a42:	801a      	strh	r2, [r3, #0]
				y = Ytotal/5;	
    2a44:	4b4b      	ldr	r3, [pc, #300]	; (2b74 <ui_process+0x3d4>)
    2a46:	681a      	ldr	r2, [r3, #0]
    2a48:	4b4c      	ldr	r3, [pc, #304]	; (2b7c <ui_process+0x3dc>)
    2a4a:	2105      	movs	r1, #5
    2a4c:	0010      	movs	r0, r2
    2a4e:	4798      	blx	r3
    2a50:	0003      	movs	r3, r0
    2a52:	b21a      	sxth	r2, r3
    2a54:	4b3f      	ldr	r3, [pc, #252]	; (2b54 <ui_process+0x3b4>)
    2a56:	801a      	strh	r2, [r3, #0]

				x = x*(0x7FFF/640);
    2a58:	4b3c      	ldr	r3, [pc, #240]	; (2b4c <ui_process+0x3ac>)
    2a5a:	2200      	movs	r2, #0
    2a5c:	5e9b      	ldrsh	r3, [r3, r2]
    2a5e:	b29b      	uxth	r3, r3
    2a60:	1c1a      	adds	r2, r3, #0
    2a62:	1c13      	adds	r3, r2, #0
    2a64:	18db      	adds	r3, r3, r3
    2a66:	189b      	adds	r3, r3, r2
    2a68:	1c1a      	adds	r2, r3, #0
    2a6a:	0111      	lsls	r1, r2, #4
    2a6c:	1c1a      	adds	r2, r3, #0
    2a6e:	1c0b      	adds	r3, r1, #0
    2a70:	18d3      	adds	r3, r2, r3
    2a72:	b29b      	uxth	r3, r3
    2a74:	b21a      	sxth	r2, r3
    2a76:	4b35      	ldr	r3, [pc, #212]	; (2b4c <ui_process+0x3ac>)
    2a78:	801a      	strh	r2, [r3, #0]
				y = y*(0x7FFF/480);
    2a7a:	4b36      	ldr	r3, [pc, #216]	; (2b54 <ui_process+0x3b4>)
    2a7c:	2200      	movs	r2, #0
    2a7e:	5e9b      	ldrsh	r3, [r3, r2]
    2a80:	b29b      	uxth	r3, r3
    2a82:	2244      	movs	r2, #68	; 0x44
    2a84:	4353      	muls	r3, r2
    2a86:	b29b      	uxth	r3, r3
    2a88:	b21a      	sxth	r2, r3
    2a8a:	4b32      	ldr	r3, [pc, #200]	; (2b54 <ui_process+0x3b4>)
    2a8c:	801a      	strh	r2, [r3, #0]
			}
			
			if (calibration) {
    2a8e:	4b2d      	ldr	r3, [pc, #180]	; (2b44 <ui_process+0x3a4>)
    2a90:	781b      	ldrb	r3, [r3, #0]
    2a92:	2b00      	cmp	r3, #0
    2a94:	d00b      	beq.n	2aae <ui_process+0x30e>
				// request a new frame from camera module
				radio_sendbuffer[0] = 'C';
    2a96:	4b3a      	ldr	r3, [pc, #232]	; (2b80 <ui_process+0x3e0>)
    2a98:	2243      	movs	r2, #67	; 0x43
    2a9a:	701a      	strb	r2, [r3, #0]
				RFM_send(CAMERA_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false);
    2a9c:	4b39      	ldr	r3, [pc, #228]	; (2b84 <ui_process+0x3e4>)
    2a9e:	681b      	ldr	r3, [r3, #0]
    2aa0:	b2da      	uxtb	r2, r3
    2aa2:	4937      	ldr	r1, [pc, #220]	; (2b80 <ui_process+0x3e0>)
    2aa4:	2300      	movs	r3, #0
    2aa6:	2001      	movs	r0, #1
    2aa8:	4c37      	ldr	r4, [pc, #220]	; (2b88 <ui_process+0x3e8>)
    2aaa:	47a0      	blx	r4
    2aac:	e0a4      	b.n	2bf8 <ui_process+0x458>
			}
			else {
				// request a new frame from camera module
				radio_sendbuffer[0] = 'R';
    2aae:	4b34      	ldr	r3, [pc, #208]	; (2b80 <ui_process+0x3e0>)
    2ab0:	2252      	movs	r2, #82	; 0x52
    2ab2:	701a      	strb	r2, [r3, #0]
				RFM_send(CAMERA_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false);
    2ab4:	4b33      	ldr	r3, [pc, #204]	; (2b84 <ui_process+0x3e4>)
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	b2da      	uxtb	r2, r3
    2aba:	4931      	ldr	r1, [pc, #196]	; (2b80 <ui_process+0x3e0>)
    2abc:	2300      	movs	r3, #0
    2abe:	2001      	movs	r0, #1
    2ac0:	4c31      	ldr	r4, [pc, #196]	; (2b88 <ui_process+0x3e8>)
    2ac2:	47a0      	blx	r4
				
				// request info from laser module
				radio_sendbuffer[0] = 'B'; //B is arbitrary. Y will set LEDs to color show. N will set it to white.
    2ac4:	4b2e      	ldr	r3, [pc, #184]	; (2b80 <ui_process+0x3e0>)
    2ac6:	2242      	movs	r2, #66	; 0x42
    2ac8:	701a      	strb	r2, [r3, #0]
				RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
    2aca:	4b2e      	ldr	r3, [pc, #184]	; (2b84 <ui_process+0x3e4>)
    2acc:	681b      	ldr	r3, [r3, #0]
    2ace:	b2da      	uxtb	r2, r3
    2ad0:	492b      	ldr	r1, [pc, #172]	; (2b80 <ui_process+0x3e0>)
    2ad2:	2300      	movs	r3, #0
    2ad4:	2003      	movs	r0, #3
    2ad6:	4c2c      	ldr	r4, [pc, #176]	; (2b88 <ui_process+0x3e8>)
    2ad8:	47a0      	blx	r4
    2ada:	e08d      	b.n	2bf8 <ui_process+0x458>
			}
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
    2adc:	4b18      	ldr	r3, [pc, #96]	; (2b40 <ui_process+0x3a0>)
    2ade:	881b      	ldrh	r3, [r3, #0]
    2ae0:	b29b      	uxth	r3, r3
    2ae2:	2b03      	cmp	r3, #3
    2ae4:	d000      	beq.n	2ae8 <ui_process+0x348>
    2ae6:	e087      	b.n	2bf8 <ui_process+0x458>
			for (int i = 0; i < RFM_DATALEN; i++) {
    2ae8:	2300      	movs	r3, #0
    2aea:	60fb      	str	r3, [r7, #12]
    2aec:	e07c      	b.n	2be8 <ui_process+0x448>
				switch (i) {
    2aee:	68fb      	ldr	r3, [r7, #12]
    2af0:	2b01      	cmp	r3, #1
    2af2:	d00c      	beq.n	2b0e <ui_process+0x36e>
    2af4:	2b02      	cmp	r3, #2
    2af6:	d04d      	beq.n	2b94 <ui_process+0x3f4>
    2af8:	2b00      	cmp	r3, #0
    2afa:	d172      	bne.n	2be2 <ui_process+0x442>
					case 0: //x axis scroll
						scrollX = RFM_DATA[i];
    2afc:	4b12      	ldr	r3, [pc, #72]	; (2b48 <ui_process+0x3a8>)
    2afe:	68fa      	ldr	r2, [r7, #12]
    2b00:	0052      	lsls	r2, r2, #1
    2b02:	5ad3      	ldrh	r3, [r2, r3]
    2b04:	b29b      	uxth	r3, r3
    2b06:	001a      	movs	r2, r3
    2b08:	4b20      	ldr	r3, [pc, #128]	; (2b8c <ui_process+0x3ec>)
    2b0a:	601a      	str	r2, [r3, #0]
						break;
    2b0c:	e069      	b.n	2be2 <ui_process+0x442>
					
					case 1: //y axis scroll
						scrollY = RFM_DATA[i];
    2b0e:	4b0e      	ldr	r3, [pc, #56]	; (2b48 <ui_process+0x3a8>)
    2b10:	68fa      	ldr	r2, [r7, #12]
    2b12:	0052      	lsls	r2, r2, #1
    2b14:	5ad3      	ldrh	r3, [r2, r3]
    2b16:	b29b      	uxth	r3, r3
    2b18:	001a      	movs	r2, r3
    2b1a:	4b1d      	ldr	r3, [pc, #116]	; (2b90 <ui_process+0x3f0>)
    2b1c:	601a      	str	r2, [r3, #0]
						break;
    2b1e:	e060      	b.n	2be2 <ui_process+0x442>
    2b20:	0000264d 	.word	0x0000264d
    2b24:	2000013e 	.word	0x2000013e
    2b28:	000018bd 	.word	0x000018bd
    2b2c:	20000140 	.word	0x20000140
    2b30:	00008e99 	.word	0x00008e99
    2b34:	00002691 	.word	0x00002691
    2b38:	20000144 	.word	0x20000144
    2b3c:	00002321 	.word	0x00002321
    2b40:	20000242 	.word	0x20000242
    2b44:	20000145 	.word	0x20000145
    2b48:	20000258 	.word	0x20000258
    2b4c:	20000146 	.word	0x20000146
    2b50:	20000148 	.word	0x20000148
    2b54:	2000014a 	.word	0x2000014a
    2b58:	2000014c 	.word	0x2000014c
    2b5c:	20000150 	.word	0x20000150
    2b60:	20000154 	.word	0x20000154
    2b64:	20000158 	.word	0x20000158
    2b68:	20000252 	.word	0x20000252
    2b6c:	2000015c 	.word	0x2000015c
    2b70:	20000160 	.word	0x20000160
    2b74:	20000174 	.word	0x20000174
    2b78:	20000178 	.word	0x20000178
    2b7c:	00008d8d 	.word	0x00008d8d
    2b80:	20000100 	.word	0x20000100
    2b84:	20000000 	.word	0x20000000
    2b88:	00002011 	.word	0x00002011
    2b8c:	2000018c 	.word	0x2000018c
    2b90:	20000190 	.word	0x20000190
					
					case 2: //button info byte
						button_info = RFM_DATA[i];
    2b94:	4b45      	ldr	r3, [pc, #276]	; (2cac <ui_process+0x50c>)
    2b96:	68fa      	ldr	r2, [r7, #12]
    2b98:	0052      	lsls	r2, r2, #1
    2b9a:	5ad3      	ldrh	r3, [r2, r3]
    2b9c:	b29b      	uxth	r3, r3
    2b9e:	b2da      	uxtb	r2, r3
    2ba0:	4b43      	ldr	r3, [pc, #268]	; (2cb0 <ui_process+0x510>)
    2ba2:	701a      	strb	r2, [r3, #0]
						
						//mouse_move(x, y);
						//mouse_buttons((button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
						left = (button_info & 0x08) >> 3;
    2ba4:	4b42      	ldr	r3, [pc, #264]	; (2cb0 <ui_process+0x510>)
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	10db      	asrs	r3, r3, #3
    2baa:	2201      	movs	r2, #1
    2bac:	4013      	ands	r3, r2
    2bae:	1e5a      	subs	r2, r3, #1
    2bb0:	4193      	sbcs	r3, r2
    2bb2:	b2da      	uxtb	r2, r3
    2bb4:	4b3f      	ldr	r3, [pc, #252]	; (2cb4 <ui_process+0x514>)
    2bb6:	701a      	strb	r2, [r3, #0]
						middle = (button_info & 0x02) >> 1;
    2bb8:	4b3d      	ldr	r3, [pc, #244]	; (2cb0 <ui_process+0x510>)
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	105b      	asrs	r3, r3, #1
    2bbe:	2201      	movs	r2, #1
    2bc0:	4013      	ands	r3, r2
    2bc2:	1e5a      	subs	r2, r3, #1
    2bc4:	4193      	sbcs	r3, r2
    2bc6:	b2da      	uxtb	r2, r3
    2bc8:	4b3b      	ldr	r3, [pc, #236]	; (2cb8 <ui_process+0x518>)
    2bca:	701a      	strb	r2, [r3, #0]
						right = (button_info & 0x04) >> 2;
    2bcc:	4b38      	ldr	r3, [pc, #224]	; (2cb0 <ui_process+0x510>)
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	109b      	asrs	r3, r3, #2
    2bd2:	2201      	movs	r2, #1
    2bd4:	4013      	ands	r3, r2
    2bd6:	1e5a      	subs	r2, r3, #1
    2bd8:	4193      	sbcs	r3, r2
    2bda:	b2da      	uxtb	r2, r3
    2bdc:	4b37      	ldr	r3, [pc, #220]	; (2cbc <ui_process+0x51c>)
    2bde:	701a      	strb	r2, [r3, #0]
						
						break;
    2be0:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
			for (int i = 0; i < RFM_DATALEN; i++) {
    2be2:	68fb      	ldr	r3, [r7, #12]
    2be4:	3301      	adds	r3, #1
    2be6:	60fb      	str	r3, [r7, #12]
    2be8:	4b35      	ldr	r3, [pc, #212]	; (2cc0 <ui_process+0x520>)
    2bea:	881b      	ldrh	r3, [r3, #0]
    2bec:	b29b      	uxth	r3, r3
    2bee:	1e1a      	subs	r2, r3, #0
    2bf0:	68fb      	ldr	r3, [r7, #12]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	dd00      	ble.n	2bf8 <ui_process+0x458>
    2bf6:	e77a      	b.n	2aee <ui_process+0x34e>
			}
		}
	}
	
	//handle camera timeout
	if (millis() - cameraTimeOut > 500) { // if time exceeds 500ms
    2bf8:	4b32      	ldr	r3, [pc, #200]	; (2cc4 <ui_process+0x524>)
    2bfa:	4798      	blx	r3
    2bfc:	0002      	movs	r2, r0
    2bfe:	4b32      	ldr	r3, [pc, #200]	; (2cc8 <ui_process+0x528>)
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	1ad2      	subs	r2, r2, r3
    2c04:	23fa      	movs	r3, #250	; 0xfa
    2c06:	005b      	lsls	r3, r3, #1
    2c08:	429a      	cmp	r2, r3
    2c0a:	d912      	bls.n	2c32 <ui_process+0x492>
		RFM_DATA[0] = 'R'; //regular mode
    2c0c:	4b27      	ldr	r3, [pc, #156]	; (2cac <ui_process+0x50c>)
    2c0e:	2252      	movs	r2, #82	; 0x52
    2c10:	801a      	strh	r2, [r3, #0]
		RFM_send(CAMERA_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false);
    2c12:	4b2e      	ldr	r3, [pc, #184]	; (2ccc <ui_process+0x52c>)
    2c14:	681b      	ldr	r3, [r3, #0]
    2c16:	b2da      	uxtb	r2, r3
    2c18:	492d      	ldr	r1, [pc, #180]	; (2cd0 <ui_process+0x530>)
    2c1a:	2300      	movs	r3, #0
    2c1c:	2001      	movs	r0, #1
    2c1e:	4c2d      	ldr	r4, [pc, #180]	; (2cd4 <ui_process+0x534>)
    2c20:	47a0      	blx	r4
		cameraTimeOut = millis();
    2c22:	4b28      	ldr	r3, [pc, #160]	; (2cc4 <ui_process+0x524>)
    2c24:	4798      	blx	r3
    2c26:	0002      	movs	r2, r0
    2c28:	4b27      	ldr	r3, [pc, #156]	; (2cc8 <ui_process+0x528>)
    2c2a:	601a      	str	r2, [r3, #0]
		calibration = false;
    2c2c:	4b2a      	ldr	r3, [pc, #168]	; (2cd8 <ui_process+0x538>)
    2c2e:	2200      	movs	r2, #0
    2c30:	701a      	strb	r2, [r3, #0]
		//x += 50;
		//y += 50;
		//udi_hid_mouse_moveX(x);
		//udi_hid_mouse_moveY(y);
	}*/
	if (!calibration)
    2c32:	4b29      	ldr	r3, [pc, #164]	; (2cd8 <ui_process+0x538>)
    2c34:	781b      	ldrb	r3, [r3, #0]
    2c36:	2201      	movs	r2, #1
    2c38:	4053      	eors	r3, r2
    2c3a:	b2db      	uxtb	r3, r3
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d031      	beq.n	2ca4 <ui_process+0x504>
		mouse_move(x, y, scrollX, scrollY, (button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
    2c40:	4b26      	ldr	r3, [pc, #152]	; (2cdc <ui_process+0x53c>)
    2c42:	2200      	movs	r2, #0
    2c44:	5e9b      	ldrsh	r3, [r3, r2]
    2c46:	b29c      	uxth	r4, r3
    2c48:	4b25      	ldr	r3, [pc, #148]	; (2ce0 <ui_process+0x540>)
    2c4a:	2200      	movs	r2, #0
    2c4c:	5e9b      	ldrsh	r3, [r3, r2]
    2c4e:	b29d      	uxth	r5, r3
    2c50:	4b24      	ldr	r3, [pc, #144]	; (2ce4 <ui_process+0x544>)
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	b29e      	uxth	r6, r3
    2c56:	4b24      	ldr	r3, [pc, #144]	; (2ce8 <ui_process+0x548>)
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	b29b      	uxth	r3, r3
    2c5c:	469c      	mov	ip, r3
    2c5e:	4b14      	ldr	r3, [pc, #80]	; (2cb0 <ui_process+0x510>)
    2c60:	781b      	ldrb	r3, [r3, #0]
    2c62:	10db      	asrs	r3, r3, #3
    2c64:	2201      	movs	r2, #1
    2c66:	4013      	ands	r3, r2
    2c68:	1e5a      	subs	r2, r3, #1
    2c6a:	4193      	sbcs	r3, r2
    2c6c:	b2db      	uxtb	r3, r3
    2c6e:	4a10      	ldr	r2, [pc, #64]	; (2cb0 <ui_process+0x510>)
    2c70:	7812      	ldrb	r2, [r2, #0]
    2c72:	1052      	asrs	r2, r2, #1
    2c74:	2101      	movs	r1, #1
    2c76:	400a      	ands	r2, r1
    2c78:	1e51      	subs	r1, r2, #1
    2c7a:	418a      	sbcs	r2, r1
    2c7c:	b2d2      	uxtb	r2, r2
    2c7e:	490c      	ldr	r1, [pc, #48]	; (2cb0 <ui_process+0x510>)
    2c80:	7809      	ldrb	r1, [r1, #0]
    2c82:	1089      	asrs	r1, r1, #2
    2c84:	2001      	movs	r0, #1
    2c86:	4001      	ands	r1, r0
    2c88:	1e48      	subs	r0, r1, #1
    2c8a:	4181      	sbcs	r1, r0
    2c8c:	b2c9      	uxtb	r1, r1
    2c8e:	9102      	str	r1, [sp, #8]
    2c90:	9201      	str	r2, [sp, #4]
    2c92:	9300      	str	r3, [sp, #0]
    2c94:	4663      	mov	r3, ip
    2c96:	0032      	movs	r2, r6
    2c98:	0029      	movs	r1, r5
    2c9a:	0020      	movs	r0, r4
    2c9c:	4c13      	ldr	r4, [pc, #76]	; (2cec <ui_process+0x54c>)
    2c9e:	47a0      	blx	r4
    2ca0:	e000      	b.n	2ca4 <ui_process+0x504>
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
	if (cpt_sof < 5) {
		return;
    2ca2:	46c0      	nop			; (mov r8, r8)
		mouse_move(x, y, scrollX, scrollY, (button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
		/*x += 50;
		y += 50;
		udi_hid_mouse_moveX(x);
		udi_hid_mouse_moveY(y);*/
}
    2ca4:	46bd      	mov	sp, r7
    2ca6:	b007      	add	sp, #28
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	20000258 	.word	0x20000258
    2cb0:	20000194 	.word	0x20000194
    2cb4:	20000195 	.word	0x20000195
    2cb8:	20000196 	.word	0x20000196
    2cbc:	20000197 	.word	0x20000197
    2cc0:	20000252 	.word	0x20000252
    2cc4:	000018bd 	.word	0x000018bd
    2cc8:	20000140 	.word	0x20000140
    2ccc:	20000000 	.word	0x20000000
    2cd0:	20000100 	.word	0x20000100
    2cd4:	00002011 	.word	0x00002011
    2cd8:	20000145 	.word	0x20000145
    2cdc:	20000146 	.word	0x20000146
    2ce0:	2000014a 	.word	0x2000014a
    2ce4:	2000018c 	.word	0x2000018c
    2ce8:	20000190 	.word	0x20000190
    2cec:	00002e11 	.word	0x00002e11

00002cf0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2cf0:	b580      	push	{r7, lr}
    2cf2:	b082      	sub	sp, #8
    2cf4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cf6:	f3ef 8310 	mrs	r3, PRIMASK
    2cfa:	603b      	str	r3, [r7, #0]
  return(result);
    2cfc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    2cfe:	425a      	negs	r2, r3
    2d00:	4153      	adcs	r3, r2
    2d02:	b2db      	uxtb	r3, r3
    2d04:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2d06:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d0c:	4b03      	ldr	r3, [pc, #12]	; (2d1c <cpu_irq_save+0x2c>)
    2d0e:	2200      	movs	r2, #0
    2d10:	701a      	strb	r2, [r3, #0]
	return flags;
    2d12:	687b      	ldr	r3, [r7, #4]
}
    2d14:	0018      	movs	r0, r3
    2d16:	46bd      	mov	sp, r7
    2d18:	b002      	add	sp, #8
    2d1a:	bd80      	pop	{r7, pc}
    2d1c:	200000dc 	.word	0x200000dc

00002d20 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b082      	sub	sp, #8
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
	return (flags);
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	1e5a      	subs	r2, r3, #1
    2d2c:	4193      	sbcs	r3, r2
    2d2e:	b2db      	uxtb	r3, r3
}
    2d30:	0018      	movs	r0, r3
    2d32:	46bd      	mov	sp, r7
    2d34:	b002      	add	sp, #8
    2d36:	bd80      	pop	{r7, pc}

00002d38 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b082      	sub	sp, #8
    2d3c:	af00      	add	r7, sp, #0
    2d3e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	0018      	movs	r0, r3
    2d44:	4b06      	ldr	r3, [pc, #24]	; (2d60 <cpu_irq_restore+0x28>)
    2d46:	4798      	blx	r3
    2d48:	1e03      	subs	r3, r0, #0
    2d4a:	d005      	beq.n	2d58 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    2d4c:	4b05      	ldr	r3, [pc, #20]	; (2d64 <cpu_irq_restore+0x2c>)
    2d4e:	2201      	movs	r2, #1
    2d50:	701a      	strb	r2, [r3, #0]
    2d52:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d56:	b662      	cpsie	i
}
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	46bd      	mov	sp, r7
    2d5c:	b002      	add	sp, #8
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	00002d21 	.word	0x00002d21
    2d64:	200000dc 	.word	0x200000dc

00002d68 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    2d6c:	4b0b      	ldr	r3, [pc, #44]	; (2d9c <udi_hid_mouse_enable+0x34>)
    2d6e:	2200      	movs	r2, #0
    2d70:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    2d72:	4b0b      	ldr	r3, [pc, #44]	; (2da0 <udi_hid_mouse_enable+0x38>)
    2d74:	2200      	movs	r2, #0
    2d76:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    2d78:	4b0a      	ldr	r3, [pc, #40]	; (2da4 <udi_hid_mouse_enable+0x3c>)
    2d7a:	2200      	movs	r2, #0
    2d7c:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    2d7e:	4b0a      	ldr	r3, [pc, #40]	; (2da8 <udi_hid_mouse_enable+0x40>)
    2d80:	2207      	movs	r2, #7
    2d82:	2100      	movs	r1, #0
    2d84:	0018      	movs	r0, r3
    2d86:	4b09      	ldr	r3, [pc, #36]	; (2dac <udi_hid_mouse_enable+0x44>)
    2d88:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2d8a:	4b09      	ldr	r3, [pc, #36]	; (2db0 <udi_hid_mouse_enable+0x48>)
    2d8c:	2200      	movs	r2, #0
    2d8e:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    2d90:	4b08      	ldr	r3, [pc, #32]	; (2db4 <udi_hid_mouse_enable+0x4c>)
    2d92:	4798      	blx	r3
    2d94:	0003      	movs	r3, r0
}
    2d96:	0018      	movs	r0, r3
    2d98:	46bd      	mov	sp, r7
    2d9a:	bd80      	pop	{r7, pc}
    2d9c:	20000198 	.word	0x20000198
    2da0:	2000019c 	.word	0x2000019c
    2da4:	200001a7 	.word	0x200001a7
    2da8:	200001a0 	.word	0x200001a0
    2dac:	00009117 	.word	0x00009117
    2db0:	2000019d 	.word	0x2000019d
    2db4:	00008d61 	.word	0x00008d61

00002db8 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    2db8:	b580      	push	{r7, lr}
    2dba:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    2dbc:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <udi_hid_mouse_disable+0x10>)
    2dbe:	4798      	blx	r3
}
    2dc0:	46c0      	nop			; (mov r8, r8)
    2dc2:	46bd      	mov	sp, r7
    2dc4:	bd80      	pop	{r7, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	00008d79 	.word	0x00008d79

00002dcc <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2dcc:	b5b0      	push	{r4, r5, r7, lr}
    2dce:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2dd0:	4b04      	ldr	r3, [pc, #16]	; (2de4 <udi_hid_mouse_setup+0x18>)
    2dd2:	4a05      	ldr	r2, [pc, #20]	; (2de8 <udi_hid_mouse_setup+0x1c>)
    2dd4:	4905      	ldr	r1, [pc, #20]	; (2dec <udi_hid_mouse_setup+0x20>)
    2dd6:	4806      	ldr	r0, [pc, #24]	; (2df0 <udi_hid_mouse_setup+0x24>)
    2dd8:	4c06      	ldr	r4, [pc, #24]	; (2df4 <udi_hid_mouse_setup+0x28>)
    2dda:	47a0      	blx	r4
    2ddc:	0003      	movs	r3, r0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    2dde:	0018      	movs	r0, r3
    2de0:	46bd      	mov	sp, r7
    2de2:	bdb0      	pop	{r4, r5, r7, pc}
    2de4:	00002e05 	.word	0x00002e05
    2de8:	20000018 	.word	0x20000018
    2dec:	2000019c 	.word	0x2000019c
    2df0:	20000198 	.word	0x20000198
    2df4:	00002ff1 	.word	0x00002ff1

00002df8 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    2df8:	b580      	push	{r7, lr}
    2dfa:	af00      	add	r7, sp, #0
	return 0;
    2dfc:	2300      	movs	r3, #0
}
    2dfe:	0018      	movs	r0, r3
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}

00002e04 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    2e04:	b580      	push	{r7, lr}
    2e06:	af00      	add	r7, sp, #0
	return false;
    2e08:	2300      	movs	r3, #0
}
    2e0a:	0018      	movs	r0, r3
    2e0c:	46bd      	mov	sp, r7
    2e0e:	bd80      	pop	{r7, pc}

00002e10 <mouse_move>:
	cpu_irq_restore(flags);
	return true;
}

bool mouse_move(uint16_t x, uint16_t y, uint16_t scrollX, uint16_t scrollY, bool left, bool middle, bool right)
{
    2e10:	b5b0      	push	{r4, r5, r7, lr}
    2e12:	b084      	sub	sp, #16
    2e14:	af00      	add	r7, sp, #0
    2e16:	0005      	movs	r5, r0
    2e18:	000c      	movs	r4, r1
    2e1a:	0010      	movs	r0, r2
    2e1c:	0019      	movs	r1, r3
    2e1e:	1dbb      	adds	r3, r7, #6
    2e20:	1c2a      	adds	r2, r5, #0
    2e22:	801a      	strh	r2, [r3, #0]
    2e24:	1d3b      	adds	r3, r7, #4
    2e26:	1c22      	adds	r2, r4, #0
    2e28:	801a      	strh	r2, [r3, #0]
    2e2a:	1cbb      	adds	r3, r7, #2
    2e2c:	1c02      	adds	r2, r0, #0
    2e2e:	801a      	strh	r2, [r3, #0]
    2e30:	003b      	movs	r3, r7
    2e32:	1c0a      	adds	r2, r1, #0
    2e34:	801a      	strh	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2e36:	4b3c      	ldr	r3, [pc, #240]	; (2f28 <mouse_move+0x118>)
    2e38:	4798      	blx	r3
    2e3a:	0003      	movs	r3, r0
    2e3c:	60fb      	str	r3, [r7, #12]

	udi_hid_mouse_report[1] = x & 0x00FF;
    2e3e:	1dbb      	adds	r3, r7, #6
    2e40:	881b      	ldrh	r3, [r3, #0]
    2e42:	b2da      	uxtb	r2, r3
    2e44:	4b39      	ldr	r3, [pc, #228]	; (2f2c <mouse_move+0x11c>)
    2e46:	705a      	strb	r2, [r3, #1]
	udi_hid_mouse_report[2] = (x & 0x7F00) >> 8;
    2e48:	1dbb      	adds	r3, r7, #6
    2e4a:	881b      	ldrh	r3, [r3, #0]
    2e4c:	121b      	asrs	r3, r3, #8
    2e4e:	b2db      	uxtb	r3, r3
    2e50:	227f      	movs	r2, #127	; 0x7f
    2e52:	4013      	ands	r3, r2
    2e54:	b2da      	uxtb	r2, r3
    2e56:	4b35      	ldr	r3, [pc, #212]	; (2f2c <mouse_move+0x11c>)
    2e58:	709a      	strb	r2, [r3, #2]
	udi_hid_mouse_report[3] = y & 0x00FF;
    2e5a:	1d3b      	adds	r3, r7, #4
    2e5c:	881b      	ldrh	r3, [r3, #0]
    2e5e:	b2da      	uxtb	r2, r3
    2e60:	4b32      	ldr	r3, [pc, #200]	; (2f2c <mouse_move+0x11c>)
    2e62:	70da      	strb	r2, [r3, #3]
	udi_hid_mouse_report[4] = (y & 0x7F00) >> 8;
    2e64:	1d3b      	adds	r3, r7, #4
    2e66:	881b      	ldrh	r3, [r3, #0]
    2e68:	121b      	asrs	r3, r3, #8
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	227f      	movs	r2, #127	; 0x7f
    2e6e:	4013      	ands	r3, r2
    2e70:	b2da      	uxtb	r2, r3
    2e72:	4b2e      	ldr	r3, [pc, #184]	; (2f2c <mouse_move+0x11c>)
    2e74:	711a      	strb	r2, [r3, #4]
	udi_hid_mouse_report[5] = scrollX & 0x00FF;
    2e76:	1cbb      	adds	r3, r7, #2
    2e78:	881b      	ldrh	r3, [r3, #0]
    2e7a:	b2da      	uxtb	r2, r3
    2e7c:	4b2b      	ldr	r3, [pc, #172]	; (2f2c <mouse_move+0x11c>)
    2e7e:	715a      	strb	r2, [r3, #5]
	udi_hid_mouse_report[6] = (scrollX & 0x7F00) >> 8;
    2e80:	1cbb      	adds	r3, r7, #2
    2e82:	881b      	ldrh	r3, [r3, #0]
    2e84:	121b      	asrs	r3, r3, #8
    2e86:	b2db      	uxtb	r3, r3
    2e88:	227f      	movs	r2, #127	; 0x7f
    2e8a:	4013      	ands	r3, r2
    2e8c:	b2da      	uxtb	r2, r3
    2e8e:	4b27      	ldr	r3, [pc, #156]	; (2f2c <mouse_move+0x11c>)
    2e90:	719a      	strb	r2, [r3, #6]

	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == left)
    2e92:	2320      	movs	r3, #32
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	781b      	ldrb	r3, [r3, #0]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d007      	beq.n	2eac <mouse_move+0x9c>
	udi_hid_mouse_report[0] |= 0x01;
    2e9c:	4b23      	ldr	r3, [pc, #140]	; (2f2c <mouse_move+0x11c>)
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	2201      	movs	r2, #1
    2ea2:	4313      	orrs	r3, r2
    2ea4:	b2da      	uxtb	r2, r3
    2ea6:	4b21      	ldr	r3, [pc, #132]	; (2f2c <mouse_move+0x11c>)
    2ea8:	701a      	strb	r2, [r3, #0]
    2eaa:	e006      	b.n	2eba <mouse_move+0xaa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x01;
    2eac:	4b1f      	ldr	r3, [pc, #124]	; (2f2c <mouse_move+0x11c>)
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	2201      	movs	r2, #1
    2eb2:	4393      	bics	r3, r2
    2eb4:	b2da      	uxtb	r2, r3
    2eb6:	4b1d      	ldr	r3, [pc, #116]	; (2f2c <mouse_move+0x11c>)
    2eb8:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == right)
    2eba:	2328      	movs	r3, #40	; 0x28
    2ebc:	18fb      	adds	r3, r7, r3
    2ebe:	781b      	ldrb	r3, [r3, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d007      	beq.n	2ed4 <mouse_move+0xc4>
	udi_hid_mouse_report[0] |= 0x02;
    2ec4:	4b19      	ldr	r3, [pc, #100]	; (2f2c <mouse_move+0x11c>)
    2ec6:	781b      	ldrb	r3, [r3, #0]
    2ec8:	2202      	movs	r2, #2
    2eca:	4313      	orrs	r3, r2
    2ecc:	b2da      	uxtb	r2, r3
    2ece:	4b17      	ldr	r3, [pc, #92]	; (2f2c <mouse_move+0x11c>)
    2ed0:	701a      	strb	r2, [r3, #0]
    2ed2:	e006      	b.n	2ee2 <mouse_move+0xd2>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x02;
    2ed4:	4b15      	ldr	r3, [pc, #84]	; (2f2c <mouse_move+0x11c>)
    2ed6:	781b      	ldrb	r3, [r3, #0]
    2ed8:	2202      	movs	r2, #2
    2eda:	4393      	bics	r3, r2
    2edc:	b2da      	uxtb	r2, r3
    2ede:	4b13      	ldr	r3, [pc, #76]	; (2f2c <mouse_move+0x11c>)
    2ee0:	701a      	strb	r2, [r3, #0]
			
	if (HID_MOUSE_BTN_DOWN == middle)
    2ee2:	2324      	movs	r3, #36	; 0x24
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d007      	beq.n	2efc <mouse_move+0xec>
	udi_hid_mouse_report[0] |= 0x04;
    2eec:	4b0f      	ldr	r3, [pc, #60]	; (2f2c <mouse_move+0x11c>)
    2eee:	781b      	ldrb	r3, [r3, #0]
    2ef0:	2204      	movs	r2, #4
    2ef2:	4313      	orrs	r3, r2
    2ef4:	b2da      	uxtb	r2, r3
    2ef6:	4b0d      	ldr	r3, [pc, #52]	; (2f2c <mouse_move+0x11c>)
    2ef8:	701a      	strb	r2, [r3, #0]
    2efa:	e006      	b.n	2f0a <mouse_move+0xfa>
	else
	udi_hid_mouse_report[0] &= ~(unsigned)0x04;
    2efc:	4b0b      	ldr	r3, [pc, #44]	; (2f2c <mouse_move+0x11c>)
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	2204      	movs	r2, #4
    2f02:	4393      	bics	r3, r2
    2f04:	b2da      	uxtb	r2, r3
    2f06:	4b09      	ldr	r3, [pc, #36]	; (2f2c <mouse_move+0x11c>)
    2f08:	701a      	strb	r2, [r3, #0]

	// Valid and send report

	udi_hid_mouse_b_report_valid = true;
    2f0a:	4b09      	ldr	r3, [pc, #36]	; (2f30 <mouse_move+0x120>)
    2f0c:	2201      	movs	r2, #1
    2f0e:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_send_report();
    2f10:	4b08      	ldr	r3, [pc, #32]	; (2f34 <mouse_move+0x124>)
    2f12:	4798      	blx	r3

	cpu_irq_restore(flags);
    2f14:	68fb      	ldr	r3, [r7, #12]
    2f16:	0018      	movs	r0, r3
    2f18:	4b07      	ldr	r3, [pc, #28]	; (2f38 <mouse_move+0x128>)
    2f1a:	4798      	blx	r3
	return true;
    2f1c:	2301      	movs	r3, #1
}
    2f1e:	0018      	movs	r0, r3
    2f20:	46bd      	mov	sp, r7
    2f22:	b004      	add	sp, #16
    2f24:	bdb0      	pop	{r4, r5, r7, pc}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	00002cf1 	.word	0x00002cf1
    2f2c:	200001a0 	.word	0x200001a0
    2f30:	2000019d 	.word	0x2000019d
    2f34:	00002f3d 	.word	0x00002f3d
    2f38:	00002d39 	.word	0x00002d39

00002f3c <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 10, false);
}


static bool udi_hid_mouse_send_report(void)
{
    2f3c:	b590      	push	{r4, r7, lr}
    2f3e:	b083      	sub	sp, #12
    2f40:	af02      	add	r7, sp, #8
	if (udi_hid_mouse_report_trans_ongoing)
    2f42:	4b14      	ldr	r3, [pc, #80]	; (2f94 <udi_hid_mouse_send_report+0x58>)
    2f44:	781b      	ldrb	r3, [r3, #0]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d001      	beq.n	2f4e <udi_hid_mouse_send_report+0x12>
		return false;	// Transfer on going then send this one after transfer complete
    2f4a:	2300      	movs	r3, #0
    2f4c:	e01e      	b.n	2f8c <udi_hid_mouse_send_report+0x50>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
    2f4e:	4b12      	ldr	r3, [pc, #72]	; (2f98 <udi_hid_mouse_send_report+0x5c>)
    2f50:	4a12      	ldr	r2, [pc, #72]	; (2f9c <udi_hid_mouse_send_report+0x60>)
    2f52:	6811      	ldr	r1, [r2, #0]
    2f54:	6019      	str	r1, [r3, #0]
    2f56:	8891      	ldrh	r1, [r2, #4]
    2f58:	8099      	strh	r1, [r3, #4]
    2f5a:	7992      	ldrb	r2, [r2, #6]
    2f5c:	719a      	strb	r2, [r3, #6]
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
    2f5e:	4b10      	ldr	r3, [pc, #64]	; (2fa0 <udi_hid_mouse_send_report+0x64>)
    2f60:	2203      	movs	r2, #3
    2f62:	2100      	movs	r1, #0
    2f64:	0018      	movs	r0, r3
    2f66:	4b0f      	ldr	r3, [pc, #60]	; (2fa4 <udi_hid_mouse_send_report+0x68>)
    2f68:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2f6a:	4b0f      	ldr	r3, [pc, #60]	; (2fa8 <udi_hid_mouse_send_report+0x6c>)
    2f6c:	2200      	movs	r2, #0
    2f6e:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
    2f70:	4a09      	ldr	r2, [pc, #36]	; (2f98 <udi_hid_mouse_send_report+0x5c>)
    2f72:	4b0e      	ldr	r3, [pc, #56]	; (2fac <udi_hid_mouse_send_report+0x70>)
    2f74:	9300      	str	r3, [sp, #0]
    2f76:	2307      	movs	r3, #7
    2f78:	2100      	movs	r1, #0
    2f7a:	2081      	movs	r0, #129	; 0x81
    2f7c:	4c0c      	ldr	r4, [pc, #48]	; (2fb0 <udi_hid_mouse_send_report+0x74>)
    2f7e:	47a0      	blx	r4
    2f80:	0003      	movs	r3, r0
    2f82:	001a      	movs	r2, r3
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
    2f84:	4b03      	ldr	r3, [pc, #12]	; (2f94 <udi_hid_mouse_send_report+0x58>)
    2f86:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
    2f88:	4b02      	ldr	r3, [pc, #8]	; (2f94 <udi_hid_mouse_send_report+0x58>)
    2f8a:	781b      	ldrb	r3, [r3, #0]
}
    2f8c:	0018      	movs	r0, r3
    2f8e:	46bd      	mov	sp, r7
    2f90:	b001      	add	sp, #4
    2f92:	bd90      	pop	{r4, r7, pc}
    2f94:	200001a7 	.word	0x200001a7
    2f98:	200001a8 	.word	0x200001a8
    2f9c:	200001a0 	.word	0x200001a0
    2fa0:	200001a1 	.word	0x200001a1
    2fa4:	00009117 	.word	0x00009117
    2fa8:	2000019d 	.word	0x2000019d
    2fac:	00002fb5 	.word	0x00002fb5
    2fb0:	00005fa1 	.word	0x00005fa1

00002fb4 <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b082      	sub	sp, #8
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6039      	str	r1, [r7, #0]
    2fbc:	0011      	movs	r1, r2
    2fbe:	1dfb      	adds	r3, r7, #7
    2fc0:	1c02      	adds	r2, r0, #0
    2fc2:	701a      	strb	r2, [r3, #0]
    2fc4:	1dbb      	adds	r3, r7, #6
    2fc6:	1c0a      	adds	r2, r1, #0
    2fc8:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
    2fca:	4b06      	ldr	r3, [pc, #24]	; (2fe4 <udi_hid_mouse_report_sent+0x30>)
    2fcc:	2200      	movs	r2, #0
    2fce:	701a      	strb	r2, [r3, #0]
	if (udi_hid_mouse_b_report_valid) {
    2fd0:	4b05      	ldr	r3, [pc, #20]	; (2fe8 <udi_hid_mouse_report_sent+0x34>)
    2fd2:	781b      	ldrb	r3, [r3, #0]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d001      	beq.n	2fdc <udi_hid_mouse_report_sent+0x28>
		// Send new valid report
		udi_hid_mouse_send_report();
    2fd8:	4b04      	ldr	r3, [pc, #16]	; (2fec <udi_hid_mouse_report_sent+0x38>)
    2fda:	4798      	blx	r3
	}
}
    2fdc:	46c0      	nop			; (mov r8, r8)
    2fde:	46bd      	mov	sp, r7
    2fe0:	b002      	add	sp, #8
    2fe2:	bd80      	pop	{r7, pc}
    2fe4:	200001a7 	.word	0x200001a7
    2fe8:	2000019d 	.word	0x2000019d
    2fec:	00002f3d 	.word	0x00002f3d

00002ff0 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b084      	sub	sp, #16
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	60f8      	str	r0, [r7, #12]
    2ff8:	60b9      	str	r1, [r7, #8]
    2ffa:	607a      	str	r2, [r7, #4]
    2ffc:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    2ffe:	4b35      	ldr	r3, [pc, #212]	; (30d4 <udi_hid_setup+0xe4>)
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	b25b      	sxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	da32      	bge.n	306e <udi_hid_setup+0x7e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3008:	4b32      	ldr	r3, [pc, #200]	; (30d4 <udi_hid_setup+0xe4>)
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	001a      	movs	r2, r3
    300e:	2360      	movs	r3, #96	; 0x60
    3010:	4013      	ands	r3, r2
    3012:	d109      	bne.n	3028 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    3014:	4b2f      	ldr	r3, [pc, #188]	; (30d4 <udi_hid_setup+0xe4>)
    3016:	785b      	ldrb	r3, [r3, #1]
    3018:	2b06      	cmp	r3, #6
    301a:	d105      	bne.n	3028 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	0018      	movs	r0, r3
    3020:	4b2d      	ldr	r3, [pc, #180]	; (30d8 <udi_hid_setup+0xe8>)
    3022:	4798      	blx	r3
    3024:	0003      	movs	r3, r0
    3026:	e051      	b.n	30cc <udi_hid_setup+0xdc>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3028:	4b2a      	ldr	r3, [pc, #168]	; (30d4 <udi_hid_setup+0xe4>)
    302a:	781b      	ldrb	r3, [r3, #0]
    302c:	001a      	movs	r2, r3
    302e:	2360      	movs	r3, #96	; 0x60
    3030:	4013      	ands	r3, r2
    3032:	2b20      	cmp	r3, #32
    3034:	d11b      	bne.n	306e <udi_hid_setup+0x7e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    3036:	4b27      	ldr	r3, [pc, #156]	; (30d4 <udi_hid_setup+0xe4>)
    3038:	785b      	ldrb	r3, [r3, #1]
    303a:	2b02      	cmp	r3, #2
    303c:	d007      	beq.n	304e <udi_hid_setup+0x5e>
    303e:	2b03      	cmp	r3, #3
    3040:	d00d      	beq.n	305e <udi_hid_setup+0x6e>
    3042:	2b01      	cmp	r3, #1
    3044:	d113      	bne.n	306e <udi_hid_setup+0x7e>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    3046:	683b      	ldr	r3, [r7, #0]
    3048:	4798      	blx	r3
    304a:	0003      	movs	r3, r0
    304c:	e03e      	b.n	30cc <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    304e:	4b21      	ldr	r3, [pc, #132]	; (30d4 <udi_hid_setup+0xe4>)
    3050:	68fa      	ldr	r2, [r7, #12]
    3052:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    3054:	4b1f      	ldr	r3, [pc, #124]	; (30d4 <udi_hid_setup+0xe4>)
    3056:	2201      	movs	r2, #1
    3058:	819a      	strh	r2, [r3, #12]
				return true;
    305a:	2301      	movs	r3, #1
    305c:	e036      	b.n	30cc <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    305e:	4b1d      	ldr	r3, [pc, #116]	; (30d4 <udi_hid_setup+0xe4>)
    3060:	68ba      	ldr	r2, [r7, #8]
    3062:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    3064:	4b1b      	ldr	r3, [pc, #108]	; (30d4 <udi_hid_setup+0xe4>)
    3066:	2201      	movs	r2, #1
    3068:	819a      	strh	r2, [r3, #12]
				return true;
    306a:	2301      	movs	r3, #1
    306c:	e02e      	b.n	30cc <udi_hid_setup+0xdc>
			}
		}
	}
	if (Udd_setup_is_out()) {
    306e:	4b19      	ldr	r3, [pc, #100]	; (30d4 <udi_hid_setup+0xe4>)
    3070:	781b      	ldrb	r3, [r3, #0]
    3072:	b25b      	sxtb	r3, r3
    3074:	2b00      	cmp	r3, #0
    3076:	db28      	blt.n	30ca <udi_hid_setup+0xda>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3078:	4b16      	ldr	r3, [pc, #88]	; (30d4 <udi_hid_setup+0xe4>)
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	001a      	movs	r2, r3
    307e:	2360      	movs	r3, #96	; 0x60
    3080:	4013      	ands	r3, r2
    3082:	2b20      	cmp	r3, #32
    3084:	d121      	bne.n	30ca <udi_hid_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    3086:	4b13      	ldr	r3, [pc, #76]	; (30d4 <udi_hid_setup+0xe4>)
    3088:	785b      	ldrb	r3, [r3, #1]
    308a:	2b0a      	cmp	r3, #10
    308c:	d007      	beq.n	309e <udi_hid_setup+0xae>
    308e:	2b0b      	cmp	r3, #11
    3090:	d00e      	beq.n	30b0 <udi_hid_setup+0xc0>
    3092:	2b09      	cmp	r3, #9
    3094:	d119      	bne.n	30ca <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    3096:	683b      	ldr	r3, [r7, #0]
    3098:	4798      	blx	r3
    309a:	0003      	movs	r3, r0
    309c:	e016      	b.n	30cc <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    309e:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <udi_hid_setup+0xe4>)
    30a0:	885b      	ldrh	r3, [r3, #2]
    30a2:	0a1b      	lsrs	r3, r3, #8
    30a4:	b29b      	uxth	r3, r3
    30a6:	b2da      	uxtb	r2, r3
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	701a      	strb	r2, [r3, #0]
				return true;
    30ac:	2301      	movs	r3, #1
    30ae:	e00d      	b.n	30cc <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    30b0:	4b08      	ldr	r3, [pc, #32]	; (30d4 <udi_hid_setup+0xe4>)
    30b2:	88db      	ldrh	r3, [r3, #6]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d001      	beq.n	30bc <udi_hid_setup+0xcc>
					return false;
    30b8:	2300      	movs	r3, #0
    30ba:	e007      	b.n	30cc <udi_hid_setup+0xdc>
				*protocol = udd_g_ctrlreq.req.wValue;
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <udi_hid_setup+0xe4>)
    30be:	885b      	ldrh	r3, [r3, #2]
    30c0:	b2da      	uxtb	r2, r3
    30c2:	68bb      	ldr	r3, [r7, #8]
    30c4:	701a      	strb	r2, [r3, #0]
				return true;
    30c6:	2301      	movs	r3, #1
    30c8:	e000      	b.n	30cc <udi_hid_setup+0xdc>
			}
		}
	}
	return false;	// Request not supported
    30ca:	2300      	movs	r3, #0
}
    30cc:	0018      	movs	r0, r3
    30ce:	46bd      	mov	sp, r7
    30d0:	b004      	add	sp, #16
    30d2:	bd80      	pop	{r7, pc}
    30d4:	200004e4 	.word	0x200004e4
    30d8:	000030dd 	.word	0x000030dd

000030dc <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b084      	sub	sp, #16
    30e0:	af00      	add	r7, sp, #0
    30e2:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    30e4:	4b25      	ldr	r3, [pc, #148]	; (317c <udi_hid_reqstdifaceget_descriptor+0xa0>)
    30e6:	4798      	blx	r3
    30e8:	0003      	movs	r3, r0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    30ea:	3309      	adds	r3, #9
    30ec:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    30ee:	68fb      	ldr	r3, [r7, #12]
    30f0:	785b      	ldrb	r3, [r3, #1]
    30f2:	2b21      	cmp	r3, #33	; 0x21
    30f4:	d001      	beq.n	30fa <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    30f6:	2300      	movs	r3, #0
    30f8:	e03b      	b.n	3172 <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    30fa:	4b21      	ldr	r3, [pc, #132]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    30fc:	885b      	ldrh	r3, [r3, #2]
    30fe:	0a1b      	lsrs	r3, r3, #8
    3100:	b29b      	uxth	r3, r3
    3102:	b2db      	uxtb	r3, r3
    3104:	2b21      	cmp	r3, #33	; 0x21
    3106:	d113      	bne.n	3130 <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    3108:	4b1d      	ldr	r3, [pc, #116]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    310a:	68fa      	ldr	r2, [r7, #12]
    310c:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    310e:	68fb      	ldr	r3, [r7, #12]
    3110:	781b      	ldrb	r3, [r3, #0]
    3112:	b29a      	uxth	r2, r3
    3114:	4b1a      	ldr	r3, [pc, #104]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    3116:	88db      	ldrh	r3, [r3, #6]
    3118:	1c18      	adds	r0, r3, #0
    311a:	1c11      	adds	r1, r2, #0
    311c:	b28a      	uxth	r2, r1
    311e:	b283      	uxth	r3, r0
    3120:	429a      	cmp	r2, r3
    3122:	d900      	bls.n	3126 <udi_hid_reqstdifaceget_descriptor+0x4a>
    3124:	1c01      	adds	r1, r0, #0
    3126:	b28a      	uxth	r2, r1
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    3128:	4b15      	ldr	r3, [pc, #84]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    312a:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    312c:	2301      	movs	r3, #1
    312e:	e020      	b.n	3172 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    3130:	68fb      	ldr	r3, [r7, #12]
    3132:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3134:	4b12      	ldr	r3, [pc, #72]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    3136:	885b      	ldrh	r3, [r3, #2]
    3138:	0a1b      	lsrs	r3, r3, #8
    313a:	b29b      	uxth	r3, r3
    313c:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    313e:	429a      	cmp	r2, r3
    3140:	d116      	bne.n	3170 <udi_hid_reqstdifaceget_descriptor+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    3142:	4b0f      	ldr	r3, [pc, #60]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    3144:	687a      	ldr	r2, [r7, #4]
    3146:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	79da      	ldrb	r2, [r3, #7]
    314c:	7a1b      	ldrb	r3, [r3, #8]
    314e:	021b      	lsls	r3, r3, #8
    3150:	4313      	orrs	r3, r2
    3152:	b29a      	uxth	r2, r3
    3154:	4b0a      	ldr	r3, [pc, #40]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    3156:	88db      	ldrh	r3, [r3, #6]
    3158:	1c18      	adds	r0, r3, #0
    315a:	1c11      	adds	r1, r2, #0
    315c:	b28a      	uxth	r2, r1
    315e:	b283      	uxth	r3, r0
    3160:	429a      	cmp	r2, r3
    3162:	d900      	bls.n	3166 <udi_hid_reqstdifaceget_descriptor+0x8a>
    3164:	1c01      	adds	r1, r0, #0
    3166:	b28a      	uxth	r2, r1
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    3168:	4b05      	ldr	r3, [pc, #20]	; (3180 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    316a:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    316c:	2301      	movs	r3, #1
    316e:	e000      	b.n	3172 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
    3170:	2300      	movs	r3, #0
}
    3172:	0018      	movs	r0, r3
    3174:	46bd      	mov	sp, r7
    3176:	b004      	add	sp, #16
    3178:	bd80      	pop	{r7, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	00003185 	.word	0x00003185
    3180:	200004e4 	.word	0x200004e4

00003184 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    3184:	b580      	push	{r7, lr}
    3186:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    3188:	4b02      	ldr	r3, [pc, #8]	; (3194 <udc_get_interface_desc+0x10>)
    318a:	681b      	ldr	r3, [r3, #0]
}
    318c:	0018      	movs	r0, r3
    318e:	46bd      	mov	sp, r7
    3190:	bd80      	pop	{r7, pc}
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	200001c0 	.word	0x200001c0

00003198 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    3198:	b580      	push	{r7, lr}
    319a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    319c:	4b07      	ldr	r3, [pc, #28]	; (31bc <udc_get_eof_conf+0x24>)
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    31a2:	4b06      	ldr	r3, [pc, #24]	; (31bc <udc_get_eof_conf+0x24>)
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	681b      	ldr	r3, [r3, #0]
    31a8:	7899      	ldrb	r1, [r3, #2]
    31aa:	78db      	ldrb	r3, [r3, #3]
    31ac:	021b      	lsls	r3, r3, #8
    31ae:	430b      	orrs	r3, r1
    31b0:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    31b2:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    31b4:	0018      	movs	r0, r3
    31b6:	46bd      	mov	sp, r7
    31b8:	bd80      	pop	{r7, pc}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	200001bc 	.word	0x200001bc

000031c0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b084      	sub	sp, #16
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    31c8:	000a      	movs	r2, r1
    31ca:	1cfb      	adds	r3, r7, #3
    31cc:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    31ce:	4b14      	ldr	r3, [pc, #80]	; (3220 <udc_next_desc_in_iface+0x60>)
    31d0:	4798      	blx	r3
    31d2:	0003      	movs	r3, r0
    31d4:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    31da:	001a      	movs	r2, r3
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	189b      	adds	r3, r3, r2
    31e0:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    31e2:	e011      	b.n	3208 <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	785b      	ldrb	r3, [r3, #1]
    31e8:	2b04      	cmp	r3, #4
    31ea:	d012      	beq.n	3212 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	785b      	ldrb	r3, [r3, #1]
    31f0:	1cfa      	adds	r2, r7, #3
    31f2:	7812      	ldrb	r2, [r2, #0]
    31f4:	429a      	cmp	r2, r3
    31f6:	d101      	bne.n	31fc <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	e00c      	b.n	3216 <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3200:	001a      	movs	r2, r3
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	189b      	adds	r3, r3, r2
    3206:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3208:	68fa      	ldr	r2, [r7, #12]
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	429a      	cmp	r2, r3
    320e:	d8e9      	bhi.n	31e4 <udc_next_desc_in_iface+0x24>
    3210:	e000      	b.n	3214 <udc_next_desc_in_iface+0x54>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
    3212:	46c0      	nop			; (mov r8, r8)
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3214:	2300      	movs	r3, #0
}
    3216:	0018      	movs	r0, r3
    3218:	46bd      	mov	sp, r7
    321a:	b004      	add	sp, #16
    321c:	bd80      	pop	{r7, pc}
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	00003199 	.word	0x00003199

00003224 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    3224:	b580      	push	{r7, lr}
    3226:	b084      	sub	sp, #16
    3228:	af00      	add	r7, sp, #0
    322a:	0002      	movs	r2, r0
    322c:	1dfb      	adds	r3, r7, #7
    322e:	701a      	strb	r2, [r3, #0]
    3230:	1dbb      	adds	r3, r7, #6
    3232:	1c0a      	adds	r2, r1, #0
    3234:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3236:	4b20      	ldr	r3, [pc, #128]	; (32b8 <udc_update_iface_desc+0x94>)
    3238:	781b      	ldrb	r3, [r3, #0]
    323a:	2b00      	cmp	r3, #0
    323c:	d101      	bne.n	3242 <udc_update_iface_desc+0x1e>
		return false;
    323e:	2300      	movs	r3, #0
    3240:	e036      	b.n	32b0 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3242:	4b1e      	ldr	r3, [pc, #120]	; (32bc <udc_update_iface_desc+0x98>)
    3244:	681b      	ldr	r3, [r3, #0]
    3246:	681b      	ldr	r3, [r3, #0]
    3248:	791b      	ldrb	r3, [r3, #4]
    324a:	1dfa      	adds	r2, r7, #7
    324c:	7812      	ldrb	r2, [r2, #0]
    324e:	429a      	cmp	r2, r3
    3250:	d301      	bcc.n	3256 <udc_update_iface_desc+0x32>
		return false;
    3252:	2300      	movs	r3, #0
    3254:	e02c      	b.n	32b0 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    3256:	4b19      	ldr	r3, [pc, #100]	; (32bc <udc_update_iface_desc+0x98>)
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    325c:	4b18      	ldr	r3, [pc, #96]	; (32c0 <udc_update_iface_desc+0x9c>)
    325e:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3260:	4b18      	ldr	r3, [pc, #96]	; (32c4 <udc_update_iface_desc+0xa0>)
    3262:	4798      	blx	r3
    3264:	0003      	movs	r3, r0
    3266:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3268:	e01c      	b.n	32a4 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    326a:	4b15      	ldr	r3, [pc, #84]	; (32c0 <udc_update_iface_desc+0x9c>)
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	785b      	ldrb	r3, [r3, #1]
    3270:	2b04      	cmp	r3, #4
    3272:	d10f      	bne.n	3294 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3274:	4b12      	ldr	r3, [pc, #72]	; (32c0 <udc_update_iface_desc+0x9c>)
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	789b      	ldrb	r3, [r3, #2]
    327a:	1dfa      	adds	r2, r7, #7
    327c:	7812      	ldrb	r2, [r2, #0]
    327e:	429a      	cmp	r2, r3
    3280:	d108      	bne.n	3294 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    3282:	4b0f      	ldr	r3, [pc, #60]	; (32c0 <udc_update_iface_desc+0x9c>)
    3284:	681b      	ldr	r3, [r3, #0]
    3286:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3288:	1dba      	adds	r2, r7, #6
    328a:	7812      	ldrb	r2, [r2, #0]
    328c:	429a      	cmp	r2, r3
    328e:	d101      	bne.n	3294 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3290:	2301      	movs	r3, #1
    3292:	e00d      	b.n	32b0 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3294:	4b0a      	ldr	r3, [pc, #40]	; (32c0 <udc_update_iface_desc+0x9c>)
    3296:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3298:	4b09      	ldr	r3, [pc, #36]	; (32c0 <udc_update_iface_desc+0x9c>)
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    329e:	18d2      	adds	r2, r2, r3
    32a0:	4b07      	ldr	r3, [pc, #28]	; (32c0 <udc_update_iface_desc+0x9c>)
    32a2:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    32a4:	4b06      	ldr	r3, [pc, #24]	; (32c0 <udc_update_iface_desc+0x9c>)
    32a6:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    32a8:	68fa      	ldr	r2, [r7, #12]
    32aa:	429a      	cmp	r2, r3
    32ac:	d8dd      	bhi.n	326a <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    32ae:	2300      	movs	r3, #0
}
    32b0:	0018      	movs	r0, r3
    32b2:	46bd      	mov	sp, r7
    32b4:	b004      	add	sp, #16
    32b6:	bd80      	pop	{r7, pc}
    32b8:	200001b8 	.word	0x200001b8
    32bc:	200001bc 	.word	0x200001bc
    32c0:	200001c0 	.word	0x200001c0
    32c4:	00003199 	.word	0x00003199

000032c8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	0002      	movs	r2, r0
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    32d4:	1dfb      	adds	r3, r7, #7
    32d6:	781b      	ldrb	r3, [r3, #0]
    32d8:	2100      	movs	r1, #0
    32da:	0018      	movs	r0, r3
    32dc:	4b21      	ldr	r3, [pc, #132]	; (3364 <udc_iface_disable+0x9c>)
    32de:	4798      	blx	r3
    32e0:	0003      	movs	r3, r0
    32e2:	001a      	movs	r2, r3
    32e4:	2301      	movs	r3, #1
    32e6:	4053      	eors	r3, r2
    32e8:	b2db      	uxtb	r3, r3
    32ea:	2b00      	cmp	r3, #0
    32ec:	d001      	beq.n	32f2 <udc_iface_disable+0x2a>
		return false;
    32ee:	2300      	movs	r3, #0
    32f0:	e034      	b.n	335c <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    32f2:	4b1d      	ldr	r3, [pc, #116]	; (3368 <udc_iface_disable+0xa0>)
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	685a      	ldr	r2, [r3, #4]
    32f8:	1dfb      	adds	r3, r7, #7
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	009b      	lsls	r3, r3, #2
    32fe:	18d3      	adds	r3, r2, r3
    3300:	681b      	ldr	r3, [r3, #0]
    3302:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3304:	68bb      	ldr	r3, [r7, #8]
    3306:	68db      	ldr	r3, [r3, #12]
    3308:	4798      	blx	r3
    330a:	0003      	movs	r3, r0
    330c:	001a      	movs	r2, r3
    330e:	1dfb      	adds	r3, r7, #7
    3310:	781b      	ldrb	r3, [r3, #0]
    3312:	0011      	movs	r1, r2
    3314:	0018      	movs	r0, r3
    3316:	4b13      	ldr	r3, [pc, #76]	; (3364 <udc_iface_disable+0x9c>)
    3318:	4798      	blx	r3
    331a:	0003      	movs	r3, r0
    331c:	001a      	movs	r2, r3
    331e:	2301      	movs	r3, #1
    3320:	4053      	eors	r3, r2
    3322:	b2db      	uxtb	r3, r3
    3324:	2b00      	cmp	r3, #0
    3326:	d001      	beq.n	332c <udc_iface_disable+0x64>
		return false;
    3328:	2300      	movs	r3, #0
    332a:	e017      	b.n	335c <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    332c:	4b0f      	ldr	r3, [pc, #60]	; (336c <udc_iface_disable+0xa4>)
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3332:	68fb      	ldr	r3, [r7, #12]
    3334:	2105      	movs	r1, #5
    3336:	0018      	movs	r0, r3
    3338:	4b0d      	ldr	r3, [pc, #52]	; (3370 <udc_iface_disable+0xa8>)
    333a:	4798      	blx	r3
    333c:	0003      	movs	r3, r0
    333e:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	2b00      	cmp	r3, #0
    3344:	d005      	beq.n	3352 <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3346:	68fb      	ldr	r3, [r7, #12]
    3348:	789b      	ldrb	r3, [r3, #2]
    334a:	0018      	movs	r0, r3
    334c:	4b09      	ldr	r3, [pc, #36]	; (3374 <udc_iface_disable+0xac>)
    334e:	4798      	blx	r3
		}
    3350:	e7ef      	b.n	3332 <udc_iface_disable+0x6a>
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
    3352:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    3354:	68bb      	ldr	r3, [r7, #8]
    3356:	685b      	ldr	r3, [r3, #4]
    3358:	4798      	blx	r3
	return true;
    335a:	2301      	movs	r3, #1
}
    335c:	0018      	movs	r0, r3
    335e:	46bd      	mov	sp, r7
    3360:	b004      	add	sp, #16
    3362:	bd80      	pop	{r7, pc}
    3364:	00003225 	.word	0x00003225
    3368:	200001bc 	.word	0x200001bc
    336c:	200001c0 	.word	0x200001c0
    3370:	000031c1 	.word	0x000031c1
    3374:	00005c3d 	.word	0x00005c3d

00003378 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3378:	b580      	push	{r7, lr}
    337a:	b084      	sub	sp, #16
    337c:	af00      	add	r7, sp, #0
    337e:	0002      	movs	r2, r0
    3380:	1dfb      	adds	r3, r7, #7
    3382:	701a      	strb	r2, [r3, #0]
    3384:	1dbb      	adds	r3, r7, #6
    3386:	1c0a      	adds	r2, r1, #0
    3388:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    338a:	1dbb      	adds	r3, r7, #6
    338c:	781a      	ldrb	r2, [r3, #0]
    338e:	1dfb      	adds	r3, r7, #7
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	0011      	movs	r1, r2
    3394:	0018      	movs	r0, r3
    3396:	4b1f      	ldr	r3, [pc, #124]	; (3414 <udc_iface_enable+0x9c>)
    3398:	4798      	blx	r3
    339a:	0003      	movs	r3, r0
    339c:	001a      	movs	r2, r3
    339e:	2301      	movs	r3, #1
    33a0:	4053      	eors	r3, r2
    33a2:	b2db      	uxtb	r3, r3
    33a4:	2b00      	cmp	r3, #0
    33a6:	d001      	beq.n	33ac <udc_iface_enable+0x34>
		return false;
    33a8:	2300      	movs	r3, #0
    33aa:	e02e      	b.n	340a <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    33ac:	4b1a      	ldr	r3, [pc, #104]	; (3418 <udc_iface_enable+0xa0>)
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    33b2:	68fb      	ldr	r3, [r7, #12]
    33b4:	2105      	movs	r1, #5
    33b6:	0018      	movs	r0, r3
    33b8:	4b18      	ldr	r3, [pc, #96]	; (341c <udc_iface_enable+0xa4>)
    33ba:	4798      	blx	r3
    33bc:	0003      	movs	r3, r0
    33be:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    33c0:	68fb      	ldr	r3, [r7, #12]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d015      	beq.n	33f2 <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    33c6:	68fb      	ldr	r3, [r7, #12]
    33c8:	7898      	ldrb	r0, [r3, #2]
    33ca:	68fb      	ldr	r3, [r7, #12]
    33cc:	78d9      	ldrb	r1, [r3, #3]
    33ce:	68fb      	ldr	r3, [r7, #12]
    33d0:	791a      	ldrb	r2, [r3, #4]
    33d2:	795b      	ldrb	r3, [r3, #5]
    33d4:	021b      	lsls	r3, r3, #8
    33d6:	4313      	orrs	r3, r2
    33d8:	b29b      	uxth	r3, r3
    33da:	001a      	movs	r2, r3
    33dc:	4b10      	ldr	r3, [pc, #64]	; (3420 <udc_iface_enable+0xa8>)
    33de:	4798      	blx	r3
    33e0:	0003      	movs	r3, r0
    33e2:	001a      	movs	r2, r3
    33e4:	2301      	movs	r3, #1
    33e6:	4053      	eors	r3, r2
    33e8:	b2db      	uxtb	r3, r3
    33ea:	2b00      	cmp	r3, #0
    33ec:	d0e1      	beq.n	33b2 <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    33ee:	2300      	movs	r3, #0
    33f0:	e00b      	b.n	340a <udc_iface_enable+0x92>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
    33f2:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    33f4:	4b0b      	ldr	r3, [pc, #44]	; (3424 <udc_iface_enable+0xac>)
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	685a      	ldr	r2, [r3, #4]
    33fa:	1dfb      	adds	r3, r7, #7
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	009b      	lsls	r3, r3, #2
    3400:	18d3      	adds	r3, r2, r3
    3402:	681b      	ldr	r3, [r3, #0]
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	4798      	blx	r3
    3408:	0003      	movs	r3, r0
}
    340a:	0018      	movs	r0, r3
    340c:	46bd      	mov	sp, r7
    340e:	b004      	add	sp, #16
    3410:	bd80      	pop	{r7, pc}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	00003225 	.word	0x00003225
    3418:	200001c0 	.word	0x200001c0
    341c:	000031c1 	.word	0x000031c1
    3420:	00005cc9 	.word	0x00005cc9
    3424:	200001bc 	.word	0x200001bc

00003428 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    3428:	b580      	push	{r7, lr}
    342a:	af00      	add	r7, sp, #0
	udd_enable();
    342c:	4b02      	ldr	r3, [pc, #8]	; (3438 <udc_start+0x10>)
    342e:	4798      	blx	r3
}
    3430:	46c0      	nop			; (mov r8, r8)
    3432:	46bd      	mov	sp, r7
    3434:	bd80      	pop	{r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	00006bb9 	.word	0x00006bb9

0000343c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    343c:	b580      	push	{r7, lr}
    343e:	b082      	sub	sp, #8
    3440:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3442:	4b16      	ldr	r3, [pc, #88]	; (349c <udc_reset+0x60>)
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	2b00      	cmp	r3, #0
    3448:	d015      	beq.n	3476 <udc_reset+0x3a>
		for (iface_num = 0;
    344a:	1dfb      	adds	r3, r7, #7
    344c:	2200      	movs	r2, #0
    344e:	701a      	strb	r2, [r3, #0]
    3450:	e009      	b.n	3466 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3452:	1dfb      	adds	r3, r7, #7
    3454:	781b      	ldrb	r3, [r3, #0]
    3456:	0018      	movs	r0, r3
    3458:	4b11      	ldr	r3, [pc, #68]	; (34a0 <udc_reset+0x64>)
    345a:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    345c:	1dfb      	adds	r3, r7, #7
    345e:	781a      	ldrb	r2, [r3, #0]
    3460:	1dfb      	adds	r3, r7, #7
    3462:	3201      	adds	r2, #1
    3464:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3466:	4b0f      	ldr	r3, [pc, #60]	; (34a4 <udc_reset+0x68>)
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    346e:	1dfa      	adds	r2, r7, #7
    3470:	7812      	ldrb	r2, [r2, #0]
    3472:	429a      	cmp	r2, r3
    3474:	d3ed      	bcc.n	3452 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3476:	4b09      	ldr	r3, [pc, #36]	; (349c <udc_reset+0x60>)
    3478:	2200      	movs	r2, #0
    347a:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    347c:	4b0a      	ldr	r3, [pc, #40]	; (34a8 <udc_reset+0x6c>)
    347e:	881b      	ldrh	r3, [r3, #0]
    3480:	2202      	movs	r2, #2
    3482:	4013      	ands	r3, r2
    3484:	b29b      	uxth	r3, r3
    3486:	2b00      	cmp	r3, #0
    3488:	d001      	beq.n	348e <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    348a:	4b08      	ldr	r3, [pc, #32]	; (34ac <udc_reset+0x70>)
    348c:	4798      	blx	r3
	}
#endif
	udc_device_status =
    348e:	4b06      	ldr	r3, [pc, #24]	; (34a8 <udc_reset+0x6c>)
    3490:	2200      	movs	r2, #0
    3492:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3494:	46c0      	nop			; (mov r8, r8)
    3496:	46bd      	mov	sp, r7
    3498:	b002      	add	sp, #8
    349a:	bd80      	pop	{r7, pc}
    349c:	200001b8 	.word	0x200001b8
    34a0:	000032c9 	.word	0x000032c9
    34a4:	200001bc 	.word	0x200001bc
    34a8:	200001b0 	.word	0x200001b0
    34ac:	00008d11 	.word	0x00008d11

000034b0 <udc_sof_notify>:

void udc_sof_notify(void)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	b082      	sub	sp, #8
    34b4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    34b6:	4b17      	ldr	r3, [pc, #92]	; (3514 <udc_sof_notify+0x64>)
    34b8:	781b      	ldrb	r3, [r3, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d025      	beq.n	350a <udc_sof_notify+0x5a>
		for (iface_num = 0;
    34be:	1dfb      	adds	r3, r7, #7
    34c0:	2200      	movs	r2, #0
    34c2:	701a      	strb	r2, [r3, #0]
    34c4:	e019      	b.n	34fa <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    34c6:	4b14      	ldr	r3, [pc, #80]	; (3518 <udc_sof_notify+0x68>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	685a      	ldr	r2, [r3, #4]
    34cc:	1dfb      	adds	r3, r7, #7
    34ce:	781b      	ldrb	r3, [r3, #0]
    34d0:	009b      	lsls	r3, r3, #2
    34d2:	18d3      	adds	r3, r2, r3
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	691b      	ldr	r3, [r3, #16]
    34d8:	2b00      	cmp	r3, #0
    34da:	d009      	beq.n	34f0 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    34dc:	4b0e      	ldr	r3, [pc, #56]	; (3518 <udc_sof_notify+0x68>)
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	685a      	ldr	r2, [r3, #4]
    34e2:	1dfb      	adds	r3, r7, #7
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	009b      	lsls	r3, r3, #2
    34e8:	18d3      	adds	r3, r2, r3
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	691b      	ldr	r3, [r3, #16]
    34ee:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    34f0:	1dfb      	adds	r3, r7, #7
    34f2:	781a      	ldrb	r2, [r3, #0]
    34f4:	1dfb      	adds	r3, r7, #7
    34f6:	3201      	adds	r2, #1
    34f8:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    34fa:	4b07      	ldr	r3, [pc, #28]	; (3518 <udc_sof_notify+0x68>)
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3502:	1dfa      	adds	r2, r7, #7
    3504:	7812      	ldrb	r2, [r2, #0]
    3506:	429a      	cmp	r2, r3
    3508:	d3dd      	bcc.n	34c6 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	46bd      	mov	sp, r7
    350e:	b002      	add	sp, #8
    3510:	bd80      	pop	{r7, pc}
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	200001b8 	.word	0x200001b8
    3518:	200001bc 	.word	0x200001bc

0000351c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    351c:	b580      	push	{r7, lr}
    351e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3520:	4b07      	ldr	r3, [pc, #28]	; (3540 <udc_req_std_dev_get_status+0x24>)
    3522:	88db      	ldrh	r3, [r3, #6]
    3524:	2b02      	cmp	r3, #2
    3526:	d001      	beq.n	352c <udc_req_std_dev_get_status+0x10>
		return false;
    3528:	2300      	movs	r3, #0
    352a:	e005      	b.n	3538 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    352c:	4b05      	ldr	r3, [pc, #20]	; (3544 <udc_req_std_dev_get_status+0x28>)
    352e:	2102      	movs	r1, #2
    3530:	0018      	movs	r0, r3
    3532:	4b05      	ldr	r3, [pc, #20]	; (3548 <udc_req_std_dev_get_status+0x2c>)
    3534:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    3536:	2301      	movs	r3, #1
}
    3538:	0018      	movs	r0, r3
    353a:	46bd      	mov	sp, r7
    353c:	bd80      	pop	{r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	200004e4 	.word	0x200004e4
    3544:	200001b0 	.word	0x200001b0
    3548:	000062d1 	.word	0x000062d1

0000354c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    354c:	b580      	push	{r7, lr}
    354e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3550:	4b0c      	ldr	r3, [pc, #48]	; (3584 <udc_req_std_ep_get_status+0x38>)
    3552:	88db      	ldrh	r3, [r3, #6]
    3554:	2b02      	cmp	r3, #2
    3556:	d001      	beq.n	355c <udc_req_std_ep_get_status+0x10>
		return false;
    3558:	2300      	movs	r3, #0
    355a:	e00f      	b.n	357c <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <udc_req_std_ep_get_status+0x38>)
    355e:	889b      	ldrh	r3, [r3, #4]
    3560:	b2db      	uxtb	r3, r3
    3562:	0018      	movs	r0, r3
    3564:	4b08      	ldr	r3, [pc, #32]	; (3588 <udc_req_std_ep_get_status+0x3c>)
    3566:	4798      	blx	r3
    3568:	0003      	movs	r3, r0
    356a:	b29a      	uxth	r2, r3
    356c:	4b07      	ldr	r3, [pc, #28]	; (358c <udc_req_std_ep_get_status+0x40>)
    356e:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3570:	4b06      	ldr	r3, [pc, #24]	; (358c <udc_req_std_ep_get_status+0x40>)
    3572:	2102      	movs	r1, #2
    3574:	0018      	movs	r0, r3
    3576:	4b06      	ldr	r3, [pc, #24]	; (3590 <udc_req_std_ep_get_status+0x44>)
    3578:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    357a:	2301      	movs	r3, #1
}
    357c:	0018      	movs	r0, r3
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	200004e4 	.word	0x200004e4
    3588:	00005e71 	.word	0x00005e71
    358c:	200001c4 	.word	0x200001c4
    3590:	000062d1 	.word	0x000062d1

00003594 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3594:	b580      	push	{r7, lr}
    3596:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3598:	4b0c      	ldr	r3, [pc, #48]	; (35cc <udc_req_std_dev_clear_feature+0x38>)
    359a:	88db      	ldrh	r3, [r3, #6]
    359c:	2b00      	cmp	r3, #0
    359e:	d001      	beq.n	35a4 <udc_req_std_dev_clear_feature+0x10>
		return false;
    35a0:	2300      	movs	r3, #0
    35a2:	e00f      	b.n	35c4 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    35a4:	4b09      	ldr	r3, [pc, #36]	; (35cc <udc_req_std_dev_clear_feature+0x38>)
    35a6:	885b      	ldrh	r3, [r3, #2]
    35a8:	2b01      	cmp	r3, #1
    35aa:	d10a      	bne.n	35c2 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    35ac:	4b08      	ldr	r3, [pc, #32]	; (35d0 <udc_req_std_dev_clear_feature+0x3c>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	2202      	movs	r2, #2
    35b2:	4393      	bics	r3, r2
    35b4:	b29a      	uxth	r2, r3
    35b6:	4b06      	ldr	r3, [pc, #24]	; (35d0 <udc_req_std_dev_clear_feature+0x3c>)
    35b8:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    35ba:	4b06      	ldr	r3, [pc, #24]	; (35d4 <udc_req_std_dev_clear_feature+0x40>)
    35bc:	4798      	blx	r3
#endif
		return true;
    35be:	2301      	movs	r3, #1
    35c0:	e000      	b.n	35c4 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    35c2:	2300      	movs	r3, #0
}
    35c4:	0018      	movs	r0, r3
    35c6:	46bd      	mov	sp, r7
    35c8:	bd80      	pop	{r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	200004e4 	.word	0x200004e4
    35d0:	200001b0 	.word	0x200001b0
    35d4:	00008d11 	.word	0x00008d11

000035d8 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    35d8:	b580      	push	{r7, lr}
    35da:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    35dc:	4b0a      	ldr	r3, [pc, #40]	; (3608 <udc_req_std_ep_clear_feature+0x30>)
    35de:	88db      	ldrh	r3, [r3, #6]
    35e0:	2b00      	cmp	r3, #0
    35e2:	d001      	beq.n	35e8 <udc_req_std_ep_clear_feature+0x10>
		return false;
    35e4:	2300      	movs	r3, #0
    35e6:	e00c      	b.n	3602 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    35e8:	4b07      	ldr	r3, [pc, #28]	; (3608 <udc_req_std_ep_clear_feature+0x30>)
    35ea:	885b      	ldrh	r3, [r3, #2]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d107      	bne.n	3600 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    35f0:	4b05      	ldr	r3, [pc, #20]	; (3608 <udc_req_std_ep_clear_feature+0x30>)
    35f2:	889b      	ldrh	r3, [r3, #4]
    35f4:	b2db      	uxtb	r3, r3
    35f6:	0018      	movs	r0, r3
    35f8:	4b04      	ldr	r3, [pc, #16]	; (360c <udc_req_std_ep_clear_feature+0x34>)
    35fa:	4798      	blx	r3
    35fc:	0003      	movs	r3, r0
    35fe:	e000      	b.n	3602 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    3600:	2300      	movs	r3, #0
}
    3602:	0018      	movs	r0, r3
    3604:	46bd      	mov	sp, r7
    3606:	bd80      	pop	{r7, pc}
    3608:	200004e4 	.word	0x200004e4
    360c:	00005ef5 	.word	0x00005ef5

00003610 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    3610:	b580      	push	{r7, lr}
    3612:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3614:	4b0c      	ldr	r3, [pc, #48]	; (3648 <udc_req_std_dev_set_feature+0x38>)
    3616:	88db      	ldrh	r3, [r3, #6]
    3618:	2b00      	cmp	r3, #0
    361a:	d001      	beq.n	3620 <udc_req_std_dev_set_feature+0x10>
		return false;
    361c:	2300      	movs	r3, #0
    361e:	e010      	b.n	3642 <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3620:	4b09      	ldr	r3, [pc, #36]	; (3648 <udc_req_std_dev_set_feature+0x38>)
    3622:	885b      	ldrh	r3, [r3, #2]
    3624:	2b01      	cmp	r3, #1
    3626:	d002      	beq.n	362e <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    3628:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    362a:	2300      	movs	r3, #0
    362c:	e009      	b.n	3642 <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    362e:	4b07      	ldr	r3, [pc, #28]	; (364c <udc_req_std_dev_set_feature+0x3c>)
    3630:	881b      	ldrh	r3, [r3, #0]
    3632:	2202      	movs	r2, #2
    3634:	4313      	orrs	r3, r2
    3636:	b29a      	uxth	r2, r3
    3638:	4b04      	ldr	r3, [pc, #16]	; (364c <udc_req_std_dev_set_feature+0x3c>)
    363a:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    363c:	4b04      	ldr	r3, [pc, #16]	; (3650 <udc_req_std_dev_set_feature+0x40>)
    363e:	4798      	blx	r3
		return true;
    3640:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    3642:	0018      	movs	r0, r3
    3644:	46bd      	mov	sp, r7
    3646:	bd80      	pop	{r7, pc}
    3648:	200004e4 	.word	0x200004e4
    364c:	200001b0 	.word	0x200001b0
    3650:	00008cfd 	.word	0x00008cfd

00003654 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    3654:	b580      	push	{r7, lr}
    3656:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3658:	4b0d      	ldr	r3, [pc, #52]	; (3690 <udc_req_std_ep_set_feature+0x3c>)
    365a:	88db      	ldrh	r3, [r3, #6]
    365c:	2b00      	cmp	r3, #0
    365e:	d001      	beq.n	3664 <udc_req_std_ep_set_feature+0x10>
		return false;
    3660:	2300      	movs	r3, #0
    3662:	e012      	b.n	368a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3664:	4b0a      	ldr	r3, [pc, #40]	; (3690 <udc_req_std_ep_set_feature+0x3c>)
    3666:	885b      	ldrh	r3, [r3, #2]
    3668:	2b00      	cmp	r3, #0
    366a:	d10d      	bne.n	3688 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    366c:	4b08      	ldr	r3, [pc, #32]	; (3690 <udc_req_std_ep_set_feature+0x3c>)
    366e:	889b      	ldrh	r3, [r3, #4]
    3670:	b2db      	uxtb	r3, r3
    3672:	0018      	movs	r0, r3
    3674:	4b07      	ldr	r3, [pc, #28]	; (3694 <udc_req_std_ep_set_feature+0x40>)
    3676:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3678:	4b05      	ldr	r3, [pc, #20]	; (3690 <udc_req_std_ep_set_feature+0x3c>)
    367a:	889b      	ldrh	r3, [r3, #4]
    367c:	b2db      	uxtb	r3, r3
    367e:	0018      	movs	r0, r3
    3680:	4b05      	ldr	r3, [pc, #20]	; (3698 <udc_req_std_ep_set_feature+0x44>)
    3682:	4798      	blx	r3
    3684:	0003      	movs	r3, r0
    3686:	e000      	b.n	368a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3688:	2300      	movs	r3, #0
}
    368a:	0018      	movs	r0, r3
    368c:	46bd      	mov	sp, r7
    368e:	bd80      	pop	{r7, pc}
    3690:	200004e4 	.word	0x200004e4
    3694:	00005bb1 	.word	0x00005bb1
    3698:	00005e9d 	.word	0x00005e9d

0000369c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    369c:	b580      	push	{r7, lr}
    369e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    36a0:	4b05      	ldr	r3, [pc, #20]	; (36b8 <udc_valid_address+0x1c>)
    36a2:	885b      	ldrh	r3, [r3, #2]
    36a4:	b2db      	uxtb	r3, r3
    36a6:	227f      	movs	r2, #127	; 0x7f
    36a8:	4013      	ands	r3, r2
    36aa:	b2db      	uxtb	r3, r3
    36ac:	0018      	movs	r0, r3
    36ae:	4b03      	ldr	r3, [pc, #12]	; (36bc <udc_valid_address+0x20>)
    36b0:	4798      	blx	r3
}
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	46bd      	mov	sp, r7
    36b6:	bd80      	pop	{r7, pc}
    36b8:	200004e4 	.word	0x200004e4
    36bc:	00006289 	.word	0x00006289

000036c0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    36c0:	b580      	push	{r7, lr}
    36c2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    36c4:	4b06      	ldr	r3, [pc, #24]	; (36e0 <udc_req_std_dev_set_address+0x20>)
    36c6:	88db      	ldrh	r3, [r3, #6]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d001      	beq.n	36d0 <udc_req_std_dev_set_address+0x10>
		return false;
    36cc:	2300      	movs	r3, #0
    36ce:	e003      	b.n	36d8 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    36d0:	4b03      	ldr	r3, [pc, #12]	; (36e0 <udc_req_std_dev_set_address+0x20>)
    36d2:	4a04      	ldr	r2, [pc, #16]	; (36e4 <udc_req_std_dev_set_address+0x24>)
    36d4:	611a      	str	r2, [r3, #16]
	return true;
    36d6:	2301      	movs	r3, #1
}
    36d8:	0018      	movs	r0, r3
    36da:	46bd      	mov	sp, r7
    36dc:	bd80      	pop	{r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	200004e4 	.word	0x200004e4
    36e4:	0000369d 	.word	0x0000369d

000036e8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    36e8:	b580      	push	{r7, lr}
    36ea:	b084      	sub	sp, #16
    36ec:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    36ee:	1dfb      	adds	r3, r7, #7
    36f0:	2200      	movs	r2, #0
    36f2:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    36f4:	4b2d      	ldr	r3, [pc, #180]	; (37ac <udc_req_std_dev_get_str_desc+0xc4>)
    36f6:	885b      	ldrh	r3, [r3, #2]
    36f8:	001a      	movs	r2, r3
    36fa:	23ff      	movs	r3, #255	; 0xff
    36fc:	4013      	ands	r3, r2
    36fe:	2b01      	cmp	r3, #1
    3700:	d009      	beq.n	3716 <udc_req_std_dev_get_str_desc+0x2e>
    3702:	2b02      	cmp	r3, #2
    3704:	d00d      	beq.n	3722 <udc_req_std_dev_get_str_desc+0x3a>
    3706:	2b00      	cmp	r3, #0
    3708:	d111      	bne.n	372e <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    370a:	4b29      	ldr	r3, [pc, #164]	; (37b0 <udc_req_std_dev_get_str_desc+0xc8>)
    370c:	2104      	movs	r1, #4
    370e:	0018      	movs	r0, r3
    3710:	4b28      	ldr	r3, [pc, #160]	; (37b4 <udc_req_std_dev_get_str_desc+0xcc>)
    3712:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    3714:	e00d      	b.n	3732 <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3716:	1dfb      	adds	r3, r7, #7
    3718:	2209      	movs	r2, #9
    371a:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    371c:	4b26      	ldr	r3, [pc, #152]	; (37b8 <udc_req_std_dev_get_str_desc+0xd0>)
    371e:	60bb      	str	r3, [r7, #8]
		break;
    3720:	e007      	b.n	3732 <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3722:	1dfb      	adds	r3, r7, #7
    3724:	2209      	movs	r2, #9
    3726:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    3728:	4b24      	ldr	r3, [pc, #144]	; (37bc <udc_req_std_dev_get_str_desc+0xd4>)
    372a:	60bb      	str	r3, [r7, #8]
		break;
    372c:	e001      	b.n	3732 <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    372e:	2300      	movs	r3, #0
    3730:	e037      	b.n	37a2 <udc_req_std_dev_get_str_desc+0xba>
	}

	if (str_length) {
    3732:	1dfb      	adds	r3, r7, #7
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	2b00      	cmp	r3, #0
    3738:	d032      	beq.n	37a0 <udc_req_std_dev_get_str_desc+0xb8>
		for(i = 0; i < str_length; i++) {
    373a:	230f      	movs	r3, #15
    373c:	18fb      	adds	r3, r7, r3
    373e:	2200      	movs	r2, #0
    3740:	701a      	strb	r2, [r3, #0]
    3742:	e016      	b.n	3772 <udc_req_std_dev_get_str_desc+0x8a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3744:	230f      	movs	r3, #15
    3746:	18fb      	adds	r3, r7, r3
    3748:	781b      	ldrb	r3, [r3, #0]
    374a:	220f      	movs	r2, #15
    374c:	18ba      	adds	r2, r7, r2
    374e:	7812      	ldrb	r2, [r2, #0]
    3750:	68b9      	ldr	r1, [r7, #8]
    3752:	188a      	adds	r2, r1, r2
    3754:	7812      	ldrb	r2, [r2, #0]
    3756:	b291      	uxth	r1, r2
    3758:	4a19      	ldr	r2, [pc, #100]	; (37c0 <udc_req_std_dev_get_str_desc+0xd8>)
    375a:	005b      	lsls	r3, r3, #1
    375c:	18d3      	adds	r3, r2, r3
    375e:	3302      	adds	r3, #2
    3760:	1c0a      	adds	r2, r1, #0
    3762:	801a      	strh	r2, [r3, #0]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3764:	230f      	movs	r3, #15
    3766:	18fb      	adds	r3, r7, r3
    3768:	781a      	ldrb	r2, [r3, #0]
    376a:	230f      	movs	r3, #15
    376c:	18fb      	adds	r3, r7, r3
    376e:	3201      	adds	r2, #1
    3770:	701a      	strb	r2, [r3, #0]
    3772:	230f      	movs	r3, #15
    3774:	18fa      	adds	r2, r7, r3
    3776:	1dfb      	adds	r3, r7, #7
    3778:	7812      	ldrb	r2, [r2, #0]
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	429a      	cmp	r2, r3
    377e:	d3e1      	bcc.n	3744 <udc_req_std_dev_get_str_desc+0x5c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3780:	1dfb      	adds	r3, r7, #7
    3782:	781b      	ldrb	r3, [r3, #0]
    3784:	3301      	adds	r3, #1
    3786:	b2db      	uxtb	r3, r3
    3788:	18db      	adds	r3, r3, r3
    378a:	b2da      	uxtb	r2, r3
    378c:	4b0c      	ldr	r3, [pc, #48]	; (37c0 <udc_req_std_dev_get_str_desc+0xd8>)
    378e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    3790:	4b0b      	ldr	r3, [pc, #44]	; (37c0 <udc_req_std_dev_get_str_desc+0xd8>)
    3792:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    3794:	b29a      	uxth	r2, r3
    3796:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <udc_req_std_dev_get_str_desc+0xd8>)
    3798:	0011      	movs	r1, r2
    379a:	0018      	movs	r0, r3
    379c:	4b05      	ldr	r3, [pc, #20]	; (37b4 <udc_req_std_dev_get_str_desc+0xcc>)
    379e:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    37a0:	2301      	movs	r3, #1
}
    37a2:	0018      	movs	r0, r3
    37a4:	46bd      	mov	sp, r7
    37a6:	b004      	add	sp, #16
    37a8:	bd80      	pop	{r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	200004e4 	.word	0x200004e4
    37b0:	200000ac 	.word	0x200000ac
    37b4:	000062d1 	.word	0x000062d1
    37b8:	200000b0 	.word	0x200000b0
    37bc:	200000bc 	.word	0x200000bc
    37c0:	200000c8 	.word	0x200000c8

000037c4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b082      	sub	sp, #8
    37c8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    37ca:	4b39      	ldr	r3, [pc, #228]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    37cc:	885a      	ldrh	r2, [r3, #2]
    37ce:	1dfb      	adds	r3, r7, #7
    37d0:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    37d2:	4b37      	ldr	r3, [pc, #220]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    37d4:	885b      	ldrh	r3, [r3, #2]
    37d6:	0a1b      	lsrs	r3, r3, #8
    37d8:	b29b      	uxth	r3, r3
    37da:	b2db      	uxtb	r3, r3
    37dc:	2b02      	cmp	r3, #2
    37de:	d013      	beq.n	3808 <udc_req_std_dev_get_descriptor+0x44>
    37e0:	dc02      	bgt.n	37e8 <udc_req_std_dev_get_descriptor+0x24>
    37e2:	2b01      	cmp	r3, #1
    37e4:	d005      	beq.n	37f2 <udc_req_std_dev_get_descriptor+0x2e>
    37e6:	e051      	b.n	388c <udc_req_std_dev_get_descriptor+0xc8>
    37e8:	2b03      	cmp	r3, #3
    37ea:	d044      	beq.n	3876 <udc_req_std_dev_get_descriptor+0xb2>
    37ec:	2b0f      	cmp	r3, #15
    37ee:	d02f      	beq.n	3850 <udc_req_std_dev_get_descriptor+0x8c>
    37f0:	e04c      	b.n	388c <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    37f2:	4b30      	ldr	r3, [pc, #192]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    37f4:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    37f6:	4b2f      	ldr	r3, [pc, #188]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    37fc:	b29b      	uxth	r3, r3
    37fe:	0019      	movs	r1, r3
    3800:	0010      	movs	r0, r2
    3802:	4b2d      	ldr	r3, [pc, #180]	; (38b8 <udc_req_std_dev_get_descriptor+0xf4>)
    3804:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    3806:	e044      	b.n	3892 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3808:	4b2a      	ldr	r3, [pc, #168]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	7c5b      	ldrb	r3, [r3, #17]
    380e:	1dfa      	adds	r2, r7, #7
    3810:	7812      	ldrb	r2, [r2, #0]
    3812:	429a      	cmp	r2, r3
    3814:	d301      	bcc.n	381a <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    3816:	2300      	movs	r3, #0
    3818:	e046      	b.n	38a8 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    381a:	4b26      	ldr	r3, [pc, #152]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    381c:	685a      	ldr	r2, [r3, #4]
    381e:	1dfb      	adds	r3, r7, #7
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	00db      	lsls	r3, r3, #3
    3824:	18d3      	adds	r3, r2, r3
    3826:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3828:	4b22      	ldr	r3, [pc, #136]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    382a:	685a      	ldr	r2, [r3, #4]
    382c:	1dfb      	adds	r3, r7, #7
    382e:	781b      	ldrb	r3, [r3, #0]
    3830:	00db      	lsls	r3, r3, #3
    3832:	18d3      	adds	r3, r2, r3
    3834:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3836:	789a      	ldrb	r2, [r3, #2]
    3838:	78db      	ldrb	r3, [r3, #3]
    383a:	021b      	lsls	r3, r3, #8
    383c:	4313      	orrs	r3, r2
    383e:	b29b      	uxth	r3, r3
    3840:	0019      	movs	r1, r3
    3842:	4b1d      	ldr	r3, [pc, #116]	; (38b8 <udc_req_std_dev_get_descriptor+0xf4>)
    3844:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3846:	4b1a      	ldr	r3, [pc, #104]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    3848:	689b      	ldr	r3, [r3, #8]
    384a:	2202      	movs	r2, #2
    384c:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    384e:	e020      	b.n	3892 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3850:	4b18      	ldr	r3, [pc, #96]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    3852:	689b      	ldr	r3, [r3, #8]
    3854:	2b00      	cmp	r3, #0
    3856:	d101      	bne.n	385c <udc_req_std_dev_get_descriptor+0x98>
			return false;
    3858:	2300      	movs	r3, #0
    385a:	e025      	b.n	38a8 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    385c:	4b15      	ldr	r3, [pc, #84]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    385e:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    3860:	4b14      	ldr	r3, [pc, #80]	; (38b4 <udc_req_std_dev_get_descriptor+0xf0>)
    3862:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3864:	789a      	ldrb	r2, [r3, #2]
    3866:	78db      	ldrb	r3, [r3, #3]
    3868:	021b      	lsls	r3, r3, #8
    386a:	4313      	orrs	r3, r2
    386c:	b29b      	uxth	r3, r3
    386e:	0019      	movs	r1, r3
    3870:	4b11      	ldr	r3, [pc, #68]	; (38b8 <udc_req_std_dev_get_descriptor+0xf4>)
    3872:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    3874:	e00d      	b.n	3892 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    3876:	4b11      	ldr	r3, [pc, #68]	; (38bc <udc_req_std_dev_get_descriptor+0xf8>)
    3878:	4798      	blx	r3
    387a:	0003      	movs	r3, r0
    387c:	001a      	movs	r2, r3
    387e:	2301      	movs	r3, #1
    3880:	4053      	eors	r3, r2
    3882:	b2db      	uxtb	r3, r3
    3884:	2b00      	cmp	r3, #0
    3886:	d003      	beq.n	3890 <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    3888:	2300      	movs	r3, #0
    388a:	e00d      	b.n	38a8 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    388c:	2300      	movs	r3, #0
    388e:	e00b      	b.n	38a8 <udc_req_std_dev_get_descriptor+0xe4>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
    3890:	46c0      	nop			; (mov r8, r8)
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3892:	4b07      	ldr	r3, [pc, #28]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    3894:	88da      	ldrh	r2, [r3, #6]
    3896:	4b06      	ldr	r3, [pc, #24]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    3898:	899b      	ldrh	r3, [r3, #12]
    389a:	429a      	cmp	r2, r3
    389c:	d203      	bcs.n	38a6 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    389e:	4b04      	ldr	r3, [pc, #16]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    38a0:	88da      	ldrh	r2, [r3, #6]
    38a2:	4b03      	ldr	r3, [pc, #12]	; (38b0 <udc_req_std_dev_get_descriptor+0xec>)
    38a4:	819a      	strh	r2, [r3, #12]
	}
	return true;
    38a6:	2301      	movs	r3, #1
}
    38a8:	0018      	movs	r0, r3
    38aa:	46bd      	mov	sp, r7
    38ac:	b002      	add	sp, #8
    38ae:	bd80      	pop	{r7, pc}
    38b0:	200004e4 	.word	0x200004e4
    38b4:	200000a0 	.word	0x200000a0
    38b8:	000062d1 	.word	0x000062d1
    38bc:	000036e9 	.word	0x000036e9

000038c0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    38c0:	b580      	push	{r7, lr}
    38c2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    38c4:	4b07      	ldr	r3, [pc, #28]	; (38e4 <udc_req_std_dev_get_configuration+0x24>)
    38c6:	88db      	ldrh	r3, [r3, #6]
    38c8:	2b01      	cmp	r3, #1
    38ca:	d001      	beq.n	38d0 <udc_req_std_dev_get_configuration+0x10>
		return false;
    38cc:	2300      	movs	r3, #0
    38ce:	e005      	b.n	38dc <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    38d0:	4b05      	ldr	r3, [pc, #20]	; (38e8 <udc_req_std_dev_get_configuration+0x28>)
    38d2:	2101      	movs	r1, #1
    38d4:	0018      	movs	r0, r3
    38d6:	4b05      	ldr	r3, [pc, #20]	; (38ec <udc_req_std_dev_get_configuration+0x2c>)
    38d8:	4798      	blx	r3
	return true;
    38da:	2301      	movs	r3, #1
}
    38dc:	0018      	movs	r0, r3
    38de:	46bd      	mov	sp, r7
    38e0:	bd80      	pop	{r7, pc}
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	200004e4 	.word	0x200004e4
    38e8:	200001b8 	.word	0x200001b8
    38ec:	000062d1 	.word	0x000062d1

000038f0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b082      	sub	sp, #8
    38f4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    38f6:	4b2a      	ldr	r3, [pc, #168]	; (39a0 <udc_req_std_dev_set_configuration+0xb0>)
    38f8:	88db      	ldrh	r3, [r3, #6]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d001      	beq.n	3902 <udc_req_std_dev_set_configuration+0x12>
		return false;
    38fe:	2300      	movs	r3, #0
    3900:	e04a      	b.n	3998 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3902:	4b28      	ldr	r3, [pc, #160]	; (39a4 <udc_req_std_dev_set_configuration+0xb4>)
    3904:	4798      	blx	r3
    3906:	1e03      	subs	r3, r0, #0
    3908:	d101      	bne.n	390e <udc_req_std_dev_set_configuration+0x1e>
		return false;
    390a:	2300      	movs	r3, #0
    390c:	e044      	b.n	3998 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    390e:	4b24      	ldr	r3, [pc, #144]	; (39a0 <udc_req_std_dev_set_configuration+0xb0>)
    3910:	885b      	ldrh	r3, [r3, #2]
    3912:	001a      	movs	r2, r3
    3914:	23ff      	movs	r3, #255	; 0xff
    3916:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    3918:	4b23      	ldr	r3, [pc, #140]	; (39a8 <udc_req_std_dev_set_configuration+0xb8>)
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    391e:	429a      	cmp	r2, r3
    3920:	dd01      	ble.n	3926 <udc_req_std_dev_set_configuration+0x36>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    3922:	2300      	movs	r3, #0
    3924:	e038      	b.n	3998 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    3926:	4b21      	ldr	r3, [pc, #132]	; (39ac <udc_req_std_dev_set_configuration+0xbc>)
    3928:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    392a:	4b1d      	ldr	r3, [pc, #116]	; (39a0 <udc_req_std_dev_set_configuration+0xb0>)
    392c:	885b      	ldrh	r3, [r3, #2]
    392e:	b2da      	uxtb	r2, r3
    3930:	4b1f      	ldr	r3, [pc, #124]	; (39b0 <udc_req_std_dev_set_configuration+0xc0>)
    3932:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    3934:	4b1e      	ldr	r3, [pc, #120]	; (39b0 <udc_req_std_dev_set_configuration+0xc0>)
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	2b00      	cmp	r3, #0
    393a:	d101      	bne.n	3940 <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    393c:	2301      	movs	r3, #1
    393e:	e02b      	b.n	3998 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3940:	4b19      	ldr	r3, [pc, #100]	; (39a8 <udc_req_std_dev_set_configuration+0xb8>)
    3942:	685a      	ldr	r2, [r3, #4]
    3944:	4b1a      	ldr	r3, [pc, #104]	; (39b0 <udc_req_std_dev_set_configuration+0xc0>)
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	491a      	ldr	r1, [pc, #104]	; (39b4 <udc_req_std_dev_set_configuration+0xc4>)
    394a:	468c      	mov	ip, r1
    394c:	4463      	add	r3, ip
    394e:	00db      	lsls	r3, r3, #3
    3950:	18d2      	adds	r2, r2, r3
    3952:	4b19      	ldr	r3, [pc, #100]	; (39b8 <udc_req_std_dev_set_configuration+0xc8>)
    3954:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3956:	1dfb      	adds	r3, r7, #7
    3958:	2200      	movs	r2, #0
    395a:	701a      	strb	r2, [r3, #0]
    395c:	e013      	b.n	3986 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    395e:	1dfb      	adds	r3, r7, #7
    3960:	781b      	ldrb	r3, [r3, #0]
    3962:	2100      	movs	r1, #0
    3964:	0018      	movs	r0, r3
    3966:	4b15      	ldr	r3, [pc, #84]	; (39bc <udc_req_std_dev_set_configuration+0xcc>)
    3968:	4798      	blx	r3
    396a:	0003      	movs	r3, r0
    396c:	001a      	movs	r2, r3
    396e:	2301      	movs	r3, #1
    3970:	4053      	eors	r3, r2
    3972:	b2db      	uxtb	r3, r3
    3974:	2b00      	cmp	r3, #0
    3976:	d001      	beq.n	397c <udc_req_std_dev_set_configuration+0x8c>
			return false;
    3978:	2300      	movs	r3, #0
    397a:	e00d      	b.n	3998 <udc_req_std_dev_set_configuration+0xa8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    397c:	1dfb      	adds	r3, r7, #7
    397e:	781a      	ldrb	r2, [r3, #0]
    3980:	1dfb      	adds	r3, r7, #7
    3982:	3201      	adds	r2, #1
    3984:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3986:	4b0c      	ldr	r3, [pc, #48]	; (39b8 <udc_req_std_dev_set_configuration+0xc8>)
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	791b      	ldrb	r3, [r3, #4]
    398e:	1dfa      	adds	r2, r7, #7
    3990:	7812      	ldrb	r2, [r2, #0]
    3992:	429a      	cmp	r2, r3
    3994:	d3e3      	bcc.n	395e <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    3996:	2301      	movs	r3, #1
}
    3998:	0018      	movs	r0, r3
    399a:	46bd      	mov	sp, r7
    399c:	b002      	add	sp, #8
    399e:	bd80      	pop	{r7, pc}
    39a0:	200004e4 	.word	0x200004e4
    39a4:	000062b5 	.word	0x000062b5
    39a8:	200000a0 	.word	0x200000a0
    39ac:	0000343d 	.word	0x0000343d
    39b0:	200001b8 	.word	0x200001b8
    39b4:	1fffffff 	.word	0x1fffffff
    39b8:	200001bc 	.word	0x200001bc
    39bc:	00003379 	.word	0x00003379

000039c0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    39c6:	4b21      	ldr	r3, [pc, #132]	; (3a4c <udc_req_std_iface_get_setting+0x8c>)
    39c8:	88db      	ldrh	r3, [r3, #6]
    39ca:	2b01      	cmp	r3, #1
    39cc:	d001      	beq.n	39d2 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    39ce:	2300      	movs	r3, #0
    39d0:	e038      	b.n	3a44 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    39d2:	4b1f      	ldr	r3, [pc, #124]	; (3a50 <udc_req_std_iface_get_setting+0x90>)
    39d4:	781b      	ldrb	r3, [r3, #0]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d101      	bne.n	39de <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    39da:	2300      	movs	r3, #0
    39dc:	e032      	b.n	3a44 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    39de:	4b1b      	ldr	r3, [pc, #108]	; (3a4c <udc_req_std_iface_get_setting+0x8c>)
    39e0:	889a      	ldrh	r2, [r3, #4]
    39e2:	1dfb      	adds	r3, r7, #7
    39e4:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    39e6:	4b1b      	ldr	r3, [pc, #108]	; (3a54 <udc_req_std_iface_get_setting+0x94>)
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	681b      	ldr	r3, [r3, #0]
    39ec:	791b      	ldrb	r3, [r3, #4]
    39ee:	1dfa      	adds	r2, r7, #7
    39f0:	7812      	ldrb	r2, [r2, #0]
    39f2:	429a      	cmp	r2, r3
    39f4:	d301      	bcc.n	39fa <udc_req_std_iface_get_setting+0x3a>
		return false;
    39f6:	2300      	movs	r3, #0
    39f8:	e024      	b.n	3a44 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    39fa:	1dfb      	adds	r3, r7, #7
    39fc:	781b      	ldrb	r3, [r3, #0]
    39fe:	2100      	movs	r1, #0
    3a00:	0018      	movs	r0, r3
    3a02:	4b15      	ldr	r3, [pc, #84]	; (3a58 <udc_req_std_iface_get_setting+0x98>)
    3a04:	4798      	blx	r3
    3a06:	0003      	movs	r3, r0
    3a08:	001a      	movs	r2, r3
    3a0a:	2301      	movs	r3, #1
    3a0c:	4053      	eors	r3, r2
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2b00      	cmp	r3, #0
    3a12:	d001      	beq.n	3a18 <udc_req_std_iface_get_setting+0x58>
		return false;
    3a14:	2300      	movs	r3, #0
    3a16:	e015      	b.n	3a44 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3a18:	4b0e      	ldr	r3, [pc, #56]	; (3a54 <udc_req_std_iface_get_setting+0x94>)
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	685a      	ldr	r2, [r3, #4]
    3a1e:	1dfb      	adds	r3, r7, #7
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	009b      	lsls	r3, r3, #2
    3a24:	18d3      	adds	r3, r2, r3
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    3a2a:	683b      	ldr	r3, [r7, #0]
    3a2c:	68db      	ldr	r3, [r3, #12]
    3a2e:	4798      	blx	r3
    3a30:	0003      	movs	r3, r0
    3a32:	001a      	movs	r2, r3
    3a34:	4b09      	ldr	r3, [pc, #36]	; (3a5c <udc_req_std_iface_get_setting+0x9c>)
    3a36:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3a38:	4b08      	ldr	r3, [pc, #32]	; (3a5c <udc_req_std_iface_get_setting+0x9c>)
    3a3a:	2101      	movs	r1, #1
    3a3c:	0018      	movs	r0, r3
    3a3e:	4b08      	ldr	r3, [pc, #32]	; (3a60 <udc_req_std_iface_get_setting+0xa0>)
    3a40:	4798      	blx	r3
	return true;
    3a42:	2301      	movs	r3, #1
}
    3a44:	0018      	movs	r0, r3
    3a46:	46bd      	mov	sp, r7
    3a48:	b002      	add	sp, #8
    3a4a:	bd80      	pop	{r7, pc}
    3a4c:	200004e4 	.word	0x200004e4
    3a50:	200001b8 	.word	0x200001b8
    3a54:	200001bc 	.word	0x200001bc
    3a58:	00003225 	.word	0x00003225
    3a5c:	200001b4 	.word	0x200001b4
    3a60:	000062d1 	.word	0x000062d1

00003a64 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    3a64:	b580      	push	{r7, lr}
    3a66:	b082      	sub	sp, #8
    3a68:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3a6a:	4b17      	ldr	r3, [pc, #92]	; (3ac8 <udc_req_std_iface_set_setting+0x64>)
    3a6c:	88db      	ldrh	r3, [r3, #6]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d001      	beq.n	3a76 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    3a72:	2300      	movs	r3, #0
    3a74:	e024      	b.n	3ac0 <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    3a76:	4b15      	ldr	r3, [pc, #84]	; (3acc <udc_req_std_iface_set_setting+0x68>)
    3a78:	781b      	ldrb	r3, [r3, #0]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d101      	bne.n	3a82 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    3a7e:	2300      	movs	r3, #0
    3a80:	e01e      	b.n	3ac0 <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3a82:	4b11      	ldr	r3, [pc, #68]	; (3ac8 <udc_req_std_iface_set_setting+0x64>)
    3a84:	889a      	ldrh	r2, [r3, #4]
    3a86:	1dfb      	adds	r3, r7, #7
    3a88:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3a8a:	4b0f      	ldr	r3, [pc, #60]	; (3ac8 <udc_req_std_iface_set_setting+0x64>)
    3a8c:	885a      	ldrh	r2, [r3, #2]
    3a8e:	1dbb      	adds	r3, r7, #6
    3a90:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3a92:	1dfb      	adds	r3, r7, #7
    3a94:	781b      	ldrb	r3, [r3, #0]
    3a96:	0018      	movs	r0, r3
    3a98:	4b0d      	ldr	r3, [pc, #52]	; (3ad0 <udc_req_std_iface_set_setting+0x6c>)
    3a9a:	4798      	blx	r3
    3a9c:	0003      	movs	r3, r0
    3a9e:	001a      	movs	r2, r3
    3aa0:	2301      	movs	r3, #1
    3aa2:	4053      	eors	r3, r2
    3aa4:	b2db      	uxtb	r3, r3
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d001      	beq.n	3aae <udc_req_std_iface_set_setting+0x4a>
		return false;
    3aaa:	2300      	movs	r3, #0
    3aac:	e008      	b.n	3ac0 <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3aae:	1dbb      	adds	r3, r7, #6
    3ab0:	781a      	ldrb	r2, [r3, #0]
    3ab2:	1dfb      	adds	r3, r7, #7
    3ab4:	781b      	ldrb	r3, [r3, #0]
    3ab6:	0011      	movs	r1, r2
    3ab8:	0018      	movs	r0, r3
    3aba:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <udc_req_std_iface_set_setting+0x70>)
    3abc:	4798      	blx	r3
    3abe:	0003      	movs	r3, r0
}
    3ac0:	0018      	movs	r0, r3
    3ac2:	46bd      	mov	sp, r7
    3ac4:	b002      	add	sp, #8
    3ac6:	bd80      	pop	{r7, pc}
    3ac8:	200004e4 	.word	0x200004e4
    3acc:	200001b8 	.word	0x200001b8
    3ad0:	000032c9 	.word	0x000032c9
    3ad4:	00003379 	.word	0x00003379

00003ad8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    3adc:	4b47      	ldr	r3, [pc, #284]	; (3bfc <udc_reqstd+0x124>)
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	b25b      	sxtb	r3, r3
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	da40      	bge.n	3b68 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    3ae6:	4b45      	ldr	r3, [pc, #276]	; (3bfc <udc_reqstd+0x124>)
    3ae8:	88db      	ldrh	r3, [r3, #6]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d101      	bne.n	3af2 <udc_reqstd+0x1a>
			return false; // Error for USB host
    3aee:	2300      	movs	r3, #0
    3af0:	e081      	b.n	3bf6 <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3af2:	4b42      	ldr	r3, [pc, #264]	; (3bfc <udc_reqstd+0x124>)
    3af4:	781b      	ldrb	r3, [r3, #0]
    3af6:	001a      	movs	r2, r3
    3af8:	231f      	movs	r3, #31
    3afa:	4013      	ands	r3, r2
    3afc:	d114      	bne.n	3b28 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3afe:	4b3f      	ldr	r3, [pc, #252]	; (3bfc <udc_reqstd+0x124>)
    3b00:	785b      	ldrb	r3, [r3, #1]
    3b02:	2b06      	cmp	r3, #6
    3b04:	d008      	beq.n	3b18 <udc_reqstd+0x40>
    3b06:	2b08      	cmp	r3, #8
    3b08:	d00a      	beq.n	3b20 <udc_reqstd+0x48>
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d000      	beq.n	3b10 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    3b0e:	e00b      	b.n	3b28 <udc_reqstd+0x50>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    3b10:	4b3b      	ldr	r3, [pc, #236]	; (3c00 <udc_reqstd+0x128>)
    3b12:	4798      	blx	r3
    3b14:	0003      	movs	r3, r0
    3b16:	e06e      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    3b18:	4b3a      	ldr	r3, [pc, #232]	; (3c04 <udc_reqstd+0x12c>)
    3b1a:	4798      	blx	r3
    3b1c:	0003      	movs	r3, r0
    3b1e:	e06a      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    3b20:	4b39      	ldr	r3, [pc, #228]	; (3c08 <udc_reqstd+0x130>)
    3b22:	4798      	blx	r3
    3b24:	0003      	movs	r3, r0
    3b26:	e066      	b.n	3bf6 <udc_reqstd+0x11e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3b28:	4b34      	ldr	r3, [pc, #208]	; (3bfc <udc_reqstd+0x124>)
    3b2a:	781b      	ldrb	r3, [r3, #0]
    3b2c:	001a      	movs	r2, r3
    3b2e:	231f      	movs	r3, #31
    3b30:	4013      	ands	r3, r2
    3b32:	2b01      	cmp	r3, #1
    3b34:	d108      	bne.n	3b48 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3b36:	4b31      	ldr	r3, [pc, #196]	; (3bfc <udc_reqstd+0x124>)
    3b38:	785b      	ldrb	r3, [r3, #1]
    3b3a:	2b0a      	cmp	r3, #10
    3b3c:	d000      	beq.n	3b40 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    3b3e:	e003      	b.n	3b48 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    3b40:	4b32      	ldr	r3, [pc, #200]	; (3c0c <udc_reqstd+0x134>)
    3b42:	4798      	blx	r3
    3b44:	0003      	movs	r3, r0
    3b46:	e056      	b.n	3bf6 <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3b48:	4b2c      	ldr	r3, [pc, #176]	; (3bfc <udc_reqstd+0x124>)
    3b4a:	781b      	ldrb	r3, [r3, #0]
    3b4c:	001a      	movs	r2, r3
    3b4e:	231f      	movs	r3, #31
    3b50:	4013      	ands	r3, r2
    3b52:	2b02      	cmp	r3, #2
    3b54:	d14e      	bne.n	3bf4 <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3b56:	4b29      	ldr	r3, [pc, #164]	; (3bfc <udc_reqstd+0x124>)
    3b58:	785b      	ldrb	r3, [r3, #1]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d000      	beq.n	3b60 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    3b5e:	e049      	b.n	3bf4 <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    3b60:	4b2b      	ldr	r3, [pc, #172]	; (3c10 <udc_reqstd+0x138>)
    3b62:	4798      	blx	r3
    3b64:	0003      	movs	r3, r0
    3b66:	e046      	b.n	3bf6 <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3b68:	4b24      	ldr	r3, [pc, #144]	; (3bfc <udc_reqstd+0x124>)
    3b6a:	781b      	ldrb	r3, [r3, #0]
    3b6c:	001a      	movs	r2, r3
    3b6e:	231f      	movs	r3, #31
    3b70:	4013      	ands	r3, r2
    3b72:	d119      	bne.n	3ba8 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3b74:	4b21      	ldr	r3, [pc, #132]	; (3bfc <udc_reqstd+0x124>)
    3b76:	785b      	ldrb	r3, [r3, #1]
    3b78:	2b09      	cmp	r3, #9
    3b7a:	d814      	bhi.n	3ba6 <udc_reqstd+0xce>
    3b7c:	009a      	lsls	r2, r3, #2
    3b7e:	4b25      	ldr	r3, [pc, #148]	; (3c14 <udc_reqstd+0x13c>)
    3b80:	18d3      	adds	r3, r2, r3
    3b82:	681b      	ldr	r3, [r3, #0]
    3b84:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    3b86:	4b24      	ldr	r3, [pc, #144]	; (3c18 <udc_reqstd+0x140>)
    3b88:	4798      	blx	r3
    3b8a:	0003      	movs	r3, r0
    3b8c:	e033      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    3b8e:	4b23      	ldr	r3, [pc, #140]	; (3c1c <udc_reqstd+0x144>)
    3b90:	4798      	blx	r3
    3b92:	0003      	movs	r3, r0
    3b94:	e02f      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    3b96:	4b22      	ldr	r3, [pc, #136]	; (3c20 <udc_reqstd+0x148>)
    3b98:	4798      	blx	r3
    3b9a:	0003      	movs	r3, r0
    3b9c:	e02b      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    3b9e:	4b21      	ldr	r3, [pc, #132]	; (3c24 <udc_reqstd+0x14c>)
    3ba0:	4798      	blx	r3
    3ba2:	0003      	movs	r3, r0
    3ba4:	e027      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    3ba6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3ba8:	4b14      	ldr	r3, [pc, #80]	; (3bfc <udc_reqstd+0x124>)
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	001a      	movs	r2, r3
    3bae:	231f      	movs	r3, #31
    3bb0:	4013      	ands	r3, r2
    3bb2:	2b01      	cmp	r3, #1
    3bb4:	d108      	bne.n	3bc8 <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3bb6:	4b11      	ldr	r3, [pc, #68]	; (3bfc <udc_reqstd+0x124>)
    3bb8:	785b      	ldrb	r3, [r3, #1]
    3bba:	2b0b      	cmp	r3, #11
    3bbc:	d000      	beq.n	3bc0 <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    3bbe:	e003      	b.n	3bc8 <udc_reqstd+0xf0>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    3bc0:	4b19      	ldr	r3, [pc, #100]	; (3c28 <udc_reqstd+0x150>)
    3bc2:	4798      	blx	r3
    3bc4:	0003      	movs	r3, r0
    3bc6:	e016      	b.n	3bf6 <udc_reqstd+0x11e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3bc8:	4b0c      	ldr	r3, [pc, #48]	; (3bfc <udc_reqstd+0x124>)
    3bca:	781b      	ldrb	r3, [r3, #0]
    3bcc:	001a      	movs	r2, r3
    3bce:	231f      	movs	r3, #31
    3bd0:	4013      	ands	r3, r2
    3bd2:	2b02      	cmp	r3, #2
    3bd4:	d10e      	bne.n	3bf4 <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3bd6:	4b09      	ldr	r3, [pc, #36]	; (3bfc <udc_reqstd+0x124>)
    3bd8:	785b      	ldrb	r3, [r3, #1]
    3bda:	2b01      	cmp	r3, #1
    3bdc:	d002      	beq.n	3be4 <udc_reqstd+0x10c>
    3bde:	2b03      	cmp	r3, #3
    3be0:	d004      	beq.n	3bec <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    3be2:	e007      	b.n	3bf4 <udc_reqstd+0x11c>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    3be4:	4b11      	ldr	r3, [pc, #68]	; (3c2c <udc_reqstd+0x154>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
    3bea:	e004      	b.n	3bf6 <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    3bec:	4b10      	ldr	r3, [pc, #64]	; (3c30 <udc_reqstd+0x158>)
    3bee:	4798      	blx	r3
    3bf0:	0003      	movs	r3, r0
    3bf2:	e000      	b.n	3bf6 <udc_reqstd+0x11e>
				break;
			}
		}
#endif
	}
	return false;
    3bf4:	2300      	movs	r3, #0
}
    3bf6:	0018      	movs	r0, r3
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	200004e4 	.word	0x200004e4
    3c00:	0000351d 	.word	0x0000351d
    3c04:	000037c5 	.word	0x000037c5
    3c08:	000038c1 	.word	0x000038c1
    3c0c:	000039c1 	.word	0x000039c1
    3c10:	0000354d 	.word	0x0000354d
    3c14:	00009168 	.word	0x00009168
    3c18:	000036c1 	.word	0x000036c1
    3c1c:	00003595 	.word	0x00003595
    3c20:	00003611 	.word	0x00003611
    3c24:	000038f1 	.word	0x000038f1
    3c28:	00003a65 	.word	0x00003a65
    3c2c:	000035d9 	.word	0x000035d9
    3c30:	00003655 	.word	0x00003655

00003c34 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b082      	sub	sp, #8
    3c38:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3c3a:	4b24      	ldr	r3, [pc, #144]	; (3ccc <udc_req_iface+0x98>)
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d101      	bne.n	3c46 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    3c42:	2300      	movs	r3, #0
    3c44:	e03d      	b.n	3cc2 <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3c46:	4b22      	ldr	r3, [pc, #136]	; (3cd0 <udc_req_iface+0x9c>)
    3c48:	889a      	ldrh	r2, [r3, #4]
    3c4a:	1dfb      	adds	r3, r7, #7
    3c4c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3c4e:	4b21      	ldr	r3, [pc, #132]	; (3cd4 <udc_req_iface+0xa0>)
    3c50:	681b      	ldr	r3, [r3, #0]
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	791b      	ldrb	r3, [r3, #4]
    3c56:	1dfa      	adds	r2, r7, #7
    3c58:	7812      	ldrb	r2, [r2, #0]
    3c5a:	429a      	cmp	r2, r3
    3c5c:	d301      	bcc.n	3c62 <udc_req_iface+0x2e>
		return false;
    3c5e:	2300      	movs	r3, #0
    3c60:	e02f      	b.n	3cc2 <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3c62:	1dfb      	adds	r3, r7, #7
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	2100      	movs	r1, #0
    3c68:	0018      	movs	r0, r3
    3c6a:	4b1b      	ldr	r3, [pc, #108]	; (3cd8 <udc_req_iface+0xa4>)
    3c6c:	4798      	blx	r3
    3c6e:	0003      	movs	r3, r0
    3c70:	001a      	movs	r2, r3
    3c72:	2301      	movs	r3, #1
    3c74:	4053      	eors	r3, r2
    3c76:	b2db      	uxtb	r3, r3
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d001      	beq.n	3c80 <udc_req_iface+0x4c>
		return false;
    3c7c:	2300      	movs	r3, #0
    3c7e:	e020      	b.n	3cc2 <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3c80:	4b14      	ldr	r3, [pc, #80]	; (3cd4 <udc_req_iface+0xa0>)
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	685a      	ldr	r2, [r3, #4]
    3c86:	1dfb      	adds	r3, r7, #7
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	009b      	lsls	r3, r3, #2
    3c8c:	18d3      	adds	r3, r2, r3
    3c8e:	681b      	ldr	r3, [r3, #0]
    3c90:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3c92:	683b      	ldr	r3, [r7, #0]
    3c94:	68db      	ldr	r3, [r3, #12]
    3c96:	4798      	blx	r3
    3c98:	0003      	movs	r3, r0
    3c9a:	001a      	movs	r2, r3
    3c9c:	1dfb      	adds	r3, r7, #7
    3c9e:	781b      	ldrb	r3, [r3, #0]
    3ca0:	0011      	movs	r1, r2
    3ca2:	0018      	movs	r0, r3
    3ca4:	4b0c      	ldr	r3, [pc, #48]	; (3cd8 <udc_req_iface+0xa4>)
    3ca6:	4798      	blx	r3
    3ca8:	0003      	movs	r3, r0
    3caa:	001a      	movs	r2, r3
    3cac:	2301      	movs	r3, #1
    3cae:	4053      	eors	r3, r2
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d001      	beq.n	3cba <udc_req_iface+0x86>
		return false;
    3cb6:	2300      	movs	r3, #0
    3cb8:	e003      	b.n	3cc2 <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3cba:	683b      	ldr	r3, [r7, #0]
    3cbc:	689b      	ldr	r3, [r3, #8]
    3cbe:	4798      	blx	r3
    3cc0:	0003      	movs	r3, r0
}
    3cc2:	0018      	movs	r0, r3
    3cc4:	46bd      	mov	sp, r7
    3cc6:	b002      	add	sp, #8
    3cc8:	bd80      	pop	{r7, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	200001b8 	.word	0x200001b8
    3cd0:	200004e4 	.word	0x200004e4
    3cd4:	200001bc 	.word	0x200001bc
    3cd8:	00003225 	.word	0x00003225

00003cdc <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b082      	sub	sp, #8
    3ce0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3ce2:	4b22      	ldr	r3, [pc, #136]	; (3d6c <udc_req_ep+0x90>)
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d101      	bne.n	3cee <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    3cea:	2300      	movs	r3, #0
    3cec:	e039      	b.n	3d62 <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3cee:	4b20      	ldr	r3, [pc, #128]	; (3d70 <udc_req_ep+0x94>)
    3cf0:	889a      	ldrh	r2, [r3, #4]
    3cf2:	1dfb      	adds	r3, r7, #7
    3cf4:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3cf6:	1dfb      	adds	r3, r7, #7
    3cf8:	2200      	movs	r2, #0
    3cfa:	701a      	strb	r2, [r3, #0]
    3cfc:	e028      	b.n	3d50 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3cfe:	4b1d      	ldr	r3, [pc, #116]	; (3d74 <udc_req_ep+0x98>)
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	685a      	ldr	r2, [r3, #4]
    3d04:	1dfb      	adds	r3, r7, #7
    3d06:	781b      	ldrb	r3, [r3, #0]
    3d08:	009b      	lsls	r3, r3, #2
    3d0a:	18d3      	adds	r3, r2, r3
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3d10:	683b      	ldr	r3, [r7, #0]
    3d12:	68db      	ldr	r3, [r3, #12]
    3d14:	4798      	blx	r3
    3d16:	0003      	movs	r3, r0
    3d18:	001a      	movs	r2, r3
    3d1a:	1dfb      	adds	r3, r7, #7
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	0011      	movs	r1, r2
    3d20:	0018      	movs	r0, r3
    3d22:	4b15      	ldr	r3, [pc, #84]	; (3d78 <udc_req_ep+0x9c>)
    3d24:	4798      	blx	r3
    3d26:	0003      	movs	r3, r0
    3d28:	001a      	movs	r2, r3
    3d2a:	2301      	movs	r3, #1
    3d2c:	4053      	eors	r3, r2
    3d2e:	b2db      	uxtb	r3, r3
    3d30:	2b00      	cmp	r3, #0
    3d32:	d001      	beq.n	3d38 <udc_req_ep+0x5c>
			return false;
    3d34:	2300      	movs	r3, #0
    3d36:	e014      	b.n	3d62 <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3d38:	683b      	ldr	r3, [r7, #0]
    3d3a:	689b      	ldr	r3, [r3, #8]
    3d3c:	4798      	blx	r3
    3d3e:	1e03      	subs	r3, r0, #0
    3d40:	d001      	beq.n	3d46 <udc_req_ep+0x6a>
			return true;
    3d42:	2301      	movs	r3, #1
    3d44:	e00d      	b.n	3d62 <udc_req_ep+0x86>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3d46:	1dfb      	adds	r3, r7, #7
    3d48:	781a      	ldrb	r2, [r3, #0]
    3d4a:	1dfb      	adds	r3, r7, #7
    3d4c:	3201      	adds	r2, #1
    3d4e:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3d50:	4b08      	ldr	r3, [pc, #32]	; (3d74 <udc_req_ep+0x98>)
    3d52:	681b      	ldr	r3, [r3, #0]
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	791b      	ldrb	r3, [r3, #4]
    3d58:	1dfa      	adds	r2, r7, #7
    3d5a:	7812      	ldrb	r2, [r2, #0]
    3d5c:	429a      	cmp	r2, r3
    3d5e:	d3ce      	bcc.n	3cfe <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3d60:	2300      	movs	r3, #0
}
    3d62:	0018      	movs	r0, r3
    3d64:	46bd      	mov	sp, r7
    3d66:	b002      	add	sp, #8
    3d68:	bd80      	pop	{r7, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	200001b8 	.word	0x200001b8
    3d70:	200004e4 	.word	0x200004e4
    3d74:	200001bc 	.word	0x200001bc
    3d78:	00003225 	.word	0x00003225

00003d7c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3d80:	4b1e      	ldr	r3, [pc, #120]	; (3dfc <udc_process_setup+0x80>)
    3d82:	2200      	movs	r2, #0
    3d84:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    3d86:	4b1d      	ldr	r3, [pc, #116]	; (3dfc <udc_process_setup+0x80>)
    3d88:	2200      	movs	r2, #0
    3d8a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    3d8c:	4b1b      	ldr	r3, [pc, #108]	; (3dfc <udc_process_setup+0x80>)
    3d8e:	2200      	movs	r2, #0
    3d90:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    3d92:	4b1a      	ldr	r3, [pc, #104]	; (3dfc <udc_process_setup+0x80>)
    3d94:	781b      	ldrb	r3, [r3, #0]
    3d96:	b25b      	sxtb	r3, r3
    3d98:	2b00      	cmp	r3, #0
    3d9a:	da05      	bge.n	3da8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3d9c:	4b17      	ldr	r3, [pc, #92]	; (3dfc <udc_process_setup+0x80>)
    3d9e:	88db      	ldrh	r3, [r3, #6]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d101      	bne.n	3da8 <udc_process_setup+0x2c>
			return false; // Error from USB host
    3da4:	2300      	movs	r3, #0
    3da6:	e026      	b.n	3df6 <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3da8:	4b14      	ldr	r3, [pc, #80]	; (3dfc <udc_process_setup+0x80>)
    3daa:	781b      	ldrb	r3, [r3, #0]
    3dac:	001a      	movs	r2, r3
    3dae:	2360      	movs	r3, #96	; 0x60
    3db0:	4013      	ands	r3, r2
    3db2:	d105      	bne.n	3dc0 <udc_process_setup+0x44>
		if (udc_reqstd()) {
    3db4:	4b12      	ldr	r3, [pc, #72]	; (3e00 <udc_process_setup+0x84>)
    3db6:	4798      	blx	r3
    3db8:	1e03      	subs	r3, r0, #0
    3dba:	d001      	beq.n	3dc0 <udc_process_setup+0x44>
			return true;
    3dbc:	2301      	movs	r3, #1
    3dbe:	e01a      	b.n	3df6 <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3dc0:	4b0e      	ldr	r3, [pc, #56]	; (3dfc <udc_process_setup+0x80>)
    3dc2:	781b      	ldrb	r3, [r3, #0]
    3dc4:	001a      	movs	r2, r3
    3dc6:	231f      	movs	r3, #31
    3dc8:	4013      	ands	r3, r2
    3dca:	2b01      	cmp	r3, #1
    3dcc:	d105      	bne.n	3dda <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    3dce:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <udc_process_setup+0x88>)
    3dd0:	4798      	blx	r3
    3dd2:	1e03      	subs	r3, r0, #0
    3dd4:	d001      	beq.n	3dda <udc_process_setup+0x5e>
			return true;
    3dd6:	2301      	movs	r3, #1
    3dd8:	e00d      	b.n	3df6 <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3dda:	4b08      	ldr	r3, [pc, #32]	; (3dfc <udc_process_setup+0x80>)
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	001a      	movs	r2, r3
    3de0:	231f      	movs	r3, #31
    3de2:	4013      	ands	r3, r2
    3de4:	2b02      	cmp	r3, #2
    3de6:	d105      	bne.n	3df4 <udc_process_setup+0x78>
		if (udc_req_ep()) {
    3de8:	4b07      	ldr	r3, [pc, #28]	; (3e08 <udc_process_setup+0x8c>)
    3dea:	4798      	blx	r3
    3dec:	1e03      	subs	r3, r0, #0
    3dee:	d001      	beq.n	3df4 <udc_process_setup+0x78>
			return true;
    3df0:	2301      	movs	r3, #1
    3df2:	e000      	b.n	3df6 <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3df4:	2300      	movs	r3, #0
#endif
}
    3df6:	0018      	movs	r0, r3
    3df8:	46bd      	mov	sp, r7
    3dfa:	bd80      	pop	{r7, pc}
    3dfc:	200004e4 	.word	0x200004e4
    3e00:	00003ad9 	.word	0x00003ad9
    3e04:	00003c35 	.word	0x00003c35
    3e08:	00003cdd 	.word	0x00003cdd

00003e0c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b082      	sub	sp, #8
    3e10:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3e12:	4b10      	ldr	r3, [pc, #64]	; (3e54 <cpu_irq_enter_critical+0x48>)
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d112      	bne.n	3e40 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e1a:	f3ef 8310 	mrs	r3, PRIMASK
    3e1e:	607b      	str	r3, [r7, #4]
  return(result);
    3e20:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3e22:	2b00      	cmp	r3, #0
    3e24:	d109      	bne.n	3e3a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3e26:	b672      	cpsid	i
    3e28:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e2c:	4b0a      	ldr	r3, [pc, #40]	; (3e58 <cpu_irq_enter_critical+0x4c>)
    3e2e:	2200      	movs	r2, #0
    3e30:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3e32:	4b0a      	ldr	r3, [pc, #40]	; (3e5c <cpu_irq_enter_critical+0x50>)
    3e34:	2201      	movs	r2, #1
    3e36:	701a      	strb	r2, [r3, #0]
    3e38:	e002      	b.n	3e40 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3e3a:	4b08      	ldr	r3, [pc, #32]	; (3e5c <cpu_irq_enter_critical+0x50>)
    3e3c:	2200      	movs	r2, #0
    3e3e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3e40:	4b04      	ldr	r3, [pc, #16]	; (3e54 <cpu_irq_enter_critical+0x48>)
    3e42:	681b      	ldr	r3, [r3, #0]
    3e44:	1c5a      	adds	r2, r3, #1
    3e46:	4b03      	ldr	r3, [pc, #12]	; (3e54 <cpu_irq_enter_critical+0x48>)
    3e48:	601a      	str	r2, [r3, #0]
}
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	46bd      	mov	sp, r7
    3e4e:	b002      	add	sp, #8
    3e50:	bd80      	pop	{r7, pc}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	200001c8 	.word	0x200001c8
    3e58:	200000dc 	.word	0x200000dc
    3e5c:	200001cc 	.word	0x200001cc

00003e60 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3e64:	4b0b      	ldr	r3, [pc, #44]	; (3e94 <cpu_irq_leave_critical+0x34>)
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	1e5a      	subs	r2, r3, #1
    3e6a:	4b0a      	ldr	r3, [pc, #40]	; (3e94 <cpu_irq_leave_critical+0x34>)
    3e6c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3e6e:	4b09      	ldr	r3, [pc, #36]	; (3e94 <cpu_irq_leave_critical+0x34>)
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	2b00      	cmp	r3, #0
    3e74:	d10a      	bne.n	3e8c <cpu_irq_leave_critical+0x2c>
    3e76:	4b08      	ldr	r3, [pc, #32]	; (3e98 <cpu_irq_leave_critical+0x38>)
    3e78:	781b      	ldrb	r3, [r3, #0]
    3e7a:	b2db      	uxtb	r3, r3
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d005      	beq.n	3e8c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3e80:	4b06      	ldr	r3, [pc, #24]	; (3e9c <cpu_irq_leave_critical+0x3c>)
    3e82:	2201      	movs	r2, #1
    3e84:	701a      	strb	r2, [r3, #0]
    3e86:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3e8a:	b662      	cpsie	i
	}
}
    3e8c:	46c0      	nop			; (mov r8, r8)
    3e8e:	46bd      	mov	sp, r7
    3e90:	bd80      	pop	{r7, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	200001c8 	.word	0x200001c8
    3e98:	200001cc 	.word	0x200001cc
    3e9c:	200000dc 	.word	0x200000dc

00003ea0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b084      	sub	sp, #16
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	0002      	movs	r2, r0
    3ea8:	1dfb      	adds	r3, r7, #7
    3eaa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3eac:	230f      	movs	r3, #15
    3eae:	18fb      	adds	r3, r7, r3
    3eb0:	1dfa      	adds	r2, r7, #7
    3eb2:	7812      	ldrb	r2, [r2, #0]
    3eb4:	09d2      	lsrs	r2, r2, #7
    3eb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3eb8:	230e      	movs	r3, #14
    3eba:	18fb      	adds	r3, r7, r3
    3ebc:	1dfa      	adds	r2, r7, #7
    3ebe:	7812      	ldrb	r2, [r2, #0]
    3ec0:	0952      	lsrs	r2, r2, #5
    3ec2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ec4:	4b0d      	ldr	r3, [pc, #52]	; (3efc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ec6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ec8:	230f      	movs	r3, #15
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d10f      	bne.n	3ef2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ed2:	230f      	movs	r3, #15
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	781b      	ldrb	r3, [r3, #0]
    3ed8:	009b      	lsls	r3, r3, #2
    3eda:	2210      	movs	r2, #16
    3edc:	4694      	mov	ip, r2
    3ede:	44bc      	add	ip, r7
    3ee0:	4463      	add	r3, ip
    3ee2:	3b08      	subs	r3, #8
    3ee4:	681a      	ldr	r2, [r3, #0]
    3ee6:	230e      	movs	r3, #14
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	781b      	ldrb	r3, [r3, #0]
    3eec:	01db      	lsls	r3, r3, #7
    3eee:	18d3      	adds	r3, r2, r3
    3ef0:	e000      	b.n	3ef4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3ef2:	2300      	movs	r3, #0
	}
}
    3ef4:	0018      	movs	r0, r3
    3ef6:	46bd      	mov	sp, r7
    3ef8:	b004      	add	sp, #16
    3efa:	bd80      	pop	{r7, pc}
    3efc:	41004400 	.word	0x41004400

00003f00 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b082      	sub	sp, #8
    3f04:	af00      	add	r7, sp, #0
    3f06:	0002      	movs	r2, r0
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f0c:	1dfb      	adds	r3, r7, #7
    3f0e:	781b      	ldrb	r3, [r3, #0]
    3f10:	0018      	movs	r0, r3
    3f12:	4b03      	ldr	r3, [pc, #12]	; (3f20 <port_get_group_from_gpio_pin+0x20>)
    3f14:	4798      	blx	r3
    3f16:	0003      	movs	r3, r0
}
    3f18:	0018      	movs	r0, r3
    3f1a:	46bd      	mov	sp, r7
    3f1c:	b002      	add	sp, #8
    3f1e:	bd80      	pop	{r7, pc}
    3f20:	00003ea1 	.word	0x00003ea1

00003f24 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3f24:	b580      	push	{r7, lr}
    3f26:	b082      	sub	sp, #8
    3f28:	af00      	add	r7, sp, #0
    3f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	2200      	movs	r2, #0
    3f30:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	2201      	movs	r2, #1
    3f36:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	2200      	movs	r2, #0
    3f3c:	709a      	strb	r2, [r3, #2]
}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	46bd      	mov	sp, r7
    3f42:	b002      	add	sp, #8
    3f44:	bd80      	pop	{r7, pc}
    3f46:	46c0      	nop			; (mov r8, r8)

00003f48 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	0002      	movs	r2, r0
    3f50:	1dfb      	adds	r3, r7, #7
    3f52:	701a      	strb	r2, [r3, #0]
    3f54:	1dbb      	adds	r3, r7, #6
    3f56:	1c0a      	adds	r2, r1, #0
    3f58:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f5a:	1dfb      	adds	r3, r7, #7
    3f5c:	781b      	ldrb	r3, [r3, #0]
    3f5e:	0018      	movs	r0, r3
    3f60:	4b0d      	ldr	r3, [pc, #52]	; (3f98 <port_pin_set_output_level+0x50>)
    3f62:	4798      	blx	r3
    3f64:	0003      	movs	r3, r0
    3f66:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f68:	1dfb      	adds	r3, r7, #7
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	221f      	movs	r2, #31
    3f6e:	4013      	ands	r3, r2
    3f70:	2201      	movs	r2, #1
    3f72:	409a      	lsls	r2, r3
    3f74:	0013      	movs	r3, r2
    3f76:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3f78:	1dbb      	adds	r3, r7, #6
    3f7a:	781b      	ldrb	r3, [r3, #0]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d003      	beq.n	3f88 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	68ba      	ldr	r2, [r7, #8]
    3f84:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3f86:	e002      	b.n	3f8e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3f88:	68fb      	ldr	r3, [r7, #12]
    3f8a:	68ba      	ldr	r2, [r7, #8]
    3f8c:	615a      	str	r2, [r3, #20]
	}
}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	46bd      	mov	sp, r7
    3f92:	b004      	add	sp, #16
    3f94:	bd80      	pop	{r7, pc}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	00003f01 	.word	0x00003f01

00003f9c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3fa2:	1d3b      	adds	r3, r7, #4
    3fa4:	0018      	movs	r0, r3
    3fa6:	4b0e      	ldr	r3, [pc, #56]	; (3fe0 <system_board_init+0x44>)
    3fa8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3faa:	1d3b      	adds	r3, r7, #4
    3fac:	2201      	movs	r2, #1
    3fae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3fb0:	1d3b      	adds	r3, r7, #4
    3fb2:	0019      	movs	r1, r3
    3fb4:	2011      	movs	r0, #17
    3fb6:	4b0b      	ldr	r3, [pc, #44]	; (3fe4 <system_board_init+0x48>)
    3fb8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3fba:	2101      	movs	r1, #1
    3fbc:	2011      	movs	r0, #17
    3fbe:	4b0a      	ldr	r3, [pc, #40]	; (3fe8 <system_board_init+0x4c>)
    3fc0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3fc2:	1d3b      	adds	r3, r7, #4
    3fc4:	2200      	movs	r2, #0
    3fc6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3fc8:	1d3b      	adds	r3, r7, #4
    3fca:	2201      	movs	r2, #1
    3fcc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3fce:	1d3b      	adds	r3, r7, #4
    3fd0:	0019      	movs	r1, r3
    3fd2:	200f      	movs	r0, #15
    3fd4:	4b03      	ldr	r3, [pc, #12]	; (3fe4 <system_board_init+0x48>)
    3fd6:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3fd8:	46c0      	nop			; (mov r8, r8)
    3fda:	46bd      	mov	sp, r7
    3fdc:	b002      	add	sp, #8
    3fde:	bd80      	pop	{r7, pc}
    3fe0:	00003f25 	.word	0x00003f25
    3fe4:	00004611 	.word	0x00004611
    3fe8:	00003f49 	.word	0x00003f49

00003fec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3fec:	b580      	push	{r7, lr}
    3fee:	b084      	sub	sp, #16
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	0002      	movs	r2, r0
    3ff4:	1dfb      	adds	r3, r7, #7
    3ff6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3ff8:	230f      	movs	r3, #15
    3ffa:	18fb      	adds	r3, r7, r3
    3ffc:	1dfa      	adds	r2, r7, #7
    3ffe:	7812      	ldrb	r2, [r2, #0]
    4000:	0952      	lsrs	r2, r2, #5
    4002:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4004:	230f      	movs	r3, #15
    4006:	18fb      	adds	r3, r7, r3
    4008:	781b      	ldrb	r3, [r3, #0]
    400a:	2b00      	cmp	r3, #0
    400c:	d10c      	bne.n	4028 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    400e:	4b09      	ldr	r3, [pc, #36]	; (4034 <_extint_get_eic_from_channel+0x48>)
    4010:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4012:	230f      	movs	r3, #15
    4014:	18fb      	adds	r3, r7, r3
    4016:	781b      	ldrb	r3, [r3, #0]
    4018:	009b      	lsls	r3, r3, #2
    401a:	2210      	movs	r2, #16
    401c:	4694      	mov	ip, r2
    401e:	44bc      	add	ip, r7
    4020:	4463      	add	r3, ip
    4022:	3b08      	subs	r3, #8
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	e000      	b.n	402a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4028:	2300      	movs	r3, #0
	}
}
    402a:	0018      	movs	r0, r3
    402c:	46bd      	mov	sp, r7
    402e:	b004      	add	sp, #16
    4030:	bd80      	pop	{r7, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	40001800 	.word	0x40001800

00004038 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	0002      	movs	r2, r0
    4040:	1dfb      	adds	r3, r7, #7
    4042:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4044:	1dfb      	adds	r3, r7, #7
    4046:	781b      	ldrb	r3, [r3, #0]
    4048:	0018      	movs	r0, r3
    404a:	4b0b      	ldr	r3, [pc, #44]	; (4078 <extint_chan_is_detected+0x40>)
    404c:	4798      	blx	r3
    404e:	0003      	movs	r3, r0
    4050:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4052:	1dfb      	adds	r3, r7, #7
    4054:	781b      	ldrb	r3, [r3, #0]
    4056:	221f      	movs	r2, #31
    4058:	4013      	ands	r3, r2
    405a:	2201      	movs	r2, #1
    405c:	409a      	lsls	r2, r3
    405e:	0013      	movs	r3, r2
    4060:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4062:	68fb      	ldr	r3, [r7, #12]
    4064:	691b      	ldr	r3, [r3, #16]
    4066:	68ba      	ldr	r2, [r7, #8]
    4068:	4013      	ands	r3, r2
    406a:	1e5a      	subs	r2, r3, #1
    406c:	4193      	sbcs	r3, r2
    406e:	b2db      	uxtb	r3, r3
}
    4070:	0018      	movs	r0, r3
    4072:	46bd      	mov	sp, r7
    4074:	b004      	add	sp, #16
    4076:	bd80      	pop	{r7, pc}
    4078:	00003fed 	.word	0x00003fed

0000407c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    407c:	b580      	push	{r7, lr}
    407e:	b084      	sub	sp, #16
    4080:	af00      	add	r7, sp, #0
    4082:	0002      	movs	r2, r0
    4084:	1dfb      	adds	r3, r7, #7
    4086:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4088:	1dfb      	adds	r3, r7, #7
    408a:	781b      	ldrb	r3, [r3, #0]
    408c:	0018      	movs	r0, r3
    408e:	4b09      	ldr	r3, [pc, #36]	; (40b4 <extint_chan_clear_detected+0x38>)
    4090:	4798      	blx	r3
    4092:	0003      	movs	r3, r0
    4094:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4096:	1dfb      	adds	r3, r7, #7
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	221f      	movs	r2, #31
    409c:	4013      	ands	r3, r2
    409e:	2201      	movs	r2, #1
    40a0:	409a      	lsls	r2, r3
    40a2:	0013      	movs	r3, r2
    40a4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    40a6:	68fb      	ldr	r3, [r7, #12]
    40a8:	68ba      	ldr	r2, [r7, #8]
    40aa:	611a      	str	r2, [r3, #16]
}
    40ac:	46c0      	nop			; (mov r8, r8)
    40ae:	46bd      	mov	sp, r7
    40b0:	b004      	add	sp, #16
    40b2:	bd80      	pop	{r7, pc}
    40b4:	00003fed 	.word	0x00003fed

000040b8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	b082      	sub	sp, #8
    40bc:	af00      	add	r7, sp, #0
    40be:	6078      	str	r0, [r7, #4]
    40c0:	0008      	movs	r0, r1
    40c2:	0011      	movs	r1, r2
    40c4:	1cfb      	adds	r3, r7, #3
    40c6:	1c02      	adds	r2, r0, #0
    40c8:	701a      	strb	r2, [r3, #0]
    40ca:	1cbb      	adds	r3, r7, #2
    40cc:	1c0a      	adds	r2, r1, #0
    40ce:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    40d0:	1cbb      	adds	r3, r7, #2
    40d2:	781b      	ldrb	r3, [r3, #0]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d001      	beq.n	40dc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40d8:	2317      	movs	r3, #23
    40da:	e019      	b.n	4110 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    40dc:	1cfb      	adds	r3, r7, #3
    40de:	781a      	ldrb	r2, [r3, #0]
    40e0:	4b0d      	ldr	r3, [pc, #52]	; (4118 <extint_register_callback+0x60>)
    40e2:	0092      	lsls	r2, r2, #2
    40e4:	58d3      	ldr	r3, [r2, r3]
    40e6:	2b00      	cmp	r3, #0
    40e8:	d107      	bne.n	40fa <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    40ea:	1cfb      	adds	r3, r7, #3
    40ec:	781a      	ldrb	r2, [r3, #0]
    40ee:	4b0a      	ldr	r3, [pc, #40]	; (4118 <extint_register_callback+0x60>)
    40f0:	0092      	lsls	r2, r2, #2
    40f2:	6879      	ldr	r1, [r7, #4]
    40f4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    40f6:	2300      	movs	r3, #0
    40f8:	e00a      	b.n	4110 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    40fa:	1cfb      	adds	r3, r7, #3
    40fc:	781a      	ldrb	r2, [r3, #0]
    40fe:	4b06      	ldr	r3, [pc, #24]	; (4118 <extint_register_callback+0x60>)
    4100:	0092      	lsls	r2, r2, #2
    4102:	58d2      	ldr	r2, [r2, r3]
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	429a      	cmp	r2, r3
    4108:	d101      	bne.n	410e <extint_register_callback+0x56>
		return STATUS_OK;
    410a:	2300      	movs	r3, #0
    410c:	e000      	b.n	4110 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    410e:	231d      	movs	r3, #29
}
    4110:	0018      	movs	r0, r3
    4112:	46bd      	mov	sp, r7
    4114:	b002      	add	sp, #8
    4116:	bd80      	pop	{r7, pc}
    4118:	200002fc 	.word	0x200002fc

0000411c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    411c:	b580      	push	{r7, lr}
    411e:	b084      	sub	sp, #16
    4120:	af00      	add	r7, sp, #0
    4122:	0002      	movs	r2, r0
    4124:	1dfb      	adds	r3, r7, #7
    4126:	701a      	strb	r2, [r3, #0]
    4128:	1dbb      	adds	r3, r7, #6
    412a:	1c0a      	adds	r2, r1, #0
    412c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    412e:	1dbb      	adds	r3, r7, #6
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2b00      	cmp	r3, #0
    4134:	d10e      	bne.n	4154 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4136:	1dfb      	adds	r3, r7, #7
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	0018      	movs	r0, r3
    413c:	4b08      	ldr	r3, [pc, #32]	; (4160 <extint_chan_enable_callback+0x44>)
    413e:	4798      	blx	r3
    4140:	0003      	movs	r3, r0
    4142:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    4144:	1dfb      	adds	r3, r7, #7
    4146:	781b      	ldrb	r3, [r3, #0]
    4148:	2201      	movs	r2, #1
    414a:	409a      	lsls	r2, r3
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4150:	2300      	movs	r3, #0
    4152:	e000      	b.n	4156 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4154:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4156:	0018      	movs	r0, r3
    4158:	46bd      	mov	sp, r7
    415a:	b004      	add	sp, #16
    415c:	bd80      	pop	{r7, pc}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	00003fed 	.word	0x00003fed

00004164 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4164:	b580      	push	{r7, lr}
    4166:	b084      	sub	sp, #16
    4168:	af00      	add	r7, sp, #0
    416a:	0002      	movs	r2, r0
    416c:	1dfb      	adds	r3, r7, #7
    416e:	701a      	strb	r2, [r3, #0]
    4170:	1dbb      	adds	r3, r7, #6
    4172:	1c0a      	adds	r2, r1, #0
    4174:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4176:	1dbb      	adds	r3, r7, #6
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	2b00      	cmp	r3, #0
    417c:	d10e      	bne.n	419c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    417e:	1dfb      	adds	r3, r7, #7
    4180:	781b      	ldrb	r3, [r3, #0]
    4182:	0018      	movs	r0, r3
    4184:	4b08      	ldr	r3, [pc, #32]	; (41a8 <extint_chan_disable_callback+0x44>)
    4186:	4798      	blx	r3
    4188:	0003      	movs	r3, r0
    418a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    418c:	1dfb      	adds	r3, r7, #7
    418e:	781b      	ldrb	r3, [r3, #0]
    4190:	2201      	movs	r2, #1
    4192:	409a      	lsls	r2, r3
    4194:	68fb      	ldr	r3, [r7, #12]
    4196:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4198:	2300      	movs	r3, #0
    419a:	e000      	b.n	419e <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    419c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    419e:	0018      	movs	r0, r3
    41a0:	46bd      	mov	sp, r7
    41a2:	b004      	add	sp, #16
    41a4:	bd80      	pop	{r7, pc}
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	00003fed 	.word	0x00003fed

000041ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    41ac:	b580      	push	{r7, lr}
    41ae:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    41b0:	4b15      	ldr	r3, [pc, #84]	; (4208 <EIC_Handler+0x5c>)
    41b2:	2200      	movs	r2, #0
    41b4:	701a      	strb	r2, [r3, #0]
    41b6:	e020      	b.n	41fa <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    41b8:	4b13      	ldr	r3, [pc, #76]	; (4208 <EIC_Handler+0x5c>)
    41ba:	781b      	ldrb	r3, [r3, #0]
    41bc:	0018      	movs	r0, r3
    41be:	4b13      	ldr	r3, [pc, #76]	; (420c <EIC_Handler+0x60>)
    41c0:	4798      	blx	r3
    41c2:	1e03      	subs	r3, r0, #0
    41c4:	d013      	beq.n	41ee <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    41c6:	4b10      	ldr	r3, [pc, #64]	; (4208 <EIC_Handler+0x5c>)
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	0018      	movs	r0, r3
    41cc:	4b10      	ldr	r3, [pc, #64]	; (4210 <EIC_Handler+0x64>)
    41ce:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    41d0:	4b0d      	ldr	r3, [pc, #52]	; (4208 <EIC_Handler+0x5c>)
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	001a      	movs	r2, r3
    41d6:	4b0f      	ldr	r3, [pc, #60]	; (4214 <EIC_Handler+0x68>)
    41d8:	0092      	lsls	r2, r2, #2
    41da:	58d3      	ldr	r3, [r2, r3]
    41dc:	2b00      	cmp	r3, #0
    41de:	d006      	beq.n	41ee <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    41e0:	4b09      	ldr	r3, [pc, #36]	; (4208 <EIC_Handler+0x5c>)
    41e2:	781b      	ldrb	r3, [r3, #0]
    41e4:	001a      	movs	r2, r3
    41e6:	4b0b      	ldr	r3, [pc, #44]	; (4214 <EIC_Handler+0x68>)
    41e8:	0092      	lsls	r2, r2, #2
    41ea:	58d3      	ldr	r3, [r2, r3]
    41ec:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    41ee:	4b06      	ldr	r3, [pc, #24]	; (4208 <EIC_Handler+0x5c>)
    41f0:	781b      	ldrb	r3, [r3, #0]
    41f2:	3301      	adds	r3, #1
    41f4:	b2da      	uxtb	r2, r3
    41f6:	4b04      	ldr	r3, [pc, #16]	; (4208 <EIC_Handler+0x5c>)
    41f8:	701a      	strb	r2, [r3, #0]
    41fa:	4b03      	ldr	r3, [pc, #12]	; (4208 <EIC_Handler+0x5c>)
    41fc:	781b      	ldrb	r3, [r3, #0]
    41fe:	2b0f      	cmp	r3, #15
    4200:	d9da      	bls.n	41b8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	46bd      	mov	sp, r7
    4206:	bd80      	pop	{r7, pc}
    4208:	200002f9 	.word	0x200002f9
    420c:	00004039 	.word	0x00004039
    4210:	0000407d 	.word	0x0000407d
    4214:	200002fc 	.word	0x200002fc

00004218 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	2200      	movs	r2, #0
    4224:	701a      	strb	r2, [r3, #0]
}
    4226:	46c0      	nop			; (mov r8, r8)
    4228:	46bd      	mov	sp, r7
    422a:	b002      	add	sp, #8
    422c:	bd80      	pop	{r7, pc}
    422e:	46c0      	nop			; (mov r8, r8)

00004230 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4230:	b580      	push	{r7, lr}
    4232:	b082      	sub	sp, #8
    4234:	af00      	add	r7, sp, #0
    4236:	0002      	movs	r2, r0
    4238:	6039      	str	r1, [r7, #0]
    423a:	1dfb      	adds	r3, r7, #7
    423c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    423e:	1dfb      	adds	r3, r7, #7
    4240:	781b      	ldrb	r3, [r3, #0]
    4242:	2b01      	cmp	r3, #1
    4244:	d00a      	beq.n	425c <system_apb_clock_set_mask+0x2c>
    4246:	2b02      	cmp	r3, #2
    4248:	d00f      	beq.n	426a <system_apb_clock_set_mask+0x3a>
    424a:	2b00      	cmp	r3, #0
    424c:	d114      	bne.n	4278 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <system_apb_clock_set_mask+0x58>)
    4250:	4a0d      	ldr	r2, [pc, #52]	; (4288 <system_apb_clock_set_mask+0x58>)
    4252:	6991      	ldr	r1, [r2, #24]
    4254:	683a      	ldr	r2, [r7, #0]
    4256:	430a      	orrs	r2, r1
    4258:	619a      	str	r2, [r3, #24]
			break;
    425a:	e00f      	b.n	427c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    425c:	4b0a      	ldr	r3, [pc, #40]	; (4288 <system_apb_clock_set_mask+0x58>)
    425e:	4a0a      	ldr	r2, [pc, #40]	; (4288 <system_apb_clock_set_mask+0x58>)
    4260:	69d1      	ldr	r1, [r2, #28]
    4262:	683a      	ldr	r2, [r7, #0]
    4264:	430a      	orrs	r2, r1
    4266:	61da      	str	r2, [r3, #28]
			break;
    4268:	e008      	b.n	427c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    426a:	4b07      	ldr	r3, [pc, #28]	; (4288 <system_apb_clock_set_mask+0x58>)
    426c:	4a06      	ldr	r2, [pc, #24]	; (4288 <system_apb_clock_set_mask+0x58>)
    426e:	6a11      	ldr	r1, [r2, #32]
    4270:	683a      	ldr	r2, [r7, #0]
    4272:	430a      	orrs	r2, r1
    4274:	621a      	str	r2, [r3, #32]
			break;
    4276:	e001      	b.n	427c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4278:	2317      	movs	r3, #23
    427a:	e000      	b.n	427e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    427c:	2300      	movs	r3, #0
}
    427e:	0018      	movs	r0, r3
    4280:	46bd      	mov	sp, r7
    4282:	b002      	add	sp, #8
    4284:	bd80      	pop	{r7, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	40000400 	.word	0x40000400

0000428c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    428c:	b580      	push	{r7, lr}
    428e:	b082      	sub	sp, #8
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	2280      	movs	r2, #128	; 0x80
    4298:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	2200      	movs	r2, #0
    429e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	2201      	movs	r2, #1
    42a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	2200      	movs	r2, #0
    42aa:	70da      	strb	r2, [r3, #3]
}
    42ac:	46c0      	nop			; (mov r8, r8)
    42ae:	46bd      	mov	sp, r7
    42b0:	b002      	add	sp, #8
    42b2:	bd80      	pop	{r7, pc}

000042b4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b082      	sub	sp, #8
    42b8:	af00      	add	r7, sp, #0
    42ba:	0002      	movs	r2, r0
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42c0:	4b06      	ldr	r3, [pc, #24]	; (42dc <system_interrupt_enable+0x28>)
    42c2:	1dfa      	adds	r2, r7, #7
    42c4:	7812      	ldrb	r2, [r2, #0]
    42c6:	0011      	movs	r1, r2
    42c8:	221f      	movs	r2, #31
    42ca:	400a      	ands	r2, r1
    42cc:	2101      	movs	r1, #1
    42ce:	4091      	lsls	r1, r2
    42d0:	000a      	movs	r2, r1
    42d2:	601a      	str	r2, [r3, #0]
}
    42d4:	46c0      	nop			; (mov r8, r8)
    42d6:	46bd      	mov	sp, r7
    42d8:	b002      	add	sp, #8
    42da:	bd80      	pop	{r7, pc}
    42dc:	e000e100 	.word	0xe000e100

000042e0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    42e0:	b580      	push	{r7, lr}
    42e2:	b084      	sub	sp, #16
    42e4:	af00      	add	r7, sp, #0
    42e6:	0002      	movs	r2, r0
    42e8:	1dfb      	adds	r3, r7, #7
    42ea:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    42ec:	230f      	movs	r3, #15
    42ee:	18fb      	adds	r3, r7, r3
    42f0:	1dfa      	adds	r2, r7, #7
    42f2:	7812      	ldrb	r2, [r2, #0]
    42f4:	0952      	lsrs	r2, r2, #5
    42f6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    42f8:	230f      	movs	r3, #15
    42fa:	18fb      	adds	r3, r7, r3
    42fc:	781b      	ldrb	r3, [r3, #0]
    42fe:	2b00      	cmp	r3, #0
    4300:	d10c      	bne.n	431c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4302:	4b09      	ldr	r3, [pc, #36]	; (4328 <_extint_get_eic_from_channel+0x48>)
    4304:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4306:	230f      	movs	r3, #15
    4308:	18fb      	adds	r3, r7, r3
    430a:	781b      	ldrb	r3, [r3, #0]
    430c:	009b      	lsls	r3, r3, #2
    430e:	2210      	movs	r2, #16
    4310:	4694      	mov	ip, r2
    4312:	44bc      	add	ip, r7
    4314:	4463      	add	r3, ip
    4316:	3b08      	subs	r3, #8
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	e000      	b.n	431e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    431c:	2300      	movs	r3, #0
	}
}
    431e:	0018      	movs	r0, r3
    4320:	46bd      	mov	sp, r7
    4322:	b004      	add	sp, #16
    4324:	bd80      	pop	{r7, pc}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	40001800 	.word	0x40001800

0000432c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    432c:	b580      	push	{r7, lr}
    432e:	b082      	sub	sp, #8
    4330:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4332:	4b0f      	ldr	r3, [pc, #60]	; (4370 <extint_is_syncing+0x44>)
    4334:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4336:	2300      	movs	r3, #0
    4338:	607b      	str	r3, [r7, #4]
    433a:	e011      	b.n	4360 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	009b      	lsls	r3, r3, #2
    4340:	2208      	movs	r2, #8
    4342:	4694      	mov	ip, r2
    4344:	44bc      	add	ip, r7
    4346:	4463      	add	r3, ip
    4348:	3b08      	subs	r3, #8
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	785b      	ldrb	r3, [r3, #1]
    434e:	b2db      	uxtb	r3, r3
    4350:	b25b      	sxtb	r3, r3
    4352:	2b00      	cmp	r3, #0
    4354:	da01      	bge.n	435a <extint_is_syncing+0x2e>
			return true;
    4356:	2301      	movs	r3, #1
    4358:	e006      	b.n	4368 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	3301      	adds	r3, #1
    435e:	607b      	str	r3, [r7, #4]
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d0ea      	beq.n	433c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4366:	2300      	movs	r3, #0
}
    4368:	0018      	movs	r0, r3
    436a:	46bd      	mov	sp, r7
    436c:	b002      	add	sp, #8
    436e:	bd80      	pop	{r7, pc}
    4370:	40001800 	.word	0x40001800

00004374 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4374:	b580      	push	{r7, lr}
    4376:	b084      	sub	sp, #16
    4378:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    437a:	4b2d      	ldr	r3, [pc, #180]	; (4430 <_system_extint_init+0xbc>)
    437c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    437e:	2140      	movs	r1, #64	; 0x40
    4380:	2000      	movs	r0, #0
    4382:	4b2c      	ldr	r3, [pc, #176]	; (4434 <_system_extint_init+0xc0>)
    4384:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4386:	003b      	movs	r3, r7
    4388:	0018      	movs	r0, r3
    438a:	4b2b      	ldr	r3, [pc, #172]	; (4438 <_system_extint_init+0xc4>)
    438c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    438e:	003b      	movs	r3, r7
    4390:	2200      	movs	r2, #0
    4392:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4394:	003b      	movs	r3, r7
    4396:	0019      	movs	r1, r3
    4398:	2005      	movs	r0, #5
    439a:	4b28      	ldr	r3, [pc, #160]	; (443c <_system_extint_init+0xc8>)
    439c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    439e:	2005      	movs	r0, #5
    43a0:	4b27      	ldr	r3, [pc, #156]	; (4440 <_system_extint_init+0xcc>)
    43a2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    43a4:	2300      	movs	r3, #0
    43a6:	60fb      	str	r3, [r7, #12]
    43a8:	e018      	b.n	43dc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	009b      	lsls	r3, r3, #2
    43ae:	2210      	movs	r2, #16
    43b0:	4694      	mov	ip, r2
    43b2:	44bc      	add	ip, r7
    43b4:	4463      	add	r3, ip
    43b6:	3b0c      	subs	r3, #12
    43b8:	681a      	ldr	r2, [r3, #0]
    43ba:	68fb      	ldr	r3, [r7, #12]
    43bc:	009b      	lsls	r3, r3, #2
    43be:	2110      	movs	r1, #16
    43c0:	468c      	mov	ip, r1
    43c2:	44bc      	add	ip, r7
    43c4:	4463      	add	r3, ip
    43c6:	3b0c      	subs	r3, #12
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	781b      	ldrb	r3, [r3, #0]
    43cc:	b2db      	uxtb	r3, r3
    43ce:	2101      	movs	r1, #1
    43d0:	430b      	orrs	r3, r1
    43d2:	b2db      	uxtb	r3, r3
    43d4:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    43d6:	68fb      	ldr	r3, [r7, #12]
    43d8:	3301      	adds	r3, #1
    43da:	60fb      	str	r3, [r7, #12]
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	2b00      	cmp	r3, #0
    43e0:	d0e3      	beq.n	43aa <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	4b17      	ldr	r3, [pc, #92]	; (4444 <_system_extint_init+0xd0>)
    43e6:	4798      	blx	r3
    43e8:	1e03      	subs	r3, r0, #0
    43ea:	d1fb      	bne.n	43e4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    43ec:	230b      	movs	r3, #11
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	2200      	movs	r2, #0
    43f2:	701a      	strb	r2, [r3, #0]
    43f4:	e00d      	b.n	4412 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    43f6:	230b      	movs	r3, #11
    43f8:	18fb      	adds	r3, r7, r3
    43fa:	781a      	ldrb	r2, [r3, #0]
    43fc:	4b12      	ldr	r3, [pc, #72]	; (4448 <_system_extint_init+0xd4>)
    43fe:	0092      	lsls	r2, r2, #2
    4400:	2100      	movs	r1, #0
    4402:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4404:	230b      	movs	r3, #11
    4406:	18fb      	adds	r3, r7, r3
    4408:	781a      	ldrb	r2, [r3, #0]
    440a:	230b      	movs	r3, #11
    440c:	18fb      	adds	r3, r7, r3
    440e:	3201      	adds	r2, #1
    4410:	701a      	strb	r2, [r3, #0]
    4412:	230b      	movs	r3, #11
    4414:	18fb      	adds	r3, r7, r3
    4416:	781b      	ldrb	r3, [r3, #0]
    4418:	2b0f      	cmp	r3, #15
    441a:	d9ec      	bls.n	43f6 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    441c:	2004      	movs	r0, #4
    441e:	4b0b      	ldr	r3, [pc, #44]	; (444c <_system_extint_init+0xd8>)
    4420:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4422:	4b0b      	ldr	r3, [pc, #44]	; (4450 <_system_extint_init+0xdc>)
    4424:	4798      	blx	r3
}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	46bd      	mov	sp, r7
    442a:	b004      	add	sp, #16
    442c:	bd80      	pop	{r7, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	40001800 	.word	0x40001800
    4434:	00004231 	.word	0x00004231
    4438:	00004219 	.word	0x00004219
    443c:	000050d1 	.word	0x000050d1
    4440:	00005115 	.word	0x00005115
    4444:	0000432d 	.word	0x0000432d
    4448:	200002fc 	.word	0x200002fc
    444c:	000042b5 	.word	0x000042b5
    4450:	00004455 	.word	0x00004455

00004454 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4454:	b580      	push	{r7, lr}
    4456:	b082      	sub	sp, #8
    4458:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    445a:	4b15      	ldr	r3, [pc, #84]	; (44b0 <_extint_enable+0x5c>)
    445c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    445e:	2300      	movs	r3, #0
    4460:	607b      	str	r3, [r7, #4]
    4462:	e018      	b.n	4496 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	009b      	lsls	r3, r3, #2
    4468:	2208      	movs	r2, #8
    446a:	4694      	mov	ip, r2
    446c:	44bc      	add	ip, r7
    446e:	4463      	add	r3, ip
    4470:	3b08      	subs	r3, #8
    4472:	681a      	ldr	r2, [r3, #0]
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	009b      	lsls	r3, r3, #2
    4478:	2108      	movs	r1, #8
    447a:	468c      	mov	ip, r1
    447c:	44bc      	add	ip, r7
    447e:	4463      	add	r3, ip
    4480:	3b08      	subs	r3, #8
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	b2db      	uxtb	r3, r3
    4488:	2102      	movs	r1, #2
    448a:	430b      	orrs	r3, r1
    448c:	b2db      	uxtb	r3, r3
    448e:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	3301      	adds	r3, #1
    4494:	607b      	str	r3, [r7, #4]
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	2b00      	cmp	r3, #0
    449a:	d0e3      	beq.n	4464 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    449c:	46c0      	nop			; (mov r8, r8)
    449e:	4b05      	ldr	r3, [pc, #20]	; (44b4 <_extint_enable+0x60>)
    44a0:	4798      	blx	r3
    44a2:	1e03      	subs	r3, r0, #0
    44a4:	d1fb      	bne.n	449e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	46bd      	mov	sp, r7
    44aa:	b002      	add	sp, #8
    44ac:	bd80      	pop	{r7, pc}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	40001800 	.word	0x40001800
    44b4:	0000432d 	.word	0x0000432d

000044b8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    44b8:	b580      	push	{r7, lr}
    44ba:	b082      	sub	sp, #8
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	2200      	movs	r2, #0
    44c4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	2200      	movs	r2, #0
    44ca:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	2201      	movs	r2, #1
    44d0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	2201      	movs	r2, #1
    44d6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	2200      	movs	r2, #0
    44dc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	2202      	movs	r2, #2
    44e2:	72da      	strb	r2, [r3, #11]
}
    44e4:	46c0      	nop			; (mov r8, r8)
    44e6:	46bd      	mov	sp, r7
    44e8:	b002      	add	sp, #8
    44ea:	bd80      	pop	{r7, pc}

000044ec <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b086      	sub	sp, #24
    44f0:	af00      	add	r7, sp, #0
    44f2:	0002      	movs	r2, r0
    44f4:	6039      	str	r1, [r7, #0]
    44f6:	1dfb      	adds	r3, r7, #7
    44f8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    44fa:	2308      	movs	r3, #8
    44fc:	18fb      	adds	r3, r7, r3
    44fe:	0018      	movs	r0, r3
    4500:	4b36      	ldr	r3, [pc, #216]	; (45dc <extint_chan_set_config+0xf0>)
    4502:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4504:	683b      	ldr	r3, [r7, #0]
    4506:	685b      	ldr	r3, [r3, #4]
    4508:	b2da      	uxtb	r2, r3
    450a:	2308      	movs	r3, #8
    450c:	18fb      	adds	r3, r7, r3
    450e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4510:	2308      	movs	r3, #8
    4512:	18fb      	adds	r3, r7, r3
    4514:	2200      	movs	r2, #0
    4516:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4518:	683b      	ldr	r3, [r7, #0]
    451a:	7a1a      	ldrb	r2, [r3, #8]
    451c:	2308      	movs	r3, #8
    451e:	18fb      	adds	r3, r7, r3
    4520:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4522:	683b      	ldr	r3, [r7, #0]
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	b2db      	uxtb	r3, r3
    4528:	2208      	movs	r2, #8
    452a:	18ba      	adds	r2, r7, r2
    452c:	0011      	movs	r1, r2
    452e:	0018      	movs	r0, r3
    4530:	4b2b      	ldr	r3, [pc, #172]	; (45e0 <extint_chan_set_config+0xf4>)
    4532:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    4534:	1dfb      	adds	r3, r7, #7
    4536:	781b      	ldrb	r3, [r3, #0]
    4538:	0018      	movs	r0, r3
    453a:	4b2a      	ldr	r3, [pc, #168]	; (45e4 <extint_chan_set_config+0xf8>)
    453c:	4798      	blx	r3
    453e:	0003      	movs	r3, r0
    4540:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    4542:	1dfb      	adds	r3, r7, #7
    4544:	781b      	ldrb	r3, [r3, #0]
    4546:	2207      	movs	r2, #7
    4548:	4013      	ands	r3, r2
    454a:	009b      	lsls	r3, r3, #2
    454c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    454e:	683b      	ldr	r3, [r7, #0]
    4550:	7adb      	ldrb	r3, [r3, #11]
    4552:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	7a9b      	ldrb	r3, [r3, #10]
    4558:	2b00      	cmp	r3, #0
    455a:	d003      	beq.n	4564 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    455c:	697b      	ldr	r3, [r7, #20]
    455e:	2208      	movs	r2, #8
    4560:	4313      	orrs	r3, r2
    4562:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    4564:	1dfb      	adds	r3, r7, #7
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	08db      	lsrs	r3, r3, #3
    456a:	b2db      	uxtb	r3, r3
    456c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    456e:	1dfb      	adds	r3, r7, #7
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	08db      	lsrs	r3, r3, #3
    4574:	b2db      	uxtb	r3, r3
    4576:	001a      	movs	r2, r3
    4578:	693b      	ldr	r3, [r7, #16]
    457a:	3206      	adds	r2, #6
    457c:	0092      	lsls	r2, r2, #2
    457e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4580:	210f      	movs	r1, #15
    4582:	68fa      	ldr	r2, [r7, #12]
    4584:	4091      	lsls	r1, r2
    4586:	000a      	movs	r2, r1
    4588:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    458a:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    458c:	6979      	ldr	r1, [r7, #20]
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	4099      	lsls	r1, r3
    4592:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4594:	431a      	orrs	r2, r3
    4596:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4598:	693b      	ldr	r3, [r7, #16]
    459a:	1d82      	adds	r2, r0, #6
    459c:	0092      	lsls	r2, r2, #2
    459e:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	7a5b      	ldrb	r3, [r3, #9]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d00a      	beq.n	45be <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    45a8:	693b      	ldr	r3, [r7, #16]
    45aa:	695a      	ldr	r2, [r3, #20]
    45ac:	1dfb      	adds	r3, r7, #7
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	2101      	movs	r1, #1
    45b2:	4099      	lsls	r1, r3
    45b4:	000b      	movs	r3, r1
    45b6:	431a      	orrs	r2, r3
    45b8:	693b      	ldr	r3, [r7, #16]
    45ba:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    45bc:	e00a      	b.n	45d4 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    45be:	693b      	ldr	r3, [r7, #16]
    45c0:	695b      	ldr	r3, [r3, #20]
    45c2:	1dfa      	adds	r2, r7, #7
    45c4:	7812      	ldrb	r2, [r2, #0]
    45c6:	2101      	movs	r1, #1
    45c8:	4091      	lsls	r1, r2
    45ca:	000a      	movs	r2, r1
    45cc:	43d2      	mvns	r2, r2
    45ce:	401a      	ands	r2, r3
    45d0:	693b      	ldr	r3, [r7, #16]
    45d2:	615a      	str	r2, [r3, #20]
	}
}
    45d4:	46c0      	nop			; (mov r8, r8)
    45d6:	46bd      	mov	sp, r7
    45d8:	b006      	add	sp, #24
    45da:	bd80      	pop	{r7, pc}
    45dc:	0000428d 	.word	0x0000428d
    45e0:	000053bd 	.word	0x000053bd
    45e4:	000042e1 	.word	0x000042e1

000045e8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    45e8:	b580      	push	{r7, lr}
    45ea:	b082      	sub	sp, #8
    45ec:	af00      	add	r7, sp, #0
    45ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    45f0:	687b      	ldr	r3, [r7, #4]
    45f2:	2280      	movs	r2, #128	; 0x80
    45f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	2200      	movs	r2, #0
    45fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	2201      	movs	r2, #1
    4600:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	2200      	movs	r2, #0
    4606:	70da      	strb	r2, [r3, #3]
}
    4608:	46c0      	nop			; (mov r8, r8)
    460a:	46bd      	mov	sp, r7
    460c:	b002      	add	sp, #8
    460e:	bd80      	pop	{r7, pc}

00004610 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4610:	b580      	push	{r7, lr}
    4612:	b084      	sub	sp, #16
    4614:	af00      	add	r7, sp, #0
    4616:	0002      	movs	r2, r0
    4618:	6039      	str	r1, [r7, #0]
    461a:	1dfb      	adds	r3, r7, #7
    461c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    461e:	230c      	movs	r3, #12
    4620:	18fb      	adds	r3, r7, r3
    4622:	0018      	movs	r0, r3
    4624:	4b10      	ldr	r3, [pc, #64]	; (4668 <port_pin_set_config+0x58>)
    4626:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4628:	230c      	movs	r3, #12
    462a:	18fb      	adds	r3, r7, r3
    462c:	2280      	movs	r2, #128	; 0x80
    462e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4630:	683b      	ldr	r3, [r7, #0]
    4632:	781a      	ldrb	r2, [r3, #0]
    4634:	230c      	movs	r3, #12
    4636:	18fb      	adds	r3, r7, r3
    4638:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    463a:	683b      	ldr	r3, [r7, #0]
    463c:	785a      	ldrb	r2, [r3, #1]
    463e:	230c      	movs	r3, #12
    4640:	18fb      	adds	r3, r7, r3
    4642:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4644:	683b      	ldr	r3, [r7, #0]
    4646:	789a      	ldrb	r2, [r3, #2]
    4648:	230c      	movs	r3, #12
    464a:	18fb      	adds	r3, r7, r3
    464c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    464e:	230c      	movs	r3, #12
    4650:	18fa      	adds	r2, r7, r3
    4652:	1dfb      	adds	r3, r7, #7
    4654:	781b      	ldrb	r3, [r3, #0]
    4656:	0011      	movs	r1, r2
    4658:	0018      	movs	r0, r3
    465a:	4b04      	ldr	r3, [pc, #16]	; (466c <port_pin_set_config+0x5c>)
    465c:	4798      	blx	r3
}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	46bd      	mov	sp, r7
    4662:	b004      	add	sp, #16
    4664:	bd80      	pop	{r7, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	000045e9 	.word	0x000045e9
    466c:	000053bd 	.word	0x000053bd

00004670 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4670:	b580      	push	{r7, lr}
    4672:	b082      	sub	sp, #8
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	2201      	movs	r2, #1
    467c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	2200      	movs	r2, #0
    4682:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	2206      	movs	r2, #6
    4688:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	2200      	movs	r2, #0
    468e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	2200      	movs	r2, #0
    4694:	725a      	strb	r2, [r3, #9]
}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	46bd      	mov	sp, r7
    469a:	b002      	add	sp, #8
    469c:	bd80      	pop	{r7, pc}
    469e:	46c0      	nop			; (mov r8, r8)

000046a0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    46a0:	b580      	push	{r7, lr}
    46a2:	b082      	sub	sp, #8
    46a4:	af00      	add	r7, sp, #0
    46a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	2203      	movs	r2, #3
    46ac:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	2200      	movs	r2, #0
    46b2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	2201      	movs	r2, #1
    46b8:	709a      	strb	r2, [r3, #2]
}
    46ba:	46c0      	nop			; (mov r8, r8)
    46bc:	46bd      	mov	sp, r7
    46be:	b002      	add	sp, #8
    46c0:	bd80      	pop	{r7, pc}
    46c2:	46c0      	nop			; (mov r8, r8)

000046c4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    46c4:	b580      	push	{r7, lr}
    46c6:	b082      	sub	sp, #8
    46c8:	af00      	add	r7, sp, #0
    46ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	2200      	movs	r2, #0
    46d0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	2200      	movs	r2, #0
    46d6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	2200      	movs	r2, #0
    46dc:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	2200      	movs	r2, #0
    46e2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	2200      	movs	r2, #0
    46e8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	2201      	movs	r2, #1
    46ee:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	2207      	movs	r2, #7
    46f4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	223f      	movs	r2, #63	; 0x3f
    46fa:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	2201      	movs	r2, #1
    4700:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	2201      	movs	r2, #1
    4706:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	2206      	movs	r2, #6
    470c:	821a      	strh	r2, [r3, #16]
}
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	46bd      	mov	sp, r7
    4712:	b002      	add	sp, #8
    4714:	bd80      	pop	{r7, pc}
    4716:	46c0      	nop			; (mov r8, r8)

00004718 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4718:	b580      	push	{r7, lr}
    471a:	b082      	sub	sp, #8
    471c:	af00      	add	r7, sp, #0
    471e:	0002      	movs	r2, r0
    4720:	1dfb      	adds	r3, r7, #7
    4722:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4724:	4a03      	ldr	r2, [pc, #12]	; (4734 <system_cpu_clock_set_divider+0x1c>)
    4726:	1dfb      	adds	r3, r7, #7
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	7213      	strb	r3, [r2, #8]
}
    472c:	46c0      	nop			; (mov r8, r8)
    472e:	46bd      	mov	sp, r7
    4730:	b002      	add	sp, #8
    4732:	bd80      	pop	{r7, pc}
    4734:	40000400 	.word	0x40000400

00004738 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	0002      	movs	r2, r0
    4740:	1dfb      	adds	r3, r7, #7
    4742:	701a      	strb	r2, [r3, #0]
    4744:	1dbb      	adds	r3, r7, #6
    4746:	1c0a      	adds	r2, r1, #0
    4748:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    474a:	1dfb      	adds	r3, r7, #7
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	2b01      	cmp	r3, #1
    4750:	d008      	beq.n	4764 <system_apb_clock_set_divider+0x2c>
    4752:	2b02      	cmp	r3, #2
    4754:	d00b      	beq.n	476e <system_apb_clock_set_divider+0x36>
    4756:	2b00      	cmp	r3, #0
    4758:	d10e      	bne.n	4778 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    475a:	4a0b      	ldr	r2, [pc, #44]	; (4788 <system_apb_clock_set_divider+0x50>)
    475c:	1dbb      	adds	r3, r7, #6
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	7253      	strb	r3, [r2, #9]
			break;
    4762:	e00b      	b.n	477c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4764:	4a08      	ldr	r2, [pc, #32]	; (4788 <system_apb_clock_set_divider+0x50>)
    4766:	1dbb      	adds	r3, r7, #6
    4768:	781b      	ldrb	r3, [r3, #0]
    476a:	7293      	strb	r3, [r2, #10]
			break;
    476c:	e006      	b.n	477c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    476e:	4a06      	ldr	r2, [pc, #24]	; (4788 <system_apb_clock_set_divider+0x50>)
    4770:	1dbb      	adds	r3, r7, #6
    4772:	781b      	ldrb	r3, [r3, #0]
    4774:	72d3      	strb	r3, [r2, #11]
			break;
    4776:	e001      	b.n	477c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4778:	2317      	movs	r3, #23
    477a:	e000      	b.n	477e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b002      	add	sp, #8
    4784:	bd80      	pop	{r7, pc}
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	40000400 	.word	0x40000400

0000478c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    478c:	b580      	push	{r7, lr}
    478e:	b082      	sub	sp, #8
    4790:	af00      	add	r7, sp, #0
    4792:	0002      	movs	r2, r0
    4794:	1dfb      	adds	r3, r7, #7
    4796:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4798:	4a08      	ldr	r2, [pc, #32]	; (47bc <system_flash_set_waitstates+0x30>)
    479a:	1dfb      	adds	r3, r7, #7
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	210f      	movs	r1, #15
    47a0:	400b      	ands	r3, r1
    47a2:	b2d9      	uxtb	r1, r3
    47a4:	6853      	ldr	r3, [r2, #4]
    47a6:	200f      	movs	r0, #15
    47a8:	4001      	ands	r1, r0
    47aa:	0049      	lsls	r1, r1, #1
    47ac:	201e      	movs	r0, #30
    47ae:	4383      	bics	r3, r0
    47b0:	430b      	orrs	r3, r1
    47b2:	6053      	str	r3, [r2, #4]
}
    47b4:	46c0      	nop			; (mov r8, r8)
    47b6:	46bd      	mov	sp, r7
    47b8:	b002      	add	sp, #8
    47ba:	bd80      	pop	{r7, pc}
    47bc:	41004000 	.word	0x41004000

000047c0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    47c0:	b580      	push	{r7, lr}
    47c2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    47c4:	46c0      	nop			; (mov r8, r8)
    47c6:	4b04      	ldr	r3, [pc, #16]	; (47d8 <_system_dfll_wait_for_sync+0x18>)
    47c8:	68db      	ldr	r3, [r3, #12]
    47ca:	2210      	movs	r2, #16
    47cc:	4013      	ands	r3, r2
    47ce:	d0fa      	beq.n	47c6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    47d0:	46c0      	nop			; (mov r8, r8)
    47d2:	46bd      	mov	sp, r7
    47d4:	bd80      	pop	{r7, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	40000800 	.word	0x40000800

000047dc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    47dc:	b580      	push	{r7, lr}
    47de:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    47e0:	4b0c      	ldr	r3, [pc, #48]	; (4814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    47e2:	2202      	movs	r2, #2
    47e4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    47e6:	4b0c      	ldr	r3, [pc, #48]	; (4818 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    47e8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    47ea:	4a0a      	ldr	r2, [pc, #40]	; (4814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    47ec:	4b0b      	ldr	r3, [pc, #44]	; (481c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    47ee:	689b      	ldr	r3, [r3, #8]
    47f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    47f2:	4a08      	ldr	r2, [pc, #32]	; (4814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    47f4:	4b09      	ldr	r3, [pc, #36]	; (481c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    47f6:	685b      	ldr	r3, [r3, #4]
    47f8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    47fa:	4b06      	ldr	r3, [pc, #24]	; (4814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    47fc:	2200      	movs	r2, #0
    47fe:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4800:	4b05      	ldr	r3, [pc, #20]	; (4818 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4802:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4804:	4a03      	ldr	r2, [pc, #12]	; (4814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4806:	4b05      	ldr	r3, [pc, #20]	; (481c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4808:	681b      	ldr	r3, [r3, #0]
    480a:	b29b      	uxth	r3, r3
    480c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	46bd      	mov	sp, r7
    4812:	bd80      	pop	{r7, pc}
    4814:	40000800 	.word	0x40000800
    4818:	000047c1 	.word	0x000047c1
    481c:	200001d0 	.word	0x200001d0

00004820 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	0002      	movs	r2, r0
    4828:	1dfb      	adds	r3, r7, #7
    482a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    482c:	1dfb      	adds	r3, r7, #7
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	2b08      	cmp	r3, #8
    4832:	d847      	bhi.n	48c4 <system_clock_source_get_hz+0xa4>
    4834:	009a      	lsls	r2, r3, #2
    4836:	4b26      	ldr	r3, [pc, #152]	; (48d0 <system_clock_source_get_hz+0xb0>)
    4838:	18d3      	adds	r3, r2, r3
    483a:	681b      	ldr	r3, [r3, #0]
    483c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    483e:	4b25      	ldr	r3, [pc, #148]	; (48d4 <system_clock_source_get_hz+0xb4>)
    4840:	691b      	ldr	r3, [r3, #16]
    4842:	e040      	b.n	48c6 <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4844:	4b24      	ldr	r3, [pc, #144]	; (48d8 <system_clock_source_get_hz+0xb8>)
    4846:	6a1b      	ldr	r3, [r3, #32]
    4848:	059b      	lsls	r3, r3, #22
    484a:	0f9b      	lsrs	r3, r3, #30
    484c:	b2db      	uxtb	r3, r3
    484e:	001a      	movs	r2, r3
    4850:	4b22      	ldr	r3, [pc, #136]	; (48dc <system_clock_source_get_hz+0xbc>)
    4852:	40d3      	lsrs	r3, r2
    4854:	e037      	b.n	48c6 <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4856:	2380      	movs	r3, #128	; 0x80
    4858:	021b      	lsls	r3, r3, #8
    485a:	e034      	b.n	48c6 <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    485c:	2380      	movs	r3, #128	; 0x80
    485e:	021b      	lsls	r3, r3, #8
    4860:	e031      	b.n	48c6 <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4862:	4b1c      	ldr	r3, [pc, #112]	; (48d4 <system_clock_source_get_hz+0xb4>)
    4864:	695b      	ldr	r3, [r3, #20]
    4866:	e02e      	b.n	48c6 <system_clock_source_get_hz+0xa6>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4868:	4b1a      	ldr	r3, [pc, #104]	; (48d4 <system_clock_source_get_hz+0xb4>)
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	2202      	movs	r2, #2
    486e:	4013      	ands	r3, r2
    4870:	d101      	bne.n	4876 <system_clock_source_get_hz+0x56>
			return 0;
    4872:	2300      	movs	r3, #0
    4874:	e027      	b.n	48c6 <system_clock_source_get_hz+0xa6>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4876:	4b1a      	ldr	r3, [pc, #104]	; (48e0 <system_clock_source_get_hz+0xc0>)
    4878:	4798      	blx	r3

		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
    487a:	4b16      	ldr	r3, [pc, #88]	; (48d4 <system_clock_source_get_hz+0xb4>)
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	2220      	movs	r2, #32
    4880:	4013      	ands	r3, r2
    4882:	d001      	beq.n	4888 <system_clock_source_get_hz+0x68>
			return 48000000UL;
    4884:	4b17      	ldr	r3, [pc, #92]	; (48e4 <system_clock_source_get_hz+0xc4>)
    4886:	e01e      	b.n	48c6 <system_clock_source_get_hz+0xa6>

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4888:	4b12      	ldr	r3, [pc, #72]	; (48d4 <system_clock_source_get_hz+0xb4>)
    488a:	681b      	ldr	r3, [r3, #0]
    488c:	2204      	movs	r2, #4
    488e:	4013      	ands	r3, r2
    4890:	d009      	beq.n	48a6 <system_clock_source_get_hz+0x86>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4892:	2000      	movs	r0, #0
    4894:	4b14      	ldr	r3, [pc, #80]	; (48e8 <system_clock_source_get_hz+0xc8>)
    4896:	4798      	blx	r3
    4898:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    489a:	4b0e      	ldr	r3, [pc, #56]	; (48d4 <system_clock_source_get_hz+0xb4>)
    489c:	689b      	ldr	r3, [r3, #8]
    489e:	041b      	lsls	r3, r3, #16
    48a0:	0c1b      	lsrs	r3, r3, #16
		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
			return 48000000UL;

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    48a2:	4353      	muls	r3, r2
    48a4:	e00f      	b.n	48c6 <system_clock_source_get_hz+0xa6>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    48a6:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <system_clock_source_get_hz+0xc4>)
    48a8:	e00d      	b.n	48c6 <system_clock_source_get_hz+0xa6>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    48aa:	4a0b      	ldr	r2, [pc, #44]	; (48d8 <system_clock_source_get_hz+0xb8>)
    48ac:	2350      	movs	r3, #80	; 0x50
    48ae:	5cd3      	ldrb	r3, [r2, r3]
    48b0:	b2db      	uxtb	r3, r3
    48b2:	001a      	movs	r2, r3
    48b4:	2304      	movs	r3, #4
    48b6:	4013      	ands	r3, r2
    48b8:	d101      	bne.n	48be <system_clock_source_get_hz+0x9e>
			return 0;
    48ba:	2300      	movs	r3, #0
    48bc:	e003      	b.n	48c6 <system_clock_source_get_hz+0xa6>
		}

		return _system_clock_inst.dpll.frequency;
    48be:	4b05      	ldr	r3, [pc, #20]	; (48d4 <system_clock_source_get_hz+0xb4>)
    48c0:	68db      	ldr	r3, [r3, #12]
    48c2:	e000      	b.n	48c6 <system_clock_source_get_hz+0xa6>
#endif

	default:
		return 0;
    48c4:	2300      	movs	r3, #0
	}
}
    48c6:	0018      	movs	r0, r3
    48c8:	46bd      	mov	sp, r7
    48ca:	b002      	add	sp, #8
    48cc:	bd80      	pop	{r7, pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	00009190 	.word	0x00009190
    48d4:	200001d0 	.word	0x200001d0
    48d8:	40000800 	.word	0x40000800
    48dc:	007a1200 	.word	0x007a1200
    48e0:	000047c1 	.word	0x000047c1
    48e4:	02dc6c00 	.word	0x02dc6c00
    48e8:	000051f5 	.word	0x000051f5

000048ec <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    48f4:	4b1a      	ldr	r3, [pc, #104]	; (4960 <system_clock_source_osc8m_set_config+0x74>)
    48f6:	6a1b      	ldr	r3, [r3, #32]
    48f8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	1c1a      	adds	r2, r3, #0
    4900:	2303      	movs	r3, #3
    4902:	4013      	ands	r3, r2
    4904:	b2da      	uxtb	r2, r3
    4906:	230d      	movs	r3, #13
    4908:	18fb      	adds	r3, r7, r3
    490a:	2103      	movs	r1, #3
    490c:	400a      	ands	r2, r1
    490e:	0010      	movs	r0, r2
    4910:	781a      	ldrb	r2, [r3, #0]
    4912:	2103      	movs	r1, #3
    4914:	438a      	bics	r2, r1
    4916:	1c11      	adds	r1, r2, #0
    4918:	1c02      	adds	r2, r0, #0
    491a:	430a      	orrs	r2, r1
    491c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	789a      	ldrb	r2, [r3, #2]
    4922:	230c      	movs	r3, #12
    4924:	18fb      	adds	r3, r7, r3
    4926:	01d0      	lsls	r0, r2, #7
    4928:	781a      	ldrb	r2, [r3, #0]
    492a:	217f      	movs	r1, #127	; 0x7f
    492c:	400a      	ands	r2, r1
    492e:	1c11      	adds	r1, r2, #0
    4930:	1c02      	adds	r2, r0, #0
    4932:	430a      	orrs	r2, r1
    4934:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4936:	687b      	ldr	r3, [r7, #4]
    4938:	785a      	ldrb	r2, [r3, #1]
    493a:	230c      	movs	r3, #12
    493c:	18fb      	adds	r3, r7, r3
    493e:	2101      	movs	r1, #1
    4940:	400a      	ands	r2, r1
    4942:	0190      	lsls	r0, r2, #6
    4944:	781a      	ldrb	r2, [r3, #0]
    4946:	2140      	movs	r1, #64	; 0x40
    4948:	438a      	bics	r2, r1
    494a:	1c11      	adds	r1, r2, #0
    494c:	1c02      	adds	r2, r0, #0
    494e:	430a      	orrs	r2, r1
    4950:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4952:	4b03      	ldr	r3, [pc, #12]	; (4960 <system_clock_source_osc8m_set_config+0x74>)
    4954:	68fa      	ldr	r2, [r7, #12]
    4956:	621a      	str	r2, [r3, #32]
}
    4958:	46c0      	nop			; (mov r8, r8)
    495a:	46bd      	mov	sp, r7
    495c:	b004      	add	sp, #16
    495e:	bd80      	pop	{r7, pc}
    4960:	40000800 	.word	0x40000800

00004964 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4964:	b580      	push	{r7, lr}
    4966:	b082      	sub	sp, #8
    4968:	af00      	add	r7, sp, #0
    496a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	7a1b      	ldrb	r3, [r3, #8]
    4970:	029b      	lsls	r3, r3, #10
    4972:	041b      	lsls	r3, r3, #16
    4974:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4976:	687b      	ldr	r3, [r7, #4]
    4978:	895b      	ldrh	r3, [r3, #10]
    497a:	059b      	lsls	r3, r3, #22
    497c:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    497e:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    4980:	4b2a      	ldr	r3, [pc, #168]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    4982:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    498c:	4313      	orrs	r3, r2
    498e:	b2db      	uxtb	r3, r3
    4990:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    4996:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4998:	687a      	ldr	r2, [r7, #4]
    499a:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    499c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	785b      	ldrb	r3, [r3, #1]
    49a2:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    49a4:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    49a6:	4b21      	ldr	r3, [pc, #132]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    49a8:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b04      	cmp	r3, #4
    49b0:	d116      	bne.n	49e0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	7b1b      	ldrb	r3, [r3, #12]
    49b6:	069b      	lsls	r3, r3, #26
    49b8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	89db      	ldrh	r3, [r3, #14]
    49be:	041b      	lsls	r3, r3, #16
    49c0:	0019      	movs	r1, r3
    49c2:	4b1b      	ldr	r3, [pc, #108]	; (4a30 <system_clock_source_dfll_set_config+0xcc>)
    49c4:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    49c6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    49c8:	687a      	ldr	r2, [r7, #4]
    49ca:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    49cc:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    49ce:	4b17      	ldr	r3, [pc, #92]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    49d0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    49d2:	4b16      	ldr	r3, [pc, #88]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	687a      	ldr	r2, [r7, #4]
    49d8:	7812      	ldrb	r2, [r2, #0]
    49da:	431a      	orrs	r2, r3
    49dc:	4b13      	ldr	r3, [pc, #76]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    49de:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	781b      	ldrb	r3, [r3, #0]
    49e4:	2b20      	cmp	r3, #32
    49e6:	d11c      	bne.n	4a22 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	7b1b      	ldrb	r3, [r3, #12]
    49ec:	069b      	lsls	r3, r3, #26
    49ee:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	89db      	ldrh	r3, [r3, #14]
    49f4:	041b      	lsls	r3, r3, #16
    49f6:	0019      	movs	r1, r3
    49f8:	4b0d      	ldr	r3, [pc, #52]	; (4a30 <system_clock_source_dfll_set_config+0xcc>)
    49fa:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    49fc:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    49fe:	687a      	ldr	r2, [r7, #4]
    4a00:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4a02:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4a04:	4b09      	ldr	r3, [pc, #36]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    4a06:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4a08:	4b08      	ldr	r3, [pc, #32]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	687a      	ldr	r2, [r7, #4]
    4a0e:	7812      	ldrb	r2, [r2, #0]
    4a10:	2104      	movs	r1, #4
    4a12:	430a      	orrs	r2, r1
    4a14:	b2d2      	uxtb	r2, r2
    4a16:	4313      	orrs	r3, r2
    4a18:	2280      	movs	r2, #128	; 0x80
    4a1a:	00d2      	lsls	r2, r2, #3
    4a1c:	431a      	orrs	r2, r3
    4a1e:	4b03      	ldr	r3, [pc, #12]	; (4a2c <system_clock_source_dfll_set_config+0xc8>)
    4a20:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	46bd      	mov	sp, r7
    4a26:	b002      	add	sp, #8
    4a28:	bd80      	pop	{r7, pc}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	200001d0 	.word	0x200001d0
    4a30:	03ff0000 	.word	0x03ff0000

00004a34 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4a34:	b580      	push	{r7, lr}
    4a36:	b082      	sub	sp, #8
    4a38:	af00      	add	r7, sp, #0
    4a3a:	0002      	movs	r2, r0
    4a3c:	1dfb      	adds	r3, r7, #7
    4a3e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4a40:	1dfb      	adds	r3, r7, #7
    4a42:	781b      	ldrb	r3, [r3, #0]
    4a44:	2b08      	cmp	r3, #8
    4a46:	d83b      	bhi.n	4ac0 <system_clock_source_enable+0x8c>
    4a48:	009a      	lsls	r2, r3, #2
    4a4a:	4b21      	ldr	r3, [pc, #132]	; (4ad0 <system_clock_source_enable+0x9c>)
    4a4c:	18d3      	adds	r3, r2, r3
    4a4e:	681b      	ldr	r3, [r3, #0]
    4a50:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4a52:	4b20      	ldr	r3, [pc, #128]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a54:	4a1f      	ldr	r2, [pc, #124]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a56:	6a12      	ldr	r2, [r2, #32]
    4a58:	2102      	movs	r1, #2
    4a5a:	430a      	orrs	r2, r1
    4a5c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4a5e:	2300      	movs	r3, #0
    4a60:	e031      	b.n	4ac6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4a62:	4b1c      	ldr	r3, [pc, #112]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a64:	4a1b      	ldr	r2, [pc, #108]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a66:	6992      	ldr	r2, [r2, #24]
    4a68:	2102      	movs	r1, #2
    4a6a:	430a      	orrs	r2, r1
    4a6c:	619a      	str	r2, [r3, #24]
		break;
    4a6e:	e029      	b.n	4ac4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4a70:	4a18      	ldr	r2, [pc, #96]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a72:	4b18      	ldr	r3, [pc, #96]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a74:	8a1b      	ldrh	r3, [r3, #16]
    4a76:	b29b      	uxth	r3, r3
    4a78:	2102      	movs	r1, #2
    4a7a:	430b      	orrs	r3, r1
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	8213      	strh	r3, [r2, #16]
		break;
    4a80:	e020      	b.n	4ac4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4a82:	4a14      	ldr	r2, [pc, #80]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a84:	4b13      	ldr	r3, [pc, #76]	; (4ad4 <system_clock_source_enable+0xa0>)
    4a86:	8a9b      	ldrh	r3, [r3, #20]
    4a88:	b29b      	uxth	r3, r3
    4a8a:	2102      	movs	r1, #2
    4a8c:	430b      	orrs	r3, r1
    4a8e:	b29b      	uxth	r3, r3
    4a90:	8293      	strh	r3, [r2, #20]
		break;
    4a92:	e017      	b.n	4ac4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4a94:	4b10      	ldr	r3, [pc, #64]	; (4ad8 <system_clock_source_enable+0xa4>)
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	2202      	movs	r2, #2
    4a9a:	431a      	orrs	r2, r3
    4a9c:	4b0e      	ldr	r3, [pc, #56]	; (4ad8 <system_clock_source_enable+0xa4>)
    4a9e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4aa0:	4b0e      	ldr	r3, [pc, #56]	; (4adc <system_clock_source_enable+0xa8>)
    4aa2:	4798      	blx	r3
		break;
    4aa4:	e00e      	b.n	4ac4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4aa6:	4a0b      	ldr	r2, [pc, #44]	; (4ad4 <system_clock_source_enable+0xa0>)
    4aa8:	490a      	ldr	r1, [pc, #40]	; (4ad4 <system_clock_source_enable+0xa0>)
    4aaa:	2344      	movs	r3, #68	; 0x44
    4aac:	5ccb      	ldrb	r3, [r1, r3]
    4aae:	b2db      	uxtb	r3, r3
    4ab0:	2102      	movs	r1, #2
    4ab2:	430b      	orrs	r3, r1
    4ab4:	b2d9      	uxtb	r1, r3
    4ab6:	2344      	movs	r3, #68	; 0x44
    4ab8:	54d1      	strb	r1, [r2, r3]
		break;
    4aba:	e003      	b.n	4ac4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4abc:	2300      	movs	r3, #0
    4abe:	e002      	b.n	4ac6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4ac0:	2317      	movs	r3, #23
    4ac2:	e000      	b.n	4ac6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4ac4:	2300      	movs	r3, #0
}
    4ac6:	0018      	movs	r0, r3
    4ac8:	46bd      	mov	sp, r7
    4aca:	b002      	add	sp, #8
    4acc:	bd80      	pop	{r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	000091b4 	.word	0x000091b4
    4ad4:	40000800 	.word	0x40000800
    4ad8:	200001d0 	.word	0x200001d0
    4adc:	000047dd 	.word	0x000047dd

00004ae0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b084      	sub	sp, #16
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	0002      	movs	r2, r0
    4ae8:	1dfb      	adds	r3, r7, #7
    4aea:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    4aec:	2300      	movs	r3, #0
    4aee:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    4af0:	1dfb      	adds	r3, r7, #7
    4af2:	781b      	ldrb	r3, [r3, #0]
    4af4:	2b08      	cmp	r3, #8
    4af6:	d821      	bhi.n	4b3c <system_clock_source_is_ready+0x5c>
    4af8:	009a      	lsls	r2, r3, #2
    4afa:	4b18      	ldr	r3, [pc, #96]	; (4b5c <system_clock_source_is_ready+0x7c>)
    4afc:	18d3      	adds	r3, r2, r3
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    4b02:	2308      	movs	r3, #8
    4b04:	60fb      	str	r3, [r7, #12]
		break;
    4b06:	e01b      	b.n	4b40 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4b08:	2304      	movs	r3, #4
    4b0a:	60fb      	str	r3, [r7, #12]
		break;
    4b0c:	e018      	b.n	4b40 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4b0e:	2301      	movs	r3, #1
    4b10:	60fb      	str	r3, [r7, #12]
		break;
    4b12:	e015      	b.n	4b40 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    4b14:	2302      	movs	r3, #2
    4b16:	60fb      	str	r3, [r7, #12]
		break;
    4b18:	e012      	b.n	4b40 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    4b1a:	2310      	movs	r3, #16
    4b1c:	60fb      	str	r3, [r7, #12]
		}
		break;
    4b1e:	e00f      	b.n	4b40 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4b20:	4a0f      	ldr	r2, [pc, #60]	; (4b60 <system_clock_source_is_ready+0x80>)
    4b22:	2350      	movs	r3, #80	; 0x50
    4b24:	5cd3      	ldrb	r3, [r2, r3]
    4b26:	b2db      	uxtb	r3, r3
    4b28:	001a      	movs	r2, r3
    4b2a:	2303      	movs	r3, #3
    4b2c:	4013      	ands	r3, r2
    4b2e:	3b03      	subs	r3, #3
    4b30:	425a      	negs	r2, r3
    4b32:	4153      	adcs	r3, r2
    4b34:	b2db      	uxtb	r3, r3
    4b36:	e00c      	b.n	4b52 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4b38:	2301      	movs	r3, #1
    4b3a:	e00a      	b.n	4b52 <system_clock_source_is_ready+0x72>

	default:
		return false;
    4b3c:	2300      	movs	r3, #0
    4b3e:	e008      	b.n	4b52 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4b40:	4b07      	ldr	r3, [pc, #28]	; (4b60 <system_clock_source_is_ready+0x80>)
    4b42:	68db      	ldr	r3, [r3, #12]
    4b44:	68fa      	ldr	r2, [r7, #12]
    4b46:	401a      	ands	r2, r3
    4b48:	68fb      	ldr	r3, [r7, #12]
    4b4a:	1ad3      	subs	r3, r2, r3
    4b4c:	425a      	negs	r2, r3
    4b4e:	4153      	adcs	r3, r2
    4b50:	b2db      	uxtb	r3, r3
}
    4b52:	0018      	movs	r0, r3
    4b54:	46bd      	mov	sp, r7
    4b56:	b004      	add	sp, #16
    4b58:	bd80      	pop	{r7, pc}
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	000091d8 	.word	0x000091d8
    4b60:	40000800 	.word	0x40000800

00004b64 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4b64:	b580      	push	{r7, lr}
    4b66:	b082      	sub	sp, #8
    4b68:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4b6a:	003b      	movs	r3, r7
    4b6c:	2202      	movs	r2, #2
    4b6e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4b70:	2300      	movs	r3, #0
    4b72:	607b      	str	r3, [r7, #4]
    4b74:	e009      	b.n	4b8a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4b76:	687b      	ldr	r3, [r7, #4]
    4b78:	b2db      	uxtb	r3, r3
    4b7a:	003a      	movs	r2, r7
    4b7c:	0011      	movs	r1, r2
    4b7e:	0018      	movs	r0, r3
    4b80:	4b05      	ldr	r3, [pc, #20]	; (4b98 <_switch_peripheral_gclk+0x34>)
    4b82:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	3301      	adds	r3, #1
    4b88:	607b      	str	r3, [r7, #4]
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	2b24      	cmp	r3, #36	; 0x24
    4b8e:	d9f2      	bls.n	4b76 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4b90:	46c0      	nop			; (mov r8, r8)
    4b92:	46bd      	mov	sp, r7
    4b94:	b002      	add	sp, #8
    4b96:	bd80      	pop	{r7, pc}
    4b98:	000050d1 	.word	0x000050d1

00004b9c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4b9c:	b580      	push	{r7, lr}
    4b9e:	b0a6      	sub	sp, #152	; 0x98
    4ba0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4ba2:	4b6e      	ldr	r3, [pc, #440]	; (4d5c <system_clock_init+0x1c0>)
    4ba4:	22c2      	movs	r2, #194	; 0xc2
    4ba6:	00d2      	lsls	r2, r2, #3
    4ba8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4baa:	2002      	movs	r0, #2
    4bac:	4b6c      	ldr	r3, [pc, #432]	; (4d60 <system_clock_init+0x1c4>)
    4bae:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4bb0:	4b6c      	ldr	r3, [pc, #432]	; (4d64 <system_clock_init+0x1c8>)
    4bb2:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    4bb4:	2380      	movs	r3, #128	; 0x80
    4bb6:	18fb      	adds	r3, r7, r3
    4bb8:	0018      	movs	r0, r3
    4bba:	4b6b      	ldr	r3, [pc, #428]	; (4d68 <system_clock_init+0x1cc>)
    4bbc:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4bbe:	2380      	movs	r3, #128	; 0x80
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	2220      	movs	r2, #32
    4bc4:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    4bc6:	2380      	movs	r3, #128	; 0x80
    4bc8:	18fb      	adds	r3, r7, r3
    4bca:	2200      	movs	r2, #0
    4bcc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4bce:	4b67      	ldr	r3, [pc, #412]	; (4d6c <system_clock_init+0x1d0>)
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	0e9b      	lsrs	r3, r3, #26
    4bd4:	2294      	movs	r2, #148	; 0x94
    4bd6:	18ba      	adds	r2, r7, r2
    4bd8:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4bda:	2394      	movs	r3, #148	; 0x94
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	2b3f      	cmp	r3, #63	; 0x3f
    4be2:	d103      	bne.n	4bec <system_clock_init+0x50>
		coarse = 0x1f;
    4be4:	231f      	movs	r3, #31
    4be6:	2294      	movs	r2, #148	; 0x94
    4be8:	18ba      	adds	r2, r7, r2
    4bea:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    4bec:	2394      	movs	r3, #148	; 0x94
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	b2da      	uxtb	r2, r3
    4bf4:	2380      	movs	r3, #128	; 0x80
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4bfa:	2380      	movs	r3, #128	; 0x80
    4bfc:	18fb      	adds	r3, r7, r3
    4bfe:	2200      	movs	r2, #0
    4c00:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4c02:	2380      	movs	r3, #128	; 0x80
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	2200      	movs	r2, #0
    4c08:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4c0a:	2380      	movs	r3, #128	; 0x80
    4c0c:	18fb      	adds	r3, r7, r3
    4c0e:	2200      	movs	r2, #0
    4c10:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4c12:	2380      	movs	r3, #128	; 0x80
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	2200      	movs	r2, #0
    4c18:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4c1a:	2380      	movs	r3, #128	; 0x80
    4c1c:	18fb      	adds	r3, r7, r3
    4c1e:	2207      	movs	r2, #7
    4c20:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4c22:	2380      	movs	r3, #128	; 0x80
    4c24:	18fb      	adds	r3, r7, r3
    4c26:	223f      	movs	r2, #63	; 0x3f
    4c28:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    4c2a:	2380      	movs	r3, #128	; 0x80
    4c2c:	18fb      	adds	r3, r7, r3
    4c2e:	220a      	movs	r2, #10
    4c30:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    4c32:	2380      	movs	r3, #128	; 0x80
    4c34:	18fb      	adds	r3, r7, r3
    4c36:	4a4e      	ldr	r2, [pc, #312]	; (4d70 <system_clock_init+0x1d4>)
    4c38:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4c3a:	2380      	movs	r3, #128	; 0x80
    4c3c:	18fb      	adds	r3, r7, r3
    4c3e:	2200      	movs	r2, #0
    4c40:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4c42:	2380      	movs	r3, #128	; 0x80
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	2200      	movs	r2, #0
    4c48:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4c4a:	2380      	movs	r3, #128	; 0x80
    4c4c:	18fb      	adds	r3, r7, r3
    4c4e:	2200      	movs	r2, #0
    4c50:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    4c52:	2380      	movs	r3, #128	; 0x80
    4c54:	18fb      	adds	r3, r7, r3
    4c56:	2280      	movs	r2, #128	; 0x80
    4c58:	0052      	lsls	r2, r2, #1
    4c5a:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    4c5c:	2380      	movs	r3, #128	; 0x80
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	4a44      	ldr	r2, [pc, #272]	; (4d74 <system_clock_init+0x1d8>)
    4c62:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4c64:	2380      	movs	r3, #128	; 0x80
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	0018      	movs	r0, r3
    4c6a:	4b43      	ldr	r3, [pc, #268]	; (4d78 <system_clock_init+0x1dc>)
    4c6c:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4c6e:	237c      	movs	r3, #124	; 0x7c
    4c70:	18fb      	adds	r3, r7, r3
    4c72:	0018      	movs	r0, r3
    4c74:	4b41      	ldr	r3, [pc, #260]	; (4d7c <system_clock_init+0x1e0>)
    4c76:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4c78:	237c      	movs	r3, #124	; 0x7c
    4c7a:	18fb      	adds	r3, r7, r3
    4c7c:	2200      	movs	r2, #0
    4c7e:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4c80:	237c      	movs	r3, #124	; 0x7c
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	2201      	movs	r2, #1
    4c86:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4c88:	237c      	movs	r3, #124	; 0x7c
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	2200      	movs	r2, #0
    4c8e:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4c90:	237c      	movs	r3, #124	; 0x7c
    4c92:	18fb      	adds	r3, r7, r3
    4c94:	0018      	movs	r0, r3
    4c96:	4b3a      	ldr	r3, [pc, #232]	; (4d80 <system_clock_init+0x1e4>)
    4c98:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4c9a:	2006      	movs	r0, #6
    4c9c:	4b39      	ldr	r3, [pc, #228]	; (4d84 <system_clock_init+0x1e8>)
    4c9e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4ca0:	4b39      	ldr	r3, [pc, #228]	; (4d88 <system_clock_init+0x1ec>)
    4ca2:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4ca4:	2364      	movs	r3, #100	; 0x64
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	0018      	movs	r0, r3
    4caa:	4b38      	ldr	r3, [pc, #224]	; (4d8c <system_clock_init+0x1f0>)
    4cac:	4798      	blx	r3
    4cae:	2364      	movs	r3, #100	; 0x64
    4cb0:	18fb      	adds	r3, r7, r3
    4cb2:	2205      	movs	r2, #5
    4cb4:	701a      	strb	r2, [r3, #0]
    4cb6:	2364      	movs	r3, #100	; 0x64
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	2201      	movs	r2, #1
    4cbc:	605a      	str	r2, [r3, #4]
    4cbe:	2364      	movs	r3, #100	; 0x64
    4cc0:	18fb      	adds	r3, r7, r3
    4cc2:	2200      	movs	r2, #0
    4cc4:	721a      	strb	r2, [r3, #8]
    4cc6:	2364      	movs	r3, #100	; 0x64
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	2200      	movs	r2, #0
    4ccc:	725a      	strb	r2, [r3, #9]
    4cce:	2364      	movs	r3, #100	; 0x64
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	0019      	movs	r1, r3
    4cd4:	2001      	movs	r0, #1
    4cd6:	4b2e      	ldr	r3, [pc, #184]	; (4d90 <system_clock_init+0x1f4>)
    4cd8:	4798      	blx	r3
    4cda:	2001      	movs	r0, #1
    4cdc:	4b2d      	ldr	r3, [pc, #180]	; (4d94 <system_clock_init+0x1f8>)
    4cde:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4ce0:	2007      	movs	r0, #7
    4ce2:	4b28      	ldr	r3, [pc, #160]	; (4d84 <system_clock_init+0x1e8>)
    4ce4:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	2007      	movs	r0, #7
    4cea:	4b2b      	ldr	r3, [pc, #172]	; (4d98 <system_clock_init+0x1fc>)
    4cec:	4798      	blx	r3
    4cee:	0003      	movs	r3, r0
    4cf0:	001a      	movs	r2, r3
    4cf2:	2301      	movs	r3, #1
    4cf4:	4053      	eors	r3, r2
    4cf6:	b2db      	uxtb	r3, r3
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d1f5      	bne.n	4ce8 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4cfc:	4a17      	ldr	r2, [pc, #92]	; (4d5c <system_clock_init+0x1c0>)
    4cfe:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    4d00:	2180      	movs	r1, #128	; 0x80
    4d02:	430b      	orrs	r3, r1
    4d04:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4d06:	2000      	movs	r0, #0
    4d08:	4b24      	ldr	r3, [pc, #144]	; (4d9c <system_clock_init+0x200>)
    4d0a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4d0c:	2100      	movs	r1, #0
    4d0e:	2000      	movs	r0, #0
    4d10:	4b23      	ldr	r3, [pc, #140]	; (4da0 <system_clock_init+0x204>)
    4d12:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4d14:	2100      	movs	r1, #0
    4d16:	2001      	movs	r0, #1
    4d18:	4b21      	ldr	r3, [pc, #132]	; (4da0 <system_clock_init+0x204>)
    4d1a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4d1c:	2100      	movs	r1, #0
    4d1e:	2002      	movs	r0, #2
    4d20:	4b1f      	ldr	r3, [pc, #124]	; (4da0 <system_clock_init+0x204>)
    4d22:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4d24:	003b      	movs	r3, r7
    4d26:	0018      	movs	r0, r3
    4d28:	4b18      	ldr	r3, [pc, #96]	; (4d8c <system_clock_init+0x1f0>)
    4d2a:	4798      	blx	r3
    4d2c:	003b      	movs	r3, r7
    4d2e:	2207      	movs	r2, #7
    4d30:	701a      	strb	r2, [r3, #0]
    4d32:	003b      	movs	r3, r7
    4d34:	2201      	movs	r2, #1
    4d36:	605a      	str	r2, [r3, #4]
    4d38:	003b      	movs	r3, r7
    4d3a:	2201      	movs	r2, #1
    4d3c:	721a      	strb	r2, [r3, #8]
    4d3e:	003b      	movs	r3, r7
    4d40:	2200      	movs	r2, #0
    4d42:	725a      	strb	r2, [r3, #9]
    4d44:	003b      	movs	r3, r7
    4d46:	0019      	movs	r1, r3
    4d48:	2000      	movs	r0, #0
    4d4a:	4b11      	ldr	r3, [pc, #68]	; (4d90 <system_clock_init+0x1f4>)
    4d4c:	4798      	blx	r3
    4d4e:	2000      	movs	r0, #0
    4d50:	4b10      	ldr	r3, [pc, #64]	; (4d94 <system_clock_init+0x1f8>)
    4d52:	4798      	blx	r3
#endif
}
    4d54:	46c0      	nop			; (mov r8, r8)
    4d56:	46bd      	mov	sp, r7
    4d58:	b026      	add	sp, #152	; 0x98
    4d5a:	bd80      	pop	{r7, pc}
    4d5c:	40000800 	.word	0x40000800
    4d60:	0000478d 	.word	0x0000478d
    4d64:	00004b65 	.word	0x00004b65
    4d68:	000046c5 	.word	0x000046c5
    4d6c:	00806024 	.word	0x00806024
    4d70:	000001ff 	.word	0x000001ff
    4d74:	ffffbb80 	.word	0xffffbb80
    4d78:	00004965 	.word	0x00004965
    4d7c:	000046a1 	.word	0x000046a1
    4d80:	000048ed 	.word	0x000048ed
    4d84:	00004a35 	.word	0x00004a35
    4d88:	00004e49 	.word	0x00004e49
    4d8c:	00004671 	.word	0x00004671
    4d90:	00004e79 	.word	0x00004e79
    4d94:	00004f9d 	.word	0x00004f9d
    4d98:	00004ae1 	.word	0x00004ae1
    4d9c:	00004719 	.word	0x00004719
    4da0:	00004739 	.word	0x00004739

00004da4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4da4:	b580      	push	{r7, lr}
    4da6:	b082      	sub	sp, #8
    4da8:	af00      	add	r7, sp, #0
    4daa:	0002      	movs	r2, r0
    4dac:	6039      	str	r1, [r7, #0]
    4dae:	1dfb      	adds	r3, r7, #7
    4db0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4db2:	1dfb      	adds	r3, r7, #7
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	2b01      	cmp	r3, #1
    4db8:	d00a      	beq.n	4dd0 <system_apb_clock_set_mask+0x2c>
    4dba:	2b02      	cmp	r3, #2
    4dbc:	d00f      	beq.n	4dde <system_apb_clock_set_mask+0x3a>
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d114      	bne.n	4dec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4dc2:	4b0e      	ldr	r3, [pc, #56]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4dc4:	4a0d      	ldr	r2, [pc, #52]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4dc6:	6991      	ldr	r1, [r2, #24]
    4dc8:	683a      	ldr	r2, [r7, #0]
    4dca:	430a      	orrs	r2, r1
    4dcc:	619a      	str	r2, [r3, #24]
			break;
    4dce:	e00f      	b.n	4df0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4dd0:	4b0a      	ldr	r3, [pc, #40]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4dd2:	4a0a      	ldr	r2, [pc, #40]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4dd4:	69d1      	ldr	r1, [r2, #28]
    4dd6:	683a      	ldr	r2, [r7, #0]
    4dd8:	430a      	orrs	r2, r1
    4dda:	61da      	str	r2, [r3, #28]
			break;
    4ddc:	e008      	b.n	4df0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4dde:	4b07      	ldr	r3, [pc, #28]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4de0:	4a06      	ldr	r2, [pc, #24]	; (4dfc <system_apb_clock_set_mask+0x58>)
    4de2:	6a11      	ldr	r1, [r2, #32]
    4de4:	683a      	ldr	r2, [r7, #0]
    4de6:	430a      	orrs	r2, r1
    4de8:	621a      	str	r2, [r3, #32]
			break;
    4dea:	e001      	b.n	4df0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4dec:	2317      	movs	r3, #23
    4dee:	e000      	b.n	4df2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4df0:	2300      	movs	r3, #0
}
    4df2:	0018      	movs	r0, r3
    4df4:	46bd      	mov	sp, r7
    4df6:	b002      	add	sp, #8
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	40000400 	.word	0x40000400

00004e00 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4e04:	4b02      	ldr	r3, [pc, #8]	; (4e10 <system_interrupt_enter_critical_section+0x10>)
    4e06:	4798      	blx	r3
}
    4e08:	46c0      	nop			; (mov r8, r8)
    4e0a:	46bd      	mov	sp, r7
    4e0c:	bd80      	pop	{r7, pc}
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	00003e0d 	.word	0x00003e0d

00004e14 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4e14:	b580      	push	{r7, lr}
    4e16:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4e18:	4b02      	ldr	r3, [pc, #8]	; (4e24 <system_interrupt_leave_critical_section+0x10>)
    4e1a:	4798      	blx	r3
}
    4e1c:	46c0      	nop			; (mov r8, r8)
    4e1e:	46bd      	mov	sp, r7
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	00003e61 	.word	0x00003e61

00004e28 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e2c:	4b05      	ldr	r3, [pc, #20]	; (4e44 <system_gclk_is_syncing+0x1c>)
    4e2e:	785b      	ldrb	r3, [r3, #1]
    4e30:	b2db      	uxtb	r3, r3
    4e32:	b25b      	sxtb	r3, r3
    4e34:	2b00      	cmp	r3, #0
    4e36:	da01      	bge.n	4e3c <system_gclk_is_syncing+0x14>
		return true;
    4e38:	2301      	movs	r3, #1
    4e3a:	e000      	b.n	4e3e <system_gclk_is_syncing+0x16>
	}

	return false;
    4e3c:	2300      	movs	r3, #0
}
    4e3e:	0018      	movs	r0, r3
    4e40:	46bd      	mov	sp, r7
    4e42:	bd80      	pop	{r7, pc}
    4e44:	40000c00 	.word	0x40000c00

00004e48 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4e4c:	2108      	movs	r1, #8
    4e4e:	2000      	movs	r0, #0
    4e50:	4b07      	ldr	r3, [pc, #28]	; (4e70 <system_gclk_init+0x28>)
    4e52:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4e54:	4b07      	ldr	r3, [pc, #28]	; (4e74 <system_gclk_init+0x2c>)
    4e56:	2201      	movs	r2, #1
    4e58:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	4b05      	ldr	r3, [pc, #20]	; (4e74 <system_gclk_init+0x2c>)
    4e5e:	781b      	ldrb	r3, [r3, #0]
    4e60:	b2db      	uxtb	r3, r3
    4e62:	001a      	movs	r2, r3
    4e64:	2301      	movs	r3, #1
    4e66:	4013      	ands	r3, r2
    4e68:	d1f8      	bne.n	4e5c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00004da5 	.word	0x00004da5
    4e74:	40000c00 	.word	0x40000c00

00004e78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	b086      	sub	sp, #24
    4e7c:	af00      	add	r7, sp, #0
    4e7e:	0002      	movs	r2, r0
    4e80:	6039      	str	r1, [r7, #0]
    4e82:	1dfb      	adds	r3, r7, #7
    4e84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4e86:	1dfb      	adds	r3, r7, #7
    4e88:	781b      	ldrb	r3, [r3, #0]
    4e8a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4e8c:	1dfb      	adds	r3, r7, #7
    4e8e:	781b      	ldrb	r3, [r3, #0]
    4e90:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4e92:	683b      	ldr	r3, [r7, #0]
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	021b      	lsls	r3, r3, #8
    4e98:	001a      	movs	r2, r3
    4e9a:	697b      	ldr	r3, [r7, #20]
    4e9c:	4313      	orrs	r3, r2
    4e9e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4ea0:	683b      	ldr	r3, [r7, #0]
    4ea2:	785b      	ldrb	r3, [r3, #1]
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d004      	beq.n	4eb2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4ea8:	697b      	ldr	r3, [r7, #20]
    4eaa:	2280      	movs	r2, #128	; 0x80
    4eac:	02d2      	lsls	r2, r2, #11
    4eae:	4313      	orrs	r3, r2
    4eb0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4eb2:	683b      	ldr	r3, [r7, #0]
    4eb4:	7a5b      	ldrb	r3, [r3, #9]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d004      	beq.n	4ec4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4eba:	697b      	ldr	r3, [r7, #20]
    4ebc:	2280      	movs	r2, #128	; 0x80
    4ebe:	0312      	lsls	r2, r2, #12
    4ec0:	4313      	orrs	r3, r2
    4ec2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4ec4:	683b      	ldr	r3, [r7, #0]
    4ec6:	685b      	ldr	r3, [r3, #4]
    4ec8:	2b01      	cmp	r3, #1
    4eca:	d92c      	bls.n	4f26 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4ecc:	683b      	ldr	r3, [r7, #0]
    4ece:	685a      	ldr	r2, [r3, #4]
    4ed0:	683b      	ldr	r3, [r7, #0]
    4ed2:	685b      	ldr	r3, [r3, #4]
    4ed4:	3b01      	subs	r3, #1
    4ed6:	4013      	ands	r3, r2
    4ed8:	d11a      	bne.n	4f10 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4eda:	2300      	movs	r3, #0
    4edc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4ede:	2302      	movs	r3, #2
    4ee0:	60bb      	str	r3, [r7, #8]
    4ee2:	e005      	b.n	4ef0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4ee4:	68fb      	ldr	r3, [r7, #12]
    4ee6:	3301      	adds	r3, #1
    4ee8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4eea:	68bb      	ldr	r3, [r7, #8]
    4eec:	005b      	lsls	r3, r3, #1
    4eee:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4ef0:	683b      	ldr	r3, [r7, #0]
    4ef2:	685a      	ldr	r2, [r3, #4]
    4ef4:	68bb      	ldr	r3, [r7, #8]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d8f4      	bhi.n	4ee4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	021b      	lsls	r3, r3, #8
    4efe:	693a      	ldr	r2, [r7, #16]
    4f00:	4313      	orrs	r3, r2
    4f02:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4f04:	697b      	ldr	r3, [r7, #20]
    4f06:	2280      	movs	r2, #128	; 0x80
    4f08:	0352      	lsls	r2, r2, #13
    4f0a:	4313      	orrs	r3, r2
    4f0c:	617b      	str	r3, [r7, #20]
    4f0e:	e00a      	b.n	4f26 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4f10:	683b      	ldr	r3, [r7, #0]
    4f12:	685b      	ldr	r3, [r3, #4]
    4f14:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4f16:	693a      	ldr	r2, [r7, #16]
    4f18:	4313      	orrs	r3, r2
    4f1a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4f1c:	697b      	ldr	r3, [r7, #20]
    4f1e:	2280      	movs	r2, #128	; 0x80
    4f20:	0292      	lsls	r2, r2, #10
    4f22:	4313      	orrs	r3, r2
    4f24:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4f26:	683b      	ldr	r3, [r7, #0]
    4f28:	7a1b      	ldrb	r3, [r3, #8]
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d004      	beq.n	4f38 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4f2e:	697b      	ldr	r3, [r7, #20]
    4f30:	2280      	movs	r2, #128	; 0x80
    4f32:	0392      	lsls	r2, r2, #14
    4f34:	4313      	orrs	r3, r2
    4f36:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4f38:	46c0      	nop			; (mov r8, r8)
    4f3a:	4b13      	ldr	r3, [pc, #76]	; (4f88 <system_gclk_gen_set_config+0x110>)
    4f3c:	4798      	blx	r3
    4f3e:	1e03      	subs	r3, r0, #0
    4f40:	d1fb      	bne.n	4f3a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4f42:	4b12      	ldr	r3, [pc, #72]	; (4f8c <system_gclk_gen_set_config+0x114>)
    4f44:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4f46:	4a12      	ldr	r2, [pc, #72]	; (4f90 <system_gclk_gen_set_config+0x118>)
    4f48:	1dfb      	adds	r3, r7, #7
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	4b0d      	ldr	r3, [pc, #52]	; (4f88 <system_gclk_gen_set_config+0x110>)
    4f52:	4798      	blx	r3
    4f54:	1e03      	subs	r3, r0, #0
    4f56:	d1fb      	bne.n	4f50 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4f58:	4b0e      	ldr	r3, [pc, #56]	; (4f94 <system_gclk_gen_set_config+0x11c>)
    4f5a:	693a      	ldr	r2, [r7, #16]
    4f5c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4f5e:	46c0      	nop			; (mov r8, r8)
    4f60:	4b09      	ldr	r3, [pc, #36]	; (4f88 <system_gclk_gen_set_config+0x110>)
    4f62:	4798      	blx	r3
    4f64:	1e03      	subs	r3, r0, #0
    4f66:	d1fb      	bne.n	4f60 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4f68:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <system_gclk_gen_set_config+0x11c>)
    4f6a:	4a0a      	ldr	r2, [pc, #40]	; (4f94 <system_gclk_gen_set_config+0x11c>)
    4f6c:	6851      	ldr	r1, [r2, #4]
    4f6e:	2280      	movs	r2, #128	; 0x80
    4f70:	0252      	lsls	r2, r2, #9
    4f72:	4011      	ands	r1, r2
    4f74:	697a      	ldr	r2, [r7, #20]
    4f76:	430a      	orrs	r2, r1
    4f78:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4f7a:	4b07      	ldr	r3, [pc, #28]	; (4f98 <system_gclk_gen_set_config+0x120>)
    4f7c:	4798      	blx	r3
}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	46bd      	mov	sp, r7
    4f82:	b006      	add	sp, #24
    4f84:	bd80      	pop	{r7, pc}
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	00004e29 	.word	0x00004e29
    4f8c:	00004e01 	.word	0x00004e01
    4f90:	40000c08 	.word	0x40000c08
    4f94:	40000c00 	.word	0x40000c00
    4f98:	00004e15 	.word	0x00004e15

00004f9c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b082      	sub	sp, #8
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	0002      	movs	r2, r0
    4fa4:	1dfb      	adds	r3, r7, #7
    4fa6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4fa8:	46c0      	nop			; (mov r8, r8)
    4faa:	4b0e      	ldr	r3, [pc, #56]	; (4fe4 <system_gclk_gen_enable+0x48>)
    4fac:	4798      	blx	r3
    4fae:	1e03      	subs	r3, r0, #0
    4fb0:	d1fb      	bne.n	4faa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4fb2:	4b0d      	ldr	r3, [pc, #52]	; (4fe8 <system_gclk_gen_enable+0x4c>)
    4fb4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4fb6:	4a0d      	ldr	r2, [pc, #52]	; (4fec <system_gclk_gen_enable+0x50>)
    4fb8:	1dfb      	adds	r3, r7, #7
    4fba:	781b      	ldrb	r3, [r3, #0]
    4fbc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	4b08      	ldr	r3, [pc, #32]	; (4fe4 <system_gclk_gen_enable+0x48>)
    4fc2:	4798      	blx	r3
    4fc4:	1e03      	subs	r3, r0, #0
    4fc6:	d1fb      	bne.n	4fc0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4fc8:	4b09      	ldr	r3, [pc, #36]	; (4ff0 <system_gclk_gen_enable+0x54>)
    4fca:	4a09      	ldr	r2, [pc, #36]	; (4ff0 <system_gclk_gen_enable+0x54>)
    4fcc:	6852      	ldr	r2, [r2, #4]
    4fce:	2180      	movs	r1, #128	; 0x80
    4fd0:	0249      	lsls	r1, r1, #9
    4fd2:	430a      	orrs	r2, r1
    4fd4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4fd6:	4b07      	ldr	r3, [pc, #28]	; (4ff4 <system_gclk_gen_enable+0x58>)
    4fd8:	4798      	blx	r3
}
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	46bd      	mov	sp, r7
    4fde:	b002      	add	sp, #8
    4fe0:	bd80      	pop	{r7, pc}
    4fe2:	46c0      	nop			; (mov r8, r8)
    4fe4:	00004e29 	.word	0x00004e29
    4fe8:	00004e01 	.word	0x00004e01
    4fec:	40000c04 	.word	0x40000c04
    4ff0:	40000c00 	.word	0x40000c00
    4ff4:	00004e15 	.word	0x00004e15

00004ff8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b086      	sub	sp, #24
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	0002      	movs	r2, r0
    5000:	1dfb      	adds	r3, r7, #7
    5002:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5004:	46c0      	nop			; (mov r8, r8)
    5006:	4b2a      	ldr	r3, [pc, #168]	; (50b0 <system_gclk_gen_get_hz+0xb8>)
    5008:	4798      	blx	r3
    500a:	1e03      	subs	r3, r0, #0
    500c:	d1fb      	bne.n	5006 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    500e:	4b29      	ldr	r3, [pc, #164]	; (50b4 <system_gclk_gen_get_hz+0xbc>)
    5010:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5012:	4a29      	ldr	r2, [pc, #164]	; (50b8 <system_gclk_gen_get_hz+0xc0>)
    5014:	1dfb      	adds	r3, r7, #7
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	4b24      	ldr	r3, [pc, #144]	; (50b0 <system_gclk_gen_get_hz+0xb8>)
    501e:	4798      	blx	r3
    5020:	1e03      	subs	r3, r0, #0
    5022:	d1fb      	bne.n	501c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5024:	4b25      	ldr	r3, [pc, #148]	; (50bc <system_gclk_gen_get_hz+0xc4>)
    5026:	685b      	ldr	r3, [r3, #4]
    5028:	04db      	lsls	r3, r3, #19
    502a:	0edb      	lsrs	r3, r3, #27
    502c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    502e:	0018      	movs	r0, r3
    5030:	4b23      	ldr	r3, [pc, #140]	; (50c0 <system_gclk_gen_get_hz+0xc8>)
    5032:	4798      	blx	r3
    5034:	0003      	movs	r3, r0
    5036:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5038:	4a1f      	ldr	r2, [pc, #124]	; (50b8 <system_gclk_gen_get_hz+0xc0>)
    503a:	1dfb      	adds	r3, r7, #7
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5040:	4b1e      	ldr	r3, [pc, #120]	; (50bc <system_gclk_gen_get_hz+0xc4>)
    5042:	685b      	ldr	r3, [r3, #4]
    5044:	02db      	lsls	r3, r3, #11
    5046:	0fdb      	lsrs	r3, r3, #31
    5048:	b2da      	uxtb	r2, r3
    504a:	2313      	movs	r3, #19
    504c:	18fb      	adds	r3, r7, r3
    504e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5050:	4a1c      	ldr	r2, [pc, #112]	; (50c4 <system_gclk_gen_get_hz+0xcc>)
    5052:	1dfb      	adds	r3, r7, #7
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5058:	46c0      	nop			; (mov r8, r8)
    505a:	4b15      	ldr	r3, [pc, #84]	; (50b0 <system_gclk_gen_get_hz+0xb8>)
    505c:	4798      	blx	r3
    505e:	1e03      	subs	r3, r0, #0
    5060:	d1fb      	bne.n	505a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5062:	4b16      	ldr	r3, [pc, #88]	; (50bc <system_gclk_gen_get_hz+0xc4>)
    5064:	689b      	ldr	r3, [r3, #8]
    5066:	021b      	lsls	r3, r3, #8
    5068:	0c1b      	lsrs	r3, r3, #16
    506a:	b29b      	uxth	r3, r3
    506c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    506e:	4b16      	ldr	r3, [pc, #88]	; (50c8 <system_gclk_gen_get_hz+0xd0>)
    5070:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5072:	2313      	movs	r3, #19
    5074:	18fb      	adds	r3, r7, r3
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	2b00      	cmp	r3, #0
    507a:	d109      	bne.n	5090 <system_gclk_gen_get_hz+0x98>
    507c:	68fb      	ldr	r3, [r7, #12]
    507e:	2b01      	cmp	r3, #1
    5080:	d906      	bls.n	5090 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5082:	4b12      	ldr	r3, [pc, #72]	; (50cc <system_gclk_gen_get_hz+0xd4>)
    5084:	68f9      	ldr	r1, [r7, #12]
    5086:	6978      	ldr	r0, [r7, #20]
    5088:	4798      	blx	r3
    508a:	0003      	movs	r3, r0
    508c:	617b      	str	r3, [r7, #20]
    508e:	e00a      	b.n	50a6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5090:	2313      	movs	r3, #19
    5092:	18fb      	adds	r3, r7, r3
    5094:	781b      	ldrb	r3, [r3, #0]
    5096:	2b00      	cmp	r3, #0
    5098:	d005      	beq.n	50a6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    509a:	68fb      	ldr	r3, [r7, #12]
    509c:	3301      	adds	r3, #1
    509e:	697a      	ldr	r2, [r7, #20]
    50a0:	40da      	lsrs	r2, r3
    50a2:	0013      	movs	r3, r2
    50a4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    50a6:	697b      	ldr	r3, [r7, #20]
}
    50a8:	0018      	movs	r0, r3
    50aa:	46bd      	mov	sp, r7
    50ac:	b006      	add	sp, #24
    50ae:	bd80      	pop	{r7, pc}
    50b0:	00004e29 	.word	0x00004e29
    50b4:	00004e01 	.word	0x00004e01
    50b8:	40000c04 	.word	0x40000c04
    50bc:	40000c00 	.word	0x40000c00
    50c0:	00004821 	.word	0x00004821
    50c4:	40000c08 	.word	0x40000c08
    50c8:	00004e15 	.word	0x00004e15
    50cc:	00008d8d 	.word	0x00008d8d

000050d0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    50d0:	b580      	push	{r7, lr}
    50d2:	b084      	sub	sp, #16
    50d4:	af00      	add	r7, sp, #0
    50d6:	0002      	movs	r2, r0
    50d8:	6039      	str	r1, [r7, #0]
    50da:	1dfb      	adds	r3, r7, #7
    50dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    50de:	1dfb      	adds	r3, r7, #7
    50e0:	781b      	ldrb	r3, [r3, #0]
    50e2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    50e4:	683b      	ldr	r3, [r7, #0]
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	021b      	lsls	r3, r3, #8
    50ea:	001a      	movs	r2, r3
    50ec:	68fb      	ldr	r3, [r7, #12]
    50ee:	4313      	orrs	r3, r2
    50f0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    50f2:	1dfb      	adds	r3, r7, #7
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	0018      	movs	r0, r3
    50f8:	4b04      	ldr	r3, [pc, #16]	; (510c <system_gclk_chan_set_config+0x3c>)
    50fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    50fc:	4b04      	ldr	r3, [pc, #16]	; (5110 <system_gclk_chan_set_config+0x40>)
    50fe:	68fa      	ldr	r2, [r7, #12]
    5100:	b292      	uxth	r2, r2
    5102:	805a      	strh	r2, [r3, #2]
}
    5104:	46c0      	nop			; (mov r8, r8)
    5106:	46bd      	mov	sp, r7
    5108:	b004      	add	sp, #16
    510a:	bd80      	pop	{r7, pc}
    510c:	0000515d 	.word	0x0000515d
    5110:	40000c00 	.word	0x40000c00

00005114 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5114:	b580      	push	{r7, lr}
    5116:	b082      	sub	sp, #8
    5118:	af00      	add	r7, sp, #0
    511a:	0002      	movs	r2, r0
    511c:	1dfb      	adds	r3, r7, #7
    511e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5120:	4b0a      	ldr	r3, [pc, #40]	; (514c <system_gclk_chan_enable+0x38>)
    5122:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5124:	4a0a      	ldr	r2, [pc, #40]	; (5150 <system_gclk_chan_enable+0x3c>)
    5126:	1dfb      	adds	r3, r7, #7
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    512c:	4909      	ldr	r1, [pc, #36]	; (5154 <system_gclk_chan_enable+0x40>)
    512e:	4b09      	ldr	r3, [pc, #36]	; (5154 <system_gclk_chan_enable+0x40>)
    5130:	885b      	ldrh	r3, [r3, #2]
    5132:	b29b      	uxth	r3, r3
    5134:	2280      	movs	r2, #128	; 0x80
    5136:	01d2      	lsls	r2, r2, #7
    5138:	4313      	orrs	r3, r2
    513a:	b29b      	uxth	r3, r3
    513c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    513e:	4b06      	ldr	r3, [pc, #24]	; (5158 <system_gclk_chan_enable+0x44>)
    5140:	4798      	blx	r3
}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	46bd      	mov	sp, r7
    5146:	b002      	add	sp, #8
    5148:	bd80      	pop	{r7, pc}
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	00004e01 	.word	0x00004e01
    5150:	40000c02 	.word	0x40000c02
    5154:	40000c00 	.word	0x40000c00
    5158:	00004e15 	.word	0x00004e15

0000515c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    515c:	b580      	push	{r7, lr}
    515e:	b084      	sub	sp, #16
    5160:	af00      	add	r7, sp, #0
    5162:	0002      	movs	r2, r0
    5164:	1dfb      	adds	r3, r7, #7
    5166:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5168:	4b1c      	ldr	r3, [pc, #112]	; (51dc <system_gclk_chan_disable+0x80>)
    516a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    516c:	4a1c      	ldr	r2, [pc, #112]	; (51e0 <system_gclk_chan_disable+0x84>)
    516e:	1dfb      	adds	r3, r7, #7
    5170:	781b      	ldrb	r3, [r3, #0]
    5172:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5174:	4b1b      	ldr	r3, [pc, #108]	; (51e4 <system_gclk_chan_disable+0x88>)
    5176:	885b      	ldrh	r3, [r3, #2]
    5178:	051b      	lsls	r3, r3, #20
    517a:	0f1b      	lsrs	r3, r3, #28
    517c:	b2db      	uxtb	r3, r3
    517e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5180:	4a18      	ldr	r2, [pc, #96]	; (51e4 <system_gclk_chan_disable+0x88>)
    5182:	8853      	ldrh	r3, [r2, #2]
    5184:	4918      	ldr	r1, [pc, #96]	; (51e8 <system_gclk_chan_disable+0x8c>)
    5186:	400b      	ands	r3, r1
    5188:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    518a:	4a16      	ldr	r2, [pc, #88]	; (51e4 <system_gclk_chan_disable+0x88>)
    518c:	4b15      	ldr	r3, [pc, #84]	; (51e4 <system_gclk_chan_disable+0x88>)
    518e:	885b      	ldrh	r3, [r3, #2]
    5190:	b29b      	uxth	r3, r3
    5192:	4916      	ldr	r1, [pc, #88]	; (51ec <system_gclk_chan_disable+0x90>)
    5194:	400b      	ands	r3, r1
    5196:	b29b      	uxth	r3, r3
    5198:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	4b11      	ldr	r3, [pc, #68]	; (51e4 <system_gclk_chan_disable+0x88>)
    519e:	885b      	ldrh	r3, [r3, #2]
    51a0:	b29b      	uxth	r3, r3
    51a2:	001a      	movs	r2, r3
    51a4:	2380      	movs	r3, #128	; 0x80
    51a6:	01db      	lsls	r3, r3, #7
    51a8:	4013      	ands	r3, r2
    51aa:	d1f7      	bne.n	519c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    51ac:	4a0d      	ldr	r2, [pc, #52]	; (51e4 <system_gclk_chan_disable+0x88>)
    51ae:	68fb      	ldr	r3, [r7, #12]
    51b0:	b2db      	uxtb	r3, r3
    51b2:	1c19      	adds	r1, r3, #0
    51b4:	230f      	movs	r3, #15
    51b6:	400b      	ands	r3, r1
    51b8:	b2d9      	uxtb	r1, r3
    51ba:	8853      	ldrh	r3, [r2, #2]
    51bc:	1c08      	adds	r0, r1, #0
    51be:	210f      	movs	r1, #15
    51c0:	4001      	ands	r1, r0
    51c2:	0208      	lsls	r0, r1, #8
    51c4:	4908      	ldr	r1, [pc, #32]	; (51e8 <system_gclk_chan_disable+0x8c>)
    51c6:	400b      	ands	r3, r1
    51c8:	1c19      	adds	r1, r3, #0
    51ca:	1c03      	adds	r3, r0, #0
    51cc:	430b      	orrs	r3, r1
    51ce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    51d0:	4b07      	ldr	r3, [pc, #28]	; (51f0 <system_gclk_chan_disable+0x94>)
    51d2:	4798      	blx	r3
}
    51d4:	46c0      	nop			; (mov r8, r8)
    51d6:	46bd      	mov	sp, r7
    51d8:	b004      	add	sp, #16
    51da:	bd80      	pop	{r7, pc}
    51dc:	00004e01 	.word	0x00004e01
    51e0:	40000c02 	.word	0x40000c02
    51e4:	40000c00 	.word	0x40000c00
    51e8:	fffff0ff 	.word	0xfffff0ff
    51ec:	ffffbfff 	.word	0xffffbfff
    51f0:	00004e15 	.word	0x00004e15

000051f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b084      	sub	sp, #16
    51f8:	af00      	add	r7, sp, #0
    51fa:	0002      	movs	r2, r0
    51fc:	1dfb      	adds	r3, r7, #7
    51fe:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5200:	4b0d      	ldr	r3, [pc, #52]	; (5238 <system_gclk_chan_get_hz+0x44>)
    5202:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5204:	4a0d      	ldr	r2, [pc, #52]	; (523c <system_gclk_chan_get_hz+0x48>)
    5206:	1dfb      	adds	r3, r7, #7
    5208:	781b      	ldrb	r3, [r3, #0]
    520a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    520c:	4b0c      	ldr	r3, [pc, #48]	; (5240 <system_gclk_chan_get_hz+0x4c>)
    520e:	885b      	ldrh	r3, [r3, #2]
    5210:	051b      	lsls	r3, r3, #20
    5212:	0f1b      	lsrs	r3, r3, #28
    5214:	b2da      	uxtb	r2, r3
    5216:	230f      	movs	r3, #15
    5218:	18fb      	adds	r3, r7, r3
    521a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    521c:	4b09      	ldr	r3, [pc, #36]	; (5244 <system_gclk_chan_get_hz+0x50>)
    521e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5220:	230f      	movs	r3, #15
    5222:	18fb      	adds	r3, r7, r3
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	0018      	movs	r0, r3
    5228:	4b07      	ldr	r3, [pc, #28]	; (5248 <system_gclk_chan_get_hz+0x54>)
    522a:	4798      	blx	r3
    522c:	0003      	movs	r3, r0
}
    522e:	0018      	movs	r0, r3
    5230:	46bd      	mov	sp, r7
    5232:	b004      	add	sp, #16
    5234:	bd80      	pop	{r7, pc}
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	00004e01 	.word	0x00004e01
    523c:	40000c02 	.word	0x40000c02
    5240:	40000c00 	.word	0x40000c00
    5244:	00004e15 	.word	0x00004e15
    5248:	00004ff9 	.word	0x00004ff9

0000524c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    524c:	b580      	push	{r7, lr}
    524e:	b084      	sub	sp, #16
    5250:	af00      	add	r7, sp, #0
    5252:	0002      	movs	r2, r0
    5254:	1dfb      	adds	r3, r7, #7
    5256:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5258:	230f      	movs	r3, #15
    525a:	18fb      	adds	r3, r7, r3
    525c:	1dfa      	adds	r2, r7, #7
    525e:	7812      	ldrb	r2, [r2, #0]
    5260:	09d2      	lsrs	r2, r2, #7
    5262:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5264:	230e      	movs	r3, #14
    5266:	18fb      	adds	r3, r7, r3
    5268:	1dfa      	adds	r2, r7, #7
    526a:	7812      	ldrb	r2, [r2, #0]
    526c:	0952      	lsrs	r2, r2, #5
    526e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5270:	4b0d      	ldr	r3, [pc, #52]	; (52a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5272:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5274:	230f      	movs	r3, #15
    5276:	18fb      	adds	r3, r7, r3
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	2b00      	cmp	r3, #0
    527c:	d10f      	bne.n	529e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    527e:	230f      	movs	r3, #15
    5280:	18fb      	adds	r3, r7, r3
    5282:	781b      	ldrb	r3, [r3, #0]
    5284:	009b      	lsls	r3, r3, #2
    5286:	2210      	movs	r2, #16
    5288:	4694      	mov	ip, r2
    528a:	44bc      	add	ip, r7
    528c:	4463      	add	r3, ip
    528e:	3b08      	subs	r3, #8
    5290:	681a      	ldr	r2, [r3, #0]
    5292:	230e      	movs	r3, #14
    5294:	18fb      	adds	r3, r7, r3
    5296:	781b      	ldrb	r3, [r3, #0]
    5298:	01db      	lsls	r3, r3, #7
    529a:	18d3      	adds	r3, r2, r3
    529c:	e000      	b.n	52a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    529e:	2300      	movs	r3, #0
	}
}
    52a0:	0018      	movs	r0, r3
    52a2:	46bd      	mov	sp, r7
    52a4:	b004      	add	sp, #16
    52a6:	bd80      	pop	{r7, pc}
    52a8:	41004400 	.word	0x41004400

000052ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b088      	sub	sp, #32
    52b0:	af00      	add	r7, sp, #0
    52b2:	60f8      	str	r0, [r7, #12]
    52b4:	60b9      	str	r1, [r7, #8]
    52b6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    52b8:	2300      	movs	r3, #0
    52ba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	78db      	ldrb	r3, [r3, #3]
    52c0:	2201      	movs	r2, #1
    52c2:	4053      	eors	r3, r2
    52c4:	b2db      	uxtb	r3, r3
    52c6:	2b00      	cmp	r3, #0
    52c8:	d035      	beq.n	5336 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	781b      	ldrb	r3, [r3, #0]
    52ce:	2b80      	cmp	r3, #128	; 0x80
    52d0:	d00b      	beq.n	52ea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    52d2:	69fb      	ldr	r3, [r7, #28]
    52d4:	2280      	movs	r2, #128	; 0x80
    52d6:	0252      	lsls	r2, r2, #9
    52d8:	4313      	orrs	r3, r2
    52da:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	061b      	lsls	r3, r3, #24
    52e2:	001a      	movs	r2, r3
    52e4:	69fb      	ldr	r3, [r7, #28]
    52e6:	4313      	orrs	r3, r2
    52e8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	785b      	ldrb	r3, [r3, #1]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d003      	beq.n	52fa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    52f6:	2b02      	cmp	r3, #2
    52f8:	d110      	bne.n	531c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    52fa:	69fb      	ldr	r3, [r7, #28]
    52fc:	2280      	movs	r2, #128	; 0x80
    52fe:	0292      	lsls	r2, r2, #10
    5300:	4313      	orrs	r3, r2
    5302:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	789b      	ldrb	r3, [r3, #2]
    5308:	2b00      	cmp	r3, #0
    530a:	d004      	beq.n	5316 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    530c:	69fb      	ldr	r3, [r7, #28]
    530e:	2280      	movs	r2, #128	; 0x80
    5310:	02d2      	lsls	r2, r2, #11
    5312:	4313      	orrs	r3, r2
    5314:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5316:	68fb      	ldr	r3, [r7, #12]
    5318:	68ba      	ldr	r2, [r7, #8]
    531a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	785b      	ldrb	r3, [r3, #1]
    5320:	2b01      	cmp	r3, #1
    5322:	d003      	beq.n	532c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5328:	2b02      	cmp	r3, #2
    532a:	d107      	bne.n	533c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    532c:	69fb      	ldr	r3, [r7, #28]
    532e:	4a22      	ldr	r2, [pc, #136]	; (53b8 <_system_pinmux_config+0x10c>)
    5330:	4013      	ands	r3, r2
    5332:	61fb      	str	r3, [r7, #28]
    5334:	e002      	b.n	533c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5336:	68fb      	ldr	r3, [r7, #12]
    5338:	68ba      	ldr	r2, [r7, #8]
    533a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    533c:	68bb      	ldr	r3, [r7, #8]
    533e:	041b      	lsls	r3, r3, #16
    5340:	0c1b      	lsrs	r3, r3, #16
    5342:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5344:	68bb      	ldr	r3, [r7, #8]
    5346:	0c1b      	lsrs	r3, r3, #16
    5348:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    534a:	69ba      	ldr	r2, [r7, #24]
    534c:	69fb      	ldr	r3, [r7, #28]
    534e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5350:	22a0      	movs	r2, #160	; 0xa0
    5352:	05d2      	lsls	r2, r2, #23
    5354:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5356:	68fb      	ldr	r3, [r7, #12]
    5358:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    535a:	697a      	ldr	r2, [r7, #20]
    535c:	69fb      	ldr	r3, [r7, #28]
    535e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5360:	22d0      	movs	r2, #208	; 0xd0
    5362:	0612      	lsls	r2, r2, #24
    5364:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	78db      	ldrb	r3, [r3, #3]
    536e:	2201      	movs	r2, #1
    5370:	4053      	eors	r3, r2
    5372:	b2db      	uxtb	r3, r3
    5374:	2b00      	cmp	r3, #0
    5376:	d01a      	beq.n	53ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5378:	69fa      	ldr	r2, [r7, #28]
    537a:	2380      	movs	r3, #128	; 0x80
    537c:	02db      	lsls	r3, r3, #11
    537e:	4013      	ands	r3, r2
    5380:	d00a      	beq.n	5398 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	789b      	ldrb	r3, [r3, #2]
    5386:	2b01      	cmp	r3, #1
    5388:	d103      	bne.n	5392 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	68ba      	ldr	r2, [r7, #8]
    538e:	619a      	str	r2, [r3, #24]
    5390:	e002      	b.n	5398 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5392:	68fb      	ldr	r3, [r7, #12]
    5394:	68ba      	ldr	r2, [r7, #8]
    5396:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	785b      	ldrb	r3, [r3, #1]
    539c:	2b01      	cmp	r3, #1
    539e:	d003      	beq.n	53a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    53a4:	2b02      	cmp	r3, #2
    53a6:	d102      	bne.n	53ae <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    53a8:	68fb      	ldr	r3, [r7, #12]
    53aa:	68ba      	ldr	r2, [r7, #8]
    53ac:	609a      	str	r2, [r3, #8]
		}
	}
}
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	46bd      	mov	sp, r7
    53b2:	b008      	add	sp, #32
    53b4:	bd80      	pop	{r7, pc}
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	fffbffff 	.word	0xfffbffff

000053bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    53bc:	b580      	push	{r7, lr}
    53be:	b084      	sub	sp, #16
    53c0:	af00      	add	r7, sp, #0
    53c2:	0002      	movs	r2, r0
    53c4:	6039      	str	r1, [r7, #0]
    53c6:	1dfb      	adds	r3, r7, #7
    53c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    53ca:	1dfb      	adds	r3, r7, #7
    53cc:	781b      	ldrb	r3, [r3, #0]
    53ce:	0018      	movs	r0, r3
    53d0:	4b0a      	ldr	r3, [pc, #40]	; (53fc <system_pinmux_pin_set_config+0x40>)
    53d2:	4798      	blx	r3
    53d4:	0003      	movs	r3, r0
    53d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    53d8:	1dfb      	adds	r3, r7, #7
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	221f      	movs	r2, #31
    53de:	4013      	ands	r3, r2
    53e0:	2201      	movs	r2, #1
    53e2:	409a      	lsls	r2, r3
    53e4:	0013      	movs	r3, r2
    53e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    53e8:	683a      	ldr	r2, [r7, #0]
    53ea:	68b9      	ldr	r1, [r7, #8]
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	0018      	movs	r0, r3
    53f0:	4b03      	ldr	r3, [pc, #12]	; (5400 <system_pinmux_pin_set_config+0x44>)
    53f2:	4798      	blx	r3
}
    53f4:	46c0      	nop			; (mov r8, r8)
    53f6:	46bd      	mov	sp, r7
    53f8:	b004      	add	sp, #16
    53fa:	bd80      	pop	{r7, pc}
    53fc:	0000524d 	.word	0x0000524d
    5400:	000052ad 	.word	0x000052ad

00005404 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5404:	b580      	push	{r7, lr}
    5406:	af00      	add	r7, sp, #0
	return;
    5408:	46c0      	nop			; (mov r8, r8)
}
    540a:	46bd      	mov	sp, r7
    540c:	bd80      	pop	{r7, pc}
    540e:	46c0      	nop			; (mov r8, r8)

00005410 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5410:	b580      	push	{r7, lr}
    5412:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5414:	4b06      	ldr	r3, [pc, #24]	; (5430 <system_init+0x20>)
    5416:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5418:	4b06      	ldr	r3, [pc, #24]	; (5434 <system_init+0x24>)
    541a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    541c:	4b06      	ldr	r3, [pc, #24]	; (5438 <system_init+0x28>)
    541e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5420:	4b06      	ldr	r3, [pc, #24]	; (543c <system_init+0x2c>)
    5422:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5424:	4b06      	ldr	r3, [pc, #24]	; (5440 <system_init+0x30>)
    5426:	4798      	blx	r3
}
    5428:	46c0      	nop			; (mov r8, r8)
    542a:	46bd      	mov	sp, r7
    542c:	bd80      	pop	{r7, pc}
    542e:	46c0      	nop			; (mov r8, r8)
    5430:	00004b9d 	.word	0x00004b9d
    5434:	00003f9d 	.word	0x00003f9d
    5438:	00005405 	.word	0x00005405
    543c:	00004375 	.word	0x00004375
    5440:	00005405 	.word	0x00005405

00005444 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    544a:	f3ef 8310 	mrs	r3, PRIMASK
    544e:	603b      	str	r3, [r7, #0]
  return(result);
    5450:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    5452:	425a      	negs	r2, r3
    5454:	4153      	adcs	r3, r2
    5456:	b2db      	uxtb	r3, r3
    5458:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    545a:	b672      	cpsid	i
    545c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5460:	4b03      	ldr	r3, [pc, #12]	; (5470 <cpu_irq_save+0x2c>)
    5462:	2200      	movs	r2, #0
    5464:	701a      	strb	r2, [r3, #0]
	return flags;
    5466:	687b      	ldr	r3, [r7, #4]
}
    5468:	0018      	movs	r0, r3
    546a:	46bd      	mov	sp, r7
    546c:	b002      	add	sp, #8
    546e:	bd80      	pop	{r7, pc}
    5470:	200000dc 	.word	0x200000dc

00005474 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    5474:	b580      	push	{r7, lr}
    5476:	b082      	sub	sp, #8
    5478:	af00      	add	r7, sp, #0
    547a:	6078      	str	r0, [r7, #4]
	return (flags);
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	1e5a      	subs	r2, r3, #1
    5480:	4193      	sbcs	r3, r2
    5482:	b2db      	uxtb	r3, r3
}
    5484:	0018      	movs	r0, r3
    5486:	46bd      	mov	sp, r7
    5488:	b002      	add	sp, #8
    548a:	bd80      	pop	{r7, pc}

0000548c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    548c:	b580      	push	{r7, lr}
    548e:	b082      	sub	sp, #8
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	0018      	movs	r0, r3
    5498:	4b06      	ldr	r3, [pc, #24]	; (54b4 <cpu_irq_restore+0x28>)
    549a:	4798      	blx	r3
    549c:	1e03      	subs	r3, r0, #0
    549e:	d005      	beq.n	54ac <cpu_irq_restore+0x20>
		cpu_irq_enable();
    54a0:	4b05      	ldr	r3, [pc, #20]	; (54b8 <cpu_irq_restore+0x2c>)
    54a2:	2201      	movs	r2, #1
    54a4:	701a      	strb	r2, [r3, #0]
    54a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    54aa:	b662      	cpsie	i
}
    54ac:	46c0      	nop			; (mov r8, r8)
    54ae:	46bd      	mov	sp, r7
    54b0:	b002      	add	sp, #8
    54b2:	bd80      	pop	{r7, pc}
    54b4:	00005475 	.word	0x00005475
    54b8:	200000dc 	.word	0x200000dc

000054bc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    54bc:	b580      	push	{r7, lr}
    54be:	b084      	sub	sp, #16
    54c0:	af00      	add	r7, sp, #0
    54c2:	0002      	movs	r2, r0
    54c4:	1dfb      	adds	r3, r7, #7
    54c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    54c8:	230f      	movs	r3, #15
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	1dfa      	adds	r2, r7, #7
    54ce:	7812      	ldrb	r2, [r2, #0]
    54d0:	09d2      	lsrs	r2, r2, #7
    54d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    54d4:	230e      	movs	r3, #14
    54d6:	18fb      	adds	r3, r7, r3
    54d8:	1dfa      	adds	r2, r7, #7
    54da:	7812      	ldrb	r2, [r2, #0]
    54dc:	0952      	lsrs	r2, r2, #5
    54de:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    54e0:	4b0d      	ldr	r3, [pc, #52]	; (5518 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    54e2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    54e4:	230f      	movs	r3, #15
    54e6:	18fb      	adds	r3, r7, r3
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d10f      	bne.n	550e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    54ee:	230f      	movs	r3, #15
    54f0:	18fb      	adds	r3, r7, r3
    54f2:	781b      	ldrb	r3, [r3, #0]
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	2210      	movs	r2, #16
    54f8:	4694      	mov	ip, r2
    54fa:	44bc      	add	ip, r7
    54fc:	4463      	add	r3, ip
    54fe:	3b08      	subs	r3, #8
    5500:	681a      	ldr	r2, [r3, #0]
    5502:	230e      	movs	r3, #14
    5504:	18fb      	adds	r3, r7, r3
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	01db      	lsls	r3, r3, #7
    550a:	18d3      	adds	r3, r2, r3
    550c:	e000      	b.n	5510 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    550e:	2300      	movs	r3, #0
	}
}
    5510:	0018      	movs	r0, r3
    5512:	46bd      	mov	sp, r7
    5514:	b004      	add	sp, #16
    5516:	bd80      	pop	{r7, pc}
    5518:	41004400 	.word	0x41004400

0000551c <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    551c:	b580      	push	{r7, lr}
    551e:	b082      	sub	sp, #8
    5520:	af00      	add	r7, sp, #0
    5522:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	681a      	ldr	r2, [r3, #0]
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	891b      	ldrh	r3, [r3, #8]
    552e:	b29b      	uxth	r3, r3
    5530:	2101      	movs	r1, #1
    5532:	438b      	bics	r3, r1
    5534:	b29b      	uxth	r3, r3
    5536:	8113      	strh	r3, [r2, #8]
}
    5538:	46c0      	nop			; (mov r8, r8)
    553a:	46bd      	mov	sp, r7
    553c:	b002      	add	sp, #8
    553e:	bd80      	pop	{r7, pc}

00005540 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    5540:	b580      	push	{r7, lr}
    5542:	b082      	sub	sp, #8
    5544:	af00      	add	r7, sp, #0
    5546:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	681a      	ldr	r2, [r3, #0]
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	891b      	ldrh	r3, [r3, #8]
    5552:	b29b      	uxth	r3, r3
    5554:	2101      	movs	r1, #1
    5556:	430b      	orrs	r3, r1
    5558:	b29b      	uxth	r3, r3
    555a:	8113      	strh	r3, [r2, #8]
}
    555c:	46c0      	nop			; (mov r8, r8)
    555e:	46bd      	mov	sp, r7
    5560:	b002      	add	sp, #8
    5562:	bd80      	pop	{r7, pc}

00005564 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    5564:	b580      	push	{r7, lr}
    5566:	b082      	sub	sp, #8
    5568:	af00      	add	r7, sp, #0
    556a:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	7a9b      	ldrb	r3, [r3, #10]
    5572:	065b      	lsls	r3, r3, #25
    5574:	0e5b      	lsrs	r3, r3, #25
    5576:	b2db      	uxtb	r3, r3
}
    5578:	0018      	movs	r0, r3
    557a:	46bd      	mov	sp, r7
    557c:	b002      	add	sp, #8
    557e:	bd80      	pop	{r7, pc}

00005580 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    5580:	b580      	push	{r7, lr}
    5582:	b082      	sub	sp, #8
    5584:	af00      	add	r7, sp, #0
    5586:	6078      	str	r0, [r7, #4]
    5588:	000a      	movs	r2, r1
    558a:	1cfb      	adds	r3, r7, #3
    558c:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	1cfa      	adds	r2, r7, #3
    5594:	7812      	ldrb	r2, [r2, #0]
    5596:	2180      	movs	r1, #128	; 0x80
    5598:	4249      	negs	r1, r1
    559a:	430a      	orrs	r2, r1
    559c:	b2d2      	uxtb	r2, r2
    559e:	729a      	strb	r2, [r3, #10]
}
    55a0:	46c0      	nop			; (mov r8, r8)
    55a2:	46bd      	mov	sp, r7
    55a4:	b002      	add	sp, #8
    55a6:	bd80      	pop	{r7, pc}

000055a8 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    55a8:	b580      	push	{r7, lr}
    55aa:	b082      	sub	sp, #8
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	8a1b      	ldrh	r3, [r3, #16]
    55b6:	049b      	lsls	r3, r3, #18
    55b8:	0d5b      	lsrs	r3, r3, #21
    55ba:	b29b      	uxth	r3, r3
}
    55bc:	0018      	movs	r0, r3
    55be:	46bd      	mov	sp, r7
    55c0:	b002      	add	sp, #8
    55c2:	bd80      	pop	{r7, pc}

000055c4 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    55c4:	b580      	push	{r7, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
    55cc:	000a      	movs	r2, r1
    55ce:	1cfb      	adds	r3, r7, #3
    55d0:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    55d2:	687b      	ldr	r3, [r7, #4]
    55d4:	681a      	ldr	r2, [r3, #0]
    55d6:	1cfb      	adds	r3, r7, #3
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	2103      	movs	r1, #3
    55dc:	400b      	ands	r3, r1
    55de:	b2d9      	uxtb	r1, r3
    55e0:	8913      	ldrh	r3, [r2, #8]
    55e2:	1c08      	adds	r0, r1, #0
    55e4:	2103      	movs	r1, #3
    55e6:	4001      	ands	r1, r0
    55e8:	0288      	lsls	r0, r1, #10
    55ea:	4905      	ldr	r1, [pc, #20]	; (5600 <usb_device_set_lpm_mode+0x3c>)
    55ec:	400b      	ands	r3, r1
    55ee:	1c19      	adds	r1, r3, #0
    55f0:	1c03      	adds	r3, r0, #0
    55f2:	430b      	orrs	r3, r1
    55f4:	8113      	strh	r3, [r2, #8]
}
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	46bd      	mov	sp, r7
    55fa:	b002      	add	sp, #8
    55fc:	bd80      	pop	{r7, pc}
    55fe:	46c0      	nop			; (mov r8, r8)
    5600:	fffff3ff 	.word	0xfffff3ff

00005604 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5604:	b580      	push	{r7, lr}
    5606:	b082      	sub	sp, #8
    5608:	af00      	add	r7, sp, #0
    560a:	0002      	movs	r2, r0
    560c:	1dfb      	adds	r3, r7, #7
    560e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5610:	1dfb      	adds	r3, r7, #7
    5612:	781b      	ldrb	r3, [r3, #0]
    5614:	0018      	movs	r0, r3
    5616:	4b03      	ldr	r3, [pc, #12]	; (5624 <port_get_group_from_gpio_pin+0x20>)
    5618:	4798      	blx	r3
    561a:	0003      	movs	r3, r0
}
    561c:	0018      	movs	r0, r3
    561e:	46bd      	mov	sp, r7
    5620:	b002      	add	sp, #8
    5622:	bd80      	pop	{r7, pc}
    5624:	000054bd 	.word	0x000054bd

00005628 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    5628:	b580      	push	{r7, lr}
    562a:	b084      	sub	sp, #16
    562c:	af00      	add	r7, sp, #0
    562e:	0002      	movs	r2, r0
    5630:	1dfb      	adds	r3, r7, #7
    5632:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5634:	1dfb      	adds	r3, r7, #7
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	0018      	movs	r0, r3
    563a:	4b0b      	ldr	r3, [pc, #44]	; (5668 <port_pin_get_input_level+0x40>)
    563c:	4798      	blx	r3
    563e:	0003      	movs	r3, r0
    5640:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5642:	1dfb      	adds	r3, r7, #7
    5644:	781b      	ldrb	r3, [r3, #0]
    5646:	221f      	movs	r2, #31
    5648:	4013      	ands	r3, r2
    564a:	2201      	movs	r2, #1
    564c:	409a      	lsls	r2, r3
    564e:	0013      	movs	r3, r2
    5650:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	6a1b      	ldr	r3, [r3, #32]
    5656:	68ba      	ldr	r2, [r7, #8]
    5658:	4013      	ands	r3, r2
    565a:	1e5a      	subs	r2, r3, #1
    565c:	4193      	sbcs	r3, r2
    565e:	b2db      	uxtb	r3, r3
}
    5660:	0018      	movs	r0, r3
    5662:	46bd      	mov	sp, r7
    5664:	b004      	add	sp, #16
    5666:	bd80      	pop	{r7, pc}
    5668:	00005605 	.word	0x00005605

0000566c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    566c:	b580      	push	{r7, lr}
    566e:	b084      	sub	sp, #16
    5670:	af00      	add	r7, sp, #0
    5672:	0002      	movs	r2, r0
    5674:	1dfb      	adds	r3, r7, #7
    5676:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    5678:	1dfb      	adds	r3, r7, #7
    567a:	781b      	ldrb	r3, [r3, #0]
    567c:	4a0c      	ldr	r2, [pc, #48]	; (56b0 <sleepmgr_lock_mode+0x44>)
    567e:	5cd3      	ldrb	r3, [r2, r3]
    5680:	2bff      	cmp	r3, #255	; 0xff
    5682:	d100      	bne.n	5686 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    5684:	e7fe      	b.n	5684 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    5686:	4b0b      	ldr	r3, [pc, #44]	; (56b4 <sleepmgr_lock_mode+0x48>)
    5688:	4798      	blx	r3
    568a:	0003      	movs	r3, r0
    568c:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    568e:	1dfb      	adds	r3, r7, #7
    5690:	781b      	ldrb	r3, [r3, #0]
    5692:	4a07      	ldr	r2, [pc, #28]	; (56b0 <sleepmgr_lock_mode+0x44>)
    5694:	5cd2      	ldrb	r2, [r2, r3]
    5696:	3201      	adds	r2, #1
    5698:	b2d1      	uxtb	r1, r2
    569a:	4a05      	ldr	r2, [pc, #20]	; (56b0 <sleepmgr_lock_mode+0x44>)
    569c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	0018      	movs	r0, r3
    56a2:	4b05      	ldr	r3, [pc, #20]	; (56b8 <sleepmgr_lock_mode+0x4c>)
    56a4:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	46bd      	mov	sp, r7
    56aa:	b004      	add	sp, #16
    56ac:	bd80      	pop	{r7, pc}
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	200002f4 	.word	0x200002f4
    56b4:	00005445 	.word	0x00005445
    56b8:	0000548d 	.word	0x0000548d

000056bc <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b084      	sub	sp, #16
    56c0:	af00      	add	r7, sp, #0
    56c2:	0002      	movs	r2, r0
    56c4:	1dfb      	adds	r3, r7, #7
    56c6:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    56c8:	1dfb      	adds	r3, r7, #7
    56ca:	781b      	ldrb	r3, [r3, #0]
    56cc:	4a0c      	ldr	r2, [pc, #48]	; (5700 <sleepmgr_unlock_mode+0x44>)
    56ce:	5cd3      	ldrb	r3, [r2, r3]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d100      	bne.n	56d6 <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    56d4:	e7fe      	b.n	56d4 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    56d6:	4b0b      	ldr	r3, [pc, #44]	; (5704 <sleepmgr_unlock_mode+0x48>)
    56d8:	4798      	blx	r3
    56da:	0003      	movs	r3, r0
    56dc:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    56de:	1dfb      	adds	r3, r7, #7
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	4a07      	ldr	r2, [pc, #28]	; (5700 <sleepmgr_unlock_mode+0x44>)
    56e4:	5cd2      	ldrb	r2, [r2, r3]
    56e6:	3a01      	subs	r2, #1
    56e8:	b2d1      	uxtb	r1, r2
    56ea:	4a05      	ldr	r2, [pc, #20]	; (5700 <sleepmgr_unlock_mode+0x44>)
    56ec:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    56ee:	68fb      	ldr	r3, [r7, #12]
    56f0:	0018      	movs	r0, r3
    56f2:	4b05      	ldr	r3, [pc, #20]	; (5708 <sleepmgr_unlock_mode+0x4c>)
    56f4:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	46bd      	mov	sp, r7
    56fa:	b004      	add	sp, #16
    56fc:	bd80      	pop	{r7, pc}
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	200002f4 	.word	0x200002f4
    5704:	00005445 	.word	0x00005445
    5708:	0000548d 	.word	0x0000548d

0000570c <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    570c:	b580      	push	{r7, lr}
    570e:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5710:	4b0b      	ldr	r3, [pc, #44]	; (5740 <udd_wait_clock_ready+0x34>)
    5712:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5714:	b29b      	uxth	r3, r3
    5716:	001a      	movs	r2, r3
    5718:	2320      	movs	r3, #32
    571a:	4013      	ands	r3, r2
    571c:	d107      	bne.n	572e <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	4b07      	ldr	r3, [pc, #28]	; (5740 <udd_wait_clock_ready+0x34>)
    5722:	68db      	ldr	r3, [r3, #12]
    5724:	22d0      	movs	r2, #208	; 0xd0
    5726:	4013      	ands	r3, r2
    5728:	2bd0      	cmp	r3, #208	; 0xd0
    572a:	d1f9      	bne.n	5720 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    572c:	e005      	b.n	573a <udd_wait_clock_ready+0x2e>

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	4b03      	ldr	r3, [pc, #12]	; (5740 <udd_wait_clock_ready+0x34>)
    5732:	68db      	ldr	r3, [r3, #12]
    5734:	2210      	movs	r2, #16
    5736:	4013      	ands	r3, r2
    5738:	d0fa      	beq.n	5730 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	46bd      	mov	sp, r7
    573e:	bd80      	pop	{r7, pc}
    5740:	40000800 	.word	0x40000800

00005744 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    5744:	b580      	push	{r7, lr}
    5746:	b084      	sub	sp, #16
    5748:	af00      	add	r7, sp, #0
    574a:	0002      	movs	r2, r0
    574c:	1dfb      	adds	r3, r7, #7
    574e:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    5750:	230c      	movs	r3, #12
    5752:	18fa      	adds	r2, r7, r3
    5754:	4b17      	ldr	r3, [pc, #92]	; (57b4 <udd_sleep_mode+0x70>)
    5756:	0010      	movs	r0, r2
    5758:	0019      	movs	r1, r3
    575a:	2304      	movs	r3, #4
    575c:	001a      	movs	r2, r3
    575e:	4b16      	ldr	r3, [pc, #88]	; (57b8 <udd_sleep_mode+0x74>)
    5760:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    5762:	4b16      	ldr	r3, [pc, #88]	; (57bc <udd_sleep_mode+0x78>)
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	1dfa      	adds	r2, r7, #7
    5768:	7812      	ldrb	r2, [r2, #0]
    576a:	429a      	cmp	r2, r3
    576c:	d01d      	beq.n	57aa <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    576e:	1dfb      	adds	r3, r7, #7
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	2b00      	cmp	r3, #0
    5774:	d007      	beq.n	5786 <udd_sleep_mode+0x42>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    5776:	1dfb      	adds	r3, r7, #7
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	220c      	movs	r2, #12
    577c:	18ba      	adds	r2, r7, r2
    577e:	5cd3      	ldrb	r3, [r2, r3]
    5780:	0018      	movs	r0, r3
    5782:	4b0f      	ldr	r3, [pc, #60]	; (57c0 <udd_sleep_mode+0x7c>)
    5784:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    5786:	4b0d      	ldr	r3, [pc, #52]	; (57bc <udd_sleep_mode+0x78>)
    5788:	781b      	ldrb	r3, [r3, #0]
    578a:	2b00      	cmp	r3, #0
    578c:	d008      	beq.n	57a0 <udd_sleep_mode+0x5c>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    578e:	4b0b      	ldr	r3, [pc, #44]	; (57bc <udd_sleep_mode+0x78>)
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	001a      	movs	r2, r3
    5794:	230c      	movs	r3, #12
    5796:	18fb      	adds	r3, r7, r3
    5798:	5c9b      	ldrb	r3, [r3, r2]
    579a:	0018      	movs	r0, r3
    579c:	4b09      	ldr	r3, [pc, #36]	; (57c4 <udd_sleep_mode+0x80>)
    579e:	4798      	blx	r3
	}
	udd_state = new_state;
    57a0:	4b06      	ldr	r3, [pc, #24]	; (57bc <udd_sleep_mode+0x78>)
    57a2:	1dfa      	adds	r2, r7, #7
    57a4:	7812      	ldrb	r2, [r2, #0]
    57a6:	701a      	strb	r2, [r3, #0]
    57a8:	e000      	b.n	57ac <udd_sleep_mode+0x68>
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
		return; // No change
    57aa:	46c0      	nop			; (mov r8, r8)
	if (udd_state != UDD_STATE_OFF) {
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
}
    57ac:	46bd      	mov	sp, r7
    57ae:	b004      	add	sp, #16
    57b0:	bd80      	pop	{r7, pc}
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	000091fc 	.word	0x000091fc
    57b8:	00009105 	.word	0x00009105
    57bc:	20000218 	.word	0x20000218
    57c0:	0000566d 	.word	0x0000566d
    57c4:	000056bd 	.word	0x000056bd

000057c8 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    57c8:	b580      	push	{r7, lr}
    57ca:	b082      	sub	sp, #8
    57cc:	af00      	add	r7, sp, #0
    57ce:	0002      	movs	r2, r0
    57d0:	1dfb      	adds	r3, r7, #7
    57d2:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    57d4:	1dfb      	adds	r3, r7, #7
    57d6:	781b      	ldrb	r3, [r3, #0]
    57d8:	220f      	movs	r2, #15
    57da:	4013      	ands	r3, r2
    57dc:	005b      	lsls	r3, r3, #1
    57de:	1dfa      	adds	r2, r7, #7
    57e0:	7812      	ldrb	r2, [r2, #0]
    57e2:	b252      	sxtb	r2, r2
    57e4:	b2d2      	uxtb	r2, r2
    57e6:	09d2      	lsrs	r2, r2, #7
    57e8:	b2d2      	uxtb	r2, r2
    57ea:	189b      	adds	r3, r3, r2
    57ec:	1e9a      	subs	r2, r3, #2
    57ee:	0013      	movs	r3, r2
    57f0:	009b      	lsls	r3, r3, #2
    57f2:	189b      	adds	r3, r3, r2
    57f4:	009b      	lsls	r3, r3, #2
    57f6:	4a03      	ldr	r2, [pc, #12]	; (5804 <udd_ep_get_job+0x3c>)
    57f8:	189b      	adds	r3, r3, r2
}
    57fa:	0018      	movs	r0, r3
    57fc:	46bd      	mov	sp, r7
    57fe:	b002      	add	sp, #8
    5800:	bd80      	pop	{r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	200001f0 	.word	0x200001f0

00005808 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    5808:	b590      	push	{r4, r7, lr}
    580a:	b089      	sub	sp, #36	; 0x24
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5814:	2317      	movs	r3, #23
    5816:	18fb      	adds	r3, r7, r3
    5818:	69ba      	ldr	r2, [r7, #24]
    581a:	7992      	ldrb	r2, [r2, #6]
    581c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    581e:	2317      	movs	r3, #23
    5820:	18fb      	adds	r3, r7, r3
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	0018      	movs	r0, r3
    5826:	4b54      	ldr	r3, [pc, #336]	; (5978 <udd_ep_trans_in_next+0x170>)
    5828:	4798      	blx	r3
    582a:	0003      	movs	r3, r0
    582c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    582e:	230f      	movs	r3, #15
    5830:	18fb      	adds	r3, r7, r3
    5832:	2217      	movs	r2, #23
    5834:	18ba      	adds	r2, r7, r2
    5836:	7812      	ldrb	r2, [r2, #0]
    5838:	210f      	movs	r1, #15
    583a:	400a      	ands	r2, r1
    583c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    583e:	230c      	movs	r3, #12
    5840:	18fb      	adds	r3, r7, r3
    5842:	693a      	ldr	r2, [r7, #16]
    5844:	8a12      	ldrh	r2, [r2, #16]
    5846:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    5848:	230a      	movs	r3, #10
    584a:	18fb      	adds	r3, r7, r3
    584c:	69ba      	ldr	r2, [r7, #24]
    584e:	8852      	ldrh	r2, [r2, #2]
    5850:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    5852:	693b      	ldr	r3, [r7, #16]
    5854:	68da      	ldr	r2, [r3, #12]
    5856:	230a      	movs	r3, #10
    5858:	18fb      	adds	r3, r7, r3
    585a:	881b      	ldrh	r3, [r3, #0]
    585c:	18d2      	adds	r2, r2, r3
    585e:	693b      	ldr	r3, [r7, #16]
    5860:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    5862:	693b      	ldr	r3, [r7, #16]
    5864:	68da      	ldr	r2, [r3, #12]
    5866:	693b      	ldr	r3, [r7, #16]
    5868:	689b      	ldr	r3, [r3, #8]
    586a:	429a      	cmp	r2, r3
    586c:	d054      	beq.n	5918 <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    586e:	693b      	ldr	r3, [r7, #16]
    5870:	689b      	ldr	r3, [r3, #8]
    5872:	b299      	uxth	r1, r3
    5874:	693b      	ldr	r3, [r7, #16]
    5876:	68db      	ldr	r3, [r3, #12]
    5878:	b29a      	uxth	r2, r3
    587a:	231e      	movs	r3, #30
    587c:	18fb      	adds	r3, r7, r3
    587e:	1a8a      	subs	r2, r1, r2
    5880:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5882:	231e      	movs	r3, #30
    5884:	18fb      	adds	r3, r7, r3
    5886:	881b      	ldrh	r3, [r3, #0]
    5888:	4a3c      	ldr	r2, [pc, #240]	; (597c <udd_ep_trans_in_next+0x174>)
    588a:	4293      	cmp	r3, r2
    588c:	d90d      	bls.n	58aa <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    588e:	230c      	movs	r3, #12
    5890:	18fb      	adds	r3, r7, r3
    5892:	881a      	ldrh	r2, [r3, #0]
    5894:	4839      	ldr	r0, [pc, #228]	; (597c <udd_ep_trans_in_next+0x174>)
    5896:	4b3a      	ldr	r3, [pc, #232]	; (5980 <udd_ep_trans_in_next+0x178>)
    5898:	0011      	movs	r1, r2
    589a:	4798      	blx	r3
    589c:	000b      	movs	r3, r1
    589e:	b29a      	uxth	r2, r3
    58a0:	231e      	movs	r3, #30
    58a2:	18fb      	adds	r3, r7, r3
    58a4:	4935      	ldr	r1, [pc, #212]	; (597c <udd_ep_trans_in_next+0x174>)
    58a6:	1a8a      	subs	r2, r1, r2
    58a8:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    58aa:	693b      	ldr	r3, [r7, #16]
    58ac:	7c9b      	ldrb	r3, [r3, #18]
    58ae:	2202      	movs	r2, #2
    58b0:	4013      	ands	r3, r2
    58b2:	b2db      	uxtb	r3, r3
    58b4:	2b00      	cmp	r3, #0
    58b6:	d00e      	beq.n	58d6 <udd_ep_trans_in_next+0xce>
    58b8:	231e      	movs	r3, #30
    58ba:	18fa      	adds	r2, r7, r3
    58bc:	230c      	movs	r3, #12
    58be:	18fb      	adds	r3, r7, r3
    58c0:	8812      	ldrh	r2, [r2, #0]
    58c2:	8819      	ldrh	r1, [r3, #0]
    58c4:	4b2f      	ldr	r3, [pc, #188]	; (5984 <udd_ep_trans_in_next+0x17c>)
    58c6:	0010      	movs	r0, r2
    58c8:	4798      	blx	r3
    58ca:	000b      	movs	r3, r1
    58cc:	b29b      	uxth	r3, r3
    58ce:	2b00      	cmp	r3, #0
    58d0:	d101      	bne.n	58d6 <udd_ep_trans_in_next+0xce>
    58d2:	2301      	movs	r3, #1
    58d4:	e000      	b.n	58d8 <udd_ep_trans_in_next+0xd0>
    58d6:	2300      	movs	r3, #0
    58d8:	b2db      	uxtb	r3, r3
    58da:	1c1a      	adds	r2, r3, #0
    58dc:	2301      	movs	r3, #1
    58de:	4013      	ands	r3, r2
    58e0:	b2da      	uxtb	r2, r3
    58e2:	693b      	ldr	r3, [r7, #16]
    58e4:	2101      	movs	r1, #1
    58e6:	400a      	ands	r2, r1
    58e8:	1890      	adds	r0, r2, r2
    58ea:	7c9a      	ldrb	r2, [r3, #18]
    58ec:	2102      	movs	r1, #2
    58ee:	438a      	bics	r2, r1
    58f0:	1c11      	adds	r1, r2, #0
    58f2:	1c02      	adds	r2, r0, #0
    58f4:	430a      	orrs	r2, r1
    58f6:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    58f8:	693b      	ldr	r3, [r7, #16]
    58fa:	685a      	ldr	r2, [r3, #4]
    58fc:	693b      	ldr	r3, [r7, #16]
    58fe:	68db      	ldr	r3, [r3, #12]
    5900:	18d2      	adds	r2, r2, r3
    5902:	231e      	movs	r3, #30
    5904:	18fb      	adds	r3, r7, r3
    5906:	881c      	ldrh	r4, [r3, #0]
    5908:	230f      	movs	r3, #15
    590a:	18fb      	adds	r3, r7, r3
    590c:	7819      	ldrb	r1, [r3, #0]
    590e:	481e      	ldr	r0, [pc, #120]	; (5988 <udd_ep_trans_in_next+0x180>)
    5910:	0023      	movs	r3, r4
    5912:	4c1e      	ldr	r4, [pc, #120]	; (598c <udd_ep_trans_in_next+0x184>)
    5914:	47a0      	blx	r4
		return;
    5916:	e02b      	b.n	5970 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    5918:	693b      	ldr	r3, [r7, #16]
    591a:	7c9b      	ldrb	r3, [r3, #18]
    591c:	2202      	movs	r2, #2
    591e:	4013      	ands	r3, r2
    5920:	b2db      	uxtb	r3, r3
    5922:	2b00      	cmp	r3, #0
    5924:	d011      	beq.n	594a <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    5926:	693b      	ldr	r3, [r7, #16]
    5928:	7c9a      	ldrb	r2, [r3, #18]
    592a:	2102      	movs	r1, #2
    592c:	438a      	bics	r2, r1
    592e:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    5930:	693b      	ldr	r3, [r7, #16]
    5932:	685a      	ldr	r2, [r3, #4]
    5934:	693b      	ldr	r3, [r7, #16]
    5936:	68db      	ldr	r3, [r3, #12]
    5938:	18d2      	adds	r2, r2, r3
    593a:	230f      	movs	r3, #15
    593c:	18fb      	adds	r3, r7, r3
    593e:	7819      	ldrb	r1, [r3, #0]
    5940:	4811      	ldr	r0, [pc, #68]	; (5988 <udd_ep_trans_in_next+0x180>)
    5942:	2300      	movs	r3, #0
    5944:	4c11      	ldr	r4, [pc, #68]	; (598c <udd_ep_trans_in_next+0x184>)
    5946:	47a0      	blx	r4
		return;
    5948:	e012      	b.n	5970 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    594a:	693b      	ldr	r3, [r7, #16]
    594c:	7c9a      	ldrb	r2, [r3, #18]
    594e:	2101      	movs	r1, #1
    5950:	438a      	bics	r2, r1
    5952:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5954:	693b      	ldr	r3, [r7, #16]
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	2b00      	cmp	r3, #0
    595a:	d009      	beq.n	5970 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    595c:	693b      	ldr	r3, [r7, #16]
    595e:	681c      	ldr	r4, [r3, #0]
    5960:	693b      	ldr	r3, [r7, #16]
    5962:	68d9      	ldr	r1, [r3, #12]
    5964:	2317      	movs	r3, #23
    5966:	18fb      	adds	r3, r7, r3
    5968:	781b      	ldrb	r3, [r3, #0]
    596a:	001a      	movs	r2, r3
    596c:	2000      	movs	r0, #0
    596e:	47a0      	blx	r4
	}
}
    5970:	46bd      	mov	sp, r7
    5972:	b009      	add	sp, #36	; 0x24
    5974:	bd90      	pop	{r4, r7, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	000057c9 	.word	0x000057c9
    597c:	00001fff 	.word	0x00001fff
    5980:	0000906d 	.word	0x0000906d
    5984:	00008e99 	.word	0x00008e99
    5988:	2000037c 	.word	0x2000037c
    598c:	00007eb5 	.word	0x00007eb5

00005990 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    5990:	b5b0      	push	{r4, r5, r7, lr}
    5992:	b088      	sub	sp, #32
    5994:	af00      	add	r7, sp, #0
    5996:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    599c:	2317      	movs	r3, #23
    599e:	18fb      	adds	r3, r7, r3
    59a0:	69ba      	ldr	r2, [r7, #24]
    59a2:	7992      	ldrb	r2, [r2, #6]
    59a4:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    59a6:	2317      	movs	r3, #23
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	781b      	ldrb	r3, [r3, #0]
    59ac:	0018      	movs	r0, r3
    59ae:	4b66      	ldr	r3, [pc, #408]	; (5b48 <udd_ep_trans_out_next+0x1b8>)
    59b0:	4798      	blx	r3
    59b2:	0003      	movs	r3, r0
    59b4:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    59b6:	230f      	movs	r3, #15
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	2217      	movs	r2, #23
    59bc:	18ba      	adds	r2, r7, r2
    59be:	7812      	ldrb	r2, [r2, #0]
    59c0:	210f      	movs	r1, #15
    59c2:	400a      	ands	r2, r1
    59c4:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    59c6:	230c      	movs	r3, #12
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	693a      	ldr	r2, [r7, #16]
    59cc:	8a12      	ldrh	r2, [r2, #16]
    59ce:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    59d0:	230a      	movs	r3, #10
    59d2:	18fb      	adds	r3, r7, r3
    59d4:	69ba      	ldr	r2, [r7, #24]
    59d6:	8812      	ldrh	r2, [r2, #0]
    59d8:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    59da:	693b      	ldr	r3, [r7, #16]
    59dc:	7c9b      	ldrb	r3, [r3, #18]
    59de:	2204      	movs	r2, #4
    59e0:	4013      	ands	r3, r2
    59e2:	b2db      	uxtb	r3, r3
    59e4:	2b00      	cmp	r3, #0
    59e6:	d019      	beq.n	5a1c <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    59e8:	693b      	ldr	r3, [r7, #16]
    59ea:	685a      	ldr	r2, [r3, #4]
    59ec:	693b      	ldr	r3, [r7, #16]
    59ee:	68db      	ldr	r3, [r3, #12]
    59f0:	18d4      	adds	r4, r2, r3
    59f2:	230f      	movs	r3, #15
    59f4:	18fb      	adds	r3, r7, r3
    59f6:	781b      	ldrb	r3, [r3, #0]
    59f8:	3b01      	subs	r3, #1
    59fa:	019a      	lsls	r2, r3, #6
    59fc:	4b53      	ldr	r3, [pc, #332]	; (5b4c <udd_ep_trans_out_next+0x1bc>)
    59fe:	18d5      	adds	r5, r2, r3
    5a00:	693b      	ldr	r3, [r7, #16]
    5a02:	689a      	ldr	r2, [r3, #8]
    5a04:	230c      	movs	r3, #12
    5a06:	18fb      	adds	r3, r7, r3
    5a08:	8819      	ldrh	r1, [r3, #0]
    5a0a:	4b51      	ldr	r3, [pc, #324]	; (5b50 <udd_ep_trans_out_next+0x1c0>)
    5a0c:	0010      	movs	r0, r2
    5a0e:	4798      	blx	r3
    5a10:	000b      	movs	r3, r1
    5a12:	001a      	movs	r2, r3
    5a14:	0029      	movs	r1, r5
    5a16:	0020      	movs	r0, r4
    5a18:	4b4e      	ldr	r3, [pc, #312]	; (5b54 <udd_ep_trans_out_next+0x1c4>)
    5a1a:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    5a1c:	693b      	ldr	r3, [r7, #16]
    5a1e:	68da      	ldr	r2, [r3, #12]
    5a20:	230a      	movs	r3, #10
    5a22:	18fb      	adds	r3, r7, r3
    5a24:	881b      	ldrh	r3, [r3, #0]
    5a26:	18d2      	adds	r2, r2, r3
    5a28:	693b      	ldr	r3, [r7, #16]
    5a2a:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    5a2c:	693b      	ldr	r3, [r7, #16]
    5a2e:	68da      	ldr	r2, [r3, #12]
    5a30:	693b      	ldr	r3, [r7, #16]
    5a32:	689b      	ldr	r3, [r3, #8]
    5a34:	429a      	cmp	r2, r3
    5a36:	d903      	bls.n	5a40 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    5a38:	693b      	ldr	r3, [r7, #16]
    5a3a:	689a      	ldr	r2, [r3, #8]
    5a3c:	693b      	ldr	r3, [r7, #16]
    5a3e:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    5a40:	69bb      	ldr	r3, [r7, #24]
    5a42:	889b      	ldrh	r3, [r3, #4]
    5a44:	220a      	movs	r2, #10
    5a46:	18ba      	adds	r2, r7, r2
    5a48:	8812      	ldrh	r2, [r2, #0]
    5a4a:	429a      	cmp	r2, r3
    5a4c:	d165      	bne.n	5b1a <udd_ep_trans_out_next+0x18a>
    5a4e:	693b      	ldr	r3, [r7, #16]
    5a50:	68da      	ldr	r2, [r3, #12]
    5a52:	693b      	ldr	r3, [r7, #16]
    5a54:	689b      	ldr	r3, [r3, #8]
    5a56:	429a      	cmp	r2, r3
    5a58:	d05f      	beq.n	5b1a <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5a5a:	693b      	ldr	r3, [r7, #16]
    5a5c:	689b      	ldr	r3, [r3, #8]
    5a5e:	b299      	uxth	r1, r3
    5a60:	693b      	ldr	r3, [r7, #16]
    5a62:	68db      	ldr	r3, [r3, #12]
    5a64:	b29a      	uxth	r2, r3
    5a66:	231e      	movs	r3, #30
    5a68:	18fb      	adds	r3, r7, r3
    5a6a:	1a8a      	subs	r2, r1, r2
    5a6c:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5a6e:	231e      	movs	r3, #30
    5a70:	18fb      	adds	r3, r7, r3
    5a72:	881b      	ldrh	r3, [r3, #0]
    5a74:	4a38      	ldr	r2, [pc, #224]	; (5b58 <udd_ep_trans_out_next+0x1c8>)
    5a76:	4293      	cmp	r3, r2
    5a78:	d90e      	bls.n	5a98 <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    5a7a:	230c      	movs	r3, #12
    5a7c:	18fb      	adds	r3, r7, r3
    5a7e:	881a      	ldrh	r2, [r3, #0]
    5a80:	4835      	ldr	r0, [pc, #212]	; (5b58 <udd_ep_trans_out_next+0x1c8>)
    5a82:	4b36      	ldr	r3, [pc, #216]	; (5b5c <udd_ep_trans_out_next+0x1cc>)
    5a84:	0011      	movs	r1, r2
    5a86:	4798      	blx	r3
    5a88:	000b      	movs	r3, r1
    5a8a:	b29a      	uxth	r2, r3
    5a8c:	231e      	movs	r3, #30
    5a8e:	18fb      	adds	r3, r7, r3
    5a90:	4931      	ldr	r1, [pc, #196]	; (5b58 <udd_ep_trans_out_next+0x1c8>)
    5a92:	1a8a      	subs	r2, r1, r2
    5a94:	801a      	strh	r2, [r3, #0]
    5a96:	e011      	b.n	5abc <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    5a98:	231e      	movs	r3, #30
    5a9a:	18fa      	adds	r2, r7, r3
    5a9c:	230c      	movs	r3, #12
    5a9e:	18fb      	adds	r3, r7, r3
    5aa0:	8812      	ldrh	r2, [r2, #0]
    5aa2:	8819      	ldrh	r1, [r3, #0]
    5aa4:	4b2a      	ldr	r3, [pc, #168]	; (5b50 <udd_ep_trans_out_next+0x1c0>)
    5aa6:	0010      	movs	r0, r2
    5aa8:	4798      	blx	r3
    5aaa:	000b      	movs	r3, r1
    5aac:	b29a      	uxth	r2, r3
    5aae:	231e      	movs	r3, #30
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	211e      	movs	r1, #30
    5ab4:	1879      	adds	r1, r7, r1
    5ab6:	8809      	ldrh	r1, [r1, #0]
    5ab8:	1a8a      	subs	r2, r1, r2
    5aba:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    5abc:	231e      	movs	r3, #30
    5abe:	18fa      	adds	r2, r7, r3
    5ac0:	230c      	movs	r3, #12
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	8812      	ldrh	r2, [r2, #0]
    5ac6:	881b      	ldrh	r3, [r3, #0]
    5ac8:	429a      	cmp	r2, r3
    5aca:	d216      	bcs.n	5afa <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    5acc:	693b      	ldr	r3, [r7, #16]
    5ace:	7c9a      	ldrb	r2, [r3, #18]
    5ad0:	2104      	movs	r1, #4
    5ad2:	430a      	orrs	r2, r1
    5ad4:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    5ad6:	230f      	movs	r3, #15
    5ad8:	18fb      	adds	r3, r7, r3
    5ada:	781b      	ldrb	r3, [r3, #0]
    5adc:	3b01      	subs	r3, #1
    5ade:	019a      	lsls	r2, r3, #6
    5ae0:	4b1a      	ldr	r3, [pc, #104]	; (5b4c <udd_ep_trans_out_next+0x1bc>)
    5ae2:	18d2      	adds	r2, r2, r3
    5ae4:	230c      	movs	r3, #12
    5ae6:	18fb      	adds	r3, r7, r3
    5ae8:	881c      	ldrh	r4, [r3, #0]
    5aea:	230f      	movs	r3, #15
    5aec:	18fb      	adds	r3, r7, r3
    5aee:	7819      	ldrb	r1, [r3, #0]
    5af0:	481b      	ldr	r0, [pc, #108]	; (5b60 <udd_ep_trans_out_next+0x1d0>)
    5af2:	0023      	movs	r3, r4
    5af4:	4c1b      	ldr	r4, [pc, #108]	; (5b64 <udd_ep_trans_out_next+0x1d4>)
    5af6:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    5af8:	e022      	b.n	5b40 <udd_ep_trans_out_next+0x1b0>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5afa:	693b      	ldr	r3, [r7, #16]
    5afc:	685a      	ldr	r2, [r3, #4]
    5afe:	693b      	ldr	r3, [r7, #16]
    5b00:	68db      	ldr	r3, [r3, #12]
    5b02:	18d2      	adds	r2, r2, r3
    5b04:	231e      	movs	r3, #30
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	881c      	ldrh	r4, [r3, #0]
    5b0a:	230f      	movs	r3, #15
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	7819      	ldrb	r1, [r3, #0]
    5b10:	4813      	ldr	r0, [pc, #76]	; (5b60 <udd_ep_trans_out_next+0x1d0>)
    5b12:	0023      	movs	r3, r4
    5b14:	4c13      	ldr	r4, [pc, #76]	; (5b64 <udd_ep_trans_out_next+0x1d4>)
    5b16:	47a0      	blx	r4
		}
		return;
    5b18:	e012      	b.n	5b40 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    5b1a:	693b      	ldr	r3, [r7, #16]
    5b1c:	7c9a      	ldrb	r2, [r3, #18]
    5b1e:	2101      	movs	r1, #1
    5b20:	438a      	bics	r2, r1
    5b22:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5b24:	693b      	ldr	r3, [r7, #16]
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d009      	beq.n	5b40 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    5b2c:	693b      	ldr	r3, [r7, #16]
    5b2e:	681c      	ldr	r4, [r3, #0]
    5b30:	693b      	ldr	r3, [r7, #16]
    5b32:	68d9      	ldr	r1, [r3, #12]
    5b34:	2317      	movs	r3, #23
    5b36:	18fb      	adds	r3, r7, r3
    5b38:	781b      	ldrb	r3, [r3, #0]
    5b3a:	001a      	movs	r2, r3
    5b3c:	2000      	movs	r0, #0
    5b3e:	47a0      	blx	r4
	}
}
    5b40:	46bd      	mov	sp, r7
    5b42:	b008      	add	sp, #32
    5b44:	bdb0      	pop	{r4, r5, r7, pc}
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	000057c9 	.word	0x000057c9
    5b4c:	2000033c 	.word	0x2000033c
    5b50:	00008e99 	.word	0x00008e99
    5b54:	00009105 	.word	0x00009105
    5b58:	00001fff 	.word	0x00001fff
    5b5c:	0000906d 	.word	0x0000906d
    5b60:	2000037c 	.word	0x2000037c
    5b64:	00007f69 	.word	0x00007f69

00005b68 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    5b68:	b580      	push	{r7, lr}
    5b6a:	b084      	sub	sp, #16
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
    5b70:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5b72:	683b      	ldr	r3, [r7, #0]
    5b74:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5b76:	230b      	movs	r3, #11
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	68fa      	ldr	r2, [r7, #12]
    5b7c:	7992      	ldrb	r2, [r2, #6]
    5b7e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    5b80:	230b      	movs	r3, #11
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	b25b      	sxtb	r3, r3
    5b88:	2b00      	cmp	r3, #0
    5b8a:	da04      	bge.n	5b96 <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    5b8c:	683b      	ldr	r3, [r7, #0]
    5b8e:	0018      	movs	r0, r3
    5b90:	4b05      	ldr	r3, [pc, #20]	; (5ba8 <udd_ep_transfer_process+0x40>)
    5b92:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    5b94:	e003      	b.n	5b9e <udd_ep_transfer_process+0x36>
	udd_ep_id_t ep = ep_callback_para->endpoint_address;

	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
    5b96:	683b      	ldr	r3, [r7, #0]
    5b98:	0018      	movs	r0, r3
    5b9a:	4b04      	ldr	r3, [pc, #16]	; (5bac <udd_ep_transfer_process+0x44>)
    5b9c:	4798      	blx	r3
	}
}
    5b9e:	46c0      	nop			; (mov r8, r8)
    5ba0:	46bd      	mov	sp, r7
    5ba2:	b004      	add	sp, #16
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	00005809 	.word	0x00005809
    5bac:	00005991 	.word	0x00005991

00005bb0 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    5bb0:	b590      	push	{r4, r7, lr}
    5bb2:	b085      	sub	sp, #20
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	0002      	movs	r2, r0
    5bb8:	1dfb      	adds	r3, r7, #7
    5bba:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    5bbc:	1dfb      	adds	r3, r7, #7
    5bbe:	781a      	ldrb	r2, [r3, #0]
    5bc0:	4b14      	ldr	r3, [pc, #80]	; (5c14 <udd_ep_abort+0x64>)
    5bc2:	0011      	movs	r1, r2
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b14      	ldr	r3, [pc, #80]	; (5c18 <udd_ep_abort+0x68>)
    5bc8:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    5bca:	1dfb      	adds	r3, r7, #7
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	0018      	movs	r0, r3
    5bd0:	4b12      	ldr	r3, [pc, #72]	; (5c1c <udd_ep_abort+0x6c>)
    5bd2:	4798      	blx	r3
    5bd4:	0003      	movs	r3, r0
    5bd6:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    5bd8:	68fb      	ldr	r3, [r7, #12]
    5bda:	7c9b      	ldrb	r3, [r3, #18]
    5bdc:	2201      	movs	r2, #1
    5bde:	4013      	ands	r3, r2
    5be0:	b2db      	uxtb	r3, r3
    5be2:	2b00      	cmp	r3, #0
    5be4:	d012      	beq.n	5c0c <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    5be6:	68fb      	ldr	r3, [r7, #12]
    5be8:	7c9a      	ldrb	r2, [r3, #18]
    5bea:	2101      	movs	r1, #1
    5bec:	438a      	bics	r2, r1
    5bee:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5bf0:	68fb      	ldr	r3, [r7, #12]
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d00a      	beq.n	5c0e <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	681c      	ldr	r4, [r3, #0]
    5bfc:	68fb      	ldr	r3, [r7, #12]
    5bfe:	68d9      	ldr	r1, [r3, #12]
    5c00:	1dfb      	adds	r3, r7, #7
    5c02:	781b      	ldrb	r3, [r3, #0]
    5c04:	001a      	movs	r2, r3
    5c06:	2001      	movs	r0, #1
    5c08:	47a0      	blx	r4
    5c0a:	e000      	b.n	5c0e <udd_ep_abort+0x5e>
	usb_device_endpoint_abort_job(&usb_device, ep);

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
	if (!ptr_job->busy) {
		return;
    5c0c:	46c0      	nop			; (mov r8, r8)
	ptr_job->busy = false;
	if (NULL != ptr_job->call_trans) {
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
	}
}
    5c0e:	46bd      	mov	sp, r7
    5c10:	b005      	add	sp, #20
    5c12:	bd90      	pop	{r4, r7, pc}
    5c14:	2000037c 	.word	0x2000037c
    5c18:	00007c31 	.word	0x00007c31
    5c1c:	000057c9 	.word	0x000057c9

00005c20 <udd_get_frame_number>:
	return false;
#endif
}

uint16_t udd_get_frame_number(void)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    5c24:	4b03      	ldr	r3, [pc, #12]	; (5c34 <udd_get_frame_number+0x14>)
    5c26:	0018      	movs	r0, r3
    5c28:	4b03      	ldr	r3, [pc, #12]	; (5c38 <udd_get_frame_number+0x18>)
    5c2a:	4798      	blx	r3
    5c2c:	0003      	movs	r3, r0
}
    5c2e:	0018      	movs	r0, r3
    5c30:	46bd      	mov	sp, r7
    5c32:	bd80      	pop	{r7, pc}
    5c34:	2000037c 	.word	0x2000037c
    5c38:	000055a9 	.word	0x000055a9

00005c3c <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b084      	sub	sp, #16
    5c40:	af00      	add	r7, sp, #0
    5c42:	0002      	movs	r2, r0
    5c44:	1dfb      	adds	r3, r7, #7
    5c46:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5c48:	2308      	movs	r3, #8
    5c4a:	18fb      	adds	r3, r7, r3
    5c4c:	0018      	movs	r0, r3
    5c4e:	4b18      	ldr	r3, [pc, #96]	; (5cb0 <udd_ep_free+0x74>)
    5c50:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5c52:	230f      	movs	r3, #15
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	1dfa      	adds	r2, r7, #7
    5c58:	7812      	ldrb	r2, [r2, #0]
    5c5a:	210f      	movs	r1, #15
    5c5c:	400a      	ands	r2, r1
    5c5e:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    5c60:	1dfb      	adds	r3, r7, #7
    5c62:	781b      	ldrb	r3, [r3, #0]
    5c64:	0018      	movs	r0, r3
    5c66:	4b13      	ldr	r3, [pc, #76]	; (5cb4 <udd_ep_free+0x78>)
    5c68:	4798      	blx	r3

	config_ep.ep_address = ep;
    5c6a:	2308      	movs	r3, #8
    5c6c:	18fb      	adds	r3, r7, r3
    5c6e:	1dfa      	adds	r2, r7, #7
    5c70:	7812      	ldrb	r2, [r2, #0]
    5c72:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    5c74:	2308      	movs	r3, #8
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	2200      	movs	r2, #0
    5c7a:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    5c7c:	2308      	movs	r3, #8
    5c7e:	18fa      	adds	r2, r7, r3
    5c80:	4b0d      	ldr	r3, [pc, #52]	; (5cb8 <udd_ep_free+0x7c>)
    5c82:	0011      	movs	r1, r2
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <udd_ep_free+0x80>)
    5c88:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5c8a:	230f      	movs	r3, #15
    5c8c:	18fb      	adds	r3, r7, r3
    5c8e:	7819      	ldrb	r1, [r3, #0]
    5c90:	4b09      	ldr	r3, [pc, #36]	; (5cb8 <udd_ep_free+0x7c>)
    5c92:	2200      	movs	r2, #0
    5c94:	0018      	movs	r0, r3
    5c96:	4b0a      	ldr	r3, [pc, #40]	; (5cc0 <udd_ep_free+0x84>)
    5c98:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5c9a:	1dfb      	adds	r3, r7, #7
    5c9c:	7819      	ldrb	r1, [r3, #0]
    5c9e:	4b06      	ldr	r3, [pc, #24]	; (5cb8 <udd_ep_free+0x7c>)
    5ca0:	2200      	movs	r2, #0
    5ca2:	0018      	movs	r0, r3
    5ca4:	4b07      	ldr	r3, [pc, #28]	; (5cc4 <udd_ep_free+0x88>)
    5ca6:	4798      	blx	r3
}
    5ca8:	46c0      	nop			; (mov r8, r8)
    5caa:	46bd      	mov	sp, r7
    5cac:	b004      	add	sp, #16
    5cae:	bd80      	pop	{r7, pc}
    5cb0:	00007711 	.word	0x00007711
    5cb4:	00005bb1 	.word	0x00005bb1
    5cb8:	2000037c 	.word	0x2000037c
    5cbc:	00007739 	.word	0x00007739
    5cc0:	00007359 	.word	0x00007359
    5cc4:	0000756d 	.word	0x0000756d

00005cc8 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    5cc8:	b590      	push	{r4, r7, lr}
    5cca:	b087      	sub	sp, #28
    5ccc:	af00      	add	r7, sp, #0
    5cce:	0004      	movs	r4, r0
    5cd0:	0008      	movs	r0, r1
    5cd2:	0011      	movs	r1, r2
    5cd4:	1dfb      	adds	r3, r7, #7
    5cd6:	1c22      	adds	r2, r4, #0
    5cd8:	701a      	strb	r2, [r3, #0]
    5cda:	1dbb      	adds	r3, r7, #6
    5cdc:	1c02      	adds	r2, r0, #0
    5cde:	701a      	strb	r2, [r3, #0]
    5ce0:	1d3b      	adds	r3, r7, #4
    5ce2:	1c0a      	adds	r2, r1, #0
    5ce4:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5ce6:	230c      	movs	r3, #12
    5ce8:	18fb      	adds	r3, r7, r3
    5cea:	0018      	movs	r0, r3
    5cec:	4b58      	ldr	r3, [pc, #352]	; (5e50 <udd_ep_alloc+0x188>)
    5cee:	4798      	blx	r3

	config_ep.ep_address = ep;
    5cf0:	230c      	movs	r3, #12
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	1dfa      	adds	r2, r7, #7
    5cf6:	7812      	ldrb	r2, [r2, #0]
    5cf8:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    5cfa:	1d3b      	adds	r3, r7, #4
    5cfc:	881b      	ldrh	r3, [r3, #0]
    5cfe:	2b08      	cmp	r3, #8
    5d00:	d804      	bhi.n	5d0c <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5d02:	230c      	movs	r3, #12
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	2200      	movs	r2, #0
    5d08:	705a      	strb	r2, [r3, #1]
    5d0a:	e045      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    5d0c:	1d3b      	adds	r3, r7, #4
    5d0e:	881b      	ldrh	r3, [r3, #0]
    5d10:	2b10      	cmp	r3, #16
    5d12:	d804      	bhi.n	5d1e <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    5d14:	230c      	movs	r3, #12
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	2201      	movs	r2, #1
    5d1a:	705a      	strb	r2, [r3, #1]
    5d1c:	e03c      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    5d1e:	1d3b      	adds	r3, r7, #4
    5d20:	881b      	ldrh	r3, [r3, #0]
    5d22:	2b20      	cmp	r3, #32
    5d24:	d804      	bhi.n	5d30 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    5d26:	230c      	movs	r3, #12
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	2202      	movs	r2, #2
    5d2c:	705a      	strb	r2, [r3, #1]
    5d2e:	e033      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    5d30:	1d3b      	adds	r3, r7, #4
    5d32:	881b      	ldrh	r3, [r3, #0]
    5d34:	2b40      	cmp	r3, #64	; 0x40
    5d36:	d804      	bhi.n	5d42 <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5d38:	230c      	movs	r3, #12
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	2203      	movs	r2, #3
    5d3e:	705a      	strb	r2, [r3, #1]
    5d40:	e02a      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    5d42:	1d3b      	adds	r3, r7, #4
    5d44:	881b      	ldrh	r3, [r3, #0]
    5d46:	2b80      	cmp	r3, #128	; 0x80
    5d48:	d804      	bhi.n	5d54 <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5d4a:	230c      	movs	r3, #12
    5d4c:	18fb      	adds	r3, r7, r3
    5d4e:	2204      	movs	r2, #4
    5d50:	705a      	strb	r2, [r3, #1]
    5d52:	e021      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    5d54:	1d3b      	adds	r3, r7, #4
    5d56:	881a      	ldrh	r2, [r3, #0]
    5d58:	2380      	movs	r3, #128	; 0x80
    5d5a:	005b      	lsls	r3, r3, #1
    5d5c:	429a      	cmp	r2, r3
    5d5e:	d804      	bhi.n	5d6a <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5d60:	230c      	movs	r3, #12
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	2205      	movs	r2, #5
    5d66:	705a      	strb	r2, [r3, #1]
    5d68:	e016      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    5d6a:	1d3b      	adds	r3, r7, #4
    5d6c:	881a      	ldrh	r2, [r3, #0]
    5d6e:	2380      	movs	r3, #128	; 0x80
    5d70:	009b      	lsls	r3, r3, #2
    5d72:	429a      	cmp	r2, r3
    5d74:	d804      	bhi.n	5d80 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    5d76:	230c      	movs	r3, #12
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	2206      	movs	r2, #6
    5d7c:	705a      	strb	r2, [r3, #1]
    5d7e:	e00b      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    5d80:	1d3b      	adds	r3, r7, #4
    5d82:	881b      	ldrh	r3, [r3, #0]
    5d84:	4a33      	ldr	r2, [pc, #204]	; (5e54 <udd_ep_alloc+0x18c>)
    5d86:	4293      	cmp	r3, r2
    5d88:	d804      	bhi.n	5d94 <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5d8a:	230c      	movs	r3, #12
    5d8c:	18fb      	adds	r3, r7, r3
    5d8e:	2207      	movs	r2, #7
    5d90:	705a      	strb	r2, [r3, #1]
    5d92:	e001      	b.n	5d98 <udd_ep_alloc+0xd0>
	} else {
		return false;
    5d94:	2300      	movs	r3, #0
    5d96:	e057      	b.n	5e48 <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    5d98:	1dfb      	adds	r3, r7, #7
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	0018      	movs	r0, r3
    5d9e:	4b2e      	ldr	r3, [pc, #184]	; (5e58 <udd_ep_alloc+0x190>)
    5da0:	4798      	blx	r3
    5da2:	0003      	movs	r3, r0
    5da4:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    5da6:	697b      	ldr	r3, [r7, #20]
    5da8:	1d3a      	adds	r2, r7, #4
    5daa:	8812      	ldrh	r2, [r2, #0]
    5dac:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5dae:	1dbb      	adds	r3, r7, #6
    5db0:	1dba      	adds	r2, r7, #6
    5db2:	7812      	ldrb	r2, [r2, #0]
    5db4:	2103      	movs	r1, #3
    5db6:	400a      	ands	r2, r1
    5db8:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    5dba:	1dbb      	adds	r3, r7, #6
    5dbc:	781b      	ldrb	r3, [r3, #0]
    5dbe:	2b01      	cmp	r3, #1
    5dc0:	d104      	bne.n	5dcc <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    5dc2:	230c      	movs	r3, #12
    5dc4:	18fb      	adds	r3, r7, r3
    5dc6:	2202      	movs	r2, #2
    5dc8:	70da      	strb	r2, [r3, #3]
    5dca:	e013      	b.n	5df4 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    5dcc:	1dbb      	adds	r3, r7, #6
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	2b02      	cmp	r3, #2
    5dd2:	d104      	bne.n	5dde <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    5dd4:	230c      	movs	r3, #12
    5dd6:	18fb      	adds	r3, r7, r3
    5dd8:	2203      	movs	r2, #3
    5dda:	70da      	strb	r2, [r3, #3]
    5ddc:	e00a      	b.n	5df4 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    5dde:	1dbb      	adds	r3, r7, #6
    5de0:	781b      	ldrb	r3, [r3, #0]
    5de2:	2b03      	cmp	r3, #3
    5de4:	d104      	bne.n	5df0 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    5de6:	230c      	movs	r3, #12
    5de8:	18fb      	adds	r3, r7, r3
    5dea:	2204      	movs	r2, #4
    5dec:	70da      	strb	r2, [r3, #3]
    5dee:	e001      	b.n	5df4 <udd_ep_alloc+0x12c>
	} else {
		return false;
    5df0:	2300      	movs	r3, #0
    5df2:	e029      	b.n	5e48 <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5df4:	2313      	movs	r3, #19
    5df6:	18fb      	adds	r3, r7, r3
    5df8:	1dfa      	adds	r2, r7, #7
    5dfa:	7812      	ldrb	r2, [r2, #0]
    5dfc:	210f      	movs	r1, #15
    5dfe:	400a      	ands	r2, r1
    5e00:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    5e02:	230c      	movs	r3, #12
    5e04:	18fa      	adds	r2, r7, r3
    5e06:	4b15      	ldr	r3, [pc, #84]	; (5e5c <udd_ep_alloc+0x194>)
    5e08:	0011      	movs	r1, r2
    5e0a:	0018      	movs	r0, r3
    5e0c:	4b14      	ldr	r3, [pc, #80]	; (5e60 <udd_ep_alloc+0x198>)
    5e0e:	4798      	blx	r3
    5e10:	1e03      	subs	r3, r0, #0
    5e12:	d001      	beq.n	5e18 <udd_ep_alloc+0x150>
		return false;
    5e14:	2300      	movs	r3, #0
    5e16:	e017      	b.n	5e48 <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    5e18:	4a12      	ldr	r2, [pc, #72]	; (5e64 <udd_ep_alloc+0x19c>)
    5e1a:	2313      	movs	r3, #19
    5e1c:	18fb      	adds	r3, r7, r3
    5e1e:	7819      	ldrb	r1, [r3, #0]
    5e20:	480e      	ldr	r0, [pc, #56]	; (5e5c <udd_ep_alloc+0x194>)
    5e22:	0013      	movs	r3, r2
    5e24:	2200      	movs	r2, #0
    5e26:	4c10      	ldr	r4, [pc, #64]	; (5e68 <udd_ep_alloc+0x1a0>)
    5e28:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5e2a:	1dfb      	adds	r3, r7, #7
    5e2c:	7819      	ldrb	r1, [r3, #0]
    5e2e:	4b0b      	ldr	r3, [pc, #44]	; (5e5c <udd_ep_alloc+0x194>)
    5e30:	2200      	movs	r2, #0
    5e32:	0018      	movs	r0, r3
    5e34:	4b0d      	ldr	r3, [pc, #52]	; (5e6c <udd_ep_alloc+0x1a4>)
    5e36:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5e38:	1dfb      	adds	r3, r7, #7
    5e3a:	7819      	ldrb	r1, [r3, #0]
    5e3c:	4b07      	ldr	r3, [pc, #28]	; (5e5c <udd_ep_alloc+0x194>)
    5e3e:	2201      	movs	r2, #1
    5e40:	0018      	movs	r0, r3
    5e42:	4b0a      	ldr	r3, [pc, #40]	; (5e6c <udd_ep_alloc+0x1a4>)
    5e44:	4798      	blx	r3

	return true;
    5e46:	2301      	movs	r3, #1
}
    5e48:	0018      	movs	r0, r3
    5e4a:	46bd      	mov	sp, r7
    5e4c:	b007      	add	sp, #28
    5e4e:	bd90      	pop	{r4, r7, pc}
    5e50:	00007711 	.word	0x00007711
    5e54:	000003ff 	.word	0x000003ff
    5e58:	000057c9 	.word	0x000057c9
    5e5c:	2000037c 	.word	0x2000037c
    5e60:	00007739 	.word	0x00007739
    5e64:	00005b69 	.word	0x00005b69
    5e68:	000072d9 	.word	0x000072d9
    5e6c:	000073d1 	.word	0x000073d1

00005e70 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    5e70:	b580      	push	{r7, lr}
    5e72:	b082      	sub	sp, #8
    5e74:	af00      	add	r7, sp, #0
    5e76:	0002      	movs	r2, r0
    5e78:	1dfb      	adds	r3, r7, #7
    5e7a:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5e7c:	1dfb      	adds	r3, r7, #7
    5e7e:	781a      	ldrb	r2, [r3, #0]
    5e80:	4b04      	ldr	r3, [pc, #16]	; (5e94 <udd_ep_is_halted+0x24>)
    5e82:	0011      	movs	r1, r2
    5e84:	0018      	movs	r0, r3
    5e86:	4b04      	ldr	r3, [pc, #16]	; (5e98 <udd_ep_is_halted+0x28>)
    5e88:	4798      	blx	r3
    5e8a:	0003      	movs	r3, r0
}
    5e8c:	0018      	movs	r0, r3
    5e8e:	46bd      	mov	sp, r7
    5e90:	b002      	add	sp, #8
    5e92:	bd80      	pop	{r7, pc}
    5e94:	2000037c 	.word	0x2000037c
    5e98:	00007cb9 	.word	0x00007cb9

00005e9c <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    5e9c:	b580      	push	{r7, lr}
    5e9e:	b084      	sub	sp, #16
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	0002      	movs	r2, r0
    5ea4:	1dfb      	adds	r3, r7, #7
    5ea6:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5ea8:	230f      	movs	r3, #15
    5eaa:	18fb      	adds	r3, r7, r3
    5eac:	1dfa      	adds	r2, r7, #7
    5eae:	7812      	ldrb	r2, [r2, #0]
    5eb0:	210f      	movs	r1, #15
    5eb2:	400a      	ands	r2, r1
    5eb4:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5eb6:	230f      	movs	r3, #15
    5eb8:	18fb      	adds	r3, r7, r3
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	2b01      	cmp	r3, #1
    5ebe:	d901      	bls.n	5ec4 <udd_ep_set_halt+0x28>
		return false;
    5ec0:	2300      	movs	r3, #0
    5ec2:	e00c      	b.n	5ede <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    5ec4:	1dfb      	adds	r3, r7, #7
    5ec6:	781a      	ldrb	r2, [r3, #0]
    5ec8:	4b07      	ldr	r3, [pc, #28]	; (5ee8 <udd_ep_set_halt+0x4c>)
    5eca:	0011      	movs	r1, r2
    5ecc:	0018      	movs	r0, r3
    5ece:	4b07      	ldr	r3, [pc, #28]	; (5eec <udd_ep_set_halt+0x50>)
    5ed0:	4798      	blx	r3

	udd_ep_abort(ep);
    5ed2:	1dfb      	adds	r3, r7, #7
    5ed4:	781b      	ldrb	r3, [r3, #0]
    5ed6:	0018      	movs	r0, r3
    5ed8:	4b05      	ldr	r3, [pc, #20]	; (5ef0 <udd_ep_set_halt+0x54>)
    5eda:	4798      	blx	r3
	return true;
    5edc:	2301      	movs	r3, #1
}
    5ede:	0018      	movs	r0, r3
    5ee0:	46bd      	mov	sp, r7
    5ee2:	b004      	add	sp, #16
    5ee4:	bd80      	pop	{r7, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	2000037c 	.word	0x2000037c
    5eec:	00007d2d 	.word	0x00007d2d
    5ef0:	00005bb1 	.word	0x00005bb1

00005ef4 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    5ef4:	b580      	push	{r7, lr}
    5ef6:	b084      	sub	sp, #16
    5ef8:	af00      	add	r7, sp, #0
    5efa:	0002      	movs	r2, r0
    5efc:	1dfb      	adds	r3, r7, #7
    5efe:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5f00:	230f      	movs	r3, #15
    5f02:	18fb      	adds	r3, r7, r3
    5f04:	1dfa      	adds	r2, r7, #7
    5f06:	7812      	ldrb	r2, [r2, #0]
    5f08:	210f      	movs	r1, #15
    5f0a:	400a      	ands	r2, r1
    5f0c:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5f0e:	230f      	movs	r3, #15
    5f10:	18fb      	adds	r3, r7, r3
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	2b01      	cmp	r3, #1
    5f16:	d901      	bls.n	5f1c <udd_ep_clear_halt+0x28>
		return false;
    5f18:	2300      	movs	r3, #0
    5f1a:	e01d      	b.n	5f58 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    5f1c:	1dfb      	adds	r3, r7, #7
    5f1e:	781b      	ldrb	r3, [r3, #0]
    5f20:	0018      	movs	r0, r3
    5f22:	4b0f      	ldr	r3, [pc, #60]	; (5f60 <udd_ep_clear_halt+0x6c>)
    5f24:	4798      	blx	r3
    5f26:	0003      	movs	r3, r0
    5f28:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    5f2a:	1dfb      	adds	r3, r7, #7
    5f2c:	781a      	ldrb	r2, [r3, #0]
    5f2e:	4b0d      	ldr	r3, [pc, #52]	; (5f64 <udd_ep_clear_halt+0x70>)
    5f30:	0011      	movs	r1, r2
    5f32:	0018      	movs	r0, r3
    5f34:	4b0c      	ldr	r3, [pc, #48]	; (5f68 <udd_ep_clear_halt+0x74>)
    5f36:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    5f38:	68bb      	ldr	r3, [r7, #8]
    5f3a:	7c9b      	ldrb	r3, [r3, #18]
    5f3c:	2201      	movs	r2, #1
    5f3e:	4013      	ands	r3, r2
    5f40:	b2db      	uxtb	r3, r3
    5f42:	2b00      	cmp	r3, #0
    5f44:	d007      	beq.n	5f56 <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    5f46:	68bb      	ldr	r3, [r7, #8]
    5f48:	7c9a      	ldrb	r2, [r3, #18]
    5f4a:	2101      	movs	r1, #1
    5f4c:	438a      	bics	r2, r1
    5f4e:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    5f50:	68bb      	ldr	r3, [r7, #8]
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	4798      	blx	r3
	}

	return true;
    5f56:	2301      	movs	r3, #1
}
    5f58:	0018      	movs	r0, r3
    5f5a:	46bd      	mov	sp, r7
    5f5c:	b004      	add	sp, #16
    5f5e:	bd80      	pop	{r7, pc}
    5f60:	000057c9 	.word	0x000057c9
    5f64:	2000037c 	.word	0x2000037c
    5f68:	00007d89 	.word	0x00007d89

00005f6c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5f70:	4b07      	ldr	r3, [pc, #28]	; (5f90 <udd_ctrl_stall_data+0x24>)
    5f72:	2205      	movs	r2, #5
    5f74:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    5f76:	4b07      	ldr	r3, [pc, #28]	; (5f94 <udd_ctrl_stall_data+0x28>)
    5f78:	2180      	movs	r1, #128	; 0x80
    5f7a:	0018      	movs	r0, r3
    5f7c:	4b06      	ldr	r3, [pc, #24]	; (5f98 <udd_ctrl_stall_data+0x2c>)
    5f7e:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    5f80:	4b04      	ldr	r3, [pc, #16]	; (5f94 <udd_ctrl_stall_data+0x28>)
    5f82:	2100      	movs	r1, #0
    5f84:	0018      	movs	r0, r3
    5f86:	4b05      	ldr	r3, [pc, #20]	; (5f9c <udd_ctrl_stall_data+0x30>)
    5f88:	4798      	blx	r3
}
    5f8a:	46c0      	nop			; (mov r8, r8)
    5f8c:	46bd      	mov	sp, r7
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	200001e8 	.word	0x200001e8
    5f94:	2000037c 	.word	0x2000037c
    5f98:	00007d2d 	.word	0x00007d2d
    5f9c:	00007d89 	.word	0x00007d89

00005fa0 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    5fa0:	b590      	push	{r4, r7, lr}
    5fa2:	b089      	sub	sp, #36	; 0x24
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	60ba      	str	r2, [r7, #8]
    5fa8:	607b      	str	r3, [r7, #4]
    5faa:	230f      	movs	r3, #15
    5fac:	18fb      	adds	r3, r7, r3
    5fae:	1c02      	adds	r2, r0, #0
    5fb0:	701a      	strb	r2, [r3, #0]
    5fb2:	230e      	movs	r3, #14
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	1c0a      	adds	r2, r1, #0
    5fb8:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    5fba:	231d      	movs	r3, #29
    5fbc:	18fb      	adds	r3, r7, r3
    5fbe:	220f      	movs	r2, #15
    5fc0:	18ba      	adds	r2, r7, r2
    5fc2:	7812      	ldrb	r2, [r2, #0]
    5fc4:	210f      	movs	r1, #15
    5fc6:	400a      	ands	r2, r1
    5fc8:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    5fca:	231d      	movs	r3, #29
    5fcc:	18fb      	adds	r3, r7, r3
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	2b01      	cmp	r3, #1
    5fd2:	d807      	bhi.n	5fe4 <udd_ep_run+0x44>
    5fd4:	230f      	movs	r3, #15
    5fd6:	18fb      	adds	r3, r7, r3
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	0018      	movs	r0, r3
    5fdc:	4b9f      	ldr	r3, [pc, #636]	; (625c <udd_ep_run+0x2bc>)
    5fde:	4798      	blx	r3
    5fe0:	1e03      	subs	r3, r0, #0
    5fe2:	d001      	beq.n	5fe8 <udd_ep_run+0x48>
		return false;
    5fe4:	2300      	movs	r3, #0
    5fe6:	e134      	b.n	6252 <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    5fe8:	230f      	movs	r3, #15
    5fea:	18fb      	adds	r3, r7, r3
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	0018      	movs	r0, r3
    5ff0:	4b9b      	ldr	r3, [pc, #620]	; (6260 <udd_ep_run+0x2c0>)
    5ff2:	4798      	blx	r3
    5ff4:	0003      	movs	r3, r0
    5ff6:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    5ff8:	4b9a      	ldr	r3, [pc, #616]	; (6264 <udd_ep_run+0x2c4>)
    5ffa:	4798      	blx	r3
    5ffc:	0003      	movs	r3, r0
    5ffe:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    6000:	69bb      	ldr	r3, [r7, #24]
    6002:	7c9b      	ldrb	r3, [r3, #18]
    6004:	2201      	movs	r2, #1
    6006:	4013      	ands	r3, r2
    6008:	b2db      	uxtb	r3, r3
    600a:	2b00      	cmp	r3, #0
    600c:	d005      	beq.n	601a <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    600e:	697b      	ldr	r3, [r7, #20]
    6010:	0018      	movs	r0, r3
    6012:	4b95      	ldr	r3, [pc, #596]	; (6268 <udd_ep_run+0x2c8>)
    6014:	4798      	blx	r3
		return false; /* Job already on going */
    6016:	2300      	movs	r3, #0
    6018:	e11b      	b.n	6252 <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    601a:	69bb      	ldr	r3, [r7, #24]
    601c:	7c9a      	ldrb	r2, [r3, #18]
    601e:	2101      	movs	r1, #1
    6020:	430a      	orrs	r2, r1
    6022:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    6024:	697b      	ldr	r3, [r7, #20]
    6026:	0018      	movs	r0, r3
    6028:	4b8f      	ldr	r3, [pc, #572]	; (6268 <udd_ep_run+0x2c8>)
    602a:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    602c:	69bb      	ldr	r3, [r7, #24]
    602e:	68ba      	ldr	r2, [r7, #8]
    6030:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    6032:	69bb      	ldr	r3, [r7, #24]
    6034:	687a      	ldr	r2, [r7, #4]
    6036:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    6038:	69bb      	ldr	r3, [r7, #24]
    603a:	2200      	movs	r2, #0
    603c:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    603e:	69bb      	ldr	r3, [r7, #24]
    6040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6042:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    6044:	69bb      	ldr	r3, [r7, #24]
    6046:	220e      	movs	r2, #14
    6048:	18ba      	adds	r2, r7, r2
    604a:	7812      	ldrb	r2, [r2, #0]
    604c:	2101      	movs	r1, #1
    604e:	400a      	ands	r2, r1
    6050:	1890      	adds	r0, r2, r2
    6052:	7c9a      	ldrb	r2, [r3, #18]
    6054:	2102      	movs	r1, #2
    6056:	438a      	bics	r2, r1
    6058:	1c11      	adds	r1, r2, #0
    605a:	1c02      	adds	r2, r0, #0
    605c:	430a      	orrs	r2, r1
    605e:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    6060:	69bb      	ldr	r3, [r7, #24]
    6062:	7c9a      	ldrb	r2, [r3, #18]
    6064:	2104      	movs	r1, #4
    6066:	438a      	bics	r2, r1
    6068:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    606a:	230f      	movs	r3, #15
    606c:	18fb      	adds	r3, r7, r3
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	b25b      	sxtb	r3, r3
    6072:	2b00      	cmp	r3, #0
    6074:	db00      	blt.n	6078 <udd_ep_run+0xd8>
    6076:	e078      	b.n	616a <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    6078:	69bb      	ldr	r3, [r7, #24]
    607a:	689b      	ldr	r3, [r3, #8]
    607c:	2b00      	cmp	r3, #0
    607e:	d03f      	beq.n	6100 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    6080:	69bb      	ldr	r3, [r7, #24]
    6082:	689a      	ldr	r2, [r3, #8]
    6084:	231e      	movs	r3, #30
    6086:	18fb      	adds	r3, r7, r3
    6088:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    608a:	231e      	movs	r3, #30
    608c:	18fb      	adds	r3, r7, r3
    608e:	881b      	ldrh	r3, [r3, #0]
    6090:	4a76      	ldr	r2, [pc, #472]	; (626c <udd_ep_run+0x2cc>)
    6092:	4293      	cmp	r3, r2
    6094:	d90d      	bls.n	60b2 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    6096:	69bb      	ldr	r3, [r7, #24]
    6098:	8a1b      	ldrh	r3, [r3, #16]
    609a:	0019      	movs	r1, r3
    609c:	4a73      	ldr	r2, [pc, #460]	; (626c <udd_ep_run+0x2cc>)
    609e:	4b74      	ldr	r3, [pc, #464]	; (6270 <udd_ep_run+0x2d0>)
    60a0:	0010      	movs	r0, r2
    60a2:	4798      	blx	r3
    60a4:	000b      	movs	r3, r1

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    60a6:	b29a      	uxth	r2, r3
    60a8:	231e      	movs	r3, #30
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	496f      	ldr	r1, [pc, #444]	; (626c <udd_ep_run+0x2cc>)
    60ae:	1a8a      	subs	r2, r1, r2
    60b0:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    60b2:	69bb      	ldr	r3, [r7, #24]
    60b4:	7c9b      	ldrb	r3, [r3, #18]
    60b6:	2202      	movs	r2, #2
    60b8:	4013      	ands	r3, r2
    60ba:	b2db      	uxtb	r3, r3
    60bc:	2b00      	cmp	r3, #0
    60be:	d00d      	beq.n	60dc <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    60c0:	69bb      	ldr	r3, [r7, #24]
    60c2:	8a19      	ldrh	r1, [r3, #16]
    60c4:	231e      	movs	r3, #30
    60c6:	18fb      	adds	r3, r7, r3
    60c8:	881a      	ldrh	r2, [r3, #0]
    60ca:	4b6a      	ldr	r3, [pc, #424]	; (6274 <udd_ep_run+0x2d4>)
    60cc:	0010      	movs	r0, r2
    60ce:	4798      	blx	r3
    60d0:	000b      	movs	r3, r1
    60d2:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    60d4:	2b00      	cmp	r3, #0
    60d6:	d101      	bne.n	60dc <udd_ep_run+0x13c>
    60d8:	2301      	movs	r3, #1
    60da:	e000      	b.n	60de <udd_ep_run+0x13e>
    60dc:	2300      	movs	r3, #0
    60de:	b2db      	uxtb	r3, r3
    60e0:	1c1a      	adds	r2, r3, #0
    60e2:	2301      	movs	r3, #1
    60e4:	4013      	ands	r3, r2
    60e6:	b2da      	uxtb	r2, r3
    60e8:	69bb      	ldr	r3, [r7, #24]
    60ea:	2101      	movs	r1, #1
    60ec:	400a      	ands	r2, r1
    60ee:	1890      	adds	r0, r2, r2
    60f0:	7c9a      	ldrb	r2, [r3, #18]
    60f2:	2102      	movs	r1, #2
    60f4:	438a      	bics	r2, r1
    60f6:	1c11      	adds	r1, r2, #0
    60f8:	1c02      	adds	r2, r0, #0
    60fa:	430a      	orrs	r2, r1
    60fc:	749a      	strb	r2, [r3, #18]
    60fe:	e023      	b.n	6148 <udd_ep_run+0x1a8>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    6100:	69bb      	ldr	r3, [r7, #24]
    6102:	7c9b      	ldrb	r3, [r3, #18]
    6104:	2202      	movs	r2, #2
    6106:	4013      	ands	r3, r2
    6108:	b2db      	uxtb	r3, r3
    610a:	2b00      	cmp	r3, #0
    610c:	d009      	beq.n	6122 <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    610e:	69bb      	ldr	r3, [r7, #24]
    6110:	7c9a      	ldrb	r2, [r3, #18]
    6112:	2102      	movs	r1, #2
    6114:	438a      	bics	r2, r1
    6116:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    6118:	231e      	movs	r3, #30
    611a:	18fb      	adds	r3, r7, r3
    611c:	2200      	movs	r2, #0
    611e:	801a      	strh	r2, [r3, #0]
    6120:	e012      	b.n	6148 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    6122:	69bb      	ldr	r3, [r7, #24]
    6124:	7c9a      	ldrb	r2, [r3, #18]
    6126:	2101      	movs	r1, #1
    6128:	438a      	bics	r2, r1
    612a:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    612c:	69bb      	ldr	r3, [r7, #24]
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2b00      	cmp	r3, #0
    6132:	d007      	beq.n	6144 <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    6134:	69bb      	ldr	r3, [r7, #24]
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	220f      	movs	r2, #15
    613a:	18ba      	adds	r2, r7, r2
    613c:	7812      	ldrb	r2, [r2, #0]
    613e:	2100      	movs	r1, #0
    6140:	2000      	movs	r0, #0
    6142:	4798      	blx	r3
			}
			return true;
    6144:	2301      	movs	r3, #1
    6146:	e084      	b.n	6252 <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    6148:	69bb      	ldr	r3, [r7, #24]
    614a:	685a      	ldr	r2, [r3, #4]
    614c:	231e      	movs	r3, #30
    614e:	18fb      	adds	r3, r7, r3
    6150:	881c      	ldrh	r4, [r3, #0]
    6152:	231d      	movs	r3, #29
    6154:	18fb      	adds	r3, r7, r3
    6156:	7819      	ldrb	r1, [r3, #0]
    6158:	4847      	ldr	r0, [pc, #284]	; (6278 <udd_ep_run+0x2d8>)
    615a:	0023      	movs	r3, r4
    615c:	4c47      	ldr	r4, [pc, #284]	; (627c <udd_ep_run+0x2dc>)
    615e:	47a0      	blx	r4
    6160:	0003      	movs	r3, r0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    6162:	425a      	negs	r2, r3
    6164:	4153      	adcs	r3, r2
    6166:	b2db      	uxtb	r3, r3
    6168:	e073      	b.n	6252 <udd_ep_run+0x2b2>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    616a:	69bb      	ldr	r3, [r7, #24]
    616c:	689b      	ldr	r3, [r3, #8]
    616e:	2b00      	cmp	r3, #0
    6170:	d05d      	beq.n	622e <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    6172:	69bb      	ldr	r3, [r7, #24]
    6174:	689a      	ldr	r2, [r3, #8]
    6176:	231e      	movs	r3, #30
    6178:	18fb      	adds	r3, r7, r3
    617a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    617c:	231e      	movs	r3, #30
    617e:	18fb      	adds	r3, r7, r3
    6180:	881b      	ldrh	r3, [r3, #0]
    6182:	4a3a      	ldr	r2, [pc, #232]	; (626c <udd_ep_run+0x2cc>)
    6184:	4293      	cmp	r3, r2
    6186:	d90e      	bls.n	61a6 <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    6188:	69bb      	ldr	r3, [r7, #24]
    618a:	8a1b      	ldrh	r3, [r3, #16]
    618c:	0019      	movs	r1, r3
    618e:	4a37      	ldr	r2, [pc, #220]	; (626c <udd_ep_run+0x2cc>)
    6190:	4b37      	ldr	r3, [pc, #220]	; (6270 <udd_ep_run+0x2d0>)
    6192:	0010      	movs	r0, r2
    6194:	4798      	blx	r3
    6196:	000b      	movs	r3, r1
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    6198:	b29a      	uxth	r2, r3
    619a:	231e      	movs	r3, #30
    619c:	18fb      	adds	r3, r7, r3
    619e:	4933      	ldr	r1, [pc, #204]	; (626c <udd_ep_run+0x2cc>)
    61a0:	1a8a      	subs	r2, r1, r2
    61a2:	801a      	strh	r2, [r3, #0]
    61a4:	e010      	b.n	61c8 <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    61a6:	69bb      	ldr	r3, [r7, #24]
    61a8:	8a19      	ldrh	r1, [r3, #16]
    61aa:	231e      	movs	r3, #30
    61ac:	18fb      	adds	r3, r7, r3
    61ae:	881a      	ldrh	r2, [r3, #0]
    61b0:	4b30      	ldr	r3, [pc, #192]	; (6274 <udd_ep_run+0x2d4>)
    61b2:	0010      	movs	r0, r2
    61b4:	4798      	blx	r3
    61b6:	000b      	movs	r3, r1
    61b8:	b29a      	uxth	r2, r3
    61ba:	231e      	movs	r3, #30
    61bc:	18fb      	adds	r3, r7, r3
    61be:	211e      	movs	r1, #30
    61c0:	1879      	adds	r1, r7, r1
    61c2:	8809      	ldrh	r1, [r1, #0]
    61c4:	1a8a      	subs	r2, r1, r2
    61c6:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    61c8:	69bb      	ldr	r3, [r7, #24]
    61ca:	8a1b      	ldrh	r3, [r3, #16]
    61cc:	221e      	movs	r2, #30
    61ce:	18ba      	adds	r2, r7, r2
    61d0:	8812      	ldrh	r2, [r2, #0]
    61d2:	429a      	cmp	r2, r3
    61d4:	d21a      	bcs.n	620c <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    61d6:	69bb      	ldr	r3, [r7, #24]
    61d8:	7c9a      	ldrb	r2, [r3, #18]
    61da:	2104      	movs	r1, #4
    61dc:	430a      	orrs	r2, r1
    61de:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    61e0:	231d      	movs	r3, #29
    61e2:	18fb      	adds	r3, r7, r3
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	3b01      	subs	r3, #1
    61e8:	019a      	lsls	r2, r3, #6
    61ea:	4b25      	ldr	r3, [pc, #148]	; (6280 <udd_ep_run+0x2e0>)
    61ec:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    61ee:	69bb      	ldr	r3, [r7, #24]
    61f0:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    61f2:	001c      	movs	r4, r3
    61f4:	231d      	movs	r3, #29
    61f6:	18fb      	adds	r3, r7, r3
    61f8:	7819      	ldrb	r1, [r3, #0]
    61fa:	481f      	ldr	r0, [pc, #124]	; (6278 <udd_ep_run+0x2d8>)
    61fc:	0023      	movs	r3, r4
    61fe:	4c21      	ldr	r4, [pc, #132]	; (6284 <udd_ep_run+0x2e4>)
    6200:	47a0      	blx	r4
    6202:	0003      	movs	r3, r0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    6204:	425a      	negs	r2, r3
    6206:	4153      	adcs	r3, r2
    6208:	b2db      	uxtb	r3, r3
    620a:	e022      	b.n	6252 <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    620c:	69bb      	ldr	r3, [r7, #24]
    620e:	685a      	ldr	r2, [r3, #4]
    6210:	231e      	movs	r3, #30
    6212:	18fb      	adds	r3, r7, r3
    6214:	881c      	ldrh	r4, [r3, #0]
    6216:	231d      	movs	r3, #29
    6218:	18fb      	adds	r3, r7, r3
    621a:	7819      	ldrb	r1, [r3, #0]
    621c:	4816      	ldr	r0, [pc, #88]	; (6278 <udd_ep_run+0x2d8>)
    621e:	0023      	movs	r3, r4
    6220:	4c18      	ldr	r4, [pc, #96]	; (6284 <udd_ep_run+0x2e4>)
    6222:	47a0      	blx	r4
    6224:	0003      	movs	r3, r0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    6226:	425a      	negs	r2, r3
    6228:	4153      	adcs	r3, r2
    622a:	b2db      	uxtb	r3, r3
    622c:	e011      	b.n	6252 <udd_ep_run+0x2b2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    622e:	69bb      	ldr	r3, [r7, #24]
    6230:	7c9a      	ldrb	r2, [r3, #18]
    6232:	2101      	movs	r1, #1
    6234:	438a      	bics	r2, r1
    6236:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    6238:	69bb      	ldr	r3, [r7, #24]
    623a:	681b      	ldr	r3, [r3, #0]
    623c:	2b00      	cmp	r3, #0
    623e:	d007      	beq.n	6250 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    6240:	69bb      	ldr	r3, [r7, #24]
    6242:	681b      	ldr	r3, [r3, #0]
    6244:	220f      	movs	r2, #15
    6246:	18ba      	adds	r2, r7, r2
    6248:	7812      	ldrb	r2, [r2, #0]
    624a:	2100      	movs	r1, #0
    624c:	2000      	movs	r0, #0
    624e:	4798      	blx	r3
			}
			return true;
    6250:	2301      	movs	r3, #1
		}
	}
}
    6252:	0018      	movs	r0, r3
    6254:	46bd      	mov	sp, r7
    6256:	b009      	add	sp, #36	; 0x24
    6258:	bd90      	pop	{r4, r7, pc}
    625a:	46c0      	nop			; (mov r8, r8)
    625c:	00005e71 	.word	0x00005e71
    6260:	000057c9 	.word	0x000057c9
    6264:	00005445 	.word	0x00005445
    6268:	0000548d 	.word	0x0000548d
    626c:	00001fff 	.word	0x00001fff
    6270:	0000906d 	.word	0x0000906d
    6274:	00008e99 	.word	0x00008e99
    6278:	2000037c 	.word	0x2000037c
    627c:	00007eb5 	.word	0x00007eb5
    6280:	2000033c 	.word	0x2000033c
    6284:	00007f69 	.word	0x00007f69

00006288 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    6288:	b580      	push	{r7, lr}
    628a:	b082      	sub	sp, #8
    628c:	af00      	add	r7, sp, #0
    628e:	0002      	movs	r2, r0
    6290:	1dfb      	adds	r3, r7, #7
    6292:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    6294:	1dfb      	adds	r3, r7, #7
    6296:	781a      	ldrb	r2, [r3, #0]
    6298:	4b04      	ldr	r3, [pc, #16]	; (62ac <udd_set_address+0x24>)
    629a:	0011      	movs	r1, r2
    629c:	0018      	movs	r0, r3
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <udd_set_address+0x28>)
    62a0:	4798      	blx	r3
}
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	46bd      	mov	sp, r7
    62a6:	b002      	add	sp, #8
    62a8:	bd80      	pop	{r7, pc}
    62aa:	46c0      	nop			; (mov r8, r8)
    62ac:	2000037c 	.word	0x2000037c
    62b0:	00005581 	.word	0x00005581

000062b4 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    62b8:	4b03      	ldr	r3, [pc, #12]	; (62c8 <udd_getaddress+0x14>)
    62ba:	0018      	movs	r0, r3
    62bc:	4b03      	ldr	r3, [pc, #12]	; (62cc <udd_getaddress+0x18>)
    62be:	4798      	blx	r3
    62c0:	0003      	movs	r3, r0
}
    62c2:	0018      	movs	r0, r3
    62c4:	46bd      	mov	sp, r7
    62c6:	bd80      	pop	{r7, pc}
    62c8:	2000037c 	.word	0x2000037c
    62cc:	00005565 	.word	0x00005565

000062d0 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    62d0:	b580      	push	{r7, lr}
    62d2:	b082      	sub	sp, #8
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	000a      	movs	r2, r1
    62da:	1cbb      	adds	r3, r7, #2
    62dc:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    62de:	4b05      	ldr	r3, [pc, #20]	; (62f4 <udd_set_setup_payload+0x24>)
    62e0:	687a      	ldr	r2, [r7, #4]
    62e2:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    62e4:	4b03      	ldr	r3, [pc, #12]	; (62f4 <udd_set_setup_payload+0x24>)
    62e6:	1cba      	adds	r2, r7, #2
    62e8:	8812      	ldrh	r2, [r2, #0]
    62ea:	819a      	strh	r2, [r3, #12]
}
    62ec:	46c0      	nop			; (mov r8, r8)
    62ee:	46bd      	mov	sp, r7
    62f0:	b002      	add	sp, #8
    62f2:	bd80      	pop	{r7, pc}
    62f4:	200004e4 	.word	0x200004e4

000062f8 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    62f8:	b580      	push	{r7, lr}
    62fa:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    62fc:	4b17      	ldr	r3, [pc, #92]	; (635c <udd_ctrl_fetch_ram+0x64>)
    62fe:	781a      	ldrb	r2, [r3, #0]
    6300:	4b17      	ldr	r3, [pc, #92]	; (6360 <udd_ctrl_fetch_ram+0x68>)
    6302:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    6304:	4b15      	ldr	r3, [pc, #84]	; (635c <udd_ctrl_fetch_ram+0x64>)
    6306:	785a      	ldrb	r2, [r3, #1]
    6308:	4b15      	ldr	r3, [pc, #84]	; (6360 <udd_ctrl_fetch_ram+0x68>)
    630a:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    630c:	4b13      	ldr	r3, [pc, #76]	; (635c <udd_ctrl_fetch_ram+0x64>)
    630e:	78db      	ldrb	r3, [r3, #3]
    6310:	b29b      	uxth	r3, r3
    6312:	021b      	lsls	r3, r3, #8
    6314:	b29a      	uxth	r2, r3
    6316:	4b11      	ldr	r3, [pc, #68]	; (635c <udd_ctrl_fetch_ram+0x64>)
    6318:	789b      	ldrb	r3, [r3, #2]
    631a:	b29b      	uxth	r3, r3
    631c:	18d3      	adds	r3, r2, r3
    631e:	b29a      	uxth	r2, r3
    6320:	4b0f      	ldr	r3, [pc, #60]	; (6360 <udd_ctrl_fetch_ram+0x68>)
    6322:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    6324:	4b0d      	ldr	r3, [pc, #52]	; (635c <udd_ctrl_fetch_ram+0x64>)
    6326:	795b      	ldrb	r3, [r3, #5]
    6328:	b29b      	uxth	r3, r3
    632a:	021b      	lsls	r3, r3, #8
    632c:	b29a      	uxth	r2, r3
    632e:	4b0b      	ldr	r3, [pc, #44]	; (635c <udd_ctrl_fetch_ram+0x64>)
    6330:	791b      	ldrb	r3, [r3, #4]
    6332:	b29b      	uxth	r3, r3
    6334:	18d3      	adds	r3, r2, r3
    6336:	b29a      	uxth	r2, r3
    6338:	4b09      	ldr	r3, [pc, #36]	; (6360 <udd_ctrl_fetch_ram+0x68>)
    633a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    633c:	4b07      	ldr	r3, [pc, #28]	; (635c <udd_ctrl_fetch_ram+0x64>)
    633e:	79db      	ldrb	r3, [r3, #7]
    6340:	b29b      	uxth	r3, r3
    6342:	021b      	lsls	r3, r3, #8
    6344:	b29a      	uxth	r2, r3
    6346:	4b05      	ldr	r3, [pc, #20]	; (635c <udd_ctrl_fetch_ram+0x64>)
    6348:	799b      	ldrb	r3, [r3, #6]
    634a:	b29b      	uxth	r3, r3
    634c:	18d3      	adds	r3, r2, r3
    634e:	b29a      	uxth	r2, r3
    6350:	4b03      	ldr	r3, [pc, #12]	; (6360 <udd_ctrl_fetch_ram+0x68>)
    6352:	80da      	strh	r2, [r3, #6]
}
    6354:	46c0      	nop			; (mov r8, r8)
    6356:	46bd      	mov	sp, r7
    6358:	bd80      	pop	{r7, pc}
    635a:	46c0      	nop			; (mov r8, r8)
    635c:	200004fc 	.word	0x200004fc
    6360:	200004e4 	.word	0x200004e4

00006364 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    6364:	b5b0      	push	{r4, r5, r7, lr}
    6366:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    6368:	4b09      	ldr	r3, [pc, #36]	; (6390 <udd_ctrl_send_zlp_in+0x2c>)
    636a:	2203      	movs	r2, #3
    636c:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    636e:	4a09      	ldr	r2, [pc, #36]	; (6394 <udd_ctrl_send_zlp_in+0x30>)
    6370:	4b09      	ldr	r3, [pc, #36]	; (6398 <udd_ctrl_send_zlp_in+0x34>)
    6372:	0011      	movs	r1, r2
    6374:	0018      	movs	r0, r3
    6376:	4b09      	ldr	r3, [pc, #36]	; (639c <udd_ctrl_send_zlp_in+0x38>)
    6378:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    637a:	4b09      	ldr	r3, [pc, #36]	; (63a0 <udd_ctrl_send_zlp_in+0x3c>)
    637c:	689a      	ldr	r2, [r3, #8]
    637e:	4806      	ldr	r0, [pc, #24]	; (6398 <udd_ctrl_send_zlp_in+0x34>)
    6380:	2300      	movs	r3, #0
    6382:	2100      	movs	r1, #0
    6384:	4c07      	ldr	r4, [pc, #28]	; (63a4 <udd_ctrl_send_zlp_in+0x40>)
    6386:	47a0      	blx	r4
}
    6388:	46c0      	nop			; (mov r8, r8)
    638a:	46bd      	mov	sp, r7
    638c:	bdb0      	pop	{r4, r5, r7, pc}
    638e:	46c0      	nop			; (mov r8, r8)
    6390:	200001e8 	.word	0x200001e8
    6394:	200004fc 	.word	0x200004fc
    6398:	2000037c 	.word	0x2000037c
    639c:	00008019 	.word	0x00008019
    63a0:	200004e4 	.word	0x200004e4
    63a4:	00007eb5 	.word	0x00007eb5

000063a8 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    63a8:	b590      	push	{r4, r7, lr}
    63aa:	b083      	sub	sp, #12
    63ac:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    63ae:	4b30      	ldr	r3, [pc, #192]	; (6470 <udd_ctrl_in_sent+0xc8>)
    63b0:	8999      	ldrh	r1, [r3, #12]
    63b2:	4b30      	ldr	r3, [pc, #192]	; (6474 <udd_ctrl_in_sent+0xcc>)
    63b4:	881a      	ldrh	r2, [r3, #0]
    63b6:	1dbb      	adds	r3, r7, #6
    63b8:	1a8a      	subs	r2, r1, r2
    63ba:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    63bc:	1dbb      	adds	r3, r7, #6
    63be:	881b      	ldrh	r3, [r3, #0]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d130      	bne.n	6426 <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    63c4:	4b2c      	ldr	r3, [pc, #176]	; (6478 <udd_ctrl_in_sent+0xd0>)
    63c6:	881a      	ldrh	r2, [r3, #0]
    63c8:	4b2a      	ldr	r3, [pc, #168]	; (6474 <udd_ctrl_in_sent+0xcc>)
    63ca:	881b      	ldrh	r3, [r3, #0]
    63cc:	18d3      	adds	r3, r2, r3
    63ce:	b29a      	uxth	r2, r3
    63d0:	4b29      	ldr	r3, [pc, #164]	; (6478 <udd_ctrl_in_sent+0xd0>)
    63d2:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    63d4:	4b26      	ldr	r3, [pc, #152]	; (6470 <udd_ctrl_in_sent+0xc8>)
    63d6:	88da      	ldrh	r2, [r3, #6]
    63d8:	4b27      	ldr	r3, [pc, #156]	; (6478 <udd_ctrl_in_sent+0xd0>)
    63da:	881b      	ldrh	r3, [r3, #0]
    63dc:	429a      	cmp	r2, r3
    63de:	d003      	beq.n	63e8 <udd_ctrl_in_sent+0x40>
    63e0:	4b26      	ldr	r3, [pc, #152]	; (647c <udd_ctrl_in_sent+0xd4>)
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d009      	beq.n	63fc <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    63e8:	4b25      	ldr	r3, [pc, #148]	; (6480 <udd_ctrl_in_sent+0xd8>)
    63ea:	2204      	movs	r2, #4
    63ec:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    63ee:	4a25      	ldr	r2, [pc, #148]	; (6484 <udd_ctrl_in_sent+0xdc>)
    63f0:	4b25      	ldr	r3, [pc, #148]	; (6488 <udd_ctrl_in_sent+0xe0>)
    63f2:	0011      	movs	r1, r2
    63f4:	0018      	movs	r0, r3
    63f6:	4b25      	ldr	r3, [pc, #148]	; (648c <udd_ctrl_in_sent+0xe4>)
    63f8:	4798      	blx	r3
			return;
    63fa:	e035      	b.n	6468 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    63fc:	4b1c      	ldr	r3, [pc, #112]	; (6470 <udd_ctrl_in_sent+0xc8>)
    63fe:	695b      	ldr	r3, [r3, #20]
    6400:	2b00      	cmp	r3, #0
    6402:	d010      	beq.n	6426 <udd_ctrl_in_sent+0x7e>
    6404:	4b1a      	ldr	r3, [pc, #104]	; (6470 <udd_ctrl_in_sent+0xc8>)
    6406:	695b      	ldr	r3, [r3, #20]
    6408:	4798      	blx	r3
    640a:	0003      	movs	r3, r0
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4053      	eors	r3, r2
    6412:	b2db      	uxtb	r3, r3
    6414:	2b00      	cmp	r3, #0
    6416:	d106      	bne.n	6426 <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    6418:	4b16      	ldr	r3, [pc, #88]	; (6474 <udd_ctrl_in_sent+0xcc>)
    641a:	2200      	movs	r2, #0
    641c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    641e:	1dbb      	adds	r3, r7, #6
    6420:	4a13      	ldr	r2, [pc, #76]	; (6470 <udd_ctrl_in_sent+0xc8>)
    6422:	8992      	ldrh	r2, [r2, #12]
    6424:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    6426:	1dbb      	adds	r3, r7, #6
    6428:	881b      	ldrh	r3, [r3, #0]
    642a:	2b07      	cmp	r3, #7
    642c:	d906      	bls.n	643c <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    642e:	1dbb      	adds	r3, r7, #6
    6430:	2208      	movs	r2, #8
    6432:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    6434:	4b11      	ldr	r3, [pc, #68]	; (647c <udd_ctrl_in_sent+0xd4>)
    6436:	2200      	movs	r2, #0
    6438:	701a      	strb	r2, [r3, #0]
    643a:	e002      	b.n	6442 <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    643c:	4b0f      	ldr	r3, [pc, #60]	; (647c <udd_ctrl_in_sent+0xd4>)
    643e:	2201      	movs	r2, #1
    6440:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    6442:	4b0b      	ldr	r3, [pc, #44]	; (6470 <udd_ctrl_in_sent+0xc8>)
    6444:	689b      	ldr	r3, [r3, #8]
    6446:	4a0b      	ldr	r2, [pc, #44]	; (6474 <udd_ctrl_in_sent+0xcc>)
    6448:	8812      	ldrh	r2, [r2, #0]
    644a:	189a      	adds	r2, r3, r2
    644c:	1dbb      	adds	r3, r7, #6
    644e:	881b      	ldrh	r3, [r3, #0]
    6450:	480d      	ldr	r0, [pc, #52]	; (6488 <udd_ctrl_in_sent+0xe0>)
    6452:	2100      	movs	r1, #0
    6454:	4c0e      	ldr	r4, [pc, #56]	; (6490 <udd_ctrl_in_sent+0xe8>)
    6456:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    6458:	4b06      	ldr	r3, [pc, #24]	; (6474 <udd_ctrl_in_sent+0xcc>)
    645a:	881a      	ldrh	r2, [r3, #0]
    645c:	1dbb      	adds	r3, r7, #6
    645e:	881b      	ldrh	r3, [r3, #0]
    6460:	18d3      	adds	r3, r2, r3
    6462:	b29a      	uxth	r2, r3
    6464:	4b03      	ldr	r3, [pc, #12]	; (6474 <udd_ctrl_in_sent+0xcc>)
    6466:	801a      	strh	r2, [r3, #0]
}
    6468:	46bd      	mov	sp, r7
    646a:	b003      	add	sp, #12
    646c:	bd90      	pop	{r4, r7, pc}
    646e:	46c0      	nop			; (mov r8, r8)
    6470:	200004e4 	.word	0x200004e4
    6474:	200001ec 	.word	0x200001ec
    6478:	200001ea 	.word	0x200001ea
    647c:	20000219 	.word	0x20000219
    6480:	200001e8 	.word	0x200001e8
    6484:	200004fc 	.word	0x200004fc
    6488:	2000037c 	.word	0x2000037c
    648c:	00008019 	.word	0x00008019
    6490:	00007eb5 	.word	0x00007eb5

00006494 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    6494:	b590      	push	{r4, r7, lr}
    6496:	b085      	sub	sp, #20
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    64a0:	230e      	movs	r3, #14
    64a2:	18fb      	adds	r3, r7, r3
    64a4:	68ba      	ldr	r2, [r7, #8]
    64a6:	8812      	ldrh	r2, [r2, #0]
    64a8:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    64aa:	4b45      	ldr	r3, [pc, #276]	; (65c0 <udd_ctrl_out_received+0x12c>)
    64ac:	899b      	ldrh	r3, [r3, #12]
    64ae:	001a      	movs	r2, r3
    64b0:	4b44      	ldr	r3, [pc, #272]	; (65c4 <udd_ctrl_out_received+0x130>)
    64b2:	881b      	ldrh	r3, [r3, #0]
    64b4:	0019      	movs	r1, r3
    64b6:	230e      	movs	r3, #14
    64b8:	18fb      	adds	r3, r7, r3
    64ba:	881b      	ldrh	r3, [r3, #0]
    64bc:	18cb      	adds	r3, r1, r3
    64be:	429a      	cmp	r2, r3
    64c0:	da07      	bge.n	64d2 <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    64c2:	4b3f      	ldr	r3, [pc, #252]	; (65c0 <udd_ctrl_out_received+0x12c>)
    64c4:	8999      	ldrh	r1, [r3, #12]
    64c6:	4b3f      	ldr	r3, [pc, #252]	; (65c4 <udd_ctrl_out_received+0x130>)
    64c8:	881a      	ldrh	r2, [r3, #0]
    64ca:	230e      	movs	r3, #14
    64cc:	18fb      	adds	r3, r7, r3
    64ce:	1a8a      	subs	r2, r1, r2
    64d0:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    64d2:	4b3b      	ldr	r3, [pc, #236]	; (65c0 <udd_ctrl_out_received+0x12c>)
    64d4:	689b      	ldr	r3, [r3, #8]
    64d6:	4a3b      	ldr	r2, [pc, #236]	; (65c4 <udd_ctrl_out_received+0x130>)
    64d8:	8812      	ldrh	r2, [r2, #0]
    64da:	1898      	adds	r0, r3, r2
    64dc:	230e      	movs	r3, #14
    64de:	18fb      	adds	r3, r7, r3
    64e0:	881a      	ldrh	r2, [r3, #0]
    64e2:	4b39      	ldr	r3, [pc, #228]	; (65c8 <udd_ctrl_out_received+0x134>)
    64e4:	0019      	movs	r1, r3
    64e6:	4b39      	ldr	r3, [pc, #228]	; (65cc <udd_ctrl_out_received+0x138>)
    64e8:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    64ea:	4b36      	ldr	r3, [pc, #216]	; (65c4 <udd_ctrl_out_received+0x130>)
    64ec:	881a      	ldrh	r2, [r3, #0]
    64ee:	230e      	movs	r3, #14
    64f0:	18fb      	adds	r3, r7, r3
    64f2:	881b      	ldrh	r3, [r3, #0]
    64f4:	18d3      	adds	r3, r2, r3
    64f6:	b29a      	uxth	r2, r3
    64f8:	4b32      	ldr	r3, [pc, #200]	; (65c4 <udd_ctrl_out_received+0x130>)
    64fa:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    64fc:	230e      	movs	r3, #14
    64fe:	18fb      	adds	r3, r7, r3
    6500:	881b      	ldrh	r3, [r3, #0]
    6502:	2b08      	cmp	r3, #8
    6504:	d10a      	bne.n	651c <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    6506:	4b2e      	ldr	r3, [pc, #184]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6508:	88db      	ldrh	r3, [r3, #6]
    650a:	001a      	movs	r2, r3
    650c:	4b30      	ldr	r3, [pc, #192]	; (65d0 <udd_ctrl_out_received+0x13c>)
    650e:	881b      	ldrh	r3, [r3, #0]
    6510:	0019      	movs	r1, r3
    6512:	4b2c      	ldr	r3, [pc, #176]	; (65c4 <udd_ctrl_out_received+0x130>)
    6514:	881b      	ldrh	r3, [r3, #0]
    6516:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    6518:	429a      	cmp	r2, r3
    651a:	dc1b      	bgt.n	6554 <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    651c:	4b29      	ldr	r3, [pc, #164]	; (65c4 <udd_ctrl_out_received+0x130>)
    651e:	881a      	ldrh	r2, [r3, #0]
    6520:	4b27      	ldr	r3, [pc, #156]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6522:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    6524:	4b26      	ldr	r3, [pc, #152]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6526:	695b      	ldr	r3, [r3, #20]
    6528:	2b00      	cmp	r3, #0
    652a:	d010      	beq.n	654e <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    652c:	4b24      	ldr	r3, [pc, #144]	; (65c0 <udd_ctrl_out_received+0x12c>)
    652e:	695b      	ldr	r3, [r3, #20]
    6530:	4798      	blx	r3
    6532:	0003      	movs	r3, r0
    6534:	001a      	movs	r2, r3
    6536:	2301      	movs	r3, #1
    6538:	4053      	eors	r3, r2
    653a:	b2db      	uxtb	r3, r3
    653c:	2b00      	cmp	r3, #0
    653e:	d006      	beq.n	654e <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6540:	4b24      	ldr	r3, [pc, #144]	; (65d4 <udd_ctrl_out_received+0x140>)
    6542:	2205      	movs	r2, #5
    6544:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    6546:	2000      	movs	r0, #0
    6548:	4b23      	ldr	r3, [pc, #140]	; (65d8 <udd_ctrl_out_received+0x144>)
    654a:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    654c:	e035      	b.n	65ba <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    654e:	4b23      	ldr	r3, [pc, #140]	; (65dc <udd_ctrl_out_received+0x148>)
    6550:	4798      	blx	r3
		return;
    6552:	e032      	b.n	65ba <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6554:	4b1a      	ldr	r3, [pc, #104]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6556:	899a      	ldrh	r2, [r3, #12]
    6558:	4b1a      	ldr	r3, [pc, #104]	; (65c4 <udd_ctrl_out_received+0x130>)
    655a:	881b      	ldrh	r3, [r3, #0]
    655c:	429a      	cmp	r2, r3
    655e:	d126      	bne.n	65ae <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    6560:	4b17      	ldr	r3, [pc, #92]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6562:	695b      	ldr	r3, [r3, #20]
    6564:	2b00      	cmp	r3, #0
    6566:	d106      	bne.n	6576 <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    6568:	4b1a      	ldr	r3, [pc, #104]	; (65d4 <udd_ctrl_out_received+0x140>)
    656a:	2205      	movs	r2, #5
    656c:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    656e:	2000      	movs	r0, #0
    6570:	4b19      	ldr	r3, [pc, #100]	; (65d8 <udd_ctrl_out_received+0x144>)
    6572:	4798      	blx	r3
			return;
    6574:	e021      	b.n	65ba <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6576:	4b12      	ldr	r3, [pc, #72]	; (65c0 <udd_ctrl_out_received+0x12c>)
    6578:	695b      	ldr	r3, [r3, #20]
    657a:	4798      	blx	r3
    657c:	0003      	movs	r3, r0
    657e:	001a      	movs	r2, r3
    6580:	2301      	movs	r3, #1
    6582:	4053      	eors	r3, r2
    6584:	b2db      	uxtb	r3, r3
    6586:	2b00      	cmp	r3, #0
    6588:	d006      	beq.n	6598 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    658a:	4b12      	ldr	r3, [pc, #72]	; (65d4 <udd_ctrl_out_received+0x140>)
    658c:	2205      	movs	r2, #5
    658e:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6590:	2000      	movs	r0, #0
    6592:	4b11      	ldr	r3, [pc, #68]	; (65d8 <udd_ctrl_out_received+0x144>)
    6594:	4798      	blx	r3
			return;
    6596:	e010      	b.n	65ba <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6598:	4b0d      	ldr	r3, [pc, #52]	; (65d0 <udd_ctrl_out_received+0x13c>)
    659a:	881a      	ldrh	r2, [r3, #0]
    659c:	4b09      	ldr	r3, [pc, #36]	; (65c4 <udd_ctrl_out_received+0x130>)
    659e:	881b      	ldrh	r3, [r3, #0]
    65a0:	18d3      	adds	r3, r2, r3
    65a2:	b29a      	uxth	r2, r3
    65a4:	4b0a      	ldr	r3, [pc, #40]	; (65d0 <udd_ctrl_out_received+0x13c>)
    65a6:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    65a8:	4b06      	ldr	r3, [pc, #24]	; (65c4 <udd_ctrl_out_received+0x130>)
    65aa:	2200      	movs	r2, #0
    65ac:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    65ae:	4a06      	ldr	r2, [pc, #24]	; (65c8 <udd_ctrl_out_received+0x134>)
    65b0:	480b      	ldr	r0, [pc, #44]	; (65e0 <udd_ctrl_out_received+0x14c>)
    65b2:	2308      	movs	r3, #8
    65b4:	2100      	movs	r1, #0
    65b6:	4c0b      	ldr	r4, [pc, #44]	; (65e4 <udd_ctrl_out_received+0x150>)
    65b8:	47a0      	blx	r4
}
    65ba:	46bd      	mov	sp, r7
    65bc:	b005      	add	sp, #20
    65be:	bd90      	pop	{r4, r7, pc}
    65c0:	200004e4 	.word	0x200004e4
    65c4:	200001ec 	.word	0x200001ec
    65c8:	200004fc 	.word	0x200004fc
    65cc:	00009105 	.word	0x00009105
    65d0:	200001ea 	.word	0x200001ea
    65d4:	200001e8 	.word	0x200001e8
    65d8:	00005e9d 	.word	0x00005e9d
    65dc:	00006365 	.word	0x00006365
    65e0:	2000037c 	.word	0x2000037c
    65e4:	00007f69 	.word	0x00007f69

000065e8 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    65e8:	b590      	push	{r4, r7, lr}
    65ea:	b085      	sub	sp, #20
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
    65f0:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    65f2:	683b      	ldr	r3, [r7, #0]
    65f4:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    65f6:	4b29      	ldr	r3, [pc, #164]	; (669c <_usb_ep0_on_setup+0xb4>)
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	2b00      	cmp	r3, #0
    65fc:	d009      	beq.n	6612 <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    65fe:	4b28      	ldr	r3, [pc, #160]	; (66a0 <_usb_ep0_on_setup+0xb8>)
    6600:	691b      	ldr	r3, [r3, #16]
    6602:	2b00      	cmp	r3, #0
    6604:	d002      	beq.n	660c <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    6606:	4b26      	ldr	r3, [pc, #152]	; (66a0 <_usb_ep0_on_setup+0xb8>)
    6608:	691b      	ldr	r3, [r3, #16]
    660a:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    660c:	4b23      	ldr	r3, [pc, #140]	; (669c <_usb_ep0_on_setup+0xb4>)
    660e:	2200      	movs	r2, #0
    6610:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    6612:	68fb      	ldr	r3, [r7, #12]
    6614:	881b      	ldrh	r3, [r3, #0]
    6616:	2b08      	cmp	r3, #8
    6618:	d002      	beq.n	6620 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    661a:	4b22      	ldr	r3, [pc, #136]	; (66a4 <_usb_ep0_on_setup+0xbc>)
    661c:	4798      	blx	r3
		return;
    661e:	e03a      	b.n	6696 <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    6620:	4b21      	ldr	r3, [pc, #132]	; (66a8 <_usb_ep0_on_setup+0xc0>)
    6622:	4798      	blx	r3
		if (false == udc_process_setup()) {
    6624:	4b21      	ldr	r3, [pc, #132]	; (66ac <_usb_ep0_on_setup+0xc4>)
    6626:	4798      	blx	r3
    6628:	0003      	movs	r3, r0
    662a:	001a      	movs	r2, r3
    662c:	2301      	movs	r3, #1
    662e:	4053      	eors	r3, r2
    6630:	b2db      	uxtb	r3, r3
    6632:	2b00      	cmp	r3, #0
    6634:	d002      	beq.n	663c <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    6636:	4b1b      	ldr	r3, [pc, #108]	; (66a4 <_usb_ep0_on_setup+0xbc>)
    6638:	4798      	blx	r3
			return;
    663a:	e02c      	b.n	6696 <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    663c:	4b18      	ldr	r3, [pc, #96]	; (66a0 <_usb_ep0_on_setup+0xb8>)
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	b25b      	sxtb	r3, r3
    6642:	2b00      	cmp	r3, #0
    6644:	da11      	bge.n	666a <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    6646:	4b1a      	ldr	r3, [pc, #104]	; (66b0 <_usb_ep0_on_setup+0xc8>)
    6648:	2200      	movs	r2, #0
    664a:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    664c:	4b19      	ldr	r3, [pc, #100]	; (66b4 <_usb_ep0_on_setup+0xcc>)
    664e:	2200      	movs	r2, #0
    6650:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    6652:	4b12      	ldr	r3, [pc, #72]	; (669c <_usb_ep0_on_setup+0xb4>)
    6654:	2202      	movs	r2, #2
    6656:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6658:	4a17      	ldr	r2, [pc, #92]	; (66b8 <_usb_ep0_on_setup+0xd0>)
    665a:	4818      	ldr	r0, [pc, #96]	; (66bc <_usb_ep0_on_setup+0xd4>)
    665c:	2308      	movs	r3, #8
    665e:	2100      	movs	r1, #0
    6660:	4c17      	ldr	r4, [pc, #92]	; (66c0 <_usb_ep0_on_setup+0xd8>)
    6662:	47a0      	blx	r4
			udd_ctrl_in_sent();
    6664:	4b17      	ldr	r3, [pc, #92]	; (66c4 <_usb_ep0_on_setup+0xdc>)
    6666:	4798      	blx	r3
    6668:	e015      	b.n	6696 <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    666a:	4b0d      	ldr	r3, [pc, #52]	; (66a0 <_usb_ep0_on_setup+0xb8>)
    666c:	88db      	ldrh	r3, [r3, #6]
    666e:	2b00      	cmp	r3, #0
    6670:	d102      	bne.n	6678 <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    6672:	4b15      	ldr	r3, [pc, #84]	; (66c8 <_usb_ep0_on_setup+0xe0>)
    6674:	4798      	blx	r3
				return;
    6676:	e00e      	b.n	6696 <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    6678:	4b0d      	ldr	r3, [pc, #52]	; (66b0 <_usb_ep0_on_setup+0xc8>)
    667a:	2200      	movs	r2, #0
    667c:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    667e:	4b0d      	ldr	r3, [pc, #52]	; (66b4 <_usb_ep0_on_setup+0xcc>)
    6680:	2200      	movs	r2, #0
    6682:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    6684:	4b05      	ldr	r3, [pc, #20]	; (669c <_usb_ep0_on_setup+0xb4>)
    6686:	2201      	movs	r2, #1
    6688:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    668a:	4a0b      	ldr	r2, [pc, #44]	; (66b8 <_usb_ep0_on_setup+0xd0>)
    668c:	480b      	ldr	r0, [pc, #44]	; (66bc <_usb_ep0_on_setup+0xd4>)
    668e:	2308      	movs	r3, #8
    6690:	2100      	movs	r1, #0
    6692:	4c0b      	ldr	r4, [pc, #44]	; (66c0 <_usb_ep0_on_setup+0xd8>)
    6694:	47a0      	blx	r4
			}
		}
	}
}
    6696:	46bd      	mov	sp, r7
    6698:	b005      	add	sp, #20
    669a:	bd90      	pop	{r4, r7, pc}
    669c:	200001e8 	.word	0x200001e8
    66a0:	200004e4 	.word	0x200004e4
    66a4:	00005f6d 	.word	0x00005f6d
    66a8:	000062f9 	.word	0x000062f9
    66ac:	00003d7d 	.word	0x00003d7d
    66b0:	200001ea 	.word	0x200001ea
    66b4:	200001ec 	.word	0x200001ec
    66b8:	200004fc 	.word	0x200004fc
    66bc:	2000037c 	.word	0x2000037c
    66c0:	00007f69 	.word	0x00007f69
    66c4:	000063a9 	.word	0x000063a9
    66c8:	00006365 	.word	0x00006365

000066cc <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b084      	sub	sp, #16
    66d0:	af00      	add	r7, sp, #0
    66d2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    66d8:	4b0a      	ldr	r3, [pc, #40]	; (6704 <udd_ctrl_underflow+0x38>)
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	2b01      	cmp	r3, #1
    66de:	d102      	bne.n	66e6 <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    66e0:	4b09      	ldr	r3, [pc, #36]	; (6708 <udd_ctrl_underflow+0x3c>)
    66e2:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    66e4:	e00a      	b.n	66fc <udd_ctrl_underflow+0x30>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    66e6:	4b07      	ldr	r3, [pc, #28]	; (6704 <udd_ctrl_underflow+0x38>)
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2b04      	cmp	r3, #4
    66ec:	d106      	bne.n	66fc <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    66ee:	68fb      	ldr	r3, [r7, #12]
    66f0:	799a      	ldrb	r2, [r3, #6]
    66f2:	4b06      	ldr	r3, [pc, #24]	; (670c <udd_ctrl_underflow+0x40>)
    66f4:	0011      	movs	r1, r2
    66f6:	0018      	movs	r0, r3
    66f8:	4b05      	ldr	r3, [pc, #20]	; (6710 <udd_ctrl_underflow+0x44>)
    66fa:	4798      	blx	r3
	}
}
    66fc:	46c0      	nop			; (mov r8, r8)
    66fe:	46bd      	mov	sp, r7
    6700:	b004      	add	sp, #16
    6702:	bd80      	pop	{r7, pc}
    6704:	200001e8 	.word	0x200001e8
    6708:	00006365 	.word	0x00006365
    670c:	2000037c 	.word	0x2000037c
    6710:	00007d2d 	.word	0x00007d2d

00006714 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    6714:	b580      	push	{r7, lr}
    6716:	b084      	sub	sp, #16
    6718:	af00      	add	r7, sp, #0
    671a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    6720:	4b0b      	ldr	r3, [pc, #44]	; (6750 <udd_ctrl_overflow+0x3c>)
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	2b02      	cmp	r3, #2
    6726:	d103      	bne.n	6730 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6728:	4b09      	ldr	r3, [pc, #36]	; (6750 <udd_ctrl_overflow+0x3c>)
    672a:	2204      	movs	r2, #4
    672c:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    672e:	e00a      	b.n	6746 <udd_ctrl_overflow+0x32>

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    6730:	4b07      	ldr	r3, [pc, #28]	; (6750 <udd_ctrl_overflow+0x3c>)
    6732:	781b      	ldrb	r3, [r3, #0]
    6734:	2b03      	cmp	r3, #3
    6736:	d106      	bne.n	6746 <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	799a      	ldrb	r2, [r3, #6]
    673c:	4b05      	ldr	r3, [pc, #20]	; (6754 <udd_ctrl_overflow+0x40>)
    673e:	0011      	movs	r1, r2
    6740:	0018      	movs	r0, r3
    6742:	4b05      	ldr	r3, [pc, #20]	; (6758 <udd_ctrl_overflow+0x44>)
    6744:	4798      	blx	r3
	}
}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	46bd      	mov	sp, r7
    674a:	b004      	add	sp, #16
    674c:	bd80      	pop	{r7, pc}
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	200001e8 	.word	0x200001e8
    6754:	2000037c 	.word	0x2000037c
    6758:	00007d2d 	.word	0x00007d2d

0000675c <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    675c:	b580      	push	{r7, lr}
    675e:	b084      	sub	sp, #16
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
    6764:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6766:	683b      	ldr	r3, [r7, #0]
    6768:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    676a:	68fb      	ldr	r3, [r7, #12]
    676c:	799b      	ldrb	r3, [r3, #6]
    676e:	b25b      	sxtb	r3, r3
    6770:	2b00      	cmp	r3, #0
    6772:	da04      	bge.n	677e <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    6774:	683b      	ldr	r3, [r7, #0]
    6776:	0018      	movs	r0, r3
    6778:	4b05      	ldr	r3, [pc, #20]	; (6790 <_usb_ep0_on_tansfer_fail+0x34>)
    677a:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    677c:	e003      	b.n	6786 <_usb_ep0_on_tansfer_fail+0x2a>
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
    677e:	683b      	ldr	r3, [r7, #0]
    6780:	0018      	movs	r0, r3
    6782:	4b04      	ldr	r3, [pc, #16]	; (6794 <_usb_ep0_on_tansfer_fail+0x38>)
    6784:	4798      	blx	r3
	}
}
    6786:	46c0      	nop			; (mov r8, r8)
    6788:	46bd      	mov	sp, r7
    678a:	b004      	add	sp, #16
    678c:	bd80      	pop	{r7, pc}
    678e:	46c0      	nop			; (mov r8, r8)
    6790:	000066cd 	.word	0x000066cd
    6794:	00006715 	.word	0x00006715

00006798 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    6798:	b580      	push	{r7, lr}
    679a:	b082      	sub	sp, #8
    679c:	af00      	add	r7, sp, #0
    679e:	6078      	str	r0, [r7, #4]
    67a0:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    67a2:	4b0f      	ldr	r3, [pc, #60]	; (67e0 <_usb_ep0_on_tansfer_ok+0x48>)
    67a4:	781b      	ldrb	r3, [r3, #0]
    67a6:	2b01      	cmp	r3, #1
    67a8:	d104      	bne.n	67b4 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    67aa:	683b      	ldr	r3, [r7, #0]
    67ac:	0018      	movs	r0, r3
    67ae:	4b0d      	ldr	r3, [pc, #52]	; (67e4 <_usb_ep0_on_tansfer_ok+0x4c>)
    67b0:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    67b2:	e010      	b.n	67d6 <_usb_ep0_on_tansfer_ok+0x3e>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    67b4:	4b0a      	ldr	r3, [pc, #40]	; (67e0 <_usb_ep0_on_tansfer_ok+0x48>)
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	2b02      	cmp	r3, #2
    67ba:	d102      	bne.n	67c2 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    67bc:	4b0a      	ldr	r3, [pc, #40]	; (67e8 <_usb_ep0_on_tansfer_ok+0x50>)
    67be:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    67c0:	e009      	b.n	67d6 <_usb_ep0_on_tansfer_ok+0x3e>
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
			udd_ctrl_in_sent();
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    67c2:	4b0a      	ldr	r3, [pc, #40]	; (67ec <_usb_ep0_on_tansfer_ok+0x54>)
    67c4:	691b      	ldr	r3, [r3, #16]
    67c6:	2b00      	cmp	r3, #0
    67c8:	d002      	beq.n	67d0 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    67ca:	4b08      	ldr	r3, [pc, #32]	; (67ec <_usb_ep0_on_tansfer_ok+0x54>)
    67cc:	691b      	ldr	r3, [r3, #16]
    67ce:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    67d0:	4b03      	ldr	r3, [pc, #12]	; (67e0 <_usb_ep0_on_tansfer_ok+0x48>)
    67d2:	2200      	movs	r2, #0
    67d4:	701a      	strb	r2, [r3, #0]
		}
}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	46bd      	mov	sp, r7
    67da:	b002      	add	sp, #8
    67dc:	bd80      	pop	{r7, pc}
    67de:	46c0      	nop			; (mov r8, r8)
    67e0:	200001e8 	.word	0x200001e8
    67e4:	00006495 	.word	0x00006495
    67e8:	000063a9 	.word	0x000063a9
    67ec:	200004e4 	.word	0x200004e4

000067f0 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    67f0:	b590      	push	{r4, r7, lr}
    67f2:	b085      	sub	sp, #20
    67f4:	af00      	add	r7, sp, #0
    67f6:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    67f8:	230c      	movs	r3, #12
    67fa:	18fb      	adds	r3, r7, r3
    67fc:	0018      	movs	r0, r3
    67fe:	4b21      	ldr	r3, [pc, #132]	; (6884 <udd_ctrl_ep_enable+0x94>)
    6800:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    6802:	230c      	movs	r3, #12
    6804:	18fb      	adds	r3, r7, r3
    6806:	2200      	movs	r2, #0
    6808:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    680a:	230c      	movs	r3, #12
    680c:	18fa      	adds	r2, r7, r3
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	0011      	movs	r1, r2
    6812:	0018      	movs	r0, r3
    6814:	4b1c      	ldr	r3, [pc, #112]	; (6888 <udd_ctrl_ep_enable+0x98>)
    6816:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    6818:	4a1c      	ldr	r2, [pc, #112]	; (688c <udd_ctrl_ep_enable+0x9c>)
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	0011      	movs	r1, r2
    681e:	0018      	movs	r0, r3
    6820:	4b1b      	ldr	r3, [pc, #108]	; (6890 <udd_ctrl_ep_enable+0xa0>)
    6822:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    6824:	4b1b      	ldr	r3, [pc, #108]	; (6894 <udd_ctrl_ep_enable+0xa4>)
    6826:	6878      	ldr	r0, [r7, #4]
    6828:	2202      	movs	r2, #2
    682a:	2100      	movs	r1, #0
    682c:	4c1a      	ldr	r4, [pc, #104]	; (6898 <udd_ctrl_ep_enable+0xa8>)
    682e:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    6830:	4b1a      	ldr	r3, [pc, #104]	; (689c <udd_ctrl_ep_enable+0xac>)
    6832:	6878      	ldr	r0, [r7, #4]
    6834:	2200      	movs	r2, #0
    6836:	2100      	movs	r1, #0
    6838:	4c17      	ldr	r4, [pc, #92]	; (6898 <udd_ctrl_ep_enable+0xa8>)
    683a:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    683c:	4b18      	ldr	r3, [pc, #96]	; (68a0 <udd_ctrl_ep_enable+0xb0>)
    683e:	6878      	ldr	r0, [r7, #4]
    6840:	2201      	movs	r2, #1
    6842:	2100      	movs	r1, #0
    6844:	4c14      	ldr	r4, [pc, #80]	; (6898 <udd_ctrl_ep_enable+0xa8>)
    6846:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	2202      	movs	r2, #2
    684c:	2100      	movs	r1, #0
    684e:	0018      	movs	r0, r3
    6850:	4b14      	ldr	r3, [pc, #80]	; (68a4 <udd_ctrl_ep_enable+0xb4>)
    6852:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	2200      	movs	r2, #0
    6858:	2100      	movs	r1, #0
    685a:	0018      	movs	r0, r3
    685c:	4b11      	ldr	r3, [pc, #68]	; (68a4 <udd_ctrl_ep_enable+0xb4>)
    685e:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	2201      	movs	r2, #1
    6864:	2100      	movs	r1, #0
    6866:	0018      	movs	r0, r3
    6868:	4b0e      	ldr	r3, [pc, #56]	; (68a4 <udd_ctrl_ep_enable+0xb4>)
    686a:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    686c:	687b      	ldr	r3, [r7, #4]
    686e:	2101      	movs	r1, #1
    6870:	0018      	movs	r0, r3
    6872:	4b0d      	ldr	r3, [pc, #52]	; (68a8 <udd_ctrl_ep_enable+0xb8>)
    6874:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    6876:	4b0d      	ldr	r3, [pc, #52]	; (68ac <udd_ctrl_ep_enable+0xbc>)
    6878:	2200      	movs	r2, #0
    687a:	701a      	strb	r2, [r3, #0]
}
    687c:	46c0      	nop			; (mov r8, r8)
    687e:	46bd      	mov	sp, r7
    6880:	b005      	add	sp, #20
    6882:	bd90      	pop	{r4, r7, pc}
    6884:	00007711 	.word	0x00007711
    6888:	00007739 	.word	0x00007739
    688c:	200004fc 	.word	0x200004fc
    6890:	00008019 	.word	0x00008019
    6894:	000065e9 	.word	0x000065e9
    6898:	000072d9 	.word	0x000072d9
    689c:	00006799 	.word	0x00006799
    68a0:	0000675d 	.word	0x0000675d
    68a4:	000073d1 	.word	0x000073d1
    68a8:	000055c5 	.word	0x000055c5
    68ac:	200001e8 	.word	0x200001e8

000068b0 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    68b0:	b580      	push	{r7, lr}
    68b2:	b082      	sub	sp, #8
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
    68b8:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    68ba:	4b09      	ldr	r3, [pc, #36]	; (68e0 <_usb_on_suspend+0x30>)
    68bc:	2104      	movs	r1, #4
    68be:	0018      	movs	r0, r3
    68c0:	4b08      	ldr	r3, [pc, #32]	; (68e4 <_usb_on_suspend+0x34>)
    68c2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    68c4:	4b06      	ldr	r3, [pc, #24]	; (68e0 <_usb_on_suspend+0x30>)
    68c6:	2102      	movs	r1, #2
    68c8:	0018      	movs	r0, r3
    68ca:	4b07      	ldr	r3, [pc, #28]	; (68e8 <_usb_on_suspend+0x38>)
    68cc:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    68ce:	2001      	movs	r0, #1
    68d0:	4b06      	ldr	r3, [pc, #24]	; (68ec <_usb_on_suspend+0x3c>)
    68d2:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    68d4:	4b06      	ldr	r3, [pc, #24]	; (68f0 <_usb_on_suspend+0x40>)
    68d6:	4798      	blx	r3
#endif
}
    68d8:	46c0      	nop			; (mov r8, r8)
    68da:	46bd      	mov	sp, r7
    68dc:	b002      	add	sp, #8
    68de:	bd80      	pop	{r7, pc}
    68e0:	2000037c 	.word	0x2000037c
    68e4:	00007285 	.word	0x00007285
    68e8:	00007229 	.word	0x00007229
    68ec:	00005745 	.word	0x00005745
    68f0:	00008ca1 	.word	0x00008ca1

000068f4 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    68f4:	b580      	push	{r7, lr}
    68f6:	b084      	sub	sp, #16
    68f8:	af00      	add	r7, sp, #0
    68fa:	6078      	str	r0, [r7, #4]
    68fc:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    68fe:	683b      	ldr	r3, [r7, #0]
    6900:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    6902:	4b12      	ldr	r3, [pc, #72]	; (694c <_usb_device_lpm_suspend+0x58>)
    6904:	2106      	movs	r1, #6
    6906:	0018      	movs	r0, r3
    6908:	4b11      	ldr	r3, [pc, #68]	; (6950 <_usb_device_lpm_suspend+0x5c>)
    690a:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    690c:	4b0f      	ldr	r3, [pc, #60]	; (694c <_usb_device_lpm_suspend+0x58>)
    690e:	2104      	movs	r1, #4
    6910:	0018      	movs	r0, r3
    6912:	4b0f      	ldr	r3, [pc, #60]	; (6950 <_usb_device_lpm_suspend+0x5c>)
    6914:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6916:	4b0d      	ldr	r3, [pc, #52]	; (694c <_usb_device_lpm_suspend+0x58>)
    6918:	2102      	movs	r1, #2
    691a:	0018      	movs	r0, r3
    691c:	4b0d      	ldr	r3, [pc, #52]	; (6954 <_usb_device_lpm_suspend+0x60>)
    691e:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    6920:	2002      	movs	r0, #2
    6922:	4b0d      	ldr	r3, [pc, #52]	; (6958 <_usb_device_lpm_suspend+0x64>)
    6924:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    6926:	68fb      	ldr	r3, [r7, #12]
    6928:	681b      	ldr	r3, [r3, #0]
    692a:	2b00      	cmp	r3, #0
    692c:	d001      	beq.n	6932 <_usb_device_lpm_suspend+0x3e>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    692e:	4b0b      	ldr	r3, [pc, #44]	; (695c <_usb_device_lpm_suspend+0x68>)
    6930:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    6932:	68fb      	ldr	r3, [r7, #12]
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	2b00      	cmp	r3, #0
    6938:	d101      	bne.n	693e <_usb_device_lpm_suspend+0x4a>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    693a:	4b09      	ldr	r3, [pc, #36]	; (6960 <_usb_device_lpm_suspend+0x6c>)
    693c:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    693e:	4b09      	ldr	r3, [pc, #36]	; (6964 <_usb_device_lpm_suspend+0x70>)
    6940:	4798      	blx	r3
}
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	46bd      	mov	sp, r7
    6946:	b004      	add	sp, #16
    6948:	bd80      	pop	{r7, pc}
    694a:	46c0      	nop			; (mov r8, r8)
    694c:	2000037c 	.word	0x2000037c
    6950:	00007285 	.word	0x00007285
    6954:	00007229 	.word	0x00007229
    6958:	00005745 	.word	0x00005745
    695c:	00008d4d 	.word	0x00008d4d
    6960:	00008d39 	.word	0x00008d39
    6964:	00008d25 	.word	0x00008d25

00006968 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    6968:	b580      	push	{r7, lr}
    696a:	b082      	sub	sp, #8
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
    6970:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    6972:	4b04      	ldr	r3, [pc, #16]	; (6984 <_usb_on_sof_notify+0x1c>)
    6974:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    6976:	4b04      	ldr	r3, [pc, #16]	; (6988 <_usb_on_sof_notify+0x20>)
    6978:	4798      	blx	r3
#endif
}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	46bd      	mov	sp, r7
    697e:	b002      	add	sp, #8
    6980:	bd80      	pop	{r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	000034b1 	.word	0x000034b1
    6988:	00008cc9 	.word	0x00008cc9

0000698c <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    698c:	b580      	push	{r7, lr}
    698e:	b082      	sub	sp, #8
    6990:	af00      	add	r7, sp, #0
    6992:	6078      	str	r0, [r7, #4]
    6994:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    6996:	4b07      	ldr	r3, [pc, #28]	; (69b4 <_usb_on_bus_reset+0x28>)
    6998:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	2100      	movs	r1, #0
    699e:	0018      	movs	r0, r3
    69a0:	4b05      	ldr	r3, [pc, #20]	; (69b8 <_usb_on_bus_reset+0x2c>)
    69a2:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	0018      	movs	r0, r3
    69a8:	4b04      	ldr	r3, [pc, #16]	; (69bc <_usb_on_bus_reset+0x30>)
    69aa:	4798      	blx	r3
}
    69ac:	46c0      	nop			; (mov r8, r8)
    69ae:	46bd      	mov	sp, r7
    69b0:	b002      	add	sp, #8
    69b2:	bd80      	pop	{r7, pc}
    69b4:	0000343d 	.word	0x0000343d
    69b8:	00005581 	.word	0x00005581
    69bc:	000067f1 	.word	0x000067f1

000069c0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b082      	sub	sp, #8
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
    69c8:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    69ca:	4b10      	ldr	r3, [pc, #64]	; (6a0c <_usb_on_wakeup+0x4c>)
    69cc:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    69ce:	4b10      	ldr	r3, [pc, #64]	; (6a10 <_usb_on_wakeup+0x50>)
    69d0:	2102      	movs	r1, #2
    69d2:	0018      	movs	r0, r3
    69d4:	4b0f      	ldr	r3, [pc, #60]	; (6a14 <_usb_on_wakeup+0x54>)
    69d6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    69d8:	4b0d      	ldr	r3, [pc, #52]	; (6a10 <_usb_on_wakeup+0x50>)
    69da:	2104      	movs	r1, #4
    69dc:	0018      	movs	r0, r3
    69de:	4b0e      	ldr	r3, [pc, #56]	; (6a18 <_usb_on_wakeup+0x58>)
    69e0:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    69e2:	4a0e      	ldr	r2, [pc, #56]	; (6a1c <_usb_on_wakeup+0x5c>)
    69e4:	4b0a      	ldr	r3, [pc, #40]	; (6a10 <_usb_on_wakeup+0x50>)
    69e6:	2106      	movs	r1, #6
    69e8:	0018      	movs	r0, r3
    69ea:	4b0d      	ldr	r3, [pc, #52]	; (6a20 <_usb_on_wakeup+0x60>)
    69ec:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    69ee:	4b08      	ldr	r3, [pc, #32]	; (6a10 <_usb_on_wakeup+0x50>)
    69f0:	2106      	movs	r1, #6
    69f2:	0018      	movs	r0, r3
    69f4:	4b08      	ldr	r3, [pc, #32]	; (6a18 <_usb_on_wakeup+0x58>)
    69f6:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    69f8:	2003      	movs	r0, #3
    69fa:	4b0a      	ldr	r3, [pc, #40]	; (6a24 <_usb_on_wakeup+0x64>)
    69fc:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    69fe:	4b0a      	ldr	r3, [pc, #40]	; (6a28 <_usb_on_wakeup+0x68>)
    6a00:	4798      	blx	r3
#endif
}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	46bd      	mov	sp, r7
    6a06:	b002      	add	sp, #8
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	46c0      	nop			; (mov r8, r8)
    6a0c:	0000570d 	.word	0x0000570d
    6a10:	2000037c 	.word	0x2000037c
    6a14:	00007285 	.word	0x00007285
    6a18:	00007229 	.word	0x00007229
    6a1c:	000068f5 	.word	0x000068f5
    6a20:	000071d9 	.word	0x000071d9
    6a24:	00005745 	.word	0x00005745
    6a28:	00008cb5 	.word	0x00008cb5

00006a2c <udd_detach>:

void udd_detach(void)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    6a30:	4b04      	ldr	r3, [pc, #16]	; (6a44 <udd_detach+0x18>)
    6a32:	0018      	movs	r0, r3
    6a34:	4b04      	ldr	r3, [pc, #16]	; (6a48 <udd_detach+0x1c>)
    6a36:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    6a38:	2001      	movs	r0, #1
    6a3a:	4b04      	ldr	r3, [pc, #16]	; (6a4c <udd_detach+0x20>)
    6a3c:	4798      	blx	r3
}
    6a3e:	46c0      	nop			; (mov r8, r8)
    6a40:	46bd      	mov	sp, r7
    6a42:	bd80      	pop	{r7, pc}
    6a44:	2000037c 	.word	0x2000037c
    6a48:	00005541 	.word	0x00005541
    6a4c:	00005745 	.word	0x00005745

00006a50 <udd_attach>:

void udd_attach(void)
{
    6a50:	b580      	push	{r7, lr}
    6a52:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    6a54:	2003      	movs	r0, #3
    6a56:	4b20      	ldr	r3, [pc, #128]	; (6ad8 <udd_attach+0x88>)
    6a58:	4798      	blx	r3
	usb_device_attach(&usb_device);
    6a5a:	4b20      	ldr	r3, [pc, #128]	; (6adc <udd_attach+0x8c>)
    6a5c:	0018      	movs	r0, r3
    6a5e:	4b20      	ldr	r3, [pc, #128]	; (6ae0 <udd_attach+0x90>)
    6a60:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    6a62:	4a20      	ldr	r2, [pc, #128]	; (6ae4 <udd_attach+0x94>)
    6a64:	4b1d      	ldr	r3, [pc, #116]	; (6adc <udd_attach+0x8c>)
    6a66:	2104      	movs	r1, #4
    6a68:	0018      	movs	r0, r3
    6a6a:	4b1f      	ldr	r3, [pc, #124]	; (6ae8 <udd_attach+0x98>)
    6a6c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    6a6e:	4a1f      	ldr	r2, [pc, #124]	; (6aec <udd_attach+0x9c>)
    6a70:	4b1a      	ldr	r3, [pc, #104]	; (6adc <udd_attach+0x8c>)
    6a72:	2100      	movs	r1, #0
    6a74:	0018      	movs	r0, r3
    6a76:	4b1c      	ldr	r3, [pc, #112]	; (6ae8 <udd_attach+0x98>)
    6a78:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    6a7a:	4a1d      	ldr	r2, [pc, #116]	; (6af0 <udd_attach+0xa0>)
    6a7c:	4b17      	ldr	r3, [pc, #92]	; (6adc <udd_attach+0x8c>)
    6a7e:	2101      	movs	r1, #1
    6a80:	0018      	movs	r0, r3
    6a82:	4b19      	ldr	r3, [pc, #100]	; (6ae8 <udd_attach+0x98>)
    6a84:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    6a86:	4a1b      	ldr	r2, [pc, #108]	; (6af4 <udd_attach+0xa4>)
    6a88:	4b14      	ldr	r3, [pc, #80]	; (6adc <udd_attach+0x8c>)
    6a8a:	2102      	movs	r1, #2
    6a8c:	0018      	movs	r0, r3
    6a8e:	4b16      	ldr	r3, [pc, #88]	; (6ae8 <udd_attach+0x98>)
    6a90:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    6a92:	4b12      	ldr	r3, [pc, #72]	; (6adc <udd_attach+0x8c>)
    6a94:	2104      	movs	r1, #4
    6a96:	0018      	movs	r0, r3
    6a98:	4b17      	ldr	r3, [pc, #92]	; (6af8 <udd_attach+0xa8>)
    6a9a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    6a9c:	4b0f      	ldr	r3, [pc, #60]	; (6adc <udd_attach+0x8c>)
    6a9e:	2100      	movs	r1, #0
    6aa0:	0018      	movs	r0, r3
    6aa2:	4b15      	ldr	r3, [pc, #84]	; (6af8 <udd_attach+0xa8>)
    6aa4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    6aa6:	4b0d      	ldr	r3, [pc, #52]	; (6adc <udd_attach+0x8c>)
    6aa8:	2101      	movs	r1, #1
    6aaa:	0018      	movs	r0, r3
    6aac:	4b12      	ldr	r3, [pc, #72]	; (6af8 <udd_attach+0xa8>)
    6aae:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6ab0:	4b0a      	ldr	r3, [pc, #40]	; (6adc <udd_attach+0x8c>)
    6ab2:	2102      	movs	r1, #2
    6ab4:	0018      	movs	r0, r3
    6ab6:	4b10      	ldr	r3, [pc, #64]	; (6af8 <udd_attach+0xa8>)
    6ab8:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    6aba:	4a10      	ldr	r2, [pc, #64]	; (6afc <udd_attach+0xac>)
    6abc:	4b07      	ldr	r3, [pc, #28]	; (6adc <udd_attach+0x8c>)
    6abe:	2106      	movs	r1, #6
    6ac0:	0018      	movs	r0, r3
    6ac2:	4b09      	ldr	r3, [pc, #36]	; (6ae8 <udd_attach+0x98>)
    6ac4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    6ac6:	4b05      	ldr	r3, [pc, #20]	; (6adc <udd_attach+0x8c>)
    6ac8:	2106      	movs	r1, #6
    6aca:	0018      	movs	r0, r3
    6acc:	4b0a      	ldr	r3, [pc, #40]	; (6af8 <udd_attach+0xa8>)
    6ace:	4798      	blx	r3
#endif
}
    6ad0:	46c0      	nop			; (mov r8, r8)
    6ad2:	46bd      	mov	sp, r7
    6ad4:	bd80      	pop	{r7, pc}
    6ad6:	46c0      	nop			; (mov r8, r8)
    6ad8:	00005745 	.word	0x00005745
    6adc:	2000037c 	.word	0x2000037c
    6ae0:	0000551d 	.word	0x0000551d
    6ae4:	000068b1 	.word	0x000068b1
    6ae8:	000071d9 	.word	0x000071d9
    6aec:	00006969 	.word	0x00006969
    6af0:	0000698d 	.word	0x0000698d
    6af4:	000069c1 	.word	0x000069c1
    6af8:	00007229 	.word	0x00007229
    6afc:	000068f5 	.word	0x000068f5

00006b00 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    6b04:	2100      	movs	r1, #0
    6b06:	200e      	movs	r0, #14
    6b08:	4b09      	ldr	r3, [pc, #36]	; (6b30 <_uhd_vbus_handler+0x30>)
    6b0a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    6b0c:	200e      	movs	r0, #14
    6b0e:	4b09      	ldr	r3, [pc, #36]	; (6b34 <_uhd_vbus_handler+0x34>)
    6b10:	4798      	blx	r3
    6b12:	1e03      	subs	r3, r0, #0
    6b14:	d002      	beq.n	6b1c <_uhd_vbus_handler+0x1c>
		udd_attach();
    6b16:	4b08      	ldr	r3, [pc, #32]	; (6b38 <_uhd_vbus_handler+0x38>)
    6b18:	4798      	blx	r3
    6b1a:	e001      	b.n	6b20 <_uhd_vbus_handler+0x20>
	} else {
		udd_detach();
    6b1c:	4b07      	ldr	r3, [pc, #28]	; (6b3c <_uhd_vbus_handler+0x3c>)
    6b1e:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    6b20:	2100      	movs	r1, #0
    6b22:	200e      	movs	r0, #14
    6b24:	4b06      	ldr	r3, [pc, #24]	; (6b40 <_uhd_vbus_handler+0x40>)
    6b26:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    6b28:	46c0      	nop			; (mov r8, r8)
    6b2a:	46bd      	mov	sp, r7
    6b2c:	bd80      	pop	{r7, pc}
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	00004165 	.word	0x00004165
    6b34:	00005629 	.word	0x00005629
    6b38:	00006a51 	.word	0x00006a51
    6b3c:	00006a2d 	.word	0x00006a2d
    6b40:	0000411d 	.word	0x0000411d

00006b44 <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    6b44:	b580      	push	{r7, lr}
    6b46:	b084      	sub	sp, #16
    6b48:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    6b4a:	1d3b      	adds	r3, r7, #4
    6b4c:	0018      	movs	r0, r3
    6b4e:	4b14      	ldr	r3, [pc, #80]	; (6ba0 <_usb_vbus_config+0x5c>)
    6b50:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    6b52:	1d3b      	adds	r3, r7, #4
    6b54:	220e      	movs	r2, #14
    6b56:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    6b58:	1d3b      	adds	r3, r7, #4
    6b5a:	2200      	movs	r2, #0
    6b5c:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    6b5e:	1d3b      	adds	r3, r7, #4
    6b60:	2200      	movs	r2, #0
    6b62:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    6b64:	1d3b      	adds	r3, r7, #4
    6b66:	2203      	movs	r2, #3
    6b68:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    6b6a:	1d3b      	adds	r3, r7, #4
    6b6c:	2201      	movs	r2, #1
    6b6e:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    6b70:	2100      	movs	r1, #0
    6b72:	200e      	movs	r0, #14
    6b74:	4b0b      	ldr	r3, [pc, #44]	; (6ba4 <_usb_vbus_config+0x60>)
    6b76:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    6b78:	1d3b      	adds	r3, r7, #4
    6b7a:	0019      	movs	r1, r3
    6b7c:	200e      	movs	r0, #14
    6b7e:	4b0a      	ldr	r3, [pc, #40]	; (6ba8 <_usb_vbus_config+0x64>)
    6b80:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    6b82:	4b0a      	ldr	r3, [pc, #40]	; (6bac <_usb_vbus_config+0x68>)
    6b84:	2200      	movs	r2, #0
    6b86:	210e      	movs	r1, #14
    6b88:	0018      	movs	r0, r3
    6b8a:	4b09      	ldr	r3, [pc, #36]	; (6bb0 <_usb_vbus_config+0x6c>)
    6b8c:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    6b8e:	2100      	movs	r1, #0
    6b90:	200e      	movs	r0, #14
    6b92:	4b08      	ldr	r3, [pc, #32]	; (6bb4 <_usb_vbus_config+0x70>)
    6b94:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    6b96:	46c0      	nop			; (mov r8, r8)
    6b98:	46bd      	mov	sp, r7
    6b9a:	b004      	add	sp, #16
    6b9c:	bd80      	pop	{r7, pc}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	000044b9 	.word	0x000044b9
    6ba4:	00004165 	.word	0x00004165
    6ba8:	000044ed 	.word	0x000044ed
    6bac:	00006b01 	.word	0x00006b01
    6bb0:	000040b9 	.word	0x000040b9
    6bb4:	0000411d 	.word	0x0000411d

00006bb8 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    6bb8:	b580      	push	{r7, lr}
    6bba:	b082      	sub	sp, #8
    6bbc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    6bbe:	4b15      	ldr	r3, [pc, #84]	; (6c14 <udd_enable+0x5c>)
    6bc0:	4798      	blx	r3
    6bc2:	0003      	movs	r3, r0
    6bc4:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    6bc6:	003b      	movs	r3, r7
    6bc8:	0018      	movs	r0, r3
    6bca:	4b13      	ldr	r3, [pc, #76]	; (6c18 <udd_enable+0x60>)
    6bcc:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    6bce:	003b      	movs	r3, r7
    6bd0:	2200      	movs	r2, #0
    6bd2:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    6bd4:	003a      	movs	r2, r7
    6bd6:	4911      	ldr	r1, [pc, #68]	; (6c1c <udd_enable+0x64>)
    6bd8:	4b11      	ldr	r3, [pc, #68]	; (6c20 <udd_enable+0x68>)
    6bda:	0018      	movs	r0, r3
    6bdc:	4b11      	ldr	r3, [pc, #68]	; (6c24 <udd_enable+0x6c>)
    6bde:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    6be0:	4b0f      	ldr	r3, [pc, #60]	; (6c20 <udd_enable+0x68>)
    6be2:	0018      	movs	r0, r3
    6be4:	4b10      	ldr	r3, [pc, #64]	; (6c28 <udd_enable+0x70>)
    6be6:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    6be8:	4b10      	ldr	r3, [pc, #64]	; (6c2c <udd_enable+0x74>)
    6bea:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    6bec:	2001      	movs	r0, #1
    6bee:	4b10      	ldr	r3, [pc, #64]	; (6c30 <udd_enable+0x78>)
    6bf0:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    6bf2:	4b10      	ldr	r3, [pc, #64]	; (6c34 <udd_enable+0x7c>)
    6bf4:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    6bf6:	200e      	movs	r0, #14
    6bf8:	4b0f      	ldr	r3, [pc, #60]	; (6c38 <udd_enable+0x80>)
    6bfa:	4798      	blx	r3
    6bfc:	1e03      	subs	r3, r0, #0
    6bfe:	d001      	beq.n	6c04 <udd_enable+0x4c>
		/* USB Attach */
		_uhd_vbus_handler();
    6c00:	4b0e      	ldr	r3, [pc, #56]	; (6c3c <udd_enable+0x84>)
    6c02:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	0018      	movs	r0, r3
    6c08:	4b0d      	ldr	r3, [pc, #52]	; (6c40 <udd_enable+0x88>)
    6c0a:	4798      	blx	r3
}
    6c0c:	46c0      	nop			; (mov r8, r8)
    6c0e:	46bd      	mov	sp, r7
    6c10:	b002      	add	sp, #8
    6c12:	bd80      	pop	{r7, pc}
    6c14:	00005445 	.word	0x00005445
    6c18:	00008649 	.word	0x00008649
    6c1c:	41005000 	.word	0x41005000
    6c20:	2000037c 	.word	0x2000037c
    6c24:	00008671 	.word	0x00008671
    6c28:	000085e1 	.word	0x000085e1
    6c2c:	0000570d 	.word	0x0000570d
    6c30:	00005745 	.word	0x00005745
    6c34:	00006b45 	.word	0x00006b45
    6c38:	00005629 	.word	0x00005629
    6c3c:	00006b01 	.word	0x00006b01
    6c40:	0000548d 	.word	0x0000548d

00006c44 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6c44:	b580      	push	{r7, lr}
    6c46:	b082      	sub	sp, #8
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	2200      	movs	r2, #0
    6c50:	701a      	strb	r2, [r3, #0]
}
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	46bd      	mov	sp, r7
    6c56:	b002      	add	sp, #8
    6c58:	bd80      	pop	{r7, pc}
    6c5a:	46c0      	nop			; (mov r8, r8)

00006c5c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6c5c:	b580      	push	{r7, lr}
    6c5e:	b082      	sub	sp, #8
    6c60:	af00      	add	r7, sp, #0
    6c62:	0002      	movs	r2, r0
    6c64:	6039      	str	r1, [r7, #0]
    6c66:	1dfb      	adds	r3, r7, #7
    6c68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6c6a:	1dfb      	adds	r3, r7, #7
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	2b01      	cmp	r3, #1
    6c70:	d00a      	beq.n	6c88 <system_apb_clock_set_mask+0x2c>
    6c72:	2b02      	cmp	r3, #2
    6c74:	d00f      	beq.n	6c96 <system_apb_clock_set_mask+0x3a>
    6c76:	2b00      	cmp	r3, #0
    6c78:	d114      	bne.n	6ca4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6c7a:	4b0e      	ldr	r3, [pc, #56]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c7c:	4a0d      	ldr	r2, [pc, #52]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c7e:	6991      	ldr	r1, [r2, #24]
    6c80:	683a      	ldr	r2, [r7, #0]
    6c82:	430a      	orrs	r2, r1
    6c84:	619a      	str	r2, [r3, #24]
			break;
    6c86:	e00f      	b.n	6ca8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6c88:	4b0a      	ldr	r3, [pc, #40]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c8a:	4a0a      	ldr	r2, [pc, #40]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c8c:	69d1      	ldr	r1, [r2, #28]
    6c8e:	683a      	ldr	r2, [r7, #0]
    6c90:	430a      	orrs	r2, r1
    6c92:	61da      	str	r2, [r3, #28]
			break;
    6c94:	e008      	b.n	6ca8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6c96:	4b07      	ldr	r3, [pc, #28]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c98:	4a06      	ldr	r2, [pc, #24]	; (6cb4 <system_apb_clock_set_mask+0x58>)
    6c9a:	6a11      	ldr	r1, [r2, #32]
    6c9c:	683a      	ldr	r2, [r7, #0]
    6c9e:	430a      	orrs	r2, r1
    6ca0:	621a      	str	r2, [r3, #32]
			break;
    6ca2:	e001      	b.n	6ca8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6ca4:	2317      	movs	r3, #23
    6ca6:	e000      	b.n	6caa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6ca8:	2300      	movs	r3, #0
}
    6caa:	0018      	movs	r0, r3
    6cac:	46bd      	mov	sp, r7
    6cae:	b002      	add	sp, #8
    6cb0:	bd80      	pop	{r7, pc}
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	40000400 	.word	0x40000400

00006cb8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6cb8:	b580      	push	{r7, lr}
    6cba:	b082      	sub	sp, #8
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	2280      	movs	r2, #128	; 0x80
    6cc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	2200      	movs	r2, #0
    6cca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	2201      	movs	r2, #1
    6cd0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	2200      	movs	r2, #0
    6cd6:	70da      	strb	r2, [r3, #3]
}
    6cd8:	46c0      	nop			; (mov r8, r8)
    6cda:	46bd      	mov	sp, r7
    6cdc:	b002      	add	sp, #8
    6cde:	bd80      	pop	{r7, pc}

00006ce0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    6ce0:	b580      	push	{r7, lr}
    6ce2:	b082      	sub	sp, #8
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	0002      	movs	r2, r0
    6ce8:	1dfb      	adds	r3, r7, #7
    6cea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6cec:	4b06      	ldr	r3, [pc, #24]	; (6d08 <system_interrupt_enable+0x28>)
    6cee:	1dfa      	adds	r2, r7, #7
    6cf0:	7812      	ldrb	r2, [r2, #0]
    6cf2:	0011      	movs	r1, r2
    6cf4:	221f      	movs	r2, #31
    6cf6:	400a      	ands	r2, r1
    6cf8:	2101      	movs	r1, #1
    6cfa:	4091      	lsls	r1, r2
    6cfc:	000a      	movs	r2, r1
    6cfe:	601a      	str	r2, [r3, #0]
}
    6d00:	46c0      	nop			; (mov r8, r8)
    6d02:	46bd      	mov	sp, r7
    6d04:	b002      	add	sp, #8
    6d06:	bd80      	pop	{r7, pc}
    6d08:	e000e100 	.word	0xe000e100

00006d0c <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    6d0c:	b580      	push	{r7, lr}
    6d0e:	b082      	sub	sp, #8
    6d10:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6d12:	4bbc      	ldr	r3, [pc, #752]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6d14:	681b      	ldr	r3, [r3, #0]
    6d16:	681b      	ldr	r3, [r3, #0]
    6d18:	8c1b      	ldrh	r3, [r3, #32]
    6d1a:	b29b      	uxth	r3, r3
    6d1c:	001a      	movs	r2, r3
    6d1e:	4bba      	ldr	r3, [pc, #744]	; (7008 <_usb_host_interrupt_handler+0x2fc>)
    6d20:	0010      	movs	r0, r2
    6d22:	4798      	blx	r3
    6d24:	0003      	movs	r3, r0
    6d26:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	2b1f      	cmp	r3, #31
    6d2c:	d900      	bls.n	6d30 <_usb_host_interrupt_handler+0x24>
    6d2e:	e175      	b.n	701c <_usb_host_interrupt_handler+0x310>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6d30:	4bb4      	ldr	r3, [pc, #720]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6d32:	681b      	ldr	r3, [r3, #0]
    6d34:	681a      	ldr	r2, [r3, #0]
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	3308      	adds	r3, #8
    6d3a:	015b      	lsls	r3, r3, #5
    6d3c:	18d3      	adds	r3, r2, r3
    6d3e:	3307      	adds	r3, #7
    6d40:	781b      	ldrb	r3, [r3, #0]
    6d42:	b2db      	uxtb	r3, r3
    6d44:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6d46:	683b      	ldr	r3, [r7, #0]
    6d48:	2203      	movs	r2, #3
    6d4a:	4013      	ands	r3, r2
    6d4c:	d100      	bne.n	6d50 <_usb_host_interrupt_handler+0x44>
    6d4e:	e088      	b.n	6e62 <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6d50:	2201      	movs	r2, #1
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	409a      	lsls	r2, r3
    6d56:	0013      	movs	r3, r2
    6d58:	43db      	mvns	r3, r3
    6d5a:	001a      	movs	r2, r3
    6d5c:	4bab      	ldr	r3, [pc, #684]	; (700c <_usb_host_interrupt_handler+0x300>)
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	401a      	ands	r2, r3
    6d62:	4baa      	ldr	r3, [pc, #680]	; (700c <_usb_host_interrupt_handler+0x300>)
    6d64:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6d66:	4ba7      	ldr	r3, [pc, #668]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6d68:	681b      	ldr	r3, [r3, #0]
    6d6a:	681a      	ldr	r2, [r3, #0]
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	3308      	adds	r3, #8
    6d70:	015b      	lsls	r3, r3, #5
    6d72:	18d3      	adds	r3, r2, r3
    6d74:	3307      	adds	r3, #7
    6d76:	2203      	movs	r2, #3
    6d78:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6d7a:	4ba2      	ldr	r3, [pc, #648]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6d7c:	681a      	ldr	r2, [r3, #0]
    6d7e:	21ae      	movs	r1, #174	; 0xae
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	18d3      	adds	r3, r2, r3
    6d84:	185b      	adds	r3, r3, r1
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	001a      	movs	r2, r3
    6d8a:	2301      	movs	r3, #1
    6d8c:	4013      	ands	r3, r2
    6d8e:	d068      	beq.n	6e62 <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	b2da      	uxtb	r2, r3
    6d94:	4b9e      	ldr	r3, [pc, #632]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6d96:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6d98:	4b9a      	ldr	r3, [pc, #616]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	681b      	ldr	r3, [r3, #0]
    6d9e:	687a      	ldr	r2, [r7, #4]
    6da0:	3208      	adds	r2, #8
    6da2:	0152      	lsls	r2, r2, #5
    6da4:	5cd3      	ldrb	r3, [r2, r3]
    6da6:	079b      	lsls	r3, r3, #30
    6da8:	0f9b      	lsrs	r3, r3, #30
    6daa:	b2db      	uxtb	r3, r3
    6dac:	2b01      	cmp	r3, #1
    6dae:	d11e      	bne.n	6dee <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6db0:	4a98      	ldr	r2, [pc, #608]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	015b      	lsls	r3, r3, #5
    6db6:	18d3      	adds	r3, r2, r3
    6db8:	685b      	ldr	r3, [r3, #4]
    6dba:	049b      	lsls	r3, r3, #18
    6dbc:	0c9b      	lsrs	r3, r3, #18
    6dbe:	b29b      	uxth	r3, r3
    6dc0:	001a      	movs	r2, r3
    6dc2:	4b93      	ldr	r3, [pc, #588]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6dc4:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6dc6:	4a93      	ldr	r2, [pc, #588]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	015b      	lsls	r3, r3, #5
    6dcc:	18d3      	adds	r3, r2, r3
    6dce:	685b      	ldr	r3, [r3, #4]
    6dd0:	011b      	lsls	r3, r3, #4
    6dd2:	0c9b      	lsrs	r3, r3, #18
    6dd4:	b29b      	uxth	r3, r3
    6dd6:	001a      	movs	r2, r3
    6dd8:	4b8d      	ldr	r3, [pc, #564]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6dda:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6ddc:	4a8d      	ldr	r2, [pc, #564]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	015b      	lsls	r3, r3, #5
    6de2:	18d3      	adds	r3, r2, r3
    6de4:	685a      	ldr	r2, [r3, #4]
    6de6:	0b92      	lsrs	r2, r2, #14
    6de8:	0392      	lsls	r2, r2, #14
    6dea:	605a      	str	r2, [r3, #4]
    6dec:	e02c      	b.n	6e48 <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6dee:	4a89      	ldr	r2, [pc, #548]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	015b      	lsls	r3, r3, #5
    6df4:	18d3      	adds	r3, r2, r3
    6df6:	685b      	ldr	r3, [r3, #4]
    6df8:	011b      	lsls	r3, r3, #4
    6dfa:	0c9b      	lsrs	r3, r3, #18
    6dfc:	b29b      	uxth	r3, r3
    6dfe:	001a      	movs	r2, r3
    6e00:	4b83      	ldr	r3, [pc, #524]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6e02:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6e04:	4a83      	ldr	r2, [pc, #524]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6e06:	687b      	ldr	r3, [r7, #4]
    6e08:	015b      	lsls	r3, r3, #5
    6e0a:	18d3      	adds	r3, r2, r3
    6e0c:	685b      	ldr	r3, [r3, #4]
    6e0e:	049b      	lsls	r3, r3, #18
    6e10:	0c9b      	lsrs	r3, r3, #18
    6e12:	b29b      	uxth	r3, r3
    6e14:	001a      	movs	r2, r3
    6e16:	4b7e      	ldr	r3, [pc, #504]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6e18:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6e1a:	4a7e      	ldr	r2, [pc, #504]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	015b      	lsls	r3, r3, #5
    6e20:	18d3      	adds	r3, r2, r3
    6e22:	685a      	ldr	r2, [r3, #4]
    6e24:	497c      	ldr	r1, [pc, #496]	; (7018 <_usb_host_interrupt_handler+0x30c>)
    6e26:	400a      	ands	r2, r1
    6e28:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6e2a:	4b79      	ldr	r3, [pc, #484]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6e2c:	885b      	ldrh	r3, [r3, #2]
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d10a      	bne.n	6e48 <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6e32:	4a78      	ldr	r2, [pc, #480]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	015b      	lsls	r3, r3, #5
    6e38:	18d3      	adds	r3, r2, r3
    6e3a:	685b      	ldr	r3, [r3, #4]
    6e3c:	049b      	lsls	r3, r3, #18
    6e3e:	0c9b      	lsrs	r3, r3, #18
    6e40:	b29b      	uxth	r3, r3
    6e42:	001a      	movs	r2, r3
    6e44:	4b72      	ldr	r3, [pc, #456]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6e46:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6e48:	4b6e      	ldr	r3, [pc, #440]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6e4a:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	3302      	adds	r3, #2
    6e50:	011b      	lsls	r3, r3, #4
    6e52:	18d3      	adds	r3, r2, r3
    6e54:	3304      	adds	r3, #4
    6e56:	681a      	ldr	r2, [r3, #0]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6e58:	4b6a      	ldr	r3, [pc, #424]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6e5a:	681b      	ldr	r3, [r3, #0]
    6e5c:	496c      	ldr	r1, [pc, #432]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6e5e:	0018      	movs	r0, r3
    6e60:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6e62:	683b      	ldr	r3, [r7, #0]
    6e64:	2204      	movs	r2, #4
    6e66:	4013      	ands	r3, r2
    6e68:	d014      	beq.n	6e94 <_usb_host_interrupt_handler+0x188>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6e6a:	2201      	movs	r2, #1
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	409a      	lsls	r2, r3
    6e70:	0013      	movs	r3, r2
    6e72:	43db      	mvns	r3, r3
    6e74:	001a      	movs	r2, r3
    6e76:	4b65      	ldr	r3, [pc, #404]	; (700c <_usb_host_interrupt_handler+0x300>)
    6e78:	681b      	ldr	r3, [r3, #0]
    6e7a:	401a      	ands	r2, r3
    6e7c:	4b63      	ldr	r3, [pc, #396]	; (700c <_usb_host_interrupt_handler+0x300>)
    6e7e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6e80:	4b60      	ldr	r3, [pc, #384]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6e82:	681b      	ldr	r3, [r3, #0]
    6e84:	681a      	ldr	r2, [r3, #0]
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	3308      	adds	r3, #8
    6e8a:	015b      	lsls	r3, r3, #5
    6e8c:	18d3      	adds	r3, r2, r3
    6e8e:	3307      	adds	r3, #7
    6e90:	2204      	movs	r2, #4
    6e92:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6e94:	683b      	ldr	r3, [r7, #0]
    6e96:	2208      	movs	r2, #8
    6e98:	4013      	ands	r3, r2
    6e9a:	d03c      	beq.n	6f16 <_usb_host_interrupt_handler+0x20a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6e9c:	2201      	movs	r2, #1
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	409a      	lsls	r2, r3
    6ea2:	0013      	movs	r3, r2
    6ea4:	43db      	mvns	r3, r3
    6ea6:	001a      	movs	r2, r3
    6ea8:	4b58      	ldr	r3, [pc, #352]	; (700c <_usb_host_interrupt_handler+0x300>)
    6eaa:	681b      	ldr	r3, [r3, #0]
    6eac:	401a      	ands	r2, r3
    6eae:	4b57      	ldr	r3, [pc, #348]	; (700c <_usb_host_interrupt_handler+0x300>)
    6eb0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6eb2:	4b54      	ldr	r3, [pc, #336]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6eb4:	681b      	ldr	r3, [r3, #0]
    6eb6:	681a      	ldr	r2, [r3, #0]
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	3308      	adds	r3, #8
    6ebc:	015b      	lsls	r3, r3, #5
    6ebe:	18d3      	adds	r3, r2, r3
    6ec0:	3307      	adds	r3, #7
    6ec2:	2208      	movs	r2, #8
    6ec4:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6ec6:	4b4f      	ldr	r3, [pc, #316]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6ec8:	681a      	ldr	r2, [r3, #0]
    6eca:	21ae      	movs	r1, #174	; 0xae
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	18d3      	adds	r3, r2, r3
    6ed0:	185b      	adds	r3, r3, r1
    6ed2:	781b      	ldrb	r3, [r3, #0]
    6ed4:	001a      	movs	r2, r3
    6ed6:	2302      	movs	r3, #2
    6ed8:	4013      	ands	r3, r2
    6eda:	d01c      	beq.n	6f16 <_usb_host_interrupt_handler+0x20a>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	b2da      	uxtb	r2, r3
    6ee0:	4b4b      	ldr	r3, [pc, #300]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6ee2:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6ee4:	4a4b      	ldr	r2, [pc, #300]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	015b      	lsls	r3, r3, #5
    6eea:	18d3      	adds	r3, r2, r3
    6eec:	330e      	adds	r3, #14
    6eee:	881b      	ldrh	r3, [r3, #0]
    6ef0:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    6ef2:	b2db      	uxtb	r3, r3
    6ef4:	221f      	movs	r2, #31
    6ef6:	4013      	ands	r3, r2
    6ef8:	b2da      	uxtb	r2, r3
    6efa:	4b45      	ldr	r3, [pc, #276]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6efc:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6efe:	4b41      	ldr	r3, [pc, #260]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f00:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	011b      	lsls	r3, r3, #4
    6f06:	18d3      	adds	r3, r2, r3
    6f08:	3328      	adds	r3, #40	; 0x28
    6f0a:	681a      	ldr	r2, [r3, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6f0c:	4b3d      	ldr	r3, [pc, #244]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	493f      	ldr	r1, [pc, #252]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6f12:	0018      	movs	r0, r3
    6f14:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6f16:	683b      	ldr	r3, [r7, #0]
    6f18:	2210      	movs	r2, #16
    6f1a:	4013      	ands	r3, r2
    6f1c:	d03a      	beq.n	6f94 <_usb_host_interrupt_handler+0x288>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f1e:	2201      	movs	r2, #1
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	409a      	lsls	r2, r3
    6f24:	0013      	movs	r3, r2
    6f26:	43db      	mvns	r3, r3
    6f28:	001a      	movs	r2, r3
    6f2a:	4b38      	ldr	r3, [pc, #224]	; (700c <_usb_host_interrupt_handler+0x300>)
    6f2c:	681b      	ldr	r3, [r3, #0]
    6f2e:	401a      	ands	r2, r3
    6f30:	4b36      	ldr	r3, [pc, #216]	; (700c <_usb_host_interrupt_handler+0x300>)
    6f32:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6f34:	4b33      	ldr	r3, [pc, #204]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	681a      	ldr	r2, [r3, #0]
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	3308      	adds	r3, #8
    6f3e:	015b      	lsls	r3, r3, #5
    6f40:	18d3      	adds	r3, r2, r3
    6f42:	3307      	adds	r3, #7
    6f44:	2210      	movs	r2, #16
    6f46:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6f48:	4b2e      	ldr	r3, [pc, #184]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f4a:	681a      	ldr	r2, [r3, #0]
    6f4c:	21ae      	movs	r1, #174	; 0xae
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	18d3      	adds	r3, r2, r3
    6f52:	185b      	adds	r3, r3, r1
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	001a      	movs	r2, r3
    6f58:	2304      	movs	r3, #4
    6f5a:	4013      	ands	r3, r2
    6f5c:	d01a      	beq.n	6f94 <_usb_host_interrupt_handler+0x288>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	b2da      	uxtb	r2, r3
    6f62:	4b2b      	ldr	r3, [pc, #172]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6f64:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6f66:	4a2b      	ldr	r2, [pc, #172]	; (7014 <_usb_host_interrupt_handler+0x308>)
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	015b      	lsls	r3, r3, #5
    6f6c:	18d3      	adds	r3, r2, r3
    6f6e:	685b      	ldr	r3, [r3, #4]
    6f70:	011b      	lsls	r3, r3, #4
    6f72:	0c9b      	lsrs	r3, r3, #18
    6f74:	b29b      	uxth	r3, r3
    6f76:	001a      	movs	r2, r3
    6f78:	4b25      	ldr	r3, [pc, #148]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6f7a:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6f7c:	4b21      	ldr	r3, [pc, #132]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f7e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	011b      	lsls	r3, r3, #4
    6f84:	18d3      	adds	r3, r2, r3
    6f86:	332c      	adds	r3, #44	; 0x2c
    6f88:	681a      	ldr	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    6f8a:	4b1e      	ldr	r3, [pc, #120]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	2100      	movs	r1, #0
    6f90:	0018      	movs	r0, r3
    6f92:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6f94:	683b      	ldr	r3, [r7, #0]
    6f96:	2220      	movs	r2, #32
    6f98:	4013      	ands	r3, r2
    6f9a:	d100      	bne.n	6f9e <_usb_host_interrupt_handler+0x292>
    6f9c:	e113      	b.n	71c6 <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f9e:	2201      	movs	r2, #1
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	409a      	lsls	r2, r3
    6fa4:	0013      	movs	r3, r2
    6fa6:	43db      	mvns	r3, r3
    6fa8:	001a      	movs	r2, r3
    6faa:	4b18      	ldr	r3, [pc, #96]	; (700c <_usb_host_interrupt_handler+0x300>)
    6fac:	681b      	ldr	r3, [r3, #0]
    6fae:	401a      	ands	r2, r3
    6fb0:	4b16      	ldr	r3, [pc, #88]	; (700c <_usb_host_interrupt_handler+0x300>)
    6fb2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6fb4:	4b13      	ldr	r3, [pc, #76]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6fb6:	681b      	ldr	r3, [r3, #0]
    6fb8:	681a      	ldr	r2, [r3, #0]
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	3308      	adds	r3, #8
    6fbe:	015b      	lsls	r3, r3, #5
    6fc0:	18d3      	adds	r3, r2, r3
    6fc2:	3307      	adds	r3, #7
    6fc4:	2220      	movs	r2, #32
    6fc6:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6fc8:	4b0e      	ldr	r3, [pc, #56]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6fca:	681a      	ldr	r2, [r3, #0]
    6fcc:	21ae      	movs	r1, #174	; 0xae
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	18d3      	adds	r3, r2, r3
    6fd2:	185b      	adds	r3, r3, r1
    6fd4:	781b      	ldrb	r3, [r3, #0]
    6fd6:	001a      	movs	r2, r3
    6fd8:	2308      	movs	r3, #8
    6fda:	4013      	ands	r3, r2
    6fdc:	d100      	bne.n	6fe0 <_usb_host_interrupt_handler+0x2d4>
    6fde:	e0f2      	b.n	71c6 <_usb_host_interrupt_handler+0x4ba>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	b2da      	uxtb	r2, r3
    6fe4:	4b0a      	ldr	r3, [pc, #40]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6fe6:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    6fe8:	4b06      	ldr	r3, [pc, #24]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6fea:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	011b      	lsls	r3, r3, #4
    6ff0:	18d3      	adds	r3, r2, r3
    6ff2:	3330      	adds	r3, #48	; 0x30
    6ff4:	681a      	ldr	r2, [r3, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    6ff6:	4b03      	ldr	r3, [pc, #12]	; (7004 <_usb_host_interrupt_handler+0x2f8>)
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	4905      	ldr	r1, [pc, #20]	; (7010 <_usb_host_interrupt_handler+0x304>)
    6ffc:	0018      	movs	r0, r3
    6ffe:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    7000:	e0e1      	b.n	71c6 <_usb_host_interrupt_handler+0x4ba>
    7002:	46c0      	nop			; (mov r8, r8)
    7004:	2000021c 	.word	0x2000021c
    7008:	00009079 	.word	0x00009079
    700c:	20000234 	.word	0x20000234
    7010:	20000220 	.word	0x20000220
    7014:	20000504 	.word	0x20000504
    7018:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    701c:	4b6c      	ldr	r3, [pc, #432]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    701e:	681b      	ldr	r3, [r3, #0]
    7020:	681b      	ldr	r3, [r3, #0]
    7022:	8b9b      	ldrh	r3, [r3, #28]
    7024:	b29b      	uxth	r3, r3
    7026:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    7028:	683b      	ldr	r3, [r7, #0]
    702a:	2204      	movs	r2, #4
    702c:	4013      	ands	r3, r2
    702e:	d013      	beq.n	7058 <_usb_host_interrupt_handler+0x34c>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    7030:	4b67      	ldr	r3, [pc, #412]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	681b      	ldr	r3, [r3, #0]
    7036:	2204      	movs	r2, #4
    7038:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    703a:	4b65      	ldr	r3, [pc, #404]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	22a5      	movs	r2, #165	; 0xa5
    7040:	5c9b      	ldrb	r3, [r3, r2]
    7042:	001a      	movs	r2, r3
    7044:	2301      	movs	r3, #1
    7046:	4013      	ands	r3, r2
    7048:	d006      	beq.n	7058 <_usb_host_interrupt_handler+0x34c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    704a:	4b61      	ldr	r3, [pc, #388]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    704c:	681b      	ldr	r3, [r3, #0]
    704e:	685a      	ldr	r2, [r3, #4]
    7050:	4b5f      	ldr	r3, [pc, #380]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	0018      	movs	r0, r3
    7056:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    7058:	683b      	ldr	r3, [r7, #0]
    705a:	2208      	movs	r2, #8
    705c:	4013      	ands	r3, r2
    705e:	d016      	beq.n	708e <_usb_host_interrupt_handler+0x382>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7060:	4b5c      	ldr	r3, [pc, #368]	; (71d4 <_usb_host_interrupt_handler+0x4c8>)
    7062:	2200      	movs	r2, #0
    7064:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    7066:	4b5a      	ldr	r3, [pc, #360]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	681b      	ldr	r3, [r3, #0]
    706c:	2208      	movs	r2, #8
    706e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    7070:	4b57      	ldr	r3, [pc, #348]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	22a5      	movs	r2, #165	; 0xa5
    7076:	5c9b      	ldrb	r3, [r3, r2]
    7078:	001a      	movs	r2, r3
    707a:	2302      	movs	r3, #2
    707c:	4013      	ands	r3, r2
    707e:	d006      	beq.n	708e <_usb_host_interrupt_handler+0x382>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    7080:	4b53      	ldr	r3, [pc, #332]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	689a      	ldr	r2, [r3, #8]
    7086:	4b52      	ldr	r3, [pc, #328]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7088:	681b      	ldr	r3, [r3, #0]
    708a:	0018      	movs	r0, r3
    708c:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    708e:	683b      	ldr	r3, [r7, #0]
    7090:	2240      	movs	r2, #64	; 0x40
    7092:	4013      	ands	r3, r2
    7094:	d013      	beq.n	70be <_usb_host_interrupt_handler+0x3b2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    7096:	4b4e      	ldr	r3, [pc, #312]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	681b      	ldr	r3, [r3, #0]
    709c:	2240      	movs	r2, #64	; 0x40
    709e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    70a0:	4b4b      	ldr	r3, [pc, #300]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	22a5      	movs	r2, #165	; 0xa5
    70a6:	5c9b      	ldrb	r3, [r3, r2]
    70a8:	001a      	movs	r2, r3
    70aa:	2310      	movs	r3, #16
    70ac:	4013      	ands	r3, r2
    70ae:	d006      	beq.n	70be <_usb_host_interrupt_handler+0x3b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    70b0:	4b47      	ldr	r3, [pc, #284]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70b2:	681b      	ldr	r3, [r3, #0]
    70b4:	695a      	ldr	r2, [r3, #20]
    70b6:	4b46      	ldr	r3, [pc, #280]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70b8:	681b      	ldr	r3, [r3, #0]
    70ba:	0018      	movs	r0, r3
    70bc:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    70be:	683b      	ldr	r3, [r7, #0]
    70c0:	2220      	movs	r2, #32
    70c2:	4013      	ands	r3, r2
    70c4:	d013      	beq.n	70ee <_usb_host_interrupt_handler+0x3e2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    70c6:	4b42      	ldr	r3, [pc, #264]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70c8:	681b      	ldr	r3, [r3, #0]
    70ca:	681b      	ldr	r3, [r3, #0]
    70cc:	2220      	movs	r2, #32
    70ce:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    70d0:	4b3f      	ldr	r3, [pc, #252]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70d2:	681b      	ldr	r3, [r3, #0]
    70d4:	22a5      	movs	r2, #165	; 0xa5
    70d6:	5c9b      	ldrb	r3, [r3, r2]
    70d8:	001a      	movs	r2, r3
    70da:	2308      	movs	r3, #8
    70dc:	4013      	ands	r3, r2
    70de:	d006      	beq.n	70ee <_usb_host_interrupt_handler+0x3e2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    70e0:	4b3b      	ldr	r3, [pc, #236]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70e2:	681b      	ldr	r3, [r3, #0]
    70e4:	691a      	ldr	r2, [r3, #16]
    70e6:	4b3a      	ldr	r3, [pc, #232]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70e8:	681b      	ldr	r3, [r3, #0]
    70ea:	0018      	movs	r0, r3
    70ec:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    70ee:	683b      	ldr	r3, [r7, #0]
    70f0:	2210      	movs	r2, #16
    70f2:	4013      	ands	r3, r2
    70f4:	d013      	beq.n	711e <_usb_host_interrupt_handler+0x412>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    70f6:	4b36      	ldr	r3, [pc, #216]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    70f8:	681b      	ldr	r3, [r3, #0]
    70fa:	681b      	ldr	r3, [r3, #0]
    70fc:	2210      	movs	r2, #16
    70fe:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    7100:	4b33      	ldr	r3, [pc, #204]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	22a5      	movs	r2, #165	; 0xa5
    7106:	5c9b      	ldrb	r3, [r3, r2]
    7108:	001a      	movs	r2, r3
    710a:	2304      	movs	r3, #4
    710c:	4013      	ands	r3, r2
    710e:	d006      	beq.n	711e <_usb_host_interrupt_handler+0x412>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    7110:	4b2f      	ldr	r3, [pc, #188]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	68da      	ldr	r2, [r3, #12]
    7116:	4b2e      	ldr	r3, [pc, #184]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7118:	681b      	ldr	r3, [r3, #0]
    711a:	0018      	movs	r0, r3
    711c:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    711e:	683b      	ldr	r3, [r7, #0]
    7120:	2280      	movs	r2, #128	; 0x80
    7122:	4013      	ands	r3, r2
    7124:	d016      	beq.n	7154 <_usb_host_interrupt_handler+0x448>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7126:	4b2b      	ldr	r3, [pc, #172]	; (71d4 <_usb_host_interrupt_handler+0x4c8>)
    7128:	2200      	movs	r2, #0
    712a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    712c:	4b28      	ldr	r3, [pc, #160]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	681b      	ldr	r3, [r3, #0]
    7132:	2280      	movs	r2, #128	; 0x80
    7134:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    7136:	4b26      	ldr	r3, [pc, #152]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7138:	681b      	ldr	r3, [r3, #0]
    713a:	22a5      	movs	r2, #165	; 0xa5
    713c:	5c9b      	ldrb	r3, [r3, r2]
    713e:	001a      	movs	r2, r3
    7140:	2320      	movs	r3, #32
    7142:	4013      	ands	r3, r2
    7144:	d006      	beq.n	7154 <_usb_host_interrupt_handler+0x448>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    7146:	4b22      	ldr	r3, [pc, #136]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7148:	681b      	ldr	r3, [r3, #0]
    714a:	699a      	ldr	r2, [r3, #24]
    714c:	4b20      	ldr	r3, [pc, #128]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    714e:	681b      	ldr	r3, [r3, #0]
    7150:	0018      	movs	r0, r3
    7152:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    7154:	683a      	ldr	r2, [r7, #0]
    7156:	2380      	movs	r3, #128	; 0x80
    7158:	005b      	lsls	r3, r3, #1
    715a:	4013      	ands	r3, r2
    715c:	d017      	beq.n	718e <_usb_host_interrupt_handler+0x482>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    715e:	4b1d      	ldr	r3, [pc, #116]	; (71d4 <_usb_host_interrupt_handler+0x4c8>)
    7160:	2200      	movs	r2, #0
    7162:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    7164:	4b1a      	ldr	r3, [pc, #104]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	681b      	ldr	r3, [r3, #0]
    716a:	2280      	movs	r2, #128	; 0x80
    716c:	0052      	lsls	r2, r2, #1
    716e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    7170:	4b17      	ldr	r3, [pc, #92]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7172:	681b      	ldr	r3, [r3, #0]
    7174:	22a5      	movs	r2, #165	; 0xa5
    7176:	5c9b      	ldrb	r3, [r3, r2]
    7178:	001a      	movs	r2, r3
    717a:	2340      	movs	r3, #64	; 0x40
    717c:	4013      	ands	r3, r2
    717e:	d006      	beq.n	718e <_usb_host_interrupt_handler+0x482>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    7180:	4b13      	ldr	r3, [pc, #76]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7182:	681b      	ldr	r3, [r3, #0]
    7184:	69da      	ldr	r2, [r3, #28]
    7186:	4b12      	ldr	r3, [pc, #72]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    7188:	681b      	ldr	r3, [r3, #0]
    718a:	0018      	movs	r0, r3
    718c:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    718e:	683a      	ldr	r2, [r7, #0]
    7190:	2380      	movs	r3, #128	; 0x80
    7192:	009b      	lsls	r3, r3, #2
    7194:	4013      	ands	r3, r2
    7196:	d016      	beq.n	71c6 <_usb_host_interrupt_handler+0x4ba>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    7198:	4b0e      	ldr	r3, [pc, #56]	; (71d4 <_usb_host_interrupt_handler+0x4c8>)
    719a:	2200      	movs	r2, #0
    719c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    719e:	4b0c      	ldr	r3, [pc, #48]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    71a0:	681b      	ldr	r3, [r3, #0]
    71a2:	681b      	ldr	r3, [r3, #0]
    71a4:	2280      	movs	r2, #128	; 0x80
    71a6:	0092      	lsls	r2, r2, #2
    71a8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    71aa:	4b09      	ldr	r3, [pc, #36]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    71ac:	681b      	ldr	r3, [r3, #0]
    71ae:	22a5      	movs	r2, #165	; 0xa5
    71b0:	5c9b      	ldrb	r3, [r3, r2]
    71b2:	b25b      	sxtb	r3, r3
    71b4:	2b00      	cmp	r3, #0
    71b6:	da06      	bge.n	71c6 <_usb_host_interrupt_handler+0x4ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    71b8:	4b05      	ldr	r3, [pc, #20]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    71ba:	681b      	ldr	r3, [r3, #0]
    71bc:	6a1a      	ldr	r2, [r3, #32]
    71be:	4b04      	ldr	r3, [pc, #16]	; (71d0 <_usb_host_interrupt_handler+0x4c4>)
    71c0:	681b      	ldr	r3, [r3, #0]
    71c2:	0018      	movs	r0, r3
    71c4:	4790      	blx	r2
			}
		}

	}
}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	46bd      	mov	sp, r7
    71ca:	b002      	add	sp, #8
    71cc:	bd80      	pop	{r7, pc}
    71ce:	46c0      	nop			; (mov r8, r8)
    71d0:	2000021c 	.word	0x2000021c
    71d4:	20000234 	.word	0x20000234

000071d8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    71d8:	b580      	push	{r7, lr}
    71da:	b084      	sub	sp, #16
    71dc:	af00      	add	r7, sp, #0
    71de:	60f8      	str	r0, [r7, #12]
    71e0:	607a      	str	r2, [r7, #4]
    71e2:	230b      	movs	r3, #11
    71e4:	18fb      	adds	r3, r7, r3
    71e6:	1c0a      	adds	r2, r1, #0
    71e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    71ea:	230b      	movs	r3, #11
    71ec:	18fb      	adds	r3, r7, r3
    71ee:	781a      	ldrb	r2, [r3, #0]
    71f0:	68fb      	ldr	r3, [r7, #12]
    71f2:	322e      	adds	r2, #46	; 0x2e
    71f4:	0092      	lsls	r2, r2, #2
    71f6:	6879      	ldr	r1, [r7, #4]
    71f8:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    71fa:	68fa      	ldr	r2, [r7, #12]
    71fc:	23aa      	movs	r3, #170	; 0xaa
    71fe:	005b      	lsls	r3, r3, #1
    7200:	5ad2      	ldrh	r2, [r2, r3]
    7202:	230b      	movs	r3, #11
    7204:	18fb      	adds	r3, r7, r3
    7206:	7819      	ldrb	r1, [r3, #0]
    7208:	4b06      	ldr	r3, [pc, #24]	; (7224 <usb_device_register_callback+0x4c>)
    720a:	0049      	lsls	r1, r1, #1
    720c:	5acb      	ldrh	r3, [r1, r3]
    720e:	4313      	orrs	r3, r2
    7210:	b299      	uxth	r1, r3
    7212:	68fa      	ldr	r2, [r7, #12]
    7214:	23aa      	movs	r3, #170	; 0xaa
    7216:	005b      	lsls	r3, r3, #1
    7218:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    721a:	2300      	movs	r3, #0
}
    721c:	0018      	movs	r0, r3
    721e:	46bd      	mov	sp, r7
    7220:	b004      	add	sp, #16
    7222:	bd80      	pop	{r7, pc}
    7224:	00009200 	.word	0x00009200

00007228 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    7228:	b580      	push	{r7, lr}
    722a:	b082      	sub	sp, #8
    722c:	af00      	add	r7, sp, #0
    722e:	6078      	str	r0, [r7, #4]
    7230:	000a      	movs	r2, r1
    7232:	1cfb      	adds	r3, r7, #3
    7234:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	1cfa      	adds	r2, r7, #3
    723c:	7811      	ldrb	r1, [r2, #0]
    723e:	4a10      	ldr	r2, [pc, #64]	; (7280 <usb_device_enable_callback+0x58>)
    7240:	0049      	lsls	r1, r1, #1
    7242:	5a8a      	ldrh	r2, [r1, r2]
    7244:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    7246:	687a      	ldr	r2, [r7, #4]
    7248:	23ab      	movs	r3, #171	; 0xab
    724a:	005b      	lsls	r3, r3, #1
    724c:	5ad2      	ldrh	r2, [r2, r3]
    724e:	1cfb      	adds	r3, r7, #3
    7250:	7819      	ldrb	r1, [r3, #0]
    7252:	4b0b      	ldr	r3, [pc, #44]	; (7280 <usb_device_enable_callback+0x58>)
    7254:	0049      	lsls	r1, r1, #1
    7256:	5acb      	ldrh	r3, [r1, r3]
    7258:	4313      	orrs	r3, r2
    725a:	b299      	uxth	r1, r3
    725c:	687a      	ldr	r2, [r7, #4]
    725e:	23ab      	movs	r3, #171	; 0xab
    7260:	005b      	lsls	r3, r3, #1
    7262:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	1cfa      	adds	r2, r7, #3
    726a:	7811      	ldrb	r1, [r2, #0]
    726c:	4a04      	ldr	r2, [pc, #16]	; (7280 <usb_device_enable_callback+0x58>)
    726e:	0049      	lsls	r1, r1, #1
    7270:	5a8a      	ldrh	r2, [r1, r2]
    7272:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    7274:	2300      	movs	r3, #0
}
    7276:	0018      	movs	r0, r3
    7278:	46bd      	mov	sp, r7
    727a:	b002      	add	sp, #8
    727c:	bd80      	pop	{r7, pc}
    727e:	46c0      	nop			; (mov r8, r8)
    7280:	00009200 	.word	0x00009200

00007284 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    7284:	b580      	push	{r7, lr}
    7286:	b082      	sub	sp, #8
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
    728c:	000a      	movs	r2, r1
    728e:	1cfb      	adds	r3, r7, #3
    7290:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    7292:	687a      	ldr	r2, [r7, #4]
    7294:	23ab      	movs	r3, #171	; 0xab
    7296:	005b      	lsls	r3, r3, #1
    7298:	5ad3      	ldrh	r3, [r2, r3]
    729a:	b21b      	sxth	r3, r3
    729c:	1cfa      	adds	r2, r7, #3
    729e:	7811      	ldrb	r1, [r2, #0]
    72a0:	4a0c      	ldr	r2, [pc, #48]	; (72d4 <usb_device_disable_callback+0x50>)
    72a2:	0049      	lsls	r1, r1, #1
    72a4:	5a8a      	ldrh	r2, [r1, r2]
    72a6:	b212      	sxth	r2, r2
    72a8:	43d2      	mvns	r2, r2
    72aa:	b212      	sxth	r2, r2
    72ac:	4013      	ands	r3, r2
    72ae:	b21b      	sxth	r3, r3
    72b0:	b299      	uxth	r1, r3
    72b2:	687a      	ldr	r2, [r7, #4]
    72b4:	23ab      	movs	r3, #171	; 0xab
    72b6:	005b      	lsls	r3, r3, #1
    72b8:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	681b      	ldr	r3, [r3, #0]
    72be:	1cfa      	adds	r2, r7, #3
    72c0:	7811      	ldrb	r1, [r2, #0]
    72c2:	4a04      	ldr	r2, [pc, #16]	; (72d4 <usb_device_disable_callback+0x50>)
    72c4:	0049      	lsls	r1, r1, #1
    72c6:	5a8a      	ldrh	r2, [r1, r2]
    72c8:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    72ca:	2300      	movs	r3, #0
}
    72cc:	0018      	movs	r0, r3
    72ce:	46bd      	mov	sp, r7
    72d0:	b002      	add	sp, #8
    72d2:	bd80      	pop	{r7, pc}
    72d4:	00009200 	.word	0x00009200

000072d8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b084      	sub	sp, #16
    72dc:	af00      	add	r7, sp, #0
    72de:	60f8      	str	r0, [r7, #12]
    72e0:	0008      	movs	r0, r1
    72e2:	0011      	movs	r1, r2
    72e4:	607b      	str	r3, [r7, #4]
    72e6:	230b      	movs	r3, #11
    72e8:	18fb      	adds	r3, r7, r3
    72ea:	1c02      	adds	r2, r0, #0
    72ec:	701a      	strb	r2, [r3, #0]
    72ee:	230a      	movs	r3, #10
    72f0:	18fb      	adds	r3, r7, r3
    72f2:	1c0a      	adds	r2, r1, #0
    72f4:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    72f6:	230b      	movs	r3, #11
    72f8:	18fb      	adds	r3, r7, r3
    72fa:	7819      	ldrb	r1, [r3, #0]
    72fc:	230a      	movs	r3, #10
    72fe:	18fb      	adds	r3, r7, r3
    7300:	781b      	ldrb	r3, [r3, #0]
    7302:	68fa      	ldr	r2, [r7, #12]
    7304:	0089      	lsls	r1, r1, #2
    7306:	18cb      	adds	r3, r1, r3
    7308:	3334      	adds	r3, #52	; 0x34
    730a:	009b      	lsls	r3, r3, #2
    730c:	18d3      	adds	r3, r2, r3
    730e:	3304      	adds	r3, #4
    7310:	687a      	ldr	r2, [r7, #4]
    7312:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    7314:	230b      	movs	r3, #11
    7316:	18fb      	adds	r3, r7, r3
    7318:	781a      	ldrb	r2, [r3, #0]
    731a:	230b      	movs	r3, #11
    731c:	18fb      	adds	r3, r7, r3
    731e:	7819      	ldrb	r1, [r3, #0]
    7320:	68f8      	ldr	r0, [r7, #12]
    7322:	23ac      	movs	r3, #172	; 0xac
    7324:	005b      	lsls	r3, r3, #1
    7326:	1841      	adds	r1, r0, r1
    7328:	18cb      	adds	r3, r1, r3
    732a:	7819      	ldrb	r1, [r3, #0]
    732c:	230a      	movs	r3, #10
    732e:	18fb      	adds	r3, r7, r3
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	4808      	ldr	r0, [pc, #32]	; (7354 <usb_device_endpoint_register_callback+0x7c>)
    7334:	5cc3      	ldrb	r3, [r0, r3]
    7336:	430b      	orrs	r3, r1
    7338:	b2d8      	uxtb	r0, r3
    733a:	68f9      	ldr	r1, [r7, #12]
    733c:	23ac      	movs	r3, #172	; 0xac
    733e:	005b      	lsls	r3, r3, #1
    7340:	188a      	adds	r2, r1, r2
    7342:	18d3      	adds	r3, r2, r3
    7344:	1c02      	adds	r2, r0, #0
    7346:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7348:	2300      	movs	r3, #0
}
    734a:	0018      	movs	r0, r3
    734c:	46bd      	mov	sp, r7
    734e:	b004      	add	sp, #16
    7350:	bd80      	pop	{r7, pc}
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	00009210 	.word	0x00009210

00007358 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    7358:	b580      	push	{r7, lr}
    735a:	b082      	sub	sp, #8
    735c:	af00      	add	r7, sp, #0
    735e:	6078      	str	r0, [r7, #4]
    7360:	0008      	movs	r0, r1
    7362:	0011      	movs	r1, r2
    7364:	1cfb      	adds	r3, r7, #3
    7366:	1c02      	adds	r2, r0, #0
    7368:	701a      	strb	r2, [r3, #0]
    736a:	1cbb      	adds	r3, r7, #2
    736c:	1c0a      	adds	r2, r1, #0
    736e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    7370:	1cfb      	adds	r3, r7, #3
    7372:	7819      	ldrb	r1, [r3, #0]
    7374:	1cbb      	adds	r3, r7, #2
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	687a      	ldr	r2, [r7, #4]
    737a:	0089      	lsls	r1, r1, #2
    737c:	18cb      	adds	r3, r1, r3
    737e:	3334      	adds	r3, #52	; 0x34
    7380:	009b      	lsls	r3, r3, #2
    7382:	18d3      	adds	r3, r2, r3
    7384:	3304      	adds	r3, #4
    7386:	2200      	movs	r2, #0
    7388:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    738a:	1cfb      	adds	r3, r7, #3
    738c:	781a      	ldrb	r2, [r3, #0]
    738e:	1cfb      	adds	r3, r7, #3
    7390:	7819      	ldrb	r1, [r3, #0]
    7392:	6878      	ldr	r0, [r7, #4]
    7394:	23ac      	movs	r3, #172	; 0xac
    7396:	005b      	lsls	r3, r3, #1
    7398:	1841      	adds	r1, r0, r1
    739a:	18cb      	adds	r3, r1, r3
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	b25b      	sxtb	r3, r3
    73a0:	1cb9      	adds	r1, r7, #2
    73a2:	7809      	ldrb	r1, [r1, #0]
    73a4:	4809      	ldr	r0, [pc, #36]	; (73cc <usb_device_endpoint_unregister_callback+0x74>)
    73a6:	5c41      	ldrb	r1, [r0, r1]
    73a8:	b249      	sxtb	r1, r1
    73aa:	43c9      	mvns	r1, r1
    73ac:	b249      	sxtb	r1, r1
    73ae:	400b      	ands	r3, r1
    73b0:	b25b      	sxtb	r3, r3
    73b2:	b2d8      	uxtb	r0, r3
    73b4:	6879      	ldr	r1, [r7, #4]
    73b6:	23ac      	movs	r3, #172	; 0xac
    73b8:	005b      	lsls	r3, r3, #1
    73ba:	188a      	adds	r2, r1, r2
    73bc:	18d3      	adds	r3, r2, r3
    73be:	1c02      	adds	r2, r0, #0
    73c0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    73c2:	2300      	movs	r3, #0
}
    73c4:	0018      	movs	r0, r3
    73c6:	46bd      	mov	sp, r7
    73c8:	b002      	add	sp, #8
    73ca:	bd80      	pop	{r7, pc}
    73cc:	00009210 	.word	0x00009210

000073d0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    73d0:	b580      	push	{r7, lr}
    73d2:	b084      	sub	sp, #16
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
    73d8:	0008      	movs	r0, r1
    73da:	0011      	movs	r1, r2
    73dc:	1cfb      	adds	r3, r7, #3
    73de:	1c02      	adds	r2, r0, #0
    73e0:	701a      	strb	r2, [r3, #0]
    73e2:	1cbb      	adds	r3, r7, #2
    73e4:	1c0a      	adds	r2, r1, #0
    73e6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    73e8:	230f      	movs	r3, #15
    73ea:	18fb      	adds	r3, r7, r3
    73ec:	1cfa      	adds	r2, r7, #3
    73ee:	7812      	ldrb	r2, [r2, #0]
    73f0:	210f      	movs	r1, #15
    73f2:	400a      	ands	r2, r1
    73f4:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    73f6:	230f      	movs	r3, #15
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	781a      	ldrb	r2, [r3, #0]
    73fc:	230f      	movs	r3, #15
    73fe:	18fb      	adds	r3, r7, r3
    7400:	7819      	ldrb	r1, [r3, #0]
    7402:	6878      	ldr	r0, [r7, #4]
    7404:	23b0      	movs	r3, #176	; 0xb0
    7406:	005b      	lsls	r3, r3, #1
    7408:	1841      	adds	r1, r0, r1
    740a:	18cb      	adds	r3, r1, r3
    740c:	7819      	ldrb	r1, [r3, #0]
    740e:	1cbb      	adds	r3, r7, #2
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	4855      	ldr	r0, [pc, #340]	; (7568 <usb_device_endpoint_enable_callback+0x198>)
    7414:	5cc3      	ldrb	r3, [r0, r3]
    7416:	430b      	orrs	r3, r1
    7418:	b2d8      	uxtb	r0, r3
    741a:	6879      	ldr	r1, [r7, #4]
    741c:	23b0      	movs	r3, #176	; 0xb0
    741e:	005b      	lsls	r3, r3, #1
    7420:	188a      	adds	r2, r1, r2
    7422:	18d3      	adds	r3, r2, r3
    7424:	1c02      	adds	r2, r0, #0
    7426:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    7428:	1cbb      	adds	r3, r7, #2
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	2b00      	cmp	r3, #0
    742e:	d12f      	bne.n	7490 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    7430:	230f      	movs	r3, #15
    7432:	18fb      	adds	r3, r7, r3
    7434:	781b      	ldrb	r3, [r3, #0]
    7436:	2b00      	cmp	r3, #0
    7438:	d10c      	bne.n	7454 <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    743a:	687b      	ldr	r3, [r7, #4]
    743c:	6819      	ldr	r1, [r3, #0]
    743e:	230f      	movs	r3, #15
    7440:	18fb      	adds	r3, r7, r3
    7442:	781a      	ldrb	r2, [r3, #0]
    7444:	230a      	movs	r3, #10
    7446:	33ff      	adds	r3, #255	; 0xff
    7448:	0152      	lsls	r2, r2, #5
    744a:	188a      	adds	r2, r1, r2
    744c:	18d3      	adds	r3, r2, r3
    744e:	2203      	movs	r2, #3
    7450:	701a      	strb	r2, [r3, #0]
    7452:	e01d      	b.n	7490 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    7454:	1cfb      	adds	r3, r7, #3
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	b25b      	sxtb	r3, r3
    745a:	2b00      	cmp	r3, #0
    745c:	da0c      	bge.n	7478 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	6819      	ldr	r1, [r3, #0]
    7462:	230f      	movs	r3, #15
    7464:	18fb      	adds	r3, r7, r3
    7466:	781a      	ldrb	r2, [r3, #0]
    7468:	230a      	movs	r3, #10
    746a:	33ff      	adds	r3, #255	; 0xff
    746c:	0152      	lsls	r2, r2, #5
    746e:	188a      	adds	r2, r1, r2
    7470:	18d3      	adds	r3, r2, r3
    7472:	2202      	movs	r2, #2
    7474:	701a      	strb	r2, [r3, #0]
    7476:	e00b      	b.n	7490 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	6819      	ldr	r1, [r3, #0]
    747c:	230f      	movs	r3, #15
    747e:	18fb      	adds	r3, r7, r3
    7480:	781a      	ldrb	r2, [r3, #0]
    7482:	230a      	movs	r3, #10
    7484:	33ff      	adds	r3, #255	; 0xff
    7486:	0152      	lsls	r2, r2, #5
    7488:	188a      	adds	r2, r1, r2
    748a:	18d3      	adds	r3, r2, r3
    748c:	2201      	movs	r2, #1
    748e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    7490:	1cbb      	adds	r3, r7, #2
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	2b01      	cmp	r3, #1
    7496:	d12f      	bne.n	74f8 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    7498:	230f      	movs	r3, #15
    749a:	18fb      	adds	r3, r7, r3
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	2b00      	cmp	r3, #0
    74a0:	d10c      	bne.n	74bc <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	6819      	ldr	r1, [r3, #0]
    74a6:	230f      	movs	r3, #15
    74a8:	18fb      	adds	r3, r7, r3
    74aa:	781a      	ldrb	r2, [r3, #0]
    74ac:	230a      	movs	r3, #10
    74ae:	33ff      	adds	r3, #255	; 0xff
    74b0:	0152      	lsls	r2, r2, #5
    74b2:	188a      	adds	r2, r1, r2
    74b4:	18d3      	adds	r3, r2, r3
    74b6:	220c      	movs	r2, #12
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	e01d      	b.n	74f8 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    74bc:	1cfb      	adds	r3, r7, #3
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	b25b      	sxtb	r3, r3
    74c2:	2b00      	cmp	r3, #0
    74c4:	da0c      	bge.n	74e0 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	6819      	ldr	r1, [r3, #0]
    74ca:	230f      	movs	r3, #15
    74cc:	18fb      	adds	r3, r7, r3
    74ce:	781a      	ldrb	r2, [r3, #0]
    74d0:	230a      	movs	r3, #10
    74d2:	33ff      	adds	r3, #255	; 0xff
    74d4:	0152      	lsls	r2, r2, #5
    74d6:	188a      	adds	r2, r1, r2
    74d8:	18d3      	adds	r3, r2, r3
    74da:	2208      	movs	r2, #8
    74dc:	701a      	strb	r2, [r3, #0]
    74de:	e00b      	b.n	74f8 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    74e0:	687b      	ldr	r3, [r7, #4]
    74e2:	6819      	ldr	r1, [r3, #0]
    74e4:	230f      	movs	r3, #15
    74e6:	18fb      	adds	r3, r7, r3
    74e8:	781a      	ldrb	r2, [r3, #0]
    74ea:	230a      	movs	r3, #10
    74ec:	33ff      	adds	r3, #255	; 0xff
    74ee:	0152      	lsls	r2, r2, #5
    74f0:	188a      	adds	r2, r1, r2
    74f2:	18d3      	adds	r3, r2, r3
    74f4:	2204      	movs	r2, #4
    74f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    74f8:	1cbb      	adds	r3, r7, #2
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	2b02      	cmp	r3, #2
    74fe:	d10b      	bne.n	7518 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	6819      	ldr	r1, [r3, #0]
    7504:	230f      	movs	r3, #15
    7506:	18fb      	adds	r3, r7, r3
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	230a      	movs	r3, #10
    750c:	33ff      	adds	r3, #255	; 0xff
    750e:	0152      	lsls	r2, r2, #5
    7510:	188a      	adds	r2, r1, r2
    7512:	18d3      	adds	r3, r2, r3
    7514:	2210      	movs	r2, #16
    7516:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    7518:	1cbb      	adds	r3, r7, #2
    751a:	781b      	ldrb	r3, [r3, #0]
    751c:	2b03      	cmp	r3, #3
    751e:	d11d      	bne.n	755c <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    7520:	1cfb      	adds	r3, r7, #3
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	b25b      	sxtb	r3, r3
    7526:	2b00      	cmp	r3, #0
    7528:	da0c      	bge.n	7544 <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	6819      	ldr	r1, [r3, #0]
    752e:	230f      	movs	r3, #15
    7530:	18fb      	adds	r3, r7, r3
    7532:	781a      	ldrb	r2, [r3, #0]
    7534:	230a      	movs	r3, #10
    7536:	33ff      	adds	r3, #255	; 0xff
    7538:	0152      	lsls	r2, r2, #5
    753a:	188a      	adds	r2, r1, r2
    753c:	18d3      	adds	r3, r2, r3
    753e:	2240      	movs	r2, #64	; 0x40
    7540:	701a      	strb	r2, [r3, #0]
    7542:	e00b      	b.n	755c <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    7544:	687b      	ldr	r3, [r7, #4]
    7546:	6819      	ldr	r1, [r3, #0]
    7548:	230f      	movs	r3, #15
    754a:	18fb      	adds	r3, r7, r3
    754c:	781a      	ldrb	r2, [r3, #0]
    754e:	230a      	movs	r3, #10
    7550:	33ff      	adds	r3, #255	; 0xff
    7552:	0152      	lsls	r2, r2, #5
    7554:	188a      	adds	r2, r1, r2
    7556:	18d3      	adds	r3, r2, r3
    7558:	2220      	movs	r2, #32
    755a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    755c:	2300      	movs	r3, #0
}
    755e:	0018      	movs	r0, r3
    7560:	46bd      	mov	sp, r7
    7562:	b004      	add	sp, #16
    7564:	bd80      	pop	{r7, pc}
    7566:	46c0      	nop			; (mov r8, r8)
    7568:	00009210 	.word	0x00009210

0000756c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    756c:	b580      	push	{r7, lr}
    756e:	b084      	sub	sp, #16
    7570:	af00      	add	r7, sp, #0
    7572:	6078      	str	r0, [r7, #4]
    7574:	0008      	movs	r0, r1
    7576:	0011      	movs	r1, r2
    7578:	1cfb      	adds	r3, r7, #3
    757a:	1c02      	adds	r2, r0, #0
    757c:	701a      	strb	r2, [r3, #0]
    757e:	1cbb      	adds	r3, r7, #2
    7580:	1c0a      	adds	r2, r1, #0
    7582:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7584:	230f      	movs	r3, #15
    7586:	18fb      	adds	r3, r7, r3
    7588:	1cfa      	adds	r2, r7, #3
    758a:	7812      	ldrb	r2, [r2, #0]
    758c:	210f      	movs	r1, #15
    758e:	400a      	ands	r2, r1
    7590:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    7592:	230f      	movs	r3, #15
    7594:	18fb      	adds	r3, r7, r3
    7596:	781a      	ldrb	r2, [r3, #0]
    7598:	230f      	movs	r3, #15
    759a:	18fb      	adds	r3, r7, r3
    759c:	7819      	ldrb	r1, [r3, #0]
    759e:	6878      	ldr	r0, [r7, #4]
    75a0:	23b0      	movs	r3, #176	; 0xb0
    75a2:	005b      	lsls	r3, r3, #1
    75a4:	1841      	adds	r1, r0, r1
    75a6:	18cb      	adds	r3, r1, r3
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	b25b      	sxtb	r3, r3
    75ac:	1cb9      	adds	r1, r7, #2
    75ae:	7809      	ldrb	r1, [r1, #0]
    75b0:	4856      	ldr	r0, [pc, #344]	; (770c <usb_device_endpoint_disable_callback+0x1a0>)
    75b2:	5c41      	ldrb	r1, [r0, r1]
    75b4:	b249      	sxtb	r1, r1
    75b6:	43c9      	mvns	r1, r1
    75b8:	b249      	sxtb	r1, r1
    75ba:	400b      	ands	r3, r1
    75bc:	b25b      	sxtb	r3, r3
    75be:	b2d8      	uxtb	r0, r3
    75c0:	6879      	ldr	r1, [r7, #4]
    75c2:	23b0      	movs	r3, #176	; 0xb0
    75c4:	005b      	lsls	r3, r3, #1
    75c6:	188a      	adds	r2, r1, r2
    75c8:	18d3      	adds	r3, r2, r3
    75ca:	1c02      	adds	r2, r0, #0
    75cc:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    75ce:	1cbb      	adds	r3, r7, #2
    75d0:	781b      	ldrb	r3, [r3, #0]
    75d2:	2b00      	cmp	r3, #0
    75d4:	d12f      	bne.n	7636 <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    75d6:	230f      	movs	r3, #15
    75d8:	18fb      	adds	r3, r7, r3
    75da:	781b      	ldrb	r3, [r3, #0]
    75dc:	2b00      	cmp	r3, #0
    75de:	d10c      	bne.n	75fa <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    75e0:	687b      	ldr	r3, [r7, #4]
    75e2:	6819      	ldr	r1, [r3, #0]
    75e4:	230f      	movs	r3, #15
    75e6:	18fb      	adds	r3, r7, r3
    75e8:	781a      	ldrb	r2, [r3, #0]
    75ea:	2384      	movs	r3, #132	; 0x84
    75ec:	005b      	lsls	r3, r3, #1
    75ee:	0152      	lsls	r2, r2, #5
    75f0:	188a      	adds	r2, r1, r2
    75f2:	18d3      	adds	r3, r2, r3
    75f4:	2203      	movs	r2, #3
    75f6:	701a      	strb	r2, [r3, #0]
    75f8:	e01d      	b.n	7636 <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    75fa:	1cfb      	adds	r3, r7, #3
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	b25b      	sxtb	r3, r3
    7600:	2b00      	cmp	r3, #0
    7602:	da0c      	bge.n	761e <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	6819      	ldr	r1, [r3, #0]
    7608:	230f      	movs	r3, #15
    760a:	18fb      	adds	r3, r7, r3
    760c:	781a      	ldrb	r2, [r3, #0]
    760e:	2384      	movs	r3, #132	; 0x84
    7610:	005b      	lsls	r3, r3, #1
    7612:	0152      	lsls	r2, r2, #5
    7614:	188a      	adds	r2, r1, r2
    7616:	18d3      	adds	r3, r2, r3
    7618:	2202      	movs	r2, #2
    761a:	701a      	strb	r2, [r3, #0]
    761c:	e00b      	b.n	7636 <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	6819      	ldr	r1, [r3, #0]
    7622:	230f      	movs	r3, #15
    7624:	18fb      	adds	r3, r7, r3
    7626:	781a      	ldrb	r2, [r3, #0]
    7628:	2384      	movs	r3, #132	; 0x84
    762a:	005b      	lsls	r3, r3, #1
    762c:	0152      	lsls	r2, r2, #5
    762e:	188a      	adds	r2, r1, r2
    7630:	18d3      	adds	r3, r2, r3
    7632:	2201      	movs	r2, #1
    7634:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    7636:	1cbb      	adds	r3, r7, #2
    7638:	781b      	ldrb	r3, [r3, #0]
    763a:	2b01      	cmp	r3, #1
    763c:	d12f      	bne.n	769e <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    763e:	230f      	movs	r3, #15
    7640:	18fb      	adds	r3, r7, r3
    7642:	781b      	ldrb	r3, [r3, #0]
    7644:	2b00      	cmp	r3, #0
    7646:	d10c      	bne.n	7662 <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	6819      	ldr	r1, [r3, #0]
    764c:	230f      	movs	r3, #15
    764e:	18fb      	adds	r3, r7, r3
    7650:	781a      	ldrb	r2, [r3, #0]
    7652:	2384      	movs	r3, #132	; 0x84
    7654:	005b      	lsls	r3, r3, #1
    7656:	0152      	lsls	r2, r2, #5
    7658:	188a      	adds	r2, r1, r2
    765a:	18d3      	adds	r3, r2, r3
    765c:	220c      	movs	r2, #12
    765e:	701a      	strb	r2, [r3, #0]
    7660:	e01d      	b.n	769e <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    7662:	1cfb      	adds	r3, r7, #3
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	b25b      	sxtb	r3, r3
    7668:	2b00      	cmp	r3, #0
    766a:	da0c      	bge.n	7686 <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	6819      	ldr	r1, [r3, #0]
    7670:	230f      	movs	r3, #15
    7672:	18fb      	adds	r3, r7, r3
    7674:	781a      	ldrb	r2, [r3, #0]
    7676:	2384      	movs	r3, #132	; 0x84
    7678:	005b      	lsls	r3, r3, #1
    767a:	0152      	lsls	r2, r2, #5
    767c:	188a      	adds	r2, r1, r2
    767e:	18d3      	adds	r3, r2, r3
    7680:	2208      	movs	r2, #8
    7682:	701a      	strb	r2, [r3, #0]
    7684:	e00b      	b.n	769e <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    7686:	687b      	ldr	r3, [r7, #4]
    7688:	6819      	ldr	r1, [r3, #0]
    768a:	230f      	movs	r3, #15
    768c:	18fb      	adds	r3, r7, r3
    768e:	781a      	ldrb	r2, [r3, #0]
    7690:	2384      	movs	r3, #132	; 0x84
    7692:	005b      	lsls	r3, r3, #1
    7694:	0152      	lsls	r2, r2, #5
    7696:	188a      	adds	r2, r1, r2
    7698:	18d3      	adds	r3, r2, r3
    769a:	2204      	movs	r2, #4
    769c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    769e:	1cbb      	adds	r3, r7, #2
    76a0:	781b      	ldrb	r3, [r3, #0]
    76a2:	2b02      	cmp	r3, #2
    76a4:	d10b      	bne.n	76be <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    76a6:	687b      	ldr	r3, [r7, #4]
    76a8:	6819      	ldr	r1, [r3, #0]
    76aa:	230f      	movs	r3, #15
    76ac:	18fb      	adds	r3, r7, r3
    76ae:	781a      	ldrb	r2, [r3, #0]
    76b0:	2384      	movs	r3, #132	; 0x84
    76b2:	005b      	lsls	r3, r3, #1
    76b4:	0152      	lsls	r2, r2, #5
    76b6:	188a      	adds	r2, r1, r2
    76b8:	18d3      	adds	r3, r2, r3
    76ba:	2210      	movs	r2, #16
    76bc:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    76be:	1cbb      	adds	r3, r7, #2
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	2b03      	cmp	r3, #3
    76c4:	d11d      	bne.n	7702 <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    76c6:	1cfb      	adds	r3, r7, #3
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	b25b      	sxtb	r3, r3
    76cc:	2b00      	cmp	r3, #0
    76ce:	da0c      	bge.n	76ea <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	6819      	ldr	r1, [r3, #0]
    76d4:	230f      	movs	r3, #15
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	781a      	ldrb	r2, [r3, #0]
    76da:	2384      	movs	r3, #132	; 0x84
    76dc:	005b      	lsls	r3, r3, #1
    76de:	0152      	lsls	r2, r2, #5
    76e0:	188a      	adds	r2, r1, r2
    76e2:	18d3      	adds	r3, r2, r3
    76e4:	2240      	movs	r2, #64	; 0x40
    76e6:	701a      	strb	r2, [r3, #0]
    76e8:	e00b      	b.n	7702 <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	6819      	ldr	r1, [r3, #0]
    76ee:	230f      	movs	r3, #15
    76f0:	18fb      	adds	r3, r7, r3
    76f2:	781a      	ldrb	r2, [r3, #0]
    76f4:	2384      	movs	r3, #132	; 0x84
    76f6:	005b      	lsls	r3, r3, #1
    76f8:	0152      	lsls	r2, r2, #5
    76fa:	188a      	adds	r2, r1, r2
    76fc:	18d3      	adds	r3, r2, r3
    76fe:	2220      	movs	r2, #32
    7700:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    7702:	2300      	movs	r3, #0
}
    7704:	0018      	movs	r0, r3
    7706:	46bd      	mov	sp, r7
    7708:	b004      	add	sp, #16
    770a:	bd80      	pop	{r7, pc}
    770c:	00009210 	.word	0x00009210

00007710 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    7710:	b580      	push	{r7, lr}
    7712:	b082      	sub	sp, #8
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	2200      	movs	r2, #0
    771c:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	2200      	movs	r2, #0
    7722:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    7724:	687b      	ldr	r3, [r7, #4]
    7726:	2200      	movs	r2, #0
    7728:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	2201      	movs	r2, #1
    772e:	70da      	strb	r2, [r3, #3]
}
    7730:	46c0      	nop			; (mov r8, r8)
    7732:	46bd      	mov	sp, r7
    7734:	b002      	add	sp, #8
    7736:	bd80      	pop	{r7, pc}

00007738 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    7738:	b590      	push	{r4, r7, lr}
    773a:	b085      	sub	sp, #20
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
    7740:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    7742:	683b      	ldr	r3, [r7, #0]
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	230f      	movs	r3, #15
    7748:	18fb      	adds	r3, r7, r3
    774a:	210f      	movs	r1, #15
    774c:	400a      	ands	r2, r1
    774e:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    7750:	683b      	ldr	r3, [r7, #0]
    7752:	781b      	ldrb	r3, [r3, #0]
    7754:	b25b      	sxtb	r3, r3
    7756:	b2db      	uxtb	r3, r3
    7758:	09db      	lsrs	r3, r3, #7
    775a:	b2da      	uxtb	r2, r3
    775c:	230e      	movs	r3, #14
    775e:	18fb      	adds	r3, r7, r3
    7760:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    7762:	683b      	ldr	r3, [r7, #0]
    7764:	78db      	ldrb	r3, [r3, #3]
    7766:	2b04      	cmp	r3, #4
    7768:	d900      	bls.n	776c <usb_device_endpoint_set_config+0x34>
    776a:	e200      	b.n	7b6e <usb_device_endpoint_set_config+0x436>
    776c:	009a      	lsls	r2, r3, #2
    776e:	4be4      	ldr	r3, [pc, #912]	; (7b00 <usb_device_endpoint_set_config+0x3c8>)
    7770:	18d3      	adds	r3, r2, r3
    7772:	681b      	ldr	r3, [r3, #0]
    7774:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    7776:	687b      	ldr	r3, [r7, #4]
    7778:	681b      	ldr	r3, [r3, #0]
    777a:	220f      	movs	r2, #15
    777c:	18ba      	adds	r2, r7, r2
    777e:	7812      	ldrb	r2, [r2, #0]
    7780:	3208      	adds	r2, #8
    7782:	0152      	lsls	r2, r2, #5
    7784:	2100      	movs	r1, #0
    7786:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    7788:	2300      	movs	r3, #0
    778a:	e249      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	681b      	ldr	r3, [r3, #0]
    7790:	220f      	movs	r2, #15
    7792:	18ba      	adds	r2, r7, r2
    7794:	7812      	ldrb	r2, [r2, #0]
    7796:	3208      	adds	r2, #8
    7798:	0152      	lsls	r2, r2, #5
    779a:	5cd3      	ldrb	r3, [r2, r3]
    779c:	b2db      	uxtb	r3, r3
    779e:	001a      	movs	r2, r3
    77a0:	2307      	movs	r3, #7
    77a2:	4013      	ands	r3, r2
    77a4:	d130      	bne.n	7808 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    77a6:	687b      	ldr	r3, [r7, #4]
    77a8:	681b      	ldr	r3, [r3, #0]
    77aa:	220f      	movs	r2, #15
    77ac:	18ba      	adds	r2, r7, r2
    77ae:	7812      	ldrb	r2, [r2, #0]
    77b0:	3208      	adds	r2, #8
    77b2:	0152      	lsls	r2, r2, #5
    77b4:	5cd3      	ldrb	r3, [r2, r3]
    77b6:	b2db      	uxtb	r3, r3
    77b8:	001a      	movs	r2, r3
    77ba:	2370      	movs	r3, #112	; 0x70
    77bc:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    77be:	d123      	bne.n	7808 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    77c0:	687b      	ldr	r3, [r7, #4]
    77c2:	681b      	ldr	r3, [r3, #0]
    77c4:	220f      	movs	r2, #15
    77c6:	18ba      	adds	r2, r7, r2
    77c8:	7812      	ldrb	r2, [r2, #0]
    77ca:	3208      	adds	r2, #8
    77cc:	0152      	lsls	r2, r2, #5
    77ce:	2111      	movs	r1, #17
    77d0:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    77d2:	687b      	ldr	r3, [r7, #4]
    77d4:	681a      	ldr	r2, [r3, #0]
    77d6:	230f      	movs	r3, #15
    77d8:	18fb      	adds	r3, r7, r3
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	3308      	adds	r3, #8
    77de:	015b      	lsls	r3, r3, #5
    77e0:	18d3      	adds	r3, r2, r3
    77e2:	3305      	adds	r3, #5
    77e4:	2240      	movs	r2, #64	; 0x40
    77e6:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	681a      	ldr	r2, [r3, #0]
    77ec:	230f      	movs	r3, #15
    77ee:	18fb      	adds	r3, r7, r3
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	3308      	adds	r3, #8
    77f4:	015b      	lsls	r3, r3, #5
    77f6:	18d3      	adds	r3, r2, r3
    77f8:	3304      	adds	r3, #4
    77fa:	2280      	movs	r2, #128	; 0x80
    77fc:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    77fe:	683b      	ldr	r3, [r7, #0]
    7800:	789b      	ldrb	r3, [r3, #2]
    7802:	2b00      	cmp	r3, #0
    7804:	d102      	bne.n	780c <usb_device_endpoint_set_config+0xd4>
    7806:	e028      	b.n	785a <usb_device_endpoint_set_config+0x122>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    7808:	231c      	movs	r3, #28
    780a:	e209      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    780c:	230f      	movs	r3, #15
    780e:	18fb      	adds	r3, r7, r3
    7810:	7818      	ldrb	r0, [r3, #0]
    7812:	230f      	movs	r3, #15
    7814:	18fb      	adds	r3, r7, r3
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	4aba      	ldr	r2, [pc, #744]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    781a:	015b      	lsls	r3, r3, #5
    781c:	18d3      	adds	r3, r2, r3
    781e:	3304      	adds	r3, #4
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	2280      	movs	r2, #128	; 0x80
    7824:	0612      	lsls	r2, r2, #24
    7826:	431a      	orrs	r2, r3
    7828:	49b6      	ldr	r1, [pc, #728]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    782a:	0143      	lsls	r3, r0, #5
    782c:	18cb      	adds	r3, r1, r3
    782e:	3304      	adds	r3, #4
    7830:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7832:	230f      	movs	r3, #15
    7834:	18fb      	adds	r3, r7, r3
    7836:	7818      	ldrb	r0, [r3, #0]
    7838:	230f      	movs	r3, #15
    783a:	18fb      	adds	r3, r7, r3
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	4ab1      	ldr	r2, [pc, #708]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    7840:	015b      	lsls	r3, r3, #5
    7842:	18d3      	adds	r3, r2, r3
    7844:	3314      	adds	r3, #20
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	2280      	movs	r2, #128	; 0x80
    784a:	0612      	lsls	r2, r2, #24
    784c:	431a      	orrs	r2, r3
    784e:	49ad      	ldr	r1, [pc, #692]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    7850:	0143      	lsls	r3, r0, #5
    7852:	18cb      	adds	r3, r1, r3
    7854:	3314      	adds	r3, #20
    7856:	601a      	str	r2, [r3, #0]
    7858:	e023      	b.n	78a2 <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    785a:	230f      	movs	r3, #15
    785c:	18fb      	adds	r3, r7, r3
    785e:	7818      	ldrb	r0, [r3, #0]
    7860:	230f      	movs	r3, #15
    7862:	18fb      	adds	r3, r7, r3
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	4aa7      	ldr	r2, [pc, #668]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    7868:	015b      	lsls	r3, r3, #5
    786a:	18d3      	adds	r3, r2, r3
    786c:	3304      	adds	r3, #4
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	005b      	lsls	r3, r3, #1
    7872:	085a      	lsrs	r2, r3, #1
    7874:	49a3      	ldr	r1, [pc, #652]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    7876:	0143      	lsls	r3, r0, #5
    7878:	18cb      	adds	r3, r1, r3
    787a:	3304      	adds	r3, #4
    787c:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    787e:	230f      	movs	r3, #15
    7880:	18fb      	adds	r3, r7, r3
    7882:	7818      	ldrb	r0, [r3, #0]
    7884:	230f      	movs	r3, #15
    7886:	18fb      	adds	r3, r7, r3
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	4a9e      	ldr	r2, [pc, #632]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    788c:	015b      	lsls	r3, r3, #5
    788e:	18d3      	adds	r3, r2, r3
    7890:	3314      	adds	r3, #20
    7892:	681b      	ldr	r3, [r3, #0]
    7894:	005b      	lsls	r3, r3, #1
    7896:	085a      	lsrs	r2, r3, #1
    7898:	499a      	ldr	r1, [pc, #616]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    789a:	0143      	lsls	r3, r0, #5
    789c:	18cb      	adds	r3, r1, r3
    789e:	3314      	adds	r3, #20
    78a0:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    78a2:	230f      	movs	r3, #15
    78a4:	18fb      	adds	r3, r7, r3
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	683a      	ldr	r2, [r7, #0]
    78aa:	7852      	ldrb	r2, [r2, #1]
    78ac:	1c11      	adds	r1, r2, #0
    78ae:	2207      	movs	r2, #7
    78b0:	400a      	ands	r2, r1
    78b2:	b2d1      	uxtb	r1, r2
    78b4:	4a93      	ldr	r2, [pc, #588]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    78b6:	015b      	lsls	r3, r3, #5
    78b8:	18d3      	adds	r3, r2, r3
    78ba:	685a      	ldr	r2, [r3, #4]
    78bc:	2007      	movs	r0, #7
    78be:	4001      	ands	r1, r0
    78c0:	0709      	lsls	r1, r1, #28
    78c2:	4891      	ldr	r0, [pc, #580]	; (7b08 <usb_device_endpoint_set_config+0x3d0>)
    78c4:	4002      	ands	r2, r0
    78c6:	430a      	orrs	r2, r1
    78c8:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    78ca:	230f      	movs	r3, #15
    78cc:	18fb      	adds	r3, r7, r3
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	683a      	ldr	r2, [r7, #0]
    78d2:	7852      	ldrb	r2, [r2, #1]
    78d4:	1c11      	adds	r1, r2, #0
    78d6:	2207      	movs	r2, #7
    78d8:	400a      	ands	r2, r1
    78da:	b2d1      	uxtb	r1, r2
    78dc:	4a89      	ldr	r2, [pc, #548]	; (7b04 <usb_device_endpoint_set_config+0x3cc>)
    78de:	015b      	lsls	r3, r3, #5
    78e0:	18d3      	adds	r3, r2, r3
    78e2:	3310      	adds	r3, #16
    78e4:	685a      	ldr	r2, [r3, #4]
    78e6:	2007      	movs	r0, #7
    78e8:	4001      	ands	r1, r0
    78ea:	0709      	lsls	r1, r1, #28
    78ec:	4886      	ldr	r0, [pc, #536]	; (7b08 <usb_device_endpoint_set_config+0x3d0>)
    78ee:	4002      	ands	r2, r0
    78f0:	430a      	orrs	r2, r1
    78f2:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    78f4:	2300      	movs	r3, #0
    78f6:	e193      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    78f8:	230e      	movs	r3, #14
    78fa:	18fb      	adds	r3, r7, r3
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	2b00      	cmp	r3, #0
    7900:	d030      	beq.n	7964 <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7902:	687b      	ldr	r3, [r7, #4]
    7904:	681b      	ldr	r3, [r3, #0]
    7906:	220f      	movs	r2, #15
    7908:	18ba      	adds	r2, r7, r2
    790a:	7812      	ldrb	r2, [r2, #0]
    790c:	3208      	adds	r2, #8
    790e:	0152      	lsls	r2, r2, #5
    7910:	5cd3      	ldrb	r3, [r2, r3]
    7912:	b2db      	uxtb	r3, r3
    7914:	001a      	movs	r2, r3
    7916:	2370      	movs	r3, #112	; 0x70
    7918:	4013      	ands	r3, r2
    791a:	d121      	bne.n	7960 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	681a      	ldr	r2, [r3, #0]
    7920:	230f      	movs	r3, #15
    7922:	18fb      	adds	r3, r7, r3
    7924:	7819      	ldrb	r1, [r3, #0]
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	681b      	ldr	r3, [r3, #0]
    792a:	200f      	movs	r0, #15
    792c:	1838      	adds	r0, r7, r0
    792e:	7800      	ldrb	r0, [r0, #0]
    7930:	3008      	adds	r0, #8
    7932:	0140      	lsls	r0, r0, #5
    7934:	5cc3      	ldrb	r3, [r0, r3]
    7936:	b2db      	uxtb	r3, r3
    7938:	2020      	movs	r0, #32
    793a:	4303      	orrs	r3, r0
    793c:	b2d8      	uxtb	r0, r3
    793e:	000b      	movs	r3, r1
    7940:	3308      	adds	r3, #8
    7942:	015b      	lsls	r3, r3, #5
    7944:	1c01      	adds	r1, r0, #0
    7946:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	681a      	ldr	r2, [r3, #0]
    794c:	230f      	movs	r3, #15
    794e:	18fb      	adds	r3, r7, r3
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	3308      	adds	r3, #8
    7954:	015b      	lsls	r3, r3, #5
    7956:	18d3      	adds	r3, r2, r3
    7958:	3304      	adds	r3, #4
    795a:	2280      	movs	r2, #128	; 0x80
    795c:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    795e:	e107      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    7960:	231c      	movs	r3, #28
    7962:	e15d      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	681b      	ldr	r3, [r3, #0]
    7968:	220f      	movs	r2, #15
    796a:	18ba      	adds	r2, r7, r2
    796c:	7812      	ldrb	r2, [r2, #0]
    796e:	3208      	adds	r2, #8
    7970:	0152      	lsls	r2, r2, #5
    7972:	5cd3      	ldrb	r3, [r2, r3]
    7974:	b2db      	uxtb	r3, r3
    7976:	001a      	movs	r2, r3
    7978:	2307      	movs	r3, #7
    797a:	4013      	ands	r3, r2
    797c:	d121      	bne.n	79c2 <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	681a      	ldr	r2, [r3, #0]
    7982:	230f      	movs	r3, #15
    7984:	18fb      	adds	r3, r7, r3
    7986:	7819      	ldrb	r1, [r3, #0]
    7988:	687b      	ldr	r3, [r7, #4]
    798a:	681b      	ldr	r3, [r3, #0]
    798c:	200f      	movs	r0, #15
    798e:	1838      	adds	r0, r7, r0
    7990:	7800      	ldrb	r0, [r0, #0]
    7992:	3008      	adds	r0, #8
    7994:	0140      	lsls	r0, r0, #5
    7996:	5cc3      	ldrb	r3, [r0, r3]
    7998:	b2db      	uxtb	r3, r3
    799a:	2002      	movs	r0, #2
    799c:	4303      	orrs	r3, r0
    799e:	b2d8      	uxtb	r0, r3
    79a0:	000b      	movs	r3, r1
    79a2:	3308      	adds	r3, #8
    79a4:	015b      	lsls	r3, r3, #5
    79a6:	1c01      	adds	r1, r0, #0
    79a8:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	681a      	ldr	r2, [r3, #0]
    79ae:	230f      	movs	r3, #15
    79b0:	18fb      	adds	r3, r7, r3
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	3308      	adds	r3, #8
    79b6:	015b      	lsls	r3, r3, #5
    79b8:	18d3      	adds	r3, r2, r3
    79ba:	3305      	adds	r3, #5
    79bc:	2240      	movs	r2, #64	; 0x40
    79be:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    79c0:	e0d6      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    79c2:	231c      	movs	r3, #28
    79c4:	e12c      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    79c6:	230e      	movs	r3, #14
    79c8:	18fb      	adds	r3, r7, r3
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	2b00      	cmp	r3, #0
    79ce:	d030      	beq.n	7a32 <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	681b      	ldr	r3, [r3, #0]
    79d4:	220f      	movs	r2, #15
    79d6:	18ba      	adds	r2, r7, r2
    79d8:	7812      	ldrb	r2, [r2, #0]
    79da:	3208      	adds	r2, #8
    79dc:	0152      	lsls	r2, r2, #5
    79de:	5cd3      	ldrb	r3, [r2, r3]
    79e0:	b2db      	uxtb	r3, r3
    79e2:	001a      	movs	r2, r3
    79e4:	2370      	movs	r3, #112	; 0x70
    79e6:	4013      	ands	r3, r2
    79e8:	d121      	bne.n	7a2e <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	681a      	ldr	r2, [r3, #0]
    79ee:	230f      	movs	r3, #15
    79f0:	18fb      	adds	r3, r7, r3
    79f2:	7819      	ldrb	r1, [r3, #0]
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	200f      	movs	r0, #15
    79fa:	1838      	adds	r0, r7, r0
    79fc:	7800      	ldrb	r0, [r0, #0]
    79fe:	3008      	adds	r0, #8
    7a00:	0140      	lsls	r0, r0, #5
    7a02:	5cc3      	ldrb	r3, [r0, r3]
    7a04:	b2db      	uxtb	r3, r3
    7a06:	2030      	movs	r0, #48	; 0x30
    7a08:	4303      	orrs	r3, r0
    7a0a:	b2d8      	uxtb	r0, r3
    7a0c:	000b      	movs	r3, r1
    7a0e:	3308      	adds	r3, #8
    7a10:	015b      	lsls	r3, r3, #5
    7a12:	1c01      	adds	r1, r0, #0
    7a14:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	681a      	ldr	r2, [r3, #0]
    7a1a:	230f      	movs	r3, #15
    7a1c:	18fb      	adds	r3, r7, r3
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	3308      	adds	r3, #8
    7a22:	015b      	lsls	r3, r3, #5
    7a24:	18d3      	adds	r3, r2, r3
    7a26:	3304      	adds	r3, #4
    7a28:	2280      	movs	r2, #128	; 0x80
    7a2a:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7a2c:	e0a0      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    7a2e:	231c      	movs	r3, #28
    7a30:	e0f6      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	220f      	movs	r2, #15
    7a38:	18ba      	adds	r2, r7, r2
    7a3a:	7812      	ldrb	r2, [r2, #0]
    7a3c:	3208      	adds	r2, #8
    7a3e:	0152      	lsls	r2, r2, #5
    7a40:	5cd3      	ldrb	r3, [r2, r3]
    7a42:	b2db      	uxtb	r3, r3
    7a44:	001a      	movs	r2, r3
    7a46:	2307      	movs	r3, #7
    7a48:	4013      	ands	r3, r2
    7a4a:	d121      	bne.n	7a90 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    7a4c:	687b      	ldr	r3, [r7, #4]
    7a4e:	681a      	ldr	r2, [r3, #0]
    7a50:	230f      	movs	r3, #15
    7a52:	18fb      	adds	r3, r7, r3
    7a54:	7819      	ldrb	r1, [r3, #0]
    7a56:	687b      	ldr	r3, [r7, #4]
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	200f      	movs	r0, #15
    7a5c:	1838      	adds	r0, r7, r0
    7a5e:	7800      	ldrb	r0, [r0, #0]
    7a60:	3008      	adds	r0, #8
    7a62:	0140      	lsls	r0, r0, #5
    7a64:	5cc3      	ldrb	r3, [r0, r3]
    7a66:	b2db      	uxtb	r3, r3
    7a68:	2003      	movs	r0, #3
    7a6a:	4303      	orrs	r3, r0
    7a6c:	b2d8      	uxtb	r0, r3
    7a6e:	000b      	movs	r3, r1
    7a70:	3308      	adds	r3, #8
    7a72:	015b      	lsls	r3, r3, #5
    7a74:	1c01      	adds	r1, r0, #0
    7a76:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	681a      	ldr	r2, [r3, #0]
    7a7c:	230f      	movs	r3, #15
    7a7e:	18fb      	adds	r3, r7, r3
    7a80:	781b      	ldrb	r3, [r3, #0]
    7a82:	3308      	adds	r3, #8
    7a84:	015b      	lsls	r3, r3, #5
    7a86:	18d3      	adds	r3, r2, r3
    7a88:	3305      	adds	r3, #5
    7a8a:	2240      	movs	r2, #64	; 0x40
    7a8c:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7a8e:	e06f      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    7a90:	231c      	movs	r3, #28
    7a92:	e0c5      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    7a94:	230e      	movs	r3, #14
    7a96:	18fb      	adds	r3, r7, r3
    7a98:	781b      	ldrb	r3, [r3, #0]
    7a9a:	2b00      	cmp	r3, #0
    7a9c:	d036      	beq.n	7b0c <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	681b      	ldr	r3, [r3, #0]
    7aa2:	220f      	movs	r2, #15
    7aa4:	18ba      	adds	r2, r7, r2
    7aa6:	7812      	ldrb	r2, [r2, #0]
    7aa8:	3208      	adds	r2, #8
    7aaa:	0152      	lsls	r2, r2, #5
    7aac:	5cd3      	ldrb	r3, [r2, r3]
    7aae:	b2db      	uxtb	r3, r3
    7ab0:	001a      	movs	r2, r3
    7ab2:	2370      	movs	r3, #112	; 0x70
    7ab4:	4013      	ands	r3, r2
    7ab6:	d121      	bne.n	7afc <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	681a      	ldr	r2, [r3, #0]
    7abc:	230f      	movs	r3, #15
    7abe:	18fb      	adds	r3, r7, r3
    7ac0:	7819      	ldrb	r1, [r3, #0]
    7ac2:	687b      	ldr	r3, [r7, #4]
    7ac4:	681b      	ldr	r3, [r3, #0]
    7ac6:	200f      	movs	r0, #15
    7ac8:	1838      	adds	r0, r7, r0
    7aca:	7800      	ldrb	r0, [r0, #0]
    7acc:	3008      	adds	r0, #8
    7ace:	0140      	lsls	r0, r0, #5
    7ad0:	5cc3      	ldrb	r3, [r0, r3]
    7ad2:	b2db      	uxtb	r3, r3
    7ad4:	2040      	movs	r0, #64	; 0x40
    7ad6:	4303      	orrs	r3, r0
    7ad8:	b2d8      	uxtb	r0, r3
    7ada:	000b      	movs	r3, r1
    7adc:	3308      	adds	r3, #8
    7ade:	015b      	lsls	r3, r3, #5
    7ae0:	1c01      	adds	r1, r0, #0
    7ae2:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	681a      	ldr	r2, [r3, #0]
    7ae8:	230f      	movs	r3, #15
    7aea:	18fb      	adds	r3, r7, r3
    7aec:	781b      	ldrb	r3, [r3, #0]
    7aee:	3308      	adds	r3, #8
    7af0:	015b      	lsls	r3, r3, #5
    7af2:	18d3      	adds	r3, r2, r3
    7af4:	3304      	adds	r3, #4
    7af6:	2280      	movs	r2, #128	; 0x80
    7af8:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7afa:	e039      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    7afc:	231c      	movs	r3, #28
    7afe:	e08f      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
    7b00:	00009214 	.word	0x00009214
    7b04:	20000504 	.word	0x20000504
    7b08:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	681b      	ldr	r3, [r3, #0]
    7b10:	220f      	movs	r2, #15
    7b12:	18ba      	adds	r2, r7, r2
    7b14:	7812      	ldrb	r2, [r2, #0]
    7b16:	3208      	adds	r2, #8
    7b18:	0152      	lsls	r2, r2, #5
    7b1a:	5cd3      	ldrb	r3, [r2, r3]
    7b1c:	b2db      	uxtb	r3, r3
    7b1e:	001a      	movs	r2, r3
    7b20:	2307      	movs	r3, #7
    7b22:	4013      	ands	r3, r2
    7b24:	d121      	bne.n	7b6a <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	681a      	ldr	r2, [r3, #0]
    7b2a:	230f      	movs	r3, #15
    7b2c:	18fb      	adds	r3, r7, r3
    7b2e:	7819      	ldrb	r1, [r3, #0]
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	681b      	ldr	r3, [r3, #0]
    7b34:	200f      	movs	r0, #15
    7b36:	1838      	adds	r0, r7, r0
    7b38:	7800      	ldrb	r0, [r0, #0]
    7b3a:	3008      	adds	r0, #8
    7b3c:	0140      	lsls	r0, r0, #5
    7b3e:	5cc3      	ldrb	r3, [r0, r3]
    7b40:	b2db      	uxtb	r3, r3
    7b42:	2004      	movs	r0, #4
    7b44:	4303      	orrs	r3, r0
    7b46:	b2d8      	uxtb	r0, r3
    7b48:	000b      	movs	r3, r1
    7b4a:	3308      	adds	r3, #8
    7b4c:	015b      	lsls	r3, r3, #5
    7b4e:	1c01      	adds	r1, r0, #0
    7b50:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	681a      	ldr	r2, [r3, #0]
    7b56:	230f      	movs	r3, #15
    7b58:	18fb      	adds	r3, r7, r3
    7b5a:	781b      	ldrb	r3, [r3, #0]
    7b5c:	3308      	adds	r3, #8
    7b5e:	015b      	lsls	r3, r3, #5
    7b60:	18d3      	adds	r3, r2, r3
    7b62:	3305      	adds	r3, #5
    7b64:	2240      	movs	r2, #64	; 0x40
    7b66:	701a      	strb	r2, [r3, #0]
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    7b68:	e002      	b.n	7b70 <usb_device_endpoint_set_config+0x438>
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    7b6a:	231c      	movs	r3, #28
    7b6c:	e058      	b.n	7c20 <usb_device_endpoint_set_config+0x4e8>
				}
			}
			break;

		default:
			break;
    7b6e:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7b70:	230f      	movs	r3, #15
    7b72:	18fb      	adds	r3, r7, r3
    7b74:	7818      	ldrb	r0, [r3, #0]
    7b76:	230e      	movs	r3, #14
    7b78:	18fb      	adds	r3, r7, r3
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	683a      	ldr	r2, [r7, #0]
    7b7e:	7852      	ldrb	r2, [r2, #1]
    7b80:	1c11      	adds	r1, r2, #0
    7b82:	2207      	movs	r2, #7
    7b84:	400a      	ands	r2, r1
    7b86:	b2d1      	uxtb	r1, r2
    7b88:	4a27      	ldr	r2, [pc, #156]	; (7c28 <usb_device_endpoint_set_config+0x4f0>)
    7b8a:	0040      	lsls	r0, r0, #1
    7b8c:	18c3      	adds	r3, r0, r3
    7b8e:	011b      	lsls	r3, r3, #4
    7b90:	18d3      	adds	r3, r2, r3
    7b92:	685a      	ldr	r2, [r3, #4]
    7b94:	2007      	movs	r0, #7
    7b96:	4001      	ands	r1, r0
    7b98:	0709      	lsls	r1, r1, #28
    7b9a:	4824      	ldr	r0, [pc, #144]	; (7c2c <usb_device_endpoint_set_config+0x4f4>)
    7b9c:	4002      	ands	r2, r0
    7b9e:	430a      	orrs	r2, r1
    7ba0:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    7ba2:	683b      	ldr	r3, [r7, #0]
    7ba4:	789b      	ldrb	r3, [r3, #2]
    7ba6:	2b00      	cmp	r3, #0
    7ba8:	d01d      	beq.n	7be6 <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7baa:	230f      	movs	r3, #15
    7bac:	18fb      	adds	r3, r7, r3
    7bae:	781c      	ldrb	r4, [r3, #0]
    7bb0:	230e      	movs	r3, #14
    7bb2:	18fb      	adds	r3, r7, r3
    7bb4:	7818      	ldrb	r0, [r3, #0]
    7bb6:	230f      	movs	r3, #15
    7bb8:	18fb      	adds	r3, r7, r3
    7bba:	7819      	ldrb	r1, [r3, #0]
    7bbc:	230e      	movs	r3, #14
    7bbe:	18fb      	adds	r3, r7, r3
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	4a19      	ldr	r2, [pc, #100]	; (7c28 <usb_device_endpoint_set_config+0x4f0>)
    7bc4:	0049      	lsls	r1, r1, #1
    7bc6:	18cb      	adds	r3, r1, r3
    7bc8:	011b      	lsls	r3, r3, #4
    7bca:	18d3      	adds	r3, r2, r3
    7bcc:	3304      	adds	r3, #4
    7bce:	681b      	ldr	r3, [r3, #0]
    7bd0:	2280      	movs	r2, #128	; 0x80
    7bd2:	0612      	lsls	r2, r2, #24
    7bd4:	431a      	orrs	r2, r3
    7bd6:	4914      	ldr	r1, [pc, #80]	; (7c28 <usb_device_endpoint_set_config+0x4f0>)
    7bd8:	0063      	lsls	r3, r4, #1
    7bda:	181b      	adds	r3, r3, r0
    7bdc:	011b      	lsls	r3, r3, #4
    7bde:	18cb      	adds	r3, r1, r3
    7be0:	3304      	adds	r3, #4
    7be2:	601a      	str	r2, [r3, #0]
    7be4:	e01b      	b.n	7c1e <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7be6:	230f      	movs	r3, #15
    7be8:	18fb      	adds	r3, r7, r3
    7bea:	781c      	ldrb	r4, [r3, #0]
    7bec:	230e      	movs	r3, #14
    7bee:	18fb      	adds	r3, r7, r3
    7bf0:	7818      	ldrb	r0, [r3, #0]
    7bf2:	230f      	movs	r3, #15
    7bf4:	18fb      	adds	r3, r7, r3
    7bf6:	7819      	ldrb	r1, [r3, #0]
    7bf8:	230e      	movs	r3, #14
    7bfa:	18fb      	adds	r3, r7, r3
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	4a0a      	ldr	r2, [pc, #40]	; (7c28 <usb_device_endpoint_set_config+0x4f0>)
    7c00:	0049      	lsls	r1, r1, #1
    7c02:	18cb      	adds	r3, r1, r3
    7c04:	011b      	lsls	r3, r3, #4
    7c06:	18d3      	adds	r3, r2, r3
    7c08:	3304      	adds	r3, #4
    7c0a:	681b      	ldr	r3, [r3, #0]
    7c0c:	005b      	lsls	r3, r3, #1
    7c0e:	085a      	lsrs	r2, r3, #1
    7c10:	4905      	ldr	r1, [pc, #20]	; (7c28 <usb_device_endpoint_set_config+0x4f0>)
    7c12:	0063      	lsls	r3, r4, #1
    7c14:	181b      	adds	r3, r3, r0
    7c16:	011b      	lsls	r3, r3, #4
    7c18:	18cb      	adds	r3, r1, r3
    7c1a:	3304      	adds	r3, #4
    7c1c:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    7c1e:	2300      	movs	r3, #0
}
    7c20:	0018      	movs	r0, r3
    7c22:	46bd      	mov	sp, r7
    7c24:	b005      	add	sp, #20
    7c26:	bd90      	pop	{r4, r7, pc}
    7c28:	20000504 	.word	0x20000504
    7c2c:	8fffffff 	.word	0x8fffffff

00007c30 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    7c30:	b580      	push	{r7, lr}
    7c32:	b084      	sub	sp, #16
    7c34:	af00      	add	r7, sp, #0
    7c36:	6078      	str	r0, [r7, #4]
    7c38:	000a      	movs	r2, r1
    7c3a:	1cfb      	adds	r3, r7, #3
    7c3c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    7c3e:	230f      	movs	r3, #15
    7c40:	18fb      	adds	r3, r7, r3
    7c42:	1cfa      	adds	r2, r7, #3
    7c44:	7812      	ldrb	r2, [r2, #0]
    7c46:	210f      	movs	r1, #15
    7c48:	400a      	ands	r2, r1
    7c4a:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    7c4c:	1cfb      	adds	r3, r7, #3
    7c4e:	781b      	ldrb	r3, [r3, #0]
    7c50:	b25b      	sxtb	r3, r3
    7c52:	2b00      	cmp	r3, #0
    7c54:	da16      	bge.n	7c84 <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7c56:	687b      	ldr	r3, [r7, #4]
    7c58:	681a      	ldr	r2, [r3, #0]
    7c5a:	230f      	movs	r3, #15
    7c5c:	18fb      	adds	r3, r7, r3
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	3308      	adds	r3, #8
    7c62:	015b      	lsls	r3, r3, #5
    7c64:	18d3      	adds	r3, r2, r3
    7c66:	3304      	adds	r3, #4
    7c68:	2280      	movs	r2, #128	; 0x80
    7c6a:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	681a      	ldr	r2, [r3, #0]
    7c70:	230f      	movs	r3, #15
    7c72:	18fb      	adds	r3, r7, r3
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	3308      	adds	r3, #8
    7c78:	015b      	lsls	r3, r3, #5
    7c7a:	18d3      	adds	r3, r2, r3
    7c7c:	3307      	adds	r3, #7
    7c7e:	2202      	movs	r2, #2
    7c80:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    7c82:	e015      	b.n	7cb0 <usb_device_endpoint_abort_job+0x80>
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7c84:	687b      	ldr	r3, [r7, #4]
    7c86:	681a      	ldr	r2, [r3, #0]
    7c88:	230f      	movs	r3, #15
    7c8a:	18fb      	adds	r3, r7, r3
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	3308      	adds	r3, #8
    7c90:	015b      	lsls	r3, r3, #5
    7c92:	18d3      	adds	r3, r2, r3
    7c94:	3305      	adds	r3, #5
    7c96:	2240      	movs	r2, #64	; 0x40
    7c98:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	681a      	ldr	r2, [r3, #0]
    7c9e:	230f      	movs	r3, #15
    7ca0:	18fb      	adds	r3, r7, r3
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	3308      	adds	r3, #8
    7ca6:	015b      	lsls	r3, r3, #5
    7ca8:	18d3      	adds	r3, r2, r3
    7caa:	3307      	adds	r3, #7
    7cac:	2201      	movs	r2, #1
    7cae:	701a      	strb	r2, [r3, #0]
	}
}
    7cb0:	46c0      	nop			; (mov r8, r8)
    7cb2:	46bd      	mov	sp, r7
    7cb4:	b004      	add	sp, #16
    7cb6:	bd80      	pop	{r7, pc}

00007cb8 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    7cb8:	b580      	push	{r7, lr}
    7cba:	b084      	sub	sp, #16
    7cbc:	af00      	add	r7, sp, #0
    7cbe:	6078      	str	r0, [r7, #4]
    7cc0:	000a      	movs	r2, r1
    7cc2:	1cfb      	adds	r3, r7, #3
    7cc4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7cc6:	230f      	movs	r3, #15
    7cc8:	18fb      	adds	r3, r7, r3
    7cca:	1cfa      	adds	r2, r7, #3
    7ccc:	7812      	ldrb	r2, [r2, #0]
    7cce:	210f      	movs	r1, #15
    7cd0:	400a      	ands	r2, r1
    7cd2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7cd4:	1cfb      	adds	r3, r7, #3
    7cd6:	781b      	ldrb	r3, [r3, #0]
    7cd8:	b25b      	sxtb	r3, r3
    7cda:	2b00      	cmp	r3, #0
    7cdc:	da11      	bge.n	7d02 <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	681a      	ldr	r2, [r3, #0]
    7ce2:	230f      	movs	r3, #15
    7ce4:	18fb      	adds	r3, r7, r3
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	3308      	adds	r3, #8
    7cea:	015b      	lsls	r3, r3, #5
    7cec:	18d3      	adds	r3, r2, r3
    7cee:	3306      	adds	r3, #6
    7cf0:	781b      	ldrb	r3, [r3, #0]
    7cf2:	b2db      	uxtb	r3, r3
    7cf4:	001a      	movs	r2, r3
    7cf6:	2320      	movs	r3, #32
    7cf8:	4013      	ands	r3, r2
    7cfa:	1e5a      	subs	r2, r3, #1
    7cfc:	4193      	sbcs	r3, r2
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	e010      	b.n	7d24 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	681a      	ldr	r2, [r3, #0]
    7d06:	230f      	movs	r3, #15
    7d08:	18fb      	adds	r3, r7, r3
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	3308      	adds	r3, #8
    7d0e:	015b      	lsls	r3, r3, #5
    7d10:	18d3      	adds	r3, r2, r3
    7d12:	3306      	adds	r3, #6
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	b2db      	uxtb	r3, r3
    7d18:	001a      	movs	r2, r3
    7d1a:	2310      	movs	r3, #16
    7d1c:	4013      	ands	r3, r2
    7d1e:	1e5a      	subs	r2, r3, #1
    7d20:	4193      	sbcs	r3, r2
    7d22:	b2db      	uxtb	r3, r3
	}
}
    7d24:	0018      	movs	r0, r3
    7d26:	46bd      	mov	sp, r7
    7d28:	b004      	add	sp, #16
    7d2a:	bd80      	pop	{r7, pc}

00007d2c <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    7d2c:	b580      	push	{r7, lr}
    7d2e:	b084      	sub	sp, #16
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
    7d34:	000a      	movs	r2, r1
    7d36:	1cfb      	adds	r3, r7, #3
    7d38:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7d3a:	230f      	movs	r3, #15
    7d3c:	18fb      	adds	r3, r7, r3
    7d3e:	1cfa      	adds	r2, r7, #3
    7d40:	7812      	ldrb	r2, [r2, #0]
    7d42:	210f      	movs	r1, #15
    7d44:	400a      	ands	r2, r1
    7d46:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    7d48:	1cfb      	adds	r3, r7, #3
    7d4a:	781b      	ldrb	r3, [r3, #0]
    7d4c:	b25b      	sxtb	r3, r3
    7d4e:	2b00      	cmp	r3, #0
    7d50:	da0b      	bge.n	7d6a <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	681a      	ldr	r2, [r3, #0]
    7d56:	230f      	movs	r3, #15
    7d58:	18fb      	adds	r3, r7, r3
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	3308      	adds	r3, #8
    7d5e:	015b      	lsls	r3, r3, #5
    7d60:	18d3      	adds	r3, r2, r3
    7d62:	3305      	adds	r3, #5
    7d64:	2220      	movs	r2, #32
    7d66:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    7d68:	e00a      	b.n	7d80 <usb_device_endpoint_set_halt+0x54>

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    7d6a:	687b      	ldr	r3, [r7, #4]
    7d6c:	681a      	ldr	r2, [r3, #0]
    7d6e:	230f      	movs	r3, #15
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	3308      	adds	r3, #8
    7d76:	015b      	lsls	r3, r3, #5
    7d78:	18d3      	adds	r3, r2, r3
    7d7a:	3305      	adds	r3, #5
    7d7c:	2210      	movs	r2, #16
    7d7e:	701a      	strb	r2, [r3, #0]
	}
}
    7d80:	46c0      	nop			; (mov r8, r8)
    7d82:	46bd      	mov	sp, r7
    7d84:	b004      	add	sp, #16
    7d86:	bd80      	pop	{r7, pc}

00007d88 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b084      	sub	sp, #16
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
    7d90:	000a      	movs	r2, r1
    7d92:	1cfb      	adds	r3, r7, #3
    7d94:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7d96:	230f      	movs	r3, #15
    7d98:	18fb      	adds	r3, r7, r3
    7d9a:	1cfa      	adds	r2, r7, #3
    7d9c:	7812      	ldrb	r2, [r2, #0]
    7d9e:	210f      	movs	r1, #15
    7da0:	400a      	ands	r2, r1
    7da2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7da4:	1cfb      	adds	r3, r7, #3
    7da6:	781b      	ldrb	r3, [r3, #0]
    7da8:	b25b      	sxtb	r3, r3
    7daa:	2b00      	cmp	r3, #0
    7dac:	da3f      	bge.n	7e2e <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	681a      	ldr	r2, [r3, #0]
    7db2:	230f      	movs	r3, #15
    7db4:	18fb      	adds	r3, r7, r3
    7db6:	781b      	ldrb	r3, [r3, #0]
    7db8:	3308      	adds	r3, #8
    7dba:	015b      	lsls	r3, r3, #5
    7dbc:	18d3      	adds	r3, r2, r3
    7dbe:	3306      	adds	r3, #6
    7dc0:	781b      	ldrb	r3, [r3, #0]
    7dc2:	b2db      	uxtb	r3, r3
    7dc4:	001a      	movs	r2, r3
    7dc6:	2320      	movs	r3, #32
    7dc8:	4013      	ands	r3, r2
    7dca:	d06f      	beq.n	7eac <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	681a      	ldr	r2, [r3, #0]
    7dd0:	230f      	movs	r3, #15
    7dd2:	18fb      	adds	r3, r7, r3
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	3308      	adds	r3, #8
    7dd8:	015b      	lsls	r3, r3, #5
    7dda:	18d3      	adds	r3, r2, r3
    7ddc:	3304      	adds	r3, #4
    7dde:	2220      	movs	r2, #32
    7de0:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	681a      	ldr	r2, [r3, #0]
    7de6:	230f      	movs	r3, #15
    7de8:	18fb      	adds	r3, r7, r3
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	3308      	adds	r3, #8
    7dee:	015b      	lsls	r3, r3, #5
    7df0:	18d3      	adds	r3, r2, r3
    7df2:	3307      	adds	r3, #7
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	b2db      	uxtb	r3, r3
    7df8:	001a      	movs	r2, r3
    7dfa:	2340      	movs	r3, #64	; 0x40
    7dfc:	4013      	ands	r3, r2
    7dfe:	d055      	beq.n	7eac <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	681a      	ldr	r2, [r3, #0]
    7e04:	230f      	movs	r3, #15
    7e06:	18fb      	adds	r3, r7, r3
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	3308      	adds	r3, #8
    7e0c:	015b      	lsls	r3, r3, #5
    7e0e:	18d3      	adds	r3, r2, r3
    7e10:	3307      	adds	r3, #7
    7e12:	2240      	movs	r2, #64	; 0x40
    7e14:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    7e16:	687b      	ldr	r3, [r7, #4]
    7e18:	681a      	ldr	r2, [r3, #0]
    7e1a:	230f      	movs	r3, #15
    7e1c:	18fb      	adds	r3, r7, r3
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	3308      	adds	r3, #8
    7e22:	015b      	lsls	r3, r3, #5
    7e24:	18d3      	adds	r3, r2, r3
    7e26:	3304      	adds	r3, #4
    7e28:	2202      	movs	r2, #2
    7e2a:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    7e2c:	e03e      	b.n	7eac <usb_device_endpoint_clear_halt+0x124>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	681a      	ldr	r2, [r3, #0]
    7e32:	230f      	movs	r3, #15
    7e34:	18fb      	adds	r3, r7, r3
    7e36:	781b      	ldrb	r3, [r3, #0]
    7e38:	3308      	adds	r3, #8
    7e3a:	015b      	lsls	r3, r3, #5
    7e3c:	18d3      	adds	r3, r2, r3
    7e3e:	3306      	adds	r3, #6
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	b2db      	uxtb	r3, r3
    7e44:	001a      	movs	r2, r3
    7e46:	2310      	movs	r3, #16
    7e48:	4013      	ands	r3, r2
    7e4a:	d02f      	beq.n	7eac <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	681a      	ldr	r2, [r3, #0]
    7e50:	230f      	movs	r3, #15
    7e52:	18fb      	adds	r3, r7, r3
    7e54:	781b      	ldrb	r3, [r3, #0]
    7e56:	3308      	adds	r3, #8
    7e58:	015b      	lsls	r3, r3, #5
    7e5a:	18d3      	adds	r3, r2, r3
    7e5c:	3304      	adds	r3, #4
    7e5e:	2210      	movs	r2, #16
    7e60:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	681a      	ldr	r2, [r3, #0]
    7e66:	230f      	movs	r3, #15
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	3308      	adds	r3, #8
    7e6e:	015b      	lsls	r3, r3, #5
    7e70:	18d3      	adds	r3, r2, r3
    7e72:	3307      	adds	r3, #7
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	b2db      	uxtb	r3, r3
    7e78:	001a      	movs	r2, r3
    7e7a:	2320      	movs	r3, #32
    7e7c:	4013      	ands	r3, r2
    7e7e:	d015      	beq.n	7eac <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	681a      	ldr	r2, [r3, #0]
    7e84:	230f      	movs	r3, #15
    7e86:	18fb      	adds	r3, r7, r3
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	3308      	adds	r3, #8
    7e8c:	015b      	lsls	r3, r3, #5
    7e8e:	18d3      	adds	r3, r2, r3
    7e90:	3307      	adds	r3, #7
    7e92:	2220      	movs	r2, #32
    7e94:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	681a      	ldr	r2, [r3, #0]
    7e9a:	230f      	movs	r3, #15
    7e9c:	18fb      	adds	r3, r7, r3
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	3308      	adds	r3, #8
    7ea2:	015b      	lsls	r3, r3, #5
    7ea4:	18d3      	adds	r3, r2, r3
    7ea6:	3304      	adds	r3, #4
    7ea8:	2201      	movs	r2, #1
    7eaa:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
    7eac:	46c0      	nop			; (mov r8, r8)
    7eae:	46bd      	mov	sp, r7
    7eb0:	b004      	add	sp, #16
    7eb2:	bd80      	pop	{r7, pc}

00007eb4 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7eb4:	b580      	push	{r7, lr}
    7eb6:	b086      	sub	sp, #24
    7eb8:	af00      	add	r7, sp, #0
    7eba:	60f8      	str	r0, [r7, #12]
    7ebc:	607a      	str	r2, [r7, #4]
    7ebe:	603b      	str	r3, [r7, #0]
    7ec0:	230b      	movs	r3, #11
    7ec2:	18fb      	adds	r3, r7, r3
    7ec4:	1c0a      	adds	r2, r1, #0
    7ec6:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    7ec8:	68fb      	ldr	r3, [r7, #12]
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	220b      	movs	r2, #11
    7ece:	18ba      	adds	r2, r7, r2
    7ed0:	7812      	ldrb	r2, [r2, #0]
    7ed2:	3208      	adds	r2, #8
    7ed4:	0152      	lsls	r2, r2, #5
    7ed6:	5cd3      	ldrb	r3, [r2, r3]
    7ed8:	065b      	lsls	r3, r3, #25
    7eda:	0f5b      	lsrs	r3, r3, #29
    7edc:	b2da      	uxtb	r2, r3
    7ede:	2317      	movs	r3, #23
    7ee0:	18fb      	adds	r3, r7, r3
    7ee2:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7ee4:	2317      	movs	r3, #23
    7ee6:	18fb      	adds	r3, r7, r3
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	2b00      	cmp	r3, #0
    7eec:	d101      	bne.n	7ef2 <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    7eee:	231c      	movs	r3, #28
    7ef0:	e032      	b.n	7f58 <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    7ef2:	230b      	movs	r3, #11
    7ef4:	18fb      	adds	r3, r7, r3
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	687a      	ldr	r2, [r7, #4]
    7efa:	4919      	ldr	r1, [pc, #100]	; (7f60 <usb_device_endpoint_write_buffer_job+0xac>)
    7efc:	015b      	lsls	r3, r3, #5
    7efe:	18cb      	adds	r3, r1, r3
    7f00:	3310      	adds	r3, #16
    7f02:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7f04:	230b      	movs	r3, #11
    7f06:	18fb      	adds	r3, r7, r3
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	4a15      	ldr	r2, [pc, #84]	; (7f60 <usb_device_endpoint_write_buffer_job+0xac>)
    7f0c:	015b      	lsls	r3, r3, #5
    7f0e:	18d3      	adds	r3, r2, r3
    7f10:	3310      	adds	r3, #16
    7f12:	685a      	ldr	r2, [r3, #4]
    7f14:	4913      	ldr	r1, [pc, #76]	; (7f64 <usb_device_endpoint_write_buffer_job+0xb0>)
    7f16:	400a      	ands	r2, r1
    7f18:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    7f1a:	230b      	movs	r3, #11
    7f1c:	18fb      	adds	r3, r7, r3
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	683a      	ldr	r2, [r7, #0]
    7f22:	b292      	uxth	r2, r2
    7f24:	0492      	lsls	r2, r2, #18
    7f26:	0c92      	lsrs	r2, r2, #18
    7f28:	b291      	uxth	r1, r2
    7f2a:	4a0d      	ldr	r2, [pc, #52]	; (7f60 <usb_device_endpoint_write_buffer_job+0xac>)
    7f2c:	015b      	lsls	r3, r3, #5
    7f2e:	18d3      	adds	r3, r2, r3
    7f30:	3310      	adds	r3, #16
    7f32:	685a      	ldr	r2, [r3, #4]
    7f34:	0489      	lsls	r1, r1, #18
    7f36:	0c89      	lsrs	r1, r1, #18
    7f38:	0b92      	lsrs	r2, r2, #14
    7f3a:	0392      	lsls	r2, r2, #14
    7f3c:	430a      	orrs	r2, r1
    7f3e:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	681a      	ldr	r2, [r3, #0]
    7f44:	230b      	movs	r3, #11
    7f46:	18fb      	adds	r3, r7, r3
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	3308      	adds	r3, #8
    7f4c:	015b      	lsls	r3, r3, #5
    7f4e:	18d3      	adds	r3, r2, r3
    7f50:	3305      	adds	r3, #5
    7f52:	2280      	movs	r2, #128	; 0x80
    7f54:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    7f56:	2300      	movs	r3, #0
}
    7f58:	0018      	movs	r0, r3
    7f5a:	46bd      	mov	sp, r7
    7f5c:	b006      	add	sp, #24
    7f5e:	bd80      	pop	{r7, pc}
    7f60:	20000504 	.word	0x20000504
    7f64:	f0003fff 	.word	0xf0003fff

00007f68 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	b086      	sub	sp, #24
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	60f8      	str	r0, [r7, #12]
    7f70:	607a      	str	r2, [r7, #4]
    7f72:	603b      	str	r3, [r7, #0]
    7f74:	230b      	movs	r3, #11
    7f76:	18fb      	adds	r3, r7, r3
    7f78:	1c0a      	adds	r2, r1, #0
    7f7a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    7f7c:	68fb      	ldr	r3, [r7, #12]
    7f7e:	681b      	ldr	r3, [r3, #0]
    7f80:	220b      	movs	r2, #11
    7f82:	18ba      	adds	r2, r7, r2
    7f84:	7812      	ldrb	r2, [r2, #0]
    7f86:	3208      	adds	r2, #8
    7f88:	0152      	lsls	r2, r2, #5
    7f8a:	5cd3      	ldrb	r3, [r2, r3]
    7f8c:	075b      	lsls	r3, r3, #29
    7f8e:	0f5b      	lsrs	r3, r3, #29
    7f90:	b2da      	uxtb	r2, r3
    7f92:	2317      	movs	r3, #23
    7f94:	18fb      	adds	r3, r7, r3
    7f96:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7f98:	2317      	movs	r3, #23
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d101      	bne.n	7fa6 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    7fa2:	231c      	movs	r3, #28
    7fa4:	e02f      	b.n	8006 <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    7fa6:	230b      	movs	r3, #11
    7fa8:	18fb      	adds	r3, r7, r3
    7faa:	781a      	ldrb	r2, [r3, #0]
    7fac:	6879      	ldr	r1, [r7, #4]
    7fae:	4b18      	ldr	r3, [pc, #96]	; (8010 <usb_device_endpoint_read_buffer_job+0xa8>)
    7fb0:	0152      	lsls	r2, r2, #5
    7fb2:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    7fb4:	230b      	movs	r3, #11
    7fb6:	18fb      	adds	r3, r7, r3
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	683a      	ldr	r2, [r7, #0]
    7fbc:	b292      	uxth	r2, r2
    7fbe:	0492      	lsls	r2, r2, #18
    7fc0:	0c92      	lsrs	r2, r2, #18
    7fc2:	b291      	uxth	r1, r2
    7fc4:	4a12      	ldr	r2, [pc, #72]	; (8010 <usb_device_endpoint_read_buffer_job+0xa8>)
    7fc6:	015b      	lsls	r3, r3, #5
    7fc8:	18d3      	adds	r3, r2, r3
    7fca:	685a      	ldr	r2, [r3, #4]
    7fcc:	0489      	lsls	r1, r1, #18
    7fce:	0c89      	lsrs	r1, r1, #18
    7fd0:	0389      	lsls	r1, r1, #14
    7fd2:	4810      	ldr	r0, [pc, #64]	; (8014 <usb_device_endpoint_read_buffer_job+0xac>)
    7fd4:	4002      	ands	r2, r0
    7fd6:	430a      	orrs	r2, r1
    7fd8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7fda:	230b      	movs	r3, #11
    7fdc:	18fb      	adds	r3, r7, r3
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	4a0b      	ldr	r2, [pc, #44]	; (8010 <usb_device_endpoint_read_buffer_job+0xa8>)
    7fe2:	015b      	lsls	r3, r3, #5
    7fe4:	18d3      	adds	r3, r2, r3
    7fe6:	685a      	ldr	r2, [r3, #4]
    7fe8:	0b92      	lsrs	r2, r2, #14
    7fea:	0392      	lsls	r2, r2, #14
    7fec:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	681a      	ldr	r2, [r3, #0]
    7ff2:	230b      	movs	r3, #11
    7ff4:	18fb      	adds	r3, r7, r3
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	3308      	adds	r3, #8
    7ffa:	015b      	lsls	r3, r3, #5
    7ffc:	18d3      	adds	r3, r2, r3
    7ffe:	3304      	adds	r3, #4
    8000:	2240      	movs	r2, #64	; 0x40
    8002:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8004:	2300      	movs	r3, #0
}
    8006:	0018      	movs	r0, r3
    8008:	46bd      	mov	sp, r7
    800a:	b006      	add	sp, #24
    800c:	bd80      	pop	{r7, pc}
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	20000504 	.word	0x20000504
    8014:	f0003fff 	.word	0xf0003fff

00008018 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    8018:	b580      	push	{r7, lr}
    801a:	b082      	sub	sp, #8
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
    8020:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    8022:	683a      	ldr	r2, [r7, #0]
    8024:	4b0c      	ldr	r3, [pc, #48]	; (8058 <usb_device_endpoint_setup_buffer_job+0x40>)
    8026:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    8028:	4b0b      	ldr	r3, [pc, #44]	; (8058 <usb_device_endpoint_setup_buffer_job+0x40>)
    802a:	685a      	ldr	r2, [r3, #4]
    802c:	490b      	ldr	r1, [pc, #44]	; (805c <usb_device_endpoint_setup_buffer_job+0x44>)
    802e:	400a      	ands	r2, r1
    8030:	2180      	movs	r1, #128	; 0x80
    8032:	0289      	lsls	r1, r1, #10
    8034:	430a      	orrs	r2, r1
    8036:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    8038:	4b07      	ldr	r3, [pc, #28]	; (8058 <usb_device_endpoint_setup_buffer_job+0x40>)
    803a:	685a      	ldr	r2, [r3, #4]
    803c:	0b92      	lsrs	r2, r2, #14
    803e:	0392      	lsls	r2, r2, #14
    8040:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    8042:	687b      	ldr	r3, [r7, #4]
    8044:	681a      	ldr	r2, [r3, #0]
    8046:	2382      	movs	r3, #130	; 0x82
    8048:	005b      	lsls	r3, r3, #1
    804a:	2140      	movs	r1, #64	; 0x40
    804c:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    804e:	2300      	movs	r3, #0
}
    8050:	0018      	movs	r0, r3
    8052:	46bd      	mov	sp, r7
    8054:	b002      	add	sp, #8
    8056:	bd80      	pop	{r7, pc}
    8058:	20000504 	.word	0x20000504
    805c:	f0003fff 	.word	0xf0003fff

00008060 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    8060:	b580      	push	{r7, lr}
    8062:	b084      	sub	sp, #16
    8064:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    8066:	4bbd      	ldr	r3, [pc, #756]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8068:	681b      	ldr	r3, [r3, #0]
    806a:	681a      	ldr	r2, [r3, #0]
    806c:	2308      	movs	r3, #8
    806e:	18fb      	adds	r3, r7, r3
    8070:	8c12      	ldrh	r2, [r2, #32]
    8072:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    8074:	2308      	movs	r3, #8
    8076:	18fb      	adds	r3, r7, r3
    8078:	881b      	ldrh	r3, [r3, #0]
    807a:	2b00      	cmp	r3, #0
    807c:	d155      	bne.n	812a <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    807e:	4bb7      	ldr	r3, [pc, #732]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8080:	681b      	ldr	r3, [r3, #0]
    8082:	681a      	ldr	r2, [r3, #0]
    8084:	1dbb      	adds	r3, r7, #6
    8086:	8b92      	ldrh	r2, [r2, #28]
    8088:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    808a:	4bb4      	ldr	r3, [pc, #720]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    808c:	681a      	ldr	r2, [r3, #0]
    808e:	23ab      	movs	r3, #171	; 0xab
    8090:	005b      	lsls	r3, r3, #1
    8092:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    8094:	1dba      	adds	r2, r7, #6
    8096:	8812      	ldrh	r2, [r2, #0]
    8098:	4013      	ands	r3, r2
    809a:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    809c:	4baf      	ldr	r3, [pc, #700]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    809e:	6819      	ldr	r1, [r3, #0]
    80a0:	23aa      	movs	r3, #170	; 0xaa
    80a2:	005b      	lsls	r3, r3, #1
    80a4:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    80a6:	1d3b      	adds	r3, r7, #4
    80a8:	400a      	ands	r2, r1
    80aa:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    80ac:	2300      	movs	r3, #0
    80ae:	60fb      	str	r3, [r7, #12]
    80b0:	e037      	b.n	8122 <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    80b2:	4bab      	ldr	r3, [pc, #684]	; (8360 <_usb_device_interrupt_handler+0x300>)
    80b4:	68fa      	ldr	r2, [r7, #12]
    80b6:	0052      	lsls	r2, r2, #1
    80b8:	5ad3      	ldrh	r3, [r2, r3]
    80ba:	1dba      	adds	r2, r7, #6
    80bc:	8812      	ldrh	r2, [r2, #0]
    80be:	4013      	ands	r3, r2
    80c0:	b29b      	uxth	r3, r3
    80c2:	2b00      	cmp	r3, #0
    80c4:	d007      	beq.n	80d6 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    80c6:	4ba5      	ldr	r3, [pc, #660]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    80cc:	4aa4      	ldr	r2, [pc, #656]	; (8360 <_usb_device_interrupt_handler+0x300>)
    80ce:	68f9      	ldr	r1, [r7, #12]
    80d0:	0049      	lsls	r1, r1, #1
    80d2:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    80d4:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    80d6:	4ba2      	ldr	r3, [pc, #648]	; (8360 <_usb_device_interrupt_handler+0x300>)
    80d8:	68fa      	ldr	r2, [r7, #12]
    80da:	0052      	lsls	r2, r2, #1
    80dc:	5ad3      	ldrh	r3, [r2, r3]
    80de:	1d3a      	adds	r2, r7, #4
    80e0:	8812      	ldrh	r2, [r2, #0]
    80e2:	4013      	ands	r3, r2
    80e4:	b29b      	uxth	r3, r3
    80e6:	2b00      	cmp	r3, #0
    80e8:	d018      	beq.n	811c <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    80ea:	68fb      	ldr	r3, [r7, #12]
    80ec:	2b06      	cmp	r3, #6
    80ee:	d10a      	bne.n	8106 <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    80f0:	4b9c      	ldr	r3, [pc, #624]	; (8364 <_usb_device_interrupt_handler+0x304>)
    80f2:	891b      	ldrh	r3, [r3, #8]
    80f4:	045b      	lsls	r3, r3, #17
    80f6:	0d5b      	lsrs	r3, r3, #21
    80f8:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    80fa:	001a      	movs	r2, r3
    80fc:	2380      	movs	r3, #128	; 0x80
    80fe:	005b      	lsls	r3, r3, #1
    8100:	401a      	ands	r2, r3
    8102:	4b99      	ldr	r3, [pc, #612]	; (8368 <_usb_device_interrupt_handler+0x308>)
    8104:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    8106:	4b95      	ldr	r3, [pc, #596]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8108:	681b      	ldr	r3, [r3, #0]
    810a:	68fa      	ldr	r2, [r7, #12]
    810c:	322e      	adds	r2, #46	; 0x2e
    810e:	0092      	lsls	r2, r2, #2
    8110:	58d2      	ldr	r2, [r2, r3]
    8112:	4b92      	ldr	r3, [pc, #584]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	4994      	ldr	r1, [pc, #592]	; (8368 <_usb_device_interrupt_handler+0x308>)
    8118:	0018      	movs	r0, r3
    811a:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    811c:	68fb      	ldr	r3, [r7, #12]
    811e:	3301      	adds	r3, #1
    8120:	60fb      	str	r3, [r7, #12]
    8122:	68fb      	ldr	r3, [r7, #12]
    8124:	2b06      	cmp	r3, #6
    8126:	ddc4      	ble.n	80b2 <_usb_device_interrupt_handler+0x52>
    8128:	e250      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    812a:	230b      	movs	r3, #11
    812c:	18fb      	adds	r3, r7, r3
    812e:	2200      	movs	r2, #0
    8130:	701a      	strb	r2, [r3, #0]
    8132:	e23b      	b.n	85ac <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    8134:	2308      	movs	r3, #8
    8136:	18fb      	adds	r3, r7, r3
    8138:	881a      	ldrh	r2, [r3, #0]
    813a:	230b      	movs	r3, #11
    813c:	18fb      	adds	r3, r7, r3
    813e:	781b      	ldrb	r3, [r3, #0]
    8140:	411a      	asrs	r2, r3
    8142:	0013      	movs	r3, r2
    8144:	2201      	movs	r2, #1
    8146:	4013      	ands	r3, r2
    8148:	d100      	bne.n	814c <_usb_device_interrupt_handler+0xec>
    814a:	e228      	b.n	859e <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    814c:	4b83      	ldr	r3, [pc, #524]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    814e:	681b      	ldr	r3, [r3, #0]
    8150:	681a      	ldr	r2, [r3, #0]
    8152:	230b      	movs	r3, #11
    8154:	18fb      	adds	r3, r7, r3
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	3308      	adds	r3, #8
    815a:	015b      	lsls	r3, r3, #5
    815c:	18d3      	adds	r3, r2, r3
    815e:	3307      	adds	r3, #7
    8160:	781b      	ldrb	r3, [r3, #0]
    8162:	b2da      	uxtb	r2, r3
    8164:	1dbb      	adds	r3, r7, #6
    8166:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    8168:	4b7c      	ldr	r3, [pc, #496]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    816a:	6819      	ldr	r1, [r3, #0]
    816c:	230b      	movs	r3, #11
    816e:	18fb      	adds	r3, r7, r3
    8170:	781a      	ldrb	r2, [r3, #0]
    8172:	23b0      	movs	r3, #176	; 0xb0
    8174:	005b      	lsls	r3, r3, #1
    8176:	188a      	adds	r2, r1, r2
    8178:	18d3      	adds	r3, r2, r3
    817a:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    817c:	b29b      	uxth	r3, r3
    817e:	1dba      	adds	r2, r7, #6
    8180:	8812      	ldrh	r2, [r2, #0]
    8182:	4013      	ands	r3, r2
    8184:	b29b      	uxth	r3, r3
    8186:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    8188:	4b74      	ldr	r3, [pc, #464]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    818a:	6818      	ldr	r0, [r3, #0]
    818c:	230b      	movs	r3, #11
    818e:	18fb      	adds	r3, r7, r3
    8190:	7819      	ldrb	r1, [r3, #0]
    8192:	23ac      	movs	r3, #172	; 0xac
    8194:	005b      	lsls	r3, r3, #1
    8196:	1841      	adds	r1, r0, r1
    8198:	18cb      	adds	r3, r1, r3
    819a:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    819c:	b21b      	sxth	r3, r3
    819e:	4013      	ands	r3, r2
    81a0:	b21a      	sxth	r2, r3
    81a2:	1d3b      	adds	r3, r7, #4
    81a4:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    81a6:	1dbb      	adds	r3, r7, #6
    81a8:	881b      	ldrh	r3, [r3, #0]
    81aa:	2260      	movs	r2, #96	; 0x60
    81ac:	4013      	ands	r3, r2
    81ae:	d05c      	beq.n	826a <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    81b0:	4b6a      	ldr	r3, [pc, #424]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	681a      	ldr	r2, [r3, #0]
    81b6:	230b      	movs	r3, #11
    81b8:	18fb      	adds	r3, r7, r3
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	3308      	adds	r3, #8
    81be:	015b      	lsls	r3, r3, #5
    81c0:	18d3      	adds	r3, r2, r3
    81c2:	3307      	adds	r3, #7
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	b2db      	uxtb	r3, r3
    81c8:	001a      	movs	r2, r3
    81ca:	2340      	movs	r3, #64	; 0x40
    81cc:	4013      	ands	r3, r2
    81ce:	d015      	beq.n	81fc <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    81d0:	4b62      	ldr	r3, [pc, #392]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    81d2:	681b      	ldr	r3, [r3, #0]
    81d4:	681a      	ldr	r2, [r3, #0]
    81d6:	230b      	movs	r3, #11
    81d8:	18fb      	adds	r3, r7, r3
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	3308      	adds	r3, #8
    81de:	015b      	lsls	r3, r3, #5
    81e0:	18d3      	adds	r3, r2, r3
    81e2:	3307      	adds	r3, #7
    81e4:	2240      	movs	r2, #64	; 0x40
    81e6:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    81e8:	230b      	movs	r3, #11
    81ea:	18fb      	adds	r3, r7, r3
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	2280      	movs	r2, #128	; 0x80
    81f0:	4252      	negs	r2, r2
    81f2:	4313      	orrs	r3, r2
    81f4:	b2da      	uxtb	r2, r3
    81f6:	4b5d      	ldr	r3, [pc, #372]	; (836c <_usb_device_interrupt_handler+0x30c>)
    81f8:	719a      	strb	r2, [r3, #6]
    81fa:	e020      	b.n	823e <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    81fc:	4b57      	ldr	r3, [pc, #348]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	681a      	ldr	r2, [r3, #0]
    8202:	230b      	movs	r3, #11
    8204:	18fb      	adds	r3, r7, r3
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	3308      	adds	r3, #8
    820a:	015b      	lsls	r3, r3, #5
    820c:	18d3      	adds	r3, r2, r3
    820e:	3307      	adds	r3, #7
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	b2db      	uxtb	r3, r3
    8214:	001a      	movs	r2, r3
    8216:	2320      	movs	r3, #32
    8218:	4013      	ands	r3, r2
    821a:	d010      	beq.n	823e <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    821c:	4b4f      	ldr	r3, [pc, #316]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    821e:	681b      	ldr	r3, [r3, #0]
    8220:	681a      	ldr	r2, [r3, #0]
    8222:	230b      	movs	r3, #11
    8224:	18fb      	adds	r3, r7, r3
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	3308      	adds	r3, #8
    822a:	015b      	lsls	r3, r3, #5
    822c:	18d3      	adds	r3, r2, r3
    822e:	3307      	adds	r3, #7
    8230:	2220      	movs	r2, #32
    8232:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    8234:	4b4d      	ldr	r3, [pc, #308]	; (836c <_usb_device_interrupt_handler+0x30c>)
    8236:	220b      	movs	r2, #11
    8238:	18ba      	adds	r2, r7, r2
    823a:	7812      	ldrb	r2, [r2, #0]
    823c:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    823e:	1d3b      	adds	r3, r7, #4
    8240:	881b      	ldrh	r3, [r3, #0]
    8242:	2260      	movs	r2, #96	; 0x60
    8244:	4013      	ands	r3, r2
    8246:	d100      	bne.n	824a <_usb_device_interrupt_handler+0x1ea>
    8248:	e1b7      	b.n	85ba <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    824a:	4b44      	ldr	r3, [pc, #272]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    824c:	681a      	ldr	r2, [r3, #0]
    824e:	230b      	movs	r3, #11
    8250:	18fb      	adds	r3, r7, r3
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	21e0      	movs	r1, #224	; 0xe0
    8256:	011b      	lsls	r3, r3, #4
    8258:	18d3      	adds	r3, r2, r3
    825a:	185b      	adds	r3, r3, r1
    825c:	681a      	ldr	r2, [r3, #0]
    825e:	4b3f      	ldr	r3, [pc, #252]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	4942      	ldr	r1, [pc, #264]	; (836c <_usb_device_interrupt_handler+0x30c>)
    8264:	0018      	movs	r0, r3
    8266:	4790      	blx	r2
					}
					return;
    8268:	e1a7      	b.n	85ba <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    826a:	1dbb      	adds	r3, r7, #6
    826c:	881b      	ldrh	r3, [r3, #0]
    826e:	2210      	movs	r2, #16
    8270:	4013      	ands	r3, r2
    8272:	d038      	beq.n	82e6 <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    8274:	4b39      	ldr	r3, [pc, #228]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8276:	681b      	ldr	r3, [r3, #0]
    8278:	681a      	ldr	r2, [r3, #0]
    827a:	230b      	movs	r3, #11
    827c:	18fb      	adds	r3, r7, r3
    827e:	781b      	ldrb	r3, [r3, #0]
    8280:	3308      	adds	r3, #8
    8282:	015b      	lsls	r3, r3, #5
    8284:	18d3      	adds	r3, r2, r3
    8286:	3307      	adds	r3, #7
    8288:	2210      	movs	r2, #16
    828a:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    828c:	4b33      	ldr	r3, [pc, #204]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    828e:	6819      	ldr	r1, [r3, #0]
    8290:	230b      	movs	r3, #11
    8292:	18fb      	adds	r3, r7, r3
    8294:	781a      	ldrb	r2, [r3, #0]
    8296:	23b0      	movs	r3, #176	; 0xb0
    8298:	005b      	lsls	r3, r3, #1
    829a:	188a      	adds	r2, r1, r2
    829c:	18d3      	adds	r3, r2, r3
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	2210      	movs	r2, #16
    82a2:	4013      	ands	r3, r2
    82a4:	b2db      	uxtb	r3, r3
    82a6:	2b00      	cmp	r3, #0
    82a8:	d100      	bne.n	82ac <_usb_device_interrupt_handler+0x24c>
    82aa:	e188      	b.n	85be <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    82ac:	230b      	movs	r3, #11
    82ae:	18fb      	adds	r3, r7, r3
    82b0:	781b      	ldrb	r3, [r3, #0]
    82b2:	4a2c      	ldr	r2, [pc, #176]	; (8364 <_usb_device_interrupt_handler+0x304>)
    82b4:	015b      	lsls	r3, r3, #5
    82b6:	18d3      	adds	r3, r2, r3
    82b8:	685b      	ldr	r3, [r3, #4]
    82ba:	049b      	lsls	r3, r3, #18
    82bc:	0c9b      	lsrs	r3, r3, #18
    82be:	b29b      	uxth	r3, r3
    82c0:	001a      	movs	r2, r3
    82c2:	4b2a      	ldr	r3, [pc, #168]	; (836c <_usb_device_interrupt_handler+0x30c>)
    82c4:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    82c6:	4b25      	ldr	r3, [pc, #148]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    82c8:	681a      	ldr	r2, [r3, #0]
    82ca:	230b      	movs	r3, #11
    82cc:	18fb      	adds	r3, r7, r3
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	21dc      	movs	r1, #220	; 0xdc
    82d2:	011b      	lsls	r3, r3, #4
    82d4:	18d3      	adds	r3, r2, r3
    82d6:	185b      	adds	r3, r3, r1
    82d8:	681a      	ldr	r2, [r3, #0]
    82da:	4b20      	ldr	r3, [pc, #128]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    82dc:	681b      	ldr	r3, [r3, #0]
    82de:	4923      	ldr	r1, [pc, #140]	; (836c <_usb_device_interrupt_handler+0x30c>)
    82e0:	0018      	movs	r0, r3
    82e2:	4790      	blx	r2
					}
					return;
    82e4:	e16b      	b.n	85be <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    82e6:	1dbb      	adds	r3, r7, #6
    82e8:	881b      	ldrh	r3, [r3, #0]
    82ea:	2203      	movs	r2, #3
    82ec:	4013      	ands	r3, r2
    82ee:	d100      	bne.n	82f2 <_usb_device_interrupt_handler+0x292>
    82f0:	e08f      	b.n	8412 <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    82f2:	4b1a      	ldr	r3, [pc, #104]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	681a      	ldr	r2, [r3, #0]
    82f8:	230b      	movs	r3, #11
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	3308      	adds	r3, #8
    8300:	015b      	lsls	r3, r3, #5
    8302:	18d3      	adds	r3, r2, r3
    8304:	3307      	adds	r3, #7
    8306:	781b      	ldrb	r3, [r3, #0]
    8308:	b2db      	uxtb	r3, r3
    830a:	001a      	movs	r2, r3
    830c:	2302      	movs	r3, #2
    830e:	4013      	ands	r3, r2
    8310:	d02e      	beq.n	8370 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    8312:	4b12      	ldr	r3, [pc, #72]	; (835c <_usb_device_interrupt_handler+0x2fc>)
    8314:	681b      	ldr	r3, [r3, #0]
    8316:	681a      	ldr	r2, [r3, #0]
    8318:	230b      	movs	r3, #11
    831a:	18fb      	adds	r3, r7, r3
    831c:	781b      	ldrb	r3, [r3, #0]
    831e:	3308      	adds	r3, #8
    8320:	015b      	lsls	r3, r3, #5
    8322:	18d3      	adds	r3, r2, r3
    8324:	3307      	adds	r3, #7
    8326:	2202      	movs	r2, #2
    8328:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    832a:	230b      	movs	r3, #11
    832c:	18fb      	adds	r3, r7, r3
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	2280      	movs	r2, #128	; 0x80
    8332:	4252      	negs	r2, r2
    8334:	4313      	orrs	r3, r2
    8336:	b2da      	uxtb	r2, r3
    8338:	4b0c      	ldr	r3, [pc, #48]	; (836c <_usb_device_interrupt_handler+0x30c>)
    833a:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    833c:	230b      	movs	r3, #11
    833e:	18fb      	adds	r3, r7, r3
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	4a08      	ldr	r2, [pc, #32]	; (8364 <_usb_device_interrupt_handler+0x304>)
    8344:	015b      	lsls	r3, r3, #5
    8346:	18d3      	adds	r3, r2, r3
    8348:	3310      	adds	r3, #16
    834a:	685b      	ldr	r3, [r3, #4]
    834c:	049b      	lsls	r3, r3, #18
    834e:	0c9b      	lsrs	r3, r3, #18
    8350:	b29b      	uxth	r3, r3
    8352:	001a      	movs	r2, r3
    8354:	4b05      	ldr	r3, [pc, #20]	; (836c <_usb_device_interrupt_handler+0x30c>)
    8356:	805a      	strh	r2, [r3, #2]
    8358:	e045      	b.n	83e6 <_usb_device_interrupt_handler+0x386>
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	2000021c 	.word	0x2000021c
    8360:	00009200 	.word	0x00009200
    8364:	20000504 	.word	0x20000504
    8368:	20000228 	.word	0x20000228
    836c:	2000022c 	.word	0x2000022c

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8370:	4b98      	ldr	r3, [pc, #608]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8372:	681b      	ldr	r3, [r3, #0]
    8374:	681a      	ldr	r2, [r3, #0]
    8376:	230b      	movs	r3, #11
    8378:	18fb      	adds	r3, r7, r3
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	3308      	adds	r3, #8
    837e:	015b      	lsls	r3, r3, #5
    8380:	18d3      	adds	r3, r2, r3
    8382:	3307      	adds	r3, #7
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	b2db      	uxtb	r3, r3
    8388:	001a      	movs	r2, r3
    838a:	2301      	movs	r3, #1
    838c:	4013      	ands	r3, r2
    838e:	d02a      	beq.n	83e6 <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    8390:	4b90      	ldr	r3, [pc, #576]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8392:	681b      	ldr	r3, [r3, #0]
    8394:	681a      	ldr	r2, [r3, #0]
    8396:	230b      	movs	r3, #11
    8398:	18fb      	adds	r3, r7, r3
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	3308      	adds	r3, #8
    839e:	015b      	lsls	r3, r3, #5
    83a0:	18d3      	adds	r3, r2, r3
    83a2:	3307      	adds	r3, #7
    83a4:	2201      	movs	r2, #1
    83a6:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    83a8:	4b8b      	ldr	r3, [pc, #556]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    83aa:	220b      	movs	r2, #11
    83ac:	18ba      	adds	r2, r7, r2
    83ae:	7812      	ldrb	r2, [r2, #0]
    83b0:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    83b2:	230b      	movs	r3, #11
    83b4:	18fb      	adds	r3, r7, r3
    83b6:	781b      	ldrb	r3, [r3, #0]
    83b8:	4a88      	ldr	r2, [pc, #544]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    83ba:	015b      	lsls	r3, r3, #5
    83bc:	18d3      	adds	r3, r2, r3
    83be:	685b      	ldr	r3, [r3, #4]
    83c0:	049b      	lsls	r3, r3, #18
    83c2:	0c9b      	lsrs	r3, r3, #18
    83c4:	b29b      	uxth	r3, r3
    83c6:	001a      	movs	r2, r3
    83c8:	4b83      	ldr	r3, [pc, #524]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    83ca:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    83cc:	230b      	movs	r3, #11
    83ce:	18fb      	adds	r3, r7, r3
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	4a82      	ldr	r2, [pc, #520]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    83d4:	015b      	lsls	r3, r3, #5
    83d6:	18d3      	adds	r3, r2, r3
    83d8:	685b      	ldr	r3, [r3, #4]
    83da:	011b      	lsls	r3, r3, #4
    83dc:	0c9b      	lsrs	r3, r3, #18
    83de:	b29b      	uxth	r3, r3
    83e0:	001a      	movs	r2, r3
    83e2:	4b7d      	ldr	r3, [pc, #500]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    83e4:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    83e6:	1d3b      	adds	r3, r7, #4
    83e8:	881b      	ldrh	r3, [r3, #0]
    83ea:	2203      	movs	r2, #3
    83ec:	4013      	ands	r3, r2
    83ee:	d100      	bne.n	83f2 <_usb_device_interrupt_handler+0x392>
    83f0:	e0e7      	b.n	85c2 <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    83f2:	4b78      	ldr	r3, [pc, #480]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    83f4:	681a      	ldr	r2, [r3, #0]
    83f6:	230b      	movs	r3, #11
    83f8:	18fb      	adds	r3, r7, r3
    83fa:	781b      	ldrb	r3, [r3, #0]
    83fc:	330d      	adds	r3, #13
    83fe:	011b      	lsls	r3, r3, #4
    8400:	18d3      	adds	r3, r2, r3
    8402:	3304      	adds	r3, #4
    8404:	681a      	ldr	r2, [r3, #0]
    8406:	4b73      	ldr	r3, [pc, #460]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8408:	681b      	ldr	r3, [r3, #0]
    840a:	4973      	ldr	r1, [pc, #460]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    840c:	0018      	movs	r0, r3
    840e:	4790      	blx	r2
					}
					return;
    8410:	e0d7      	b.n	85c2 <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    8412:	1dbb      	adds	r3, r7, #6
    8414:	881b      	ldrh	r3, [r3, #0]
    8416:	220c      	movs	r2, #12
    8418:	4013      	ands	r3, r2
    841a:	d100      	bne.n	841e <_usb_device_interrupt_handler+0x3be>
    841c:	e0bf      	b.n	859e <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    841e:	4b6d      	ldr	r3, [pc, #436]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8420:	681b      	ldr	r3, [r3, #0]
    8422:	681a      	ldr	r2, [r3, #0]
    8424:	230b      	movs	r3, #11
    8426:	18fb      	adds	r3, r7, r3
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	3308      	adds	r3, #8
    842c:	015b      	lsls	r3, r3, #5
    842e:	18d3      	adds	r3, r2, r3
    8430:	3307      	adds	r3, #7
    8432:	781b      	ldrb	r3, [r3, #0]
    8434:	b2db      	uxtb	r3, r3
    8436:	001a      	movs	r2, r3
    8438:	2308      	movs	r3, #8
    843a:	4013      	ands	r3, r2
    843c:	d047      	beq.n	84ce <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    843e:	4b65      	ldr	r3, [pc, #404]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8440:	681b      	ldr	r3, [r3, #0]
    8442:	681a      	ldr	r2, [r3, #0]
    8444:	230b      	movs	r3, #11
    8446:	18fb      	adds	r3, r7, r3
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	3308      	adds	r3, #8
    844c:	015b      	lsls	r3, r3, #5
    844e:	18d3      	adds	r3, r2, r3
    8450:	3307      	adds	r3, #7
    8452:	2208      	movs	r2, #8
    8454:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    8456:	230b      	movs	r3, #11
    8458:	18fb      	adds	r3, r7, r3
    845a:	781b      	ldrb	r3, [r3, #0]
    845c:	4a5f      	ldr	r2, [pc, #380]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    845e:	015b      	lsls	r3, r3, #5
    8460:	18d3      	adds	r3, r2, r3
    8462:	331a      	adds	r3, #26
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	b2db      	uxtb	r3, r3
    8468:	001a      	movs	r2, r3
    846a:	2302      	movs	r3, #2
    846c:	4013      	ands	r3, r2
    846e:	d014      	beq.n	849a <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8470:	230b      	movs	r3, #11
    8472:	18fb      	adds	r3, r7, r3
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	220b      	movs	r2, #11
    8478:	18ba      	adds	r2, r7, r2
    847a:	7812      	ldrb	r2, [r2, #0]
    847c:	4957      	ldr	r1, [pc, #348]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    847e:	0152      	lsls	r2, r2, #5
    8480:	188a      	adds	r2, r1, r2
    8482:	321a      	adds	r2, #26
    8484:	7812      	ldrb	r2, [r2, #0]
    8486:	b2d2      	uxtb	r2, r2
    8488:	2102      	movs	r1, #2
    848a:	438a      	bics	r2, r1
    848c:	b2d1      	uxtb	r1, r2
    848e:	4a53      	ldr	r2, [pc, #332]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    8490:	015b      	lsls	r3, r3, #5
    8492:	18d3      	adds	r3, r2, r3
    8494:	331a      	adds	r3, #26
    8496:	1c0a      	adds	r2, r1, #0
    8498:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    849a:	230b      	movs	r3, #11
    849c:	18fb      	adds	r3, r7, r3
    849e:	781b      	ldrb	r3, [r3, #0]
    84a0:	2280      	movs	r2, #128	; 0x80
    84a2:	4252      	negs	r2, r2
    84a4:	4313      	orrs	r3, r2
    84a6:	b2da      	uxtb	r2, r3
    84a8:	4b4b      	ldr	r3, [pc, #300]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    84aa:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    84ac:	4b49      	ldr	r3, [pc, #292]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    84ae:	681b      	ldr	r3, [r3, #0]
    84b0:	681a      	ldr	r2, [r3, #0]
    84b2:	230b      	movs	r3, #11
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	781b      	ldrb	r3, [r3, #0]
    84b8:	3308      	adds	r3, #8
    84ba:	015b      	lsls	r3, r3, #5
    84bc:	18d3      	adds	r3, r2, r3
    84be:	3307      	adds	r3, #7
    84c0:	781b      	ldrb	r3, [r3, #0]
    84c2:	b2db      	uxtb	r3, r3
    84c4:	001a      	movs	r2, r3
    84c6:	2302      	movs	r3, #2
    84c8:	4013      	ands	r3, r2
    84ca:	d053      	beq.n	8574 <_usb_device_interrupt_handler+0x514>
							return;
    84cc:	e07e      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    84ce:	4b41      	ldr	r3, [pc, #260]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    84d0:	681b      	ldr	r3, [r3, #0]
    84d2:	681a      	ldr	r2, [r3, #0]
    84d4:	230b      	movs	r3, #11
    84d6:	18fb      	adds	r3, r7, r3
    84d8:	781b      	ldrb	r3, [r3, #0]
    84da:	3308      	adds	r3, #8
    84dc:	015b      	lsls	r3, r3, #5
    84de:	18d3      	adds	r3, r2, r3
    84e0:	3307      	adds	r3, #7
    84e2:	781b      	ldrb	r3, [r3, #0]
    84e4:	b2db      	uxtb	r3, r3
    84e6:	001a      	movs	r2, r3
    84e8:	2304      	movs	r3, #4
    84ea:	4013      	ands	r3, r2
    84ec:	d042      	beq.n	8574 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    84ee:	4b39      	ldr	r3, [pc, #228]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    84f0:	681b      	ldr	r3, [r3, #0]
    84f2:	681a      	ldr	r2, [r3, #0]
    84f4:	230b      	movs	r3, #11
    84f6:	18fb      	adds	r3, r7, r3
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	3308      	adds	r3, #8
    84fc:	015b      	lsls	r3, r3, #5
    84fe:	18d3      	adds	r3, r2, r3
    8500:	3307      	adds	r3, #7
    8502:	2204      	movs	r2, #4
    8504:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    8506:	230b      	movs	r3, #11
    8508:	18fb      	adds	r3, r7, r3
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	4a33      	ldr	r2, [pc, #204]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    850e:	015b      	lsls	r3, r3, #5
    8510:	18d3      	adds	r3, r2, r3
    8512:	330a      	adds	r3, #10
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	b2db      	uxtb	r3, r3
    8518:	001a      	movs	r2, r3
    851a:	2302      	movs	r3, #2
    851c:	4013      	ands	r3, r2
    851e:	d014      	beq.n	854a <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8520:	230b      	movs	r3, #11
    8522:	18fb      	adds	r3, r7, r3
    8524:	781b      	ldrb	r3, [r3, #0]
    8526:	220b      	movs	r2, #11
    8528:	18ba      	adds	r2, r7, r2
    852a:	7812      	ldrb	r2, [r2, #0]
    852c:	492b      	ldr	r1, [pc, #172]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    852e:	0152      	lsls	r2, r2, #5
    8530:	188a      	adds	r2, r1, r2
    8532:	320a      	adds	r2, #10
    8534:	7812      	ldrb	r2, [r2, #0]
    8536:	b2d2      	uxtb	r2, r2
    8538:	2102      	movs	r1, #2
    853a:	438a      	bics	r2, r1
    853c:	b2d1      	uxtb	r1, r2
    853e:	4a27      	ldr	r2, [pc, #156]	; (85dc <_usb_device_interrupt_handler+0x57c>)
    8540:	015b      	lsls	r3, r3, #5
    8542:	18d3      	adds	r3, r2, r3
    8544:	330a      	adds	r3, #10
    8546:	1c0a      	adds	r2, r1, #0
    8548:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    854a:	4b23      	ldr	r3, [pc, #140]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    854c:	220b      	movs	r2, #11
    854e:	18ba      	adds	r2, r7, r2
    8550:	7812      	ldrb	r2, [r2, #0]
    8552:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8554:	4b1f      	ldr	r3, [pc, #124]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	681a      	ldr	r2, [r3, #0]
    855a:	230b      	movs	r3, #11
    855c:	18fb      	adds	r3, r7, r3
    855e:	781b      	ldrb	r3, [r3, #0]
    8560:	3308      	adds	r3, #8
    8562:	015b      	lsls	r3, r3, #5
    8564:	18d3      	adds	r3, r2, r3
    8566:	3307      	adds	r3, #7
    8568:	781b      	ldrb	r3, [r3, #0]
    856a:	b2db      	uxtb	r3, r3
    856c:	001a      	movs	r2, r3
    856e:	2301      	movs	r3, #1
    8570:	4013      	ands	r3, r2
    8572:	d128      	bne.n	85c6 <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    8574:	1d3b      	adds	r3, r7, #4
    8576:	881b      	ldrh	r3, [r3, #0]
    8578:	220c      	movs	r2, #12
    857a:	4013      	ands	r3, r2
    857c:	d025      	beq.n	85ca <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    857e:	4b15      	ldr	r3, [pc, #84]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8580:	681a      	ldr	r2, [r3, #0]
    8582:	230b      	movs	r3, #11
    8584:	18fb      	adds	r3, r7, r3
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	21d8      	movs	r1, #216	; 0xd8
    858a:	011b      	lsls	r3, r3, #4
    858c:	18d3      	adds	r3, r2, r3
    858e:	185b      	adds	r3, r3, r1
    8590:	681a      	ldr	r2, [r3, #0]
    8592:	4b10      	ldr	r3, [pc, #64]	; (85d4 <_usb_device_interrupt_handler+0x574>)
    8594:	681b      	ldr	r3, [r3, #0]
    8596:	4910      	ldr	r1, [pc, #64]	; (85d8 <_usb_device_interrupt_handler+0x578>)
    8598:	0018      	movs	r0, r3
    859a:	4790      	blx	r2
					}
					return;
    859c:	e015      	b.n	85ca <_usb_device_interrupt_handler+0x56a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    859e:	230b      	movs	r3, #11
    85a0:	18fb      	adds	r3, r7, r3
    85a2:	781a      	ldrb	r2, [r3, #0]
    85a4:	230b      	movs	r3, #11
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	3201      	adds	r2, #1
    85aa:	701a      	strb	r2, [r3, #0]
    85ac:	230b      	movs	r3, #11
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	2b07      	cmp	r3, #7
    85b4:	d800      	bhi.n	85b8 <_usb_device_interrupt_handler+0x558>
    85b6:	e5bd      	b.n	8134 <_usb_device_interrupt_handler+0xd4>
    85b8:	e008      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
					}
					return;
    85ba:	46c0      	nop			; (mov r8, r8)
    85bc:	e006      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
					}
					return;
    85be:	46c0      	nop			; (mov r8, r8)
    85c0:	e004      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
					}
					return;
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	e002      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
							return;
    85c6:	46c0      	nop			; (mov r8, r8)
    85c8:	e000      	b.n	85cc <_usb_device_interrupt_handler+0x56c>
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
					}
					return;
    85ca:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    85cc:	46bd      	mov	sp, r7
    85ce:	b004      	add	sp, #16
    85d0:	bd80      	pop	{r7, pc}
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	2000021c 	.word	0x2000021c
    85d8:	2000022c 	.word	0x2000022c
    85dc:	20000504 	.word	0x20000504

000085e0 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b082      	sub	sp, #8
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	681a      	ldr	r2, [r3, #0]
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	b2db      	uxtb	r3, r3
    85f4:	2102      	movs	r1, #2
    85f6:	430b      	orrs	r3, r1
    85f8:	b2db      	uxtb	r3, r3
    85fa:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    85fc:	46c0      	nop			; (mov r8, r8)
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	789b      	ldrb	r3, [r3, #2]
    8604:	b2db      	uxtb	r3, r3
    8606:	2b02      	cmp	r3, #2
    8608:	d0f9      	beq.n	85fe <usb_enable+0x1e>
}
    860a:	46c0      	nop			; (mov r8, r8)
    860c:	46bd      	mov	sp, r7
    860e:	b002      	add	sp, #8
    8610:	bd80      	pop	{r7, pc}
    8612:	46c0      	nop			; (mov r8, r8)

00008614 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    8614:	b580      	push	{r7, lr}
    8616:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    8618:	4b08      	ldr	r3, [pc, #32]	; (863c <USB_Handler+0x28>)
    861a:	681b      	ldr	r3, [r3, #0]
    861c:	681b      	ldr	r3, [r3, #0]
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	061b      	lsls	r3, r3, #24
    8622:	0fdb      	lsrs	r3, r3, #31
    8624:	b2db      	uxtb	r3, r3
    8626:	2b00      	cmp	r3, #0
    8628:	d002      	beq.n	8630 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    862a:	4b05      	ldr	r3, [pc, #20]	; (8640 <USB_Handler+0x2c>)
    862c:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    862e:	e001      	b.n	8634 <USB_Handler+0x20>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    8630:	4b04      	ldr	r3, [pc, #16]	; (8644 <USB_Handler+0x30>)
    8632:	4798      	blx	r3
	}
}
    8634:	46c0      	nop			; (mov r8, r8)
    8636:	46bd      	mov	sp, r7
    8638:	bd80      	pop	{r7, pc}
    863a:	46c0      	nop			; (mov r8, r8)
    863c:	2000021c 	.word	0x2000021c
    8640:	00006d0d 	.word	0x00006d0d
    8644:	00008061 	.word	0x00008061

00008648 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    8648:	b580      	push	{r7, lr}
    864a:	b082      	sub	sp, #8
    864c:	af00      	add	r7, sp, #0
    864e:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    8650:	687b      	ldr	r3, [r7, #4]
    8652:	2200      	movs	r2, #0
    8654:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	2201      	movs	r2, #1
    865a:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	2200      	movs	r2, #0
    8660:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    8662:	687b      	ldr	r3, [r7, #4]
    8664:	2201      	movs	r2, #1
    8666:	70da      	strb	r2, [r3, #3]
}
    8668:	46c0      	nop			; (mov r8, r8)
    866a:	46bd      	mov	sp, r7
    866c:	b002      	add	sp, #8
    866e:	bd80      	pop	{r7, pc}

00008670 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    8670:	b580      	push	{r7, lr}
    8672:	b08c      	sub	sp, #48	; 0x30
    8674:	af00      	add	r7, sp, #0
    8676:	60f8      	str	r0, [r7, #12]
    8678:	60b9      	str	r1, [r7, #8]
    867a:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    867c:	4bc4      	ldr	r3, [pc, #784]	; (8990 <usb_init+0x320>)
    867e:	2200      	movs	r2, #0
    8680:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    8682:	4bc4      	ldr	r3, [pc, #784]	; (8994 <usb_init+0x324>)
    8684:	68fa      	ldr	r2, [r7, #12]
    8686:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    8688:	68fb      	ldr	r3, [r7, #12]
    868a:	68ba      	ldr	r2, [r7, #8]
    868c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    868e:	2120      	movs	r1, #32
    8690:	2001      	movs	r0, #1
    8692:	4bc1      	ldr	r3, [pc, #772]	; (8998 <usb_init+0x328>)
    8694:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    8696:	2318      	movs	r3, #24
    8698:	18fb      	adds	r3, r7, r3
    869a:	0018      	movs	r0, r3
    869c:	4bbf      	ldr	r3, [pc, #764]	; (899c <usb_init+0x32c>)
    869e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    86a0:	2318      	movs	r3, #24
    86a2:	18fb      	adds	r3, r7, r3
    86a4:	2206      	movs	r2, #6
    86a6:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    86a8:	2318      	movs	r3, #24
    86aa:	18fb      	adds	r3, r7, r3
    86ac:	0019      	movs	r1, r3
    86ae:	2018      	movs	r0, #24
    86b0:	4bbb      	ldr	r3, [pc, #748]	; (89a0 <usb_init+0x330>)
    86b2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    86b4:	2318      	movs	r3, #24
    86b6:	18fb      	adds	r3, r7, r3
    86b8:	2206      	movs	r2, #6
    86ba:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    86bc:	2318      	movs	r3, #24
    86be:	18fb      	adds	r3, r7, r3
    86c0:	0019      	movs	r1, r3
    86c2:	2019      	movs	r0, #25
    86c4:	4bb6      	ldr	r3, [pc, #728]	; (89a0 <usb_init+0x330>)
    86c6:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    86c8:	2314      	movs	r3, #20
    86ca:	18fb      	adds	r3, r7, r3
    86cc:	0018      	movs	r0, r3
    86ce:	4bb5      	ldr	r3, [pc, #724]	; (89a4 <usb_init+0x334>)
    86d0:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	789a      	ldrb	r2, [r3, #2]
    86d6:	2314      	movs	r3, #20
    86d8:	18fb      	adds	r3, r7, r3
    86da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    86dc:	2314      	movs	r3, #20
    86de:	18fb      	adds	r3, r7, r3
    86e0:	0019      	movs	r1, r3
    86e2:	2006      	movs	r0, #6
    86e4:	4bb0      	ldr	r3, [pc, #704]	; (89a8 <usb_init+0x338>)
    86e6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    86e8:	2006      	movs	r0, #6
    86ea:	4bb0      	ldr	r3, [pc, #704]	; (89ac <usb_init+0x33c>)
    86ec:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    86ee:	68ba      	ldr	r2, [r7, #8]
    86f0:	7813      	ldrb	r3, [r2, #0]
    86f2:	2101      	movs	r1, #1
    86f4:	430b      	orrs	r3, r1
    86f6:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    86f8:	46c0      	nop			; (mov r8, r8)
    86fa:	68bb      	ldr	r3, [r7, #8]
    86fc:	789b      	ldrb	r3, [r3, #2]
    86fe:	07db      	lsls	r3, r3, #31
    8700:	0fdb      	lsrs	r3, r3, #31
    8702:	b2db      	uxtb	r3, r3
    8704:	2b00      	cmp	r3, #0
    8706:	d1f8      	bne.n	86fa <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8708:	4aa9      	ldr	r2, [pc, #676]	; (89b0 <usb_init+0x340>)
    870a:	78d3      	ldrb	r3, [r2, #3]
    870c:	2103      	movs	r1, #3
    870e:	438b      	bics	r3, r1
    8710:	1c19      	adds	r1, r3, #0
    8712:	2302      	movs	r3, #2
    8714:	430b      	orrs	r3, r1
    8716:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8718:	4aa5      	ldr	r2, [pc, #660]	; (89b0 <usb_init+0x340>)
    871a:	78d3      	ldrb	r3, [r2, #3]
    871c:	210c      	movs	r1, #12
    871e:	438b      	bics	r3, r1
    8720:	1c19      	adds	r1, r3, #0
    8722:	2308      	movs	r3, #8
    8724:	430b      	orrs	r3, r1
    8726:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    8728:	4ba2      	ldr	r3, [pc, #648]	; (89b4 <usb_init+0x344>)
    872a:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    872c:	0b5b      	lsrs	r3, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    872e:	221f      	movs	r2, #31
    8730:	4013      	ands	r3, r2
    8732:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    8734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8736:	2b1f      	cmp	r3, #31
    8738:	d101      	bne.n	873e <usb_init+0xce>
		pad_transn = 5;
    873a:	2305      	movs	r3, #5
    873c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8740:	b2db      	uxtb	r3, r3
    8742:	1c1a      	adds	r2, r3, #0
    8744:	231f      	movs	r3, #31
    8746:	4013      	ands	r3, r2
    8748:	b2d9      	uxtb	r1, r3
    874a:	68ba      	ldr	r2, [r7, #8]
    874c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    874e:	1c08      	adds	r0, r1, #0
    8750:	211f      	movs	r1, #31
    8752:	4001      	ands	r1, r0
    8754:	0188      	lsls	r0, r1, #6
    8756:	4998      	ldr	r1, [pc, #608]	; (89b8 <usb_init+0x348>)
    8758:	400b      	ands	r3, r1
    875a:	1c19      	adds	r1, r3, #0
    875c:	1c03      	adds	r3, r0, #0
    875e:	430b      	orrs	r3, r1
    8760:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8762:	4b94      	ldr	r3, [pc, #592]	; (89b4 <usb_init+0x344>)
    8764:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    8766:	0c9b      	lsrs	r3, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8768:	221f      	movs	r2, #31
    876a:	4013      	ands	r3, r2
    876c:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    876e:	6a3b      	ldr	r3, [r7, #32]
    8770:	2b1f      	cmp	r3, #31
    8772:	d101      	bne.n	8778 <usb_init+0x108>
		pad_transp = 29;
    8774:	231d      	movs	r3, #29
    8776:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    8778:	6a3b      	ldr	r3, [r7, #32]
    877a:	b2db      	uxtb	r3, r3
    877c:	1c1a      	adds	r2, r3, #0
    877e:	231f      	movs	r3, #31
    8780:	4013      	ands	r3, r2
    8782:	b2d9      	uxtb	r1, r3
    8784:	68ba      	ldr	r2, [r7, #8]
    8786:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8788:	1c08      	adds	r0, r1, #0
    878a:	211f      	movs	r1, #31
    878c:	4008      	ands	r0, r1
    878e:	211f      	movs	r1, #31
    8790:	438b      	bics	r3, r1
    8792:	1c19      	adds	r1, r3, #0
    8794:	1c03      	adds	r3, r0, #0
    8796:	430b      	orrs	r3, r1
    8798:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    879a:	4b86      	ldr	r3, [pc, #536]	; (89b4 <usb_init+0x344>)
    879c:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    879e:	0ddb      	lsrs	r3, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    87a0:	2207      	movs	r2, #7
    87a2:	4013      	ands	r3, r2
    87a4:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    87a6:	69fb      	ldr	r3, [r7, #28]
    87a8:	2b07      	cmp	r3, #7
    87aa:	d101      	bne.n	87b0 <usb_init+0x140>
		pad_trim = 3;
    87ac:	2303      	movs	r3, #3
    87ae:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    87b0:	69fb      	ldr	r3, [r7, #28]
    87b2:	b2db      	uxtb	r3, r3
    87b4:	1c1a      	adds	r2, r3, #0
    87b6:	2307      	movs	r3, #7
    87b8:	4013      	ands	r3, r2
    87ba:	b2d9      	uxtb	r1, r3
    87bc:	68ba      	ldr	r2, [r7, #8]
    87be:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    87c0:	1c08      	adds	r0, r1, #0
    87c2:	2107      	movs	r1, #7
    87c4:	4001      	ands	r1, r0
    87c6:	0308      	lsls	r0, r1, #12
    87c8:	497c      	ldr	r1, [pc, #496]	; (89bc <usb_init+0x34c>)
    87ca:	400b      	ands	r3, r1
    87cc:	1c19      	adds	r1, r3, #0
    87ce:	1c03      	adds	r3, r0, #0
    87d0:	430b      	orrs	r3, r1
    87d2:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	7819      	ldrb	r1, [r3, #0]
    87d8:	68ba      	ldr	r2, [r7, #8]
    87da:	7813      	ldrb	r3, [r2, #0]
    87dc:	01c8      	lsls	r0, r1, #7
    87de:	217f      	movs	r1, #127	; 0x7f
    87e0:	400b      	ands	r3, r1
    87e2:	1c19      	adds	r1, r3, #0
    87e4:	1c03      	adds	r3, r0, #0
    87e6:	430b      	orrs	r3, r1
    87e8:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    87ea:	687b      	ldr	r3, [r7, #4]
    87ec:	7859      	ldrb	r1, [r3, #1]
    87ee:	68ba      	ldr	r2, [r7, #8]
    87f0:	7813      	ldrb	r3, [r2, #0]
    87f2:	2001      	movs	r0, #1
    87f4:	4001      	ands	r1, r0
    87f6:	0088      	lsls	r0, r1, #2
    87f8:	2104      	movs	r1, #4
    87fa:	438b      	bics	r3, r1
    87fc:	1c19      	adds	r1, r3, #0
    87fe:	1c03      	adds	r3, r0, #0
    8800:	430b      	orrs	r3, r1
    8802:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    8804:	4a6e      	ldr	r2, [pc, #440]	; (89c0 <usb_init+0x350>)
    8806:	68bb      	ldr	r3, [r7, #8]
    8808:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    880a:	687b      	ldr	r3, [r7, #4]
    880c:	78db      	ldrb	r3, [r3, #3]
    880e:	2b01      	cmp	r3, #1
    8810:	d106      	bne.n	8820 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	681a      	ldr	r2, [r3, #0]
    8816:	8913      	ldrh	r3, [r2, #8]
    8818:	210c      	movs	r1, #12
    881a:	438b      	bics	r3, r1
    881c:	8113      	strh	r3, [r2, #8]
    881e:	e00c      	b.n	883a <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	78db      	ldrb	r3, [r3, #3]
    8824:	2b00      	cmp	r3, #0
    8826:	d108      	bne.n	883a <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    8828:	68fb      	ldr	r3, [r7, #12]
    882a:	681a      	ldr	r2, [r3, #0]
    882c:	8913      	ldrh	r3, [r2, #8]
    882e:	210c      	movs	r1, #12
    8830:	438b      	bics	r3, r1
    8832:	1c19      	adds	r1, r3, #0
    8834:	2304      	movs	r3, #4
    8836:	430b      	orrs	r3, r1
    8838:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    883a:	2380      	movs	r3, #128	; 0x80
    883c:	005a      	lsls	r2, r3, #1
    883e:	4b60      	ldr	r3, [pc, #384]	; (89c0 <usb_init+0x350>)
    8840:	2100      	movs	r1, #0
    8842:	0018      	movs	r0, r3
    8844:	4b5f      	ldr	r3, [pc, #380]	; (89c4 <usb_init+0x354>)
    8846:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8848:	2300      	movs	r3, #0
    884a:	62fb      	str	r3, [r7, #44]	; 0x2c
    884c:	e009      	b.n	8862 <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    884e:	68fa      	ldr	r2, [r7, #12]
    8850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8852:	009b      	lsls	r3, r3, #2
    8854:	18d3      	adds	r3, r2, r3
    8856:	3304      	adds	r3, #4
    8858:	2200      	movs	r2, #0
    885a:	601a      	str	r2, [r3, #0]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    885e:	3301      	adds	r3, #1
    8860:	62fb      	str	r3, [r7, #44]	; 0x2c
    8862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8864:	2b07      	cmp	r3, #7
    8866:	d9f2      	bls.n	884e <usb_init+0x1de>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8868:	2300      	movs	r3, #0
    886a:	62fb      	str	r3, [r7, #44]	; 0x2c
    886c:	e016      	b.n	889c <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    886e:	2300      	movs	r3, #0
    8870:	62bb      	str	r3, [r7, #40]	; 0x28
    8872:	e00d      	b.n	8890 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    8874:	68fa      	ldr	r2, [r7, #12]
    8876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8878:	0099      	lsls	r1, r3, #2
    887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    887c:	18cb      	adds	r3, r1, r3
    887e:	3308      	adds	r3, #8
    8880:	009b      	lsls	r3, r3, #2
    8882:	18d3      	adds	r3, r2, r3
    8884:	3304      	adds	r3, #4
    8886:	2200      	movs	r2, #0
    8888:	601a      	str	r2, [r3, #0]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    888c:	3301      	adds	r3, #1
    888e:	62bb      	str	r3, [r7, #40]	; 0x28
    8890:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8892:	2b03      	cmp	r3, #3
    8894:	d9ee      	bls.n	8874 <usb_init+0x204>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8898:	3301      	adds	r3, #1
    889a:	62fb      	str	r3, [r7, #44]	; 0x2c
    889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    889e:	2b07      	cmp	r3, #7
    88a0:	d9e5      	bls.n	886e <usb_init+0x1fe>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    88a2:	68fb      	ldr	r3, [r7, #12]
    88a4:	22a4      	movs	r2, #164	; 0xa4
    88a6:	2100      	movs	r1, #0
    88a8:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    88aa:	68fb      	ldr	r3, [r7, #12]
    88ac:	22a5      	movs	r2, #165	; 0xa5
    88ae:	2100      	movs	r1, #0
    88b0:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    88b2:	2300      	movs	r3, #0
    88b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    88b6:	e010      	b.n	88da <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    88b8:	68fa      	ldr	r2, [r7, #12]
    88ba:	21a6      	movs	r1, #166	; 0xa6
    88bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88be:	18d3      	adds	r3, r2, r3
    88c0:	185b      	adds	r3, r3, r1
    88c2:	2200      	movs	r2, #0
    88c4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    88c6:	68fa      	ldr	r2, [r7, #12]
    88c8:	21ae      	movs	r1, #174	; 0xae
    88ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88cc:	18d3      	adds	r3, r2, r3
    88ce:	185b      	adds	r3, r3, r1
    88d0:	2200      	movs	r2, #0
    88d2:	701a      	strb	r2, [r3, #0]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    88d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88d6:	3301      	adds	r3, #1
    88d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    88da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88dc:	2b07      	cmp	r3, #7
    88de:	d9eb      	bls.n	88b8 <usb_init+0x248>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    88e0:	2300      	movs	r3, #0
    88e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    88e4:	e008      	b.n	88f8 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    88e6:	68fb      	ldr	r3, [r7, #12]
    88e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    88ea:	322e      	adds	r2, #46	; 0x2e
    88ec:	0092      	lsls	r2, r2, #2
    88ee:	2100      	movs	r1, #0
    88f0:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    88f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88f4:	3301      	adds	r3, #1
    88f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    88f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88fa:	2b06      	cmp	r3, #6
    88fc:	d9f3      	bls.n	88e6 <usb_init+0x276>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    88fe:	2300      	movs	r3, #0
    8900:	62fb      	str	r3, [r7, #44]	; 0x2c
    8902:	e016      	b.n	8932 <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    8904:	2300      	movs	r3, #0
    8906:	62bb      	str	r3, [r7, #40]	; 0x28
    8908:	e00d      	b.n	8926 <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    890a:	68fa      	ldr	r2, [r7, #12]
    890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    890e:	0099      	lsls	r1, r3, #2
    8910:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8912:	18cb      	adds	r3, r1, r3
    8914:	3334      	adds	r3, #52	; 0x34
    8916:	009b      	lsls	r3, r3, #2
    8918:	18d3      	adds	r3, r2, r3
    891a:	3304      	adds	r3, #4
    891c:	2200      	movs	r2, #0
    891e:	601a      	str	r2, [r3, #0]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    8920:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8922:	3301      	adds	r3, #1
    8924:	62bb      	str	r3, [r7, #40]	; 0x28
    8926:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8928:	2b03      	cmp	r3, #3
    892a:	d9ee      	bls.n	890a <usb_init+0x29a>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    892e:	3301      	adds	r3, #1
    8930:	62fb      	str	r3, [r7, #44]	; 0x2c
    8932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8934:	2b07      	cmp	r3, #7
    8936:	d9e5      	bls.n	8904 <usb_init+0x294>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    8938:	68fa      	ldr	r2, [r7, #12]
    893a:	23aa      	movs	r3, #170	; 0xaa
    893c:	005b      	lsls	r3, r3, #1
    893e:	2100      	movs	r1, #0
    8940:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    8942:	68fa      	ldr	r2, [r7, #12]
    8944:	23ab      	movs	r3, #171	; 0xab
    8946:	005b      	lsls	r3, r3, #1
    8948:	2100      	movs	r1, #0
    894a:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    894c:	2300      	movs	r3, #0
    894e:	62bb      	str	r3, [r7, #40]	; 0x28
    8950:	e012      	b.n	8978 <usb_init+0x308>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    8952:	68f9      	ldr	r1, [r7, #12]
    8954:	23ac      	movs	r3, #172	; 0xac
    8956:	005b      	lsls	r3, r3, #1
    8958:	6aba      	ldr	r2, [r7, #40]	; 0x28
    895a:	188a      	adds	r2, r1, r2
    895c:	18d3      	adds	r3, r2, r3
    895e:	2200      	movs	r2, #0
    8960:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    8962:	68f9      	ldr	r1, [r7, #12]
    8964:	23b0      	movs	r3, #176	; 0xb0
    8966:	005b      	lsls	r3, r3, #1
    8968:	6aba      	ldr	r2, [r7, #40]	; 0x28
    896a:	188a      	adds	r2, r1, r2
    896c:	18d3      	adds	r3, r2, r3
    896e:	2200      	movs	r2, #0
    8970:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    8972:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8974:	3301      	adds	r3, #1
    8976:	62bb      	str	r3, [r7, #40]	; 0x28
    8978:	6abb      	ldr	r3, [r7, #40]	; 0x28
    897a:	2b07      	cmp	r3, #7
    897c:	d9e9      	bls.n	8952 <usb_init+0x2e2>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    897e:	2007      	movs	r0, #7
    8980:	4b11      	ldr	r3, [pc, #68]	; (89c8 <usb_init+0x358>)
    8982:	4798      	blx	r3

	return STATUS_OK;
    8984:	2300      	movs	r3, #0
}
    8986:	0018      	movs	r0, r3
    8988:	46bd      	mov	sp, r7
    898a:	b00c      	add	sp, #48	; 0x30
    898c:	bd80      	pop	{r7, pc}
    898e:	46c0      	nop			; (mov r8, r8)
    8990:	20000234 	.word	0x20000234
    8994:	2000021c 	.word	0x2000021c
    8998:	00006c5d 	.word	0x00006c5d
    899c:	00006cb9 	.word	0x00006cb9
    89a0:	000053bd 	.word	0x000053bd
    89a4:	00006c45 	.word	0x00006c45
    89a8:	000050d1 	.word	0x000050d1
    89ac:	00005115 	.word	0x00005115
    89b0:	41005000 	.word	0x41005000
    89b4:	00806024 	.word	0x00806024
    89b8:	fffff83f 	.word	0xfffff83f
    89bc:	ffff8fff 	.word	0xffff8fff
    89c0:	20000504 	.word	0x20000504
    89c4:	00009117 	.word	0x00009117
    89c8:	00006ce1 	.word	0x00006ce1

000089cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    89d2:	4b2f      	ldr	r3, [pc, #188]	; (8a90 <Reset_Handler+0xc4>)
    89d4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    89d6:	4b2f      	ldr	r3, [pc, #188]	; (8a94 <Reset_Handler+0xc8>)
    89d8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    89da:	687a      	ldr	r2, [r7, #4]
    89dc:	683b      	ldr	r3, [r7, #0]
    89de:	429a      	cmp	r2, r3
    89e0:	d00c      	beq.n	89fc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    89e2:	e007      	b.n	89f4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    89e4:	683b      	ldr	r3, [r7, #0]
    89e6:	1d1a      	adds	r2, r3, #4
    89e8:	603a      	str	r2, [r7, #0]
    89ea:	687a      	ldr	r2, [r7, #4]
    89ec:	1d11      	adds	r1, r2, #4
    89ee:	6079      	str	r1, [r7, #4]
    89f0:	6812      	ldr	r2, [r2, #0]
    89f2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    89f4:	683a      	ldr	r2, [r7, #0]
    89f6:	4b28      	ldr	r3, [pc, #160]	; (8a98 <Reset_Handler+0xcc>)
    89f8:	429a      	cmp	r2, r3
    89fa:	d3f3      	bcc.n	89e4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    89fc:	4b27      	ldr	r3, [pc, #156]	; (8a9c <Reset_Handler+0xd0>)
    89fe:	603b      	str	r3, [r7, #0]
    8a00:	e004      	b.n	8a0c <Reset_Handler+0x40>
                *pDest++ = 0;
    8a02:	683b      	ldr	r3, [r7, #0]
    8a04:	1d1a      	adds	r2, r3, #4
    8a06:	603a      	str	r2, [r7, #0]
    8a08:	2200      	movs	r2, #0
    8a0a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8a0c:	683a      	ldr	r2, [r7, #0]
    8a0e:	4b24      	ldr	r3, [pc, #144]	; (8aa0 <Reset_Handler+0xd4>)
    8a10:	429a      	cmp	r2, r3
    8a12:	d3f6      	bcc.n	8a02 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8a14:	4b23      	ldr	r3, [pc, #140]	; (8aa4 <Reset_Handler+0xd8>)
    8a16:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8a18:	4b23      	ldr	r3, [pc, #140]	; (8aa8 <Reset_Handler+0xdc>)
    8a1a:	687a      	ldr	r2, [r7, #4]
    8a1c:	21ff      	movs	r1, #255	; 0xff
    8a1e:	438a      	bics	r2, r1
    8a20:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8a22:	4a22      	ldr	r2, [pc, #136]	; (8aac <Reset_Handler+0xe0>)
    8a24:	2390      	movs	r3, #144	; 0x90
    8a26:	005b      	lsls	r3, r3, #1
    8a28:	2102      	movs	r1, #2
    8a2a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8a2c:	4a20      	ldr	r2, [pc, #128]	; (8ab0 <Reset_Handler+0xe4>)
    8a2e:	78d3      	ldrb	r3, [r2, #3]
    8a30:	2103      	movs	r1, #3
    8a32:	438b      	bics	r3, r1
    8a34:	1c19      	adds	r1, r3, #0
    8a36:	2302      	movs	r3, #2
    8a38:	430b      	orrs	r3, r1
    8a3a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8a3c:	4a1c      	ldr	r2, [pc, #112]	; (8ab0 <Reset_Handler+0xe4>)
    8a3e:	78d3      	ldrb	r3, [r2, #3]
    8a40:	210c      	movs	r1, #12
    8a42:	438b      	bics	r3, r1
    8a44:	1c19      	adds	r1, r3, #0
    8a46:	2308      	movs	r3, #8
    8a48:	430b      	orrs	r3, r1
    8a4a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    8a4c:	4a19      	ldr	r2, [pc, #100]	; (8ab4 <Reset_Handler+0xe8>)
    8a4e:	7b93      	ldrb	r3, [r2, #14]
    8a50:	2130      	movs	r1, #48	; 0x30
    8a52:	438b      	bics	r3, r1
    8a54:	1c19      	adds	r1, r3, #0
    8a56:	2320      	movs	r3, #32
    8a58:	430b      	orrs	r3, r1
    8a5a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8a5c:	4a15      	ldr	r2, [pc, #84]	; (8ab4 <Reset_Handler+0xe8>)
    8a5e:	7b93      	ldrb	r3, [r2, #14]
    8a60:	210c      	movs	r1, #12
    8a62:	438b      	bics	r3, r1
    8a64:	1c19      	adds	r1, r3, #0
    8a66:	2308      	movs	r3, #8
    8a68:	430b      	orrs	r3, r1
    8a6a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8a6c:	4a11      	ldr	r2, [pc, #68]	; (8ab4 <Reset_Handler+0xe8>)
    8a6e:	7b93      	ldrb	r3, [r2, #14]
    8a70:	2103      	movs	r1, #3
    8a72:	438b      	bics	r3, r1
    8a74:	1c19      	adds	r1, r3, #0
    8a76:	2302      	movs	r3, #2
    8a78:	430b      	orrs	r3, r1
    8a7a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    8a7c:	4a0e      	ldr	r2, [pc, #56]	; (8ab8 <Reset_Handler+0xec>)
    8a7e:	6853      	ldr	r3, [r2, #4]
    8a80:	2180      	movs	r1, #128	; 0x80
    8a82:	430b      	orrs	r3, r1
    8a84:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    8a86:	4b0d      	ldr	r3, [pc, #52]	; (8abc <Reset_Handler+0xf0>)
    8a88:	4798      	blx	r3

        /* Branch to main function */
        main();
    8a8a:	4b0d      	ldr	r3, [pc, #52]	; (8ac0 <Reset_Handler+0xf4>)
    8a8c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8a8e:	e7fe      	b.n	8a8e <Reset_Handler+0xc2>
    8a90:	00009248 	.word	0x00009248
    8a94:	20000000 	.word	0x20000000
    8a98:	200000e0 	.word	0x200000e0
    8a9c:	200000e0 	.word	0x200000e0
    8aa0:	20000604 	.word	0x20000604
    8aa4:	00000000 	.word	0x00000000
    8aa8:	e000ed00 	.word	0xe000ed00
    8aac:	41007000 	.word	0x41007000
    8ab0:	41005000 	.word	0x41005000
    8ab4:	41004800 	.word	0x41004800
    8ab8:	41004000 	.word	0x41004000
    8abc:	000090b9 	.word	0x000090b9
    8ac0:	00008c59 	.word	0x00008c59

00008ac4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8ac4:	b580      	push	{r7, lr}
    8ac6:	af00      	add	r7, sp, #0
        while (1) {
        }
    8ac8:	e7fe      	b.n	8ac8 <Dummy_Handler+0x4>
    8aca:	46c0      	nop			; (mov r8, r8)

00008acc <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    8acc:	b580      	push	{r7, lr}
    8ace:	b082      	sub	sp, #8
    8ad0:	af00      	add	r7, sp, #0
    8ad2:	0002      	movs	r2, r0
    8ad4:	1dfb      	adds	r3, r7, #7
    8ad6:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    8ad8:	4a13      	ldr	r2, [pc, #76]	; (8b28 <system_set_sleepmode+0x5c>)
    8ada:	6853      	ldr	r3, [r2, #4]
    8adc:	21c0      	movs	r1, #192	; 0xc0
    8ade:	0089      	lsls	r1, r1, #2
    8ae0:	430b      	orrs	r3, r1
    8ae2:	6053      	str	r3, [r2, #4]
#endif

	switch (sleep_mode) {
    8ae4:	1dfb      	adds	r3, r7, #7
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	db16      	blt.n	8b1a <system_set_sleepmode+0x4e>
    8aec:	2b02      	cmp	r3, #2
    8aee:	dd02      	ble.n	8af6 <system_set_sleepmode+0x2a>
    8af0:	2b03      	cmp	r3, #3
    8af2:	d00b      	beq.n	8b0c <system_set_sleepmode+0x40>
    8af4:	e011      	b.n	8b1a <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    8af6:	4b0d      	ldr	r3, [pc, #52]	; (8b2c <system_set_sleepmode+0x60>)
    8af8:	4a0c      	ldr	r2, [pc, #48]	; (8b2c <system_set_sleepmode+0x60>)
    8afa:	6912      	ldr	r2, [r2, #16]
    8afc:	2104      	movs	r1, #4
    8afe:	438a      	bics	r2, r1
    8b00:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    8b02:	4a0b      	ldr	r2, [pc, #44]	; (8b30 <system_set_sleepmode+0x64>)
    8b04:	1dfb      	adds	r3, r7, #7
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	7053      	strb	r3, [r2, #1]
			break;
    8b0a:	e008      	b.n	8b1e <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    8b0c:	4b07      	ldr	r3, [pc, #28]	; (8b2c <system_set_sleepmode+0x60>)
    8b0e:	4a07      	ldr	r2, [pc, #28]	; (8b2c <system_set_sleepmode+0x60>)
    8b10:	6912      	ldr	r2, [r2, #16]
    8b12:	2104      	movs	r1, #4
    8b14:	430a      	orrs	r2, r1
    8b16:	611a      	str	r2, [r3, #16]
			break;
    8b18:	e001      	b.n	8b1e <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    8b1a:	2317      	movs	r3, #23
    8b1c:	e000      	b.n	8b20 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    8b1e:	2300      	movs	r3, #0
}
    8b20:	0018      	movs	r0, r3
    8b22:	46bd      	mov	sp, r7
    8b24:	b002      	add	sp, #8
    8b26:	bd80      	pop	{r7, pc}
    8b28:	41004000 	.word	0x41004000
    8b2c:	e000ed00 	.word	0xe000ed00
    8b30:	40000400 	.word	0x40000400

00008b34 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    8b34:	b580      	push	{r7, lr}
    8b36:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    8b38:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    8b3c:	bf30      	wfi
	__DSB();
	__WFI();
}
    8b3e:	46c0      	nop			; (mov r8, r8)
    8b40:	46bd      	mov	sp, r7
    8b42:	bd80      	pop	{r7, pc}

00008b44 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    8b44:	b580      	push	{r7, lr}
    8b46:	b082      	sub	sp, #8
    8b48:	af00      	add	r7, sp, #0
    8b4a:	0002      	movs	r2, r0
    8b4c:	1dfb      	adds	r3, r7, #7
    8b4e:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8b50:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8b52:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    8b56:	4b0b      	ldr	r3, [pc, #44]	; (8b84 <sleepmgr_sleep+0x40>)
    8b58:	2200      	movs	r2, #0
    8b5a:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    8b5c:	1dfb      	adds	r3, r7, #7
    8b5e:	781b      	ldrb	r3, [r3, #0]
    8b60:	3b01      	subs	r3, #1
    8b62:	b2db      	uxtb	r3, r3
    8b64:	0018      	movs	r0, r3
    8b66:	4b08      	ldr	r3, [pc, #32]	; (8b88 <sleepmgr_sleep+0x44>)
    8b68:	4798      	blx	r3
	cpu_irq_enable();
    8b6a:	4b06      	ldr	r3, [pc, #24]	; (8b84 <sleepmgr_sleep+0x40>)
    8b6c:	2201      	movs	r2, #1
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8b74:	b662      	cpsie	i
	system_sleep();
    8b76:	4b05      	ldr	r3, [pc, #20]	; (8b8c <sleepmgr_sleep+0x48>)
    8b78:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8b7a:	46c0      	nop			; (mov r8, r8)
    8b7c:	46bd      	mov	sp, r7
    8b7e:	b002      	add	sp, #8
    8b80:	bd80      	pop	{r7, pc}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	200000dc 	.word	0x200000dc
    8b88:	00008acd 	.word	0x00008acd
    8b8c:	00008b35 	.word	0x00008b35

00008b90 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	b082      	sub	sp, #8
    8b94:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    8b96:	1dfb      	adds	r3, r7, #7
    8b98:	2200      	movs	r2, #0
    8b9a:	701a      	strb	r2, [r3, #0]
    8b9c:	e009      	b.n	8bb2 <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    8b9e:	1dfb      	adds	r3, r7, #7
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	4a09      	ldr	r2, [pc, #36]	; (8bc8 <sleepmgr_init+0x38>)
    8ba4:	2100      	movs	r1, #0
    8ba6:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    8ba8:	1dfb      	adds	r3, r7, #7
    8baa:	781a      	ldrb	r2, [r3, #0]
    8bac:	1dfb      	adds	r3, r7, #7
    8bae:	3201      	adds	r2, #1
    8bb0:	701a      	strb	r2, [r3, #0]
    8bb2:	1dfb      	adds	r3, r7, #7
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	2b03      	cmp	r3, #3
    8bb8:	d9f1      	bls.n	8b9e <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    8bba:	4b03      	ldr	r3, [pc, #12]	; (8bc8 <sleepmgr_init+0x38>)
    8bbc:	2201      	movs	r2, #1
    8bbe:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8bc0:	46c0      	nop			; (mov r8, r8)
    8bc2:	46bd      	mov	sp, r7
    8bc4:	b002      	add	sp, #8
    8bc6:	bd80      	pop	{r7, pc}
    8bc8:	200002f4 	.word	0x200002f4

00008bcc <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    8bcc:	b580      	push	{r7, lr}
    8bce:	b082      	sub	sp, #8
    8bd0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    8bd2:	1dfb      	adds	r3, r7, #7
    8bd4:	2200      	movs	r2, #0
    8bd6:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    8bd8:	4b0a      	ldr	r3, [pc, #40]	; (8c04 <sleepmgr_get_sleep_mode+0x38>)
    8bda:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8bdc:	e007      	b.n	8bee <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    8bde:	683b      	ldr	r3, [r7, #0]
    8be0:	3301      	adds	r3, #1
    8be2:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    8be4:	1dfb      	adds	r3, r7, #7
    8be6:	1dfa      	adds	r2, r7, #7
    8be8:	7812      	ldrb	r2, [r2, #0]
    8bea:	3201      	adds	r2, #1
    8bec:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    8bee:	683b      	ldr	r3, [r7, #0]
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d0f3      	beq.n	8bde <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    8bf6:	1dfb      	adds	r3, r7, #7
    8bf8:	781b      	ldrb	r3, [r3, #0]
}
    8bfa:	0018      	movs	r0, r3
    8bfc:	46bd      	mov	sp, r7
    8bfe:	b002      	add	sp, #8
    8c00:	bd80      	pop	{r7, pc}
    8c02:	46c0      	nop			; (mov r8, r8)
    8c04:	200002f4 	.word	0x200002f4

00008c08 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    8c08:	b590      	push	{r4, r7, lr}
    8c0a:	b083      	sub	sp, #12
    8c0c:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8c0e:	b672      	cpsid	i
    8c10:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    8c14:	4b0d      	ldr	r3, [pc, #52]	; (8c4c <sleepmgr_enter_sleep+0x44>)
    8c16:	2200      	movs	r2, #0
    8c18:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    8c1a:	1dfc      	adds	r4, r7, #7
    8c1c:	4b0c      	ldr	r3, [pc, #48]	; (8c50 <sleepmgr_enter_sleep+0x48>)
    8c1e:	4798      	blx	r3
    8c20:	0003      	movs	r3, r0
    8c22:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    8c24:	1dfb      	adds	r3, r7, #7
    8c26:	781b      	ldrb	r3, [r3, #0]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d106      	bne.n	8c3a <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    8c2c:	4b07      	ldr	r3, [pc, #28]	; (8c4c <sleepmgr_enter_sleep+0x44>)
    8c2e:	2201      	movs	r2, #1
    8c30:	701a      	strb	r2, [r3, #0]
    8c32:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8c36:	b662      	cpsie	i
		return;
    8c38:	e004      	b.n	8c44 <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    8c3a:	1dfb      	adds	r3, r7, #7
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	0018      	movs	r0, r3
    8c40:	4b04      	ldr	r3, [pc, #16]	; (8c54 <sleepmgr_enter_sleep+0x4c>)
    8c42:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8c44:	46bd      	mov	sp, r7
    8c46:	b003      	add	sp, #12
    8c48:	bd90      	pop	{r4, r7, pc}
    8c4a:	46c0      	nop			; (mov r8, r8)
    8c4c:	200000dc 	.word	0x200000dc
    8c50:	00008bcd 	.word	0x00008bcd
    8c54:	00008b45 	.word	0x00008b45

00008c58 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    8c5c:	4b09      	ldr	r3, [pc, #36]	; (8c84 <main+0x2c>)
    8c5e:	2201      	movs	r2, #1
    8c60:	701a      	strb	r2, [r3, #0]
    8c62:	f3bf 8f5f 	dmb	sy
    8c66:	b662      	cpsie	i
	system_init();
    8c68:	4b07      	ldr	r3, [pc, #28]	; (8c88 <main+0x30>)
    8c6a:	4798      	blx	r3

	// Initialize the sleep manager
	sleepmgr_init();
    8c6c:	4b07      	ldr	r3, [pc, #28]	; (8c8c <main+0x34>)
    8c6e:	4798      	blx	r3
	ui_init();
    8c70:	4b07      	ldr	r3, [pc, #28]	; (8c90 <main+0x38>)
    8c72:	4798      	blx	r3
	ui_powerdown();
    8c74:	4b07      	ldr	r3, [pc, #28]	; (8c94 <main+0x3c>)
    8c76:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    8c78:	4b07      	ldr	r3, [pc, #28]	; (8c98 <main+0x40>)
    8c7a:	4798      	blx	r3
				static uint16_t virtual_sof = 0;
				ui_process(virtual_sof++);
			}
		}
#else /* #ifdef USB_DEVICE_LOW_SPEED */
		sleepmgr_enter_sleep();
    8c7c:	4b07      	ldr	r3, [pc, #28]	; (8c9c <main+0x44>)
    8c7e:	4798      	blx	r3
#endif
	}
    8c80:	e7fc      	b.n	8c7c <main+0x24>
    8c82:	46c0      	nop			; (mov r8, r8)
    8c84:	200000dc 	.word	0x200000dc
    8c88:	00005411 	.word	0x00005411
    8c8c:	00008b91 	.word	0x00008b91
    8c90:	00002719 	.word	0x00002719
    8c94:	00002741 	.word	0x00002741
    8c98:	00003429 	.word	0x00003429
    8c9c:	00008c09 	.word	0x00008c09

00008ca0 <main_suspend_action>:
}

void main_suspend_action(void)
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	af00      	add	r7, sp, #0
	ui_powerdown();
    8ca4:	4b02      	ldr	r3, [pc, #8]	; (8cb0 <main_suspend_action+0x10>)
    8ca6:	4798      	blx	r3
}
    8ca8:	46c0      	nop			; (mov r8, r8)
    8caa:	46bd      	mov	sp, r7
    8cac:	bd80      	pop	{r7, pc}
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	00002741 	.word	0x00002741

00008cb4 <main_resume_action>:

void main_resume_action(void)
{
    8cb4:	b580      	push	{r7, lr}
    8cb6:	af00      	add	r7, sp, #0
	ui_wakeup();
    8cb8:	4b02      	ldr	r3, [pc, #8]	; (8cc4 <main_resume_action+0x10>)
    8cba:	4798      	blx	r3
}
    8cbc:	46c0      	nop			; (mov r8, r8)
    8cbe:	46bd      	mov	sp, r7
    8cc0:	bd80      	pop	{r7, pc}
    8cc2:	46c0      	nop			; (mov r8, r8)
    8cc4:	00002789 	.word	0x00002789

00008cc8 <main_sof_action>:

void main_sof_action(void)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	af00      	add	r7, sp, #0
	if (!main_b_mouse_enable)
    8ccc:	4b08      	ldr	r3, [pc, #32]	; (8cf0 <main_sof_action+0x28>)
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	b2db      	uxtb	r3, r3
    8cd2:	2201      	movs	r2, #1
    8cd4:	4053      	eors	r3, r2
    8cd6:	b2db      	uxtb	r3, r3
    8cd8:	2b00      	cmp	r3, #0
    8cda:	d106      	bne.n	8cea <main_sof_action+0x22>
		return;
	ui_process(udd_get_frame_number());
    8cdc:	4b05      	ldr	r3, [pc, #20]	; (8cf4 <main_sof_action+0x2c>)
    8cde:	4798      	blx	r3
    8ce0:	0003      	movs	r3, r0
    8ce2:	0018      	movs	r0, r3
    8ce4:	4b04      	ldr	r3, [pc, #16]	; (8cf8 <main_sof_action+0x30>)
    8ce6:	4798      	blx	r3
    8ce8:	e000      	b.n	8cec <main_sof_action+0x24>
}

void main_sof_action(void)
{
	if (!main_b_mouse_enable)
		return;
    8cea:	46c0      	nop			; (mov r8, r8)
	ui_process(udd_get_frame_number());
}
    8cec:	46bd      	mov	sp, r7
    8cee:	bd80      	pop	{r7, pc}
    8cf0:	20000238 	.word	0x20000238
    8cf4:	00005c21 	.word	0x00005c21
    8cf8:	000027a1 	.word	0x000027a1

00008cfc <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8d00:	4b02      	ldr	r3, [pc, #8]	; (8d0c <main_remotewakeup_enable+0x10>)
    8d02:	4798      	blx	r3
}
    8d04:	46c0      	nop			; (mov r8, r8)
    8d06:	46bd      	mov	sp, r7
    8d08:	bd80      	pop	{r7, pc}
    8d0a:	46c0      	nop			; (mov r8, r8)
    8d0c:	00002759 	.word	0x00002759

00008d10 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    8d10:	b580      	push	{r7, lr}
    8d12:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8d14:	4b02      	ldr	r3, [pc, #8]	; (8d20 <main_remotewakeup_disable+0x10>)
    8d16:	4798      	blx	r3
}
    8d18:	46c0      	nop			; (mov r8, r8)
    8d1a:	46bd      	mov	sp, r7
    8d1c:	bd80      	pop	{r7, pc}
    8d1e:	46c0      	nop			; (mov r8, r8)
    8d20:	00002771 	.word	0x00002771

00008d24 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	af00      	add	r7, sp, #0
	ui_powerdown();
    8d28:	4b02      	ldr	r3, [pc, #8]	; (8d34 <main_suspend_lpm_action+0x10>)
    8d2a:	4798      	blx	r3
}
    8d2c:	46c0      	nop			; (mov r8, r8)
    8d2e:	46bd      	mov	sp, r7
    8d30:	bd80      	pop	{r7, pc}
    8d32:	46c0      	nop			; (mov r8, r8)
    8d34:	00002741 	.word	0x00002741

00008d38 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    8d38:	b580      	push	{r7, lr}
    8d3a:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8d3c:	4b02      	ldr	r3, [pc, #8]	; (8d48 <main_remotewakeup_lpm_disable+0x10>)
    8d3e:	4798      	blx	r3
}
    8d40:	46c0      	nop			; (mov r8, r8)
    8d42:	46bd      	mov	sp, r7
    8d44:	bd80      	pop	{r7, pc}
    8d46:	46c0      	nop			; (mov r8, r8)
    8d48:	00002771 	.word	0x00002771

00008d4c <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8d50:	4b02      	ldr	r3, [pc, #8]	; (8d5c <main_remotewakeup_lpm_enable+0x10>)
    8d52:	4798      	blx	r3
}
    8d54:	46c0      	nop			; (mov r8, r8)
    8d56:	46bd      	mov	sp, r7
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	00002759 	.word	0x00002759

00008d60 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
    8d60:	b580      	push	{r7, lr}
    8d62:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    8d64:	4b03      	ldr	r3, [pc, #12]	; (8d74 <main_mouse_enable+0x14>)
    8d66:	2201      	movs	r2, #1
    8d68:	701a      	strb	r2, [r3, #0]
	return true;
    8d6a:	2301      	movs	r3, #1
}
    8d6c:	0018      	movs	r0, r3
    8d6e:	46bd      	mov	sp, r7
    8d70:	bd80      	pop	{r7, pc}
    8d72:	46c0      	nop			; (mov r8, r8)
    8d74:	20000238 	.word	0x20000238

00008d78 <main_mouse_disable>:

void main_mouse_disable(void)
{
    8d78:	b580      	push	{r7, lr}
    8d7a:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    8d7c:	4b02      	ldr	r3, [pc, #8]	; (8d88 <main_mouse_disable+0x10>)
    8d7e:	2200      	movs	r2, #0
    8d80:	701a      	strb	r2, [r3, #0]
}
    8d82:	46c0      	nop			; (mov r8, r8)
    8d84:	46bd      	mov	sp, r7
    8d86:	bd80      	pop	{r7, pc}
    8d88:	20000238 	.word	0x20000238

00008d8c <__aeabi_uidiv>:
    8d8c:	2200      	movs	r2, #0
    8d8e:	0843      	lsrs	r3, r0, #1
    8d90:	428b      	cmp	r3, r1
    8d92:	d374      	bcc.n	8e7e <__aeabi_uidiv+0xf2>
    8d94:	0903      	lsrs	r3, r0, #4
    8d96:	428b      	cmp	r3, r1
    8d98:	d35f      	bcc.n	8e5a <__aeabi_uidiv+0xce>
    8d9a:	0a03      	lsrs	r3, r0, #8
    8d9c:	428b      	cmp	r3, r1
    8d9e:	d344      	bcc.n	8e2a <__aeabi_uidiv+0x9e>
    8da0:	0b03      	lsrs	r3, r0, #12
    8da2:	428b      	cmp	r3, r1
    8da4:	d328      	bcc.n	8df8 <__aeabi_uidiv+0x6c>
    8da6:	0c03      	lsrs	r3, r0, #16
    8da8:	428b      	cmp	r3, r1
    8daa:	d30d      	bcc.n	8dc8 <__aeabi_uidiv+0x3c>
    8dac:	22ff      	movs	r2, #255	; 0xff
    8dae:	0209      	lsls	r1, r1, #8
    8db0:	ba12      	rev	r2, r2
    8db2:	0c03      	lsrs	r3, r0, #16
    8db4:	428b      	cmp	r3, r1
    8db6:	d302      	bcc.n	8dbe <__aeabi_uidiv+0x32>
    8db8:	1212      	asrs	r2, r2, #8
    8dba:	0209      	lsls	r1, r1, #8
    8dbc:	d065      	beq.n	8e8a <__aeabi_uidiv+0xfe>
    8dbe:	0b03      	lsrs	r3, r0, #12
    8dc0:	428b      	cmp	r3, r1
    8dc2:	d319      	bcc.n	8df8 <__aeabi_uidiv+0x6c>
    8dc4:	e000      	b.n	8dc8 <__aeabi_uidiv+0x3c>
    8dc6:	0a09      	lsrs	r1, r1, #8
    8dc8:	0bc3      	lsrs	r3, r0, #15
    8dca:	428b      	cmp	r3, r1
    8dcc:	d301      	bcc.n	8dd2 <__aeabi_uidiv+0x46>
    8dce:	03cb      	lsls	r3, r1, #15
    8dd0:	1ac0      	subs	r0, r0, r3
    8dd2:	4152      	adcs	r2, r2
    8dd4:	0b83      	lsrs	r3, r0, #14
    8dd6:	428b      	cmp	r3, r1
    8dd8:	d301      	bcc.n	8dde <__aeabi_uidiv+0x52>
    8dda:	038b      	lsls	r3, r1, #14
    8ddc:	1ac0      	subs	r0, r0, r3
    8dde:	4152      	adcs	r2, r2
    8de0:	0b43      	lsrs	r3, r0, #13
    8de2:	428b      	cmp	r3, r1
    8de4:	d301      	bcc.n	8dea <__aeabi_uidiv+0x5e>
    8de6:	034b      	lsls	r3, r1, #13
    8de8:	1ac0      	subs	r0, r0, r3
    8dea:	4152      	adcs	r2, r2
    8dec:	0b03      	lsrs	r3, r0, #12
    8dee:	428b      	cmp	r3, r1
    8df0:	d301      	bcc.n	8df6 <__aeabi_uidiv+0x6a>
    8df2:	030b      	lsls	r3, r1, #12
    8df4:	1ac0      	subs	r0, r0, r3
    8df6:	4152      	adcs	r2, r2
    8df8:	0ac3      	lsrs	r3, r0, #11
    8dfa:	428b      	cmp	r3, r1
    8dfc:	d301      	bcc.n	8e02 <__aeabi_uidiv+0x76>
    8dfe:	02cb      	lsls	r3, r1, #11
    8e00:	1ac0      	subs	r0, r0, r3
    8e02:	4152      	adcs	r2, r2
    8e04:	0a83      	lsrs	r3, r0, #10
    8e06:	428b      	cmp	r3, r1
    8e08:	d301      	bcc.n	8e0e <__aeabi_uidiv+0x82>
    8e0a:	028b      	lsls	r3, r1, #10
    8e0c:	1ac0      	subs	r0, r0, r3
    8e0e:	4152      	adcs	r2, r2
    8e10:	0a43      	lsrs	r3, r0, #9
    8e12:	428b      	cmp	r3, r1
    8e14:	d301      	bcc.n	8e1a <__aeabi_uidiv+0x8e>
    8e16:	024b      	lsls	r3, r1, #9
    8e18:	1ac0      	subs	r0, r0, r3
    8e1a:	4152      	adcs	r2, r2
    8e1c:	0a03      	lsrs	r3, r0, #8
    8e1e:	428b      	cmp	r3, r1
    8e20:	d301      	bcc.n	8e26 <__aeabi_uidiv+0x9a>
    8e22:	020b      	lsls	r3, r1, #8
    8e24:	1ac0      	subs	r0, r0, r3
    8e26:	4152      	adcs	r2, r2
    8e28:	d2cd      	bcs.n	8dc6 <__aeabi_uidiv+0x3a>
    8e2a:	09c3      	lsrs	r3, r0, #7
    8e2c:	428b      	cmp	r3, r1
    8e2e:	d301      	bcc.n	8e34 <__aeabi_uidiv+0xa8>
    8e30:	01cb      	lsls	r3, r1, #7
    8e32:	1ac0      	subs	r0, r0, r3
    8e34:	4152      	adcs	r2, r2
    8e36:	0983      	lsrs	r3, r0, #6
    8e38:	428b      	cmp	r3, r1
    8e3a:	d301      	bcc.n	8e40 <__aeabi_uidiv+0xb4>
    8e3c:	018b      	lsls	r3, r1, #6
    8e3e:	1ac0      	subs	r0, r0, r3
    8e40:	4152      	adcs	r2, r2
    8e42:	0943      	lsrs	r3, r0, #5
    8e44:	428b      	cmp	r3, r1
    8e46:	d301      	bcc.n	8e4c <__aeabi_uidiv+0xc0>
    8e48:	014b      	lsls	r3, r1, #5
    8e4a:	1ac0      	subs	r0, r0, r3
    8e4c:	4152      	adcs	r2, r2
    8e4e:	0903      	lsrs	r3, r0, #4
    8e50:	428b      	cmp	r3, r1
    8e52:	d301      	bcc.n	8e58 <__aeabi_uidiv+0xcc>
    8e54:	010b      	lsls	r3, r1, #4
    8e56:	1ac0      	subs	r0, r0, r3
    8e58:	4152      	adcs	r2, r2
    8e5a:	08c3      	lsrs	r3, r0, #3
    8e5c:	428b      	cmp	r3, r1
    8e5e:	d301      	bcc.n	8e64 <__aeabi_uidiv+0xd8>
    8e60:	00cb      	lsls	r3, r1, #3
    8e62:	1ac0      	subs	r0, r0, r3
    8e64:	4152      	adcs	r2, r2
    8e66:	0883      	lsrs	r3, r0, #2
    8e68:	428b      	cmp	r3, r1
    8e6a:	d301      	bcc.n	8e70 <__aeabi_uidiv+0xe4>
    8e6c:	008b      	lsls	r3, r1, #2
    8e6e:	1ac0      	subs	r0, r0, r3
    8e70:	4152      	adcs	r2, r2
    8e72:	0843      	lsrs	r3, r0, #1
    8e74:	428b      	cmp	r3, r1
    8e76:	d301      	bcc.n	8e7c <__aeabi_uidiv+0xf0>
    8e78:	004b      	lsls	r3, r1, #1
    8e7a:	1ac0      	subs	r0, r0, r3
    8e7c:	4152      	adcs	r2, r2
    8e7e:	1a41      	subs	r1, r0, r1
    8e80:	d200      	bcs.n	8e84 <__aeabi_uidiv+0xf8>
    8e82:	4601      	mov	r1, r0
    8e84:	4152      	adcs	r2, r2
    8e86:	4610      	mov	r0, r2
    8e88:	4770      	bx	lr
    8e8a:	e7ff      	b.n	8e8c <__aeabi_uidiv+0x100>
    8e8c:	b501      	push	{r0, lr}
    8e8e:	2000      	movs	r0, #0
    8e90:	f000 f8f0 	bl	9074 <__aeabi_idiv0>
    8e94:	bd02      	pop	{r1, pc}
    8e96:	46c0      	nop			; (mov r8, r8)

00008e98 <__aeabi_uidivmod>:
    8e98:	2900      	cmp	r1, #0
    8e9a:	d0f7      	beq.n	8e8c <__aeabi_uidiv+0x100>
    8e9c:	e776      	b.n	8d8c <__aeabi_uidiv>
    8e9e:	4770      	bx	lr

00008ea0 <__aeabi_idiv>:
    8ea0:	4603      	mov	r3, r0
    8ea2:	430b      	orrs	r3, r1
    8ea4:	d47f      	bmi.n	8fa6 <__aeabi_idiv+0x106>
    8ea6:	2200      	movs	r2, #0
    8ea8:	0843      	lsrs	r3, r0, #1
    8eaa:	428b      	cmp	r3, r1
    8eac:	d374      	bcc.n	8f98 <__aeabi_idiv+0xf8>
    8eae:	0903      	lsrs	r3, r0, #4
    8eb0:	428b      	cmp	r3, r1
    8eb2:	d35f      	bcc.n	8f74 <__aeabi_idiv+0xd4>
    8eb4:	0a03      	lsrs	r3, r0, #8
    8eb6:	428b      	cmp	r3, r1
    8eb8:	d344      	bcc.n	8f44 <__aeabi_idiv+0xa4>
    8eba:	0b03      	lsrs	r3, r0, #12
    8ebc:	428b      	cmp	r3, r1
    8ebe:	d328      	bcc.n	8f12 <__aeabi_idiv+0x72>
    8ec0:	0c03      	lsrs	r3, r0, #16
    8ec2:	428b      	cmp	r3, r1
    8ec4:	d30d      	bcc.n	8ee2 <__aeabi_idiv+0x42>
    8ec6:	22ff      	movs	r2, #255	; 0xff
    8ec8:	0209      	lsls	r1, r1, #8
    8eca:	ba12      	rev	r2, r2
    8ecc:	0c03      	lsrs	r3, r0, #16
    8ece:	428b      	cmp	r3, r1
    8ed0:	d302      	bcc.n	8ed8 <__aeabi_idiv+0x38>
    8ed2:	1212      	asrs	r2, r2, #8
    8ed4:	0209      	lsls	r1, r1, #8
    8ed6:	d065      	beq.n	8fa4 <__aeabi_idiv+0x104>
    8ed8:	0b03      	lsrs	r3, r0, #12
    8eda:	428b      	cmp	r3, r1
    8edc:	d319      	bcc.n	8f12 <__aeabi_idiv+0x72>
    8ede:	e000      	b.n	8ee2 <__aeabi_idiv+0x42>
    8ee0:	0a09      	lsrs	r1, r1, #8
    8ee2:	0bc3      	lsrs	r3, r0, #15
    8ee4:	428b      	cmp	r3, r1
    8ee6:	d301      	bcc.n	8eec <__aeabi_idiv+0x4c>
    8ee8:	03cb      	lsls	r3, r1, #15
    8eea:	1ac0      	subs	r0, r0, r3
    8eec:	4152      	adcs	r2, r2
    8eee:	0b83      	lsrs	r3, r0, #14
    8ef0:	428b      	cmp	r3, r1
    8ef2:	d301      	bcc.n	8ef8 <__aeabi_idiv+0x58>
    8ef4:	038b      	lsls	r3, r1, #14
    8ef6:	1ac0      	subs	r0, r0, r3
    8ef8:	4152      	adcs	r2, r2
    8efa:	0b43      	lsrs	r3, r0, #13
    8efc:	428b      	cmp	r3, r1
    8efe:	d301      	bcc.n	8f04 <__aeabi_idiv+0x64>
    8f00:	034b      	lsls	r3, r1, #13
    8f02:	1ac0      	subs	r0, r0, r3
    8f04:	4152      	adcs	r2, r2
    8f06:	0b03      	lsrs	r3, r0, #12
    8f08:	428b      	cmp	r3, r1
    8f0a:	d301      	bcc.n	8f10 <__aeabi_idiv+0x70>
    8f0c:	030b      	lsls	r3, r1, #12
    8f0e:	1ac0      	subs	r0, r0, r3
    8f10:	4152      	adcs	r2, r2
    8f12:	0ac3      	lsrs	r3, r0, #11
    8f14:	428b      	cmp	r3, r1
    8f16:	d301      	bcc.n	8f1c <__aeabi_idiv+0x7c>
    8f18:	02cb      	lsls	r3, r1, #11
    8f1a:	1ac0      	subs	r0, r0, r3
    8f1c:	4152      	adcs	r2, r2
    8f1e:	0a83      	lsrs	r3, r0, #10
    8f20:	428b      	cmp	r3, r1
    8f22:	d301      	bcc.n	8f28 <__aeabi_idiv+0x88>
    8f24:	028b      	lsls	r3, r1, #10
    8f26:	1ac0      	subs	r0, r0, r3
    8f28:	4152      	adcs	r2, r2
    8f2a:	0a43      	lsrs	r3, r0, #9
    8f2c:	428b      	cmp	r3, r1
    8f2e:	d301      	bcc.n	8f34 <__aeabi_idiv+0x94>
    8f30:	024b      	lsls	r3, r1, #9
    8f32:	1ac0      	subs	r0, r0, r3
    8f34:	4152      	adcs	r2, r2
    8f36:	0a03      	lsrs	r3, r0, #8
    8f38:	428b      	cmp	r3, r1
    8f3a:	d301      	bcc.n	8f40 <__aeabi_idiv+0xa0>
    8f3c:	020b      	lsls	r3, r1, #8
    8f3e:	1ac0      	subs	r0, r0, r3
    8f40:	4152      	adcs	r2, r2
    8f42:	d2cd      	bcs.n	8ee0 <__aeabi_idiv+0x40>
    8f44:	09c3      	lsrs	r3, r0, #7
    8f46:	428b      	cmp	r3, r1
    8f48:	d301      	bcc.n	8f4e <__aeabi_idiv+0xae>
    8f4a:	01cb      	lsls	r3, r1, #7
    8f4c:	1ac0      	subs	r0, r0, r3
    8f4e:	4152      	adcs	r2, r2
    8f50:	0983      	lsrs	r3, r0, #6
    8f52:	428b      	cmp	r3, r1
    8f54:	d301      	bcc.n	8f5a <__aeabi_idiv+0xba>
    8f56:	018b      	lsls	r3, r1, #6
    8f58:	1ac0      	subs	r0, r0, r3
    8f5a:	4152      	adcs	r2, r2
    8f5c:	0943      	lsrs	r3, r0, #5
    8f5e:	428b      	cmp	r3, r1
    8f60:	d301      	bcc.n	8f66 <__aeabi_idiv+0xc6>
    8f62:	014b      	lsls	r3, r1, #5
    8f64:	1ac0      	subs	r0, r0, r3
    8f66:	4152      	adcs	r2, r2
    8f68:	0903      	lsrs	r3, r0, #4
    8f6a:	428b      	cmp	r3, r1
    8f6c:	d301      	bcc.n	8f72 <__aeabi_idiv+0xd2>
    8f6e:	010b      	lsls	r3, r1, #4
    8f70:	1ac0      	subs	r0, r0, r3
    8f72:	4152      	adcs	r2, r2
    8f74:	08c3      	lsrs	r3, r0, #3
    8f76:	428b      	cmp	r3, r1
    8f78:	d301      	bcc.n	8f7e <__aeabi_idiv+0xde>
    8f7a:	00cb      	lsls	r3, r1, #3
    8f7c:	1ac0      	subs	r0, r0, r3
    8f7e:	4152      	adcs	r2, r2
    8f80:	0883      	lsrs	r3, r0, #2
    8f82:	428b      	cmp	r3, r1
    8f84:	d301      	bcc.n	8f8a <__aeabi_idiv+0xea>
    8f86:	008b      	lsls	r3, r1, #2
    8f88:	1ac0      	subs	r0, r0, r3
    8f8a:	4152      	adcs	r2, r2
    8f8c:	0843      	lsrs	r3, r0, #1
    8f8e:	428b      	cmp	r3, r1
    8f90:	d301      	bcc.n	8f96 <__aeabi_idiv+0xf6>
    8f92:	004b      	lsls	r3, r1, #1
    8f94:	1ac0      	subs	r0, r0, r3
    8f96:	4152      	adcs	r2, r2
    8f98:	1a41      	subs	r1, r0, r1
    8f9a:	d200      	bcs.n	8f9e <__aeabi_idiv+0xfe>
    8f9c:	4601      	mov	r1, r0
    8f9e:	4152      	adcs	r2, r2
    8fa0:	4610      	mov	r0, r2
    8fa2:	4770      	bx	lr
    8fa4:	e05d      	b.n	9062 <__aeabi_idiv+0x1c2>
    8fa6:	0fca      	lsrs	r2, r1, #31
    8fa8:	d000      	beq.n	8fac <__aeabi_idiv+0x10c>
    8faa:	4249      	negs	r1, r1
    8fac:	1003      	asrs	r3, r0, #32
    8fae:	d300      	bcc.n	8fb2 <__aeabi_idiv+0x112>
    8fb0:	4240      	negs	r0, r0
    8fb2:	4053      	eors	r3, r2
    8fb4:	2200      	movs	r2, #0
    8fb6:	469c      	mov	ip, r3
    8fb8:	0903      	lsrs	r3, r0, #4
    8fba:	428b      	cmp	r3, r1
    8fbc:	d32d      	bcc.n	901a <__aeabi_idiv+0x17a>
    8fbe:	0a03      	lsrs	r3, r0, #8
    8fc0:	428b      	cmp	r3, r1
    8fc2:	d312      	bcc.n	8fea <__aeabi_idiv+0x14a>
    8fc4:	22fc      	movs	r2, #252	; 0xfc
    8fc6:	0189      	lsls	r1, r1, #6
    8fc8:	ba12      	rev	r2, r2
    8fca:	0a03      	lsrs	r3, r0, #8
    8fcc:	428b      	cmp	r3, r1
    8fce:	d30c      	bcc.n	8fea <__aeabi_idiv+0x14a>
    8fd0:	0189      	lsls	r1, r1, #6
    8fd2:	1192      	asrs	r2, r2, #6
    8fd4:	428b      	cmp	r3, r1
    8fd6:	d308      	bcc.n	8fea <__aeabi_idiv+0x14a>
    8fd8:	0189      	lsls	r1, r1, #6
    8fda:	1192      	asrs	r2, r2, #6
    8fdc:	428b      	cmp	r3, r1
    8fde:	d304      	bcc.n	8fea <__aeabi_idiv+0x14a>
    8fe0:	0189      	lsls	r1, r1, #6
    8fe2:	d03a      	beq.n	905a <__aeabi_idiv+0x1ba>
    8fe4:	1192      	asrs	r2, r2, #6
    8fe6:	e000      	b.n	8fea <__aeabi_idiv+0x14a>
    8fe8:	0989      	lsrs	r1, r1, #6
    8fea:	09c3      	lsrs	r3, r0, #7
    8fec:	428b      	cmp	r3, r1
    8fee:	d301      	bcc.n	8ff4 <__aeabi_idiv+0x154>
    8ff0:	01cb      	lsls	r3, r1, #7
    8ff2:	1ac0      	subs	r0, r0, r3
    8ff4:	4152      	adcs	r2, r2
    8ff6:	0983      	lsrs	r3, r0, #6
    8ff8:	428b      	cmp	r3, r1
    8ffa:	d301      	bcc.n	9000 <__aeabi_idiv+0x160>
    8ffc:	018b      	lsls	r3, r1, #6
    8ffe:	1ac0      	subs	r0, r0, r3
    9000:	4152      	adcs	r2, r2
    9002:	0943      	lsrs	r3, r0, #5
    9004:	428b      	cmp	r3, r1
    9006:	d301      	bcc.n	900c <__aeabi_idiv+0x16c>
    9008:	014b      	lsls	r3, r1, #5
    900a:	1ac0      	subs	r0, r0, r3
    900c:	4152      	adcs	r2, r2
    900e:	0903      	lsrs	r3, r0, #4
    9010:	428b      	cmp	r3, r1
    9012:	d301      	bcc.n	9018 <__aeabi_idiv+0x178>
    9014:	010b      	lsls	r3, r1, #4
    9016:	1ac0      	subs	r0, r0, r3
    9018:	4152      	adcs	r2, r2
    901a:	08c3      	lsrs	r3, r0, #3
    901c:	428b      	cmp	r3, r1
    901e:	d301      	bcc.n	9024 <__aeabi_idiv+0x184>
    9020:	00cb      	lsls	r3, r1, #3
    9022:	1ac0      	subs	r0, r0, r3
    9024:	4152      	adcs	r2, r2
    9026:	0883      	lsrs	r3, r0, #2
    9028:	428b      	cmp	r3, r1
    902a:	d301      	bcc.n	9030 <__aeabi_idiv+0x190>
    902c:	008b      	lsls	r3, r1, #2
    902e:	1ac0      	subs	r0, r0, r3
    9030:	4152      	adcs	r2, r2
    9032:	d2d9      	bcs.n	8fe8 <__aeabi_idiv+0x148>
    9034:	0843      	lsrs	r3, r0, #1
    9036:	428b      	cmp	r3, r1
    9038:	d301      	bcc.n	903e <__aeabi_idiv+0x19e>
    903a:	004b      	lsls	r3, r1, #1
    903c:	1ac0      	subs	r0, r0, r3
    903e:	4152      	adcs	r2, r2
    9040:	1a41      	subs	r1, r0, r1
    9042:	d200      	bcs.n	9046 <__aeabi_idiv+0x1a6>
    9044:	4601      	mov	r1, r0
    9046:	4663      	mov	r3, ip
    9048:	4152      	adcs	r2, r2
    904a:	105b      	asrs	r3, r3, #1
    904c:	4610      	mov	r0, r2
    904e:	d301      	bcc.n	9054 <__aeabi_idiv+0x1b4>
    9050:	4240      	negs	r0, r0
    9052:	2b00      	cmp	r3, #0
    9054:	d500      	bpl.n	9058 <__aeabi_idiv+0x1b8>
    9056:	4249      	negs	r1, r1
    9058:	4770      	bx	lr
    905a:	4663      	mov	r3, ip
    905c:	105b      	asrs	r3, r3, #1
    905e:	d300      	bcc.n	9062 <__aeabi_idiv+0x1c2>
    9060:	4240      	negs	r0, r0
    9062:	b501      	push	{r0, lr}
    9064:	2000      	movs	r0, #0
    9066:	f000 f805 	bl	9074 <__aeabi_idiv0>
    906a:	bd02      	pop	{r1, pc}

0000906c <__aeabi_idivmod>:
    906c:	2900      	cmp	r1, #0
    906e:	d0f8      	beq.n	9062 <__aeabi_idiv+0x1c2>
    9070:	e716      	b.n	8ea0 <__aeabi_idiv>
    9072:	4770      	bx	lr

00009074 <__aeabi_idiv0>:
    9074:	4770      	bx	lr
    9076:	46c0      	nop			; (mov r8, r8)

00009078 <__ctzsi2>:
    9078:	4241      	negs	r1, r0
    907a:	4008      	ands	r0, r1
    907c:	211c      	movs	r1, #28
    907e:	2301      	movs	r3, #1
    9080:	041b      	lsls	r3, r3, #16
    9082:	4298      	cmp	r0, r3
    9084:	d301      	bcc.n	908a <__ctzsi2+0x12>
    9086:	0c00      	lsrs	r0, r0, #16
    9088:	3910      	subs	r1, #16
    908a:	0a1b      	lsrs	r3, r3, #8
    908c:	4298      	cmp	r0, r3
    908e:	d301      	bcc.n	9094 <__ctzsi2+0x1c>
    9090:	0a00      	lsrs	r0, r0, #8
    9092:	3908      	subs	r1, #8
    9094:	091b      	lsrs	r3, r3, #4
    9096:	4298      	cmp	r0, r3
    9098:	d301      	bcc.n	909e <__ctzsi2+0x26>
    909a:	0900      	lsrs	r0, r0, #4
    909c:	3904      	subs	r1, #4
    909e:	a202      	add	r2, pc, #8	; (adr r2, 90a8 <__ctzsi2+0x30>)
    90a0:	5c10      	ldrb	r0, [r2, r0]
    90a2:	1a40      	subs	r0, r0, r1
    90a4:	4770      	bx	lr
    90a6:	46c0      	nop			; (mov r8, r8)
    90a8:	1d1d1c1b 	.word	0x1d1d1c1b
    90ac:	1e1e1e1e 	.word	0x1e1e1e1e
    90b0:	1f1f1f1f 	.word	0x1f1f1f1f
    90b4:	1f1f1f1f 	.word	0x1f1f1f1f

000090b8 <__libc_init_array>:
    90b8:	4b0e      	ldr	r3, [pc, #56]	; (90f4 <__libc_init_array+0x3c>)
    90ba:	b570      	push	{r4, r5, r6, lr}
    90bc:	2500      	movs	r5, #0
    90be:	001e      	movs	r6, r3
    90c0:	4c0d      	ldr	r4, [pc, #52]	; (90f8 <__libc_init_array+0x40>)
    90c2:	1ae4      	subs	r4, r4, r3
    90c4:	10a4      	asrs	r4, r4, #2
    90c6:	42a5      	cmp	r5, r4
    90c8:	d004      	beq.n	90d4 <__libc_init_array+0x1c>
    90ca:	00ab      	lsls	r3, r5, #2
    90cc:	58f3      	ldr	r3, [r6, r3]
    90ce:	4798      	blx	r3
    90d0:	3501      	adds	r5, #1
    90d2:	e7f8      	b.n	90c6 <__libc_init_array+0xe>
    90d4:	f000 f8a8 	bl	9228 <_init>
    90d8:	4b08      	ldr	r3, [pc, #32]	; (90fc <__libc_init_array+0x44>)
    90da:	2500      	movs	r5, #0
    90dc:	001e      	movs	r6, r3
    90de:	4c08      	ldr	r4, [pc, #32]	; (9100 <__libc_init_array+0x48>)
    90e0:	1ae4      	subs	r4, r4, r3
    90e2:	10a4      	asrs	r4, r4, #2
    90e4:	42a5      	cmp	r5, r4
    90e6:	d004      	beq.n	90f2 <__libc_init_array+0x3a>
    90e8:	00ab      	lsls	r3, r5, #2
    90ea:	58f3      	ldr	r3, [r6, r3]
    90ec:	4798      	blx	r3
    90ee:	3501      	adds	r5, #1
    90f0:	e7f8      	b.n	90e4 <__libc_init_array+0x2c>
    90f2:	bd70      	pop	{r4, r5, r6, pc}
    90f4:	00009234 	.word	0x00009234
    90f8:	00009234 	.word	0x00009234
    90fc:	00009234 	.word	0x00009234
    9100:	00009238 	.word	0x00009238

00009104 <memcpy>:
    9104:	2300      	movs	r3, #0
    9106:	b510      	push	{r4, lr}
    9108:	429a      	cmp	r2, r3
    910a:	d003      	beq.n	9114 <memcpy+0x10>
    910c:	5ccc      	ldrb	r4, [r1, r3]
    910e:	54c4      	strb	r4, [r0, r3]
    9110:	3301      	adds	r3, #1
    9112:	e7f9      	b.n	9108 <memcpy+0x4>
    9114:	bd10      	pop	{r4, pc}

00009116 <memset>:
    9116:	0003      	movs	r3, r0
    9118:	1882      	adds	r2, r0, r2
    911a:	4293      	cmp	r3, r2
    911c:	d002      	beq.n	9124 <memset+0xe>
    911e:	7019      	strb	r1, [r3, #0]
    9120:	3301      	adds	r3, #1
    9122:	e7fa      	b.n	911a <memset+0x4>
    9124:	4770      	bx	lr
    9126:	0000      	movs	r0, r0
    9128:	42000800 	.word	0x42000800
    912c:	42000c00 	.word	0x42000c00
    9130:	42001000 	.word	0x42001000
    9134:	42001400 	.word	0x42001400
    9138:	42001800 	.word	0x42001800
    913c:	42001c00 	.word	0x42001c00
    9140:	00001f5e 	.word	0x00001f5e
    9144:	00001f3c 	.word	0x00001f3c
    9148:	00001f1a 	.word	0x00001f1a
    914c:	00001ee8 	.word	0x00001ee8
    9150:	00001eb6 	.word	0x00001eb6
    9154:	53504f54 	.word	0x53504f54
    9158:	45524345 	.word	0x45524345
    915c:	53415054 	.word	0x53415054
    9160:	44525753 	.word	0x44525753
    9164:	00000000 	.word	0x00000000
    9168:	00003ba6 	.word	0x00003ba6
    916c:	00003b8e 	.word	0x00003b8e
    9170:	00003ba6 	.word	0x00003ba6
    9174:	00003b96 	.word	0x00003b96
    9178:	00003ba6 	.word	0x00003ba6
    917c:	00003b86 	.word	0x00003b86
    9180:	00003ba6 	.word	0x00003ba6
    9184:	00003ba6 	.word	0x00003ba6
    9188:	00003ba6 	.word	0x00003ba6
    918c:	00003b9e 	.word	0x00003b9e
    9190:	0000483e 	.word	0x0000483e
    9194:	000048c4 	.word	0x000048c4
    9198:	000048c4 	.word	0x000048c4
    919c:	0000485c 	.word	0x0000485c
    91a0:	00004856 	.word	0x00004856
    91a4:	00004862 	.word	0x00004862
    91a8:	00004844 	.word	0x00004844
    91ac:	00004868 	.word	0x00004868
    91b0:	000048aa 	.word	0x000048aa
    91b4:	00004a70 	.word	0x00004a70
    91b8:	00004ac0 	.word	0x00004ac0
    91bc:	00004ac0 	.word	0x00004ac0
    91c0:	00004abc 	.word	0x00004abc
    91c4:	00004a62 	.word	0x00004a62
    91c8:	00004a82 	.word	0x00004a82
    91cc:	00004a52 	.word	0x00004a52
    91d0:	00004a94 	.word	0x00004a94
    91d4:	00004aa6 	.word	0x00004aa6
    91d8:	00004b0e 	.word	0x00004b0e
    91dc:	00004b3c 	.word	0x00004b3c
    91e0:	00004b3c 	.word	0x00004b3c
    91e4:	00004b38 	.word	0x00004b38
    91e8:	00004b08 	.word	0x00004b08
    91ec:	00004b14 	.word	0x00004b14
    91f0:	00004b02 	.word	0x00004b02
    91f4:	00004b1a 	.word	0x00004b1a
    91f8:	00004b20 	.word	0x00004b20
    91fc:	01020300 	.word	0x01020300

00009200 <_usb_device_irq_bits>:
    9200:	00080004 00800070 01000001 00000200     ....p...........

00009210 <_usb_endpoint_irq_bits>:
    9210:	60100c03 00007776 0000778c 000078f8     ...`vw...w...x..
    9220:	000079c6 00007a94                       .y...z..

00009228 <_init>:
    9228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    922a:	46c0      	nop			; (mov r8, r8)
    922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    922e:	bc08      	pop	{r3}
    9230:	469e      	mov	lr, r3
    9232:	4770      	bx	lr

00009234 <__init_array_start>:
    9234:	000000dd 	.word	0x000000dd

00009238 <_fini>:
    9238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    923a:	46c0      	nop			; (mov r8, r8)
    923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    923e:	bc08      	pop	{r3}
    9240:	469e      	mov	lr, r3
    9242:	4770      	bx	lr

00009244 <__fini_array_start>:
    9244:	000000b5 	.word	0x000000b5
