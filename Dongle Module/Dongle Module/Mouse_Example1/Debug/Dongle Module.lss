
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f64  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00008f64  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e4  200000e0  00009044  000180e0  2**2
                  ALLOC
  3 .stack        00002004  200005c4  00009528  000180e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000180e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002883a  00000000  00000000  00018163  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000360c  00000000  00000000  0004099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004ddc  00000000  00000000  00043fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd0  00000000  00000000  00048d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c68  00000000  00000000  00049b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e442  00000000  00000000  0004a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010f76  00000000  00000000  00068bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094491  00000000  00000000  00079b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f78  00000000  00000000  0010e008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025c8 	.word	0x200025c8
       4:	000086f1 	.word	0x000086f1
       8:	000087e9 	.word	0x000087e9
       c:	000087e9 	.word	0x000087e9
	...
      2c:	000087e9 	.word	0x000087e9
	...
      38:	000087e9 	.word	0x000087e9
      3c:	000087e9 	.word	0x000087e9
      40:	000087e9 	.word	0x000087e9
      44:	000087e9 	.word	0x000087e9
      48:	000087e9 	.word	0x000087e9
      4c:	000087e9 	.word	0x000087e9
      50:	00003f31 	.word	0x00003f31
      54:	000087e9 	.word	0x000087e9
      58:	000087e9 	.word	0x000087e9
      5c:	00008341 	.word	0x00008341
      60:	000087e9 	.word	0x000087e9
      64:	000087e9 	.word	0x000087e9
      68:	000087e9 	.word	0x000087e9
      6c:	000087e9 	.word	0x000087e9
      70:	000087e9 	.word	0x000087e9
      74:	000087e9 	.word	0x000087e9
      78:	000087e9 	.word	0x000087e9
      7c:	000087e9 	.word	0x000087e9
      80:	000087e9 	.word	0x000087e9
      84:	000087e9 	.word	0x000087e9
      88:	000087e9 	.word	0x000087e9
      8c:	000087e9 	.word	0x000087e9
      90:	000087e9 	.word	0x000087e9
	...
      9c:	000087e9 	.word	0x000087e9
      a0:	000087e9 	.word	0x000087e9
      a4:	000087e9 	.word	0x000087e9
      a8:	000087e9 	.word	0x000087e9
      ac:	000087e9 	.word	0x000087e9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00008f64 	.word	0x00008f64

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00008f64 	.word	0x00008f64
     108:	200000e4 	.word	0x200000e4
     10c:	00008f64 	.word	0x00008f64
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     192:	68fb      	ldr	r3, [r7, #12]
     194:	7a9b      	ldrb	r3, [r3, #10]
     196:	b2db      	uxtb	r3, r3
     198:	b2db      	uxtb	r3, r3
     19a:	b25b      	sxtb	r3, r3
     19c:	2b00      	cmp	r3, #0
     19e:	da01      	bge.n	1a4 <rtc_count_is_syncing+0x20>
                return true;
     1a0:	2301      	movs	r3, #1
     1a2:	e000      	b.n	1a6 <rtc_count_is_syncing+0x22>
        }

        return false;
     1a4:	2300      	movs	r3, #0
}
     1a6:	1c18      	adds	r0, r3, #0
     1a8:	46bd      	mov	sp, r7
     1aa:	b004      	add	sp, #16
     1ac:	bd80      	pop	{r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)

000001b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b084      	sub	sp, #16
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	1c18      	adds	r0, r3, #0
     1c4:	4b07      	ldr	r3, [pc, #28]	; (1e4 <rtc_count_enable+0x34>)
     1c6:	4798      	blx	r3
     1c8:	1e03      	subs	r3, r0, #0
     1ca:	d1f9      	bne.n	1c0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	881b      	ldrh	r3, [r3, #0]
     1d0:	b29b      	uxth	r3, r3
     1d2:	2202      	movs	r2, #2
     1d4:	4313      	orrs	r3, r2
     1d6:	b29a      	uxth	r2, r3
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	801a      	strh	r2, [r3, #0]
}
     1dc:	46bd      	mov	sp, r7
     1de:	b004      	add	sp, #16
     1e0:	bd80      	pop	{r7, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	00000185 	.word	0x00000185

000001e8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	1c18      	adds	r0, r3, #0
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_count_disable+0x34>)
     1fe:	4798      	blx	r3
     200:	1e03      	subs	r3, r0, #0
     202:	d1f9      	bne.n	1f8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	2202      	movs	r2, #2
     20c:	4393      	bics	r3, r2
     20e:	b29a      	uxth	r2, r3
     210:	68fb      	ldr	r3, [r7, #12]
     212:	801a      	strh	r2, [r3, #0]
}
     214:	46bd      	mov	sp, r7
     216:	b004      	add	sp, #16
     218:	bd80      	pop	{r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00000185 	.word	0x00000185

00000220 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     22e:	687b      	ldr	r3, [r7, #4]
     230:	1c18      	adds	r0, r3, #0
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <rtc_count_reset+0x3c>)
     234:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     236:	46c0      	nop			; (mov r8, r8)
     238:	687b      	ldr	r3, [r7, #4]
     23a:	1c18      	adds	r0, r3, #0
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <rtc_count_reset+0x40>)
     23e:	4798      	blx	r3
     240:	1e03      	subs	r3, r0, #0
     242:	d1f9      	bne.n	238 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29b      	uxth	r3, r3
     24a:	2201      	movs	r2, #1
     24c:	4313      	orrs	r3, r2
     24e:	b29a      	uxth	r2, r3
     250:	68fb      	ldr	r3, [r7, #12]
     252:	801a      	strh	r2, [r3, #0]
}
     254:	46bd      	mov	sp, r7
     256:	b004      	add	sp, #16
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	000001e9 	.word	0x000001e9
     260:	00000185 	.word	0x00000185

00000264 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
     26c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     274:	683b      	ldr	r3, [r7, #0]
     276:	881a      	ldrh	r2, [r3, #0]
     278:	68bb      	ldr	r3, [r7, #8]
     27a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	789b      	ldrb	r3, [r3, #2]
     280:	2b00      	cmp	r3, #0
     282:	d03c      	beq.n	2fe <_rtc_count_set_config+0x9a>
     284:	2b01      	cmp	r3, #1
     286:	d000      	beq.n	28a <_rtc_count_set_config+0x26>
     288:	e070      	b.n	36c <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	881b      	ldrh	r3, [r3, #0]
     28e:	b29a      	uxth	r2, r3
     290:	68bb      	ldr	r3, [r7, #8]
     292:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     294:	683b      	ldr	r3, [r7, #0]
     296:	78db      	ldrb	r3, [r3, #3]
     298:	2b00      	cmp	r3, #0
     29a:	d007      	beq.n	2ac <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	881b      	ldrh	r3, [r3, #0]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	4313      	orrs	r3, r2
     2a6:	b29a      	uxth	r2, r3
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2ac:	230f      	movs	r3, #15
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	2200      	movs	r2, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	e01d      	b.n	2f2 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	1c18      	adds	r0, r3, #0
     2bc:	4b35      	ldr	r3, [pc, #212]	; (394 <_rtc_count_set_config+0x130>)
     2be:	4798      	blx	r3
     2c0:	1e03      	subs	r3, r0, #0
     2c2:	d1f9      	bne.n	2b8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c4:	230f      	movs	r3, #15
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	781a      	ldrb	r2, [r3, #0]
     2ca:	683b      	ldr	r3, [r7, #0]
     2cc:	3202      	adds	r2, #2
     2ce:	0092      	lsls	r2, r2, #2
     2d0:	58d2      	ldr	r2, [r2, r3]
     2d2:	6879      	ldr	r1, [r7, #4]
     2d4:	230f      	movs	r3, #15
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	1c08      	adds	r0, r1, #0
     2dc:	1c11      	adds	r1, r2, #0
     2de:	1c1a      	adds	r2, r3, #0
     2e0:	4b2d      	ldr	r3, [pc, #180]	; (398 <_rtc_count_set_config+0x134>)
     2e2:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2e4:	230f      	movs	r3, #15
     2e6:	18fb      	adds	r3, r7, r3
     2e8:	781a      	ldrb	r2, [r3, #0]
     2ea:	230f      	movs	r3, #15
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	3201      	adds	r2, #1
     2f0:	701a      	strb	r2, [r3, #0]
     2f2:	230f      	movs	r3, #15
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781b      	ldrb	r3, [r3, #0]
     2f8:	2b00      	cmp	r3, #0
     2fa:	d0dc      	beq.n	2b6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     2fc:	e038      	b.n	370 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2fe:	68bb      	ldr	r3, [r7, #8]
     300:	881b      	ldrh	r3, [r3, #0]
     302:	b29b      	uxth	r3, r3
     304:	2204      	movs	r2, #4
     306:	4313      	orrs	r3, r2
     308:	b29a      	uxth	r2, r3
     30a:	68bb      	ldr	r3, [r7, #8]
     30c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     30e:	683b      	ldr	r3, [r7, #0]
     310:	78db      	ldrb	r3, [r3, #3]
     312:	2b00      	cmp	r3, #0
     314:	d001      	beq.n	31a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     316:	2317      	movs	r3, #23
     318:	e038      	b.n	38c <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     31a:	230e      	movs	r3, #14
     31c:	18fb      	adds	r3, r7, r3
     31e:	2200      	movs	r2, #0
     320:	701a      	strb	r2, [r3, #0]
     322:	e01d      	b.n	360 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     324:	46c0      	nop			; (mov r8, r8)
     326:	687b      	ldr	r3, [r7, #4]
     328:	1c18      	adds	r0, r3, #0
     32a:	4b1a      	ldr	r3, [pc, #104]	; (394 <_rtc_count_set_config+0x130>)
     32c:	4798      	blx	r3
     32e:	1e03      	subs	r3, r0, #0
     330:	d1f9      	bne.n	326 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     332:	230e      	movs	r3, #14
     334:	18fb      	adds	r3, r7, r3
     336:	781a      	ldrb	r2, [r3, #0]
     338:	683b      	ldr	r3, [r7, #0]
     33a:	3202      	adds	r2, #2
     33c:	0092      	lsls	r2, r2, #2
     33e:	58d2      	ldr	r2, [r2, r3]
     340:	6879      	ldr	r1, [r7, #4]
     342:	230e      	movs	r3, #14
     344:	18fb      	adds	r3, r7, r3
     346:	781b      	ldrb	r3, [r3, #0]
     348:	1c08      	adds	r0, r1, #0
     34a:	1c11      	adds	r1, r2, #0
     34c:	1c1a      	adds	r2, r3, #0
     34e:	4b12      	ldr	r3, [pc, #72]	; (398 <_rtc_count_set_config+0x134>)
     350:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     352:	230e      	movs	r3, #14
     354:	18fb      	adds	r3, r7, r3
     356:	781a      	ldrb	r2, [r3, #0]
     358:	230e      	movs	r3, #14
     35a:	18fb      	adds	r3, r7, r3
     35c:	3201      	adds	r2, #1
     35e:	701a      	strb	r2, [r3, #0]
     360:	230e      	movs	r3, #14
     362:	18fb      	adds	r3, r7, r3
     364:	781b      	ldrb	r3, [r3, #0]
     366:	2b01      	cmp	r3, #1
     368:	d9dc      	bls.n	324 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     36a:	e001      	b.n	370 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     36c:	2317      	movs	r3, #23
     36e:	e00d      	b.n	38c <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     370:	683b      	ldr	r3, [r7, #0]
     372:	791b      	ldrb	r3, [r3, #4]
     374:	2b00      	cmp	r3, #0
     376:	d008      	beq.n	38a <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     378:	68bb      	ldr	r3, [r7, #8]
     37a:	885b      	ldrh	r3, [r3, #2]
     37c:	b29b      	uxth	r3, r3
     37e:	2280      	movs	r2, #128	; 0x80
     380:	01d2      	lsls	r2, r2, #7
     382:	4313      	orrs	r3, r2
     384:	b29a      	uxth	r2, r3
     386:	68bb      	ldr	r3, [r7, #8]
     388:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     38a:	2300      	movs	r3, #0
}
     38c:	1c18      	adds	r0, r3, #0
     38e:	46bd      	mov	sp, r7
     390:	b004      	add	sp, #16
     392:	bd80      	pop	{r7, pc}
     394:	00000185 	.word	0x00000185
     398:	000004f5 	.word	0x000004f5

0000039c <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     39c:	b580      	push	{r7, lr}
     39e:	b086      	sub	sp, #24
     3a0:	af00      	add	r7, sp, #0
     3a2:	60f8      	str	r0, [r7, #12]
     3a4:	60b9      	str	r1, [r7, #8]
     3a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3a8:	68fb      	ldr	r3, [r7, #12]
     3aa:	68ba      	ldr	r2, [r7, #8]
     3ac:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     3ae:	2000      	movs	r0, #0
     3b0:	2120      	movs	r1, #32
     3b2:	4b17      	ldr	r3, [pc, #92]	; (410 <rtc_count_init+0x74>)
     3b4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3b6:	2314      	movs	r3, #20
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	1c18      	adds	r0, r3, #0
     3bc:	4b15      	ldr	r3, [pc, #84]	; (414 <rtc_count_init+0x78>)
     3be:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3c0:	2314      	movs	r3, #20
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	2202      	movs	r2, #2
     3c6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3c8:	2314      	movs	r3, #20
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	2004      	movs	r0, #4
     3ce:	1c19      	adds	r1, r3, #0
     3d0:	4b11      	ldr	r3, [pc, #68]	; (418 <rtc_count_init+0x7c>)
     3d2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3d4:	2004      	movs	r0, #4
     3d6:	4b11      	ldr	r3, [pc, #68]	; (41c <rtc_count_init+0x80>)
     3d8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     3da:	68fb      	ldr	r3, [r7, #12]
     3dc:	1c18      	adds	r0, r3, #0
     3de:	4b10      	ldr	r3, [pc, #64]	; (420 <rtc_count_init+0x84>)
     3e0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	789a      	ldrb	r2, [r3, #2]
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	791a      	ldrb	r2, [r3, #4]
     3ee:	68fb      	ldr	r3, [r7, #12]
     3f0:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <rtc_count_init+0x88>)
     3f4:	68fa      	ldr	r2, [r7, #12]
     3f6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     3f8:	68fa      	ldr	r2, [r7, #12]
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	1c10      	adds	r0, r2, #0
     3fe:	1c19      	adds	r1, r3, #0
     400:	4b09      	ldr	r3, [pc, #36]	; (428 <rtc_count_init+0x8c>)
     402:	4798      	blx	r3
     404:	1c03      	adds	r3, r0, #0
}
     406:	1c18      	adds	r0, r3, #0
     408:	46bd      	mov	sp, r7
     40a:	b006      	add	sp, #24
     40c:	bd80      	pop	{r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	00000129 	.word	0x00000129
     414:	00000115 	.word	0x00000115
     418:	00004e3d 	.word	0x00004e3d
     41c:	00004e81 	.word	0x00004e81
     420:	00000221 	.word	0x00000221
     424:	200001fc 	.word	0x200001fc
     428:	00000265 	.word	0x00000265

0000042c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     42c:	b580      	push	{r7, lr}
     42e:	b084      	sub	sp, #16
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     436:	687b      	ldr	r3, [r7, #4]
     438:	681b      	ldr	r3, [r3, #0]
     43a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     43c:	46c0      	nop			; (mov r8, r8)
     43e:	687b      	ldr	r3, [r7, #4]
     440:	1c18      	adds	r0, r3, #0
     442:	4b10      	ldr	r3, [pc, #64]	; (484 <rtc_count_set_count+0x58>)
     444:	4798      	blx	r3
     446:	1e03      	subs	r3, r0, #0
     448:	d1f9      	bne.n	43e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	791b      	ldrb	r3, [r3, #4]
     44e:	2b00      	cmp	r3, #0
     450:	d005      	beq.n	45e <rtc_count_set_count+0x32>
     452:	2b01      	cmp	r3, #1
     454:	d10e      	bne.n	474 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     456:	68fb      	ldr	r3, [r7, #12]
     458:	683a      	ldr	r2, [r7, #0]
     45a:	611a      	str	r2, [r3, #16]

			break;
     45c:	e00c      	b.n	478 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     45e:	683b      	ldr	r3, [r7, #0]
     460:	4a09      	ldr	r2, [pc, #36]	; (488 <rtc_count_set_count+0x5c>)
     462:	4293      	cmp	r3, r2
     464:	d901      	bls.n	46a <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     466:	2317      	movs	r3, #23
     468:	e007      	b.n	47a <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	b29a      	uxth	r2, r3
     46e:	68fb      	ldr	r3, [r7, #12]
     470:	821a      	strh	r2, [r3, #16]

			break;
     472:	e001      	b.n	478 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     474:	2317      	movs	r3, #23
     476:	e000      	b.n	47a <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     478:	2300      	movs	r3, #0
}
     47a:	1c18      	adds	r0, r3, #0
     47c:	46bd      	mov	sp, r7
     47e:	b004      	add	sp, #16
     480:	bd80      	pop	{r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	00000185 	.word	0x00000185
     488:	0000ffff 	.word	0x0000ffff

0000048c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     48c:	b580      	push	{r7, lr}
     48e:	b084      	sub	sp, #16
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     494:	687b      	ldr	r3, [r7, #4]
     496:	681b      	ldr	r3, [r3, #0]
     498:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	795b      	ldrb	r3, [r3, #5]
     49e:	2201      	movs	r2, #1
     4a0:	4053      	eors	r3, r2
     4a2:	b2db      	uxtb	r3, r3
     4a4:	2b00      	cmp	r3, #0
     4a6:	d009      	beq.n	4bc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     4a8:	68bb      	ldr	r3, [r7, #8]
     4aa:	4a10      	ldr	r2, [pc, #64]	; (4ec <rtc_count_get_count+0x60>)
     4ac:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	1c18      	adds	r0, r3, #0
     4b4:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <rtc_count_get_count+0x64>)
     4b6:	4798      	blx	r3
     4b8:	1e03      	subs	r3, r0, #0
     4ba:	d1f9      	bne.n	4b0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	791b      	ldrb	r3, [r3, #4]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d005      	beq.n	4d0 <rtc_count_get_count+0x44>
     4c4:	2b01      	cmp	r3, #1
     4c6:	d108      	bne.n	4da <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	691b      	ldr	r3, [r3, #16]
     4cc:	60fb      	str	r3, [r7, #12]

			break;
     4ce:	e007      	b.n	4e0 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     4d0:	68bb      	ldr	r3, [r7, #8]
     4d2:	8a1b      	ldrh	r3, [r3, #16]
     4d4:	b29b      	uxth	r3, r3
     4d6:	60fb      	str	r3, [r7, #12]

			break;
     4d8:	e002      	b.n	4e0 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     4da:	2300      	movs	r3, #0
     4dc:	60fb      	str	r3, [r7, #12]
			break;
     4de:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     4e0:	68fb      	ldr	r3, [r7, #12]
}
     4e2:	1c18      	adds	r0, r3, #0
     4e4:	46bd      	mov	sp, r7
     4e6:	b004      	add	sp, #16
     4e8:	bd80      	pop	{r7, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	ffff8000 	.word	0xffff8000
     4f0:	00000185 	.word	0x00000185

000004f4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b086      	sub	sp, #24
     4f8:	af00      	add	r7, sp, #0
     4fa:	60f8      	str	r0, [r7, #12]
     4fc:	60b9      	str	r1, [r7, #8]
     4fe:	1dfb      	adds	r3, r7, #7
     500:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     502:	68fb      	ldr	r3, [r7, #12]
     504:	681b      	ldr	r3, [r3, #0]
     506:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     508:	46c0      	nop			; (mov r8, r8)
     50a:	68fb      	ldr	r3, [r7, #12]
     50c:	1c18      	adds	r0, r3, #0
     50e:	4b1a      	ldr	r3, [pc, #104]	; (578 <rtc_count_set_compare+0x84>)
     510:	4798      	blx	r3
     512:	1e03      	subs	r3, r0, #0
     514:	d1f9      	bne.n	50a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     516:	68fb      	ldr	r3, [r7, #12]
     518:	791b      	ldrb	r3, [r3, #4]
     51a:	2b00      	cmp	r3, #0
     51c:	d00f      	beq.n	53e <rtc_count_set_compare+0x4a>
     51e:	2b01      	cmp	r3, #1
     520:	d122      	bne.n	568 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     522:	1dfb      	adds	r3, r7, #7
     524:	781b      	ldrb	r3, [r3, #0]
     526:	2b01      	cmp	r3, #1
     528:	d901      	bls.n	52e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     52a:	2317      	movs	r3, #23
     52c:	e01f      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     52e:	1dfb      	adds	r3, r7, #7
     530:	781a      	ldrb	r2, [r3, #0]
     532:	697b      	ldr	r3, [r7, #20]
     534:	3206      	adds	r2, #6
     536:	0092      	lsls	r2, r2, #2
     538:	68b9      	ldr	r1, [r7, #8]
     53a:	50d1      	str	r1, [r2, r3]

			break;
     53c:	e016      	b.n	56c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     53e:	1dfb      	adds	r3, r7, #7
     540:	781b      	ldrb	r3, [r3, #0]
     542:	2b02      	cmp	r3, #2
     544:	d901      	bls.n	54a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     546:	2317      	movs	r3, #23
     548:	e011      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     54a:	68bb      	ldr	r3, [r7, #8]
     54c:	4a0b      	ldr	r2, [pc, #44]	; (57c <rtc_count_set_compare+0x88>)
     54e:	4293      	cmp	r3, r2
     550:	d901      	bls.n	556 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     552:	2317      	movs	r3, #23
     554:	e00b      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     556:	1dfb      	adds	r3, r7, #7
     558:	781a      	ldrb	r2, [r3, #0]
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	b299      	uxth	r1, r3
     55e:	697b      	ldr	r3, [r7, #20]
     560:	320c      	adds	r2, #12
     562:	0052      	lsls	r2, r2, #1
     564:	52d1      	strh	r1, [r2, r3]

			break;
     566:	e001      	b.n	56c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     568:	231a      	movs	r3, #26
     56a:	e000      	b.n	56e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     56c:	2300      	movs	r3, #0
}
     56e:	1c18      	adds	r0, r3, #0
     570:	46bd      	mov	sp, r7
     572:	b006      	add	sp, #24
     574:	bd80      	pop	{r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000185 	.word	0x00000185
     57c:	0000ffff 	.word	0x0000ffff

00000580 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
     588:	1c0a      	adds	r2, r1, #0
     58a:	1cbb      	adds	r3, r7, #2
     58c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	681b      	ldr	r3, [r3, #0]
     592:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     594:	687b      	ldr	r3, [r7, #4]
     596:	791b      	ldrb	r3, [r3, #4]
     598:	2b00      	cmp	r3, #0
     59a:	d001      	beq.n	5a0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     59c:	2315      	movs	r3, #21
     59e:	e00b      	b.n	5b8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	1c18      	adds	r0, r3, #0
     5a6:	4b06      	ldr	r3, [pc, #24]	; (5c0 <rtc_count_set_period+0x40>)
     5a8:	4798      	blx	r3
     5aa:	1e03      	subs	r3, r0, #0
     5ac:	d1f9      	bne.n	5a2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	1cba      	adds	r2, r7, #2
     5b2:	8812      	ldrh	r2, [r2, #0]
     5b4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     5b6:	2300      	movs	r3, #0
}
     5b8:	1c18      	adds	r0, r3, #0
     5ba:	46bd      	mov	sp, r7
     5bc:	b004      	add	sp, #16
     5be:	bd80      	pop	{r7, pc}
     5c0:	00000185 	.word	0x00000185

000005c4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	2200      	movs	r2, #0
     5d0:	701a      	strb	r2, [r3, #0]
}
     5d2:	46bd      	mov	sp, r7
     5d4:	b002      	add	sp, #8
     5d6:	bd80      	pop	{r7, pc}

000005d8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5d8:	b580      	push	{r7, lr}
     5da:	b086      	sub	sp, #24
     5dc:	af00      	add	r7, sp, #0
     5de:	60f8      	str	r0, [r7, #12]
     5e0:	60b9      	str	r1, [r7, #8]
     5e2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     5e4:	2316      	movs	r3, #22
     5e6:	18fb      	adds	r3, r7, r3
     5e8:	2200      	movs	r2, #0
     5ea:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     5ec:	68bb      	ldr	r3, [r7, #8]
     5ee:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5f0:	68bb      	ldr	r3, [r7, #8]
     5f2:	085a      	lsrs	r2, r3, #1
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	429a      	cmp	r2, r3
     5f8:	d201      	bcs.n	5fe <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5fa:	2340      	movs	r3, #64	; 0x40
     5fc:	e026      	b.n	64c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     5fe:	68bb      	ldr	r3, [r7, #8]
     600:	085b      	lsrs	r3, r3, #1
     602:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     604:	e00a      	b.n	61c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     606:	693a      	ldr	r2, [r7, #16]
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	1ad3      	subs	r3, r2, r3
     60c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     60e:	2316      	movs	r3, #22
     610:	18fb      	adds	r3, r7, r3
     612:	881a      	ldrh	r2, [r3, #0]
     614:	2316      	movs	r3, #22
     616:	18fb      	adds	r3, r7, r3
     618:	3201      	adds	r2, #1
     61a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     61c:	693a      	ldr	r2, [r7, #16]
     61e:	68fb      	ldr	r3, [r7, #12]
     620:	429a      	cmp	r2, r3
     622:	d2f0      	bcs.n	606 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     624:	2316      	movs	r3, #22
     626:	18fb      	adds	r3, r7, r3
     628:	2216      	movs	r2, #22
     62a:	18ba      	adds	r2, r7, r2
     62c:	8812      	ldrh	r2, [r2, #0]
     62e:	3a01      	subs	r2, #1
     630:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     632:	2316      	movs	r3, #22
     634:	18fb      	adds	r3, r7, r3
     636:	881b      	ldrh	r3, [r3, #0]
     638:	2bff      	cmp	r3, #255	; 0xff
     63a:	d901      	bls.n	640 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     63c:	2340      	movs	r3, #64	; 0x40
     63e:	e005      	b.n	64c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     640:	687b      	ldr	r3, [r7, #4]
     642:	2216      	movs	r2, #22
     644:	18ba      	adds	r2, r7, r2
     646:	8812      	ldrh	r2, [r2, #0]
     648:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     64a:	2300      	movs	r3, #0
	}
}
     64c:	1c18      	adds	r0, r3, #0
     64e:	46bd      	mov	sp, r7
     650:	b006      	add	sp, #24
     652:	bd80      	pop	{r7, pc}

00000654 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	1c02      	adds	r2, r0, #0
     65c:	1dfb      	adds	r3, r7, #7
     65e:	701a      	strb	r2, [r3, #0]
     660:	1dbb      	adds	r3, r7, #6
     662:	1c0a      	adds	r2, r1, #0
     664:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     666:	4b1a      	ldr	r3, [pc, #104]	; (6d0 <sercom_set_gclk_generator+0x7c>)
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	2201      	movs	r2, #1
     66c:	4053      	eors	r3, r2
     66e:	b2db      	uxtb	r3, r3
     670:	2b00      	cmp	r3, #0
     672:	d103      	bne.n	67c <sercom_set_gclk_generator+0x28>
     674:	1dbb      	adds	r3, r7, #6
     676:	781b      	ldrb	r3, [r3, #0]
     678:	2b00      	cmp	r3, #0
     67a:	d01b      	beq.n	6b4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     67c:	230c      	movs	r3, #12
     67e:	18fb      	adds	r3, r7, r3
     680:	1c18      	adds	r0, r3, #0
     682:	4b14      	ldr	r3, [pc, #80]	; (6d4 <sercom_set_gclk_generator+0x80>)
     684:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     686:	230c      	movs	r3, #12
     688:	18fb      	adds	r3, r7, r3
     68a:	1dfa      	adds	r2, r7, #7
     68c:	7812      	ldrb	r2, [r2, #0]
     68e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     690:	230c      	movs	r3, #12
     692:	18fb      	adds	r3, r7, r3
     694:	2013      	movs	r0, #19
     696:	1c19      	adds	r1, r3, #0
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <sercom_set_gclk_generator+0x84>)
     69a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     69c:	2013      	movs	r0, #19
     69e:	4b0f      	ldr	r3, [pc, #60]	; (6dc <sercom_set_gclk_generator+0x88>)
     6a0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     6a2:	4b0b      	ldr	r3, [pc, #44]	; (6d0 <sercom_set_gclk_generator+0x7c>)
     6a4:	1dfa      	adds	r2, r7, #7
     6a6:	7812      	ldrb	r2, [r2, #0]
     6a8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     6aa:	4b09      	ldr	r3, [pc, #36]	; (6d0 <sercom_set_gclk_generator+0x7c>)
     6ac:	2201      	movs	r2, #1
     6ae:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6b0:	2300      	movs	r3, #0
     6b2:	e008      	b.n	6c6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     6b4:	4b06      	ldr	r3, [pc, #24]	; (6d0 <sercom_set_gclk_generator+0x7c>)
     6b6:	785b      	ldrb	r3, [r3, #1]
     6b8:	1dfa      	adds	r2, r7, #7
     6ba:	7812      	ldrb	r2, [r2, #0]
     6bc:	429a      	cmp	r2, r3
     6be:	d101      	bne.n	6c4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     6c0:	2300      	movs	r3, #0
     6c2:	e000      	b.n	6c6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6c4:	231d      	movs	r3, #29
}
     6c6:	1c18      	adds	r0, r3, #0
     6c8:	46bd      	mov	sp, r7
     6ca:	b004      	add	sp, #16
     6cc:	bd80      	pop	{r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	200000fc 	.word	0x200000fc
     6d4:	000005c5 	.word	0x000005c5
     6d8:	00004e3d 	.word	0x00004e3d
     6dc:	00004e81 	.word	0x00004e81

000006e0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b082      	sub	sp, #8
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	1c0a      	adds	r2, r1, #0
     6ea:	1cfb      	adds	r3, r7, #3
     6ec:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	4a4d      	ldr	r2, [pc, #308]	; (828 <_sercom_get_default_pad+0x148>)
     6f2:	4293      	cmp	r3, r2
     6f4:	d03f      	beq.n	776 <_sercom_get_default_pad+0x96>
     6f6:	4a4c      	ldr	r2, [pc, #304]	; (828 <_sercom_get_default_pad+0x148>)
     6f8:	4293      	cmp	r3, r2
     6fa:	d806      	bhi.n	70a <_sercom_get_default_pad+0x2a>
     6fc:	4a4b      	ldr	r2, [pc, #300]	; (82c <_sercom_get_default_pad+0x14c>)
     6fe:	4293      	cmp	r3, r2
     700:	d00f      	beq.n	722 <_sercom_get_default_pad+0x42>
     702:	4a4b      	ldr	r2, [pc, #300]	; (830 <_sercom_get_default_pad+0x150>)
     704:	4293      	cmp	r3, r2
     706:	d021      	beq.n	74c <_sercom_get_default_pad+0x6c>
     708:	e089      	b.n	81e <_sercom_get_default_pad+0x13e>
     70a:	4a4a      	ldr	r2, [pc, #296]	; (834 <_sercom_get_default_pad+0x154>)
     70c:	4293      	cmp	r3, r2
     70e:	d100      	bne.n	712 <_sercom_get_default_pad+0x32>
     710:	e05b      	b.n	7ca <_sercom_get_default_pad+0xea>
     712:	4a49      	ldr	r2, [pc, #292]	; (838 <_sercom_get_default_pad+0x158>)
     714:	4293      	cmp	r3, r2
     716:	d100      	bne.n	71a <_sercom_get_default_pad+0x3a>
     718:	e06c      	b.n	7f4 <_sercom_get_default_pad+0x114>
     71a:	4a48      	ldr	r2, [pc, #288]	; (83c <_sercom_get_default_pad+0x15c>)
     71c:	4293      	cmp	r3, r2
     71e:	d03f      	beq.n	7a0 <_sercom_get_default_pad+0xc0>
     720:	e07d      	b.n	81e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     722:	1cfb      	adds	r3, r7, #3
     724:	781b      	ldrb	r3, [r3, #0]
     726:	2b01      	cmp	r3, #1
     728:	d00a      	beq.n	740 <_sercom_get_default_pad+0x60>
     72a:	dc02      	bgt.n	732 <_sercom_get_default_pad+0x52>
     72c:	2b00      	cmp	r3, #0
     72e:	d005      	beq.n	73c <_sercom_get_default_pad+0x5c>
     730:	e075      	b.n	81e <_sercom_get_default_pad+0x13e>
     732:	2b02      	cmp	r3, #2
     734:	d006      	beq.n	744 <_sercom_get_default_pad+0x64>
     736:	2b03      	cmp	r3, #3
     738:	d006      	beq.n	748 <_sercom_get_default_pad+0x68>
     73a:	e070      	b.n	81e <_sercom_get_default_pad+0x13e>
     73c:	4b40      	ldr	r3, [pc, #256]	; (840 <_sercom_get_default_pad+0x160>)
     73e:	e06f      	b.n	820 <_sercom_get_default_pad+0x140>
     740:	4b40      	ldr	r3, [pc, #256]	; (844 <_sercom_get_default_pad+0x164>)
     742:	e06d      	b.n	820 <_sercom_get_default_pad+0x140>
     744:	4b40      	ldr	r3, [pc, #256]	; (848 <_sercom_get_default_pad+0x168>)
     746:	e06b      	b.n	820 <_sercom_get_default_pad+0x140>
     748:	4b40      	ldr	r3, [pc, #256]	; (84c <_sercom_get_default_pad+0x16c>)
     74a:	e069      	b.n	820 <_sercom_get_default_pad+0x140>
     74c:	1cfb      	adds	r3, r7, #3
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	2b01      	cmp	r3, #1
     752:	d00a      	beq.n	76a <_sercom_get_default_pad+0x8a>
     754:	dc02      	bgt.n	75c <_sercom_get_default_pad+0x7c>
     756:	2b00      	cmp	r3, #0
     758:	d005      	beq.n	766 <_sercom_get_default_pad+0x86>
     75a:	e060      	b.n	81e <_sercom_get_default_pad+0x13e>
     75c:	2b02      	cmp	r3, #2
     75e:	d006      	beq.n	76e <_sercom_get_default_pad+0x8e>
     760:	2b03      	cmp	r3, #3
     762:	d006      	beq.n	772 <_sercom_get_default_pad+0x92>
     764:	e05b      	b.n	81e <_sercom_get_default_pad+0x13e>
     766:	2303      	movs	r3, #3
     768:	e05a      	b.n	820 <_sercom_get_default_pad+0x140>
     76a:	4b39      	ldr	r3, [pc, #228]	; (850 <_sercom_get_default_pad+0x170>)
     76c:	e058      	b.n	820 <_sercom_get_default_pad+0x140>
     76e:	4b39      	ldr	r3, [pc, #228]	; (854 <_sercom_get_default_pad+0x174>)
     770:	e056      	b.n	820 <_sercom_get_default_pad+0x140>
     772:	4b39      	ldr	r3, [pc, #228]	; (858 <_sercom_get_default_pad+0x178>)
     774:	e054      	b.n	820 <_sercom_get_default_pad+0x140>
     776:	1cfb      	adds	r3, r7, #3
     778:	781b      	ldrb	r3, [r3, #0]
     77a:	2b01      	cmp	r3, #1
     77c:	d00a      	beq.n	794 <_sercom_get_default_pad+0xb4>
     77e:	dc02      	bgt.n	786 <_sercom_get_default_pad+0xa6>
     780:	2b00      	cmp	r3, #0
     782:	d005      	beq.n	790 <_sercom_get_default_pad+0xb0>
     784:	e04b      	b.n	81e <_sercom_get_default_pad+0x13e>
     786:	2b02      	cmp	r3, #2
     788:	d006      	beq.n	798 <_sercom_get_default_pad+0xb8>
     78a:	2b03      	cmp	r3, #3
     78c:	d006      	beq.n	79c <_sercom_get_default_pad+0xbc>
     78e:	e046      	b.n	81e <_sercom_get_default_pad+0x13e>
     790:	4b32      	ldr	r3, [pc, #200]	; (85c <_sercom_get_default_pad+0x17c>)
     792:	e045      	b.n	820 <_sercom_get_default_pad+0x140>
     794:	4b32      	ldr	r3, [pc, #200]	; (860 <_sercom_get_default_pad+0x180>)
     796:	e043      	b.n	820 <_sercom_get_default_pad+0x140>
     798:	4b32      	ldr	r3, [pc, #200]	; (864 <_sercom_get_default_pad+0x184>)
     79a:	e041      	b.n	820 <_sercom_get_default_pad+0x140>
     79c:	4b32      	ldr	r3, [pc, #200]	; (868 <_sercom_get_default_pad+0x188>)
     79e:	e03f      	b.n	820 <_sercom_get_default_pad+0x140>
     7a0:	1cfb      	adds	r3, r7, #3
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2b01      	cmp	r3, #1
     7a6:	d00a      	beq.n	7be <_sercom_get_default_pad+0xde>
     7a8:	dc02      	bgt.n	7b0 <_sercom_get_default_pad+0xd0>
     7aa:	2b00      	cmp	r3, #0
     7ac:	d005      	beq.n	7ba <_sercom_get_default_pad+0xda>
     7ae:	e036      	b.n	81e <_sercom_get_default_pad+0x13e>
     7b0:	2b02      	cmp	r3, #2
     7b2:	d006      	beq.n	7c2 <_sercom_get_default_pad+0xe2>
     7b4:	2b03      	cmp	r3, #3
     7b6:	d006      	beq.n	7c6 <_sercom_get_default_pad+0xe6>
     7b8:	e031      	b.n	81e <_sercom_get_default_pad+0x13e>
     7ba:	4b2c      	ldr	r3, [pc, #176]	; (86c <_sercom_get_default_pad+0x18c>)
     7bc:	e030      	b.n	820 <_sercom_get_default_pad+0x140>
     7be:	4b2c      	ldr	r3, [pc, #176]	; (870 <_sercom_get_default_pad+0x190>)
     7c0:	e02e      	b.n	820 <_sercom_get_default_pad+0x140>
     7c2:	4b2c      	ldr	r3, [pc, #176]	; (874 <_sercom_get_default_pad+0x194>)
     7c4:	e02c      	b.n	820 <_sercom_get_default_pad+0x140>
     7c6:	4b2c      	ldr	r3, [pc, #176]	; (878 <_sercom_get_default_pad+0x198>)
     7c8:	e02a      	b.n	820 <_sercom_get_default_pad+0x140>
     7ca:	1cfb      	adds	r3, r7, #3
     7cc:	781b      	ldrb	r3, [r3, #0]
     7ce:	2b01      	cmp	r3, #1
     7d0:	d00a      	beq.n	7e8 <_sercom_get_default_pad+0x108>
     7d2:	dc02      	bgt.n	7da <_sercom_get_default_pad+0xfa>
     7d4:	2b00      	cmp	r3, #0
     7d6:	d005      	beq.n	7e4 <_sercom_get_default_pad+0x104>
     7d8:	e021      	b.n	81e <_sercom_get_default_pad+0x13e>
     7da:	2b02      	cmp	r3, #2
     7dc:	d006      	beq.n	7ec <_sercom_get_default_pad+0x10c>
     7de:	2b03      	cmp	r3, #3
     7e0:	d006      	beq.n	7f0 <_sercom_get_default_pad+0x110>
     7e2:	e01c      	b.n	81e <_sercom_get_default_pad+0x13e>
     7e4:	4b25      	ldr	r3, [pc, #148]	; (87c <_sercom_get_default_pad+0x19c>)
     7e6:	e01b      	b.n	820 <_sercom_get_default_pad+0x140>
     7e8:	4b25      	ldr	r3, [pc, #148]	; (880 <_sercom_get_default_pad+0x1a0>)
     7ea:	e019      	b.n	820 <_sercom_get_default_pad+0x140>
     7ec:	4b25      	ldr	r3, [pc, #148]	; (884 <_sercom_get_default_pad+0x1a4>)
     7ee:	e017      	b.n	820 <_sercom_get_default_pad+0x140>
     7f0:	4b25      	ldr	r3, [pc, #148]	; (888 <_sercom_get_default_pad+0x1a8>)
     7f2:	e015      	b.n	820 <_sercom_get_default_pad+0x140>
     7f4:	1cfb      	adds	r3, r7, #3
     7f6:	781b      	ldrb	r3, [r3, #0]
     7f8:	2b01      	cmp	r3, #1
     7fa:	d00a      	beq.n	812 <_sercom_get_default_pad+0x132>
     7fc:	dc02      	bgt.n	804 <_sercom_get_default_pad+0x124>
     7fe:	2b00      	cmp	r3, #0
     800:	d005      	beq.n	80e <_sercom_get_default_pad+0x12e>
     802:	e00c      	b.n	81e <_sercom_get_default_pad+0x13e>
     804:	2b02      	cmp	r3, #2
     806:	d006      	beq.n	816 <_sercom_get_default_pad+0x136>
     808:	2b03      	cmp	r3, #3
     80a:	d006      	beq.n	81a <_sercom_get_default_pad+0x13a>
     80c:	e007      	b.n	81e <_sercom_get_default_pad+0x13e>
     80e:	4b1f      	ldr	r3, [pc, #124]	; (88c <_sercom_get_default_pad+0x1ac>)
     810:	e006      	b.n	820 <_sercom_get_default_pad+0x140>
     812:	4b1f      	ldr	r3, [pc, #124]	; (890 <_sercom_get_default_pad+0x1b0>)
     814:	e004      	b.n	820 <_sercom_get_default_pad+0x140>
     816:	4b1f      	ldr	r3, [pc, #124]	; (894 <_sercom_get_default_pad+0x1b4>)
     818:	e002      	b.n	820 <_sercom_get_default_pad+0x140>
     81a:	4b1f      	ldr	r3, [pc, #124]	; (898 <_sercom_get_default_pad+0x1b8>)
     81c:	e000      	b.n	820 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     81e:	2300      	movs	r3, #0
}
     820:	1c18      	adds	r0, r3, #0
     822:	46bd      	mov	sp, r7
     824:	b002      	add	sp, #8
     826:	bd80      	pop	{r7, pc}
     828:	42001000 	.word	0x42001000
     82c:	42000800 	.word	0x42000800
     830:	42000c00 	.word	0x42000c00
     834:	42001800 	.word	0x42001800
     838:	42001c00 	.word	0x42001c00
     83c:	42001400 	.word	0x42001400
     840:	00040003 	.word	0x00040003
     844:	00050003 	.word	0x00050003
     848:	00060003 	.word	0x00060003
     84c:	00070003 	.word	0x00070003
     850:	00010003 	.word	0x00010003
     854:	001e0003 	.word	0x001e0003
     858:	001f0003 	.word	0x001f0003
     85c:	00080003 	.word	0x00080003
     860:	00090003 	.word	0x00090003
     864:	000a0003 	.word	0x000a0003
     868:	000b0003 	.word	0x000b0003
     86c:	00100003 	.word	0x00100003
     870:	00110003 	.word	0x00110003
     874:	00120003 	.word	0x00120003
     878:	00130003 	.word	0x00130003
     87c:	000c0003 	.word	0x000c0003
     880:	000d0003 	.word	0x000d0003
     884:	000e0003 	.word	0x000e0003
     888:	000f0003 	.word	0x000f0003
     88c:	00160003 	.word	0x00160003
     890:	00170003 	.word	0x00170003
     894:	00180003 	.word	0x00180003
     898:	00190003 	.word	0x00190003

0000089c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     89c:	b590      	push	{r4, r7, lr}
     89e:	b08b      	sub	sp, #44	; 0x2c
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8a4:	230c      	movs	r3, #12
     8a6:	18fb      	adds	r3, r7, r3
     8a8:	4a0e      	ldr	r2, [pc, #56]	; (8e4 <_sercom_get_sercom_inst_index+0x48>)
     8aa:	ca13      	ldmia	r2!, {r0, r1, r4}
     8ac:	c313      	stmia	r3!, {r0, r1, r4}
     8ae:	ca13      	ldmia	r2!, {r0, r1, r4}
     8b0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8b2:	2300      	movs	r3, #0
     8b4:	627b      	str	r3, [r7, #36]	; 0x24
     8b6:	e00d      	b.n	8d4 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	220c      	movs	r2, #12
     8bc:	18ba      	adds	r2, r7, r2
     8be:	6a79      	ldr	r1, [r7, #36]	; 0x24
     8c0:	0089      	lsls	r1, r1, #2
     8c2:	588a      	ldr	r2, [r1, r2]
     8c4:	4293      	cmp	r3, r2
     8c6:	d102      	bne.n	8ce <_sercom_get_sercom_inst_index+0x32>
			return i;
     8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8ca:	b2db      	uxtb	r3, r3
     8cc:	e006      	b.n	8dc <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8d0:	3301      	adds	r3, #1
     8d2:	627b      	str	r3, [r7, #36]	; 0x24
     8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8d6:	2b05      	cmp	r3, #5
     8d8:	d9ee      	bls.n	8b8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8da:	2300      	movs	r3, #0
}
     8dc:	1c18      	adds	r0, r3, #0
     8de:	46bd      	mov	sp, r7
     8e0:	b00b      	add	sp, #44	; 0x2c
     8e2:	bd90      	pop	{r4, r7, pc}
     8e4:	00008e44 	.word	0x00008e44

000008e8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	2280      	movs	r2, #128	; 0x80
     8f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	2200      	movs	r2, #0
     8fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2201      	movs	r2, #1
     900:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     902:	687b      	ldr	r3, [r7, #4]
     904:	2200      	movs	r2, #0
     906:	70da      	strb	r2, [r3, #3]
}
     908:	46bd      	mov	sp, r7
     90a:	b002      	add	sp, #8
     90c:	bd80      	pop	{r7, pc}
     90e:	46c0      	nop			; (mov r8, r8)

00000910 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     910:	b580      	push	{r7, lr}
     912:	b084      	sub	sp, #16
     914:	af00      	add	r7, sp, #0
     916:	1c02      	adds	r2, r0, #0
     918:	1dfb      	adds	r3, r7, #7
     91a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     91c:	230f      	movs	r3, #15
     91e:	18fb      	adds	r3, r7, r3
     920:	1dfa      	adds	r2, r7, #7
     922:	7812      	ldrb	r2, [r2, #0]
     924:	09d2      	lsrs	r2, r2, #7
     926:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     928:	230e      	movs	r3, #14
     92a:	18fb      	adds	r3, r7, r3
     92c:	1dfa      	adds	r2, r7, #7
     92e:	7812      	ldrb	r2, [r2, #0]
     930:	0952      	lsrs	r2, r2, #5
     932:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     936:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     938:	230f      	movs	r3, #15
     93a:	18fb      	adds	r3, r7, r3
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d10f      	bne.n	962 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     942:	230f      	movs	r3, #15
     944:	18fb      	adds	r3, r7, r3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	009b      	lsls	r3, r3, #2
     94a:	2210      	movs	r2, #16
     94c:	4694      	mov	ip, r2
     94e:	44bc      	add	ip, r7
     950:	4463      	add	r3, ip
     952:	3b08      	subs	r3, #8
     954:	681a      	ldr	r2, [r3, #0]
     956:	230e      	movs	r3, #14
     958:	18fb      	adds	r3, r7, r3
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	01db      	lsls	r3, r3, #7
     95e:	18d3      	adds	r3, r2, r3
     960:	e000      	b.n	964 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     962:	2300      	movs	r3, #0
	}
}
     964:	1c18      	adds	r0, r3, #0
     966:	46bd      	mov	sp, r7
     968:	b004      	add	sp, #16
     96a:	bd80      	pop	{r7, pc}
     96c:	41004400 	.word	0x41004400

00000970 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     970:	b580      	push	{r7, lr}
     972:	b086      	sub	sp, #24
     974:	af00      	add	r7, sp, #0
     976:	1c02      	adds	r2, r0, #0
     978:	1dfb      	adds	r3, r7, #7
     97a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     97c:	1dfb      	adds	r3, r7, #7
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	1c18      	adds	r0, r3, #0
     982:	4b19      	ldr	r3, [pc, #100]	; (9e8 <system_pinmux_pin_get_mux_position+0x78>)
     984:	4798      	blx	r3
     986:	1c03      	adds	r3, r0, #0
     988:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     98a:	1dfb      	adds	r3, r7, #7
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	221f      	movs	r2, #31
     990:	4013      	ands	r3, r2
     992:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     994:	697a      	ldr	r2, [r7, #20]
     996:	2140      	movs	r1, #64	; 0x40
     998:	693b      	ldr	r3, [r7, #16]
     99a:	18d3      	adds	r3, r2, r3
     99c:	185b      	adds	r3, r3, r1
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	b2db      	uxtb	r3, r3
     9a2:	1c1a      	adds	r2, r3, #0
     9a4:	2301      	movs	r3, #1
     9a6:	4013      	ands	r3, r2
     9a8:	d101      	bne.n	9ae <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     9aa:	2380      	movs	r3, #128	; 0x80
     9ac:	e017      	b.n	9de <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9ae:	693b      	ldr	r3, [r7, #16]
     9b0:	085b      	lsrs	r3, r3, #1
     9b2:	697a      	ldr	r2, [r7, #20]
     9b4:	2130      	movs	r1, #48	; 0x30
     9b6:	18d3      	adds	r3, r2, r3
     9b8:	185b      	adds	r3, r3, r1
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	b2db      	uxtb	r3, r3
     9be:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     9c0:	693b      	ldr	r3, [r7, #16]
     9c2:	2201      	movs	r2, #1
     9c4:	4013      	ands	r3, r2
     9c6:	d005      	beq.n	9d4 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	22f0      	movs	r2, #240	; 0xf0
     9cc:	4013      	ands	r3, r2
     9ce:	091b      	lsrs	r3, r3, #4
     9d0:	b2db      	uxtb	r3, r3
     9d2:	e004      	b.n	9de <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	b2db      	uxtb	r3, r3
     9d8:	220f      	movs	r2, #15
     9da:	4013      	ands	r3, r2
     9dc:	b2db      	uxtb	r3, r3
	}
}
     9de:	1c18      	adds	r0, r3, #0
     9e0:	46bd      	mov	sp, r7
     9e2:	b006      	add	sp, #24
     9e4:	bd80      	pop	{r7, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00000911 	.word	0x00000911

000009ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	1c02      	adds	r2, r0, #0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	1c18      	adds	r0, r3, #0
     9fe:	4b03      	ldr	r3, [pc, #12]	; (a0c <port_get_group_from_gpio_pin+0x20>)
     a00:	4798      	blx	r3
     a02:	1c03      	adds	r3, r0, #0
}
     a04:	1c18      	adds	r0, r3, #0
     a06:	46bd      	mov	sp, r7
     a08:	b002      	add	sp, #8
     a0a:	bd80      	pop	{r7, pc}
     a0c:	00000911 	.word	0x00000911

00000a10 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     a10:	b580      	push	{r7, lr}
     a12:	b084      	sub	sp, #16
     a14:	af00      	add	r7, sp, #0
     a16:	1c02      	adds	r2, r0, #0
     a18:	1dfb      	adds	r3, r7, #7
     a1a:	701a      	strb	r2, [r3, #0]
     a1c:	1dbb      	adds	r3, r7, #6
     a1e:	1c0a      	adds	r2, r1, #0
     a20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     a22:	1dfb      	adds	r3, r7, #7
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	1c18      	adds	r0, r3, #0
     a28:	4b0c      	ldr	r3, [pc, #48]	; (a5c <port_pin_set_output_level+0x4c>)
     a2a:	4798      	blx	r3
     a2c:	1c03      	adds	r3, r0, #0
     a2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a30:	1dfb      	adds	r3, r7, #7
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	221f      	movs	r2, #31
     a36:	4013      	ands	r3, r2
     a38:	2201      	movs	r2, #1
     a3a:	409a      	lsls	r2, r3
     a3c:	1c13      	adds	r3, r2, #0
     a3e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a40:	1dbb      	adds	r3, r7, #6
     a42:	781b      	ldrb	r3, [r3, #0]
     a44:	2b00      	cmp	r3, #0
     a46:	d003      	beq.n	a50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	68ba      	ldr	r2, [r7, #8]
     a4c:	619a      	str	r2, [r3, #24]
     a4e:	e002      	b.n	a56 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a50:	68fb      	ldr	r3, [r7, #12]
     a52:	68ba      	ldr	r2, [r7, #8]
     a54:	615a      	str	r2, [r3, #20]
	}
}
     a56:	46bd      	mov	sp, r7
     a58:	b004      	add	sp, #16
     a5a:	bd80      	pop	{r7, pc}
     a5c:	000009ed 	.word	0x000009ed

00000a60 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a60:	b580      	push	{r7, lr}
     a62:	b082      	sub	sp, #8
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	2200      	movs	r2, #0
     a6c:	701a      	strb	r2, [r3, #0]
}
     a6e:	46bd      	mov	sp, r7
     a70:	b002      	add	sp, #8
     a72:	bd80      	pop	{r7, pc}

00000a74 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     a74:	b580      	push	{r7, lr}
     a76:	b082      	sub	sp, #8
     a78:	af00      	add	r7, sp, #0
     a7a:	1c02      	adds	r2, r0, #0
     a7c:	6039      	str	r1, [r7, #0]
     a7e:	1dfb      	adds	r3, r7, #7
     a80:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     a82:	1dfb      	adds	r3, r7, #7
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b01      	cmp	r3, #1
     a88:	d00a      	beq.n	aa0 <system_apb_clock_set_mask+0x2c>
     a8a:	2b02      	cmp	r3, #2
     a8c:	d00f      	beq.n	aae <system_apb_clock_set_mask+0x3a>
     a8e:	2b00      	cmp	r3, #0
     a90:	d114      	bne.n	abc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <system_apb_clock_set_mask+0x58>)
     a94:	4a0d      	ldr	r2, [pc, #52]	; (acc <system_apb_clock_set_mask+0x58>)
     a96:	6991      	ldr	r1, [r2, #24]
     a98:	683a      	ldr	r2, [r7, #0]
     a9a:	430a      	orrs	r2, r1
     a9c:	619a      	str	r2, [r3, #24]
			break;
     a9e:	e00f      	b.n	ac0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     aa0:	4b0a      	ldr	r3, [pc, #40]	; (acc <system_apb_clock_set_mask+0x58>)
     aa2:	4a0a      	ldr	r2, [pc, #40]	; (acc <system_apb_clock_set_mask+0x58>)
     aa4:	69d1      	ldr	r1, [r2, #28]
     aa6:	683a      	ldr	r2, [r7, #0]
     aa8:	430a      	orrs	r2, r1
     aaa:	61da      	str	r2, [r3, #28]
			break;
     aac:	e008      	b.n	ac0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     aae:	4b07      	ldr	r3, [pc, #28]	; (acc <system_apb_clock_set_mask+0x58>)
     ab0:	4a06      	ldr	r2, [pc, #24]	; (acc <system_apb_clock_set_mask+0x58>)
     ab2:	6a11      	ldr	r1, [r2, #32]
     ab4:	683a      	ldr	r2, [r7, #0]
     ab6:	430a      	orrs	r2, r1
     ab8:	621a      	str	r2, [r3, #32]
			break;
     aba:	e001      	b.n	ac0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     abc:	2317      	movs	r3, #23
     abe:	e000      	b.n	ac2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ac0:	2300      	movs	r3, #0
}
     ac2:	1c18      	adds	r0, r3, #0
     ac4:	46bd      	mov	sp, r7
     ac6:	b002      	add	sp, #8
     ac8:	bd80      	pop	{r7, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	40000400 	.word	0x40000400

00000ad0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ad0:	b580      	push	{r7, lr}
     ad2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ad4:	4b05      	ldr	r3, [pc, #20]	; (aec <system_is_debugger_present+0x1c>)
     ad6:	789b      	ldrb	r3, [r3, #2]
     ad8:	b2db      	uxtb	r3, r3
     ada:	1c1a      	adds	r2, r3, #0
     adc:	2302      	movs	r3, #2
     ade:	4013      	ands	r3, r2
     ae0:	1e5a      	subs	r2, r3, #1
     ae2:	4193      	sbcs	r3, r2
     ae4:	b2db      	uxtb	r3, r3
}
     ae6:	1c18      	adds	r0, r3, #0
     ae8:	46bd      	mov	sp, r7
     aea:	bd80      	pop	{r7, pc}
     aec:	41002000 	.word	0x41002000

00000af0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     af0:	b580      	push	{r7, lr}
     af2:	b084      	sub	sp, #16
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	681b      	ldr	r3, [r3, #0]
     afc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	7e1b      	ldrb	r3, [r3, #24]
     b02:	b2db      	uxtb	r3, r3
     b04:	1c1a      	adds	r2, r3, #0
     b06:	2301      	movs	r3, #1
     b08:	4013      	ands	r3, r2
     b0a:	1e5a      	subs	r2, r3, #1
     b0c:	4193      	sbcs	r3, r2
     b0e:	b2db      	uxtb	r3, r3
}
     b10:	1c18      	adds	r0, r3, #0
     b12:	46bd      	mov	sp, r7
     b14:	b004      	add	sp, #16
     b16:	bd80      	pop	{r7, pc}

00000b18 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     b18:	b580      	push	{r7, lr}
     b1a:	b084      	sub	sp, #16
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b20:	687b      	ldr	r3, [r7, #4]
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	7e1b      	ldrb	r3, [r3, #24]
     b2a:	b2db      	uxtb	r3, r3
     b2c:	1c1a      	adds	r2, r3, #0
     b2e:	2304      	movs	r3, #4
     b30:	4013      	ands	r3, r2
     b32:	1e5a      	subs	r2, r3, #1
     b34:	4193      	sbcs	r3, r2
     b36:	b2db      	uxtb	r3, r3
}
     b38:	1c18      	adds	r0, r3, #0
     b3a:	46bd      	mov	sp, r7
     b3c:	b004      	add	sp, #16
     b3e:	bd80      	pop	{r7, pc}

00000b40 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     b40:	b580      	push	{r7, lr}
     b42:	b084      	sub	sp, #16
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
     b48:	1c0a      	adds	r2, r1, #0
     b4a:	1cbb      	adds	r3, r7, #2
     b4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	1c18      	adds	r0, r3, #0
     b58:	4b0a      	ldr	r3, [pc, #40]	; (b84 <spi_write+0x44>)
     b5a:	4798      	blx	r3
     b5c:	1c03      	adds	r3, r0, #0
     b5e:	1c1a      	adds	r2, r3, #0
     b60:	2301      	movs	r3, #1
     b62:	4053      	eors	r3, r2
     b64:	b2db      	uxtb	r3, r3
     b66:	2b00      	cmp	r3, #0
     b68:	d001      	beq.n	b6e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     b6a:	2305      	movs	r3, #5
     b6c:	e006      	b.n	b7c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b6e:	1cbb      	adds	r3, r7, #2
     b70:	881b      	ldrh	r3, [r3, #0]
     b72:	05db      	lsls	r3, r3, #23
     b74:	0dda      	lsrs	r2, r3, #23
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     b7a:	2300      	movs	r3, #0
}
     b7c:	1c18      	adds	r0, r3, #0
     b7e:	46bd      	mov	sp, r7
     b80:	b004      	add	sp, #16
     b82:	bd80      	pop	{r7, pc}
     b84:	00000af1 	.word	0x00000af1

00000b88 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     b88:	b580      	push	{r7, lr}
     b8a:	b084      	sub	sp, #16
     b8c:	af00      	add	r7, sp, #0
     b8e:	6078      	str	r0, [r7, #4]
     b90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	681b      	ldr	r3, [r3, #0]
     b96:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	1c18      	adds	r0, r3, #0
     b9c:	4b1d      	ldr	r3, [pc, #116]	; (c14 <spi_read+0x8c>)
     b9e:	4798      	blx	r3
     ba0:	1c03      	adds	r3, r0, #0
     ba2:	1c1a      	adds	r2, r3, #0
     ba4:	2301      	movs	r3, #1
     ba6:	4053      	eors	r3, r2
     ba8:	b2db      	uxtb	r3, r3
     baa:	2b00      	cmp	r3, #0
     bac:	d001      	beq.n	bb2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     bae:	2310      	movs	r3, #16
     bb0:	e02c      	b.n	c0c <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     bb2:	230f      	movs	r3, #15
     bb4:	18fb      	adds	r3, r7, r3
     bb6:	2200      	movs	r2, #0
     bb8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bba:	68bb      	ldr	r3, [r7, #8]
     bbc:	8b5b      	ldrh	r3, [r3, #26]
     bbe:	b29b      	uxth	r3, r3
     bc0:	1c1a      	adds	r2, r3, #0
     bc2:	2304      	movs	r3, #4
     bc4:	4013      	ands	r3, r2
     bc6:	d00b      	beq.n	be0 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     bc8:	230f      	movs	r3, #15
     bca:	18fb      	adds	r3, r7, r3
     bcc:	221e      	movs	r2, #30
     bce:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	8b5b      	ldrh	r3, [r3, #26]
     bd4:	b29b      	uxth	r3, r3
     bd6:	2204      	movs	r2, #4
     bd8:	4313      	orrs	r3, r2
     bda:	b29a      	uxth	r2, r3
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     be0:	687b      	ldr	r3, [r7, #4]
     be2:	799b      	ldrb	r3, [r3, #6]
     be4:	2b01      	cmp	r3, #1
     be6:	d108      	bne.n	bfa <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     be8:	68bb      	ldr	r3, [r7, #8]
     bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bec:	b29b      	uxth	r3, r3
     bee:	05db      	lsls	r3, r3, #23
     bf0:	0ddb      	lsrs	r3, r3, #23
     bf2:	b29a      	uxth	r2, r3
     bf4:	683b      	ldr	r3, [r7, #0]
     bf6:	801a      	strh	r2, [r3, #0]
     bf8:	e005      	b.n	c06 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     bfa:	68bb      	ldr	r3, [r7, #8]
     bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bfe:	b2db      	uxtb	r3, r3
     c00:	b29a      	uxth	r2, r3
     c02:	683b      	ldr	r3, [r7, #0]
     c04:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     c06:	230f      	movs	r3, #15
     c08:	18fb      	adds	r3, r7, r3
     c0a:	781b      	ldrb	r3, [r3, #0]
}
     c0c:	1c18      	adds	r0, r3, #0
     c0e:	46bd      	mov	sp, r7
     c10:	b004      	add	sp, #16
     c12:	bd80      	pop	{r7, pc}
     c14:	00000b19 	.word	0x00000b19

00000c18 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     c18:	b590      	push	{r4, r7, lr}
     c1a:	b093      	sub	sp, #76	; 0x4c
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
     c20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     c2e:	231c      	movs	r3, #28
     c30:	18fb      	adds	r3, r7, r3
     c32:	1c18      	adds	r0, r3, #0
     c34:	4b86      	ldr	r3, [pc, #536]	; (e50 <_spi_set_config+0x238>)
     c36:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c38:	231c      	movs	r3, #28
     c3a:	18fb      	adds	r3, r7, r3
     c3c:	2200      	movs	r2, #0
     c3e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     c40:	683b      	ldr	r3, [r7, #0]
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	2b00      	cmp	r3, #0
     c46:	d103      	bne.n	c50 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c48:	231c      	movs	r3, #28
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	2200      	movs	r2, #0
     c4e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     c50:	683b      	ldr	r3, [r7, #0]
     c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c54:	230c      	movs	r3, #12
     c56:	18fb      	adds	r3, r7, r3
     c58:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     c5a:	683b      	ldr	r3, [r7, #0]
     c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c5e:	230c      	movs	r3, #12
     c60:	18fb      	adds	r3, r7, r3
     c62:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c64:	683b      	ldr	r3, [r7, #0]
     c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c68:	230c      	movs	r3, #12
     c6a:	18fb      	adds	r3, r7, r3
     c6c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c6e:	683b      	ldr	r3, [r7, #0]
     c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c72:	230c      	movs	r3, #12
     c74:	18fb      	adds	r3, r7, r3
     c76:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c78:	2347      	movs	r3, #71	; 0x47
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	2200      	movs	r2, #0
     c7e:	701a      	strb	r2, [r3, #0]
     c80:	e02c      	b.n	cdc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c82:	2347      	movs	r3, #71	; 0x47
     c84:	18fb      	adds	r3, r7, r3
     c86:	781a      	ldrb	r2, [r3, #0]
     c88:	230c      	movs	r3, #12
     c8a:	18fb      	adds	r3, r7, r3
     c8c:	0092      	lsls	r2, r2, #2
     c8e:	58d3      	ldr	r3, [r2, r3]
     c90:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c94:	2b00      	cmp	r3, #0
     c96:	d109      	bne.n	cac <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c9a:	2347      	movs	r3, #71	; 0x47
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	781b      	ldrb	r3, [r3, #0]
     ca0:	1c10      	adds	r0, r2, #0
     ca2:	1c19      	adds	r1, r3, #0
     ca4:	4b6b      	ldr	r3, [pc, #428]	; (e54 <_spi_set_config+0x23c>)
     ca6:	4798      	blx	r3
     ca8:	1c03      	adds	r3, r0, #0
     caa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cae:	3301      	adds	r3, #1
     cb0:	d00d      	beq.n	cce <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cb4:	b2da      	uxtb	r2, r3
     cb6:	231c      	movs	r3, #28
     cb8:	18fb      	adds	r3, r7, r3
     cba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cbe:	0c1b      	lsrs	r3, r3, #16
     cc0:	b2da      	uxtb	r2, r3
     cc2:	231c      	movs	r3, #28
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	1c10      	adds	r0, r2, #0
     cc8:	1c19      	adds	r1, r3, #0
     cca:	4b63      	ldr	r3, [pc, #396]	; (e58 <_spi_set_config+0x240>)
     ccc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cce:	2347      	movs	r3, #71	; 0x47
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	781a      	ldrb	r2, [r3, #0]
     cd4:	2347      	movs	r3, #71	; 0x47
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	3201      	adds	r2, #1
     cda:	701a      	strb	r2, [r3, #0]
     cdc:	2347      	movs	r3, #71	; 0x47
     cde:	18fb      	adds	r3, r7, r3
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b03      	cmp	r3, #3
     ce4:	d9cd      	bls.n	c82 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	781a      	ldrb	r2, [r3, #0]
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	7c1a      	ldrb	r2, [r3, #16]
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	7c9a      	ldrb	r2, [r3, #18]
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     cfe:	683b      	ldr	r3, [r7, #0]
     d00:	7d1a      	ldrb	r2, [r3, #20]
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     d06:	230a      	movs	r3, #10
     d08:	18fb      	adds	r3, r7, r3
     d0a:	2200      	movs	r2, #0
     d0c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     d0e:	2300      	movs	r3, #0
     d10:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     d12:	2300      	movs	r3, #0
     d14:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     d16:	683b      	ldr	r3, [r7, #0]
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	2b01      	cmp	r3, #1
     d1c:	d12b      	bne.n	d76 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	1c18      	adds	r0, r3, #0
     d24:	4b4d      	ldr	r3, [pc, #308]	; (e5c <_spi_set_config+0x244>)
     d26:	4798      	blx	r3
     d28:	1c03      	adds	r3, r0, #0
     d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d2e:	3314      	adds	r3, #20
     d30:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d34:	b2db      	uxtb	r3, r3
     d36:	1c18      	adds	r0, r3, #0
     d38:	4b49      	ldr	r3, [pc, #292]	; (e60 <_spi_set_config+0x248>)
     d3a:	4798      	blx	r3
     d3c:	1c03      	adds	r3, r0, #0
     d3e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     d40:	683b      	ldr	r3, [r7, #0]
     d42:	6999      	ldr	r1, [r3, #24]
     d44:	2323      	movs	r3, #35	; 0x23
     d46:	18fc      	adds	r4, r7, r3
     d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d4a:	230a      	movs	r3, #10
     d4c:	18fb      	adds	r3, r7, r3
     d4e:	1c08      	adds	r0, r1, #0
     d50:	1c11      	adds	r1, r2, #0
     d52:	1c1a      	adds	r2, r3, #0
     d54:	4b43      	ldr	r3, [pc, #268]	; (e64 <_spi_set_config+0x24c>)
     d56:	4798      	blx	r3
     d58:	1c03      	adds	r3, r0, #0
     d5a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     d5c:	2323      	movs	r3, #35	; 0x23
     d5e:	18fb      	adds	r3, r7, r3
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	2b00      	cmp	r3, #0
     d64:	d001      	beq.n	d6a <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     d66:	2317      	movs	r3, #23
     d68:	e06d      	b.n	e46 <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     d6a:	230a      	movs	r3, #10
     d6c:	18fb      	adds	r3, r7, r3
     d6e:	881b      	ldrh	r3, [r3, #0]
     d70:	b2da      	uxtb	r2, r3
     d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d74:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d11a      	bne.n	db4 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     d7e:	683b      	ldr	r3, [r7, #0]
     d80:	699b      	ldr	r3, [r3, #24]
     d82:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     d84:	683b      	ldr	r3, [r7, #0]
     d86:	8b9b      	ldrh	r3, [r3, #28]
     d88:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d8e:	683a      	ldr	r2, [r7, #0]
     d90:	7f92      	ldrb	r2, [r2, #30]
     d92:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     d94:	683a      	ldr	r2, [r7, #0]
     d96:	7fd2      	ldrb	r2, [r2, #31]
     d98:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d9a:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     d9c:	431a      	orrs	r2, r3
     d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     da0:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     da2:	683b      	ldr	r3, [r7, #0]
     da4:	2220      	movs	r2, #32
     da6:	5c9b      	ldrb	r3, [r3, r2]
     da8:	2b00      	cmp	r3, #0
     daa:	d003      	beq.n	db4 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dae:	2240      	movs	r2, #64	; 0x40
     db0:	4313      	orrs	r3, r2
     db2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	685b      	ldr	r3, [r3, #4]
     db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dba:	4313      	orrs	r3, r2
     dbc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     dbe:	683b      	ldr	r3, [r7, #0]
     dc0:	689b      	ldr	r3, [r3, #8]
     dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dc4:	4313      	orrs	r3, r2
     dc6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     dc8:	683b      	ldr	r3, [r7, #0]
     dca:	68db      	ldr	r3, [r3, #12]
     dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dce:	4313      	orrs	r3, r2
     dd0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     dd2:	683b      	ldr	r3, [r7, #0]
     dd4:	7c1b      	ldrb	r3, [r3, #16]
     dd6:	1c1a      	adds	r2, r3, #0
     dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dda:	4313      	orrs	r3, r2
     ddc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     dde:	683b      	ldr	r3, [r7, #0]
     de0:	7c5b      	ldrb	r3, [r3, #17]
     de2:	2b00      	cmp	r3, #0
     de4:	d103      	bne.n	dee <_spi_set_config+0x1d6>
     de6:	4b20      	ldr	r3, [pc, #128]	; (e68 <_spi_set_config+0x250>)
     de8:	4798      	blx	r3
     dea:	1e03      	subs	r3, r0, #0
     dec:	d003      	beq.n	df6 <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     df0:	2280      	movs	r2, #128	; 0x80
     df2:	4313      	orrs	r3, r2
     df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     df6:	683b      	ldr	r3, [r7, #0]
     df8:	7c9b      	ldrb	r3, [r3, #18]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d004      	beq.n	e08 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e00:	2280      	movs	r2, #128	; 0x80
     e02:	0292      	lsls	r2, r2, #10
     e04:	4313      	orrs	r3, r2
     e06:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     e08:	683b      	ldr	r3, [r7, #0]
     e0a:	7cdb      	ldrb	r3, [r3, #19]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d004      	beq.n	e1a <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e12:	2280      	movs	r2, #128	; 0x80
     e14:	0092      	lsls	r2, r2, #2
     e16:	4313      	orrs	r3, r2
     e18:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	7d1b      	ldrb	r3, [r3, #20]
     e1e:	2b00      	cmp	r3, #0
     e20:	d004      	beq.n	e2c <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e24:	2280      	movs	r2, #128	; 0x80
     e26:	0192      	lsls	r2, r2, #6
     e28:	4313      	orrs	r3, r2
     e2a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e32:	431a      	orrs	r2, r3
     e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e36:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3a:	685a      	ldr	r2, [r3, #4]
     e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e3e:	431a      	orrs	r2, r3
     e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e42:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     e44:	2300      	movs	r3, #0
}
     e46:	1c18      	adds	r0, r3, #0
     e48:	46bd      	mov	sp, r7
     e4a:	b013      	add	sp, #76	; 0x4c
     e4c:	bd90      	pop	{r4, r7, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	000008e9 	.word	0x000008e9
     e54:	000006e1 	.word	0x000006e1
     e58:	00005129 	.word	0x00005129
     e5c:	0000089d 	.word	0x0000089d
     e60:	00004f61 	.word	0x00004f61
     e64:	000005d9 	.word	0x000005d9
     e68:	00000ad1 	.word	0x00000ad1

00000e6c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     e6c:	b590      	push	{r4, r7, lr}
     e6e:	b091      	sub	sp, #68	; 0x44
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
     e74:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     e82:	683b      	ldr	r3, [r7, #0]
     e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e86:	230c      	movs	r3, #12
     e88:	18fb      	adds	r3, r7, r3
     e8a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e90:	230c      	movs	r3, #12
     e92:	18fb      	adds	r3, r7, r3
     e94:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     e96:	683b      	ldr	r3, [r7, #0]
     e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e9a:	230c      	movs	r3, #12
     e9c:	18fb      	adds	r3, r7, r3
     e9e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     ea0:	683b      	ldr	r3, [r7, #0]
     ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     ea4:	230c      	movs	r3, #12
     ea6:	18fb      	adds	r3, r7, r3
     ea8:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     eaa:	233f      	movs	r3, #63	; 0x3f
     eac:	18fb      	adds	r3, r7, r3
     eae:	2200      	movs	r2, #0
     eb0:	701a      	strb	r2, [r3, #0]
     eb2:	e030      	b.n	f16 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eb4:	233f      	movs	r3, #63	; 0x3f
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	781a      	ldrb	r2, [r3, #0]
     eba:	230c      	movs	r3, #12
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	0092      	lsls	r2, r2, #2
     ec0:	58d3      	ldr	r3, [r2, r3]
     ec2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec6:	2b00      	cmp	r3, #0
     ec8:	d109      	bne.n	ede <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ecc:	233f      	movs	r3, #63	; 0x3f
     ece:	18fb      	adds	r3, r7, r3
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	1c10      	adds	r0, r2, #0
     ed4:	1c19      	adds	r1, r3, #0
     ed6:	4b6f      	ldr	r3, [pc, #444]	; (1094 <_spi_check_config+0x228>)
     ed8:	4798      	blx	r3
     eda:	1c03      	adds	r3, r0, #0
     edc:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee0:	3301      	adds	r3, #1
     ee2:	d100      	bne.n	ee6 <_spi_check_config+0x7a>
			continue;
     ee4:	e010      	b.n	f08 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
     ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee8:	041b      	lsls	r3, r3, #16
     eea:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eee:	0c1b      	lsrs	r3, r3, #16
     ef0:	b2db      	uxtb	r3, r3
     ef2:	1c18      	adds	r0, r3, #0
     ef4:	4b68      	ldr	r3, [pc, #416]	; (1098 <_spi_check_config+0x22c>)
     ef6:	4798      	blx	r3
     ef8:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     efa:	429c      	cmp	r4, r3
     efc:	d004      	beq.n	f08 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	2200      	movs	r2, #0
     f02:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     f04:	231c      	movs	r3, #28
     f06:	e0c0      	b.n	108a <_spi_check_config+0x21e>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f08:	233f      	movs	r3, #63	; 0x3f
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	781a      	ldrb	r2, [r3, #0]
     f0e:	233f      	movs	r3, #63	; 0x3f
     f10:	18fb      	adds	r3, r7, r3
     f12:	3201      	adds	r2, #1
     f14:	701a      	strb	r2, [r3, #0]
     f16:	233f      	movs	r3, #63	; 0x3f
     f18:	18fb      	adds	r3, r7, r3
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	2b03      	cmp	r3, #3
     f1e:	d9c9      	bls.n	eb4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     f20:	2013      	movs	r0, #19
     f22:	4b5e      	ldr	r3, [pc, #376]	; (109c <_spi_check_config+0x230>)
     f24:	4798      	blx	r3
     f26:	1c03      	adds	r3, r0, #0
     f28:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     f2a:	2300      	movs	r3, #0
     f2c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     f2e:	2300      	movs	r3, #0
     f30:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
     f32:	2300      	movs	r3, #0
     f34:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f36:	683b      	ldr	r3, [r7, #0]
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	2b01      	cmp	r3, #1
     f3c:	d123      	bne.n	f86 <_spi_check_config+0x11a>
		enum status_code error_code = _sercom_get_sync_baud_val(
     f3e:	683b      	ldr	r3, [r7, #0]
     f40:	6999      	ldr	r1, [r3, #24]
     f42:	231f      	movs	r3, #31
     f44:	18fc      	adds	r4, r7, r3
     f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f48:	230a      	movs	r3, #10
     f4a:	18fb      	adds	r3, r7, r3
     f4c:	1c08      	adds	r0, r1, #0
     f4e:	1c11      	adds	r1, r2, #0
     f50:	1c1a      	adds	r2, r3, #0
     f52:	4b53      	ldr	r3, [pc, #332]	; (10a0 <_spi_check_config+0x234>)
     f54:	4798      	blx	r3
     f56:	1c03      	adds	r3, r0, #0
     f58:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     f5a:	231f      	movs	r3, #31
     f5c:	18fb      	adds	r3, r7, r3
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b00      	cmp	r3, #0
     f62:	d001      	beq.n	f68 <_spi_check_config+0xfc>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     f64:	2317      	movs	r3, #23
     f66:	e090      	b.n	108a <_spi_check_config+0x21e>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f6a:	7b1b      	ldrb	r3, [r3, #12]
     f6c:	b2da      	uxtb	r2, r3
     f6e:	230a      	movs	r3, #10
     f70:	18fb      	adds	r3, r7, r3
     f72:	881b      	ldrh	r3, [r3, #0]
     f74:	b2db      	uxtb	r3, r3
     f76:	429a      	cmp	r2, r3
     f78:	d001      	beq.n	f7e <_spi_check_config+0x112>
			return STATUS_ERR_DENIED;
     f7a:	231c      	movs	r3, #28
     f7c:	e085      	b.n	108a <_spi_check_config+0x21e>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f80:	220c      	movs	r2, #12
     f82:	4313      	orrs	r3, r2
     f84:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     f86:	683b      	ldr	r3, [r7, #0]
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d129      	bne.n	fe2 <_spi_check_config+0x176>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     f8e:	683b      	ldr	r3, [r7, #0]
     f90:	699b      	ldr	r3, [r3, #24]
     f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f94:	4313      	orrs	r3, r2
     f96:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	8b9b      	ldrh	r3, [r3, #28]
     f9c:	1c1a      	adds	r2, r3, #0
     f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa0:	4313      	orrs	r3, r2
     fa2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fa4:	683b      	ldr	r3, [r7, #0]
     fa6:	7f9b      	ldrb	r3, [r3, #30]
     fa8:	1c1a      	adds	r2, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     faa:	683b      	ldr	r3, [r7, #0]
     fac:	7fdb      	ldrb	r3, [r3, #31]
     fae:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fb0:	4313      	orrs	r3, r2
     fb2:	1c1a      	adds	r2, r3, #0
     fb4:	6a3b      	ldr	r3, [r7, #32]
     fb6:	4313      	orrs	r3, r2
     fb8:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fbc:	681a      	ldr	r2, [r3, #0]
     fbe:	6a3b      	ldr	r3, [r7, #32]
     fc0:	429a      	cmp	r2, r3
     fc2:	d001      	beq.n	fc8 <_spi_check_config+0x15c>
			return STATUS_ERR_DENIED;
     fc4:	231c      	movs	r3, #28
     fc6:	e060      	b.n	108a <_spi_check_config+0x21e>
		}

		if (config->mode_specific.slave.preload_enable) {
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	2220      	movs	r2, #32
     fcc:	5c9b      	ldrb	r3, [r3, r2]
     fce:	2b00      	cmp	r3, #0
     fd0:	d003      	beq.n	fda <_spi_check_config+0x16e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fd4:	2240      	movs	r2, #64	; 0x40
     fd6:	4313      	orrs	r3, r2
     fd8:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fdc:	2208      	movs	r2, #8
     fde:	4313      	orrs	r3, r2
     fe0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     fe8:	4313      	orrs	r3, r2
     fea:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	689b      	ldr	r3, [r3, #8]
     ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ff2:	4313      	orrs	r3, r2
     ff4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ffc:	4313      	orrs	r3, r2
     ffe:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1000:	683b      	ldr	r3, [r7, #0]
    1002:	7c1b      	ldrb	r3, [r3, #16]
    1004:	1c1a      	adds	r2, r3, #0
    1006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1008:	4313      	orrs	r3, r2
    100a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	7c5b      	ldrb	r3, [r3, #17]
    1010:	2b00      	cmp	r3, #0
    1012:	d003      	beq.n	101c <_spi_check_config+0x1b0>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1016:	2280      	movs	r2, #128	; 0x80
    1018:	4313      	orrs	r3, r2
    101a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    101c:	683b      	ldr	r3, [r7, #0]
    101e:	7c9b      	ldrb	r3, [r3, #18]
    1020:	2b00      	cmp	r3, #0
    1022:	d004      	beq.n	102e <_spi_check_config+0x1c2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	0292      	lsls	r2, r2, #10
    102a:	4313      	orrs	r3, r2
    102c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	7cdb      	ldrb	r3, [r3, #19]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <_spi_check_config+0x1d4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0092      	lsls	r2, r2, #2
    103c:	4313      	orrs	r3, r2
    103e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	7d1b      	ldrb	r3, [r3, #20]
    1044:	2b00      	cmp	r3, #0
    1046:	d004      	beq.n	1052 <_spi_check_config+0x1e6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104a:	2280      	movs	r2, #128	; 0x80
    104c:	0192      	lsls	r2, r2, #6
    104e:	4313      	orrs	r3, r2
    1050:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1054:	2202      	movs	r2, #2
    1056:	4313      	orrs	r3, r2
    1058:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    105c:	681a      	ldr	r2, [r3, #0]
    105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1060:	429a      	cmp	r2, r3
    1062:	d10e      	bne.n	1082 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
    1064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1066:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    106a:	429a      	cmp	r2, r3
    106c:	d109      	bne.n	1082 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	781a      	ldrb	r2, [r3, #0]
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	7c1a      	ldrb	r2, [r3, #16]
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    107e:	2300      	movs	r3, #0
    1080:	e003      	b.n	108a <_spi_check_config+0x21e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	2200      	movs	r2, #0
    1086:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1088:	231c      	movs	r3, #28
}
    108a:	1c18      	adds	r0, r3, #0
    108c:	46bd      	mov	sp, r7
    108e:	b011      	add	sp, #68	; 0x44
    1090:	bd90      	pop	{r4, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000006e1 	.word	0x000006e1
    1098:	00000971 	.word	0x00000971
    109c:	00004f61 	.word	0x00004f61
    10a0:	000005d9 	.word	0x000005d9

000010a4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b08a      	sub	sp, #40	; 0x28
    10a8:	af00      	add	r7, sp, #0
    10aa:	60f8      	str	r0, [r7, #12]
    10ac:	60b9      	str	r1, [r7, #8]
    10ae:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	68ba      	ldr	r2, [r7, #8]
    10b4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	2202      	movs	r2, #2
    10c2:	4013      	ands	r3, r2
    10c4:	d007      	beq.n	10d6 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    10c6:	68fa      	ldr	r2, [r7, #12]
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	1c10      	adds	r0, r2, #0
    10cc:	1c19      	adds	r1, r3, #0
    10ce:	4b2f      	ldr	r3, [pc, #188]	; (118c <spi_init+0xe8>)
    10d0:	4798      	blx	r3
    10d2:	1c03      	adds	r3, r0, #0
    10d4:	e055      	b.n	1182 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    10d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	2201      	movs	r2, #1
    10dc:	4013      	ands	r3, r2
    10de:	d001      	beq.n	10e4 <spi_init+0x40>
		return STATUS_BUSY;
    10e0:	2305      	movs	r3, #5
    10e2:	e04e      	b.n	1182 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	1c18      	adds	r0, r3, #0
    10ea:	4b29      	ldr	r3, [pc, #164]	; (1190 <spi_init+0xec>)
    10ec:	4798      	blx	r3
    10ee:	1c03      	adds	r3, r0, #0
    10f0:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10f2:	6a3b      	ldr	r3, [r7, #32]
    10f4:	3302      	adds	r3, #2
    10f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f8:	6a3b      	ldr	r3, [r7, #32]
    10fa:	3314      	adds	r3, #20
    10fc:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10fe:	69fb      	ldr	r3, [r7, #28]
    1100:	2201      	movs	r2, #1
    1102:	409a      	lsls	r2, r3
    1104:	1c13      	adds	r3, r2, #0
    1106:	2002      	movs	r0, #2
    1108:	1c19      	adds	r1, r3, #0
    110a:	4b22      	ldr	r3, [pc, #136]	; (1194 <spi_init+0xf0>)
    110c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    110e:	2314      	movs	r3, #20
    1110:	18fb      	adds	r3, r7, r3
    1112:	1c18      	adds	r0, r3, #0
    1114:	4b20      	ldr	r3, [pc, #128]	; (1198 <spi_init+0xf4>)
    1116:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	2224      	movs	r2, #36	; 0x24
    111c:	5c9a      	ldrb	r2, [r3, r2]
    111e:	2314      	movs	r3, #20
    1120:	18fb      	adds	r3, r7, r3
    1122:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1124:	69bb      	ldr	r3, [r7, #24]
    1126:	b2da      	uxtb	r2, r3
    1128:	2314      	movs	r3, #20
    112a:	18fb      	adds	r3, r7, r3
    112c:	1c10      	adds	r0, r2, #0
    112e:	1c19      	adds	r1, r3, #0
    1130:	4b1a      	ldr	r3, [pc, #104]	; (119c <spi_init+0xf8>)
    1132:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1134:	69bb      	ldr	r3, [r7, #24]
    1136:	b2db      	uxtb	r3, r3
    1138:	1c18      	adds	r0, r3, #0
    113a:	4b19      	ldr	r3, [pc, #100]	; (11a0 <spi_init+0xfc>)
    113c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	2224      	movs	r2, #36	; 0x24
    1142:	5c9b      	ldrb	r3, [r3, r2]
    1144:	1c18      	adds	r0, r3, #0
    1146:	2100      	movs	r1, #0
    1148:	4b16      	ldr	r3, [pc, #88]	; (11a4 <spi_init+0x100>)
    114a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	2b01      	cmp	r3, #1
    1152:	d105      	bne.n	1160 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	220c      	movs	r2, #12
    115a:	431a      	orrs	r2, r3
    115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    115e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d105      	bne.n	1174 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	2208      	movs	r2, #8
    116e:	431a      	orrs	r2, r3
    1170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1172:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1174:	68fa      	ldr	r2, [r7, #12]
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	1c10      	adds	r0, r2, #0
    117a:	1c19      	adds	r1, r3, #0
    117c:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <spi_init+0x104>)
    117e:	4798      	blx	r3
    1180:	1c03      	adds	r3, r0, #0
}
    1182:	1c18      	adds	r0, r3, #0
    1184:	46bd      	mov	sp, r7
    1186:	b00a      	add	sp, #40	; 0x28
    1188:	bd80      	pop	{r7, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000e6d 	.word	0x00000e6d
    1190:	0000089d 	.word	0x0000089d
    1194:	00000a75 	.word	0x00000a75
    1198:	00000a61 	.word	0x00000a61
    119c:	00004e3d 	.word	0x00004e3d
    11a0:	00004e81 	.word	0x00004e81
    11a4:	00000655 	.word	0x00000655
    11a8:	00000c19 	.word	0x00000c19

000011ac <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    11ac:	b590      	push	{r4, r7, lr}
    11ae:	b087      	sub	sp, #28
    11b0:	af00      	add	r7, sp, #0
    11b2:	60f8      	str	r0, [r7, #12]
    11b4:	607a      	str	r2, [r7, #4]
    11b6:	230a      	movs	r3, #10
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	1c0a      	adds	r2, r1, #0
    11bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	79db      	ldrb	r3, [r3, #7]
    11c2:	2201      	movs	r2, #1
    11c4:	4053      	eors	r3, r2
    11c6:	b2db      	uxtb	r3, r3
    11c8:	2b00      	cmp	r3, #0
    11ca:	d001      	beq.n	11d0 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    11cc:	231c      	movs	r3, #28
    11ce:	e07a      	b.n	12c6 <spi_transceive_wait+0x11a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    11d0:	2315      	movs	r3, #21
    11d2:	18fb      	adds	r3, r7, r3
    11d4:	2200      	movs	r2, #0
    11d6:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	795b      	ldrb	r3, [r3, #5]
    11dc:	2b00      	cmp	r3, #0
    11de:	d120      	bne.n	1222 <spi_transceive_wait+0x76>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    11e0:	2316      	movs	r3, #22
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	2200      	movs	r2, #0
    11e6:	801a      	strh	r2, [r3, #0]
    11e8:	e015      	b.n	1216 <spi_transceive_wait+0x6a>
			if (spi_is_ready_to_write(module)) {
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	1c18      	adds	r0, r3, #0
    11ee:	4b38      	ldr	r3, [pc, #224]	; (12d0 <spi_transceive_wait+0x124>)
    11f0:	4798      	blx	r3
    11f2:	1e03      	subs	r3, r0, #0
    11f4:	d000      	beq.n	11f8 <spi_transceive_wait+0x4c>
				break;
    11f6:	e014      	b.n	1222 <spi_transceive_wait+0x76>
			} else if (j == SPI_TIMEOUT) {
    11f8:	2316      	movs	r3, #22
    11fa:	18fb      	adds	r3, r7, r3
    11fc:	881b      	ldrh	r3, [r3, #0]
    11fe:	4a35      	ldr	r2, [pc, #212]	; (12d4 <spi_transceive_wait+0x128>)
    1200:	4293      	cmp	r3, r2
    1202:	d101      	bne.n	1208 <spi_transceive_wait+0x5c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1204:	2312      	movs	r3, #18
    1206:	e05e      	b.n	12c6 <spi_transceive_wait+0x11a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1208:	2316      	movs	r3, #22
    120a:	18fb      	adds	r3, r7, r3
    120c:	881a      	ldrh	r2, [r3, #0]
    120e:	2316      	movs	r3, #22
    1210:	18fb      	adds	r3, r7, r3
    1212:	3201      	adds	r2, #1
    1214:	801a      	strh	r2, [r3, #0]
    1216:	2316      	movs	r3, #22
    1218:	18fb      	adds	r3, r7, r3
    121a:	881b      	ldrh	r3, [r3, #0]
    121c:	4a2d      	ldr	r2, [pc, #180]	; (12d4 <spi_transceive_wait+0x128>)
    121e:	4293      	cmp	r3, r2
    1220:	d9e3      	bls.n	11ea <spi_transceive_wait+0x3e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	1c18      	adds	r0, r3, #0
    1228:	4b29      	ldr	r3, [pc, #164]	; (12d0 <spi_transceive_wait+0x124>)
    122a:	4798      	blx	r3
    122c:	1c03      	adds	r3, r0, #0
    122e:	1c1a      	adds	r2, r3, #0
    1230:	2301      	movs	r3, #1
    1232:	4053      	eors	r3, r2
    1234:	b2db      	uxtb	r3, r3
    1236:	2b00      	cmp	r3, #0
    1238:	d1f4      	bne.n	1224 <spi_transceive_wait+0x78>
	}

	/* Write data */
	spi_write(module, tx_data);
    123a:	68fa      	ldr	r2, [r7, #12]
    123c:	230a      	movs	r3, #10
    123e:	18fb      	adds	r3, r7, r3
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	1c10      	adds	r0, r2, #0
    1244:	1c19      	adds	r1, r3, #0
    1246:	4b24      	ldr	r3, [pc, #144]	; (12d8 <spi_transceive_wait+0x12c>)
    1248:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	795b      	ldrb	r3, [r3, #5]
    124e:	2b00      	cmp	r3, #0
    1250:	d120      	bne.n	1294 <spi_transceive_wait+0xe8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1252:	2316      	movs	r3, #22
    1254:	18fb      	adds	r3, r7, r3
    1256:	2200      	movs	r2, #0
    1258:	801a      	strh	r2, [r3, #0]
    125a:	e015      	b.n	1288 <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    125c:	68fb      	ldr	r3, [r7, #12]
    125e:	1c18      	adds	r0, r3, #0
    1260:	4b1e      	ldr	r3, [pc, #120]	; (12dc <spi_transceive_wait+0x130>)
    1262:	4798      	blx	r3
    1264:	1e03      	subs	r3, r0, #0
    1266:	d000      	beq.n	126a <spi_transceive_wait+0xbe>
				break;
    1268:	e014      	b.n	1294 <spi_transceive_wait+0xe8>
			} else if (j == SPI_TIMEOUT) {
    126a:	2316      	movs	r3, #22
    126c:	18fb      	adds	r3, r7, r3
    126e:	881b      	ldrh	r3, [r3, #0]
    1270:	4a18      	ldr	r2, [pc, #96]	; (12d4 <spi_transceive_wait+0x128>)
    1272:	4293      	cmp	r3, r2
    1274:	d101      	bne.n	127a <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1276:	2312      	movs	r3, #18
    1278:	e025      	b.n	12c6 <spi_transceive_wait+0x11a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    127a:	2316      	movs	r3, #22
    127c:	18fb      	adds	r3, r7, r3
    127e:	881a      	ldrh	r2, [r3, #0]
    1280:	2316      	movs	r3, #22
    1282:	18fb      	adds	r3, r7, r3
    1284:	3201      	adds	r2, #1
    1286:	801a      	strh	r2, [r3, #0]
    1288:	2316      	movs	r3, #22
    128a:	18fb      	adds	r3, r7, r3
    128c:	881b      	ldrh	r3, [r3, #0]
    128e:	4a11      	ldr	r2, [pc, #68]	; (12d4 <spi_transceive_wait+0x128>)
    1290:	4293      	cmp	r3, r2
    1292:	d9e3      	bls.n	125c <spi_transceive_wait+0xb0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1294:	46c0      	nop			; (mov r8, r8)
    1296:	68fb      	ldr	r3, [r7, #12]
    1298:	1c18      	adds	r0, r3, #0
    129a:	4b10      	ldr	r3, [pc, #64]	; (12dc <spi_transceive_wait+0x130>)
    129c:	4798      	blx	r3
    129e:	1c03      	adds	r3, r0, #0
    12a0:	1c1a      	adds	r2, r3, #0
    12a2:	2301      	movs	r3, #1
    12a4:	4053      	eors	r3, r2
    12a6:	b2db      	uxtb	r3, r3
    12a8:	2b00      	cmp	r3, #0
    12aa:	d1f4      	bne.n	1296 <spi_transceive_wait+0xea>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    12ac:	2315      	movs	r3, #21
    12ae:	18fc      	adds	r4, r7, r3
    12b0:	68fa      	ldr	r2, [r7, #12]
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	1c10      	adds	r0, r2, #0
    12b6:	1c19      	adds	r1, r3, #0
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <spi_transceive_wait+0x134>)
    12ba:	4798      	blx	r3
    12bc:	1c03      	adds	r3, r0, #0
    12be:	7023      	strb	r3, [r4, #0]

	return retval;
    12c0:	2315      	movs	r3, #21
    12c2:	18fb      	adds	r3, r7, r3
    12c4:	781b      	ldrb	r3, [r3, #0]
}
    12c6:	1c18      	adds	r0, r3, #0
    12c8:	46bd      	mov	sp, r7
    12ca:	b007      	add	sp, #28
    12cc:	bd90      	pop	{r4, r7, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	00000af1 	.word	0x00000af1
    12d4:	00002710 	.word	0x00002710
    12d8:	00000b41 	.word	0x00000b41
    12dc:	00000b19 	.word	0x00000b19
    12e0:	00000b89 	.word	0x00000b89

000012e4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b086      	sub	sp, #24
    12e8:	af00      	add	r7, sp, #0
    12ea:	60f8      	str	r0, [r7, #12]
    12ec:	60b9      	str	r1, [r7, #8]
    12ee:	1dfb      	adds	r3, r7, #7
    12f0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12f2:	68fb      	ldr	r3, [r7, #12]
    12f4:	795b      	ldrb	r3, [r3, #5]
    12f6:	2b01      	cmp	r3, #1
    12f8:	d001      	beq.n	12fe <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    12fa:	2315      	movs	r3, #21
    12fc:	e05c      	b.n	13b8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	7a1b      	ldrb	r3, [r3, #8]
    1302:	2201      	movs	r2, #1
    1304:	4053      	eors	r3, r2
    1306:	b2db      	uxtb	r3, r3
    1308:	2b00      	cmp	r3, #0
    130a:	d054      	beq.n	13b6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    130c:	1dfb      	adds	r3, r7, #7
    130e:	781b      	ldrb	r3, [r3, #0]
    1310:	2b00      	cmp	r3, #0
    1312:	d04a      	beq.n	13aa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1314:	68bb      	ldr	r3, [r7, #8]
    1316:	785b      	ldrb	r3, [r3, #1]
    1318:	2b00      	cmp	r3, #0
    131a:	d03f      	beq.n	139c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	1c18      	adds	r0, r3, #0
    1320:	4b27      	ldr	r3, [pc, #156]	; (13c0 <spi_select_slave+0xdc>)
    1322:	4798      	blx	r3
    1324:	1c03      	adds	r3, r0, #0
    1326:	1c1a      	adds	r2, r3, #0
    1328:	2301      	movs	r3, #1
    132a:	4053      	eors	r3, r2
    132c:	b2db      	uxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d007      	beq.n	1342 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1332:	68bb      	ldr	r3, [r7, #8]
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	1c18      	adds	r0, r3, #0
    1338:	2101      	movs	r1, #1
    133a:	4b22      	ldr	r3, [pc, #136]	; (13c4 <spi_select_slave+0xe0>)
    133c:	4798      	blx	r3
					return STATUS_BUSY;
    133e:	2305      	movs	r3, #5
    1340:	e03a      	b.n	13b8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1342:	68bb      	ldr	r3, [r7, #8]
    1344:	781b      	ldrb	r3, [r3, #0]
    1346:	1c18      	adds	r0, r3, #0
    1348:	2100      	movs	r1, #0
    134a:	4b1e      	ldr	r3, [pc, #120]	; (13c4 <spi_select_slave+0xe0>)
    134c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    134e:	68bb      	ldr	r3, [r7, #8]
    1350:	789b      	ldrb	r3, [r3, #2]
    1352:	b29b      	uxth	r3, r3
    1354:	68fa      	ldr	r2, [r7, #12]
    1356:	1c10      	adds	r0, r2, #0
    1358:	1c19      	adds	r1, r3, #0
    135a:	4b1b      	ldr	r3, [pc, #108]	; (13c8 <spi_select_slave+0xe4>)
    135c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	79db      	ldrb	r3, [r3, #7]
    1362:	2201      	movs	r2, #1
    1364:	4053      	eors	r3, r2
    1366:	b2db      	uxtb	r3, r3
    1368:	2b00      	cmp	r3, #0
    136a:	d024      	beq.n	13b6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    136c:	46c0      	nop			; (mov r8, r8)
    136e:	68fb      	ldr	r3, [r7, #12]
    1370:	1c18      	adds	r0, r3, #0
    1372:	4b16      	ldr	r3, [pc, #88]	; (13cc <spi_select_slave+0xe8>)
    1374:	4798      	blx	r3
    1376:	1c03      	adds	r3, r0, #0
    1378:	1c1a      	adds	r2, r3, #0
    137a:	2301      	movs	r3, #1
    137c:	4053      	eors	r3, r2
    137e:	b2db      	uxtb	r3, r3
    1380:	2b00      	cmp	r3, #0
    1382:	d1f4      	bne.n	136e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1384:	2316      	movs	r3, #22
    1386:	18fb      	adds	r3, r7, r3
    1388:	2200      	movs	r2, #0
    138a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    138c:	68fa      	ldr	r2, [r7, #12]
    138e:	2316      	movs	r3, #22
    1390:	18fb      	adds	r3, r7, r3
    1392:	1c10      	adds	r0, r2, #0
    1394:	1c19      	adds	r1, r3, #0
    1396:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <spi_select_slave+0xec>)
    1398:	4798      	blx	r3
    139a:	e00c      	b.n	13b6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    139c:	68bb      	ldr	r3, [r7, #8]
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	1c18      	adds	r0, r3, #0
    13a2:	2100      	movs	r1, #0
    13a4:	4b07      	ldr	r3, [pc, #28]	; (13c4 <spi_select_slave+0xe0>)
    13a6:	4798      	blx	r3
    13a8:	e005      	b.n	13b6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    13aa:	68bb      	ldr	r3, [r7, #8]
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	1c18      	adds	r0, r3, #0
    13b0:	2101      	movs	r1, #1
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <spi_select_slave+0xe0>)
    13b4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    13b6:	2300      	movs	r3, #0
}
    13b8:	1c18      	adds	r0, r3, #0
    13ba:	46bd      	mov	sp, r7
    13bc:	b006      	add	sp, #24
    13be:	bd80      	pop	{r7, pc}
    13c0:	00000af1 	.word	0x00000af1
    13c4:	00000a11 	.word	0x00000a11
    13c8:	00000b41 	.word	0x00000b41
    13cc:	00000b19 	.word	0x00000b19
    13d0:	00000b89 	.word	0x00000b89

000013d4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	b084      	sub	sp, #16
    13d8:	af00      	add	r7, sp, #0
    13da:	1c02      	adds	r2, r0, #0
    13dc:	1dfb      	adds	r3, r7, #7
    13de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    13e0:	230f      	movs	r3, #15
    13e2:	18fb      	adds	r3, r7, r3
    13e4:	1dfa      	adds	r2, r7, #7
    13e6:	7812      	ldrb	r2, [r2, #0]
    13e8:	09d2      	lsrs	r2, r2, #7
    13ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13ec:	230e      	movs	r3, #14
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	1dfa      	adds	r2, r7, #7
    13f2:	7812      	ldrb	r2, [r2, #0]
    13f4:	0952      	lsrs	r2, r2, #5
    13f6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13f8:	4b0d      	ldr	r3, [pc, #52]	; (1430 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13fa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    13fc:	230f      	movs	r3, #15
    13fe:	18fb      	adds	r3, r7, r3
    1400:	781b      	ldrb	r3, [r3, #0]
    1402:	2b00      	cmp	r3, #0
    1404:	d10f      	bne.n	1426 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1406:	230f      	movs	r3, #15
    1408:	18fb      	adds	r3, r7, r3
    140a:	781b      	ldrb	r3, [r3, #0]
    140c:	009b      	lsls	r3, r3, #2
    140e:	2210      	movs	r2, #16
    1410:	4694      	mov	ip, r2
    1412:	44bc      	add	ip, r7
    1414:	4463      	add	r3, ip
    1416:	3b08      	subs	r3, #8
    1418:	681a      	ldr	r2, [r3, #0]
    141a:	230e      	movs	r3, #14
    141c:	18fb      	adds	r3, r7, r3
    141e:	781b      	ldrb	r3, [r3, #0]
    1420:	01db      	lsls	r3, r3, #7
    1422:	18d3      	adds	r3, r2, r3
    1424:	e000      	b.n	1428 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1426:	2300      	movs	r3, #0
	}
}
    1428:	1c18      	adds	r0, r3, #0
    142a:	46bd      	mov	sp, r7
    142c:	b004      	add	sp, #16
    142e:	bd80      	pop	{r7, pc}
    1430:	41004400 	.word	0x41004400

00001434 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1434:	b580      	push	{r7, lr}
    1436:	b082      	sub	sp, #8
    1438:	af00      	add	r7, sp, #0
    143a:	1c02      	adds	r2, r0, #0
    143c:	1dfb      	adds	r3, r7, #7
    143e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1440:	1dfb      	adds	r3, r7, #7
    1442:	781b      	ldrb	r3, [r3, #0]
    1444:	1c18      	adds	r0, r3, #0
    1446:	4b03      	ldr	r3, [pc, #12]	; (1454 <port_get_group_from_gpio_pin+0x20>)
    1448:	4798      	blx	r3
    144a:	1c03      	adds	r3, r0, #0
}
    144c:	1c18      	adds	r0, r3, #0
    144e:	46bd      	mov	sp, r7
    1450:	b002      	add	sp, #8
    1452:	bd80      	pop	{r7, pc}
    1454:	000013d5 	.word	0x000013d5

00001458 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1458:	b580      	push	{r7, lr}
    145a:	b082      	sub	sp, #8
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	2200      	movs	r2, #0
    1464:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	2201      	movs	r2, #1
    146a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	2200      	movs	r2, #0
    1470:	709a      	strb	r2, [r3, #2]
}
    1472:	46bd      	mov	sp, r7
    1474:	b002      	add	sp, #8
    1476:	bd80      	pop	{r7, pc}

00001478 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1478:	b580      	push	{r7, lr}
    147a:	b084      	sub	sp, #16
    147c:	af00      	add	r7, sp, #0
    147e:	1c02      	adds	r2, r0, #0
    1480:	1dfb      	adds	r3, r7, #7
    1482:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1484:	1dfb      	adds	r3, r7, #7
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	1c18      	adds	r0, r3, #0
    148a:	4b0b      	ldr	r3, [pc, #44]	; (14b8 <port_pin_get_input_level+0x40>)
    148c:	4798      	blx	r3
    148e:	1c03      	adds	r3, r0, #0
    1490:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1492:	1dfb      	adds	r3, r7, #7
    1494:	781b      	ldrb	r3, [r3, #0]
    1496:	221f      	movs	r2, #31
    1498:	4013      	ands	r3, r2
    149a:	2201      	movs	r2, #1
    149c:	409a      	lsls	r2, r3
    149e:	1c13      	adds	r3, r2, #0
    14a0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    14a2:	68fb      	ldr	r3, [r7, #12]
    14a4:	6a1b      	ldr	r3, [r3, #32]
    14a6:	68ba      	ldr	r2, [r7, #8]
    14a8:	4013      	ands	r3, r2
    14aa:	1e5a      	subs	r2, r3, #1
    14ac:	4193      	sbcs	r3, r2
    14ae:	b2db      	uxtb	r3, r3
}
    14b0:	1c18      	adds	r0, r3, #0
    14b2:	46bd      	mov	sp, r7
    14b4:	b004      	add	sp, #16
    14b6:	bd80      	pop	{r7, pc}
    14b8:	00001435 	.word	0x00001435

000014bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	1c02      	adds	r2, r0, #0
    14c4:	1dfb      	adds	r3, r7, #7
    14c6:	701a      	strb	r2, [r3, #0]
    14c8:	1dbb      	adds	r3, r7, #6
    14ca:	1c0a      	adds	r2, r1, #0
    14cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    14ce:	1dfb      	adds	r3, r7, #7
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	1c18      	adds	r0, r3, #0
    14d4:	4b0c      	ldr	r3, [pc, #48]	; (1508 <port_pin_set_output_level+0x4c>)
    14d6:	4798      	blx	r3
    14d8:	1c03      	adds	r3, r0, #0
    14da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14dc:	1dfb      	adds	r3, r7, #7
    14de:	781b      	ldrb	r3, [r3, #0]
    14e0:	221f      	movs	r2, #31
    14e2:	4013      	ands	r3, r2
    14e4:	2201      	movs	r2, #1
    14e6:	409a      	lsls	r2, r3
    14e8:	1c13      	adds	r3, r2, #0
    14ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    14ec:	1dbb      	adds	r3, r7, #6
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	2b00      	cmp	r3, #0
    14f2:	d003      	beq.n	14fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	68ba      	ldr	r2, [r7, #8]
    14f8:	619a      	str	r2, [r3, #24]
    14fa:	e002      	b.n	1502 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	68ba      	ldr	r2, [r7, #8]
    1500:	615a      	str	r2, [r3, #20]
	}
}
    1502:	46bd      	mov	sp, r7
    1504:	b004      	add	sp, #16
    1506:	bd80      	pop	{r7, pc}
    1508:	00001435 	.word	0x00001435

0000150c <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    150c:	b580      	push	{r7, lr}
    150e:	b084      	sub	sp, #16
    1510:	af00      	add	r7, sp, #0
    1512:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	22a0      	movs	r2, #160	; 0xa0
    1518:	0112      	lsls	r2, r2, #4
    151a:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	2201      	movs	r2, #1
    1520:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	2200      	movs	r2, #0
    1526:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	2200      	movs	r2, #0
    152c:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    152e:	230f      	movs	r3, #15
    1530:	18fb      	adds	r3, r7, r3
    1532:	2200      	movs	r2, #0
    1534:	701a      	strb	r2, [r3, #0]
    1536:	e00e      	b.n	1556 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    1538:	230f      	movs	r3, #15
    153a:	18fb      	adds	r3, r7, r3
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	3202      	adds	r2, #2
    1542:	0092      	lsls	r2, r2, #2
    1544:	2100      	movs	r1, #0
    1546:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1548:	230f      	movs	r3, #15
    154a:	18fb      	adds	r3, r7, r3
    154c:	781a      	ldrb	r2, [r3, #0]
    154e:	230f      	movs	r3, #15
    1550:	18fb      	adds	r3, r7, r3
    1552:	3201      	adds	r2, #1
    1554:	701a      	strb	r2, [r3, #0]
    1556:	230f      	movs	r3, #15
    1558:	18fb      	adds	r3, r7, r3
    155a:	781b      	ldrb	r3, [r3, #0]
    155c:	2b01      	cmp	r3, #1
    155e:	d9eb      	bls.n	1538 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    1560:	46bd      	mov	sp, r7
    1562:	b004      	add	sp, #16
    1564:	bd80      	pop	{r7, pc}
    1566:	46c0      	nop			; (mov r8, r8)

00001568 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1568:	b580      	push	{r7, lr}
    156a:	b084      	sub	sp, #16
    156c:	af00      	add	r7, sp, #0
    156e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	69db      	ldr	r3, [r3, #28]
    157a:	1e5a      	subs	r2, r3, #1
    157c:	4193      	sbcs	r3, r2
    157e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1580:	1c18      	adds	r0, r3, #0
    1582:	46bd      	mov	sp, r7
    1584:	b004      	add	sp, #16
    1586:	bd80      	pop	{r7, pc}

00001588 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1588:	b580      	push	{r7, lr}
    158a:	b082      	sub	sp, #8
    158c:	af00      	add	r7, sp, #0
    158e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	2201      	movs	r2, #1
    1594:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	2200      	movs	r2, #0
    159a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	2200      	movs	r2, #0
    15a0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	22c0      	movs	r2, #192	; 0xc0
    15a6:	0392      	lsls	r2, r2, #14
    15a8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2200      	movs	r2, #0
    15ae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	2200      	movs	r2, #0
    15b4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2201      	movs	r2, #1
    15ba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	2201      	movs	r2, #1
    15c0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	2200      	movs	r2, #0
    15c6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2224      	movs	r2, #36	; 0x24
    15cc:	2100      	movs	r1, #0
    15ce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	3318      	adds	r3, #24
    15d4:	1c18      	adds	r0, r3, #0
    15d6:	2100      	movs	r1, #0
    15d8:	220c      	movs	r2, #12
    15da:	4b0a      	ldr	r3, [pc, #40]	; (1604 <spi_get_config_defaults+0x7c>)
    15dc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	4a09      	ldr	r2, [pc, #36]	; (1608 <spi_get_config_defaults+0x80>)
    15e2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	2200      	movs	r2, #0
    15e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	2200      	movs	r2, #0
    15ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	2200      	movs	r2, #0
    15f4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	2200      	movs	r2, #0
    15fa:	635a      	str	r2, [r3, #52]	; 0x34

};
    15fc:	46bd      	mov	sp, r7
    15fe:	b002      	add	sp, #8
    1600:	bd80      	pop	{r7, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00008e33 	.word	0x00008e33
    1608:	000186a0 	.word	0x000186a0

0000160c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    160c:	b580      	push	{r7, lr}
    160e:	b082      	sub	sp, #8
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	220a      	movs	r2, #10
    1618:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	2200      	movs	r2, #0
    161e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	2200      	movs	r2, #0
    1624:	709a      	strb	r2, [r3, #2]
}
    1626:	46bd      	mov	sp, r7
    1628:	b002      	add	sp, #8
    162a:	bd80      	pop	{r7, pc}

0000162c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    162c:	b580      	push	{r7, lr}
    162e:	b084      	sub	sp, #16
    1630:	af00      	add	r7, sp, #0
    1632:	6078      	str	r0, [r7, #4]
    1634:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1636:	683b      	ldr	r3, [r7, #0]
    1638:	781a      	ldrb	r2, [r3, #0]
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    163e:	683b      	ldr	r3, [r7, #0]
    1640:	785a      	ldrb	r2, [r3, #1]
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1646:	683b      	ldr	r3, [r7, #0]
    1648:	789a      	ldrb	r2, [r3, #2]
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    164e:	230c      	movs	r3, #12
    1650:	18fb      	adds	r3, r7, r3
    1652:	1c18      	adds	r0, r3, #0
    1654:	4b0b      	ldr	r3, [pc, #44]	; (1684 <spi_attach_slave+0x58>)
    1656:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1658:	230c      	movs	r3, #12
    165a:	18fb      	adds	r3, r7, r3
    165c:	2201      	movs	r2, #1
    165e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	781a      	ldrb	r2, [r3, #0]
    1664:	230c      	movs	r3, #12
    1666:	18fb      	adds	r3, r7, r3
    1668:	1c10      	adds	r0, r2, #0
    166a:	1c19      	adds	r1, r3, #0
    166c:	4b06      	ldr	r3, [pc, #24]	; (1688 <spi_attach_slave+0x5c>)
    166e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	1c18      	adds	r0, r3, #0
    1676:	2101      	movs	r1, #1
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <spi_attach_slave+0x60>)
    167a:	4798      	blx	r3
}
    167c:	46bd      	mov	sp, r7
    167e:	b004      	add	sp, #16
    1680:	bd80      	pop	{r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	00001459 	.word	0x00001459
    1688:	0000438d 	.word	0x0000438d
    168c:	000014bd 	.word	0x000014bd

00001690 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1690:	b580      	push	{r7, lr}
    1692:	b084      	sub	sp, #16
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	1c18      	adds	r0, r3, #0
    16a4:	4b06      	ldr	r3, [pc, #24]	; (16c0 <spi_enable+0x30>)
    16a6:	4798      	blx	r3
    16a8:	1e03      	subs	r3, r0, #0
    16aa:	d1f9      	bne.n	16a0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16ac:	68fb      	ldr	r3, [r7, #12]
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	2202      	movs	r2, #2
    16b2:	431a      	orrs	r2, r3
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	601a      	str	r2, [r3, #0]
}
    16b8:	46bd      	mov	sp, r7
    16ba:	b004      	add	sp, #16
    16bc:	bd80      	pop	{r7, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	00001569 	.word	0x00001569

000016c4 <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	b082      	sub	sp, #8
    16c8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    16ca:	1d3b      	adds	r3, r7, #4
    16cc:	1c18      	adds	r0, r3, #0
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <configure_port_pins+0x24>)
    16d0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    16d2:	1d3b      	adds	r3, r7, #4
    16d4:	2200      	movs	r2, #0
    16d6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    16d8:	1d3b      	adds	r3, r7, #4
    16da:	2003      	movs	r0, #3
    16dc:	1c19      	adds	r1, r3, #0
    16de:	4b03      	ldr	r3, [pc, #12]	; (16ec <configure_port_pins+0x28>)
    16e0:	4798      	blx	r3
}
    16e2:	46bd      	mov	sp, r7
    16e4:	b002      	add	sp, #8
    16e6:	bd80      	pop	{r7, pc}
    16e8:	00001459 	.word	0x00001459
    16ec:	0000438d 	.word	0x0000438d

000016f0 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b084      	sub	sp, #16
    16f4:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    16f6:	1d3b      	adds	r3, r7, #4
    16f8:	1c18      	adds	r0, r3, #0
    16fa:	4b0b      	ldr	r3, [pc, #44]	; (1728 <configure_extint_channel+0x38>)
    16fc:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    16fe:	1d3b      	adds	r3, r7, #4
    1700:	2203      	movs	r2, #3
    1702:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    1704:	1d3b      	adds	r3, r7, #4
    1706:	2200      	movs	r2, #0
    1708:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    170a:	1d3b      	adds	r3, r7, #4
    170c:	2201      	movs	r2, #1
    170e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1710:	1d3b      	adds	r3, r7, #4
    1712:	2201      	movs	r2, #1
    1714:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    1716:	1d3b      	adds	r3, r7, #4
    1718:	2003      	movs	r0, #3
    171a:	1c19      	adds	r1, r3, #0
    171c:	4b03      	ldr	r3, [pc, #12]	; (172c <configure_extint_channel+0x3c>)
    171e:	4798      	blx	r3
}
    1720:	46bd      	mov	sp, r7
    1722:	b004      	add	sp, #16
    1724:	bd80      	pop	{r7, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00004235 	.word	0x00004235
    172c:	00004269 	.word	0x00004269

00001730 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    1730:	b580      	push	{r7, lr}
    1732:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    1734:	4b05      	ldr	r3, [pc, #20]	; (174c <configure_extint_callbacks+0x1c>)
    1736:	1c18      	adds	r0, r3, #0
    1738:	2103      	movs	r1, #3
    173a:	2200      	movs	r2, #0
    173c:	4b04      	ldr	r3, [pc, #16]	; (1750 <configure_extint_callbacks+0x20>)
    173e:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    1740:	2003      	movs	r0, #3
    1742:	2100      	movs	r1, #0
    1744:	4b03      	ldr	r3, [pc, #12]	; (1754 <configure_extint_callbacks+0x24>)
    1746:	4798      	blx	r3
}
    1748:	46bd      	mov	sp, r7
    174a:	bd80      	pop	{r7, pc}
    174c:	0000228d 	.word	0x0000228d
    1750:	00003e3d 	.word	0x00003e3d
    1754:	00003ea1 	.word	0x00003ea1

00001758 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    1758:	b580      	push	{r7, lr}
    175a:	b090      	sub	sp, #64	; 0x40
    175c:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    175e:	1d3b      	adds	r3, r7, #4
    1760:	1c18      	adds	r0, r3, #0
    1762:	4b22      	ldr	r3, [pc, #136]	; (17ec <configure_RFM69_spi+0x94>)
    1764:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    1766:	1d3b      	adds	r3, r7, #4
    1768:	2212      	movs	r2, #18
    176a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    176c:	4a20      	ldr	r2, [pc, #128]	; (17f0 <configure_RFM69_spi+0x98>)
    176e:	1d3b      	adds	r3, r7, #4
    1770:	1c10      	adds	r0, r2, #0
    1772:	1c19      	adds	r1, r3, #0
    1774:	4b1f      	ldr	r3, [pc, #124]	; (17f4 <configure_RFM69_spi+0x9c>)
    1776:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    1778:	2308      	movs	r3, #8
    177a:	18fb      	adds	r3, r7, r3
    177c:	1c18      	adds	r0, r3, #0
    177e:	4b1e      	ldr	r3, [pc, #120]	; (17f8 <configure_RFM69_spi+0xa0>)
    1780:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    1782:	2308      	movs	r3, #8
    1784:	18fb      	adds	r3, r7, r3
    1786:	22c0      	movs	r2, #192	; 0xc0
    1788:	0392      	lsls	r2, r2, #14
    178a:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    178c:	2308      	movs	r3, #8
    178e:	18fb      	adds	r3, r7, r3
    1790:	4a1a      	ldr	r2, [pc, #104]	; (17fc <configure_RFM69_spi+0xa4>)
    1792:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    1794:	2308      	movs	r3, #8
    1796:	18fb      	adds	r3, r7, r3
    1798:	4a19      	ldr	r2, [pc, #100]	; (1800 <configure_RFM69_spi+0xa8>)
    179a:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    179c:	2308      	movs	r3, #8
    179e:	18fb      	adds	r3, r7, r3
    17a0:	2201      	movs	r2, #1
    17a2:	4252      	negs	r2, r2
    17a4:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    17a6:	2308      	movs	r3, #8
    17a8:	18fb      	adds	r3, r7, r3
    17aa:	4a16      	ldr	r2, [pc, #88]	; (1804 <configure_RFM69_spi+0xac>)
    17ac:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    17ae:	2308      	movs	r3, #8
    17b0:	18fb      	adds	r3, r7, r3
    17b2:	2200      	movs	r2, #0
    17b4:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    17b6:	2308      	movs	r3, #8
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	2200      	movs	r2, #0
    17bc:	609a      	str	r2, [r3, #8]
	//config_spi_master.generator_source = GCLK_CLKCTRL_GEN_GCLK1;
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    17be:	4a12      	ldr	r2, [pc, #72]	; (1808 <configure_RFM69_spi+0xb0>)
    17c0:	4912      	ldr	r1, [pc, #72]	; (180c <configure_RFM69_spi+0xb4>)
    17c2:	2308      	movs	r3, #8
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	1c10      	adds	r0, r2, #0
    17c8:	1c1a      	adds	r2, r3, #0
    17ca:	4b11      	ldr	r3, [pc, #68]	; (1810 <configure_RFM69_spi+0xb8>)
    17cc:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    17ce:	4b0e      	ldr	r3, [pc, #56]	; (1808 <configure_RFM69_spi+0xb0>)
    17d0:	1c18      	adds	r0, r3, #0
    17d2:	4b10      	ldr	r3, [pc, #64]	; (1814 <configure_RFM69_spi+0xbc>)
    17d4:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    17d6:	4a0c      	ldr	r2, [pc, #48]	; (1808 <configure_RFM69_spi+0xb0>)
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <configure_RFM69_spi+0x98>)
    17da:	1c10      	adds	r0, r2, #0
    17dc:	1c19      	adds	r1, r3, #0
    17de:	2200      	movs	r2, #0
    17e0:	4b0d      	ldr	r3, [pc, #52]	; (1818 <configure_RFM69_spi+0xc0>)
    17e2:	4798      	blx	r3
}
    17e4:	46bd      	mov	sp, r7
    17e6:	b010      	add	sp, #64	; 0x40
    17e8:	bd80      	pop	{r7, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	0000160d 	.word	0x0000160d
    17f0:	200002b0 	.word	0x200002b0
    17f4:	0000162d 	.word	0x0000162d
    17f8:	00001589 	.word	0x00001589
    17fc:	00100002 	.word	0x00100002
    1800:	00110002 	.word	0x00110002
    1804:	00130002 	.word	0x00130002
    1808:	200002a0 	.word	0x200002a0
    180c:	42000c00 	.word	0x42000c00
    1810:	000010a5 	.word	0x000010a5
    1814:	00001691 	.word	0x00001691
    1818:	000012e5 	.word	0x000012e5

0000181c <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    181c:	b580      	push	{r7, lr}
    181e:	b084      	sub	sp, #16
    1820:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    1822:	1c3b      	adds	r3, r7, #0
    1824:	1c18      	adds	r0, r3, #0
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <configure_rtc_count+0x48>)
    1828:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    182a:	1c3b      	adds	r3, r7, #0
    182c:	2200      	movs	r2, #0
    182e:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1830:	1c3b      	adds	r3, r7, #0
    1832:	2200      	movs	r2, #0
    1834:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    1836:	1c3b      	adds	r3, r7, #0
    1838:	2201      	movs	r2, #1
    183a:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    183c:	4a0a      	ldr	r2, [pc, #40]	; (1868 <configure_rtc_count+0x4c>)
    183e:	490b      	ldr	r1, [pc, #44]	; (186c <configure_rtc_count+0x50>)
    1840:	1c3b      	adds	r3, r7, #0
    1842:	1c10      	adds	r0, r2, #0
    1844:	1c1a      	adds	r2, r3, #0
    1846:	4b0a      	ldr	r3, [pc, #40]	; (1870 <configure_rtc_count+0x54>)
    1848:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    184a:	4b07      	ldr	r3, [pc, #28]	; (1868 <configure_rtc_count+0x4c>)
    184c:	1c18      	adds	r0, r3, #0
    184e:	4b09      	ldr	r3, [pc, #36]	; (1874 <configure_rtc_count+0x58>)
    1850:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <configure_rtc_count+0x4c>)
    1854:	4a08      	ldr	r2, [pc, #32]	; (1878 <configure_rtc_count+0x5c>)
    1856:	1c18      	adds	r0, r3, #0
    1858:	1c11      	adds	r1, r2, #0
    185a:	4b08      	ldr	r3, [pc, #32]	; (187c <configure_rtc_count+0x60>)
    185c:	4798      	blx	r3
}
    185e:	46bd      	mov	sp, r7
    1860:	b004      	add	sp, #16
    1862:	bd80      	pop	{r7, pc}
    1864:	0000150d 	.word	0x0000150d
    1868:	20000204 	.word	0x20000204
    186c:	40001400 	.word	0x40001400
    1870:	0000039d 	.word	0x0000039d
    1874:	000001b1 	.word	0x000001b1
    1878:	00002710 	.word	0x00002710
    187c:	00000581 	.word	0x00000581

00001880 <reset_millis>:

void reset_millis(void)
{
    1880:	b580      	push	{r7, lr}
    1882:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    1884:	4b05      	ldr	r3, [pc, #20]	; (189c <reset_millis+0x1c>)
    1886:	1c18      	adds	r0, r3, #0
    1888:	2100      	movs	r1, #0
    188a:	4b05      	ldr	r3, [pc, #20]	; (18a0 <reset_millis+0x20>)
    188c:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    188e:	4b03      	ldr	r3, [pc, #12]	; (189c <reset_millis+0x1c>)
    1890:	1c18      	adds	r0, r3, #0
    1892:	4b04      	ldr	r3, [pc, #16]	; (18a4 <reset_millis+0x24>)
    1894:	4798      	blx	r3
}
    1896:	46bd      	mov	sp, r7
    1898:	bd80      	pop	{r7, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	20000204 	.word	0x20000204
    18a0:	0000042d 	.word	0x0000042d
    18a4:	000001b1 	.word	0x000001b1

000018a8 <millis>:

uint32_t millis(void)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    18ae:	2300      	movs	r3, #0
    18b0:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    18b2:	4b05      	ldr	r3, [pc, #20]	; (18c8 <millis+0x20>)
    18b4:	1c18      	adds	r0, r3, #0
    18b6:	4b05      	ldr	r3, [pc, #20]	; (18cc <millis+0x24>)
    18b8:	4798      	blx	r3
    18ba:	1c03      	adds	r3, r0, #0
    18bc:	607b      	str	r3, [r7, #4]
	return milli;
    18be:	687b      	ldr	r3, [r7, #4]
}
    18c0:	1c18      	adds	r0, r3, #0
    18c2:	46bd      	mov	sp, r7
    18c4:	b002      	add	sp, #8
    18c6:	bd80      	pop	{r7, pc}
    18c8:	20000204 	.word	0x20000204
    18cc:	0000048d 	.word	0x0000048d

000018d0 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    18d0:	b590      	push	{r4, r7, lr}
    18d2:	b085      	sub	sp, #20
    18d4:	af00      	add	r7, sp, #0
    18d6:	1c04      	adds	r4, r0, #0
    18d8:	6039      	str	r1, [r7, #0]
    18da:	1c10      	adds	r0, r2, #0
    18dc:	1c19      	adds	r1, r3, #0
    18de:	1dfb      	adds	r3, r7, #7
    18e0:	1c22      	adds	r2, r4, #0
    18e2:	701a      	strb	r2, [r3, #0]
    18e4:	1dbb      	adds	r3, r7, #6
    18e6:	1c02      	adds	r2, r0, #0
    18e8:	701a      	strb	r2, [r3, #0]
    18ea:	1d7b      	adds	r3, r7, #5
    18ec:	1c0a      	adds	r2, r1, #0
    18ee:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    18f0:	2001      	movs	r0, #1
    18f2:	4b50      	ldr	r3, [pc, #320]	; (1a34 <sendFrame+0x164>)
    18f4:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	2027      	movs	r0, #39	; 0x27
    18fa:	4b4f      	ldr	r3, [pc, #316]	; (1a38 <sendFrame+0x168>)
    18fc:	4798      	blx	r3
    18fe:	1c03      	adds	r3, r0, #0
    1900:	b2db      	uxtb	r3, r3
    1902:	b25b      	sxtb	r3, r3
    1904:	2b00      	cmp	r3, #0
    1906:	daf7      	bge.n	18f8 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    1908:	2025      	movs	r0, #37	; 0x25
    190a:	2100      	movs	r1, #0
    190c:	4b4b      	ldr	r3, [pc, #300]	; (1a3c <sendFrame+0x16c>)
    190e:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    1910:	1dbb      	adds	r3, r7, #6
    1912:	781b      	ldrb	r3, [r3, #0]
    1914:	2b3d      	cmp	r3, #61	; 0x3d
    1916:	d902      	bls.n	191e <sendFrame+0x4e>
    1918:	1dbb      	adds	r3, r7, #6
    191a:	223d      	movs	r2, #61	; 0x3d
    191c:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    191e:	230e      	movs	r3, #14
    1920:	18fb      	adds	r3, r7, r3
    1922:	2200      	movs	r2, #0
    1924:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    1926:	2320      	movs	r3, #32
    1928:	18fb      	adds	r3, r7, r3
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	2b00      	cmp	r3, #0
    192e:	d004      	beq.n	193a <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    1930:	230e      	movs	r3, #14
    1932:	18fb      	adds	r3, r7, r3
    1934:	2280      	movs	r2, #128	; 0x80
    1936:	701a      	strb	r2, [r3, #0]
    1938:	e007      	b.n	194a <sendFrame+0x7a>
	else if (requestACK)
    193a:	1d7b      	adds	r3, r7, #5
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d003      	beq.n	194a <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    1942:	230e      	movs	r3, #14
    1944:	18fb      	adds	r3, r7, r3
    1946:	2240      	movs	r2, #64	; 0x40
    1948:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	selectrf();
    194a:	4b3d      	ldr	r3, [pc, #244]	; (1a40 <sendFrame+0x170>)
    194c:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    194e:	4a3d      	ldr	r2, [pc, #244]	; (1a44 <sendFrame+0x174>)
    1950:	4b3d      	ldr	r3, [pc, #244]	; (1a48 <sendFrame+0x178>)
    1952:	1c10      	adds	r0, r2, #0
    1954:	2180      	movs	r1, #128	; 0x80
    1956:	1c1a      	adds	r2, r3, #0
    1958:	4b3c      	ldr	r3, [pc, #240]	; (1a4c <sendFrame+0x17c>)
    195a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    195c:	1dbb      	adds	r3, r7, #6
    195e:	781b      	ldrb	r3, [r3, #0]
    1960:	b29b      	uxth	r3, r3
    1962:	3303      	adds	r3, #3
    1964:	b29a      	uxth	r2, r3
    1966:	4937      	ldr	r1, [pc, #220]	; (1a44 <sendFrame+0x174>)
    1968:	4b37      	ldr	r3, [pc, #220]	; (1a48 <sendFrame+0x178>)
    196a:	1c08      	adds	r0, r1, #0
    196c:	1c11      	adds	r1, r2, #0
    196e:	1c1a      	adds	r2, r3, #0
    1970:	4b36      	ldr	r3, [pc, #216]	; (1a4c <sendFrame+0x17c>)
    1972:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    1974:	1dfb      	adds	r3, r7, #7
    1976:	781b      	ldrb	r3, [r3, #0]
    1978:	b29a      	uxth	r2, r3
    197a:	4932      	ldr	r1, [pc, #200]	; (1a44 <sendFrame+0x174>)
    197c:	4b32      	ldr	r3, [pc, #200]	; (1a48 <sendFrame+0x178>)
    197e:	1c08      	adds	r0, r1, #0
    1980:	1c11      	adds	r1, r2, #0
    1982:	1c1a      	adds	r2, r3, #0
    1984:	4b31      	ldr	r3, [pc, #196]	; (1a4c <sendFrame+0x17c>)
    1986:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    1988:	4b31      	ldr	r3, [pc, #196]	; (1a50 <sendFrame+0x180>)
    198a:	781b      	ldrb	r3, [r3, #0]
    198c:	b2db      	uxtb	r3, r3
    198e:	b29a      	uxth	r2, r3
    1990:	492c      	ldr	r1, [pc, #176]	; (1a44 <sendFrame+0x174>)
    1992:	4b2d      	ldr	r3, [pc, #180]	; (1a48 <sendFrame+0x178>)
    1994:	1c08      	adds	r0, r1, #0
    1996:	1c11      	adds	r1, r2, #0
    1998:	1c1a      	adds	r2, r3, #0
    199a:	4b2c      	ldr	r3, [pc, #176]	; (1a4c <sendFrame+0x17c>)
    199c:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    199e:	230e      	movs	r3, #14
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	b2db      	uxtb	r3, r3
    19a6:	b29a      	uxth	r2, r3
    19a8:	4926      	ldr	r1, [pc, #152]	; (1a44 <sendFrame+0x174>)
    19aa:	4b27      	ldr	r3, [pc, #156]	; (1a48 <sendFrame+0x178>)
    19ac:	1c08      	adds	r0, r1, #0
    19ae:	1c11      	adds	r1, r2, #0
    19b0:	1c1a      	adds	r2, r3, #0
    19b2:	4b26      	ldr	r3, [pc, #152]	; (1a4c <sendFrame+0x17c>)
    19b4:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    19b6:	230f      	movs	r3, #15
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	2200      	movs	r2, #0
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	e014      	b.n	19ea <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	683a      	ldr	r2, [r7, #0]
    19c8:	18d3      	adds	r3, r2, r3
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	b29a      	uxth	r2, r3
    19ce:	491d      	ldr	r1, [pc, #116]	; (1a44 <sendFrame+0x174>)
    19d0:	4b1d      	ldr	r3, [pc, #116]	; (1a48 <sendFrame+0x178>)
    19d2:	1c08      	adds	r0, r1, #0
    19d4:	1c11      	adds	r1, r2, #0
    19d6:	1c1a      	adds	r2, r3, #0
    19d8:	4b1c      	ldr	r3, [pc, #112]	; (1a4c <sendFrame+0x17c>)
    19da:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    19dc:	230f      	movs	r3, #15
    19de:	18fb      	adds	r3, r7, r3
    19e0:	781a      	ldrb	r2, [r3, #0]
    19e2:	230f      	movs	r3, #15
    19e4:	18fb      	adds	r3, r7, r3
    19e6:	3201      	adds	r2, #1
    19e8:	701a      	strb	r2, [r3, #0]
    19ea:	230f      	movs	r3, #15
    19ec:	18fa      	adds	r2, r7, r3
    19ee:	1dbb      	adds	r3, r7, #6
    19f0:	7812      	ldrb	r2, [r2, #0]
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	429a      	cmp	r2, r3
    19f6:	d3e3      	bcc.n	19c0 <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    19f8:	4b16      	ldr	r3, [pc, #88]	; (1a54 <sendFrame+0x184>)
    19fa:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the 
	
	
	setMode(RF69_MODE_TX);
    19fc:	2004      	movs	r0, #4
    19fe:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <sendFrame+0x164>)
    1a00:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    1a02:	4b15      	ldr	r3, [pc, #84]	; (1a58 <sendFrame+0x188>)
    1a04:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	2003      	movs	r0, #3
    1a0a:	4b14      	ldr	r3, [pc, #80]	; (1a5c <sendFrame+0x18c>)
    1a0c:	4798      	blx	r3
    1a0e:	1c03      	adds	r3, r0, #0
    1a10:	1c1a      	adds	r2, r3, #0
    1a12:	2301      	movs	r3, #1
    1a14:	4053      	eors	r3, r2
    1a16:	b2db      	uxtb	r3, r3
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d005      	beq.n	1a28 <sendFrame+0x158>
    1a1c:	4b10      	ldr	r3, [pc, #64]	; (1a60 <sendFrame+0x190>)
    1a1e:	4798      	blx	r3
    1a20:	1e02      	subs	r2, r0, #0
    1a22:	4b10      	ldr	r3, [pc, #64]	; (1a64 <sendFrame+0x194>)
    1a24:	429a      	cmp	r2, r3
    1a26:	d9ef      	bls.n	1a08 <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    1a28:	2001      	movs	r0, #1
    1a2a:	4b02      	ldr	r3, [pc, #8]	; (1a34 <sendFrame+0x164>)
    1a2c:	4798      	blx	r3
}
    1a2e:	46bd      	mov	sp, r7
    1a30:	b005      	add	sp, #20
    1a32:	bd90      	pop	{r4, r7, pc}
    1a34:	00001e89 	.word	0x00001e89
    1a38:	00002489 	.word	0x00002489
    1a3c:	000024f5 	.word	0x000024f5
    1a40:	00002559 	.word	0x00002559
    1a44:	200002a0 	.word	0x200002a0
    1a48:	200000fe 	.word	0x200000fe
    1a4c:	000011ad 	.word	0x000011ad
    1a50:	2000020e 	.word	0x2000020e
    1a54:	0000257d 	.word	0x0000257d
    1a58:	00001881 	.word	0x00001881
    1a5c:	00001479 	.word	0x00001479
    1a60:	000018a9 	.word	0x000018a9
    1a64:	000003e7 	.word	0x000003e7

00001a68 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    1a68:	b580      	push	{r7, lr}
    1a6a:	b082      	sub	sp, #8
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	1c02      	adds	r2, r0, #0
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    1a74:	4b1a      	ldr	r3, [pc, #104]	; (1ae0 <RFM_setHighPower+0x78>)
    1a76:	1dfa      	adds	r2, r7, #7
    1a78:	7812      	ldrb	r2, [r2, #0]
    1a7a:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    1a7c:	4b18      	ldr	r3, [pc, #96]	; (1ae0 <RFM_setHighPower+0x78>)
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	b2db      	uxtb	r3, r3
    1a82:	2b00      	cmp	r3, #0
    1a84:	d001      	beq.n	1a8a <RFM_setHighPower+0x22>
    1a86:	230f      	movs	r3, #15
    1a88:	e000      	b.n	1a8c <RFM_setHighPower+0x24>
    1a8a:	231a      	movs	r3, #26
    1a8c:	2013      	movs	r0, #19
    1a8e:	1c19      	adds	r1, r3, #0
    1a90:	4b14      	ldr	r3, [pc, #80]	; (1ae4 <RFM_setHighPower+0x7c>)
    1a92:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    1a94:	4b12      	ldr	r3, [pc, #72]	; (1ae0 <RFM_setHighPower+0x78>)
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d012      	beq.n	1ac4 <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    1a9e:	2011      	movs	r0, #17
    1aa0:	4b11      	ldr	r3, [pc, #68]	; (1ae8 <RFM_setHighPower+0x80>)
    1aa2:	4798      	blx	r3
    1aa4:	1c03      	adds	r3, r0, #0
    1aa6:	b2db      	uxtb	r3, r3
    1aa8:	1c1a      	adds	r2, r3, #0
    1aaa:	231f      	movs	r3, #31
    1aac:	4013      	ands	r3, r2
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	1c1a      	adds	r2, r3, #0
    1ab2:	2360      	movs	r3, #96	; 0x60
    1ab4:	4313      	orrs	r3, r2
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	b2db      	uxtb	r3, r3
    1aba:	2011      	movs	r0, #17
    1abc:	1c19      	adds	r1, r3, #0
    1abe:	4b09      	ldr	r3, [pc, #36]	; (1ae4 <RFM_setHighPower+0x7c>)
    1ac0:	4798      	blx	r3
    1ac2:	e009      	b.n	1ad8 <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    1ac4:	4b09      	ldr	r3, [pc, #36]	; (1aec <RFM_setHighPower+0x84>)
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	2280      	movs	r2, #128	; 0x80
    1aca:	4252      	negs	r2, r2
    1acc:	4313      	orrs	r3, r2
    1ace:	b2db      	uxtb	r3, r3
    1ad0:	2011      	movs	r0, #17
    1ad2:	1c19      	adds	r1, r3, #0
    1ad4:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <RFM_setHighPower+0x7c>)
    1ad6:	4798      	blx	r3
}
    1ad8:	46bd      	mov	sp, r7
    1ada:	b002      	add	sp, #8
    1adc:	bd80      	pop	{r7, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	2000029c 	.word	0x2000029c
    1ae4:	000024f5 	.word	0x000024f5
    1ae8:	00002489 	.word	0x00002489
    1aec:	2000020c 	.word	0x2000020c

00001af0 <RFM69>:

void RFM69()
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <RFM69+0x20>)
    1af6:	2201      	movs	r2, #1
    1af8:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    1afa:	4b06      	ldr	r3, [pc, #24]	; (1b14 <RFM69+0x24>)
    1afc:	2200      	movs	r2, #0
    1afe:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    1b00:	4b05      	ldr	r3, [pc, #20]	; (1b18 <RFM69+0x28>)
    1b02:	221f      	movs	r2, #31
    1b04:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    1b06:	4b05      	ldr	r3, [pc, #20]	; (1b1c <RFM69+0x2c>)
    1b08:	2200      	movs	r2, #0
    1b0a:	701a      	strb	r2, [r3, #0]
}
    1b0c:	46bd      	mov	sp, r7
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	2000029a 	.word	0x2000029a
    1b14:	20000214 	.word	0x20000214
    1b18:	2000020c 	.word	0x2000020c
    1b1c:	2000029c 	.word	0x2000029c

00001b20 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    1b20:	b590      	push	{r4, r7, lr}
    1b22:	b091      	sub	sp, #68	; 0x44
    1b24:	af00      	add	r7, sp, #0
    1b26:	1c04      	adds	r4, r0, #0
    1b28:	1c08      	adds	r0, r1, #0
    1b2a:	1c11      	adds	r1, r2, #0
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	1c22      	adds	r2, r4, #0
    1b30:	701a      	strb	r2, [r3, #0]
    1b32:	1dbb      	adds	r3, r7, #6
    1b34:	1c02      	adds	r2, r0, #0
    1b36:	701a      	strb	r2, [r3, #0]
    1b38:	1d7b      	adds	r3, r7, #5
    1b3a:	1c0a      	adds	r2, r1, #0
    1b3c:	701a      	strb	r2, [r3, #0]
  RFM69();
    1b3e:	4bc2      	ldr	r3, [pc, #776]	; (1e48 <RFM_initialize+0x328>)
    1b40:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    1b42:	2310      	movs	r3, #16
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	2201      	movs	r2, #1
    1b48:	701a      	strb	r2, [r3, #0]
    1b4a:	2310      	movs	r3, #16
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	2204      	movs	r2, #4
    1b50:	705a      	strb	r2, [r3, #1]
    1b52:	2310      	movs	r3, #16
    1b54:	18fb      	adds	r3, r7, r3
    1b56:	2202      	movs	r2, #2
    1b58:	709a      	strb	r2, [r3, #2]
    1b5a:	2310      	movs	r3, #16
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2200      	movs	r2, #0
    1b60:	70da      	strb	r2, [r3, #3]
    1b62:	2310      	movs	r3, #16
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2203      	movs	r2, #3
    1b68:	711a      	strb	r2, [r3, #4]
    1b6a:	2310      	movs	r3, #16
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	2202      	movs	r2, #2
    1b70:	715a      	strb	r2, [r3, #5]
    1b72:	2310      	movs	r3, #16
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	2204      	movs	r2, #4
    1b78:	719a      	strb	r2, [r3, #6]
    1b7a:	2310      	movs	r3, #16
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	2240      	movs	r2, #64	; 0x40
    1b80:	71da      	strb	r2, [r3, #7]
    1b82:	2310      	movs	r3, #16
    1b84:	18fb      	adds	r3, r7, r3
    1b86:	2205      	movs	r2, #5
    1b88:	721a      	strb	r2, [r3, #8]
    1b8a:	2310      	movs	r3, #16
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	2203      	movs	r2, #3
    1b90:	725a      	strb	r2, [r3, #9]
    1b92:	2310      	movs	r3, #16
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	2206      	movs	r2, #6
    1b98:	729a      	strb	r2, [r3, #10]
    1b9a:	2310      	movs	r3, #16
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	2233      	movs	r2, #51	; 0x33
    1ba0:	72da      	strb	r2, [r3, #11]
    1ba2:	2310      	movs	r3, #16
    1ba4:	18fb      	adds	r3, r7, r3
    1ba6:	2207      	movs	r2, #7
    1ba8:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b1f      	cmp	r3, #31
    1bb0:	d00d      	beq.n	1bce <RFM_initialize+0xae>
    1bb2:	1dfb      	adds	r3, r7, #7
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b2b      	cmp	r3, #43	; 0x2b
    1bb8:	d007      	beq.n	1bca <RFM_initialize+0xaa>
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	2b56      	cmp	r3, #86	; 0x56
    1bc0:	d101      	bne.n	1bc6 <RFM_initialize+0xa6>
    1bc2:	23d9      	movs	r3, #217	; 0xd9
    1bc4:	e004      	b.n	1bd0 <RFM_initialize+0xb0>
    1bc6:	23e4      	movs	r3, #228	; 0xe4
    1bc8:	e002      	b.n	1bd0 <RFM_initialize+0xb0>
    1bca:	236c      	movs	r3, #108	; 0x6c
    1bcc:	e000      	b.n	1bd0 <RFM_initialize+0xb0>
    1bce:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1bd0:	2210      	movs	r2, #16
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7353      	strb	r3, [r2, #13]
    1bd6:	2310      	movs	r3, #16
    1bd8:	18fb      	adds	r3, r7, r3
    1bda:	2208      	movs	r2, #8
    1bdc:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1bde:	1dfb      	adds	r3, r7, #7
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	2b1f      	cmp	r3, #31
    1be4:	d00d      	beq.n	1c02 <RFM_initialize+0xe2>
    1be6:	1dfb      	adds	r3, r7, #7
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	2b2b      	cmp	r3, #43	; 0x2b
    1bec:	d007      	beq.n	1bfe <RFM_initialize+0xde>
    1bee:	1dfb      	adds	r3, r7, #7
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	2b56      	cmp	r3, #86	; 0x56
    1bf4:	d101      	bne.n	1bfa <RFM_initialize+0xda>
    1bf6:	2300      	movs	r3, #0
    1bf8:	e004      	b.n	1c04 <RFM_initialize+0xe4>
    1bfa:	23c0      	movs	r3, #192	; 0xc0
    1bfc:	e002      	b.n	1c04 <RFM_initialize+0xe4>
    1bfe:	2340      	movs	r3, #64	; 0x40
    1c00:	e000      	b.n	1c04 <RFM_initialize+0xe4>
    1c02:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1c04:	2210      	movs	r2, #16
    1c06:	18ba      	adds	r2, r7, r2
    1c08:	73d3      	strb	r3, [r2, #15]
    1c0a:	2310      	movs	r3, #16
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	2209      	movs	r2, #9
    1c10:	741a      	strb	r2, [r3, #16]
    1c12:	2310      	movs	r3, #16
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	2200      	movs	r2, #0
    1c18:	745a      	strb	r2, [r3, #17]
    1c1a:	2310      	movs	r3, #16
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	2219      	movs	r2, #25
    1c20:	749a      	strb	r2, [r3, #18]
    1c22:	2310      	movs	r3, #16
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	2242      	movs	r2, #66	; 0x42
    1c28:	74da      	strb	r2, [r3, #19]
    1c2a:	2310      	movs	r3, #16
    1c2c:	18fb      	adds	r3, r7, r3
    1c2e:	2225      	movs	r2, #37	; 0x25
    1c30:	751a      	strb	r2, [r3, #20]
    1c32:	2310      	movs	r3, #16
    1c34:	18fb      	adds	r3, r7, r3
    1c36:	2240      	movs	r2, #64	; 0x40
    1c38:	755a      	strb	r2, [r3, #21]
    1c3a:	2310      	movs	r3, #16
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	2226      	movs	r2, #38	; 0x26
    1c40:	759a      	strb	r2, [r3, #22]
    1c42:	2310      	movs	r3, #16
    1c44:	18fb      	adds	r3, r7, r3
    1c46:	2207      	movs	r2, #7
    1c48:	75da      	strb	r2, [r3, #23]
    1c4a:	2310      	movs	r3, #16
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	2228      	movs	r2, #40	; 0x28
    1c50:	761a      	strb	r2, [r3, #24]
    1c52:	2310      	movs	r3, #16
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	2210      	movs	r2, #16
    1c58:	765a      	strb	r2, [r3, #25]
    1c5a:	2310      	movs	r3, #16
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	2229      	movs	r2, #41	; 0x29
    1c60:	769a      	strb	r2, [r3, #26]
    1c62:	2310      	movs	r3, #16
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	22dc      	movs	r2, #220	; 0xdc
    1c68:	76da      	strb	r2, [r3, #27]
    1c6a:	2310      	movs	r3, #16
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	222e      	movs	r2, #46	; 0x2e
    1c70:	771a      	strb	r2, [r3, #28]
    1c72:	2310      	movs	r3, #16
    1c74:	18fb      	adds	r3, r7, r3
    1c76:	2288      	movs	r2, #136	; 0x88
    1c78:	775a      	strb	r2, [r3, #29]
    1c7a:	2310      	movs	r3, #16
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	222f      	movs	r2, #47	; 0x2f
    1c80:	779a      	strb	r2, [r3, #30]
    1c82:	2310      	movs	r3, #16
    1c84:	18fb      	adds	r3, r7, r3
    1c86:	222d      	movs	r2, #45	; 0x2d
    1c88:	77da      	strb	r2, [r3, #31]
    1c8a:	2310      	movs	r3, #16
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	2220      	movs	r2, #32
    1c90:	2130      	movs	r1, #48	; 0x30
    1c92:	5499      	strb	r1, [r3, r2]
    1c94:	2310      	movs	r3, #16
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	1d7a      	adds	r2, r7, #5
    1c9a:	2121      	movs	r1, #33	; 0x21
    1c9c:	7812      	ldrb	r2, [r2, #0]
    1c9e:	545a      	strb	r2, [r3, r1]
    1ca0:	2310      	movs	r3, #16
    1ca2:	18fb      	adds	r3, r7, r3
    1ca4:	2222      	movs	r2, #34	; 0x22
    1ca6:	2137      	movs	r1, #55	; 0x37
    1ca8:	5499      	strb	r1, [r3, r2]
    1caa:	2310      	movs	r3, #16
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	2223      	movs	r2, #35	; 0x23
    1cb0:	2190      	movs	r1, #144	; 0x90
    1cb2:	5499      	strb	r1, [r3, r2]
    1cb4:	2310      	movs	r3, #16
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	2224      	movs	r2, #36	; 0x24
    1cba:	2138      	movs	r1, #56	; 0x38
    1cbc:	5499      	strb	r1, [r3, r2]
    1cbe:	2310      	movs	r3, #16
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	2225      	movs	r2, #37	; 0x25
    1cc4:	2142      	movs	r1, #66	; 0x42
    1cc6:	5499      	strb	r1, [r3, r2]
    1cc8:	2310      	movs	r3, #16
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	2226      	movs	r2, #38	; 0x26
    1cce:	213c      	movs	r1, #60	; 0x3c
    1cd0:	5499      	strb	r1, [r3, r2]
    1cd2:	2310      	movs	r3, #16
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	2227      	movs	r2, #39	; 0x27
    1cd8:	218f      	movs	r1, #143	; 0x8f
    1cda:	5499      	strb	r1, [r3, r2]
    1cdc:	2310      	movs	r3, #16
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	2228      	movs	r2, #40	; 0x28
    1ce2:	213d      	movs	r1, #61	; 0x3d
    1ce4:	5499      	strb	r1, [r3, r2]
    1ce6:	2310      	movs	r3, #16
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	2229      	movs	r2, #41	; 0x29
    1cec:	2112      	movs	r1, #18
    1cee:	5499      	strb	r1, [r3, r2]
    1cf0:	2310      	movs	r3, #16
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	222a      	movs	r2, #42	; 0x2a
    1cf6:	216f      	movs	r1, #111	; 0x6f
    1cf8:	5499      	strb	r1, [r3, r2]
    1cfa:	2310      	movs	r3, #16
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	222b      	movs	r2, #43	; 0x2b
    1d00:	2130      	movs	r1, #48	; 0x30
    1d02:	5499      	strb	r1, [r3, r2]
    1d04:	2310      	movs	r3, #16
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	222c      	movs	r2, #44	; 0x2c
    1d0a:	21ff      	movs	r1, #255	; 0xff
    1d0c:	5499      	strb	r1, [r3, r2]
    1d0e:	2310      	movs	r3, #16
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	222d      	movs	r2, #45	; 0x2d
    1d14:	2100      	movs	r1, #0
    1d16:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    1d18:	4b4c      	ldr	r3, [pc, #304]	; (1e4c <RFM_initialize+0x32c>)
    1d1a:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    1d1c:	4b4c      	ldr	r3, [pc, #304]	; (1e50 <RFM_initialize+0x330>)
    1d1e:	4798      	blx	r3
  configure_port_pins();
    1d20:	4b4c      	ldr	r3, [pc, #304]	; (1e54 <RFM_initialize+0x334>)
    1d22:	4798      	blx	r3
  configure_extint_channel();
    1d24:	4b4c      	ldr	r3, [pc, #304]	; (1e58 <RFM_initialize+0x338>)
    1d26:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    1d28:	4b4c      	ldr	r3, [pc, #304]	; (1e5c <RFM_initialize+0x33c>)
    1d2a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    1d2c:	230f      	movs	r3, #15
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	2232      	movs	r2, #50	; 0x32
    1d32:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    1d34:	202f      	movs	r0, #47	; 0x2f
    1d36:	21aa      	movs	r1, #170	; 0xaa
    1d38:	4b49      	ldr	r3, [pc, #292]	; (1e60 <RFM_initialize+0x340>)
    1d3a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    1d3c:	202f      	movs	r0, #47	; 0x2f
    1d3e:	4b49      	ldr	r3, [pc, #292]	; (1e64 <RFM_initialize+0x344>)
    1d40:	4798      	blx	r3
    1d42:	1e03      	subs	r3, r0, #0
    1d44:	2baa      	cmp	r3, #170	; 0xaa
    1d46:	d008      	beq.n	1d5a <RFM_initialize+0x23a>
    1d48:	4b47      	ldr	r3, [pc, #284]	; (1e68 <RFM_initialize+0x348>)
    1d4a:	4798      	blx	r3
    1d4c:	1c02      	adds	r2, r0, #0
    1d4e:	230f      	movs	r3, #15
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	b2db      	uxtb	r3, r3
    1d56:	429a      	cmp	r2, r3
    1d58:	d3ec      	bcc.n	1d34 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    1d5a:	4b40      	ldr	r3, [pc, #256]	; (1e5c <RFM_initialize+0x33c>)
    1d5c:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    1d5e:	202f      	movs	r0, #47	; 0x2f
    1d60:	2155      	movs	r1, #85	; 0x55
    1d62:	4b3f      	ldr	r3, [pc, #252]	; (1e60 <RFM_initialize+0x340>)
    1d64:	4798      	blx	r3
    1d66:	202f      	movs	r0, #47	; 0x2f
    1d68:	4b3e      	ldr	r3, [pc, #248]	; (1e64 <RFM_initialize+0x344>)
    1d6a:	4798      	blx	r3
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	2b55      	cmp	r3, #85	; 0x55
    1d70:	d008      	beq.n	1d84 <RFM_initialize+0x264>
    1d72:	4b3d      	ldr	r3, [pc, #244]	; (1e68 <RFM_initialize+0x348>)
    1d74:	4798      	blx	r3
    1d76:	1c02      	adds	r2, r0, #0
    1d78:	230f      	movs	r3, #15
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	429a      	cmp	r2, r3
    1d82:	d3ec      	bcc.n	1d5e <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1d84:	233f      	movs	r3, #63	; 0x3f
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	2200      	movs	r2, #0
    1d8a:	701a      	strb	r2, [r3, #0]
    1d8c:	e01a      	b.n	1dc4 <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    1d8e:	233f      	movs	r3, #63	; 0x3f
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	781a      	ldrb	r2, [r3, #0]
    1d94:	2310      	movs	r3, #16
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	5cd1      	ldrb	r1, [r2, r3]
    1d9c:	233f      	movs	r3, #63	; 0x3f
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	2210      	movs	r2, #16
    1da4:	18ba      	adds	r2, r7, r2
    1da6:	005b      	lsls	r3, r3, #1
    1da8:	18d3      	adds	r3, r2, r3
    1daa:	3301      	adds	r3, #1
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	1c08      	adds	r0, r1, #0
    1db0:	1c19      	adds	r1, r3, #0
    1db2:	4b2b      	ldr	r3, [pc, #172]	; (1e60 <RFM_initialize+0x340>)
    1db4:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1db6:	233f      	movs	r3, #63	; 0x3f
    1db8:	18fb      	adds	r3, r7, r3
    1dba:	781a      	ldrb	r2, [r3, #0]
    1dbc:	233f      	movs	r3, #63	; 0x3f
    1dbe:	18fb      	adds	r3, r7, r3
    1dc0:	3201      	adds	r2, #1
    1dc2:	701a      	strb	r2, [r3, #0]
    1dc4:	233f      	movs	r3, #63	; 0x3f
    1dc6:	18fb      	adds	r3, r7, r3
    1dc8:	781a      	ldrb	r2, [r3, #0]
    1dca:	2310      	movs	r3, #16
    1dcc:	18fb      	adds	r3, r7, r3
    1dce:	0052      	lsls	r2, r2, #1
    1dd0:	5cd3      	ldrb	r3, [r2, r3]
    1dd2:	2bff      	cmp	r3, #255	; 0xff
    1dd4:	d1db      	bne.n	1d8e <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    1dd6:	2000      	movs	r0, #0
    1dd8:	4b24      	ldr	r3, [pc, #144]	; (1e6c <RFM_initialize+0x34c>)
    1dda:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    1ddc:	4b24      	ldr	r3, [pc, #144]	; (1e70 <RFM_initialize+0x350>)
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	b2db      	uxtb	r3, r3
    1de2:	1c18      	adds	r0, r3, #0
    1de4:	4b23      	ldr	r3, [pc, #140]	; (1e74 <RFM_initialize+0x354>)
    1de6:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    1de8:	2001      	movs	r0, #1
    1dea:	4b23      	ldr	r3, [pc, #140]	; (1e78 <RFM_initialize+0x358>)
    1dec:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    1dee:	4b1b      	ldr	r3, [pc, #108]	; (1e5c <RFM_initialize+0x33c>)
    1df0:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	2027      	movs	r0, #39	; 0x27
    1df6:	4b1b      	ldr	r3, [pc, #108]	; (1e64 <RFM_initialize+0x344>)
    1df8:	4798      	blx	r3
    1dfa:	1c03      	adds	r3, r0, #0
    1dfc:	b2db      	uxtb	r3, r3
    1dfe:	b25b      	sxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	db08      	blt.n	1e16 <RFM_initialize+0x2f6>
    1e04:	4b18      	ldr	r3, [pc, #96]	; (1e68 <RFM_initialize+0x348>)
    1e06:	4798      	blx	r3
    1e08:	1c02      	adds	r2, r0, #0
    1e0a:	230f      	movs	r3, #15
    1e0c:	18fb      	adds	r3, r7, r3
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	b2db      	uxtb	r3, r3
    1e12:	429a      	cmp	r2, r3
    1e14:	d3ee      	bcc.n	1df4 <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
    1e16:	4b14      	ldr	r3, [pc, #80]	; (1e68 <RFM_initialize+0x348>)
    1e18:	4798      	blx	r3
    1e1a:	1c02      	adds	r2, r0, #0
    1e1c:	230f      	movs	r3, #15
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	b2db      	uxtb	r3, r3
    1e24:	429a      	cmp	r2, r3
    1e26:	d301      	bcc.n	1e2c <RFM_initialize+0x30c>
    return false;
    1e28:	2300      	movs	r3, #0
    1e2a:	e009      	b.n	1e40 <RFM_initialize+0x320>
  _inISR = false;
    1e2c:	4b13      	ldr	r3, [pc, #76]	; (1e7c <RFM_initialize+0x35c>)
    1e2e:	2200      	movs	r2, #0
    1e30:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    1e32:	4b13      	ldr	r3, [pc, #76]	; (1e80 <RFM_initialize+0x360>)
    1e34:	4798      	blx	r3

  _address = nodeID;
    1e36:	4b13      	ldr	r3, [pc, #76]	; (1e84 <RFM_initialize+0x364>)
    1e38:	1dba      	adds	r2, r7, #6
    1e3a:	7812      	ldrb	r2, [r2, #0]
    1e3c:	701a      	strb	r2, [r3, #0]
  return true;
    1e3e:	2301      	movs	r3, #1
}
    1e40:	1c18      	adds	r0, r3, #0
    1e42:	46bd      	mov	sp, r7
    1e44:	b011      	add	sp, #68	; 0x44
    1e46:	bd90      	pop	{r4, r7, pc}
    1e48:	00001af1 	.word	0x00001af1
    1e4c:	00001759 	.word	0x00001759
    1e50:	0000181d 	.word	0x0000181d
    1e54:	000016c5 	.word	0x000016c5
    1e58:	000016f1 	.word	0x000016f1
    1e5c:	00001881 	.word	0x00001881
    1e60:	000024f5 	.word	0x000024f5
    1e64:	00002489 	.word	0x00002489
    1e68:	000018a9 	.word	0x000018a9
    1e6c:	00002389 	.word	0x00002389
    1e70:	2000029c 	.word	0x2000029c
    1e74:	00001a69 	.word	0x00001a69
    1e78:	00001e89 	.word	0x00001e89
    1e7c:	2000020d 	.word	0x2000020d
    1e80:	00001731 	.word	0x00001731
    1e84:	2000020e 	.word	0x2000020e

00001e88 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    1e88:	b580      	push	{r7, lr}
    1e8a:	b082      	sub	sp, #8
    1e8c:	af00      	add	r7, sp, #0
    1e8e:	1c02      	adds	r2, r0, #0
    1e90:	1dfb      	adds	r3, r7, #7
    1e92:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    1e94:	1dfb      	adds	r3, r7, #7
    1e96:	781b      	ldrb	r3, [r3, #0]
    1e98:	b29a      	uxth	r2, r3
    1e9a:	4b4c      	ldr	r3, [pc, #304]	; (1fcc <setMode+0x144>)
    1e9c:	881b      	ldrh	r3, [r3, #0]
    1e9e:	b29b      	uxth	r3, r3
    1ea0:	429a      	cmp	r2, r3
    1ea2:	d100      	bne.n	1ea6 <setMode+0x1e>
    return;
    1ea4:	e08e      	b.n	1fc4 <setMode+0x13c>

  switch (newMode) {
    1ea6:	1dfb      	adds	r3, r7, #7
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	2b04      	cmp	r3, #4
    1eac:	d900      	bls.n	1eb0 <setMode+0x28>
    1eae:	e088      	b.n	1fc2 <setMode+0x13a>
    1eb0:	009a      	lsls	r2, r3, #2
    1eb2:	4b47      	ldr	r3, [pc, #284]	; (1fd0 <setMode+0x148>)
    1eb4:	18d3      	adds	r3, r2, r3
    1eb6:	681b      	ldr	r3, [r3, #0]
    1eb8:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    1eba:	2001      	movs	r0, #1
    1ebc:	4b45      	ldr	r3, [pc, #276]	; (1fd4 <setMode+0x14c>)
    1ebe:	4798      	blx	r3
    1ec0:	1c03      	adds	r3, r0, #0
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	1c1a      	adds	r2, r3, #0
    1ec6:	231c      	movs	r3, #28
    1ec8:	439a      	bics	r2, r3
    1eca:	1c13      	adds	r3, r2, #0
    1ecc:	b2db      	uxtb	r3, r3
    1ece:	1c1a      	adds	r2, r3, #0
    1ed0:	230c      	movs	r3, #12
    1ed2:	4313      	orrs	r3, r2
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	b2db      	uxtb	r3, r3
    1ed8:	2001      	movs	r0, #1
    1eda:	1c19      	adds	r1, r3, #0
    1edc:	4b3e      	ldr	r3, [pc, #248]	; (1fd8 <setMode+0x150>)
    1ede:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    1ee0:	4b3e      	ldr	r3, [pc, #248]	; (1fdc <setMode+0x154>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	b2db      	uxtb	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d003      	beq.n	1ef2 <setMode+0x6a>
    1eea:	2001      	movs	r0, #1
    1eec:	4b3c      	ldr	r3, [pc, #240]	; (1fe0 <setMode+0x158>)
    1eee:	4798      	blx	r3
      break;
    1ef0:	e053      	b.n	1f9a <setMode+0x112>
    1ef2:	e052      	b.n	1f9a <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    1ef4:	2001      	movs	r0, #1
    1ef6:	4b37      	ldr	r3, [pc, #220]	; (1fd4 <setMode+0x14c>)
    1ef8:	4798      	blx	r3
    1efa:	1c03      	adds	r3, r0, #0
    1efc:	b2db      	uxtb	r3, r3
    1efe:	1c1a      	adds	r2, r3, #0
    1f00:	231c      	movs	r3, #28
    1f02:	439a      	bics	r2, r3
    1f04:	1c13      	adds	r3, r2, #0
    1f06:	b2db      	uxtb	r3, r3
    1f08:	1c1a      	adds	r2, r3, #0
    1f0a:	2310      	movs	r3, #16
    1f0c:	4313      	orrs	r3, r2
    1f0e:	b2db      	uxtb	r3, r3
    1f10:	b2db      	uxtb	r3, r3
    1f12:	2001      	movs	r0, #1
    1f14:	1c19      	adds	r1, r3, #0
    1f16:	4b30      	ldr	r3, [pc, #192]	; (1fd8 <setMode+0x150>)
    1f18:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    1f1a:	4b30      	ldr	r3, [pc, #192]	; (1fdc <setMode+0x154>)
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	2b00      	cmp	r3, #0
    1f22:	d003      	beq.n	1f2c <setMode+0xa4>
    1f24:	2000      	movs	r0, #0
    1f26:	4b2e      	ldr	r3, [pc, #184]	; (1fe0 <setMode+0x158>)
    1f28:	4798      	blx	r3
      break;
    1f2a:	e036      	b.n	1f9a <setMode+0x112>
    1f2c:	e035      	b.n	1f9a <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    1f2e:	2001      	movs	r0, #1
    1f30:	4b28      	ldr	r3, [pc, #160]	; (1fd4 <setMode+0x14c>)
    1f32:	4798      	blx	r3
    1f34:	1c03      	adds	r3, r0, #0
    1f36:	b2db      	uxtb	r3, r3
    1f38:	1c1a      	adds	r2, r3, #0
    1f3a:	231c      	movs	r3, #28
    1f3c:	439a      	bics	r2, r3
    1f3e:	1c13      	adds	r3, r2, #0
    1f40:	b2db      	uxtb	r3, r3
    1f42:	1c1a      	adds	r2, r3, #0
    1f44:	2308      	movs	r3, #8
    1f46:	4313      	orrs	r3, r2
    1f48:	b2db      	uxtb	r3, r3
    1f4a:	b2db      	uxtb	r3, r3
    1f4c:	2001      	movs	r0, #1
    1f4e:	1c19      	adds	r1, r3, #0
    1f50:	4b21      	ldr	r3, [pc, #132]	; (1fd8 <setMode+0x150>)
    1f52:	4798      	blx	r3
      break;
    1f54:	e021      	b.n	1f9a <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    1f56:	2001      	movs	r0, #1
    1f58:	4b1e      	ldr	r3, [pc, #120]	; (1fd4 <setMode+0x14c>)
    1f5a:	4798      	blx	r3
    1f5c:	1c03      	adds	r3, r0, #0
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	1c1a      	adds	r2, r3, #0
    1f62:	231c      	movs	r3, #28
    1f64:	439a      	bics	r2, r3
    1f66:	1c13      	adds	r3, r2, #0
    1f68:	b2db      	uxtb	r3, r3
    1f6a:	1c1a      	adds	r2, r3, #0
    1f6c:	2304      	movs	r3, #4
    1f6e:	4313      	orrs	r3, r2
    1f70:	b2db      	uxtb	r3, r3
    1f72:	b2db      	uxtb	r3, r3
    1f74:	2001      	movs	r0, #1
    1f76:	1c19      	adds	r1, r3, #0
    1f78:	4b17      	ldr	r3, [pc, #92]	; (1fd8 <setMode+0x150>)
    1f7a:	4798      	blx	r3
      break;
    1f7c:	e00d      	b.n	1f9a <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    1f7e:	2001      	movs	r0, #1
    1f80:	4b14      	ldr	r3, [pc, #80]	; (1fd4 <setMode+0x14c>)
    1f82:	4798      	blx	r3
    1f84:	1c03      	adds	r3, r0, #0
    1f86:	1c1a      	adds	r2, r3, #0
    1f88:	231c      	movs	r3, #28
    1f8a:	439a      	bics	r2, r3
    1f8c:	1c13      	adds	r3, r2, #0
    1f8e:	b2db      	uxtb	r3, r3
    1f90:	2001      	movs	r0, #1
    1f92:	1c19      	adds	r1, r3, #0
    1f94:	4b10      	ldr	r3, [pc, #64]	; (1fd8 <setMode+0x150>)
    1f96:	4798      	blx	r3
      break;
    1f98:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <setMode+0x144>)
    1f9e:	881b      	ldrh	r3, [r3, #0]
    1fa0:	b29b      	uxth	r3, r3
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d107      	bne.n	1fb6 <setMode+0x12e>
    1fa6:	2027      	movs	r0, #39	; 0x27
    1fa8:	4b0a      	ldr	r3, [pc, #40]	; (1fd4 <setMode+0x14c>)
    1faa:	4798      	blx	r3
    1fac:	1c03      	adds	r3, r0, #0
    1fae:	b2db      	uxtb	r3, r3
    1fb0:	b25b      	sxtb	r3, r3
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	daf2      	bge.n	1f9c <setMode+0x114>

  _mode = newMode;
    1fb6:	1dfb      	adds	r3, r7, #7
    1fb8:	781b      	ldrb	r3, [r3, #0]
    1fba:	b29a      	uxth	r2, r3
    1fbc:	4b03      	ldr	r3, [pc, #12]	; (1fcc <setMode+0x144>)
    1fbe:	801a      	strh	r2, [r3, #0]
    1fc0:	e000      	b.n	1fc4 <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    1fc2:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    1fc4:	46bd      	mov	sp, r7
    1fc6:	b002      	add	sp, #8
    1fc8:	bd80      	pop	{r7, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	2000029a 	.word	0x2000029a
    1fd0:	00008e5c 	.word	0x00008e5c
    1fd4:	00002489 	.word	0x00002489
    1fd8:	000024f5 	.word	0x000024f5
    1fdc:	2000029c 	.word	0x2000029c
    1fe0:	000025a9 	.word	0x000025a9

00001fe4 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    1fe4:	b580      	push	{r7, lr}
    1fe6:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    1fe8:	4b0b      	ldr	r3, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fea:	881b      	ldrh	r3, [r3, #0]
    1fec:	b29b      	uxth	r3, r3
    1fee:	2b03      	cmp	r3, #3
    1ff0:	d10e      	bne.n	2010 <STACK_SIZE+0x10>
    1ff2:	4b0a      	ldr	r3, [pc, #40]	; (201c <STACK_SIZE+0x1c>)
    1ff4:	881b      	ldrh	r3, [r3, #0]
    1ff6:	b29b      	uxth	r3, r3
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d109      	bne.n	2010 <STACK_SIZE+0x10>
    1ffc:	4b08      	ldr	r3, [pc, #32]	; (2020 <STACK_SIZE+0x20>)
    1ffe:	4798      	blx	r3
    2000:	1c03      	adds	r3, r0, #0
    2002:	335a      	adds	r3, #90	; 0x5a
    2004:	da04      	bge.n	2010 <STACK_SIZE+0x10>
  {
    setMode(RF69_MODE_STANDBY);
    2006:	2001      	movs	r0, #1
    2008:	4b06      	ldr	r3, [pc, #24]	; (2024 <STACK_SIZE+0x24>)
    200a:	4798      	blx	r3
    return true;
    200c:	2301      	movs	r3, #1
    200e:	e000      	b.n	2012 <STACK_SIZE+0x12>
  }
  return false;
    2010:	2300      	movs	r3, #0
}
    2012:	1c18      	adds	r0, r3, #0
    2014:	46bd      	mov	sp, r7
    2016:	bd80      	pop	{r7, pc}
    2018:	2000029a 	.word	0x2000029a
    201c:	20000294 	.word	0x20000294
    2020:	00002445 	.word	0x00002445
    2024:	00001e89 	.word	0x00001e89

00002028 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    2028:	b590      	push	{r4, r7, lr}
    202a:	b085      	sub	sp, #20
    202c:	af02      	add	r7, sp, #8
    202e:	1c04      	adds	r4, r0, #0
    2030:	6039      	str	r1, [r7, #0]
    2032:	1c10      	adds	r0, r2, #0
    2034:	1c19      	adds	r1, r3, #0
    2036:	1dfb      	adds	r3, r7, #7
    2038:	1c22      	adds	r2, r4, #0
    203a:	701a      	strb	r2, [r3, #0]
    203c:	1dbb      	adds	r3, r7, #6
    203e:	1c02      	adds	r2, r0, #0
    2040:	701a      	strb	r2, [r3, #0]
    2042:	1d7b      	adds	r3, r7, #5
    2044:	1c0a      	adds	r2, r1, #0
    2046:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    2048:	203d      	movs	r0, #61	; 0x3d
    204a:	4b17      	ldr	r3, [pc, #92]	; (20a8 <RFM_send+0x80>)
    204c:	4798      	blx	r3
    204e:	1c03      	adds	r3, r0, #0
    2050:	1c1a      	adds	r2, r3, #0
    2052:	2304      	movs	r3, #4
    2054:	4313      	orrs	r3, r2
    2056:	b2db      	uxtb	r3, r3
    2058:	203d      	movs	r0, #61	; 0x3d
    205a:	1c19      	adds	r1, r3, #0
    205c:	4b13      	ldr	r3, [pc, #76]	; (20ac <RFM_send+0x84>)
    205e:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    2060:	4b13      	ldr	r3, [pc, #76]	; (20b0 <RFM_send+0x88>)
    2062:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    2064:	e001      	b.n	206a <RFM_send+0x42>
    2066:	4b13      	ldr	r3, [pc, #76]	; (20b4 <RFM_send+0x8c>)
    2068:	4798      	blx	r3
    206a:	4b13      	ldr	r3, [pc, #76]	; (20b8 <RFM_send+0x90>)
    206c:	4798      	blx	r3
    206e:	1c03      	adds	r3, r0, #0
    2070:	1c1a      	adds	r2, r3, #0
    2072:	2301      	movs	r3, #1
    2074:	4053      	eors	r3, r2
    2076:	b2db      	uxtb	r3, r3
    2078:	2b00      	cmp	r3, #0
    207a:	d005      	beq.n	2088 <RFM_send+0x60>
    207c:	4b0f      	ldr	r3, [pc, #60]	; (20bc <RFM_send+0x94>)
    207e:	4798      	blx	r3
    2080:	1e02      	subs	r2, r0, #0
    2082:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <RFM_send+0x98>)
    2084:	429a      	cmp	r2, r3
    2086:	d9ee      	bls.n	2066 <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    2088:	1dfb      	adds	r3, r7, #7
    208a:	7818      	ldrb	r0, [r3, #0]
    208c:	6839      	ldr	r1, [r7, #0]
    208e:	1dbb      	adds	r3, r7, #6
    2090:	781a      	ldrb	r2, [r3, #0]
    2092:	1d7b      	adds	r3, r7, #5
    2094:	781c      	ldrb	r4, [r3, #0]
    2096:	2300      	movs	r3, #0
    2098:	9300      	str	r3, [sp, #0]
    209a:	1c23      	adds	r3, r4, #0
    209c:	4c09      	ldr	r4, [pc, #36]	; (20c4 <RFM_send+0x9c>)
    209e:	47a0      	blx	r4
}
    20a0:	46bd      	mov	sp, r7
    20a2:	b003      	add	sp, #12
    20a4:	bd90      	pop	{r4, r7, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	00002489 	.word	0x00002489
    20ac:	000024f5 	.word	0x000024f5
    20b0:	00001881 	.word	0x00001881
    20b4:	0000233d 	.word	0x0000233d
    20b8:	00001fe5 	.word	0x00001fe5
    20bc:	000018a9 	.word	0x000018a9
    20c0:	000003e7 	.word	0x000003e7
    20c4:	000018d1 	.word	0x000018d1

000020c8 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    20c8:	b580      	push	{r7, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    20ce:	4b5b      	ldr	r3, [pc, #364]	; (223c <interruptHandler+0x174>)
    20d0:	881b      	ldrh	r3, [r3, #0]
    20d2:	b29b      	uxth	r3, r3
    20d4:	2b03      	cmp	r3, #3
    20d6:	d000      	beq.n	20da <interruptHandler+0x12>
    20d8:	e0a7      	b.n	222a <interruptHandler+0x162>
    20da:	2028      	movs	r0, #40	; 0x28
    20dc:	4b58      	ldr	r3, [pc, #352]	; (2240 <interruptHandler+0x178>)
    20de:	4798      	blx	r3
    20e0:	1c03      	adds	r3, r0, #0
    20e2:	1c1a      	adds	r2, r3, #0
    20e4:	2304      	movs	r3, #4
    20e6:	4013      	ands	r3, r2
    20e8:	d100      	bne.n	20ec <interruptHandler+0x24>
    20ea:	e09e      	b.n	222a <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    20ec:	2001      	movs	r0, #1
    20ee:	4b55      	ldr	r3, [pc, #340]	; (2244 <interruptHandler+0x17c>)
    20f0:	4798      	blx	r3
    selectrf();
    20f2:	4b55      	ldr	r3, [pc, #340]	; (2248 <interruptHandler+0x180>)
    20f4:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    20f6:	4a55      	ldr	r2, [pc, #340]	; (224c <interruptHandler+0x184>)
    20f8:	4b55      	ldr	r3, [pc, #340]	; (2250 <interruptHandler+0x188>)
    20fa:	1c10      	adds	r0, r2, #0
    20fc:	2100      	movs	r1, #0
    20fe:	1c1a      	adds	r2, r3, #0
    2100:	4b54      	ldr	r3, [pc, #336]	; (2254 <interruptHandler+0x18c>)
    2102:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    2104:	4a51      	ldr	r2, [pc, #324]	; (224c <interruptHandler+0x184>)
    2106:	4b54      	ldr	r3, [pc, #336]	; (2258 <interruptHandler+0x190>)
    2108:	1c10      	adds	r0, r2, #0
    210a:	2100      	movs	r1, #0
    210c:	1c1a      	adds	r2, r3, #0
    210e:	4b51      	ldr	r3, [pc, #324]	; (2254 <interruptHandler+0x18c>)
    2110:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    2112:	4b51      	ldr	r3, [pc, #324]	; (2258 <interruptHandler+0x190>)
    2114:	881b      	ldrh	r3, [r3, #0]
    2116:	b29b      	uxth	r3, r3
    2118:	2b42      	cmp	r3, #66	; 0x42
    211a:	d803      	bhi.n	2124 <interruptHandler+0x5c>
    211c:	4b4e      	ldr	r3, [pc, #312]	; (2258 <interruptHandler+0x190>)
    211e:	881b      	ldrh	r3, [r3, #0]
    2120:	b29a      	uxth	r2, r3
    2122:	e000      	b.n	2126 <interruptHandler+0x5e>
    2124:	2242      	movs	r2, #66	; 0x42
    2126:	4b4c      	ldr	r3, [pc, #304]	; (2258 <interruptHandler+0x190>)
    2128:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    212a:	4a48      	ldr	r2, [pc, #288]	; (224c <interruptHandler+0x184>)
    212c:	4b4b      	ldr	r3, [pc, #300]	; (225c <interruptHandler+0x194>)
    212e:	1c10      	adds	r0, r2, #0
    2130:	2100      	movs	r1, #0
    2132:	1c1a      	adds	r2, r3, #0
    2134:	4b47      	ldr	r3, [pc, #284]	; (2254 <interruptHandler+0x18c>)
    2136:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    2138:	4b49      	ldr	r3, [pc, #292]	; (2260 <interruptHandler+0x198>)
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	b2db      	uxtb	r3, r3
    213e:	2201      	movs	r2, #1
    2140:	4053      	eors	r3, r2
    2142:	b2db      	uxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	d00d      	beq.n	2164 <interruptHandler+0x9c>
    2148:	4b46      	ldr	r3, [pc, #280]	; (2264 <interruptHandler+0x19c>)
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	b2db      	uxtb	r3, r3
    214e:	b29a      	uxth	r2, r3
    2150:	4b42      	ldr	r3, [pc, #264]	; (225c <interruptHandler+0x194>)
    2152:	881b      	ldrh	r3, [r3, #0]
    2154:	b29b      	uxth	r3, r3
    2156:	429a      	cmp	r2, r3
    2158:	d004      	beq.n	2164 <interruptHandler+0x9c>
    215a:	4b40      	ldr	r3, [pc, #256]	; (225c <interruptHandler+0x194>)
    215c:	881b      	ldrh	r3, [r3, #0]
    215e:	b29b      	uxth	r3, r3
    2160:	2bff      	cmp	r3, #255	; 0xff
    2162:	d104      	bne.n	216e <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    2164:	4b3c      	ldr	r3, [pc, #240]	; (2258 <interruptHandler+0x190>)
    2166:	881b      	ldrh	r3, [r3, #0]
    2168:	b29b      	uxth	r3, r3
    216a:	2b02      	cmp	r3, #2
    216c:	d807      	bhi.n	217e <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    216e:	4b3a      	ldr	r3, [pc, #232]	; (2258 <interruptHandler+0x190>)
    2170:	2200      	movs	r2, #0
    2172:	801a      	strh	r2, [r3, #0]
      unselect();
    2174:	4b3c      	ldr	r3, [pc, #240]	; (2268 <interruptHandler+0x1a0>)
    2176:	4798      	blx	r3
      receiveBegin();
    2178:	4b3c      	ldr	r3, [pc, #240]	; (226c <interruptHandler+0x1a4>)
    217a:	4798      	blx	r3
    217c:	e05b      	b.n	2236 <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    217e:	4b36      	ldr	r3, [pc, #216]	; (2258 <interruptHandler+0x190>)
    2180:	881b      	ldrh	r3, [r3, #0]
    2182:	b29b      	uxth	r3, r3
    2184:	3b03      	subs	r3, #3
    2186:	b29a      	uxth	r2, r3
    2188:	4b39      	ldr	r3, [pc, #228]	; (2270 <interruptHandler+0x1a8>)
    218a:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    218c:	4a2f      	ldr	r2, [pc, #188]	; (224c <interruptHandler+0x184>)
    218e:	4b39      	ldr	r3, [pc, #228]	; (2274 <interruptHandler+0x1ac>)
    2190:	1c10      	adds	r0, r2, #0
    2192:	2100      	movs	r1, #0
    2194:	1c1a      	adds	r2, r3, #0
    2196:	4b2f      	ldr	r3, [pc, #188]	; (2254 <interruptHandler+0x18c>)
    2198:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    219a:	1dbb      	adds	r3, r7, #6
    219c:	2200      	movs	r2, #0
    219e:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    21a0:	4a2a      	ldr	r2, [pc, #168]	; (224c <interruptHandler+0x184>)
    21a2:	1dbb      	adds	r3, r7, #6
    21a4:	1c10      	adds	r0, r2, #0
    21a6:	2100      	movs	r1, #0
    21a8:	1c1a      	adds	r2, r3, #0
    21aa:	4b2a      	ldr	r3, [pc, #168]	; (2254 <interruptHandler+0x18c>)
    21ac:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    21ae:	1dbb      	adds	r3, r7, #6
    21b0:	781b      	ldrb	r3, [r3, #0]
    21b2:	b29b      	uxth	r3, r3
    21b4:	2280      	movs	r2, #128	; 0x80
    21b6:	4013      	ands	r3, r2
    21b8:	b29a      	uxth	r2, r3
    21ba:	4b2f      	ldr	r3, [pc, #188]	; (2278 <interruptHandler+0x1b0>)
    21bc:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    21be:	1dbb      	adds	r3, r7, #6
    21c0:	781b      	ldrb	r3, [r3, #0]
    21c2:	b29b      	uxth	r3, r3
    21c4:	2240      	movs	r2, #64	; 0x40
    21c6:	4013      	ands	r3, r2
    21c8:	b29a      	uxth	r2, r3
    21ca:	4b2c      	ldr	r3, [pc, #176]	; (227c <interruptHandler+0x1b4>)
    21cc:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21ce:	1dfb      	adds	r3, r7, #7
    21d0:	2200      	movs	r2, #0
    21d2:	701a      	strb	r2, [r3, #0]
    21d4:	e00f      	b.n	21f6 <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    21d6:	1dfb      	adds	r3, r7, #7
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	005a      	lsls	r2, r3, #1
    21dc:	4b28      	ldr	r3, [pc, #160]	; (2280 <interruptHandler+0x1b8>)
    21de:	18d3      	adds	r3, r2, r3
    21e0:	4a1a      	ldr	r2, [pc, #104]	; (224c <interruptHandler+0x184>)
    21e2:	1c10      	adds	r0, r2, #0
    21e4:	2100      	movs	r1, #0
    21e6:	1c1a      	adds	r2, r3, #0
    21e8:	4b1a      	ldr	r3, [pc, #104]	; (2254 <interruptHandler+0x18c>)
    21ea:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    21ec:	1dfb      	adds	r3, r7, #7
    21ee:	781a      	ldrb	r2, [r3, #0]
    21f0:	1dfb      	adds	r3, r7, #7
    21f2:	3201      	adds	r2, #1
    21f4:	701a      	strb	r2, [r3, #0]
    21f6:	1dfb      	adds	r3, r7, #7
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	b29a      	uxth	r2, r3
    21fc:	4b1c      	ldr	r3, [pc, #112]	; (2270 <interruptHandler+0x1a8>)
    21fe:	881b      	ldrh	r3, [r3, #0]
    2200:	b29b      	uxth	r3, r3
    2202:	429a      	cmp	r2, r3
    2204:	d3e7      	bcc.n	21d6 <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    2206:	4b1a      	ldr	r3, [pc, #104]	; (2270 <interruptHandler+0x1a8>)
    2208:	881b      	ldrh	r3, [r3, #0]
    220a:	b29b      	uxth	r3, r3
    220c:	2b3c      	cmp	r3, #60	; 0x3c
    220e:	d807      	bhi.n	2220 <interruptHandler+0x158>
    2210:	4b17      	ldr	r3, [pc, #92]	; (2270 <interruptHandler+0x1a8>)
    2212:	881b      	ldrh	r3, [r3, #0]
    2214:	b29b      	uxth	r3, r3
    2216:	1c1a      	adds	r2, r3, #0
    2218:	4b19      	ldr	r3, [pc, #100]	; (2280 <interruptHandler+0x1b8>)
    221a:	0052      	lsls	r2, r2, #1
    221c:	2100      	movs	r1, #0
    221e:	52d1      	strh	r1, [r2, r3]
    unselect();
    2220:	4b11      	ldr	r3, [pc, #68]	; (2268 <interruptHandler+0x1a0>)
    2222:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    2224:	2003      	movs	r0, #3
    2226:	4b07      	ldr	r3, [pc, #28]	; (2244 <interruptHandler+0x17c>)
    2228:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    222a:	4b16      	ldr	r3, [pc, #88]	; (2284 <interruptHandler+0x1bc>)
    222c:	4798      	blx	r3
    222e:	1c03      	adds	r3, r0, #0
    2230:	1c1a      	adds	r2, r3, #0
    2232:	4b15      	ldr	r3, [pc, #84]	; (2288 <interruptHandler+0x1c0>)
    2234:	801a      	strh	r2, [r3, #0]
}
    2236:	46bd      	mov	sp, r7
    2238:	b002      	add	sp, #8
    223a:	bd80      	pop	{r7, pc}
    223c:	2000029a 	.word	0x2000029a
    2240:	00002489 	.word	0x00002489
    2244:	00001e89 	.word	0x00001e89
    2248:	00002559 	.word	0x00002559
    224c:	200002a0 	.word	0x200002a0
    2250:	200000fe 	.word	0x200000fe
    2254:	000011ad 	.word	0x000011ad
    2258:	20000294 	.word	0x20000294
    225c:	20000298 	.word	0x20000298
    2260:	20000214 	.word	0x20000214
    2264:	2000020e 	.word	0x2000020e
    2268:	0000257d 	.word	0x0000257d
    226c:	000022ad 	.word	0x000022ad
    2270:	20000212 	.word	0x20000212
    2274:	20000202 	.word	0x20000202
    2278:	20000210 	.word	0x20000210
    227c:	20000296 	.word	0x20000296
    2280:	20000218 	.word	0x20000218
    2284:	00002445 	.word	0x00002445
    2288:	200002ac 	.word	0x200002ac

0000228c <isr0>:

// internal function
void isr0()
{ 
    228c:	b580      	push	{r7, lr}
    228e:	af00      	add	r7, sp, #0
	_inISR = true; 
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <isr0+0x18>)
    2292:	2201      	movs	r2, #1
    2294:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    2296:	4b04      	ldr	r3, [pc, #16]	; (22a8 <isr0+0x1c>)
    2298:	4798      	blx	r3
	_inISR = false;
    229a:	4b02      	ldr	r3, [pc, #8]	; (22a4 <isr0+0x18>)
    229c:	2200      	movs	r2, #0
    229e:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    22a0:	46bd      	mov	sp, r7
    22a2:	bd80      	pop	{r7, pc}
    22a4:	2000020d 	.word	0x2000020d
    22a8:	000020c9 	.word	0x000020c9

000022ac <receiveBegin>:

// internal function
void receiveBegin() {
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    22b0:	4b18      	ldr	r3, [pc, #96]	; (2314 <receiveBegin+0x68>)
    22b2:	2200      	movs	r2, #0
    22b4:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    22b6:	4b18      	ldr	r3, [pc, #96]	; (2318 <receiveBegin+0x6c>)
    22b8:	2200      	movs	r2, #0
    22ba:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    22bc:	4b17      	ldr	r3, [pc, #92]	; (231c <receiveBegin+0x70>)
    22be:	2200      	movs	r2, #0
    22c0:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    22c2:	4b17      	ldr	r3, [pc, #92]	; (2320 <receiveBegin+0x74>)
    22c4:	2200      	movs	r2, #0
    22c6:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    22c8:	4b16      	ldr	r3, [pc, #88]	; (2324 <receiveBegin+0x78>)
    22ca:	2200      	movs	r2, #0
    22cc:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    22ce:	4b16      	ldr	r3, [pc, #88]	; (2328 <receiveBegin+0x7c>)
    22d0:	2200      	movs	r2, #0
    22d2:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    22d4:	4b15      	ldr	r3, [pc, #84]	; (232c <receiveBegin+0x80>)
    22d6:	2200      	movs	r2, #0
    22d8:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    22da:	2028      	movs	r0, #40	; 0x28
    22dc:	4b14      	ldr	r3, [pc, #80]	; (2330 <receiveBegin+0x84>)
    22de:	4798      	blx	r3
    22e0:	1c03      	adds	r3, r0, #0
    22e2:	1c1a      	adds	r2, r3, #0
    22e4:	2304      	movs	r3, #4
    22e6:	4013      	ands	r3, r2
    22e8:	d00b      	beq.n	2302 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    22ea:	203d      	movs	r0, #61	; 0x3d
    22ec:	4b10      	ldr	r3, [pc, #64]	; (2330 <receiveBegin+0x84>)
    22ee:	4798      	blx	r3
    22f0:	1c03      	adds	r3, r0, #0
    22f2:	1c1a      	adds	r2, r3, #0
    22f4:	2304      	movs	r3, #4
    22f6:	4313      	orrs	r3, r2
    22f8:	b2db      	uxtb	r3, r3
    22fa:	203d      	movs	r0, #61	; 0x3d
    22fc:	1c19      	adds	r1, r3, #0
    22fe:	4b0d      	ldr	r3, [pc, #52]	; (2334 <receiveBegin+0x88>)
    2300:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    2302:	2025      	movs	r0, #37	; 0x25
    2304:	2140      	movs	r1, #64	; 0x40
    2306:	4b0b      	ldr	r3, [pc, #44]	; (2334 <receiveBegin+0x88>)
    2308:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    230a:	2003      	movs	r0, #3
    230c:	4b0a      	ldr	r3, [pc, #40]	; (2338 <receiveBegin+0x8c>)
    230e:	4798      	blx	r3
}
    2310:	46bd      	mov	sp, r7
    2312:	bd80      	pop	{r7, pc}
    2314:	20000212 	.word	0x20000212
    2318:	20000202 	.word	0x20000202
    231c:	20000298 	.word	0x20000298
    2320:	20000294 	.word	0x20000294
    2324:	20000296 	.word	0x20000296
    2328:	20000210 	.word	0x20000210
    232c:	200002ac 	.word	0x200002ac
    2330:	00002489 	.word	0x00002489
    2334:	000024f5 	.word	0x000024f5
    2338:	00001e89 	.word	0x00001e89

0000233c <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    233c:	b580      	push	{r7, lr}
    233e:	af00      	add	r7, sp, #0
  //system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <RFM_receiveDone+0x3c>)
    2342:	881b      	ldrh	r3, [r3, #0]
    2344:	b29b      	uxth	r3, r3
    2346:	2b03      	cmp	r3, #3
    2348:	d109      	bne.n	235e <RFM_receiveDone+0x22>
    234a:	4b0c      	ldr	r3, [pc, #48]	; (237c <RFM_receiveDone+0x40>)
    234c:	881b      	ldrh	r3, [r3, #0]
    234e:	b29b      	uxth	r3, r3
    2350:	2b00      	cmp	r3, #0
    2352:	d004      	beq.n	235e <RFM_receiveDone+0x22>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    2354:	2001      	movs	r0, #1
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <RFM_receiveDone+0x44>)
    2358:	4798      	blx	r3
    return true;
    235a:	2301      	movs	r3, #1
    235c:	e009      	b.n	2372 <RFM_receiveDone+0x36>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    235e:	4b06      	ldr	r3, [pc, #24]	; (2378 <RFM_receiveDone+0x3c>)
    2360:	881b      	ldrh	r3, [r3, #0]
    2362:	b29b      	uxth	r3, r3
    2364:	2b03      	cmp	r3, #3
    2366:	d101      	bne.n	236c <RFM_receiveDone+0x30>
  {
    //system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    return false;
    2368:	2300      	movs	r3, #0
    236a:	e002      	b.n	2372 <RFM_receiveDone+0x36>
  }
  receiveBegin();
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <RFM_receiveDone+0x48>)
    236e:	4798      	blx	r3
  return false;
    2370:	2300      	movs	r3, #0
}
    2372:	1c18      	adds	r0, r3, #0
    2374:	46bd      	mov	sp, r7
    2376:	bd80      	pop	{r7, pc}
    2378:	2000029a 	.word	0x2000029a
    237c:	20000294 	.word	0x20000294
    2380:	00001e89 	.word	0x00001e89
    2384:	000022ad 	.word	0x000022ad

00002388 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    2388:	b580      	push	{r7, lr}
    238a:	b084      	sub	sp, #16
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    2390:	2001      	movs	r0, #1
    2392:	4b24      	ldr	r3, [pc, #144]	; (2424 <RFM_encrypt+0x9c>)
    2394:	4798      	blx	r3
  if (key != 0)
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	2b00      	cmp	r3, #0
    239a:	d029      	beq.n	23f0 <RFM_encrypt+0x68>
  {
    selectrf();
    239c:	4b22      	ldr	r3, [pc, #136]	; (2428 <RFM_encrypt+0xa0>)
    239e:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    23a0:	4a22      	ldr	r2, [pc, #136]	; (242c <RFM_encrypt+0xa4>)
    23a2:	4b23      	ldr	r3, [pc, #140]	; (2430 <RFM_encrypt+0xa8>)
    23a4:	1c10      	adds	r0, r2, #0
    23a6:	21be      	movs	r1, #190	; 0xbe
    23a8:	1c1a      	adds	r2, r3, #0
    23aa:	4b22      	ldr	r3, [pc, #136]	; (2434 <RFM_encrypt+0xac>)
    23ac:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    23ae:	230f      	movs	r3, #15
    23b0:	18fb      	adds	r3, r7, r3
    23b2:	2200      	movs	r2, #0
    23b4:	701a      	strb	r2, [r3, #0]
    23b6:	e014      	b.n	23e2 <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    23b8:	230f      	movs	r3, #15
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	687a      	ldr	r2, [r7, #4]
    23c0:	18d3      	adds	r3, r2, r3
    23c2:	781b      	ldrb	r3, [r3, #0]
    23c4:	b29a      	uxth	r2, r3
    23c6:	4919      	ldr	r1, [pc, #100]	; (242c <RFM_encrypt+0xa4>)
    23c8:	4b19      	ldr	r3, [pc, #100]	; (2430 <RFM_encrypt+0xa8>)
    23ca:	1c08      	adds	r0, r1, #0
    23cc:	1c11      	adds	r1, r2, #0
    23ce:	1c1a      	adds	r2, r3, #0
    23d0:	4b18      	ldr	r3, [pc, #96]	; (2434 <RFM_encrypt+0xac>)
    23d2:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    23d4:	230f      	movs	r3, #15
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	781a      	ldrb	r2, [r3, #0]
    23da:	230f      	movs	r3, #15
    23dc:	18fb      	adds	r3, r7, r3
    23de:	3201      	adds	r2, #1
    23e0:	701a      	strb	r2, [r3, #0]
    23e2:	230f      	movs	r3, #15
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2b0f      	cmp	r3, #15
    23ea:	d9e5      	bls.n	23b8 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    23ec:	4b12      	ldr	r3, [pc, #72]	; (2438 <RFM_encrypt+0xb0>)
    23ee:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    23f0:	203d      	movs	r0, #61	; 0x3d
    23f2:	4b12      	ldr	r3, [pc, #72]	; (243c <RFM_encrypt+0xb4>)
    23f4:	4798      	blx	r3
    23f6:	1c03      	adds	r3, r0, #0
    23f8:	b2db      	uxtb	r3, r3
    23fa:	1c1a      	adds	r2, r3, #0
    23fc:	2301      	movs	r3, #1
    23fe:	439a      	bics	r2, r3
    2400:	1c13      	adds	r3, r2, #0
    2402:	b2da      	uxtb	r2, r3
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	1e59      	subs	r1, r3, #1
    2408:	418b      	sbcs	r3, r1
    240a:	b2db      	uxtb	r3, r3
    240c:	b2db      	uxtb	r3, r3
    240e:	4313      	orrs	r3, r2
    2410:	b2db      	uxtb	r3, r3
    2412:	b2db      	uxtb	r3, r3
    2414:	203d      	movs	r0, #61	; 0x3d
    2416:	1c19      	adds	r1, r3, #0
    2418:	4b09      	ldr	r3, [pc, #36]	; (2440 <RFM_encrypt+0xb8>)
    241a:	4798      	blx	r3
}
    241c:	46bd      	mov	sp, r7
    241e:	b004      	add	sp, #16
    2420:	bd80      	pop	{r7, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	00001e89 	.word	0x00001e89
    2428:	00002559 	.word	0x00002559
    242c:	200002a0 	.word	0x200002a0
    2430:	200000fe 	.word	0x200000fe
    2434:	000011ad 	.word	0x000011ad
    2438:	0000257d 	.word	0x0000257d
    243c:	00002489 	.word	0x00002489
    2440:	000024f5 	.word	0x000024f5

00002444 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    2444:	b580      	push	{r7, lr}
    2446:	b082      	sub	sp, #8
    2448:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    244a:	1dbb      	adds	r3, r7, #6
    244c:	2200      	movs	r2, #0
    244e:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    2450:	2024      	movs	r0, #36	; 0x24
    2452:	4b0c      	ldr	r3, [pc, #48]	; (2484 <readRSSI+0x40>)
    2454:	4798      	blx	r3
    2456:	1c03      	adds	r3, r0, #0
    2458:	b29b      	uxth	r3, r3
    245a:	425b      	negs	r3, r3
    245c:	b29b      	uxth	r3, r3
    245e:	b29a      	uxth	r2, r3
    2460:	1dbb      	adds	r3, r7, #6
    2462:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    2464:	1dbb      	adds	r3, r7, #6
    2466:	881b      	ldrh	r3, [r3, #0]
    2468:	b29b      	uxth	r3, r3
    246a:	b21b      	sxth	r3, r3
    246c:	105b      	asrs	r3, r3, #1
    246e:	b29a      	uxth	r2, r3
    2470:	1dbb      	adds	r3, r7, #6
    2472:	801a      	strh	r2, [r3, #0]
  return rssi;
    2474:	1dbb      	adds	r3, r7, #6
    2476:	881b      	ldrh	r3, [r3, #0]
    2478:	b29b      	uxth	r3, r3
    247a:	b21b      	sxth	r3, r3
}
    247c:	1c18      	adds	r0, r3, #0
    247e:	46bd      	mov	sp, r7
    2480:	b002      	add	sp, #8
    2482:	bd80      	pop	{r7, pc}
    2484:	00002489 	.word	0x00002489

00002488 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    2488:	b580      	push	{r7, lr}
    248a:	b084      	sub	sp, #16
    248c:	af00      	add	r7, sp, #0
    248e:	1c02      	adds	r2, r0, #0
    2490:	1dbb      	adds	r3, r7, #6
    2492:	801a      	strh	r2, [r3, #0]
  selectrf();
    2494:	4b12      	ldr	r3, [pc, #72]	; (24e0 <readReg+0x58>)
    2496:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    2498:	1dbb      	adds	r3, r7, #6
    249a:	881b      	ldrh	r3, [r3, #0]
    249c:	b29b      	uxth	r3, r3
    249e:	227f      	movs	r2, #127	; 0x7f
    24a0:	4013      	ands	r3, r2
    24a2:	b29a      	uxth	r2, r3
    24a4:	490f      	ldr	r1, [pc, #60]	; (24e4 <readReg+0x5c>)
    24a6:	4b10      	ldr	r3, [pc, #64]	; (24e8 <readReg+0x60>)
    24a8:	1c08      	adds	r0, r1, #0
    24aa:	1c11      	adds	r1, r2, #0
    24ac:	1c1a      	adds	r2, r3, #0
    24ae:	4b0f      	ldr	r3, [pc, #60]	; (24ec <readReg+0x64>)
    24b0:	4798      	blx	r3
  volatile uint16_t regval = 0;
    24b2:	230e      	movs	r3, #14
    24b4:	18fb      	adds	r3, r7, r3
    24b6:	2200      	movs	r2, #0
    24b8:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    24ba:	4a0a      	ldr	r2, [pc, #40]	; (24e4 <readReg+0x5c>)
    24bc:	230e      	movs	r3, #14
    24be:	18fb      	adds	r3, r7, r3
    24c0:	1c10      	adds	r0, r2, #0
    24c2:	2100      	movs	r1, #0
    24c4:	1c1a      	adds	r2, r3, #0
    24c6:	4b09      	ldr	r3, [pc, #36]	; (24ec <readReg+0x64>)
    24c8:	4798      	blx	r3
  unselect();
    24ca:	4b09      	ldr	r3, [pc, #36]	; (24f0 <readReg+0x68>)
    24cc:	4798      	blx	r3
  return (uint8_t)regval;
    24ce:	230e      	movs	r3, #14
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	881b      	ldrh	r3, [r3, #0]
    24d4:	b29b      	uxth	r3, r3
    24d6:	b2db      	uxtb	r3, r3
}
    24d8:	1c18      	adds	r0, r3, #0
    24da:	46bd      	mov	sp, r7
    24dc:	b004      	add	sp, #16
    24de:	bd80      	pop	{r7, pc}
    24e0:	00002559 	.word	0x00002559
    24e4:	200002a0 	.word	0x200002a0
    24e8:	200000fe 	.word	0x200000fe
    24ec:	000011ad 	.word	0x000011ad
    24f0:	0000257d 	.word	0x0000257d

000024f4 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    24f4:	b580      	push	{r7, lr}
    24f6:	b082      	sub	sp, #8
    24f8:	af00      	add	r7, sp, #0
    24fa:	1c02      	adds	r2, r0, #0
    24fc:	1dfb      	adds	r3, r7, #7
    24fe:	701a      	strb	r2, [r3, #0]
    2500:	1dbb      	adds	r3, r7, #6
    2502:	1c0a      	adds	r2, r1, #0
    2504:	701a      	strb	r2, [r3, #0]
  selectrf();
    2506:	4b0f      	ldr	r3, [pc, #60]	; (2544 <writeReg+0x50>)
    2508:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    250a:	1dfb      	adds	r3, r7, #7
    250c:	781b      	ldrb	r3, [r3, #0]
    250e:	2280      	movs	r2, #128	; 0x80
    2510:	4252      	negs	r2, r2
    2512:	4313      	orrs	r3, r2
    2514:	b2db      	uxtb	r3, r3
    2516:	b29a      	uxth	r2, r3
    2518:	490b      	ldr	r1, [pc, #44]	; (2548 <writeReg+0x54>)
    251a:	4b0c      	ldr	r3, [pc, #48]	; (254c <writeReg+0x58>)
    251c:	1c08      	adds	r0, r1, #0
    251e:	1c11      	adds	r1, r2, #0
    2520:	1c1a      	adds	r2, r3, #0
    2522:	4b0b      	ldr	r3, [pc, #44]	; (2550 <writeReg+0x5c>)
    2524:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    2526:	1dbb      	adds	r3, r7, #6
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	b29a      	uxth	r2, r3
    252c:	4906      	ldr	r1, [pc, #24]	; (2548 <writeReg+0x54>)
    252e:	4b07      	ldr	r3, [pc, #28]	; (254c <writeReg+0x58>)
    2530:	1c08      	adds	r0, r1, #0
    2532:	1c11      	adds	r1, r2, #0
    2534:	1c1a      	adds	r2, r3, #0
    2536:	4b06      	ldr	r3, [pc, #24]	; (2550 <writeReg+0x5c>)
    2538:	4798      	blx	r3
  unselect();
    253a:	4b06      	ldr	r3, [pc, #24]	; (2554 <writeReg+0x60>)
    253c:	4798      	blx	r3
}
    253e:	46bd      	mov	sp, r7
    2540:	b002      	add	sp, #8
    2542:	bd80      	pop	{r7, pc}
    2544:	00002559 	.word	0x00002559
    2548:	200002a0 	.word	0x200002a0
    254c:	200000fe 	.word	0x200000fe
    2550:	000011ad 	.word	0x000011ad
    2554:	0000257d 	.word	0x0000257d

00002558 <selectrf>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
    2558:	b580      	push	{r7, lr}
    255a:	af00      	add	r7, sp, #0

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    255c:	4a04      	ldr	r2, [pc, #16]	; (2570 <selectrf+0x18>)
    255e:	4b05      	ldr	r3, [pc, #20]	; (2574 <selectrf+0x1c>)
    2560:	1c10      	adds	r0, r2, #0
    2562:	1c19      	adds	r1, r3, #0
    2564:	2201      	movs	r2, #1
    2566:	4b04      	ldr	r3, [pc, #16]	; (2578 <selectrf+0x20>)
    2568:	4798      	blx	r3
}
    256a:	46bd      	mov	sp, r7
    256c:	bd80      	pop	{r7, pc}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	200002a0 	.word	0x200002a0
    2574:	200002b0 	.word	0x200002b0
    2578:	000012e5 	.word	0x000012e5

0000257c <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    257c:	b580      	push	{r7, lr}
    257e:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    2580:	4a05      	ldr	r2, [pc, #20]	; (2598 <unselect+0x1c>)
    2582:	4b06      	ldr	r3, [pc, #24]	; (259c <unselect+0x20>)
    2584:	1c10      	adds	r0, r2, #0
    2586:	1c19      	adds	r1, r3, #0
    2588:	2200      	movs	r2, #0
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <unselect+0x24>)
    258c:	4798      	blx	r3
  maybeInterrupts();
    258e:	4b05      	ldr	r3, [pc, #20]	; (25a4 <unselect+0x28>)
    2590:	4798      	blx	r3
}
    2592:	46bd      	mov	sp, r7
    2594:	bd80      	pop	{r7, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	200002a0 	.word	0x200002a0
    259c:	200002b0 	.word	0x200002b0
    25a0:	000012e5 	.word	0x000012e5
    25a4:	000025ed 	.word	0x000025ed

000025a8 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
    25ae:	1c02      	adds	r2, r0, #0
    25b0:	1dfb      	adds	r3, r7, #7
    25b2:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    25b4:	1dfb      	adds	r3, r7, #7
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	2b00      	cmp	r3, #0
    25ba:	d001      	beq.n	25c0 <setHighPowerRegs+0x18>
    25bc:	235d      	movs	r3, #93	; 0x5d
    25be:	e000      	b.n	25c2 <setHighPowerRegs+0x1a>
    25c0:	2355      	movs	r3, #85	; 0x55
    25c2:	205a      	movs	r0, #90	; 0x5a
    25c4:	1c19      	adds	r1, r3, #0
    25c6:	4b08      	ldr	r3, [pc, #32]	; (25e8 <setHighPowerRegs+0x40>)
    25c8:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    25ca:	1dfb      	adds	r3, r7, #7
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d001      	beq.n	25d6 <setHighPowerRegs+0x2e>
    25d2:	237c      	movs	r3, #124	; 0x7c
    25d4:	e000      	b.n	25d8 <setHighPowerRegs+0x30>
    25d6:	2370      	movs	r3, #112	; 0x70
    25d8:	205c      	movs	r0, #92	; 0x5c
    25da:	1c19      	adds	r1, r3, #0
    25dc:	4b02      	ldr	r3, [pc, #8]	; (25e8 <setHighPowerRegs+0x40>)
    25de:	4798      	blx	r3
}
    25e0:	46bd      	mov	sp, r7
    25e2:	b002      	add	sp, #8
    25e4:	bd80      	pop	{r7, pc}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	000024f5 	.word	0x000024f5

000025ec <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    25ec:	b580      	push	{r7, lr}
    25ee:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  //if (!_inISR) 
	  //system_interrupt_enable_global(); //interrupts(); // CHANGE //
    25f0:	46bd      	mov	sp, r7
    25f2:	bd80      	pop	{r7, pc}

000025f4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b084      	sub	sp, #16
    25f8:	af00      	add	r7, sp, #0
    25fa:	1c02      	adds	r2, r0, #0
    25fc:	1dfb      	adds	r3, r7, #7
    25fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2600:	230f      	movs	r3, #15
    2602:	18fb      	adds	r3, r7, r3
    2604:	1dfa      	adds	r2, r7, #7
    2606:	7812      	ldrb	r2, [r2, #0]
    2608:	09d2      	lsrs	r2, r2, #7
    260a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    260c:	230e      	movs	r3, #14
    260e:	18fb      	adds	r3, r7, r3
    2610:	1dfa      	adds	r2, r7, #7
    2612:	7812      	ldrb	r2, [r2, #0]
    2614:	0952      	lsrs	r2, r2, #5
    2616:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    261a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    261c:	230f      	movs	r3, #15
    261e:	18fb      	adds	r3, r7, r3
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	2b00      	cmp	r3, #0
    2624:	d10f      	bne.n	2646 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2626:	230f      	movs	r3, #15
    2628:	18fb      	adds	r3, r7, r3
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	009b      	lsls	r3, r3, #2
    262e:	2210      	movs	r2, #16
    2630:	4694      	mov	ip, r2
    2632:	44bc      	add	ip, r7
    2634:	4463      	add	r3, ip
    2636:	3b08      	subs	r3, #8
    2638:	681a      	ldr	r2, [r3, #0]
    263a:	230e      	movs	r3, #14
    263c:	18fb      	adds	r3, r7, r3
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	01db      	lsls	r3, r3, #7
    2642:	18d3      	adds	r3, r2, r3
    2644:	e000      	b.n	2648 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2646:	2300      	movs	r3, #0
	}
}
    2648:	1c18      	adds	r0, r3, #0
    264a:	46bd      	mov	sp, r7
    264c:	b004      	add	sp, #16
    264e:	bd80      	pop	{r7, pc}
    2650:	41004400 	.word	0x41004400

00002654 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	1c02      	adds	r2, r0, #0
    265c:	1dfb      	adds	r3, r7, #7
    265e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2660:	1dfb      	adds	r3, r7, #7
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	1c18      	adds	r0, r3, #0
    2666:	4b03      	ldr	r3, [pc, #12]	; (2674 <port_get_group_from_gpio_pin+0x20>)
    2668:	4798      	blx	r3
    266a:	1c03      	adds	r3, r0, #0
}
    266c:	1c18      	adds	r0, r3, #0
    266e:	46bd      	mov	sp, r7
    2670:	b002      	add	sp, #8
    2672:	bd80      	pop	{r7, pc}
    2674:	000025f5 	.word	0x000025f5

00002678 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2678:	b580      	push	{r7, lr}
    267a:	b084      	sub	sp, #16
    267c:	af00      	add	r7, sp, #0
    267e:	1c02      	adds	r2, r0, #0
    2680:	1dfb      	adds	r3, r7, #7
    2682:	701a      	strb	r2, [r3, #0]
    2684:	1dbb      	adds	r3, r7, #6
    2686:	1c0a      	adds	r2, r1, #0
    2688:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    268a:	1dfb      	adds	r3, r7, #7
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	1c18      	adds	r0, r3, #0
    2690:	4b0c      	ldr	r3, [pc, #48]	; (26c4 <port_pin_set_output_level+0x4c>)
    2692:	4798      	blx	r3
    2694:	1c03      	adds	r3, r0, #0
    2696:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2698:	1dfb      	adds	r3, r7, #7
    269a:	781b      	ldrb	r3, [r3, #0]
    269c:	221f      	movs	r2, #31
    269e:	4013      	ands	r3, r2
    26a0:	2201      	movs	r2, #1
    26a2:	409a      	lsls	r2, r3
    26a4:	1c13      	adds	r3, r2, #0
    26a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    26a8:	1dbb      	adds	r3, r7, #6
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	2b00      	cmp	r3, #0
    26ae:	d003      	beq.n	26b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    26b0:	68fb      	ldr	r3, [r7, #12]
    26b2:	68ba      	ldr	r2, [r7, #8]
    26b4:	619a      	str	r2, [r3, #24]
    26b6:	e002      	b.n	26be <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26b8:	68fb      	ldr	r3, [r7, #12]
    26ba:	68ba      	ldr	r2, [r7, #8]
    26bc:	615a      	str	r2, [r3, #20]
	}
}
    26be:	46bd      	mov	sp, r7
    26c0:	b004      	add	sp, #16
    26c2:	bd80      	pop	{r7, pc}
    26c4:	00002655 	.word	0x00002655

000026c8 <configure_radio>:
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA15, &config_port_pin);
}
//configure the RFM69 module
void configure_radio(void) {
    26c8:	b580      	push	{r7, lr}
    26ca:	af00      	add	r7, sp, #0
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    26cc:	205b      	movs	r0, #91	; 0x5b
    26ce:	2102      	movs	r1, #2
    26d0:	2200      	movs	r2, #0
    26d2:	4b05      	ldr	r3, [pc, #20]	; (26e8 <configure_radio+0x20>)
    26d4:	4798      	blx	r3
	RFM_setHighPower(true);
    26d6:	2001      	movs	r0, #1
    26d8:	4b04      	ldr	r3, [pc, #16]	; (26ec <configure_radio+0x24>)
    26da:	4798      	blx	r3
		
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
    26dc:	4b04      	ldr	r3, [pc, #16]	; (26f0 <configure_radio+0x28>)
    26de:	1c18      	adds	r0, r3, #0
    26e0:	4b04      	ldr	r3, [pc, #16]	; (26f4 <configure_radio+0x2c>)
    26e2:	4798      	blx	r3
}
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}
    26e8:	00001b21 	.word	0x00001b21
    26ec:	00001a69 	.word	0x00001a69
    26f0:	00008e70 	.word	0x00008e70
    26f4:	00002389 	.word	0x00002389

000026f8 <ui_init>:
	LED_On(LED_0_PIN);
}


void ui_init(void)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
    26fc:	2011      	movs	r0, #17
    26fe:	2101      	movs	r1, #1
    2700:	4b02      	ldr	r3, [pc, #8]	; (270c <ui_init+0x14>)
    2702:	4798      	blx	r3
	
	// Initialize the RFM69HCW:
	configure_radio();
    2704:	4b02      	ldr	r3, [pc, #8]	; (2710 <ui_init+0x18>)
    2706:	4798      	blx	r3
	//configure_port_pins();
}
    2708:	46bd      	mov	sp, r7
    270a:	bd80      	pop	{r7, pc}
    270c:	00002679 	.word	0x00002679
    2710:	000026c9 	.word	0x000026c9

00002714 <ui_powerdown>:

void ui_powerdown(void)
{
    2714:	b580      	push	{r7, lr}
    2716:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
    2718:	2011      	movs	r0, #17
    271a:	2101      	movs	r1, #1
    271c:	4b01      	ldr	r3, [pc, #4]	; (2724 <ui_powerdown+0x10>)
    271e:	4798      	blx	r3
}
    2720:	46bd      	mov	sp, r7
    2722:	bd80      	pop	{r7, pc}
    2724:	00002679 	.word	0x00002679

00002728 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    2728:	b580      	push	{r7, lr}
    272a:	af00      	add	r7, sp, #0
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    272c:	200f      	movs	r0, #15
    272e:	2100      	movs	r1, #0
    2730:	4b01      	ldr	r3, [pc, #4]	; (2738 <ui_wakeup_enable+0x10>)
    2732:	4798      	blx	r3
}
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}
    2738:	00003ea1 	.word	0x00003ea1

0000273c <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    273c:	b580      	push	{r7, lr}
    273e:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2740:	200f      	movs	r0, #15
    2742:	2100      	movs	r1, #0
    2744:	4b01      	ldr	r3, [pc, #4]	; (274c <ui_wakeup_disable+0x10>)
    2746:	4798      	blx	r3
}
    2748:	46bd      	mov	sp, r7
    274a:	bd80      	pop	{r7, pc}
    274c:	00003ee9 	.word	0x00003ee9

00002750 <ui_wakeup>:

void ui_wakeup(void)
{
    2750:	b580      	push	{r7, lr}
    2752:	af00      	add	r7, sp, #0
	LED_On(LED_0_PIN);
    2754:	2011      	movs	r0, #17
    2756:	2100      	movs	r1, #0
    2758:	4b01      	ldr	r3, [pc, #4]	; (2760 <ui_wakeup+0x10>)
    275a:	4798      	blx	r3
}
    275c:	46bd      	mov	sp, r7
    275e:	bd80      	pop	{r7, pc}
    2760:	00002679 	.word	0x00002679

00002764 <ui_process>:

void ui_process(uint16_t framenumber)
{
    2764:	b590      	push	{r4, r7, lr}
    2766:	b085      	sub	sp, #20
    2768:	af00      	add	r7, sp, #0
    276a:	1c02      	adds	r2, r0, #0
    276c:	1dbb      	adds	r3, r7, #6
    276e:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
    2770:	1dbb      	adds	r3, r7, #6
    2772:	881a      	ldrh	r2, [r3, #0]
    2774:	4ba6      	ldr	r3, [pc, #664]	; (2a10 <ui_process+0x2ac>)
    2776:	1c10      	adds	r0, r2, #0
    2778:	22fa      	movs	r2, #250	; 0xfa
    277a:	0091      	lsls	r1, r2, #2
    277c:	4798      	blx	r3
    277e:	1c0b      	adds	r3, r1, #0
    2780:	b29b      	uxth	r3, r3
    2782:	2b00      	cmp	r3, #0
    2784:	d103      	bne.n	278e <ui_process+0x2a>
		LED_On(LED_0_PIN);
    2786:	2011      	movs	r0, #17
    2788:	2100      	movs	r1, #0
    278a:	4ba2      	ldr	r3, [pc, #648]	; (2a14 <ui_process+0x2b0>)
    278c:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
    278e:	1dbb      	adds	r3, r7, #6
    2790:	881a      	ldrh	r2, [r3, #0]
    2792:	4b9f      	ldr	r3, [pc, #636]	; (2a10 <ui_process+0x2ac>)
    2794:	1c10      	adds	r0, r2, #0
    2796:	22fa      	movs	r2, #250	; 0xfa
    2798:	0091      	lsls	r1, r2, #2
    279a:	4798      	blx	r3
    279c:	1c0b      	adds	r3, r1, #0
    279e:	b29a      	uxth	r2, r3
    27a0:	23fa      	movs	r3, #250	; 0xfa
    27a2:	005b      	lsls	r3, r3, #1
    27a4:	429a      	cmp	r2, r3
    27a6:	d103      	bne.n	27b0 <ui_process+0x4c>
		LED_Off(LED_0_PIN);
    27a8:	2011      	movs	r0, #17
    27aa:	2101      	movs	r1, #1
    27ac:	4b99      	ldr	r3, [pc, #612]	; (2a14 <ui_process+0x2b0>)
    27ae:	4798      	blx	r3
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    27b0:	4b99      	ldr	r3, [pc, #612]	; (2a18 <ui_process+0x2b4>)
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	3301      	adds	r3, #1
    27b6:	b2da      	uxtb	r2, r3
    27b8:	4b97      	ldr	r3, [pc, #604]	; (2a18 <ui_process+0x2b4>)
    27ba:	701a      	strb	r2, [r3, #0]
	if (cpt_sof < 5) {
    27bc:	4b96      	ldr	r3, [pc, #600]	; (2a18 <ui_process+0x2b4>)
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	2b04      	cmp	r3, #4
    27c2:	d800      	bhi.n	27c6 <ui_process+0x62>
		return;
    27c4:	e120      	b.n	2a08 <ui_process+0x2a4>
	}
	cpt_sof = 0;
    27c6:	4b94      	ldr	r3, [pc, #592]	; (2a18 <ui_process+0x2b4>)
    27c8:	2200      	movs	r2, #0
    27ca:	701a      	strb	r2, [r3, #0]
	static int32_t temp = 0;
	
	static uint8_t button_info = 0x00; //order is: ? ? ? ? left_click right_click middle_click laser_on?

	// this will receive the mouse location from the camera module
	if (RFM_receiveDone()) {
    27cc:	4b93      	ldr	r3, [pc, #588]	; (2a1c <ui_process+0x2b8>)
    27ce:	4798      	blx	r3
    27d0:	1e03      	subs	r3, r0, #0
    27d2:	d100      	bne.n	27d6 <ui_process+0x72>
    27d4:	e118      	b.n	2a08 <ui_process+0x2a4>
		//info received from camera module (mouse movement)
		if (RFM_SENDERID == CAMERA_MODULE_NODE_ID) {
    27d6:	4b92      	ldr	r3, [pc, #584]	; (2a20 <ui_process+0x2bc>)
    27d8:	881b      	ldrh	r3, [r3, #0]
    27da:	b29b      	uxth	r3, r3
    27dc:	2b01      	cmp	r3, #1
    27de:	d000      	beq.n	27e2 <ui_process+0x7e>
    27e0:	e0c5      	b.n	296e <ui_process+0x20a>
			lx = x;
    27e2:	4b90      	ldr	r3, [pc, #576]	; (2a24 <ui_process+0x2c0>)
    27e4:	881a      	ldrh	r2, [r3, #0]
    27e6:	4b90      	ldr	r3, [pc, #576]	; (2a28 <ui_process+0x2c4>)
    27e8:	801a      	strh	r2, [r3, #0]
			ly = y;
    27ea:	4b90      	ldr	r3, [pc, #576]	; (2a2c <ui_process+0x2c8>)
    27ec:	881a      	ldrh	r2, [r3, #0]
    27ee:	4b90      	ldr	r3, [pc, #576]	; (2a30 <ui_process+0x2cc>)
    27f0:	801a      	strh	r2, [r3, #0]
			xCount = 0;
    27f2:	4b90      	ldr	r3, [pc, #576]	; (2a34 <ui_process+0x2d0>)
    27f4:	2200      	movs	r2, #0
    27f6:	601a      	str	r2, [r3, #0]
			yCount = 0;
    27f8:	4b8f      	ldr	r3, [pc, #572]	; (2a38 <ui_process+0x2d4>)
    27fa:	2200      	movs	r2, #0
    27fc:	601a      	str	r2, [r3, #0]

			for (int i = 0; i < RFM_DATALEN; i++) {
    27fe:	2300      	movs	r3, #0
    2800:	60fb      	str	r3, [r7, #12]
    2802:	e072      	b.n	28ea <ui_process+0x186>
				//x LSB 00<data>	x MSB 01<data>
				//y LSB 10<data>	y MSB 11<data>
				switch (RFM_DATA[i] >> 6) {
    2804:	4b8d      	ldr	r3, [pc, #564]	; (2a3c <ui_process+0x2d8>)
    2806:	68fa      	ldr	r2, [r7, #12]
    2808:	0052      	lsls	r2, r2, #1
    280a:	5ad3      	ldrh	r3, [r2, r3]
    280c:	b29b      	uxth	r3, r3
    280e:	099b      	lsrs	r3, r3, #6
    2810:	b29b      	uxth	r3, r3
    2812:	2b01      	cmp	r3, #1
    2814:	d01d      	beq.n	2852 <ui_process+0xee>
    2816:	dc02      	bgt.n	281e <ui_process+0xba>
    2818:	2b00      	cmp	r3, #0
    281a:	d005      	beq.n	2828 <ui_process+0xc4>
    281c:	e062      	b.n	28e4 <ui_process+0x180>
    281e:	2b02      	cmp	r3, #2
    2820:	d031      	beq.n	2886 <ui_process+0x122>
    2822:	2b03      	cmp	r3, #3
    2824:	d044      	beq.n	28b0 <ui_process+0x14c>
    2826:	e05d      	b.n	28e4 <ui_process+0x180>
					case 0: //x LSB
						xCount += 2;
    2828:	4b82      	ldr	r3, [pc, #520]	; (2a34 <ui_process+0x2d0>)
    282a:	681b      	ldr	r3, [r3, #0]
    282c:	1c9a      	adds	r2, r3, #2
    282e:	4b81      	ldr	r3, [pc, #516]	; (2a34 <ui_process+0x2d0>)
    2830:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    2832:	4b82      	ldr	r3, [pc, #520]	; (2a3c <ui_process+0x2d8>)
    2834:	68fa      	ldr	r2, [r7, #12]
    2836:	0052      	lsls	r2, r2, #1
    2838:	5ad3      	ldrh	r3, [r2, r3]
    283a:	b29b      	uxth	r3, r3
    283c:	1c1a      	adds	r2, r3, #0
    283e:	233f      	movs	r3, #63	; 0x3f
    2840:	401a      	ands	r2, r3
    2842:	4b7f      	ldr	r3, [pc, #508]	; (2a40 <ui_process+0x2dc>)
    2844:	601a      	str	r2, [r3, #0]
						x = temp;
    2846:	4b7e      	ldr	r3, [pc, #504]	; (2a40 <ui_process+0x2dc>)
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	b29a      	uxth	r2, r3
    284c:	4b75      	ldr	r3, [pc, #468]	; (2a24 <ui_process+0x2c0>)
    284e:	801a      	strh	r2, [r3, #0]
						break;
    2850:	e048      	b.n	28e4 <ui_process+0x180>
				
					case 1: //x MSB
						xCount += 3;
    2852:	4b78      	ldr	r3, [pc, #480]	; (2a34 <ui_process+0x2d0>)
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	1cda      	adds	r2, r3, #3
    2858:	4b76      	ldr	r3, [pc, #472]	; (2a34 <ui_process+0x2d0>)
    285a:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    285c:	4b77      	ldr	r3, [pc, #476]	; (2a3c <ui_process+0x2d8>)
    285e:	68fa      	ldr	r2, [r7, #12]
    2860:	0052      	lsls	r2, r2, #1
    2862:	5ad3      	ldrh	r3, [r2, r3]
    2864:	b29b      	uxth	r3, r3
    2866:	1c1a      	adds	r2, r3, #0
    2868:	233f      	movs	r3, #63	; 0x3f
    286a:	401a      	ands	r2, r3
    286c:	4b74      	ldr	r3, [pc, #464]	; (2a40 <ui_process+0x2dc>)
    286e:	601a      	str	r2, [r3, #0]
						x = x | (temp << 6);
    2870:	4b73      	ldr	r3, [pc, #460]	; (2a40 <ui_process+0x2dc>)
    2872:	681b      	ldr	r3, [r3, #0]
    2874:	019b      	lsls	r3, r3, #6
    2876:	b29a      	uxth	r2, r3
    2878:	4b6a      	ldr	r3, [pc, #424]	; (2a24 <ui_process+0x2c0>)
    287a:	881b      	ldrh	r3, [r3, #0]
    287c:	4313      	orrs	r3, r2
    287e:	b29a      	uxth	r2, r3
    2880:	4b68      	ldr	r3, [pc, #416]	; (2a24 <ui_process+0x2c0>)
    2882:	801a      	strh	r2, [r3, #0]
						break;
    2884:	e02e      	b.n	28e4 <ui_process+0x180>
				
					case 2: //y LSB
						yCount += 2;
    2886:	4b6c      	ldr	r3, [pc, #432]	; (2a38 <ui_process+0x2d4>)
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	1c9a      	adds	r2, r3, #2
    288c:	4b6a      	ldr	r3, [pc, #424]	; (2a38 <ui_process+0x2d4>)
    288e:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    2890:	4b6a      	ldr	r3, [pc, #424]	; (2a3c <ui_process+0x2d8>)
    2892:	68fa      	ldr	r2, [r7, #12]
    2894:	0052      	lsls	r2, r2, #1
    2896:	5ad3      	ldrh	r3, [r2, r3]
    2898:	b29b      	uxth	r3, r3
    289a:	1c1a      	adds	r2, r3, #0
    289c:	233f      	movs	r3, #63	; 0x3f
    289e:	401a      	ands	r2, r3
    28a0:	4b67      	ldr	r3, [pc, #412]	; (2a40 <ui_process+0x2dc>)
    28a2:	601a      	str	r2, [r3, #0]
						y = temp;
    28a4:	4b66      	ldr	r3, [pc, #408]	; (2a40 <ui_process+0x2dc>)
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	b29a      	uxth	r2, r3
    28aa:	4b60      	ldr	r3, [pc, #384]	; (2a2c <ui_process+0x2c8>)
    28ac:	801a      	strh	r2, [r3, #0]
						break;
    28ae:	e019      	b.n	28e4 <ui_process+0x180>
				
					case 3: //y MSB
						yCount += 3;
    28b0:	4b61      	ldr	r3, [pc, #388]	; (2a38 <ui_process+0x2d4>)
    28b2:	681b      	ldr	r3, [r3, #0]
    28b4:	1cda      	adds	r2, r3, #3
    28b6:	4b60      	ldr	r3, [pc, #384]	; (2a38 <ui_process+0x2d4>)
    28b8:	601a      	str	r2, [r3, #0]
						temp = (RFM_DATA[i] & 0x3F);
    28ba:	4b60      	ldr	r3, [pc, #384]	; (2a3c <ui_process+0x2d8>)
    28bc:	68fa      	ldr	r2, [r7, #12]
    28be:	0052      	lsls	r2, r2, #1
    28c0:	5ad3      	ldrh	r3, [r2, r3]
    28c2:	b29b      	uxth	r3, r3
    28c4:	1c1a      	adds	r2, r3, #0
    28c6:	233f      	movs	r3, #63	; 0x3f
    28c8:	401a      	ands	r2, r3
    28ca:	4b5d      	ldr	r3, [pc, #372]	; (2a40 <ui_process+0x2dc>)
    28cc:	601a      	str	r2, [r3, #0]
						y = y | (temp << 6);
    28ce:	4b5c      	ldr	r3, [pc, #368]	; (2a40 <ui_process+0x2dc>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	019b      	lsls	r3, r3, #6
    28d4:	b29a      	uxth	r2, r3
    28d6:	4b55      	ldr	r3, [pc, #340]	; (2a2c <ui_process+0x2c8>)
    28d8:	881b      	ldrh	r3, [r3, #0]
    28da:	4313      	orrs	r3, r2
    28dc:	b29a      	uxth	r2, r3
    28de:	4b53      	ldr	r3, [pc, #332]	; (2a2c <ui_process+0x2c8>)
    28e0:	801a      	strh	r2, [r3, #0]
						break;
    28e2:	46c0      	nop			; (mov r8, r8)
			lx = x;
			ly = y;
			xCount = 0;
			yCount = 0;

			for (int i = 0; i < RFM_DATALEN; i++) {
    28e4:	68fb      	ldr	r3, [r7, #12]
    28e6:	3301      	adds	r3, #1
    28e8:	60fb      	str	r3, [r7, #12]
    28ea:	4b56      	ldr	r3, [pc, #344]	; (2a44 <ui_process+0x2e0>)
    28ec:	881b      	ldrh	r3, [r3, #0]
    28ee:	b29b      	uxth	r3, r3
    28f0:	1e1a      	subs	r2, r3, #0
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	429a      	cmp	r2, r3
    28f6:	dd00      	ble.n	28fa <ui_process+0x196>
    28f8:	e784      	b.n	2804 <ui_process+0xa0>
						y = y | (temp << 6);
						break;
				}
			}

			if(xCount != 5)
    28fa:	4b4e      	ldr	r3, [pc, #312]	; (2a34 <ui_process+0x2d0>)
    28fc:	681b      	ldr	r3, [r3, #0]
    28fe:	2b05      	cmp	r3, #5
    2900:	d003      	beq.n	290a <ui_process+0x1a6>
				x = lx;
    2902:	4b49      	ldr	r3, [pc, #292]	; (2a28 <ui_process+0x2c4>)
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	4b47      	ldr	r3, [pc, #284]	; (2a24 <ui_process+0x2c0>)
    2908:	801a      	strh	r2, [r3, #0]
			if(yCount != 5)
    290a:	4b4b      	ldr	r3, [pc, #300]	; (2a38 <ui_process+0x2d4>)
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	2b05      	cmp	r3, #5
    2910:	d003      	beq.n	291a <ui_process+0x1b6>
				y = ly;
    2912:	4b47      	ldr	r3, [pc, #284]	; (2a30 <ui_process+0x2cc>)
    2914:	881a      	ldrh	r2, [r3, #0]
    2916:	4b45      	ldr	r3, [pc, #276]	; (2a2c <ui_process+0x2c8>)
    2918:	801a      	strh	r2, [r3, #0]

			x = x*(0x7FFF/427);
    291a:	4b42      	ldr	r3, [pc, #264]	; (2a24 <ui_process+0x2c0>)
    291c:	881b      	ldrh	r3, [r3, #0]
    291e:	b29b      	uxth	r3, r3
    2920:	224c      	movs	r2, #76	; 0x4c
    2922:	4353      	muls	r3, r2
    2924:	b29b      	uxth	r3, r3
    2926:	b29a      	uxth	r2, r3
    2928:	4b3e      	ldr	r3, [pc, #248]	; (2a24 <ui_process+0x2c0>)
    292a:	801a      	strh	r2, [r3, #0]
			y = y*(0x7FFF/320);
    292c:	4b3f      	ldr	r3, [pc, #252]	; (2a2c <ui_process+0x2c8>)
    292e:	881b      	ldrh	r3, [r3, #0]
    2930:	b29b      	uxth	r3, r3
    2932:	2266      	movs	r2, #102	; 0x66
    2934:	4353      	muls	r3, r2
    2936:	b29b      	uxth	r3, r3
    2938:	b29a      	uxth	r2, r3
    293a:	4b3c      	ldr	r3, [pc, #240]	; (2a2c <ui_process+0x2c8>)
    293c:	801a      	strh	r2, [r3, #0]
			
			mouse_move(x, y);
    293e:	4b39      	ldr	r3, [pc, #228]	; (2a24 <ui_process+0x2c0>)
    2940:	881b      	ldrh	r3, [r3, #0]
    2942:	b29a      	uxth	r2, r3
    2944:	4b39      	ldr	r3, [pc, #228]	; (2a2c <ui_process+0x2c8>)
    2946:	881b      	ldrh	r3, [r3, #0]
    2948:	b29b      	uxth	r3, r3
    294a:	1c10      	adds	r0, r2, #0
    294c:	1c19      	adds	r1, r3, #0
    294e:	4b3e      	ldr	r3, [pc, #248]	; (2a48 <ui_process+0x2e4>)
    2950:	4798      	blx	r3
			//udi_hid_mouse_moveY(y);
			//udi_hid_mouse_moveX(x);
			
			// request info from laser module
			radio_sendbuffer[0] = 'B';
    2952:	4b3e      	ldr	r3, [pc, #248]	; (2a4c <ui_process+0x2e8>)
    2954:	2242      	movs	r2, #66	; 0x42
    2956:	701a      	strb	r2, [r3, #0]
			RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
    2958:	4b3d      	ldr	r3, [pc, #244]	; (2a50 <ui_process+0x2ec>)
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	b2db      	uxtb	r3, r3
    295e:	4a3b      	ldr	r2, [pc, #236]	; (2a4c <ui_process+0x2e8>)
    2960:	2003      	movs	r0, #3
    2962:	1c11      	adds	r1, r2, #0
    2964:	1c1a      	adds	r2, r3, #0
    2966:	2300      	movs	r3, #0
    2968:	4c3a      	ldr	r4, [pc, #232]	; (2a54 <ui_process+0x2f0>)
    296a:	47a0      	blx	r4
    296c:	e04c      	b.n	2a08 <ui_process+0x2a4>
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
    296e:	4b2c      	ldr	r3, [pc, #176]	; (2a20 <ui_process+0x2bc>)
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	2b03      	cmp	r3, #3
    2976:	d147      	bne.n	2a08 <ui_process+0x2a4>
			for (int i = 0; i < RFM_DATALEN; i++) {
    2978:	2300      	movs	r3, #0
    297a:	60bb      	str	r3, [r7, #8]
    297c:	e03d      	b.n	29fa <ui_process+0x296>
				switch (i) {
    297e:	68bb      	ldr	r3, [r7, #8]
    2980:	2b01      	cmp	r3, #1
    2982:	d034      	beq.n	29ee <ui_process+0x28a>
    2984:	2b02      	cmp	r3, #2
    2986:	d134      	bne.n	29f2 <ui_process+0x28e>
					case 1: //y axis scroll
					//udi_hid_mouse_moveScroll(RFM_DATA[i]);
						break;
					
					case 2: //button info byte
						button_info = RFM_DATA[i];
    2988:	4b2c      	ldr	r3, [pc, #176]	; (2a3c <ui_process+0x2d8>)
    298a:	68ba      	ldr	r2, [r7, #8]
    298c:	0052      	lsls	r2, r2, #1
    298e:	5ad3      	ldrh	r3, [r2, r3]
    2990:	b29b      	uxth	r3, r3
    2992:	b2da      	uxtb	r2, r3
    2994:	4b30      	ldr	r3, [pc, #192]	; (2a58 <ui_process+0x2f4>)
    2996:	701a      	strb	r2, [r3, #0]
						
						mouse_move(x, y);
    2998:	4b22      	ldr	r3, [pc, #136]	; (2a24 <ui_process+0x2c0>)
    299a:	881b      	ldrh	r3, [r3, #0]
    299c:	b29a      	uxth	r2, r3
    299e:	4b23      	ldr	r3, [pc, #140]	; (2a2c <ui_process+0x2c8>)
    29a0:	881b      	ldrh	r3, [r3, #0]
    29a2:	b29b      	uxth	r3, r3
    29a4:	1c10      	adds	r0, r2, #0
    29a6:	1c19      	adds	r1, r3, #0
    29a8:	4b27      	ldr	r3, [pc, #156]	; (2a48 <ui_process+0x2e4>)
    29aa:	4798      	blx	r3
						mouse_buttons((button_info & 0x08) >> 3, (button_info & 0x02) >> 1, (button_info & 0x04) >> 2);
    29ac:	4b2a      	ldr	r3, [pc, #168]	; (2a58 <ui_process+0x2f4>)
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	1c1a      	adds	r2, r3, #0
    29b2:	2308      	movs	r3, #8
    29b4:	4013      	ands	r3, r2
    29b6:	10db      	asrs	r3, r3, #3
    29b8:	1e5a      	subs	r2, r3, #1
    29ba:	4193      	sbcs	r3, r2
    29bc:	b2d9      	uxtb	r1, r3
    29be:	4b26      	ldr	r3, [pc, #152]	; (2a58 <ui_process+0x2f4>)
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	1c1a      	adds	r2, r3, #0
    29c4:	2302      	movs	r3, #2
    29c6:	4013      	ands	r3, r2
    29c8:	105b      	asrs	r3, r3, #1
    29ca:	1e5a      	subs	r2, r3, #1
    29cc:	4193      	sbcs	r3, r2
    29ce:	b2da      	uxtb	r2, r3
    29d0:	4b21      	ldr	r3, [pc, #132]	; (2a58 <ui_process+0x2f4>)
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	1c18      	adds	r0, r3, #0
    29d6:	2304      	movs	r3, #4
    29d8:	4003      	ands	r3, r0
    29da:	109b      	asrs	r3, r3, #2
    29dc:	1e58      	subs	r0, r3, #1
    29de:	4183      	sbcs	r3, r0
    29e0:	b2db      	uxtb	r3, r3
    29e2:	1c08      	adds	r0, r1, #0
    29e4:	1c11      	adds	r1, r2, #0
    29e6:	1c1a      	adds	r2, r3, #0
    29e8:	4b1c      	ldr	r3, [pc, #112]	; (2a5c <ui_process+0x2f8>)
    29ea:	4798      	blx	r3
						//udi_hid_mouse_btnleft((button_info & 0x08) >> 3);
						//udi_hid_mouse_btnright((button_info & 0x04) >> 2);
						//udi_hid_mouse_btnmiddle((button_info & 0x02) >> 1);
						
						break;
    29ec:	e002      	b.n	29f4 <ui_process+0x290>
					case 0: //x axis scroll
						break;
					
					case 1: //y axis scroll
					//udi_hid_mouse_moveScroll(RFM_DATA[i]);
						break;
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	e000      	b.n	29f4 <ui_process+0x290>
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
			for (int i = 0; i < RFM_DATALEN; i++) {
				switch (i) {
					case 0: //x axis scroll
						break;
    29f2:	46c0      	nop			; (mov r8, r8)
			RFM_send(LASER_MODULE_NODE_ID, radio_sendbuffer, radio_sendlength, false); //send empty packet
		}
		
		//info received from laser module (clicks)
		else if (RFM_SENDERID == LASER_MODULE_NODE_ID) {
			for (int i = 0; i < RFM_DATALEN; i++) {
    29f4:	68bb      	ldr	r3, [r7, #8]
    29f6:	3301      	adds	r3, #1
    29f8:	60bb      	str	r3, [r7, #8]
    29fa:	4b12      	ldr	r3, [pc, #72]	; (2a44 <ui_process+0x2e0>)
    29fc:	881b      	ldrh	r3, [r3, #0]
    29fe:	b29b      	uxth	r3, r3
    2a00:	1e1a      	subs	r2, r3, #0
    2a02:	68bb      	ldr	r3, [r7, #8]
    2a04:	429a      	cmp	r2, r3
    2a06:	dcba      	bgt.n	297e <ui_process+0x21a>

		/*x += 50;
		y += 50;
		udi_hid_mouse_moveX(x);
		udi_hid_mouse_moveY(y);*/
}
    2a08:	46bd      	mov	sp, r7
    2a0a:	b005      	add	sp, #20
    2a0c:	bd90      	pop	{r4, r7, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	00008b9d 	.word	0x00008b9d
    2a14:	00002679 	.word	0x00002679
    2a18:	2000013e 	.word	0x2000013e
    2a1c:	0000233d 	.word	0x0000233d
    2a20:	20000202 	.word	0x20000202
    2a24:	20000140 	.word	0x20000140
    2a28:	20000142 	.word	0x20000142
    2a2c:	20000144 	.word	0x20000144
    2a30:	20000146 	.word	0x20000146
    2a34:	20000148 	.word	0x20000148
    2a38:	2000014c 	.word	0x2000014c
    2a3c:	20000218 	.word	0x20000218
    2a40:	20000150 	.word	0x20000150
    2a44:	20000212 	.word	0x20000212
    2a48:	00002c45 	.word	0x00002c45
    2a4c:	20000100 	.word	0x20000100
    2a50:	20000000 	.word	0x20000000
    2a54:	00002029 	.word	0x00002029
    2a58:	20000154 	.word	0x20000154
    2a5c:	00002b7d 	.word	0x00002b7d

00002a60 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a66:	f3ef 8310 	mrs	r3, PRIMASK
    2a6a:	603b      	str	r3, [r7, #0]
  return(result);
    2a6c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    2a6e:	425a      	negs	r2, r3
    2a70:	4153      	adcs	r3, r2
    2a72:	b2db      	uxtb	r3, r3
    2a74:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2a76:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2a78:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2a7c:	4b03      	ldr	r3, [pc, #12]	; (2a8c <cpu_irq_save+0x2c>)
    2a7e:	2200      	movs	r2, #0
    2a80:	701a      	strb	r2, [r3, #0]
	return flags;
    2a82:	687b      	ldr	r3, [r7, #4]
}
    2a84:	1c18      	adds	r0, r3, #0
    2a86:	46bd      	mov	sp, r7
    2a88:	b002      	add	sp, #8
    2a8a:	bd80      	pop	{r7, pc}
    2a8c:	200000dc 	.word	0x200000dc

00002a90 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b082      	sub	sp, #8
    2a94:	af00      	add	r7, sp, #0
    2a96:	6078      	str	r0, [r7, #4]
	return (flags);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	1e5a      	subs	r2, r3, #1
    2a9c:	4193      	sbcs	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
}
    2aa0:	1c18      	adds	r0, r3, #0
    2aa2:	46bd      	mov	sp, r7
    2aa4:	b002      	add	sp, #8
    2aa6:	bd80      	pop	{r7, pc}

00002aa8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2aa8:	b580      	push	{r7, lr}
    2aaa:	b082      	sub	sp, #8
    2aac:	af00      	add	r7, sp, #0
    2aae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	1c18      	adds	r0, r3, #0
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <cpu_irq_restore+0x28>)
    2ab6:	4798      	blx	r3
    2ab8:	1e03      	subs	r3, r0, #0
    2aba:	d005      	beq.n	2ac8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    2abc:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <cpu_irq_restore+0x2c>)
    2abe:	2201      	movs	r2, #1
    2ac0:	701a      	strb	r2, [r3, #0]
    2ac2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2ac6:	b662      	cpsie	i
}
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	00002a91 	.word	0x00002a91
    2ad4:	200000dc 	.word	0x200000dc

00002ad8 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    2adc:	4b0b      	ldr	r3, [pc, #44]	; (2b0c <udi_hid_mouse_enable+0x34>)
    2ade:	2200      	movs	r2, #0
    2ae0:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    2ae2:	4b0b      	ldr	r3, [pc, #44]	; (2b10 <udi_hid_mouse_enable+0x38>)
    2ae4:	2200      	movs	r2, #0
    2ae6:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    2ae8:	4b0a      	ldr	r3, [pc, #40]	; (2b14 <udi_hid_mouse_enable+0x3c>)
    2aea:	2200      	movs	r2, #0
    2aec:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    2aee:	4b0a      	ldr	r3, [pc, #40]	; (2b18 <udi_hid_mouse_enable+0x40>)
    2af0:	1c18      	adds	r0, r3, #0
    2af2:	2100      	movs	r1, #0
    2af4:	2207      	movs	r2, #7
    2af6:	4b09      	ldr	r3, [pc, #36]	; (2b1c <udi_hid_mouse_enable+0x44>)
    2af8:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2afa:	4b09      	ldr	r3, [pc, #36]	; (2b20 <udi_hid_mouse_enable+0x48>)
    2afc:	2200      	movs	r2, #0
    2afe:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    2b00:	4b08      	ldr	r3, [pc, #32]	; (2b24 <udi_hid_mouse_enable+0x4c>)
    2b02:	4798      	blx	r3
    2b04:	1c03      	adds	r3, r0, #0
}
    2b06:	1c18      	adds	r0, r3, #0
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}
    2b0c:	20000158 	.word	0x20000158
    2b10:	2000015c 	.word	0x2000015c
    2b14:	20000167 	.word	0x20000167
    2b18:	20000160 	.word	0x20000160
    2b1c:	00008e33 	.word	0x00008e33
    2b20:	2000015d 	.word	0x2000015d
    2b24:	00008a65 	.word	0x00008a65

00002b28 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    2b2c:	4b01      	ldr	r3, [pc, #4]	; (2b34 <udi_hid_mouse_disable+0xc>)
    2b2e:	4798      	blx	r3
}
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}
    2b34:	00008a7d 	.word	0x00008a7d

00002b38 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2b38:	b598      	push	{r3, r4, r7, lr}
    2b3a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2b3c:	4804      	ldr	r0, [pc, #16]	; (2b50 <udi_hid_mouse_setup+0x18>)
    2b3e:	4905      	ldr	r1, [pc, #20]	; (2b54 <udi_hid_mouse_setup+0x1c>)
    2b40:	4a05      	ldr	r2, [pc, #20]	; (2b58 <udi_hid_mouse_setup+0x20>)
    2b42:	4b06      	ldr	r3, [pc, #24]	; (2b5c <udi_hid_mouse_setup+0x24>)
    2b44:	4c06      	ldr	r4, [pc, #24]	; (2b60 <udi_hid_mouse_setup+0x28>)
    2b46:	47a0      	blx	r4
    2b48:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    2b4a:	1c18      	adds	r0, r3, #0
    2b4c:	46bd      	mov	sp, r7
    2b4e:	bd98      	pop	{r3, r4, r7, pc}
    2b50:	20000158 	.word	0x20000158
    2b54:	2000015c 	.word	0x2000015c
    2b58:	20000018 	.word	0x20000018
    2b5c:	00002b71 	.word	0x00002b71
    2b60:	00002d7d 	.word	0x00002d7d

00002b64 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
	return 0;
    2b68:	2300      	movs	r3, #0
}
    2b6a:	1c18      	adds	r0, r3, #0
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd80      	pop	{r7, pc}

00002b70 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0
	return false;
    2b74:	2300      	movs	r3, #0
}
    2b76:	1c18      	adds	r0, r3, #0
    2b78:	46bd      	mov	sp, r7
    2b7a:	bd80      	pop	{r7, pc}

00002b7c <mouse_buttons>:

//--------------------------------------------
//------ Internal routines

bool mouse_buttons(bool left, bool middle, bool right)
{
    2b7c:	b590      	push	{r4, r7, lr}
    2b7e:	b085      	sub	sp, #20
    2b80:	af00      	add	r7, sp, #0
    2b82:	1c04      	adds	r4, r0, #0
    2b84:	1c08      	adds	r0, r1, #0
    2b86:	1c11      	adds	r1, r2, #0
    2b88:	1dfb      	adds	r3, r7, #7
    2b8a:	1c22      	adds	r2, r4, #0
    2b8c:	701a      	strb	r2, [r3, #0]
    2b8e:	1dbb      	adds	r3, r7, #6
    2b90:	1c02      	adds	r2, r0, #0
    2b92:	701a      	strb	r2, [r3, #0]
    2b94:	1d7b      	adds	r3, r7, #5
    2b96:	1c0a      	adds	r2, r1, #0
    2b98:	701a      	strb	r2, [r3, #0]
	
		irqflags_t flags = cpu_irq_save();
    2b9a:	4b25      	ldr	r3, [pc, #148]	; (2c30 <mouse_buttons+0xb4>)
    2b9c:	4798      	blx	r3
    2b9e:	1c03      	adds	r3, r0, #0
    2ba0:	60fb      	str	r3, [r7, #12]

		// Modify buttons report
		if (HID_MOUSE_BTN_DOWN == left)
    2ba2:	1dfb      	adds	r3, r7, #7
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d007      	beq.n	2bba <mouse_buttons+0x3e>
			udi_hid_mouse_report[0] |= 0x01;
    2baa:	4b22      	ldr	r3, [pc, #136]	; (2c34 <mouse_buttons+0xb8>)
    2bac:	781b      	ldrb	r3, [r3, #0]
    2bae:	2201      	movs	r2, #1
    2bb0:	4313      	orrs	r3, r2
    2bb2:	b2da      	uxtb	r2, r3
    2bb4:	4b1f      	ldr	r3, [pc, #124]	; (2c34 <mouse_buttons+0xb8>)
    2bb6:	701a      	strb	r2, [r3, #0]
    2bb8:	e006      	b.n	2bc8 <mouse_buttons+0x4c>
		else
			udi_hid_mouse_report[0] &= ~(unsigned)0x01;
    2bba:	4b1e      	ldr	r3, [pc, #120]	; (2c34 <mouse_buttons+0xb8>)
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	2201      	movs	r2, #1
    2bc0:	4393      	bics	r3, r2
    2bc2:	b2da      	uxtb	r2, r3
    2bc4:	4b1b      	ldr	r3, [pc, #108]	; (2c34 <mouse_buttons+0xb8>)
    2bc6:	701a      	strb	r2, [r3, #0]
		
		if (HID_MOUSE_BTN_DOWN == right)
    2bc8:	1d7b      	adds	r3, r7, #5
    2bca:	781b      	ldrb	r3, [r3, #0]
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d007      	beq.n	2be0 <mouse_buttons+0x64>
			udi_hid_mouse_report[0] |= 0x02;
    2bd0:	4b18      	ldr	r3, [pc, #96]	; (2c34 <mouse_buttons+0xb8>)
    2bd2:	781b      	ldrb	r3, [r3, #0]
    2bd4:	2202      	movs	r2, #2
    2bd6:	4313      	orrs	r3, r2
    2bd8:	b2da      	uxtb	r2, r3
    2bda:	4b16      	ldr	r3, [pc, #88]	; (2c34 <mouse_buttons+0xb8>)
    2bdc:	701a      	strb	r2, [r3, #0]
    2bde:	e006      	b.n	2bee <mouse_buttons+0x72>
		else
			udi_hid_mouse_report[0] &= ~(unsigned)0x02;
    2be0:	4b14      	ldr	r3, [pc, #80]	; (2c34 <mouse_buttons+0xb8>)
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	2202      	movs	r2, #2
    2be6:	4393      	bics	r3, r2
    2be8:	b2da      	uxtb	r2, r3
    2bea:	4b12      	ldr	r3, [pc, #72]	; (2c34 <mouse_buttons+0xb8>)
    2bec:	701a      	strb	r2, [r3, #0]
		
		if (HID_MOUSE_BTN_DOWN == middle)
    2bee:	1dbb      	adds	r3, r7, #6
    2bf0:	781b      	ldrb	r3, [r3, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d007      	beq.n	2c06 <mouse_buttons+0x8a>
			udi_hid_mouse_report[0] |= 0x04;
    2bf6:	4b0f      	ldr	r3, [pc, #60]	; (2c34 <mouse_buttons+0xb8>)
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	2204      	movs	r2, #4
    2bfc:	4313      	orrs	r3, r2
    2bfe:	b2da      	uxtb	r2, r3
    2c00:	4b0c      	ldr	r3, [pc, #48]	; (2c34 <mouse_buttons+0xb8>)
    2c02:	701a      	strb	r2, [r3, #0]
    2c04:	e006      	b.n	2c14 <mouse_buttons+0x98>
		else
			udi_hid_mouse_report[0] &= ~(unsigned)0x04;
    2c06:	4b0b      	ldr	r3, [pc, #44]	; (2c34 <mouse_buttons+0xb8>)
    2c08:	781b      	ldrb	r3, [r3, #0]
    2c0a:	2204      	movs	r2, #4
    2c0c:	4393      	bics	r3, r2
    2c0e:	b2da      	uxtb	r2, r3
    2c10:	4b08      	ldr	r3, [pc, #32]	; (2c34 <mouse_buttons+0xb8>)
    2c12:	701a      	strb	r2, [r3, #0]

		// Use mouse move routine

		// Valid and send report
		udi_hid_mouse_b_report_valid = true;
    2c14:	4b08      	ldr	r3, [pc, #32]	; (2c38 <mouse_buttons+0xbc>)
    2c16:	2201      	movs	r2, #1
    2c18:	701a      	strb	r2, [r3, #0]
		udi_hid_mouse_send_report();
    2c1a:	4b08      	ldr	r3, [pc, #32]	; (2c3c <mouse_buttons+0xc0>)
    2c1c:	4798      	blx	r3

		cpu_irq_restore(flags);
    2c1e:	68fb      	ldr	r3, [r7, #12]
    2c20:	1c18      	adds	r0, r3, #0
    2c22:	4b07      	ldr	r3, [pc, #28]	; (2c40 <mouse_buttons+0xc4>)
    2c24:	4798      	blx	r3

		return true;
    2c26:	2301      	movs	r3, #1
}
    2c28:	1c18      	adds	r0, r3, #0
    2c2a:	46bd      	mov	sp, r7
    2c2c:	b005      	add	sp, #20
    2c2e:	bd90      	pop	{r4, r7, pc}
    2c30:	00002a61 	.word	0x00002a61
    2c34:	20000160 	.word	0x20000160
    2c38:	2000015d 	.word	0x2000015d
    2c3c:	00002cc9 	.word	0x00002cc9
    2c40:	00002aa9 	.word	0x00002aa9

00002c44 <mouse_move>:
	cpu_irq_restore(flags);
	return true;
}

bool mouse_move(uint16_t x, uint16_t y)
{
    2c44:	b580      	push	{r7, lr}
    2c46:	b084      	sub	sp, #16
    2c48:	af00      	add	r7, sp, #0
    2c4a:	1c02      	adds	r2, r0, #0
    2c4c:	1dbb      	adds	r3, r7, #6
    2c4e:	801a      	strh	r2, [r3, #0]
    2c50:	1d3b      	adds	r3, r7, #4
    2c52:	1c0a      	adds	r2, r1, #0
    2c54:	801a      	strh	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2c56:	4b17      	ldr	r3, [pc, #92]	; (2cb4 <mouse_move+0x70>)
    2c58:	4798      	blx	r3
    2c5a:	1c03      	adds	r3, r0, #0
    2c5c:	60fb      	str	r3, [r7, #12]

	udi_hid_mouse_report[1] = x & 0x00FF;
    2c5e:	1dbb      	adds	r3, r7, #6
    2c60:	881b      	ldrh	r3, [r3, #0]
    2c62:	b2da      	uxtb	r2, r3
    2c64:	4b14      	ldr	r3, [pc, #80]	; (2cb8 <mouse_move+0x74>)
    2c66:	705a      	strb	r2, [r3, #1]
	udi_hid_mouse_report[2] = (x & 0x7F00) >> 8;
    2c68:	1dbb      	adds	r3, r7, #6
    2c6a:	881a      	ldrh	r2, [r3, #0]
    2c6c:	23fe      	movs	r3, #254	; 0xfe
    2c6e:	01db      	lsls	r3, r3, #7
    2c70:	4013      	ands	r3, r2
    2c72:	121b      	asrs	r3, r3, #8
    2c74:	b2da      	uxtb	r2, r3
    2c76:	4b10      	ldr	r3, [pc, #64]	; (2cb8 <mouse_move+0x74>)
    2c78:	709a      	strb	r2, [r3, #2]
	udi_hid_mouse_report[3] = y & 0x00FF;
    2c7a:	1d3b      	adds	r3, r7, #4
    2c7c:	881b      	ldrh	r3, [r3, #0]
    2c7e:	b2da      	uxtb	r2, r3
    2c80:	4b0d      	ldr	r3, [pc, #52]	; (2cb8 <mouse_move+0x74>)
    2c82:	70da      	strb	r2, [r3, #3]
	udi_hid_mouse_report[4] = (y & 0x7F00) >> 8;
    2c84:	1d3b      	adds	r3, r7, #4
    2c86:	881a      	ldrh	r2, [r3, #0]
    2c88:	23fe      	movs	r3, #254	; 0xfe
    2c8a:	01db      	lsls	r3, r3, #7
    2c8c:	4013      	ands	r3, r2
    2c8e:	121b      	asrs	r3, r3, #8
    2c90:	b2da      	uxtb	r2, r3
    2c92:	4b09      	ldr	r3, [pc, #36]	; (2cb8 <mouse_move+0x74>)
    2c94:	711a      	strb	r2, [r3, #4]

	// Valid and send report

	udi_hid_mouse_b_report_valid = true;
    2c96:	4b09      	ldr	r3, [pc, #36]	; (2cbc <mouse_move+0x78>)
    2c98:	2201      	movs	r2, #1
    2c9a:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_send_report();
    2c9c:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <mouse_move+0x7c>)
    2c9e:	4798      	blx	r3

	cpu_irq_restore(flags);
    2ca0:	68fb      	ldr	r3, [r7, #12]
    2ca2:	1c18      	adds	r0, r3, #0
    2ca4:	4b07      	ldr	r3, [pc, #28]	; (2cc4 <mouse_move+0x80>)
    2ca6:	4798      	blx	r3
	return true;
    2ca8:	2301      	movs	r3, #1
}
    2caa:	1c18      	adds	r0, r3, #0
    2cac:	46bd      	mov	sp, r7
    2cae:	b004      	add	sp, #16
    2cb0:	bd80      	pop	{r7, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	00002a61 	.word	0x00002a61
    2cb8:	20000160 	.word	0x20000160
    2cbc:	2000015d 	.word	0x2000015d
    2cc0:	00002cc9 	.word	0x00002cc9
    2cc4:	00002aa9 	.word	0x00002aa9

00002cc8 <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 10, false);
}


static bool udi_hid_mouse_send_report(void)
{
    2cc8:	b590      	push	{r4, r7, lr}
    2cca:	b083      	sub	sp, #12
    2ccc:	af02      	add	r7, sp, #8
	if (udi_hid_mouse_report_trans_ongoing)
    2cce:	4b14      	ldr	r3, [pc, #80]	; (2d20 <udi_hid_mouse_send_report+0x58>)
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d001      	beq.n	2cda <udi_hid_mouse_send_report+0x12>
		return false;	// Transfer on going then send this one after transfer complete
    2cd6:	2300      	movs	r3, #0
    2cd8:	e01e      	b.n	2d18 <udi_hid_mouse_send_report+0x50>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
    2cda:	4b12      	ldr	r3, [pc, #72]	; (2d24 <udi_hid_mouse_send_report+0x5c>)
    2cdc:	4a12      	ldr	r2, [pc, #72]	; (2d28 <udi_hid_mouse_send_report+0x60>)
    2cde:	6811      	ldr	r1, [r2, #0]
    2ce0:	6019      	str	r1, [r3, #0]
    2ce2:	8891      	ldrh	r1, [r2, #4]
    2ce4:	8099      	strh	r1, [r3, #4]
    2ce6:	7992      	ldrb	r2, [r2, #6]
    2ce8:	719a      	strb	r2, [r3, #6]
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
    2cea:	4b10      	ldr	r3, [pc, #64]	; (2d2c <udi_hid_mouse_send_report+0x64>)
    2cec:	1c18      	adds	r0, r3, #0
    2cee:	2100      	movs	r1, #0
    2cf0:	2203      	movs	r2, #3
    2cf2:	4b0f      	ldr	r3, [pc, #60]	; (2d30 <udi_hid_mouse_send_report+0x68>)
    2cf4:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2cf6:	4b0f      	ldr	r3, [pc, #60]	; (2d34 <udi_hid_mouse_send_report+0x6c>)
    2cf8:	2200      	movs	r2, #0
    2cfa:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
    2cfc:	4a09      	ldr	r2, [pc, #36]	; (2d24 <udi_hid_mouse_send_report+0x5c>)
    2cfe:	4b0e      	ldr	r3, [pc, #56]	; (2d38 <udi_hid_mouse_send_report+0x70>)
    2d00:	9300      	str	r3, [sp, #0]
    2d02:	2081      	movs	r0, #129	; 0x81
    2d04:	2100      	movs	r1, #0
    2d06:	2307      	movs	r3, #7
    2d08:	4c0c      	ldr	r4, [pc, #48]	; (2d3c <udi_hid_mouse_send_report+0x74>)
    2d0a:	47a0      	blx	r4
    2d0c:	1c03      	adds	r3, r0, #0
    2d0e:	1c1a      	adds	r2, r3, #0
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
    2d10:	4b03      	ldr	r3, [pc, #12]	; (2d20 <udi_hid_mouse_send_report+0x58>)
    2d12:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
    2d14:	4b02      	ldr	r3, [pc, #8]	; (2d20 <udi_hid_mouse_send_report+0x58>)
    2d16:	781b      	ldrb	r3, [r3, #0]
}
    2d18:	1c18      	adds	r0, r3, #0
    2d1a:	46bd      	mov	sp, r7
    2d1c:	b001      	add	sp, #4
    2d1e:	bd90      	pop	{r4, r7, pc}
    2d20:	20000167 	.word	0x20000167
    2d24:	20000168 	.word	0x20000168
    2d28:	20000160 	.word	0x20000160
    2d2c:	20000161 	.word	0x20000161
    2d30:	00008e33 	.word	0x00008e33
    2d34:	2000015d 	.word	0x2000015d
    2d38:	00002d41 	.word	0x00002d41
    2d3c:	00005d25 	.word	0x00005d25

00002d40 <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b082      	sub	sp, #8
    2d44:	af00      	add	r7, sp, #0
    2d46:	6039      	str	r1, [r7, #0]
    2d48:	1c11      	adds	r1, r2, #0
    2d4a:	1dfb      	adds	r3, r7, #7
    2d4c:	1c02      	adds	r2, r0, #0
    2d4e:	701a      	strb	r2, [r3, #0]
    2d50:	1dbb      	adds	r3, r7, #6
    2d52:	1c0a      	adds	r2, r1, #0
    2d54:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
    2d56:	4b06      	ldr	r3, [pc, #24]	; (2d70 <udi_hid_mouse_report_sent+0x30>)
    2d58:	2200      	movs	r2, #0
    2d5a:	701a      	strb	r2, [r3, #0]
	if (udi_hid_mouse_b_report_valid) {
    2d5c:	4b05      	ldr	r3, [pc, #20]	; (2d74 <udi_hid_mouse_report_sent+0x34>)
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d001      	beq.n	2d68 <udi_hid_mouse_report_sent+0x28>
		// Send new valid report
		udi_hid_mouse_send_report();
    2d64:	4b04      	ldr	r3, [pc, #16]	; (2d78 <udi_hid_mouse_report_sent+0x38>)
    2d66:	4798      	blx	r3
	}
}
    2d68:	46bd      	mov	sp, r7
    2d6a:	b002      	add	sp, #8
    2d6c:	bd80      	pop	{r7, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	20000167 	.word	0x20000167
    2d74:	2000015d 	.word	0x2000015d
    2d78:	00002cc9 	.word	0x00002cc9

00002d7c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2d7c:	b580      	push	{r7, lr}
    2d7e:	b084      	sub	sp, #16
    2d80:	af00      	add	r7, sp, #0
    2d82:	60f8      	str	r0, [r7, #12]
    2d84:	60b9      	str	r1, [r7, #8]
    2d86:	607a      	str	r2, [r7, #4]
    2d88:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    2d8a:	4b36      	ldr	r3, [pc, #216]	; (2e64 <udi_hid_setup+0xe8>)
    2d8c:	781b      	ldrb	r3, [r3, #0]
    2d8e:	b2db      	uxtb	r3, r3
    2d90:	b25b      	sxtb	r3, r3
    2d92:	2b00      	cmp	r3, #0
    2d94:	da32      	bge.n	2dfc <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2d96:	4b33      	ldr	r3, [pc, #204]	; (2e64 <udi_hid_setup+0xe8>)
    2d98:	781b      	ldrb	r3, [r3, #0]
    2d9a:	1c1a      	adds	r2, r3, #0
    2d9c:	2360      	movs	r3, #96	; 0x60
    2d9e:	4013      	ands	r3, r2
    2da0:	d109      	bne.n	2db6 <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2da2:	4b30      	ldr	r3, [pc, #192]	; (2e64 <udi_hid_setup+0xe8>)
    2da4:	785b      	ldrb	r3, [r3, #1]
    2da6:	2b06      	cmp	r3, #6
    2da8:	d105      	bne.n	2db6 <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	1c18      	adds	r0, r3, #0
    2dae:	4b2e      	ldr	r3, [pc, #184]	; (2e68 <udi_hid_setup+0xec>)
    2db0:	4798      	blx	r3
    2db2:	1c03      	adds	r3, r0, #0
    2db4:	e052      	b.n	2e5c <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2db6:	4b2b      	ldr	r3, [pc, #172]	; (2e64 <udi_hid_setup+0xe8>)
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	1c1a      	adds	r2, r3, #0
    2dbc:	2360      	movs	r3, #96	; 0x60
    2dbe:	4013      	ands	r3, r2
    2dc0:	2b20      	cmp	r3, #32
    2dc2:	d11b      	bne.n	2dfc <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2dc4:	4b27      	ldr	r3, [pc, #156]	; (2e64 <udi_hid_setup+0xe8>)
    2dc6:	785b      	ldrb	r3, [r3, #1]
    2dc8:	2b02      	cmp	r3, #2
    2dca:	d007      	beq.n	2ddc <udi_hid_setup+0x60>
    2dcc:	2b03      	cmp	r3, #3
    2dce:	d00d      	beq.n	2dec <udi_hid_setup+0x70>
    2dd0:	2b01      	cmp	r3, #1
    2dd2:	d113      	bne.n	2dfc <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    2dd4:	683b      	ldr	r3, [r7, #0]
    2dd6:	4798      	blx	r3
    2dd8:	1c03      	adds	r3, r0, #0
    2dda:	e03f      	b.n	2e5c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    2ddc:	4b21      	ldr	r3, [pc, #132]	; (2e64 <udi_hid_setup+0xe8>)
    2dde:	68fa      	ldr	r2, [r7, #12]
    2de0:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2de2:	4b20      	ldr	r3, [pc, #128]	; (2e64 <udi_hid_setup+0xe8>)
    2de4:	2201      	movs	r2, #1
    2de6:	819a      	strh	r2, [r3, #12]
				return true;
    2de8:	2301      	movs	r3, #1
    2dea:	e037      	b.n	2e5c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    2dec:	4b1d      	ldr	r3, [pc, #116]	; (2e64 <udi_hid_setup+0xe8>)
    2dee:	68ba      	ldr	r2, [r7, #8]
    2df0:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2df2:	4b1c      	ldr	r3, [pc, #112]	; (2e64 <udi_hid_setup+0xe8>)
    2df4:	2201      	movs	r2, #1
    2df6:	819a      	strh	r2, [r3, #12]
				return true;
    2df8:	2301      	movs	r3, #1
    2dfa:	e02f      	b.n	2e5c <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2dfc:	4b19      	ldr	r3, [pc, #100]	; (2e64 <udi_hid_setup+0xe8>)
    2dfe:	781b      	ldrb	r3, [r3, #0]
    2e00:	b2db      	uxtb	r3, r3
    2e02:	b25b      	sxtb	r3, r3
    2e04:	2b00      	cmp	r3, #0
    2e06:	db28      	blt.n	2e5a <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2e08:	4b16      	ldr	r3, [pc, #88]	; (2e64 <udi_hid_setup+0xe8>)
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	1c1a      	adds	r2, r3, #0
    2e0e:	2360      	movs	r3, #96	; 0x60
    2e10:	4013      	ands	r3, r2
    2e12:	2b20      	cmp	r3, #32
    2e14:	d121      	bne.n	2e5a <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2e16:	4b13      	ldr	r3, [pc, #76]	; (2e64 <udi_hid_setup+0xe8>)
    2e18:	785b      	ldrb	r3, [r3, #1]
    2e1a:	2b0a      	cmp	r3, #10
    2e1c:	d007      	beq.n	2e2e <udi_hid_setup+0xb2>
    2e1e:	2b0b      	cmp	r3, #11
    2e20:	d00e      	beq.n	2e40 <udi_hid_setup+0xc4>
    2e22:	2b09      	cmp	r3, #9
    2e24:	d119      	bne.n	2e5a <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	4798      	blx	r3
    2e2a:	1c03      	adds	r3, r0, #0
    2e2c:	e016      	b.n	2e5c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    2e2e:	4b0d      	ldr	r3, [pc, #52]	; (2e64 <udi_hid_setup+0xe8>)
    2e30:	885b      	ldrh	r3, [r3, #2]
    2e32:	0a1b      	lsrs	r3, r3, #8
    2e34:	b29b      	uxth	r3, r3
    2e36:	b2da      	uxtb	r2, r3
    2e38:	68fb      	ldr	r3, [r7, #12]
    2e3a:	701a      	strb	r2, [r3, #0]
				return true;
    2e3c:	2301      	movs	r3, #1
    2e3e:	e00d      	b.n	2e5c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    2e40:	4b08      	ldr	r3, [pc, #32]	; (2e64 <udi_hid_setup+0xe8>)
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d001      	beq.n	2e4c <udi_hid_setup+0xd0>
					return false;
    2e48:	2300      	movs	r3, #0
    2e4a:	e007      	b.n	2e5c <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <udi_hid_setup+0xe8>)
    2e4e:	885b      	ldrh	r3, [r3, #2]
    2e50:	b2da      	uxtb	r2, r3
    2e52:	68bb      	ldr	r3, [r7, #8]
    2e54:	701a      	strb	r2, [r3, #0]
				return true;
    2e56:	2301      	movs	r3, #1
    2e58:	e000      	b.n	2e5c <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    2e5a:	2300      	movs	r3, #0
}
    2e5c:	1c18      	adds	r0, r3, #0
    2e5e:	46bd      	mov	sp, r7
    2e60:	b004      	add	sp, #16
    2e62:	bd80      	pop	{r7, pc}
    2e64:	200004a4 	.word	0x200004a4
    2e68:	00002e6d 	.word	0x00002e6d

00002e6c <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    2e6c:	b580      	push	{r7, lr}
    2e6e:	b084      	sub	sp, #16
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    2e74:	4b25      	ldr	r3, [pc, #148]	; (2f0c <udi_hid_reqstdifaceget_descriptor+0xa0>)
    2e76:	4798      	blx	r3
    2e78:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    2e7a:	3309      	adds	r3, #9
    2e7c:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	785b      	ldrb	r3, [r3, #1]
    2e82:	2b21      	cmp	r3, #33	; 0x21
    2e84:	d001      	beq.n	2e8a <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    2e86:	2300      	movs	r3, #0
    2e88:	e03b      	b.n	2f02 <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2e8a:	4b21      	ldr	r3, [pc, #132]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2e8c:	885b      	ldrh	r3, [r3, #2]
    2e8e:	0a1b      	lsrs	r3, r3, #8
    2e90:	b29b      	uxth	r3, r3
    2e92:	b2db      	uxtb	r3, r3
    2e94:	2b21      	cmp	r3, #33	; 0x21
    2e96:	d113      	bne.n	2ec0 <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2e98:	4b1d      	ldr	r3, [pc, #116]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2e9a:	68fa      	ldr	r2, [r7, #12]
    2e9c:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    2e9e:	68fb      	ldr	r3, [r7, #12]
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	b29a      	uxth	r2, r3
    2ea4:	4b1a      	ldr	r3, [pc, #104]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ea6:	88db      	ldrh	r3, [r3, #6]
    2ea8:	1c18      	adds	r0, r3, #0
    2eaa:	1c11      	adds	r1, r2, #0
    2eac:	b28a      	uxth	r2, r1
    2eae:	b283      	uxth	r3, r0
    2eb0:	429a      	cmp	r2, r3
    2eb2:	d900      	bls.n	2eb6 <udi_hid_reqstdifaceget_descriptor+0x4a>
    2eb4:	1c01      	adds	r1, r0, #0
    2eb6:	b28a      	uxth	r2, r1
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    2eb8:	4b15      	ldr	r3, [pc, #84]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2eba:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    2ebc:	2301      	movs	r3, #1
    2ebe:	e020      	b.n	2f02 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2ec0:	68fb      	ldr	r3, [r7, #12]
    2ec2:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2ec4:	4b12      	ldr	r3, [pc, #72]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ec6:	885b      	ldrh	r3, [r3, #2]
    2ec8:	0a1b      	lsrs	r3, r3, #8
    2eca:	b29b      	uxth	r3, r3
    2ecc:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2ece:	429a      	cmp	r2, r3
    2ed0:	d116      	bne.n	2f00 <udi_hid_reqstdifaceget_descriptor+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    2ed2:	4b0f      	ldr	r3, [pc, #60]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ed4:	687a      	ldr	r2, [r7, #4]
    2ed6:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    2ed8:	68fb      	ldr	r3, [r7, #12]
    2eda:	79da      	ldrb	r2, [r3, #7]
    2edc:	7a1b      	ldrb	r3, [r3, #8]
    2ede:	021b      	lsls	r3, r3, #8
    2ee0:	4313      	orrs	r3, r2
    2ee2:	b29a      	uxth	r2, r3
    2ee4:	4b0a      	ldr	r3, [pc, #40]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2ee6:	88db      	ldrh	r3, [r3, #6]
    2ee8:	1c18      	adds	r0, r3, #0
    2eea:	1c11      	adds	r1, r2, #0
    2eec:	b28a      	uxth	r2, r1
    2eee:	b283      	uxth	r3, r0
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d900      	bls.n	2ef6 <udi_hid_reqstdifaceget_descriptor+0x8a>
    2ef4:	1c01      	adds	r1, r0, #0
    2ef6:	b28a      	uxth	r2, r1
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    2ef8:	4b05      	ldr	r3, [pc, #20]	; (2f10 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    2efa:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    2efc:	2301      	movs	r3, #1
    2efe:	e000      	b.n	2f02 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
    2f00:	2300      	movs	r3, #0
}
    2f02:	1c18      	adds	r0, r3, #0
    2f04:	46bd      	mov	sp, r7
    2f06:	b004      	add	sp, #16
    2f08:	bd80      	pop	{r7, pc}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	00002f15 	.word	0x00002f15
    2f10:	200004a4 	.word	0x200004a4

00002f14 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    2f18:	4b02      	ldr	r3, [pc, #8]	; (2f24 <udc_get_interface_desc+0x10>)
    2f1a:	681b      	ldr	r3, [r3, #0]
}
    2f1c:	1c18      	adds	r0, r3, #0
    2f1e:	46bd      	mov	sp, r7
    2f20:	bd80      	pop	{r7, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	20000180 	.word	0x20000180

00002f28 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    2f2c:	4b07      	ldr	r3, [pc, #28]	; (2f4c <udc_get_eof_conf+0x24>)
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    2f32:	4b06      	ldr	r3, [pc, #24]	; (2f4c <udc_get_eof_conf+0x24>)
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	7899      	ldrb	r1, [r3, #2]
    2f3a:	78db      	ldrb	r3, [r3, #3]
    2f3c:	021b      	lsls	r3, r3, #8
    2f3e:	430b      	orrs	r3, r1
    2f40:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    2f42:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    2f44:	1c18      	adds	r0, r3, #0
    2f46:	46bd      	mov	sp, r7
    2f48:	bd80      	pop	{r7, pc}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	2000017c 	.word	0x2000017c

00002f50 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b084      	sub	sp, #16
    2f54:	af00      	add	r7, sp, #0
    2f56:	6078      	str	r0, [r7, #4]
    2f58:	1c0a      	adds	r2, r1, #0
    2f5a:	1cfb      	adds	r3, r7, #3
    2f5c:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    2f5e:	4b13      	ldr	r3, [pc, #76]	; (2fac <udc_next_desc_in_iface+0x5c>)
    2f60:	4798      	blx	r3
    2f62:	1c03      	adds	r3, r0, #0
    2f64:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    2f6a:	1c1a      	adds	r2, r3, #0
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	189b      	adds	r3, r3, r2
    2f70:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    2f72:	e012      	b.n	2f9a <udc_next_desc_in_iface+0x4a>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	785b      	ldrb	r3, [r3, #1]
    2f78:	2b04      	cmp	r3, #4
    2f7a:	d100      	bne.n	2f7e <udc_next_desc_in_iface+0x2e>
			break; // End of global interface descriptor
    2f7c:	e011      	b.n	2fa2 <udc_next_desc_in_iface+0x52>
		}
		if (desc_id == desc->bDescriptorType) {
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	785b      	ldrb	r3, [r3, #1]
    2f82:	1cfa      	adds	r2, r7, #3
    2f84:	7812      	ldrb	r2, [r2, #0]
    2f86:	429a      	cmp	r2, r3
    2f88:	d101      	bne.n	2f8e <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	e00a      	b.n	2fa4 <udc_next_desc_in_iface+0x54>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    2f92:	1c1a      	adds	r2, r3, #0
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	189b      	adds	r3, r3, r2
    2f98:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    2f9a:	68fa      	ldr	r2, [r7, #12]
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	429a      	cmp	r2, r3
    2fa0:	d8e8      	bhi.n	2f74 <udc_next_desc_in_iface+0x24>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    2fa2:	2300      	movs	r3, #0
}
    2fa4:	1c18      	adds	r0, r3, #0
    2fa6:	46bd      	mov	sp, r7
    2fa8:	b004      	add	sp, #16
    2faa:	bd80      	pop	{r7, pc}
    2fac:	00002f29 	.word	0x00002f29

00002fb0 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	b084      	sub	sp, #16
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	1c02      	adds	r2, r0, #0
    2fb8:	1dfb      	adds	r3, r7, #7
    2fba:	701a      	strb	r2, [r3, #0]
    2fbc:	1dbb      	adds	r3, r7, #6
    2fbe:	1c0a      	adds	r2, r1, #0
    2fc0:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    2fc2:	4b20      	ldr	r3, [pc, #128]	; (3044 <udc_update_iface_desc+0x94>)
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d101      	bne.n	2fce <udc_update_iface_desc+0x1e>
		return false;
    2fca:	2300      	movs	r3, #0
    2fcc:	e036      	b.n	303c <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2fce:	4b1e      	ldr	r3, [pc, #120]	; (3048 <udc_update_iface_desc+0x98>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	681b      	ldr	r3, [r3, #0]
    2fd4:	791b      	ldrb	r3, [r3, #4]
    2fd6:	1dfa      	adds	r2, r7, #7
    2fd8:	7812      	ldrb	r2, [r2, #0]
    2fda:	429a      	cmp	r2, r3
    2fdc:	d301      	bcc.n	2fe2 <udc_update_iface_desc+0x32>
		return false;
    2fde:	2300      	movs	r3, #0
    2fe0:	e02c      	b.n	303c <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    2fe2:	4b19      	ldr	r3, [pc, #100]	; (3048 <udc_update_iface_desc+0x98>)
    2fe4:	681b      	ldr	r3, [r3, #0]
    2fe6:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    2fe8:	4b18      	ldr	r3, [pc, #96]	; (304c <udc_update_iface_desc+0x9c>)
    2fea:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    2fec:	4b18      	ldr	r3, [pc, #96]	; (3050 <udc_update_iface_desc+0xa0>)
    2fee:	4798      	blx	r3
    2ff0:	1c03      	adds	r3, r0, #0
    2ff2:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    2ff4:	e01c      	b.n	3030 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    2ff6:	4b15      	ldr	r3, [pc, #84]	; (304c <udc_update_iface_desc+0x9c>)
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	785b      	ldrb	r3, [r3, #1]
    2ffc:	2b04      	cmp	r3, #4
    2ffe:	d10f      	bne.n	3020 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3000:	4b12      	ldr	r3, [pc, #72]	; (304c <udc_update_iface_desc+0x9c>)
    3002:	681b      	ldr	r3, [r3, #0]
    3004:	789b      	ldrb	r3, [r3, #2]
    3006:	1dfa      	adds	r2, r7, #7
    3008:	7812      	ldrb	r2, [r2, #0]
    300a:	429a      	cmp	r2, r3
    300c:	d108      	bne.n	3020 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    300e:	4b0f      	ldr	r3, [pc, #60]	; (304c <udc_update_iface_desc+0x9c>)
    3010:	681b      	ldr	r3, [r3, #0]
    3012:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3014:	1dba      	adds	r2, r7, #6
    3016:	7812      	ldrb	r2, [r2, #0]
    3018:	429a      	cmp	r2, r3
    301a:	d101      	bne.n	3020 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    301c:	2301      	movs	r3, #1
    301e:	e00d      	b.n	303c <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3020:	4b0a      	ldr	r3, [pc, #40]	; (304c <udc_update_iface_desc+0x9c>)
    3022:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3024:	4b09      	ldr	r3, [pc, #36]	; (304c <udc_update_iface_desc+0x9c>)
    3026:	681b      	ldr	r3, [r3, #0]
    3028:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    302a:	18d2      	adds	r2, r2, r3
    302c:	4b07      	ldr	r3, [pc, #28]	; (304c <udc_update_iface_desc+0x9c>)
    302e:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    3030:	4b06      	ldr	r3, [pc, #24]	; (304c <udc_update_iface_desc+0x9c>)
    3032:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3034:	68fa      	ldr	r2, [r7, #12]
    3036:	429a      	cmp	r2, r3
    3038:	d8dd      	bhi.n	2ff6 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    303a:	2300      	movs	r3, #0
}
    303c:	1c18      	adds	r0, r3, #0
    303e:	46bd      	mov	sp, r7
    3040:	b004      	add	sp, #16
    3042:	bd80      	pop	{r7, pc}
    3044:	20000178 	.word	0x20000178
    3048:	2000017c 	.word	0x2000017c
    304c:	20000180 	.word	0x20000180
    3050:	00002f29 	.word	0x00002f29

00003054 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3054:	b580      	push	{r7, lr}
    3056:	b084      	sub	sp, #16
    3058:	af00      	add	r7, sp, #0
    305a:	1c02      	adds	r2, r0, #0
    305c:	1dfb      	adds	r3, r7, #7
    305e:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3060:	1dfb      	adds	r3, r7, #7
    3062:	781b      	ldrb	r3, [r3, #0]
    3064:	1c18      	adds	r0, r3, #0
    3066:	2100      	movs	r1, #0
    3068:	4b22      	ldr	r3, [pc, #136]	; (30f4 <udc_iface_disable+0xa0>)
    306a:	4798      	blx	r3
    306c:	1c03      	adds	r3, r0, #0
    306e:	1c1a      	adds	r2, r3, #0
    3070:	2301      	movs	r3, #1
    3072:	4053      	eors	r3, r2
    3074:	b2db      	uxtb	r3, r3
    3076:	2b00      	cmp	r3, #0
    3078:	d001      	beq.n	307e <udc_iface_disable+0x2a>
		return false;
    307a:	2300      	movs	r3, #0
    307c:	e035      	b.n	30ea <udc_iface_disable+0x96>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    307e:	4b1e      	ldr	r3, [pc, #120]	; (30f8 <udc_iface_disable+0xa4>)
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	685a      	ldr	r2, [r3, #4]
    3084:	1dfb      	adds	r3, r7, #7
    3086:	781b      	ldrb	r3, [r3, #0]
    3088:	009b      	lsls	r3, r3, #2
    308a:	18d3      	adds	r3, r2, r3
    308c:	681b      	ldr	r3, [r3, #0]
    308e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3090:	68bb      	ldr	r3, [r7, #8]
    3092:	68db      	ldr	r3, [r3, #12]
    3094:	4798      	blx	r3
    3096:	1c03      	adds	r3, r0, #0
    3098:	1c1a      	adds	r2, r3, #0
    309a:	1dfb      	adds	r3, r7, #7
    309c:	781b      	ldrb	r3, [r3, #0]
    309e:	1c18      	adds	r0, r3, #0
    30a0:	1c11      	adds	r1, r2, #0
    30a2:	4b14      	ldr	r3, [pc, #80]	; (30f4 <udc_iface_disable+0xa0>)
    30a4:	4798      	blx	r3
    30a6:	1c03      	adds	r3, r0, #0
    30a8:	1c1a      	adds	r2, r3, #0
    30aa:	2301      	movs	r3, #1
    30ac:	4053      	eors	r3, r2
    30ae:	b2db      	uxtb	r3, r3
    30b0:	2b00      	cmp	r3, #0
    30b2:	d001      	beq.n	30b8 <udc_iface_disable+0x64>
		return false;
    30b4:	2300      	movs	r3, #0
    30b6:	e018      	b.n	30ea <udc_iface_disable+0x96>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    30b8:	4b10      	ldr	r3, [pc, #64]	; (30fc <udc_iface_disable+0xa8>)
    30ba:	681b      	ldr	r3, [r3, #0]
    30bc:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	1c18      	adds	r0, r3, #0
    30c2:	2105      	movs	r1, #5
    30c4:	4b0e      	ldr	r3, [pc, #56]	; (3100 <udc_iface_disable+0xac>)
    30c6:	4798      	blx	r3
    30c8:	1c03      	adds	r3, r0, #0
    30ca:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    30cc:	68fb      	ldr	r3, [r7, #12]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d105      	bne.n	30de <udc_iface_disable+0x8a>
				break;
    30d2:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    30d4:	68bb      	ldr	r3, [r7, #8]
    30d6:	685b      	ldr	r3, [r3, #4]
    30d8:	4798      	blx	r3
	return true;
    30da:	2301      	movs	r3, #1
    30dc:	e005      	b.n	30ea <udc_iface_disable+0x96>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    30de:	68fb      	ldr	r3, [r7, #12]
    30e0:	789b      	ldrb	r3, [r3, #2]
    30e2:	1c18      	adds	r0, r3, #0
    30e4:	4b07      	ldr	r3, [pc, #28]	; (3104 <udc_iface_disable+0xb0>)
    30e6:	4798      	blx	r3
		}
    30e8:	e7e9      	b.n	30be <udc_iface_disable+0x6a>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    30ea:	1c18      	adds	r0, r3, #0
    30ec:	46bd      	mov	sp, r7
    30ee:	b004      	add	sp, #16
    30f0:	bd80      	pop	{r7, pc}
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	00002fb1 	.word	0x00002fb1
    30f8:	2000017c 	.word	0x2000017c
    30fc:	20000180 	.word	0x20000180
    3100:	00002f51 	.word	0x00002f51
    3104:	000059b5 	.word	0x000059b5

00003108 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3108:	b580      	push	{r7, lr}
    310a:	b084      	sub	sp, #16
    310c:	af00      	add	r7, sp, #0
    310e:	1c02      	adds	r2, r0, #0
    3110:	1dfb      	adds	r3, r7, #7
    3112:	701a      	strb	r2, [r3, #0]
    3114:	1dbb      	adds	r3, r7, #6
    3116:	1c0a      	adds	r2, r1, #0
    3118:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    311a:	1dfb      	adds	r3, r7, #7
    311c:	781a      	ldrb	r2, [r3, #0]
    311e:	1dbb      	adds	r3, r7, #6
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	1c10      	adds	r0, r2, #0
    3124:	1c19      	adds	r1, r3, #0
    3126:	4b20      	ldr	r3, [pc, #128]	; (31a8 <udc_iface_enable+0xa0>)
    3128:	4798      	blx	r3
    312a:	1c03      	adds	r3, r0, #0
    312c:	1c1a      	adds	r2, r3, #0
    312e:	2301      	movs	r3, #1
    3130:	4053      	eors	r3, r2
    3132:	b2db      	uxtb	r3, r3
    3134:	2b00      	cmp	r3, #0
    3136:	d001      	beq.n	313c <udc_iface_enable+0x34>
		return false;
    3138:	2300      	movs	r3, #0
    313a:	e030      	b.n	319e <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    313c:	4b1b      	ldr	r3, [pc, #108]	; (31ac <udc_iface_enable+0xa4>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	1c18      	adds	r0, r3, #0
    3146:	2105      	movs	r1, #5
    3148:	4b19      	ldr	r3, [pc, #100]	; (31b0 <udc_iface_enable+0xa8>)
    314a:	4798      	blx	r3
    314c:	1c03      	adds	r3, r0, #0
    314e:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3150:	68fb      	ldr	r3, [r7, #12]
    3152:	2b00      	cmp	r3, #0
    3154:	d10c      	bne.n	3170 <udc_iface_enable+0x68>
			break;
    3156:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3158:	4b16      	ldr	r3, [pc, #88]	; (31b4 <udc_iface_enable+0xac>)
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	685a      	ldr	r2, [r3, #4]
    315e:	1dfb      	adds	r3, r7, #7
    3160:	781b      	ldrb	r3, [r3, #0]
    3162:	009b      	lsls	r3, r3, #2
    3164:	18d3      	adds	r3, r2, r3
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	4798      	blx	r3
    316c:	1c03      	adds	r3, r0, #0
    316e:	e016      	b.n	319e <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	7898      	ldrb	r0, [r3, #2]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	78d9      	ldrb	r1, [r3, #3]
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	791a      	ldrb	r2, [r3, #4]
    317c:	795b      	ldrb	r3, [r3, #5]
    317e:	021b      	lsls	r3, r3, #8
    3180:	4313      	orrs	r3, r2
    3182:	b29b      	uxth	r3, r3
    3184:	1c1a      	adds	r2, r3, #0
    3186:	4b0c      	ldr	r3, [pc, #48]	; (31b8 <udc_iface_enable+0xb0>)
    3188:	4798      	blx	r3
    318a:	1c03      	adds	r3, r0, #0
    318c:	1c1a      	adds	r2, r3, #0
    318e:	2301      	movs	r3, #1
    3190:	4053      	eors	r3, r2
    3192:	b2db      	uxtb	r3, r3
    3194:	2b00      	cmp	r3, #0
    3196:	d001      	beq.n	319c <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    3198:	2300      	movs	r3, #0
    319a:	e000      	b.n	319e <udc_iface_enable+0x96>
		}
	}
    319c:	e7d1      	b.n	3142 <udc_iface_enable+0x3a>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    319e:	1c18      	adds	r0, r3, #0
    31a0:	46bd      	mov	sp, r7
    31a2:	b004      	add	sp, #16
    31a4:	bd80      	pop	{r7, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	00002fb1 	.word	0x00002fb1
    31ac:	20000180 	.word	0x20000180
    31b0:	00002f51 	.word	0x00002f51
    31b4:	2000017c 	.word	0x2000017c
    31b8:	00005a45 	.word	0x00005a45

000031bc <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    31bc:	b580      	push	{r7, lr}
    31be:	af00      	add	r7, sp, #0
	udd_enable();
    31c0:	4b01      	ldr	r3, [pc, #4]	; (31c8 <udc_start+0xc>)
    31c2:	4798      	blx	r3
}
    31c4:	46bd      	mov	sp, r7
    31c6:	bd80      	pop	{r7, pc}
    31c8:	0000694d 	.word	0x0000694d

000031cc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	b082      	sub	sp, #8
    31d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    31d2:	4b16      	ldr	r3, [pc, #88]	; (322c <udc_reset+0x60>)
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d015      	beq.n	3206 <udc_reset+0x3a>
		for (iface_num = 0;
    31da:	1dfb      	adds	r3, r7, #7
    31dc:	2200      	movs	r2, #0
    31de:	701a      	strb	r2, [r3, #0]
    31e0:	e009      	b.n	31f6 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    31e2:	1dfb      	adds	r3, r7, #7
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	1c18      	adds	r0, r3, #0
    31e8:	4b11      	ldr	r3, [pc, #68]	; (3230 <udc_reset+0x64>)
    31ea:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    31ec:	1dfb      	adds	r3, r7, #7
    31ee:	781a      	ldrb	r2, [r3, #0]
    31f0:	1dfb      	adds	r3, r7, #7
    31f2:	3201      	adds	r2, #1
    31f4:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    31f6:	4b0f      	ldr	r3, [pc, #60]	; (3234 <udc_reset+0x68>)
    31f8:	681b      	ldr	r3, [r3, #0]
    31fa:	681b      	ldr	r3, [r3, #0]
    31fc:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    31fe:	1dfa      	adds	r2, r7, #7
    3200:	7812      	ldrb	r2, [r2, #0]
    3202:	429a      	cmp	r2, r3
    3204:	d3ed      	bcc.n	31e2 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3206:	4b09      	ldr	r3, [pc, #36]	; (322c <udc_reset+0x60>)
    3208:	2200      	movs	r2, #0
    320a:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    320c:	4b0a      	ldr	r3, [pc, #40]	; (3238 <udc_reset+0x6c>)
    320e:	881b      	ldrh	r3, [r3, #0]
    3210:	2202      	movs	r2, #2
    3212:	4013      	ands	r3, r2
    3214:	b29b      	uxth	r3, r3
    3216:	2b00      	cmp	r3, #0
    3218:	d001      	beq.n	321e <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    321a:	4b08      	ldr	r3, [pc, #32]	; (323c <udc_reset+0x70>)
    321c:	4798      	blx	r3
	}
#endif
	udc_device_status =
    321e:	4b06      	ldr	r3, [pc, #24]	; (3238 <udc_reset+0x6c>)
    3220:	2200      	movs	r2, #0
    3222:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3224:	46bd      	mov	sp, r7
    3226:	b002      	add	sp, #8
    3228:	bd80      	pop	{r7, pc}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	20000178 	.word	0x20000178
    3230:	00003055 	.word	0x00003055
    3234:	2000017c 	.word	0x2000017c
    3238:	20000170 	.word	0x20000170
    323c:	00008a25 	.word	0x00008a25

00003240 <udc_sof_notify>:

void udc_sof_notify(void)
{
    3240:	b580      	push	{r7, lr}
    3242:	b082      	sub	sp, #8
    3244:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3246:	4b16      	ldr	r3, [pc, #88]	; (32a0 <udc_sof_notify+0x60>)
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d025      	beq.n	329a <udc_sof_notify+0x5a>
		for (iface_num = 0;
    324e:	1dfb      	adds	r3, r7, #7
    3250:	2200      	movs	r2, #0
    3252:	701a      	strb	r2, [r3, #0]
    3254:	e019      	b.n	328a <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3256:	4b13      	ldr	r3, [pc, #76]	; (32a4 <udc_sof_notify+0x64>)
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	685a      	ldr	r2, [r3, #4]
    325c:	1dfb      	adds	r3, r7, #7
    325e:	781b      	ldrb	r3, [r3, #0]
    3260:	009b      	lsls	r3, r3, #2
    3262:	18d3      	adds	r3, r2, r3
    3264:	681b      	ldr	r3, [r3, #0]
    3266:	691b      	ldr	r3, [r3, #16]
    3268:	2b00      	cmp	r3, #0
    326a:	d009      	beq.n	3280 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    326c:	4b0d      	ldr	r3, [pc, #52]	; (32a4 <udc_sof_notify+0x64>)
    326e:	681b      	ldr	r3, [r3, #0]
    3270:	685a      	ldr	r2, [r3, #4]
    3272:	1dfb      	adds	r3, r7, #7
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	009b      	lsls	r3, r3, #2
    3278:	18d3      	adds	r3, r2, r3
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	691b      	ldr	r3, [r3, #16]
    327e:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3280:	1dfb      	adds	r3, r7, #7
    3282:	781a      	ldrb	r2, [r3, #0]
    3284:	1dfb      	adds	r3, r7, #7
    3286:	3201      	adds	r2, #1
    3288:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    328a:	4b06      	ldr	r3, [pc, #24]	; (32a4 <udc_sof_notify+0x64>)
    328c:	681b      	ldr	r3, [r3, #0]
    328e:	681b      	ldr	r3, [r3, #0]
    3290:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3292:	1dfa      	adds	r2, r7, #7
    3294:	7812      	ldrb	r2, [r2, #0]
    3296:	429a      	cmp	r2, r3
    3298:	d3dd      	bcc.n	3256 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    329a:	46bd      	mov	sp, r7
    329c:	b002      	add	sp, #8
    329e:	bd80      	pop	{r7, pc}
    32a0:	20000178 	.word	0x20000178
    32a4:	2000017c 	.word	0x2000017c

000032a8 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    32ac:	4b07      	ldr	r3, [pc, #28]	; (32cc <udc_req_std_dev_get_status+0x24>)
    32ae:	88db      	ldrh	r3, [r3, #6]
    32b0:	2b02      	cmp	r3, #2
    32b2:	d001      	beq.n	32b8 <udc_req_std_dev_get_status+0x10>
		return false;
    32b4:	2300      	movs	r3, #0
    32b6:	e005      	b.n	32c4 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    32b8:	4b05      	ldr	r3, [pc, #20]	; (32d0 <udc_req_std_dev_get_status+0x28>)
    32ba:	1c18      	adds	r0, r3, #0
    32bc:	2102      	movs	r1, #2
    32be:	4b05      	ldr	r3, [pc, #20]	; (32d4 <udc_req_std_dev_get_status+0x2c>)
    32c0:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    32c2:	2301      	movs	r3, #1
}
    32c4:	1c18      	adds	r0, r3, #0
    32c6:	46bd      	mov	sp, r7
    32c8:	bd80      	pop	{r7, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	200004a4 	.word	0x200004a4
    32d0:	20000170 	.word	0x20000170
    32d4:	00006061 	.word	0x00006061

000032d8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    32d8:	b580      	push	{r7, lr}
    32da:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    32dc:	4b0c      	ldr	r3, [pc, #48]	; (3310 <udc_req_std_ep_get_status+0x38>)
    32de:	88db      	ldrh	r3, [r3, #6]
    32e0:	2b02      	cmp	r3, #2
    32e2:	d001      	beq.n	32e8 <udc_req_std_ep_get_status+0x10>
		return false;
    32e4:	2300      	movs	r3, #0
    32e6:	e00f      	b.n	3308 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    32e8:	4b09      	ldr	r3, [pc, #36]	; (3310 <udc_req_std_ep_get_status+0x38>)
    32ea:	889b      	ldrh	r3, [r3, #4]
    32ec:	b2db      	uxtb	r3, r3
    32ee:	1c18      	adds	r0, r3, #0
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <udc_req_std_ep_get_status+0x3c>)
    32f2:	4798      	blx	r3
    32f4:	1c03      	adds	r3, r0, #0
    32f6:	b29a      	uxth	r2, r3
    32f8:	4b07      	ldr	r3, [pc, #28]	; (3318 <udc_req_std_ep_get_status+0x40>)
    32fa:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    32fc:	4b06      	ldr	r3, [pc, #24]	; (3318 <udc_req_std_ep_get_status+0x40>)
    32fe:	1c18      	adds	r0, r3, #0
    3300:	2102      	movs	r1, #2
    3302:	4b06      	ldr	r3, [pc, #24]	; (331c <udc_req_std_ep_get_status+0x44>)
    3304:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    3306:	2301      	movs	r3, #1
}
    3308:	1c18      	adds	r0, r3, #0
    330a:	46bd      	mov	sp, r7
    330c:	bd80      	pop	{r7, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	200004a4 	.word	0x200004a4
    3314:	00005bf5 	.word	0x00005bf5
    3318:	20000184 	.word	0x20000184
    331c:	00006061 	.word	0x00006061

00003320 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3320:	b580      	push	{r7, lr}
    3322:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3324:	4b0c      	ldr	r3, [pc, #48]	; (3358 <udc_req_std_dev_clear_feature+0x38>)
    3326:	88db      	ldrh	r3, [r3, #6]
    3328:	2b00      	cmp	r3, #0
    332a:	d001      	beq.n	3330 <udc_req_std_dev_clear_feature+0x10>
		return false;
    332c:	2300      	movs	r3, #0
    332e:	e00f      	b.n	3350 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3330:	4b09      	ldr	r3, [pc, #36]	; (3358 <udc_req_std_dev_clear_feature+0x38>)
    3332:	885b      	ldrh	r3, [r3, #2]
    3334:	2b01      	cmp	r3, #1
    3336:	d10a      	bne.n	334e <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3338:	4b08      	ldr	r3, [pc, #32]	; (335c <udc_req_std_dev_clear_feature+0x3c>)
    333a:	881b      	ldrh	r3, [r3, #0]
    333c:	2202      	movs	r2, #2
    333e:	4393      	bics	r3, r2
    3340:	b29a      	uxth	r2, r3
    3342:	4b06      	ldr	r3, [pc, #24]	; (335c <udc_req_std_dev_clear_feature+0x3c>)
    3344:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3346:	4b06      	ldr	r3, [pc, #24]	; (3360 <udc_req_std_dev_clear_feature+0x40>)
    3348:	4798      	blx	r3
#endif
		return true;
    334a:	2301      	movs	r3, #1
    334c:	e000      	b.n	3350 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    334e:	2300      	movs	r3, #0
}
    3350:	1c18      	adds	r0, r3, #0
    3352:	46bd      	mov	sp, r7
    3354:	bd80      	pop	{r7, pc}
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	200004a4 	.word	0x200004a4
    335c:	20000170 	.word	0x20000170
    3360:	00008a25 	.word	0x00008a25

00003364 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3368:	4b0a      	ldr	r3, [pc, #40]	; (3394 <udc_req_std_ep_clear_feature+0x30>)
    336a:	88db      	ldrh	r3, [r3, #6]
    336c:	2b00      	cmp	r3, #0
    336e:	d001      	beq.n	3374 <udc_req_std_ep_clear_feature+0x10>
		return false;
    3370:	2300      	movs	r3, #0
    3372:	e00c      	b.n	338e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3374:	4b07      	ldr	r3, [pc, #28]	; (3394 <udc_req_std_ep_clear_feature+0x30>)
    3376:	885b      	ldrh	r3, [r3, #2]
    3378:	2b00      	cmp	r3, #0
    337a:	d107      	bne.n	338c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    337c:	4b05      	ldr	r3, [pc, #20]	; (3394 <udc_req_std_ep_clear_feature+0x30>)
    337e:	889b      	ldrh	r3, [r3, #4]
    3380:	b2db      	uxtb	r3, r3
    3382:	1c18      	adds	r0, r3, #0
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <udc_req_std_ep_clear_feature+0x34>)
    3386:	4798      	blx	r3
    3388:	1c03      	adds	r3, r0, #0
    338a:	e000      	b.n	338e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    338c:	2300      	movs	r3, #0
}
    338e:	1c18      	adds	r0, r3, #0
    3390:	46bd      	mov	sp, r7
    3392:	bd80      	pop	{r7, pc}
    3394:	200004a4 	.word	0x200004a4
    3398:	00005c79 	.word	0x00005c79

0000339c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    33a0:	4b0c      	ldr	r3, [pc, #48]	; (33d4 <udc_req_std_dev_set_feature+0x38>)
    33a2:	88db      	ldrh	r3, [r3, #6]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d001      	beq.n	33ac <udc_req_std_dev_set_feature+0x10>
		return false;
    33a8:	2300      	movs	r3, #0
    33aa:	e010      	b.n	33ce <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    33ac:	4b09      	ldr	r3, [pc, #36]	; (33d4 <udc_req_std_dev_set_feature+0x38>)
    33ae:	885b      	ldrh	r3, [r3, #2]
    33b0:	2b01      	cmp	r3, #1
    33b2:	d002      	beq.n	33ba <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    33b4:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    33b6:	2300      	movs	r3, #0
    33b8:	e009      	b.n	33ce <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    33ba:	4b07      	ldr	r3, [pc, #28]	; (33d8 <udc_req_std_dev_set_feature+0x3c>)
    33bc:	881b      	ldrh	r3, [r3, #0]
    33be:	2202      	movs	r2, #2
    33c0:	4313      	orrs	r3, r2
    33c2:	b29a      	uxth	r2, r3
    33c4:	4b04      	ldr	r3, [pc, #16]	; (33d8 <udc_req_std_dev_set_feature+0x3c>)
    33c6:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    33c8:	4b04      	ldr	r3, [pc, #16]	; (33dc <udc_req_std_dev_set_feature+0x40>)
    33ca:	4798      	blx	r3
		return true;
    33cc:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    33ce:	1c18      	adds	r0, r3, #0
    33d0:	46bd      	mov	sp, r7
    33d2:	bd80      	pop	{r7, pc}
    33d4:	200004a4 	.word	0x200004a4
    33d8:	20000170 	.word	0x20000170
    33dc:	00008a15 	.word	0x00008a15

000033e0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    33e4:	4b0d      	ldr	r3, [pc, #52]	; (341c <udc_req_std_ep_set_feature+0x3c>)
    33e6:	88db      	ldrh	r3, [r3, #6]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d001      	beq.n	33f0 <udc_req_std_ep_set_feature+0x10>
		return false;
    33ec:	2300      	movs	r3, #0
    33ee:	e012      	b.n	3416 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    33f0:	4b0a      	ldr	r3, [pc, #40]	; (341c <udc_req_std_ep_set_feature+0x3c>)
    33f2:	885b      	ldrh	r3, [r3, #2]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d10d      	bne.n	3414 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    33f8:	4b08      	ldr	r3, [pc, #32]	; (341c <udc_req_std_ep_set_feature+0x3c>)
    33fa:	889b      	ldrh	r3, [r3, #4]
    33fc:	b2db      	uxtb	r3, r3
    33fe:	1c18      	adds	r0, r3, #0
    3400:	4b07      	ldr	r3, [pc, #28]	; (3420 <udc_req_std_ep_set_feature+0x40>)
    3402:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3404:	4b05      	ldr	r3, [pc, #20]	; (341c <udc_req_std_ep_set_feature+0x3c>)
    3406:	889b      	ldrh	r3, [r3, #4]
    3408:	b2db      	uxtb	r3, r3
    340a:	1c18      	adds	r0, r3, #0
    340c:	4b05      	ldr	r3, [pc, #20]	; (3424 <udc_req_std_ep_set_feature+0x44>)
    340e:	4798      	blx	r3
    3410:	1c03      	adds	r3, r0, #0
    3412:	e000      	b.n	3416 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3414:	2300      	movs	r3, #0
}
    3416:	1c18      	adds	r0, r3, #0
    3418:	46bd      	mov	sp, r7
    341a:	bd80      	pop	{r7, pc}
    341c:	200004a4 	.word	0x200004a4
    3420:	00005929 	.word	0x00005929
    3424:	00005c21 	.word	0x00005c21

00003428 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3428:	b580      	push	{r7, lr}
    342a:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    342c:	4b05      	ldr	r3, [pc, #20]	; (3444 <udc_valid_address+0x1c>)
    342e:	885b      	ldrh	r3, [r3, #2]
    3430:	b2db      	uxtb	r3, r3
    3432:	227f      	movs	r2, #127	; 0x7f
    3434:	4013      	ands	r3, r2
    3436:	b2db      	uxtb	r3, r3
    3438:	1c18      	adds	r0, r3, #0
    343a:	4b03      	ldr	r3, [pc, #12]	; (3448 <udc_valid_address+0x20>)
    343c:	4798      	blx	r3
}
    343e:	46bd      	mov	sp, r7
    3440:	bd80      	pop	{r7, pc}
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	200004a4 	.word	0x200004a4
    3448:	0000601d 	.word	0x0000601d

0000344c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    344c:	b580      	push	{r7, lr}
    344e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3450:	4b06      	ldr	r3, [pc, #24]	; (346c <udc_req_std_dev_set_address+0x20>)
    3452:	88db      	ldrh	r3, [r3, #6]
    3454:	2b00      	cmp	r3, #0
    3456:	d001      	beq.n	345c <udc_req_std_dev_set_address+0x10>
		return false;
    3458:	2300      	movs	r3, #0
    345a:	e003      	b.n	3464 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    345c:	4b03      	ldr	r3, [pc, #12]	; (346c <udc_req_std_dev_set_address+0x20>)
    345e:	4a04      	ldr	r2, [pc, #16]	; (3470 <udc_req_std_dev_set_address+0x24>)
    3460:	611a      	str	r2, [r3, #16]
	return true;
    3462:	2301      	movs	r3, #1
}
    3464:	1c18      	adds	r0, r3, #0
    3466:	46bd      	mov	sp, r7
    3468:	bd80      	pop	{r7, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	200004a4 	.word	0x200004a4
    3470:	00003429 	.word	0x00003429

00003474 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    3474:	b580      	push	{r7, lr}
    3476:	b084      	sub	sp, #16
    3478:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    347a:	1dfb      	adds	r3, r7, #7
    347c:	2200      	movs	r2, #0
    347e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3480:	4b2c      	ldr	r3, [pc, #176]	; (3534 <udc_req_std_dev_get_str_desc+0xc0>)
    3482:	885b      	ldrh	r3, [r3, #2]
    3484:	1c1a      	adds	r2, r3, #0
    3486:	23ff      	movs	r3, #255	; 0xff
    3488:	4013      	ands	r3, r2
    348a:	2b01      	cmp	r3, #1
    348c:	d009      	beq.n	34a2 <udc_req_std_dev_get_str_desc+0x2e>
    348e:	2b02      	cmp	r3, #2
    3490:	d00d      	beq.n	34ae <udc_req_std_dev_get_str_desc+0x3a>
    3492:	2b00      	cmp	r3, #0
    3494:	d111      	bne.n	34ba <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3496:	4b28      	ldr	r3, [pc, #160]	; (3538 <udc_req_std_dev_get_str_desc+0xc4>)
    3498:	1c18      	adds	r0, r3, #0
    349a:	2104      	movs	r1, #4
    349c:	4b27      	ldr	r3, [pc, #156]	; (353c <udc_req_std_dev_get_str_desc+0xc8>)
    349e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    34a0:	e00d      	b.n	34be <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    34a2:	1dfb      	adds	r3, r7, #7
    34a4:	2209      	movs	r2, #9
    34a6:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    34a8:	4b25      	ldr	r3, [pc, #148]	; (3540 <udc_req_std_dev_get_str_desc+0xcc>)
    34aa:	60bb      	str	r3, [r7, #8]
		break;
    34ac:	e007      	b.n	34be <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    34ae:	1dfb      	adds	r3, r7, #7
    34b0:	2209      	movs	r2, #9
    34b2:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    34b4:	4b23      	ldr	r3, [pc, #140]	; (3544 <udc_req_std_dev_get_str_desc+0xd0>)
    34b6:	60bb      	str	r3, [r7, #8]
		break;
    34b8:	e001      	b.n	34be <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    34ba:	2300      	movs	r3, #0
    34bc:	e036      	b.n	352c <udc_req_std_dev_get_str_desc+0xb8>
	}

	if (str_length) {
    34be:	1dfb      	adds	r3, r7, #7
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d031      	beq.n	352a <udc_req_std_dev_get_str_desc+0xb6>
		for(i = 0; i < str_length; i++) {
    34c6:	230f      	movs	r3, #15
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	2200      	movs	r2, #0
    34cc:	701a      	strb	r2, [r3, #0]
    34ce:	e015      	b.n	34fc <udc_req_std_dev_get_str_desc+0x88>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    34d0:	230f      	movs	r3, #15
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	220f      	movs	r2, #15
    34d8:	18ba      	adds	r2, r7, r2
    34da:	7812      	ldrb	r2, [r2, #0]
    34dc:	68b9      	ldr	r1, [r7, #8]
    34de:	188a      	adds	r2, r1, r2
    34e0:	7812      	ldrb	r2, [r2, #0]
    34e2:	b291      	uxth	r1, r2
    34e4:	4a18      	ldr	r2, [pc, #96]	; (3548 <udc_req_std_dev_get_str_desc+0xd4>)
    34e6:	005b      	lsls	r3, r3, #1
    34e8:	18d3      	adds	r3, r2, r3
    34ea:	1c0a      	adds	r2, r1, #0
    34ec:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    34ee:	230f      	movs	r3, #15
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	781a      	ldrb	r2, [r3, #0]
    34f4:	230f      	movs	r3, #15
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	3201      	adds	r2, #1
    34fa:	701a      	strb	r2, [r3, #0]
    34fc:	230f      	movs	r3, #15
    34fe:	18fa      	adds	r2, r7, r3
    3500:	1dfb      	adds	r3, r7, #7
    3502:	7812      	ldrb	r2, [r2, #0]
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	429a      	cmp	r2, r3
    3508:	d3e2      	bcc.n	34d0 <udc_req_std_dev_get_str_desc+0x5c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    350a:	1dfb      	adds	r3, r7, #7
    350c:	781b      	ldrb	r3, [r3, #0]
    350e:	3301      	adds	r3, #1
    3510:	b2db      	uxtb	r3, r3
    3512:	18db      	adds	r3, r3, r3
    3514:	b2da      	uxtb	r2, r3
    3516:	4b0c      	ldr	r3, [pc, #48]	; (3548 <udc_req_std_dev_get_str_desc+0xd4>)
    3518:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    351a:	4b0b      	ldr	r3, [pc, #44]	; (3548 <udc_req_std_dev_get_str_desc+0xd4>)
    351c:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    351e:	b29b      	uxth	r3, r3
    3520:	4a09      	ldr	r2, [pc, #36]	; (3548 <udc_req_std_dev_get_str_desc+0xd4>)
    3522:	1c10      	adds	r0, r2, #0
    3524:	1c19      	adds	r1, r3, #0
    3526:	4b05      	ldr	r3, [pc, #20]	; (353c <udc_req_std_dev_get_str_desc+0xc8>)
    3528:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    352a:	2301      	movs	r3, #1
}
    352c:	1c18      	adds	r0, r3, #0
    352e:	46bd      	mov	sp, r7
    3530:	b004      	add	sp, #16
    3532:	bd80      	pop	{r7, pc}
    3534:	200004a4 	.word	0x200004a4
    3538:	200000ac 	.word	0x200000ac
    353c:	00006061 	.word	0x00006061
    3540:	200000b0 	.word	0x200000b0
    3544:	200000bc 	.word	0x200000bc
    3548:	200000c8 	.word	0x200000c8

0000354c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    354c:	b580      	push	{r7, lr}
    354e:	b082      	sub	sp, #8
    3550:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3552:	4b3a      	ldr	r3, [pc, #232]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    3554:	885a      	ldrh	r2, [r3, #2]
    3556:	1dfb      	adds	r3, r7, #7
    3558:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    355a:	4b38      	ldr	r3, [pc, #224]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    355c:	885b      	ldrh	r3, [r3, #2]
    355e:	0a1b      	lsrs	r3, r3, #8
    3560:	b29b      	uxth	r3, r3
    3562:	b2db      	uxtb	r3, r3
    3564:	2b02      	cmp	r3, #2
    3566:	d013      	beq.n	3590 <udc_req_std_dev_get_descriptor+0x44>
    3568:	dc02      	bgt.n	3570 <udc_req_std_dev_get_descriptor+0x24>
    356a:	2b01      	cmp	r3, #1
    356c:	d005      	beq.n	357a <udc_req_std_dev_get_descriptor+0x2e>
    356e:	e054      	b.n	361a <udc_req_std_dev_get_descriptor+0xce>
    3570:	2b03      	cmp	r3, #3
    3572:	d046      	beq.n	3602 <udc_req_std_dev_get_descriptor+0xb6>
    3574:	2b0f      	cmp	r3, #15
    3576:	d030      	beq.n	35da <udc_req_std_dev_get_descriptor+0x8e>
    3578:	e04f      	b.n	361a <udc_req_std_dev_get_descriptor+0xce>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    357a:	4b31      	ldr	r3, [pc, #196]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    357c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    357e:	4b30      	ldr	r3, [pc, #192]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    3580:	681b      	ldr	r3, [r3, #0]
    3582:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3584:	b29b      	uxth	r3, r3
    3586:	1c10      	adds	r0, r2, #0
    3588:	1c19      	adds	r1, r3, #0
    358a:	4b2e      	ldr	r3, [pc, #184]	; (3644 <udc_req_std_dev_get_descriptor+0xf8>)
    358c:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    358e:	e046      	b.n	361e <udc_req_std_dev_get_descriptor+0xd2>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3590:	4b2b      	ldr	r3, [pc, #172]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	7c5b      	ldrb	r3, [r3, #17]
    3596:	1dfa      	adds	r2, r7, #7
    3598:	7812      	ldrb	r2, [r2, #0]
    359a:	429a      	cmp	r2, r3
    359c:	d301      	bcc.n	35a2 <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    359e:	2300      	movs	r3, #0
    35a0:	e048      	b.n	3634 <udc_req_std_dev_get_descriptor+0xe8>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    35a2:	4b27      	ldr	r3, [pc, #156]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    35a4:	685a      	ldr	r2, [r3, #4]
    35a6:	1dfb      	adds	r3, r7, #7
    35a8:	781b      	ldrb	r3, [r3, #0]
    35aa:	00db      	lsls	r3, r3, #3
    35ac:	18d3      	adds	r3, r2, r3
    35ae:	6819      	ldr	r1, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    35b0:	4b23      	ldr	r3, [pc, #140]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    35b2:	685a      	ldr	r2, [r3, #4]
    35b4:	1dfb      	adds	r3, r7, #7
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	00db      	lsls	r3, r3, #3
    35ba:	18d3      	adds	r3, r2, r3
    35bc:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    35be:	789a      	ldrb	r2, [r3, #2]
    35c0:	78db      	ldrb	r3, [r3, #3]
    35c2:	021b      	lsls	r3, r3, #8
    35c4:	4313      	orrs	r3, r2
    35c6:	b29b      	uxth	r3, r3
    35c8:	1c08      	adds	r0, r1, #0
    35ca:	1c19      	adds	r1, r3, #0
    35cc:	4b1d      	ldr	r3, [pc, #116]	; (3644 <udc_req_std_dev_get_descriptor+0xf8>)
    35ce:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    35d0:	4b1a      	ldr	r3, [pc, #104]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    35d2:	689b      	ldr	r3, [r3, #8]
    35d4:	2202      	movs	r2, #2
    35d6:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    35d8:	e021      	b.n	361e <udc_req_std_dev_get_descriptor+0xd2>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    35da:	4b19      	ldr	r3, [pc, #100]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    35dc:	689b      	ldr	r3, [r3, #8]
    35de:	2b00      	cmp	r3, #0
    35e0:	d101      	bne.n	35e6 <udc_req_std_dev_get_descriptor+0x9a>
			return false;
    35e2:	2300      	movs	r3, #0
    35e4:	e026      	b.n	3634 <udc_req_std_dev_get_descriptor+0xe8>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    35e6:	4b16      	ldr	r3, [pc, #88]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    35e8:	6899      	ldr	r1, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    35ea:	4b15      	ldr	r3, [pc, #84]	; (3640 <udc_req_std_dev_get_descriptor+0xf4>)
    35ec:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    35ee:	789a      	ldrb	r2, [r3, #2]
    35f0:	78db      	ldrb	r3, [r3, #3]
    35f2:	021b      	lsls	r3, r3, #8
    35f4:	4313      	orrs	r3, r2
    35f6:	b29b      	uxth	r3, r3
    35f8:	1c08      	adds	r0, r1, #0
    35fa:	1c19      	adds	r1, r3, #0
    35fc:	4b11      	ldr	r3, [pc, #68]	; (3644 <udc_req_std_dev_get_descriptor+0xf8>)
    35fe:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    3600:	e00d      	b.n	361e <udc_req_std_dev_get_descriptor+0xd2>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    3602:	4b11      	ldr	r3, [pc, #68]	; (3648 <udc_req_std_dev_get_descriptor+0xfc>)
    3604:	4798      	blx	r3
    3606:	1c03      	adds	r3, r0, #0
    3608:	1c1a      	adds	r2, r3, #0
    360a:	2301      	movs	r3, #1
    360c:	4053      	eors	r3, r2
    360e:	b2db      	uxtb	r3, r3
    3610:	2b00      	cmp	r3, #0
    3612:	d001      	beq.n	3618 <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    3614:	2300      	movs	r3, #0
    3616:	e00d      	b.n	3634 <udc_req_std_dev_get_descriptor+0xe8>
		}
		break;
    3618:	e001      	b.n	361e <udc_req_std_dev_get_descriptor+0xd2>

	default:
		// Unknown descriptor requested
		return false;
    361a:	2300      	movs	r3, #0
    361c:	e00a      	b.n	3634 <udc_req_std_dev_get_descriptor+0xe8>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    361e:	4b07      	ldr	r3, [pc, #28]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    3620:	88da      	ldrh	r2, [r3, #6]
    3622:	4b06      	ldr	r3, [pc, #24]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    3624:	899b      	ldrh	r3, [r3, #12]
    3626:	429a      	cmp	r2, r3
    3628:	d203      	bcs.n	3632 <udc_req_std_dev_get_descriptor+0xe6>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    362a:	4b04      	ldr	r3, [pc, #16]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    362c:	88da      	ldrh	r2, [r3, #6]
    362e:	4b03      	ldr	r3, [pc, #12]	; (363c <udc_req_std_dev_get_descriptor+0xf0>)
    3630:	819a      	strh	r2, [r3, #12]
	}
	return true;
    3632:	2301      	movs	r3, #1
}
    3634:	1c18      	adds	r0, r3, #0
    3636:	46bd      	mov	sp, r7
    3638:	b002      	add	sp, #8
    363a:	bd80      	pop	{r7, pc}
    363c:	200004a4 	.word	0x200004a4
    3640:	200000a0 	.word	0x200000a0
    3644:	00006061 	.word	0x00006061
    3648:	00003475 	.word	0x00003475

0000364c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    364c:	b580      	push	{r7, lr}
    364e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <udc_req_std_dev_get_configuration+0x24>)
    3652:	88db      	ldrh	r3, [r3, #6]
    3654:	2b01      	cmp	r3, #1
    3656:	d001      	beq.n	365c <udc_req_std_dev_get_configuration+0x10>
		return false;
    3658:	2300      	movs	r3, #0
    365a:	e005      	b.n	3668 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    365c:	4b05      	ldr	r3, [pc, #20]	; (3674 <udc_req_std_dev_get_configuration+0x28>)
    365e:	1c18      	adds	r0, r3, #0
    3660:	2101      	movs	r1, #1
    3662:	4b05      	ldr	r3, [pc, #20]	; (3678 <udc_req_std_dev_get_configuration+0x2c>)
    3664:	4798      	blx	r3
	return true;
    3666:	2301      	movs	r3, #1
}
    3668:	1c18      	adds	r0, r3, #0
    366a:	46bd      	mov	sp, r7
    366c:	bd80      	pop	{r7, pc}
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	200004a4 	.word	0x200004a4
    3674:	20000178 	.word	0x20000178
    3678:	00006061 	.word	0x00006061

0000367c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    367c:	b580      	push	{r7, lr}
    367e:	b082      	sub	sp, #8
    3680:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3682:	4b2a      	ldr	r3, [pc, #168]	; (372c <udc_req_std_dev_set_configuration+0xb0>)
    3684:	88db      	ldrh	r3, [r3, #6]
    3686:	2b00      	cmp	r3, #0
    3688:	d001      	beq.n	368e <udc_req_std_dev_set_configuration+0x12>
		return false;
    368a:	2300      	movs	r3, #0
    368c:	e04a      	b.n	3724 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    368e:	4b28      	ldr	r3, [pc, #160]	; (3730 <udc_req_std_dev_set_configuration+0xb4>)
    3690:	4798      	blx	r3
    3692:	1e03      	subs	r3, r0, #0
    3694:	d101      	bne.n	369a <udc_req_std_dev_set_configuration+0x1e>
		return false;
    3696:	2300      	movs	r3, #0
    3698:	e044      	b.n	3724 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    369a:	4b24      	ldr	r3, [pc, #144]	; (372c <udc_req_std_dev_set_configuration+0xb0>)
    369c:	885b      	ldrh	r3, [r3, #2]
    369e:	1c1a      	adds	r2, r3, #0
    36a0:	23ff      	movs	r3, #255	; 0xff
    36a2:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    36a4:	4b23      	ldr	r3, [pc, #140]	; (3734 <udc_req_std_dev_set_configuration+0xb8>)
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    36aa:	429a      	cmp	r2, r3
    36ac:	dd01      	ble.n	36b2 <udc_req_std_dev_set_configuration+0x36>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    36ae:	2300      	movs	r3, #0
    36b0:	e038      	b.n	3724 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    36b2:	4b21      	ldr	r3, [pc, #132]	; (3738 <udc_req_std_dev_set_configuration+0xbc>)
    36b4:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    36b6:	4b1d      	ldr	r3, [pc, #116]	; (372c <udc_req_std_dev_set_configuration+0xb0>)
    36b8:	885b      	ldrh	r3, [r3, #2]
    36ba:	b2da      	uxtb	r2, r3
    36bc:	4b1f      	ldr	r3, [pc, #124]	; (373c <udc_req_std_dev_set_configuration+0xc0>)
    36be:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    36c0:	4b1e      	ldr	r3, [pc, #120]	; (373c <udc_req_std_dev_set_configuration+0xc0>)
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d101      	bne.n	36cc <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    36c8:	2301      	movs	r3, #1
    36ca:	e02b      	b.n	3724 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    36cc:	4b19      	ldr	r3, [pc, #100]	; (3734 <udc_req_std_dev_set_configuration+0xb8>)
    36ce:	685a      	ldr	r2, [r3, #4]
    36d0:	4b1a      	ldr	r3, [pc, #104]	; (373c <udc_req_std_dev_set_configuration+0xc0>)
    36d2:	781b      	ldrb	r3, [r3, #0]
    36d4:	491a      	ldr	r1, [pc, #104]	; (3740 <udc_req_std_dev_set_configuration+0xc4>)
    36d6:	468c      	mov	ip, r1
    36d8:	4463      	add	r3, ip
    36da:	00db      	lsls	r3, r3, #3
    36dc:	18d2      	adds	r2, r2, r3
    36de:	4b19      	ldr	r3, [pc, #100]	; (3744 <udc_req_std_dev_set_configuration+0xc8>)
    36e0:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    36e2:	1dfb      	adds	r3, r7, #7
    36e4:	2200      	movs	r2, #0
    36e6:	701a      	strb	r2, [r3, #0]
    36e8:	e013      	b.n	3712 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    36ea:	1dfb      	adds	r3, r7, #7
    36ec:	781b      	ldrb	r3, [r3, #0]
    36ee:	1c18      	adds	r0, r3, #0
    36f0:	2100      	movs	r1, #0
    36f2:	4b15      	ldr	r3, [pc, #84]	; (3748 <udc_req_std_dev_set_configuration+0xcc>)
    36f4:	4798      	blx	r3
    36f6:	1c03      	adds	r3, r0, #0
    36f8:	1c1a      	adds	r2, r3, #0
    36fa:	2301      	movs	r3, #1
    36fc:	4053      	eors	r3, r2
    36fe:	b2db      	uxtb	r3, r3
    3700:	2b00      	cmp	r3, #0
    3702:	d001      	beq.n	3708 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    3704:	2300      	movs	r3, #0
    3706:	e00d      	b.n	3724 <udc_req_std_dev_set_configuration+0xa8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3708:	1dfb      	adds	r3, r7, #7
    370a:	781a      	ldrb	r2, [r3, #0]
    370c:	1dfb      	adds	r3, r7, #7
    370e:	3201      	adds	r2, #1
    3710:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3712:	4b0c      	ldr	r3, [pc, #48]	; (3744 <udc_req_std_dev_set_configuration+0xc8>)
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	791b      	ldrb	r3, [r3, #4]
    371a:	1dfa      	adds	r2, r7, #7
    371c:	7812      	ldrb	r2, [r2, #0]
    371e:	429a      	cmp	r2, r3
    3720:	d3e3      	bcc.n	36ea <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    3722:	2301      	movs	r3, #1
}
    3724:	1c18      	adds	r0, r3, #0
    3726:	46bd      	mov	sp, r7
    3728:	b002      	add	sp, #8
    372a:	bd80      	pop	{r7, pc}
    372c:	200004a4 	.word	0x200004a4
    3730:	00006045 	.word	0x00006045
    3734:	200000a0 	.word	0x200000a0
    3738:	000031cd 	.word	0x000031cd
    373c:	20000178 	.word	0x20000178
    3740:	1fffffff 	.word	0x1fffffff
    3744:	2000017c 	.word	0x2000017c
    3748:	00003109 	.word	0x00003109

0000374c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    374c:	b580      	push	{r7, lr}
    374e:	b082      	sub	sp, #8
    3750:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3752:	4b21      	ldr	r3, [pc, #132]	; (37d8 <udc_req_std_iface_get_setting+0x8c>)
    3754:	88db      	ldrh	r3, [r3, #6]
    3756:	2b01      	cmp	r3, #1
    3758:	d001      	beq.n	375e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    375a:	2300      	movs	r3, #0
    375c:	e038      	b.n	37d0 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    375e:	4b1f      	ldr	r3, [pc, #124]	; (37dc <udc_req_std_iface_get_setting+0x90>)
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	2b00      	cmp	r3, #0
    3764:	d101      	bne.n	376a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    3766:	2300      	movs	r3, #0
    3768:	e032      	b.n	37d0 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    376a:	4b1b      	ldr	r3, [pc, #108]	; (37d8 <udc_req_std_iface_get_setting+0x8c>)
    376c:	889a      	ldrh	r2, [r3, #4]
    376e:	1dfb      	adds	r3, r7, #7
    3770:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3772:	4b1b      	ldr	r3, [pc, #108]	; (37e0 <udc_req_std_iface_get_setting+0x94>)
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	791b      	ldrb	r3, [r3, #4]
    377a:	1dfa      	adds	r2, r7, #7
    377c:	7812      	ldrb	r2, [r2, #0]
    377e:	429a      	cmp	r2, r3
    3780:	d301      	bcc.n	3786 <udc_req_std_iface_get_setting+0x3a>
		return false;
    3782:	2300      	movs	r3, #0
    3784:	e024      	b.n	37d0 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3786:	1dfb      	adds	r3, r7, #7
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	1c18      	adds	r0, r3, #0
    378c:	2100      	movs	r1, #0
    378e:	4b15      	ldr	r3, [pc, #84]	; (37e4 <udc_req_std_iface_get_setting+0x98>)
    3790:	4798      	blx	r3
    3792:	1c03      	adds	r3, r0, #0
    3794:	1c1a      	adds	r2, r3, #0
    3796:	2301      	movs	r3, #1
    3798:	4053      	eors	r3, r2
    379a:	b2db      	uxtb	r3, r3
    379c:	2b00      	cmp	r3, #0
    379e:	d001      	beq.n	37a4 <udc_req_std_iface_get_setting+0x58>
		return false;
    37a0:	2300      	movs	r3, #0
    37a2:	e015      	b.n	37d0 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    37a4:	4b0e      	ldr	r3, [pc, #56]	; (37e0 <udc_req_std_iface_get_setting+0x94>)
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	685a      	ldr	r2, [r3, #4]
    37aa:	1dfb      	adds	r3, r7, #7
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	009b      	lsls	r3, r3, #2
    37b0:	18d3      	adds	r3, r2, r3
    37b2:	681b      	ldr	r3, [r3, #0]
    37b4:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	68db      	ldr	r3, [r3, #12]
    37ba:	4798      	blx	r3
    37bc:	1c03      	adds	r3, r0, #0
    37be:	1c1a      	adds	r2, r3, #0
    37c0:	4b09      	ldr	r3, [pc, #36]	; (37e8 <udc_req_std_iface_get_setting+0x9c>)
    37c2:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <udc_req_std_iface_get_setting+0x9c>)
    37c6:	1c18      	adds	r0, r3, #0
    37c8:	2101      	movs	r1, #1
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <udc_req_std_iface_get_setting+0xa0>)
    37cc:	4798      	blx	r3
	return true;
    37ce:	2301      	movs	r3, #1
}
    37d0:	1c18      	adds	r0, r3, #0
    37d2:	46bd      	mov	sp, r7
    37d4:	b002      	add	sp, #8
    37d6:	bd80      	pop	{r7, pc}
    37d8:	200004a4 	.word	0x200004a4
    37dc:	20000178 	.word	0x20000178
    37e0:	2000017c 	.word	0x2000017c
    37e4:	00002fb1 	.word	0x00002fb1
    37e8:	20000174 	.word	0x20000174
    37ec:	00006061 	.word	0x00006061

000037f0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	b082      	sub	sp, #8
    37f4:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    37f6:	4b17      	ldr	r3, [pc, #92]	; (3854 <udc_req_std_iface_set_setting+0x64>)
    37f8:	88db      	ldrh	r3, [r3, #6]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d001      	beq.n	3802 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    37fe:	2300      	movs	r3, #0
    3800:	e024      	b.n	384c <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    3802:	4b15      	ldr	r3, [pc, #84]	; (3858 <udc_req_std_iface_set_setting+0x68>)
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	2b00      	cmp	r3, #0
    3808:	d101      	bne.n	380e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    380a:	2300      	movs	r3, #0
    380c:	e01e      	b.n	384c <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    380e:	4b11      	ldr	r3, [pc, #68]	; (3854 <udc_req_std_iface_set_setting+0x64>)
    3810:	889a      	ldrh	r2, [r3, #4]
    3812:	1dfb      	adds	r3, r7, #7
    3814:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3816:	4b0f      	ldr	r3, [pc, #60]	; (3854 <udc_req_std_iface_set_setting+0x64>)
    3818:	885a      	ldrh	r2, [r3, #2]
    381a:	1dbb      	adds	r3, r7, #6
    381c:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    381e:	1dfb      	adds	r3, r7, #7
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	1c18      	adds	r0, r3, #0
    3824:	4b0d      	ldr	r3, [pc, #52]	; (385c <udc_req_std_iface_set_setting+0x6c>)
    3826:	4798      	blx	r3
    3828:	1c03      	adds	r3, r0, #0
    382a:	1c1a      	adds	r2, r3, #0
    382c:	2301      	movs	r3, #1
    382e:	4053      	eors	r3, r2
    3830:	b2db      	uxtb	r3, r3
    3832:	2b00      	cmp	r3, #0
    3834:	d001      	beq.n	383a <udc_req_std_iface_set_setting+0x4a>
		return false;
    3836:	2300      	movs	r3, #0
    3838:	e008      	b.n	384c <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    383a:	1dfb      	adds	r3, r7, #7
    383c:	781a      	ldrb	r2, [r3, #0]
    383e:	1dbb      	adds	r3, r7, #6
    3840:	781b      	ldrb	r3, [r3, #0]
    3842:	1c10      	adds	r0, r2, #0
    3844:	1c19      	adds	r1, r3, #0
    3846:	4b06      	ldr	r3, [pc, #24]	; (3860 <udc_req_std_iface_set_setting+0x70>)
    3848:	4798      	blx	r3
    384a:	1c03      	adds	r3, r0, #0
}
    384c:	1c18      	adds	r0, r3, #0
    384e:	46bd      	mov	sp, r7
    3850:	b002      	add	sp, #8
    3852:	bd80      	pop	{r7, pc}
    3854:	200004a4 	.word	0x200004a4
    3858:	20000178 	.word	0x20000178
    385c:	00003055 	.word	0x00003055
    3860:	00003109 	.word	0x00003109

00003864 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    3864:	b580      	push	{r7, lr}
    3866:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    3868:	4b48      	ldr	r3, [pc, #288]	; (398c <udc_reqstd+0x128>)
    386a:	781b      	ldrb	r3, [r3, #0]
    386c:	b2db      	uxtb	r3, r3
    386e:	b25b      	sxtb	r3, r3
    3870:	2b00      	cmp	r3, #0
    3872:	da41      	bge.n	38f8 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    3874:	4b45      	ldr	r3, [pc, #276]	; (398c <udc_reqstd+0x128>)
    3876:	88db      	ldrh	r3, [r3, #6]
    3878:	2b00      	cmp	r3, #0
    387a:	d101      	bne.n	3880 <udc_reqstd+0x1c>
			return false; // Error for USB host
    387c:	2300      	movs	r3, #0
    387e:	e082      	b.n	3986 <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3880:	4b42      	ldr	r3, [pc, #264]	; (398c <udc_reqstd+0x128>)
    3882:	781b      	ldrb	r3, [r3, #0]
    3884:	1c1a      	adds	r2, r3, #0
    3886:	231f      	movs	r3, #31
    3888:	4013      	ands	r3, r2
    388a:	d114      	bne.n	38b6 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    388c:	4b3f      	ldr	r3, [pc, #252]	; (398c <udc_reqstd+0x128>)
    388e:	785b      	ldrb	r3, [r3, #1]
    3890:	2b06      	cmp	r3, #6
    3892:	d008      	beq.n	38a6 <udc_reqstd+0x42>
    3894:	2b08      	cmp	r3, #8
    3896:	d00a      	beq.n	38ae <udc_reqstd+0x4a>
    3898:	2b00      	cmp	r3, #0
    389a:	d000      	beq.n	389e <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    389c:	e00b      	b.n	38b6 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    389e:	4b3c      	ldr	r3, [pc, #240]	; (3990 <udc_reqstd+0x12c>)
    38a0:	4798      	blx	r3
    38a2:	1c03      	adds	r3, r0, #0
    38a4:	e06f      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    38a6:	4b3b      	ldr	r3, [pc, #236]	; (3994 <udc_reqstd+0x130>)
    38a8:	4798      	blx	r3
    38aa:	1c03      	adds	r3, r0, #0
    38ac:	e06b      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    38ae:	4b3a      	ldr	r3, [pc, #232]	; (3998 <udc_reqstd+0x134>)
    38b0:	4798      	blx	r3
    38b2:	1c03      	adds	r3, r0, #0
    38b4:	e067      	b.n	3986 <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    38b6:	4b35      	ldr	r3, [pc, #212]	; (398c <udc_reqstd+0x128>)
    38b8:	781b      	ldrb	r3, [r3, #0]
    38ba:	1c1a      	adds	r2, r3, #0
    38bc:	231f      	movs	r3, #31
    38be:	4013      	ands	r3, r2
    38c0:	2b01      	cmp	r3, #1
    38c2:	d108      	bne.n	38d6 <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    38c4:	4b31      	ldr	r3, [pc, #196]	; (398c <udc_reqstd+0x128>)
    38c6:	785b      	ldrb	r3, [r3, #1]
    38c8:	2b0a      	cmp	r3, #10
    38ca:	d000      	beq.n	38ce <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    38cc:	e003      	b.n	38d6 <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    38ce:	4b33      	ldr	r3, [pc, #204]	; (399c <udc_reqstd+0x138>)
    38d0:	4798      	blx	r3
    38d2:	1c03      	adds	r3, r0, #0
    38d4:	e057      	b.n	3986 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    38d6:	4b2d      	ldr	r3, [pc, #180]	; (398c <udc_reqstd+0x128>)
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	1c1a      	adds	r2, r3, #0
    38dc:	231f      	movs	r3, #31
    38de:	4013      	ands	r3, r2
    38e0:	2b02      	cmp	r3, #2
    38e2:	d14f      	bne.n	3984 <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    38e4:	4b29      	ldr	r3, [pc, #164]	; (398c <udc_reqstd+0x128>)
    38e6:	785b      	ldrb	r3, [r3, #1]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d001      	beq.n	38f0 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    38ec:	46c0      	nop			; (mov r8, r8)
    38ee:	e049      	b.n	3984 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    38f0:	4b2b      	ldr	r3, [pc, #172]	; (39a0 <udc_reqstd+0x13c>)
    38f2:	4798      	blx	r3
    38f4:	1c03      	adds	r3, r0, #0
    38f6:	e046      	b.n	3986 <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    38f8:	4b24      	ldr	r3, [pc, #144]	; (398c <udc_reqstd+0x128>)
    38fa:	781b      	ldrb	r3, [r3, #0]
    38fc:	1c1a      	adds	r2, r3, #0
    38fe:	231f      	movs	r3, #31
    3900:	4013      	ands	r3, r2
    3902:	d119      	bne.n	3938 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3904:	4b21      	ldr	r3, [pc, #132]	; (398c <udc_reqstd+0x128>)
    3906:	785b      	ldrb	r3, [r3, #1]
    3908:	2b09      	cmp	r3, #9
    390a:	d814      	bhi.n	3936 <udc_reqstd+0xd2>
    390c:	009a      	lsls	r2, r3, #2
    390e:	4b25      	ldr	r3, [pc, #148]	; (39a4 <udc_reqstd+0x140>)
    3910:	18d3      	adds	r3, r2, r3
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    3916:	4b24      	ldr	r3, [pc, #144]	; (39a8 <udc_reqstd+0x144>)
    3918:	4798      	blx	r3
    391a:	1c03      	adds	r3, r0, #0
    391c:	e033      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    391e:	4b23      	ldr	r3, [pc, #140]	; (39ac <udc_reqstd+0x148>)
    3920:	4798      	blx	r3
    3922:	1c03      	adds	r3, r0, #0
    3924:	e02f      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    3926:	4b22      	ldr	r3, [pc, #136]	; (39b0 <udc_reqstd+0x14c>)
    3928:	4798      	blx	r3
    392a:	1c03      	adds	r3, r0, #0
    392c:	e02b      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    392e:	4b21      	ldr	r3, [pc, #132]	; (39b4 <udc_reqstd+0x150>)
    3930:	4798      	blx	r3
    3932:	1c03      	adds	r3, r0, #0
    3934:	e027      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    3936:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3938:	4b14      	ldr	r3, [pc, #80]	; (398c <udc_reqstd+0x128>)
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	1c1a      	adds	r2, r3, #0
    393e:	231f      	movs	r3, #31
    3940:	4013      	ands	r3, r2
    3942:	2b01      	cmp	r3, #1
    3944:	d108      	bne.n	3958 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3946:	4b11      	ldr	r3, [pc, #68]	; (398c <udc_reqstd+0x128>)
    3948:	785b      	ldrb	r3, [r3, #1]
    394a:	2b0b      	cmp	r3, #11
    394c:	d000      	beq.n	3950 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    394e:	e003      	b.n	3958 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    3950:	4b19      	ldr	r3, [pc, #100]	; (39b8 <udc_reqstd+0x154>)
    3952:	4798      	blx	r3
    3954:	1c03      	adds	r3, r0, #0
    3956:	e016      	b.n	3986 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3958:	4b0c      	ldr	r3, [pc, #48]	; (398c <udc_reqstd+0x128>)
    395a:	781b      	ldrb	r3, [r3, #0]
    395c:	1c1a      	adds	r2, r3, #0
    395e:	231f      	movs	r3, #31
    3960:	4013      	ands	r3, r2
    3962:	2b02      	cmp	r3, #2
    3964:	d10e      	bne.n	3984 <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3966:	4b09      	ldr	r3, [pc, #36]	; (398c <udc_reqstd+0x128>)
    3968:	785b      	ldrb	r3, [r3, #1]
    396a:	2b01      	cmp	r3, #1
    396c:	d002      	beq.n	3974 <udc_reqstd+0x110>
    396e:	2b03      	cmp	r3, #3
    3970:	d004      	beq.n	397c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    3972:	e007      	b.n	3984 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    3974:	4b11      	ldr	r3, [pc, #68]	; (39bc <udc_reqstd+0x158>)
    3976:	4798      	blx	r3
    3978:	1c03      	adds	r3, r0, #0
    397a:	e004      	b.n	3986 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    397c:	4b10      	ldr	r3, [pc, #64]	; (39c0 <udc_reqstd+0x15c>)
    397e:	4798      	blx	r3
    3980:	1c03      	adds	r3, r0, #0
    3982:	e000      	b.n	3986 <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    3984:	2300      	movs	r3, #0
}
    3986:	1c18      	adds	r0, r3, #0
    3988:	46bd      	mov	sp, r7
    398a:	bd80      	pop	{r7, pc}
    398c:	200004a4 	.word	0x200004a4
    3990:	000032a9 	.word	0x000032a9
    3994:	0000354d 	.word	0x0000354d
    3998:	0000364d 	.word	0x0000364d
    399c:	0000374d 	.word	0x0000374d
    39a0:	000032d9 	.word	0x000032d9
    39a4:	00008e84 	.word	0x00008e84
    39a8:	0000344d 	.word	0x0000344d
    39ac:	00003321 	.word	0x00003321
    39b0:	0000339d 	.word	0x0000339d
    39b4:	0000367d 	.word	0x0000367d
    39b8:	000037f1 	.word	0x000037f1
    39bc:	00003365 	.word	0x00003365
    39c0:	000033e1 	.word	0x000033e1

000039c4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b082      	sub	sp, #8
    39c8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    39ca:	4b24      	ldr	r3, [pc, #144]	; (3a5c <udc_req_iface+0x98>)
    39cc:	781b      	ldrb	r3, [r3, #0]
    39ce:	2b00      	cmp	r3, #0
    39d0:	d101      	bne.n	39d6 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    39d2:	2300      	movs	r3, #0
    39d4:	e03d      	b.n	3a52 <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    39d6:	4b22      	ldr	r3, [pc, #136]	; (3a60 <udc_req_iface+0x9c>)
    39d8:	889a      	ldrh	r2, [r3, #4]
    39da:	1dfb      	adds	r3, r7, #7
    39dc:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    39de:	4b21      	ldr	r3, [pc, #132]	; (3a64 <udc_req_iface+0xa0>)
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	791b      	ldrb	r3, [r3, #4]
    39e6:	1dfa      	adds	r2, r7, #7
    39e8:	7812      	ldrb	r2, [r2, #0]
    39ea:	429a      	cmp	r2, r3
    39ec:	d301      	bcc.n	39f2 <udc_req_iface+0x2e>
		return false;
    39ee:	2300      	movs	r3, #0
    39f0:	e02f      	b.n	3a52 <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    39f2:	1dfb      	adds	r3, r7, #7
    39f4:	781b      	ldrb	r3, [r3, #0]
    39f6:	1c18      	adds	r0, r3, #0
    39f8:	2100      	movs	r1, #0
    39fa:	4b1b      	ldr	r3, [pc, #108]	; (3a68 <udc_req_iface+0xa4>)
    39fc:	4798      	blx	r3
    39fe:	1c03      	adds	r3, r0, #0
    3a00:	1c1a      	adds	r2, r3, #0
    3a02:	2301      	movs	r3, #1
    3a04:	4053      	eors	r3, r2
    3a06:	b2db      	uxtb	r3, r3
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d001      	beq.n	3a10 <udc_req_iface+0x4c>
		return false;
    3a0c:	2300      	movs	r3, #0
    3a0e:	e020      	b.n	3a52 <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3a10:	4b14      	ldr	r3, [pc, #80]	; (3a64 <udc_req_iface+0xa0>)
    3a12:	681b      	ldr	r3, [r3, #0]
    3a14:	685a      	ldr	r2, [r3, #4]
    3a16:	1dfb      	adds	r3, r7, #7
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	009b      	lsls	r3, r3, #2
    3a1c:	18d3      	adds	r3, r2, r3
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3a22:	683b      	ldr	r3, [r7, #0]
    3a24:	68db      	ldr	r3, [r3, #12]
    3a26:	4798      	blx	r3
    3a28:	1c03      	adds	r3, r0, #0
    3a2a:	1c1a      	adds	r2, r3, #0
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	1c18      	adds	r0, r3, #0
    3a32:	1c11      	adds	r1, r2, #0
    3a34:	4b0c      	ldr	r3, [pc, #48]	; (3a68 <udc_req_iface+0xa4>)
    3a36:	4798      	blx	r3
    3a38:	1c03      	adds	r3, r0, #0
    3a3a:	1c1a      	adds	r2, r3, #0
    3a3c:	2301      	movs	r3, #1
    3a3e:	4053      	eors	r3, r2
    3a40:	b2db      	uxtb	r3, r3
    3a42:	2b00      	cmp	r3, #0
    3a44:	d001      	beq.n	3a4a <udc_req_iface+0x86>
		return false;
    3a46:	2300      	movs	r3, #0
    3a48:	e003      	b.n	3a52 <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3a4a:	683b      	ldr	r3, [r7, #0]
    3a4c:	689b      	ldr	r3, [r3, #8]
    3a4e:	4798      	blx	r3
    3a50:	1c03      	adds	r3, r0, #0
}
    3a52:	1c18      	adds	r0, r3, #0
    3a54:	46bd      	mov	sp, r7
    3a56:	b002      	add	sp, #8
    3a58:	bd80      	pop	{r7, pc}
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	20000178 	.word	0x20000178
    3a60:	200004a4 	.word	0x200004a4
    3a64:	2000017c 	.word	0x2000017c
    3a68:	00002fb1 	.word	0x00002fb1

00003a6c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3a72:	4b22      	ldr	r3, [pc, #136]	; (3afc <udc_req_ep+0x90>)
    3a74:	781b      	ldrb	r3, [r3, #0]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d101      	bne.n	3a7e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    3a7a:	2300      	movs	r3, #0
    3a7c:	e039      	b.n	3af2 <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3a7e:	4b20      	ldr	r3, [pc, #128]	; (3b00 <udc_req_ep+0x94>)
    3a80:	889a      	ldrh	r2, [r3, #4]
    3a82:	1dfb      	adds	r3, r7, #7
    3a84:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3a86:	1dfb      	adds	r3, r7, #7
    3a88:	2200      	movs	r2, #0
    3a8a:	701a      	strb	r2, [r3, #0]
    3a8c:	e028      	b.n	3ae0 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3a8e:	4b1d      	ldr	r3, [pc, #116]	; (3b04 <udc_req_ep+0x98>)
    3a90:	681b      	ldr	r3, [r3, #0]
    3a92:	685a      	ldr	r2, [r3, #4]
    3a94:	1dfb      	adds	r3, r7, #7
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	009b      	lsls	r3, r3, #2
    3a9a:	18d3      	adds	r3, r2, r3
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3aa0:	683b      	ldr	r3, [r7, #0]
    3aa2:	68db      	ldr	r3, [r3, #12]
    3aa4:	4798      	blx	r3
    3aa6:	1c03      	adds	r3, r0, #0
    3aa8:	1c1a      	adds	r2, r3, #0
    3aaa:	1dfb      	adds	r3, r7, #7
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	1c18      	adds	r0, r3, #0
    3ab0:	1c11      	adds	r1, r2, #0
    3ab2:	4b15      	ldr	r3, [pc, #84]	; (3b08 <udc_req_ep+0x9c>)
    3ab4:	4798      	blx	r3
    3ab6:	1c03      	adds	r3, r0, #0
    3ab8:	1c1a      	adds	r2, r3, #0
    3aba:	2301      	movs	r3, #1
    3abc:	4053      	eors	r3, r2
    3abe:	b2db      	uxtb	r3, r3
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d001      	beq.n	3ac8 <udc_req_ep+0x5c>
			return false;
    3ac4:	2300      	movs	r3, #0
    3ac6:	e014      	b.n	3af2 <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	689b      	ldr	r3, [r3, #8]
    3acc:	4798      	blx	r3
    3ace:	1e03      	subs	r3, r0, #0
    3ad0:	d001      	beq.n	3ad6 <udc_req_ep+0x6a>
			return true;
    3ad2:	2301      	movs	r3, #1
    3ad4:	e00d      	b.n	3af2 <udc_req_ep+0x86>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3ad6:	1dfb      	adds	r3, r7, #7
    3ad8:	781a      	ldrb	r2, [r3, #0]
    3ada:	1dfb      	adds	r3, r7, #7
    3adc:	3201      	adds	r2, #1
    3ade:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3ae0:	4b08      	ldr	r3, [pc, #32]	; (3b04 <udc_req_ep+0x98>)
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	791b      	ldrb	r3, [r3, #4]
    3ae8:	1dfa      	adds	r2, r7, #7
    3aea:	7812      	ldrb	r2, [r2, #0]
    3aec:	429a      	cmp	r2, r3
    3aee:	d3ce      	bcc.n	3a8e <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3af0:	2300      	movs	r3, #0
}
    3af2:	1c18      	adds	r0, r3, #0
    3af4:	46bd      	mov	sp, r7
    3af6:	b002      	add	sp, #8
    3af8:	bd80      	pop	{r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	20000178 	.word	0x20000178
    3b00:	200004a4 	.word	0x200004a4
    3b04:	2000017c 	.word	0x2000017c
    3b08:	00002fb1 	.word	0x00002fb1

00003b0c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3b10:	4b1f      	ldr	r3, [pc, #124]	; (3b90 <udc_process_setup+0x84>)
    3b12:	2200      	movs	r2, #0
    3b14:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    3b16:	4b1e      	ldr	r3, [pc, #120]	; (3b90 <udc_process_setup+0x84>)
    3b18:	2200      	movs	r2, #0
    3b1a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    3b1c:	4b1c      	ldr	r3, [pc, #112]	; (3b90 <udc_process_setup+0x84>)
    3b1e:	2200      	movs	r2, #0
    3b20:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    3b22:	4b1b      	ldr	r3, [pc, #108]	; (3b90 <udc_process_setup+0x84>)
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	b2db      	uxtb	r3, r3
    3b28:	b25b      	sxtb	r3, r3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	da05      	bge.n	3b3a <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3b2e:	4b18      	ldr	r3, [pc, #96]	; (3b90 <udc_process_setup+0x84>)
    3b30:	88db      	ldrh	r3, [r3, #6]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d101      	bne.n	3b3a <udc_process_setup+0x2e>
			return false; // Error from USB host
    3b36:	2300      	movs	r3, #0
    3b38:	e026      	b.n	3b88 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3b3a:	4b15      	ldr	r3, [pc, #84]	; (3b90 <udc_process_setup+0x84>)
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	1c1a      	adds	r2, r3, #0
    3b40:	2360      	movs	r3, #96	; 0x60
    3b42:	4013      	ands	r3, r2
    3b44:	d105      	bne.n	3b52 <udc_process_setup+0x46>
		if (udc_reqstd()) {
    3b46:	4b13      	ldr	r3, [pc, #76]	; (3b94 <udc_process_setup+0x88>)
    3b48:	4798      	blx	r3
    3b4a:	1e03      	subs	r3, r0, #0
    3b4c:	d001      	beq.n	3b52 <udc_process_setup+0x46>
			return true;
    3b4e:	2301      	movs	r3, #1
    3b50:	e01a      	b.n	3b88 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3b52:	4b0f      	ldr	r3, [pc, #60]	; (3b90 <udc_process_setup+0x84>)
    3b54:	781b      	ldrb	r3, [r3, #0]
    3b56:	1c1a      	adds	r2, r3, #0
    3b58:	231f      	movs	r3, #31
    3b5a:	4013      	ands	r3, r2
    3b5c:	2b01      	cmp	r3, #1
    3b5e:	d105      	bne.n	3b6c <udc_process_setup+0x60>
		if (udc_req_iface()) {
    3b60:	4b0d      	ldr	r3, [pc, #52]	; (3b98 <udc_process_setup+0x8c>)
    3b62:	4798      	blx	r3
    3b64:	1e03      	subs	r3, r0, #0
    3b66:	d001      	beq.n	3b6c <udc_process_setup+0x60>
			return true;
    3b68:	2301      	movs	r3, #1
    3b6a:	e00d      	b.n	3b88 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3b6c:	4b08      	ldr	r3, [pc, #32]	; (3b90 <udc_process_setup+0x84>)
    3b6e:	781b      	ldrb	r3, [r3, #0]
    3b70:	1c1a      	adds	r2, r3, #0
    3b72:	231f      	movs	r3, #31
    3b74:	4013      	ands	r3, r2
    3b76:	2b02      	cmp	r3, #2
    3b78:	d105      	bne.n	3b86 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
    3b7a:	4b08      	ldr	r3, [pc, #32]	; (3b9c <udc_process_setup+0x90>)
    3b7c:	4798      	blx	r3
    3b7e:	1e03      	subs	r3, r0, #0
    3b80:	d001      	beq.n	3b86 <udc_process_setup+0x7a>
			return true;
    3b82:	2301      	movs	r3, #1
    3b84:	e000      	b.n	3b88 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3b86:	2300      	movs	r3, #0
#endif
}
    3b88:	1c18      	adds	r0, r3, #0
    3b8a:	46bd      	mov	sp, r7
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	200004a4 	.word	0x200004a4
    3b94:	00003865 	.word	0x00003865
    3b98:	000039c5 	.word	0x000039c5
    3b9c:	00003a6d 	.word	0x00003a6d

00003ba0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b082      	sub	sp, #8
    3ba4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3ba6:	4b0f      	ldr	r3, [pc, #60]	; (3be4 <cpu_irq_enter_critical+0x44>)
    3ba8:	681b      	ldr	r3, [r3, #0]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d112      	bne.n	3bd4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3bae:	f3ef 8310 	mrs	r3, PRIMASK
    3bb2:	607b      	str	r3, [r7, #4]
  return(result);
    3bb4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d109      	bne.n	3bce <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3bba:	b672      	cpsid	i
    3bbc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3bc0:	4b09      	ldr	r3, [pc, #36]	; (3be8 <cpu_irq_enter_critical+0x48>)
    3bc2:	2200      	movs	r2, #0
    3bc4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3bc6:	4b09      	ldr	r3, [pc, #36]	; (3bec <cpu_irq_enter_critical+0x4c>)
    3bc8:	2201      	movs	r2, #1
    3bca:	701a      	strb	r2, [r3, #0]
    3bcc:	e002      	b.n	3bd4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3bce:	4b07      	ldr	r3, [pc, #28]	; (3bec <cpu_irq_enter_critical+0x4c>)
    3bd0:	2200      	movs	r2, #0
    3bd2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3bd4:	4b03      	ldr	r3, [pc, #12]	; (3be4 <cpu_irq_enter_critical+0x44>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	1c5a      	adds	r2, r3, #1
    3bda:	4b02      	ldr	r3, [pc, #8]	; (3be4 <cpu_irq_enter_critical+0x44>)
    3bdc:	601a      	str	r2, [r3, #0]
}
    3bde:	46bd      	mov	sp, r7
    3be0:	b002      	add	sp, #8
    3be2:	bd80      	pop	{r7, pc}
    3be4:	20000188 	.word	0x20000188
    3be8:	200000dc 	.word	0x200000dc
    3bec:	2000018c 	.word	0x2000018c

00003bf0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3bf4:	4b0a      	ldr	r3, [pc, #40]	; (3c20 <cpu_irq_leave_critical+0x30>)
    3bf6:	681b      	ldr	r3, [r3, #0]
    3bf8:	1e5a      	subs	r2, r3, #1
    3bfa:	4b09      	ldr	r3, [pc, #36]	; (3c20 <cpu_irq_leave_critical+0x30>)
    3bfc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3bfe:	4b08      	ldr	r3, [pc, #32]	; (3c20 <cpu_irq_leave_critical+0x30>)
    3c00:	681b      	ldr	r3, [r3, #0]
    3c02:	2b00      	cmp	r3, #0
    3c04:	d10a      	bne.n	3c1c <cpu_irq_leave_critical+0x2c>
    3c06:	4b07      	ldr	r3, [pc, #28]	; (3c24 <cpu_irq_leave_critical+0x34>)
    3c08:	781b      	ldrb	r3, [r3, #0]
    3c0a:	b2db      	uxtb	r3, r3
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d005      	beq.n	3c1c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3c10:	4b05      	ldr	r3, [pc, #20]	; (3c28 <cpu_irq_leave_critical+0x38>)
    3c12:	2201      	movs	r2, #1
    3c14:	701a      	strb	r2, [r3, #0]
    3c16:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3c1a:	b662      	cpsie	i
	}
}
    3c1c:	46bd      	mov	sp, r7
    3c1e:	bd80      	pop	{r7, pc}
    3c20:	20000188 	.word	0x20000188
    3c24:	2000018c 	.word	0x2000018c
    3c28:	200000dc 	.word	0x200000dc

00003c2c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b084      	sub	sp, #16
    3c30:	af00      	add	r7, sp, #0
    3c32:	1c02      	adds	r2, r0, #0
    3c34:	1dfb      	adds	r3, r7, #7
    3c36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c38:	230f      	movs	r3, #15
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	1dfa      	adds	r2, r7, #7
    3c3e:	7812      	ldrb	r2, [r2, #0]
    3c40:	09d2      	lsrs	r2, r2, #7
    3c42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c44:	230e      	movs	r3, #14
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	1dfa      	adds	r2, r7, #7
    3c4a:	7812      	ldrb	r2, [r2, #0]
    3c4c:	0952      	lsrs	r2, r2, #5
    3c4e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c50:	4b0d      	ldr	r3, [pc, #52]	; (3c88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c52:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3c54:	230f      	movs	r3, #15
    3c56:	18fb      	adds	r3, r7, r3
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d10f      	bne.n	3c7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c5e:	230f      	movs	r3, #15
    3c60:	18fb      	adds	r3, r7, r3
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	009b      	lsls	r3, r3, #2
    3c66:	2210      	movs	r2, #16
    3c68:	4694      	mov	ip, r2
    3c6a:	44bc      	add	ip, r7
    3c6c:	4463      	add	r3, ip
    3c6e:	3b08      	subs	r3, #8
    3c70:	681a      	ldr	r2, [r3, #0]
    3c72:	230e      	movs	r3, #14
    3c74:	18fb      	adds	r3, r7, r3
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	01db      	lsls	r3, r3, #7
    3c7a:	18d3      	adds	r3, r2, r3
    3c7c:	e000      	b.n	3c80 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3c7e:	2300      	movs	r3, #0
	}
}
    3c80:	1c18      	adds	r0, r3, #0
    3c82:	46bd      	mov	sp, r7
    3c84:	b004      	add	sp, #16
    3c86:	bd80      	pop	{r7, pc}
    3c88:	41004400 	.word	0x41004400

00003c8c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b082      	sub	sp, #8
    3c90:	af00      	add	r7, sp, #0
    3c92:	1c02      	adds	r2, r0, #0
    3c94:	1dfb      	adds	r3, r7, #7
    3c96:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c98:	1dfb      	adds	r3, r7, #7
    3c9a:	781b      	ldrb	r3, [r3, #0]
    3c9c:	1c18      	adds	r0, r3, #0
    3c9e:	4b03      	ldr	r3, [pc, #12]	; (3cac <port_get_group_from_gpio_pin+0x20>)
    3ca0:	4798      	blx	r3
    3ca2:	1c03      	adds	r3, r0, #0
}
    3ca4:	1c18      	adds	r0, r3, #0
    3ca6:	46bd      	mov	sp, r7
    3ca8:	b002      	add	sp, #8
    3caa:	bd80      	pop	{r7, pc}
    3cac:	00003c2d 	.word	0x00003c2d

00003cb0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b082      	sub	sp, #8
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3cb8:	687b      	ldr	r3, [r7, #4]
    3cba:	2200      	movs	r2, #0
    3cbc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	2201      	movs	r2, #1
    3cc2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	2200      	movs	r2, #0
    3cc8:	709a      	strb	r2, [r3, #2]
}
    3cca:	46bd      	mov	sp, r7
    3ccc:	b002      	add	sp, #8
    3cce:	bd80      	pop	{r7, pc}

00003cd0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b084      	sub	sp, #16
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	1c02      	adds	r2, r0, #0
    3cd8:	1dfb      	adds	r3, r7, #7
    3cda:	701a      	strb	r2, [r3, #0]
    3cdc:	1dbb      	adds	r3, r7, #6
    3cde:	1c0a      	adds	r2, r1, #0
    3ce0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3ce2:	1dfb      	adds	r3, r7, #7
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	1c18      	adds	r0, r3, #0
    3ce8:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <port_pin_set_output_level+0x4c>)
    3cea:	4798      	blx	r3
    3cec:	1c03      	adds	r3, r0, #0
    3cee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cf0:	1dfb      	adds	r3, r7, #7
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	221f      	movs	r2, #31
    3cf6:	4013      	ands	r3, r2
    3cf8:	2201      	movs	r2, #1
    3cfa:	409a      	lsls	r2, r3
    3cfc:	1c13      	adds	r3, r2, #0
    3cfe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3d00:	1dbb      	adds	r3, r7, #6
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	2b00      	cmp	r3, #0
    3d06:	d003      	beq.n	3d10 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3d08:	68fb      	ldr	r3, [r7, #12]
    3d0a:	68ba      	ldr	r2, [r7, #8]
    3d0c:	619a      	str	r2, [r3, #24]
    3d0e:	e002      	b.n	3d16 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d10:	68fb      	ldr	r3, [r7, #12]
    3d12:	68ba      	ldr	r2, [r7, #8]
    3d14:	615a      	str	r2, [r3, #20]
	}
}
    3d16:	46bd      	mov	sp, r7
    3d18:	b004      	add	sp, #16
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	00003c8d 	.word	0x00003c8d

00003d20 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3d20:	b580      	push	{r7, lr}
    3d22:	b082      	sub	sp, #8
    3d24:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3d26:	1d3b      	adds	r3, r7, #4
    3d28:	1c18      	adds	r0, r3, #0
    3d2a:	4b0e      	ldr	r3, [pc, #56]	; (3d64 <system_board_init+0x44>)
    3d2c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3d2e:	1d3b      	adds	r3, r7, #4
    3d30:	2201      	movs	r2, #1
    3d32:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3d34:	1d3b      	adds	r3, r7, #4
    3d36:	2011      	movs	r0, #17
    3d38:	1c19      	adds	r1, r3, #0
    3d3a:	4b0b      	ldr	r3, [pc, #44]	; (3d68 <system_board_init+0x48>)
    3d3c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3d3e:	2011      	movs	r0, #17
    3d40:	2101      	movs	r1, #1
    3d42:	4b0a      	ldr	r3, [pc, #40]	; (3d6c <system_board_init+0x4c>)
    3d44:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3d46:	1d3b      	adds	r3, r7, #4
    3d48:	2200      	movs	r2, #0
    3d4a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3d4c:	1d3b      	adds	r3, r7, #4
    3d4e:	2201      	movs	r2, #1
    3d50:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3d52:	1d3b      	adds	r3, r7, #4
    3d54:	200f      	movs	r0, #15
    3d56:	1c19      	adds	r1, r3, #0
    3d58:	4b03      	ldr	r3, [pc, #12]	; (3d68 <system_board_init+0x48>)
    3d5a:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3d5c:	46bd      	mov	sp, r7
    3d5e:	b002      	add	sp, #8
    3d60:	bd80      	pop	{r7, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	00003cb1 	.word	0x00003cb1
    3d68:	0000438d 	.word	0x0000438d
    3d6c:	00003cd1 	.word	0x00003cd1

00003d70 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b084      	sub	sp, #16
    3d74:	af00      	add	r7, sp, #0
    3d76:	1c02      	adds	r2, r0, #0
    3d78:	1dfb      	adds	r3, r7, #7
    3d7a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3d7c:	230f      	movs	r3, #15
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	1dfa      	adds	r2, r7, #7
    3d82:	7812      	ldrb	r2, [r2, #0]
    3d84:	0952      	lsrs	r2, r2, #5
    3d86:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3d88:	230f      	movs	r3, #15
    3d8a:	18fb      	adds	r3, r7, r3
    3d8c:	781b      	ldrb	r3, [r3, #0]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d10c      	bne.n	3dac <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3d92:	4b09      	ldr	r3, [pc, #36]	; (3db8 <_extint_get_eic_from_channel+0x48>)
    3d94:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3d96:	230f      	movs	r3, #15
    3d98:	18fb      	adds	r3, r7, r3
    3d9a:	781b      	ldrb	r3, [r3, #0]
    3d9c:	009b      	lsls	r3, r3, #2
    3d9e:	2210      	movs	r2, #16
    3da0:	4694      	mov	ip, r2
    3da2:	44bc      	add	ip, r7
    3da4:	4463      	add	r3, ip
    3da6:	3b08      	subs	r3, #8
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	e000      	b.n	3dae <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3dac:	2300      	movs	r3, #0
	}
}
    3dae:	1c18      	adds	r0, r3, #0
    3db0:	46bd      	mov	sp, r7
    3db2:	b004      	add	sp, #16
    3db4:	bd80      	pop	{r7, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	40001800 	.word	0x40001800

00003dbc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b084      	sub	sp, #16
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	1c02      	adds	r2, r0, #0
    3dc4:	1dfb      	adds	r3, r7, #7
    3dc6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3dc8:	1dfb      	adds	r3, r7, #7
    3dca:	781b      	ldrb	r3, [r3, #0]
    3dcc:	1c18      	adds	r0, r3, #0
    3dce:	4b0b      	ldr	r3, [pc, #44]	; (3dfc <extint_chan_is_detected+0x40>)
    3dd0:	4798      	blx	r3
    3dd2:	1c03      	adds	r3, r0, #0
    3dd4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3dd6:	1dfb      	adds	r3, r7, #7
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	221f      	movs	r2, #31
    3ddc:	4013      	ands	r3, r2
    3dde:	2201      	movs	r2, #1
    3de0:	409a      	lsls	r2, r3
    3de2:	1c13      	adds	r3, r2, #0
    3de4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3de6:	68fb      	ldr	r3, [r7, #12]
    3de8:	691b      	ldr	r3, [r3, #16]
    3dea:	68ba      	ldr	r2, [r7, #8]
    3dec:	4013      	ands	r3, r2
    3dee:	1e5a      	subs	r2, r3, #1
    3df0:	4193      	sbcs	r3, r2
    3df2:	b2db      	uxtb	r3, r3
}
    3df4:	1c18      	adds	r0, r3, #0
    3df6:	46bd      	mov	sp, r7
    3df8:	b004      	add	sp, #16
    3dfa:	bd80      	pop	{r7, pc}
    3dfc:	00003d71 	.word	0x00003d71

00003e00 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b084      	sub	sp, #16
    3e04:	af00      	add	r7, sp, #0
    3e06:	1c02      	adds	r2, r0, #0
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	1c18      	adds	r0, r3, #0
    3e12:	4b09      	ldr	r3, [pc, #36]	; (3e38 <extint_chan_clear_detected+0x38>)
    3e14:	4798      	blx	r3
    3e16:	1c03      	adds	r3, r0, #0
    3e18:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3e1a:	1dfb      	adds	r3, r7, #7
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	221f      	movs	r2, #31
    3e20:	4013      	ands	r3, r2
    3e22:	2201      	movs	r2, #1
    3e24:	409a      	lsls	r2, r3
    3e26:	1c13      	adds	r3, r2, #0
    3e28:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3e2a:	68fb      	ldr	r3, [r7, #12]
    3e2c:	68ba      	ldr	r2, [r7, #8]
    3e2e:	611a      	str	r2, [r3, #16]
}
    3e30:	46bd      	mov	sp, r7
    3e32:	b004      	add	sp, #16
    3e34:	bd80      	pop	{r7, pc}
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	00003d71 	.word	0x00003d71

00003e3c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    3e44:	1c08      	adds	r0, r1, #0
    3e46:	1c11      	adds	r1, r2, #0
    3e48:	1cfb      	adds	r3, r7, #3
    3e4a:	1c02      	adds	r2, r0, #0
    3e4c:	701a      	strb	r2, [r3, #0]
    3e4e:	1cbb      	adds	r3, r7, #2
    3e50:	1c0a      	adds	r2, r1, #0
    3e52:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3e54:	1cbb      	adds	r3, r7, #2
    3e56:	781b      	ldrb	r3, [r3, #0]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d001      	beq.n	3e60 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3e5c:	2317      	movs	r3, #23
    3e5e:	e019      	b.n	3e94 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    3e60:	1cfb      	adds	r3, r7, #3
    3e62:	781a      	ldrb	r2, [r3, #0]
    3e64:	4b0d      	ldr	r3, [pc, #52]	; (3e9c <extint_register_callback+0x60>)
    3e66:	0092      	lsls	r2, r2, #2
    3e68:	58d3      	ldr	r3, [r2, r3]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d107      	bne.n	3e7e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    3e6e:	1cfb      	adds	r3, r7, #3
    3e70:	781a      	ldrb	r2, [r3, #0]
    3e72:	4b0a      	ldr	r3, [pc, #40]	; (3e9c <extint_register_callback+0x60>)
    3e74:	0092      	lsls	r2, r2, #2
    3e76:	6879      	ldr	r1, [r7, #4]
    3e78:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    3e7a:	2300      	movs	r3, #0
    3e7c:	e00a      	b.n	3e94 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3e7e:	1cfb      	adds	r3, r7, #3
    3e80:	781a      	ldrb	r2, [r3, #0]
    3e82:	4b06      	ldr	r3, [pc, #24]	; (3e9c <extint_register_callback+0x60>)
    3e84:	0092      	lsls	r2, r2, #2
    3e86:	58d2      	ldr	r2, [r2, r3]
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	429a      	cmp	r2, r3
    3e8c:	d101      	bne.n	3e92 <extint_register_callback+0x56>
		return STATUS_OK;
    3e8e:	2300      	movs	r3, #0
    3e90:	e000      	b.n	3e94 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3e92:	231d      	movs	r3, #29
}
    3e94:	1c18      	adds	r0, r3, #0
    3e96:	46bd      	mov	sp, r7
    3e98:	b002      	add	sp, #8
    3e9a:	bd80      	pop	{r7, pc}
    3e9c:	200002bc 	.word	0x200002bc

00003ea0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b084      	sub	sp, #16
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	1c02      	adds	r2, r0, #0
    3ea8:	1dfb      	adds	r3, r7, #7
    3eaa:	701a      	strb	r2, [r3, #0]
    3eac:	1dbb      	adds	r3, r7, #6
    3eae:	1c0a      	adds	r2, r1, #0
    3eb0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3eb2:	1dbb      	adds	r3, r7, #6
    3eb4:	781b      	ldrb	r3, [r3, #0]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d10e      	bne.n	3ed8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3eba:	1dfb      	adds	r3, r7, #7
    3ebc:	781b      	ldrb	r3, [r3, #0]
    3ebe:	1c18      	adds	r0, r3, #0
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <extint_chan_enable_callback+0x44>)
    3ec2:	4798      	blx	r3
    3ec4:	1c03      	adds	r3, r0, #0
    3ec6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    3ec8:	1dfb      	adds	r3, r7, #7
    3eca:	781b      	ldrb	r3, [r3, #0]
    3ecc:	2201      	movs	r2, #1
    3ece:	409a      	lsls	r2, r3
    3ed0:	68fb      	ldr	r3, [r7, #12]
    3ed2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3ed4:	2300      	movs	r3, #0
    3ed6:	e000      	b.n	3eda <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3ed8:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3eda:	1c18      	adds	r0, r3, #0
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003d71 	.word	0x00003d71

00003ee8 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	1c02      	adds	r2, r0, #0
    3ef0:	1dfb      	adds	r3, r7, #7
    3ef2:	701a      	strb	r2, [r3, #0]
    3ef4:	1dbb      	adds	r3, r7, #6
    3ef6:	1c0a      	adds	r2, r1, #0
    3ef8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3efa:	1dbb      	adds	r3, r7, #6
    3efc:	781b      	ldrb	r3, [r3, #0]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d10e      	bne.n	3f20 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3f02:	1dfb      	adds	r3, r7, #7
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	1c18      	adds	r0, r3, #0
    3f08:	4b08      	ldr	r3, [pc, #32]	; (3f2c <extint_chan_disable_callback+0x44>)
    3f0a:	4798      	blx	r3
    3f0c:	1c03      	adds	r3, r0, #0
    3f0e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    3f10:	1dfb      	adds	r3, r7, #7
    3f12:	781b      	ldrb	r3, [r3, #0]
    3f14:	2201      	movs	r2, #1
    3f16:	409a      	lsls	r2, r3
    3f18:	68fb      	ldr	r3, [r7, #12]
    3f1a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f1c:	2300      	movs	r3, #0
    3f1e:	e000      	b.n	3f22 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f20:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3f22:	1c18      	adds	r0, r3, #0
    3f24:	46bd      	mov	sp, r7
    3f26:	b004      	add	sp, #16
    3f28:	bd80      	pop	{r7, pc}
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	00003d71 	.word	0x00003d71

00003f30 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f34:	4b15      	ldr	r3, [pc, #84]	; (3f8c <EIC_Handler+0x5c>)
    3f36:	2200      	movs	r2, #0
    3f38:	701a      	strb	r2, [r3, #0]
    3f3a:	e020      	b.n	3f7e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    3f3c:	4b13      	ldr	r3, [pc, #76]	; (3f8c <EIC_Handler+0x5c>)
    3f3e:	781b      	ldrb	r3, [r3, #0]
    3f40:	1c18      	adds	r0, r3, #0
    3f42:	4b13      	ldr	r3, [pc, #76]	; (3f90 <EIC_Handler+0x60>)
    3f44:	4798      	blx	r3
    3f46:	1e03      	subs	r3, r0, #0
    3f48:	d013      	beq.n	3f72 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    3f4a:	4b10      	ldr	r3, [pc, #64]	; (3f8c <EIC_Handler+0x5c>)
    3f4c:	781b      	ldrb	r3, [r3, #0]
    3f4e:	1c18      	adds	r0, r3, #0
    3f50:	4b10      	ldr	r3, [pc, #64]	; (3f94 <EIC_Handler+0x64>)
    3f52:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3f54:	4b0d      	ldr	r3, [pc, #52]	; (3f8c <EIC_Handler+0x5c>)
    3f56:	781b      	ldrb	r3, [r3, #0]
    3f58:	1c1a      	adds	r2, r3, #0
    3f5a:	4b0f      	ldr	r3, [pc, #60]	; (3f98 <EIC_Handler+0x68>)
    3f5c:	0092      	lsls	r2, r2, #2
    3f5e:	58d3      	ldr	r3, [r2, r3]
    3f60:	2b00      	cmp	r3, #0
    3f62:	d006      	beq.n	3f72 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3f64:	4b09      	ldr	r3, [pc, #36]	; (3f8c <EIC_Handler+0x5c>)
    3f66:	781b      	ldrb	r3, [r3, #0]
    3f68:	1c1a      	adds	r2, r3, #0
    3f6a:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <EIC_Handler+0x68>)
    3f6c:	0092      	lsls	r2, r2, #2
    3f6e:	58d3      	ldr	r3, [r2, r3]
    3f70:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f72:	4b06      	ldr	r3, [pc, #24]	; (3f8c <EIC_Handler+0x5c>)
    3f74:	781b      	ldrb	r3, [r3, #0]
    3f76:	3301      	adds	r3, #1
    3f78:	b2da      	uxtb	r2, r3
    3f7a:	4b04      	ldr	r3, [pc, #16]	; (3f8c <EIC_Handler+0x5c>)
    3f7c:	701a      	strb	r2, [r3, #0]
    3f7e:	4b03      	ldr	r3, [pc, #12]	; (3f8c <EIC_Handler+0x5c>)
    3f80:	781b      	ldrb	r3, [r3, #0]
    3f82:	2b0f      	cmp	r3, #15
    3f84:	d9da      	bls.n	3f3c <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3f86:	46bd      	mov	sp, r7
    3f88:	bd80      	pop	{r7, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	200002b9 	.word	0x200002b9
    3f90:	00003dbd 	.word	0x00003dbd
    3f94:	00003e01 	.word	0x00003e01
    3f98:	200002bc 	.word	0x200002bc

00003f9c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	2200      	movs	r2, #0
    3fa8:	701a      	strb	r2, [r3, #0]
}
    3faa:	46bd      	mov	sp, r7
    3fac:	b002      	add	sp, #8
    3fae:	bd80      	pop	{r7, pc}

00003fb0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	b082      	sub	sp, #8
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	1c02      	adds	r2, r0, #0
    3fb8:	6039      	str	r1, [r7, #0]
    3fba:	1dfb      	adds	r3, r7, #7
    3fbc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3fbe:	1dfb      	adds	r3, r7, #7
    3fc0:	781b      	ldrb	r3, [r3, #0]
    3fc2:	2b01      	cmp	r3, #1
    3fc4:	d00a      	beq.n	3fdc <system_apb_clock_set_mask+0x2c>
    3fc6:	2b02      	cmp	r3, #2
    3fc8:	d00f      	beq.n	3fea <system_apb_clock_set_mask+0x3a>
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d114      	bne.n	3ff8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3fce:	4b0e      	ldr	r3, [pc, #56]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fd0:	4a0d      	ldr	r2, [pc, #52]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fd2:	6991      	ldr	r1, [r2, #24]
    3fd4:	683a      	ldr	r2, [r7, #0]
    3fd6:	430a      	orrs	r2, r1
    3fd8:	619a      	str	r2, [r3, #24]
			break;
    3fda:	e00f      	b.n	3ffc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3fdc:	4b0a      	ldr	r3, [pc, #40]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fde:	4a0a      	ldr	r2, [pc, #40]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fe0:	69d1      	ldr	r1, [r2, #28]
    3fe2:	683a      	ldr	r2, [r7, #0]
    3fe4:	430a      	orrs	r2, r1
    3fe6:	61da      	str	r2, [r3, #28]
			break;
    3fe8:	e008      	b.n	3ffc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3fea:	4b07      	ldr	r3, [pc, #28]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fec:	4a06      	ldr	r2, [pc, #24]	; (4008 <system_apb_clock_set_mask+0x58>)
    3fee:	6a11      	ldr	r1, [r2, #32]
    3ff0:	683a      	ldr	r2, [r7, #0]
    3ff2:	430a      	orrs	r2, r1
    3ff4:	621a      	str	r2, [r3, #32]
			break;
    3ff6:	e001      	b.n	3ffc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3ff8:	2317      	movs	r3, #23
    3ffa:	e000      	b.n	3ffe <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3ffc:	2300      	movs	r3, #0
}
    3ffe:	1c18      	adds	r0, r3, #0
    4000:	46bd      	mov	sp, r7
    4002:	b002      	add	sp, #8
    4004:	bd80      	pop	{r7, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	40000400 	.word	0x40000400

0000400c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
    4012:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	2280      	movs	r2, #128	; 0x80
    4018:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	2200      	movs	r2, #0
    401e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	2201      	movs	r2, #1
    4024:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	2200      	movs	r2, #0
    402a:	70da      	strb	r2, [r3, #3]
}
    402c:	46bd      	mov	sp, r7
    402e:	b002      	add	sp, #8
    4030:	bd80      	pop	{r7, pc}
    4032:	46c0      	nop			; (mov r8, r8)

00004034 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4034:	b580      	push	{r7, lr}
    4036:	b082      	sub	sp, #8
    4038:	af00      	add	r7, sp, #0
    403a:	1c02      	adds	r2, r0, #0
    403c:	1dfb      	adds	r3, r7, #7
    403e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4040:	4b06      	ldr	r3, [pc, #24]	; (405c <system_interrupt_enable+0x28>)
    4042:	1dfa      	adds	r2, r7, #7
    4044:	7812      	ldrb	r2, [r2, #0]
    4046:	1c11      	adds	r1, r2, #0
    4048:	221f      	movs	r2, #31
    404a:	400a      	ands	r2, r1
    404c:	2101      	movs	r1, #1
    404e:	4091      	lsls	r1, r2
    4050:	1c0a      	adds	r2, r1, #0
    4052:	601a      	str	r2, [r3, #0]
}
    4054:	46bd      	mov	sp, r7
    4056:	b002      	add	sp, #8
    4058:	bd80      	pop	{r7, pc}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	e000e100 	.word	0xe000e100

00004060 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4060:	b580      	push	{r7, lr}
    4062:	b084      	sub	sp, #16
    4064:	af00      	add	r7, sp, #0
    4066:	1c02      	adds	r2, r0, #0
    4068:	1dfb      	adds	r3, r7, #7
    406a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    406c:	230f      	movs	r3, #15
    406e:	18fb      	adds	r3, r7, r3
    4070:	1dfa      	adds	r2, r7, #7
    4072:	7812      	ldrb	r2, [r2, #0]
    4074:	0952      	lsrs	r2, r2, #5
    4076:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4078:	230f      	movs	r3, #15
    407a:	18fb      	adds	r3, r7, r3
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	2b00      	cmp	r3, #0
    4080:	d10c      	bne.n	409c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4082:	4b09      	ldr	r3, [pc, #36]	; (40a8 <_extint_get_eic_from_channel+0x48>)
    4084:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4086:	230f      	movs	r3, #15
    4088:	18fb      	adds	r3, r7, r3
    408a:	781b      	ldrb	r3, [r3, #0]
    408c:	009b      	lsls	r3, r3, #2
    408e:	2210      	movs	r2, #16
    4090:	4694      	mov	ip, r2
    4092:	44bc      	add	ip, r7
    4094:	4463      	add	r3, ip
    4096:	3b08      	subs	r3, #8
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	e000      	b.n	409e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    409c:	2300      	movs	r3, #0
	}
}
    409e:	1c18      	adds	r0, r3, #0
    40a0:	46bd      	mov	sp, r7
    40a2:	b004      	add	sp, #16
    40a4:	bd80      	pop	{r7, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	40001800 	.word	0x40001800

000040ac <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    40b2:	4b10      	ldr	r3, [pc, #64]	; (40f4 <extint_is_syncing+0x48>)
    40b4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    40b6:	2300      	movs	r3, #0
    40b8:	607b      	str	r3, [r7, #4]
    40ba:	e012      	b.n	40e2 <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	009b      	lsls	r3, r3, #2
    40c0:	2208      	movs	r2, #8
    40c2:	4694      	mov	ip, r2
    40c4:	44bc      	add	ip, r7
    40c6:	4463      	add	r3, ip
    40c8:	3b08      	subs	r3, #8
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	785b      	ldrb	r3, [r3, #1]
    40ce:	b2db      	uxtb	r3, r3
    40d0:	b2db      	uxtb	r3, r3
    40d2:	b25b      	sxtb	r3, r3
    40d4:	2b00      	cmp	r3, #0
    40d6:	da01      	bge.n	40dc <extint_is_syncing+0x30>
			return true;
    40d8:	2301      	movs	r3, #1
    40da:	e006      	b.n	40ea <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    40dc:	687b      	ldr	r3, [r7, #4]
    40de:	3301      	adds	r3, #1
    40e0:	607b      	str	r3, [r7, #4]
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d0e9      	beq.n	40bc <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    40e8:	2300      	movs	r3, #0
}
    40ea:	1c18      	adds	r0, r3, #0
    40ec:	46bd      	mov	sp, r7
    40ee:	b002      	add	sp, #8
    40f0:	bd80      	pop	{r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	40001800 	.word	0x40001800

000040f8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b084      	sub	sp, #16
    40fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    40fe:	4b2c      	ldr	r3, [pc, #176]	; (41b0 <_system_extint_init+0xb8>)
    4100:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4102:	2000      	movs	r0, #0
    4104:	2140      	movs	r1, #64	; 0x40
    4106:	4b2b      	ldr	r3, [pc, #172]	; (41b4 <_system_extint_init+0xbc>)
    4108:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    410a:	1c3b      	adds	r3, r7, #0
    410c:	1c18      	adds	r0, r3, #0
    410e:	4b2a      	ldr	r3, [pc, #168]	; (41b8 <_system_extint_init+0xc0>)
    4110:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4112:	1c3b      	adds	r3, r7, #0
    4114:	2200      	movs	r2, #0
    4116:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4118:	1c3b      	adds	r3, r7, #0
    411a:	2005      	movs	r0, #5
    411c:	1c19      	adds	r1, r3, #0
    411e:	4b27      	ldr	r3, [pc, #156]	; (41bc <_system_extint_init+0xc4>)
    4120:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4122:	2005      	movs	r0, #5
    4124:	4b26      	ldr	r3, [pc, #152]	; (41c0 <_system_extint_init+0xc8>)
    4126:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4128:	2300      	movs	r3, #0
    412a:	60fb      	str	r3, [r7, #12]
    412c:	e018      	b.n	4160 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	009b      	lsls	r3, r3, #2
    4132:	2210      	movs	r2, #16
    4134:	4694      	mov	ip, r2
    4136:	44bc      	add	ip, r7
    4138:	4463      	add	r3, ip
    413a:	3b0c      	subs	r3, #12
    413c:	681a      	ldr	r2, [r3, #0]
    413e:	68fb      	ldr	r3, [r7, #12]
    4140:	009b      	lsls	r3, r3, #2
    4142:	2110      	movs	r1, #16
    4144:	468c      	mov	ip, r1
    4146:	44bc      	add	ip, r7
    4148:	4463      	add	r3, ip
    414a:	3b0c      	subs	r3, #12
    414c:	681b      	ldr	r3, [r3, #0]
    414e:	781b      	ldrb	r3, [r3, #0]
    4150:	b2db      	uxtb	r3, r3
    4152:	2101      	movs	r1, #1
    4154:	430b      	orrs	r3, r1
    4156:	b2db      	uxtb	r3, r3
    4158:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    415a:	68fb      	ldr	r3, [r7, #12]
    415c:	3301      	adds	r3, #1
    415e:	60fb      	str	r3, [r7, #12]
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	2b00      	cmp	r3, #0
    4164:	d0e3      	beq.n	412e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	4b16      	ldr	r3, [pc, #88]	; (41c4 <_system_extint_init+0xcc>)
    416a:	4798      	blx	r3
    416c:	1e03      	subs	r3, r0, #0
    416e:	d1fb      	bne.n	4168 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4170:	230b      	movs	r3, #11
    4172:	18fb      	adds	r3, r7, r3
    4174:	2200      	movs	r2, #0
    4176:	701a      	strb	r2, [r3, #0]
    4178:	e00d      	b.n	4196 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    417a:	230b      	movs	r3, #11
    417c:	18fb      	adds	r3, r7, r3
    417e:	781a      	ldrb	r2, [r3, #0]
    4180:	4b11      	ldr	r3, [pc, #68]	; (41c8 <_system_extint_init+0xd0>)
    4182:	0092      	lsls	r2, r2, #2
    4184:	2100      	movs	r1, #0
    4186:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4188:	230b      	movs	r3, #11
    418a:	18fb      	adds	r3, r7, r3
    418c:	781a      	ldrb	r2, [r3, #0]
    418e:	230b      	movs	r3, #11
    4190:	18fb      	adds	r3, r7, r3
    4192:	3201      	adds	r2, #1
    4194:	701a      	strb	r2, [r3, #0]
    4196:	230b      	movs	r3, #11
    4198:	18fb      	adds	r3, r7, r3
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	2b0f      	cmp	r3, #15
    419e:	d9ec      	bls.n	417a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    41a0:	2004      	movs	r0, #4
    41a2:	4b0a      	ldr	r3, [pc, #40]	; (41cc <_system_extint_init+0xd4>)
    41a4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    41a6:	4b0a      	ldr	r3, [pc, #40]	; (41d0 <_system_extint_init+0xd8>)
    41a8:	4798      	blx	r3
}
    41aa:	46bd      	mov	sp, r7
    41ac:	b004      	add	sp, #16
    41ae:	bd80      	pop	{r7, pc}
    41b0:	40001800 	.word	0x40001800
    41b4:	00003fb1 	.word	0x00003fb1
    41b8:	00003f9d 	.word	0x00003f9d
    41bc:	00004e3d 	.word	0x00004e3d
    41c0:	00004e81 	.word	0x00004e81
    41c4:	000040ad 	.word	0x000040ad
    41c8:	200002bc 	.word	0x200002bc
    41cc:	00004035 	.word	0x00004035
    41d0:	000041d5 	.word	0x000041d5

000041d4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    41d4:	b580      	push	{r7, lr}
    41d6:	b082      	sub	sp, #8
    41d8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    41da:	4b14      	ldr	r3, [pc, #80]	; (422c <_extint_enable+0x58>)
    41dc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    41de:	2300      	movs	r3, #0
    41e0:	607b      	str	r3, [r7, #4]
    41e2:	e018      	b.n	4216 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	009b      	lsls	r3, r3, #2
    41e8:	2208      	movs	r2, #8
    41ea:	4694      	mov	ip, r2
    41ec:	44bc      	add	ip, r7
    41ee:	4463      	add	r3, ip
    41f0:	3b08      	subs	r3, #8
    41f2:	681a      	ldr	r2, [r3, #0]
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	009b      	lsls	r3, r3, #2
    41f8:	2108      	movs	r1, #8
    41fa:	468c      	mov	ip, r1
    41fc:	44bc      	add	ip, r7
    41fe:	4463      	add	r3, ip
    4200:	3b08      	subs	r3, #8
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	781b      	ldrb	r3, [r3, #0]
    4206:	b2db      	uxtb	r3, r3
    4208:	2102      	movs	r1, #2
    420a:	430b      	orrs	r3, r1
    420c:	b2db      	uxtb	r3, r3
    420e:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	3301      	adds	r3, #1
    4214:	607b      	str	r3, [r7, #4]
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	2b00      	cmp	r3, #0
    421a:	d0e3      	beq.n	41e4 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    421c:	46c0      	nop			; (mov r8, r8)
    421e:	4b04      	ldr	r3, [pc, #16]	; (4230 <_extint_enable+0x5c>)
    4220:	4798      	blx	r3
    4222:	1e03      	subs	r3, r0, #0
    4224:	d1fb      	bne.n	421e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4226:	46bd      	mov	sp, r7
    4228:	b002      	add	sp, #8
    422a:	bd80      	pop	{r7, pc}
    422c:	40001800 	.word	0x40001800
    4230:	000040ad 	.word	0x000040ad

00004234 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4234:	b580      	push	{r7, lr}
    4236:	b082      	sub	sp, #8
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	2200      	movs	r2, #0
    4240:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	2200      	movs	r2, #0
    4246:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	2201      	movs	r2, #1
    424c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	2201      	movs	r2, #1
    4252:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	2200      	movs	r2, #0
    4258:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	2202      	movs	r2, #2
    425e:	72da      	strb	r2, [r3, #11]
}
    4260:	46bd      	mov	sp, r7
    4262:	b002      	add	sp, #8
    4264:	bd80      	pop	{r7, pc}
    4266:	46c0      	nop			; (mov r8, r8)

00004268 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4268:	b580      	push	{r7, lr}
    426a:	b086      	sub	sp, #24
    426c:	af00      	add	r7, sp, #0
    426e:	1c02      	adds	r2, r0, #0
    4270:	6039      	str	r1, [r7, #0]
    4272:	1dfb      	adds	r3, r7, #7
    4274:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4276:	2308      	movs	r3, #8
    4278:	18fb      	adds	r3, r7, r3
    427a:	1c18      	adds	r0, r3, #0
    427c:	4b36      	ldr	r3, [pc, #216]	; (4358 <extint_chan_set_config+0xf0>)
    427e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	685b      	ldr	r3, [r3, #4]
    4284:	b2da      	uxtb	r2, r3
    4286:	2308      	movs	r3, #8
    4288:	18fb      	adds	r3, r7, r3
    428a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    428c:	2308      	movs	r3, #8
    428e:	18fb      	adds	r3, r7, r3
    4290:	2200      	movs	r2, #0
    4292:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4294:	683b      	ldr	r3, [r7, #0]
    4296:	7a1a      	ldrb	r2, [r3, #8]
    4298:	2308      	movs	r3, #8
    429a:	18fb      	adds	r3, r7, r3
    429c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	b2da      	uxtb	r2, r3
    42a4:	2308      	movs	r3, #8
    42a6:	18fb      	adds	r3, r7, r3
    42a8:	1c10      	adds	r0, r2, #0
    42aa:	1c19      	adds	r1, r3, #0
    42ac:	4b2b      	ldr	r3, [pc, #172]	; (435c <extint_chan_set_config+0xf4>)
    42ae:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    42b0:	1dfb      	adds	r3, r7, #7
    42b2:	781b      	ldrb	r3, [r3, #0]
    42b4:	1c18      	adds	r0, r3, #0
    42b6:	4b2a      	ldr	r3, [pc, #168]	; (4360 <extint_chan_set_config+0xf8>)
    42b8:	4798      	blx	r3
    42ba:	1c03      	adds	r3, r0, #0
    42bc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    42be:	1dfb      	adds	r3, r7, #7
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2207      	movs	r2, #7
    42c4:	4013      	ands	r3, r2
    42c6:	009b      	lsls	r3, r3, #2
    42c8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    42ca:	683b      	ldr	r3, [r7, #0]
    42cc:	7adb      	ldrb	r3, [r3, #11]
    42ce:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    42d0:	683b      	ldr	r3, [r7, #0]
    42d2:	7a9b      	ldrb	r3, [r3, #10]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d003      	beq.n	42e0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    42d8:	697b      	ldr	r3, [r7, #20]
    42da:	2208      	movs	r2, #8
    42dc:	4313      	orrs	r3, r2
    42de:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    42e0:	1dfb      	adds	r3, r7, #7
    42e2:	781b      	ldrb	r3, [r3, #0]
    42e4:	08db      	lsrs	r3, r3, #3
    42e6:	b2db      	uxtb	r3, r3
    42e8:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    42ea:	1dfb      	adds	r3, r7, #7
    42ec:	781b      	ldrb	r3, [r3, #0]
    42ee:	08db      	lsrs	r3, r3, #3
    42f0:	b2db      	uxtb	r3, r3
    42f2:	1c1a      	adds	r2, r3, #0
    42f4:	693b      	ldr	r3, [r7, #16]
    42f6:	3206      	adds	r2, #6
    42f8:	0092      	lsls	r2, r2, #2
    42fa:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    42fc:	68fa      	ldr	r2, [r7, #12]
    42fe:	210f      	movs	r1, #15
    4300:	4091      	lsls	r1, r2
    4302:	1c0a      	adds	r2, r1, #0
    4304:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4306:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4308:	68fb      	ldr	r3, [r7, #12]
    430a:	6979      	ldr	r1, [r7, #20]
    430c:	4099      	lsls	r1, r3
    430e:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4310:	431a      	orrs	r2, r3
    4312:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4314:	693b      	ldr	r3, [r7, #16]
    4316:	1d82      	adds	r2, r0, #6
    4318:	0092      	lsls	r2, r2, #2
    431a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    431c:	683b      	ldr	r3, [r7, #0]
    431e:	7a5b      	ldrb	r3, [r3, #9]
    4320:	2b00      	cmp	r3, #0
    4322:	d00a      	beq.n	433a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4324:	693b      	ldr	r3, [r7, #16]
    4326:	695a      	ldr	r2, [r3, #20]
    4328:	1dfb      	adds	r3, r7, #7
    432a:	781b      	ldrb	r3, [r3, #0]
    432c:	2101      	movs	r1, #1
    432e:	4099      	lsls	r1, r3
    4330:	1c0b      	adds	r3, r1, #0
    4332:	431a      	orrs	r2, r3
    4334:	693b      	ldr	r3, [r7, #16]
    4336:	615a      	str	r2, [r3, #20]
    4338:	e00a      	b.n	4350 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    433a:	693b      	ldr	r3, [r7, #16]
    433c:	695b      	ldr	r3, [r3, #20]
    433e:	1dfa      	adds	r2, r7, #7
    4340:	7812      	ldrb	r2, [r2, #0]
    4342:	2101      	movs	r1, #1
    4344:	4091      	lsls	r1, r2
    4346:	1c0a      	adds	r2, r1, #0
    4348:	43d2      	mvns	r2, r2
    434a:	401a      	ands	r2, r3
    434c:	693b      	ldr	r3, [r7, #16]
    434e:	615a      	str	r2, [r3, #20]
	}
}
    4350:	46bd      	mov	sp, r7
    4352:	b006      	add	sp, #24
    4354:	bd80      	pop	{r7, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	0000400d 	.word	0x0000400d
    435c:	00005129 	.word	0x00005129
    4360:	00004061 	.word	0x00004061

00004364 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4364:	b580      	push	{r7, lr}
    4366:	b082      	sub	sp, #8
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	2280      	movs	r2, #128	; 0x80
    4370:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	2200      	movs	r2, #0
    4376:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	2201      	movs	r2, #1
    437c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	2200      	movs	r2, #0
    4382:	70da      	strb	r2, [r3, #3]
}
    4384:	46bd      	mov	sp, r7
    4386:	b002      	add	sp, #8
    4388:	bd80      	pop	{r7, pc}
    438a:	46c0      	nop			; (mov r8, r8)

0000438c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    438c:	b580      	push	{r7, lr}
    438e:	b084      	sub	sp, #16
    4390:	af00      	add	r7, sp, #0
    4392:	1c02      	adds	r2, r0, #0
    4394:	6039      	str	r1, [r7, #0]
    4396:	1dfb      	adds	r3, r7, #7
    4398:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    439a:	230c      	movs	r3, #12
    439c:	18fb      	adds	r3, r7, r3
    439e:	1c18      	adds	r0, r3, #0
    43a0:	4b0f      	ldr	r3, [pc, #60]	; (43e0 <port_pin_set_config+0x54>)
    43a2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    43a4:	230c      	movs	r3, #12
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2280      	movs	r2, #128	; 0x80
    43aa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    43ac:	683b      	ldr	r3, [r7, #0]
    43ae:	781a      	ldrb	r2, [r3, #0]
    43b0:	230c      	movs	r3, #12
    43b2:	18fb      	adds	r3, r7, r3
    43b4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    43b6:	683b      	ldr	r3, [r7, #0]
    43b8:	785a      	ldrb	r2, [r3, #1]
    43ba:	230c      	movs	r3, #12
    43bc:	18fb      	adds	r3, r7, r3
    43be:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    43c0:	683b      	ldr	r3, [r7, #0]
    43c2:	789a      	ldrb	r2, [r3, #2]
    43c4:	230c      	movs	r3, #12
    43c6:	18fb      	adds	r3, r7, r3
    43c8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    43ca:	1dfb      	adds	r3, r7, #7
    43cc:	781a      	ldrb	r2, [r3, #0]
    43ce:	230c      	movs	r3, #12
    43d0:	18fb      	adds	r3, r7, r3
    43d2:	1c10      	adds	r0, r2, #0
    43d4:	1c19      	adds	r1, r3, #0
    43d6:	4b03      	ldr	r3, [pc, #12]	; (43e4 <port_pin_set_config+0x58>)
    43d8:	4798      	blx	r3
}
    43da:	46bd      	mov	sp, r7
    43dc:	b004      	add	sp, #16
    43de:	bd80      	pop	{r7, pc}
    43e0:	00004365 	.word	0x00004365
    43e4:	00005129 	.word	0x00005129

000043e8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    43e8:	b580      	push	{r7, lr}
    43ea:	b082      	sub	sp, #8
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	2201      	movs	r2, #1
    43f4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	2200      	movs	r2, #0
    43fa:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	2206      	movs	r2, #6
    4400:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	2200      	movs	r2, #0
    4406:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	2200      	movs	r2, #0
    440c:	725a      	strb	r2, [r3, #9]
}
    440e:	46bd      	mov	sp, r7
    4410:	b002      	add	sp, #8
    4412:	bd80      	pop	{r7, pc}

00004414 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	2203      	movs	r2, #3
    4420:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	2200      	movs	r2, #0
    4426:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	2201      	movs	r2, #1
    442c:	709a      	strb	r2, [r3, #2]
}
    442e:	46bd      	mov	sp, r7
    4430:	b002      	add	sp, #8
    4432:	bd80      	pop	{r7, pc}

00004434 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    4434:	b580      	push	{r7, lr}
    4436:	b082      	sub	sp, #8
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	2200      	movs	r2, #0
    4440:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	2200      	movs	r2, #0
    4446:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	2200      	movs	r2, #0
    444c:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	2200      	movs	r2, #0
    4452:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	2200      	movs	r2, #0
    4458:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	2201      	movs	r2, #1
    445e:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	2207      	movs	r2, #7
    4464:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	223f      	movs	r2, #63	; 0x3f
    446a:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	2201      	movs	r2, #1
    4470:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	2201      	movs	r2, #1
    4476:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	2206      	movs	r2, #6
    447c:	821a      	strh	r2, [r3, #16]
}
    447e:	46bd      	mov	sp, r7
    4480:	b002      	add	sp, #8
    4482:	bd80      	pop	{r7, pc}

00004484 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4484:	b580      	push	{r7, lr}
    4486:	b082      	sub	sp, #8
    4488:	af00      	add	r7, sp, #0
    448a:	1c02      	adds	r2, r0, #0
    448c:	1dfb      	adds	r3, r7, #7
    448e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4490:	4a03      	ldr	r2, [pc, #12]	; (44a0 <system_cpu_clock_set_divider+0x1c>)
    4492:	1dfb      	adds	r3, r7, #7
    4494:	781b      	ldrb	r3, [r3, #0]
    4496:	7213      	strb	r3, [r2, #8]
}
    4498:	46bd      	mov	sp, r7
    449a:	b002      	add	sp, #8
    449c:	bd80      	pop	{r7, pc}
    449e:	46c0      	nop			; (mov r8, r8)
    44a0:	40000400 	.word	0x40000400

000044a4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    44a4:	b580      	push	{r7, lr}
    44a6:	b082      	sub	sp, #8
    44a8:	af00      	add	r7, sp, #0
    44aa:	1c02      	adds	r2, r0, #0
    44ac:	1dfb      	adds	r3, r7, #7
    44ae:	701a      	strb	r2, [r3, #0]
    44b0:	1dbb      	adds	r3, r7, #6
    44b2:	1c0a      	adds	r2, r1, #0
    44b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    44b6:	1dfb      	adds	r3, r7, #7
    44b8:	781b      	ldrb	r3, [r3, #0]
    44ba:	2b01      	cmp	r3, #1
    44bc:	d008      	beq.n	44d0 <system_apb_clock_set_divider+0x2c>
    44be:	2b02      	cmp	r3, #2
    44c0:	d00b      	beq.n	44da <system_apb_clock_set_divider+0x36>
    44c2:	2b00      	cmp	r3, #0
    44c4:	d10e      	bne.n	44e4 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    44c6:	4a0b      	ldr	r2, [pc, #44]	; (44f4 <system_apb_clock_set_divider+0x50>)
    44c8:	1dbb      	adds	r3, r7, #6
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	7253      	strb	r3, [r2, #9]
			break;
    44ce:	e00b      	b.n	44e8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    44d0:	4a08      	ldr	r2, [pc, #32]	; (44f4 <system_apb_clock_set_divider+0x50>)
    44d2:	1dbb      	adds	r3, r7, #6
    44d4:	781b      	ldrb	r3, [r3, #0]
    44d6:	7293      	strb	r3, [r2, #10]
			break;
    44d8:	e006      	b.n	44e8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    44da:	4a06      	ldr	r2, [pc, #24]	; (44f4 <system_apb_clock_set_divider+0x50>)
    44dc:	1dbb      	adds	r3, r7, #6
    44de:	781b      	ldrb	r3, [r3, #0]
    44e0:	72d3      	strb	r3, [r2, #11]
			break;
    44e2:	e001      	b.n	44e8 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    44e4:	2317      	movs	r3, #23
    44e6:	e000      	b.n	44ea <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    44e8:	2300      	movs	r3, #0
}
    44ea:	1c18      	adds	r0, r3, #0
    44ec:	46bd      	mov	sp, r7
    44ee:	b002      	add	sp, #8
    44f0:	bd80      	pop	{r7, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	40000400 	.word	0x40000400

000044f8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b082      	sub	sp, #8
    44fc:	af00      	add	r7, sp, #0
    44fe:	1c02      	adds	r2, r0, #0
    4500:	1dfb      	adds	r3, r7, #7
    4502:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4504:	4b08      	ldr	r3, [pc, #32]	; (4528 <system_flash_set_waitstates+0x30>)
    4506:	1dfa      	adds	r2, r7, #7
    4508:	7812      	ldrb	r2, [r2, #0]
    450a:	210f      	movs	r1, #15
    450c:	400a      	ands	r2, r1
    450e:	b2d2      	uxtb	r2, r2
    4510:	210f      	movs	r1, #15
    4512:	400a      	ands	r2, r1
    4514:	0052      	lsls	r2, r2, #1
    4516:	6859      	ldr	r1, [r3, #4]
    4518:	201e      	movs	r0, #30
    451a:	4381      	bics	r1, r0
    451c:	430a      	orrs	r2, r1
    451e:	605a      	str	r2, [r3, #4]
}
    4520:	46bd      	mov	sp, r7
    4522:	b002      	add	sp, #8
    4524:	bd80      	pop	{r7, pc}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	41004000 	.word	0x41004000

0000452c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    452c:	b580      	push	{r7, lr}
    452e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4530:	46c0      	nop			; (mov r8, r8)
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <_system_dfll_wait_for_sync+0x14>)
    4534:	68db      	ldr	r3, [r3, #12]
    4536:	2210      	movs	r2, #16
    4538:	4013      	ands	r3, r2
    453a:	d0fa      	beq.n	4532 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    453c:	46bd      	mov	sp, r7
    453e:	bd80      	pop	{r7, pc}
    4540:	40000800 	.word	0x40000800

00004544 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4544:	b580      	push	{r7, lr}
    4546:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4548:	4b0c      	ldr	r3, [pc, #48]	; (457c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    454a:	2202      	movs	r2, #2
    454c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    454e:	4b0c      	ldr	r3, [pc, #48]	; (4580 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4550:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4552:	4a0a      	ldr	r2, [pc, #40]	; (457c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4554:	4b0b      	ldr	r3, [pc, #44]	; (4584 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4556:	689b      	ldr	r3, [r3, #8]
    4558:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    455a:	4a08      	ldr	r2, [pc, #32]	; (457c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    455c:	4b09      	ldr	r3, [pc, #36]	; (4584 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    455e:	685b      	ldr	r3, [r3, #4]
    4560:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4562:	4b06      	ldr	r3, [pc, #24]	; (457c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4564:	2200      	movs	r2, #0
    4566:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4568:	4b05      	ldr	r3, [pc, #20]	; (4580 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    456a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    456c:	4a03      	ldr	r2, [pc, #12]	; (457c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    456e:	4b05      	ldr	r3, [pc, #20]	; (4584 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	b29b      	uxth	r3, r3
    4574:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4576:	46bd      	mov	sp, r7
    4578:	bd80      	pop	{r7, pc}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	40000800 	.word	0x40000800
    4580:	0000452d 	.word	0x0000452d
    4584:	20000190 	.word	0x20000190

00004588 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
    458e:	1c02      	adds	r2, r0, #0
    4590:	1dfb      	adds	r3, r7, #7
    4592:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4594:	1dfb      	adds	r3, r7, #7
    4596:	781b      	ldrb	r3, [r3, #0]
    4598:	2b08      	cmp	r3, #8
    459a:	d849      	bhi.n	4630 <system_clock_source_get_hz+0xa8>
    459c:	009a      	lsls	r2, r3, #2
    459e:	4b27      	ldr	r3, [pc, #156]	; (463c <system_clock_source_get_hz+0xb4>)
    45a0:	18d3      	adds	r3, r2, r3
    45a2:	681b      	ldr	r3, [r3, #0]
    45a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    45a6:	4b26      	ldr	r3, [pc, #152]	; (4640 <system_clock_source_get_hz+0xb8>)
    45a8:	691b      	ldr	r3, [r3, #16]
    45aa:	e042      	b.n	4632 <system_clock_source_get_hz+0xaa>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    45ac:	4b25      	ldr	r3, [pc, #148]	; (4644 <system_clock_source_get_hz+0xbc>)
    45ae:	6a1b      	ldr	r3, [r3, #32]
    45b0:	0a1b      	lsrs	r3, r3, #8
    45b2:	1c1a      	adds	r2, r3, #0
    45b4:	2303      	movs	r3, #3
    45b6:	4013      	ands	r3, r2
    45b8:	b2db      	uxtb	r3, r3
    45ba:	1c1a      	adds	r2, r3, #0
    45bc:	4b22      	ldr	r3, [pc, #136]	; (4648 <system_clock_source_get_hz+0xc0>)
    45be:	40d3      	lsrs	r3, r2
    45c0:	e037      	b.n	4632 <system_clock_source_get_hz+0xaa>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    45c2:	2380      	movs	r3, #128	; 0x80
    45c4:	021b      	lsls	r3, r3, #8
    45c6:	e034      	b.n	4632 <system_clock_source_get_hz+0xaa>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    45c8:	2380      	movs	r3, #128	; 0x80
    45ca:	021b      	lsls	r3, r3, #8
    45cc:	e031      	b.n	4632 <system_clock_source_get_hz+0xaa>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    45ce:	4b1c      	ldr	r3, [pc, #112]	; (4640 <system_clock_source_get_hz+0xb8>)
    45d0:	695b      	ldr	r3, [r3, #20]
    45d2:	e02e      	b.n	4632 <system_clock_source_get_hz+0xaa>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    45d4:	4b1a      	ldr	r3, [pc, #104]	; (4640 <system_clock_source_get_hz+0xb8>)
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	2202      	movs	r2, #2
    45da:	4013      	ands	r3, r2
    45dc:	d101      	bne.n	45e2 <system_clock_source_get_hz+0x5a>
			return 0;
    45de:	2300      	movs	r3, #0
    45e0:	e027      	b.n	4632 <system_clock_source_get_hz+0xaa>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    45e2:	4b1a      	ldr	r3, [pc, #104]	; (464c <system_clock_source_get_hz+0xc4>)
    45e4:	4798      	blx	r3

		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
    45e6:	4b16      	ldr	r3, [pc, #88]	; (4640 <system_clock_source_get_hz+0xb8>)
    45e8:	681b      	ldr	r3, [r3, #0]
    45ea:	2220      	movs	r2, #32
    45ec:	4013      	ands	r3, r2
    45ee:	d001      	beq.n	45f4 <system_clock_source_get_hz+0x6c>
			return 48000000UL;
    45f0:	4b17      	ldr	r3, [pc, #92]	; (4650 <system_clock_source_get_hz+0xc8>)
    45f2:	e01e      	b.n	4632 <system_clock_source_get_hz+0xaa>

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    45f4:	4b12      	ldr	r3, [pc, #72]	; (4640 <system_clock_source_get_hz+0xb8>)
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	2204      	movs	r2, #4
    45fa:	4013      	ands	r3, r2
    45fc:	d009      	beq.n	4612 <system_clock_source_get_hz+0x8a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    45fe:	2000      	movs	r0, #0
    4600:	4b14      	ldr	r3, [pc, #80]	; (4654 <system_clock_source_get_hz+0xcc>)
    4602:	4798      	blx	r3
    4604:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    4606:	4b0e      	ldr	r3, [pc, #56]	; (4640 <system_clock_source_get_hz+0xb8>)
    4608:	689b      	ldr	r3, [r3, #8]
    460a:	041b      	lsls	r3, r3, #16
    460c:	0c1b      	lsrs	r3, r3, #16
		if(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)
			return 48000000UL;

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    460e:	4353      	muls	r3, r2
    4610:	e00f      	b.n	4632 <system_clock_source_get_hz+0xaa>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4612:	4b0f      	ldr	r3, [pc, #60]	; (4650 <system_clock_source_get_hz+0xc8>)
    4614:	e00d      	b.n	4632 <system_clock_source_get_hz+0xaa>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4616:	4a0b      	ldr	r2, [pc, #44]	; (4644 <system_clock_source_get_hz+0xbc>)
    4618:	2350      	movs	r3, #80	; 0x50
    461a:	5cd3      	ldrb	r3, [r2, r3]
    461c:	b2db      	uxtb	r3, r3
    461e:	1c1a      	adds	r2, r3, #0
    4620:	2304      	movs	r3, #4
    4622:	4013      	ands	r3, r2
    4624:	d101      	bne.n	462a <system_clock_source_get_hz+0xa2>
			return 0;
    4626:	2300      	movs	r3, #0
    4628:	e003      	b.n	4632 <system_clock_source_get_hz+0xaa>
		}

		return _system_clock_inst.dpll.frequency;
    462a:	4b05      	ldr	r3, [pc, #20]	; (4640 <system_clock_source_get_hz+0xb8>)
    462c:	68db      	ldr	r3, [r3, #12]
    462e:	e000      	b.n	4632 <system_clock_source_get_hz+0xaa>
#endif

	default:
		return 0;
    4630:	2300      	movs	r3, #0
	}
}
    4632:	1c18      	adds	r0, r3, #0
    4634:	46bd      	mov	sp, r7
    4636:	b002      	add	sp, #8
    4638:	bd80      	pop	{r7, pc}
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	00008eac 	.word	0x00008eac
    4640:	20000190 	.word	0x20000190
    4644:	40000800 	.word	0x40000800
    4648:	007a1200 	.word	0x007a1200
    464c:	0000452d 	.word	0x0000452d
    4650:	02dc6c00 	.word	0x02dc6c00
    4654:	00004f61 	.word	0x00004f61

00004658 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4658:	b580      	push	{r7, lr}
    465a:	b084      	sub	sp, #16
    465c:	af00      	add	r7, sp, #0
    465e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4660:	4b1a      	ldr	r3, [pc, #104]	; (46cc <system_clock_source_osc8m_set_config+0x74>)
    4662:	6a1b      	ldr	r3, [r3, #32]
    4664:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	1c1a      	adds	r2, r3, #0
    466c:	2303      	movs	r3, #3
    466e:	4013      	ands	r3, r2
    4670:	b2da      	uxtb	r2, r3
    4672:	230d      	movs	r3, #13
    4674:	18fb      	adds	r3, r7, r3
    4676:	2103      	movs	r1, #3
    4678:	400a      	ands	r2, r1
    467a:	1c10      	adds	r0, r2, #0
    467c:	781a      	ldrb	r2, [r3, #0]
    467e:	2103      	movs	r1, #3
    4680:	438a      	bics	r2, r1
    4682:	1c11      	adds	r1, r2, #0
    4684:	1c02      	adds	r2, r0, #0
    4686:	430a      	orrs	r2, r1
    4688:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	789a      	ldrb	r2, [r3, #2]
    468e:	230c      	movs	r3, #12
    4690:	18fb      	adds	r3, r7, r3
    4692:	01d0      	lsls	r0, r2, #7
    4694:	781a      	ldrb	r2, [r3, #0]
    4696:	217f      	movs	r1, #127	; 0x7f
    4698:	400a      	ands	r2, r1
    469a:	1c11      	adds	r1, r2, #0
    469c:	1c02      	adds	r2, r0, #0
    469e:	430a      	orrs	r2, r1
    46a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	785a      	ldrb	r2, [r3, #1]
    46a6:	230c      	movs	r3, #12
    46a8:	18fb      	adds	r3, r7, r3
    46aa:	2101      	movs	r1, #1
    46ac:	400a      	ands	r2, r1
    46ae:	0190      	lsls	r0, r2, #6
    46b0:	781a      	ldrb	r2, [r3, #0]
    46b2:	2140      	movs	r1, #64	; 0x40
    46b4:	438a      	bics	r2, r1
    46b6:	1c11      	adds	r1, r2, #0
    46b8:	1c02      	adds	r2, r0, #0
    46ba:	430a      	orrs	r2, r1
    46bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    46be:	4b03      	ldr	r3, [pc, #12]	; (46cc <system_clock_source_osc8m_set_config+0x74>)
    46c0:	68fa      	ldr	r2, [r7, #12]
    46c2:	621a      	str	r2, [r3, #32]
}
    46c4:	46bd      	mov	sp, r7
    46c6:	b004      	add	sp, #16
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	40000800 	.word	0x40000800

000046d0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	7a1b      	ldrb	r3, [r3, #8]
    46dc:	029b      	lsls	r3, r3, #10
    46de:	041b      	lsls	r3, r3, #16
    46e0:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	895b      	ldrh	r3, [r3, #10]
    46e6:	059b      	lsls	r3, r3, #22
    46e8:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    46ea:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    46ec:	4b29      	ldr	r3, [pc, #164]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    46ee:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    46f8:	4313      	orrs	r3, r2
    46fa:	b2db      	uxtb	r3, r3
    46fc:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    4702:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4704:	687a      	ldr	r2, [r7, #4]
    4706:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4708:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	785b      	ldrb	r3, [r3, #1]
    470e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4710:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    4712:	4b20      	ldr	r3, [pc, #128]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    4714:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	781b      	ldrb	r3, [r3, #0]
    471a:	2b04      	cmp	r3, #4
    471c:	d116      	bne.n	474c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	7b1b      	ldrb	r3, [r3, #12]
    4722:	069b      	lsls	r3, r3, #26
    4724:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	89db      	ldrh	r3, [r3, #14]
    472a:	041b      	lsls	r3, r3, #16
    472c:	1c19      	adds	r1, r3, #0
    472e:	4b1a      	ldr	r3, [pc, #104]	; (4798 <system_clock_source_dfll_set_config+0xc8>)
    4730:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4732:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4734:	687a      	ldr	r2, [r7, #4]
    4736:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4738:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    473a:	4b16      	ldr	r3, [pc, #88]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    473c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    473e:	4b15      	ldr	r3, [pc, #84]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	687a      	ldr	r2, [r7, #4]
    4744:	7812      	ldrb	r2, [r2, #0]
    4746:	431a      	orrs	r2, r3
    4748:	4b12      	ldr	r3, [pc, #72]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    474a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	2b20      	cmp	r3, #32
    4752:	d11c      	bne.n	478e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	7b1b      	ldrb	r3, [r3, #12]
    4758:	069b      	lsls	r3, r3, #26
    475a:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	89db      	ldrh	r3, [r3, #14]
    4760:	041b      	lsls	r3, r3, #16
    4762:	1c19      	adds	r1, r3, #0
    4764:	4b0c      	ldr	r3, [pc, #48]	; (4798 <system_clock_source_dfll_set_config+0xc8>)
    4766:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4768:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    476a:	687a      	ldr	r2, [r7, #4]
    476c:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    476e:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4770:	4b08      	ldr	r3, [pc, #32]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    4772:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4774:	4b07      	ldr	r3, [pc, #28]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    4776:	681b      	ldr	r3, [r3, #0]
    4778:	687a      	ldr	r2, [r7, #4]
    477a:	7812      	ldrb	r2, [r2, #0]
    477c:	2104      	movs	r1, #4
    477e:	430a      	orrs	r2, r1
    4780:	b2d2      	uxtb	r2, r2
    4782:	4313      	orrs	r3, r2
    4784:	2280      	movs	r2, #128	; 0x80
    4786:	00d2      	lsls	r2, r2, #3
    4788:	431a      	orrs	r2, r3
    478a:	4b02      	ldr	r3, [pc, #8]	; (4794 <system_clock_source_dfll_set_config+0xc4>)
    478c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    478e:	46bd      	mov	sp, r7
    4790:	b002      	add	sp, #8
    4792:	bd80      	pop	{r7, pc}
    4794:	20000190 	.word	0x20000190
    4798:	03ff0000 	.word	0x03ff0000

0000479c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    479c:	b580      	push	{r7, lr}
    479e:	b082      	sub	sp, #8
    47a0:	af00      	add	r7, sp, #0
    47a2:	1c02      	adds	r2, r0, #0
    47a4:	1dfb      	adds	r3, r7, #7
    47a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    47a8:	1dfb      	adds	r3, r7, #7
    47aa:	781b      	ldrb	r3, [r3, #0]
    47ac:	2b08      	cmp	r3, #8
    47ae:	d83b      	bhi.n	4828 <system_clock_source_enable+0x8c>
    47b0:	009a      	lsls	r2, r3, #2
    47b2:	4b21      	ldr	r3, [pc, #132]	; (4838 <system_clock_source_enable+0x9c>)
    47b4:	18d3      	adds	r3, r2, r3
    47b6:	681b      	ldr	r3, [r3, #0]
    47b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    47ba:	4b20      	ldr	r3, [pc, #128]	; (483c <system_clock_source_enable+0xa0>)
    47bc:	4a1f      	ldr	r2, [pc, #124]	; (483c <system_clock_source_enable+0xa0>)
    47be:	6a12      	ldr	r2, [r2, #32]
    47c0:	2102      	movs	r1, #2
    47c2:	430a      	orrs	r2, r1
    47c4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    47c6:	2300      	movs	r3, #0
    47c8:	e031      	b.n	482e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    47ca:	4b1c      	ldr	r3, [pc, #112]	; (483c <system_clock_source_enable+0xa0>)
    47cc:	4a1b      	ldr	r2, [pc, #108]	; (483c <system_clock_source_enable+0xa0>)
    47ce:	6992      	ldr	r2, [r2, #24]
    47d0:	2102      	movs	r1, #2
    47d2:	430a      	orrs	r2, r1
    47d4:	619a      	str	r2, [r3, #24]
		break;
    47d6:	e029      	b.n	482c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    47d8:	4a18      	ldr	r2, [pc, #96]	; (483c <system_clock_source_enable+0xa0>)
    47da:	4b18      	ldr	r3, [pc, #96]	; (483c <system_clock_source_enable+0xa0>)
    47dc:	8a1b      	ldrh	r3, [r3, #16]
    47de:	b29b      	uxth	r3, r3
    47e0:	2102      	movs	r1, #2
    47e2:	430b      	orrs	r3, r1
    47e4:	b29b      	uxth	r3, r3
    47e6:	8213      	strh	r3, [r2, #16]
		break;
    47e8:	e020      	b.n	482c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    47ea:	4a14      	ldr	r2, [pc, #80]	; (483c <system_clock_source_enable+0xa0>)
    47ec:	4b13      	ldr	r3, [pc, #76]	; (483c <system_clock_source_enable+0xa0>)
    47ee:	8a9b      	ldrh	r3, [r3, #20]
    47f0:	b29b      	uxth	r3, r3
    47f2:	2102      	movs	r1, #2
    47f4:	430b      	orrs	r3, r1
    47f6:	b29b      	uxth	r3, r3
    47f8:	8293      	strh	r3, [r2, #20]
		break;
    47fa:	e017      	b.n	482c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    47fc:	4b10      	ldr	r3, [pc, #64]	; (4840 <system_clock_source_enable+0xa4>)
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	2202      	movs	r2, #2
    4802:	431a      	orrs	r2, r3
    4804:	4b0e      	ldr	r3, [pc, #56]	; (4840 <system_clock_source_enable+0xa4>)
    4806:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4808:	4b0e      	ldr	r3, [pc, #56]	; (4844 <system_clock_source_enable+0xa8>)
    480a:	4798      	blx	r3
		break;
    480c:	e00e      	b.n	482c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    480e:	4a0b      	ldr	r2, [pc, #44]	; (483c <system_clock_source_enable+0xa0>)
    4810:	490a      	ldr	r1, [pc, #40]	; (483c <system_clock_source_enable+0xa0>)
    4812:	2344      	movs	r3, #68	; 0x44
    4814:	5ccb      	ldrb	r3, [r1, r3]
    4816:	b2db      	uxtb	r3, r3
    4818:	2102      	movs	r1, #2
    481a:	430b      	orrs	r3, r1
    481c:	b2d9      	uxtb	r1, r3
    481e:	2344      	movs	r3, #68	; 0x44
    4820:	54d1      	strb	r1, [r2, r3]
		break;
    4822:	e003      	b.n	482c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4824:	2300      	movs	r3, #0
    4826:	e002      	b.n	482e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4828:	2317      	movs	r3, #23
    482a:	e000      	b.n	482e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    482c:	2300      	movs	r3, #0
}
    482e:	1c18      	adds	r0, r3, #0
    4830:	46bd      	mov	sp, r7
    4832:	b002      	add	sp, #8
    4834:	bd80      	pop	{r7, pc}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	00008ed0 	.word	0x00008ed0
    483c:	40000800 	.word	0x40000800
    4840:	20000190 	.word	0x20000190
    4844:	00004545 	.word	0x00004545

00004848 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4848:	b580      	push	{r7, lr}
    484a:	b084      	sub	sp, #16
    484c:	af00      	add	r7, sp, #0
    484e:	1c02      	adds	r2, r0, #0
    4850:	1dfb      	adds	r3, r7, #7
    4852:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    4854:	2300      	movs	r3, #0
    4856:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    4858:	1dfb      	adds	r3, r7, #7
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	2b08      	cmp	r3, #8
    485e:	d821      	bhi.n	48a4 <system_clock_source_is_ready+0x5c>
    4860:	009a      	lsls	r2, r3, #2
    4862:	4b18      	ldr	r3, [pc, #96]	; (48c4 <system_clock_source_is_ready+0x7c>)
    4864:	18d3      	adds	r3, r2, r3
    4866:	681b      	ldr	r3, [r3, #0]
    4868:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    486a:	2308      	movs	r3, #8
    486c:	60fb      	str	r3, [r7, #12]
		break;
    486e:	e01b      	b.n	48a8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4870:	2304      	movs	r3, #4
    4872:	60fb      	str	r3, [r7, #12]
		break;
    4874:	e018      	b.n	48a8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4876:	2301      	movs	r3, #1
    4878:	60fb      	str	r3, [r7, #12]
		break;
    487a:	e015      	b.n	48a8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    487c:	2302      	movs	r3, #2
    487e:	60fb      	str	r3, [r7, #12]
		break;
    4880:	e012      	b.n	48a8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    4882:	2310      	movs	r3, #16
    4884:	60fb      	str	r3, [r7, #12]
		}
		break;
    4886:	e00f      	b.n	48a8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4888:	4a0f      	ldr	r2, [pc, #60]	; (48c8 <system_clock_source_is_ready+0x80>)
    488a:	2350      	movs	r3, #80	; 0x50
    488c:	5cd3      	ldrb	r3, [r2, r3]
    488e:	b2db      	uxtb	r3, r3
    4890:	1c1a      	adds	r2, r3, #0
    4892:	2303      	movs	r3, #3
    4894:	4013      	ands	r3, r2
    4896:	3b03      	subs	r3, #3
    4898:	425a      	negs	r2, r3
    489a:	4153      	adcs	r3, r2
    489c:	b2db      	uxtb	r3, r3
    489e:	e00c      	b.n	48ba <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    48a0:	2301      	movs	r3, #1
    48a2:	e00a      	b.n	48ba <system_clock_source_is_ready+0x72>

	default:
		return false;
    48a4:	2300      	movs	r3, #0
    48a6:	e008      	b.n	48ba <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    48a8:	4b07      	ldr	r3, [pc, #28]	; (48c8 <system_clock_source_is_ready+0x80>)
    48aa:	68db      	ldr	r3, [r3, #12]
    48ac:	68fa      	ldr	r2, [r7, #12]
    48ae:	401a      	ands	r2, r3
    48b0:	68fb      	ldr	r3, [r7, #12]
    48b2:	1ad3      	subs	r3, r2, r3
    48b4:	425a      	negs	r2, r3
    48b6:	4153      	adcs	r3, r2
    48b8:	b2db      	uxtb	r3, r3
}
    48ba:	1c18      	adds	r0, r3, #0
    48bc:	46bd      	mov	sp, r7
    48be:	b004      	add	sp, #16
    48c0:	bd80      	pop	{r7, pc}
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	00008ef4 	.word	0x00008ef4
    48c8:	40000800 	.word	0x40000800

000048cc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    48cc:	b580      	push	{r7, lr}
    48ce:	b082      	sub	sp, #8
    48d0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    48d2:	1c3b      	adds	r3, r7, #0
    48d4:	2202      	movs	r2, #2
    48d6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    48d8:	2300      	movs	r3, #0
    48da:	607b      	str	r3, [r7, #4]
    48dc:	e009      	b.n	48f2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	b2da      	uxtb	r2, r3
    48e2:	1c3b      	adds	r3, r7, #0
    48e4:	1c10      	adds	r0, r2, #0
    48e6:	1c19      	adds	r1, r3, #0
    48e8:	4b05      	ldr	r3, [pc, #20]	; (4900 <_switch_peripheral_gclk+0x34>)
    48ea:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	3301      	adds	r3, #1
    48f0:	607b      	str	r3, [r7, #4]
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	2b24      	cmp	r3, #36	; 0x24
    48f6:	d9f2      	bls.n	48de <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    48f8:	46bd      	mov	sp, r7
    48fa:	b002      	add	sp, #8
    48fc:	bd80      	pop	{r7, pc}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	00004e3d 	.word	0x00004e3d

00004904 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4904:	b580      	push	{r7, lr}
    4906:	b0a6      	sub	sp, #152	; 0x98
    4908:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    490a:	4b6e      	ldr	r3, [pc, #440]	; (4ac4 <system_clock_init+0x1c0>)
    490c:	22c2      	movs	r2, #194	; 0xc2
    490e:	00d2      	lsls	r2, r2, #3
    4910:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4912:	2002      	movs	r0, #2
    4914:	4b6c      	ldr	r3, [pc, #432]	; (4ac8 <system_clock_init+0x1c4>)
    4916:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4918:	4b6c      	ldr	r3, [pc, #432]	; (4acc <system_clock_init+0x1c8>)
    491a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    491c:	2380      	movs	r3, #128	; 0x80
    491e:	18fb      	adds	r3, r7, r3
    4920:	1c18      	adds	r0, r3, #0
    4922:	4b6b      	ldr	r3, [pc, #428]	; (4ad0 <system_clock_init+0x1cc>)
    4924:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4926:	2380      	movs	r3, #128	; 0x80
    4928:	18fb      	adds	r3, r7, r3
    492a:	2220      	movs	r2, #32
    492c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    492e:	2380      	movs	r3, #128	; 0x80
    4930:	18fb      	adds	r3, r7, r3
    4932:	2200      	movs	r2, #0
    4934:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4936:	4b67      	ldr	r3, [pc, #412]	; (4ad4 <system_clock_init+0x1d0>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	0e9b      	lsrs	r3, r3, #26
    493c:	2294      	movs	r2, #148	; 0x94
    493e:	18ba      	adds	r2, r7, r2
    4940:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4942:	2394      	movs	r3, #148	; 0x94
    4944:	18fb      	adds	r3, r7, r3
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	2b3f      	cmp	r3, #63	; 0x3f
    494a:	d103      	bne.n	4954 <system_clock_init+0x50>
		coarse = 0x1f;
    494c:	231f      	movs	r3, #31
    494e:	2294      	movs	r2, #148	; 0x94
    4950:	18ba      	adds	r2, r7, r2
    4952:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    4954:	2394      	movs	r3, #148	; 0x94
    4956:	18fb      	adds	r3, r7, r3
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	b2da      	uxtb	r2, r3
    495c:	2380      	movs	r3, #128	; 0x80
    495e:	18fb      	adds	r3, r7, r3
    4960:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4962:	2380      	movs	r3, #128	; 0x80
    4964:	18fb      	adds	r3, r7, r3
    4966:	2200      	movs	r2, #0
    4968:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    496a:	2380      	movs	r3, #128	; 0x80
    496c:	18fb      	adds	r3, r7, r3
    496e:	2200      	movs	r2, #0
    4970:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4972:	2380      	movs	r3, #128	; 0x80
    4974:	18fb      	adds	r3, r7, r3
    4976:	2200      	movs	r2, #0
    4978:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    497a:	2380      	movs	r3, #128	; 0x80
    497c:	18fb      	adds	r3, r7, r3
    497e:	2200      	movs	r2, #0
    4980:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4982:	2380      	movs	r3, #128	; 0x80
    4984:	18fb      	adds	r3, r7, r3
    4986:	2207      	movs	r2, #7
    4988:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    498a:	2380      	movs	r3, #128	; 0x80
    498c:	18fb      	adds	r3, r7, r3
    498e:	223f      	movs	r2, #63	; 0x3f
    4990:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    4992:	2380      	movs	r3, #128	; 0x80
    4994:	18fb      	adds	r3, r7, r3
    4996:	220a      	movs	r2, #10
    4998:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    499a:	2380      	movs	r3, #128	; 0x80
    499c:	18fb      	adds	r3, r7, r3
    499e:	4a4e      	ldr	r2, [pc, #312]	; (4ad8 <system_clock_init+0x1d4>)
    49a0:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    49a2:	2380      	movs	r3, #128	; 0x80
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	2200      	movs	r2, #0
    49a8:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    49aa:	2380      	movs	r3, #128	; 0x80
    49ac:	18fb      	adds	r3, r7, r3
    49ae:	2200      	movs	r2, #0
    49b0:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    49b2:	2380      	movs	r3, #128	; 0x80
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	2200      	movs	r2, #0
    49b8:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    49ba:	2380      	movs	r3, #128	; 0x80
    49bc:	18fb      	adds	r3, r7, r3
    49be:	2280      	movs	r2, #128	; 0x80
    49c0:	0052      	lsls	r2, r2, #1
    49c2:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    49c4:	2380      	movs	r3, #128	; 0x80
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	4a44      	ldr	r2, [pc, #272]	; (4adc <system_clock_init+0x1d8>)
    49ca:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    49cc:	2380      	movs	r3, #128	; 0x80
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	1c18      	adds	r0, r3, #0
    49d2:	4b43      	ldr	r3, [pc, #268]	; (4ae0 <system_clock_init+0x1dc>)
    49d4:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    49d6:	237c      	movs	r3, #124	; 0x7c
    49d8:	18fb      	adds	r3, r7, r3
    49da:	1c18      	adds	r0, r3, #0
    49dc:	4b41      	ldr	r3, [pc, #260]	; (4ae4 <system_clock_init+0x1e0>)
    49de:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    49e0:	237c      	movs	r3, #124	; 0x7c
    49e2:	18fb      	adds	r3, r7, r3
    49e4:	2200      	movs	r2, #0
    49e6:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    49e8:	237c      	movs	r3, #124	; 0x7c
    49ea:	18fb      	adds	r3, r7, r3
    49ec:	2201      	movs	r2, #1
    49ee:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    49f0:	237c      	movs	r3, #124	; 0x7c
    49f2:	18fb      	adds	r3, r7, r3
    49f4:	2200      	movs	r2, #0
    49f6:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    49f8:	237c      	movs	r3, #124	; 0x7c
    49fa:	18fb      	adds	r3, r7, r3
    49fc:	1c18      	adds	r0, r3, #0
    49fe:	4b3a      	ldr	r3, [pc, #232]	; (4ae8 <system_clock_init+0x1e4>)
    4a00:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4a02:	2006      	movs	r0, #6
    4a04:	4b39      	ldr	r3, [pc, #228]	; (4aec <system_clock_init+0x1e8>)
    4a06:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4a08:	4b39      	ldr	r3, [pc, #228]	; (4af0 <system_clock_init+0x1ec>)
    4a0a:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4a0c:	2364      	movs	r3, #100	; 0x64
    4a0e:	18fb      	adds	r3, r7, r3
    4a10:	1c18      	adds	r0, r3, #0
    4a12:	4b38      	ldr	r3, [pc, #224]	; (4af4 <system_clock_init+0x1f0>)
    4a14:	4798      	blx	r3
    4a16:	2364      	movs	r3, #100	; 0x64
    4a18:	18fb      	adds	r3, r7, r3
    4a1a:	2205      	movs	r2, #5
    4a1c:	701a      	strb	r2, [r3, #0]
    4a1e:	2364      	movs	r3, #100	; 0x64
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	2201      	movs	r2, #1
    4a24:	605a      	str	r2, [r3, #4]
    4a26:	2364      	movs	r3, #100	; 0x64
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	2200      	movs	r2, #0
    4a2c:	721a      	strb	r2, [r3, #8]
    4a2e:	2364      	movs	r3, #100	; 0x64
    4a30:	18fb      	adds	r3, r7, r3
    4a32:	2200      	movs	r2, #0
    4a34:	725a      	strb	r2, [r3, #9]
    4a36:	2364      	movs	r3, #100	; 0x64
    4a38:	18fb      	adds	r3, r7, r3
    4a3a:	2001      	movs	r0, #1
    4a3c:	1c19      	adds	r1, r3, #0
    4a3e:	4b2e      	ldr	r3, [pc, #184]	; (4af8 <system_clock_init+0x1f4>)
    4a40:	4798      	blx	r3
    4a42:	2001      	movs	r0, #1
    4a44:	4b2d      	ldr	r3, [pc, #180]	; (4afc <system_clock_init+0x1f8>)
    4a46:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4a48:	2007      	movs	r0, #7
    4a4a:	4b28      	ldr	r3, [pc, #160]	; (4aec <system_clock_init+0x1e8>)
    4a4c:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	2007      	movs	r0, #7
    4a52:	4b2b      	ldr	r3, [pc, #172]	; (4b00 <system_clock_init+0x1fc>)
    4a54:	4798      	blx	r3
    4a56:	1c03      	adds	r3, r0, #0
    4a58:	1c1a      	adds	r2, r3, #0
    4a5a:	2301      	movs	r3, #1
    4a5c:	4053      	eors	r3, r2
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	2b00      	cmp	r3, #0
    4a62:	d1f5      	bne.n	4a50 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4a64:	4b17      	ldr	r3, [pc, #92]	; (4ac4 <system_clock_init+0x1c0>)
    4a66:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4a68:	2180      	movs	r1, #128	; 0x80
    4a6a:	430a      	orrs	r2, r1
    4a6c:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4a6e:	2000      	movs	r0, #0
    4a70:	4b24      	ldr	r3, [pc, #144]	; (4b04 <system_clock_init+0x200>)
    4a72:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4a74:	2000      	movs	r0, #0
    4a76:	2100      	movs	r1, #0
    4a78:	4b23      	ldr	r3, [pc, #140]	; (4b08 <system_clock_init+0x204>)
    4a7a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4a7c:	2001      	movs	r0, #1
    4a7e:	2100      	movs	r1, #0
    4a80:	4b21      	ldr	r3, [pc, #132]	; (4b08 <system_clock_init+0x204>)
    4a82:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4a84:	2002      	movs	r0, #2
    4a86:	2100      	movs	r1, #0
    4a88:	4b1f      	ldr	r3, [pc, #124]	; (4b08 <system_clock_init+0x204>)
    4a8a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4a8c:	1c3b      	adds	r3, r7, #0
    4a8e:	1c18      	adds	r0, r3, #0
    4a90:	4b18      	ldr	r3, [pc, #96]	; (4af4 <system_clock_init+0x1f0>)
    4a92:	4798      	blx	r3
    4a94:	1c3b      	adds	r3, r7, #0
    4a96:	2207      	movs	r2, #7
    4a98:	701a      	strb	r2, [r3, #0]
    4a9a:	1c3b      	adds	r3, r7, #0
    4a9c:	2201      	movs	r2, #1
    4a9e:	605a      	str	r2, [r3, #4]
    4aa0:	1c3b      	adds	r3, r7, #0
    4aa2:	2201      	movs	r2, #1
    4aa4:	721a      	strb	r2, [r3, #8]
    4aa6:	1c3b      	adds	r3, r7, #0
    4aa8:	2200      	movs	r2, #0
    4aaa:	725a      	strb	r2, [r3, #9]
    4aac:	1c3b      	adds	r3, r7, #0
    4aae:	2000      	movs	r0, #0
    4ab0:	1c19      	adds	r1, r3, #0
    4ab2:	4b11      	ldr	r3, [pc, #68]	; (4af8 <system_clock_init+0x1f4>)
    4ab4:	4798      	blx	r3
    4ab6:	2000      	movs	r0, #0
    4ab8:	4b10      	ldr	r3, [pc, #64]	; (4afc <system_clock_init+0x1f8>)
    4aba:	4798      	blx	r3
#endif
}
    4abc:	46bd      	mov	sp, r7
    4abe:	b026      	add	sp, #152	; 0x98
    4ac0:	bd80      	pop	{r7, pc}
    4ac2:	46c0      	nop			; (mov r8, r8)
    4ac4:	40000800 	.word	0x40000800
    4ac8:	000044f9 	.word	0x000044f9
    4acc:	000048cd 	.word	0x000048cd
    4ad0:	00004435 	.word	0x00004435
    4ad4:	00806024 	.word	0x00806024
    4ad8:	000001ff 	.word	0x000001ff
    4adc:	ffffbb80 	.word	0xffffbb80
    4ae0:	000046d1 	.word	0x000046d1
    4ae4:	00004415 	.word	0x00004415
    4ae8:	00004659 	.word	0x00004659
    4aec:	0000479d 	.word	0x0000479d
    4af0:	00004bad 	.word	0x00004bad
    4af4:	000043e9 	.word	0x000043e9
    4af8:	00004bdd 	.word	0x00004bdd
    4afc:	00004cfd 	.word	0x00004cfd
    4b00:	00004849 	.word	0x00004849
    4b04:	00004485 	.word	0x00004485
    4b08:	000044a5 	.word	0x000044a5

00004b0c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4b0c:	b580      	push	{r7, lr}
    4b0e:	b082      	sub	sp, #8
    4b10:	af00      	add	r7, sp, #0
    4b12:	1c02      	adds	r2, r0, #0
    4b14:	6039      	str	r1, [r7, #0]
    4b16:	1dfb      	adds	r3, r7, #7
    4b18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b1a:	1dfb      	adds	r3, r7, #7
    4b1c:	781b      	ldrb	r3, [r3, #0]
    4b1e:	2b01      	cmp	r3, #1
    4b20:	d00a      	beq.n	4b38 <system_apb_clock_set_mask+0x2c>
    4b22:	2b02      	cmp	r3, #2
    4b24:	d00f      	beq.n	4b46 <system_apb_clock_set_mask+0x3a>
    4b26:	2b00      	cmp	r3, #0
    4b28:	d114      	bne.n	4b54 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4b2a:	4b0e      	ldr	r3, [pc, #56]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b2c:	4a0d      	ldr	r2, [pc, #52]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b2e:	6991      	ldr	r1, [r2, #24]
    4b30:	683a      	ldr	r2, [r7, #0]
    4b32:	430a      	orrs	r2, r1
    4b34:	619a      	str	r2, [r3, #24]
			break;
    4b36:	e00f      	b.n	4b58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4b38:	4b0a      	ldr	r3, [pc, #40]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b3a:	4a0a      	ldr	r2, [pc, #40]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b3c:	69d1      	ldr	r1, [r2, #28]
    4b3e:	683a      	ldr	r2, [r7, #0]
    4b40:	430a      	orrs	r2, r1
    4b42:	61da      	str	r2, [r3, #28]
			break;
    4b44:	e008      	b.n	4b58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4b46:	4b07      	ldr	r3, [pc, #28]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b48:	4a06      	ldr	r2, [pc, #24]	; (4b64 <system_apb_clock_set_mask+0x58>)
    4b4a:	6a11      	ldr	r1, [r2, #32]
    4b4c:	683a      	ldr	r2, [r7, #0]
    4b4e:	430a      	orrs	r2, r1
    4b50:	621a      	str	r2, [r3, #32]
			break;
    4b52:	e001      	b.n	4b58 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4b54:	2317      	movs	r3, #23
    4b56:	e000      	b.n	4b5a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4b58:	2300      	movs	r3, #0
}
    4b5a:	1c18      	adds	r0, r3, #0
    4b5c:	46bd      	mov	sp, r7
    4b5e:	b002      	add	sp, #8
    4b60:	bd80      	pop	{r7, pc}
    4b62:	46c0      	nop			; (mov r8, r8)
    4b64:	40000400 	.word	0x40000400

00004b68 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4b6c:	4b01      	ldr	r3, [pc, #4]	; (4b74 <system_interrupt_enter_critical_section+0xc>)
    4b6e:	4798      	blx	r3
}
    4b70:	46bd      	mov	sp, r7
    4b72:	bd80      	pop	{r7, pc}
    4b74:	00003ba1 	.word	0x00003ba1

00004b78 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4b7c:	4b01      	ldr	r3, [pc, #4]	; (4b84 <system_interrupt_leave_critical_section+0xc>)
    4b7e:	4798      	blx	r3
}
    4b80:	46bd      	mov	sp, r7
    4b82:	bd80      	pop	{r7, pc}
    4b84:	00003bf1 	.word	0x00003bf1

00004b88 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4b8c:	4b06      	ldr	r3, [pc, #24]	; (4ba8 <system_gclk_is_syncing+0x20>)
    4b8e:	785b      	ldrb	r3, [r3, #1]
    4b90:	b2db      	uxtb	r3, r3
    4b92:	b2db      	uxtb	r3, r3
    4b94:	b25b      	sxtb	r3, r3
    4b96:	2b00      	cmp	r3, #0
    4b98:	da01      	bge.n	4b9e <system_gclk_is_syncing+0x16>
		return true;
    4b9a:	2301      	movs	r3, #1
    4b9c:	e000      	b.n	4ba0 <system_gclk_is_syncing+0x18>
	}

	return false;
    4b9e:	2300      	movs	r3, #0
}
    4ba0:	1c18      	adds	r0, r3, #0
    4ba2:	46bd      	mov	sp, r7
    4ba4:	bd80      	pop	{r7, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	40000c00 	.word	0x40000c00

00004bac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4bb0:	2000      	movs	r0, #0
    4bb2:	2108      	movs	r1, #8
    4bb4:	4b07      	ldr	r3, [pc, #28]	; (4bd4 <system_gclk_init+0x28>)
    4bb6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4bb8:	4b07      	ldr	r3, [pc, #28]	; (4bd8 <system_gclk_init+0x2c>)
    4bba:	2201      	movs	r2, #1
    4bbc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	4b05      	ldr	r3, [pc, #20]	; (4bd8 <system_gclk_init+0x2c>)
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	1c1a      	adds	r2, r3, #0
    4bc8:	2301      	movs	r3, #1
    4bca:	4013      	ands	r3, r2
    4bcc:	d1f8      	bne.n	4bc0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4bce:	46bd      	mov	sp, r7
    4bd0:	bd80      	pop	{r7, pc}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	00004b0d 	.word	0x00004b0d
    4bd8:	40000c00 	.word	0x40000c00

00004bdc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4bdc:	b580      	push	{r7, lr}
    4bde:	b086      	sub	sp, #24
    4be0:	af00      	add	r7, sp, #0
    4be2:	1c02      	adds	r2, r0, #0
    4be4:	6039      	str	r1, [r7, #0]
    4be6:	1dfb      	adds	r3, r7, #7
    4be8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4bea:	1dfb      	adds	r3, r7, #7
    4bec:	781b      	ldrb	r3, [r3, #0]
    4bee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4bf0:	1dfb      	adds	r3, r7, #7
    4bf2:	781b      	ldrb	r3, [r3, #0]
    4bf4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4bf6:	683b      	ldr	r3, [r7, #0]
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	021b      	lsls	r3, r3, #8
    4bfc:	1c1a      	adds	r2, r3, #0
    4bfe:	697b      	ldr	r3, [r7, #20]
    4c00:	4313      	orrs	r3, r2
    4c02:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	785b      	ldrb	r3, [r3, #1]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d004      	beq.n	4c16 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4c0c:	697b      	ldr	r3, [r7, #20]
    4c0e:	2280      	movs	r2, #128	; 0x80
    4c10:	02d2      	lsls	r2, r2, #11
    4c12:	4313      	orrs	r3, r2
    4c14:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4c16:	683b      	ldr	r3, [r7, #0]
    4c18:	7a5b      	ldrb	r3, [r3, #9]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d004      	beq.n	4c28 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4c1e:	697b      	ldr	r3, [r7, #20]
    4c20:	2280      	movs	r2, #128	; 0x80
    4c22:	0312      	lsls	r2, r2, #12
    4c24:	4313      	orrs	r3, r2
    4c26:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4c28:	683b      	ldr	r3, [r7, #0]
    4c2a:	685b      	ldr	r3, [r3, #4]
    4c2c:	2b01      	cmp	r3, #1
    4c2e:	d92c      	bls.n	4c8a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4c30:	683b      	ldr	r3, [r7, #0]
    4c32:	685a      	ldr	r2, [r3, #4]
    4c34:	683b      	ldr	r3, [r7, #0]
    4c36:	685b      	ldr	r3, [r3, #4]
    4c38:	3b01      	subs	r3, #1
    4c3a:	4013      	ands	r3, r2
    4c3c:	d11a      	bne.n	4c74 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4c3e:	2300      	movs	r3, #0
    4c40:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4c42:	2302      	movs	r3, #2
    4c44:	60bb      	str	r3, [r7, #8]
    4c46:	e005      	b.n	4c54 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4c48:	68fb      	ldr	r3, [r7, #12]
    4c4a:	3301      	adds	r3, #1
    4c4c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4c4e:	68bb      	ldr	r3, [r7, #8]
    4c50:	005b      	lsls	r3, r3, #1
    4c52:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4c54:	683b      	ldr	r3, [r7, #0]
    4c56:	685a      	ldr	r2, [r3, #4]
    4c58:	68bb      	ldr	r3, [r7, #8]
    4c5a:	429a      	cmp	r2, r3
    4c5c:	d8f4      	bhi.n	4c48 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4c5e:	68fb      	ldr	r3, [r7, #12]
    4c60:	021b      	lsls	r3, r3, #8
    4c62:	693a      	ldr	r2, [r7, #16]
    4c64:	4313      	orrs	r3, r2
    4c66:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4c68:	697b      	ldr	r3, [r7, #20]
    4c6a:	2280      	movs	r2, #128	; 0x80
    4c6c:	0352      	lsls	r2, r2, #13
    4c6e:	4313      	orrs	r3, r2
    4c70:	617b      	str	r3, [r7, #20]
    4c72:	e00a      	b.n	4c8a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4c74:	683b      	ldr	r3, [r7, #0]
    4c76:	685b      	ldr	r3, [r3, #4]
    4c78:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4c7a:	693a      	ldr	r2, [r7, #16]
    4c7c:	4313      	orrs	r3, r2
    4c7e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4c80:	697b      	ldr	r3, [r7, #20]
    4c82:	2280      	movs	r2, #128	; 0x80
    4c84:	0292      	lsls	r2, r2, #10
    4c86:	4313      	orrs	r3, r2
    4c88:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4c8a:	683b      	ldr	r3, [r7, #0]
    4c8c:	7a1b      	ldrb	r3, [r3, #8]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d004      	beq.n	4c9c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4c92:	697b      	ldr	r3, [r7, #20]
    4c94:	2280      	movs	r2, #128	; 0x80
    4c96:	0392      	lsls	r2, r2, #14
    4c98:	4313      	orrs	r3, r2
    4c9a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4c9c:	46c0      	nop			; (mov r8, r8)
    4c9e:	4b12      	ldr	r3, [pc, #72]	; (4ce8 <system_gclk_gen_set_config+0x10c>)
    4ca0:	4798      	blx	r3
    4ca2:	1e03      	subs	r3, r0, #0
    4ca4:	d1fb      	bne.n	4c9e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4ca6:	4b11      	ldr	r3, [pc, #68]	; (4cec <system_gclk_gen_set_config+0x110>)
    4ca8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4caa:	4a11      	ldr	r2, [pc, #68]	; (4cf0 <system_gclk_gen_set_config+0x114>)
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <system_gclk_gen_set_config+0x10c>)
    4cb6:	4798      	blx	r3
    4cb8:	1e03      	subs	r3, r0, #0
    4cba:	d1fb      	bne.n	4cb4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4cbc:	4b0d      	ldr	r3, [pc, #52]	; (4cf4 <system_gclk_gen_set_config+0x118>)
    4cbe:	693a      	ldr	r2, [r7, #16]
    4cc0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	4b08      	ldr	r3, [pc, #32]	; (4ce8 <system_gclk_gen_set_config+0x10c>)
    4cc6:	4798      	blx	r3
    4cc8:	1e03      	subs	r3, r0, #0
    4cca:	d1fb      	bne.n	4cc4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4ccc:	4b09      	ldr	r3, [pc, #36]	; (4cf4 <system_gclk_gen_set_config+0x118>)
    4cce:	4a09      	ldr	r2, [pc, #36]	; (4cf4 <system_gclk_gen_set_config+0x118>)
    4cd0:	6851      	ldr	r1, [r2, #4]
    4cd2:	2280      	movs	r2, #128	; 0x80
    4cd4:	0252      	lsls	r2, r2, #9
    4cd6:	4011      	ands	r1, r2
    4cd8:	697a      	ldr	r2, [r7, #20]
    4cda:	430a      	orrs	r2, r1
    4cdc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4cde:	4b06      	ldr	r3, [pc, #24]	; (4cf8 <system_gclk_gen_set_config+0x11c>)
    4ce0:	4798      	blx	r3
}
    4ce2:	46bd      	mov	sp, r7
    4ce4:	b006      	add	sp, #24
    4ce6:	bd80      	pop	{r7, pc}
    4ce8:	00004b89 	.word	0x00004b89
    4cec:	00004b69 	.word	0x00004b69
    4cf0:	40000c08 	.word	0x40000c08
    4cf4:	40000c00 	.word	0x40000c00
    4cf8:	00004b79 	.word	0x00004b79

00004cfc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4cfc:	b580      	push	{r7, lr}
    4cfe:	b082      	sub	sp, #8
    4d00:	af00      	add	r7, sp, #0
    4d02:	1c02      	adds	r2, r0, #0
    4d04:	1dfb      	adds	r3, r7, #7
    4d06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4d08:	46c0      	nop			; (mov r8, r8)
    4d0a:	4b0d      	ldr	r3, [pc, #52]	; (4d40 <system_gclk_gen_enable+0x44>)
    4d0c:	4798      	blx	r3
    4d0e:	1e03      	subs	r3, r0, #0
    4d10:	d1fb      	bne.n	4d0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4d12:	4b0c      	ldr	r3, [pc, #48]	; (4d44 <system_gclk_gen_enable+0x48>)
    4d14:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4d16:	4a0c      	ldr	r2, [pc, #48]	; (4d48 <system_gclk_gen_enable+0x4c>)
    4d18:	1dfb      	adds	r3, r7, #7
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4d1e:	46c0      	nop			; (mov r8, r8)
    4d20:	4b07      	ldr	r3, [pc, #28]	; (4d40 <system_gclk_gen_enable+0x44>)
    4d22:	4798      	blx	r3
    4d24:	1e03      	subs	r3, r0, #0
    4d26:	d1fb      	bne.n	4d20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4d28:	4b08      	ldr	r3, [pc, #32]	; (4d4c <system_gclk_gen_enable+0x50>)
    4d2a:	4a08      	ldr	r2, [pc, #32]	; (4d4c <system_gclk_gen_enable+0x50>)
    4d2c:	6852      	ldr	r2, [r2, #4]
    4d2e:	2180      	movs	r1, #128	; 0x80
    4d30:	0249      	lsls	r1, r1, #9
    4d32:	430a      	orrs	r2, r1
    4d34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4d36:	4b06      	ldr	r3, [pc, #24]	; (4d50 <system_gclk_gen_enable+0x54>)
    4d38:	4798      	blx	r3
}
    4d3a:	46bd      	mov	sp, r7
    4d3c:	b002      	add	sp, #8
    4d3e:	bd80      	pop	{r7, pc}
    4d40:	00004b89 	.word	0x00004b89
    4d44:	00004b69 	.word	0x00004b69
    4d48:	40000c04 	.word	0x40000c04
    4d4c:	40000c00 	.word	0x40000c00
    4d50:	00004b79 	.word	0x00004b79

00004d54 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b086      	sub	sp, #24
    4d58:	af00      	add	r7, sp, #0
    4d5a:	1c02      	adds	r2, r0, #0
    4d5c:	1dfb      	adds	r3, r7, #7
    4d5e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4d60:	46c0      	nop			; (mov r8, r8)
    4d62:	4b2e      	ldr	r3, [pc, #184]	; (4e1c <system_gclk_gen_get_hz+0xc8>)
    4d64:	4798      	blx	r3
    4d66:	1e03      	subs	r3, r0, #0
    4d68:	d1fb      	bne.n	4d62 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4d6a:	4b2d      	ldr	r3, [pc, #180]	; (4e20 <system_gclk_gen_get_hz+0xcc>)
    4d6c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4d6e:	4a2d      	ldr	r2, [pc, #180]	; (4e24 <system_gclk_gen_get_hz+0xd0>)
    4d70:	1dfb      	adds	r3, r7, #7
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4d76:	46c0      	nop			; (mov r8, r8)
    4d78:	4b28      	ldr	r3, [pc, #160]	; (4e1c <system_gclk_gen_get_hz+0xc8>)
    4d7a:	4798      	blx	r3
    4d7c:	1e03      	subs	r3, r0, #0
    4d7e:	d1fb      	bne.n	4d78 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4d80:	4b29      	ldr	r3, [pc, #164]	; (4e28 <system_gclk_gen_get_hz+0xd4>)
    4d82:	685b      	ldr	r3, [r3, #4]
    4d84:	0a1b      	lsrs	r3, r3, #8
    4d86:	1c1a      	adds	r2, r3, #0
    4d88:	231f      	movs	r3, #31
    4d8a:	4013      	ands	r3, r2
    4d8c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4d8e:	1c18      	adds	r0, r3, #0
    4d90:	4b26      	ldr	r3, [pc, #152]	; (4e2c <system_gclk_gen_get_hz+0xd8>)
    4d92:	4798      	blx	r3
    4d94:	1c03      	adds	r3, r0, #0
    4d96:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4d98:	4a22      	ldr	r2, [pc, #136]	; (4e24 <system_gclk_gen_get_hz+0xd0>)
    4d9a:	1dfb      	adds	r3, r7, #7
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4da0:	4b21      	ldr	r3, [pc, #132]	; (4e28 <system_gclk_gen_get_hz+0xd4>)
    4da2:	685b      	ldr	r3, [r3, #4]
    4da4:	0d1b      	lsrs	r3, r3, #20
    4da6:	1c1a      	adds	r2, r3, #0
    4da8:	2301      	movs	r3, #1
    4daa:	4013      	ands	r3, r2
    4dac:	b2da      	uxtb	r2, r3
    4dae:	2313      	movs	r3, #19
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4db4:	4a1e      	ldr	r2, [pc, #120]	; (4e30 <system_gclk_gen_get_hz+0xdc>)
    4db6:	1dfb      	adds	r3, r7, #7
    4db8:	781b      	ldrb	r3, [r3, #0]
    4dba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4dbc:	46c0      	nop			; (mov r8, r8)
    4dbe:	4b17      	ldr	r3, [pc, #92]	; (4e1c <system_gclk_gen_get_hz+0xc8>)
    4dc0:	4798      	blx	r3
    4dc2:	1e03      	subs	r3, r0, #0
    4dc4:	d1fb      	bne.n	4dbe <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4dc6:	4b18      	ldr	r3, [pc, #96]	; (4e28 <system_gclk_gen_get_hz+0xd4>)
    4dc8:	689b      	ldr	r3, [r3, #8]
    4dca:	0a1b      	lsrs	r3, r3, #8
    4dcc:	1c1a      	adds	r2, r3, #0
    4dce:	2300      	movs	r3, #0
    4dd0:	439a      	bics	r2, r3
    4dd2:	1c13      	adds	r3, r2, #0
    4dd4:	b29b      	uxth	r3, r3
    4dd6:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4dd8:	4b16      	ldr	r3, [pc, #88]	; (4e34 <system_gclk_gen_get_hz+0xe0>)
    4dda:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ddc:	2313      	movs	r3, #19
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	781b      	ldrb	r3, [r3, #0]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d109      	bne.n	4dfa <system_gclk_gen_get_hz+0xa6>
    4de6:	68fb      	ldr	r3, [r7, #12]
    4de8:	2b01      	cmp	r3, #1
    4dea:	d906      	bls.n	4dfa <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    4dec:	4b12      	ldr	r3, [pc, #72]	; (4e38 <system_gclk_gen_get_hz+0xe4>)
    4dee:	6978      	ldr	r0, [r7, #20]
    4df0:	68f9      	ldr	r1, [r7, #12]
    4df2:	4798      	blx	r3
    4df4:	1c03      	adds	r3, r0, #0
    4df6:	617b      	str	r3, [r7, #20]
    4df8:	e00a      	b.n	4e10 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    4dfa:	2313      	movs	r3, #19
    4dfc:	18fb      	adds	r3, r7, r3
    4dfe:	781b      	ldrb	r3, [r3, #0]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d005      	beq.n	4e10 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    4e04:	68fb      	ldr	r3, [r7, #12]
    4e06:	3301      	adds	r3, #1
    4e08:	1c1a      	adds	r2, r3, #0
    4e0a:	697b      	ldr	r3, [r7, #20]
    4e0c:	40d3      	lsrs	r3, r2
    4e0e:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4e10:	697b      	ldr	r3, [r7, #20]
}
    4e12:	1c18      	adds	r0, r3, #0
    4e14:	46bd      	mov	sp, r7
    4e16:	b006      	add	sp, #24
    4e18:	bd80      	pop	{r7, pc}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	00004b89 	.word	0x00004b89
    4e20:	00004b69 	.word	0x00004b69
    4e24:	40000c04 	.word	0x40000c04
    4e28:	40000c00 	.word	0x40000c00
    4e2c:	00004589 	.word	0x00004589
    4e30:	40000c08 	.word	0x40000c08
    4e34:	00004b79 	.word	0x00004b79
    4e38:	00008a91 	.word	0x00008a91

00004e3c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b084      	sub	sp, #16
    4e40:	af00      	add	r7, sp, #0
    4e42:	1c02      	adds	r2, r0, #0
    4e44:	6039      	str	r1, [r7, #0]
    4e46:	1dfb      	adds	r3, r7, #7
    4e48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4e4a:	1dfb      	adds	r3, r7, #7
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4e50:	683b      	ldr	r3, [r7, #0]
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	021b      	lsls	r3, r3, #8
    4e56:	1c1a      	adds	r2, r3, #0
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	4313      	orrs	r3, r2
    4e5c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4e5e:	1dfb      	adds	r3, r7, #7
    4e60:	781b      	ldrb	r3, [r3, #0]
    4e62:	1c18      	adds	r0, r3, #0
    4e64:	4b04      	ldr	r3, [pc, #16]	; (4e78 <system_gclk_chan_set_config+0x3c>)
    4e66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4e68:	4b04      	ldr	r3, [pc, #16]	; (4e7c <system_gclk_chan_set_config+0x40>)
    4e6a:	68fa      	ldr	r2, [r7, #12]
    4e6c:	b292      	uxth	r2, r2
    4e6e:	805a      	strh	r2, [r3, #2]
}
    4e70:	46bd      	mov	sp, r7
    4e72:	b004      	add	sp, #16
    4e74:	bd80      	pop	{r7, pc}
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	00004ec5 	.word	0x00004ec5
    4e7c:	40000c00 	.word	0x40000c00

00004e80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b082      	sub	sp, #8
    4e84:	af00      	add	r7, sp, #0
    4e86:	1c02      	adds	r2, r0, #0
    4e88:	1dfb      	adds	r3, r7, #7
    4e8a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4e8c:	4b09      	ldr	r3, [pc, #36]	; (4eb4 <system_gclk_chan_enable+0x34>)
    4e8e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4e90:	4a09      	ldr	r2, [pc, #36]	; (4eb8 <system_gclk_chan_enable+0x38>)
    4e92:	1dfb      	adds	r3, r7, #7
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4e98:	4908      	ldr	r1, [pc, #32]	; (4ebc <system_gclk_chan_enable+0x3c>)
    4e9a:	4b08      	ldr	r3, [pc, #32]	; (4ebc <system_gclk_chan_enable+0x3c>)
    4e9c:	885b      	ldrh	r3, [r3, #2]
    4e9e:	b29b      	uxth	r3, r3
    4ea0:	2280      	movs	r2, #128	; 0x80
    4ea2:	01d2      	lsls	r2, r2, #7
    4ea4:	4313      	orrs	r3, r2
    4ea6:	b29b      	uxth	r3, r3
    4ea8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4eaa:	4b05      	ldr	r3, [pc, #20]	; (4ec0 <system_gclk_chan_enable+0x40>)
    4eac:	4798      	blx	r3
}
    4eae:	46bd      	mov	sp, r7
    4eb0:	b002      	add	sp, #8
    4eb2:	bd80      	pop	{r7, pc}
    4eb4:	00004b69 	.word	0x00004b69
    4eb8:	40000c02 	.word	0x40000c02
    4ebc:	40000c00 	.word	0x40000c00
    4ec0:	00004b79 	.word	0x00004b79

00004ec4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4ec4:	b580      	push	{r7, lr}
    4ec6:	b084      	sub	sp, #16
    4ec8:	af00      	add	r7, sp, #0
    4eca:	1c02      	adds	r2, r0, #0
    4ecc:	1dfb      	adds	r3, r7, #7
    4ece:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4ed0:	4b1d      	ldr	r3, [pc, #116]	; (4f48 <system_gclk_chan_disable+0x84>)
    4ed2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ed4:	4a1d      	ldr	r2, [pc, #116]	; (4f4c <system_gclk_chan_disable+0x88>)
    4ed6:	1dfb      	adds	r3, r7, #7
    4ed8:	781b      	ldrb	r3, [r3, #0]
    4eda:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4edc:	4b1c      	ldr	r3, [pc, #112]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4ede:	885b      	ldrh	r3, [r3, #2]
    4ee0:	b29b      	uxth	r3, r3
    4ee2:	0a1b      	lsrs	r3, r3, #8
    4ee4:	1c1a      	adds	r2, r3, #0
    4ee6:	230f      	movs	r3, #15
    4ee8:	4013      	ands	r3, r2
    4eea:	b2db      	uxtb	r3, r3
    4eec:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4eee:	4b18      	ldr	r3, [pc, #96]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4ef0:	885a      	ldrh	r2, [r3, #2]
    4ef2:	4918      	ldr	r1, [pc, #96]	; (4f54 <system_gclk_chan_disable+0x90>)
    4ef4:	400a      	ands	r2, r1
    4ef6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4ef8:	4a15      	ldr	r2, [pc, #84]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4efa:	4b15      	ldr	r3, [pc, #84]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4efc:	885b      	ldrh	r3, [r3, #2]
    4efe:	b29b      	uxth	r3, r3
    4f00:	4915      	ldr	r1, [pc, #84]	; (4f58 <system_gclk_chan_disable+0x94>)
    4f02:	400b      	ands	r3, r1
    4f04:	b29b      	uxth	r3, r3
    4f06:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4f08:	46c0      	nop			; (mov r8, r8)
    4f0a:	4b11      	ldr	r3, [pc, #68]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4f0c:	885b      	ldrh	r3, [r3, #2]
    4f0e:	b29b      	uxth	r3, r3
    4f10:	1c1a      	adds	r2, r3, #0
    4f12:	2380      	movs	r3, #128	; 0x80
    4f14:	01db      	lsls	r3, r3, #7
    4f16:	4013      	ands	r3, r2
    4f18:	d1f7      	bne.n	4f0a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4f1a:	4b0d      	ldr	r3, [pc, #52]	; (4f50 <system_gclk_chan_disable+0x8c>)
    4f1c:	68fa      	ldr	r2, [r7, #12]
    4f1e:	b2d2      	uxtb	r2, r2
    4f20:	1c11      	adds	r1, r2, #0
    4f22:	220f      	movs	r2, #15
    4f24:	400a      	ands	r2, r1
    4f26:	b2d2      	uxtb	r2, r2
    4f28:	1c11      	adds	r1, r2, #0
    4f2a:	220f      	movs	r2, #15
    4f2c:	400a      	ands	r2, r1
    4f2e:	0210      	lsls	r0, r2, #8
    4f30:	885a      	ldrh	r2, [r3, #2]
    4f32:	4908      	ldr	r1, [pc, #32]	; (4f54 <system_gclk_chan_disable+0x90>)
    4f34:	400a      	ands	r2, r1
    4f36:	1c11      	adds	r1, r2, #0
    4f38:	1c02      	adds	r2, r0, #0
    4f3a:	430a      	orrs	r2, r1
    4f3c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    4f3e:	4b07      	ldr	r3, [pc, #28]	; (4f5c <system_gclk_chan_disable+0x98>)
    4f40:	4798      	blx	r3
}
    4f42:	46bd      	mov	sp, r7
    4f44:	b004      	add	sp, #16
    4f46:	bd80      	pop	{r7, pc}
    4f48:	00004b69 	.word	0x00004b69
    4f4c:	40000c02 	.word	0x40000c02
    4f50:	40000c00 	.word	0x40000c00
    4f54:	fffff0ff 	.word	0xfffff0ff
    4f58:	ffffbfff 	.word	0xffffbfff
    4f5c:	00004b79 	.word	0x00004b79

00004f60 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4f60:	b580      	push	{r7, lr}
    4f62:	b084      	sub	sp, #16
    4f64:	af00      	add	r7, sp, #0
    4f66:	1c02      	adds	r2, r0, #0
    4f68:	1dfb      	adds	r3, r7, #7
    4f6a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4f6c:	4b0e      	ldr	r3, [pc, #56]	; (4fa8 <system_gclk_chan_get_hz+0x48>)
    4f6e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f70:	4a0e      	ldr	r2, [pc, #56]	; (4fac <system_gclk_chan_get_hz+0x4c>)
    4f72:	1dfb      	adds	r3, r7, #7
    4f74:	781b      	ldrb	r3, [r3, #0]
    4f76:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4f78:	4b0d      	ldr	r3, [pc, #52]	; (4fb0 <system_gclk_chan_get_hz+0x50>)
    4f7a:	885b      	ldrh	r3, [r3, #2]
    4f7c:	b29b      	uxth	r3, r3
    4f7e:	0a1b      	lsrs	r3, r3, #8
    4f80:	1c1a      	adds	r2, r3, #0
    4f82:	230f      	movs	r3, #15
    4f84:	4013      	ands	r3, r2
    4f86:	b2da      	uxtb	r2, r3
    4f88:	230f      	movs	r3, #15
    4f8a:	18fb      	adds	r3, r7, r3
    4f8c:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4f8e:	4b09      	ldr	r3, [pc, #36]	; (4fb4 <system_gclk_chan_get_hz+0x54>)
    4f90:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4f92:	230f      	movs	r3, #15
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	1c18      	adds	r0, r3, #0
    4f9a:	4b07      	ldr	r3, [pc, #28]	; (4fb8 <system_gclk_chan_get_hz+0x58>)
    4f9c:	4798      	blx	r3
    4f9e:	1c03      	adds	r3, r0, #0
}
    4fa0:	1c18      	adds	r0, r3, #0
    4fa2:	46bd      	mov	sp, r7
    4fa4:	b004      	add	sp, #16
    4fa6:	bd80      	pop	{r7, pc}
    4fa8:	00004b69 	.word	0x00004b69
    4fac:	40000c02 	.word	0x40000c02
    4fb0:	40000c00 	.word	0x40000c00
    4fb4:	00004b79 	.word	0x00004b79
    4fb8:	00004d55 	.word	0x00004d55

00004fbc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4fbc:	b580      	push	{r7, lr}
    4fbe:	b084      	sub	sp, #16
    4fc0:	af00      	add	r7, sp, #0
    4fc2:	1c02      	adds	r2, r0, #0
    4fc4:	1dfb      	adds	r3, r7, #7
    4fc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4fc8:	230f      	movs	r3, #15
    4fca:	18fb      	adds	r3, r7, r3
    4fcc:	1dfa      	adds	r2, r7, #7
    4fce:	7812      	ldrb	r2, [r2, #0]
    4fd0:	09d2      	lsrs	r2, r2, #7
    4fd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4fd4:	230e      	movs	r3, #14
    4fd6:	18fb      	adds	r3, r7, r3
    4fd8:	1dfa      	adds	r2, r7, #7
    4fda:	7812      	ldrb	r2, [r2, #0]
    4fdc:	0952      	lsrs	r2, r2, #5
    4fde:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4fe0:	4b0d      	ldr	r3, [pc, #52]	; (5018 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4fe2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4fe4:	230f      	movs	r3, #15
    4fe6:	18fb      	adds	r3, r7, r3
    4fe8:	781b      	ldrb	r3, [r3, #0]
    4fea:	2b00      	cmp	r3, #0
    4fec:	d10f      	bne.n	500e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4fee:	230f      	movs	r3, #15
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	009b      	lsls	r3, r3, #2
    4ff6:	2210      	movs	r2, #16
    4ff8:	4694      	mov	ip, r2
    4ffa:	44bc      	add	ip, r7
    4ffc:	4463      	add	r3, ip
    4ffe:	3b08      	subs	r3, #8
    5000:	681a      	ldr	r2, [r3, #0]
    5002:	230e      	movs	r3, #14
    5004:	18fb      	adds	r3, r7, r3
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	01db      	lsls	r3, r3, #7
    500a:	18d3      	adds	r3, r2, r3
    500c:	e000      	b.n	5010 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    500e:	2300      	movs	r3, #0
	}
}
    5010:	1c18      	adds	r0, r3, #0
    5012:	46bd      	mov	sp, r7
    5014:	b004      	add	sp, #16
    5016:	bd80      	pop	{r7, pc}
    5018:	41004400 	.word	0x41004400

0000501c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    501c:	b580      	push	{r7, lr}
    501e:	b088      	sub	sp, #32
    5020:	af00      	add	r7, sp, #0
    5022:	60f8      	str	r0, [r7, #12]
    5024:	60b9      	str	r1, [r7, #8]
    5026:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5028:	2300      	movs	r3, #0
    502a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	78db      	ldrb	r3, [r3, #3]
    5030:	2201      	movs	r2, #1
    5032:	4053      	eors	r3, r2
    5034:	b2db      	uxtb	r3, r3
    5036:	2b00      	cmp	r3, #0
    5038:	d035      	beq.n	50a6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	2b80      	cmp	r3, #128	; 0x80
    5040:	d00b      	beq.n	505a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5042:	69fb      	ldr	r3, [r7, #28]
    5044:	2280      	movs	r2, #128	; 0x80
    5046:	0252      	lsls	r2, r2, #9
    5048:	4313      	orrs	r3, r2
    504a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	781b      	ldrb	r3, [r3, #0]
    5050:	061b      	lsls	r3, r3, #24
    5052:	1c1a      	adds	r2, r3, #0
    5054:	69fb      	ldr	r3, [r7, #28]
    5056:	4313      	orrs	r3, r2
    5058:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	785b      	ldrb	r3, [r3, #1]
    505e:	2b00      	cmp	r3, #0
    5060:	d003      	beq.n	506a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5066:	2b02      	cmp	r3, #2
    5068:	d110      	bne.n	508c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    506a:	69fb      	ldr	r3, [r7, #28]
    506c:	2280      	movs	r2, #128	; 0x80
    506e:	0292      	lsls	r2, r2, #10
    5070:	4313      	orrs	r3, r2
    5072:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	789b      	ldrb	r3, [r3, #2]
    5078:	2b00      	cmp	r3, #0
    507a:	d004      	beq.n	5086 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    507c:	69fb      	ldr	r3, [r7, #28]
    507e:	2280      	movs	r2, #128	; 0x80
    5080:	02d2      	lsls	r2, r2, #11
    5082:	4313      	orrs	r3, r2
    5084:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5086:	68fb      	ldr	r3, [r7, #12]
    5088:	68ba      	ldr	r2, [r7, #8]
    508a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	785b      	ldrb	r3, [r3, #1]
    5090:	2b01      	cmp	r3, #1
    5092:	d003      	beq.n	509c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5098:	2b02      	cmp	r3, #2
    509a:	d107      	bne.n	50ac <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    509c:	69fb      	ldr	r3, [r7, #28]
    509e:	4a21      	ldr	r2, [pc, #132]	; (5124 <_system_pinmux_config+0x108>)
    50a0:	4013      	ands	r3, r2
    50a2:	61fb      	str	r3, [r7, #28]
    50a4:	e002      	b.n	50ac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    50a6:	68fb      	ldr	r3, [r7, #12]
    50a8:	68ba      	ldr	r2, [r7, #8]
    50aa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    50ac:	68bb      	ldr	r3, [r7, #8]
    50ae:	041b      	lsls	r3, r3, #16
    50b0:	0c1b      	lsrs	r3, r3, #16
    50b2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    50b4:	68bb      	ldr	r3, [r7, #8]
    50b6:	0c1b      	lsrs	r3, r3, #16
    50b8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    50ba:	69ba      	ldr	r2, [r7, #24]
    50bc:	69fb      	ldr	r3, [r7, #28]
    50be:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    50c0:	22a0      	movs	r2, #160	; 0xa0
    50c2:	05d2      	lsls	r2, r2, #23
    50c4:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    50c6:	68fb      	ldr	r3, [r7, #12]
    50c8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    50ca:	697a      	ldr	r2, [r7, #20]
    50cc:	69fb      	ldr	r3, [r7, #28]
    50ce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    50d0:	22d0      	movs	r2, #208	; 0xd0
    50d2:	0612      	lsls	r2, r2, #24
    50d4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    50da:	687b      	ldr	r3, [r7, #4]
    50dc:	78db      	ldrb	r3, [r3, #3]
    50de:	2201      	movs	r2, #1
    50e0:	4053      	eors	r3, r2
    50e2:	b2db      	uxtb	r3, r3
    50e4:	2b00      	cmp	r3, #0
    50e6:	d01a      	beq.n	511e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    50e8:	69fa      	ldr	r2, [r7, #28]
    50ea:	2380      	movs	r3, #128	; 0x80
    50ec:	02db      	lsls	r3, r3, #11
    50ee:	4013      	ands	r3, r2
    50f0:	d00a      	beq.n	5108 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	789b      	ldrb	r3, [r3, #2]
    50f6:	2b01      	cmp	r3, #1
    50f8:	d103      	bne.n	5102 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    50fa:	68fb      	ldr	r3, [r7, #12]
    50fc:	68ba      	ldr	r2, [r7, #8]
    50fe:	619a      	str	r2, [r3, #24]
    5100:	e002      	b.n	5108 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5102:	68fb      	ldr	r3, [r7, #12]
    5104:	68ba      	ldr	r2, [r7, #8]
    5106:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	785b      	ldrb	r3, [r3, #1]
    510c:	2b01      	cmp	r3, #1
    510e:	d003      	beq.n	5118 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5114:	2b02      	cmp	r3, #2
    5116:	d102      	bne.n	511e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	68ba      	ldr	r2, [r7, #8]
    511c:	609a      	str	r2, [r3, #8]
		}
	}
}
    511e:	46bd      	mov	sp, r7
    5120:	b008      	add	sp, #32
    5122:	bd80      	pop	{r7, pc}
    5124:	fffbffff 	.word	0xfffbffff

00005128 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5128:	b580      	push	{r7, lr}
    512a:	b084      	sub	sp, #16
    512c:	af00      	add	r7, sp, #0
    512e:	1c02      	adds	r2, r0, #0
    5130:	6039      	str	r1, [r7, #0]
    5132:	1dfb      	adds	r3, r7, #7
    5134:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5136:	1dfb      	adds	r3, r7, #7
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	1c18      	adds	r0, r3, #0
    513c:	4b0b      	ldr	r3, [pc, #44]	; (516c <system_pinmux_pin_set_config+0x44>)
    513e:	4798      	blx	r3
    5140:	1c03      	adds	r3, r0, #0
    5142:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5144:	1dfb      	adds	r3, r7, #7
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	221f      	movs	r2, #31
    514a:	4013      	ands	r3, r2
    514c:	2201      	movs	r2, #1
    514e:	409a      	lsls	r2, r3
    5150:	1c13      	adds	r3, r2, #0
    5152:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5154:	68f9      	ldr	r1, [r7, #12]
    5156:	68ba      	ldr	r2, [r7, #8]
    5158:	683b      	ldr	r3, [r7, #0]
    515a:	1c08      	adds	r0, r1, #0
    515c:	1c11      	adds	r1, r2, #0
    515e:	1c1a      	adds	r2, r3, #0
    5160:	4b03      	ldr	r3, [pc, #12]	; (5170 <system_pinmux_pin_set_config+0x48>)
    5162:	4798      	blx	r3
}
    5164:	46bd      	mov	sp, r7
    5166:	b004      	add	sp, #16
    5168:	bd80      	pop	{r7, pc}
    516a:	46c0      	nop			; (mov r8, r8)
    516c:	00004fbd 	.word	0x00004fbd
    5170:	0000501d 	.word	0x0000501d

00005174 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5174:	b580      	push	{r7, lr}
    5176:	af00      	add	r7, sp, #0
	return;
    5178:	46c0      	nop			; (mov r8, r8)
}
    517a:	46bd      	mov	sp, r7
    517c:	bd80      	pop	{r7, pc}
    517e:	46c0      	nop			; (mov r8, r8)

00005180 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5180:	b580      	push	{r7, lr}
    5182:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5184:	4b05      	ldr	r3, [pc, #20]	; (519c <system_init+0x1c>)
    5186:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5188:	4b05      	ldr	r3, [pc, #20]	; (51a0 <system_init+0x20>)
    518a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    518c:	4b05      	ldr	r3, [pc, #20]	; (51a4 <system_init+0x24>)
    518e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5190:	4b05      	ldr	r3, [pc, #20]	; (51a8 <system_init+0x28>)
    5192:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5194:	4b05      	ldr	r3, [pc, #20]	; (51ac <system_init+0x2c>)
    5196:	4798      	blx	r3
}
    5198:	46bd      	mov	sp, r7
    519a:	bd80      	pop	{r7, pc}
    519c:	00004905 	.word	0x00004905
    51a0:	00003d21 	.word	0x00003d21
    51a4:	00005175 	.word	0x00005175
    51a8:	000040f9 	.word	0x000040f9
    51ac:	00005175 	.word	0x00005175

000051b0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    51b6:	f3ef 8310 	mrs	r3, PRIMASK
    51ba:	603b      	str	r3, [r7, #0]
  return(result);
    51bc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    51be:	425a      	negs	r2, r3
    51c0:	4153      	adcs	r3, r2
    51c2:	b2db      	uxtb	r3, r3
    51c4:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    51c6:	b672      	cpsid	i
    51c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    51cc:	4b03      	ldr	r3, [pc, #12]	; (51dc <cpu_irq_save+0x2c>)
    51ce:	2200      	movs	r2, #0
    51d0:	701a      	strb	r2, [r3, #0]
	return flags;
    51d2:	687b      	ldr	r3, [r7, #4]
}
    51d4:	1c18      	adds	r0, r3, #0
    51d6:	46bd      	mov	sp, r7
    51d8:	b002      	add	sp, #8
    51da:	bd80      	pop	{r7, pc}
    51dc:	200000dc 	.word	0x200000dc

000051e0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    51e0:	b580      	push	{r7, lr}
    51e2:	b082      	sub	sp, #8
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
	return (flags);
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	1e5a      	subs	r2, r3, #1
    51ec:	4193      	sbcs	r3, r2
    51ee:	b2db      	uxtb	r3, r3
}
    51f0:	1c18      	adds	r0, r3, #0
    51f2:	46bd      	mov	sp, r7
    51f4:	b002      	add	sp, #8
    51f6:	bd80      	pop	{r7, pc}

000051f8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    51f8:	b580      	push	{r7, lr}
    51fa:	b082      	sub	sp, #8
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	1c18      	adds	r0, r3, #0
    5204:	4b06      	ldr	r3, [pc, #24]	; (5220 <cpu_irq_restore+0x28>)
    5206:	4798      	blx	r3
    5208:	1e03      	subs	r3, r0, #0
    520a:	d005      	beq.n	5218 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    520c:	4b05      	ldr	r3, [pc, #20]	; (5224 <cpu_irq_restore+0x2c>)
    520e:	2201      	movs	r2, #1
    5210:	701a      	strb	r2, [r3, #0]
    5212:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5216:	b662      	cpsie	i
}
    5218:	46bd      	mov	sp, r7
    521a:	b002      	add	sp, #8
    521c:	bd80      	pop	{r7, pc}
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	000051e1 	.word	0x000051e1
    5224:	200000dc 	.word	0x200000dc

00005228 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5228:	b580      	push	{r7, lr}
    522a:	b084      	sub	sp, #16
    522c:	af00      	add	r7, sp, #0
    522e:	1c02      	adds	r2, r0, #0
    5230:	1dfb      	adds	r3, r7, #7
    5232:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5234:	230f      	movs	r3, #15
    5236:	18fb      	adds	r3, r7, r3
    5238:	1dfa      	adds	r2, r7, #7
    523a:	7812      	ldrb	r2, [r2, #0]
    523c:	09d2      	lsrs	r2, r2, #7
    523e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5240:	230e      	movs	r3, #14
    5242:	18fb      	adds	r3, r7, r3
    5244:	1dfa      	adds	r2, r7, #7
    5246:	7812      	ldrb	r2, [r2, #0]
    5248:	0952      	lsrs	r2, r2, #5
    524a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    524c:	4b0d      	ldr	r3, [pc, #52]	; (5284 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    524e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5250:	230f      	movs	r3, #15
    5252:	18fb      	adds	r3, r7, r3
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d10f      	bne.n	527a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    525a:	230f      	movs	r3, #15
    525c:	18fb      	adds	r3, r7, r3
    525e:	781b      	ldrb	r3, [r3, #0]
    5260:	009b      	lsls	r3, r3, #2
    5262:	2210      	movs	r2, #16
    5264:	4694      	mov	ip, r2
    5266:	44bc      	add	ip, r7
    5268:	4463      	add	r3, ip
    526a:	3b08      	subs	r3, #8
    526c:	681a      	ldr	r2, [r3, #0]
    526e:	230e      	movs	r3, #14
    5270:	18fb      	adds	r3, r7, r3
    5272:	781b      	ldrb	r3, [r3, #0]
    5274:	01db      	lsls	r3, r3, #7
    5276:	18d3      	adds	r3, r2, r3
    5278:	e000      	b.n	527c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    527a:	2300      	movs	r3, #0
	}
}
    527c:	1c18      	adds	r0, r3, #0
    527e:	46bd      	mov	sp, r7
    5280:	b004      	add	sp, #16
    5282:	bd80      	pop	{r7, pc}
    5284:	41004400 	.word	0x41004400

00005288 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    5288:	b580      	push	{r7, lr}
    528a:	b082      	sub	sp, #8
    528c:	af00      	add	r7, sp, #0
    528e:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	681a      	ldr	r2, [r3, #0]
    5294:	687b      	ldr	r3, [r7, #4]
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	891b      	ldrh	r3, [r3, #8]
    529a:	b29b      	uxth	r3, r3
    529c:	2101      	movs	r1, #1
    529e:	438b      	bics	r3, r1
    52a0:	b29b      	uxth	r3, r3
    52a2:	8113      	strh	r3, [r2, #8]
}
    52a4:	46bd      	mov	sp, r7
    52a6:	b002      	add	sp, #8
    52a8:	bd80      	pop	{r7, pc}
    52aa:	46c0      	nop			; (mov r8, r8)

000052ac <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b082      	sub	sp, #8
    52b0:	af00      	add	r7, sp, #0
    52b2:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	681a      	ldr	r2, [r3, #0]
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	891b      	ldrh	r3, [r3, #8]
    52be:	b29b      	uxth	r3, r3
    52c0:	2101      	movs	r1, #1
    52c2:	430b      	orrs	r3, r1
    52c4:	b29b      	uxth	r3, r3
    52c6:	8113      	strh	r3, [r2, #8]
}
    52c8:	46bd      	mov	sp, r7
    52ca:	b002      	add	sp, #8
    52cc:	bd80      	pop	{r7, pc}
    52ce:	46c0      	nop			; (mov r8, r8)

000052d0 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    52d0:	b580      	push	{r7, lr}
    52d2:	b082      	sub	sp, #8
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	7a9b      	ldrb	r3, [r3, #10]
    52de:	227f      	movs	r2, #127	; 0x7f
    52e0:	4013      	ands	r3, r2
    52e2:	b2db      	uxtb	r3, r3
}
    52e4:	1c18      	adds	r0, r3, #0
    52e6:	46bd      	mov	sp, r7
    52e8:	b002      	add	sp, #8
    52ea:	bd80      	pop	{r7, pc}

000052ec <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    52ec:	b580      	push	{r7, lr}
    52ee:	b082      	sub	sp, #8
    52f0:	af00      	add	r7, sp, #0
    52f2:	6078      	str	r0, [r7, #4]
    52f4:	1c0a      	adds	r2, r1, #0
    52f6:	1cfb      	adds	r3, r7, #3
    52f8:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	681b      	ldr	r3, [r3, #0]
    52fe:	1cfa      	adds	r2, r7, #3
    5300:	7812      	ldrb	r2, [r2, #0]
    5302:	2180      	movs	r1, #128	; 0x80
    5304:	4249      	negs	r1, r1
    5306:	430a      	orrs	r2, r1
    5308:	b2d2      	uxtb	r2, r2
    530a:	729a      	strb	r2, [r3, #10]
}
    530c:	46bd      	mov	sp, r7
    530e:	b002      	add	sp, #8
    5310:	bd80      	pop	{r7, pc}
    5312:	46c0      	nop			; (mov r8, r8)

00005314 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
    531a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	681b      	ldr	r3, [r3, #0]
    5320:	8a1b      	ldrh	r3, [r3, #16]
    5322:	b29b      	uxth	r3, r3
    5324:	08db      	lsrs	r3, r3, #3
    5326:	055b      	lsls	r3, r3, #21
    5328:	0d5b      	lsrs	r3, r3, #21
    532a:	b29b      	uxth	r3, r3
}
    532c:	1c18      	adds	r0, r3, #0
    532e:	46bd      	mov	sp, r7
    5330:	b002      	add	sp, #8
    5332:	bd80      	pop	{r7, pc}

00005334 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    5334:	b580      	push	{r7, lr}
    5336:	b082      	sub	sp, #8
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
    533c:	1c0a      	adds	r2, r1, #0
    533e:	1cfb      	adds	r3, r7, #3
    5340:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	1cfa      	adds	r2, r7, #3
    5348:	7812      	ldrb	r2, [r2, #0]
    534a:	2103      	movs	r1, #3
    534c:	400a      	ands	r2, r1
    534e:	b2d2      	uxtb	r2, r2
    5350:	1c11      	adds	r1, r2, #0
    5352:	2203      	movs	r2, #3
    5354:	400a      	ands	r2, r1
    5356:	0290      	lsls	r0, r2, #10
    5358:	891a      	ldrh	r2, [r3, #8]
    535a:	4904      	ldr	r1, [pc, #16]	; (536c <usb_device_set_lpm_mode+0x38>)
    535c:	400a      	ands	r2, r1
    535e:	1c11      	adds	r1, r2, #0
    5360:	1c02      	adds	r2, r0, #0
    5362:	430a      	orrs	r2, r1
    5364:	811a      	strh	r2, [r3, #8]
}
    5366:	46bd      	mov	sp, r7
    5368:	b002      	add	sp, #8
    536a:	bd80      	pop	{r7, pc}
    536c:	fffff3ff 	.word	0xfffff3ff

00005370 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5370:	b580      	push	{r7, lr}
    5372:	b082      	sub	sp, #8
    5374:	af00      	add	r7, sp, #0
    5376:	1c02      	adds	r2, r0, #0
    5378:	1dfb      	adds	r3, r7, #7
    537a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    537c:	1dfb      	adds	r3, r7, #7
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	1c18      	adds	r0, r3, #0
    5382:	4b03      	ldr	r3, [pc, #12]	; (5390 <port_get_group_from_gpio_pin+0x20>)
    5384:	4798      	blx	r3
    5386:	1c03      	adds	r3, r0, #0
}
    5388:	1c18      	adds	r0, r3, #0
    538a:	46bd      	mov	sp, r7
    538c:	b002      	add	sp, #8
    538e:	bd80      	pop	{r7, pc}
    5390:	00005229 	.word	0x00005229

00005394 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    5394:	b580      	push	{r7, lr}
    5396:	b084      	sub	sp, #16
    5398:	af00      	add	r7, sp, #0
    539a:	1c02      	adds	r2, r0, #0
    539c:	1dfb      	adds	r3, r7, #7
    539e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    53a0:	1dfb      	adds	r3, r7, #7
    53a2:	781b      	ldrb	r3, [r3, #0]
    53a4:	1c18      	adds	r0, r3, #0
    53a6:	4b0b      	ldr	r3, [pc, #44]	; (53d4 <port_pin_get_input_level+0x40>)
    53a8:	4798      	blx	r3
    53aa:	1c03      	adds	r3, r0, #0
    53ac:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    53ae:	1dfb      	adds	r3, r7, #7
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	221f      	movs	r2, #31
    53b4:	4013      	ands	r3, r2
    53b6:	2201      	movs	r2, #1
    53b8:	409a      	lsls	r2, r3
    53ba:	1c13      	adds	r3, r2, #0
    53bc:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    53be:	68fb      	ldr	r3, [r7, #12]
    53c0:	6a1b      	ldr	r3, [r3, #32]
    53c2:	68ba      	ldr	r2, [r7, #8]
    53c4:	4013      	ands	r3, r2
    53c6:	1e5a      	subs	r2, r3, #1
    53c8:	4193      	sbcs	r3, r2
    53ca:	b2db      	uxtb	r3, r3
}
    53cc:	1c18      	adds	r0, r3, #0
    53ce:	46bd      	mov	sp, r7
    53d0:	b004      	add	sp, #16
    53d2:	bd80      	pop	{r7, pc}
    53d4:	00005371 	.word	0x00005371

000053d8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    53d8:	b580      	push	{r7, lr}
    53da:	b084      	sub	sp, #16
    53dc:	af00      	add	r7, sp, #0
    53de:	1c02      	adds	r2, r0, #0
    53e0:	1dfb      	adds	r3, r7, #7
    53e2:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    53e4:	1dfb      	adds	r3, r7, #7
    53e6:	781b      	ldrb	r3, [r3, #0]
    53e8:	4a0b      	ldr	r2, [pc, #44]	; (5418 <sleepmgr_lock_mode+0x40>)
    53ea:	5cd3      	ldrb	r3, [r2, r3]
    53ec:	2bff      	cmp	r3, #255	; 0xff
    53ee:	d100      	bne.n	53f2 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    53f0:	e7fe      	b.n	53f0 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    53f2:	4b0a      	ldr	r3, [pc, #40]	; (541c <sleepmgr_lock_mode+0x44>)
    53f4:	4798      	blx	r3
    53f6:	1c03      	adds	r3, r0, #0
    53f8:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    53fa:	1dfb      	adds	r3, r7, #7
    53fc:	781b      	ldrb	r3, [r3, #0]
    53fe:	4a06      	ldr	r2, [pc, #24]	; (5418 <sleepmgr_lock_mode+0x40>)
    5400:	5cd2      	ldrb	r2, [r2, r3]
    5402:	3201      	adds	r2, #1
    5404:	b2d1      	uxtb	r1, r2
    5406:	4a04      	ldr	r2, [pc, #16]	; (5418 <sleepmgr_lock_mode+0x40>)
    5408:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    540a:	68fb      	ldr	r3, [r7, #12]
    540c:	1c18      	adds	r0, r3, #0
    540e:	4b04      	ldr	r3, [pc, #16]	; (5420 <sleepmgr_lock_mode+0x48>)
    5410:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    5412:	46bd      	mov	sp, r7
    5414:	b004      	add	sp, #16
    5416:	bd80      	pop	{r7, pc}
    5418:	200002b4 	.word	0x200002b4
    541c:	000051b1 	.word	0x000051b1
    5420:	000051f9 	.word	0x000051f9

00005424 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    5424:	b580      	push	{r7, lr}
    5426:	b084      	sub	sp, #16
    5428:	af00      	add	r7, sp, #0
    542a:	1c02      	adds	r2, r0, #0
    542c:	1dfb      	adds	r3, r7, #7
    542e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    5430:	1dfb      	adds	r3, r7, #7
    5432:	781b      	ldrb	r3, [r3, #0]
    5434:	4a0b      	ldr	r2, [pc, #44]	; (5464 <sleepmgr_unlock_mode+0x40>)
    5436:	5cd3      	ldrb	r3, [r2, r3]
    5438:	2b00      	cmp	r3, #0
    543a:	d100      	bne.n	543e <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    543c:	e7fe      	b.n	543c <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    543e:	4b0a      	ldr	r3, [pc, #40]	; (5468 <sleepmgr_unlock_mode+0x44>)
    5440:	4798      	blx	r3
    5442:	1c03      	adds	r3, r0, #0
    5444:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    5446:	1dfb      	adds	r3, r7, #7
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	4a06      	ldr	r2, [pc, #24]	; (5464 <sleepmgr_unlock_mode+0x40>)
    544c:	5cd2      	ldrb	r2, [r2, r3]
    544e:	3a01      	subs	r2, #1
    5450:	b2d1      	uxtb	r1, r2
    5452:	4a04      	ldr	r2, [pc, #16]	; (5464 <sleepmgr_unlock_mode+0x40>)
    5454:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    5456:	68fb      	ldr	r3, [r7, #12]
    5458:	1c18      	adds	r0, r3, #0
    545a:	4b04      	ldr	r3, [pc, #16]	; (546c <sleepmgr_unlock_mode+0x48>)
    545c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    545e:	46bd      	mov	sp, r7
    5460:	b004      	add	sp, #16
    5462:	bd80      	pop	{r7, pc}
    5464:	200002b4 	.word	0x200002b4
    5468:	000051b1 	.word	0x000051b1
    546c:	000051f9 	.word	0x000051f9

00005470 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    5470:	b580      	push	{r7, lr}
    5472:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5474:	4b0b      	ldr	r3, [pc, #44]	; (54a4 <udd_wait_clock_ready+0x34>)
    5476:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5478:	b29b      	uxth	r3, r3
    547a:	1c1a      	adds	r2, r3, #0
    547c:	2320      	movs	r3, #32
    547e:	4013      	ands	r3, r2
    5480:	d107      	bne.n	5492 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	4b07      	ldr	r3, [pc, #28]	; (54a4 <udd_wait_clock_ready+0x34>)
    5486:	68db      	ldr	r3, [r3, #12]
    5488:	22d0      	movs	r2, #208	; 0xd0
    548a:	4013      	ands	r3, r2
    548c:	2bd0      	cmp	r3, #208	; 0xd0
    548e:	d1f9      	bne.n	5484 <udd_wait_clock_ready+0x14>
    5490:	e005      	b.n	549e <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	4b03      	ldr	r3, [pc, #12]	; (54a4 <udd_wait_clock_ready+0x34>)
    5496:	68db      	ldr	r3, [r3, #12]
    5498:	2210      	movs	r2, #16
    549a:	4013      	ands	r3, r2
    549c:	d0fa      	beq.n	5494 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    549e:	46bd      	mov	sp, r7
    54a0:	bd80      	pop	{r7, pc}
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	40000800 	.word	0x40000800

000054a8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    54a8:	b580      	push	{r7, lr}
    54aa:	b084      	sub	sp, #16
    54ac:	af00      	add	r7, sp, #0
    54ae:	1c02      	adds	r2, r0, #0
    54b0:	1dfb      	adds	r3, r7, #7
    54b2:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    54b4:	230c      	movs	r3, #12
    54b6:	18fa      	adds	r2, r7, r3
    54b8:	4b17      	ldr	r3, [pc, #92]	; (5518 <udd_sleep_mode+0x70>)
    54ba:	1c11      	adds	r1, r2, #0
    54bc:	1c1a      	adds	r2, r3, #0
    54be:	2304      	movs	r3, #4
    54c0:	1c08      	adds	r0, r1, #0
    54c2:	1c11      	adds	r1, r2, #0
    54c4:	1c1a      	adds	r2, r3, #0
    54c6:	4b15      	ldr	r3, [pc, #84]	; (551c <udd_sleep_mode+0x74>)
    54c8:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    54ca:	4b15      	ldr	r3, [pc, #84]	; (5520 <udd_sleep_mode+0x78>)
    54cc:	781b      	ldrb	r3, [r3, #0]
    54ce:	1dfa      	adds	r2, r7, #7
    54d0:	7812      	ldrb	r2, [r2, #0]
    54d2:	429a      	cmp	r2, r3
    54d4:	d01c      	beq.n	5510 <udd_sleep_mode+0x68>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    54d6:	1dfb      	adds	r3, r7, #7
    54d8:	781b      	ldrb	r3, [r3, #0]
    54da:	2b00      	cmp	r3, #0
    54dc:	d007      	beq.n	54ee <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    54de:	1dfb      	adds	r3, r7, #7
    54e0:	781b      	ldrb	r3, [r3, #0]
    54e2:	220c      	movs	r2, #12
    54e4:	18ba      	adds	r2, r7, r2
    54e6:	5cd3      	ldrb	r3, [r2, r3]
    54e8:	1c18      	adds	r0, r3, #0
    54ea:	4b0e      	ldr	r3, [pc, #56]	; (5524 <udd_sleep_mode+0x7c>)
    54ec:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    54ee:	4b0c      	ldr	r3, [pc, #48]	; (5520 <udd_sleep_mode+0x78>)
    54f0:	781b      	ldrb	r3, [r3, #0]
    54f2:	2b00      	cmp	r3, #0
    54f4:	d008      	beq.n	5508 <udd_sleep_mode+0x60>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    54f6:	4b0a      	ldr	r3, [pc, #40]	; (5520 <udd_sleep_mode+0x78>)
    54f8:	781b      	ldrb	r3, [r3, #0]
    54fa:	1c1a      	adds	r2, r3, #0
    54fc:	230c      	movs	r3, #12
    54fe:	18fb      	adds	r3, r7, r3
    5500:	5c9b      	ldrb	r3, [r3, r2]
    5502:	1c18      	adds	r0, r3, #0
    5504:	4b08      	ldr	r3, [pc, #32]	; (5528 <udd_sleep_mode+0x80>)
    5506:	4798      	blx	r3
	}
	udd_state = new_state;
    5508:	4b05      	ldr	r3, [pc, #20]	; (5520 <udd_sleep_mode+0x78>)
    550a:	1dfa      	adds	r2, r7, #7
    550c:	7812      	ldrb	r2, [r2, #0]
    550e:	701a      	strb	r2, [r3, #0]
}
    5510:	46bd      	mov	sp, r7
    5512:	b004      	add	sp, #16
    5514:	bd80      	pop	{r7, pc}
    5516:	46c0      	nop			; (mov r8, r8)
    5518:	00008f18 	.word	0x00008f18
    551c:	00008e21 	.word	0x00008e21
    5520:	200001d8 	.word	0x200001d8
    5524:	000053d9 	.word	0x000053d9
    5528:	00005425 	.word	0x00005425

0000552c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    552c:	b580      	push	{r7, lr}
    552e:	b082      	sub	sp, #8
    5530:	af00      	add	r7, sp, #0
    5532:	1c02      	adds	r2, r0, #0
    5534:	1dfb      	adds	r3, r7, #7
    5536:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    5538:	1dfb      	adds	r3, r7, #7
    553a:	781b      	ldrb	r3, [r3, #0]
    553c:	220f      	movs	r2, #15
    553e:	4013      	ands	r3, r2
    5540:	005b      	lsls	r3, r3, #1
    5542:	1dfa      	adds	r2, r7, #7
    5544:	7812      	ldrb	r2, [r2, #0]
    5546:	09d2      	lsrs	r2, r2, #7
    5548:	b2d2      	uxtb	r2, r2
    554a:	189b      	adds	r3, r3, r2
    554c:	1e9a      	subs	r2, r3, #2
    554e:	1c13      	adds	r3, r2, #0
    5550:	009b      	lsls	r3, r3, #2
    5552:	189b      	adds	r3, r3, r2
    5554:	009b      	lsls	r3, r3, #2
    5556:	4a03      	ldr	r2, [pc, #12]	; (5564 <udd_ep_get_job+0x38>)
    5558:	189b      	adds	r3, r3, r2
}
    555a:	1c18      	adds	r0, r3, #0
    555c:	46bd      	mov	sp, r7
    555e:	b002      	add	sp, #8
    5560:	bd80      	pop	{r7, pc}
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	200001b0 	.word	0x200001b0

00005568 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    5568:	b590      	push	{r4, r7, lr}
    556a:	b089      	sub	sp, #36	; 0x24
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5574:	2317      	movs	r3, #23
    5576:	18fb      	adds	r3, r7, r3
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	7992      	ldrb	r2, [r2, #6]
    557c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    557e:	2317      	movs	r3, #23
    5580:	18fb      	adds	r3, r7, r3
    5582:	781b      	ldrb	r3, [r3, #0]
    5584:	1c18      	adds	r0, r3, #0
    5586:	4b57      	ldr	r3, [pc, #348]	; (56e4 <udd_ep_trans_in_next+0x17c>)
    5588:	4798      	blx	r3
    558a:	1c03      	adds	r3, r0, #0
    558c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    558e:	230f      	movs	r3, #15
    5590:	18fb      	adds	r3, r7, r3
    5592:	2217      	movs	r2, #23
    5594:	18ba      	adds	r2, r7, r2
    5596:	7812      	ldrb	r2, [r2, #0]
    5598:	210f      	movs	r1, #15
    559a:	400a      	ands	r2, r1
    559c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    559e:	230c      	movs	r3, #12
    55a0:	18fb      	adds	r3, r7, r3
    55a2:	693a      	ldr	r2, [r7, #16]
    55a4:	8a12      	ldrh	r2, [r2, #16]
    55a6:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    55a8:	230a      	movs	r3, #10
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	69ba      	ldr	r2, [r7, #24]
    55ae:	8852      	ldrh	r2, [r2, #2]
    55b0:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    55b2:	693b      	ldr	r3, [r7, #16]
    55b4:	68da      	ldr	r2, [r3, #12]
    55b6:	230a      	movs	r3, #10
    55b8:	18fb      	adds	r3, r7, r3
    55ba:	881b      	ldrh	r3, [r3, #0]
    55bc:	18d2      	adds	r2, r2, r3
    55be:	693b      	ldr	r3, [r7, #16]
    55c0:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    55c2:	693b      	ldr	r3, [r7, #16]
    55c4:	68da      	ldr	r2, [r3, #12]
    55c6:	693b      	ldr	r3, [r7, #16]
    55c8:	689b      	ldr	r3, [r3, #8]
    55ca:	429a      	cmp	r2, r3
    55cc:	d058      	beq.n	5680 <udd_ep_trans_in_next+0x118>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    55ce:	693b      	ldr	r3, [r7, #16]
    55d0:	689b      	ldr	r3, [r3, #8]
    55d2:	b299      	uxth	r1, r3
    55d4:	693b      	ldr	r3, [r7, #16]
    55d6:	68db      	ldr	r3, [r3, #12]
    55d8:	b29a      	uxth	r2, r3
    55da:	231e      	movs	r3, #30
    55dc:	18fb      	adds	r3, r7, r3
    55de:	1a8a      	subs	r2, r1, r2
    55e0:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    55e2:	231e      	movs	r3, #30
    55e4:	18fb      	adds	r3, r7, r3
    55e6:	881b      	ldrh	r3, [r3, #0]
    55e8:	4a3f      	ldr	r2, [pc, #252]	; (56e8 <udd_ep_trans_in_next+0x180>)
    55ea:	4293      	cmp	r3, r2
    55ec:	d90e      	bls.n	560c <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    55ee:	230c      	movs	r3, #12
    55f0:	18fb      	adds	r3, r7, r3
    55f2:	881a      	ldrh	r2, [r3, #0]
    55f4:	493c      	ldr	r1, [pc, #240]	; (56e8 <udd_ep_trans_in_next+0x180>)
    55f6:	4b3d      	ldr	r3, [pc, #244]	; (56ec <udd_ep_trans_in_next+0x184>)
    55f8:	1c08      	adds	r0, r1, #0
    55fa:	1c11      	adds	r1, r2, #0
    55fc:	4798      	blx	r3
    55fe:	1c0b      	adds	r3, r1, #0
    5600:	b29a      	uxth	r2, r3
    5602:	231e      	movs	r3, #30
    5604:	18fb      	adds	r3, r7, r3
    5606:	4938      	ldr	r1, [pc, #224]	; (56e8 <udd_ep_trans_in_next+0x180>)
    5608:	1a8a      	subs	r2, r1, r2
    560a:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    560c:	693b      	ldr	r3, [r7, #16]
    560e:	7c9b      	ldrb	r3, [r3, #18]
    5610:	2202      	movs	r2, #2
    5612:	4013      	ands	r3, r2
    5614:	b2db      	uxtb	r3, r3
    5616:	2b00      	cmp	r3, #0
    5618:	d00f      	beq.n	563a <udd_ep_trans_in_next+0xd2>
    561a:	231e      	movs	r3, #30
    561c:	18fa      	adds	r2, r7, r3
    561e:	230c      	movs	r3, #12
    5620:	18fb      	adds	r3, r7, r3
    5622:	8811      	ldrh	r1, [r2, #0]
    5624:	881a      	ldrh	r2, [r3, #0]
    5626:	4b32      	ldr	r3, [pc, #200]	; (56f0 <udd_ep_trans_in_next+0x188>)
    5628:	1c08      	adds	r0, r1, #0
    562a:	1c11      	adds	r1, r2, #0
    562c:	4798      	blx	r3
    562e:	1c0b      	adds	r3, r1, #0
    5630:	b29b      	uxth	r3, r3
    5632:	2b00      	cmp	r3, #0
    5634:	d101      	bne.n	563a <udd_ep_trans_in_next+0xd2>
    5636:	2301      	movs	r3, #1
    5638:	e000      	b.n	563c <udd_ep_trans_in_next+0xd4>
    563a:	2300      	movs	r3, #0
    563c:	b2db      	uxtb	r3, r3
    563e:	1c1a      	adds	r2, r3, #0
    5640:	2301      	movs	r3, #1
    5642:	4013      	ands	r3, r2
    5644:	b2da      	uxtb	r2, r3
    5646:	693b      	ldr	r3, [r7, #16]
    5648:	2101      	movs	r1, #1
    564a:	400a      	ands	r2, r1
    564c:	1890      	adds	r0, r2, r2
    564e:	7c9a      	ldrb	r2, [r3, #18]
    5650:	2102      	movs	r1, #2
    5652:	438a      	bics	r2, r1
    5654:	1c11      	adds	r1, r2, #0
    5656:	1c02      	adds	r2, r0, #0
    5658:	430a      	orrs	r2, r1
    565a:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    565c:	693b      	ldr	r3, [r7, #16]
    565e:	685a      	ldr	r2, [r3, #4]
    5660:	693b      	ldr	r3, [r7, #16]
    5662:	68db      	ldr	r3, [r3, #12]
    5664:	18d2      	adds	r2, r2, r3
    5666:	231e      	movs	r3, #30
    5668:	18fb      	adds	r3, r7, r3
    566a:	881c      	ldrh	r4, [r3, #0]
    566c:	4921      	ldr	r1, [pc, #132]	; (56f4 <udd_ep_trans_in_next+0x18c>)
    566e:	230f      	movs	r3, #15
    5670:	18fb      	adds	r3, r7, r3
    5672:	781b      	ldrb	r3, [r3, #0]
    5674:	1c08      	adds	r0, r1, #0
    5676:	1c19      	adds	r1, r3, #0
    5678:	1c23      	adds	r3, r4, #0
    567a:	4c1f      	ldr	r4, [pc, #124]	; (56f8 <udd_ep_trans_in_next+0x190>)
    567c:	47a0      	blx	r4
		return;
    567e:	e02e      	b.n	56de <udd_ep_trans_in_next+0x176>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    5680:	693b      	ldr	r3, [r7, #16]
    5682:	7c9b      	ldrb	r3, [r3, #18]
    5684:	2202      	movs	r2, #2
    5686:	4013      	ands	r3, r2
    5688:	b2db      	uxtb	r3, r3
    568a:	2b00      	cmp	r3, #0
    568c:	d013      	beq.n	56b6 <udd_ep_trans_in_next+0x14e>
		ptr_job->b_shortpacket = false;
    568e:	693b      	ldr	r3, [r7, #16]
    5690:	7c9a      	ldrb	r2, [r3, #18]
    5692:	2102      	movs	r1, #2
    5694:	438a      	bics	r2, r1
    5696:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    5698:	693b      	ldr	r3, [r7, #16]
    569a:	685a      	ldr	r2, [r3, #4]
    569c:	693b      	ldr	r3, [r7, #16]
    569e:	68db      	ldr	r3, [r3, #12]
    56a0:	18d2      	adds	r2, r2, r3
    56a2:	4914      	ldr	r1, [pc, #80]	; (56f4 <udd_ep_trans_in_next+0x18c>)
    56a4:	230f      	movs	r3, #15
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	781b      	ldrb	r3, [r3, #0]
    56aa:	1c08      	adds	r0, r1, #0
    56ac:	1c19      	adds	r1, r3, #0
    56ae:	2300      	movs	r3, #0
    56b0:	4c11      	ldr	r4, [pc, #68]	; (56f8 <udd_ep_trans_in_next+0x190>)
    56b2:	47a0      	blx	r4
		return;
    56b4:	e013      	b.n	56de <udd_ep_trans_in_next+0x176>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    56b6:	693b      	ldr	r3, [r7, #16]
    56b8:	7c9a      	ldrb	r2, [r3, #18]
    56ba:	2101      	movs	r1, #1
    56bc:	438a      	bics	r2, r1
    56be:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    56c0:	693b      	ldr	r3, [r7, #16]
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	2b00      	cmp	r3, #0
    56c6:	d00a      	beq.n	56de <udd_ep_trans_in_next+0x176>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    56c8:	693b      	ldr	r3, [r7, #16]
    56ca:	681c      	ldr	r4, [r3, #0]
    56cc:	693b      	ldr	r3, [r7, #16]
    56ce:	68da      	ldr	r2, [r3, #12]
    56d0:	2317      	movs	r3, #23
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	2000      	movs	r0, #0
    56d8:	1c11      	adds	r1, r2, #0
    56da:	1c1a      	adds	r2, r3, #0
    56dc:	47a0      	blx	r4
	}
}
    56de:	46bd      	mov	sp, r7
    56e0:	b009      	add	sp, #36	; 0x24
    56e2:	bd90      	pop	{r4, r7, pc}
    56e4:	0000552d 	.word	0x0000552d
    56e8:	00001fff 	.word	0x00001fff
    56ec:	00008d7d 	.word	0x00008d7d
    56f0:	00008b9d 	.word	0x00008b9d
    56f4:	2000033c 	.word	0x2000033c
    56f8:	00007c05 	.word	0x00007c05

000056fc <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    56fc:	b5b0      	push	{r4, r5, r7, lr}
    56fe:	b088      	sub	sp, #32
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5708:	2317      	movs	r3, #23
    570a:	18fb      	adds	r3, r7, r3
    570c:	69ba      	ldr	r2, [r7, #24]
    570e:	7992      	ldrb	r2, [r2, #6]
    5710:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    5712:	2317      	movs	r3, #23
    5714:	18fb      	adds	r3, r7, r3
    5716:	781b      	ldrb	r3, [r3, #0]
    5718:	1c18      	adds	r0, r3, #0
    571a:	4b6a      	ldr	r3, [pc, #424]	; (58c4 <udd_ep_trans_out_next+0x1c8>)
    571c:	4798      	blx	r3
    571e:	1c03      	adds	r3, r0, #0
    5720:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    5722:	230f      	movs	r3, #15
    5724:	18fb      	adds	r3, r7, r3
    5726:	2217      	movs	r2, #23
    5728:	18ba      	adds	r2, r7, r2
    572a:	7812      	ldrb	r2, [r2, #0]
    572c:	210f      	movs	r1, #15
    572e:	400a      	ands	r2, r1
    5730:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    5732:	230c      	movs	r3, #12
    5734:	18fb      	adds	r3, r7, r3
    5736:	693a      	ldr	r2, [r7, #16]
    5738:	8a12      	ldrh	r2, [r2, #16]
    573a:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    573c:	230a      	movs	r3, #10
    573e:	18fb      	adds	r3, r7, r3
    5740:	69ba      	ldr	r2, [r7, #24]
    5742:	8812      	ldrh	r2, [r2, #0]
    5744:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    5746:	693b      	ldr	r3, [r7, #16]
    5748:	7c9b      	ldrb	r3, [r3, #18]
    574a:	2204      	movs	r2, #4
    574c:	4013      	ands	r3, r2
    574e:	b2db      	uxtb	r3, r3
    5750:	2b00      	cmp	r3, #0
    5752:	d01a      	beq.n	578a <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    5754:	693b      	ldr	r3, [r7, #16]
    5756:	685a      	ldr	r2, [r3, #4]
    5758:	693b      	ldr	r3, [r7, #16]
    575a:	68db      	ldr	r3, [r3, #12]
    575c:	18d5      	adds	r5, r2, r3
    575e:	230f      	movs	r3, #15
    5760:	18fb      	adds	r3, r7, r3
    5762:	781b      	ldrb	r3, [r3, #0]
    5764:	3b01      	subs	r3, #1
    5766:	019a      	lsls	r2, r3, #6
    5768:	4b57      	ldr	r3, [pc, #348]	; (58c8 <udd_ep_trans_out_next+0x1cc>)
    576a:	18d4      	adds	r4, r2, r3
    576c:	693b      	ldr	r3, [r7, #16]
    576e:	6899      	ldr	r1, [r3, #8]
    5770:	230c      	movs	r3, #12
    5772:	18fb      	adds	r3, r7, r3
    5774:	881a      	ldrh	r2, [r3, #0]
    5776:	4b55      	ldr	r3, [pc, #340]	; (58cc <udd_ep_trans_out_next+0x1d0>)
    5778:	1c08      	adds	r0, r1, #0
    577a:	1c11      	adds	r1, r2, #0
    577c:	4798      	blx	r3
    577e:	1c0b      	adds	r3, r1, #0
    5780:	1c28      	adds	r0, r5, #0
    5782:	1c21      	adds	r1, r4, #0
    5784:	1c1a      	adds	r2, r3, #0
    5786:	4b52      	ldr	r3, [pc, #328]	; (58d0 <udd_ep_trans_out_next+0x1d4>)
    5788:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    578a:	693b      	ldr	r3, [r7, #16]
    578c:	68da      	ldr	r2, [r3, #12]
    578e:	230a      	movs	r3, #10
    5790:	18fb      	adds	r3, r7, r3
    5792:	881b      	ldrh	r3, [r3, #0]
    5794:	18d2      	adds	r2, r2, r3
    5796:	693b      	ldr	r3, [r7, #16]
    5798:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    579a:	693b      	ldr	r3, [r7, #16]
    579c:	68da      	ldr	r2, [r3, #12]
    579e:	693b      	ldr	r3, [r7, #16]
    57a0:	689b      	ldr	r3, [r3, #8]
    57a2:	429a      	cmp	r2, r3
    57a4:	d903      	bls.n	57ae <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    57a6:	693b      	ldr	r3, [r7, #16]
    57a8:	689a      	ldr	r2, [r3, #8]
    57aa:	693b      	ldr	r3, [r7, #16]
    57ac:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    57ae:	69bb      	ldr	r3, [r7, #24]
    57b0:	889b      	ldrh	r3, [r3, #4]
    57b2:	220a      	movs	r2, #10
    57b4:	18ba      	adds	r2, r7, r2
    57b6:	8812      	ldrh	r2, [r2, #0]
    57b8:	429a      	cmp	r2, r3
    57ba:	d16b      	bne.n	5894 <udd_ep_trans_out_next+0x198>
    57bc:	693b      	ldr	r3, [r7, #16]
    57be:	68da      	ldr	r2, [r3, #12]
    57c0:	693b      	ldr	r3, [r7, #16]
    57c2:	689b      	ldr	r3, [r3, #8]
    57c4:	429a      	cmp	r2, r3
    57c6:	d065      	beq.n	5894 <udd_ep_trans_out_next+0x198>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    57c8:	693b      	ldr	r3, [r7, #16]
    57ca:	689b      	ldr	r3, [r3, #8]
    57cc:	b299      	uxth	r1, r3
    57ce:	693b      	ldr	r3, [r7, #16]
    57d0:	68db      	ldr	r3, [r3, #12]
    57d2:	b29a      	uxth	r2, r3
    57d4:	231e      	movs	r3, #30
    57d6:	18fb      	adds	r3, r7, r3
    57d8:	1a8a      	subs	r2, r1, r2
    57da:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    57dc:	231e      	movs	r3, #30
    57de:	18fb      	adds	r3, r7, r3
    57e0:	881b      	ldrh	r3, [r3, #0]
    57e2:	4a3c      	ldr	r2, [pc, #240]	; (58d4 <udd_ep_trans_out_next+0x1d8>)
    57e4:	4293      	cmp	r3, r2
    57e6:	d90f      	bls.n	5808 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    57e8:	230c      	movs	r3, #12
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	881a      	ldrh	r2, [r3, #0]
    57ee:	4939      	ldr	r1, [pc, #228]	; (58d4 <udd_ep_trans_out_next+0x1d8>)
    57f0:	4b39      	ldr	r3, [pc, #228]	; (58d8 <udd_ep_trans_out_next+0x1dc>)
    57f2:	1c08      	adds	r0, r1, #0
    57f4:	1c11      	adds	r1, r2, #0
    57f6:	4798      	blx	r3
    57f8:	1c0b      	adds	r3, r1, #0
    57fa:	b29a      	uxth	r2, r3
    57fc:	231e      	movs	r3, #30
    57fe:	18fb      	adds	r3, r7, r3
    5800:	4934      	ldr	r1, [pc, #208]	; (58d4 <udd_ep_trans_out_next+0x1d8>)
    5802:	1a8a      	subs	r2, r1, r2
    5804:	801a      	strh	r2, [r3, #0]
    5806:	e012      	b.n	582e <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    5808:	231e      	movs	r3, #30
    580a:	18fa      	adds	r2, r7, r3
    580c:	230c      	movs	r3, #12
    580e:	18fb      	adds	r3, r7, r3
    5810:	8811      	ldrh	r1, [r2, #0]
    5812:	881a      	ldrh	r2, [r3, #0]
    5814:	4b2d      	ldr	r3, [pc, #180]	; (58cc <udd_ep_trans_out_next+0x1d0>)
    5816:	1c08      	adds	r0, r1, #0
    5818:	1c11      	adds	r1, r2, #0
    581a:	4798      	blx	r3
    581c:	1c0b      	adds	r3, r1, #0
    581e:	b29a      	uxth	r2, r3
    5820:	231e      	movs	r3, #30
    5822:	18fb      	adds	r3, r7, r3
    5824:	211e      	movs	r1, #30
    5826:	1879      	adds	r1, r7, r1
    5828:	8809      	ldrh	r1, [r1, #0]
    582a:	1a8a      	subs	r2, r1, r2
    582c:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    582e:	231e      	movs	r3, #30
    5830:	18fa      	adds	r2, r7, r3
    5832:	230c      	movs	r3, #12
    5834:	18fb      	adds	r3, r7, r3
    5836:	8812      	ldrh	r2, [r2, #0]
    5838:	881b      	ldrh	r3, [r3, #0]
    583a:	429a      	cmp	r2, r3
    583c:	d218      	bcs.n	5870 <udd_ep_trans_out_next+0x174>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    583e:	693b      	ldr	r3, [r7, #16]
    5840:	7c9a      	ldrb	r2, [r3, #18]
    5842:	2104      	movs	r1, #4
    5844:	430a      	orrs	r2, r1
    5846:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    5848:	230f      	movs	r3, #15
    584a:	18fb      	adds	r3, r7, r3
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	3b01      	subs	r3, #1
    5850:	019a      	lsls	r2, r3, #6
    5852:	4b1d      	ldr	r3, [pc, #116]	; (58c8 <udd_ep_trans_out_next+0x1cc>)
    5854:	18d2      	adds	r2, r2, r3
    5856:	230c      	movs	r3, #12
    5858:	18fb      	adds	r3, r7, r3
    585a:	881c      	ldrh	r4, [r3, #0]
    585c:	491f      	ldr	r1, [pc, #124]	; (58dc <udd_ep_trans_out_next+0x1e0>)
    585e:	230f      	movs	r3, #15
    5860:	18fb      	adds	r3, r7, r3
    5862:	781b      	ldrb	r3, [r3, #0]
    5864:	1c08      	adds	r0, r1, #0
    5866:	1c19      	adds	r1, r3, #0
    5868:	1c23      	adds	r3, r4, #0
    586a:	4c1d      	ldr	r4, [pc, #116]	; (58e0 <udd_ep_trans_out_next+0x1e4>)
    586c:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    586e:	e025      	b.n	58bc <udd_ep_trans_out_next+0x1c0>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5870:	693b      	ldr	r3, [r7, #16]
    5872:	685a      	ldr	r2, [r3, #4]
    5874:	693b      	ldr	r3, [r7, #16]
    5876:	68db      	ldr	r3, [r3, #12]
    5878:	18d2      	adds	r2, r2, r3
    587a:	231e      	movs	r3, #30
    587c:	18fb      	adds	r3, r7, r3
    587e:	881c      	ldrh	r4, [r3, #0]
    5880:	4916      	ldr	r1, [pc, #88]	; (58dc <udd_ep_trans_out_next+0x1e0>)
    5882:	230f      	movs	r3, #15
    5884:	18fb      	adds	r3, r7, r3
    5886:	781b      	ldrb	r3, [r3, #0]
    5888:	1c08      	adds	r0, r1, #0
    588a:	1c19      	adds	r1, r3, #0
    588c:	1c23      	adds	r3, r4, #0
    588e:	4c14      	ldr	r4, [pc, #80]	; (58e0 <udd_ep_trans_out_next+0x1e4>)
    5890:	47a0      	blx	r4
		}
		return;
    5892:	e013      	b.n	58bc <udd_ep_trans_out_next+0x1c0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    5894:	693b      	ldr	r3, [r7, #16]
    5896:	7c9a      	ldrb	r2, [r3, #18]
    5898:	2101      	movs	r1, #1
    589a:	438a      	bics	r2, r1
    589c:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    589e:	693b      	ldr	r3, [r7, #16]
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d00a      	beq.n	58bc <udd_ep_trans_out_next+0x1c0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    58a6:	693b      	ldr	r3, [r7, #16]
    58a8:	681c      	ldr	r4, [r3, #0]
    58aa:	693b      	ldr	r3, [r7, #16]
    58ac:	68da      	ldr	r2, [r3, #12]
    58ae:	2317      	movs	r3, #23
    58b0:	18fb      	adds	r3, r7, r3
    58b2:	781b      	ldrb	r3, [r3, #0]
    58b4:	2000      	movs	r0, #0
    58b6:	1c11      	adds	r1, r2, #0
    58b8:	1c1a      	adds	r2, r3, #0
    58ba:	47a0      	blx	r4
	}
}
    58bc:	46bd      	mov	sp, r7
    58be:	b008      	add	sp, #32
    58c0:	bdb0      	pop	{r4, r5, r7, pc}
    58c2:	46c0      	nop			; (mov r8, r8)
    58c4:	0000552d 	.word	0x0000552d
    58c8:	200002fc 	.word	0x200002fc
    58cc:	00008b9d 	.word	0x00008b9d
    58d0:	00008e21 	.word	0x00008e21
    58d4:	00001fff 	.word	0x00001fff
    58d8:	00008d7d 	.word	0x00008d7d
    58dc:	2000033c 	.word	0x2000033c
    58e0:	00007cbd 	.word	0x00007cbd

000058e4 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    58e4:	b580      	push	{r7, lr}
    58e6:	b084      	sub	sp, #16
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    58ee:	683b      	ldr	r3, [r7, #0]
    58f0:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    58f2:	230b      	movs	r3, #11
    58f4:	18fb      	adds	r3, r7, r3
    58f6:	68fa      	ldr	r2, [r7, #12]
    58f8:	7992      	ldrb	r2, [r2, #6]
    58fa:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    58fc:	230b      	movs	r3, #11
    58fe:	18fb      	adds	r3, r7, r3
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	b25b      	sxtb	r3, r3
    5904:	2b00      	cmp	r3, #0
    5906:	da04      	bge.n	5912 <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    5908:	683b      	ldr	r3, [r7, #0]
    590a:	1c18      	adds	r0, r3, #0
    590c:	4b04      	ldr	r3, [pc, #16]	; (5920 <udd_ep_transfer_process+0x3c>)
    590e:	4798      	blx	r3
    5910:	e003      	b.n	591a <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    5912:	683b      	ldr	r3, [r7, #0]
    5914:	1c18      	adds	r0, r3, #0
    5916:	4b03      	ldr	r3, [pc, #12]	; (5924 <udd_ep_transfer_process+0x40>)
    5918:	4798      	blx	r3
	}
}
    591a:	46bd      	mov	sp, r7
    591c:	b004      	add	sp, #16
    591e:	bd80      	pop	{r7, pc}
    5920:	00005569 	.word	0x00005569
    5924:	000056fd 	.word	0x000056fd

00005928 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    5928:	b590      	push	{r4, r7, lr}
    592a:	b085      	sub	sp, #20
    592c:	af00      	add	r7, sp, #0
    592e:	1c02      	adds	r2, r0, #0
    5930:	1dfb      	adds	r3, r7, #7
    5932:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    5934:	4a15      	ldr	r2, [pc, #84]	; (598c <udd_ep_abort+0x64>)
    5936:	1dfb      	adds	r3, r7, #7
    5938:	781b      	ldrb	r3, [r3, #0]
    593a:	1c10      	adds	r0, r2, #0
    593c:	1c19      	adds	r1, r3, #0
    593e:	4b14      	ldr	r3, [pc, #80]	; (5990 <udd_ep_abort+0x68>)
    5940:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    5942:	1dfb      	adds	r3, r7, #7
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	1c18      	adds	r0, r3, #0
    5948:	4b12      	ldr	r3, [pc, #72]	; (5994 <udd_ep_abort+0x6c>)
    594a:	4798      	blx	r3
    594c:	1c03      	adds	r3, r0, #0
    594e:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	7c9b      	ldrb	r3, [r3, #18]
    5954:	2201      	movs	r2, #1
    5956:	4013      	ands	r3, r2
    5958:	b2db      	uxtb	r3, r3
    595a:	2b00      	cmp	r3, #0
    595c:	d100      	bne.n	5960 <udd_ep_abort+0x38>
		return;
    595e:	e012      	b.n	5986 <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    5960:	68fb      	ldr	r3, [r7, #12]
    5962:	7c9a      	ldrb	r2, [r3, #18]
    5964:	2101      	movs	r1, #1
    5966:	438a      	bics	r2, r1
    5968:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    596a:	68fb      	ldr	r3, [r7, #12]
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d009      	beq.n	5986 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    5972:	68fb      	ldr	r3, [r7, #12]
    5974:	681c      	ldr	r4, [r3, #0]
    5976:	68fb      	ldr	r3, [r7, #12]
    5978:	68da      	ldr	r2, [r3, #12]
    597a:	1dfb      	adds	r3, r7, #7
    597c:	781b      	ldrb	r3, [r3, #0]
    597e:	2001      	movs	r0, #1
    5980:	1c11      	adds	r1, r2, #0
    5982:	1c1a      	adds	r2, r3, #0
    5984:	47a0      	blx	r4
	}
}
    5986:	46bd      	mov	sp, r7
    5988:	b005      	add	sp, #20
    598a:	bd90      	pop	{r4, r7, pc}
    598c:	2000033c 	.word	0x2000033c
    5990:	000079a5 	.word	0x000079a5
    5994:	0000552d 	.word	0x0000552d

00005998 <udd_get_frame_number>:
	return false;
#endif
}

uint16_t udd_get_frame_number(void)
{
    5998:	b580      	push	{r7, lr}
    599a:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    599c:	4b03      	ldr	r3, [pc, #12]	; (59ac <udd_get_frame_number+0x14>)
    599e:	1c18      	adds	r0, r3, #0
    59a0:	4b03      	ldr	r3, [pc, #12]	; (59b0 <udd_get_frame_number+0x18>)
    59a2:	4798      	blx	r3
    59a4:	1c03      	adds	r3, r0, #0
}
    59a6:	1c18      	adds	r0, r3, #0
    59a8:	46bd      	mov	sp, r7
    59aa:	bd80      	pop	{r7, pc}
    59ac:	2000033c 	.word	0x2000033c
    59b0:	00005315 	.word	0x00005315

000059b4 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    59b4:	b580      	push	{r7, lr}
    59b6:	b084      	sub	sp, #16
    59b8:	af00      	add	r7, sp, #0
    59ba:	1c02      	adds	r2, r0, #0
    59bc:	1dfb      	adds	r3, r7, #7
    59be:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    59c0:	2308      	movs	r3, #8
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	1c18      	adds	r0, r3, #0
    59c6:	4b19      	ldr	r3, [pc, #100]	; (5a2c <udd_ep_free+0x78>)
    59c8:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    59ca:	230f      	movs	r3, #15
    59cc:	18fb      	adds	r3, r7, r3
    59ce:	1dfa      	adds	r2, r7, #7
    59d0:	7812      	ldrb	r2, [r2, #0]
    59d2:	210f      	movs	r1, #15
    59d4:	400a      	ands	r2, r1
    59d6:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    59d8:	1dfb      	adds	r3, r7, #7
    59da:	781b      	ldrb	r3, [r3, #0]
    59dc:	1c18      	adds	r0, r3, #0
    59de:	4b14      	ldr	r3, [pc, #80]	; (5a30 <udd_ep_free+0x7c>)
    59e0:	4798      	blx	r3

	config_ep.ep_address = ep;
    59e2:	2308      	movs	r3, #8
    59e4:	18fb      	adds	r3, r7, r3
    59e6:	1dfa      	adds	r2, r7, #7
    59e8:	7812      	ldrb	r2, [r2, #0]
    59ea:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    59ec:	2308      	movs	r3, #8
    59ee:	18fb      	adds	r3, r7, r3
    59f0:	2200      	movs	r2, #0
    59f2:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    59f4:	4a0f      	ldr	r2, [pc, #60]	; (5a34 <udd_ep_free+0x80>)
    59f6:	2308      	movs	r3, #8
    59f8:	18fb      	adds	r3, r7, r3
    59fa:	1c10      	adds	r0, r2, #0
    59fc:	1c19      	adds	r1, r3, #0
    59fe:	4b0e      	ldr	r3, [pc, #56]	; (5a38 <udd_ep_free+0x84>)
    5a00:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5a02:	4a0c      	ldr	r2, [pc, #48]	; (5a34 <udd_ep_free+0x80>)
    5a04:	230f      	movs	r3, #15
    5a06:	18fb      	adds	r3, r7, r3
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	1c10      	adds	r0, r2, #0
    5a0c:	1c19      	adds	r1, r3, #0
    5a0e:	2200      	movs	r2, #0
    5a10:	4b0a      	ldr	r3, [pc, #40]	; (5a3c <udd_ep_free+0x88>)
    5a12:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5a14:	4a07      	ldr	r2, [pc, #28]	; (5a34 <udd_ep_free+0x80>)
    5a16:	1dfb      	adds	r3, r7, #7
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	1c10      	adds	r0, r2, #0
    5a1c:	1c19      	adds	r1, r3, #0
    5a1e:	2200      	movs	r2, #0
    5a20:	4b07      	ldr	r3, [pc, #28]	; (5a40 <udd_ep_free+0x8c>)
    5a22:	4798      	blx	r3
}
    5a24:	46bd      	mov	sp, r7
    5a26:	b004      	add	sp, #16
    5a28:	bd80      	pop	{r7, pc}
    5a2a:	46c0      	nop			; (mov r8, r8)
    5a2c:	000074a1 	.word	0x000074a1
    5a30:	00005929 	.word	0x00005929
    5a34:	2000033c 	.word	0x2000033c
    5a38:	000074c9 	.word	0x000074c9
    5a3c:	000070e5 	.word	0x000070e5
    5a40:	000072f9 	.word	0x000072f9

00005a44 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    5a44:	b590      	push	{r4, r7, lr}
    5a46:	b087      	sub	sp, #28
    5a48:	af00      	add	r7, sp, #0
    5a4a:	1c04      	adds	r4, r0, #0
    5a4c:	1c08      	adds	r0, r1, #0
    5a4e:	1c11      	adds	r1, r2, #0
    5a50:	1dfb      	adds	r3, r7, #7
    5a52:	1c22      	adds	r2, r4, #0
    5a54:	701a      	strb	r2, [r3, #0]
    5a56:	1dbb      	adds	r3, r7, #6
    5a58:	1c02      	adds	r2, r0, #0
    5a5a:	701a      	strb	r2, [r3, #0]
    5a5c:	1d3b      	adds	r3, r7, #4
    5a5e:	1c0a      	adds	r2, r1, #0
    5a60:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5a62:	230c      	movs	r3, #12
    5a64:	18fb      	adds	r3, r7, r3
    5a66:	1c18      	adds	r0, r3, #0
    5a68:	4b5a      	ldr	r3, [pc, #360]	; (5bd4 <udd_ep_alloc+0x190>)
    5a6a:	4798      	blx	r3

	config_ep.ep_address = ep;
    5a6c:	230c      	movs	r3, #12
    5a6e:	18fb      	adds	r3, r7, r3
    5a70:	1dfa      	adds	r2, r7, #7
    5a72:	7812      	ldrb	r2, [r2, #0]
    5a74:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    5a76:	1d3b      	adds	r3, r7, #4
    5a78:	881b      	ldrh	r3, [r3, #0]
    5a7a:	2b08      	cmp	r3, #8
    5a7c:	d804      	bhi.n	5a88 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5a7e:	230c      	movs	r3, #12
    5a80:	18fb      	adds	r3, r7, r3
    5a82:	2200      	movs	r2, #0
    5a84:	705a      	strb	r2, [r3, #1]
    5a86:	e045      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    5a88:	1d3b      	adds	r3, r7, #4
    5a8a:	881b      	ldrh	r3, [r3, #0]
    5a8c:	2b10      	cmp	r3, #16
    5a8e:	d804      	bhi.n	5a9a <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    5a90:	230c      	movs	r3, #12
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	2201      	movs	r2, #1
    5a96:	705a      	strb	r2, [r3, #1]
    5a98:	e03c      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    5a9a:	1d3b      	adds	r3, r7, #4
    5a9c:	881b      	ldrh	r3, [r3, #0]
    5a9e:	2b20      	cmp	r3, #32
    5aa0:	d804      	bhi.n	5aac <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    5aa2:	230c      	movs	r3, #12
    5aa4:	18fb      	adds	r3, r7, r3
    5aa6:	2202      	movs	r2, #2
    5aa8:	705a      	strb	r2, [r3, #1]
    5aaa:	e033      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    5aac:	1d3b      	adds	r3, r7, #4
    5aae:	881b      	ldrh	r3, [r3, #0]
    5ab0:	2b40      	cmp	r3, #64	; 0x40
    5ab2:	d804      	bhi.n	5abe <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5ab4:	230c      	movs	r3, #12
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	2203      	movs	r2, #3
    5aba:	705a      	strb	r2, [r3, #1]
    5abc:	e02a      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    5abe:	1d3b      	adds	r3, r7, #4
    5ac0:	881b      	ldrh	r3, [r3, #0]
    5ac2:	2b80      	cmp	r3, #128	; 0x80
    5ac4:	d804      	bhi.n	5ad0 <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5ac6:	230c      	movs	r3, #12
    5ac8:	18fb      	adds	r3, r7, r3
    5aca:	2204      	movs	r2, #4
    5acc:	705a      	strb	r2, [r3, #1]
    5ace:	e021      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    5ad0:	1d3b      	adds	r3, r7, #4
    5ad2:	881a      	ldrh	r2, [r3, #0]
    5ad4:	2380      	movs	r3, #128	; 0x80
    5ad6:	005b      	lsls	r3, r3, #1
    5ad8:	429a      	cmp	r2, r3
    5ada:	d804      	bhi.n	5ae6 <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5adc:	230c      	movs	r3, #12
    5ade:	18fb      	adds	r3, r7, r3
    5ae0:	2205      	movs	r2, #5
    5ae2:	705a      	strb	r2, [r3, #1]
    5ae4:	e016      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    5ae6:	1d3b      	adds	r3, r7, #4
    5ae8:	881a      	ldrh	r2, [r3, #0]
    5aea:	2380      	movs	r3, #128	; 0x80
    5aec:	009b      	lsls	r3, r3, #2
    5aee:	429a      	cmp	r2, r3
    5af0:	d804      	bhi.n	5afc <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    5af2:	230c      	movs	r3, #12
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	2206      	movs	r2, #6
    5af8:	705a      	strb	r2, [r3, #1]
    5afa:	e00b      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    5afc:	1d3b      	adds	r3, r7, #4
    5afe:	881b      	ldrh	r3, [r3, #0]
    5b00:	4a35      	ldr	r2, [pc, #212]	; (5bd8 <udd_ep_alloc+0x194>)
    5b02:	4293      	cmp	r3, r2
    5b04:	d804      	bhi.n	5b10 <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5b06:	230c      	movs	r3, #12
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	2207      	movs	r2, #7
    5b0c:	705a      	strb	r2, [r3, #1]
    5b0e:	e001      	b.n	5b14 <udd_ep_alloc+0xd0>
	} else {
		return false;
    5b10:	2300      	movs	r3, #0
    5b12:	e05a      	b.n	5bca <udd_ep_alloc+0x186>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    5b14:	1dfb      	adds	r3, r7, #7
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	1c18      	adds	r0, r3, #0
    5b1a:	4b30      	ldr	r3, [pc, #192]	; (5bdc <udd_ep_alloc+0x198>)
    5b1c:	4798      	blx	r3
    5b1e:	1c03      	adds	r3, r0, #0
    5b20:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    5b22:	697b      	ldr	r3, [r7, #20]
    5b24:	1d3a      	adds	r2, r7, #4
    5b26:	8812      	ldrh	r2, [r2, #0]
    5b28:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5b2a:	1dbb      	adds	r3, r7, #6
    5b2c:	1dba      	adds	r2, r7, #6
    5b2e:	7812      	ldrb	r2, [r2, #0]
    5b30:	2103      	movs	r1, #3
    5b32:	400a      	ands	r2, r1
    5b34:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    5b36:	1dbb      	adds	r3, r7, #6
    5b38:	781b      	ldrb	r3, [r3, #0]
    5b3a:	2b01      	cmp	r3, #1
    5b3c:	d104      	bne.n	5b48 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    5b3e:	230c      	movs	r3, #12
    5b40:	18fb      	adds	r3, r7, r3
    5b42:	2202      	movs	r2, #2
    5b44:	70da      	strb	r2, [r3, #3]
    5b46:	e013      	b.n	5b70 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    5b48:	1dbb      	adds	r3, r7, #6
    5b4a:	781b      	ldrb	r3, [r3, #0]
    5b4c:	2b02      	cmp	r3, #2
    5b4e:	d104      	bne.n	5b5a <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    5b50:	230c      	movs	r3, #12
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	2203      	movs	r2, #3
    5b56:	70da      	strb	r2, [r3, #3]
    5b58:	e00a      	b.n	5b70 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    5b5a:	1dbb      	adds	r3, r7, #6
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	2b03      	cmp	r3, #3
    5b60:	d104      	bne.n	5b6c <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    5b62:	230c      	movs	r3, #12
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	2204      	movs	r2, #4
    5b68:	70da      	strb	r2, [r3, #3]
    5b6a:	e001      	b.n	5b70 <udd_ep_alloc+0x12c>
	} else {
		return false;
    5b6c:	2300      	movs	r3, #0
    5b6e:	e02c      	b.n	5bca <udd_ep_alloc+0x186>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5b70:	2313      	movs	r3, #19
    5b72:	18fb      	adds	r3, r7, r3
    5b74:	1dfa      	adds	r2, r7, #7
    5b76:	7812      	ldrb	r2, [r2, #0]
    5b78:	210f      	movs	r1, #15
    5b7a:	400a      	ands	r2, r1
    5b7c:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    5b7e:	4a18      	ldr	r2, [pc, #96]	; (5be0 <udd_ep_alloc+0x19c>)
    5b80:	230c      	movs	r3, #12
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	1c10      	adds	r0, r2, #0
    5b86:	1c19      	adds	r1, r3, #0
    5b88:	4b16      	ldr	r3, [pc, #88]	; (5be4 <udd_ep_alloc+0x1a0>)
    5b8a:	4798      	blx	r3
    5b8c:	1e03      	subs	r3, r0, #0
    5b8e:	d001      	beq.n	5b94 <udd_ep_alloc+0x150>
		return false;
    5b90:	2300      	movs	r3, #0
    5b92:	e01a      	b.n	5bca <udd_ep_alloc+0x186>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    5b94:	4912      	ldr	r1, [pc, #72]	; (5be0 <udd_ep_alloc+0x19c>)
    5b96:	2313      	movs	r3, #19
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	781a      	ldrb	r2, [r3, #0]
    5b9c:	4b12      	ldr	r3, [pc, #72]	; (5be8 <udd_ep_alloc+0x1a4>)
    5b9e:	1c08      	adds	r0, r1, #0
    5ba0:	1c11      	adds	r1, r2, #0
    5ba2:	2200      	movs	r2, #0
    5ba4:	4c11      	ldr	r4, [pc, #68]	; (5bec <udd_ep_alloc+0x1a8>)
    5ba6:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5ba8:	4a0d      	ldr	r2, [pc, #52]	; (5be0 <udd_ep_alloc+0x19c>)
    5baa:	1dfb      	adds	r3, r7, #7
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	1c10      	adds	r0, r2, #0
    5bb0:	1c19      	adds	r1, r3, #0
    5bb2:	2200      	movs	r2, #0
    5bb4:	4b0e      	ldr	r3, [pc, #56]	; (5bf0 <udd_ep_alloc+0x1ac>)
    5bb6:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5bb8:	4a09      	ldr	r2, [pc, #36]	; (5be0 <udd_ep_alloc+0x19c>)
    5bba:	1dfb      	adds	r3, r7, #7
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	1c10      	adds	r0, r2, #0
    5bc0:	1c19      	adds	r1, r3, #0
    5bc2:	2201      	movs	r2, #1
    5bc4:	4b0a      	ldr	r3, [pc, #40]	; (5bf0 <udd_ep_alloc+0x1ac>)
    5bc6:	4798      	blx	r3

	return true;
    5bc8:	2301      	movs	r3, #1
}
    5bca:	1c18      	adds	r0, r3, #0
    5bcc:	46bd      	mov	sp, r7
    5bce:	b007      	add	sp, #28
    5bd0:	bd90      	pop	{r4, r7, pc}
    5bd2:	46c0      	nop			; (mov r8, r8)
    5bd4:	000074a1 	.word	0x000074a1
    5bd8:	000003ff 	.word	0x000003ff
    5bdc:	0000552d 	.word	0x0000552d
    5be0:	2000033c 	.word	0x2000033c
    5be4:	000074c9 	.word	0x000074c9
    5be8:	000058e5 	.word	0x000058e5
    5bec:	00007069 	.word	0x00007069
    5bf0:	0000715d 	.word	0x0000715d

00005bf4 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    5bf4:	b580      	push	{r7, lr}
    5bf6:	b082      	sub	sp, #8
    5bf8:	af00      	add	r7, sp, #0
    5bfa:	1c02      	adds	r2, r0, #0
    5bfc:	1dfb      	adds	r3, r7, #7
    5bfe:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5c00:	4a05      	ldr	r2, [pc, #20]	; (5c18 <udd_ep_is_halted+0x24>)
    5c02:	1dfb      	adds	r3, r7, #7
    5c04:	781b      	ldrb	r3, [r3, #0]
    5c06:	1c10      	adds	r0, r2, #0
    5c08:	1c19      	adds	r1, r3, #0
    5c0a:	4b04      	ldr	r3, [pc, #16]	; (5c1c <udd_ep_is_halted+0x28>)
    5c0c:	4798      	blx	r3
    5c0e:	1c03      	adds	r3, r0, #0
}
    5c10:	1c18      	adds	r0, r3, #0
    5c12:	46bd      	mov	sp, r7
    5c14:	b002      	add	sp, #8
    5c16:	bd80      	pop	{r7, pc}
    5c18:	2000033c 	.word	0x2000033c
    5c1c:	00007a25 	.word	0x00007a25

00005c20 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b084      	sub	sp, #16
    5c24:	af00      	add	r7, sp, #0
    5c26:	1c02      	adds	r2, r0, #0
    5c28:	1dfb      	adds	r3, r7, #7
    5c2a:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5c2c:	230f      	movs	r3, #15
    5c2e:	18fb      	adds	r3, r7, r3
    5c30:	1dfa      	adds	r2, r7, #7
    5c32:	7812      	ldrb	r2, [r2, #0]
    5c34:	210f      	movs	r1, #15
    5c36:	400a      	ands	r2, r1
    5c38:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5c3a:	230f      	movs	r3, #15
    5c3c:	18fb      	adds	r3, r7, r3
    5c3e:	781b      	ldrb	r3, [r3, #0]
    5c40:	2b01      	cmp	r3, #1
    5c42:	d901      	bls.n	5c48 <udd_ep_set_halt+0x28>
		return false;
    5c44:	2300      	movs	r3, #0
    5c46:	e00c      	b.n	5c62 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    5c48:	4a08      	ldr	r2, [pc, #32]	; (5c6c <udd_ep_set_halt+0x4c>)
    5c4a:	1dfb      	adds	r3, r7, #7
    5c4c:	781b      	ldrb	r3, [r3, #0]
    5c4e:	1c10      	adds	r0, r2, #0
    5c50:	1c19      	adds	r1, r3, #0
    5c52:	4b07      	ldr	r3, [pc, #28]	; (5c70 <udd_ep_set_halt+0x50>)
    5c54:	4798      	blx	r3

	udd_ep_abort(ep);
    5c56:	1dfb      	adds	r3, r7, #7
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	1c18      	adds	r0, r3, #0
    5c5c:	4b05      	ldr	r3, [pc, #20]	; (5c74 <udd_ep_set_halt+0x54>)
    5c5e:	4798      	blx	r3
	return true;
    5c60:	2301      	movs	r3, #1
}
    5c62:	1c18      	adds	r0, r3, #0
    5c64:	46bd      	mov	sp, r7
    5c66:	b004      	add	sp, #16
    5c68:	bd80      	pop	{r7, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	2000033c 	.word	0x2000033c
    5c70:	00007a95 	.word	0x00007a95
    5c74:	00005929 	.word	0x00005929

00005c78 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b084      	sub	sp, #16
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	1c02      	adds	r2, r0, #0
    5c80:	1dfb      	adds	r3, r7, #7
    5c82:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5c84:	230f      	movs	r3, #15
    5c86:	18fb      	adds	r3, r7, r3
    5c88:	1dfa      	adds	r2, r7, #7
    5c8a:	7812      	ldrb	r2, [r2, #0]
    5c8c:	210f      	movs	r1, #15
    5c8e:	400a      	ands	r2, r1
    5c90:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5c92:	230f      	movs	r3, #15
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	781b      	ldrb	r3, [r3, #0]
    5c98:	2b01      	cmp	r3, #1
    5c9a:	d901      	bls.n	5ca0 <udd_ep_clear_halt+0x28>
		return false;
    5c9c:	2300      	movs	r3, #0
    5c9e:	e01d      	b.n	5cdc <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    5ca0:	1dfb      	adds	r3, r7, #7
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	1c18      	adds	r0, r3, #0
    5ca6:	4b0f      	ldr	r3, [pc, #60]	; (5ce4 <udd_ep_clear_halt+0x6c>)
    5ca8:	4798      	blx	r3
    5caa:	1c03      	adds	r3, r0, #0
    5cac:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    5cae:	4a0e      	ldr	r2, [pc, #56]	; (5ce8 <udd_ep_clear_halt+0x70>)
    5cb0:	1dfb      	adds	r3, r7, #7
    5cb2:	781b      	ldrb	r3, [r3, #0]
    5cb4:	1c10      	adds	r0, r2, #0
    5cb6:	1c19      	adds	r1, r3, #0
    5cb8:	4b0c      	ldr	r3, [pc, #48]	; (5cec <udd_ep_clear_halt+0x74>)
    5cba:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    5cbc:	68bb      	ldr	r3, [r7, #8]
    5cbe:	7c9b      	ldrb	r3, [r3, #18]
    5cc0:	2201      	movs	r2, #1
    5cc2:	4013      	ands	r3, r2
    5cc4:	b2db      	uxtb	r3, r3
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d007      	beq.n	5cda <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    5cca:	68bb      	ldr	r3, [r7, #8]
    5ccc:	7c9a      	ldrb	r2, [r3, #18]
    5cce:	2101      	movs	r1, #1
    5cd0:	438a      	bics	r2, r1
    5cd2:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    5cd4:	68bb      	ldr	r3, [r7, #8]
    5cd6:	681b      	ldr	r3, [r3, #0]
    5cd8:	4798      	blx	r3
	}

	return true;
    5cda:	2301      	movs	r3, #1
}
    5cdc:	1c18      	adds	r0, r3, #0
    5cde:	46bd      	mov	sp, r7
    5ce0:	b004      	add	sp, #16
    5ce2:	bd80      	pop	{r7, pc}
    5ce4:	0000552d 	.word	0x0000552d
    5ce8:	2000033c 	.word	0x2000033c
    5cec:	00007aed 	.word	0x00007aed

00005cf0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5cf4:	4b07      	ldr	r3, [pc, #28]	; (5d14 <udd_ctrl_stall_data+0x24>)
    5cf6:	2205      	movs	r2, #5
    5cf8:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    5cfa:	4b07      	ldr	r3, [pc, #28]	; (5d18 <udd_ctrl_stall_data+0x28>)
    5cfc:	1c18      	adds	r0, r3, #0
    5cfe:	2180      	movs	r1, #128	; 0x80
    5d00:	4b06      	ldr	r3, [pc, #24]	; (5d1c <udd_ctrl_stall_data+0x2c>)
    5d02:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    5d04:	4b04      	ldr	r3, [pc, #16]	; (5d18 <udd_ctrl_stall_data+0x28>)
    5d06:	1c18      	adds	r0, r3, #0
    5d08:	2100      	movs	r1, #0
    5d0a:	4b05      	ldr	r3, [pc, #20]	; (5d20 <udd_ctrl_stall_data+0x30>)
    5d0c:	4798      	blx	r3
}
    5d0e:	46bd      	mov	sp, r7
    5d10:	bd80      	pop	{r7, pc}
    5d12:	46c0      	nop			; (mov r8, r8)
    5d14:	200001a8 	.word	0x200001a8
    5d18:	2000033c 	.word	0x2000033c
    5d1c:	00007a95 	.word	0x00007a95
    5d20:	00007aed 	.word	0x00007aed

00005d24 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    5d24:	b590      	push	{r4, r7, lr}
    5d26:	b089      	sub	sp, #36	; 0x24
    5d28:	af00      	add	r7, sp, #0
    5d2a:	60ba      	str	r2, [r7, #8]
    5d2c:	607b      	str	r3, [r7, #4]
    5d2e:	230f      	movs	r3, #15
    5d30:	18fb      	adds	r3, r7, r3
    5d32:	1c02      	adds	r2, r0, #0
    5d34:	701a      	strb	r2, [r3, #0]
    5d36:	230e      	movs	r3, #14
    5d38:	18fb      	adds	r3, r7, r3
    5d3a:	1c0a      	adds	r2, r1, #0
    5d3c:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    5d3e:	231d      	movs	r3, #29
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	220f      	movs	r2, #15
    5d44:	18ba      	adds	r2, r7, r2
    5d46:	7812      	ldrb	r2, [r2, #0]
    5d48:	210f      	movs	r1, #15
    5d4a:	400a      	ands	r2, r1
    5d4c:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    5d4e:	231d      	movs	r3, #29
    5d50:	18fb      	adds	r3, r7, r3
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	2b01      	cmp	r3, #1
    5d56:	d807      	bhi.n	5d68 <udd_ep_run+0x44>
    5d58:	230f      	movs	r3, #15
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	1c18      	adds	r0, r3, #0
    5d60:	4ba3      	ldr	r3, [pc, #652]	; (5ff0 <udd_ep_run+0x2cc>)
    5d62:	4798      	blx	r3
    5d64:	1e03      	subs	r3, r0, #0
    5d66:	d001      	beq.n	5d6c <udd_ep_run+0x48>
		return false;
    5d68:	2300      	movs	r3, #0
    5d6a:	e13c      	b.n	5fe6 <udd_ep_run+0x2c2>
	}

	ptr_job = udd_ep_get_job(ep);
    5d6c:	230f      	movs	r3, #15
    5d6e:	18fb      	adds	r3, r7, r3
    5d70:	781b      	ldrb	r3, [r3, #0]
    5d72:	1c18      	adds	r0, r3, #0
    5d74:	4b9f      	ldr	r3, [pc, #636]	; (5ff4 <udd_ep_run+0x2d0>)
    5d76:	4798      	blx	r3
    5d78:	1c03      	adds	r3, r0, #0
    5d7a:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    5d7c:	4b9e      	ldr	r3, [pc, #632]	; (5ff8 <udd_ep_run+0x2d4>)
    5d7e:	4798      	blx	r3
    5d80:	1c03      	adds	r3, r0, #0
    5d82:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    5d84:	69bb      	ldr	r3, [r7, #24]
    5d86:	7c9b      	ldrb	r3, [r3, #18]
    5d88:	2201      	movs	r2, #1
    5d8a:	4013      	ands	r3, r2
    5d8c:	b2db      	uxtb	r3, r3
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d005      	beq.n	5d9e <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    5d92:	697b      	ldr	r3, [r7, #20]
    5d94:	1c18      	adds	r0, r3, #0
    5d96:	4b99      	ldr	r3, [pc, #612]	; (5ffc <udd_ep_run+0x2d8>)
    5d98:	4798      	blx	r3
		return false; /* Job already on going */
    5d9a:	2300      	movs	r3, #0
    5d9c:	e123      	b.n	5fe6 <udd_ep_run+0x2c2>
	}
	ptr_job->busy = true;
    5d9e:	69bb      	ldr	r3, [r7, #24]
    5da0:	7c9a      	ldrb	r2, [r3, #18]
    5da2:	2101      	movs	r1, #1
    5da4:	430a      	orrs	r2, r1
    5da6:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    5da8:	697b      	ldr	r3, [r7, #20]
    5daa:	1c18      	adds	r0, r3, #0
    5dac:	4b93      	ldr	r3, [pc, #588]	; (5ffc <udd_ep_run+0x2d8>)
    5dae:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    5db0:	69bb      	ldr	r3, [r7, #24]
    5db2:	68ba      	ldr	r2, [r7, #8]
    5db4:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    5db6:	69bb      	ldr	r3, [r7, #24]
    5db8:	687a      	ldr	r2, [r7, #4]
    5dba:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    5dbc:	69bb      	ldr	r3, [r7, #24]
    5dbe:	2200      	movs	r2, #0
    5dc0:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    5dc2:	69bb      	ldr	r3, [r7, #24]
    5dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5dc6:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5dc8:	69bb      	ldr	r3, [r7, #24]
    5dca:	220e      	movs	r2, #14
    5dcc:	18ba      	adds	r2, r7, r2
    5dce:	7812      	ldrb	r2, [r2, #0]
    5dd0:	2101      	movs	r1, #1
    5dd2:	400a      	ands	r2, r1
    5dd4:	1890      	adds	r0, r2, r2
    5dd6:	7c9a      	ldrb	r2, [r3, #18]
    5dd8:	2102      	movs	r1, #2
    5dda:	438a      	bics	r2, r1
    5ddc:	1c11      	adds	r1, r2, #0
    5dde:	1c02      	adds	r2, r0, #0
    5de0:	430a      	orrs	r2, r1
    5de2:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    5de4:	69bb      	ldr	r3, [r7, #24]
    5de6:	7c9a      	ldrb	r2, [r3, #18]
    5de8:	2104      	movs	r1, #4
    5dea:	438a      	bics	r2, r1
    5dec:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    5dee:	230f      	movs	r3, #15
    5df0:	18fb      	adds	r3, r7, r3
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	b25b      	sxtb	r3, r3
    5df6:	2b00      	cmp	r3, #0
    5df8:	db00      	blt.n	5dfc <udd_ep_run+0xd8>
    5dfa:	e07b      	b.n	5ef4 <udd_ep_run+0x1d0>
		if (0 != ptr_job->buf_size) {
    5dfc:	69bb      	ldr	r3, [r7, #24]
    5dfe:	689b      	ldr	r3, [r3, #8]
    5e00:	2b00      	cmp	r3, #0
    5e02:	d040      	beq.n	5e86 <udd_ep_run+0x162>
			next_trans = ptr_job->buf_size;
    5e04:	69bb      	ldr	r3, [r7, #24]
    5e06:	689a      	ldr	r2, [r3, #8]
    5e08:	231e      	movs	r3, #30
    5e0a:	18fb      	adds	r3, r7, r3
    5e0c:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5e0e:	231e      	movs	r3, #30
    5e10:	18fb      	adds	r3, r7, r3
    5e12:	881b      	ldrh	r3, [r3, #0]
    5e14:	4a7a      	ldr	r2, [pc, #488]	; (6000 <udd_ep_run+0x2dc>)
    5e16:	4293      	cmp	r3, r2
    5e18:	d90d      	bls.n	5e36 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5e1a:	69bb      	ldr	r3, [r7, #24]
    5e1c:	8a1b      	ldrh	r3, [r3, #16]
    5e1e:	1c19      	adds	r1, r3, #0
    5e20:	4a77      	ldr	r2, [pc, #476]	; (6000 <udd_ep_run+0x2dc>)
    5e22:	4b78      	ldr	r3, [pc, #480]	; (6004 <udd_ep_run+0x2e0>)
    5e24:	1c10      	adds	r0, r2, #0
    5e26:	4798      	blx	r3
    5e28:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5e2a:	b29a      	uxth	r2, r3
    5e2c:	231e      	movs	r3, #30
    5e2e:	18fb      	adds	r3, r7, r3
    5e30:	4973      	ldr	r1, [pc, #460]	; (6000 <udd_ep_run+0x2dc>)
    5e32:	1a8a      	subs	r2, r1, r2
    5e34:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5e36:	69bb      	ldr	r3, [r7, #24]
    5e38:	7c9b      	ldrb	r3, [r3, #18]
    5e3a:	2202      	movs	r2, #2
    5e3c:	4013      	ands	r3, r2
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	2b00      	cmp	r3, #0
    5e42:	d00e      	beq.n	5e62 <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    5e44:	69bb      	ldr	r3, [r7, #24]
    5e46:	8a1a      	ldrh	r2, [r3, #16]
    5e48:	231e      	movs	r3, #30
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	8819      	ldrh	r1, [r3, #0]
    5e4e:	4b6e      	ldr	r3, [pc, #440]	; (6008 <udd_ep_run+0x2e4>)
    5e50:	1c08      	adds	r0, r1, #0
    5e52:	1c11      	adds	r1, r2, #0
    5e54:	4798      	blx	r3
    5e56:	1c0b      	adds	r3, r1, #0
    5e58:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d101      	bne.n	5e62 <udd_ep_run+0x13e>
    5e5e:	2301      	movs	r3, #1
    5e60:	e000      	b.n	5e64 <udd_ep_run+0x140>
    5e62:	2300      	movs	r3, #0
    5e64:	b2db      	uxtb	r3, r3
    5e66:	1c1a      	adds	r2, r3, #0
    5e68:	2301      	movs	r3, #1
    5e6a:	4013      	ands	r3, r2
    5e6c:	b2da      	uxtb	r2, r3
    5e6e:	69bb      	ldr	r3, [r7, #24]
    5e70:	2101      	movs	r1, #1
    5e72:	400a      	ands	r2, r1
    5e74:	1890      	adds	r0, r2, r2
    5e76:	7c9a      	ldrb	r2, [r3, #18]
    5e78:	2102      	movs	r1, #2
    5e7a:	438a      	bics	r2, r1
    5e7c:	1c11      	adds	r1, r2, #0
    5e7e:	1c02      	adds	r2, r0, #0
    5e80:	430a      	orrs	r2, r1
    5e82:	749a      	strb	r2, [r3, #18]
    5e84:	e023      	b.n	5ece <udd_ep_run+0x1aa>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    5e86:	69bb      	ldr	r3, [r7, #24]
    5e88:	7c9b      	ldrb	r3, [r3, #18]
    5e8a:	2202      	movs	r2, #2
    5e8c:	4013      	ands	r3, r2
    5e8e:	b2db      	uxtb	r3, r3
    5e90:	2b00      	cmp	r3, #0
    5e92:	d009      	beq.n	5ea8 <udd_ep_run+0x184>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    5e94:	69bb      	ldr	r3, [r7, #24]
    5e96:	7c9a      	ldrb	r2, [r3, #18]
    5e98:	2102      	movs	r1, #2
    5e9a:	438a      	bics	r2, r1
    5e9c:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    5e9e:	231e      	movs	r3, #30
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	801a      	strh	r2, [r3, #0]
    5ea6:	e012      	b.n	5ece <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
    5ea8:	69bb      	ldr	r3, [r7, #24]
    5eaa:	7c9a      	ldrb	r2, [r3, #18]
    5eac:	2101      	movs	r1, #1
    5eae:	438a      	bics	r2, r1
    5eb0:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    5eb2:	69bb      	ldr	r3, [r7, #24]
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	2b00      	cmp	r3, #0
    5eb8:	d007      	beq.n	5eca <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5eba:	69bb      	ldr	r3, [r7, #24]
    5ebc:	681b      	ldr	r3, [r3, #0]
    5ebe:	220f      	movs	r2, #15
    5ec0:	18ba      	adds	r2, r7, r2
    5ec2:	7812      	ldrb	r2, [r2, #0]
    5ec4:	2000      	movs	r0, #0
    5ec6:	2100      	movs	r1, #0
    5ec8:	4798      	blx	r3
			}
			return true;
    5eca:	2301      	movs	r3, #1
    5ecc:	e08b      	b.n	5fe6 <udd_ep_run+0x2c2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    5ece:	69bb      	ldr	r3, [r7, #24]
    5ed0:	685a      	ldr	r2, [r3, #4]
    5ed2:	231e      	movs	r3, #30
    5ed4:	18fb      	adds	r3, r7, r3
    5ed6:	881c      	ldrh	r4, [r3, #0]
    5ed8:	494c      	ldr	r1, [pc, #304]	; (600c <udd_ep_run+0x2e8>)
    5eda:	231d      	movs	r3, #29
    5edc:	18fb      	adds	r3, r7, r3
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	1c08      	adds	r0, r1, #0
    5ee2:	1c19      	adds	r1, r3, #0
    5ee4:	1c23      	adds	r3, r4, #0
    5ee6:	4c4a      	ldr	r4, [pc, #296]	; (6010 <udd_ep_run+0x2ec>)
    5ee8:	47a0      	blx	r4
    5eea:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    5eec:	425a      	negs	r2, r3
    5eee:	4153      	adcs	r3, r2
    5ef0:	b2db      	uxtb	r3, r3
    5ef2:	e078      	b.n	5fe6 <udd_ep_run+0x2c2>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    5ef4:	69bb      	ldr	r3, [r7, #24]
    5ef6:	689b      	ldr	r3, [r3, #8]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d062      	beq.n	5fc2 <udd_ep_run+0x29e>
			next_trans = ptr_job->buf_size;
    5efc:	69bb      	ldr	r3, [r7, #24]
    5efe:	689a      	ldr	r2, [r3, #8]
    5f00:	231e      	movs	r3, #30
    5f02:	18fb      	adds	r3, r7, r3
    5f04:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5f06:	231e      	movs	r3, #30
    5f08:	18fb      	adds	r3, r7, r3
    5f0a:	881b      	ldrh	r3, [r3, #0]
    5f0c:	4a3c      	ldr	r2, [pc, #240]	; (6000 <udd_ep_run+0x2dc>)
    5f0e:	4293      	cmp	r3, r2
    5f10:	d90e      	bls.n	5f30 <udd_ep_run+0x20c>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5f12:	69bb      	ldr	r3, [r7, #24]
    5f14:	8a1b      	ldrh	r3, [r3, #16]
    5f16:	1c19      	adds	r1, r3, #0
    5f18:	4a39      	ldr	r2, [pc, #228]	; (6000 <udd_ep_run+0x2dc>)
    5f1a:	4b3a      	ldr	r3, [pc, #232]	; (6004 <udd_ep_run+0x2e0>)
    5f1c:	1c10      	adds	r0, r2, #0
    5f1e:	4798      	blx	r3
    5f20:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5f22:	b29a      	uxth	r2, r3
    5f24:	231e      	movs	r3, #30
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	4935      	ldr	r1, [pc, #212]	; (6000 <udd_ep_run+0x2dc>)
    5f2a:	1a8a      	subs	r2, r1, r2
    5f2c:	801a      	strh	r2, [r3, #0]
    5f2e:	e011      	b.n	5f54 <udd_ep_run+0x230>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    5f30:	69bb      	ldr	r3, [r7, #24]
    5f32:	8a1a      	ldrh	r2, [r3, #16]
    5f34:	231e      	movs	r3, #30
    5f36:	18fb      	adds	r3, r7, r3
    5f38:	8819      	ldrh	r1, [r3, #0]
    5f3a:	4b33      	ldr	r3, [pc, #204]	; (6008 <udd_ep_run+0x2e4>)
    5f3c:	1c08      	adds	r0, r1, #0
    5f3e:	1c11      	adds	r1, r2, #0
    5f40:	4798      	blx	r3
    5f42:	1c0b      	adds	r3, r1, #0
    5f44:	b29a      	uxth	r2, r3
    5f46:	231e      	movs	r3, #30
    5f48:	18fb      	adds	r3, r7, r3
    5f4a:	211e      	movs	r1, #30
    5f4c:	1879      	adds	r1, r7, r1
    5f4e:	8809      	ldrh	r1, [r1, #0]
    5f50:	1a8a      	subs	r2, r1, r2
    5f52:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    5f54:	69bb      	ldr	r3, [r7, #24]
    5f56:	8a1b      	ldrh	r3, [r3, #16]
    5f58:	221e      	movs	r2, #30
    5f5a:	18ba      	adds	r2, r7, r2
    5f5c:	8812      	ldrh	r2, [r2, #0]
    5f5e:	429a      	cmp	r2, r3
    5f60:	d21c      	bcs.n	5f9c <udd_ep_run+0x278>
				ptr_job->b_use_out_cache_buffer = true;
    5f62:	69bb      	ldr	r3, [r7, #24]
    5f64:	7c9a      	ldrb	r2, [r3, #18]
    5f66:	2104      	movs	r1, #4
    5f68:	430a      	orrs	r2, r1
    5f6a:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    5f6c:	231d      	movs	r3, #29
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	3b01      	subs	r3, #1
    5f74:	019a      	lsls	r2, r3, #6
    5f76:	4b27      	ldr	r3, [pc, #156]	; (6014 <udd_ep_run+0x2f0>)
    5f78:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    5f7a:	69bb      	ldr	r3, [r7, #24]
    5f7c:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5f7e:	1c1c      	adds	r4, r3, #0
    5f80:	4922      	ldr	r1, [pc, #136]	; (600c <udd_ep_run+0x2e8>)
    5f82:	231d      	movs	r3, #29
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	1c08      	adds	r0, r1, #0
    5f8a:	1c19      	adds	r1, r3, #0
    5f8c:	1c23      	adds	r3, r4, #0
    5f8e:	4c22      	ldr	r4, [pc, #136]	; (6018 <udd_ep_run+0x2f4>)
    5f90:	47a0      	blx	r4
    5f92:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    5f94:	425a      	negs	r2, r3
    5f96:	4153      	adcs	r3, r2
    5f98:	b2db      	uxtb	r3, r3
    5f9a:	e024      	b.n	5fe6 <udd_ep_run+0x2c2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5f9c:	69bb      	ldr	r3, [r7, #24]
    5f9e:	685a      	ldr	r2, [r3, #4]
    5fa0:	231e      	movs	r3, #30
    5fa2:	18fb      	adds	r3, r7, r3
    5fa4:	881c      	ldrh	r4, [r3, #0]
    5fa6:	4919      	ldr	r1, [pc, #100]	; (600c <udd_ep_run+0x2e8>)
    5fa8:	231d      	movs	r3, #29
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	1c08      	adds	r0, r1, #0
    5fb0:	1c19      	adds	r1, r3, #0
    5fb2:	1c23      	adds	r3, r4, #0
    5fb4:	4c18      	ldr	r4, [pc, #96]	; (6018 <udd_ep_run+0x2f4>)
    5fb6:	47a0      	blx	r4
    5fb8:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    5fba:	425a      	negs	r2, r3
    5fbc:	4153      	adcs	r3, r2
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	e011      	b.n	5fe6 <udd_ep_run+0x2c2>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    5fc2:	69bb      	ldr	r3, [r7, #24]
    5fc4:	7c9a      	ldrb	r2, [r3, #18]
    5fc6:	2101      	movs	r1, #1
    5fc8:	438a      	bics	r2, r1
    5fca:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    5fcc:	69bb      	ldr	r3, [r7, #24]
    5fce:	681b      	ldr	r3, [r3, #0]
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d007      	beq.n	5fe4 <udd_ep_run+0x2c0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5fd4:	69bb      	ldr	r3, [r7, #24]
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	220f      	movs	r2, #15
    5fda:	18ba      	adds	r2, r7, r2
    5fdc:	7812      	ldrb	r2, [r2, #0]
    5fde:	2000      	movs	r0, #0
    5fe0:	2100      	movs	r1, #0
    5fe2:	4798      	blx	r3
			}
			return true;
    5fe4:	2301      	movs	r3, #1
		}
	}
}
    5fe6:	1c18      	adds	r0, r3, #0
    5fe8:	46bd      	mov	sp, r7
    5fea:	b009      	add	sp, #36	; 0x24
    5fec:	bd90      	pop	{r4, r7, pc}
    5fee:	46c0      	nop			; (mov r8, r8)
    5ff0:	00005bf5 	.word	0x00005bf5
    5ff4:	0000552d 	.word	0x0000552d
    5ff8:	000051b1 	.word	0x000051b1
    5ffc:	000051f9 	.word	0x000051f9
    6000:	00001fff 	.word	0x00001fff
    6004:	00008d7d 	.word	0x00008d7d
    6008:	00008b9d 	.word	0x00008b9d
    600c:	2000033c 	.word	0x2000033c
    6010:	00007c05 	.word	0x00007c05
    6014:	200002fc 	.word	0x200002fc
    6018:	00007cbd 	.word	0x00007cbd

0000601c <udd_set_address>:

void udd_set_address(uint8_t address)
{
    601c:	b580      	push	{r7, lr}
    601e:	b082      	sub	sp, #8
    6020:	af00      	add	r7, sp, #0
    6022:	1c02      	adds	r2, r0, #0
    6024:	1dfb      	adds	r3, r7, #7
    6026:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    6028:	4a04      	ldr	r2, [pc, #16]	; (603c <udd_set_address+0x20>)
    602a:	1dfb      	adds	r3, r7, #7
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	1c10      	adds	r0, r2, #0
    6030:	1c19      	adds	r1, r3, #0
    6032:	4b03      	ldr	r3, [pc, #12]	; (6040 <udd_set_address+0x24>)
    6034:	4798      	blx	r3
}
    6036:	46bd      	mov	sp, r7
    6038:	b002      	add	sp, #8
    603a:	bd80      	pop	{r7, pc}
    603c:	2000033c 	.word	0x2000033c
    6040:	000052ed 	.word	0x000052ed

00006044 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    6044:	b580      	push	{r7, lr}
    6046:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    6048:	4b03      	ldr	r3, [pc, #12]	; (6058 <udd_getaddress+0x14>)
    604a:	1c18      	adds	r0, r3, #0
    604c:	4b03      	ldr	r3, [pc, #12]	; (605c <udd_getaddress+0x18>)
    604e:	4798      	blx	r3
    6050:	1c03      	adds	r3, r0, #0
}
    6052:	1c18      	adds	r0, r3, #0
    6054:	46bd      	mov	sp, r7
    6056:	bd80      	pop	{r7, pc}
    6058:	2000033c 	.word	0x2000033c
    605c:	000052d1 	.word	0x000052d1

00006060 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    6060:	b580      	push	{r7, lr}
    6062:	b082      	sub	sp, #8
    6064:	af00      	add	r7, sp, #0
    6066:	6078      	str	r0, [r7, #4]
    6068:	1c0a      	adds	r2, r1, #0
    606a:	1cbb      	adds	r3, r7, #2
    606c:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    606e:	4b05      	ldr	r3, [pc, #20]	; (6084 <udd_set_setup_payload+0x24>)
    6070:	687a      	ldr	r2, [r7, #4]
    6072:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    6074:	4b03      	ldr	r3, [pc, #12]	; (6084 <udd_set_setup_payload+0x24>)
    6076:	1cba      	adds	r2, r7, #2
    6078:	8812      	ldrh	r2, [r2, #0]
    607a:	819a      	strh	r2, [r3, #12]
}
    607c:	46bd      	mov	sp, r7
    607e:	b002      	add	sp, #8
    6080:	bd80      	pop	{r7, pc}
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	200004a4 	.word	0x200004a4

00006088 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    6088:	b580      	push	{r7, lr}
    608a:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    608c:	4b16      	ldr	r3, [pc, #88]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    608e:	781a      	ldrb	r2, [r3, #0]
    6090:	4b16      	ldr	r3, [pc, #88]	; (60ec <udd_ctrl_fetch_ram+0x64>)
    6092:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    6094:	4b14      	ldr	r3, [pc, #80]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    6096:	785a      	ldrb	r2, [r3, #1]
    6098:	4b14      	ldr	r3, [pc, #80]	; (60ec <udd_ctrl_fetch_ram+0x64>)
    609a:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    609c:	4b12      	ldr	r3, [pc, #72]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    609e:	78db      	ldrb	r3, [r3, #3]
    60a0:	b29b      	uxth	r3, r3
    60a2:	021b      	lsls	r3, r3, #8
    60a4:	b29a      	uxth	r2, r3
    60a6:	4b10      	ldr	r3, [pc, #64]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    60a8:	789b      	ldrb	r3, [r3, #2]
    60aa:	b29b      	uxth	r3, r3
    60ac:	18d3      	adds	r3, r2, r3
    60ae:	b29a      	uxth	r2, r3
    60b0:	4b0e      	ldr	r3, [pc, #56]	; (60ec <udd_ctrl_fetch_ram+0x64>)
    60b2:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    60b4:	4b0c      	ldr	r3, [pc, #48]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    60b6:	795b      	ldrb	r3, [r3, #5]
    60b8:	b29b      	uxth	r3, r3
    60ba:	021b      	lsls	r3, r3, #8
    60bc:	b29a      	uxth	r2, r3
    60be:	4b0a      	ldr	r3, [pc, #40]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    60c0:	791b      	ldrb	r3, [r3, #4]
    60c2:	b29b      	uxth	r3, r3
    60c4:	18d3      	adds	r3, r2, r3
    60c6:	b29a      	uxth	r2, r3
    60c8:	4b08      	ldr	r3, [pc, #32]	; (60ec <udd_ctrl_fetch_ram+0x64>)
    60ca:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    60cc:	4b06      	ldr	r3, [pc, #24]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    60ce:	79db      	ldrb	r3, [r3, #7]
    60d0:	b29b      	uxth	r3, r3
    60d2:	021b      	lsls	r3, r3, #8
    60d4:	b29a      	uxth	r2, r3
    60d6:	4b04      	ldr	r3, [pc, #16]	; (60e8 <udd_ctrl_fetch_ram+0x60>)
    60d8:	799b      	ldrb	r3, [r3, #6]
    60da:	b29b      	uxth	r3, r3
    60dc:	18d3      	adds	r3, r2, r3
    60de:	b29a      	uxth	r2, r3
    60e0:	4b02      	ldr	r3, [pc, #8]	; (60ec <udd_ctrl_fetch_ram+0x64>)
    60e2:	80da      	strh	r2, [r3, #6]
}
    60e4:	46bd      	mov	sp, r7
    60e6:	bd80      	pop	{r7, pc}
    60e8:	200004bc 	.word	0x200004bc
    60ec:	200004a4 	.word	0x200004a4

000060f0 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    60f0:	b598      	push	{r3, r4, r7, lr}
    60f2:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    60f4:	4b09      	ldr	r3, [pc, #36]	; (611c <udd_ctrl_send_zlp_in+0x2c>)
    60f6:	2203      	movs	r2, #3
    60f8:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    60fa:	4a09      	ldr	r2, [pc, #36]	; (6120 <udd_ctrl_send_zlp_in+0x30>)
    60fc:	4b09      	ldr	r3, [pc, #36]	; (6124 <udd_ctrl_send_zlp_in+0x34>)
    60fe:	1c10      	adds	r0, r2, #0
    6100:	1c19      	adds	r1, r3, #0
    6102:	4b09      	ldr	r3, [pc, #36]	; (6128 <udd_ctrl_send_zlp_in+0x38>)
    6104:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    6106:	4b09      	ldr	r3, [pc, #36]	; (612c <udd_ctrl_send_zlp_in+0x3c>)
    6108:	689b      	ldr	r3, [r3, #8]
    610a:	4a05      	ldr	r2, [pc, #20]	; (6120 <udd_ctrl_send_zlp_in+0x30>)
    610c:	1c10      	adds	r0, r2, #0
    610e:	2100      	movs	r1, #0
    6110:	1c1a      	adds	r2, r3, #0
    6112:	2300      	movs	r3, #0
    6114:	4c06      	ldr	r4, [pc, #24]	; (6130 <udd_ctrl_send_zlp_in+0x40>)
    6116:	47a0      	blx	r4
}
    6118:	46bd      	mov	sp, r7
    611a:	bd98      	pop	{r3, r4, r7, pc}
    611c:	200001a8 	.word	0x200001a8
    6120:	2000033c 	.word	0x2000033c
    6124:	200004bc 	.word	0x200004bc
    6128:	00007d69 	.word	0x00007d69
    612c:	200004a4 	.word	0x200004a4
    6130:	00007c05 	.word	0x00007c05

00006134 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    6134:	b590      	push	{r4, r7, lr}
    6136:	b083      	sub	sp, #12
    6138:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    613a:	4b30      	ldr	r3, [pc, #192]	; (61fc <udd_ctrl_in_sent+0xc8>)
    613c:	8999      	ldrh	r1, [r3, #12]
    613e:	4b30      	ldr	r3, [pc, #192]	; (6200 <udd_ctrl_in_sent+0xcc>)
    6140:	881a      	ldrh	r2, [r3, #0]
    6142:	1dbb      	adds	r3, r7, #6
    6144:	1a8a      	subs	r2, r1, r2
    6146:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    6148:	1dbb      	adds	r3, r7, #6
    614a:	881b      	ldrh	r3, [r3, #0]
    614c:	2b00      	cmp	r3, #0
    614e:	d130      	bne.n	61b2 <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6150:	4b2c      	ldr	r3, [pc, #176]	; (6204 <udd_ctrl_in_sent+0xd0>)
    6152:	881a      	ldrh	r2, [r3, #0]
    6154:	4b2a      	ldr	r3, [pc, #168]	; (6200 <udd_ctrl_in_sent+0xcc>)
    6156:	881b      	ldrh	r3, [r3, #0]
    6158:	18d3      	adds	r3, r2, r3
    615a:	b29a      	uxth	r2, r3
    615c:	4b29      	ldr	r3, [pc, #164]	; (6204 <udd_ctrl_in_sent+0xd0>)
    615e:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    6160:	4b26      	ldr	r3, [pc, #152]	; (61fc <udd_ctrl_in_sent+0xc8>)
    6162:	88da      	ldrh	r2, [r3, #6]
    6164:	4b27      	ldr	r3, [pc, #156]	; (6204 <udd_ctrl_in_sent+0xd0>)
    6166:	881b      	ldrh	r3, [r3, #0]
    6168:	429a      	cmp	r2, r3
    616a:	d003      	beq.n	6174 <udd_ctrl_in_sent+0x40>
    616c:	4b26      	ldr	r3, [pc, #152]	; (6208 <udd_ctrl_in_sent+0xd4>)
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	2b00      	cmp	r3, #0
    6172:	d009      	beq.n	6188 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    6174:	4b25      	ldr	r3, [pc, #148]	; (620c <udd_ctrl_in_sent+0xd8>)
    6176:	2204      	movs	r2, #4
    6178:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    617a:	4a25      	ldr	r2, [pc, #148]	; (6210 <udd_ctrl_in_sent+0xdc>)
    617c:	4b25      	ldr	r3, [pc, #148]	; (6214 <udd_ctrl_in_sent+0xe0>)
    617e:	1c10      	adds	r0, r2, #0
    6180:	1c19      	adds	r1, r3, #0
    6182:	4b25      	ldr	r3, [pc, #148]	; (6218 <udd_ctrl_in_sent+0xe4>)
    6184:	4798      	blx	r3
			return;
    6186:	e036      	b.n	61f6 <udd_ctrl_in_sent+0xc2>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    6188:	4b1c      	ldr	r3, [pc, #112]	; (61fc <udd_ctrl_in_sent+0xc8>)
    618a:	695b      	ldr	r3, [r3, #20]
    618c:	2b00      	cmp	r3, #0
    618e:	d010      	beq.n	61b2 <udd_ctrl_in_sent+0x7e>
    6190:	4b1a      	ldr	r3, [pc, #104]	; (61fc <udd_ctrl_in_sent+0xc8>)
    6192:	695b      	ldr	r3, [r3, #20]
    6194:	4798      	blx	r3
    6196:	1c03      	adds	r3, r0, #0
    6198:	1c1a      	adds	r2, r3, #0
    619a:	2301      	movs	r3, #1
    619c:	4053      	eors	r3, r2
    619e:	b2db      	uxtb	r3, r3
    61a0:	2b00      	cmp	r3, #0
    61a2:	d106      	bne.n	61b2 <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    61a4:	4b16      	ldr	r3, [pc, #88]	; (6200 <udd_ctrl_in_sent+0xcc>)
    61a6:	2200      	movs	r2, #0
    61a8:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    61aa:	1dbb      	adds	r3, r7, #6
    61ac:	4a13      	ldr	r2, [pc, #76]	; (61fc <udd_ctrl_in_sent+0xc8>)
    61ae:	8992      	ldrh	r2, [r2, #12]
    61b0:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    61b2:	1dbb      	adds	r3, r7, #6
    61b4:	881b      	ldrh	r3, [r3, #0]
    61b6:	2b07      	cmp	r3, #7
    61b8:	d906      	bls.n	61c8 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    61ba:	1dbb      	adds	r3, r7, #6
    61bc:	2208      	movs	r2, #8
    61be:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    61c0:	4b11      	ldr	r3, [pc, #68]	; (6208 <udd_ctrl_in_sent+0xd4>)
    61c2:	2200      	movs	r2, #0
    61c4:	701a      	strb	r2, [r3, #0]
    61c6:	e002      	b.n	61ce <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    61c8:	4b0f      	ldr	r3, [pc, #60]	; (6208 <udd_ctrl_in_sent+0xd4>)
    61ca:	2201      	movs	r2, #1
    61cc:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    61ce:	4b0b      	ldr	r3, [pc, #44]	; (61fc <udd_ctrl_in_sent+0xc8>)
    61d0:	689b      	ldr	r3, [r3, #8]
    61d2:	4a0b      	ldr	r2, [pc, #44]	; (6200 <udd_ctrl_in_sent+0xcc>)
    61d4:	8812      	ldrh	r2, [r2, #0]
    61d6:	189a      	adds	r2, r3, r2
    61d8:	1dbb      	adds	r3, r7, #6
    61da:	881b      	ldrh	r3, [r3, #0]
    61dc:	490c      	ldr	r1, [pc, #48]	; (6210 <udd_ctrl_in_sent+0xdc>)
    61de:	1c08      	adds	r0, r1, #0
    61e0:	2100      	movs	r1, #0
    61e2:	4c0e      	ldr	r4, [pc, #56]	; (621c <udd_ctrl_in_sent+0xe8>)
    61e4:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    61e6:	4b06      	ldr	r3, [pc, #24]	; (6200 <udd_ctrl_in_sent+0xcc>)
    61e8:	881a      	ldrh	r2, [r3, #0]
    61ea:	1dbb      	adds	r3, r7, #6
    61ec:	881b      	ldrh	r3, [r3, #0]
    61ee:	18d3      	adds	r3, r2, r3
    61f0:	b29a      	uxth	r2, r3
    61f2:	4b03      	ldr	r3, [pc, #12]	; (6200 <udd_ctrl_in_sent+0xcc>)
    61f4:	801a      	strh	r2, [r3, #0]
}
    61f6:	46bd      	mov	sp, r7
    61f8:	b003      	add	sp, #12
    61fa:	bd90      	pop	{r4, r7, pc}
    61fc:	200004a4 	.word	0x200004a4
    6200:	200001ac 	.word	0x200001ac
    6204:	200001aa 	.word	0x200001aa
    6208:	200001d9 	.word	0x200001d9
    620c:	200001a8 	.word	0x200001a8
    6210:	2000033c 	.word	0x2000033c
    6214:	200004bc 	.word	0x200004bc
    6218:	00007d69 	.word	0x00007d69
    621c:	00007c05 	.word	0x00007c05

00006220 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    6220:	b590      	push	{r4, r7, lr}
    6222:	b085      	sub	sp, #20
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    622c:	230e      	movs	r3, #14
    622e:	18fb      	adds	r3, r7, r3
    6230:	68ba      	ldr	r2, [r7, #8]
    6232:	8812      	ldrh	r2, [r2, #0]
    6234:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6236:	4b47      	ldr	r3, [pc, #284]	; (6354 <udd_ctrl_out_received+0x134>)
    6238:	899b      	ldrh	r3, [r3, #12]
    623a:	1c1a      	adds	r2, r3, #0
    623c:	4b46      	ldr	r3, [pc, #280]	; (6358 <udd_ctrl_out_received+0x138>)
    623e:	881b      	ldrh	r3, [r3, #0]
    6240:	1c19      	adds	r1, r3, #0
    6242:	230e      	movs	r3, #14
    6244:	18fb      	adds	r3, r7, r3
    6246:	881b      	ldrh	r3, [r3, #0]
    6248:	18cb      	adds	r3, r1, r3
    624a:	429a      	cmp	r2, r3
    624c:	da07      	bge.n	625e <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    624e:	4b41      	ldr	r3, [pc, #260]	; (6354 <udd_ctrl_out_received+0x134>)
    6250:	8999      	ldrh	r1, [r3, #12]
    6252:	4b41      	ldr	r3, [pc, #260]	; (6358 <udd_ctrl_out_received+0x138>)
    6254:	881a      	ldrh	r2, [r3, #0]
    6256:	230e      	movs	r3, #14
    6258:	18fb      	adds	r3, r7, r3
    625a:	1a8a      	subs	r2, r1, r2
    625c:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    625e:	4b3d      	ldr	r3, [pc, #244]	; (6354 <udd_ctrl_out_received+0x134>)
    6260:	689b      	ldr	r3, [r3, #8]
    6262:	4a3d      	ldr	r2, [pc, #244]	; (6358 <udd_ctrl_out_received+0x138>)
    6264:	8812      	ldrh	r2, [r2, #0]
    6266:	1899      	adds	r1, r3, r2
    6268:	230e      	movs	r3, #14
    626a:	18fb      	adds	r3, r7, r3
    626c:	881b      	ldrh	r3, [r3, #0]
    626e:	4a3b      	ldr	r2, [pc, #236]	; (635c <udd_ctrl_out_received+0x13c>)
    6270:	1c08      	adds	r0, r1, #0
    6272:	1c11      	adds	r1, r2, #0
    6274:	1c1a      	adds	r2, r3, #0
    6276:	4b3a      	ldr	r3, [pc, #232]	; (6360 <udd_ctrl_out_received+0x140>)
    6278:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    627a:	4b37      	ldr	r3, [pc, #220]	; (6358 <udd_ctrl_out_received+0x138>)
    627c:	881a      	ldrh	r2, [r3, #0]
    627e:	230e      	movs	r3, #14
    6280:	18fb      	adds	r3, r7, r3
    6282:	881b      	ldrh	r3, [r3, #0]
    6284:	18d3      	adds	r3, r2, r3
    6286:	b29a      	uxth	r2, r3
    6288:	4b33      	ldr	r3, [pc, #204]	; (6358 <udd_ctrl_out_received+0x138>)
    628a:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    628c:	230e      	movs	r3, #14
    628e:	18fb      	adds	r3, r7, r3
    6290:	881b      	ldrh	r3, [r3, #0]
    6292:	2b08      	cmp	r3, #8
    6294:	d10a      	bne.n	62ac <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    6296:	4b2f      	ldr	r3, [pc, #188]	; (6354 <udd_ctrl_out_received+0x134>)
    6298:	88db      	ldrh	r3, [r3, #6]
    629a:	1c1a      	adds	r2, r3, #0
    629c:	4b31      	ldr	r3, [pc, #196]	; (6364 <udd_ctrl_out_received+0x144>)
    629e:	881b      	ldrh	r3, [r3, #0]
    62a0:	1c19      	adds	r1, r3, #0
    62a2:	4b2d      	ldr	r3, [pc, #180]	; (6358 <udd_ctrl_out_received+0x138>)
    62a4:	881b      	ldrh	r3, [r3, #0]
    62a6:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    62a8:	429a      	cmp	r2, r3
    62aa:	dc1b      	bgt.n	62e4 <udd_ctrl_out_received+0xc4>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    62ac:	4b2a      	ldr	r3, [pc, #168]	; (6358 <udd_ctrl_out_received+0x138>)
    62ae:	881a      	ldrh	r2, [r3, #0]
    62b0:	4b28      	ldr	r3, [pc, #160]	; (6354 <udd_ctrl_out_received+0x134>)
    62b2:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    62b4:	4b27      	ldr	r3, [pc, #156]	; (6354 <udd_ctrl_out_received+0x134>)
    62b6:	695b      	ldr	r3, [r3, #20]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d010      	beq.n	62de <udd_ctrl_out_received+0xbe>
			if (!udd_g_ctrlreq.over_under_run()) {
    62bc:	4b25      	ldr	r3, [pc, #148]	; (6354 <udd_ctrl_out_received+0x134>)
    62be:	695b      	ldr	r3, [r3, #20]
    62c0:	4798      	blx	r3
    62c2:	1c03      	adds	r3, r0, #0
    62c4:	1c1a      	adds	r2, r3, #0
    62c6:	2301      	movs	r3, #1
    62c8:	4053      	eors	r3, r2
    62ca:	b2db      	uxtb	r3, r3
    62cc:	2b00      	cmp	r3, #0
    62ce:	d006      	beq.n	62de <udd_ctrl_out_received+0xbe>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    62d0:	4b25      	ldr	r3, [pc, #148]	; (6368 <udd_ctrl_out_received+0x148>)
    62d2:	2205      	movs	r2, #5
    62d4:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    62d6:	2000      	movs	r0, #0
    62d8:	4b24      	ldr	r3, [pc, #144]	; (636c <udd_ctrl_out_received+0x14c>)
    62da:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    62dc:	e037      	b.n	634e <udd_ctrl_out_received+0x12e>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    62de:	4b24      	ldr	r3, [pc, #144]	; (6370 <udd_ctrl_out_received+0x150>)
    62e0:	4798      	blx	r3
		return;
    62e2:	e034      	b.n	634e <udd_ctrl_out_received+0x12e>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    62e4:	4b1b      	ldr	r3, [pc, #108]	; (6354 <udd_ctrl_out_received+0x134>)
    62e6:	899a      	ldrh	r2, [r3, #12]
    62e8:	4b1b      	ldr	r3, [pc, #108]	; (6358 <udd_ctrl_out_received+0x138>)
    62ea:	881b      	ldrh	r3, [r3, #0]
    62ec:	429a      	cmp	r2, r3
    62ee:	d126      	bne.n	633e <udd_ctrl_out_received+0x11e>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    62f0:	4b18      	ldr	r3, [pc, #96]	; (6354 <udd_ctrl_out_received+0x134>)
    62f2:	695b      	ldr	r3, [r3, #20]
    62f4:	2b00      	cmp	r3, #0
    62f6:	d106      	bne.n	6306 <udd_ctrl_out_received+0xe6>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    62f8:	4b1b      	ldr	r3, [pc, #108]	; (6368 <udd_ctrl_out_received+0x148>)
    62fa:	2205      	movs	r2, #5
    62fc:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    62fe:	2000      	movs	r0, #0
    6300:	4b1a      	ldr	r3, [pc, #104]	; (636c <udd_ctrl_out_received+0x14c>)
    6302:	4798      	blx	r3
			return;
    6304:	e023      	b.n	634e <udd_ctrl_out_received+0x12e>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6306:	4b13      	ldr	r3, [pc, #76]	; (6354 <udd_ctrl_out_received+0x134>)
    6308:	695b      	ldr	r3, [r3, #20]
    630a:	4798      	blx	r3
    630c:	1c03      	adds	r3, r0, #0
    630e:	1c1a      	adds	r2, r3, #0
    6310:	2301      	movs	r3, #1
    6312:	4053      	eors	r3, r2
    6314:	b2db      	uxtb	r3, r3
    6316:	2b00      	cmp	r3, #0
    6318:	d006      	beq.n	6328 <udd_ctrl_out_received+0x108>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    631a:	4b13      	ldr	r3, [pc, #76]	; (6368 <udd_ctrl_out_received+0x148>)
    631c:	2205      	movs	r2, #5
    631e:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    6320:	2000      	movs	r0, #0
    6322:	4b12      	ldr	r3, [pc, #72]	; (636c <udd_ctrl_out_received+0x14c>)
    6324:	4798      	blx	r3
			return;
    6326:	e012      	b.n	634e <udd_ctrl_out_received+0x12e>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6328:	4b0e      	ldr	r3, [pc, #56]	; (6364 <udd_ctrl_out_received+0x144>)
    632a:	881a      	ldrh	r2, [r3, #0]
    632c:	4b0a      	ldr	r3, [pc, #40]	; (6358 <udd_ctrl_out_received+0x138>)
    632e:	881b      	ldrh	r3, [r3, #0]
    6330:	18d3      	adds	r3, r2, r3
    6332:	b29a      	uxth	r2, r3
    6334:	4b0b      	ldr	r3, [pc, #44]	; (6364 <udd_ctrl_out_received+0x144>)
    6336:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    6338:	4b07      	ldr	r3, [pc, #28]	; (6358 <udd_ctrl_out_received+0x138>)
    633a:	2200      	movs	r2, #0
    633c:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    633e:	4a0d      	ldr	r2, [pc, #52]	; (6374 <udd_ctrl_out_received+0x154>)
    6340:	4b06      	ldr	r3, [pc, #24]	; (635c <udd_ctrl_out_received+0x13c>)
    6342:	1c10      	adds	r0, r2, #0
    6344:	2100      	movs	r1, #0
    6346:	1c1a      	adds	r2, r3, #0
    6348:	2308      	movs	r3, #8
    634a:	4c0b      	ldr	r4, [pc, #44]	; (6378 <udd_ctrl_out_received+0x158>)
    634c:	47a0      	blx	r4
}
    634e:	46bd      	mov	sp, r7
    6350:	b005      	add	sp, #20
    6352:	bd90      	pop	{r4, r7, pc}
    6354:	200004a4 	.word	0x200004a4
    6358:	200001ac 	.word	0x200001ac
    635c:	200004bc 	.word	0x200004bc
    6360:	00008e21 	.word	0x00008e21
    6364:	200001aa 	.word	0x200001aa
    6368:	200001a8 	.word	0x200001a8
    636c:	00005c21 	.word	0x00005c21
    6370:	000060f1 	.word	0x000060f1
    6374:	2000033c 	.word	0x2000033c
    6378:	00007cbd 	.word	0x00007cbd

0000637c <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    637c:	b590      	push	{r4, r7, lr}
    637e:	b085      	sub	sp, #20
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6386:	683b      	ldr	r3, [r7, #0]
    6388:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    638a:	4b2c      	ldr	r3, [pc, #176]	; (643c <_usb_ep0_on_setup+0xc0>)
    638c:	781b      	ldrb	r3, [r3, #0]
    638e:	2b00      	cmp	r3, #0
    6390:	d009      	beq.n	63a6 <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    6392:	4b2b      	ldr	r3, [pc, #172]	; (6440 <_usb_ep0_on_setup+0xc4>)
    6394:	691b      	ldr	r3, [r3, #16]
    6396:	2b00      	cmp	r3, #0
    6398:	d002      	beq.n	63a0 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    639a:	4b29      	ldr	r3, [pc, #164]	; (6440 <_usb_ep0_on_setup+0xc4>)
    639c:	691b      	ldr	r3, [r3, #16]
    639e:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    63a0:	4b26      	ldr	r3, [pc, #152]	; (643c <_usb_ep0_on_setup+0xc0>)
    63a2:	2200      	movs	r2, #0
    63a4:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    63a6:	68fb      	ldr	r3, [r7, #12]
    63a8:	881b      	ldrh	r3, [r3, #0]
    63aa:	2b08      	cmp	r3, #8
    63ac:	d002      	beq.n	63b4 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    63ae:	4b25      	ldr	r3, [pc, #148]	; (6444 <_usb_ep0_on_setup+0xc8>)
    63b0:	4798      	blx	r3
		return;
    63b2:	e03f      	b.n	6434 <_usb_ep0_on_setup+0xb8>
	} else {
		udd_ctrl_fetch_ram();
    63b4:	4b24      	ldr	r3, [pc, #144]	; (6448 <_usb_ep0_on_setup+0xcc>)
    63b6:	4798      	blx	r3
		if (false == udc_process_setup()) {
    63b8:	4b24      	ldr	r3, [pc, #144]	; (644c <_usb_ep0_on_setup+0xd0>)
    63ba:	4798      	blx	r3
    63bc:	1c03      	adds	r3, r0, #0
    63be:	1c1a      	adds	r2, r3, #0
    63c0:	2301      	movs	r3, #1
    63c2:	4053      	eors	r3, r2
    63c4:	b2db      	uxtb	r3, r3
    63c6:	2b00      	cmp	r3, #0
    63c8:	d002      	beq.n	63d0 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    63ca:	4b1e      	ldr	r3, [pc, #120]	; (6444 <_usb_ep0_on_setup+0xc8>)
    63cc:	4798      	blx	r3
			return;
    63ce:	e031      	b.n	6434 <_usb_ep0_on_setup+0xb8>
		} else if (Udd_setup_is_in()) {
    63d0:	4b1b      	ldr	r3, [pc, #108]	; (6440 <_usb_ep0_on_setup+0xc4>)
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	b2db      	uxtb	r3, r3
    63d6:	b25b      	sxtb	r3, r3
    63d8:	2b00      	cmp	r3, #0
    63da:	da13      	bge.n	6404 <_usb_ep0_on_setup+0x88>
			udd_ctrl_prev_payload_nb_trans = 0;
    63dc:	4b1c      	ldr	r3, [pc, #112]	; (6450 <_usb_ep0_on_setup+0xd4>)
    63de:	2200      	movs	r2, #0
    63e0:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    63e2:	4b1c      	ldr	r3, [pc, #112]	; (6454 <_usb_ep0_on_setup+0xd8>)
    63e4:	2200      	movs	r2, #0
    63e6:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    63e8:	4b14      	ldr	r3, [pc, #80]	; (643c <_usb_ep0_on_setup+0xc0>)
    63ea:	2202      	movs	r2, #2
    63ec:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    63ee:	4a1a      	ldr	r2, [pc, #104]	; (6458 <_usb_ep0_on_setup+0xdc>)
    63f0:	4b1a      	ldr	r3, [pc, #104]	; (645c <_usb_ep0_on_setup+0xe0>)
    63f2:	1c10      	adds	r0, r2, #0
    63f4:	2100      	movs	r1, #0
    63f6:	1c1a      	adds	r2, r3, #0
    63f8:	2308      	movs	r3, #8
    63fa:	4c19      	ldr	r4, [pc, #100]	; (6460 <_usb_ep0_on_setup+0xe4>)
    63fc:	47a0      	blx	r4
			udd_ctrl_in_sent();
    63fe:	4b19      	ldr	r3, [pc, #100]	; (6464 <_usb_ep0_on_setup+0xe8>)
    6400:	4798      	blx	r3
    6402:	e017      	b.n	6434 <_usb_ep0_on_setup+0xb8>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    6404:	4b0e      	ldr	r3, [pc, #56]	; (6440 <_usb_ep0_on_setup+0xc4>)
    6406:	88db      	ldrh	r3, [r3, #6]
    6408:	2b00      	cmp	r3, #0
    640a:	d102      	bne.n	6412 <_usb_ep0_on_setup+0x96>
				udd_ctrl_send_zlp_in();
    640c:	4b16      	ldr	r3, [pc, #88]	; (6468 <_usb_ep0_on_setup+0xec>)
    640e:	4798      	blx	r3
				return;
    6410:	e010      	b.n	6434 <_usb_ep0_on_setup+0xb8>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    6412:	4b0f      	ldr	r3, [pc, #60]	; (6450 <_usb_ep0_on_setup+0xd4>)
    6414:	2200      	movs	r2, #0
    6416:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    6418:	4b0e      	ldr	r3, [pc, #56]	; (6454 <_usb_ep0_on_setup+0xd8>)
    641a:	2200      	movs	r2, #0
    641c:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    641e:	4b07      	ldr	r3, [pc, #28]	; (643c <_usb_ep0_on_setup+0xc0>)
    6420:	2201      	movs	r2, #1
    6422:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    6424:	4a0c      	ldr	r2, [pc, #48]	; (6458 <_usb_ep0_on_setup+0xdc>)
    6426:	4b0d      	ldr	r3, [pc, #52]	; (645c <_usb_ep0_on_setup+0xe0>)
    6428:	1c10      	adds	r0, r2, #0
    642a:	2100      	movs	r1, #0
    642c:	1c1a      	adds	r2, r3, #0
    642e:	2308      	movs	r3, #8
    6430:	4c0b      	ldr	r4, [pc, #44]	; (6460 <_usb_ep0_on_setup+0xe4>)
    6432:	47a0      	blx	r4
			}
		}
	}
}
    6434:	46bd      	mov	sp, r7
    6436:	b005      	add	sp, #20
    6438:	bd90      	pop	{r4, r7, pc}
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	200001a8 	.word	0x200001a8
    6440:	200004a4 	.word	0x200004a4
    6444:	00005cf1 	.word	0x00005cf1
    6448:	00006089 	.word	0x00006089
    644c:	00003b0d 	.word	0x00003b0d
    6450:	200001aa 	.word	0x200001aa
    6454:	200001ac 	.word	0x200001ac
    6458:	2000033c 	.word	0x2000033c
    645c:	200004bc 	.word	0x200004bc
    6460:	00007cbd 	.word	0x00007cbd
    6464:	00006135 	.word	0x00006135
    6468:	000060f1 	.word	0x000060f1

0000646c <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    646c:	b580      	push	{r7, lr}
    646e:	b084      	sub	sp, #16
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    6478:	4b0a      	ldr	r3, [pc, #40]	; (64a4 <udd_ctrl_underflow+0x38>)
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	2b01      	cmp	r3, #1
    647e:	d102      	bne.n	6486 <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    6480:	4b09      	ldr	r3, [pc, #36]	; (64a8 <udd_ctrl_underflow+0x3c>)
    6482:	4798      	blx	r3
    6484:	e00a      	b.n	649c <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6486:	4b07      	ldr	r3, [pc, #28]	; (64a4 <udd_ctrl_underflow+0x38>)
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	2b04      	cmp	r3, #4
    648c:	d106      	bne.n	649c <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    648e:	68fb      	ldr	r3, [r7, #12]
    6490:	799b      	ldrb	r3, [r3, #6]
    6492:	4a06      	ldr	r2, [pc, #24]	; (64ac <udd_ctrl_underflow+0x40>)
    6494:	1c10      	adds	r0, r2, #0
    6496:	1c19      	adds	r1, r3, #0
    6498:	4b05      	ldr	r3, [pc, #20]	; (64b0 <udd_ctrl_underflow+0x44>)
    649a:	4798      	blx	r3
	}
}
    649c:	46bd      	mov	sp, r7
    649e:	b004      	add	sp, #16
    64a0:	bd80      	pop	{r7, pc}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	200001a8 	.word	0x200001a8
    64a8:	000060f1 	.word	0x000060f1
    64ac:	2000033c 	.word	0x2000033c
    64b0:	00007a95 	.word	0x00007a95

000064b4 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    64b4:	b580      	push	{r7, lr}
    64b6:	b084      	sub	sp, #16
    64b8:	af00      	add	r7, sp, #0
    64ba:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    64c0:	4b0a      	ldr	r3, [pc, #40]	; (64ec <udd_ctrl_overflow+0x38>)
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	2b02      	cmp	r3, #2
    64c6:	d103      	bne.n	64d0 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    64c8:	4b08      	ldr	r3, [pc, #32]	; (64ec <udd_ctrl_overflow+0x38>)
    64ca:	2204      	movs	r2, #4
    64cc:	701a      	strb	r2, [r3, #0]
    64ce:	e00a      	b.n	64e6 <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    64d0:	4b06      	ldr	r3, [pc, #24]	; (64ec <udd_ctrl_overflow+0x38>)
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	2b03      	cmp	r3, #3
    64d6:	d106      	bne.n	64e6 <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    64d8:	68fb      	ldr	r3, [r7, #12]
    64da:	799b      	ldrb	r3, [r3, #6]
    64dc:	4a04      	ldr	r2, [pc, #16]	; (64f0 <udd_ctrl_overflow+0x3c>)
    64de:	1c10      	adds	r0, r2, #0
    64e0:	1c19      	adds	r1, r3, #0
    64e2:	4b04      	ldr	r3, [pc, #16]	; (64f4 <udd_ctrl_overflow+0x40>)
    64e4:	4798      	blx	r3
	}
}
    64e6:	46bd      	mov	sp, r7
    64e8:	b004      	add	sp, #16
    64ea:	bd80      	pop	{r7, pc}
    64ec:	200001a8 	.word	0x200001a8
    64f0:	2000033c 	.word	0x2000033c
    64f4:	00007a95 	.word	0x00007a95

000064f8 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	b084      	sub	sp, #16
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
    6500:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6502:	683b      	ldr	r3, [r7, #0]
    6504:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    6506:	68fb      	ldr	r3, [r7, #12]
    6508:	799b      	ldrb	r3, [r3, #6]
    650a:	b2db      	uxtb	r3, r3
    650c:	b25b      	sxtb	r3, r3
    650e:	2b00      	cmp	r3, #0
    6510:	da04      	bge.n	651c <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    6512:	683b      	ldr	r3, [r7, #0]
    6514:	1c18      	adds	r0, r3, #0
    6516:	4b05      	ldr	r3, [pc, #20]	; (652c <_usb_ep0_on_tansfer_fail+0x34>)
    6518:	4798      	blx	r3
    651a:	e003      	b.n	6524 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    651c:	683b      	ldr	r3, [r7, #0]
    651e:	1c18      	adds	r0, r3, #0
    6520:	4b03      	ldr	r3, [pc, #12]	; (6530 <_usb_ep0_on_tansfer_fail+0x38>)
    6522:	4798      	blx	r3
	}
}
    6524:	46bd      	mov	sp, r7
    6526:	b004      	add	sp, #16
    6528:	bd80      	pop	{r7, pc}
    652a:	46c0      	nop			; (mov r8, r8)
    652c:	0000646d 	.word	0x0000646d
    6530:	000064b5 	.word	0x000064b5

00006534 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    6534:	b580      	push	{r7, lr}
    6536:	b082      	sub	sp, #8
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    653c:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    653e:	4b0e      	ldr	r3, [pc, #56]	; (6578 <_usb_ep0_on_tansfer_ok+0x44>)
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	2b01      	cmp	r3, #1
    6544:	d104      	bne.n	6550 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    6546:	683b      	ldr	r3, [r7, #0]
    6548:	1c18      	adds	r0, r3, #0
    654a:	4b0c      	ldr	r3, [pc, #48]	; (657c <_usb_ep0_on_tansfer_ok+0x48>)
    654c:	4798      	blx	r3
    654e:	e010      	b.n	6572 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    6550:	4b09      	ldr	r3, [pc, #36]	; (6578 <_usb_ep0_on_tansfer_ok+0x44>)
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	2b02      	cmp	r3, #2
    6556:	d102      	bne.n	655e <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    6558:	4b09      	ldr	r3, [pc, #36]	; (6580 <_usb_ep0_on_tansfer_ok+0x4c>)
    655a:	4798      	blx	r3
    655c:	e009      	b.n	6572 <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    655e:	4b09      	ldr	r3, [pc, #36]	; (6584 <_usb_ep0_on_tansfer_ok+0x50>)
    6560:	691b      	ldr	r3, [r3, #16]
    6562:	2b00      	cmp	r3, #0
    6564:	d002      	beq.n	656c <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    6566:	4b07      	ldr	r3, [pc, #28]	; (6584 <_usb_ep0_on_tansfer_ok+0x50>)
    6568:	691b      	ldr	r3, [r3, #16]
    656a:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    656c:	4b02      	ldr	r3, [pc, #8]	; (6578 <_usb_ep0_on_tansfer_ok+0x44>)
    656e:	2200      	movs	r2, #0
    6570:	701a      	strb	r2, [r3, #0]
		}
}
    6572:	46bd      	mov	sp, r7
    6574:	b002      	add	sp, #8
    6576:	bd80      	pop	{r7, pc}
    6578:	200001a8 	.word	0x200001a8
    657c:	00006221 	.word	0x00006221
    6580:	00006135 	.word	0x00006135
    6584:	200004a4 	.word	0x200004a4

00006588 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    6588:	b590      	push	{r4, r7, lr}
    658a:	b085      	sub	sp, #20
    658c:	af00      	add	r7, sp, #0
    658e:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    6590:	230c      	movs	r3, #12
    6592:	18fb      	adds	r3, r7, r3
    6594:	1c18      	adds	r0, r3, #0
    6596:	4b22      	ldr	r3, [pc, #136]	; (6620 <udd_ctrl_ep_enable+0x98>)
    6598:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    659a:	230c      	movs	r3, #12
    659c:	18fb      	adds	r3, r7, r3
    659e:	2200      	movs	r2, #0
    65a0:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    65a2:	687a      	ldr	r2, [r7, #4]
    65a4:	230c      	movs	r3, #12
    65a6:	18fb      	adds	r3, r7, r3
    65a8:	1c10      	adds	r0, r2, #0
    65aa:	1c19      	adds	r1, r3, #0
    65ac:	4b1d      	ldr	r3, [pc, #116]	; (6624 <udd_ctrl_ep_enable+0x9c>)
    65ae:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    65b0:	687a      	ldr	r2, [r7, #4]
    65b2:	4b1d      	ldr	r3, [pc, #116]	; (6628 <udd_ctrl_ep_enable+0xa0>)
    65b4:	1c10      	adds	r0, r2, #0
    65b6:	1c19      	adds	r1, r3, #0
    65b8:	4b1c      	ldr	r3, [pc, #112]	; (662c <udd_ctrl_ep_enable+0xa4>)
    65ba:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    65bc:	687a      	ldr	r2, [r7, #4]
    65be:	4b1c      	ldr	r3, [pc, #112]	; (6630 <udd_ctrl_ep_enable+0xa8>)
    65c0:	1c10      	adds	r0, r2, #0
    65c2:	2100      	movs	r1, #0
    65c4:	2202      	movs	r2, #2
    65c6:	4c1b      	ldr	r4, [pc, #108]	; (6634 <udd_ctrl_ep_enable+0xac>)
    65c8:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    65ca:	687a      	ldr	r2, [r7, #4]
    65cc:	4b1a      	ldr	r3, [pc, #104]	; (6638 <udd_ctrl_ep_enable+0xb0>)
    65ce:	1c10      	adds	r0, r2, #0
    65d0:	2100      	movs	r1, #0
    65d2:	2200      	movs	r2, #0
    65d4:	4c17      	ldr	r4, [pc, #92]	; (6634 <udd_ctrl_ep_enable+0xac>)
    65d6:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    65d8:	687a      	ldr	r2, [r7, #4]
    65da:	4b18      	ldr	r3, [pc, #96]	; (663c <udd_ctrl_ep_enable+0xb4>)
    65dc:	1c10      	adds	r0, r2, #0
    65de:	2100      	movs	r1, #0
    65e0:	2201      	movs	r2, #1
    65e2:	4c14      	ldr	r4, [pc, #80]	; (6634 <udd_ctrl_ep_enable+0xac>)
    65e4:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	1c18      	adds	r0, r3, #0
    65ea:	2100      	movs	r1, #0
    65ec:	2202      	movs	r2, #2
    65ee:	4b14      	ldr	r3, [pc, #80]	; (6640 <udd_ctrl_ep_enable+0xb8>)
    65f0:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	1c18      	adds	r0, r3, #0
    65f6:	2100      	movs	r1, #0
    65f8:	2200      	movs	r2, #0
    65fa:	4b11      	ldr	r3, [pc, #68]	; (6640 <udd_ctrl_ep_enable+0xb8>)
    65fc:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    65fe:	687b      	ldr	r3, [r7, #4]
    6600:	1c18      	adds	r0, r3, #0
    6602:	2100      	movs	r1, #0
    6604:	2201      	movs	r2, #1
    6606:	4b0e      	ldr	r3, [pc, #56]	; (6640 <udd_ctrl_ep_enable+0xb8>)
    6608:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	1c18      	adds	r0, r3, #0
    660e:	2101      	movs	r1, #1
    6610:	4b0c      	ldr	r3, [pc, #48]	; (6644 <udd_ctrl_ep_enable+0xbc>)
    6612:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    6614:	4b0c      	ldr	r3, [pc, #48]	; (6648 <udd_ctrl_ep_enable+0xc0>)
    6616:	2200      	movs	r2, #0
    6618:	701a      	strb	r2, [r3, #0]
}
    661a:	46bd      	mov	sp, r7
    661c:	b005      	add	sp, #20
    661e:	bd90      	pop	{r4, r7, pc}
    6620:	000074a1 	.word	0x000074a1
    6624:	000074c9 	.word	0x000074c9
    6628:	200004bc 	.word	0x200004bc
    662c:	00007d69 	.word	0x00007d69
    6630:	0000637d 	.word	0x0000637d
    6634:	00007069 	.word	0x00007069
    6638:	00006535 	.word	0x00006535
    663c:	000064f9 	.word	0x000064f9
    6640:	0000715d 	.word	0x0000715d
    6644:	00005335 	.word	0x00005335
    6648:	200001a8 	.word	0x200001a8

0000664c <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    664c:	b580      	push	{r7, lr}
    664e:	b082      	sub	sp, #8
    6650:	af00      	add	r7, sp, #0
    6652:	6078      	str	r0, [r7, #4]
    6654:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    6656:	4b09      	ldr	r3, [pc, #36]	; (667c <_usb_on_suspend+0x30>)
    6658:	1c18      	adds	r0, r3, #0
    665a:	2104      	movs	r1, #4
    665c:	4b08      	ldr	r3, [pc, #32]	; (6680 <_usb_on_suspend+0x34>)
    665e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6660:	4b06      	ldr	r3, [pc, #24]	; (667c <_usb_on_suspend+0x30>)
    6662:	1c18      	adds	r0, r3, #0
    6664:	2102      	movs	r1, #2
    6666:	4b07      	ldr	r3, [pc, #28]	; (6684 <_usb_on_suspend+0x38>)
    6668:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    666a:	2001      	movs	r0, #1
    666c:	4b06      	ldr	r3, [pc, #24]	; (6688 <_usb_on_suspend+0x3c>)
    666e:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    6670:	4b06      	ldr	r3, [pc, #24]	; (668c <_usb_on_suspend+0x40>)
    6672:	4798      	blx	r3
#endif
}
    6674:	46bd      	mov	sp, r7
    6676:	b002      	add	sp, #8
    6678:	bd80      	pop	{r7, pc}
    667a:	46c0      	nop			; (mov r8, r8)
    667c:	2000033c 	.word	0x2000033c
    6680:	00007011 	.word	0x00007011
    6684:	00006fb5 	.word	0x00006fb5
    6688:	000054a9 	.word	0x000054a9
    668c:	000089c1 	.word	0x000089c1

00006690 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    6690:	b580      	push	{r7, lr}
    6692:	b084      	sub	sp, #16
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
    6698:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    669a:	683b      	ldr	r3, [r7, #0]
    669c:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    669e:	4b11      	ldr	r3, [pc, #68]	; (66e4 <_usb_device_lpm_suspend+0x54>)
    66a0:	1c18      	adds	r0, r3, #0
    66a2:	2106      	movs	r1, #6
    66a4:	4b10      	ldr	r3, [pc, #64]	; (66e8 <_usb_device_lpm_suspend+0x58>)
    66a6:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    66a8:	4b0e      	ldr	r3, [pc, #56]	; (66e4 <_usb_device_lpm_suspend+0x54>)
    66aa:	1c18      	adds	r0, r3, #0
    66ac:	2104      	movs	r1, #4
    66ae:	4b0e      	ldr	r3, [pc, #56]	; (66e8 <_usb_device_lpm_suspend+0x58>)
    66b0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    66b2:	4b0c      	ldr	r3, [pc, #48]	; (66e4 <_usb_device_lpm_suspend+0x54>)
    66b4:	1c18      	adds	r0, r3, #0
    66b6:	2102      	movs	r1, #2
    66b8:	4b0c      	ldr	r3, [pc, #48]	; (66ec <_usb_device_lpm_suspend+0x5c>)
    66ba:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    66bc:	2002      	movs	r0, #2
    66be:	4b0c      	ldr	r3, [pc, #48]	; (66f0 <_usb_device_lpm_suspend+0x60>)
    66c0:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    66c2:	68fb      	ldr	r3, [r7, #12]
    66c4:	681b      	ldr	r3, [r3, #0]
    66c6:	2b00      	cmp	r3, #0
    66c8:	d001      	beq.n	66ce <_usb_device_lpm_suspend+0x3e>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    66ca:	4b0a      	ldr	r3, [pc, #40]	; (66f4 <_usb_device_lpm_suspend+0x64>)
    66cc:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    66ce:	68fb      	ldr	r3, [r7, #12]
    66d0:	681b      	ldr	r3, [r3, #0]
    66d2:	2b00      	cmp	r3, #0
    66d4:	d101      	bne.n	66da <_usb_device_lpm_suspend+0x4a>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    66d6:	4b08      	ldr	r3, [pc, #32]	; (66f8 <_usb_device_lpm_suspend+0x68>)
    66d8:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    66da:	4b08      	ldr	r3, [pc, #32]	; (66fc <_usb_device_lpm_suspend+0x6c>)
    66dc:	4798      	blx	r3
}
    66de:	46bd      	mov	sp, r7
    66e0:	b004      	add	sp, #16
    66e2:	bd80      	pop	{r7, pc}
    66e4:	2000033c 	.word	0x2000033c
    66e8:	00007011 	.word	0x00007011
    66ec:	00006fb5 	.word	0x00006fb5
    66f0:	000054a9 	.word	0x000054a9
    66f4:	00008a55 	.word	0x00008a55
    66f8:	00008a45 	.word	0x00008a45
    66fc:	00008a35 	.word	0x00008a35

00006700 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    6700:	b580      	push	{r7, lr}
    6702:	b082      	sub	sp, #8
    6704:	af00      	add	r7, sp, #0
    6706:	6078      	str	r0, [r7, #4]
    6708:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    670a:	4b03      	ldr	r3, [pc, #12]	; (6718 <_usb_on_sof_notify+0x18>)
    670c:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    670e:	4b03      	ldr	r3, [pc, #12]	; (671c <_usb_on_sof_notify+0x1c>)
    6710:	4798      	blx	r3
#endif
}
    6712:	46bd      	mov	sp, r7
    6714:	b002      	add	sp, #8
    6716:	bd80      	pop	{r7, pc}
    6718:	00003241 	.word	0x00003241
    671c:	000089e1 	.word	0x000089e1

00006720 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    6720:	b580      	push	{r7, lr}
    6722:	b082      	sub	sp, #8
    6724:	af00      	add	r7, sp, #0
    6726:	6078      	str	r0, [r7, #4]
    6728:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    672a:	4b07      	ldr	r3, [pc, #28]	; (6748 <_usb_on_bus_reset+0x28>)
    672c:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	1c18      	adds	r0, r3, #0
    6732:	2100      	movs	r1, #0
    6734:	4b05      	ldr	r3, [pc, #20]	; (674c <_usb_on_bus_reset+0x2c>)
    6736:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	1c18      	adds	r0, r3, #0
    673c:	4b04      	ldr	r3, [pc, #16]	; (6750 <_usb_on_bus_reset+0x30>)
    673e:	4798      	blx	r3
}
    6740:	46bd      	mov	sp, r7
    6742:	b002      	add	sp, #8
    6744:	bd80      	pop	{r7, pc}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	000031cd 	.word	0x000031cd
    674c:	000052ed 	.word	0x000052ed
    6750:	00006589 	.word	0x00006589

00006754 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    6754:	b580      	push	{r7, lr}
    6756:	b082      	sub	sp, #8
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
    675c:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    675e:	4b10      	ldr	r3, [pc, #64]	; (67a0 <_usb_on_wakeup+0x4c>)
    6760:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    6762:	4b10      	ldr	r3, [pc, #64]	; (67a4 <_usb_on_wakeup+0x50>)
    6764:	1c18      	adds	r0, r3, #0
    6766:	2102      	movs	r1, #2
    6768:	4b0f      	ldr	r3, [pc, #60]	; (67a8 <_usb_on_wakeup+0x54>)
    676a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    676c:	4b0d      	ldr	r3, [pc, #52]	; (67a4 <_usb_on_wakeup+0x50>)
    676e:	1c18      	adds	r0, r3, #0
    6770:	2104      	movs	r1, #4
    6772:	4b0e      	ldr	r3, [pc, #56]	; (67ac <_usb_on_wakeup+0x58>)
    6774:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    6776:	4a0b      	ldr	r2, [pc, #44]	; (67a4 <_usb_on_wakeup+0x50>)
    6778:	4b0d      	ldr	r3, [pc, #52]	; (67b0 <_usb_on_wakeup+0x5c>)
    677a:	1c10      	adds	r0, r2, #0
    677c:	2106      	movs	r1, #6
    677e:	1c1a      	adds	r2, r3, #0
    6780:	4b0c      	ldr	r3, [pc, #48]	; (67b4 <_usb_on_wakeup+0x60>)
    6782:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    6784:	4b07      	ldr	r3, [pc, #28]	; (67a4 <_usb_on_wakeup+0x50>)
    6786:	1c18      	adds	r0, r3, #0
    6788:	2106      	movs	r1, #6
    678a:	4b08      	ldr	r3, [pc, #32]	; (67ac <_usb_on_wakeup+0x58>)
    678c:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    678e:	2003      	movs	r0, #3
    6790:	4b09      	ldr	r3, [pc, #36]	; (67b8 <_usb_on_wakeup+0x64>)
    6792:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    6794:	4b09      	ldr	r3, [pc, #36]	; (67bc <_usb_on_wakeup+0x68>)
    6796:	4798      	blx	r3
#endif
}
    6798:	46bd      	mov	sp, r7
    679a:	b002      	add	sp, #8
    679c:	bd80      	pop	{r7, pc}
    679e:	46c0      	nop			; (mov r8, r8)
    67a0:	00005471 	.word	0x00005471
    67a4:	2000033c 	.word	0x2000033c
    67a8:	00007011 	.word	0x00007011
    67ac:	00006fb5 	.word	0x00006fb5
    67b0:	00006691 	.word	0x00006691
    67b4:	00006f65 	.word	0x00006f65
    67b8:	000054a9 	.word	0x000054a9
    67bc:	000089d1 	.word	0x000089d1

000067c0 <udd_detach>:

void udd_detach(void)
{
    67c0:	b580      	push	{r7, lr}
    67c2:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    67c4:	4b04      	ldr	r3, [pc, #16]	; (67d8 <udd_detach+0x18>)
    67c6:	1c18      	adds	r0, r3, #0
    67c8:	4b04      	ldr	r3, [pc, #16]	; (67dc <udd_detach+0x1c>)
    67ca:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    67cc:	2001      	movs	r0, #1
    67ce:	4b04      	ldr	r3, [pc, #16]	; (67e0 <udd_detach+0x20>)
    67d0:	4798      	blx	r3
}
    67d2:	46bd      	mov	sp, r7
    67d4:	bd80      	pop	{r7, pc}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	2000033c 	.word	0x2000033c
    67dc:	000052ad 	.word	0x000052ad
    67e0:	000054a9 	.word	0x000054a9

000067e4 <udd_attach>:

void udd_attach(void)
{
    67e4:	b580      	push	{r7, lr}
    67e6:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    67e8:	2003      	movs	r0, #3
    67ea:	4b22      	ldr	r3, [pc, #136]	; (6874 <udd_attach+0x90>)
    67ec:	4798      	blx	r3
	usb_device_attach(&usb_device);
    67ee:	4b22      	ldr	r3, [pc, #136]	; (6878 <udd_attach+0x94>)
    67f0:	1c18      	adds	r0, r3, #0
    67f2:	4b22      	ldr	r3, [pc, #136]	; (687c <udd_attach+0x98>)
    67f4:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    67f6:	4a20      	ldr	r2, [pc, #128]	; (6878 <udd_attach+0x94>)
    67f8:	4b21      	ldr	r3, [pc, #132]	; (6880 <udd_attach+0x9c>)
    67fa:	1c10      	adds	r0, r2, #0
    67fc:	2104      	movs	r1, #4
    67fe:	1c1a      	adds	r2, r3, #0
    6800:	4b20      	ldr	r3, [pc, #128]	; (6884 <udd_attach+0xa0>)
    6802:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    6804:	4a1c      	ldr	r2, [pc, #112]	; (6878 <udd_attach+0x94>)
    6806:	4b20      	ldr	r3, [pc, #128]	; (6888 <udd_attach+0xa4>)
    6808:	1c10      	adds	r0, r2, #0
    680a:	2100      	movs	r1, #0
    680c:	1c1a      	adds	r2, r3, #0
    680e:	4b1d      	ldr	r3, [pc, #116]	; (6884 <udd_attach+0xa0>)
    6810:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    6812:	4a19      	ldr	r2, [pc, #100]	; (6878 <udd_attach+0x94>)
    6814:	4b1d      	ldr	r3, [pc, #116]	; (688c <udd_attach+0xa8>)
    6816:	1c10      	adds	r0, r2, #0
    6818:	2101      	movs	r1, #1
    681a:	1c1a      	adds	r2, r3, #0
    681c:	4b19      	ldr	r3, [pc, #100]	; (6884 <udd_attach+0xa0>)
    681e:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    6820:	4a15      	ldr	r2, [pc, #84]	; (6878 <udd_attach+0x94>)
    6822:	4b1b      	ldr	r3, [pc, #108]	; (6890 <udd_attach+0xac>)
    6824:	1c10      	adds	r0, r2, #0
    6826:	2102      	movs	r1, #2
    6828:	1c1a      	adds	r2, r3, #0
    682a:	4b16      	ldr	r3, [pc, #88]	; (6884 <udd_attach+0xa0>)
    682c:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    682e:	4b12      	ldr	r3, [pc, #72]	; (6878 <udd_attach+0x94>)
    6830:	1c18      	adds	r0, r3, #0
    6832:	2104      	movs	r1, #4
    6834:	4b17      	ldr	r3, [pc, #92]	; (6894 <udd_attach+0xb0>)
    6836:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    6838:	4b0f      	ldr	r3, [pc, #60]	; (6878 <udd_attach+0x94>)
    683a:	1c18      	adds	r0, r3, #0
    683c:	2100      	movs	r1, #0
    683e:	4b15      	ldr	r3, [pc, #84]	; (6894 <udd_attach+0xb0>)
    6840:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    6842:	4b0d      	ldr	r3, [pc, #52]	; (6878 <udd_attach+0x94>)
    6844:	1c18      	adds	r0, r3, #0
    6846:	2101      	movs	r1, #1
    6848:	4b12      	ldr	r3, [pc, #72]	; (6894 <udd_attach+0xb0>)
    684a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    684c:	4b0a      	ldr	r3, [pc, #40]	; (6878 <udd_attach+0x94>)
    684e:	1c18      	adds	r0, r3, #0
    6850:	2102      	movs	r1, #2
    6852:	4b10      	ldr	r3, [pc, #64]	; (6894 <udd_attach+0xb0>)
    6854:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    6856:	4a08      	ldr	r2, [pc, #32]	; (6878 <udd_attach+0x94>)
    6858:	4b0f      	ldr	r3, [pc, #60]	; (6898 <udd_attach+0xb4>)
    685a:	1c10      	adds	r0, r2, #0
    685c:	2106      	movs	r1, #6
    685e:	1c1a      	adds	r2, r3, #0
    6860:	4b08      	ldr	r3, [pc, #32]	; (6884 <udd_attach+0xa0>)
    6862:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    6864:	4b04      	ldr	r3, [pc, #16]	; (6878 <udd_attach+0x94>)
    6866:	1c18      	adds	r0, r3, #0
    6868:	2106      	movs	r1, #6
    686a:	4b0a      	ldr	r3, [pc, #40]	; (6894 <udd_attach+0xb0>)
    686c:	4798      	blx	r3
#endif
}
    686e:	46bd      	mov	sp, r7
    6870:	bd80      	pop	{r7, pc}
    6872:	46c0      	nop			; (mov r8, r8)
    6874:	000054a9 	.word	0x000054a9
    6878:	2000033c 	.word	0x2000033c
    687c:	00005289 	.word	0x00005289
    6880:	0000664d 	.word	0x0000664d
    6884:	00006f65 	.word	0x00006f65
    6888:	00006701 	.word	0x00006701
    688c:	00006721 	.word	0x00006721
    6890:	00006755 	.word	0x00006755
    6894:	00006fb5 	.word	0x00006fb5
    6898:	00006691 	.word	0x00006691

0000689c <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    689c:	b580      	push	{r7, lr}
    689e:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    68a0:	200e      	movs	r0, #14
    68a2:	2100      	movs	r1, #0
    68a4:	4b08      	ldr	r3, [pc, #32]	; (68c8 <_uhd_vbus_handler+0x2c>)
    68a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    68a8:	200e      	movs	r0, #14
    68aa:	4b08      	ldr	r3, [pc, #32]	; (68cc <_uhd_vbus_handler+0x30>)
    68ac:	4798      	blx	r3
    68ae:	1e03      	subs	r3, r0, #0
    68b0:	d002      	beq.n	68b8 <_uhd_vbus_handler+0x1c>
		udd_attach();
    68b2:	4b07      	ldr	r3, [pc, #28]	; (68d0 <_uhd_vbus_handler+0x34>)
    68b4:	4798      	blx	r3
    68b6:	e001      	b.n	68bc <_uhd_vbus_handler+0x20>
	} else {
		udd_detach();
    68b8:	4b06      	ldr	r3, [pc, #24]	; (68d4 <_uhd_vbus_handler+0x38>)
    68ba:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    68bc:	200e      	movs	r0, #14
    68be:	2100      	movs	r1, #0
    68c0:	4b05      	ldr	r3, [pc, #20]	; (68d8 <_uhd_vbus_handler+0x3c>)
    68c2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    68c4:	46bd      	mov	sp, r7
    68c6:	bd80      	pop	{r7, pc}
    68c8:	00003ee9 	.word	0x00003ee9
    68cc:	00005395 	.word	0x00005395
    68d0:	000067e5 	.word	0x000067e5
    68d4:	000067c1 	.word	0x000067c1
    68d8:	00003ea1 	.word	0x00003ea1

000068dc <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    68dc:	b580      	push	{r7, lr}
    68de:	b084      	sub	sp, #16
    68e0:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    68e2:	1d3b      	adds	r3, r7, #4
    68e4:	1c18      	adds	r0, r3, #0
    68e6:	4b13      	ldr	r3, [pc, #76]	; (6934 <_usb_vbus_config+0x58>)
    68e8:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    68ea:	1d3b      	adds	r3, r7, #4
    68ec:	220e      	movs	r2, #14
    68ee:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    68f0:	1d3b      	adds	r3, r7, #4
    68f2:	2200      	movs	r2, #0
    68f4:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    68f6:	1d3b      	adds	r3, r7, #4
    68f8:	2200      	movs	r2, #0
    68fa:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    68fc:	1d3b      	adds	r3, r7, #4
    68fe:	2203      	movs	r2, #3
    6900:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    6902:	1d3b      	adds	r3, r7, #4
    6904:	2201      	movs	r2, #1
    6906:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    6908:	200e      	movs	r0, #14
    690a:	2100      	movs	r1, #0
    690c:	4b0a      	ldr	r3, [pc, #40]	; (6938 <_usb_vbus_config+0x5c>)
    690e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    6910:	1d3b      	adds	r3, r7, #4
    6912:	200e      	movs	r0, #14
    6914:	1c19      	adds	r1, r3, #0
    6916:	4b09      	ldr	r3, [pc, #36]	; (693c <_usb_vbus_config+0x60>)
    6918:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    691a:	4b09      	ldr	r3, [pc, #36]	; (6940 <_usb_vbus_config+0x64>)
    691c:	1c18      	adds	r0, r3, #0
    691e:	210e      	movs	r1, #14
    6920:	2200      	movs	r2, #0
    6922:	4b08      	ldr	r3, [pc, #32]	; (6944 <_usb_vbus_config+0x68>)
    6924:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    6926:	200e      	movs	r0, #14
    6928:	2100      	movs	r1, #0
    692a:	4b07      	ldr	r3, [pc, #28]	; (6948 <_usb_vbus_config+0x6c>)
    692c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    692e:	46bd      	mov	sp, r7
    6930:	b004      	add	sp, #16
    6932:	bd80      	pop	{r7, pc}
    6934:	00004235 	.word	0x00004235
    6938:	00003ee9 	.word	0x00003ee9
    693c:	00004269 	.word	0x00004269
    6940:	0000689d 	.word	0x0000689d
    6944:	00003e3d 	.word	0x00003e3d
    6948:	00003ea1 	.word	0x00003ea1

0000694c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    694c:	b580      	push	{r7, lr}
    694e:	b082      	sub	sp, #8
    6950:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    6952:	4b15      	ldr	r3, [pc, #84]	; (69a8 <udd_enable+0x5c>)
    6954:	4798      	blx	r3
    6956:	1c03      	adds	r3, r0, #0
    6958:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    695a:	1c3b      	adds	r3, r7, #0
    695c:	1c18      	adds	r0, r3, #0
    695e:	4b13      	ldr	r3, [pc, #76]	; (69ac <udd_enable+0x60>)
    6960:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    6962:	1c3b      	adds	r3, r7, #0
    6964:	2200      	movs	r2, #0
    6966:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    6968:	4a11      	ldr	r2, [pc, #68]	; (69b0 <udd_enable+0x64>)
    696a:	4912      	ldr	r1, [pc, #72]	; (69b4 <udd_enable+0x68>)
    696c:	1c3b      	adds	r3, r7, #0
    696e:	1c10      	adds	r0, r2, #0
    6970:	1c1a      	adds	r2, r3, #0
    6972:	4b11      	ldr	r3, [pc, #68]	; (69b8 <udd_enable+0x6c>)
    6974:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    6976:	4b0e      	ldr	r3, [pc, #56]	; (69b0 <udd_enable+0x64>)
    6978:	1c18      	adds	r0, r3, #0
    697a:	4b10      	ldr	r3, [pc, #64]	; (69bc <udd_enable+0x70>)
    697c:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    697e:	4b10      	ldr	r3, [pc, #64]	; (69c0 <udd_enable+0x74>)
    6980:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    6982:	2001      	movs	r0, #1
    6984:	4b0f      	ldr	r3, [pc, #60]	; (69c4 <udd_enable+0x78>)
    6986:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    6988:	4b0f      	ldr	r3, [pc, #60]	; (69c8 <udd_enable+0x7c>)
    698a:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    698c:	200e      	movs	r0, #14
    698e:	4b0f      	ldr	r3, [pc, #60]	; (69cc <udd_enable+0x80>)
    6990:	4798      	blx	r3
    6992:	1e03      	subs	r3, r0, #0
    6994:	d001      	beq.n	699a <udd_enable+0x4e>
		/* USB Attach */
		_uhd_vbus_handler();
    6996:	4b0e      	ldr	r3, [pc, #56]	; (69d0 <udd_enable+0x84>)
    6998:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	1c18      	adds	r0, r3, #0
    699e:	4b0d      	ldr	r3, [pc, #52]	; (69d4 <udd_enable+0x88>)
    69a0:	4798      	blx	r3
}
    69a2:	46bd      	mov	sp, r7
    69a4:	b002      	add	sp, #8
    69a6:	bd80      	pop	{r7, pc}
    69a8:	000051b1 	.word	0x000051b1
    69ac:	00008371 	.word	0x00008371
    69b0:	2000033c 	.word	0x2000033c
    69b4:	41005000 	.word	0x41005000
    69b8:	00008399 	.word	0x00008399
    69bc:	00008311 	.word	0x00008311
    69c0:	00005471 	.word	0x00005471
    69c4:	000054a9 	.word	0x000054a9
    69c8:	000068dd 	.word	0x000068dd
    69cc:	00005395 	.word	0x00005395
    69d0:	0000689d 	.word	0x0000689d
    69d4:	000051f9 	.word	0x000051f9

000069d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    69d8:	b580      	push	{r7, lr}
    69da:	b082      	sub	sp, #8
    69dc:	af00      	add	r7, sp, #0
    69de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	2200      	movs	r2, #0
    69e4:	701a      	strb	r2, [r3, #0]
}
    69e6:	46bd      	mov	sp, r7
    69e8:	b002      	add	sp, #8
    69ea:	bd80      	pop	{r7, pc}

000069ec <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	b082      	sub	sp, #8
    69f0:	af00      	add	r7, sp, #0
    69f2:	1c02      	adds	r2, r0, #0
    69f4:	6039      	str	r1, [r7, #0]
    69f6:	1dfb      	adds	r3, r7, #7
    69f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    69fa:	1dfb      	adds	r3, r7, #7
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	2b01      	cmp	r3, #1
    6a00:	d00a      	beq.n	6a18 <system_apb_clock_set_mask+0x2c>
    6a02:	2b02      	cmp	r3, #2
    6a04:	d00f      	beq.n	6a26 <system_apb_clock_set_mask+0x3a>
    6a06:	2b00      	cmp	r3, #0
    6a08:	d114      	bne.n	6a34 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6a0a:	4b0e      	ldr	r3, [pc, #56]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a0c:	4a0d      	ldr	r2, [pc, #52]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a0e:	6991      	ldr	r1, [r2, #24]
    6a10:	683a      	ldr	r2, [r7, #0]
    6a12:	430a      	orrs	r2, r1
    6a14:	619a      	str	r2, [r3, #24]
			break;
    6a16:	e00f      	b.n	6a38 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6a18:	4b0a      	ldr	r3, [pc, #40]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a1a:	4a0a      	ldr	r2, [pc, #40]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a1c:	69d1      	ldr	r1, [r2, #28]
    6a1e:	683a      	ldr	r2, [r7, #0]
    6a20:	430a      	orrs	r2, r1
    6a22:	61da      	str	r2, [r3, #28]
			break;
    6a24:	e008      	b.n	6a38 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6a26:	4b07      	ldr	r3, [pc, #28]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a28:	4a06      	ldr	r2, [pc, #24]	; (6a44 <system_apb_clock_set_mask+0x58>)
    6a2a:	6a11      	ldr	r1, [r2, #32]
    6a2c:	683a      	ldr	r2, [r7, #0]
    6a2e:	430a      	orrs	r2, r1
    6a30:	621a      	str	r2, [r3, #32]
			break;
    6a32:	e001      	b.n	6a38 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6a34:	2317      	movs	r3, #23
    6a36:	e000      	b.n	6a3a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6a38:	2300      	movs	r3, #0
}
    6a3a:	1c18      	adds	r0, r3, #0
    6a3c:	46bd      	mov	sp, r7
    6a3e:	b002      	add	sp, #8
    6a40:	bd80      	pop	{r7, pc}
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	40000400 	.word	0x40000400

00006a48 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6a48:	b580      	push	{r7, lr}
    6a4a:	b082      	sub	sp, #8
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	2280      	movs	r2, #128	; 0x80
    6a54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	2200      	movs	r2, #0
    6a5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	2201      	movs	r2, #1
    6a60:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	2200      	movs	r2, #0
    6a66:	70da      	strb	r2, [r3, #3]
}
    6a68:	46bd      	mov	sp, r7
    6a6a:	b002      	add	sp, #8
    6a6c:	bd80      	pop	{r7, pc}
    6a6e:	46c0      	nop			; (mov r8, r8)

00006a70 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	b082      	sub	sp, #8
    6a74:	af00      	add	r7, sp, #0
    6a76:	1c02      	adds	r2, r0, #0
    6a78:	1dfb      	adds	r3, r7, #7
    6a7a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6a7c:	4b06      	ldr	r3, [pc, #24]	; (6a98 <system_interrupt_enable+0x28>)
    6a7e:	1dfa      	adds	r2, r7, #7
    6a80:	7812      	ldrb	r2, [r2, #0]
    6a82:	1c11      	adds	r1, r2, #0
    6a84:	221f      	movs	r2, #31
    6a86:	400a      	ands	r2, r1
    6a88:	2101      	movs	r1, #1
    6a8a:	4091      	lsls	r1, r2
    6a8c:	1c0a      	adds	r2, r1, #0
    6a8e:	601a      	str	r2, [r3, #0]
}
    6a90:	46bd      	mov	sp, r7
    6a92:	b002      	add	sp, #8
    6a94:	bd80      	pop	{r7, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	e000e100 	.word	0xe000e100

00006a9c <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    6a9c:	b580      	push	{r7, lr}
    6a9e:	b082      	sub	sp, #8
    6aa0:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6aa2:	4bbb      	ldr	r3, [pc, #748]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	681b      	ldr	r3, [r3, #0]
    6aa8:	8c1b      	ldrh	r3, [r3, #32]
    6aaa:	b29b      	uxth	r3, r3
    6aac:	1c1a      	adds	r2, r3, #0
    6aae:	4bb9      	ldr	r3, [pc, #740]	; (6d94 <_usb_host_interrupt_handler+0x2f8>)
    6ab0:	1c10      	adds	r0, r2, #0
    6ab2:	4798      	blx	r3
    6ab4:	1c03      	adds	r3, r0, #0
    6ab6:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	2b1f      	cmp	r3, #31
    6abc:	d900      	bls.n	6ac0 <_usb_host_interrupt_handler+0x24>
    6abe:	e173      	b.n	6da8 <_usb_host_interrupt_handler+0x30c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6ac0:	4bb3      	ldr	r3, [pc, #716]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6ac2:	681b      	ldr	r3, [r3, #0]
    6ac4:	681a      	ldr	r2, [r3, #0]
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	3308      	adds	r3, #8
    6aca:	015b      	lsls	r3, r3, #5
    6acc:	18d3      	adds	r3, r2, r3
    6ace:	79db      	ldrb	r3, [r3, #7]
    6ad0:	b2db      	uxtb	r3, r3
    6ad2:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6ad4:	683b      	ldr	r3, [r7, #0]
    6ad6:	2203      	movs	r2, #3
    6ad8:	4013      	ands	r3, r2
    6ada:	d100      	bne.n	6ade <_usb_host_interrupt_handler+0x42>
    6adc:	e089      	b.n	6bf2 <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6ade:	687b      	ldr	r3, [r7, #4]
    6ae0:	2201      	movs	r2, #1
    6ae2:	409a      	lsls	r2, r3
    6ae4:	1c13      	adds	r3, r2, #0
    6ae6:	43db      	mvns	r3, r3
    6ae8:	1c1a      	adds	r2, r3, #0
    6aea:	4bab      	ldr	r3, [pc, #684]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6aec:	681b      	ldr	r3, [r3, #0]
    6aee:	401a      	ands	r2, r3
    6af0:	4ba9      	ldr	r3, [pc, #676]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6af2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6af4:	4ba6      	ldr	r3, [pc, #664]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	681a      	ldr	r2, [r3, #0]
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	3308      	adds	r3, #8
    6afe:	015b      	lsls	r3, r3, #5
    6b00:	18d3      	adds	r3, r2, r3
    6b02:	2203      	movs	r2, #3
    6b04:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6b06:	4ba2      	ldr	r3, [pc, #648]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6b08:	681a      	ldr	r2, [r3, #0]
    6b0a:	21a8      	movs	r1, #168	; 0xa8
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	18d3      	adds	r3, r2, r3
    6b10:	185b      	adds	r3, r3, r1
    6b12:	799b      	ldrb	r3, [r3, #6]
    6b14:	1c1a      	adds	r2, r3, #0
    6b16:	2301      	movs	r3, #1
    6b18:	4013      	ands	r3, r2
    6b1a:	d06a      	beq.n	6bf2 <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	b2da      	uxtb	r2, r3
    6b20:	4b9e      	ldr	r3, [pc, #632]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6b22:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6b24:	4b9a      	ldr	r3, [pc, #616]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	687a      	ldr	r2, [r7, #4]
    6b2c:	3208      	adds	r2, #8
    6b2e:	0152      	lsls	r2, r2, #5
    6b30:	5cd3      	ldrb	r3, [r2, r3]
    6b32:	2203      	movs	r2, #3
    6b34:	4013      	ands	r3, r2
    6b36:	b2db      	uxtb	r3, r3
    6b38:	2b01      	cmp	r3, #1
    6b3a:	d11f      	bne.n	6b7c <_usb_host_interrupt_handler+0xe0>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6b3c:	4a98      	ldr	r2, [pc, #608]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	015b      	lsls	r3, r3, #5
    6b42:	18d3      	adds	r3, r2, r3
    6b44:	685b      	ldr	r3, [r3, #4]
    6b46:	049b      	lsls	r3, r3, #18
    6b48:	0c9b      	lsrs	r3, r3, #18
    6b4a:	b29b      	uxth	r3, r3
    6b4c:	1c1a      	adds	r2, r3, #0
    6b4e:	4b93      	ldr	r3, [pc, #588]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6b50:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6b52:	4a93      	ldr	r2, [pc, #588]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6b54:	687b      	ldr	r3, [r7, #4]
    6b56:	015b      	lsls	r3, r3, #5
    6b58:	18d3      	adds	r3, r2, r3
    6b5a:	685b      	ldr	r3, [r3, #4]
    6b5c:	0b9b      	lsrs	r3, r3, #14
    6b5e:	049b      	lsls	r3, r3, #18
    6b60:	0c9b      	lsrs	r3, r3, #18
    6b62:	b29b      	uxth	r3, r3
    6b64:	1c1a      	adds	r2, r3, #0
    6b66:	4b8d      	ldr	r3, [pc, #564]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6b68:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6b6a:	4a8d      	ldr	r2, [pc, #564]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	015b      	lsls	r3, r3, #5
    6b70:	18d3      	adds	r3, r2, r3
    6b72:	685a      	ldr	r2, [r3, #4]
    6b74:	0b92      	lsrs	r2, r2, #14
    6b76:	0392      	lsls	r2, r2, #14
    6b78:	605a      	str	r2, [r3, #4]
    6b7a:	e02d      	b.n	6bd8 <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6b7c:	4a88      	ldr	r2, [pc, #544]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	015b      	lsls	r3, r3, #5
    6b82:	18d3      	adds	r3, r2, r3
    6b84:	685b      	ldr	r3, [r3, #4]
    6b86:	0b9b      	lsrs	r3, r3, #14
    6b88:	049b      	lsls	r3, r3, #18
    6b8a:	0c9b      	lsrs	r3, r3, #18
    6b8c:	b29b      	uxth	r3, r3
    6b8e:	1c1a      	adds	r2, r3, #0
    6b90:	4b82      	ldr	r3, [pc, #520]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6b92:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6b94:	4a82      	ldr	r2, [pc, #520]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6b96:	687b      	ldr	r3, [r7, #4]
    6b98:	015b      	lsls	r3, r3, #5
    6b9a:	18d3      	adds	r3, r2, r3
    6b9c:	685b      	ldr	r3, [r3, #4]
    6b9e:	049b      	lsls	r3, r3, #18
    6ba0:	0c9b      	lsrs	r3, r3, #18
    6ba2:	b29b      	uxth	r3, r3
    6ba4:	1c1a      	adds	r2, r3, #0
    6ba6:	4b7d      	ldr	r3, [pc, #500]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6ba8:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6baa:	4a7d      	ldr	r2, [pc, #500]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	015b      	lsls	r3, r3, #5
    6bb0:	18d3      	adds	r3, r2, r3
    6bb2:	685a      	ldr	r2, [r3, #4]
    6bb4:	497b      	ldr	r1, [pc, #492]	; (6da4 <_usb_host_interrupt_handler+0x308>)
    6bb6:	400a      	ands	r2, r1
    6bb8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6bba:	4b78      	ldr	r3, [pc, #480]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6bbc:	885b      	ldrh	r3, [r3, #2]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d10a      	bne.n	6bd8 <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6bc2:	4a77      	ldr	r2, [pc, #476]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	015b      	lsls	r3, r3, #5
    6bc8:	18d3      	adds	r3, r2, r3
    6bca:	685b      	ldr	r3, [r3, #4]
    6bcc:	049b      	lsls	r3, r3, #18
    6bce:	0c9b      	lsrs	r3, r3, #18
    6bd0:	b29b      	uxth	r3, r3
    6bd2:	1c1a      	adds	r2, r3, #0
    6bd4:	4b71      	ldr	r3, [pc, #452]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6bd6:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6bd8:	4b6d      	ldr	r3, [pc, #436]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6bda:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6bdc:	687b      	ldr	r3, [r7, #4]
    6bde:	3302      	adds	r3, #2
    6be0:	011b      	lsls	r3, r3, #4
    6be2:	18d3      	adds	r3, r2, r3
    6be4:	685a      	ldr	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    6be6:	4b6a      	ldr	r3, [pc, #424]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6be8:	6819      	ldr	r1, [r3, #0]
    6bea:	4b6c      	ldr	r3, [pc, #432]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6bec:	1c08      	adds	r0, r1, #0
    6bee:	1c19      	adds	r1, r3, #0
    6bf0:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6bf2:	683b      	ldr	r3, [r7, #0]
    6bf4:	2204      	movs	r2, #4
    6bf6:	4013      	ands	r3, r2
    6bf8:	d013      	beq.n	6c22 <_usb_host_interrupt_handler+0x186>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	2201      	movs	r2, #1
    6bfe:	409a      	lsls	r2, r3
    6c00:	1c13      	adds	r3, r2, #0
    6c02:	43db      	mvns	r3, r3
    6c04:	1c1a      	adds	r2, r3, #0
    6c06:	4b64      	ldr	r3, [pc, #400]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6c08:	681b      	ldr	r3, [r3, #0]
    6c0a:	401a      	ands	r2, r3
    6c0c:	4b62      	ldr	r3, [pc, #392]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6c0e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c10:	4b5f      	ldr	r3, [pc, #380]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6c12:	681b      	ldr	r3, [r3, #0]
    6c14:	681a      	ldr	r2, [r3, #0]
    6c16:	687b      	ldr	r3, [r7, #4]
    6c18:	3308      	adds	r3, #8
    6c1a:	015b      	lsls	r3, r3, #5
    6c1c:	18d3      	adds	r3, r2, r3
    6c1e:	2204      	movs	r2, #4
    6c20:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6c22:	683b      	ldr	r3, [r7, #0]
    6c24:	2208      	movs	r2, #8
    6c26:	4013      	ands	r3, r2
    6c28:	d03c      	beq.n	6ca4 <_usb_host_interrupt_handler+0x208>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6c2a:	687b      	ldr	r3, [r7, #4]
    6c2c:	2201      	movs	r2, #1
    6c2e:	409a      	lsls	r2, r3
    6c30:	1c13      	adds	r3, r2, #0
    6c32:	43db      	mvns	r3, r3
    6c34:	1c1a      	adds	r2, r3, #0
    6c36:	4b58      	ldr	r3, [pc, #352]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6c38:	681b      	ldr	r3, [r3, #0]
    6c3a:	401a      	ands	r2, r3
    6c3c:	4b56      	ldr	r3, [pc, #344]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6c3e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c40:	4b53      	ldr	r3, [pc, #332]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	681a      	ldr	r2, [r3, #0]
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	3308      	adds	r3, #8
    6c4a:	015b      	lsls	r3, r3, #5
    6c4c:	18d3      	adds	r3, r2, r3
    6c4e:	2208      	movs	r2, #8
    6c50:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6c52:	4b4f      	ldr	r3, [pc, #316]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6c54:	681a      	ldr	r2, [r3, #0]
    6c56:	21a8      	movs	r1, #168	; 0xa8
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	18d3      	adds	r3, r2, r3
    6c5c:	185b      	adds	r3, r3, r1
    6c5e:	799b      	ldrb	r3, [r3, #6]
    6c60:	1c1a      	adds	r2, r3, #0
    6c62:	2302      	movs	r3, #2
    6c64:	4013      	ands	r3, r2
    6c66:	d01d      	beq.n	6ca4 <_usb_host_interrupt_handler+0x208>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    6c68:	687b      	ldr	r3, [r7, #4]
    6c6a:	b2da      	uxtb	r2, r3
    6c6c:	4b4b      	ldr	r3, [pc, #300]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6c6e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6c70:	4a4b      	ldr	r2, [pc, #300]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	015b      	lsls	r3, r3, #5
    6c76:	18d3      	adds	r3, r2, r3
    6c78:	3308      	adds	r3, #8
    6c7a:	88db      	ldrh	r3, [r3, #6]
    6c7c:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    6c7e:	b2db      	uxtb	r3, r3
    6c80:	221f      	movs	r2, #31
    6c82:	4013      	ands	r3, r2
    6c84:	b2da      	uxtb	r2, r3
    6c86:	4b45      	ldr	r3, [pc, #276]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6c88:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6c8a:	4b41      	ldr	r3, [pc, #260]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6c8c:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	011b      	lsls	r3, r3, #4
    6c92:	18d3      	adds	r3, r2, r3
    6c94:	3324      	adds	r3, #36	; 0x24
    6c96:	685a      	ldr	r2, [r3, #4]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6c98:	4b3d      	ldr	r3, [pc, #244]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6c9a:	6819      	ldr	r1, [r3, #0]
    6c9c:	4b3f      	ldr	r3, [pc, #252]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6c9e:	1c08      	adds	r0, r1, #0
    6ca0:	1c19      	adds	r1, r3, #0
    6ca2:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6ca4:	683b      	ldr	r3, [r7, #0]
    6ca6:	2210      	movs	r2, #16
    6ca8:	4013      	ands	r3, r2
    6caa:	d03a      	beq.n	6d22 <_usb_host_interrupt_handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	2201      	movs	r2, #1
    6cb0:	409a      	lsls	r2, r3
    6cb2:	1c13      	adds	r3, r2, #0
    6cb4:	43db      	mvns	r3, r3
    6cb6:	1c1a      	adds	r2, r3, #0
    6cb8:	4b37      	ldr	r3, [pc, #220]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6cba:	681b      	ldr	r3, [r3, #0]
    6cbc:	401a      	ands	r2, r3
    6cbe:	4b36      	ldr	r3, [pc, #216]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6cc0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6cc2:	4b33      	ldr	r3, [pc, #204]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6cc4:	681b      	ldr	r3, [r3, #0]
    6cc6:	681a      	ldr	r2, [r3, #0]
    6cc8:	687b      	ldr	r3, [r7, #4]
    6cca:	3308      	adds	r3, #8
    6ccc:	015b      	lsls	r3, r3, #5
    6cce:	18d3      	adds	r3, r2, r3
    6cd0:	2210      	movs	r2, #16
    6cd2:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6cd4:	4b2e      	ldr	r3, [pc, #184]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6cd6:	681a      	ldr	r2, [r3, #0]
    6cd8:	21a8      	movs	r1, #168	; 0xa8
    6cda:	687b      	ldr	r3, [r7, #4]
    6cdc:	18d3      	adds	r3, r2, r3
    6cde:	185b      	adds	r3, r3, r1
    6ce0:	799b      	ldrb	r3, [r3, #6]
    6ce2:	1c1a      	adds	r2, r3, #0
    6ce4:	2304      	movs	r3, #4
    6ce6:	4013      	ands	r3, r2
    6ce8:	d01b      	beq.n	6d22 <_usb_host_interrupt_handler+0x286>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	b2da      	uxtb	r2, r3
    6cee:	4b2b      	ldr	r3, [pc, #172]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6cf0:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6cf2:	4a2b      	ldr	r2, [pc, #172]	; (6da0 <_usb_host_interrupt_handler+0x304>)
    6cf4:	687b      	ldr	r3, [r7, #4]
    6cf6:	015b      	lsls	r3, r3, #5
    6cf8:	18d3      	adds	r3, r2, r3
    6cfa:	685b      	ldr	r3, [r3, #4]
    6cfc:	0b9b      	lsrs	r3, r3, #14
    6cfe:	049b      	lsls	r3, r3, #18
    6d00:	0c9b      	lsrs	r3, r3, #18
    6d02:	b29b      	uxth	r3, r3
    6d04:	1c1a      	adds	r2, r3, #0
    6d06:	4b25      	ldr	r3, [pc, #148]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6d08:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6d0a:	4b21      	ldr	r3, [pc, #132]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d0c:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	011b      	lsls	r3, r3, #4
    6d12:	18d3      	adds	r3, r2, r3
    6d14:	3328      	adds	r3, #40	; 0x28
    6d16:	685a      	ldr	r2, [r3, #4]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    6d18:	4b1d      	ldr	r3, [pc, #116]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d1a:	681b      	ldr	r3, [r3, #0]
    6d1c:	1c18      	adds	r0, r3, #0
    6d1e:	2100      	movs	r1, #0
    6d20:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6d22:	683b      	ldr	r3, [r7, #0]
    6d24:	2220      	movs	r2, #32
    6d26:	4013      	ands	r3, r2
    6d28:	d100      	bne.n	6d2c <_usb_host_interrupt_handler+0x290>
    6d2a:	e113      	b.n	6f54 <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	2201      	movs	r2, #1
    6d30:	409a      	lsls	r2, r3
    6d32:	1c13      	adds	r3, r2, #0
    6d34:	43db      	mvns	r3, r3
    6d36:	1c1a      	adds	r2, r3, #0
    6d38:	4b17      	ldr	r3, [pc, #92]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	401a      	ands	r2, r3
    6d3e:	4b16      	ldr	r3, [pc, #88]	; (6d98 <_usb_host_interrupt_handler+0x2fc>)
    6d40:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6d42:	4b13      	ldr	r3, [pc, #76]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	681a      	ldr	r2, [r3, #0]
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	3308      	adds	r3, #8
    6d4c:	015b      	lsls	r3, r3, #5
    6d4e:	18d3      	adds	r3, r2, r3
    6d50:	2220      	movs	r2, #32
    6d52:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6d54:	4b0e      	ldr	r3, [pc, #56]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d56:	681a      	ldr	r2, [r3, #0]
    6d58:	21a8      	movs	r1, #168	; 0xa8
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	18d3      	adds	r3, r2, r3
    6d5e:	185b      	adds	r3, r3, r1
    6d60:	799b      	ldrb	r3, [r3, #6]
    6d62:	1c1a      	adds	r2, r3, #0
    6d64:	2308      	movs	r3, #8
    6d66:	4013      	ands	r3, r2
    6d68:	d100      	bne.n	6d6c <_usb_host_interrupt_handler+0x2d0>
    6d6a:	e0f3      	b.n	6f54 <_usb_host_interrupt_handler+0x4b8>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	b2da      	uxtb	r2, r3
    6d70:	4b0a      	ldr	r3, [pc, #40]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6d72:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    6d74:	4b06      	ldr	r3, [pc, #24]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d76:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	011b      	lsls	r3, r3, #4
    6d7c:	18d3      	adds	r3, r2, r3
    6d7e:	332c      	adds	r3, #44	; 0x2c
    6d80:	685a      	ldr	r2, [r3, #4]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    6d82:	4b03      	ldr	r3, [pc, #12]	; (6d90 <_usb_host_interrupt_handler+0x2f4>)
    6d84:	6819      	ldr	r1, [r3, #0]
    6d86:	4b05      	ldr	r3, [pc, #20]	; (6d9c <_usb_host_interrupt_handler+0x300>)
    6d88:	1c08      	adds	r0, r1, #0
    6d8a:	1c19      	adds	r1, r3, #0
    6d8c:	4790      	blx	r2
    6d8e:	e0e1      	b.n	6f54 <_usb_host_interrupt_handler+0x4b8>
    6d90:	200001dc 	.word	0x200001dc
    6d94:	00008d95 	.word	0x00008d95
    6d98:	200001f4 	.word	0x200001f4
    6d9c:	200001e0 	.word	0x200001e0
    6da0:	200004c4 	.word	0x200004c4
    6da4:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6da8:	4b6c      	ldr	r3, [pc, #432]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6daa:	681b      	ldr	r3, [r3, #0]
    6dac:	681b      	ldr	r3, [r3, #0]
    6dae:	8b9b      	ldrh	r3, [r3, #28]
    6db0:	b29b      	uxth	r3, r3
    6db2:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6db4:	683b      	ldr	r3, [r7, #0]
    6db6:	2204      	movs	r2, #4
    6db8:	4013      	ands	r3, r2
    6dba:	d013      	beq.n	6de4 <_usb_host_interrupt_handler+0x348>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6dbc:	4b67      	ldr	r3, [pc, #412]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	681b      	ldr	r3, [r3, #0]
    6dc2:	2204      	movs	r2, #4
    6dc4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6dc6:	4b65      	ldr	r3, [pc, #404]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6dc8:	681b      	ldr	r3, [r3, #0]
    6dca:	22a5      	movs	r2, #165	; 0xa5
    6dcc:	5c9b      	ldrb	r3, [r3, r2]
    6dce:	1c1a      	adds	r2, r3, #0
    6dd0:	2301      	movs	r3, #1
    6dd2:	4013      	ands	r3, r2
    6dd4:	d006      	beq.n	6de4 <_usb_host_interrupt_handler+0x348>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6dd6:	4b61      	ldr	r3, [pc, #388]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	685a      	ldr	r2, [r3, #4]
    6ddc:	4b5f      	ldr	r3, [pc, #380]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6dde:	681b      	ldr	r3, [r3, #0]
    6de0:	1c18      	adds	r0, r3, #0
    6de2:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    6de4:	683b      	ldr	r3, [r7, #0]
    6de6:	2208      	movs	r2, #8
    6de8:	4013      	ands	r3, r2
    6dea:	d016      	beq.n	6e1a <_usb_host_interrupt_handler+0x37e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6dec:	4b5c      	ldr	r3, [pc, #368]	; (6f60 <_usb_host_interrupt_handler+0x4c4>)
    6dee:	2200      	movs	r2, #0
    6df0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6df2:	4b5a      	ldr	r3, [pc, #360]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6df4:	681b      	ldr	r3, [r3, #0]
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	2208      	movs	r2, #8
    6dfa:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6dfc:	4b57      	ldr	r3, [pc, #348]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6dfe:	681b      	ldr	r3, [r3, #0]
    6e00:	22a5      	movs	r2, #165	; 0xa5
    6e02:	5c9b      	ldrb	r3, [r3, r2]
    6e04:	1c1a      	adds	r2, r3, #0
    6e06:	2302      	movs	r3, #2
    6e08:	4013      	ands	r3, r2
    6e0a:	d006      	beq.n	6e1a <_usb_host_interrupt_handler+0x37e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6e0c:	4b53      	ldr	r3, [pc, #332]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e0e:	681b      	ldr	r3, [r3, #0]
    6e10:	689a      	ldr	r2, [r3, #8]
    6e12:	4b52      	ldr	r3, [pc, #328]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	1c18      	adds	r0, r3, #0
    6e18:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6e1a:	683b      	ldr	r3, [r7, #0]
    6e1c:	2240      	movs	r2, #64	; 0x40
    6e1e:	4013      	ands	r3, r2
    6e20:	d013      	beq.n	6e4a <_usb_host_interrupt_handler+0x3ae>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6e22:	4b4e      	ldr	r3, [pc, #312]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	681b      	ldr	r3, [r3, #0]
    6e28:	2240      	movs	r2, #64	; 0x40
    6e2a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6e2c:	4b4b      	ldr	r3, [pc, #300]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e2e:	681b      	ldr	r3, [r3, #0]
    6e30:	22a5      	movs	r2, #165	; 0xa5
    6e32:	5c9b      	ldrb	r3, [r3, r2]
    6e34:	1c1a      	adds	r2, r3, #0
    6e36:	2310      	movs	r3, #16
    6e38:	4013      	ands	r3, r2
    6e3a:	d006      	beq.n	6e4a <_usb_host_interrupt_handler+0x3ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6e3c:	4b47      	ldr	r3, [pc, #284]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e3e:	681b      	ldr	r3, [r3, #0]
    6e40:	695a      	ldr	r2, [r3, #20]
    6e42:	4b46      	ldr	r3, [pc, #280]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e44:	681b      	ldr	r3, [r3, #0]
    6e46:	1c18      	adds	r0, r3, #0
    6e48:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6e4a:	683b      	ldr	r3, [r7, #0]
    6e4c:	2220      	movs	r2, #32
    6e4e:	4013      	ands	r3, r2
    6e50:	d013      	beq.n	6e7a <_usb_host_interrupt_handler+0x3de>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6e52:	4b42      	ldr	r3, [pc, #264]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	2220      	movs	r2, #32
    6e5a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6e5c:	4b3f      	ldr	r3, [pc, #252]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e5e:	681b      	ldr	r3, [r3, #0]
    6e60:	22a5      	movs	r2, #165	; 0xa5
    6e62:	5c9b      	ldrb	r3, [r3, r2]
    6e64:	1c1a      	adds	r2, r3, #0
    6e66:	2308      	movs	r3, #8
    6e68:	4013      	ands	r3, r2
    6e6a:	d006      	beq.n	6e7a <_usb_host_interrupt_handler+0x3de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6e6c:	4b3b      	ldr	r3, [pc, #236]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e6e:	681b      	ldr	r3, [r3, #0]
    6e70:	691a      	ldr	r2, [r3, #16]
    6e72:	4b3a      	ldr	r3, [pc, #232]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	1c18      	adds	r0, r3, #0
    6e78:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6e7a:	683b      	ldr	r3, [r7, #0]
    6e7c:	2210      	movs	r2, #16
    6e7e:	4013      	ands	r3, r2
    6e80:	d013      	beq.n	6eaa <_usb_host_interrupt_handler+0x40e>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6e82:	4b36      	ldr	r3, [pc, #216]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e84:	681b      	ldr	r3, [r3, #0]
    6e86:	681b      	ldr	r3, [r3, #0]
    6e88:	2210      	movs	r2, #16
    6e8a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6e8c:	4b33      	ldr	r3, [pc, #204]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e8e:	681b      	ldr	r3, [r3, #0]
    6e90:	22a5      	movs	r2, #165	; 0xa5
    6e92:	5c9b      	ldrb	r3, [r3, r2]
    6e94:	1c1a      	adds	r2, r3, #0
    6e96:	2304      	movs	r3, #4
    6e98:	4013      	ands	r3, r2
    6e9a:	d006      	beq.n	6eaa <_usb_host_interrupt_handler+0x40e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6e9c:	4b2f      	ldr	r3, [pc, #188]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	68da      	ldr	r2, [r3, #12]
    6ea2:	4b2e      	ldr	r3, [pc, #184]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6ea4:	681b      	ldr	r3, [r3, #0]
    6ea6:	1c18      	adds	r0, r3, #0
    6ea8:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6eaa:	683b      	ldr	r3, [r7, #0]
    6eac:	2280      	movs	r2, #128	; 0x80
    6eae:	4013      	ands	r3, r2
    6eb0:	d016      	beq.n	6ee0 <_usb_host_interrupt_handler+0x444>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6eb2:	4b2b      	ldr	r3, [pc, #172]	; (6f60 <_usb_host_interrupt_handler+0x4c4>)
    6eb4:	2200      	movs	r2, #0
    6eb6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6eb8:	4b28      	ldr	r3, [pc, #160]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6eba:	681b      	ldr	r3, [r3, #0]
    6ebc:	681b      	ldr	r3, [r3, #0]
    6ebe:	2280      	movs	r2, #128	; 0x80
    6ec0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6ec2:	4b26      	ldr	r3, [pc, #152]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6ec4:	681b      	ldr	r3, [r3, #0]
    6ec6:	22a5      	movs	r2, #165	; 0xa5
    6ec8:	5c9b      	ldrb	r3, [r3, r2]
    6eca:	1c1a      	adds	r2, r3, #0
    6ecc:	2320      	movs	r3, #32
    6ece:	4013      	ands	r3, r2
    6ed0:	d006      	beq.n	6ee0 <_usb_host_interrupt_handler+0x444>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6ed2:	4b22      	ldr	r3, [pc, #136]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	699a      	ldr	r2, [r3, #24]
    6ed8:	4b20      	ldr	r3, [pc, #128]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	1c18      	adds	r0, r3, #0
    6ede:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6ee0:	683a      	ldr	r2, [r7, #0]
    6ee2:	2380      	movs	r3, #128	; 0x80
    6ee4:	005b      	lsls	r3, r3, #1
    6ee6:	4013      	ands	r3, r2
    6ee8:	d017      	beq.n	6f1a <_usb_host_interrupt_handler+0x47e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6eea:	4b1d      	ldr	r3, [pc, #116]	; (6f60 <_usb_host_interrupt_handler+0x4c4>)
    6eec:	2200      	movs	r2, #0
    6eee:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6ef0:	4b1a      	ldr	r3, [pc, #104]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	681b      	ldr	r3, [r3, #0]
    6ef6:	2280      	movs	r2, #128	; 0x80
    6ef8:	0052      	lsls	r2, r2, #1
    6efa:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6efc:	4b17      	ldr	r3, [pc, #92]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	22a5      	movs	r2, #165	; 0xa5
    6f02:	5c9b      	ldrb	r3, [r3, r2]
    6f04:	1c1a      	adds	r2, r3, #0
    6f06:	2340      	movs	r3, #64	; 0x40
    6f08:	4013      	ands	r3, r2
    6f0a:	d006      	beq.n	6f1a <_usb_host_interrupt_handler+0x47e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6f0c:	4b13      	ldr	r3, [pc, #76]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	69da      	ldr	r2, [r3, #28]
    6f12:	4b12      	ldr	r3, [pc, #72]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	1c18      	adds	r0, r3, #0
    6f18:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6f1a:	683a      	ldr	r2, [r7, #0]
    6f1c:	2380      	movs	r3, #128	; 0x80
    6f1e:	009b      	lsls	r3, r3, #2
    6f20:	4013      	ands	r3, r2
    6f22:	d017      	beq.n	6f54 <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    6f24:	4b0e      	ldr	r3, [pc, #56]	; (6f60 <_usb_host_interrupt_handler+0x4c4>)
    6f26:	2200      	movs	r2, #0
    6f28:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6f2a:	4b0c      	ldr	r3, [pc, #48]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f2c:	681b      	ldr	r3, [r3, #0]
    6f2e:	681b      	ldr	r3, [r3, #0]
    6f30:	2280      	movs	r2, #128	; 0x80
    6f32:	0092      	lsls	r2, r2, #2
    6f34:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6f36:	4b09      	ldr	r3, [pc, #36]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f38:	681b      	ldr	r3, [r3, #0]
    6f3a:	22a5      	movs	r2, #165	; 0xa5
    6f3c:	5c9b      	ldrb	r3, [r3, r2]
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	b25b      	sxtb	r3, r3
    6f42:	2b00      	cmp	r3, #0
    6f44:	da06      	bge.n	6f54 <_usb_host_interrupt_handler+0x4b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6f46:	4b05      	ldr	r3, [pc, #20]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f48:	681b      	ldr	r3, [r3, #0]
    6f4a:	6a1a      	ldr	r2, [r3, #32]
    6f4c:	4b03      	ldr	r3, [pc, #12]	; (6f5c <_usb_host_interrupt_handler+0x4c0>)
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	1c18      	adds	r0, r3, #0
    6f52:	4790      	blx	r2
			}
		}

	}
}
    6f54:	46bd      	mov	sp, r7
    6f56:	b002      	add	sp, #8
    6f58:	bd80      	pop	{r7, pc}
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	200001dc 	.word	0x200001dc
    6f60:	200001f4 	.word	0x200001f4

00006f64 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b084      	sub	sp, #16
    6f68:	af00      	add	r7, sp, #0
    6f6a:	60f8      	str	r0, [r7, #12]
    6f6c:	607a      	str	r2, [r7, #4]
    6f6e:	230b      	movs	r3, #11
    6f70:	18fb      	adds	r3, r7, r3
    6f72:	1c0a      	adds	r2, r1, #0
    6f74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    6f76:	230b      	movs	r3, #11
    6f78:	18fb      	adds	r3, r7, r3
    6f7a:	781a      	ldrb	r2, [r3, #0]
    6f7c:	68fb      	ldr	r3, [r7, #12]
    6f7e:	322e      	adds	r2, #46	; 0x2e
    6f80:	0092      	lsls	r2, r2, #2
    6f82:	6879      	ldr	r1, [r7, #4]
    6f84:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    6f86:	68fa      	ldr	r2, [r7, #12]
    6f88:	23aa      	movs	r3, #170	; 0xaa
    6f8a:	005b      	lsls	r3, r3, #1
    6f8c:	5ad2      	ldrh	r2, [r2, r3]
    6f8e:	230b      	movs	r3, #11
    6f90:	18fb      	adds	r3, r7, r3
    6f92:	7819      	ldrb	r1, [r3, #0]
    6f94:	4b06      	ldr	r3, [pc, #24]	; (6fb0 <usb_device_register_callback+0x4c>)
    6f96:	0049      	lsls	r1, r1, #1
    6f98:	5acb      	ldrh	r3, [r1, r3]
    6f9a:	4313      	orrs	r3, r2
    6f9c:	b299      	uxth	r1, r3
    6f9e:	68fa      	ldr	r2, [r7, #12]
    6fa0:	23aa      	movs	r3, #170	; 0xaa
    6fa2:	005b      	lsls	r3, r3, #1
    6fa4:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    6fa6:	2300      	movs	r3, #0
}
    6fa8:	1c18      	adds	r0, r3, #0
    6faa:	46bd      	mov	sp, r7
    6fac:	b004      	add	sp, #16
    6fae:	bd80      	pop	{r7, pc}
    6fb0:	00008f1c 	.word	0x00008f1c

00006fb4 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b082      	sub	sp, #8
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
    6fbc:	1c0a      	adds	r2, r1, #0
    6fbe:	1cfb      	adds	r3, r7, #3
    6fc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	1cfa      	adds	r2, r7, #3
    6fc8:	7811      	ldrb	r1, [r2, #0]
    6fca:	4a10      	ldr	r2, [pc, #64]	; (700c <usb_device_enable_callback+0x58>)
    6fcc:	0049      	lsls	r1, r1, #1
    6fce:	5a8a      	ldrh	r2, [r1, r2]
    6fd0:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    6fd2:	687a      	ldr	r2, [r7, #4]
    6fd4:	23ab      	movs	r3, #171	; 0xab
    6fd6:	005b      	lsls	r3, r3, #1
    6fd8:	5ad2      	ldrh	r2, [r2, r3]
    6fda:	1cfb      	adds	r3, r7, #3
    6fdc:	7819      	ldrb	r1, [r3, #0]
    6fde:	4b0b      	ldr	r3, [pc, #44]	; (700c <usb_device_enable_callback+0x58>)
    6fe0:	0049      	lsls	r1, r1, #1
    6fe2:	5acb      	ldrh	r3, [r1, r3]
    6fe4:	4313      	orrs	r3, r2
    6fe6:	b299      	uxth	r1, r3
    6fe8:	687a      	ldr	r2, [r7, #4]
    6fea:	23ab      	movs	r3, #171	; 0xab
    6fec:	005b      	lsls	r3, r3, #1
    6fee:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	681b      	ldr	r3, [r3, #0]
    6ff4:	1cfa      	adds	r2, r7, #3
    6ff6:	7811      	ldrb	r1, [r2, #0]
    6ff8:	4a04      	ldr	r2, [pc, #16]	; (700c <usb_device_enable_callback+0x58>)
    6ffa:	0049      	lsls	r1, r1, #1
    6ffc:	5a8a      	ldrh	r2, [r1, r2]
    6ffe:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    7000:	2300      	movs	r3, #0
}
    7002:	1c18      	adds	r0, r3, #0
    7004:	46bd      	mov	sp, r7
    7006:	b002      	add	sp, #8
    7008:	bd80      	pop	{r7, pc}
    700a:	46c0      	nop			; (mov r8, r8)
    700c:	00008f1c 	.word	0x00008f1c

00007010 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    7010:	b580      	push	{r7, lr}
    7012:	b082      	sub	sp, #8
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
    7018:	1c0a      	adds	r2, r1, #0
    701a:	1cfb      	adds	r3, r7, #3
    701c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    701e:	687a      	ldr	r2, [r7, #4]
    7020:	23ab      	movs	r3, #171	; 0xab
    7022:	005b      	lsls	r3, r3, #1
    7024:	5ad3      	ldrh	r3, [r2, r3]
    7026:	b299      	uxth	r1, r3
    7028:	1cfb      	adds	r3, r7, #3
    702a:	781a      	ldrb	r2, [r3, #0]
    702c:	4b0d      	ldr	r3, [pc, #52]	; (7064 <usb_device_disable_callback+0x54>)
    702e:	0052      	lsls	r2, r2, #1
    7030:	5ad3      	ldrh	r3, [r2, r3]
    7032:	b29b      	uxth	r3, r3
    7034:	43db      	mvns	r3, r3
    7036:	b29a      	uxth	r2, r3
    7038:	1c0b      	adds	r3, r1, #0
    703a:	4013      	ands	r3, r2
    703c:	b29b      	uxth	r3, r3
    703e:	b299      	uxth	r1, r3
    7040:	687a      	ldr	r2, [r7, #4]
    7042:	23ab      	movs	r3, #171	; 0xab
    7044:	005b      	lsls	r3, r3, #1
    7046:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	681b      	ldr	r3, [r3, #0]
    704c:	1cfa      	adds	r2, r7, #3
    704e:	7811      	ldrb	r1, [r2, #0]
    7050:	4a04      	ldr	r2, [pc, #16]	; (7064 <usb_device_disable_callback+0x54>)
    7052:	0049      	lsls	r1, r1, #1
    7054:	5a8a      	ldrh	r2, [r1, r2]
    7056:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    7058:	2300      	movs	r3, #0
}
    705a:	1c18      	adds	r0, r3, #0
    705c:	46bd      	mov	sp, r7
    705e:	b002      	add	sp, #8
    7060:	bd80      	pop	{r7, pc}
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	00008f1c 	.word	0x00008f1c

00007068 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    7068:	b580      	push	{r7, lr}
    706a:	b084      	sub	sp, #16
    706c:	af00      	add	r7, sp, #0
    706e:	60f8      	str	r0, [r7, #12]
    7070:	1c08      	adds	r0, r1, #0
    7072:	1c11      	adds	r1, r2, #0
    7074:	607b      	str	r3, [r7, #4]
    7076:	230b      	movs	r3, #11
    7078:	18fb      	adds	r3, r7, r3
    707a:	1c02      	adds	r2, r0, #0
    707c:	701a      	strb	r2, [r3, #0]
    707e:	230a      	movs	r3, #10
    7080:	18fb      	adds	r3, r7, r3
    7082:	1c0a      	adds	r2, r1, #0
    7084:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    7086:	230b      	movs	r3, #11
    7088:	18fb      	adds	r3, r7, r3
    708a:	7819      	ldrb	r1, [r3, #0]
    708c:	230a      	movs	r3, #10
    708e:	18fb      	adds	r3, r7, r3
    7090:	781b      	ldrb	r3, [r3, #0]
    7092:	68fa      	ldr	r2, [r7, #12]
    7094:	0089      	lsls	r1, r1, #2
    7096:	18cb      	adds	r3, r1, r3
    7098:	3334      	adds	r3, #52	; 0x34
    709a:	009b      	lsls	r3, r3, #2
    709c:	18d3      	adds	r3, r2, r3
    709e:	687a      	ldr	r2, [r7, #4]
    70a0:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    70a2:	230b      	movs	r3, #11
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	230b      	movs	r3, #11
    70aa:	18fb      	adds	r3, r7, r3
    70ac:	7819      	ldrb	r1, [r3, #0]
    70ae:	68f8      	ldr	r0, [r7, #12]
    70b0:	23ac      	movs	r3, #172	; 0xac
    70b2:	005b      	lsls	r3, r3, #1
    70b4:	1841      	adds	r1, r0, r1
    70b6:	18cb      	adds	r3, r1, r3
    70b8:	7819      	ldrb	r1, [r3, #0]
    70ba:	230a      	movs	r3, #10
    70bc:	18fb      	adds	r3, r7, r3
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	4807      	ldr	r0, [pc, #28]	; (70e0 <usb_device_endpoint_register_callback+0x78>)
    70c2:	5cc3      	ldrb	r3, [r0, r3]
    70c4:	430b      	orrs	r3, r1
    70c6:	b2d8      	uxtb	r0, r3
    70c8:	68f9      	ldr	r1, [r7, #12]
    70ca:	23ac      	movs	r3, #172	; 0xac
    70cc:	005b      	lsls	r3, r3, #1
    70ce:	188a      	adds	r2, r1, r2
    70d0:	18d3      	adds	r3, r2, r3
    70d2:	1c02      	adds	r2, r0, #0
    70d4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    70d6:	2300      	movs	r3, #0
}
    70d8:	1c18      	adds	r0, r3, #0
    70da:	46bd      	mov	sp, r7
    70dc:	b004      	add	sp, #16
    70de:	bd80      	pop	{r7, pc}
    70e0:	00008f2c 	.word	0x00008f2c

000070e4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    70e4:	b580      	push	{r7, lr}
    70e6:	b082      	sub	sp, #8
    70e8:	af00      	add	r7, sp, #0
    70ea:	6078      	str	r0, [r7, #4]
    70ec:	1c08      	adds	r0, r1, #0
    70ee:	1c11      	adds	r1, r2, #0
    70f0:	1cfb      	adds	r3, r7, #3
    70f2:	1c02      	adds	r2, r0, #0
    70f4:	701a      	strb	r2, [r3, #0]
    70f6:	1cbb      	adds	r3, r7, #2
    70f8:	1c0a      	adds	r2, r1, #0
    70fa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    70fc:	1cfb      	adds	r3, r7, #3
    70fe:	7819      	ldrb	r1, [r3, #0]
    7100:	1cbb      	adds	r3, r7, #2
    7102:	781b      	ldrb	r3, [r3, #0]
    7104:	687a      	ldr	r2, [r7, #4]
    7106:	0089      	lsls	r1, r1, #2
    7108:	18cb      	adds	r3, r1, r3
    710a:	3334      	adds	r3, #52	; 0x34
    710c:	009b      	lsls	r3, r3, #2
    710e:	18d3      	adds	r3, r2, r3
    7110:	2200      	movs	r2, #0
    7112:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    7114:	1cfb      	adds	r3, r7, #3
    7116:	781a      	ldrb	r2, [r3, #0]
    7118:	1cfb      	adds	r3, r7, #3
    711a:	7819      	ldrb	r1, [r3, #0]
    711c:	6878      	ldr	r0, [r7, #4]
    711e:	23ac      	movs	r3, #172	; 0xac
    7120:	005b      	lsls	r3, r3, #1
    7122:	1841      	adds	r1, r0, r1
    7124:	18cb      	adds	r3, r1, r3
    7126:	781b      	ldrb	r3, [r3, #0]
    7128:	b2d8      	uxtb	r0, r3
    712a:	1cbb      	adds	r3, r7, #2
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	490a      	ldr	r1, [pc, #40]	; (7158 <usb_device_endpoint_unregister_callback+0x74>)
    7130:	5ccb      	ldrb	r3, [r1, r3]
    7132:	b2db      	uxtb	r3, r3
    7134:	43db      	mvns	r3, r3
    7136:	b2d9      	uxtb	r1, r3
    7138:	1c03      	adds	r3, r0, #0
    713a:	400b      	ands	r3, r1
    713c:	b2db      	uxtb	r3, r3
    713e:	b2d8      	uxtb	r0, r3
    7140:	6879      	ldr	r1, [r7, #4]
    7142:	23ac      	movs	r3, #172	; 0xac
    7144:	005b      	lsls	r3, r3, #1
    7146:	188a      	adds	r2, r1, r2
    7148:	18d3      	adds	r3, r2, r3
    714a:	1c02      	adds	r2, r0, #0
    714c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    714e:	2300      	movs	r3, #0
}
    7150:	1c18      	adds	r0, r3, #0
    7152:	46bd      	mov	sp, r7
    7154:	b002      	add	sp, #8
    7156:	bd80      	pop	{r7, pc}
    7158:	00008f2c 	.word	0x00008f2c

0000715c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    715c:	b580      	push	{r7, lr}
    715e:	b084      	sub	sp, #16
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
    7164:	1c08      	adds	r0, r1, #0
    7166:	1c11      	adds	r1, r2, #0
    7168:	1cfb      	adds	r3, r7, #3
    716a:	1c02      	adds	r2, r0, #0
    716c:	701a      	strb	r2, [r3, #0]
    716e:	1cbb      	adds	r3, r7, #2
    7170:	1c0a      	adds	r2, r1, #0
    7172:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7174:	230f      	movs	r3, #15
    7176:	18fb      	adds	r3, r7, r3
    7178:	1cfa      	adds	r2, r7, #3
    717a:	7812      	ldrb	r2, [r2, #0]
    717c:	210f      	movs	r1, #15
    717e:	400a      	ands	r2, r1
    7180:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    7182:	230f      	movs	r3, #15
    7184:	18fb      	adds	r3, r7, r3
    7186:	781a      	ldrb	r2, [r3, #0]
    7188:	230f      	movs	r3, #15
    718a:	18fb      	adds	r3, r7, r3
    718c:	7819      	ldrb	r1, [r3, #0]
    718e:	6878      	ldr	r0, [r7, #4]
    7190:	23b0      	movs	r3, #176	; 0xb0
    7192:	005b      	lsls	r3, r3, #1
    7194:	1841      	adds	r1, r0, r1
    7196:	18cb      	adds	r3, r1, r3
    7198:	7819      	ldrb	r1, [r3, #0]
    719a:	1cbb      	adds	r3, r7, #2
    719c:	781b      	ldrb	r3, [r3, #0]
    719e:	4855      	ldr	r0, [pc, #340]	; (72f4 <usb_device_endpoint_enable_callback+0x198>)
    71a0:	5cc3      	ldrb	r3, [r0, r3]
    71a2:	430b      	orrs	r3, r1
    71a4:	b2d8      	uxtb	r0, r3
    71a6:	6879      	ldr	r1, [r7, #4]
    71a8:	23b0      	movs	r3, #176	; 0xb0
    71aa:	005b      	lsls	r3, r3, #1
    71ac:	188a      	adds	r2, r1, r2
    71ae:	18d3      	adds	r3, r2, r3
    71b0:	1c02      	adds	r2, r0, #0
    71b2:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    71b4:	1cbb      	adds	r3, r7, #2
    71b6:	781b      	ldrb	r3, [r3, #0]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d12f      	bne.n	721c <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    71bc:	230f      	movs	r3, #15
    71be:	18fb      	adds	r3, r7, r3
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	2b00      	cmp	r3, #0
    71c4:	d10c      	bne.n	71e0 <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	6819      	ldr	r1, [r3, #0]
    71ca:	230f      	movs	r3, #15
    71cc:	18fb      	adds	r3, r7, r3
    71ce:	781a      	ldrb	r2, [r3, #0]
    71d0:	2384      	movs	r3, #132	; 0x84
    71d2:	005b      	lsls	r3, r3, #1
    71d4:	0152      	lsls	r2, r2, #5
    71d6:	188a      	adds	r2, r1, r2
    71d8:	18d3      	adds	r3, r2, r3
    71da:	2203      	movs	r2, #3
    71dc:	705a      	strb	r2, [r3, #1]
    71de:	e01d      	b.n	721c <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    71e0:	1cfb      	adds	r3, r7, #3
    71e2:	781b      	ldrb	r3, [r3, #0]
    71e4:	b25b      	sxtb	r3, r3
    71e6:	2b00      	cmp	r3, #0
    71e8:	da0c      	bge.n	7204 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	6819      	ldr	r1, [r3, #0]
    71ee:	230f      	movs	r3, #15
    71f0:	18fb      	adds	r3, r7, r3
    71f2:	781a      	ldrb	r2, [r3, #0]
    71f4:	2384      	movs	r3, #132	; 0x84
    71f6:	005b      	lsls	r3, r3, #1
    71f8:	0152      	lsls	r2, r2, #5
    71fa:	188a      	adds	r2, r1, r2
    71fc:	18d3      	adds	r3, r2, r3
    71fe:	2202      	movs	r2, #2
    7200:	705a      	strb	r2, [r3, #1]
    7202:	e00b      	b.n	721c <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	6819      	ldr	r1, [r3, #0]
    7208:	230f      	movs	r3, #15
    720a:	18fb      	adds	r3, r7, r3
    720c:	781a      	ldrb	r2, [r3, #0]
    720e:	2384      	movs	r3, #132	; 0x84
    7210:	005b      	lsls	r3, r3, #1
    7212:	0152      	lsls	r2, r2, #5
    7214:	188a      	adds	r2, r1, r2
    7216:	18d3      	adds	r3, r2, r3
    7218:	2201      	movs	r2, #1
    721a:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    721c:	1cbb      	adds	r3, r7, #2
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	2b01      	cmp	r3, #1
    7222:	d12f      	bne.n	7284 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    7224:	230f      	movs	r3, #15
    7226:	18fb      	adds	r3, r7, r3
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	2b00      	cmp	r3, #0
    722c:	d10c      	bne.n	7248 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    722e:	687b      	ldr	r3, [r7, #4]
    7230:	6819      	ldr	r1, [r3, #0]
    7232:	230f      	movs	r3, #15
    7234:	18fb      	adds	r3, r7, r3
    7236:	781a      	ldrb	r2, [r3, #0]
    7238:	2384      	movs	r3, #132	; 0x84
    723a:	005b      	lsls	r3, r3, #1
    723c:	0152      	lsls	r2, r2, #5
    723e:	188a      	adds	r2, r1, r2
    7240:	18d3      	adds	r3, r2, r3
    7242:	220c      	movs	r2, #12
    7244:	705a      	strb	r2, [r3, #1]
    7246:	e01d      	b.n	7284 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    7248:	1cfb      	adds	r3, r7, #3
    724a:	781b      	ldrb	r3, [r3, #0]
    724c:	b25b      	sxtb	r3, r3
    724e:	2b00      	cmp	r3, #0
    7250:	da0c      	bge.n	726c <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	6819      	ldr	r1, [r3, #0]
    7256:	230f      	movs	r3, #15
    7258:	18fb      	adds	r3, r7, r3
    725a:	781a      	ldrb	r2, [r3, #0]
    725c:	2384      	movs	r3, #132	; 0x84
    725e:	005b      	lsls	r3, r3, #1
    7260:	0152      	lsls	r2, r2, #5
    7262:	188a      	adds	r2, r1, r2
    7264:	18d3      	adds	r3, r2, r3
    7266:	2208      	movs	r2, #8
    7268:	705a      	strb	r2, [r3, #1]
    726a:	e00b      	b.n	7284 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	6819      	ldr	r1, [r3, #0]
    7270:	230f      	movs	r3, #15
    7272:	18fb      	adds	r3, r7, r3
    7274:	781a      	ldrb	r2, [r3, #0]
    7276:	2384      	movs	r3, #132	; 0x84
    7278:	005b      	lsls	r3, r3, #1
    727a:	0152      	lsls	r2, r2, #5
    727c:	188a      	adds	r2, r1, r2
    727e:	18d3      	adds	r3, r2, r3
    7280:	2204      	movs	r2, #4
    7282:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    7284:	1cbb      	adds	r3, r7, #2
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	2b02      	cmp	r3, #2
    728a:	d10b      	bne.n	72a4 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    728c:	687b      	ldr	r3, [r7, #4]
    728e:	6819      	ldr	r1, [r3, #0]
    7290:	230f      	movs	r3, #15
    7292:	18fb      	adds	r3, r7, r3
    7294:	781a      	ldrb	r2, [r3, #0]
    7296:	2384      	movs	r3, #132	; 0x84
    7298:	005b      	lsls	r3, r3, #1
    729a:	0152      	lsls	r2, r2, #5
    729c:	188a      	adds	r2, r1, r2
    729e:	18d3      	adds	r3, r2, r3
    72a0:	2210      	movs	r2, #16
    72a2:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    72a4:	1cbb      	adds	r3, r7, #2
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	2b03      	cmp	r3, #3
    72aa:	d11d      	bne.n	72e8 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    72ac:	1cfb      	adds	r3, r7, #3
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	b25b      	sxtb	r3, r3
    72b2:	2b00      	cmp	r3, #0
    72b4:	da0c      	bge.n	72d0 <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    72b6:	687b      	ldr	r3, [r7, #4]
    72b8:	6819      	ldr	r1, [r3, #0]
    72ba:	230f      	movs	r3, #15
    72bc:	18fb      	adds	r3, r7, r3
    72be:	781a      	ldrb	r2, [r3, #0]
    72c0:	2384      	movs	r3, #132	; 0x84
    72c2:	005b      	lsls	r3, r3, #1
    72c4:	0152      	lsls	r2, r2, #5
    72c6:	188a      	adds	r2, r1, r2
    72c8:	18d3      	adds	r3, r2, r3
    72ca:	2240      	movs	r2, #64	; 0x40
    72cc:	705a      	strb	r2, [r3, #1]
    72ce:	e00b      	b.n	72e8 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	6819      	ldr	r1, [r3, #0]
    72d4:	230f      	movs	r3, #15
    72d6:	18fb      	adds	r3, r7, r3
    72d8:	781a      	ldrb	r2, [r3, #0]
    72da:	2384      	movs	r3, #132	; 0x84
    72dc:	005b      	lsls	r3, r3, #1
    72de:	0152      	lsls	r2, r2, #5
    72e0:	188a      	adds	r2, r1, r2
    72e2:	18d3      	adds	r3, r2, r3
    72e4:	2220      	movs	r2, #32
    72e6:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    72e8:	2300      	movs	r3, #0
}
    72ea:	1c18      	adds	r0, r3, #0
    72ec:	46bd      	mov	sp, r7
    72ee:	b004      	add	sp, #16
    72f0:	bd80      	pop	{r7, pc}
    72f2:	46c0      	nop			; (mov r8, r8)
    72f4:	00008f2c 	.word	0x00008f2c

000072f8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    72f8:	b580      	push	{r7, lr}
    72fa:	b084      	sub	sp, #16
    72fc:	af00      	add	r7, sp, #0
    72fe:	6078      	str	r0, [r7, #4]
    7300:	1c08      	adds	r0, r1, #0
    7302:	1c11      	adds	r1, r2, #0
    7304:	1cfb      	adds	r3, r7, #3
    7306:	1c02      	adds	r2, r0, #0
    7308:	701a      	strb	r2, [r3, #0]
    730a:	1cbb      	adds	r3, r7, #2
    730c:	1c0a      	adds	r2, r1, #0
    730e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7310:	230f      	movs	r3, #15
    7312:	18fb      	adds	r3, r7, r3
    7314:	1cfa      	adds	r2, r7, #3
    7316:	7812      	ldrb	r2, [r2, #0]
    7318:	210f      	movs	r1, #15
    731a:	400a      	ands	r2, r1
    731c:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    731e:	230f      	movs	r3, #15
    7320:	18fb      	adds	r3, r7, r3
    7322:	781a      	ldrb	r2, [r3, #0]
    7324:	230f      	movs	r3, #15
    7326:	18fb      	adds	r3, r7, r3
    7328:	7819      	ldrb	r1, [r3, #0]
    732a:	6878      	ldr	r0, [r7, #4]
    732c:	23b0      	movs	r3, #176	; 0xb0
    732e:	005b      	lsls	r3, r3, #1
    7330:	1841      	adds	r1, r0, r1
    7332:	18cb      	adds	r3, r1, r3
    7334:	781b      	ldrb	r3, [r3, #0]
    7336:	b2d8      	uxtb	r0, r3
    7338:	1cbb      	adds	r3, r7, #2
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	4957      	ldr	r1, [pc, #348]	; (749c <usb_device_endpoint_disable_callback+0x1a4>)
    733e:	5ccb      	ldrb	r3, [r1, r3]
    7340:	b2db      	uxtb	r3, r3
    7342:	43db      	mvns	r3, r3
    7344:	b2d9      	uxtb	r1, r3
    7346:	1c03      	adds	r3, r0, #0
    7348:	400b      	ands	r3, r1
    734a:	b2db      	uxtb	r3, r3
    734c:	b2d8      	uxtb	r0, r3
    734e:	6879      	ldr	r1, [r7, #4]
    7350:	23b0      	movs	r3, #176	; 0xb0
    7352:	005b      	lsls	r3, r3, #1
    7354:	188a      	adds	r2, r1, r2
    7356:	18d3      	adds	r3, r2, r3
    7358:	1c02      	adds	r2, r0, #0
    735a:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    735c:	1cbb      	adds	r3, r7, #2
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	2b00      	cmp	r3, #0
    7362:	d12f      	bne.n	73c4 <usb_device_endpoint_disable_callback+0xcc>
		if (ep_num == 0) { // control endpoint
    7364:	230f      	movs	r3, #15
    7366:	18fb      	adds	r3, r7, r3
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	2b00      	cmp	r3, #0
    736c:	d10c      	bne.n	7388 <usb_device_endpoint_disable_callback+0x90>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	6819      	ldr	r1, [r3, #0]
    7372:	230f      	movs	r3, #15
    7374:	18fb      	adds	r3, r7, r3
    7376:	781a      	ldrb	r2, [r3, #0]
    7378:	2384      	movs	r3, #132	; 0x84
    737a:	005b      	lsls	r3, r3, #1
    737c:	0152      	lsls	r2, r2, #5
    737e:	188a      	adds	r2, r1, r2
    7380:	18d3      	adds	r3, r2, r3
    7382:	2203      	movs	r2, #3
    7384:	701a      	strb	r2, [r3, #0]
    7386:	e01d      	b.n	73c4 <usb_device_endpoint_disable_callback+0xcc>
		} else if (ep & USB_EP_DIR_IN) {
    7388:	1cfb      	adds	r3, r7, #3
    738a:	781b      	ldrb	r3, [r3, #0]
    738c:	b25b      	sxtb	r3, r3
    738e:	2b00      	cmp	r3, #0
    7390:	da0c      	bge.n	73ac <usb_device_endpoint_disable_callback+0xb4>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	6819      	ldr	r1, [r3, #0]
    7396:	230f      	movs	r3, #15
    7398:	18fb      	adds	r3, r7, r3
    739a:	781a      	ldrb	r2, [r3, #0]
    739c:	2384      	movs	r3, #132	; 0x84
    739e:	005b      	lsls	r3, r3, #1
    73a0:	0152      	lsls	r2, r2, #5
    73a2:	188a      	adds	r2, r1, r2
    73a4:	18d3      	adds	r3, r2, r3
    73a6:	2202      	movs	r2, #2
    73a8:	701a      	strb	r2, [r3, #0]
    73aa:	e00b      	b.n	73c4 <usb_device_endpoint_disable_callback+0xcc>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	6819      	ldr	r1, [r3, #0]
    73b0:	230f      	movs	r3, #15
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	781a      	ldrb	r2, [r3, #0]
    73b6:	2384      	movs	r3, #132	; 0x84
    73b8:	005b      	lsls	r3, r3, #1
    73ba:	0152      	lsls	r2, r2, #5
    73bc:	188a      	adds	r2, r1, r2
    73be:	18d3      	adds	r3, r2, r3
    73c0:	2201      	movs	r2, #1
    73c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    73c4:	1cbb      	adds	r3, r7, #2
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	2b01      	cmp	r3, #1
    73ca:	d12f      	bne.n	742c <usb_device_endpoint_disable_callback+0x134>
		if (ep_num == 0) { // control endpoint
    73cc:	230f      	movs	r3, #15
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d10c      	bne.n	73f0 <usb_device_endpoint_disable_callback+0xf8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    73d6:	687b      	ldr	r3, [r7, #4]
    73d8:	6819      	ldr	r1, [r3, #0]
    73da:	230f      	movs	r3, #15
    73dc:	18fb      	adds	r3, r7, r3
    73de:	781a      	ldrb	r2, [r3, #0]
    73e0:	2384      	movs	r3, #132	; 0x84
    73e2:	005b      	lsls	r3, r3, #1
    73e4:	0152      	lsls	r2, r2, #5
    73e6:	188a      	adds	r2, r1, r2
    73e8:	18d3      	adds	r3, r2, r3
    73ea:	220c      	movs	r2, #12
    73ec:	701a      	strb	r2, [r3, #0]
    73ee:	e01d      	b.n	742c <usb_device_endpoint_disable_callback+0x134>
		} else if (ep & USB_EP_DIR_IN) {
    73f0:	1cfb      	adds	r3, r7, #3
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	b25b      	sxtb	r3, r3
    73f6:	2b00      	cmp	r3, #0
    73f8:	da0c      	bge.n	7414 <usb_device_endpoint_disable_callback+0x11c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	6819      	ldr	r1, [r3, #0]
    73fe:	230f      	movs	r3, #15
    7400:	18fb      	adds	r3, r7, r3
    7402:	781a      	ldrb	r2, [r3, #0]
    7404:	2384      	movs	r3, #132	; 0x84
    7406:	005b      	lsls	r3, r3, #1
    7408:	0152      	lsls	r2, r2, #5
    740a:	188a      	adds	r2, r1, r2
    740c:	18d3      	adds	r3, r2, r3
    740e:	2208      	movs	r2, #8
    7410:	701a      	strb	r2, [r3, #0]
    7412:	e00b      	b.n	742c <usb_device_endpoint_disable_callback+0x134>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	6819      	ldr	r1, [r3, #0]
    7418:	230f      	movs	r3, #15
    741a:	18fb      	adds	r3, r7, r3
    741c:	781a      	ldrb	r2, [r3, #0]
    741e:	2384      	movs	r3, #132	; 0x84
    7420:	005b      	lsls	r3, r3, #1
    7422:	0152      	lsls	r2, r2, #5
    7424:	188a      	adds	r2, r1, r2
    7426:	18d3      	adds	r3, r2, r3
    7428:	2204      	movs	r2, #4
    742a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    742c:	1cbb      	adds	r3, r7, #2
    742e:	781b      	ldrb	r3, [r3, #0]
    7430:	2b02      	cmp	r3, #2
    7432:	d10b      	bne.n	744c <usb_device_endpoint_disable_callback+0x154>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	6819      	ldr	r1, [r3, #0]
    7438:	230f      	movs	r3, #15
    743a:	18fb      	adds	r3, r7, r3
    743c:	781a      	ldrb	r2, [r3, #0]
    743e:	2384      	movs	r3, #132	; 0x84
    7440:	005b      	lsls	r3, r3, #1
    7442:	0152      	lsls	r2, r2, #5
    7444:	188a      	adds	r2, r1, r2
    7446:	18d3      	adds	r3, r2, r3
    7448:	2210      	movs	r2, #16
    744a:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    744c:	1cbb      	adds	r3, r7, #2
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	2b03      	cmp	r3, #3
    7452:	d11d      	bne.n	7490 <usb_device_endpoint_disable_callback+0x198>
		if (ep & USB_EP_DIR_IN) {
    7454:	1cfb      	adds	r3, r7, #3
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	b25b      	sxtb	r3, r3
    745a:	2b00      	cmp	r3, #0
    745c:	da0c      	bge.n	7478 <usb_device_endpoint_disable_callback+0x180>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	6819      	ldr	r1, [r3, #0]
    7462:	230f      	movs	r3, #15
    7464:	18fb      	adds	r3, r7, r3
    7466:	781a      	ldrb	r2, [r3, #0]
    7468:	2384      	movs	r3, #132	; 0x84
    746a:	005b      	lsls	r3, r3, #1
    746c:	0152      	lsls	r2, r2, #5
    746e:	188a      	adds	r2, r1, r2
    7470:	18d3      	adds	r3, r2, r3
    7472:	2240      	movs	r2, #64	; 0x40
    7474:	701a      	strb	r2, [r3, #0]
    7476:	e00b      	b.n	7490 <usb_device_endpoint_disable_callback+0x198>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	6819      	ldr	r1, [r3, #0]
    747c:	230f      	movs	r3, #15
    747e:	18fb      	adds	r3, r7, r3
    7480:	781a      	ldrb	r2, [r3, #0]
    7482:	2384      	movs	r3, #132	; 0x84
    7484:	005b      	lsls	r3, r3, #1
    7486:	0152      	lsls	r2, r2, #5
    7488:	188a      	adds	r2, r1, r2
    748a:	18d3      	adds	r3, r2, r3
    748c:	2220      	movs	r2, #32
    748e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    7490:	2300      	movs	r3, #0
}
    7492:	1c18      	adds	r0, r3, #0
    7494:	46bd      	mov	sp, r7
    7496:	b004      	add	sp, #16
    7498:	bd80      	pop	{r7, pc}
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	00008f2c 	.word	0x00008f2c

000074a0 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    74a0:	b580      	push	{r7, lr}
    74a2:	b082      	sub	sp, #8
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	2200      	movs	r2, #0
    74ac:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	2200      	movs	r2, #0
    74b2:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	2200      	movs	r2, #0
    74b8:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    74ba:	687b      	ldr	r3, [r7, #4]
    74bc:	2201      	movs	r2, #1
    74be:	70da      	strb	r2, [r3, #3]
}
    74c0:	46bd      	mov	sp, r7
    74c2:	b002      	add	sp, #8
    74c4:	bd80      	pop	{r7, pc}
    74c6:	46c0      	nop			; (mov r8, r8)

000074c8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    74c8:	b590      	push	{r4, r7, lr}
    74ca:	b085      	sub	sp, #20
    74cc:	af00      	add	r7, sp, #0
    74ce:	6078      	str	r0, [r7, #4]
    74d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    74d2:	683b      	ldr	r3, [r7, #0]
    74d4:	781a      	ldrb	r2, [r3, #0]
    74d6:	230f      	movs	r3, #15
    74d8:	18fb      	adds	r3, r7, r3
    74da:	210f      	movs	r1, #15
    74dc:	400a      	ands	r2, r1
    74de:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    74e0:	683b      	ldr	r3, [r7, #0]
    74e2:	781b      	ldrb	r3, [r3, #0]
    74e4:	b2db      	uxtb	r3, r3
    74e6:	09db      	lsrs	r3, r3, #7
    74e8:	b2da      	uxtb	r2, r3
    74ea:	230e      	movs	r3, #14
    74ec:	18fb      	adds	r3, r7, r3
    74ee:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    74f0:	683b      	ldr	r3, [r7, #0]
    74f2:	78db      	ldrb	r3, [r3, #3]
    74f4:	2b04      	cmp	r3, #4
    74f6:	d900      	bls.n	74fa <usb_device_endpoint_set_config+0x32>
    74f8:	e1f7      	b.n	78ea <usb_device_endpoint_set_config+0x422>
    74fa:	009a      	lsls	r2, r3, #2
    74fc:	4bdf      	ldr	r3, [pc, #892]	; (787c <usb_device_endpoint_set_config+0x3b4>)
    74fe:	18d3      	adds	r3, r2, r3
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    7504:	687b      	ldr	r3, [r7, #4]
    7506:	681b      	ldr	r3, [r3, #0]
    7508:	220f      	movs	r2, #15
    750a:	18ba      	adds	r2, r7, r2
    750c:	7812      	ldrb	r2, [r2, #0]
    750e:	3208      	adds	r2, #8
    7510:	0152      	lsls	r2, r2, #5
    7512:	2100      	movs	r1, #0
    7514:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    7516:	2300      	movs	r3, #0
    7518:	e23c      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    751a:	687b      	ldr	r3, [r7, #4]
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	220f      	movs	r2, #15
    7520:	18ba      	adds	r2, r7, r2
    7522:	7812      	ldrb	r2, [r2, #0]
    7524:	3208      	adds	r2, #8
    7526:	0152      	lsls	r2, r2, #5
    7528:	5cd3      	ldrb	r3, [r2, r3]
    752a:	b2db      	uxtb	r3, r3
    752c:	1c1a      	adds	r2, r3, #0
    752e:	2307      	movs	r3, #7
    7530:	4013      	ands	r3, r2
    7532:	d12e      	bne.n	7592 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    7534:	687b      	ldr	r3, [r7, #4]
    7536:	681b      	ldr	r3, [r3, #0]
    7538:	220f      	movs	r2, #15
    753a:	18ba      	adds	r2, r7, r2
    753c:	7812      	ldrb	r2, [r2, #0]
    753e:	3208      	adds	r2, #8
    7540:	0152      	lsls	r2, r2, #5
    7542:	5cd3      	ldrb	r3, [r2, r3]
    7544:	b2db      	uxtb	r3, r3
    7546:	1c1a      	adds	r2, r3, #0
    7548:	2370      	movs	r3, #112	; 0x70
    754a:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    754c:	d121      	bne.n	7592 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    754e:	687b      	ldr	r3, [r7, #4]
    7550:	681b      	ldr	r3, [r3, #0]
    7552:	220f      	movs	r2, #15
    7554:	18ba      	adds	r2, r7, r2
    7556:	7812      	ldrb	r2, [r2, #0]
    7558:	3208      	adds	r2, #8
    755a:	0152      	lsls	r2, r2, #5
    755c:	2111      	movs	r1, #17
    755e:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	681a      	ldr	r2, [r3, #0]
    7564:	230f      	movs	r3, #15
    7566:	18fb      	adds	r3, r7, r3
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	3308      	adds	r3, #8
    756c:	015b      	lsls	r3, r3, #5
    756e:	18d3      	adds	r3, r2, r3
    7570:	2240      	movs	r2, #64	; 0x40
    7572:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	681a      	ldr	r2, [r3, #0]
    7578:	230f      	movs	r3, #15
    757a:	18fb      	adds	r3, r7, r3
    757c:	781b      	ldrb	r3, [r3, #0]
    757e:	3308      	adds	r3, #8
    7580:	015b      	lsls	r3, r3, #5
    7582:	18d3      	adds	r3, r2, r3
    7584:	2280      	movs	r2, #128	; 0x80
    7586:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    7588:	683b      	ldr	r3, [r7, #0]
    758a:	789b      	ldrb	r3, [r3, #2]
    758c:	2b00      	cmp	r3, #0
    758e:	d102      	bne.n	7596 <usb_device_endpoint_set_config+0xce>
    7590:	e026      	b.n	75e0 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    7592:	231c      	movs	r3, #28
    7594:	e1fe      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7596:	230f      	movs	r3, #15
    7598:	18fb      	adds	r3, r7, r3
    759a:	7818      	ldrb	r0, [r3, #0]
    759c:	230f      	movs	r3, #15
    759e:	18fb      	adds	r3, r7, r3
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	4ab7      	ldr	r2, [pc, #732]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75a4:	015b      	lsls	r3, r3, #5
    75a6:	18d3      	adds	r3, r2, r3
    75a8:	685b      	ldr	r3, [r3, #4]
    75aa:	2280      	movs	r2, #128	; 0x80
    75ac:	0612      	lsls	r2, r2, #24
    75ae:	431a      	orrs	r2, r3
    75b0:	49b3      	ldr	r1, [pc, #716]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75b2:	0143      	lsls	r3, r0, #5
    75b4:	18cb      	adds	r3, r1, r3
    75b6:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    75b8:	230f      	movs	r3, #15
    75ba:	18fb      	adds	r3, r7, r3
    75bc:	7818      	ldrb	r0, [r3, #0]
    75be:	230f      	movs	r3, #15
    75c0:	18fb      	adds	r3, r7, r3
    75c2:	781b      	ldrb	r3, [r3, #0]
    75c4:	4aae      	ldr	r2, [pc, #696]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75c6:	015b      	lsls	r3, r3, #5
    75c8:	18d3      	adds	r3, r2, r3
    75ca:	3310      	adds	r3, #16
    75cc:	685b      	ldr	r3, [r3, #4]
    75ce:	2280      	movs	r2, #128	; 0x80
    75d0:	0612      	lsls	r2, r2, #24
    75d2:	431a      	orrs	r2, r3
    75d4:	49aa      	ldr	r1, [pc, #680]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75d6:	0143      	lsls	r3, r0, #5
    75d8:	18cb      	adds	r3, r1, r3
    75da:	3310      	adds	r3, #16
    75dc:	605a      	str	r2, [r3, #4]
    75de:	e021      	b.n	7624 <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    75e0:	230f      	movs	r3, #15
    75e2:	18fb      	adds	r3, r7, r3
    75e4:	7818      	ldrb	r0, [r3, #0]
    75e6:	230f      	movs	r3, #15
    75e8:	18fb      	adds	r3, r7, r3
    75ea:	781b      	ldrb	r3, [r3, #0]
    75ec:	4aa4      	ldr	r2, [pc, #656]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75ee:	015b      	lsls	r3, r3, #5
    75f0:	18d3      	adds	r3, r2, r3
    75f2:	685b      	ldr	r3, [r3, #4]
    75f4:	005b      	lsls	r3, r3, #1
    75f6:	085a      	lsrs	r2, r3, #1
    75f8:	49a1      	ldr	r1, [pc, #644]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    75fa:	0143      	lsls	r3, r0, #5
    75fc:	18cb      	adds	r3, r1, r3
    75fe:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7600:	230f      	movs	r3, #15
    7602:	18fb      	adds	r3, r7, r3
    7604:	7818      	ldrb	r0, [r3, #0]
    7606:	230f      	movs	r3, #15
    7608:	18fb      	adds	r3, r7, r3
    760a:	781b      	ldrb	r3, [r3, #0]
    760c:	4a9c      	ldr	r2, [pc, #624]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    760e:	015b      	lsls	r3, r3, #5
    7610:	18d3      	adds	r3, r2, r3
    7612:	3310      	adds	r3, #16
    7614:	685b      	ldr	r3, [r3, #4]
    7616:	005b      	lsls	r3, r3, #1
    7618:	085a      	lsrs	r2, r3, #1
    761a:	4999      	ldr	r1, [pc, #612]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    761c:	0143      	lsls	r3, r0, #5
    761e:	18cb      	adds	r3, r1, r3
    7620:	3310      	adds	r3, #16
    7622:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    7624:	230f      	movs	r3, #15
    7626:	18fb      	adds	r3, r7, r3
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	683a      	ldr	r2, [r7, #0]
    762c:	7852      	ldrb	r2, [r2, #1]
    762e:	1c11      	adds	r1, r2, #0
    7630:	2207      	movs	r2, #7
    7632:	400a      	ands	r2, r1
    7634:	b2d2      	uxtb	r2, r2
    7636:	4992      	ldr	r1, [pc, #584]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    7638:	015b      	lsls	r3, r3, #5
    763a:	18cb      	adds	r3, r1, r3
    763c:	2107      	movs	r1, #7
    763e:	400a      	ands	r2, r1
    7640:	0712      	lsls	r2, r2, #28
    7642:	6859      	ldr	r1, [r3, #4]
    7644:	488f      	ldr	r0, [pc, #572]	; (7884 <usb_device_endpoint_set_config+0x3bc>)
    7646:	4001      	ands	r1, r0
    7648:	430a      	orrs	r2, r1
    764a:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    764c:	230f      	movs	r3, #15
    764e:	18fb      	adds	r3, r7, r3
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	683a      	ldr	r2, [r7, #0]
    7654:	7852      	ldrb	r2, [r2, #1]
    7656:	1c11      	adds	r1, r2, #0
    7658:	2207      	movs	r2, #7
    765a:	400a      	ands	r2, r1
    765c:	b2d2      	uxtb	r2, r2
    765e:	4988      	ldr	r1, [pc, #544]	; (7880 <usb_device_endpoint_set_config+0x3b8>)
    7660:	015b      	lsls	r3, r3, #5
    7662:	18cb      	adds	r3, r1, r3
    7664:	3310      	adds	r3, #16
    7666:	2107      	movs	r1, #7
    7668:	400a      	ands	r2, r1
    766a:	0712      	lsls	r2, r2, #28
    766c:	6859      	ldr	r1, [r3, #4]
    766e:	4885      	ldr	r0, [pc, #532]	; (7884 <usb_device_endpoint_set_config+0x3bc>)
    7670:	4001      	ands	r1, r0
    7672:	430a      	orrs	r2, r1
    7674:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    7676:	2300      	movs	r3, #0
    7678:	e18c      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    767a:	230e      	movs	r3, #14
    767c:	18fb      	adds	r3, r7, r3
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	2b00      	cmp	r3, #0
    7682:	d02f      	beq.n	76e4 <usb_device_endpoint_set_config+0x21c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	681b      	ldr	r3, [r3, #0]
    7688:	220f      	movs	r2, #15
    768a:	18ba      	adds	r2, r7, r2
    768c:	7812      	ldrb	r2, [r2, #0]
    768e:	3208      	adds	r2, #8
    7690:	0152      	lsls	r2, r2, #5
    7692:	5cd3      	ldrb	r3, [r2, r3]
    7694:	b2db      	uxtb	r3, r3
    7696:	1c1a      	adds	r2, r3, #0
    7698:	2370      	movs	r3, #112	; 0x70
    769a:	4013      	ands	r3, r2
    769c:	d120      	bne.n	76e0 <usb_device_endpoint_set_config+0x218>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	681a      	ldr	r2, [r3, #0]
    76a2:	230f      	movs	r3, #15
    76a4:	18fb      	adds	r3, r7, r3
    76a6:	7819      	ldrb	r1, [r3, #0]
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	681b      	ldr	r3, [r3, #0]
    76ac:	200f      	movs	r0, #15
    76ae:	1838      	adds	r0, r7, r0
    76b0:	7800      	ldrb	r0, [r0, #0]
    76b2:	3008      	adds	r0, #8
    76b4:	0140      	lsls	r0, r0, #5
    76b6:	5cc3      	ldrb	r3, [r0, r3]
    76b8:	b2db      	uxtb	r3, r3
    76ba:	2020      	movs	r0, #32
    76bc:	4303      	orrs	r3, r0
    76be:	b2d8      	uxtb	r0, r3
    76c0:	1c0b      	adds	r3, r1, #0
    76c2:	3308      	adds	r3, #8
    76c4:	015b      	lsls	r3, r3, #5
    76c6:	1c01      	adds	r1, r0, #0
    76c8:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	681a      	ldr	r2, [r3, #0]
    76ce:	230f      	movs	r3, #15
    76d0:	18fb      	adds	r3, r7, r3
    76d2:	781b      	ldrb	r3, [r3, #0]
    76d4:	3308      	adds	r3, #8
    76d6:	015b      	lsls	r3, r3, #5
    76d8:	18d3      	adds	r3, r2, r3
    76da:	2280      	movs	r2, #128	; 0x80
    76dc:	711a      	strb	r2, [r3, #4]
    76de:	e031      	b.n	7744 <usb_device_endpoint_set_config+0x27c>
				} else {
					return STATUS_ERR_DENIED;
    76e0:	231c      	movs	r3, #28
    76e2:	e157      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	681b      	ldr	r3, [r3, #0]
    76e8:	220f      	movs	r2, #15
    76ea:	18ba      	adds	r2, r7, r2
    76ec:	7812      	ldrb	r2, [r2, #0]
    76ee:	3208      	adds	r2, #8
    76f0:	0152      	lsls	r2, r2, #5
    76f2:	5cd3      	ldrb	r3, [r2, r3]
    76f4:	b2db      	uxtb	r3, r3
    76f6:	1c1a      	adds	r2, r3, #0
    76f8:	2307      	movs	r3, #7
    76fa:	4013      	ands	r3, r2
    76fc:	d120      	bne.n	7740 <usb_device_endpoint_set_config+0x278>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    76fe:	687b      	ldr	r3, [r7, #4]
    7700:	681a      	ldr	r2, [r3, #0]
    7702:	230f      	movs	r3, #15
    7704:	18fb      	adds	r3, r7, r3
    7706:	7819      	ldrb	r1, [r3, #0]
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	681b      	ldr	r3, [r3, #0]
    770c:	200f      	movs	r0, #15
    770e:	1838      	adds	r0, r7, r0
    7710:	7800      	ldrb	r0, [r0, #0]
    7712:	3008      	adds	r0, #8
    7714:	0140      	lsls	r0, r0, #5
    7716:	5cc3      	ldrb	r3, [r0, r3]
    7718:	b2db      	uxtb	r3, r3
    771a:	2002      	movs	r0, #2
    771c:	4303      	orrs	r3, r0
    771e:	b2d8      	uxtb	r0, r3
    7720:	1c0b      	adds	r3, r1, #0
    7722:	3308      	adds	r3, #8
    7724:	015b      	lsls	r3, r3, #5
    7726:	1c01      	adds	r1, r0, #0
    7728:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	681a      	ldr	r2, [r3, #0]
    772e:	230f      	movs	r3, #15
    7730:	18fb      	adds	r3, r7, r3
    7732:	781b      	ldrb	r3, [r3, #0]
    7734:	3308      	adds	r3, #8
    7736:	015b      	lsls	r3, r3, #5
    7738:	18d3      	adds	r3, r2, r3
    773a:	2240      	movs	r2, #64	; 0x40
    773c:	715a      	strb	r2, [r3, #5]
    773e:	e001      	b.n	7744 <usb_device_endpoint_set_config+0x27c>
				} else {
					return STATUS_ERR_DENIED;
    7740:	231c      	movs	r3, #28
    7742:	e127      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    7744:	e0d2      	b.n	78ec <usb_device_endpoint_set_config+0x424>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    7746:	230e      	movs	r3, #14
    7748:	18fb      	adds	r3, r7, r3
    774a:	781b      	ldrb	r3, [r3, #0]
    774c:	2b00      	cmp	r3, #0
    774e:	d02f      	beq.n	77b0 <usb_device_endpoint_set_config+0x2e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	220f      	movs	r2, #15
    7756:	18ba      	adds	r2, r7, r2
    7758:	7812      	ldrb	r2, [r2, #0]
    775a:	3208      	adds	r2, #8
    775c:	0152      	lsls	r2, r2, #5
    775e:	5cd3      	ldrb	r3, [r2, r3]
    7760:	b2db      	uxtb	r3, r3
    7762:	1c1a      	adds	r2, r3, #0
    7764:	2370      	movs	r3, #112	; 0x70
    7766:	4013      	ands	r3, r2
    7768:	d120      	bne.n	77ac <usb_device_endpoint_set_config+0x2e4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	681a      	ldr	r2, [r3, #0]
    776e:	230f      	movs	r3, #15
    7770:	18fb      	adds	r3, r7, r3
    7772:	7819      	ldrb	r1, [r3, #0]
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	200f      	movs	r0, #15
    777a:	1838      	adds	r0, r7, r0
    777c:	7800      	ldrb	r0, [r0, #0]
    777e:	3008      	adds	r0, #8
    7780:	0140      	lsls	r0, r0, #5
    7782:	5cc3      	ldrb	r3, [r0, r3]
    7784:	b2db      	uxtb	r3, r3
    7786:	2030      	movs	r0, #48	; 0x30
    7788:	4303      	orrs	r3, r0
    778a:	b2d8      	uxtb	r0, r3
    778c:	1c0b      	adds	r3, r1, #0
    778e:	3308      	adds	r3, #8
    7790:	015b      	lsls	r3, r3, #5
    7792:	1c01      	adds	r1, r0, #0
    7794:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	681a      	ldr	r2, [r3, #0]
    779a:	230f      	movs	r3, #15
    779c:	18fb      	adds	r3, r7, r3
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	3308      	adds	r3, #8
    77a2:	015b      	lsls	r3, r3, #5
    77a4:	18d3      	adds	r3, r2, r3
    77a6:	2280      	movs	r2, #128	; 0x80
    77a8:	711a      	strb	r2, [r3, #4]
    77aa:	e031      	b.n	7810 <usb_device_endpoint_set_config+0x348>
				} else {
					return STATUS_ERR_DENIED;
    77ac:	231c      	movs	r3, #28
    77ae:	e0f1      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	681b      	ldr	r3, [r3, #0]
    77b4:	220f      	movs	r2, #15
    77b6:	18ba      	adds	r2, r7, r2
    77b8:	7812      	ldrb	r2, [r2, #0]
    77ba:	3208      	adds	r2, #8
    77bc:	0152      	lsls	r2, r2, #5
    77be:	5cd3      	ldrb	r3, [r2, r3]
    77c0:	b2db      	uxtb	r3, r3
    77c2:	1c1a      	adds	r2, r3, #0
    77c4:	2307      	movs	r3, #7
    77c6:	4013      	ands	r3, r2
    77c8:	d120      	bne.n	780c <usb_device_endpoint_set_config+0x344>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	681a      	ldr	r2, [r3, #0]
    77ce:	230f      	movs	r3, #15
    77d0:	18fb      	adds	r3, r7, r3
    77d2:	7819      	ldrb	r1, [r3, #0]
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	681b      	ldr	r3, [r3, #0]
    77d8:	200f      	movs	r0, #15
    77da:	1838      	adds	r0, r7, r0
    77dc:	7800      	ldrb	r0, [r0, #0]
    77de:	3008      	adds	r0, #8
    77e0:	0140      	lsls	r0, r0, #5
    77e2:	5cc3      	ldrb	r3, [r0, r3]
    77e4:	b2db      	uxtb	r3, r3
    77e6:	2003      	movs	r0, #3
    77e8:	4303      	orrs	r3, r0
    77ea:	b2d8      	uxtb	r0, r3
    77ec:	1c0b      	adds	r3, r1, #0
    77ee:	3308      	adds	r3, #8
    77f0:	015b      	lsls	r3, r3, #5
    77f2:	1c01      	adds	r1, r0, #0
    77f4:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	681a      	ldr	r2, [r3, #0]
    77fa:	230f      	movs	r3, #15
    77fc:	18fb      	adds	r3, r7, r3
    77fe:	781b      	ldrb	r3, [r3, #0]
    7800:	3308      	adds	r3, #8
    7802:	015b      	lsls	r3, r3, #5
    7804:	18d3      	adds	r3, r2, r3
    7806:	2240      	movs	r2, #64	; 0x40
    7808:	715a      	strb	r2, [r3, #5]
    780a:	e001      	b.n	7810 <usb_device_endpoint_set_config+0x348>
				} else {
					return STATUS_ERR_DENIED;
    780c:	231c      	movs	r3, #28
    780e:	e0c1      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    7810:	e06c      	b.n	78ec <usb_device_endpoint_set_config+0x424>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    7812:	230e      	movs	r3, #14
    7814:	18fb      	adds	r3, r7, r3
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	2b00      	cmp	r3, #0
    781a:	d035      	beq.n	7888 <usb_device_endpoint_set_config+0x3c0>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    781c:	687b      	ldr	r3, [r7, #4]
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	220f      	movs	r2, #15
    7822:	18ba      	adds	r2, r7, r2
    7824:	7812      	ldrb	r2, [r2, #0]
    7826:	3208      	adds	r2, #8
    7828:	0152      	lsls	r2, r2, #5
    782a:	5cd3      	ldrb	r3, [r2, r3]
    782c:	b2db      	uxtb	r3, r3
    782e:	1c1a      	adds	r2, r3, #0
    7830:	2370      	movs	r3, #112	; 0x70
    7832:	4013      	ands	r3, r2
    7834:	d120      	bne.n	7878 <usb_device_endpoint_set_config+0x3b0>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	681a      	ldr	r2, [r3, #0]
    783a:	230f      	movs	r3, #15
    783c:	18fb      	adds	r3, r7, r3
    783e:	7819      	ldrb	r1, [r3, #0]
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	200f      	movs	r0, #15
    7846:	1838      	adds	r0, r7, r0
    7848:	7800      	ldrb	r0, [r0, #0]
    784a:	3008      	adds	r0, #8
    784c:	0140      	lsls	r0, r0, #5
    784e:	5cc3      	ldrb	r3, [r0, r3]
    7850:	b2db      	uxtb	r3, r3
    7852:	2040      	movs	r0, #64	; 0x40
    7854:	4303      	orrs	r3, r0
    7856:	b2d8      	uxtb	r0, r3
    7858:	1c0b      	adds	r3, r1, #0
    785a:	3308      	adds	r3, #8
    785c:	015b      	lsls	r3, r3, #5
    785e:	1c01      	adds	r1, r0, #0
    7860:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    7862:	687b      	ldr	r3, [r7, #4]
    7864:	681a      	ldr	r2, [r3, #0]
    7866:	230f      	movs	r3, #15
    7868:	18fb      	adds	r3, r7, r3
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	3308      	adds	r3, #8
    786e:	015b      	lsls	r3, r3, #5
    7870:	18d3      	adds	r3, r2, r3
    7872:	2280      	movs	r2, #128	; 0x80
    7874:	711a      	strb	r2, [r3, #4]
    7876:	e037      	b.n	78e8 <usb_device_endpoint_set_config+0x420>
				} else {
					return STATUS_ERR_DENIED;
    7878:	231c      	movs	r3, #28
    787a:	e08b      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
    787c:	00008f30 	.word	0x00008f30
    7880:	200004c4 	.word	0x200004c4
    7884:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	681b      	ldr	r3, [r3, #0]
    788c:	220f      	movs	r2, #15
    788e:	18ba      	adds	r2, r7, r2
    7890:	7812      	ldrb	r2, [r2, #0]
    7892:	3208      	adds	r2, #8
    7894:	0152      	lsls	r2, r2, #5
    7896:	5cd3      	ldrb	r3, [r2, r3]
    7898:	b2db      	uxtb	r3, r3
    789a:	1c1a      	adds	r2, r3, #0
    789c:	2307      	movs	r3, #7
    789e:	4013      	ands	r3, r2
    78a0:	d120      	bne.n	78e4 <usb_device_endpoint_set_config+0x41c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	681a      	ldr	r2, [r3, #0]
    78a6:	230f      	movs	r3, #15
    78a8:	18fb      	adds	r3, r7, r3
    78aa:	7819      	ldrb	r1, [r3, #0]
    78ac:	687b      	ldr	r3, [r7, #4]
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	200f      	movs	r0, #15
    78b2:	1838      	adds	r0, r7, r0
    78b4:	7800      	ldrb	r0, [r0, #0]
    78b6:	3008      	adds	r0, #8
    78b8:	0140      	lsls	r0, r0, #5
    78ba:	5cc3      	ldrb	r3, [r0, r3]
    78bc:	b2db      	uxtb	r3, r3
    78be:	2004      	movs	r0, #4
    78c0:	4303      	orrs	r3, r0
    78c2:	b2d8      	uxtb	r0, r3
    78c4:	1c0b      	adds	r3, r1, #0
    78c6:	3308      	adds	r3, #8
    78c8:	015b      	lsls	r3, r3, #5
    78ca:	1c01      	adds	r1, r0, #0
    78cc:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	681a      	ldr	r2, [r3, #0]
    78d2:	230f      	movs	r3, #15
    78d4:	18fb      	adds	r3, r7, r3
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	3308      	adds	r3, #8
    78da:	015b      	lsls	r3, r3, #5
    78dc:	18d3      	adds	r3, r2, r3
    78de:	2240      	movs	r2, #64	; 0x40
    78e0:	715a      	strb	r2, [r3, #5]
    78e2:	e001      	b.n	78e8 <usb_device_endpoint_set_config+0x420>
				} else {
					return STATUS_ERR_DENIED;
    78e4:	231c      	movs	r3, #28
    78e6:	e055      	b.n	7994 <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    78e8:	e000      	b.n	78ec <usb_device_endpoint_set_config+0x424>

		default:
			break;
    78ea:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    78ec:	230f      	movs	r3, #15
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	7818      	ldrb	r0, [r3, #0]
    78f2:	230e      	movs	r3, #14
    78f4:	18fb      	adds	r3, r7, r3
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	683a      	ldr	r2, [r7, #0]
    78fa:	7852      	ldrb	r2, [r2, #1]
    78fc:	1c11      	adds	r1, r2, #0
    78fe:	2207      	movs	r2, #7
    7900:	400a      	ands	r2, r1
    7902:	b2d2      	uxtb	r2, r2
    7904:	4925      	ldr	r1, [pc, #148]	; (799c <usb_device_endpoint_set_config+0x4d4>)
    7906:	0040      	lsls	r0, r0, #1
    7908:	18c3      	adds	r3, r0, r3
    790a:	011b      	lsls	r3, r3, #4
    790c:	18cb      	adds	r3, r1, r3
    790e:	2107      	movs	r1, #7
    7910:	400a      	ands	r2, r1
    7912:	0712      	lsls	r2, r2, #28
    7914:	6859      	ldr	r1, [r3, #4]
    7916:	4822      	ldr	r0, [pc, #136]	; (79a0 <usb_device_endpoint_set_config+0x4d8>)
    7918:	4001      	ands	r1, r0
    791a:	430a      	orrs	r2, r1
    791c:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    791e:	683b      	ldr	r3, [r7, #0]
    7920:	789b      	ldrb	r3, [r3, #2]
    7922:	2b00      	cmp	r3, #0
    7924:	d01b      	beq.n	795e <usb_device_endpoint_set_config+0x496>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    7926:	230f      	movs	r3, #15
    7928:	18fb      	adds	r3, r7, r3
    792a:	781c      	ldrb	r4, [r3, #0]
    792c:	230e      	movs	r3, #14
    792e:	18fb      	adds	r3, r7, r3
    7930:	7818      	ldrb	r0, [r3, #0]
    7932:	230f      	movs	r3, #15
    7934:	18fb      	adds	r3, r7, r3
    7936:	7819      	ldrb	r1, [r3, #0]
    7938:	230e      	movs	r3, #14
    793a:	18fb      	adds	r3, r7, r3
    793c:	781b      	ldrb	r3, [r3, #0]
    793e:	4a17      	ldr	r2, [pc, #92]	; (799c <usb_device_endpoint_set_config+0x4d4>)
    7940:	0049      	lsls	r1, r1, #1
    7942:	18cb      	adds	r3, r1, r3
    7944:	011b      	lsls	r3, r3, #4
    7946:	18d3      	adds	r3, r2, r3
    7948:	685b      	ldr	r3, [r3, #4]
    794a:	2280      	movs	r2, #128	; 0x80
    794c:	0612      	lsls	r2, r2, #24
    794e:	431a      	orrs	r2, r3
    7950:	4912      	ldr	r1, [pc, #72]	; (799c <usb_device_endpoint_set_config+0x4d4>)
    7952:	0063      	lsls	r3, r4, #1
    7954:	181b      	adds	r3, r3, r0
    7956:	011b      	lsls	r3, r3, #4
    7958:	18cb      	adds	r3, r1, r3
    795a:	605a      	str	r2, [r3, #4]
    795c:	e019      	b.n	7992 <usb_device_endpoint_set_config+0x4ca>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    795e:	230f      	movs	r3, #15
    7960:	18fb      	adds	r3, r7, r3
    7962:	781c      	ldrb	r4, [r3, #0]
    7964:	230e      	movs	r3, #14
    7966:	18fb      	adds	r3, r7, r3
    7968:	7818      	ldrb	r0, [r3, #0]
    796a:	230f      	movs	r3, #15
    796c:	18fb      	adds	r3, r7, r3
    796e:	7819      	ldrb	r1, [r3, #0]
    7970:	230e      	movs	r3, #14
    7972:	18fb      	adds	r3, r7, r3
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	4a09      	ldr	r2, [pc, #36]	; (799c <usb_device_endpoint_set_config+0x4d4>)
    7978:	0049      	lsls	r1, r1, #1
    797a:	18cb      	adds	r3, r1, r3
    797c:	011b      	lsls	r3, r3, #4
    797e:	18d3      	adds	r3, r2, r3
    7980:	685b      	ldr	r3, [r3, #4]
    7982:	005b      	lsls	r3, r3, #1
    7984:	085a      	lsrs	r2, r3, #1
    7986:	4905      	ldr	r1, [pc, #20]	; (799c <usb_device_endpoint_set_config+0x4d4>)
    7988:	0063      	lsls	r3, r4, #1
    798a:	181b      	adds	r3, r3, r0
    798c:	011b      	lsls	r3, r3, #4
    798e:	18cb      	adds	r3, r1, r3
    7990:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    7992:	2300      	movs	r3, #0
}
    7994:	1c18      	adds	r0, r3, #0
    7996:	46bd      	mov	sp, r7
    7998:	b005      	add	sp, #20
    799a:	bd90      	pop	{r4, r7, pc}
    799c:	200004c4 	.word	0x200004c4
    79a0:	8fffffff 	.word	0x8fffffff

000079a4 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    79a4:	b580      	push	{r7, lr}
    79a6:	b084      	sub	sp, #16
    79a8:	af00      	add	r7, sp, #0
    79aa:	6078      	str	r0, [r7, #4]
    79ac:	1c0a      	adds	r2, r1, #0
    79ae:	1cfb      	adds	r3, r7, #3
    79b0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    79b2:	230f      	movs	r3, #15
    79b4:	18fb      	adds	r3, r7, r3
    79b6:	1cfa      	adds	r2, r7, #3
    79b8:	7812      	ldrb	r2, [r2, #0]
    79ba:	210f      	movs	r1, #15
    79bc:	400a      	ands	r2, r1
    79be:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    79c0:	1cfb      	adds	r3, r7, #3
    79c2:	781b      	ldrb	r3, [r3, #0]
    79c4:	b25b      	sxtb	r3, r3
    79c6:	2b00      	cmp	r3, #0
    79c8:	da14      	bge.n	79f4 <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	681a      	ldr	r2, [r3, #0]
    79ce:	230f      	movs	r3, #15
    79d0:	18fb      	adds	r3, r7, r3
    79d2:	781b      	ldrb	r3, [r3, #0]
    79d4:	3308      	adds	r3, #8
    79d6:	015b      	lsls	r3, r3, #5
    79d8:	18d3      	adds	r3, r2, r3
    79da:	2280      	movs	r2, #128	; 0x80
    79dc:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	681a      	ldr	r2, [r3, #0]
    79e2:	230f      	movs	r3, #15
    79e4:	18fb      	adds	r3, r7, r3
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	3308      	adds	r3, #8
    79ea:	015b      	lsls	r3, r3, #5
    79ec:	18d3      	adds	r3, r2, r3
    79ee:	2202      	movs	r2, #2
    79f0:	71da      	strb	r2, [r3, #7]
    79f2:	e013      	b.n	7a1c <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	681a      	ldr	r2, [r3, #0]
    79f8:	230f      	movs	r3, #15
    79fa:	18fb      	adds	r3, r7, r3
    79fc:	781b      	ldrb	r3, [r3, #0]
    79fe:	3308      	adds	r3, #8
    7a00:	015b      	lsls	r3, r3, #5
    7a02:	18d3      	adds	r3, r2, r3
    7a04:	2240      	movs	r2, #64	; 0x40
    7a06:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	681a      	ldr	r2, [r3, #0]
    7a0c:	230f      	movs	r3, #15
    7a0e:	18fb      	adds	r3, r7, r3
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	3308      	adds	r3, #8
    7a14:	015b      	lsls	r3, r3, #5
    7a16:	18d3      	adds	r3, r2, r3
    7a18:	2201      	movs	r2, #1
    7a1a:	71da      	strb	r2, [r3, #7]
	}
}
    7a1c:	46bd      	mov	sp, r7
    7a1e:	b004      	add	sp, #16
    7a20:	bd80      	pop	{r7, pc}
    7a22:	46c0      	nop			; (mov r8, r8)

00007a24 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b084      	sub	sp, #16
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
    7a2c:	1c0a      	adds	r2, r1, #0
    7a2e:	1cfb      	adds	r3, r7, #3
    7a30:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7a32:	230f      	movs	r3, #15
    7a34:	18fb      	adds	r3, r7, r3
    7a36:	1cfa      	adds	r2, r7, #3
    7a38:	7812      	ldrb	r2, [r2, #0]
    7a3a:	210f      	movs	r1, #15
    7a3c:	400a      	ands	r2, r1
    7a3e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7a40:	1cfb      	adds	r3, r7, #3
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	b25b      	sxtb	r3, r3
    7a46:	2b00      	cmp	r3, #0
    7a48:	da10      	bge.n	7a6c <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	681a      	ldr	r2, [r3, #0]
    7a4e:	230f      	movs	r3, #15
    7a50:	18fb      	adds	r3, r7, r3
    7a52:	781b      	ldrb	r3, [r3, #0]
    7a54:	3308      	adds	r3, #8
    7a56:	015b      	lsls	r3, r3, #5
    7a58:	18d3      	adds	r3, r2, r3
    7a5a:	799b      	ldrb	r3, [r3, #6]
    7a5c:	b2db      	uxtb	r3, r3
    7a5e:	1c1a      	adds	r2, r3, #0
    7a60:	2320      	movs	r3, #32
    7a62:	4013      	ands	r3, r2
    7a64:	1e5a      	subs	r2, r3, #1
    7a66:	4193      	sbcs	r3, r2
    7a68:	b2db      	uxtb	r3, r3
    7a6a:	e00f      	b.n	7a8c <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	681a      	ldr	r2, [r3, #0]
    7a70:	230f      	movs	r3, #15
    7a72:	18fb      	adds	r3, r7, r3
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	3308      	adds	r3, #8
    7a78:	015b      	lsls	r3, r3, #5
    7a7a:	18d3      	adds	r3, r2, r3
    7a7c:	799b      	ldrb	r3, [r3, #6]
    7a7e:	b2db      	uxtb	r3, r3
    7a80:	1c1a      	adds	r2, r3, #0
    7a82:	2310      	movs	r3, #16
    7a84:	4013      	ands	r3, r2
    7a86:	1e5a      	subs	r2, r3, #1
    7a88:	4193      	sbcs	r3, r2
    7a8a:	b2db      	uxtb	r3, r3
	}
}
    7a8c:	1c18      	adds	r0, r3, #0
    7a8e:	46bd      	mov	sp, r7
    7a90:	b004      	add	sp, #16
    7a92:	bd80      	pop	{r7, pc}

00007a94 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b084      	sub	sp, #16
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
    7a9c:	1c0a      	adds	r2, r1, #0
    7a9e:	1cfb      	adds	r3, r7, #3
    7aa0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7aa2:	230f      	movs	r3, #15
    7aa4:	18fb      	adds	r3, r7, r3
    7aa6:	1cfa      	adds	r2, r7, #3
    7aa8:	7812      	ldrb	r2, [r2, #0]
    7aaa:	210f      	movs	r1, #15
    7aac:	400a      	ands	r2, r1
    7aae:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    7ab0:	1cfb      	adds	r3, r7, #3
    7ab2:	781b      	ldrb	r3, [r3, #0]
    7ab4:	b25b      	sxtb	r3, r3
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	da0a      	bge.n	7ad0 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    7aba:	687b      	ldr	r3, [r7, #4]
    7abc:	681a      	ldr	r2, [r3, #0]
    7abe:	230f      	movs	r3, #15
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	3308      	adds	r3, #8
    7ac6:	015b      	lsls	r3, r3, #5
    7ac8:	18d3      	adds	r3, r2, r3
    7aca:	2220      	movs	r2, #32
    7acc:	715a      	strb	r2, [r3, #5]
    7ace:	e009      	b.n	7ae4 <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	681a      	ldr	r2, [r3, #0]
    7ad4:	230f      	movs	r3, #15
    7ad6:	18fb      	adds	r3, r7, r3
    7ad8:	781b      	ldrb	r3, [r3, #0]
    7ada:	3308      	adds	r3, #8
    7adc:	015b      	lsls	r3, r3, #5
    7ade:	18d3      	adds	r3, r2, r3
    7ae0:	2210      	movs	r2, #16
    7ae2:	715a      	strb	r2, [r3, #5]
	}
}
    7ae4:	46bd      	mov	sp, r7
    7ae6:	b004      	add	sp, #16
    7ae8:	bd80      	pop	{r7, pc}
    7aea:	46c0      	nop			; (mov r8, r8)

00007aec <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    7aec:	b580      	push	{r7, lr}
    7aee:	b084      	sub	sp, #16
    7af0:	af00      	add	r7, sp, #0
    7af2:	6078      	str	r0, [r7, #4]
    7af4:	1c0a      	adds	r2, r1, #0
    7af6:	1cfb      	adds	r3, r7, #3
    7af8:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7afa:	230f      	movs	r3, #15
    7afc:	18fb      	adds	r3, r7, r3
    7afe:	1cfa      	adds	r2, r7, #3
    7b00:	7812      	ldrb	r2, [r2, #0]
    7b02:	210f      	movs	r1, #15
    7b04:	400a      	ands	r2, r1
    7b06:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7b08:	1cfb      	adds	r3, r7, #3
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	b25b      	sxtb	r3, r3
    7b0e:	2b00      	cmp	r3, #0
    7b10:	da3a      	bge.n	7b88 <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    7b12:	687b      	ldr	r3, [r7, #4]
    7b14:	681a      	ldr	r2, [r3, #0]
    7b16:	230f      	movs	r3, #15
    7b18:	18fb      	adds	r3, r7, r3
    7b1a:	781b      	ldrb	r3, [r3, #0]
    7b1c:	3308      	adds	r3, #8
    7b1e:	015b      	lsls	r3, r3, #5
    7b20:	18d3      	adds	r3, r2, r3
    7b22:	799b      	ldrb	r3, [r3, #6]
    7b24:	b2db      	uxtb	r3, r3
    7b26:	1c1a      	adds	r2, r3, #0
    7b28:	2320      	movs	r3, #32
    7b2a:	4013      	ands	r3, r2
    7b2c:	d066      	beq.n	7bfc <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	681a      	ldr	r2, [r3, #0]
    7b32:	230f      	movs	r3, #15
    7b34:	18fb      	adds	r3, r7, r3
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	3308      	adds	r3, #8
    7b3a:	015b      	lsls	r3, r3, #5
    7b3c:	18d3      	adds	r3, r2, r3
    7b3e:	2220      	movs	r2, #32
    7b40:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	681a      	ldr	r2, [r3, #0]
    7b46:	230f      	movs	r3, #15
    7b48:	18fb      	adds	r3, r7, r3
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	3308      	adds	r3, #8
    7b4e:	015b      	lsls	r3, r3, #5
    7b50:	18d3      	adds	r3, r2, r3
    7b52:	79db      	ldrb	r3, [r3, #7]
    7b54:	b2db      	uxtb	r3, r3
    7b56:	1c1a      	adds	r2, r3, #0
    7b58:	2340      	movs	r3, #64	; 0x40
    7b5a:	4013      	ands	r3, r2
    7b5c:	d04e      	beq.n	7bfc <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	681a      	ldr	r2, [r3, #0]
    7b62:	230f      	movs	r3, #15
    7b64:	18fb      	adds	r3, r7, r3
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	3308      	adds	r3, #8
    7b6a:	015b      	lsls	r3, r3, #5
    7b6c:	18d3      	adds	r3, r2, r3
    7b6e:	2240      	movs	r2, #64	; 0x40
    7b70:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	681a      	ldr	r2, [r3, #0]
    7b76:	230f      	movs	r3, #15
    7b78:	18fb      	adds	r3, r7, r3
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	3308      	adds	r3, #8
    7b7e:	015b      	lsls	r3, r3, #5
    7b80:	18d3      	adds	r3, r2, r3
    7b82:	2202      	movs	r2, #2
    7b84:	711a      	strb	r2, [r3, #4]
    7b86:	e039      	b.n	7bfc <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	681a      	ldr	r2, [r3, #0]
    7b8c:	230f      	movs	r3, #15
    7b8e:	18fb      	adds	r3, r7, r3
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	3308      	adds	r3, #8
    7b94:	015b      	lsls	r3, r3, #5
    7b96:	18d3      	adds	r3, r2, r3
    7b98:	799b      	ldrb	r3, [r3, #6]
    7b9a:	b2db      	uxtb	r3, r3
    7b9c:	1c1a      	adds	r2, r3, #0
    7b9e:	2310      	movs	r3, #16
    7ba0:	4013      	ands	r3, r2
    7ba2:	d02b      	beq.n	7bfc <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	681a      	ldr	r2, [r3, #0]
    7ba8:	230f      	movs	r3, #15
    7baa:	18fb      	adds	r3, r7, r3
    7bac:	781b      	ldrb	r3, [r3, #0]
    7bae:	3308      	adds	r3, #8
    7bb0:	015b      	lsls	r3, r3, #5
    7bb2:	18d3      	adds	r3, r2, r3
    7bb4:	2210      	movs	r2, #16
    7bb6:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	681a      	ldr	r2, [r3, #0]
    7bbc:	230f      	movs	r3, #15
    7bbe:	18fb      	adds	r3, r7, r3
    7bc0:	781b      	ldrb	r3, [r3, #0]
    7bc2:	3308      	adds	r3, #8
    7bc4:	015b      	lsls	r3, r3, #5
    7bc6:	18d3      	adds	r3, r2, r3
    7bc8:	79db      	ldrb	r3, [r3, #7]
    7bca:	b2db      	uxtb	r3, r3
    7bcc:	1c1a      	adds	r2, r3, #0
    7bce:	2320      	movs	r3, #32
    7bd0:	4013      	ands	r3, r2
    7bd2:	d013      	beq.n	7bfc <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	681a      	ldr	r2, [r3, #0]
    7bd8:	230f      	movs	r3, #15
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	3308      	adds	r3, #8
    7be0:	015b      	lsls	r3, r3, #5
    7be2:	18d3      	adds	r3, r2, r3
    7be4:	2220      	movs	r2, #32
    7be6:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	681a      	ldr	r2, [r3, #0]
    7bec:	230f      	movs	r3, #15
    7bee:	18fb      	adds	r3, r7, r3
    7bf0:	781b      	ldrb	r3, [r3, #0]
    7bf2:	3308      	adds	r3, #8
    7bf4:	015b      	lsls	r3, r3, #5
    7bf6:	18d3      	adds	r3, r2, r3
    7bf8:	2201      	movs	r2, #1
    7bfa:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    7bfc:	46bd      	mov	sp, r7
    7bfe:	b004      	add	sp, #16
    7c00:	bd80      	pop	{r7, pc}
    7c02:	46c0      	nop			; (mov r8, r8)

00007c04 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7c04:	b580      	push	{r7, lr}
    7c06:	b086      	sub	sp, #24
    7c08:	af00      	add	r7, sp, #0
    7c0a:	60f8      	str	r0, [r7, #12]
    7c0c:	607a      	str	r2, [r7, #4]
    7c0e:	603b      	str	r3, [r7, #0]
    7c10:	230b      	movs	r3, #11
    7c12:	18fb      	adds	r3, r7, r3
    7c14:	1c0a      	adds	r2, r1, #0
    7c16:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    7c18:	68fb      	ldr	r3, [r7, #12]
    7c1a:	681b      	ldr	r3, [r3, #0]
    7c1c:	220b      	movs	r2, #11
    7c1e:	18ba      	adds	r2, r7, r2
    7c20:	7812      	ldrb	r2, [r2, #0]
    7c22:	3208      	adds	r2, #8
    7c24:	0152      	lsls	r2, r2, #5
    7c26:	5cd3      	ldrb	r3, [r2, r3]
    7c28:	b2db      	uxtb	r3, r3
    7c2a:	091b      	lsrs	r3, r3, #4
    7c2c:	1c1a      	adds	r2, r3, #0
    7c2e:	2307      	movs	r3, #7
    7c30:	4013      	ands	r3, r2
    7c32:	b2da      	uxtb	r2, r3
    7c34:	2317      	movs	r3, #23
    7c36:	18fb      	adds	r3, r7, r3
    7c38:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7c3a:	2317      	movs	r3, #23
    7c3c:	18fb      	adds	r3, r7, r3
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	2b00      	cmp	r3, #0
    7c42:	d101      	bne.n	7c48 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    7c44:	231c      	movs	r3, #28
    7c46:	e031      	b.n	7cac <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    7c48:	230b      	movs	r3, #11
    7c4a:	18fb      	adds	r3, r7, r3
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	687a      	ldr	r2, [r7, #4]
    7c50:	4918      	ldr	r1, [pc, #96]	; (7cb4 <usb_device_endpoint_write_buffer_job+0xb0>)
    7c52:	015b      	lsls	r3, r3, #5
    7c54:	18cb      	adds	r3, r1, r3
    7c56:	3310      	adds	r3, #16
    7c58:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7c5a:	230b      	movs	r3, #11
    7c5c:	18fb      	adds	r3, r7, r3
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	4a14      	ldr	r2, [pc, #80]	; (7cb4 <usb_device_endpoint_write_buffer_job+0xb0>)
    7c62:	015b      	lsls	r3, r3, #5
    7c64:	18d3      	adds	r3, r2, r3
    7c66:	3310      	adds	r3, #16
    7c68:	685a      	ldr	r2, [r3, #4]
    7c6a:	4913      	ldr	r1, [pc, #76]	; (7cb8 <usb_device_endpoint_write_buffer_job+0xb4>)
    7c6c:	400a      	ands	r2, r1
    7c6e:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    7c70:	230b      	movs	r3, #11
    7c72:	18fb      	adds	r3, r7, r3
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	683a      	ldr	r2, [r7, #0]
    7c78:	b292      	uxth	r2, r2
    7c7a:	0492      	lsls	r2, r2, #18
    7c7c:	0c92      	lsrs	r2, r2, #18
    7c7e:	b292      	uxth	r2, r2
    7c80:	490c      	ldr	r1, [pc, #48]	; (7cb4 <usb_device_endpoint_write_buffer_job+0xb0>)
    7c82:	015b      	lsls	r3, r3, #5
    7c84:	18cb      	adds	r3, r1, r3
    7c86:	3310      	adds	r3, #16
    7c88:	0492      	lsls	r2, r2, #18
    7c8a:	0c92      	lsrs	r2, r2, #18
    7c8c:	6859      	ldr	r1, [r3, #4]
    7c8e:	0b89      	lsrs	r1, r1, #14
    7c90:	0389      	lsls	r1, r1, #14
    7c92:	430a      	orrs	r2, r1
    7c94:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    7c96:	68fb      	ldr	r3, [r7, #12]
    7c98:	681a      	ldr	r2, [r3, #0]
    7c9a:	230b      	movs	r3, #11
    7c9c:	18fb      	adds	r3, r7, r3
    7c9e:	781b      	ldrb	r3, [r3, #0]
    7ca0:	3308      	adds	r3, #8
    7ca2:	015b      	lsls	r3, r3, #5
    7ca4:	18d3      	adds	r3, r2, r3
    7ca6:	2280      	movs	r2, #128	; 0x80
    7ca8:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    7caa:	2300      	movs	r3, #0
}
    7cac:	1c18      	adds	r0, r3, #0
    7cae:	46bd      	mov	sp, r7
    7cb0:	b006      	add	sp, #24
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	200004c4 	.word	0x200004c4
    7cb8:	f0003fff 	.word	0xf0003fff

00007cbc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    7cbc:	b580      	push	{r7, lr}
    7cbe:	b086      	sub	sp, #24
    7cc0:	af00      	add	r7, sp, #0
    7cc2:	60f8      	str	r0, [r7, #12]
    7cc4:	607a      	str	r2, [r7, #4]
    7cc6:	603b      	str	r3, [r7, #0]
    7cc8:	230b      	movs	r3, #11
    7cca:	18fb      	adds	r3, r7, r3
    7ccc:	1c0a      	adds	r2, r1, #0
    7cce:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    7cd0:	68fb      	ldr	r3, [r7, #12]
    7cd2:	681b      	ldr	r3, [r3, #0]
    7cd4:	220b      	movs	r2, #11
    7cd6:	18ba      	adds	r2, r7, r2
    7cd8:	7812      	ldrb	r2, [r2, #0]
    7cda:	3208      	adds	r2, #8
    7cdc:	0152      	lsls	r2, r2, #5
    7cde:	5cd3      	ldrb	r3, [r2, r3]
    7ce0:	2207      	movs	r2, #7
    7ce2:	4013      	ands	r3, r2
    7ce4:	b2da      	uxtb	r2, r3
    7ce6:	2317      	movs	r3, #23
    7ce8:	18fb      	adds	r3, r7, r3
    7cea:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7cec:	2317      	movs	r3, #23
    7cee:	18fb      	adds	r3, r7, r3
    7cf0:	781b      	ldrb	r3, [r3, #0]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d101      	bne.n	7cfa <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    7cf6:	231c      	movs	r3, #28
    7cf8:	e02e      	b.n	7d58 <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    7cfa:	230b      	movs	r3, #11
    7cfc:	18fb      	adds	r3, r7, r3
    7cfe:	781a      	ldrb	r2, [r3, #0]
    7d00:	6879      	ldr	r1, [r7, #4]
    7d02:	4b17      	ldr	r3, [pc, #92]	; (7d60 <usb_device_endpoint_read_buffer_job+0xa4>)
    7d04:	0152      	lsls	r2, r2, #5
    7d06:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    7d08:	230b      	movs	r3, #11
    7d0a:	18fb      	adds	r3, r7, r3
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	683a      	ldr	r2, [r7, #0]
    7d10:	b292      	uxth	r2, r2
    7d12:	0492      	lsls	r2, r2, #18
    7d14:	0c92      	lsrs	r2, r2, #18
    7d16:	b292      	uxth	r2, r2
    7d18:	4911      	ldr	r1, [pc, #68]	; (7d60 <usb_device_endpoint_read_buffer_job+0xa4>)
    7d1a:	015b      	lsls	r3, r3, #5
    7d1c:	18cb      	adds	r3, r1, r3
    7d1e:	0492      	lsls	r2, r2, #18
    7d20:	0c92      	lsrs	r2, r2, #18
    7d22:	0392      	lsls	r2, r2, #14
    7d24:	6859      	ldr	r1, [r3, #4]
    7d26:	480f      	ldr	r0, [pc, #60]	; (7d64 <usb_device_endpoint_read_buffer_job+0xa8>)
    7d28:	4001      	ands	r1, r0
    7d2a:	430a      	orrs	r2, r1
    7d2c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7d2e:	230b      	movs	r3, #11
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	4a0a      	ldr	r2, [pc, #40]	; (7d60 <usb_device_endpoint_read_buffer_job+0xa4>)
    7d36:	015b      	lsls	r3, r3, #5
    7d38:	18d3      	adds	r3, r2, r3
    7d3a:	685a      	ldr	r2, [r3, #4]
    7d3c:	0b92      	lsrs	r2, r2, #14
    7d3e:	0392      	lsls	r2, r2, #14
    7d40:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7d42:	68fb      	ldr	r3, [r7, #12]
    7d44:	681a      	ldr	r2, [r3, #0]
    7d46:	230b      	movs	r3, #11
    7d48:	18fb      	adds	r3, r7, r3
    7d4a:	781b      	ldrb	r3, [r3, #0]
    7d4c:	3308      	adds	r3, #8
    7d4e:	015b      	lsls	r3, r3, #5
    7d50:	18d3      	adds	r3, r2, r3
    7d52:	2240      	movs	r2, #64	; 0x40
    7d54:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    7d56:	2300      	movs	r3, #0
}
    7d58:	1c18      	adds	r0, r3, #0
    7d5a:	46bd      	mov	sp, r7
    7d5c:	b006      	add	sp, #24
    7d5e:	bd80      	pop	{r7, pc}
    7d60:	200004c4 	.word	0x200004c4
    7d64:	f0003fff 	.word	0xf0003fff

00007d68 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    7d68:	b580      	push	{r7, lr}
    7d6a:	b082      	sub	sp, #8
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
    7d70:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    7d72:	683a      	ldr	r2, [r7, #0]
    7d74:	4b0c      	ldr	r3, [pc, #48]	; (7da8 <usb_device_endpoint_setup_buffer_job+0x40>)
    7d76:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    7d78:	4b0b      	ldr	r3, [pc, #44]	; (7da8 <usb_device_endpoint_setup_buffer_job+0x40>)
    7d7a:	685a      	ldr	r2, [r3, #4]
    7d7c:	490b      	ldr	r1, [pc, #44]	; (7dac <usb_device_endpoint_setup_buffer_job+0x44>)
    7d7e:	400a      	ands	r2, r1
    7d80:	2180      	movs	r1, #128	; 0x80
    7d82:	0289      	lsls	r1, r1, #10
    7d84:	430a      	orrs	r2, r1
    7d86:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7d88:	4b07      	ldr	r3, [pc, #28]	; (7da8 <usb_device_endpoint_setup_buffer_job+0x40>)
    7d8a:	685a      	ldr	r2, [r3, #4]
    7d8c:	0b92      	lsrs	r2, r2, #14
    7d8e:	0392      	lsls	r2, r2, #14
    7d90:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	681a      	ldr	r2, [r3, #0]
    7d96:	2382      	movs	r3, #130	; 0x82
    7d98:	005b      	lsls	r3, r3, #1
    7d9a:	2140      	movs	r1, #64	; 0x40
    7d9c:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    7d9e:	2300      	movs	r3, #0
}
    7da0:	1c18      	adds	r0, r3, #0
    7da2:	46bd      	mov	sp, r7
    7da4:	b002      	add	sp, #8
    7da6:	bd80      	pop	{r7, pc}
    7da8:	200004c4 	.word	0x200004c4
    7dac:	f0003fff 	.word	0xf0003fff

00007db0 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    7db0:	b580      	push	{r7, lr}
    7db2:	b084      	sub	sp, #16
    7db4:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    7db6:	4bbc      	ldr	r3, [pc, #752]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7db8:	681b      	ldr	r3, [r3, #0]
    7dba:	681a      	ldr	r2, [r3, #0]
    7dbc:	2308      	movs	r3, #8
    7dbe:	18fb      	adds	r3, r7, r3
    7dc0:	8c12      	ldrh	r2, [r2, #32]
    7dc2:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    7dc4:	2308      	movs	r3, #8
    7dc6:	18fb      	adds	r3, r7, r3
    7dc8:	881b      	ldrh	r3, [r3, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d158      	bne.n	7e80 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    7dce:	4bb6      	ldr	r3, [pc, #728]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7dd0:	681b      	ldr	r3, [r3, #0]
    7dd2:	681a      	ldr	r2, [r3, #0]
    7dd4:	1dbb      	adds	r3, r7, #6
    7dd6:	8b92      	ldrh	r2, [r2, #28]
    7dd8:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    7dda:	4bb3      	ldr	r3, [pc, #716]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7ddc:	681a      	ldr	r2, [r3, #0]
    7dde:	23ab      	movs	r3, #171	; 0xab
    7de0:	005b      	lsls	r3, r3, #1
    7de2:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    7de4:	1dba      	adds	r2, r7, #6
    7de6:	8812      	ldrh	r2, [r2, #0]
    7de8:	4013      	ands	r3, r2
    7dea:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    7dec:	4bae      	ldr	r3, [pc, #696]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7dee:	6819      	ldr	r1, [r3, #0]
    7df0:	23aa      	movs	r3, #170	; 0xaa
    7df2:	005b      	lsls	r3, r3, #1
    7df4:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    7df6:	1d3b      	adds	r3, r7, #4
    7df8:	400a      	ands	r2, r1
    7dfa:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    7dfc:	2300      	movs	r3, #0
    7dfe:	60fb      	str	r3, [r7, #12]
    7e00:	e03a      	b.n	7e78 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    7e02:	4baa      	ldr	r3, [pc, #680]	; (80ac <_usb_device_interrupt_handler+0x2fc>)
    7e04:	68fa      	ldr	r2, [r7, #12]
    7e06:	0052      	lsls	r2, r2, #1
    7e08:	5ad3      	ldrh	r3, [r2, r3]
    7e0a:	1dba      	adds	r2, r7, #6
    7e0c:	8812      	ldrh	r2, [r2, #0]
    7e0e:	4013      	ands	r3, r2
    7e10:	b29b      	uxth	r3, r3
    7e12:	2b00      	cmp	r3, #0
    7e14:	d007      	beq.n	7e26 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    7e16:	4ba4      	ldr	r3, [pc, #656]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7e18:	681b      	ldr	r3, [r3, #0]
    7e1a:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    7e1c:	4aa3      	ldr	r2, [pc, #652]	; (80ac <_usb_device_interrupt_handler+0x2fc>)
    7e1e:	68f9      	ldr	r1, [r7, #12]
    7e20:	0049      	lsls	r1, r1, #1
    7e22:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    7e24:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    7e26:	4ba1      	ldr	r3, [pc, #644]	; (80ac <_usb_device_interrupt_handler+0x2fc>)
    7e28:	68fa      	ldr	r2, [r7, #12]
    7e2a:	0052      	lsls	r2, r2, #1
    7e2c:	5ad3      	ldrh	r3, [r2, r3]
    7e2e:	1d3a      	adds	r2, r7, #4
    7e30:	8812      	ldrh	r2, [r2, #0]
    7e32:	4013      	ands	r3, r2
    7e34:	b29b      	uxth	r3, r3
    7e36:	2b00      	cmp	r3, #0
    7e38:	d01b      	beq.n	7e72 <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    7e3a:	68fb      	ldr	r3, [r7, #12]
    7e3c:	2b06      	cmp	r3, #6
    7e3e:	d10c      	bne.n	7e5a <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    7e40:	4b9b      	ldr	r3, [pc, #620]	; (80b0 <_usb_device_interrupt_handler+0x300>)
    7e42:	891b      	ldrh	r3, [r3, #8]
    7e44:	b29b      	uxth	r3, r3
    7e46:	091b      	lsrs	r3, r3, #4
    7e48:	055b      	lsls	r3, r3, #21
    7e4a:	0d5b      	lsrs	r3, r3, #21
    7e4c:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    7e4e:	1c1a      	adds	r2, r3, #0
    7e50:	2380      	movs	r3, #128	; 0x80
    7e52:	005b      	lsls	r3, r3, #1
    7e54:	401a      	ands	r2, r3
    7e56:	4b97      	ldr	r3, [pc, #604]	; (80b4 <_usb_device_interrupt_handler+0x304>)
    7e58:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    7e5a:	4b93      	ldr	r3, [pc, #588]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	68fa      	ldr	r2, [r7, #12]
    7e60:	322e      	adds	r2, #46	; 0x2e
    7e62:	0092      	lsls	r2, r2, #2
    7e64:	58d2      	ldr	r2, [r2, r3]
    7e66:	4b90      	ldr	r3, [pc, #576]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7e68:	6819      	ldr	r1, [r3, #0]
    7e6a:	4b92      	ldr	r3, [pc, #584]	; (80b4 <_usb_device_interrupt_handler+0x304>)
    7e6c:	1c08      	adds	r0, r1, #0
    7e6e:	1c19      	adds	r1, r3, #0
    7e70:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    7e72:	68fb      	ldr	r3, [r7, #12]
    7e74:	3301      	adds	r3, #1
    7e76:	60fb      	str	r3, [r7, #12]
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	2b06      	cmp	r3, #6
    7e7c:	ddc1      	ble.n	7e02 <_usb_device_interrupt_handler+0x52>
    7e7e:	e23d      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7e80:	230b      	movs	r3, #11
    7e82:	18fb      	adds	r3, r7, r3
    7e84:	2200      	movs	r2, #0
    7e86:	701a      	strb	r2, [r3, #0]
    7e88:	e232      	b.n	82f0 <_usb_device_interrupt_handler+0x540>

			if (ep_inst & (1 << i)) {
    7e8a:	2308      	movs	r3, #8
    7e8c:	18fb      	adds	r3, r7, r3
    7e8e:	881a      	ldrh	r2, [r3, #0]
    7e90:	230b      	movs	r3, #11
    7e92:	18fb      	adds	r3, r7, r3
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	411a      	asrs	r2, r3
    7e98:	1c13      	adds	r3, r2, #0
    7e9a:	2201      	movs	r2, #1
    7e9c:	4013      	ands	r3, r2
    7e9e:	d100      	bne.n	7ea2 <_usb_device_interrupt_handler+0xf2>
    7ea0:	e21f      	b.n	82e2 <_usb_device_interrupt_handler+0x532>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    7ea2:	4b81      	ldr	r3, [pc, #516]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	681a      	ldr	r2, [r3, #0]
    7ea8:	230b      	movs	r3, #11
    7eaa:	18fb      	adds	r3, r7, r3
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	3308      	adds	r3, #8
    7eb0:	015b      	lsls	r3, r3, #5
    7eb2:	18d3      	adds	r3, r2, r3
    7eb4:	79db      	ldrb	r3, [r3, #7]
    7eb6:	b2da      	uxtb	r2, r3
    7eb8:	1dbb      	adds	r3, r7, #6
    7eba:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    7ebc:	4b7a      	ldr	r3, [pc, #488]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7ebe:	6819      	ldr	r1, [r3, #0]
    7ec0:	230b      	movs	r3, #11
    7ec2:	18fb      	adds	r3, r7, r3
    7ec4:	781a      	ldrb	r2, [r3, #0]
    7ec6:	23b0      	movs	r3, #176	; 0xb0
    7ec8:	005b      	lsls	r3, r3, #1
    7eca:	188a      	adds	r2, r1, r2
    7ecc:	18d3      	adds	r3, r2, r3
    7ece:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    7ed0:	b29b      	uxth	r3, r3
    7ed2:	1dba      	adds	r2, r7, #6
    7ed4:	8812      	ldrh	r2, [r2, #0]
    7ed6:	4013      	ands	r3, r2
    7ed8:	b29b      	uxth	r3, r3
    7eda:	b298      	uxth	r0, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    7edc:	4b72      	ldr	r3, [pc, #456]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7ede:	6819      	ldr	r1, [r3, #0]
    7ee0:	230b      	movs	r3, #11
    7ee2:	18fb      	adds	r3, r7, r3
    7ee4:	781a      	ldrb	r2, [r3, #0]
    7ee6:	23ac      	movs	r3, #172	; 0xac
    7ee8:	005b      	lsls	r3, r3, #1
    7eea:	188a      	adds	r2, r1, r2
    7eec:	18d3      	adds	r3, r2, r3
    7eee:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    7ef0:	b29a      	uxth	r2, r3
    7ef2:	1c03      	adds	r3, r0, #0
    7ef4:	4013      	ands	r3, r2
    7ef6:	b29a      	uxth	r2, r3
    7ef8:	1d3b      	adds	r3, r7, #4
    7efa:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    7efc:	1dbb      	adds	r3, r7, #6
    7efe:	881b      	ldrh	r3, [r3, #0]
    7f00:	2260      	movs	r2, #96	; 0x60
    7f02:	4013      	ands	r3, r2
    7f04:	d059      	beq.n	7fba <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    7f06:	4b68      	ldr	r3, [pc, #416]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7f08:	681b      	ldr	r3, [r3, #0]
    7f0a:	681a      	ldr	r2, [r3, #0]
    7f0c:	230b      	movs	r3, #11
    7f0e:	18fb      	adds	r3, r7, r3
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	3308      	adds	r3, #8
    7f14:	015b      	lsls	r3, r3, #5
    7f16:	18d3      	adds	r3, r2, r3
    7f18:	79db      	ldrb	r3, [r3, #7]
    7f1a:	b2db      	uxtb	r3, r3
    7f1c:	1c1a      	adds	r2, r3, #0
    7f1e:	2340      	movs	r3, #64	; 0x40
    7f20:	4013      	ands	r3, r2
    7f22:	d014      	beq.n	7f4e <_usb_device_interrupt_handler+0x19e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7f24:	4b60      	ldr	r3, [pc, #384]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7f26:	681b      	ldr	r3, [r3, #0]
    7f28:	681a      	ldr	r2, [r3, #0]
    7f2a:	230b      	movs	r3, #11
    7f2c:	18fb      	adds	r3, r7, r3
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	3308      	adds	r3, #8
    7f32:	015b      	lsls	r3, r3, #5
    7f34:	18d3      	adds	r3, r2, r3
    7f36:	2240      	movs	r2, #64	; 0x40
    7f38:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    7f3a:	230b      	movs	r3, #11
    7f3c:	18fb      	adds	r3, r7, r3
    7f3e:	781b      	ldrb	r3, [r3, #0]
    7f40:	2280      	movs	r2, #128	; 0x80
    7f42:	4252      	negs	r2, r2
    7f44:	4313      	orrs	r3, r2
    7f46:	b2da      	uxtb	r2, r3
    7f48:	4b5b      	ldr	r3, [pc, #364]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    7f4a:	719a      	strb	r2, [r3, #6]
    7f4c:	e01e      	b.n	7f8c <_usb_device_interrupt_handler+0x1dc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7f4e:	4b56      	ldr	r3, [pc, #344]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7f50:	681b      	ldr	r3, [r3, #0]
    7f52:	681a      	ldr	r2, [r3, #0]
    7f54:	230b      	movs	r3, #11
    7f56:	18fb      	adds	r3, r7, r3
    7f58:	781b      	ldrb	r3, [r3, #0]
    7f5a:	3308      	adds	r3, #8
    7f5c:	015b      	lsls	r3, r3, #5
    7f5e:	18d3      	adds	r3, r2, r3
    7f60:	79db      	ldrb	r3, [r3, #7]
    7f62:	b2db      	uxtb	r3, r3
    7f64:	1c1a      	adds	r2, r3, #0
    7f66:	2320      	movs	r3, #32
    7f68:	4013      	ands	r3, r2
    7f6a:	d00f      	beq.n	7f8c <_usb_device_interrupt_handler+0x1dc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7f6c:	4b4e      	ldr	r3, [pc, #312]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	681a      	ldr	r2, [r3, #0]
    7f72:	230b      	movs	r3, #11
    7f74:	18fb      	adds	r3, r7, r3
    7f76:	781b      	ldrb	r3, [r3, #0]
    7f78:	3308      	adds	r3, #8
    7f7a:	015b      	lsls	r3, r3, #5
    7f7c:	18d3      	adds	r3, r2, r3
    7f7e:	2220      	movs	r2, #32
    7f80:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7f82:	4b4d      	ldr	r3, [pc, #308]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    7f84:	220b      	movs	r2, #11
    7f86:	18ba      	adds	r2, r7, r2
    7f88:	7812      	ldrb	r2, [r2, #0]
    7f8a:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    7f8c:	1d3b      	adds	r3, r7, #4
    7f8e:	881b      	ldrh	r3, [r3, #0]
    7f90:	2260      	movs	r2, #96	; 0x60
    7f92:	4013      	ands	r3, r2
    7f94:	d010      	beq.n	7fb8 <_usb_device_interrupt_handler+0x208>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    7f96:	4b44      	ldr	r3, [pc, #272]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7f98:	681a      	ldr	r2, [r3, #0]
    7f9a:	230b      	movs	r3, #11
    7f9c:	18fb      	adds	r3, r7, r3
    7f9e:	781b      	ldrb	r3, [r3, #0]
    7fa0:	21dc      	movs	r1, #220	; 0xdc
    7fa2:	011b      	lsls	r3, r3, #4
    7fa4:	18d3      	adds	r3, r2, r3
    7fa6:	185b      	adds	r3, r3, r1
    7fa8:	685a      	ldr	r2, [r3, #4]
    7faa:	4b3f      	ldr	r3, [pc, #252]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7fac:	6819      	ldr	r1, [r3, #0]
    7fae:	4b42      	ldr	r3, [pc, #264]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    7fb0:	1c08      	adds	r0, r1, #0
    7fb2:	1c19      	adds	r1, r3, #0
    7fb4:	4790      	blx	r2
					}
					return;
    7fb6:	e1a1      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
    7fb8:	e1a0      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7fba:	1dbb      	adds	r3, r7, #6
    7fbc:	881b      	ldrh	r3, [r3, #0]
    7fbe:	2210      	movs	r2, #16
    7fc0:	4013      	ands	r3, r2
    7fc2:	d038      	beq.n	8036 <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    7fc4:	4b38      	ldr	r3, [pc, #224]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7fc6:	681b      	ldr	r3, [r3, #0]
    7fc8:	681a      	ldr	r2, [r3, #0]
    7fca:	230b      	movs	r3, #11
    7fcc:	18fb      	adds	r3, r7, r3
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	3308      	adds	r3, #8
    7fd2:	015b      	lsls	r3, r3, #5
    7fd4:	18d3      	adds	r3, r2, r3
    7fd6:	2210      	movs	r2, #16
    7fd8:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    7fda:	4b33      	ldr	r3, [pc, #204]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    7fdc:	6819      	ldr	r1, [r3, #0]
    7fde:	230b      	movs	r3, #11
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	781a      	ldrb	r2, [r3, #0]
    7fe4:	23b0      	movs	r3, #176	; 0xb0
    7fe6:	005b      	lsls	r3, r3, #1
    7fe8:	188a      	adds	r2, r1, r2
    7fea:	18d3      	adds	r3, r2, r3
    7fec:	781b      	ldrb	r3, [r3, #0]
    7fee:	2210      	movs	r2, #16
    7ff0:	4013      	ands	r3, r2
    7ff2:	b2db      	uxtb	r3, r3
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d01d      	beq.n	8034 <_usb_device_interrupt_handler+0x284>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    7ff8:	230b      	movs	r3, #11
    7ffa:	18fb      	adds	r3, r7, r3
    7ffc:	781b      	ldrb	r3, [r3, #0]
    7ffe:	4a2c      	ldr	r2, [pc, #176]	; (80b0 <_usb_device_interrupt_handler+0x300>)
    8000:	015b      	lsls	r3, r3, #5
    8002:	18d3      	adds	r3, r2, r3
    8004:	685b      	ldr	r3, [r3, #4]
    8006:	049b      	lsls	r3, r3, #18
    8008:	0c9b      	lsrs	r3, r3, #18
    800a:	b29b      	uxth	r3, r3
    800c:	1c1a      	adds	r2, r3, #0
    800e:	4b2a      	ldr	r3, [pc, #168]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    8010:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    8012:	4b25      	ldr	r3, [pc, #148]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    8014:	681a      	ldr	r2, [r3, #0]
    8016:	230b      	movs	r3, #11
    8018:	18fb      	adds	r3, r7, r3
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	21d8      	movs	r1, #216	; 0xd8
    801e:	011b      	lsls	r3, r3, #4
    8020:	18d3      	adds	r3, r2, r3
    8022:	185b      	adds	r3, r3, r1
    8024:	685a      	ldr	r2, [r3, #4]
    8026:	4b20      	ldr	r3, [pc, #128]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    8028:	6819      	ldr	r1, [r3, #0]
    802a:	4b23      	ldr	r3, [pc, #140]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    802c:	1c08      	adds	r0, r1, #0
    802e:	1c19      	adds	r1, r3, #0
    8030:	4790      	blx	r2
					}
					return;
    8032:	e163      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
    8034:	e162      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    8036:	1dbb      	adds	r3, r7, #6
    8038:	881b      	ldrh	r3, [r3, #0]
    803a:	2203      	movs	r2, #3
    803c:	4013      	ands	r3, r2
    803e:	d100      	bne.n	8042 <_usb_device_interrupt_handler+0x292>
    8040:	e08c      	b.n	815c <_usb_device_interrupt_handler+0x3ac>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8042:	4b19      	ldr	r3, [pc, #100]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    8044:	681b      	ldr	r3, [r3, #0]
    8046:	681a      	ldr	r2, [r3, #0]
    8048:	230b      	movs	r3, #11
    804a:	18fb      	adds	r3, r7, r3
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	3308      	adds	r3, #8
    8050:	015b      	lsls	r3, r3, #5
    8052:	18d3      	adds	r3, r2, r3
    8054:	79db      	ldrb	r3, [r3, #7]
    8056:	b2db      	uxtb	r3, r3
    8058:	1c1a      	adds	r2, r3, #0
    805a:	2302      	movs	r3, #2
    805c:	4013      	ands	r3, r2
    805e:	d02d      	beq.n	80bc <_usb_device_interrupt_handler+0x30c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    8060:	4b11      	ldr	r3, [pc, #68]	; (80a8 <_usb_device_interrupt_handler+0x2f8>)
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	681a      	ldr	r2, [r3, #0]
    8066:	230b      	movs	r3, #11
    8068:	18fb      	adds	r3, r7, r3
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	3308      	adds	r3, #8
    806e:	015b      	lsls	r3, r3, #5
    8070:	18d3      	adds	r3, r2, r3
    8072:	2202      	movs	r2, #2
    8074:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    8076:	230b      	movs	r3, #11
    8078:	18fb      	adds	r3, r7, r3
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	2280      	movs	r2, #128	; 0x80
    807e:	4252      	negs	r2, r2
    8080:	4313      	orrs	r3, r2
    8082:	b2da      	uxtb	r2, r3
    8084:	4b0c      	ldr	r3, [pc, #48]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    8086:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    8088:	230b      	movs	r3, #11
    808a:	18fb      	adds	r3, r7, r3
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	4a08      	ldr	r2, [pc, #32]	; (80b0 <_usb_device_interrupt_handler+0x300>)
    8090:	015b      	lsls	r3, r3, #5
    8092:	18d3      	adds	r3, r2, r3
    8094:	3310      	adds	r3, #16
    8096:	685b      	ldr	r3, [r3, #4]
    8098:	049b      	lsls	r3, r3, #18
    809a:	0c9b      	lsrs	r3, r3, #18
    809c:	b29b      	uxth	r3, r3
    809e:	1c1a      	adds	r2, r3, #0
    80a0:	4b05      	ldr	r3, [pc, #20]	; (80b8 <_usb_device_interrupt_handler+0x308>)
    80a2:	805a      	strh	r2, [r3, #2]
    80a4:	e044      	b.n	8130 <_usb_device_interrupt_handler+0x380>
    80a6:	46c0      	nop			; (mov r8, r8)
    80a8:	200001dc 	.word	0x200001dc
    80ac:	00008f1c 	.word	0x00008f1c
    80b0:	200004c4 	.word	0x200004c4
    80b4:	200001e8 	.word	0x200001e8
    80b8:	200001ec 	.word	0x200001ec

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    80bc:	4b91      	ldr	r3, [pc, #580]	; (8304 <_usb_device_interrupt_handler+0x554>)
    80be:	681b      	ldr	r3, [r3, #0]
    80c0:	681a      	ldr	r2, [r3, #0]
    80c2:	230b      	movs	r3, #11
    80c4:	18fb      	adds	r3, r7, r3
    80c6:	781b      	ldrb	r3, [r3, #0]
    80c8:	3308      	adds	r3, #8
    80ca:	015b      	lsls	r3, r3, #5
    80cc:	18d3      	adds	r3, r2, r3
    80ce:	79db      	ldrb	r3, [r3, #7]
    80d0:	b2db      	uxtb	r3, r3
    80d2:	1c1a      	adds	r2, r3, #0
    80d4:	2301      	movs	r3, #1
    80d6:	4013      	ands	r3, r2
    80d8:	d02a      	beq.n	8130 <_usb_device_interrupt_handler+0x380>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    80da:	4b8a      	ldr	r3, [pc, #552]	; (8304 <_usb_device_interrupt_handler+0x554>)
    80dc:	681b      	ldr	r3, [r3, #0]
    80de:	681a      	ldr	r2, [r3, #0]
    80e0:	230b      	movs	r3, #11
    80e2:	18fb      	adds	r3, r7, r3
    80e4:	781b      	ldrb	r3, [r3, #0]
    80e6:	3308      	adds	r3, #8
    80e8:	015b      	lsls	r3, r3, #5
    80ea:	18d3      	adds	r3, r2, r3
    80ec:	2201      	movs	r2, #1
    80ee:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    80f0:	4b85      	ldr	r3, [pc, #532]	; (8308 <_usb_device_interrupt_handler+0x558>)
    80f2:	220b      	movs	r2, #11
    80f4:	18ba      	adds	r2, r7, r2
    80f6:	7812      	ldrb	r2, [r2, #0]
    80f8:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    80fa:	230b      	movs	r3, #11
    80fc:	18fb      	adds	r3, r7, r3
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	4a82      	ldr	r2, [pc, #520]	; (830c <_usb_device_interrupt_handler+0x55c>)
    8102:	015b      	lsls	r3, r3, #5
    8104:	18d3      	adds	r3, r2, r3
    8106:	685b      	ldr	r3, [r3, #4]
    8108:	049b      	lsls	r3, r3, #18
    810a:	0c9b      	lsrs	r3, r3, #18
    810c:	b29b      	uxth	r3, r3
    810e:	1c1a      	adds	r2, r3, #0
    8110:	4b7d      	ldr	r3, [pc, #500]	; (8308 <_usb_device_interrupt_handler+0x558>)
    8112:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    8114:	230b      	movs	r3, #11
    8116:	18fb      	adds	r3, r7, r3
    8118:	781b      	ldrb	r3, [r3, #0]
    811a:	4a7c      	ldr	r2, [pc, #496]	; (830c <_usb_device_interrupt_handler+0x55c>)
    811c:	015b      	lsls	r3, r3, #5
    811e:	18d3      	adds	r3, r2, r3
    8120:	685b      	ldr	r3, [r3, #4]
    8122:	0b9b      	lsrs	r3, r3, #14
    8124:	049b      	lsls	r3, r3, #18
    8126:	0c9b      	lsrs	r3, r3, #18
    8128:	b29b      	uxth	r3, r3
    812a:	1c1a      	adds	r2, r3, #0
    812c:	4b76      	ldr	r3, [pc, #472]	; (8308 <_usb_device_interrupt_handler+0x558>)
    812e:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    8130:	1d3b      	adds	r3, r7, #4
    8132:	881b      	ldrh	r3, [r3, #0]
    8134:	2203      	movs	r2, #3
    8136:	4013      	ands	r3, r2
    8138:	d00f      	beq.n	815a <_usb_device_interrupt_handler+0x3aa>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    813a:	4b72      	ldr	r3, [pc, #456]	; (8304 <_usb_device_interrupt_handler+0x554>)
    813c:	681a      	ldr	r2, [r3, #0]
    813e:	230b      	movs	r3, #11
    8140:	18fb      	adds	r3, r7, r3
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	330d      	adds	r3, #13
    8146:	011b      	lsls	r3, r3, #4
    8148:	18d3      	adds	r3, r2, r3
    814a:	685a      	ldr	r2, [r3, #4]
    814c:	4b6d      	ldr	r3, [pc, #436]	; (8304 <_usb_device_interrupt_handler+0x554>)
    814e:	6819      	ldr	r1, [r3, #0]
    8150:	4b6d      	ldr	r3, [pc, #436]	; (8308 <_usb_device_interrupt_handler+0x558>)
    8152:	1c08      	adds	r0, r1, #0
    8154:	1c19      	adds	r1, r3, #0
    8156:	4790      	blx	r2
					}
					return;
    8158:	e0d0      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
    815a:	e0cf      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    815c:	1dbb      	adds	r3, r7, #6
    815e:	881b      	ldrh	r3, [r3, #0]
    8160:	220c      	movs	r2, #12
    8162:	4013      	ands	r3, r2
    8164:	d100      	bne.n	8168 <_usb_device_interrupt_handler+0x3b8>
    8166:	e0bc      	b.n	82e2 <_usb_device_interrupt_handler+0x532>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8168:	4b66      	ldr	r3, [pc, #408]	; (8304 <_usb_device_interrupt_handler+0x554>)
    816a:	681b      	ldr	r3, [r3, #0]
    816c:	681a      	ldr	r2, [r3, #0]
    816e:	230b      	movs	r3, #11
    8170:	18fb      	adds	r3, r7, r3
    8172:	781b      	ldrb	r3, [r3, #0]
    8174:	3308      	adds	r3, #8
    8176:	015b      	lsls	r3, r3, #5
    8178:	18d3      	adds	r3, r2, r3
    817a:	79db      	ldrb	r3, [r3, #7]
    817c:	b2db      	uxtb	r3, r3
    817e:	1c1a      	adds	r2, r3, #0
    8180:	2308      	movs	r3, #8
    8182:	4013      	ands	r3, r2
    8184:	d045      	beq.n	8212 <_usb_device_interrupt_handler+0x462>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    8186:	4b5f      	ldr	r3, [pc, #380]	; (8304 <_usb_device_interrupt_handler+0x554>)
    8188:	681b      	ldr	r3, [r3, #0]
    818a:	681a      	ldr	r2, [r3, #0]
    818c:	230b      	movs	r3, #11
    818e:	18fb      	adds	r3, r7, r3
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	3308      	adds	r3, #8
    8194:	015b      	lsls	r3, r3, #5
    8196:	18d3      	adds	r3, r2, r3
    8198:	2208      	movs	r2, #8
    819a:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    819c:	230b      	movs	r3, #11
    819e:	18fb      	adds	r3, r7, r3
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	4a5a      	ldr	r2, [pc, #360]	; (830c <_usb_device_interrupt_handler+0x55c>)
    81a4:	015b      	lsls	r3, r3, #5
    81a6:	18d3      	adds	r3, r2, r3
    81a8:	3318      	adds	r3, #24
    81aa:	789b      	ldrb	r3, [r3, #2]
    81ac:	b2db      	uxtb	r3, r3
    81ae:	1c1a      	adds	r2, r3, #0
    81b0:	2302      	movs	r3, #2
    81b2:	4013      	ands	r3, r2
    81b4:	d014      	beq.n	81e0 <_usb_device_interrupt_handler+0x430>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    81b6:	230b      	movs	r3, #11
    81b8:	18fb      	adds	r3, r7, r3
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	220b      	movs	r2, #11
    81be:	18ba      	adds	r2, r7, r2
    81c0:	7812      	ldrb	r2, [r2, #0]
    81c2:	4952      	ldr	r1, [pc, #328]	; (830c <_usb_device_interrupt_handler+0x55c>)
    81c4:	0152      	lsls	r2, r2, #5
    81c6:	188a      	adds	r2, r1, r2
    81c8:	3218      	adds	r2, #24
    81ca:	7892      	ldrb	r2, [r2, #2]
    81cc:	b2d2      	uxtb	r2, r2
    81ce:	2102      	movs	r1, #2
    81d0:	438a      	bics	r2, r1
    81d2:	b2d1      	uxtb	r1, r2
    81d4:	4a4d      	ldr	r2, [pc, #308]	; (830c <_usb_device_interrupt_handler+0x55c>)
    81d6:	015b      	lsls	r3, r3, #5
    81d8:	18d3      	adds	r3, r2, r3
    81da:	3318      	adds	r3, #24
    81dc:	1c0a      	adds	r2, r1, #0
    81de:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    81e0:	230b      	movs	r3, #11
    81e2:	18fb      	adds	r3, r7, r3
    81e4:	781b      	ldrb	r3, [r3, #0]
    81e6:	2280      	movs	r2, #128	; 0x80
    81e8:	4252      	negs	r2, r2
    81ea:	4313      	orrs	r3, r2
    81ec:	b2da      	uxtb	r2, r3
    81ee:	4b46      	ldr	r3, [pc, #280]	; (8308 <_usb_device_interrupt_handler+0x558>)
    81f0:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    81f2:	4b44      	ldr	r3, [pc, #272]	; (8304 <_usb_device_interrupt_handler+0x554>)
    81f4:	681b      	ldr	r3, [r3, #0]
    81f6:	681a      	ldr	r2, [r3, #0]
    81f8:	230b      	movs	r3, #11
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	781b      	ldrb	r3, [r3, #0]
    81fe:	3308      	adds	r3, #8
    8200:	015b      	lsls	r3, r3, #5
    8202:	18d3      	adds	r3, r2, r3
    8204:	79db      	ldrb	r3, [r3, #7]
    8206:	b2db      	uxtb	r3, r3
    8208:	1c1a      	adds	r2, r3, #0
    820a:	2302      	movs	r3, #2
    820c:	4013      	ands	r3, r2
    820e:	d051      	beq.n	82b4 <_usb_device_interrupt_handler+0x504>
							return;
    8210:	e074      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8212:	4b3c      	ldr	r3, [pc, #240]	; (8304 <_usb_device_interrupt_handler+0x554>)
    8214:	681b      	ldr	r3, [r3, #0]
    8216:	681a      	ldr	r2, [r3, #0]
    8218:	230b      	movs	r3, #11
    821a:	18fb      	adds	r3, r7, r3
    821c:	781b      	ldrb	r3, [r3, #0]
    821e:	3308      	adds	r3, #8
    8220:	015b      	lsls	r3, r3, #5
    8222:	18d3      	adds	r3, r2, r3
    8224:	79db      	ldrb	r3, [r3, #7]
    8226:	b2db      	uxtb	r3, r3
    8228:	1c1a      	adds	r2, r3, #0
    822a:	2304      	movs	r3, #4
    822c:	4013      	ands	r3, r2
    822e:	d041      	beq.n	82b4 <_usb_device_interrupt_handler+0x504>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    8230:	4b34      	ldr	r3, [pc, #208]	; (8304 <_usb_device_interrupt_handler+0x554>)
    8232:	681b      	ldr	r3, [r3, #0]
    8234:	681a      	ldr	r2, [r3, #0]
    8236:	230b      	movs	r3, #11
    8238:	18fb      	adds	r3, r7, r3
    823a:	781b      	ldrb	r3, [r3, #0]
    823c:	3308      	adds	r3, #8
    823e:	015b      	lsls	r3, r3, #5
    8240:	18d3      	adds	r3, r2, r3
    8242:	2204      	movs	r2, #4
    8244:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    8246:	230b      	movs	r3, #11
    8248:	18fb      	adds	r3, r7, r3
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	4a2f      	ldr	r2, [pc, #188]	; (830c <_usb_device_interrupt_handler+0x55c>)
    824e:	015b      	lsls	r3, r3, #5
    8250:	18d3      	adds	r3, r2, r3
    8252:	3308      	adds	r3, #8
    8254:	789b      	ldrb	r3, [r3, #2]
    8256:	b2db      	uxtb	r3, r3
    8258:	1c1a      	adds	r2, r3, #0
    825a:	2302      	movs	r3, #2
    825c:	4013      	ands	r3, r2
    825e:	d014      	beq.n	828a <_usb_device_interrupt_handler+0x4da>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    8260:	230b      	movs	r3, #11
    8262:	18fb      	adds	r3, r7, r3
    8264:	781b      	ldrb	r3, [r3, #0]
    8266:	220b      	movs	r2, #11
    8268:	18ba      	adds	r2, r7, r2
    826a:	7812      	ldrb	r2, [r2, #0]
    826c:	4927      	ldr	r1, [pc, #156]	; (830c <_usb_device_interrupt_handler+0x55c>)
    826e:	0152      	lsls	r2, r2, #5
    8270:	188a      	adds	r2, r1, r2
    8272:	3208      	adds	r2, #8
    8274:	7892      	ldrb	r2, [r2, #2]
    8276:	b2d2      	uxtb	r2, r2
    8278:	2102      	movs	r1, #2
    827a:	438a      	bics	r2, r1
    827c:	b2d1      	uxtb	r1, r2
    827e:	4a23      	ldr	r2, [pc, #140]	; (830c <_usb_device_interrupt_handler+0x55c>)
    8280:	015b      	lsls	r3, r3, #5
    8282:	18d3      	adds	r3, r2, r3
    8284:	3308      	adds	r3, #8
    8286:	1c0a      	adds	r2, r1, #0
    8288:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    828a:	4b1f      	ldr	r3, [pc, #124]	; (8308 <_usb_device_interrupt_handler+0x558>)
    828c:	220b      	movs	r2, #11
    828e:	18ba      	adds	r2, r7, r2
    8290:	7812      	ldrb	r2, [r2, #0]
    8292:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8294:	4b1b      	ldr	r3, [pc, #108]	; (8304 <_usb_device_interrupt_handler+0x554>)
    8296:	681b      	ldr	r3, [r3, #0]
    8298:	681a      	ldr	r2, [r3, #0]
    829a:	230b      	movs	r3, #11
    829c:	18fb      	adds	r3, r7, r3
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	3308      	adds	r3, #8
    82a2:	015b      	lsls	r3, r3, #5
    82a4:	18d3      	adds	r3, r2, r3
    82a6:	79db      	ldrb	r3, [r3, #7]
    82a8:	b2db      	uxtb	r3, r3
    82aa:	1c1a      	adds	r2, r3, #0
    82ac:	2301      	movs	r3, #1
    82ae:	4013      	ands	r3, r2
    82b0:	d000      	beq.n	82b4 <_usb_device_interrupt_handler+0x504>
							return;
    82b2:	e023      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    82b4:	1d3b      	adds	r3, r7, #4
    82b6:	881b      	ldrh	r3, [r3, #0]
    82b8:	220c      	movs	r2, #12
    82ba:	4013      	ands	r3, r2
    82bc:	d010      	beq.n	82e0 <_usb_device_interrupt_handler+0x530>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    82be:	4b11      	ldr	r3, [pc, #68]	; (8304 <_usb_device_interrupt_handler+0x554>)
    82c0:	681a      	ldr	r2, [r3, #0]
    82c2:	230b      	movs	r3, #11
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	781b      	ldrb	r3, [r3, #0]
    82c8:	21d4      	movs	r1, #212	; 0xd4
    82ca:	011b      	lsls	r3, r3, #4
    82cc:	18d3      	adds	r3, r2, r3
    82ce:	185b      	adds	r3, r3, r1
    82d0:	685a      	ldr	r2, [r3, #4]
    82d2:	4b0c      	ldr	r3, [pc, #48]	; (8304 <_usb_device_interrupt_handler+0x554>)
    82d4:	6819      	ldr	r1, [r3, #0]
    82d6:	4b0c      	ldr	r3, [pc, #48]	; (8308 <_usb_device_interrupt_handler+0x558>)
    82d8:	1c08      	adds	r0, r1, #0
    82da:	1c19      	adds	r1, r3, #0
    82dc:	4790      	blx	r2
					}
					return;
    82de:	e00d      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
    82e0:	e00c      	b.n	82fc <_usb_device_interrupt_handler+0x54c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    82e2:	230b      	movs	r3, #11
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	781a      	ldrb	r2, [r3, #0]
    82e8:	230b      	movs	r3, #11
    82ea:	18fb      	adds	r3, r7, r3
    82ec:	3201      	adds	r2, #1
    82ee:	701a      	strb	r2, [r3, #0]
    82f0:	230b      	movs	r3, #11
    82f2:	18fb      	adds	r3, r7, r3
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	2b07      	cmp	r3, #7
    82f8:	d800      	bhi.n	82fc <_usb_device_interrupt_handler+0x54c>
    82fa:	e5c6      	b.n	7e8a <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    82fc:	46bd      	mov	sp, r7
    82fe:	b004      	add	sp, #16
    8300:	bd80      	pop	{r7, pc}
    8302:	46c0      	nop			; (mov r8, r8)
    8304:	200001dc 	.word	0x200001dc
    8308:	200001ec 	.word	0x200001ec
    830c:	200004c4 	.word	0x200004c4

00008310 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    8310:	b580      	push	{r7, lr}
    8312:	b082      	sub	sp, #8
    8314:	af00      	add	r7, sp, #0
    8316:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	681a      	ldr	r2, [r3, #0]
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	b2db      	uxtb	r3, r3
    8324:	2102      	movs	r1, #2
    8326:	430b      	orrs	r3, r1
    8328:	b2db      	uxtb	r3, r3
    832a:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    832c:	46c0      	nop			; (mov r8, r8)
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	789b      	ldrb	r3, [r3, #2]
    8334:	b2db      	uxtb	r3, r3
    8336:	2b02      	cmp	r3, #2
    8338:	d0f9      	beq.n	832e <usb_enable+0x1e>
}
    833a:	46bd      	mov	sp, r7
    833c:	b002      	add	sp, #8
    833e:	bd80      	pop	{r7, pc}

00008340 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    8340:	b580      	push	{r7, lr}
    8342:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    8344:	4b07      	ldr	r3, [pc, #28]	; (8364 <USB_Handler+0x24>)
    8346:	681b      	ldr	r3, [r3, #0]
    8348:	681b      	ldr	r3, [r3, #0]
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	b2db      	uxtb	r3, r3
    834e:	09db      	lsrs	r3, r3, #7
    8350:	b2db      	uxtb	r3, r3
    8352:	2b00      	cmp	r3, #0
    8354:	d002      	beq.n	835c <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    8356:	4b04      	ldr	r3, [pc, #16]	; (8368 <USB_Handler+0x28>)
    8358:	4798      	blx	r3
    835a:	e001      	b.n	8360 <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    835c:	4b03      	ldr	r3, [pc, #12]	; (836c <USB_Handler+0x2c>)
    835e:	4798      	blx	r3
	}
}
    8360:	46bd      	mov	sp, r7
    8362:	bd80      	pop	{r7, pc}
    8364:	200001dc 	.word	0x200001dc
    8368:	00006a9d 	.word	0x00006a9d
    836c:	00007db1 	.word	0x00007db1

00008370 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    8370:	b580      	push	{r7, lr}
    8372:	b082      	sub	sp, #8
    8374:	af00      	add	r7, sp, #0
    8376:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	2200      	movs	r2, #0
    837c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	2201      	movs	r2, #1
    8382:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    8384:	687b      	ldr	r3, [r7, #4]
    8386:	2200      	movs	r2, #0
    8388:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    838a:	687b      	ldr	r3, [r7, #4]
    838c:	2201      	movs	r2, #1
    838e:	70da      	strb	r2, [r3, #3]
}
    8390:	46bd      	mov	sp, r7
    8392:	b002      	add	sp, #8
    8394:	bd80      	pop	{r7, pc}
    8396:	46c0      	nop			; (mov r8, r8)

00008398 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    8398:	b580      	push	{r7, lr}
    839a:	b08c      	sub	sp, #48	; 0x30
    839c:	af00      	add	r7, sp, #0
    839e:	60f8      	str	r0, [r7, #12]
    83a0:	60b9      	str	r1, [r7, #8]
    83a2:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    83a4:	4bc3      	ldr	r3, [pc, #780]	; (86b4 <usb_init+0x31c>)
    83a6:	2200      	movs	r2, #0
    83a8:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    83aa:	4bc3      	ldr	r3, [pc, #780]	; (86b8 <usb_init+0x320>)
    83ac:	68fa      	ldr	r2, [r7, #12]
    83ae:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    83b0:	68fb      	ldr	r3, [r7, #12]
    83b2:	68ba      	ldr	r2, [r7, #8]
    83b4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    83b6:	2001      	movs	r0, #1
    83b8:	2120      	movs	r1, #32
    83ba:	4bc0      	ldr	r3, [pc, #768]	; (86bc <usb_init+0x324>)
    83bc:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    83be:	2318      	movs	r3, #24
    83c0:	18fb      	adds	r3, r7, r3
    83c2:	1c18      	adds	r0, r3, #0
    83c4:	4bbe      	ldr	r3, [pc, #760]	; (86c0 <usb_init+0x328>)
    83c6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    83c8:	2318      	movs	r3, #24
    83ca:	18fb      	adds	r3, r7, r3
    83cc:	2206      	movs	r2, #6
    83ce:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    83d0:	2318      	movs	r3, #24
    83d2:	18fb      	adds	r3, r7, r3
    83d4:	2018      	movs	r0, #24
    83d6:	1c19      	adds	r1, r3, #0
    83d8:	4bba      	ldr	r3, [pc, #744]	; (86c4 <usb_init+0x32c>)
    83da:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    83dc:	2318      	movs	r3, #24
    83de:	18fb      	adds	r3, r7, r3
    83e0:	2206      	movs	r2, #6
    83e2:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    83e4:	2318      	movs	r3, #24
    83e6:	18fb      	adds	r3, r7, r3
    83e8:	2019      	movs	r0, #25
    83ea:	1c19      	adds	r1, r3, #0
    83ec:	4bb5      	ldr	r3, [pc, #724]	; (86c4 <usb_init+0x32c>)
    83ee:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    83f0:	2314      	movs	r3, #20
    83f2:	18fb      	adds	r3, r7, r3
    83f4:	1c18      	adds	r0, r3, #0
    83f6:	4bb4      	ldr	r3, [pc, #720]	; (86c8 <usb_init+0x330>)
    83f8:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	789a      	ldrb	r2, [r3, #2]
    83fe:	2314      	movs	r3, #20
    8400:	18fb      	adds	r3, r7, r3
    8402:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    8404:	2314      	movs	r3, #20
    8406:	18fb      	adds	r3, r7, r3
    8408:	2006      	movs	r0, #6
    840a:	1c19      	adds	r1, r3, #0
    840c:	4baf      	ldr	r3, [pc, #700]	; (86cc <usb_init+0x334>)
    840e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    8410:	2006      	movs	r0, #6
    8412:	4baf      	ldr	r3, [pc, #700]	; (86d0 <usb_init+0x338>)
    8414:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    8416:	68bb      	ldr	r3, [r7, #8]
    8418:	781a      	ldrb	r2, [r3, #0]
    841a:	2101      	movs	r1, #1
    841c:	430a      	orrs	r2, r1
    841e:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    8420:	46c0      	nop			; (mov r8, r8)
    8422:	68bb      	ldr	r3, [r7, #8]
    8424:	789b      	ldrb	r3, [r3, #2]
    8426:	2201      	movs	r2, #1
    8428:	4013      	ands	r3, r2
    842a:	b2db      	uxtb	r3, r3
    842c:	2b00      	cmp	r3, #0
    842e:	d1f8      	bne.n	8422 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8430:	4ba8      	ldr	r3, [pc, #672]	; (86d4 <usb_init+0x33c>)
    8432:	78da      	ldrb	r2, [r3, #3]
    8434:	2103      	movs	r1, #3
    8436:	438a      	bics	r2, r1
    8438:	1c11      	adds	r1, r2, #0
    843a:	2202      	movs	r2, #2
    843c:	430a      	orrs	r2, r1
    843e:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8440:	4ba4      	ldr	r3, [pc, #656]	; (86d4 <usb_init+0x33c>)
    8442:	78da      	ldrb	r2, [r3, #3]
    8444:	210c      	movs	r1, #12
    8446:	438a      	bics	r2, r1
    8448:	1c11      	adds	r1, r2, #0
    844a:	2208      	movs	r2, #8
    844c:	430a      	orrs	r2, r1
    844e:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    8450:	4ba1      	ldr	r3, [pc, #644]	; (86d8 <usb_init+0x340>)
    8452:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    8454:	0b5b      	lsrs	r3, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    8456:	221f      	movs	r2, #31
    8458:	4013      	ands	r3, r2
    845a:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    845e:	2b1f      	cmp	r3, #31
    8460:	d101      	bne.n	8466 <usb_init+0xce>
		pad_transn = 5;
    8462:	2305      	movs	r3, #5
    8464:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    8466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8468:	b2db      	uxtb	r3, r3
    846a:	1c1a      	adds	r2, r3, #0
    846c:	231f      	movs	r3, #31
    846e:	4013      	ands	r3, r2
    8470:	b2da      	uxtb	r2, r3
    8472:	68bb      	ldr	r3, [r7, #8]
    8474:	1c11      	adds	r1, r2, #0
    8476:	221f      	movs	r2, #31
    8478:	400a      	ands	r2, r1
    847a:	0190      	lsls	r0, r2, #6
    847c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    847e:	4997      	ldr	r1, [pc, #604]	; (86dc <usb_init+0x344>)
    8480:	400a      	ands	r2, r1
    8482:	1c11      	adds	r1, r2, #0
    8484:	1c02      	adds	r2, r0, #0
    8486:	430a      	orrs	r2, r1
    8488:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    848a:	4b93      	ldr	r3, [pc, #588]	; (86d8 <usb_init+0x340>)
    848c:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    848e:	0c9b      	lsrs	r3, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    8490:	221f      	movs	r2, #31
    8492:	4013      	ands	r3, r2
    8494:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    8496:	6a3b      	ldr	r3, [r7, #32]
    8498:	2b1f      	cmp	r3, #31
    849a:	d101      	bne.n	84a0 <usb_init+0x108>
		pad_transp = 29;
    849c:	231d      	movs	r3, #29
    849e:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    84a0:	6a3b      	ldr	r3, [r7, #32]
    84a2:	b2db      	uxtb	r3, r3
    84a4:	1c1a      	adds	r2, r3, #0
    84a6:	231f      	movs	r3, #31
    84a8:	4013      	ands	r3, r2
    84aa:	b2da      	uxtb	r2, r3
    84ac:	68bb      	ldr	r3, [r7, #8]
    84ae:	1c11      	adds	r1, r2, #0
    84b0:	221f      	movs	r2, #31
    84b2:	1c08      	adds	r0, r1, #0
    84b4:	4010      	ands	r0, r2
    84b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    84b8:	211f      	movs	r1, #31
    84ba:	438a      	bics	r2, r1
    84bc:	1c11      	adds	r1, r2, #0
    84be:	1c02      	adds	r2, r0, #0
    84c0:	430a      	orrs	r2, r1
    84c2:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    84c4:	4b84      	ldr	r3, [pc, #528]	; (86d8 <usb_init+0x340>)
    84c6:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    84c8:	0ddb      	lsrs	r3, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    84ca:	2207      	movs	r2, #7
    84cc:	4013      	ands	r3, r2
    84ce:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    84d0:	69fb      	ldr	r3, [r7, #28]
    84d2:	2b07      	cmp	r3, #7
    84d4:	d101      	bne.n	84da <usb_init+0x142>
		pad_trim = 3;
    84d6:	2303      	movs	r3, #3
    84d8:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    84da:	69fb      	ldr	r3, [r7, #28]
    84dc:	b2db      	uxtb	r3, r3
    84de:	1c1a      	adds	r2, r3, #0
    84e0:	2307      	movs	r3, #7
    84e2:	4013      	ands	r3, r2
    84e4:	b2da      	uxtb	r2, r3
    84e6:	68bb      	ldr	r3, [r7, #8]
    84e8:	1c11      	adds	r1, r2, #0
    84ea:	2207      	movs	r2, #7
    84ec:	400a      	ands	r2, r1
    84ee:	0310      	lsls	r0, r2, #12
    84f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    84f2:	497b      	ldr	r1, [pc, #492]	; (86e0 <usb_init+0x348>)
    84f4:	400a      	ands	r2, r1
    84f6:	1c11      	adds	r1, r2, #0
    84f8:	1c02      	adds	r2, r0, #0
    84fa:	430a      	orrs	r2, r1
    84fc:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	781a      	ldrb	r2, [r3, #0]
    8502:	68bb      	ldr	r3, [r7, #8]
    8504:	01d0      	lsls	r0, r2, #7
    8506:	781a      	ldrb	r2, [r3, #0]
    8508:	217f      	movs	r1, #127	; 0x7f
    850a:	400a      	ands	r2, r1
    850c:	1c11      	adds	r1, r2, #0
    850e:	1c02      	adds	r2, r0, #0
    8510:	430a      	orrs	r2, r1
    8512:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	785a      	ldrb	r2, [r3, #1]
    8518:	68bb      	ldr	r3, [r7, #8]
    851a:	2101      	movs	r1, #1
    851c:	400a      	ands	r2, r1
    851e:	0090      	lsls	r0, r2, #2
    8520:	781a      	ldrb	r2, [r3, #0]
    8522:	2104      	movs	r1, #4
    8524:	438a      	bics	r2, r1
    8526:	1c11      	adds	r1, r2, #0
    8528:	1c02      	adds	r2, r0, #0
    852a:	430a      	orrs	r2, r1
    852c:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    852e:	4a6d      	ldr	r2, [pc, #436]	; (86e4 <usb_init+0x34c>)
    8530:	68bb      	ldr	r3, [r7, #8]
    8532:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    8534:	687b      	ldr	r3, [r7, #4]
    8536:	78db      	ldrb	r3, [r3, #3]
    8538:	2b01      	cmp	r3, #1
    853a:	d106      	bne.n	854a <usb_init+0x1b2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    853c:	68fb      	ldr	r3, [r7, #12]
    853e:	681b      	ldr	r3, [r3, #0]
    8540:	891a      	ldrh	r2, [r3, #8]
    8542:	210c      	movs	r1, #12
    8544:	438a      	bics	r2, r1
    8546:	811a      	strh	r2, [r3, #8]
    8548:	e00c      	b.n	8564 <usb_init+0x1cc>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	78db      	ldrb	r3, [r3, #3]
    854e:	2b00      	cmp	r3, #0
    8550:	d108      	bne.n	8564 <usb_init+0x1cc>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    8552:	68fb      	ldr	r3, [r7, #12]
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	891a      	ldrh	r2, [r3, #8]
    8558:	210c      	movs	r1, #12
    855a:	438a      	bics	r2, r1
    855c:	1c11      	adds	r1, r2, #0
    855e:	2204      	movs	r2, #4
    8560:	430a      	orrs	r2, r1
    8562:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    8564:	4a5f      	ldr	r2, [pc, #380]	; (86e4 <usb_init+0x34c>)
    8566:	2380      	movs	r3, #128	; 0x80
    8568:	005b      	lsls	r3, r3, #1
    856a:	1c10      	adds	r0, r2, #0
    856c:	2100      	movs	r1, #0
    856e:	1c1a      	adds	r2, r3, #0
    8570:	4b5d      	ldr	r3, [pc, #372]	; (86e8 <usb_init+0x350>)
    8572:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8574:	2300      	movs	r3, #0
    8576:	62fb      	str	r3, [r7, #44]	; 0x2c
    8578:	e008      	b.n	858c <usb_init+0x1f4>
		module_inst->host_callback[i] = NULL;
    857a:	68fa      	ldr	r2, [r7, #12]
    857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    857e:	009b      	lsls	r3, r3, #2
    8580:	18d3      	adds	r3, r2, r3
    8582:	2200      	movs	r2, #0
    8584:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    8586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8588:	3301      	adds	r3, #1
    858a:	62fb      	str	r3, [r7, #44]	; 0x2c
    858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    858e:	2b07      	cmp	r3, #7
    8590:	d9f3      	bls.n	857a <usb_init+0x1e2>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    8592:	2300      	movs	r3, #0
    8594:	62fb      	str	r3, [r7, #44]	; 0x2c
    8596:	e015      	b.n	85c4 <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    8598:	2300      	movs	r3, #0
    859a:	62bb      	str	r3, [r7, #40]	; 0x28
    859c:	e00c      	b.n	85b8 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    859e:	68fa      	ldr	r2, [r7, #12]
    85a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85a2:	0099      	lsls	r1, r3, #2
    85a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85a6:	18cb      	adds	r3, r1, r3
    85a8:	3308      	adds	r3, #8
    85aa:	009b      	lsls	r3, r3, #2
    85ac:	18d3      	adds	r3, r2, r3
    85ae:	2200      	movs	r2, #0
    85b0:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    85b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85b4:	3301      	adds	r3, #1
    85b6:	62bb      	str	r3, [r7, #40]	; 0x28
    85b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85ba:	2b03      	cmp	r3, #3
    85bc:	d9ef      	bls.n	859e <usb_init+0x206>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    85be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85c0:	3301      	adds	r3, #1
    85c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    85c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85c6:	2b07      	cmp	r3, #7
    85c8:	d9e6      	bls.n	8598 <usb_init+0x200>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    85ca:	68fb      	ldr	r3, [r7, #12]
    85cc:	22a4      	movs	r2, #164	; 0xa4
    85ce:	2100      	movs	r1, #0
    85d0:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    85d2:	68fb      	ldr	r3, [r7, #12]
    85d4:	22a5      	movs	r2, #165	; 0xa5
    85d6:	2100      	movs	r1, #0
    85d8:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    85da:	2300      	movs	r3, #0
    85dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    85de:	e010      	b.n	8602 <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    85e0:	68fa      	ldr	r2, [r7, #12]
    85e2:	21a0      	movs	r1, #160	; 0xa0
    85e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85e6:	18d3      	adds	r3, r2, r3
    85e8:	185b      	adds	r3, r3, r1
    85ea:	2200      	movs	r2, #0
    85ec:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    85ee:	68fa      	ldr	r2, [r7, #12]
    85f0:	21a8      	movs	r1, #168	; 0xa8
    85f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85f4:	18d3      	adds	r3, r2, r3
    85f6:	185b      	adds	r3, r3, r1
    85f8:	2200      	movs	r2, #0
    85fa:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    85fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85fe:	3301      	adds	r3, #1
    8600:	62fb      	str	r3, [r7, #44]	; 0x2c
    8602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8604:	2b07      	cmp	r3, #7
    8606:	d9eb      	bls.n	85e0 <usb_init+0x248>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    8608:	2300      	movs	r3, #0
    860a:	62fb      	str	r3, [r7, #44]	; 0x2c
    860c:	e008      	b.n	8620 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    860e:	68fb      	ldr	r3, [r7, #12]
    8610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8612:	322e      	adds	r2, #46	; 0x2e
    8614:	0092      	lsls	r2, r2, #2
    8616:	2100      	movs	r1, #0
    8618:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    861c:	3301      	adds	r3, #1
    861e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8622:	2b06      	cmp	r3, #6
    8624:	d9f3      	bls.n	860e <usb_init+0x276>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    8626:	2300      	movs	r3, #0
    8628:	62fb      	str	r3, [r7, #44]	; 0x2c
    862a:	e015      	b.n	8658 <usb_init+0x2c0>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    862c:	2300      	movs	r3, #0
    862e:	62bb      	str	r3, [r7, #40]	; 0x28
    8630:	e00c      	b.n	864c <usb_init+0x2b4>
			module_inst->device_endpoint_callback[i][j] = NULL;
    8632:	68fa      	ldr	r2, [r7, #12]
    8634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8636:	0099      	lsls	r1, r3, #2
    8638:	6abb      	ldr	r3, [r7, #40]	; 0x28
    863a:	18cb      	adds	r3, r1, r3
    863c:	3334      	adds	r3, #52	; 0x34
    863e:	009b      	lsls	r3, r3, #2
    8640:	18d3      	adds	r3, r2, r3
    8642:	2200      	movs	r2, #0
    8644:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    8646:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8648:	3301      	adds	r3, #1
    864a:	62bb      	str	r3, [r7, #40]	; 0x28
    864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    864e:	2b03      	cmp	r3, #3
    8650:	d9ef      	bls.n	8632 <usb_init+0x29a>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    8652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8654:	3301      	adds	r3, #1
    8656:	62fb      	str	r3, [r7, #44]	; 0x2c
    8658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    865a:	2b07      	cmp	r3, #7
    865c:	d9e6      	bls.n	862c <usb_init+0x294>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    865e:	68fa      	ldr	r2, [r7, #12]
    8660:	23aa      	movs	r3, #170	; 0xaa
    8662:	005b      	lsls	r3, r3, #1
    8664:	2100      	movs	r1, #0
    8666:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    8668:	68fa      	ldr	r2, [r7, #12]
    866a:	23ab      	movs	r3, #171	; 0xab
    866c:	005b      	lsls	r3, r3, #1
    866e:	2100      	movs	r1, #0
    8670:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    8672:	2300      	movs	r3, #0
    8674:	62bb      	str	r3, [r7, #40]	; 0x28
    8676:	e012      	b.n	869e <usb_init+0x306>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    8678:	68f9      	ldr	r1, [r7, #12]
    867a:	23ac      	movs	r3, #172	; 0xac
    867c:	005b      	lsls	r3, r3, #1
    867e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8680:	188a      	adds	r2, r1, r2
    8682:	18d3      	adds	r3, r2, r3
    8684:	2200      	movs	r2, #0
    8686:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    8688:	68f9      	ldr	r1, [r7, #12]
    868a:	23b0      	movs	r3, #176	; 0xb0
    868c:	005b      	lsls	r3, r3, #1
    868e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8690:	188a      	adds	r2, r1, r2
    8692:	18d3      	adds	r3, r2, r3
    8694:	2200      	movs	r2, #0
    8696:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    8698:	6abb      	ldr	r3, [r7, #40]	; 0x28
    869a:	3301      	adds	r3, #1
    869c:	62bb      	str	r3, [r7, #40]	; 0x28
    869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86a0:	2b07      	cmp	r3, #7
    86a2:	d9e9      	bls.n	8678 <usb_init+0x2e0>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    86a4:	2007      	movs	r0, #7
    86a6:	4b11      	ldr	r3, [pc, #68]	; (86ec <usb_init+0x354>)
    86a8:	4798      	blx	r3

	return STATUS_OK;
    86aa:	2300      	movs	r3, #0
}
    86ac:	1c18      	adds	r0, r3, #0
    86ae:	46bd      	mov	sp, r7
    86b0:	b00c      	add	sp, #48	; 0x30
    86b2:	bd80      	pop	{r7, pc}
    86b4:	200001f4 	.word	0x200001f4
    86b8:	200001dc 	.word	0x200001dc
    86bc:	000069ed 	.word	0x000069ed
    86c0:	00006a49 	.word	0x00006a49
    86c4:	00005129 	.word	0x00005129
    86c8:	000069d9 	.word	0x000069d9
    86cc:	00004e3d 	.word	0x00004e3d
    86d0:	00004e81 	.word	0x00004e81
    86d4:	41005000 	.word	0x41005000
    86d8:	00806024 	.word	0x00806024
    86dc:	fffff83f 	.word	0xfffff83f
    86e0:	ffff8fff 	.word	0xffff8fff
    86e4:	200004c4 	.word	0x200004c4
    86e8:	00008e33 	.word	0x00008e33
    86ec:	00006a71 	.word	0x00006a71

000086f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    86f0:	b580      	push	{r7, lr}
    86f2:	b082      	sub	sp, #8
    86f4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    86f6:	4b2f      	ldr	r3, [pc, #188]	; (87b4 <Reset_Handler+0xc4>)
    86f8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    86fa:	4b2f      	ldr	r3, [pc, #188]	; (87b8 <Reset_Handler+0xc8>)
    86fc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    86fe:	687a      	ldr	r2, [r7, #4]
    8700:	683b      	ldr	r3, [r7, #0]
    8702:	429a      	cmp	r2, r3
    8704:	d00c      	beq.n	8720 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    8706:	e007      	b.n	8718 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8708:	683b      	ldr	r3, [r7, #0]
    870a:	1d1a      	adds	r2, r3, #4
    870c:	603a      	str	r2, [r7, #0]
    870e:	687a      	ldr	r2, [r7, #4]
    8710:	1d11      	adds	r1, r2, #4
    8712:	6079      	str	r1, [r7, #4]
    8714:	6812      	ldr	r2, [r2, #0]
    8716:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    8718:	683a      	ldr	r2, [r7, #0]
    871a:	4b28      	ldr	r3, [pc, #160]	; (87bc <Reset_Handler+0xcc>)
    871c:	429a      	cmp	r2, r3
    871e:	d3f3      	bcc.n	8708 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8720:	4b27      	ldr	r3, [pc, #156]	; (87c0 <Reset_Handler+0xd0>)
    8722:	603b      	str	r3, [r7, #0]
    8724:	e004      	b.n	8730 <Reset_Handler+0x40>
                *pDest++ = 0;
    8726:	683b      	ldr	r3, [r7, #0]
    8728:	1d1a      	adds	r2, r3, #4
    872a:	603a      	str	r2, [r7, #0]
    872c:	2200      	movs	r2, #0
    872e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8730:	683a      	ldr	r2, [r7, #0]
    8732:	4b24      	ldr	r3, [pc, #144]	; (87c4 <Reset_Handler+0xd4>)
    8734:	429a      	cmp	r2, r3
    8736:	d3f6      	bcc.n	8726 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8738:	4b23      	ldr	r3, [pc, #140]	; (87c8 <Reset_Handler+0xd8>)
    873a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    873c:	4b23      	ldr	r3, [pc, #140]	; (87cc <Reset_Handler+0xdc>)
    873e:	687a      	ldr	r2, [r7, #4]
    8740:	21ff      	movs	r1, #255	; 0xff
    8742:	438a      	bics	r2, r1
    8744:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8746:	4a22      	ldr	r2, [pc, #136]	; (87d0 <Reset_Handler+0xe0>)
    8748:	2390      	movs	r3, #144	; 0x90
    874a:	005b      	lsls	r3, r3, #1
    874c:	2102      	movs	r1, #2
    874e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8750:	4b20      	ldr	r3, [pc, #128]	; (87d4 <Reset_Handler+0xe4>)
    8752:	78da      	ldrb	r2, [r3, #3]
    8754:	2103      	movs	r1, #3
    8756:	438a      	bics	r2, r1
    8758:	1c11      	adds	r1, r2, #0
    875a:	2202      	movs	r2, #2
    875c:	430a      	orrs	r2, r1
    875e:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8760:	4b1c      	ldr	r3, [pc, #112]	; (87d4 <Reset_Handler+0xe4>)
    8762:	78da      	ldrb	r2, [r3, #3]
    8764:	210c      	movs	r1, #12
    8766:	438a      	bics	r2, r1
    8768:	1c11      	adds	r1, r2, #0
    876a:	2208      	movs	r2, #8
    876c:	430a      	orrs	r2, r1
    876e:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    8770:	4b19      	ldr	r3, [pc, #100]	; (87d8 <Reset_Handler+0xe8>)
    8772:	7b9a      	ldrb	r2, [r3, #14]
    8774:	2130      	movs	r1, #48	; 0x30
    8776:	438a      	bics	r2, r1
    8778:	1c11      	adds	r1, r2, #0
    877a:	2220      	movs	r2, #32
    877c:	430a      	orrs	r2, r1
    877e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8780:	4b15      	ldr	r3, [pc, #84]	; (87d8 <Reset_Handler+0xe8>)
    8782:	7b9a      	ldrb	r2, [r3, #14]
    8784:	210c      	movs	r1, #12
    8786:	438a      	bics	r2, r1
    8788:	1c11      	adds	r1, r2, #0
    878a:	2208      	movs	r2, #8
    878c:	430a      	orrs	r2, r1
    878e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8790:	4b11      	ldr	r3, [pc, #68]	; (87d8 <Reset_Handler+0xe8>)
    8792:	7b9a      	ldrb	r2, [r3, #14]
    8794:	2103      	movs	r1, #3
    8796:	438a      	bics	r2, r1
    8798:	1c11      	adds	r1, r2, #0
    879a:	2202      	movs	r2, #2
    879c:	430a      	orrs	r2, r1
    879e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    87a0:	4b0e      	ldr	r3, [pc, #56]	; (87dc <Reset_Handler+0xec>)
    87a2:	685a      	ldr	r2, [r3, #4]
    87a4:	2180      	movs	r1, #128	; 0x80
    87a6:	430a      	orrs	r2, r1
    87a8:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    87aa:	4b0d      	ldr	r3, [pc, #52]	; (87e0 <Reset_Handler+0xf0>)
    87ac:	4798      	blx	r3

        /* Branch to main function */
        main();
    87ae:	4b0d      	ldr	r3, [pc, #52]	; (87e4 <Reset_Handler+0xf4>)
    87b0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    87b2:	e7fe      	b.n	87b2 <Reset_Handler+0xc2>
    87b4:	00008f64 	.word	0x00008f64
    87b8:	20000000 	.word	0x20000000
    87bc:	200000e0 	.word	0x200000e0
    87c0:	200000e0 	.word	0x200000e0
    87c4:	200005c4 	.word	0x200005c4
    87c8:	00000000 	.word	0x00000000
    87cc:	e000ed00 	.word	0xe000ed00
    87d0:	41007000 	.word	0x41007000
    87d4:	41005000 	.word	0x41005000
    87d8:	41004800 	.word	0x41004800
    87dc:	41004000 	.word	0x41004000
    87e0:	00008dd5 	.word	0x00008dd5
    87e4:	00008979 	.word	0x00008979

000087e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	af00      	add	r7, sp, #0
        while (1) {
        }
    87ec:	e7fe      	b.n	87ec <Dummy_Handler+0x4>
    87ee:	46c0      	nop			; (mov r8, r8)

000087f0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b082      	sub	sp, #8
    87f4:	af00      	add	r7, sp, #0
    87f6:	1c02      	adds	r2, r0, #0
    87f8:	1dfb      	adds	r3, r7, #7
    87fa:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    87fc:	4b13      	ldr	r3, [pc, #76]	; (884c <system_set_sleepmode+0x5c>)
    87fe:	685a      	ldr	r2, [r3, #4]
    8800:	21c0      	movs	r1, #192	; 0xc0
    8802:	0089      	lsls	r1, r1, #2
    8804:	430a      	orrs	r2, r1
    8806:	605a      	str	r2, [r3, #4]
#endif

	switch (sleep_mode) {
    8808:	1dfb      	adds	r3, r7, #7
    880a:	781b      	ldrb	r3, [r3, #0]
    880c:	2b00      	cmp	r3, #0
    880e:	db16      	blt.n	883e <system_set_sleepmode+0x4e>
    8810:	2b02      	cmp	r3, #2
    8812:	dd02      	ble.n	881a <system_set_sleepmode+0x2a>
    8814:	2b03      	cmp	r3, #3
    8816:	d00b      	beq.n	8830 <system_set_sleepmode+0x40>
    8818:	e011      	b.n	883e <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    881a:	4b0d      	ldr	r3, [pc, #52]	; (8850 <system_set_sleepmode+0x60>)
    881c:	4a0c      	ldr	r2, [pc, #48]	; (8850 <system_set_sleepmode+0x60>)
    881e:	6912      	ldr	r2, [r2, #16]
    8820:	2104      	movs	r1, #4
    8822:	438a      	bics	r2, r1
    8824:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    8826:	4a0b      	ldr	r2, [pc, #44]	; (8854 <system_set_sleepmode+0x64>)
    8828:	1dfb      	adds	r3, r7, #7
    882a:	781b      	ldrb	r3, [r3, #0]
    882c:	7053      	strb	r3, [r2, #1]
			break;
    882e:	e008      	b.n	8842 <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    8830:	4b07      	ldr	r3, [pc, #28]	; (8850 <system_set_sleepmode+0x60>)
    8832:	4a07      	ldr	r2, [pc, #28]	; (8850 <system_set_sleepmode+0x60>)
    8834:	6912      	ldr	r2, [r2, #16]
    8836:	2104      	movs	r1, #4
    8838:	430a      	orrs	r2, r1
    883a:	611a      	str	r2, [r3, #16]
			break;
    883c:	e001      	b.n	8842 <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    883e:	2317      	movs	r3, #23
    8840:	e000      	b.n	8844 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    8842:	2300      	movs	r3, #0
}
    8844:	1c18      	adds	r0, r3, #0
    8846:	46bd      	mov	sp, r7
    8848:	b002      	add	sp, #8
    884a:	bd80      	pop	{r7, pc}
    884c:	41004000 	.word	0x41004000
    8850:	e000ed00 	.word	0xe000ed00
    8854:	40000400 	.word	0x40000400

00008858 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    8858:	b580      	push	{r7, lr}
    885a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    885c:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    8860:	bf30      	wfi
	__DSB();
	__WFI();
}
    8862:	46bd      	mov	sp, r7
    8864:	bd80      	pop	{r7, pc}
    8866:	46c0      	nop			; (mov r8, r8)

00008868 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    8868:	b580      	push	{r7, lr}
    886a:	b082      	sub	sp, #8
    886c:	af00      	add	r7, sp, #0
    886e:	1c02      	adds	r2, r0, #0
    8870:	1dfb      	adds	r3, r7, #7
    8872:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8874:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8876:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    887a:	4b0a      	ldr	r3, [pc, #40]	; (88a4 <sleepmgr_sleep+0x3c>)
    887c:	2200      	movs	r2, #0
    887e:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    8880:	1dfb      	adds	r3, r7, #7
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	3b01      	subs	r3, #1
    8886:	b2db      	uxtb	r3, r3
    8888:	1c18      	adds	r0, r3, #0
    888a:	4b07      	ldr	r3, [pc, #28]	; (88a8 <sleepmgr_sleep+0x40>)
    888c:	4798      	blx	r3
	cpu_irq_enable();
    888e:	4b05      	ldr	r3, [pc, #20]	; (88a4 <sleepmgr_sleep+0x3c>)
    8890:	2201      	movs	r2, #1
    8892:	701a      	strb	r2, [r3, #0]
    8894:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8898:	b662      	cpsie	i
	system_sleep();
    889a:	4b04      	ldr	r3, [pc, #16]	; (88ac <sleepmgr_sleep+0x44>)
    889c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    889e:	46bd      	mov	sp, r7
    88a0:	b002      	add	sp, #8
    88a2:	bd80      	pop	{r7, pc}
    88a4:	200000dc 	.word	0x200000dc
    88a8:	000087f1 	.word	0x000087f1
    88ac:	00008859 	.word	0x00008859

000088b0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    88b0:	b580      	push	{r7, lr}
    88b2:	b082      	sub	sp, #8
    88b4:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    88b6:	1dfb      	adds	r3, r7, #7
    88b8:	2200      	movs	r2, #0
    88ba:	701a      	strb	r2, [r3, #0]
    88bc:	e009      	b.n	88d2 <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    88be:	1dfb      	adds	r3, r7, #7
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	4a09      	ldr	r2, [pc, #36]	; (88e8 <sleepmgr_init+0x38>)
    88c4:	2100      	movs	r1, #0
    88c6:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    88c8:	1dfb      	adds	r3, r7, #7
    88ca:	781a      	ldrb	r2, [r3, #0]
    88cc:	1dfb      	adds	r3, r7, #7
    88ce:	3201      	adds	r2, #1
    88d0:	701a      	strb	r2, [r3, #0]
    88d2:	1dfb      	adds	r3, r7, #7
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	2b03      	cmp	r3, #3
    88d8:	d9f1      	bls.n	88be <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    88da:	4b03      	ldr	r3, [pc, #12]	; (88e8 <sleepmgr_init+0x38>)
    88dc:	2201      	movs	r2, #1
    88de:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    88e0:	46bd      	mov	sp, r7
    88e2:	b002      	add	sp, #8
    88e4:	bd80      	pop	{r7, pc}
    88e6:	46c0      	nop			; (mov r8, r8)
    88e8:	200002b4 	.word	0x200002b4

000088ec <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    88ec:	b580      	push	{r7, lr}
    88ee:	b082      	sub	sp, #8
    88f0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    88f2:	1dfb      	adds	r3, r7, #7
    88f4:	2200      	movs	r2, #0
    88f6:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    88f8:	4b0a      	ldr	r3, [pc, #40]	; (8924 <sleepmgr_get_sleep_mode+0x38>)
    88fa:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    88fc:	e007      	b.n	890e <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    88fe:	683b      	ldr	r3, [r7, #0]
    8900:	3301      	adds	r3, #1
    8902:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    8904:	1dfb      	adds	r3, r7, #7
    8906:	1dfa      	adds	r2, r7, #7
    8908:	7812      	ldrb	r2, [r2, #0]
    890a:	3201      	adds	r2, #1
    890c:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    890e:	683b      	ldr	r3, [r7, #0]
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	2b00      	cmp	r3, #0
    8914:	d0f3      	beq.n	88fe <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    8916:	1dfb      	adds	r3, r7, #7
    8918:	781b      	ldrb	r3, [r3, #0]
}
    891a:	1c18      	adds	r0, r3, #0
    891c:	46bd      	mov	sp, r7
    891e:	b002      	add	sp, #8
    8920:	bd80      	pop	{r7, pc}
    8922:	46c0      	nop			; (mov r8, r8)
    8924:	200002b4 	.word	0x200002b4

00008928 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    8928:	b590      	push	{r4, r7, lr}
    892a:	b083      	sub	sp, #12
    892c:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    892e:	b672      	cpsid	i
    8930:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    8934:	4b0d      	ldr	r3, [pc, #52]	; (896c <sleepmgr_enter_sleep+0x44>)
    8936:	2200      	movs	r2, #0
    8938:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    893a:	1dfc      	adds	r4, r7, #7
    893c:	4b0c      	ldr	r3, [pc, #48]	; (8970 <sleepmgr_enter_sleep+0x48>)
    893e:	4798      	blx	r3
    8940:	1c03      	adds	r3, r0, #0
    8942:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    8944:	1dfb      	adds	r3, r7, #7
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	2b00      	cmp	r3, #0
    894a:	d106      	bne.n	895a <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    894c:	4b07      	ldr	r3, [pc, #28]	; (896c <sleepmgr_enter_sleep+0x44>)
    894e:	2201      	movs	r2, #1
    8950:	701a      	strb	r2, [r3, #0]
    8952:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8956:	b662      	cpsie	i
		return;
    8958:	e004      	b.n	8964 <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    895a:	1dfb      	adds	r3, r7, #7
    895c:	781b      	ldrb	r3, [r3, #0]
    895e:	1c18      	adds	r0, r3, #0
    8960:	4b04      	ldr	r3, [pc, #16]	; (8974 <sleepmgr_enter_sleep+0x4c>)
    8962:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8964:	46bd      	mov	sp, r7
    8966:	b003      	add	sp, #12
    8968:	bd90      	pop	{r4, r7, pc}
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	200000dc 	.word	0x200000dc
    8970:	000088ed 	.word	0x000088ed
    8974:	00008869 	.word	0x00008869

00008978 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    8978:	b580      	push	{r7, lr}
    897a:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    897c:	4b09      	ldr	r3, [pc, #36]	; (89a4 <main+0x2c>)
    897e:	2201      	movs	r2, #1
    8980:	701a      	strb	r2, [r3, #0]
    8982:	f3bf 8f5f 	dmb	sy
    8986:	b662      	cpsie	i
	system_init();
    8988:	4b07      	ldr	r3, [pc, #28]	; (89a8 <main+0x30>)
    898a:	4798      	blx	r3

	// Initialize the sleep manager
	sleepmgr_init();
    898c:	4b07      	ldr	r3, [pc, #28]	; (89ac <main+0x34>)
    898e:	4798      	blx	r3
	ui_init();
    8990:	4b07      	ldr	r3, [pc, #28]	; (89b0 <main+0x38>)
    8992:	4798      	blx	r3
	ui_powerdown();
    8994:	4b07      	ldr	r3, [pc, #28]	; (89b4 <main+0x3c>)
    8996:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    8998:	4b07      	ldr	r3, [pc, #28]	; (89b8 <main+0x40>)
    899a:	4798      	blx	r3
				static uint16_t virtual_sof = 0;
				ui_process(virtual_sof++);
			}
		}
#else /* #ifdef USB_DEVICE_LOW_SPEED */
		sleepmgr_enter_sleep();
    899c:	4b07      	ldr	r3, [pc, #28]	; (89bc <main+0x44>)
    899e:	4798      	blx	r3
#endif
	}
    89a0:	e7fc      	b.n	899c <main+0x24>
    89a2:	46c0      	nop			; (mov r8, r8)
    89a4:	200000dc 	.word	0x200000dc
    89a8:	00005181 	.word	0x00005181
    89ac:	000088b1 	.word	0x000088b1
    89b0:	000026f9 	.word	0x000026f9
    89b4:	00002715 	.word	0x00002715
    89b8:	000031bd 	.word	0x000031bd
    89bc:	00008929 	.word	0x00008929

000089c0 <main_suspend_action>:
}

void main_suspend_action(void)
{
    89c0:	b580      	push	{r7, lr}
    89c2:	af00      	add	r7, sp, #0
	ui_powerdown();
    89c4:	4b01      	ldr	r3, [pc, #4]	; (89cc <main_suspend_action+0xc>)
    89c6:	4798      	blx	r3
}
    89c8:	46bd      	mov	sp, r7
    89ca:	bd80      	pop	{r7, pc}
    89cc:	00002715 	.word	0x00002715

000089d0 <main_resume_action>:

void main_resume_action(void)
{
    89d0:	b580      	push	{r7, lr}
    89d2:	af00      	add	r7, sp, #0
	ui_wakeup();
    89d4:	4b01      	ldr	r3, [pc, #4]	; (89dc <main_resume_action+0xc>)
    89d6:	4798      	blx	r3
}
    89d8:	46bd      	mov	sp, r7
    89da:	bd80      	pop	{r7, pc}
    89dc:	00002751 	.word	0x00002751

000089e0 <main_sof_action>:

void main_sof_action(void)
{
    89e0:	b580      	push	{r7, lr}
    89e2:	af00      	add	r7, sp, #0
	if (!main_b_mouse_enable)
    89e4:	4b08      	ldr	r3, [pc, #32]	; (8a08 <main_sof_action+0x28>)
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	b2db      	uxtb	r3, r3
    89ea:	2201      	movs	r2, #1
    89ec:	4053      	eors	r3, r2
    89ee:	b2db      	uxtb	r3, r3
    89f0:	2b00      	cmp	r3, #0
    89f2:	d000      	beq.n	89f6 <main_sof_action+0x16>
		return;
    89f4:	e005      	b.n	8a02 <main_sof_action+0x22>
	ui_process(udd_get_frame_number());
    89f6:	4b05      	ldr	r3, [pc, #20]	; (8a0c <main_sof_action+0x2c>)
    89f8:	4798      	blx	r3
    89fa:	1c03      	adds	r3, r0, #0
    89fc:	1c18      	adds	r0, r3, #0
    89fe:	4b04      	ldr	r3, [pc, #16]	; (8a10 <main_sof_action+0x30>)
    8a00:	4798      	blx	r3
}
    8a02:	46bd      	mov	sp, r7
    8a04:	bd80      	pop	{r7, pc}
    8a06:	46c0      	nop			; (mov r8, r8)
    8a08:	200001f8 	.word	0x200001f8
    8a0c:	00005999 	.word	0x00005999
    8a10:	00002765 	.word	0x00002765

00008a14 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    8a14:	b580      	push	{r7, lr}
    8a16:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8a18:	4b01      	ldr	r3, [pc, #4]	; (8a20 <main_remotewakeup_enable+0xc>)
    8a1a:	4798      	blx	r3
}
    8a1c:	46bd      	mov	sp, r7
    8a1e:	bd80      	pop	{r7, pc}
    8a20:	00002729 	.word	0x00002729

00008a24 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8a28:	4b01      	ldr	r3, [pc, #4]	; (8a30 <main_remotewakeup_disable+0xc>)
    8a2a:	4798      	blx	r3
}
    8a2c:	46bd      	mov	sp, r7
    8a2e:	bd80      	pop	{r7, pc}
    8a30:	0000273d 	.word	0x0000273d

00008a34 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	af00      	add	r7, sp, #0
	ui_powerdown();
    8a38:	4b01      	ldr	r3, [pc, #4]	; (8a40 <main_suspend_lpm_action+0xc>)
    8a3a:	4798      	blx	r3
}
    8a3c:	46bd      	mov	sp, r7
    8a3e:	bd80      	pop	{r7, pc}
    8a40:	00002715 	.word	0x00002715

00008a44 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    8a44:	b580      	push	{r7, lr}
    8a46:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    8a48:	4b01      	ldr	r3, [pc, #4]	; (8a50 <main_remotewakeup_lpm_disable+0xc>)
    8a4a:	4798      	blx	r3
}
    8a4c:	46bd      	mov	sp, r7
    8a4e:	bd80      	pop	{r7, pc}
    8a50:	0000273d 	.word	0x0000273d

00008a54 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    8a54:	b580      	push	{r7, lr}
    8a56:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    8a58:	4b01      	ldr	r3, [pc, #4]	; (8a60 <main_remotewakeup_lpm_enable+0xc>)
    8a5a:	4798      	blx	r3
}
    8a5c:	46bd      	mov	sp, r7
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	00002729 	.word	0x00002729

00008a64 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    8a68:	4b03      	ldr	r3, [pc, #12]	; (8a78 <main_mouse_enable+0x14>)
    8a6a:	2201      	movs	r2, #1
    8a6c:	701a      	strb	r2, [r3, #0]
	return true;
    8a6e:	2301      	movs	r3, #1
}
    8a70:	1c18      	adds	r0, r3, #0
    8a72:	46bd      	mov	sp, r7
    8a74:	bd80      	pop	{r7, pc}
    8a76:	46c0      	nop			; (mov r8, r8)
    8a78:	200001f8 	.word	0x200001f8

00008a7c <main_mouse_disable>:

void main_mouse_disable(void)
{
    8a7c:	b580      	push	{r7, lr}
    8a7e:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    8a80:	4b02      	ldr	r3, [pc, #8]	; (8a8c <main_mouse_disable+0x10>)
    8a82:	2200      	movs	r2, #0
    8a84:	701a      	strb	r2, [r3, #0]
}
    8a86:	46bd      	mov	sp, r7
    8a88:	bd80      	pop	{r7, pc}
    8a8a:	46c0      	nop			; (mov r8, r8)
    8a8c:	200001f8 	.word	0x200001f8

00008a90 <__aeabi_uidiv>:
    8a90:	2200      	movs	r2, #0
    8a92:	0843      	lsrs	r3, r0, #1
    8a94:	428b      	cmp	r3, r1
    8a96:	d374      	bcc.n	8b82 <__aeabi_uidiv+0xf2>
    8a98:	0903      	lsrs	r3, r0, #4
    8a9a:	428b      	cmp	r3, r1
    8a9c:	d35f      	bcc.n	8b5e <__aeabi_uidiv+0xce>
    8a9e:	0a03      	lsrs	r3, r0, #8
    8aa0:	428b      	cmp	r3, r1
    8aa2:	d344      	bcc.n	8b2e <__aeabi_uidiv+0x9e>
    8aa4:	0b03      	lsrs	r3, r0, #12
    8aa6:	428b      	cmp	r3, r1
    8aa8:	d328      	bcc.n	8afc <__aeabi_uidiv+0x6c>
    8aaa:	0c03      	lsrs	r3, r0, #16
    8aac:	428b      	cmp	r3, r1
    8aae:	d30d      	bcc.n	8acc <__aeabi_uidiv+0x3c>
    8ab0:	22ff      	movs	r2, #255	; 0xff
    8ab2:	0209      	lsls	r1, r1, #8
    8ab4:	ba12      	rev	r2, r2
    8ab6:	0c03      	lsrs	r3, r0, #16
    8ab8:	428b      	cmp	r3, r1
    8aba:	d302      	bcc.n	8ac2 <__aeabi_uidiv+0x32>
    8abc:	1212      	asrs	r2, r2, #8
    8abe:	0209      	lsls	r1, r1, #8
    8ac0:	d065      	beq.n	8b8e <__aeabi_uidiv+0xfe>
    8ac2:	0b03      	lsrs	r3, r0, #12
    8ac4:	428b      	cmp	r3, r1
    8ac6:	d319      	bcc.n	8afc <__aeabi_uidiv+0x6c>
    8ac8:	e000      	b.n	8acc <__aeabi_uidiv+0x3c>
    8aca:	0a09      	lsrs	r1, r1, #8
    8acc:	0bc3      	lsrs	r3, r0, #15
    8ace:	428b      	cmp	r3, r1
    8ad0:	d301      	bcc.n	8ad6 <__aeabi_uidiv+0x46>
    8ad2:	03cb      	lsls	r3, r1, #15
    8ad4:	1ac0      	subs	r0, r0, r3
    8ad6:	4152      	adcs	r2, r2
    8ad8:	0b83      	lsrs	r3, r0, #14
    8ada:	428b      	cmp	r3, r1
    8adc:	d301      	bcc.n	8ae2 <__aeabi_uidiv+0x52>
    8ade:	038b      	lsls	r3, r1, #14
    8ae0:	1ac0      	subs	r0, r0, r3
    8ae2:	4152      	adcs	r2, r2
    8ae4:	0b43      	lsrs	r3, r0, #13
    8ae6:	428b      	cmp	r3, r1
    8ae8:	d301      	bcc.n	8aee <__aeabi_uidiv+0x5e>
    8aea:	034b      	lsls	r3, r1, #13
    8aec:	1ac0      	subs	r0, r0, r3
    8aee:	4152      	adcs	r2, r2
    8af0:	0b03      	lsrs	r3, r0, #12
    8af2:	428b      	cmp	r3, r1
    8af4:	d301      	bcc.n	8afa <__aeabi_uidiv+0x6a>
    8af6:	030b      	lsls	r3, r1, #12
    8af8:	1ac0      	subs	r0, r0, r3
    8afa:	4152      	adcs	r2, r2
    8afc:	0ac3      	lsrs	r3, r0, #11
    8afe:	428b      	cmp	r3, r1
    8b00:	d301      	bcc.n	8b06 <__aeabi_uidiv+0x76>
    8b02:	02cb      	lsls	r3, r1, #11
    8b04:	1ac0      	subs	r0, r0, r3
    8b06:	4152      	adcs	r2, r2
    8b08:	0a83      	lsrs	r3, r0, #10
    8b0a:	428b      	cmp	r3, r1
    8b0c:	d301      	bcc.n	8b12 <__aeabi_uidiv+0x82>
    8b0e:	028b      	lsls	r3, r1, #10
    8b10:	1ac0      	subs	r0, r0, r3
    8b12:	4152      	adcs	r2, r2
    8b14:	0a43      	lsrs	r3, r0, #9
    8b16:	428b      	cmp	r3, r1
    8b18:	d301      	bcc.n	8b1e <__aeabi_uidiv+0x8e>
    8b1a:	024b      	lsls	r3, r1, #9
    8b1c:	1ac0      	subs	r0, r0, r3
    8b1e:	4152      	adcs	r2, r2
    8b20:	0a03      	lsrs	r3, r0, #8
    8b22:	428b      	cmp	r3, r1
    8b24:	d301      	bcc.n	8b2a <__aeabi_uidiv+0x9a>
    8b26:	020b      	lsls	r3, r1, #8
    8b28:	1ac0      	subs	r0, r0, r3
    8b2a:	4152      	adcs	r2, r2
    8b2c:	d2cd      	bcs.n	8aca <__aeabi_uidiv+0x3a>
    8b2e:	09c3      	lsrs	r3, r0, #7
    8b30:	428b      	cmp	r3, r1
    8b32:	d301      	bcc.n	8b38 <__aeabi_uidiv+0xa8>
    8b34:	01cb      	lsls	r3, r1, #7
    8b36:	1ac0      	subs	r0, r0, r3
    8b38:	4152      	adcs	r2, r2
    8b3a:	0983      	lsrs	r3, r0, #6
    8b3c:	428b      	cmp	r3, r1
    8b3e:	d301      	bcc.n	8b44 <__aeabi_uidiv+0xb4>
    8b40:	018b      	lsls	r3, r1, #6
    8b42:	1ac0      	subs	r0, r0, r3
    8b44:	4152      	adcs	r2, r2
    8b46:	0943      	lsrs	r3, r0, #5
    8b48:	428b      	cmp	r3, r1
    8b4a:	d301      	bcc.n	8b50 <__aeabi_uidiv+0xc0>
    8b4c:	014b      	lsls	r3, r1, #5
    8b4e:	1ac0      	subs	r0, r0, r3
    8b50:	4152      	adcs	r2, r2
    8b52:	0903      	lsrs	r3, r0, #4
    8b54:	428b      	cmp	r3, r1
    8b56:	d301      	bcc.n	8b5c <__aeabi_uidiv+0xcc>
    8b58:	010b      	lsls	r3, r1, #4
    8b5a:	1ac0      	subs	r0, r0, r3
    8b5c:	4152      	adcs	r2, r2
    8b5e:	08c3      	lsrs	r3, r0, #3
    8b60:	428b      	cmp	r3, r1
    8b62:	d301      	bcc.n	8b68 <__aeabi_uidiv+0xd8>
    8b64:	00cb      	lsls	r3, r1, #3
    8b66:	1ac0      	subs	r0, r0, r3
    8b68:	4152      	adcs	r2, r2
    8b6a:	0883      	lsrs	r3, r0, #2
    8b6c:	428b      	cmp	r3, r1
    8b6e:	d301      	bcc.n	8b74 <__aeabi_uidiv+0xe4>
    8b70:	008b      	lsls	r3, r1, #2
    8b72:	1ac0      	subs	r0, r0, r3
    8b74:	4152      	adcs	r2, r2
    8b76:	0843      	lsrs	r3, r0, #1
    8b78:	428b      	cmp	r3, r1
    8b7a:	d301      	bcc.n	8b80 <__aeabi_uidiv+0xf0>
    8b7c:	004b      	lsls	r3, r1, #1
    8b7e:	1ac0      	subs	r0, r0, r3
    8b80:	4152      	adcs	r2, r2
    8b82:	1a41      	subs	r1, r0, r1
    8b84:	d200      	bcs.n	8b88 <__aeabi_uidiv+0xf8>
    8b86:	4601      	mov	r1, r0
    8b88:	4152      	adcs	r2, r2
    8b8a:	4610      	mov	r0, r2
    8b8c:	4770      	bx	lr
    8b8e:	e7ff      	b.n	8b90 <__aeabi_uidiv+0x100>
    8b90:	b501      	push	{r0, lr}
    8b92:	2000      	movs	r0, #0
    8b94:	f000 f8fc 	bl	8d90 <__aeabi_idiv0>
    8b98:	bd02      	pop	{r1, pc}
    8b9a:	46c0      	nop			; (mov r8, r8)

00008b9c <__aeabi_uidivmod>:
    8b9c:	2900      	cmp	r1, #0
    8b9e:	d0f7      	beq.n	8b90 <__aeabi_uidiv+0x100>
    8ba0:	b503      	push	{r0, r1, lr}
    8ba2:	f7ff ff75 	bl	8a90 <__aeabi_uidiv>
    8ba6:	bc0e      	pop	{r1, r2, r3}
    8ba8:	4342      	muls	r2, r0
    8baa:	1a89      	subs	r1, r1, r2
    8bac:	4718      	bx	r3
    8bae:	46c0      	nop			; (mov r8, r8)

00008bb0 <__aeabi_idiv>:
    8bb0:	4603      	mov	r3, r0
    8bb2:	430b      	orrs	r3, r1
    8bb4:	d47f      	bmi.n	8cb6 <__aeabi_idiv+0x106>
    8bb6:	2200      	movs	r2, #0
    8bb8:	0843      	lsrs	r3, r0, #1
    8bba:	428b      	cmp	r3, r1
    8bbc:	d374      	bcc.n	8ca8 <__aeabi_idiv+0xf8>
    8bbe:	0903      	lsrs	r3, r0, #4
    8bc0:	428b      	cmp	r3, r1
    8bc2:	d35f      	bcc.n	8c84 <__aeabi_idiv+0xd4>
    8bc4:	0a03      	lsrs	r3, r0, #8
    8bc6:	428b      	cmp	r3, r1
    8bc8:	d344      	bcc.n	8c54 <__aeabi_idiv+0xa4>
    8bca:	0b03      	lsrs	r3, r0, #12
    8bcc:	428b      	cmp	r3, r1
    8bce:	d328      	bcc.n	8c22 <__aeabi_idiv+0x72>
    8bd0:	0c03      	lsrs	r3, r0, #16
    8bd2:	428b      	cmp	r3, r1
    8bd4:	d30d      	bcc.n	8bf2 <__aeabi_idiv+0x42>
    8bd6:	22ff      	movs	r2, #255	; 0xff
    8bd8:	0209      	lsls	r1, r1, #8
    8bda:	ba12      	rev	r2, r2
    8bdc:	0c03      	lsrs	r3, r0, #16
    8bde:	428b      	cmp	r3, r1
    8be0:	d302      	bcc.n	8be8 <__aeabi_idiv+0x38>
    8be2:	1212      	asrs	r2, r2, #8
    8be4:	0209      	lsls	r1, r1, #8
    8be6:	d065      	beq.n	8cb4 <__aeabi_idiv+0x104>
    8be8:	0b03      	lsrs	r3, r0, #12
    8bea:	428b      	cmp	r3, r1
    8bec:	d319      	bcc.n	8c22 <__aeabi_idiv+0x72>
    8bee:	e000      	b.n	8bf2 <__aeabi_idiv+0x42>
    8bf0:	0a09      	lsrs	r1, r1, #8
    8bf2:	0bc3      	lsrs	r3, r0, #15
    8bf4:	428b      	cmp	r3, r1
    8bf6:	d301      	bcc.n	8bfc <__aeabi_idiv+0x4c>
    8bf8:	03cb      	lsls	r3, r1, #15
    8bfa:	1ac0      	subs	r0, r0, r3
    8bfc:	4152      	adcs	r2, r2
    8bfe:	0b83      	lsrs	r3, r0, #14
    8c00:	428b      	cmp	r3, r1
    8c02:	d301      	bcc.n	8c08 <__aeabi_idiv+0x58>
    8c04:	038b      	lsls	r3, r1, #14
    8c06:	1ac0      	subs	r0, r0, r3
    8c08:	4152      	adcs	r2, r2
    8c0a:	0b43      	lsrs	r3, r0, #13
    8c0c:	428b      	cmp	r3, r1
    8c0e:	d301      	bcc.n	8c14 <__aeabi_idiv+0x64>
    8c10:	034b      	lsls	r3, r1, #13
    8c12:	1ac0      	subs	r0, r0, r3
    8c14:	4152      	adcs	r2, r2
    8c16:	0b03      	lsrs	r3, r0, #12
    8c18:	428b      	cmp	r3, r1
    8c1a:	d301      	bcc.n	8c20 <__aeabi_idiv+0x70>
    8c1c:	030b      	lsls	r3, r1, #12
    8c1e:	1ac0      	subs	r0, r0, r3
    8c20:	4152      	adcs	r2, r2
    8c22:	0ac3      	lsrs	r3, r0, #11
    8c24:	428b      	cmp	r3, r1
    8c26:	d301      	bcc.n	8c2c <__aeabi_idiv+0x7c>
    8c28:	02cb      	lsls	r3, r1, #11
    8c2a:	1ac0      	subs	r0, r0, r3
    8c2c:	4152      	adcs	r2, r2
    8c2e:	0a83      	lsrs	r3, r0, #10
    8c30:	428b      	cmp	r3, r1
    8c32:	d301      	bcc.n	8c38 <__aeabi_idiv+0x88>
    8c34:	028b      	lsls	r3, r1, #10
    8c36:	1ac0      	subs	r0, r0, r3
    8c38:	4152      	adcs	r2, r2
    8c3a:	0a43      	lsrs	r3, r0, #9
    8c3c:	428b      	cmp	r3, r1
    8c3e:	d301      	bcc.n	8c44 <__aeabi_idiv+0x94>
    8c40:	024b      	lsls	r3, r1, #9
    8c42:	1ac0      	subs	r0, r0, r3
    8c44:	4152      	adcs	r2, r2
    8c46:	0a03      	lsrs	r3, r0, #8
    8c48:	428b      	cmp	r3, r1
    8c4a:	d301      	bcc.n	8c50 <__aeabi_idiv+0xa0>
    8c4c:	020b      	lsls	r3, r1, #8
    8c4e:	1ac0      	subs	r0, r0, r3
    8c50:	4152      	adcs	r2, r2
    8c52:	d2cd      	bcs.n	8bf0 <__aeabi_idiv+0x40>
    8c54:	09c3      	lsrs	r3, r0, #7
    8c56:	428b      	cmp	r3, r1
    8c58:	d301      	bcc.n	8c5e <__aeabi_idiv+0xae>
    8c5a:	01cb      	lsls	r3, r1, #7
    8c5c:	1ac0      	subs	r0, r0, r3
    8c5e:	4152      	adcs	r2, r2
    8c60:	0983      	lsrs	r3, r0, #6
    8c62:	428b      	cmp	r3, r1
    8c64:	d301      	bcc.n	8c6a <__aeabi_idiv+0xba>
    8c66:	018b      	lsls	r3, r1, #6
    8c68:	1ac0      	subs	r0, r0, r3
    8c6a:	4152      	adcs	r2, r2
    8c6c:	0943      	lsrs	r3, r0, #5
    8c6e:	428b      	cmp	r3, r1
    8c70:	d301      	bcc.n	8c76 <__aeabi_idiv+0xc6>
    8c72:	014b      	lsls	r3, r1, #5
    8c74:	1ac0      	subs	r0, r0, r3
    8c76:	4152      	adcs	r2, r2
    8c78:	0903      	lsrs	r3, r0, #4
    8c7a:	428b      	cmp	r3, r1
    8c7c:	d301      	bcc.n	8c82 <__aeabi_idiv+0xd2>
    8c7e:	010b      	lsls	r3, r1, #4
    8c80:	1ac0      	subs	r0, r0, r3
    8c82:	4152      	adcs	r2, r2
    8c84:	08c3      	lsrs	r3, r0, #3
    8c86:	428b      	cmp	r3, r1
    8c88:	d301      	bcc.n	8c8e <__aeabi_idiv+0xde>
    8c8a:	00cb      	lsls	r3, r1, #3
    8c8c:	1ac0      	subs	r0, r0, r3
    8c8e:	4152      	adcs	r2, r2
    8c90:	0883      	lsrs	r3, r0, #2
    8c92:	428b      	cmp	r3, r1
    8c94:	d301      	bcc.n	8c9a <__aeabi_idiv+0xea>
    8c96:	008b      	lsls	r3, r1, #2
    8c98:	1ac0      	subs	r0, r0, r3
    8c9a:	4152      	adcs	r2, r2
    8c9c:	0843      	lsrs	r3, r0, #1
    8c9e:	428b      	cmp	r3, r1
    8ca0:	d301      	bcc.n	8ca6 <__aeabi_idiv+0xf6>
    8ca2:	004b      	lsls	r3, r1, #1
    8ca4:	1ac0      	subs	r0, r0, r3
    8ca6:	4152      	adcs	r2, r2
    8ca8:	1a41      	subs	r1, r0, r1
    8caa:	d200      	bcs.n	8cae <__aeabi_idiv+0xfe>
    8cac:	4601      	mov	r1, r0
    8cae:	4152      	adcs	r2, r2
    8cb0:	4610      	mov	r0, r2
    8cb2:	4770      	bx	lr
    8cb4:	e05d      	b.n	8d72 <__aeabi_idiv+0x1c2>
    8cb6:	0fca      	lsrs	r2, r1, #31
    8cb8:	d000      	beq.n	8cbc <__aeabi_idiv+0x10c>
    8cba:	4249      	negs	r1, r1
    8cbc:	1003      	asrs	r3, r0, #32
    8cbe:	d300      	bcc.n	8cc2 <__aeabi_idiv+0x112>
    8cc0:	4240      	negs	r0, r0
    8cc2:	4053      	eors	r3, r2
    8cc4:	2200      	movs	r2, #0
    8cc6:	469c      	mov	ip, r3
    8cc8:	0903      	lsrs	r3, r0, #4
    8cca:	428b      	cmp	r3, r1
    8ccc:	d32d      	bcc.n	8d2a <__aeabi_idiv+0x17a>
    8cce:	0a03      	lsrs	r3, r0, #8
    8cd0:	428b      	cmp	r3, r1
    8cd2:	d312      	bcc.n	8cfa <__aeabi_idiv+0x14a>
    8cd4:	22fc      	movs	r2, #252	; 0xfc
    8cd6:	0189      	lsls	r1, r1, #6
    8cd8:	ba12      	rev	r2, r2
    8cda:	0a03      	lsrs	r3, r0, #8
    8cdc:	428b      	cmp	r3, r1
    8cde:	d30c      	bcc.n	8cfa <__aeabi_idiv+0x14a>
    8ce0:	0189      	lsls	r1, r1, #6
    8ce2:	1192      	asrs	r2, r2, #6
    8ce4:	428b      	cmp	r3, r1
    8ce6:	d308      	bcc.n	8cfa <__aeabi_idiv+0x14a>
    8ce8:	0189      	lsls	r1, r1, #6
    8cea:	1192      	asrs	r2, r2, #6
    8cec:	428b      	cmp	r3, r1
    8cee:	d304      	bcc.n	8cfa <__aeabi_idiv+0x14a>
    8cf0:	0189      	lsls	r1, r1, #6
    8cf2:	d03a      	beq.n	8d6a <__aeabi_idiv+0x1ba>
    8cf4:	1192      	asrs	r2, r2, #6
    8cf6:	e000      	b.n	8cfa <__aeabi_idiv+0x14a>
    8cf8:	0989      	lsrs	r1, r1, #6
    8cfa:	09c3      	lsrs	r3, r0, #7
    8cfc:	428b      	cmp	r3, r1
    8cfe:	d301      	bcc.n	8d04 <__aeabi_idiv+0x154>
    8d00:	01cb      	lsls	r3, r1, #7
    8d02:	1ac0      	subs	r0, r0, r3
    8d04:	4152      	adcs	r2, r2
    8d06:	0983      	lsrs	r3, r0, #6
    8d08:	428b      	cmp	r3, r1
    8d0a:	d301      	bcc.n	8d10 <__aeabi_idiv+0x160>
    8d0c:	018b      	lsls	r3, r1, #6
    8d0e:	1ac0      	subs	r0, r0, r3
    8d10:	4152      	adcs	r2, r2
    8d12:	0943      	lsrs	r3, r0, #5
    8d14:	428b      	cmp	r3, r1
    8d16:	d301      	bcc.n	8d1c <__aeabi_idiv+0x16c>
    8d18:	014b      	lsls	r3, r1, #5
    8d1a:	1ac0      	subs	r0, r0, r3
    8d1c:	4152      	adcs	r2, r2
    8d1e:	0903      	lsrs	r3, r0, #4
    8d20:	428b      	cmp	r3, r1
    8d22:	d301      	bcc.n	8d28 <__aeabi_idiv+0x178>
    8d24:	010b      	lsls	r3, r1, #4
    8d26:	1ac0      	subs	r0, r0, r3
    8d28:	4152      	adcs	r2, r2
    8d2a:	08c3      	lsrs	r3, r0, #3
    8d2c:	428b      	cmp	r3, r1
    8d2e:	d301      	bcc.n	8d34 <__aeabi_idiv+0x184>
    8d30:	00cb      	lsls	r3, r1, #3
    8d32:	1ac0      	subs	r0, r0, r3
    8d34:	4152      	adcs	r2, r2
    8d36:	0883      	lsrs	r3, r0, #2
    8d38:	428b      	cmp	r3, r1
    8d3a:	d301      	bcc.n	8d40 <__aeabi_idiv+0x190>
    8d3c:	008b      	lsls	r3, r1, #2
    8d3e:	1ac0      	subs	r0, r0, r3
    8d40:	4152      	adcs	r2, r2
    8d42:	d2d9      	bcs.n	8cf8 <__aeabi_idiv+0x148>
    8d44:	0843      	lsrs	r3, r0, #1
    8d46:	428b      	cmp	r3, r1
    8d48:	d301      	bcc.n	8d4e <__aeabi_idiv+0x19e>
    8d4a:	004b      	lsls	r3, r1, #1
    8d4c:	1ac0      	subs	r0, r0, r3
    8d4e:	4152      	adcs	r2, r2
    8d50:	1a41      	subs	r1, r0, r1
    8d52:	d200      	bcs.n	8d56 <__aeabi_idiv+0x1a6>
    8d54:	4601      	mov	r1, r0
    8d56:	4663      	mov	r3, ip
    8d58:	4152      	adcs	r2, r2
    8d5a:	105b      	asrs	r3, r3, #1
    8d5c:	4610      	mov	r0, r2
    8d5e:	d301      	bcc.n	8d64 <__aeabi_idiv+0x1b4>
    8d60:	4240      	negs	r0, r0
    8d62:	2b00      	cmp	r3, #0
    8d64:	d500      	bpl.n	8d68 <__aeabi_idiv+0x1b8>
    8d66:	4249      	negs	r1, r1
    8d68:	4770      	bx	lr
    8d6a:	4663      	mov	r3, ip
    8d6c:	105b      	asrs	r3, r3, #1
    8d6e:	d300      	bcc.n	8d72 <__aeabi_idiv+0x1c2>
    8d70:	4240      	negs	r0, r0
    8d72:	b501      	push	{r0, lr}
    8d74:	2000      	movs	r0, #0
    8d76:	f000 f80b 	bl	8d90 <__aeabi_idiv0>
    8d7a:	bd02      	pop	{r1, pc}

00008d7c <__aeabi_idivmod>:
    8d7c:	2900      	cmp	r1, #0
    8d7e:	d0f8      	beq.n	8d72 <__aeabi_idiv+0x1c2>
    8d80:	b503      	push	{r0, r1, lr}
    8d82:	f7ff ff15 	bl	8bb0 <__aeabi_idiv>
    8d86:	bc0e      	pop	{r1, r2, r3}
    8d88:	4342      	muls	r2, r0
    8d8a:	1a89      	subs	r1, r1, r2
    8d8c:	4718      	bx	r3
    8d8e:	46c0      	nop			; (mov r8, r8)

00008d90 <__aeabi_idiv0>:
    8d90:	4770      	bx	lr
    8d92:	46c0      	nop			; (mov r8, r8)

00008d94 <__ctzsi2>:
    8d94:	4241      	negs	r1, r0
    8d96:	4008      	ands	r0, r1
    8d98:	211c      	movs	r1, #28
    8d9a:	2301      	movs	r3, #1
    8d9c:	041b      	lsls	r3, r3, #16
    8d9e:	4298      	cmp	r0, r3
    8da0:	d301      	bcc.n	8da6 <__ctzsi2+0x12>
    8da2:	0c00      	lsrs	r0, r0, #16
    8da4:	3910      	subs	r1, #16
    8da6:	0a1b      	lsrs	r3, r3, #8
    8da8:	4298      	cmp	r0, r3
    8daa:	d301      	bcc.n	8db0 <__ctzsi2+0x1c>
    8dac:	0a00      	lsrs	r0, r0, #8
    8dae:	3908      	subs	r1, #8
    8db0:	091b      	lsrs	r3, r3, #4
    8db2:	4298      	cmp	r0, r3
    8db4:	d301      	bcc.n	8dba <__ctzsi2+0x26>
    8db6:	0900      	lsrs	r0, r0, #4
    8db8:	3904      	subs	r1, #4
    8dba:	a202      	add	r2, pc, #8	; (adr r2, 8dc4 <__ctzsi2+0x30>)
    8dbc:	5c10      	ldrb	r0, [r2, r0]
    8dbe:	1a40      	subs	r0, r0, r1
    8dc0:	4770      	bx	lr
    8dc2:	46c0      	nop			; (mov r8, r8)
    8dc4:	1d1d1c1b 	.word	0x1d1d1c1b
    8dc8:	1e1e1e1e 	.word	0x1e1e1e1e
    8dcc:	1f1f1f1f 	.word	0x1f1f1f1f
    8dd0:	1f1f1f1f 	.word	0x1f1f1f1f

00008dd4 <__libc_init_array>:
    8dd4:	4b0e      	ldr	r3, [pc, #56]	; (8e10 <__libc_init_array+0x3c>)
    8dd6:	b570      	push	{r4, r5, r6, lr}
    8dd8:	2500      	movs	r5, #0
    8dda:	1c1e      	adds	r6, r3, #0
    8ddc:	4c0d      	ldr	r4, [pc, #52]	; (8e14 <__libc_init_array+0x40>)
    8dde:	1ae4      	subs	r4, r4, r3
    8de0:	10a4      	asrs	r4, r4, #2
    8de2:	42a5      	cmp	r5, r4
    8de4:	d004      	beq.n	8df0 <__libc_init_array+0x1c>
    8de6:	00ab      	lsls	r3, r5, #2
    8de8:	58f3      	ldr	r3, [r6, r3]
    8dea:	4798      	blx	r3
    8dec:	3501      	adds	r5, #1
    8dee:	e7f8      	b.n	8de2 <__libc_init_array+0xe>
    8df0:	f000 f8a8 	bl	8f44 <_init>
    8df4:	4b08      	ldr	r3, [pc, #32]	; (8e18 <__libc_init_array+0x44>)
    8df6:	2500      	movs	r5, #0
    8df8:	1c1e      	adds	r6, r3, #0
    8dfa:	4c08      	ldr	r4, [pc, #32]	; (8e1c <__libc_init_array+0x48>)
    8dfc:	1ae4      	subs	r4, r4, r3
    8dfe:	10a4      	asrs	r4, r4, #2
    8e00:	42a5      	cmp	r5, r4
    8e02:	d004      	beq.n	8e0e <__libc_init_array+0x3a>
    8e04:	00ab      	lsls	r3, r5, #2
    8e06:	58f3      	ldr	r3, [r6, r3]
    8e08:	4798      	blx	r3
    8e0a:	3501      	adds	r5, #1
    8e0c:	e7f8      	b.n	8e00 <__libc_init_array+0x2c>
    8e0e:	bd70      	pop	{r4, r5, r6, pc}
    8e10:	00008f50 	.word	0x00008f50
    8e14:	00008f50 	.word	0x00008f50
    8e18:	00008f50 	.word	0x00008f50
    8e1c:	00008f54 	.word	0x00008f54

00008e20 <memcpy>:
    8e20:	2300      	movs	r3, #0
    8e22:	b510      	push	{r4, lr}
    8e24:	4293      	cmp	r3, r2
    8e26:	d003      	beq.n	8e30 <memcpy+0x10>
    8e28:	5ccc      	ldrb	r4, [r1, r3]
    8e2a:	54c4      	strb	r4, [r0, r3]
    8e2c:	3301      	adds	r3, #1
    8e2e:	e7f9      	b.n	8e24 <memcpy+0x4>
    8e30:	bd10      	pop	{r4, pc}

00008e32 <memset>:
    8e32:	1c03      	adds	r3, r0, #0
    8e34:	1882      	adds	r2, r0, r2
    8e36:	4293      	cmp	r3, r2
    8e38:	d002      	beq.n	8e40 <memset+0xe>
    8e3a:	7019      	strb	r1, [r3, #0]
    8e3c:	3301      	adds	r3, #1
    8e3e:	e7fa      	b.n	8e36 <memset+0x4>
    8e40:	4770      	bx	lr
    8e42:	0000      	movs	r0, r0
    8e44:	42000800 	.word	0x42000800
    8e48:	42000c00 	.word	0x42000c00
    8e4c:	42001000 	.word	0x42001000
    8e50:	42001400 	.word	0x42001400
    8e54:	42001800 	.word	0x42001800
    8e58:	42001c00 	.word	0x42001c00
    8e5c:	00001f7e 	.word	0x00001f7e
    8e60:	00001f56 	.word	0x00001f56
    8e64:	00001f2e 	.word	0x00001f2e
    8e68:	00001ef4 	.word	0x00001ef4
    8e6c:	00001eba 	.word	0x00001eba
    8e70:	53504f54 	.word	0x53504f54
    8e74:	45524345 	.word	0x45524345
    8e78:	53415054 	.word	0x53415054
    8e7c:	44525753 	.word	0x44525753
    8e80:	00000000 	.word	0x00000000
    8e84:	00003936 	.word	0x00003936
    8e88:	0000391e 	.word	0x0000391e
    8e8c:	00003936 	.word	0x00003936
    8e90:	00003926 	.word	0x00003926
    8e94:	00003936 	.word	0x00003936
    8e98:	00003916 	.word	0x00003916
    8e9c:	00003936 	.word	0x00003936
    8ea0:	00003936 	.word	0x00003936
    8ea4:	00003936 	.word	0x00003936
    8ea8:	0000392e 	.word	0x0000392e
    8eac:	000045a6 	.word	0x000045a6
    8eb0:	00004630 	.word	0x00004630
    8eb4:	00004630 	.word	0x00004630
    8eb8:	000045c8 	.word	0x000045c8
    8ebc:	000045c2 	.word	0x000045c2
    8ec0:	000045ce 	.word	0x000045ce
    8ec4:	000045ac 	.word	0x000045ac
    8ec8:	000045d4 	.word	0x000045d4
    8ecc:	00004616 	.word	0x00004616
    8ed0:	000047d8 	.word	0x000047d8
    8ed4:	00004828 	.word	0x00004828
    8ed8:	00004828 	.word	0x00004828
    8edc:	00004824 	.word	0x00004824
    8ee0:	000047ca 	.word	0x000047ca
    8ee4:	000047ea 	.word	0x000047ea
    8ee8:	000047ba 	.word	0x000047ba
    8eec:	000047fc 	.word	0x000047fc
    8ef0:	0000480e 	.word	0x0000480e
    8ef4:	00004876 	.word	0x00004876
    8ef8:	000048a4 	.word	0x000048a4
    8efc:	000048a4 	.word	0x000048a4
    8f00:	000048a0 	.word	0x000048a0
    8f04:	00004870 	.word	0x00004870
    8f08:	0000487c 	.word	0x0000487c
    8f0c:	0000486a 	.word	0x0000486a
    8f10:	00004882 	.word	0x00004882
    8f14:	00004888 	.word	0x00004888
    8f18:	01020300 	.word	0x01020300

00008f1c <_usb_device_irq_bits>:
    8f1c:	00080004 00800070 01000001 00000200     ....p...........

00008f2c <_usb_endpoint_irq_bits>:
    8f2c:	60100c03 00007504 0000751a 0000767a     ...`.u...u..zv..
    8f3c:	00007746 00007812                       Fw...x..

00008f44 <_init>:
    8f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f46:	46c0      	nop			; (mov r8, r8)
    8f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8f4a:	bc08      	pop	{r3}
    8f4c:	469e      	mov	lr, r3
    8f4e:	4770      	bx	lr

00008f50 <__init_array_start>:
    8f50:	000000dd 	.word	0x000000dd

00008f54 <_fini>:
    8f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f56:	46c0      	nop			; (mov r8, r8)
    8f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8f5a:	bc08      	pop	{r3}
    8f5c:	469e      	mov	lr, r3
    8f5e:	4770      	bx	lr

00008f60 <__fini_array_start>:
    8f60:	000000b5 	.word	0x000000b5
