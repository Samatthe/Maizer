
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046bc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  000046bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000047c  200000dc  00004798  000200dc  2**2
                  ALLOC
  3 .stack        00002000  20000558  00004c14  000200dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c0e6  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040b6  00000000  00000000  0004c243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009e35  00000000  00000000  000502f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009b0  00000000  00000000  0005a12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c80  00000000  00000000  0005aade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee11  00000000  00000000  0005b75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011682  00000000  00000000  0007a56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094e0c  00000000  00000000  0008bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000198c  00000000  00000000  00120a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002558 	.word	0x20002558
       4:	00004059 	.word	0x00004059
       8:	00004055 	.word	0x00004055
       c:	00004055 	.word	0x00004055
	...
      2c:	00004055 	.word	0x00004055
	...
      38:	00004055 	.word	0x00004055
      3c:	00004055 	.word	0x00004055
      40:	00004055 	.word	0x00004055
      44:	00004055 	.word	0x00004055
      48:	00004055 	.word	0x00004055
      4c:	00004055 	.word	0x00004055
      50:	00001de1 	.word	0x00001de1
      54:	00004055 	.word	0x00004055
      58:	00004055 	.word	0x00004055
      5c:	000038bd 	.word	0x000038bd
      60:	00004055 	.word	0x00004055
      64:	00004055 	.word	0x00004055
      68:	00004055 	.word	0x00004055
      6c:	00004055 	.word	0x00004055
      70:	00004055 	.word	0x00004055
      74:	00004055 	.word	0x00004055
      78:	00004055 	.word	0x00004055
      7c:	00004055 	.word	0x00004055
      80:	00004055 	.word	0x00004055
      84:	00004055 	.word	0x00004055
      88:	00004055 	.word	0x00004055
      8c:	00004055 	.word	0x00004055
      90:	00004055 	.word	0x00004055
	...
      9c:	00004055 	.word	0x00004055
      a0:	00004055 	.word	0x00004055
      a4:	00004055 	.word	0x00004055
      a8:	00004055 	.word	0x00004055
      ac:	00004055 	.word	0x00004055
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	000046bc 	.word	0x000046bc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e0 	.word	0x200000e0
     108:	000046bc 	.word	0x000046bc
     10c:	000046bc 	.word	0x000046bc
     110:	00000000 	.word	0x00000000

00000114 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     114:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     116:	7a98      	ldrb	r0, [r3, #10]
     118:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     11a:	4770      	bx	lr

0000011c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     11c:	b570      	push	{r4, r5, r6, lr}
     11e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     120:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     122:	4d05      	ldr	r5, [pc, #20]	; (138 <rtc_count_enable+0x1c>)
     124:	0020      	movs	r0, r4
     126:	47a8      	blx	r5
     128:	2800      	cmp	r0, #0
     12a:	d1fb      	bne.n	124 <rtc_count_enable+0x8>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     12c:	8832      	ldrh	r2, [r6, #0]
     12e:	2302      	movs	r3, #2
     130:	4313      	orrs	r3, r2
     132:	8033      	strh	r3, [r6, #0]
}
     134:	bd70      	pop	{r4, r5, r6, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00000115 	.word	0x00000115

0000013c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     13c:	b570      	push	{r4, r5, r6, lr}
     13e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     140:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     142:	4d05      	ldr	r5, [pc, #20]	; (158 <rtc_count_disable+0x1c>)
     144:	0020      	movs	r0, r4
     146:	47a8      	blx	r5
     148:	2800      	cmp	r0, #0
     14a:	d1fb      	bne.n	144 <rtc_count_disable+0x8>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     14c:	8833      	ldrh	r3, [r6, #0]
     14e:	2202      	movs	r2, #2
     150:	4393      	bics	r3, r2
     152:	8033      	strh	r3, [r6, #0]
}
     154:	bd70      	pop	{r4, r5, r6, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000115 	.word	0x00000115

0000015c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     15c:	b570      	push	{r4, r5, r6, lr}
     15e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     160:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <rtc_count_reset+0x20>)
     164:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     166:	4d06      	ldr	r5, [pc, #24]	; (180 <rtc_count_reset+0x24>)
     168:	0020      	movs	r0, r4
     16a:	47a8      	blx	r5
     16c:	2800      	cmp	r0, #0
     16e:	d1fb      	bne.n	168 <rtc_count_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     170:	8832      	ldrh	r2, [r6, #0]
     172:	2301      	movs	r3, #1
     174:	4313      	orrs	r3, r2
     176:	8033      	strh	r3, [r6, #0]
}
     178:	bd70      	pop	{r4, r5, r6, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	0000013d 	.word	0x0000013d
     180:	00000115 	.word	0x00000115

00000184 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     186:	0004      	movs	r4, r0
     188:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     18a:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     18c:	4d0a      	ldr	r5, [pc, #40]	; (1b8 <rtc_count_set_count+0x34>)
     18e:	0020      	movs	r0, r4
     190:	47a8      	blx	r5
     192:	2800      	cmp	r0, #0
     194:	d1fb      	bne.n	18e <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     196:	7923      	ldrb	r3, [r4, #4]
     198:	2b00      	cmp	r3, #0
     19a:	d003      	beq.n	1a4 <rtc_count_set_count+0x20>
     19c:	2b01      	cmp	r3, #1
     19e:	d109      	bne.n	1b4 <rtc_count_set_count+0x30>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     1a0:	613e      	str	r6, [r7, #16]

			break;
     1a2:	e008      	b.n	1b6 <rtc_count_set_count+0x32>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
				return STATUS_ERR_INVALID_ARG;
     1a4:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     1a6:	4b05      	ldr	r3, [pc, #20]	; (1bc <rtc_count_set_count+0x38>)
     1a8:	429e      	cmp	r6, r3
     1aa:	d804      	bhi.n	1b6 <rtc_count_set_count+0x32>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     1ac:	b2b6      	uxth	r6, r6
     1ae:	823e      	strh	r6, [r7, #16]

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}
	return STATUS_OK;
     1b0:	2000      	movs	r0, #0
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;

			break;
     1b2:	e000      	b.n	1b6 <rtc_count_set_count+0x32>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     1b4:	2017      	movs	r0, #23
	}
	return STATUS_OK;
}
     1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1b8:	00000115 	.word	0x00000115
     1bc:	0000ffff 	.word	0x0000ffff

000001c0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1c4:	6806      	ldr	r6, [r0, #0]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     1c6:	7943      	ldrb	r3, [r0, #5]
     1c8:	2b00      	cmp	r3, #0
     1ca:	d106      	bne.n	1da <rtc_count_get_count+0x1a>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     1cc:	4b09      	ldr	r3, [pc, #36]	; (1f4 <rtc_count_get_count+0x34>)
     1ce:	8073      	strh	r3, [r6, #2]

		while (rtc_count_is_syncing(module)) {
     1d0:	4d09      	ldr	r5, [pc, #36]	; (1f8 <rtc_count_get_count+0x38>)
     1d2:	0020      	movs	r0, r4
     1d4:	47a8      	blx	r5
     1d6:	2800      	cmp	r0, #0
     1d8:	d1fb      	bne.n	1d2 <rtc_count_get_count+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     1da:	7923      	ldrb	r3, [r4, #4]
     1dc:	2b00      	cmp	r3, #0
     1de:	d004      	beq.n	1ea <rtc_count_get_count+0x2a>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     1e0:	2000      	movs	r0, #0
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     1e2:	2b01      	cmp	r3, #1
     1e4:	d104      	bne.n	1f0 <rtc_count_get_count+0x30>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     1e6:	6930      	ldr	r0, [r6, #16]

			break;
     1e8:	e002      	b.n	1f0 <rtc_count_get_count+0x30>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     1ea:	8a30      	ldrh	r0, [r6, #16]
     1ec:	b280      	uxth	r0, r0

			break;
     1ee:	e7ff      	b.n	1f0 <rtc_count_get_count+0x30>
			ret_val = 0;
			break;
	}

	return ret_val;
}
     1f0:	bd70      	pop	{r4, r5, r6, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	ffff8000 	.word	0xffff8000
     1f8:	00000115 	.word	0x00000115

000001fc <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fe:	b083      	sub	sp, #12
     200:	0004      	movs	r4, r0
     202:	9101      	str	r1, [sp, #4]
     204:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     206:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     208:	4f11      	ldr	r7, [pc, #68]	; (250 <rtc_count_set_compare+0x54>)
     20a:	0020      	movs	r0, r4
     20c:	47b8      	blx	r7
     20e:	2800      	cmp	r0, #0
     210:	d1fb      	bne.n	20a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     212:	7923      	ldrb	r3, [r4, #4]
     214:	2b00      	cmp	r3, #0
     216:	d00a      	beq.n	22e <rtc_count_set_compare+0x32>
     218:	2b01      	cmp	r3, #1
     21a:	d116      	bne.n	24a <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     21c:	3017      	adds	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     21e:	2d01      	cmp	r5, #1
     220:	d814      	bhi.n	24c <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     222:	3506      	adds	r5, #6
     224:	00ad      	lsls	r5, r5, #2
     226:	9b01      	ldr	r3, [sp, #4]
     228:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     22a:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     22c:	e00e      	b.n	24c <rtc_count_set_compare+0x50>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     22e:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     230:	2d02      	cmp	r5, #2
     232:	d80b      	bhi.n	24c <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     234:	4b07      	ldr	r3, [pc, #28]	; (254 <rtc_count_set_compare+0x58>)
     236:	9a01      	ldr	r2, [sp, #4]
     238:	429a      	cmp	r2, r3
     23a:	d807      	bhi.n	24c <rtc_count_set_compare+0x50>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     23c:	466b      	mov	r3, sp
     23e:	889b      	ldrh	r3, [r3, #4]
     240:	350c      	adds	r5, #12
     242:	006d      	lsls	r5, r5, #1
     244:	53ab      	strh	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     246:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     248:	e000      	b.n	24c <rtc_count_set_compare+0x50>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     24a:	201a      	movs	r0, #26
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     24c:	b003      	add	sp, #12
     24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     250:	00000115 	.word	0x00000115
     254:	0000ffff 	.word	0x0000ffff

00000258 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	b083      	sub	sp, #12
     25c:	0004      	movs	r4, r0
     25e:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     260:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     262:	4a2e      	ldr	r2, [pc, #184]	; (31c <rtc_count_init+0xc4>)
     264:	6991      	ldr	r1, [r2, #24]
     266:	2320      	movs	r3, #32
     268:	430b      	orrs	r3, r1
     26a:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     26c:	a901      	add	r1, sp, #4
     26e:	2302      	movs	r3, #2
     270:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     272:	2004      	movs	r0, #4
     274:	4b2a      	ldr	r3, [pc, #168]	; (320 <rtc_count_init+0xc8>)
     276:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     278:	2004      	movs	r0, #4
     27a:	4b2a      	ldr	r3, [pc, #168]	; (324 <rtc_count_init+0xcc>)
     27c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     27e:	0020      	movs	r0, r4
     280:	4b29      	ldr	r3, [pc, #164]	; (328 <rtc_count_init+0xd0>)
     282:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     284:	78b3      	ldrb	r3, [r6, #2]
     286:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     288:	7933      	ldrb	r3, [r6, #4]
     28a:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     28c:	4b27      	ldr	r3, [pc, #156]	; (32c <rtc_count_init+0xd4>)
     28e:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     290:	6827      	ldr	r7, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     292:	8833      	ldrh	r3, [r6, #0]
     294:	803b      	strh	r3, [r7, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     296:	78b3      	ldrb	r3, [r6, #2]
     298:	2b00      	cmp	r3, #0
     29a:	d017      	beq.n	2cc <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     29c:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     29e:	2b01      	cmp	r3, #1
     2a0:	d13a      	bne.n	318 <rtc_count_init+0xc0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     2a2:	883b      	ldrh	r3, [r7, #0]
     2a4:	b29b      	uxth	r3, r3
     2a6:	803b      	strh	r3, [r7, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     2a8:	78f3      	ldrb	r3, [r6, #3]
     2aa:	2b00      	cmp	r3, #0
     2ac:	d003      	beq.n	2b6 <rtc_count_init+0x5e>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     2ae:	883a      	ldrh	r2, [r7, #0]
     2b0:	2380      	movs	r3, #128	; 0x80
     2b2:	4313      	orrs	r3, r2
     2b4:	803b      	strh	r3, [r7, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     2b6:	4d1e      	ldr	r5, [pc, #120]	; (330 <rtc_count_init+0xd8>)
     2b8:	0020      	movs	r0, r4
     2ba:	47a8      	blx	r5
     2bc:	2800      	cmp	r0, #0
     2be:	d1fb      	bne.n	2b8 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c0:	2200      	movs	r2, #0
     2c2:	68b1      	ldr	r1, [r6, #8]
     2c4:	0020      	movs	r0, r4
     2c6:	4b1b      	ldr	r3, [pc, #108]	; (334 <rtc_count_init+0xdc>)
     2c8:	4798      	blx	r3
     2ca:	e01b      	b.n	304 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2cc:	883a      	ldrh	r2, [r7, #0]
     2ce:	2304      	movs	r3, #4
     2d0:	4313      	orrs	r3, r2
     2d2:	803b      	strh	r3, [r7, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     2d4:	78f3      	ldrb	r3, [r6, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     2d6:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     2d8:	2b00      	cmp	r3, #0
     2da:	d11d      	bne.n	318 <rtc_count_init+0xc0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     2dc:	4d14      	ldr	r5, [pc, #80]	; (330 <rtc_count_init+0xd8>)
     2de:	0020      	movs	r0, r4
     2e0:	47a8      	blx	r5
     2e2:	2800      	cmp	r0, #0
     2e4:	d1fb      	bne.n	2de <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2e6:	2200      	movs	r2, #0
     2e8:	68b1      	ldr	r1, [r6, #8]
     2ea:	0020      	movs	r0, r4
     2ec:	4b11      	ldr	r3, [pc, #68]	; (334 <rtc_count_init+0xdc>)
     2ee:	4798      	blx	r3
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     2f0:	4d0f      	ldr	r5, [pc, #60]	; (330 <rtc_count_init+0xd8>)
     2f2:	0020      	movs	r0, r4
     2f4:	47a8      	blx	r5
     2f6:	2800      	cmp	r0, #0
     2f8:	d1fb      	bne.n	2f2 <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2fa:	2201      	movs	r2, #1
     2fc:	68f1      	ldr	r1, [r6, #12]
     2fe:	0020      	movs	r0, r4
     300:	4b0c      	ldr	r3, [pc, #48]	; (334 <rtc_count_init+0xdc>)
     302:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     304:	7933      	ldrb	r3, [r6, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     306:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     308:	2b00      	cmp	r3, #0
     30a:	d005      	beq.n	318 <rtc_count_init+0xc0>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     30c:	887a      	ldrh	r2, [r7, #2]
     30e:	2380      	movs	r3, #128	; 0x80
     310:	01db      	lsls	r3, r3, #7
     312:	4313      	orrs	r3, r2
     314:	807b      	strh	r3, [r7, #2]
     316:	e7ff      	b.n	318 <rtc_count_init+0xc0>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     318:	b003      	add	sp, #12
     31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31c:	40000400 	.word	0x40000400
     320:	000024a5 	.word	0x000024a5
     324:	00002419 	.word	0x00002419
     328:	0000015d 	.word	0x0000015d
     32c:	20000190 	.word	0x20000190
     330:	00000115 	.word	0x00000115
     334:	000001fd 	.word	0x000001fd

00000338 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     33a:	0004      	movs	r4, r0
     33c:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     33e:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     340:	2015      	movs	r0, #21
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     342:	2b00      	cmp	r3, #0
     344:	d106      	bne.n	354 <rtc_count_set_period+0x1c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     346:	6827      	ldr	r7, [r4, #0]
	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	while (rtc_count_is_syncing(module)) {
     348:	4d03      	ldr	r5, [pc, #12]	; (358 <rtc_count_set_period+0x20>)
     34a:	0020      	movs	r0, r4
     34c:	47a8      	blx	r5
     34e:	2800      	cmp	r0, #0
     350:	d1fb      	bne.n	34a <rtc_count_set_period+0x12>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     352:	82be      	strh	r6, [r7, #20]

	return STATUS_OK;
}
     354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00000115 	.word	0x00000115

0000035c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     35c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     35e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     360:	2340      	movs	r3, #64	; 0x40
     362:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     364:	4281      	cmp	r1, r0
     366:	d201      	bcs.n	36c <_sercom_get_sync_baud_val+0x10>
     368:	e00a      	b.n	380 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     36a:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     36c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     36e:	1c63      	adds	r3, r4, #1
     370:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     372:	4288      	cmp	r0, r1
     374:	d9f9      	bls.n	36a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     376:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     378:	2cff      	cmp	r4, #255	; 0xff
     37a:	d801      	bhi.n	380 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     37c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     37e:	2300      	movs	r3, #0
	}
}
     380:	0018      	movs	r0, r3
     382:	bd10      	pop	{r4, pc}

00000384 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     384:	b510      	push	{r4, lr}
     386:	b082      	sub	sp, #8
     388:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     38a:	4b0e      	ldr	r3, [pc, #56]	; (3c4 <sercom_set_gclk_generator+0x40>)
     38c:	781b      	ldrb	r3, [r3, #0]
     38e:	2b00      	cmp	r3, #0
     390:	d001      	beq.n	396 <sercom_set_gclk_generator+0x12>
     392:	2900      	cmp	r1, #0
     394:	d00d      	beq.n	3b2 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     396:	a901      	add	r1, sp, #4
     398:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     39a:	2013      	movs	r0, #19
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <sercom_set_gclk_generator+0x44>)
     39e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3a0:	2013      	movs	r0, #19
     3a2:	4b0a      	ldr	r3, [pc, #40]	; (3cc <sercom_set_gclk_generator+0x48>)
     3a4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     3a6:	4b07      	ldr	r3, [pc, #28]	; (3c4 <sercom_set_gclk_generator+0x40>)
     3a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3aa:	2201      	movs	r2, #1
     3ac:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     3ae:	2000      	movs	r0, #0
     3b0:	e006      	b.n	3c0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     3b2:	4b04      	ldr	r3, [pc, #16]	; (3c4 <sercom_set_gclk_generator+0x40>)
     3b4:	785b      	ldrb	r3, [r3, #1]
     3b6:	4283      	cmp	r3, r0
     3b8:	d001      	beq.n	3be <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3ba:	201d      	movs	r0, #29
     3bc:	e000      	b.n	3c0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     3be:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3c0:	b002      	add	sp, #8
     3c2:	bd10      	pop	{r4, pc}
     3c4:	200000f8 	.word	0x200000f8
     3c8:	000024a5 	.word	0x000024a5
     3cc:	00002419 	.word	0x00002419

000003d0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3d0:	4b44      	ldr	r3, [pc, #272]	; (4e4 <_sercom_get_default_pad+0x114>)
     3d2:	4298      	cmp	r0, r3
     3d4:	d033      	beq.n	43e <_sercom_get_default_pad+0x6e>
     3d6:	d806      	bhi.n	3e6 <_sercom_get_default_pad+0x16>
     3d8:	4b43      	ldr	r3, [pc, #268]	; (4e8 <_sercom_get_default_pad+0x118>)
     3da:	4298      	cmp	r0, r3
     3dc:	d00d      	beq.n	3fa <_sercom_get_default_pad+0x2a>
     3de:	4b43      	ldr	r3, [pc, #268]	; (4ec <_sercom_get_default_pad+0x11c>)
     3e0:	4298      	cmp	r0, r3
     3e2:	d01b      	beq.n	41c <_sercom_get_default_pad+0x4c>
     3e4:	e06f      	b.n	4c6 <_sercom_get_default_pad+0xf6>
     3e6:	4b42      	ldr	r3, [pc, #264]	; (4f0 <_sercom_get_default_pad+0x120>)
     3e8:	4298      	cmp	r0, r3
     3ea:	d04a      	beq.n	482 <_sercom_get_default_pad+0xb2>
     3ec:	4b41      	ldr	r3, [pc, #260]	; (4f4 <_sercom_get_default_pad+0x124>)
     3ee:	4298      	cmp	r0, r3
     3f0:	d058      	beq.n	4a4 <_sercom_get_default_pad+0xd4>
     3f2:	4b41      	ldr	r3, [pc, #260]	; (4f8 <_sercom_get_default_pad+0x128>)
     3f4:	4298      	cmp	r0, r3
     3f6:	d166      	bne.n	4c6 <_sercom_get_default_pad+0xf6>
     3f8:	e032      	b.n	460 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	2901      	cmp	r1, #1
     3fc:	d006      	beq.n	40c <_sercom_get_default_pad+0x3c>
     3fe:	2900      	cmp	r1, #0
     400:	d063      	beq.n	4ca <_sercom_get_default_pad+0xfa>
     402:	2902      	cmp	r1, #2
     404:	d006      	beq.n	414 <_sercom_get_default_pad+0x44>
     406:	2903      	cmp	r1, #3
     408:	d006      	beq.n	418 <_sercom_get_default_pad+0x48>
     40a:	e001      	b.n	410 <_sercom_get_default_pad+0x40>
     40c:	483b      	ldr	r0, [pc, #236]	; (4fc <_sercom_get_default_pad+0x12c>)
     40e:	e067      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     410:	2000      	movs	r0, #0
     412:	e065      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     414:	483a      	ldr	r0, [pc, #232]	; (500 <_sercom_get_default_pad+0x130>)
     416:	e063      	b.n	4e0 <_sercom_get_default_pad+0x110>
     418:	483a      	ldr	r0, [pc, #232]	; (504 <_sercom_get_default_pad+0x134>)
     41a:	e061      	b.n	4e0 <_sercom_get_default_pad+0x110>
     41c:	2901      	cmp	r1, #1
     41e:	d006      	beq.n	42e <_sercom_get_default_pad+0x5e>
     420:	2900      	cmp	r1, #0
     422:	d054      	beq.n	4ce <_sercom_get_default_pad+0xfe>
     424:	2902      	cmp	r1, #2
     426:	d006      	beq.n	436 <_sercom_get_default_pad+0x66>
     428:	2903      	cmp	r1, #3
     42a:	d006      	beq.n	43a <_sercom_get_default_pad+0x6a>
     42c:	e001      	b.n	432 <_sercom_get_default_pad+0x62>
     42e:	4836      	ldr	r0, [pc, #216]	; (508 <_sercom_get_default_pad+0x138>)
     430:	e056      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     432:	2000      	movs	r0, #0
     434:	e054      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     436:	4835      	ldr	r0, [pc, #212]	; (50c <_sercom_get_default_pad+0x13c>)
     438:	e052      	b.n	4e0 <_sercom_get_default_pad+0x110>
     43a:	4835      	ldr	r0, [pc, #212]	; (510 <_sercom_get_default_pad+0x140>)
     43c:	e050      	b.n	4e0 <_sercom_get_default_pad+0x110>
     43e:	2901      	cmp	r1, #1
     440:	d006      	beq.n	450 <_sercom_get_default_pad+0x80>
     442:	2900      	cmp	r1, #0
     444:	d045      	beq.n	4d2 <_sercom_get_default_pad+0x102>
     446:	2902      	cmp	r1, #2
     448:	d006      	beq.n	458 <_sercom_get_default_pad+0x88>
     44a:	2903      	cmp	r1, #3
     44c:	d006      	beq.n	45c <_sercom_get_default_pad+0x8c>
     44e:	e001      	b.n	454 <_sercom_get_default_pad+0x84>
     450:	4830      	ldr	r0, [pc, #192]	; (514 <_sercom_get_default_pad+0x144>)
     452:	e045      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     454:	2000      	movs	r0, #0
     456:	e043      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     458:	482f      	ldr	r0, [pc, #188]	; (518 <_sercom_get_default_pad+0x148>)
     45a:	e041      	b.n	4e0 <_sercom_get_default_pad+0x110>
     45c:	482f      	ldr	r0, [pc, #188]	; (51c <_sercom_get_default_pad+0x14c>)
     45e:	e03f      	b.n	4e0 <_sercom_get_default_pad+0x110>
     460:	2901      	cmp	r1, #1
     462:	d006      	beq.n	472 <_sercom_get_default_pad+0xa2>
     464:	2900      	cmp	r1, #0
     466:	d036      	beq.n	4d6 <_sercom_get_default_pad+0x106>
     468:	2902      	cmp	r1, #2
     46a:	d006      	beq.n	47a <_sercom_get_default_pad+0xaa>
     46c:	2903      	cmp	r1, #3
     46e:	d006      	beq.n	47e <_sercom_get_default_pad+0xae>
     470:	e001      	b.n	476 <_sercom_get_default_pad+0xa6>
     472:	482b      	ldr	r0, [pc, #172]	; (520 <_sercom_get_default_pad+0x150>)
     474:	e034      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     476:	2000      	movs	r0, #0
     478:	e032      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     47a:	482a      	ldr	r0, [pc, #168]	; (524 <_sercom_get_default_pad+0x154>)
     47c:	e030      	b.n	4e0 <_sercom_get_default_pad+0x110>
     47e:	482a      	ldr	r0, [pc, #168]	; (528 <_sercom_get_default_pad+0x158>)
     480:	e02e      	b.n	4e0 <_sercom_get_default_pad+0x110>
     482:	2901      	cmp	r1, #1
     484:	d006      	beq.n	494 <_sercom_get_default_pad+0xc4>
     486:	2900      	cmp	r1, #0
     488:	d027      	beq.n	4da <_sercom_get_default_pad+0x10a>
     48a:	2902      	cmp	r1, #2
     48c:	d006      	beq.n	49c <_sercom_get_default_pad+0xcc>
     48e:	2903      	cmp	r1, #3
     490:	d006      	beq.n	4a0 <_sercom_get_default_pad+0xd0>
     492:	e001      	b.n	498 <_sercom_get_default_pad+0xc8>
     494:	4825      	ldr	r0, [pc, #148]	; (52c <_sercom_get_default_pad+0x15c>)
     496:	e023      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     498:	2000      	movs	r0, #0
     49a:	e021      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     49c:	4824      	ldr	r0, [pc, #144]	; (530 <_sercom_get_default_pad+0x160>)
     49e:	e01f      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4a0:	4824      	ldr	r0, [pc, #144]	; (534 <_sercom_get_default_pad+0x164>)
     4a2:	e01d      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4a4:	2901      	cmp	r1, #1
     4a6:	d006      	beq.n	4b6 <_sercom_get_default_pad+0xe6>
     4a8:	2900      	cmp	r1, #0
     4aa:	d018      	beq.n	4de <_sercom_get_default_pad+0x10e>
     4ac:	2902      	cmp	r1, #2
     4ae:	d006      	beq.n	4be <_sercom_get_default_pad+0xee>
     4b0:	2903      	cmp	r1, #3
     4b2:	d006      	beq.n	4c2 <_sercom_get_default_pad+0xf2>
     4b4:	e001      	b.n	4ba <_sercom_get_default_pad+0xea>
     4b6:	4820      	ldr	r0, [pc, #128]	; (538 <_sercom_get_default_pad+0x168>)
     4b8:	e012      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4ba:	2000      	movs	r0, #0
     4bc:	e010      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4be:	481f      	ldr	r0, [pc, #124]	; (53c <_sercom_get_default_pad+0x16c>)
     4c0:	e00e      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4c2:	481f      	ldr	r0, [pc, #124]	; (540 <_sercom_get_default_pad+0x170>)
     4c4:	e00c      	b.n	4e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4c6:	2000      	movs	r0, #0
     4c8:	e00a      	b.n	4e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ca:	481e      	ldr	r0, [pc, #120]	; (544 <_sercom_get_default_pad+0x174>)
     4cc:	e008      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4ce:	2003      	movs	r0, #3
     4d0:	e006      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4d2:	481d      	ldr	r0, [pc, #116]	; (548 <_sercom_get_default_pad+0x178>)
     4d4:	e004      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4d6:	481d      	ldr	r0, [pc, #116]	; (54c <_sercom_get_default_pad+0x17c>)
     4d8:	e002      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4da:	481d      	ldr	r0, [pc, #116]	; (550 <_sercom_get_default_pad+0x180>)
     4dc:	e000      	b.n	4e0 <_sercom_get_default_pad+0x110>
     4de:	481d      	ldr	r0, [pc, #116]	; (554 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	42001000 	.word	0x42001000
     4e8:	42000800 	.word	0x42000800
     4ec:	42000c00 	.word	0x42000c00
     4f0:	42001800 	.word	0x42001800
     4f4:	42001c00 	.word	0x42001c00
     4f8:	42001400 	.word	0x42001400
     4fc:	00050003 	.word	0x00050003
     500:	00060003 	.word	0x00060003
     504:	00070003 	.word	0x00070003
     508:	00010003 	.word	0x00010003
     50c:	001e0003 	.word	0x001e0003
     510:	001f0003 	.word	0x001f0003
     514:	00090003 	.word	0x00090003
     518:	000a0003 	.word	0x000a0003
     51c:	000b0003 	.word	0x000b0003
     520:	00110003 	.word	0x00110003
     524:	00120003 	.word	0x00120003
     528:	00130003 	.word	0x00130003
     52c:	000d0003 	.word	0x000d0003
     530:	000e0003 	.word	0x000e0003
     534:	000f0003 	.word	0x000f0003
     538:	00170003 	.word	0x00170003
     53c:	00180003 	.word	0x00180003
     540:	00190003 	.word	0x00190003
     544:	00040003 	.word	0x00040003
     548:	00080003 	.word	0x00080003
     54c:	00100003 	.word	0x00100003
     550:	000c0003 	.word	0x000c0003
     554:	00160003 	.word	0x00160003

00000558 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     558:	b530      	push	{r4, r5, lr}
     55a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     55c:	4b0c      	ldr	r3, [pc, #48]	; (590 <_sercom_get_sercom_inst_index+0x38>)
     55e:	466a      	mov	r2, sp
     560:	cb32      	ldmia	r3!, {r1, r4, r5}
     562:	c232      	stmia	r2!, {r1, r4, r5}
     564:	cb32      	ldmia	r3!, {r1, r4, r5}
     566:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     568:	9b00      	ldr	r3, [sp, #0]
     56a:	4283      	cmp	r3, r0
     56c:	d006      	beq.n	57c <_sercom_get_sercom_inst_index+0x24>
     56e:	2301      	movs	r3, #1
     570:	009a      	lsls	r2, r3, #2
     572:	4669      	mov	r1, sp
     574:	5852      	ldr	r2, [r2, r1]
     576:	4282      	cmp	r2, r0
     578:	d103      	bne.n	582 <_sercom_get_sercom_inst_index+0x2a>
     57a:	e000      	b.n	57e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     57c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     57e:	b2d8      	uxtb	r0, r3
     580:	e003      	b.n	58a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     582:	3301      	adds	r3, #1
     584:	2b06      	cmp	r3, #6
     586:	d1f3      	bne.n	570 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     588:	2000      	movs	r0, #0
}
     58a:	b007      	add	sp, #28
     58c:	bd30      	pop	{r4, r5, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	000045e8 	.word	0x000045e8

00000594 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	4657      	mov	r7, sl
     598:	464e      	mov	r6, r9
     59a:	4645      	mov	r5, r8
     59c:	b4e0      	push	{r5, r6, r7}
     59e:	b088      	sub	sp, #32
     5a0:	4680      	mov	r8, r0
     5a2:	000e      	movs	r6, r1
     5a4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5a6:	0003      	movs	r3, r0
     5a8:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     5aa:	680b      	ldr	r3, [r1, #0]
     5ac:	079b      	lsls	r3, r3, #30
     5ae:	d400      	bmi.n	5b2 <spi_init+0x1e>
     5b0:	e0a6      	b.n	700 <spi_init+0x16c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     5b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
     5b4:	9303      	str	r3, [sp, #12]
     5b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     5b8:	9304      	str	r3, [sp, #16]
     5ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
     5bc:	9305      	str	r3, [sp, #20]
     5be:	6b53      	ldr	r3, [r2, #52]	; 0x34
     5c0:	9306      	str	r3, [sp, #24]
     5c2:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     5c4:	231f      	movs	r3, #31
     5c6:	4699      	mov	r9, r3
     5c8:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     5ca:	00bb      	lsls	r3, r7, #2
     5cc:	aa03      	add	r2, sp, #12
     5ce:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     5d0:	2800      	cmp	r0, #0
     5d2:	d102      	bne.n	5da <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     5d4:	0030      	movs	r0, r6
     5d6:	4bac      	ldr	r3, [pc, #688]	; (888 <spi_init+0x2f4>)
     5d8:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     5da:	1c43      	adds	r3, r0, #1
     5dc:	d027      	beq.n	62e <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     5de:	0402      	lsls	r2, r0, #16
     5e0:	0c13      	lsrs	r3, r2, #16
     5e2:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     5e4:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5e6:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     5e8:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     5ea:	0603      	lsls	r3, r0, #24
     5ec:	d403      	bmi.n	5f6 <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
     5ee:	094b      	lsrs	r3, r1, #5
     5f0:	01db      	lsls	r3, r3, #7
     5f2:	4aa6      	ldr	r2, [pc, #664]	; (88c <spi_init+0x2f8>)
     5f4:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     5f6:	464b      	mov	r3, r9
     5f8:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     5fa:	18e8      	adds	r0, r5, r3
     5fc:	3040      	adds	r0, #64	; 0x40
     5fe:	7800      	ldrb	r0, [r0, #0]
     600:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     602:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     604:	4652      	mov	r2, sl
     606:	07d2      	lsls	r2, r2, #31
     608:	d50a      	bpl.n	620 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     60a:	085b      	lsrs	r3, r3, #1
     60c:	18eb      	adds	r3, r5, r3
     60e:	3330      	adds	r3, #48	; 0x30
     610:	7818      	ldrb	r0, [r3, #0]
     612:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     614:	07cb      	lsls	r3, r1, #31
     616:	d501      	bpl.n	61c <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     618:	0900      	lsrs	r0, r0, #4
     61a:	e001      	b.n	620 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     61c:	230f      	movs	r3, #15
     61e:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     620:	4584      	cmp	ip, r0
     622:	d004      	beq.n	62e <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     624:	2300      	movs	r3, #0
     626:	4642      	mov	r2, r8
     628:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     62a:	201c      	movs	r0, #28
     62c:	e126      	b.n	87c <spi_init+0x2e8>
     62e:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     630:	2f04      	cmp	r7, #4
     632:	d1c9      	bne.n	5c8 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     634:	2013      	movs	r0, #19
     636:	4b96      	ldr	r3, [pc, #600]	; (890 <spi_init+0x2fc>)
     638:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     63a:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     63c:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     63e:	2b01      	cmp	r3, #1
     640:	d112      	bne.n	668 <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
     642:	aa02      	add	r2, sp, #8
     644:	0001      	movs	r1, r0
     646:	69a0      	ldr	r0, [r4, #24]
     648:	4b92      	ldr	r3, [pc, #584]	; (894 <spi_init+0x300>)
     64a:	4798      	blx	r3
     64c:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     64e:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     650:	2b00      	cmp	r3, #0
     652:	d000      	beq.n	656 <spi_init+0xc2>
     654:	e112      	b.n	87c <spi_init+0x2e8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     656:	7b33      	ldrb	r3, [r6, #12]
     658:	b2db      	uxtb	r3, r3
     65a:	aa02      	add	r2, sp, #8
     65c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     65e:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     660:	429a      	cmp	r2, r3
     662:	d000      	beq.n	666 <spi_init+0xd2>
     664:	e10a      	b.n	87c <spi_init+0x2e8>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     666:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     668:	7825      	ldrb	r5, [r4, #0]
     66a:	2d00      	cmp	r5, #0
     66c:	d114      	bne.n	698 <spi_init+0x104>
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     66e:	6832      	ldr	r2, [r6, #0]
     670:	7fe3      	ldrb	r3, [r4, #31]
     672:	041b      	lsls	r3, r3, #16
     674:	7fa1      	ldrb	r1, [r4, #30]
     676:	430b      	orrs	r3, r1
			return STATUS_ERR_DENIED;
     678:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     67a:	4293      	cmp	r3, r2
     67c:	d000      	beq.n	680 <spi_init+0xec>
     67e:	e0fd      	b.n	87c <spi_init+0x2e8>

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     680:	69a1      	ldr	r1, [r4, #24]

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     682:	8ba3      	ldrh	r3, [r4, #28]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
     684:	2220      	movs	r2, #32
     686:	5ca2      	ldrb	r2, [r4, r2]
     688:	2a00      	cmp	r2, #0
     68a:	d001      	beq.n	690 <spi_init+0xfc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     68c:	2240      	movs	r2, #64	; 0x40
     68e:	4313      	orrs	r3, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     690:	2208      	movs	r2, #8
     692:	430a      	orrs	r2, r1
     694:	4317      	orrs	r7, r2
     696:	e000      	b.n	69a <spi_init+0x106>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
     698:	2300      	movs	r3, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     69a:	6862      	ldr	r2, [r4, #4]
     69c:	68a1      	ldr	r1, [r4, #8]
     69e:	430a      	orrs	r2, r1
     6a0:	68e1      	ldr	r1, [r4, #12]
     6a2:	430a      	orrs	r2, r1
     6a4:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     6a6:	7c21      	ldrb	r1, [r4, #16]
     6a8:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
     6aa:	7c61      	ldrb	r1, [r4, #17]
     6ac:	2900      	cmp	r1, #0
     6ae:	d001      	beq.n	6b4 <spi_init+0x120>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     6b0:	2180      	movs	r1, #128	; 0x80
     6b2:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     6b4:	7ca1      	ldrb	r1, [r4, #18]
     6b6:	2900      	cmp	r1, #0
     6b8:	d002      	beq.n	6c0 <spi_init+0x12c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     6ba:	2180      	movs	r1, #128	; 0x80
     6bc:	0289      	lsls	r1, r1, #10
     6be:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     6c0:	7ce1      	ldrb	r1, [r4, #19]
     6c2:	2900      	cmp	r1, #0
     6c4:	d002      	beq.n	6cc <spi_init+0x138>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     6c6:	2180      	movs	r1, #128	; 0x80
     6c8:	0089      	lsls	r1, r1, #2
     6ca:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     6cc:	7d21      	ldrb	r1, [r4, #20]
     6ce:	2900      	cmp	r1, #0
     6d0:	d002      	beq.n	6d8 <spi_init+0x144>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     6d2:	2180      	movs	r1, #128	; 0x80
     6d4:	0189      	lsls	r1, r1, #6
     6d6:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     6d8:	6830      	ldr	r0, [r6, #0]
     6da:	2102      	movs	r1, #2
     6dc:	430a      	orrs	r2, r1
     6de:	4282      	cmp	r2, r0
     6e0:	d109      	bne.n	6f6 <spi_init+0x162>
			spi_module->CTRLB.reg == ctrlb) {
     6e2:	6872      	ldr	r2, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     6e4:	429a      	cmp	r2, r3
     6e6:	d106      	bne.n	6f6 <spi_init+0x162>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     6e8:	4643      	mov	r3, r8
     6ea:	715d      	strb	r5, [r3, #5]
		module->character_size = config->character_size;
     6ec:	7c23      	ldrb	r3, [r4, #16]
     6ee:	4642      	mov	r2, r8
     6f0:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     6f2:	2000      	movs	r0, #0
     6f4:	e0c2      	b.n	87c <spi_init+0x2e8>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     6f6:	2300      	movs	r3, #0
     6f8:	4642      	mov	r2, r8
     6fa:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
     6fc:	201c      	movs	r0, #28
     6fe:	e0bd      	b.n	87c <spi_init+0x2e8>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     700:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     702:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     704:	07db      	lsls	r3, r3, #31
     706:	d500      	bpl.n	70a <spi_init+0x176>
     708:	e0b8      	b.n	87c <spi_init+0x2e8>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     70a:	0008      	movs	r0, r1
     70c:	4b62      	ldr	r3, [pc, #392]	; (898 <spi_init+0x304>)
     70e:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     710:	4962      	ldr	r1, [pc, #392]	; (89c <spi_init+0x308>)
     712:	6a0a      	ldr	r2, [r1, #32]
     714:	1c85      	adds	r5, r0, #2
     716:	2301      	movs	r3, #1
     718:	40ab      	lsls	r3, r5
     71a:	4313      	orrs	r3, r2
     71c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     71e:	a907      	add	r1, sp, #28
     720:	2724      	movs	r7, #36	; 0x24
     722:	5de3      	ldrb	r3, [r4, r7]
     724:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     726:	3014      	adds	r0, #20
     728:	b2c5      	uxtb	r5, r0
     72a:	0028      	movs	r0, r5
     72c:	4b5c      	ldr	r3, [pc, #368]	; (8a0 <spi_init+0x30c>)
     72e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     730:	0028      	movs	r0, r5
     732:	4b5c      	ldr	r3, [pc, #368]	; (8a4 <spi_init+0x310>)
     734:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     736:	5de0      	ldrb	r0, [r4, r7]
     738:	2100      	movs	r1, #0
     73a:	4b5b      	ldr	r3, [pc, #364]	; (8a8 <spi_init+0x314>)
     73c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     73e:	7823      	ldrb	r3, [r4, #0]
     740:	2b01      	cmp	r3, #1
     742:	d103      	bne.n	74c <spi_init+0x1b8>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     744:	6832      	ldr	r2, [r6, #0]
     746:	330b      	adds	r3, #11
     748:	4313      	orrs	r3, r2
     74a:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     74c:	7823      	ldrb	r3, [r4, #0]
     74e:	2b00      	cmp	r3, #0
     750:	d103      	bne.n	75a <spi_init+0x1c6>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     752:	6832      	ldr	r2, [r6, #0]
     754:	3308      	adds	r3, #8
     756:	4313      	orrs	r3, r2
     758:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     75a:	4643      	mov	r3, r8
     75c:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     75e:	ab02      	add	r3, sp, #8
     760:	2280      	movs	r2, #128	; 0x80
     762:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     764:	2200      	movs	r2, #0
     766:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     768:	2101      	movs	r1, #1
     76a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     76c:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     76e:	7823      	ldrb	r3, [r4, #0]
     770:	2b00      	cmp	r3, #0
     772:	d101      	bne.n	778 <spi_init+0x1e4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     774:	ab02      	add	r3, sp, #8
     776:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     77a:	9303      	str	r3, [sp, #12]
     77c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     77e:	9304      	str	r3, [sp, #16]
     780:	6b23      	ldr	r3, [r4, #48]	; 0x30
     782:	9305      	str	r3, [sp, #20]
     784:	6b63      	ldr	r3, [r4, #52]	; 0x34
     786:	9306      	str	r3, [sp, #24]
     788:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     78a:	ad02      	add	r5, sp, #8
     78c:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     78e:	00bb      	lsls	r3, r7, #2
     790:	aa03      	add	r2, sp, #12
     792:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     794:	2800      	cmp	r0, #0
     796:	d102      	bne.n	79e <spi_init+0x20a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     798:	0030      	movs	r0, r6
     79a:	4b3b      	ldr	r3, [pc, #236]	; (888 <spi_init+0x2f4>)
     79c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     79e:	1c43      	adds	r3, r0, #1
     7a0:	d005      	beq.n	7ae <spi_init+0x21a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7a2:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7a4:	0c00      	lsrs	r0, r0, #16
     7a6:	b2c0      	uxtb	r0, r0
     7a8:	0029      	movs	r1, r5
     7aa:	4b40      	ldr	r3, [pc, #256]	; (8ac <spi_init+0x318>)
     7ac:	4798      	blx	r3
     7ae:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     7b0:	2f04      	cmp	r7, #4
     7b2:	d1eb      	bne.n	78c <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     7b4:	7823      	ldrb	r3, [r4, #0]
     7b6:	4642      	mov	r2, r8
     7b8:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     7ba:	7c23      	ldrb	r3, [r4, #16]
     7bc:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     7be:	7ca3      	ldrb	r3, [r4, #18]
     7c0:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     7c2:	7d23      	ldrb	r3, [r4, #20]
     7c4:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     7c6:	2200      	movs	r2, #0
     7c8:	466b      	mov	r3, sp
     7ca:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     7cc:	7823      	ldrb	r3, [r4, #0]
     7ce:	2b01      	cmp	r3, #1
     7d0:	d115      	bne.n	7fe <spi_init+0x26a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7d2:	4643      	mov	r3, r8
     7d4:	6818      	ldr	r0, [r3, #0]
     7d6:	4b30      	ldr	r3, [pc, #192]	; (898 <spi_init+0x304>)
     7d8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     7da:	3014      	adds	r0, #20
     7dc:	b2c0      	uxtb	r0, r0
     7de:	4b2c      	ldr	r3, [pc, #176]	; (890 <spi_init+0x2fc>)
     7e0:	4798      	blx	r3
     7e2:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     7e4:	466b      	mov	r3, sp
     7e6:	1d9a      	adds	r2, r3, #6
     7e8:	69a0      	ldr	r0, [r4, #24]
     7ea:	4b2a      	ldr	r3, [pc, #168]	; (894 <spi_init+0x300>)
     7ec:	4798      	blx	r3
     7ee:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     7f0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     7f2:	2b00      	cmp	r3, #0
     7f4:	d142      	bne.n	87c <spi_init+0x2e8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     7f6:	466b      	mov	r3, sp
     7f8:	3306      	adds	r3, #6
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     7fe:	7823      	ldrb	r3, [r4, #0]
     800:	2b00      	cmp	r3, #0
     802:	d10f      	bne.n	824 <spi_init+0x290>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     804:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     806:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     808:	6a70      	ldr	r0, [r6, #36]	; 0x24
     80a:	7fe1      	ldrb	r1, [r4, #31]
     80c:	0409      	lsls	r1, r1, #16
     80e:	7fa5      	ldrb	r5, [r4, #30]
     810:	4329      	orrs	r1, r5
     812:	4301      	orrs	r1, r0
     814:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     816:	2220      	movs	r2, #32
     818:	5ca2      	ldrb	r2, [r4, r2]
     81a:	2a00      	cmp	r2, #0
     81c:	d004      	beq.n	828 <spi_init+0x294>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     81e:	2140      	movs	r1, #64	; 0x40
     820:	430b      	orrs	r3, r1
     822:	e001      	b.n	828 <spi_init+0x294>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     824:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     826:	2700      	movs	r7, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     828:	6862      	ldr	r2, [r4, #4]
     82a:	68a1      	ldr	r1, [r4, #8]
     82c:	430a      	orrs	r2, r1
     82e:	68e1      	ldr	r1, [r4, #12]
     830:	430a      	orrs	r2, r1
     832:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     834:	7c21      	ldrb	r1, [r4, #16]
     836:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     838:	7c61      	ldrb	r1, [r4, #17]
     83a:	2900      	cmp	r1, #0
     83c:	d103      	bne.n	846 <spi_init+0x2b2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     83e:	491c      	ldr	r1, [pc, #112]	; (8b0 <spi_init+0x31c>)
     840:	7889      	ldrb	r1, [r1, #2]
     842:	0789      	lsls	r1, r1, #30
     844:	d501      	bpl.n	84a <spi_init+0x2b6>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     846:	2180      	movs	r1, #128	; 0x80
     848:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     84a:	7ca1      	ldrb	r1, [r4, #18]
     84c:	2900      	cmp	r1, #0
     84e:	d002      	beq.n	856 <spi_init+0x2c2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     850:	2180      	movs	r1, #128	; 0x80
     852:	0289      	lsls	r1, r1, #10
     854:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     856:	7ce1      	ldrb	r1, [r4, #19]
     858:	2900      	cmp	r1, #0
     85a:	d002      	beq.n	862 <spi_init+0x2ce>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     85c:	2180      	movs	r1, #128	; 0x80
     85e:	0089      	lsls	r1, r1, #2
     860:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     862:	7d21      	ldrb	r1, [r4, #20]
     864:	2900      	cmp	r1, #0
     866:	d002      	beq.n	86e <spi_init+0x2da>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     868:	2180      	movs	r1, #128	; 0x80
     86a:	0189      	lsls	r1, r1, #6
     86c:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     86e:	6831      	ldr	r1, [r6, #0]
     870:	430a      	orrs	r2, r1
     872:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     874:	6872      	ldr	r2, [r6, #4]
     876:	4313      	orrs	r3, r2
     878:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     87a:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     87c:	b008      	add	sp, #32
     87e:	bc1c      	pop	{r2, r3, r4}
     880:	4690      	mov	r8, r2
     882:	4699      	mov	r9, r3
     884:	46a2      	mov	sl, r4
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
     888:	000003d1 	.word	0x000003d1
     88c:	41004400 	.word	0x41004400
     890:	000024c1 	.word	0x000024c1
     894:	0000035d 	.word	0x0000035d
     898:	00000559 	.word	0x00000559
     89c:	40000400 	.word	0x40000400
     8a0:	000024a5 	.word	0x000024a5
     8a4:	00002419 	.word	0x00002419
     8a8:	00000385 	.word	0x00000385
     8ac:	0000259d 	.word	0x0000259d
     8b0:	41002000 	.word	0x41002000

000008b4 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
     8b4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
     8b6:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     8b8:	231c      	movs	r3, #28
		uint16_t *rx_data)
{
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
     8ba:	2c00      	cmp	r4, #0
     8bc:	d04f      	beq.n	95e <spi_transceive_wait+0xaa>
#  endif
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
     8be:	7943      	ldrb	r3, [r0, #5]
     8c0:	2b00      	cmp	r3, #0
     8c2:	d10e      	bne.n	8e2 <spi_transceive_wait+0x2e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c4:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8c6:	7e2b      	ldrb	r3, [r5, #24]
		for (j = 0; j <= SPI_TIMEOUT; j++) {
			if (spi_is_ready_to_write(module)) {
     8c8:	07db      	lsls	r3, r3, #31
     8ca:	d40a      	bmi.n	8e2 <spi_transceive_wait+0x2e>
     8cc:	4b25      	ldr	r3, [pc, #148]	; (964 <spi_transceive_wait+0xb0>)
     8ce:	2601      	movs	r6, #1
     8d0:	7e2c      	ldrb	r4, [r5, #24]
     8d2:	4234      	tst	r4, r6
     8d4:	d105      	bne.n	8e2 <spi_transceive_wait+0x2e>
				break;
			} else if (j == SPI_TIMEOUT) {
     8d6:	2b01      	cmp	r3, #1
     8d8:	d03e      	beq.n	958 <spi_transceive_wait+0xa4>
     8da:	3b01      	subs	r3, #1
     8dc:	b29b      	uxth	r3, r3
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
     8de:	2b00      	cmp	r3, #0
     8e0:	d1f6      	bne.n	8d0 <spi_transceive_wait+0x1c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8e2:	6804      	ldr	r4, [r0, #0]
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
     8e4:	2501      	movs	r5, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8e6:	7e23      	ldrb	r3, [r4, #24]
     8e8:	422b      	tst	r3, r5
     8ea:	d0fc      	beq.n	8e6 <spi_transceive_wait+0x32>
     8ec:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     8ee:	07db      	lsls	r3, r3, #31
     8f0:	d502      	bpl.n	8f8 <spi_transceive_wait+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8f2:	05c9      	lsls	r1, r1, #23
     8f4:	0dc9      	lsrs	r1, r1, #23
     8f6:	62a1      	str	r1, [r4, #40]	; 0x28
	/* Write data */
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
     8f8:	7943      	ldrb	r3, [r0, #5]
     8fa:	2b00      	cmp	r3, #0
     8fc:	d10e      	bne.n	91c <spi_transceive_wait+0x68>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8fe:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     900:	7e23      	ldrb	r3, [r4, #24]
		for (j = 0; j <= SPI_TIMEOUT; j++) {
			if (spi_is_ready_to_read(module)) {
     902:	075b      	lsls	r3, r3, #29
     904:	d40a      	bmi.n	91c <spi_transceive_wait+0x68>
     906:	4b17      	ldr	r3, [pc, #92]	; (964 <spi_transceive_wait+0xb0>)
     908:	2504      	movs	r5, #4
     90a:	7e21      	ldrb	r1, [r4, #24]
     90c:	4229      	tst	r1, r5
     90e:	d105      	bne.n	91c <spi_transceive_wait+0x68>
				break;
			} else if (j == SPI_TIMEOUT) {
     910:	2b01      	cmp	r3, #1
     912:	d023      	beq.n	95c <spi_transceive_wait+0xa8>
     914:	3b01      	subs	r3, #1
     916:	b29b      	uxth	r3, r3
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
     918:	2b00      	cmp	r3, #0
     91a:	d1f6      	bne.n	90a <spi_transceive_wait+0x56>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     91c:	6801      	ldr	r1, [r0, #0]
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
     91e:	2404      	movs	r4, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     920:	7e0b      	ldrb	r3, [r1, #24]
     922:	4223      	tst	r3, r4
     924:	d0fc      	beq.n	920 <spi_transceive_wait+0x6c>
     926:	7e0c      	ldrb	r4, [r1, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     928:	2310      	movs	r3, #16
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     92a:	0764      	lsls	r4, r4, #29
     92c:	d517      	bpl.n	95e <spi_transceive_wait+0xaa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     92e:	8b4c      	ldrh	r4, [r1, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     930:	2300      	movs	r3, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     932:	0764      	lsls	r4, r4, #29
     934:	d504      	bpl.n	940 <spi_transceive_wait+0x8c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     936:	8b4c      	ldrh	r4, [r1, #26]
     938:	3304      	adds	r3, #4
     93a:	4323      	orrs	r3, r4
     93c:	834b      	strh	r3, [r1, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     93e:	231e      	movs	r3, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     940:	7980      	ldrb	r0, [r0, #6]
     942:	2801      	cmp	r0, #1
     944:	d104      	bne.n	950 <spi_transceive_wait+0x9c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     946:	6a89      	ldr	r1, [r1, #40]	; 0x28
     948:	05c9      	lsls	r1, r1, #23
     94a:	0dc9      	lsrs	r1, r1, #23
     94c:	8011      	strh	r1, [r2, #0]
     94e:	e006      	b.n	95e <spi_transceive_wait+0xaa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     950:	6a89      	ldr	r1, [r1, #40]	; 0x28
     952:	b2c9      	uxtb	r1, r1
     954:	8011      	strh	r1, [r2, #0]
     956:	e002      	b.n	95e <spi_transceive_wait+0xaa>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
			if (spi_is_ready_to_write(module)) {
				break;
			} else if (j == SPI_TIMEOUT) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     958:	2312      	movs	r3, #18
     95a:	e000      	b.n	95e <spi_transceive_wait+0xaa>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
			if (spi_is_ready_to_read(module)) {
				break;
			} else if (j == SPI_TIMEOUT) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     95c:	2312      	movs	r3, #18

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
     95e:	0018      	movs	r0, r3
     960:	bd70      	pop	{r4, r5, r6, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	00002710 	.word	0x00002710

00000968 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     968:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     96a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     96c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     96e:	2c01      	cmp	r4, #1
     970:	d170      	bne.n	a54 <spi_select_slave+0xec>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     972:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     974:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     976:	2c00      	cmp	r4, #0
     978:	d16c      	bne.n	a54 <spi_select_slave+0xec>
#  endif
	{
		if (select) {
     97a:	2a00      	cmp	r2, #0
     97c:	d05a      	beq.n	a34 <spi_select_slave+0xcc>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     97e:	784b      	ldrb	r3, [r1, #1]
     980:	2b00      	cmp	r3, #0
     982:	d046      	beq.n	a12 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     984:	6803      	ldr	r3, [r0, #0]
     986:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     988:	07db      	lsls	r3, r3, #31
     98a:	d410      	bmi.n	9ae <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     98c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     98e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     990:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     992:	2900      	cmp	r1, #0
     994:	d104      	bne.n	9a0 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
     996:	095a      	lsrs	r2, r3, #5
     998:	01d2      	lsls	r2, r2, #7
     99a:	492f      	ldr	r1, [pc, #188]	; (a58 <spi_select_slave+0xf0>)
     99c:	468c      	mov	ip, r1
     99e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9a0:	211f      	movs	r1, #31
     9a2:	400b      	ands	r3, r1
     9a4:	391e      	subs	r1, #30
     9a6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9a8:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     9aa:	2305      	movs	r3, #5
     9ac:	e052      	b.n	a54 <spi_select_slave+0xec>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     9ae:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b0:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9b2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b4:	2c00      	cmp	r4, #0
     9b6:	d104      	bne.n	9c2 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
     9b8:	095a      	lsrs	r2, r3, #5
     9ba:	01d2      	lsls	r2, r2, #7
     9bc:	4c26      	ldr	r4, [pc, #152]	; (a58 <spi_select_slave+0xf0>)
     9be:	46a4      	mov	ip, r4
     9c0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9c2:	241f      	movs	r4, #31
     9c4:	4023      	ands	r3, r4
     9c6:	3c1e      	subs	r4, #30
     9c8:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9ca:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9cc:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9ce:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     9d0:	07d2      	lsls	r2, r2, #31
     9d2:	d501      	bpl.n	9d8 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     9d4:	788a      	ldrb	r2, [r1, #2]
     9d6:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     9d8:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     9da:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     9dc:	2a00      	cmp	r2, #0
     9de:	d139      	bne.n	a54 <spi_select_slave+0xec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9e0:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     9e2:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9e4:	7e13      	ldrb	r3, [r2, #24]
     9e6:	420b      	tst	r3, r1
     9e8:	d0fc      	beq.n	9e4 <spi_select_slave+0x7c>
     9ea:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     9ec:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     9ee:	0749      	lsls	r1, r1, #29
     9f0:	d530      	bpl.n	a54 <spi_select_slave+0xec>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9f2:	8b53      	ldrh	r3, [r2, #26]
     9f4:	075b      	lsls	r3, r3, #29
     9f6:	d503      	bpl.n	a00 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     9f8:	8b51      	ldrh	r1, [r2, #26]
     9fa:	2304      	movs	r3, #4
     9fc:	430b      	orrs	r3, r1
     9fe:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a00:	7983      	ldrb	r3, [r0, #6]
     a02:	2b01      	cmp	r3, #1
     a04:	d102      	bne.n	a0c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a06:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a08:	2300      	movs	r3, #0
     a0a:	e023      	b.n	a54 <spi_select_slave+0xec>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a0e:	2300      	movs	r3, #0
     a10:	e020      	b.n	a54 <spi_select_slave+0xec>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     a12:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a14:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a16:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a18:	2900      	cmp	r1, #0
     a1a:	d104      	bne.n	a26 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     a1c:	095a      	lsrs	r2, r3, #5
     a1e:	01d2      	lsls	r2, r2, #7
     a20:	490d      	ldr	r1, [pc, #52]	; (a58 <spi_select_slave+0xf0>)
     a22:	468c      	mov	ip, r1
     a24:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a26:	211f      	movs	r1, #31
     a28:	400b      	ands	r3, r1
     a2a:	391e      	subs	r1, #30
     a2c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a2e:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     a30:	2300      	movs	r3, #0
     a32:	e00f      	b.n	a54 <spi_select_slave+0xec>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     a34:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a36:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a38:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a3a:	2900      	cmp	r1, #0
     a3c:	d104      	bne.n	a48 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     a3e:	095a      	lsrs	r2, r3, #5
     a40:	01d2      	lsls	r2, r2, #7
     a42:	4905      	ldr	r1, [pc, #20]	; (a58 <spi_select_slave+0xf0>)
     a44:	468c      	mov	ip, r1
     a46:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a48:	211f      	movs	r1, #31
     a4a:	400b      	ands	r3, r1
     a4c:	391e      	subs	r1, #30
     a4e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a50:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     a52:	2300      	movs	r3, #0
}
     a54:	0018      	movs	r0, r3
     a56:	bd10      	pop	{r4, pc}
     a58:	41004400 	.word	0x41004400

00000a5c <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
     a5c:	b500      	push	{lr}
     a5e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     a60:	a901      	add	r1, sp, #4
     a62:	2300      	movs	r3, #0
     a64:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     a66:	2201      	movs	r2, #1
     a68:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     a6a:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA03, &config_port_pin);
     a6c:	2003      	movs	r0, #3
     a6e:	4b02      	ldr	r3, [pc, #8]	; (a78 <configure_port_pins+0x1c>)
     a70:	4798      	blx	r3
}
     a72:	b003      	add	sp, #12
     a74:	bd00      	pop	{pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	00001f55 	.word	0x00001f55

00000a7c <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
     a7c:	b510      	push	{r4, lr}
     a7e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     a80:	ac01      	add	r4, sp, #4
     a82:	0020      	movs	r0, r4
     a84:	4b07      	ldr	r3, [pc, #28]	; (aa4 <configure_extint_channel+0x28>)
     a86:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
     a88:	2303      	movs	r3, #3
     a8a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
     a8c:	2300      	movs	r3, #0
     a8e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     a90:	3301      	adds	r3, #1
     a92:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     a94:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(3, &config_extint_chan);
     a96:	0021      	movs	r1, r4
     a98:	2003      	movs	r0, #3
     a9a:	4b03      	ldr	r3, [pc, #12]	; (aa8 <configure_extint_channel+0x2c>)
     a9c:	4798      	blx	r3
}
     a9e:	b004      	add	sp, #16
     aa0:	bd10      	pop	{r4, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	00001ecd 	.word	0x00001ecd
     aa8:	00001ee1 	.word	0x00001ee1

00000aac <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
     aac:	b510      	push	{r4, lr}
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
     aae:	2200      	movs	r2, #0
     ab0:	2103      	movs	r1, #3
     ab2:	4804      	ldr	r0, [pc, #16]	; (ac4 <configure_extint_callbacks+0x18>)
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <configure_extint_callbacks+0x1c>)
     ab6:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
     ab8:	2100      	movs	r1, #0
     aba:	2003      	movs	r0, #3
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <configure_extint_callbacks+0x20>)
     abe:	4798      	blx	r3
}
     ac0:	bd10      	pop	{r4, pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	000010d5 	.word	0x000010d5
     ac8:	00001d75 	.word	0x00001d75
     acc:	00001da1 	.word	0x00001da1

00000ad0 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
     ad0:	b530      	push	{r4, r5, lr}
     ad2:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     ad4:	4c28      	ldr	r4, [pc, #160]	; (b78 <configure_RFM69_spi+0xa8>)
     ad6:	2312      	movs	r3, #18
     ad8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     ada:	2300      	movs	r3, #0
     adc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     ade:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ae0:	a901      	add	r1, sp, #4
     ae2:	2201      	movs	r2, #1
     ae4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     ae6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     ae8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     aea:	2012      	movs	r0, #18
     aec:	4b23      	ldr	r3, [pc, #140]	; (b7c <configure_RFM69_spi+0xac>)
     aee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     af0:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     af2:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     af4:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     af6:	2a00      	cmp	r2, #0
     af8:	d104      	bne.n	b04 <configure_RFM69_spi+0x34>
		return &(ports[port_index]->Group[group_index]);
     afa:	0959      	lsrs	r1, r3, #5
     afc:	01c9      	lsls	r1, r1, #7
     afe:	4a20      	ldr	r2, [pc, #128]	; (b80 <configure_RFM69_spi+0xb0>)
     b00:	4694      	mov	ip, r2
     b02:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b04:	221f      	movs	r2, #31
     b06:	4013      	ands	r3, r2
     b08:	3a1e      	subs	r2, #30
     b0a:	0010      	movs	r0, r2
     b0c:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b0e:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     b10:	ac02      	add	r4, sp, #8
     b12:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     b14:	2300      	movs	r3, #0
     b16:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     b18:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     b1a:	21c0      	movs	r1, #192	; 0xc0
     b1c:	0389      	lsls	r1, r1, #14
     b1e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     b20:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     b22:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     b24:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     b26:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     b28:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     b2a:	3223      	adds	r2, #35	; 0x23
     b2c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     b2e:	3a18      	subs	r2, #24
     b30:	2100      	movs	r1, #0
     b32:	a808      	add	r0, sp, #32
     b34:	4b13      	ldr	r3, [pc, #76]	; (b84 <configure_RFM69_spi+0xb4>)
     b36:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     b38:	4b13      	ldr	r3, [pc, #76]	; (b88 <configure_RFM69_spi+0xb8>)
     b3a:	61a3      	str	r3, [r4, #24]
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
     b3c:	4b13      	ldr	r3, [pc, #76]	; (b8c <configure_RFM69_spi+0xbc>)
     b3e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
     b40:	4b13      	ldr	r3, [pc, #76]	; (b90 <configure_RFM69_spi+0xc0>)
     b42:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
     b44:	2301      	movs	r3, #1
     b46:	425b      	negs	r3, r3
     b48:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <configure_RFM69_spi+0xc4>)
     b4c:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
     b4e:	4d12      	ldr	r5, [pc, #72]	; (b98 <configure_RFM69_spi+0xc8>)
     b50:	0022      	movs	r2, r4
     b52:	4912      	ldr	r1, [pc, #72]	; (b9c <configure_RFM69_spi+0xcc>)
     b54:	0028      	movs	r0, r5
     b56:	4b12      	ldr	r3, [pc, #72]	; (ba0 <configure_RFM69_spi+0xd0>)
     b58:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b5a:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     b5c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     b5e:	2b00      	cmp	r3, #0
     b60:	d1fc      	bne.n	b5c <configure_RFM69_spi+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     b62:	6811      	ldr	r1, [r2, #0]
     b64:	3302      	adds	r3, #2
     b66:	430b      	orrs	r3, r1
     b68:	6013      	str	r3, [r2, #0]
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);

	spi_select_slave(&spi_master_instance, &slave, false);
     b6a:	2200      	movs	r2, #0
     b6c:	4902      	ldr	r1, [pc, #8]	; (b78 <configure_RFM69_spi+0xa8>)
     b6e:	480a      	ldr	r0, [pc, #40]	; (b98 <configure_RFM69_spi+0xc8>)
     b70:	4b0c      	ldr	r3, [pc, #48]	; (ba4 <configure_RFM69_spi+0xd4>)
     b72:	4798      	blx	r3
}
     b74:	b011      	add	sp, #68	; 0x44
     b76:	bd30      	pop	{r4, r5, pc}
     b78:	20000244 	.word	0x20000244
     b7c:	00001f55 	.word	0x00001f55
     b80:	41004400 	.word	0x41004400
     b84:	000045d7 	.word	0x000045d7
     b88:	000186a0 	.word	0x000186a0
     b8c:	00100002 	.word	0x00100002
     b90:	00110002 	.word	0x00110002
     b94:	00130002 	.word	0x00130002
     b98:	20000234 	.word	0x20000234
     b9c:	42000c00 	.word	0x42000c00
     ba0:	00000595 	.word	0x00000595
     ba4:	00000969 	.word	0x00000969

00000ba8 <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
     ba8:	b510      	push	{r4, lr}
     baa:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
     bac:	2300      	movs	r3, #0
     bae:	466a      	mov	r2, sp
     bb0:	70d3      	strb	r3, [r2, #3]
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
     bb2:	9302      	str	r3, [sp, #8]
     bb4:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
     bb6:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
     bb8:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
     bba:	2301      	movs	r3, #1
     bbc:	7113      	strb	r3, [r2, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
     bbe:	4c07      	ldr	r4, [pc, #28]	; (bdc <configure_rtc_count+0x34>)
     bc0:	4907      	ldr	r1, [pc, #28]	; (be0 <configure_rtc_count+0x38>)
     bc2:	0020      	movs	r0, r4
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <configure_rtc_count+0x3c>)
     bc6:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
     bc8:	0020      	movs	r0, r4
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <configure_rtc_count+0x40>)
     bcc:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
     bce:	4907      	ldr	r1, [pc, #28]	; (bec <configure_rtc_count+0x44>)
     bd0:	0020      	movs	r0, r4
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <configure_rtc_count+0x48>)
     bd4:	4798      	blx	r3
}
     bd6:	b004      	add	sp, #16
     bd8:	bd10      	pop	{r4, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	20000198 	.word	0x20000198
     be0:	40001400 	.word	0x40001400
     be4:	00000259 	.word	0x00000259
     be8:	0000011d 	.word	0x0000011d
     bec:	00002710 	.word	0x00002710
     bf0:	00000339 	.word	0x00000339

00000bf4 <reset_millis>:

void reset_millis(void)
{
     bf4:	b510      	push	{r4, lr}
	rtc_count_set_count(&rtc_instance, 0);
     bf6:	4c04      	ldr	r4, [pc, #16]	; (c08 <reset_millis+0x14>)
     bf8:	2100      	movs	r1, #0
     bfa:	0020      	movs	r0, r4
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <reset_millis+0x18>)
     bfe:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
     c00:	0020      	movs	r0, r4
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <reset_millis+0x1c>)
     c04:	4798      	blx	r3
}
     c06:	bd10      	pop	{r4, pc}
     c08:	20000198 	.word	0x20000198
     c0c:	00000185 	.word	0x00000185
     c10:	0000011d 	.word	0x0000011d

00000c14 <millis>:

uint32_t millis(void)
{
     c14:	b500      	push	{lr}
     c16:	b083      	sub	sp, #12
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
     c18:	2300      	movs	r3, #0
     c1a:	9301      	str	r3, [sp, #4]
	milli = rtc_count_get_count(&rtc_instance);
     c1c:	4803      	ldr	r0, [pc, #12]	; (c2c <millis+0x18>)
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <millis+0x1c>)
     c20:	4798      	blx	r3
     c22:	9001      	str	r0, [sp, #4]
	return milli;
     c24:	9801      	ldr	r0, [sp, #4]
}
     c26:	b003      	add	sp, #12
     c28:	bd00      	pop	{pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	20000198 	.word	0x20000198
     c30:	000001c1 	.word	0x000001c1

00000c34 <RFM69>:
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}

void RFM69()
{
	_mode = RF69_MODE_STANDBY;
     c34:	2201      	movs	r2, #1
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <RFM69+0x18>)
     c38:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
     c3a:	2300      	movs	r3, #0
     c3c:	4a04      	ldr	r2, [pc, #16]	; (c50 <RFM69+0x1c>)
     c3e:	7013      	strb	r3, [r2, #0]
	_powerLevel = 31;
     c40:	211f      	movs	r1, #31
     c42:	4a04      	ldr	r2, [pc, #16]	; (c54 <RFM69+0x20>)
     c44:	7011      	strb	r1, [r2, #0]
	_isRFM69HW = false;
     c46:	4a04      	ldr	r2, [pc, #16]	; (c58 <RFM69+0x24>)
     c48:	7013      	strb	r3, [r2, #0]
}
     c4a:	4770      	bx	lr
     c4c:	2000022e 	.word	0x2000022e
     c50:	200001a8 	.word	0x200001a8
     c54:	200001a0 	.word	0x200001a0
     c58:	20000230 	.word	0x20000230

00000c5c <selectrf>:
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
  unselect();
}

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
     c5c:	b510      	push	{r4, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     c5e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c60:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     c64:	2200      	movs	r2, #0
     c66:	4b04      	ldr	r3, [pc, #16]	; (c78 <selectrf+0x1c>)
     c68:	701a      	strb	r2, [r3, #0]

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
     c6a:	3201      	adds	r2, #1
     c6c:	4903      	ldr	r1, [pc, #12]	; (c7c <selectrf+0x20>)
     c6e:	4804      	ldr	r0, [pc, #16]	; (c80 <selectrf+0x24>)
     c70:	4b04      	ldr	r3, [pc, #16]	; (c84 <selectrf+0x28>)
     c72:	4798      	blx	r3
}
     c74:	bd10      	pop	{r4, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	200000d8 	.word	0x200000d8
     c7c:	20000244 	.word	0x20000244
     c80:	20000234 	.word	0x20000234
     c84:	00000969 	.word	0x00000969

00000c88 <maybeInterrupts>:
}

void maybeInterrupts()
{
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
     c88:	4b05      	ldr	r3, [pc, #20]	; (ca0 <maybeInterrupts+0x18>)
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d105      	bne.n	c9c <maybeInterrupts+0x14>
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     c90:	2201      	movs	r2, #1
     c92:	4b04      	ldr	r3, [pc, #16]	; (ca4 <maybeInterrupts+0x1c>)
     c94:	701a      	strb	r2, [r3, #0]
     c96:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c9a:	b662      	cpsie	i
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
     c9c:	4770      	bx	lr
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	200001a1 	.word	0x200001a1
     ca4:	200000d8 	.word	0x200000d8

00000ca8 <unselect>:
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
}

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
     ca8:	b510      	push	{r4, lr}
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
     caa:	2200      	movs	r2, #0
     cac:	4903      	ldr	r1, [pc, #12]	; (cbc <unselect+0x14>)
     cae:	4804      	ldr	r0, [pc, #16]	; (cc0 <unselect+0x18>)
     cb0:	4b04      	ldr	r3, [pc, #16]	; (cc4 <unselect+0x1c>)
     cb2:	4798      	blx	r3
  maybeInterrupts();
     cb4:	4b04      	ldr	r3, [pc, #16]	; (cc8 <unselect+0x20>)
     cb6:	4798      	blx	r3
}
     cb8:	bd10      	pop	{r4, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	20000244 	.word	0x20000244
     cc0:	20000234 	.word	0x20000234
     cc4:	00000969 	.word	0x00000969
     cc8:	00000c89 	.word	0x00000c89

00000ccc <readReg>:
  rssi >>= 1;
  return rssi;
}

uint8_t readReg(volatile uint16_t addr)
{
     ccc:	b570      	push	{r4, r5, r6, lr}
     cce:	b084      	sub	sp, #16
     cd0:	466b      	mov	r3, sp
     cd2:	1d9c      	adds	r4, r3, #6
     cd4:	80d8      	strh	r0, [r3, #6]
  selectrf();
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <readReg+0x3c>)
     cd8:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
     cda:	8821      	ldrh	r1, [r4, #0]
     cdc:	237f      	movs	r3, #127	; 0x7f
     cde:	4019      	ands	r1, r3
     ce0:	4e0a      	ldr	r6, [pc, #40]	; (d0c <readReg+0x40>)
     ce2:	4a0b      	ldr	r2, [pc, #44]	; (d10 <readReg+0x44>)
     ce4:	0030      	movs	r0, r6
     ce6:	4d0b      	ldr	r5, [pc, #44]	; (d14 <readReg+0x48>)
     ce8:	47a8      	blx	r5
  volatile uint16_t regval = 0;
     cea:	240e      	movs	r4, #14
     cec:	446c      	add	r4, sp
     cee:	2300      	movs	r3, #0
     cf0:	8023      	strh	r3, [r4, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
     cf2:	0022      	movs	r2, r4
     cf4:	2100      	movs	r1, #0
     cf6:	0030      	movs	r0, r6
     cf8:	47a8      	blx	r5
  unselect();
     cfa:	4b07      	ldr	r3, [pc, #28]	; (d18 <readReg+0x4c>)
     cfc:	4798      	blx	r3
  return (uint8_t)regval;
     cfe:	8820      	ldrh	r0, [r4, #0]
     d00:	b2c0      	uxtb	r0, r0
}
     d02:	b004      	add	sp, #16
     d04:	bd70      	pop	{r4, r5, r6, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000c5d 	.word	0x00000c5d
     d0c:	20000234 	.word	0x20000234
     d10:	200000fa 	.word	0x200000fa
     d14:	000008b5 	.word	0x000008b5
     d18:	00000ca9 	.word	0x00000ca9

00000d1c <readRSSI>:
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
     d1c:	b510      	push	{r4, lr}
     d1e:	b082      	sub	sp, #8
  volatile int16_t rssi = 0;
     d20:	466b      	mov	r3, sp
     d22:	1d9c      	adds	r4, r3, #6
     d24:	2300      	movs	r3, #0
     d26:	8023      	strh	r3, [r4, #0]
  rssi = -readReg(REG_RSSIVALUE);
     d28:	2024      	movs	r0, #36	; 0x24
     d2a:	4b06      	ldr	r3, [pc, #24]	; (d44 <readRSSI+0x28>)
     d2c:	4798      	blx	r3
     d2e:	4240      	negs	r0, r0
     d30:	b200      	sxth	r0, r0
     d32:	8020      	strh	r0, [r4, #0]
  rssi >>= 1;
     d34:	8823      	ldrh	r3, [r4, #0]
     d36:	b21b      	sxth	r3, r3
     d38:	105b      	asrs	r3, r3, #1
     d3a:	8023      	strh	r3, [r4, #0]
  return rssi;
     d3c:	8820      	ldrh	r0, [r4, #0]
     d3e:	b200      	sxth	r0, r0
}
     d40:	b002      	add	sp, #8
     d42:	bd10      	pop	{r4, pc}
     d44:	00000ccd 	.word	0x00000ccd

00000d48 <writeReg>:
  unselect();
  return (uint8_t)regval;
}

void writeReg(uint8_t addr, uint8_t value)
{
     d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d4a:	0005      	movs	r5, r0
     d4c:	000c      	movs	r4, r1
  selectrf();
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <writeReg+0x28>)
     d50:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
     d52:	4e08      	ldr	r6, [pc, #32]	; (d74 <writeReg+0x2c>)
     d54:	2180      	movs	r1, #128	; 0x80
     d56:	4329      	orrs	r1, r5
     d58:	4d07      	ldr	r5, [pc, #28]	; (d78 <writeReg+0x30>)
     d5a:	0032      	movs	r2, r6
     d5c:	0028      	movs	r0, r5
     d5e:	4f07      	ldr	r7, [pc, #28]	; (d7c <writeReg+0x34>)
     d60:	47b8      	blx	r7
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
     d62:	b2a1      	uxth	r1, r4
     d64:	0032      	movs	r2, r6
     d66:	0028      	movs	r0, r5
     d68:	47b8      	blx	r7
  unselect();
     d6a:	4b05      	ldr	r3, [pc, #20]	; (d80 <writeReg+0x38>)
     d6c:	4798      	blx	r3
}
     d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d70:	00000c5d 	.word	0x00000c5d
     d74:	200000fa 	.word	0x200000fa
     d78:	20000234 	.word	0x20000234
     d7c:	000008b5 	.word	0x000008b5
     d80:	00000ca9 	.word	0x00000ca9

00000d84 <RFM_setHighPower>:
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
	setMode(RF69_MODE_STANDBY);
}

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
     d84:	b510      	push	{r4, lr}
	_isRFM69HW = onOff;
     d86:	4b10      	ldr	r3, [pc, #64]	; (dc8 <RFM_setHighPower+0x44>)
     d88:	7018      	strb	r0, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	210f      	movs	r1, #15
     d8e:	2b00      	cmp	r3, #0
     d90:	d100      	bne.n	d94 <RFM_setHighPower+0x10>
     d92:	310b      	adds	r1, #11
     d94:	2013      	movs	r0, #19
     d96:	4b0d      	ldr	r3, [pc, #52]	; (dcc <RFM_setHighPower+0x48>)
     d98:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
     d9a:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <RFM_setHighPower+0x44>)
     d9c:	781b      	ldrb	r3, [r3, #0]
     d9e:	2b00      	cmp	r3, #0
     da0:	d00a      	beq.n	db8 <RFM_setHighPower+0x34>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
     da2:	2011      	movs	r0, #17
     da4:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <RFM_setHighPower+0x4c>)
     da6:	4798      	blx	r3
     da8:	211f      	movs	r1, #31
     daa:	4001      	ands	r1, r0
     dac:	2360      	movs	r3, #96	; 0x60
     dae:	4319      	orrs	r1, r3
     db0:	2011      	movs	r0, #17
     db2:	4b06      	ldr	r3, [pc, #24]	; (dcc <RFM_setHighPower+0x48>)
     db4:	4798      	blx	r3
     db6:	e006      	b.n	dc6 <RFM_setHighPower+0x42>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <RFM_setHighPower+0x50>)
     dba:	7819      	ldrb	r1, [r3, #0]
     dbc:	2380      	movs	r3, #128	; 0x80
     dbe:	4319      	orrs	r1, r3
     dc0:	2011      	movs	r0, #17
     dc2:	4b02      	ldr	r3, [pc, #8]	; (dcc <RFM_setHighPower+0x48>)
     dc4:	4798      	blx	r3
}
     dc6:	bd10      	pop	{r4, pc}
     dc8:	20000230 	.word	0x20000230
     dcc:	00000d49 	.word	0x00000d49
     dd0:	00000ccd 	.word	0x00000ccd
     dd4:	200001a0 	.word	0x200001a0

00000dd8 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
     dd8:	b510      	push	{r4, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
     dda:	2800      	cmp	r0, #0
     ddc:	d10a      	bne.n	df4 <setHighPowerRegs+0x1c>
     dde:	e003      	b.n	de8 <setHighPowerRegs+0x10>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
     de0:	205c      	movs	r0, #92	; 0x5c
     de2:	4b08      	ldr	r3, [pc, #32]	; (e04 <setHighPowerRegs+0x2c>)
     de4:	4798      	blx	r3
}
     de6:	e00b      	b.n	e00 <setHighPowerRegs+0x28>
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
     de8:	2155      	movs	r1, #85	; 0x55
     dea:	205a      	movs	r0, #90	; 0x5a
     dec:	4b05      	ldr	r3, [pc, #20]	; (e04 <setHighPowerRegs+0x2c>)
     dee:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
     df0:	2170      	movs	r1, #112	; 0x70
     df2:	e7f5      	b.n	de0 <setHighPowerRegs+0x8>
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
     df4:	215d      	movs	r1, #93	; 0x5d
     df6:	205a      	movs	r0, #90	; 0x5a
     df8:	4b02      	ldr	r3, [pc, #8]	; (e04 <setHighPowerRegs+0x2c>)
     dfa:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
     dfc:	217c      	movs	r1, #124	; 0x7c
     dfe:	e7ef      	b.n	de0 <setHighPowerRegs+0x8>
}
     e00:	bd10      	pop	{r4, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	00000d49 	.word	0x00000d49

00000e08 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
     e08:	b570      	push	{r4, r5, r6, lr}
  if (newMode == _mode)
     e0a:	b286      	uxth	r6, r0
     e0c:	4b31      	ldr	r3, [pc, #196]	; (ed4 <setMode+0xcc>)
     e0e:	881b      	ldrh	r3, [r3, #0]
     e10:	b29b      	uxth	r3, r3
     e12:	429e      	cmp	r6, r3
     e14:	d05d      	beq.n	ed2 <setMode+0xca>
    return;

  switch (newMode) {
     e16:	2804      	cmp	r0, #4
     e18:	d85b      	bhi.n	ed2 <setMode+0xca>
     e1a:	0080      	lsls	r0, r0, #2
     e1c:	4b2e      	ldr	r3, [pc, #184]	; (ed8 <setMode+0xd0>)
     e1e:	581b      	ldr	r3, [r3, r0]
     e20:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
     e22:	2001      	movs	r0, #1
     e24:	4b2d      	ldr	r3, [pc, #180]	; (edc <setMode+0xd4>)
     e26:	4798      	blx	r3
     e28:	231c      	movs	r3, #28
     e2a:	0001      	movs	r1, r0
     e2c:	4399      	bics	r1, r3
     e2e:	230c      	movs	r3, #12
     e30:	4319      	orrs	r1, r3
     e32:	b2c9      	uxtb	r1, r1
     e34:	2001      	movs	r0, #1
     e36:	4b2a      	ldr	r3, [pc, #168]	; (ee0 <setMode+0xd8>)
     e38:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
     e3a:	4b2a      	ldr	r3, [pc, #168]	; (ee4 <setMode+0xdc>)
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	2b00      	cmp	r3, #0
     e40:	d002      	beq.n	e48 <setMode+0x40>
     e42:	2001      	movs	r0, #1
     e44:	4b28      	ldr	r3, [pc, #160]	; (ee8 <setMode+0xe0>)
     e46:	4798      	blx	r3
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
     e48:	4c22      	ldr	r4, [pc, #136]	; (ed4 <setMode+0xcc>)
     e4a:	4d24      	ldr	r5, [pc, #144]	; (edc <setMode+0xd4>)
     e4c:	e037      	b.n	ebe <setMode+0xb6>
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
     e4e:	2001      	movs	r0, #1
     e50:	4b22      	ldr	r3, [pc, #136]	; (edc <setMode+0xd4>)
     e52:	4798      	blx	r3
     e54:	231c      	movs	r3, #28
     e56:	0001      	movs	r1, r0
     e58:	4399      	bics	r1, r3
     e5a:	2310      	movs	r3, #16
     e5c:	4319      	orrs	r1, r3
     e5e:	b2c9      	uxtb	r1, r1
     e60:	2001      	movs	r0, #1
     e62:	4b1f      	ldr	r3, [pc, #124]	; (ee0 <setMode+0xd8>)
     e64:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
     e66:	4b1f      	ldr	r3, [pc, #124]	; (ee4 <setMode+0xdc>)
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d0ec      	beq.n	e48 <setMode+0x40>
     e6e:	2000      	movs	r0, #0
     e70:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <setMode+0xe0>)
     e72:	4798      	blx	r3
     e74:	e7e8      	b.n	e48 <setMode+0x40>
      break;
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
     e76:	2001      	movs	r0, #1
     e78:	4b18      	ldr	r3, [pc, #96]	; (edc <setMode+0xd4>)
     e7a:	4798      	blx	r3
     e7c:	231c      	movs	r3, #28
     e7e:	0001      	movs	r1, r0
     e80:	4399      	bics	r1, r3
     e82:	2308      	movs	r3, #8
     e84:	4319      	orrs	r1, r3
     e86:	b2c9      	uxtb	r1, r1
     e88:	2001      	movs	r0, #1
     e8a:	4b15      	ldr	r3, [pc, #84]	; (ee0 <setMode+0xd8>)
     e8c:	4798      	blx	r3
      break;
     e8e:	e7db      	b.n	e48 <setMode+0x40>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
     e90:	2001      	movs	r0, #1
     e92:	4b12      	ldr	r3, [pc, #72]	; (edc <setMode+0xd4>)
     e94:	4798      	blx	r3
     e96:	231c      	movs	r3, #28
     e98:	0001      	movs	r1, r0
     e9a:	4399      	bics	r1, r3
     e9c:	2304      	movs	r3, #4
     e9e:	4319      	orrs	r1, r3
     ea0:	b2c9      	uxtb	r1, r1
     ea2:	2001      	movs	r0, #1
     ea4:	4b0e      	ldr	r3, [pc, #56]	; (ee0 <setMode+0xd8>)
     ea6:	4798      	blx	r3
      break;
     ea8:	e7ce      	b.n	e48 <setMode+0x40>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
     eaa:	2001      	movs	r0, #1
     eac:	4b0b      	ldr	r3, [pc, #44]	; (edc <setMode+0xd4>)
     eae:	4798      	blx	r3
     eb0:	23e3      	movs	r3, #227	; 0xe3
     eb2:	0001      	movs	r1, r0
     eb4:	4019      	ands	r1, r3
     eb6:	2001      	movs	r0, #1
     eb8:	4b09      	ldr	r3, [pc, #36]	; (ee0 <setMode+0xd8>)
     eba:	4798      	blx	r3
      break;
     ebc:	e7c4      	b.n	e48 <setMode+0x40>
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
     ebe:	8823      	ldrh	r3, [r4, #0]
     ec0:	b29b      	uxth	r3, r3
     ec2:	2b00      	cmp	r3, #0
     ec4:	d103      	bne.n	ece <setMode+0xc6>
     ec6:	2027      	movs	r0, #39	; 0x27
     ec8:	47a8      	blx	r5
     eca:	0603      	lsls	r3, r0, #24
     ecc:	d5f7      	bpl.n	ebe <setMode+0xb6>

  _mode = newMode;
     ece:	4b01      	ldr	r3, [pc, #4]	; (ed4 <setMode+0xcc>)
     ed0:	801e      	strh	r6, [r3, #0]
}
     ed2:	bd70      	pop	{r4, r5, r6, pc}
     ed4:	2000022e 	.word	0x2000022e
     ed8:	00004600 	.word	0x00004600
     edc:	00000ccd 	.word	0x00000ccd
     ee0:	00000d49 	.word	0x00000d49
     ee4:	20000230 	.word	0x20000230
     ee8:	00000dd9 	.word	0x00000dd9

00000eec <receiveBegin>:
	interruptHandler(); 
	_inISR = false;
} // CHANGE //?

// internal function
void receiveBegin() {
     eec:	b510      	push	{r4, lr}
  RFM_DATALEN = 0;
     eee:	2300      	movs	r3, #0
     ef0:	4a11      	ldr	r2, [pc, #68]	; (f38 <receiveBegin+0x4c>)
     ef2:	8013      	strh	r3, [r2, #0]
  RFM_SENDERID = 0;
     ef4:	4a11      	ldr	r2, [pc, #68]	; (f3c <receiveBegin+0x50>)
     ef6:	8013      	strh	r3, [r2, #0]
  TARGETID = 0;
     ef8:	4a11      	ldr	r2, [pc, #68]	; (f40 <receiveBegin+0x54>)
     efa:	8013      	strh	r3, [r2, #0]
  PAYLOADLEN = 0;
     efc:	4a11      	ldr	r2, [pc, #68]	; (f44 <receiveBegin+0x58>)
     efe:	8013      	strh	r3, [r2, #0]
  ACK_REQUESTED = 0;
     f00:	4a11      	ldr	r2, [pc, #68]	; (f48 <receiveBegin+0x5c>)
     f02:	8013      	strh	r3, [r2, #0]
  ACK_RECEIVED = 0;
     f04:	4a11      	ldr	r2, [pc, #68]	; (f4c <receiveBegin+0x60>)
     f06:	8013      	strh	r3, [r2, #0]
  RFM_RSSI = 0;
     f08:	4a11      	ldr	r2, [pc, #68]	; (f50 <receiveBegin+0x64>)
     f0a:	8013      	strh	r3, [r2, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
     f0c:	2028      	movs	r0, #40	; 0x28
     f0e:	4b11      	ldr	r3, [pc, #68]	; (f54 <receiveBegin+0x68>)
     f10:	4798      	blx	r3
     f12:	0743      	lsls	r3, r0, #29
     f14:	d508      	bpl.n	f28 <receiveBegin+0x3c>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
     f16:	203d      	movs	r0, #61	; 0x3d
     f18:	4b0e      	ldr	r3, [pc, #56]	; (f54 <receiveBegin+0x68>)
     f1a:	4798      	blx	r3
     f1c:	2304      	movs	r3, #4
     f1e:	4318      	orrs	r0, r3
     f20:	b2c1      	uxtb	r1, r0
     f22:	203d      	movs	r0, #61	; 0x3d
     f24:	4b0c      	ldr	r3, [pc, #48]	; (f58 <receiveBegin+0x6c>)
     f26:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
     f28:	2140      	movs	r1, #64	; 0x40
     f2a:	2025      	movs	r0, #37	; 0x25
     f2c:	4b0a      	ldr	r3, [pc, #40]	; (f58 <receiveBegin+0x6c>)
     f2e:	4798      	blx	r3
  setMode(RF69_MODE_RX);
     f30:	2003      	movs	r0, #3
     f32:	4b0a      	ldr	r3, [pc, #40]	; (f5c <receiveBegin+0x70>)
     f34:	4798      	blx	r3
}
     f36:	bd10      	pop	{r4, pc}
     f38:	200001a6 	.word	0x200001a6
     f3c:	20000196 	.word	0x20000196
     f40:	2000022c 	.word	0x2000022c
     f44:	20000228 	.word	0x20000228
     f48:	2000022a 	.word	0x2000022a
     f4c:	200001a4 	.word	0x200001a4
     f50:	20000240 	.word	0x20000240
     f54:	00000ccd 	.word	0x00000ccd
     f58:	00000d49 	.word	0x00000d49
     f5c:	00000e09 	.word	0x00000e09

00000f60 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
     f62:	b083      	sub	sp, #12
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
     f64:	4b47      	ldr	r3, [pc, #284]	; (1084 <interruptHandler+0x124>)
     f66:	881b      	ldrh	r3, [r3, #0]
     f68:	b29b      	uxth	r3, r3
     f6a:	2b03      	cmp	r3, #3
     f6c:	d000      	beq.n	f70 <interruptHandler+0x10>
     f6e:	e083      	b.n	1078 <interruptHandler+0x118>
     f70:	2028      	movs	r0, #40	; 0x28
     f72:	4b45      	ldr	r3, [pc, #276]	; (1088 <interruptHandler+0x128>)
     f74:	4798      	blx	r3
     f76:	0743      	lsls	r3, r0, #29
     f78:	d400      	bmi.n	f7c <interruptHandler+0x1c>
     f7a:	e07d      	b.n	1078 <interruptHandler+0x118>
  {
    setMode(RF69_MODE_STANDBY);
     f7c:	2001      	movs	r0, #1
     f7e:	4b43      	ldr	r3, [pc, #268]	; (108c <interruptHandler+0x12c>)
     f80:	4798      	blx	r3
    selectrf();
     f82:	4b43      	ldr	r3, [pc, #268]	; (1090 <interruptHandler+0x130>)
     f84:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
     f86:	4e43      	ldr	r6, [pc, #268]	; (1094 <interruptHandler+0x134>)
     f88:	4a43      	ldr	r2, [pc, #268]	; (1098 <interruptHandler+0x138>)
     f8a:	2100      	movs	r1, #0
     f8c:	0030      	movs	r0, r6
     f8e:	4d43      	ldr	r5, [pc, #268]	; (109c <interruptHandler+0x13c>)
     f90:	47a8      	blx	r5
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
     f92:	4c43      	ldr	r4, [pc, #268]	; (10a0 <interruptHandler+0x140>)
     f94:	0022      	movs	r2, r4
     f96:	2100      	movs	r1, #0
     f98:	0030      	movs	r0, r6
     f9a:	47a8      	blx	r5
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
     f9c:	8823      	ldrh	r3, [r4, #0]
     f9e:	b29b      	uxth	r3, r3
     fa0:	2242      	movs	r2, #66	; 0x42
     fa2:	2b42      	cmp	r3, #66	; 0x42
     fa4:	d802      	bhi.n	fac <interruptHandler+0x4c>
     fa6:	4b3e      	ldr	r3, [pc, #248]	; (10a0 <interruptHandler+0x140>)
     fa8:	881a      	ldrh	r2, [r3, #0]
     faa:	b292      	uxth	r2, r2
     fac:	4b3c      	ldr	r3, [pc, #240]	; (10a0 <interruptHandler+0x140>)
     fae:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
     fb0:	4a3c      	ldr	r2, [pc, #240]	; (10a4 <interruptHandler+0x144>)
     fb2:	2100      	movs	r1, #0
     fb4:	4837      	ldr	r0, [pc, #220]	; (1094 <interruptHandler+0x134>)
     fb6:	4b39      	ldr	r3, [pc, #228]	; (109c <interruptHandler+0x13c>)
     fb8:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
     fba:	4b3b      	ldr	r3, [pc, #236]	; (10a8 <interruptHandler+0x148>)
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d10b      	bne.n	fda <interruptHandler+0x7a>
     fc2:	4b3a      	ldr	r3, [pc, #232]	; (10ac <interruptHandler+0x14c>)
     fc4:	781a      	ldrb	r2, [r3, #0]
     fc6:	4b37      	ldr	r3, [pc, #220]	; (10a4 <interruptHandler+0x144>)
     fc8:	881b      	ldrh	r3, [r3, #0]
     fca:	b29b      	uxth	r3, r3
     fcc:	429a      	cmp	r2, r3
     fce:	d004      	beq.n	fda <interruptHandler+0x7a>
     fd0:	4b34      	ldr	r3, [pc, #208]	; (10a4 <interruptHandler+0x144>)
     fd2:	881b      	ldrh	r3, [r3, #0]
     fd4:	b29b      	uxth	r3, r3
     fd6:	2bff      	cmp	r3, #255	; 0xff
     fd8:	d104      	bne.n	fe4 <interruptHandler+0x84>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
     fda:	4b31      	ldr	r3, [pc, #196]	; (10a0 <interruptHandler+0x140>)
     fdc:	881b      	ldrh	r3, [r3, #0]
     fde:	b29b      	uxth	r3, r3
     fe0:	2b02      	cmp	r3, #2
     fe2:	d807      	bhi.n	ff4 <interruptHandler+0x94>
    {
      PAYLOADLEN = 0;
     fe4:	2200      	movs	r2, #0
     fe6:	4b2e      	ldr	r3, [pc, #184]	; (10a0 <interruptHandler+0x140>)
     fe8:	801a      	strh	r2, [r3, #0]
      unselect();
     fea:	4b31      	ldr	r3, [pc, #196]	; (10b0 <interruptHandler+0x150>)
     fec:	4798      	blx	r3
      receiveBegin();
     fee:	4b31      	ldr	r3, [pc, #196]	; (10b4 <interruptHandler+0x154>)
     ff0:	4798      	blx	r3
     ff2:	e045      	b.n	1080 <interruptHandler+0x120>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
     ff4:	4b2a      	ldr	r3, [pc, #168]	; (10a0 <interruptHandler+0x140>)
     ff6:	881b      	ldrh	r3, [r3, #0]
     ff8:	3b03      	subs	r3, #3
     ffa:	b29b      	uxth	r3, r3
     ffc:	4d2e      	ldr	r5, [pc, #184]	; (10b8 <interruptHandler+0x158>)
     ffe:	802b      	strh	r3, [r5, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    1000:	4f24      	ldr	r7, [pc, #144]	; (1094 <interruptHandler+0x134>)
    1002:	4a2e      	ldr	r2, [pc, #184]	; (10bc <interruptHandler+0x15c>)
    1004:	2100      	movs	r1, #0
    1006:	0038      	movs	r0, r7
    1008:	4e24      	ldr	r6, [pc, #144]	; (109c <interruptHandler+0x13c>)
    100a:	47b0      	blx	r6
    uint8_t CTLbyte = 0;
    100c:	466b      	mov	r3, sp
    100e:	1ddc      	adds	r4, r3, #7
    1010:	2300      	movs	r3, #0
    1012:	7023      	strb	r3, [r4, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    1014:	0022      	movs	r2, r4
    1016:	2100      	movs	r1, #0
    1018:	0038      	movs	r0, r7
    101a:	47b0      	blx	r6

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    101c:	7823      	ldrb	r3, [r4, #0]
    101e:	227f      	movs	r2, #127	; 0x7f
    1020:	0019      	movs	r1, r3
    1022:	4391      	bics	r1, r2
    1024:	4a26      	ldr	r2, [pc, #152]	; (10c0 <interruptHandler+0x160>)
    1026:	8011      	strh	r1, [r2, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    1028:	2240      	movs	r2, #64	; 0x40
    102a:	4013      	ands	r3, r2
    102c:	4a25      	ldr	r2, [pc, #148]	; (10c4 <interruptHandler+0x164>)
    102e:	8013      	strh	r3, [r2, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    1030:	882b      	ldrh	r3, [r5, #0]
    1032:	b29b      	uxth	r3, r3
    1034:	2b00      	cmp	r3, #0
    1036:	d00f      	beq.n	1058 <interruptHandler+0xf8>
    1038:	2400      	movs	r4, #0
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    103a:	4f23      	ldr	r7, [pc, #140]	; (10c8 <interruptHandler+0x168>)
    103c:	4d15      	ldr	r5, [pc, #84]	; (1094 <interruptHandler+0x134>)
    103e:	4e17      	ldr	r6, [pc, #92]	; (109c <interruptHandler+0x13c>)
    1040:	0062      	lsls	r2, r4, #1
    1042:	19d2      	adds	r2, r2, r7
    1044:	2100      	movs	r1, #0
    1046:	0028      	movs	r0, r5
    1048:	47b0      	blx	r6
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    104a:	3401      	adds	r4, #1
    104c:	b2e4      	uxtb	r4, r4
    104e:	4b1a      	ldr	r3, [pc, #104]	; (10b8 <interruptHandler+0x158>)
    1050:	881b      	ldrh	r3, [r3, #0]
    1052:	b29b      	uxth	r3, r3
    1054:	42a3      	cmp	r3, r4
    1056:	d8f3      	bhi.n	1040 <interruptHandler+0xe0>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    1058:	4b17      	ldr	r3, [pc, #92]	; (10b8 <interruptHandler+0x158>)
    105a:	881b      	ldrh	r3, [r3, #0]
    105c:	b29b      	uxth	r3, r3
    105e:	2b3c      	cmp	r3, #60	; 0x3c
    1060:	d805      	bhi.n	106e <interruptHandler+0x10e>
    1062:	4b15      	ldr	r3, [pc, #84]	; (10b8 <interruptHandler+0x158>)
    1064:	881b      	ldrh	r3, [r3, #0]
    1066:	005b      	lsls	r3, r3, #1
    1068:	2100      	movs	r1, #0
    106a:	4a17      	ldr	r2, [pc, #92]	; (10c8 <interruptHandler+0x168>)
    106c:	5299      	strh	r1, [r3, r2]
    unselect();
    106e:	4b10      	ldr	r3, [pc, #64]	; (10b0 <interruptHandler+0x150>)
    1070:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    1072:	2003      	movs	r0, #3
    1074:	4b05      	ldr	r3, [pc, #20]	; (108c <interruptHandler+0x12c>)
    1076:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    1078:	4b14      	ldr	r3, [pc, #80]	; (10cc <interruptHandler+0x16c>)
    107a:	4798      	blx	r3
    107c:	4b14      	ldr	r3, [pc, #80]	; (10d0 <interruptHandler+0x170>)
    107e:	8018      	strh	r0, [r3, #0]
}
    1080:	b003      	add	sp, #12
    1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1084:	2000022e 	.word	0x2000022e
    1088:	00000ccd 	.word	0x00000ccd
    108c:	00000e09 	.word	0x00000e09
    1090:	00000c5d 	.word	0x00000c5d
    1094:	20000234 	.word	0x20000234
    1098:	200000fa 	.word	0x200000fa
    109c:	000008b5 	.word	0x000008b5
    10a0:	20000228 	.word	0x20000228
    10a4:	2000022c 	.word	0x2000022c
    10a8:	200001a8 	.word	0x200001a8
    10ac:	200001a2 	.word	0x200001a2
    10b0:	00000ca9 	.word	0x00000ca9
    10b4:	00000eed 	.word	0x00000eed
    10b8:	200001a6 	.word	0x200001a6
    10bc:	20000196 	.word	0x20000196
    10c0:	200001a4 	.word	0x200001a4
    10c4:	2000022a 	.word	0x2000022a
    10c8:	200001ac 	.word	0x200001ac
    10cc:	00000d1d 	.word	0x00000d1d
    10d0:	20000240 	.word	0x20000240

000010d4 <isr0>:

// internal function
void isr0()
{ 
    10d4:	b510      	push	{r4, lr}
	_inISR = true; 
    10d6:	4c04      	ldr	r4, [pc, #16]	; (10e8 <isr0+0x14>)
    10d8:	2301      	movs	r3, #1
    10da:	7023      	strb	r3, [r4, #0]
	interruptHandler(); 
    10dc:	4b03      	ldr	r3, [pc, #12]	; (10ec <isr0+0x18>)
    10de:	4798      	blx	r3
	_inISR = false;
    10e0:	2300      	movs	r3, #0
    10e2:	7023      	strb	r3, [r4, #0]
} // CHANGE //?
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	200001a1 	.word	0x200001a1
    10ec:	00000f61 	.word	0x00000f61

000010f0 <RFM_encrypt>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    10f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f2:	464f      	mov	r7, r9
    10f4:	b480      	push	{r7}
    10f6:	4681      	mov	r9, r0
  setMode(RF69_MODE_STANDBY);
    10f8:	2001      	movs	r0, #1
    10fa:	4b15      	ldr	r3, [pc, #84]	; (1150 <RFM_encrypt+0x60>)
    10fc:	4798      	blx	r3
  if (key != 0)
    10fe:	464b      	mov	r3, r9
    1100:	2b00      	cmp	r3, #0
    1102:	d014      	beq.n	112e <RFM_encrypt+0x3e>
  {
    selectrf();
    1104:	4b13      	ldr	r3, [pc, #76]	; (1154 <RFM_encrypt+0x64>)
    1106:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    1108:	4a13      	ldr	r2, [pc, #76]	; (1158 <RFM_encrypt+0x68>)
    110a:	21be      	movs	r1, #190	; 0xbe
    110c:	4813      	ldr	r0, [pc, #76]	; (115c <RFM_encrypt+0x6c>)
    110e:	4b14      	ldr	r3, [pc, #80]	; (1160 <RFM_encrypt+0x70>)
    1110:	4798      	blx	r3
    1112:	464c      	mov	r4, r9
    1114:	464d      	mov	r5, r9
    1116:	3510      	adds	r5, #16
    for (uint8_t i = 0; i < 16; i++)
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    1118:	4e0f      	ldr	r6, [pc, #60]	; (1158 <RFM_encrypt+0x68>)
    111a:	4f11      	ldr	r7, [pc, #68]	; (1160 <RFM_encrypt+0x70>)
    111c:	7821      	ldrb	r1, [r4, #0]
    111e:	0032      	movs	r2, r6
    1120:	480e      	ldr	r0, [pc, #56]	; (115c <RFM_encrypt+0x6c>)
    1122:	47b8      	blx	r7
    1124:	3401      	adds	r4, #1
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    1126:	42ac      	cmp	r4, r5
    1128:	d1f8      	bne.n	111c <RFM_encrypt+0x2c>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    112a:	4b0e      	ldr	r3, [pc, #56]	; (1164 <RFM_encrypt+0x74>)
    112c:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    112e:	203d      	movs	r0, #61	; 0x3d
    1130:	4b0d      	ldr	r3, [pc, #52]	; (1168 <RFM_encrypt+0x78>)
    1132:	4798      	blx	r3
    1134:	2301      	movs	r3, #1
    1136:	4398      	bics	r0, r3
    1138:	4649      	mov	r1, r9
    113a:	1e4b      	subs	r3, r1, #1
    113c:	4199      	sbcs	r1, r3
    113e:	4301      	orrs	r1, r0
    1140:	b2c9      	uxtb	r1, r1
    1142:	203d      	movs	r0, #61	; 0x3d
    1144:	4b09      	ldr	r3, [pc, #36]	; (116c <RFM_encrypt+0x7c>)
    1146:	4798      	blx	r3
}
    1148:	bc04      	pop	{r2}
    114a:	4691      	mov	r9, r2
    114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00000e09 	.word	0x00000e09
    1154:	00000c5d 	.word	0x00000c5d
    1158:	200000fa 	.word	0x200000fa
    115c:	20000234 	.word	0x20000234
    1160:	000008b5 	.word	0x000008b5
    1164:	00000ca9 	.word	0x00000ca9
    1168:	00000ccd 	.word	0x00000ccd
    116c:	00000d49 	.word	0x00000d49

00001170 <RFM_initialize>:
	_powerLevel = 31;
	_isRFM69HW = false;
}

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    1170:	b5f0      	push	{r4, r5, r6, r7, lr}
    1172:	4657      	mov	r7, sl
    1174:	464e      	mov	r6, r9
    1176:	4645      	mov	r5, r8
    1178:	b4e0      	push	{r5, r6, r7}
    117a:	b090      	sub	sp, #64	; 0x40
    117c:	0004      	movs	r4, r0
    117e:	9101      	str	r1, [sp, #4]
    1180:	0015      	movs	r5, r2
  RFM69();
    1182:	4b80      	ldr	r3, [pc, #512]	; (1384 <RFM_initialize+0x214>)
    1184:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    1186:	ab04      	add	r3, sp, #16
    1188:	2201      	movs	r2, #1
    118a:	701a      	strb	r2, [r3, #0]
    118c:	2104      	movs	r1, #4
    118e:	7059      	strb	r1, [r3, #1]
    1190:	2002      	movs	r0, #2
    1192:	7098      	strb	r0, [r3, #2]
    1194:	2200      	movs	r2, #0
    1196:	70da      	strb	r2, [r3, #3]
    1198:	3203      	adds	r2, #3
    119a:	711a      	strb	r2, [r3, #4]
    119c:	7158      	strb	r0, [r3, #5]
    119e:	7199      	strb	r1, [r3, #6]
    11a0:	313c      	adds	r1, #60	; 0x3c
    11a2:	71d9      	strb	r1, [r3, #7]
    11a4:	393b      	subs	r1, #59	; 0x3b
    11a6:	7219      	strb	r1, [r3, #8]
    11a8:	725a      	strb	r2, [r3, #9]
    11aa:	3203      	adds	r2, #3
    11ac:	729a      	strb	r2, [r3, #10]
    11ae:	322d      	adds	r2, #45	; 0x2d
    11b0:	72da      	strb	r2, [r3, #11]
    11b2:	3a2c      	subs	r2, #44	; 0x2c
    11b4:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    11b6:	2c1f      	cmp	r4, #31
    11b8:	d100      	bne.n	11bc <RFM_initialize+0x4c>
    11ba:	e0c0      	b.n	133e <RFM_initialize+0x1ce>
    11bc:	2c2b      	cmp	r4, #43	; 0x2b
    11be:	d100      	bne.n	11c2 <RFM_initialize+0x52>
    11c0:	e0b6      	b.n	1330 <RFM_initialize+0x1c0>
    11c2:	2c56      	cmp	r4, #86	; 0x56
    11c4:	d000      	beq.n	11c8 <RFM_initialize+0x58>
    11c6:	e0c1      	b.n	134c <RFM_initialize+0x1dc>
    11c8:	e0c7      	b.n	135a <RFM_initialize+0x1ea>

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    11ca:	ab04      	add	r3, sp, #16
    11cc:	73da      	strb	r2, [r3, #15]
    11ce:	2209      	movs	r2, #9
    11d0:	741a      	strb	r2, [r3, #16]
    11d2:	2100      	movs	r1, #0
    11d4:	7459      	strb	r1, [r3, #17]
    11d6:	3210      	adds	r2, #16
    11d8:	749a      	strb	r2, [r3, #18]
    11da:	3229      	adds	r2, #41	; 0x29
    11dc:	4691      	mov	r9, r2
    11de:	74da      	strb	r2, [r3, #19]
    11e0:	2225      	movs	r2, #37	; 0x25
    11e2:	4690      	mov	r8, r2
    11e4:	751a      	strb	r2, [r3, #20]
    11e6:	2240      	movs	r2, #64	; 0x40
    11e8:	755a      	strb	r2, [r3, #21]
    11ea:	2626      	movs	r6, #38	; 0x26
    11ec:	759e      	strb	r6, [r3, #22]
    11ee:	3a39      	subs	r2, #57	; 0x39
    11f0:	75da      	strb	r2, [r3, #23]
    11f2:	2728      	movs	r7, #40	; 0x28
    11f4:	761f      	strb	r7, [r3, #24]
    11f6:	3209      	adds	r2, #9
    11f8:	765a      	strb	r2, [r3, #25]
    11fa:	2429      	movs	r4, #41	; 0x29
    11fc:	769c      	strb	r4, [r3, #26]
    11fe:	32cc      	adds	r2, #204	; 0xcc
    1200:	76da      	strb	r2, [r3, #27]
    1202:	3aae      	subs	r2, #174	; 0xae
    1204:	771a      	strb	r2, [r3, #28]
    1206:	325a      	adds	r2, #90	; 0x5a
    1208:	775a      	strb	r2, [r3, #29]
    120a:	3a59      	subs	r2, #89	; 0x59
    120c:	779a      	strb	r2, [r3, #30]
    120e:	3a02      	subs	r2, #2
    1210:	4694      	mov	ip, r2
    1212:	77da      	strb	r2, [r3, #31]
    1214:	2030      	movs	r0, #48	; 0x30
    1216:	2220      	movs	r2, #32
    1218:	5498      	strb	r0, [r3, r2]
    121a:	3201      	adds	r2, #1
    121c:	549d      	strb	r5, [r3, r2]
    121e:	3216      	adds	r2, #22
    1220:	2522      	movs	r5, #34	; 0x22
    1222:	555a      	strb	r2, [r3, r5]
    1224:	2290      	movs	r2, #144	; 0x90
    1226:	3501      	adds	r5, #1
    1228:	555a      	strb	r2, [r3, r5]
    122a:	2238      	movs	r2, #56	; 0x38
    122c:	3501      	adds	r5, #1
    122e:	555a      	strb	r2, [r3, r5]
    1230:	4642      	mov	r2, r8
    1232:	464d      	mov	r5, r9
    1234:	549d      	strb	r5, [r3, r2]
    1236:	253c      	movs	r5, #60	; 0x3c
    1238:	559d      	strb	r5, [r3, r6]
    123a:	3669      	adds	r6, #105	; 0x69
    123c:	3d15      	subs	r5, #21
    123e:	555e      	strb	r6, [r3, r5]
    1240:	3516      	adds	r5, #22
    1242:	55dd      	strb	r5, [r3, r7]
    1244:	3d2b      	subs	r5, #43	; 0x2b
    1246:	551d      	strb	r5, [r3, r4]
    1248:	355d      	adds	r5, #93	; 0x5d
    124a:	3401      	adds	r4, #1
    124c:	551d      	strb	r5, [r3, r4]
    124e:	3401      	adds	r4, #1
    1250:	5518      	strb	r0, [r3, r4]
    1252:	34d4      	adds	r4, #212	; 0xd4
    1254:	3804      	subs	r0, #4
    1256:	541c      	strb	r4, [r3, r0]
    1258:	4662      	mov	r2, ip
    125a:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    125c:	4b4a      	ldr	r3, [pc, #296]	; (1388 <RFM_initialize+0x218>)
    125e:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    1260:	4b4a      	ldr	r3, [pc, #296]	; (138c <RFM_initialize+0x21c>)
    1262:	4798      	blx	r3
  configure_port_pins();
    1264:	4b4a      	ldr	r3, [pc, #296]	; (1390 <RFM_initialize+0x220>)
    1266:	4798      	blx	r3
  configure_extint_channel();
    1268:	4b4a      	ldr	r3, [pc, #296]	; (1394 <RFM_initialize+0x224>)
    126a:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    126c:	4b4a      	ldr	r3, [pc, #296]	; (1398 <RFM_initialize+0x228>)
    126e:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    1270:	2232      	movs	r2, #50	; 0x32
    1272:	ab02      	add	r3, sp, #8
    1274:	71da      	strb	r2, [r3, #7]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    1276:	4d49      	ldr	r5, [pc, #292]	; (139c <RFM_initialize+0x22c>)
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    1278:	4c49      	ldr	r4, [pc, #292]	; (13a0 <RFM_initialize+0x230>)
    127a:	4f4a      	ldr	r7, [pc, #296]	; (13a4 <RFM_initialize+0x234>)


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
  volatile uint8_t timeout = 50;
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    127c:	21aa      	movs	r1, #170	; 0xaa
    127e:	202f      	movs	r0, #47	; 0x2f
    1280:	47a8      	blx	r5
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    1282:	202f      	movs	r0, #47	; 0x2f
    1284:	47a0      	blx	r4
    1286:	28aa      	cmp	r0, #170	; 0xaa
    1288:	d006      	beq.n	1298 <RFM_initialize+0x128>
    128a:	47b8      	blx	r7
    128c:	ab02      	add	r3, sp, #8
    128e:	3307      	adds	r3, #7
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	b2db      	uxtb	r3, r3
    1294:	4298      	cmp	r0, r3
    1296:	d3f1      	bcc.n	127c <RFM_initialize+0x10c>
  
  reset_millis(); //start = millis(); // CHANGE // 
    1298:	4b3f      	ldr	r3, [pc, #252]	; (1398 <RFM_initialize+0x228>)
    129a:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    129c:	4d3f      	ldr	r5, [pc, #252]	; (139c <RFM_initialize+0x22c>)
    129e:	4c40      	ldr	r4, [pc, #256]	; (13a0 <RFM_initialize+0x230>)
    12a0:	4f40      	ldr	r7, [pc, #256]	; (13a4 <RFM_initialize+0x234>)
    12a2:	2155      	movs	r1, #85	; 0x55
    12a4:	202f      	movs	r0, #47	; 0x2f
    12a6:	47a8      	blx	r5
    12a8:	202f      	movs	r0, #47	; 0x2f
    12aa:	47a0      	blx	r4
    12ac:	2855      	cmp	r0, #85	; 0x55
    12ae:	d05b      	beq.n	1368 <RFM_initialize+0x1f8>
    12b0:	47b8      	blx	r7
    12b2:	ab02      	add	r3, sp, #8
    12b4:	3307      	adds	r3, #7
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	b2db      	uxtb	r3, r3
    12ba:	4298      	cmp	r0, r3
    12bc:	d3f1      	bcc.n	12a2 <RFM_initialize+0x132>
    12be:	e053      	b.n	1368 <RFM_initialize+0x1f8>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    12c0:	005b      	lsls	r3, r3, #1
    12c2:	18eb      	adds	r3, r5, r3
    12c4:	7859      	ldrb	r1, [r3, #1]
    12c6:	47b8      	blx	r7
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    12c8:	3401      	adds	r4, #1
    12ca:	b2e4      	uxtb	r4, r4
    12cc:	0023      	movs	r3, r4
    12ce:	0062      	lsls	r2, r4, #1
    12d0:	5d50      	ldrb	r0, [r2, r5]
    12d2:	28ff      	cmp	r0, #255	; 0xff
    12d4:	d1f4      	bne.n	12c0 <RFM_initialize+0x150>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    12d6:	2000      	movs	r0, #0
    12d8:	4b33      	ldr	r3, [pc, #204]	; (13a8 <RFM_initialize+0x238>)
    12da:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    12dc:	4b33      	ldr	r3, [pc, #204]	; (13ac <RFM_initialize+0x23c>)
    12de:	7818      	ldrb	r0, [r3, #0]
    12e0:	b2c0      	uxtb	r0, r0
    12e2:	4b33      	ldr	r3, [pc, #204]	; (13b0 <RFM_initialize+0x240>)
    12e4:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    12e6:	2001      	movs	r0, #1
    12e8:	4b32      	ldr	r3, [pc, #200]	; (13b4 <RFM_initialize+0x244>)
    12ea:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    12ec:	4b2a      	ldr	r3, [pc, #168]	; (1398 <RFM_initialize+0x228>)
    12ee:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    12f0:	4d2b      	ldr	r5, [pc, #172]	; (13a0 <RFM_initialize+0x230>)
    12f2:	4f2c      	ldr	r7, [pc, #176]	; (13a4 <RFM_initialize+0x234>)
    12f4:	ab02      	add	r3, sp, #8
    12f6:	1ddc      	adds	r4, r3, #7
    12f8:	2027      	movs	r0, #39	; 0x27
    12fa:	47a8      	blx	r5
    12fc:	0603      	lsls	r3, r0, #24
    12fe:	d404      	bmi.n	130a <RFM_initialize+0x19a>
    1300:	47b8      	blx	r7
    1302:	7823      	ldrb	r3, [r4, #0]
    1304:	b2db      	uxtb	r3, r3
    1306:	4298      	cmp	r0, r3
    1308:	d3f6      	bcc.n	12f8 <RFM_initialize+0x188>
  if (millis() >= timeout) // CHANGE //
    130a:	4b26      	ldr	r3, [pc, #152]	; (13a4 <RFM_initialize+0x234>)
    130c:	4798      	blx	r3
    130e:	ab02      	add	r3, sp, #8
    1310:	3307      	adds	r3, #7
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	b2db      	uxtb	r3, r3
    return false;
    1316:	2200      	movs	r2, #0

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  reset_millis(); //start = get_timer();
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
  if (millis() >= timeout) // CHANGE //
    1318:	4298      	cmp	r0, r3
    131a:	d22b      	bcs.n	1374 <RFM_initialize+0x204>
    return false;
  _inISR = false;
    131c:	4b26      	ldr	r3, [pc, #152]	; (13b8 <RFM_initialize+0x248>)
    131e:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    1320:	4b26      	ldr	r3, [pc, #152]	; (13bc <RFM_initialize+0x24c>)
    1322:	4798      	blx	r3

  _address = nodeID;
    1324:	4b26      	ldr	r3, [pc, #152]	; (13c0 <RFM_initialize+0x250>)
    1326:	466a      	mov	r2, sp
    1328:	7912      	ldrb	r2, [r2, #4]
    132a:	701a      	strb	r2, [r3, #0]
  return true;
    132c:	2201      	movs	r2, #1
    132e:	e021      	b.n	1374 <RFM_initialize+0x204>

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    1330:	ab04      	add	r3, sp, #16
    1332:	226c      	movs	r2, #108	; 0x6c
    1334:	735a      	strb	r2, [r3, #13]
    1336:	3a64      	subs	r2, #100	; 0x64
    1338:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    133a:	3238      	adds	r2, #56	; 0x38
    133c:	e745      	b.n	11ca <RFM_initialize+0x5a>

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    133e:	ab04      	add	r3, sp, #16
    1340:	224e      	movs	r2, #78	; 0x4e
    1342:	735a      	strb	r2, [r3, #13]
    1344:	3a46      	subs	r2, #70	; 0x46
    1346:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1348:	32b8      	adds	r2, #184	; 0xb8
    134a:	e73e      	b.n	11ca <RFM_initialize+0x5a>

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    134c:	ab04      	add	r3, sp, #16
    134e:	22e4      	movs	r2, #228	; 0xe4
    1350:	735a      	strb	r2, [r3, #13]
    1352:	3adc      	subs	r2, #220	; 0xdc
    1354:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1356:	32b8      	adds	r2, #184	; 0xb8
    1358:	e737      	b.n	11ca <RFM_initialize+0x5a>

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    135a:	ab04      	add	r3, sp, #16
    135c:	22d9      	movs	r2, #217	; 0xd9
    135e:	735a      	strb	r2, [r3, #13]
    1360:	3ad1      	subs	r2, #209	; 0xd1
    1362:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    1364:	2200      	movs	r2, #0
    1366:	e730      	b.n	11ca <RFM_initialize+0x5a>
    1368:	2001      	movs	r0, #1
    136a:	2300      	movs	r3, #0
    136c:	2400      	movs	r4, #0
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    136e:	ad04      	add	r5, sp, #16
    1370:	4f0a      	ldr	r7, [pc, #40]	; (139c <RFM_initialize+0x22c>)
    1372:	e7a5      	b.n	12c0 <RFM_initialize+0x150>

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //

  _address = nodeID;
  return true;
}
    1374:	0010      	movs	r0, r2
    1376:	b010      	add	sp, #64	; 0x40
    1378:	bc1c      	pop	{r2, r3, r4}
    137a:	4690      	mov	r8, r2
    137c:	4699      	mov	r9, r3
    137e:	46a2      	mov	sl, r4
    1380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	00000c35 	.word	0x00000c35
    1388:	00000ad1 	.word	0x00000ad1
    138c:	00000ba9 	.word	0x00000ba9
    1390:	00000a5d 	.word	0x00000a5d
    1394:	00000a7d 	.word	0x00000a7d
    1398:	00000bf5 	.word	0x00000bf5
    139c:	00000d49 	.word	0x00000d49
    13a0:	00000ccd 	.word	0x00000ccd
    13a4:	00000c15 	.word	0x00000c15
    13a8:	000010f1 	.word	0x000010f1
    13ac:	20000230 	.word	0x20000230
    13b0:	00000d85 	.word	0x00000d85
    13b4:	00000e09 	.word	0x00000e09
    13b8:	200001a1 	.word	0x200001a1
    13bc:	00000aad 	.word	0x00000aad
    13c0:	200001a2 	.word	0x200001a2

000013c4 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
    13c4:	b510      	push	{r4, lr}
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    13c6:	4b03      	ldr	r3, [pc, #12]	; (13d4 <ui_wakeup_handler+0x10>)
    13c8:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13ca:	2280      	movs	r2, #128	; 0x80
    13cc:	0292      	lsls	r2, r2, #10
    13ce:	4b02      	ldr	r3, [pc, #8]	; (13d8 <ui_wakeup_handler+0x14>)
    13d0:	615a      	str	r2, [r3, #20]
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
	LED_On(LED_0_PIN);
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	00002fc5 	.word	0x00002fc5
    13d8:	41004400 	.word	0x41004400

000013dc <ui_init>:


void ui_init(void)
{
    13dc:	b510      	push	{r4, lr}
    13de:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    13e0:	ac01      	add	r4, sp, #4
    13e2:	0020      	movs	r0, r4
    13e4:	4b0e      	ldr	r3, [pc, #56]	; (1420 <ui_init+0x44>)
    13e6:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
    13e8:	230f      	movs	r3, #15
    13ea:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
    13ec:	2300      	movs	r3, #0
    13ee:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
    13f0:	3301      	adds	r3, #1
    13f2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.filter_input_signal = true;
    13f4:	72a3      	strb	r3, [r4, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
    13f6:	3301      	adds	r3, #1
    13f8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    13fa:	0021      	movs	r1, r4
    13fc:	200f      	movs	r0, #15
    13fe:	4b09      	ldr	r3, [pc, #36]	; (1424 <ui_init+0x48>)
    1400:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
    1402:	2200      	movs	r2, #0
    1404:	210f      	movs	r1, #15
    1406:	4808      	ldr	r0, [pc, #32]	; (1428 <ui_init+0x4c>)
    1408:	4b08      	ldr	r3, [pc, #32]	; (142c <ui_init+0x50>)
    140a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    140c:	2100      	movs	r1, #0
    140e:	200f      	movs	r0, #15
    1410:	4b07      	ldr	r3, [pc, #28]	; (1430 <ui_init+0x54>)
    1412:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1414:	2280      	movs	r2, #128	; 0x80
    1416:	0292      	lsls	r2, r2, #10
    1418:	4b06      	ldr	r3, [pc, #24]	; (1434 <ui_init+0x58>)
    141a:	619a      	str	r2, [r3, #24]

	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
}
    141c:	b004      	add	sp, #16
    141e:	bd10      	pop	{r4, pc}
    1420:	00001ecd 	.word	0x00001ecd
    1424:	00001ee1 	.word	0x00001ee1
    1428:	000013c5 	.word	0x000013c5
    142c:	00001d75 	.word	0x00001d75
    1430:	00001da1 	.word	0x00001da1
    1434:	41004400 	.word	0x41004400

00001438 <ui_powerdown>:
    1438:	2280      	movs	r2, #128	; 0x80
    143a:	0292      	lsls	r2, r2, #10
    143c:	4b01      	ldr	r3, [pc, #4]	; (1444 <ui_powerdown+0xc>)
    143e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    1440:	4770      	bx	lr
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	41004400 	.word	0x41004400

00001448 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    1448:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    144a:	2100      	movs	r1, #0
    144c:	200f      	movs	r0, #15
    144e:	4b01      	ldr	r3, [pc, #4]	; (1454 <ui_wakeup_enable+0xc>)
    1450:	4798      	blx	r3
}
    1452:	bd10      	pop	{r4, pc}
    1454:	00001da1 	.word	0x00001da1

00001458 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    1458:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    145a:	2100      	movs	r1, #0
    145c:	200f      	movs	r0, #15
    145e:	4b01      	ldr	r3, [pc, #4]	; (1464 <ui_wakeup_disable+0xc>)
    1460:	4798      	blx	r3
}
    1462:	bd10      	pop	{r4, pc}
    1464:	00001dc1 	.word	0x00001dc1

00001468 <ui_wakeup>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1468:	2280      	movs	r2, #128	; 0x80
    146a:	0292      	lsls	r2, r2, #10
    146c:	4b01      	ldr	r3, [pc, #4]	; (1474 <ui_wakeup+0xc>)
    146e:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    1470:	4770      	bx	lr
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	41004400 	.word	0x41004400

00001478 <ui_process>:

void ui_process(uint16_t framenumber)
{
    1478:	b510      	push	{r4, lr}
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
    147a:	21fa      	movs	r1, #250	; 0xfa
    147c:	0089      	lsls	r1, r1, #2
    147e:	4b0f      	ldr	r3, [pc, #60]	; (14bc <ui_process+0x44>)
    1480:	4798      	blx	r3
    1482:	b289      	uxth	r1, r1
    1484:	2900      	cmp	r1, #0
    1486:	d104      	bne.n	1492 <ui_process+0x1a>
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	0292      	lsls	r2, r2, #10
    148c:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <ui_process+0x48>)
    148e:	615a      	str	r2, [r3, #20]
    1490:	e007      	b.n	14a2 <ui_process+0x2a>
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
    1492:	23fa      	movs	r3, #250	; 0xfa
    1494:	005b      	lsls	r3, r3, #1
    1496:	4299      	cmp	r1, r3
    1498:	d103      	bne.n	14a2 <ui_process+0x2a>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    149a:	2280      	movs	r2, #128	; 0x80
    149c:	0292      	lsls	r2, r2, #10
    149e:	4b08      	ldr	r3, [pc, #32]	; (14c0 <ui_process+0x48>)
    14a0:	619a      	str	r2, [r3, #24]
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    14a2:	4b08      	ldr	r3, [pc, #32]	; (14c4 <ui_process+0x4c>)
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	3301      	adds	r3, #1
    14a8:	b2db      	uxtb	r3, r3
	if (cpt_sof < 5) {
    14aa:	2b04      	cmp	r3, #4
    14ac:	d802      	bhi.n	14b4 <ui_process+0x3c>
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    14ae:	4a05      	ldr	r2, [pc, #20]	; (14c4 <ui_process+0x4c>)
    14b0:	7013      	strb	r3, [r2, #0]
    14b2:	e002      	b.n	14ba <ui_process+0x42>
	if (cpt_sof < 5) {
		return;
	}
	cpt_sof = 0;
    14b4:	2200      	movs	r2, #0
    14b6:	4b03      	ldr	r3, [pc, #12]	; (14c4 <ui_process+0x4c>)
    14b8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	*/
}
    14ba:	bd10      	pop	{r4, pc}
    14bc:	00004359 	.word	0x00004359
    14c0:	41004400 	.word	0x41004400
    14c4:	200000fc 	.word	0x200000fc

000014c8 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
	return 0;
}
    14c8:	2000      	movs	r0, #0
    14ca:	4770      	bx	lr

000014cc <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
	return false;
}
    14cc:	2000      	movs	r0, #0
    14ce:	4770      	bx	lr

000014d0 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    14d0:	b510      	push	{r4, lr}
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    14d2:	2400      	movs	r4, #0
    14d4:	4b07      	ldr	r3, [pc, #28]	; (14f4 <udi_hid_mouse_enable+0x24>)
    14d6:	701c      	strb	r4, [r3, #0]
	udi_hid_mouse_protocol = 0;
    14d8:	4b07      	ldr	r3, [pc, #28]	; (14f8 <udi_hid_mouse_enable+0x28>)
    14da:	701c      	strb	r4, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    14dc:	4b07      	ldr	r3, [pc, #28]	; (14fc <udi_hid_mouse_enable+0x2c>)
    14de:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    14e0:	2207      	movs	r2, #7
    14e2:	2100      	movs	r1, #0
    14e4:	4806      	ldr	r0, [pc, #24]	; (1500 <udi_hid_mouse_enable+0x30>)
    14e6:	4b07      	ldr	r3, [pc, #28]	; (1504 <udi_hid_mouse_enable+0x34>)
    14e8:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    14ea:	4b07      	ldr	r3, [pc, #28]	; (1508 <udi_hid_mouse_enable+0x38>)
    14ec:	701c      	strb	r4, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    14ee:	4b07      	ldr	r3, [pc, #28]	; (150c <udi_hid_mouse_enable+0x3c>)
    14f0:	4798      	blx	r3
}
    14f2:	bd10      	pop	{r4, pc}
    14f4:	2000010c 	.word	0x2000010c
    14f8:	20000108 	.word	0x20000108
    14fc:	20000107 	.word	0x20000107
    1500:	20000100 	.word	0x20000100
    1504:	000045d7 	.word	0x000045d7
    1508:	2000010d 	.word	0x2000010d
    150c:	00004231 	.word	0x00004231

00001510 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    1510:	b510      	push	{r4, lr}
	UDI_HID_MOUSE_DISABLE_EXT();
    1512:	4b01      	ldr	r3, [pc, #4]	; (1518 <udi_hid_mouse_disable+0x8>)
    1514:	4798      	blx	r3
}
    1516:	bd10      	pop	{r4, pc}
    1518:	00004241 	.word	0x00004241

0000151c <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    151c:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_mouse_rate,
    151e:	4b03      	ldr	r3, [pc, #12]	; (152c <udi_hid_mouse_setup+0x10>)
    1520:	4a03      	ldr	r2, [pc, #12]	; (1530 <udi_hid_mouse_setup+0x14>)
    1522:	4904      	ldr	r1, [pc, #16]	; (1534 <udi_hid_mouse_setup+0x18>)
    1524:	4804      	ldr	r0, [pc, #16]	; (1538 <udi_hid_mouse_setup+0x1c>)
    1526:	4c05      	ldr	r4, [pc, #20]	; (153c <udi_hid_mouse_setup+0x20>)
    1528:	47a0      	blx	r4
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    152a:	bd10      	pop	{r4, pc}
    152c:	000014cd 	.word	0x000014cd
    1530:	20000014 	.word	0x20000014
    1534:	20000108 	.word	0x20000108
    1538:	2000010c 	.word	0x2000010c
    153c:	00001541 	.word	0x00001541

00001540 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1540:	b570      	push	{r4, r5, r6, lr}
    1542:	0004      	movs	r4, r0
    1544:	0015      	movs	r5, r2
	if (Udd_setup_is_in()) {
    1546:	4a3a      	ldr	r2, [pc, #232]	; (1630 <udi_hid_setup+0xf0>)
    1548:	7812      	ldrb	r2, [r2, #0]
    154a:	b250      	sxtb	r0, r2
    154c:	2800      	cmp	r0, #0
    154e:	da4e      	bge.n	15ee <udi_hid_setup+0xae>
    1550:	2060      	movs	r0, #96	; 0x60
    1552:	4002      	ands	r2, r0
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1554:	d131      	bne.n	15ba <udi_hid_setup+0x7a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1556:	4836      	ldr	r0, [pc, #216]	; (1630 <udi_hid_setup+0xf0>)
    1558:	7840      	ldrb	r0, [r0, #1]
    155a:	2806      	cmp	r0, #6
    155c:	d12d      	bne.n	15ba <udi_hid_setup+0x7a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    155e:	4b35      	ldr	r3, [pc, #212]	; (1634 <udi_hid_setup+0xf4>)
    1560:	4798      	blx	r3
    1562:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1564:	7a82      	ldrb	r2, [r0, #10]
		return false;
    1566:	2000      	movs	r0, #0

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1568:	2a21      	cmp	r2, #33	; 0x21
    156a:	d160      	bne.n	162e <udi_hid_setup+0xee>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    156c:	4a30      	ldr	r2, [pc, #192]	; (1630 <udi_hid_setup+0xf0>)
    156e:	8852      	ldrh	r2, [r2, #2]
    1570:	0a12      	lsrs	r2, r2, #8
    1572:	2a21      	cmp	r2, #33	; 0x21
    1574:	d10d      	bne.n	1592 <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1576:	4a2e      	ldr	r2, [pc, #184]	; (1630 <udi_hid_setup+0xf0>)
    1578:	0019      	movs	r1, r3
    157a:	3109      	adds	r1, #9
    157c:	6091      	str	r1, [r2, #8]
		udd_g_ctrlreq.payload_size =
    157e:	7a5b      	ldrb	r3, [r3, #9]
    1580:	88d0      	ldrh	r0, [r2, #6]
    1582:	1c19      	adds	r1, r3, #0
    1584:	b29b      	uxth	r3, r3
    1586:	4283      	cmp	r3, r0
    1588:	d900      	bls.n	158c <udi_hid_setup+0x4c>
    158a:	1c01      	adds	r1, r0, #0
    158c:	8191      	strh	r1, [r2, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    158e:	2001      	movs	r0, #1
    1590:	e04d      	b.n	162e <udi_hid_setup+0xee>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1592:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1594:	2000      	movs	r0, #0
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1596:	4291      	cmp	r1, r2
    1598:	d149      	bne.n	162e <udi_hid_setup+0xee>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    159a:	4925      	ldr	r1, [pc, #148]	; (1630 <udi_hid_setup+0xf0>)
    159c:	608d      	str	r5, [r1, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    159e:	7c1a      	ldrb	r2, [r3, #16]
    15a0:	3309      	adds	r3, #9
    15a2:	7a1b      	ldrb	r3, [r3, #8]
    15a4:	021b      	lsls	r3, r3, #8
    15a6:	4313      	orrs	r3, r2
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    15a8:	88c8      	ldrh	r0, [r1, #6]
    15aa:	1c1a      	adds	r2, r3, #0
    15ac:	b29b      	uxth	r3, r3
    15ae:	4283      	cmp	r3, r0
    15b0:	d900      	bls.n	15b4 <udi_hid_setup+0x74>
    15b2:	1c02      	adds	r2, r0, #0
    15b4:	818a      	strh	r2, [r1, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    15b6:	2001      	movs	r0, #1
    15b8:	e039      	b.n	162e <udi_hid_setup+0xee>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    15ba:	2000      	movs	r0, #0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    15bc:	2a20      	cmp	r2, #32
    15be:	d136      	bne.n	162e <udi_hid_setup+0xee>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    15c0:	4a1b      	ldr	r2, [pc, #108]	; (1630 <udi_hid_setup+0xf0>)
    15c2:	7852      	ldrb	r2, [r2, #1]
    15c4:	2a02      	cmp	r2, #2
    15c6:	d006      	beq.n	15d6 <udi_hid_setup+0x96>
    15c8:	2a03      	cmp	r2, #3
    15ca:	d00a      	beq.n	15e2 <udi_hid_setup+0xa2>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    15cc:	2000      	movs	r0, #0
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    15ce:	2a01      	cmp	r2, #1
    15d0:	d12d      	bne.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    15d2:	4798      	blx	r3
    15d4:	e02b      	b.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    15d6:	4b16      	ldr	r3, [pc, #88]	; (1630 <udi_hid_setup+0xf0>)
    15d8:	609c      	str	r4, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    15da:	2201      	movs	r2, #1
    15dc:	819a      	strh	r2, [r3, #12]
				return true;
    15de:	2001      	movs	r0, #1
    15e0:	e025      	b.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    15e2:	4b13      	ldr	r3, [pc, #76]	; (1630 <udi_hid_setup+0xf0>)
    15e4:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    15e6:	2201      	movs	r2, #1
    15e8:	819a      	strh	r2, [r3, #12]
				return true;
    15ea:	2001      	movs	r0, #1
    15ec:	e01f      	b.n	162e <udi_hid_setup+0xee>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    15ee:	2060      	movs	r0, #96	; 0x60
    15f0:	4002      	ands	r2, r0
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    15f2:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    15f4:	2a20      	cmp	r2, #32
    15f6:	d11a      	bne.n	162e <udi_hid_setup+0xee>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    15f8:	4a0d      	ldr	r2, [pc, #52]	; (1630 <udi_hid_setup+0xf0>)
    15fa:	7852      	ldrb	r2, [r2, #1]
    15fc:	2a0a      	cmp	r2, #10
    15fe:	d006      	beq.n	160e <udi_hid_setup+0xce>
    1600:	2a0b      	cmp	r2, #11
    1602:	d00a      	beq.n	161a <udi_hid_setup+0xda>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1604:	2000      	movs	r0, #0
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1606:	2a09      	cmp	r2, #9
    1608:	d111      	bne.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    160a:	4798      	blx	r3
    160c:	e00f      	b.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    160e:	4b08      	ldr	r3, [pc, #32]	; (1630 <udi_hid_setup+0xf0>)
    1610:	885b      	ldrh	r3, [r3, #2]
    1612:	0a1b      	lsrs	r3, r3, #8
    1614:	7023      	strb	r3, [r4, #0]
				return true;
    1616:	2001      	movs	r0, #1
    1618:	e009      	b.n	162e <udi_hid_setup+0xee>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <udi_hid_setup+0xf0>)
    161c:	88db      	ldrh	r3, [r3, #6]
					return false;
    161e:	2000      	movs	r0, #0
			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1620:	2b00      	cmp	r3, #0
    1622:	d104      	bne.n	162e <udi_hid_setup+0xee>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1624:	4b02      	ldr	r3, [pc, #8]	; (1630 <udi_hid_setup+0xf0>)
    1626:	885b      	ldrh	r3, [r3, #2]
    1628:	700b      	strb	r3, [r1, #0]
				return true;
    162a:	3001      	adds	r0, #1
    162c:	e7ff      	b.n	162e <udi_hid_setup+0xee>
			}
		}
	}
	return false;	// Request not supported
}
    162e:	bd70      	pop	{r4, r5, r6, pc}
    1630:	20000438 	.word	0x20000438
    1634:	000017cd 	.word	0x000017cd

00001638 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1638:	b510      	push	{r4, lr}
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    163a:	4b11      	ldr	r3, [pc, #68]	; (1680 <udc_next_desc_in_iface+0x48>)
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	681c      	ldr	r4, [r3, #0]
    1640:	78a3      	ldrb	r3, [r4, #2]
    1642:	78e2      	ldrb	r2, [r4, #3]
    1644:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1646:	431a      	orrs	r2, r3
    1648:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    164a:	7803      	ldrb	r3, [r0, #0]
    164c:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    164e:	4290      	cmp	r0, r2
    1650:	d210      	bcs.n	1674 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1652:	7843      	ldrb	r3, [r0, #1]
    1654:	2b04      	cmp	r3, #4
    1656:	d00f      	beq.n	1678 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1658:	428b      	cmp	r3, r1
    165a:	d105      	bne.n	1668 <udc_next_desc_in_iface+0x30>
    165c:	e00f      	b.n	167e <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    165e:	7843      	ldrb	r3, [r0, #1]
    1660:	2b04      	cmp	r3, #4
    1662:	d00b      	beq.n	167c <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1664:	428b      	cmp	r3, r1
    1666:	d00a      	beq.n	167e <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1668:	7803      	ldrb	r3, [r0, #0]
    166a:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    166c:	4290      	cmp	r0, r2
    166e:	d3f6      	bcc.n	165e <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    1670:	2000      	movs	r0, #0
    1672:	e004      	b.n	167e <udc_next_desc_in_iface+0x46>
    1674:	2000      	movs	r0, #0
    1676:	e002      	b.n	167e <udc_next_desc_in_iface+0x46>
    1678:	2000      	movs	r0, #0
    167a:	e000      	b.n	167e <udc_next_desc_in_iface+0x46>
    167c:	2000      	movs	r0, #0
}
    167e:	bd10      	pop	{r4, pc}
    1680:	20000110 	.word	0x20000110

00001684 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1684:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <udc_valid_address+0x10>)
    1688:	885b      	ldrh	r3, [r3, #2]
    168a:	207f      	movs	r0, #127	; 0x7f
    168c:	4018      	ands	r0, r3
    168e:	4b02      	ldr	r3, [pc, #8]	; (1698 <udc_valid_address+0x14>)
    1690:	4798      	blx	r3
}
    1692:	bd10      	pop	{r4, pc}
    1694:	20000438 	.word	0x20000438
    1698:	00002fa5 	.word	0x00002fa5

0000169c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    169c:	b570      	push	{r4, r5, r6, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    169e:	4b18      	ldr	r3, [pc, #96]	; (1700 <udc_update_iface_desc+0x64>)
    16a0:	781b      	ldrb	r3, [r3, #0]
		return false;
    16a2:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    16a4:	2b00      	cmp	r3, #0
    16a6:	d029      	beq.n	16fc <udc_update_iface_desc+0x60>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16a8:	4b16      	ldr	r3, [pc, #88]	; (1704 <udc_update_iface_desc+0x68>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	791c      	ldrb	r4, [r3, #4]
    16b0:	4284      	cmp	r4, r0
    16b2:	d923      	bls.n	16fc <udc_update_iface_desc+0x60>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    16b4:	4a14      	ldr	r2, [pc, #80]	; (1708 <udc_update_iface_desc+0x6c>)
    16b6:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16b8:	789a      	ldrb	r2, [r3, #2]
    16ba:	78dc      	ldrb	r4, [r3, #3]
    16bc:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    16be:	4314      	orrs	r4, r2
    16c0:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    16c2:	42a3      	cmp	r3, r4
    16c4:	d219      	bcs.n	16fa <udc_update_iface_desc+0x5e>
    16c6:	2500      	movs	r5, #0
    16c8:	2601      	movs	r6, #1
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    16ca:	785a      	ldrb	r2, [r3, #1]
    16cc:	2a04      	cmp	r2, #4
    16ce:	d10b      	bne.n	16e8 <udc_update_iface_desc+0x4c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    16d0:	789a      	ldrb	r2, [r3, #2]
    16d2:	4282      	cmp	r2, r0
    16d4:	d108      	bne.n	16e8 <udc_update_iface_desc+0x4c>
    16d6:	78da      	ldrb	r2, [r3, #3]
    16d8:	428a      	cmp	r2, r1
    16da:	d105      	bne.n	16e8 <udc_update_iface_desc+0x4c>
    16dc:	2d00      	cmp	r5, #0
    16de:	d001      	beq.n	16e4 <udc_update_iface_desc+0x48>
    16e0:	4a09      	ldr	r2, [pc, #36]	; (1708 <udc_update_iface_desc+0x6c>)
    16e2:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    16e4:	2201      	movs	r2, #1
    16e6:	e009      	b.n	16fc <udc_update_iface_desc+0x60>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    16e8:	781a      	ldrb	r2, [r3, #0]
    16ea:	189b      	adds	r3, r3, r2
    16ec:	0035      	movs	r5, r6
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    16ee:	42a3      	cmp	r3, r4
    16f0:	d3eb      	bcc.n	16ca <udc_update_iface_desc+0x2e>
    16f2:	4a05      	ldr	r2, [pc, #20]	; (1708 <udc_update_iface_desc+0x6c>)
    16f4:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    16f6:	2200      	movs	r2, #0
    16f8:	e000      	b.n	16fc <udc_update_iface_desc+0x60>
    16fa:	2200      	movs	r2, #0
}
    16fc:	0010      	movs	r0, r2
    16fe:	bd70      	pop	{r4, r5, r6, pc}
    1700:	20000118 	.word	0x20000118
    1704:	20000110 	.word	0x20000110
    1708:	2000011c 	.word	0x2000011c

0000170c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
    170e:	4647      	mov	r7, r8
    1710:	b480      	push	{r7}
    1712:	0004      	movs	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1714:	2100      	movs	r1, #0
    1716:	4b12      	ldr	r3, [pc, #72]	; (1760 <udc_iface_disable+0x54>)
    1718:	4798      	blx	r3
    171a:	1e05      	subs	r5, r0, #0
    171c:	d01c      	beq.n	1758 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    171e:	4b11      	ldr	r3, [pc, #68]	; (1764 <udc_iface_disable+0x58>)
    1720:	681b      	ldr	r3, [r3, #0]
    1722:	685b      	ldr	r3, [r3, #4]
    1724:	00a2      	lsls	r2, r4, #2
    1726:	58d3      	ldr	r3, [r2, r3]
    1728:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    172a:	68db      	ldr	r3, [r3, #12]
    172c:	4798      	blx	r3
    172e:	0001      	movs	r1, r0
    1730:	0020      	movs	r0, r4
    1732:	4b0b      	ldr	r3, [pc, #44]	; (1760 <udc_iface_disable+0x54>)
    1734:	4798      	blx	r3
    1736:	1e05      	subs	r5, r0, #0
    1738:	d00e      	beq.n	1758 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    173a:	4b0b      	ldr	r3, [pc, #44]	; (1768 <udc_iface_disable+0x5c>)
    173c:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    173e:	4e0b      	ldr	r6, [pc, #44]	; (176c <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    1740:	4f0b      	ldr	r7, [pc, #44]	; (1770 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1742:	2105      	movs	r1, #5
    1744:	0020      	movs	r0, r4
    1746:	47b0      	blx	r6
    1748:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    174a:	d002      	beq.n	1752 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    174c:	7880      	ldrb	r0, [r0, #2]
    174e:	47b8      	blx	r7
		}
    1750:	e7f7      	b.n	1742 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
    1752:	4643      	mov	r3, r8
    1754:	685b      	ldr	r3, [r3, #4]
    1756:	4798      	blx	r3
	return true;
}
    1758:	0028      	movs	r0, r5
    175a:	bc04      	pop	{r2}
    175c:	4690      	mov	r8, r2
    175e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1760:	0000169d 	.word	0x0000169d
    1764:	20000110 	.word	0x20000110
    1768:	2000011c 	.word	0x2000011c
    176c:	00001639 	.word	0x00001639
    1770:	00002cc1 	.word	0x00002cc1

00001774 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1776:	0005      	movs	r5, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1778:	4b0f      	ldr	r3, [pc, #60]	; (17b8 <udc_iface_enable+0x44>)
    177a:	4798      	blx	r3
    177c:	2800      	cmp	r0, #0
    177e:	d019      	beq.n	17b4 <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1780:	4b0e      	ldr	r3, [pc, #56]	; (17bc <udc_iface_enable+0x48>)
    1782:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1784:	4e0e      	ldr	r6, [pc, #56]	; (17c0 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1786:	4f0f      	ldr	r7, [pc, #60]	; (17c4 <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1788:	2105      	movs	r1, #5
    178a:	0020      	movs	r0, r4
    178c:	47b0      	blx	r6
    178e:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    1790:	d009      	beq.n	17a6 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1792:	7903      	ldrb	r3, [r0, #4]
    1794:	7942      	ldrb	r2, [r0, #5]
    1796:	0212      	lsls	r2, r2, #8
    1798:	431a      	orrs	r2, r3
    179a:	78c1      	ldrb	r1, [r0, #3]
    179c:	7880      	ldrb	r0, [r0, #2]
    179e:	47b8      	blx	r7
    17a0:	2800      	cmp	r0, #0
    17a2:	d1f1      	bne.n	1788 <udc_iface_enable+0x14>
    17a4:	e006      	b.n	17b4 <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    17a6:	4b08      	ldr	r3, [pc, #32]	; (17c8 <udc_iface_enable+0x54>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	685b      	ldr	r3, [r3, #4]
    17ac:	00ad      	lsls	r5, r5, #2
    17ae:	58eb      	ldr	r3, [r5, r3]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	4798      	blx	r3
}
    17b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	0000169d 	.word	0x0000169d
    17bc:	2000011c 	.word	0x2000011c
    17c0:	00001639 	.word	0x00001639
    17c4:	00002d19 	.word	0x00002d19
    17c8:	20000110 	.word	0x20000110

000017cc <udc_get_interface_desc>:
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
    17cc:	4b01      	ldr	r3, [pc, #4]	; (17d4 <udc_get_interface_desc+0x8>)
    17ce:	6818      	ldr	r0, [r3, #0]
}
    17d0:	4770      	bx	lr
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	2000011c 	.word	0x2000011c

000017d8 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    17d8:	b510      	push	{r4, lr}
	udd_enable();
    17da:	4b01      	ldr	r3, [pc, #4]	; (17e0 <udc_start+0x8>)
    17dc:	4798      	blx	r3
}
    17de:	bd10      	pop	{r4, pc}
    17e0:	00003109 	.word	0x00003109

000017e4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    17e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
    17e6:	4b11      	ldr	r3, [pc, #68]	; (182c <udc_reset+0x48>)
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d011      	beq.n	1812 <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17ee:	4b10      	ldr	r3, [pc, #64]	; (1830 <udc_reset+0x4c>)
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    17f4:	791b      	ldrb	r3, [r3, #4]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d00b      	beq.n	1812 <udc_reset+0x2e>
    17fa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    17fc:	4e0d      	ldr	r6, [pc, #52]	; (1834 <udc_reset+0x50>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17fe:	4d0c      	ldr	r5, [pc, #48]	; (1830 <udc_reset+0x4c>)
				iface_num++) {
			udc_iface_disable(iface_num);
    1800:	0020      	movs	r0, r4
    1802:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1804:	3401      	adds	r4, #1
    1806:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1808:	682b      	ldr	r3, [r5, #0]
    180a:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    180c:	791b      	ldrb	r3, [r3, #4]
    180e:	42a3      	cmp	r3, r4
    1810:	d8f6      	bhi.n	1800 <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    1812:	2200      	movs	r2, #0
    1814:	4b05      	ldr	r3, [pc, #20]	; (182c <udc_reset+0x48>)
    1816:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    1818:	4b07      	ldr	r3, [pc, #28]	; (1838 <udc_reset+0x54>)
    181a:	881b      	ldrh	r3, [r3, #0]
    181c:	079b      	lsls	r3, r3, #30
    181e:	d501      	bpl.n	1824 <udc_reset+0x40>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    1820:	4b06      	ldr	r3, [pc, #24]	; (183c <udc_reset+0x58>)
    1822:	4798      	blx	r3
	}
#endif
	udc_device_status =
    1824:	2200      	movs	r2, #0
    1826:	4b04      	ldr	r3, [pc, #16]	; (1838 <udc_reset+0x54>)
    1828:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    182a:	bd70      	pop	{r4, r5, r6, pc}
    182c:	20000118 	.word	0x20000118
    1830:	20000110 	.word	0x20000110
    1834:	0000170d 	.word	0x0000170d
    1838:	20000116 	.word	0x20000116
    183c:	00004201 	.word	0x00004201

00001840 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1840:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
    1842:	4b0d      	ldr	r3, [pc, #52]	; (1878 <udc_sof_notify+0x38>)
    1844:	781b      	ldrb	r3, [r3, #0]
    1846:	2b00      	cmp	r3, #0
    1848:	d015      	beq.n	1876 <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <udc_sof_notify+0x3c>)
    184c:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    184e:	681a      	ldr	r2, [r3, #0]
    1850:	7912      	ldrb	r2, [r2, #4]
    1852:	2a00      	cmp	r2, #0
    1854:	d00f      	beq.n	1876 <udc_sof_notify+0x36>
    1856:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1858:	4d08      	ldr	r5, [pc, #32]	; (187c <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    185a:	685b      	ldr	r3, [r3, #4]
    185c:	00a2      	lsls	r2, r4, #2
    185e:	58d3      	ldr	r3, [r2, r3]
    1860:	691b      	ldr	r3, [r3, #16]
    1862:	2b00      	cmp	r3, #0
    1864:	d000      	beq.n	1868 <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1866:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1868:	3401      	adds	r4, #1
    186a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    186c:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    186e:	681a      	ldr	r2, [r3, #0]
    1870:	7912      	ldrb	r2, [r2, #4]
    1872:	42a2      	cmp	r2, r4
    1874:	d8f1      	bhi.n	185a <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1876:	bd70      	pop	{r4, r5, r6, pc}
    1878:	20000118 	.word	0x20000118
    187c:	20000110 	.word	0x20000110

00001880 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1882:	4bbb      	ldr	r3, [pc, #748]	; (1b70 <udc_process_setup+0x2f0>)
    1884:	2200      	movs	r2, #0
    1886:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1888:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    188a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    188c:	781b      	ldrb	r3, [r3, #0]
    188e:	b25a      	sxtb	r2, r3
    1890:	2a00      	cmp	r2, #0
    1892:	db00      	blt.n	1896 <udc_process_setup+0x16>
    1894:	e203      	b.n	1c9e <udc_process_setup+0x41e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1896:	4ab6      	ldr	r2, [pc, #728]	; (1b70 <udc_process_setup+0x2f0>)
    1898:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    189a:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
    189c:	2a00      	cmp	r2, #0
    189e:	d000      	beq.n	18a2 <udc_process_setup+0x22>
    18a0:	e201      	b.n	1ca6 <udc_process_setup+0x426>
    18a2:	e205      	b.n	1cb0 <udc_process_setup+0x430>
    18a4:	211f      	movs	r1, #31
    18a6:	400b      	ands	r3, r1
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18a8:	d176      	bne.n	1998 <udc_process_setup+0x118>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    18aa:	49b1      	ldr	r1, [pc, #708]	; (1b70 <udc_process_setup+0x2f0>)
    18ac:	7849      	ldrb	r1, [r1, #1]
    18ae:	2906      	cmp	r1, #6
    18b0:	d00b      	beq.n	18ca <udc_process_setup+0x4a>
    18b2:	2908      	cmp	r1, #8
    18b4:	d068      	beq.n	1988 <udc_process_setup+0x108>
    18b6:	2900      	cmp	r1, #0
    18b8:	d16e      	bne.n	1998 <udc_process_setup+0x118>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    18ba:	2a02      	cmp	r2, #2
    18bc:	d000      	beq.n	18c0 <udc_process_setup+0x40>
    18be:	e1c2      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    18c0:	3102      	adds	r1, #2
    18c2:	48ac      	ldr	r0, [pc, #688]	; (1b74 <udc_process_setup+0x2f4>)
    18c4:	4bac      	ldr	r3, [pc, #688]	; (1b78 <udc_process_setup+0x2f8>)
    18c6:	4798      	blx	r3
    18c8:	e1f1      	b.n	1cae <udc_process_setup+0x42e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18ca:	4ba9      	ldr	r3, [pc, #676]	; (1b70 <udc_process_setup+0x2f0>)
    18cc:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    18ce:	0a1a      	lsrs	r2, r3, #8
    18d0:	2a02      	cmp	r2, #2
    18d2:	d010      	beq.n	18f6 <udc_process_setup+0x76>
    18d4:	b2d1      	uxtb	r1, r2
    18d6:	2902      	cmp	r1, #2
    18d8:	d802      	bhi.n	18e0 <udc_process_setup+0x60>
    18da:	2a01      	cmp	r2, #1
    18dc:	d005      	beq.n	18ea <udc_process_setup+0x6a>
    18de:	e185      	b.n	1bec <udc_process_setup+0x36c>
    18e0:	2a03      	cmp	r2, #3
    18e2:	d02a      	beq.n	193a <udc_process_setup+0xba>
    18e4:	2a0f      	cmp	r2, #15
    18e6:	d01c      	beq.n	1922 <udc_process_setup+0xa2>
    18e8:	e180      	b.n	1bec <udc_process_setup+0x36c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    18ea:	4ba4      	ldr	r3, [pc, #656]	; (1b7c <udc_process_setup+0x2fc>)
    18ec:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    18ee:	7801      	ldrb	r1, [r0, #0]
    18f0:	4ba1      	ldr	r3, [pc, #644]	; (1b78 <udc_process_setup+0x2f8>)
    18f2:	4798      	blx	r3
    18f4:	e03f      	b.n	1976 <udc_process_setup+0xf6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18f6:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    18f8:	4aa0      	ldr	r2, [pc, #640]	; (1b7c <udc_process_setup+0x2fc>)
    18fa:	6812      	ldr	r2, [r2, #0]
    18fc:	7c52      	ldrb	r2, [r2, #17]
    18fe:	429a      	cmp	r2, r3
    1900:	d800      	bhi.n	1904 <udc_process_setup+0x84>
    1902:	e1a0      	b.n	1c46 <udc_process_setup+0x3c6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1904:	4a9d      	ldr	r2, [pc, #628]	; (1b7c <udc_process_setup+0x2fc>)
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1906:	6852      	ldr	r2, [r2, #4]
    1908:	00db      	lsls	r3, r3, #3
    190a:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    190c:	7883      	ldrb	r3, [r0, #2]
    190e:	78c1      	ldrb	r1, [r0, #3]
    1910:	0209      	lsls	r1, r1, #8
    1912:	4319      	orrs	r1, r3
    1914:	4b98      	ldr	r3, [pc, #608]	; (1b78 <udc_process_setup+0x2f8>)
    1916:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1918:	4b95      	ldr	r3, [pc, #596]	; (1b70 <udc_process_setup+0x2f0>)
    191a:	689b      	ldr	r3, [r3, #8]
    191c:	2202      	movs	r2, #2
    191e:	705a      	strb	r2, [r3, #1]
    1920:	e029      	b.n	1976 <udc_process_setup+0xf6>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1922:	4b96      	ldr	r3, [pc, #600]	; (1b7c <udc_process_setup+0x2fc>)
    1924:	6898      	ldr	r0, [r3, #8]
    1926:	2800      	cmp	r0, #0
    1928:	d100      	bne.n	192c <udc_process_setup+0xac>
    192a:	e18c      	b.n	1c46 <udc_process_setup+0x3c6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    192c:	7883      	ldrb	r3, [r0, #2]
    192e:	78c1      	ldrb	r1, [r0, #3]
    1930:	0209      	lsls	r1, r1, #8
    1932:	4319      	orrs	r1, r3
    1934:	4b90      	ldr	r3, [pc, #576]	; (1b78 <udc_process_setup+0x2f8>)
    1936:	4798      	blx	r3
    1938:	e01d      	b.n	1976 <udc_process_setup+0xf6>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    193a:	22ff      	movs	r2, #255	; 0xff
    193c:	4013      	ands	r3, r2
    193e:	2b01      	cmp	r3, #1
    1940:	d00a      	beq.n	1958 <udc_process_setup+0xd8>
    1942:	2b00      	cmp	r3, #0
    1944:	d003      	beq.n	194e <udc_process_setup+0xce>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1946:	4a8e      	ldr	r2, [pc, #568]	; (1b80 <udc_process_setup+0x300>)
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1948:	2b02      	cmp	r3, #2
    194a:	d006      	beq.n	195a <udc_process_setup+0xda>
    194c:	e153      	b.n	1bf6 <udc_process_setup+0x376>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    194e:	2104      	movs	r1, #4
    1950:	488c      	ldr	r0, [pc, #560]	; (1b84 <udc_process_setup+0x304>)
    1952:	4b89      	ldr	r3, [pc, #548]	; (1b78 <udc_process_setup+0x2f8>)
    1954:	4798      	blx	r3
    1956:	e00e      	b.n	1976 <udc_process_setup+0xf6>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1958:	4a8b      	ldr	r2, [pc, #556]	; (1b88 <udc_process_setup+0x308>)
    195a:	498c      	ldr	r1, [pc, #560]	; (1b8c <udc_process_setup+0x30c>)
    195c:	1c8b      	adds	r3, r1, #2
    195e:	3114      	adds	r1, #20
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1960:	7810      	ldrb	r0, [r2, #0]
    1962:	8018      	strh	r0, [r3, #0]
    1964:	3201      	adds	r2, #1
    1966:	3302      	adds	r3, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1968:	428b      	cmp	r3, r1
    196a:	d1f9      	bne.n	1960 <udc_process_setup+0xe0>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    196c:	4887      	ldr	r0, [pc, #540]	; (1b8c <udc_process_setup+0x30c>)
    196e:	2114      	movs	r1, #20
    1970:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1972:	4b81      	ldr	r3, [pc, #516]	; (1b78 <udc_process_setup+0x2f8>)
    1974:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1976:	4b7e      	ldr	r3, [pc, #504]	; (1b70 <udc_process_setup+0x2f0>)
    1978:	88da      	ldrh	r2, [r3, #6]
    197a:	899b      	ldrh	r3, [r3, #12]
    197c:	4293      	cmp	r3, r2
    197e:	d800      	bhi.n	1982 <udc_process_setup+0x102>
    1980:	e195      	b.n	1cae <udc_process_setup+0x42e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1982:	4b7b      	ldr	r3, [pc, #492]	; (1b70 <udc_process_setup+0x2f0>)
    1984:	819a      	strh	r2, [r3, #12]
    1986:	e192      	b.n	1cae <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1988:	2a01      	cmp	r2, #1
    198a:	d000      	beq.n	198e <udc_process_setup+0x10e>
    198c:	e15b      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    198e:	2101      	movs	r1, #1
    1990:	487f      	ldr	r0, [pc, #508]	; (1b90 <udc_process_setup+0x310>)
    1992:	4b79      	ldr	r3, [pc, #484]	; (1b78 <udc_process_setup+0x2f8>)
    1994:	4798      	blx	r3
    1996:	e18a      	b.n	1cae <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1998:	2b01      	cmp	r3, #1
    199a:	d127      	bne.n	19ec <udc_process_setup+0x16c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    199c:	4974      	ldr	r1, [pc, #464]	; (1b70 <udc_process_setup+0x2f0>)
    199e:	7849      	ldrb	r1, [r1, #1]
    19a0:	290a      	cmp	r1, #10
    19a2:	d123      	bne.n	19ec <udc_process_setup+0x16c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    19a4:	2a01      	cmp	r2, #1
    19a6:	d000      	beq.n	19aa <udc_process_setup+0x12a>
    19a8:	e12b      	b.n	1c02 <udc_process_setup+0x382>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    19aa:	4b79      	ldr	r3, [pc, #484]	; (1b90 <udc_process_setup+0x310>)
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d100      	bne.n	19b4 <udc_process_setup+0x134>
    19b2:	e126      	b.n	1c02 <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19b4:	4b6e      	ldr	r3, [pc, #440]	; (1b70 <udc_process_setup+0x2f0>)
    19b6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19b8:	4b76      	ldr	r3, [pc, #472]	; (1b94 <udc_process_setup+0x314>)
    19ba:	681d      	ldr	r5, [r3, #0]
    19bc:	682b      	ldr	r3, [r5, #0]
    19be:	791b      	ldrb	r3, [r3, #4]
    19c0:	42a3      	cmp	r3, r4
    19c2:	d800      	bhi.n	19c6 <udc_process_setup+0x146>
    19c4:	e11d      	b.n	1c02 <udc_process_setup+0x382>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    19c6:	2100      	movs	r1, #0
    19c8:	0020      	movs	r0, r4
    19ca:	4b73      	ldr	r3, [pc, #460]	; (1b98 <udc_process_setup+0x318>)
    19cc:	4798      	blx	r3
    19ce:	2800      	cmp	r0, #0
    19d0:	d100      	bne.n	19d4 <udc_process_setup+0x154>
    19d2:	e110      	b.n	1bf6 <udc_process_setup+0x376>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    19d4:	686b      	ldr	r3, [r5, #4]
    19d6:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    19d8:	58e3      	ldr	r3, [r4, r3]
    19da:	68db      	ldr	r3, [r3, #12]
    19dc:	4798      	blx	r3
    19de:	4b6f      	ldr	r3, [pc, #444]	; (1b9c <udc_process_setup+0x31c>)
    19e0:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    19e2:	2101      	movs	r1, #1
    19e4:	0018      	movs	r0, r3
    19e6:	4b64      	ldr	r3, [pc, #400]	; (1b78 <udc_process_setup+0x2f8>)
    19e8:	4798      	blx	r3
    19ea:	e160      	b.n	1cae <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    19ec:	2b02      	cmp	r3, #2
    19ee:	d000      	beq.n	19f2 <udc_process_setup+0x172>
    19f0:	e101      	b.n	1bf6 <udc_process_setup+0x376>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    19f2:	4b5f      	ldr	r3, [pc, #380]	; (1b70 <udc_process_setup+0x2f0>)
    19f4:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
    19f6:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    19f8:	2b00      	cmp	r3, #0
    19fa:	d000      	beq.n	19fe <udc_process_setup+0x17e>
    19fc:	e0f9      	b.n	1bf2 <udc_process_setup+0x372>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    19fe:	2a02      	cmp	r2, #2
    1a00:	d000      	beq.n	1a04 <udc_process_setup+0x184>
    1a02:	e120      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1a04:	4b5a      	ldr	r3, [pc, #360]	; (1b70 <udc_process_setup+0x2f0>)
    1a06:	7918      	ldrb	r0, [r3, #4]
    1a08:	4b65      	ldr	r3, [pc, #404]	; (1ba0 <udc_process_setup+0x320>)
    1a0a:	4798      	blx	r3
    1a0c:	4b65      	ldr	r3, [pc, #404]	; (1ba4 <udc_process_setup+0x324>)
    1a0e:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1a10:	2102      	movs	r1, #2
    1a12:	0018      	movs	r0, r3
    1a14:	4b58      	ldr	r3, [pc, #352]	; (1b78 <udc_process_setup+0x2f8>)
    1a16:	4798      	blx	r3
    1a18:	e149      	b.n	1cae <udc_process_setup+0x42e>
    1a1a:	221f      	movs	r2, #31
    1a1c:	4013      	ands	r3, r2
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a1e:	d176      	bne.n	1b0e <udc_process_setup+0x28e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a20:	4a53      	ldr	r2, [pc, #332]	; (1b70 <udc_process_setup+0x2f0>)
    1a22:	7852      	ldrb	r2, [r2, #1]
    1a24:	2a03      	cmp	r2, #3
    1a26:	d025      	beq.n	1a74 <udc_process_setup+0x1f4>
    1a28:	b2d1      	uxtb	r1, r2
    1a2a:	2903      	cmp	r1, #3
    1a2c:	d802      	bhi.n	1a34 <udc_process_setup+0x1b4>
    1a2e:	2a01      	cmp	r2, #1
    1a30:	d00e      	beq.n	1a50 <udc_process_setup+0x1d0>
    1a32:	e06c      	b.n	1b0e <udc_process_setup+0x28e>
    1a34:	2a05      	cmp	r2, #5
    1a36:	d002      	beq.n	1a3e <udc_process_setup+0x1be>
    1a38:	2a09      	cmp	r2, #9
    1a3a:	d02e      	beq.n	1a9a <udc_process_setup+0x21a>
    1a3c:	e067      	b.n	1b0e <udc_process_setup+0x28e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a3e:	4b4c      	ldr	r3, [pc, #304]	; (1b70 <udc_process_setup+0x2f0>)
    1a40:	88db      	ldrh	r3, [r3, #6]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d000      	beq.n	1a48 <udc_process_setup+0x1c8>
    1a46:	e0fe      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1a48:	4a57      	ldr	r2, [pc, #348]	; (1ba8 <udc_process_setup+0x328>)
    1a4a:	4b49      	ldr	r3, [pc, #292]	; (1b70 <udc_process_setup+0x2f0>)
    1a4c:	611a      	str	r2, [r3, #16]
    1a4e:	e12e      	b.n	1cae <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a50:	4b47      	ldr	r3, [pc, #284]	; (1b70 <udc_process_setup+0x2f0>)
    1a52:	88db      	ldrh	r3, [r3, #6]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d000      	beq.n	1a5a <udc_process_setup+0x1da>
    1a58:	e0f5      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1a5a:	4b45      	ldr	r3, [pc, #276]	; (1b70 <udc_process_setup+0x2f0>)
    1a5c:	885b      	ldrh	r3, [r3, #2]
    1a5e:	2b01      	cmp	r3, #1
    1a60:	d000      	beq.n	1a64 <udc_process_setup+0x1e4>
    1a62:	e0f0      	b.n	1c46 <udc_process_setup+0x3c6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1a64:	4a43      	ldr	r2, [pc, #268]	; (1b74 <udc_process_setup+0x2f4>)
    1a66:	8813      	ldrh	r3, [r2, #0]
    1a68:	2102      	movs	r1, #2
    1a6a:	438b      	bics	r3, r1
    1a6c:	8013      	strh	r3, [r2, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1a6e:	4b4f      	ldr	r3, [pc, #316]	; (1bac <udc_process_setup+0x32c>)
    1a70:	4798      	blx	r3
    1a72:	e11c      	b.n	1cae <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a74:	4b3e      	ldr	r3, [pc, #248]	; (1b70 <udc_process_setup+0x2f0>)
    1a76:	88db      	ldrh	r3, [r3, #6]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <udc_process_setup+0x1fe>
    1a7c:	e0e3      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1a7e:	4b3c      	ldr	r3, [pc, #240]	; (1b70 <udc_process_setup+0x2f0>)
    1a80:	885b      	ldrh	r3, [r3, #2]
		break;
#endif
	default:
		break;
	}
	return false;
    1a82:	2000      	movs	r0, #0
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1a84:	2b01      	cmp	r3, #1
    1a86:	d000      	beq.n	1a8a <udc_process_setup+0x20a>
    1a88:	e0b3      	b.n	1bf2 <udc_process_setup+0x372>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1a8a:	4a3a      	ldr	r2, [pc, #232]	; (1b74 <udc_process_setup+0x2f4>)
    1a8c:	8811      	ldrh	r1, [r2, #0]
    1a8e:	2302      	movs	r3, #2
    1a90:	430b      	orrs	r3, r1
    1a92:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    1a94:	4b46      	ldr	r3, [pc, #280]	; (1bb0 <udc_process_setup+0x330>)
    1a96:	4798      	blx	r3
    1a98:	e109      	b.n	1cae <udc_process_setup+0x42e>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a9a:	4b35      	ldr	r3, [pc, #212]	; (1b70 <udc_process_setup+0x2f0>)
    1a9c:	88db      	ldrh	r3, [r3, #6]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d000      	beq.n	1aa4 <udc_process_setup+0x224>
    1aa2:	e0d0      	b.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1aa4:	4b43      	ldr	r3, [pc, #268]	; (1bb4 <udc_process_setup+0x334>)
    1aa6:	4798      	blx	r3
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d100      	bne.n	1aae <udc_process_setup+0x22e>
    1aac:	e0a3      	b.n	1bf6 <udc_process_setup+0x376>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1aae:	4b30      	ldr	r3, [pc, #192]	; (1b70 <udc_process_setup+0x2f0>)
    1ab0:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1ab2:	4b32      	ldr	r3, [pc, #200]	; (1b7c <udc_process_setup+0x2fc>)
    1ab4:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1ab6:	7c5b      	ldrb	r3, [r3, #17]
    1ab8:	429a      	cmp	r2, r3
    1aba:	dd00      	ble.n	1abe <udc_process_setup+0x23e>
    1abc:	e09b      	b.n	1bf6 <udc_process_setup+0x376>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1abe:	4b3e      	ldr	r3, [pc, #248]	; (1bb8 <udc_process_setup+0x338>)
    1ac0:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1ac2:	4b2b      	ldr	r3, [pc, #172]	; (1b70 <udc_process_setup+0x2f0>)
    1ac4:	789b      	ldrb	r3, [r3, #2]
    1ac6:	4a32      	ldr	r2, [pc, #200]	; (1b90 <udc_process_setup+0x310>)
    1ac8:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1aca:	2b00      	cmp	r3, #0
    1acc:	d100      	bne.n	1ad0 <udc_process_setup+0x250>
    1ace:	e0ee      	b.n	1cae <udc_process_setup+0x42e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1ad0:	4a3a      	ldr	r2, [pc, #232]	; (1bbc <udc_process_setup+0x33c>)
    1ad2:	4694      	mov	ip, r2
    1ad4:	4463      	add	r3, ip
    1ad6:	00db      	lsls	r3, r3, #3
    1ad8:	4a28      	ldr	r2, [pc, #160]	; (1b7c <udc_process_setup+0x2fc>)
    1ada:	6852      	ldr	r2, [r2, #4]
    1adc:	18d3      	adds	r3, r2, r3
    1ade:	4a2d      	ldr	r2, [pc, #180]	; (1b94 <udc_process_setup+0x314>)
    1ae0:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	791b      	ldrb	r3, [r3, #4]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d100      	bne.n	1aec <udc_process_setup+0x26c>
    1aea:	e0e0      	b.n	1cae <udc_process_setup+0x42e>
    1aec:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1aee:	4d34      	ldr	r5, [pc, #208]	; (1bc0 <udc_process_setup+0x340>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1af0:	0016      	movs	r6, r2
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1af2:	2100      	movs	r1, #0
    1af4:	0020      	movs	r0, r4
    1af6:	47a8      	blx	r5
    1af8:	2800      	cmp	r0, #0
    1afa:	d100      	bne.n	1afe <udc_process_setup+0x27e>
    1afc:	e07b      	b.n	1bf6 <udc_process_setup+0x376>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1afe:	3401      	adds	r4, #1
    1b00:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b02:	6833      	ldr	r3, [r6, #0]
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	791b      	ldrb	r3, [r3, #4]
    1b08:	42a3      	cmp	r3, r4
    1b0a:	d8f2      	bhi.n	1af2 <udc_process_setup+0x272>
    1b0c:	e0cf      	b.n	1cae <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b0e:	2b01      	cmp	r3, #1
    1b10:	d118      	bne.n	1b44 <udc_process_setup+0x2c4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b12:	4a17      	ldr	r2, [pc, #92]	; (1b70 <udc_process_setup+0x2f0>)
    1b14:	7852      	ldrb	r2, [r2, #1]
    1b16:	2a0b      	cmp	r2, #11
    1b18:	d114      	bne.n	1b44 <udc_process_setup+0x2c4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1b1a:	4b15      	ldr	r3, [pc, #84]	; (1b70 <udc_process_setup+0x2f0>)
    1b1c:	88db      	ldrh	r3, [r3, #6]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d16f      	bne.n	1c02 <udc_process_setup+0x382>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b22:	4b1b      	ldr	r3, [pc, #108]	; (1b90 <udc_process_setup+0x310>)
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d06b      	beq.n	1c02 <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b2a:	4b11      	ldr	r3, [pc, #68]	; (1b70 <udc_process_setup+0x2f0>)
    1b2c:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1b2e:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1b30:	0028      	movs	r0, r5
    1b32:	4b24      	ldr	r3, [pc, #144]	; (1bc4 <udc_process_setup+0x344>)
    1b34:	4798      	blx	r3
    1b36:	2800      	cmp	r0, #0
    1b38:	d05d      	beq.n	1bf6 <udc_process_setup+0x376>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1b3a:	b2e1      	uxtb	r1, r4
    1b3c:	0028      	movs	r0, r5
    1b3e:	4b20      	ldr	r3, [pc, #128]	; (1bc0 <udc_process_setup+0x340>)
    1b40:	4798      	blx	r3
    1b42:	e056      	b.n	1bf2 <udc_process_setup+0x372>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b44:	2b02      	cmp	r3, #2
    1b46:	d156      	bne.n	1bf6 <udc_process_setup+0x376>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b48:	4b09      	ldr	r3, [pc, #36]	; (1b70 <udc_process_setup+0x2f0>)
    1b4a:	785b      	ldrb	r3, [r3, #1]
    1b4c:	2b01      	cmp	r3, #1
    1b4e:	d002      	beq.n	1b56 <udc_process_setup+0x2d6>
    1b50:	2b03      	cmp	r3, #3
    1b52:	d03b      	beq.n	1bcc <udc_process_setup+0x34c>
    1b54:	e04c      	b.n	1bf0 <udc_process_setup+0x370>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b56:	4b06      	ldr	r3, [pc, #24]	; (1b70 <udc_process_setup+0x2f0>)
    1b58:	88db      	ldrh	r3, [r3, #6]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d173      	bne.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b5e:	4b04      	ldr	r3, [pc, #16]	; (1b70 <udc_process_setup+0x2f0>)
    1b60:	885b      	ldrh	r3, [r3, #2]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d16f      	bne.n	1c46 <udc_process_setup+0x3c6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b66:	4b02      	ldr	r3, [pc, #8]	; (1b70 <udc_process_setup+0x2f0>)
    1b68:	7918      	ldrb	r0, [r3, #4]
    1b6a:	4b17      	ldr	r3, [pc, #92]	; (1bc8 <udc_process_setup+0x348>)
    1b6c:	4798      	blx	r3
    1b6e:	e040      	b.n	1bf2 <udc_process_setup+0x372>
    1b70:	20000438 	.word	0x20000438
    1b74:	20000116 	.word	0x20000116
    1b78:	0000301d 	.word	0x0000301d
    1b7c:	20000084 	.word	0x20000084
    1b80:	200000a8 	.word	0x200000a8
    1b84:	200000d4 	.word	0x200000d4
    1b88:	200000b4 	.word	0x200000b4
    1b8c:	200000c0 	.word	0x200000c0
    1b90:	20000118 	.word	0x20000118
    1b94:	20000110 	.word	0x20000110
    1b98:	0000169d 	.word	0x0000169d
    1b9c:	20000114 	.word	0x20000114
    1ba0:	00002e21 	.word	0x00002e21
    1ba4:	2000010e 	.word	0x2000010e
    1ba8:	00001685 	.word	0x00001685
    1bac:	00004201 	.word	0x00004201
    1bb0:	000041f5 	.word	0x000041f5
    1bb4:	00002fb5 	.word	0x00002fb5
    1bb8:	000017e5 	.word	0x000017e5
    1bbc:	1fffffff 	.word	0x1fffffff
    1bc0:	00001775 	.word	0x00001775
    1bc4:	0000170d 	.word	0x0000170d
    1bc8:	00002f61 	.word	0x00002f61
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1bcc:	4b39      	ldr	r3, [pc, #228]	; (1cb4 <udc_process_setup+0x434>)
    1bce:	88db      	ldrh	r3, [r3, #6]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d138      	bne.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1bd4:	4b37      	ldr	r3, [pc, #220]	; (1cb4 <udc_process_setup+0x434>)
    1bd6:	885b      	ldrh	r3, [r3, #2]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d134      	bne.n	1c46 <udc_process_setup+0x3c6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1bdc:	4c35      	ldr	r4, [pc, #212]	; (1cb4 <udc_process_setup+0x434>)
    1bde:	7920      	ldrb	r0, [r4, #4]
    1be0:	4b35      	ldr	r3, [pc, #212]	; (1cb8 <udc_process_setup+0x438>)
    1be2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1be4:	7920      	ldrb	r0, [r4, #4]
    1be6:	4b35      	ldr	r3, [pc, #212]	; (1cbc <udc_process_setup+0x43c>)
    1be8:	4798      	blx	r3
    1bea:	e002      	b.n	1bf2 <udc_process_setup+0x372>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1bec:	2000      	movs	r0, #0
    1bee:	e000      	b.n	1bf2 <udc_process_setup+0x372>
				break;
			}
		}
#endif
	}
	return false;
    1bf0:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1bf2:	2800      	cmp	r0, #0
    1bf4:	d15c      	bne.n	1cb0 <udc_process_setup+0x430>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1bf6:	4b2f      	ldr	r3, [pc, #188]	; (1cb4 <udc_process_setup+0x434>)
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	221f      	movs	r2, #31
    1bfc:	4013      	ands	r3, r2
    1bfe:	2b01      	cmp	r3, #1
    1c00:	d121      	bne.n	1c46 <udc_process_setup+0x3c6>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1c02:	4b2f      	ldr	r3, [pc, #188]	; (1cc0 <udc_process_setup+0x440>)
    1c04:	781b      	ldrb	r3, [r3, #0]
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c06:	2000      	movs	r0, #0
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d051      	beq.n	1cb0 <udc_process_setup+0x430>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c0c:	4b29      	ldr	r3, [pc, #164]	; (1cb4 <udc_process_setup+0x434>)
    1c0e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c10:	4b2c      	ldr	r3, [pc, #176]	; (1cc4 <udc_process_setup+0x444>)
    1c12:	681d      	ldr	r5, [r3, #0]
    1c14:	682b      	ldr	r3, [r5, #0]
    1c16:	791b      	ldrb	r3, [r3, #4]
    1c18:	42a3      	cmp	r3, r4
    1c1a:	d949      	bls.n	1cb0 <udc_process_setup+0x430>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c1c:	2100      	movs	r1, #0
    1c1e:	0020      	movs	r0, r4
    1c20:	4b29      	ldr	r3, [pc, #164]	; (1cc8 <udc_process_setup+0x448>)
    1c22:	4798      	blx	r3
    1c24:	2800      	cmp	r0, #0
    1c26:	d00e      	beq.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c28:	686b      	ldr	r3, [r5, #4]
    1c2a:	00a2      	lsls	r2, r4, #2
    1c2c:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c2e:	68eb      	ldr	r3, [r5, #12]
    1c30:	4798      	blx	r3
    1c32:	0001      	movs	r1, r0
    1c34:	0020      	movs	r0, r4
    1c36:	4b24      	ldr	r3, [pc, #144]	; (1cc8 <udc_process_setup+0x448>)
    1c38:	4798      	blx	r3
    1c3a:	2800      	cmp	r0, #0
    1c3c:	d003      	beq.n	1c46 <udc_process_setup+0x3c6>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1c3e:	68ab      	ldr	r3, [r5, #8]
    1c40:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1c42:	2800      	cmp	r0, #0
    1c44:	d134      	bne.n	1cb0 <udc_process_setup+0x430>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1c46:	4b1b      	ldr	r3, [pc, #108]	; (1cb4 <udc_process_setup+0x434>)
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	221f      	movs	r2, #31
    1c4c:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c4e:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1c50:	2b02      	cmp	r3, #2
    1c52:	d12d      	bne.n	1cb0 <udc_process_setup+0x430>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1c54:	4b1a      	ldr	r3, [pc, #104]	; (1cc0 <udc_process_setup+0x440>)
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d029      	beq.n	1cb0 <udc_process_setup+0x430>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c5c:	4b19      	ldr	r3, [pc, #100]	; (1cc4 <udc_process_setup+0x444>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	681a      	ldr	r2, [r3, #0]
    1c62:	7912      	ldrb	r2, [r2, #4]
    1c64:	2a00      	cmp	r2, #0
    1c66:	d018      	beq.n	1c9a <udc_process_setup+0x41a>
    1c68:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c6a:	4e17      	ldr	r6, [pc, #92]	; (1cc8 <udc_process_setup+0x448>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c6c:	4f15      	ldr	r7, [pc, #84]	; (1cc4 <udc_process_setup+0x444>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c6e:	685b      	ldr	r3, [r3, #4]
    1c70:	00aa      	lsls	r2, r5, #2
    1c72:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c74:	68e3      	ldr	r3, [r4, #12]
    1c76:	4798      	blx	r3
    1c78:	0001      	movs	r1, r0
    1c7a:	0028      	movs	r0, r5
    1c7c:	47b0      	blx	r6
    1c7e:	2800      	cmp	r0, #0
    1c80:	d016      	beq.n	1cb0 <udc_process_setup+0x430>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c82:	68a3      	ldr	r3, [r4, #8]
    1c84:	4798      	blx	r3
    1c86:	2800      	cmp	r0, #0
    1c88:	d112      	bne.n	1cb0 <udc_process_setup+0x430>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c8a:	3501      	adds	r5, #1
    1c8c:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c8e:	683b      	ldr	r3, [r7, #0]
    1c90:	681a      	ldr	r2, [r3, #0]
    1c92:	7912      	ldrb	r2, [r2, #4]
    1c94:	42aa      	cmp	r2, r5
    1c96:	d8ea      	bhi.n	1c6e <udc_process_setup+0x3ee>
    1c98:	e00a      	b.n	1cb0 <udc_process_setup+0x430>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c9a:	2000      	movs	r0, #0
    1c9c:	e008      	b.n	1cb0 <udc_process_setup+0x430>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c9e:	2260      	movs	r2, #96	; 0x60
    1ca0:	421a      	tst	r2, r3
    1ca2:	d1a8      	bne.n	1bf6 <udc_process_setup+0x376>
    1ca4:	e6b9      	b.n	1a1a <udc_process_setup+0x19a>
    1ca6:	2160      	movs	r1, #96	; 0x60
    1ca8:	4219      	tst	r1, r3
    1caa:	d1a4      	bne.n	1bf6 <udc_process_setup+0x376>
    1cac:	e5fa      	b.n	18a4 <udc_process_setup+0x24>
		if (udc_reqstd()) {
			return true;
    1cae:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	20000438 	.word	0x20000438
    1cb8:	00002c75 	.word	0x00002c75
    1cbc:	00002e35 	.word	0x00002e35
    1cc0:	20000118 	.word	0x20000118
    1cc4:	20000110 	.word	0x20000110
    1cc8:	0000169d 	.word	0x0000169d

00001ccc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1ccc:	4b0c      	ldr	r3, [pc, #48]	; (1d00 <cpu_irq_enter_critical+0x34>)
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d110      	bne.n	1cf6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1cd4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d109      	bne.n	1cf0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1cdc:	b672      	cpsid	i
    1cde:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1ce2:	2200      	movs	r2, #0
    1ce4:	4b07      	ldr	r3, [pc, #28]	; (1d04 <cpu_irq_enter_critical+0x38>)
    1ce6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1ce8:	3201      	adds	r2, #1
    1cea:	4b07      	ldr	r3, [pc, #28]	; (1d08 <cpu_irq_enter_critical+0x3c>)
    1cec:	701a      	strb	r2, [r3, #0]
    1cee:	e002      	b.n	1cf6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1cf0:	2200      	movs	r2, #0
    1cf2:	4b05      	ldr	r3, [pc, #20]	; (1d08 <cpu_irq_enter_critical+0x3c>)
    1cf4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1cf6:	4a02      	ldr	r2, [pc, #8]	; (1d00 <cpu_irq_enter_critical+0x34>)
    1cf8:	6813      	ldr	r3, [r2, #0]
    1cfa:	3301      	adds	r3, #1
    1cfc:	6013      	str	r3, [r2, #0]
}
    1cfe:	4770      	bx	lr
    1d00:	20000120 	.word	0x20000120
    1d04:	200000d8 	.word	0x200000d8
    1d08:	20000124 	.word	0x20000124

00001d0c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d0c:	4b08      	ldr	r3, [pc, #32]	; (1d30 <cpu_irq_leave_critical+0x24>)
    1d0e:	681a      	ldr	r2, [r3, #0]
    1d10:	3a01      	subs	r2, #1
    1d12:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d14:	681b      	ldr	r3, [r3, #0]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d109      	bne.n	1d2e <cpu_irq_leave_critical+0x22>
    1d1a:	4b06      	ldr	r3, [pc, #24]	; (1d34 <cpu_irq_leave_critical+0x28>)
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d005      	beq.n	1d2e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d22:	2201      	movs	r2, #1
    1d24:	4b04      	ldr	r3, [pc, #16]	; (1d38 <cpu_irq_leave_critical+0x2c>)
    1d26:	701a      	strb	r2, [r3, #0]
    1d28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d2c:	b662      	cpsie	i
	}
}
    1d2e:	4770      	bx	lr
    1d30:	20000120 	.word	0x20000120
    1d34:	20000124 	.word	0x20000124
    1d38:	200000d8 	.word	0x200000d8

00001d3c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d3e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1d40:	ac01      	add	r4, sp, #4
    1d42:	2501      	movs	r5, #1
    1d44:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1d46:	2700      	movs	r7, #0
    1d48:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d4a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d4c:	0021      	movs	r1, r4
    1d4e:	2011      	movs	r0, #17
    1d50:	4e06      	ldr	r6, [pc, #24]	; (1d6c <system_board_init+0x30>)
    1d52:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d54:	2280      	movs	r2, #128	; 0x80
    1d56:	0292      	lsls	r2, r2, #10
    1d58:	4b05      	ldr	r3, [pc, #20]	; (1d70 <system_board_init+0x34>)
    1d5a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d5c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d5e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d60:	0021      	movs	r1, r4
    1d62:	200f      	movs	r0, #15
    1d64:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1d66:	b003      	add	sp, #12
    1d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	00001f55 	.word	0x00001f55
    1d70:	41004400 	.word	0x41004400

00001d74 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d74:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1d76:	2a00      	cmp	r2, #0
    1d78:	d10d      	bne.n	1d96 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1d7a:	008b      	lsls	r3, r1, #2
    1d7c:	4a07      	ldr	r2, [pc, #28]	; (1d9c <extint_register_callback+0x28>)
    1d7e:	589b      	ldr	r3, [r3, r2]
    1d80:	2b00      	cmp	r3, #0
    1d82:	d103      	bne.n	1d8c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    1d84:	0089      	lsls	r1, r1, #2
    1d86:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1d88:	2300      	movs	r3, #0
    1d8a:	e004      	b.n	1d96 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1d8c:	4283      	cmp	r3, r0
    1d8e:	d001      	beq.n	1d94 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1d90:	231d      	movs	r3, #29
    1d92:	e000      	b.n	1d96 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1d94:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1d96:	0018      	movs	r0, r3
    1d98:	4770      	bx	lr
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	20000250 	.word	0x20000250

00001da0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1da0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1da2:	2900      	cmp	r1, #0
    1da4:	d107      	bne.n	1db6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1da6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1da8:	281f      	cmp	r0, #31
    1daa:	d800      	bhi.n	1dae <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1dac:	4a03      	ldr	r2, [pc, #12]	; (1dbc <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1dae:	2301      	movs	r3, #1
    1db0:	4083      	lsls	r3, r0
    1db2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1db4:	2300      	movs	r3, #0
}
    1db6:	0018      	movs	r0, r3
    1db8:	4770      	bx	lr
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	40001800 	.word	0x40001800

00001dc0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1dc0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1dc2:	2900      	cmp	r1, #0
    1dc4:	d107      	bne.n	1dd6 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    1dc6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1dc8:	281f      	cmp	r0, #31
    1dca:	d800      	bhi.n	1dce <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1dcc:	4a03      	ldr	r2, [pc, #12]	; (1ddc <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    1dce:	2301      	movs	r3, #1
    1dd0:	4083      	lsls	r3, r0
    1dd2:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1dd4:	2300      	movs	r3, #0
}
    1dd6:	0018      	movs	r0, r3
    1dd8:	4770      	bx	lr
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	40001800 	.word	0x40001800

00001de0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1de0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1de2:	2200      	movs	r2, #0
    1de4:	4b15      	ldr	r3, [pc, #84]	; (1e3c <EIC_Handler+0x5c>)
    1de6:	701a      	strb	r2, [r3, #0]
    1de8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1dea:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1dec:	4e14      	ldr	r6, [pc, #80]	; (1e40 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1dee:	4c13      	ldr	r4, [pc, #76]	; (1e3c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1df0:	2b1f      	cmp	r3, #31
    1df2:	d919      	bls.n	1e28 <EIC_Handler+0x48>
    1df4:	e00f      	b.n	1e16 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1df6:	2100      	movs	r1, #0
    1df8:	e000      	b.n	1dfc <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1dfa:	4912      	ldr	r1, [pc, #72]	; (1e44 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1dfc:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1dfe:	009b      	lsls	r3, r3, #2
    1e00:	599b      	ldr	r3, [r3, r6]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d000      	beq.n	1e08 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1e06:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1e08:	7823      	ldrb	r3, [r4, #0]
    1e0a:	3301      	adds	r3, #1
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	7023      	strb	r3, [r4, #0]
    1e10:	2b0f      	cmp	r3, #15
    1e12:	d9ed      	bls.n	1df0 <EIC_Handler+0x10>
    1e14:	e011      	b.n	1e3a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e16:	0029      	movs	r1, r5
    1e18:	4019      	ands	r1, r3
    1e1a:	2201      	movs	r2, #1
    1e1c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1e1e:	2100      	movs	r1, #0
    1e20:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1e22:	4211      	tst	r1, r2
    1e24:	d1e7      	bne.n	1df6 <EIC_Handler+0x16>
    1e26:	e7ef      	b.n	1e08 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e28:	0029      	movs	r1, r5
    1e2a:	4019      	ands	r1, r3
    1e2c:	2201      	movs	r2, #1
    1e2e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1e30:	4904      	ldr	r1, [pc, #16]	; (1e44 <EIC_Handler+0x64>)
    1e32:	6909      	ldr	r1, [r1, #16]
    1e34:	4211      	tst	r1, r2
    1e36:	d1e0      	bne.n	1dfa <EIC_Handler+0x1a>
    1e38:	e7e6      	b.n	1e08 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
    1e3c:	2000024d 	.word	0x2000024d
    1e40:	20000250 	.word	0x20000250
    1e44:	40001800 	.word	0x40001800

00001e48 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1e48:	4a04      	ldr	r2, [pc, #16]	; (1e5c <_extint_enable+0x14>)
    1e4a:	7811      	ldrb	r1, [r2, #0]
    1e4c:	2302      	movs	r3, #2
    1e4e:	430b      	orrs	r3, r1
    1e50:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e52:	7853      	ldrb	r3, [r2, #1]
    1e54:	b25b      	sxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	dbfb      	blt.n	1e52 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1e5a:	4770      	bx	lr
    1e5c:	40001800 	.word	0x40001800

00001e60 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1e60:	b500      	push	{lr}
    1e62:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e64:	4a12      	ldr	r2, [pc, #72]	; (1eb0 <_system_extint_init+0x50>)
    1e66:	6991      	ldr	r1, [r2, #24]
    1e68:	2340      	movs	r3, #64	; 0x40
    1e6a:	430b      	orrs	r3, r1
    1e6c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1e6e:	a901      	add	r1, sp, #4
    1e70:	2300      	movs	r3, #0
    1e72:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1e74:	2005      	movs	r0, #5
    1e76:	4b0f      	ldr	r3, [pc, #60]	; (1eb4 <_system_extint_init+0x54>)
    1e78:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    1e7a:	2005      	movs	r0, #5
    1e7c:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <_system_extint_init+0x58>)
    1e7e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1e80:	4a0e      	ldr	r2, [pc, #56]	; (1ebc <_system_extint_init+0x5c>)
    1e82:	7811      	ldrb	r1, [r2, #0]
    1e84:	2301      	movs	r3, #1
    1e86:	430b      	orrs	r3, r1
    1e88:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e8a:	7853      	ldrb	r3, [r2, #1]
    1e8c:	b25b      	sxtb	r3, r3
    1e8e:	2b00      	cmp	r3, #0
    1e90:	dbfb      	blt.n	1e8a <_system_extint_init+0x2a>
    1e92:	4b0b      	ldr	r3, [pc, #44]	; (1ec0 <_system_extint_init+0x60>)
    1e94:	0019      	movs	r1, r3
    1e96:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1e98:	2200      	movs	r2, #0
    1e9a:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1e9c:	4299      	cmp	r1, r3
    1e9e:	d1fc      	bne.n	1e9a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ea0:	2210      	movs	r2, #16
    1ea2:	4b08      	ldr	r3, [pc, #32]	; (1ec4 <_system_extint_init+0x64>)
    1ea4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1ea6:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <_system_extint_init+0x68>)
    1ea8:	4798      	blx	r3
}
    1eaa:	b003      	add	sp, #12
    1eac:	bd00      	pop	{pc}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	40000400 	.word	0x40000400
    1eb4:	000024a5 	.word	0x000024a5
    1eb8:	00002419 	.word	0x00002419
    1ebc:	40001800 	.word	0x40001800
    1ec0:	20000250 	.word	0x20000250
    1ec4:	e000e100 	.word	0xe000e100
    1ec8:	00001e49 	.word	0x00001e49

00001ecc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1ecc:	2300      	movs	r3, #0
    1ece:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1ed0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ed2:	2201      	movs	r2, #1
    1ed4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1ed6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1ed8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1eda:	3302      	adds	r3, #2
    1edc:	72c3      	strb	r3, [r0, #11]
}
    1ede:	4770      	bx	lr

00001ee0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	b083      	sub	sp, #12
    1ee4:	0005      	movs	r5, r0
    1ee6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ee8:	a901      	add	r1, sp, #4
    1eea:	2300      	movs	r3, #0
    1eec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1eee:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1ef0:	7923      	ldrb	r3, [r4, #4]
    1ef2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1ef4:	7a23      	ldrb	r3, [r4, #8]
    1ef6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1ef8:	7820      	ldrb	r0, [r4, #0]
    1efa:	4b14      	ldr	r3, [pc, #80]	; (1f4c <extint_chan_set_config+0x6c>)
    1efc:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1efe:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1f00:	2d1f      	cmp	r5, #31
    1f02:	d800      	bhi.n	1f06 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1f04:	4812      	ldr	r0, [pc, #72]	; (1f50 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1f06:	2107      	movs	r1, #7
    1f08:	4029      	ands	r1, r5
    1f0a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1f0c:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1f0e:	7aa3      	ldrb	r3, [r4, #10]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d001      	beq.n	1f18 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    1f14:	2308      	movs	r3, #8
    1f16:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    1f18:	08eb      	lsrs	r3, r5, #3
    1f1a:	009b      	lsls	r3, r3, #2
    1f1c:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    1f1e:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f20:	270f      	movs	r7, #15
    1f22:	408f      	lsls	r7, r1
    1f24:	43be      	bics	r6, r7
    1f26:	408a      	lsls	r2, r1
    1f28:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1f2a:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1f2c:	7a63      	ldrb	r3, [r4, #9]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d005      	beq.n	1f3e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1f32:	6942      	ldr	r2, [r0, #20]
    1f34:	2301      	movs	r3, #1
    1f36:	40ab      	lsls	r3, r5
    1f38:	4313      	orrs	r3, r2
    1f3a:	6143      	str	r3, [r0, #20]
    1f3c:	e004      	b.n	1f48 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1f3e:	6943      	ldr	r3, [r0, #20]
    1f40:	2201      	movs	r2, #1
    1f42:	40aa      	lsls	r2, r5
    1f44:	4393      	bics	r3, r2
    1f46:	6143      	str	r3, [r0, #20]
	}
}
    1f48:	b003      	add	sp, #12
    1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4c:	0000259d 	.word	0x0000259d
    1f50:	40001800 	.word	0x40001800

00001f54 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1f54:	b500      	push	{lr}
    1f56:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f58:	ab01      	add	r3, sp, #4
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1f5e:	780a      	ldrb	r2, [r1, #0]
    1f60:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1f62:	784a      	ldrb	r2, [r1, #1]
    1f64:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1f66:	788a      	ldrb	r2, [r1, #2]
    1f68:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f6a:	0019      	movs	r1, r3
    1f6c:	4b01      	ldr	r3, [pc, #4]	; (1f74 <port_pin_set_config+0x20>)
    1f6e:	4798      	blx	r3
}
    1f70:	b003      	add	sp, #12
    1f72:	bd00      	pop	{pc}
    1f74:	0000259d 	.word	0x0000259d

00001f78 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1f78:	b510      	push	{r4, lr}
	switch (clock_source) {
    1f7a:	2808      	cmp	r0, #8
    1f7c:	d803      	bhi.n	1f86 <system_clock_source_get_hz+0xe>
    1f7e:	0080      	lsls	r0, r0, #2
    1f80:	4b1b      	ldr	r3, [pc, #108]	; (1ff0 <system_clock_source_get_hz+0x78>)
    1f82:	581b      	ldr	r3, [r3, r0]
    1f84:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1f86:	2000      	movs	r0, #0
    1f88:	e030      	b.n	1fec <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1f8a:	4b1a      	ldr	r3, [pc, #104]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1f8c:	6918      	ldr	r0, [r3, #16]
    1f8e:	e02d      	b.n	1fec <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1f90:	4b19      	ldr	r3, [pc, #100]	; (1ff8 <system_clock_source_get_hz+0x80>)
    1f92:	6a1b      	ldr	r3, [r3, #32]
    1f94:	059b      	lsls	r3, r3, #22
    1f96:	0f9b      	lsrs	r3, r3, #30
    1f98:	4818      	ldr	r0, [pc, #96]	; (1ffc <system_clock_source_get_hz+0x84>)
    1f9a:	40d8      	lsrs	r0, r3
    1f9c:	e026      	b.n	1fec <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1f9e:	4b15      	ldr	r3, [pc, #84]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1fa0:	6958      	ldr	r0, [r3, #20]
    1fa2:	e023      	b.n	1fec <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1fa4:	4b13      	ldr	r3, [pc, #76]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	2002      	movs	r0, #2
    1faa:	4018      	ands	r0, r3
    1fac:	d01e      	beq.n	1fec <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1fae:	4912      	ldr	r1, [pc, #72]	; (1ff8 <system_clock_source_get_hz+0x80>)
    1fb0:	2210      	movs	r2, #16
    1fb2:	68cb      	ldr	r3, [r1, #12]
    1fb4:	421a      	tst	r2, r3
    1fb6:	d0fc      	beq.n	1fb2 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1fb8:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1fba:	681b      	ldr	r3, [r3, #0]
    1fbc:	075b      	lsls	r3, r3, #29
    1fbe:	d514      	bpl.n	1fea <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1fc0:	2000      	movs	r0, #0
    1fc2:	4b0f      	ldr	r3, [pc, #60]	; (2000 <STACK_SIZE>)
    1fc4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1fc6:	4b0b      	ldr	r3, [pc, #44]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1fc8:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1fca:	041b      	lsls	r3, r3, #16
    1fcc:	0c1b      	lsrs	r3, r3, #16
    1fce:	4358      	muls	r0, r3
    1fd0:	e00c      	b.n	1fec <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1fd2:	2350      	movs	r3, #80	; 0x50
    1fd4:	4a08      	ldr	r2, [pc, #32]	; (1ff8 <system_clock_source_get_hz+0x80>)
    1fd6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1fd8:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1fda:	075b      	lsls	r3, r3, #29
    1fdc:	d506      	bpl.n	1fec <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <system_clock_source_get_hz+0x7c>)
    1fe0:	68d8      	ldr	r0, [r3, #12]
    1fe2:	e003      	b.n	1fec <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1fe4:	2080      	movs	r0, #128	; 0x80
    1fe6:	0200      	lsls	r0, r0, #8
    1fe8:	e000      	b.n	1fec <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1fea:	4806      	ldr	r0, [pc, #24]	; (2004 <STACK_SIZE+0x4>)
#endif

	default:
		return 0;
	}
}
    1fec:	bd10      	pop	{r4, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	00004614 	.word	0x00004614
    1ff4:	20000128 	.word	0x20000128
    1ff8:	40000800 	.word	0x40000800
    1ffc:	007a1200 	.word	0x007a1200
    2000:	000024c1 	.word	0x000024c1
    2004:	02dc6c00 	.word	0x02dc6c00

00002008 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2008:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    200a:	4c0c      	ldr	r4, [pc, #48]	; (203c <system_clock_source_osc8m_set_config+0x34>)
    200c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    200e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2010:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2012:	7842      	ldrb	r2, [r0, #1]
    2014:	2001      	movs	r0, #1
    2016:	4002      	ands	r2, r0
    2018:	0192      	lsls	r2, r2, #6
    201a:	2640      	movs	r6, #64	; 0x40
    201c:	43b3      	bics	r3, r6
    201e:	4313      	orrs	r3, r2
    2020:	0002      	movs	r2, r0
    2022:	402a      	ands	r2, r5
    2024:	01d2      	lsls	r2, r2, #7
    2026:	307f      	adds	r0, #127	; 0x7f
    2028:	4383      	bics	r3, r0
    202a:	4313      	orrs	r3, r2
    202c:	2203      	movs	r2, #3
    202e:	400a      	ands	r2, r1
    2030:	0212      	lsls	r2, r2, #8
    2032:	4903      	ldr	r1, [pc, #12]	; (2040 <system_clock_source_osc8m_set_config+0x38>)
    2034:	400b      	ands	r3, r1
    2036:	4313      	orrs	r3, r2
    2038:	6223      	str	r3, [r4, #32]
}
    203a:	bd70      	pop	{r4, r5, r6, pc}
    203c:	40000800 	.word	0x40000800
    2040:	fffffcff 	.word	0xfffffcff

00002044 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2044:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2046:	7a03      	ldrb	r3, [r0, #8]
    2048:	069b      	lsls	r3, r3, #26
    204a:	0c1a      	lsrs	r2, r3, #16
    204c:	8943      	ldrh	r3, [r0, #10]
    204e:	059b      	lsls	r3, r3, #22
    2050:	0d9b      	lsrs	r3, r3, #22
    2052:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    2054:	4c19      	ldr	r4, [pc, #100]	; (20bc <system_clock_source_dfll_set_config+0x78>)
    2056:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    2058:	7981      	ldrb	r1, [r0, #6]
    205a:	79c3      	ldrb	r3, [r0, #7]
    205c:	4319      	orrs	r1, r3
    205e:	8843      	ldrh	r3, [r0, #2]
    2060:	8882      	ldrh	r2, [r0, #4]
    2062:	4313      	orrs	r3, r2
    2064:	430b      	orrs	r3, r1
    2066:	7842      	ldrb	r2, [r0, #1]
    2068:	01d2      	lsls	r2, r2, #7
    206a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    206c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    206e:	7803      	ldrb	r3, [r0, #0]
    2070:	2b04      	cmp	r3, #4
    2072:	d10f      	bne.n	2094 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2074:	7b03      	ldrb	r3, [r0, #12]
    2076:	069b      	lsls	r3, r3, #26
    2078:	8a02      	ldrh	r2, [r0, #16]
    207a:	4313      	orrs	r3, r2
    207c:	0019      	movs	r1, r3
    207e:	89c3      	ldrh	r3, [r0, #14]
    2080:	041b      	lsls	r3, r3, #16
    2082:	4a0f      	ldr	r2, [pc, #60]	; (20c0 <system_clock_source_dfll_set_config+0x7c>)
    2084:	4013      	ands	r3, r2
    2086:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    2088:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    208a:	6821      	ldr	r1, [r4, #0]
    208c:	2304      	movs	r3, #4
    208e:	430b      	orrs	r3, r1
    2090:	6023      	str	r3, [r4, #0]
    2092:	e011      	b.n	20b8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2094:	2b20      	cmp	r3, #32
    2096:	d10f      	bne.n	20b8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2098:	7b03      	ldrb	r3, [r0, #12]
    209a:	069b      	lsls	r3, r3, #26
    209c:	8a02      	ldrh	r2, [r0, #16]
    209e:	4313      	orrs	r3, r2
    20a0:	0019      	movs	r1, r3
    20a2:	89c3      	ldrh	r3, [r0, #14]
    20a4:	041b      	lsls	r3, r3, #16
    20a6:	4a06      	ldr	r2, [pc, #24]	; (20c0 <system_clock_source_dfll_set_config+0x7c>)
    20a8:	4013      	ands	r3, r2
    20aa:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    20ac:	4a03      	ldr	r2, [pc, #12]	; (20bc <system_clock_source_dfll_set_config+0x78>)
    20ae:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    20b0:	6813      	ldr	r3, [r2, #0]
    20b2:	4904      	ldr	r1, [pc, #16]	; (20c4 <system_clock_source_dfll_set_config+0x80>)
    20b4:	430b      	orrs	r3, r1
    20b6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    20b8:	bd10      	pop	{r4, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	20000128 	.word	0x20000128
    20c0:	03ff0000 	.word	0x03ff0000
    20c4:	00000424 	.word	0x00000424

000020c8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    20c8:	2808      	cmp	r0, #8
    20ca:	d803      	bhi.n	20d4 <system_clock_source_enable+0xc>
    20cc:	0080      	lsls	r0, r0, #2
    20ce:	4b25      	ldr	r3, [pc, #148]	; (2164 <system_clock_source_enable+0x9c>)
    20d0:	581b      	ldr	r3, [r3, r0]
    20d2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    20d4:	2017      	movs	r0, #23
    20d6:	e044      	b.n	2162 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    20d8:	4a23      	ldr	r2, [pc, #140]	; (2168 <system_clock_source_enable+0xa0>)
    20da:	6a11      	ldr	r1, [r2, #32]
    20dc:	2302      	movs	r3, #2
    20de:	430b      	orrs	r3, r1
    20e0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    20e2:	2000      	movs	r0, #0
    20e4:	e03d      	b.n	2162 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    20e6:	4a20      	ldr	r2, [pc, #128]	; (2168 <system_clock_source_enable+0xa0>)
    20e8:	6991      	ldr	r1, [r2, #24]
    20ea:	2302      	movs	r3, #2
    20ec:	430b      	orrs	r3, r1
    20ee:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    20f0:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    20f2:	e036      	b.n	2162 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    20f4:	4a1c      	ldr	r2, [pc, #112]	; (2168 <system_clock_source_enable+0xa0>)
    20f6:	8a11      	ldrh	r1, [r2, #16]
    20f8:	2302      	movs	r3, #2
    20fa:	430b      	orrs	r3, r1
    20fc:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    20fe:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    2100:	e02f      	b.n	2162 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2102:	4a19      	ldr	r2, [pc, #100]	; (2168 <system_clock_source_enable+0xa0>)
    2104:	8a91      	ldrh	r1, [r2, #20]
    2106:	2302      	movs	r3, #2
    2108:	430b      	orrs	r3, r1
    210a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    210c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    210e:	e028      	b.n	2162 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2110:	4916      	ldr	r1, [pc, #88]	; (216c <system_clock_source_enable+0xa4>)
    2112:	680b      	ldr	r3, [r1, #0]
    2114:	2202      	movs	r2, #2
    2116:	4313      	orrs	r3, r2
    2118:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    211a:	4b13      	ldr	r3, [pc, #76]	; (2168 <system_clock_source_enable+0xa0>)
    211c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    211e:	0019      	movs	r1, r3
    2120:	320e      	adds	r2, #14
    2122:	68cb      	ldr	r3, [r1, #12]
    2124:	421a      	tst	r2, r3
    2126:	d0fc      	beq.n	2122 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2128:	4a10      	ldr	r2, [pc, #64]	; (216c <system_clock_source_enable+0xa4>)
    212a:	6891      	ldr	r1, [r2, #8]
    212c:	4b0e      	ldr	r3, [pc, #56]	; (2168 <system_clock_source_enable+0xa0>)
    212e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2130:	6852      	ldr	r2, [r2, #4]
    2132:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2134:	2200      	movs	r2, #0
    2136:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2138:	0019      	movs	r1, r3
    213a:	3210      	adds	r2, #16
    213c:	68cb      	ldr	r3, [r1, #12]
    213e:	421a      	tst	r2, r3
    2140:	d0fc      	beq.n	213c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2142:	4b0a      	ldr	r3, [pc, #40]	; (216c <system_clock_source_enable+0xa4>)
    2144:	681b      	ldr	r3, [r3, #0]
    2146:	b29b      	uxth	r3, r3
    2148:	4a07      	ldr	r2, [pc, #28]	; (2168 <system_clock_source_enable+0xa0>)
    214a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    214c:	2000      	movs	r0, #0
    214e:	e008      	b.n	2162 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2150:	4905      	ldr	r1, [pc, #20]	; (2168 <system_clock_source_enable+0xa0>)
    2152:	2244      	movs	r2, #68	; 0x44
    2154:	5c88      	ldrb	r0, [r1, r2]
    2156:	2302      	movs	r3, #2
    2158:	4303      	orrs	r3, r0
    215a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    215c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    215e:	e000      	b.n	2162 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2160:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    2162:	4770      	bx	lr
    2164:	00004638 	.word	0x00004638
    2168:	40000800 	.word	0x40000800
    216c:	20000128 	.word	0x20000128

00002170 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2170:	b530      	push	{r4, r5, lr}
    2172:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2174:	22c2      	movs	r2, #194	; 0xc2
    2176:	00d2      	lsls	r2, r2, #3
    2178:	4b2f      	ldr	r3, [pc, #188]	; (2238 <system_clock_init+0xc8>)
    217a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    217c:	492f      	ldr	r1, [pc, #188]	; (223c <system_clock_init+0xcc>)
    217e:	684b      	ldr	r3, [r1, #4]
    2180:	221e      	movs	r2, #30
    2182:	4393      	bics	r3, r2
    2184:	3a1a      	subs	r2, #26
    2186:	4313      	orrs	r3, r2
    2188:	604b      	str	r3, [r1, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    218a:	3a03      	subs	r2, #3
    218c:	ab01      	add	r3, sp, #4
    218e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2190:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2192:	4d2b      	ldr	r5, [pc, #172]	; (2240 <system_clock_init+0xd0>)
    2194:	b2e0      	uxtb	r0, r4
    2196:	a901      	add	r1, sp, #4
    2198:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    219a:	3401      	adds	r4, #1
    219c:	2c25      	cmp	r4, #37	; 0x25
    219e:	d1f9      	bne.n	2194 <system_clock_init+0x24>
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    21a0:	ab05      	add	r3, sp, #20
    21a2:	2200      	movs	r2, #0
    21a4:	2100      	movs	r1, #0
    21a6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    21a8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    21aa:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    21ac:	3120      	adds	r1, #32
    21ae:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    21b0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    21b2:	4b24      	ldr	r3, [pc, #144]	; (2244 <system_clock_init+0xd4>)
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    21b8:	2b3f      	cmp	r3, #63	; 0x3f
    21ba:	d100      	bne.n	21be <system_clock_init+0x4e>
		coarse = 0x1f;
    21bc:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    21be:	a805      	add	r0, sp, #20
    21c0:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    21c2:	2307      	movs	r3, #7
    21c4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    21c6:	3303      	adds	r3, #3
    21c8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    21ca:	4b1f      	ldr	r3, [pc, #124]	; (2248 <system_clock_init+0xd8>)
    21cc:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    21ce:	3bff      	subs	r3, #255	; 0xff
    21d0:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    21d2:	4b1e      	ldr	r3, [pc, #120]	; (224c <system_clock_init+0xdc>)
    21d4:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    21d6:	4b1e      	ldr	r3, [pc, #120]	; (2250 <system_clock_init+0xe0>)
    21d8:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    21da:	a804      	add	r0, sp, #16
    21dc:	2300      	movs	r3, #0
    21de:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
    21e0:	2201      	movs	r2, #1
    21e2:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    21e4:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    21e6:	4b1b      	ldr	r3, [pc, #108]	; (2254 <system_clock_init+0xe4>)
    21e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    21ea:	2006      	movs	r0, #6
    21ec:	4c1a      	ldr	r4, [pc, #104]	; (2258 <system_clock_init+0xe8>)
    21ee:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    21f0:	4b1a      	ldr	r3, [pc, #104]	; (225c <system_clock_init+0xec>)
    21f2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    21f4:	2007      	movs	r0, #7
    21f6:	47a0      	blx	r4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    21f8:	490f      	ldr	r1, [pc, #60]	; (2238 <system_clock_init+0xc8>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    21fa:	2210      	movs	r2, #16

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    21fc:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    21fe:	421a      	tst	r2, r3
    2200:	d0fc      	beq.n	21fc <system_clock_init+0x8c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2202:	4a0d      	ldr	r2, [pc, #52]	; (2238 <system_clock_init+0xc8>)
    2204:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2206:	2380      	movs	r3, #128	; 0x80
    2208:	430b      	orrs	r3, r1
    220a:	8493      	strh	r3, [r2, #36]	; 0x24
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    220c:	4a14      	ldr	r2, [pc, #80]	; (2260 <system_clock_init+0xf0>)
    220e:	2300      	movs	r3, #0
    2210:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2212:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2214:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2216:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2218:	a901      	add	r1, sp, #4
    221a:	2201      	movs	r2, #1
    221c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    221e:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    2220:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2222:	3307      	adds	r3, #7
    2224:	700b      	strb	r3, [r1, #0]
    2226:	720a      	strb	r2, [r1, #8]
    2228:	2000      	movs	r0, #0
    222a:	4b0e      	ldr	r3, [pc, #56]	; (2264 <system_clock_init+0xf4>)
    222c:	4798      	blx	r3
    222e:	2000      	movs	r0, #0
    2230:	4b0d      	ldr	r3, [pc, #52]	; (2268 <system_clock_init+0xf8>)
    2232:	4798      	blx	r3
#endif
}
    2234:	b00b      	add	sp, #44	; 0x2c
    2236:	bd30      	pop	{r4, r5, pc}
    2238:	40000800 	.word	0x40000800
    223c:	41004000 	.word	0x41004000
    2240:	000024a5 	.word	0x000024a5
    2244:	00806024 	.word	0x00806024
    2248:	000001ff 	.word	0x000001ff
    224c:	ffffbb80 	.word	0xffffbb80
    2250:	00002045 	.word	0x00002045
    2254:	00002009 	.word	0x00002009
    2258:	000020c9 	.word	0x000020c9
    225c:	0000226d 	.word	0x0000226d
    2260:	40000400 	.word	0x40000400
    2264:	00002291 	.word	0x00002291
    2268:	00002349 	.word	0x00002349

0000226c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    226c:	4a06      	ldr	r2, [pc, #24]	; (2288 <system_gclk_init+0x1c>)
    226e:	6991      	ldr	r1, [r2, #24]
    2270:	2308      	movs	r3, #8
    2272:	430b      	orrs	r3, r1
    2274:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2276:	2201      	movs	r2, #1
    2278:	4b04      	ldr	r3, [pc, #16]	; (228c <system_gclk_init+0x20>)
    227a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    227c:	0019      	movs	r1, r3
    227e:	780b      	ldrb	r3, [r1, #0]
    2280:	4213      	tst	r3, r2
    2282:	d1fc      	bne.n	227e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2284:	4770      	bx	lr
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	40000400 	.word	0x40000400
    228c:	40000c00 	.word	0x40000c00

00002290 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2290:	b570      	push	{r4, r5, r6, lr}
    2292:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2294:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2296:	780c      	ldrb	r4, [r1, #0]
    2298:	0224      	lsls	r4, r4, #8
    229a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    229c:	784b      	ldrb	r3, [r1, #1]
    229e:	2b00      	cmp	r3, #0
    22a0:	d002      	beq.n	22a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    22a2:	2380      	movs	r3, #128	; 0x80
    22a4:	02db      	lsls	r3, r3, #11
    22a6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    22a8:	7a4b      	ldrb	r3, [r1, #9]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d002      	beq.n	22b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    22ae:	2380      	movs	r3, #128	; 0x80
    22b0:	031b      	lsls	r3, r3, #12
    22b2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    22b4:	6848      	ldr	r0, [r1, #4]
    22b6:	2801      	cmp	r0, #1
    22b8:	d918      	bls.n	22ec <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    22ba:	1e43      	subs	r3, r0, #1
    22bc:	4218      	tst	r0, r3
    22be:	d110      	bne.n	22e2 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    22c0:	2802      	cmp	r0, #2
    22c2:	d906      	bls.n	22d2 <system_gclk_gen_set_config+0x42>
    22c4:	2302      	movs	r3, #2
    22c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    22c8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    22ca:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    22cc:	4298      	cmp	r0, r3
    22ce:	d8fb      	bhi.n	22c8 <system_gclk_gen_set_config+0x38>
    22d0:	e000      	b.n	22d4 <system_gclk_gen_set_config+0x44>
    22d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    22d4:	0212      	lsls	r2, r2, #8
    22d6:	4332      	orrs	r2, r6
    22d8:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    22da:	2380      	movs	r3, #128	; 0x80
    22dc:	035b      	lsls	r3, r3, #13
    22de:	431c      	orrs	r4, r3
    22e0:	e004      	b.n	22ec <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    22e2:	0205      	lsls	r5, r0, #8
    22e4:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    22e6:	2380      	movs	r3, #128	; 0x80
    22e8:	029b      	lsls	r3, r3, #10
    22ea:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    22ec:	7a0b      	ldrb	r3, [r1, #8]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d002      	beq.n	22f8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    22f2:	2380      	movs	r3, #128	; 0x80
    22f4:	039b      	lsls	r3, r3, #14
    22f6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22f8:	4a0f      	ldr	r2, [pc, #60]	; (2338 <system_gclk_gen_set_config+0xa8>)
    22fa:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    22fc:	b25b      	sxtb	r3, r3
    22fe:	2b00      	cmp	r3, #0
    2300:	dbfb      	blt.n	22fa <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2302:	4b0e      	ldr	r3, [pc, #56]	; (233c <system_gclk_gen_set_config+0xac>)
    2304:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2306:	4b0e      	ldr	r3, [pc, #56]	; (2340 <system_gclk_gen_set_config+0xb0>)
    2308:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    230a:	4a0b      	ldr	r2, [pc, #44]	; (2338 <system_gclk_gen_set_config+0xa8>)
    230c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    230e:	b25b      	sxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	dbfb      	blt.n	230c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2314:	4b08      	ldr	r3, [pc, #32]	; (2338 <system_gclk_gen_set_config+0xa8>)
    2316:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2318:	001a      	movs	r2, r3
    231a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    231c:	b25b      	sxtb	r3, r3
    231e:	2b00      	cmp	r3, #0
    2320:	dbfb      	blt.n	231a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2322:	4a05      	ldr	r2, [pc, #20]	; (2338 <system_gclk_gen_set_config+0xa8>)
    2324:	6851      	ldr	r1, [r2, #4]
    2326:	2380      	movs	r3, #128	; 0x80
    2328:	025b      	lsls	r3, r3, #9
    232a:	400b      	ands	r3, r1
    232c:	431c      	orrs	r4, r3
    232e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2330:	4b04      	ldr	r3, [pc, #16]	; (2344 <system_gclk_gen_set_config+0xb4>)
    2332:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2334:	bd70      	pop	{r4, r5, r6, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	40000c00 	.word	0x40000c00
    233c:	00001ccd 	.word	0x00001ccd
    2340:	40000c08 	.word	0x40000c08
    2344:	00001d0d 	.word	0x00001d0d

00002348 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2348:	b510      	push	{r4, lr}
    234a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    234c:	4a0b      	ldr	r2, [pc, #44]	; (237c <system_gclk_gen_enable+0x34>)
    234e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2350:	b25b      	sxtb	r3, r3
    2352:	2b00      	cmp	r3, #0
    2354:	dbfb      	blt.n	234e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <system_gclk_gen_enable+0x38>)
    2358:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    235a:	4b0a      	ldr	r3, [pc, #40]	; (2384 <system_gclk_gen_enable+0x3c>)
    235c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    235e:	4a07      	ldr	r2, [pc, #28]	; (237c <system_gclk_gen_enable+0x34>)
    2360:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2362:	b25b      	sxtb	r3, r3
    2364:	2b00      	cmp	r3, #0
    2366:	dbfb      	blt.n	2360 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2368:	4a04      	ldr	r2, [pc, #16]	; (237c <system_gclk_gen_enable+0x34>)
    236a:	6853      	ldr	r3, [r2, #4]
    236c:	2180      	movs	r1, #128	; 0x80
    236e:	0249      	lsls	r1, r1, #9
    2370:	430b      	orrs	r3, r1
    2372:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <system_gclk_gen_enable+0x40>)
    2376:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	40000c00 	.word	0x40000c00
    2380:	00001ccd 	.word	0x00001ccd
    2384:	40000c04 	.word	0x40000c04
    2388:	00001d0d 	.word	0x00001d0d

0000238c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2390:	4a1a      	ldr	r2, [pc, #104]	; (23fc <system_gclk_gen_get_hz+0x70>)
    2392:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2394:	b25b      	sxtb	r3, r3
    2396:	2b00      	cmp	r3, #0
    2398:	dbfb      	blt.n	2392 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    239a:	4b19      	ldr	r3, [pc, #100]	; (2400 <system_gclk_gen_get_hz+0x74>)
    239c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    239e:	4b19      	ldr	r3, [pc, #100]	; (2404 <system_gclk_gen_get_hz+0x78>)
    23a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23a2:	4a16      	ldr	r2, [pc, #88]	; (23fc <system_gclk_gen_get_hz+0x70>)
    23a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    23a6:	b25b      	sxtb	r3, r3
    23a8:	2b00      	cmp	r3, #0
    23aa:	dbfb      	blt.n	23a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    23ac:	4e13      	ldr	r6, [pc, #76]	; (23fc <system_gclk_gen_get_hz+0x70>)
    23ae:	6870      	ldr	r0, [r6, #4]
    23b0:	04c0      	lsls	r0, r0, #19
    23b2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    23b4:	4b14      	ldr	r3, [pc, #80]	; (2408 <system_gclk_gen_get_hz+0x7c>)
    23b6:	4798      	blx	r3
    23b8:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23ba:	4b12      	ldr	r3, [pc, #72]	; (2404 <system_gclk_gen_get_hz+0x78>)
    23bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    23be:	6876      	ldr	r6, [r6, #4]
    23c0:	02f6      	lsls	r6, r6, #11
    23c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    23c4:	4b11      	ldr	r3, [pc, #68]	; (240c <system_gclk_gen_get_hz+0x80>)
    23c6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23c8:	4a0c      	ldr	r2, [pc, #48]	; (23fc <system_gclk_gen_get_hz+0x70>)
    23ca:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    23cc:	b25b      	sxtb	r3, r3
    23ce:	2b00      	cmp	r3, #0
    23d0:	dbfb      	blt.n	23ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    23d2:	4b0a      	ldr	r3, [pc, #40]	; (23fc <system_gclk_gen_get_hz+0x70>)
    23d4:	689c      	ldr	r4, [r3, #8]
    23d6:	0224      	lsls	r4, r4, #8
    23d8:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    23da:	4b0d      	ldr	r3, [pc, #52]	; (2410 <system_gclk_gen_get_hz+0x84>)
    23dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    23de:	2e00      	cmp	r6, #0
    23e0:	d107      	bne.n	23f2 <system_gclk_gen_get_hz+0x66>
    23e2:	2c01      	cmp	r4, #1
    23e4:	d907      	bls.n	23f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    23e6:	0021      	movs	r1, r4
    23e8:	0028      	movs	r0, r5
    23ea:	4b0a      	ldr	r3, [pc, #40]	; (2414 <system_gclk_gen_get_hz+0x88>)
    23ec:	4798      	blx	r3
    23ee:	0005      	movs	r5, r0
    23f0:	e001      	b.n	23f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    23f2:	3401      	adds	r4, #1
    23f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    23f6:	0028      	movs	r0, r5
    23f8:	bd70      	pop	{r4, r5, r6, pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	40000c00 	.word	0x40000c00
    2400:	00001ccd 	.word	0x00001ccd
    2404:	40000c04 	.word	0x40000c04
    2408:	00001f79 	.word	0x00001f79
    240c:	40000c08 	.word	0x40000c08
    2410:	00001d0d 	.word	0x00001d0d
    2414:	0000424d 	.word	0x0000424d

00002418 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2418:	b510      	push	{r4, lr}
    241a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    241c:	4b06      	ldr	r3, [pc, #24]	; (2438 <system_gclk_chan_enable+0x20>)
    241e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2420:	4b06      	ldr	r3, [pc, #24]	; (243c <system_gclk_chan_enable+0x24>)
    2422:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2424:	4a06      	ldr	r2, [pc, #24]	; (2440 <system_gclk_chan_enable+0x28>)
    2426:	8851      	ldrh	r1, [r2, #2]
    2428:	2380      	movs	r3, #128	; 0x80
    242a:	01db      	lsls	r3, r3, #7
    242c:	430b      	orrs	r3, r1
    242e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2430:	4b04      	ldr	r3, [pc, #16]	; (2444 <system_gclk_chan_enable+0x2c>)
    2432:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2434:	bd10      	pop	{r4, pc}
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	00001ccd 	.word	0x00001ccd
    243c:	40000c02 	.word	0x40000c02
    2440:	40000c00 	.word	0x40000c00
    2444:	00001d0d 	.word	0x00001d0d

00002448 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2448:	b510      	push	{r4, lr}
    244a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    244c:	4b0f      	ldr	r3, [pc, #60]	; (248c <system_gclk_chan_disable+0x44>)
    244e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2450:	4b0f      	ldr	r3, [pc, #60]	; (2490 <system_gclk_chan_disable+0x48>)
    2452:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2454:	4b0f      	ldr	r3, [pc, #60]	; (2494 <system_gclk_chan_disable+0x4c>)
    2456:	885a      	ldrh	r2, [r3, #2]
    2458:	0512      	lsls	r2, r2, #20
    245a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    245c:	8859      	ldrh	r1, [r3, #2]
    245e:	4a0e      	ldr	r2, [pc, #56]	; (2498 <system_gclk_chan_disable+0x50>)
    2460:	400a      	ands	r2, r1
    2462:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2464:	8859      	ldrh	r1, [r3, #2]
    2466:	4a0d      	ldr	r2, [pc, #52]	; (249c <system_gclk_chan_disable+0x54>)
    2468:	400a      	ands	r2, r1
    246a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    246c:	0019      	movs	r1, r3
    246e:	2280      	movs	r2, #128	; 0x80
    2470:	01d2      	lsls	r2, r2, #7
    2472:	884b      	ldrh	r3, [r1, #2]
    2474:	4213      	tst	r3, r2
    2476:	d1fc      	bne.n	2472 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2478:	4906      	ldr	r1, [pc, #24]	; (2494 <system_gclk_chan_disable+0x4c>)
    247a:	884c      	ldrh	r4, [r1, #2]
    247c:	0202      	lsls	r2, r0, #8
    247e:	4b06      	ldr	r3, [pc, #24]	; (2498 <system_gclk_chan_disable+0x50>)
    2480:	4023      	ands	r3, r4
    2482:	4313      	orrs	r3, r2
    2484:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2486:	4b06      	ldr	r3, [pc, #24]	; (24a0 <system_gclk_chan_disable+0x58>)
    2488:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    248a:	bd10      	pop	{r4, pc}
    248c:	00001ccd 	.word	0x00001ccd
    2490:	40000c02 	.word	0x40000c02
    2494:	40000c00 	.word	0x40000c00
    2498:	fffff0ff 	.word	0xfffff0ff
    249c:	ffffbfff 	.word	0xffffbfff
    24a0:	00001d0d 	.word	0x00001d0d

000024a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    24a4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    24a6:	780c      	ldrb	r4, [r1, #0]
    24a8:	0224      	lsls	r4, r4, #8
    24aa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <system_gclk_chan_set_config+0x14>)
    24ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    24b0:	b2a4      	uxth	r4, r4
    24b2:	4b02      	ldr	r3, [pc, #8]	; (24bc <system_gclk_chan_set_config+0x18>)
    24b4:	805c      	strh	r4, [r3, #2]
}
    24b6:	bd10      	pop	{r4, pc}
    24b8:	00002449 	.word	0x00002449
    24bc:	40000c00 	.word	0x40000c00

000024c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    24c0:	b510      	push	{r4, lr}
    24c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    24c4:	4b06      	ldr	r3, [pc, #24]	; (24e0 <system_gclk_chan_get_hz+0x20>)
    24c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24c8:	4b06      	ldr	r3, [pc, #24]	; (24e4 <system_gclk_chan_get_hz+0x24>)
    24ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <system_gclk_chan_get_hz+0x28>)
    24ce:	885c      	ldrh	r4, [r3, #2]
    24d0:	0524      	lsls	r4, r4, #20
    24d2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    24d4:	4b05      	ldr	r3, [pc, #20]	; (24ec <system_gclk_chan_get_hz+0x2c>)
    24d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    24d8:	0020      	movs	r0, r4
    24da:	4b05      	ldr	r3, [pc, #20]	; (24f0 <system_gclk_chan_get_hz+0x30>)
    24dc:	4798      	blx	r3
}
    24de:	bd10      	pop	{r4, pc}
    24e0:	00001ccd 	.word	0x00001ccd
    24e4:	40000c02 	.word	0x40000c02
    24e8:	40000c00 	.word	0x40000c00
    24ec:	00001d0d 	.word	0x00001d0d
    24f0:	0000238d 	.word	0x0000238d

000024f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    24f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    24f6:	78d3      	ldrb	r3, [r2, #3]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d11e      	bne.n	253a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    24fc:	7813      	ldrb	r3, [r2, #0]
    24fe:	2b80      	cmp	r3, #128	; 0x80
    2500:	d004      	beq.n	250c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2502:	061b      	lsls	r3, r3, #24
    2504:	2480      	movs	r4, #128	; 0x80
    2506:	0264      	lsls	r4, r4, #9
    2508:	4323      	orrs	r3, r4
    250a:	e000      	b.n	250e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    250c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    250e:	7854      	ldrb	r4, [r2, #1]
    2510:	2502      	movs	r5, #2
    2512:	43ac      	bics	r4, r5
    2514:	d10a      	bne.n	252c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2516:	7894      	ldrb	r4, [r2, #2]
    2518:	2c00      	cmp	r4, #0
    251a:	d103      	bne.n	2524 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    251c:	2480      	movs	r4, #128	; 0x80
    251e:	02a4      	lsls	r4, r4, #10
    2520:	4323      	orrs	r3, r4
    2522:	e002      	b.n	252a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2524:	24c0      	movs	r4, #192	; 0xc0
    2526:	02e4      	lsls	r4, r4, #11
    2528:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    252a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    252c:	7854      	ldrb	r4, [r2, #1]
    252e:	3c01      	subs	r4, #1
    2530:	2c01      	cmp	r4, #1
    2532:	d812      	bhi.n	255a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2534:	4c18      	ldr	r4, [pc, #96]	; (2598 <_system_pinmux_config+0xa4>)
    2536:	4023      	ands	r3, r4
    2538:	e00f      	b.n	255a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    253a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    253c:	040b      	lsls	r3, r1, #16
    253e:	0c1b      	lsrs	r3, r3, #16
    2540:	24a0      	movs	r4, #160	; 0xa0
    2542:	05e4      	lsls	r4, r4, #23
    2544:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2546:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2548:	0c0b      	lsrs	r3, r1, #16
    254a:	24d0      	movs	r4, #208	; 0xd0
    254c:	0624      	lsls	r4, r4, #24
    254e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2550:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2552:	78d3      	ldrb	r3, [r2, #3]
    2554:	2b00      	cmp	r3, #0
    2556:	d018      	beq.n	258a <_system_pinmux_config+0x96>
    2558:	e01c      	b.n	2594 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    255a:	040c      	lsls	r4, r1, #16
    255c:	0c24      	lsrs	r4, r4, #16
    255e:	25a0      	movs	r5, #160	; 0xa0
    2560:	05ed      	lsls	r5, r5, #23
    2562:	432c      	orrs	r4, r5
    2564:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2566:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2568:	0c0c      	lsrs	r4, r1, #16
    256a:	25d0      	movs	r5, #208	; 0xd0
    256c:	062d      	lsls	r5, r5, #24
    256e:	432c      	orrs	r4, r5
    2570:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2572:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2574:	78d4      	ldrb	r4, [r2, #3]
    2576:	2c00      	cmp	r4, #0
    2578:	d10c      	bne.n	2594 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    257a:	035b      	lsls	r3, r3, #13
    257c:	d505      	bpl.n	258a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    257e:	7893      	ldrb	r3, [r2, #2]
    2580:	2b01      	cmp	r3, #1
    2582:	d101      	bne.n	2588 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2584:	6181      	str	r1, [r0, #24]
    2586:	e000      	b.n	258a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2588:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    258a:	7853      	ldrb	r3, [r2, #1]
    258c:	3b01      	subs	r3, #1
    258e:	2b01      	cmp	r3, #1
    2590:	d800      	bhi.n	2594 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2592:	6081      	str	r1, [r0, #8]
		}
	}
}
    2594:	bd30      	pop	{r4, r5, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	fffbffff 	.word	0xfffbffff

0000259c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    259c:	b510      	push	{r4, lr}
    259e:	0003      	movs	r3, r0
    25a0:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    25a2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    25a4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    25a6:	2900      	cmp	r1, #0
    25a8:	d104      	bne.n	25b4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    25aa:	0958      	lsrs	r0, r3, #5
    25ac:	01c0      	lsls	r0, r0, #7
    25ae:	4905      	ldr	r1, [pc, #20]	; (25c4 <system_pinmux_pin_set_config+0x28>)
    25b0:	468c      	mov	ip, r1
    25b2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    25b4:	211f      	movs	r1, #31
    25b6:	400b      	ands	r3, r1
    25b8:	391e      	subs	r1, #30
    25ba:	4099      	lsls	r1, r3
    25bc:	4b02      	ldr	r3, [pc, #8]	; (25c8 <system_pinmux_pin_set_config+0x2c>)
    25be:	4798      	blx	r3
}
    25c0:	bd10      	pop	{r4, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	41004400 	.word	0x41004400
    25c8:	000024f5 	.word	0x000024f5

000025cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    25cc:	4770      	bx	lr
    25ce:	46c0      	nop			; (mov r8, r8)

000025d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    25d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    25d2:	4b05      	ldr	r3, [pc, #20]	; (25e8 <system_init+0x18>)
    25d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    25d6:	4b05      	ldr	r3, [pc, #20]	; (25ec <system_init+0x1c>)
    25d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <system_init+0x20>)
    25dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    25de:	4b05      	ldr	r3, [pc, #20]	; (25f4 <system_init+0x24>)
    25e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    25e2:	4b05      	ldr	r3, [pc, #20]	; (25f8 <system_init+0x28>)
    25e4:	4798      	blx	r3
}
    25e6:	bd10      	pop	{r4, pc}
    25e8:	00002171 	.word	0x00002171
    25ec:	00001d3d 	.word	0x00001d3d
    25f0:	000025cd 	.word	0x000025cd
    25f4:	00001e61 	.word	0x00001e61
    25f8:	000025cd 	.word	0x000025cd

000025fc <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    25fc:	b510      	push	{r4, lr}
    25fe:	b082      	sub	sp, #8
    2600:	0004      	movs	r4, r0
	enum sleepmgr_mode sleep_mode[] = {
    2602:	2204      	movs	r2, #4
    2604:	4923      	ldr	r1, [pc, #140]	; (2694 <udd_sleep_mode+0x98>)
    2606:	a801      	add	r0, sp, #4
    2608:	4b23      	ldr	r3, [pc, #140]	; (2698 <udd_sleep_mode+0x9c>)
    260a:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    260c:	4b23      	ldr	r3, [pc, #140]	; (269c <udd_sleep_mode+0xa0>)
    260e:	781b      	ldrb	r3, [r3, #0]
    2610:	42a3      	cmp	r3, r4
    2612:	d03d      	beq.n	2690 <udd_sleep_mode+0x94>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2614:	2c00      	cmp	r4, #0
    2616:	d01a      	beq.n	264e <udd_sleep_mode+0x52>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2618:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    261a:	5d1a      	ldrb	r2, [r3, r4]
    261c:	4b20      	ldr	r3, [pc, #128]	; (26a0 <udd_sleep_mode+0xa4>)
    261e:	5c9b      	ldrb	r3, [r3, r2]
    2620:	2bff      	cmp	r3, #255	; 0xff
    2622:	d100      	bne.n	2626 <udd_sleep_mode+0x2a>
    2624:	e7fe      	b.n	2624 <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2626:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    262a:	b672      	cpsid	i
    262c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2630:	2000      	movs	r0, #0
    2632:	491c      	ldr	r1, [pc, #112]	; (26a4 <udd_sleep_mode+0xa8>)
    2634:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2636:	481a      	ldr	r0, [pc, #104]	; (26a0 <udd_sleep_mode+0xa4>)
    2638:	5c81      	ldrb	r1, [r0, r2]
    263a:	3101      	adds	r1, #1
    263c:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    263e:	2b00      	cmp	r3, #0
    2640:	d105      	bne.n	264e <udd_sleep_mode+0x52>
		cpu_irq_enable();
    2642:	2201      	movs	r2, #1
    2644:	4b17      	ldr	r3, [pc, #92]	; (26a4 <udd_sleep_mode+0xa8>)
    2646:	701a      	strb	r2, [r3, #0]
    2648:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    264c:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    264e:	4b13      	ldr	r3, [pc, #76]	; (269c <udd_sleep_mode+0xa0>)
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d01a      	beq.n	268c <udd_sleep_mode+0x90>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2656:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2658:	5cd2      	ldrb	r2, [r2, r3]
    265a:	4b11      	ldr	r3, [pc, #68]	; (26a0 <udd_sleep_mode+0xa4>)
    265c:	5c9b      	ldrb	r3, [r3, r2]
    265e:	2b00      	cmp	r3, #0
    2660:	d100      	bne.n	2664 <udd_sleep_mode+0x68>
    2662:	e7fe      	b.n	2662 <udd_sleep_mode+0x66>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2664:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2668:	b672      	cpsid	i
    266a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    266e:	2000      	movs	r0, #0
    2670:	490c      	ldr	r1, [pc, #48]	; (26a4 <udd_sleep_mode+0xa8>)
    2672:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2674:	480a      	ldr	r0, [pc, #40]	; (26a0 <udd_sleep_mode+0xa4>)
    2676:	5c81      	ldrb	r1, [r0, r2]
    2678:	3901      	subs	r1, #1
    267a:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    267c:	2b00      	cmp	r3, #0
    267e:	d105      	bne.n	268c <udd_sleep_mode+0x90>
		cpu_irq_enable();
    2680:	2201      	movs	r2, #1
    2682:	4b08      	ldr	r3, [pc, #32]	; (26a4 <udd_sleep_mode+0xa8>)
    2684:	701a      	strb	r2, [r3, #0]
    2686:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    268a:	b662      	cpsie	i
	}
	udd_state = new_state;
    268c:	4b03      	ldr	r3, [pc, #12]	; (269c <udd_sleep_mode+0xa0>)
    268e:	701c      	strb	r4, [r3, #0]
}
    2690:	b002      	add	sp, #8
    2692:	bd10      	pop	{r4, pc}
    2694:	0000465c 	.word	0x0000465c
    2698:	000045c5 	.word	0x000045c5
    269c:	20000143 	.word	0x20000143
    26a0:	20000248 	.word	0x20000248
    26a4:	200000d8 	.word	0x200000d8

000026a8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    26a8:	230f      	movs	r3, #15
    26aa:	4003      	ands	r3, r0
    26ac:	005b      	lsls	r3, r3, #1
    26ae:	09c0      	lsrs	r0, r0, #7
    26b0:	1818      	adds	r0, r3, r0
    26b2:	3802      	subs	r0, #2
    26b4:	0083      	lsls	r3, r0, #2
    26b6:	1818      	adds	r0, r3, r0
    26b8:	0080      	lsls	r0, r0, #2
    26ba:	4b01      	ldr	r3, [pc, #4]	; (26c0 <udd_ep_get_job+0x18>)
    26bc:	1818      	adds	r0, r3, r0
}
    26be:	4770      	bx	lr
    26c0:	20000144 	.word	0x20000144

000026c4 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    26c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c6:	4657      	mov	r7, sl
    26c8:	464e      	mov	r6, r9
    26ca:	4645      	mov	r5, r8
    26cc:	b4e0      	push	{r5, r6, r7}
    26ce:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    26d0:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    26d2:	b273      	sxtb	r3, r6
    26d4:	2b00      	cmp	r3, #0
    26d6:	da51      	bge.n	277c <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    26d8:	0030      	movs	r0, r6
    26da:	4b5c      	ldr	r3, [pc, #368]	; (284c <udd_ep_transfer_process+0x188>)
    26dc:	4798      	blx	r3
    26de:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    26e0:	230f      	movs	r3, #15
    26e2:	4033      	ands	r3, r6
    26e4:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
    26e6:	8a03      	ldrh	r3, [r0, #16]
    26e8:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
    26ea:	464b      	mov	r3, r9
    26ec:	885f      	ldrh	r7, [r3, #2]
    26ee:	68c3      	ldr	r3, [r0, #12]
    26f0:	469c      	mov	ip, r3
    26f2:	4467      	add	r7, ip
    26f4:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    26f6:	6885      	ldr	r5, [r0, #8]
    26f8:	42af      	cmp	r7, r5
    26fa:	d024      	beq.n	2746 <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    26fc:	1bed      	subs	r5, r5, r7
    26fe:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2700:	4b53      	ldr	r3, [pc, #332]	; (2850 <udd_ep_transfer_process+0x18c>)
    2702:	429d      	cmp	r5, r3
    2704:	d906      	bls.n	2714 <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2706:	001d      	movs	r5, r3
    2708:	4651      	mov	r1, sl
    270a:	0018      	movs	r0, r3
    270c:	4b51      	ldr	r3, [pc, #324]	; (2854 <udd_ep_transfer_process+0x190>)
    270e:	4798      	blx	r3
    2710:	1a6d      	subs	r5, r5, r1
    2712:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2714:	7ca3      	ldrb	r3, [r4, #18]
    2716:	2200      	movs	r2, #0
    2718:	079b      	lsls	r3, r3, #30
    271a:	d506      	bpl.n	272a <udd_ep_transfer_process+0x66>
    271c:	4651      	mov	r1, sl
    271e:	0028      	movs	r0, r5
    2720:	4b4d      	ldr	r3, [pc, #308]	; (2858 <udd_ep_transfer_process+0x194>)
    2722:	4798      	blx	r3
    2724:	b289      	uxth	r1, r1
    2726:	424a      	negs	r2, r1
    2728:	414a      	adcs	r2, r1
    272a:	0051      	lsls	r1, r2, #1
    272c:	7ca3      	ldrb	r3, [r4, #18]
    272e:	2202      	movs	r2, #2
    2730:	4393      	bics	r3, r2
    2732:	4319      	orrs	r1, r3
    2734:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2736:	6862      	ldr	r2, [r4, #4]
    2738:	19d2      	adds	r2, r2, r7
    273a:	002b      	movs	r3, r5
    273c:	4641      	mov	r1, r8
    273e:	4847      	ldr	r0, [pc, #284]	; (285c <udd_ep_transfer_process+0x198>)
    2740:	4c47      	ldr	r4, [pc, #284]	; (2860 <udd_ep_transfer_process+0x19c>)
    2742:	47a0      	blx	r4
    2744:	e07d      	b.n	2842 <udd_ep_transfer_process+0x17e>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    2746:	7c83      	ldrb	r3, [r0, #18]
    2748:	079b      	lsls	r3, r3, #30
    274a:	d50b      	bpl.n	2764 <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
    274c:	7c83      	ldrb	r3, [r0, #18]
    274e:	2202      	movs	r2, #2
    2750:	4393      	bics	r3, r2
    2752:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2754:	6842      	ldr	r2, [r0, #4]
    2756:	19d2      	adds	r2, r2, r7
    2758:	2300      	movs	r3, #0
    275a:	4641      	mov	r1, r8
    275c:	483f      	ldr	r0, [pc, #252]	; (285c <udd_ep_transfer_process+0x198>)
    275e:	4c40      	ldr	r4, [pc, #256]	; (2860 <udd_ep_transfer_process+0x19c>)
    2760:	47a0      	blx	r4
    2762:	e06e      	b.n	2842 <udd_ep_transfer_process+0x17e>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    2764:	7c83      	ldrb	r3, [r0, #18]
    2766:	2201      	movs	r2, #1
    2768:	4393      	bics	r3, r2
    276a:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    276c:	6803      	ldr	r3, [r0, #0]
    276e:	2b00      	cmp	r3, #0
    2770:	d067      	beq.n	2842 <udd_ep_transfer_process+0x17e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2772:	0032      	movs	r2, r6
    2774:	0039      	movs	r1, r7
    2776:	2000      	movs	r0, #0
    2778:	4798      	blx	r3
    277a:	e062      	b.n	2842 <udd_ep_transfer_process+0x17e>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    277c:	0030      	movs	r0, r6
    277e:	4b33      	ldr	r3, [pc, #204]	; (284c <udd_ep_transfer_process+0x188>)
    2780:	4798      	blx	r3
    2782:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2784:	270f      	movs	r7, #15
    2786:	4037      	ands	r7, r6

	ep_size = ptr_job->ep_size;
    2788:	8a03      	ldrh	r3, [r0, #16]
    278a:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    278c:	464b      	mov	r3, r9
    278e:	881b      	ldrh	r3, [r3, #0]
    2790:	469a      	mov	sl, r3

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    2792:	7c83      	ldrb	r3, [r0, #18]
    2794:	075b      	lsls	r3, r3, #29
    2796:	d510      	bpl.n	27ba <udd_ep_transfer_process+0xf6>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2798:	6843      	ldr	r3, [r0, #4]
    279a:	68c2      	ldr	r2, [r0, #12]
    279c:	4694      	mov	ip, r2
    279e:	4463      	add	r3, ip
    27a0:	001d      	movs	r5, r3
    27a2:	4641      	mov	r1, r8
    27a4:	6880      	ldr	r0, [r0, #8]
    27a6:	4b2c      	ldr	r3, [pc, #176]	; (2858 <udd_ep_transfer_process+0x194>)
    27a8:	4798      	blx	r3
    27aa:	000a      	movs	r2, r1
    27ac:	1e79      	subs	r1, r7, #1
    27ae:	0189      	lsls	r1, r1, #6
    27b0:	4b2c      	ldr	r3, [pc, #176]	; (2864 <udd_ep_transfer_process+0x1a0>)
    27b2:	18c9      	adds	r1, r1, r3
    27b4:	0028      	movs	r0, r5
    27b6:	4b2c      	ldr	r3, [pc, #176]	; (2868 <udd_ep_transfer_process+0x1a4>)
    27b8:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    27ba:	68e3      	ldr	r3, [r4, #12]
    27bc:	4453      	add	r3, sl
    27be:	1e1d      	subs	r5, r3, #0
    27c0:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    27c2:	68a3      	ldr	r3, [r4, #8]
    27c4:	429d      	cmp	r5, r3
    27c6:	d901      	bls.n	27cc <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    27c8:	60e3      	str	r3, [r4, #12]
    27ca:	e02f      	b.n	282c <udd_ep_transfer_process+0x168>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    27cc:	464a      	mov	r2, r9
    27ce:	8892      	ldrh	r2, [r2, #4]
    27d0:	4552      	cmp	r2, sl
    27d2:	d12b      	bne.n	282c <udd_ep_transfer_process+0x168>
    27d4:	429d      	cmp	r5, r3
    27d6:	d029      	beq.n	282c <udd_ep_transfer_process+0x168>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    27d8:	1b5b      	subs	r3, r3, r5
    27da:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    27dc:	4b1c      	ldr	r3, [pc, #112]	; (2850 <udd_ep_transfer_process+0x18c>)
    27de:	429e      	cmp	r6, r3
    27e0:	d907      	bls.n	27f2 <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    27e2:	001e      	movs	r6, r3
    27e4:	4641      	mov	r1, r8
    27e6:	0018      	movs	r0, r3
    27e8:	4b1a      	ldr	r3, [pc, #104]	; (2854 <udd_ep_transfer_process+0x190>)
    27ea:	4798      	blx	r3
    27ec:	1a73      	subs	r3, r6, r1
    27ee:	b29b      	uxth	r3, r3
    27f0:	e005      	b.n	27fe <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    27f2:	4641      	mov	r1, r8
    27f4:	0030      	movs	r0, r6
    27f6:	4b18      	ldr	r3, [pc, #96]	; (2858 <udd_ep_transfer_process+0x194>)
    27f8:	4798      	blx	r3
    27fa:	1a73      	subs	r3, r6, r1
    27fc:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    27fe:	4598      	cmp	r8, r3
    2800:	d90d      	bls.n	281e <udd_ep_transfer_process+0x15a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    2802:	7ca2      	ldrb	r2, [r4, #18]
    2804:	2304      	movs	r3, #4
    2806:	4313      	orrs	r3, r2
    2808:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    280a:	1e7a      	subs	r2, r7, #1
    280c:	0192      	lsls	r2, r2, #6
    280e:	4b15      	ldr	r3, [pc, #84]	; (2864 <udd_ep_transfer_process+0x1a0>)
    2810:	18d2      	adds	r2, r2, r3
    2812:	4643      	mov	r3, r8
    2814:	0039      	movs	r1, r7
    2816:	4811      	ldr	r0, [pc, #68]	; (285c <udd_ep_transfer_process+0x198>)
    2818:	4c14      	ldr	r4, [pc, #80]	; (286c <udd_ep_transfer_process+0x1a8>)
    281a:	47a0      	blx	r4
    281c:	e011      	b.n	2842 <udd_ep_transfer_process+0x17e>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    281e:	6862      	ldr	r2, [r4, #4]
    2820:	1952      	adds	r2, r2, r5
    2822:	0039      	movs	r1, r7
    2824:	480d      	ldr	r0, [pc, #52]	; (285c <udd_ep_transfer_process+0x198>)
    2826:	4c11      	ldr	r4, [pc, #68]	; (286c <udd_ep_transfer_process+0x1a8>)
    2828:	47a0      	blx	r4
    282a:	e00a      	b.n	2842 <udd_ep_transfer_process+0x17e>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    282c:	7ca3      	ldrb	r3, [r4, #18]
    282e:	2201      	movs	r2, #1
    2830:	4393      	bics	r3, r2
    2832:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2834:	6823      	ldr	r3, [r4, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d003      	beq.n	2842 <udd_ep_transfer_process+0x17e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    283a:	68e1      	ldr	r1, [r4, #12]
    283c:	0032      	movs	r2, r6
    283e:	2000      	movs	r0, #0
    2840:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2842:	bc1c      	pop	{r2, r3, r4}
    2844:	4690      	mov	r8, r2
    2846:	4699      	mov	r9, r3
    2848:	46a2      	mov	sl, r4
    284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284c:	000026a9 	.word	0x000026a9
    2850:	00001fff 	.word	0x00001fff
    2854:	0000452d 	.word	0x0000452d
    2858:	00004359 	.word	0x00004359
    285c:	200002d0 	.word	0x200002d0
    2860:	000037dd 	.word	0x000037dd
    2864:	20000290 	.word	0x20000290
    2868:	000045c5 	.word	0x000045c5
    286c:	0000382d 	.word	0x0000382d

00002870 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2870:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2872:	2205      	movs	r2, #5
    2874:	4b05      	ldr	r3, [pc, #20]	; (288c <udd_ctrl_stall_data+0x1c>)
    2876:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2878:	4c05      	ldr	r4, [pc, #20]	; (2890 <udd_ctrl_stall_data+0x20>)
    287a:	2180      	movs	r1, #128	; 0x80
    287c:	0020      	movs	r0, r4
    287e:	4b05      	ldr	r3, [pc, #20]	; (2894 <udd_ctrl_stall_data+0x24>)
    2880:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2882:	2100      	movs	r1, #0
    2884:	0020      	movs	r0, r4
    2886:	4b04      	ldr	r3, [pc, #16]	; (2898 <udd_ctrl_stall_data+0x28>)
    2888:	4798      	blx	r3
}
    288a:	bd10      	pop	{r4, pc}
    288c:	2000016e 	.word	0x2000016e
    2890:	200002d0 	.word	0x200002d0
    2894:	0000372d 	.word	0x0000372d
    2898:	00003755 	.word	0x00003755

0000289c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    289c:	b570      	push	{r4, r5, r6, lr}
    289e:	000e      	movs	r6, r1
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    28a0:	4c0d      	ldr	r4, [pc, #52]	; (28d8 <_usb_device_lpm_suspend+0x3c>)
    28a2:	2106      	movs	r1, #6
    28a4:	0020      	movs	r0, r4
    28a6:	4d0d      	ldr	r5, [pc, #52]	; (28dc <_usb_device_lpm_suspend+0x40>)
    28a8:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    28aa:	2104      	movs	r1, #4
    28ac:	0020      	movs	r0, r4
    28ae:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    28b0:	2102      	movs	r1, #2
    28b2:	0020      	movs	r0, r4
    28b4:	4b0a      	ldr	r3, [pc, #40]	; (28e0 <_usb_device_lpm_suspend+0x44>)
    28b6:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    28b8:	2002      	movs	r0, #2
    28ba:	4b0a      	ldr	r3, [pc, #40]	; (28e4 <_usb_device_lpm_suspend+0x48>)
    28bc:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    28be:	6833      	ldr	r3, [r6, #0]
    28c0:	2b00      	cmp	r3, #0
    28c2:	d004      	beq.n	28ce <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    28c4:	4b08      	ldr	r3, [pc, #32]	; (28e8 <_usb_device_lpm_suspend+0x4c>)
    28c6:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    28c8:	6833      	ldr	r3, [r6, #0]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d101      	bne.n	28d2 <_usb_device_lpm_suspend+0x36>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    28ce:	4b07      	ldr	r3, [pc, #28]	; (28ec <_usb_device_lpm_suspend+0x50>)
    28d0:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    28d2:	4b07      	ldr	r3, [pc, #28]	; (28f0 <_usb_device_lpm_suspend+0x54>)
    28d4:	4798      	blx	r3
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}
    28d8:	200002d0 	.word	0x200002d0
    28dc:	0000323d 	.word	0x0000323d
    28e0:	0000321d 	.word	0x0000321d
    28e4:	000025fd 	.word	0x000025fd
    28e8:	00004225 	.word	0x00004225
    28ec:	00004219 	.word	0x00004219
    28f0:	0000420d 	.word	0x0000420d

000028f4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    28f4:	b570      	push	{r4, r5, r6, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    28f6:	4b13      	ldr	r3, [pc, #76]	; (2944 <_usb_on_wakeup+0x50>)
    28f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    28fa:	069b      	lsls	r3, r3, #26
    28fc:	d406      	bmi.n	290c <_usb_on_wakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    28fe:	4911      	ldr	r1, [pc, #68]	; (2944 <_usb_on_wakeup+0x50>)
    2900:	22d0      	movs	r2, #208	; 0xd0
    2902:	68cb      	ldr	r3, [r1, #12]
    2904:	4013      	ands	r3, r2
    2906:	2bd0      	cmp	r3, #208	; 0xd0
    2908:	d1fb      	bne.n	2902 <_usb_on_wakeup+0xe>
    290a:	e004      	b.n	2916 <_usb_on_wakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    290c:	490d      	ldr	r1, [pc, #52]	; (2944 <_usb_on_wakeup+0x50>)
    290e:	2210      	movs	r2, #16
    2910:	68cb      	ldr	r3, [r1, #12]
    2912:	421a      	tst	r2, r3
    2914:	d0fc      	beq.n	2910 <_usb_on_wakeup+0x1c>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2916:	4c0c      	ldr	r4, [pc, #48]	; (2948 <_usb_on_wakeup+0x54>)
    2918:	2102      	movs	r1, #2
    291a:	0020      	movs	r0, r4
    291c:	4b0b      	ldr	r3, [pc, #44]	; (294c <_usb_on_wakeup+0x58>)
    291e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2920:	2104      	movs	r1, #4
    2922:	0020      	movs	r0, r4
    2924:	4d0a      	ldr	r5, [pc, #40]	; (2950 <_usb_on_wakeup+0x5c>)
    2926:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2928:	4a0a      	ldr	r2, [pc, #40]	; (2954 <_usb_on_wakeup+0x60>)
    292a:	2106      	movs	r1, #6
    292c:	0020      	movs	r0, r4
    292e:	4b0a      	ldr	r3, [pc, #40]	; (2958 <_usb_on_wakeup+0x64>)
    2930:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2932:	2106      	movs	r1, #6
    2934:	0020      	movs	r0, r4
    2936:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2938:	2003      	movs	r0, #3
    293a:	4b08      	ldr	r3, [pc, #32]	; (295c <_usb_on_wakeup+0x68>)
    293c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    293e:	4b08      	ldr	r3, [pc, #32]	; (2960 <_usb_on_wakeup+0x6c>)
    2940:	4798      	blx	r3
#endif
}
    2942:	bd70      	pop	{r4, r5, r6, pc}
    2944:	40000800 	.word	0x40000800
    2948:	200002d0 	.word	0x200002d0
    294c:	0000323d 	.word	0x0000323d
    2950:	0000321d 	.word	0x0000321d
    2954:	0000289d 	.word	0x0000289d
    2958:	000031f9 	.word	0x000031f9
    295c:	000025fd 	.word	0x000025fd
    2960:	000041c9 	.word	0x000041c9

00002964 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    2964:	b570      	push	{r4, r5, r6, lr}
    2966:	b082      	sub	sp, #8
    2968:	0004      	movs	r4, r0
	// Reset USB Device Stack Core
	udc_reset();
    296a:	4b1e      	ldr	r3, [pc, #120]	; (29e4 <_usb_on_bus_reset+0x80>)
    296c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    296e:	2380      	movs	r3, #128	; 0x80
    2970:	6822      	ldr	r2, [r4, #0]
    2972:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2974:	ad01      	add	r5, sp, #4
    2976:	0028      	movs	r0, r5
    2978:	4b1b      	ldr	r3, [pc, #108]	; (29e8 <_usb_on_bus_reset+0x84>)
    297a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    297c:	2600      	movs	r6, #0
    297e:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2980:	0029      	movs	r1, r5
    2982:	0020      	movs	r0, r4
    2984:	4b19      	ldr	r3, [pc, #100]	; (29ec <_usb_on_bus_reset+0x88>)
    2986:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2988:	4919      	ldr	r1, [pc, #100]	; (29f0 <_usb_on_bus_reset+0x8c>)
    298a:	0020      	movs	r0, r4
    298c:	4b19      	ldr	r3, [pc, #100]	; (29f4 <_usb_on_bus_reset+0x90>)
    298e:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2990:	4b19      	ldr	r3, [pc, #100]	; (29f8 <_usb_on_bus_reset+0x94>)
    2992:	2202      	movs	r2, #2
    2994:	2100      	movs	r1, #0
    2996:	0020      	movs	r0, r4
    2998:	4d18      	ldr	r5, [pc, #96]	; (29fc <_usb_on_bus_reset+0x98>)
    299a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    299c:	4b18      	ldr	r3, [pc, #96]	; (2a00 <_usb_on_bus_reset+0x9c>)
    299e:	2200      	movs	r2, #0
    29a0:	2100      	movs	r1, #0
    29a2:	0020      	movs	r0, r4
    29a4:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    29a6:	4b17      	ldr	r3, [pc, #92]	; (2a04 <_usb_on_bus_reset+0xa0>)
    29a8:	2201      	movs	r2, #1
    29aa:	2100      	movs	r1, #0
    29ac:	0020      	movs	r0, r4
    29ae:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    29b0:	2202      	movs	r2, #2
    29b2:	2100      	movs	r1, #0
    29b4:	0020      	movs	r0, r4
    29b6:	4d14      	ldr	r5, [pc, #80]	; (2a08 <_usb_on_bus_reset+0xa4>)
    29b8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    29ba:	2200      	movs	r2, #0
    29bc:	2100      	movs	r1, #0
    29be:	0020      	movs	r0, r4
    29c0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    29c2:	2201      	movs	r2, #1
    29c4:	2100      	movs	r1, #0
    29c6:	0020      	movs	r0, r4
    29c8:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    29ca:	6822      	ldr	r2, [r4, #0]
    29cc:	8911      	ldrh	r1, [r2, #8]
    29ce:	4b0f      	ldr	r3, [pc, #60]	; (2a0c <_usb_on_bus_reset+0xa8>)
    29d0:	400b      	ands	r3, r1
    29d2:	2180      	movs	r1, #128	; 0x80
    29d4:	00c9      	lsls	r1, r1, #3
    29d6:	430b      	orrs	r3, r1
    29d8:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    29da:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <_usb_on_bus_reset+0xac>)
    29dc:	701e      	strb	r6, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    29de:	b002      	add	sp, #8
    29e0:	bd70      	pop	{r4, r5, r6, pc}
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	000017e5 	.word	0x000017e5
    29e8:	00003461 	.word	0x00003461
    29ec:	00003471 	.word	0x00003471
    29f0:	20000450 	.word	0x20000450
    29f4:	00003879 	.word	0x00003879
    29f8:	00002b49 	.word	0x00002b49
    29fc:	00003259 	.word	0x00003259
    2a00:	00002e61 	.word	0x00002e61
    2a04:	00002a51 	.word	0x00002a51
    2a08:	000032a9 	.word	0x000032a9
    2a0c:	fffff3ff 	.word	0xfffff3ff
    2a10:	2000016e 	.word	0x2000016e

00002a14 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    2a14:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2a16:	2203      	movs	r2, #3
    2a18:	4b07      	ldr	r3, [pc, #28]	; (2a38 <udd_ctrl_send_zlp_in+0x24>)
    2a1a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2a1c:	4c07      	ldr	r4, [pc, #28]	; (2a3c <udd_ctrl_send_zlp_in+0x28>)
    2a1e:	4908      	ldr	r1, [pc, #32]	; (2a40 <udd_ctrl_send_zlp_in+0x2c>)
    2a20:	0020      	movs	r0, r4
    2a22:	4b08      	ldr	r3, [pc, #32]	; (2a44 <udd_ctrl_send_zlp_in+0x30>)
    2a24:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <udd_ctrl_send_zlp_in+0x34>)
    2a28:	689a      	ldr	r2, [r3, #8]
    2a2a:	2300      	movs	r3, #0
    2a2c:	2100      	movs	r1, #0
    2a2e:	0020      	movs	r0, r4
    2a30:	4c06      	ldr	r4, [pc, #24]	; (2a4c <udd_ctrl_send_zlp_in+0x38>)
    2a32:	47a0      	blx	r4
}
    2a34:	bd10      	pop	{r4, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	2000016e 	.word	0x2000016e
    2a3c:	200002d0 	.word	0x200002d0
    2a40:	20000450 	.word	0x20000450
    2a44:	00003879 	.word	0x00003879
    2a48:	20000438 	.word	0x20000438
    2a4c:	000037dd 	.word	0x000037dd

00002a50 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    2a50:	b510      	push	{r4, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2a52:	7989      	ldrb	r1, [r1, #6]
    2a54:	b24b      	sxtb	r3, r1
    2a56:	2b00      	cmp	r3, #0
    2a58:	da0c      	bge.n	2a74 <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a5a:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <_usb_ep0_on_tansfer_fail+0x40>)
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	2b01      	cmp	r3, #1
    2a60:	d102      	bne.n	2a68 <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    2a62:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <_usb_ep0_on_tansfer_fail+0x44>)
    2a64:	4798      	blx	r3
    2a66:	e012      	b.n	2a8e <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a68:	2b04      	cmp	r3, #4
    2a6a:	d110      	bne.n	2a8e <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2a6c:	480a      	ldr	r0, [pc, #40]	; (2a98 <_usb_ep0_on_tansfer_fail+0x48>)
    2a6e:	4b0b      	ldr	r3, [pc, #44]	; (2a9c <_usb_ep0_on_tansfer_fail+0x4c>)
    2a70:	4798      	blx	r3
    2a72:	e00c      	b.n	2a8e <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a74:	4b06      	ldr	r3, [pc, #24]	; (2a90 <_usb_ep0_on_tansfer_fail+0x40>)
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	2b02      	cmp	r3, #2
    2a7a:	d103      	bne.n	2a84 <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a7c:	2204      	movs	r2, #4
    2a7e:	4b04      	ldr	r3, [pc, #16]	; (2a90 <_usb_ep0_on_tansfer_fail+0x40>)
    2a80:	701a      	strb	r2, [r3, #0]
    2a82:	e004      	b.n	2a8e <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a84:	2b03      	cmp	r3, #3
    2a86:	d102      	bne.n	2a8e <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2a88:	4803      	ldr	r0, [pc, #12]	; (2a98 <_usb_ep0_on_tansfer_fail+0x48>)
    2a8a:	4b04      	ldr	r3, [pc, #16]	; (2a9c <_usb_ep0_on_tansfer_fail+0x4c>)
    2a8c:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    2a8e:	bd10      	pop	{r4, pc}
    2a90:	2000016e 	.word	0x2000016e
    2a94:	00002a15 	.word	0x00002a15
    2a98:	200002d0 	.word	0x200002d0
    2a9c:	0000372d 	.word	0x0000372d

00002aa0 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    2aa0:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2aa2:	4b20      	ldr	r3, [pc, #128]	; (2b24 <udd_ctrl_in_sent+0x84>)
    2aa4:	881a      	ldrh	r2, [r3, #0]
    2aa6:	4b20      	ldr	r3, [pc, #128]	; (2b28 <udd_ctrl_in_sent+0x88>)
    2aa8:	899c      	ldrh	r4, [r3, #12]
    2aaa:	1aa4      	subs	r4, r4, r2
    2aac:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    2aae:	2c00      	cmp	r4, #0
    2ab0:	d120      	bne.n	2af4 <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ab2:	491e      	ldr	r1, [pc, #120]	; (2b2c <udd_ctrl_in_sent+0x8c>)
    2ab4:	880b      	ldrh	r3, [r1, #0]
    2ab6:	18d3      	adds	r3, r2, r3
    2ab8:	b29b      	uxth	r3, r3
    2aba:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2abc:	4a1a      	ldr	r2, [pc, #104]	; (2b28 <udd_ctrl_in_sent+0x88>)
    2abe:	88d2      	ldrh	r2, [r2, #6]
    2ac0:	429a      	cmp	r2, r3
    2ac2:	d003      	beq.n	2acc <udd_ctrl_in_sent+0x2c>
    2ac4:	4b1a      	ldr	r3, [pc, #104]	; (2b30 <udd_ctrl_in_sent+0x90>)
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d007      	beq.n	2adc <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2acc:	2204      	movs	r2, #4
    2ace:	4b19      	ldr	r3, [pc, #100]	; (2b34 <udd_ctrl_in_sent+0x94>)
    2ad0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2ad2:	4919      	ldr	r1, [pc, #100]	; (2b38 <udd_ctrl_in_sent+0x98>)
    2ad4:	4819      	ldr	r0, [pc, #100]	; (2b3c <udd_ctrl_in_sent+0x9c>)
    2ad6:	4b1a      	ldr	r3, [pc, #104]	; (2b40 <udd_ctrl_in_sent+0xa0>)
    2ad8:	4798      	blx	r3
			return;
    2ada:	e022      	b.n	2b22 <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2adc:	4b12      	ldr	r3, [pc, #72]	; (2b28 <udd_ctrl_in_sent+0x88>)
    2ade:	695b      	ldr	r3, [r3, #20]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d00e      	beq.n	2b02 <udd_ctrl_in_sent+0x62>
    2ae4:	4798      	blx	r3
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d00b      	beq.n	2b02 <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    2aea:	2200      	movs	r2, #0
    2aec:	4b0d      	ldr	r3, [pc, #52]	; (2b24 <udd_ctrl_in_sent+0x84>)
    2aee:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2af0:	4b0d      	ldr	r3, [pc, #52]	; (2b28 <udd_ctrl_in_sent+0x88>)
    2af2:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2af4:	2c07      	cmp	r4, #7
    2af6:	d904      	bls.n	2b02 <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    2af8:	2200      	movs	r2, #0
    2afa:	4b0d      	ldr	r3, [pc, #52]	; (2b30 <udd_ctrl_in_sent+0x90>)
    2afc:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2afe:	2408      	movs	r4, #8
    2b00:	e002      	b.n	2b08 <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    2b02:	2201      	movs	r2, #1
    2b04:	4b0a      	ldr	r3, [pc, #40]	; (2b30 <udd_ctrl_in_sent+0x90>)
    2b06:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2b08:	4d06      	ldr	r5, [pc, #24]	; (2b24 <udd_ctrl_in_sent+0x84>)
    2b0a:	882b      	ldrh	r3, [r5, #0]
    2b0c:	4a06      	ldr	r2, [pc, #24]	; (2b28 <udd_ctrl_in_sent+0x88>)
    2b0e:	6892      	ldr	r2, [r2, #8]
    2b10:	18d2      	adds	r2, r2, r3
    2b12:	0023      	movs	r3, r4
    2b14:	2100      	movs	r1, #0
    2b16:	4809      	ldr	r0, [pc, #36]	; (2b3c <udd_ctrl_in_sent+0x9c>)
    2b18:	4e0a      	ldr	r6, [pc, #40]	; (2b44 <udd_ctrl_in_sent+0xa4>)
    2b1a:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    2b1c:	882b      	ldrh	r3, [r5, #0]
    2b1e:	18e4      	adds	r4, r4, r3
    2b20:	802c      	strh	r4, [r5, #0]
}
    2b22:	bd70      	pop	{r4, r5, r6, pc}
    2b24:	2000016c 	.word	0x2000016c
    2b28:	20000438 	.word	0x20000438
    2b2c:	20000140 	.word	0x20000140
    2b30:	20000142 	.word	0x20000142
    2b34:	2000016e 	.word	0x2000016e
    2b38:	20000450 	.word	0x20000450
    2b3c:	200002d0 	.word	0x200002d0
    2b40:	00003879 	.word	0x00003879
    2b44:	000037dd 	.word	0x000037dd

00002b48 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    2b48:	b510      	push	{r4, lr}
    2b4a:	000c      	movs	r4, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2b4c:	4b2c      	ldr	r3, [pc, #176]	; (2c00 <_usb_ep0_on_setup+0xb8>)
    2b4e:	781b      	ldrb	r3, [r3, #0]
    2b50:	2b00      	cmp	r3, #0
    2b52:	d007      	beq.n	2b64 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2b54:	4b2b      	ldr	r3, [pc, #172]	; (2c04 <_usb_ep0_on_setup+0xbc>)
    2b56:	691b      	ldr	r3, [r3, #16]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d000      	beq.n	2b5e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2b5c:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2b5e:	2200      	movs	r2, #0
    2b60:	4b27      	ldr	r3, [pc, #156]	; (2c00 <_usb_ep0_on_setup+0xb8>)
    2b62:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    2b64:	8823      	ldrh	r3, [r4, #0]
    2b66:	2b08      	cmp	r3, #8
    2b68:	d002      	beq.n	2b70 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2b6a:	4b27      	ldr	r3, [pc, #156]	; (2c08 <_usb_ep0_on_setup+0xc0>)
    2b6c:	4798      	blx	r3
		return;
    2b6e:	e045      	b.n	2bfc <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2b70:	4a24      	ldr	r2, [pc, #144]	; (2c04 <_usb_ep0_on_setup+0xbc>)
    2b72:	4b26      	ldr	r3, [pc, #152]	; (2c0c <_usb_ep0_on_setup+0xc4>)
    2b74:	7819      	ldrb	r1, [r3, #0]
    2b76:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2b78:	7859      	ldrb	r1, [r3, #1]
    2b7a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2b7c:	78d9      	ldrb	r1, [r3, #3]
    2b7e:	0209      	lsls	r1, r1, #8
    2b80:	7898      	ldrb	r0, [r3, #2]
    2b82:	1841      	adds	r1, r0, r1
    2b84:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2b86:	7959      	ldrb	r1, [r3, #5]
    2b88:	0209      	lsls	r1, r1, #8
    2b8a:	7918      	ldrb	r0, [r3, #4]
    2b8c:	1841      	adds	r1, r0, r1
    2b8e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2b90:	79d9      	ldrb	r1, [r3, #7]
    2b92:	0209      	lsls	r1, r1, #8
    2b94:	799b      	ldrb	r3, [r3, #6]
    2b96:	185b      	adds	r3, r3, r1
    2b98:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    2b9a:	4b1d      	ldr	r3, [pc, #116]	; (2c10 <_usb_ep0_on_setup+0xc8>)
    2b9c:	4798      	blx	r3
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d102      	bne.n	2ba8 <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    2ba2:	4b19      	ldr	r3, [pc, #100]	; (2c08 <_usb_ep0_on_setup+0xc0>)
    2ba4:	4798      	blx	r3
			return;
    2ba6:	e029      	b.n	2bfc <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    2ba8:	4b16      	ldr	r3, [pc, #88]	; (2c04 <_usb_ep0_on_setup+0xbc>)
    2baa:	781b      	ldrb	r3, [r3, #0]
    2bac:	2b7f      	cmp	r3, #127	; 0x7f
    2bae:	d910      	bls.n	2bd2 <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    2bb0:	2300      	movs	r3, #0
    2bb2:	4a18      	ldr	r2, [pc, #96]	; (2c14 <_usb_ep0_on_setup+0xcc>)
    2bb4:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2bb6:	4a18      	ldr	r2, [pc, #96]	; (2c18 <_usb_ep0_on_setup+0xd0>)
    2bb8:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2bba:	2202      	movs	r2, #2
    2bbc:	4b10      	ldr	r3, [pc, #64]	; (2c00 <_usb_ep0_on_setup+0xb8>)
    2bbe:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2bc0:	2308      	movs	r3, #8
    2bc2:	4a12      	ldr	r2, [pc, #72]	; (2c0c <_usb_ep0_on_setup+0xc4>)
    2bc4:	2100      	movs	r1, #0
    2bc6:	4815      	ldr	r0, [pc, #84]	; (2c1c <_usb_ep0_on_setup+0xd4>)
    2bc8:	4c15      	ldr	r4, [pc, #84]	; (2c20 <_usb_ep0_on_setup+0xd8>)
    2bca:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2bcc:	4b15      	ldr	r3, [pc, #84]	; (2c24 <_usb_ep0_on_setup+0xdc>)
    2bce:	4798      	blx	r3
    2bd0:	e014      	b.n	2bfc <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    2bd2:	4b0c      	ldr	r3, [pc, #48]	; (2c04 <_usb_ep0_on_setup+0xbc>)
    2bd4:	88db      	ldrh	r3, [r3, #6]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d102      	bne.n	2be0 <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    2bda:	4b13      	ldr	r3, [pc, #76]	; (2c28 <_usb_ep0_on_setup+0xe0>)
    2bdc:	4798      	blx	r3
				return;
    2bde:	e00d      	b.n	2bfc <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    2be0:	2300      	movs	r3, #0
    2be2:	4a0c      	ldr	r2, [pc, #48]	; (2c14 <_usb_ep0_on_setup+0xcc>)
    2be4:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2be6:	4a0c      	ldr	r2, [pc, #48]	; (2c18 <_usb_ep0_on_setup+0xd0>)
    2be8:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2bea:	2201      	movs	r2, #1
    2bec:	4b04      	ldr	r3, [pc, #16]	; (2c00 <_usb_ep0_on_setup+0xb8>)
    2bee:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2bf0:	2308      	movs	r3, #8
    2bf2:	4a06      	ldr	r2, [pc, #24]	; (2c0c <_usb_ep0_on_setup+0xc4>)
    2bf4:	2100      	movs	r1, #0
    2bf6:	4809      	ldr	r0, [pc, #36]	; (2c1c <_usb_ep0_on_setup+0xd4>)
    2bf8:	4c09      	ldr	r4, [pc, #36]	; (2c20 <_usb_ep0_on_setup+0xd8>)
    2bfa:	47a0      	blx	r4
			}
		}
	}
}
    2bfc:	bd10      	pop	{r4, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	2000016e 	.word	0x2000016e
    2c04:	20000438 	.word	0x20000438
    2c08:	00002871 	.word	0x00002871
    2c0c:	20000450 	.word	0x20000450
    2c10:	00001881 	.word	0x00001881
    2c14:	20000140 	.word	0x20000140
    2c18:	2000016c 	.word	0x2000016c
    2c1c:	200002d0 	.word	0x200002d0
    2c20:	0000382d 	.word	0x0000382d
    2c24:	00002aa1 	.word	0x00002aa1
    2c28:	00002a15 	.word	0x00002a15

00002c2c <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    2c2c:	b510      	push	{r4, lr}
	udc_sof_notify();
    2c2e:	4b02      	ldr	r3, [pc, #8]	; (2c38 <_usb_on_sof_notify+0xc>)
    2c30:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    2c32:	4b02      	ldr	r3, [pc, #8]	; (2c3c <_usb_on_sof_notify+0x10>)
    2c34:	4798      	blx	r3
#endif
}
    2c36:	bd10      	pop	{r4, pc}
    2c38:	00001841 	.word	0x00001841
    2c3c:	000041d5 	.word	0x000041d5

00002c40 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    2c40:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2c42:	4c07      	ldr	r4, [pc, #28]	; (2c60 <_usb_on_suspend+0x20>)
    2c44:	2104      	movs	r1, #4
    2c46:	0020      	movs	r0, r4
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <_usb_on_suspend+0x24>)
    2c4a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2c4c:	2102      	movs	r1, #2
    2c4e:	0020      	movs	r0, r4
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <_usb_on_suspend+0x28>)
    2c52:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2c54:	2001      	movs	r0, #1
    2c56:	4b05      	ldr	r3, [pc, #20]	; (2c6c <_usb_on_suspend+0x2c>)
    2c58:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    2c5a:	4b05      	ldr	r3, [pc, #20]	; (2c70 <_usb_on_suspend+0x30>)
    2c5c:	4798      	blx	r3
#endif
}
    2c5e:	bd10      	pop	{r4, pc}
    2c60:	200002d0 	.word	0x200002d0
    2c64:	0000323d 	.word	0x0000323d
    2c68:	0000321d 	.word	0x0000321d
    2c6c:	000025fd 	.word	0x000025fd
    2c70:	000041bd 	.word	0x000041bd

00002c74 <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    2c74:	b510      	push	{r4, lr}
    2c76:	0004      	movs	r4, r0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    2c78:	0001      	movs	r1, r0
    2c7a:	480a      	ldr	r0, [pc, #40]	; (2ca4 <udd_ep_abort+0x30>)
    2c7c:	4b0a      	ldr	r3, [pc, #40]	; (2ca8 <udd_ep_abort+0x34>)
    2c7e:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    2c80:	0020      	movs	r0, r4
    2c82:	4b0a      	ldr	r3, [pc, #40]	; (2cac <udd_ep_abort+0x38>)
    2c84:	4798      	blx	r3
	if (!ptr_job->busy) {
    2c86:	7c83      	ldrb	r3, [r0, #18]
    2c88:	07db      	lsls	r3, r3, #31
    2c8a:	d50a      	bpl.n	2ca2 <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    2c8c:	7c83      	ldrb	r3, [r0, #18]
    2c8e:	2201      	movs	r2, #1
    2c90:	4393      	bics	r3, r2
    2c92:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2c94:	6803      	ldr	r3, [r0, #0]
    2c96:	2b00      	cmp	r3, #0
    2c98:	d003      	beq.n	2ca2 <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2c9a:	68c1      	ldr	r1, [r0, #12]
    2c9c:	0022      	movs	r2, r4
    2c9e:	2001      	movs	r0, #1
    2ca0:	4798      	blx	r3
	}
}
    2ca2:	bd10      	pop	{r4, pc}
    2ca4:	200002d0 	.word	0x200002d0
    2ca8:	000036c9 	.word	0x000036c9
    2cac:	000026a9 	.word	0x000026a9

00002cb0 <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <udd_get_frame_number+0xc>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	8a18      	ldrh	r0, [r3, #16]
    2cb6:	0480      	lsls	r0, r0, #18
    2cb8:	0d40      	lsrs	r0, r0, #21
}

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    2cba:	4770      	bx	lr
    2cbc:	200002d0 	.word	0x200002d0

00002cc0 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    2cc0:	b570      	push	{r4, r5, r6, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	0004      	movs	r4, r0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    2cc6:	ad01      	add	r5, sp, #4
    2cc8:	0028      	movs	r0, r5
    2cca:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <udd_ep_free+0x40>)
    2ccc:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    2cce:	0020      	movs	r0, r4
    2cd0:	4b0c      	ldr	r3, [pc, #48]	; (2d04 <udd_ep_free+0x44>)
    2cd2:	4798      	blx	r3

	config_ep.ep_address = ep;
    2cd4:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2cd6:	2300      	movs	r3, #0
    2cd8:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2cda:	4e0b      	ldr	r6, [pc, #44]	; (2d08 <udd_ep_free+0x48>)
    2cdc:	0029      	movs	r1, r5
    2cde:	0030      	movs	r0, r6
    2ce0:	4b0a      	ldr	r3, [pc, #40]	; (2d0c <udd_ep_free+0x4c>)
    2ce2:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2ce4:	210f      	movs	r1, #15
    2ce6:	4021      	ands	r1, r4
    2ce8:	2200      	movs	r2, #0
    2cea:	0030      	movs	r0, r6
    2cec:	4b08      	ldr	r3, [pc, #32]	; (2d10 <udd_ep_free+0x50>)
    2cee:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2cf0:	2200      	movs	r2, #0
    2cf2:	0021      	movs	r1, r4
    2cf4:	0030      	movs	r0, r6
    2cf6:	4b07      	ldr	r3, [pc, #28]	; (2d14 <udd_ep_free+0x54>)
    2cf8:	4798      	blx	r3
}
    2cfa:	b002      	add	sp, #8
    2cfc:	bd70      	pop	{r4, r5, r6, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	00003461 	.word	0x00003461
    2d04:	00002c75 	.word	0x00002c75
    2d08:	200002d0 	.word	0x200002d0
    2d0c:	00003471 	.word	0x00003471
    2d10:	00003281 	.word	0x00003281
    2d14:	00003385 	.word	0x00003385

00002d18 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    2d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d1a:	b083      	sub	sp, #12
    2d1c:	0006      	movs	r6, r0
    2d1e:	000c      	movs	r4, r1
    2d20:	0015      	movs	r5, r2
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    2d22:	af01      	add	r7, sp, #4
    2d24:	0038      	movs	r0, r7
    2d26:	4b36      	ldr	r3, [pc, #216]	; (2e00 <udd_ep_alloc+0xe8>)
    2d28:	4798      	blx	r3

	config_ep.ep_address = ep;
    2d2a:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    2d2c:	2d08      	cmp	r5, #8
    2d2e:	d803      	bhi.n	2d38 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2d30:	2200      	movs	r2, #0
    2d32:	ab01      	add	r3, sp, #4
    2d34:	705a      	strb	r2, [r3, #1]
    2d36:	e02e      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    2d38:	2d10      	cmp	r5, #16
    2d3a:	d803      	bhi.n	2d44 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2d3c:	2201      	movs	r2, #1
    2d3e:	ab01      	add	r3, sp, #4
    2d40:	705a      	strb	r2, [r3, #1]
    2d42:	e028      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    2d44:	2d20      	cmp	r5, #32
    2d46:	d803      	bhi.n	2d50 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2d48:	2202      	movs	r2, #2
    2d4a:	ab01      	add	r3, sp, #4
    2d4c:	705a      	strb	r2, [r3, #1]
    2d4e:	e022      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    2d50:	2d40      	cmp	r5, #64	; 0x40
    2d52:	d803      	bhi.n	2d5c <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2d54:	2203      	movs	r2, #3
    2d56:	ab01      	add	r3, sp, #4
    2d58:	705a      	strb	r2, [r3, #1]
    2d5a:	e01c      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    2d5c:	2d80      	cmp	r5, #128	; 0x80
    2d5e:	d803      	bhi.n	2d68 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2d60:	2204      	movs	r2, #4
    2d62:	ab01      	add	r3, sp, #4
    2d64:	705a      	strb	r2, [r3, #1]
    2d66:	e016      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    2d68:	2380      	movs	r3, #128	; 0x80
    2d6a:	005b      	lsls	r3, r3, #1
    2d6c:	429d      	cmp	r5, r3
    2d6e:	d803      	bhi.n	2d78 <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2d70:	2205      	movs	r2, #5
    2d72:	ab01      	add	r3, sp, #4
    2d74:	705a      	strb	r2, [r3, #1]
    2d76:	e00e      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    2d78:	2380      	movs	r3, #128	; 0x80
    2d7a:	009b      	lsls	r3, r3, #2
    2d7c:	429d      	cmp	r5, r3
    2d7e:	d803      	bhi.n	2d88 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2d80:	2206      	movs	r2, #6
    2d82:	ab01      	add	r3, sp, #4
    2d84:	705a      	strb	r2, [r3, #1]
    2d86:	e006      	b.n	2d96 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    2d88:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    2d8a:	4a1e      	ldr	r2, [pc, #120]	; (2e04 <udd_ep_alloc+0xec>)
    2d8c:	4295      	cmp	r5, r2
    2d8e:	d833      	bhi.n	2df8 <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2d90:	2207      	movs	r2, #7
    2d92:	ab01      	add	r3, sp, #4
    2d94:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2d96:	0030      	movs	r0, r6
    2d98:	4b1b      	ldr	r3, [pc, #108]	; (2e08 <udd_ep_alloc+0xf0>)
    2d9a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2d9c:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2d9e:	2103      	movs	r1, #3
    2da0:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2da2:	2901      	cmp	r1, #1
    2da4:	d103      	bne.n	2dae <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2da6:	2202      	movs	r2, #2
    2da8:	ab01      	add	r3, sp, #4
    2daa:	70da      	strb	r2, [r3, #3]
    2dac:	e00b      	b.n	2dc6 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2dae:	2902      	cmp	r1, #2
    2db0:	d103      	bne.n	2dba <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2db2:	2203      	movs	r2, #3
    2db4:	ab01      	add	r3, sp, #4
    2db6:	70da      	strb	r2, [r3, #3]
    2db8:	e005      	b.n	2dc6 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    2dba:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2dbc:	2903      	cmp	r1, #3
    2dbe:	d11b      	bne.n	2df8 <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2dc0:	2204      	movs	r2, #4
    2dc2:	ab01      	add	r3, sp, #4
    2dc4:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2dc6:	a901      	add	r1, sp, #4
    2dc8:	4810      	ldr	r0, [pc, #64]	; (2e0c <udd_ep_alloc+0xf4>)
    2dca:	4b11      	ldr	r3, [pc, #68]	; (2e10 <udd_ep_alloc+0xf8>)
    2dcc:	4798      	blx	r3
		return false;
    2dce:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d111      	bne.n	2df8 <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2dd4:	210f      	movs	r1, #15
    2dd6:	4031      	ands	r1, r6
    2dd8:	4c0c      	ldr	r4, [pc, #48]	; (2e0c <udd_ep_alloc+0xf4>)
    2dda:	4b0e      	ldr	r3, [pc, #56]	; (2e14 <udd_ep_alloc+0xfc>)
    2ddc:	2200      	movs	r2, #0
    2dde:	0020      	movs	r0, r4
    2de0:	4d0d      	ldr	r5, [pc, #52]	; (2e18 <udd_ep_alloc+0x100>)
    2de2:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2de4:	2200      	movs	r2, #0
    2de6:	0031      	movs	r1, r6
    2de8:	0020      	movs	r0, r4
    2dea:	4d0c      	ldr	r5, [pc, #48]	; (2e1c <udd_ep_alloc+0x104>)
    2dec:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2dee:	2201      	movs	r2, #1
    2df0:	0031      	movs	r1, r6
    2df2:	0020      	movs	r0, r4
    2df4:	47a8      	blx	r5

	return true;
    2df6:	2301      	movs	r3, #1
}
    2df8:	0018      	movs	r0, r3
    2dfa:	b003      	add	sp, #12
    2dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00003461 	.word	0x00003461
    2e04:	000003ff 	.word	0x000003ff
    2e08:	000026a9 	.word	0x000026a9
    2e0c:	200002d0 	.word	0x200002d0
    2e10:	00003471 	.word	0x00003471
    2e14:	000026c5 	.word	0x000026c5
    2e18:	00003259 	.word	0x00003259
    2e1c:	000032a9 	.word	0x000032a9

00002e20 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    2e20:	b510      	push	{r4, lr}
    2e22:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2e24:	4801      	ldr	r0, [pc, #4]	; (2e2c <udd_ep_is_halted+0xc>)
    2e26:	4b02      	ldr	r3, [pc, #8]	; (2e30 <udd_ep_is_halted+0x10>)
    2e28:	4798      	blx	r3
}
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	200002d0 	.word	0x200002d0
    2e30:	00003701 	.word	0x00003701

00002e34 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    2e34:	b510      	push	{r4, lr}
    2e36:	0004      	movs	r4, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    2e38:	230f      	movs	r3, #15
    2e3a:	4003      	ands	r3, r0
		return false;
    2e3c:	2000      	movs	r0, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    2e3e:	2b01      	cmp	r3, #1
    2e40:	d807      	bhi.n	2e52 <udd_ep_set_halt+0x1e>
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    2e42:	0021      	movs	r1, r4
    2e44:	4803      	ldr	r0, [pc, #12]	; (2e54 <udd_ep_set_halt+0x20>)
    2e46:	4b04      	ldr	r3, [pc, #16]	; (2e58 <udd_ep_set_halt+0x24>)
    2e48:	4798      	blx	r3

	udd_ep_abort(ep);
    2e4a:	0020      	movs	r0, r4
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <udd_ep_set_halt+0x28>)
    2e4e:	4798      	blx	r3
	return true;
    2e50:	2001      	movs	r0, #1
}
    2e52:	bd10      	pop	{r4, pc}
    2e54:	200002d0 	.word	0x200002d0
    2e58:	0000372d 	.word	0x0000372d
    2e5c:	00002c75 	.word	0x00002c75

00002e60 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    2e60:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2e62:	4b34      	ldr	r3, [pc, #208]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	2b01      	cmp	r3, #1
    2e68:	d155      	bne.n	2f16 <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2e6a:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2e6c:	4b32      	ldr	r3, [pc, #200]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e6e:	899b      	ldrh	r3, [r3, #12]
    2e70:	4a32      	ldr	r2, [pc, #200]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2e72:	8814      	ldrh	r4, [r2, #0]
    2e74:	1962      	adds	r2, r4, r5
    2e76:	4293      	cmp	r3, r2
    2e78:	da01      	bge.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e7a:	1b1d      	subs	r5, r3, r4
    2e7c:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2e7e:	4b2e      	ldr	r3, [pc, #184]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e80:	6898      	ldr	r0, [r3, #8]
    2e82:	1900      	adds	r0, r0, r4
    2e84:	002a      	movs	r2, r5
    2e86:	492e      	ldr	r1, [pc, #184]	; (2f40 <_usb_ep0_on_tansfer_ok+0xe0>)
    2e88:	4b2e      	ldr	r3, [pc, #184]	; (2f44 <_usb_ep0_on_tansfer_ok+0xe4>)
    2e8a:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2e8c:	1964      	adds	r4, r4, r5
    2e8e:	b2a4      	uxth	r4, r4
    2e90:	4b2a      	ldr	r3, [pc, #168]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2e92:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e94:	2d08      	cmp	r5, #8
    2e96:	d106      	bne.n	2ea6 <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2e98:	4b27      	ldr	r3, [pc, #156]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e9a:	88da      	ldrh	r2, [r3, #6]
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2e9c:	4b2a      	ldr	r3, [pc, #168]	; (2f48 <_usb_ep0_on_tansfer_ok+0xe8>)
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	191b      	adds	r3, r3, r4
    2ea2:	429a      	cmp	r2, r3
    2ea4:	dc10      	bgt.n	2ec8 <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2ea6:	4b24      	ldr	r3, [pc, #144]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ea8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2eaa:	695b      	ldr	r3, [r3, #20]
    2eac:	2b00      	cmp	r3, #0
    2eae:	d008      	beq.n	2ec2 <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    2eb0:	4798      	blx	r3
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d105      	bne.n	2ec2 <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2eb6:	2205      	movs	r2, #5
    2eb8:	4b1e      	ldr	r3, [pc, #120]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2eba:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    2ebc:	4b23      	ldr	r3, [pc, #140]	; (2f4c <_usb_ep0_on_tansfer_ok+0xec>)
    2ebe:	4798      	blx	r3
    2ec0:	e036      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    2ec2:	4b23      	ldr	r3, [pc, #140]	; (2f50 <_usb_ep0_on_tansfer_ok+0xf0>)
    2ec4:	4798      	blx	r3
    2ec6:	e033      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ec8:	4b1b      	ldr	r3, [pc, #108]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2eca:	899b      	ldrh	r3, [r3, #12]
    2ecc:	42a3      	cmp	r3, r4
    2ece:	d11b      	bne.n	2f08 <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    2ed0:	4b19      	ldr	r3, [pc, #100]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ed2:	695b      	ldr	r3, [r3, #20]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d106      	bne.n	2ee6 <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ed8:	2205      	movs	r2, #5
    2eda:	4b16      	ldr	r3, [pc, #88]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2edc:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ede:	2000      	movs	r0, #0
    2ee0:	4b1a      	ldr	r3, [pc, #104]	; (2f4c <_usb_ep0_on_tansfer_ok+0xec>)
    2ee2:	4798      	blx	r3
    2ee4:	e024      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2ee6:	4798      	blx	r3
    2ee8:	2800      	cmp	r0, #0
    2eea:	d105      	bne.n	2ef8 <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2eec:	2205      	movs	r2, #5
    2eee:	4b11      	ldr	r3, [pc, #68]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2ef0:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ef2:	4b16      	ldr	r3, [pc, #88]	; (2f4c <_usb_ep0_on_tansfer_ok+0xec>)
    2ef4:	4798      	blx	r3
    2ef6:	e01b      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ef8:	4913      	ldr	r1, [pc, #76]	; (2f48 <_usb_ep0_on_tansfer_ok+0xe8>)
    2efa:	4a10      	ldr	r2, [pc, #64]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2efc:	8808      	ldrh	r0, [r1, #0]
    2efe:	8813      	ldrh	r3, [r2, #0]
    2f00:	18c3      	adds	r3, r0, r3
    2f02:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    2f04:	2300      	movs	r3, #0
    2f06:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f08:	2308      	movs	r3, #8
    2f0a:	4a0d      	ldr	r2, [pc, #52]	; (2f40 <_usb_ep0_on_tansfer_ok+0xe0>)
    2f0c:	2100      	movs	r1, #0
    2f0e:	4811      	ldr	r0, [pc, #68]	; (2f54 <_usb_ep0_on_tansfer_ok+0xf4>)
    2f10:	4c11      	ldr	r4, [pc, #68]	; (2f58 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f12:	47a0      	blx	r4
    2f14:	e00c      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2f16:	2b02      	cmp	r3, #2
    2f18:	d102      	bne.n	2f20 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    2f1a:	4b10      	ldr	r3, [pc, #64]	; (2f5c <_usb_ep0_on_tansfer_ok+0xfc>)
    2f1c:	4798      	blx	r3
    2f1e:	e007      	b.n	2f30 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    2f20:	4b05      	ldr	r3, [pc, #20]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2f22:	691b      	ldr	r3, [r3, #16]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d000      	beq.n	2f2a <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    2f28:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2f2a:	2200      	movs	r2, #0
    2f2c:	4b01      	ldr	r3, [pc, #4]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f2e:	701a      	strb	r2, [r3, #0]
		}
}
    2f30:	bd70      	pop	{r4, r5, r6, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	2000016e 	.word	0x2000016e
    2f38:	20000438 	.word	0x20000438
    2f3c:	2000016c 	.word	0x2000016c
    2f40:	20000450 	.word	0x20000450
    2f44:	000045c5 	.word	0x000045c5
    2f48:	20000140 	.word	0x20000140
    2f4c:	00002e35 	.word	0x00002e35
    2f50:	00002a15 	.word	0x00002a15
    2f54:	200002d0 	.word	0x200002d0
    2f58:	0000382d 	.word	0x0000382d
    2f5c:	00002aa1 	.word	0x00002aa1

00002f60 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    2f60:	b570      	push	{r4, r5, r6, lr}
    2f62:	0004      	movs	r4, r0
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    2f64:	230f      	movs	r3, #15
    2f66:	4003      	ands	r3, r0
		return false;
    2f68:	2000      	movs	r0, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    2f6a:	2b01      	cmp	r3, #1
    2f6c:	d812      	bhi.n	2f94 <udd_ep_clear_halt+0x34>
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    2f6e:	0020      	movs	r0, r4
    2f70:	4b09      	ldr	r3, [pc, #36]	; (2f98 <udd_ep_clear_halt+0x38>)
    2f72:	4798      	blx	r3
    2f74:	0005      	movs	r5, r0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    2f76:	0021      	movs	r1, r4
    2f78:	4808      	ldr	r0, [pc, #32]	; (2f9c <udd_ep_clear_halt+0x3c>)
    2f7a:	4b09      	ldr	r3, [pc, #36]	; (2fa0 <udd_ep_clear_halt+0x40>)
    2f7c:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    2f7e:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    2f80:	2001      	movs	r0, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    2f82:	07db      	lsls	r3, r3, #31
    2f84:	d506      	bpl.n	2f94 <udd_ep_clear_halt+0x34>
		ptr_job->busy = false;
    2f86:	7cab      	ldrb	r3, [r5, #18]
    2f88:	2201      	movs	r2, #1
    2f8a:	4393      	bics	r3, r2
    2f8c:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2f8e:	682b      	ldr	r3, [r5, #0]
    2f90:	4798      	blx	r3
	}

	return true;
    2f92:	2001      	movs	r0, #1
}
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	000026a9 	.word	0x000026a9
    2f9c:	200002d0 	.word	0x200002d0
    2fa0:	00003755 	.word	0x00003755

00002fa4 <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2fa4:	4b02      	ldr	r3, [pc, #8]	; (2fb0 <udd_set_address+0xc>)
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	2380      	movs	r3, #128	; 0x80
    2faa:	4318      	orrs	r0, r3
    2fac:	7290      	strb	r0, [r2, #10]
}

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    2fae:	4770      	bx	lr
    2fb0:	200002d0 	.word	0x200002d0

00002fb4 <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2fb4:	4b02      	ldr	r3, [pc, #8]	; (2fc0 <udd_getaddress+0xc>)
    2fb6:	681b      	ldr	r3, [r3, #0]
    2fb8:	7a98      	ldrb	r0, [r3, #10]
    2fba:	0640      	lsls	r0, r0, #25
    2fbc:	0e40      	lsrs	r0, r0, #25

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    2fbe:	4770      	bx	lr
    2fc0:	200002d0 	.word	0x200002d0

00002fc4 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    2fc4:	b510      	push	{r4, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2fc6:	4b12      	ldr	r3, [pc, #72]	; (3010 <udd_send_remotewakeup+0x4c>)
    2fc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2fca:	069b      	lsls	r3, r3, #26
    2fcc:	d406      	bmi.n	2fdc <udd_send_remotewakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2fce:	4910      	ldr	r1, [pc, #64]	; (3010 <udd_send_remotewakeup+0x4c>)
    2fd0:	22d0      	movs	r2, #208	; 0xd0
    2fd2:	68cb      	ldr	r3, [r1, #12]
    2fd4:	4013      	ands	r3, r2
    2fd6:	2bd0      	cmp	r3, #208	; 0xd0
    2fd8:	d1fb      	bne.n	2fd2 <udd_send_remotewakeup+0xe>
    2fda:	e004      	b.n	2fe6 <udd_send_remotewakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2fdc:	490c      	ldr	r1, [pc, #48]	; (3010 <udd_send_remotewakeup+0x4c>)
    2fde:	2210      	movs	r2, #16
    2fe0:	68cb      	ldr	r3, [r1, #12]
    2fe2:	421a      	tst	r2, r3
    2fe4:	d0fc      	beq.n	2fe0 <udd_send_remotewakeup+0x1c>

void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
    2fe6:	2003      	movs	r0, #3
    2fe8:	4b0a      	ldr	r3, [pc, #40]	; (3014 <udd_send_remotewakeup+0x50>)
    2fea:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    2fec:	4b0a      	ldr	r3, [pc, #40]	; (3018 <udd_send_remotewakeup+0x54>)
    2fee:	681a      	ldr	r2, [r3, #0]
    2ff0:	7b53      	ldrb	r3, [r2, #13]
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    2ff2:	2b02      	cmp	r3, #2
    2ff4:	d00b      	beq.n	300e <udd_send_remotewakeup+0x4a>
    2ff6:	2105      	movs	r1, #5
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    2ff8:	2002      	movs	r0, #2
    2ffa:	8913      	ldrh	r3, [r2, #8]
    2ffc:	4303      	orrs	r3, r0
    2ffe:	b29b      	uxth	r3, r3
    3000:	8113      	strh	r3, [r2, #8]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    3002:	7b53      	ldrb	r3, [r2, #13]
    3004:	2b02      	cmp	r3, #2
    3006:	d002      	beq.n	300e <udd_send_remotewakeup+0x4a>
    3008:	3901      	subs	r1, #1
    300a:	2900      	cmp	r1, #0
    300c:	d1f5      	bne.n	2ffa <udd_send_remotewakeup+0x36>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    300e:	bd10      	pop	{r4, pc}
    3010:	40000800 	.word	0x40000800
    3014:	000025fd 	.word	0x000025fd
    3018:	200002d0 	.word	0x200002d0

0000301c <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    301c:	4b01      	ldr	r3, [pc, #4]	; (3024 <udd_set_setup_payload+0x8>)
    301e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3020:	8199      	strh	r1, [r3, #12]
}
    3022:	4770      	bx	lr
    3024:	20000438 	.word	0x20000438

00003028 <udd_detach>:
	UDC_RESUME_EVENT();
#endif
}

void udd_detach(void)
{
    3028:	b510      	push	{r4, lr}
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    302a:	4b05      	ldr	r3, [pc, #20]	; (3040 <udd_detach+0x18>)
    302c:	681a      	ldr	r2, [r3, #0]
    302e:	8911      	ldrh	r1, [r2, #8]
    3030:	2301      	movs	r3, #1
    3032:	430b      	orrs	r3, r1
    3034:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3036:	2001      	movs	r0, #1
    3038:	4b02      	ldr	r3, [pc, #8]	; (3044 <udd_detach+0x1c>)
    303a:	4798      	blx	r3
}
    303c:	bd10      	pop	{r4, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	200002d0 	.word	0x200002d0
    3044:	000025fd 	.word	0x000025fd

00003048 <udd_attach>:

void udd_attach(void)
{
    3048:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    304a:	2003      	movs	r0, #3
    304c:	4b16      	ldr	r3, [pc, #88]	; (30a8 <udd_attach+0x60>)
    304e:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3050:	4c16      	ldr	r4, [pc, #88]	; (30ac <udd_attach+0x64>)
    3052:	6822      	ldr	r2, [r4, #0]
    3054:	8913      	ldrh	r3, [r2, #8]
    3056:	2101      	movs	r1, #1
    3058:	438b      	bics	r3, r1
    305a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    305c:	4a14      	ldr	r2, [pc, #80]	; (30b0 <udd_attach+0x68>)
    305e:	3103      	adds	r1, #3
    3060:	0020      	movs	r0, r4
    3062:	4e14      	ldr	r6, [pc, #80]	; (30b4 <udd_attach+0x6c>)
    3064:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3066:	4a14      	ldr	r2, [pc, #80]	; (30b8 <udd_attach+0x70>)
    3068:	2100      	movs	r1, #0
    306a:	0020      	movs	r0, r4
    306c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    306e:	4a13      	ldr	r2, [pc, #76]	; (30bc <udd_attach+0x74>)
    3070:	2101      	movs	r1, #1
    3072:	0020      	movs	r0, r4
    3074:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3076:	4a12      	ldr	r2, [pc, #72]	; (30c0 <udd_attach+0x78>)
    3078:	2102      	movs	r1, #2
    307a:	0020      	movs	r0, r4
    307c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    307e:	2104      	movs	r1, #4
    3080:	0020      	movs	r0, r4
    3082:	4d10      	ldr	r5, [pc, #64]	; (30c4 <udd_attach+0x7c>)
    3084:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3086:	2100      	movs	r1, #0
    3088:	0020      	movs	r0, r4
    308a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    308c:	2101      	movs	r1, #1
    308e:	0020      	movs	r0, r4
    3090:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3092:	2102      	movs	r1, #2
    3094:	0020      	movs	r0, r4
    3096:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3098:	4a0b      	ldr	r2, [pc, #44]	; (30c8 <udd_attach+0x80>)
    309a:	2106      	movs	r1, #6
    309c:	0020      	movs	r0, r4
    309e:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    30a0:	2106      	movs	r1, #6
    30a2:	0020      	movs	r0, r4
    30a4:	47a8      	blx	r5
#endif
}
    30a6:	bd70      	pop	{r4, r5, r6, pc}
    30a8:	000025fd 	.word	0x000025fd
    30ac:	200002d0 	.word	0x200002d0
    30b0:	00002c41 	.word	0x00002c41
    30b4:	000031f9 	.word	0x000031f9
    30b8:	00002c2d 	.word	0x00002c2d
    30bc:	00002965 	.word	0x00002965
    30c0:	000028f5 	.word	0x000028f5
    30c4:	0000321d 	.word	0x0000321d
    30c8:	0000289d 	.word	0x0000289d

000030cc <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    30cc:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    30ce:	2100      	movs	r1, #0
    30d0:	200e      	movs	r0, #14
    30d2:	4b08      	ldr	r3, [pc, #32]	; (30f4 <_uhd_vbus_handler+0x28>)
    30d4:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    30d6:	4b08      	ldr	r3, [pc, #32]	; (30f8 <_uhd_vbus_handler+0x2c>)
    30d8:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    30da:	045b      	lsls	r3, r3, #17
    30dc:	d502      	bpl.n	30e4 <_uhd_vbus_handler+0x18>
		udd_attach();
    30de:	4b07      	ldr	r3, [pc, #28]	; (30fc <_uhd_vbus_handler+0x30>)
    30e0:	4798      	blx	r3
    30e2:	e001      	b.n	30e8 <_uhd_vbus_handler+0x1c>
	} else {
		udd_detach();
    30e4:	4b06      	ldr	r3, [pc, #24]	; (3100 <_uhd_vbus_handler+0x34>)
    30e6:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    30e8:	2100      	movs	r1, #0
    30ea:	200e      	movs	r0, #14
    30ec:	4b05      	ldr	r3, [pc, #20]	; (3104 <_uhd_vbus_handler+0x38>)
    30ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    30f0:	bd10      	pop	{r4, pc}
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	00001dc1 	.word	0x00001dc1
    30f8:	41004400 	.word	0x41004400
    30fc:	00003049 	.word	0x00003049
    3100:	00003029 	.word	0x00003029
    3104:	00001da1 	.word	0x00001da1

00003108 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3108:	b570      	push	{r4, r5, r6, lr}
    310a:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    310c:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3110:	b672      	cpsid	i
    3112:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3116:	2600      	movs	r6, #0
    3118:	4b28      	ldr	r3, [pc, #160]	; (31bc <udd_enable+0xb4>)
    311a:	701e      	strb	r6, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    311c:	ad03      	add	r5, sp, #12
    311e:	0028      	movs	r0, r5
    3120:	4b27      	ldr	r3, [pc, #156]	; (31c0 <udd_enable+0xb8>)
    3122:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3124:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    3126:	4e27      	ldr	r6, [pc, #156]	; (31c4 <udd_enable+0xbc>)
    3128:	002a      	movs	r2, r5
    312a:	4927      	ldr	r1, [pc, #156]	; (31c8 <udd_enable+0xc0>)
    312c:	0030      	movs	r0, r6
    312e:	4b27      	ldr	r3, [pc, #156]	; (31cc <udd_enable+0xc4>)
    3130:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3132:	0030      	movs	r0, r6
    3134:	4b26      	ldr	r3, [pc, #152]	; (31d0 <udd_enable+0xc8>)
    3136:	4798      	blx	r3
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3138:	4b26      	ldr	r3, [pc, #152]	; (31d4 <udd_enable+0xcc>)
    313a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    313c:	069b      	lsls	r3, r3, #26
    313e:	d406      	bmi.n	314e <udd_enable+0x46>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3140:	4924      	ldr	r1, [pc, #144]	; (31d4 <udd_enable+0xcc>)
    3142:	22d0      	movs	r2, #208	; 0xd0
    3144:	68cb      	ldr	r3, [r1, #12]
    3146:	4013      	ands	r3, r2
    3148:	2bd0      	cmp	r3, #208	; 0xd0
    314a:	d1fb      	bne.n	3144 <udd_enable+0x3c>
    314c:	e004      	b.n	3158 <udd_enable+0x50>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    314e:	4921      	ldr	r1, [pc, #132]	; (31d4 <udd_enable+0xcc>)
    3150:	2210      	movs	r2, #16
    3152:	68cb      	ldr	r3, [r1, #12]
    3154:	421a      	tst	r2, r3
    3156:	d0fc      	beq.n	3152 <udd_enable+0x4a>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3158:	2001      	movs	r0, #1
    315a:	4b1f      	ldr	r3, [pc, #124]	; (31d8 <udd_enable+0xd0>)
    315c:	4798      	blx	r3
static void _usb_vbus_config(void)
{

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    315e:	4668      	mov	r0, sp
    3160:	4b1e      	ldr	r3, [pc, #120]	; (31dc <udd_enable+0xd4>)
    3162:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3164:	230e      	movs	r3, #14
    3166:	9300      	str	r3, [sp, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3168:	2300      	movs	r3, #0
    316a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    316c:	466a      	mov	r2, sp
    316e:	7213      	strb	r3, [r2, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3170:	3303      	adds	r3, #3
    3172:	72d3      	strb	r3, [r2, #11]
	eint_chan_conf.filter_input_signal = true;
    3174:	3b02      	subs	r3, #2
    3176:	7293      	strb	r3, [r2, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3178:	2100      	movs	r1, #0
    317a:	200e      	movs	r0, #14
    317c:	4b18      	ldr	r3, [pc, #96]	; (31e0 <udd_enable+0xd8>)
    317e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3180:	4669      	mov	r1, sp
    3182:	200e      	movs	r0, #14
    3184:	4b17      	ldr	r3, [pc, #92]	; (31e4 <udd_enable+0xdc>)
    3186:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3188:	2200      	movs	r2, #0
    318a:	210e      	movs	r1, #14
    318c:	4816      	ldr	r0, [pc, #88]	; (31e8 <udd_enable+0xe0>)
    318e:	4b17      	ldr	r3, [pc, #92]	; (31ec <udd_enable+0xe4>)
    3190:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3192:	2100      	movs	r1, #0
    3194:	200e      	movs	r0, #14
    3196:	4b16      	ldr	r3, [pc, #88]	; (31f0 <udd_enable+0xe8>)
    3198:	4798      	blx	r3
    319a:	4b16      	ldr	r3, [pc, #88]	; (31f4 <udd_enable+0xec>)
    319c:	6a1b      	ldr	r3, [r3, #32]

	udd_sleep_mode(UDD_STATE_SUSPEND);

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    319e:	045b      	lsls	r3, r3, #17
    31a0:	d501      	bpl.n	31a6 <udd_enable+0x9e>
		/* USB Attach */
		_uhd_vbus_handler();
    31a2:	4b11      	ldr	r3, [pc, #68]	; (31e8 <udd_enable+0xe0>)
    31a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31a6:	2c00      	cmp	r4, #0
    31a8:	d105      	bne.n	31b6 <udd_enable+0xae>
		cpu_irq_enable();
    31aa:	2201      	movs	r2, #1
    31ac:	4b03      	ldr	r3, [pc, #12]	; (31bc <udd_enable+0xb4>)
    31ae:	701a      	strb	r2, [r3, #0]
    31b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    31b4:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    31b6:	b004      	add	sp, #16
    31b8:	bd70      	pop	{r4, r5, r6, pc}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	200000d8 	.word	0x200000d8
    31c0:	00003e51 	.word	0x00003e51
    31c4:	200002d0 	.word	0x200002d0
    31c8:	41005000 	.word	0x41005000
    31cc:	00003e61 	.word	0x00003e61
    31d0:	000038a9 	.word	0x000038a9
    31d4:	40000800 	.word	0x40000800
    31d8:	000025fd 	.word	0x000025fd
    31dc:	00001ecd 	.word	0x00001ecd
    31e0:	00001dc1 	.word	0x00001dc1
    31e4:	00001ee1 	.word	0x00001ee1
    31e8:	000030cd 	.word	0x000030cd
    31ec:	00001d75 	.word	0x00001d75
    31f0:	00001da1 	.word	0x00001da1
    31f4:	41004400 	.word	0x41004400

000031f8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    31f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    31fa:	000b      	movs	r3, r1
    31fc:	332e      	adds	r3, #46	; 0x2e
    31fe:	009b      	lsls	r3, r3, #2
    3200:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3202:	22aa      	movs	r2, #170	; 0xaa
    3204:	0052      	lsls	r2, r2, #1
    3206:	0049      	lsls	r1, r1, #1
    3208:	5a84      	ldrh	r4, [r0, r2]
    320a:	4b03      	ldr	r3, [pc, #12]	; (3218 <usb_device_register_callback+0x20>)
    320c:	5acb      	ldrh	r3, [r1, r3]
    320e:	4323      	orrs	r3, r4
    3210:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3212:	2000      	movs	r0, #0
    3214:	bd10      	pop	{r4, pc}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	00004674 	.word	0x00004674

0000321c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    321c:	0049      	lsls	r1, r1, #1
    321e:	4b06      	ldr	r3, [pc, #24]	; (3238 <usb_device_enable_callback+0x1c>)
    3220:	5acb      	ldrh	r3, [r1, r3]
    3222:	6802      	ldr	r2, [r0, #0]
    3224:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3226:	21ab      	movs	r1, #171	; 0xab
    3228:	0049      	lsls	r1, r1, #1
    322a:	5a42      	ldrh	r2, [r0, r1]
    322c:	431a      	orrs	r2, r3
    322e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3230:	6802      	ldr	r2, [r0, #0]
    3232:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3234:	2000      	movs	r0, #0
    3236:	4770      	bx	lr
    3238:	00004674 	.word	0x00004674

0000323c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    323c:	0049      	lsls	r1, r1, #1
    323e:	4b05      	ldr	r3, [pc, #20]	; (3254 <usb_device_disable_callback+0x18>)
    3240:	5aca      	ldrh	r2, [r1, r3]
    3242:	21ab      	movs	r1, #171	; 0xab
    3244:	0049      	lsls	r1, r1, #1
    3246:	5a43      	ldrh	r3, [r0, r1]
    3248:	4393      	bics	r3, r2
    324a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    324c:	6803      	ldr	r3, [r0, #0]
    324e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3250:	2000      	movs	r0, #0
    3252:	4770      	bx	lr
    3254:	00004674 	.word	0x00004674

00003258 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3258:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    325a:	008c      	lsls	r4, r1, #2
    325c:	18a4      	adds	r4, r4, r2
    325e:	3434      	adds	r4, #52	; 0x34
    3260:	00a4      	lsls	r4, r4, #2
    3262:	1904      	adds	r4, r0, r4
    3264:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3266:	1841      	adds	r1, r0, r1
    3268:	3159      	adds	r1, #89	; 0x59
    326a:	31ff      	adds	r1, #255	; 0xff
    326c:	7808      	ldrb	r0, [r1, #0]
    326e:	4b03      	ldr	r3, [pc, #12]	; (327c <usb_device_endpoint_register_callback+0x24>)
    3270:	5c9b      	ldrb	r3, [r3, r2]
    3272:	4303      	orrs	r3, r0
    3274:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    3276:	2000      	movs	r0, #0
    3278:	bd10      	pop	{r4, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00004684 	.word	0x00004684

00003280 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3280:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3282:	008b      	lsls	r3, r1, #2
    3284:	189b      	adds	r3, r3, r2
    3286:	3334      	adds	r3, #52	; 0x34
    3288:	009b      	lsls	r3, r3, #2
    328a:	18c3      	adds	r3, r0, r3
    328c:	2400      	movs	r4, #0
    328e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3290:	1841      	adds	r1, r0, r1
    3292:	3159      	adds	r1, #89	; 0x59
    3294:	31ff      	adds	r1, #255	; 0xff
    3296:	4b03      	ldr	r3, [pc, #12]	; (32a4 <usb_device_endpoint_unregister_callback+0x24>)
    3298:	5c9a      	ldrb	r2, [r3, r2]
    329a:	780b      	ldrb	r3, [r1, #0]
    329c:	4393      	bics	r3, r2
    329e:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    32a0:	2000      	movs	r0, #0
    32a2:	bd10      	pop	{r4, pc}
    32a4:	00004684 	.word	0x00004684

000032a8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    32a8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    32aa:	230f      	movs	r3, #15
    32ac:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    32ae:	18c4      	adds	r4, r0, r3
    32b0:	3461      	adds	r4, #97	; 0x61
    32b2:	34ff      	adds	r4, #255	; 0xff
    32b4:	7826      	ldrb	r6, [r4, #0]
    32b6:	4d32      	ldr	r5, [pc, #200]	; (3380 <usb_device_endpoint_enable_callback+0xd8>)
    32b8:	5cad      	ldrb	r5, [r5, r2]
    32ba:	4335      	orrs	r5, r6
    32bc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    32be:	2a00      	cmp	r2, #0
    32c0:	d11f      	bne.n	3302 <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    32c2:	2b00      	cmp	r3, #0
    32c4:	d108      	bne.n	32d8 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    32c6:	015c      	lsls	r4, r3, #5
    32c8:	6805      	ldr	r5, [r0, #0]
    32ca:	46ac      	mov	ip, r5
    32cc:	4464      	add	r4, ip
    32ce:	340a      	adds	r4, #10
    32d0:	34ff      	adds	r4, #255	; 0xff
    32d2:	2503      	movs	r5, #3
    32d4:	7025      	strb	r5, [r4, #0]
    32d6:	e03d      	b.n	3354 <usb_device_endpoint_enable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    32d8:	b24c      	sxtb	r4, r1
    32da:	2c00      	cmp	r4, #0
    32dc:	da08      	bge.n	32f0 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    32de:	015c      	lsls	r4, r3, #5
    32e0:	6805      	ldr	r5, [r0, #0]
    32e2:	46ac      	mov	ip, r5
    32e4:	4464      	add	r4, ip
    32e6:	340a      	adds	r4, #10
    32e8:	34ff      	adds	r4, #255	; 0xff
    32ea:	2502      	movs	r5, #2
    32ec:	7025      	strb	r5, [r4, #0]
    32ee:	e031      	b.n	3354 <usb_device_endpoint_enable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    32f0:	015c      	lsls	r4, r3, #5
    32f2:	6805      	ldr	r5, [r0, #0]
    32f4:	46ac      	mov	ip, r5
    32f6:	4464      	add	r4, ip
    32f8:	340a      	adds	r4, #10
    32fa:	34ff      	adds	r4, #255	; 0xff
    32fc:	2501      	movs	r5, #1
    32fe:	7025      	strb	r5, [r4, #0]
    3300:	e028      	b.n	3354 <usb_device_endpoint_enable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3302:	2a01      	cmp	r2, #1
    3304:	d11c      	bne.n	3340 <usb_device_endpoint_enable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    3306:	2b00      	cmp	r3, #0
    3308:	d107      	bne.n	331a <usb_device_endpoint_enable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    330a:	6802      	ldr	r2, [r0, #0]
    330c:	015b      	lsls	r3, r3, #5
    330e:	18d3      	adds	r3, r2, r3
    3310:	330a      	adds	r3, #10
    3312:	33ff      	adds	r3, #255	; 0xff
    3314:	220c      	movs	r2, #12
    3316:	701a      	strb	r2, [r3, #0]
    3318:	e030      	b.n	337c <usb_device_endpoint_enable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    331a:	b249      	sxtb	r1, r1
    331c:	2900      	cmp	r1, #0
    331e:	da07      	bge.n	3330 <usb_device_endpoint_enable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3320:	6802      	ldr	r2, [r0, #0]
    3322:	015b      	lsls	r3, r3, #5
    3324:	18d3      	adds	r3, r2, r3
    3326:	330a      	adds	r3, #10
    3328:	33ff      	adds	r3, #255	; 0xff
    332a:	2208      	movs	r2, #8
    332c:	701a      	strb	r2, [r3, #0]
    332e:	e025      	b.n	337c <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3330:	6802      	ldr	r2, [r0, #0]
    3332:	015b      	lsls	r3, r3, #5
    3334:	18d3      	adds	r3, r2, r3
    3336:	330a      	adds	r3, #10
    3338:	33ff      	adds	r3, #255	; 0xff
    333a:	2204      	movs	r2, #4
    333c:	701a      	strb	r2, [r3, #0]
    333e:	e01d      	b.n	337c <usb_device_endpoint_enable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3340:	2a02      	cmp	r2, #2
    3342:	d107      	bne.n	3354 <usb_device_endpoint_enable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3344:	6802      	ldr	r2, [r0, #0]
    3346:	015b      	lsls	r3, r3, #5
    3348:	18d3      	adds	r3, r2, r3
    334a:	330a      	adds	r3, #10
    334c:	33ff      	adds	r3, #255	; 0xff
    334e:	2210      	movs	r2, #16
    3350:	701a      	strb	r2, [r3, #0]
    3352:	e013      	b.n	337c <usb_device_endpoint_enable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3354:	2a03      	cmp	r2, #3
    3356:	d111      	bne.n	337c <usb_device_endpoint_enable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    3358:	b249      	sxtb	r1, r1
    335a:	2900      	cmp	r1, #0
    335c:	da07      	bge.n	336e <usb_device_endpoint_enable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    335e:	6802      	ldr	r2, [r0, #0]
    3360:	015b      	lsls	r3, r3, #5
    3362:	18d3      	adds	r3, r2, r3
    3364:	330a      	adds	r3, #10
    3366:	33ff      	adds	r3, #255	; 0xff
    3368:	2240      	movs	r2, #64	; 0x40
    336a:	701a      	strb	r2, [r3, #0]
    336c:	e006      	b.n	337c <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    336e:	6802      	ldr	r2, [r0, #0]
    3370:	015b      	lsls	r3, r3, #5
    3372:	18d3      	adds	r3, r2, r3
    3374:	330a      	adds	r3, #10
    3376:	33ff      	adds	r3, #255	; 0xff
    3378:	2220      	movs	r2, #32
    337a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    337c:	2000      	movs	r0, #0
    337e:	bd70      	pop	{r4, r5, r6, pc}
    3380:	00004684 	.word	0x00004684

00003384 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3384:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3386:	230f      	movs	r3, #15
    3388:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    338a:	18c4      	adds	r4, r0, r3
    338c:	3461      	adds	r4, #97	; 0x61
    338e:	34ff      	adds	r4, #255	; 0xff
    3390:	4d32      	ldr	r5, [pc, #200]	; (345c <usb_device_endpoint_disable_callback+0xd8>)
    3392:	5cae      	ldrb	r6, [r5, r2]
    3394:	7825      	ldrb	r5, [r4, #0]
    3396:	43b5      	bics	r5, r6
    3398:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    339a:	2a00      	cmp	r2, #0
    339c:	d11f      	bne.n	33de <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    339e:	2b00      	cmp	r3, #0
    33a0:	d108      	bne.n	33b4 <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    33a2:	015c      	lsls	r4, r3, #5
    33a4:	6805      	ldr	r5, [r0, #0]
    33a6:	46ac      	mov	ip, r5
    33a8:	4464      	add	r4, ip
    33aa:	3409      	adds	r4, #9
    33ac:	34ff      	adds	r4, #255	; 0xff
    33ae:	2503      	movs	r5, #3
    33b0:	7025      	strb	r5, [r4, #0]
    33b2:	e03d      	b.n	3430 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    33b4:	b24c      	sxtb	r4, r1
    33b6:	2c00      	cmp	r4, #0
    33b8:	da08      	bge.n	33cc <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    33ba:	015c      	lsls	r4, r3, #5
    33bc:	6805      	ldr	r5, [r0, #0]
    33be:	46ac      	mov	ip, r5
    33c0:	4464      	add	r4, ip
    33c2:	3409      	adds	r4, #9
    33c4:	34ff      	adds	r4, #255	; 0xff
    33c6:	2502      	movs	r5, #2
    33c8:	7025      	strb	r5, [r4, #0]
    33ca:	e031      	b.n	3430 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    33cc:	015c      	lsls	r4, r3, #5
    33ce:	6805      	ldr	r5, [r0, #0]
    33d0:	46ac      	mov	ip, r5
    33d2:	4464      	add	r4, ip
    33d4:	3409      	adds	r4, #9
    33d6:	34ff      	adds	r4, #255	; 0xff
    33d8:	2501      	movs	r5, #1
    33da:	7025      	strb	r5, [r4, #0]
    33dc:	e028      	b.n	3430 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    33de:	2a01      	cmp	r2, #1
    33e0:	d11c      	bne.n	341c <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    33e2:	2b00      	cmp	r3, #0
    33e4:	d107      	bne.n	33f6 <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    33e6:	6802      	ldr	r2, [r0, #0]
    33e8:	015b      	lsls	r3, r3, #5
    33ea:	18d3      	adds	r3, r2, r3
    33ec:	3309      	adds	r3, #9
    33ee:	33ff      	adds	r3, #255	; 0xff
    33f0:	220c      	movs	r2, #12
    33f2:	701a      	strb	r2, [r3, #0]
    33f4:	e030      	b.n	3458 <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    33f6:	b249      	sxtb	r1, r1
    33f8:	2900      	cmp	r1, #0
    33fa:	da07      	bge.n	340c <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    33fc:	6802      	ldr	r2, [r0, #0]
    33fe:	015b      	lsls	r3, r3, #5
    3400:	18d3      	adds	r3, r2, r3
    3402:	3309      	adds	r3, #9
    3404:	33ff      	adds	r3, #255	; 0xff
    3406:	2208      	movs	r2, #8
    3408:	701a      	strb	r2, [r3, #0]
    340a:	e025      	b.n	3458 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    340c:	6802      	ldr	r2, [r0, #0]
    340e:	015b      	lsls	r3, r3, #5
    3410:	18d3      	adds	r3, r2, r3
    3412:	3309      	adds	r3, #9
    3414:	33ff      	adds	r3, #255	; 0xff
    3416:	2204      	movs	r2, #4
    3418:	701a      	strb	r2, [r3, #0]
    341a:	e01d      	b.n	3458 <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    341c:	2a02      	cmp	r2, #2
    341e:	d107      	bne.n	3430 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3420:	6802      	ldr	r2, [r0, #0]
    3422:	015b      	lsls	r3, r3, #5
    3424:	18d3      	adds	r3, r2, r3
    3426:	3309      	adds	r3, #9
    3428:	33ff      	adds	r3, #255	; 0xff
    342a:	2210      	movs	r2, #16
    342c:	701a      	strb	r2, [r3, #0]
    342e:	e013      	b.n	3458 <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3430:	2a03      	cmp	r2, #3
    3432:	d111      	bne.n	3458 <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    3434:	b249      	sxtb	r1, r1
    3436:	2900      	cmp	r1, #0
    3438:	da07      	bge.n	344a <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    343a:	6802      	ldr	r2, [r0, #0]
    343c:	015b      	lsls	r3, r3, #5
    343e:	18d3      	adds	r3, r2, r3
    3440:	3309      	adds	r3, #9
    3442:	33ff      	adds	r3, #255	; 0xff
    3444:	2240      	movs	r2, #64	; 0x40
    3446:	701a      	strb	r2, [r3, #0]
    3448:	e006      	b.n	3458 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    344a:	6802      	ldr	r2, [r0, #0]
    344c:	015b      	lsls	r3, r3, #5
    344e:	18d3      	adds	r3, r2, r3
    3450:	3309      	adds	r3, #9
    3452:	33ff      	adds	r3, #255	; 0xff
    3454:	2220      	movs	r2, #32
    3456:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3458:	2000      	movs	r0, #0
    345a:	bd70      	pop	{r4, r5, r6, pc}
    345c:	00004684 	.word	0x00004684

00003460 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3460:	2300      	movs	r3, #0
    3462:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3464:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3466:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3468:	3301      	adds	r3, #1
    346a:	70c3      	strb	r3, [r0, #3]
}
    346c:	4770      	bx	lr
    346e:	46c0      	nop			; (mov r8, r8)

00003470 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3470:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3472:	780a      	ldrb	r2, [r1, #0]
    3474:	230f      	movs	r3, #15
    3476:	4013      	ands	r3, r2
    3478:	001c      	movs	r4, r3
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    347a:	b252      	sxtb	r2, r2

	switch (ep_config->ep_type) {
    347c:	78cb      	ldrb	r3, [r1, #3]
    347e:	2b04      	cmp	r3, #4
    3480:	d900      	bls.n	3484 <usb_device_endpoint_set_config+0x14>
    3482:	e0f1      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
    3484:	009b      	lsls	r3, r3, #2
    3486:	4d8d      	ldr	r5, [pc, #564]	; (36bc <usb_device_endpoint_set_config+0x24c>)
    3488:	58eb      	ldr	r3, [r5, r3]
    348a:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    348c:	6803      	ldr	r3, [r0, #0]
    348e:	3408      	adds	r4, #8
    3490:	0164      	lsls	r4, r4, #5
    3492:	2200      	movs	r2, #0
    3494:	54e2      	strb	r2, [r4, r3]
			return STATUS_OK;
    3496:	2300      	movs	r3, #0
    3498:	e10e      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
    349a:	0162      	lsls	r2, r4, #5
    349c:	6803      	ldr	r3, [r0, #0]
    349e:	469c      	mov	ip, r3
    34a0:	4462      	add	r2, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34a2:	2380      	movs	r3, #128	; 0x80
    34a4:	005b      	lsls	r3, r3, #1
    34a6:	5cd5      	ldrb	r5, [r2, r3]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    34a8:	3be4      	subs	r3, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34aa:	076d      	lsls	r5, r5, #29
    34ac:	d000      	beq.n	34b0 <usb_device_endpoint_set_config+0x40>
    34ae:	e103      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    34b0:	33e4      	adds	r3, #228	; 0xe4
    34b2:	5cd6      	ldrb	r6, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    34b4:	3be4      	subs	r3, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    34b6:	2570      	movs	r5, #112	; 0x70
    34b8:	422e      	tst	r6, r5
    34ba:	d000      	beq.n	34be <usb_device_endpoint_set_config+0x4e>
    34bc:	e0fc      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    34be:	3d5f      	subs	r5, #95	; 0x5f
    34c0:	33e4      	adds	r3, #228	; 0xe4
    34c2:	54d5      	strb	r5, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    34c4:	0023      	movs	r3, r4
    34c6:	3308      	adds	r3, #8
    34c8:	015b      	lsls	r3, r3, #5
    34ca:	6802      	ldr	r2, [r0, #0]
    34cc:	18d2      	adds	r2, r2, r3
    34ce:	352f      	adds	r5, #47	; 0x2f
    34d0:	7155      	strb	r5, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    34d2:	6802      	ldr	r2, [r0, #0]
    34d4:	18d3      	adds	r3, r2, r3
    34d6:	2280      	movs	r2, #128	; 0x80
    34d8:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    34da:	788b      	ldrb	r3, [r1, #2]
    34dc:	2b00      	cmp	r3, #0
    34de:	d00b      	beq.n	34f8 <usb_device_endpoint_set_config+0x88>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    34e0:	0162      	lsls	r2, r4, #5
    34e2:	4b77      	ldr	r3, [pc, #476]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    34e4:	189b      	adds	r3, r3, r2
    34e6:	6858      	ldr	r0, [r3, #4]
    34e8:	2580      	movs	r5, #128	; 0x80
    34ea:	062d      	lsls	r5, r5, #24
    34ec:	4328      	orrs	r0, r5
    34ee:	6058      	str	r0, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    34f0:	695a      	ldr	r2, [r3, #20]
    34f2:	432a      	orrs	r2, r5
    34f4:	615a      	str	r2, [r3, #20]
    34f6:	e00a      	b.n	350e <usb_device_endpoint_set_config+0x9e>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    34f8:	0162      	lsls	r2, r4, #5
    34fa:	4b71      	ldr	r3, [pc, #452]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    34fc:	189b      	adds	r3, r3, r2
    34fe:	685a      	ldr	r2, [r3, #4]
    3500:	0052      	lsls	r2, r2, #1
    3502:	0852      	lsrs	r2, r2, #1
    3504:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3506:	695a      	ldr	r2, [r3, #20]
    3508:	0052      	lsls	r2, r2, #1
    350a:	0852      	lsrs	r2, r2, #1
    350c:	615a      	str	r2, [r3, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    350e:	2207      	movs	r2, #7
    3510:	7848      	ldrb	r0, [r1, #1]
    3512:	0163      	lsls	r3, r4, #5
    3514:	4c6a      	ldr	r4, [pc, #424]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    3516:	18e4      	adds	r4, r4, r3
    3518:	6863      	ldr	r3, [r4, #4]
    351a:	4010      	ands	r0, r2
    351c:	0700      	lsls	r0, r0, #28
    351e:	4d69      	ldr	r5, [pc, #420]	; (36c4 <usb_device_endpoint_set_config+0x254>)
    3520:	402b      	ands	r3, r5
    3522:	4303      	orrs	r3, r0
    3524:	6063      	str	r3, [r4, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3526:	784b      	ldrb	r3, [r1, #1]
    3528:	6961      	ldr	r1, [r4, #20]
    352a:	401a      	ands	r2, r3
    352c:	0713      	lsls	r3, r2, #28
    352e:	000a      	movs	r2, r1
    3530:	402a      	ands	r2, r5
    3532:	431a      	orrs	r2, r3
    3534:	6162      	str	r2, [r4, #20]
			return STATUS_OK;
    3536:	2300      	movs	r3, #0
    3538:	e0be      	b.n	36b8 <usb_device_endpoint_set_config+0x248>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    353a:	2a00      	cmp	r2, #0
    353c:	da18      	bge.n	3570 <usb_device_endpoint_set_config+0x100>
    353e:	0165      	lsls	r5, r4, #5
    3540:	6803      	ldr	r3, [r0, #0]
    3542:	469c      	mov	ip, r3
    3544:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3546:	2380      	movs	r3, #128	; 0x80
    3548:	005b      	lsls	r3, r3, #1
    354a:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    354c:	3be4      	subs	r3, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    354e:	2670      	movs	r6, #112	; 0x70
    3550:	4237      	tst	r7, r6
    3552:	d000      	beq.n	3556 <usb_device_endpoint_set_config+0xe6>
    3554:	e0b0      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3556:	3690      	adds	r6, #144	; 0x90
    3558:	5daf      	ldrb	r7, [r5, r6]
    355a:	3304      	adds	r3, #4
    355c:	433b      	orrs	r3, r7
    355e:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3560:	6800      	ldr	r0, [r0, #0]
    3562:	0023      	movs	r3, r4
    3564:	3308      	adds	r3, #8
    3566:	015b      	lsls	r3, r3, #5
    3568:	18c3      	adds	r3, r0, r3
    356a:	2080      	movs	r0, #128	; 0x80
    356c:	7118      	strb	r0, [r3, #4]
    356e:	e07b      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
    3570:	0165      	lsls	r5, r4, #5
    3572:	6803      	ldr	r3, [r0, #0]
    3574:	469c      	mov	ip, r3
    3576:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3578:	2380      	movs	r3, #128	; 0x80
    357a:	005b      	lsls	r3, r3, #1
    357c:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    357e:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3580:	0776      	lsls	r6, r6, #29
    3582:	d000      	beq.n	3586 <usb_device_endpoint_set_config+0x116>
    3584:	e098      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3586:	2680      	movs	r6, #128	; 0x80
    3588:	0076      	lsls	r6, r6, #1
    358a:	5daf      	ldrb	r7, [r5, r6]
    358c:	3b1a      	subs	r3, #26
    358e:	433b      	orrs	r3, r7
    3590:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3592:	6800      	ldr	r0, [r0, #0]
    3594:	0023      	movs	r3, r4
    3596:	3308      	adds	r3, #8
    3598:	015b      	lsls	r3, r3, #5
    359a:	18c3      	adds	r3, r0, r3
    359c:	2040      	movs	r0, #64	; 0x40
    359e:	7158      	strb	r0, [r3, #5]
    35a0:	e062      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    35a2:	2a00      	cmp	r2, #0
    35a4:	da17      	bge.n	35d6 <usb_device_endpoint_set_config+0x166>
    35a6:	0165      	lsls	r5, r4, #5
    35a8:	6803      	ldr	r3, [r0, #0]
    35aa:	469c      	mov	ip, r3
    35ac:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    35ae:	2380      	movs	r3, #128	; 0x80
    35b0:	005b      	lsls	r3, r3, #1
    35b2:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    35b4:	3be4      	subs	r3, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    35b6:	2670      	movs	r6, #112	; 0x70
    35b8:	4237      	tst	r7, r6
    35ba:	d17d      	bne.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    35bc:	3690      	adds	r6, #144	; 0x90
    35be:	5daf      	ldrb	r7, [r5, r6]
    35c0:	3314      	adds	r3, #20
    35c2:	433b      	orrs	r3, r7
    35c4:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    35c6:	6800      	ldr	r0, [r0, #0]
    35c8:	0023      	movs	r3, r4
    35ca:	3308      	adds	r3, #8
    35cc:	015b      	lsls	r3, r3, #5
    35ce:	18c3      	adds	r3, r0, r3
    35d0:	2080      	movs	r0, #128	; 0x80
    35d2:	7118      	strb	r0, [r3, #4]
    35d4:	e048      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
    35d6:	0165      	lsls	r5, r4, #5
    35d8:	6803      	ldr	r3, [r0, #0]
    35da:	469c      	mov	ip, r3
    35dc:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35de:	2380      	movs	r3, #128	; 0x80
    35e0:	005b      	lsls	r3, r3, #1
    35e2:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    35e4:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    35e6:	0776      	lsls	r6, r6, #29
    35e8:	d166      	bne.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    35ea:	2680      	movs	r6, #128	; 0x80
    35ec:	0076      	lsls	r6, r6, #1
    35ee:	5daf      	ldrb	r7, [r5, r6]
    35f0:	3b19      	subs	r3, #25
    35f2:	433b      	orrs	r3, r7
    35f4:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    35f6:	6800      	ldr	r0, [r0, #0]
    35f8:	0023      	movs	r3, r4
    35fa:	3308      	adds	r3, #8
    35fc:	015b      	lsls	r3, r3, #5
    35fe:	18c3      	adds	r3, r0, r3
    3600:	2040      	movs	r0, #64	; 0x40
    3602:	7158      	strb	r0, [r3, #5]
    3604:	e030      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    3606:	2a00      	cmp	r2, #0
    3608:	da17      	bge.n	363a <usb_device_endpoint_set_config+0x1ca>
    360a:	0165      	lsls	r5, r4, #5
    360c:	6803      	ldr	r3, [r0, #0]
    360e:	469c      	mov	ip, r3
    3610:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3612:	2380      	movs	r3, #128	; 0x80
    3614:	005b      	lsls	r3, r3, #1
    3616:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    3618:	3be4      	subs	r3, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    361a:	2670      	movs	r6, #112	; 0x70
    361c:	4237      	tst	r7, r6
    361e:	d14b      	bne.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3620:	3690      	adds	r6, #144	; 0x90
    3622:	5daf      	ldrb	r7, [r5, r6]
    3624:	3324      	adds	r3, #36	; 0x24
    3626:	433b      	orrs	r3, r7
    3628:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    362a:	6800      	ldr	r0, [r0, #0]
    362c:	0023      	movs	r3, r4
    362e:	3308      	adds	r3, #8
    3630:	015b      	lsls	r3, r3, #5
    3632:	18c3      	adds	r3, r0, r3
    3634:	2080      	movs	r0, #128	; 0x80
    3636:	7118      	strb	r0, [r3, #4]
    3638:	e016      	b.n	3668 <usb_device_endpoint_set_config+0x1f8>
    363a:	0165      	lsls	r5, r4, #5
    363c:	6803      	ldr	r3, [r0, #0]
    363e:	469c      	mov	ip, r3
    3640:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3642:	2380      	movs	r3, #128	; 0x80
    3644:	005b      	lsls	r3, r3, #1
    3646:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3648:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    364a:	0776      	lsls	r6, r6, #29
    364c:	d134      	bne.n	36b8 <usb_device_endpoint_set_config+0x248>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    364e:	2680      	movs	r6, #128	; 0x80
    3650:	0076      	lsls	r6, r6, #1
    3652:	5daf      	ldrb	r7, [r5, r6]
    3654:	3b18      	subs	r3, #24
    3656:	433b      	orrs	r3, r7
    3658:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    365a:	6800      	ldr	r0, [r0, #0]
    365c:	0023      	movs	r3, r4
    365e:	3308      	adds	r3, #8
    3660:	015b      	lsls	r3, r3, #5
    3662:	18c3      	adds	r3, r0, r3
    3664:	2040      	movs	r0, #64	; 0x40
    3666:	7158      	strb	r0, [r3, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3668:	0fd2      	lsrs	r2, r2, #31
    366a:	784d      	ldrb	r5, [r1, #1]
    366c:	0063      	lsls	r3, r4, #1
    366e:	189b      	adds	r3, r3, r2
    3670:	011b      	lsls	r3, r3, #4
    3672:	4813      	ldr	r0, [pc, #76]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    3674:	18c3      	adds	r3, r0, r3
    3676:	685e      	ldr	r6, [r3, #4]
    3678:	2007      	movs	r0, #7
    367a:	4005      	ands	r5, r0
    367c:	072d      	lsls	r5, r5, #28
    367e:	4811      	ldr	r0, [pc, #68]	; (36c4 <usb_device_endpoint_set_config+0x254>)
    3680:	4030      	ands	r0, r6
    3682:	4328      	orrs	r0, r5
    3684:	6058      	str	r0, [r3, #4]

	if (true == ep_config->auto_zlp) {
    3686:	788b      	ldrb	r3, [r1, #2]
    3688:	2b00      	cmp	r3, #0
    368a:	d00b      	beq.n	36a4 <usb_device_endpoint_set_config+0x234>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    368c:	0063      	lsls	r3, r4, #1
    368e:	189a      	adds	r2, r3, r2
    3690:	0112      	lsls	r2, r2, #4
    3692:	4c0b      	ldr	r4, [pc, #44]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    3694:	18a2      	adds	r2, r4, r2
    3696:	6853      	ldr	r3, [r2, #4]
    3698:	2180      	movs	r1, #128	; 0x80
    369a:	0609      	lsls	r1, r1, #24
    369c:	430b      	orrs	r3, r1
    369e:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    36a0:	2300      	movs	r3, #0
    36a2:	e009      	b.n	36b8 <usb_device_endpoint_set_config+0x248>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    36a4:	0063      	lsls	r3, r4, #1
    36a6:	189a      	adds	r2, r3, r2
    36a8:	0112      	lsls	r2, r2, #4
    36aa:	4b05      	ldr	r3, [pc, #20]	; (36c0 <usb_device_endpoint_set_config+0x250>)
    36ac:	189a      	adds	r2, r3, r2
    36ae:	6853      	ldr	r3, [r2, #4]
    36b0:	005b      	lsls	r3, r3, #1
    36b2:	085b      	lsrs	r3, r3, #1
    36b4:	6053      	str	r3, [r2, #4]
	}

	return STATUS_OK;
    36b6:	2300      	movs	r3, #0
}
    36b8:	0018      	movs	r0, r3
    36ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36bc:	00004660 	.word	0x00004660
    36c0:	20000458 	.word	0x20000458
    36c4:	8fffffff 	.word	0x8fffffff

000036c8 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    36c8:	230f      	movs	r3, #15
    36ca:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    36cc:	b249      	sxtb	r1, r1
    36ce:	2900      	cmp	r1, #0
    36d0:	da0a      	bge.n	36e8 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    36d2:	3308      	adds	r3, #8
    36d4:	015b      	lsls	r3, r3, #5
    36d6:	6802      	ldr	r2, [r0, #0]
    36d8:	18d2      	adds	r2, r2, r3
    36da:	2180      	movs	r1, #128	; 0x80
    36dc:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    36de:	6802      	ldr	r2, [r0, #0]
    36e0:	18d3      	adds	r3, r2, r3
    36e2:	2202      	movs	r2, #2
    36e4:	71da      	strb	r2, [r3, #7]
    36e6:	e009      	b.n	36fc <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    36e8:	3308      	adds	r3, #8
    36ea:	015b      	lsls	r3, r3, #5
    36ec:	6802      	ldr	r2, [r0, #0]
    36ee:	18d2      	adds	r2, r2, r3
    36f0:	2140      	movs	r1, #64	; 0x40
    36f2:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    36f4:	6802      	ldr	r2, [r0, #0]
    36f6:	18d3      	adds	r3, r2, r3
    36f8:	2201      	movs	r2, #1
    36fa:	71da      	strb	r2, [r3, #7]
	}
}
    36fc:	4770      	bx	lr
    36fe:	46c0      	nop			; (mov r8, r8)

00003700 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3700:	230f      	movs	r3, #15
    3702:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3704:	b249      	sxtb	r1, r1
    3706:	2900      	cmp	r1, #0
    3708:	da07      	bge.n	371a <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    370a:	6802      	ldr	r2, [r0, #0]
    370c:	3308      	adds	r3, #8
    370e:	015b      	lsls	r3, r3, #5
    3710:	18d3      	adds	r3, r2, r3
    3712:	7998      	ldrb	r0, [r3, #6]
    3714:	0680      	lsls	r0, r0, #26
    3716:	0fc0      	lsrs	r0, r0, #31
    3718:	e006      	b.n	3728 <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    371a:	6802      	ldr	r2, [r0, #0]
    371c:	3308      	adds	r3, #8
    371e:	015b      	lsls	r3, r3, #5
    3720:	18d3      	adds	r3, r2, r3
    3722:	7998      	ldrb	r0, [r3, #6]
    3724:	06c0      	lsls	r0, r0, #27
    3726:	0fc0      	lsrs	r0, r0, #31
	}
}
    3728:	4770      	bx	lr
    372a:	46c0      	nop			; (mov r8, r8)

0000372c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    372c:	230f      	movs	r3, #15
    372e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3730:	b249      	sxtb	r1, r1
    3732:	2900      	cmp	r1, #0
    3734:	da06      	bge.n	3744 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3736:	6802      	ldr	r2, [r0, #0]
    3738:	3308      	adds	r3, #8
    373a:	015b      	lsls	r3, r3, #5
    373c:	18d3      	adds	r3, r2, r3
    373e:	2220      	movs	r2, #32
    3740:	715a      	strb	r2, [r3, #5]
    3742:	e005      	b.n	3750 <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3744:	6802      	ldr	r2, [r0, #0]
    3746:	3308      	adds	r3, #8
    3748:	015b      	lsls	r3, r3, #5
    374a:	18d3      	adds	r3, r2, r3
    374c:	2210      	movs	r2, #16
    374e:	715a      	strb	r2, [r3, #5]
	}
}
    3750:	4770      	bx	lr
    3752:	46c0      	nop			; (mov r8, r8)

00003754 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3754:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3756:	230f      	movs	r3, #15
    3758:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    375a:	b249      	sxtb	r1, r1
    375c:	2900      	cmp	r1, #0
    375e:	da1e      	bge.n	379e <usb_device_endpoint_clear_halt+0x4a>
    3760:	0159      	lsls	r1, r3, #5
    3762:	6802      	ldr	r2, [r0, #0]
    3764:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3766:	2483      	movs	r4, #131	; 0x83
    3768:	0064      	lsls	r4, r4, #1
    376a:	5d14      	ldrb	r4, [r2, r4]
    376c:	06a4      	lsls	r4, r4, #26
    376e:	d534      	bpl.n	37da <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3770:	2520      	movs	r5, #32
    3772:	2482      	movs	r4, #130	; 0x82
    3774:	0064      	lsls	r4, r4, #1
    3776:	5515      	strb	r5, [r2, r4]
    3778:	6802      	ldr	r2, [r0, #0]
    377a:	4694      	mov	ip, r2
    377c:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    377e:	2208      	movs	r2, #8
    3780:	32ff      	adds	r2, #255	; 0xff
    3782:	5c8a      	ldrb	r2, [r1, r2]
    3784:	0652      	lsls	r2, r2, #25
    3786:	d528      	bpl.n	37da <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3788:	3cc4      	subs	r4, #196	; 0xc4
    378a:	2208      	movs	r2, #8
    378c:	32ff      	adds	r2, #255	; 0xff
    378e:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3790:	6802      	ldr	r2, [r0, #0]
    3792:	3308      	adds	r3, #8
    3794:	015b      	lsls	r3, r3, #5
    3796:	18d3      	adds	r3, r2, r3
    3798:	2202      	movs	r2, #2
    379a:	711a      	strb	r2, [r3, #4]
    379c:	e01d      	b.n	37da <usb_device_endpoint_clear_halt+0x86>
    379e:	0159      	lsls	r1, r3, #5
    37a0:	6802      	ldr	r2, [r0, #0]
    37a2:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    37a4:	2483      	movs	r4, #131	; 0x83
    37a6:	0064      	lsls	r4, r4, #1
    37a8:	5d14      	ldrb	r4, [r2, r4]
    37aa:	06e4      	lsls	r4, r4, #27
    37ac:	d515      	bpl.n	37da <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    37ae:	2510      	movs	r5, #16
    37b0:	2482      	movs	r4, #130	; 0x82
    37b2:	0064      	lsls	r4, r4, #1
    37b4:	5515      	strb	r5, [r2, r4]
    37b6:	6802      	ldr	r2, [r0, #0]
    37b8:	4694      	mov	ip, r2
    37ba:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    37bc:	2208      	movs	r2, #8
    37be:	32ff      	adds	r2, #255	; 0xff
    37c0:	5c8a      	ldrb	r2, [r1, r2]
    37c2:	0692      	lsls	r2, r2, #26
    37c4:	d509      	bpl.n	37da <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    37c6:	3ce4      	subs	r4, #228	; 0xe4
    37c8:	2208      	movs	r2, #8
    37ca:	32ff      	adds	r2, #255	; 0xff
    37cc:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    37ce:	6802      	ldr	r2, [r0, #0]
    37d0:	3308      	adds	r3, #8
    37d2:	015b      	lsls	r3, r3, #5
    37d4:	18d3      	adds	r3, r2, r3
    37d6:	2201      	movs	r2, #1
    37d8:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    37da:	bd30      	pop	{r4, r5, pc}

000037dc <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    37dc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    37de:	000c      	movs	r4, r1
    37e0:	3408      	adds	r4, #8
    37e2:	0164      	lsls	r4, r4, #5
    37e4:	6805      	ldr	r5, [r0, #0]
    37e6:	5d64      	ldrb	r4, [r4, r5]
    37e8:	0664      	lsls	r4, r4, #25
    37ea:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    37ec:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    37ee:	2c00      	cmp	r4, #0
    37f0:	d016      	beq.n	3820 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    37f2:	014c      	lsls	r4, r1, #5
    37f4:	4d0b      	ldr	r5, [pc, #44]	; (3824 <usb_device_endpoint_write_buffer_job+0x48>)
    37f6:	192c      	adds	r4, r5, r4
    37f8:	0025      	movs	r5, r4
    37fa:	6122      	str	r2, [r4, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    37fc:	6964      	ldr	r4, [r4, #20]
    37fe:	4a0a      	ldr	r2, [pc, #40]	; (3828 <usb_device_endpoint_write_buffer_job+0x4c>)
    3800:	4022      	ands	r2, r4
    3802:	616a      	str	r2, [r5, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3804:	696c      	ldr	r4, [r5, #20]
    3806:	049b      	lsls	r3, r3, #18
    3808:	0c9a      	lsrs	r2, r3, #18
    380a:	0ba3      	lsrs	r3, r4, #14
    380c:	039b      	lsls	r3, r3, #14
    380e:	4313      	orrs	r3, r2
    3810:	616b      	str	r3, [r5, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3812:	6803      	ldr	r3, [r0, #0]
    3814:	3108      	adds	r1, #8
    3816:	0149      	lsls	r1, r1, #5
    3818:	1859      	adds	r1, r3, r1
    381a:	2380      	movs	r3, #128	; 0x80
    381c:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    381e:	2500      	movs	r5, #0
}
    3820:	0028      	movs	r0, r5
    3822:	bd30      	pop	{r4, r5, pc}
    3824:	20000458 	.word	0x20000458
    3828:	f0003fff 	.word	0xf0003fff

0000382c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    382c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    382e:	000c      	movs	r4, r1
    3830:	3408      	adds	r4, #8
    3832:	0164      	lsls	r4, r4, #5
    3834:	6805      	ldr	r5, [r0, #0]
    3836:	5d64      	ldrb	r4, [r4, r5]
    3838:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    383a:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    383c:	2c00      	cmp	r4, #0
    383e:	d015      	beq.n	386c <usb_device_endpoint_read_buffer_job+0x40>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3840:	4d0b      	ldr	r5, [pc, #44]	; (3870 <usb_device_endpoint_read_buffer_job+0x44>)
    3842:	014c      	lsls	r4, r1, #5
    3844:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3846:	192c      	adds	r4, r5, r4
    3848:	6865      	ldr	r5, [r4, #4]
    384a:	049b      	lsls	r3, r3, #18
    384c:	091a      	lsrs	r2, r3, #4
    384e:	4b09      	ldr	r3, [pc, #36]	; (3874 <usb_device_endpoint_read_buffer_job+0x48>)
    3850:	402b      	ands	r3, r5
    3852:	4313      	orrs	r3, r2
    3854:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3856:	6863      	ldr	r3, [r4, #4]
    3858:	0b9b      	lsrs	r3, r3, #14
    385a:	039b      	lsls	r3, r3, #14
    385c:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    385e:	6803      	ldr	r3, [r0, #0]
    3860:	3108      	adds	r1, #8
    3862:	0149      	lsls	r1, r1, #5
    3864:	1859      	adds	r1, r3, r1
    3866:	2340      	movs	r3, #64	; 0x40
    3868:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    386a:	2500      	movs	r5, #0
}
    386c:	0028      	movs	r0, r5
    386e:	bd30      	pop	{r4, r5, pc}
    3870:	20000458 	.word	0x20000458
    3874:	f0003fff 	.word	0xf0003fff

00003878 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3878:	4b09      	ldr	r3, [pc, #36]	; (38a0 <usb_device_endpoint_setup_buffer_job+0x28>)
    387a:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    387c:	6859      	ldr	r1, [r3, #4]
    387e:	4a09      	ldr	r2, [pc, #36]	; (38a4 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3880:	400a      	ands	r2, r1
    3882:	2180      	movs	r1, #128	; 0x80
    3884:	0289      	lsls	r1, r1, #10
    3886:	430a      	orrs	r2, r1
    3888:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    388a:	685a      	ldr	r2, [r3, #4]
    388c:	0b92      	lsrs	r2, r2, #14
    388e:	0392      	lsls	r2, r2, #14
    3890:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3892:	6802      	ldr	r2, [r0, #0]
    3894:	2140      	movs	r1, #64	; 0x40
    3896:	2382      	movs	r3, #130	; 0x82
    3898:	005b      	lsls	r3, r3, #1
    389a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    389c:	2000      	movs	r0, #0
    389e:	4770      	bx	lr
    38a0:	20000458 	.word	0x20000458
    38a4:	f0003fff 	.word	0xf0003fff

000038a8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    38a8:	6802      	ldr	r2, [r0, #0]
    38aa:	7811      	ldrb	r1, [r2, #0]
    38ac:	2302      	movs	r3, #2
    38ae:	430b      	orrs	r3, r1
    38b0:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    38b2:	6802      	ldr	r2, [r0, #0]
    38b4:	7893      	ldrb	r3, [r2, #2]
    38b6:	2b02      	cmp	r3, #2
    38b8:	d0fc      	beq.n	38b4 <usb_enable+0xc>
}
    38ba:	4770      	bx	lr

000038bc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    38bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38be:	465f      	mov	r7, fp
    38c0:	4656      	mov	r6, sl
    38c2:	464d      	mov	r5, r9
    38c4:	4644      	mov	r4, r8
    38c6:	b4f0      	push	{r4, r5, r6, r7}
    38c8:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    38ca:	4bc8      	ldr	r3, [pc, #800]	; (3bec <USB_Handler+0x330>)
    38cc:	681f      	ldr	r7, [r3, #0]
    38ce:	683d      	ldr	r5, [r7, #0]
    38d0:	782b      	ldrb	r3, [r5, #0]
    38d2:	09db      	lsrs	r3, r3, #7
    38d4:	d100      	bne.n	38d8 <USB_Handler+0x1c>
    38d6:	e155      	b.n	3b84 <USB_Handler+0x2c8>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    38d8:	8c28      	ldrh	r0, [r5, #32]
    38da:	b280      	uxth	r0, r0
    38dc:	4bc4      	ldr	r3, [pc, #784]	; (3bf0 <USB_Handler+0x334>)
    38de:	4798      	blx	r3
    38e0:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    38e2:	2c1f      	cmp	r4, #31
    38e4:	d900      	bls.n	38e8 <USB_Handler+0x2c>
    38e6:	e0d3      	b.n	3a90 <USB_Handler+0x1d4>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    38e8:	0003      	movs	r3, r0
    38ea:	3308      	adds	r3, #8
    38ec:	015b      	lsls	r3, r3, #5
    38ee:	18ed      	adds	r5, r5, r3
    38f0:	79ed      	ldrb	r5, [r5, #7]
    38f2:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    38f4:	07ab      	lsls	r3, r5, #30
    38f6:	d051      	beq.n	399c <USB_Handler+0xe0>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    38f8:	4abe      	ldr	r2, [pc, #760]	; (3bf4 <USB_Handler+0x338>)
    38fa:	2301      	movs	r3, #1
    38fc:	4083      	lsls	r3, r0
    38fe:	6811      	ldr	r1, [r2, #0]
    3900:	4399      	bics	r1, r3
    3902:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3904:	0003      	movs	r3, r0
    3906:	3308      	adds	r3, #8
    3908:	015b      	lsls	r3, r3, #5
    390a:	683a      	ldr	r2, [r7, #0]
    390c:	4694      	mov	ip, r2
    390e:	4463      	add	r3, ip
    3910:	2203      	movs	r2, #3
    3912:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3914:	183b      	adds	r3, r7, r0
    3916:	33ae      	adds	r3, #174	; 0xae
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	07db      	lsls	r3, r3, #31
    391c:	d53e      	bpl.n	399c <USB_Handler+0xe0>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    391e:	4bb6      	ldr	r3, [pc, #728]	; (3bf8 <USB_Handler+0x33c>)
    3920:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3922:	683a      	ldr	r2, [r7, #0]
    3924:	0003      	movs	r3, r0
    3926:	3308      	adds	r3, #8
    3928:	015b      	lsls	r3, r3, #5
    392a:	5c9b      	ldrb	r3, [r3, r2]
    392c:	079b      	lsls	r3, r3, #30
    392e:	0f9b      	lsrs	r3, r3, #30
    3930:	2b01      	cmp	r3, #1
    3932:	d110      	bne.n	3956 <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3934:	0142      	lsls	r2, r0, #5
    3936:	4bb1      	ldr	r3, [pc, #708]	; (3bfc <USB_Handler+0x340>)
    3938:	189b      	adds	r3, r3, r2
    393a:	685a      	ldr	r2, [r3, #4]
    393c:	0492      	lsls	r2, r2, #18
    393e:	0c92      	lsrs	r2, r2, #18
    3940:	49ad      	ldr	r1, [pc, #692]	; (3bf8 <USB_Handler+0x33c>)
    3942:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3944:	685a      	ldr	r2, [r3, #4]
    3946:	0112      	lsls	r2, r2, #4
    3948:	0c92      	lsrs	r2, r2, #18
    394a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    394c:	685a      	ldr	r2, [r3, #4]
    394e:	0b92      	lsrs	r2, r2, #14
    3950:	0392      	lsls	r2, r2, #14
    3952:	605a      	str	r2, [r3, #4]
    3954:	e01a      	b.n	398c <USB_Handler+0xd0>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3956:	0142      	lsls	r2, r0, #5
    3958:	4ba8      	ldr	r3, [pc, #672]	; (3bfc <USB_Handler+0x340>)
    395a:	189b      	adds	r3, r3, r2
    395c:	685a      	ldr	r2, [r3, #4]
    395e:	0112      	lsls	r2, r2, #4
    3960:	0c92      	lsrs	r2, r2, #18
    3962:	b290      	uxth	r0, r2
    3964:	49a4      	ldr	r1, [pc, #656]	; (3bf8 <USB_Handler+0x33c>)
    3966:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3968:	685a      	ldr	r2, [r3, #4]
    396a:	0492      	lsls	r2, r2, #18
    396c:	0c92      	lsrs	r2, r2, #18
    396e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3970:	6859      	ldr	r1, [r3, #4]
    3972:	4aa3      	ldr	r2, [pc, #652]	; (3c00 <USB_Handler+0x344>)
    3974:	400a      	ands	r2, r1
    3976:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3978:	2800      	cmp	r0, #0
    397a:	d107      	bne.n	398c <USB_Handler+0xd0>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    397c:	0163      	lsls	r3, r4, #5
    397e:	4a9f      	ldr	r2, [pc, #636]	; (3bfc <USB_Handler+0x340>)
    3980:	18d3      	adds	r3, r2, r3
    3982:	685b      	ldr	r3, [r3, #4]
    3984:	049b      	lsls	r3, r3, #18
    3986:	0c9b      	lsrs	r3, r3, #18
    3988:	4a9b      	ldr	r2, [pc, #620]	; (3bf8 <USB_Handler+0x33c>)
    398a:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    398c:	4b97      	ldr	r3, [pc, #604]	; (3bec <USB_Handler+0x330>)
    398e:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3990:	1ca3      	adds	r3, r4, #2
    3992:	011b      	lsls	r3, r3, #4
    3994:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    3996:	685b      	ldr	r3, [r3, #4]
    3998:	4997      	ldr	r1, [pc, #604]	; (3bf8 <USB_Handler+0x33c>)
    399a:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    399c:	076b      	lsls	r3, r5, #29
    399e:	d50e      	bpl.n	39be <USB_Handler+0x102>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39a0:	4a94      	ldr	r2, [pc, #592]	; (3bf4 <USB_Handler+0x338>)
    39a2:	2301      	movs	r3, #1
    39a4:	40a3      	lsls	r3, r4
    39a6:	6811      	ldr	r1, [r2, #0]
    39a8:	4399      	bics	r1, r3
    39aa:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39ac:	4b8f      	ldr	r3, [pc, #572]	; (3bec <USB_Handler+0x330>)
    39ae:	681b      	ldr	r3, [r3, #0]
    39b0:	681a      	ldr	r2, [r3, #0]
    39b2:	0023      	movs	r3, r4
    39b4:	3308      	adds	r3, #8
    39b6:	015b      	lsls	r3, r3, #5
    39b8:	18d3      	adds	r3, r2, r3
    39ba:	2204      	movs	r2, #4
    39bc:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    39be:	072b      	lsls	r3, r5, #28
    39c0:	d521      	bpl.n	3a06 <USB_Handler+0x14a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39c2:	4a8c      	ldr	r2, [pc, #560]	; (3bf4 <USB_Handler+0x338>)
    39c4:	2301      	movs	r3, #1
    39c6:	40a3      	lsls	r3, r4
    39c8:	6811      	ldr	r1, [r2, #0]
    39ca:	4399      	bics	r1, r3
    39cc:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39ce:	4b87      	ldr	r3, [pc, #540]	; (3bec <USB_Handler+0x330>)
    39d0:	6818      	ldr	r0, [r3, #0]
    39d2:	0023      	movs	r3, r4
    39d4:	3308      	adds	r3, #8
    39d6:	015b      	lsls	r3, r3, #5
    39d8:	6802      	ldr	r2, [r0, #0]
    39da:	4694      	mov	ip, r2
    39dc:	4463      	add	r3, ip
    39de:	2208      	movs	r2, #8
    39e0:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    39e2:	1903      	adds	r3, r0, r4
    39e4:	33ae      	adds	r3, #174	; 0xae
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	079b      	lsls	r3, r3, #30
    39ea:	d50c      	bpl.n	3a06 <USB_Handler+0x14a>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    39ec:	4982      	ldr	r1, [pc, #520]	; (3bf8 <USB_Handler+0x33c>)
    39ee:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    39f0:	0163      	lsls	r3, r4, #5
    39f2:	4a82      	ldr	r2, [pc, #520]	; (3bfc <USB_Handler+0x340>)
    39f4:	18d3      	adds	r3, r2, r3
    39f6:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    39f8:	231f      	movs	r3, #31
    39fa:	4013      	ands	r3, r2
    39fc:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    39fe:	0123      	lsls	r3, r4, #4
    3a00:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    3a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a04:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3a06:	06eb      	lsls	r3, r5, #27
    3a08:	d522      	bpl.n	3a50 <USB_Handler+0x194>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a0a:	4a7a      	ldr	r2, [pc, #488]	; (3bf4 <USB_Handler+0x338>)
    3a0c:	2301      	movs	r3, #1
    3a0e:	40a3      	lsls	r3, r4
    3a10:	6811      	ldr	r1, [r2, #0]
    3a12:	4399      	bics	r1, r3
    3a14:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a16:	4b75      	ldr	r3, [pc, #468]	; (3bec <USB_Handler+0x330>)
    3a18:	6818      	ldr	r0, [r3, #0]
    3a1a:	0023      	movs	r3, r4
    3a1c:	3308      	adds	r3, #8
    3a1e:	015b      	lsls	r3, r3, #5
    3a20:	6802      	ldr	r2, [r0, #0]
    3a22:	4694      	mov	ip, r2
    3a24:	4463      	add	r3, ip
    3a26:	2210      	movs	r2, #16
    3a28:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a2a:	1903      	adds	r3, r0, r4
    3a2c:	33ae      	adds	r3, #174	; 0xae
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	075b      	lsls	r3, r3, #29
    3a32:	d50d      	bpl.n	3a50 <USB_Handler+0x194>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    3a34:	4a70      	ldr	r2, [pc, #448]	; (3bf8 <USB_Handler+0x33c>)
    3a36:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3a38:	0163      	lsls	r3, r4, #5
    3a3a:	4970      	ldr	r1, [pc, #448]	; (3bfc <USB_Handler+0x340>)
    3a3c:	18cb      	adds	r3, r1, r3
    3a3e:	685b      	ldr	r3, [r3, #4]
    3a40:	011b      	lsls	r3, r3, #4
    3a42:	0c9b      	lsrs	r3, r3, #18
    3a44:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3a46:	0123      	lsls	r3, r4, #4
    3a48:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    3a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a4c:	2100      	movs	r1, #0
    3a4e:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3a50:	06ab      	lsls	r3, r5, #26
    3a52:	d400      	bmi.n	3a56 <USB_Handler+0x19a>
    3a54:	e1f1      	b.n	3e3a <USB_Handler+0x57e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a56:	4a67      	ldr	r2, [pc, #412]	; (3bf4 <USB_Handler+0x338>)
    3a58:	2301      	movs	r3, #1
    3a5a:	40a3      	lsls	r3, r4
    3a5c:	6811      	ldr	r1, [r2, #0]
    3a5e:	4399      	bics	r1, r3
    3a60:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a62:	4b62      	ldr	r3, [pc, #392]	; (3bec <USB_Handler+0x330>)
    3a64:	6818      	ldr	r0, [r3, #0]
    3a66:	0023      	movs	r3, r4
    3a68:	3308      	adds	r3, #8
    3a6a:	015b      	lsls	r3, r3, #5
    3a6c:	6802      	ldr	r2, [r0, #0]
    3a6e:	4694      	mov	ip, r2
    3a70:	4463      	add	r3, ip
    3a72:	2220      	movs	r2, #32
    3a74:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a76:	1903      	adds	r3, r0, r4
    3a78:	33ae      	adds	r3, #174	; 0xae
    3a7a:	781b      	ldrb	r3, [r3, #0]
    3a7c:	071b      	lsls	r3, r3, #28
    3a7e:	d400      	bmi.n	3a82 <USB_Handler+0x1c6>
    3a80:	e1db      	b.n	3e3a <USB_Handler+0x57e>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    3a82:	495d      	ldr	r1, [pc, #372]	; (3bf8 <USB_Handler+0x33c>)
    3a84:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3a86:	0124      	lsls	r4, r4, #4
    3a88:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    3a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3a8c:	4798      	blx	r3
    3a8e:	e1d4      	b.n	3e3a <USB_Handler+0x57e>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3a90:	8bac      	ldrh	r4, [r5, #28]
    3a92:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3a94:	0763      	lsls	r3, r4, #29
    3a96:	d508      	bpl.n	3aaa <USB_Handler+0x1ee>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3a98:	2304      	movs	r3, #4
    3a9a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3a9c:	33a1      	adds	r3, #161	; 0xa1
    3a9e:	5cfb      	ldrb	r3, [r7, r3]
    3aa0:	07db      	lsls	r3, r3, #31
    3aa2:	d502      	bpl.n	3aaa <USB_Handler+0x1ee>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	0038      	movs	r0, r7
    3aa8:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    3aaa:	0723      	lsls	r3, r4, #28
    3aac:	d50d      	bpl.n	3aca <USB_Handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3aae:	2200      	movs	r2, #0
    3ab0:	4b50      	ldr	r3, [pc, #320]	; (3bf4 <USB_Handler+0x338>)
    3ab2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3ab4:	4b4d      	ldr	r3, [pc, #308]	; (3bec <USB_Handler+0x330>)
    3ab6:	6818      	ldr	r0, [r3, #0]
    3ab8:	2308      	movs	r3, #8
    3aba:	6802      	ldr	r2, [r0, #0]
    3abc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3abe:	339d      	adds	r3, #157	; 0x9d
    3ac0:	5cc3      	ldrb	r3, [r0, r3]
    3ac2:	079b      	lsls	r3, r3, #30
    3ac4:	d501      	bpl.n	3aca <USB_Handler+0x20e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3ac6:	6883      	ldr	r3, [r0, #8]
    3ac8:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3aca:	0663      	lsls	r3, r4, #25
    3acc:	d50a      	bpl.n	3ae4 <USB_Handler+0x228>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3ace:	4b47      	ldr	r3, [pc, #284]	; (3bec <USB_Handler+0x330>)
    3ad0:	6818      	ldr	r0, [r3, #0]
    3ad2:	2340      	movs	r3, #64	; 0x40
    3ad4:	6802      	ldr	r2, [r0, #0]
    3ad6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3ad8:	3365      	adds	r3, #101	; 0x65
    3ada:	5cc3      	ldrb	r3, [r0, r3]
    3adc:	06db      	lsls	r3, r3, #27
    3ade:	d501      	bpl.n	3ae4 <USB_Handler+0x228>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3ae0:	6943      	ldr	r3, [r0, #20]
    3ae2:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3ae4:	06a3      	lsls	r3, r4, #26
    3ae6:	d50a      	bpl.n	3afe <USB_Handler+0x242>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3ae8:	4b40      	ldr	r3, [pc, #256]	; (3bec <USB_Handler+0x330>)
    3aea:	6818      	ldr	r0, [r3, #0]
    3aec:	2320      	movs	r3, #32
    3aee:	6802      	ldr	r2, [r0, #0]
    3af0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3af2:	3385      	adds	r3, #133	; 0x85
    3af4:	5cc3      	ldrb	r3, [r0, r3]
    3af6:	071b      	lsls	r3, r3, #28
    3af8:	d501      	bpl.n	3afe <USB_Handler+0x242>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3afa:	6903      	ldr	r3, [r0, #16]
    3afc:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3afe:	06e3      	lsls	r3, r4, #27
    3b00:	d50a      	bpl.n	3b18 <USB_Handler+0x25c>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3b02:	4b3a      	ldr	r3, [pc, #232]	; (3bec <USB_Handler+0x330>)
    3b04:	6818      	ldr	r0, [r3, #0]
    3b06:	2310      	movs	r3, #16
    3b08:	6802      	ldr	r2, [r0, #0]
    3b0a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3b0c:	3395      	adds	r3, #149	; 0x95
    3b0e:	5cc3      	ldrb	r3, [r0, r3]
    3b10:	075b      	lsls	r3, r3, #29
    3b12:	d501      	bpl.n	3b18 <USB_Handler+0x25c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3b14:	68c3      	ldr	r3, [r0, #12]
    3b16:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3b18:	0623      	lsls	r3, r4, #24
    3b1a:	d50d      	bpl.n	3b38 <USB_Handler+0x27c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3b1c:	2200      	movs	r2, #0
    3b1e:	4b35      	ldr	r3, [pc, #212]	; (3bf4 <USB_Handler+0x338>)
    3b20:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3b22:	4b32      	ldr	r3, [pc, #200]	; (3bec <USB_Handler+0x330>)
    3b24:	6818      	ldr	r0, [r3, #0]
    3b26:	2380      	movs	r3, #128	; 0x80
    3b28:	6802      	ldr	r2, [r0, #0]
    3b2a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3b2c:	3325      	adds	r3, #37	; 0x25
    3b2e:	5cc3      	ldrb	r3, [r0, r3]
    3b30:	069b      	lsls	r3, r3, #26
    3b32:	d501      	bpl.n	3b38 <USB_Handler+0x27c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3b34:	6983      	ldr	r3, [r0, #24]
    3b36:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3b38:	05e3      	lsls	r3, r4, #23
    3b3a:	d50e      	bpl.n	3b5a <USB_Handler+0x29e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3b3c:	2200      	movs	r2, #0
    3b3e:	4b2d      	ldr	r3, [pc, #180]	; (3bf4 <USB_Handler+0x338>)
    3b40:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3b42:	4b2a      	ldr	r3, [pc, #168]	; (3bec <USB_Handler+0x330>)
    3b44:	6818      	ldr	r0, [r3, #0]
    3b46:	2380      	movs	r3, #128	; 0x80
    3b48:	005b      	lsls	r3, r3, #1
    3b4a:	6802      	ldr	r2, [r0, #0]
    3b4c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3b4e:	3b5b      	subs	r3, #91	; 0x5b
    3b50:	5cc3      	ldrb	r3, [r0, r3]
    3b52:	065b      	lsls	r3, r3, #25
    3b54:	d501      	bpl.n	3b5a <USB_Handler+0x29e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3b56:	69c3      	ldr	r3, [r0, #28]
    3b58:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3b5a:	05a3      	lsls	r3, r4, #22
    3b5c:	d400      	bmi.n	3b60 <USB_Handler+0x2a4>
    3b5e:	e16c      	b.n	3e3a <USB_Handler+0x57e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3b60:	2200      	movs	r2, #0
    3b62:	4b24      	ldr	r3, [pc, #144]	; (3bf4 <USB_Handler+0x338>)
    3b64:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3b66:	4b21      	ldr	r3, [pc, #132]	; (3bec <USB_Handler+0x330>)
    3b68:	6818      	ldr	r0, [r3, #0]
    3b6a:	2380      	movs	r3, #128	; 0x80
    3b6c:	009b      	lsls	r3, r3, #2
    3b6e:	6802      	ldr	r2, [r0, #0]
    3b70:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3b72:	3b5c      	subs	r3, #92	; 0x5c
    3b74:	3bff      	subs	r3, #255	; 0xff
    3b76:	5cc3      	ldrb	r3, [r0, r3]
    3b78:	2b7f      	cmp	r3, #127	; 0x7f
    3b7a:	d800      	bhi.n	3b7e <USB_Handler+0x2c2>
    3b7c:	e15d      	b.n	3e3a <USB_Handler+0x57e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3b7e:	6a03      	ldr	r3, [r0, #32]
    3b80:	4798      	blx	r3
    3b82:	e15a      	b.n	3e3a <USB_Handler+0x57e>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3b84:	8c2e      	ldrh	r6, [r5, #32]
    3b86:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    3b88:	2e00      	cmp	r6, #0
    3b8a:	d13f      	bne.n	3c0c <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3b8c:	8bae      	ldrh	r6, [r5, #28]
    3b8e:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    3b90:	23ab      	movs	r3, #171	; 0xab
    3b92:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    3b94:	5afd      	ldrh	r5, [r7, r3]
    3b96:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    3b98:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    3b9a:	5afb      	ldrh	r3, [r7, r3]
    3b9c:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3b9e:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3ba0:	4f18      	ldr	r7, [pc, #96]	; (3c04 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3ba2:	4b12      	ldr	r3, [pc, #72]	; (3bec <USB_Handler+0x330>)
    3ba4:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3ba6:	4698      	mov	r8, r3
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    3ba8:	0063      	lsls	r3, r4, #1
    3baa:	5bdb      	ldrh	r3, [r3, r7]
    3bac:	4233      	tst	r3, r6
    3bae:	d003      	beq.n	3bb8 <USB_Handler+0x2fc>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3bb0:	464a      	mov	r2, r9
    3bb2:	6812      	ldr	r2, [r2, #0]
    3bb4:	6812      	ldr	r2, [r2, #0]
    3bb6:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    3bb8:	422b      	tst	r3, r5
    3bba:	d013      	beq.n	3be4 <USB_Handler+0x328>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3bbc:	2c06      	cmp	r4, #6
    3bbe:	d107      	bne.n	3bd0 <USB_Handler+0x314>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3bc0:	4b0e      	ldr	r3, [pc, #56]	; (3bfc <USB_Handler+0x340>)
    3bc2:	891b      	ldrh	r3, [r3, #8]
    3bc4:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    3bc6:	2380      	movs	r3, #128	; 0x80
    3bc8:	005b      	lsls	r3, r3, #1
    3bca:	4013      	ands	r3, r2
    3bcc:	4a0e      	ldr	r2, [pc, #56]	; (3c08 <USB_Handler+0x34c>)
    3bce:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3bd0:	0023      	movs	r3, r4
    3bd2:	332e      	adds	r3, #46	; 0x2e
    3bd4:	009b      	lsls	r3, r3, #2
    3bd6:	4642      	mov	r2, r8
    3bd8:	6812      	ldr	r2, [r2, #0]
    3bda:	589b      	ldr	r3, [r3, r2]
    3bdc:	490a      	ldr	r1, [pc, #40]	; (3c08 <USB_Handler+0x34c>)
    3bde:	4642      	mov	r2, r8
    3be0:	6810      	ldr	r0, [r2, #0]
    3be2:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3be4:	3401      	adds	r4, #1
    3be6:	2c07      	cmp	r4, #7
    3be8:	d1de      	bne.n	3ba8 <USB_Handler+0x2ec>
    3bea:	e126      	b.n	3e3a <USB_Handler+0x57e>
    3bec:	20000188 	.word	0x20000188
    3bf0:	00004539 	.word	0x00004539
    3bf4:	2000017c 	.word	0x2000017c
    3bf8:	20000174 	.word	0x20000174
    3bfc:	20000458 	.word	0x20000458
    3c00:	f0003fff 	.word	0xf0003fff
    3c04:	00004674 	.word	0x00004674
    3c08:	20000170 	.word	0x20000170
    3c0c:	003c      	movs	r4, r7
    3c0e:	3459      	adds	r4, #89	; 0x59
    3c10:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    3c12:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    3c14:	2201      	movs	r2, #1
    3c16:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3c18:	325f      	adds	r2, #95	; 0x5f
    3c1a:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3c1c:	3a50      	subs	r2, #80	; 0x50
    3c1e:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3c20:	3a0d      	subs	r2, #13
    3c22:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3c24:	46b8      	mov	r8, r7
    3c26:	002f      	movs	r7, r5
    3c28:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    3c2a:	9301      	str	r3, [sp, #4]
    3c2c:	0032      	movs	r2, r6
    3c2e:	411a      	asrs	r2, r3
    3c30:	4661      	mov	r1, ip
    3c32:	4211      	tst	r1, r2
    3c34:	d100      	bne.n	3c38 <USB_Handler+0x37c>
    3c36:	e0fb      	b.n	3e30 <USB_Handler+0x574>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3c38:	001a      	movs	r2, r3
    3c3a:	3208      	adds	r2, #8
    3c3c:	0152      	lsls	r2, r2, #5
    3c3e:	18ba      	adds	r2, r7, r2
    3c40:	79d2      	ldrb	r2, [r2, #7]
    3c42:	b2d2      	uxtb	r2, r2
    3c44:	7a21      	ldrb	r1, [r4, #8]
    3c46:	7825      	ldrb	r5, [r4, #0]
    3c48:	4029      	ands	r1, r5
    3c4a:	4011      	ands	r1, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3c4c:	464d      	mov	r5, r9
    3c4e:	4215      	tst	r5, r2
    3c50:	d02a      	beq.n	3ca8 <USB_Handler+0x3ec>
    3c52:	003d      	movs	r5, r7
    3c54:	4647      	mov	r7, r8
    3c56:	015b      	lsls	r3, r3, #5
    3c58:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3c5a:	2308      	movs	r3, #8
    3c5c:	33ff      	adds	r3, #255	; 0xff
    3c5e:	5ceb      	ldrb	r3, [r5, r3]
    3c60:	065b      	lsls	r3, r3, #25
    3c62:	d509      	bpl.n	3c78 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3c64:	2240      	movs	r2, #64	; 0x40
    3c66:	2308      	movs	r3, #8
    3c68:	33ff      	adds	r3, #255	; 0xff
    3c6a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3c6c:	3b88      	subs	r3, #136	; 0x88
    3c6e:	3bff      	subs	r3, #255	; 0xff
    3c70:	4303      	orrs	r3, r0
    3c72:	4a75      	ldr	r2, [pc, #468]	; (3e48 <USB_Handler+0x58c>)
    3c74:	7193      	strb	r3, [r2, #6]
    3c76:	e00a      	b.n	3c8e <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3c78:	2308      	movs	r3, #8
    3c7a:	33ff      	adds	r3, #255	; 0xff
    3c7c:	5ceb      	ldrb	r3, [r5, r3]
    3c7e:	069b      	lsls	r3, r3, #26
    3c80:	d505      	bpl.n	3c8e <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3c82:	2220      	movs	r2, #32
    3c84:	2308      	movs	r3, #8
    3c86:	33ff      	adds	r3, #255	; 0xff
    3c88:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3c8a:	4b6f      	ldr	r3, [pc, #444]	; (3e48 <USB_Handler+0x58c>)
    3c8c:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3c8e:	2360      	movs	r3, #96	; 0x60
    3c90:	420b      	tst	r3, r1
    3c92:	d100      	bne.n	3c96 <USB_Handler+0x3da>
    3c94:	e0d1      	b.n	3e3a <USB_Handler+0x57e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3c96:	9b01      	ldr	r3, [sp, #4]
    3c98:	011b      	lsls	r3, r3, #4
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	33e0      	adds	r3, #224	; 0xe0
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	4969      	ldr	r1, [pc, #420]	; (3e48 <USB_Handler+0x58c>)
    3ca2:	0038      	movs	r0, r7
    3ca4:	4798      	blx	r3
    3ca6:	e0c8      	b.n	3e3a <USB_Handler+0x57e>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3ca8:	4655      	mov	r5, sl
    3caa:	4215      	tst	r5, r2
    3cac:	d01f      	beq.n	3cee <USB_Handler+0x432>
    3cae:	003d      	movs	r5, r7
    3cb0:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3cb2:	9a01      	ldr	r2, [sp, #4]
    3cb4:	0013      	movs	r3, r2
    3cb6:	3308      	adds	r3, #8
    3cb8:	015b      	lsls	r3, r3, #5
    3cba:	18ed      	adds	r5, r5, r3
    3cbc:	2310      	movs	r3, #16
    3cbe:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3cc0:	18bb      	adds	r3, r7, r2
    3cc2:	3361      	adds	r3, #97	; 0x61
    3cc4:	33ff      	adds	r3, #255	; 0xff
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	06db      	lsls	r3, r3, #27
    3cca:	d400      	bmi.n	3cce <USB_Handler+0x412>
    3ccc:	e0b5      	b.n	3e3a <USB_Handler+0x57e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3cce:	0010      	movs	r0, r2
    3cd0:	0153      	lsls	r3, r2, #5
    3cd2:	4a5e      	ldr	r2, [pc, #376]	; (3e4c <USB_Handler+0x590>)
    3cd4:	18d3      	adds	r3, r2, r3
    3cd6:	685b      	ldr	r3, [r3, #4]
    3cd8:	049b      	lsls	r3, r3, #18
    3cda:	0c9b      	lsrs	r3, r3, #18
    3cdc:	495a      	ldr	r1, [pc, #360]	; (3e48 <USB_Handler+0x58c>)
    3cde:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3ce0:	0103      	lsls	r3, r0, #4
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	33dc      	adds	r3, #220	; 0xdc
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	4640      	mov	r0, r8
    3cea:	4798      	blx	r3
    3cec:	e0a5      	b.n	3e3a <USB_Handler+0x57e>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3cee:	465d      	mov	r5, fp
    3cf0:	4215      	tst	r5, r2
    3cf2:	d03f      	beq.n	3d74 <USB_Handler+0x4b8>
    3cf4:	003d      	movs	r5, r7
    3cf6:	4647      	mov	r7, r8
    3cf8:	4680      	mov	r8, r0
    3cfa:	015b      	lsls	r3, r3, #5
    3cfc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3cfe:	2308      	movs	r3, #8
    3d00:	33ff      	adds	r3, #255	; 0xff
    3d02:	5ceb      	ldrb	r3, [r5, r3]
    3d04:	079b      	lsls	r3, r3, #30
    3d06:	d512      	bpl.n	3d2e <USB_Handler+0x472>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3d08:	2202      	movs	r2, #2
    3d0a:	2308      	movs	r3, #8
    3d0c:	33ff      	adds	r3, #255	; 0xff
    3d0e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3d10:	4a4d      	ldr	r2, [pc, #308]	; (3e48 <USB_Handler+0x58c>)
    3d12:	3b88      	subs	r3, #136	; 0x88
    3d14:	3bff      	subs	r3, #255	; 0xff
    3d16:	4303      	orrs	r3, r0
    3d18:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3d1a:	9b01      	ldr	r3, [sp, #4]
    3d1c:	015b      	lsls	r3, r3, #5
    3d1e:	484b      	ldr	r0, [pc, #300]	; (3e4c <USB_Handler+0x590>)
    3d20:	18c3      	adds	r3, r0, r3
    3d22:	3310      	adds	r3, #16
    3d24:	685b      	ldr	r3, [r3, #4]
    3d26:	049b      	lsls	r3, r3, #18
    3d28:	0c9b      	lsrs	r3, r3, #18
    3d2a:	8053      	strh	r3, [r2, #2]
    3d2c:	e017      	b.n	3d5e <USB_Handler+0x4a2>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3d2e:	2308      	movs	r3, #8
    3d30:	33ff      	adds	r3, #255	; 0xff
    3d32:	5ceb      	ldrb	r3, [r5, r3]
    3d34:	07db      	lsls	r3, r3, #31
    3d36:	d512      	bpl.n	3d5e <USB_Handler+0x4a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3d38:	2201      	movs	r2, #1
    3d3a:	2308      	movs	r3, #8
    3d3c:	33ff      	adds	r3, #255	; 0xff
    3d3e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3d40:	4841      	ldr	r0, [pc, #260]	; (3e48 <USB_Handler+0x58c>)
    3d42:	4643      	mov	r3, r8
    3d44:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3d46:	9b01      	ldr	r3, [sp, #4]
    3d48:	015a      	lsls	r2, r3, #5
    3d4a:	4b40      	ldr	r3, [pc, #256]	; (3e4c <USB_Handler+0x590>)
    3d4c:	189b      	adds	r3, r3, r2
    3d4e:	685a      	ldr	r2, [r3, #4]
    3d50:	0492      	lsls	r2, r2, #18
    3d52:	0c92      	lsrs	r2, r2, #18
    3d54:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3d56:	685b      	ldr	r3, [r3, #4]
    3d58:	011b      	lsls	r3, r3, #4
    3d5a:	0c9b      	lsrs	r3, r3, #18
    3d5c:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3d5e:	078b      	lsls	r3, r1, #30
    3d60:	d06b      	beq.n	3e3a <USB_Handler+0x57e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3d62:	9b01      	ldr	r3, [sp, #4]
    3d64:	330d      	adds	r3, #13
    3d66:	011b      	lsls	r3, r3, #4
    3d68:	18fb      	adds	r3, r7, r3
    3d6a:	685b      	ldr	r3, [r3, #4]
    3d6c:	4936      	ldr	r1, [pc, #216]	; (3e48 <USB_Handler+0x58c>)
    3d6e:	0038      	movs	r0, r7
    3d70:	4798      	blx	r3
    3d72:	e062      	b.n	3e3a <USB_Handler+0x57e>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3d74:	250c      	movs	r5, #12
    3d76:	4215      	tst	r5, r2
    3d78:	d05a      	beq.n	3e30 <USB_Handler+0x574>
    3d7a:	003d      	movs	r5, r7
    3d7c:	4647      	mov	r7, r8
    3d7e:	4680      	mov	r8, r0
    3d80:	015b      	lsls	r3, r3, #5
    3d82:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3d84:	2308      	movs	r3, #8
    3d86:	33ff      	adds	r3, #255	; 0xff
    3d88:	5ceb      	ldrb	r3, [r5, r3]
    3d8a:	071b      	lsls	r3, r3, #28
    3d8c:	d521      	bpl.n	3dd2 <USB_Handler+0x516>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3d8e:	2208      	movs	r2, #8
    3d90:	2308      	movs	r3, #8
    3d92:	33ff      	adds	r3, #255	; 0xff
    3d94:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3d96:	9801      	ldr	r0, [sp, #4]
    3d98:	0143      	lsls	r3, r0, #5
    3d9a:	4a2c      	ldr	r2, [pc, #176]	; (3e4c <USB_Handler+0x590>)
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	7e9b      	ldrb	r3, [r3, #26]
    3da0:	079b      	lsls	r3, r3, #30
    3da2:	d506      	bpl.n	3db2 <USB_Handler+0x4f6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3da4:	0142      	lsls	r2, r0, #5
    3da6:	4b29      	ldr	r3, [pc, #164]	; (3e4c <USB_Handler+0x590>)
    3da8:	189b      	adds	r3, r3, r2
    3daa:	7e9a      	ldrb	r2, [r3, #26]
    3dac:	2002      	movs	r0, #2
    3dae:	4382      	bics	r2, r0
    3db0:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3db2:	2380      	movs	r3, #128	; 0x80
    3db4:	425b      	negs	r3, r3
    3db6:	4642      	mov	r2, r8
    3db8:	4313      	orrs	r3, r2
    3dba:	4a23      	ldr	r2, [pc, #140]	; (3e48 <USB_Handler+0x58c>)
    3dbc:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3dbe:	9b01      	ldr	r3, [sp, #4]
    3dc0:	3308      	adds	r3, #8
    3dc2:	015b      	lsls	r3, r3, #5
    3dc4:	683a      	ldr	r2, [r7, #0]
    3dc6:	4694      	mov	ip, r2
    3dc8:	4463      	add	r3, ip
    3dca:	79db      	ldrb	r3, [r3, #7]
    3dcc:	079b      	lsls	r3, r3, #30
    3dce:	d523      	bpl.n	3e18 <USB_Handler+0x55c>
    3dd0:	e033      	b.n	3e3a <USB_Handler+0x57e>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3dd2:	2308      	movs	r3, #8
    3dd4:	33ff      	adds	r3, #255	; 0xff
    3dd6:	5ceb      	ldrb	r3, [r5, r3]
    3dd8:	075b      	lsls	r3, r3, #29
    3dda:	d51d      	bpl.n	3e18 <USB_Handler+0x55c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3ddc:	2204      	movs	r2, #4
    3dde:	2308      	movs	r3, #8
    3de0:	33ff      	adds	r3, #255	; 0xff
    3de2:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3de4:	9801      	ldr	r0, [sp, #4]
    3de6:	0143      	lsls	r3, r0, #5
    3de8:	4a18      	ldr	r2, [pc, #96]	; (3e4c <USB_Handler+0x590>)
    3dea:	18d3      	adds	r3, r2, r3
    3dec:	7a9b      	ldrb	r3, [r3, #10]
    3dee:	079b      	lsls	r3, r3, #30
    3df0:	d506      	bpl.n	3e00 <USB_Handler+0x544>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3df2:	0142      	lsls	r2, r0, #5
    3df4:	4b15      	ldr	r3, [pc, #84]	; (3e4c <USB_Handler+0x590>)
    3df6:	189b      	adds	r3, r3, r2
    3df8:	7a9a      	ldrb	r2, [r3, #10]
    3dfa:	2002      	movs	r0, #2
    3dfc:	4382      	bics	r2, r0
    3dfe:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3e00:	4b11      	ldr	r3, [pc, #68]	; (3e48 <USB_Handler+0x58c>)
    3e02:	4642      	mov	r2, r8
    3e04:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3e06:	9b01      	ldr	r3, [sp, #4]
    3e08:	3308      	adds	r3, #8
    3e0a:	015b      	lsls	r3, r3, #5
    3e0c:	683a      	ldr	r2, [r7, #0]
    3e0e:	4694      	mov	ip, r2
    3e10:	4463      	add	r3, ip
    3e12:	79db      	ldrb	r3, [r3, #7]
    3e14:	07db      	lsls	r3, r3, #31
    3e16:	d410      	bmi.n	3e3a <USB_Handler+0x57e>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3e18:	230c      	movs	r3, #12
    3e1a:	420b      	tst	r3, r1
    3e1c:	d00d      	beq.n	3e3a <USB_Handler+0x57e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3e1e:	9b01      	ldr	r3, [sp, #4]
    3e20:	011b      	lsls	r3, r3, #4
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	33d8      	adds	r3, #216	; 0xd8
    3e26:	681b      	ldr	r3, [r3, #0]
    3e28:	4907      	ldr	r1, [pc, #28]	; (3e48 <USB_Handler+0x58c>)
    3e2a:	0038      	movs	r0, r7
    3e2c:	4798      	blx	r3
    3e2e:	e004      	b.n	3e3a <USB_Handler+0x57e>
    3e30:	3301      	adds	r3, #1
    3e32:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3e34:	2b08      	cmp	r3, #8
    3e36:	d000      	beq.n	3e3a <USB_Handler+0x57e>
    3e38:	e6f6      	b.n	3c28 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3e3a:	b003      	add	sp, #12
    3e3c:	bc3c      	pop	{r2, r3, r4, r5}
    3e3e:	4690      	mov	r8, r2
    3e40:	4699      	mov	r9, r3
    3e42:	46a2      	mov	sl, r4
    3e44:	46ab      	mov	fp, r5
    3e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e48:	20000180 	.word	0x20000180
    3e4c:	20000458 	.word	0x20000458

00003e50 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3e50:	2200      	movs	r2, #0
    3e52:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    3e54:	2301      	movs	r3, #1
    3e56:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    3e58:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3e5a:	70c3      	strb	r3, [r0, #3]
}
    3e5c:	4770      	bx	lr
    3e5e:	46c0      	nop			; (mov r8, r8)

00003e60 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e62:	464f      	mov	r7, r9
    3e64:	4646      	mov	r6, r8
    3e66:	b4c0      	push	{r6, r7}
    3e68:	b083      	sub	sp, #12
    3e6a:	0004      	movs	r4, r0
    3e6c:	000d      	movs	r5, r1
    3e6e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    3e70:	2300      	movs	r3, #0
    3e72:	4a6b      	ldr	r2, [pc, #428]	; (4020 <usb_init+0x1c0>)
    3e74:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3e76:	4a6b      	ldr	r2, [pc, #428]	; (4024 <usb_init+0x1c4>)
    3e78:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3e7a:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3e7c:	496a      	ldr	r1, [pc, #424]	; (4028 <usb_init+0x1c8>)
    3e7e:	69c8      	ldr	r0, [r1, #28]
    3e80:	2220      	movs	r2, #32
    3e82:	4302      	orrs	r2, r0
    3e84:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3e86:	af01      	add	r7, sp, #4
    3e88:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3e8a:	2201      	movs	r2, #1
    3e8c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    3e8e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3e90:	3306      	adds	r3, #6
    3e92:	4699      	mov	r9, r3
    3e94:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3e96:	0039      	movs	r1, r7
    3e98:	2018      	movs	r0, #24
    3e9a:	4b64      	ldr	r3, [pc, #400]	; (402c <usb_init+0x1cc>)
    3e9c:	4698      	mov	r8, r3
    3e9e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3ea0:	464b      	mov	r3, r9
    3ea2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3ea4:	0039      	movs	r1, r7
    3ea6:	2019      	movs	r0, #25
    3ea8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3eaa:	78b3      	ldrb	r3, [r6, #2]
    3eac:	466a      	mov	r2, sp
    3eae:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3eb0:	4669      	mov	r1, sp
    3eb2:	2006      	movs	r0, #6
    3eb4:	4b5e      	ldr	r3, [pc, #376]	; (4030 <usb_init+0x1d0>)
    3eb6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3eb8:	2006      	movs	r0, #6
    3eba:	4b5e      	ldr	r3, [pc, #376]	; (4034 <usb_init+0x1d4>)
    3ebc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    3ebe:	782a      	ldrb	r2, [r5, #0]
    3ec0:	2301      	movs	r3, #1
    3ec2:	4313      	orrs	r3, r2
    3ec4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    3ec6:	78ab      	ldrb	r3, [r5, #2]
    3ec8:	07db      	lsls	r3, r3, #31
    3eca:	d4fc      	bmi.n	3ec6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3ecc:	4b5a      	ldr	r3, [pc, #360]	; (4038 <usb_init+0x1d8>)
    3ece:	78da      	ldrb	r2, [r3, #3]
    3ed0:	2103      	movs	r1, #3
    3ed2:	438a      	bics	r2, r1
    3ed4:	2102      	movs	r1, #2
    3ed6:	430a      	orrs	r2, r1
    3ed8:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3eda:	78da      	ldrb	r2, [r3, #3]
    3edc:	210c      	movs	r1, #12
    3ede:	438a      	bics	r2, r1
    3ee0:	2108      	movs	r1, #8
    3ee2:	430a      	orrs	r2, r1
    3ee4:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3ee6:	4b55      	ldr	r3, [pc, #340]	; (403c <usb_init+0x1dc>)
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	039b      	lsls	r3, r3, #14
    3eec:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3eee:	2b1f      	cmp	r3, #31
    3ef0:	d100      	bne.n	3ef4 <usb_init+0x94>
		pad_transn = 5;
    3ef2:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    3ef4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    3ef6:	019a      	lsls	r2, r3, #6
    3ef8:	4b51      	ldr	r3, [pc, #324]	; (4040 <usb_init+0x1e0>)
    3efa:	400b      	ands	r3, r1
    3efc:	4313      	orrs	r3, r2
    3efe:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3f00:	4b4e      	ldr	r3, [pc, #312]	; (403c <usb_init+0x1dc>)
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	025b      	lsls	r3, r3, #9
    3f06:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    3f08:	2b1f      	cmp	r3, #31
    3f0a:	d100      	bne.n	3f0e <usb_init+0xae>
		pad_transp = 29;
    3f0c:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3f0e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3f10:	211f      	movs	r1, #31
    3f12:	438a      	bics	r2, r1
    3f14:	4313      	orrs	r3, r2
    3f16:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3f18:	4b48      	ldr	r3, [pc, #288]	; (403c <usb_init+0x1dc>)
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	019b      	lsls	r3, r3, #6
    3f1e:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3f20:	2b07      	cmp	r3, #7
    3f22:	d100      	bne.n	3f26 <usb_init+0xc6>
		pad_trim = 3;
    3f24:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3f26:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    3f28:	031a      	lsls	r2, r3, #12
    3f2a:	4b46      	ldr	r3, [pc, #280]	; (4044 <usb_init+0x1e4>)
    3f2c:	400b      	ands	r3, r1
    3f2e:	4313      	orrs	r3, r2
    3f30:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    3f32:	7832      	ldrb	r2, [r6, #0]
    3f34:	782b      	ldrb	r3, [r5, #0]
    3f36:	01d2      	lsls	r2, r2, #7
    3f38:	217f      	movs	r1, #127	; 0x7f
    3f3a:	400b      	ands	r3, r1
    3f3c:	4313      	orrs	r3, r2
    3f3e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3f40:	7872      	ldrb	r2, [r6, #1]
    3f42:	782b      	ldrb	r3, [r5, #0]
    3f44:	397e      	subs	r1, #126	; 0x7e
    3f46:	400a      	ands	r2, r1
    3f48:	0092      	lsls	r2, r2, #2
    3f4a:	3103      	adds	r1, #3
    3f4c:	438b      	bics	r3, r1
    3f4e:	4313      	orrs	r3, r2
    3f50:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    3f52:	4b3d      	ldr	r3, [pc, #244]	; (4048 <usb_init+0x1e8>)
    3f54:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    3f56:	78f3      	ldrb	r3, [r6, #3]
    3f58:	2b01      	cmp	r3, #1
    3f5a:	d105      	bne.n	3f68 <usb_init+0x108>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3f5c:	6822      	ldr	r2, [r4, #0]
    3f5e:	8913      	ldrh	r3, [r2, #8]
    3f60:	3108      	adds	r1, #8
    3f62:	438b      	bics	r3, r1
    3f64:	8113      	strh	r3, [r2, #8]
    3f66:	e008      	b.n	3f7a <usb_init+0x11a>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d106      	bne.n	3f7a <usb_init+0x11a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    3f6c:	6821      	ldr	r1, [r4, #0]
    3f6e:	890b      	ldrh	r3, [r1, #8]
    3f70:	220c      	movs	r2, #12
    3f72:	4393      	bics	r3, r2
    3f74:	2204      	movs	r2, #4
    3f76:	4313      	orrs	r3, r2
    3f78:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    3f7a:	2280      	movs	r2, #128	; 0x80
    3f7c:	0052      	lsls	r2, r2, #1
    3f7e:	2100      	movs	r1, #0
    3f80:	4831      	ldr	r0, [pc, #196]	; (4048 <usb_init+0x1e8>)
    3f82:	4b32      	ldr	r3, [pc, #200]	; (404c <usb_init+0x1ec>)
    3f84:	4798      	blx	r3
    3f86:	1d22      	adds	r2, r4, #4
    3f88:	0023      	movs	r3, r4
    3f8a:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    3f8c:	2100      	movs	r1, #0
    3f8e:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    3f90:	4293      	cmp	r3, r2
    3f92:	d1fc      	bne.n	3f8e <usb_init+0x12e>
    3f94:	0021      	movs	r1, r4
    3f96:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    3f98:	2200      	movs	r2, #0
    3f9a:	601a      	str	r2, [r3, #0]
    3f9c:	605a      	str	r2, [r3, #4]
    3f9e:	609a      	str	r2, [r3, #8]
    3fa0:	60da      	str	r2, [r3, #12]
    3fa2:	3310      	adds	r3, #16
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3fa4:	428b      	cmp	r3, r1
    3fa6:	d1f8      	bne.n	3f9a <usb_init+0x13a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    3fa8:	2300      	movs	r3, #0
    3faa:	22a4      	movs	r2, #164	; 0xa4
    3fac:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    3fae:	3201      	adds	r2, #1
    3fb0:	54a3      	strb	r3, [r4, r2]
    3fb2:	0023      	movs	r3, r4
    3fb4:	33a6      	adds	r3, #166	; 0xa6
    3fb6:	0021      	movs	r1, r4
    3fb8:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3fba:	2200      	movs	r2, #0
    3fbc:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3fbe:	721a      	strb	r2, [r3, #8]
    3fc0:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3fc2:	4299      	cmp	r1, r3
    3fc4:	d1fa      	bne.n	3fbc <usb_init+0x15c>
    3fc6:	0022      	movs	r2, r4
    3fc8:	32b8      	adds	r2, #184	; 0xb8
    3fca:	0023      	movs	r3, r4
    3fcc:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    3fce:	2100      	movs	r1, #0
    3fd0:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    3fd2:	429a      	cmp	r2, r3
    3fd4:	d1fc      	bne.n	3fd0 <usb_init+0x170>
    3fd6:	0021      	movs	r1, r4
    3fd8:	3155      	adds	r1, #85	; 0x55
    3fda:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3fdc:	2200      	movs	r2, #0
    3fde:	601a      	str	r2, [r3, #0]
    3fe0:	605a      	str	r2, [r3, #4]
    3fe2:	609a      	str	r2, [r3, #8]
    3fe4:	60da      	str	r2, [r3, #12]
    3fe6:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    3fe8:	428b      	cmp	r3, r1
    3fea:	d1f8      	bne.n	3fde <usb_init+0x17e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    3fec:	2300      	movs	r3, #0
    3fee:	22aa      	movs	r2, #170	; 0xaa
    3ff0:	0052      	lsls	r2, r2, #1
    3ff2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    3ff4:	3202      	adds	r2, #2
    3ff6:	52a3      	strh	r3, [r4, r2]
    3ff8:	0023      	movs	r3, r4
    3ffa:	3359      	adds	r3, #89	; 0x59
    3ffc:	33ff      	adds	r3, #255	; 0xff
    3ffe:	3461      	adds	r4, #97	; 0x61
    4000:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    4002:	2200      	movs	r2, #0
    4004:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4006:	721a      	strb	r2, [r3, #8]
    4008:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    400a:	429c      	cmp	r4, r3
    400c:	d1fa      	bne.n	4004 <usb_init+0x1a4>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    400e:	2280      	movs	r2, #128	; 0x80
    4010:	4b0f      	ldr	r3, [pc, #60]	; (4050 <usb_init+0x1f0>)
    4012:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4014:	2000      	movs	r0, #0
    4016:	b003      	add	sp, #12
    4018:	bc0c      	pop	{r2, r3}
    401a:	4690      	mov	r8, r2
    401c:	4699      	mov	r9, r3
    401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4020:	2000017c 	.word	0x2000017c
    4024:	20000188 	.word	0x20000188
    4028:	40000400 	.word	0x40000400
    402c:	0000259d 	.word	0x0000259d
    4030:	000024a5 	.word	0x000024a5
    4034:	00002419 	.word	0x00002419
    4038:	41005000 	.word	0x41005000
    403c:	00806024 	.word	0x00806024
    4040:	fffff83f 	.word	0xfffff83f
    4044:	ffff8fff 	.word	0xffff8fff
    4048:	20000458 	.word	0x20000458
    404c:	000045d7 	.word	0x000045d7
    4050:	e000e100 	.word	0xe000e100

00004054 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4054:	e7fe      	b.n	4054 <Dummy_Handler>
    4056:	46c0      	nop			; (mov r8, r8)

00004058 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4058:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    405a:	4b2e      	ldr	r3, [pc, #184]	; (4114 <Reset_Handler+0xbc>)
    405c:	4a2e      	ldr	r2, [pc, #184]	; (4118 <Reset_Handler+0xc0>)
    405e:	429a      	cmp	r2, r3
    4060:	d003      	beq.n	406a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4062:	4b2e      	ldr	r3, [pc, #184]	; (411c <Reset_Handler+0xc4>)
    4064:	4a2b      	ldr	r2, [pc, #172]	; (4114 <Reset_Handler+0xbc>)
    4066:	429a      	cmp	r2, r3
    4068:	d304      	bcc.n	4074 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    406a:	4b2d      	ldr	r3, [pc, #180]	; (4120 <Reset_Handler+0xc8>)
    406c:	4a2d      	ldr	r2, [pc, #180]	; (4124 <Reset_Handler+0xcc>)
    406e:	429a      	cmp	r2, r3
    4070:	d310      	bcc.n	4094 <Reset_Handler+0x3c>
    4072:	e01e      	b.n	40b2 <Reset_Handler+0x5a>
    4074:	4a2c      	ldr	r2, [pc, #176]	; (4128 <Reset_Handler+0xd0>)
    4076:	4b29      	ldr	r3, [pc, #164]	; (411c <Reset_Handler+0xc4>)
    4078:	3303      	adds	r3, #3
    407a:	1a9b      	subs	r3, r3, r2
    407c:	089b      	lsrs	r3, r3, #2
    407e:	3301      	adds	r3, #1
    4080:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4082:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4084:	4823      	ldr	r0, [pc, #140]	; (4114 <Reset_Handler+0xbc>)
    4086:	4924      	ldr	r1, [pc, #144]	; (4118 <Reset_Handler+0xc0>)
    4088:	588c      	ldr	r4, [r1, r2]
    408a:	5084      	str	r4, [r0, r2]
    408c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    408e:	429a      	cmp	r2, r3
    4090:	d1fa      	bne.n	4088 <Reset_Handler+0x30>
    4092:	e7ea      	b.n	406a <Reset_Handler+0x12>
    4094:	4a25      	ldr	r2, [pc, #148]	; (412c <Reset_Handler+0xd4>)
    4096:	4b22      	ldr	r3, [pc, #136]	; (4120 <Reset_Handler+0xc8>)
    4098:	3303      	adds	r3, #3
    409a:	1a9b      	subs	r3, r3, r2
    409c:	089b      	lsrs	r3, r3, #2
    409e:	3301      	adds	r3, #1
    40a0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    40a2:	2200      	movs	r2, #0
                *pDest++ = 0;
    40a4:	481f      	ldr	r0, [pc, #124]	; (4124 <Reset_Handler+0xcc>)
    40a6:	2100      	movs	r1, #0
    40a8:	1814      	adds	r4, r2, r0
    40aa:	6021      	str	r1, [r4, #0]
    40ac:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    40ae:	429a      	cmp	r2, r3
    40b0:	d1fa      	bne.n	40a8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    40b2:	4a1f      	ldr	r2, [pc, #124]	; (4130 <Reset_Handler+0xd8>)
    40b4:	21ff      	movs	r1, #255	; 0xff
    40b6:	4b1f      	ldr	r3, [pc, #124]	; (4134 <Reset_Handler+0xdc>)
    40b8:	438b      	bics	r3, r1
    40ba:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    40bc:	39fd      	subs	r1, #253	; 0xfd
    40be:	2390      	movs	r3, #144	; 0x90
    40c0:	005b      	lsls	r3, r3, #1
    40c2:	4a1d      	ldr	r2, [pc, #116]	; (4138 <Reset_Handler+0xe0>)
    40c4:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    40c6:	481d      	ldr	r0, [pc, #116]	; (413c <Reset_Handler+0xe4>)
    40c8:	78c3      	ldrb	r3, [r0, #3]
    40ca:	2403      	movs	r4, #3
    40cc:	43a3      	bics	r3, r4
    40ce:	2202      	movs	r2, #2
    40d0:	4313      	orrs	r3, r2
    40d2:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    40d4:	78c3      	ldrb	r3, [r0, #3]
    40d6:	260c      	movs	r6, #12
    40d8:	43b3      	bics	r3, r6
    40da:	2108      	movs	r1, #8
    40dc:	430b      	orrs	r3, r1
    40de:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    40e0:	4b17      	ldr	r3, [pc, #92]	; (4140 <Reset_Handler+0xe8>)
    40e2:	7b98      	ldrb	r0, [r3, #14]
    40e4:	2530      	movs	r5, #48	; 0x30
    40e6:	43a8      	bics	r0, r5
    40e8:	0005      	movs	r5, r0
    40ea:	2020      	movs	r0, #32
    40ec:	4328      	orrs	r0, r5
    40ee:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    40f0:	7b98      	ldrb	r0, [r3, #14]
    40f2:	43b0      	bics	r0, r6
    40f4:	4301      	orrs	r1, r0
    40f6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    40f8:	7b99      	ldrb	r1, [r3, #14]
    40fa:	43a1      	bics	r1, r4
    40fc:	430a      	orrs	r2, r1
    40fe:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4100:	4a10      	ldr	r2, [pc, #64]	; (4144 <Reset_Handler+0xec>)
    4102:	6851      	ldr	r1, [r2, #4]
    4104:	2380      	movs	r3, #128	; 0x80
    4106:	430b      	orrs	r3, r1
    4108:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    410a:	4b0f      	ldr	r3, [pc, #60]	; (4148 <Reset_Handler+0xf0>)
    410c:	4798      	blx	r3

        /* Branch to main function */
        main();
    410e:	4b0f      	ldr	r3, [pc, #60]	; (414c <Reset_Handler+0xf4>)
    4110:	4798      	blx	r3
    4112:	e7fe      	b.n	4112 <Reset_Handler+0xba>
    4114:	20000000 	.word	0x20000000
    4118:	000046bc 	.word	0x000046bc
    411c:	200000dc 	.word	0x200000dc
    4120:	20000558 	.word	0x20000558
    4124:	200000dc 	.word	0x200000dc
    4128:	20000004 	.word	0x20000004
    412c:	200000e0 	.word	0x200000e0
    4130:	e000ed00 	.word	0xe000ed00
    4134:	00000000 	.word	0x00000000
    4138:	41007000 	.word	0x41007000
    413c:	41005000 	.word	0x41005000
    4140:	41004800 	.word	0x41004800
    4144:	41004000 	.word	0x41004000
    4148:	00004579 	.word	0x00004579
    414c:	00004151 	.word	0x00004151

00004150 <main>:
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
}

int main(void)
{
    4150:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    4152:	2401      	movs	r4, #1
    4154:	4b0f      	ldr	r3, [pc, #60]	; (4194 <main+0x44>)
    4156:	701c      	strb	r4, [r3, #0]
    4158:	f3bf 8f5f 	dmb	sy
    415c:	b662      	cpsie	i
	system_init();
    415e:	4b0e      	ldr	r3, [pc, #56]	; (4198 <main+0x48>)
    4160:	4798      	blx	r3

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    4162:	2200      	movs	r2, #0
    4164:	2102      	movs	r1, #2
    4166:	205b      	movs	r0, #91	; 0x5b
    4168:	4b0c      	ldr	r3, [pc, #48]	; (419c <main+0x4c>)
    416a:	4798      	blx	r3
	RFM_setHighPower(true); // Always use this for RFM69HCW
    416c:	2001      	movs	r0, #1
    416e:	4b0c      	ldr	r3, [pc, #48]	; (41a0 <main+0x50>)
    4170:	4798      	blx	r3

	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    4172:	480c      	ldr	r0, [pc, #48]	; (41a4 <main+0x54>)
    4174:	4b0c      	ldr	r3, [pc, #48]	; (41a8 <main+0x58>)
    4176:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    4178:	4b0c      	ldr	r3, [pc, #48]	; (41ac <main+0x5c>)
    417a:	2200      	movs	r2, #0
    417c:	701a      	strb	r2, [r3, #0]
    417e:	705a      	strb	r2, [r3, #1]
    4180:	709a      	strb	r2, [r3, #2]
    4182:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4184:	711c      	strb	r4, [r3, #4]

	//configure_port_pins();

	// Initialize the sleep manager
	sleepmgr_init();
	ui_init();
    4186:	4b0a      	ldr	r3, [pc, #40]	; (41b0 <main+0x60>)
    4188:	4798      	blx	r3
	ui_powerdown();
    418a:	4b0a      	ldr	r3, [pc, #40]	; (41b4 <main+0x64>)
    418c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    418e:	4b0a      	ldr	r3, [pc, #40]	; (41b8 <main+0x68>)
    4190:	4798      	blx	r3
    4192:	e7fe      	b.n	4192 <main+0x42>
    4194:	200000d8 	.word	0x200000d8
    4198:	000025d1 	.word	0x000025d1
    419c:	00001171 	.word	0x00001171
    41a0:	00000d85 	.word	0x00000d85
    41a4:	00004688 	.word	0x00004688
    41a8:	000010f1 	.word	0x000010f1
    41ac:	20000248 	.word	0x20000248
    41b0:	000013dd 	.word	0x000013dd
    41b4:	00001439 	.word	0x00001439
    41b8:	000017d9 	.word	0x000017d9

000041bc <main_suspend_action>:
#endif
	}
}

void main_suspend_action(void)
{
    41bc:	b510      	push	{r4, lr}
	ui_powerdown();
    41be:	4b01      	ldr	r3, [pc, #4]	; (41c4 <main_suspend_action+0x8>)
    41c0:	4798      	blx	r3
}
    41c2:	bd10      	pop	{r4, pc}
    41c4:	00001439 	.word	0x00001439

000041c8 <main_resume_action>:

void main_resume_action(void)
{
    41c8:	b510      	push	{r4, lr}
	ui_wakeup();
    41ca:	4b01      	ldr	r3, [pc, #4]	; (41d0 <main_resume_action+0x8>)
    41cc:	4798      	blx	r3
}
    41ce:	bd10      	pop	{r4, pc}
    41d0:	00001469 	.word	0x00001469

000041d4 <main_sof_action>:

void main_sof_action(void)
{
    41d4:	b510      	push	{r4, lr}
	if (!main_b_mouse_enable)
    41d6:	4b04      	ldr	r3, [pc, #16]	; (41e8 <main_sof_action+0x14>)
    41d8:	781b      	ldrb	r3, [r3, #0]
    41da:	2b00      	cmp	r3, #0
    41dc:	d003      	beq.n	41e6 <main_sof_action+0x12>
		return;
	ui_process(udd_get_frame_number());
    41de:	4b03      	ldr	r3, [pc, #12]	; (41ec <main_sof_action+0x18>)
    41e0:	4798      	blx	r3
    41e2:	4b03      	ldr	r3, [pc, #12]	; (41f0 <main_sof_action+0x1c>)
    41e4:	4798      	blx	r3
}
    41e6:	bd10      	pop	{r4, pc}
    41e8:	2000018c 	.word	0x2000018c
    41ec:	00002cb1 	.word	0x00002cb1
    41f0:	00001479 	.word	0x00001479

000041f4 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    41f4:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    41f6:	4b01      	ldr	r3, [pc, #4]	; (41fc <main_remotewakeup_enable+0x8>)
    41f8:	4798      	blx	r3
}
    41fa:	bd10      	pop	{r4, pc}
    41fc:	00001449 	.word	0x00001449

00004200 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    4200:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    4202:	4b01      	ldr	r3, [pc, #4]	; (4208 <main_remotewakeup_disable+0x8>)
    4204:	4798      	blx	r3
}
    4206:	bd10      	pop	{r4, pc}
    4208:	00001459 	.word	0x00001459

0000420c <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    420c:	b510      	push	{r4, lr}
	ui_powerdown();
    420e:	4b01      	ldr	r3, [pc, #4]	; (4214 <main_suspend_lpm_action+0x8>)
    4210:	4798      	blx	r3
}
    4212:	bd10      	pop	{r4, pc}
    4214:	00001439 	.word	0x00001439

00004218 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    4218:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    421a:	4b01      	ldr	r3, [pc, #4]	; (4220 <main_remotewakeup_lpm_disable+0x8>)
    421c:	4798      	blx	r3
}
    421e:	bd10      	pop	{r4, pc}
    4220:	00001459 	.word	0x00001459

00004224 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    4224:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    4226:	4b01      	ldr	r3, [pc, #4]	; (422c <main_remotewakeup_lpm_enable+0x8>)
    4228:	4798      	blx	r3
}
    422a:	bd10      	pop	{r4, pc}
    422c:	00001449 	.word	0x00001449

00004230 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
	main_b_mouse_enable = true;
    4230:	2201      	movs	r2, #1
    4232:	4b02      	ldr	r3, [pc, #8]	; (423c <main_mouse_enable+0xc>)
    4234:	701a      	strb	r2, [r3, #0]
	return true;
}
    4236:	2001      	movs	r0, #1
    4238:	4770      	bx	lr
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	2000018c 	.word	0x2000018c

00004240 <main_mouse_disable>:

void main_mouse_disable(void)
{
	main_b_mouse_enable = false;
    4240:	2200      	movs	r2, #0
    4242:	4b01      	ldr	r3, [pc, #4]	; (4248 <main_mouse_disable+0x8>)
    4244:	701a      	strb	r2, [r3, #0]
}
    4246:	4770      	bx	lr
    4248:	2000018c 	.word	0x2000018c

0000424c <__aeabi_uidiv>:
    424c:	2200      	movs	r2, #0
    424e:	0843      	lsrs	r3, r0, #1
    4250:	428b      	cmp	r3, r1
    4252:	d374      	bcc.n	433e <__aeabi_uidiv+0xf2>
    4254:	0903      	lsrs	r3, r0, #4
    4256:	428b      	cmp	r3, r1
    4258:	d35f      	bcc.n	431a <__aeabi_uidiv+0xce>
    425a:	0a03      	lsrs	r3, r0, #8
    425c:	428b      	cmp	r3, r1
    425e:	d344      	bcc.n	42ea <__aeabi_uidiv+0x9e>
    4260:	0b03      	lsrs	r3, r0, #12
    4262:	428b      	cmp	r3, r1
    4264:	d328      	bcc.n	42b8 <__aeabi_uidiv+0x6c>
    4266:	0c03      	lsrs	r3, r0, #16
    4268:	428b      	cmp	r3, r1
    426a:	d30d      	bcc.n	4288 <__aeabi_uidiv+0x3c>
    426c:	22ff      	movs	r2, #255	; 0xff
    426e:	0209      	lsls	r1, r1, #8
    4270:	ba12      	rev	r2, r2
    4272:	0c03      	lsrs	r3, r0, #16
    4274:	428b      	cmp	r3, r1
    4276:	d302      	bcc.n	427e <__aeabi_uidiv+0x32>
    4278:	1212      	asrs	r2, r2, #8
    427a:	0209      	lsls	r1, r1, #8
    427c:	d065      	beq.n	434a <__aeabi_uidiv+0xfe>
    427e:	0b03      	lsrs	r3, r0, #12
    4280:	428b      	cmp	r3, r1
    4282:	d319      	bcc.n	42b8 <__aeabi_uidiv+0x6c>
    4284:	e000      	b.n	4288 <__aeabi_uidiv+0x3c>
    4286:	0a09      	lsrs	r1, r1, #8
    4288:	0bc3      	lsrs	r3, r0, #15
    428a:	428b      	cmp	r3, r1
    428c:	d301      	bcc.n	4292 <__aeabi_uidiv+0x46>
    428e:	03cb      	lsls	r3, r1, #15
    4290:	1ac0      	subs	r0, r0, r3
    4292:	4152      	adcs	r2, r2
    4294:	0b83      	lsrs	r3, r0, #14
    4296:	428b      	cmp	r3, r1
    4298:	d301      	bcc.n	429e <__aeabi_uidiv+0x52>
    429a:	038b      	lsls	r3, r1, #14
    429c:	1ac0      	subs	r0, r0, r3
    429e:	4152      	adcs	r2, r2
    42a0:	0b43      	lsrs	r3, r0, #13
    42a2:	428b      	cmp	r3, r1
    42a4:	d301      	bcc.n	42aa <__aeabi_uidiv+0x5e>
    42a6:	034b      	lsls	r3, r1, #13
    42a8:	1ac0      	subs	r0, r0, r3
    42aa:	4152      	adcs	r2, r2
    42ac:	0b03      	lsrs	r3, r0, #12
    42ae:	428b      	cmp	r3, r1
    42b0:	d301      	bcc.n	42b6 <__aeabi_uidiv+0x6a>
    42b2:	030b      	lsls	r3, r1, #12
    42b4:	1ac0      	subs	r0, r0, r3
    42b6:	4152      	adcs	r2, r2
    42b8:	0ac3      	lsrs	r3, r0, #11
    42ba:	428b      	cmp	r3, r1
    42bc:	d301      	bcc.n	42c2 <__aeabi_uidiv+0x76>
    42be:	02cb      	lsls	r3, r1, #11
    42c0:	1ac0      	subs	r0, r0, r3
    42c2:	4152      	adcs	r2, r2
    42c4:	0a83      	lsrs	r3, r0, #10
    42c6:	428b      	cmp	r3, r1
    42c8:	d301      	bcc.n	42ce <__aeabi_uidiv+0x82>
    42ca:	028b      	lsls	r3, r1, #10
    42cc:	1ac0      	subs	r0, r0, r3
    42ce:	4152      	adcs	r2, r2
    42d0:	0a43      	lsrs	r3, r0, #9
    42d2:	428b      	cmp	r3, r1
    42d4:	d301      	bcc.n	42da <__aeabi_uidiv+0x8e>
    42d6:	024b      	lsls	r3, r1, #9
    42d8:	1ac0      	subs	r0, r0, r3
    42da:	4152      	adcs	r2, r2
    42dc:	0a03      	lsrs	r3, r0, #8
    42de:	428b      	cmp	r3, r1
    42e0:	d301      	bcc.n	42e6 <__aeabi_uidiv+0x9a>
    42e2:	020b      	lsls	r3, r1, #8
    42e4:	1ac0      	subs	r0, r0, r3
    42e6:	4152      	adcs	r2, r2
    42e8:	d2cd      	bcs.n	4286 <__aeabi_uidiv+0x3a>
    42ea:	09c3      	lsrs	r3, r0, #7
    42ec:	428b      	cmp	r3, r1
    42ee:	d301      	bcc.n	42f4 <__aeabi_uidiv+0xa8>
    42f0:	01cb      	lsls	r3, r1, #7
    42f2:	1ac0      	subs	r0, r0, r3
    42f4:	4152      	adcs	r2, r2
    42f6:	0983      	lsrs	r3, r0, #6
    42f8:	428b      	cmp	r3, r1
    42fa:	d301      	bcc.n	4300 <__aeabi_uidiv+0xb4>
    42fc:	018b      	lsls	r3, r1, #6
    42fe:	1ac0      	subs	r0, r0, r3
    4300:	4152      	adcs	r2, r2
    4302:	0943      	lsrs	r3, r0, #5
    4304:	428b      	cmp	r3, r1
    4306:	d301      	bcc.n	430c <__aeabi_uidiv+0xc0>
    4308:	014b      	lsls	r3, r1, #5
    430a:	1ac0      	subs	r0, r0, r3
    430c:	4152      	adcs	r2, r2
    430e:	0903      	lsrs	r3, r0, #4
    4310:	428b      	cmp	r3, r1
    4312:	d301      	bcc.n	4318 <__aeabi_uidiv+0xcc>
    4314:	010b      	lsls	r3, r1, #4
    4316:	1ac0      	subs	r0, r0, r3
    4318:	4152      	adcs	r2, r2
    431a:	08c3      	lsrs	r3, r0, #3
    431c:	428b      	cmp	r3, r1
    431e:	d301      	bcc.n	4324 <__aeabi_uidiv+0xd8>
    4320:	00cb      	lsls	r3, r1, #3
    4322:	1ac0      	subs	r0, r0, r3
    4324:	4152      	adcs	r2, r2
    4326:	0883      	lsrs	r3, r0, #2
    4328:	428b      	cmp	r3, r1
    432a:	d301      	bcc.n	4330 <__aeabi_uidiv+0xe4>
    432c:	008b      	lsls	r3, r1, #2
    432e:	1ac0      	subs	r0, r0, r3
    4330:	4152      	adcs	r2, r2
    4332:	0843      	lsrs	r3, r0, #1
    4334:	428b      	cmp	r3, r1
    4336:	d301      	bcc.n	433c <__aeabi_uidiv+0xf0>
    4338:	004b      	lsls	r3, r1, #1
    433a:	1ac0      	subs	r0, r0, r3
    433c:	4152      	adcs	r2, r2
    433e:	1a41      	subs	r1, r0, r1
    4340:	d200      	bcs.n	4344 <__aeabi_uidiv+0xf8>
    4342:	4601      	mov	r1, r0
    4344:	4152      	adcs	r2, r2
    4346:	4610      	mov	r0, r2
    4348:	4770      	bx	lr
    434a:	e7ff      	b.n	434c <__aeabi_uidiv+0x100>
    434c:	b501      	push	{r0, lr}
    434e:	2000      	movs	r0, #0
    4350:	f000 f8f0 	bl	4534 <__aeabi_idiv0>
    4354:	bd02      	pop	{r1, pc}
    4356:	46c0      	nop			; (mov r8, r8)

00004358 <__aeabi_uidivmod>:
    4358:	2900      	cmp	r1, #0
    435a:	d0f7      	beq.n	434c <__aeabi_uidiv+0x100>
    435c:	e776      	b.n	424c <__aeabi_uidiv>
    435e:	4770      	bx	lr

00004360 <__aeabi_idiv>:
    4360:	4603      	mov	r3, r0
    4362:	430b      	orrs	r3, r1
    4364:	d47f      	bmi.n	4466 <__aeabi_idiv+0x106>
    4366:	2200      	movs	r2, #0
    4368:	0843      	lsrs	r3, r0, #1
    436a:	428b      	cmp	r3, r1
    436c:	d374      	bcc.n	4458 <__aeabi_idiv+0xf8>
    436e:	0903      	lsrs	r3, r0, #4
    4370:	428b      	cmp	r3, r1
    4372:	d35f      	bcc.n	4434 <__aeabi_idiv+0xd4>
    4374:	0a03      	lsrs	r3, r0, #8
    4376:	428b      	cmp	r3, r1
    4378:	d344      	bcc.n	4404 <__aeabi_idiv+0xa4>
    437a:	0b03      	lsrs	r3, r0, #12
    437c:	428b      	cmp	r3, r1
    437e:	d328      	bcc.n	43d2 <__aeabi_idiv+0x72>
    4380:	0c03      	lsrs	r3, r0, #16
    4382:	428b      	cmp	r3, r1
    4384:	d30d      	bcc.n	43a2 <__aeabi_idiv+0x42>
    4386:	22ff      	movs	r2, #255	; 0xff
    4388:	0209      	lsls	r1, r1, #8
    438a:	ba12      	rev	r2, r2
    438c:	0c03      	lsrs	r3, r0, #16
    438e:	428b      	cmp	r3, r1
    4390:	d302      	bcc.n	4398 <__aeabi_idiv+0x38>
    4392:	1212      	asrs	r2, r2, #8
    4394:	0209      	lsls	r1, r1, #8
    4396:	d065      	beq.n	4464 <__aeabi_idiv+0x104>
    4398:	0b03      	lsrs	r3, r0, #12
    439a:	428b      	cmp	r3, r1
    439c:	d319      	bcc.n	43d2 <__aeabi_idiv+0x72>
    439e:	e000      	b.n	43a2 <__aeabi_idiv+0x42>
    43a0:	0a09      	lsrs	r1, r1, #8
    43a2:	0bc3      	lsrs	r3, r0, #15
    43a4:	428b      	cmp	r3, r1
    43a6:	d301      	bcc.n	43ac <__aeabi_idiv+0x4c>
    43a8:	03cb      	lsls	r3, r1, #15
    43aa:	1ac0      	subs	r0, r0, r3
    43ac:	4152      	adcs	r2, r2
    43ae:	0b83      	lsrs	r3, r0, #14
    43b0:	428b      	cmp	r3, r1
    43b2:	d301      	bcc.n	43b8 <__aeabi_idiv+0x58>
    43b4:	038b      	lsls	r3, r1, #14
    43b6:	1ac0      	subs	r0, r0, r3
    43b8:	4152      	adcs	r2, r2
    43ba:	0b43      	lsrs	r3, r0, #13
    43bc:	428b      	cmp	r3, r1
    43be:	d301      	bcc.n	43c4 <__aeabi_idiv+0x64>
    43c0:	034b      	lsls	r3, r1, #13
    43c2:	1ac0      	subs	r0, r0, r3
    43c4:	4152      	adcs	r2, r2
    43c6:	0b03      	lsrs	r3, r0, #12
    43c8:	428b      	cmp	r3, r1
    43ca:	d301      	bcc.n	43d0 <__aeabi_idiv+0x70>
    43cc:	030b      	lsls	r3, r1, #12
    43ce:	1ac0      	subs	r0, r0, r3
    43d0:	4152      	adcs	r2, r2
    43d2:	0ac3      	lsrs	r3, r0, #11
    43d4:	428b      	cmp	r3, r1
    43d6:	d301      	bcc.n	43dc <__aeabi_idiv+0x7c>
    43d8:	02cb      	lsls	r3, r1, #11
    43da:	1ac0      	subs	r0, r0, r3
    43dc:	4152      	adcs	r2, r2
    43de:	0a83      	lsrs	r3, r0, #10
    43e0:	428b      	cmp	r3, r1
    43e2:	d301      	bcc.n	43e8 <__aeabi_idiv+0x88>
    43e4:	028b      	lsls	r3, r1, #10
    43e6:	1ac0      	subs	r0, r0, r3
    43e8:	4152      	adcs	r2, r2
    43ea:	0a43      	lsrs	r3, r0, #9
    43ec:	428b      	cmp	r3, r1
    43ee:	d301      	bcc.n	43f4 <__aeabi_idiv+0x94>
    43f0:	024b      	lsls	r3, r1, #9
    43f2:	1ac0      	subs	r0, r0, r3
    43f4:	4152      	adcs	r2, r2
    43f6:	0a03      	lsrs	r3, r0, #8
    43f8:	428b      	cmp	r3, r1
    43fa:	d301      	bcc.n	4400 <__aeabi_idiv+0xa0>
    43fc:	020b      	lsls	r3, r1, #8
    43fe:	1ac0      	subs	r0, r0, r3
    4400:	4152      	adcs	r2, r2
    4402:	d2cd      	bcs.n	43a0 <__aeabi_idiv+0x40>
    4404:	09c3      	lsrs	r3, r0, #7
    4406:	428b      	cmp	r3, r1
    4408:	d301      	bcc.n	440e <__aeabi_idiv+0xae>
    440a:	01cb      	lsls	r3, r1, #7
    440c:	1ac0      	subs	r0, r0, r3
    440e:	4152      	adcs	r2, r2
    4410:	0983      	lsrs	r3, r0, #6
    4412:	428b      	cmp	r3, r1
    4414:	d301      	bcc.n	441a <__aeabi_idiv+0xba>
    4416:	018b      	lsls	r3, r1, #6
    4418:	1ac0      	subs	r0, r0, r3
    441a:	4152      	adcs	r2, r2
    441c:	0943      	lsrs	r3, r0, #5
    441e:	428b      	cmp	r3, r1
    4420:	d301      	bcc.n	4426 <__aeabi_idiv+0xc6>
    4422:	014b      	lsls	r3, r1, #5
    4424:	1ac0      	subs	r0, r0, r3
    4426:	4152      	adcs	r2, r2
    4428:	0903      	lsrs	r3, r0, #4
    442a:	428b      	cmp	r3, r1
    442c:	d301      	bcc.n	4432 <__aeabi_idiv+0xd2>
    442e:	010b      	lsls	r3, r1, #4
    4430:	1ac0      	subs	r0, r0, r3
    4432:	4152      	adcs	r2, r2
    4434:	08c3      	lsrs	r3, r0, #3
    4436:	428b      	cmp	r3, r1
    4438:	d301      	bcc.n	443e <__aeabi_idiv+0xde>
    443a:	00cb      	lsls	r3, r1, #3
    443c:	1ac0      	subs	r0, r0, r3
    443e:	4152      	adcs	r2, r2
    4440:	0883      	lsrs	r3, r0, #2
    4442:	428b      	cmp	r3, r1
    4444:	d301      	bcc.n	444a <__aeabi_idiv+0xea>
    4446:	008b      	lsls	r3, r1, #2
    4448:	1ac0      	subs	r0, r0, r3
    444a:	4152      	adcs	r2, r2
    444c:	0843      	lsrs	r3, r0, #1
    444e:	428b      	cmp	r3, r1
    4450:	d301      	bcc.n	4456 <__aeabi_idiv+0xf6>
    4452:	004b      	lsls	r3, r1, #1
    4454:	1ac0      	subs	r0, r0, r3
    4456:	4152      	adcs	r2, r2
    4458:	1a41      	subs	r1, r0, r1
    445a:	d200      	bcs.n	445e <__aeabi_idiv+0xfe>
    445c:	4601      	mov	r1, r0
    445e:	4152      	adcs	r2, r2
    4460:	4610      	mov	r0, r2
    4462:	4770      	bx	lr
    4464:	e05d      	b.n	4522 <__aeabi_idiv+0x1c2>
    4466:	0fca      	lsrs	r2, r1, #31
    4468:	d000      	beq.n	446c <__aeabi_idiv+0x10c>
    446a:	4249      	negs	r1, r1
    446c:	1003      	asrs	r3, r0, #32
    446e:	d300      	bcc.n	4472 <__aeabi_idiv+0x112>
    4470:	4240      	negs	r0, r0
    4472:	4053      	eors	r3, r2
    4474:	2200      	movs	r2, #0
    4476:	469c      	mov	ip, r3
    4478:	0903      	lsrs	r3, r0, #4
    447a:	428b      	cmp	r3, r1
    447c:	d32d      	bcc.n	44da <__aeabi_idiv+0x17a>
    447e:	0a03      	lsrs	r3, r0, #8
    4480:	428b      	cmp	r3, r1
    4482:	d312      	bcc.n	44aa <__aeabi_idiv+0x14a>
    4484:	22fc      	movs	r2, #252	; 0xfc
    4486:	0189      	lsls	r1, r1, #6
    4488:	ba12      	rev	r2, r2
    448a:	0a03      	lsrs	r3, r0, #8
    448c:	428b      	cmp	r3, r1
    448e:	d30c      	bcc.n	44aa <__aeabi_idiv+0x14a>
    4490:	0189      	lsls	r1, r1, #6
    4492:	1192      	asrs	r2, r2, #6
    4494:	428b      	cmp	r3, r1
    4496:	d308      	bcc.n	44aa <__aeabi_idiv+0x14a>
    4498:	0189      	lsls	r1, r1, #6
    449a:	1192      	asrs	r2, r2, #6
    449c:	428b      	cmp	r3, r1
    449e:	d304      	bcc.n	44aa <__aeabi_idiv+0x14a>
    44a0:	0189      	lsls	r1, r1, #6
    44a2:	d03a      	beq.n	451a <__aeabi_idiv+0x1ba>
    44a4:	1192      	asrs	r2, r2, #6
    44a6:	e000      	b.n	44aa <__aeabi_idiv+0x14a>
    44a8:	0989      	lsrs	r1, r1, #6
    44aa:	09c3      	lsrs	r3, r0, #7
    44ac:	428b      	cmp	r3, r1
    44ae:	d301      	bcc.n	44b4 <__aeabi_idiv+0x154>
    44b0:	01cb      	lsls	r3, r1, #7
    44b2:	1ac0      	subs	r0, r0, r3
    44b4:	4152      	adcs	r2, r2
    44b6:	0983      	lsrs	r3, r0, #6
    44b8:	428b      	cmp	r3, r1
    44ba:	d301      	bcc.n	44c0 <__aeabi_idiv+0x160>
    44bc:	018b      	lsls	r3, r1, #6
    44be:	1ac0      	subs	r0, r0, r3
    44c0:	4152      	adcs	r2, r2
    44c2:	0943      	lsrs	r3, r0, #5
    44c4:	428b      	cmp	r3, r1
    44c6:	d301      	bcc.n	44cc <__aeabi_idiv+0x16c>
    44c8:	014b      	lsls	r3, r1, #5
    44ca:	1ac0      	subs	r0, r0, r3
    44cc:	4152      	adcs	r2, r2
    44ce:	0903      	lsrs	r3, r0, #4
    44d0:	428b      	cmp	r3, r1
    44d2:	d301      	bcc.n	44d8 <__aeabi_idiv+0x178>
    44d4:	010b      	lsls	r3, r1, #4
    44d6:	1ac0      	subs	r0, r0, r3
    44d8:	4152      	adcs	r2, r2
    44da:	08c3      	lsrs	r3, r0, #3
    44dc:	428b      	cmp	r3, r1
    44de:	d301      	bcc.n	44e4 <__aeabi_idiv+0x184>
    44e0:	00cb      	lsls	r3, r1, #3
    44e2:	1ac0      	subs	r0, r0, r3
    44e4:	4152      	adcs	r2, r2
    44e6:	0883      	lsrs	r3, r0, #2
    44e8:	428b      	cmp	r3, r1
    44ea:	d301      	bcc.n	44f0 <__aeabi_idiv+0x190>
    44ec:	008b      	lsls	r3, r1, #2
    44ee:	1ac0      	subs	r0, r0, r3
    44f0:	4152      	adcs	r2, r2
    44f2:	d2d9      	bcs.n	44a8 <__aeabi_idiv+0x148>
    44f4:	0843      	lsrs	r3, r0, #1
    44f6:	428b      	cmp	r3, r1
    44f8:	d301      	bcc.n	44fe <__aeabi_idiv+0x19e>
    44fa:	004b      	lsls	r3, r1, #1
    44fc:	1ac0      	subs	r0, r0, r3
    44fe:	4152      	adcs	r2, r2
    4500:	1a41      	subs	r1, r0, r1
    4502:	d200      	bcs.n	4506 <__aeabi_idiv+0x1a6>
    4504:	4601      	mov	r1, r0
    4506:	4663      	mov	r3, ip
    4508:	4152      	adcs	r2, r2
    450a:	105b      	asrs	r3, r3, #1
    450c:	4610      	mov	r0, r2
    450e:	d301      	bcc.n	4514 <__aeabi_idiv+0x1b4>
    4510:	4240      	negs	r0, r0
    4512:	2b00      	cmp	r3, #0
    4514:	d500      	bpl.n	4518 <__aeabi_idiv+0x1b8>
    4516:	4249      	negs	r1, r1
    4518:	4770      	bx	lr
    451a:	4663      	mov	r3, ip
    451c:	105b      	asrs	r3, r3, #1
    451e:	d300      	bcc.n	4522 <__aeabi_idiv+0x1c2>
    4520:	4240      	negs	r0, r0
    4522:	b501      	push	{r0, lr}
    4524:	2000      	movs	r0, #0
    4526:	f000 f805 	bl	4534 <__aeabi_idiv0>
    452a:	bd02      	pop	{r1, pc}

0000452c <__aeabi_idivmod>:
    452c:	2900      	cmp	r1, #0
    452e:	d0f8      	beq.n	4522 <__aeabi_idiv+0x1c2>
    4530:	e716      	b.n	4360 <__aeabi_idiv>
    4532:	4770      	bx	lr

00004534 <__aeabi_idiv0>:
    4534:	4770      	bx	lr
    4536:	46c0      	nop			; (mov r8, r8)

00004538 <__ctzsi2>:
    4538:	4241      	negs	r1, r0
    453a:	4008      	ands	r0, r1
    453c:	211c      	movs	r1, #28
    453e:	2301      	movs	r3, #1
    4540:	041b      	lsls	r3, r3, #16
    4542:	4298      	cmp	r0, r3
    4544:	d301      	bcc.n	454a <__ctzsi2+0x12>
    4546:	0c00      	lsrs	r0, r0, #16
    4548:	3910      	subs	r1, #16
    454a:	0a1b      	lsrs	r3, r3, #8
    454c:	4298      	cmp	r0, r3
    454e:	d301      	bcc.n	4554 <__ctzsi2+0x1c>
    4550:	0a00      	lsrs	r0, r0, #8
    4552:	3908      	subs	r1, #8
    4554:	091b      	lsrs	r3, r3, #4
    4556:	4298      	cmp	r0, r3
    4558:	d301      	bcc.n	455e <__ctzsi2+0x26>
    455a:	0900      	lsrs	r0, r0, #4
    455c:	3904      	subs	r1, #4
    455e:	a202      	add	r2, pc, #8	; (adr r2, 4568 <__ctzsi2+0x30>)
    4560:	5c10      	ldrb	r0, [r2, r0]
    4562:	1a40      	subs	r0, r0, r1
    4564:	4770      	bx	lr
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	1d1d1c1b 	.word	0x1d1d1c1b
    456c:	1e1e1e1e 	.word	0x1e1e1e1e
    4570:	1f1f1f1f 	.word	0x1f1f1f1f
    4574:	1f1f1f1f 	.word	0x1f1f1f1f

00004578 <__libc_init_array>:
    4578:	4b0e      	ldr	r3, [pc, #56]	; (45b4 <__libc_init_array+0x3c>)
    457a:	b570      	push	{r4, r5, r6, lr}
    457c:	2500      	movs	r5, #0
    457e:	001e      	movs	r6, r3
    4580:	4c0d      	ldr	r4, [pc, #52]	; (45b8 <__libc_init_array+0x40>)
    4582:	1ae4      	subs	r4, r4, r3
    4584:	10a4      	asrs	r4, r4, #2
    4586:	42a5      	cmp	r5, r4
    4588:	d004      	beq.n	4594 <__libc_init_array+0x1c>
    458a:	00ab      	lsls	r3, r5, #2
    458c:	58f3      	ldr	r3, [r6, r3]
    458e:	4798      	blx	r3
    4590:	3501      	adds	r5, #1
    4592:	e7f8      	b.n	4586 <__libc_init_array+0xe>
    4594:	f000 f882 	bl	469c <_init>
    4598:	4b08      	ldr	r3, [pc, #32]	; (45bc <__libc_init_array+0x44>)
    459a:	2500      	movs	r5, #0
    459c:	001e      	movs	r6, r3
    459e:	4c08      	ldr	r4, [pc, #32]	; (45c0 <__libc_init_array+0x48>)
    45a0:	1ae4      	subs	r4, r4, r3
    45a2:	10a4      	asrs	r4, r4, #2
    45a4:	42a5      	cmp	r5, r4
    45a6:	d004      	beq.n	45b2 <__libc_init_array+0x3a>
    45a8:	00ab      	lsls	r3, r5, #2
    45aa:	58f3      	ldr	r3, [r6, r3]
    45ac:	4798      	blx	r3
    45ae:	3501      	adds	r5, #1
    45b0:	e7f8      	b.n	45a4 <__libc_init_array+0x2c>
    45b2:	bd70      	pop	{r4, r5, r6, pc}
    45b4:	000046a8 	.word	0x000046a8
    45b8:	000046a8 	.word	0x000046a8
    45bc:	000046a8 	.word	0x000046a8
    45c0:	000046ac 	.word	0x000046ac

000045c4 <memcpy>:
    45c4:	2300      	movs	r3, #0
    45c6:	b510      	push	{r4, lr}
    45c8:	429a      	cmp	r2, r3
    45ca:	d003      	beq.n	45d4 <memcpy+0x10>
    45cc:	5ccc      	ldrb	r4, [r1, r3]
    45ce:	54c4      	strb	r4, [r0, r3]
    45d0:	3301      	adds	r3, #1
    45d2:	e7f9      	b.n	45c8 <memcpy+0x4>
    45d4:	bd10      	pop	{r4, pc}

000045d6 <memset>:
    45d6:	0003      	movs	r3, r0
    45d8:	1882      	adds	r2, r0, r2
    45da:	4293      	cmp	r3, r2
    45dc:	d002      	beq.n	45e4 <memset+0xe>
    45de:	7019      	strb	r1, [r3, #0]
    45e0:	3301      	adds	r3, #1
    45e2:	e7fa      	b.n	45da <memset+0x4>
    45e4:	4770      	bx	lr
    45e6:	0000      	movs	r0, r0
    45e8:	42000800 	.word	0x42000800
    45ec:	42000c00 	.word	0x42000c00
    45f0:	42001000 	.word	0x42001000
    45f4:	42001400 	.word	0x42001400
    45f8:	42001800 	.word	0x42001800
    45fc:	42001c00 	.word	0x42001c00
    4600:	00000eaa 	.word	0x00000eaa
    4604:	00000e90 	.word	0x00000e90
    4608:	00000e76 	.word	0x00000e76
    460c:	00000e4e 	.word	0x00000e4e
    4610:	00000e22 	.word	0x00000e22
    4614:	00001f8a 	.word	0x00001f8a
    4618:	00001f86 	.word	0x00001f86
    461c:	00001f86 	.word	0x00001f86
    4620:	00001fe4 	.word	0x00001fe4
    4624:	00001fe4 	.word	0x00001fe4
    4628:	00001f9e 	.word	0x00001f9e
    462c:	00001f90 	.word	0x00001f90
    4630:	00001fa4 	.word	0x00001fa4
    4634:	00001fd2 	.word	0x00001fd2
    4638:	000020f4 	.word	0x000020f4
    463c:	000020d4 	.word	0x000020d4
    4640:	000020d4 	.word	0x000020d4
    4644:	00002160 	.word	0x00002160
    4648:	000020e6 	.word	0x000020e6
    464c:	00002102 	.word	0x00002102
    4650:	000020d8 	.word	0x000020d8
    4654:	00002110 	.word	0x00002110
    4658:	00002150 	.word	0x00002150
    465c:	01020300 	.word	0x01020300
    4660:	0000348c 	.word	0x0000348c
    4664:	0000349a 	.word	0x0000349a
    4668:	0000353a 	.word	0x0000353a
    466c:	000035a2 	.word	0x000035a2
    4670:	00003606 	.word	0x00003606

00004674 <_usb_device_irq_bits>:
    4674:	00080004 00800070 01000001 00000200     ....p...........

00004684 <_usb_endpoint_irq_bits>:
    4684:	60100c03 53504f54 45524345 53415054     ...`TOPSECRETPAS
    4694:	44525753 00000000                       SWRD....

0000469c <_init>:
    469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46a2:	bc08      	pop	{r3}
    46a4:	469e      	mov	lr, r3
    46a6:	4770      	bx	lr

000046a8 <__init_array_start>:
    46a8:	000000dd 	.word	0x000000dd

000046ac <_fini>:
    46ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ae:	46c0      	nop			; (mov r8, r8)
    46b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46b2:	bc08      	pop	{r3}
    46b4:	469e      	mov	lr, r3
    46b6:	4770      	bx	lr

000046b8 <__fini_array_start>:
    46b8:	000000b5 	.word	0x000000b5
