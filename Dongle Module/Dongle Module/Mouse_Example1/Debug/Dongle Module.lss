
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008420  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  00008420  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000488  200000dc  000084fc  000180dc  2**2
                  ALLOC
  3 .stack        00002004  20000564  00008984  000180dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000180dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018104  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027865  00000000  00000000  0001815f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003548  00000000  00000000  0003f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004cc4  00000000  00000000  00042f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da8  00000000  00000000  00047bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c40  00000000  00000000  00048978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e44d  00000000  00000000  000495b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010e8b  00000000  00000000  00067a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000943e1  00000000  00000000  00078890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ed8  00000000  00000000  0010cc74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002568 	.word	0x20002568
       4:	00007cd9 	.word	0x00007cd9
       8:	00007dd1 	.word	0x00007dd1
       c:	00007dd1 	.word	0x00007dd1
	...
      2c:	00007dd1 	.word	0x00007dd1
	...
      38:	00007dd1 	.word	0x00007dd1
      3c:	00007dd1 	.word	0x00007dd1
      40:	00007dd1 	.word	0x00007dd1
      44:	00007dd1 	.word	0x00007dd1
      48:	00007dd1 	.word	0x00007dd1
      4c:	00007dd1 	.word	0x00007dd1
      50:	000029c1 	.word	0x000029c1
      54:	00007dd1 	.word	0x00007dd1
      58:	00007dd1 	.word	0x00007dd1
      5c:	00007929 	.word	0x00007929
      60:	00007dd1 	.word	0x00007dd1
      64:	00007dd1 	.word	0x00007dd1
      68:	00007dd1 	.word	0x00007dd1
      6c:	00007dd1 	.word	0x00007dd1
      70:	00007dd1 	.word	0x00007dd1
      74:	00007dd1 	.word	0x00007dd1
      78:	00007dd1 	.word	0x00007dd1
      7c:	00007dd1 	.word	0x00007dd1
      80:	00007dd1 	.word	0x00007dd1
      84:	00007dd1 	.word	0x00007dd1
      88:	00007dd1 	.word	0x00007dd1
      8c:	00007dd1 	.word	0x00007dd1
      90:	00007dd1 	.word	0x00007dd1
	...
      9c:	00007dd1 	.word	0x00007dd1
      a0:	00007dd1 	.word	0x00007dd1
      a4:	00007dd1 	.word	0x00007dd1
      a8:	00007dd1 	.word	0x00007dd1
      ac:	00007dd1 	.word	0x00007dd1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	00008420 	.word	0x00008420

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00008420 	.word	0x00008420
     108:	200000e0 	.word	0x200000e0
     10c:	00008420 	.word	0x00008420
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	681b      	ldr	r3, [r3, #0]
     190:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     192:	68fb      	ldr	r3, [r7, #12]
     194:	7a9b      	ldrb	r3, [r3, #10]
     196:	b2db      	uxtb	r3, r3
     198:	b2db      	uxtb	r3, r3
     19a:	b25b      	sxtb	r3, r3
     19c:	2b00      	cmp	r3, #0
     19e:	da01      	bge.n	1a4 <rtc_count_is_syncing+0x20>
                return true;
     1a0:	2301      	movs	r3, #1
     1a2:	e000      	b.n	1a6 <rtc_count_is_syncing+0x22>
        }

        return false;
     1a4:	2300      	movs	r3, #0
}
     1a6:	1c18      	adds	r0, r3, #0
     1a8:	46bd      	mov	sp, r7
     1aa:	b004      	add	sp, #16
     1ac:	bd80      	pop	{r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)

000001b0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b084      	sub	sp, #16
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1b8:	687b      	ldr	r3, [r7, #4]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	1c18      	adds	r0, r3, #0
     1c4:	4b07      	ldr	r3, [pc, #28]	; (1e4 <rtc_count_enable+0x34>)
     1c6:	4798      	blx	r3
     1c8:	1e03      	subs	r3, r0, #0
     1ca:	d1f9      	bne.n	1c0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	881b      	ldrh	r3, [r3, #0]
     1d0:	b29b      	uxth	r3, r3
     1d2:	2202      	movs	r2, #2
     1d4:	4313      	orrs	r3, r2
     1d6:	b29a      	uxth	r2, r3
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	801a      	strh	r2, [r3, #0]
}
     1dc:	46bd      	mov	sp, r7
     1de:	b004      	add	sp, #16
     1e0:	bd80      	pop	{r7, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	00000185 	.word	0x00000185

000001e8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	1c18      	adds	r0, r3, #0
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_count_disable+0x34>)
     1fe:	4798      	blx	r3
     200:	1e03      	subs	r3, r0, #0
     202:	d1f9      	bne.n	1f8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     204:	68fb      	ldr	r3, [r7, #12]
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	2202      	movs	r2, #2
     20c:	4393      	bics	r3, r2
     20e:	b29a      	uxth	r2, r3
     210:	68fb      	ldr	r3, [r7, #12]
     212:	801a      	strh	r2, [r3, #0]
}
     214:	46bd      	mov	sp, r7
     216:	b004      	add	sp, #16
     218:	bd80      	pop	{r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00000185 	.word	0x00000185

00000220 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     22e:	687b      	ldr	r3, [r7, #4]
     230:	1c18      	adds	r0, r3, #0
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <rtc_count_reset+0x3c>)
     234:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     236:	46c0      	nop			; (mov r8, r8)
     238:	687b      	ldr	r3, [r7, #4]
     23a:	1c18      	adds	r0, r3, #0
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <rtc_count_reset+0x40>)
     23e:	4798      	blx	r3
     240:	1e03      	subs	r3, r0, #0
     242:	d1f9      	bne.n	238 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29b      	uxth	r3, r3
     24a:	2201      	movs	r2, #1
     24c:	4313      	orrs	r3, r2
     24e:	b29a      	uxth	r2, r3
     250:	68fb      	ldr	r3, [r7, #12]
     252:	801a      	strh	r2, [r3, #0]
}
     254:	46bd      	mov	sp, r7
     256:	b004      	add	sp, #16
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	000001e9 	.word	0x000001e9
     260:	00000185 	.word	0x00000185

00000264 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
     26c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     274:	683b      	ldr	r3, [r7, #0]
     276:	881a      	ldrh	r2, [r3, #0]
     278:	68bb      	ldr	r3, [r7, #8]
     27a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	789b      	ldrb	r3, [r3, #2]
     280:	2b00      	cmp	r3, #0
     282:	d03c      	beq.n	2fe <_rtc_count_set_config+0x9a>
     284:	2b01      	cmp	r3, #1
     286:	d000      	beq.n	28a <_rtc_count_set_config+0x26>
     288:	e070      	b.n	36c <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	881b      	ldrh	r3, [r3, #0]
     28e:	b29a      	uxth	r2, r3
     290:	68bb      	ldr	r3, [r7, #8]
     292:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     294:	683b      	ldr	r3, [r7, #0]
     296:	78db      	ldrb	r3, [r3, #3]
     298:	2b00      	cmp	r3, #0
     29a:	d007      	beq.n	2ac <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	881b      	ldrh	r3, [r3, #0]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	4313      	orrs	r3, r2
     2a6:	b29a      	uxth	r2, r3
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2ac:	230f      	movs	r3, #15
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	2200      	movs	r2, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	e01d      	b.n	2f2 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	1c18      	adds	r0, r3, #0
     2bc:	4b35      	ldr	r3, [pc, #212]	; (394 <_rtc_count_set_config+0x130>)
     2be:	4798      	blx	r3
     2c0:	1e03      	subs	r3, r0, #0
     2c2:	d1f9      	bne.n	2b8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     2c4:	230f      	movs	r3, #15
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	781a      	ldrb	r2, [r3, #0]
     2ca:	683b      	ldr	r3, [r7, #0]
     2cc:	3202      	adds	r2, #2
     2ce:	0092      	lsls	r2, r2, #2
     2d0:	58d2      	ldr	r2, [r2, r3]
     2d2:	6879      	ldr	r1, [r7, #4]
     2d4:	230f      	movs	r3, #15
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	1c08      	adds	r0, r1, #0
     2dc:	1c11      	adds	r1, r2, #0
     2de:	1c1a      	adds	r2, r3, #0
     2e0:	4b2d      	ldr	r3, [pc, #180]	; (398 <_rtc_count_set_config+0x134>)
     2e2:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     2e4:	230f      	movs	r3, #15
     2e6:	18fb      	adds	r3, r7, r3
     2e8:	781a      	ldrb	r2, [r3, #0]
     2ea:	230f      	movs	r3, #15
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	3201      	adds	r2, #1
     2f0:	701a      	strb	r2, [r3, #0]
     2f2:	230f      	movs	r3, #15
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781b      	ldrb	r3, [r3, #0]
     2f8:	2b00      	cmp	r3, #0
     2fa:	d0dc      	beq.n	2b6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     2fc:	e038      	b.n	370 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     2fe:	68bb      	ldr	r3, [r7, #8]
     300:	881b      	ldrh	r3, [r3, #0]
     302:	b29b      	uxth	r3, r3
     304:	2204      	movs	r2, #4
     306:	4313      	orrs	r3, r2
     308:	b29a      	uxth	r2, r3
     30a:	68bb      	ldr	r3, [r7, #8]
     30c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     30e:	683b      	ldr	r3, [r7, #0]
     310:	78db      	ldrb	r3, [r3, #3]
     312:	2b00      	cmp	r3, #0
     314:	d001      	beq.n	31a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     316:	2317      	movs	r3, #23
     318:	e038      	b.n	38c <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     31a:	230e      	movs	r3, #14
     31c:	18fb      	adds	r3, r7, r3
     31e:	2200      	movs	r2, #0
     320:	701a      	strb	r2, [r3, #0]
     322:	e01d      	b.n	360 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     324:	46c0      	nop			; (mov r8, r8)
     326:	687b      	ldr	r3, [r7, #4]
     328:	1c18      	adds	r0, r3, #0
     32a:	4b1a      	ldr	r3, [pc, #104]	; (394 <_rtc_count_set_config+0x130>)
     32c:	4798      	blx	r3
     32e:	1e03      	subs	r3, r0, #0
     330:	d1f9      	bne.n	326 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     332:	230e      	movs	r3, #14
     334:	18fb      	adds	r3, r7, r3
     336:	781a      	ldrb	r2, [r3, #0]
     338:	683b      	ldr	r3, [r7, #0]
     33a:	3202      	adds	r2, #2
     33c:	0092      	lsls	r2, r2, #2
     33e:	58d2      	ldr	r2, [r2, r3]
     340:	6879      	ldr	r1, [r7, #4]
     342:	230e      	movs	r3, #14
     344:	18fb      	adds	r3, r7, r3
     346:	781b      	ldrb	r3, [r3, #0]
     348:	1c08      	adds	r0, r1, #0
     34a:	1c11      	adds	r1, r2, #0
     34c:	1c1a      	adds	r2, r3, #0
     34e:	4b12      	ldr	r3, [pc, #72]	; (398 <_rtc_count_set_config+0x134>)
     350:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     352:	230e      	movs	r3, #14
     354:	18fb      	adds	r3, r7, r3
     356:	781a      	ldrb	r2, [r3, #0]
     358:	230e      	movs	r3, #14
     35a:	18fb      	adds	r3, r7, r3
     35c:	3201      	adds	r2, #1
     35e:	701a      	strb	r2, [r3, #0]
     360:	230e      	movs	r3, #14
     362:	18fb      	adds	r3, r7, r3
     364:	781b      	ldrb	r3, [r3, #0]
     366:	2b01      	cmp	r3, #1
     368:	d9dc      	bls.n	324 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     36a:	e001      	b.n	370 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     36c:	2317      	movs	r3, #23
     36e:	e00d      	b.n	38c <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     370:	683b      	ldr	r3, [r7, #0]
     372:	791b      	ldrb	r3, [r3, #4]
     374:	2b00      	cmp	r3, #0
     376:	d008      	beq.n	38a <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     378:	68bb      	ldr	r3, [r7, #8]
     37a:	885b      	ldrh	r3, [r3, #2]
     37c:	b29b      	uxth	r3, r3
     37e:	2280      	movs	r2, #128	; 0x80
     380:	01d2      	lsls	r2, r2, #7
     382:	4313      	orrs	r3, r2
     384:	b29a      	uxth	r2, r3
     386:	68bb      	ldr	r3, [r7, #8]
     388:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     38a:	2300      	movs	r3, #0
}
     38c:	1c18      	adds	r0, r3, #0
     38e:	46bd      	mov	sp, r7
     390:	b004      	add	sp, #16
     392:	bd80      	pop	{r7, pc}
     394:	00000185 	.word	0x00000185
     398:	000004f5 	.word	0x000004f5

0000039c <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     39c:	b580      	push	{r7, lr}
     39e:	b086      	sub	sp, #24
     3a0:	af00      	add	r7, sp, #0
     3a2:	60f8      	str	r0, [r7, #12]
     3a4:	60b9      	str	r1, [r7, #8]
     3a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3a8:	68fb      	ldr	r3, [r7, #12]
     3aa:	68ba      	ldr	r2, [r7, #8]
     3ac:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     3ae:	2000      	movs	r0, #0
     3b0:	2120      	movs	r1, #32
     3b2:	4b17      	ldr	r3, [pc, #92]	; (410 <rtc_count_init+0x74>)
     3b4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3b6:	2314      	movs	r3, #20
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	1c18      	adds	r0, r3, #0
     3bc:	4b15      	ldr	r3, [pc, #84]	; (414 <rtc_count_init+0x78>)
     3be:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3c0:	2314      	movs	r3, #20
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	2202      	movs	r2, #2
     3c6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3c8:	2314      	movs	r3, #20
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	2004      	movs	r0, #4
     3ce:	1c19      	adds	r1, r3, #0
     3d0:	4b11      	ldr	r3, [pc, #68]	; (418 <rtc_count_init+0x7c>)
     3d2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3d4:	2004      	movs	r0, #4
     3d6:	4b11      	ldr	r3, [pc, #68]	; (41c <rtc_count_init+0x80>)
     3d8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     3da:	68fb      	ldr	r3, [r7, #12]
     3dc:	1c18      	adds	r0, r3, #0
     3de:	4b10      	ldr	r3, [pc, #64]	; (420 <rtc_count_init+0x84>)
     3e0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	789a      	ldrb	r2, [r3, #2]
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	791a      	ldrb	r2, [r3, #4]
     3ee:	68fb      	ldr	r3, [r7, #12]
     3f0:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <rtc_count_init+0x88>)
     3f4:	68fa      	ldr	r2, [r7, #12]
     3f6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     3f8:	68fa      	ldr	r2, [r7, #12]
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	1c10      	adds	r0, r2, #0
     3fe:	1c19      	adds	r1, r3, #0
     400:	4b09      	ldr	r3, [pc, #36]	; (428 <rtc_count_init+0x8c>)
     402:	4798      	blx	r3
     404:	1c03      	adds	r3, r0, #0
}
     406:	1c18      	adds	r0, r3, #0
     408:	46bd      	mov	sp, r7
     40a:	b006      	add	sp, #24
     40c:	bd80      	pop	{r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	00000129 	.word	0x00000129
     414:	00000115 	.word	0x00000115
     418:	00004691 	.word	0x00004691
     41c:	000046d5 	.word	0x000046d5
     420:	00000221 	.word	0x00000221
     424:	2000019c 	.word	0x2000019c
     428:	00000265 	.word	0x00000265

0000042c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     42c:	b580      	push	{r7, lr}
     42e:	b084      	sub	sp, #16
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     436:	687b      	ldr	r3, [r7, #4]
     438:	681b      	ldr	r3, [r3, #0]
     43a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     43c:	46c0      	nop			; (mov r8, r8)
     43e:	687b      	ldr	r3, [r7, #4]
     440:	1c18      	adds	r0, r3, #0
     442:	4b10      	ldr	r3, [pc, #64]	; (484 <rtc_count_set_count+0x58>)
     444:	4798      	blx	r3
     446:	1e03      	subs	r3, r0, #0
     448:	d1f9      	bne.n	43e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	791b      	ldrb	r3, [r3, #4]
     44e:	2b00      	cmp	r3, #0
     450:	d005      	beq.n	45e <rtc_count_set_count+0x32>
     452:	2b01      	cmp	r3, #1
     454:	d10e      	bne.n	474 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     456:	68fb      	ldr	r3, [r7, #12]
     458:	683a      	ldr	r2, [r7, #0]
     45a:	611a      	str	r2, [r3, #16]

			break;
     45c:	e00c      	b.n	478 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     45e:	683b      	ldr	r3, [r7, #0]
     460:	4a09      	ldr	r2, [pc, #36]	; (488 <rtc_count_set_count+0x5c>)
     462:	4293      	cmp	r3, r2
     464:	d901      	bls.n	46a <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     466:	2317      	movs	r3, #23
     468:	e007      	b.n	47a <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	b29a      	uxth	r2, r3
     46e:	68fb      	ldr	r3, [r7, #12]
     470:	821a      	strh	r2, [r3, #16]

			break;
     472:	e001      	b.n	478 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     474:	2317      	movs	r3, #23
     476:	e000      	b.n	47a <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     478:	2300      	movs	r3, #0
}
     47a:	1c18      	adds	r0, r3, #0
     47c:	46bd      	mov	sp, r7
     47e:	b004      	add	sp, #16
     480:	bd80      	pop	{r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	00000185 	.word	0x00000185
     488:	0000ffff 	.word	0x0000ffff

0000048c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     48c:	b580      	push	{r7, lr}
     48e:	b084      	sub	sp, #16
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     494:	687b      	ldr	r3, [r7, #4]
     496:	681b      	ldr	r3, [r3, #0]
     498:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	795b      	ldrb	r3, [r3, #5]
     49e:	2201      	movs	r2, #1
     4a0:	4053      	eors	r3, r2
     4a2:	b2db      	uxtb	r3, r3
     4a4:	2b00      	cmp	r3, #0
     4a6:	d009      	beq.n	4bc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     4a8:	68bb      	ldr	r3, [r7, #8]
     4aa:	4a10      	ldr	r2, [pc, #64]	; (4ec <rtc_count_get_count+0x60>)
     4ac:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	1c18      	adds	r0, r3, #0
     4b4:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <rtc_count_get_count+0x64>)
     4b6:	4798      	blx	r3
     4b8:	1e03      	subs	r3, r0, #0
     4ba:	d1f9      	bne.n	4b0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	791b      	ldrb	r3, [r3, #4]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d005      	beq.n	4d0 <rtc_count_get_count+0x44>
     4c4:	2b01      	cmp	r3, #1
     4c6:	d108      	bne.n	4da <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	691b      	ldr	r3, [r3, #16]
     4cc:	60fb      	str	r3, [r7, #12]

			break;
     4ce:	e007      	b.n	4e0 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     4d0:	68bb      	ldr	r3, [r7, #8]
     4d2:	8a1b      	ldrh	r3, [r3, #16]
     4d4:	b29b      	uxth	r3, r3
     4d6:	60fb      	str	r3, [r7, #12]

			break;
     4d8:	e002      	b.n	4e0 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     4da:	2300      	movs	r3, #0
     4dc:	60fb      	str	r3, [r7, #12]
			break;
     4de:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     4e0:	68fb      	ldr	r3, [r7, #12]
}
     4e2:	1c18      	adds	r0, r3, #0
     4e4:	46bd      	mov	sp, r7
     4e6:	b004      	add	sp, #16
     4e8:	bd80      	pop	{r7, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	ffff8000 	.word	0xffff8000
     4f0:	00000185 	.word	0x00000185

000004f4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b086      	sub	sp, #24
     4f8:	af00      	add	r7, sp, #0
     4fa:	60f8      	str	r0, [r7, #12]
     4fc:	60b9      	str	r1, [r7, #8]
     4fe:	1dfb      	adds	r3, r7, #7
     500:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     502:	68fb      	ldr	r3, [r7, #12]
     504:	681b      	ldr	r3, [r3, #0]
     506:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     508:	46c0      	nop			; (mov r8, r8)
     50a:	68fb      	ldr	r3, [r7, #12]
     50c:	1c18      	adds	r0, r3, #0
     50e:	4b1a      	ldr	r3, [pc, #104]	; (578 <rtc_count_set_compare+0x84>)
     510:	4798      	blx	r3
     512:	1e03      	subs	r3, r0, #0
     514:	d1f9      	bne.n	50a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     516:	68fb      	ldr	r3, [r7, #12]
     518:	791b      	ldrb	r3, [r3, #4]
     51a:	2b00      	cmp	r3, #0
     51c:	d00f      	beq.n	53e <rtc_count_set_compare+0x4a>
     51e:	2b01      	cmp	r3, #1
     520:	d122      	bne.n	568 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     522:	1dfb      	adds	r3, r7, #7
     524:	781b      	ldrb	r3, [r3, #0]
     526:	2b01      	cmp	r3, #1
     528:	d901      	bls.n	52e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     52a:	2317      	movs	r3, #23
     52c:	e01f      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     52e:	1dfb      	adds	r3, r7, #7
     530:	781a      	ldrb	r2, [r3, #0]
     532:	697b      	ldr	r3, [r7, #20]
     534:	3206      	adds	r2, #6
     536:	0092      	lsls	r2, r2, #2
     538:	68b9      	ldr	r1, [r7, #8]
     53a:	50d1      	str	r1, [r2, r3]

			break;
     53c:	e016      	b.n	56c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     53e:	1dfb      	adds	r3, r7, #7
     540:	781b      	ldrb	r3, [r3, #0]
     542:	2b02      	cmp	r3, #2
     544:	d901      	bls.n	54a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     546:	2317      	movs	r3, #23
     548:	e011      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     54a:	68bb      	ldr	r3, [r7, #8]
     54c:	4a0b      	ldr	r2, [pc, #44]	; (57c <rtc_count_set_compare+0x88>)
     54e:	4293      	cmp	r3, r2
     550:	d901      	bls.n	556 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     552:	2317      	movs	r3, #23
     554:	e00b      	b.n	56e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     556:	1dfb      	adds	r3, r7, #7
     558:	781a      	ldrb	r2, [r3, #0]
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	b299      	uxth	r1, r3
     55e:	697b      	ldr	r3, [r7, #20]
     560:	320c      	adds	r2, #12
     562:	0052      	lsls	r2, r2, #1
     564:	52d1      	strh	r1, [r2, r3]

			break;
     566:	e001      	b.n	56c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     568:	231a      	movs	r3, #26
     56a:	e000      	b.n	56e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     56c:	2300      	movs	r3, #0
}
     56e:	1c18      	adds	r0, r3, #0
     570:	46bd      	mov	sp, r7
     572:	b006      	add	sp, #24
     574:	bd80      	pop	{r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000185 	.word	0x00000185
     57c:	0000ffff 	.word	0x0000ffff

00000580 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     580:	b580      	push	{r7, lr}
     582:	b084      	sub	sp, #16
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
     588:	1c0a      	adds	r2, r1, #0
     58a:	1cbb      	adds	r3, r7, #2
     58c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	681b      	ldr	r3, [r3, #0]
     592:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     594:	687b      	ldr	r3, [r7, #4]
     596:	791b      	ldrb	r3, [r3, #4]
     598:	2b00      	cmp	r3, #0
     59a:	d001      	beq.n	5a0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     59c:	2315      	movs	r3, #21
     59e:	e00b      	b.n	5b8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	1c18      	adds	r0, r3, #0
     5a6:	4b06      	ldr	r3, [pc, #24]	; (5c0 <rtc_count_set_period+0x40>)
     5a8:	4798      	blx	r3
     5aa:	1e03      	subs	r3, r0, #0
     5ac:	d1f9      	bne.n	5a2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	1cba      	adds	r2, r7, #2
     5b2:	8812      	ldrh	r2, [r2, #0]
     5b4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     5b6:	2300      	movs	r3, #0
}
     5b8:	1c18      	adds	r0, r3, #0
     5ba:	46bd      	mov	sp, r7
     5bc:	b004      	add	sp, #16
     5be:	bd80      	pop	{r7, pc}
     5c0:	00000185 	.word	0x00000185

000005c4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	1c02      	adds	r2, r0, #0
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     5d0:	230f      	movs	r3, #15
     5d2:	18fb      	adds	r3, r7, r3
     5d4:	1dfa      	adds	r2, r7, #7
     5d6:	7812      	ldrb	r2, [r2, #0]
     5d8:	09d2      	lsrs	r2, r2, #7
     5da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     5dc:	230e      	movs	r3, #14
     5de:	18fb      	adds	r3, r7, r3
     5e0:	1dfa      	adds	r2, r7, #7
     5e2:	7812      	ldrb	r2, [r2, #0]
     5e4:	0952      	lsrs	r2, r2, #5
     5e6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     5e8:	4b0d      	ldr	r3, [pc, #52]	; (620 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     5ea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     5ec:	230f      	movs	r3, #15
     5ee:	18fb      	adds	r3, r7, r3
     5f0:	781b      	ldrb	r3, [r3, #0]
     5f2:	2b00      	cmp	r3, #0
     5f4:	d10f      	bne.n	616 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     5f6:	230f      	movs	r3, #15
     5f8:	18fb      	adds	r3, r7, r3
     5fa:	781b      	ldrb	r3, [r3, #0]
     5fc:	009b      	lsls	r3, r3, #2
     5fe:	2210      	movs	r2, #16
     600:	4694      	mov	ip, r2
     602:	44bc      	add	ip, r7
     604:	4463      	add	r3, ip
     606:	3b08      	subs	r3, #8
     608:	681a      	ldr	r2, [r3, #0]
     60a:	230e      	movs	r3, #14
     60c:	18fb      	adds	r3, r7, r3
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	01db      	lsls	r3, r3, #7
     612:	18d3      	adds	r3, r2, r3
     614:	e000      	b.n	618 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     616:	2300      	movs	r3, #0
	}
}
     618:	1c18      	adds	r0, r3, #0
     61a:	46bd      	mov	sp, r7
     61c:	b004      	add	sp, #16
     61e:	bd80      	pop	{r7, pc}
     620:	41004400 	.word	0x41004400

00000624 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	1c02      	adds	r2, r0, #0
     62c:	1dfb      	adds	r3, r7, #7
     62e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     630:	1dfb      	adds	r3, r7, #7
     632:	781b      	ldrb	r3, [r3, #0]
     634:	1c18      	adds	r0, r3, #0
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <port_get_group_from_gpio_pin+0x20>)
     638:	4798      	blx	r3
     63a:	1c03      	adds	r3, r0, #0
}
     63c:	1c18      	adds	r0, r3, #0
     63e:	46bd      	mov	sp, r7
     640:	b002      	add	sp, #8
     642:	bd80      	pop	{r7, pc}
     644:	000005c5 	.word	0x000005c5

00000648 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     656:	687b      	ldr	r3, [r7, #4]
     658:	2201      	movs	r2, #1
     65a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	2200      	movs	r2, #0
     660:	709a      	strb	r2, [r3, #2]
}
     662:	46bd      	mov	sp, r7
     664:	b002      	add	sp, #8
     666:	bd80      	pop	{r7, pc}

00000668 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     668:	b580      	push	{r7, lr}
     66a:	b084      	sub	sp, #16
     66c:	af00      	add	r7, sp, #0
     66e:	1c02      	adds	r2, r0, #0
     670:	1dfb      	adds	r3, r7, #7
     672:	701a      	strb	r2, [r3, #0]
     674:	1dbb      	adds	r3, r7, #6
     676:	1c0a      	adds	r2, r1, #0
     678:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     67a:	1dfb      	adds	r3, r7, #7
     67c:	781b      	ldrb	r3, [r3, #0]
     67e:	1c18      	adds	r0, r3, #0
     680:	4b0c      	ldr	r3, [pc, #48]	; (6b4 <port_pin_set_output_level+0x4c>)
     682:	4798      	blx	r3
     684:	1c03      	adds	r3, r0, #0
     686:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     688:	1dfb      	adds	r3, r7, #7
     68a:	781b      	ldrb	r3, [r3, #0]
     68c:	221f      	movs	r2, #31
     68e:	4013      	ands	r3, r2
     690:	2201      	movs	r2, #1
     692:	409a      	lsls	r2, r3
     694:	1c13      	adds	r3, r2, #0
     696:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     698:	1dbb      	adds	r3, r7, #6
     69a:	781b      	ldrb	r3, [r3, #0]
     69c:	2b00      	cmp	r3, #0
     69e:	d003      	beq.n	6a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     6a0:	68fb      	ldr	r3, [r7, #12]
     6a2:	68ba      	ldr	r2, [r7, #8]
     6a4:	619a      	str	r2, [r3, #24]
     6a6:	e002      	b.n	6ae <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     6a8:	68fb      	ldr	r3, [r7, #12]
     6aa:	68ba      	ldr	r2, [r7, #8]
     6ac:	615a      	str	r2, [r3, #20]
	}
}
     6ae:	46bd      	mov	sp, r7
     6b0:	b004      	add	sp, #16
     6b2:	bd80      	pop	{r7, pc}
     6b4:	00000625 	.word	0x00000625

000006b8 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
     6b8:	b580      	push	{r7, lr}
     6ba:	b084      	sub	sp, #16
     6bc:	af00      	add	r7, sp, #0
     6be:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	22a0      	movs	r2, #160	; 0xa0
     6c4:	0112      	lsls	r2, r2, #4
     6c6:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	2201      	movs	r2, #1
     6cc:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	2200      	movs	r2, #0
     6d2:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2200      	movs	r2, #0
     6d8:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     6da:	230f      	movs	r3, #15
     6dc:	18fb      	adds	r3, r7, r3
     6de:	2200      	movs	r2, #0
     6e0:	701a      	strb	r2, [r3, #0]
     6e2:	e00e      	b.n	702 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
     6e4:	230f      	movs	r3, #15
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	781a      	ldrb	r2, [r3, #0]
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	3202      	adds	r2, #2
     6ee:	0092      	lsls	r2, r2, #2
     6f0:	2100      	movs	r1, #0
     6f2:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML22)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     6f4:	230f      	movs	r3, #15
     6f6:	18fb      	adds	r3, r7, r3
     6f8:	781a      	ldrb	r2, [r3, #0]
     6fa:	230f      	movs	r3, #15
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	3201      	adds	r2, #1
     700:	701a      	strb	r2, [r3, #0]
     702:	230f      	movs	r3, #15
     704:	18fb      	adds	r3, r7, r3
     706:	781b      	ldrb	r3, [r3, #0]
     708:	2b01      	cmp	r3, #1
     70a:	d9eb      	bls.n	6e4 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
     70c:	46bd      	mov	sp, r7
     70e:	b004      	add	sp, #16
     710:	bd80      	pop	{r7, pc}
     712:	46c0      	nop			; (mov r8, r8)

00000714 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     714:	b580      	push	{r7, lr}
     716:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <system_interrupt_enable_global+0x14>)
     71a:	2201      	movs	r2, #1
     71c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     71e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     722:	b662      	cpsie	i
}
     724:	46bd      	mov	sp, r7
     726:	bd80      	pop	{r7, pc}
     728:	200000d8 	.word	0x200000d8

0000072c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     72c:	b580      	push	{r7, lr}
     72e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     730:	b672      	cpsid	i
     732:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     736:	4b02      	ldr	r3, [pc, #8]	; (740 <system_interrupt_disable_global+0x14>)
     738:	2200      	movs	r2, #0
     73a:	701a      	strb	r2, [r3, #0]
}
     73c:	46bd      	mov	sp, r7
     73e:	bd80      	pop	{r7, pc}
     740:	200000d8 	.word	0x200000d8

00000744 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     744:	b580      	push	{r7, lr}
     746:	b084      	sub	sp, #16
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	681b      	ldr	r3, [r3, #0]
     750:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     752:	68fb      	ldr	r3, [r7, #12]
     754:	69db      	ldr	r3, [r3, #28]
     756:	1e5a      	subs	r2, r3, #1
     758:	4193      	sbcs	r3, r2
     75a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     75c:	1c18      	adds	r0, r3, #0
     75e:	46bd      	mov	sp, r7
     760:	b004      	add	sp, #16
     762:	bd80      	pop	{r7, pc}

00000764 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	2201      	movs	r2, #1
     770:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     772:	687b      	ldr	r3, [r7, #4]
     774:	2200      	movs	r2, #0
     776:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     778:	687b      	ldr	r3, [r7, #4]
     77a:	2200      	movs	r2, #0
     77c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     77e:	687b      	ldr	r3, [r7, #4]
     780:	22c0      	movs	r2, #192	; 0xc0
     782:	0392      	lsls	r2, r2, #14
     784:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     786:	687b      	ldr	r3, [r7, #4]
     788:	2200      	movs	r2, #0
     78a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	2200      	movs	r2, #0
     790:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     792:	687b      	ldr	r3, [r7, #4]
     794:	2201      	movs	r2, #1
     796:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     798:	687b      	ldr	r3, [r7, #4]
     79a:	2201      	movs	r2, #1
     79c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	2200      	movs	r2, #0
     7a2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	2224      	movs	r2, #36	; 0x24
     7a8:	2100      	movs	r1, #0
     7aa:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	3318      	adds	r3, #24
     7b0:	1c18      	adds	r0, r3, #0
     7b2:	2100      	movs	r1, #0
     7b4:	220c      	movs	r2, #12
     7b6:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <spi_get_config_defaults+0x7c>)
     7b8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	4a09      	ldr	r2, [pc, #36]	; (7e4 <spi_get_config_defaults+0x80>)
     7be:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	2200      	movs	r2, #0
     7c4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	2200      	movs	r2, #0
     7ca:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	2200      	movs	r2, #0
     7d0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	2200      	movs	r2, #0
     7d6:	635a      	str	r2, [r3, #52]	; 0x34

};
     7d8:	46bd      	mov	sp, r7
     7da:	b002      	add	sp, #8
     7dc:	bd80      	pop	{r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	000082ef 	.word	0x000082ef
     7e4:	000186a0 	.word	0x000186a0

000007e8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	220a      	movs	r2, #10
     7f4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	2200      	movs	r2, #0
     7fa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	2200      	movs	r2, #0
     800:	709a      	strb	r2, [r3, #2]
}
     802:	46bd      	mov	sp, r7
     804:	b002      	add	sp, #8
     806:	bd80      	pop	{r7, pc}

00000808 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     808:	b580      	push	{r7, lr}
     80a:	b084      	sub	sp, #16
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
     810:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     812:	683b      	ldr	r3, [r7, #0]
     814:	781a      	ldrb	r2, [r3, #0]
     816:	687b      	ldr	r3, [r7, #4]
     818:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	785a      	ldrb	r2, [r3, #1]
     81e:	687b      	ldr	r3, [r7, #4]
     820:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     822:	683b      	ldr	r3, [r7, #0]
     824:	789a      	ldrb	r2, [r3, #2]
     826:	687b      	ldr	r3, [r7, #4]
     828:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     82a:	230c      	movs	r3, #12
     82c:	18fb      	adds	r3, r7, r3
     82e:	1c18      	adds	r0, r3, #0
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <spi_attach_slave+0x58>)
     832:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     834:	230c      	movs	r3, #12
     836:	18fb      	adds	r3, r7, r3
     838:	2201      	movs	r2, #1
     83a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	781a      	ldrb	r2, [r3, #0]
     840:	230c      	movs	r3, #12
     842:	18fb      	adds	r3, r7, r3
     844:	1c10      	adds	r0, r2, #0
     846:	1c19      	adds	r1, r3, #0
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <spi_attach_slave+0x5c>)
     84a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	1c18      	adds	r0, r3, #0
     852:	2101      	movs	r1, #1
     854:	4b04      	ldr	r3, [pc, #16]	; (868 <spi_attach_slave+0x60>)
     856:	4798      	blx	r3
}
     858:	46bd      	mov	sp, r7
     85a:	b004      	add	sp, #16
     85c:	bd80      	pop	{r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000649 	.word	0x00000649
     864:	00002e1d 	.word	0x00002e1d
     868:	00000669 	.word	0x00000669

0000086c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     874:	687b      	ldr	r3, [r7, #4]
     876:	681b      	ldr	r3, [r3, #0]
     878:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	1c18      	adds	r0, r3, #0
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <spi_enable+0x30>)
     882:	4798      	blx	r3
     884:	1e03      	subs	r3, r0, #0
     886:	d1f9      	bne.n	87c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     888:	68fb      	ldr	r3, [r7, #12]
     88a:	681b      	ldr	r3, [r3, #0]
     88c:	2202      	movs	r2, #2
     88e:	431a      	orrs	r2, r3
     890:	68fb      	ldr	r3, [r7, #12]
     892:	601a      	str	r2, [r3, #0]
}
     894:	46bd      	mov	sp, r7
     896:	b004      	add	sp, #16
     898:	bd80      	pop	{r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	00000745 	.word	0x00000745

000008a0 <configure_port_pins>:
#include "RFM69registers.h"


// Configure the LED selection port as output
void configure_port_pins(void)
{
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
     8a6:	1d3b      	adds	r3, r7, #4
     8a8:	1c18      	adds	r0, r3, #0
     8aa:	4b06      	ldr	r3, [pc, #24]	; (8c4 <configure_port_pins+0x24>)
     8ac:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
     8ae:	1d3b      	adds	r3, r7, #4
     8b0:	2200      	movs	r2, #0
     8b2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
     8b4:	1d3b      	adds	r3, r7, #4
     8b6:	2003      	movs	r0, #3
     8b8:	1c19      	adds	r1, r3, #0
     8ba:	4b03      	ldr	r3, [pc, #12]	; (8c8 <configure_port_pins+0x28>)
     8bc:	4798      	blx	r3
}
     8be:	46bd      	mov	sp, r7
     8c0:	b002      	add	sp, #8
     8c2:	bd80      	pop	{r7, pc}
     8c4:	00000649 	.word	0x00000649
     8c8:	00002e1d 	.word	0x00002e1d

000008cc <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     8d2:	1d3b      	adds	r3, r7, #4
     8d4:	1c18      	adds	r0, r3, #0
     8d6:	4b0b      	ldr	r3, [pc, #44]	; (904 <configure_extint_channel+0x38>)
     8d8:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
     8da:	1d3b      	adds	r3, r7, #4
     8dc:	2203      	movs	r2, #3
     8de:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
     8e0:	1d3b      	adds	r3, r7, #4
     8e2:	2200      	movs	r2, #0
     8e4:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     8e6:	1d3b      	adds	r3, r7, #4
     8e8:	2201      	movs	r2, #1
     8ea:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     8ec:	1d3b      	adds	r3, r7, #4
     8ee:	2201      	movs	r2, #1
     8f0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
     8f2:	1d3b      	adds	r3, r7, #4
     8f4:	2003      	movs	r0, #3
     8f6:	1c19      	adds	r1, r3, #0
     8f8:	4b03      	ldr	r3, [pc, #12]	; (908 <configure_extint_channel+0x3c>)
     8fa:	4798      	blx	r3
}
     8fc:	46bd      	mov	sp, r7
     8fe:	b004      	add	sp, #16
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	00002cc5 	.word	0x00002cc5
     908:	00002cf9 	.word	0x00002cf9

0000090c <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
     90c:	b580      	push	{r7, lr}
     90e:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
     910:	4b05      	ldr	r3, [pc, #20]	; (928 <configure_extint_callbacks+0x1c>)
     912:	1c18      	adds	r0, r3, #0
     914:	2103      	movs	r1, #3
     916:	2200      	movs	r2, #0
     918:	4b04      	ldr	r3, [pc, #16]	; (92c <configure_extint_callbacks+0x20>)
     91a:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
     91c:	2003      	movs	r0, #3
     91e:	2100      	movs	r1, #0
     920:	4b03      	ldr	r3, [pc, #12]	; (930 <configure_extint_callbacks+0x24>)
     922:	4798      	blx	r3
}
     924:	46bd      	mov	sp, r7
     926:	bd80      	pop	{r7, pc}
     928:	000011ed 	.word	0x000011ed
     92c:	000028cd 	.word	0x000028cd
     930:	00002931 	.word	0x00002931

00000934 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
     934:	b580      	push	{r7, lr}
     936:	b090      	sub	sp, #64	; 0x40
     938:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
     93a:	1d3b      	adds	r3, r7, #4
     93c:	1c18      	adds	r0, r3, #0
     93e:	4b22      	ldr	r3, [pc, #136]	; (9c8 <configure_RFM69_spi+0x94>)
     940:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
     942:	1d3b      	adds	r3, r7, #4
     944:	2212      	movs	r2, #18
     946:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
     948:	4a20      	ldr	r2, [pc, #128]	; (9cc <configure_RFM69_spi+0x98>)
     94a:	1d3b      	adds	r3, r7, #4
     94c:	1c10      	adds	r0, r2, #0
     94e:	1c19      	adds	r1, r3, #0
     950:	4b1f      	ldr	r3, [pc, #124]	; (9d0 <configure_RFM69_spi+0x9c>)
     952:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
     954:	2308      	movs	r3, #8
     956:	18fb      	adds	r3, r7, r3
     958:	1c18      	adds	r0, r3, #0
     95a:	4b1e      	ldr	r3, [pc, #120]	; (9d4 <configure_RFM69_spi+0xa0>)
     95c:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
     95e:	2308      	movs	r3, #8
     960:	18fb      	adds	r3, r7, r3
     962:	22c0      	movs	r2, #192	; 0xc0
     964:	0392      	lsls	r2, r2, #14
     966:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	4a1a      	ldr	r2, [pc, #104]	; (9d8 <configure_RFM69_spi+0xa4>)
     96e:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
     970:	2308      	movs	r3, #8
     972:	18fb      	adds	r3, r7, r3
     974:	4a19      	ldr	r2, [pc, #100]	; (9dc <configure_RFM69_spi+0xa8>)
     976:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
     978:	2308      	movs	r3, #8
     97a:	18fb      	adds	r3, r7, r3
     97c:	2201      	movs	r2, #1
     97e:	4252      	negs	r2, r2
     980:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
     982:	2308      	movs	r3, #8
     984:	18fb      	adds	r3, r7, r3
     986:	4a16      	ldr	r2, [pc, #88]	; (9e0 <configure_RFM69_spi+0xac>)
     988:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
     98a:	2308      	movs	r3, #8
     98c:	18fb      	adds	r3, r7, r3
     98e:	2200      	movs	r2, #0
     990:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
     992:	2308      	movs	r3, #8
     994:	18fb      	adds	r3, r7, r3
     996:	2200      	movs	r2, #0
     998:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
     99a:	4a12      	ldr	r2, [pc, #72]	; (9e4 <configure_RFM69_spi+0xb0>)
     99c:	4912      	ldr	r1, [pc, #72]	; (9e8 <configure_RFM69_spi+0xb4>)
     99e:	2308      	movs	r3, #8
     9a0:	18fb      	adds	r3, r7, r3
     9a2:	1c10      	adds	r0, r2, #0
     9a4:	1c1a      	adds	r2, r3, #0
     9a6:	4b11      	ldr	r3, [pc, #68]	; (9ec <configure_RFM69_spi+0xb8>)
     9a8:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
     9aa:	4b0e      	ldr	r3, [pc, #56]	; (9e4 <configure_RFM69_spi+0xb0>)
     9ac:	1c18      	adds	r0, r3, #0
     9ae:	4b10      	ldr	r3, [pc, #64]	; (9f0 <configure_RFM69_spi+0xbc>)
     9b0:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
     9b2:	4a0c      	ldr	r2, [pc, #48]	; (9e4 <configure_RFM69_spi+0xb0>)
     9b4:	4b05      	ldr	r3, [pc, #20]	; (9cc <configure_RFM69_spi+0x98>)
     9b6:	1c10      	adds	r0, r2, #0
     9b8:	1c19      	adds	r1, r3, #0
     9ba:	2200      	movs	r2, #0
     9bc:	4b0d      	ldr	r3, [pc, #52]	; (9f4 <configure_RFM69_spi+0xc0>)
     9be:	4798      	blx	r3
}
     9c0:	46bd      	mov	sp, r7
     9c2:	b010      	add	sp, #64	; 0x40
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000007e9 	.word	0x000007e9
     9cc:	20000250 	.word	0x20000250
     9d0:	00000809 	.word	0x00000809
     9d4:	00000765 	.word	0x00000765
     9d8:	00100002 	.word	0x00100002
     9dc:	00110002 	.word	0x00110002
     9e0:	00130002 	.word	0x00130002
     9e4:	20000240 	.word	0x20000240
     9e8:	42000c00 	.word	0x42000c00
     9ec:	00003959 	.word	0x00003959
     9f0:	0000086d 	.word	0x0000086d
     9f4:	00003b99 	.word	0x00003b99

000009f8 <configure_rtc_count>:
///////////////////////////////////////////////////////////////////////////////
struct rtc_module rtc_instance;

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b084      	sub	sp, #16
     9fc:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
     9fe:	1c3b      	adds	r3, r7, #0
     a00:	1c18      	adds	r0, r3, #0
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <configure_rtc_count+0x48>)
     a04:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
     a06:	1c3b      	adds	r3, r7, #0
     a08:	2200      	movs	r2, #0
     a0a:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
     a0c:	1c3b      	adds	r3, r7, #0
     a0e:	2200      	movs	r2, #0
     a10:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
     a12:	1c3b      	adds	r3, r7, #0
     a14:	2201      	movs	r2, #1
     a16:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
     a18:	4a0a      	ldr	r2, [pc, #40]	; (a44 <configure_rtc_count+0x4c>)
     a1a:	490b      	ldr	r1, [pc, #44]	; (a48 <configure_rtc_count+0x50>)
     a1c:	1c3b      	adds	r3, r7, #0
     a1e:	1c10      	adds	r0, r2, #0
     a20:	1c1a      	adds	r2, r3, #0
     a22:	4b0a      	ldr	r3, [pc, #40]	; (a4c <configure_rtc_count+0x54>)
     a24:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
     a26:	4b07      	ldr	r3, [pc, #28]	; (a44 <configure_rtc_count+0x4c>)
     a28:	1c18      	adds	r0, r3, #0
     a2a:	4b09      	ldr	r3, [pc, #36]	; (a50 <configure_rtc_count+0x58>)
     a2c:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
     a2e:	4b05      	ldr	r3, [pc, #20]	; (a44 <configure_rtc_count+0x4c>)
     a30:	4a08      	ldr	r2, [pc, #32]	; (a54 <configure_rtc_count+0x5c>)
     a32:	1c18      	adds	r0, r3, #0
     a34:	1c11      	adds	r1, r2, #0
     a36:	4b08      	ldr	r3, [pc, #32]	; (a58 <configure_rtc_count+0x60>)
     a38:	4798      	blx	r3
}
     a3a:	46bd      	mov	sp, r7
     a3c:	b004      	add	sp, #16
     a3e:	bd80      	pop	{r7, pc}
     a40:	000006b9 	.word	0x000006b9
     a44:	200001a4 	.word	0x200001a4
     a48:	40001400 	.word	0x40001400
     a4c:	0000039d 	.word	0x0000039d
     a50:	000001b1 	.word	0x000001b1
     a54:	00002710 	.word	0x00002710
     a58:	00000581 	.word	0x00000581

00000a5c <reset_millis>:

void reset_millis(void)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
     a60:	4b05      	ldr	r3, [pc, #20]	; (a78 <reset_millis+0x1c>)
     a62:	1c18      	adds	r0, r3, #0
     a64:	2100      	movs	r1, #0
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <reset_millis+0x20>)
     a68:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <reset_millis+0x1c>)
     a6c:	1c18      	adds	r0, r3, #0
     a6e:	4b04      	ldr	r3, [pc, #16]	; (a80 <reset_millis+0x24>)
     a70:	4798      	blx	r3
}
     a72:	46bd      	mov	sp, r7
     a74:	bd80      	pop	{r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	200001a4 	.word	0x200001a4
     a7c:	0000042d 	.word	0x0000042d
     a80:	000001b1 	.word	0x000001b1

00000a84 <millis>:

uint32_t millis(void)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
     a8a:	2300      	movs	r3, #0
     a8c:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <millis+0x20>)
     a90:	1c18      	adds	r0, r3, #0
     a92:	4b05      	ldr	r3, [pc, #20]	; (aa8 <millis+0x24>)
     a94:	4798      	blx	r3
     a96:	1c03      	adds	r3, r0, #0
     a98:	607b      	str	r3, [r7, #4]
	return milli;
     a9a:	687b      	ldr	r3, [r7, #4]
}
     a9c:	1c18      	adds	r0, r3, #0
     a9e:	46bd      	mov	sp, r7
     aa0:	b002      	add	sp, #8
     aa2:	bd80      	pop	{r7, pc}
     aa4:	200001a4 	.word	0x200001a4
     aa8:	0000048d 	.word	0x0000048d

00000aac <RFM_setHighPower>:
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
	setMode(RF69_MODE_STANDBY);
}

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	1c02      	adds	r2, r0, #0
     ab4:	1dfb      	adds	r3, r7, #7
     ab6:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
     ab8:	4b1a      	ldr	r3, [pc, #104]	; (b24 <RFM_setHighPower+0x78>)
     aba:	1dfa      	adds	r2, r7, #7
     abc:	7812      	ldrb	r2, [r2, #0]
     abe:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
     ac0:	4b18      	ldr	r3, [pc, #96]	; (b24 <RFM_setHighPower+0x78>)
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	b2db      	uxtb	r3, r3
     ac6:	2b00      	cmp	r3, #0
     ac8:	d001      	beq.n	ace <RFM_setHighPower+0x22>
     aca:	230f      	movs	r3, #15
     acc:	e000      	b.n	ad0 <RFM_setHighPower+0x24>
     ace:	231a      	movs	r3, #26
     ad0:	2013      	movs	r0, #19
     ad2:	1c19      	adds	r1, r3, #0
     ad4:	4b14      	ldr	r3, [pc, #80]	; (b28 <RFM_setHighPower+0x7c>)
     ad6:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
     ad8:	4b12      	ldr	r3, [pc, #72]	; (b24 <RFM_setHighPower+0x78>)
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	b2db      	uxtb	r3, r3
     ade:	2b00      	cmp	r3, #0
     ae0:	d012      	beq.n	b08 <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
     ae2:	2011      	movs	r0, #17
     ae4:	4b11      	ldr	r3, [pc, #68]	; (b2c <RFM_setHighPower+0x80>)
     ae6:	4798      	blx	r3
     ae8:	1c03      	adds	r3, r0, #0
     aea:	b2db      	uxtb	r3, r3
     aec:	1c1a      	adds	r2, r3, #0
     aee:	231f      	movs	r3, #31
     af0:	4013      	ands	r3, r2
     af2:	b2db      	uxtb	r3, r3
     af4:	1c1a      	adds	r2, r3, #0
     af6:	2360      	movs	r3, #96	; 0x60
     af8:	4313      	orrs	r3, r2
     afa:	b2db      	uxtb	r3, r3
     afc:	b2db      	uxtb	r3, r3
     afe:	2011      	movs	r0, #17
     b00:	1c19      	adds	r1, r3, #0
     b02:	4b09      	ldr	r3, [pc, #36]	; (b28 <RFM_setHighPower+0x7c>)
     b04:	4798      	blx	r3
     b06:	e009      	b.n	b1c <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
     b08:	4b09      	ldr	r3, [pc, #36]	; (b30 <RFM_setHighPower+0x84>)
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	2280      	movs	r2, #128	; 0x80
     b0e:	4252      	negs	r2, r2
     b10:	4313      	orrs	r3, r2
     b12:	b2db      	uxtb	r3, r3
     b14:	2011      	movs	r0, #17
     b16:	1c19      	adds	r1, r3, #0
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <RFM_setHighPower+0x7c>)
     b1a:	4798      	blx	r3
}
     b1c:	46bd      	mov	sp, r7
     b1e:	b002      	add	sp, #8
     b20:	bd80      	pop	{r7, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	2000023c 	.word	0x2000023c
     b28:	00001409 	.word	0x00001409
     b2c:	0000139d 	.word	0x0000139d
     b30:	200001ac 	.word	0x200001ac

00000b34 <RFM69>:

void RFM69()
{
     b34:	b580      	push	{r7, lr}
     b36:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
     b38:	4b06      	ldr	r3, [pc, #24]	; (b54 <RFM69+0x20>)
     b3a:	2201      	movs	r2, #1
     b3c:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
     b3e:	4b06      	ldr	r3, [pc, #24]	; (b58 <RFM69+0x24>)
     b40:	2200      	movs	r2, #0
     b42:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
     b44:	4b05      	ldr	r3, [pc, #20]	; (b5c <RFM69+0x28>)
     b46:	221f      	movs	r2, #31
     b48:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <RFM69+0x2c>)
     b4c:	2200      	movs	r2, #0
     b4e:	701a      	strb	r2, [r3, #0]
}
     b50:	46bd      	mov	sp, r7
     b52:	bd80      	pop	{r7, pc}
     b54:	2000023a 	.word	0x2000023a
     b58:	200001b4 	.word	0x200001b4
     b5c:	200001ac 	.word	0x200001ac
     b60:	2000023c 	.word	0x2000023c

00000b64 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
     b64:	b590      	push	{r4, r7, lr}
     b66:	b091      	sub	sp, #68	; 0x44
     b68:	af00      	add	r7, sp, #0
     b6a:	1c04      	adds	r4, r0, #0
     b6c:	1c08      	adds	r0, r1, #0
     b6e:	1c11      	adds	r1, r2, #0
     b70:	1dfb      	adds	r3, r7, #7
     b72:	1c22      	adds	r2, r4, #0
     b74:	701a      	strb	r2, [r3, #0]
     b76:	1dbb      	adds	r3, r7, #6
     b78:	1c02      	adds	r2, r0, #0
     b7a:	701a      	strb	r2, [r3, #0]
     b7c:	1d7b      	adds	r3, r7, #5
     b7e:	1c0a      	adds	r2, r1, #0
     b80:	701a      	strb	r2, [r3, #0]
  RFM69();
     b82:	4bc2      	ldr	r3, [pc, #776]	; (e8c <RFM_initialize+0x328>)
     b84:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
     b86:	2310      	movs	r3, #16
     b88:	18fb      	adds	r3, r7, r3
     b8a:	2201      	movs	r2, #1
     b8c:	701a      	strb	r2, [r3, #0]
     b8e:	2310      	movs	r3, #16
     b90:	18fb      	adds	r3, r7, r3
     b92:	2204      	movs	r2, #4
     b94:	705a      	strb	r2, [r3, #1]
     b96:	2310      	movs	r3, #16
     b98:	18fb      	adds	r3, r7, r3
     b9a:	2202      	movs	r2, #2
     b9c:	709a      	strb	r2, [r3, #2]
     b9e:	2310      	movs	r3, #16
     ba0:	18fb      	adds	r3, r7, r3
     ba2:	2200      	movs	r2, #0
     ba4:	70da      	strb	r2, [r3, #3]
     ba6:	2310      	movs	r3, #16
     ba8:	18fb      	adds	r3, r7, r3
     baa:	2203      	movs	r2, #3
     bac:	711a      	strb	r2, [r3, #4]
     bae:	2310      	movs	r3, #16
     bb0:	18fb      	adds	r3, r7, r3
     bb2:	2202      	movs	r2, #2
     bb4:	715a      	strb	r2, [r3, #5]
     bb6:	2310      	movs	r3, #16
     bb8:	18fb      	adds	r3, r7, r3
     bba:	2204      	movs	r2, #4
     bbc:	719a      	strb	r2, [r3, #6]
     bbe:	2310      	movs	r3, #16
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2240      	movs	r2, #64	; 0x40
     bc4:	71da      	strb	r2, [r3, #7]
     bc6:	2310      	movs	r3, #16
     bc8:	18fb      	adds	r3, r7, r3
     bca:	2205      	movs	r2, #5
     bcc:	721a      	strb	r2, [r3, #8]
     bce:	2310      	movs	r3, #16
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	2203      	movs	r2, #3
     bd4:	725a      	strb	r2, [r3, #9]
     bd6:	2310      	movs	r3, #16
     bd8:	18fb      	adds	r3, r7, r3
     bda:	2206      	movs	r2, #6
     bdc:	729a      	strb	r2, [r3, #10]
     bde:	2310      	movs	r3, #16
     be0:	18fb      	adds	r3, r7, r3
     be2:	2233      	movs	r2, #51	; 0x33
     be4:	72da      	strb	r2, [r3, #11]
     be6:	2310      	movs	r3, #16
     be8:	18fb      	adds	r3, r7, r3
     bea:	2207      	movs	r2, #7
     bec:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
     bee:	1dfb      	adds	r3, r7, #7
     bf0:	781b      	ldrb	r3, [r3, #0]
     bf2:	2b1f      	cmp	r3, #31
     bf4:	d00d      	beq.n	c12 <RFM_initialize+0xae>
     bf6:	1dfb      	adds	r3, r7, #7
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	2b2b      	cmp	r3, #43	; 0x2b
     bfc:	d007      	beq.n	c0e <RFM_initialize+0xaa>
     bfe:	1dfb      	adds	r3, r7, #7
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b56      	cmp	r3, #86	; 0x56
     c04:	d101      	bne.n	c0a <RFM_initialize+0xa6>
     c06:	23d9      	movs	r3, #217	; 0xd9
     c08:	e004      	b.n	c14 <RFM_initialize+0xb0>
     c0a:	23e4      	movs	r3, #228	; 0xe4
     c0c:	e002      	b.n	c14 <RFM_initialize+0xb0>
     c0e:	236c      	movs	r3, #108	; 0x6c
     c10:	e000      	b.n	c14 <RFM_initialize+0xb0>
     c12:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
     c14:	2210      	movs	r2, #16
     c16:	18ba      	adds	r2, r7, r2
     c18:	7353      	strb	r3, [r2, #13]
     c1a:	2310      	movs	r3, #16
     c1c:	18fb      	adds	r3, r7, r3
     c1e:	2208      	movs	r2, #8
     c20:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
     c22:	1dfb      	adds	r3, r7, #7
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	2b1f      	cmp	r3, #31
     c28:	d00d      	beq.n	c46 <RFM_initialize+0xe2>
     c2a:	1dfb      	adds	r3, r7, #7
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b2b      	cmp	r3, #43	; 0x2b
     c30:	d007      	beq.n	c42 <RFM_initialize+0xde>
     c32:	1dfb      	adds	r3, r7, #7
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b56      	cmp	r3, #86	; 0x56
     c38:	d101      	bne.n	c3e <RFM_initialize+0xda>
     c3a:	2300      	movs	r3, #0
     c3c:	e004      	b.n	c48 <RFM_initialize+0xe4>
     c3e:	23c0      	movs	r3, #192	; 0xc0
     c40:	e002      	b.n	c48 <RFM_initialize+0xe4>
     c42:	2340      	movs	r3, #64	; 0x40
     c44:	e000      	b.n	c48 <RFM_initialize+0xe4>
     c46:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
     c48:	2210      	movs	r2, #16
     c4a:	18ba      	adds	r2, r7, r2
     c4c:	73d3      	strb	r3, [r2, #15]
     c4e:	2310      	movs	r3, #16
     c50:	18fb      	adds	r3, r7, r3
     c52:	2209      	movs	r2, #9
     c54:	741a      	strb	r2, [r3, #16]
     c56:	2310      	movs	r3, #16
     c58:	18fb      	adds	r3, r7, r3
     c5a:	2200      	movs	r2, #0
     c5c:	745a      	strb	r2, [r3, #17]
     c5e:	2310      	movs	r3, #16
     c60:	18fb      	adds	r3, r7, r3
     c62:	2219      	movs	r2, #25
     c64:	749a      	strb	r2, [r3, #18]
     c66:	2310      	movs	r3, #16
     c68:	18fb      	adds	r3, r7, r3
     c6a:	2242      	movs	r2, #66	; 0x42
     c6c:	74da      	strb	r2, [r3, #19]
     c6e:	2310      	movs	r3, #16
     c70:	18fb      	adds	r3, r7, r3
     c72:	2225      	movs	r2, #37	; 0x25
     c74:	751a      	strb	r2, [r3, #20]
     c76:	2310      	movs	r3, #16
     c78:	18fb      	adds	r3, r7, r3
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	755a      	strb	r2, [r3, #21]
     c7e:	2310      	movs	r3, #16
     c80:	18fb      	adds	r3, r7, r3
     c82:	2226      	movs	r2, #38	; 0x26
     c84:	759a      	strb	r2, [r3, #22]
     c86:	2310      	movs	r3, #16
     c88:	18fb      	adds	r3, r7, r3
     c8a:	2207      	movs	r2, #7
     c8c:	75da      	strb	r2, [r3, #23]
     c8e:	2310      	movs	r3, #16
     c90:	18fb      	adds	r3, r7, r3
     c92:	2228      	movs	r2, #40	; 0x28
     c94:	761a      	strb	r2, [r3, #24]
     c96:	2310      	movs	r3, #16
     c98:	18fb      	adds	r3, r7, r3
     c9a:	2210      	movs	r2, #16
     c9c:	765a      	strb	r2, [r3, #25]
     c9e:	2310      	movs	r3, #16
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	2229      	movs	r2, #41	; 0x29
     ca4:	769a      	strb	r2, [r3, #26]
     ca6:	2310      	movs	r3, #16
     ca8:	18fb      	adds	r3, r7, r3
     caa:	22dc      	movs	r2, #220	; 0xdc
     cac:	76da      	strb	r2, [r3, #27]
     cae:	2310      	movs	r3, #16
     cb0:	18fb      	adds	r3, r7, r3
     cb2:	222e      	movs	r2, #46	; 0x2e
     cb4:	771a      	strb	r2, [r3, #28]
     cb6:	2310      	movs	r3, #16
     cb8:	18fb      	adds	r3, r7, r3
     cba:	2288      	movs	r2, #136	; 0x88
     cbc:	775a      	strb	r2, [r3, #29]
     cbe:	2310      	movs	r3, #16
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	222f      	movs	r2, #47	; 0x2f
     cc4:	779a      	strb	r2, [r3, #30]
     cc6:	2310      	movs	r3, #16
     cc8:	18fb      	adds	r3, r7, r3
     cca:	222d      	movs	r2, #45	; 0x2d
     ccc:	77da      	strb	r2, [r3, #31]
     cce:	2310      	movs	r3, #16
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	2220      	movs	r2, #32
     cd4:	2130      	movs	r1, #48	; 0x30
     cd6:	5499      	strb	r1, [r3, r2]
     cd8:	2310      	movs	r3, #16
     cda:	18fb      	adds	r3, r7, r3
     cdc:	1d7a      	adds	r2, r7, #5
     cde:	2121      	movs	r1, #33	; 0x21
     ce0:	7812      	ldrb	r2, [r2, #0]
     ce2:	545a      	strb	r2, [r3, r1]
     ce4:	2310      	movs	r3, #16
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	2222      	movs	r2, #34	; 0x22
     cea:	2137      	movs	r1, #55	; 0x37
     cec:	5499      	strb	r1, [r3, r2]
     cee:	2310      	movs	r3, #16
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	2223      	movs	r2, #35	; 0x23
     cf4:	2190      	movs	r1, #144	; 0x90
     cf6:	5499      	strb	r1, [r3, r2]
     cf8:	2310      	movs	r3, #16
     cfa:	18fb      	adds	r3, r7, r3
     cfc:	2224      	movs	r2, #36	; 0x24
     cfe:	2138      	movs	r1, #56	; 0x38
     d00:	5499      	strb	r1, [r3, r2]
     d02:	2310      	movs	r3, #16
     d04:	18fb      	adds	r3, r7, r3
     d06:	2225      	movs	r2, #37	; 0x25
     d08:	2142      	movs	r1, #66	; 0x42
     d0a:	5499      	strb	r1, [r3, r2]
     d0c:	2310      	movs	r3, #16
     d0e:	18fb      	adds	r3, r7, r3
     d10:	2226      	movs	r2, #38	; 0x26
     d12:	213c      	movs	r1, #60	; 0x3c
     d14:	5499      	strb	r1, [r3, r2]
     d16:	2310      	movs	r3, #16
     d18:	18fb      	adds	r3, r7, r3
     d1a:	2227      	movs	r2, #39	; 0x27
     d1c:	218f      	movs	r1, #143	; 0x8f
     d1e:	5499      	strb	r1, [r3, r2]
     d20:	2310      	movs	r3, #16
     d22:	18fb      	adds	r3, r7, r3
     d24:	2228      	movs	r2, #40	; 0x28
     d26:	213d      	movs	r1, #61	; 0x3d
     d28:	5499      	strb	r1, [r3, r2]
     d2a:	2310      	movs	r3, #16
     d2c:	18fb      	adds	r3, r7, r3
     d2e:	2229      	movs	r2, #41	; 0x29
     d30:	2112      	movs	r1, #18
     d32:	5499      	strb	r1, [r3, r2]
     d34:	2310      	movs	r3, #16
     d36:	18fb      	adds	r3, r7, r3
     d38:	222a      	movs	r2, #42	; 0x2a
     d3a:	216f      	movs	r1, #111	; 0x6f
     d3c:	5499      	strb	r1, [r3, r2]
     d3e:	2310      	movs	r3, #16
     d40:	18fb      	adds	r3, r7, r3
     d42:	222b      	movs	r2, #43	; 0x2b
     d44:	2130      	movs	r1, #48	; 0x30
     d46:	5499      	strb	r1, [r3, r2]
     d48:	2310      	movs	r3, #16
     d4a:	18fb      	adds	r3, r7, r3
     d4c:	222c      	movs	r2, #44	; 0x2c
     d4e:	21ff      	movs	r1, #255	; 0xff
     d50:	5499      	strb	r1, [r3, r2]
     d52:	2310      	movs	r3, #16
     d54:	18fb      	adds	r3, r7, r3
     d56:	222d      	movs	r2, #45	; 0x2d
     d58:	2100      	movs	r1, #0
     d5a:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
     d5c:	4b4c      	ldr	r3, [pc, #304]	; (e90 <RFM_initialize+0x32c>)
     d5e:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
     d60:	4b4c      	ldr	r3, [pc, #304]	; (e94 <RFM_initialize+0x330>)
     d62:	4798      	blx	r3
  configure_port_pins();
     d64:	4b4c      	ldr	r3, [pc, #304]	; (e98 <RFM_initialize+0x334>)
     d66:	4798      	blx	r3
  configure_extint_channel();
     d68:	4b4c      	ldr	r3, [pc, #304]	; (e9c <RFM_initialize+0x338>)
     d6a:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
     d6c:	4b4c      	ldr	r3, [pc, #304]	; (ea0 <RFM_initialize+0x33c>)
     d6e:	4798      	blx	r3
  volatile uint8_t timeout = 50;
     d70:	230f      	movs	r3, #15
     d72:	18fb      	adds	r3, r7, r3
     d74:	2232      	movs	r2, #50	; 0x32
     d76:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
     d78:	202f      	movs	r0, #47	; 0x2f
     d7a:	21aa      	movs	r1, #170	; 0xaa
     d7c:	4b49      	ldr	r3, [pc, #292]	; (ea4 <RFM_initialize+0x340>)
     d7e:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
     d80:	202f      	movs	r0, #47	; 0x2f
     d82:	4b49      	ldr	r3, [pc, #292]	; (ea8 <RFM_initialize+0x344>)
     d84:	4798      	blx	r3
     d86:	1e03      	subs	r3, r0, #0
     d88:	2baa      	cmp	r3, #170	; 0xaa
     d8a:	d008      	beq.n	d9e <RFM_initialize+0x23a>
     d8c:	4b47      	ldr	r3, [pc, #284]	; (eac <RFM_initialize+0x348>)
     d8e:	4798      	blx	r3
     d90:	1c02      	adds	r2, r0, #0
     d92:	230f      	movs	r3, #15
     d94:	18fb      	adds	r3, r7, r3
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	b2db      	uxtb	r3, r3
     d9a:	429a      	cmp	r2, r3
     d9c:	d3ec      	bcc.n	d78 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
     d9e:	4b40      	ldr	r3, [pc, #256]	; (ea0 <RFM_initialize+0x33c>)
     da0:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
     da2:	202f      	movs	r0, #47	; 0x2f
     da4:	2155      	movs	r1, #85	; 0x55
     da6:	4b3f      	ldr	r3, [pc, #252]	; (ea4 <RFM_initialize+0x340>)
     da8:	4798      	blx	r3
     daa:	202f      	movs	r0, #47	; 0x2f
     dac:	4b3e      	ldr	r3, [pc, #248]	; (ea8 <RFM_initialize+0x344>)
     dae:	4798      	blx	r3
     db0:	1e03      	subs	r3, r0, #0
     db2:	2b55      	cmp	r3, #85	; 0x55
     db4:	d008      	beq.n	dc8 <RFM_initialize+0x264>
     db6:	4b3d      	ldr	r3, [pc, #244]	; (eac <RFM_initialize+0x348>)
     db8:	4798      	blx	r3
     dba:	1c02      	adds	r2, r0, #0
     dbc:	230f      	movs	r3, #15
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	b2db      	uxtb	r3, r3
     dc4:	429a      	cmp	r2, r3
     dc6:	d3ec      	bcc.n	da2 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
     dc8:	233f      	movs	r3, #63	; 0x3f
     dca:	18fb      	adds	r3, r7, r3
     dcc:	2200      	movs	r2, #0
     dce:	701a      	strb	r2, [r3, #0]
     dd0:	e01a      	b.n	e08 <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
     dd2:	233f      	movs	r3, #63	; 0x3f
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	781a      	ldrb	r2, [r3, #0]
     dd8:	2310      	movs	r3, #16
     dda:	18fb      	adds	r3, r7, r3
     ddc:	0052      	lsls	r2, r2, #1
     dde:	5cd1      	ldrb	r1, [r2, r3]
     de0:	233f      	movs	r3, #63	; 0x3f
     de2:	18fb      	adds	r3, r7, r3
     de4:	781b      	ldrb	r3, [r3, #0]
     de6:	2210      	movs	r2, #16
     de8:	18ba      	adds	r2, r7, r2
     dea:	005b      	lsls	r3, r3, #1
     dec:	18d3      	adds	r3, r2, r3
     dee:	3301      	adds	r3, #1
     df0:	781b      	ldrb	r3, [r3, #0]
     df2:	1c08      	adds	r0, r1, #0
     df4:	1c19      	adds	r1, r3, #0
     df6:	4b2b      	ldr	r3, [pc, #172]	; (ea4 <RFM_initialize+0x340>)
     df8:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
     dfa:	233f      	movs	r3, #63	; 0x3f
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	781a      	ldrb	r2, [r3, #0]
     e00:	233f      	movs	r3, #63	; 0x3f
     e02:	18fb      	adds	r3, r7, r3
     e04:	3201      	adds	r2, #1
     e06:	701a      	strb	r2, [r3, #0]
     e08:	233f      	movs	r3, #63	; 0x3f
     e0a:	18fb      	adds	r3, r7, r3
     e0c:	781a      	ldrb	r2, [r3, #0]
     e0e:	2310      	movs	r3, #16
     e10:	18fb      	adds	r3, r7, r3
     e12:	0052      	lsls	r2, r2, #1
     e14:	5cd3      	ldrb	r3, [r2, r3]
     e16:	2bff      	cmp	r3, #255	; 0xff
     e18:	d1db      	bne.n	dd2 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
     e1a:	2000      	movs	r0, #0
     e1c:	4b24      	ldr	r3, [pc, #144]	; (eb0 <RFM_initialize+0x34c>)
     e1e:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
     e20:	4b24      	ldr	r3, [pc, #144]	; (eb4 <RFM_initialize+0x350>)
     e22:	781b      	ldrb	r3, [r3, #0]
     e24:	b2db      	uxtb	r3, r3
     e26:	1c18      	adds	r0, r3, #0
     e28:	4b23      	ldr	r3, [pc, #140]	; (eb8 <RFM_initialize+0x354>)
     e2a:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
     e2c:	2001      	movs	r0, #1
     e2e:	4b23      	ldr	r3, [pc, #140]	; (ebc <RFM_initialize+0x358>)
     e30:	4798      	blx	r3
  reset_millis(); //start = get_timer();
     e32:	4b1b      	ldr	r3, [pc, #108]	; (ea0 <RFM_initialize+0x33c>)
     e34:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	2027      	movs	r0, #39	; 0x27
     e3a:	4b1b      	ldr	r3, [pc, #108]	; (ea8 <RFM_initialize+0x344>)
     e3c:	4798      	blx	r3
     e3e:	1c03      	adds	r3, r0, #0
     e40:	b2db      	uxtb	r3, r3
     e42:	b25b      	sxtb	r3, r3
     e44:	2b00      	cmp	r3, #0
     e46:	db08      	blt.n	e5a <RFM_initialize+0x2f6>
     e48:	4b18      	ldr	r3, [pc, #96]	; (eac <RFM_initialize+0x348>)
     e4a:	4798      	blx	r3
     e4c:	1c02      	adds	r2, r0, #0
     e4e:	230f      	movs	r3, #15
     e50:	18fb      	adds	r3, r7, r3
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	b2db      	uxtb	r3, r3
     e56:	429a      	cmp	r2, r3
     e58:	d3ee      	bcc.n	e38 <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
     e5a:	4b14      	ldr	r3, [pc, #80]	; (eac <RFM_initialize+0x348>)
     e5c:	4798      	blx	r3
     e5e:	1c02      	adds	r2, r0, #0
     e60:	230f      	movs	r3, #15
     e62:	18fb      	adds	r3, r7, r3
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	b2db      	uxtb	r3, r3
     e68:	429a      	cmp	r2, r3
     e6a:	d301      	bcc.n	e70 <RFM_initialize+0x30c>
    return false;
     e6c:	2300      	movs	r3, #0
     e6e:	e009      	b.n	e84 <RFM_initialize+0x320>
  _inISR = false;
     e70:	4b13      	ldr	r3, [pc, #76]	; (ec0 <RFM_initialize+0x35c>)
     e72:	2200      	movs	r2, #0
     e74:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
     e76:	4b13      	ldr	r3, [pc, #76]	; (ec4 <RFM_initialize+0x360>)
     e78:	4798      	blx	r3

  _address = nodeID;
     e7a:	4b13      	ldr	r3, [pc, #76]	; (ec8 <RFM_initialize+0x364>)
     e7c:	1dba      	adds	r2, r7, #6
     e7e:	7812      	ldrb	r2, [r2, #0]
     e80:	701a      	strb	r2, [r3, #0]
  return true;
     e82:	2301      	movs	r3, #1
}
     e84:	1c18      	adds	r0, r3, #0
     e86:	46bd      	mov	sp, r7
     e88:	b011      	add	sp, #68	; 0x44
     e8a:	bd90      	pop	{r4, r7, pc}
     e8c:	00000b35 	.word	0x00000b35
     e90:	00000935 	.word	0x00000935
     e94:	000009f9 	.word	0x000009f9
     e98:	000008a1 	.word	0x000008a1
     e9c:	000008cd 	.word	0x000008cd
     ea0:	00000a5d 	.word	0x00000a5d
     ea4:	00001409 	.word	0x00001409
     ea8:	0000139d 	.word	0x0000139d
     eac:	00000a85 	.word	0x00000a85
     eb0:	0000129d 	.word	0x0000129d
     eb4:	2000023c 	.word	0x2000023c
     eb8:	00000aad 	.word	0x00000aad
     ebc:	00000ecd 	.word	0x00000ecd
     ec0:	200001ad 	.word	0x200001ad
     ec4:	0000090d 	.word	0x0000090d
     ec8:	200001ae 	.word	0x200001ae

00000ecc <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
     ecc:	b580      	push	{r7, lr}
     ece:	b082      	sub	sp, #8
     ed0:	af00      	add	r7, sp, #0
     ed2:	1c02      	adds	r2, r0, #0
     ed4:	1dfb      	adds	r3, r7, #7
     ed6:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
     ed8:	1dfb      	adds	r3, r7, #7
     eda:	781b      	ldrb	r3, [r3, #0]
     edc:	b29a      	uxth	r2, r3
     ede:	4b4c      	ldr	r3, [pc, #304]	; (1010 <setMode+0x144>)
     ee0:	881b      	ldrh	r3, [r3, #0]
     ee2:	b29b      	uxth	r3, r3
     ee4:	429a      	cmp	r2, r3
     ee6:	d100      	bne.n	eea <setMode+0x1e>
    return;
     ee8:	e08e      	b.n	1008 <setMode+0x13c>

  switch (newMode) {
     eea:	1dfb      	adds	r3, r7, #7
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	2b04      	cmp	r3, #4
     ef0:	d900      	bls.n	ef4 <setMode+0x28>
     ef2:	e088      	b.n	1006 <setMode+0x13a>
     ef4:	009a      	lsls	r2, r3, #2
     ef6:	4b47      	ldr	r3, [pc, #284]	; (1014 <setMode+0x148>)
     ef8:	18d3      	adds	r3, r2, r3
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
     efe:	2001      	movs	r0, #1
     f00:	4b45      	ldr	r3, [pc, #276]	; (1018 <setMode+0x14c>)
     f02:	4798      	blx	r3
     f04:	1c03      	adds	r3, r0, #0
     f06:	b2db      	uxtb	r3, r3
     f08:	1c1a      	adds	r2, r3, #0
     f0a:	231c      	movs	r3, #28
     f0c:	439a      	bics	r2, r3
     f0e:	1c13      	adds	r3, r2, #0
     f10:	b2db      	uxtb	r3, r3
     f12:	1c1a      	adds	r2, r3, #0
     f14:	230c      	movs	r3, #12
     f16:	4313      	orrs	r3, r2
     f18:	b2db      	uxtb	r3, r3
     f1a:	b2db      	uxtb	r3, r3
     f1c:	2001      	movs	r0, #1
     f1e:	1c19      	adds	r1, r3, #0
     f20:	4b3e      	ldr	r3, [pc, #248]	; (101c <setMode+0x150>)
     f22:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
     f24:	4b3e      	ldr	r3, [pc, #248]	; (1020 <setMode+0x154>)
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	b2db      	uxtb	r3, r3
     f2a:	2b00      	cmp	r3, #0
     f2c:	d003      	beq.n	f36 <setMode+0x6a>
     f2e:	2001      	movs	r0, #1
     f30:	4b3c      	ldr	r3, [pc, #240]	; (1024 <setMode+0x158>)
     f32:	4798      	blx	r3
      break;
     f34:	e053      	b.n	fde <setMode+0x112>
     f36:	e052      	b.n	fde <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
     f38:	2001      	movs	r0, #1
     f3a:	4b37      	ldr	r3, [pc, #220]	; (1018 <setMode+0x14c>)
     f3c:	4798      	blx	r3
     f3e:	1c03      	adds	r3, r0, #0
     f40:	b2db      	uxtb	r3, r3
     f42:	1c1a      	adds	r2, r3, #0
     f44:	231c      	movs	r3, #28
     f46:	439a      	bics	r2, r3
     f48:	1c13      	adds	r3, r2, #0
     f4a:	b2db      	uxtb	r3, r3
     f4c:	1c1a      	adds	r2, r3, #0
     f4e:	2310      	movs	r3, #16
     f50:	4313      	orrs	r3, r2
     f52:	b2db      	uxtb	r3, r3
     f54:	b2db      	uxtb	r3, r3
     f56:	2001      	movs	r0, #1
     f58:	1c19      	adds	r1, r3, #0
     f5a:	4b30      	ldr	r3, [pc, #192]	; (101c <setMode+0x150>)
     f5c:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
     f5e:	4b30      	ldr	r3, [pc, #192]	; (1020 <setMode+0x154>)
     f60:	781b      	ldrb	r3, [r3, #0]
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d003      	beq.n	f70 <setMode+0xa4>
     f68:	2000      	movs	r0, #0
     f6a:	4b2e      	ldr	r3, [pc, #184]	; (1024 <setMode+0x158>)
     f6c:	4798      	blx	r3
      break;
     f6e:	e036      	b.n	fde <setMode+0x112>
     f70:	e035      	b.n	fde <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
     f72:	2001      	movs	r0, #1
     f74:	4b28      	ldr	r3, [pc, #160]	; (1018 <setMode+0x14c>)
     f76:	4798      	blx	r3
     f78:	1c03      	adds	r3, r0, #0
     f7a:	b2db      	uxtb	r3, r3
     f7c:	1c1a      	adds	r2, r3, #0
     f7e:	231c      	movs	r3, #28
     f80:	439a      	bics	r2, r3
     f82:	1c13      	adds	r3, r2, #0
     f84:	b2db      	uxtb	r3, r3
     f86:	1c1a      	adds	r2, r3, #0
     f88:	2308      	movs	r3, #8
     f8a:	4313      	orrs	r3, r2
     f8c:	b2db      	uxtb	r3, r3
     f8e:	b2db      	uxtb	r3, r3
     f90:	2001      	movs	r0, #1
     f92:	1c19      	adds	r1, r3, #0
     f94:	4b21      	ldr	r3, [pc, #132]	; (101c <setMode+0x150>)
     f96:	4798      	blx	r3
      break;
     f98:	e021      	b.n	fde <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
     f9a:	2001      	movs	r0, #1
     f9c:	4b1e      	ldr	r3, [pc, #120]	; (1018 <setMode+0x14c>)
     f9e:	4798      	blx	r3
     fa0:	1c03      	adds	r3, r0, #0
     fa2:	b2db      	uxtb	r3, r3
     fa4:	1c1a      	adds	r2, r3, #0
     fa6:	231c      	movs	r3, #28
     fa8:	439a      	bics	r2, r3
     faa:	1c13      	adds	r3, r2, #0
     fac:	b2db      	uxtb	r3, r3
     fae:	1c1a      	adds	r2, r3, #0
     fb0:	2304      	movs	r3, #4
     fb2:	4313      	orrs	r3, r2
     fb4:	b2db      	uxtb	r3, r3
     fb6:	b2db      	uxtb	r3, r3
     fb8:	2001      	movs	r0, #1
     fba:	1c19      	adds	r1, r3, #0
     fbc:	4b17      	ldr	r3, [pc, #92]	; (101c <setMode+0x150>)
     fbe:	4798      	blx	r3
      break;
     fc0:	e00d      	b.n	fde <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
     fc2:	2001      	movs	r0, #1
     fc4:	4b14      	ldr	r3, [pc, #80]	; (1018 <setMode+0x14c>)
     fc6:	4798      	blx	r3
     fc8:	1c03      	adds	r3, r0, #0
     fca:	1c1a      	adds	r2, r3, #0
     fcc:	231c      	movs	r3, #28
     fce:	439a      	bics	r2, r3
     fd0:	1c13      	adds	r3, r2, #0
     fd2:	b2db      	uxtb	r3, r3
     fd4:	2001      	movs	r0, #1
     fd6:	1c19      	adds	r1, r3, #0
     fd8:	4b10      	ldr	r3, [pc, #64]	; (101c <setMode+0x150>)
     fda:	4798      	blx	r3
      break;
     fdc:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	4b0b      	ldr	r3, [pc, #44]	; (1010 <setMode+0x144>)
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	b29b      	uxth	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	d107      	bne.n	ffa <setMode+0x12e>
     fea:	2027      	movs	r0, #39	; 0x27
     fec:	4b0a      	ldr	r3, [pc, #40]	; (1018 <setMode+0x14c>)
     fee:	4798      	blx	r3
     ff0:	1c03      	adds	r3, r0, #0
     ff2:	b2db      	uxtb	r3, r3
     ff4:	b25b      	sxtb	r3, r3
     ff6:	2b00      	cmp	r3, #0
     ff8:	daf2      	bge.n	fe0 <setMode+0x114>

  _mode = newMode;
     ffa:	1dfb      	adds	r3, r7, #7
     ffc:	781b      	ldrb	r3, [r3, #0]
     ffe:	b29a      	uxth	r2, r3
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <setMode+0x144>)
    1002:	801a      	strh	r2, [r3, #0]
    1004:	e000      	b.n	1008 <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    1006:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    1008:	46bd      	mov	sp, r7
    100a:	b002      	add	sp, #8
    100c:	bd80      	pop	{r7, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	2000023a 	.word	0x2000023a
    1014:	00008300 	.word	0x00008300
    1018:	0000139d 	.word	0x0000139d
    101c:	00001409 	.word	0x00001409
    1020:	2000023c 	.word	0x2000023c
    1024:	000014c5 	.word	0x000014c5

00001028 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    1028:	b580      	push	{r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    102e:	4b5b      	ldr	r3, [pc, #364]	; (119c <interruptHandler+0x174>)
    1030:	881b      	ldrh	r3, [r3, #0]
    1032:	b29b      	uxth	r3, r3
    1034:	2b03      	cmp	r3, #3
    1036:	d000      	beq.n	103a <interruptHandler+0x12>
    1038:	e0a7      	b.n	118a <interruptHandler+0x162>
    103a:	2028      	movs	r0, #40	; 0x28
    103c:	4b58      	ldr	r3, [pc, #352]	; (11a0 <interruptHandler+0x178>)
    103e:	4798      	blx	r3
    1040:	1c03      	adds	r3, r0, #0
    1042:	1c1a      	adds	r2, r3, #0
    1044:	2304      	movs	r3, #4
    1046:	4013      	ands	r3, r2
    1048:	d100      	bne.n	104c <interruptHandler+0x24>
    104a:	e09e      	b.n	118a <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    104c:	2001      	movs	r0, #1
    104e:	4b55      	ldr	r3, [pc, #340]	; (11a4 <interruptHandler+0x17c>)
    1050:	4798      	blx	r3
    selectrf();
    1052:	4b55      	ldr	r3, [pc, #340]	; (11a8 <interruptHandler+0x180>)
    1054:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    1056:	4a55      	ldr	r2, [pc, #340]	; (11ac <interruptHandler+0x184>)
    1058:	4b55      	ldr	r3, [pc, #340]	; (11b0 <interruptHandler+0x188>)
    105a:	1c10      	adds	r0, r2, #0
    105c:	2100      	movs	r1, #0
    105e:	1c1a      	adds	r2, r3, #0
    1060:	4b54      	ldr	r3, [pc, #336]	; (11b4 <interruptHandler+0x18c>)
    1062:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    1064:	4a51      	ldr	r2, [pc, #324]	; (11ac <interruptHandler+0x184>)
    1066:	4b54      	ldr	r3, [pc, #336]	; (11b8 <interruptHandler+0x190>)
    1068:	1c10      	adds	r0, r2, #0
    106a:	2100      	movs	r1, #0
    106c:	1c1a      	adds	r2, r3, #0
    106e:	4b51      	ldr	r3, [pc, #324]	; (11b4 <interruptHandler+0x18c>)
    1070:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    1072:	4b51      	ldr	r3, [pc, #324]	; (11b8 <interruptHandler+0x190>)
    1074:	881b      	ldrh	r3, [r3, #0]
    1076:	b29b      	uxth	r3, r3
    1078:	2b42      	cmp	r3, #66	; 0x42
    107a:	d803      	bhi.n	1084 <interruptHandler+0x5c>
    107c:	4b4e      	ldr	r3, [pc, #312]	; (11b8 <interruptHandler+0x190>)
    107e:	881b      	ldrh	r3, [r3, #0]
    1080:	b29a      	uxth	r2, r3
    1082:	e000      	b.n	1086 <interruptHandler+0x5e>
    1084:	2242      	movs	r2, #66	; 0x42
    1086:	4b4c      	ldr	r3, [pc, #304]	; (11b8 <interruptHandler+0x190>)
    1088:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    108a:	4a48      	ldr	r2, [pc, #288]	; (11ac <interruptHandler+0x184>)
    108c:	4b4b      	ldr	r3, [pc, #300]	; (11bc <interruptHandler+0x194>)
    108e:	1c10      	adds	r0, r2, #0
    1090:	2100      	movs	r1, #0
    1092:	1c1a      	adds	r2, r3, #0
    1094:	4b47      	ldr	r3, [pc, #284]	; (11b4 <interruptHandler+0x18c>)
    1096:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    1098:	4b49      	ldr	r3, [pc, #292]	; (11c0 <interruptHandler+0x198>)
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	b2db      	uxtb	r3, r3
    109e:	2201      	movs	r2, #1
    10a0:	4053      	eors	r3, r2
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d00d      	beq.n	10c4 <interruptHandler+0x9c>
    10a8:	4b46      	ldr	r3, [pc, #280]	; (11c4 <interruptHandler+0x19c>)
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	b2db      	uxtb	r3, r3
    10ae:	b29a      	uxth	r2, r3
    10b0:	4b42      	ldr	r3, [pc, #264]	; (11bc <interruptHandler+0x194>)
    10b2:	881b      	ldrh	r3, [r3, #0]
    10b4:	b29b      	uxth	r3, r3
    10b6:	429a      	cmp	r2, r3
    10b8:	d004      	beq.n	10c4 <interruptHandler+0x9c>
    10ba:	4b40      	ldr	r3, [pc, #256]	; (11bc <interruptHandler+0x194>)
    10bc:	881b      	ldrh	r3, [r3, #0]
    10be:	b29b      	uxth	r3, r3
    10c0:	2bff      	cmp	r3, #255	; 0xff
    10c2:	d104      	bne.n	10ce <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    10c4:	4b3c      	ldr	r3, [pc, #240]	; (11b8 <interruptHandler+0x190>)
    10c6:	881b      	ldrh	r3, [r3, #0]
    10c8:	b29b      	uxth	r3, r3
    10ca:	2b02      	cmp	r3, #2
    10cc:	d807      	bhi.n	10de <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    10ce:	4b3a      	ldr	r3, [pc, #232]	; (11b8 <interruptHandler+0x190>)
    10d0:	2200      	movs	r2, #0
    10d2:	801a      	strh	r2, [r3, #0]
      unselect();
    10d4:	4b3c      	ldr	r3, [pc, #240]	; (11c8 <interruptHandler+0x1a0>)
    10d6:	4798      	blx	r3
      receiveBegin();
    10d8:	4b3c      	ldr	r3, [pc, #240]	; (11cc <interruptHandler+0x1a4>)
    10da:	4798      	blx	r3
    10dc:	e05b      	b.n	1196 <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    10de:	4b36      	ldr	r3, [pc, #216]	; (11b8 <interruptHandler+0x190>)
    10e0:	881b      	ldrh	r3, [r3, #0]
    10e2:	b29b      	uxth	r3, r3
    10e4:	3b03      	subs	r3, #3
    10e6:	b29a      	uxth	r2, r3
    10e8:	4b39      	ldr	r3, [pc, #228]	; (11d0 <interruptHandler+0x1a8>)
    10ea:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    10ec:	4a2f      	ldr	r2, [pc, #188]	; (11ac <interruptHandler+0x184>)
    10ee:	4b39      	ldr	r3, [pc, #228]	; (11d4 <interruptHandler+0x1ac>)
    10f0:	1c10      	adds	r0, r2, #0
    10f2:	2100      	movs	r1, #0
    10f4:	1c1a      	adds	r2, r3, #0
    10f6:	4b2f      	ldr	r3, [pc, #188]	; (11b4 <interruptHandler+0x18c>)
    10f8:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    10fa:	1dbb      	adds	r3, r7, #6
    10fc:	2200      	movs	r2, #0
    10fe:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    1100:	4a2a      	ldr	r2, [pc, #168]	; (11ac <interruptHandler+0x184>)
    1102:	1dbb      	adds	r3, r7, #6
    1104:	1c10      	adds	r0, r2, #0
    1106:	2100      	movs	r1, #0
    1108:	1c1a      	adds	r2, r3, #0
    110a:	4b2a      	ldr	r3, [pc, #168]	; (11b4 <interruptHandler+0x18c>)
    110c:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    110e:	1dbb      	adds	r3, r7, #6
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	b29b      	uxth	r3, r3
    1114:	2280      	movs	r2, #128	; 0x80
    1116:	4013      	ands	r3, r2
    1118:	b29a      	uxth	r2, r3
    111a:	4b2f      	ldr	r3, [pc, #188]	; (11d8 <interruptHandler+0x1b0>)
    111c:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    111e:	1dbb      	adds	r3, r7, #6
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	b29b      	uxth	r3, r3
    1124:	2240      	movs	r2, #64	; 0x40
    1126:	4013      	ands	r3, r2
    1128:	b29a      	uxth	r2, r3
    112a:	4b2c      	ldr	r3, [pc, #176]	; (11dc <interruptHandler+0x1b4>)
    112c:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    112e:	1dfb      	adds	r3, r7, #7
    1130:	2200      	movs	r2, #0
    1132:	701a      	strb	r2, [r3, #0]
    1134:	e00f      	b.n	1156 <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    1136:	1dfb      	adds	r3, r7, #7
    1138:	781b      	ldrb	r3, [r3, #0]
    113a:	005a      	lsls	r2, r3, #1
    113c:	4b28      	ldr	r3, [pc, #160]	; (11e0 <interruptHandler+0x1b8>)
    113e:	18d3      	adds	r3, r2, r3
    1140:	4a1a      	ldr	r2, [pc, #104]	; (11ac <interruptHandler+0x184>)
    1142:	1c10      	adds	r0, r2, #0
    1144:	2100      	movs	r1, #0
    1146:	1c1a      	adds	r2, r3, #0
    1148:	4b1a      	ldr	r3, [pc, #104]	; (11b4 <interruptHandler+0x18c>)
    114a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    114c:	1dfb      	adds	r3, r7, #7
    114e:	781a      	ldrb	r2, [r3, #0]
    1150:	1dfb      	adds	r3, r7, #7
    1152:	3201      	adds	r2, #1
    1154:	701a      	strb	r2, [r3, #0]
    1156:	1dfb      	adds	r3, r7, #7
    1158:	781b      	ldrb	r3, [r3, #0]
    115a:	b29a      	uxth	r2, r3
    115c:	4b1c      	ldr	r3, [pc, #112]	; (11d0 <interruptHandler+0x1a8>)
    115e:	881b      	ldrh	r3, [r3, #0]
    1160:	b29b      	uxth	r3, r3
    1162:	429a      	cmp	r2, r3
    1164:	d3e7      	bcc.n	1136 <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    1166:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <interruptHandler+0x1a8>)
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	b29b      	uxth	r3, r3
    116c:	2b3c      	cmp	r3, #60	; 0x3c
    116e:	d807      	bhi.n	1180 <interruptHandler+0x158>
    1170:	4b17      	ldr	r3, [pc, #92]	; (11d0 <interruptHandler+0x1a8>)
    1172:	881b      	ldrh	r3, [r3, #0]
    1174:	b29b      	uxth	r3, r3
    1176:	1c1a      	adds	r2, r3, #0
    1178:	4b19      	ldr	r3, [pc, #100]	; (11e0 <interruptHandler+0x1b8>)
    117a:	0052      	lsls	r2, r2, #1
    117c:	2100      	movs	r1, #0
    117e:	52d1      	strh	r1, [r2, r3]
    unselect();
    1180:	4b11      	ldr	r3, [pc, #68]	; (11c8 <interruptHandler+0x1a0>)
    1182:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    1184:	2003      	movs	r0, #3
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <interruptHandler+0x17c>)
    1188:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    118a:	4b16      	ldr	r3, [pc, #88]	; (11e4 <interruptHandler+0x1bc>)
    118c:	4798      	blx	r3
    118e:	1c03      	adds	r3, r0, #0
    1190:	1c1a      	adds	r2, r3, #0
    1192:	4b15      	ldr	r3, [pc, #84]	; (11e8 <interruptHandler+0x1c0>)
    1194:	801a      	strh	r2, [r3, #0]
}
    1196:	46bd      	mov	sp, r7
    1198:	b002      	add	sp, #8
    119a:	bd80      	pop	{r7, pc}
    119c:	2000023a 	.word	0x2000023a
    11a0:	0000139d 	.word	0x0000139d
    11a4:	00000ecd 	.word	0x00000ecd
    11a8:	0000146d 	.word	0x0000146d
    11ac:	20000240 	.word	0x20000240
    11b0:	200000f8 	.word	0x200000f8
    11b4:	00003a61 	.word	0x00003a61
    11b8:	20000234 	.word	0x20000234
    11bc:	20000238 	.word	0x20000238
    11c0:	200001b4 	.word	0x200001b4
    11c4:	200001ae 	.word	0x200001ae
    11c8:	00001499 	.word	0x00001499
    11cc:	0000120d 	.word	0x0000120d
    11d0:	200001b2 	.word	0x200001b2
    11d4:	200001a2 	.word	0x200001a2
    11d8:	200001b0 	.word	0x200001b0
    11dc:	20000236 	.word	0x20000236
    11e0:	200001b8 	.word	0x200001b8
    11e4:	00001359 	.word	0x00001359
    11e8:	2000024c 	.word	0x2000024c

000011ec <isr0>:

// internal function
void isr0()
{ 
    11ec:	b580      	push	{r7, lr}
    11ee:	af00      	add	r7, sp, #0
	_inISR = true; 
    11f0:	4b04      	ldr	r3, [pc, #16]	; (1204 <isr0+0x18>)
    11f2:	2201      	movs	r2, #1
    11f4:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    11f6:	4b04      	ldr	r3, [pc, #16]	; (1208 <isr0+0x1c>)
    11f8:	4798      	blx	r3
	_inISR = false;
    11fa:	4b02      	ldr	r3, [pc, #8]	; (1204 <isr0+0x18>)
    11fc:	2200      	movs	r2, #0
    11fe:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    1200:	46bd      	mov	sp, r7
    1202:	bd80      	pop	{r7, pc}
    1204:	200001ad 	.word	0x200001ad
    1208:	00001029 	.word	0x00001029

0000120c <receiveBegin>:

// internal function
void receiveBegin() {
    120c:	b580      	push	{r7, lr}
    120e:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    1210:	4b18      	ldr	r3, [pc, #96]	; (1274 <receiveBegin+0x68>)
    1212:	2200      	movs	r2, #0
    1214:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    1216:	4b18      	ldr	r3, [pc, #96]	; (1278 <receiveBegin+0x6c>)
    1218:	2200      	movs	r2, #0
    121a:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    121c:	4b17      	ldr	r3, [pc, #92]	; (127c <receiveBegin+0x70>)
    121e:	2200      	movs	r2, #0
    1220:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    1222:	4b17      	ldr	r3, [pc, #92]	; (1280 <receiveBegin+0x74>)
    1224:	2200      	movs	r2, #0
    1226:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    1228:	4b16      	ldr	r3, [pc, #88]	; (1284 <receiveBegin+0x78>)
    122a:	2200      	movs	r2, #0
    122c:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    122e:	4b16      	ldr	r3, [pc, #88]	; (1288 <receiveBegin+0x7c>)
    1230:	2200      	movs	r2, #0
    1232:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    1234:	4b15      	ldr	r3, [pc, #84]	; (128c <receiveBegin+0x80>)
    1236:	2200      	movs	r2, #0
    1238:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    123a:	2028      	movs	r0, #40	; 0x28
    123c:	4b14      	ldr	r3, [pc, #80]	; (1290 <receiveBegin+0x84>)
    123e:	4798      	blx	r3
    1240:	1c03      	adds	r3, r0, #0
    1242:	1c1a      	adds	r2, r3, #0
    1244:	2304      	movs	r3, #4
    1246:	4013      	ands	r3, r2
    1248:	d00b      	beq.n	1262 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    124a:	203d      	movs	r0, #61	; 0x3d
    124c:	4b10      	ldr	r3, [pc, #64]	; (1290 <receiveBegin+0x84>)
    124e:	4798      	blx	r3
    1250:	1c03      	adds	r3, r0, #0
    1252:	1c1a      	adds	r2, r3, #0
    1254:	2304      	movs	r3, #4
    1256:	4313      	orrs	r3, r2
    1258:	b2db      	uxtb	r3, r3
    125a:	203d      	movs	r0, #61	; 0x3d
    125c:	1c19      	adds	r1, r3, #0
    125e:	4b0d      	ldr	r3, [pc, #52]	; (1294 <receiveBegin+0x88>)
    1260:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    1262:	2025      	movs	r0, #37	; 0x25
    1264:	2140      	movs	r1, #64	; 0x40
    1266:	4b0b      	ldr	r3, [pc, #44]	; (1294 <receiveBegin+0x88>)
    1268:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    126a:	2003      	movs	r0, #3
    126c:	4b0a      	ldr	r3, [pc, #40]	; (1298 <receiveBegin+0x8c>)
    126e:	4798      	blx	r3
}
    1270:	46bd      	mov	sp, r7
    1272:	bd80      	pop	{r7, pc}
    1274:	200001b2 	.word	0x200001b2
    1278:	200001a2 	.word	0x200001a2
    127c:	20000238 	.word	0x20000238
    1280:	20000234 	.word	0x20000234
    1284:	20000236 	.word	0x20000236
    1288:	200001b0 	.word	0x200001b0
    128c:	2000024c 	.word	0x2000024c
    1290:	0000139d 	.word	0x0000139d
    1294:	00001409 	.word	0x00001409
    1298:	00000ecd 	.word	0x00000ecd

0000129c <RFM_encrypt>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    129c:	b580      	push	{r7, lr}
    129e:	b084      	sub	sp, #16
    12a0:	af00      	add	r7, sp, #0
    12a2:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    12a4:	2001      	movs	r0, #1
    12a6:	4b24      	ldr	r3, [pc, #144]	; (1338 <RFM_encrypt+0x9c>)
    12a8:	4798      	blx	r3
  if (key != 0)
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d029      	beq.n	1304 <RFM_encrypt+0x68>
  {
    selectrf();
    12b0:	4b22      	ldr	r3, [pc, #136]	; (133c <RFM_encrypt+0xa0>)
    12b2:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    12b4:	4a22      	ldr	r2, [pc, #136]	; (1340 <RFM_encrypt+0xa4>)
    12b6:	4b23      	ldr	r3, [pc, #140]	; (1344 <RFM_encrypt+0xa8>)
    12b8:	1c10      	adds	r0, r2, #0
    12ba:	21be      	movs	r1, #190	; 0xbe
    12bc:	1c1a      	adds	r2, r3, #0
    12be:	4b22      	ldr	r3, [pc, #136]	; (1348 <RFM_encrypt+0xac>)
    12c0:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    12c2:	230f      	movs	r3, #15
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	2200      	movs	r2, #0
    12c8:	701a      	strb	r2, [r3, #0]
    12ca:	e014      	b.n	12f6 <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    12cc:	230f      	movs	r3, #15
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	781b      	ldrb	r3, [r3, #0]
    12d2:	687a      	ldr	r2, [r7, #4]
    12d4:	18d3      	adds	r3, r2, r3
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b29a      	uxth	r2, r3
    12da:	4919      	ldr	r1, [pc, #100]	; (1340 <RFM_encrypt+0xa4>)
    12dc:	4b19      	ldr	r3, [pc, #100]	; (1344 <RFM_encrypt+0xa8>)
    12de:	1c08      	adds	r0, r1, #0
    12e0:	1c11      	adds	r1, r2, #0
    12e2:	1c1a      	adds	r2, r3, #0
    12e4:	4b18      	ldr	r3, [pc, #96]	; (1348 <RFM_encrypt+0xac>)
    12e6:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    selectrf();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    12e8:	230f      	movs	r3, #15
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	230f      	movs	r3, #15
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	3201      	adds	r2, #1
    12f4:	701a      	strb	r2, [r3, #0]
    12f6:	230f      	movs	r3, #15
    12f8:	18fb      	adds	r3, r7, r3
    12fa:	781b      	ldrb	r3, [r3, #0]
    12fc:	2b0f      	cmp	r3, #15
    12fe:	d9e5      	bls.n	12cc <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    1300:	4b12      	ldr	r3, [pc, #72]	; (134c <RFM_encrypt+0xb0>)
    1302:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    1304:	203d      	movs	r0, #61	; 0x3d
    1306:	4b12      	ldr	r3, [pc, #72]	; (1350 <RFM_encrypt+0xb4>)
    1308:	4798      	blx	r3
    130a:	1c03      	adds	r3, r0, #0
    130c:	b2db      	uxtb	r3, r3
    130e:	1c1a      	adds	r2, r3, #0
    1310:	2301      	movs	r3, #1
    1312:	439a      	bics	r2, r3
    1314:	1c13      	adds	r3, r2, #0
    1316:	b2da      	uxtb	r2, r3
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	1e59      	subs	r1, r3, #1
    131c:	418b      	sbcs	r3, r1
    131e:	b2db      	uxtb	r3, r3
    1320:	b2db      	uxtb	r3, r3
    1322:	4313      	orrs	r3, r2
    1324:	b2db      	uxtb	r3, r3
    1326:	b2db      	uxtb	r3, r3
    1328:	203d      	movs	r0, #61	; 0x3d
    132a:	1c19      	adds	r1, r3, #0
    132c:	4b09      	ldr	r3, [pc, #36]	; (1354 <RFM_encrypt+0xb8>)
    132e:	4798      	blx	r3
}
    1330:	46bd      	mov	sp, r7
    1332:	b004      	add	sp, #16
    1334:	bd80      	pop	{r7, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	00000ecd 	.word	0x00000ecd
    133c:	0000146d 	.word	0x0000146d
    1340:	20000240 	.word	0x20000240
    1344:	200000f8 	.word	0x200000f8
    1348:	00003a61 	.word	0x00003a61
    134c:	00001499 	.word	0x00001499
    1350:	0000139d 	.word	0x0000139d
    1354:	00001409 	.word	0x00001409

00001358 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    1358:	b580      	push	{r7, lr}
    135a:	b082      	sub	sp, #8
    135c:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    135e:	1dbb      	adds	r3, r7, #6
    1360:	2200      	movs	r2, #0
    1362:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    1364:	2024      	movs	r0, #36	; 0x24
    1366:	4b0c      	ldr	r3, [pc, #48]	; (1398 <readRSSI+0x40>)
    1368:	4798      	blx	r3
    136a:	1c03      	adds	r3, r0, #0
    136c:	b29b      	uxth	r3, r3
    136e:	425b      	negs	r3, r3
    1370:	b29b      	uxth	r3, r3
    1372:	b29a      	uxth	r2, r3
    1374:	1dbb      	adds	r3, r7, #6
    1376:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    1378:	1dbb      	adds	r3, r7, #6
    137a:	881b      	ldrh	r3, [r3, #0]
    137c:	b29b      	uxth	r3, r3
    137e:	b21b      	sxth	r3, r3
    1380:	105b      	asrs	r3, r3, #1
    1382:	b29a      	uxth	r2, r3
    1384:	1dbb      	adds	r3, r7, #6
    1386:	801a      	strh	r2, [r3, #0]
  return rssi;
    1388:	1dbb      	adds	r3, r7, #6
    138a:	881b      	ldrh	r3, [r3, #0]
    138c:	b29b      	uxth	r3, r3
    138e:	b21b      	sxth	r3, r3
}
    1390:	1c18      	adds	r0, r3, #0
    1392:	46bd      	mov	sp, r7
    1394:	b002      	add	sp, #8
    1396:	bd80      	pop	{r7, pc}
    1398:	0000139d 	.word	0x0000139d

0000139c <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    139c:	b580      	push	{r7, lr}
    139e:	b084      	sub	sp, #16
    13a0:	af00      	add	r7, sp, #0
    13a2:	1c02      	adds	r2, r0, #0
    13a4:	1dbb      	adds	r3, r7, #6
    13a6:	801a      	strh	r2, [r3, #0]
  selectrf();
    13a8:	4b12      	ldr	r3, [pc, #72]	; (13f4 <readReg+0x58>)
    13aa:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    13ac:	1dbb      	adds	r3, r7, #6
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	b29b      	uxth	r3, r3
    13b2:	227f      	movs	r2, #127	; 0x7f
    13b4:	4013      	ands	r3, r2
    13b6:	b29a      	uxth	r2, r3
    13b8:	490f      	ldr	r1, [pc, #60]	; (13f8 <readReg+0x5c>)
    13ba:	4b10      	ldr	r3, [pc, #64]	; (13fc <readReg+0x60>)
    13bc:	1c08      	adds	r0, r1, #0
    13be:	1c11      	adds	r1, r2, #0
    13c0:	1c1a      	adds	r2, r3, #0
    13c2:	4b0f      	ldr	r3, [pc, #60]	; (1400 <readReg+0x64>)
    13c4:	4798      	blx	r3
  volatile uint16_t regval = 0;
    13c6:	230e      	movs	r3, #14
    13c8:	18fb      	adds	r3, r7, r3
    13ca:	2200      	movs	r2, #0
    13cc:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    13ce:	4a0a      	ldr	r2, [pc, #40]	; (13f8 <readReg+0x5c>)
    13d0:	230e      	movs	r3, #14
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	1c10      	adds	r0, r2, #0
    13d6:	2100      	movs	r1, #0
    13d8:	1c1a      	adds	r2, r3, #0
    13da:	4b09      	ldr	r3, [pc, #36]	; (1400 <readReg+0x64>)
    13dc:	4798      	blx	r3
  unselect();
    13de:	4b09      	ldr	r3, [pc, #36]	; (1404 <readReg+0x68>)
    13e0:	4798      	blx	r3
  return (uint8_t)regval;
    13e2:	230e      	movs	r3, #14
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	881b      	ldrh	r3, [r3, #0]
    13e8:	b29b      	uxth	r3, r3
    13ea:	b2db      	uxtb	r3, r3
}
    13ec:	1c18      	adds	r0, r3, #0
    13ee:	46bd      	mov	sp, r7
    13f0:	b004      	add	sp, #16
    13f2:	bd80      	pop	{r7, pc}
    13f4:	0000146d 	.word	0x0000146d
    13f8:	20000240 	.word	0x20000240
    13fc:	200000f8 	.word	0x200000f8
    1400:	00003a61 	.word	0x00003a61
    1404:	00001499 	.word	0x00001499

00001408 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    1408:	b580      	push	{r7, lr}
    140a:	b082      	sub	sp, #8
    140c:	af00      	add	r7, sp, #0
    140e:	1c02      	adds	r2, r0, #0
    1410:	1dfb      	adds	r3, r7, #7
    1412:	701a      	strb	r2, [r3, #0]
    1414:	1dbb      	adds	r3, r7, #6
    1416:	1c0a      	adds	r2, r1, #0
    1418:	701a      	strb	r2, [r3, #0]
  selectrf();
    141a:	4b0f      	ldr	r3, [pc, #60]	; (1458 <writeReg+0x50>)
    141c:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    141e:	1dfb      	adds	r3, r7, #7
    1420:	781b      	ldrb	r3, [r3, #0]
    1422:	2280      	movs	r2, #128	; 0x80
    1424:	4252      	negs	r2, r2
    1426:	4313      	orrs	r3, r2
    1428:	b2db      	uxtb	r3, r3
    142a:	b29a      	uxth	r2, r3
    142c:	490b      	ldr	r1, [pc, #44]	; (145c <writeReg+0x54>)
    142e:	4b0c      	ldr	r3, [pc, #48]	; (1460 <writeReg+0x58>)
    1430:	1c08      	adds	r0, r1, #0
    1432:	1c11      	adds	r1, r2, #0
    1434:	1c1a      	adds	r2, r3, #0
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <writeReg+0x5c>)
    1438:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    143a:	1dbb      	adds	r3, r7, #6
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	b29a      	uxth	r2, r3
    1440:	4906      	ldr	r1, [pc, #24]	; (145c <writeReg+0x54>)
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <writeReg+0x58>)
    1444:	1c08      	adds	r0, r1, #0
    1446:	1c11      	adds	r1, r2, #0
    1448:	1c1a      	adds	r2, r3, #0
    144a:	4b06      	ldr	r3, [pc, #24]	; (1464 <writeReg+0x5c>)
    144c:	4798      	blx	r3
  unselect();
    144e:	4b06      	ldr	r3, [pc, #24]	; (1468 <writeReg+0x60>)
    1450:	4798      	blx	r3
}
    1452:	46bd      	mov	sp, r7
    1454:	b002      	add	sp, #8
    1456:	bd80      	pop	{r7, pc}
    1458:	0000146d 	.word	0x0000146d
    145c:	20000240 	.word	0x20000240
    1460:	200000f8 	.word	0x200000f8
    1464:	00003a61 	.word	0x00003a61
    1468:	00001499 	.word	0x00001499

0000146c <selectrf>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void selectrf(void) {
    146c:	b580      	push	{r7, lr}
    146e:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    1470:	4b05      	ldr	r3, [pc, #20]	; (1488 <selectrf+0x1c>)
    1472:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    1474:	4a05      	ldr	r2, [pc, #20]	; (148c <selectrf+0x20>)
    1476:	4b06      	ldr	r3, [pc, #24]	; (1490 <selectrf+0x24>)
    1478:	1c10      	adds	r0, r2, #0
    147a:	1c19      	adds	r1, r3, #0
    147c:	2201      	movs	r2, #1
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <selectrf+0x28>)
    1480:	4798      	blx	r3
}
    1482:	46bd      	mov	sp, r7
    1484:	bd80      	pop	{r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	0000072d 	.word	0x0000072d
    148c:	20000240 	.word	0x20000240
    1490:	20000250 	.word	0x20000250
    1494:	00003b99 	.word	0x00003b99

00001498 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    1498:	b580      	push	{r7, lr}
    149a:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    149c:	4a05      	ldr	r2, [pc, #20]	; (14b4 <unselect+0x1c>)
    149e:	4b06      	ldr	r3, [pc, #24]	; (14b8 <unselect+0x20>)
    14a0:	1c10      	adds	r0, r2, #0
    14a2:	1c19      	adds	r1, r3, #0
    14a4:	2200      	movs	r2, #0
    14a6:	4b05      	ldr	r3, [pc, #20]	; (14bc <unselect+0x24>)
    14a8:	4798      	blx	r3
  maybeInterrupts();
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <unselect+0x28>)
    14ac:	4798      	blx	r3
}
    14ae:	46bd      	mov	sp, r7
    14b0:	bd80      	pop	{r7, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	20000240 	.word	0x20000240
    14b8:	20000250 	.word	0x20000250
    14bc:	00003b99 	.word	0x00003b99
    14c0:	00001509 	.word	0x00001509

000014c4 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	1c02      	adds	r2, r0, #0
    14cc:	1dfb      	adds	r3, r7, #7
    14ce:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    14d0:	1dfb      	adds	r3, r7, #7
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d001      	beq.n	14dc <setHighPowerRegs+0x18>
    14d8:	235d      	movs	r3, #93	; 0x5d
    14da:	e000      	b.n	14de <setHighPowerRegs+0x1a>
    14dc:	2355      	movs	r3, #85	; 0x55
    14de:	205a      	movs	r0, #90	; 0x5a
    14e0:	1c19      	adds	r1, r3, #0
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <setHighPowerRegs+0x40>)
    14e4:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    14e6:	1dfb      	adds	r3, r7, #7
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d001      	beq.n	14f2 <setHighPowerRegs+0x2e>
    14ee:	237c      	movs	r3, #124	; 0x7c
    14f0:	e000      	b.n	14f4 <setHighPowerRegs+0x30>
    14f2:	2370      	movs	r3, #112	; 0x70
    14f4:	205c      	movs	r0, #92	; 0x5c
    14f6:	1c19      	adds	r1, r3, #0
    14f8:	4b02      	ldr	r3, [pc, #8]	; (1504 <setHighPowerRegs+0x40>)
    14fa:	4798      	blx	r3
}
    14fc:	46bd      	mov	sp, r7
    14fe:	b002      	add	sp, #8
    1500:	bd80      	pop	{r7, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00001409 	.word	0x00001409

00001508 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    1508:	b580      	push	{r7, lr}
    150a:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    150c:	4b05      	ldr	r3, [pc, #20]	; (1524 <maybeInterrupts+0x1c>)
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	b2db      	uxtb	r3, r3
    1512:	2201      	movs	r2, #1
    1514:	4053      	eors	r3, r2
    1516:	b2db      	uxtb	r3, r3
    1518:	2b00      	cmp	r3, #0
    151a:	d001      	beq.n	1520 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    151c:	4b02      	ldr	r3, [pc, #8]	; (1528 <maybeInterrupts+0x20>)
    151e:	4798      	blx	r3
    1520:	46bd      	mov	sp, r7
    1522:	bd80      	pop	{r7, pc}
    1524:	200001ad 	.word	0x200001ad
    1528:	00000715 	.word	0x00000715

0000152c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    152c:	b580      	push	{r7, lr}
    152e:	b084      	sub	sp, #16
    1530:	af00      	add	r7, sp, #0
    1532:	1c02      	adds	r2, r0, #0
    1534:	1dfb      	adds	r3, r7, #7
    1536:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1538:	230f      	movs	r3, #15
    153a:	18fb      	adds	r3, r7, r3
    153c:	1dfa      	adds	r2, r7, #7
    153e:	7812      	ldrb	r2, [r2, #0]
    1540:	09d2      	lsrs	r2, r2, #7
    1542:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1544:	230e      	movs	r3, #14
    1546:	18fb      	adds	r3, r7, r3
    1548:	1dfa      	adds	r2, r7, #7
    154a:	7812      	ldrb	r2, [r2, #0]
    154c:	0952      	lsrs	r2, r2, #5
    154e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1550:	4b0d      	ldr	r3, [pc, #52]	; (1588 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1552:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1554:	230f      	movs	r3, #15
    1556:	18fb      	adds	r3, r7, r3
    1558:	781b      	ldrb	r3, [r3, #0]
    155a:	2b00      	cmp	r3, #0
    155c:	d10f      	bne.n	157e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    155e:	230f      	movs	r3, #15
    1560:	18fb      	adds	r3, r7, r3
    1562:	781b      	ldrb	r3, [r3, #0]
    1564:	009b      	lsls	r3, r3, #2
    1566:	2210      	movs	r2, #16
    1568:	4694      	mov	ip, r2
    156a:	44bc      	add	ip, r7
    156c:	4463      	add	r3, ip
    156e:	3b08      	subs	r3, #8
    1570:	681a      	ldr	r2, [r3, #0]
    1572:	230e      	movs	r3, #14
    1574:	18fb      	adds	r3, r7, r3
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	01db      	lsls	r3, r3, #7
    157a:	18d3      	adds	r3, r2, r3
    157c:	e000      	b.n	1580 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    157e:	2300      	movs	r3, #0
	}
}
    1580:	1c18      	adds	r0, r3, #0
    1582:	46bd      	mov	sp, r7
    1584:	b004      	add	sp, #16
    1586:	bd80      	pop	{r7, pc}
    1588:	41004400 	.word	0x41004400

0000158c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    158c:	b580      	push	{r7, lr}
    158e:	b082      	sub	sp, #8
    1590:	af00      	add	r7, sp, #0
    1592:	1c02      	adds	r2, r0, #0
    1594:	1dfb      	adds	r3, r7, #7
    1596:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1598:	1dfb      	adds	r3, r7, #7
    159a:	781b      	ldrb	r3, [r3, #0]
    159c:	1c18      	adds	r0, r3, #0
    159e:	4b03      	ldr	r3, [pc, #12]	; (15ac <port_get_group_from_gpio_pin+0x20>)
    15a0:	4798      	blx	r3
    15a2:	1c03      	adds	r3, r0, #0
}
    15a4:	1c18      	adds	r0, r3, #0
    15a6:	46bd      	mov	sp, r7
    15a8:	b002      	add	sp, #8
    15aa:	bd80      	pop	{r7, pc}
    15ac:	0000152d 	.word	0x0000152d

000015b0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	b084      	sub	sp, #16
    15b4:	af00      	add	r7, sp, #0
    15b6:	1c02      	adds	r2, r0, #0
    15b8:	1dfb      	adds	r3, r7, #7
    15ba:	701a      	strb	r2, [r3, #0]
    15bc:	1dbb      	adds	r3, r7, #6
    15be:	1c0a      	adds	r2, r1, #0
    15c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    15c2:	1dfb      	adds	r3, r7, #7
    15c4:	781b      	ldrb	r3, [r3, #0]
    15c6:	1c18      	adds	r0, r3, #0
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <port_pin_set_output_level+0x4c>)
    15ca:	4798      	blx	r3
    15cc:	1c03      	adds	r3, r0, #0
    15ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    15d0:	1dfb      	adds	r3, r7, #7
    15d2:	781b      	ldrb	r3, [r3, #0]
    15d4:	221f      	movs	r2, #31
    15d6:	4013      	ands	r3, r2
    15d8:	2201      	movs	r2, #1
    15da:	409a      	lsls	r2, r3
    15dc:	1c13      	adds	r3, r2, #0
    15de:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    15e0:	1dbb      	adds	r3, r7, #6
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d003      	beq.n	15f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	68ba      	ldr	r2, [r7, #8]
    15ec:	619a      	str	r2, [r3, #24]
    15ee:	e002      	b.n	15f6 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	68ba      	ldr	r2, [r7, #8]
    15f4:	615a      	str	r2, [r3, #20]
	}
}
    15f6:	46bd      	mov	sp, r7
    15f8:	b004      	add	sp, #16
    15fa:	bd80      	pop	{r7, pc}
    15fc:	0000158d 	.word	0x0000158d

00001600 <udc_remotewakeup>:

/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
    1600:	b580      	push	{r7, lr}
    1602:	af00      	add	r7, sp, #0
	udd_send_remotewakeup();
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <udc_remotewakeup+0xc>)
    1606:	4798      	blx	r3
}
    1608:	46bd      	mov	sp, r7
    160a:	bd80      	pop	{r7, pc}
    160c:	000055f9 	.word	0x000055f9

00001610 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
    1614:	4b03      	ldr	r3, [pc, #12]	; (1624 <ui_wakeup_handler+0x14>)
    1616:	4798      	blx	r3
	LED_On(LED_0_PIN);
    1618:	2011      	movs	r0, #17
    161a:	2100      	movs	r1, #0
    161c:	4b02      	ldr	r3, [pc, #8]	; (1628 <ui_wakeup_handler+0x18>)
    161e:	4798      	blx	r3
}
    1620:	46bd      	mov	sp, r7
    1622:	bd80      	pop	{r7, pc}
    1624:	00001601 	.word	0x00001601
    1628:	000015b1 	.word	0x000015b1

0000162c <ui_init>:


void ui_init(void)
{
    162c:	b580      	push	{r7, lr}
    162e:	b084      	sub	sp, #16
    1630:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    1632:	1d3b      	adds	r3, r7, #4
    1634:	1c18      	adds	r0, r3, #0
    1636:	4b13      	ldr	r3, [pc, #76]	; (1684 <ui_init+0x58>)
    1638:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
    163a:	1d3b      	adds	r3, r7, #4
    163c:	220f      	movs	r2, #15
    163e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
    1640:	1d3b      	adds	r3, r7, #4
    1642:	2200      	movs	r2, #0
    1644:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
    1646:	1d3b      	adds	r3, r7, #4
    1648:	2201      	movs	r2, #1
    164a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.filter_input_signal = true;
    164c:	1d3b      	adds	r3, r7, #4
    164e:	2201      	movs	r2, #1
    1650:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
    1652:	1d3b      	adds	r3, r7, #4
    1654:	2202      	movs	r2, #2
    1656:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    1658:	1d3b      	adds	r3, r7, #4
    165a:	200f      	movs	r0, #15
    165c:	1c19      	adds	r1, r3, #0
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <ui_init+0x5c>)
    1660:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
    1662:	4b0a      	ldr	r3, [pc, #40]	; (168c <ui_init+0x60>)
    1664:	1c18      	adds	r0, r3, #0
    1666:	210f      	movs	r1, #15
    1668:	2200      	movs	r2, #0
    166a:	4b09      	ldr	r3, [pc, #36]	; (1690 <ui_init+0x64>)
    166c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    166e:	200f      	movs	r0, #15
    1670:	2100      	movs	r1, #0
    1672:	4b08      	ldr	r3, [pc, #32]	; (1694 <ui_init+0x68>)
    1674:	4798      	blx	r3

	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
    1676:	2011      	movs	r0, #17
    1678:	2101      	movs	r1, #1
    167a:	4b07      	ldr	r3, [pc, #28]	; (1698 <ui_init+0x6c>)
    167c:	4798      	blx	r3
}
    167e:	46bd      	mov	sp, r7
    1680:	b004      	add	sp, #16
    1682:	bd80      	pop	{r7, pc}
    1684:	00002cc5 	.word	0x00002cc5
    1688:	00002cf9 	.word	0x00002cf9
    168c:	00001611 	.word	0x00001611
    1690:	000028cd 	.word	0x000028cd
    1694:	00002931 	.word	0x00002931
    1698:	000015b1 	.word	0x000015b1

0000169c <ui_powerdown>:

void ui_powerdown(void)
{
    169c:	b580      	push	{r7, lr}
    169e:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
    16a0:	2011      	movs	r0, #17
    16a2:	2101      	movs	r1, #1
    16a4:	4b01      	ldr	r3, [pc, #4]	; (16ac <ui_powerdown+0x10>)
    16a6:	4798      	blx	r3
}
    16a8:	46bd      	mov	sp, r7
    16aa:	bd80      	pop	{r7, pc}
    16ac:	000015b1 	.word	0x000015b1

000016b0 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	af00      	add	r7, sp, #0
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    16b4:	200f      	movs	r0, #15
    16b6:	2100      	movs	r1, #0
    16b8:	4b01      	ldr	r3, [pc, #4]	; (16c0 <ui_wakeup_enable+0x10>)
    16ba:	4798      	blx	r3
}
    16bc:	46bd      	mov	sp, r7
    16be:	bd80      	pop	{r7, pc}
    16c0:	00002931 	.word	0x00002931

000016c4 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    16c8:	200f      	movs	r0, #15
    16ca:	2100      	movs	r1, #0
    16cc:	4b01      	ldr	r3, [pc, #4]	; (16d4 <ui_wakeup_disable+0x10>)
    16ce:	4798      	blx	r3
}
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}
    16d4:	00002979 	.word	0x00002979

000016d8 <ui_wakeup>:

void ui_wakeup(void)
{
    16d8:	b580      	push	{r7, lr}
    16da:	af00      	add	r7, sp, #0
	LED_On(LED_0_PIN);
    16dc:	2011      	movs	r0, #17
    16de:	2100      	movs	r1, #0
    16e0:	4b01      	ldr	r3, [pc, #4]	; (16e8 <ui_wakeup+0x10>)
    16e2:	4798      	blx	r3
}
    16e4:	46bd      	mov	sp, r7
    16e6:	bd80      	pop	{r7, pc}
    16e8:	000015b1 	.word	0x000015b1

000016ec <ui_process>:

void ui_process(uint16_t framenumber)
{
    16ec:	b580      	push	{r7, lr}
    16ee:	b082      	sub	sp, #8
    16f0:	af00      	add	r7, sp, #0
    16f2:	1c02      	adds	r2, r0, #0
    16f4:	1dbb      	adds	r3, r7, #6
    16f6:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
    16f8:	1dbb      	adds	r3, r7, #6
    16fa:	881a      	ldrh	r2, [r3, #0]
    16fc:	4b17      	ldr	r3, [pc, #92]	; (175c <ui_process+0x70>)
    16fe:	1c10      	adds	r0, r2, #0
    1700:	22fa      	movs	r2, #250	; 0xfa
    1702:	0091      	lsls	r1, r2, #2
    1704:	4798      	blx	r3
    1706:	1c0b      	adds	r3, r1, #0
    1708:	b29b      	uxth	r3, r3
    170a:	2b00      	cmp	r3, #0
    170c:	d103      	bne.n	1716 <ui_process+0x2a>
		LED_On(LED_0_PIN);
    170e:	2011      	movs	r0, #17
    1710:	2100      	movs	r1, #0
    1712:	4b13      	ldr	r3, [pc, #76]	; (1760 <ui_process+0x74>)
    1714:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
    1716:	1dbb      	adds	r3, r7, #6
    1718:	881a      	ldrh	r2, [r3, #0]
    171a:	4b10      	ldr	r3, [pc, #64]	; (175c <ui_process+0x70>)
    171c:	1c10      	adds	r0, r2, #0
    171e:	22fa      	movs	r2, #250	; 0xfa
    1720:	0091      	lsls	r1, r2, #2
    1722:	4798      	blx	r3
    1724:	1c0b      	adds	r3, r1, #0
    1726:	b29a      	uxth	r2, r3
    1728:	23fa      	movs	r3, #250	; 0xfa
    172a:	005b      	lsls	r3, r3, #1
    172c:	429a      	cmp	r2, r3
    172e:	d103      	bne.n	1738 <ui_process+0x4c>
		LED_Off(LED_0_PIN);
    1730:	2011      	movs	r0, #17
    1732:	2101      	movs	r1, #1
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <ui_process+0x74>)
    1736:	4798      	blx	r3
	}
	/* Scan process running each 5ms */
	cpt_sof++;
    1738:	4b0a      	ldr	r3, [pc, #40]	; (1764 <ui_process+0x78>)
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	3301      	adds	r3, #1
    173e:	b2da      	uxtb	r2, r3
    1740:	4b08      	ldr	r3, [pc, #32]	; (1764 <ui_process+0x78>)
    1742:	701a      	strb	r2, [r3, #0]
	if (cpt_sof < 5) {
    1744:	4b07      	ldr	r3, [pc, #28]	; (1764 <ui_process+0x78>)
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	2b04      	cmp	r3, #4
    174a:	d800      	bhi.n	174e <ui_process+0x62>
		return;
    174c:	e002      	b.n	1754 <ui_process+0x68>
	}
	cpt_sof = 0;
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <ui_process+0x78>)
    1750:	2200      	movs	r2, #0
    1752:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	*/
}
    1754:	46bd      	mov	sp, r7
    1756:	b002      	add	sp, #8
    1758:	bd80      	pop	{r7, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00008059 	.word	0x00008059
    1760:	000015b1 	.word	0x000015b1
    1764:	200000fa 	.word	0x200000fa

00001768 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    1768:	b580      	push	{r7, lr}
    176a:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    176c:	4b0b      	ldr	r3, [pc, #44]	; (179c <udi_hid_mouse_enable+0x34>)
    176e:	2200      	movs	r2, #0
    1770:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    1772:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <udi_hid_mouse_enable+0x38>)
    1774:	2200      	movs	r2, #0
    1776:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    1778:	4b0a      	ldr	r3, [pc, #40]	; (17a4 <udi_hid_mouse_enable+0x3c>)
    177a:	2200      	movs	r2, #0
    177c:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <udi_hid_mouse_enable+0x40>)
    1780:	1c18      	adds	r0, r3, #0
    1782:	2100      	movs	r1, #0
    1784:	2207      	movs	r2, #7
    1786:	4b09      	ldr	r3, [pc, #36]	; (17ac <udi_hid_mouse_enable+0x44>)
    1788:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    178a:	4b09      	ldr	r3, [pc, #36]	; (17b0 <udi_hid_mouse_enable+0x48>)
    178c:	2200      	movs	r2, #0
    178e:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    1790:	4b08      	ldr	r3, [pc, #32]	; (17b4 <udi_hid_mouse_enable+0x4c>)
    1792:	4798      	blx	r3
    1794:	1c03      	adds	r3, r0, #0
}
    1796:	1c18      	adds	r0, r3, #0
    1798:	46bd      	mov	sp, r7
    179a:	bd80      	pop	{r7, pc}
    179c:	200000fc 	.word	0x200000fc
    17a0:	20000100 	.word	0x20000100
    17a4:	2000010b 	.word	0x2000010b
    17a8:	20000104 	.word	0x20000104
    17ac:	000082ef 	.word	0x000082ef
    17b0:	20000101 	.word	0x20000101
    17b4:	00007f21 	.word	0x00007f21

000017b8 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    17b8:	b580      	push	{r7, lr}
    17ba:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    17bc:	4b01      	ldr	r3, [pc, #4]	; (17c4 <udi_hid_mouse_disable+0xc>)
    17be:	4798      	blx	r3
}
    17c0:	46bd      	mov	sp, r7
    17c2:	bd80      	pop	{r7, pc}
    17c4:	00007f39 	.word	0x00007f39

000017c8 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    17c8:	b598      	push	{r3, r4, r7, lr}
    17ca:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    17cc:	4804      	ldr	r0, [pc, #16]	; (17e0 <udi_hid_mouse_setup+0x18>)
    17ce:	4905      	ldr	r1, [pc, #20]	; (17e4 <udi_hid_mouse_setup+0x1c>)
    17d0:	4a05      	ldr	r2, [pc, #20]	; (17e8 <udi_hid_mouse_setup+0x20>)
    17d2:	4b06      	ldr	r3, [pc, #24]	; (17ec <udi_hid_mouse_setup+0x24>)
    17d4:	4c06      	ldr	r4, [pc, #24]	; (17f0 <udi_hid_mouse_setup+0x28>)
    17d6:	47a0      	blx	r4
    17d8:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    17da:	1c18      	adds	r0, r3, #0
    17dc:	46bd      	mov	sp, r7
    17de:	bd98      	pop	{r3, r4, r7, pc}
    17e0:	200000fc 	.word	0x200000fc
    17e4:	20000100 	.word	0x20000100
    17e8:	20000014 	.word	0x20000014
    17ec:	00001801 	.word	0x00001801
    17f0:	0000180d 	.word	0x0000180d

000017f4 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	return 0;
    17f8:	2300      	movs	r3, #0
}
    17fa:	1c18      	adds	r0, r3, #0
    17fc:	46bd      	mov	sp, r7
    17fe:	bd80      	pop	{r7, pc}

00001800 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    1800:	b580      	push	{r7, lr}
    1802:	af00      	add	r7, sp, #0
	return false;
    1804:	2300      	movs	r3, #0
}
    1806:	1c18      	adds	r0, r3, #0
    1808:	46bd      	mov	sp, r7
    180a:	bd80      	pop	{r7, pc}

0000180c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    180c:	b580      	push	{r7, lr}
    180e:	b084      	sub	sp, #16
    1810:	af00      	add	r7, sp, #0
    1812:	60f8      	str	r0, [r7, #12]
    1814:	60b9      	str	r1, [r7, #8]
    1816:	607a      	str	r2, [r7, #4]
    1818:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    181a:	4b36      	ldr	r3, [pc, #216]	; (18f4 <udi_hid_setup+0xe8>)
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	b2db      	uxtb	r3, r3
    1820:	b25b      	sxtb	r3, r3
    1822:	2b00      	cmp	r3, #0
    1824:	da32      	bge.n	188c <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1826:	4b33      	ldr	r3, [pc, #204]	; (18f4 <udi_hid_setup+0xe8>)
    1828:	781b      	ldrb	r3, [r3, #0]
    182a:	1c1a      	adds	r2, r3, #0
    182c:	2360      	movs	r3, #96	; 0x60
    182e:	4013      	ands	r3, r2
    1830:	d109      	bne.n	1846 <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1832:	4b30      	ldr	r3, [pc, #192]	; (18f4 <udi_hid_setup+0xe8>)
    1834:	785b      	ldrb	r3, [r3, #1]
    1836:	2b06      	cmp	r3, #6
    1838:	d105      	bne.n	1846 <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	1c18      	adds	r0, r3, #0
    183e:	4b2e      	ldr	r3, [pc, #184]	; (18f8 <udi_hid_setup+0xec>)
    1840:	4798      	blx	r3
    1842:	1c03      	adds	r3, r0, #0
    1844:	e052      	b.n	18ec <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1846:	4b2b      	ldr	r3, [pc, #172]	; (18f4 <udi_hid_setup+0xe8>)
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	1c1a      	adds	r2, r3, #0
    184c:	2360      	movs	r3, #96	; 0x60
    184e:	4013      	ands	r3, r2
    1850:	2b20      	cmp	r3, #32
    1852:	d11b      	bne.n	188c <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1854:	4b27      	ldr	r3, [pc, #156]	; (18f4 <udi_hid_setup+0xe8>)
    1856:	785b      	ldrb	r3, [r3, #1]
    1858:	2b02      	cmp	r3, #2
    185a:	d007      	beq.n	186c <udi_hid_setup+0x60>
    185c:	2b03      	cmp	r3, #3
    185e:	d00d      	beq.n	187c <udi_hid_setup+0x70>
    1860:	2b01      	cmp	r3, #1
    1862:	d113      	bne.n	188c <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1864:	683b      	ldr	r3, [r7, #0]
    1866:	4798      	blx	r3
    1868:	1c03      	adds	r3, r0, #0
    186a:	e03f      	b.n	18ec <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    186c:	4b21      	ldr	r3, [pc, #132]	; (18f4 <udi_hid_setup+0xe8>)
    186e:	68fa      	ldr	r2, [r7, #12]
    1870:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1872:	4b20      	ldr	r3, [pc, #128]	; (18f4 <udi_hid_setup+0xe8>)
    1874:	2201      	movs	r2, #1
    1876:	819a      	strh	r2, [r3, #12]
				return true;
    1878:	2301      	movs	r3, #1
    187a:	e037      	b.n	18ec <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    187c:	4b1d      	ldr	r3, [pc, #116]	; (18f4 <udi_hid_setup+0xe8>)
    187e:	68ba      	ldr	r2, [r7, #8]
    1880:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1882:	4b1c      	ldr	r3, [pc, #112]	; (18f4 <udi_hid_setup+0xe8>)
    1884:	2201      	movs	r2, #1
    1886:	819a      	strh	r2, [r3, #12]
				return true;
    1888:	2301      	movs	r3, #1
    188a:	e02f      	b.n	18ec <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    188c:	4b19      	ldr	r3, [pc, #100]	; (18f4 <udi_hid_setup+0xe8>)
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	b2db      	uxtb	r3, r3
    1892:	b25b      	sxtb	r3, r3
    1894:	2b00      	cmp	r3, #0
    1896:	db28      	blt.n	18ea <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1898:	4b16      	ldr	r3, [pc, #88]	; (18f4 <udi_hid_setup+0xe8>)
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	1c1a      	adds	r2, r3, #0
    189e:	2360      	movs	r3, #96	; 0x60
    18a0:	4013      	ands	r3, r2
    18a2:	2b20      	cmp	r3, #32
    18a4:	d121      	bne.n	18ea <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    18a6:	4b13      	ldr	r3, [pc, #76]	; (18f4 <udi_hid_setup+0xe8>)
    18a8:	785b      	ldrb	r3, [r3, #1]
    18aa:	2b0a      	cmp	r3, #10
    18ac:	d007      	beq.n	18be <udi_hid_setup+0xb2>
    18ae:	2b0b      	cmp	r3, #11
    18b0:	d00e      	beq.n	18d0 <udi_hid_setup+0xc4>
    18b2:	2b09      	cmp	r3, #9
    18b4:	d119      	bne.n	18ea <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    18b6:	683b      	ldr	r3, [r7, #0]
    18b8:	4798      	blx	r3
    18ba:	1c03      	adds	r3, r0, #0
    18bc:	e016      	b.n	18ec <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    18be:	4b0d      	ldr	r3, [pc, #52]	; (18f4 <udi_hid_setup+0xe8>)
    18c0:	885b      	ldrh	r3, [r3, #2]
    18c2:	0a1b      	lsrs	r3, r3, #8
    18c4:	b29b      	uxth	r3, r3
    18c6:	b2da      	uxtb	r2, r3
    18c8:	68fb      	ldr	r3, [r7, #12]
    18ca:	701a      	strb	r2, [r3, #0]
				return true;
    18cc:	2301      	movs	r3, #1
    18ce:	e00d      	b.n	18ec <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    18d0:	4b08      	ldr	r3, [pc, #32]	; (18f4 <udi_hid_setup+0xe8>)
    18d2:	88db      	ldrh	r3, [r3, #6]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d001      	beq.n	18dc <udi_hid_setup+0xd0>
					return false;
    18d8:	2300      	movs	r3, #0
    18da:	e007      	b.n	18ec <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <udi_hid_setup+0xe8>)
    18de:	885b      	ldrh	r3, [r3, #2]
    18e0:	b2da      	uxtb	r2, r3
    18e2:	68bb      	ldr	r3, [r7, #8]
    18e4:	701a      	strb	r2, [r3, #0]
				return true;
    18e6:	2301      	movs	r3, #1
    18e8:	e000      	b.n	18ec <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    18ea:	2300      	movs	r3, #0
}
    18ec:	1c18      	adds	r0, r3, #0
    18ee:	46bd      	mov	sp, r7
    18f0:	b004      	add	sp, #16
    18f2:	bd80      	pop	{r7, pc}
    18f4:	20000444 	.word	0x20000444
    18f8:	000018fd 	.word	0x000018fd

000018fc <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b084      	sub	sp, #16
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1904:	4b25      	ldr	r3, [pc, #148]	; (199c <udi_hid_reqstdifaceget_descriptor+0xa0>)
    1906:	4798      	blx	r3
    1908:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    190a:	3309      	adds	r3, #9
    190c:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    190e:	68fb      	ldr	r3, [r7, #12]
    1910:	785b      	ldrb	r3, [r3, #1]
    1912:	2b21      	cmp	r3, #33	; 0x21
    1914:	d001      	beq.n	191a <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    1916:	2300      	movs	r3, #0
    1918:	e03b      	b.n	1992 <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    191a:	4b21      	ldr	r3, [pc, #132]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    191c:	885b      	ldrh	r3, [r3, #2]
    191e:	0a1b      	lsrs	r3, r3, #8
    1920:	b29b      	uxth	r3, r3
    1922:	b2db      	uxtb	r3, r3
    1924:	2b21      	cmp	r3, #33	; 0x21
    1926:	d113      	bne.n	1950 <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1928:	4b1d      	ldr	r3, [pc, #116]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    192a:	68fa      	ldr	r2, [r7, #12]
    192c:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	781b      	ldrb	r3, [r3, #0]
    1932:	b29a      	uxth	r2, r3
    1934:	4b1a      	ldr	r3, [pc, #104]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    1936:	88db      	ldrh	r3, [r3, #6]
    1938:	1c18      	adds	r0, r3, #0
    193a:	1c11      	adds	r1, r2, #0
    193c:	b28a      	uxth	r2, r1
    193e:	b283      	uxth	r3, r0
    1940:	429a      	cmp	r2, r3
    1942:	d900      	bls.n	1946 <udi_hid_reqstdifaceget_descriptor+0x4a>
    1944:	1c01      	adds	r1, r0, #0
    1946:	b28a      	uxth	r2, r1
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    1948:	4b15      	ldr	r3, [pc, #84]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    194a:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    194c:	2301      	movs	r3, #1
    194e:	e020      	b.n	1992 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1950:	68fb      	ldr	r3, [r7, #12]
    1952:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1954:	4b12      	ldr	r3, [pc, #72]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    1956:	885b      	ldrh	r3, [r3, #2]
    1958:	0a1b      	lsrs	r3, r3, #8
    195a:	b29b      	uxth	r3, r3
    195c:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    195e:	429a      	cmp	r2, r3
    1960:	d116      	bne.n	1990 <udi_hid_reqstdifaceget_descriptor+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1962:	4b0f      	ldr	r3, [pc, #60]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    1964:	687a      	ldr	r2, [r7, #4]
    1966:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	79da      	ldrb	r2, [r3, #7]
    196c:	7a1b      	ldrb	r3, [r3, #8]
    196e:	021b      	lsls	r3, r3, #8
    1970:	4313      	orrs	r3, r2
    1972:	b29a      	uxth	r2, r3
    1974:	4b0a      	ldr	r3, [pc, #40]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    1976:	88db      	ldrh	r3, [r3, #6]
    1978:	1c18      	adds	r0, r3, #0
    197a:	1c11      	adds	r1, r2, #0
    197c:	b28a      	uxth	r2, r1
    197e:	b283      	uxth	r3, r0
    1980:	429a      	cmp	r2, r3
    1982:	d900      	bls.n	1986 <udi_hid_reqstdifaceget_descriptor+0x8a>
    1984:	1c01      	adds	r1, r0, #0
    1986:	b28a      	uxth	r2, r1
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <udi_hid_reqstdifaceget_descriptor+0xa4>)
    198a:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    198c:	2301      	movs	r3, #1
    198e:	e000      	b.n	1992 <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
    1990:	2300      	movs	r3, #0
}
    1992:	1c18      	adds	r0, r3, #0
    1994:	46bd      	mov	sp, r7
    1996:	b004      	add	sp, #16
    1998:	bd80      	pop	{r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	000019a5 	.word	0x000019a5
    19a0:	20000444 	.word	0x20000444

000019a4 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    19a4:	b580      	push	{r7, lr}
    19a6:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    19a8:	4b02      	ldr	r3, [pc, #8]	; (19b4 <udc_get_interface_desc+0x10>)
    19aa:	681b      	ldr	r3, [r3, #0]
}
    19ac:	1c18      	adds	r0, r3, #0
    19ae:	46bd      	mov	sp, r7
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	2000011c 	.word	0x2000011c

000019b8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    19bc:	4b07      	ldr	r3, [pc, #28]	; (19dc <udc_get_eof_conf+0x24>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    19c2:	4b06      	ldr	r3, [pc, #24]	; (19dc <udc_get_eof_conf+0x24>)
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	7899      	ldrb	r1, [r3, #2]
    19ca:	78db      	ldrb	r3, [r3, #3]
    19cc:	021b      	lsls	r3, r3, #8
    19ce:	430b      	orrs	r3, r1
    19d0:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    19d2:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    19d4:	1c18      	adds	r0, r3, #0
    19d6:	46bd      	mov	sp, r7
    19d8:	bd80      	pop	{r7, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	20000118 	.word	0x20000118

000019e0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	b084      	sub	sp, #16
    19e4:	af00      	add	r7, sp, #0
    19e6:	6078      	str	r0, [r7, #4]
    19e8:	1c0a      	adds	r2, r1, #0
    19ea:	1cfb      	adds	r3, r7, #3
    19ec:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    19ee:	4b13      	ldr	r3, [pc, #76]	; (1a3c <udc_next_desc_in_iface+0x5c>)
    19f0:	4798      	blx	r3
    19f2:	1c03      	adds	r3, r0, #0
    19f4:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    19fa:	1c1a      	adds	r2, r3, #0
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	189b      	adds	r3, r3, r2
    1a00:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1a02:	e012      	b.n	1a2a <udc_next_desc_in_iface+0x4a>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	785b      	ldrb	r3, [r3, #1]
    1a08:	2b04      	cmp	r3, #4
    1a0a:	d100      	bne.n	1a0e <udc_next_desc_in_iface+0x2e>
			break; // End of global interface descriptor
    1a0c:	e011      	b.n	1a32 <udc_next_desc_in_iface+0x52>
		}
		if (desc_id == desc->bDescriptorType) {
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	785b      	ldrb	r3, [r3, #1]
    1a12:	1cfa      	adds	r2, r7, #3
    1a14:	7812      	ldrb	r2, [r2, #0]
    1a16:	429a      	cmp	r2, r3
    1a18:	d101      	bne.n	1a1e <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	e00a      	b.n	1a34 <udc_next_desc_in_iface+0x54>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1a22:	1c1a      	adds	r2, r3, #0
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	189b      	adds	r3, r3, r2
    1a28:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1a2a:	68fa      	ldr	r2, [r7, #12]
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	429a      	cmp	r2, r3
    1a30:	d8e8      	bhi.n	1a04 <udc_next_desc_in_iface+0x24>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    1a32:	2300      	movs	r3, #0
}
    1a34:	1c18      	adds	r0, r3, #0
    1a36:	46bd      	mov	sp, r7
    1a38:	b004      	add	sp, #16
    1a3a:	bd80      	pop	{r7, pc}
    1a3c:	000019b9 	.word	0x000019b9

00001a40 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	1c02      	adds	r2, r0, #0
    1a48:	1dfb      	adds	r3, r7, #7
    1a4a:	701a      	strb	r2, [r3, #0]
    1a4c:	1dbb      	adds	r3, r7, #6
    1a4e:	1c0a      	adds	r2, r1, #0
    1a50:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    1a52:	4b20      	ldr	r3, [pc, #128]	; (1ad4 <udc_update_iface_desc+0x94>)
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d101      	bne.n	1a5e <udc_update_iface_desc+0x1e>
		return false;
    1a5a:	2300      	movs	r3, #0
    1a5c:	e036      	b.n	1acc <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a5e:	4b1e      	ldr	r3, [pc, #120]	; (1ad8 <udc_update_iface_desc+0x98>)
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	791b      	ldrb	r3, [r3, #4]
    1a66:	1dfa      	adds	r2, r7, #7
    1a68:	7812      	ldrb	r2, [r2, #0]
    1a6a:	429a      	cmp	r2, r3
    1a6c:	d301      	bcc.n	1a72 <udc_update_iface_desc+0x32>
		return false;
    1a6e:	2300      	movs	r3, #0
    1a70:	e02c      	b.n	1acc <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    1a72:	4b19      	ldr	r3, [pc, #100]	; (1ad8 <udc_update_iface_desc+0x98>)
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1a78:	4b18      	ldr	r3, [pc, #96]	; (1adc <udc_update_iface_desc+0x9c>)
    1a7a:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    1a7c:	4b18      	ldr	r3, [pc, #96]	; (1ae0 <udc_update_iface_desc+0xa0>)
    1a7e:	4798      	blx	r3
    1a80:	1c03      	adds	r3, r0, #0
    1a82:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    1a84:	e01c      	b.n	1ac0 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1a86:	4b15      	ldr	r3, [pc, #84]	; (1adc <udc_update_iface_desc+0x9c>)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	785b      	ldrb	r3, [r3, #1]
    1a8c:	2b04      	cmp	r3, #4
    1a8e:	d10f      	bne.n	1ab0 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1a90:	4b12      	ldr	r3, [pc, #72]	; (1adc <udc_update_iface_desc+0x9c>)
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	789b      	ldrb	r3, [r3, #2]
    1a96:	1dfa      	adds	r2, r7, #7
    1a98:	7812      	ldrb	r2, [r2, #0]
    1a9a:	429a      	cmp	r2, r3
    1a9c:	d108      	bne.n	1ab0 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    1a9e:	4b0f      	ldr	r3, [pc, #60]	; (1adc <udc_update_iface_desc+0x9c>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1aa4:	1dba      	adds	r2, r7, #6
    1aa6:	7812      	ldrb	r2, [r2, #0]
    1aa8:	429a      	cmp	r2, r3
    1aaa:	d101      	bne.n	1ab0 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    1aac:	2301      	movs	r3, #1
    1aae:	e00d      	b.n	1acc <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1ab0:	4b0a      	ldr	r3, [pc, #40]	; (1adc <udc_update_iface_desc+0x9c>)
    1ab2:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    1ab4:	4b09      	ldr	r3, [pc, #36]	; (1adc <udc_update_iface_desc+0x9c>)
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1aba:	18d2      	adds	r2, r2, r3
    1abc:	4b07      	ldr	r3, [pc, #28]	; (1adc <udc_update_iface_desc+0x9c>)
    1abe:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    1ac0:	4b06      	ldr	r3, [pc, #24]	; (1adc <udc_update_iface_desc+0x9c>)
    1ac2:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    1ac4:	68fa      	ldr	r2, [r7, #12]
    1ac6:	429a      	cmp	r2, r3
    1ac8:	d8dd      	bhi.n	1a86 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    1aca:	2300      	movs	r3, #0
}
    1acc:	1c18      	adds	r0, r3, #0
    1ace:	46bd      	mov	sp, r7
    1ad0:	b004      	add	sp, #16
    1ad2:	bd80      	pop	{r7, pc}
    1ad4:	20000114 	.word	0x20000114
    1ad8:	20000118 	.word	0x20000118
    1adc:	2000011c 	.word	0x2000011c
    1ae0:	000019b9 	.word	0x000019b9

00001ae4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    1ae4:	b580      	push	{r7, lr}
    1ae6:	b084      	sub	sp, #16
    1ae8:	af00      	add	r7, sp, #0
    1aea:	1c02      	adds	r2, r0, #0
    1aec:	1dfb      	adds	r3, r7, #7
    1aee:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1af0:	1dfb      	adds	r3, r7, #7
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	1c18      	adds	r0, r3, #0
    1af6:	2100      	movs	r1, #0
    1af8:	4b22      	ldr	r3, [pc, #136]	; (1b84 <udc_iface_disable+0xa0>)
    1afa:	4798      	blx	r3
    1afc:	1c03      	adds	r3, r0, #0
    1afe:	1c1a      	adds	r2, r3, #0
    1b00:	2301      	movs	r3, #1
    1b02:	4053      	eors	r3, r2
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d001      	beq.n	1b0e <udc_iface_disable+0x2a>
		return false;
    1b0a:	2300      	movs	r3, #0
    1b0c:	e035      	b.n	1b7a <udc_iface_disable+0x96>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b0e:	4b1e      	ldr	r3, [pc, #120]	; (1b88 <udc_iface_disable+0xa4>)
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	685a      	ldr	r2, [r3, #4]
    1b14:	1dfb      	adds	r3, r7, #7
    1b16:	781b      	ldrb	r3, [r3, #0]
    1b18:	009b      	lsls	r3, r3, #2
    1b1a:	18d3      	adds	r3, r2, r3
    1b1c:	681b      	ldr	r3, [r3, #0]
    1b1e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b20:	68bb      	ldr	r3, [r7, #8]
    1b22:	68db      	ldr	r3, [r3, #12]
    1b24:	4798      	blx	r3
    1b26:	1c03      	adds	r3, r0, #0
    1b28:	1c1a      	adds	r2, r3, #0
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	1c18      	adds	r0, r3, #0
    1b30:	1c11      	adds	r1, r2, #0
    1b32:	4b14      	ldr	r3, [pc, #80]	; (1b84 <udc_iface_disable+0xa0>)
    1b34:	4798      	blx	r3
    1b36:	1c03      	adds	r3, r0, #0
    1b38:	1c1a      	adds	r2, r3, #0
    1b3a:	2301      	movs	r3, #1
    1b3c:	4053      	eors	r3, r2
    1b3e:	b2db      	uxtb	r3, r3
    1b40:	2b00      	cmp	r3, #0
    1b42:	d001      	beq.n	1b48 <udc_iface_disable+0x64>
		return false;
    1b44:	2300      	movs	r3, #0
    1b46:	e018      	b.n	1b7a <udc_iface_disable+0x96>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1b48:	4b10      	ldr	r3, [pc, #64]	; (1b8c <udc_iface_disable+0xa8>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1b4e:	68fb      	ldr	r3, [r7, #12]
    1b50:	1c18      	adds	r0, r3, #0
    1b52:	2105      	movs	r1, #5
    1b54:	4b0e      	ldr	r3, [pc, #56]	; (1b90 <udc_iface_disable+0xac>)
    1b56:	4798      	blx	r3
    1b58:	1c03      	adds	r3, r0, #0
    1b5a:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    1b5c:	68fb      	ldr	r3, [r7, #12]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d105      	bne.n	1b6e <udc_iface_disable+0x8a>
				break;
    1b62:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    1b64:	68bb      	ldr	r3, [r7, #8]
    1b66:	685b      	ldr	r3, [r3, #4]
    1b68:	4798      	blx	r3
	return true;
    1b6a:	2301      	movs	r3, #1
    1b6c:	e005      	b.n	1b7a <udc_iface_disable+0x96>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	789b      	ldrb	r3, [r3, #2]
    1b72:	1c18      	adds	r0, r3, #0
    1b74:	4b07      	ldr	r3, [pc, #28]	; (1b94 <udc_iface_disable+0xb0>)
    1b76:	4798      	blx	r3
		}
    1b78:	e7e9      	b.n	1b4e <udc_iface_disable+0x6a>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    1b7a:	1c18      	adds	r0, r3, #0
    1b7c:	46bd      	mov	sp, r7
    1b7e:	b004      	add	sp, #16
    1b80:	bd80      	pop	{r7, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	00001a41 	.word	0x00001a41
    1b88:	20000118 	.word	0x20000118
    1b8c:	2000011c 	.word	0x2000011c
    1b90:	000019e1 	.word	0x000019e1
    1b94:	00005245 	.word	0x00005245

00001b98 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b084      	sub	sp, #16
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	1c02      	adds	r2, r0, #0
    1ba0:	1dfb      	adds	r3, r7, #7
    1ba2:	701a      	strb	r2, [r3, #0]
    1ba4:	1dbb      	adds	r3, r7, #6
    1ba6:	1c0a      	adds	r2, r1, #0
    1ba8:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781a      	ldrb	r2, [r3, #0]
    1bae:	1dbb      	adds	r3, r7, #6
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	1c10      	adds	r0, r2, #0
    1bb4:	1c19      	adds	r1, r3, #0
    1bb6:	4b20      	ldr	r3, [pc, #128]	; (1c38 <udc_iface_enable+0xa0>)
    1bb8:	4798      	blx	r3
    1bba:	1c03      	adds	r3, r0, #0
    1bbc:	1c1a      	adds	r2, r3, #0
    1bbe:	2301      	movs	r3, #1
    1bc0:	4053      	eors	r3, r2
    1bc2:	b2db      	uxtb	r3, r3
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d001      	beq.n	1bcc <udc_iface_enable+0x34>
		return false;
    1bc8:	2300      	movs	r3, #0
    1bca:	e030      	b.n	1c2e <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1bcc:	4b1b      	ldr	r3, [pc, #108]	; (1c3c <udc_iface_enable+0xa4>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1bd2:	68fb      	ldr	r3, [r7, #12]
    1bd4:	1c18      	adds	r0, r3, #0
    1bd6:	2105      	movs	r1, #5
    1bd8:	4b19      	ldr	r3, [pc, #100]	; (1c40 <udc_iface_enable+0xa8>)
    1bda:	4798      	blx	r3
    1bdc:	1c03      	adds	r3, r0, #0
    1bde:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d10c      	bne.n	1c00 <udc_iface_enable+0x68>
			break;
    1be6:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1be8:	4b16      	ldr	r3, [pc, #88]	; (1c44 <udc_iface_enable+0xac>)
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	685a      	ldr	r2, [r3, #4]
    1bee:	1dfb      	adds	r3, r7, #7
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	009b      	lsls	r3, r3, #2
    1bf4:	18d3      	adds	r3, r2, r3
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	4798      	blx	r3
    1bfc:	1c03      	adds	r3, r0, #0
    1bfe:	e016      	b.n	1c2e <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	7898      	ldrb	r0, [r3, #2]
    1c04:	68fb      	ldr	r3, [r7, #12]
    1c06:	78d9      	ldrb	r1, [r3, #3]
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	791a      	ldrb	r2, [r3, #4]
    1c0c:	795b      	ldrb	r3, [r3, #5]
    1c0e:	021b      	lsls	r3, r3, #8
    1c10:	4313      	orrs	r3, r2
    1c12:	b29b      	uxth	r3, r3
    1c14:	1c1a      	adds	r2, r3, #0
    1c16:	4b0c      	ldr	r3, [pc, #48]	; (1c48 <udc_iface_enable+0xb0>)
    1c18:	4798      	blx	r3
    1c1a:	1c03      	adds	r3, r0, #0
    1c1c:	1c1a      	adds	r2, r3, #0
    1c1e:	2301      	movs	r3, #1
    1c20:	4053      	eors	r3, r2
    1c22:	b2db      	uxtb	r3, r3
    1c24:	2b00      	cmp	r3, #0
    1c26:	d001      	beq.n	1c2c <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    1c28:	2300      	movs	r3, #0
    1c2a:	e000      	b.n	1c2e <udc_iface_enable+0x96>
		}
	}
    1c2c:	e7d1      	b.n	1bd2 <udc_iface_enable+0x3a>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    1c2e:	1c18      	adds	r0, r3, #0
    1c30:	46bd      	mov	sp, r7
    1c32:	b004      	add	sp, #16
    1c34:	bd80      	pop	{r7, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00001a41 	.word	0x00001a41
    1c3c:	2000011c 	.word	0x2000011c
    1c40:	000019e1 	.word	0x000019e1
    1c44:	20000118 	.word	0x20000118
    1c48:	000052d5 	.word	0x000052d5

00001c4c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	af00      	add	r7, sp, #0
	udd_enable();
    1c50:	4b01      	ldr	r3, [pc, #4]	; (1c58 <udc_start+0xc>)
    1c52:	4798      	blx	r3
}
    1c54:	46bd      	mov	sp, r7
    1c56:	bd80      	pop	{r7, pc}
    1c58:	00005f35 	.word	0x00005f35

00001c5c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    1c62:	4b16      	ldr	r3, [pc, #88]	; (1cbc <udc_reset+0x60>)
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d015      	beq.n	1c96 <udc_reset+0x3a>
		for (iface_num = 0;
    1c6a:	1dfb      	adds	r3, r7, #7
    1c6c:	2200      	movs	r2, #0
    1c6e:	701a      	strb	r2, [r3, #0]
    1c70:	e009      	b.n	1c86 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    1c72:	1dfb      	adds	r3, r7, #7
    1c74:	781b      	ldrb	r3, [r3, #0]
    1c76:	1c18      	adds	r0, r3, #0
    1c78:	4b11      	ldr	r3, [pc, #68]	; (1cc0 <udc_reset+0x64>)
    1c7a:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1c7c:	1dfb      	adds	r3, r7, #7
    1c7e:	781a      	ldrb	r2, [r3, #0]
    1c80:	1dfb      	adds	r3, r7, #7
    1c82:	3201      	adds	r2, #1
    1c84:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <udc_reset+0x68>)
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1c8e:	1dfa      	adds	r2, r7, #7
    1c90:	7812      	ldrb	r2, [r2, #0]
    1c92:	429a      	cmp	r2, r3
    1c94:	d3ed      	bcc.n	1c72 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <udc_reset+0x60>)
    1c98:	2200      	movs	r2, #0
    1c9a:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    1c9c:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <udc_reset+0x6c>)
    1c9e:	881b      	ldrh	r3, [r3, #0]
    1ca0:	2202      	movs	r2, #2
    1ca2:	4013      	ands	r3, r2
    1ca4:	b29b      	uxth	r3, r3
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d001      	beq.n	1cae <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    1caa:	4b08      	ldr	r3, [pc, #32]	; (1ccc <udc_reset+0x70>)
    1cac:	4798      	blx	r3
	}
#endif
	udc_device_status =
    1cae:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <udc_reset+0x6c>)
    1cb0:	2200      	movs	r2, #0
    1cb2:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    1cb4:	46bd      	mov	sp, r7
    1cb6:	b002      	add	sp, #8
    1cb8:	bd80      	pop	{r7, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	20000114 	.word	0x20000114
    1cc0:	00001ae5 	.word	0x00001ae5
    1cc4:	20000118 	.word	0x20000118
    1cc8:	2000010c 	.word	0x2000010c
    1ccc:	00007ee1 	.word	0x00007ee1

00001cd0 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b082      	sub	sp, #8
    1cd4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    1cd6:	4b16      	ldr	r3, [pc, #88]	; (1d30 <udc_sof_notify+0x60>)
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d025      	beq.n	1d2a <udc_sof_notify+0x5a>
		for (iface_num = 0;
    1cde:	1dfb      	adds	r3, r7, #7
    1ce0:	2200      	movs	r2, #0
    1ce2:	701a      	strb	r2, [r3, #0]
    1ce4:	e019      	b.n	1d1a <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1ce6:	4b13      	ldr	r3, [pc, #76]	; (1d34 <udc_sof_notify+0x64>)
    1ce8:	681b      	ldr	r3, [r3, #0]
    1cea:	685a      	ldr	r2, [r3, #4]
    1cec:	1dfb      	adds	r3, r7, #7
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	009b      	lsls	r3, r3, #2
    1cf2:	18d3      	adds	r3, r2, r3
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	691b      	ldr	r3, [r3, #16]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d009      	beq.n	1d10 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1cfc:	4b0d      	ldr	r3, [pc, #52]	; (1d34 <udc_sof_notify+0x64>)
    1cfe:	681b      	ldr	r3, [r3, #0]
    1d00:	685a      	ldr	r2, [r3, #4]
    1d02:	1dfb      	adds	r3, r7, #7
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	009b      	lsls	r3, r3, #2
    1d08:	18d3      	adds	r3, r2, r3
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	691b      	ldr	r3, [r3, #16]
    1d0e:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1d10:	1dfb      	adds	r3, r7, #7
    1d12:	781a      	ldrb	r2, [r3, #0]
    1d14:	1dfb      	adds	r3, r7, #7
    1d16:	3201      	adds	r2, #1
    1d18:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d1a:	4b06      	ldr	r3, [pc, #24]	; (1d34 <udc_sof_notify+0x64>)
    1d1c:	681b      	ldr	r3, [r3, #0]
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1d22:	1dfa      	adds	r2, r7, #7
    1d24:	7812      	ldrb	r2, [r2, #0]
    1d26:	429a      	cmp	r2, r3
    1d28:	d3dd      	bcc.n	1ce6 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1d2a:	46bd      	mov	sp, r7
    1d2c:	b002      	add	sp, #8
    1d2e:	bd80      	pop	{r7, pc}
    1d30:	20000114 	.word	0x20000114
    1d34:	20000118 	.word	0x20000118

00001d38 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1d3c:	4b07      	ldr	r3, [pc, #28]	; (1d5c <udc_req_std_dev_get_status+0x24>)
    1d3e:	88db      	ldrh	r3, [r3, #6]
    1d40:	2b02      	cmp	r3, #2
    1d42:	d001      	beq.n	1d48 <udc_req_std_dev_get_status+0x10>
		return false;
    1d44:	2300      	movs	r3, #0
    1d46:	e005      	b.n	1d54 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1d48:	4b05      	ldr	r3, [pc, #20]	; (1d60 <udc_req_std_dev_get_status+0x28>)
    1d4a:	1c18      	adds	r0, r3, #0
    1d4c:	2102      	movs	r1, #2
    1d4e:	4b05      	ldr	r3, [pc, #20]	; (1d64 <udc_req_std_dev_get_status+0x2c>)
    1d50:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    1d52:	2301      	movs	r3, #1
}
    1d54:	1c18      	adds	r0, r3, #0
    1d56:	46bd      	mov	sp, r7
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	20000444 	.word	0x20000444
    1d60:	2000010c 	.word	0x2000010c
    1d64:	00005649 	.word	0x00005649

00001d68 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d6c:	4b0c      	ldr	r3, [pc, #48]	; (1da0 <udc_req_std_ep_get_status+0x38>)
    1d6e:	88db      	ldrh	r3, [r3, #6]
    1d70:	2b02      	cmp	r3, #2
    1d72:	d001      	beq.n	1d78 <udc_req_std_ep_get_status+0x10>
		return false;
    1d74:	2300      	movs	r3, #0
    1d76:	e00f      	b.n	1d98 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d78:	4b09      	ldr	r3, [pc, #36]	; (1da0 <udc_req_std_ep_get_status+0x38>)
    1d7a:	889b      	ldrh	r3, [r3, #4]
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	1c18      	adds	r0, r3, #0
    1d80:	4b08      	ldr	r3, [pc, #32]	; (1da4 <udc_req_std_ep_get_status+0x3c>)
    1d82:	4798      	blx	r3
    1d84:	1c03      	adds	r3, r0, #0
    1d86:	b29a      	uxth	r2, r3
    1d88:	4b07      	ldr	r3, [pc, #28]	; (1da8 <udc_req_std_ep_get_status+0x40>)
    1d8a:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <udc_req_std_ep_get_status+0x40>)
    1d8e:	1c18      	adds	r0, r3, #0
    1d90:	2102      	movs	r1, #2
    1d92:	4b06      	ldr	r3, [pc, #24]	; (1dac <udc_req_std_ep_get_status+0x44>)
    1d94:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    1d96:	2301      	movs	r3, #1
}
    1d98:	1c18      	adds	r0, r3, #0
    1d9a:	46bd      	mov	sp, r7
    1d9c:	bd80      	pop	{r7, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	20000444 	.word	0x20000444
    1da4:	00005485 	.word	0x00005485
    1da8:	20000120 	.word	0x20000120
    1dac:	00005649 	.word	0x00005649

00001db0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1db4:	4b0c      	ldr	r3, [pc, #48]	; (1de8 <udc_req_std_dev_clear_feature+0x38>)
    1db6:	88db      	ldrh	r3, [r3, #6]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d001      	beq.n	1dc0 <udc_req_std_dev_clear_feature+0x10>
		return false;
    1dbc:	2300      	movs	r3, #0
    1dbe:	e00f      	b.n	1de0 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1dc0:	4b09      	ldr	r3, [pc, #36]	; (1de8 <udc_req_std_dev_clear_feature+0x38>)
    1dc2:	885b      	ldrh	r3, [r3, #2]
    1dc4:	2b01      	cmp	r3, #1
    1dc6:	d10a      	bne.n	1dde <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1dc8:	4b08      	ldr	r3, [pc, #32]	; (1dec <udc_req_std_dev_clear_feature+0x3c>)
    1dca:	881b      	ldrh	r3, [r3, #0]
    1dcc:	2202      	movs	r2, #2
    1dce:	4393      	bics	r3, r2
    1dd0:	b29a      	uxth	r2, r3
    1dd2:	4b06      	ldr	r3, [pc, #24]	; (1dec <udc_req_std_dev_clear_feature+0x3c>)
    1dd4:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1dd6:	4b06      	ldr	r3, [pc, #24]	; (1df0 <udc_req_std_dev_clear_feature+0x40>)
    1dd8:	4798      	blx	r3
#endif
		return true;
    1dda:	2301      	movs	r3, #1
    1ddc:	e000      	b.n	1de0 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    1dde:	2300      	movs	r3, #0
}
    1de0:	1c18      	adds	r0, r3, #0
    1de2:	46bd      	mov	sp, r7
    1de4:	bd80      	pop	{r7, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	20000444 	.word	0x20000444
    1dec:	2000010c 	.word	0x2000010c
    1df0:	00007ee1 	.word	0x00007ee1

00001df4 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    1df4:	b580      	push	{r7, lr}
    1df6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1df8:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <udc_req_std_ep_clear_feature+0x30>)
    1dfa:	88db      	ldrh	r3, [r3, #6]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d001      	beq.n	1e04 <udc_req_std_ep_clear_feature+0x10>
		return false;
    1e00:	2300      	movs	r3, #0
    1e02:	e00c      	b.n	1e1e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e04:	4b07      	ldr	r3, [pc, #28]	; (1e24 <udc_req_std_ep_clear_feature+0x30>)
    1e06:	885b      	ldrh	r3, [r3, #2]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d107      	bne.n	1e1c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e0c:	4b05      	ldr	r3, [pc, #20]	; (1e24 <udc_req_std_ep_clear_feature+0x30>)
    1e0e:	889b      	ldrh	r3, [r3, #4]
    1e10:	b2db      	uxtb	r3, r3
    1e12:	1c18      	adds	r0, r3, #0
    1e14:	4b04      	ldr	r3, [pc, #16]	; (1e28 <udc_req_std_ep_clear_feature+0x34>)
    1e16:	4798      	blx	r3
    1e18:	1c03      	adds	r3, r0, #0
    1e1a:	e000      	b.n	1e1e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    1e1c:	2300      	movs	r3, #0
}
    1e1e:	1c18      	adds	r0, r3, #0
    1e20:	46bd      	mov	sp, r7
    1e22:	bd80      	pop	{r7, pc}
    1e24:	20000444 	.word	0x20000444
    1e28:	00005509 	.word	0x00005509

00001e2c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1e30:	4b0c      	ldr	r3, [pc, #48]	; (1e64 <udc_req_std_dev_set_feature+0x38>)
    1e32:	88db      	ldrh	r3, [r3, #6]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d001      	beq.n	1e3c <udc_req_std_dev_set_feature+0x10>
		return false;
    1e38:	2300      	movs	r3, #0
    1e3a:	e010      	b.n	1e5e <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1e3c:	4b09      	ldr	r3, [pc, #36]	; (1e64 <udc_req_std_dev_set_feature+0x38>)
    1e3e:	885b      	ldrh	r3, [r3, #2]
    1e40:	2b01      	cmp	r3, #1
    1e42:	d002      	beq.n	1e4a <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    1e44:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    1e46:	2300      	movs	r3, #0
    1e48:	e009      	b.n	1e5e <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1e4a:	4b07      	ldr	r3, [pc, #28]	; (1e68 <udc_req_std_dev_set_feature+0x3c>)
    1e4c:	881b      	ldrh	r3, [r3, #0]
    1e4e:	2202      	movs	r2, #2
    1e50:	4313      	orrs	r3, r2
    1e52:	b29a      	uxth	r2, r3
    1e54:	4b04      	ldr	r3, [pc, #16]	; (1e68 <udc_req_std_dev_set_feature+0x3c>)
    1e56:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    1e58:	4b04      	ldr	r3, [pc, #16]	; (1e6c <udc_req_std_dev_set_feature+0x40>)
    1e5a:	4798      	blx	r3
		return true;
    1e5c:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    1e5e:	1c18      	adds	r0, r3, #0
    1e60:	46bd      	mov	sp, r7
    1e62:	bd80      	pop	{r7, pc}
    1e64:	20000444 	.word	0x20000444
    1e68:	2000010c 	.word	0x2000010c
    1e6c:	00007ed1 	.word	0x00007ed1

00001e70 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1e74:	4b0d      	ldr	r3, [pc, #52]	; (1eac <udc_req_std_ep_set_feature+0x3c>)
    1e76:	88db      	ldrh	r3, [r3, #6]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d001      	beq.n	1e80 <udc_req_std_ep_set_feature+0x10>
		return false;
    1e7c:	2300      	movs	r3, #0
    1e7e:	e012      	b.n	1ea6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e80:	4b0a      	ldr	r3, [pc, #40]	; (1eac <udc_req_std_ep_set_feature+0x3c>)
    1e82:	885b      	ldrh	r3, [r3, #2]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d10d      	bne.n	1ea4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e88:	4b08      	ldr	r3, [pc, #32]	; (1eac <udc_req_std_ep_set_feature+0x3c>)
    1e8a:	889b      	ldrh	r3, [r3, #4]
    1e8c:	b2db      	uxtb	r3, r3
    1e8e:	1c18      	adds	r0, r3, #0
    1e90:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <udc_req_std_ep_set_feature+0x40>)
    1e92:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <udc_req_std_ep_set_feature+0x3c>)
    1e96:	889b      	ldrh	r3, [r3, #4]
    1e98:	b2db      	uxtb	r3, r3
    1e9a:	1c18      	adds	r0, r3, #0
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <udc_req_std_ep_set_feature+0x44>)
    1e9e:	4798      	blx	r3
    1ea0:	1c03      	adds	r3, r0, #0
    1ea2:	e000      	b.n	1ea6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    1ea4:	2300      	movs	r3, #0
}
    1ea6:	1c18      	adds	r0, r3, #0
    1ea8:	46bd      	mov	sp, r7
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	20000444 	.word	0x20000444
    1eb0:	000051b9 	.word	0x000051b9
    1eb4:	000054b1 	.word	0x000054b1

00001eb8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1ebc:	4b05      	ldr	r3, [pc, #20]	; (1ed4 <udc_valid_address+0x1c>)
    1ebe:	885b      	ldrh	r3, [r3, #2]
    1ec0:	b2db      	uxtb	r3, r3
    1ec2:	227f      	movs	r2, #127	; 0x7f
    1ec4:	4013      	ands	r3, r2
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	1c18      	adds	r0, r3, #0
    1eca:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <udc_valid_address+0x20>)
    1ecc:	4798      	blx	r3
}
    1ece:	46bd      	mov	sp, r7
    1ed0:	bd80      	pop	{r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	20000444 	.word	0x20000444
    1ed8:	000055b5 	.word	0x000055b5

00001edc <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1ee0:	4b06      	ldr	r3, [pc, #24]	; (1efc <udc_req_std_dev_set_address+0x20>)
    1ee2:	88db      	ldrh	r3, [r3, #6]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d001      	beq.n	1eec <udc_req_std_dev_set_address+0x10>
		return false;
    1ee8:	2300      	movs	r3, #0
    1eea:	e003      	b.n	1ef4 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1eec:	4b03      	ldr	r3, [pc, #12]	; (1efc <udc_req_std_dev_set_address+0x20>)
    1eee:	4a04      	ldr	r2, [pc, #16]	; (1f00 <udc_req_std_dev_set_address+0x24>)
    1ef0:	611a      	str	r2, [r3, #16]
	return true;
    1ef2:	2301      	movs	r3, #1
}
    1ef4:	1c18      	adds	r0, r3, #0
    1ef6:	46bd      	mov	sp, r7
    1ef8:	bd80      	pop	{r7, pc}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	20000444 	.word	0x20000444
    1f00:	00001eb9 	.word	0x00001eb9

00001f04 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b084      	sub	sp, #16
    1f08:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    1f0a:	1dfb      	adds	r3, r7, #7
    1f0c:	2200      	movs	r2, #0
    1f0e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1f10:	4b2c      	ldr	r3, [pc, #176]	; (1fc4 <udc_req_std_dev_get_str_desc+0xc0>)
    1f12:	885b      	ldrh	r3, [r3, #2]
    1f14:	1c1a      	adds	r2, r3, #0
    1f16:	23ff      	movs	r3, #255	; 0xff
    1f18:	4013      	ands	r3, r2
    1f1a:	2b01      	cmp	r3, #1
    1f1c:	d009      	beq.n	1f32 <udc_req_std_dev_get_str_desc+0x2e>
    1f1e:	2b02      	cmp	r3, #2
    1f20:	d00d      	beq.n	1f3e <udc_req_std_dev_get_str_desc+0x3a>
    1f22:	2b00      	cmp	r3, #0
    1f24:	d111      	bne.n	1f4a <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1f26:	4b28      	ldr	r3, [pc, #160]	; (1fc8 <udc_req_std_dev_get_str_desc+0xc4>)
    1f28:	1c18      	adds	r0, r3, #0
    1f2a:	2104      	movs	r1, #4
    1f2c:	4b27      	ldr	r3, [pc, #156]	; (1fcc <udc_req_std_dev_get_str_desc+0xc8>)
    1f2e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    1f30:	e00d      	b.n	1f4e <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1f32:	1dfb      	adds	r3, r7, #7
    1f34:	2209      	movs	r2, #9
    1f36:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    1f38:	4b25      	ldr	r3, [pc, #148]	; (1fd0 <udc_req_std_dev_get_str_desc+0xcc>)
    1f3a:	60bb      	str	r3, [r7, #8]
		break;
    1f3c:	e007      	b.n	1f4e <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1f3e:	1dfb      	adds	r3, r7, #7
    1f40:	2209      	movs	r2, #9
    1f42:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    1f44:	4b23      	ldr	r3, [pc, #140]	; (1fd4 <udc_req_std_dev_get_str_desc+0xd0>)
    1f46:	60bb      	str	r3, [r7, #8]
		break;
    1f48:	e001      	b.n	1f4e <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    1f4a:	2300      	movs	r3, #0
    1f4c:	e036      	b.n	1fbc <udc_req_std_dev_get_str_desc+0xb8>
	}

	if (str_length) {
    1f4e:	1dfb      	adds	r3, r7, #7
    1f50:	781b      	ldrb	r3, [r3, #0]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d031      	beq.n	1fba <udc_req_std_dev_get_str_desc+0xb6>
		for(i = 0; i < str_length; i++) {
    1f56:	230f      	movs	r3, #15
    1f58:	18fb      	adds	r3, r7, r3
    1f5a:	2200      	movs	r2, #0
    1f5c:	701a      	strb	r2, [r3, #0]
    1f5e:	e015      	b.n	1f8c <udc_req_std_dev_get_str_desc+0x88>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1f60:	230f      	movs	r3, #15
    1f62:	18fb      	adds	r3, r7, r3
    1f64:	781b      	ldrb	r3, [r3, #0]
    1f66:	220f      	movs	r2, #15
    1f68:	18ba      	adds	r2, r7, r2
    1f6a:	7812      	ldrb	r2, [r2, #0]
    1f6c:	68b9      	ldr	r1, [r7, #8]
    1f6e:	188a      	adds	r2, r1, r2
    1f70:	7812      	ldrb	r2, [r2, #0]
    1f72:	b291      	uxth	r1, r2
    1f74:	4a18      	ldr	r2, [pc, #96]	; (1fd8 <udc_req_std_dev_get_str_desc+0xd4>)
    1f76:	005b      	lsls	r3, r3, #1
    1f78:	18d3      	adds	r3, r2, r3
    1f7a:	1c0a      	adds	r2, r1, #0
    1f7c:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1f7e:	230f      	movs	r3, #15
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	781a      	ldrb	r2, [r3, #0]
    1f84:	230f      	movs	r3, #15
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	3201      	adds	r2, #1
    1f8a:	701a      	strb	r2, [r3, #0]
    1f8c:	230f      	movs	r3, #15
    1f8e:	18fa      	adds	r2, r7, r3
    1f90:	1dfb      	adds	r3, r7, #7
    1f92:	7812      	ldrb	r2, [r2, #0]
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	429a      	cmp	r2, r3
    1f98:	d3e2      	bcc.n	1f60 <udc_req_std_dev_get_str_desc+0x5c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1f9a:	1dfb      	adds	r3, r7, #7
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	3301      	adds	r3, #1
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	18db      	adds	r3, r3, r3
    1fa4:	b2da      	uxtb	r2, r3
    1fa6:	4b0c      	ldr	r3, [pc, #48]	; (1fd8 <udc_req_std_dev_get_str_desc+0xd4>)
    1fa8:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    1faa:	4b0b      	ldr	r3, [pc, #44]	; (1fd8 <udc_req_std_dev_get_str_desc+0xd4>)
    1fac:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    1fae:	b29b      	uxth	r3, r3
    1fb0:	4a09      	ldr	r2, [pc, #36]	; (1fd8 <udc_req_std_dev_get_str_desc+0xd4>)
    1fb2:	1c10      	adds	r0, r2, #0
    1fb4:	1c19      	adds	r1, r3, #0
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <udc_req_std_dev_get_str_desc+0xc8>)
    1fb8:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    1fba:	2301      	movs	r3, #1
}
    1fbc:	1c18      	adds	r0, r3, #0
    1fbe:	46bd      	mov	sp, r7
    1fc0:	b004      	add	sp, #16
    1fc2:	bd80      	pop	{r7, pc}
    1fc4:	20000444 	.word	0x20000444
    1fc8:	200000a8 	.word	0x200000a8
    1fcc:	00005649 	.word	0x00005649
    1fd0:	200000ac 	.word	0x200000ac
    1fd4:	200000b8 	.word	0x200000b8
    1fd8:	200000c4 	.word	0x200000c4

00001fdc <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	b082      	sub	sp, #8
    1fe0:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1fe2:	4b3a      	ldr	r3, [pc, #232]	; (20cc <STACK_SIZE+0xcc>)
    1fe4:	885a      	ldrh	r2, [r3, #2]
    1fe6:	1dfb      	adds	r3, r7, #7
    1fe8:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1fea:	4b38      	ldr	r3, [pc, #224]	; (20cc <STACK_SIZE+0xcc>)
    1fec:	885b      	ldrh	r3, [r3, #2]
    1fee:	0a1b      	lsrs	r3, r3, #8
    1ff0:	b29b      	uxth	r3, r3
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	2b02      	cmp	r3, #2
    1ff6:	d013      	beq.n	2020 <STACK_SIZE+0x20>
    1ff8:	dc02      	bgt.n	2000 <STACK_SIZE>
    1ffa:	2b01      	cmp	r3, #1
    1ffc:	d005      	beq.n	200a <STACK_SIZE+0xa>
    1ffe:	e054      	b.n	20aa <STACK_SIZE+0xaa>
    2000:	2b03      	cmp	r3, #3
    2002:	d046      	beq.n	2092 <STACK_SIZE+0x92>
    2004:	2b0f      	cmp	r3, #15
    2006:	d030      	beq.n	206a <STACK_SIZE+0x6a>
    2008:	e04f      	b.n	20aa <STACK_SIZE+0xaa>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    200a:	4b31      	ldr	r3, [pc, #196]	; (20d0 <STACK_SIZE+0xd0>)
    200c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    200e:	4b30      	ldr	r3, [pc, #192]	; (20d0 <STACK_SIZE+0xd0>)
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    2014:	b29b      	uxth	r3, r3
    2016:	1c10      	adds	r0, r2, #0
    2018:	1c19      	adds	r1, r3, #0
    201a:	4b2e      	ldr	r3, [pc, #184]	; (20d4 <STACK_SIZE+0xd4>)
    201c:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    201e:	e046      	b.n	20ae <STACK_SIZE+0xae>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    2020:	4b2b      	ldr	r3, [pc, #172]	; (20d0 <STACK_SIZE+0xd0>)
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	7c5b      	ldrb	r3, [r3, #17]
    2026:	1dfa      	adds	r2, r7, #7
    2028:	7812      	ldrb	r2, [r2, #0]
    202a:	429a      	cmp	r2, r3
    202c:	d301      	bcc.n	2032 <STACK_SIZE+0x32>
					bNumConfigurations) {
				return false;
    202e:	2300      	movs	r3, #0
    2030:	e048      	b.n	20c4 <STACK_SIZE+0xc4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    2032:	4b27      	ldr	r3, [pc, #156]	; (20d0 <STACK_SIZE+0xd0>)
    2034:	685a      	ldr	r2, [r3, #4]
    2036:	1dfb      	adds	r3, r7, #7
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	00db      	lsls	r3, r3, #3
    203c:	18d3      	adds	r3, r2, r3
    203e:	6819      	ldr	r1, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    2040:	4b23      	ldr	r3, [pc, #140]	; (20d0 <STACK_SIZE+0xd0>)
    2042:	685a      	ldr	r2, [r3, #4]
    2044:	1dfb      	adds	r3, r7, #7
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	00db      	lsls	r3, r3, #3
    204a:	18d3      	adds	r3, r2, r3
    204c:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    204e:	789a      	ldrb	r2, [r3, #2]
    2050:	78db      	ldrb	r3, [r3, #3]
    2052:	021b      	lsls	r3, r3, #8
    2054:	4313      	orrs	r3, r2
    2056:	b29b      	uxth	r3, r3
    2058:	1c08      	adds	r0, r1, #0
    205a:	1c19      	adds	r1, r3, #0
    205c:	4b1d      	ldr	r3, [pc, #116]	; (20d4 <STACK_SIZE+0xd4>)
    205e:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2060:	4b1a      	ldr	r3, [pc, #104]	; (20cc <STACK_SIZE+0xcc>)
    2062:	689b      	ldr	r3, [r3, #8]
    2064:	2202      	movs	r2, #2
    2066:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    2068:	e021      	b.n	20ae <STACK_SIZE+0xae>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    206a:	4b19      	ldr	r3, [pc, #100]	; (20d0 <STACK_SIZE+0xd0>)
    206c:	689b      	ldr	r3, [r3, #8]
    206e:	2b00      	cmp	r3, #0
    2070:	d101      	bne.n	2076 <STACK_SIZE+0x76>
			return false;
    2072:	2300      	movs	r3, #0
    2074:	e026      	b.n	20c4 <STACK_SIZE+0xc4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    2076:	4b16      	ldr	r3, [pc, #88]	; (20d0 <STACK_SIZE+0xd0>)
    2078:	6899      	ldr	r1, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    207a:	4b15      	ldr	r3, [pc, #84]	; (20d0 <STACK_SIZE+0xd0>)
    207c:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    207e:	789a      	ldrb	r2, [r3, #2]
    2080:	78db      	ldrb	r3, [r3, #3]
    2082:	021b      	lsls	r3, r3, #8
    2084:	4313      	orrs	r3, r2
    2086:	b29b      	uxth	r3, r3
    2088:	1c08      	adds	r0, r1, #0
    208a:	1c19      	adds	r1, r3, #0
    208c:	4b11      	ldr	r3, [pc, #68]	; (20d4 <STACK_SIZE+0xd4>)
    208e:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    2090:	e00d      	b.n	20ae <STACK_SIZE+0xae>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    2092:	4b11      	ldr	r3, [pc, #68]	; (20d8 <STACK_SIZE+0xd8>)
    2094:	4798      	blx	r3
    2096:	1c03      	adds	r3, r0, #0
    2098:	1c1a      	adds	r2, r3, #0
    209a:	2301      	movs	r3, #1
    209c:	4053      	eors	r3, r2
    209e:	b2db      	uxtb	r3, r3
    20a0:	2b00      	cmp	r3, #0
    20a2:	d001      	beq.n	20a8 <STACK_SIZE+0xa8>
			return false;
    20a4:	2300      	movs	r3, #0
    20a6:	e00d      	b.n	20c4 <STACK_SIZE+0xc4>
		}
		break;
    20a8:	e001      	b.n	20ae <STACK_SIZE+0xae>

	default:
		// Unknown descriptor requested
		return false;
    20aa:	2300      	movs	r3, #0
    20ac:	e00a      	b.n	20c4 <STACK_SIZE+0xc4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    20ae:	4b07      	ldr	r3, [pc, #28]	; (20cc <STACK_SIZE+0xcc>)
    20b0:	88da      	ldrh	r2, [r3, #6]
    20b2:	4b06      	ldr	r3, [pc, #24]	; (20cc <STACK_SIZE+0xcc>)
    20b4:	899b      	ldrh	r3, [r3, #12]
    20b6:	429a      	cmp	r2, r3
    20b8:	d203      	bcs.n	20c2 <STACK_SIZE+0xc2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    20ba:	4b04      	ldr	r3, [pc, #16]	; (20cc <STACK_SIZE+0xcc>)
    20bc:	88da      	ldrh	r2, [r3, #6]
    20be:	4b03      	ldr	r3, [pc, #12]	; (20cc <STACK_SIZE+0xcc>)
    20c0:	819a      	strh	r2, [r3, #12]
	}
	return true;
    20c2:	2301      	movs	r3, #1
}
    20c4:	1c18      	adds	r0, r3, #0
    20c6:	46bd      	mov	sp, r7
    20c8:	b002      	add	sp, #8
    20ca:	bd80      	pop	{r7, pc}
    20cc:	20000444 	.word	0x20000444
    20d0:	2000009c 	.word	0x2000009c
    20d4:	00005649 	.word	0x00005649
    20d8:	00001f05 	.word	0x00001f05

000020dc <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    20dc:	b580      	push	{r7, lr}
    20de:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    20e0:	4b07      	ldr	r3, [pc, #28]	; (2100 <udc_req_std_dev_get_configuration+0x24>)
    20e2:	88db      	ldrh	r3, [r3, #6]
    20e4:	2b01      	cmp	r3, #1
    20e6:	d001      	beq.n	20ec <udc_req_std_dev_get_configuration+0x10>
		return false;
    20e8:	2300      	movs	r3, #0
    20ea:	e005      	b.n	20f8 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    20ec:	4b05      	ldr	r3, [pc, #20]	; (2104 <udc_req_std_dev_get_configuration+0x28>)
    20ee:	1c18      	adds	r0, r3, #0
    20f0:	2101      	movs	r1, #1
    20f2:	4b05      	ldr	r3, [pc, #20]	; (2108 <udc_req_std_dev_get_configuration+0x2c>)
    20f4:	4798      	blx	r3
	return true;
    20f6:	2301      	movs	r3, #1
}
    20f8:	1c18      	adds	r0, r3, #0
    20fa:	46bd      	mov	sp, r7
    20fc:	bd80      	pop	{r7, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	20000444 	.word	0x20000444
    2104:	20000114 	.word	0x20000114
    2108:	00005649 	.word	0x00005649

0000210c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    210c:	b580      	push	{r7, lr}
    210e:	b082      	sub	sp, #8
    2110:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    2112:	4b2a      	ldr	r3, [pc, #168]	; (21bc <udc_req_std_dev_set_configuration+0xb0>)
    2114:	88db      	ldrh	r3, [r3, #6]
    2116:	2b00      	cmp	r3, #0
    2118:	d001      	beq.n	211e <udc_req_std_dev_set_configuration+0x12>
		return false;
    211a:	2300      	movs	r3, #0
    211c:	e04a      	b.n	21b4 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    211e:	4b28      	ldr	r3, [pc, #160]	; (21c0 <udc_req_std_dev_set_configuration+0xb4>)
    2120:	4798      	blx	r3
    2122:	1e03      	subs	r3, r0, #0
    2124:	d101      	bne.n	212a <udc_req_std_dev_set_configuration+0x1e>
		return false;
    2126:	2300      	movs	r3, #0
    2128:	e044      	b.n	21b4 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    212a:	4b24      	ldr	r3, [pc, #144]	; (21bc <udc_req_std_dev_set_configuration+0xb0>)
    212c:	885b      	ldrh	r3, [r3, #2]
    212e:	1c1a      	adds	r2, r3, #0
    2130:	23ff      	movs	r3, #255	; 0xff
    2132:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    2134:	4b23      	ldr	r3, [pc, #140]	; (21c4 <udc_req_std_dev_set_configuration+0xb8>)
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    213a:	429a      	cmp	r2, r3
    213c:	dd01      	ble.n	2142 <udc_req_std_dev_set_configuration+0x36>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    213e:	2300      	movs	r3, #0
    2140:	e038      	b.n	21b4 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    2142:	4b21      	ldr	r3, [pc, #132]	; (21c8 <udc_req_std_dev_set_configuration+0xbc>)
    2144:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2146:	4b1d      	ldr	r3, [pc, #116]	; (21bc <udc_req_std_dev_set_configuration+0xb0>)
    2148:	885b      	ldrh	r3, [r3, #2]
    214a:	b2da      	uxtb	r2, r3
    214c:	4b1f      	ldr	r3, [pc, #124]	; (21cc <udc_req_std_dev_set_configuration+0xc0>)
    214e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    2150:	4b1e      	ldr	r3, [pc, #120]	; (21cc <udc_req_std_dev_set_configuration+0xc0>)
    2152:	781b      	ldrb	r3, [r3, #0]
    2154:	2b00      	cmp	r3, #0
    2156:	d101      	bne.n	215c <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    2158:	2301      	movs	r3, #1
    215a:	e02b      	b.n	21b4 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    215c:	4b19      	ldr	r3, [pc, #100]	; (21c4 <udc_req_std_dev_set_configuration+0xb8>)
    215e:	685a      	ldr	r2, [r3, #4]
    2160:	4b1a      	ldr	r3, [pc, #104]	; (21cc <udc_req_std_dev_set_configuration+0xc0>)
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	491a      	ldr	r1, [pc, #104]	; (21d0 <udc_req_std_dev_set_configuration+0xc4>)
    2166:	468c      	mov	ip, r1
    2168:	4463      	add	r3, ip
    216a:	00db      	lsls	r3, r3, #3
    216c:	18d2      	adds	r2, r2, r3
    216e:	4b19      	ldr	r3, [pc, #100]	; (21d4 <udc_req_std_dev_set_configuration+0xc8>)
    2170:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2172:	1dfb      	adds	r3, r7, #7
    2174:	2200      	movs	r2, #0
    2176:	701a      	strb	r2, [r3, #0]
    2178:	e013      	b.n	21a2 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    217a:	1dfb      	adds	r3, r7, #7
    217c:	781b      	ldrb	r3, [r3, #0]
    217e:	1c18      	adds	r0, r3, #0
    2180:	2100      	movs	r1, #0
    2182:	4b15      	ldr	r3, [pc, #84]	; (21d8 <udc_req_std_dev_set_configuration+0xcc>)
    2184:	4798      	blx	r3
    2186:	1c03      	adds	r3, r0, #0
    2188:	1c1a      	adds	r2, r3, #0
    218a:	2301      	movs	r3, #1
    218c:	4053      	eors	r3, r2
    218e:	b2db      	uxtb	r3, r3
    2190:	2b00      	cmp	r3, #0
    2192:	d001      	beq.n	2198 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    2194:	2300      	movs	r3, #0
    2196:	e00d      	b.n	21b4 <udc_req_std_dev_set_configuration+0xa8>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2198:	1dfb      	adds	r3, r7, #7
    219a:	781a      	ldrb	r2, [r3, #0]
    219c:	1dfb      	adds	r3, r7, #7
    219e:	3201      	adds	r2, #1
    21a0:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21a2:	4b0c      	ldr	r3, [pc, #48]	; (21d4 <udc_req_std_dev_set_configuration+0xc8>)
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	791b      	ldrb	r3, [r3, #4]
    21aa:	1dfa      	adds	r2, r7, #7
    21ac:	7812      	ldrb	r2, [r2, #0]
    21ae:	429a      	cmp	r2, r3
    21b0:	d3e3      	bcc.n	217a <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    21b2:	2301      	movs	r3, #1
}
    21b4:	1c18      	adds	r0, r3, #0
    21b6:	46bd      	mov	sp, r7
    21b8:	b002      	add	sp, #8
    21ba:	bd80      	pop	{r7, pc}
    21bc:	20000444 	.word	0x20000444
    21c0:	000055dd 	.word	0x000055dd
    21c4:	2000009c 	.word	0x2000009c
    21c8:	00001c5d 	.word	0x00001c5d
    21cc:	20000114 	.word	0x20000114
    21d0:	1fffffff 	.word	0x1fffffff
    21d4:	20000118 	.word	0x20000118
    21d8:	00001b99 	.word	0x00001b99

000021dc <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    21dc:	b580      	push	{r7, lr}
    21de:	b082      	sub	sp, #8
    21e0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    21e2:	4b21      	ldr	r3, [pc, #132]	; (2268 <udc_req_std_iface_get_setting+0x8c>)
    21e4:	88db      	ldrh	r3, [r3, #6]
    21e6:	2b01      	cmp	r3, #1
    21e8:	d001      	beq.n	21ee <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    21ea:	2300      	movs	r3, #0
    21ec:	e038      	b.n	2260 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    21ee:	4b1f      	ldr	r3, [pc, #124]	; (226c <udc_req_std_iface_get_setting+0x90>)
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d101      	bne.n	21fa <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    21f6:	2300      	movs	r3, #0
    21f8:	e032      	b.n	2260 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    21fa:	4b1b      	ldr	r3, [pc, #108]	; (2268 <udc_req_std_iface_get_setting+0x8c>)
    21fc:	889a      	ldrh	r2, [r3, #4]
    21fe:	1dfb      	adds	r3, r7, #7
    2200:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2202:	4b1b      	ldr	r3, [pc, #108]	; (2270 <udc_req_std_iface_get_setting+0x94>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	791b      	ldrb	r3, [r3, #4]
    220a:	1dfa      	adds	r2, r7, #7
    220c:	7812      	ldrb	r2, [r2, #0]
    220e:	429a      	cmp	r2, r3
    2210:	d301      	bcc.n	2216 <udc_req_std_iface_get_setting+0x3a>
		return false;
    2212:	2300      	movs	r3, #0
    2214:	e024      	b.n	2260 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2216:	1dfb      	adds	r3, r7, #7
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	1c18      	adds	r0, r3, #0
    221c:	2100      	movs	r1, #0
    221e:	4b15      	ldr	r3, [pc, #84]	; (2274 <udc_req_std_iface_get_setting+0x98>)
    2220:	4798      	blx	r3
    2222:	1c03      	adds	r3, r0, #0
    2224:	1c1a      	adds	r2, r3, #0
    2226:	2301      	movs	r3, #1
    2228:	4053      	eors	r3, r2
    222a:	b2db      	uxtb	r3, r3
    222c:	2b00      	cmp	r3, #0
    222e:	d001      	beq.n	2234 <udc_req_std_iface_get_setting+0x58>
		return false;
    2230:	2300      	movs	r3, #0
    2232:	e015      	b.n	2260 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2234:	4b0e      	ldr	r3, [pc, #56]	; (2270 <udc_req_std_iface_get_setting+0x94>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	685a      	ldr	r2, [r3, #4]
    223a:	1dfb      	adds	r3, r7, #7
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	009b      	lsls	r3, r3, #2
    2240:	18d3      	adds	r3, r2, r3
    2242:	681b      	ldr	r3, [r3, #0]
    2244:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    2246:	683b      	ldr	r3, [r7, #0]
    2248:	68db      	ldr	r3, [r3, #12]
    224a:	4798      	blx	r3
    224c:	1c03      	adds	r3, r0, #0
    224e:	1c1a      	adds	r2, r3, #0
    2250:	4b09      	ldr	r3, [pc, #36]	; (2278 <udc_req_std_iface_get_setting+0x9c>)
    2252:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    2254:	4b08      	ldr	r3, [pc, #32]	; (2278 <udc_req_std_iface_get_setting+0x9c>)
    2256:	1c18      	adds	r0, r3, #0
    2258:	2101      	movs	r1, #1
    225a:	4b08      	ldr	r3, [pc, #32]	; (227c <udc_req_std_iface_get_setting+0xa0>)
    225c:	4798      	blx	r3
	return true;
    225e:	2301      	movs	r3, #1
}
    2260:	1c18      	adds	r0, r3, #0
    2262:	46bd      	mov	sp, r7
    2264:	b002      	add	sp, #8
    2266:	bd80      	pop	{r7, pc}
    2268:	20000444 	.word	0x20000444
    226c:	20000114 	.word	0x20000114
    2270:	20000118 	.word	0x20000118
    2274:	00001a41 	.word	0x00001a41
    2278:	20000110 	.word	0x20000110
    227c:	00005649 	.word	0x00005649

00002280 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    2280:	b580      	push	{r7, lr}
    2282:	b082      	sub	sp, #8
    2284:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    2286:	4b17      	ldr	r3, [pc, #92]	; (22e4 <udc_req_std_iface_set_setting+0x64>)
    2288:	88db      	ldrh	r3, [r3, #6]
    228a:	2b00      	cmp	r3, #0
    228c:	d001      	beq.n	2292 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    228e:	2300      	movs	r3, #0
    2290:	e024      	b.n	22dc <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    2292:	4b15      	ldr	r3, [pc, #84]	; (22e8 <udc_req_std_iface_set_setting+0x68>)
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	2b00      	cmp	r3, #0
    2298:	d101      	bne.n	229e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    229a:	2300      	movs	r3, #0
    229c:	e01e      	b.n	22dc <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    229e:	4b11      	ldr	r3, [pc, #68]	; (22e4 <udc_req_std_iface_set_setting+0x64>)
    22a0:	889a      	ldrh	r2, [r3, #4]
    22a2:	1dfb      	adds	r3, r7, #7
    22a4:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    22a6:	4b0f      	ldr	r3, [pc, #60]	; (22e4 <udc_req_std_iface_set_setting+0x64>)
    22a8:	885a      	ldrh	r2, [r3, #2]
    22aa:	1dbb      	adds	r3, r7, #6
    22ac:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    22ae:	1dfb      	adds	r3, r7, #7
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	1c18      	adds	r0, r3, #0
    22b4:	4b0d      	ldr	r3, [pc, #52]	; (22ec <udc_req_std_iface_set_setting+0x6c>)
    22b6:	4798      	blx	r3
    22b8:	1c03      	adds	r3, r0, #0
    22ba:	1c1a      	adds	r2, r3, #0
    22bc:	2301      	movs	r3, #1
    22be:	4053      	eors	r3, r2
    22c0:	b2db      	uxtb	r3, r3
    22c2:	2b00      	cmp	r3, #0
    22c4:	d001      	beq.n	22ca <udc_req_std_iface_set_setting+0x4a>
		return false;
    22c6:	2300      	movs	r3, #0
    22c8:	e008      	b.n	22dc <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    22ca:	1dfb      	adds	r3, r7, #7
    22cc:	781a      	ldrb	r2, [r3, #0]
    22ce:	1dbb      	adds	r3, r7, #6
    22d0:	781b      	ldrb	r3, [r3, #0]
    22d2:	1c10      	adds	r0, r2, #0
    22d4:	1c19      	adds	r1, r3, #0
    22d6:	4b06      	ldr	r3, [pc, #24]	; (22f0 <udc_req_std_iface_set_setting+0x70>)
    22d8:	4798      	blx	r3
    22da:	1c03      	adds	r3, r0, #0
}
    22dc:	1c18      	adds	r0, r3, #0
    22de:	46bd      	mov	sp, r7
    22e0:	b002      	add	sp, #8
    22e2:	bd80      	pop	{r7, pc}
    22e4:	20000444 	.word	0x20000444
    22e8:	20000114 	.word	0x20000114
    22ec:	00001ae5 	.word	0x00001ae5
    22f0:	00001b99 	.word	0x00001b99

000022f4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    22f8:	4b48      	ldr	r3, [pc, #288]	; (241c <udc_reqstd+0x128>)
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	b2db      	uxtb	r3, r3
    22fe:	b25b      	sxtb	r3, r3
    2300:	2b00      	cmp	r3, #0
    2302:	da41      	bge.n	2388 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    2304:	4b45      	ldr	r3, [pc, #276]	; (241c <udc_reqstd+0x128>)
    2306:	88db      	ldrh	r3, [r3, #6]
    2308:	2b00      	cmp	r3, #0
    230a:	d101      	bne.n	2310 <udc_reqstd+0x1c>
			return false; // Error for USB host
    230c:	2300      	movs	r3, #0
    230e:	e082      	b.n	2416 <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2310:	4b42      	ldr	r3, [pc, #264]	; (241c <udc_reqstd+0x128>)
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	1c1a      	adds	r2, r3, #0
    2316:	231f      	movs	r3, #31
    2318:	4013      	ands	r3, r2
    231a:	d114      	bne.n	2346 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    231c:	4b3f      	ldr	r3, [pc, #252]	; (241c <udc_reqstd+0x128>)
    231e:	785b      	ldrb	r3, [r3, #1]
    2320:	2b06      	cmp	r3, #6
    2322:	d008      	beq.n	2336 <udc_reqstd+0x42>
    2324:	2b08      	cmp	r3, #8
    2326:	d00a      	beq.n	233e <udc_reqstd+0x4a>
    2328:	2b00      	cmp	r3, #0
    232a:	d000      	beq.n	232e <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    232c:	e00b      	b.n	2346 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    232e:	4b3c      	ldr	r3, [pc, #240]	; (2420 <udc_reqstd+0x12c>)
    2330:	4798      	blx	r3
    2332:	1c03      	adds	r3, r0, #0
    2334:	e06f      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    2336:	4b3b      	ldr	r3, [pc, #236]	; (2424 <udc_reqstd+0x130>)
    2338:	4798      	blx	r3
    233a:	1c03      	adds	r3, r0, #0
    233c:	e06b      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    233e:	4b3a      	ldr	r3, [pc, #232]	; (2428 <udc_reqstd+0x134>)
    2340:	4798      	blx	r3
    2342:	1c03      	adds	r3, r0, #0
    2344:	e067      	b.n	2416 <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2346:	4b35      	ldr	r3, [pc, #212]	; (241c <udc_reqstd+0x128>)
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	1c1a      	adds	r2, r3, #0
    234c:	231f      	movs	r3, #31
    234e:	4013      	ands	r3, r2
    2350:	2b01      	cmp	r3, #1
    2352:	d108      	bne.n	2366 <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2354:	4b31      	ldr	r3, [pc, #196]	; (241c <udc_reqstd+0x128>)
    2356:	785b      	ldrb	r3, [r3, #1]
    2358:	2b0a      	cmp	r3, #10
    235a:	d000      	beq.n	235e <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    235c:	e003      	b.n	2366 <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    235e:	4b33      	ldr	r3, [pc, #204]	; (242c <udc_reqstd+0x138>)
    2360:	4798      	blx	r3
    2362:	1c03      	adds	r3, r0, #0
    2364:	e057      	b.n	2416 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2366:	4b2d      	ldr	r3, [pc, #180]	; (241c <udc_reqstd+0x128>)
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	1c1a      	adds	r2, r3, #0
    236c:	231f      	movs	r3, #31
    236e:	4013      	ands	r3, r2
    2370:	2b02      	cmp	r3, #2
    2372:	d14f      	bne.n	2414 <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2374:	4b29      	ldr	r3, [pc, #164]	; (241c <udc_reqstd+0x128>)
    2376:	785b      	ldrb	r3, [r3, #1]
    2378:	2b00      	cmp	r3, #0
    237a:	d001      	beq.n	2380 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	e049      	b.n	2414 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    2380:	4b2b      	ldr	r3, [pc, #172]	; (2430 <udc_reqstd+0x13c>)
    2382:	4798      	blx	r3
    2384:	1c03      	adds	r3, r0, #0
    2386:	e046      	b.n	2416 <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2388:	4b24      	ldr	r3, [pc, #144]	; (241c <udc_reqstd+0x128>)
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	1c1a      	adds	r2, r3, #0
    238e:	231f      	movs	r3, #31
    2390:	4013      	ands	r3, r2
    2392:	d119      	bne.n	23c8 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2394:	4b21      	ldr	r3, [pc, #132]	; (241c <udc_reqstd+0x128>)
    2396:	785b      	ldrb	r3, [r3, #1]
    2398:	2b09      	cmp	r3, #9
    239a:	d814      	bhi.n	23c6 <udc_reqstd+0xd2>
    239c:	009a      	lsls	r2, r3, #2
    239e:	4b25      	ldr	r3, [pc, #148]	; (2434 <udc_reqstd+0x140>)
    23a0:	18d3      	adds	r3, r2, r3
    23a2:	681b      	ldr	r3, [r3, #0]
    23a4:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    23a6:	4b24      	ldr	r3, [pc, #144]	; (2438 <udc_reqstd+0x144>)
    23a8:	4798      	blx	r3
    23aa:	1c03      	adds	r3, r0, #0
    23ac:	e033      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    23ae:	4b23      	ldr	r3, [pc, #140]	; (243c <udc_reqstd+0x148>)
    23b0:	4798      	blx	r3
    23b2:	1c03      	adds	r3, r0, #0
    23b4:	e02f      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    23b6:	4b22      	ldr	r3, [pc, #136]	; (2440 <udc_reqstd+0x14c>)
    23b8:	4798      	blx	r3
    23ba:	1c03      	adds	r3, r0, #0
    23bc:	e02b      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    23be:	4b21      	ldr	r3, [pc, #132]	; (2444 <udc_reqstd+0x150>)
    23c0:	4798      	blx	r3
    23c2:	1c03      	adds	r3, r0, #0
    23c4:	e027      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    23c6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    23c8:	4b14      	ldr	r3, [pc, #80]	; (241c <udc_reqstd+0x128>)
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	1c1a      	adds	r2, r3, #0
    23ce:	231f      	movs	r3, #31
    23d0:	4013      	ands	r3, r2
    23d2:	2b01      	cmp	r3, #1
    23d4:	d108      	bne.n	23e8 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    23d6:	4b11      	ldr	r3, [pc, #68]	; (241c <udc_reqstd+0x128>)
    23d8:	785b      	ldrb	r3, [r3, #1]
    23da:	2b0b      	cmp	r3, #11
    23dc:	d000      	beq.n	23e0 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    23de:	e003      	b.n	23e8 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    23e0:	4b19      	ldr	r3, [pc, #100]	; (2448 <udc_reqstd+0x154>)
    23e2:	4798      	blx	r3
    23e4:	1c03      	adds	r3, r0, #0
    23e6:	e016      	b.n	2416 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    23e8:	4b0c      	ldr	r3, [pc, #48]	; (241c <udc_reqstd+0x128>)
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	1c1a      	adds	r2, r3, #0
    23ee:	231f      	movs	r3, #31
    23f0:	4013      	ands	r3, r2
    23f2:	2b02      	cmp	r3, #2
    23f4:	d10e      	bne.n	2414 <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    23f6:	4b09      	ldr	r3, [pc, #36]	; (241c <udc_reqstd+0x128>)
    23f8:	785b      	ldrb	r3, [r3, #1]
    23fa:	2b01      	cmp	r3, #1
    23fc:	d002      	beq.n	2404 <udc_reqstd+0x110>
    23fe:	2b03      	cmp	r3, #3
    2400:	d004      	beq.n	240c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    2402:	e007      	b.n	2414 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    2404:	4b11      	ldr	r3, [pc, #68]	; (244c <udc_reqstd+0x158>)
    2406:	4798      	blx	r3
    2408:	1c03      	adds	r3, r0, #0
    240a:	e004      	b.n	2416 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    240c:	4b10      	ldr	r3, [pc, #64]	; (2450 <udc_reqstd+0x15c>)
    240e:	4798      	blx	r3
    2410:	1c03      	adds	r3, r0, #0
    2412:	e000      	b.n	2416 <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    2414:	2300      	movs	r3, #0
}
    2416:	1c18      	adds	r0, r3, #0
    2418:	46bd      	mov	sp, r7
    241a:	bd80      	pop	{r7, pc}
    241c:	20000444 	.word	0x20000444
    2420:	00001d39 	.word	0x00001d39
    2424:	00001fdd 	.word	0x00001fdd
    2428:	000020dd 	.word	0x000020dd
    242c:	000021dd 	.word	0x000021dd
    2430:	00001d69 	.word	0x00001d69
    2434:	00008314 	.word	0x00008314
    2438:	00001edd 	.word	0x00001edd
    243c:	00001db1 	.word	0x00001db1
    2440:	00001e2d 	.word	0x00001e2d
    2444:	0000210d 	.word	0x0000210d
    2448:	00002281 	.word	0x00002281
    244c:	00001df5 	.word	0x00001df5
    2450:	00001e71 	.word	0x00001e71

00002454 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    245a:	4b24      	ldr	r3, [pc, #144]	; (24ec <udc_req_iface+0x98>)
    245c:	781b      	ldrb	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d101      	bne.n	2466 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    2462:	2300      	movs	r3, #0
    2464:	e03d      	b.n	24e2 <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2466:	4b22      	ldr	r3, [pc, #136]	; (24f0 <udc_req_iface+0x9c>)
    2468:	889a      	ldrh	r2, [r3, #4]
    246a:	1dfb      	adds	r3, r7, #7
    246c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    246e:	4b21      	ldr	r3, [pc, #132]	; (24f4 <udc_req_iface+0xa0>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	681b      	ldr	r3, [r3, #0]
    2474:	791b      	ldrb	r3, [r3, #4]
    2476:	1dfa      	adds	r2, r7, #7
    2478:	7812      	ldrb	r2, [r2, #0]
    247a:	429a      	cmp	r2, r3
    247c:	d301      	bcc.n	2482 <udc_req_iface+0x2e>
		return false;
    247e:	2300      	movs	r3, #0
    2480:	e02f      	b.n	24e2 <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2482:	1dfb      	adds	r3, r7, #7
    2484:	781b      	ldrb	r3, [r3, #0]
    2486:	1c18      	adds	r0, r3, #0
    2488:	2100      	movs	r1, #0
    248a:	4b1b      	ldr	r3, [pc, #108]	; (24f8 <udc_req_iface+0xa4>)
    248c:	4798      	blx	r3
    248e:	1c03      	adds	r3, r0, #0
    2490:	1c1a      	adds	r2, r3, #0
    2492:	2301      	movs	r3, #1
    2494:	4053      	eors	r3, r2
    2496:	b2db      	uxtb	r3, r3
    2498:	2b00      	cmp	r3, #0
    249a:	d001      	beq.n	24a0 <udc_req_iface+0x4c>
		return false;
    249c:	2300      	movs	r3, #0
    249e:	e020      	b.n	24e2 <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    24a0:	4b14      	ldr	r3, [pc, #80]	; (24f4 <udc_req_iface+0xa0>)
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	685a      	ldr	r2, [r3, #4]
    24a6:	1dfb      	adds	r3, r7, #7
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	009b      	lsls	r3, r3, #2
    24ac:	18d3      	adds	r3, r2, r3
    24ae:	681b      	ldr	r3, [r3, #0]
    24b0:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    24b2:	683b      	ldr	r3, [r7, #0]
    24b4:	68db      	ldr	r3, [r3, #12]
    24b6:	4798      	blx	r3
    24b8:	1c03      	adds	r3, r0, #0
    24ba:	1c1a      	adds	r2, r3, #0
    24bc:	1dfb      	adds	r3, r7, #7
    24be:	781b      	ldrb	r3, [r3, #0]
    24c0:	1c18      	adds	r0, r3, #0
    24c2:	1c11      	adds	r1, r2, #0
    24c4:	4b0c      	ldr	r3, [pc, #48]	; (24f8 <udc_req_iface+0xa4>)
    24c6:	4798      	blx	r3
    24c8:	1c03      	adds	r3, r0, #0
    24ca:	1c1a      	adds	r2, r3, #0
    24cc:	2301      	movs	r3, #1
    24ce:	4053      	eors	r3, r2
    24d0:	b2db      	uxtb	r3, r3
    24d2:	2b00      	cmp	r3, #0
    24d4:	d001      	beq.n	24da <udc_req_iface+0x86>
		return false;
    24d6:	2300      	movs	r3, #0
    24d8:	e003      	b.n	24e2 <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    24da:	683b      	ldr	r3, [r7, #0]
    24dc:	689b      	ldr	r3, [r3, #8]
    24de:	4798      	blx	r3
    24e0:	1c03      	adds	r3, r0, #0
}
    24e2:	1c18      	adds	r0, r3, #0
    24e4:	46bd      	mov	sp, r7
    24e6:	b002      	add	sp, #8
    24e8:	bd80      	pop	{r7, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	20000114 	.word	0x20000114
    24f0:	20000444 	.word	0x20000444
    24f4:	20000118 	.word	0x20000118
    24f8:	00001a41 	.word	0x00001a41

000024fc <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    24fc:	b580      	push	{r7, lr}
    24fe:	b082      	sub	sp, #8
    2500:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2502:	4b22      	ldr	r3, [pc, #136]	; (258c <udc_req_ep+0x90>)
    2504:	781b      	ldrb	r3, [r3, #0]
    2506:	2b00      	cmp	r3, #0
    2508:	d101      	bne.n	250e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    250a:	2300      	movs	r3, #0
    250c:	e039      	b.n	2582 <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    250e:	4b20      	ldr	r3, [pc, #128]	; (2590 <udc_req_ep+0x94>)
    2510:	889a      	ldrh	r2, [r3, #4]
    2512:	1dfb      	adds	r3, r7, #7
    2514:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2516:	1dfb      	adds	r3, r7, #7
    2518:	2200      	movs	r2, #0
    251a:	701a      	strb	r2, [r3, #0]
    251c:	e028      	b.n	2570 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    251e:	4b1d      	ldr	r3, [pc, #116]	; (2594 <udc_req_ep+0x98>)
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	685a      	ldr	r2, [r3, #4]
    2524:	1dfb      	adds	r3, r7, #7
    2526:	781b      	ldrb	r3, [r3, #0]
    2528:	009b      	lsls	r3, r3, #2
    252a:	18d3      	adds	r3, r2, r3
    252c:	681b      	ldr	r3, [r3, #0]
    252e:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	68db      	ldr	r3, [r3, #12]
    2534:	4798      	blx	r3
    2536:	1c03      	adds	r3, r0, #0
    2538:	1c1a      	adds	r2, r3, #0
    253a:	1dfb      	adds	r3, r7, #7
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	1c18      	adds	r0, r3, #0
    2540:	1c11      	adds	r1, r2, #0
    2542:	4b15      	ldr	r3, [pc, #84]	; (2598 <udc_req_ep+0x9c>)
    2544:	4798      	blx	r3
    2546:	1c03      	adds	r3, r0, #0
    2548:	1c1a      	adds	r2, r3, #0
    254a:	2301      	movs	r3, #1
    254c:	4053      	eors	r3, r2
    254e:	b2db      	uxtb	r3, r3
    2550:	2b00      	cmp	r3, #0
    2552:	d001      	beq.n	2558 <udc_req_ep+0x5c>
			return false;
    2554:	2300      	movs	r3, #0
    2556:	e014      	b.n	2582 <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    2558:	683b      	ldr	r3, [r7, #0]
    255a:	689b      	ldr	r3, [r3, #8]
    255c:	4798      	blx	r3
    255e:	1e03      	subs	r3, r0, #0
    2560:	d001      	beq.n	2566 <udc_req_ep+0x6a>
			return true;
    2562:	2301      	movs	r3, #1
    2564:	e00d      	b.n	2582 <udc_req_ep+0x86>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2566:	1dfb      	adds	r3, r7, #7
    2568:	781a      	ldrb	r2, [r3, #0]
    256a:	1dfb      	adds	r3, r7, #7
    256c:	3201      	adds	r2, #1
    256e:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2570:	4b08      	ldr	r3, [pc, #32]	; (2594 <udc_req_ep+0x98>)
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	791b      	ldrb	r3, [r3, #4]
    2578:	1dfa      	adds	r2, r7, #7
    257a:	7812      	ldrb	r2, [r2, #0]
    257c:	429a      	cmp	r2, r3
    257e:	d3ce      	bcc.n	251e <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    2580:	2300      	movs	r3, #0
}
    2582:	1c18      	adds	r0, r3, #0
    2584:	46bd      	mov	sp, r7
    2586:	b002      	add	sp, #8
    2588:	bd80      	pop	{r7, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	20000114 	.word	0x20000114
    2590:	20000444 	.word	0x20000444
    2594:	20000118 	.word	0x20000118
    2598:	00001a41 	.word	0x00001a41

0000259c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    259c:	b580      	push	{r7, lr}
    259e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    25a0:	4b1f      	ldr	r3, [pc, #124]	; (2620 <udc_process_setup+0x84>)
    25a2:	2200      	movs	r2, #0
    25a4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    25a6:	4b1e      	ldr	r3, [pc, #120]	; (2620 <udc_process_setup+0x84>)
    25a8:	2200      	movs	r2, #0
    25aa:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    25ac:	4b1c      	ldr	r3, [pc, #112]	; (2620 <udc_process_setup+0x84>)
    25ae:	2200      	movs	r2, #0
    25b0:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    25b2:	4b1b      	ldr	r3, [pc, #108]	; (2620 <udc_process_setup+0x84>)
    25b4:	781b      	ldrb	r3, [r3, #0]
    25b6:	b2db      	uxtb	r3, r3
    25b8:	b25b      	sxtb	r3, r3
    25ba:	2b00      	cmp	r3, #0
    25bc:	da05      	bge.n	25ca <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    25be:	4b18      	ldr	r3, [pc, #96]	; (2620 <udc_process_setup+0x84>)
    25c0:	88db      	ldrh	r3, [r3, #6]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d101      	bne.n	25ca <udc_process_setup+0x2e>
			return false; // Error from USB host
    25c6:	2300      	movs	r3, #0
    25c8:	e026      	b.n	2618 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    25ca:	4b15      	ldr	r3, [pc, #84]	; (2620 <udc_process_setup+0x84>)
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	1c1a      	adds	r2, r3, #0
    25d0:	2360      	movs	r3, #96	; 0x60
    25d2:	4013      	ands	r3, r2
    25d4:	d105      	bne.n	25e2 <udc_process_setup+0x46>
		if (udc_reqstd()) {
    25d6:	4b13      	ldr	r3, [pc, #76]	; (2624 <udc_process_setup+0x88>)
    25d8:	4798      	blx	r3
    25da:	1e03      	subs	r3, r0, #0
    25dc:	d001      	beq.n	25e2 <udc_process_setup+0x46>
			return true;
    25de:	2301      	movs	r3, #1
    25e0:	e01a      	b.n	2618 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    25e2:	4b0f      	ldr	r3, [pc, #60]	; (2620 <udc_process_setup+0x84>)
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	1c1a      	adds	r2, r3, #0
    25e8:	231f      	movs	r3, #31
    25ea:	4013      	ands	r3, r2
    25ec:	2b01      	cmp	r3, #1
    25ee:	d105      	bne.n	25fc <udc_process_setup+0x60>
		if (udc_req_iface()) {
    25f0:	4b0d      	ldr	r3, [pc, #52]	; (2628 <udc_process_setup+0x8c>)
    25f2:	4798      	blx	r3
    25f4:	1e03      	subs	r3, r0, #0
    25f6:	d001      	beq.n	25fc <udc_process_setup+0x60>
			return true;
    25f8:	2301      	movs	r3, #1
    25fa:	e00d      	b.n	2618 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    25fc:	4b08      	ldr	r3, [pc, #32]	; (2620 <udc_process_setup+0x84>)
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	1c1a      	adds	r2, r3, #0
    2602:	231f      	movs	r3, #31
    2604:	4013      	ands	r3, r2
    2606:	2b02      	cmp	r3, #2
    2608:	d105      	bne.n	2616 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
    260a:	4b08      	ldr	r3, [pc, #32]	; (262c <udc_process_setup+0x90>)
    260c:	4798      	blx	r3
    260e:	1e03      	subs	r3, r0, #0
    2610:	d001      	beq.n	2616 <udc_process_setup+0x7a>
			return true;
    2612:	2301      	movs	r3, #1
    2614:	e000      	b.n	2618 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2616:	2300      	movs	r3, #0
#endif
}
    2618:	1c18      	adds	r0, r3, #0
    261a:	46bd      	mov	sp, r7
    261c:	bd80      	pop	{r7, pc}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	20000444 	.word	0x20000444
    2624:	000022f5 	.word	0x000022f5
    2628:	00002455 	.word	0x00002455
    262c:	000024fd 	.word	0x000024fd

00002630 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2630:	b580      	push	{r7, lr}
    2632:	b082      	sub	sp, #8
    2634:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2636:	4b0f      	ldr	r3, [pc, #60]	; (2674 <cpu_irq_enter_critical+0x44>)
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	2b00      	cmp	r3, #0
    263c:	d112      	bne.n	2664 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    263e:	f3ef 8310 	mrs	r3, PRIMASK
    2642:	607b      	str	r3, [r7, #4]
  return(result);
    2644:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2646:	2b00      	cmp	r3, #0
    2648:	d109      	bne.n	265e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    264a:	b672      	cpsid	i
    264c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2650:	4b09      	ldr	r3, [pc, #36]	; (2678 <cpu_irq_enter_critical+0x48>)
    2652:	2200      	movs	r2, #0
    2654:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2656:	4b09      	ldr	r3, [pc, #36]	; (267c <cpu_irq_enter_critical+0x4c>)
    2658:	2201      	movs	r2, #1
    265a:	701a      	strb	r2, [r3, #0]
    265c:	e002      	b.n	2664 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    265e:	4b07      	ldr	r3, [pc, #28]	; (267c <cpu_irq_enter_critical+0x4c>)
    2660:	2200      	movs	r2, #0
    2662:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2664:	4b03      	ldr	r3, [pc, #12]	; (2674 <cpu_irq_enter_critical+0x44>)
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	1c5a      	adds	r2, r3, #1
    266a:	4b02      	ldr	r3, [pc, #8]	; (2674 <cpu_irq_enter_critical+0x44>)
    266c:	601a      	str	r2, [r3, #0]
}
    266e:	46bd      	mov	sp, r7
    2670:	b002      	add	sp, #8
    2672:	bd80      	pop	{r7, pc}
    2674:	20000124 	.word	0x20000124
    2678:	200000d8 	.word	0x200000d8
    267c:	20000128 	.word	0x20000128

00002680 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2680:	b580      	push	{r7, lr}
    2682:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2684:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <cpu_irq_leave_critical+0x30>)
    2686:	681b      	ldr	r3, [r3, #0]
    2688:	1e5a      	subs	r2, r3, #1
    268a:	4b09      	ldr	r3, [pc, #36]	; (26b0 <cpu_irq_leave_critical+0x30>)
    268c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    268e:	4b08      	ldr	r3, [pc, #32]	; (26b0 <cpu_irq_leave_critical+0x30>)
    2690:	681b      	ldr	r3, [r3, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d10a      	bne.n	26ac <cpu_irq_leave_critical+0x2c>
    2696:	4b07      	ldr	r3, [pc, #28]	; (26b4 <cpu_irq_leave_critical+0x34>)
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	b2db      	uxtb	r3, r3
    269c:	2b00      	cmp	r3, #0
    269e:	d005      	beq.n	26ac <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    26a0:	4b05      	ldr	r3, [pc, #20]	; (26b8 <cpu_irq_leave_critical+0x38>)
    26a2:	2201      	movs	r2, #1
    26a4:	701a      	strb	r2, [r3, #0]
    26a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    26aa:	b662      	cpsie	i
	}
}
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	20000124 	.word	0x20000124
    26b4:	20000128 	.word	0x20000128
    26b8:	200000d8 	.word	0x200000d8

000026bc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b084      	sub	sp, #16
    26c0:	af00      	add	r7, sp, #0
    26c2:	1c02      	adds	r2, r0, #0
    26c4:	1dfb      	adds	r3, r7, #7
    26c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    26c8:	230f      	movs	r3, #15
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	1dfa      	adds	r2, r7, #7
    26ce:	7812      	ldrb	r2, [r2, #0]
    26d0:	09d2      	lsrs	r2, r2, #7
    26d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    26d4:	230e      	movs	r3, #14
    26d6:	18fb      	adds	r3, r7, r3
    26d8:	1dfa      	adds	r2, r7, #7
    26da:	7812      	ldrb	r2, [r2, #0]
    26dc:	0952      	lsrs	r2, r2, #5
    26de:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    26e0:	4b0d      	ldr	r3, [pc, #52]	; (2718 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    26e2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    26e4:	230f      	movs	r3, #15
    26e6:	18fb      	adds	r3, r7, r3
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d10f      	bne.n	270e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    26ee:	230f      	movs	r3, #15
    26f0:	18fb      	adds	r3, r7, r3
    26f2:	781b      	ldrb	r3, [r3, #0]
    26f4:	009b      	lsls	r3, r3, #2
    26f6:	2210      	movs	r2, #16
    26f8:	4694      	mov	ip, r2
    26fa:	44bc      	add	ip, r7
    26fc:	4463      	add	r3, ip
    26fe:	3b08      	subs	r3, #8
    2700:	681a      	ldr	r2, [r3, #0]
    2702:	230e      	movs	r3, #14
    2704:	18fb      	adds	r3, r7, r3
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	01db      	lsls	r3, r3, #7
    270a:	18d3      	adds	r3, r2, r3
    270c:	e000      	b.n	2710 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    270e:	2300      	movs	r3, #0
	}
}
    2710:	1c18      	adds	r0, r3, #0
    2712:	46bd      	mov	sp, r7
    2714:	b004      	add	sp, #16
    2716:	bd80      	pop	{r7, pc}
    2718:	41004400 	.word	0x41004400

0000271c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	1c02      	adds	r2, r0, #0
    2724:	1dfb      	adds	r3, r7, #7
    2726:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2728:	1dfb      	adds	r3, r7, #7
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	1c18      	adds	r0, r3, #0
    272e:	4b03      	ldr	r3, [pc, #12]	; (273c <port_get_group_from_gpio_pin+0x20>)
    2730:	4798      	blx	r3
    2732:	1c03      	adds	r3, r0, #0
}
    2734:	1c18      	adds	r0, r3, #0
    2736:	46bd      	mov	sp, r7
    2738:	b002      	add	sp, #8
    273a:	bd80      	pop	{r7, pc}
    273c:	000026bd 	.word	0x000026bd

00002740 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2740:	b580      	push	{r7, lr}
    2742:	b082      	sub	sp, #8
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2200      	movs	r2, #0
    274c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2201      	movs	r2, #1
    2752:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2200      	movs	r2, #0
    2758:	709a      	strb	r2, [r3, #2]
}
    275a:	46bd      	mov	sp, r7
    275c:	b002      	add	sp, #8
    275e:	bd80      	pop	{r7, pc}

00002760 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2760:	b580      	push	{r7, lr}
    2762:	b084      	sub	sp, #16
    2764:	af00      	add	r7, sp, #0
    2766:	1c02      	adds	r2, r0, #0
    2768:	1dfb      	adds	r3, r7, #7
    276a:	701a      	strb	r2, [r3, #0]
    276c:	1dbb      	adds	r3, r7, #6
    276e:	1c0a      	adds	r2, r1, #0
    2770:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2772:	1dfb      	adds	r3, r7, #7
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	1c18      	adds	r0, r3, #0
    2778:	4b0c      	ldr	r3, [pc, #48]	; (27ac <port_pin_set_output_level+0x4c>)
    277a:	4798      	blx	r3
    277c:	1c03      	adds	r3, r0, #0
    277e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2780:	1dfb      	adds	r3, r7, #7
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	221f      	movs	r2, #31
    2786:	4013      	ands	r3, r2
    2788:	2201      	movs	r2, #1
    278a:	409a      	lsls	r2, r3
    278c:	1c13      	adds	r3, r2, #0
    278e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2790:	1dbb      	adds	r3, r7, #6
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	2b00      	cmp	r3, #0
    2796:	d003      	beq.n	27a0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2798:	68fb      	ldr	r3, [r7, #12]
    279a:	68ba      	ldr	r2, [r7, #8]
    279c:	619a      	str	r2, [r3, #24]
    279e:	e002      	b.n	27a6 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	68ba      	ldr	r2, [r7, #8]
    27a4:	615a      	str	r2, [r3, #20]
	}
}
    27a6:	46bd      	mov	sp, r7
    27a8:	b004      	add	sp, #16
    27aa:	bd80      	pop	{r7, pc}
    27ac:	0000271d 	.word	0x0000271d

000027b0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    27b6:	1d3b      	adds	r3, r7, #4
    27b8:	1c18      	adds	r0, r3, #0
    27ba:	4b0e      	ldr	r3, [pc, #56]	; (27f4 <system_board_init+0x44>)
    27bc:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    27be:	1d3b      	adds	r3, r7, #4
    27c0:	2201      	movs	r2, #1
    27c2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    27c4:	1d3b      	adds	r3, r7, #4
    27c6:	2011      	movs	r0, #17
    27c8:	1c19      	adds	r1, r3, #0
    27ca:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <system_board_init+0x48>)
    27cc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    27ce:	2011      	movs	r0, #17
    27d0:	2101      	movs	r1, #1
    27d2:	4b0a      	ldr	r3, [pc, #40]	; (27fc <system_board_init+0x4c>)
    27d4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    27d6:	1d3b      	adds	r3, r7, #4
    27d8:	2200      	movs	r2, #0
    27da:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    27dc:	1d3b      	adds	r3, r7, #4
    27de:	2201      	movs	r2, #1
    27e0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    27e2:	1d3b      	adds	r3, r7, #4
    27e4:	200f      	movs	r0, #15
    27e6:	1c19      	adds	r1, r3, #0
    27e8:	4b03      	ldr	r3, [pc, #12]	; (27f8 <system_board_init+0x48>)
    27ea:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    27ec:	46bd      	mov	sp, r7
    27ee:	b002      	add	sp, #8
    27f0:	bd80      	pop	{r7, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	00002741 	.word	0x00002741
    27f8:	00002e1d 	.word	0x00002e1d
    27fc:	00002761 	.word	0x00002761

00002800 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    2800:	b580      	push	{r7, lr}
    2802:	b084      	sub	sp, #16
    2804:	af00      	add	r7, sp, #0
    2806:	1c02      	adds	r2, r0, #0
    2808:	1dfb      	adds	r3, r7, #7
    280a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    280c:	230f      	movs	r3, #15
    280e:	18fb      	adds	r3, r7, r3
    2810:	1dfa      	adds	r2, r7, #7
    2812:	7812      	ldrb	r2, [r2, #0]
    2814:	0952      	lsrs	r2, r2, #5
    2816:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    2818:	230f      	movs	r3, #15
    281a:	18fb      	adds	r3, r7, r3
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d10c      	bne.n	283c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2822:	4b09      	ldr	r3, [pc, #36]	; (2848 <_extint_get_eic_from_channel+0x48>)
    2824:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    2826:	230f      	movs	r3, #15
    2828:	18fb      	adds	r3, r7, r3
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	009b      	lsls	r3, r3, #2
    282e:	2210      	movs	r2, #16
    2830:	4694      	mov	ip, r2
    2832:	44bc      	add	ip, r7
    2834:	4463      	add	r3, ip
    2836:	3b08      	subs	r3, #8
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	e000      	b.n	283e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    283c:	2300      	movs	r3, #0
	}
}
    283e:	1c18      	adds	r0, r3, #0
    2840:	46bd      	mov	sp, r7
    2842:	b004      	add	sp, #16
    2844:	bd80      	pop	{r7, pc}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	40001800 	.word	0x40001800

0000284c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    284c:	b580      	push	{r7, lr}
    284e:	b084      	sub	sp, #16
    2850:	af00      	add	r7, sp, #0
    2852:	1c02      	adds	r2, r0, #0
    2854:	1dfb      	adds	r3, r7, #7
    2856:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2858:	1dfb      	adds	r3, r7, #7
    285a:	781b      	ldrb	r3, [r3, #0]
    285c:	1c18      	adds	r0, r3, #0
    285e:	4b0b      	ldr	r3, [pc, #44]	; (288c <extint_chan_is_detected+0x40>)
    2860:	4798      	blx	r3
    2862:	1c03      	adds	r3, r0, #0
    2864:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    2866:	1dfb      	adds	r3, r7, #7
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	221f      	movs	r2, #31
    286c:	4013      	ands	r3, r2
    286e:	2201      	movs	r2, #1
    2870:	409a      	lsls	r2, r3
    2872:	1c13      	adds	r3, r2, #0
    2874:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    2876:	68fb      	ldr	r3, [r7, #12]
    2878:	691b      	ldr	r3, [r3, #16]
    287a:	68ba      	ldr	r2, [r7, #8]
    287c:	4013      	ands	r3, r2
    287e:	1e5a      	subs	r2, r3, #1
    2880:	4193      	sbcs	r3, r2
    2882:	b2db      	uxtb	r3, r3
}
    2884:	1c18      	adds	r0, r3, #0
    2886:	46bd      	mov	sp, r7
    2888:	b004      	add	sp, #16
    288a:	bd80      	pop	{r7, pc}
    288c:	00002801 	.word	0x00002801

00002890 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    2890:	b580      	push	{r7, lr}
    2892:	b084      	sub	sp, #16
    2894:	af00      	add	r7, sp, #0
    2896:	1c02      	adds	r2, r0, #0
    2898:	1dfb      	adds	r3, r7, #7
    289a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    289c:	1dfb      	adds	r3, r7, #7
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	1c18      	adds	r0, r3, #0
    28a2:	4b09      	ldr	r3, [pc, #36]	; (28c8 <extint_chan_clear_detected+0x38>)
    28a4:	4798      	blx	r3
    28a6:	1c03      	adds	r3, r0, #0
    28a8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    28aa:	1dfb      	adds	r3, r7, #7
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	221f      	movs	r2, #31
    28b0:	4013      	ands	r3, r2
    28b2:	2201      	movs	r2, #1
    28b4:	409a      	lsls	r2, r3
    28b6:	1c13      	adds	r3, r2, #0
    28b8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	68ba      	ldr	r2, [r7, #8]
    28be:	611a      	str	r2, [r3, #16]
}
    28c0:	46bd      	mov	sp, r7
    28c2:	b004      	add	sp, #16
    28c4:	bd80      	pop	{r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	00002801 	.word	0x00002801

000028cc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	1c08      	adds	r0, r1, #0
    28d6:	1c11      	adds	r1, r2, #0
    28d8:	1cfb      	adds	r3, r7, #3
    28da:	1c02      	adds	r2, r0, #0
    28dc:	701a      	strb	r2, [r3, #0]
    28de:	1cbb      	adds	r3, r7, #2
    28e0:	1c0a      	adds	r2, r1, #0
    28e2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    28e4:	1cbb      	adds	r3, r7, #2
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d001      	beq.n	28f0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    28ec:	2317      	movs	r3, #23
    28ee:	e019      	b.n	2924 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    28f0:	1cfb      	adds	r3, r7, #3
    28f2:	781a      	ldrb	r2, [r3, #0]
    28f4:	4b0d      	ldr	r3, [pc, #52]	; (292c <extint_register_callback+0x60>)
    28f6:	0092      	lsls	r2, r2, #2
    28f8:	58d3      	ldr	r3, [r2, r3]
    28fa:	2b00      	cmp	r3, #0
    28fc:	d107      	bne.n	290e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    28fe:	1cfb      	adds	r3, r7, #3
    2900:	781a      	ldrb	r2, [r3, #0]
    2902:	4b0a      	ldr	r3, [pc, #40]	; (292c <extint_register_callback+0x60>)
    2904:	0092      	lsls	r2, r2, #2
    2906:	6879      	ldr	r1, [r7, #4]
    2908:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    290a:	2300      	movs	r3, #0
    290c:	e00a      	b.n	2924 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    290e:	1cfb      	adds	r3, r7, #3
    2910:	781a      	ldrb	r2, [r3, #0]
    2912:	4b06      	ldr	r3, [pc, #24]	; (292c <extint_register_callback+0x60>)
    2914:	0092      	lsls	r2, r2, #2
    2916:	58d2      	ldr	r2, [r2, r3]
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	429a      	cmp	r2, r3
    291c:	d101      	bne.n	2922 <extint_register_callback+0x56>
		return STATUS_OK;
    291e:	2300      	movs	r3, #0
    2920:	e000      	b.n	2924 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    2922:	231d      	movs	r3, #29
}
    2924:	1c18      	adds	r0, r3, #0
    2926:	46bd      	mov	sp, r7
    2928:	b002      	add	sp, #8
    292a:	bd80      	pop	{r7, pc}
    292c:	2000025c 	.word	0x2000025c

00002930 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    2930:	b580      	push	{r7, lr}
    2932:	b084      	sub	sp, #16
    2934:	af00      	add	r7, sp, #0
    2936:	1c02      	adds	r2, r0, #0
    2938:	1dfb      	adds	r3, r7, #7
    293a:	701a      	strb	r2, [r3, #0]
    293c:	1dbb      	adds	r3, r7, #6
    293e:	1c0a      	adds	r2, r1, #0
    2940:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2942:	1dbb      	adds	r3, r7, #6
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	2b00      	cmp	r3, #0
    2948:	d10e      	bne.n	2968 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    294a:	1dfb      	adds	r3, r7, #7
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	1c18      	adds	r0, r3, #0
    2950:	4b08      	ldr	r3, [pc, #32]	; (2974 <extint_chan_enable_callback+0x44>)
    2952:	4798      	blx	r3
    2954:	1c03      	adds	r3, r0, #0
    2956:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    2958:	1dfb      	adds	r3, r7, #7
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	2201      	movs	r2, #1
    295e:	409a      	lsls	r2, r3
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2964:	2300      	movs	r3, #0
    2966:	e000      	b.n	296a <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2968:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    296a:	1c18      	adds	r0, r3, #0
    296c:	46bd      	mov	sp, r7
    296e:	b004      	add	sp, #16
    2970:	bd80      	pop	{r7, pc}
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	00002801 	.word	0x00002801

00002978 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    2978:	b580      	push	{r7, lr}
    297a:	b084      	sub	sp, #16
    297c:	af00      	add	r7, sp, #0
    297e:	1c02      	adds	r2, r0, #0
    2980:	1dfb      	adds	r3, r7, #7
    2982:	701a      	strb	r2, [r3, #0]
    2984:	1dbb      	adds	r3, r7, #6
    2986:	1c0a      	adds	r2, r1, #0
    2988:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    298a:	1dbb      	adds	r3, r7, #6
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	2b00      	cmp	r3, #0
    2990:	d10e      	bne.n	29b0 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    2992:	1dfb      	adds	r3, r7, #7
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	1c18      	adds	r0, r3, #0
    2998:	4b08      	ldr	r3, [pc, #32]	; (29bc <extint_chan_disable_callback+0x44>)
    299a:	4798      	blx	r3
    299c:	1c03      	adds	r3, r0, #0
    299e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    29a0:	1dfb      	adds	r3, r7, #7
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	2201      	movs	r2, #1
    29a6:	409a      	lsls	r2, r3
    29a8:	68fb      	ldr	r3, [r7, #12]
    29aa:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    29ac:	2300      	movs	r3, #0
    29ae:	e000      	b.n	29b2 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    29b0:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    29b2:	1c18      	adds	r0, r3, #0
    29b4:	46bd      	mov	sp, r7
    29b6:	b004      	add	sp, #16
    29b8:	bd80      	pop	{r7, pc}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	00002801 	.word	0x00002801

000029c0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    29c0:	b580      	push	{r7, lr}
    29c2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    29c4:	4b15      	ldr	r3, [pc, #84]	; (2a1c <EIC_Handler+0x5c>)
    29c6:	2200      	movs	r2, #0
    29c8:	701a      	strb	r2, [r3, #0]
    29ca:	e020      	b.n	2a0e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    29cc:	4b13      	ldr	r3, [pc, #76]	; (2a1c <EIC_Handler+0x5c>)
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	1c18      	adds	r0, r3, #0
    29d2:	4b13      	ldr	r3, [pc, #76]	; (2a20 <EIC_Handler+0x60>)
    29d4:	4798      	blx	r3
    29d6:	1e03      	subs	r3, r0, #0
    29d8:	d013      	beq.n	2a02 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    29da:	4b10      	ldr	r3, [pc, #64]	; (2a1c <EIC_Handler+0x5c>)
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	1c18      	adds	r0, r3, #0
    29e0:	4b10      	ldr	r3, [pc, #64]	; (2a24 <EIC_Handler+0x64>)
    29e2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    29e4:	4b0d      	ldr	r3, [pc, #52]	; (2a1c <EIC_Handler+0x5c>)
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	1c1a      	adds	r2, r3, #0
    29ea:	4b0f      	ldr	r3, [pc, #60]	; (2a28 <EIC_Handler+0x68>)
    29ec:	0092      	lsls	r2, r2, #2
    29ee:	58d3      	ldr	r3, [r2, r3]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d006      	beq.n	2a02 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    29f4:	4b09      	ldr	r3, [pc, #36]	; (2a1c <EIC_Handler+0x5c>)
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	1c1a      	adds	r2, r3, #0
    29fa:	4b0b      	ldr	r3, [pc, #44]	; (2a28 <EIC_Handler+0x68>)
    29fc:	0092      	lsls	r2, r2, #2
    29fe:	58d3      	ldr	r3, [r2, r3]
    2a00:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2a02:	4b06      	ldr	r3, [pc, #24]	; (2a1c <EIC_Handler+0x5c>)
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	3301      	adds	r3, #1
    2a08:	b2da      	uxtb	r2, r3
    2a0a:	4b04      	ldr	r3, [pc, #16]	; (2a1c <EIC_Handler+0x5c>)
    2a0c:	701a      	strb	r2, [r3, #0]
    2a0e:	4b03      	ldr	r3, [pc, #12]	; (2a1c <EIC_Handler+0x5c>)
    2a10:	781b      	ldrb	r3, [r3, #0]
    2a12:	2b0f      	cmp	r3, #15
    2a14:	d9da      	bls.n	29cc <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    2a16:	46bd      	mov	sp, r7
    2a18:	bd80      	pop	{r7, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	20000259 	.word	0x20000259
    2a20:	0000284d 	.word	0x0000284d
    2a24:	00002891 	.word	0x00002891
    2a28:	2000025c 	.word	0x2000025c

00002a2c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	b082      	sub	sp, #8
    2a30:	af00      	add	r7, sp, #0
    2a32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2200      	movs	r2, #0
    2a38:	701a      	strb	r2, [r3, #0]
}
    2a3a:	46bd      	mov	sp, r7
    2a3c:	b002      	add	sp, #8
    2a3e:	bd80      	pop	{r7, pc}

00002a40 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b082      	sub	sp, #8
    2a44:	af00      	add	r7, sp, #0
    2a46:	1c02      	adds	r2, r0, #0
    2a48:	6039      	str	r1, [r7, #0]
    2a4a:	1dfb      	adds	r3, r7, #7
    2a4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a4e:	1dfb      	adds	r3, r7, #7
    2a50:	781b      	ldrb	r3, [r3, #0]
    2a52:	2b01      	cmp	r3, #1
    2a54:	d00a      	beq.n	2a6c <system_apb_clock_set_mask+0x2c>
    2a56:	2b02      	cmp	r3, #2
    2a58:	d00f      	beq.n	2a7a <system_apb_clock_set_mask+0x3a>
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d114      	bne.n	2a88 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2a5e:	4b0e      	ldr	r3, [pc, #56]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a60:	4a0d      	ldr	r2, [pc, #52]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a62:	6991      	ldr	r1, [r2, #24]
    2a64:	683a      	ldr	r2, [r7, #0]
    2a66:	430a      	orrs	r2, r1
    2a68:	619a      	str	r2, [r3, #24]
			break;
    2a6a:	e00f      	b.n	2a8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2a6c:	4b0a      	ldr	r3, [pc, #40]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a6e:	4a0a      	ldr	r2, [pc, #40]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a70:	69d1      	ldr	r1, [r2, #28]
    2a72:	683a      	ldr	r2, [r7, #0]
    2a74:	430a      	orrs	r2, r1
    2a76:	61da      	str	r2, [r3, #28]
			break;
    2a78:	e008      	b.n	2a8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2a7a:	4b07      	ldr	r3, [pc, #28]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a7c:	4a06      	ldr	r2, [pc, #24]	; (2a98 <system_apb_clock_set_mask+0x58>)
    2a7e:	6a11      	ldr	r1, [r2, #32]
    2a80:	683a      	ldr	r2, [r7, #0]
    2a82:	430a      	orrs	r2, r1
    2a84:	621a      	str	r2, [r3, #32]
			break;
    2a86:	e001      	b.n	2a8c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2a88:	2317      	movs	r3, #23
    2a8a:	e000      	b.n	2a8e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2a8c:	2300      	movs	r3, #0
}
    2a8e:	1c18      	adds	r0, r3, #0
    2a90:	46bd      	mov	sp, r7
    2a92:	b002      	add	sp, #8
    2a94:	bd80      	pop	{r7, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	40000400 	.word	0x40000400

00002a9c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	2280      	movs	r2, #128	; 0x80
    2aa8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	2200      	movs	r2, #0
    2aae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	2201      	movs	r2, #1
    2ab4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	2200      	movs	r2, #0
    2aba:	70da      	strb	r2, [r3, #3]
}
    2abc:	46bd      	mov	sp, r7
    2abe:	b002      	add	sp, #8
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)

00002ac4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	1c02      	adds	r2, r0, #0
    2acc:	1dfb      	adds	r3, r7, #7
    2ace:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ad0:	4b06      	ldr	r3, [pc, #24]	; (2aec <system_interrupt_enable+0x28>)
    2ad2:	1dfa      	adds	r2, r7, #7
    2ad4:	7812      	ldrb	r2, [r2, #0]
    2ad6:	1c11      	adds	r1, r2, #0
    2ad8:	221f      	movs	r2, #31
    2ada:	400a      	ands	r2, r1
    2adc:	2101      	movs	r1, #1
    2ade:	4091      	lsls	r1, r2
    2ae0:	1c0a      	adds	r2, r1, #0
    2ae2:	601a      	str	r2, [r3, #0]
}
    2ae4:	46bd      	mov	sp, r7
    2ae6:	b002      	add	sp, #8
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	e000e100 	.word	0xe000e100

00002af0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b084      	sub	sp, #16
    2af4:	af00      	add	r7, sp, #0
    2af6:	1c02      	adds	r2, r0, #0
    2af8:	1dfb      	adds	r3, r7, #7
    2afa:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    2afc:	230f      	movs	r3, #15
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	1dfa      	adds	r2, r7, #7
    2b02:	7812      	ldrb	r2, [r2, #0]
    2b04:	0952      	lsrs	r2, r2, #5
    2b06:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    2b08:	230f      	movs	r3, #15
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d10c      	bne.n	2b2c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2b12:	4b09      	ldr	r3, [pc, #36]	; (2b38 <_extint_get_eic_from_channel+0x48>)
    2b14:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    2b16:	230f      	movs	r3, #15
    2b18:	18fb      	adds	r3, r7, r3
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	009b      	lsls	r3, r3, #2
    2b1e:	2210      	movs	r2, #16
    2b20:	4694      	mov	ip, r2
    2b22:	44bc      	add	ip, r7
    2b24:	4463      	add	r3, ip
    2b26:	3b08      	subs	r3, #8
    2b28:	681b      	ldr	r3, [r3, #0]
    2b2a:	e000      	b.n	2b2e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2b2c:	2300      	movs	r3, #0
	}
}
    2b2e:	1c18      	adds	r0, r3, #0
    2b30:	46bd      	mov	sp, r7
    2b32:	b004      	add	sp, #16
    2b34:	bd80      	pop	{r7, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	40001800 	.word	0x40001800

00002b3c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b082      	sub	sp, #8
    2b40:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2b42:	4b10      	ldr	r3, [pc, #64]	; (2b84 <extint_is_syncing+0x48>)
    2b44:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2b46:	2300      	movs	r3, #0
    2b48:	607b      	str	r3, [r7, #4]
    2b4a:	e012      	b.n	2b72 <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	009b      	lsls	r3, r3, #2
    2b50:	2208      	movs	r2, #8
    2b52:	4694      	mov	ip, r2
    2b54:	44bc      	add	ip, r7
    2b56:	4463      	add	r3, ip
    2b58:	3b08      	subs	r3, #8
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	785b      	ldrb	r3, [r3, #1]
    2b5e:	b2db      	uxtb	r3, r3
    2b60:	b2db      	uxtb	r3, r3
    2b62:	b25b      	sxtb	r3, r3
    2b64:	2b00      	cmp	r3, #0
    2b66:	da01      	bge.n	2b6c <extint_is_syncing+0x30>
			return true;
    2b68:	2301      	movs	r3, #1
    2b6a:	e006      	b.n	2b7a <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	3301      	adds	r3, #1
    2b70:	607b      	str	r3, [r7, #4]
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	2b00      	cmp	r3, #0
    2b76:	d0e9      	beq.n	2b4c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    2b78:	2300      	movs	r3, #0
}
    2b7a:	1c18      	adds	r0, r3, #0
    2b7c:	46bd      	mov	sp, r7
    2b7e:	b002      	add	sp, #8
    2b80:	bd80      	pop	{r7, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	40001800 	.word	0x40001800

00002b88 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    2b88:	b580      	push	{r7, lr}
    2b8a:	b084      	sub	sp, #16
    2b8c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2b8e:	4b2c      	ldr	r3, [pc, #176]	; (2c40 <_system_extint_init+0xb8>)
    2b90:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    2b92:	2000      	movs	r0, #0
    2b94:	2140      	movs	r1, #64	; 0x40
    2b96:	4b2b      	ldr	r3, [pc, #172]	; (2c44 <_system_extint_init+0xbc>)
    2b98:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2b9a:	1c3b      	adds	r3, r7, #0
    2b9c:	1c18      	adds	r0, r3, #0
    2b9e:	4b2a      	ldr	r3, [pc, #168]	; (2c48 <_system_extint_init+0xc0>)
    2ba0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    2ba2:	1c3b      	adds	r3, r7, #0
    2ba4:	2200      	movs	r2, #0
    2ba6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2ba8:	1c3b      	adds	r3, r7, #0
    2baa:	2005      	movs	r0, #5
    2bac:	1c19      	adds	r1, r3, #0
    2bae:	4b27      	ldr	r3, [pc, #156]	; (2c4c <_system_extint_init+0xc4>)
    2bb0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    2bb2:	2005      	movs	r0, #5
    2bb4:	4b26      	ldr	r3, [pc, #152]	; (2c50 <_system_extint_init+0xc8>)
    2bb6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2bb8:	2300      	movs	r3, #0
    2bba:	60fb      	str	r3, [r7, #12]
    2bbc:	e018      	b.n	2bf0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	009b      	lsls	r3, r3, #2
    2bc2:	2210      	movs	r2, #16
    2bc4:	4694      	mov	ip, r2
    2bc6:	44bc      	add	ip, r7
    2bc8:	4463      	add	r3, ip
    2bca:	3b0c      	subs	r3, #12
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	009b      	lsls	r3, r3, #2
    2bd2:	2110      	movs	r1, #16
    2bd4:	468c      	mov	ip, r1
    2bd6:	44bc      	add	ip, r7
    2bd8:	4463      	add	r3, ip
    2bda:	3b0c      	subs	r3, #12
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	b2db      	uxtb	r3, r3
    2be2:	2101      	movs	r1, #1
    2be4:	430b      	orrs	r3, r1
    2be6:	b2db      	uxtb	r3, r3
    2be8:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2bea:	68fb      	ldr	r3, [r7, #12]
    2bec:	3301      	adds	r3, #1
    2bee:	60fb      	str	r3, [r7, #12]
    2bf0:	68fb      	ldr	r3, [r7, #12]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d0e3      	beq.n	2bbe <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	4b16      	ldr	r3, [pc, #88]	; (2c54 <_system_extint_init+0xcc>)
    2bfa:	4798      	blx	r3
    2bfc:	1e03      	subs	r3, r0, #0
    2bfe:	d1fb      	bne.n	2bf8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2c00:	230b      	movs	r3, #11
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	2200      	movs	r2, #0
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	e00d      	b.n	2c26 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    2c0a:	230b      	movs	r3, #11
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	781a      	ldrb	r2, [r3, #0]
    2c10:	4b11      	ldr	r3, [pc, #68]	; (2c58 <_system_extint_init+0xd0>)
    2c12:	0092      	lsls	r2, r2, #2
    2c14:	2100      	movs	r1, #0
    2c16:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2c18:	230b      	movs	r3, #11
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	781a      	ldrb	r2, [r3, #0]
    2c1e:	230b      	movs	r3, #11
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	3201      	adds	r2, #1
    2c24:	701a      	strb	r2, [r3, #0]
    2c26:	230b      	movs	r3, #11
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	2b0f      	cmp	r3, #15
    2c2e:	d9ec      	bls.n	2c0a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    2c30:	2004      	movs	r0, #4
    2c32:	4b0a      	ldr	r3, [pc, #40]	; (2c5c <_system_extint_init+0xd4>)
    2c34:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    2c36:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <_system_extint_init+0xd8>)
    2c38:	4798      	blx	r3
}
    2c3a:	46bd      	mov	sp, r7
    2c3c:	b004      	add	sp, #16
    2c3e:	bd80      	pop	{r7, pc}
    2c40:	40001800 	.word	0x40001800
    2c44:	00002a41 	.word	0x00002a41
    2c48:	00002a2d 	.word	0x00002a2d
    2c4c:	00004691 	.word	0x00004691
    2c50:	000046d5 	.word	0x000046d5
    2c54:	00002b3d 	.word	0x00002b3d
    2c58:	2000025c 	.word	0x2000025c
    2c5c:	00002ac5 	.word	0x00002ac5
    2c60:	00002c65 	.word	0x00002c65

00002c64 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    2c64:	b580      	push	{r7, lr}
    2c66:	b082      	sub	sp, #8
    2c68:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2c6a:	4b14      	ldr	r3, [pc, #80]	; (2cbc <_extint_enable+0x58>)
    2c6c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2c6e:	2300      	movs	r3, #0
    2c70:	607b      	str	r3, [r7, #4]
    2c72:	e018      	b.n	2ca6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	009b      	lsls	r3, r3, #2
    2c78:	2208      	movs	r2, #8
    2c7a:	4694      	mov	ip, r2
    2c7c:	44bc      	add	ip, r7
    2c7e:	4463      	add	r3, ip
    2c80:	3b08      	subs	r3, #8
    2c82:	681a      	ldr	r2, [r3, #0]
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	009b      	lsls	r3, r3, #2
    2c88:	2108      	movs	r1, #8
    2c8a:	468c      	mov	ip, r1
    2c8c:	44bc      	add	ip, r7
    2c8e:	4463      	add	r3, ip
    2c90:	3b08      	subs	r3, #8
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	781b      	ldrb	r3, [r3, #0]
    2c96:	b2db      	uxtb	r3, r3
    2c98:	2102      	movs	r1, #2
    2c9a:	430b      	orrs	r3, r1
    2c9c:	b2db      	uxtb	r3, r3
    2c9e:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	3301      	adds	r3, #1
    2ca4:	607b      	str	r3, [r7, #4]
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d0e3      	beq.n	2c74 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    2cac:	46c0      	nop			; (mov r8, r8)
    2cae:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <_extint_enable+0x5c>)
    2cb0:	4798      	blx	r3
    2cb2:	1e03      	subs	r3, r0, #0
    2cb4:	d1fb      	bne.n	2cae <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2cb6:	46bd      	mov	sp, r7
    2cb8:	b002      	add	sp, #8
    2cba:	bd80      	pop	{r7, pc}
    2cbc:	40001800 	.word	0x40001800
    2cc0:	00002b3d 	.word	0x00002b3d

00002cc4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b082      	sub	sp, #8
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	2200      	movs	r2, #0
    2cd0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	2200      	movs	r2, #0
    2cd6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	2201      	movs	r2, #1
    2cdc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	2201      	movs	r2, #1
    2ce2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	2200      	movs	r2, #0
    2ce8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	2202      	movs	r2, #2
    2cee:	72da      	strb	r2, [r3, #11]
}
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b002      	add	sp, #8
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)

00002cf8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b086      	sub	sp, #24
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	1c02      	adds	r2, r0, #0
    2d00:	6039      	str	r1, [r7, #0]
    2d02:	1dfb      	adds	r3, r7, #7
    2d04:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2d06:	2308      	movs	r3, #8
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	1c18      	adds	r0, r3, #0
    2d0c:	4b36      	ldr	r3, [pc, #216]	; (2de8 <extint_chan_set_config+0xf0>)
    2d0e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    2d10:	683b      	ldr	r3, [r7, #0]
    2d12:	685b      	ldr	r3, [r3, #4]
    2d14:	b2da      	uxtb	r2, r3
    2d16:	2308      	movs	r3, #8
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d1c:	2308      	movs	r3, #8
    2d1e:	18fb      	adds	r3, r7, r3
    2d20:	2200      	movs	r2, #0
    2d22:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	7a1a      	ldrb	r2, [r3, #8]
    2d28:	2308      	movs	r3, #8
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2d2e:	683b      	ldr	r3, [r7, #0]
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	b2da      	uxtb	r2, r3
    2d34:	2308      	movs	r3, #8
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	1c10      	adds	r0, r2, #0
    2d3a:	1c19      	adds	r1, r3, #0
    2d3c:	4b2b      	ldr	r3, [pc, #172]	; (2dec <extint_chan_set_config+0xf4>)
    2d3e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    2d40:	1dfb      	adds	r3, r7, #7
    2d42:	781b      	ldrb	r3, [r3, #0]
    2d44:	1c18      	adds	r0, r3, #0
    2d46:	4b2a      	ldr	r3, [pc, #168]	; (2df0 <extint_chan_set_config+0xf8>)
    2d48:	4798      	blx	r3
    2d4a:	1c03      	adds	r3, r0, #0
    2d4c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    2d4e:	1dfb      	adds	r3, r7, #7
    2d50:	781b      	ldrb	r3, [r3, #0]
    2d52:	2207      	movs	r2, #7
    2d54:	4013      	ands	r3, r2
    2d56:	009b      	lsls	r3, r3, #2
    2d58:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2d5a:	683b      	ldr	r3, [r7, #0]
    2d5c:	7adb      	ldrb	r3, [r3, #11]
    2d5e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	7a9b      	ldrb	r3, [r3, #10]
    2d64:	2b00      	cmp	r3, #0
    2d66:	d003      	beq.n	2d70 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    2d68:	697b      	ldr	r3, [r7, #20]
    2d6a:	2208      	movs	r2, #8
    2d6c:	4313      	orrs	r3, r2
    2d6e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    2d70:	1dfb      	adds	r3, r7, #7
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	08db      	lsrs	r3, r3, #3
    2d76:	b2db      	uxtb	r3, r3
    2d78:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    2d7a:	1dfb      	adds	r3, r7, #7
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	08db      	lsrs	r3, r3, #3
    2d80:	b2db      	uxtb	r3, r3
    2d82:	1c1a      	adds	r2, r3, #0
    2d84:	693b      	ldr	r3, [r7, #16]
    2d86:	3206      	adds	r2, #6
    2d88:	0092      	lsls	r2, r2, #2
    2d8a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2d8c:	68fa      	ldr	r2, [r7, #12]
    2d8e:	210f      	movs	r1, #15
    2d90:	4091      	lsls	r1, r2
    2d92:	1c0a      	adds	r2, r1, #0
    2d94:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2d96:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	6979      	ldr	r1, [r7, #20]
    2d9c:	4099      	lsls	r1, r3
    2d9e:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2da0:	431a      	orrs	r2, r3
    2da2:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2da4:	693b      	ldr	r3, [r7, #16]
    2da6:	1d82      	adds	r2, r0, #6
    2da8:	0092      	lsls	r2, r2, #2
    2daa:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2dac:	683b      	ldr	r3, [r7, #0]
    2dae:	7a5b      	ldrb	r3, [r3, #9]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d00a      	beq.n	2dca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    2db4:	693b      	ldr	r3, [r7, #16]
    2db6:	695a      	ldr	r2, [r3, #20]
    2db8:	1dfb      	adds	r3, r7, #7
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	2101      	movs	r1, #1
    2dbe:	4099      	lsls	r1, r3
    2dc0:	1c0b      	adds	r3, r1, #0
    2dc2:	431a      	orrs	r2, r3
    2dc4:	693b      	ldr	r3, [r7, #16]
    2dc6:	615a      	str	r2, [r3, #20]
    2dc8:	e00a      	b.n	2de0 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2dca:	693b      	ldr	r3, [r7, #16]
    2dcc:	695b      	ldr	r3, [r3, #20]
    2dce:	1dfa      	adds	r2, r7, #7
    2dd0:	7812      	ldrb	r2, [r2, #0]
    2dd2:	2101      	movs	r1, #1
    2dd4:	4091      	lsls	r1, r2
    2dd6:	1c0a      	adds	r2, r1, #0
    2dd8:	43d2      	mvns	r2, r2
    2dda:	401a      	ands	r2, r3
    2ddc:	693b      	ldr	r3, [r7, #16]
    2dde:	615a      	str	r2, [r3, #20]
	}
}
    2de0:	46bd      	mov	sp, r7
    2de2:	b006      	add	sp, #24
    2de4:	bd80      	pop	{r7, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	00002a9d 	.word	0x00002a9d
    2dec:	0000497d 	.word	0x0000497d
    2df0:	00002af1 	.word	0x00002af1

00002df4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2df4:	b580      	push	{r7, lr}
    2df6:	b082      	sub	sp, #8
    2df8:	af00      	add	r7, sp, #0
    2dfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	2280      	movs	r2, #128	; 0x80
    2e00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	2200      	movs	r2, #0
    2e06:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	2201      	movs	r2, #1
    2e0c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	2200      	movs	r2, #0
    2e12:	70da      	strb	r2, [r3, #3]
}
    2e14:	46bd      	mov	sp, r7
    2e16:	b002      	add	sp, #8
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)

00002e1c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b084      	sub	sp, #16
    2e20:	af00      	add	r7, sp, #0
    2e22:	1c02      	adds	r2, r0, #0
    2e24:	6039      	str	r1, [r7, #0]
    2e26:	1dfb      	adds	r3, r7, #7
    2e28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2e2a:	230c      	movs	r3, #12
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	1c18      	adds	r0, r3, #0
    2e30:	4b0f      	ldr	r3, [pc, #60]	; (2e70 <port_pin_set_config+0x54>)
    2e32:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2e34:	230c      	movs	r3, #12
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	2280      	movs	r2, #128	; 0x80
    2e3a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2e3c:	683b      	ldr	r3, [r7, #0]
    2e3e:	781a      	ldrb	r2, [r3, #0]
    2e40:	230c      	movs	r3, #12
    2e42:	18fb      	adds	r3, r7, r3
    2e44:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	785a      	ldrb	r2, [r3, #1]
    2e4a:	230c      	movs	r3, #12
    2e4c:	18fb      	adds	r3, r7, r3
    2e4e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2e50:	683b      	ldr	r3, [r7, #0]
    2e52:	789a      	ldrb	r2, [r3, #2]
    2e54:	230c      	movs	r3, #12
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2e5a:	1dfb      	adds	r3, r7, #7
    2e5c:	781a      	ldrb	r2, [r3, #0]
    2e5e:	230c      	movs	r3, #12
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	1c10      	adds	r0, r2, #0
    2e64:	1c19      	adds	r1, r3, #0
    2e66:	4b03      	ldr	r3, [pc, #12]	; (2e74 <port_pin_set_config+0x58>)
    2e68:	4798      	blx	r3
}
    2e6a:	46bd      	mov	sp, r7
    2e6c:	b004      	add	sp, #16
    2e6e:	bd80      	pop	{r7, pc}
    2e70:	00002df5 	.word	0x00002df5
    2e74:	0000497d 	.word	0x0000497d

00002e78 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b082      	sub	sp, #8
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	2200      	movs	r2, #0
    2e84:	701a      	strb	r2, [r3, #0]
}
    2e86:	46bd      	mov	sp, r7
    2e88:	b002      	add	sp, #8
    2e8a:	bd80      	pop	{r7, pc}

00002e8c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b086      	sub	sp, #24
    2e90:	af00      	add	r7, sp, #0
    2e92:	60f8      	str	r0, [r7, #12]
    2e94:	60b9      	str	r1, [r7, #8]
    2e96:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    2e98:	2316      	movs	r3, #22
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	2200      	movs	r2, #0
    2e9e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2ea0:	68bb      	ldr	r3, [r7, #8]
    2ea2:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2ea4:	68bb      	ldr	r3, [r7, #8]
    2ea6:	085a      	lsrs	r2, r3, #1
    2ea8:	68fb      	ldr	r3, [r7, #12]
    2eaa:	429a      	cmp	r2, r3
    2eac:	d201      	bcs.n	2eb2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2eae:	2340      	movs	r3, #64	; 0x40
    2eb0:	e026      	b.n	2f00 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2eb2:	68bb      	ldr	r3, [r7, #8]
    2eb4:	085b      	lsrs	r3, r3, #1
    2eb6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    2eb8:	e00a      	b.n	2ed0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2eba:	693a      	ldr	r2, [r7, #16]
    2ebc:	68fb      	ldr	r3, [r7, #12]
    2ebe:	1ad3      	subs	r3, r2, r3
    2ec0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2ec2:	2316      	movs	r3, #22
    2ec4:	18fb      	adds	r3, r7, r3
    2ec6:	881a      	ldrh	r2, [r3, #0]
    2ec8:	2316      	movs	r3, #22
    2eca:	18fb      	adds	r3, r7, r3
    2ecc:	3201      	adds	r2, #1
    2ece:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2ed0:	693a      	ldr	r2, [r7, #16]
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	429a      	cmp	r2, r3
    2ed6:	d2f0      	bcs.n	2eba <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    2ed8:	2316      	movs	r3, #22
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	2216      	movs	r2, #22
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3a01      	subs	r2, #1
    2ee4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2ee6:	2316      	movs	r3, #22
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	881b      	ldrh	r3, [r3, #0]
    2eec:	2bff      	cmp	r3, #255	; 0xff
    2eee:	d901      	bls.n	2ef4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ef0:	2340      	movs	r3, #64	; 0x40
    2ef2:	e005      	b.n	2f00 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	2216      	movs	r2, #22
    2ef8:	18ba      	adds	r2, r7, r2
    2efa:	8812      	ldrh	r2, [r2, #0]
    2efc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2efe:	2300      	movs	r3, #0
	}
}
    2f00:	1c18      	adds	r0, r3, #0
    2f02:	46bd      	mov	sp, r7
    2f04:	b006      	add	sp, #24
    2f06:	bd80      	pop	{r7, pc}

00002f08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2f08:	b580      	push	{r7, lr}
    2f0a:	b084      	sub	sp, #16
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	1c02      	adds	r2, r0, #0
    2f10:	1dfb      	adds	r3, r7, #7
    2f12:	701a      	strb	r2, [r3, #0]
    2f14:	1dbb      	adds	r3, r7, #6
    2f16:	1c0a      	adds	r2, r1, #0
    2f18:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2f1a:	4b1a      	ldr	r3, [pc, #104]	; (2f84 <sercom_set_gclk_generator+0x7c>)
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	2201      	movs	r2, #1
    2f20:	4053      	eors	r3, r2
    2f22:	b2db      	uxtb	r3, r3
    2f24:	2b00      	cmp	r3, #0
    2f26:	d103      	bne.n	2f30 <sercom_set_gclk_generator+0x28>
    2f28:	1dbb      	adds	r3, r7, #6
    2f2a:	781b      	ldrb	r3, [r3, #0]
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d01b      	beq.n	2f68 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2f30:	230c      	movs	r3, #12
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	1c18      	adds	r0, r3, #0
    2f36:	4b14      	ldr	r3, [pc, #80]	; (2f88 <sercom_set_gclk_generator+0x80>)
    2f38:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2f3a:	230c      	movs	r3, #12
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	1dfa      	adds	r2, r7, #7
    2f40:	7812      	ldrb	r2, [r2, #0]
    2f42:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2f44:	230c      	movs	r3, #12
    2f46:	18fb      	adds	r3, r7, r3
    2f48:	2013      	movs	r0, #19
    2f4a:	1c19      	adds	r1, r3, #0
    2f4c:	4b0f      	ldr	r3, [pc, #60]	; (2f8c <sercom_set_gclk_generator+0x84>)
    2f4e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2f50:	2013      	movs	r0, #19
    2f52:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <sercom_set_gclk_generator+0x88>)
    2f54:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    2f56:	4b0b      	ldr	r3, [pc, #44]	; (2f84 <sercom_set_gclk_generator+0x7c>)
    2f58:	1dfa      	adds	r2, r7, #7
    2f5a:	7812      	ldrb	r2, [r2, #0]
    2f5c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2f5e:	4b09      	ldr	r3, [pc, #36]	; (2f84 <sercom_set_gclk_generator+0x7c>)
    2f60:	2201      	movs	r2, #1
    2f62:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2f64:	2300      	movs	r3, #0
    2f66:	e008      	b.n	2f7a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2f68:	4b06      	ldr	r3, [pc, #24]	; (2f84 <sercom_set_gclk_generator+0x7c>)
    2f6a:	785b      	ldrb	r3, [r3, #1]
    2f6c:	1dfa      	adds	r2, r7, #7
    2f6e:	7812      	ldrb	r2, [r2, #0]
    2f70:	429a      	cmp	r2, r3
    2f72:	d101      	bne.n	2f78 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    2f74:	2300      	movs	r3, #0
    2f76:	e000      	b.n	2f7a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2f78:	231d      	movs	r3, #29
}
    2f7a:	1c18      	adds	r0, r3, #0
    2f7c:	46bd      	mov	sp, r7
    2f7e:	b004      	add	sp, #16
    2f80:	bd80      	pop	{r7, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	2000012c 	.word	0x2000012c
    2f88:	00002e79 	.word	0x00002e79
    2f8c:	00004691 	.word	0x00004691
    2f90:	000046d5 	.word	0x000046d5

00002f94 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b082      	sub	sp, #8
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	1c0a      	adds	r2, r1, #0
    2f9e:	1cfb      	adds	r3, r7, #3
    2fa0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	4a4d      	ldr	r2, [pc, #308]	; (30dc <_sercom_get_default_pad+0x148>)
    2fa6:	4293      	cmp	r3, r2
    2fa8:	d03f      	beq.n	302a <_sercom_get_default_pad+0x96>
    2faa:	4a4c      	ldr	r2, [pc, #304]	; (30dc <_sercom_get_default_pad+0x148>)
    2fac:	4293      	cmp	r3, r2
    2fae:	d806      	bhi.n	2fbe <_sercom_get_default_pad+0x2a>
    2fb0:	4a4b      	ldr	r2, [pc, #300]	; (30e0 <_sercom_get_default_pad+0x14c>)
    2fb2:	4293      	cmp	r3, r2
    2fb4:	d00f      	beq.n	2fd6 <_sercom_get_default_pad+0x42>
    2fb6:	4a4b      	ldr	r2, [pc, #300]	; (30e4 <_sercom_get_default_pad+0x150>)
    2fb8:	4293      	cmp	r3, r2
    2fba:	d021      	beq.n	3000 <_sercom_get_default_pad+0x6c>
    2fbc:	e089      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    2fbe:	4a4a      	ldr	r2, [pc, #296]	; (30e8 <_sercom_get_default_pad+0x154>)
    2fc0:	4293      	cmp	r3, r2
    2fc2:	d100      	bne.n	2fc6 <_sercom_get_default_pad+0x32>
    2fc4:	e05b      	b.n	307e <_sercom_get_default_pad+0xea>
    2fc6:	4a49      	ldr	r2, [pc, #292]	; (30ec <_sercom_get_default_pad+0x158>)
    2fc8:	4293      	cmp	r3, r2
    2fca:	d100      	bne.n	2fce <_sercom_get_default_pad+0x3a>
    2fcc:	e06c      	b.n	30a8 <_sercom_get_default_pad+0x114>
    2fce:	4a48      	ldr	r2, [pc, #288]	; (30f0 <_sercom_get_default_pad+0x15c>)
    2fd0:	4293      	cmp	r3, r2
    2fd2:	d03f      	beq.n	3054 <_sercom_get_default_pad+0xc0>
    2fd4:	e07d      	b.n	30d2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2fd6:	1cfb      	adds	r3, r7, #3
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	2b01      	cmp	r3, #1
    2fdc:	d00a      	beq.n	2ff4 <_sercom_get_default_pad+0x60>
    2fde:	dc02      	bgt.n	2fe6 <_sercom_get_default_pad+0x52>
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d005      	beq.n	2ff0 <_sercom_get_default_pad+0x5c>
    2fe4:	e075      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    2fe6:	2b02      	cmp	r3, #2
    2fe8:	d006      	beq.n	2ff8 <_sercom_get_default_pad+0x64>
    2fea:	2b03      	cmp	r3, #3
    2fec:	d006      	beq.n	2ffc <_sercom_get_default_pad+0x68>
    2fee:	e070      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    2ff0:	4b40      	ldr	r3, [pc, #256]	; (30f4 <_sercom_get_default_pad+0x160>)
    2ff2:	e06f      	b.n	30d4 <_sercom_get_default_pad+0x140>
    2ff4:	4b40      	ldr	r3, [pc, #256]	; (30f8 <_sercom_get_default_pad+0x164>)
    2ff6:	e06d      	b.n	30d4 <_sercom_get_default_pad+0x140>
    2ff8:	4b40      	ldr	r3, [pc, #256]	; (30fc <_sercom_get_default_pad+0x168>)
    2ffa:	e06b      	b.n	30d4 <_sercom_get_default_pad+0x140>
    2ffc:	4b40      	ldr	r3, [pc, #256]	; (3100 <_sercom_get_default_pad+0x16c>)
    2ffe:	e069      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3000:	1cfb      	adds	r3, r7, #3
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	2b01      	cmp	r3, #1
    3006:	d00a      	beq.n	301e <_sercom_get_default_pad+0x8a>
    3008:	dc02      	bgt.n	3010 <_sercom_get_default_pad+0x7c>
    300a:	2b00      	cmp	r3, #0
    300c:	d005      	beq.n	301a <_sercom_get_default_pad+0x86>
    300e:	e060      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    3010:	2b02      	cmp	r3, #2
    3012:	d006      	beq.n	3022 <_sercom_get_default_pad+0x8e>
    3014:	2b03      	cmp	r3, #3
    3016:	d006      	beq.n	3026 <_sercom_get_default_pad+0x92>
    3018:	e05b      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    301a:	2303      	movs	r3, #3
    301c:	e05a      	b.n	30d4 <_sercom_get_default_pad+0x140>
    301e:	4b39      	ldr	r3, [pc, #228]	; (3104 <_sercom_get_default_pad+0x170>)
    3020:	e058      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3022:	4b39      	ldr	r3, [pc, #228]	; (3108 <_sercom_get_default_pad+0x174>)
    3024:	e056      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3026:	4b39      	ldr	r3, [pc, #228]	; (310c <_sercom_get_default_pad+0x178>)
    3028:	e054      	b.n	30d4 <_sercom_get_default_pad+0x140>
    302a:	1cfb      	adds	r3, r7, #3
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	2b01      	cmp	r3, #1
    3030:	d00a      	beq.n	3048 <_sercom_get_default_pad+0xb4>
    3032:	dc02      	bgt.n	303a <_sercom_get_default_pad+0xa6>
    3034:	2b00      	cmp	r3, #0
    3036:	d005      	beq.n	3044 <_sercom_get_default_pad+0xb0>
    3038:	e04b      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    303a:	2b02      	cmp	r3, #2
    303c:	d006      	beq.n	304c <_sercom_get_default_pad+0xb8>
    303e:	2b03      	cmp	r3, #3
    3040:	d006      	beq.n	3050 <_sercom_get_default_pad+0xbc>
    3042:	e046      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    3044:	4b32      	ldr	r3, [pc, #200]	; (3110 <_sercom_get_default_pad+0x17c>)
    3046:	e045      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3048:	4b32      	ldr	r3, [pc, #200]	; (3114 <_sercom_get_default_pad+0x180>)
    304a:	e043      	b.n	30d4 <_sercom_get_default_pad+0x140>
    304c:	4b32      	ldr	r3, [pc, #200]	; (3118 <_sercom_get_default_pad+0x184>)
    304e:	e041      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3050:	4b32      	ldr	r3, [pc, #200]	; (311c <_sercom_get_default_pad+0x188>)
    3052:	e03f      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3054:	1cfb      	adds	r3, r7, #3
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	2b01      	cmp	r3, #1
    305a:	d00a      	beq.n	3072 <_sercom_get_default_pad+0xde>
    305c:	dc02      	bgt.n	3064 <_sercom_get_default_pad+0xd0>
    305e:	2b00      	cmp	r3, #0
    3060:	d005      	beq.n	306e <_sercom_get_default_pad+0xda>
    3062:	e036      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    3064:	2b02      	cmp	r3, #2
    3066:	d006      	beq.n	3076 <_sercom_get_default_pad+0xe2>
    3068:	2b03      	cmp	r3, #3
    306a:	d006      	beq.n	307a <_sercom_get_default_pad+0xe6>
    306c:	e031      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    306e:	4b2c      	ldr	r3, [pc, #176]	; (3120 <_sercom_get_default_pad+0x18c>)
    3070:	e030      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3072:	4b2c      	ldr	r3, [pc, #176]	; (3124 <_sercom_get_default_pad+0x190>)
    3074:	e02e      	b.n	30d4 <_sercom_get_default_pad+0x140>
    3076:	4b2c      	ldr	r3, [pc, #176]	; (3128 <_sercom_get_default_pad+0x194>)
    3078:	e02c      	b.n	30d4 <_sercom_get_default_pad+0x140>
    307a:	4b2c      	ldr	r3, [pc, #176]	; (312c <_sercom_get_default_pad+0x198>)
    307c:	e02a      	b.n	30d4 <_sercom_get_default_pad+0x140>
    307e:	1cfb      	adds	r3, r7, #3
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	2b01      	cmp	r3, #1
    3084:	d00a      	beq.n	309c <_sercom_get_default_pad+0x108>
    3086:	dc02      	bgt.n	308e <_sercom_get_default_pad+0xfa>
    3088:	2b00      	cmp	r3, #0
    308a:	d005      	beq.n	3098 <_sercom_get_default_pad+0x104>
    308c:	e021      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    308e:	2b02      	cmp	r3, #2
    3090:	d006      	beq.n	30a0 <_sercom_get_default_pad+0x10c>
    3092:	2b03      	cmp	r3, #3
    3094:	d006      	beq.n	30a4 <_sercom_get_default_pad+0x110>
    3096:	e01c      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    3098:	4b25      	ldr	r3, [pc, #148]	; (3130 <_sercom_get_default_pad+0x19c>)
    309a:	e01b      	b.n	30d4 <_sercom_get_default_pad+0x140>
    309c:	4b25      	ldr	r3, [pc, #148]	; (3134 <_sercom_get_default_pad+0x1a0>)
    309e:	e019      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30a0:	4b25      	ldr	r3, [pc, #148]	; (3138 <_sercom_get_default_pad+0x1a4>)
    30a2:	e017      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30a4:	4b25      	ldr	r3, [pc, #148]	; (313c <_sercom_get_default_pad+0x1a8>)
    30a6:	e015      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30a8:	1cfb      	adds	r3, r7, #3
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	2b01      	cmp	r3, #1
    30ae:	d00a      	beq.n	30c6 <_sercom_get_default_pad+0x132>
    30b0:	dc02      	bgt.n	30b8 <_sercom_get_default_pad+0x124>
    30b2:	2b00      	cmp	r3, #0
    30b4:	d005      	beq.n	30c2 <_sercom_get_default_pad+0x12e>
    30b6:	e00c      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    30b8:	2b02      	cmp	r3, #2
    30ba:	d006      	beq.n	30ca <_sercom_get_default_pad+0x136>
    30bc:	2b03      	cmp	r3, #3
    30be:	d006      	beq.n	30ce <_sercom_get_default_pad+0x13a>
    30c0:	e007      	b.n	30d2 <_sercom_get_default_pad+0x13e>
    30c2:	4b1f      	ldr	r3, [pc, #124]	; (3140 <_sercom_get_default_pad+0x1ac>)
    30c4:	e006      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30c6:	4b1f      	ldr	r3, [pc, #124]	; (3144 <_sercom_get_default_pad+0x1b0>)
    30c8:	e004      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30ca:	4b1f      	ldr	r3, [pc, #124]	; (3148 <_sercom_get_default_pad+0x1b4>)
    30cc:	e002      	b.n	30d4 <_sercom_get_default_pad+0x140>
    30ce:	4b1f      	ldr	r3, [pc, #124]	; (314c <_sercom_get_default_pad+0x1b8>)
    30d0:	e000      	b.n	30d4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    30d2:	2300      	movs	r3, #0
}
    30d4:	1c18      	adds	r0, r3, #0
    30d6:	46bd      	mov	sp, r7
    30d8:	b002      	add	sp, #8
    30da:	bd80      	pop	{r7, pc}
    30dc:	42001000 	.word	0x42001000
    30e0:	42000800 	.word	0x42000800
    30e4:	42000c00 	.word	0x42000c00
    30e8:	42001800 	.word	0x42001800
    30ec:	42001c00 	.word	0x42001c00
    30f0:	42001400 	.word	0x42001400
    30f4:	00040003 	.word	0x00040003
    30f8:	00050003 	.word	0x00050003
    30fc:	00060003 	.word	0x00060003
    3100:	00070003 	.word	0x00070003
    3104:	00010003 	.word	0x00010003
    3108:	001e0003 	.word	0x001e0003
    310c:	001f0003 	.word	0x001f0003
    3110:	00080003 	.word	0x00080003
    3114:	00090003 	.word	0x00090003
    3118:	000a0003 	.word	0x000a0003
    311c:	000b0003 	.word	0x000b0003
    3120:	00100003 	.word	0x00100003
    3124:	00110003 	.word	0x00110003
    3128:	00120003 	.word	0x00120003
    312c:	00130003 	.word	0x00130003
    3130:	000c0003 	.word	0x000c0003
    3134:	000d0003 	.word	0x000d0003
    3138:	000e0003 	.word	0x000e0003
    313c:	000f0003 	.word	0x000f0003
    3140:	00160003 	.word	0x00160003
    3144:	00170003 	.word	0x00170003
    3148:	00180003 	.word	0x00180003
    314c:	00190003 	.word	0x00190003

00003150 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3150:	b590      	push	{r4, r7, lr}
    3152:	b08b      	sub	sp, #44	; 0x2c
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3158:	230c      	movs	r3, #12
    315a:	18fb      	adds	r3, r7, r3
    315c:	4a0e      	ldr	r2, [pc, #56]	; (3198 <_sercom_get_sercom_inst_index+0x48>)
    315e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3160:	c313      	stmia	r3!, {r0, r1, r4}
    3162:	ca13      	ldmia	r2!, {r0, r1, r4}
    3164:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3166:	2300      	movs	r3, #0
    3168:	627b      	str	r3, [r7, #36]	; 0x24
    316a:	e00d      	b.n	3188 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	220c      	movs	r2, #12
    3170:	18ba      	adds	r2, r7, r2
    3172:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3174:	0089      	lsls	r1, r1, #2
    3176:	588a      	ldr	r2, [r1, r2]
    3178:	4293      	cmp	r3, r2
    317a:	d102      	bne.n	3182 <_sercom_get_sercom_inst_index+0x32>
			return i;
    317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    317e:	b2db      	uxtb	r3, r3
    3180:	e006      	b.n	3190 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3184:	3301      	adds	r3, #1
    3186:	627b      	str	r3, [r7, #36]	; 0x24
    3188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    318a:	2b05      	cmp	r3, #5
    318c:	d9ee      	bls.n	316c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    318e:	2300      	movs	r3, #0
}
    3190:	1c18      	adds	r0, r3, #0
    3192:	46bd      	mov	sp, r7
    3194:	b00b      	add	sp, #44	; 0x2c
    3196:	bd90      	pop	{r4, r7, pc}
    3198:	0000833c 	.word	0x0000833c

0000319c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	2280      	movs	r2, #128	; 0x80
    31a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2200      	movs	r2, #0
    31ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	2201      	movs	r2, #1
    31b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	2200      	movs	r2, #0
    31ba:	70da      	strb	r2, [r3, #3]
}
    31bc:	46bd      	mov	sp, r7
    31be:	b002      	add	sp, #8
    31c0:	bd80      	pop	{r7, pc}
    31c2:	46c0      	nop			; (mov r8, r8)

000031c4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	1c02      	adds	r2, r0, #0
    31cc:	1dfb      	adds	r3, r7, #7
    31ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    31d0:	230f      	movs	r3, #15
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	1dfa      	adds	r2, r7, #7
    31d6:	7812      	ldrb	r2, [r2, #0]
    31d8:	09d2      	lsrs	r2, r2, #7
    31da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    31dc:	230e      	movs	r3, #14
    31de:	18fb      	adds	r3, r7, r3
    31e0:	1dfa      	adds	r2, r7, #7
    31e2:	7812      	ldrb	r2, [r2, #0]
    31e4:	0952      	lsrs	r2, r2, #5
    31e6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    31e8:	4b0d      	ldr	r3, [pc, #52]	; (3220 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    31ea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    31ec:	230f      	movs	r3, #15
    31ee:	18fb      	adds	r3, r7, r3
    31f0:	781b      	ldrb	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d10f      	bne.n	3216 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    31f6:	230f      	movs	r3, #15
    31f8:	18fb      	adds	r3, r7, r3
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	009b      	lsls	r3, r3, #2
    31fe:	2210      	movs	r2, #16
    3200:	4694      	mov	ip, r2
    3202:	44bc      	add	ip, r7
    3204:	4463      	add	r3, ip
    3206:	3b08      	subs	r3, #8
    3208:	681a      	ldr	r2, [r3, #0]
    320a:	230e      	movs	r3, #14
    320c:	18fb      	adds	r3, r7, r3
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	01db      	lsls	r3, r3, #7
    3212:	18d3      	adds	r3, r2, r3
    3214:	e000      	b.n	3218 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3216:	2300      	movs	r3, #0
	}
}
    3218:	1c18      	adds	r0, r3, #0
    321a:	46bd      	mov	sp, r7
    321c:	b004      	add	sp, #16
    321e:	bd80      	pop	{r7, pc}
    3220:	41004400 	.word	0x41004400

00003224 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3224:	b580      	push	{r7, lr}
    3226:	b086      	sub	sp, #24
    3228:	af00      	add	r7, sp, #0
    322a:	1c02      	adds	r2, r0, #0
    322c:	1dfb      	adds	r3, r7, #7
    322e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3230:	1dfb      	adds	r3, r7, #7
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	1c18      	adds	r0, r3, #0
    3236:	4b19      	ldr	r3, [pc, #100]	; (329c <system_pinmux_pin_get_mux_position+0x78>)
    3238:	4798      	blx	r3
    323a:	1c03      	adds	r3, r0, #0
    323c:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    323e:	1dfb      	adds	r3, r7, #7
    3240:	781b      	ldrb	r3, [r3, #0]
    3242:	221f      	movs	r2, #31
    3244:	4013      	ands	r3, r2
    3246:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3248:	697a      	ldr	r2, [r7, #20]
    324a:	2140      	movs	r1, #64	; 0x40
    324c:	693b      	ldr	r3, [r7, #16]
    324e:	18d3      	adds	r3, r2, r3
    3250:	185b      	adds	r3, r3, r1
    3252:	781b      	ldrb	r3, [r3, #0]
    3254:	b2db      	uxtb	r3, r3
    3256:	1c1a      	adds	r2, r3, #0
    3258:	2301      	movs	r3, #1
    325a:	4013      	ands	r3, r2
    325c:	d101      	bne.n	3262 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    325e:	2380      	movs	r3, #128	; 0x80
    3260:	e017      	b.n	3292 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3262:	693b      	ldr	r3, [r7, #16]
    3264:	085b      	lsrs	r3, r3, #1
    3266:	697a      	ldr	r2, [r7, #20]
    3268:	2130      	movs	r1, #48	; 0x30
    326a:	18d3      	adds	r3, r2, r3
    326c:	185b      	adds	r3, r3, r1
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	b2db      	uxtb	r3, r3
    3272:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3274:	693b      	ldr	r3, [r7, #16]
    3276:	2201      	movs	r2, #1
    3278:	4013      	ands	r3, r2
    327a:	d005      	beq.n	3288 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    327c:	68fb      	ldr	r3, [r7, #12]
    327e:	22f0      	movs	r2, #240	; 0xf0
    3280:	4013      	ands	r3, r2
    3282:	091b      	lsrs	r3, r3, #4
    3284:	b2db      	uxtb	r3, r3
    3286:	e004      	b.n	3292 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	b2db      	uxtb	r3, r3
    328c:	220f      	movs	r2, #15
    328e:	4013      	ands	r3, r2
    3290:	b2db      	uxtb	r3, r3
	}
}
    3292:	1c18      	adds	r0, r3, #0
    3294:	46bd      	mov	sp, r7
    3296:	b006      	add	sp, #24
    3298:	bd80      	pop	{r7, pc}
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	000031c5 	.word	0x000031c5

000032a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    32a0:	b580      	push	{r7, lr}
    32a2:	b082      	sub	sp, #8
    32a4:	af00      	add	r7, sp, #0
    32a6:	1c02      	adds	r2, r0, #0
    32a8:	1dfb      	adds	r3, r7, #7
    32aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    32ac:	1dfb      	adds	r3, r7, #7
    32ae:	781b      	ldrb	r3, [r3, #0]
    32b0:	1c18      	adds	r0, r3, #0
    32b2:	4b03      	ldr	r3, [pc, #12]	; (32c0 <port_get_group_from_gpio_pin+0x20>)
    32b4:	4798      	blx	r3
    32b6:	1c03      	adds	r3, r0, #0
}
    32b8:	1c18      	adds	r0, r3, #0
    32ba:	46bd      	mov	sp, r7
    32bc:	b002      	add	sp, #8
    32be:	bd80      	pop	{r7, pc}
    32c0:	000031c5 	.word	0x000031c5

000032c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	1c02      	adds	r2, r0, #0
    32cc:	1dfb      	adds	r3, r7, #7
    32ce:	701a      	strb	r2, [r3, #0]
    32d0:	1dbb      	adds	r3, r7, #6
    32d2:	1c0a      	adds	r2, r1, #0
    32d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    32d6:	1dfb      	adds	r3, r7, #7
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	1c18      	adds	r0, r3, #0
    32dc:	4b0c      	ldr	r3, [pc, #48]	; (3310 <port_pin_set_output_level+0x4c>)
    32de:	4798      	blx	r3
    32e0:	1c03      	adds	r3, r0, #0
    32e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    32e4:	1dfb      	adds	r3, r7, #7
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	221f      	movs	r2, #31
    32ea:	4013      	ands	r3, r2
    32ec:	2201      	movs	r2, #1
    32ee:	409a      	lsls	r2, r3
    32f0:	1c13      	adds	r3, r2, #0
    32f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    32f4:	1dbb      	adds	r3, r7, #6
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	2b00      	cmp	r3, #0
    32fa:	d003      	beq.n	3304 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    32fc:	68fb      	ldr	r3, [r7, #12]
    32fe:	68ba      	ldr	r2, [r7, #8]
    3300:	619a      	str	r2, [r3, #24]
    3302:	e002      	b.n	330a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3304:	68fb      	ldr	r3, [r7, #12]
    3306:	68ba      	ldr	r2, [r7, #8]
    3308:	615a      	str	r2, [r3, #20]
	}
}
    330a:	46bd      	mov	sp, r7
    330c:	b004      	add	sp, #16
    330e:	bd80      	pop	{r7, pc}
    3310:	000032a1 	.word	0x000032a1

00003314 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3314:	b580      	push	{r7, lr}
    3316:	b082      	sub	sp, #8
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2200      	movs	r2, #0
    3320:	701a      	strb	r2, [r3, #0]
}
    3322:	46bd      	mov	sp, r7
    3324:	b002      	add	sp, #8
    3326:	bd80      	pop	{r7, pc}

00003328 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3328:	b580      	push	{r7, lr}
    332a:	b082      	sub	sp, #8
    332c:	af00      	add	r7, sp, #0
    332e:	1c02      	adds	r2, r0, #0
    3330:	6039      	str	r1, [r7, #0]
    3332:	1dfb      	adds	r3, r7, #7
    3334:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3336:	1dfb      	adds	r3, r7, #7
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	2b01      	cmp	r3, #1
    333c:	d00a      	beq.n	3354 <system_apb_clock_set_mask+0x2c>
    333e:	2b02      	cmp	r3, #2
    3340:	d00f      	beq.n	3362 <system_apb_clock_set_mask+0x3a>
    3342:	2b00      	cmp	r3, #0
    3344:	d114      	bne.n	3370 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3346:	4b0e      	ldr	r3, [pc, #56]	; (3380 <system_apb_clock_set_mask+0x58>)
    3348:	4a0d      	ldr	r2, [pc, #52]	; (3380 <system_apb_clock_set_mask+0x58>)
    334a:	6991      	ldr	r1, [r2, #24]
    334c:	683a      	ldr	r2, [r7, #0]
    334e:	430a      	orrs	r2, r1
    3350:	619a      	str	r2, [r3, #24]
			break;
    3352:	e00f      	b.n	3374 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3354:	4b0a      	ldr	r3, [pc, #40]	; (3380 <system_apb_clock_set_mask+0x58>)
    3356:	4a0a      	ldr	r2, [pc, #40]	; (3380 <system_apb_clock_set_mask+0x58>)
    3358:	69d1      	ldr	r1, [r2, #28]
    335a:	683a      	ldr	r2, [r7, #0]
    335c:	430a      	orrs	r2, r1
    335e:	61da      	str	r2, [r3, #28]
			break;
    3360:	e008      	b.n	3374 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3362:	4b07      	ldr	r3, [pc, #28]	; (3380 <system_apb_clock_set_mask+0x58>)
    3364:	4a06      	ldr	r2, [pc, #24]	; (3380 <system_apb_clock_set_mask+0x58>)
    3366:	6a11      	ldr	r1, [r2, #32]
    3368:	683a      	ldr	r2, [r7, #0]
    336a:	430a      	orrs	r2, r1
    336c:	621a      	str	r2, [r3, #32]
			break;
    336e:	e001      	b.n	3374 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3370:	2317      	movs	r3, #23
    3372:	e000      	b.n	3376 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3374:	2300      	movs	r3, #0
}
    3376:	1c18      	adds	r0, r3, #0
    3378:	46bd      	mov	sp, r7
    337a:	b002      	add	sp, #8
    337c:	bd80      	pop	{r7, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	40000400 	.word	0x40000400

00003384 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3384:	b580      	push	{r7, lr}
    3386:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3388:	4b05      	ldr	r3, [pc, #20]	; (33a0 <system_is_debugger_present+0x1c>)
    338a:	789b      	ldrb	r3, [r3, #2]
    338c:	b2db      	uxtb	r3, r3
    338e:	1c1a      	adds	r2, r3, #0
    3390:	2302      	movs	r3, #2
    3392:	4013      	ands	r3, r2
    3394:	1e5a      	subs	r2, r3, #1
    3396:	4193      	sbcs	r3, r2
    3398:	b2db      	uxtb	r3, r3
}
    339a:	1c18      	adds	r0, r3, #0
    339c:	46bd      	mov	sp, r7
    339e:	bd80      	pop	{r7, pc}
    33a0:	41002000 	.word	0x41002000

000033a4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b084      	sub	sp, #16
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    33b2:	68fb      	ldr	r3, [r7, #12]
    33b4:	7e1b      	ldrb	r3, [r3, #24]
    33b6:	b2db      	uxtb	r3, r3
    33b8:	1c1a      	adds	r2, r3, #0
    33ba:	2301      	movs	r3, #1
    33bc:	4013      	ands	r3, r2
    33be:	1e5a      	subs	r2, r3, #1
    33c0:	4193      	sbcs	r3, r2
    33c2:	b2db      	uxtb	r3, r3
}
    33c4:	1c18      	adds	r0, r3, #0
    33c6:	46bd      	mov	sp, r7
    33c8:	b004      	add	sp, #16
    33ca:	bd80      	pop	{r7, pc}

000033cc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b084      	sub	sp, #16
    33d0:	af00      	add	r7, sp, #0
    33d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    33da:	68fb      	ldr	r3, [r7, #12]
    33dc:	7e1b      	ldrb	r3, [r3, #24]
    33de:	b2db      	uxtb	r3, r3
    33e0:	1c1a      	adds	r2, r3, #0
    33e2:	2304      	movs	r3, #4
    33e4:	4013      	ands	r3, r2
    33e6:	1e5a      	subs	r2, r3, #1
    33e8:	4193      	sbcs	r3, r2
    33ea:	b2db      	uxtb	r3, r3
}
    33ec:	1c18      	adds	r0, r3, #0
    33ee:	46bd      	mov	sp, r7
    33f0:	b004      	add	sp, #16
    33f2:	bd80      	pop	{r7, pc}

000033f4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b084      	sub	sp, #16
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
    33fc:	1c0a      	adds	r2, r1, #0
    33fe:	1cbb      	adds	r3, r7, #2
    3400:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	1c18      	adds	r0, r3, #0
    340c:	4b0a      	ldr	r3, [pc, #40]	; (3438 <spi_write+0x44>)
    340e:	4798      	blx	r3
    3410:	1c03      	adds	r3, r0, #0
    3412:	1c1a      	adds	r2, r3, #0
    3414:	2301      	movs	r3, #1
    3416:	4053      	eors	r3, r2
    3418:	b2db      	uxtb	r3, r3
    341a:	2b00      	cmp	r3, #0
    341c:	d001      	beq.n	3422 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    341e:	2305      	movs	r3, #5
    3420:	e006      	b.n	3430 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3422:	1cbb      	adds	r3, r7, #2
    3424:	881b      	ldrh	r3, [r3, #0]
    3426:	05db      	lsls	r3, r3, #23
    3428:	0dda      	lsrs	r2, r3, #23
    342a:	68fb      	ldr	r3, [r7, #12]
    342c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    342e:	2300      	movs	r3, #0
}
    3430:	1c18      	adds	r0, r3, #0
    3432:	46bd      	mov	sp, r7
    3434:	b004      	add	sp, #16
    3436:	bd80      	pop	{r7, pc}
    3438:	000033a5 	.word	0x000033a5

0000343c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
    3444:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	1c18      	adds	r0, r3, #0
    3450:	4b1d      	ldr	r3, [pc, #116]	; (34c8 <spi_read+0x8c>)
    3452:	4798      	blx	r3
    3454:	1c03      	adds	r3, r0, #0
    3456:	1c1a      	adds	r2, r3, #0
    3458:	2301      	movs	r3, #1
    345a:	4053      	eors	r3, r2
    345c:	b2db      	uxtb	r3, r3
    345e:	2b00      	cmp	r3, #0
    3460:	d001      	beq.n	3466 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3462:	2310      	movs	r3, #16
    3464:	e02c      	b.n	34c0 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3466:	230f      	movs	r3, #15
    3468:	18fb      	adds	r3, r7, r3
    346a:	2200      	movs	r2, #0
    346c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    346e:	68bb      	ldr	r3, [r7, #8]
    3470:	8b5b      	ldrh	r3, [r3, #26]
    3472:	b29b      	uxth	r3, r3
    3474:	1c1a      	adds	r2, r3, #0
    3476:	2304      	movs	r3, #4
    3478:	4013      	ands	r3, r2
    347a:	d00b      	beq.n	3494 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    347c:	230f      	movs	r3, #15
    347e:	18fb      	adds	r3, r7, r3
    3480:	221e      	movs	r2, #30
    3482:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3484:	68bb      	ldr	r3, [r7, #8]
    3486:	8b5b      	ldrh	r3, [r3, #26]
    3488:	b29b      	uxth	r3, r3
    348a:	2204      	movs	r2, #4
    348c:	4313      	orrs	r3, r2
    348e:	b29a      	uxth	r2, r3
    3490:	68bb      	ldr	r3, [r7, #8]
    3492:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	799b      	ldrb	r3, [r3, #6]
    3498:	2b01      	cmp	r3, #1
    349a:	d108      	bne.n	34ae <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    349c:	68bb      	ldr	r3, [r7, #8]
    349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34a0:	b29b      	uxth	r3, r3
    34a2:	05db      	lsls	r3, r3, #23
    34a4:	0ddb      	lsrs	r3, r3, #23
    34a6:	b29a      	uxth	r2, r3
    34a8:	683b      	ldr	r3, [r7, #0]
    34aa:	801a      	strh	r2, [r3, #0]
    34ac:	e005      	b.n	34ba <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    34ae:	68bb      	ldr	r3, [r7, #8]
    34b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34b2:	b2db      	uxtb	r3, r3
    34b4:	b29a      	uxth	r2, r3
    34b6:	683b      	ldr	r3, [r7, #0]
    34b8:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    34ba:	230f      	movs	r3, #15
    34bc:	18fb      	adds	r3, r7, r3
    34be:	781b      	ldrb	r3, [r3, #0]
}
    34c0:	1c18      	adds	r0, r3, #0
    34c2:	46bd      	mov	sp, r7
    34c4:	b004      	add	sp, #16
    34c6:	bd80      	pop	{r7, pc}
    34c8:	000033cd 	.word	0x000033cd

000034cc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    34cc:	b590      	push	{r4, r7, lr}
    34ce:	b093      	sub	sp, #76	; 0x4c
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
    34d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34d6:	687b      	ldr	r3, [r7, #4]
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    34e2:	231c      	movs	r3, #28
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	1c18      	adds	r0, r3, #0
    34e8:	4b86      	ldr	r3, [pc, #536]	; (3704 <_spi_set_config+0x238>)
    34ea:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34ec:	231c      	movs	r3, #28
    34ee:	18fb      	adds	r3, r7, r3
    34f0:	2200      	movs	r2, #0
    34f2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    34f4:	683b      	ldr	r3, [r7, #0]
    34f6:	781b      	ldrb	r3, [r3, #0]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d103      	bne.n	3504 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    34fc:	231c      	movs	r3, #28
    34fe:	18fb      	adds	r3, r7, r3
    3500:	2200      	movs	r2, #0
    3502:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3508:	230c      	movs	r3, #12
    350a:	18fb      	adds	r3, r7, r3
    350c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    350e:	683b      	ldr	r3, [r7, #0]
    3510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3512:	230c      	movs	r3, #12
    3514:	18fb      	adds	r3, r7, r3
    3516:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3518:	683b      	ldr	r3, [r7, #0]
    351a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    351c:	230c      	movs	r3, #12
    351e:	18fb      	adds	r3, r7, r3
    3520:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3522:	683b      	ldr	r3, [r7, #0]
    3524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3526:	230c      	movs	r3, #12
    3528:	18fb      	adds	r3, r7, r3
    352a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    352c:	2347      	movs	r3, #71	; 0x47
    352e:	18fb      	adds	r3, r7, r3
    3530:	2200      	movs	r2, #0
    3532:	701a      	strb	r2, [r3, #0]
    3534:	e02c      	b.n	3590 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3536:	2347      	movs	r3, #71	; 0x47
    3538:	18fb      	adds	r3, r7, r3
    353a:	781a      	ldrb	r2, [r3, #0]
    353c:	230c      	movs	r3, #12
    353e:	18fb      	adds	r3, r7, r3
    3540:	0092      	lsls	r2, r2, #2
    3542:	58d3      	ldr	r3, [r2, r3]
    3544:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3548:	2b00      	cmp	r3, #0
    354a:	d109      	bne.n	3560 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    354c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    354e:	2347      	movs	r3, #71	; 0x47
    3550:	18fb      	adds	r3, r7, r3
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	1c10      	adds	r0, r2, #0
    3556:	1c19      	adds	r1, r3, #0
    3558:	4b6b      	ldr	r3, [pc, #428]	; (3708 <_spi_set_config+0x23c>)
    355a:	4798      	blx	r3
    355c:	1c03      	adds	r3, r0, #0
    355e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3562:	3301      	adds	r3, #1
    3564:	d00d      	beq.n	3582 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3568:	b2da      	uxtb	r2, r3
    356a:	231c      	movs	r3, #28
    356c:	18fb      	adds	r3, r7, r3
    356e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3572:	0c1b      	lsrs	r3, r3, #16
    3574:	b2da      	uxtb	r2, r3
    3576:	231c      	movs	r3, #28
    3578:	18fb      	adds	r3, r7, r3
    357a:	1c10      	adds	r0, r2, #0
    357c:	1c19      	adds	r1, r3, #0
    357e:	4b63      	ldr	r3, [pc, #396]	; (370c <_spi_set_config+0x240>)
    3580:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3582:	2347      	movs	r3, #71	; 0x47
    3584:	18fb      	adds	r3, r7, r3
    3586:	781a      	ldrb	r2, [r3, #0]
    3588:	2347      	movs	r3, #71	; 0x47
    358a:	18fb      	adds	r3, r7, r3
    358c:	3201      	adds	r2, #1
    358e:	701a      	strb	r2, [r3, #0]
    3590:	2347      	movs	r3, #71	; 0x47
    3592:	18fb      	adds	r3, r7, r3
    3594:	781b      	ldrb	r3, [r3, #0]
    3596:	2b03      	cmp	r3, #3
    3598:	d9cd      	bls.n	3536 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	781a      	ldrb	r2, [r3, #0]
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    35a2:	683b      	ldr	r3, [r7, #0]
    35a4:	7c1a      	ldrb	r2, [r3, #16]
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    35aa:	683b      	ldr	r3, [r7, #0]
    35ac:	7c9a      	ldrb	r2, [r3, #18]
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    35b2:	683b      	ldr	r3, [r7, #0]
    35b4:	7d1a      	ldrb	r2, [r3, #20]
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    35ba:	230a      	movs	r3, #10
    35bc:	18fb      	adds	r3, r7, r3
    35be:	2200      	movs	r2, #0
    35c0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    35c2:	2300      	movs	r3, #0
    35c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    35c6:	2300      	movs	r3, #0
    35c8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    35ca:	683b      	ldr	r3, [r7, #0]
    35cc:	781b      	ldrb	r3, [r3, #0]
    35ce:	2b01      	cmp	r3, #1
    35d0:	d12b      	bne.n	362a <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	1c18      	adds	r0, r3, #0
    35d8:	4b4d      	ldr	r3, [pc, #308]	; (3710 <_spi_set_config+0x244>)
    35da:	4798      	blx	r3
    35dc:	1c03      	adds	r3, r0, #0
    35de:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    35e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35e2:	3314      	adds	r3, #20
    35e4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    35e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35e8:	b2db      	uxtb	r3, r3
    35ea:	1c18      	adds	r0, r3, #0
    35ec:	4b49      	ldr	r3, [pc, #292]	; (3714 <_spi_set_config+0x248>)
    35ee:	4798      	blx	r3
    35f0:	1c03      	adds	r3, r0, #0
    35f2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    35f4:	683b      	ldr	r3, [r7, #0]
    35f6:	6999      	ldr	r1, [r3, #24]
    35f8:	2323      	movs	r3, #35	; 0x23
    35fa:	18fc      	adds	r4, r7, r3
    35fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    35fe:	230a      	movs	r3, #10
    3600:	18fb      	adds	r3, r7, r3
    3602:	1c08      	adds	r0, r1, #0
    3604:	1c11      	adds	r1, r2, #0
    3606:	1c1a      	adds	r2, r3, #0
    3608:	4b43      	ldr	r3, [pc, #268]	; (3718 <_spi_set_config+0x24c>)
    360a:	4798      	blx	r3
    360c:	1c03      	adds	r3, r0, #0
    360e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3610:	2323      	movs	r3, #35	; 0x23
    3612:	18fb      	adds	r3, r7, r3
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	2b00      	cmp	r3, #0
    3618:	d001      	beq.n	361e <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    361a:	2317      	movs	r3, #23
    361c:	e06d      	b.n	36fa <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    361e:	230a      	movs	r3, #10
    3620:	18fb      	adds	r3, r7, r3
    3622:	881b      	ldrh	r3, [r3, #0]
    3624:	b2da      	uxtb	r2, r3
    3626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3628:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    362a:	683b      	ldr	r3, [r7, #0]
    362c:	781b      	ldrb	r3, [r3, #0]
    362e:	2b00      	cmp	r3, #0
    3630:	d11a      	bne.n	3668 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    3632:	683b      	ldr	r3, [r7, #0]
    3634:	699b      	ldr	r3, [r3, #24]
    3636:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    3638:	683b      	ldr	r3, [r7, #0]
    363a:	8b9b      	ldrh	r3, [r3, #28]
    363c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3642:	683a      	ldr	r2, [r7, #0]
    3644:	7f92      	ldrb	r2, [r2, #30]
    3646:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3648:	683a      	ldr	r2, [r7, #0]
    364a:	7fd2      	ldrb	r2, [r2, #31]
    364c:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    364e:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    3650:	431a      	orrs	r2, r3
    3652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3654:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    3656:	683b      	ldr	r3, [r7, #0]
    3658:	2220      	movs	r2, #32
    365a:	5c9b      	ldrb	r3, [r3, r2]
    365c:	2b00      	cmp	r3, #0
    365e:	d003      	beq.n	3668 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3662:	2240      	movs	r2, #64	; 0x40
    3664:	4313      	orrs	r3, r2
    3666:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    3668:	683b      	ldr	r3, [r7, #0]
    366a:	685b      	ldr	r3, [r3, #4]
    366c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    366e:	4313      	orrs	r3, r2
    3670:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	689b      	ldr	r3, [r3, #8]
    3676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3678:	4313      	orrs	r3, r2
    367a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    367c:	683b      	ldr	r3, [r7, #0]
    367e:	68db      	ldr	r3, [r3, #12]
    3680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3682:	4313      	orrs	r3, r2
    3684:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3686:	683b      	ldr	r3, [r7, #0]
    3688:	7c1b      	ldrb	r3, [r3, #16]
    368a:	1c1a      	adds	r2, r3, #0
    368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    368e:	4313      	orrs	r3, r2
    3690:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3692:	683b      	ldr	r3, [r7, #0]
    3694:	7c5b      	ldrb	r3, [r3, #17]
    3696:	2b00      	cmp	r3, #0
    3698:	d103      	bne.n	36a2 <_spi_set_config+0x1d6>
    369a:	4b20      	ldr	r3, [pc, #128]	; (371c <_spi_set_config+0x250>)
    369c:	4798      	blx	r3
    369e:	1e03      	subs	r3, r0, #0
    36a0:	d003      	beq.n	36aa <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    36a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36a4:	2280      	movs	r2, #128	; 0x80
    36a6:	4313      	orrs	r3, r2
    36a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    36aa:	683b      	ldr	r3, [r7, #0]
    36ac:	7c9b      	ldrb	r3, [r3, #18]
    36ae:	2b00      	cmp	r3, #0
    36b0:	d004      	beq.n	36bc <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    36b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36b4:	2280      	movs	r2, #128	; 0x80
    36b6:	0292      	lsls	r2, r2, #10
    36b8:	4313      	orrs	r3, r2
    36ba:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    36bc:	683b      	ldr	r3, [r7, #0]
    36be:	7cdb      	ldrb	r3, [r3, #19]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d004      	beq.n	36ce <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    36c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36c6:	2280      	movs	r2, #128	; 0x80
    36c8:	0092      	lsls	r2, r2, #2
    36ca:	4313      	orrs	r3, r2
    36cc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	7d1b      	ldrb	r3, [r3, #20]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d004      	beq.n	36e0 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    36d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36d8:	2280      	movs	r2, #128	; 0x80
    36da:	0192      	lsls	r2, r2, #6
    36dc:	4313      	orrs	r3, r2
    36de:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    36e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36e2:	681a      	ldr	r2, [r3, #0]
    36e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36e6:	431a      	orrs	r2, r3
    36e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ea:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    36ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ee:	685a      	ldr	r2, [r3, #4]
    36f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36f2:	431a      	orrs	r2, r3
    36f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36f6:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    36f8:	2300      	movs	r3, #0
}
    36fa:	1c18      	adds	r0, r3, #0
    36fc:	46bd      	mov	sp, r7
    36fe:	b013      	add	sp, #76	; 0x4c
    3700:	bd90      	pop	{r4, r7, pc}
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	0000319d 	.word	0x0000319d
    3708:	00002f95 	.word	0x00002f95
    370c:	0000497d 	.word	0x0000497d
    3710:	00003151 	.word	0x00003151
    3714:	000047b5 	.word	0x000047b5
    3718:	00002e8d 	.word	0x00002e8d
    371c:	00003385 	.word	0x00003385

00003720 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    3720:	b590      	push	{r4, r7, lr}
    3722:	b091      	sub	sp, #68	; 0x44
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    3736:	683b      	ldr	r3, [r7, #0]
    3738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    373a:	230c      	movs	r3, #12
    373c:	18fb      	adds	r3, r7, r3
    373e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    3740:	683b      	ldr	r3, [r7, #0]
    3742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    3744:	230c      	movs	r3, #12
    3746:	18fb      	adds	r3, r7, r3
    3748:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    374e:	230c      	movs	r3, #12
    3750:	18fb      	adds	r3, r7, r3
    3752:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    3758:	230c      	movs	r3, #12
    375a:	18fb      	adds	r3, r7, r3
    375c:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    375e:	233f      	movs	r3, #63	; 0x3f
    3760:	18fb      	adds	r3, r7, r3
    3762:	2200      	movs	r2, #0
    3764:	701a      	strb	r2, [r3, #0]
    3766:	e030      	b.n	37ca <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3768:	233f      	movs	r3, #63	; 0x3f
    376a:	18fb      	adds	r3, r7, r3
    376c:	781a      	ldrb	r2, [r3, #0]
    376e:	230c      	movs	r3, #12
    3770:	18fb      	adds	r3, r7, r3
    3772:	0092      	lsls	r2, r2, #2
    3774:	58d3      	ldr	r3, [r2, r3]
    3776:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    3778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    377a:	2b00      	cmp	r3, #0
    377c:	d109      	bne.n	3792 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    377e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3780:	233f      	movs	r3, #63	; 0x3f
    3782:	18fb      	adds	r3, r7, r3
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	1c10      	adds	r0, r2, #0
    3788:	1c19      	adds	r1, r3, #0
    378a:	4b6f      	ldr	r3, [pc, #444]	; (3948 <_spi_check_config+0x228>)
    378c:	4798      	blx	r3
    378e:	1c03      	adds	r3, r0, #0
    3790:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    3792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3794:	3301      	adds	r3, #1
    3796:	d100      	bne.n	379a <_spi_check_config+0x7a>
			continue;
    3798:	e010      	b.n	37bc <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
    379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    379c:	041b      	lsls	r3, r3, #16
    379e:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    37a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    37a2:	0c1b      	lsrs	r3, r3, #16
    37a4:	b2db      	uxtb	r3, r3
    37a6:	1c18      	adds	r0, r3, #0
    37a8:	4b68      	ldr	r3, [pc, #416]	; (394c <_spi_check_config+0x22c>)
    37aa:	4798      	blx	r3
    37ac:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    37ae:	429c      	cmp	r4, r3
    37b0:	d004      	beq.n	37bc <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	2200      	movs	r2, #0
    37b6:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    37b8:	231c      	movs	r3, #28
    37ba:	e0c0      	b.n	393e <_spi_check_config+0x21e>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    37bc:	233f      	movs	r3, #63	; 0x3f
    37be:	18fb      	adds	r3, r7, r3
    37c0:	781a      	ldrb	r2, [r3, #0]
    37c2:	233f      	movs	r3, #63	; 0x3f
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	3201      	adds	r2, #1
    37c8:	701a      	strb	r2, [r3, #0]
    37ca:	233f      	movs	r3, #63	; 0x3f
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	781b      	ldrb	r3, [r3, #0]
    37d0:	2b03      	cmp	r3, #3
    37d2:	d9c9      	bls.n	3768 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    37d4:	2013      	movs	r0, #19
    37d6:	4b5e      	ldr	r3, [pc, #376]	; (3950 <_spi_check_config+0x230>)
    37d8:	4798      	blx	r3
    37da:	1c03      	adds	r3, r0, #0
    37dc:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    37de:	2300      	movs	r3, #0
    37e0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    37e2:	2300      	movs	r3, #0
    37e4:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    37e6:	2300      	movs	r3, #0
    37e8:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	781b      	ldrb	r3, [r3, #0]
    37ee:	2b01      	cmp	r3, #1
    37f0:	d123      	bne.n	383a <_spi_check_config+0x11a>
		enum status_code error_code = _sercom_get_sync_baud_val(
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	6999      	ldr	r1, [r3, #24]
    37f6:	231f      	movs	r3, #31
    37f8:	18fc      	adds	r4, r7, r3
    37fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37fc:	230a      	movs	r3, #10
    37fe:	18fb      	adds	r3, r7, r3
    3800:	1c08      	adds	r0, r1, #0
    3802:	1c11      	adds	r1, r2, #0
    3804:	1c1a      	adds	r2, r3, #0
    3806:	4b53      	ldr	r3, [pc, #332]	; (3954 <_spi_check_config+0x234>)
    3808:	4798      	blx	r3
    380a:	1c03      	adds	r3, r0, #0
    380c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    380e:	231f      	movs	r3, #31
    3810:	18fb      	adds	r3, r7, r3
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	2b00      	cmp	r3, #0
    3816:	d001      	beq.n	381c <_spi_check_config+0xfc>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3818:	2317      	movs	r3, #23
    381a:	e090      	b.n	393e <_spi_check_config+0x21e>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    381e:	7b1b      	ldrb	r3, [r3, #12]
    3820:	b2da      	uxtb	r2, r3
    3822:	230a      	movs	r3, #10
    3824:	18fb      	adds	r3, r7, r3
    3826:	881b      	ldrh	r3, [r3, #0]
    3828:	b2db      	uxtb	r3, r3
    382a:	429a      	cmp	r2, r3
    382c:	d001      	beq.n	3832 <_spi_check_config+0x112>
			return STATUS_ERR_DENIED;
    382e:	231c      	movs	r3, #28
    3830:	e085      	b.n	393e <_spi_check_config+0x21e>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    3832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3834:	220c      	movs	r2, #12
    3836:	4313      	orrs	r3, r2
    3838:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    383a:	683b      	ldr	r3, [r7, #0]
    383c:	781b      	ldrb	r3, [r3, #0]
    383e:	2b00      	cmp	r3, #0
    3840:	d129      	bne.n	3896 <_spi_check_config+0x176>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    3842:	683b      	ldr	r3, [r7, #0]
    3844:	699b      	ldr	r3, [r3, #24]
    3846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3848:	4313      	orrs	r3, r2
    384a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    384c:	683b      	ldr	r3, [r7, #0]
    384e:	8b9b      	ldrh	r3, [r3, #28]
    3850:	1c1a      	adds	r2, r3, #0
    3852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3854:	4313      	orrs	r3, r2
    3856:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3858:	683b      	ldr	r3, [r7, #0]
    385a:	7f9b      	ldrb	r3, [r3, #30]
    385c:	1c1a      	adds	r2, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    385e:	683b      	ldr	r3, [r7, #0]
    3860:	7fdb      	ldrb	r3, [r3, #31]
    3862:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3864:	4313      	orrs	r3, r2
    3866:	1c1a      	adds	r2, r3, #0
    3868:	6a3b      	ldr	r3, [r7, #32]
    386a:	4313      	orrs	r3, r2
    386c:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3870:	681a      	ldr	r2, [r3, #0]
    3872:	6a3b      	ldr	r3, [r7, #32]
    3874:	429a      	cmp	r2, r3
    3876:	d001      	beq.n	387c <_spi_check_config+0x15c>
			return STATUS_ERR_DENIED;
    3878:	231c      	movs	r3, #28
    387a:	e060      	b.n	393e <_spi_check_config+0x21e>
		}

		if (config->mode_specific.slave.preload_enable) {
    387c:	683b      	ldr	r3, [r7, #0]
    387e:	2220      	movs	r2, #32
    3880:	5c9b      	ldrb	r3, [r3, r2]
    3882:	2b00      	cmp	r3, #0
    3884:	d003      	beq.n	388e <_spi_check_config+0x16e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3888:	2240      	movs	r2, #64	; 0x40
    388a:	4313      	orrs	r3, r2
    388c:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3890:	2208      	movs	r2, #8
    3892:	4313      	orrs	r3, r2
    3894:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    3896:	683b      	ldr	r3, [r7, #0]
    3898:	685b      	ldr	r3, [r3, #4]
    389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    389c:	4313      	orrs	r3, r2
    389e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    38a0:	683b      	ldr	r3, [r7, #0]
    38a2:	689b      	ldr	r3, [r3, #8]
    38a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    38a6:	4313      	orrs	r3, r2
    38a8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    38aa:	683b      	ldr	r3, [r7, #0]
    38ac:	68db      	ldr	r3, [r3, #12]
    38ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    38b0:	4313      	orrs	r3, r2
    38b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    38b4:	683b      	ldr	r3, [r7, #0]
    38b6:	7c1b      	ldrb	r3, [r3, #16]
    38b8:	1c1a      	adds	r2, r3, #0
    38ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38bc:	4313      	orrs	r3, r2
    38be:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    38c0:	683b      	ldr	r3, [r7, #0]
    38c2:	7c5b      	ldrb	r3, [r3, #17]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d003      	beq.n	38d0 <_spi_check_config+0x1b0>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    38c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38ca:	2280      	movs	r2, #128	; 0x80
    38cc:	4313      	orrs	r3, r2
    38ce:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    38d0:	683b      	ldr	r3, [r7, #0]
    38d2:	7c9b      	ldrb	r3, [r3, #18]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d004      	beq.n	38e2 <_spi_check_config+0x1c2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    38d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38da:	2280      	movs	r2, #128	; 0x80
    38dc:	0292      	lsls	r2, r2, #10
    38de:	4313      	orrs	r3, r2
    38e0:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    38e2:	683b      	ldr	r3, [r7, #0]
    38e4:	7cdb      	ldrb	r3, [r3, #19]
    38e6:	2b00      	cmp	r3, #0
    38e8:	d004      	beq.n	38f4 <_spi_check_config+0x1d4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    38ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38ec:	2280      	movs	r2, #128	; 0x80
    38ee:	0092      	lsls	r2, r2, #2
    38f0:	4313      	orrs	r3, r2
    38f2:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    38f4:	683b      	ldr	r3, [r7, #0]
    38f6:	7d1b      	ldrb	r3, [r3, #20]
    38f8:	2b00      	cmp	r3, #0
    38fa:	d004      	beq.n	3906 <_spi_check_config+0x1e6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    38fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38fe:	2280      	movs	r2, #128	; 0x80
    3900:	0192      	lsls	r2, r2, #6
    3902:	4313      	orrs	r3, r2
    3904:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    3906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3908:	2202      	movs	r2, #2
    390a:	4313      	orrs	r3, r2
    390c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3910:	681a      	ldr	r2, [r3, #0]
    3912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3914:	429a      	cmp	r2, r3
    3916:	d10e      	bne.n	3936 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
    3918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    391a:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    391e:	429a      	cmp	r2, r3
    3920:	d109      	bne.n	3936 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    3922:	683b      	ldr	r3, [r7, #0]
    3924:	781a      	ldrb	r2, [r3, #0]
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    392a:	683b      	ldr	r3, [r7, #0]
    392c:	7c1a      	ldrb	r2, [r3, #16]
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    3932:	2300      	movs	r3, #0
    3934:	e003      	b.n	393e <_spi_check_config+0x21e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	2200      	movs	r2, #0
    393a:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    393c:	231c      	movs	r3, #28
}
    393e:	1c18      	adds	r0, r3, #0
    3940:	46bd      	mov	sp, r7
    3942:	b011      	add	sp, #68	; 0x44
    3944:	bd90      	pop	{r4, r7, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	00002f95 	.word	0x00002f95
    394c:	00003225 	.word	0x00003225
    3950:	000047b5 	.word	0x000047b5
    3954:	00002e8d 	.word	0x00002e8d

00003958 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3958:	b580      	push	{r7, lr}
    395a:	b08a      	sub	sp, #40	; 0x28
    395c:	af00      	add	r7, sp, #0
    395e:	60f8      	str	r0, [r7, #12]
    3960:	60b9      	str	r1, [r7, #8]
    3962:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3964:	68fb      	ldr	r3, [r7, #12]
    3966:	68ba      	ldr	r2, [r7, #8]
    3968:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	2202      	movs	r2, #2
    3976:	4013      	ands	r3, r2
    3978:	d007      	beq.n	398a <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    397a:	68fa      	ldr	r2, [r7, #12]
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	1c10      	adds	r0, r2, #0
    3980:	1c19      	adds	r1, r3, #0
    3982:	4b2f      	ldr	r3, [pc, #188]	; (3a40 <spi_init+0xe8>)
    3984:	4798      	blx	r3
    3986:	1c03      	adds	r3, r0, #0
    3988:	e055      	b.n	3a36 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	2201      	movs	r2, #1
    3990:	4013      	ands	r3, r2
    3992:	d001      	beq.n	3998 <spi_init+0x40>
		return STATUS_BUSY;
    3994:	2305      	movs	r3, #5
    3996:	e04e      	b.n	3a36 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	1c18      	adds	r0, r3, #0
    399e:	4b29      	ldr	r3, [pc, #164]	; (3a44 <spi_init+0xec>)
    39a0:	4798      	blx	r3
    39a2:	1c03      	adds	r3, r0, #0
    39a4:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    39a6:	6a3b      	ldr	r3, [r7, #32]
    39a8:	3302      	adds	r3, #2
    39aa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    39ac:	6a3b      	ldr	r3, [r7, #32]
    39ae:	3314      	adds	r3, #20
    39b0:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    39b2:	69fb      	ldr	r3, [r7, #28]
    39b4:	2201      	movs	r2, #1
    39b6:	409a      	lsls	r2, r3
    39b8:	1c13      	adds	r3, r2, #0
    39ba:	2002      	movs	r0, #2
    39bc:	1c19      	adds	r1, r3, #0
    39be:	4b22      	ldr	r3, [pc, #136]	; (3a48 <spi_init+0xf0>)
    39c0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    39c2:	2314      	movs	r3, #20
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	1c18      	adds	r0, r3, #0
    39c8:	4b20      	ldr	r3, [pc, #128]	; (3a4c <spi_init+0xf4>)
    39ca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	2224      	movs	r2, #36	; 0x24
    39d0:	5c9a      	ldrb	r2, [r3, r2]
    39d2:	2314      	movs	r3, #20
    39d4:	18fb      	adds	r3, r7, r3
    39d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    39d8:	69bb      	ldr	r3, [r7, #24]
    39da:	b2da      	uxtb	r2, r3
    39dc:	2314      	movs	r3, #20
    39de:	18fb      	adds	r3, r7, r3
    39e0:	1c10      	adds	r0, r2, #0
    39e2:	1c19      	adds	r1, r3, #0
    39e4:	4b1a      	ldr	r3, [pc, #104]	; (3a50 <spi_init+0xf8>)
    39e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    39e8:	69bb      	ldr	r3, [r7, #24]
    39ea:	b2db      	uxtb	r3, r3
    39ec:	1c18      	adds	r0, r3, #0
    39ee:	4b19      	ldr	r3, [pc, #100]	; (3a54 <spi_init+0xfc>)
    39f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	2224      	movs	r2, #36	; 0x24
    39f6:	5c9b      	ldrb	r3, [r3, r2]
    39f8:	1c18      	adds	r0, r3, #0
    39fa:	2100      	movs	r1, #0
    39fc:	4b16      	ldr	r3, [pc, #88]	; (3a58 <spi_init+0x100>)
    39fe:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	2b01      	cmp	r3, #1
    3a06:	d105      	bne.n	3a14 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	220c      	movs	r2, #12
    3a0e:	431a      	orrs	r2, r3
    3a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a12:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	781b      	ldrb	r3, [r3, #0]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d105      	bne.n	3a28 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	2208      	movs	r2, #8
    3a22:	431a      	orrs	r2, r3
    3a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a26:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    3a28:	68fa      	ldr	r2, [r7, #12]
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	1c10      	adds	r0, r2, #0
    3a2e:	1c19      	adds	r1, r3, #0
    3a30:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <spi_init+0x104>)
    3a32:	4798      	blx	r3
    3a34:	1c03      	adds	r3, r0, #0
}
    3a36:	1c18      	adds	r0, r3, #0
    3a38:	46bd      	mov	sp, r7
    3a3a:	b00a      	add	sp, #40	; 0x28
    3a3c:	bd80      	pop	{r7, pc}
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	00003721 	.word	0x00003721
    3a44:	00003151 	.word	0x00003151
    3a48:	00003329 	.word	0x00003329
    3a4c:	00003315 	.word	0x00003315
    3a50:	00004691 	.word	0x00004691
    3a54:	000046d5 	.word	0x000046d5
    3a58:	00002f09 	.word	0x00002f09
    3a5c:	000034cd 	.word	0x000034cd

00003a60 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    3a60:	b590      	push	{r4, r7, lr}
    3a62:	b087      	sub	sp, #28
    3a64:	af00      	add	r7, sp, #0
    3a66:	60f8      	str	r0, [r7, #12]
    3a68:	607a      	str	r2, [r7, #4]
    3a6a:	230a      	movs	r3, #10
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	1c0a      	adds	r2, r1, #0
    3a70:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	79db      	ldrb	r3, [r3, #7]
    3a76:	2201      	movs	r2, #1
    3a78:	4053      	eors	r3, r2
    3a7a:	b2db      	uxtb	r3, r3
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d001      	beq.n	3a84 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    3a80:	231c      	movs	r3, #28
    3a82:	e07a      	b.n	3b7a <spi_transceive_wait+0x11a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    3a84:	2315      	movs	r3, #21
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	2200      	movs	r2, #0
    3a8a:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    3a8c:	68fb      	ldr	r3, [r7, #12]
    3a8e:	795b      	ldrb	r3, [r3, #5]
    3a90:	2b00      	cmp	r3, #0
    3a92:	d120      	bne.n	3ad6 <spi_transceive_wait+0x76>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3a94:	2316      	movs	r3, #22
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	2200      	movs	r2, #0
    3a9a:	801a      	strh	r2, [r3, #0]
    3a9c:	e015      	b.n	3aca <spi_transceive_wait+0x6a>
			if (spi_is_ready_to_write(module)) {
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	1c18      	adds	r0, r3, #0
    3aa2:	4b38      	ldr	r3, [pc, #224]	; (3b84 <spi_transceive_wait+0x124>)
    3aa4:	4798      	blx	r3
    3aa6:	1e03      	subs	r3, r0, #0
    3aa8:	d000      	beq.n	3aac <spi_transceive_wait+0x4c>
				break;
    3aaa:	e014      	b.n	3ad6 <spi_transceive_wait+0x76>
			} else if (j == SPI_TIMEOUT) {
    3aac:	2316      	movs	r3, #22
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	881b      	ldrh	r3, [r3, #0]
    3ab2:	4a35      	ldr	r2, [pc, #212]	; (3b88 <spi_transceive_wait+0x128>)
    3ab4:	4293      	cmp	r3, r2
    3ab6:	d101      	bne.n	3abc <spi_transceive_wait+0x5c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3ab8:	2312      	movs	r3, #18
    3aba:	e05e      	b.n	3b7a <spi_transceive_wait+0x11a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3abc:	2316      	movs	r3, #22
    3abe:	18fb      	adds	r3, r7, r3
    3ac0:	881a      	ldrh	r2, [r3, #0]
    3ac2:	2316      	movs	r3, #22
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	3201      	adds	r2, #1
    3ac8:	801a      	strh	r2, [r3, #0]
    3aca:	2316      	movs	r3, #22
    3acc:	18fb      	adds	r3, r7, r3
    3ace:	881b      	ldrh	r3, [r3, #0]
    3ad0:	4a2d      	ldr	r2, [pc, #180]	; (3b88 <spi_transceive_wait+0x128>)
    3ad2:	4293      	cmp	r3, r2
    3ad4:	d9e3      	bls.n	3a9e <spi_transceive_wait+0x3e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	68fb      	ldr	r3, [r7, #12]
    3ada:	1c18      	adds	r0, r3, #0
    3adc:	4b29      	ldr	r3, [pc, #164]	; (3b84 <spi_transceive_wait+0x124>)
    3ade:	4798      	blx	r3
    3ae0:	1c03      	adds	r3, r0, #0
    3ae2:	1c1a      	adds	r2, r3, #0
    3ae4:	2301      	movs	r3, #1
    3ae6:	4053      	eors	r3, r2
    3ae8:	b2db      	uxtb	r3, r3
    3aea:	2b00      	cmp	r3, #0
    3aec:	d1f4      	bne.n	3ad8 <spi_transceive_wait+0x78>
	}

	/* Write data */
	spi_write(module, tx_data);
    3aee:	68fa      	ldr	r2, [r7, #12]
    3af0:	230a      	movs	r3, #10
    3af2:	18fb      	adds	r3, r7, r3
    3af4:	881b      	ldrh	r3, [r3, #0]
    3af6:	1c10      	adds	r0, r2, #0
    3af8:	1c19      	adds	r1, r3, #0
    3afa:	4b24      	ldr	r3, [pc, #144]	; (3b8c <spi_transceive_wait+0x12c>)
    3afc:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    3afe:	68fb      	ldr	r3, [r7, #12]
    3b00:	795b      	ldrb	r3, [r3, #5]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d120      	bne.n	3b48 <spi_transceive_wait+0xe8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3b06:	2316      	movs	r3, #22
    3b08:	18fb      	adds	r3, r7, r3
    3b0a:	2200      	movs	r2, #0
    3b0c:	801a      	strh	r2, [r3, #0]
    3b0e:	e015      	b.n	3b3c <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    3b10:	68fb      	ldr	r3, [r7, #12]
    3b12:	1c18      	adds	r0, r3, #0
    3b14:	4b1e      	ldr	r3, [pc, #120]	; (3b90 <spi_transceive_wait+0x130>)
    3b16:	4798      	blx	r3
    3b18:	1e03      	subs	r3, r0, #0
    3b1a:	d000      	beq.n	3b1e <spi_transceive_wait+0xbe>
				break;
    3b1c:	e014      	b.n	3b48 <spi_transceive_wait+0xe8>
			} else if (j == SPI_TIMEOUT) {
    3b1e:	2316      	movs	r3, #22
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	881b      	ldrh	r3, [r3, #0]
    3b24:	4a18      	ldr	r2, [pc, #96]	; (3b88 <spi_transceive_wait+0x128>)
    3b26:	4293      	cmp	r3, r2
    3b28:	d101      	bne.n	3b2e <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3b2a:	2312      	movs	r3, #18
    3b2c:	e025      	b.n	3b7a <spi_transceive_wait+0x11a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3b2e:	2316      	movs	r3, #22
    3b30:	18fb      	adds	r3, r7, r3
    3b32:	881a      	ldrh	r2, [r3, #0]
    3b34:	2316      	movs	r3, #22
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	3201      	adds	r2, #1
    3b3a:	801a      	strh	r2, [r3, #0]
    3b3c:	2316      	movs	r3, #22
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	881b      	ldrh	r3, [r3, #0]
    3b42:	4a11      	ldr	r2, [pc, #68]	; (3b88 <spi_transceive_wait+0x128>)
    3b44:	4293      	cmp	r3, r2
    3b46:	d9e3      	bls.n	3b10 <spi_transceive_wait+0xb0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    3b48:	46c0      	nop			; (mov r8, r8)
    3b4a:	68fb      	ldr	r3, [r7, #12]
    3b4c:	1c18      	adds	r0, r3, #0
    3b4e:	4b10      	ldr	r3, [pc, #64]	; (3b90 <spi_transceive_wait+0x130>)
    3b50:	4798      	blx	r3
    3b52:	1c03      	adds	r3, r0, #0
    3b54:	1c1a      	adds	r2, r3, #0
    3b56:	2301      	movs	r3, #1
    3b58:	4053      	eors	r3, r2
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d1f4      	bne.n	3b4a <spi_transceive_wait+0xea>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    3b60:	2315      	movs	r3, #21
    3b62:	18fc      	adds	r4, r7, r3
    3b64:	68fa      	ldr	r2, [r7, #12]
    3b66:	687b      	ldr	r3, [r7, #4]
    3b68:	1c10      	adds	r0, r2, #0
    3b6a:	1c19      	adds	r1, r3, #0
    3b6c:	4b09      	ldr	r3, [pc, #36]	; (3b94 <spi_transceive_wait+0x134>)
    3b6e:	4798      	blx	r3
    3b70:	1c03      	adds	r3, r0, #0
    3b72:	7023      	strb	r3, [r4, #0]

	return retval;
    3b74:	2315      	movs	r3, #21
    3b76:	18fb      	adds	r3, r7, r3
    3b78:	781b      	ldrb	r3, [r3, #0]
}
    3b7a:	1c18      	adds	r0, r3, #0
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b007      	add	sp, #28
    3b80:	bd90      	pop	{r4, r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	000033a5 	.word	0x000033a5
    3b88:	00002710 	.word	0x00002710
    3b8c:	000033f5 	.word	0x000033f5
    3b90:	000033cd 	.word	0x000033cd
    3b94:	0000343d 	.word	0x0000343d

00003b98 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	b086      	sub	sp, #24
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	60f8      	str	r0, [r7, #12]
    3ba0:	60b9      	str	r1, [r7, #8]
    3ba2:	1dfb      	adds	r3, r7, #7
    3ba4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	795b      	ldrb	r3, [r3, #5]
    3baa:	2b01      	cmp	r3, #1
    3bac:	d001      	beq.n	3bb2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    3bae:	2315      	movs	r3, #21
    3bb0:	e05c      	b.n	3c6c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3bb2:	68fb      	ldr	r3, [r7, #12]
    3bb4:	7a1b      	ldrb	r3, [r3, #8]
    3bb6:	2201      	movs	r2, #1
    3bb8:	4053      	eors	r3, r2
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d054      	beq.n	3c6a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    3bc0:	1dfb      	adds	r3, r7, #7
    3bc2:	781b      	ldrb	r3, [r3, #0]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d04a      	beq.n	3c5e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3bc8:	68bb      	ldr	r3, [r7, #8]
    3bca:	785b      	ldrb	r3, [r3, #1]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d03f      	beq.n	3c50 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	1c18      	adds	r0, r3, #0
    3bd4:	4b27      	ldr	r3, [pc, #156]	; (3c74 <spi_select_slave+0xdc>)
    3bd6:	4798      	blx	r3
    3bd8:	1c03      	adds	r3, r0, #0
    3bda:	1c1a      	adds	r2, r3, #0
    3bdc:	2301      	movs	r3, #1
    3bde:	4053      	eors	r3, r2
    3be0:	b2db      	uxtb	r3, r3
    3be2:	2b00      	cmp	r3, #0
    3be4:	d007      	beq.n	3bf6 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3be6:	68bb      	ldr	r3, [r7, #8]
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	1c18      	adds	r0, r3, #0
    3bec:	2101      	movs	r1, #1
    3bee:	4b22      	ldr	r3, [pc, #136]	; (3c78 <spi_select_slave+0xe0>)
    3bf0:	4798      	blx	r3
					return STATUS_BUSY;
    3bf2:	2305      	movs	r3, #5
    3bf4:	e03a      	b.n	3c6c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3bf6:	68bb      	ldr	r3, [r7, #8]
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	1c18      	adds	r0, r3, #0
    3bfc:	2100      	movs	r1, #0
    3bfe:	4b1e      	ldr	r3, [pc, #120]	; (3c78 <spi_select_slave+0xe0>)
    3c00:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    3c02:	68bb      	ldr	r3, [r7, #8]
    3c04:	789b      	ldrb	r3, [r3, #2]
    3c06:	b29b      	uxth	r3, r3
    3c08:	68fa      	ldr	r2, [r7, #12]
    3c0a:	1c10      	adds	r0, r2, #0
    3c0c:	1c19      	adds	r1, r3, #0
    3c0e:	4b1b      	ldr	r3, [pc, #108]	; (3c7c <spi_select_slave+0xe4>)
    3c10:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    3c12:	68fb      	ldr	r3, [r7, #12]
    3c14:	79db      	ldrb	r3, [r3, #7]
    3c16:	2201      	movs	r2, #1
    3c18:	4053      	eors	r3, r2
    3c1a:	b2db      	uxtb	r3, r3
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d024      	beq.n	3c6a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3c20:	46c0      	nop			; (mov r8, r8)
    3c22:	68fb      	ldr	r3, [r7, #12]
    3c24:	1c18      	adds	r0, r3, #0
    3c26:	4b16      	ldr	r3, [pc, #88]	; (3c80 <spi_select_slave+0xe8>)
    3c28:	4798      	blx	r3
    3c2a:	1c03      	adds	r3, r0, #0
    3c2c:	1c1a      	adds	r2, r3, #0
    3c2e:	2301      	movs	r3, #1
    3c30:	4053      	eors	r3, r2
    3c32:	b2db      	uxtb	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d1f4      	bne.n	3c22 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    3c38:	2316      	movs	r3, #22
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	2200      	movs	r2, #0
    3c3e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    3c40:	68fa      	ldr	r2, [r7, #12]
    3c42:	2316      	movs	r3, #22
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	1c10      	adds	r0, r2, #0
    3c48:	1c19      	adds	r1, r3, #0
    3c4a:	4b0e      	ldr	r3, [pc, #56]	; (3c84 <spi_select_slave+0xec>)
    3c4c:	4798      	blx	r3
    3c4e:	e00c      	b.n	3c6a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3c50:	68bb      	ldr	r3, [r7, #8]
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	1c18      	adds	r0, r3, #0
    3c56:	2100      	movs	r1, #0
    3c58:	4b07      	ldr	r3, [pc, #28]	; (3c78 <spi_select_slave+0xe0>)
    3c5a:	4798      	blx	r3
    3c5c:	e005      	b.n	3c6a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3c5e:	68bb      	ldr	r3, [r7, #8]
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	1c18      	adds	r0, r3, #0
    3c64:	2101      	movs	r1, #1
    3c66:	4b04      	ldr	r3, [pc, #16]	; (3c78 <spi_select_slave+0xe0>)
    3c68:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    3c6a:	2300      	movs	r3, #0
}
    3c6c:	1c18      	adds	r0, r3, #0
    3c6e:	46bd      	mov	sp, r7
    3c70:	b006      	add	sp, #24
    3c72:	bd80      	pop	{r7, pc}
    3c74:	000033a5 	.word	0x000033a5
    3c78:	000032c5 	.word	0x000032c5
    3c7c:	000033f5 	.word	0x000033f5
    3c80:	000033cd 	.word	0x000033cd
    3c84:	0000343d 	.word	0x0000343d

00003c88 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b082      	sub	sp, #8
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3c90:	687b      	ldr	r3, [r7, #4]
    3c92:	2201      	movs	r2, #1
    3c94:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	2200      	movs	r2, #0
    3c9a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	2206      	movs	r2, #6
    3ca0:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	2200      	movs	r2, #0
    3ca6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	2200      	movs	r2, #0
    3cac:	725a      	strb	r2, [r3, #9]
}
    3cae:	46bd      	mov	sp, r7
    3cb0:	b002      	add	sp, #8
    3cb2:	bd80      	pop	{r7, pc}

00003cb4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b082      	sub	sp, #8
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	2203      	movs	r2, #3
    3cc0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	2200      	movs	r2, #0
    3cc6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	2201      	movs	r2, #1
    3ccc:	709a      	strb	r2, [r3, #2]
}
    3cce:	46bd      	mov	sp, r7
    3cd0:	b002      	add	sp, #8
    3cd2:	bd80      	pop	{r7, pc}

00003cd4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b082      	sub	sp, #8
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	2200      	movs	r2, #0
    3ce0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	2200      	movs	r2, #0
    3ce6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	2200      	movs	r2, #0
    3cec:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	2200      	movs	r2, #0
    3cf2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	2200      	movs	r2, #0
    3cf8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	2201      	movs	r2, #1
    3cfe:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	2207      	movs	r2, #7
    3d04:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	223f      	movs	r2, #63	; 0x3f
    3d0a:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	2201      	movs	r2, #1
    3d10:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	2201      	movs	r2, #1
    3d16:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	2206      	movs	r2, #6
    3d1c:	821a      	strh	r2, [r3, #16]
}
    3d1e:	46bd      	mov	sp, r7
    3d20:	b002      	add	sp, #8
    3d22:	bd80      	pop	{r7, pc}

00003d24 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	1c02      	adds	r2, r0, #0
    3d2c:	1dfb      	adds	r3, r7, #7
    3d2e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    3d30:	4a03      	ldr	r2, [pc, #12]	; (3d40 <system_cpu_clock_set_divider+0x1c>)
    3d32:	1dfb      	adds	r3, r7, #7
    3d34:	781b      	ldrb	r3, [r3, #0]
    3d36:	7213      	strb	r3, [r2, #8]
}
    3d38:	46bd      	mov	sp, r7
    3d3a:	b002      	add	sp, #8
    3d3c:	bd80      	pop	{r7, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	40000400 	.word	0x40000400

00003d44 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b082      	sub	sp, #8
    3d48:	af00      	add	r7, sp, #0
    3d4a:	1c02      	adds	r2, r0, #0
    3d4c:	1dfb      	adds	r3, r7, #7
    3d4e:	701a      	strb	r2, [r3, #0]
    3d50:	1dbb      	adds	r3, r7, #6
    3d52:	1c0a      	adds	r2, r1, #0
    3d54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3d56:	1dfb      	adds	r3, r7, #7
    3d58:	781b      	ldrb	r3, [r3, #0]
    3d5a:	2b01      	cmp	r3, #1
    3d5c:	d008      	beq.n	3d70 <system_apb_clock_set_divider+0x2c>
    3d5e:	2b02      	cmp	r3, #2
    3d60:	d00b      	beq.n	3d7a <system_apb_clock_set_divider+0x36>
    3d62:	2b00      	cmp	r3, #0
    3d64:	d10e      	bne.n	3d84 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    3d66:	4a0b      	ldr	r2, [pc, #44]	; (3d94 <system_apb_clock_set_divider+0x50>)
    3d68:	1dbb      	adds	r3, r7, #6
    3d6a:	781b      	ldrb	r3, [r3, #0]
    3d6c:	7253      	strb	r3, [r2, #9]
			break;
    3d6e:	e00b      	b.n	3d88 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3d70:	4a08      	ldr	r2, [pc, #32]	; (3d94 <system_apb_clock_set_divider+0x50>)
    3d72:	1dbb      	adds	r3, r7, #6
    3d74:	781b      	ldrb	r3, [r3, #0]
    3d76:	7293      	strb	r3, [r2, #10]
			break;
    3d78:	e006      	b.n	3d88 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    3d7a:	4a06      	ldr	r2, [pc, #24]	; (3d94 <system_apb_clock_set_divider+0x50>)
    3d7c:	1dbb      	adds	r3, r7, #6
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	72d3      	strb	r3, [r2, #11]
			break;
    3d82:	e001      	b.n	3d88 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3d84:	2317      	movs	r3, #23
    3d86:	e000      	b.n	3d8a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    3d88:	2300      	movs	r3, #0
}
    3d8a:	1c18      	adds	r0, r3, #0
    3d8c:	46bd      	mov	sp, r7
    3d8e:	b002      	add	sp, #8
    3d90:	bd80      	pop	{r7, pc}
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	40000400 	.word	0x40000400

00003d98 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	1c02      	adds	r2, r0, #0
    3da0:	1dfb      	adds	r3, r7, #7
    3da2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3da4:	4b08      	ldr	r3, [pc, #32]	; (3dc8 <system_flash_set_waitstates+0x30>)
    3da6:	1dfa      	adds	r2, r7, #7
    3da8:	7812      	ldrb	r2, [r2, #0]
    3daa:	210f      	movs	r1, #15
    3dac:	400a      	ands	r2, r1
    3dae:	b2d2      	uxtb	r2, r2
    3db0:	210f      	movs	r1, #15
    3db2:	400a      	ands	r2, r1
    3db4:	0052      	lsls	r2, r2, #1
    3db6:	6859      	ldr	r1, [r3, #4]
    3db8:	201e      	movs	r0, #30
    3dba:	4381      	bics	r1, r0
    3dbc:	430a      	orrs	r2, r1
    3dbe:	605a      	str	r2, [r3, #4]
}
    3dc0:	46bd      	mov	sp, r7
    3dc2:	b002      	add	sp, #8
    3dc4:	bd80      	pop	{r7, pc}
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	41004000 	.word	0x41004000

00003dcc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3dd0:	46c0      	nop			; (mov r8, r8)
    3dd2:	4b03      	ldr	r3, [pc, #12]	; (3de0 <_system_dfll_wait_for_sync+0x14>)
    3dd4:	68db      	ldr	r3, [r3, #12]
    3dd6:	2210      	movs	r2, #16
    3dd8:	4013      	ands	r3, r2
    3dda:	d0fa      	beq.n	3dd2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3ddc:	46bd      	mov	sp, r7
    3dde:	bd80      	pop	{r7, pc}
    3de0:	40000800 	.word	0x40000800

00003de4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3de4:	b580      	push	{r7, lr}
    3de6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3de8:	4b0c      	ldr	r3, [pc, #48]	; (3e1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3dea:	2202      	movs	r2, #2
    3dec:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3dee:	4b0c      	ldr	r3, [pc, #48]	; (3e20 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3df0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3df2:	4a0a      	ldr	r2, [pc, #40]	; (3e1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3df4:	4b0b      	ldr	r3, [pc, #44]	; (3e24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3df6:	689b      	ldr	r3, [r3, #8]
    3df8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3dfa:	4a08      	ldr	r2, [pc, #32]	; (3e1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3dfc:	4b09      	ldr	r3, [pc, #36]	; (3e24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3dfe:	685b      	ldr	r3, [r3, #4]
    3e00:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3e02:	4b06      	ldr	r3, [pc, #24]	; (3e1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3e04:	2200      	movs	r2, #0
    3e06:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3e08:	4b05      	ldr	r3, [pc, #20]	; (3e20 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3e0a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3e0c:	4a03      	ldr	r2, [pc, #12]	; (3e1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3e0e:	4b05      	ldr	r3, [pc, #20]	; (3e24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	b29b      	uxth	r3, r3
    3e14:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3e16:	46bd      	mov	sp, r7
    3e18:	bd80      	pop	{r7, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	40000800 	.word	0x40000800
    3e20:	00003dcd 	.word	0x00003dcd
    3e24:	20000130 	.word	0x20000130

00003e28 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b082      	sub	sp, #8
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	1c02      	adds	r2, r0, #0
    3e30:	1dfb      	adds	r3, r7, #7
    3e32:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3e34:	1dfb      	adds	r3, r7, #7
    3e36:	781b      	ldrb	r3, [r3, #0]
    3e38:	2b08      	cmp	r3, #8
    3e3a:	d842      	bhi.n	3ec2 <system_clock_source_get_hz+0x9a>
    3e3c:	009a      	lsls	r2, r3, #2
    3e3e:	4b23      	ldr	r3, [pc, #140]	; (3ecc <system_clock_source_get_hz+0xa4>)
    3e40:	18d3      	adds	r3, r2, r3
    3e42:	681b      	ldr	r3, [r3, #0]
    3e44:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3e46:	4b22      	ldr	r3, [pc, #136]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3e48:	691b      	ldr	r3, [r3, #16]
    3e4a:	e03b      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3e4c:	4b21      	ldr	r3, [pc, #132]	; (3ed4 <system_clock_source_get_hz+0xac>)
    3e4e:	6a1b      	ldr	r3, [r3, #32]
    3e50:	0a1b      	lsrs	r3, r3, #8
    3e52:	1c1a      	adds	r2, r3, #0
    3e54:	2303      	movs	r3, #3
    3e56:	4013      	ands	r3, r2
    3e58:	b2db      	uxtb	r3, r3
    3e5a:	1c1a      	adds	r2, r3, #0
    3e5c:	4b1e      	ldr	r3, [pc, #120]	; (3ed8 <system_clock_source_get_hz+0xb0>)
    3e5e:	40d3      	lsrs	r3, r2
    3e60:	e030      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3e62:	2380      	movs	r3, #128	; 0x80
    3e64:	021b      	lsls	r3, r3, #8
    3e66:	e02d      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3e68:	2380      	movs	r3, #128	; 0x80
    3e6a:	021b      	lsls	r3, r3, #8
    3e6c:	e02a      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3e6e:	4b18      	ldr	r3, [pc, #96]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3e70:	695b      	ldr	r3, [r3, #20]
    3e72:	e027      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3e74:	4b16      	ldr	r3, [pc, #88]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	2202      	movs	r2, #2
    3e7a:	4013      	ands	r3, r2
    3e7c:	d101      	bne.n	3e82 <system_clock_source_get_hz+0x5a>
			return 0;
    3e7e:	2300      	movs	r3, #0
    3e80:	e020      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3e82:	4b16      	ldr	r3, [pc, #88]	; (3edc <system_clock_source_get_hz+0xb4>)
    3e84:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3e86:	4b12      	ldr	r3, [pc, #72]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	2204      	movs	r2, #4
    3e8c:	4013      	ands	r3, r2
    3e8e:	d009      	beq.n	3ea4 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3e90:	2000      	movs	r0, #0
    3e92:	4b13      	ldr	r3, [pc, #76]	; (3ee0 <system_clock_source_get_hz+0xb8>)
    3e94:	4798      	blx	r3
    3e96:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    3e98:	4b0d      	ldr	r3, [pc, #52]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3e9a:	689b      	ldr	r3, [r3, #8]
    3e9c:	041b      	lsls	r3, r3, #16
    3e9e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3ea0:	4353      	muls	r3, r2
    3ea2:	e00f      	b.n	3ec4 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3ea4:	4b0f      	ldr	r3, [pc, #60]	; (3ee4 <system_clock_source_get_hz+0xbc>)
    3ea6:	e00d      	b.n	3ec4 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3ea8:	4a0a      	ldr	r2, [pc, #40]	; (3ed4 <system_clock_source_get_hz+0xac>)
    3eaa:	2350      	movs	r3, #80	; 0x50
    3eac:	5cd3      	ldrb	r3, [r2, r3]
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	1c1a      	adds	r2, r3, #0
    3eb2:	2304      	movs	r3, #4
    3eb4:	4013      	ands	r3, r2
    3eb6:	d101      	bne.n	3ebc <system_clock_source_get_hz+0x94>
			return 0;
    3eb8:	2300      	movs	r3, #0
    3eba:	e003      	b.n	3ec4 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    3ebc:	4b04      	ldr	r3, [pc, #16]	; (3ed0 <system_clock_source_get_hz+0xa8>)
    3ebe:	68db      	ldr	r3, [r3, #12]
    3ec0:	e000      	b.n	3ec4 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    3ec2:	2300      	movs	r3, #0
	}
}
    3ec4:	1c18      	adds	r0, r3, #0
    3ec6:	46bd      	mov	sp, r7
    3ec8:	b002      	add	sp, #8
    3eca:	bd80      	pop	{r7, pc}
    3ecc:	00008354 	.word	0x00008354
    3ed0:	20000130 	.word	0x20000130
    3ed4:	40000800 	.word	0x40000800
    3ed8:	007a1200 	.word	0x007a1200
    3edc:	00003dcd 	.word	0x00003dcd
    3ee0:	000047b5 	.word	0x000047b5
    3ee4:	02dc6c00 	.word	0x02dc6c00

00003ee8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3ef0:	4b1a      	ldr	r3, [pc, #104]	; (3f5c <system_clock_source_osc8m_set_config+0x74>)
    3ef2:	6a1b      	ldr	r3, [r3, #32]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	781b      	ldrb	r3, [r3, #0]
    3efa:	1c1a      	adds	r2, r3, #0
    3efc:	2303      	movs	r3, #3
    3efe:	4013      	ands	r3, r2
    3f00:	b2da      	uxtb	r2, r3
    3f02:	230d      	movs	r3, #13
    3f04:	18fb      	adds	r3, r7, r3
    3f06:	2103      	movs	r1, #3
    3f08:	400a      	ands	r2, r1
    3f0a:	1c10      	adds	r0, r2, #0
    3f0c:	781a      	ldrb	r2, [r3, #0]
    3f0e:	2103      	movs	r1, #3
    3f10:	438a      	bics	r2, r1
    3f12:	1c11      	adds	r1, r2, #0
    3f14:	1c02      	adds	r2, r0, #0
    3f16:	430a      	orrs	r2, r1
    3f18:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	789a      	ldrb	r2, [r3, #2]
    3f1e:	230c      	movs	r3, #12
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	01d0      	lsls	r0, r2, #7
    3f24:	781a      	ldrb	r2, [r3, #0]
    3f26:	217f      	movs	r1, #127	; 0x7f
    3f28:	400a      	ands	r2, r1
    3f2a:	1c11      	adds	r1, r2, #0
    3f2c:	1c02      	adds	r2, r0, #0
    3f2e:	430a      	orrs	r2, r1
    3f30:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	785a      	ldrb	r2, [r3, #1]
    3f36:	230c      	movs	r3, #12
    3f38:	18fb      	adds	r3, r7, r3
    3f3a:	2101      	movs	r1, #1
    3f3c:	400a      	ands	r2, r1
    3f3e:	0190      	lsls	r0, r2, #6
    3f40:	781a      	ldrb	r2, [r3, #0]
    3f42:	2140      	movs	r1, #64	; 0x40
    3f44:	438a      	bics	r2, r1
    3f46:	1c11      	adds	r1, r2, #0
    3f48:	1c02      	adds	r2, r0, #0
    3f4a:	430a      	orrs	r2, r1
    3f4c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    3f4e:	4b03      	ldr	r3, [pc, #12]	; (3f5c <system_clock_source_osc8m_set_config+0x74>)
    3f50:	68fa      	ldr	r2, [r7, #12]
    3f52:	621a      	str	r2, [r3, #32]
}
    3f54:	46bd      	mov	sp, r7
    3f56:	b004      	add	sp, #16
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	40000800 	.word	0x40000800

00003f60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	b082      	sub	sp, #8
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	7a1b      	ldrb	r3, [r3, #8]
    3f6c:	029b      	lsls	r3, r3, #10
    3f6e:	041b      	lsls	r3, r3, #16
    3f70:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	895b      	ldrh	r3, [r3, #10]
    3f76:	059b      	lsls	r3, r3, #22
    3f78:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3f7a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    3f7c:	4b29      	ldr	r3, [pc, #164]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    3f7e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3f88:	4313      	orrs	r3, r2
    3f8a:	b2db      	uxtb	r3, r3
    3f8c:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    3f92:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    3f94:	687a      	ldr	r2, [r7, #4]
    3f96:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3f98:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	785b      	ldrb	r3, [r3, #1]
    3f9e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    3fa0:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    3fa2:	4b20      	ldr	r3, [pc, #128]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    3fa4:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	2b04      	cmp	r3, #4
    3fac:	d116      	bne.n	3fdc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	7b1b      	ldrb	r3, [r3, #12]
    3fb2:	069b      	lsls	r3, r3, #26
    3fb4:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	89db      	ldrh	r3, [r3, #14]
    3fba:	041b      	lsls	r3, r3, #16
    3fbc:	1c19      	adds	r1, r3, #0
    3fbe:	4b1a      	ldr	r3, [pc, #104]	; (4028 <system_clock_source_dfll_set_config+0xc8>)
    3fc0:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3fc2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3fc4:	687a      	ldr	r2, [r7, #4]
    3fc6:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3fc8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    3fca:	4b16      	ldr	r3, [pc, #88]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    3fcc:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    3fce:	4b15      	ldr	r3, [pc, #84]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	687a      	ldr	r2, [r7, #4]
    3fd4:	7812      	ldrb	r2, [r2, #0]
    3fd6:	431a      	orrs	r2, r3
    3fd8:	4b12      	ldr	r3, [pc, #72]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    3fda:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	781b      	ldrb	r3, [r3, #0]
    3fe0:	2b20      	cmp	r3, #32
    3fe2:	d11c      	bne.n	401e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	7b1b      	ldrb	r3, [r3, #12]
    3fe8:	069b      	lsls	r3, r3, #26
    3fea:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	89db      	ldrh	r3, [r3, #14]
    3ff0:	041b      	lsls	r3, r3, #16
    3ff2:	1c19      	adds	r1, r3, #0
    3ff4:	4b0c      	ldr	r3, [pc, #48]	; (4028 <system_clock_source_dfll_set_config+0xc8>)
    3ff6:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3ff8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3ffa:	687a      	ldr	r2, [r7, #4]
    3ffc:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3ffe:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4000:	4b08      	ldr	r3, [pc, #32]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    4002:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4004:	4b07      	ldr	r3, [pc, #28]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    4006:	681b      	ldr	r3, [r3, #0]
    4008:	687a      	ldr	r2, [r7, #4]
    400a:	7812      	ldrb	r2, [r2, #0]
    400c:	2104      	movs	r1, #4
    400e:	430a      	orrs	r2, r1
    4010:	b2d2      	uxtb	r2, r2
    4012:	4313      	orrs	r3, r2
    4014:	2280      	movs	r2, #128	; 0x80
    4016:	00d2      	lsls	r2, r2, #3
    4018:	431a      	orrs	r2, r3
    401a:	4b02      	ldr	r3, [pc, #8]	; (4024 <system_clock_source_dfll_set_config+0xc4>)
    401c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    401e:	46bd      	mov	sp, r7
    4020:	b002      	add	sp, #8
    4022:	bd80      	pop	{r7, pc}
    4024:	20000130 	.word	0x20000130
    4028:	03ff0000 	.word	0x03ff0000

0000402c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	1c02      	adds	r2, r0, #0
    4034:	1dfb      	adds	r3, r7, #7
    4036:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4038:	1dfb      	adds	r3, r7, #7
    403a:	781b      	ldrb	r3, [r3, #0]
    403c:	2b08      	cmp	r3, #8
    403e:	d83b      	bhi.n	40b8 <system_clock_source_enable+0x8c>
    4040:	009a      	lsls	r2, r3, #2
    4042:	4b21      	ldr	r3, [pc, #132]	; (40c8 <system_clock_source_enable+0x9c>)
    4044:	18d3      	adds	r3, r2, r3
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    404a:	4b20      	ldr	r3, [pc, #128]	; (40cc <system_clock_source_enable+0xa0>)
    404c:	4a1f      	ldr	r2, [pc, #124]	; (40cc <system_clock_source_enable+0xa0>)
    404e:	6a12      	ldr	r2, [r2, #32]
    4050:	2102      	movs	r1, #2
    4052:	430a      	orrs	r2, r1
    4054:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4056:	2300      	movs	r3, #0
    4058:	e031      	b.n	40be <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    405a:	4b1c      	ldr	r3, [pc, #112]	; (40cc <system_clock_source_enable+0xa0>)
    405c:	4a1b      	ldr	r2, [pc, #108]	; (40cc <system_clock_source_enable+0xa0>)
    405e:	6992      	ldr	r2, [r2, #24]
    4060:	2102      	movs	r1, #2
    4062:	430a      	orrs	r2, r1
    4064:	619a      	str	r2, [r3, #24]
		break;
    4066:	e029      	b.n	40bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4068:	4a18      	ldr	r2, [pc, #96]	; (40cc <system_clock_source_enable+0xa0>)
    406a:	4b18      	ldr	r3, [pc, #96]	; (40cc <system_clock_source_enable+0xa0>)
    406c:	8a1b      	ldrh	r3, [r3, #16]
    406e:	b29b      	uxth	r3, r3
    4070:	2102      	movs	r1, #2
    4072:	430b      	orrs	r3, r1
    4074:	b29b      	uxth	r3, r3
    4076:	8213      	strh	r3, [r2, #16]
		break;
    4078:	e020      	b.n	40bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    407a:	4a14      	ldr	r2, [pc, #80]	; (40cc <system_clock_source_enable+0xa0>)
    407c:	4b13      	ldr	r3, [pc, #76]	; (40cc <system_clock_source_enable+0xa0>)
    407e:	8a9b      	ldrh	r3, [r3, #20]
    4080:	b29b      	uxth	r3, r3
    4082:	2102      	movs	r1, #2
    4084:	430b      	orrs	r3, r1
    4086:	b29b      	uxth	r3, r3
    4088:	8293      	strh	r3, [r2, #20]
		break;
    408a:	e017      	b.n	40bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    408c:	4b10      	ldr	r3, [pc, #64]	; (40d0 <system_clock_source_enable+0xa4>)
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	2202      	movs	r2, #2
    4092:	431a      	orrs	r2, r3
    4094:	4b0e      	ldr	r3, [pc, #56]	; (40d0 <system_clock_source_enable+0xa4>)
    4096:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4098:	4b0e      	ldr	r3, [pc, #56]	; (40d4 <system_clock_source_enable+0xa8>)
    409a:	4798      	blx	r3
		break;
    409c:	e00e      	b.n	40bc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    409e:	4a0b      	ldr	r2, [pc, #44]	; (40cc <system_clock_source_enable+0xa0>)
    40a0:	490a      	ldr	r1, [pc, #40]	; (40cc <system_clock_source_enable+0xa0>)
    40a2:	2344      	movs	r3, #68	; 0x44
    40a4:	5ccb      	ldrb	r3, [r1, r3]
    40a6:	b2db      	uxtb	r3, r3
    40a8:	2102      	movs	r1, #2
    40aa:	430b      	orrs	r3, r1
    40ac:	b2d9      	uxtb	r1, r3
    40ae:	2344      	movs	r3, #68	; 0x44
    40b0:	54d1      	strb	r1, [r2, r3]
		break;
    40b2:	e003      	b.n	40bc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    40b4:	2300      	movs	r3, #0
    40b6:	e002      	b.n	40be <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40b8:	2317      	movs	r3, #23
    40ba:	e000      	b.n	40be <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    40bc:	2300      	movs	r3, #0
}
    40be:	1c18      	adds	r0, r3, #0
    40c0:	46bd      	mov	sp, r7
    40c2:	b002      	add	sp, #8
    40c4:	bd80      	pop	{r7, pc}
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	00008378 	.word	0x00008378
    40cc:	40000800 	.word	0x40000800
    40d0:	20000130 	.word	0x20000130
    40d4:	00003de5 	.word	0x00003de5

000040d8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    40d8:	b580      	push	{r7, lr}
    40da:	b084      	sub	sp, #16
    40dc:	af00      	add	r7, sp, #0
    40de:	1c02      	adds	r2, r0, #0
    40e0:	1dfb      	adds	r3, r7, #7
    40e2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    40e4:	2300      	movs	r3, #0
    40e6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    40e8:	1dfb      	adds	r3, r7, #7
    40ea:	781b      	ldrb	r3, [r3, #0]
    40ec:	2b08      	cmp	r3, #8
    40ee:	d821      	bhi.n	4134 <system_clock_source_is_ready+0x5c>
    40f0:	009a      	lsls	r2, r3, #2
    40f2:	4b18      	ldr	r3, [pc, #96]	; (4154 <system_clock_source_is_ready+0x7c>)
    40f4:	18d3      	adds	r3, r2, r3
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    40fa:	2308      	movs	r3, #8
    40fc:	60fb      	str	r3, [r7, #12]
		break;
    40fe:	e01b      	b.n	4138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4100:	2304      	movs	r3, #4
    4102:	60fb      	str	r3, [r7, #12]
		break;
    4104:	e018      	b.n	4138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4106:	2301      	movs	r3, #1
    4108:	60fb      	str	r3, [r7, #12]
		break;
    410a:	e015      	b.n	4138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    410c:	2302      	movs	r3, #2
    410e:	60fb      	str	r3, [r7, #12]
		break;
    4110:	e012      	b.n	4138 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    4112:	2310      	movs	r3, #16
    4114:	60fb      	str	r3, [r7, #12]
		}
		break;
    4116:	e00f      	b.n	4138 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4118:	4a0f      	ldr	r2, [pc, #60]	; (4158 <system_clock_source_is_ready+0x80>)
    411a:	2350      	movs	r3, #80	; 0x50
    411c:	5cd3      	ldrb	r3, [r2, r3]
    411e:	b2db      	uxtb	r3, r3
    4120:	1c1a      	adds	r2, r3, #0
    4122:	2303      	movs	r3, #3
    4124:	4013      	ands	r3, r2
    4126:	3b03      	subs	r3, #3
    4128:	425a      	negs	r2, r3
    412a:	4153      	adcs	r3, r2
    412c:	b2db      	uxtb	r3, r3
    412e:	e00c      	b.n	414a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4130:	2301      	movs	r3, #1
    4132:	e00a      	b.n	414a <system_clock_source_is_ready+0x72>

	default:
		return false;
    4134:	2300      	movs	r3, #0
    4136:	e008      	b.n	414a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4138:	4b07      	ldr	r3, [pc, #28]	; (4158 <system_clock_source_is_ready+0x80>)
    413a:	68db      	ldr	r3, [r3, #12]
    413c:	68fa      	ldr	r2, [r7, #12]
    413e:	401a      	ands	r2, r3
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	1ad3      	subs	r3, r2, r3
    4144:	425a      	negs	r2, r3
    4146:	4153      	adcs	r3, r2
    4148:	b2db      	uxtb	r3, r3
}
    414a:	1c18      	adds	r0, r3, #0
    414c:	46bd      	mov	sp, r7
    414e:	b004      	add	sp, #16
    4150:	bd80      	pop	{r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	0000839c 	.word	0x0000839c
    4158:	40000800 	.word	0x40000800

0000415c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    415c:	b580      	push	{r7, lr}
    415e:	b082      	sub	sp, #8
    4160:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4162:	1c3b      	adds	r3, r7, #0
    4164:	2201      	movs	r2, #1
    4166:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4168:	2300      	movs	r3, #0
    416a:	607b      	str	r3, [r7, #4]
    416c:	e009      	b.n	4182 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	b2da      	uxtb	r2, r3
    4172:	1c3b      	adds	r3, r7, #0
    4174:	1c10      	adds	r0, r2, #0
    4176:	1c19      	adds	r1, r3, #0
    4178:	4b05      	ldr	r3, [pc, #20]	; (4190 <_switch_peripheral_gclk+0x34>)
    417a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	3301      	adds	r3, #1
    4180:	607b      	str	r3, [r7, #4]
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	2b24      	cmp	r3, #36	; 0x24
    4186:	d9f2      	bls.n	416e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4188:	46bd      	mov	sp, r7
    418a:	b002      	add	sp, #8
    418c:	bd80      	pop	{r7, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	00004691 	.word	0x00004691

00004194 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4194:	b580      	push	{r7, lr}
    4196:	b0a6      	sub	sp, #152	; 0x98
    4198:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    419a:	4b5f      	ldr	r3, [pc, #380]	; (4318 <system_clock_init+0x184>)
    419c:	22c2      	movs	r2, #194	; 0xc2
    419e:	00d2      	lsls	r2, r2, #3
    41a0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    41a2:	2002      	movs	r0, #2
    41a4:	4b5d      	ldr	r3, [pc, #372]	; (431c <system_clock_init+0x188>)
    41a6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    41a8:	4b5d      	ldr	r3, [pc, #372]	; (4320 <system_clock_init+0x18c>)
    41aa:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    41ac:	2380      	movs	r3, #128	; 0x80
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	1c18      	adds	r0, r3, #0
    41b2:	4b5c      	ldr	r3, [pc, #368]	; (4324 <system_clock_init+0x190>)
    41b4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    41b6:	2380      	movs	r3, #128	; 0x80
    41b8:	18fb      	adds	r3, r7, r3
    41ba:	2220      	movs	r2, #32
    41bc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    41be:	2380      	movs	r3, #128	; 0x80
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	2200      	movs	r2, #0
    41c4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    41c6:	4b58      	ldr	r3, [pc, #352]	; (4328 <system_clock_init+0x194>)
    41c8:	681b      	ldr	r3, [r3, #0]
    41ca:	0e9b      	lsrs	r3, r3, #26
    41cc:	2294      	movs	r2, #148	; 0x94
    41ce:	18ba      	adds	r2, r7, r2
    41d0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    41d2:	2394      	movs	r3, #148	; 0x94
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	2b3f      	cmp	r3, #63	; 0x3f
    41da:	d103      	bne.n	41e4 <system_clock_init+0x50>
		coarse = 0x1f;
    41dc:	231f      	movs	r3, #31
    41de:	2294      	movs	r2, #148	; 0x94
    41e0:	18ba      	adds	r2, r7, r2
    41e2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    41e4:	2394      	movs	r3, #148	; 0x94
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	b2da      	uxtb	r2, r3
    41ec:	2380      	movs	r3, #128	; 0x80
    41ee:	18fb      	adds	r3, r7, r3
    41f0:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    41f2:	2380      	movs	r3, #128	; 0x80
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	2200      	movs	r2, #0
    41f8:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    41fa:	2380      	movs	r3, #128	; 0x80
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	2200      	movs	r2, #0
    4200:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4202:	2380      	movs	r3, #128	; 0x80
    4204:	18fb      	adds	r3, r7, r3
    4206:	2200      	movs	r2, #0
    4208:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    420a:	2380      	movs	r3, #128	; 0x80
    420c:	18fb      	adds	r3, r7, r3
    420e:	2200      	movs	r2, #0
    4210:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4212:	2380      	movs	r3, #128	; 0x80
    4214:	18fb      	adds	r3, r7, r3
    4216:	2207      	movs	r2, #7
    4218:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    421a:	2380      	movs	r3, #128	; 0x80
    421c:	18fb      	adds	r3, r7, r3
    421e:	223f      	movs	r2, #63	; 0x3f
    4220:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    4222:	2380      	movs	r3, #128	; 0x80
    4224:	18fb      	adds	r3, r7, r3
    4226:	220a      	movs	r2, #10
    4228:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    422a:	2380      	movs	r3, #128	; 0x80
    422c:	18fb      	adds	r3, r7, r3
    422e:	4a3f      	ldr	r2, [pc, #252]	; (432c <system_clock_init+0x198>)
    4230:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4232:	2380      	movs	r3, #128	; 0x80
    4234:	18fb      	adds	r3, r7, r3
    4236:	2200      	movs	r2, #0
    4238:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    423a:	2380      	movs	r3, #128	; 0x80
    423c:	18fb      	adds	r3, r7, r3
    423e:	2200      	movs	r2, #0
    4240:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4242:	2380      	movs	r3, #128	; 0x80
    4244:	18fb      	adds	r3, r7, r3
    4246:	2200      	movs	r2, #0
    4248:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    424a:	2380      	movs	r3, #128	; 0x80
    424c:	18fb      	adds	r3, r7, r3
    424e:	2280      	movs	r2, #128	; 0x80
    4250:	0052      	lsls	r2, r2, #1
    4252:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    4254:	2380      	movs	r3, #128	; 0x80
    4256:	18fb      	adds	r3, r7, r3
    4258:	4a35      	ldr	r2, [pc, #212]	; (4330 <system_clock_init+0x19c>)
    425a:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	18fb      	adds	r3, r7, r3
    4260:	1c18      	adds	r0, r3, #0
    4262:	4b34      	ldr	r3, [pc, #208]	; (4334 <system_clock_init+0x1a0>)
    4264:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4266:	237c      	movs	r3, #124	; 0x7c
    4268:	18fb      	adds	r3, r7, r3
    426a:	1c18      	adds	r0, r3, #0
    426c:	4b32      	ldr	r3, [pc, #200]	; (4338 <system_clock_init+0x1a4>)
    426e:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4270:	237c      	movs	r3, #124	; 0x7c
    4272:	18fb      	adds	r3, r7, r3
    4274:	2200      	movs	r2, #0
    4276:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4278:	237c      	movs	r3, #124	; 0x7c
    427a:	18fb      	adds	r3, r7, r3
    427c:	2201      	movs	r2, #1
    427e:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4280:	237c      	movs	r3, #124	; 0x7c
    4282:	18fb      	adds	r3, r7, r3
    4284:	2200      	movs	r2, #0
    4286:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4288:	237c      	movs	r3, #124	; 0x7c
    428a:	18fb      	adds	r3, r7, r3
    428c:	1c18      	adds	r0, r3, #0
    428e:	4b2b      	ldr	r3, [pc, #172]	; (433c <system_clock_init+0x1a8>)
    4290:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4292:	2006      	movs	r0, #6
    4294:	4b2a      	ldr	r3, [pc, #168]	; (4340 <system_clock_init+0x1ac>)
    4296:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4298:	4b2a      	ldr	r3, [pc, #168]	; (4344 <system_clock_init+0x1b0>)
    429a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    429c:	2007      	movs	r0, #7
    429e:	4b28      	ldr	r3, [pc, #160]	; (4340 <system_clock_init+0x1ac>)
    42a0:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	2007      	movs	r0, #7
    42a6:	4b28      	ldr	r3, [pc, #160]	; (4348 <system_clock_init+0x1b4>)
    42a8:	4798      	blx	r3
    42aa:	1c03      	adds	r3, r0, #0
    42ac:	1c1a      	adds	r2, r3, #0
    42ae:	2301      	movs	r3, #1
    42b0:	4053      	eors	r3, r2
    42b2:	b2db      	uxtb	r3, r3
    42b4:	2b00      	cmp	r3, #0
    42b6:	d1f5      	bne.n	42a4 <system_clock_init+0x110>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    42b8:	4b17      	ldr	r3, [pc, #92]	; (4318 <system_clock_init+0x184>)
    42ba:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    42bc:	2180      	movs	r1, #128	; 0x80
    42be:	430a      	orrs	r2, r1
    42c0:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    42c2:	2000      	movs	r0, #0
    42c4:	4b21      	ldr	r3, [pc, #132]	; (434c <system_clock_init+0x1b8>)
    42c6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    42c8:	2000      	movs	r0, #0
    42ca:	2100      	movs	r1, #0
    42cc:	4b20      	ldr	r3, [pc, #128]	; (4350 <system_clock_init+0x1bc>)
    42ce:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    42d0:	2001      	movs	r0, #1
    42d2:	2100      	movs	r1, #0
    42d4:	4b1e      	ldr	r3, [pc, #120]	; (4350 <system_clock_init+0x1bc>)
    42d6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    42d8:	2002      	movs	r0, #2
    42da:	2100      	movs	r1, #0
    42dc:	4b1c      	ldr	r3, [pc, #112]	; (4350 <system_clock_init+0x1bc>)
    42de:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    42e0:	1c3b      	adds	r3, r7, #0
    42e2:	1c18      	adds	r0, r3, #0
    42e4:	4b1b      	ldr	r3, [pc, #108]	; (4354 <system_clock_init+0x1c0>)
    42e6:	4798      	blx	r3
    42e8:	1c3b      	adds	r3, r7, #0
    42ea:	2207      	movs	r2, #7
    42ec:	701a      	strb	r2, [r3, #0]
    42ee:	1c3b      	adds	r3, r7, #0
    42f0:	2201      	movs	r2, #1
    42f2:	605a      	str	r2, [r3, #4]
    42f4:	1c3b      	adds	r3, r7, #0
    42f6:	2201      	movs	r2, #1
    42f8:	721a      	strb	r2, [r3, #8]
    42fa:	1c3b      	adds	r3, r7, #0
    42fc:	2200      	movs	r2, #0
    42fe:	725a      	strb	r2, [r3, #9]
    4300:	1c3b      	adds	r3, r7, #0
    4302:	2000      	movs	r0, #0
    4304:	1c19      	adds	r1, r3, #0
    4306:	4b14      	ldr	r3, [pc, #80]	; (4358 <system_clock_init+0x1c4>)
    4308:	4798      	blx	r3
    430a:	2000      	movs	r0, #0
    430c:	4b13      	ldr	r3, [pc, #76]	; (435c <system_clock_init+0x1c8>)
    430e:	4798      	blx	r3
#endif
}
    4310:	46bd      	mov	sp, r7
    4312:	b026      	add	sp, #152	; 0x98
    4314:	bd80      	pop	{r7, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	40000800 	.word	0x40000800
    431c:	00003d99 	.word	0x00003d99
    4320:	0000415d 	.word	0x0000415d
    4324:	00003cd5 	.word	0x00003cd5
    4328:	00806024 	.word	0x00806024
    432c:	000001ff 	.word	0x000001ff
    4330:	ffffbb80 	.word	0xffffbb80
    4334:	00003f61 	.word	0x00003f61
    4338:	00003cb5 	.word	0x00003cb5
    433c:	00003ee9 	.word	0x00003ee9
    4340:	0000402d 	.word	0x0000402d
    4344:	00004401 	.word	0x00004401
    4348:	000040d9 	.word	0x000040d9
    434c:	00003d25 	.word	0x00003d25
    4350:	00003d45 	.word	0x00003d45
    4354:	00003c89 	.word	0x00003c89
    4358:	00004431 	.word	0x00004431
    435c:	00004551 	.word	0x00004551

00004360 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4360:	b580      	push	{r7, lr}
    4362:	b082      	sub	sp, #8
    4364:	af00      	add	r7, sp, #0
    4366:	1c02      	adds	r2, r0, #0
    4368:	6039      	str	r1, [r7, #0]
    436a:	1dfb      	adds	r3, r7, #7
    436c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    436e:	1dfb      	adds	r3, r7, #7
    4370:	781b      	ldrb	r3, [r3, #0]
    4372:	2b01      	cmp	r3, #1
    4374:	d00a      	beq.n	438c <system_apb_clock_set_mask+0x2c>
    4376:	2b02      	cmp	r3, #2
    4378:	d00f      	beq.n	439a <system_apb_clock_set_mask+0x3a>
    437a:	2b00      	cmp	r3, #0
    437c:	d114      	bne.n	43a8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    437e:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <system_apb_clock_set_mask+0x58>)
    4380:	4a0d      	ldr	r2, [pc, #52]	; (43b8 <system_apb_clock_set_mask+0x58>)
    4382:	6991      	ldr	r1, [r2, #24]
    4384:	683a      	ldr	r2, [r7, #0]
    4386:	430a      	orrs	r2, r1
    4388:	619a      	str	r2, [r3, #24]
			break;
    438a:	e00f      	b.n	43ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    438c:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <system_apb_clock_set_mask+0x58>)
    438e:	4a0a      	ldr	r2, [pc, #40]	; (43b8 <system_apb_clock_set_mask+0x58>)
    4390:	69d1      	ldr	r1, [r2, #28]
    4392:	683a      	ldr	r2, [r7, #0]
    4394:	430a      	orrs	r2, r1
    4396:	61da      	str	r2, [r3, #28]
			break;
    4398:	e008      	b.n	43ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    439a:	4b07      	ldr	r3, [pc, #28]	; (43b8 <system_apb_clock_set_mask+0x58>)
    439c:	4a06      	ldr	r2, [pc, #24]	; (43b8 <system_apb_clock_set_mask+0x58>)
    439e:	6a11      	ldr	r1, [r2, #32]
    43a0:	683a      	ldr	r2, [r7, #0]
    43a2:	430a      	orrs	r2, r1
    43a4:	621a      	str	r2, [r3, #32]
			break;
    43a6:	e001      	b.n	43ac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    43a8:	2317      	movs	r3, #23
    43aa:	e000      	b.n	43ae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    43ac:	2300      	movs	r3, #0
}
    43ae:	1c18      	adds	r0, r3, #0
    43b0:	46bd      	mov	sp, r7
    43b2:	b002      	add	sp, #8
    43b4:	bd80      	pop	{r7, pc}
    43b6:	46c0      	nop			; (mov r8, r8)
    43b8:	40000400 	.word	0x40000400

000043bc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    43bc:	b580      	push	{r7, lr}
    43be:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    43c0:	4b01      	ldr	r3, [pc, #4]	; (43c8 <system_interrupt_enter_critical_section+0xc>)
    43c2:	4798      	blx	r3
}
    43c4:	46bd      	mov	sp, r7
    43c6:	bd80      	pop	{r7, pc}
    43c8:	00002631 	.word	0x00002631

000043cc <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    43d0:	4b01      	ldr	r3, [pc, #4]	; (43d8 <system_interrupt_leave_critical_section+0xc>)
    43d2:	4798      	blx	r3
}
    43d4:	46bd      	mov	sp, r7
    43d6:	bd80      	pop	{r7, pc}
    43d8:	00002681 	.word	0x00002681

000043dc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    43dc:	b580      	push	{r7, lr}
    43de:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    43e0:	4b06      	ldr	r3, [pc, #24]	; (43fc <system_gclk_is_syncing+0x20>)
    43e2:	785b      	ldrb	r3, [r3, #1]
    43e4:	b2db      	uxtb	r3, r3
    43e6:	b2db      	uxtb	r3, r3
    43e8:	b25b      	sxtb	r3, r3
    43ea:	2b00      	cmp	r3, #0
    43ec:	da01      	bge.n	43f2 <system_gclk_is_syncing+0x16>
		return true;
    43ee:	2301      	movs	r3, #1
    43f0:	e000      	b.n	43f4 <system_gclk_is_syncing+0x18>
	}

	return false;
    43f2:	2300      	movs	r3, #0
}
    43f4:	1c18      	adds	r0, r3, #0
    43f6:	46bd      	mov	sp, r7
    43f8:	bd80      	pop	{r7, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	40000c00 	.word	0x40000c00

00004400 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4400:	b580      	push	{r7, lr}
    4402:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4404:	2000      	movs	r0, #0
    4406:	2108      	movs	r1, #8
    4408:	4b07      	ldr	r3, [pc, #28]	; (4428 <system_gclk_init+0x28>)
    440a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    440c:	4b07      	ldr	r3, [pc, #28]	; (442c <system_gclk_init+0x2c>)
    440e:	2201      	movs	r2, #1
    4410:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	4b05      	ldr	r3, [pc, #20]	; (442c <system_gclk_init+0x2c>)
    4416:	781b      	ldrb	r3, [r3, #0]
    4418:	b2db      	uxtb	r3, r3
    441a:	1c1a      	adds	r2, r3, #0
    441c:	2301      	movs	r3, #1
    441e:	4013      	ands	r3, r2
    4420:	d1f8      	bne.n	4414 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4422:	46bd      	mov	sp, r7
    4424:	bd80      	pop	{r7, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	00004361 	.word	0x00004361
    442c:	40000c00 	.word	0x40000c00

00004430 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4430:	b580      	push	{r7, lr}
    4432:	b086      	sub	sp, #24
    4434:	af00      	add	r7, sp, #0
    4436:	1c02      	adds	r2, r0, #0
    4438:	6039      	str	r1, [r7, #0]
    443a:	1dfb      	adds	r3, r7, #7
    443c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    443e:	1dfb      	adds	r3, r7, #7
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4444:	1dfb      	adds	r3, r7, #7
    4446:	781b      	ldrb	r3, [r3, #0]
    4448:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    444a:	683b      	ldr	r3, [r7, #0]
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	021b      	lsls	r3, r3, #8
    4450:	1c1a      	adds	r2, r3, #0
    4452:	697b      	ldr	r3, [r7, #20]
    4454:	4313      	orrs	r3, r2
    4456:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4458:	683b      	ldr	r3, [r7, #0]
    445a:	785b      	ldrb	r3, [r3, #1]
    445c:	2b00      	cmp	r3, #0
    445e:	d004      	beq.n	446a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4460:	697b      	ldr	r3, [r7, #20]
    4462:	2280      	movs	r2, #128	; 0x80
    4464:	02d2      	lsls	r2, r2, #11
    4466:	4313      	orrs	r3, r2
    4468:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    446a:	683b      	ldr	r3, [r7, #0]
    446c:	7a5b      	ldrb	r3, [r3, #9]
    446e:	2b00      	cmp	r3, #0
    4470:	d004      	beq.n	447c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4472:	697b      	ldr	r3, [r7, #20]
    4474:	2280      	movs	r2, #128	; 0x80
    4476:	0312      	lsls	r2, r2, #12
    4478:	4313      	orrs	r3, r2
    447a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    447c:	683b      	ldr	r3, [r7, #0]
    447e:	685b      	ldr	r3, [r3, #4]
    4480:	2b01      	cmp	r3, #1
    4482:	d92c      	bls.n	44de <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	685a      	ldr	r2, [r3, #4]
    4488:	683b      	ldr	r3, [r7, #0]
    448a:	685b      	ldr	r3, [r3, #4]
    448c:	3b01      	subs	r3, #1
    448e:	4013      	ands	r3, r2
    4490:	d11a      	bne.n	44c8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4492:	2300      	movs	r3, #0
    4494:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4496:	2302      	movs	r3, #2
    4498:	60bb      	str	r3, [r7, #8]
    449a:	e005      	b.n	44a8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	3301      	adds	r3, #1
    44a0:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    44a2:	68bb      	ldr	r3, [r7, #8]
    44a4:	005b      	lsls	r3, r3, #1
    44a6:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	685a      	ldr	r2, [r3, #4]
    44ac:	68bb      	ldr	r3, [r7, #8]
    44ae:	429a      	cmp	r2, r3
    44b0:	d8f4      	bhi.n	449c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	021b      	lsls	r3, r3, #8
    44b6:	693a      	ldr	r2, [r7, #16]
    44b8:	4313      	orrs	r3, r2
    44ba:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    44bc:	697b      	ldr	r3, [r7, #20]
    44be:	2280      	movs	r2, #128	; 0x80
    44c0:	0352      	lsls	r2, r2, #13
    44c2:	4313      	orrs	r3, r2
    44c4:	617b      	str	r3, [r7, #20]
    44c6:	e00a      	b.n	44de <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    44c8:	683b      	ldr	r3, [r7, #0]
    44ca:	685b      	ldr	r3, [r3, #4]
    44cc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    44ce:	693a      	ldr	r2, [r7, #16]
    44d0:	4313      	orrs	r3, r2
    44d2:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    44d4:	697b      	ldr	r3, [r7, #20]
    44d6:	2280      	movs	r2, #128	; 0x80
    44d8:	0292      	lsls	r2, r2, #10
    44da:	4313      	orrs	r3, r2
    44dc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    44de:	683b      	ldr	r3, [r7, #0]
    44e0:	7a1b      	ldrb	r3, [r3, #8]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d004      	beq.n	44f0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    44e6:	697b      	ldr	r3, [r7, #20]
    44e8:	2280      	movs	r2, #128	; 0x80
    44ea:	0392      	lsls	r2, r2, #14
    44ec:	4313      	orrs	r3, r2
    44ee:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    44f0:	46c0      	nop			; (mov r8, r8)
    44f2:	4b12      	ldr	r3, [pc, #72]	; (453c <system_gclk_gen_set_config+0x10c>)
    44f4:	4798      	blx	r3
    44f6:	1e03      	subs	r3, r0, #0
    44f8:	d1fb      	bne.n	44f2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    44fa:	4b11      	ldr	r3, [pc, #68]	; (4540 <system_gclk_gen_set_config+0x110>)
    44fc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    44fe:	4a11      	ldr	r2, [pc, #68]	; (4544 <system_gclk_gen_set_config+0x114>)
    4500:	1dfb      	adds	r3, r7, #7
    4502:	781b      	ldrb	r3, [r3, #0]
    4504:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4506:	46c0      	nop			; (mov r8, r8)
    4508:	4b0c      	ldr	r3, [pc, #48]	; (453c <system_gclk_gen_set_config+0x10c>)
    450a:	4798      	blx	r3
    450c:	1e03      	subs	r3, r0, #0
    450e:	d1fb      	bne.n	4508 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4510:	4b0d      	ldr	r3, [pc, #52]	; (4548 <system_gclk_gen_set_config+0x118>)
    4512:	693a      	ldr	r2, [r7, #16]
    4514:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	4b08      	ldr	r3, [pc, #32]	; (453c <system_gclk_gen_set_config+0x10c>)
    451a:	4798      	blx	r3
    451c:	1e03      	subs	r3, r0, #0
    451e:	d1fb      	bne.n	4518 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4520:	4b09      	ldr	r3, [pc, #36]	; (4548 <system_gclk_gen_set_config+0x118>)
    4522:	4a09      	ldr	r2, [pc, #36]	; (4548 <system_gclk_gen_set_config+0x118>)
    4524:	6851      	ldr	r1, [r2, #4]
    4526:	2280      	movs	r2, #128	; 0x80
    4528:	0252      	lsls	r2, r2, #9
    452a:	4011      	ands	r1, r2
    452c:	697a      	ldr	r2, [r7, #20]
    452e:	430a      	orrs	r2, r1
    4530:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4532:	4b06      	ldr	r3, [pc, #24]	; (454c <system_gclk_gen_set_config+0x11c>)
    4534:	4798      	blx	r3
}
    4536:	46bd      	mov	sp, r7
    4538:	b006      	add	sp, #24
    453a:	bd80      	pop	{r7, pc}
    453c:	000043dd 	.word	0x000043dd
    4540:	000043bd 	.word	0x000043bd
    4544:	40000c08 	.word	0x40000c08
    4548:	40000c00 	.word	0x40000c00
    454c:	000043cd 	.word	0x000043cd

00004550 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4550:	b580      	push	{r7, lr}
    4552:	b082      	sub	sp, #8
    4554:	af00      	add	r7, sp, #0
    4556:	1c02      	adds	r2, r0, #0
    4558:	1dfb      	adds	r3, r7, #7
    455a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    455c:	46c0      	nop			; (mov r8, r8)
    455e:	4b0d      	ldr	r3, [pc, #52]	; (4594 <system_gclk_gen_enable+0x44>)
    4560:	4798      	blx	r3
    4562:	1e03      	subs	r3, r0, #0
    4564:	d1fb      	bne.n	455e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4566:	4b0c      	ldr	r3, [pc, #48]	; (4598 <system_gclk_gen_enable+0x48>)
    4568:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    456a:	4a0c      	ldr	r2, [pc, #48]	; (459c <system_gclk_gen_enable+0x4c>)
    456c:	1dfb      	adds	r3, r7, #7
    456e:	781b      	ldrb	r3, [r3, #0]
    4570:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	4b07      	ldr	r3, [pc, #28]	; (4594 <system_gclk_gen_enable+0x44>)
    4576:	4798      	blx	r3
    4578:	1e03      	subs	r3, r0, #0
    457a:	d1fb      	bne.n	4574 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    457c:	4b08      	ldr	r3, [pc, #32]	; (45a0 <system_gclk_gen_enable+0x50>)
    457e:	4a08      	ldr	r2, [pc, #32]	; (45a0 <system_gclk_gen_enable+0x50>)
    4580:	6852      	ldr	r2, [r2, #4]
    4582:	2180      	movs	r1, #128	; 0x80
    4584:	0249      	lsls	r1, r1, #9
    4586:	430a      	orrs	r2, r1
    4588:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    458a:	4b06      	ldr	r3, [pc, #24]	; (45a4 <system_gclk_gen_enable+0x54>)
    458c:	4798      	blx	r3
}
    458e:	46bd      	mov	sp, r7
    4590:	b002      	add	sp, #8
    4592:	bd80      	pop	{r7, pc}
    4594:	000043dd 	.word	0x000043dd
    4598:	000043bd 	.word	0x000043bd
    459c:	40000c04 	.word	0x40000c04
    45a0:	40000c00 	.word	0x40000c00
    45a4:	000043cd 	.word	0x000043cd

000045a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	b086      	sub	sp, #24
    45ac:	af00      	add	r7, sp, #0
    45ae:	1c02      	adds	r2, r0, #0
    45b0:	1dfb      	adds	r3, r7, #7
    45b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    45b4:	46c0      	nop			; (mov r8, r8)
    45b6:	4b2e      	ldr	r3, [pc, #184]	; (4670 <system_gclk_gen_get_hz+0xc8>)
    45b8:	4798      	blx	r3
    45ba:	1e03      	subs	r3, r0, #0
    45bc:	d1fb      	bne.n	45b6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    45be:	4b2d      	ldr	r3, [pc, #180]	; (4674 <system_gclk_gen_get_hz+0xcc>)
    45c0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    45c2:	4a2d      	ldr	r2, [pc, #180]	; (4678 <system_gclk_gen_get_hz+0xd0>)
    45c4:	1dfb      	adds	r3, r7, #7
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	4b28      	ldr	r3, [pc, #160]	; (4670 <system_gclk_gen_get_hz+0xc8>)
    45ce:	4798      	blx	r3
    45d0:	1e03      	subs	r3, r0, #0
    45d2:	d1fb      	bne.n	45cc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    45d4:	4b29      	ldr	r3, [pc, #164]	; (467c <system_gclk_gen_get_hz+0xd4>)
    45d6:	685b      	ldr	r3, [r3, #4]
    45d8:	0a1b      	lsrs	r3, r3, #8
    45da:	1c1a      	adds	r2, r3, #0
    45dc:	231f      	movs	r3, #31
    45de:	4013      	ands	r3, r2
    45e0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    45e2:	1c18      	adds	r0, r3, #0
    45e4:	4b26      	ldr	r3, [pc, #152]	; (4680 <system_gclk_gen_get_hz+0xd8>)
    45e6:	4798      	blx	r3
    45e8:	1c03      	adds	r3, r0, #0
    45ea:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    45ec:	4a22      	ldr	r2, [pc, #136]	; (4678 <system_gclk_gen_get_hz+0xd0>)
    45ee:	1dfb      	adds	r3, r7, #7
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    45f4:	4b21      	ldr	r3, [pc, #132]	; (467c <system_gclk_gen_get_hz+0xd4>)
    45f6:	685b      	ldr	r3, [r3, #4]
    45f8:	0d1b      	lsrs	r3, r3, #20
    45fa:	1c1a      	adds	r2, r3, #0
    45fc:	2301      	movs	r3, #1
    45fe:	4013      	ands	r3, r2
    4600:	b2da      	uxtb	r2, r3
    4602:	2313      	movs	r3, #19
    4604:	18fb      	adds	r3, r7, r3
    4606:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4608:	4a1e      	ldr	r2, [pc, #120]	; (4684 <system_gclk_gen_get_hz+0xdc>)
    460a:	1dfb      	adds	r3, r7, #7
    460c:	781b      	ldrb	r3, [r3, #0]
    460e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4610:	46c0      	nop			; (mov r8, r8)
    4612:	4b17      	ldr	r3, [pc, #92]	; (4670 <system_gclk_gen_get_hz+0xc8>)
    4614:	4798      	blx	r3
    4616:	1e03      	subs	r3, r0, #0
    4618:	d1fb      	bne.n	4612 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    461a:	4b18      	ldr	r3, [pc, #96]	; (467c <system_gclk_gen_get_hz+0xd4>)
    461c:	689b      	ldr	r3, [r3, #8]
    461e:	0a1b      	lsrs	r3, r3, #8
    4620:	1c1a      	adds	r2, r3, #0
    4622:	2300      	movs	r3, #0
    4624:	439a      	bics	r2, r3
    4626:	1c13      	adds	r3, r2, #0
    4628:	b29b      	uxth	r3, r3
    462a:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    462c:	4b16      	ldr	r3, [pc, #88]	; (4688 <system_gclk_gen_get_hz+0xe0>)
    462e:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4630:	2313      	movs	r3, #19
    4632:	18fb      	adds	r3, r7, r3
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	2b00      	cmp	r3, #0
    4638:	d109      	bne.n	464e <system_gclk_gen_get_hz+0xa6>
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	2b01      	cmp	r3, #1
    463e:	d906      	bls.n	464e <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    4640:	4b12      	ldr	r3, [pc, #72]	; (468c <system_gclk_gen_get_hz+0xe4>)
    4642:	6978      	ldr	r0, [r7, #20]
    4644:	68f9      	ldr	r1, [r7, #12]
    4646:	4798      	blx	r3
    4648:	1c03      	adds	r3, r0, #0
    464a:	617b      	str	r3, [r7, #20]
    464c:	e00a      	b.n	4664 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    464e:	2313      	movs	r3, #19
    4650:	18fb      	adds	r3, r7, r3
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	2b00      	cmp	r3, #0
    4656:	d005      	beq.n	4664 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	3301      	adds	r3, #1
    465c:	1c1a      	adds	r2, r3, #0
    465e:	697b      	ldr	r3, [r7, #20]
    4660:	40d3      	lsrs	r3, r2
    4662:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4664:	697b      	ldr	r3, [r7, #20]
}
    4666:	1c18      	adds	r0, r3, #0
    4668:	46bd      	mov	sp, r7
    466a:	b006      	add	sp, #24
    466c:	bd80      	pop	{r7, pc}
    466e:	46c0      	nop			; (mov r8, r8)
    4670:	000043dd 	.word	0x000043dd
    4674:	000043bd 	.word	0x000043bd
    4678:	40000c04 	.word	0x40000c04
    467c:	40000c00 	.word	0x40000c00
    4680:	00003e29 	.word	0x00003e29
    4684:	40000c08 	.word	0x40000c08
    4688:	000043cd 	.word	0x000043cd
    468c:	00007f4d 	.word	0x00007f4d

00004690 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4690:	b580      	push	{r7, lr}
    4692:	b084      	sub	sp, #16
    4694:	af00      	add	r7, sp, #0
    4696:	1c02      	adds	r2, r0, #0
    4698:	6039      	str	r1, [r7, #0]
    469a:	1dfb      	adds	r3, r7, #7
    469c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    469e:	1dfb      	adds	r3, r7, #7
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    46a4:	683b      	ldr	r3, [r7, #0]
    46a6:	781b      	ldrb	r3, [r3, #0]
    46a8:	021b      	lsls	r3, r3, #8
    46aa:	1c1a      	adds	r2, r3, #0
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	4313      	orrs	r3, r2
    46b0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    46b2:	1dfb      	adds	r3, r7, #7
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	1c18      	adds	r0, r3, #0
    46b8:	4b04      	ldr	r3, [pc, #16]	; (46cc <system_gclk_chan_set_config+0x3c>)
    46ba:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    46bc:	4b04      	ldr	r3, [pc, #16]	; (46d0 <system_gclk_chan_set_config+0x40>)
    46be:	68fa      	ldr	r2, [r7, #12]
    46c0:	b292      	uxth	r2, r2
    46c2:	805a      	strh	r2, [r3, #2]
}
    46c4:	46bd      	mov	sp, r7
    46c6:	b004      	add	sp, #16
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	00004719 	.word	0x00004719
    46d0:	40000c00 	.word	0x40000c00

000046d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    46d4:	b580      	push	{r7, lr}
    46d6:	b082      	sub	sp, #8
    46d8:	af00      	add	r7, sp, #0
    46da:	1c02      	adds	r2, r0, #0
    46dc:	1dfb      	adds	r3, r7, #7
    46de:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    46e0:	4b09      	ldr	r3, [pc, #36]	; (4708 <system_gclk_chan_enable+0x34>)
    46e2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    46e4:	4a09      	ldr	r2, [pc, #36]	; (470c <system_gclk_chan_enable+0x38>)
    46e6:	1dfb      	adds	r3, r7, #7
    46e8:	781b      	ldrb	r3, [r3, #0]
    46ea:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    46ec:	4908      	ldr	r1, [pc, #32]	; (4710 <system_gclk_chan_enable+0x3c>)
    46ee:	4b08      	ldr	r3, [pc, #32]	; (4710 <system_gclk_chan_enable+0x3c>)
    46f0:	885b      	ldrh	r3, [r3, #2]
    46f2:	b29b      	uxth	r3, r3
    46f4:	2280      	movs	r2, #128	; 0x80
    46f6:	01d2      	lsls	r2, r2, #7
    46f8:	4313      	orrs	r3, r2
    46fa:	b29b      	uxth	r3, r3
    46fc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    46fe:	4b05      	ldr	r3, [pc, #20]	; (4714 <system_gclk_chan_enable+0x40>)
    4700:	4798      	blx	r3
}
    4702:	46bd      	mov	sp, r7
    4704:	b002      	add	sp, #8
    4706:	bd80      	pop	{r7, pc}
    4708:	000043bd 	.word	0x000043bd
    470c:	40000c02 	.word	0x40000c02
    4710:	40000c00 	.word	0x40000c00
    4714:	000043cd 	.word	0x000043cd

00004718 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4718:	b580      	push	{r7, lr}
    471a:	b084      	sub	sp, #16
    471c:	af00      	add	r7, sp, #0
    471e:	1c02      	adds	r2, r0, #0
    4720:	1dfb      	adds	r3, r7, #7
    4722:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4724:	4b1d      	ldr	r3, [pc, #116]	; (479c <system_gclk_chan_disable+0x84>)
    4726:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4728:	4a1d      	ldr	r2, [pc, #116]	; (47a0 <system_gclk_chan_disable+0x88>)
    472a:	1dfb      	adds	r3, r7, #7
    472c:	781b      	ldrb	r3, [r3, #0]
    472e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4730:	4b1c      	ldr	r3, [pc, #112]	; (47a4 <system_gclk_chan_disable+0x8c>)
    4732:	885b      	ldrh	r3, [r3, #2]
    4734:	b29b      	uxth	r3, r3
    4736:	0a1b      	lsrs	r3, r3, #8
    4738:	1c1a      	adds	r2, r3, #0
    473a:	230f      	movs	r3, #15
    473c:	4013      	ands	r3, r2
    473e:	b2db      	uxtb	r3, r3
    4740:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4742:	4b18      	ldr	r3, [pc, #96]	; (47a4 <system_gclk_chan_disable+0x8c>)
    4744:	885a      	ldrh	r2, [r3, #2]
    4746:	4918      	ldr	r1, [pc, #96]	; (47a8 <system_gclk_chan_disable+0x90>)
    4748:	400a      	ands	r2, r1
    474a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    474c:	4a15      	ldr	r2, [pc, #84]	; (47a4 <system_gclk_chan_disable+0x8c>)
    474e:	4b15      	ldr	r3, [pc, #84]	; (47a4 <system_gclk_chan_disable+0x8c>)
    4750:	885b      	ldrh	r3, [r3, #2]
    4752:	b29b      	uxth	r3, r3
    4754:	4915      	ldr	r1, [pc, #84]	; (47ac <system_gclk_chan_disable+0x94>)
    4756:	400b      	ands	r3, r1
    4758:	b29b      	uxth	r3, r3
    475a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    475c:	46c0      	nop			; (mov r8, r8)
    475e:	4b11      	ldr	r3, [pc, #68]	; (47a4 <system_gclk_chan_disable+0x8c>)
    4760:	885b      	ldrh	r3, [r3, #2]
    4762:	b29b      	uxth	r3, r3
    4764:	1c1a      	adds	r2, r3, #0
    4766:	2380      	movs	r3, #128	; 0x80
    4768:	01db      	lsls	r3, r3, #7
    476a:	4013      	ands	r3, r2
    476c:	d1f7      	bne.n	475e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    476e:	4b0d      	ldr	r3, [pc, #52]	; (47a4 <system_gclk_chan_disable+0x8c>)
    4770:	68fa      	ldr	r2, [r7, #12]
    4772:	b2d2      	uxtb	r2, r2
    4774:	1c11      	adds	r1, r2, #0
    4776:	220f      	movs	r2, #15
    4778:	400a      	ands	r2, r1
    477a:	b2d2      	uxtb	r2, r2
    477c:	1c11      	adds	r1, r2, #0
    477e:	220f      	movs	r2, #15
    4780:	400a      	ands	r2, r1
    4782:	0210      	lsls	r0, r2, #8
    4784:	885a      	ldrh	r2, [r3, #2]
    4786:	4908      	ldr	r1, [pc, #32]	; (47a8 <system_gclk_chan_disable+0x90>)
    4788:	400a      	ands	r2, r1
    478a:	1c11      	adds	r1, r2, #0
    478c:	1c02      	adds	r2, r0, #0
    478e:	430a      	orrs	r2, r1
    4790:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    4792:	4b07      	ldr	r3, [pc, #28]	; (47b0 <system_gclk_chan_disable+0x98>)
    4794:	4798      	blx	r3
}
    4796:	46bd      	mov	sp, r7
    4798:	b004      	add	sp, #16
    479a:	bd80      	pop	{r7, pc}
    479c:	000043bd 	.word	0x000043bd
    47a0:	40000c02 	.word	0x40000c02
    47a4:	40000c00 	.word	0x40000c00
    47a8:	fffff0ff 	.word	0xfffff0ff
    47ac:	ffffbfff 	.word	0xffffbfff
    47b0:	000043cd 	.word	0x000043cd

000047b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	1c02      	adds	r2, r0, #0
    47bc:	1dfb      	adds	r3, r7, #7
    47be:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    47c0:	4b0e      	ldr	r3, [pc, #56]	; (47fc <system_gclk_chan_get_hz+0x48>)
    47c2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    47c4:	4a0e      	ldr	r2, [pc, #56]	; (4800 <system_gclk_chan_get_hz+0x4c>)
    47c6:	1dfb      	adds	r3, r7, #7
    47c8:	781b      	ldrb	r3, [r3, #0]
    47ca:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    47cc:	4b0d      	ldr	r3, [pc, #52]	; (4804 <system_gclk_chan_get_hz+0x50>)
    47ce:	885b      	ldrh	r3, [r3, #2]
    47d0:	b29b      	uxth	r3, r3
    47d2:	0a1b      	lsrs	r3, r3, #8
    47d4:	1c1a      	adds	r2, r3, #0
    47d6:	230f      	movs	r3, #15
    47d8:	4013      	ands	r3, r2
    47da:	b2da      	uxtb	r2, r3
    47dc:	230f      	movs	r3, #15
    47de:	18fb      	adds	r3, r7, r3
    47e0:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    47e2:	4b09      	ldr	r3, [pc, #36]	; (4808 <system_gclk_chan_get_hz+0x54>)
    47e4:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    47e6:	230f      	movs	r3, #15
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	1c18      	adds	r0, r3, #0
    47ee:	4b07      	ldr	r3, [pc, #28]	; (480c <system_gclk_chan_get_hz+0x58>)
    47f0:	4798      	blx	r3
    47f2:	1c03      	adds	r3, r0, #0
}
    47f4:	1c18      	adds	r0, r3, #0
    47f6:	46bd      	mov	sp, r7
    47f8:	b004      	add	sp, #16
    47fa:	bd80      	pop	{r7, pc}
    47fc:	000043bd 	.word	0x000043bd
    4800:	40000c02 	.word	0x40000c02
    4804:	40000c00 	.word	0x40000c00
    4808:	000043cd 	.word	0x000043cd
    480c:	000045a9 	.word	0x000045a9

00004810 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4810:	b580      	push	{r7, lr}
    4812:	b084      	sub	sp, #16
    4814:	af00      	add	r7, sp, #0
    4816:	1c02      	adds	r2, r0, #0
    4818:	1dfb      	adds	r3, r7, #7
    481a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    481c:	230f      	movs	r3, #15
    481e:	18fb      	adds	r3, r7, r3
    4820:	1dfa      	adds	r2, r7, #7
    4822:	7812      	ldrb	r2, [r2, #0]
    4824:	09d2      	lsrs	r2, r2, #7
    4826:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4828:	230e      	movs	r3, #14
    482a:	18fb      	adds	r3, r7, r3
    482c:	1dfa      	adds	r2, r7, #7
    482e:	7812      	ldrb	r2, [r2, #0]
    4830:	0952      	lsrs	r2, r2, #5
    4832:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4834:	4b0d      	ldr	r3, [pc, #52]	; (486c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4836:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4838:	230f      	movs	r3, #15
    483a:	18fb      	adds	r3, r7, r3
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d10f      	bne.n	4862 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4842:	230f      	movs	r3, #15
    4844:	18fb      	adds	r3, r7, r3
    4846:	781b      	ldrb	r3, [r3, #0]
    4848:	009b      	lsls	r3, r3, #2
    484a:	2210      	movs	r2, #16
    484c:	4694      	mov	ip, r2
    484e:	44bc      	add	ip, r7
    4850:	4463      	add	r3, ip
    4852:	3b08      	subs	r3, #8
    4854:	681a      	ldr	r2, [r3, #0]
    4856:	230e      	movs	r3, #14
    4858:	18fb      	adds	r3, r7, r3
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	01db      	lsls	r3, r3, #7
    485e:	18d3      	adds	r3, r2, r3
    4860:	e000      	b.n	4864 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4862:	2300      	movs	r3, #0
	}
}
    4864:	1c18      	adds	r0, r3, #0
    4866:	46bd      	mov	sp, r7
    4868:	b004      	add	sp, #16
    486a:	bd80      	pop	{r7, pc}
    486c:	41004400 	.word	0x41004400

00004870 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4870:	b580      	push	{r7, lr}
    4872:	b088      	sub	sp, #32
    4874:	af00      	add	r7, sp, #0
    4876:	60f8      	str	r0, [r7, #12]
    4878:	60b9      	str	r1, [r7, #8]
    487a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    487c:	2300      	movs	r3, #0
    487e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	78db      	ldrb	r3, [r3, #3]
    4884:	2201      	movs	r2, #1
    4886:	4053      	eors	r3, r2
    4888:	b2db      	uxtb	r3, r3
    488a:	2b00      	cmp	r3, #0
    488c:	d035      	beq.n	48fa <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    488e:	687b      	ldr	r3, [r7, #4]
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	2b80      	cmp	r3, #128	; 0x80
    4894:	d00b      	beq.n	48ae <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4896:	69fb      	ldr	r3, [r7, #28]
    4898:	2280      	movs	r2, #128	; 0x80
    489a:	0252      	lsls	r2, r2, #9
    489c:	4313      	orrs	r3, r2
    489e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	061b      	lsls	r3, r3, #24
    48a6:	1c1a      	adds	r2, r3, #0
    48a8:	69fb      	ldr	r3, [r7, #28]
    48aa:	4313      	orrs	r3, r2
    48ac:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	785b      	ldrb	r3, [r3, #1]
    48b2:	2b00      	cmp	r3, #0
    48b4:	d003      	beq.n	48be <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    48ba:	2b02      	cmp	r3, #2
    48bc:	d110      	bne.n	48e0 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    48be:	69fb      	ldr	r3, [r7, #28]
    48c0:	2280      	movs	r2, #128	; 0x80
    48c2:	0292      	lsls	r2, r2, #10
    48c4:	4313      	orrs	r3, r2
    48c6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	789b      	ldrb	r3, [r3, #2]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d004      	beq.n	48da <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    48d0:	69fb      	ldr	r3, [r7, #28]
    48d2:	2280      	movs	r2, #128	; 0x80
    48d4:	02d2      	lsls	r2, r2, #11
    48d6:	4313      	orrs	r3, r2
    48d8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    48da:	68fb      	ldr	r3, [r7, #12]
    48dc:	68ba      	ldr	r2, [r7, #8]
    48de:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	785b      	ldrb	r3, [r3, #1]
    48e4:	2b01      	cmp	r3, #1
    48e6:	d003      	beq.n	48f0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    48ec:	2b02      	cmp	r3, #2
    48ee:	d107      	bne.n	4900 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    48f0:	69fb      	ldr	r3, [r7, #28]
    48f2:	4a21      	ldr	r2, [pc, #132]	; (4978 <_system_pinmux_config+0x108>)
    48f4:	4013      	ands	r3, r2
    48f6:	61fb      	str	r3, [r7, #28]
    48f8:	e002      	b.n	4900 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	68ba      	ldr	r2, [r7, #8]
    48fe:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4900:	68bb      	ldr	r3, [r7, #8]
    4902:	041b      	lsls	r3, r3, #16
    4904:	0c1b      	lsrs	r3, r3, #16
    4906:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	0c1b      	lsrs	r3, r3, #16
    490c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    490e:	69ba      	ldr	r2, [r7, #24]
    4910:	69fb      	ldr	r3, [r7, #28]
    4912:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4914:	22a0      	movs	r2, #160	; 0xa0
    4916:	05d2      	lsls	r2, r2, #23
    4918:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    491a:	68fb      	ldr	r3, [r7, #12]
    491c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    491e:	697a      	ldr	r2, [r7, #20]
    4920:	69fb      	ldr	r3, [r7, #28]
    4922:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4924:	22d0      	movs	r2, #208	; 0xd0
    4926:	0612      	lsls	r2, r2, #24
    4928:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    492e:	687b      	ldr	r3, [r7, #4]
    4930:	78db      	ldrb	r3, [r3, #3]
    4932:	2201      	movs	r2, #1
    4934:	4053      	eors	r3, r2
    4936:	b2db      	uxtb	r3, r3
    4938:	2b00      	cmp	r3, #0
    493a:	d01a      	beq.n	4972 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    493c:	69fa      	ldr	r2, [r7, #28]
    493e:	2380      	movs	r3, #128	; 0x80
    4940:	02db      	lsls	r3, r3, #11
    4942:	4013      	ands	r3, r2
    4944:	d00a      	beq.n	495c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4946:	687b      	ldr	r3, [r7, #4]
    4948:	789b      	ldrb	r3, [r3, #2]
    494a:	2b01      	cmp	r3, #1
    494c:	d103      	bne.n	4956 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    494e:	68fb      	ldr	r3, [r7, #12]
    4950:	68ba      	ldr	r2, [r7, #8]
    4952:	619a      	str	r2, [r3, #24]
    4954:	e002      	b.n	495c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4956:	68fb      	ldr	r3, [r7, #12]
    4958:	68ba      	ldr	r2, [r7, #8]
    495a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	785b      	ldrb	r3, [r3, #1]
    4960:	2b01      	cmp	r3, #1
    4962:	d003      	beq.n	496c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4968:	2b02      	cmp	r3, #2
    496a:	d102      	bne.n	4972 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    496c:	68fb      	ldr	r3, [r7, #12]
    496e:	68ba      	ldr	r2, [r7, #8]
    4970:	609a      	str	r2, [r3, #8]
		}
	}
}
    4972:	46bd      	mov	sp, r7
    4974:	b008      	add	sp, #32
    4976:	bd80      	pop	{r7, pc}
    4978:	fffbffff 	.word	0xfffbffff

0000497c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    497c:	b580      	push	{r7, lr}
    497e:	b084      	sub	sp, #16
    4980:	af00      	add	r7, sp, #0
    4982:	1c02      	adds	r2, r0, #0
    4984:	6039      	str	r1, [r7, #0]
    4986:	1dfb      	adds	r3, r7, #7
    4988:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    498a:	1dfb      	adds	r3, r7, #7
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	1c18      	adds	r0, r3, #0
    4990:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <system_pinmux_pin_set_config+0x44>)
    4992:	4798      	blx	r3
    4994:	1c03      	adds	r3, r0, #0
    4996:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4998:	1dfb      	adds	r3, r7, #7
    499a:	781b      	ldrb	r3, [r3, #0]
    499c:	221f      	movs	r2, #31
    499e:	4013      	ands	r3, r2
    49a0:	2201      	movs	r2, #1
    49a2:	409a      	lsls	r2, r3
    49a4:	1c13      	adds	r3, r2, #0
    49a6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    49a8:	68f9      	ldr	r1, [r7, #12]
    49aa:	68ba      	ldr	r2, [r7, #8]
    49ac:	683b      	ldr	r3, [r7, #0]
    49ae:	1c08      	adds	r0, r1, #0
    49b0:	1c11      	adds	r1, r2, #0
    49b2:	1c1a      	adds	r2, r3, #0
    49b4:	4b03      	ldr	r3, [pc, #12]	; (49c4 <system_pinmux_pin_set_config+0x48>)
    49b6:	4798      	blx	r3
}
    49b8:	46bd      	mov	sp, r7
    49ba:	b004      	add	sp, #16
    49bc:	bd80      	pop	{r7, pc}
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	00004811 	.word	0x00004811
    49c4:	00004871 	.word	0x00004871

000049c8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	af00      	add	r7, sp, #0
	return;
    49cc:	46c0      	nop			; (mov r8, r8)
}
    49ce:	46bd      	mov	sp, r7
    49d0:	bd80      	pop	{r7, pc}
    49d2:	46c0      	nop			; (mov r8, r8)

000049d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    49d8:	4b05      	ldr	r3, [pc, #20]	; (49f0 <system_init+0x1c>)
    49da:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    49dc:	4b05      	ldr	r3, [pc, #20]	; (49f4 <system_init+0x20>)
    49de:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    49e0:	4b05      	ldr	r3, [pc, #20]	; (49f8 <system_init+0x24>)
    49e2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    49e4:	4b05      	ldr	r3, [pc, #20]	; (49fc <system_init+0x28>)
    49e6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    49e8:	4b05      	ldr	r3, [pc, #20]	; (4a00 <system_init+0x2c>)
    49ea:	4798      	blx	r3
}
    49ec:	46bd      	mov	sp, r7
    49ee:	bd80      	pop	{r7, pc}
    49f0:	00004195 	.word	0x00004195
    49f4:	000027b1 	.word	0x000027b1
    49f8:	000049c9 	.word	0x000049c9
    49fc:	00002b89 	.word	0x00002b89
    4a00:	000049c9 	.word	0x000049c9

00004a04 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b082      	sub	sp, #8
    4a08:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a0a:	f3ef 8310 	mrs	r3, PRIMASK
    4a0e:	603b      	str	r3, [r7, #0]
  return(result);
    4a10:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    4a12:	425a      	negs	r2, r3
    4a14:	4153      	adcs	r3, r2
    4a16:	b2db      	uxtb	r3, r3
    4a18:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4a1a:	b672      	cpsid	i
    4a1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4a20:	4b03      	ldr	r3, [pc, #12]	; (4a30 <cpu_irq_save+0x2c>)
    4a22:	2200      	movs	r2, #0
    4a24:	701a      	strb	r2, [r3, #0]
	return flags;
    4a26:	687b      	ldr	r3, [r7, #4]
}
    4a28:	1c18      	adds	r0, r3, #0
    4a2a:	46bd      	mov	sp, r7
    4a2c:	b002      	add	sp, #8
    4a2e:	bd80      	pop	{r7, pc}
    4a30:	200000d8 	.word	0x200000d8

00004a34 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    4a34:	b580      	push	{r7, lr}
    4a36:	b082      	sub	sp, #8
    4a38:	af00      	add	r7, sp, #0
    4a3a:	6078      	str	r0, [r7, #4]
	return (flags);
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	1e5a      	subs	r2, r3, #1
    4a40:	4193      	sbcs	r3, r2
    4a42:	b2db      	uxtb	r3, r3
}
    4a44:	1c18      	adds	r0, r3, #0
    4a46:	46bd      	mov	sp, r7
    4a48:	b002      	add	sp, #8
    4a4a:	bd80      	pop	{r7, pc}

00004a4c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    4a4c:	b580      	push	{r7, lr}
    4a4e:	b082      	sub	sp, #8
    4a50:	af00      	add	r7, sp, #0
    4a52:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	1c18      	adds	r0, r3, #0
    4a58:	4b06      	ldr	r3, [pc, #24]	; (4a74 <cpu_irq_restore+0x28>)
    4a5a:	4798      	blx	r3
    4a5c:	1e03      	subs	r3, r0, #0
    4a5e:	d005      	beq.n	4a6c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    4a60:	4b05      	ldr	r3, [pc, #20]	; (4a78 <cpu_irq_restore+0x2c>)
    4a62:	2201      	movs	r2, #1
    4a64:	701a      	strb	r2, [r3, #0]
    4a66:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4a6a:	b662      	cpsie	i
}
    4a6c:	46bd      	mov	sp, r7
    4a6e:	b002      	add	sp, #8
    4a70:	bd80      	pop	{r7, pc}
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	00004a35 	.word	0x00004a35
    4a78:	200000d8 	.word	0x200000d8

00004a7c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	1c02      	adds	r2, r0, #0
    4a84:	1dfb      	adds	r3, r7, #7
    4a86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4a88:	230f      	movs	r3, #15
    4a8a:	18fb      	adds	r3, r7, r3
    4a8c:	1dfa      	adds	r2, r7, #7
    4a8e:	7812      	ldrb	r2, [r2, #0]
    4a90:	09d2      	lsrs	r2, r2, #7
    4a92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4a94:	230e      	movs	r3, #14
    4a96:	18fb      	adds	r3, r7, r3
    4a98:	1dfa      	adds	r2, r7, #7
    4a9a:	7812      	ldrb	r2, [r2, #0]
    4a9c:	0952      	lsrs	r2, r2, #5
    4a9e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4aa0:	4b0d      	ldr	r3, [pc, #52]	; (4ad8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aa2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4aa4:	230f      	movs	r3, #15
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	781b      	ldrb	r3, [r3, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d10f      	bne.n	4ace <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4aae:	230f      	movs	r3, #15
    4ab0:	18fb      	adds	r3, r7, r3
    4ab2:	781b      	ldrb	r3, [r3, #0]
    4ab4:	009b      	lsls	r3, r3, #2
    4ab6:	2210      	movs	r2, #16
    4ab8:	4694      	mov	ip, r2
    4aba:	44bc      	add	ip, r7
    4abc:	4463      	add	r3, ip
    4abe:	3b08      	subs	r3, #8
    4ac0:	681a      	ldr	r2, [r3, #0]
    4ac2:	230e      	movs	r3, #14
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	01db      	lsls	r3, r3, #7
    4aca:	18d3      	adds	r3, r2, r3
    4acc:	e000      	b.n	4ad0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4ace:	2300      	movs	r3, #0
	}
}
    4ad0:	1c18      	adds	r0, r3, #0
    4ad2:	46bd      	mov	sp, r7
    4ad4:	b004      	add	sp, #16
    4ad6:	bd80      	pop	{r7, pc}
    4ad8:	41004400 	.word	0x41004400

00004adc <usb_get_state_machine_status>:
 * \brief Get the status of USB module's state machine
 *
 * \param module_inst Pointer to USB module instance
 */
static inline uint8_t usb_get_state_machine_status(struct usb_module *module_inst)
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b082      	sub	sp, #8
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	7b5b      	ldrb	r3, [r3, #13]
    4aea:	b2db      	uxtb	r3, r3
}
    4aec:	1c18      	adds	r0, r3, #0
    4aee:	46bd      	mov	sp, r7
    4af0:	b002      	add	sp, #8
    4af2:	bd80      	pop	{r7, pc}

00004af4 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	681a      	ldr	r2, [r3, #0]
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	891b      	ldrh	r3, [r3, #8]
    4b06:	b29b      	uxth	r3, r3
    4b08:	2101      	movs	r1, #1
    4b0a:	438b      	bics	r3, r1
    4b0c:	b29b      	uxth	r3, r3
    4b0e:	8113      	strh	r3, [r2, #8]
}
    4b10:	46bd      	mov	sp, r7
    4b12:	b002      	add	sp, #8
    4b14:	bd80      	pop	{r7, pc}
    4b16:	46c0      	nop			; (mov r8, r8)

00004b18 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b082      	sub	sp, #8
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	681a      	ldr	r2, [r3, #0]
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	891b      	ldrh	r3, [r3, #8]
    4b2a:	b29b      	uxth	r3, r3
    4b2c:	2101      	movs	r1, #1
    4b2e:	430b      	orrs	r3, r1
    4b30:	b29b      	uxth	r3, r3
    4b32:	8113      	strh	r3, [r2, #8]
}
    4b34:	46bd      	mov	sp, r7
    4b36:	b002      	add	sp, #8
    4b38:	bd80      	pop	{r7, pc}
    4b3a:	46c0      	nop			; (mov r8, r8)

00004b3c <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b082      	sub	sp, #8
    4b40:	af00      	add	r7, sp, #0
    4b42:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    4b44:	687b      	ldr	r3, [r7, #4]
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	7a9b      	ldrb	r3, [r3, #10]
    4b4a:	227f      	movs	r2, #127	; 0x7f
    4b4c:	4013      	ands	r3, r2
    4b4e:	b2db      	uxtb	r3, r3
}
    4b50:	1c18      	adds	r0, r3, #0
    4b52:	46bd      	mov	sp, r7
    4b54:	b002      	add	sp, #8
    4b56:	bd80      	pop	{r7, pc}

00004b58 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b082      	sub	sp, #8
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
    4b60:	1c0a      	adds	r2, r1, #0
    4b62:	1cfb      	adds	r3, r7, #3
    4b64:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	1cfa      	adds	r2, r7, #3
    4b6c:	7812      	ldrb	r2, [r2, #0]
    4b6e:	2180      	movs	r1, #128	; 0x80
    4b70:	4249      	negs	r1, r1
    4b72:	430a      	orrs	r2, r1
    4b74:	b2d2      	uxtb	r2, r2
    4b76:	729a      	strb	r2, [r3, #10]
}
    4b78:	46bd      	mov	sp, r7
    4b7a:	b002      	add	sp, #8
    4b7c:	bd80      	pop	{r7, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)

00004b80 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b082      	sub	sp, #8
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	8a1b      	ldrh	r3, [r3, #16]
    4b8e:	b29b      	uxth	r3, r3
    4b90:	08db      	lsrs	r3, r3, #3
    4b92:	055b      	lsls	r3, r3, #21
    4b94:	0d5b      	lsrs	r3, r3, #21
    4b96:	b29b      	uxth	r3, r3
}
    4b98:	1c18      	adds	r0, r3, #0
    4b9a:	46bd      	mov	sp, r7
    4b9c:	b002      	add	sp, #8
    4b9e:	bd80      	pop	{r7, pc}

00004ba0 <usb_device_send_remote_wake_up>:
 * \brief USB device send the resume wakeup
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b082      	sub	sp, #8
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	681a      	ldr	r2, [r3, #0]
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	681b      	ldr	r3, [r3, #0]
    4bb0:	891b      	ldrh	r3, [r3, #8]
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	2102      	movs	r1, #2
    4bb6:	430b      	orrs	r3, r1
    4bb8:	b29b      	uxth	r3, r3
    4bba:	8113      	strh	r3, [r2, #8]
}
    4bbc:	46bd      	mov	sp, r7
    4bbe:	b002      	add	sp, #8
    4bc0:	bd80      	pop	{r7, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)

00004bc4 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    4bcc:	1c0a      	adds	r2, r1, #0
    4bce:	1cfb      	adds	r3, r7, #3
    4bd0:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	681b      	ldr	r3, [r3, #0]
    4bd6:	1cfa      	adds	r2, r7, #3
    4bd8:	7812      	ldrb	r2, [r2, #0]
    4bda:	2103      	movs	r1, #3
    4bdc:	400a      	ands	r2, r1
    4bde:	b2d2      	uxtb	r2, r2
    4be0:	1c11      	adds	r1, r2, #0
    4be2:	2203      	movs	r2, #3
    4be4:	400a      	ands	r2, r1
    4be6:	0290      	lsls	r0, r2, #10
    4be8:	891a      	ldrh	r2, [r3, #8]
    4bea:	4904      	ldr	r1, [pc, #16]	; (4bfc <usb_device_set_lpm_mode+0x38>)
    4bec:	400a      	ands	r2, r1
    4bee:	1c11      	adds	r1, r2, #0
    4bf0:	1c02      	adds	r2, r0, #0
    4bf2:	430a      	orrs	r2, r1
    4bf4:	811a      	strh	r2, [r3, #8]
}
    4bf6:	46bd      	mov	sp, r7
    4bf8:	b002      	add	sp, #8
    4bfa:	bd80      	pop	{r7, pc}
    4bfc:	fffff3ff 	.word	0xfffff3ff

00004c00 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c00:	b580      	push	{r7, lr}
    4c02:	b082      	sub	sp, #8
    4c04:	af00      	add	r7, sp, #0
    4c06:	1c02      	adds	r2, r0, #0
    4c08:	1dfb      	adds	r3, r7, #7
    4c0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4c0c:	1dfb      	adds	r3, r7, #7
    4c0e:	781b      	ldrb	r3, [r3, #0]
    4c10:	1c18      	adds	r0, r3, #0
    4c12:	4b03      	ldr	r3, [pc, #12]	; (4c20 <port_get_group_from_gpio_pin+0x20>)
    4c14:	4798      	blx	r3
    4c16:	1c03      	adds	r3, r0, #0
}
    4c18:	1c18      	adds	r0, r3, #0
    4c1a:	46bd      	mov	sp, r7
    4c1c:	b002      	add	sp, #8
    4c1e:	bd80      	pop	{r7, pc}
    4c20:	00004a7d 	.word	0x00004a7d

00004c24 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4c24:	b580      	push	{r7, lr}
    4c26:	b084      	sub	sp, #16
    4c28:	af00      	add	r7, sp, #0
    4c2a:	1c02      	adds	r2, r0, #0
    4c2c:	1dfb      	adds	r3, r7, #7
    4c2e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4c30:	1dfb      	adds	r3, r7, #7
    4c32:	781b      	ldrb	r3, [r3, #0]
    4c34:	1c18      	adds	r0, r3, #0
    4c36:	4b0b      	ldr	r3, [pc, #44]	; (4c64 <port_pin_get_input_level+0x40>)
    4c38:	4798      	blx	r3
    4c3a:	1c03      	adds	r3, r0, #0
    4c3c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c3e:	1dfb      	adds	r3, r7, #7
    4c40:	781b      	ldrb	r3, [r3, #0]
    4c42:	221f      	movs	r2, #31
    4c44:	4013      	ands	r3, r2
    4c46:	2201      	movs	r2, #1
    4c48:	409a      	lsls	r2, r3
    4c4a:	1c13      	adds	r3, r2, #0
    4c4c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	6a1b      	ldr	r3, [r3, #32]
    4c52:	68ba      	ldr	r2, [r7, #8]
    4c54:	4013      	ands	r3, r2
    4c56:	1e5a      	subs	r2, r3, #1
    4c58:	4193      	sbcs	r3, r2
    4c5a:	b2db      	uxtb	r3, r3
}
    4c5c:	1c18      	adds	r0, r3, #0
    4c5e:	46bd      	mov	sp, r7
    4c60:	b004      	add	sp, #16
    4c62:	bd80      	pop	{r7, pc}
    4c64:	00004c01 	.word	0x00004c01

00004c68 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	b084      	sub	sp, #16
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	1c02      	adds	r2, r0, #0
    4c70:	1dfb      	adds	r3, r7, #7
    4c72:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4c74:	1dfb      	adds	r3, r7, #7
    4c76:	781b      	ldrb	r3, [r3, #0]
    4c78:	4a0b      	ldr	r2, [pc, #44]	; (4ca8 <sleepmgr_lock_mode+0x40>)
    4c7a:	5cd3      	ldrb	r3, [r2, r3]
    4c7c:	2bff      	cmp	r3, #255	; 0xff
    4c7e:	d100      	bne.n	4c82 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    4c80:	e7fe      	b.n	4c80 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    4c82:	4b0a      	ldr	r3, [pc, #40]	; (4cac <sleepmgr_lock_mode+0x44>)
    4c84:	4798      	blx	r3
    4c86:	1c03      	adds	r3, r0, #0
    4c88:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    4c8a:	1dfb      	adds	r3, r7, #7
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	4a06      	ldr	r2, [pc, #24]	; (4ca8 <sleepmgr_lock_mode+0x40>)
    4c90:	5cd2      	ldrb	r2, [r2, r3]
    4c92:	3201      	adds	r2, #1
    4c94:	b2d1      	uxtb	r1, r2
    4c96:	4a04      	ldr	r2, [pc, #16]	; (4ca8 <sleepmgr_lock_mode+0x40>)
    4c98:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    4c9a:	68fb      	ldr	r3, [r7, #12]
    4c9c:	1c18      	adds	r0, r3, #0
    4c9e:	4b04      	ldr	r3, [pc, #16]	; (4cb0 <sleepmgr_lock_mode+0x48>)
    4ca0:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    4ca2:	46bd      	mov	sp, r7
    4ca4:	b004      	add	sp, #16
    4ca6:	bd80      	pop	{r7, pc}
    4ca8:	20000254 	.word	0x20000254
    4cac:	00004a05 	.word	0x00004a05
    4cb0:	00004a4d 	.word	0x00004a4d

00004cb4 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b084      	sub	sp, #16
    4cb8:	af00      	add	r7, sp, #0
    4cba:	1c02      	adds	r2, r0, #0
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4cc0:	1dfb      	adds	r3, r7, #7
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	4a0b      	ldr	r2, [pc, #44]	; (4cf4 <sleepmgr_unlock_mode+0x40>)
    4cc6:	5cd3      	ldrb	r3, [r2, r3]
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d100      	bne.n	4cce <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    4ccc:	e7fe      	b.n	4ccc <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    4cce:	4b0a      	ldr	r3, [pc, #40]	; (4cf8 <sleepmgr_unlock_mode+0x44>)
    4cd0:	4798      	blx	r3
    4cd2:	1c03      	adds	r3, r0, #0
    4cd4:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    4cd6:	1dfb      	adds	r3, r7, #7
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	4a06      	ldr	r2, [pc, #24]	; (4cf4 <sleepmgr_unlock_mode+0x40>)
    4cdc:	5cd2      	ldrb	r2, [r2, r3]
    4cde:	3a01      	subs	r2, #1
    4ce0:	b2d1      	uxtb	r1, r2
    4ce2:	4a04      	ldr	r2, [pc, #16]	; (4cf4 <sleepmgr_unlock_mode+0x40>)
    4ce4:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    4ce6:	68fb      	ldr	r3, [r7, #12]
    4ce8:	1c18      	adds	r0, r3, #0
    4cea:	4b04      	ldr	r3, [pc, #16]	; (4cfc <sleepmgr_unlock_mode+0x48>)
    4cec:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    4cee:	46bd      	mov	sp, r7
    4cf0:	b004      	add	sp, #16
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	20000254 	.word	0x20000254
    4cf8:	00004a05 	.word	0x00004a05
    4cfc:	00004a4d 	.word	0x00004a4d

00004d00 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4d04:	4b0b      	ldr	r3, [pc, #44]	; (4d34 <udd_wait_clock_ready+0x34>)
    4d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4d08:	b29b      	uxth	r3, r3
    4d0a:	1c1a      	adds	r2, r3, #0
    4d0c:	2320      	movs	r3, #32
    4d0e:	4013      	ands	r3, r2
    4d10:	d107      	bne.n	4d22 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	4b07      	ldr	r3, [pc, #28]	; (4d34 <udd_wait_clock_ready+0x34>)
    4d16:	68db      	ldr	r3, [r3, #12]
    4d18:	22d0      	movs	r2, #208	; 0xd0
    4d1a:	4013      	ands	r3, r2
    4d1c:	2bd0      	cmp	r3, #208	; 0xd0
    4d1e:	d1f9      	bne.n	4d14 <udd_wait_clock_ready+0x14>
    4d20:	e005      	b.n	4d2e <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	4b03      	ldr	r3, [pc, #12]	; (4d34 <udd_wait_clock_ready+0x34>)
    4d26:	68db      	ldr	r3, [r3, #12]
    4d28:	2210      	movs	r2, #16
    4d2a:	4013      	ands	r3, r2
    4d2c:	d0fa      	beq.n	4d24 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    4d2e:	46bd      	mov	sp, r7
    4d30:	bd80      	pop	{r7, pc}
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	40000800 	.word	0x40000800

00004d38 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    4d38:	b580      	push	{r7, lr}
    4d3a:	b084      	sub	sp, #16
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	1c02      	adds	r2, r0, #0
    4d40:	1dfb      	adds	r3, r7, #7
    4d42:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    4d44:	230c      	movs	r3, #12
    4d46:	18fa      	adds	r2, r7, r3
    4d48:	4b17      	ldr	r3, [pc, #92]	; (4da8 <udd_sleep_mode+0x70>)
    4d4a:	1c11      	adds	r1, r2, #0
    4d4c:	1c1a      	adds	r2, r3, #0
    4d4e:	2304      	movs	r3, #4
    4d50:	1c08      	adds	r0, r1, #0
    4d52:	1c11      	adds	r1, r2, #0
    4d54:	1c1a      	adds	r2, r3, #0
    4d56:	4b15      	ldr	r3, [pc, #84]	; (4dac <udd_sleep_mode+0x74>)
    4d58:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    4d5a:	4b15      	ldr	r3, [pc, #84]	; (4db0 <udd_sleep_mode+0x78>)
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	1dfa      	adds	r2, r7, #7
    4d60:	7812      	ldrb	r2, [r2, #0]
    4d62:	429a      	cmp	r2, r3
    4d64:	d01c      	beq.n	4da0 <udd_sleep_mode+0x68>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    4d66:	1dfb      	adds	r3, r7, #7
    4d68:	781b      	ldrb	r3, [r3, #0]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d007      	beq.n	4d7e <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    4d6e:	1dfb      	adds	r3, r7, #7
    4d70:	781b      	ldrb	r3, [r3, #0]
    4d72:	220c      	movs	r2, #12
    4d74:	18ba      	adds	r2, r7, r2
    4d76:	5cd3      	ldrb	r3, [r2, r3]
    4d78:	1c18      	adds	r0, r3, #0
    4d7a:	4b0e      	ldr	r3, [pc, #56]	; (4db4 <udd_sleep_mode+0x7c>)
    4d7c:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    4d7e:	4b0c      	ldr	r3, [pc, #48]	; (4db0 <udd_sleep_mode+0x78>)
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d008      	beq.n	4d98 <udd_sleep_mode+0x60>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    4d86:	4b0a      	ldr	r3, [pc, #40]	; (4db0 <udd_sleep_mode+0x78>)
    4d88:	781b      	ldrb	r3, [r3, #0]
    4d8a:	1c1a      	adds	r2, r3, #0
    4d8c:	230c      	movs	r3, #12
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	5c9b      	ldrb	r3, [r3, r2]
    4d92:	1c18      	adds	r0, r3, #0
    4d94:	4b08      	ldr	r3, [pc, #32]	; (4db8 <udd_sleep_mode+0x80>)
    4d96:	4798      	blx	r3
	}
	udd_state = new_state;
    4d98:	4b05      	ldr	r3, [pc, #20]	; (4db0 <udd_sleep_mode+0x78>)
    4d9a:	1dfa      	adds	r2, r7, #7
    4d9c:	7812      	ldrb	r2, [r2, #0]
    4d9e:	701a      	strb	r2, [r3, #0]
}
    4da0:	46bd      	mov	sp, r7
    4da2:	b004      	add	sp, #16
    4da4:	bd80      	pop	{r7, pc}
    4da6:	46c0      	nop			; (mov r8, r8)
    4da8:	000083c0 	.word	0x000083c0
    4dac:	000082dd 	.word	0x000082dd
    4db0:	20000178 	.word	0x20000178
    4db4:	00004c69 	.word	0x00004c69
    4db8:	00004cb5 	.word	0x00004cb5

00004dbc <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    4dbc:	b580      	push	{r7, lr}
    4dbe:	b082      	sub	sp, #8
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	1c02      	adds	r2, r0, #0
    4dc4:	1dfb      	adds	r3, r7, #7
    4dc6:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    4dc8:	1dfb      	adds	r3, r7, #7
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	220f      	movs	r2, #15
    4dce:	4013      	ands	r3, r2
    4dd0:	005b      	lsls	r3, r3, #1
    4dd2:	1dfa      	adds	r2, r7, #7
    4dd4:	7812      	ldrb	r2, [r2, #0]
    4dd6:	09d2      	lsrs	r2, r2, #7
    4dd8:	b2d2      	uxtb	r2, r2
    4dda:	189b      	adds	r3, r3, r2
    4ddc:	1e9a      	subs	r2, r3, #2
    4dde:	1c13      	adds	r3, r2, #0
    4de0:	009b      	lsls	r3, r3, #2
    4de2:	189b      	adds	r3, r3, r2
    4de4:	009b      	lsls	r3, r3, #2
    4de6:	4a03      	ldr	r2, [pc, #12]	; (4df4 <udd_ep_get_job+0x38>)
    4de8:	189b      	adds	r3, r3, r2
}
    4dea:	1c18      	adds	r0, r3, #0
    4dec:	46bd      	mov	sp, r7
    4dee:	b002      	add	sp, #8
    4df0:	bd80      	pop	{r7, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	20000150 	.word	0x20000150

00004df8 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    4df8:	b590      	push	{r4, r7, lr}
    4dfa:	b089      	sub	sp, #36	; 0x24
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    4e04:	2317      	movs	r3, #23
    4e06:	18fb      	adds	r3, r7, r3
    4e08:	69ba      	ldr	r2, [r7, #24]
    4e0a:	7992      	ldrb	r2, [r2, #6]
    4e0c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    4e0e:	2317      	movs	r3, #23
    4e10:	18fb      	adds	r3, r7, r3
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	1c18      	adds	r0, r3, #0
    4e16:	4b57      	ldr	r3, [pc, #348]	; (4f74 <udd_ep_trans_in_next+0x17c>)
    4e18:	4798      	blx	r3
    4e1a:	1c03      	adds	r3, r0, #0
    4e1c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    4e1e:	230f      	movs	r3, #15
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	2217      	movs	r2, #23
    4e24:	18ba      	adds	r2, r7, r2
    4e26:	7812      	ldrb	r2, [r2, #0]
    4e28:	210f      	movs	r1, #15
    4e2a:	400a      	ands	r2, r1
    4e2c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    4e2e:	230c      	movs	r3, #12
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	693a      	ldr	r2, [r7, #16]
    4e34:	8a12      	ldrh	r2, [r2, #16]
    4e36:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    4e38:	230a      	movs	r3, #10
    4e3a:	18fb      	adds	r3, r7, r3
    4e3c:	69ba      	ldr	r2, [r7, #24]
    4e3e:	8852      	ldrh	r2, [r2, #2]
    4e40:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    4e42:	693b      	ldr	r3, [r7, #16]
    4e44:	68da      	ldr	r2, [r3, #12]
    4e46:	230a      	movs	r3, #10
    4e48:	18fb      	adds	r3, r7, r3
    4e4a:	881b      	ldrh	r3, [r3, #0]
    4e4c:	18d2      	adds	r2, r2, r3
    4e4e:	693b      	ldr	r3, [r7, #16]
    4e50:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    4e52:	693b      	ldr	r3, [r7, #16]
    4e54:	68da      	ldr	r2, [r3, #12]
    4e56:	693b      	ldr	r3, [r7, #16]
    4e58:	689b      	ldr	r3, [r3, #8]
    4e5a:	429a      	cmp	r2, r3
    4e5c:	d058      	beq.n	4f10 <udd_ep_trans_in_next+0x118>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4e5e:	693b      	ldr	r3, [r7, #16]
    4e60:	689b      	ldr	r3, [r3, #8]
    4e62:	b299      	uxth	r1, r3
    4e64:	693b      	ldr	r3, [r7, #16]
    4e66:	68db      	ldr	r3, [r3, #12]
    4e68:	b29a      	uxth	r2, r3
    4e6a:	231e      	movs	r3, #30
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	1a8a      	subs	r2, r1, r2
    4e70:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4e72:	231e      	movs	r3, #30
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	881b      	ldrh	r3, [r3, #0]
    4e78:	4a3f      	ldr	r2, [pc, #252]	; (4f78 <udd_ep_trans_in_next+0x180>)
    4e7a:	4293      	cmp	r3, r2
    4e7c:	d90e      	bls.n	4e9c <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    4e7e:	230c      	movs	r3, #12
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	881a      	ldrh	r2, [r3, #0]
    4e84:	493c      	ldr	r1, [pc, #240]	; (4f78 <udd_ep_trans_in_next+0x180>)
    4e86:	4b3d      	ldr	r3, [pc, #244]	; (4f7c <udd_ep_trans_in_next+0x184>)
    4e88:	1c08      	adds	r0, r1, #0
    4e8a:	1c11      	adds	r1, r2, #0
    4e8c:	4798      	blx	r3
    4e8e:	1c0b      	adds	r3, r1, #0
    4e90:	b29a      	uxth	r2, r3
    4e92:	231e      	movs	r3, #30
    4e94:	18fb      	adds	r3, r7, r3
    4e96:	4938      	ldr	r1, [pc, #224]	; (4f78 <udd_ep_trans_in_next+0x180>)
    4e98:	1a8a      	subs	r2, r1, r2
    4e9a:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    4e9c:	693b      	ldr	r3, [r7, #16]
    4e9e:	7c9b      	ldrb	r3, [r3, #18]
    4ea0:	2202      	movs	r2, #2
    4ea2:	4013      	ands	r3, r2
    4ea4:	b2db      	uxtb	r3, r3
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d00f      	beq.n	4eca <udd_ep_trans_in_next+0xd2>
    4eaa:	231e      	movs	r3, #30
    4eac:	18fa      	adds	r2, r7, r3
    4eae:	230c      	movs	r3, #12
    4eb0:	18fb      	adds	r3, r7, r3
    4eb2:	8811      	ldrh	r1, [r2, #0]
    4eb4:	881a      	ldrh	r2, [r3, #0]
    4eb6:	4b32      	ldr	r3, [pc, #200]	; (4f80 <udd_ep_trans_in_next+0x188>)
    4eb8:	1c08      	adds	r0, r1, #0
    4eba:	1c11      	adds	r1, r2, #0
    4ebc:	4798      	blx	r3
    4ebe:	1c0b      	adds	r3, r1, #0
    4ec0:	b29b      	uxth	r3, r3
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d101      	bne.n	4eca <udd_ep_trans_in_next+0xd2>
    4ec6:	2301      	movs	r3, #1
    4ec8:	e000      	b.n	4ecc <udd_ep_trans_in_next+0xd4>
    4eca:	2300      	movs	r3, #0
    4ecc:	b2db      	uxtb	r3, r3
    4ece:	1c1a      	adds	r2, r3, #0
    4ed0:	2301      	movs	r3, #1
    4ed2:	4013      	ands	r3, r2
    4ed4:	b2da      	uxtb	r2, r3
    4ed6:	693b      	ldr	r3, [r7, #16]
    4ed8:	2101      	movs	r1, #1
    4eda:	400a      	ands	r2, r1
    4edc:	1890      	adds	r0, r2, r2
    4ede:	7c9a      	ldrb	r2, [r3, #18]
    4ee0:	2102      	movs	r1, #2
    4ee2:	438a      	bics	r2, r1
    4ee4:	1c11      	adds	r1, r2, #0
    4ee6:	1c02      	adds	r2, r0, #0
    4ee8:	430a      	orrs	r2, r1
    4eea:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4eec:	693b      	ldr	r3, [r7, #16]
    4eee:	685a      	ldr	r2, [r3, #4]
    4ef0:	693b      	ldr	r3, [r7, #16]
    4ef2:	68db      	ldr	r3, [r3, #12]
    4ef4:	18d2      	adds	r2, r2, r3
    4ef6:	231e      	movs	r3, #30
    4ef8:	18fb      	adds	r3, r7, r3
    4efa:	881c      	ldrh	r4, [r3, #0]
    4efc:	4921      	ldr	r1, [pc, #132]	; (4f84 <udd_ep_trans_in_next+0x18c>)
    4efe:	230f      	movs	r3, #15
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	1c08      	adds	r0, r1, #0
    4f06:	1c19      	adds	r1, r3, #0
    4f08:	1c23      	adds	r3, r4, #0
    4f0a:	4c1f      	ldr	r4, [pc, #124]	; (4f88 <udd_ep_trans_in_next+0x190>)
    4f0c:	47a0      	blx	r4
		return;
    4f0e:	e02e      	b.n	4f6e <udd_ep_trans_in_next+0x176>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    4f10:	693b      	ldr	r3, [r7, #16]
    4f12:	7c9b      	ldrb	r3, [r3, #18]
    4f14:	2202      	movs	r2, #2
    4f16:	4013      	ands	r3, r2
    4f18:	b2db      	uxtb	r3, r3
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d013      	beq.n	4f46 <udd_ep_trans_in_next+0x14e>
		ptr_job->b_shortpacket = false;
    4f1e:	693b      	ldr	r3, [r7, #16]
    4f20:	7c9a      	ldrb	r2, [r3, #18]
    4f22:	2102      	movs	r1, #2
    4f24:	438a      	bics	r2, r1
    4f26:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    4f28:	693b      	ldr	r3, [r7, #16]
    4f2a:	685a      	ldr	r2, [r3, #4]
    4f2c:	693b      	ldr	r3, [r7, #16]
    4f2e:	68db      	ldr	r3, [r3, #12]
    4f30:	18d2      	adds	r2, r2, r3
    4f32:	4914      	ldr	r1, [pc, #80]	; (4f84 <udd_ep_trans_in_next+0x18c>)
    4f34:	230f      	movs	r3, #15
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	1c08      	adds	r0, r1, #0
    4f3c:	1c19      	adds	r1, r3, #0
    4f3e:	2300      	movs	r3, #0
    4f40:	4c11      	ldr	r4, [pc, #68]	; (4f88 <udd_ep_trans_in_next+0x190>)
    4f42:	47a0      	blx	r4
		return;
    4f44:	e013      	b.n	4f6e <udd_ep_trans_in_next+0x176>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    4f46:	693b      	ldr	r3, [r7, #16]
    4f48:	7c9a      	ldrb	r2, [r3, #18]
    4f4a:	2101      	movs	r1, #1
    4f4c:	438a      	bics	r2, r1
    4f4e:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	2b00      	cmp	r3, #0
    4f56:	d00a      	beq.n	4f6e <udd_ep_trans_in_next+0x176>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    4f58:	693b      	ldr	r3, [r7, #16]
    4f5a:	681c      	ldr	r4, [r3, #0]
    4f5c:	693b      	ldr	r3, [r7, #16]
    4f5e:	68da      	ldr	r2, [r3, #12]
    4f60:	2317      	movs	r3, #23
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2000      	movs	r0, #0
    4f68:	1c11      	adds	r1, r2, #0
    4f6a:	1c1a      	adds	r2, r3, #0
    4f6c:	47a0      	blx	r4
	}
}
    4f6e:	46bd      	mov	sp, r7
    4f70:	b009      	add	sp, #36	; 0x24
    4f72:	bd90      	pop	{r4, r7, pc}
    4f74:	00004dbd 	.word	0x00004dbd
    4f78:	00001fff 	.word	0x00001fff
    4f7c:	00008239 	.word	0x00008239
    4f80:	00008059 	.word	0x00008059
    4f84:	200002dc 	.word	0x200002dc
    4f88:	000071ed 	.word	0x000071ed

00004f8c <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    4f8c:	b5b0      	push	{r4, r5, r7, lr}
    4f8e:	b088      	sub	sp, #32
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    4f98:	2317      	movs	r3, #23
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	69ba      	ldr	r2, [r7, #24]
    4f9e:	7992      	ldrb	r2, [r2, #6]
    4fa0:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    4fa2:	2317      	movs	r3, #23
    4fa4:	18fb      	adds	r3, r7, r3
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	1c18      	adds	r0, r3, #0
    4faa:	4b6a      	ldr	r3, [pc, #424]	; (5154 <udd_ep_trans_out_next+0x1c8>)
    4fac:	4798      	blx	r3
    4fae:	1c03      	adds	r3, r0, #0
    4fb0:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    4fb2:	230f      	movs	r3, #15
    4fb4:	18fb      	adds	r3, r7, r3
    4fb6:	2217      	movs	r2, #23
    4fb8:	18ba      	adds	r2, r7, r2
    4fba:	7812      	ldrb	r2, [r2, #0]
    4fbc:	210f      	movs	r1, #15
    4fbe:	400a      	ands	r2, r1
    4fc0:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    4fc2:	230c      	movs	r3, #12
    4fc4:	18fb      	adds	r3, r7, r3
    4fc6:	693a      	ldr	r2, [r7, #16]
    4fc8:	8a12      	ldrh	r2, [r2, #16]
    4fca:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    4fcc:	230a      	movs	r3, #10
    4fce:	18fb      	adds	r3, r7, r3
    4fd0:	69ba      	ldr	r2, [r7, #24]
    4fd2:	8812      	ldrh	r2, [r2, #0]
    4fd4:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    4fd6:	693b      	ldr	r3, [r7, #16]
    4fd8:	7c9b      	ldrb	r3, [r3, #18]
    4fda:	2204      	movs	r2, #4
    4fdc:	4013      	ands	r3, r2
    4fde:	b2db      	uxtb	r3, r3
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d01a      	beq.n	501a <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    4fe4:	693b      	ldr	r3, [r7, #16]
    4fe6:	685a      	ldr	r2, [r3, #4]
    4fe8:	693b      	ldr	r3, [r7, #16]
    4fea:	68db      	ldr	r3, [r3, #12]
    4fec:	18d5      	adds	r5, r2, r3
    4fee:	230f      	movs	r3, #15
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	3b01      	subs	r3, #1
    4ff6:	019a      	lsls	r2, r3, #6
    4ff8:	4b57      	ldr	r3, [pc, #348]	; (5158 <udd_ep_trans_out_next+0x1cc>)
    4ffa:	18d4      	adds	r4, r2, r3
    4ffc:	693b      	ldr	r3, [r7, #16]
    4ffe:	6899      	ldr	r1, [r3, #8]
    5000:	230c      	movs	r3, #12
    5002:	18fb      	adds	r3, r7, r3
    5004:	881a      	ldrh	r2, [r3, #0]
    5006:	4b55      	ldr	r3, [pc, #340]	; (515c <udd_ep_trans_out_next+0x1d0>)
    5008:	1c08      	adds	r0, r1, #0
    500a:	1c11      	adds	r1, r2, #0
    500c:	4798      	blx	r3
    500e:	1c0b      	adds	r3, r1, #0
    5010:	1c28      	adds	r0, r5, #0
    5012:	1c21      	adds	r1, r4, #0
    5014:	1c1a      	adds	r2, r3, #0
    5016:	4b52      	ldr	r3, [pc, #328]	; (5160 <udd_ep_trans_out_next+0x1d4>)
    5018:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    501a:	693b      	ldr	r3, [r7, #16]
    501c:	68da      	ldr	r2, [r3, #12]
    501e:	230a      	movs	r3, #10
    5020:	18fb      	adds	r3, r7, r3
    5022:	881b      	ldrh	r3, [r3, #0]
    5024:	18d2      	adds	r2, r2, r3
    5026:	693b      	ldr	r3, [r7, #16]
    5028:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    502a:	693b      	ldr	r3, [r7, #16]
    502c:	68da      	ldr	r2, [r3, #12]
    502e:	693b      	ldr	r3, [r7, #16]
    5030:	689b      	ldr	r3, [r3, #8]
    5032:	429a      	cmp	r2, r3
    5034:	d903      	bls.n	503e <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    5036:	693b      	ldr	r3, [r7, #16]
    5038:	689a      	ldr	r2, [r3, #8]
    503a:	693b      	ldr	r3, [r7, #16]
    503c:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    503e:	69bb      	ldr	r3, [r7, #24]
    5040:	889b      	ldrh	r3, [r3, #4]
    5042:	220a      	movs	r2, #10
    5044:	18ba      	adds	r2, r7, r2
    5046:	8812      	ldrh	r2, [r2, #0]
    5048:	429a      	cmp	r2, r3
    504a:	d16b      	bne.n	5124 <udd_ep_trans_out_next+0x198>
    504c:	693b      	ldr	r3, [r7, #16]
    504e:	68da      	ldr	r2, [r3, #12]
    5050:	693b      	ldr	r3, [r7, #16]
    5052:	689b      	ldr	r3, [r3, #8]
    5054:	429a      	cmp	r2, r3
    5056:	d065      	beq.n	5124 <udd_ep_trans_out_next+0x198>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5058:	693b      	ldr	r3, [r7, #16]
    505a:	689b      	ldr	r3, [r3, #8]
    505c:	b299      	uxth	r1, r3
    505e:	693b      	ldr	r3, [r7, #16]
    5060:	68db      	ldr	r3, [r3, #12]
    5062:	b29a      	uxth	r2, r3
    5064:	231e      	movs	r3, #30
    5066:	18fb      	adds	r3, r7, r3
    5068:	1a8a      	subs	r2, r1, r2
    506a:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    506c:	231e      	movs	r3, #30
    506e:	18fb      	adds	r3, r7, r3
    5070:	881b      	ldrh	r3, [r3, #0]
    5072:	4a3c      	ldr	r2, [pc, #240]	; (5164 <udd_ep_trans_out_next+0x1d8>)
    5074:	4293      	cmp	r3, r2
    5076:	d90f      	bls.n	5098 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    5078:	230c      	movs	r3, #12
    507a:	18fb      	adds	r3, r7, r3
    507c:	881a      	ldrh	r2, [r3, #0]
    507e:	4939      	ldr	r1, [pc, #228]	; (5164 <udd_ep_trans_out_next+0x1d8>)
    5080:	4b39      	ldr	r3, [pc, #228]	; (5168 <udd_ep_trans_out_next+0x1dc>)
    5082:	1c08      	adds	r0, r1, #0
    5084:	1c11      	adds	r1, r2, #0
    5086:	4798      	blx	r3
    5088:	1c0b      	adds	r3, r1, #0
    508a:	b29a      	uxth	r2, r3
    508c:	231e      	movs	r3, #30
    508e:	18fb      	adds	r3, r7, r3
    5090:	4934      	ldr	r1, [pc, #208]	; (5164 <udd_ep_trans_out_next+0x1d8>)
    5092:	1a8a      	subs	r2, r1, r2
    5094:	801a      	strh	r2, [r3, #0]
    5096:	e012      	b.n	50be <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    5098:	231e      	movs	r3, #30
    509a:	18fa      	adds	r2, r7, r3
    509c:	230c      	movs	r3, #12
    509e:	18fb      	adds	r3, r7, r3
    50a0:	8811      	ldrh	r1, [r2, #0]
    50a2:	881a      	ldrh	r2, [r3, #0]
    50a4:	4b2d      	ldr	r3, [pc, #180]	; (515c <udd_ep_trans_out_next+0x1d0>)
    50a6:	1c08      	adds	r0, r1, #0
    50a8:	1c11      	adds	r1, r2, #0
    50aa:	4798      	blx	r3
    50ac:	1c0b      	adds	r3, r1, #0
    50ae:	b29a      	uxth	r2, r3
    50b0:	231e      	movs	r3, #30
    50b2:	18fb      	adds	r3, r7, r3
    50b4:	211e      	movs	r1, #30
    50b6:	1879      	adds	r1, r7, r1
    50b8:	8809      	ldrh	r1, [r1, #0]
    50ba:	1a8a      	subs	r2, r1, r2
    50bc:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    50be:	231e      	movs	r3, #30
    50c0:	18fa      	adds	r2, r7, r3
    50c2:	230c      	movs	r3, #12
    50c4:	18fb      	adds	r3, r7, r3
    50c6:	8812      	ldrh	r2, [r2, #0]
    50c8:	881b      	ldrh	r3, [r3, #0]
    50ca:	429a      	cmp	r2, r3
    50cc:	d218      	bcs.n	5100 <udd_ep_trans_out_next+0x174>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    50ce:	693b      	ldr	r3, [r7, #16]
    50d0:	7c9a      	ldrb	r2, [r3, #18]
    50d2:	2104      	movs	r1, #4
    50d4:	430a      	orrs	r2, r1
    50d6:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    50d8:	230f      	movs	r3, #15
    50da:	18fb      	adds	r3, r7, r3
    50dc:	781b      	ldrb	r3, [r3, #0]
    50de:	3b01      	subs	r3, #1
    50e0:	019a      	lsls	r2, r3, #6
    50e2:	4b1d      	ldr	r3, [pc, #116]	; (5158 <udd_ep_trans_out_next+0x1cc>)
    50e4:	18d2      	adds	r2, r2, r3
    50e6:	230c      	movs	r3, #12
    50e8:	18fb      	adds	r3, r7, r3
    50ea:	881c      	ldrh	r4, [r3, #0]
    50ec:	491f      	ldr	r1, [pc, #124]	; (516c <udd_ep_trans_out_next+0x1e0>)
    50ee:	230f      	movs	r3, #15
    50f0:	18fb      	adds	r3, r7, r3
    50f2:	781b      	ldrb	r3, [r3, #0]
    50f4:	1c08      	adds	r0, r1, #0
    50f6:	1c19      	adds	r1, r3, #0
    50f8:	1c23      	adds	r3, r4, #0
    50fa:	4c1d      	ldr	r4, [pc, #116]	; (5170 <udd_ep_trans_out_next+0x1e4>)
    50fc:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    50fe:	e025      	b.n	514c <udd_ep_trans_out_next+0x1c0>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5100:	693b      	ldr	r3, [r7, #16]
    5102:	685a      	ldr	r2, [r3, #4]
    5104:	693b      	ldr	r3, [r7, #16]
    5106:	68db      	ldr	r3, [r3, #12]
    5108:	18d2      	adds	r2, r2, r3
    510a:	231e      	movs	r3, #30
    510c:	18fb      	adds	r3, r7, r3
    510e:	881c      	ldrh	r4, [r3, #0]
    5110:	4916      	ldr	r1, [pc, #88]	; (516c <udd_ep_trans_out_next+0x1e0>)
    5112:	230f      	movs	r3, #15
    5114:	18fb      	adds	r3, r7, r3
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	1c08      	adds	r0, r1, #0
    511a:	1c19      	adds	r1, r3, #0
    511c:	1c23      	adds	r3, r4, #0
    511e:	4c14      	ldr	r4, [pc, #80]	; (5170 <udd_ep_trans_out_next+0x1e4>)
    5120:	47a0      	blx	r4
		}
		return;
    5122:	e013      	b.n	514c <udd_ep_trans_out_next+0x1c0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    5124:	693b      	ldr	r3, [r7, #16]
    5126:	7c9a      	ldrb	r2, [r3, #18]
    5128:	2101      	movs	r1, #1
    512a:	438a      	bics	r2, r1
    512c:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    512e:	693b      	ldr	r3, [r7, #16]
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	2b00      	cmp	r3, #0
    5134:	d00a      	beq.n	514c <udd_ep_trans_out_next+0x1c0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    5136:	693b      	ldr	r3, [r7, #16]
    5138:	681c      	ldr	r4, [r3, #0]
    513a:	693b      	ldr	r3, [r7, #16]
    513c:	68da      	ldr	r2, [r3, #12]
    513e:	2317      	movs	r3, #23
    5140:	18fb      	adds	r3, r7, r3
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2000      	movs	r0, #0
    5146:	1c11      	adds	r1, r2, #0
    5148:	1c1a      	adds	r2, r3, #0
    514a:	47a0      	blx	r4
	}
}
    514c:	46bd      	mov	sp, r7
    514e:	b008      	add	sp, #32
    5150:	bdb0      	pop	{r4, r5, r7, pc}
    5152:	46c0      	nop			; (mov r8, r8)
    5154:	00004dbd 	.word	0x00004dbd
    5158:	2000029c 	.word	0x2000029c
    515c:	00008059 	.word	0x00008059
    5160:	000082dd 	.word	0x000082dd
    5164:	00001fff 	.word	0x00001fff
    5168:	00008239 	.word	0x00008239
    516c:	200002dc 	.word	0x200002dc
    5170:	000072a5 	.word	0x000072a5

00005174 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    5174:	b580      	push	{r7, lr}
    5176:	b084      	sub	sp, #16
    5178:	af00      	add	r7, sp, #0
    517a:	6078      	str	r0, [r7, #4]
    517c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    517e:	683b      	ldr	r3, [r7, #0]
    5180:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5182:	230b      	movs	r3, #11
    5184:	18fb      	adds	r3, r7, r3
    5186:	68fa      	ldr	r2, [r7, #12]
    5188:	7992      	ldrb	r2, [r2, #6]
    518a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    518c:	230b      	movs	r3, #11
    518e:	18fb      	adds	r3, r7, r3
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	b25b      	sxtb	r3, r3
    5194:	2b00      	cmp	r3, #0
    5196:	da04      	bge.n	51a2 <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    5198:	683b      	ldr	r3, [r7, #0]
    519a:	1c18      	adds	r0, r3, #0
    519c:	4b04      	ldr	r3, [pc, #16]	; (51b0 <udd_ep_transfer_process+0x3c>)
    519e:	4798      	blx	r3
    51a0:	e003      	b.n	51aa <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    51a2:	683b      	ldr	r3, [r7, #0]
    51a4:	1c18      	adds	r0, r3, #0
    51a6:	4b03      	ldr	r3, [pc, #12]	; (51b4 <udd_ep_transfer_process+0x40>)
    51a8:	4798      	blx	r3
	}
}
    51aa:	46bd      	mov	sp, r7
    51ac:	b004      	add	sp, #16
    51ae:	bd80      	pop	{r7, pc}
    51b0:	00004df9 	.word	0x00004df9
    51b4:	00004f8d 	.word	0x00004f8d

000051b8 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    51b8:	b590      	push	{r4, r7, lr}
    51ba:	b085      	sub	sp, #20
    51bc:	af00      	add	r7, sp, #0
    51be:	1c02      	adds	r2, r0, #0
    51c0:	1dfb      	adds	r3, r7, #7
    51c2:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    51c4:	4a15      	ldr	r2, [pc, #84]	; (521c <udd_ep_abort+0x64>)
    51c6:	1dfb      	adds	r3, r7, #7
    51c8:	781b      	ldrb	r3, [r3, #0]
    51ca:	1c10      	adds	r0, r2, #0
    51cc:	1c19      	adds	r1, r3, #0
    51ce:	4b14      	ldr	r3, [pc, #80]	; (5220 <udd_ep_abort+0x68>)
    51d0:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    51d2:	1dfb      	adds	r3, r7, #7
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	1c18      	adds	r0, r3, #0
    51d8:	4b12      	ldr	r3, [pc, #72]	; (5224 <udd_ep_abort+0x6c>)
    51da:	4798      	blx	r3
    51dc:	1c03      	adds	r3, r0, #0
    51de:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    51e0:	68fb      	ldr	r3, [r7, #12]
    51e2:	7c9b      	ldrb	r3, [r3, #18]
    51e4:	2201      	movs	r2, #1
    51e6:	4013      	ands	r3, r2
    51e8:	b2db      	uxtb	r3, r3
    51ea:	2b00      	cmp	r3, #0
    51ec:	d100      	bne.n	51f0 <udd_ep_abort+0x38>
		return;
    51ee:	e012      	b.n	5216 <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	7c9a      	ldrb	r2, [r3, #18]
    51f4:	2101      	movs	r1, #1
    51f6:	438a      	bics	r2, r1
    51f8:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    51fa:	68fb      	ldr	r3, [r7, #12]
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	2b00      	cmp	r3, #0
    5200:	d009      	beq.n	5216 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    5202:	68fb      	ldr	r3, [r7, #12]
    5204:	681c      	ldr	r4, [r3, #0]
    5206:	68fb      	ldr	r3, [r7, #12]
    5208:	68da      	ldr	r2, [r3, #12]
    520a:	1dfb      	adds	r3, r7, #7
    520c:	781b      	ldrb	r3, [r3, #0]
    520e:	2001      	movs	r0, #1
    5210:	1c11      	adds	r1, r2, #0
    5212:	1c1a      	adds	r2, r3, #0
    5214:	47a0      	blx	r4
	}
}
    5216:	46bd      	mov	sp, r7
    5218:	b005      	add	sp, #20
    521a:	bd90      	pop	{r4, r7, pc}
    521c:	200002dc 	.word	0x200002dc
    5220:	00006f8d 	.word	0x00006f8d
    5224:	00004dbd 	.word	0x00004dbd

00005228 <udd_get_frame_number>:
	return false;
#endif
}

uint16_t udd_get_frame_number(void)
{
    5228:	b580      	push	{r7, lr}
    522a:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    522c:	4b03      	ldr	r3, [pc, #12]	; (523c <udd_get_frame_number+0x14>)
    522e:	1c18      	adds	r0, r3, #0
    5230:	4b03      	ldr	r3, [pc, #12]	; (5240 <udd_get_frame_number+0x18>)
    5232:	4798      	blx	r3
    5234:	1c03      	adds	r3, r0, #0
}
    5236:	1c18      	adds	r0, r3, #0
    5238:	46bd      	mov	sp, r7
    523a:	bd80      	pop	{r7, pc}
    523c:	200002dc 	.word	0x200002dc
    5240:	00004b81 	.word	0x00004b81

00005244 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    5244:	b580      	push	{r7, lr}
    5246:	b084      	sub	sp, #16
    5248:	af00      	add	r7, sp, #0
    524a:	1c02      	adds	r2, r0, #0
    524c:	1dfb      	adds	r3, r7, #7
    524e:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    5250:	2308      	movs	r3, #8
    5252:	18fb      	adds	r3, r7, r3
    5254:	1c18      	adds	r0, r3, #0
    5256:	4b19      	ldr	r3, [pc, #100]	; (52bc <udd_ep_free+0x78>)
    5258:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    525a:	230f      	movs	r3, #15
    525c:	18fb      	adds	r3, r7, r3
    525e:	1dfa      	adds	r2, r7, #7
    5260:	7812      	ldrb	r2, [r2, #0]
    5262:	210f      	movs	r1, #15
    5264:	400a      	ands	r2, r1
    5266:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    5268:	1dfb      	adds	r3, r7, #7
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	1c18      	adds	r0, r3, #0
    526e:	4b14      	ldr	r3, [pc, #80]	; (52c0 <udd_ep_free+0x7c>)
    5270:	4798      	blx	r3

	config_ep.ep_address = ep;
    5272:	2308      	movs	r3, #8
    5274:	18fb      	adds	r3, r7, r3
    5276:	1dfa      	adds	r2, r7, #7
    5278:	7812      	ldrb	r2, [r2, #0]
    527a:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    527c:	2308      	movs	r3, #8
    527e:	18fb      	adds	r3, r7, r3
    5280:	2200      	movs	r2, #0
    5282:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    5284:	4a0f      	ldr	r2, [pc, #60]	; (52c4 <udd_ep_free+0x80>)
    5286:	2308      	movs	r3, #8
    5288:	18fb      	adds	r3, r7, r3
    528a:	1c10      	adds	r0, r2, #0
    528c:	1c19      	adds	r1, r3, #0
    528e:	4b0e      	ldr	r3, [pc, #56]	; (52c8 <udd_ep_free+0x84>)
    5290:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5292:	4a0c      	ldr	r2, [pc, #48]	; (52c4 <udd_ep_free+0x80>)
    5294:	230f      	movs	r3, #15
    5296:	18fb      	adds	r3, r7, r3
    5298:	781b      	ldrb	r3, [r3, #0]
    529a:	1c10      	adds	r0, r2, #0
    529c:	1c19      	adds	r1, r3, #0
    529e:	2200      	movs	r2, #0
    52a0:	4b0a      	ldr	r3, [pc, #40]	; (52cc <udd_ep_free+0x88>)
    52a2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    52a4:	4a07      	ldr	r2, [pc, #28]	; (52c4 <udd_ep_free+0x80>)
    52a6:	1dfb      	adds	r3, r7, #7
    52a8:	781b      	ldrb	r3, [r3, #0]
    52aa:	1c10      	adds	r0, r2, #0
    52ac:	1c19      	adds	r1, r3, #0
    52ae:	2200      	movs	r2, #0
    52b0:	4b07      	ldr	r3, [pc, #28]	; (52d0 <udd_ep_free+0x8c>)
    52b2:	4798      	blx	r3
}
    52b4:	46bd      	mov	sp, r7
    52b6:	b004      	add	sp, #16
    52b8:	bd80      	pop	{r7, pc}
    52ba:	46c0      	nop			; (mov r8, r8)
    52bc:	00006a89 	.word	0x00006a89
    52c0:	000051b9 	.word	0x000051b9
    52c4:	200002dc 	.word	0x200002dc
    52c8:	00006ab1 	.word	0x00006ab1
    52cc:	000066cd 	.word	0x000066cd
    52d0:	000068e1 	.word	0x000068e1

000052d4 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    52d4:	b590      	push	{r4, r7, lr}
    52d6:	b087      	sub	sp, #28
    52d8:	af00      	add	r7, sp, #0
    52da:	1c04      	adds	r4, r0, #0
    52dc:	1c08      	adds	r0, r1, #0
    52de:	1c11      	adds	r1, r2, #0
    52e0:	1dfb      	adds	r3, r7, #7
    52e2:	1c22      	adds	r2, r4, #0
    52e4:	701a      	strb	r2, [r3, #0]
    52e6:	1dbb      	adds	r3, r7, #6
    52e8:	1c02      	adds	r2, r0, #0
    52ea:	701a      	strb	r2, [r3, #0]
    52ec:	1d3b      	adds	r3, r7, #4
    52ee:	1c0a      	adds	r2, r1, #0
    52f0:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    52f2:	230c      	movs	r3, #12
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	1c18      	adds	r0, r3, #0
    52f8:	4b5a      	ldr	r3, [pc, #360]	; (5464 <udd_ep_alloc+0x190>)
    52fa:	4798      	blx	r3

	config_ep.ep_address = ep;
    52fc:	230c      	movs	r3, #12
    52fe:	18fb      	adds	r3, r7, r3
    5300:	1dfa      	adds	r2, r7, #7
    5302:	7812      	ldrb	r2, [r2, #0]
    5304:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    5306:	1d3b      	adds	r3, r7, #4
    5308:	881b      	ldrh	r3, [r3, #0]
    530a:	2b08      	cmp	r3, #8
    530c:	d804      	bhi.n	5318 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    530e:	230c      	movs	r3, #12
    5310:	18fb      	adds	r3, r7, r3
    5312:	2200      	movs	r2, #0
    5314:	705a      	strb	r2, [r3, #1]
    5316:	e045      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    5318:	1d3b      	adds	r3, r7, #4
    531a:	881b      	ldrh	r3, [r3, #0]
    531c:	2b10      	cmp	r3, #16
    531e:	d804      	bhi.n	532a <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    5320:	230c      	movs	r3, #12
    5322:	18fb      	adds	r3, r7, r3
    5324:	2201      	movs	r2, #1
    5326:	705a      	strb	r2, [r3, #1]
    5328:	e03c      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    532a:	1d3b      	adds	r3, r7, #4
    532c:	881b      	ldrh	r3, [r3, #0]
    532e:	2b20      	cmp	r3, #32
    5330:	d804      	bhi.n	533c <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    5332:	230c      	movs	r3, #12
    5334:	18fb      	adds	r3, r7, r3
    5336:	2202      	movs	r2, #2
    5338:	705a      	strb	r2, [r3, #1]
    533a:	e033      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    533c:	1d3b      	adds	r3, r7, #4
    533e:	881b      	ldrh	r3, [r3, #0]
    5340:	2b40      	cmp	r3, #64	; 0x40
    5342:	d804      	bhi.n	534e <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5344:	230c      	movs	r3, #12
    5346:	18fb      	adds	r3, r7, r3
    5348:	2203      	movs	r2, #3
    534a:	705a      	strb	r2, [r3, #1]
    534c:	e02a      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    534e:	1d3b      	adds	r3, r7, #4
    5350:	881b      	ldrh	r3, [r3, #0]
    5352:	2b80      	cmp	r3, #128	; 0x80
    5354:	d804      	bhi.n	5360 <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5356:	230c      	movs	r3, #12
    5358:	18fb      	adds	r3, r7, r3
    535a:	2204      	movs	r2, #4
    535c:	705a      	strb	r2, [r3, #1]
    535e:	e021      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    5360:	1d3b      	adds	r3, r7, #4
    5362:	881a      	ldrh	r2, [r3, #0]
    5364:	2380      	movs	r3, #128	; 0x80
    5366:	005b      	lsls	r3, r3, #1
    5368:	429a      	cmp	r2, r3
    536a:	d804      	bhi.n	5376 <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    536c:	230c      	movs	r3, #12
    536e:	18fb      	adds	r3, r7, r3
    5370:	2205      	movs	r2, #5
    5372:	705a      	strb	r2, [r3, #1]
    5374:	e016      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    5376:	1d3b      	adds	r3, r7, #4
    5378:	881a      	ldrh	r2, [r3, #0]
    537a:	2380      	movs	r3, #128	; 0x80
    537c:	009b      	lsls	r3, r3, #2
    537e:	429a      	cmp	r2, r3
    5380:	d804      	bhi.n	538c <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    5382:	230c      	movs	r3, #12
    5384:	18fb      	adds	r3, r7, r3
    5386:	2206      	movs	r2, #6
    5388:	705a      	strb	r2, [r3, #1]
    538a:	e00b      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    538c:	1d3b      	adds	r3, r7, #4
    538e:	881b      	ldrh	r3, [r3, #0]
    5390:	4a35      	ldr	r2, [pc, #212]	; (5468 <udd_ep_alloc+0x194>)
    5392:	4293      	cmp	r3, r2
    5394:	d804      	bhi.n	53a0 <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5396:	230c      	movs	r3, #12
    5398:	18fb      	adds	r3, r7, r3
    539a:	2207      	movs	r2, #7
    539c:	705a      	strb	r2, [r3, #1]
    539e:	e001      	b.n	53a4 <udd_ep_alloc+0xd0>
	} else {
		return false;
    53a0:	2300      	movs	r3, #0
    53a2:	e05a      	b.n	545a <udd_ep_alloc+0x186>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    53a4:	1dfb      	adds	r3, r7, #7
    53a6:	781b      	ldrb	r3, [r3, #0]
    53a8:	1c18      	adds	r0, r3, #0
    53aa:	4b30      	ldr	r3, [pc, #192]	; (546c <udd_ep_alloc+0x198>)
    53ac:	4798      	blx	r3
    53ae:	1c03      	adds	r3, r0, #0
    53b0:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    53b2:	697b      	ldr	r3, [r7, #20]
    53b4:	1d3a      	adds	r2, r7, #4
    53b6:	8812      	ldrh	r2, [r2, #0]
    53b8:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    53ba:	1dbb      	adds	r3, r7, #6
    53bc:	1dba      	adds	r2, r7, #6
    53be:	7812      	ldrb	r2, [r2, #0]
    53c0:	2103      	movs	r1, #3
    53c2:	400a      	ands	r2, r1
    53c4:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    53c6:	1dbb      	adds	r3, r7, #6
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	2b01      	cmp	r3, #1
    53cc:	d104      	bne.n	53d8 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    53ce:	230c      	movs	r3, #12
    53d0:	18fb      	adds	r3, r7, r3
    53d2:	2202      	movs	r2, #2
    53d4:	70da      	strb	r2, [r3, #3]
    53d6:	e013      	b.n	5400 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    53d8:	1dbb      	adds	r3, r7, #6
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	2b02      	cmp	r3, #2
    53de:	d104      	bne.n	53ea <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    53e0:	230c      	movs	r3, #12
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	2203      	movs	r2, #3
    53e6:	70da      	strb	r2, [r3, #3]
    53e8:	e00a      	b.n	5400 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    53ea:	1dbb      	adds	r3, r7, #6
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b03      	cmp	r3, #3
    53f0:	d104      	bne.n	53fc <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    53f2:	230c      	movs	r3, #12
    53f4:	18fb      	adds	r3, r7, r3
    53f6:	2204      	movs	r2, #4
    53f8:	70da      	strb	r2, [r3, #3]
    53fa:	e001      	b.n	5400 <udd_ep_alloc+0x12c>
	} else {
		return false;
    53fc:	2300      	movs	r3, #0
    53fe:	e02c      	b.n	545a <udd_ep_alloc+0x186>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5400:	2313      	movs	r3, #19
    5402:	18fb      	adds	r3, r7, r3
    5404:	1dfa      	adds	r2, r7, #7
    5406:	7812      	ldrb	r2, [r2, #0]
    5408:	210f      	movs	r1, #15
    540a:	400a      	ands	r2, r1
    540c:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    540e:	4a18      	ldr	r2, [pc, #96]	; (5470 <udd_ep_alloc+0x19c>)
    5410:	230c      	movs	r3, #12
    5412:	18fb      	adds	r3, r7, r3
    5414:	1c10      	adds	r0, r2, #0
    5416:	1c19      	adds	r1, r3, #0
    5418:	4b16      	ldr	r3, [pc, #88]	; (5474 <udd_ep_alloc+0x1a0>)
    541a:	4798      	blx	r3
    541c:	1e03      	subs	r3, r0, #0
    541e:	d001      	beq.n	5424 <udd_ep_alloc+0x150>
		return false;
    5420:	2300      	movs	r3, #0
    5422:	e01a      	b.n	545a <udd_ep_alloc+0x186>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    5424:	4912      	ldr	r1, [pc, #72]	; (5470 <udd_ep_alloc+0x19c>)
    5426:	2313      	movs	r3, #19
    5428:	18fb      	adds	r3, r7, r3
    542a:	781a      	ldrb	r2, [r3, #0]
    542c:	4b12      	ldr	r3, [pc, #72]	; (5478 <udd_ep_alloc+0x1a4>)
    542e:	1c08      	adds	r0, r1, #0
    5430:	1c11      	adds	r1, r2, #0
    5432:	2200      	movs	r2, #0
    5434:	4c11      	ldr	r4, [pc, #68]	; (547c <udd_ep_alloc+0x1a8>)
    5436:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5438:	4a0d      	ldr	r2, [pc, #52]	; (5470 <udd_ep_alloc+0x19c>)
    543a:	1dfb      	adds	r3, r7, #7
    543c:	781b      	ldrb	r3, [r3, #0]
    543e:	1c10      	adds	r0, r2, #0
    5440:	1c19      	adds	r1, r3, #0
    5442:	2200      	movs	r2, #0
    5444:	4b0e      	ldr	r3, [pc, #56]	; (5480 <udd_ep_alloc+0x1ac>)
    5446:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5448:	4a09      	ldr	r2, [pc, #36]	; (5470 <udd_ep_alloc+0x19c>)
    544a:	1dfb      	adds	r3, r7, #7
    544c:	781b      	ldrb	r3, [r3, #0]
    544e:	1c10      	adds	r0, r2, #0
    5450:	1c19      	adds	r1, r3, #0
    5452:	2201      	movs	r2, #1
    5454:	4b0a      	ldr	r3, [pc, #40]	; (5480 <udd_ep_alloc+0x1ac>)
    5456:	4798      	blx	r3

	return true;
    5458:	2301      	movs	r3, #1
}
    545a:	1c18      	adds	r0, r3, #0
    545c:	46bd      	mov	sp, r7
    545e:	b007      	add	sp, #28
    5460:	bd90      	pop	{r4, r7, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	00006a89 	.word	0x00006a89
    5468:	000003ff 	.word	0x000003ff
    546c:	00004dbd 	.word	0x00004dbd
    5470:	200002dc 	.word	0x200002dc
    5474:	00006ab1 	.word	0x00006ab1
    5478:	00005175 	.word	0x00005175
    547c:	00006651 	.word	0x00006651
    5480:	00006745 	.word	0x00006745

00005484 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    5484:	b580      	push	{r7, lr}
    5486:	b082      	sub	sp, #8
    5488:	af00      	add	r7, sp, #0
    548a:	1c02      	adds	r2, r0, #0
    548c:	1dfb      	adds	r3, r7, #7
    548e:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5490:	4a05      	ldr	r2, [pc, #20]	; (54a8 <udd_ep_is_halted+0x24>)
    5492:	1dfb      	adds	r3, r7, #7
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	1c10      	adds	r0, r2, #0
    5498:	1c19      	adds	r1, r3, #0
    549a:	4b04      	ldr	r3, [pc, #16]	; (54ac <udd_ep_is_halted+0x28>)
    549c:	4798      	blx	r3
    549e:	1c03      	adds	r3, r0, #0
}
    54a0:	1c18      	adds	r0, r3, #0
    54a2:	46bd      	mov	sp, r7
    54a4:	b002      	add	sp, #8
    54a6:	bd80      	pop	{r7, pc}
    54a8:	200002dc 	.word	0x200002dc
    54ac:	0000700d 	.word	0x0000700d

000054b0 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b084      	sub	sp, #16
    54b4:	af00      	add	r7, sp, #0
    54b6:	1c02      	adds	r2, r0, #0
    54b8:	1dfb      	adds	r3, r7, #7
    54ba:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    54bc:	230f      	movs	r3, #15
    54be:	18fb      	adds	r3, r7, r3
    54c0:	1dfa      	adds	r2, r7, #7
    54c2:	7812      	ldrb	r2, [r2, #0]
    54c4:	210f      	movs	r1, #15
    54c6:	400a      	ands	r2, r1
    54c8:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    54ca:	230f      	movs	r3, #15
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	781b      	ldrb	r3, [r3, #0]
    54d0:	2b01      	cmp	r3, #1
    54d2:	d901      	bls.n	54d8 <udd_ep_set_halt+0x28>
		return false;
    54d4:	2300      	movs	r3, #0
    54d6:	e00c      	b.n	54f2 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    54d8:	4a08      	ldr	r2, [pc, #32]	; (54fc <udd_ep_set_halt+0x4c>)
    54da:	1dfb      	adds	r3, r7, #7
    54dc:	781b      	ldrb	r3, [r3, #0]
    54de:	1c10      	adds	r0, r2, #0
    54e0:	1c19      	adds	r1, r3, #0
    54e2:	4b07      	ldr	r3, [pc, #28]	; (5500 <udd_ep_set_halt+0x50>)
    54e4:	4798      	blx	r3

	udd_ep_abort(ep);
    54e6:	1dfb      	adds	r3, r7, #7
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	1c18      	adds	r0, r3, #0
    54ec:	4b05      	ldr	r3, [pc, #20]	; (5504 <udd_ep_set_halt+0x54>)
    54ee:	4798      	blx	r3
	return true;
    54f0:	2301      	movs	r3, #1
}
    54f2:	1c18      	adds	r0, r3, #0
    54f4:	46bd      	mov	sp, r7
    54f6:	b004      	add	sp, #16
    54f8:	bd80      	pop	{r7, pc}
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	200002dc 	.word	0x200002dc
    5500:	0000707d 	.word	0x0000707d
    5504:	000051b9 	.word	0x000051b9

00005508 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    5508:	b580      	push	{r7, lr}
    550a:	b084      	sub	sp, #16
    550c:	af00      	add	r7, sp, #0
    550e:	1c02      	adds	r2, r0, #0
    5510:	1dfb      	adds	r3, r7, #7
    5512:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5514:	230f      	movs	r3, #15
    5516:	18fb      	adds	r3, r7, r3
    5518:	1dfa      	adds	r2, r7, #7
    551a:	7812      	ldrb	r2, [r2, #0]
    551c:	210f      	movs	r1, #15
    551e:	400a      	ands	r2, r1
    5520:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    5522:	230f      	movs	r3, #15
    5524:	18fb      	adds	r3, r7, r3
    5526:	781b      	ldrb	r3, [r3, #0]
    5528:	2b01      	cmp	r3, #1
    552a:	d901      	bls.n	5530 <udd_ep_clear_halt+0x28>
		return false;
    552c:	2300      	movs	r3, #0
    552e:	e01d      	b.n	556c <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    5530:	1dfb      	adds	r3, r7, #7
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	1c18      	adds	r0, r3, #0
    5536:	4b0f      	ldr	r3, [pc, #60]	; (5574 <udd_ep_clear_halt+0x6c>)
    5538:	4798      	blx	r3
    553a:	1c03      	adds	r3, r0, #0
    553c:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    553e:	4a0e      	ldr	r2, [pc, #56]	; (5578 <udd_ep_clear_halt+0x70>)
    5540:	1dfb      	adds	r3, r7, #7
    5542:	781b      	ldrb	r3, [r3, #0]
    5544:	1c10      	adds	r0, r2, #0
    5546:	1c19      	adds	r1, r3, #0
    5548:	4b0c      	ldr	r3, [pc, #48]	; (557c <udd_ep_clear_halt+0x74>)
    554a:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    554c:	68bb      	ldr	r3, [r7, #8]
    554e:	7c9b      	ldrb	r3, [r3, #18]
    5550:	2201      	movs	r2, #1
    5552:	4013      	ands	r3, r2
    5554:	b2db      	uxtb	r3, r3
    5556:	2b00      	cmp	r3, #0
    5558:	d007      	beq.n	556a <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    555a:	68bb      	ldr	r3, [r7, #8]
    555c:	7c9a      	ldrb	r2, [r3, #18]
    555e:	2101      	movs	r1, #1
    5560:	438a      	bics	r2, r1
    5562:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    5564:	68bb      	ldr	r3, [r7, #8]
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	4798      	blx	r3
	}

	return true;
    556a:	2301      	movs	r3, #1
}
    556c:	1c18      	adds	r0, r3, #0
    556e:	46bd      	mov	sp, r7
    5570:	b004      	add	sp, #16
    5572:	bd80      	pop	{r7, pc}
    5574:	00004dbd 	.word	0x00004dbd
    5578:	200002dc 	.word	0x200002dc
    557c:	000070d5 	.word	0x000070d5

00005580 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    5580:	b580      	push	{r7, lr}
    5582:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5584:	4b07      	ldr	r3, [pc, #28]	; (55a4 <udd_ctrl_stall_data+0x24>)
    5586:	2205      	movs	r2, #5
    5588:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    558a:	4b07      	ldr	r3, [pc, #28]	; (55a8 <udd_ctrl_stall_data+0x28>)
    558c:	1c18      	adds	r0, r3, #0
    558e:	2180      	movs	r1, #128	; 0x80
    5590:	4b06      	ldr	r3, [pc, #24]	; (55ac <udd_ctrl_stall_data+0x2c>)
    5592:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    5594:	4b04      	ldr	r3, [pc, #16]	; (55a8 <udd_ctrl_stall_data+0x28>)
    5596:	1c18      	adds	r0, r3, #0
    5598:	2100      	movs	r1, #0
    559a:	4b05      	ldr	r3, [pc, #20]	; (55b0 <udd_ctrl_stall_data+0x30>)
    559c:	4798      	blx	r3
}
    559e:	46bd      	mov	sp, r7
    55a0:	bd80      	pop	{r7, pc}
    55a2:	46c0      	nop			; (mov r8, r8)
    55a4:	20000148 	.word	0x20000148
    55a8:	200002dc 	.word	0x200002dc
    55ac:	0000707d 	.word	0x0000707d
    55b0:	000070d5 	.word	0x000070d5

000055b4 <udd_set_address>:
		}
	}
}

void udd_set_address(uint8_t address)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	b082      	sub	sp, #8
    55b8:	af00      	add	r7, sp, #0
    55ba:	1c02      	adds	r2, r0, #0
    55bc:	1dfb      	adds	r3, r7, #7
    55be:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    55c0:	4a04      	ldr	r2, [pc, #16]	; (55d4 <udd_set_address+0x20>)
    55c2:	1dfb      	adds	r3, r7, #7
    55c4:	781b      	ldrb	r3, [r3, #0]
    55c6:	1c10      	adds	r0, r2, #0
    55c8:	1c19      	adds	r1, r3, #0
    55ca:	4b03      	ldr	r3, [pc, #12]	; (55d8 <udd_set_address+0x24>)
    55cc:	4798      	blx	r3
}
    55ce:	46bd      	mov	sp, r7
    55d0:	b002      	add	sp, #8
    55d2:	bd80      	pop	{r7, pc}
    55d4:	200002dc 	.word	0x200002dc
    55d8:	00004b59 	.word	0x00004b59

000055dc <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    55e0:	4b03      	ldr	r3, [pc, #12]	; (55f0 <udd_getaddress+0x14>)
    55e2:	1c18      	adds	r0, r3, #0
    55e4:	4b03      	ldr	r3, [pc, #12]	; (55f4 <udd_getaddress+0x18>)
    55e6:	4798      	blx	r3
    55e8:	1c03      	adds	r3, r0, #0
}
    55ea:	1c18      	adds	r0, r3, #0
    55ec:	46bd      	mov	sp, r7
    55ee:	bd80      	pop	{r7, pc}
    55f0:	200002dc 	.word	0x200002dc
    55f4:	00004b3d 	.word	0x00004b3d

000055f8 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
	uint32_t try = 5;
    55fe:	2305      	movs	r3, #5
    5600:	607b      	str	r3, [r7, #4]
	udd_wait_clock_ready();
    5602:	4b0c      	ldr	r3, [pc, #48]	; (5634 <udd_send_remotewakeup+0x3c>)
    5604:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_IDLE);
    5606:	2003      	movs	r0, #3
    5608:	4b0b      	ldr	r3, [pc, #44]	; (5638 <udd_send_remotewakeup+0x40>)
    560a:	4798      	blx	r3
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    560c:	e003      	b.n	5616 <udd_send_remotewakeup+0x1e>
		usb_device_send_remote_wake_up(&usb_device);
    560e:	4b0b      	ldr	r3, [pc, #44]	; (563c <udd_send_remotewakeup+0x44>)
    5610:	1c18      	adds	r0, r3, #0
    5612:	4b0b      	ldr	r3, [pc, #44]	; (5640 <udd_send_remotewakeup+0x48>)
    5614:	4798      	blx	r3
void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    5616:	4b09      	ldr	r3, [pc, #36]	; (563c <udd_send_remotewakeup+0x44>)
    5618:	1c18      	adds	r0, r3, #0
    561a:	4b0a      	ldr	r3, [pc, #40]	; (5644 <udd_send_remotewakeup+0x4c>)
    561c:	4798      	blx	r3
    561e:	1e03      	subs	r3, r0, #0
    5620:	2b02      	cmp	r3, #2
    5622:	d004      	beq.n	562e <udd_send_remotewakeup+0x36>
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	1e5a      	subs	r2, r3, #1
    5628:	607a      	str	r2, [r7, #4]
    562a:	2b00      	cmp	r3, #0
    562c:	d1ef      	bne.n	560e <udd_send_remotewakeup+0x16>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    562e:	46bd      	mov	sp, r7
    5630:	b002      	add	sp, #8
    5632:	bd80      	pop	{r7, pc}
    5634:	00004d01 	.word	0x00004d01
    5638:	00004d39 	.word	0x00004d39
    563c:	200002dc 	.word	0x200002dc
    5640:	00004ba1 	.word	0x00004ba1
    5644:	00004add 	.word	0x00004add

00005648 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    5648:	b580      	push	{r7, lr}
    564a:	b082      	sub	sp, #8
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
    5650:	1c0a      	adds	r2, r1, #0
    5652:	1cbb      	adds	r3, r7, #2
    5654:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    5656:	4b05      	ldr	r3, [pc, #20]	; (566c <udd_set_setup_payload+0x24>)
    5658:	687a      	ldr	r2, [r7, #4]
    565a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    565c:	4b03      	ldr	r3, [pc, #12]	; (566c <udd_set_setup_payload+0x24>)
    565e:	1cba      	adds	r2, r7, #2
    5660:	8812      	ldrh	r2, [r2, #0]
    5662:	819a      	strh	r2, [r3, #12]
}
    5664:	46bd      	mov	sp, r7
    5666:	b002      	add	sp, #8
    5668:	bd80      	pop	{r7, pc}
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	20000444 	.word	0x20000444

00005670 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    5670:	b580      	push	{r7, lr}
    5672:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    5674:	4b16      	ldr	r3, [pc, #88]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    5676:	781a      	ldrb	r2, [r3, #0]
    5678:	4b16      	ldr	r3, [pc, #88]	; (56d4 <udd_ctrl_fetch_ram+0x64>)
    567a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    567c:	4b14      	ldr	r3, [pc, #80]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    567e:	785a      	ldrb	r2, [r3, #1]
    5680:	4b14      	ldr	r3, [pc, #80]	; (56d4 <udd_ctrl_fetch_ram+0x64>)
    5682:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    5684:	4b12      	ldr	r3, [pc, #72]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    5686:	78db      	ldrb	r3, [r3, #3]
    5688:	b29b      	uxth	r3, r3
    568a:	021b      	lsls	r3, r3, #8
    568c:	b29a      	uxth	r2, r3
    568e:	4b10      	ldr	r3, [pc, #64]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    5690:	789b      	ldrb	r3, [r3, #2]
    5692:	b29b      	uxth	r3, r3
    5694:	18d3      	adds	r3, r2, r3
    5696:	b29a      	uxth	r2, r3
    5698:	4b0e      	ldr	r3, [pc, #56]	; (56d4 <udd_ctrl_fetch_ram+0x64>)
    569a:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    569c:	4b0c      	ldr	r3, [pc, #48]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    569e:	795b      	ldrb	r3, [r3, #5]
    56a0:	b29b      	uxth	r3, r3
    56a2:	021b      	lsls	r3, r3, #8
    56a4:	b29a      	uxth	r2, r3
    56a6:	4b0a      	ldr	r3, [pc, #40]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    56a8:	791b      	ldrb	r3, [r3, #4]
    56aa:	b29b      	uxth	r3, r3
    56ac:	18d3      	adds	r3, r2, r3
    56ae:	b29a      	uxth	r2, r3
    56b0:	4b08      	ldr	r3, [pc, #32]	; (56d4 <udd_ctrl_fetch_ram+0x64>)
    56b2:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    56b4:	4b06      	ldr	r3, [pc, #24]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    56b6:	79db      	ldrb	r3, [r3, #7]
    56b8:	b29b      	uxth	r3, r3
    56ba:	021b      	lsls	r3, r3, #8
    56bc:	b29a      	uxth	r2, r3
    56be:	4b04      	ldr	r3, [pc, #16]	; (56d0 <udd_ctrl_fetch_ram+0x60>)
    56c0:	799b      	ldrb	r3, [r3, #6]
    56c2:	b29b      	uxth	r3, r3
    56c4:	18d3      	adds	r3, r2, r3
    56c6:	b29a      	uxth	r2, r3
    56c8:	4b02      	ldr	r3, [pc, #8]	; (56d4 <udd_ctrl_fetch_ram+0x64>)
    56ca:	80da      	strh	r2, [r3, #6]
}
    56cc:	46bd      	mov	sp, r7
    56ce:	bd80      	pop	{r7, pc}
    56d0:	2000045c 	.word	0x2000045c
    56d4:	20000444 	.word	0x20000444

000056d8 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    56d8:	b598      	push	{r3, r4, r7, lr}
    56da:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    56dc:	4b09      	ldr	r3, [pc, #36]	; (5704 <udd_ctrl_send_zlp_in+0x2c>)
    56de:	2203      	movs	r2, #3
    56e0:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    56e2:	4a09      	ldr	r2, [pc, #36]	; (5708 <udd_ctrl_send_zlp_in+0x30>)
    56e4:	4b09      	ldr	r3, [pc, #36]	; (570c <udd_ctrl_send_zlp_in+0x34>)
    56e6:	1c10      	adds	r0, r2, #0
    56e8:	1c19      	adds	r1, r3, #0
    56ea:	4b09      	ldr	r3, [pc, #36]	; (5710 <udd_ctrl_send_zlp_in+0x38>)
    56ec:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    56ee:	4b09      	ldr	r3, [pc, #36]	; (5714 <udd_ctrl_send_zlp_in+0x3c>)
    56f0:	689b      	ldr	r3, [r3, #8]
    56f2:	4a05      	ldr	r2, [pc, #20]	; (5708 <udd_ctrl_send_zlp_in+0x30>)
    56f4:	1c10      	adds	r0, r2, #0
    56f6:	2100      	movs	r1, #0
    56f8:	1c1a      	adds	r2, r3, #0
    56fa:	2300      	movs	r3, #0
    56fc:	4c06      	ldr	r4, [pc, #24]	; (5718 <udd_ctrl_send_zlp_in+0x40>)
    56fe:	47a0      	blx	r4
}
    5700:	46bd      	mov	sp, r7
    5702:	bd98      	pop	{r3, r4, r7, pc}
    5704:	20000148 	.word	0x20000148
    5708:	200002dc 	.word	0x200002dc
    570c:	2000045c 	.word	0x2000045c
    5710:	00007351 	.word	0x00007351
    5714:	20000444 	.word	0x20000444
    5718:	000071ed 	.word	0x000071ed

0000571c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    571c:	b590      	push	{r4, r7, lr}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5722:	4b30      	ldr	r3, [pc, #192]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    5724:	8999      	ldrh	r1, [r3, #12]
    5726:	4b30      	ldr	r3, [pc, #192]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    5728:	881a      	ldrh	r2, [r3, #0]
    572a:	1dbb      	adds	r3, r7, #6
    572c:	1a8a      	subs	r2, r1, r2
    572e:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    5730:	1dbb      	adds	r3, r7, #6
    5732:	881b      	ldrh	r3, [r3, #0]
    5734:	2b00      	cmp	r3, #0
    5736:	d130      	bne.n	579a <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5738:	4b2c      	ldr	r3, [pc, #176]	; (57ec <udd_ctrl_in_sent+0xd0>)
    573a:	881a      	ldrh	r2, [r3, #0]
    573c:	4b2a      	ldr	r3, [pc, #168]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    573e:	881b      	ldrh	r3, [r3, #0]
    5740:	18d3      	adds	r3, r2, r3
    5742:	b29a      	uxth	r2, r3
    5744:	4b29      	ldr	r3, [pc, #164]	; (57ec <udd_ctrl_in_sent+0xd0>)
    5746:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    5748:	4b26      	ldr	r3, [pc, #152]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    574a:	88da      	ldrh	r2, [r3, #6]
    574c:	4b27      	ldr	r3, [pc, #156]	; (57ec <udd_ctrl_in_sent+0xd0>)
    574e:	881b      	ldrh	r3, [r3, #0]
    5750:	429a      	cmp	r2, r3
    5752:	d003      	beq.n	575c <udd_ctrl_in_sent+0x40>
    5754:	4b26      	ldr	r3, [pc, #152]	; (57f0 <udd_ctrl_in_sent+0xd4>)
    5756:	781b      	ldrb	r3, [r3, #0]
    5758:	2b00      	cmp	r3, #0
    575a:	d009      	beq.n	5770 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    575c:	4b25      	ldr	r3, [pc, #148]	; (57f4 <udd_ctrl_in_sent+0xd8>)
    575e:	2204      	movs	r2, #4
    5760:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5762:	4a25      	ldr	r2, [pc, #148]	; (57f8 <udd_ctrl_in_sent+0xdc>)
    5764:	4b25      	ldr	r3, [pc, #148]	; (57fc <udd_ctrl_in_sent+0xe0>)
    5766:	1c10      	adds	r0, r2, #0
    5768:	1c19      	adds	r1, r3, #0
    576a:	4b25      	ldr	r3, [pc, #148]	; (5800 <udd_ctrl_in_sent+0xe4>)
    576c:	4798      	blx	r3
			return;
    576e:	e036      	b.n	57de <udd_ctrl_in_sent+0xc2>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    5770:	4b1c      	ldr	r3, [pc, #112]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    5772:	695b      	ldr	r3, [r3, #20]
    5774:	2b00      	cmp	r3, #0
    5776:	d010      	beq.n	579a <udd_ctrl_in_sent+0x7e>
    5778:	4b1a      	ldr	r3, [pc, #104]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    577a:	695b      	ldr	r3, [r3, #20]
    577c:	4798      	blx	r3
    577e:	1c03      	adds	r3, r0, #0
    5780:	1c1a      	adds	r2, r3, #0
    5782:	2301      	movs	r3, #1
    5784:	4053      	eors	r3, r2
    5786:	b2db      	uxtb	r3, r3
    5788:	2b00      	cmp	r3, #0
    578a:	d106      	bne.n	579a <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    578c:	4b16      	ldr	r3, [pc, #88]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    578e:	2200      	movs	r2, #0
    5790:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    5792:	1dbb      	adds	r3, r7, #6
    5794:	4a13      	ldr	r2, [pc, #76]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    5796:	8992      	ldrh	r2, [r2, #12]
    5798:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    579a:	1dbb      	adds	r3, r7, #6
    579c:	881b      	ldrh	r3, [r3, #0]
    579e:	2b07      	cmp	r3, #7
    57a0:	d906      	bls.n	57b0 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    57a2:	1dbb      	adds	r3, r7, #6
    57a4:	2208      	movs	r2, #8
    57a6:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    57a8:	4b11      	ldr	r3, [pc, #68]	; (57f0 <udd_ctrl_in_sent+0xd4>)
    57aa:	2200      	movs	r2, #0
    57ac:	701a      	strb	r2, [r3, #0]
    57ae:	e002      	b.n	57b6 <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    57b0:	4b0f      	ldr	r3, [pc, #60]	; (57f0 <udd_ctrl_in_sent+0xd4>)
    57b2:	2201      	movs	r2, #1
    57b4:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    57b6:	4b0b      	ldr	r3, [pc, #44]	; (57e4 <udd_ctrl_in_sent+0xc8>)
    57b8:	689b      	ldr	r3, [r3, #8]
    57ba:	4a0b      	ldr	r2, [pc, #44]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    57bc:	8812      	ldrh	r2, [r2, #0]
    57be:	189a      	adds	r2, r3, r2
    57c0:	1dbb      	adds	r3, r7, #6
    57c2:	881b      	ldrh	r3, [r3, #0]
    57c4:	490c      	ldr	r1, [pc, #48]	; (57f8 <udd_ctrl_in_sent+0xdc>)
    57c6:	1c08      	adds	r0, r1, #0
    57c8:	2100      	movs	r1, #0
    57ca:	4c0e      	ldr	r4, [pc, #56]	; (5804 <udd_ctrl_in_sent+0xe8>)
    57cc:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    57ce:	4b06      	ldr	r3, [pc, #24]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    57d0:	881a      	ldrh	r2, [r3, #0]
    57d2:	1dbb      	adds	r3, r7, #6
    57d4:	881b      	ldrh	r3, [r3, #0]
    57d6:	18d3      	adds	r3, r2, r3
    57d8:	b29a      	uxth	r2, r3
    57da:	4b03      	ldr	r3, [pc, #12]	; (57e8 <udd_ctrl_in_sent+0xcc>)
    57dc:	801a      	strh	r2, [r3, #0]
}
    57de:	46bd      	mov	sp, r7
    57e0:	b003      	add	sp, #12
    57e2:	bd90      	pop	{r4, r7, pc}
    57e4:	20000444 	.word	0x20000444
    57e8:	2000014c 	.word	0x2000014c
    57ec:	2000014a 	.word	0x2000014a
    57f0:	20000179 	.word	0x20000179
    57f4:	20000148 	.word	0x20000148
    57f8:	200002dc 	.word	0x200002dc
    57fc:	2000045c 	.word	0x2000045c
    5800:	00007351 	.word	0x00007351
    5804:	000071ed 	.word	0x000071ed

00005808 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    5808:	b590      	push	{r4, r7, lr}
    580a:	b085      	sub	sp, #20
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    5814:	230e      	movs	r3, #14
    5816:	18fb      	adds	r3, r7, r3
    5818:	68ba      	ldr	r2, [r7, #8]
    581a:	8812      	ldrh	r2, [r2, #0]
    581c:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    581e:	4b47      	ldr	r3, [pc, #284]	; (593c <udd_ctrl_out_received+0x134>)
    5820:	899b      	ldrh	r3, [r3, #12]
    5822:	1c1a      	adds	r2, r3, #0
    5824:	4b46      	ldr	r3, [pc, #280]	; (5940 <udd_ctrl_out_received+0x138>)
    5826:	881b      	ldrh	r3, [r3, #0]
    5828:	1c19      	adds	r1, r3, #0
    582a:	230e      	movs	r3, #14
    582c:	18fb      	adds	r3, r7, r3
    582e:	881b      	ldrh	r3, [r3, #0]
    5830:	18cb      	adds	r3, r1, r3
    5832:	429a      	cmp	r2, r3
    5834:	da07      	bge.n	5846 <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5836:	4b41      	ldr	r3, [pc, #260]	; (593c <udd_ctrl_out_received+0x134>)
    5838:	8999      	ldrh	r1, [r3, #12]
    583a:	4b41      	ldr	r3, [pc, #260]	; (5940 <udd_ctrl_out_received+0x138>)
    583c:	881a      	ldrh	r2, [r3, #0]
    583e:	230e      	movs	r3, #14
    5840:	18fb      	adds	r3, r7, r3
    5842:	1a8a      	subs	r2, r1, r2
    5844:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    5846:	4b3d      	ldr	r3, [pc, #244]	; (593c <udd_ctrl_out_received+0x134>)
    5848:	689b      	ldr	r3, [r3, #8]
    584a:	4a3d      	ldr	r2, [pc, #244]	; (5940 <udd_ctrl_out_received+0x138>)
    584c:	8812      	ldrh	r2, [r2, #0]
    584e:	1899      	adds	r1, r3, r2
    5850:	230e      	movs	r3, #14
    5852:	18fb      	adds	r3, r7, r3
    5854:	881b      	ldrh	r3, [r3, #0]
    5856:	4a3b      	ldr	r2, [pc, #236]	; (5944 <udd_ctrl_out_received+0x13c>)
    5858:	1c08      	adds	r0, r1, #0
    585a:	1c11      	adds	r1, r2, #0
    585c:	1c1a      	adds	r2, r3, #0
    585e:	4b3a      	ldr	r3, [pc, #232]	; (5948 <udd_ctrl_out_received+0x140>)
    5860:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    5862:	4b37      	ldr	r3, [pc, #220]	; (5940 <udd_ctrl_out_received+0x138>)
    5864:	881a      	ldrh	r2, [r3, #0]
    5866:	230e      	movs	r3, #14
    5868:	18fb      	adds	r3, r7, r3
    586a:	881b      	ldrh	r3, [r3, #0]
    586c:	18d3      	adds	r3, r2, r3
    586e:	b29a      	uxth	r2, r3
    5870:	4b33      	ldr	r3, [pc, #204]	; (5940 <udd_ctrl_out_received+0x138>)
    5872:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5874:	230e      	movs	r3, #14
    5876:	18fb      	adds	r3, r7, r3
    5878:	881b      	ldrh	r3, [r3, #0]
    587a:	2b08      	cmp	r3, #8
    587c:	d10a      	bne.n	5894 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    587e:	4b2f      	ldr	r3, [pc, #188]	; (593c <udd_ctrl_out_received+0x134>)
    5880:	88db      	ldrh	r3, [r3, #6]
    5882:	1c1a      	adds	r2, r3, #0
    5884:	4b31      	ldr	r3, [pc, #196]	; (594c <udd_ctrl_out_received+0x144>)
    5886:	881b      	ldrh	r3, [r3, #0]
    5888:	1c19      	adds	r1, r3, #0
    588a:	4b2d      	ldr	r3, [pc, #180]	; (5940 <udd_ctrl_out_received+0x138>)
    588c:	881b      	ldrh	r3, [r3, #0]
    588e:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5890:	429a      	cmp	r2, r3
    5892:	dc1b      	bgt.n	58cc <udd_ctrl_out_received+0xc4>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5894:	4b2a      	ldr	r3, [pc, #168]	; (5940 <udd_ctrl_out_received+0x138>)
    5896:	881a      	ldrh	r2, [r3, #0]
    5898:	4b28      	ldr	r3, [pc, #160]	; (593c <udd_ctrl_out_received+0x134>)
    589a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    589c:	4b27      	ldr	r3, [pc, #156]	; (593c <udd_ctrl_out_received+0x134>)
    589e:	695b      	ldr	r3, [r3, #20]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d010      	beq.n	58c6 <udd_ctrl_out_received+0xbe>
			if (!udd_g_ctrlreq.over_under_run()) {
    58a4:	4b25      	ldr	r3, [pc, #148]	; (593c <udd_ctrl_out_received+0x134>)
    58a6:	695b      	ldr	r3, [r3, #20]
    58a8:	4798      	blx	r3
    58aa:	1c03      	adds	r3, r0, #0
    58ac:	1c1a      	adds	r2, r3, #0
    58ae:	2301      	movs	r3, #1
    58b0:	4053      	eors	r3, r2
    58b2:	b2db      	uxtb	r3, r3
    58b4:	2b00      	cmp	r3, #0
    58b6:	d006      	beq.n	58c6 <udd_ctrl_out_received+0xbe>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    58b8:	4b25      	ldr	r3, [pc, #148]	; (5950 <udd_ctrl_out_received+0x148>)
    58ba:	2205      	movs	r2, #5
    58bc:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    58be:	2000      	movs	r0, #0
    58c0:	4b24      	ldr	r3, [pc, #144]	; (5954 <udd_ctrl_out_received+0x14c>)
    58c2:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    58c4:	e037      	b.n	5936 <udd_ctrl_out_received+0x12e>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    58c6:	4b24      	ldr	r3, [pc, #144]	; (5958 <udd_ctrl_out_received+0x150>)
    58c8:	4798      	blx	r3
		return;
    58ca:	e034      	b.n	5936 <udd_ctrl_out_received+0x12e>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    58cc:	4b1b      	ldr	r3, [pc, #108]	; (593c <udd_ctrl_out_received+0x134>)
    58ce:	899a      	ldrh	r2, [r3, #12]
    58d0:	4b1b      	ldr	r3, [pc, #108]	; (5940 <udd_ctrl_out_received+0x138>)
    58d2:	881b      	ldrh	r3, [r3, #0]
    58d4:	429a      	cmp	r2, r3
    58d6:	d126      	bne.n	5926 <udd_ctrl_out_received+0x11e>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    58d8:	4b18      	ldr	r3, [pc, #96]	; (593c <udd_ctrl_out_received+0x134>)
    58da:	695b      	ldr	r3, [r3, #20]
    58dc:	2b00      	cmp	r3, #0
    58de:	d106      	bne.n	58ee <udd_ctrl_out_received+0xe6>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    58e0:	4b1b      	ldr	r3, [pc, #108]	; (5950 <udd_ctrl_out_received+0x148>)
    58e2:	2205      	movs	r2, #5
    58e4:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    58e6:	2000      	movs	r0, #0
    58e8:	4b1a      	ldr	r3, [pc, #104]	; (5954 <udd_ctrl_out_received+0x14c>)
    58ea:	4798      	blx	r3
			return;
    58ec:	e023      	b.n	5936 <udd_ctrl_out_received+0x12e>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    58ee:	4b13      	ldr	r3, [pc, #76]	; (593c <udd_ctrl_out_received+0x134>)
    58f0:	695b      	ldr	r3, [r3, #20]
    58f2:	4798      	blx	r3
    58f4:	1c03      	adds	r3, r0, #0
    58f6:	1c1a      	adds	r2, r3, #0
    58f8:	2301      	movs	r3, #1
    58fa:	4053      	eors	r3, r2
    58fc:	b2db      	uxtb	r3, r3
    58fe:	2b00      	cmp	r3, #0
    5900:	d006      	beq.n	5910 <udd_ctrl_out_received+0x108>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5902:	4b13      	ldr	r3, [pc, #76]	; (5950 <udd_ctrl_out_received+0x148>)
    5904:	2205      	movs	r2, #5
    5906:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    5908:	2000      	movs	r0, #0
    590a:	4b12      	ldr	r3, [pc, #72]	; (5954 <udd_ctrl_out_received+0x14c>)
    590c:	4798      	blx	r3
			return;
    590e:	e012      	b.n	5936 <udd_ctrl_out_received+0x12e>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5910:	4b0e      	ldr	r3, [pc, #56]	; (594c <udd_ctrl_out_received+0x144>)
    5912:	881a      	ldrh	r2, [r3, #0]
    5914:	4b0a      	ldr	r3, [pc, #40]	; (5940 <udd_ctrl_out_received+0x138>)
    5916:	881b      	ldrh	r3, [r3, #0]
    5918:	18d3      	adds	r3, r2, r3
    591a:	b29a      	uxth	r2, r3
    591c:	4b0b      	ldr	r3, [pc, #44]	; (594c <udd_ctrl_out_received+0x144>)
    591e:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    5920:	4b07      	ldr	r3, [pc, #28]	; (5940 <udd_ctrl_out_received+0x138>)
    5922:	2200      	movs	r2, #0
    5924:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    5926:	4a0d      	ldr	r2, [pc, #52]	; (595c <udd_ctrl_out_received+0x154>)
    5928:	4b06      	ldr	r3, [pc, #24]	; (5944 <udd_ctrl_out_received+0x13c>)
    592a:	1c10      	adds	r0, r2, #0
    592c:	2100      	movs	r1, #0
    592e:	1c1a      	adds	r2, r3, #0
    5930:	2308      	movs	r3, #8
    5932:	4c0b      	ldr	r4, [pc, #44]	; (5960 <udd_ctrl_out_received+0x158>)
    5934:	47a0      	blx	r4
}
    5936:	46bd      	mov	sp, r7
    5938:	b005      	add	sp, #20
    593a:	bd90      	pop	{r4, r7, pc}
    593c:	20000444 	.word	0x20000444
    5940:	2000014c 	.word	0x2000014c
    5944:	2000045c 	.word	0x2000045c
    5948:	000082dd 	.word	0x000082dd
    594c:	2000014a 	.word	0x2000014a
    5950:	20000148 	.word	0x20000148
    5954:	000054b1 	.word	0x000054b1
    5958:	000056d9 	.word	0x000056d9
    595c:	200002dc 	.word	0x200002dc
    5960:	000072a5 	.word	0x000072a5

00005964 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    5964:	b590      	push	{r4, r7, lr}
    5966:	b085      	sub	sp, #20
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
    596c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    596e:	683b      	ldr	r3, [r7, #0]
    5970:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    5972:	4b2c      	ldr	r3, [pc, #176]	; (5a24 <_usb_ep0_on_setup+0xc0>)
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	2b00      	cmp	r3, #0
    5978:	d009      	beq.n	598e <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    597a:	4b2b      	ldr	r3, [pc, #172]	; (5a28 <_usb_ep0_on_setup+0xc4>)
    597c:	691b      	ldr	r3, [r3, #16]
    597e:	2b00      	cmp	r3, #0
    5980:	d002      	beq.n	5988 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    5982:	4b29      	ldr	r3, [pc, #164]	; (5a28 <_usb_ep0_on_setup+0xc4>)
    5984:	691b      	ldr	r3, [r3, #16]
    5986:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    5988:	4b26      	ldr	r3, [pc, #152]	; (5a24 <_usb_ep0_on_setup+0xc0>)
    598a:	2200      	movs	r2, #0
    598c:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    598e:	68fb      	ldr	r3, [r7, #12]
    5990:	881b      	ldrh	r3, [r3, #0]
    5992:	2b08      	cmp	r3, #8
    5994:	d002      	beq.n	599c <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    5996:	4b25      	ldr	r3, [pc, #148]	; (5a2c <_usb_ep0_on_setup+0xc8>)
    5998:	4798      	blx	r3
		return;
    599a:	e03f      	b.n	5a1c <_usb_ep0_on_setup+0xb8>
	} else {
		udd_ctrl_fetch_ram();
    599c:	4b24      	ldr	r3, [pc, #144]	; (5a30 <_usb_ep0_on_setup+0xcc>)
    599e:	4798      	blx	r3
		if (false == udc_process_setup()) {
    59a0:	4b24      	ldr	r3, [pc, #144]	; (5a34 <_usb_ep0_on_setup+0xd0>)
    59a2:	4798      	blx	r3
    59a4:	1c03      	adds	r3, r0, #0
    59a6:	1c1a      	adds	r2, r3, #0
    59a8:	2301      	movs	r3, #1
    59aa:	4053      	eors	r3, r2
    59ac:	b2db      	uxtb	r3, r3
    59ae:	2b00      	cmp	r3, #0
    59b0:	d002      	beq.n	59b8 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    59b2:	4b1e      	ldr	r3, [pc, #120]	; (5a2c <_usb_ep0_on_setup+0xc8>)
    59b4:	4798      	blx	r3
			return;
    59b6:	e031      	b.n	5a1c <_usb_ep0_on_setup+0xb8>
		} else if (Udd_setup_is_in()) {
    59b8:	4b1b      	ldr	r3, [pc, #108]	; (5a28 <_usb_ep0_on_setup+0xc4>)
    59ba:	781b      	ldrb	r3, [r3, #0]
    59bc:	b2db      	uxtb	r3, r3
    59be:	b25b      	sxtb	r3, r3
    59c0:	2b00      	cmp	r3, #0
    59c2:	da13      	bge.n	59ec <_usb_ep0_on_setup+0x88>
			udd_ctrl_prev_payload_nb_trans = 0;
    59c4:	4b1c      	ldr	r3, [pc, #112]	; (5a38 <_usb_ep0_on_setup+0xd4>)
    59c6:	2200      	movs	r2, #0
    59c8:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    59ca:	4b1c      	ldr	r3, [pc, #112]	; (5a3c <_usb_ep0_on_setup+0xd8>)
    59cc:	2200      	movs	r2, #0
    59ce:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    59d0:	4b14      	ldr	r3, [pc, #80]	; (5a24 <_usb_ep0_on_setup+0xc0>)
    59d2:	2202      	movs	r2, #2
    59d4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    59d6:	4a1a      	ldr	r2, [pc, #104]	; (5a40 <_usb_ep0_on_setup+0xdc>)
    59d8:	4b1a      	ldr	r3, [pc, #104]	; (5a44 <_usb_ep0_on_setup+0xe0>)
    59da:	1c10      	adds	r0, r2, #0
    59dc:	2100      	movs	r1, #0
    59de:	1c1a      	adds	r2, r3, #0
    59e0:	2308      	movs	r3, #8
    59e2:	4c19      	ldr	r4, [pc, #100]	; (5a48 <_usb_ep0_on_setup+0xe4>)
    59e4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    59e6:	4b19      	ldr	r3, [pc, #100]	; (5a4c <_usb_ep0_on_setup+0xe8>)
    59e8:	4798      	blx	r3
    59ea:	e017      	b.n	5a1c <_usb_ep0_on_setup+0xb8>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    59ec:	4b0e      	ldr	r3, [pc, #56]	; (5a28 <_usb_ep0_on_setup+0xc4>)
    59ee:	88db      	ldrh	r3, [r3, #6]
    59f0:	2b00      	cmp	r3, #0
    59f2:	d102      	bne.n	59fa <_usb_ep0_on_setup+0x96>
				udd_ctrl_send_zlp_in();
    59f4:	4b16      	ldr	r3, [pc, #88]	; (5a50 <_usb_ep0_on_setup+0xec>)
    59f6:	4798      	blx	r3
				return;
    59f8:	e010      	b.n	5a1c <_usb_ep0_on_setup+0xb8>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    59fa:	4b0f      	ldr	r3, [pc, #60]	; (5a38 <_usb_ep0_on_setup+0xd4>)
    59fc:	2200      	movs	r2, #0
    59fe:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    5a00:	4b0e      	ldr	r3, [pc, #56]	; (5a3c <_usb_ep0_on_setup+0xd8>)
    5a02:	2200      	movs	r2, #0
    5a04:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    5a06:	4b07      	ldr	r3, [pc, #28]	; (5a24 <_usb_ep0_on_setup+0xc0>)
    5a08:	2201      	movs	r2, #1
    5a0a:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    5a0c:	4a0c      	ldr	r2, [pc, #48]	; (5a40 <_usb_ep0_on_setup+0xdc>)
    5a0e:	4b0d      	ldr	r3, [pc, #52]	; (5a44 <_usb_ep0_on_setup+0xe0>)
    5a10:	1c10      	adds	r0, r2, #0
    5a12:	2100      	movs	r1, #0
    5a14:	1c1a      	adds	r2, r3, #0
    5a16:	2308      	movs	r3, #8
    5a18:	4c0b      	ldr	r4, [pc, #44]	; (5a48 <_usb_ep0_on_setup+0xe4>)
    5a1a:	47a0      	blx	r4
			}
		}
	}
}
    5a1c:	46bd      	mov	sp, r7
    5a1e:	b005      	add	sp, #20
    5a20:	bd90      	pop	{r4, r7, pc}
    5a22:	46c0      	nop			; (mov r8, r8)
    5a24:	20000148 	.word	0x20000148
    5a28:	20000444 	.word	0x20000444
    5a2c:	00005581 	.word	0x00005581
    5a30:	00005671 	.word	0x00005671
    5a34:	0000259d 	.word	0x0000259d
    5a38:	2000014a 	.word	0x2000014a
    5a3c:	2000014c 	.word	0x2000014c
    5a40:	200002dc 	.word	0x200002dc
    5a44:	2000045c 	.word	0x2000045c
    5a48:	000072a5 	.word	0x000072a5
    5a4c:	0000571d 	.word	0x0000571d
    5a50:	000056d9 	.word	0x000056d9

00005a54 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b084      	sub	sp, #16
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5a60:	4b0a      	ldr	r3, [pc, #40]	; (5a8c <udd_ctrl_underflow+0x38>)
    5a62:	781b      	ldrb	r3, [r3, #0]
    5a64:	2b01      	cmp	r3, #1
    5a66:	d102      	bne.n	5a6e <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    5a68:	4b09      	ldr	r3, [pc, #36]	; (5a90 <udd_ctrl_underflow+0x3c>)
    5a6a:	4798      	blx	r3
    5a6c:	e00a      	b.n	5a84 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5a6e:	4b07      	ldr	r3, [pc, #28]	; (5a8c <udd_ctrl_underflow+0x38>)
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	2b04      	cmp	r3, #4
    5a74:	d106      	bne.n	5a84 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    5a76:	68fb      	ldr	r3, [r7, #12]
    5a78:	799b      	ldrb	r3, [r3, #6]
    5a7a:	4a06      	ldr	r2, [pc, #24]	; (5a94 <udd_ctrl_underflow+0x40>)
    5a7c:	1c10      	adds	r0, r2, #0
    5a7e:	1c19      	adds	r1, r3, #0
    5a80:	4b05      	ldr	r3, [pc, #20]	; (5a98 <udd_ctrl_underflow+0x44>)
    5a82:	4798      	blx	r3
	}
}
    5a84:	46bd      	mov	sp, r7
    5a86:	b004      	add	sp, #16
    5a88:	bd80      	pop	{r7, pc}
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	20000148 	.word	0x20000148
    5a90:	000056d9 	.word	0x000056d9
    5a94:	200002dc 	.word	0x200002dc
    5a98:	0000707d 	.word	0x0000707d

00005a9c <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    5a9c:	b580      	push	{r7, lr}
    5a9e:	b084      	sub	sp, #16
    5aa0:	af00      	add	r7, sp, #0
    5aa2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5aa8:	4b0a      	ldr	r3, [pc, #40]	; (5ad4 <udd_ctrl_overflow+0x38>)
    5aaa:	781b      	ldrb	r3, [r3, #0]
    5aac:	2b02      	cmp	r3, #2
    5aae:	d103      	bne.n	5ab8 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5ab0:	4b08      	ldr	r3, [pc, #32]	; (5ad4 <udd_ctrl_overflow+0x38>)
    5ab2:	2204      	movs	r2, #4
    5ab4:	701a      	strb	r2, [r3, #0]
    5ab6:	e00a      	b.n	5ace <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5ab8:	4b06      	ldr	r3, [pc, #24]	; (5ad4 <udd_ctrl_overflow+0x38>)
    5aba:	781b      	ldrb	r3, [r3, #0]
    5abc:	2b03      	cmp	r3, #3
    5abe:	d106      	bne.n	5ace <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	799b      	ldrb	r3, [r3, #6]
    5ac4:	4a04      	ldr	r2, [pc, #16]	; (5ad8 <udd_ctrl_overflow+0x3c>)
    5ac6:	1c10      	adds	r0, r2, #0
    5ac8:	1c19      	adds	r1, r3, #0
    5aca:	4b04      	ldr	r3, [pc, #16]	; (5adc <udd_ctrl_overflow+0x40>)
    5acc:	4798      	blx	r3
	}
}
    5ace:	46bd      	mov	sp, r7
    5ad0:	b004      	add	sp, #16
    5ad2:	bd80      	pop	{r7, pc}
    5ad4:	20000148 	.word	0x20000148
    5ad8:	200002dc 	.word	0x200002dc
    5adc:	0000707d 	.word	0x0000707d

00005ae0 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b084      	sub	sp, #16
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
    5ae8:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	799b      	ldrb	r3, [r3, #6]
    5af2:	b2db      	uxtb	r3, r3
    5af4:	b25b      	sxtb	r3, r3
    5af6:	2b00      	cmp	r3, #0
    5af8:	da04      	bge.n	5b04 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    5afa:	683b      	ldr	r3, [r7, #0]
    5afc:	1c18      	adds	r0, r3, #0
    5afe:	4b05      	ldr	r3, [pc, #20]	; (5b14 <_usb_ep0_on_tansfer_fail+0x34>)
    5b00:	4798      	blx	r3
    5b02:	e003      	b.n	5b0c <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    5b04:	683b      	ldr	r3, [r7, #0]
    5b06:	1c18      	adds	r0, r3, #0
    5b08:	4b03      	ldr	r3, [pc, #12]	; (5b18 <_usb_ep0_on_tansfer_fail+0x38>)
    5b0a:	4798      	blx	r3
	}
}
    5b0c:	46bd      	mov	sp, r7
    5b0e:	b004      	add	sp, #16
    5b10:	bd80      	pop	{r7, pc}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	00005a55 	.word	0x00005a55
    5b18:	00005a9d 	.word	0x00005a9d

00005b1c <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b082      	sub	sp, #8
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
    5b24:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    5b26:	4b0e      	ldr	r3, [pc, #56]	; (5b60 <_usb_ep0_on_tansfer_ok+0x44>)
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2b01      	cmp	r3, #1
    5b2c:	d104      	bne.n	5b38 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    5b2e:	683b      	ldr	r3, [r7, #0]
    5b30:	1c18      	adds	r0, r3, #0
    5b32:	4b0c      	ldr	r3, [pc, #48]	; (5b64 <_usb_ep0_on_tansfer_ok+0x48>)
    5b34:	4798      	blx	r3
    5b36:	e010      	b.n	5b5a <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    5b38:	4b09      	ldr	r3, [pc, #36]	; (5b60 <_usb_ep0_on_tansfer_ok+0x44>)
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	2b02      	cmp	r3, #2
    5b3e:	d102      	bne.n	5b46 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    5b40:	4b09      	ldr	r3, [pc, #36]	; (5b68 <_usb_ep0_on_tansfer_ok+0x4c>)
    5b42:	4798      	blx	r3
    5b44:	e009      	b.n	5b5a <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    5b46:	4b09      	ldr	r3, [pc, #36]	; (5b6c <_usb_ep0_on_tansfer_ok+0x50>)
    5b48:	691b      	ldr	r3, [r3, #16]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d002      	beq.n	5b54 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    5b4e:	4b07      	ldr	r3, [pc, #28]	; (5b6c <_usb_ep0_on_tansfer_ok+0x50>)
    5b50:	691b      	ldr	r3, [r3, #16]
    5b52:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    5b54:	4b02      	ldr	r3, [pc, #8]	; (5b60 <_usb_ep0_on_tansfer_ok+0x44>)
    5b56:	2200      	movs	r2, #0
    5b58:	701a      	strb	r2, [r3, #0]
		}
}
    5b5a:	46bd      	mov	sp, r7
    5b5c:	b002      	add	sp, #8
    5b5e:	bd80      	pop	{r7, pc}
    5b60:	20000148 	.word	0x20000148
    5b64:	00005809 	.word	0x00005809
    5b68:	0000571d 	.word	0x0000571d
    5b6c:	20000444 	.word	0x20000444

00005b70 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    5b70:	b590      	push	{r4, r7, lr}
    5b72:	b085      	sub	sp, #20
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    5b78:	230c      	movs	r3, #12
    5b7a:	18fb      	adds	r3, r7, r3
    5b7c:	1c18      	adds	r0, r3, #0
    5b7e:	4b22      	ldr	r3, [pc, #136]	; (5c08 <udd_ctrl_ep_enable+0x98>)
    5b80:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    5b82:	230c      	movs	r3, #12
    5b84:	18fb      	adds	r3, r7, r3
    5b86:	2200      	movs	r2, #0
    5b88:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    5b8a:	687a      	ldr	r2, [r7, #4]
    5b8c:	230c      	movs	r3, #12
    5b8e:	18fb      	adds	r3, r7, r3
    5b90:	1c10      	adds	r0, r2, #0
    5b92:	1c19      	adds	r1, r3, #0
    5b94:	4b1d      	ldr	r3, [pc, #116]	; (5c0c <udd_ctrl_ep_enable+0x9c>)
    5b96:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    5b98:	687a      	ldr	r2, [r7, #4]
    5b9a:	4b1d      	ldr	r3, [pc, #116]	; (5c10 <udd_ctrl_ep_enable+0xa0>)
    5b9c:	1c10      	adds	r0, r2, #0
    5b9e:	1c19      	adds	r1, r3, #0
    5ba0:	4b1c      	ldr	r3, [pc, #112]	; (5c14 <udd_ctrl_ep_enable+0xa4>)
    5ba2:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    5ba4:	687a      	ldr	r2, [r7, #4]
    5ba6:	4b1c      	ldr	r3, [pc, #112]	; (5c18 <udd_ctrl_ep_enable+0xa8>)
    5ba8:	1c10      	adds	r0, r2, #0
    5baa:	2100      	movs	r1, #0
    5bac:	2202      	movs	r2, #2
    5bae:	4c1b      	ldr	r4, [pc, #108]	; (5c1c <udd_ctrl_ep_enable+0xac>)
    5bb0:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    5bb2:	687a      	ldr	r2, [r7, #4]
    5bb4:	4b1a      	ldr	r3, [pc, #104]	; (5c20 <udd_ctrl_ep_enable+0xb0>)
    5bb6:	1c10      	adds	r0, r2, #0
    5bb8:	2100      	movs	r1, #0
    5bba:	2200      	movs	r2, #0
    5bbc:	4c17      	ldr	r4, [pc, #92]	; (5c1c <udd_ctrl_ep_enable+0xac>)
    5bbe:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    5bc0:	687a      	ldr	r2, [r7, #4]
    5bc2:	4b18      	ldr	r3, [pc, #96]	; (5c24 <udd_ctrl_ep_enable+0xb4>)
    5bc4:	1c10      	adds	r0, r2, #0
    5bc6:	2100      	movs	r1, #0
    5bc8:	2201      	movs	r2, #1
    5bca:	4c14      	ldr	r4, [pc, #80]	; (5c1c <udd_ctrl_ep_enable+0xac>)
    5bcc:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	1c18      	adds	r0, r3, #0
    5bd2:	2100      	movs	r1, #0
    5bd4:	2202      	movs	r2, #2
    5bd6:	4b14      	ldr	r3, [pc, #80]	; (5c28 <udd_ctrl_ep_enable+0xb8>)
    5bd8:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	1c18      	adds	r0, r3, #0
    5bde:	2100      	movs	r1, #0
    5be0:	2200      	movs	r2, #0
    5be2:	4b11      	ldr	r3, [pc, #68]	; (5c28 <udd_ctrl_ep_enable+0xb8>)
    5be4:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	1c18      	adds	r0, r3, #0
    5bea:	2100      	movs	r1, #0
    5bec:	2201      	movs	r2, #1
    5bee:	4b0e      	ldr	r3, [pc, #56]	; (5c28 <udd_ctrl_ep_enable+0xb8>)
    5bf0:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	1c18      	adds	r0, r3, #0
    5bf6:	2101      	movs	r1, #1
    5bf8:	4b0c      	ldr	r3, [pc, #48]	; (5c2c <udd_ctrl_ep_enable+0xbc>)
    5bfa:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    5bfc:	4b0c      	ldr	r3, [pc, #48]	; (5c30 <udd_ctrl_ep_enable+0xc0>)
    5bfe:	2200      	movs	r2, #0
    5c00:	701a      	strb	r2, [r3, #0]
}
    5c02:	46bd      	mov	sp, r7
    5c04:	b005      	add	sp, #20
    5c06:	bd90      	pop	{r4, r7, pc}
    5c08:	00006a89 	.word	0x00006a89
    5c0c:	00006ab1 	.word	0x00006ab1
    5c10:	2000045c 	.word	0x2000045c
    5c14:	00007351 	.word	0x00007351
    5c18:	00005965 	.word	0x00005965
    5c1c:	00006651 	.word	0x00006651
    5c20:	00005b1d 	.word	0x00005b1d
    5c24:	00005ae1 	.word	0x00005ae1
    5c28:	00006745 	.word	0x00006745
    5c2c:	00004bc5 	.word	0x00004bc5
    5c30:	20000148 	.word	0x20000148

00005c34 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    5c34:	b580      	push	{r7, lr}
    5c36:	b082      	sub	sp, #8
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
    5c3c:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5c3e:	4b09      	ldr	r3, [pc, #36]	; (5c64 <_usb_on_suspend+0x30>)
    5c40:	1c18      	adds	r0, r3, #0
    5c42:	2104      	movs	r1, #4
    5c44:	4b08      	ldr	r3, [pc, #32]	; (5c68 <_usb_on_suspend+0x34>)
    5c46:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5c48:	4b06      	ldr	r3, [pc, #24]	; (5c64 <_usb_on_suspend+0x30>)
    5c4a:	1c18      	adds	r0, r3, #0
    5c4c:	2102      	movs	r1, #2
    5c4e:	4b07      	ldr	r3, [pc, #28]	; (5c6c <_usb_on_suspend+0x38>)
    5c50:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    5c52:	2001      	movs	r0, #1
    5c54:	4b06      	ldr	r3, [pc, #24]	; (5c70 <_usb_on_suspend+0x3c>)
    5c56:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    5c58:	4b06      	ldr	r3, [pc, #24]	; (5c74 <_usb_on_suspend+0x40>)
    5c5a:	4798      	blx	r3
#endif
}
    5c5c:	46bd      	mov	sp, r7
    5c5e:	b002      	add	sp, #8
    5c60:	bd80      	pop	{r7, pc}
    5c62:	46c0      	nop			; (mov r8, r8)
    5c64:	200002dc 	.word	0x200002dc
    5c68:	000065f9 	.word	0x000065f9
    5c6c:	0000659d 	.word	0x0000659d
    5c70:	00004d39 	.word	0x00004d39
    5c74:	00007e7d 	.word	0x00007e7d

00005c78 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b084      	sub	sp, #16
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
    5c80:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5c86:	4b11      	ldr	r3, [pc, #68]	; (5ccc <_usb_device_lpm_suspend+0x54>)
    5c88:	1c18      	adds	r0, r3, #0
    5c8a:	2106      	movs	r1, #6
    5c8c:	4b10      	ldr	r3, [pc, #64]	; (5cd0 <_usb_device_lpm_suspend+0x58>)
    5c8e:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5c90:	4b0e      	ldr	r3, [pc, #56]	; (5ccc <_usb_device_lpm_suspend+0x54>)
    5c92:	1c18      	adds	r0, r3, #0
    5c94:	2104      	movs	r1, #4
    5c96:	4b0e      	ldr	r3, [pc, #56]	; (5cd0 <_usb_device_lpm_suspend+0x58>)
    5c98:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5c9a:	4b0c      	ldr	r3, [pc, #48]	; (5ccc <_usb_device_lpm_suspend+0x54>)
    5c9c:	1c18      	adds	r0, r3, #0
    5c9e:	2102      	movs	r1, #2
    5ca0:	4b0c      	ldr	r3, [pc, #48]	; (5cd4 <_usb_device_lpm_suspend+0x5c>)
    5ca2:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    5ca4:	2002      	movs	r0, #2
    5ca6:	4b0c      	ldr	r3, [pc, #48]	; (5cd8 <_usb_device_lpm_suspend+0x60>)
    5ca8:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    5caa:	68fb      	ldr	r3, [r7, #12]
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d001      	beq.n	5cb6 <_usb_device_lpm_suspend+0x3e>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    5cb2:	4b0a      	ldr	r3, [pc, #40]	; (5cdc <_usb_device_lpm_suspend+0x64>)
    5cb4:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    5cb6:	68fb      	ldr	r3, [r7, #12]
    5cb8:	681b      	ldr	r3, [r3, #0]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d101      	bne.n	5cc2 <_usb_device_lpm_suspend+0x4a>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    5cbe:	4b08      	ldr	r3, [pc, #32]	; (5ce0 <_usb_device_lpm_suspend+0x68>)
    5cc0:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    5cc2:	4b08      	ldr	r3, [pc, #32]	; (5ce4 <_usb_device_lpm_suspend+0x6c>)
    5cc4:	4798      	blx	r3
}
    5cc6:	46bd      	mov	sp, r7
    5cc8:	b004      	add	sp, #16
    5cca:	bd80      	pop	{r7, pc}
    5ccc:	200002dc 	.word	0x200002dc
    5cd0:	000065f9 	.word	0x000065f9
    5cd4:	0000659d 	.word	0x0000659d
    5cd8:	00004d39 	.word	0x00004d39
    5cdc:	00007f11 	.word	0x00007f11
    5ce0:	00007f01 	.word	0x00007f01
    5ce4:	00007ef1 	.word	0x00007ef1

00005ce8 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b082      	sub	sp, #8
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    5cf2:	4b03      	ldr	r3, [pc, #12]	; (5d00 <_usb_on_sof_notify+0x18>)
    5cf4:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    5cf6:	4b03      	ldr	r3, [pc, #12]	; (5d04 <_usb_on_sof_notify+0x1c>)
    5cf8:	4798      	blx	r3
#endif
}
    5cfa:	46bd      	mov	sp, r7
    5cfc:	b002      	add	sp, #8
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	00001cd1 	.word	0x00001cd1
    5d04:	00007e9d 	.word	0x00007e9d

00005d08 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    5d08:	b580      	push	{r7, lr}
    5d0a:	b082      	sub	sp, #8
    5d0c:	af00      	add	r7, sp, #0
    5d0e:	6078      	str	r0, [r7, #4]
    5d10:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    5d12:	4b07      	ldr	r3, [pc, #28]	; (5d30 <_usb_on_bus_reset+0x28>)
    5d14:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	1c18      	adds	r0, r3, #0
    5d1a:	2100      	movs	r1, #0
    5d1c:	4b05      	ldr	r3, [pc, #20]	; (5d34 <_usb_on_bus_reset+0x2c>)
    5d1e:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	1c18      	adds	r0, r3, #0
    5d24:	4b04      	ldr	r3, [pc, #16]	; (5d38 <_usb_on_bus_reset+0x30>)
    5d26:	4798      	blx	r3
}
    5d28:	46bd      	mov	sp, r7
    5d2a:	b002      	add	sp, #8
    5d2c:	bd80      	pop	{r7, pc}
    5d2e:	46c0      	nop			; (mov r8, r8)
    5d30:	00001c5d 	.word	0x00001c5d
    5d34:	00004b59 	.word	0x00004b59
    5d38:	00005b71 	.word	0x00005b71

00005d3c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b082      	sub	sp, #8
    5d40:	af00      	add	r7, sp, #0
    5d42:	6078      	str	r0, [r7, #4]
    5d44:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    5d46:	4b10      	ldr	r3, [pc, #64]	; (5d88 <_usb_on_wakeup+0x4c>)
    5d48:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5d4a:	4b10      	ldr	r3, [pc, #64]	; (5d8c <_usb_on_wakeup+0x50>)
    5d4c:	1c18      	adds	r0, r3, #0
    5d4e:	2102      	movs	r1, #2
    5d50:	4b0f      	ldr	r3, [pc, #60]	; (5d90 <_usb_on_wakeup+0x54>)
    5d52:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5d54:	4b0d      	ldr	r3, [pc, #52]	; (5d8c <_usb_on_wakeup+0x50>)
    5d56:	1c18      	adds	r0, r3, #0
    5d58:	2104      	movs	r1, #4
    5d5a:	4b0e      	ldr	r3, [pc, #56]	; (5d94 <_usb_on_wakeup+0x58>)
    5d5c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5d5e:	4a0b      	ldr	r2, [pc, #44]	; (5d8c <_usb_on_wakeup+0x50>)
    5d60:	4b0d      	ldr	r3, [pc, #52]	; (5d98 <_usb_on_wakeup+0x5c>)
    5d62:	1c10      	adds	r0, r2, #0
    5d64:	2106      	movs	r1, #6
    5d66:	1c1a      	adds	r2, r3, #0
    5d68:	4b0c      	ldr	r3, [pc, #48]	; (5d9c <_usb_on_wakeup+0x60>)
    5d6a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5d6c:	4b07      	ldr	r3, [pc, #28]	; (5d8c <_usb_on_wakeup+0x50>)
    5d6e:	1c18      	adds	r0, r3, #0
    5d70:	2106      	movs	r1, #6
    5d72:	4b08      	ldr	r3, [pc, #32]	; (5d94 <_usb_on_wakeup+0x58>)
    5d74:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    5d76:	2003      	movs	r0, #3
    5d78:	4b09      	ldr	r3, [pc, #36]	; (5da0 <_usb_on_wakeup+0x64>)
    5d7a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    5d7c:	4b09      	ldr	r3, [pc, #36]	; (5da4 <_usb_on_wakeup+0x68>)
    5d7e:	4798      	blx	r3
#endif
}
    5d80:	46bd      	mov	sp, r7
    5d82:	b002      	add	sp, #8
    5d84:	bd80      	pop	{r7, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	00004d01 	.word	0x00004d01
    5d8c:	200002dc 	.word	0x200002dc
    5d90:	000065f9 	.word	0x000065f9
    5d94:	0000659d 	.word	0x0000659d
    5d98:	00005c79 	.word	0x00005c79
    5d9c:	0000654d 	.word	0x0000654d
    5da0:	00004d39 	.word	0x00004d39
    5da4:	00007e8d 	.word	0x00007e8d

00005da8 <udd_detach>:

void udd_detach(void)
{
    5da8:	b580      	push	{r7, lr}
    5daa:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    5dac:	4b04      	ldr	r3, [pc, #16]	; (5dc0 <udd_detach+0x18>)
    5dae:	1c18      	adds	r0, r3, #0
    5db0:	4b04      	ldr	r3, [pc, #16]	; (5dc4 <udd_detach+0x1c>)
    5db2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    5db4:	2001      	movs	r0, #1
    5db6:	4b04      	ldr	r3, [pc, #16]	; (5dc8 <udd_detach+0x20>)
    5db8:	4798      	blx	r3
}
    5dba:	46bd      	mov	sp, r7
    5dbc:	bd80      	pop	{r7, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	200002dc 	.word	0x200002dc
    5dc4:	00004b19 	.word	0x00004b19
    5dc8:	00004d39 	.word	0x00004d39

00005dcc <udd_attach>:

void udd_attach(void)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    5dd0:	2003      	movs	r0, #3
    5dd2:	4b22      	ldr	r3, [pc, #136]	; (5e5c <udd_attach+0x90>)
    5dd4:	4798      	blx	r3
	usb_device_attach(&usb_device);
    5dd6:	4b22      	ldr	r3, [pc, #136]	; (5e60 <udd_attach+0x94>)
    5dd8:	1c18      	adds	r0, r3, #0
    5dda:	4b22      	ldr	r3, [pc, #136]	; (5e64 <udd_attach+0x98>)
    5ddc:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    5dde:	4a20      	ldr	r2, [pc, #128]	; (5e60 <udd_attach+0x94>)
    5de0:	4b21      	ldr	r3, [pc, #132]	; (5e68 <udd_attach+0x9c>)
    5de2:	1c10      	adds	r0, r2, #0
    5de4:	2104      	movs	r1, #4
    5de6:	1c1a      	adds	r2, r3, #0
    5de8:	4b20      	ldr	r3, [pc, #128]	; (5e6c <udd_attach+0xa0>)
    5dea:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    5dec:	4a1c      	ldr	r2, [pc, #112]	; (5e60 <udd_attach+0x94>)
    5dee:	4b20      	ldr	r3, [pc, #128]	; (5e70 <udd_attach+0xa4>)
    5df0:	1c10      	adds	r0, r2, #0
    5df2:	2100      	movs	r1, #0
    5df4:	1c1a      	adds	r2, r3, #0
    5df6:	4b1d      	ldr	r3, [pc, #116]	; (5e6c <udd_attach+0xa0>)
    5df8:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    5dfa:	4a19      	ldr	r2, [pc, #100]	; (5e60 <udd_attach+0x94>)
    5dfc:	4b1d      	ldr	r3, [pc, #116]	; (5e74 <udd_attach+0xa8>)
    5dfe:	1c10      	adds	r0, r2, #0
    5e00:	2101      	movs	r1, #1
    5e02:	1c1a      	adds	r2, r3, #0
    5e04:	4b19      	ldr	r3, [pc, #100]	; (5e6c <udd_attach+0xa0>)
    5e06:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    5e08:	4a15      	ldr	r2, [pc, #84]	; (5e60 <udd_attach+0x94>)
    5e0a:	4b1b      	ldr	r3, [pc, #108]	; (5e78 <udd_attach+0xac>)
    5e0c:	1c10      	adds	r0, r2, #0
    5e0e:	2102      	movs	r1, #2
    5e10:	1c1a      	adds	r2, r3, #0
    5e12:	4b16      	ldr	r3, [pc, #88]	; (5e6c <udd_attach+0xa0>)
    5e14:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5e16:	4b12      	ldr	r3, [pc, #72]	; (5e60 <udd_attach+0x94>)
    5e18:	1c18      	adds	r0, r3, #0
    5e1a:	2104      	movs	r1, #4
    5e1c:	4b17      	ldr	r3, [pc, #92]	; (5e7c <udd_attach+0xb0>)
    5e1e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    5e20:	4b0f      	ldr	r3, [pc, #60]	; (5e60 <udd_attach+0x94>)
    5e22:	1c18      	adds	r0, r3, #0
    5e24:	2100      	movs	r1, #0
    5e26:	4b15      	ldr	r3, [pc, #84]	; (5e7c <udd_attach+0xb0>)
    5e28:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    5e2a:	4b0d      	ldr	r3, [pc, #52]	; (5e60 <udd_attach+0x94>)
    5e2c:	1c18      	adds	r0, r3, #0
    5e2e:	2101      	movs	r1, #1
    5e30:	4b12      	ldr	r3, [pc, #72]	; (5e7c <udd_attach+0xb0>)
    5e32:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5e34:	4b0a      	ldr	r3, [pc, #40]	; (5e60 <udd_attach+0x94>)
    5e36:	1c18      	adds	r0, r3, #0
    5e38:	2102      	movs	r1, #2
    5e3a:	4b10      	ldr	r3, [pc, #64]	; (5e7c <udd_attach+0xb0>)
    5e3c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5e3e:	4a08      	ldr	r2, [pc, #32]	; (5e60 <udd_attach+0x94>)
    5e40:	4b0f      	ldr	r3, [pc, #60]	; (5e80 <udd_attach+0xb4>)
    5e42:	1c10      	adds	r0, r2, #0
    5e44:	2106      	movs	r1, #6
    5e46:	1c1a      	adds	r2, r3, #0
    5e48:	4b08      	ldr	r3, [pc, #32]	; (5e6c <udd_attach+0xa0>)
    5e4a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5e4c:	4b04      	ldr	r3, [pc, #16]	; (5e60 <udd_attach+0x94>)
    5e4e:	1c18      	adds	r0, r3, #0
    5e50:	2106      	movs	r1, #6
    5e52:	4b0a      	ldr	r3, [pc, #40]	; (5e7c <udd_attach+0xb0>)
    5e54:	4798      	blx	r3
#endif
}
    5e56:	46bd      	mov	sp, r7
    5e58:	bd80      	pop	{r7, pc}
    5e5a:	46c0      	nop			; (mov r8, r8)
    5e5c:	00004d39 	.word	0x00004d39
    5e60:	200002dc 	.word	0x200002dc
    5e64:	00004af5 	.word	0x00004af5
    5e68:	00005c35 	.word	0x00005c35
    5e6c:	0000654d 	.word	0x0000654d
    5e70:	00005ce9 	.word	0x00005ce9
    5e74:	00005d09 	.word	0x00005d09
    5e78:	00005d3d 	.word	0x00005d3d
    5e7c:	0000659d 	.word	0x0000659d
    5e80:	00005c79 	.word	0x00005c79

00005e84 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    5e88:	200e      	movs	r0, #14
    5e8a:	2100      	movs	r1, #0
    5e8c:	4b08      	ldr	r3, [pc, #32]	; (5eb0 <_uhd_vbus_handler+0x2c>)
    5e8e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    5e90:	200e      	movs	r0, #14
    5e92:	4b08      	ldr	r3, [pc, #32]	; (5eb4 <_uhd_vbus_handler+0x30>)
    5e94:	4798      	blx	r3
    5e96:	1e03      	subs	r3, r0, #0
    5e98:	d002      	beq.n	5ea0 <_uhd_vbus_handler+0x1c>
		udd_attach();
    5e9a:	4b07      	ldr	r3, [pc, #28]	; (5eb8 <_uhd_vbus_handler+0x34>)
    5e9c:	4798      	blx	r3
    5e9e:	e001      	b.n	5ea4 <_uhd_vbus_handler+0x20>
	} else {
		udd_detach();
    5ea0:	4b06      	ldr	r3, [pc, #24]	; (5ebc <_uhd_vbus_handler+0x38>)
    5ea2:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    5ea4:	200e      	movs	r0, #14
    5ea6:	2100      	movs	r1, #0
    5ea8:	4b05      	ldr	r3, [pc, #20]	; (5ec0 <_uhd_vbus_handler+0x3c>)
    5eaa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    5eac:	46bd      	mov	sp, r7
    5eae:	bd80      	pop	{r7, pc}
    5eb0:	00002979 	.word	0x00002979
    5eb4:	00004c25 	.word	0x00004c25
    5eb8:	00005dcd 	.word	0x00005dcd
    5ebc:	00005da9 	.word	0x00005da9
    5ec0:	00002931 	.word	0x00002931

00005ec4 <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    5ec4:	b580      	push	{r7, lr}
    5ec6:	b084      	sub	sp, #16
    5ec8:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    5eca:	1d3b      	adds	r3, r7, #4
    5ecc:	1c18      	adds	r0, r3, #0
    5ece:	4b13      	ldr	r3, [pc, #76]	; (5f1c <_usb_vbus_config+0x58>)
    5ed0:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    5ed2:	1d3b      	adds	r3, r7, #4
    5ed4:	220e      	movs	r2, #14
    5ed6:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    5ed8:	1d3b      	adds	r3, r7, #4
    5eda:	2200      	movs	r2, #0
    5edc:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    5ede:	1d3b      	adds	r3, r7, #4
    5ee0:	2200      	movs	r2, #0
    5ee2:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    5ee4:	1d3b      	adds	r3, r7, #4
    5ee6:	2203      	movs	r2, #3
    5ee8:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    5eea:	1d3b      	adds	r3, r7, #4
    5eec:	2201      	movs	r2, #1
    5eee:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    5ef0:	200e      	movs	r0, #14
    5ef2:	2100      	movs	r1, #0
    5ef4:	4b0a      	ldr	r3, [pc, #40]	; (5f20 <_usb_vbus_config+0x5c>)
    5ef6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    5ef8:	1d3b      	adds	r3, r7, #4
    5efa:	200e      	movs	r0, #14
    5efc:	1c19      	adds	r1, r3, #0
    5efe:	4b09      	ldr	r3, [pc, #36]	; (5f24 <_usb_vbus_config+0x60>)
    5f00:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    5f02:	4b09      	ldr	r3, [pc, #36]	; (5f28 <_usb_vbus_config+0x64>)
    5f04:	1c18      	adds	r0, r3, #0
    5f06:	210e      	movs	r1, #14
    5f08:	2200      	movs	r2, #0
    5f0a:	4b08      	ldr	r3, [pc, #32]	; (5f2c <_usb_vbus_config+0x68>)
    5f0c:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    5f0e:	200e      	movs	r0, #14
    5f10:	2100      	movs	r1, #0
    5f12:	4b07      	ldr	r3, [pc, #28]	; (5f30 <_usb_vbus_config+0x6c>)
    5f14:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    5f16:	46bd      	mov	sp, r7
    5f18:	b004      	add	sp, #16
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	00002cc5 	.word	0x00002cc5
    5f20:	00002979 	.word	0x00002979
    5f24:	00002cf9 	.word	0x00002cf9
    5f28:	00005e85 	.word	0x00005e85
    5f2c:	000028cd 	.word	0x000028cd
    5f30:	00002931 	.word	0x00002931

00005f34 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b082      	sub	sp, #8
    5f38:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    5f3a:	4b15      	ldr	r3, [pc, #84]	; (5f90 <udd_enable+0x5c>)
    5f3c:	4798      	blx	r3
    5f3e:	1c03      	adds	r3, r0, #0
    5f40:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    5f42:	1c3b      	adds	r3, r7, #0
    5f44:	1c18      	adds	r0, r3, #0
    5f46:	4b13      	ldr	r3, [pc, #76]	; (5f94 <udd_enable+0x60>)
    5f48:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5f4a:	1c3b      	adds	r3, r7, #0
    5f4c:	2200      	movs	r2, #0
    5f4e:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    5f50:	4a11      	ldr	r2, [pc, #68]	; (5f98 <udd_enable+0x64>)
    5f52:	4912      	ldr	r1, [pc, #72]	; (5f9c <udd_enable+0x68>)
    5f54:	1c3b      	adds	r3, r7, #0
    5f56:	1c10      	adds	r0, r2, #0
    5f58:	1c1a      	adds	r2, r3, #0
    5f5a:	4b11      	ldr	r3, [pc, #68]	; (5fa0 <udd_enable+0x6c>)
    5f5c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    5f5e:	4b0e      	ldr	r3, [pc, #56]	; (5f98 <udd_enable+0x64>)
    5f60:	1c18      	adds	r0, r3, #0
    5f62:	4b10      	ldr	r3, [pc, #64]	; (5fa4 <udd_enable+0x70>)
    5f64:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    5f66:	4b10      	ldr	r3, [pc, #64]	; (5fa8 <udd_enable+0x74>)
    5f68:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    5f6a:	2001      	movs	r0, #1
    5f6c:	4b0f      	ldr	r3, [pc, #60]	; (5fac <udd_enable+0x78>)
    5f6e:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    5f70:	4b0f      	ldr	r3, [pc, #60]	; (5fb0 <udd_enable+0x7c>)
    5f72:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    5f74:	200e      	movs	r0, #14
    5f76:	4b0f      	ldr	r3, [pc, #60]	; (5fb4 <udd_enable+0x80>)
    5f78:	4798      	blx	r3
    5f7a:	1e03      	subs	r3, r0, #0
    5f7c:	d001      	beq.n	5f82 <udd_enable+0x4e>
		/* USB Attach */
		_uhd_vbus_handler();
    5f7e:	4b0e      	ldr	r3, [pc, #56]	; (5fb8 <udd_enable+0x84>)
    5f80:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    5f82:	687b      	ldr	r3, [r7, #4]
    5f84:	1c18      	adds	r0, r3, #0
    5f86:	4b0d      	ldr	r3, [pc, #52]	; (5fbc <udd_enable+0x88>)
    5f88:	4798      	blx	r3
}
    5f8a:	46bd      	mov	sp, r7
    5f8c:	b002      	add	sp, #8
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	00004a05 	.word	0x00004a05
    5f94:	00007959 	.word	0x00007959
    5f98:	200002dc 	.word	0x200002dc
    5f9c:	41005000 	.word	0x41005000
    5fa0:	00007981 	.word	0x00007981
    5fa4:	000078f9 	.word	0x000078f9
    5fa8:	00004d01 	.word	0x00004d01
    5fac:	00004d39 	.word	0x00004d39
    5fb0:	00005ec5 	.word	0x00005ec5
    5fb4:	00004c25 	.word	0x00004c25
    5fb8:	00005e85 	.word	0x00005e85
    5fbc:	00004a4d 	.word	0x00004a4d

00005fc0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	2200      	movs	r2, #0
    5fcc:	701a      	strb	r2, [r3, #0]
}
    5fce:	46bd      	mov	sp, r7
    5fd0:	b002      	add	sp, #8
    5fd2:	bd80      	pop	{r7, pc}

00005fd4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b082      	sub	sp, #8
    5fd8:	af00      	add	r7, sp, #0
    5fda:	1c02      	adds	r2, r0, #0
    5fdc:	6039      	str	r1, [r7, #0]
    5fde:	1dfb      	adds	r3, r7, #7
    5fe0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5fe2:	1dfb      	adds	r3, r7, #7
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	2b01      	cmp	r3, #1
    5fe8:	d00a      	beq.n	6000 <system_apb_clock_set_mask+0x2c>
    5fea:	2b02      	cmp	r3, #2
    5fec:	d00f      	beq.n	600e <system_apb_clock_set_mask+0x3a>
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d114      	bne.n	601c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5ff2:	4b0e      	ldr	r3, [pc, #56]	; (602c <system_apb_clock_set_mask+0x58>)
    5ff4:	4a0d      	ldr	r2, [pc, #52]	; (602c <system_apb_clock_set_mask+0x58>)
    5ff6:	6991      	ldr	r1, [r2, #24]
    5ff8:	683a      	ldr	r2, [r7, #0]
    5ffa:	430a      	orrs	r2, r1
    5ffc:	619a      	str	r2, [r3, #24]
			break;
    5ffe:	e00f      	b.n	6020 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6000:	4b0a      	ldr	r3, [pc, #40]	; (602c <system_apb_clock_set_mask+0x58>)
    6002:	4a0a      	ldr	r2, [pc, #40]	; (602c <system_apb_clock_set_mask+0x58>)
    6004:	69d1      	ldr	r1, [r2, #28]
    6006:	683a      	ldr	r2, [r7, #0]
    6008:	430a      	orrs	r2, r1
    600a:	61da      	str	r2, [r3, #28]
			break;
    600c:	e008      	b.n	6020 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    600e:	4b07      	ldr	r3, [pc, #28]	; (602c <system_apb_clock_set_mask+0x58>)
    6010:	4a06      	ldr	r2, [pc, #24]	; (602c <system_apb_clock_set_mask+0x58>)
    6012:	6a11      	ldr	r1, [r2, #32]
    6014:	683a      	ldr	r2, [r7, #0]
    6016:	430a      	orrs	r2, r1
    6018:	621a      	str	r2, [r3, #32]
			break;
    601a:	e001      	b.n	6020 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    601c:	2317      	movs	r3, #23
    601e:	e000      	b.n	6022 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6020:	2300      	movs	r3, #0
}
    6022:	1c18      	adds	r0, r3, #0
    6024:	46bd      	mov	sp, r7
    6026:	b002      	add	sp, #8
    6028:	bd80      	pop	{r7, pc}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	40000400 	.word	0x40000400

00006030 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	2280      	movs	r2, #128	; 0x80
    603c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    603e:	687b      	ldr	r3, [r7, #4]
    6040:	2200      	movs	r2, #0
    6042:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	2201      	movs	r2, #1
    6048:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	2200      	movs	r2, #0
    604e:	70da      	strb	r2, [r3, #3]
}
    6050:	46bd      	mov	sp, r7
    6052:	b002      	add	sp, #8
    6054:	bd80      	pop	{r7, pc}
    6056:	46c0      	nop			; (mov r8, r8)

00006058 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    6058:	b580      	push	{r7, lr}
    605a:	b082      	sub	sp, #8
    605c:	af00      	add	r7, sp, #0
    605e:	1c02      	adds	r2, r0, #0
    6060:	1dfb      	adds	r3, r7, #7
    6062:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6064:	4b06      	ldr	r3, [pc, #24]	; (6080 <system_interrupt_enable+0x28>)
    6066:	1dfa      	adds	r2, r7, #7
    6068:	7812      	ldrb	r2, [r2, #0]
    606a:	1c11      	adds	r1, r2, #0
    606c:	221f      	movs	r2, #31
    606e:	400a      	ands	r2, r1
    6070:	2101      	movs	r1, #1
    6072:	4091      	lsls	r1, r2
    6074:	1c0a      	adds	r2, r1, #0
    6076:	601a      	str	r2, [r3, #0]
}
    6078:	46bd      	mov	sp, r7
    607a:	b002      	add	sp, #8
    607c:	bd80      	pop	{r7, pc}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	e000e100 	.word	0xe000e100

00006084 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    6084:	b580      	push	{r7, lr}
    6086:	b082      	sub	sp, #8
    6088:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    608a:	4bbb      	ldr	r3, [pc, #748]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	681b      	ldr	r3, [r3, #0]
    6090:	8c1b      	ldrh	r3, [r3, #32]
    6092:	b29b      	uxth	r3, r3
    6094:	1c1a      	adds	r2, r3, #0
    6096:	4bb9      	ldr	r3, [pc, #740]	; (637c <_usb_host_interrupt_handler+0x2f8>)
    6098:	1c10      	adds	r0, r2, #0
    609a:	4798      	blx	r3
    609c:	1c03      	adds	r3, r0, #0
    609e:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	2b1f      	cmp	r3, #31
    60a4:	d900      	bls.n	60a8 <_usb_host_interrupt_handler+0x24>
    60a6:	e173      	b.n	6390 <_usb_host_interrupt_handler+0x30c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    60a8:	4bb3      	ldr	r3, [pc, #716]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	681a      	ldr	r2, [r3, #0]
    60ae:	687b      	ldr	r3, [r7, #4]
    60b0:	3308      	adds	r3, #8
    60b2:	015b      	lsls	r3, r3, #5
    60b4:	18d3      	adds	r3, r2, r3
    60b6:	79db      	ldrb	r3, [r3, #7]
    60b8:	b2db      	uxtb	r3, r3
    60ba:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	2203      	movs	r2, #3
    60c0:	4013      	ands	r3, r2
    60c2:	d100      	bne.n	60c6 <_usb_host_interrupt_handler+0x42>
    60c4:	e089      	b.n	61da <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	2201      	movs	r2, #1
    60ca:	409a      	lsls	r2, r3
    60cc:	1c13      	adds	r3, r2, #0
    60ce:	43db      	mvns	r3, r3
    60d0:	1c1a      	adds	r2, r3, #0
    60d2:	4bab      	ldr	r3, [pc, #684]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	401a      	ands	r2, r3
    60d8:	4ba9      	ldr	r3, [pc, #676]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    60da:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    60dc:	4ba6      	ldr	r3, [pc, #664]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    60de:	681b      	ldr	r3, [r3, #0]
    60e0:	681a      	ldr	r2, [r3, #0]
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	3308      	adds	r3, #8
    60e6:	015b      	lsls	r3, r3, #5
    60e8:	18d3      	adds	r3, r2, r3
    60ea:	2203      	movs	r2, #3
    60ec:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    60ee:	4ba2      	ldr	r3, [pc, #648]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    60f0:	681a      	ldr	r2, [r3, #0]
    60f2:	21a8      	movs	r1, #168	; 0xa8
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	18d3      	adds	r3, r2, r3
    60f8:	185b      	adds	r3, r3, r1
    60fa:	799b      	ldrb	r3, [r3, #6]
    60fc:	1c1a      	adds	r2, r3, #0
    60fe:	2301      	movs	r3, #1
    6100:	4013      	ands	r3, r2
    6102:	d06a      	beq.n	61da <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	b2da      	uxtb	r2, r3
    6108:	4b9e      	ldr	r3, [pc, #632]	; (6384 <_usb_host_interrupt_handler+0x300>)
    610a:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    610c:	4b9a      	ldr	r3, [pc, #616]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    610e:	681b      	ldr	r3, [r3, #0]
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	687a      	ldr	r2, [r7, #4]
    6114:	3208      	adds	r2, #8
    6116:	0152      	lsls	r2, r2, #5
    6118:	5cd3      	ldrb	r3, [r2, r3]
    611a:	2203      	movs	r2, #3
    611c:	4013      	ands	r3, r2
    611e:	b2db      	uxtb	r3, r3
    6120:	2b01      	cmp	r3, #1
    6122:	d11f      	bne.n	6164 <_usb_host_interrupt_handler+0xe0>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6124:	4a98      	ldr	r2, [pc, #608]	; (6388 <_usb_host_interrupt_handler+0x304>)
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	015b      	lsls	r3, r3, #5
    612a:	18d3      	adds	r3, r2, r3
    612c:	685b      	ldr	r3, [r3, #4]
    612e:	049b      	lsls	r3, r3, #18
    6130:	0c9b      	lsrs	r3, r3, #18
    6132:	b29b      	uxth	r3, r3
    6134:	1c1a      	adds	r2, r3, #0
    6136:	4b93      	ldr	r3, [pc, #588]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6138:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    613a:	4a93      	ldr	r2, [pc, #588]	; (6388 <_usb_host_interrupt_handler+0x304>)
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	015b      	lsls	r3, r3, #5
    6140:	18d3      	adds	r3, r2, r3
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	0b9b      	lsrs	r3, r3, #14
    6146:	049b      	lsls	r3, r3, #18
    6148:	0c9b      	lsrs	r3, r3, #18
    614a:	b29b      	uxth	r3, r3
    614c:	1c1a      	adds	r2, r3, #0
    614e:	4b8d      	ldr	r3, [pc, #564]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6150:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6152:	4a8d      	ldr	r2, [pc, #564]	; (6388 <_usb_host_interrupt_handler+0x304>)
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	015b      	lsls	r3, r3, #5
    6158:	18d3      	adds	r3, r2, r3
    615a:	685a      	ldr	r2, [r3, #4]
    615c:	0b92      	lsrs	r2, r2, #14
    615e:	0392      	lsls	r2, r2, #14
    6160:	605a      	str	r2, [r3, #4]
    6162:	e02d      	b.n	61c0 <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6164:	4a88      	ldr	r2, [pc, #544]	; (6388 <_usb_host_interrupt_handler+0x304>)
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	015b      	lsls	r3, r3, #5
    616a:	18d3      	adds	r3, r2, r3
    616c:	685b      	ldr	r3, [r3, #4]
    616e:	0b9b      	lsrs	r3, r3, #14
    6170:	049b      	lsls	r3, r3, #18
    6172:	0c9b      	lsrs	r3, r3, #18
    6174:	b29b      	uxth	r3, r3
    6176:	1c1a      	adds	r2, r3, #0
    6178:	4b82      	ldr	r3, [pc, #520]	; (6384 <_usb_host_interrupt_handler+0x300>)
    617a:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    617c:	4a82      	ldr	r2, [pc, #520]	; (6388 <_usb_host_interrupt_handler+0x304>)
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	015b      	lsls	r3, r3, #5
    6182:	18d3      	adds	r3, r2, r3
    6184:	685b      	ldr	r3, [r3, #4]
    6186:	049b      	lsls	r3, r3, #18
    6188:	0c9b      	lsrs	r3, r3, #18
    618a:	b29b      	uxth	r3, r3
    618c:	1c1a      	adds	r2, r3, #0
    618e:	4b7d      	ldr	r3, [pc, #500]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6190:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6192:	4a7d      	ldr	r2, [pc, #500]	; (6388 <_usb_host_interrupt_handler+0x304>)
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	015b      	lsls	r3, r3, #5
    6198:	18d3      	adds	r3, r2, r3
    619a:	685a      	ldr	r2, [r3, #4]
    619c:	497b      	ldr	r1, [pc, #492]	; (638c <_usb_host_interrupt_handler+0x308>)
    619e:	400a      	ands	r2, r1
    61a0:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    61a2:	4b78      	ldr	r3, [pc, #480]	; (6384 <_usb_host_interrupt_handler+0x300>)
    61a4:	885b      	ldrh	r3, [r3, #2]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d10a      	bne.n	61c0 <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    61aa:	4a77      	ldr	r2, [pc, #476]	; (6388 <_usb_host_interrupt_handler+0x304>)
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	015b      	lsls	r3, r3, #5
    61b0:	18d3      	adds	r3, r2, r3
    61b2:	685b      	ldr	r3, [r3, #4]
    61b4:	049b      	lsls	r3, r3, #18
    61b6:	0c9b      	lsrs	r3, r3, #18
    61b8:	b29b      	uxth	r3, r3
    61ba:	1c1a      	adds	r2, r3, #0
    61bc:	4b71      	ldr	r3, [pc, #452]	; (6384 <_usb_host_interrupt_handler+0x300>)
    61be:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    61c0:	4b6d      	ldr	r3, [pc, #436]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    61c2:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	3302      	adds	r3, #2
    61c8:	011b      	lsls	r3, r3, #4
    61ca:	18d3      	adds	r3, r2, r3
    61cc:	685a      	ldr	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    61ce:	4b6a      	ldr	r3, [pc, #424]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    61d0:	6819      	ldr	r1, [r3, #0]
    61d2:	4b6c      	ldr	r3, [pc, #432]	; (6384 <_usb_host_interrupt_handler+0x300>)
    61d4:	1c08      	adds	r0, r1, #0
    61d6:	1c19      	adds	r1, r3, #0
    61d8:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    61da:	683b      	ldr	r3, [r7, #0]
    61dc:	2204      	movs	r2, #4
    61de:	4013      	ands	r3, r2
    61e0:	d013      	beq.n	620a <_usb_host_interrupt_handler+0x186>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	2201      	movs	r2, #1
    61e6:	409a      	lsls	r2, r3
    61e8:	1c13      	adds	r3, r2, #0
    61ea:	43db      	mvns	r3, r3
    61ec:	1c1a      	adds	r2, r3, #0
    61ee:	4b64      	ldr	r3, [pc, #400]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	401a      	ands	r2, r3
    61f4:	4b62      	ldr	r3, [pc, #392]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    61f6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    61f8:	4b5f      	ldr	r3, [pc, #380]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	681a      	ldr	r2, [r3, #0]
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	3308      	adds	r3, #8
    6202:	015b      	lsls	r3, r3, #5
    6204:	18d3      	adds	r3, r2, r3
    6206:	2204      	movs	r2, #4
    6208:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    620a:	683b      	ldr	r3, [r7, #0]
    620c:	2208      	movs	r2, #8
    620e:	4013      	ands	r3, r2
    6210:	d03c      	beq.n	628c <_usb_host_interrupt_handler+0x208>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	2201      	movs	r2, #1
    6216:	409a      	lsls	r2, r3
    6218:	1c13      	adds	r3, r2, #0
    621a:	43db      	mvns	r3, r3
    621c:	1c1a      	adds	r2, r3, #0
    621e:	4b58      	ldr	r3, [pc, #352]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	401a      	ands	r2, r3
    6224:	4b56      	ldr	r3, [pc, #344]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    6226:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6228:	4b53      	ldr	r3, [pc, #332]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    622a:	681b      	ldr	r3, [r3, #0]
    622c:	681a      	ldr	r2, [r3, #0]
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	3308      	adds	r3, #8
    6232:	015b      	lsls	r3, r3, #5
    6234:	18d3      	adds	r3, r2, r3
    6236:	2208      	movs	r2, #8
    6238:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    623a:	4b4f      	ldr	r3, [pc, #316]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    623c:	681a      	ldr	r2, [r3, #0]
    623e:	21a8      	movs	r1, #168	; 0xa8
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	18d3      	adds	r3, r2, r3
    6244:	185b      	adds	r3, r3, r1
    6246:	799b      	ldrb	r3, [r3, #6]
    6248:	1c1a      	adds	r2, r3, #0
    624a:	2302      	movs	r3, #2
    624c:	4013      	ands	r3, r2
    624e:	d01d      	beq.n	628c <_usb_host_interrupt_handler+0x208>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	b2da      	uxtb	r2, r3
    6254:	4b4b      	ldr	r3, [pc, #300]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6256:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6258:	4a4b      	ldr	r2, [pc, #300]	; (6388 <_usb_host_interrupt_handler+0x304>)
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	015b      	lsls	r3, r3, #5
    625e:	18d3      	adds	r3, r2, r3
    6260:	3308      	adds	r3, #8
    6262:	88db      	ldrh	r3, [r3, #6]
    6264:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    6266:	b2db      	uxtb	r3, r3
    6268:	221f      	movs	r2, #31
    626a:	4013      	ands	r3, r2
    626c:	b2da      	uxtb	r2, r3
    626e:	4b45      	ldr	r3, [pc, #276]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6270:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6272:	4b41      	ldr	r3, [pc, #260]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    6274:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	011b      	lsls	r3, r3, #4
    627a:	18d3      	adds	r3, r2, r3
    627c:	3324      	adds	r3, #36	; 0x24
    627e:	685a      	ldr	r2, [r3, #4]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    6280:	4b3d      	ldr	r3, [pc, #244]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    6282:	6819      	ldr	r1, [r3, #0]
    6284:	4b3f      	ldr	r3, [pc, #252]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6286:	1c08      	adds	r0, r1, #0
    6288:	1c19      	adds	r1, r3, #0
    628a:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    628c:	683b      	ldr	r3, [r7, #0]
    628e:	2210      	movs	r2, #16
    6290:	4013      	ands	r3, r2
    6292:	d03a      	beq.n	630a <_usb_host_interrupt_handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	2201      	movs	r2, #1
    6298:	409a      	lsls	r2, r3
    629a:	1c13      	adds	r3, r2, #0
    629c:	43db      	mvns	r3, r3
    629e:	1c1a      	adds	r2, r3, #0
    62a0:	4b37      	ldr	r3, [pc, #220]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    62a2:	681b      	ldr	r3, [r3, #0]
    62a4:	401a      	ands	r2, r3
    62a6:	4b36      	ldr	r3, [pc, #216]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    62a8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    62aa:	4b33      	ldr	r3, [pc, #204]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    62ac:	681b      	ldr	r3, [r3, #0]
    62ae:	681a      	ldr	r2, [r3, #0]
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	3308      	adds	r3, #8
    62b4:	015b      	lsls	r3, r3, #5
    62b6:	18d3      	adds	r3, r2, r3
    62b8:	2210      	movs	r2, #16
    62ba:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    62bc:	4b2e      	ldr	r3, [pc, #184]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    62be:	681a      	ldr	r2, [r3, #0]
    62c0:	21a8      	movs	r1, #168	; 0xa8
    62c2:	687b      	ldr	r3, [r7, #4]
    62c4:	18d3      	adds	r3, r2, r3
    62c6:	185b      	adds	r3, r3, r1
    62c8:	799b      	ldrb	r3, [r3, #6]
    62ca:	1c1a      	adds	r2, r3, #0
    62cc:	2304      	movs	r3, #4
    62ce:	4013      	ands	r3, r2
    62d0:	d01b      	beq.n	630a <_usb_host_interrupt_handler+0x286>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    62d2:	687b      	ldr	r3, [r7, #4]
    62d4:	b2da      	uxtb	r2, r3
    62d6:	4b2b      	ldr	r3, [pc, #172]	; (6384 <_usb_host_interrupt_handler+0x300>)
    62d8:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    62da:	4a2b      	ldr	r2, [pc, #172]	; (6388 <_usb_host_interrupt_handler+0x304>)
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	015b      	lsls	r3, r3, #5
    62e0:	18d3      	adds	r3, r2, r3
    62e2:	685b      	ldr	r3, [r3, #4]
    62e4:	0b9b      	lsrs	r3, r3, #14
    62e6:	049b      	lsls	r3, r3, #18
    62e8:	0c9b      	lsrs	r3, r3, #18
    62ea:	b29b      	uxth	r3, r3
    62ec:	1c1a      	adds	r2, r3, #0
    62ee:	4b25      	ldr	r3, [pc, #148]	; (6384 <_usb_host_interrupt_handler+0x300>)
    62f0:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    62f2:	4b21      	ldr	r3, [pc, #132]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    62f4:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	011b      	lsls	r3, r3, #4
    62fa:	18d3      	adds	r3, r2, r3
    62fc:	3328      	adds	r3, #40	; 0x28
    62fe:	685a      	ldr	r2, [r3, #4]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    6300:	4b1d      	ldr	r3, [pc, #116]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    6302:	681b      	ldr	r3, [r3, #0]
    6304:	1c18      	adds	r0, r3, #0
    6306:	2100      	movs	r1, #0
    6308:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    630a:	683b      	ldr	r3, [r7, #0]
    630c:	2220      	movs	r2, #32
    630e:	4013      	ands	r3, r2
    6310:	d100      	bne.n	6314 <_usb_host_interrupt_handler+0x290>
    6312:	e113      	b.n	653c <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	2201      	movs	r2, #1
    6318:	409a      	lsls	r2, r3
    631a:	1c13      	adds	r3, r2, #0
    631c:	43db      	mvns	r3, r3
    631e:	1c1a      	adds	r2, r3, #0
    6320:	4b17      	ldr	r3, [pc, #92]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    6322:	681b      	ldr	r3, [r3, #0]
    6324:	401a      	ands	r2, r3
    6326:	4b16      	ldr	r3, [pc, #88]	; (6380 <_usb_host_interrupt_handler+0x2fc>)
    6328:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    632a:	4b13      	ldr	r3, [pc, #76]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    632c:	681b      	ldr	r3, [r3, #0]
    632e:	681a      	ldr	r2, [r3, #0]
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	3308      	adds	r3, #8
    6334:	015b      	lsls	r3, r3, #5
    6336:	18d3      	adds	r3, r2, r3
    6338:	2220      	movs	r2, #32
    633a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    633c:	4b0e      	ldr	r3, [pc, #56]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    633e:	681a      	ldr	r2, [r3, #0]
    6340:	21a8      	movs	r1, #168	; 0xa8
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	18d3      	adds	r3, r2, r3
    6346:	185b      	adds	r3, r3, r1
    6348:	799b      	ldrb	r3, [r3, #6]
    634a:	1c1a      	adds	r2, r3, #0
    634c:	2308      	movs	r3, #8
    634e:	4013      	ands	r3, r2
    6350:	d100      	bne.n	6354 <_usb_host_interrupt_handler+0x2d0>
    6352:	e0f3      	b.n	653c <_usb_host_interrupt_handler+0x4b8>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	b2da      	uxtb	r2, r3
    6358:	4b0a      	ldr	r3, [pc, #40]	; (6384 <_usb_host_interrupt_handler+0x300>)
    635a:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    635c:	4b06      	ldr	r3, [pc, #24]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    635e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	011b      	lsls	r3, r3, #4
    6364:	18d3      	adds	r3, r2, r3
    6366:	332c      	adds	r3, #44	; 0x2c
    6368:	685a      	ldr	r2, [r3, #4]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    636a:	4b03      	ldr	r3, [pc, #12]	; (6378 <_usb_host_interrupt_handler+0x2f4>)
    636c:	6819      	ldr	r1, [r3, #0]
    636e:	4b05      	ldr	r3, [pc, #20]	; (6384 <_usb_host_interrupt_handler+0x300>)
    6370:	1c08      	adds	r0, r1, #0
    6372:	1c19      	adds	r1, r3, #0
    6374:	4790      	blx	r2
    6376:	e0e1      	b.n	653c <_usb_host_interrupt_handler+0x4b8>
    6378:	2000017c 	.word	0x2000017c
    637c:	00008251 	.word	0x00008251
    6380:	20000194 	.word	0x20000194
    6384:	20000180 	.word	0x20000180
    6388:	20000464 	.word	0x20000464
    638c:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6390:	4b6c      	ldr	r3, [pc, #432]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6392:	681b      	ldr	r3, [r3, #0]
    6394:	681b      	ldr	r3, [r3, #0]
    6396:	8b9b      	ldrh	r3, [r3, #28]
    6398:	b29b      	uxth	r3, r3
    639a:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    639c:	683b      	ldr	r3, [r7, #0]
    639e:	2204      	movs	r2, #4
    63a0:	4013      	ands	r3, r2
    63a2:	d013      	beq.n	63cc <_usb_host_interrupt_handler+0x348>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    63a4:	4b67      	ldr	r3, [pc, #412]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63a6:	681b      	ldr	r3, [r3, #0]
    63a8:	681b      	ldr	r3, [r3, #0]
    63aa:	2204      	movs	r2, #4
    63ac:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    63ae:	4b65      	ldr	r3, [pc, #404]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63b0:	681b      	ldr	r3, [r3, #0]
    63b2:	22a5      	movs	r2, #165	; 0xa5
    63b4:	5c9b      	ldrb	r3, [r3, r2]
    63b6:	1c1a      	adds	r2, r3, #0
    63b8:	2301      	movs	r3, #1
    63ba:	4013      	ands	r3, r2
    63bc:	d006      	beq.n	63cc <_usb_host_interrupt_handler+0x348>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    63be:	4b61      	ldr	r3, [pc, #388]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63c0:	681b      	ldr	r3, [r3, #0]
    63c2:	685a      	ldr	r2, [r3, #4]
    63c4:	4b5f      	ldr	r3, [pc, #380]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63c6:	681b      	ldr	r3, [r3, #0]
    63c8:	1c18      	adds	r0, r3, #0
    63ca:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    63cc:	683b      	ldr	r3, [r7, #0]
    63ce:	2208      	movs	r2, #8
    63d0:	4013      	ands	r3, r2
    63d2:	d016      	beq.n	6402 <_usb_host_interrupt_handler+0x37e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    63d4:	4b5c      	ldr	r3, [pc, #368]	; (6548 <_usb_host_interrupt_handler+0x4c4>)
    63d6:	2200      	movs	r2, #0
    63d8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    63da:	4b5a      	ldr	r3, [pc, #360]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63dc:	681b      	ldr	r3, [r3, #0]
    63de:	681b      	ldr	r3, [r3, #0]
    63e0:	2208      	movs	r2, #8
    63e2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    63e4:	4b57      	ldr	r3, [pc, #348]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	22a5      	movs	r2, #165	; 0xa5
    63ea:	5c9b      	ldrb	r3, [r3, r2]
    63ec:	1c1a      	adds	r2, r3, #0
    63ee:	2302      	movs	r3, #2
    63f0:	4013      	ands	r3, r2
    63f2:	d006      	beq.n	6402 <_usb_host_interrupt_handler+0x37e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    63f4:	4b53      	ldr	r3, [pc, #332]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63f6:	681b      	ldr	r3, [r3, #0]
    63f8:	689a      	ldr	r2, [r3, #8]
    63fa:	4b52      	ldr	r3, [pc, #328]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    63fc:	681b      	ldr	r3, [r3, #0]
    63fe:	1c18      	adds	r0, r3, #0
    6400:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6402:	683b      	ldr	r3, [r7, #0]
    6404:	2240      	movs	r2, #64	; 0x40
    6406:	4013      	ands	r3, r2
    6408:	d013      	beq.n	6432 <_usb_host_interrupt_handler+0x3ae>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    640a:	4b4e      	ldr	r3, [pc, #312]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    640c:	681b      	ldr	r3, [r3, #0]
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	2240      	movs	r2, #64	; 0x40
    6412:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6414:	4b4b      	ldr	r3, [pc, #300]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	22a5      	movs	r2, #165	; 0xa5
    641a:	5c9b      	ldrb	r3, [r3, r2]
    641c:	1c1a      	adds	r2, r3, #0
    641e:	2310      	movs	r3, #16
    6420:	4013      	ands	r3, r2
    6422:	d006      	beq.n	6432 <_usb_host_interrupt_handler+0x3ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6424:	4b47      	ldr	r3, [pc, #284]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	695a      	ldr	r2, [r3, #20]
    642a:	4b46      	ldr	r3, [pc, #280]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	1c18      	adds	r0, r3, #0
    6430:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6432:	683b      	ldr	r3, [r7, #0]
    6434:	2220      	movs	r2, #32
    6436:	4013      	ands	r3, r2
    6438:	d013      	beq.n	6462 <_usb_host_interrupt_handler+0x3de>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    643a:	4b42      	ldr	r3, [pc, #264]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	681b      	ldr	r3, [r3, #0]
    6440:	2220      	movs	r2, #32
    6442:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6444:	4b3f      	ldr	r3, [pc, #252]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	22a5      	movs	r2, #165	; 0xa5
    644a:	5c9b      	ldrb	r3, [r3, r2]
    644c:	1c1a      	adds	r2, r3, #0
    644e:	2308      	movs	r3, #8
    6450:	4013      	ands	r3, r2
    6452:	d006      	beq.n	6462 <_usb_host_interrupt_handler+0x3de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6454:	4b3b      	ldr	r3, [pc, #236]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6456:	681b      	ldr	r3, [r3, #0]
    6458:	691a      	ldr	r2, [r3, #16]
    645a:	4b3a      	ldr	r3, [pc, #232]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    645c:	681b      	ldr	r3, [r3, #0]
    645e:	1c18      	adds	r0, r3, #0
    6460:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6462:	683b      	ldr	r3, [r7, #0]
    6464:	2210      	movs	r2, #16
    6466:	4013      	ands	r3, r2
    6468:	d013      	beq.n	6492 <_usb_host_interrupt_handler+0x40e>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    646a:	4b36      	ldr	r3, [pc, #216]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    646c:	681b      	ldr	r3, [r3, #0]
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	2210      	movs	r2, #16
    6472:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6474:	4b33      	ldr	r3, [pc, #204]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	22a5      	movs	r2, #165	; 0xa5
    647a:	5c9b      	ldrb	r3, [r3, r2]
    647c:	1c1a      	adds	r2, r3, #0
    647e:	2304      	movs	r3, #4
    6480:	4013      	ands	r3, r2
    6482:	d006      	beq.n	6492 <_usb_host_interrupt_handler+0x40e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6484:	4b2f      	ldr	r3, [pc, #188]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	68da      	ldr	r2, [r3, #12]
    648a:	4b2e      	ldr	r3, [pc, #184]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    648c:	681b      	ldr	r3, [r3, #0]
    648e:	1c18      	adds	r0, r3, #0
    6490:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6492:	683b      	ldr	r3, [r7, #0]
    6494:	2280      	movs	r2, #128	; 0x80
    6496:	4013      	ands	r3, r2
    6498:	d016      	beq.n	64c8 <_usb_host_interrupt_handler+0x444>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    649a:	4b2b      	ldr	r3, [pc, #172]	; (6548 <_usb_host_interrupt_handler+0x4c4>)
    649c:	2200      	movs	r2, #0
    649e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    64a0:	4b28      	ldr	r3, [pc, #160]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64a2:	681b      	ldr	r3, [r3, #0]
    64a4:	681b      	ldr	r3, [r3, #0]
    64a6:	2280      	movs	r2, #128	; 0x80
    64a8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    64aa:	4b26      	ldr	r3, [pc, #152]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	22a5      	movs	r2, #165	; 0xa5
    64b0:	5c9b      	ldrb	r3, [r3, r2]
    64b2:	1c1a      	adds	r2, r3, #0
    64b4:	2320      	movs	r3, #32
    64b6:	4013      	ands	r3, r2
    64b8:	d006      	beq.n	64c8 <_usb_host_interrupt_handler+0x444>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    64ba:	4b22      	ldr	r3, [pc, #136]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64bc:	681b      	ldr	r3, [r3, #0]
    64be:	699a      	ldr	r2, [r3, #24]
    64c0:	4b20      	ldr	r3, [pc, #128]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64c2:	681b      	ldr	r3, [r3, #0]
    64c4:	1c18      	adds	r0, r3, #0
    64c6:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    64c8:	683a      	ldr	r2, [r7, #0]
    64ca:	2380      	movs	r3, #128	; 0x80
    64cc:	005b      	lsls	r3, r3, #1
    64ce:	4013      	ands	r3, r2
    64d0:	d017      	beq.n	6502 <_usb_host_interrupt_handler+0x47e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    64d2:	4b1d      	ldr	r3, [pc, #116]	; (6548 <_usb_host_interrupt_handler+0x4c4>)
    64d4:	2200      	movs	r2, #0
    64d6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    64d8:	4b1a      	ldr	r3, [pc, #104]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64da:	681b      	ldr	r3, [r3, #0]
    64dc:	681b      	ldr	r3, [r3, #0]
    64de:	2280      	movs	r2, #128	; 0x80
    64e0:	0052      	lsls	r2, r2, #1
    64e2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    64e4:	4b17      	ldr	r3, [pc, #92]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	22a5      	movs	r2, #165	; 0xa5
    64ea:	5c9b      	ldrb	r3, [r3, r2]
    64ec:	1c1a      	adds	r2, r3, #0
    64ee:	2340      	movs	r3, #64	; 0x40
    64f0:	4013      	ands	r3, r2
    64f2:	d006      	beq.n	6502 <_usb_host_interrupt_handler+0x47e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    64f4:	4b13      	ldr	r3, [pc, #76]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	69da      	ldr	r2, [r3, #28]
    64fa:	4b12      	ldr	r3, [pc, #72]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	1c18      	adds	r0, r3, #0
    6500:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6502:	683a      	ldr	r2, [r7, #0]
    6504:	2380      	movs	r3, #128	; 0x80
    6506:	009b      	lsls	r3, r3, #2
    6508:	4013      	ands	r3, r2
    650a:	d017      	beq.n	653c <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    650c:	4b0e      	ldr	r3, [pc, #56]	; (6548 <_usb_host_interrupt_handler+0x4c4>)
    650e:	2200      	movs	r2, #0
    6510:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6512:	4b0c      	ldr	r3, [pc, #48]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6514:	681b      	ldr	r3, [r3, #0]
    6516:	681b      	ldr	r3, [r3, #0]
    6518:	2280      	movs	r2, #128	; 0x80
    651a:	0092      	lsls	r2, r2, #2
    651c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    651e:	4b09      	ldr	r3, [pc, #36]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6520:	681b      	ldr	r3, [r3, #0]
    6522:	22a5      	movs	r2, #165	; 0xa5
    6524:	5c9b      	ldrb	r3, [r3, r2]
    6526:	b2db      	uxtb	r3, r3
    6528:	b25b      	sxtb	r3, r3
    652a:	2b00      	cmp	r3, #0
    652c:	da06      	bge.n	653c <_usb_host_interrupt_handler+0x4b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    652e:	4b05      	ldr	r3, [pc, #20]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6530:	681b      	ldr	r3, [r3, #0]
    6532:	6a1a      	ldr	r2, [r3, #32]
    6534:	4b03      	ldr	r3, [pc, #12]	; (6544 <_usb_host_interrupt_handler+0x4c0>)
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	1c18      	adds	r0, r3, #0
    653a:	4790      	blx	r2
			}
		}

	}
}
    653c:	46bd      	mov	sp, r7
    653e:	b002      	add	sp, #8
    6540:	bd80      	pop	{r7, pc}
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	2000017c 	.word	0x2000017c
    6548:	20000194 	.word	0x20000194

0000654c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    654c:	b580      	push	{r7, lr}
    654e:	b084      	sub	sp, #16
    6550:	af00      	add	r7, sp, #0
    6552:	60f8      	str	r0, [r7, #12]
    6554:	607a      	str	r2, [r7, #4]
    6556:	230b      	movs	r3, #11
    6558:	18fb      	adds	r3, r7, r3
    655a:	1c0a      	adds	r2, r1, #0
    655c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    655e:	230b      	movs	r3, #11
    6560:	18fb      	adds	r3, r7, r3
    6562:	781a      	ldrb	r2, [r3, #0]
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	322e      	adds	r2, #46	; 0x2e
    6568:	0092      	lsls	r2, r2, #2
    656a:	6879      	ldr	r1, [r7, #4]
    656c:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    656e:	68fa      	ldr	r2, [r7, #12]
    6570:	23aa      	movs	r3, #170	; 0xaa
    6572:	005b      	lsls	r3, r3, #1
    6574:	5ad2      	ldrh	r2, [r2, r3]
    6576:	230b      	movs	r3, #11
    6578:	18fb      	adds	r3, r7, r3
    657a:	7819      	ldrb	r1, [r3, #0]
    657c:	4b06      	ldr	r3, [pc, #24]	; (6598 <usb_device_register_callback+0x4c>)
    657e:	0049      	lsls	r1, r1, #1
    6580:	5acb      	ldrh	r3, [r1, r3]
    6582:	4313      	orrs	r3, r2
    6584:	b299      	uxth	r1, r3
    6586:	68fa      	ldr	r2, [r7, #12]
    6588:	23aa      	movs	r3, #170	; 0xaa
    658a:	005b      	lsls	r3, r3, #1
    658c:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    658e:	2300      	movs	r3, #0
}
    6590:	1c18      	adds	r0, r3, #0
    6592:	46bd      	mov	sp, r7
    6594:	b004      	add	sp, #16
    6596:	bd80      	pop	{r7, pc}
    6598:	000083c4 	.word	0x000083c4

0000659c <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    659c:	b580      	push	{r7, lr}
    659e:	b082      	sub	sp, #8
    65a0:	af00      	add	r7, sp, #0
    65a2:	6078      	str	r0, [r7, #4]
    65a4:	1c0a      	adds	r2, r1, #0
    65a6:	1cfb      	adds	r3, r7, #3
    65a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    65aa:	687b      	ldr	r3, [r7, #4]
    65ac:	681b      	ldr	r3, [r3, #0]
    65ae:	1cfa      	adds	r2, r7, #3
    65b0:	7811      	ldrb	r1, [r2, #0]
    65b2:	4a10      	ldr	r2, [pc, #64]	; (65f4 <usb_device_enable_callback+0x58>)
    65b4:	0049      	lsls	r1, r1, #1
    65b6:	5a8a      	ldrh	r2, [r1, r2]
    65b8:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    65ba:	687a      	ldr	r2, [r7, #4]
    65bc:	23ab      	movs	r3, #171	; 0xab
    65be:	005b      	lsls	r3, r3, #1
    65c0:	5ad2      	ldrh	r2, [r2, r3]
    65c2:	1cfb      	adds	r3, r7, #3
    65c4:	7819      	ldrb	r1, [r3, #0]
    65c6:	4b0b      	ldr	r3, [pc, #44]	; (65f4 <usb_device_enable_callback+0x58>)
    65c8:	0049      	lsls	r1, r1, #1
    65ca:	5acb      	ldrh	r3, [r1, r3]
    65cc:	4313      	orrs	r3, r2
    65ce:	b299      	uxth	r1, r3
    65d0:	687a      	ldr	r2, [r7, #4]
    65d2:	23ab      	movs	r3, #171	; 0xab
    65d4:	005b      	lsls	r3, r3, #1
    65d6:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	1cfa      	adds	r2, r7, #3
    65de:	7811      	ldrb	r1, [r2, #0]
    65e0:	4a04      	ldr	r2, [pc, #16]	; (65f4 <usb_device_enable_callback+0x58>)
    65e2:	0049      	lsls	r1, r1, #1
    65e4:	5a8a      	ldrh	r2, [r1, r2]
    65e6:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    65e8:	2300      	movs	r3, #0
}
    65ea:	1c18      	adds	r0, r3, #0
    65ec:	46bd      	mov	sp, r7
    65ee:	b002      	add	sp, #8
    65f0:	bd80      	pop	{r7, pc}
    65f2:	46c0      	nop			; (mov r8, r8)
    65f4:	000083c4 	.word	0x000083c4

000065f8 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    65f8:	b580      	push	{r7, lr}
    65fa:	b082      	sub	sp, #8
    65fc:	af00      	add	r7, sp, #0
    65fe:	6078      	str	r0, [r7, #4]
    6600:	1c0a      	adds	r2, r1, #0
    6602:	1cfb      	adds	r3, r7, #3
    6604:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    6606:	687a      	ldr	r2, [r7, #4]
    6608:	23ab      	movs	r3, #171	; 0xab
    660a:	005b      	lsls	r3, r3, #1
    660c:	5ad3      	ldrh	r3, [r2, r3]
    660e:	b299      	uxth	r1, r3
    6610:	1cfb      	adds	r3, r7, #3
    6612:	781a      	ldrb	r2, [r3, #0]
    6614:	4b0d      	ldr	r3, [pc, #52]	; (664c <usb_device_disable_callback+0x54>)
    6616:	0052      	lsls	r2, r2, #1
    6618:	5ad3      	ldrh	r3, [r2, r3]
    661a:	b29b      	uxth	r3, r3
    661c:	43db      	mvns	r3, r3
    661e:	b29a      	uxth	r2, r3
    6620:	1c0b      	adds	r3, r1, #0
    6622:	4013      	ands	r3, r2
    6624:	b29b      	uxth	r3, r3
    6626:	b299      	uxth	r1, r3
    6628:	687a      	ldr	r2, [r7, #4]
    662a:	23ab      	movs	r3, #171	; 0xab
    662c:	005b      	lsls	r3, r3, #1
    662e:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	1cfa      	adds	r2, r7, #3
    6636:	7811      	ldrb	r1, [r2, #0]
    6638:	4a04      	ldr	r2, [pc, #16]	; (664c <usb_device_disable_callback+0x54>)
    663a:	0049      	lsls	r1, r1, #1
    663c:	5a8a      	ldrh	r2, [r1, r2]
    663e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    6640:	2300      	movs	r3, #0
}
    6642:	1c18      	adds	r0, r3, #0
    6644:	46bd      	mov	sp, r7
    6646:	b002      	add	sp, #8
    6648:	bd80      	pop	{r7, pc}
    664a:	46c0      	nop			; (mov r8, r8)
    664c:	000083c4 	.word	0x000083c4

00006650 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    6650:	b580      	push	{r7, lr}
    6652:	b084      	sub	sp, #16
    6654:	af00      	add	r7, sp, #0
    6656:	60f8      	str	r0, [r7, #12]
    6658:	1c08      	adds	r0, r1, #0
    665a:	1c11      	adds	r1, r2, #0
    665c:	607b      	str	r3, [r7, #4]
    665e:	230b      	movs	r3, #11
    6660:	18fb      	adds	r3, r7, r3
    6662:	1c02      	adds	r2, r0, #0
    6664:	701a      	strb	r2, [r3, #0]
    6666:	230a      	movs	r3, #10
    6668:	18fb      	adds	r3, r7, r3
    666a:	1c0a      	adds	r2, r1, #0
    666c:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    666e:	230b      	movs	r3, #11
    6670:	18fb      	adds	r3, r7, r3
    6672:	7819      	ldrb	r1, [r3, #0]
    6674:	230a      	movs	r3, #10
    6676:	18fb      	adds	r3, r7, r3
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	68fa      	ldr	r2, [r7, #12]
    667c:	0089      	lsls	r1, r1, #2
    667e:	18cb      	adds	r3, r1, r3
    6680:	3334      	adds	r3, #52	; 0x34
    6682:	009b      	lsls	r3, r3, #2
    6684:	18d3      	adds	r3, r2, r3
    6686:	687a      	ldr	r2, [r7, #4]
    6688:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    668a:	230b      	movs	r3, #11
    668c:	18fb      	adds	r3, r7, r3
    668e:	781a      	ldrb	r2, [r3, #0]
    6690:	230b      	movs	r3, #11
    6692:	18fb      	adds	r3, r7, r3
    6694:	7819      	ldrb	r1, [r3, #0]
    6696:	68f8      	ldr	r0, [r7, #12]
    6698:	23ac      	movs	r3, #172	; 0xac
    669a:	005b      	lsls	r3, r3, #1
    669c:	1841      	adds	r1, r0, r1
    669e:	18cb      	adds	r3, r1, r3
    66a0:	7819      	ldrb	r1, [r3, #0]
    66a2:	230a      	movs	r3, #10
    66a4:	18fb      	adds	r3, r7, r3
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	4807      	ldr	r0, [pc, #28]	; (66c8 <usb_device_endpoint_register_callback+0x78>)
    66aa:	5cc3      	ldrb	r3, [r0, r3]
    66ac:	430b      	orrs	r3, r1
    66ae:	b2d8      	uxtb	r0, r3
    66b0:	68f9      	ldr	r1, [r7, #12]
    66b2:	23ac      	movs	r3, #172	; 0xac
    66b4:	005b      	lsls	r3, r3, #1
    66b6:	188a      	adds	r2, r1, r2
    66b8:	18d3      	adds	r3, r2, r3
    66ba:	1c02      	adds	r2, r0, #0
    66bc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    66be:	2300      	movs	r3, #0
}
    66c0:	1c18      	adds	r0, r3, #0
    66c2:	46bd      	mov	sp, r7
    66c4:	b004      	add	sp, #16
    66c6:	bd80      	pop	{r7, pc}
    66c8:	000083d4 	.word	0x000083d4

000066cc <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b082      	sub	sp, #8
    66d0:	af00      	add	r7, sp, #0
    66d2:	6078      	str	r0, [r7, #4]
    66d4:	1c08      	adds	r0, r1, #0
    66d6:	1c11      	adds	r1, r2, #0
    66d8:	1cfb      	adds	r3, r7, #3
    66da:	1c02      	adds	r2, r0, #0
    66dc:	701a      	strb	r2, [r3, #0]
    66de:	1cbb      	adds	r3, r7, #2
    66e0:	1c0a      	adds	r2, r1, #0
    66e2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    66e4:	1cfb      	adds	r3, r7, #3
    66e6:	7819      	ldrb	r1, [r3, #0]
    66e8:	1cbb      	adds	r3, r7, #2
    66ea:	781b      	ldrb	r3, [r3, #0]
    66ec:	687a      	ldr	r2, [r7, #4]
    66ee:	0089      	lsls	r1, r1, #2
    66f0:	18cb      	adds	r3, r1, r3
    66f2:	3334      	adds	r3, #52	; 0x34
    66f4:	009b      	lsls	r3, r3, #2
    66f6:	18d3      	adds	r3, r2, r3
    66f8:	2200      	movs	r2, #0
    66fa:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    66fc:	1cfb      	adds	r3, r7, #3
    66fe:	781a      	ldrb	r2, [r3, #0]
    6700:	1cfb      	adds	r3, r7, #3
    6702:	7819      	ldrb	r1, [r3, #0]
    6704:	6878      	ldr	r0, [r7, #4]
    6706:	23ac      	movs	r3, #172	; 0xac
    6708:	005b      	lsls	r3, r3, #1
    670a:	1841      	adds	r1, r0, r1
    670c:	18cb      	adds	r3, r1, r3
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	b2d8      	uxtb	r0, r3
    6712:	1cbb      	adds	r3, r7, #2
    6714:	781b      	ldrb	r3, [r3, #0]
    6716:	490a      	ldr	r1, [pc, #40]	; (6740 <usb_device_endpoint_unregister_callback+0x74>)
    6718:	5ccb      	ldrb	r3, [r1, r3]
    671a:	b2db      	uxtb	r3, r3
    671c:	43db      	mvns	r3, r3
    671e:	b2d9      	uxtb	r1, r3
    6720:	1c03      	adds	r3, r0, #0
    6722:	400b      	ands	r3, r1
    6724:	b2db      	uxtb	r3, r3
    6726:	b2d8      	uxtb	r0, r3
    6728:	6879      	ldr	r1, [r7, #4]
    672a:	23ac      	movs	r3, #172	; 0xac
    672c:	005b      	lsls	r3, r3, #1
    672e:	188a      	adds	r2, r1, r2
    6730:	18d3      	adds	r3, r2, r3
    6732:	1c02      	adds	r2, r0, #0
    6734:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    6736:	2300      	movs	r3, #0
}
    6738:	1c18      	adds	r0, r3, #0
    673a:	46bd      	mov	sp, r7
    673c:	b002      	add	sp, #8
    673e:	bd80      	pop	{r7, pc}
    6740:	000083d4 	.word	0x000083d4

00006744 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6744:	b580      	push	{r7, lr}
    6746:	b084      	sub	sp, #16
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	1c08      	adds	r0, r1, #0
    674e:	1c11      	adds	r1, r2, #0
    6750:	1cfb      	adds	r3, r7, #3
    6752:	1c02      	adds	r2, r0, #0
    6754:	701a      	strb	r2, [r3, #0]
    6756:	1cbb      	adds	r3, r7, #2
    6758:	1c0a      	adds	r2, r1, #0
    675a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    675c:	230f      	movs	r3, #15
    675e:	18fb      	adds	r3, r7, r3
    6760:	1cfa      	adds	r2, r7, #3
    6762:	7812      	ldrb	r2, [r2, #0]
    6764:	210f      	movs	r1, #15
    6766:	400a      	ands	r2, r1
    6768:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    676a:	230f      	movs	r3, #15
    676c:	18fb      	adds	r3, r7, r3
    676e:	781a      	ldrb	r2, [r3, #0]
    6770:	230f      	movs	r3, #15
    6772:	18fb      	adds	r3, r7, r3
    6774:	7819      	ldrb	r1, [r3, #0]
    6776:	6878      	ldr	r0, [r7, #4]
    6778:	23b0      	movs	r3, #176	; 0xb0
    677a:	005b      	lsls	r3, r3, #1
    677c:	1841      	adds	r1, r0, r1
    677e:	18cb      	adds	r3, r1, r3
    6780:	7819      	ldrb	r1, [r3, #0]
    6782:	1cbb      	adds	r3, r7, #2
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	4855      	ldr	r0, [pc, #340]	; (68dc <usb_device_endpoint_enable_callback+0x198>)
    6788:	5cc3      	ldrb	r3, [r0, r3]
    678a:	430b      	orrs	r3, r1
    678c:	b2d8      	uxtb	r0, r3
    678e:	6879      	ldr	r1, [r7, #4]
    6790:	23b0      	movs	r3, #176	; 0xb0
    6792:	005b      	lsls	r3, r3, #1
    6794:	188a      	adds	r2, r1, r2
    6796:	18d3      	adds	r3, r2, r3
    6798:	1c02      	adds	r2, r0, #0
    679a:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    679c:	1cbb      	adds	r3, r7, #2
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	2b00      	cmp	r3, #0
    67a2:	d12f      	bne.n	6804 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    67a4:	230f      	movs	r3, #15
    67a6:	18fb      	adds	r3, r7, r3
    67a8:	781b      	ldrb	r3, [r3, #0]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d10c      	bne.n	67c8 <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	6819      	ldr	r1, [r3, #0]
    67b2:	230f      	movs	r3, #15
    67b4:	18fb      	adds	r3, r7, r3
    67b6:	781a      	ldrb	r2, [r3, #0]
    67b8:	2384      	movs	r3, #132	; 0x84
    67ba:	005b      	lsls	r3, r3, #1
    67bc:	0152      	lsls	r2, r2, #5
    67be:	188a      	adds	r2, r1, r2
    67c0:	18d3      	adds	r3, r2, r3
    67c2:	2203      	movs	r2, #3
    67c4:	705a      	strb	r2, [r3, #1]
    67c6:	e01d      	b.n	6804 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    67c8:	1cfb      	adds	r3, r7, #3
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	b25b      	sxtb	r3, r3
    67ce:	2b00      	cmp	r3, #0
    67d0:	da0c      	bge.n	67ec <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	6819      	ldr	r1, [r3, #0]
    67d6:	230f      	movs	r3, #15
    67d8:	18fb      	adds	r3, r7, r3
    67da:	781a      	ldrb	r2, [r3, #0]
    67dc:	2384      	movs	r3, #132	; 0x84
    67de:	005b      	lsls	r3, r3, #1
    67e0:	0152      	lsls	r2, r2, #5
    67e2:	188a      	adds	r2, r1, r2
    67e4:	18d3      	adds	r3, r2, r3
    67e6:	2202      	movs	r2, #2
    67e8:	705a      	strb	r2, [r3, #1]
    67ea:	e00b      	b.n	6804 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	6819      	ldr	r1, [r3, #0]
    67f0:	230f      	movs	r3, #15
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	781a      	ldrb	r2, [r3, #0]
    67f6:	2384      	movs	r3, #132	; 0x84
    67f8:	005b      	lsls	r3, r3, #1
    67fa:	0152      	lsls	r2, r2, #5
    67fc:	188a      	adds	r2, r1, r2
    67fe:	18d3      	adds	r3, r2, r3
    6800:	2201      	movs	r2, #1
    6802:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6804:	1cbb      	adds	r3, r7, #2
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	2b01      	cmp	r3, #1
    680a:	d12f      	bne.n	686c <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    680c:	230f      	movs	r3, #15
    680e:	18fb      	adds	r3, r7, r3
    6810:	781b      	ldrb	r3, [r3, #0]
    6812:	2b00      	cmp	r3, #0
    6814:	d10c      	bne.n	6830 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	6819      	ldr	r1, [r3, #0]
    681a:	230f      	movs	r3, #15
    681c:	18fb      	adds	r3, r7, r3
    681e:	781a      	ldrb	r2, [r3, #0]
    6820:	2384      	movs	r3, #132	; 0x84
    6822:	005b      	lsls	r3, r3, #1
    6824:	0152      	lsls	r2, r2, #5
    6826:	188a      	adds	r2, r1, r2
    6828:	18d3      	adds	r3, r2, r3
    682a:	220c      	movs	r2, #12
    682c:	705a      	strb	r2, [r3, #1]
    682e:	e01d      	b.n	686c <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    6830:	1cfb      	adds	r3, r7, #3
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	b25b      	sxtb	r3, r3
    6836:	2b00      	cmp	r3, #0
    6838:	da0c      	bge.n	6854 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    683a:	687b      	ldr	r3, [r7, #4]
    683c:	6819      	ldr	r1, [r3, #0]
    683e:	230f      	movs	r3, #15
    6840:	18fb      	adds	r3, r7, r3
    6842:	781a      	ldrb	r2, [r3, #0]
    6844:	2384      	movs	r3, #132	; 0x84
    6846:	005b      	lsls	r3, r3, #1
    6848:	0152      	lsls	r2, r2, #5
    684a:	188a      	adds	r2, r1, r2
    684c:	18d3      	adds	r3, r2, r3
    684e:	2208      	movs	r2, #8
    6850:	705a      	strb	r2, [r3, #1]
    6852:	e00b      	b.n	686c <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	6819      	ldr	r1, [r3, #0]
    6858:	230f      	movs	r3, #15
    685a:	18fb      	adds	r3, r7, r3
    685c:	781a      	ldrb	r2, [r3, #0]
    685e:	2384      	movs	r3, #132	; 0x84
    6860:	005b      	lsls	r3, r3, #1
    6862:	0152      	lsls	r2, r2, #5
    6864:	188a      	adds	r2, r1, r2
    6866:	18d3      	adds	r3, r2, r3
    6868:	2204      	movs	r2, #4
    686a:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    686c:	1cbb      	adds	r3, r7, #2
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	2b02      	cmp	r3, #2
    6872:	d10b      	bne.n	688c <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	6819      	ldr	r1, [r3, #0]
    6878:	230f      	movs	r3, #15
    687a:	18fb      	adds	r3, r7, r3
    687c:	781a      	ldrb	r2, [r3, #0]
    687e:	2384      	movs	r3, #132	; 0x84
    6880:	005b      	lsls	r3, r3, #1
    6882:	0152      	lsls	r2, r2, #5
    6884:	188a      	adds	r2, r1, r2
    6886:	18d3      	adds	r3, r2, r3
    6888:	2210      	movs	r2, #16
    688a:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    688c:	1cbb      	adds	r3, r7, #2
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	2b03      	cmp	r3, #3
    6892:	d11d      	bne.n	68d0 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    6894:	1cfb      	adds	r3, r7, #3
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	b25b      	sxtb	r3, r3
    689a:	2b00      	cmp	r3, #0
    689c:	da0c      	bge.n	68b8 <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	6819      	ldr	r1, [r3, #0]
    68a2:	230f      	movs	r3, #15
    68a4:	18fb      	adds	r3, r7, r3
    68a6:	781a      	ldrb	r2, [r3, #0]
    68a8:	2384      	movs	r3, #132	; 0x84
    68aa:	005b      	lsls	r3, r3, #1
    68ac:	0152      	lsls	r2, r2, #5
    68ae:	188a      	adds	r2, r1, r2
    68b0:	18d3      	adds	r3, r2, r3
    68b2:	2240      	movs	r2, #64	; 0x40
    68b4:	705a      	strb	r2, [r3, #1]
    68b6:	e00b      	b.n	68d0 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    68b8:	687b      	ldr	r3, [r7, #4]
    68ba:	6819      	ldr	r1, [r3, #0]
    68bc:	230f      	movs	r3, #15
    68be:	18fb      	adds	r3, r7, r3
    68c0:	781a      	ldrb	r2, [r3, #0]
    68c2:	2384      	movs	r3, #132	; 0x84
    68c4:	005b      	lsls	r3, r3, #1
    68c6:	0152      	lsls	r2, r2, #5
    68c8:	188a      	adds	r2, r1, r2
    68ca:	18d3      	adds	r3, r2, r3
    68cc:	2220      	movs	r2, #32
    68ce:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    68d0:	2300      	movs	r3, #0
}
    68d2:	1c18      	adds	r0, r3, #0
    68d4:	46bd      	mov	sp, r7
    68d6:	b004      	add	sp, #16
    68d8:	bd80      	pop	{r7, pc}
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	000083d4 	.word	0x000083d4

000068e0 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    68e0:	b580      	push	{r7, lr}
    68e2:	b084      	sub	sp, #16
    68e4:	af00      	add	r7, sp, #0
    68e6:	6078      	str	r0, [r7, #4]
    68e8:	1c08      	adds	r0, r1, #0
    68ea:	1c11      	adds	r1, r2, #0
    68ec:	1cfb      	adds	r3, r7, #3
    68ee:	1c02      	adds	r2, r0, #0
    68f0:	701a      	strb	r2, [r3, #0]
    68f2:	1cbb      	adds	r3, r7, #2
    68f4:	1c0a      	adds	r2, r1, #0
    68f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    68f8:	230f      	movs	r3, #15
    68fa:	18fb      	adds	r3, r7, r3
    68fc:	1cfa      	adds	r2, r7, #3
    68fe:	7812      	ldrb	r2, [r2, #0]
    6900:	210f      	movs	r1, #15
    6902:	400a      	ands	r2, r1
    6904:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6906:	230f      	movs	r3, #15
    6908:	18fb      	adds	r3, r7, r3
    690a:	781a      	ldrb	r2, [r3, #0]
    690c:	230f      	movs	r3, #15
    690e:	18fb      	adds	r3, r7, r3
    6910:	7819      	ldrb	r1, [r3, #0]
    6912:	6878      	ldr	r0, [r7, #4]
    6914:	23b0      	movs	r3, #176	; 0xb0
    6916:	005b      	lsls	r3, r3, #1
    6918:	1841      	adds	r1, r0, r1
    691a:	18cb      	adds	r3, r1, r3
    691c:	781b      	ldrb	r3, [r3, #0]
    691e:	b2d8      	uxtb	r0, r3
    6920:	1cbb      	adds	r3, r7, #2
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	4957      	ldr	r1, [pc, #348]	; (6a84 <usb_device_endpoint_disable_callback+0x1a4>)
    6926:	5ccb      	ldrb	r3, [r1, r3]
    6928:	b2db      	uxtb	r3, r3
    692a:	43db      	mvns	r3, r3
    692c:	b2d9      	uxtb	r1, r3
    692e:	1c03      	adds	r3, r0, #0
    6930:	400b      	ands	r3, r1
    6932:	b2db      	uxtb	r3, r3
    6934:	b2d8      	uxtb	r0, r3
    6936:	6879      	ldr	r1, [r7, #4]
    6938:	23b0      	movs	r3, #176	; 0xb0
    693a:	005b      	lsls	r3, r3, #1
    693c:	188a      	adds	r2, r1, r2
    693e:	18d3      	adds	r3, r2, r3
    6940:	1c02      	adds	r2, r0, #0
    6942:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6944:	1cbb      	adds	r3, r7, #2
    6946:	781b      	ldrb	r3, [r3, #0]
    6948:	2b00      	cmp	r3, #0
    694a:	d12f      	bne.n	69ac <usb_device_endpoint_disable_callback+0xcc>
		if (ep_num == 0) { // control endpoint
    694c:	230f      	movs	r3, #15
    694e:	18fb      	adds	r3, r7, r3
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	2b00      	cmp	r3, #0
    6954:	d10c      	bne.n	6970 <usb_device_endpoint_disable_callback+0x90>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	6819      	ldr	r1, [r3, #0]
    695a:	230f      	movs	r3, #15
    695c:	18fb      	adds	r3, r7, r3
    695e:	781a      	ldrb	r2, [r3, #0]
    6960:	2384      	movs	r3, #132	; 0x84
    6962:	005b      	lsls	r3, r3, #1
    6964:	0152      	lsls	r2, r2, #5
    6966:	188a      	adds	r2, r1, r2
    6968:	18d3      	adds	r3, r2, r3
    696a:	2203      	movs	r2, #3
    696c:	701a      	strb	r2, [r3, #0]
    696e:	e01d      	b.n	69ac <usb_device_endpoint_disable_callback+0xcc>
		} else if (ep & USB_EP_DIR_IN) {
    6970:	1cfb      	adds	r3, r7, #3
    6972:	781b      	ldrb	r3, [r3, #0]
    6974:	b25b      	sxtb	r3, r3
    6976:	2b00      	cmp	r3, #0
    6978:	da0c      	bge.n	6994 <usb_device_endpoint_disable_callback+0xb4>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    697a:	687b      	ldr	r3, [r7, #4]
    697c:	6819      	ldr	r1, [r3, #0]
    697e:	230f      	movs	r3, #15
    6980:	18fb      	adds	r3, r7, r3
    6982:	781a      	ldrb	r2, [r3, #0]
    6984:	2384      	movs	r3, #132	; 0x84
    6986:	005b      	lsls	r3, r3, #1
    6988:	0152      	lsls	r2, r2, #5
    698a:	188a      	adds	r2, r1, r2
    698c:	18d3      	adds	r3, r2, r3
    698e:	2202      	movs	r2, #2
    6990:	701a      	strb	r2, [r3, #0]
    6992:	e00b      	b.n	69ac <usb_device_endpoint_disable_callback+0xcc>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	6819      	ldr	r1, [r3, #0]
    6998:	230f      	movs	r3, #15
    699a:	18fb      	adds	r3, r7, r3
    699c:	781a      	ldrb	r2, [r3, #0]
    699e:	2384      	movs	r3, #132	; 0x84
    69a0:	005b      	lsls	r3, r3, #1
    69a2:	0152      	lsls	r2, r2, #5
    69a4:	188a      	adds	r2, r1, r2
    69a6:	18d3      	adds	r3, r2, r3
    69a8:	2201      	movs	r2, #1
    69aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    69ac:	1cbb      	adds	r3, r7, #2
    69ae:	781b      	ldrb	r3, [r3, #0]
    69b0:	2b01      	cmp	r3, #1
    69b2:	d12f      	bne.n	6a14 <usb_device_endpoint_disable_callback+0x134>
		if (ep_num == 0) { // control endpoint
    69b4:	230f      	movs	r3, #15
    69b6:	18fb      	adds	r3, r7, r3
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	2b00      	cmp	r3, #0
    69bc:	d10c      	bne.n	69d8 <usb_device_endpoint_disable_callback+0xf8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	6819      	ldr	r1, [r3, #0]
    69c2:	230f      	movs	r3, #15
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	781a      	ldrb	r2, [r3, #0]
    69c8:	2384      	movs	r3, #132	; 0x84
    69ca:	005b      	lsls	r3, r3, #1
    69cc:	0152      	lsls	r2, r2, #5
    69ce:	188a      	adds	r2, r1, r2
    69d0:	18d3      	adds	r3, r2, r3
    69d2:	220c      	movs	r2, #12
    69d4:	701a      	strb	r2, [r3, #0]
    69d6:	e01d      	b.n	6a14 <usb_device_endpoint_disable_callback+0x134>
		} else if (ep & USB_EP_DIR_IN) {
    69d8:	1cfb      	adds	r3, r7, #3
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	b25b      	sxtb	r3, r3
    69de:	2b00      	cmp	r3, #0
    69e0:	da0c      	bge.n	69fc <usb_device_endpoint_disable_callback+0x11c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	6819      	ldr	r1, [r3, #0]
    69e6:	230f      	movs	r3, #15
    69e8:	18fb      	adds	r3, r7, r3
    69ea:	781a      	ldrb	r2, [r3, #0]
    69ec:	2384      	movs	r3, #132	; 0x84
    69ee:	005b      	lsls	r3, r3, #1
    69f0:	0152      	lsls	r2, r2, #5
    69f2:	188a      	adds	r2, r1, r2
    69f4:	18d3      	adds	r3, r2, r3
    69f6:	2208      	movs	r2, #8
    69f8:	701a      	strb	r2, [r3, #0]
    69fa:	e00b      	b.n	6a14 <usb_device_endpoint_disable_callback+0x134>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	6819      	ldr	r1, [r3, #0]
    6a00:	230f      	movs	r3, #15
    6a02:	18fb      	adds	r3, r7, r3
    6a04:	781a      	ldrb	r2, [r3, #0]
    6a06:	2384      	movs	r3, #132	; 0x84
    6a08:	005b      	lsls	r3, r3, #1
    6a0a:	0152      	lsls	r2, r2, #5
    6a0c:	188a      	adds	r2, r1, r2
    6a0e:	18d3      	adds	r3, r2, r3
    6a10:	2204      	movs	r2, #4
    6a12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6a14:	1cbb      	adds	r3, r7, #2
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	2b02      	cmp	r3, #2
    6a1a:	d10b      	bne.n	6a34 <usb_device_endpoint_disable_callback+0x154>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	6819      	ldr	r1, [r3, #0]
    6a20:	230f      	movs	r3, #15
    6a22:	18fb      	adds	r3, r7, r3
    6a24:	781a      	ldrb	r2, [r3, #0]
    6a26:	2384      	movs	r3, #132	; 0x84
    6a28:	005b      	lsls	r3, r3, #1
    6a2a:	0152      	lsls	r2, r2, #5
    6a2c:	188a      	adds	r2, r1, r2
    6a2e:	18d3      	adds	r3, r2, r3
    6a30:	2210      	movs	r2, #16
    6a32:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6a34:	1cbb      	adds	r3, r7, #2
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	2b03      	cmp	r3, #3
    6a3a:	d11d      	bne.n	6a78 <usb_device_endpoint_disable_callback+0x198>
		if (ep & USB_EP_DIR_IN) {
    6a3c:	1cfb      	adds	r3, r7, #3
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	b25b      	sxtb	r3, r3
    6a42:	2b00      	cmp	r3, #0
    6a44:	da0c      	bge.n	6a60 <usb_device_endpoint_disable_callback+0x180>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	6819      	ldr	r1, [r3, #0]
    6a4a:	230f      	movs	r3, #15
    6a4c:	18fb      	adds	r3, r7, r3
    6a4e:	781a      	ldrb	r2, [r3, #0]
    6a50:	2384      	movs	r3, #132	; 0x84
    6a52:	005b      	lsls	r3, r3, #1
    6a54:	0152      	lsls	r2, r2, #5
    6a56:	188a      	adds	r2, r1, r2
    6a58:	18d3      	adds	r3, r2, r3
    6a5a:	2240      	movs	r2, #64	; 0x40
    6a5c:	701a      	strb	r2, [r3, #0]
    6a5e:	e00b      	b.n	6a78 <usb_device_endpoint_disable_callback+0x198>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	6819      	ldr	r1, [r3, #0]
    6a64:	230f      	movs	r3, #15
    6a66:	18fb      	adds	r3, r7, r3
    6a68:	781a      	ldrb	r2, [r3, #0]
    6a6a:	2384      	movs	r3, #132	; 0x84
    6a6c:	005b      	lsls	r3, r3, #1
    6a6e:	0152      	lsls	r2, r2, #5
    6a70:	188a      	adds	r2, r1, r2
    6a72:	18d3      	adds	r3, r2, r3
    6a74:	2220      	movs	r2, #32
    6a76:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    6a78:	2300      	movs	r3, #0
}
    6a7a:	1c18      	adds	r0, r3, #0
    6a7c:	46bd      	mov	sp, r7
    6a7e:	b004      	add	sp, #16
    6a80:	bd80      	pop	{r7, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	000083d4 	.word	0x000083d4

00006a88 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b082      	sub	sp, #8
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    6a90:	687b      	ldr	r3, [r7, #4]
    6a92:	2200      	movs	r2, #0
    6a94:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	2200      	movs	r2, #0
    6a9a:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	2200      	movs	r2, #0
    6aa0:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	2201      	movs	r2, #1
    6aa6:	70da      	strb	r2, [r3, #3]
}
    6aa8:	46bd      	mov	sp, r7
    6aaa:	b002      	add	sp, #8
    6aac:	bd80      	pop	{r7, pc}
    6aae:	46c0      	nop			; (mov r8, r8)

00006ab0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    6ab0:	b590      	push	{r4, r7, lr}
    6ab2:	b085      	sub	sp, #20
    6ab4:	af00      	add	r7, sp, #0
    6ab6:	6078      	str	r0, [r7, #4]
    6ab8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    6aba:	683b      	ldr	r3, [r7, #0]
    6abc:	781a      	ldrb	r2, [r3, #0]
    6abe:	230f      	movs	r3, #15
    6ac0:	18fb      	adds	r3, r7, r3
    6ac2:	210f      	movs	r1, #15
    6ac4:	400a      	ands	r2, r1
    6ac6:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6ac8:	683b      	ldr	r3, [r7, #0]
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	b2db      	uxtb	r3, r3
    6ace:	09db      	lsrs	r3, r3, #7
    6ad0:	b2da      	uxtb	r2, r3
    6ad2:	230e      	movs	r3, #14
    6ad4:	18fb      	adds	r3, r7, r3
    6ad6:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    6ad8:	683b      	ldr	r3, [r7, #0]
    6ada:	78db      	ldrb	r3, [r3, #3]
    6adc:	2b04      	cmp	r3, #4
    6ade:	d900      	bls.n	6ae2 <usb_device_endpoint_set_config+0x32>
    6ae0:	e1f7      	b.n	6ed2 <usb_device_endpoint_set_config+0x422>
    6ae2:	009a      	lsls	r2, r3, #2
    6ae4:	4bdf      	ldr	r3, [pc, #892]	; (6e64 <usb_device_endpoint_set_config+0x3b4>)
    6ae6:	18d3      	adds	r3, r2, r3
    6ae8:	681b      	ldr	r3, [r3, #0]
    6aea:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    6aec:	687b      	ldr	r3, [r7, #4]
    6aee:	681b      	ldr	r3, [r3, #0]
    6af0:	220f      	movs	r2, #15
    6af2:	18ba      	adds	r2, r7, r2
    6af4:	7812      	ldrb	r2, [r2, #0]
    6af6:	3208      	adds	r2, #8
    6af8:	0152      	lsls	r2, r2, #5
    6afa:	2100      	movs	r1, #0
    6afc:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    6afe:	2300      	movs	r3, #0
    6b00:	e23c      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	220f      	movs	r2, #15
    6b08:	18ba      	adds	r2, r7, r2
    6b0a:	7812      	ldrb	r2, [r2, #0]
    6b0c:	3208      	adds	r2, #8
    6b0e:	0152      	lsls	r2, r2, #5
    6b10:	5cd3      	ldrb	r3, [r2, r3]
    6b12:	b2db      	uxtb	r3, r3
    6b14:	1c1a      	adds	r2, r3, #0
    6b16:	2307      	movs	r3, #7
    6b18:	4013      	ands	r3, r2
    6b1a:	d12e      	bne.n	6b7a <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	220f      	movs	r2, #15
    6b22:	18ba      	adds	r2, r7, r2
    6b24:	7812      	ldrb	r2, [r2, #0]
    6b26:	3208      	adds	r2, #8
    6b28:	0152      	lsls	r2, r2, #5
    6b2a:	5cd3      	ldrb	r3, [r2, r3]
    6b2c:	b2db      	uxtb	r3, r3
    6b2e:	1c1a      	adds	r2, r3, #0
    6b30:	2370      	movs	r3, #112	; 0x70
    6b32:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6b34:	d121      	bne.n	6b7a <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	681b      	ldr	r3, [r3, #0]
    6b3a:	220f      	movs	r2, #15
    6b3c:	18ba      	adds	r2, r7, r2
    6b3e:	7812      	ldrb	r2, [r2, #0]
    6b40:	3208      	adds	r2, #8
    6b42:	0152      	lsls	r2, r2, #5
    6b44:	2111      	movs	r1, #17
    6b46:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	681a      	ldr	r2, [r3, #0]
    6b4c:	230f      	movs	r3, #15
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	3308      	adds	r3, #8
    6b54:	015b      	lsls	r3, r3, #5
    6b56:	18d3      	adds	r3, r2, r3
    6b58:	2240      	movs	r2, #64	; 0x40
    6b5a:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	681a      	ldr	r2, [r3, #0]
    6b60:	230f      	movs	r3, #15
    6b62:	18fb      	adds	r3, r7, r3
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	3308      	adds	r3, #8
    6b68:	015b      	lsls	r3, r3, #5
    6b6a:	18d3      	adds	r3, r2, r3
    6b6c:	2280      	movs	r2, #128	; 0x80
    6b6e:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    6b70:	683b      	ldr	r3, [r7, #0]
    6b72:	789b      	ldrb	r3, [r3, #2]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d102      	bne.n	6b7e <usb_device_endpoint_set_config+0xce>
    6b78:	e026      	b.n	6bc8 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    6b7a:	231c      	movs	r3, #28
    6b7c:	e1fe      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6b7e:	230f      	movs	r3, #15
    6b80:	18fb      	adds	r3, r7, r3
    6b82:	7818      	ldrb	r0, [r3, #0]
    6b84:	230f      	movs	r3, #15
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	781b      	ldrb	r3, [r3, #0]
    6b8a:	4ab7      	ldr	r2, [pc, #732]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6b8c:	015b      	lsls	r3, r3, #5
    6b8e:	18d3      	adds	r3, r2, r3
    6b90:	685b      	ldr	r3, [r3, #4]
    6b92:	2280      	movs	r2, #128	; 0x80
    6b94:	0612      	lsls	r2, r2, #24
    6b96:	431a      	orrs	r2, r3
    6b98:	49b3      	ldr	r1, [pc, #716]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6b9a:	0143      	lsls	r3, r0, #5
    6b9c:	18cb      	adds	r3, r1, r3
    6b9e:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6ba0:	230f      	movs	r3, #15
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	7818      	ldrb	r0, [r3, #0]
    6ba6:	230f      	movs	r3, #15
    6ba8:	18fb      	adds	r3, r7, r3
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	4aae      	ldr	r2, [pc, #696]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6bae:	015b      	lsls	r3, r3, #5
    6bb0:	18d3      	adds	r3, r2, r3
    6bb2:	3310      	adds	r3, #16
    6bb4:	685b      	ldr	r3, [r3, #4]
    6bb6:	2280      	movs	r2, #128	; 0x80
    6bb8:	0612      	lsls	r2, r2, #24
    6bba:	431a      	orrs	r2, r3
    6bbc:	49aa      	ldr	r1, [pc, #680]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6bbe:	0143      	lsls	r3, r0, #5
    6bc0:	18cb      	adds	r3, r1, r3
    6bc2:	3310      	adds	r3, #16
    6bc4:	605a      	str	r2, [r3, #4]
    6bc6:	e021      	b.n	6c0c <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6bc8:	230f      	movs	r3, #15
    6bca:	18fb      	adds	r3, r7, r3
    6bcc:	7818      	ldrb	r0, [r3, #0]
    6bce:	230f      	movs	r3, #15
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	4aa4      	ldr	r2, [pc, #656]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6bd6:	015b      	lsls	r3, r3, #5
    6bd8:	18d3      	adds	r3, r2, r3
    6bda:	685b      	ldr	r3, [r3, #4]
    6bdc:	005b      	lsls	r3, r3, #1
    6bde:	085a      	lsrs	r2, r3, #1
    6be0:	49a1      	ldr	r1, [pc, #644]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6be2:	0143      	lsls	r3, r0, #5
    6be4:	18cb      	adds	r3, r1, r3
    6be6:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6be8:	230f      	movs	r3, #15
    6bea:	18fb      	adds	r3, r7, r3
    6bec:	7818      	ldrb	r0, [r3, #0]
    6bee:	230f      	movs	r3, #15
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	4a9c      	ldr	r2, [pc, #624]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6bf6:	015b      	lsls	r3, r3, #5
    6bf8:	18d3      	adds	r3, r2, r3
    6bfa:	3310      	adds	r3, #16
    6bfc:	685b      	ldr	r3, [r3, #4]
    6bfe:	005b      	lsls	r3, r3, #1
    6c00:	085a      	lsrs	r2, r3, #1
    6c02:	4999      	ldr	r1, [pc, #612]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6c04:	0143      	lsls	r3, r0, #5
    6c06:	18cb      	adds	r3, r1, r3
    6c08:	3310      	adds	r3, #16
    6c0a:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6c0c:	230f      	movs	r3, #15
    6c0e:	18fb      	adds	r3, r7, r3
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	683a      	ldr	r2, [r7, #0]
    6c14:	7852      	ldrb	r2, [r2, #1]
    6c16:	1c11      	adds	r1, r2, #0
    6c18:	2207      	movs	r2, #7
    6c1a:	400a      	ands	r2, r1
    6c1c:	b2d2      	uxtb	r2, r2
    6c1e:	4992      	ldr	r1, [pc, #584]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6c20:	015b      	lsls	r3, r3, #5
    6c22:	18cb      	adds	r3, r1, r3
    6c24:	2107      	movs	r1, #7
    6c26:	400a      	ands	r2, r1
    6c28:	0712      	lsls	r2, r2, #28
    6c2a:	6859      	ldr	r1, [r3, #4]
    6c2c:	488f      	ldr	r0, [pc, #572]	; (6e6c <usb_device_endpoint_set_config+0x3bc>)
    6c2e:	4001      	ands	r1, r0
    6c30:	430a      	orrs	r2, r1
    6c32:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6c34:	230f      	movs	r3, #15
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	683a      	ldr	r2, [r7, #0]
    6c3c:	7852      	ldrb	r2, [r2, #1]
    6c3e:	1c11      	adds	r1, r2, #0
    6c40:	2207      	movs	r2, #7
    6c42:	400a      	ands	r2, r1
    6c44:	b2d2      	uxtb	r2, r2
    6c46:	4988      	ldr	r1, [pc, #544]	; (6e68 <usb_device_endpoint_set_config+0x3b8>)
    6c48:	015b      	lsls	r3, r3, #5
    6c4a:	18cb      	adds	r3, r1, r3
    6c4c:	3310      	adds	r3, #16
    6c4e:	2107      	movs	r1, #7
    6c50:	400a      	ands	r2, r1
    6c52:	0712      	lsls	r2, r2, #28
    6c54:	6859      	ldr	r1, [r3, #4]
    6c56:	4885      	ldr	r0, [pc, #532]	; (6e6c <usb_device_endpoint_set_config+0x3bc>)
    6c58:	4001      	ands	r1, r0
    6c5a:	430a      	orrs	r2, r1
    6c5c:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    6c5e:	2300      	movs	r3, #0
    6c60:	e18c      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6c62:	230e      	movs	r3, #14
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d02f      	beq.n	6ccc <usb_device_endpoint_set_config+0x21c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	681b      	ldr	r3, [r3, #0]
    6c70:	220f      	movs	r2, #15
    6c72:	18ba      	adds	r2, r7, r2
    6c74:	7812      	ldrb	r2, [r2, #0]
    6c76:	3208      	adds	r2, #8
    6c78:	0152      	lsls	r2, r2, #5
    6c7a:	5cd3      	ldrb	r3, [r2, r3]
    6c7c:	b2db      	uxtb	r3, r3
    6c7e:	1c1a      	adds	r2, r3, #0
    6c80:	2370      	movs	r3, #112	; 0x70
    6c82:	4013      	ands	r3, r2
    6c84:	d120      	bne.n	6cc8 <usb_device_endpoint_set_config+0x218>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	681a      	ldr	r2, [r3, #0]
    6c8a:	230f      	movs	r3, #15
    6c8c:	18fb      	adds	r3, r7, r3
    6c8e:	7819      	ldrb	r1, [r3, #0]
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	681b      	ldr	r3, [r3, #0]
    6c94:	200f      	movs	r0, #15
    6c96:	1838      	adds	r0, r7, r0
    6c98:	7800      	ldrb	r0, [r0, #0]
    6c9a:	3008      	adds	r0, #8
    6c9c:	0140      	lsls	r0, r0, #5
    6c9e:	5cc3      	ldrb	r3, [r0, r3]
    6ca0:	b2db      	uxtb	r3, r3
    6ca2:	2020      	movs	r0, #32
    6ca4:	4303      	orrs	r3, r0
    6ca6:	b2d8      	uxtb	r0, r3
    6ca8:	1c0b      	adds	r3, r1, #0
    6caa:	3308      	adds	r3, #8
    6cac:	015b      	lsls	r3, r3, #5
    6cae:	1c01      	adds	r1, r0, #0
    6cb0:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	681a      	ldr	r2, [r3, #0]
    6cb6:	230f      	movs	r3, #15
    6cb8:	18fb      	adds	r3, r7, r3
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	3308      	adds	r3, #8
    6cbe:	015b      	lsls	r3, r3, #5
    6cc0:	18d3      	adds	r3, r2, r3
    6cc2:	2280      	movs	r2, #128	; 0x80
    6cc4:	711a      	strb	r2, [r3, #4]
    6cc6:	e031      	b.n	6d2c <usb_device_endpoint_set_config+0x27c>
				} else {
					return STATUS_ERR_DENIED;
    6cc8:	231c      	movs	r3, #28
    6cca:	e157      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	681b      	ldr	r3, [r3, #0]
    6cd0:	220f      	movs	r2, #15
    6cd2:	18ba      	adds	r2, r7, r2
    6cd4:	7812      	ldrb	r2, [r2, #0]
    6cd6:	3208      	adds	r2, #8
    6cd8:	0152      	lsls	r2, r2, #5
    6cda:	5cd3      	ldrb	r3, [r2, r3]
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	1c1a      	adds	r2, r3, #0
    6ce0:	2307      	movs	r3, #7
    6ce2:	4013      	ands	r3, r2
    6ce4:	d120      	bne.n	6d28 <usb_device_endpoint_set_config+0x278>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	681a      	ldr	r2, [r3, #0]
    6cea:	230f      	movs	r3, #15
    6cec:	18fb      	adds	r3, r7, r3
    6cee:	7819      	ldrb	r1, [r3, #0]
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	681b      	ldr	r3, [r3, #0]
    6cf4:	200f      	movs	r0, #15
    6cf6:	1838      	adds	r0, r7, r0
    6cf8:	7800      	ldrb	r0, [r0, #0]
    6cfa:	3008      	adds	r0, #8
    6cfc:	0140      	lsls	r0, r0, #5
    6cfe:	5cc3      	ldrb	r3, [r0, r3]
    6d00:	b2db      	uxtb	r3, r3
    6d02:	2002      	movs	r0, #2
    6d04:	4303      	orrs	r3, r0
    6d06:	b2d8      	uxtb	r0, r3
    6d08:	1c0b      	adds	r3, r1, #0
    6d0a:	3308      	adds	r3, #8
    6d0c:	015b      	lsls	r3, r3, #5
    6d0e:	1c01      	adds	r1, r0, #0
    6d10:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	681a      	ldr	r2, [r3, #0]
    6d16:	230f      	movs	r3, #15
    6d18:	18fb      	adds	r3, r7, r3
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	3308      	adds	r3, #8
    6d1e:	015b      	lsls	r3, r3, #5
    6d20:	18d3      	adds	r3, r2, r3
    6d22:	2240      	movs	r2, #64	; 0x40
    6d24:	715a      	strb	r2, [r3, #5]
    6d26:	e001      	b.n	6d2c <usb_device_endpoint_set_config+0x27c>
				} else {
					return STATUS_ERR_DENIED;
    6d28:	231c      	movs	r3, #28
    6d2a:	e127      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    6d2c:	e0d2      	b.n	6ed4 <usb_device_endpoint_set_config+0x424>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    6d2e:	230e      	movs	r3, #14
    6d30:	18fb      	adds	r3, r7, r3
    6d32:	781b      	ldrb	r3, [r3, #0]
    6d34:	2b00      	cmp	r3, #0
    6d36:	d02f      	beq.n	6d98 <usb_device_endpoint_set_config+0x2e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	220f      	movs	r2, #15
    6d3e:	18ba      	adds	r2, r7, r2
    6d40:	7812      	ldrb	r2, [r2, #0]
    6d42:	3208      	adds	r2, #8
    6d44:	0152      	lsls	r2, r2, #5
    6d46:	5cd3      	ldrb	r3, [r2, r3]
    6d48:	b2db      	uxtb	r3, r3
    6d4a:	1c1a      	adds	r2, r3, #0
    6d4c:	2370      	movs	r3, #112	; 0x70
    6d4e:	4013      	ands	r3, r2
    6d50:	d120      	bne.n	6d94 <usb_device_endpoint_set_config+0x2e4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	681a      	ldr	r2, [r3, #0]
    6d56:	230f      	movs	r3, #15
    6d58:	18fb      	adds	r3, r7, r3
    6d5a:	7819      	ldrb	r1, [r3, #0]
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	200f      	movs	r0, #15
    6d62:	1838      	adds	r0, r7, r0
    6d64:	7800      	ldrb	r0, [r0, #0]
    6d66:	3008      	adds	r0, #8
    6d68:	0140      	lsls	r0, r0, #5
    6d6a:	5cc3      	ldrb	r3, [r0, r3]
    6d6c:	b2db      	uxtb	r3, r3
    6d6e:	2030      	movs	r0, #48	; 0x30
    6d70:	4303      	orrs	r3, r0
    6d72:	b2d8      	uxtb	r0, r3
    6d74:	1c0b      	adds	r3, r1, #0
    6d76:	3308      	adds	r3, #8
    6d78:	015b      	lsls	r3, r3, #5
    6d7a:	1c01      	adds	r1, r0, #0
    6d7c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	681a      	ldr	r2, [r3, #0]
    6d82:	230f      	movs	r3, #15
    6d84:	18fb      	adds	r3, r7, r3
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	3308      	adds	r3, #8
    6d8a:	015b      	lsls	r3, r3, #5
    6d8c:	18d3      	adds	r3, r2, r3
    6d8e:	2280      	movs	r2, #128	; 0x80
    6d90:	711a      	strb	r2, [r3, #4]
    6d92:	e031      	b.n	6df8 <usb_device_endpoint_set_config+0x348>
				} else {
					return STATUS_ERR_DENIED;
    6d94:	231c      	movs	r3, #28
    6d96:	e0f1      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	220f      	movs	r2, #15
    6d9e:	18ba      	adds	r2, r7, r2
    6da0:	7812      	ldrb	r2, [r2, #0]
    6da2:	3208      	adds	r2, #8
    6da4:	0152      	lsls	r2, r2, #5
    6da6:	5cd3      	ldrb	r3, [r2, r3]
    6da8:	b2db      	uxtb	r3, r3
    6daa:	1c1a      	adds	r2, r3, #0
    6dac:	2307      	movs	r3, #7
    6dae:	4013      	ands	r3, r2
    6db0:	d120      	bne.n	6df4 <usb_device_endpoint_set_config+0x344>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	681a      	ldr	r2, [r3, #0]
    6db6:	230f      	movs	r3, #15
    6db8:	18fb      	adds	r3, r7, r3
    6dba:	7819      	ldrb	r1, [r3, #0]
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	200f      	movs	r0, #15
    6dc2:	1838      	adds	r0, r7, r0
    6dc4:	7800      	ldrb	r0, [r0, #0]
    6dc6:	3008      	adds	r0, #8
    6dc8:	0140      	lsls	r0, r0, #5
    6dca:	5cc3      	ldrb	r3, [r0, r3]
    6dcc:	b2db      	uxtb	r3, r3
    6dce:	2003      	movs	r0, #3
    6dd0:	4303      	orrs	r3, r0
    6dd2:	b2d8      	uxtb	r0, r3
    6dd4:	1c0b      	adds	r3, r1, #0
    6dd6:	3308      	adds	r3, #8
    6dd8:	015b      	lsls	r3, r3, #5
    6dda:	1c01      	adds	r1, r0, #0
    6ddc:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	681a      	ldr	r2, [r3, #0]
    6de2:	230f      	movs	r3, #15
    6de4:	18fb      	adds	r3, r7, r3
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	3308      	adds	r3, #8
    6dea:	015b      	lsls	r3, r3, #5
    6dec:	18d3      	adds	r3, r2, r3
    6dee:	2240      	movs	r2, #64	; 0x40
    6df0:	715a      	strb	r2, [r3, #5]
    6df2:	e001      	b.n	6df8 <usb_device_endpoint_set_config+0x348>
				} else {
					return STATUS_ERR_DENIED;
    6df4:	231c      	movs	r3, #28
    6df6:	e0c1      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    6df8:	e06c      	b.n	6ed4 <usb_device_endpoint_set_config+0x424>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    6dfa:	230e      	movs	r3, #14
    6dfc:	18fb      	adds	r3, r7, r3
    6dfe:	781b      	ldrb	r3, [r3, #0]
    6e00:	2b00      	cmp	r3, #0
    6e02:	d035      	beq.n	6e70 <usb_device_endpoint_set_config+0x3c0>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	681b      	ldr	r3, [r3, #0]
    6e08:	220f      	movs	r2, #15
    6e0a:	18ba      	adds	r2, r7, r2
    6e0c:	7812      	ldrb	r2, [r2, #0]
    6e0e:	3208      	adds	r2, #8
    6e10:	0152      	lsls	r2, r2, #5
    6e12:	5cd3      	ldrb	r3, [r2, r3]
    6e14:	b2db      	uxtb	r3, r3
    6e16:	1c1a      	adds	r2, r3, #0
    6e18:	2370      	movs	r3, #112	; 0x70
    6e1a:	4013      	ands	r3, r2
    6e1c:	d120      	bne.n	6e60 <usb_device_endpoint_set_config+0x3b0>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	681a      	ldr	r2, [r3, #0]
    6e22:	230f      	movs	r3, #15
    6e24:	18fb      	adds	r3, r7, r3
    6e26:	7819      	ldrb	r1, [r3, #0]
    6e28:	687b      	ldr	r3, [r7, #4]
    6e2a:	681b      	ldr	r3, [r3, #0]
    6e2c:	200f      	movs	r0, #15
    6e2e:	1838      	adds	r0, r7, r0
    6e30:	7800      	ldrb	r0, [r0, #0]
    6e32:	3008      	adds	r0, #8
    6e34:	0140      	lsls	r0, r0, #5
    6e36:	5cc3      	ldrb	r3, [r0, r3]
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	2040      	movs	r0, #64	; 0x40
    6e3c:	4303      	orrs	r3, r0
    6e3e:	b2d8      	uxtb	r0, r3
    6e40:	1c0b      	adds	r3, r1, #0
    6e42:	3308      	adds	r3, #8
    6e44:	015b      	lsls	r3, r3, #5
    6e46:	1c01      	adds	r1, r0, #0
    6e48:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	681a      	ldr	r2, [r3, #0]
    6e4e:	230f      	movs	r3, #15
    6e50:	18fb      	adds	r3, r7, r3
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	3308      	adds	r3, #8
    6e56:	015b      	lsls	r3, r3, #5
    6e58:	18d3      	adds	r3, r2, r3
    6e5a:	2280      	movs	r2, #128	; 0x80
    6e5c:	711a      	strb	r2, [r3, #4]
    6e5e:	e037      	b.n	6ed0 <usb_device_endpoint_set_config+0x420>
				} else {
					return STATUS_ERR_DENIED;
    6e60:	231c      	movs	r3, #28
    6e62:	e08b      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
    6e64:	000083d8 	.word	0x000083d8
    6e68:	20000464 	.word	0x20000464
    6e6c:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	681b      	ldr	r3, [r3, #0]
    6e74:	220f      	movs	r2, #15
    6e76:	18ba      	adds	r2, r7, r2
    6e78:	7812      	ldrb	r2, [r2, #0]
    6e7a:	3208      	adds	r2, #8
    6e7c:	0152      	lsls	r2, r2, #5
    6e7e:	5cd3      	ldrb	r3, [r2, r3]
    6e80:	b2db      	uxtb	r3, r3
    6e82:	1c1a      	adds	r2, r3, #0
    6e84:	2307      	movs	r3, #7
    6e86:	4013      	ands	r3, r2
    6e88:	d120      	bne.n	6ecc <usb_device_endpoint_set_config+0x41c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	681a      	ldr	r2, [r3, #0]
    6e8e:	230f      	movs	r3, #15
    6e90:	18fb      	adds	r3, r7, r3
    6e92:	7819      	ldrb	r1, [r3, #0]
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	681b      	ldr	r3, [r3, #0]
    6e98:	200f      	movs	r0, #15
    6e9a:	1838      	adds	r0, r7, r0
    6e9c:	7800      	ldrb	r0, [r0, #0]
    6e9e:	3008      	adds	r0, #8
    6ea0:	0140      	lsls	r0, r0, #5
    6ea2:	5cc3      	ldrb	r3, [r0, r3]
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	2004      	movs	r0, #4
    6ea8:	4303      	orrs	r3, r0
    6eaa:	b2d8      	uxtb	r0, r3
    6eac:	1c0b      	adds	r3, r1, #0
    6eae:	3308      	adds	r3, #8
    6eb0:	015b      	lsls	r3, r3, #5
    6eb2:	1c01      	adds	r1, r0, #0
    6eb4:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	681a      	ldr	r2, [r3, #0]
    6eba:	230f      	movs	r3, #15
    6ebc:	18fb      	adds	r3, r7, r3
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	3308      	adds	r3, #8
    6ec2:	015b      	lsls	r3, r3, #5
    6ec4:	18d3      	adds	r3, r2, r3
    6ec6:	2240      	movs	r2, #64	; 0x40
    6ec8:	715a      	strb	r2, [r3, #5]
    6eca:	e001      	b.n	6ed0 <usb_device_endpoint_set_config+0x420>
				} else {
					return STATUS_ERR_DENIED;
    6ecc:	231c      	movs	r3, #28
    6ece:	e055      	b.n	6f7c <usb_device_endpoint_set_config+0x4cc>
				}
			}
			break;
    6ed0:	e000      	b.n	6ed4 <usb_device_endpoint_set_config+0x424>

		default:
			break;
    6ed2:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6ed4:	230f      	movs	r3, #15
    6ed6:	18fb      	adds	r3, r7, r3
    6ed8:	7818      	ldrb	r0, [r3, #0]
    6eda:	230e      	movs	r3, #14
    6edc:	18fb      	adds	r3, r7, r3
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	683a      	ldr	r2, [r7, #0]
    6ee2:	7852      	ldrb	r2, [r2, #1]
    6ee4:	1c11      	adds	r1, r2, #0
    6ee6:	2207      	movs	r2, #7
    6ee8:	400a      	ands	r2, r1
    6eea:	b2d2      	uxtb	r2, r2
    6eec:	4925      	ldr	r1, [pc, #148]	; (6f84 <usb_device_endpoint_set_config+0x4d4>)
    6eee:	0040      	lsls	r0, r0, #1
    6ef0:	18c3      	adds	r3, r0, r3
    6ef2:	011b      	lsls	r3, r3, #4
    6ef4:	18cb      	adds	r3, r1, r3
    6ef6:	2107      	movs	r1, #7
    6ef8:	400a      	ands	r2, r1
    6efa:	0712      	lsls	r2, r2, #28
    6efc:	6859      	ldr	r1, [r3, #4]
    6efe:	4822      	ldr	r0, [pc, #136]	; (6f88 <usb_device_endpoint_set_config+0x4d8>)
    6f00:	4001      	ands	r1, r0
    6f02:	430a      	orrs	r2, r1
    6f04:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    6f06:	683b      	ldr	r3, [r7, #0]
    6f08:	789b      	ldrb	r3, [r3, #2]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d01b      	beq.n	6f46 <usb_device_endpoint_set_config+0x496>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6f0e:	230f      	movs	r3, #15
    6f10:	18fb      	adds	r3, r7, r3
    6f12:	781c      	ldrb	r4, [r3, #0]
    6f14:	230e      	movs	r3, #14
    6f16:	18fb      	adds	r3, r7, r3
    6f18:	7818      	ldrb	r0, [r3, #0]
    6f1a:	230f      	movs	r3, #15
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	7819      	ldrb	r1, [r3, #0]
    6f20:	230e      	movs	r3, #14
    6f22:	18fb      	adds	r3, r7, r3
    6f24:	781b      	ldrb	r3, [r3, #0]
    6f26:	4a17      	ldr	r2, [pc, #92]	; (6f84 <usb_device_endpoint_set_config+0x4d4>)
    6f28:	0049      	lsls	r1, r1, #1
    6f2a:	18cb      	adds	r3, r1, r3
    6f2c:	011b      	lsls	r3, r3, #4
    6f2e:	18d3      	adds	r3, r2, r3
    6f30:	685b      	ldr	r3, [r3, #4]
    6f32:	2280      	movs	r2, #128	; 0x80
    6f34:	0612      	lsls	r2, r2, #24
    6f36:	431a      	orrs	r2, r3
    6f38:	4912      	ldr	r1, [pc, #72]	; (6f84 <usb_device_endpoint_set_config+0x4d4>)
    6f3a:	0063      	lsls	r3, r4, #1
    6f3c:	181b      	adds	r3, r3, r0
    6f3e:	011b      	lsls	r3, r3, #4
    6f40:	18cb      	adds	r3, r1, r3
    6f42:	605a      	str	r2, [r3, #4]
    6f44:	e019      	b.n	6f7a <usb_device_endpoint_set_config+0x4ca>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6f46:	230f      	movs	r3, #15
    6f48:	18fb      	adds	r3, r7, r3
    6f4a:	781c      	ldrb	r4, [r3, #0]
    6f4c:	230e      	movs	r3, #14
    6f4e:	18fb      	adds	r3, r7, r3
    6f50:	7818      	ldrb	r0, [r3, #0]
    6f52:	230f      	movs	r3, #15
    6f54:	18fb      	adds	r3, r7, r3
    6f56:	7819      	ldrb	r1, [r3, #0]
    6f58:	230e      	movs	r3, #14
    6f5a:	18fb      	adds	r3, r7, r3
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	4a09      	ldr	r2, [pc, #36]	; (6f84 <usb_device_endpoint_set_config+0x4d4>)
    6f60:	0049      	lsls	r1, r1, #1
    6f62:	18cb      	adds	r3, r1, r3
    6f64:	011b      	lsls	r3, r3, #4
    6f66:	18d3      	adds	r3, r2, r3
    6f68:	685b      	ldr	r3, [r3, #4]
    6f6a:	005b      	lsls	r3, r3, #1
    6f6c:	085a      	lsrs	r2, r3, #1
    6f6e:	4905      	ldr	r1, [pc, #20]	; (6f84 <usb_device_endpoint_set_config+0x4d4>)
    6f70:	0063      	lsls	r3, r4, #1
    6f72:	181b      	adds	r3, r3, r0
    6f74:	011b      	lsls	r3, r3, #4
    6f76:	18cb      	adds	r3, r1, r3
    6f78:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6f7a:	2300      	movs	r3, #0
}
    6f7c:	1c18      	adds	r0, r3, #0
    6f7e:	46bd      	mov	sp, r7
    6f80:	b005      	add	sp, #20
    6f82:	bd90      	pop	{r4, r7, pc}
    6f84:	20000464 	.word	0x20000464
    6f88:	8fffffff 	.word	0x8fffffff

00006f8c <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b084      	sub	sp, #16
    6f90:	af00      	add	r7, sp, #0
    6f92:	6078      	str	r0, [r7, #4]
    6f94:	1c0a      	adds	r2, r1, #0
    6f96:	1cfb      	adds	r3, r7, #3
    6f98:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    6f9a:	230f      	movs	r3, #15
    6f9c:	18fb      	adds	r3, r7, r3
    6f9e:	1cfa      	adds	r2, r7, #3
    6fa0:	7812      	ldrb	r2, [r2, #0]
    6fa2:	210f      	movs	r1, #15
    6fa4:	400a      	ands	r2, r1
    6fa6:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6fa8:	1cfb      	adds	r3, r7, #3
    6faa:	781b      	ldrb	r3, [r3, #0]
    6fac:	b25b      	sxtb	r3, r3
    6fae:	2b00      	cmp	r3, #0
    6fb0:	da14      	bge.n	6fdc <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	681a      	ldr	r2, [r3, #0]
    6fb6:	230f      	movs	r3, #15
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	3308      	adds	r3, #8
    6fbe:	015b      	lsls	r3, r3, #5
    6fc0:	18d3      	adds	r3, r2, r3
    6fc2:	2280      	movs	r2, #128	; 0x80
    6fc4:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	681a      	ldr	r2, [r3, #0]
    6fca:	230f      	movs	r3, #15
    6fcc:	18fb      	adds	r3, r7, r3
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	3308      	adds	r3, #8
    6fd2:	015b      	lsls	r3, r3, #5
    6fd4:	18d3      	adds	r3, r2, r3
    6fd6:	2202      	movs	r2, #2
    6fd8:	71da      	strb	r2, [r3, #7]
    6fda:	e013      	b.n	7004 <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	681a      	ldr	r2, [r3, #0]
    6fe0:	230f      	movs	r3, #15
    6fe2:	18fb      	adds	r3, r7, r3
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	3308      	adds	r3, #8
    6fe8:	015b      	lsls	r3, r3, #5
    6fea:	18d3      	adds	r3, r2, r3
    6fec:	2240      	movs	r2, #64	; 0x40
    6fee:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	681a      	ldr	r2, [r3, #0]
    6ff4:	230f      	movs	r3, #15
    6ff6:	18fb      	adds	r3, r7, r3
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	3308      	adds	r3, #8
    6ffc:	015b      	lsls	r3, r3, #5
    6ffe:	18d3      	adds	r3, r2, r3
    7000:	2201      	movs	r2, #1
    7002:	71da      	strb	r2, [r3, #7]
	}
}
    7004:	46bd      	mov	sp, r7
    7006:	b004      	add	sp, #16
    7008:	bd80      	pop	{r7, pc}
    700a:	46c0      	nop			; (mov r8, r8)

0000700c <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    700c:	b580      	push	{r7, lr}
    700e:	b084      	sub	sp, #16
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
    7014:	1c0a      	adds	r2, r1, #0
    7016:	1cfb      	adds	r3, r7, #3
    7018:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    701a:	230f      	movs	r3, #15
    701c:	18fb      	adds	r3, r7, r3
    701e:	1cfa      	adds	r2, r7, #3
    7020:	7812      	ldrb	r2, [r2, #0]
    7022:	210f      	movs	r1, #15
    7024:	400a      	ands	r2, r1
    7026:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7028:	1cfb      	adds	r3, r7, #3
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b25b      	sxtb	r3, r3
    702e:	2b00      	cmp	r3, #0
    7030:	da10      	bge.n	7054 <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    7032:	687b      	ldr	r3, [r7, #4]
    7034:	681a      	ldr	r2, [r3, #0]
    7036:	230f      	movs	r3, #15
    7038:	18fb      	adds	r3, r7, r3
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	3308      	adds	r3, #8
    703e:	015b      	lsls	r3, r3, #5
    7040:	18d3      	adds	r3, r2, r3
    7042:	799b      	ldrb	r3, [r3, #6]
    7044:	b2db      	uxtb	r3, r3
    7046:	1c1a      	adds	r2, r3, #0
    7048:	2320      	movs	r3, #32
    704a:	4013      	ands	r3, r2
    704c:	1e5a      	subs	r2, r3, #1
    704e:	4193      	sbcs	r3, r2
    7050:	b2db      	uxtb	r3, r3
    7052:	e00f      	b.n	7074 <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	681a      	ldr	r2, [r3, #0]
    7058:	230f      	movs	r3, #15
    705a:	18fb      	adds	r3, r7, r3
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	3308      	adds	r3, #8
    7060:	015b      	lsls	r3, r3, #5
    7062:	18d3      	adds	r3, r2, r3
    7064:	799b      	ldrb	r3, [r3, #6]
    7066:	b2db      	uxtb	r3, r3
    7068:	1c1a      	adds	r2, r3, #0
    706a:	2310      	movs	r3, #16
    706c:	4013      	ands	r3, r2
    706e:	1e5a      	subs	r2, r3, #1
    7070:	4193      	sbcs	r3, r2
    7072:	b2db      	uxtb	r3, r3
	}
}
    7074:	1c18      	adds	r0, r3, #0
    7076:	46bd      	mov	sp, r7
    7078:	b004      	add	sp, #16
    707a:	bd80      	pop	{r7, pc}

0000707c <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    707c:	b580      	push	{r7, lr}
    707e:	b084      	sub	sp, #16
    7080:	af00      	add	r7, sp, #0
    7082:	6078      	str	r0, [r7, #4]
    7084:	1c0a      	adds	r2, r1, #0
    7086:	1cfb      	adds	r3, r7, #3
    7088:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    708a:	230f      	movs	r3, #15
    708c:	18fb      	adds	r3, r7, r3
    708e:	1cfa      	adds	r2, r7, #3
    7090:	7812      	ldrb	r2, [r2, #0]
    7092:	210f      	movs	r1, #15
    7094:	400a      	ands	r2, r1
    7096:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    7098:	1cfb      	adds	r3, r7, #3
    709a:	781b      	ldrb	r3, [r3, #0]
    709c:	b25b      	sxtb	r3, r3
    709e:	2b00      	cmp	r3, #0
    70a0:	da0a      	bge.n	70b8 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	681a      	ldr	r2, [r3, #0]
    70a6:	230f      	movs	r3, #15
    70a8:	18fb      	adds	r3, r7, r3
    70aa:	781b      	ldrb	r3, [r3, #0]
    70ac:	3308      	adds	r3, #8
    70ae:	015b      	lsls	r3, r3, #5
    70b0:	18d3      	adds	r3, r2, r3
    70b2:	2220      	movs	r2, #32
    70b4:	715a      	strb	r2, [r3, #5]
    70b6:	e009      	b.n	70cc <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    70b8:	687b      	ldr	r3, [r7, #4]
    70ba:	681a      	ldr	r2, [r3, #0]
    70bc:	230f      	movs	r3, #15
    70be:	18fb      	adds	r3, r7, r3
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	3308      	adds	r3, #8
    70c4:	015b      	lsls	r3, r3, #5
    70c6:	18d3      	adds	r3, r2, r3
    70c8:	2210      	movs	r2, #16
    70ca:	715a      	strb	r2, [r3, #5]
	}
}
    70cc:	46bd      	mov	sp, r7
    70ce:	b004      	add	sp, #16
    70d0:	bd80      	pop	{r7, pc}
    70d2:	46c0      	nop			; (mov r8, r8)

000070d4 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    70d4:	b580      	push	{r7, lr}
    70d6:	b084      	sub	sp, #16
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
    70dc:	1c0a      	adds	r2, r1, #0
    70de:	1cfb      	adds	r3, r7, #3
    70e0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    70e2:	230f      	movs	r3, #15
    70e4:	18fb      	adds	r3, r7, r3
    70e6:	1cfa      	adds	r2, r7, #3
    70e8:	7812      	ldrb	r2, [r2, #0]
    70ea:	210f      	movs	r1, #15
    70ec:	400a      	ands	r2, r1
    70ee:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    70f0:	1cfb      	adds	r3, r7, #3
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	b25b      	sxtb	r3, r3
    70f6:	2b00      	cmp	r3, #0
    70f8:	da3a      	bge.n	7170 <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	681a      	ldr	r2, [r3, #0]
    70fe:	230f      	movs	r3, #15
    7100:	18fb      	adds	r3, r7, r3
    7102:	781b      	ldrb	r3, [r3, #0]
    7104:	3308      	adds	r3, #8
    7106:	015b      	lsls	r3, r3, #5
    7108:	18d3      	adds	r3, r2, r3
    710a:	799b      	ldrb	r3, [r3, #6]
    710c:	b2db      	uxtb	r3, r3
    710e:	1c1a      	adds	r2, r3, #0
    7110:	2320      	movs	r3, #32
    7112:	4013      	ands	r3, r2
    7114:	d066      	beq.n	71e4 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	681a      	ldr	r2, [r3, #0]
    711a:	230f      	movs	r3, #15
    711c:	18fb      	adds	r3, r7, r3
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	3308      	adds	r3, #8
    7122:	015b      	lsls	r3, r3, #5
    7124:	18d3      	adds	r3, r2, r3
    7126:	2220      	movs	r2, #32
    7128:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	681a      	ldr	r2, [r3, #0]
    712e:	230f      	movs	r3, #15
    7130:	18fb      	adds	r3, r7, r3
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	3308      	adds	r3, #8
    7136:	015b      	lsls	r3, r3, #5
    7138:	18d3      	adds	r3, r2, r3
    713a:	79db      	ldrb	r3, [r3, #7]
    713c:	b2db      	uxtb	r3, r3
    713e:	1c1a      	adds	r2, r3, #0
    7140:	2340      	movs	r3, #64	; 0x40
    7142:	4013      	ands	r3, r2
    7144:	d04e      	beq.n	71e4 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7146:	687b      	ldr	r3, [r7, #4]
    7148:	681a      	ldr	r2, [r3, #0]
    714a:	230f      	movs	r3, #15
    714c:	18fb      	adds	r3, r7, r3
    714e:	781b      	ldrb	r3, [r3, #0]
    7150:	3308      	adds	r3, #8
    7152:	015b      	lsls	r3, r3, #5
    7154:	18d3      	adds	r3, r2, r3
    7156:	2240      	movs	r2, #64	; 0x40
    7158:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	681a      	ldr	r2, [r3, #0]
    715e:	230f      	movs	r3, #15
    7160:	18fb      	adds	r3, r7, r3
    7162:	781b      	ldrb	r3, [r3, #0]
    7164:	3308      	adds	r3, #8
    7166:	015b      	lsls	r3, r3, #5
    7168:	18d3      	adds	r3, r2, r3
    716a:	2202      	movs	r2, #2
    716c:	711a      	strb	r2, [r3, #4]
    716e:	e039      	b.n	71e4 <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	681a      	ldr	r2, [r3, #0]
    7174:	230f      	movs	r3, #15
    7176:	18fb      	adds	r3, r7, r3
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	3308      	adds	r3, #8
    717c:	015b      	lsls	r3, r3, #5
    717e:	18d3      	adds	r3, r2, r3
    7180:	799b      	ldrb	r3, [r3, #6]
    7182:	b2db      	uxtb	r3, r3
    7184:	1c1a      	adds	r2, r3, #0
    7186:	2310      	movs	r3, #16
    7188:	4013      	ands	r3, r2
    718a:	d02b      	beq.n	71e4 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	681a      	ldr	r2, [r3, #0]
    7190:	230f      	movs	r3, #15
    7192:	18fb      	adds	r3, r7, r3
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	3308      	adds	r3, #8
    7198:	015b      	lsls	r3, r3, #5
    719a:	18d3      	adds	r3, r2, r3
    719c:	2210      	movs	r2, #16
    719e:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	681a      	ldr	r2, [r3, #0]
    71a4:	230f      	movs	r3, #15
    71a6:	18fb      	adds	r3, r7, r3
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	3308      	adds	r3, #8
    71ac:	015b      	lsls	r3, r3, #5
    71ae:	18d3      	adds	r3, r2, r3
    71b0:	79db      	ldrb	r3, [r3, #7]
    71b2:	b2db      	uxtb	r3, r3
    71b4:	1c1a      	adds	r2, r3, #0
    71b6:	2320      	movs	r3, #32
    71b8:	4013      	ands	r3, r2
    71ba:	d013      	beq.n	71e4 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	681a      	ldr	r2, [r3, #0]
    71c0:	230f      	movs	r3, #15
    71c2:	18fb      	adds	r3, r7, r3
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	3308      	adds	r3, #8
    71c8:	015b      	lsls	r3, r3, #5
    71ca:	18d3      	adds	r3, r2, r3
    71cc:	2220      	movs	r2, #32
    71ce:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	681a      	ldr	r2, [r3, #0]
    71d4:	230f      	movs	r3, #15
    71d6:	18fb      	adds	r3, r7, r3
    71d8:	781b      	ldrb	r3, [r3, #0]
    71da:	3308      	adds	r3, #8
    71dc:	015b      	lsls	r3, r3, #5
    71de:	18d3      	adds	r3, r2, r3
    71e0:	2201      	movs	r2, #1
    71e2:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    71e4:	46bd      	mov	sp, r7
    71e6:	b004      	add	sp, #16
    71e8:	bd80      	pop	{r7, pc}
    71ea:	46c0      	nop			; (mov r8, r8)

000071ec <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    71ec:	b580      	push	{r7, lr}
    71ee:	b086      	sub	sp, #24
    71f0:	af00      	add	r7, sp, #0
    71f2:	60f8      	str	r0, [r7, #12]
    71f4:	607a      	str	r2, [r7, #4]
    71f6:	603b      	str	r3, [r7, #0]
    71f8:	230b      	movs	r3, #11
    71fa:	18fb      	adds	r3, r7, r3
    71fc:	1c0a      	adds	r2, r1, #0
    71fe:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    7200:	68fb      	ldr	r3, [r7, #12]
    7202:	681b      	ldr	r3, [r3, #0]
    7204:	220b      	movs	r2, #11
    7206:	18ba      	adds	r2, r7, r2
    7208:	7812      	ldrb	r2, [r2, #0]
    720a:	3208      	adds	r2, #8
    720c:	0152      	lsls	r2, r2, #5
    720e:	5cd3      	ldrb	r3, [r2, r3]
    7210:	b2db      	uxtb	r3, r3
    7212:	091b      	lsrs	r3, r3, #4
    7214:	1c1a      	adds	r2, r3, #0
    7216:	2307      	movs	r3, #7
    7218:	4013      	ands	r3, r2
    721a:	b2da      	uxtb	r2, r3
    721c:	2317      	movs	r3, #23
    721e:	18fb      	adds	r3, r7, r3
    7220:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    7222:	2317      	movs	r3, #23
    7224:	18fb      	adds	r3, r7, r3
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	2b00      	cmp	r3, #0
    722a:	d101      	bne.n	7230 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    722c:	231c      	movs	r3, #28
    722e:	e031      	b.n	7294 <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    7230:	230b      	movs	r3, #11
    7232:	18fb      	adds	r3, r7, r3
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	687a      	ldr	r2, [r7, #4]
    7238:	4918      	ldr	r1, [pc, #96]	; (729c <usb_device_endpoint_write_buffer_job+0xb0>)
    723a:	015b      	lsls	r3, r3, #5
    723c:	18cb      	adds	r3, r1, r3
    723e:	3310      	adds	r3, #16
    7240:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    7242:	230b      	movs	r3, #11
    7244:	18fb      	adds	r3, r7, r3
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	4a14      	ldr	r2, [pc, #80]	; (729c <usb_device_endpoint_write_buffer_job+0xb0>)
    724a:	015b      	lsls	r3, r3, #5
    724c:	18d3      	adds	r3, r2, r3
    724e:	3310      	adds	r3, #16
    7250:	685a      	ldr	r2, [r3, #4]
    7252:	4913      	ldr	r1, [pc, #76]	; (72a0 <usb_device_endpoint_write_buffer_job+0xb4>)
    7254:	400a      	ands	r2, r1
    7256:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    7258:	230b      	movs	r3, #11
    725a:	18fb      	adds	r3, r7, r3
    725c:	781b      	ldrb	r3, [r3, #0]
    725e:	683a      	ldr	r2, [r7, #0]
    7260:	b292      	uxth	r2, r2
    7262:	0492      	lsls	r2, r2, #18
    7264:	0c92      	lsrs	r2, r2, #18
    7266:	b292      	uxth	r2, r2
    7268:	490c      	ldr	r1, [pc, #48]	; (729c <usb_device_endpoint_write_buffer_job+0xb0>)
    726a:	015b      	lsls	r3, r3, #5
    726c:	18cb      	adds	r3, r1, r3
    726e:	3310      	adds	r3, #16
    7270:	0492      	lsls	r2, r2, #18
    7272:	0c92      	lsrs	r2, r2, #18
    7274:	6859      	ldr	r1, [r3, #4]
    7276:	0b89      	lsrs	r1, r1, #14
    7278:	0389      	lsls	r1, r1, #14
    727a:	430a      	orrs	r2, r1
    727c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    727e:	68fb      	ldr	r3, [r7, #12]
    7280:	681a      	ldr	r2, [r3, #0]
    7282:	230b      	movs	r3, #11
    7284:	18fb      	adds	r3, r7, r3
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	3308      	adds	r3, #8
    728a:	015b      	lsls	r3, r3, #5
    728c:	18d3      	adds	r3, r2, r3
    728e:	2280      	movs	r2, #128	; 0x80
    7290:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    7292:	2300      	movs	r3, #0
}
    7294:	1c18      	adds	r0, r3, #0
    7296:	46bd      	mov	sp, r7
    7298:	b006      	add	sp, #24
    729a:	bd80      	pop	{r7, pc}
    729c:	20000464 	.word	0x20000464
    72a0:	f0003fff 	.word	0xf0003fff

000072a4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    72a4:	b580      	push	{r7, lr}
    72a6:	b086      	sub	sp, #24
    72a8:	af00      	add	r7, sp, #0
    72aa:	60f8      	str	r0, [r7, #12]
    72ac:	607a      	str	r2, [r7, #4]
    72ae:	603b      	str	r3, [r7, #0]
    72b0:	230b      	movs	r3, #11
    72b2:	18fb      	adds	r3, r7, r3
    72b4:	1c0a      	adds	r2, r1, #0
    72b6:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    72b8:	68fb      	ldr	r3, [r7, #12]
    72ba:	681b      	ldr	r3, [r3, #0]
    72bc:	220b      	movs	r2, #11
    72be:	18ba      	adds	r2, r7, r2
    72c0:	7812      	ldrb	r2, [r2, #0]
    72c2:	3208      	adds	r2, #8
    72c4:	0152      	lsls	r2, r2, #5
    72c6:	5cd3      	ldrb	r3, [r2, r3]
    72c8:	2207      	movs	r2, #7
    72ca:	4013      	ands	r3, r2
    72cc:	b2da      	uxtb	r2, r3
    72ce:	2317      	movs	r3, #23
    72d0:	18fb      	adds	r3, r7, r3
    72d2:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    72d4:	2317      	movs	r3, #23
    72d6:	18fb      	adds	r3, r7, r3
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	2b00      	cmp	r3, #0
    72dc:	d101      	bne.n	72e2 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    72de:	231c      	movs	r3, #28
    72e0:	e02e      	b.n	7340 <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    72e2:	230b      	movs	r3, #11
    72e4:	18fb      	adds	r3, r7, r3
    72e6:	781a      	ldrb	r2, [r3, #0]
    72e8:	6879      	ldr	r1, [r7, #4]
    72ea:	4b17      	ldr	r3, [pc, #92]	; (7348 <usb_device_endpoint_read_buffer_job+0xa4>)
    72ec:	0152      	lsls	r2, r2, #5
    72ee:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    72f0:	230b      	movs	r3, #11
    72f2:	18fb      	adds	r3, r7, r3
    72f4:	781b      	ldrb	r3, [r3, #0]
    72f6:	683a      	ldr	r2, [r7, #0]
    72f8:	b292      	uxth	r2, r2
    72fa:	0492      	lsls	r2, r2, #18
    72fc:	0c92      	lsrs	r2, r2, #18
    72fe:	b292      	uxth	r2, r2
    7300:	4911      	ldr	r1, [pc, #68]	; (7348 <usb_device_endpoint_read_buffer_job+0xa4>)
    7302:	015b      	lsls	r3, r3, #5
    7304:	18cb      	adds	r3, r1, r3
    7306:	0492      	lsls	r2, r2, #18
    7308:	0c92      	lsrs	r2, r2, #18
    730a:	0392      	lsls	r2, r2, #14
    730c:	6859      	ldr	r1, [r3, #4]
    730e:	480f      	ldr	r0, [pc, #60]	; (734c <usb_device_endpoint_read_buffer_job+0xa8>)
    7310:	4001      	ands	r1, r0
    7312:	430a      	orrs	r2, r1
    7314:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7316:	230b      	movs	r3, #11
    7318:	18fb      	adds	r3, r7, r3
    731a:	781b      	ldrb	r3, [r3, #0]
    731c:	4a0a      	ldr	r2, [pc, #40]	; (7348 <usb_device_endpoint_read_buffer_job+0xa4>)
    731e:	015b      	lsls	r3, r3, #5
    7320:	18d3      	adds	r3, r2, r3
    7322:	685a      	ldr	r2, [r3, #4]
    7324:	0b92      	lsrs	r2, r2, #14
    7326:	0392      	lsls	r2, r2, #14
    7328:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    732a:	68fb      	ldr	r3, [r7, #12]
    732c:	681a      	ldr	r2, [r3, #0]
    732e:	230b      	movs	r3, #11
    7330:	18fb      	adds	r3, r7, r3
    7332:	781b      	ldrb	r3, [r3, #0]
    7334:	3308      	adds	r3, #8
    7336:	015b      	lsls	r3, r3, #5
    7338:	18d3      	adds	r3, r2, r3
    733a:	2240      	movs	r2, #64	; 0x40
    733c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    733e:	2300      	movs	r3, #0
}
    7340:	1c18      	adds	r0, r3, #0
    7342:	46bd      	mov	sp, r7
    7344:	b006      	add	sp, #24
    7346:	bd80      	pop	{r7, pc}
    7348:	20000464 	.word	0x20000464
    734c:	f0003fff 	.word	0xf0003fff

00007350 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    7350:	b580      	push	{r7, lr}
    7352:	b082      	sub	sp, #8
    7354:	af00      	add	r7, sp, #0
    7356:	6078      	str	r0, [r7, #4]
    7358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    735a:	683a      	ldr	r2, [r7, #0]
    735c:	4b0c      	ldr	r3, [pc, #48]	; (7390 <usb_device_endpoint_setup_buffer_job+0x40>)
    735e:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    7360:	4b0b      	ldr	r3, [pc, #44]	; (7390 <usb_device_endpoint_setup_buffer_job+0x40>)
    7362:	685a      	ldr	r2, [r3, #4]
    7364:	490b      	ldr	r1, [pc, #44]	; (7394 <usb_device_endpoint_setup_buffer_job+0x44>)
    7366:	400a      	ands	r2, r1
    7368:	2180      	movs	r1, #128	; 0x80
    736a:	0289      	lsls	r1, r1, #10
    736c:	430a      	orrs	r2, r1
    736e:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7370:	4b07      	ldr	r3, [pc, #28]	; (7390 <usb_device_endpoint_setup_buffer_job+0x40>)
    7372:	685a      	ldr	r2, [r3, #4]
    7374:	0b92      	lsrs	r2, r2, #14
    7376:	0392      	lsls	r2, r2, #14
    7378:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    737a:	687b      	ldr	r3, [r7, #4]
    737c:	681a      	ldr	r2, [r3, #0]
    737e:	2382      	movs	r3, #130	; 0x82
    7380:	005b      	lsls	r3, r3, #1
    7382:	2140      	movs	r1, #64	; 0x40
    7384:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    7386:	2300      	movs	r3, #0
}
    7388:	1c18      	adds	r0, r3, #0
    738a:	46bd      	mov	sp, r7
    738c:	b002      	add	sp, #8
    738e:	bd80      	pop	{r7, pc}
    7390:	20000464 	.word	0x20000464
    7394:	f0003fff 	.word	0xf0003fff

00007398 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    7398:	b580      	push	{r7, lr}
    739a:	b084      	sub	sp, #16
    739c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    739e:	4bbc      	ldr	r3, [pc, #752]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    73a0:	681b      	ldr	r3, [r3, #0]
    73a2:	681a      	ldr	r2, [r3, #0]
    73a4:	2308      	movs	r3, #8
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	8c12      	ldrh	r2, [r2, #32]
    73aa:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    73ac:	2308      	movs	r3, #8
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	881b      	ldrh	r3, [r3, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d158      	bne.n	7468 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    73b6:	4bb6      	ldr	r3, [pc, #728]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    73b8:	681b      	ldr	r3, [r3, #0]
    73ba:	681a      	ldr	r2, [r3, #0]
    73bc:	1dbb      	adds	r3, r7, #6
    73be:	8b92      	ldrh	r2, [r2, #28]
    73c0:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    73c2:	4bb3      	ldr	r3, [pc, #716]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    73c4:	681a      	ldr	r2, [r3, #0]
    73c6:	23ab      	movs	r3, #171	; 0xab
    73c8:	005b      	lsls	r3, r3, #1
    73ca:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    73cc:	1dba      	adds	r2, r7, #6
    73ce:	8812      	ldrh	r2, [r2, #0]
    73d0:	4013      	ands	r3, r2
    73d2:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    73d4:	4bae      	ldr	r3, [pc, #696]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    73d6:	6819      	ldr	r1, [r3, #0]
    73d8:	23aa      	movs	r3, #170	; 0xaa
    73da:	005b      	lsls	r3, r3, #1
    73dc:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    73de:	1d3b      	adds	r3, r7, #4
    73e0:	400a      	ands	r2, r1
    73e2:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    73e4:	2300      	movs	r3, #0
    73e6:	60fb      	str	r3, [r7, #12]
    73e8:	e03a      	b.n	7460 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    73ea:	4baa      	ldr	r3, [pc, #680]	; (7694 <_usb_device_interrupt_handler+0x2fc>)
    73ec:	68fa      	ldr	r2, [r7, #12]
    73ee:	0052      	lsls	r2, r2, #1
    73f0:	5ad3      	ldrh	r3, [r2, r3]
    73f2:	1dba      	adds	r2, r7, #6
    73f4:	8812      	ldrh	r2, [r2, #0]
    73f6:	4013      	ands	r3, r2
    73f8:	b29b      	uxth	r3, r3
    73fa:	2b00      	cmp	r3, #0
    73fc:	d007      	beq.n	740e <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    73fe:	4ba4      	ldr	r3, [pc, #656]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7400:	681b      	ldr	r3, [r3, #0]
    7402:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    7404:	4aa3      	ldr	r2, [pc, #652]	; (7694 <_usb_device_interrupt_handler+0x2fc>)
    7406:	68f9      	ldr	r1, [r7, #12]
    7408:	0049      	lsls	r1, r1, #1
    740a:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    740c:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    740e:	4ba1      	ldr	r3, [pc, #644]	; (7694 <_usb_device_interrupt_handler+0x2fc>)
    7410:	68fa      	ldr	r2, [r7, #12]
    7412:	0052      	lsls	r2, r2, #1
    7414:	5ad3      	ldrh	r3, [r2, r3]
    7416:	1d3a      	adds	r2, r7, #4
    7418:	8812      	ldrh	r2, [r2, #0]
    741a:	4013      	ands	r3, r2
    741c:	b29b      	uxth	r3, r3
    741e:	2b00      	cmp	r3, #0
    7420:	d01b      	beq.n	745a <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    7422:	68fb      	ldr	r3, [r7, #12]
    7424:	2b06      	cmp	r3, #6
    7426:	d10c      	bne.n	7442 <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    7428:	4b9b      	ldr	r3, [pc, #620]	; (7698 <_usb_device_interrupt_handler+0x300>)
    742a:	891b      	ldrh	r3, [r3, #8]
    742c:	b29b      	uxth	r3, r3
    742e:	091b      	lsrs	r3, r3, #4
    7430:	055b      	lsls	r3, r3, #21
    7432:	0d5b      	lsrs	r3, r3, #21
    7434:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    7436:	1c1a      	adds	r2, r3, #0
    7438:	2380      	movs	r3, #128	; 0x80
    743a:	005b      	lsls	r3, r3, #1
    743c:	401a      	ands	r2, r3
    743e:	4b97      	ldr	r3, [pc, #604]	; (769c <_usb_device_interrupt_handler+0x304>)
    7440:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    7442:	4b93      	ldr	r3, [pc, #588]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7444:	681b      	ldr	r3, [r3, #0]
    7446:	68fa      	ldr	r2, [r7, #12]
    7448:	322e      	adds	r2, #46	; 0x2e
    744a:	0092      	lsls	r2, r2, #2
    744c:	58d2      	ldr	r2, [r2, r3]
    744e:	4b90      	ldr	r3, [pc, #576]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7450:	6819      	ldr	r1, [r3, #0]
    7452:	4b92      	ldr	r3, [pc, #584]	; (769c <_usb_device_interrupt_handler+0x304>)
    7454:	1c08      	adds	r0, r1, #0
    7456:	1c19      	adds	r1, r3, #0
    7458:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    745a:	68fb      	ldr	r3, [r7, #12]
    745c:	3301      	adds	r3, #1
    745e:	60fb      	str	r3, [r7, #12]
    7460:	68fb      	ldr	r3, [r7, #12]
    7462:	2b06      	cmp	r3, #6
    7464:	ddc1      	ble.n	73ea <_usb_device_interrupt_handler+0x52>
    7466:	e23d      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7468:	230b      	movs	r3, #11
    746a:	18fb      	adds	r3, r7, r3
    746c:	2200      	movs	r2, #0
    746e:	701a      	strb	r2, [r3, #0]
    7470:	e232      	b.n	78d8 <_usb_device_interrupt_handler+0x540>

			if (ep_inst & (1 << i)) {
    7472:	2308      	movs	r3, #8
    7474:	18fb      	adds	r3, r7, r3
    7476:	881a      	ldrh	r2, [r3, #0]
    7478:	230b      	movs	r3, #11
    747a:	18fb      	adds	r3, r7, r3
    747c:	781b      	ldrb	r3, [r3, #0]
    747e:	411a      	asrs	r2, r3
    7480:	1c13      	adds	r3, r2, #0
    7482:	2201      	movs	r2, #1
    7484:	4013      	ands	r3, r2
    7486:	d100      	bne.n	748a <_usb_device_interrupt_handler+0xf2>
    7488:	e21f      	b.n	78ca <_usb_device_interrupt_handler+0x532>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    748a:	4b81      	ldr	r3, [pc, #516]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    748c:	681b      	ldr	r3, [r3, #0]
    748e:	681a      	ldr	r2, [r3, #0]
    7490:	230b      	movs	r3, #11
    7492:	18fb      	adds	r3, r7, r3
    7494:	781b      	ldrb	r3, [r3, #0]
    7496:	3308      	adds	r3, #8
    7498:	015b      	lsls	r3, r3, #5
    749a:	18d3      	adds	r3, r2, r3
    749c:	79db      	ldrb	r3, [r3, #7]
    749e:	b2da      	uxtb	r2, r3
    74a0:	1dbb      	adds	r3, r7, #6
    74a2:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    74a4:	4b7a      	ldr	r3, [pc, #488]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    74a6:	6819      	ldr	r1, [r3, #0]
    74a8:	230b      	movs	r3, #11
    74aa:	18fb      	adds	r3, r7, r3
    74ac:	781a      	ldrb	r2, [r3, #0]
    74ae:	23b0      	movs	r3, #176	; 0xb0
    74b0:	005b      	lsls	r3, r3, #1
    74b2:	188a      	adds	r2, r1, r2
    74b4:	18d3      	adds	r3, r2, r3
    74b6:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    74b8:	b29b      	uxth	r3, r3
    74ba:	1dba      	adds	r2, r7, #6
    74bc:	8812      	ldrh	r2, [r2, #0]
    74be:	4013      	ands	r3, r2
    74c0:	b29b      	uxth	r3, r3
    74c2:	b298      	uxth	r0, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    74c4:	4b72      	ldr	r3, [pc, #456]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    74c6:	6819      	ldr	r1, [r3, #0]
    74c8:	230b      	movs	r3, #11
    74ca:	18fb      	adds	r3, r7, r3
    74cc:	781a      	ldrb	r2, [r3, #0]
    74ce:	23ac      	movs	r3, #172	; 0xac
    74d0:	005b      	lsls	r3, r3, #1
    74d2:	188a      	adds	r2, r1, r2
    74d4:	18d3      	adds	r3, r2, r3
    74d6:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    74d8:	b29a      	uxth	r2, r3
    74da:	1c03      	adds	r3, r0, #0
    74dc:	4013      	ands	r3, r2
    74de:	b29a      	uxth	r2, r3
    74e0:	1d3b      	adds	r3, r7, #4
    74e2:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    74e4:	1dbb      	adds	r3, r7, #6
    74e6:	881b      	ldrh	r3, [r3, #0]
    74e8:	2260      	movs	r2, #96	; 0x60
    74ea:	4013      	ands	r3, r2
    74ec:	d059      	beq.n	75a2 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    74ee:	4b68      	ldr	r3, [pc, #416]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    74f0:	681b      	ldr	r3, [r3, #0]
    74f2:	681a      	ldr	r2, [r3, #0]
    74f4:	230b      	movs	r3, #11
    74f6:	18fb      	adds	r3, r7, r3
    74f8:	781b      	ldrb	r3, [r3, #0]
    74fa:	3308      	adds	r3, #8
    74fc:	015b      	lsls	r3, r3, #5
    74fe:	18d3      	adds	r3, r2, r3
    7500:	79db      	ldrb	r3, [r3, #7]
    7502:	b2db      	uxtb	r3, r3
    7504:	1c1a      	adds	r2, r3, #0
    7506:	2340      	movs	r3, #64	; 0x40
    7508:	4013      	ands	r3, r2
    750a:	d014      	beq.n	7536 <_usb_device_interrupt_handler+0x19e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    750c:	4b60      	ldr	r3, [pc, #384]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    750e:	681b      	ldr	r3, [r3, #0]
    7510:	681a      	ldr	r2, [r3, #0]
    7512:	230b      	movs	r3, #11
    7514:	18fb      	adds	r3, r7, r3
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	3308      	adds	r3, #8
    751a:	015b      	lsls	r3, r3, #5
    751c:	18d3      	adds	r3, r2, r3
    751e:	2240      	movs	r2, #64	; 0x40
    7520:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    7522:	230b      	movs	r3, #11
    7524:	18fb      	adds	r3, r7, r3
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	2280      	movs	r2, #128	; 0x80
    752a:	4252      	negs	r2, r2
    752c:	4313      	orrs	r3, r2
    752e:	b2da      	uxtb	r2, r3
    7530:	4b5b      	ldr	r3, [pc, #364]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    7532:	719a      	strb	r2, [r3, #6]
    7534:	e01e      	b.n	7574 <_usb_device_interrupt_handler+0x1dc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7536:	4b56      	ldr	r3, [pc, #344]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7538:	681b      	ldr	r3, [r3, #0]
    753a:	681a      	ldr	r2, [r3, #0]
    753c:	230b      	movs	r3, #11
    753e:	18fb      	adds	r3, r7, r3
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	3308      	adds	r3, #8
    7544:	015b      	lsls	r3, r3, #5
    7546:	18d3      	adds	r3, r2, r3
    7548:	79db      	ldrb	r3, [r3, #7]
    754a:	b2db      	uxtb	r3, r3
    754c:	1c1a      	adds	r2, r3, #0
    754e:	2320      	movs	r3, #32
    7550:	4013      	ands	r3, r2
    7552:	d00f      	beq.n	7574 <_usb_device_interrupt_handler+0x1dc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7554:	4b4e      	ldr	r3, [pc, #312]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	681a      	ldr	r2, [r3, #0]
    755a:	230b      	movs	r3, #11
    755c:	18fb      	adds	r3, r7, r3
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	3308      	adds	r3, #8
    7562:	015b      	lsls	r3, r3, #5
    7564:	18d3      	adds	r3, r2, r3
    7566:	2220      	movs	r2, #32
    7568:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    756a:	4b4d      	ldr	r3, [pc, #308]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    756c:	220b      	movs	r2, #11
    756e:	18ba      	adds	r2, r7, r2
    7570:	7812      	ldrb	r2, [r2, #0]
    7572:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    7574:	1d3b      	adds	r3, r7, #4
    7576:	881b      	ldrh	r3, [r3, #0]
    7578:	2260      	movs	r2, #96	; 0x60
    757a:	4013      	ands	r3, r2
    757c:	d010      	beq.n	75a0 <_usb_device_interrupt_handler+0x208>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    757e:	4b44      	ldr	r3, [pc, #272]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7580:	681a      	ldr	r2, [r3, #0]
    7582:	230b      	movs	r3, #11
    7584:	18fb      	adds	r3, r7, r3
    7586:	781b      	ldrb	r3, [r3, #0]
    7588:	21dc      	movs	r1, #220	; 0xdc
    758a:	011b      	lsls	r3, r3, #4
    758c:	18d3      	adds	r3, r2, r3
    758e:	185b      	adds	r3, r3, r1
    7590:	685a      	ldr	r2, [r3, #4]
    7592:	4b3f      	ldr	r3, [pc, #252]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7594:	6819      	ldr	r1, [r3, #0]
    7596:	4b42      	ldr	r3, [pc, #264]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    7598:	1c08      	adds	r0, r1, #0
    759a:	1c19      	adds	r1, r3, #0
    759c:	4790      	blx	r2
					}
					return;
    759e:	e1a1      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
    75a0:	e1a0      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    75a2:	1dbb      	adds	r3, r7, #6
    75a4:	881b      	ldrh	r3, [r3, #0]
    75a6:	2210      	movs	r2, #16
    75a8:	4013      	ands	r3, r2
    75aa:	d038      	beq.n	761e <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    75ac:	4b38      	ldr	r3, [pc, #224]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    75ae:	681b      	ldr	r3, [r3, #0]
    75b0:	681a      	ldr	r2, [r3, #0]
    75b2:	230b      	movs	r3, #11
    75b4:	18fb      	adds	r3, r7, r3
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	3308      	adds	r3, #8
    75ba:	015b      	lsls	r3, r3, #5
    75bc:	18d3      	adds	r3, r2, r3
    75be:	2210      	movs	r2, #16
    75c0:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    75c2:	4b33      	ldr	r3, [pc, #204]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    75c4:	6819      	ldr	r1, [r3, #0]
    75c6:	230b      	movs	r3, #11
    75c8:	18fb      	adds	r3, r7, r3
    75ca:	781a      	ldrb	r2, [r3, #0]
    75cc:	23b0      	movs	r3, #176	; 0xb0
    75ce:	005b      	lsls	r3, r3, #1
    75d0:	188a      	adds	r2, r1, r2
    75d2:	18d3      	adds	r3, r2, r3
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	2210      	movs	r2, #16
    75d8:	4013      	ands	r3, r2
    75da:	b2db      	uxtb	r3, r3
    75dc:	2b00      	cmp	r3, #0
    75de:	d01d      	beq.n	761c <_usb_device_interrupt_handler+0x284>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    75e0:	230b      	movs	r3, #11
    75e2:	18fb      	adds	r3, r7, r3
    75e4:	781b      	ldrb	r3, [r3, #0]
    75e6:	4a2c      	ldr	r2, [pc, #176]	; (7698 <_usb_device_interrupt_handler+0x300>)
    75e8:	015b      	lsls	r3, r3, #5
    75ea:	18d3      	adds	r3, r2, r3
    75ec:	685b      	ldr	r3, [r3, #4]
    75ee:	049b      	lsls	r3, r3, #18
    75f0:	0c9b      	lsrs	r3, r3, #18
    75f2:	b29b      	uxth	r3, r3
    75f4:	1c1a      	adds	r2, r3, #0
    75f6:	4b2a      	ldr	r3, [pc, #168]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    75f8:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    75fa:	4b25      	ldr	r3, [pc, #148]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    75fc:	681a      	ldr	r2, [r3, #0]
    75fe:	230b      	movs	r3, #11
    7600:	18fb      	adds	r3, r7, r3
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	21d8      	movs	r1, #216	; 0xd8
    7606:	011b      	lsls	r3, r3, #4
    7608:	18d3      	adds	r3, r2, r3
    760a:	185b      	adds	r3, r3, r1
    760c:	685a      	ldr	r2, [r3, #4]
    760e:	4b20      	ldr	r3, [pc, #128]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    7610:	6819      	ldr	r1, [r3, #0]
    7612:	4b23      	ldr	r3, [pc, #140]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    7614:	1c08      	adds	r0, r1, #0
    7616:	1c19      	adds	r1, r3, #0
    7618:	4790      	blx	r2
					}
					return;
    761a:	e163      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
    761c:	e162      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    761e:	1dbb      	adds	r3, r7, #6
    7620:	881b      	ldrh	r3, [r3, #0]
    7622:	2203      	movs	r2, #3
    7624:	4013      	ands	r3, r2
    7626:	d100      	bne.n	762a <_usb_device_interrupt_handler+0x292>
    7628:	e08c      	b.n	7744 <_usb_device_interrupt_handler+0x3ac>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    762a:	4b19      	ldr	r3, [pc, #100]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    762c:	681b      	ldr	r3, [r3, #0]
    762e:	681a      	ldr	r2, [r3, #0]
    7630:	230b      	movs	r3, #11
    7632:	18fb      	adds	r3, r7, r3
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	3308      	adds	r3, #8
    7638:	015b      	lsls	r3, r3, #5
    763a:	18d3      	adds	r3, r2, r3
    763c:	79db      	ldrb	r3, [r3, #7]
    763e:	b2db      	uxtb	r3, r3
    7640:	1c1a      	adds	r2, r3, #0
    7642:	2302      	movs	r3, #2
    7644:	4013      	ands	r3, r2
    7646:	d02d      	beq.n	76a4 <_usb_device_interrupt_handler+0x30c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7648:	4b11      	ldr	r3, [pc, #68]	; (7690 <_usb_device_interrupt_handler+0x2f8>)
    764a:	681b      	ldr	r3, [r3, #0]
    764c:	681a      	ldr	r2, [r3, #0]
    764e:	230b      	movs	r3, #11
    7650:	18fb      	adds	r3, r7, r3
    7652:	781b      	ldrb	r3, [r3, #0]
    7654:	3308      	adds	r3, #8
    7656:	015b      	lsls	r3, r3, #5
    7658:	18d3      	adds	r3, r2, r3
    765a:	2202      	movs	r2, #2
    765c:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    765e:	230b      	movs	r3, #11
    7660:	18fb      	adds	r3, r7, r3
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	2280      	movs	r2, #128	; 0x80
    7666:	4252      	negs	r2, r2
    7668:	4313      	orrs	r3, r2
    766a:	b2da      	uxtb	r2, r3
    766c:	4b0c      	ldr	r3, [pc, #48]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    766e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    7670:	230b      	movs	r3, #11
    7672:	18fb      	adds	r3, r7, r3
    7674:	781b      	ldrb	r3, [r3, #0]
    7676:	4a08      	ldr	r2, [pc, #32]	; (7698 <_usb_device_interrupt_handler+0x300>)
    7678:	015b      	lsls	r3, r3, #5
    767a:	18d3      	adds	r3, r2, r3
    767c:	3310      	adds	r3, #16
    767e:	685b      	ldr	r3, [r3, #4]
    7680:	049b      	lsls	r3, r3, #18
    7682:	0c9b      	lsrs	r3, r3, #18
    7684:	b29b      	uxth	r3, r3
    7686:	1c1a      	adds	r2, r3, #0
    7688:	4b05      	ldr	r3, [pc, #20]	; (76a0 <_usb_device_interrupt_handler+0x308>)
    768a:	805a      	strh	r2, [r3, #2]
    768c:	e044      	b.n	7718 <_usb_device_interrupt_handler+0x380>
    768e:	46c0      	nop			; (mov r8, r8)
    7690:	2000017c 	.word	0x2000017c
    7694:	000083c4 	.word	0x000083c4
    7698:	20000464 	.word	0x20000464
    769c:	20000188 	.word	0x20000188
    76a0:	2000018c 	.word	0x2000018c

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    76a4:	4b91      	ldr	r3, [pc, #580]	; (78ec <_usb_device_interrupt_handler+0x554>)
    76a6:	681b      	ldr	r3, [r3, #0]
    76a8:	681a      	ldr	r2, [r3, #0]
    76aa:	230b      	movs	r3, #11
    76ac:	18fb      	adds	r3, r7, r3
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	3308      	adds	r3, #8
    76b2:	015b      	lsls	r3, r3, #5
    76b4:	18d3      	adds	r3, r2, r3
    76b6:	79db      	ldrb	r3, [r3, #7]
    76b8:	b2db      	uxtb	r3, r3
    76ba:	1c1a      	adds	r2, r3, #0
    76bc:	2301      	movs	r3, #1
    76be:	4013      	ands	r3, r2
    76c0:	d02a      	beq.n	7718 <_usb_device_interrupt_handler+0x380>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    76c2:	4b8a      	ldr	r3, [pc, #552]	; (78ec <_usb_device_interrupt_handler+0x554>)
    76c4:	681b      	ldr	r3, [r3, #0]
    76c6:	681a      	ldr	r2, [r3, #0]
    76c8:	230b      	movs	r3, #11
    76ca:	18fb      	adds	r3, r7, r3
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	3308      	adds	r3, #8
    76d0:	015b      	lsls	r3, r3, #5
    76d2:	18d3      	adds	r3, r2, r3
    76d4:	2201      	movs	r2, #1
    76d6:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    76d8:	4b85      	ldr	r3, [pc, #532]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    76da:	220b      	movs	r2, #11
    76dc:	18ba      	adds	r2, r7, r2
    76de:	7812      	ldrb	r2, [r2, #0]
    76e0:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    76e2:	230b      	movs	r3, #11
    76e4:	18fb      	adds	r3, r7, r3
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	4a82      	ldr	r2, [pc, #520]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    76ea:	015b      	lsls	r3, r3, #5
    76ec:	18d3      	adds	r3, r2, r3
    76ee:	685b      	ldr	r3, [r3, #4]
    76f0:	049b      	lsls	r3, r3, #18
    76f2:	0c9b      	lsrs	r3, r3, #18
    76f4:	b29b      	uxth	r3, r3
    76f6:	1c1a      	adds	r2, r3, #0
    76f8:	4b7d      	ldr	r3, [pc, #500]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    76fa:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    76fc:	230b      	movs	r3, #11
    76fe:	18fb      	adds	r3, r7, r3
    7700:	781b      	ldrb	r3, [r3, #0]
    7702:	4a7c      	ldr	r2, [pc, #496]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    7704:	015b      	lsls	r3, r3, #5
    7706:	18d3      	adds	r3, r2, r3
    7708:	685b      	ldr	r3, [r3, #4]
    770a:	0b9b      	lsrs	r3, r3, #14
    770c:	049b      	lsls	r3, r3, #18
    770e:	0c9b      	lsrs	r3, r3, #18
    7710:	b29b      	uxth	r3, r3
    7712:	1c1a      	adds	r2, r3, #0
    7714:	4b76      	ldr	r3, [pc, #472]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    7716:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    7718:	1d3b      	adds	r3, r7, #4
    771a:	881b      	ldrh	r3, [r3, #0]
    771c:	2203      	movs	r2, #3
    771e:	4013      	ands	r3, r2
    7720:	d00f      	beq.n	7742 <_usb_device_interrupt_handler+0x3aa>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    7722:	4b72      	ldr	r3, [pc, #456]	; (78ec <_usb_device_interrupt_handler+0x554>)
    7724:	681a      	ldr	r2, [r3, #0]
    7726:	230b      	movs	r3, #11
    7728:	18fb      	adds	r3, r7, r3
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	330d      	adds	r3, #13
    772e:	011b      	lsls	r3, r3, #4
    7730:	18d3      	adds	r3, r2, r3
    7732:	685a      	ldr	r2, [r3, #4]
    7734:	4b6d      	ldr	r3, [pc, #436]	; (78ec <_usb_device_interrupt_handler+0x554>)
    7736:	6819      	ldr	r1, [r3, #0]
    7738:	4b6d      	ldr	r3, [pc, #436]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    773a:	1c08      	adds	r0, r1, #0
    773c:	1c19      	adds	r1, r3, #0
    773e:	4790      	blx	r2
					}
					return;
    7740:	e0d0      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
    7742:	e0cf      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    7744:	1dbb      	adds	r3, r7, #6
    7746:	881b      	ldrh	r3, [r3, #0]
    7748:	220c      	movs	r2, #12
    774a:	4013      	ands	r3, r2
    774c:	d100      	bne.n	7750 <_usb_device_interrupt_handler+0x3b8>
    774e:	e0bc      	b.n	78ca <_usb_device_interrupt_handler+0x532>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7750:	4b66      	ldr	r3, [pc, #408]	; (78ec <_usb_device_interrupt_handler+0x554>)
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	681a      	ldr	r2, [r3, #0]
    7756:	230b      	movs	r3, #11
    7758:	18fb      	adds	r3, r7, r3
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	3308      	adds	r3, #8
    775e:	015b      	lsls	r3, r3, #5
    7760:	18d3      	adds	r3, r2, r3
    7762:	79db      	ldrb	r3, [r3, #7]
    7764:	b2db      	uxtb	r3, r3
    7766:	1c1a      	adds	r2, r3, #0
    7768:	2308      	movs	r3, #8
    776a:	4013      	ands	r3, r2
    776c:	d045      	beq.n	77fa <_usb_device_interrupt_handler+0x462>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    776e:	4b5f      	ldr	r3, [pc, #380]	; (78ec <_usb_device_interrupt_handler+0x554>)
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	681a      	ldr	r2, [r3, #0]
    7774:	230b      	movs	r3, #11
    7776:	18fb      	adds	r3, r7, r3
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	3308      	adds	r3, #8
    777c:	015b      	lsls	r3, r3, #5
    777e:	18d3      	adds	r3, r2, r3
    7780:	2208      	movs	r2, #8
    7782:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    7784:	230b      	movs	r3, #11
    7786:	18fb      	adds	r3, r7, r3
    7788:	781b      	ldrb	r3, [r3, #0]
    778a:	4a5a      	ldr	r2, [pc, #360]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    778c:	015b      	lsls	r3, r3, #5
    778e:	18d3      	adds	r3, r2, r3
    7790:	3318      	adds	r3, #24
    7792:	789b      	ldrb	r3, [r3, #2]
    7794:	b2db      	uxtb	r3, r3
    7796:	1c1a      	adds	r2, r3, #0
    7798:	2302      	movs	r3, #2
    779a:	4013      	ands	r3, r2
    779c:	d014      	beq.n	77c8 <_usb_device_interrupt_handler+0x430>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    779e:	230b      	movs	r3, #11
    77a0:	18fb      	adds	r3, r7, r3
    77a2:	781b      	ldrb	r3, [r3, #0]
    77a4:	220b      	movs	r2, #11
    77a6:	18ba      	adds	r2, r7, r2
    77a8:	7812      	ldrb	r2, [r2, #0]
    77aa:	4952      	ldr	r1, [pc, #328]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    77ac:	0152      	lsls	r2, r2, #5
    77ae:	188a      	adds	r2, r1, r2
    77b0:	3218      	adds	r2, #24
    77b2:	7892      	ldrb	r2, [r2, #2]
    77b4:	b2d2      	uxtb	r2, r2
    77b6:	2102      	movs	r1, #2
    77b8:	438a      	bics	r2, r1
    77ba:	b2d1      	uxtb	r1, r2
    77bc:	4a4d      	ldr	r2, [pc, #308]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    77be:	015b      	lsls	r3, r3, #5
    77c0:	18d3      	adds	r3, r2, r3
    77c2:	3318      	adds	r3, #24
    77c4:	1c0a      	adds	r2, r1, #0
    77c6:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    77c8:	230b      	movs	r3, #11
    77ca:	18fb      	adds	r3, r7, r3
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	2280      	movs	r2, #128	; 0x80
    77d0:	4252      	negs	r2, r2
    77d2:	4313      	orrs	r3, r2
    77d4:	b2da      	uxtb	r2, r3
    77d6:	4b46      	ldr	r3, [pc, #280]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    77d8:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    77da:	4b44      	ldr	r3, [pc, #272]	; (78ec <_usb_device_interrupt_handler+0x554>)
    77dc:	681b      	ldr	r3, [r3, #0]
    77de:	681a      	ldr	r2, [r3, #0]
    77e0:	230b      	movs	r3, #11
    77e2:	18fb      	adds	r3, r7, r3
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	3308      	adds	r3, #8
    77e8:	015b      	lsls	r3, r3, #5
    77ea:	18d3      	adds	r3, r2, r3
    77ec:	79db      	ldrb	r3, [r3, #7]
    77ee:	b2db      	uxtb	r3, r3
    77f0:	1c1a      	adds	r2, r3, #0
    77f2:	2302      	movs	r3, #2
    77f4:	4013      	ands	r3, r2
    77f6:	d051      	beq.n	789c <_usb_device_interrupt_handler+0x504>
							return;
    77f8:	e074      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    77fa:	4b3c      	ldr	r3, [pc, #240]	; (78ec <_usb_device_interrupt_handler+0x554>)
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	681a      	ldr	r2, [r3, #0]
    7800:	230b      	movs	r3, #11
    7802:	18fb      	adds	r3, r7, r3
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	3308      	adds	r3, #8
    7808:	015b      	lsls	r3, r3, #5
    780a:	18d3      	adds	r3, r2, r3
    780c:	79db      	ldrb	r3, [r3, #7]
    780e:	b2db      	uxtb	r3, r3
    7810:	1c1a      	adds	r2, r3, #0
    7812:	2304      	movs	r3, #4
    7814:	4013      	ands	r3, r2
    7816:	d041      	beq.n	789c <_usb_device_interrupt_handler+0x504>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    7818:	4b34      	ldr	r3, [pc, #208]	; (78ec <_usb_device_interrupt_handler+0x554>)
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	681a      	ldr	r2, [r3, #0]
    781e:	230b      	movs	r3, #11
    7820:	18fb      	adds	r3, r7, r3
    7822:	781b      	ldrb	r3, [r3, #0]
    7824:	3308      	adds	r3, #8
    7826:	015b      	lsls	r3, r3, #5
    7828:	18d3      	adds	r3, r2, r3
    782a:	2204      	movs	r2, #4
    782c:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    782e:	230b      	movs	r3, #11
    7830:	18fb      	adds	r3, r7, r3
    7832:	781b      	ldrb	r3, [r3, #0]
    7834:	4a2f      	ldr	r2, [pc, #188]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    7836:	015b      	lsls	r3, r3, #5
    7838:	18d3      	adds	r3, r2, r3
    783a:	3308      	adds	r3, #8
    783c:	789b      	ldrb	r3, [r3, #2]
    783e:	b2db      	uxtb	r3, r3
    7840:	1c1a      	adds	r2, r3, #0
    7842:	2302      	movs	r3, #2
    7844:	4013      	ands	r3, r2
    7846:	d014      	beq.n	7872 <_usb_device_interrupt_handler+0x4da>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    7848:	230b      	movs	r3, #11
    784a:	18fb      	adds	r3, r7, r3
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	220b      	movs	r2, #11
    7850:	18ba      	adds	r2, r7, r2
    7852:	7812      	ldrb	r2, [r2, #0]
    7854:	4927      	ldr	r1, [pc, #156]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    7856:	0152      	lsls	r2, r2, #5
    7858:	188a      	adds	r2, r1, r2
    785a:	3208      	adds	r2, #8
    785c:	7892      	ldrb	r2, [r2, #2]
    785e:	b2d2      	uxtb	r2, r2
    7860:	2102      	movs	r1, #2
    7862:	438a      	bics	r2, r1
    7864:	b2d1      	uxtb	r1, r2
    7866:	4a23      	ldr	r2, [pc, #140]	; (78f4 <_usb_device_interrupt_handler+0x55c>)
    7868:	015b      	lsls	r3, r3, #5
    786a:	18d3      	adds	r3, r2, r3
    786c:	3308      	adds	r3, #8
    786e:	1c0a      	adds	r2, r1, #0
    7870:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7872:	4b1f      	ldr	r3, [pc, #124]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    7874:	220b      	movs	r2, #11
    7876:	18ba      	adds	r2, r7, r2
    7878:	7812      	ldrb	r2, [r2, #0]
    787a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    787c:	4b1b      	ldr	r3, [pc, #108]	; (78ec <_usb_device_interrupt_handler+0x554>)
    787e:	681b      	ldr	r3, [r3, #0]
    7880:	681a      	ldr	r2, [r3, #0]
    7882:	230b      	movs	r3, #11
    7884:	18fb      	adds	r3, r7, r3
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	3308      	adds	r3, #8
    788a:	015b      	lsls	r3, r3, #5
    788c:	18d3      	adds	r3, r2, r3
    788e:	79db      	ldrb	r3, [r3, #7]
    7890:	b2db      	uxtb	r3, r3
    7892:	1c1a      	adds	r2, r3, #0
    7894:	2301      	movs	r3, #1
    7896:	4013      	ands	r3, r2
    7898:	d000      	beq.n	789c <_usb_device_interrupt_handler+0x504>
							return;
    789a:	e023      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    789c:	1d3b      	adds	r3, r7, #4
    789e:	881b      	ldrh	r3, [r3, #0]
    78a0:	220c      	movs	r2, #12
    78a2:	4013      	ands	r3, r2
    78a4:	d010      	beq.n	78c8 <_usb_device_interrupt_handler+0x530>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    78a6:	4b11      	ldr	r3, [pc, #68]	; (78ec <_usb_device_interrupt_handler+0x554>)
    78a8:	681a      	ldr	r2, [r3, #0]
    78aa:	230b      	movs	r3, #11
    78ac:	18fb      	adds	r3, r7, r3
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	21d4      	movs	r1, #212	; 0xd4
    78b2:	011b      	lsls	r3, r3, #4
    78b4:	18d3      	adds	r3, r2, r3
    78b6:	185b      	adds	r3, r3, r1
    78b8:	685a      	ldr	r2, [r3, #4]
    78ba:	4b0c      	ldr	r3, [pc, #48]	; (78ec <_usb_device_interrupt_handler+0x554>)
    78bc:	6819      	ldr	r1, [r3, #0]
    78be:	4b0c      	ldr	r3, [pc, #48]	; (78f0 <_usb_device_interrupt_handler+0x558>)
    78c0:	1c08      	adds	r0, r1, #0
    78c2:	1c19      	adds	r1, r3, #0
    78c4:	4790      	blx	r2
					}
					return;
    78c6:	e00d      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
    78c8:	e00c      	b.n	78e4 <_usb_device_interrupt_handler+0x54c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    78ca:	230b      	movs	r3, #11
    78cc:	18fb      	adds	r3, r7, r3
    78ce:	781a      	ldrb	r2, [r3, #0]
    78d0:	230b      	movs	r3, #11
    78d2:	18fb      	adds	r3, r7, r3
    78d4:	3201      	adds	r2, #1
    78d6:	701a      	strb	r2, [r3, #0]
    78d8:	230b      	movs	r3, #11
    78da:	18fb      	adds	r3, r7, r3
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	2b07      	cmp	r3, #7
    78e0:	d800      	bhi.n	78e4 <_usb_device_interrupt_handler+0x54c>
    78e2:	e5c6      	b.n	7472 <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    78e4:	46bd      	mov	sp, r7
    78e6:	b004      	add	sp, #16
    78e8:	bd80      	pop	{r7, pc}
    78ea:	46c0      	nop			; (mov r8, r8)
    78ec:	2000017c 	.word	0x2000017c
    78f0:	2000018c 	.word	0x2000018c
    78f4:	20000464 	.word	0x20000464

000078f8 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	681a      	ldr	r2, [r3, #0]
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	681b      	ldr	r3, [r3, #0]
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	b2db      	uxtb	r3, r3
    790c:	2102      	movs	r1, #2
    790e:	430b      	orrs	r3, r1
    7910:	b2db      	uxtb	r3, r3
    7912:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    7914:	46c0      	nop			; (mov r8, r8)
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	681b      	ldr	r3, [r3, #0]
    791a:	789b      	ldrb	r3, [r3, #2]
    791c:	b2db      	uxtb	r3, r3
    791e:	2b02      	cmp	r3, #2
    7920:	d0f9      	beq.n	7916 <usb_enable+0x1e>
}
    7922:	46bd      	mov	sp, r7
    7924:	b002      	add	sp, #8
    7926:	bd80      	pop	{r7, pc}

00007928 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    7928:	b580      	push	{r7, lr}
    792a:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    792c:	4b07      	ldr	r3, [pc, #28]	; (794c <USB_Handler+0x24>)
    792e:	681b      	ldr	r3, [r3, #0]
    7930:	681b      	ldr	r3, [r3, #0]
    7932:	781b      	ldrb	r3, [r3, #0]
    7934:	b2db      	uxtb	r3, r3
    7936:	09db      	lsrs	r3, r3, #7
    7938:	b2db      	uxtb	r3, r3
    793a:	2b00      	cmp	r3, #0
    793c:	d002      	beq.n	7944 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    793e:	4b04      	ldr	r3, [pc, #16]	; (7950 <USB_Handler+0x28>)
    7940:	4798      	blx	r3
    7942:	e001      	b.n	7948 <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    7944:	4b03      	ldr	r3, [pc, #12]	; (7954 <USB_Handler+0x2c>)
    7946:	4798      	blx	r3
	}
}
    7948:	46bd      	mov	sp, r7
    794a:	bd80      	pop	{r7, pc}
    794c:	2000017c 	.word	0x2000017c
    7950:	00006085 	.word	0x00006085
    7954:	00007399 	.word	0x00007399

00007958 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    7958:	b580      	push	{r7, lr}
    795a:	b082      	sub	sp, #8
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	2200      	movs	r2, #0
    7964:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	2201      	movs	r2, #1
    796a:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	2200      	movs	r2, #0
    7970:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	2201      	movs	r2, #1
    7976:	70da      	strb	r2, [r3, #3]
}
    7978:	46bd      	mov	sp, r7
    797a:	b002      	add	sp, #8
    797c:	bd80      	pop	{r7, pc}
    797e:	46c0      	nop			; (mov r8, r8)

00007980 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    7980:	b580      	push	{r7, lr}
    7982:	b08c      	sub	sp, #48	; 0x30
    7984:	af00      	add	r7, sp, #0
    7986:	60f8      	str	r0, [r7, #12]
    7988:	60b9      	str	r1, [r7, #8]
    798a:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    798c:	4bc3      	ldr	r3, [pc, #780]	; (7c9c <usb_init+0x31c>)
    798e:	2200      	movs	r2, #0
    7990:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    7992:	4bc3      	ldr	r3, [pc, #780]	; (7ca0 <usb_init+0x320>)
    7994:	68fa      	ldr	r2, [r7, #12]
    7996:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    7998:	68fb      	ldr	r3, [r7, #12]
    799a:	68ba      	ldr	r2, [r7, #8]
    799c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    799e:	2001      	movs	r0, #1
    79a0:	2120      	movs	r1, #32
    79a2:	4bc0      	ldr	r3, [pc, #768]	; (7ca4 <usb_init+0x324>)
    79a4:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    79a6:	2318      	movs	r3, #24
    79a8:	18fb      	adds	r3, r7, r3
    79aa:	1c18      	adds	r0, r3, #0
    79ac:	4bbe      	ldr	r3, [pc, #760]	; (7ca8 <usb_init+0x328>)
    79ae:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    79b0:	2318      	movs	r3, #24
    79b2:	18fb      	adds	r3, r7, r3
    79b4:	2206      	movs	r2, #6
    79b6:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    79b8:	2318      	movs	r3, #24
    79ba:	18fb      	adds	r3, r7, r3
    79bc:	2018      	movs	r0, #24
    79be:	1c19      	adds	r1, r3, #0
    79c0:	4bba      	ldr	r3, [pc, #744]	; (7cac <usb_init+0x32c>)
    79c2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    79c4:	2318      	movs	r3, #24
    79c6:	18fb      	adds	r3, r7, r3
    79c8:	2206      	movs	r2, #6
    79ca:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    79cc:	2318      	movs	r3, #24
    79ce:	18fb      	adds	r3, r7, r3
    79d0:	2019      	movs	r0, #25
    79d2:	1c19      	adds	r1, r3, #0
    79d4:	4bb5      	ldr	r3, [pc, #724]	; (7cac <usb_init+0x32c>)
    79d6:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    79d8:	2314      	movs	r3, #20
    79da:	18fb      	adds	r3, r7, r3
    79dc:	1c18      	adds	r0, r3, #0
    79de:	4bb4      	ldr	r3, [pc, #720]	; (7cb0 <usb_init+0x330>)
    79e0:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    79e2:	687b      	ldr	r3, [r7, #4]
    79e4:	789a      	ldrb	r2, [r3, #2]
    79e6:	2314      	movs	r3, #20
    79e8:	18fb      	adds	r3, r7, r3
    79ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    79ec:	2314      	movs	r3, #20
    79ee:	18fb      	adds	r3, r7, r3
    79f0:	2006      	movs	r0, #6
    79f2:	1c19      	adds	r1, r3, #0
    79f4:	4baf      	ldr	r3, [pc, #700]	; (7cb4 <usb_init+0x334>)
    79f6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    79f8:	2006      	movs	r0, #6
    79fa:	4baf      	ldr	r3, [pc, #700]	; (7cb8 <usb_init+0x338>)
    79fc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    79fe:	68bb      	ldr	r3, [r7, #8]
    7a00:	781a      	ldrb	r2, [r3, #0]
    7a02:	2101      	movs	r1, #1
    7a04:	430a      	orrs	r2, r1
    7a06:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    7a08:	46c0      	nop			; (mov r8, r8)
    7a0a:	68bb      	ldr	r3, [r7, #8]
    7a0c:	789b      	ldrb	r3, [r3, #2]
    7a0e:	2201      	movs	r2, #1
    7a10:	4013      	ands	r3, r2
    7a12:	b2db      	uxtb	r3, r3
    7a14:	2b00      	cmp	r3, #0
    7a16:	d1f8      	bne.n	7a0a <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7a18:	4ba8      	ldr	r3, [pc, #672]	; (7cbc <usb_init+0x33c>)
    7a1a:	78da      	ldrb	r2, [r3, #3]
    7a1c:	2103      	movs	r1, #3
    7a1e:	438a      	bics	r2, r1
    7a20:	1c11      	adds	r1, r2, #0
    7a22:	2202      	movs	r2, #2
    7a24:	430a      	orrs	r2, r1
    7a26:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7a28:	4ba4      	ldr	r3, [pc, #656]	; (7cbc <usb_init+0x33c>)
    7a2a:	78da      	ldrb	r2, [r3, #3]
    7a2c:	210c      	movs	r1, #12
    7a2e:	438a      	bics	r2, r1
    7a30:	1c11      	adds	r1, r2, #0
    7a32:	2208      	movs	r2, #8
    7a34:	430a      	orrs	r2, r1
    7a36:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    7a38:	4ba1      	ldr	r3, [pc, #644]	; (7cc0 <usb_init+0x340>)
    7a3a:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    7a3c:	0b5b      	lsrs	r3, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    7a3e:	221f      	movs	r2, #31
    7a40:	4013      	ands	r3, r2
    7a42:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    7a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a46:	2b1f      	cmp	r3, #31
    7a48:	d101      	bne.n	7a4e <usb_init+0xce>
		pad_transn = 5;
    7a4a:	2305      	movs	r3, #5
    7a4c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    7a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a50:	b2db      	uxtb	r3, r3
    7a52:	1c1a      	adds	r2, r3, #0
    7a54:	231f      	movs	r3, #31
    7a56:	4013      	ands	r3, r2
    7a58:	b2da      	uxtb	r2, r3
    7a5a:	68bb      	ldr	r3, [r7, #8]
    7a5c:	1c11      	adds	r1, r2, #0
    7a5e:	221f      	movs	r2, #31
    7a60:	400a      	ands	r2, r1
    7a62:	0190      	lsls	r0, r2, #6
    7a64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    7a66:	4997      	ldr	r1, [pc, #604]	; (7cc4 <usb_init+0x344>)
    7a68:	400a      	ands	r2, r1
    7a6a:	1c11      	adds	r1, r2, #0
    7a6c:	1c02      	adds	r2, r0, #0
    7a6e:	430a      	orrs	r2, r1
    7a70:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    7a72:	4b93      	ldr	r3, [pc, #588]	; (7cc0 <usb_init+0x340>)
    7a74:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    7a76:	0c9b      	lsrs	r3, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    7a78:	221f      	movs	r2, #31
    7a7a:	4013      	ands	r3, r2
    7a7c:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    7a7e:	6a3b      	ldr	r3, [r7, #32]
    7a80:	2b1f      	cmp	r3, #31
    7a82:	d101      	bne.n	7a88 <usb_init+0x108>
		pad_transp = 29;
    7a84:	231d      	movs	r3, #29
    7a86:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    7a88:	6a3b      	ldr	r3, [r7, #32]
    7a8a:	b2db      	uxtb	r3, r3
    7a8c:	1c1a      	adds	r2, r3, #0
    7a8e:	231f      	movs	r3, #31
    7a90:	4013      	ands	r3, r2
    7a92:	b2da      	uxtb	r2, r3
    7a94:	68bb      	ldr	r3, [r7, #8]
    7a96:	1c11      	adds	r1, r2, #0
    7a98:	221f      	movs	r2, #31
    7a9a:	1c08      	adds	r0, r1, #0
    7a9c:	4010      	ands	r0, r2
    7a9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    7aa0:	211f      	movs	r1, #31
    7aa2:	438a      	bics	r2, r1
    7aa4:	1c11      	adds	r1, r2, #0
    7aa6:	1c02      	adds	r2, r0, #0
    7aa8:	430a      	orrs	r2, r1
    7aaa:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    7aac:	4b84      	ldr	r3, [pc, #528]	; (7cc0 <usb_init+0x340>)
    7aae:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    7ab0:	0ddb      	lsrs	r3, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    7ab2:	2207      	movs	r2, #7
    7ab4:	4013      	ands	r3, r2
    7ab6:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    7ab8:	69fb      	ldr	r3, [r7, #28]
    7aba:	2b07      	cmp	r3, #7
    7abc:	d101      	bne.n	7ac2 <usb_init+0x142>
		pad_trim = 3;
    7abe:	2303      	movs	r3, #3
    7ac0:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    7ac2:	69fb      	ldr	r3, [r7, #28]
    7ac4:	b2db      	uxtb	r3, r3
    7ac6:	1c1a      	adds	r2, r3, #0
    7ac8:	2307      	movs	r3, #7
    7aca:	4013      	ands	r3, r2
    7acc:	b2da      	uxtb	r2, r3
    7ace:	68bb      	ldr	r3, [r7, #8]
    7ad0:	1c11      	adds	r1, r2, #0
    7ad2:	2207      	movs	r2, #7
    7ad4:	400a      	ands	r2, r1
    7ad6:	0310      	lsls	r0, r2, #12
    7ad8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    7ada:	497b      	ldr	r1, [pc, #492]	; (7cc8 <usb_init+0x348>)
    7adc:	400a      	ands	r2, r1
    7ade:	1c11      	adds	r1, r2, #0
    7ae0:	1c02      	adds	r2, r0, #0
    7ae2:	430a      	orrs	r2, r1
    7ae4:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    7ae6:	687b      	ldr	r3, [r7, #4]
    7ae8:	781a      	ldrb	r2, [r3, #0]
    7aea:	68bb      	ldr	r3, [r7, #8]
    7aec:	01d0      	lsls	r0, r2, #7
    7aee:	781a      	ldrb	r2, [r3, #0]
    7af0:	217f      	movs	r1, #127	; 0x7f
    7af2:	400a      	ands	r2, r1
    7af4:	1c11      	adds	r1, r2, #0
    7af6:	1c02      	adds	r2, r0, #0
    7af8:	430a      	orrs	r2, r1
    7afa:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	785a      	ldrb	r2, [r3, #1]
    7b00:	68bb      	ldr	r3, [r7, #8]
    7b02:	2101      	movs	r1, #1
    7b04:	400a      	ands	r2, r1
    7b06:	0090      	lsls	r0, r2, #2
    7b08:	781a      	ldrb	r2, [r3, #0]
    7b0a:	2104      	movs	r1, #4
    7b0c:	438a      	bics	r2, r1
    7b0e:	1c11      	adds	r1, r2, #0
    7b10:	1c02      	adds	r2, r0, #0
    7b12:	430a      	orrs	r2, r1
    7b14:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    7b16:	4a6d      	ldr	r2, [pc, #436]	; (7ccc <usb_init+0x34c>)
    7b18:	68bb      	ldr	r3, [r7, #8]
    7b1a:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	78db      	ldrb	r3, [r3, #3]
    7b20:	2b01      	cmp	r3, #1
    7b22:	d106      	bne.n	7b32 <usb_init+0x1b2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    7b24:	68fb      	ldr	r3, [r7, #12]
    7b26:	681b      	ldr	r3, [r3, #0]
    7b28:	891a      	ldrh	r2, [r3, #8]
    7b2a:	210c      	movs	r1, #12
    7b2c:	438a      	bics	r2, r1
    7b2e:	811a      	strh	r2, [r3, #8]
    7b30:	e00c      	b.n	7b4c <usb_init+0x1cc>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	78db      	ldrb	r3, [r3, #3]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d108      	bne.n	7b4c <usb_init+0x1cc>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7b3a:	68fb      	ldr	r3, [r7, #12]
    7b3c:	681b      	ldr	r3, [r3, #0]
    7b3e:	891a      	ldrh	r2, [r3, #8]
    7b40:	210c      	movs	r1, #12
    7b42:	438a      	bics	r2, r1
    7b44:	1c11      	adds	r1, r2, #0
    7b46:	2204      	movs	r2, #4
    7b48:	430a      	orrs	r2, r1
    7b4a:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    7b4c:	4a5f      	ldr	r2, [pc, #380]	; (7ccc <usb_init+0x34c>)
    7b4e:	2380      	movs	r3, #128	; 0x80
    7b50:	005b      	lsls	r3, r3, #1
    7b52:	1c10      	adds	r0, r2, #0
    7b54:	2100      	movs	r1, #0
    7b56:	1c1a      	adds	r2, r3, #0
    7b58:	4b5d      	ldr	r3, [pc, #372]	; (7cd0 <usb_init+0x350>)
    7b5a:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    7b5c:	2300      	movs	r3, #0
    7b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b60:	e008      	b.n	7b74 <usb_init+0x1f4>
		module_inst->host_callback[i] = NULL;
    7b62:	68fa      	ldr	r2, [r7, #12]
    7b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b66:	009b      	lsls	r3, r3, #2
    7b68:	18d3      	adds	r3, r2, r3
    7b6a:	2200      	movs	r2, #0
    7b6c:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    7b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b70:	3301      	adds	r3, #1
    7b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b76:	2b07      	cmp	r3, #7
    7b78:	d9f3      	bls.n	7b62 <usb_init+0x1e2>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7b7a:	2300      	movs	r3, #0
    7b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b7e:	e015      	b.n	7bac <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    7b80:	2300      	movs	r3, #0
    7b82:	62bb      	str	r3, [r7, #40]	; 0x28
    7b84:	e00c      	b.n	7ba0 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    7b86:	68fa      	ldr	r2, [r7, #12]
    7b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b8a:	0099      	lsls	r1, r3, #2
    7b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7b8e:	18cb      	adds	r3, r1, r3
    7b90:	3308      	adds	r3, #8
    7b92:	009b      	lsls	r3, r3, #2
    7b94:	18d3      	adds	r3, r2, r3
    7b96:	2200      	movs	r2, #0
    7b98:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    7b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7b9c:	3301      	adds	r3, #1
    7b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    7ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ba2:	2b03      	cmp	r3, #3
    7ba4:	d9ef      	bls.n	7b86 <usb_init+0x206>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ba8:	3301      	adds	r3, #1
    7baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bae:	2b07      	cmp	r3, #7
    7bb0:	d9e6      	bls.n	7b80 <usb_init+0x200>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    7bb2:	68fb      	ldr	r3, [r7, #12]
    7bb4:	22a4      	movs	r2, #164	; 0xa4
    7bb6:	2100      	movs	r1, #0
    7bb8:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    7bba:	68fb      	ldr	r3, [r7, #12]
    7bbc:	22a5      	movs	r2, #165	; 0xa5
    7bbe:	2100      	movs	r1, #0
    7bc0:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7bc2:	2300      	movs	r3, #0
    7bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bc6:	e010      	b.n	7bea <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    7bc8:	68fa      	ldr	r2, [r7, #12]
    7bca:	21a0      	movs	r1, #160	; 0xa0
    7bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bce:	18d3      	adds	r3, r2, r3
    7bd0:	185b      	adds	r3, r3, r1
    7bd2:	2200      	movs	r2, #0
    7bd4:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    7bd6:	68fa      	ldr	r2, [r7, #12]
    7bd8:	21a8      	movs	r1, #168	; 0xa8
    7bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bdc:	18d3      	adds	r3, r2, r3
    7bde:	185b      	adds	r3, r3, r1
    7be0:	2200      	movs	r2, #0
    7be2:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7be6:	3301      	adds	r3, #1
    7be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bec:	2b07      	cmp	r3, #7
    7bee:	d9eb      	bls.n	7bc8 <usb_init+0x248>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    7bf0:	2300      	movs	r3, #0
    7bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bf4:	e008      	b.n	7c08 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    7bf6:	68fb      	ldr	r3, [r7, #12]
    7bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7bfa:	322e      	adds	r2, #46	; 0x2e
    7bfc:	0092      	lsls	r2, r2, #2
    7bfe:	2100      	movs	r1, #0
    7c00:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    7c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c04:	3301      	adds	r3, #1
    7c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c0a:	2b06      	cmp	r3, #6
    7c0c:	d9f3      	bls.n	7bf6 <usb_init+0x276>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    7c0e:	2300      	movs	r3, #0
    7c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c12:	e015      	b.n	7c40 <usb_init+0x2c0>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    7c14:	2300      	movs	r3, #0
    7c16:	62bb      	str	r3, [r7, #40]	; 0x28
    7c18:	e00c      	b.n	7c34 <usb_init+0x2b4>
			module_inst->device_endpoint_callback[i][j] = NULL;
    7c1a:	68fa      	ldr	r2, [r7, #12]
    7c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c1e:	0099      	lsls	r1, r3, #2
    7c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c22:	18cb      	adds	r3, r1, r3
    7c24:	3334      	adds	r3, #52	; 0x34
    7c26:	009b      	lsls	r3, r3, #2
    7c28:	18d3      	adds	r3, r2, r3
    7c2a:	2200      	movs	r2, #0
    7c2c:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    7c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c30:	3301      	adds	r3, #1
    7c32:	62bb      	str	r3, [r7, #40]	; 0x28
    7c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c36:	2b03      	cmp	r3, #3
    7c38:	d9ef      	bls.n	7c1a <usb_init+0x29a>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    7c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c3c:	3301      	adds	r3, #1
    7c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c42:	2b07      	cmp	r3, #7
    7c44:	d9e6      	bls.n	7c14 <usb_init+0x294>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7c46:	68fa      	ldr	r2, [r7, #12]
    7c48:	23aa      	movs	r3, #170	; 0xaa
    7c4a:	005b      	lsls	r3, r3, #1
    7c4c:	2100      	movs	r1, #0
    7c4e:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    7c50:	68fa      	ldr	r2, [r7, #12]
    7c52:	23ab      	movs	r3, #171	; 0xab
    7c54:	005b      	lsls	r3, r3, #1
    7c56:	2100      	movs	r1, #0
    7c58:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    7c5a:	2300      	movs	r3, #0
    7c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    7c5e:	e012      	b.n	7c86 <usb_init+0x306>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    7c60:	68f9      	ldr	r1, [r7, #12]
    7c62:	23ac      	movs	r3, #172	; 0xac
    7c64:	005b      	lsls	r3, r3, #1
    7c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7c68:	188a      	adds	r2, r1, r2
    7c6a:	18d3      	adds	r3, r2, r3
    7c6c:	2200      	movs	r2, #0
    7c6e:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    7c70:	68f9      	ldr	r1, [r7, #12]
    7c72:	23b0      	movs	r3, #176	; 0xb0
    7c74:	005b      	lsls	r3, r3, #1
    7c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7c78:	188a      	adds	r2, r1, r2
    7c7a:	18d3      	adds	r3, r2, r3
    7c7c:	2200      	movs	r2, #0
    7c7e:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    7c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c82:	3301      	adds	r3, #1
    7c84:	62bb      	str	r3, [r7, #40]	; 0x28
    7c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c88:	2b07      	cmp	r3, #7
    7c8a:	d9e9      	bls.n	7c60 <usb_init+0x2e0>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    7c8c:	2007      	movs	r0, #7
    7c8e:	4b11      	ldr	r3, [pc, #68]	; (7cd4 <usb_init+0x354>)
    7c90:	4798      	blx	r3

	return STATUS_OK;
    7c92:	2300      	movs	r3, #0
}
    7c94:	1c18      	adds	r0, r3, #0
    7c96:	46bd      	mov	sp, r7
    7c98:	b00c      	add	sp, #48	; 0x30
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	20000194 	.word	0x20000194
    7ca0:	2000017c 	.word	0x2000017c
    7ca4:	00005fd5 	.word	0x00005fd5
    7ca8:	00006031 	.word	0x00006031
    7cac:	0000497d 	.word	0x0000497d
    7cb0:	00005fc1 	.word	0x00005fc1
    7cb4:	00004691 	.word	0x00004691
    7cb8:	000046d5 	.word	0x000046d5
    7cbc:	41005000 	.word	0x41005000
    7cc0:	00806024 	.word	0x00806024
    7cc4:	fffff83f 	.word	0xfffff83f
    7cc8:	ffff8fff 	.word	0xffff8fff
    7ccc:	20000464 	.word	0x20000464
    7cd0:	000082ef 	.word	0x000082ef
    7cd4:	00006059 	.word	0x00006059

00007cd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	b082      	sub	sp, #8
    7cdc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    7cde:	4b2f      	ldr	r3, [pc, #188]	; (7d9c <Reset_Handler+0xc4>)
    7ce0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    7ce2:	4b2f      	ldr	r3, [pc, #188]	; (7da0 <Reset_Handler+0xc8>)
    7ce4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    7ce6:	687a      	ldr	r2, [r7, #4]
    7ce8:	683b      	ldr	r3, [r7, #0]
    7cea:	429a      	cmp	r2, r3
    7cec:	d00c      	beq.n	7d08 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    7cee:	e007      	b.n	7d00 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    7cf0:	683b      	ldr	r3, [r7, #0]
    7cf2:	1d1a      	adds	r2, r3, #4
    7cf4:	603a      	str	r2, [r7, #0]
    7cf6:	687a      	ldr	r2, [r7, #4]
    7cf8:	1d11      	adds	r1, r2, #4
    7cfa:	6079      	str	r1, [r7, #4]
    7cfc:	6812      	ldr	r2, [r2, #0]
    7cfe:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    7d00:	683a      	ldr	r2, [r7, #0]
    7d02:	4b28      	ldr	r3, [pc, #160]	; (7da4 <Reset_Handler+0xcc>)
    7d04:	429a      	cmp	r2, r3
    7d06:	d3f3      	bcc.n	7cf0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7d08:	4b27      	ldr	r3, [pc, #156]	; (7da8 <Reset_Handler+0xd0>)
    7d0a:	603b      	str	r3, [r7, #0]
    7d0c:	e004      	b.n	7d18 <Reset_Handler+0x40>
                *pDest++ = 0;
    7d0e:	683b      	ldr	r3, [r7, #0]
    7d10:	1d1a      	adds	r2, r3, #4
    7d12:	603a      	str	r2, [r7, #0]
    7d14:	2200      	movs	r2, #0
    7d16:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7d18:	683a      	ldr	r2, [r7, #0]
    7d1a:	4b24      	ldr	r3, [pc, #144]	; (7dac <Reset_Handler+0xd4>)
    7d1c:	429a      	cmp	r2, r3
    7d1e:	d3f6      	bcc.n	7d0e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    7d20:	4b23      	ldr	r3, [pc, #140]	; (7db0 <Reset_Handler+0xd8>)
    7d22:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7d24:	4b23      	ldr	r3, [pc, #140]	; (7db4 <Reset_Handler+0xdc>)
    7d26:	687a      	ldr	r2, [r7, #4]
    7d28:	21ff      	movs	r1, #255	; 0xff
    7d2a:	438a      	bics	r2, r1
    7d2c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7d2e:	4a22      	ldr	r2, [pc, #136]	; (7db8 <Reset_Handler+0xe0>)
    7d30:	2390      	movs	r3, #144	; 0x90
    7d32:	005b      	lsls	r3, r3, #1
    7d34:	2102      	movs	r1, #2
    7d36:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7d38:	4b20      	ldr	r3, [pc, #128]	; (7dbc <Reset_Handler+0xe4>)
    7d3a:	78da      	ldrb	r2, [r3, #3]
    7d3c:	2103      	movs	r1, #3
    7d3e:	438a      	bics	r2, r1
    7d40:	1c11      	adds	r1, r2, #0
    7d42:	2202      	movs	r2, #2
    7d44:	430a      	orrs	r2, r1
    7d46:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7d48:	4b1c      	ldr	r3, [pc, #112]	; (7dbc <Reset_Handler+0xe4>)
    7d4a:	78da      	ldrb	r2, [r3, #3]
    7d4c:	210c      	movs	r1, #12
    7d4e:	438a      	bics	r2, r1
    7d50:	1c11      	adds	r1, r2, #0
    7d52:	2208      	movs	r2, #8
    7d54:	430a      	orrs	r2, r1
    7d56:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    7d58:	4b19      	ldr	r3, [pc, #100]	; (7dc0 <Reset_Handler+0xe8>)
    7d5a:	7b9a      	ldrb	r2, [r3, #14]
    7d5c:	2130      	movs	r1, #48	; 0x30
    7d5e:	438a      	bics	r2, r1
    7d60:	1c11      	adds	r1, r2, #0
    7d62:	2220      	movs	r2, #32
    7d64:	430a      	orrs	r2, r1
    7d66:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    7d68:	4b15      	ldr	r3, [pc, #84]	; (7dc0 <Reset_Handler+0xe8>)
    7d6a:	7b9a      	ldrb	r2, [r3, #14]
    7d6c:	210c      	movs	r1, #12
    7d6e:	438a      	bics	r2, r1
    7d70:	1c11      	adds	r1, r2, #0
    7d72:	2208      	movs	r2, #8
    7d74:	430a      	orrs	r2, r1
    7d76:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7d78:	4b11      	ldr	r3, [pc, #68]	; (7dc0 <Reset_Handler+0xe8>)
    7d7a:	7b9a      	ldrb	r2, [r3, #14]
    7d7c:	2103      	movs	r1, #3
    7d7e:	438a      	bics	r2, r1
    7d80:	1c11      	adds	r1, r2, #0
    7d82:	2202      	movs	r2, #2
    7d84:	430a      	orrs	r2, r1
    7d86:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    7d88:	4b0e      	ldr	r3, [pc, #56]	; (7dc4 <Reset_Handler+0xec>)
    7d8a:	685a      	ldr	r2, [r3, #4]
    7d8c:	2180      	movs	r1, #128	; 0x80
    7d8e:	430a      	orrs	r2, r1
    7d90:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    7d92:	4b0d      	ldr	r3, [pc, #52]	; (7dc8 <Reset_Handler+0xf0>)
    7d94:	4798      	blx	r3

        /* Branch to main function */
        main();
    7d96:	4b0d      	ldr	r3, [pc, #52]	; (7dcc <Reset_Handler+0xf4>)
    7d98:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    7d9a:	e7fe      	b.n	7d9a <Reset_Handler+0xc2>
    7d9c:	00008420 	.word	0x00008420
    7da0:	20000000 	.word	0x20000000
    7da4:	200000dc 	.word	0x200000dc
    7da8:	200000dc 	.word	0x200000dc
    7dac:	20000564 	.word	0x20000564
    7db0:	00000000 	.word	0x00000000
    7db4:	e000ed00 	.word	0xe000ed00
    7db8:	41007000 	.word	0x41007000
    7dbc:	41005000 	.word	0x41005000
    7dc0:	41004800 	.word	0x41004800
    7dc4:	41004000 	.word	0x41004000
    7dc8:	00008291 	.word	0x00008291
    7dcc:	00007e15 	.word	0x00007e15

00007dd0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	af00      	add	r7, sp, #0
        while (1) {
        }
    7dd4:	e7fe      	b.n	7dd4 <Dummy_Handler+0x4>
    7dd6:	46c0      	nop			; (mov r8, r8)

00007dd8 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    7dd8:	b580      	push	{r7, lr}
    7dda:	b082      	sub	sp, #8
    7ddc:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    7dde:	1dfb      	adds	r3, r7, #7
    7de0:	2200      	movs	r2, #0
    7de2:	701a      	strb	r2, [r3, #0]
    7de4:	e009      	b.n	7dfa <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    7de6:	1dfb      	adds	r3, r7, #7
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	4a09      	ldr	r2, [pc, #36]	; (7e10 <sleepmgr_init+0x38>)
    7dec:	2100      	movs	r1, #0
    7dee:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    7df0:	1dfb      	adds	r3, r7, #7
    7df2:	781a      	ldrb	r2, [r3, #0]
    7df4:	1dfb      	adds	r3, r7, #7
    7df6:	3201      	adds	r2, #1
    7df8:	701a      	strb	r2, [r3, #0]
    7dfa:	1dfb      	adds	r3, r7, #7
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	2b03      	cmp	r3, #3
    7e00:	d9f1      	bls.n	7de6 <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    7e02:	4b03      	ldr	r3, [pc, #12]	; (7e10 <sleepmgr_init+0x38>)
    7e04:	2201      	movs	r2, #1
    7e06:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    7e08:	46bd      	mov	sp, r7
    7e0a:	b002      	add	sp, #8
    7e0c:	bd80      	pop	{r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	20000254 	.word	0x20000254

00007e14 <main>:
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
}

int main(void)
{
    7e14:	b580      	push	{r7, lr}
    7e16:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    7e18:	4b0e      	ldr	r3, [pc, #56]	; (7e54 <main+0x40>)
    7e1a:	2201      	movs	r2, #1
    7e1c:	701a      	strb	r2, [r3, #0]
    7e1e:	f3bf 8f5f 	dmb	sy
    7e22:	b662      	cpsie	i
	system_init();
    7e24:	4b0c      	ldr	r3, [pc, #48]	; (7e58 <main+0x44>)
    7e26:	4798      	blx	r3

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    7e28:	205b      	movs	r0, #91	; 0x5b
    7e2a:	2102      	movs	r1, #2
    7e2c:	2200      	movs	r2, #0
    7e2e:	4b0b      	ldr	r3, [pc, #44]	; (7e5c <main+0x48>)
    7e30:	4798      	blx	r3
	RFM_setHighPower(true); // Always use this for RFM69HCW
    7e32:	2001      	movs	r0, #1
    7e34:	4b0a      	ldr	r3, [pc, #40]	; (7e60 <main+0x4c>)
    7e36:	4798      	blx	r3

	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    7e38:	4b0a      	ldr	r3, [pc, #40]	; (7e64 <main+0x50>)
    7e3a:	1c18      	adds	r0, r3, #0
    7e3c:	4b0a      	ldr	r3, [pc, #40]	; (7e68 <main+0x54>)
    7e3e:	4798      	blx	r3

	//configure_port_pins();

	// Initialize the sleep manager
	sleepmgr_init();
    7e40:	4b0a      	ldr	r3, [pc, #40]	; (7e6c <main+0x58>)
    7e42:	4798      	blx	r3
	ui_init();
    7e44:	4b0a      	ldr	r3, [pc, #40]	; (7e70 <main+0x5c>)
    7e46:	4798      	blx	r3
	ui_powerdown();
    7e48:	4b0a      	ldr	r3, [pc, #40]	; (7e74 <main+0x60>)
    7e4a:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    7e4c:	4b0a      	ldr	r3, [pc, #40]	; (7e78 <main+0x64>)
    7e4e:	4798      	blx	r3
			}
		}
#else /* #ifdef USB_DEVICE_LOW_SPEED */
		//sleepmgr_enter_sleep();
#endif
	}
    7e50:	e7fe      	b.n	7e50 <main+0x3c>
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	200000d8 	.word	0x200000d8
    7e58:	000049d5 	.word	0x000049d5
    7e5c:	00000b65 	.word	0x00000b65
    7e60:	00000aad 	.word	0x00000aad
    7e64:	000083ec 	.word	0x000083ec
    7e68:	0000129d 	.word	0x0000129d
    7e6c:	00007dd9 	.word	0x00007dd9
    7e70:	0000162d 	.word	0x0000162d
    7e74:	0000169d 	.word	0x0000169d
    7e78:	00001c4d 	.word	0x00001c4d

00007e7c <main_suspend_action>:
}

void main_suspend_action(void)
{
    7e7c:	b580      	push	{r7, lr}
    7e7e:	af00      	add	r7, sp, #0
	ui_powerdown();
    7e80:	4b01      	ldr	r3, [pc, #4]	; (7e88 <main_suspend_action+0xc>)
    7e82:	4798      	blx	r3
}
    7e84:	46bd      	mov	sp, r7
    7e86:	bd80      	pop	{r7, pc}
    7e88:	0000169d 	.word	0x0000169d

00007e8c <main_resume_action>:

void main_resume_action(void)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	af00      	add	r7, sp, #0
	ui_wakeup();
    7e90:	4b01      	ldr	r3, [pc, #4]	; (7e98 <main_resume_action+0xc>)
    7e92:	4798      	blx	r3
}
    7e94:	46bd      	mov	sp, r7
    7e96:	bd80      	pop	{r7, pc}
    7e98:	000016d9 	.word	0x000016d9

00007e9c <main_sof_action>:

void main_sof_action(void)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	af00      	add	r7, sp, #0
	if (!main_b_mouse_enable)
    7ea0:	4b08      	ldr	r3, [pc, #32]	; (7ec4 <main_sof_action+0x28>)
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	b2db      	uxtb	r3, r3
    7ea6:	2201      	movs	r2, #1
    7ea8:	4053      	eors	r3, r2
    7eaa:	b2db      	uxtb	r3, r3
    7eac:	2b00      	cmp	r3, #0
    7eae:	d000      	beq.n	7eb2 <main_sof_action+0x16>
		return;
    7eb0:	e005      	b.n	7ebe <main_sof_action+0x22>
	ui_process(udd_get_frame_number());
    7eb2:	4b05      	ldr	r3, [pc, #20]	; (7ec8 <main_sof_action+0x2c>)
    7eb4:	4798      	blx	r3
    7eb6:	1c03      	adds	r3, r0, #0
    7eb8:	1c18      	adds	r0, r3, #0
    7eba:	4b04      	ldr	r3, [pc, #16]	; (7ecc <main_sof_action+0x30>)
    7ebc:	4798      	blx	r3
}
    7ebe:	46bd      	mov	sp, r7
    7ec0:	bd80      	pop	{r7, pc}
    7ec2:	46c0      	nop			; (mov r8, r8)
    7ec4:	20000198 	.word	0x20000198
    7ec8:	00005229 	.word	0x00005229
    7ecc:	000016ed 	.word	0x000016ed

00007ed0 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    7ed4:	4b01      	ldr	r3, [pc, #4]	; (7edc <main_remotewakeup_enable+0xc>)
    7ed6:	4798      	blx	r3
}
    7ed8:	46bd      	mov	sp, r7
    7eda:	bd80      	pop	{r7, pc}
    7edc:	000016b1 	.word	0x000016b1

00007ee0 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    7ee4:	4b01      	ldr	r3, [pc, #4]	; (7eec <main_remotewakeup_disable+0xc>)
    7ee6:	4798      	blx	r3
}
    7ee8:	46bd      	mov	sp, r7
    7eea:	bd80      	pop	{r7, pc}
    7eec:	000016c5 	.word	0x000016c5

00007ef0 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    7ef0:	b580      	push	{r7, lr}
    7ef2:	af00      	add	r7, sp, #0
	ui_powerdown();
    7ef4:	4b01      	ldr	r3, [pc, #4]	; (7efc <main_suspend_lpm_action+0xc>)
    7ef6:	4798      	blx	r3
}
    7ef8:	46bd      	mov	sp, r7
    7efa:	bd80      	pop	{r7, pc}
    7efc:	0000169d 	.word	0x0000169d

00007f00 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    7f00:	b580      	push	{r7, lr}
    7f02:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    7f04:	4b01      	ldr	r3, [pc, #4]	; (7f0c <main_remotewakeup_lpm_disable+0xc>)
    7f06:	4798      	blx	r3
}
    7f08:	46bd      	mov	sp, r7
    7f0a:	bd80      	pop	{r7, pc}
    7f0c:	000016c5 	.word	0x000016c5

00007f10 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    7f10:	b580      	push	{r7, lr}
    7f12:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    7f14:	4b01      	ldr	r3, [pc, #4]	; (7f1c <main_remotewakeup_lpm_enable+0xc>)
    7f16:	4798      	blx	r3
}
    7f18:	46bd      	mov	sp, r7
    7f1a:	bd80      	pop	{r7, pc}
    7f1c:	000016b1 	.word	0x000016b1

00007f20 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
    7f20:	b580      	push	{r7, lr}
    7f22:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    7f24:	4b03      	ldr	r3, [pc, #12]	; (7f34 <main_mouse_enable+0x14>)
    7f26:	2201      	movs	r2, #1
    7f28:	701a      	strb	r2, [r3, #0]
	return true;
    7f2a:	2301      	movs	r3, #1
}
    7f2c:	1c18      	adds	r0, r3, #0
    7f2e:	46bd      	mov	sp, r7
    7f30:	bd80      	pop	{r7, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	20000198 	.word	0x20000198

00007f38 <main_mouse_disable>:

void main_mouse_disable(void)
{
    7f38:	b580      	push	{r7, lr}
    7f3a:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    7f3c:	4b02      	ldr	r3, [pc, #8]	; (7f48 <main_mouse_disable+0x10>)
    7f3e:	2200      	movs	r2, #0
    7f40:	701a      	strb	r2, [r3, #0]
}
    7f42:	46bd      	mov	sp, r7
    7f44:	bd80      	pop	{r7, pc}
    7f46:	46c0      	nop			; (mov r8, r8)
    7f48:	20000198 	.word	0x20000198

00007f4c <__aeabi_uidiv>:
    7f4c:	2200      	movs	r2, #0
    7f4e:	0843      	lsrs	r3, r0, #1
    7f50:	428b      	cmp	r3, r1
    7f52:	d374      	bcc.n	803e <__aeabi_uidiv+0xf2>
    7f54:	0903      	lsrs	r3, r0, #4
    7f56:	428b      	cmp	r3, r1
    7f58:	d35f      	bcc.n	801a <__aeabi_uidiv+0xce>
    7f5a:	0a03      	lsrs	r3, r0, #8
    7f5c:	428b      	cmp	r3, r1
    7f5e:	d344      	bcc.n	7fea <__aeabi_uidiv+0x9e>
    7f60:	0b03      	lsrs	r3, r0, #12
    7f62:	428b      	cmp	r3, r1
    7f64:	d328      	bcc.n	7fb8 <__aeabi_uidiv+0x6c>
    7f66:	0c03      	lsrs	r3, r0, #16
    7f68:	428b      	cmp	r3, r1
    7f6a:	d30d      	bcc.n	7f88 <__aeabi_uidiv+0x3c>
    7f6c:	22ff      	movs	r2, #255	; 0xff
    7f6e:	0209      	lsls	r1, r1, #8
    7f70:	ba12      	rev	r2, r2
    7f72:	0c03      	lsrs	r3, r0, #16
    7f74:	428b      	cmp	r3, r1
    7f76:	d302      	bcc.n	7f7e <__aeabi_uidiv+0x32>
    7f78:	1212      	asrs	r2, r2, #8
    7f7a:	0209      	lsls	r1, r1, #8
    7f7c:	d065      	beq.n	804a <__aeabi_uidiv+0xfe>
    7f7e:	0b03      	lsrs	r3, r0, #12
    7f80:	428b      	cmp	r3, r1
    7f82:	d319      	bcc.n	7fb8 <__aeabi_uidiv+0x6c>
    7f84:	e000      	b.n	7f88 <__aeabi_uidiv+0x3c>
    7f86:	0a09      	lsrs	r1, r1, #8
    7f88:	0bc3      	lsrs	r3, r0, #15
    7f8a:	428b      	cmp	r3, r1
    7f8c:	d301      	bcc.n	7f92 <__aeabi_uidiv+0x46>
    7f8e:	03cb      	lsls	r3, r1, #15
    7f90:	1ac0      	subs	r0, r0, r3
    7f92:	4152      	adcs	r2, r2
    7f94:	0b83      	lsrs	r3, r0, #14
    7f96:	428b      	cmp	r3, r1
    7f98:	d301      	bcc.n	7f9e <__aeabi_uidiv+0x52>
    7f9a:	038b      	lsls	r3, r1, #14
    7f9c:	1ac0      	subs	r0, r0, r3
    7f9e:	4152      	adcs	r2, r2
    7fa0:	0b43      	lsrs	r3, r0, #13
    7fa2:	428b      	cmp	r3, r1
    7fa4:	d301      	bcc.n	7faa <__aeabi_uidiv+0x5e>
    7fa6:	034b      	lsls	r3, r1, #13
    7fa8:	1ac0      	subs	r0, r0, r3
    7faa:	4152      	adcs	r2, r2
    7fac:	0b03      	lsrs	r3, r0, #12
    7fae:	428b      	cmp	r3, r1
    7fb0:	d301      	bcc.n	7fb6 <__aeabi_uidiv+0x6a>
    7fb2:	030b      	lsls	r3, r1, #12
    7fb4:	1ac0      	subs	r0, r0, r3
    7fb6:	4152      	adcs	r2, r2
    7fb8:	0ac3      	lsrs	r3, r0, #11
    7fba:	428b      	cmp	r3, r1
    7fbc:	d301      	bcc.n	7fc2 <__aeabi_uidiv+0x76>
    7fbe:	02cb      	lsls	r3, r1, #11
    7fc0:	1ac0      	subs	r0, r0, r3
    7fc2:	4152      	adcs	r2, r2
    7fc4:	0a83      	lsrs	r3, r0, #10
    7fc6:	428b      	cmp	r3, r1
    7fc8:	d301      	bcc.n	7fce <__aeabi_uidiv+0x82>
    7fca:	028b      	lsls	r3, r1, #10
    7fcc:	1ac0      	subs	r0, r0, r3
    7fce:	4152      	adcs	r2, r2
    7fd0:	0a43      	lsrs	r3, r0, #9
    7fd2:	428b      	cmp	r3, r1
    7fd4:	d301      	bcc.n	7fda <__aeabi_uidiv+0x8e>
    7fd6:	024b      	lsls	r3, r1, #9
    7fd8:	1ac0      	subs	r0, r0, r3
    7fda:	4152      	adcs	r2, r2
    7fdc:	0a03      	lsrs	r3, r0, #8
    7fde:	428b      	cmp	r3, r1
    7fe0:	d301      	bcc.n	7fe6 <__aeabi_uidiv+0x9a>
    7fe2:	020b      	lsls	r3, r1, #8
    7fe4:	1ac0      	subs	r0, r0, r3
    7fe6:	4152      	adcs	r2, r2
    7fe8:	d2cd      	bcs.n	7f86 <__aeabi_uidiv+0x3a>
    7fea:	09c3      	lsrs	r3, r0, #7
    7fec:	428b      	cmp	r3, r1
    7fee:	d301      	bcc.n	7ff4 <__aeabi_uidiv+0xa8>
    7ff0:	01cb      	lsls	r3, r1, #7
    7ff2:	1ac0      	subs	r0, r0, r3
    7ff4:	4152      	adcs	r2, r2
    7ff6:	0983      	lsrs	r3, r0, #6
    7ff8:	428b      	cmp	r3, r1
    7ffa:	d301      	bcc.n	8000 <__aeabi_uidiv+0xb4>
    7ffc:	018b      	lsls	r3, r1, #6
    7ffe:	1ac0      	subs	r0, r0, r3
    8000:	4152      	adcs	r2, r2
    8002:	0943      	lsrs	r3, r0, #5
    8004:	428b      	cmp	r3, r1
    8006:	d301      	bcc.n	800c <__aeabi_uidiv+0xc0>
    8008:	014b      	lsls	r3, r1, #5
    800a:	1ac0      	subs	r0, r0, r3
    800c:	4152      	adcs	r2, r2
    800e:	0903      	lsrs	r3, r0, #4
    8010:	428b      	cmp	r3, r1
    8012:	d301      	bcc.n	8018 <__aeabi_uidiv+0xcc>
    8014:	010b      	lsls	r3, r1, #4
    8016:	1ac0      	subs	r0, r0, r3
    8018:	4152      	adcs	r2, r2
    801a:	08c3      	lsrs	r3, r0, #3
    801c:	428b      	cmp	r3, r1
    801e:	d301      	bcc.n	8024 <__aeabi_uidiv+0xd8>
    8020:	00cb      	lsls	r3, r1, #3
    8022:	1ac0      	subs	r0, r0, r3
    8024:	4152      	adcs	r2, r2
    8026:	0883      	lsrs	r3, r0, #2
    8028:	428b      	cmp	r3, r1
    802a:	d301      	bcc.n	8030 <__aeabi_uidiv+0xe4>
    802c:	008b      	lsls	r3, r1, #2
    802e:	1ac0      	subs	r0, r0, r3
    8030:	4152      	adcs	r2, r2
    8032:	0843      	lsrs	r3, r0, #1
    8034:	428b      	cmp	r3, r1
    8036:	d301      	bcc.n	803c <__aeabi_uidiv+0xf0>
    8038:	004b      	lsls	r3, r1, #1
    803a:	1ac0      	subs	r0, r0, r3
    803c:	4152      	adcs	r2, r2
    803e:	1a41      	subs	r1, r0, r1
    8040:	d200      	bcs.n	8044 <__aeabi_uidiv+0xf8>
    8042:	4601      	mov	r1, r0
    8044:	4152      	adcs	r2, r2
    8046:	4610      	mov	r0, r2
    8048:	4770      	bx	lr
    804a:	e7ff      	b.n	804c <__aeabi_uidiv+0x100>
    804c:	b501      	push	{r0, lr}
    804e:	2000      	movs	r0, #0
    8050:	f000 f8fc 	bl	824c <__aeabi_idiv0>
    8054:	bd02      	pop	{r1, pc}
    8056:	46c0      	nop			; (mov r8, r8)

00008058 <__aeabi_uidivmod>:
    8058:	2900      	cmp	r1, #0
    805a:	d0f7      	beq.n	804c <__aeabi_uidiv+0x100>
    805c:	b503      	push	{r0, r1, lr}
    805e:	f7ff ff75 	bl	7f4c <__aeabi_uidiv>
    8062:	bc0e      	pop	{r1, r2, r3}
    8064:	4342      	muls	r2, r0
    8066:	1a89      	subs	r1, r1, r2
    8068:	4718      	bx	r3
    806a:	46c0      	nop			; (mov r8, r8)

0000806c <__aeabi_idiv>:
    806c:	4603      	mov	r3, r0
    806e:	430b      	orrs	r3, r1
    8070:	d47f      	bmi.n	8172 <__aeabi_idiv+0x106>
    8072:	2200      	movs	r2, #0
    8074:	0843      	lsrs	r3, r0, #1
    8076:	428b      	cmp	r3, r1
    8078:	d374      	bcc.n	8164 <__aeabi_idiv+0xf8>
    807a:	0903      	lsrs	r3, r0, #4
    807c:	428b      	cmp	r3, r1
    807e:	d35f      	bcc.n	8140 <__aeabi_idiv+0xd4>
    8080:	0a03      	lsrs	r3, r0, #8
    8082:	428b      	cmp	r3, r1
    8084:	d344      	bcc.n	8110 <__aeabi_idiv+0xa4>
    8086:	0b03      	lsrs	r3, r0, #12
    8088:	428b      	cmp	r3, r1
    808a:	d328      	bcc.n	80de <__aeabi_idiv+0x72>
    808c:	0c03      	lsrs	r3, r0, #16
    808e:	428b      	cmp	r3, r1
    8090:	d30d      	bcc.n	80ae <__aeabi_idiv+0x42>
    8092:	22ff      	movs	r2, #255	; 0xff
    8094:	0209      	lsls	r1, r1, #8
    8096:	ba12      	rev	r2, r2
    8098:	0c03      	lsrs	r3, r0, #16
    809a:	428b      	cmp	r3, r1
    809c:	d302      	bcc.n	80a4 <__aeabi_idiv+0x38>
    809e:	1212      	asrs	r2, r2, #8
    80a0:	0209      	lsls	r1, r1, #8
    80a2:	d065      	beq.n	8170 <__aeabi_idiv+0x104>
    80a4:	0b03      	lsrs	r3, r0, #12
    80a6:	428b      	cmp	r3, r1
    80a8:	d319      	bcc.n	80de <__aeabi_idiv+0x72>
    80aa:	e000      	b.n	80ae <__aeabi_idiv+0x42>
    80ac:	0a09      	lsrs	r1, r1, #8
    80ae:	0bc3      	lsrs	r3, r0, #15
    80b0:	428b      	cmp	r3, r1
    80b2:	d301      	bcc.n	80b8 <__aeabi_idiv+0x4c>
    80b4:	03cb      	lsls	r3, r1, #15
    80b6:	1ac0      	subs	r0, r0, r3
    80b8:	4152      	adcs	r2, r2
    80ba:	0b83      	lsrs	r3, r0, #14
    80bc:	428b      	cmp	r3, r1
    80be:	d301      	bcc.n	80c4 <__aeabi_idiv+0x58>
    80c0:	038b      	lsls	r3, r1, #14
    80c2:	1ac0      	subs	r0, r0, r3
    80c4:	4152      	adcs	r2, r2
    80c6:	0b43      	lsrs	r3, r0, #13
    80c8:	428b      	cmp	r3, r1
    80ca:	d301      	bcc.n	80d0 <__aeabi_idiv+0x64>
    80cc:	034b      	lsls	r3, r1, #13
    80ce:	1ac0      	subs	r0, r0, r3
    80d0:	4152      	adcs	r2, r2
    80d2:	0b03      	lsrs	r3, r0, #12
    80d4:	428b      	cmp	r3, r1
    80d6:	d301      	bcc.n	80dc <__aeabi_idiv+0x70>
    80d8:	030b      	lsls	r3, r1, #12
    80da:	1ac0      	subs	r0, r0, r3
    80dc:	4152      	adcs	r2, r2
    80de:	0ac3      	lsrs	r3, r0, #11
    80e0:	428b      	cmp	r3, r1
    80e2:	d301      	bcc.n	80e8 <__aeabi_idiv+0x7c>
    80e4:	02cb      	lsls	r3, r1, #11
    80e6:	1ac0      	subs	r0, r0, r3
    80e8:	4152      	adcs	r2, r2
    80ea:	0a83      	lsrs	r3, r0, #10
    80ec:	428b      	cmp	r3, r1
    80ee:	d301      	bcc.n	80f4 <__aeabi_idiv+0x88>
    80f0:	028b      	lsls	r3, r1, #10
    80f2:	1ac0      	subs	r0, r0, r3
    80f4:	4152      	adcs	r2, r2
    80f6:	0a43      	lsrs	r3, r0, #9
    80f8:	428b      	cmp	r3, r1
    80fa:	d301      	bcc.n	8100 <__aeabi_idiv+0x94>
    80fc:	024b      	lsls	r3, r1, #9
    80fe:	1ac0      	subs	r0, r0, r3
    8100:	4152      	adcs	r2, r2
    8102:	0a03      	lsrs	r3, r0, #8
    8104:	428b      	cmp	r3, r1
    8106:	d301      	bcc.n	810c <__aeabi_idiv+0xa0>
    8108:	020b      	lsls	r3, r1, #8
    810a:	1ac0      	subs	r0, r0, r3
    810c:	4152      	adcs	r2, r2
    810e:	d2cd      	bcs.n	80ac <__aeabi_idiv+0x40>
    8110:	09c3      	lsrs	r3, r0, #7
    8112:	428b      	cmp	r3, r1
    8114:	d301      	bcc.n	811a <__aeabi_idiv+0xae>
    8116:	01cb      	lsls	r3, r1, #7
    8118:	1ac0      	subs	r0, r0, r3
    811a:	4152      	adcs	r2, r2
    811c:	0983      	lsrs	r3, r0, #6
    811e:	428b      	cmp	r3, r1
    8120:	d301      	bcc.n	8126 <__aeabi_idiv+0xba>
    8122:	018b      	lsls	r3, r1, #6
    8124:	1ac0      	subs	r0, r0, r3
    8126:	4152      	adcs	r2, r2
    8128:	0943      	lsrs	r3, r0, #5
    812a:	428b      	cmp	r3, r1
    812c:	d301      	bcc.n	8132 <__aeabi_idiv+0xc6>
    812e:	014b      	lsls	r3, r1, #5
    8130:	1ac0      	subs	r0, r0, r3
    8132:	4152      	adcs	r2, r2
    8134:	0903      	lsrs	r3, r0, #4
    8136:	428b      	cmp	r3, r1
    8138:	d301      	bcc.n	813e <__aeabi_idiv+0xd2>
    813a:	010b      	lsls	r3, r1, #4
    813c:	1ac0      	subs	r0, r0, r3
    813e:	4152      	adcs	r2, r2
    8140:	08c3      	lsrs	r3, r0, #3
    8142:	428b      	cmp	r3, r1
    8144:	d301      	bcc.n	814a <__aeabi_idiv+0xde>
    8146:	00cb      	lsls	r3, r1, #3
    8148:	1ac0      	subs	r0, r0, r3
    814a:	4152      	adcs	r2, r2
    814c:	0883      	lsrs	r3, r0, #2
    814e:	428b      	cmp	r3, r1
    8150:	d301      	bcc.n	8156 <__aeabi_idiv+0xea>
    8152:	008b      	lsls	r3, r1, #2
    8154:	1ac0      	subs	r0, r0, r3
    8156:	4152      	adcs	r2, r2
    8158:	0843      	lsrs	r3, r0, #1
    815a:	428b      	cmp	r3, r1
    815c:	d301      	bcc.n	8162 <__aeabi_idiv+0xf6>
    815e:	004b      	lsls	r3, r1, #1
    8160:	1ac0      	subs	r0, r0, r3
    8162:	4152      	adcs	r2, r2
    8164:	1a41      	subs	r1, r0, r1
    8166:	d200      	bcs.n	816a <__aeabi_idiv+0xfe>
    8168:	4601      	mov	r1, r0
    816a:	4152      	adcs	r2, r2
    816c:	4610      	mov	r0, r2
    816e:	4770      	bx	lr
    8170:	e05d      	b.n	822e <__aeabi_idiv+0x1c2>
    8172:	0fca      	lsrs	r2, r1, #31
    8174:	d000      	beq.n	8178 <__aeabi_idiv+0x10c>
    8176:	4249      	negs	r1, r1
    8178:	1003      	asrs	r3, r0, #32
    817a:	d300      	bcc.n	817e <__aeabi_idiv+0x112>
    817c:	4240      	negs	r0, r0
    817e:	4053      	eors	r3, r2
    8180:	2200      	movs	r2, #0
    8182:	469c      	mov	ip, r3
    8184:	0903      	lsrs	r3, r0, #4
    8186:	428b      	cmp	r3, r1
    8188:	d32d      	bcc.n	81e6 <__aeabi_idiv+0x17a>
    818a:	0a03      	lsrs	r3, r0, #8
    818c:	428b      	cmp	r3, r1
    818e:	d312      	bcc.n	81b6 <__aeabi_idiv+0x14a>
    8190:	22fc      	movs	r2, #252	; 0xfc
    8192:	0189      	lsls	r1, r1, #6
    8194:	ba12      	rev	r2, r2
    8196:	0a03      	lsrs	r3, r0, #8
    8198:	428b      	cmp	r3, r1
    819a:	d30c      	bcc.n	81b6 <__aeabi_idiv+0x14a>
    819c:	0189      	lsls	r1, r1, #6
    819e:	1192      	asrs	r2, r2, #6
    81a0:	428b      	cmp	r3, r1
    81a2:	d308      	bcc.n	81b6 <__aeabi_idiv+0x14a>
    81a4:	0189      	lsls	r1, r1, #6
    81a6:	1192      	asrs	r2, r2, #6
    81a8:	428b      	cmp	r3, r1
    81aa:	d304      	bcc.n	81b6 <__aeabi_idiv+0x14a>
    81ac:	0189      	lsls	r1, r1, #6
    81ae:	d03a      	beq.n	8226 <__aeabi_idiv+0x1ba>
    81b0:	1192      	asrs	r2, r2, #6
    81b2:	e000      	b.n	81b6 <__aeabi_idiv+0x14a>
    81b4:	0989      	lsrs	r1, r1, #6
    81b6:	09c3      	lsrs	r3, r0, #7
    81b8:	428b      	cmp	r3, r1
    81ba:	d301      	bcc.n	81c0 <__aeabi_idiv+0x154>
    81bc:	01cb      	lsls	r3, r1, #7
    81be:	1ac0      	subs	r0, r0, r3
    81c0:	4152      	adcs	r2, r2
    81c2:	0983      	lsrs	r3, r0, #6
    81c4:	428b      	cmp	r3, r1
    81c6:	d301      	bcc.n	81cc <__aeabi_idiv+0x160>
    81c8:	018b      	lsls	r3, r1, #6
    81ca:	1ac0      	subs	r0, r0, r3
    81cc:	4152      	adcs	r2, r2
    81ce:	0943      	lsrs	r3, r0, #5
    81d0:	428b      	cmp	r3, r1
    81d2:	d301      	bcc.n	81d8 <__aeabi_idiv+0x16c>
    81d4:	014b      	lsls	r3, r1, #5
    81d6:	1ac0      	subs	r0, r0, r3
    81d8:	4152      	adcs	r2, r2
    81da:	0903      	lsrs	r3, r0, #4
    81dc:	428b      	cmp	r3, r1
    81de:	d301      	bcc.n	81e4 <__aeabi_idiv+0x178>
    81e0:	010b      	lsls	r3, r1, #4
    81e2:	1ac0      	subs	r0, r0, r3
    81e4:	4152      	adcs	r2, r2
    81e6:	08c3      	lsrs	r3, r0, #3
    81e8:	428b      	cmp	r3, r1
    81ea:	d301      	bcc.n	81f0 <__aeabi_idiv+0x184>
    81ec:	00cb      	lsls	r3, r1, #3
    81ee:	1ac0      	subs	r0, r0, r3
    81f0:	4152      	adcs	r2, r2
    81f2:	0883      	lsrs	r3, r0, #2
    81f4:	428b      	cmp	r3, r1
    81f6:	d301      	bcc.n	81fc <__aeabi_idiv+0x190>
    81f8:	008b      	lsls	r3, r1, #2
    81fa:	1ac0      	subs	r0, r0, r3
    81fc:	4152      	adcs	r2, r2
    81fe:	d2d9      	bcs.n	81b4 <__aeabi_idiv+0x148>
    8200:	0843      	lsrs	r3, r0, #1
    8202:	428b      	cmp	r3, r1
    8204:	d301      	bcc.n	820a <__aeabi_idiv+0x19e>
    8206:	004b      	lsls	r3, r1, #1
    8208:	1ac0      	subs	r0, r0, r3
    820a:	4152      	adcs	r2, r2
    820c:	1a41      	subs	r1, r0, r1
    820e:	d200      	bcs.n	8212 <__aeabi_idiv+0x1a6>
    8210:	4601      	mov	r1, r0
    8212:	4663      	mov	r3, ip
    8214:	4152      	adcs	r2, r2
    8216:	105b      	asrs	r3, r3, #1
    8218:	4610      	mov	r0, r2
    821a:	d301      	bcc.n	8220 <__aeabi_idiv+0x1b4>
    821c:	4240      	negs	r0, r0
    821e:	2b00      	cmp	r3, #0
    8220:	d500      	bpl.n	8224 <__aeabi_idiv+0x1b8>
    8222:	4249      	negs	r1, r1
    8224:	4770      	bx	lr
    8226:	4663      	mov	r3, ip
    8228:	105b      	asrs	r3, r3, #1
    822a:	d300      	bcc.n	822e <__aeabi_idiv+0x1c2>
    822c:	4240      	negs	r0, r0
    822e:	b501      	push	{r0, lr}
    8230:	2000      	movs	r0, #0
    8232:	f000 f80b 	bl	824c <__aeabi_idiv0>
    8236:	bd02      	pop	{r1, pc}

00008238 <__aeabi_idivmod>:
    8238:	2900      	cmp	r1, #0
    823a:	d0f8      	beq.n	822e <__aeabi_idiv+0x1c2>
    823c:	b503      	push	{r0, r1, lr}
    823e:	f7ff ff15 	bl	806c <__aeabi_idiv>
    8242:	bc0e      	pop	{r1, r2, r3}
    8244:	4342      	muls	r2, r0
    8246:	1a89      	subs	r1, r1, r2
    8248:	4718      	bx	r3
    824a:	46c0      	nop			; (mov r8, r8)

0000824c <__aeabi_idiv0>:
    824c:	4770      	bx	lr
    824e:	46c0      	nop			; (mov r8, r8)

00008250 <__ctzsi2>:
    8250:	4241      	negs	r1, r0
    8252:	4008      	ands	r0, r1
    8254:	211c      	movs	r1, #28
    8256:	2301      	movs	r3, #1
    8258:	041b      	lsls	r3, r3, #16
    825a:	4298      	cmp	r0, r3
    825c:	d301      	bcc.n	8262 <__ctzsi2+0x12>
    825e:	0c00      	lsrs	r0, r0, #16
    8260:	3910      	subs	r1, #16
    8262:	0a1b      	lsrs	r3, r3, #8
    8264:	4298      	cmp	r0, r3
    8266:	d301      	bcc.n	826c <__ctzsi2+0x1c>
    8268:	0a00      	lsrs	r0, r0, #8
    826a:	3908      	subs	r1, #8
    826c:	091b      	lsrs	r3, r3, #4
    826e:	4298      	cmp	r0, r3
    8270:	d301      	bcc.n	8276 <__ctzsi2+0x26>
    8272:	0900      	lsrs	r0, r0, #4
    8274:	3904      	subs	r1, #4
    8276:	a202      	add	r2, pc, #8	; (adr r2, 8280 <__ctzsi2+0x30>)
    8278:	5c10      	ldrb	r0, [r2, r0]
    827a:	1a40      	subs	r0, r0, r1
    827c:	4770      	bx	lr
    827e:	46c0      	nop			; (mov r8, r8)
    8280:	1d1d1c1b 	.word	0x1d1d1c1b
    8284:	1e1e1e1e 	.word	0x1e1e1e1e
    8288:	1f1f1f1f 	.word	0x1f1f1f1f
    828c:	1f1f1f1f 	.word	0x1f1f1f1f

00008290 <__libc_init_array>:
    8290:	4b0e      	ldr	r3, [pc, #56]	; (82cc <__libc_init_array+0x3c>)
    8292:	b570      	push	{r4, r5, r6, lr}
    8294:	2500      	movs	r5, #0
    8296:	1c1e      	adds	r6, r3, #0
    8298:	4c0d      	ldr	r4, [pc, #52]	; (82d0 <__libc_init_array+0x40>)
    829a:	1ae4      	subs	r4, r4, r3
    829c:	10a4      	asrs	r4, r4, #2
    829e:	42a5      	cmp	r5, r4
    82a0:	d004      	beq.n	82ac <__libc_init_array+0x1c>
    82a2:	00ab      	lsls	r3, r5, #2
    82a4:	58f3      	ldr	r3, [r6, r3]
    82a6:	4798      	blx	r3
    82a8:	3501      	adds	r5, #1
    82aa:	e7f8      	b.n	829e <__libc_init_array+0xe>
    82ac:	f000 f8a8 	bl	8400 <_init>
    82b0:	4b08      	ldr	r3, [pc, #32]	; (82d4 <__libc_init_array+0x44>)
    82b2:	2500      	movs	r5, #0
    82b4:	1c1e      	adds	r6, r3, #0
    82b6:	4c08      	ldr	r4, [pc, #32]	; (82d8 <__libc_init_array+0x48>)
    82b8:	1ae4      	subs	r4, r4, r3
    82ba:	10a4      	asrs	r4, r4, #2
    82bc:	42a5      	cmp	r5, r4
    82be:	d004      	beq.n	82ca <__libc_init_array+0x3a>
    82c0:	00ab      	lsls	r3, r5, #2
    82c2:	58f3      	ldr	r3, [r6, r3]
    82c4:	4798      	blx	r3
    82c6:	3501      	adds	r5, #1
    82c8:	e7f8      	b.n	82bc <__libc_init_array+0x2c>
    82ca:	bd70      	pop	{r4, r5, r6, pc}
    82cc:	0000840c 	.word	0x0000840c
    82d0:	0000840c 	.word	0x0000840c
    82d4:	0000840c 	.word	0x0000840c
    82d8:	00008410 	.word	0x00008410

000082dc <memcpy>:
    82dc:	2300      	movs	r3, #0
    82de:	b510      	push	{r4, lr}
    82e0:	4293      	cmp	r3, r2
    82e2:	d003      	beq.n	82ec <memcpy+0x10>
    82e4:	5ccc      	ldrb	r4, [r1, r3]
    82e6:	54c4      	strb	r4, [r0, r3]
    82e8:	3301      	adds	r3, #1
    82ea:	e7f9      	b.n	82e0 <memcpy+0x4>
    82ec:	bd10      	pop	{r4, pc}

000082ee <memset>:
    82ee:	1c03      	adds	r3, r0, #0
    82f0:	1882      	adds	r2, r0, r2
    82f2:	4293      	cmp	r3, r2
    82f4:	d002      	beq.n	82fc <memset+0xe>
    82f6:	7019      	strb	r1, [r3, #0]
    82f8:	3301      	adds	r3, #1
    82fa:	e7fa      	b.n	82f2 <memset+0x4>
    82fc:	4770      	bx	lr
    82fe:	0000      	movs	r0, r0
    8300:	00000fc2 	.word	0x00000fc2
    8304:	00000f9a 	.word	0x00000f9a
    8308:	00000f72 	.word	0x00000f72
    830c:	00000f38 	.word	0x00000f38
    8310:	00000efe 	.word	0x00000efe
    8314:	000023c6 	.word	0x000023c6
    8318:	000023ae 	.word	0x000023ae
    831c:	000023c6 	.word	0x000023c6
    8320:	000023b6 	.word	0x000023b6
    8324:	000023c6 	.word	0x000023c6
    8328:	000023a6 	.word	0x000023a6
    832c:	000023c6 	.word	0x000023c6
    8330:	000023c6 	.word	0x000023c6
    8334:	000023c6 	.word	0x000023c6
    8338:	000023be 	.word	0x000023be
    833c:	42000800 	.word	0x42000800
    8340:	42000c00 	.word	0x42000c00
    8344:	42001000 	.word	0x42001000
    8348:	42001400 	.word	0x42001400
    834c:	42001800 	.word	0x42001800
    8350:	42001c00 	.word	0x42001c00
    8354:	00003e46 	.word	0x00003e46
    8358:	00003ec2 	.word	0x00003ec2
    835c:	00003ec2 	.word	0x00003ec2
    8360:	00003e68 	.word	0x00003e68
    8364:	00003e62 	.word	0x00003e62
    8368:	00003e6e 	.word	0x00003e6e
    836c:	00003e4c 	.word	0x00003e4c
    8370:	00003e74 	.word	0x00003e74
    8374:	00003ea8 	.word	0x00003ea8
    8378:	00004068 	.word	0x00004068
    837c:	000040b8 	.word	0x000040b8
    8380:	000040b8 	.word	0x000040b8
    8384:	000040b4 	.word	0x000040b4
    8388:	0000405a 	.word	0x0000405a
    838c:	0000407a 	.word	0x0000407a
    8390:	0000404a 	.word	0x0000404a
    8394:	0000408c 	.word	0x0000408c
    8398:	0000409e 	.word	0x0000409e
    839c:	00004106 	.word	0x00004106
    83a0:	00004134 	.word	0x00004134
    83a4:	00004134 	.word	0x00004134
    83a8:	00004130 	.word	0x00004130
    83ac:	00004100 	.word	0x00004100
    83b0:	0000410c 	.word	0x0000410c
    83b4:	000040fa 	.word	0x000040fa
    83b8:	00004112 	.word	0x00004112
    83bc:	00004118 	.word	0x00004118
    83c0:	01020300 	.word	0x01020300

000083c4 <_usb_device_irq_bits>:
    83c4:	00080004 00800070 01000001 00000200     ....p...........

000083d4 <_usb_endpoint_irq_bits>:
    83d4:	60100c03 00006aec 00006b02 00006c62     ...`.j...k..bl..
    83e4:	00006d2e 00006dfa 53504f54 45524345     .m...m..TOPSECRE
    83f4:	53415054 44525753 00000000              TPASSWRD....

00008400 <_init>:
    8400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8406:	bc08      	pop	{r3}
    8408:	469e      	mov	lr, r3
    840a:	4770      	bx	lr

0000840c <__init_array_start>:
    840c:	000000dd 	.word	0x000000dd

00008410 <_fini>:
    8410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8412:	46c0      	nop			; (mov r8, r8)
    8414:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8416:	bc08      	pop	{r3}
    8418:	469e      	mov	lr, r3
    841a:	4770      	bx	lr

0000841c <__fini_array_start>:
    841c:	000000b5 	.word	0x000000b5
