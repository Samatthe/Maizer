
Dongle Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003648  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  00003648  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003d4  200000dc  00003724  000100dc  2**2
                  ALLOC
  3 .stack        00002000  200004b0  00003af8  000100dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c3a9  00000000  00000000  0001015f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030f5  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000567d  00000000  00000000  0002f5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000728  00000000  00000000  00034c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000688  00000000  00000000  000353a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b41e  00000000  00000000  00035a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cca0  00000000  00000000  00050e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c64f  00000000  00000000  0005dae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011f4  00000000  00000000  000ea138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200024b0 	.word	0x200024b0
       4:	00002fad 	.word	0x00002fad
       8:	00002fa9 	.word	0x00002fa9
       c:	00002fa9 	.word	0x00002fa9
	...
      2c:	00002fa9 	.word	0x00002fa9
	...
      38:	00002fa9 	.word	0x00002fa9
      3c:	00002fa9 	.word	0x00002fa9
      40:	00002fa9 	.word	0x00002fa9
      44:	00002fa9 	.word	0x00002fa9
      48:	00002fa9 	.word	0x00002fa9
      4c:	00002fa9 	.word	0x00002fa9
      50:	00000c9d 	.word	0x00000c9d
      54:	00002fa9 	.word	0x00002fa9
      58:	00002fa9 	.word	0x00002fa9
      5c:	00002801 	.word	0x00002801
      60:	00002fa9 	.word	0x00002fa9
      64:	00002fa9 	.word	0x00002fa9
      68:	00002fa9 	.word	0x00002fa9
      6c:	00002fa9 	.word	0x00002fa9
      70:	00002fa9 	.word	0x00002fa9
      74:	00002fa9 	.word	0x00002fa9
      78:	00002fa9 	.word	0x00002fa9
      7c:	00002fa9 	.word	0x00002fa9
      80:	00002fa9 	.word	0x00002fa9
      84:	00002fa9 	.word	0x00002fa9
      88:	00002fa9 	.word	0x00002fa9
      8c:	00002fa9 	.word	0x00002fa9
      90:	00002fa9 	.word	0x00002fa9
	...
      9c:	00002fa9 	.word	0x00002fa9
      a0:	00002fa9 	.word	0x00002fa9
      a4:	00002fa9 	.word	0x00002fa9
      a8:	00002fa9 	.word	0x00002fa9
      ac:	00002fa9 	.word	0x00002fa9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	00003648 	.word	0x00003648

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00003648 	.word	0x00003648
     108:	200000e0 	.word	0x200000e0
     10c:	00003648 	.word	0x00003648
     110:	00000000 	.word	0x00000000

00000114 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     114:	b508      	push	{r3, lr}
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <ui_wakeup_handler+0x10>)
     118:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	0292      	lsls	r2, r2, #10
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <ui_wakeup_handler+0x14>)
     120:	615a      	str	r2, [r3, #20]
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
	LED_On(LED_0_PIN);
}
     122:	bd08      	pop	{r3, pc}
     124:	00001f11 	.word	0x00001f11
     128:	41004400 	.word	0x41004400

0000012c <ui_init>:


void ui_init(void)
{
     12c:	b510      	push	{r4, lr}
     12e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     130:	ac01      	add	r4, sp, #4
     132:	1c20      	adds	r0, r4, #0
     134:	4b0e      	ldr	r3, [pc, #56]	; (170 <ui_init+0x44>)
     136:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     138:	230f      	movs	r3, #15
     13a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     13c:	2300      	movs	r3, #0
     13e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     140:	3301      	adds	r3, #1
     142:	7223      	strb	r3, [r4, #8]
	config_extint_chan.filter_input_signal = true;
     144:	72a3      	strb	r3, [r4, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     146:	3301      	adds	r3, #1
     148:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     14a:	200f      	movs	r0, #15
     14c:	1c21      	adds	r1, r4, #0
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <ui_init+0x48>)
     150:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     152:	4809      	ldr	r0, [pc, #36]	; (178 <ui_init+0x4c>)
     154:	210f      	movs	r1, #15
     156:	2200      	movs	r2, #0
     158:	4b08      	ldr	r3, [pc, #32]	; (17c <ui_init+0x50>)
     15a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     15c:	200f      	movs	r0, #15
     15e:	2100      	movs	r1, #0
     160:	4b07      	ldr	r3, [pc, #28]	; (180 <ui_init+0x54>)
     162:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     164:	2280      	movs	r2, #128	; 0x80
     166:	0292      	lsls	r2, r2, #10
     168:	4b06      	ldr	r3, [pc, #24]	; (184 <ui_init+0x58>)
     16a:	619a      	str	r2, [r3, #24]

	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
}
     16c:	b004      	add	sp, #16
     16e:	bd10      	pop	{r4, pc}
     170:	00000d89 	.word	0x00000d89
     174:	00000d9d 	.word	0x00000d9d
     178:	00000115 	.word	0x00000115
     17c:	00000c31 	.word	0x00000c31
     180:	00000c5d 	.word	0x00000c5d
     184:	41004400 	.word	0x41004400

00000188 <ui_powerdown>:
     188:	2280      	movs	r2, #128	; 0x80
     18a:	0292      	lsls	r2, r2, #10
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <ui_powerdown+0xc>)
     18e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
     190:	4770      	bx	lr
     192:	46c0      	nop			; (mov r8, r8)
     194:	41004400 	.word	0x41004400

00000198 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{
     198:	b508      	push	{r3, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     19a:	200f      	movs	r0, #15
     19c:	2100      	movs	r1, #0
     19e:	4b01      	ldr	r3, [pc, #4]	; (1a4 <ui_wakeup_enable+0xc>)
     1a0:	4798      	blx	r3
}
     1a2:	bd08      	pop	{r3, pc}
     1a4:	00000c5d 	.word	0x00000c5d

000001a8 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     1a8:	b508      	push	{r3, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     1aa:	200f      	movs	r0, #15
     1ac:	2100      	movs	r1, #0
     1ae:	4b01      	ldr	r3, [pc, #4]	; (1b4 <ui_wakeup_disable+0xc>)
     1b0:	4798      	blx	r3
}
     1b2:	bd08      	pop	{r3, pc}
     1b4:	00000c7d 	.word	0x00000c7d

000001b8 <ui_wakeup>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1b8:	2280      	movs	r2, #128	; 0x80
     1ba:	0292      	lsls	r2, r2, #10
     1bc:	4b01      	ldr	r3, [pc, #4]	; (1c4 <ui_wakeup+0xc>)
     1be:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
     1c0:	4770      	bx	lr
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	41004400 	.word	0x41004400

000001c8 <ui_process>:

void ui_process(uint16_t framenumber)
{
     1c8:	b508      	push	{r3, lr}
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
     1ca:	21fa      	movs	r1, #250	; 0xfa
     1cc:	0089      	lsls	r1, r1, #2
     1ce:	4b20      	ldr	r3, [pc, #128]	; (250 <ui_process+0x88>)
     1d0:	4798      	blx	r3
     1d2:	b289      	uxth	r1, r1
     1d4:	2900      	cmp	r1, #0
     1d6:	d104      	bne.n	1e2 <ui_process+0x1a>
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	0292      	lsls	r2, r2, #10
     1dc:	4b1d      	ldr	r3, [pc, #116]	; (254 <ui_process+0x8c>)
     1de:	615a      	str	r2, [r3, #20]
     1e0:	e007      	b.n	1f2 <ui_process+0x2a>
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
     1e2:	23fa      	movs	r3, #250	; 0xfa
     1e4:	005b      	lsls	r3, r3, #1
     1e6:	4299      	cmp	r1, r3
     1e8:	d103      	bne.n	1f2 <ui_process+0x2a>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1ea:	2280      	movs	r2, #128	; 0x80
     1ec:	0292      	lsls	r2, r2, #10
     1ee:	4b19      	ldr	r3, [pc, #100]	; (254 <ui_process+0x8c>)
     1f0:	619a      	str	r2, [r3, #24]
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
     1f2:	4b19      	ldr	r3, [pc, #100]	; (258 <ui_process+0x90>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	3301      	adds	r3, #1
     1f8:	b2db      	uxtb	r3, r3
	if (cpt_sof < 5) {
     1fa:	2b04      	cmp	r3, #4
     1fc:	d802      	bhi.n	204 <ui_process+0x3c>
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
	/* Scan process running each 5ms */
	cpt_sof++;
     1fe:	4a16      	ldr	r2, [pc, #88]	; (258 <ui_process+0x90>)
     200:	7013      	strb	r3, [r2, #0]
     202:	e024      	b.n	24e <ui_process+0x86>
	if (cpt_sof < 5) {
		return;
	}
	cpt_sof = 0;
     204:	2200      	movs	r2, #0
     206:	4b14      	ldr	r3, [pc, #80]	; (258 <ui_process+0x90>)
     208:	701a      	strb	r2, [r3, #0]

	/* Uses buttons to move mouse */
	//if (!port_pin_get_input_level(BUTTON_0_PIN)) {
	static int16_t x = 0;
	static int16_t y = 0;
	x+= 10;
     20a:	4b14      	ldr	r3, [pc, #80]	; (25c <ui_process+0x94>)
     20c:	881a      	ldrh	r2, [r3, #0]
     20e:	320a      	adds	r2, #10
     210:	b292      	uxth	r2, r2
     212:	801a      	strh	r2, [r3, #0]
	y+= 10;
     214:	4912      	ldr	r1, [pc, #72]	; (260 <ui_process+0x98>)
     216:	880b      	ldrh	r3, [r1, #0]
     218:	330a      	adds	r3, #10
     21a:	b29b      	uxth	r3, r3
     21c:	800b      	strh	r3, [r1, #0]
	if(x >= 0x7FFF)
     21e:	b212      	sxth	r2, r2
     220:	4910      	ldr	r1, [pc, #64]	; (264 <ui_process+0x9c>)
     222:	428a      	cmp	r2, r1
     224:	d102      	bne.n	22c <ui_process+0x64>
	x = 0;
     226:	2100      	movs	r1, #0
     228:	4a0c      	ldr	r2, [pc, #48]	; (25c <ui_process+0x94>)
     22a:	8011      	strh	r1, [r2, #0]
	if(y >= 0x7FFF)
     22c:	b21b      	sxth	r3, r3
     22e:	4a0d      	ldr	r2, [pc, #52]	; (264 <ui_process+0x9c>)
     230:	4293      	cmp	r3, r2
     232:	d102      	bne.n	23a <ui_process+0x72>
	y = 0;
     234:	2200      	movs	r2, #0
     236:	4b0a      	ldr	r3, [pc, #40]	; (260 <ui_process+0x98>)
     238:	801a      	strh	r2, [r3, #0]
		udi_hid_mouse_moveX(x);
     23a:	4b08      	ldr	r3, [pc, #32]	; (25c <ui_process+0x94>)
     23c:	2000      	movs	r0, #0
     23e:	5e18      	ldrsh	r0, [r3, r0]
     240:	4b09      	ldr	r3, [pc, #36]	; (268 <ui_process+0xa0>)
     242:	4798      	blx	r3
		udi_hid_mouse_moveY(y);
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <ui_process+0x98>)
     246:	2000      	movs	r0, #0
     248:	5e18      	ldrsh	r0, [r3, r0]
     24a:	4b08      	ldr	r3, [pc, #32]	; (26c <ui_process+0xa4>)
     24c:	4798      	blx	r3
	//}
}
     24e:	bd08      	pop	{r3, pc}
     250:	00003331 	.word	0x00003331
     254:	41004400 	.word	0x41004400
     258:	200000fa 	.word	0x200000fa
     25c:	200000f8 	.word	0x200000f8
     260:	200000fc 	.word	0x200000fc
     264:	00007fff 	.word	0x00007fff
     268:	000003e9 	.word	0x000003e9
     26c:	000003c9 	.word	0x000003c9

00000270 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
	return 0;
}
     270:	2000      	movs	r0, #0
     272:	4770      	bx	lr

00000274 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
	return false;
}
     274:	2000      	movs	r0, #0
     276:	4770      	bx	lr

00000278 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
     278:	b508      	push	{r3, lr}
	// Initialize internal value
	udi_hid_mouse_rate = 0;
     27a:	2300      	movs	r3, #0
     27c:	4a07      	ldr	r2, [pc, #28]	; (29c <udi_hid_mouse_enable+0x24>)
     27e:	7013      	strb	r3, [r2, #0]
	udi_hid_mouse_protocol = 0;
     280:	4a07      	ldr	r2, [pc, #28]	; (2a0 <udi_hid_mouse_enable+0x28>)
     282:	7013      	strb	r3, [r2, #0]
	udi_hid_mouse_report_trans_ongoing = false;
     284:	4a07      	ldr	r2, [pc, #28]	; (2a4 <udi_hid_mouse_enable+0x2c>)
     286:	7013      	strb	r3, [r2, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
     288:	4a07      	ldr	r2, [pc, #28]	; (2a8 <udi_hid_mouse_enable+0x30>)
     28a:	6013      	str	r3, [r2, #0]
     28c:	8093      	strh	r3, [r2, #4]
     28e:	7193      	strb	r3, [r2, #6]
	udi_hid_mouse_b_report_valid = false;
     290:	4b06      	ldr	r3, [pc, #24]	; (2ac <udi_hid_mouse_enable+0x34>)
     292:	2200      	movs	r2, #0
     294:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
     296:	4b06      	ldr	r3, [pc, #24]	; (2b0 <udi_hid_mouse_enable+0x38>)
     298:	4798      	blx	r3
}
     29a:	bd08      	pop	{r3, pc}
     29c:	20000114 	.word	0x20000114
     2a0:	20000108 	.word	0x20000108
     2a4:	20000107 	.word	0x20000107
     2a8:	20000100 	.word	0x20000100
     2ac:	20000115 	.word	0x20000115
     2b0:	00003209 	.word	0x00003209

000002b4 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
     2b4:	b508      	push	{r3, lr}
	UDI_HID_MOUSE_DISABLE_EXT();
     2b6:	4b01      	ldr	r3, [pc, #4]	; (2bc <udi_hid_mouse_disable+0x8>)
     2b8:	4798      	blx	r3
}
     2ba:	bd08      	pop	{r3, pc}
     2bc:	00003219 	.word	0x00003219

000002c0 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
     2c0:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_mouse_rate,
     2c2:	4803      	ldr	r0, [pc, #12]	; (2d0 <udi_hid_mouse_setup+0x10>)
     2c4:	4903      	ldr	r1, [pc, #12]	; (2d4 <udi_hid_mouse_setup+0x14>)
     2c6:	4a04      	ldr	r2, [pc, #16]	; (2d8 <udi_hid_mouse_setup+0x18>)
     2c8:	4b04      	ldr	r3, [pc, #16]	; (2dc <udi_hid_mouse_setup+0x1c>)
     2ca:	4c05      	ldr	r4, [pc, #20]	; (2e0 <udi_hid_mouse_setup+0x20>)
     2cc:	47a0      	blx	r4
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
     2ce:	bd10      	pop	{r4, pc}
     2d0:	20000114 	.word	0x20000114
     2d4:	20000108 	.word	0x20000108
     2d8:	20000000 	.word	0x20000000
     2dc:	00000275 	.word	0x00000275
     2e0:	00000409 	.word	0x00000409

000002e4 <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 1);
}


static bool udi_hid_mouse_send_report(void)
{
     2e4:	b510      	push	{r4, lr}
     2e6:	b082      	sub	sp, #8
	if (udi_hid_mouse_report_trans_ongoing)
     2e8:	4b0e      	ldr	r3, [pc, #56]	; (324 <udi_hid_mouse_send_report+0x40>)
     2ea:	781b      	ldrb	r3, [r3, #0]
		return false;	// Transfer on going then send this one after transfer complete
     2ec:	2000      	movs	r0, #0
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
     2ee:	2b00      	cmp	r3, #0
     2f0:	d116      	bne.n	320 <udi_hid_mouse_send_report+0x3c>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
     2f2:	4a0d      	ldr	r2, [pc, #52]	; (328 <udi_hid_mouse_send_report+0x44>)
     2f4:	4b0d      	ldr	r3, [pc, #52]	; (32c <udi_hid_mouse_send_report+0x48>)
     2f6:	6819      	ldr	r1, [r3, #0]
     2f8:	6011      	str	r1, [r2, #0]
     2fa:	8899      	ldrh	r1, [r3, #4]
     2fc:	8091      	strh	r1, [r2, #4]
     2fe:	7999      	ldrb	r1, [r3, #6]
     300:	7191      	strb	r1, [r2, #6]
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
     302:	2100      	movs	r1, #0
     304:	7059      	strb	r1, [r3, #1]
     306:	7099      	strb	r1, [r3, #2]
     308:	70d9      	strb	r1, [r3, #3]
	udi_hid_mouse_b_report_valid = false;
     30a:	4b09      	ldr	r3, [pc, #36]	; (330 <udi_hid_mouse_send_report+0x4c>)
     30c:	7019      	strb	r1, [r3, #0]

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
     30e:	4b09      	ldr	r3, [pc, #36]	; (334 <udi_hid_mouse_send_report+0x50>)
     310:	9300      	str	r3, [sp, #0]
     312:	2081      	movs	r0, #129	; 0x81
     314:	2307      	movs	r3, #7
     316:	4c08      	ldr	r4, [pc, #32]	; (338 <udi_hid_mouse_send_report+0x54>)
     318:	47a0      	blx	r4
     31a:	1c03      	adds	r3, r0, #0
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
     31c:	4a01      	ldr	r2, [pc, #4]	; (324 <udi_hid_mouse_send_report+0x40>)
     31e:	7013      	strb	r3, [r2, #0]
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
}
     320:	b002      	add	sp, #8
     322:	bd10      	pop	{r4, pc}
     324:	20000107 	.word	0x20000107
     328:	2000010c 	.word	0x2000010c
     32c:	20000100 	.word	0x20000100
     330:	20000115 	.word	0x20000115
     334:	000003a5 	.word	0x000003a5
     338:	00001d19 	.word	0x00001d19

0000033c <udi_hid_mouse_move>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_mouse_move(int8_t pos, uint8_t index_report)
{
     33c:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     33e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     342:	425c      	negs	r4, r3
     344:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     346:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     348:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     34c:	2200      	movs	r2, #0
     34e:	4b11      	ldr	r3, [pc, #68]	; (394 <udi_hid_mouse_move+0x58>)
     350:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos = pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
     352:	1c03      	adds	r3, r0, #0
     354:	337f      	adds	r3, #127	; 0x7f
     356:	b29b      	uxth	r3, r3
     358:	2bfe      	cmp	r3, #254	; 0xfe
     35a:	d909      	bls.n	370 <udi_hid_mouse_move+0x34>
		cpu_irq_restore(flags);
		return false;	// Overflow of report
     35c:	2000      	movs	r0, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     35e:	2c00      	cmp	r4, #0
     360:	d016      	beq.n	390 <udi_hid_mouse_move+0x54>
		cpu_irq_enable();
     362:	3201      	adds	r2, #1
     364:	4b0b      	ldr	r3, [pc, #44]	; (394 <udi_hid_mouse_move+0x58>)
     366:	701a      	strb	r2, [r3, #0]
     368:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     36c:	b662      	cpsie	i
     36e:	e00f      	b.n	390 <udi_hid_mouse_move+0x54>
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <udi_hid_mouse_move+0x5c>)
     372:	5458      	strb	r0, [r3, r1]

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
     374:	2201      	movs	r2, #1
     376:	4b09      	ldr	r3, [pc, #36]	; (39c <udi_hid_mouse_move+0x60>)
     378:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_send_report();
     37a:	4b09      	ldr	r3, [pc, #36]	; (3a0 <udi_hid_mouse_move+0x64>)
     37c:	4798      	blx	r3

	cpu_irq_restore(flags);
	return true;
     37e:	2001      	movs	r0, #1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     380:	2c00      	cmp	r4, #0
     382:	d005      	beq.n	390 <udi_hid_mouse_move+0x54>
		cpu_irq_enable();
     384:	2201      	movs	r2, #1
     386:	4b03      	ldr	r3, [pc, #12]	; (394 <udi_hid_mouse_move+0x58>)
     388:	701a      	strb	r2, [r3, #0]
     38a:	f3bf 8f5f 	dmb	sy
     38e:	b662      	cpsie	i
}
     390:	bd10      	pop	{r4, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	200000d8 	.word	0x200000d8
     398:	20000100 	.word	0x20000100
     39c:	20000115 	.word	0x20000115
     3a0:	000002e5 	.word	0x000002e5

000003a4 <udi_hid_mouse_report_sent>:
}


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     3a4:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
     3a6:	2200      	movs	r2, #0
     3a8:	4b04      	ldr	r3, [pc, #16]	; (3bc <udi_hid_mouse_report_sent+0x18>)
     3aa:	701a      	strb	r2, [r3, #0]
	if (udi_hid_mouse_b_report_valid) {
     3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <udi_hid_mouse_report_sent+0x1c>)
     3ae:	781b      	ldrb	r3, [r3, #0]
     3b0:	2b00      	cmp	r3, #0
     3b2:	d001      	beq.n	3b8 <udi_hid_mouse_report_sent+0x14>
		// Send new valid report
		udi_hid_mouse_send_report();
     3b4:	4b03      	ldr	r3, [pc, #12]	; (3c4 <udi_hid_mouse_report_sent+0x20>)
     3b6:	4798      	blx	r3
	}
}
     3b8:	bd08      	pop	{r3, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	20000107 	.word	0x20000107
     3c0:	20000115 	.word	0x20000115
     3c4:	000002e5 	.word	0x000002e5

000003c8 <udi_hid_mouse_moveY>:
	return (udi_hid_mouse_move(pos & 0x00FF, 5) &
			udi_hid_mouse_move((pos & 0x7F00) >> 8, 6));
}

bool udi_hid_mouse_moveY(int16_t pos_y)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	1c04      	adds	r4, r0, #0
	return (udi_hid_mouse_move(pos_y & 0x00FF, 3) &
     3cc:	b240      	sxtb	r0, r0
     3ce:	2103      	movs	r1, #3
     3d0:	4d04      	ldr	r5, [pc, #16]	; (3e4 <udi_hid_mouse_moveY+0x1c>)
     3d2:	47a8      	blx	r5
     3d4:	1c06      	adds	r6, r0, #0
			udi_hid_mouse_move((pos_y & 0x7F00) >> 8, 4));
     3d6:	0464      	lsls	r4, r4, #17
     3d8:	0e60      	lsrs	r0, r4, #25
     3da:	2104      	movs	r1, #4
     3dc:	47a8      	blx	r5
			udi_hid_mouse_move((pos & 0x7F00) >> 8, 6));
}

bool udi_hid_mouse_moveY(int16_t pos_y)
{
	return (udi_hid_mouse_move(pos_y & 0x00FF, 3) &
     3de:	4030      	ands	r0, r6
     3e0:	b2c0      	uxtb	r0, r0
			udi_hid_mouse_move((pos_y & 0x7F00) >> 8, 4));
}
     3e2:	bd70      	pop	{r4, r5, r6, pc}
     3e4:	0000033d 	.word	0x0000033d

000003e8 <udi_hid_mouse_moveX>:

bool udi_hid_mouse_moveX(int16_t pos_x)
{
     3e8:	b570      	push	{r4, r5, r6, lr}
     3ea:	1c04      	adds	r4, r0, #0
	return (udi_hid_mouse_move(pos_x & 0x00FF, 1) &
     3ec:	b240      	sxtb	r0, r0
     3ee:	2101      	movs	r1, #1
     3f0:	4d04      	ldr	r5, [pc, #16]	; (404 <udi_hid_mouse_moveX+0x1c>)
     3f2:	47a8      	blx	r5
     3f4:	1c06      	adds	r6, r0, #0
			udi_hid_mouse_move((pos_x & 0x7F00) >> 8, 2));
     3f6:	0464      	lsls	r4, r4, #17
     3f8:	0e60      	lsrs	r0, r4, #25
     3fa:	2102      	movs	r1, #2
     3fc:	47a8      	blx	r5
			udi_hid_mouse_move((pos_y & 0x7F00) >> 8, 4));
}

bool udi_hid_mouse_moveX(int16_t pos_x)
{
	return (udi_hid_mouse_move(pos_x & 0x00FF, 1) &
     3fe:	4030      	ands	r0, r6
     400:	b2c0      	uxtb	r0, r0
			udi_hid_mouse_move((pos_x & 0x7F00) >> 8, 2));
}
     402:	bd70      	pop	{r4, r5, r6, pc}
     404:	0000033d 	.word	0x0000033d

00000408 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     408:	b538      	push	{r3, r4, r5, lr}
     40a:	1c04      	adds	r4, r0, #0
     40c:	1c15      	adds	r5, r2, #0
	if (Udd_setup_is_in()) {
     40e:	4a3a      	ldr	r2, [pc, #232]	; (4f8 <udi_hid_setup+0xf0>)
     410:	7812      	ldrb	r2, [r2, #0]
     412:	b250      	sxtb	r0, r2
     414:	2800      	cmp	r0, #0
     416:	da4d      	bge.n	4b4 <udi_hid_setup+0xac>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     418:	2060      	movs	r0, #96	; 0x60
     41a:	4002      	ands	r2, r0
     41c:	d130      	bne.n	480 <udi_hid_setup+0x78>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     41e:	4836      	ldr	r0, [pc, #216]	; (4f8 <udi_hid_setup+0xf0>)
     420:	7840      	ldrb	r0, [r0, #1]
     422:	2806      	cmp	r0, #6
     424:	d12c      	bne.n	480 <udi_hid_setup+0x78>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     426:	4b35      	ldr	r3, [pc, #212]	; (4fc <udi_hid_setup+0xf4>)
     428:	4798      	blx	r3
     42a:	1c03      	adds	r3, r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     42c:	7a82      	ldrb	r2, [r0, #10]
		return false;
     42e:	2000      	movs	r0, #0

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     430:	2a21      	cmp	r2, #33	; 0x21
     432:	d15f      	bne.n	4f4 <udi_hid_setup+0xec>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     434:	4a30      	ldr	r2, [pc, #192]	; (4f8 <udi_hid_setup+0xf0>)
     436:	8852      	ldrh	r2, [r2, #2]
     438:	0a12      	lsrs	r2, r2, #8
     43a:	2a21      	cmp	r2, #33	; 0x21
     43c:	d10d      	bne.n	45a <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     43e:	4a2e      	ldr	r2, [pc, #184]	; (4f8 <udi_hid_setup+0xf0>)
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     440:	1c19      	adds	r1, r3, #0
     442:	3109      	adds	r1, #9
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     444:	6091      	str	r1, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     446:	7a5b      	ldrb	r3, [r3, #9]
     448:	88d0      	ldrh	r0, [r2, #6]
     44a:	1c19      	adds	r1, r3, #0
     44c:	b29b      	uxth	r3, r3
     44e:	4283      	cmp	r3, r0
     450:	d900      	bls.n	454 <udi_hid_setup+0x4c>
     452:	1c01      	adds	r1, r0, #0
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
     454:	8191      	strh	r1, [r2, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     456:	2001      	movs	r0, #1
     458:	e04c      	b.n	4f4 <udi_hid_setup+0xec>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     45a:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     45c:	2000      	movs	r0, #0
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     45e:	4291      	cmp	r1, r2
     460:	d148      	bne.n	4f4 <udi_hid_setup+0xec>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     462:	4825      	ldr	r0, [pc, #148]	; (4f8 <udi_hid_setup+0xf0>)
     464:	6085      	str	r5, [r0, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     466:	7c19      	ldrb	r1, [r3, #16]
     468:	7c5a      	ldrb	r2, [r3, #17]
     46a:	0212      	lsls	r2, r2, #8
     46c:	430a      	orrs	r2, r1
     46e:	88c3      	ldrh	r3, [r0, #6]
     470:	1c19      	adds	r1, r3, #0
     472:	b29b      	uxth	r3, r3
     474:	4293      	cmp	r3, r2
     476:	d900      	bls.n	47a <udi_hid_setup+0x72>
     478:	1c11      	adds	r1, r2, #0
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
     47a:	8181      	strh	r1, [r0, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     47c:	2001      	movs	r0, #1
     47e:	e039      	b.n	4f4 <udi_hid_setup+0xec>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     480:	2000      	movs	r0, #0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     482:	2a20      	cmp	r2, #32
     484:	d136      	bne.n	4f4 <udi_hid_setup+0xec>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     486:	4a1c      	ldr	r2, [pc, #112]	; (4f8 <udi_hid_setup+0xf0>)
     488:	7852      	ldrb	r2, [r2, #1]
     48a:	2a02      	cmp	r2, #2
     48c:	d006      	beq.n	49c <udi_hid_setup+0x94>
     48e:	2a03      	cmp	r2, #3
     490:	d00a      	beq.n	4a8 <udi_hid_setup+0xa0>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     492:	2000      	movs	r0, #0
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     494:	2a01      	cmp	r2, #1
     496:	d12d      	bne.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     498:	4798      	blx	r3
     49a:	e02b      	b.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     49c:	4b16      	ldr	r3, [pc, #88]	; (4f8 <udi_hid_setup+0xf0>)
     49e:	609c      	str	r4, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     4a0:	2201      	movs	r2, #1
     4a2:	819a      	strh	r2, [r3, #12]
				return true;
     4a4:	2001      	movs	r0, #1
     4a6:	e025      	b.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     4a8:	4b13      	ldr	r3, [pc, #76]	; (4f8 <udi_hid_setup+0xf0>)
     4aa:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     4ac:	2201      	movs	r2, #1
     4ae:	819a      	strh	r2, [r3, #12]
				return true;
     4b0:	2001      	movs	r0, #1
     4b2:	e01f      	b.n	4f4 <udi_hid_setup+0xec>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4b4:	2060      	movs	r0, #96	; 0x60
     4b6:	4002      	ands	r2, r0
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     4b8:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4ba:	2a20      	cmp	r2, #32
     4bc:	d11a      	bne.n	4f4 <udi_hid_setup+0xec>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     4be:	4a0e      	ldr	r2, [pc, #56]	; (4f8 <udi_hid_setup+0xf0>)
     4c0:	7852      	ldrb	r2, [r2, #1]
     4c2:	2a0a      	cmp	r2, #10
     4c4:	d006      	beq.n	4d4 <udi_hid_setup+0xcc>
     4c6:	2a0b      	cmp	r2, #11
     4c8:	d00a      	beq.n	4e0 <udi_hid_setup+0xd8>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     4ca:	2000      	movs	r0, #0
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     4cc:	2a09      	cmp	r2, #9
     4ce:	d111      	bne.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     4d0:	4798      	blx	r3
     4d2:	e00f      	b.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     4d4:	4b08      	ldr	r3, [pc, #32]	; (4f8 <udi_hid_setup+0xf0>)
     4d6:	885b      	ldrh	r3, [r3, #2]
     4d8:	0a1b      	lsrs	r3, r3, #8
     4da:	7023      	strb	r3, [r4, #0]
				return true;
     4dc:	2001      	movs	r0, #1
     4de:	e009      	b.n	4f4 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     4e0:	4b05      	ldr	r3, [pc, #20]	; (4f8 <udi_hid_setup+0xf0>)
     4e2:	88db      	ldrh	r3, [r3, #6]
					return false;
     4e4:	2000      	movs	r0, #0
			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     4e6:	2b00      	cmp	r3, #0
     4e8:	d104      	bne.n	4f4 <udi_hid_setup+0xec>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <udi_hid_setup+0xf0>)
     4ec:	885b      	ldrh	r3, [r3, #2]
     4ee:	700b      	strb	r3, [r1, #0]
				return true;
     4f0:	3001      	adds	r0, #1
     4f2:	e7ff      	b.n	4f4 <udi_hid_setup+0xec>
			}
		}
	}
	return false;	// Request not supported
}
     4f4:	bd38      	pop	{r3, r4, r5, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	20000390 	.word	0x20000390
     4fc:	0000068d 	.word	0x0000068d

00000500 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     500:	b510      	push	{r4, lr}
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     502:	4b11      	ldr	r3, [pc, #68]	; (548 <udc_next_desc_in_iface+0x48>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	681c      	ldr	r4, [r3, #0]
     508:	78a3      	ldrb	r3, [r4, #2]
     50a:	78e2      	ldrb	r2, [r4, #3]
     50c:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     50e:	431a      	orrs	r2, r3
     510:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     512:	7803      	ldrb	r3, [r0, #0]
     514:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     516:	4290      	cmp	r0, r2
     518:	d210      	bcs.n	53c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     51a:	7843      	ldrb	r3, [r0, #1]
     51c:	2b04      	cmp	r3, #4
     51e:	d00f      	beq.n	540 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     520:	428b      	cmp	r3, r1
     522:	d105      	bne.n	530 <udc_next_desc_in_iface+0x30>
     524:	e00f      	b.n	546 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     526:	7843      	ldrb	r3, [r0, #1]
     528:	2b04      	cmp	r3, #4
     52a:	d00b      	beq.n	544 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     52c:	428b      	cmp	r3, r1
     52e:	d00a      	beq.n	546 <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     530:	7803      	ldrb	r3, [r0, #0]
     532:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     534:	4290      	cmp	r0, r2
     536:	d3f6      	bcc.n	526 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     538:	2000      	movs	r0, #0
     53a:	e004      	b.n	546 <udc_next_desc_in_iface+0x46>
     53c:	2000      	movs	r0, #0
     53e:	e002      	b.n	546 <udc_next_desc_in_iface+0x46>
     540:	2000      	movs	r0, #0
     542:	e000      	b.n	546 <udc_next_desc_in_iface+0x46>
     544:	2000      	movs	r0, #0
}
     546:	bd10      	pop	{r4, pc}
     548:	20000118 	.word	0x20000118

0000054c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     54c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     54e:	4b03      	ldr	r3, [pc, #12]	; (55c <udc_valid_address+0x10>)
     550:	885b      	ldrh	r3, [r3, #2]
     552:	207f      	movs	r0, #127	; 0x7f
     554:	4018      	ands	r0, r3
     556:	4b02      	ldr	r3, [pc, #8]	; (560 <udc_valid_address+0x14>)
     558:	4798      	blx	r3
}
     55a:	bd08      	pop	{r3, pc}
     55c:	20000390 	.word	0x20000390
     560:	00001ef1 	.word	0x00001ef1

00000564 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     564:	b510      	push	{r4, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     566:	4b16      	ldr	r3, [pc, #88]	; (5c0 <udc_update_iface_desc+0x5c>)
     568:	781b      	ldrb	r3, [r3, #0]
		return false;
     56a:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     56c:	2b00      	cmp	r3, #0
     56e:	d024      	beq.n	5ba <udc_update_iface_desc+0x56>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     570:	4b14      	ldr	r3, [pc, #80]	; (5c4 <udc_update_iface_desc+0x60>)
     572:	681b      	ldr	r3, [r3, #0]
     574:	681b      	ldr	r3, [r3, #0]
     576:	791c      	ldrb	r4, [r3, #4]
     578:	4284      	cmp	r4, r0
     57a:	d91e      	bls.n	5ba <udc_update_iface_desc+0x56>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     57c:	4a12      	ldr	r2, [pc, #72]	; (5c8 <udc_update_iface_desc+0x64>)
     57e:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     580:	789a      	ldrb	r2, [r3, #2]
     582:	78dc      	ldrb	r4, [r3, #3]
     584:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     586:	4314      	orrs	r4, r2
     588:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     58a:	42a3      	cmp	r3, r4
     58c:	d214      	bcs.n	5b8 <udc_update_iface_desc+0x54>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     58e:	785a      	ldrb	r2, [r3, #1]
     590:	2a04      	cmp	r2, #4
     592:	d109      	bne.n	5a8 <udc_update_iface_desc+0x44>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     594:	789a      	ldrb	r2, [r3, #2]
     596:	4282      	cmp	r2, r0
     598:	d106      	bne.n	5a8 <udc_update_iface_desc+0x44>
     59a:	78da      	ldrb	r2, [r3, #3]
     59c:	428a      	cmp	r2, r1
     59e:	d103      	bne.n	5a8 <udc_update_iface_desc+0x44>
     5a0:	4a09      	ldr	r2, [pc, #36]	; (5c8 <udc_update_iface_desc+0x64>)
     5a2:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     5a4:	2201      	movs	r2, #1
     5a6:	e008      	b.n	5ba <udc_update_iface_desc+0x56>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     5a8:	781a      	ldrb	r2, [r3, #0]
     5aa:	189b      	adds	r3, r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     5ac:	42a3      	cmp	r3, r4
     5ae:	d3ee      	bcc.n	58e <udc_update_iface_desc+0x2a>
     5b0:	4a05      	ldr	r2, [pc, #20]	; (5c8 <udc_update_iface_desc+0x64>)
     5b2:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     5b4:	2200      	movs	r2, #0
     5b6:	e000      	b.n	5ba <udc_update_iface_desc+0x56>
     5b8:	2200      	movs	r2, #0
}
     5ba:	1c10      	adds	r0, r2, #0
     5bc:	bd10      	pop	{r4, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000124 	.word	0x20000124
     5c4:	20000118 	.word	0x20000118
     5c8:	20000128 	.word	0x20000128

000005cc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	4647      	mov	r7, r8
     5d0:	b480      	push	{r7}
     5d2:	1c04      	adds	r4, r0, #0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     5d4:	2100      	movs	r1, #0
     5d6:	4b12      	ldr	r3, [pc, #72]	; (620 <udc_iface_disable+0x54>)
     5d8:	4798      	blx	r3
     5da:	1e05      	subs	r5, r0, #0
     5dc:	d01c      	beq.n	618 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     5de:	4b11      	ldr	r3, [pc, #68]	; (624 <udc_iface_disable+0x58>)
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	685b      	ldr	r3, [r3, #4]
     5e4:	00a2      	lsls	r2, r4, #2
     5e6:	58d3      	ldr	r3, [r2, r3]
     5e8:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     5ea:	68db      	ldr	r3, [r3, #12]
     5ec:	4798      	blx	r3
     5ee:	1c01      	adds	r1, r0, #0
     5f0:	1c20      	adds	r0, r4, #0
     5f2:	4b0b      	ldr	r3, [pc, #44]	; (620 <udc_iface_disable+0x54>)
     5f4:	4798      	blx	r3
     5f6:	1e05      	subs	r5, r0, #0
     5f8:	d00e      	beq.n	618 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     5fa:	4b0b      	ldr	r3, [pc, #44]	; (628 <udc_iface_disable+0x5c>)
     5fc:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     5fe:	4e0b      	ldr	r6, [pc, #44]	; (62c <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     600:	4f0b      	ldr	r7, [pc, #44]	; (630 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     602:	1c20      	adds	r0, r4, #0
     604:	2105      	movs	r1, #5
     606:	47b0      	blx	r6
     608:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     60a:	d002      	beq.n	612 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     60c:	7880      	ldrb	r0, [r0, #2]
     60e:	47b8      	blx	r7
		}
     610:	e7f7      	b.n	602 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
     612:	4643      	mov	r3, r8
     614:	685b      	ldr	r3, [r3, #4]
     616:	4798      	blx	r3
	return true;
}
     618:	1c28      	adds	r0, r5, #0
     61a:	bc04      	pop	{r2}
     61c:	4690      	mov	r8, r2
     61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     620:	00000565 	.word	0x00000565
     624:	20000118 	.word	0x20000118
     628:	20000128 	.word	0x20000128
     62c:	00000501 	.word	0x00000501
     630:	00001a35 	.word	0x00001a35

00000634 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     636:	1c05      	adds	r5, r0, #0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     638:	4b0f      	ldr	r3, [pc, #60]	; (678 <udc_iface_enable+0x44>)
     63a:	4798      	blx	r3
     63c:	2800      	cmp	r0, #0
     63e:	d019      	beq.n	674 <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     640:	4b0e      	ldr	r3, [pc, #56]	; (67c <udc_iface_enable+0x48>)
     642:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     644:	4e0e      	ldr	r6, [pc, #56]	; (680 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     646:	4f0f      	ldr	r7, [pc, #60]	; (684 <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     648:	1c20      	adds	r0, r4, #0
     64a:	2105      	movs	r1, #5
     64c:	47b0      	blx	r6
     64e:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     650:	d009      	beq.n	666 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     652:	7880      	ldrb	r0, [r0, #2]
     654:	78e1      	ldrb	r1, [r4, #3]
     656:	7923      	ldrb	r3, [r4, #4]
     658:	7962      	ldrb	r2, [r4, #5]
     65a:	0212      	lsls	r2, r2, #8
     65c:	431a      	orrs	r2, r3
     65e:	47b8      	blx	r7
     660:	2800      	cmp	r0, #0
     662:	d1f1      	bne.n	648 <udc_iface_enable+0x14>
     664:	e006      	b.n	674 <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     666:	4b08      	ldr	r3, [pc, #32]	; (688 <udc_iface_enable+0x54>)
     668:	681b      	ldr	r3, [r3, #0]
     66a:	685b      	ldr	r3, [r3, #4]
     66c:	00ad      	lsls	r5, r5, #2
     66e:	58eb      	ldr	r3, [r5, r3]
     670:	681b      	ldr	r3, [r3, #0]
     672:	4798      	blx	r3
}
     674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00000565 	.word	0x00000565
     67c:	20000128 	.word	0x20000128
     680:	00000501 	.word	0x00000501
     684:	00001a8d 	.word	0x00001a8d
     688:	20000118 	.word	0x20000118

0000068c <udc_get_interface_desc>:
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
     68c:	4b01      	ldr	r3, [pc, #4]	; (694 <udc_get_interface_desc+0x8>)
     68e:	6818      	ldr	r0, [r3, #0]
}
     690:	4770      	bx	lr
     692:	46c0      	nop			; (mov r8, r8)
     694:	20000128 	.word	0x20000128

00000698 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     698:	b508      	push	{r3, lr}
	udd_enable();
     69a:	4b01      	ldr	r3, [pc, #4]	; (6a0 <udc_start+0x8>)
     69c:	4798      	blx	r3
}
     69e:	bd08      	pop	{r3, pc}
     6a0:	00002055 	.word	0x00002055

000006a4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     6a6:	4b11      	ldr	r3, [pc, #68]	; (6ec <udc_reset+0x48>)
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d011      	beq.n	6d2 <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     6ae:	4b10      	ldr	r3, [pc, #64]	; (6f0 <udc_reset+0x4c>)
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     6b4:	791b      	ldrb	r3, [r3, #4]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d00b      	beq.n	6d2 <udc_reset+0x2e>
     6ba:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     6bc:	4e0d      	ldr	r6, [pc, #52]	; (6f4 <udc_reset+0x50>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     6be:	4d0c      	ldr	r5, [pc, #48]	; (6f0 <udc_reset+0x4c>)
				iface_num++) {
			udc_iface_disable(iface_num);
     6c0:	1c20      	adds	r0, r4, #0
     6c2:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     6c4:	3401      	adds	r4, #1
     6c6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     6c8:	682b      	ldr	r3, [r5, #0]
     6ca:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     6cc:	791b      	ldrb	r3, [r3, #4]
     6ce:	42a3      	cmp	r3, r4
     6d0:	d8f6      	bhi.n	6c0 <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     6d2:	2200      	movs	r2, #0
     6d4:	4b05      	ldr	r3, [pc, #20]	; (6ec <udc_reset+0x48>)
     6d6:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     6d8:	4b07      	ldr	r3, [pc, #28]	; (6f8 <udc_reset+0x54>)
     6da:	881b      	ldrh	r3, [r3, #0]
     6dc:	079b      	lsls	r3, r3, #30
     6de:	d501      	bpl.n	6e4 <udc_reset+0x40>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <udc_reset+0x58>)
     6e2:	4798      	blx	r3
	}
#endif
	udc_device_status =
     6e4:	2200      	movs	r2, #0
     6e6:	4b04      	ldr	r3, [pc, #16]	; (6f8 <udc_reset+0x54>)
     6e8:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     6ea:	bd70      	pop	{r4, r5, r6, pc}
     6ec:	20000124 	.word	0x20000124
     6f0:	20000118 	.word	0x20000118
     6f4:	000005cd 	.word	0x000005cd
     6f8:	20000120 	.word	0x20000120
     6fc:	000031d9 	.word	0x000031d9

00000700 <udc_sof_notify>:

void udc_sof_notify(void)
{
     700:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     702:	4b0d      	ldr	r3, [pc, #52]	; (738 <udc_sof_notify+0x38>)
     704:	781b      	ldrb	r3, [r3, #0]
     706:	2b00      	cmp	r3, #0
     708:	d015      	beq.n	736 <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     70a:	4b0c      	ldr	r3, [pc, #48]	; (73c <udc_sof_notify+0x3c>)
     70c:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     70e:	681a      	ldr	r2, [r3, #0]
     710:	7912      	ldrb	r2, [r2, #4]
     712:	2a00      	cmp	r2, #0
     714:	d00f      	beq.n	736 <udc_sof_notify+0x36>
     716:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     718:	4d08      	ldr	r5, [pc, #32]	; (73c <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     71a:	685b      	ldr	r3, [r3, #4]
     71c:	00a2      	lsls	r2, r4, #2
     71e:	58d3      	ldr	r3, [r2, r3]
     720:	691b      	ldr	r3, [r3, #16]
     722:	2b00      	cmp	r3, #0
     724:	d000      	beq.n	728 <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     726:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     728:	3401      	adds	r4, #1
     72a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     72c:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     72e:	681a      	ldr	r2, [r3, #0]
     730:	7912      	ldrb	r2, [r2, #4]
     732:	42a2      	cmp	r2, r4
     734:	d8f1      	bhi.n	71a <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     736:	bd38      	pop	{r3, r4, r5, pc}
     738:	20000124 	.word	0x20000124
     73c:	20000118 	.word	0x20000118

00000740 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     742:	4bbb      	ldr	r3, [pc, #748]	; (a30 <udc_process_setup+0x2f0>)
     744:	2200      	movs	r2, #0
     746:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     748:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     74a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     74c:	781b      	ldrb	r3, [r3, #0]
     74e:	b25a      	sxtb	r2, r3
     750:	2a00      	cmp	r2, #0
     752:	db00      	blt.n	756 <udc_process_setup+0x16>
     754:	e202      	b.n	b5c <udc_process_setup+0x41c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     756:	4ab6      	ldr	r2, [pc, #728]	; (a30 <udc_process_setup+0x2f0>)
     758:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     75a:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
     75c:	2a00      	cmp	r2, #0
     75e:	d000      	beq.n	762 <udc_process_setup+0x22>
     760:	e200      	b.n	b64 <udc_process_setup+0x424>
     762:	e204      	b.n	b6e <udc_process_setup+0x42e>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     764:	211f      	movs	r1, #31
     766:	400b      	ands	r3, r1
     768:	d176      	bne.n	858 <udc_process_setup+0x118>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     76a:	49b1      	ldr	r1, [pc, #708]	; (a30 <udc_process_setup+0x2f0>)
     76c:	7849      	ldrb	r1, [r1, #1]
     76e:	2906      	cmp	r1, #6
     770:	d00b      	beq.n	78a <udc_process_setup+0x4a>
     772:	2908      	cmp	r1, #8
     774:	d068      	beq.n	848 <udc_process_setup+0x108>
     776:	2900      	cmp	r1, #0
     778:	d16e      	bne.n	858 <udc_process_setup+0x118>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     77a:	2a02      	cmp	r2, #2
     77c:	d000      	beq.n	780 <udc_process_setup+0x40>
     77e:	e19a      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     780:	48ac      	ldr	r0, [pc, #688]	; (a34 <udc_process_setup+0x2f4>)
     782:	3102      	adds	r1, #2
     784:	4bac      	ldr	r3, [pc, #688]	; (a38 <udc_process_setup+0x2f8>)
     786:	4798      	blx	r3
     788:	e1f0      	b.n	b6c <udc_process_setup+0x42c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     78a:	4ba9      	ldr	r3, [pc, #676]	; (a30 <udc_process_setup+0x2f0>)
     78c:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     78e:	0a1a      	lsrs	r2, r3, #8
     790:	2a02      	cmp	r2, #2
     792:	d010      	beq.n	7b6 <udc_process_setup+0x76>
     794:	b2d1      	uxtb	r1, r2
     796:	2902      	cmp	r1, #2
     798:	d802      	bhi.n	7a0 <udc_process_setup+0x60>
     79a:	2a01      	cmp	r2, #1
     79c:	d005      	beq.n	7aa <udc_process_setup+0x6a>
     79e:	e185      	b.n	aac <udc_process_setup+0x36c>
     7a0:	2a03      	cmp	r2, #3
     7a2:	d02a      	beq.n	7fa <udc_process_setup+0xba>
     7a4:	2a0f      	cmp	r2, #15
     7a6:	d01c      	beq.n	7e2 <udc_process_setup+0xa2>
     7a8:	e180      	b.n	aac <udc_process_setup+0x36c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     7aa:	4ba4      	ldr	r3, [pc, #656]	; (a3c <udc_process_setup+0x2fc>)
     7ac:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     7ae:	7801      	ldrb	r1, [r0, #0]
     7b0:	4ba1      	ldr	r3, [pc, #644]	; (a38 <udc_process_setup+0x2f8>)
     7b2:	4798      	blx	r3
     7b4:	e03f      	b.n	836 <udc_process_setup+0xf6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     7b6:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     7b8:	4aa0      	ldr	r2, [pc, #640]	; (a3c <udc_process_setup+0x2fc>)
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	7c52      	ldrb	r2, [r2, #17]
     7be:	429a      	cmp	r2, r3
     7c0:	d800      	bhi.n	7c4 <udc_process_setup+0x84>
     7c2:	e178      	b.n	ab6 <udc_process_setup+0x376>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     7c4:	4a9d      	ldr	r2, [pc, #628]	; (a3c <udc_process_setup+0x2fc>)
     7c6:	6852      	ldr	r2, [r2, #4]
     7c8:	00db      	lsls	r3, r3, #3
     7ca:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     7cc:	7883      	ldrb	r3, [r0, #2]
     7ce:	78c1      	ldrb	r1, [r0, #3]
     7d0:	0209      	lsls	r1, r1, #8
     7d2:	4319      	orrs	r1, r3
     7d4:	4b98      	ldr	r3, [pc, #608]	; (a38 <udc_process_setup+0x2f8>)
     7d6:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     7d8:	4b95      	ldr	r3, [pc, #596]	; (a30 <udc_process_setup+0x2f0>)
     7da:	689b      	ldr	r3, [r3, #8]
     7dc:	2202      	movs	r2, #2
     7de:	705a      	strb	r2, [r3, #1]
     7e0:	e029      	b.n	836 <udc_process_setup+0xf6>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     7e2:	4b96      	ldr	r3, [pc, #600]	; (a3c <udc_process_setup+0x2fc>)
     7e4:	6898      	ldr	r0, [r3, #8]
     7e6:	2800      	cmp	r0, #0
     7e8:	d100      	bne.n	7ec <udc_process_setup+0xac>
     7ea:	e164      	b.n	ab6 <udc_process_setup+0x376>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     7ec:	7883      	ldrb	r3, [r0, #2]
     7ee:	78c1      	ldrb	r1, [r0, #3]
     7f0:	0209      	lsls	r1, r1, #8
     7f2:	4319      	orrs	r1, r3
     7f4:	4b90      	ldr	r3, [pc, #576]	; (a38 <udc_process_setup+0x2f8>)
     7f6:	4798      	blx	r3
     7f8:	e01d      	b.n	836 <udc_process_setup+0xf6>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     7fa:	22ff      	movs	r2, #255	; 0xff
     7fc:	4013      	ands	r3, r2
     7fe:	2b01      	cmp	r3, #1
     800:	d00a      	beq.n	818 <udc_process_setup+0xd8>
     802:	2b00      	cmp	r3, #0
     804:	d003      	beq.n	80e <udc_process_setup+0xce>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     806:	4a8e      	ldr	r2, [pc, #568]	; (a40 <udc_process_setup+0x300>)
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     808:	2b02      	cmp	r3, #2
     80a:	d006      	beq.n	81a <udc_process_setup+0xda>
     80c:	e153      	b.n	ab6 <udc_process_setup+0x376>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     80e:	488d      	ldr	r0, [pc, #564]	; (a44 <udc_process_setup+0x304>)
     810:	2104      	movs	r1, #4
     812:	4b89      	ldr	r3, [pc, #548]	; (a38 <udc_process_setup+0x2f8>)
     814:	4798      	blx	r3
     816:	e00e      	b.n	836 <udc_process_setup+0xf6>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     818:	4a8b      	ldr	r2, [pc, #556]	; (a48 <udc_process_setup+0x308>)
     81a:	498c      	ldr	r1, [pc, #560]	; (a4c <udc_process_setup+0x30c>)
     81c:	1c8b      	adds	r3, r1, #2
     81e:	3114      	adds	r1, #20
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     820:	7810      	ldrb	r0, [r2, #0]
     822:	8018      	strh	r0, [r3, #0]
     824:	3201      	adds	r2, #1
     826:	3302      	adds	r3, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     828:	428b      	cmp	r3, r1
     82a:	d1f9      	bne.n	820 <udc_process_setup+0xe0>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     82c:	4887      	ldr	r0, [pc, #540]	; (a4c <udc_process_setup+0x30c>)
     82e:	2114      	movs	r1, #20
     830:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     832:	4b81      	ldr	r3, [pc, #516]	; (a38 <udc_process_setup+0x2f8>)
     834:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     836:	4b7e      	ldr	r3, [pc, #504]	; (a30 <udc_process_setup+0x2f0>)
     838:	88da      	ldrh	r2, [r3, #6]
     83a:	899b      	ldrh	r3, [r3, #12]
     83c:	4293      	cmp	r3, r2
     83e:	d800      	bhi.n	842 <udc_process_setup+0x102>
     840:	e194      	b.n	b6c <udc_process_setup+0x42c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     842:	4b7b      	ldr	r3, [pc, #492]	; (a30 <udc_process_setup+0x2f0>)
     844:	819a      	strh	r2, [r3, #12]
     846:	e191      	b.n	b6c <udc_process_setup+0x42c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     848:	2a01      	cmp	r2, #1
     84a:	d000      	beq.n	84e <udc_process_setup+0x10e>
     84c:	e133      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     84e:	4880      	ldr	r0, [pc, #512]	; (a50 <udc_process_setup+0x310>)
     850:	2101      	movs	r1, #1
     852:	4b79      	ldr	r3, [pc, #484]	; (a38 <udc_process_setup+0x2f8>)
     854:	4798      	blx	r3
     856:	e189      	b.n	b6c <udc_process_setup+0x42c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     858:	2b01      	cmp	r3, #1
     85a:	d127      	bne.n	8ac <udc_process_setup+0x16c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     85c:	4974      	ldr	r1, [pc, #464]	; (a30 <udc_process_setup+0x2f0>)
     85e:	7849      	ldrb	r1, [r1, #1]
     860:	290a      	cmp	r1, #10
     862:	d123      	bne.n	8ac <udc_process_setup+0x16c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     864:	2a01      	cmp	r2, #1
     866:	d000      	beq.n	86a <udc_process_setup+0x12a>
     868:	e125      	b.n	ab6 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     86a:	4b79      	ldr	r3, [pc, #484]	; (a50 <udc_process_setup+0x310>)
     86c:	781b      	ldrb	r3, [r3, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d100      	bne.n	874 <udc_process_setup+0x134>
     872:	e120      	b.n	ab6 <udc_process_setup+0x376>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     874:	4b6e      	ldr	r3, [pc, #440]	; (a30 <udc_process_setup+0x2f0>)
     876:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     878:	4b76      	ldr	r3, [pc, #472]	; (a54 <udc_process_setup+0x314>)
     87a:	681d      	ldr	r5, [r3, #0]
     87c:	682b      	ldr	r3, [r5, #0]
     87e:	791b      	ldrb	r3, [r3, #4]
     880:	42a3      	cmp	r3, r4
     882:	d800      	bhi.n	886 <udc_process_setup+0x146>
     884:	e117      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     886:	1c20      	adds	r0, r4, #0
     888:	2100      	movs	r1, #0
     88a:	4b73      	ldr	r3, [pc, #460]	; (a58 <udc_process_setup+0x318>)
     88c:	4798      	blx	r3
     88e:	2800      	cmp	r0, #0
     890:	d100      	bne.n	894 <udc_process_setup+0x154>
     892:	e110      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     894:	686b      	ldr	r3, [r5, #4]
     896:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     898:	58e3      	ldr	r3, [r4, r3]
     89a:	68db      	ldr	r3, [r3, #12]
     89c:	4798      	blx	r3
     89e:	4b6f      	ldr	r3, [pc, #444]	; (a5c <udc_process_setup+0x31c>)
     8a0:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     8a2:	1c18      	adds	r0, r3, #0
     8a4:	2101      	movs	r1, #1
     8a6:	4b64      	ldr	r3, [pc, #400]	; (a38 <udc_process_setup+0x2f8>)
     8a8:	4798      	blx	r3
     8aa:	e15f      	b.n	b6c <udc_process_setup+0x42c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     8ac:	2b02      	cmp	r3, #2
     8ae:	d000      	beq.n	8b2 <udc_process_setup+0x172>
     8b0:	e101      	b.n	ab6 <udc_process_setup+0x376>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     8b2:	4b5f      	ldr	r3, [pc, #380]	; (a30 <udc_process_setup+0x2f0>)
     8b4:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
     8b6:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     8b8:	2b00      	cmp	r3, #0
     8ba:	d000      	beq.n	8be <udc_process_setup+0x17e>
     8bc:	e0f9      	b.n	ab2 <udc_process_setup+0x372>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     8be:	2a02      	cmp	r2, #2
     8c0:	d000      	beq.n	8c4 <udc_process_setup+0x184>
     8c2:	e0f8      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     8c4:	4b5a      	ldr	r3, [pc, #360]	; (a30 <udc_process_setup+0x2f0>)
     8c6:	7918      	ldrb	r0, [r3, #4]
     8c8:	4b65      	ldr	r3, [pc, #404]	; (a60 <udc_process_setup+0x320>)
     8ca:	4798      	blx	r3
     8cc:	4b65      	ldr	r3, [pc, #404]	; (a64 <udc_process_setup+0x324>)
     8ce:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     8d0:	1c18      	adds	r0, r3, #0
     8d2:	2102      	movs	r1, #2
     8d4:	4b58      	ldr	r3, [pc, #352]	; (a38 <udc_process_setup+0x2f8>)
     8d6:	4798      	blx	r3
     8d8:	e148      	b.n	b6c <udc_process_setup+0x42c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     8da:	221f      	movs	r2, #31
     8dc:	4013      	ands	r3, r2
     8de:	d176      	bne.n	9ce <udc_process_setup+0x28e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     8e0:	4a53      	ldr	r2, [pc, #332]	; (a30 <udc_process_setup+0x2f0>)
     8e2:	7852      	ldrb	r2, [r2, #1]
     8e4:	2a03      	cmp	r2, #3
     8e6:	d025      	beq.n	934 <udc_process_setup+0x1f4>
     8e8:	b2d1      	uxtb	r1, r2
     8ea:	2903      	cmp	r1, #3
     8ec:	d802      	bhi.n	8f4 <udc_process_setup+0x1b4>
     8ee:	2a01      	cmp	r2, #1
     8f0:	d00e      	beq.n	910 <udc_process_setup+0x1d0>
     8f2:	e06c      	b.n	9ce <udc_process_setup+0x28e>
     8f4:	2a05      	cmp	r2, #5
     8f6:	d002      	beq.n	8fe <udc_process_setup+0x1be>
     8f8:	2a09      	cmp	r2, #9
     8fa:	d02e      	beq.n	95a <udc_process_setup+0x21a>
     8fc:	e067      	b.n	9ce <udc_process_setup+0x28e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     8fe:	4b4c      	ldr	r3, [pc, #304]	; (a30 <udc_process_setup+0x2f0>)
     900:	88db      	ldrh	r3, [r3, #6]
     902:	2b00      	cmp	r3, #0
     904:	d000      	beq.n	908 <udc_process_setup+0x1c8>
     906:	e0d6      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     908:	4a57      	ldr	r2, [pc, #348]	; (a68 <udc_process_setup+0x328>)
     90a:	4b49      	ldr	r3, [pc, #292]	; (a30 <udc_process_setup+0x2f0>)
     90c:	611a      	str	r2, [r3, #16]
     90e:	e12d      	b.n	b6c <udc_process_setup+0x42c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     910:	4b47      	ldr	r3, [pc, #284]	; (a30 <udc_process_setup+0x2f0>)
     912:	88db      	ldrh	r3, [r3, #6]
     914:	2b00      	cmp	r3, #0
     916:	d000      	beq.n	91a <udc_process_setup+0x1da>
     918:	e0cd      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     91a:	4b45      	ldr	r3, [pc, #276]	; (a30 <udc_process_setup+0x2f0>)
     91c:	885b      	ldrh	r3, [r3, #2]
     91e:	2b01      	cmp	r3, #1
     920:	d000      	beq.n	924 <udc_process_setup+0x1e4>
     922:	e0c8      	b.n	ab6 <udc_process_setup+0x376>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     924:	4a43      	ldr	r2, [pc, #268]	; (a34 <udc_process_setup+0x2f4>)
     926:	8813      	ldrh	r3, [r2, #0]
     928:	2102      	movs	r1, #2
     92a:	438b      	bics	r3, r1
     92c:	8013      	strh	r3, [r2, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
     92e:	4b4f      	ldr	r3, [pc, #316]	; (a6c <udc_process_setup+0x32c>)
     930:	4798      	blx	r3
     932:	e11b      	b.n	b6c <udc_process_setup+0x42c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     934:	4b3e      	ldr	r3, [pc, #248]	; (a30 <udc_process_setup+0x2f0>)
     936:	88db      	ldrh	r3, [r3, #6]
     938:	2b00      	cmp	r3, #0
     93a:	d000      	beq.n	93e <udc_process_setup+0x1fe>
     93c:	e0bb      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
     93e:	4b3c      	ldr	r3, [pc, #240]	; (a30 <udc_process_setup+0x2f0>)
     940:	885b      	ldrh	r3, [r3, #2]
		break;
#endif
	default:
		break;
	}
	return false;
     942:	2000      	movs	r0, #0
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
     944:	2b01      	cmp	r3, #1
     946:	d000      	beq.n	94a <udc_process_setup+0x20a>
     948:	e0b3      	b.n	ab2 <udc_process_setup+0x372>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     94a:	4a3a      	ldr	r2, [pc, #232]	; (a34 <udc_process_setup+0x2f4>)
     94c:	8811      	ldrh	r1, [r2, #0]
     94e:	2302      	movs	r3, #2
     950:	430b      	orrs	r3, r1
     952:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     954:	4b46      	ldr	r3, [pc, #280]	; (a70 <udc_process_setup+0x330>)
     956:	4798      	blx	r3
     958:	e108      	b.n	b6c <udc_process_setup+0x42c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     95a:	4b35      	ldr	r3, [pc, #212]	; (a30 <udc_process_setup+0x2f0>)
     95c:	88db      	ldrh	r3, [r3, #6]
     95e:	2b00      	cmp	r3, #0
     960:	d000      	beq.n	964 <udc_process_setup+0x224>
     962:	e0a8      	b.n	ab6 <udc_process_setup+0x376>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     964:	4b43      	ldr	r3, [pc, #268]	; (a74 <udc_process_setup+0x334>)
     966:	4798      	blx	r3
     968:	2800      	cmp	r0, #0
     96a:	d100      	bne.n	96e <udc_process_setup+0x22e>
     96c:	e0a3      	b.n	ab6 <udc_process_setup+0x376>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     96e:	4b30      	ldr	r3, [pc, #192]	; (a30 <udc_process_setup+0x2f0>)
     970:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     972:	4b32      	ldr	r3, [pc, #200]	; (a3c <udc_process_setup+0x2fc>)
     974:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     976:	7c5b      	ldrb	r3, [r3, #17]
     978:	429a      	cmp	r2, r3
     97a:	dd00      	ble.n	97e <udc_process_setup+0x23e>
     97c:	e09b      	b.n	ab6 <udc_process_setup+0x376>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     97e:	4b3e      	ldr	r3, [pc, #248]	; (a78 <udc_process_setup+0x338>)
     980:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     982:	4b2b      	ldr	r3, [pc, #172]	; (a30 <udc_process_setup+0x2f0>)
     984:	789b      	ldrb	r3, [r3, #2]
     986:	4a32      	ldr	r2, [pc, #200]	; (a50 <udc_process_setup+0x310>)
     988:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     98a:	2b00      	cmp	r3, #0
     98c:	d100      	bne.n	990 <udc_process_setup+0x250>
     98e:	e0ed      	b.n	b6c <udc_process_setup+0x42c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     990:	4a3a      	ldr	r2, [pc, #232]	; (a7c <udc_process_setup+0x33c>)
     992:	4694      	mov	ip, r2
     994:	4463      	add	r3, ip
     996:	00db      	lsls	r3, r3, #3
     998:	4a28      	ldr	r2, [pc, #160]	; (a3c <udc_process_setup+0x2fc>)
     99a:	6852      	ldr	r2, [r2, #4]
     99c:	18d3      	adds	r3, r2, r3
     99e:	4a2d      	ldr	r2, [pc, #180]	; (a54 <udc_process_setup+0x314>)
     9a0:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	791b      	ldrb	r3, [r3, #4]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d100      	bne.n	9ac <udc_process_setup+0x26c>
     9aa:	e0df      	b.n	b6c <udc_process_setup+0x42c>
     9ac:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     9ae:	4d34      	ldr	r5, [pc, #208]	; (a80 <udc_process_setup+0x340>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9b0:	1c16      	adds	r6, r2, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     9b2:	1c20      	adds	r0, r4, #0
     9b4:	2100      	movs	r1, #0
     9b6:	47a8      	blx	r5
     9b8:	2800      	cmp	r0, #0
     9ba:	d100      	bne.n	9be <udc_process_setup+0x27e>
     9bc:	e07b      	b.n	ab6 <udc_process_setup+0x376>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     9be:	3401      	adds	r4, #1
     9c0:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9c2:	6833      	ldr	r3, [r6, #0]
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	791b      	ldrb	r3, [r3, #4]
     9c8:	42a3      	cmp	r3, r4
     9ca:	d8f2      	bhi.n	9b2 <udc_process_setup+0x272>
     9cc:	e0ce      	b.n	b6c <udc_process_setup+0x42c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     9ce:	2b01      	cmp	r3, #1
     9d0:	d118      	bne.n	a04 <udc_process_setup+0x2c4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     9d2:	4a17      	ldr	r2, [pc, #92]	; (a30 <udc_process_setup+0x2f0>)
     9d4:	7852      	ldrb	r2, [r2, #1]
     9d6:	2a0b      	cmp	r2, #11
     9d8:	d114      	bne.n	a04 <udc_process_setup+0x2c4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     9da:	4b15      	ldr	r3, [pc, #84]	; (a30 <udc_process_setup+0x2f0>)
     9dc:	88db      	ldrh	r3, [r3, #6]
     9de:	2b00      	cmp	r3, #0
     9e0:	d169      	bne.n	ab6 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     9e2:	4b1b      	ldr	r3, [pc, #108]	; (a50 <udc_process_setup+0x310>)
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d065      	beq.n	ab6 <udc_process_setup+0x376>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     9ea:	4b11      	ldr	r3, [pc, #68]	; (a30 <udc_process_setup+0x2f0>)
     9ec:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     9ee:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     9f0:	1c28      	adds	r0, r5, #0
     9f2:	4b24      	ldr	r3, [pc, #144]	; (a84 <udc_process_setup+0x344>)
     9f4:	4798      	blx	r3
     9f6:	2800      	cmp	r0, #0
     9f8:	d05d      	beq.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     9fa:	b2e1      	uxtb	r1, r4
     9fc:	1c28      	adds	r0, r5, #0
     9fe:	4b20      	ldr	r3, [pc, #128]	; (a80 <udc_process_setup+0x340>)
     a00:	4798      	blx	r3
     a02:	e056      	b.n	ab2 <udc_process_setup+0x372>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     a04:	2b02      	cmp	r3, #2
     a06:	d156      	bne.n	ab6 <udc_process_setup+0x376>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     a08:	4b09      	ldr	r3, [pc, #36]	; (a30 <udc_process_setup+0x2f0>)
     a0a:	785b      	ldrb	r3, [r3, #1]
     a0c:	2b01      	cmp	r3, #1
     a0e:	d002      	beq.n	a16 <udc_process_setup+0x2d6>
     a10:	2b03      	cmp	r3, #3
     a12:	d03b      	beq.n	a8c <udc_process_setup+0x34c>
     a14:	e04c      	b.n	ab0 <udc_process_setup+0x370>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <udc_process_setup+0x2f0>)
     a18:	88db      	ldrh	r3, [r3, #6]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d14b      	bne.n	ab6 <udc_process_setup+0x376>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <udc_process_setup+0x2f0>)
     a20:	885b      	ldrh	r3, [r3, #2]
     a22:	2b00      	cmp	r3, #0
     a24:	d147      	bne.n	ab6 <udc_process_setup+0x376>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     a26:	4b02      	ldr	r3, [pc, #8]	; (a30 <udc_process_setup+0x2f0>)
     a28:	7918      	ldrb	r0, [r3, #4]
     a2a:	4b17      	ldr	r3, [pc, #92]	; (a88 <udc_process_setup+0x348>)
     a2c:	4798      	blx	r3
     a2e:	e040      	b.n	ab2 <udc_process_setup+0x372>
     a30:	20000390 	.word	0x20000390
     a34:	20000120 	.word	0x20000120
     a38:	00001f69 	.word	0x00001f69
     a3c:	20000084 	.word	0x20000084
     a40:	200000a8 	.word	0x200000a8
     a44:	200000d4 	.word	0x200000d4
     a48:	200000b4 	.word	0x200000b4
     a4c:	200000c0 	.word	0x200000c0
     a50:	20000124 	.word	0x20000124
     a54:	20000118 	.word	0x20000118
     a58:	00000565 	.word	0x00000565
     a5c:	2000011c 	.word	0x2000011c
     a60:	00001b95 	.word	0x00001b95
     a64:	2000011e 	.word	0x2000011e
     a68:	0000054d 	.word	0x0000054d
     a6c:	000031d9 	.word	0x000031d9
     a70:	000031cd 	.word	0x000031cd
     a74:	00001f01 	.word	0x00001f01
     a78:	000006a5 	.word	0x000006a5
     a7c:	1fffffff 	.word	0x1fffffff
     a80:	00000635 	.word	0x00000635
     a84:	000005cd 	.word	0x000005cd
     a88:	00001cd9 	.word	0x00001cd9
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     a8c:	4b38      	ldr	r3, [pc, #224]	; (b70 <udc_process_setup+0x430>)
     a8e:	88db      	ldrh	r3, [r3, #6]
     a90:	2b00      	cmp	r3, #0
     a92:	d110      	bne.n	ab6 <udc_process_setup+0x376>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     a94:	4b36      	ldr	r3, [pc, #216]	; (b70 <udc_process_setup+0x430>)
     a96:	885b      	ldrh	r3, [r3, #2]
     a98:	2b00      	cmp	r3, #0
     a9a:	d10c      	bne.n	ab6 <udc_process_setup+0x376>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     a9c:	4c34      	ldr	r4, [pc, #208]	; (b70 <udc_process_setup+0x430>)
     a9e:	7920      	ldrb	r0, [r4, #4]
     aa0:	4b34      	ldr	r3, [pc, #208]	; (b74 <udc_process_setup+0x434>)
     aa2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     aa4:	7920      	ldrb	r0, [r4, #4]
     aa6:	4b34      	ldr	r3, [pc, #208]	; (b78 <udc_process_setup+0x438>)
     aa8:	4798      	blx	r3
     aaa:	e002      	b.n	ab2 <udc_process_setup+0x372>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     aac:	2000      	movs	r0, #0
     aae:	e000      	b.n	ab2 <udc_process_setup+0x372>
				break;
			}
		}
#endif
	}
	return false;
     ab0:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     ab2:	2800      	cmp	r0, #0
     ab4:	d15b      	bne.n	b6e <udc_process_setup+0x42e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     ab6:	4b2e      	ldr	r3, [pc, #184]	; (b70 <udc_process_setup+0x430>)
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	221f      	movs	r2, #31
     abc:	4013      	ands	r3, r2
     abe:	2b01      	cmp	r3, #1
     ac0:	d120      	bne.n	b04 <udc_process_setup+0x3c4>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     ac2:	4b2e      	ldr	r3, [pc, #184]	; (b7c <udc_process_setup+0x43c>)
     ac4:	781b      	ldrb	r3, [r3, #0]
     ac6:	2b00      	cmp	r3, #0
     ac8:	d01c      	beq.n	b04 <udc_process_setup+0x3c4>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     aca:	4b29      	ldr	r3, [pc, #164]	; (b70 <udc_process_setup+0x430>)
     acc:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ace:	4b2c      	ldr	r3, [pc, #176]	; (b80 <udc_process_setup+0x440>)
     ad0:	681d      	ldr	r5, [r3, #0]
     ad2:	682b      	ldr	r3, [r5, #0]
     ad4:	791b      	ldrb	r3, [r3, #4]
     ad6:	42a3      	cmp	r3, r4
     ad8:	d914      	bls.n	b04 <udc_process_setup+0x3c4>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     ada:	1c20      	adds	r0, r4, #0
     adc:	2100      	movs	r1, #0
     ade:	4b29      	ldr	r3, [pc, #164]	; (b84 <udc_process_setup+0x444>)
     ae0:	4798      	blx	r3
     ae2:	2800      	cmp	r0, #0
     ae4:	d00e      	beq.n	b04 <udc_process_setup+0x3c4>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     ae6:	686b      	ldr	r3, [r5, #4]
     ae8:	00a2      	lsls	r2, r4, #2
     aea:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     aec:	68eb      	ldr	r3, [r5, #12]
     aee:	4798      	blx	r3
     af0:	1c01      	adds	r1, r0, #0
     af2:	1c20      	adds	r0, r4, #0
     af4:	4b23      	ldr	r3, [pc, #140]	; (b84 <udc_process_setup+0x444>)
     af6:	4798      	blx	r3
     af8:	2800      	cmp	r0, #0
     afa:	d003      	beq.n	b04 <udc_process_setup+0x3c4>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     afc:	68ab      	ldr	r3, [r5, #8]
     afe:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     b00:	2800      	cmp	r0, #0
     b02:	d134      	bne.n	b6e <udc_process_setup+0x42e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     b04:	4b1a      	ldr	r3, [pc, #104]	; (b70 <udc_process_setup+0x430>)
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	221f      	movs	r2, #31
     b0a:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     b0c:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     b0e:	2b02      	cmp	r3, #2
     b10:	d12d      	bne.n	b6e <udc_process_setup+0x42e>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     b12:	4b1a      	ldr	r3, [pc, #104]	; (b7c <udc_process_setup+0x43c>)
     b14:	781b      	ldrb	r3, [r3, #0]
     b16:	2b00      	cmp	r3, #0
     b18:	d029      	beq.n	b6e <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b1a:	4b19      	ldr	r3, [pc, #100]	; (b80 <udc_process_setup+0x440>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	681a      	ldr	r2, [r3, #0]
     b20:	7912      	ldrb	r2, [r2, #4]
     b22:	2a00      	cmp	r2, #0
     b24:	d018      	beq.n	b58 <udc_process_setup+0x418>
     b26:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b28:	4e16      	ldr	r6, [pc, #88]	; (b84 <udc_process_setup+0x444>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b2a:	4f15      	ldr	r7, [pc, #84]	; (b80 <udc_process_setup+0x440>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     b2c:	685b      	ldr	r3, [r3, #4]
     b2e:	00a2      	lsls	r2, r4, #2
     b30:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b32:	68eb      	ldr	r3, [r5, #12]
     b34:	4798      	blx	r3
     b36:	1c01      	adds	r1, r0, #0
     b38:	1c20      	adds	r0, r4, #0
     b3a:	47b0      	blx	r6
     b3c:	2800      	cmp	r0, #0
     b3e:	d016      	beq.n	b6e <udc_process_setup+0x42e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     b40:	68ab      	ldr	r3, [r5, #8]
     b42:	4798      	blx	r3
     b44:	2800      	cmp	r0, #0
     b46:	d112      	bne.n	b6e <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     b48:	3401      	adds	r4, #1
     b4a:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	681a      	ldr	r2, [r3, #0]
     b50:	7912      	ldrb	r2, [r2, #4]
     b52:	42a2      	cmp	r2, r4
     b54:	d8ea      	bhi.n	b2c <udc_process_setup+0x3ec>
     b56:	e00a      	b.n	b6e <udc_process_setup+0x42e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     b58:	2000      	movs	r0, #0
     b5a:	e008      	b.n	b6e <udc_process_setup+0x42e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     b5c:	2260      	movs	r2, #96	; 0x60
     b5e:	421a      	tst	r2, r3
     b60:	d1a9      	bne.n	ab6 <udc_process_setup+0x376>
     b62:	e6ba      	b.n	8da <udc_process_setup+0x19a>
     b64:	2160      	movs	r1, #96	; 0x60
     b66:	4219      	tst	r1, r3
     b68:	d1a5      	bne.n	ab6 <udc_process_setup+0x376>
     b6a:	e5fb      	b.n	764 <udc_process_setup+0x24>
		if (udc_reqstd()) {
			return true;
     b6c:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b70:	20000390 	.word	0x20000390
     b74:	000019e9 	.word	0x000019e9
     b78:	00001ba9 	.word	0x00001ba9
     b7c:	20000124 	.word	0x20000124
     b80:	20000118 	.word	0x20000118
     b84:	00000565 	.word	0x00000565

00000b88 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b88:	4b0c      	ldr	r3, [pc, #48]	; (bbc <cpu_irq_enter_critical+0x34>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d110      	bne.n	bb2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b90:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     b94:	2b00      	cmp	r3, #0
     b96:	d109      	bne.n	bac <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     b98:	b672      	cpsid	i
     b9a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     b9e:	2200      	movs	r2, #0
     ba0:	4b07      	ldr	r3, [pc, #28]	; (bc0 <cpu_irq_enter_critical+0x38>)
     ba2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     ba4:	3201      	adds	r2, #1
     ba6:	4b07      	ldr	r3, [pc, #28]	; (bc4 <cpu_irq_enter_critical+0x3c>)
     ba8:	701a      	strb	r2, [r3, #0]
     baa:	e002      	b.n	bb2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bac:	2200      	movs	r2, #0
     bae:	4b05      	ldr	r3, [pc, #20]	; (bc4 <cpu_irq_enter_critical+0x3c>)
     bb0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bb2:	4a02      	ldr	r2, [pc, #8]	; (bbc <cpu_irq_enter_critical+0x34>)
     bb4:	6813      	ldr	r3, [r2, #0]
     bb6:	3301      	adds	r3, #1
     bb8:	6013      	str	r3, [r2, #0]
}
     bba:	4770      	bx	lr
     bbc:	2000012c 	.word	0x2000012c
     bc0:	200000d8 	.word	0x200000d8
     bc4:	20000130 	.word	0x20000130

00000bc8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     bc8:	4b08      	ldr	r3, [pc, #32]	; (bec <cpu_irq_leave_critical+0x24>)
     bca:	681a      	ldr	r2, [r3, #0]
     bcc:	3a01      	subs	r2, #1
     bce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d109      	bne.n	bea <cpu_irq_leave_critical+0x22>
     bd6:	4b06      	ldr	r3, [pc, #24]	; (bf0 <cpu_irq_leave_critical+0x28>)
     bd8:	781b      	ldrb	r3, [r3, #0]
     bda:	2b00      	cmp	r3, #0
     bdc:	d005      	beq.n	bea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bde:	2201      	movs	r2, #1
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <cpu_irq_leave_critical+0x2c>)
     be2:	701a      	strb	r2, [r3, #0]
     be4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     be8:	b662      	cpsie	i
	}
}
     bea:	4770      	bx	lr
     bec:	2000012c 	.word	0x2000012c
     bf0:	20000130 	.word	0x20000130
     bf4:	200000d8 	.word	0x200000d8

00000bf8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     bfc:	ac01      	add	r4, sp, #4
     bfe:	2501      	movs	r5, #1
     c00:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c02:	2700      	movs	r7, #0
     c04:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c06:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c08:	2011      	movs	r0, #17
     c0a:	1c21      	adds	r1, r4, #0
     c0c:	4e06      	ldr	r6, [pc, #24]	; (c28 <system_board_init+0x30>)
     c0e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c10:	2280      	movs	r2, #128	; 0x80
     c12:	0292      	lsls	r2, r2, #10
     c14:	4b05      	ldr	r3, [pc, #20]	; (c2c <system_board_init+0x34>)
     c16:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c18:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c1a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c1c:	200f      	movs	r0, #15
     c1e:	1c21      	adds	r1, r4, #0
     c20:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c22:	b003      	add	sp, #12
     c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00000e15 	.word	0x00000e15
     c2c:	41004400 	.word	0x41004400

00000c30 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c30:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     c32:	2a00      	cmp	r2, #0
     c34:	d10d      	bne.n	c52 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     c36:	008b      	lsls	r3, r1, #2
     c38:	4a07      	ldr	r2, [pc, #28]	; (c58 <extint_register_callback+0x28>)
     c3a:	589b      	ldr	r3, [r3, r2]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d103      	bne.n	c48 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     c40:	0089      	lsls	r1, r1, #2
     c42:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     c44:	2300      	movs	r3, #0
     c46:	e004      	b.n	c52 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     c48:	4283      	cmp	r3, r0
     c4a:	d001      	beq.n	c50 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     c4c:	231d      	movs	r3, #29
     c4e:	e000      	b.n	c52 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     c50:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c52:	1c18      	adds	r0, r3, #0
     c54:	4770      	bx	lr
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	200001a8 	.word	0x200001a8

00000c5c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c5c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c5e:	2900      	cmp	r1, #0
     c60:	d107      	bne.n	c72 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c62:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     c64:	281f      	cmp	r0, #31
     c66:	d800      	bhi.n	c6a <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     c68:	4a03      	ldr	r2, [pc, #12]	; (c78 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     c6a:	2301      	movs	r3, #1
     c6c:	4083      	lsls	r3, r0
     c6e:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c70:	2300      	movs	r3, #0
}
     c72:	1c18      	adds	r0, r3, #0
     c74:	4770      	bx	lr
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	40001800 	.word	0x40001800

00000c7c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c7c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c7e:	2900      	cmp	r1, #0
     c80:	d107      	bne.n	c92 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     c82:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     c84:	281f      	cmp	r0, #31
     c86:	d800      	bhi.n	c8a <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     c88:	4a03      	ldr	r2, [pc, #12]	; (c98 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     c8a:	2301      	movs	r3, #1
     c8c:	4083      	lsls	r3, r0
     c8e:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c90:	2300      	movs	r3, #0
}
     c92:	1c18      	adds	r0, r3, #0
     c94:	4770      	bx	lr
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	40001800 	.word	0x40001800

00000c9c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c9c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c9e:	2200      	movs	r2, #0
     ca0:	4b15      	ldr	r3, [pc, #84]	; (cf8 <EIC_Handler+0x5c>)
     ca2:	701a      	strb	r2, [r3, #0]
     ca4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ca6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     ca8:	4e14      	ldr	r6, [pc, #80]	; (cfc <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     caa:	4c13      	ldr	r4, [pc, #76]	; (cf8 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     cac:	2b1f      	cmp	r3, #31
     cae:	d919      	bls.n	ce4 <EIC_Handler+0x48>
     cb0:	e00f      	b.n	cd2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     cb2:	2100      	movs	r1, #0
     cb4:	e000      	b.n	cb8 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     cb6:	4912      	ldr	r1, [pc, #72]	; (d00 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     cb8:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     cba:	009b      	lsls	r3, r3, #2
     cbc:	599b      	ldr	r3, [r3, r6]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d000      	beq.n	cc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     cc2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     cc4:	7823      	ldrb	r3, [r4, #0]
     cc6:	3301      	adds	r3, #1
     cc8:	b2db      	uxtb	r3, r3
     cca:	7023      	strb	r3, [r4, #0]
     ccc:	2b0f      	cmp	r3, #15
     cce:	d9ed      	bls.n	cac <EIC_Handler+0x10>
     cd0:	e011      	b.n	cf6 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     cd2:	1c29      	adds	r1, r5, #0
     cd4:	4019      	ands	r1, r3
     cd6:	2201      	movs	r2, #1
     cd8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     cda:	2100      	movs	r1, #0
     cdc:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     cde:	4211      	tst	r1, r2
     ce0:	d1e7      	bne.n	cb2 <EIC_Handler+0x16>
     ce2:	e7ef      	b.n	cc4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ce4:	1c29      	adds	r1, r5, #0
     ce6:	4019      	ands	r1, r3
     ce8:	2201      	movs	r2, #1
     cea:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     cec:	4904      	ldr	r1, [pc, #16]	; (d00 <EIC_Handler+0x64>)
     cee:	6909      	ldr	r1, [r1, #16]
     cf0:	4211      	tst	r1, r2
     cf2:	d1e0      	bne.n	cb6 <EIC_Handler+0x1a>
     cf4:	e7e6      	b.n	cc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
     cf8:	200001a5 	.word	0x200001a5
     cfc:	200001a8 	.word	0x200001a8
     d00:	40001800 	.word	0x40001800

00000d04 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     d04:	4a04      	ldr	r2, [pc, #16]	; (d18 <_extint_enable+0x14>)
     d06:	7811      	ldrb	r1, [r2, #0]
     d08:	2302      	movs	r3, #2
     d0a:	430b      	orrs	r3, r1
     d0c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d0e:	7853      	ldrb	r3, [r2, #1]
     d10:	b25b      	sxtb	r3, r3
     d12:	2b00      	cmp	r3, #0
     d14:	dbfb      	blt.n	d0e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d16:	4770      	bx	lr
     d18:	40001800 	.word	0x40001800

00000d1c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     d1c:	b500      	push	{lr}
     d1e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d20:	4a12      	ldr	r2, [pc, #72]	; (d6c <_system_extint_init+0x50>)
     d22:	6991      	ldr	r1, [r2, #24]
     d24:	2340      	movs	r3, #64	; 0x40
     d26:	430b      	orrs	r3, r1
     d28:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d2a:	a901      	add	r1, sp, #4
     d2c:	2300      	movs	r3, #0
     d2e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d30:	2005      	movs	r0, #5
     d32:	4b0f      	ldr	r3, [pc, #60]	; (d70 <_system_extint_init+0x54>)
     d34:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     d36:	2005      	movs	r0, #5
     d38:	4b0e      	ldr	r3, [pc, #56]	; (d74 <_system_extint_init+0x58>)
     d3a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d3c:	4a0e      	ldr	r2, [pc, #56]	; (d78 <_system_extint_init+0x5c>)
     d3e:	7811      	ldrb	r1, [r2, #0]
     d40:	2301      	movs	r3, #1
     d42:	430b      	orrs	r3, r1
     d44:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d46:	7853      	ldrb	r3, [r2, #1]
     d48:	b25b      	sxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	dbfb      	blt.n	d46 <_system_extint_init+0x2a>
     d4e:	4b0b      	ldr	r3, [pc, #44]	; (d7c <_system_extint_init+0x60>)
     d50:	1c19      	adds	r1, r3, #0
     d52:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     d54:	2200      	movs	r2, #0
     d56:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d58:	428b      	cmp	r3, r1
     d5a:	d1fc      	bne.n	d56 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d5c:	2210      	movs	r2, #16
     d5e:	4b08      	ldr	r3, [pc, #32]	; (d80 <_system_extint_init+0x64>)
     d60:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     d62:	4b08      	ldr	r3, [pc, #32]	; (d84 <_system_extint_init+0x68>)
     d64:	4798      	blx	r3
}
     d66:	b003      	add	sp, #12
     d68:	bd00      	pop	{pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	40000400 	.word	0x40000400
     d70:	00001249 	.word	0x00001249
     d74:	000011bd 	.word	0x000011bd
     d78:	40001800 	.word	0x40001800
     d7c:	200001a8 	.word	0x200001a8
     d80:	e000e100 	.word	0xe000e100
     d84:	00000d05 	.word	0x00000d05

00000d88 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     d88:	2300      	movs	r3, #0
     d8a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     d8c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     d8e:	2201      	movs	r2, #1
     d90:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     d92:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     d94:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     d96:	3302      	adds	r3, #2
     d98:	72c3      	strb	r3, [r0, #11]
}
     d9a:	4770      	bx	lr

00000d9c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	b083      	sub	sp, #12
     da0:	1c05      	adds	r5, r0, #0
     da2:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     da4:	a901      	add	r1, sp, #4
     da6:	2300      	movs	r3, #0
     da8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     daa:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     dac:	7923      	ldrb	r3, [r4, #4]
     dae:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     db0:	7a23      	ldrb	r3, [r4, #8]
     db2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     db4:	7820      	ldrb	r0, [r4, #0]
     db6:	4b15      	ldr	r3, [pc, #84]	; (e0c <extint_chan_set_config+0x70>)
     db8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     dba:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     dbc:	2d1f      	cmp	r5, #31
     dbe:	d800      	bhi.n	dc2 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     dc0:	4e13      	ldr	r6, [pc, #76]	; (e10 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     dc2:	2207      	movs	r2, #7
     dc4:	402a      	ands	r2, r5
     dc6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     dc8:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     dca:	7aa3      	ldrb	r3, [r4, #10]
     dcc:	2b00      	cmp	r3, #0
     dce:	d001      	beq.n	dd4 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     dd0:	2308      	movs	r3, #8
     dd2:	4318      	orrs	r0, r3
     dd4:	08eb      	lsrs	r3, r5, #3
     dd6:	009b      	lsls	r3, r3, #2
     dd8:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     dda:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     ddc:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     dde:	270f      	movs	r7, #15
     de0:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     de2:	43b9      	bics	r1, r7
     de4:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     de6:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     de8:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     dea:	7a63      	ldrb	r3, [r4, #9]
     dec:	2b00      	cmp	r3, #0
     dee:	d006      	beq.n	dfe <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     df0:	6973      	ldr	r3, [r6, #20]
     df2:	2201      	movs	r2, #1
     df4:	40aa      	lsls	r2, r5
     df6:	1c15      	adds	r5, r2, #0
     df8:	431d      	orrs	r5, r3
     dfa:	6175      	str	r5, [r6, #20]
     dfc:	e004      	b.n	e08 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     dfe:	6973      	ldr	r3, [r6, #20]
     e00:	2201      	movs	r2, #1
     e02:	40aa      	lsls	r2, r5
     e04:	4393      	bics	r3, r2
     e06:	6173      	str	r3, [r6, #20]
	}
}
     e08:	b003      	add	sp, #12
     e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e0c:	0000130d 	.word	0x0000130d
     e10:	40001800 	.word	0x40001800

00000e14 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e14:	b500      	push	{lr}
     e16:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e18:	ab01      	add	r3, sp, #4
     e1a:	2280      	movs	r2, #128	; 0x80
     e1c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e1e:	780a      	ldrb	r2, [r1, #0]
     e20:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e22:	784a      	ldrb	r2, [r1, #1]
     e24:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e26:	788a      	ldrb	r2, [r1, #2]
     e28:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e2a:	1c19      	adds	r1, r3, #0
     e2c:	4b01      	ldr	r3, [pc, #4]	; (e34 <port_pin_set_config+0x20>)
     e2e:	4798      	blx	r3
}
     e30:	b003      	add	sp, #12
     e32:	bd00      	pop	{pc}
     e34:	0000130d 	.word	0x0000130d

00000e38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e3a:	4c0c      	ldr	r4, [pc, #48]	; (e6c <system_clock_source_osc8m_set_config+0x34>)
     e3c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e3e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e42:	7842      	ldrb	r2, [r0, #1]
     e44:	2001      	movs	r0, #1
     e46:	4002      	ands	r2, r0
     e48:	0192      	lsls	r2, r2, #6
     e4a:	2640      	movs	r6, #64	; 0x40
     e4c:	43b3      	bics	r3, r6
     e4e:	4313      	orrs	r3, r2
     e50:	1c02      	adds	r2, r0, #0
     e52:	402a      	ands	r2, r5
     e54:	01d2      	lsls	r2, r2, #7
     e56:	307f      	adds	r0, #127	; 0x7f
     e58:	4383      	bics	r3, r0
     e5a:	4313      	orrs	r3, r2
     e5c:	2203      	movs	r2, #3
     e5e:	400a      	ands	r2, r1
     e60:	0212      	lsls	r2, r2, #8
     e62:	4903      	ldr	r1, [pc, #12]	; (e70 <system_clock_source_osc8m_set_config+0x38>)
     e64:	400b      	ands	r3, r1
     e66:	4313      	orrs	r3, r2
     e68:	6223      	str	r3, [r4, #32]
}
     e6a:	bd70      	pop	{r4, r5, r6, pc}
     e6c:	40000800 	.word	0x40000800
     e70:	fffffcff 	.word	0xfffffcff

00000e74 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     e74:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e76:	7a03      	ldrb	r3, [r0, #8]
     e78:	069b      	lsls	r3, r3, #26
     e7a:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     e7c:	8943      	ldrh	r3, [r0, #10]
     e7e:	059b      	lsls	r3, r3, #22
     e80:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e82:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
     e84:	4c19      	ldr	r4, [pc, #100]	; (eec <system_clock_source_dfll_set_config+0x78>)
     e86:	6063      	str	r3, [r4, #4]
     e88:	8881      	ldrh	r1, [r0, #4]
     e8a:	8843      	ldrh	r3, [r0, #2]
     e8c:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     e8e:	79c3      	ldrb	r3, [r0, #7]
     e90:	7982      	ldrb	r2, [r0, #6]
     e92:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     e94:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     e96:	7842      	ldrb	r2, [r0, #1]
     e98:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
     e9a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
     e9c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     e9e:	7803      	ldrb	r3, [r0, #0]
     ea0:	2b04      	cmp	r3, #4
     ea2:	d10f      	bne.n	ec4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ea4:	7b03      	ldrb	r3, [r0, #12]
     ea6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     ea8:	8a02      	ldrh	r2, [r0, #16]
     eaa:	4313      	orrs	r3, r2
     eac:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     eae:	89c3      	ldrh	r3, [r0, #14]
     eb0:	041b      	lsls	r3, r3, #16
     eb2:	4a0f      	ldr	r2, [pc, #60]	; (ef0 <system_clock_source_dfll_set_config+0x7c>)
     eb4:	4013      	ands	r3, r2
     eb6:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
     eb8:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     eba:	6821      	ldr	r1, [r4, #0]
     ebc:	2304      	movs	r3, #4
     ebe:	430b      	orrs	r3, r1
     ec0:	6023      	str	r3, [r4, #0]
     ec2:	e011      	b.n	ee8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     ec4:	2b20      	cmp	r3, #32
     ec6:	d10f      	bne.n	ee8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ec8:	7b03      	ldrb	r3, [r0, #12]
     eca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     ecc:	8a02      	ldrh	r2, [r0, #16]
     ece:	4313      	orrs	r3, r2
     ed0:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     ed2:	89c3      	ldrh	r3, [r0, #14]
     ed4:	041b      	lsls	r3, r3, #16
     ed6:	4a06      	ldr	r2, [pc, #24]	; (ef0 <system_clock_source_dfll_set_config+0x7c>)
     ed8:	4013      	ands	r3, r2
     eda:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
     edc:	4a03      	ldr	r2, [pc, #12]	; (eec <system_clock_source_dfll_set_config+0x78>)
     ede:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     ee0:	6813      	ldr	r3, [r2, #0]
     ee2:	4904      	ldr	r1, [pc, #16]	; (ef4 <system_clock_source_dfll_set_config+0x80>)
     ee4:	430b      	orrs	r3, r1
     ee6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     ee8:	bd10      	pop	{r4, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	20000134 	.word	0x20000134
     ef0:	03ff0000 	.word	0x03ff0000
     ef4:	00000424 	.word	0x00000424

00000ef8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ef8:	2808      	cmp	r0, #8
     efa:	d803      	bhi.n	f04 <system_clock_source_enable+0xc>
     efc:	0080      	lsls	r0, r0, #2
     efe:	4b25      	ldr	r3, [pc, #148]	; (f94 <system_clock_source_enable+0x9c>)
     f00:	581b      	ldr	r3, [r3, r0]
     f02:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f04:	2017      	movs	r0, #23
     f06:	e044      	b.n	f92 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f08:	4a23      	ldr	r2, [pc, #140]	; (f98 <system_clock_source_enable+0xa0>)
     f0a:	6a11      	ldr	r1, [r2, #32]
     f0c:	2302      	movs	r3, #2
     f0e:	430b      	orrs	r3, r1
     f10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f12:	2000      	movs	r0, #0
     f14:	e03d      	b.n	f92 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f16:	4a20      	ldr	r2, [pc, #128]	; (f98 <system_clock_source_enable+0xa0>)
     f18:	6991      	ldr	r1, [r2, #24]
     f1a:	2302      	movs	r3, #2
     f1c:	430b      	orrs	r3, r1
     f1e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f20:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     f22:	e036      	b.n	f92 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f24:	4a1c      	ldr	r2, [pc, #112]	; (f98 <system_clock_source_enable+0xa0>)
     f26:	8a11      	ldrh	r1, [r2, #16]
     f28:	2302      	movs	r3, #2
     f2a:	430b      	orrs	r3, r1
     f2c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f2e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     f30:	e02f      	b.n	f92 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f32:	4a19      	ldr	r2, [pc, #100]	; (f98 <system_clock_source_enable+0xa0>)
     f34:	8a91      	ldrh	r1, [r2, #20]
     f36:	2302      	movs	r3, #2
     f38:	430b      	orrs	r3, r1
     f3a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f3c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     f3e:	e028      	b.n	f92 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f40:	4916      	ldr	r1, [pc, #88]	; (f9c <system_clock_source_enable+0xa4>)
     f42:	680b      	ldr	r3, [r1, #0]
     f44:	2202      	movs	r2, #2
     f46:	4313      	orrs	r3, r2
     f48:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f4a:	4b13      	ldr	r3, [pc, #76]	; (f98 <system_clock_source_enable+0xa0>)
     f4c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f4e:	1c19      	adds	r1, r3, #0
     f50:	320e      	adds	r2, #14
     f52:	68cb      	ldr	r3, [r1, #12]
     f54:	421a      	tst	r2, r3
     f56:	d0fc      	beq.n	f52 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f58:	4a10      	ldr	r2, [pc, #64]	; (f9c <system_clock_source_enable+0xa4>)
     f5a:	6891      	ldr	r1, [r2, #8]
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <system_clock_source_enable+0xa0>)
     f5e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f60:	6852      	ldr	r2, [r2, #4]
     f62:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     f64:	2200      	movs	r2, #0
     f66:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f68:	1c19      	adds	r1, r3, #0
     f6a:	3210      	adds	r2, #16
     f6c:	68cb      	ldr	r3, [r1, #12]
     f6e:	421a      	tst	r2, r3
     f70:	d0fc      	beq.n	f6c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f72:	4b0a      	ldr	r3, [pc, #40]	; (f9c <system_clock_source_enable+0xa4>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	b29b      	uxth	r3, r3
     f78:	4a07      	ldr	r2, [pc, #28]	; (f98 <system_clock_source_enable+0xa0>)
     f7a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f7c:	2000      	movs	r0, #0
     f7e:	e008      	b.n	f92 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f80:	4905      	ldr	r1, [pc, #20]	; (f98 <system_clock_source_enable+0xa0>)
     f82:	2244      	movs	r2, #68	; 0x44
     f84:	5c88      	ldrb	r0, [r1, r2]
     f86:	2302      	movs	r3, #2
     f88:	4303      	orrs	r3, r0
     f8a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f8c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     f8e:	e000      	b.n	f92 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     f90:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     f92:	4770      	bx	lr
     f94:	000035d8 	.word	0x000035d8
     f98:	40000800 	.word	0x40000800
     f9c:	20000134 	.word	0x20000134

00000fa0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     fa0:	b530      	push	{r4, r5, lr}
     fa2:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fa4:	22c2      	movs	r2, #194	; 0xc2
     fa6:	00d2      	lsls	r2, r2, #3
     fa8:	4b2f      	ldr	r3, [pc, #188]	; (1068 <system_clock_init+0xc8>)
     faa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     fac:	492f      	ldr	r1, [pc, #188]	; (106c <system_clock_init+0xcc>)
     fae:	684b      	ldr	r3, [r1, #4]
     fb0:	221e      	movs	r2, #30
     fb2:	4393      	bics	r3, r2
     fb4:	3a1a      	subs	r2, #26
     fb6:	4313      	orrs	r3, r2
     fb8:	604b      	str	r3, [r1, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fba:	3a03      	subs	r2, #3
     fbc:	ab01      	add	r3, sp, #4
     fbe:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fc0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fc2:	4d2b      	ldr	r5, [pc, #172]	; (1070 <system_clock_init+0xd0>)
     fc4:	b2e0      	uxtb	r0, r4
     fc6:	a901      	add	r1, sp, #4
     fc8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fca:	3401      	adds	r4, #1
     fcc:	2c25      	cmp	r4, #37	; 0x25
     fce:	d1f9      	bne.n	fc4 <system_clock_init+0x24>
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fd0:	ab05      	add	r3, sp, #20
     fd2:	2200      	movs	r2, #0
     fd4:	2100      	movs	r1, #0
     fd6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     fd8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     fda:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     fdc:	3120      	adds	r1, #32
     fde:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     fe0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fe2:	4b24      	ldr	r3, [pc, #144]	; (1074 <system_clock_init+0xd4>)
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     fe8:	2b3f      	cmp	r3, #63	; 0x3f
     fea:	d100      	bne.n	fee <system_clock_init+0x4e>
		coarse = 0x1f;
     fec:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
     fee:	a805      	add	r0, sp, #20
     ff0:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ff2:	2307      	movs	r3, #7
     ff4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
     ff6:	3303      	adds	r3, #3
     ff8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
     ffa:	4b1f      	ldr	r3, [pc, #124]	; (1078 <system_clock_init+0xd8>)
     ffc:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
     ffe:	3bff      	subs	r3, #255	; 0xff
    1000:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    1002:	4b1e      	ldr	r3, [pc, #120]	; (107c <system_clock_init+0xdc>)
    1004:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1006:	4b1e      	ldr	r3, [pc, #120]	; (1080 <system_clock_init+0xe0>)
    1008:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    100a:	a804      	add	r0, sp, #16
    100c:	2300      	movs	r3, #0
    100e:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
    1010:	2201      	movs	r2, #1
    1012:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1014:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1016:	4b1b      	ldr	r3, [pc, #108]	; (1084 <system_clock_init+0xe4>)
    1018:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    101a:	2006      	movs	r0, #6
    101c:	4c1a      	ldr	r4, [pc, #104]	; (1088 <system_clock_init+0xe8>)
    101e:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1020:	4b1a      	ldr	r3, [pc, #104]	; (108c <system_clock_init+0xec>)
    1022:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1024:	2007      	movs	r0, #7
    1026:	47a0      	blx	r4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1028:	490f      	ldr	r1, [pc, #60]	; (1068 <system_clock_init+0xc8>)
    102a:	2210      	movs	r2, #16
    102c:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    102e:	421a      	tst	r2, r3
    1030:	d0fc      	beq.n	102c <system_clock_init+0x8c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1032:	4a0d      	ldr	r2, [pc, #52]	; (1068 <system_clock_init+0xc8>)
    1034:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1036:	2380      	movs	r3, #128	; 0x80
    1038:	430b      	orrs	r3, r1
    103a:	8493      	strh	r3, [r2, #36]	; 0x24
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    103c:	4a14      	ldr	r2, [pc, #80]	; (1090 <system_clock_init+0xf0>)
    103e:	2300      	movs	r3, #0
    1040:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1042:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1044:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1046:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1048:	a901      	add	r1, sp, #4
    104a:	2201      	movs	r2, #1
    104c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    104e:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1050:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1052:	3307      	adds	r3, #7
    1054:	700b      	strb	r3, [r1, #0]
    1056:	720a      	strb	r2, [r1, #8]
    1058:	2000      	movs	r0, #0
    105a:	4b0e      	ldr	r3, [pc, #56]	; (1094 <system_clock_init+0xf4>)
    105c:	4798      	blx	r3
    105e:	2000      	movs	r0, #0
    1060:	4b0d      	ldr	r3, [pc, #52]	; (1098 <system_clock_init+0xf8>)
    1062:	4798      	blx	r3
#endif
}
    1064:	b00b      	add	sp, #44	; 0x2c
    1066:	bd30      	pop	{r4, r5, pc}
    1068:	40000800 	.word	0x40000800
    106c:	41004000 	.word	0x41004000
    1070:	00001249 	.word	0x00001249
    1074:	00806024 	.word	0x00806024
    1078:	000001ff 	.word	0x000001ff
    107c:	ffffbb80 	.word	0xffffbb80
    1080:	00000e75 	.word	0x00000e75
    1084:	00000e39 	.word	0x00000e39
    1088:	00000ef9 	.word	0x00000ef9
    108c:	0000109d 	.word	0x0000109d
    1090:	40000400 	.word	0x40000400
    1094:	000010c1 	.word	0x000010c1
    1098:	00001179 	.word	0x00001179

0000109c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    109c:	4a06      	ldr	r2, [pc, #24]	; (10b8 <system_gclk_init+0x1c>)
    109e:	6991      	ldr	r1, [r2, #24]
    10a0:	2308      	movs	r3, #8
    10a2:	430b      	orrs	r3, r1
    10a4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10a6:	2201      	movs	r2, #1
    10a8:	4b04      	ldr	r3, [pc, #16]	; (10bc <system_gclk_init+0x20>)
    10aa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10ac:	1c19      	adds	r1, r3, #0
    10ae:	780b      	ldrb	r3, [r1, #0]
    10b0:	4213      	tst	r3, r2
    10b2:	d1fc      	bne.n	10ae <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10b4:	4770      	bx	lr
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	40000400 	.word	0x40000400
    10bc:	40000c00 	.word	0x40000c00

000010c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10c0:	b570      	push	{r4, r5, r6, lr}
    10c2:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10c4:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10c6:	780d      	ldrb	r5, [r1, #0]
    10c8:	022d      	lsls	r5, r5, #8
    10ca:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10cc:	784b      	ldrb	r3, [r1, #1]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d002      	beq.n	10d8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	02db      	lsls	r3, r3, #11
    10d6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10d8:	7a4b      	ldrb	r3, [r1, #9]
    10da:	2b00      	cmp	r3, #0
    10dc:	d002      	beq.n	10e4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    10de:	2380      	movs	r3, #128	; 0x80
    10e0:	031b      	lsls	r3, r3, #12
    10e2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    10e4:	6848      	ldr	r0, [r1, #4]
    10e6:	2801      	cmp	r0, #1
    10e8:	d918      	bls.n	111c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    10ea:	1e43      	subs	r3, r0, #1
    10ec:	4218      	tst	r0, r3
    10ee:	d110      	bne.n	1112 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    10f0:	2802      	cmp	r0, #2
    10f2:	d906      	bls.n	1102 <system_gclk_gen_set_config+0x42>
    10f4:	2302      	movs	r3, #2
    10f6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    10f8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    10fa:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    10fc:	4298      	cmp	r0, r3
    10fe:	d8fb      	bhi.n	10f8 <system_gclk_gen_set_config+0x38>
    1100:	e000      	b.n	1104 <system_gclk_gen_set_config+0x44>
    1102:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1104:	0212      	lsls	r2, r2, #8
    1106:	4332      	orrs	r2, r6
    1108:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    110a:	2380      	movs	r3, #128	; 0x80
    110c:	035b      	lsls	r3, r3, #13
    110e:	431d      	orrs	r5, r3
    1110:	e004      	b.n	111c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1112:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1114:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1116:	2380      	movs	r3, #128	; 0x80
    1118:	029b      	lsls	r3, r3, #10
    111a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    111c:	7a0b      	ldrb	r3, [r1, #8]
    111e:	2b00      	cmp	r3, #0
    1120:	d002      	beq.n	1128 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1122:	2380      	movs	r3, #128	; 0x80
    1124:	039b      	lsls	r3, r3, #14
    1126:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1128:	4a0f      	ldr	r2, [pc, #60]	; (1168 <system_gclk_gen_set_config+0xa8>)
    112a:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    112c:	b25b      	sxtb	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	dbfb      	blt.n	112a <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1132:	4b0e      	ldr	r3, [pc, #56]	; (116c <system_gclk_gen_set_config+0xac>)
    1134:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1136:	4b0e      	ldr	r3, [pc, #56]	; (1170 <system_gclk_gen_set_config+0xb0>)
    1138:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    113a:	4a0b      	ldr	r2, [pc, #44]	; (1168 <system_gclk_gen_set_config+0xa8>)
    113c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    113e:	b25b      	sxtb	r3, r3
    1140:	2b00      	cmp	r3, #0
    1142:	dbfb      	blt.n	113c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1144:	4b08      	ldr	r3, [pc, #32]	; (1168 <system_gclk_gen_set_config+0xa8>)
    1146:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1148:	1c1a      	adds	r2, r3, #0
    114a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    114c:	b25b      	sxtb	r3, r3
    114e:	2b00      	cmp	r3, #0
    1150:	dbfb      	blt.n	114a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1152:	4a05      	ldr	r2, [pc, #20]	; (1168 <system_gclk_gen_set_config+0xa8>)
    1154:	6851      	ldr	r1, [r2, #4]
    1156:	2380      	movs	r3, #128	; 0x80
    1158:	025b      	lsls	r3, r3, #9
    115a:	400b      	ands	r3, r1
    115c:	431d      	orrs	r5, r3
    115e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1160:	4b04      	ldr	r3, [pc, #16]	; (1174 <system_gclk_gen_set_config+0xb4>)
    1162:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1164:	bd70      	pop	{r4, r5, r6, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	40000c00 	.word	0x40000c00
    116c:	00000b89 	.word	0x00000b89
    1170:	40000c08 	.word	0x40000c08
    1174:	00000bc9 	.word	0x00000bc9

00001178 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1178:	b510      	push	{r4, lr}
    117a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    117c:	4a0b      	ldr	r2, [pc, #44]	; (11ac <system_gclk_gen_enable+0x34>)
    117e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1180:	b25b      	sxtb	r3, r3
    1182:	2b00      	cmp	r3, #0
    1184:	dbfb      	blt.n	117e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1186:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <system_gclk_gen_enable+0x38>)
    1188:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <system_gclk_gen_enable+0x3c>)
    118c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    118e:	4a07      	ldr	r2, [pc, #28]	; (11ac <system_gclk_gen_enable+0x34>)
    1190:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1192:	b25b      	sxtb	r3, r3
    1194:	2b00      	cmp	r3, #0
    1196:	dbfb      	blt.n	1190 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1198:	4a04      	ldr	r2, [pc, #16]	; (11ac <system_gclk_gen_enable+0x34>)
    119a:	6853      	ldr	r3, [r2, #4]
    119c:	2180      	movs	r1, #128	; 0x80
    119e:	0249      	lsls	r1, r1, #9
    11a0:	430b      	orrs	r3, r1
    11a2:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11a4:	4b04      	ldr	r3, [pc, #16]	; (11b8 <system_gclk_gen_enable+0x40>)
    11a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11a8:	bd10      	pop	{r4, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	40000c00 	.word	0x40000c00
    11b0:	00000b89 	.word	0x00000b89
    11b4:	40000c04 	.word	0x40000c04
    11b8:	00000bc9 	.word	0x00000bc9

000011bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    11bc:	b510      	push	{r4, lr}
    11be:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <system_gclk_chan_enable+0x20>)
    11c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11c4:	4b06      	ldr	r3, [pc, #24]	; (11e0 <system_gclk_chan_enable+0x24>)
    11c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    11c8:	4a06      	ldr	r2, [pc, #24]	; (11e4 <system_gclk_chan_enable+0x28>)
    11ca:	8851      	ldrh	r1, [r2, #2]
    11cc:	2380      	movs	r3, #128	; 0x80
    11ce:	01db      	lsls	r3, r3, #7
    11d0:	430b      	orrs	r3, r1
    11d2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11d4:	4b04      	ldr	r3, [pc, #16]	; (11e8 <system_gclk_chan_enable+0x2c>)
    11d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000b89 	.word	0x00000b89
    11e0:	40000c02 	.word	0x40000c02
    11e4:	40000c00 	.word	0x40000c00
    11e8:	00000bc9 	.word	0x00000bc9

000011ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    11ec:	b510      	push	{r4, lr}
    11ee:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11f0:	4b0f      	ldr	r3, [pc, #60]	; (1230 <system_gclk_chan_disable+0x44>)
    11f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11f4:	4b0f      	ldr	r3, [pc, #60]	; (1234 <system_gclk_chan_disable+0x48>)
    11f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11f8:	4b0f      	ldr	r3, [pc, #60]	; (1238 <system_gclk_chan_disable+0x4c>)
    11fa:	885a      	ldrh	r2, [r3, #2]
    11fc:	0512      	lsls	r2, r2, #20
    11fe:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1200:	8859      	ldrh	r1, [r3, #2]
    1202:	4a0e      	ldr	r2, [pc, #56]	; (123c <system_gclk_chan_disable+0x50>)
    1204:	400a      	ands	r2, r1
    1206:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1208:	8859      	ldrh	r1, [r3, #2]
    120a:	4a0d      	ldr	r2, [pc, #52]	; (1240 <system_gclk_chan_disable+0x54>)
    120c:	400a      	ands	r2, r1
    120e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1210:	1c19      	adds	r1, r3, #0
    1212:	2280      	movs	r2, #128	; 0x80
    1214:	01d2      	lsls	r2, r2, #7
    1216:	884b      	ldrh	r3, [r1, #2]
    1218:	4213      	tst	r3, r2
    121a:	d1fc      	bne.n	1216 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    121c:	4906      	ldr	r1, [pc, #24]	; (1238 <system_gclk_chan_disable+0x4c>)
    121e:	0202      	lsls	r2, r0, #8
    1220:	8848      	ldrh	r0, [r1, #2]
    1222:	4b06      	ldr	r3, [pc, #24]	; (123c <system_gclk_chan_disable+0x50>)
    1224:	4003      	ands	r3, r0
    1226:	4313      	orrs	r3, r2
    1228:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    122a:	4b06      	ldr	r3, [pc, #24]	; (1244 <system_gclk_chan_disable+0x58>)
    122c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    122e:	bd10      	pop	{r4, pc}
    1230:	00000b89 	.word	0x00000b89
    1234:	40000c02 	.word	0x40000c02
    1238:	40000c00 	.word	0x40000c00
    123c:	fffff0ff 	.word	0xfffff0ff
    1240:	ffffbfff 	.word	0xffffbfff
    1244:	00000bc9 	.word	0x00000bc9

00001248 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1248:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    124a:	780c      	ldrb	r4, [r1, #0]
    124c:	0224      	lsls	r4, r4, #8
    124e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1250:	4b02      	ldr	r3, [pc, #8]	; (125c <system_gclk_chan_set_config+0x14>)
    1252:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1254:	b2a4      	uxth	r4, r4
    1256:	4b02      	ldr	r3, [pc, #8]	; (1260 <system_gclk_chan_set_config+0x18>)
    1258:	805c      	strh	r4, [r3, #2]
}
    125a:	bd10      	pop	{r4, pc}
    125c:	000011ed 	.word	0x000011ed
    1260:	40000c00 	.word	0x40000c00

00001264 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1264:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1266:	78d3      	ldrb	r3, [r2, #3]
    1268:	2b00      	cmp	r3, #0
    126a:	d11e      	bne.n	12aa <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    126c:	7814      	ldrb	r4, [r2, #0]
    126e:	2c80      	cmp	r4, #128	; 0x80
    1270:	d004      	beq.n	127c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1272:	0624      	lsls	r4, r4, #24
    1274:	2380      	movs	r3, #128	; 0x80
    1276:	025b      	lsls	r3, r3, #9
    1278:	431c      	orrs	r4, r3
    127a:	e000      	b.n	127e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    127c:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    127e:	7853      	ldrb	r3, [r2, #1]
    1280:	2502      	movs	r5, #2
    1282:	43ab      	bics	r3, r5
    1284:	d10a      	bne.n	129c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1286:	7893      	ldrb	r3, [r2, #2]
    1288:	2b00      	cmp	r3, #0
    128a:	d103      	bne.n	1294 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    128c:	2380      	movs	r3, #128	; 0x80
    128e:	029b      	lsls	r3, r3, #10
    1290:	431c      	orrs	r4, r3
    1292:	e002      	b.n	129a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1294:	23c0      	movs	r3, #192	; 0xc0
    1296:	02db      	lsls	r3, r3, #11
    1298:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    129a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    129c:	7853      	ldrb	r3, [r2, #1]
    129e:	3b01      	subs	r3, #1
    12a0:	2b01      	cmp	r3, #1
    12a2:	d812      	bhi.n	12ca <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12a4:	4b18      	ldr	r3, [pc, #96]	; (1308 <_system_pinmux_config+0xa4>)
    12a6:	401c      	ands	r4, r3
    12a8:	e00f      	b.n	12ca <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    12aa:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12ac:	040b      	lsls	r3, r1, #16
    12ae:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12b0:	24a0      	movs	r4, #160	; 0xa0
    12b2:	05e4      	lsls	r4, r4, #23
    12b4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12b6:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12b8:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12ba:	24d0      	movs	r4, #208	; 0xd0
    12bc:	0624      	lsls	r4, r4, #24
    12be:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12c0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    12c2:	78d3      	ldrb	r3, [r2, #3]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d018      	beq.n	12fa <_system_pinmux_config+0x96>
    12c8:	e01c      	b.n	1304 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12ca:	040b      	lsls	r3, r1, #16
    12cc:	0c1b      	lsrs	r3, r3, #16
    12ce:	25a0      	movs	r5, #160	; 0xa0
    12d0:	05ed      	lsls	r5, r5, #23
    12d2:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12d4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12d6:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12d8:	0c0b      	lsrs	r3, r1, #16
    12da:	25d0      	movs	r5, #208	; 0xd0
    12dc:	062d      	lsls	r5, r5, #24
    12de:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12e0:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12e2:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    12e4:	78d3      	ldrb	r3, [r2, #3]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d10c      	bne.n	1304 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    12ea:	0363      	lsls	r3, r4, #13
    12ec:	d505      	bpl.n	12fa <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    12ee:	7893      	ldrb	r3, [r2, #2]
    12f0:	2b01      	cmp	r3, #1
    12f2:	d101      	bne.n	12f8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    12f4:	6181      	str	r1, [r0, #24]
    12f6:	e000      	b.n	12fa <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    12f8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12fa:	7853      	ldrb	r3, [r2, #1]
    12fc:	3b01      	subs	r3, #1
    12fe:	2b01      	cmp	r3, #1
    1300:	d800      	bhi.n	1304 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1302:	6081      	str	r1, [r0, #8]
		}
	}
}
    1304:	bd30      	pop	{r4, r5, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	fffbffff 	.word	0xfffbffff

0000130c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    130c:	b508      	push	{r3, lr}
    130e:	1c03      	adds	r3, r0, #0
    1310:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1312:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1314:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1316:	2900      	cmp	r1, #0
    1318:	d104      	bne.n	1324 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    131a:	0958      	lsrs	r0, r3, #5
    131c:	01c0      	lsls	r0, r0, #7
    131e:	4905      	ldr	r1, [pc, #20]	; (1334 <system_pinmux_pin_set_config+0x28>)
    1320:	468c      	mov	ip, r1
    1322:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1324:	211f      	movs	r1, #31
    1326:	400b      	ands	r3, r1
    1328:	391e      	subs	r1, #30
    132a:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    132c:	4b02      	ldr	r3, [pc, #8]	; (1338 <system_pinmux_pin_set_config+0x2c>)
    132e:	4798      	blx	r3
}
    1330:	bd08      	pop	{r3, pc}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	41004400 	.word	0x41004400
    1338:	00001265 	.word	0x00001265

0000133c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    133c:	4770      	bx	lr
    133e:	46c0      	nop			; (mov r8, r8)

00001340 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1340:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1342:	4b05      	ldr	r3, [pc, #20]	; (1358 <system_init+0x18>)
    1344:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1346:	4b05      	ldr	r3, [pc, #20]	; (135c <system_init+0x1c>)
    1348:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    134a:	4b05      	ldr	r3, [pc, #20]	; (1360 <system_init+0x20>)
    134c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <system_init+0x24>)
    1350:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <system_init+0x28>)
    1354:	4798      	blx	r3
}
    1356:	bd08      	pop	{r3, pc}
    1358:	00000fa1 	.word	0x00000fa1
    135c:	00000bf9 	.word	0x00000bf9
    1360:	0000133d 	.word	0x0000133d
    1364:	00000d1d 	.word	0x00000d1d
    1368:	0000133d 	.word	0x0000133d

0000136c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    136c:	b510      	push	{r4, lr}
    136e:	b082      	sub	sp, #8
    1370:	1c04      	adds	r4, r0, #0
	enum sleepmgr_mode sleep_mode[] = {
    1372:	a801      	add	r0, sp, #4
    1374:	4923      	ldr	r1, [pc, #140]	; (1404 <udd_sleep_mode+0x98>)
    1376:	2204      	movs	r2, #4
    1378:	4b23      	ldr	r3, [pc, #140]	; (1408 <udd_sleep_mode+0x9c>)
    137a:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    137c:	4b23      	ldr	r3, [pc, #140]	; (140c <udd_sleep_mode+0xa0>)
    137e:	781b      	ldrb	r3, [r3, #0]
    1380:	42a3      	cmp	r3, r4
    1382:	d03d      	beq.n	1400 <udd_sleep_mode+0x94>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1384:	2c00      	cmp	r4, #0
    1386:	d01a      	beq.n	13be <udd_sleep_mode+0x52>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1388:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    138a:	5d1a      	ldrb	r2, [r3, r4]
    138c:	4b20      	ldr	r3, [pc, #128]	; (1410 <udd_sleep_mode+0xa4>)
    138e:	5c9b      	ldrb	r3, [r3, r2]
    1390:	2bff      	cmp	r3, #255	; 0xff
    1392:	d100      	bne.n	1396 <udd_sleep_mode+0x2a>
    1394:	e7fe      	b.n	1394 <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1396:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    139a:	b672      	cpsid	i
    139c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    13a0:	2000      	movs	r0, #0
    13a2:	491c      	ldr	r1, [pc, #112]	; (1414 <udd_sleep_mode+0xa8>)
    13a4:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    13a6:	481a      	ldr	r0, [pc, #104]	; (1410 <udd_sleep_mode+0xa4>)
    13a8:	5c81      	ldrb	r1, [r0, r2]
    13aa:	3101      	adds	r1, #1
    13ac:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13ae:	2b00      	cmp	r3, #0
    13b0:	d105      	bne.n	13be <udd_sleep_mode+0x52>
		cpu_irq_enable();
    13b2:	2201      	movs	r2, #1
    13b4:	4b17      	ldr	r3, [pc, #92]	; (1414 <udd_sleep_mode+0xa8>)
    13b6:	701a      	strb	r2, [r3, #0]
    13b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    13bc:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    13be:	4b13      	ldr	r3, [pc, #76]	; (140c <udd_sleep_mode+0xa0>)
    13c0:	781b      	ldrb	r3, [r3, #0]
    13c2:	2b00      	cmp	r3, #0
    13c4:	d01a      	beq.n	13fc <udd_sleep_mode+0x90>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    13c6:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    13c8:	5cd2      	ldrb	r2, [r2, r3]
    13ca:	4b11      	ldr	r3, [pc, #68]	; (1410 <udd_sleep_mode+0xa4>)
    13cc:	5c9b      	ldrb	r3, [r3, r2]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d100      	bne.n	13d4 <udd_sleep_mode+0x68>
    13d2:	e7fe      	b.n	13d2 <udd_sleep_mode+0x66>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13d4:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    13d8:	b672      	cpsid	i
    13da:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    13de:	2000      	movs	r0, #0
    13e0:	490c      	ldr	r1, [pc, #48]	; (1414 <udd_sleep_mode+0xa8>)
    13e2:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    13e4:	480a      	ldr	r0, [pc, #40]	; (1410 <udd_sleep_mode+0xa4>)
    13e6:	5c81      	ldrb	r1, [r0, r2]
    13e8:	3901      	subs	r1, #1
    13ea:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    13ec:	2b00      	cmp	r3, #0
    13ee:	d105      	bne.n	13fc <udd_sleep_mode+0x90>
		cpu_irq_enable();
    13f0:	2201      	movs	r2, #1
    13f2:	4b08      	ldr	r3, [pc, #32]	; (1414 <udd_sleep_mode+0xa8>)
    13f4:	701a      	strb	r2, [r3, #0]
    13f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    13fa:	b662      	cpsie	i
	}
	udd_state = new_state;
    13fc:	4b03      	ldr	r3, [pc, #12]	; (140c <udd_sleep_mode+0xa0>)
    13fe:	701c      	strb	r4, [r3, #0]
}
    1400:	b002      	add	sp, #8
    1402:	bd10      	pop	{r4, pc}
    1404:	000035fc 	.word	0x000035fc
    1408:	000035b5 	.word	0x000035b5
    140c:	2000017c 	.word	0x2000017c
    1410:	200001a0 	.word	0x200001a0
    1414:	200000d8 	.word	0x200000d8

00001418 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1418:	230f      	movs	r3, #15
    141a:	4003      	ands	r3, r0
    141c:	005b      	lsls	r3, r3, #1
    141e:	09c0      	lsrs	r0, r0, #7
    1420:	1818      	adds	r0, r3, r0
    1422:	3802      	subs	r0, #2
    1424:	0083      	lsls	r3, r0, #2
    1426:	1818      	adds	r0, r3, r0
    1428:	0080      	lsls	r0, r0, #2
    142a:	4b01      	ldr	r3, [pc, #4]	; (1430 <udd_ep_get_job+0x18>)
    142c:	1818      	adds	r0, r3, r0
}
    142e:	4770      	bx	lr
    1430:	20000150 	.word	0x20000150

00001434 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1434:	b5f0      	push	{r4, r5, r6, r7, lr}
    1436:	4657      	mov	r7, sl
    1438:	464e      	mov	r6, r9
    143a:	4645      	mov	r5, r8
    143c:	b4e0      	push	{r5, r6, r7}
    143e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1440:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1442:	b273      	sxtb	r3, r6
    1444:	2b00      	cmp	r3, #0
    1446:	da51      	bge.n	14ec <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    1448:	1c30      	adds	r0, r6, #0
    144a:	4b5d      	ldr	r3, [pc, #372]	; (15c0 <udd_ep_transfer_process+0x18c>)
    144c:	4798      	blx	r3
    144e:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    1450:	230f      	movs	r3, #15
    1452:	4033      	ands	r3, r6
    1454:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
    1456:	8a03      	ldrh	r3, [r0, #16]
    1458:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
    145a:	464b      	mov	r3, r9
    145c:	885f      	ldrh	r7, [r3, #2]
    145e:	68c3      	ldr	r3, [r0, #12]
    1460:	469c      	mov	ip, r3
    1462:	4467      	add	r7, ip
    1464:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1466:	6885      	ldr	r5, [r0, #8]
    1468:	42af      	cmp	r7, r5
    146a:	d024      	beq.n	14b6 <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    146c:	1bed      	subs	r5, r5, r7
    146e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1470:	4b54      	ldr	r3, [pc, #336]	; (15c4 <udd_ep_transfer_process+0x190>)
    1472:	429d      	cmp	r5, r3
    1474:	d906      	bls.n	1484 <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1476:	1c1d      	adds	r5, r3, #0
    1478:	1c18      	adds	r0, r3, #0
    147a:	4651      	mov	r1, sl
    147c:	4b52      	ldr	r3, [pc, #328]	; (15c8 <udd_ep_transfer_process+0x194>)
    147e:	4798      	blx	r3
    1480:	1a6d      	subs	r5, r5, r1
    1482:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1484:	7ca3      	ldrb	r3, [r4, #18]
    1486:	2200      	movs	r2, #0
    1488:	079b      	lsls	r3, r3, #30
    148a:	d506      	bpl.n	149a <udd_ep_transfer_process+0x66>
    148c:	1c28      	adds	r0, r5, #0
    148e:	4651      	mov	r1, sl
    1490:	4b4e      	ldr	r3, [pc, #312]	; (15cc <udd_ep_transfer_process+0x198>)
    1492:	4798      	blx	r3
    1494:	b289      	uxth	r1, r1
    1496:	424a      	negs	r2, r1
    1498:	414a      	adcs	r2, r1
    149a:	0051      	lsls	r1, r2, #1
    149c:	7ca3      	ldrb	r3, [r4, #18]
    149e:	2202      	movs	r2, #2
    14a0:	4393      	bics	r3, r2
    14a2:	4319      	orrs	r1, r3
    14a4:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    14a6:	6862      	ldr	r2, [r4, #4]
    14a8:	19d2      	adds	r2, r2, r7
    14aa:	4849      	ldr	r0, [pc, #292]	; (15d0 <udd_ep_transfer_process+0x19c>)
    14ac:	4641      	mov	r1, r8
    14ae:	1c2b      	adds	r3, r5, #0
    14b0:	4c48      	ldr	r4, [pc, #288]	; (15d4 <udd_ep_transfer_process+0x1a0>)
    14b2:	47a0      	blx	r4
    14b4:	e07e      	b.n	15b4 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    14b6:	7c83      	ldrb	r3, [r0, #18]
    14b8:	079b      	lsls	r3, r3, #30
    14ba:	d50b      	bpl.n	14d4 <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
    14bc:	7c83      	ldrb	r3, [r0, #18]
    14be:	2202      	movs	r2, #2
    14c0:	4393      	bics	r3, r2
    14c2:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    14c4:	6842      	ldr	r2, [r0, #4]
    14c6:	19d2      	adds	r2, r2, r7
    14c8:	4841      	ldr	r0, [pc, #260]	; (15d0 <udd_ep_transfer_process+0x19c>)
    14ca:	4641      	mov	r1, r8
    14cc:	2300      	movs	r3, #0
    14ce:	4c41      	ldr	r4, [pc, #260]	; (15d4 <udd_ep_transfer_process+0x1a0>)
    14d0:	47a0      	blx	r4
    14d2:	e06f      	b.n	15b4 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    14d4:	7c83      	ldrb	r3, [r0, #18]
    14d6:	2201      	movs	r2, #1
    14d8:	4393      	bics	r3, r2
    14da:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    14dc:	6803      	ldr	r3, [r0, #0]
    14de:	2b00      	cmp	r3, #0
    14e0:	d068      	beq.n	15b4 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    14e2:	2000      	movs	r0, #0
    14e4:	1c39      	adds	r1, r7, #0
    14e6:	1c32      	adds	r2, r6, #0
    14e8:	4798      	blx	r3
    14ea:	e063      	b.n	15b4 <udd_ep_transfer_process+0x180>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    14ec:	1c30      	adds	r0, r6, #0
    14ee:	4b34      	ldr	r3, [pc, #208]	; (15c0 <udd_ep_transfer_process+0x18c>)
    14f0:	4798      	blx	r3
    14f2:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    14f4:	270f      	movs	r7, #15
    14f6:	4037      	ands	r7, r6
    14f8:	46ba      	mov	sl, r7

	ep_size = ptr_job->ep_size;
    14fa:	8a03      	ldrh	r3, [r0, #16]
    14fc:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    14fe:	464b      	mov	r3, r9
    1500:	881f      	ldrh	r7, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    1502:	7c83      	ldrb	r3, [r0, #18]
    1504:	075b      	lsls	r3, r3, #29
    1506:	d511      	bpl.n	152c <udd_ep_transfer_process+0xf8>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1508:	6843      	ldr	r3, [r0, #4]
    150a:	68c2      	ldr	r2, [r0, #12]
    150c:	4694      	mov	ip, r2
    150e:	4463      	add	r3, ip
    1510:	1c1d      	adds	r5, r3, #0
    1512:	6880      	ldr	r0, [r0, #8]
    1514:	4641      	mov	r1, r8
    1516:	4b2d      	ldr	r3, [pc, #180]	; (15cc <udd_ep_transfer_process+0x198>)
    1518:	4798      	blx	r3
    151a:	1c0a      	adds	r2, r1, #0
    151c:	4653      	mov	r3, sl
    151e:	1e59      	subs	r1, r3, #1
    1520:	0189      	lsls	r1, r1, #6
    1522:	4b2d      	ldr	r3, [pc, #180]	; (15d8 <udd_ep_transfer_process+0x1a4>)
    1524:	18c9      	adds	r1, r1, r3
    1526:	1c28      	adds	r0, r5, #0
    1528:	4b2c      	ldr	r3, [pc, #176]	; (15dc <udd_ep_transfer_process+0x1a8>)
    152a:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    152c:	68e3      	ldr	r3, [r4, #12]
    152e:	18fd      	adds	r5, r7, r3
    1530:	60e5      	str	r5, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1532:	68a3      	ldr	r3, [r4, #8]
    1534:	429d      	cmp	r5, r3
    1536:	d901      	bls.n	153c <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    1538:	60e3      	str	r3, [r4, #12]
    153a:	e030      	b.n	159e <udd_ep_transfer_process+0x16a>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    153c:	464a      	mov	r2, r9
    153e:	8892      	ldrh	r2, [r2, #4]
    1540:	42ba      	cmp	r2, r7
    1542:	d12c      	bne.n	159e <udd_ep_transfer_process+0x16a>
    1544:	429d      	cmp	r5, r3
    1546:	d02a      	beq.n	159e <udd_ep_transfer_process+0x16a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1548:	1b5b      	subs	r3, r3, r5
    154a:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    154c:	4b1d      	ldr	r3, [pc, #116]	; (15c4 <udd_ep_transfer_process+0x190>)
    154e:	429e      	cmp	r6, r3
    1550:	d907      	bls.n	1562 <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1552:	1c1e      	adds	r6, r3, #0
    1554:	1c18      	adds	r0, r3, #0
    1556:	4641      	mov	r1, r8
    1558:	4b1b      	ldr	r3, [pc, #108]	; (15c8 <udd_ep_transfer_process+0x194>)
    155a:	4798      	blx	r3
    155c:	1a73      	subs	r3, r6, r1
    155e:	b29b      	uxth	r3, r3
    1560:	e005      	b.n	156e <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    1562:	1c30      	adds	r0, r6, #0
    1564:	4641      	mov	r1, r8
    1566:	4b19      	ldr	r3, [pc, #100]	; (15cc <udd_ep_transfer_process+0x198>)
    1568:	4798      	blx	r3
    156a:	1a73      	subs	r3, r6, r1
    156c:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    156e:	4598      	cmp	r8, r3
    1570:	d90e      	bls.n	1590 <udd_ep_transfer_process+0x15c>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    1572:	7ca2      	ldrb	r2, [r4, #18]
    1574:	2304      	movs	r3, #4
    1576:	4313      	orrs	r3, r2
    1578:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    157a:	4653      	mov	r3, sl
    157c:	1e5a      	subs	r2, r3, #1
    157e:	0192      	lsls	r2, r2, #6
    1580:	4b15      	ldr	r3, [pc, #84]	; (15d8 <udd_ep_transfer_process+0x1a4>)
    1582:	18d2      	adds	r2, r2, r3
    1584:	4812      	ldr	r0, [pc, #72]	; (15d0 <udd_ep_transfer_process+0x19c>)
    1586:	4651      	mov	r1, sl
    1588:	4643      	mov	r3, r8
    158a:	4c15      	ldr	r4, [pc, #84]	; (15e0 <udd_ep_transfer_process+0x1ac>)
    158c:	47a0      	blx	r4
    158e:	e011      	b.n	15b4 <udd_ep_transfer_process+0x180>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1590:	6862      	ldr	r2, [r4, #4]
    1592:	1952      	adds	r2, r2, r5
    1594:	480e      	ldr	r0, [pc, #56]	; (15d0 <udd_ep_transfer_process+0x19c>)
    1596:	4651      	mov	r1, sl
    1598:	4c11      	ldr	r4, [pc, #68]	; (15e0 <udd_ep_transfer_process+0x1ac>)
    159a:	47a0      	blx	r4
    159c:	e00a      	b.n	15b4 <udd_ep_transfer_process+0x180>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    159e:	7ca3      	ldrb	r3, [r4, #18]
    15a0:	2201      	movs	r2, #1
    15a2:	4393      	bics	r3, r2
    15a4:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    15a6:	6823      	ldr	r3, [r4, #0]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d003      	beq.n	15b4 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    15ac:	68e1      	ldr	r1, [r4, #12]
    15ae:	2000      	movs	r0, #0
    15b0:	1c32      	adds	r2, r6, #0
    15b2:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    15b4:	bc1c      	pop	{r2, r3, r4}
    15b6:	4690      	mov	r8, r2
    15b8:	4699      	mov	r9, r3
    15ba:	46a2      	mov	sl, r4
    15bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	00001419 	.word	0x00001419
    15c4:	00001fff 	.word	0x00001fff
    15c8:	00003511 	.word	0x00003511
    15cc:	00003331 	.word	0x00003331
    15d0:	20000228 	.word	0x20000228
    15d4:	00002721 	.word	0x00002721
    15d8:	200001e8 	.word	0x200001e8
    15dc:	000035b5 	.word	0x000035b5
    15e0:	00002771 	.word	0x00002771

000015e4 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    15e4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    15e6:	2205      	movs	r2, #5
    15e8:	4b05      	ldr	r3, [pc, #20]	; (1600 <udd_ctrl_stall_data+0x1c>)
    15ea:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    15ec:	4c05      	ldr	r4, [pc, #20]	; (1604 <udd_ctrl_stall_data+0x20>)
    15ee:	1c20      	adds	r0, r4, #0
    15f0:	2180      	movs	r1, #128	; 0x80
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <udd_ctrl_stall_data+0x24>)
    15f4:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    15f6:	1c20      	adds	r0, r4, #0
    15f8:	2100      	movs	r1, #0
    15fa:	4b04      	ldr	r3, [pc, #16]	; (160c <udd_ctrl_stall_data+0x28>)
    15fc:	4798      	blx	r3
}
    15fe:	bd10      	pop	{r4, pc}
    1600:	2000017b 	.word	0x2000017b
    1604:	20000228 	.word	0x20000228
    1608:	00002671 	.word	0x00002671
    160c:	00002699 	.word	0x00002699

00001610 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1610:	b570      	push	{r4, r5, r6, lr}
    1612:	1c0e      	adds	r6, r1, #0
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1614:	4c0d      	ldr	r4, [pc, #52]	; (164c <_usb_device_lpm_suspend+0x3c>)
    1616:	1c20      	adds	r0, r4, #0
    1618:	2106      	movs	r1, #6
    161a:	4d0d      	ldr	r5, [pc, #52]	; (1650 <_usb_device_lpm_suspend+0x40>)
    161c:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    161e:	1c20      	adds	r0, r4, #0
    1620:	2104      	movs	r1, #4
    1622:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1624:	1c20      	adds	r0, r4, #0
    1626:	2102      	movs	r1, #2
    1628:	4b0a      	ldr	r3, [pc, #40]	; (1654 <_usb_device_lpm_suspend+0x44>)
    162a:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    162c:	2002      	movs	r0, #2
    162e:	4b0a      	ldr	r3, [pc, #40]	; (1658 <_usb_device_lpm_suspend+0x48>)
    1630:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    1632:	6833      	ldr	r3, [r6, #0]
    1634:	2b00      	cmp	r3, #0
    1636:	d004      	beq.n	1642 <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    1638:	4b08      	ldr	r3, [pc, #32]	; (165c <_usb_device_lpm_suspend+0x4c>)
    163a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    163c:	6833      	ldr	r3, [r6, #0]
    163e:	2b00      	cmp	r3, #0
    1640:	d101      	bne.n	1646 <_usb_device_lpm_suspend+0x36>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    1642:	4b07      	ldr	r3, [pc, #28]	; (1660 <_usb_device_lpm_suspend+0x50>)
    1644:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <_usb_device_lpm_suspend+0x54>)
    1648:	4798      	blx	r3
}
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	20000228 	.word	0x20000228
    1650:	00002185 	.word	0x00002185
    1654:	00002165 	.word	0x00002165
    1658:	0000136d 	.word	0x0000136d
    165c:	000031fd 	.word	0x000031fd
    1660:	000031f1 	.word	0x000031f1
    1664:	000031e5 	.word	0x000031e5

00001668 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1668:	b538      	push	{r3, r4, r5, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    166a:	4b13      	ldr	r3, [pc, #76]	; (16b8 <_usb_on_wakeup+0x50>)
    166c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    166e:	069b      	lsls	r3, r3, #26
    1670:	d406      	bmi.n	1680 <_usb_on_wakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1672:	4911      	ldr	r1, [pc, #68]	; (16b8 <_usb_on_wakeup+0x50>)
    1674:	22d0      	movs	r2, #208	; 0xd0
    1676:	68cb      	ldr	r3, [r1, #12]
    1678:	4013      	ands	r3, r2
    167a:	2bd0      	cmp	r3, #208	; 0xd0
    167c:	d1fb      	bne.n	1676 <_usb_on_wakeup+0xe>
    167e:	e004      	b.n	168a <_usb_on_wakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1680:	490d      	ldr	r1, [pc, #52]	; (16b8 <_usb_on_wakeup+0x50>)
    1682:	2210      	movs	r2, #16
    1684:	68cb      	ldr	r3, [r1, #12]
    1686:	421a      	tst	r2, r3
    1688:	d0fc      	beq.n	1684 <_usb_on_wakeup+0x1c>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    168a:	4c0c      	ldr	r4, [pc, #48]	; (16bc <_usb_on_wakeup+0x54>)
    168c:	1c20      	adds	r0, r4, #0
    168e:	2102      	movs	r1, #2
    1690:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <_usb_on_wakeup+0x58>)
    1692:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1694:	1c20      	adds	r0, r4, #0
    1696:	2104      	movs	r1, #4
    1698:	4d0a      	ldr	r5, [pc, #40]	; (16c4 <_usb_on_wakeup+0x5c>)
    169a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    169c:	1c20      	adds	r0, r4, #0
    169e:	2106      	movs	r1, #6
    16a0:	4a09      	ldr	r2, [pc, #36]	; (16c8 <_usb_on_wakeup+0x60>)
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <_usb_on_wakeup+0x64>)
    16a4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    16a6:	1c20      	adds	r0, r4, #0
    16a8:	2106      	movs	r1, #6
    16aa:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    16ac:	2003      	movs	r0, #3
    16ae:	4b08      	ldr	r3, [pc, #32]	; (16d0 <_usb_on_wakeup+0x68>)
    16b0:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    16b2:	4b08      	ldr	r3, [pc, #32]	; (16d4 <_usb_on_wakeup+0x6c>)
    16b4:	4798      	blx	r3
#endif
}
    16b6:	bd38      	pop	{r3, r4, r5, pc}
    16b8:	40000800 	.word	0x40000800
    16bc:	20000228 	.word	0x20000228
    16c0:	00002185 	.word	0x00002185
    16c4:	00002165 	.word	0x00002165
    16c8:	00001611 	.word	0x00001611
    16cc:	00002145 	.word	0x00002145
    16d0:	0000136d 	.word	0x0000136d
    16d4:	000031a1 	.word	0x000031a1

000016d8 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    16d8:	b570      	push	{r4, r5, r6, lr}
    16da:	b082      	sub	sp, #8
    16dc:	1c04      	adds	r4, r0, #0
	// Reset USB Device Stack Core
	udc_reset();
    16de:	4b1e      	ldr	r3, [pc, #120]	; (1758 <_usb_on_bus_reset+0x80>)
    16e0:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	6822      	ldr	r2, [r4, #0]
    16e6:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    16e8:	ad01      	add	r5, sp, #4
    16ea:	1c28      	adds	r0, r5, #0
    16ec:	4b1b      	ldr	r3, [pc, #108]	; (175c <_usb_on_bus_reset+0x84>)
    16ee:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    16f0:	2600      	movs	r6, #0
    16f2:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    16f4:	1c20      	adds	r0, r4, #0
    16f6:	1c29      	adds	r1, r5, #0
    16f8:	4b19      	ldr	r3, [pc, #100]	; (1760 <_usb_on_bus_reset+0x88>)
    16fa:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    16fc:	1c20      	adds	r0, r4, #0
    16fe:	4919      	ldr	r1, [pc, #100]	; (1764 <_usb_on_bus_reset+0x8c>)
    1700:	4b19      	ldr	r3, [pc, #100]	; (1768 <_usb_on_bus_reset+0x90>)
    1702:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1704:	1c20      	adds	r0, r4, #0
    1706:	2100      	movs	r1, #0
    1708:	2202      	movs	r2, #2
    170a:	4b18      	ldr	r3, [pc, #96]	; (176c <_usb_on_bus_reset+0x94>)
    170c:	4d18      	ldr	r5, [pc, #96]	; (1770 <_usb_on_bus_reset+0x98>)
    170e:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1710:	1c20      	adds	r0, r4, #0
    1712:	2100      	movs	r1, #0
    1714:	2200      	movs	r2, #0
    1716:	4b17      	ldr	r3, [pc, #92]	; (1774 <_usb_on_bus_reset+0x9c>)
    1718:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    171a:	1c20      	adds	r0, r4, #0
    171c:	2100      	movs	r1, #0
    171e:	2201      	movs	r2, #1
    1720:	4b15      	ldr	r3, [pc, #84]	; (1778 <_usb_on_bus_reset+0xa0>)
    1722:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1724:	1c20      	adds	r0, r4, #0
    1726:	2100      	movs	r1, #0
    1728:	2202      	movs	r2, #2
    172a:	4d14      	ldr	r5, [pc, #80]	; (177c <_usb_on_bus_reset+0xa4>)
    172c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    172e:	1c20      	adds	r0, r4, #0
    1730:	2100      	movs	r1, #0
    1732:	2200      	movs	r2, #0
    1734:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1736:	1c20      	adds	r0, r4, #0
    1738:	2100      	movs	r1, #0
    173a:	2201      	movs	r2, #1
    173c:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    173e:	6822      	ldr	r2, [r4, #0]
    1740:	8911      	ldrh	r1, [r2, #8]
    1742:	4b0f      	ldr	r3, [pc, #60]	; (1780 <_usb_on_bus_reset+0xa8>)
    1744:	400b      	ands	r3, r1
    1746:	2180      	movs	r1, #128	; 0x80
    1748:	00c9      	lsls	r1, r1, #3
    174a:	430b      	orrs	r3, r1
    174c:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    174e:	4b0d      	ldr	r3, [pc, #52]	; (1784 <_usb_on_bus_reset+0xac>)
    1750:	701e      	strb	r6, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    1752:	b002      	add	sp, #8
    1754:	bd70      	pop	{r4, r5, r6, pc}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	000006a5 	.word	0x000006a5
    175c:	000023a9 	.word	0x000023a9
    1760:	000023b9 	.word	0x000023b9
    1764:	200003a8 	.word	0x200003a8
    1768:	000027bd 	.word	0x000027bd
    176c:	000018bd 	.word	0x000018bd
    1770:	000021a1 	.word	0x000021a1
    1774:	00001bd9 	.word	0x00001bd9
    1778:	000017c5 	.word	0x000017c5
    177c:	000021f1 	.word	0x000021f1
    1780:	fffff3ff 	.word	0xfffff3ff
    1784:	2000017b 	.word	0x2000017b

00001788 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    1788:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    178a:	2203      	movs	r2, #3
    178c:	4b07      	ldr	r3, [pc, #28]	; (17ac <udd_ctrl_send_zlp_in+0x24>)
    178e:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1790:	4c07      	ldr	r4, [pc, #28]	; (17b0 <udd_ctrl_send_zlp_in+0x28>)
    1792:	1c20      	adds	r0, r4, #0
    1794:	4907      	ldr	r1, [pc, #28]	; (17b4 <udd_ctrl_send_zlp_in+0x2c>)
    1796:	4b08      	ldr	r3, [pc, #32]	; (17b8 <udd_ctrl_send_zlp_in+0x30>)
    1798:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    179a:	4b08      	ldr	r3, [pc, #32]	; (17bc <udd_ctrl_send_zlp_in+0x34>)
    179c:	689a      	ldr	r2, [r3, #8]
    179e:	1c20      	adds	r0, r4, #0
    17a0:	2100      	movs	r1, #0
    17a2:	2300      	movs	r3, #0
    17a4:	4c06      	ldr	r4, [pc, #24]	; (17c0 <udd_ctrl_send_zlp_in+0x38>)
    17a6:	47a0      	blx	r4
}
    17a8:	bd10      	pop	{r4, pc}
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	2000017b 	.word	0x2000017b
    17b0:	20000228 	.word	0x20000228
    17b4:	200003a8 	.word	0x200003a8
    17b8:	000027bd 	.word	0x000027bd
    17bc:	20000390 	.word	0x20000390
    17c0:	00002721 	.word	0x00002721

000017c4 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    17c4:	b508      	push	{r3, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    17c6:	7989      	ldrb	r1, [r1, #6]
    17c8:	b24b      	sxtb	r3, r1
    17ca:	2b00      	cmp	r3, #0
    17cc:	da0c      	bge.n	17e8 <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    17ce:	4b0d      	ldr	r3, [pc, #52]	; (1804 <_usb_ep0_on_tansfer_fail+0x40>)
    17d0:	781b      	ldrb	r3, [r3, #0]
    17d2:	2b01      	cmp	r3, #1
    17d4:	d102      	bne.n	17dc <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    17d6:	4b0c      	ldr	r3, [pc, #48]	; (1808 <_usb_ep0_on_tansfer_fail+0x44>)
    17d8:	4798      	blx	r3
    17da:	e012      	b.n	1802 <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    17dc:	2b04      	cmp	r3, #4
    17de:	d110      	bne.n	1802 <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    17e0:	480a      	ldr	r0, [pc, #40]	; (180c <_usb_ep0_on_tansfer_fail+0x48>)
    17e2:	4b0b      	ldr	r3, [pc, #44]	; (1810 <_usb_ep0_on_tansfer_fail+0x4c>)
    17e4:	4798      	blx	r3
    17e6:	e00c      	b.n	1802 <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <_usb_ep0_on_tansfer_fail+0x40>)
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	2b02      	cmp	r3, #2
    17ee:	d103      	bne.n	17f8 <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    17f0:	2204      	movs	r2, #4
    17f2:	4b04      	ldr	r3, [pc, #16]	; (1804 <_usb_ep0_on_tansfer_fail+0x40>)
    17f4:	701a      	strb	r2, [r3, #0]
    17f6:	e004      	b.n	1802 <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    17f8:	2b03      	cmp	r3, #3
    17fa:	d102      	bne.n	1802 <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    17fc:	4803      	ldr	r0, [pc, #12]	; (180c <_usb_ep0_on_tansfer_fail+0x48>)
    17fe:	4b04      	ldr	r3, [pc, #16]	; (1810 <_usb_ep0_on_tansfer_fail+0x4c>)
    1800:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    1802:	bd08      	pop	{r3, pc}
    1804:	2000017b 	.word	0x2000017b
    1808:	00001789 	.word	0x00001789
    180c:	20000228 	.word	0x20000228
    1810:	00002671 	.word	0x00002671

00001814 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    1814:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1816:	4b20      	ldr	r3, [pc, #128]	; (1898 <udd_ctrl_in_sent+0x84>)
    1818:	881a      	ldrh	r2, [r3, #0]
    181a:	4b20      	ldr	r3, [pc, #128]	; (189c <udd_ctrl_in_sent+0x88>)
    181c:	899c      	ldrh	r4, [r3, #12]
    181e:	1aa4      	subs	r4, r4, r2
    1820:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    1822:	2c00      	cmp	r4, #0
    1824:	d120      	bne.n	1868 <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1826:	491e      	ldr	r1, [pc, #120]	; (18a0 <udd_ctrl_in_sent+0x8c>)
    1828:	880b      	ldrh	r3, [r1, #0]
    182a:	18d3      	adds	r3, r2, r3
    182c:	b29b      	uxth	r3, r3
    182e:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1830:	4a1a      	ldr	r2, [pc, #104]	; (189c <udd_ctrl_in_sent+0x88>)
    1832:	88d2      	ldrh	r2, [r2, #6]
    1834:	429a      	cmp	r2, r3
    1836:	d003      	beq.n	1840 <udd_ctrl_in_sent+0x2c>
    1838:	4b1a      	ldr	r3, [pc, #104]	; (18a4 <udd_ctrl_in_sent+0x90>)
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	2b00      	cmp	r3, #0
    183e:	d007      	beq.n	1850 <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1840:	2204      	movs	r2, #4
    1842:	4b19      	ldr	r3, [pc, #100]	; (18a8 <udd_ctrl_in_sent+0x94>)
    1844:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1846:	4819      	ldr	r0, [pc, #100]	; (18ac <udd_ctrl_in_sent+0x98>)
    1848:	4919      	ldr	r1, [pc, #100]	; (18b0 <udd_ctrl_in_sent+0x9c>)
    184a:	4b1a      	ldr	r3, [pc, #104]	; (18b4 <udd_ctrl_in_sent+0xa0>)
    184c:	4798      	blx	r3
			return;
    184e:	e022      	b.n	1896 <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1850:	4b12      	ldr	r3, [pc, #72]	; (189c <udd_ctrl_in_sent+0x88>)
    1852:	695b      	ldr	r3, [r3, #20]
    1854:	2b00      	cmp	r3, #0
    1856:	d00e      	beq.n	1876 <udd_ctrl_in_sent+0x62>
    1858:	4798      	blx	r3
    185a:	2800      	cmp	r0, #0
    185c:	d00b      	beq.n	1876 <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    185e:	2200      	movs	r2, #0
    1860:	4b0d      	ldr	r3, [pc, #52]	; (1898 <udd_ctrl_in_sent+0x84>)
    1862:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <udd_ctrl_in_sent+0x88>)
    1866:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1868:	2c07      	cmp	r4, #7
    186a:	d904      	bls.n	1876 <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    186c:	2200      	movs	r2, #0
    186e:	4b0d      	ldr	r3, [pc, #52]	; (18a4 <udd_ctrl_in_sent+0x90>)
    1870:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1872:	2408      	movs	r4, #8
    1874:	e002      	b.n	187c <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    1876:	2201      	movs	r2, #1
    1878:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <udd_ctrl_in_sent+0x90>)
    187a:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    187c:	4d06      	ldr	r5, [pc, #24]	; (1898 <udd_ctrl_in_sent+0x84>)
    187e:	882b      	ldrh	r3, [r5, #0]
    1880:	4a06      	ldr	r2, [pc, #24]	; (189c <udd_ctrl_in_sent+0x88>)
    1882:	6892      	ldr	r2, [r2, #8]
    1884:	18d2      	adds	r2, r2, r3
    1886:	4809      	ldr	r0, [pc, #36]	; (18ac <udd_ctrl_in_sent+0x98>)
    1888:	2100      	movs	r1, #0
    188a:	1c23      	adds	r3, r4, #0
    188c:	4e0a      	ldr	r6, [pc, #40]	; (18b8 <udd_ctrl_in_sent+0xa4>)
    188e:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    1890:	882b      	ldrh	r3, [r5, #0]
    1892:	18e4      	adds	r4, r4, r3
    1894:	802c      	strh	r4, [r5, #0]
}
    1896:	bd70      	pop	{r4, r5, r6, pc}
    1898:	20000178 	.word	0x20000178
    189c:	20000390 	.word	0x20000390
    18a0:	2000014c 	.word	0x2000014c
    18a4:	2000017a 	.word	0x2000017a
    18a8:	2000017b 	.word	0x2000017b
    18ac:	20000228 	.word	0x20000228
    18b0:	200003a8 	.word	0x200003a8
    18b4:	000027bd 	.word	0x000027bd
    18b8:	00002721 	.word	0x00002721

000018bc <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    18bc:	b510      	push	{r4, lr}
    18be:	1c0c      	adds	r4, r1, #0
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    18c0:	4b2c      	ldr	r3, [pc, #176]	; (1974 <_usb_ep0_on_setup+0xb8>)
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	2b00      	cmp	r3, #0
    18c6:	d007      	beq.n	18d8 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    18c8:	4b2b      	ldr	r3, [pc, #172]	; (1978 <_usb_ep0_on_setup+0xbc>)
    18ca:	691b      	ldr	r3, [r3, #16]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d000      	beq.n	18d2 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    18d0:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    18d2:	2200      	movs	r2, #0
    18d4:	4b27      	ldr	r3, [pc, #156]	; (1974 <_usb_ep0_on_setup+0xb8>)
    18d6:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    18d8:	8823      	ldrh	r3, [r4, #0]
    18da:	2b08      	cmp	r3, #8
    18dc:	d002      	beq.n	18e4 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    18de:	4b27      	ldr	r3, [pc, #156]	; (197c <_usb_ep0_on_setup+0xc0>)
    18e0:	4798      	blx	r3
		return;
    18e2:	e045      	b.n	1970 <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    18e4:	4a24      	ldr	r2, [pc, #144]	; (1978 <_usb_ep0_on_setup+0xbc>)
    18e6:	4b26      	ldr	r3, [pc, #152]	; (1980 <_usb_ep0_on_setup+0xc4>)
    18e8:	7819      	ldrb	r1, [r3, #0]
    18ea:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    18ec:	7859      	ldrb	r1, [r3, #1]
    18ee:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    18f0:	78d9      	ldrb	r1, [r3, #3]
    18f2:	0209      	lsls	r1, r1, #8
    18f4:	7898      	ldrb	r0, [r3, #2]
    18f6:	1841      	adds	r1, r0, r1
    18f8:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    18fa:	7959      	ldrb	r1, [r3, #5]
    18fc:	0209      	lsls	r1, r1, #8
    18fe:	7918      	ldrb	r0, [r3, #4]
    1900:	1841      	adds	r1, r0, r1
    1902:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1904:	79d9      	ldrb	r1, [r3, #7]
    1906:	0209      	lsls	r1, r1, #8
    1908:	799b      	ldrb	r3, [r3, #6]
    190a:	185b      	adds	r3, r3, r1
    190c:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    190e:	4b1d      	ldr	r3, [pc, #116]	; (1984 <_usb_ep0_on_setup+0xc8>)
    1910:	4798      	blx	r3
    1912:	2800      	cmp	r0, #0
    1914:	d102      	bne.n	191c <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    1916:	4b19      	ldr	r3, [pc, #100]	; (197c <_usb_ep0_on_setup+0xc0>)
    1918:	4798      	blx	r3
			return;
    191a:	e029      	b.n	1970 <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    191c:	4b16      	ldr	r3, [pc, #88]	; (1978 <_usb_ep0_on_setup+0xbc>)
    191e:	781b      	ldrb	r3, [r3, #0]
    1920:	2b7f      	cmp	r3, #127	; 0x7f
    1922:	d910      	bls.n	1946 <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    1924:	2300      	movs	r3, #0
    1926:	4a18      	ldr	r2, [pc, #96]	; (1988 <_usb_ep0_on_setup+0xcc>)
    1928:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    192a:	4a18      	ldr	r2, [pc, #96]	; (198c <_usb_ep0_on_setup+0xd0>)
    192c:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    192e:	2202      	movs	r2, #2
    1930:	4b10      	ldr	r3, [pc, #64]	; (1974 <_usb_ep0_on_setup+0xb8>)
    1932:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1934:	4816      	ldr	r0, [pc, #88]	; (1990 <_usb_ep0_on_setup+0xd4>)
    1936:	2100      	movs	r1, #0
    1938:	4a11      	ldr	r2, [pc, #68]	; (1980 <_usb_ep0_on_setup+0xc4>)
    193a:	2308      	movs	r3, #8
    193c:	4c15      	ldr	r4, [pc, #84]	; (1994 <_usb_ep0_on_setup+0xd8>)
    193e:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1940:	4b15      	ldr	r3, [pc, #84]	; (1998 <_usb_ep0_on_setup+0xdc>)
    1942:	4798      	blx	r3
    1944:	e014      	b.n	1970 <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    1946:	4b0c      	ldr	r3, [pc, #48]	; (1978 <_usb_ep0_on_setup+0xbc>)
    1948:	88db      	ldrh	r3, [r3, #6]
    194a:	2b00      	cmp	r3, #0
    194c:	d102      	bne.n	1954 <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    194e:	4b13      	ldr	r3, [pc, #76]	; (199c <_usb_ep0_on_setup+0xe0>)
    1950:	4798      	blx	r3
				return;
    1952:	e00d      	b.n	1970 <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    1954:	2300      	movs	r3, #0
    1956:	4a0c      	ldr	r2, [pc, #48]	; (1988 <_usb_ep0_on_setup+0xcc>)
    1958:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    195a:	4a0c      	ldr	r2, [pc, #48]	; (198c <_usb_ep0_on_setup+0xd0>)
    195c:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    195e:	2201      	movs	r2, #1
    1960:	4b04      	ldr	r3, [pc, #16]	; (1974 <_usb_ep0_on_setup+0xb8>)
    1962:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1964:	480a      	ldr	r0, [pc, #40]	; (1990 <_usb_ep0_on_setup+0xd4>)
    1966:	2100      	movs	r1, #0
    1968:	4a05      	ldr	r2, [pc, #20]	; (1980 <_usb_ep0_on_setup+0xc4>)
    196a:	2308      	movs	r3, #8
    196c:	4c09      	ldr	r4, [pc, #36]	; (1994 <_usb_ep0_on_setup+0xd8>)
    196e:	47a0      	blx	r4
			}
		}
	}
}
    1970:	bd10      	pop	{r4, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	2000017b 	.word	0x2000017b
    1978:	20000390 	.word	0x20000390
    197c:	000015e5 	.word	0x000015e5
    1980:	200003a8 	.word	0x200003a8
    1984:	00000741 	.word	0x00000741
    1988:	2000014c 	.word	0x2000014c
    198c:	20000178 	.word	0x20000178
    1990:	20000228 	.word	0x20000228
    1994:	00002771 	.word	0x00002771
    1998:	00001815 	.word	0x00001815
    199c:	00001789 	.word	0x00001789

000019a0 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    19a0:	b508      	push	{r3, lr}
	udc_sof_notify();
    19a2:	4b02      	ldr	r3, [pc, #8]	; (19ac <_usb_on_sof_notify+0xc>)
    19a4:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    19a6:	4b02      	ldr	r3, [pc, #8]	; (19b0 <_usb_on_sof_notify+0x10>)
    19a8:	4798      	blx	r3
#endif
}
    19aa:	bd08      	pop	{r3, pc}
    19ac:	00000701 	.word	0x00000701
    19b0:	000031ad 	.word	0x000031ad

000019b4 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    19b4:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    19b6:	4c07      	ldr	r4, [pc, #28]	; (19d4 <_usb_on_suspend+0x20>)
    19b8:	1c20      	adds	r0, r4, #0
    19ba:	2104      	movs	r1, #4
    19bc:	4b06      	ldr	r3, [pc, #24]	; (19d8 <_usb_on_suspend+0x24>)
    19be:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    19c0:	1c20      	adds	r0, r4, #0
    19c2:	2102      	movs	r1, #2
    19c4:	4b05      	ldr	r3, [pc, #20]	; (19dc <_usb_on_suspend+0x28>)
    19c6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    19c8:	2001      	movs	r0, #1
    19ca:	4b05      	ldr	r3, [pc, #20]	; (19e0 <_usb_on_suspend+0x2c>)
    19cc:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <_usb_on_suspend+0x30>)
    19d0:	4798      	blx	r3
#endif
}
    19d2:	bd10      	pop	{r4, pc}
    19d4:	20000228 	.word	0x20000228
    19d8:	00002185 	.word	0x00002185
    19dc:	00002165 	.word	0x00002165
    19e0:	0000136d 	.word	0x0000136d
    19e4:	00003195 	.word	0x00003195

000019e8 <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    19e8:	b510      	push	{r4, lr}
    19ea:	1c04      	adds	r4, r0, #0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    19ec:	480a      	ldr	r0, [pc, #40]	; (1a18 <udd_ep_abort+0x30>)
    19ee:	1c21      	adds	r1, r4, #0
    19f0:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <udd_ep_abort+0x34>)
    19f2:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    19f4:	1c20      	adds	r0, r4, #0
    19f6:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <udd_ep_abort+0x38>)
    19f8:	4798      	blx	r3
	if (!ptr_job->busy) {
    19fa:	7c83      	ldrb	r3, [r0, #18]
    19fc:	07db      	lsls	r3, r3, #31
    19fe:	d50a      	bpl.n	1a16 <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    1a00:	7c83      	ldrb	r3, [r0, #18]
    1a02:	2201      	movs	r2, #1
    1a04:	4393      	bics	r3, r2
    1a06:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1a08:	6803      	ldr	r3, [r0, #0]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d003      	beq.n	1a16 <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    1a0e:	68c1      	ldr	r1, [r0, #12]
    1a10:	2001      	movs	r0, #1
    1a12:	1c22      	adds	r2, r4, #0
    1a14:	4798      	blx	r3
	}
}
    1a16:	bd10      	pop	{r4, pc}
    1a18:	20000228 	.word	0x20000228
    1a1c:	0000260d 	.word	0x0000260d
    1a20:	00001419 	.word	0x00001419

00001a24 <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    1a24:	4b02      	ldr	r3, [pc, #8]	; (1a30 <udd_get_frame_number+0xc>)
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	8a18      	ldrh	r0, [r3, #16]
    1a2a:	0480      	lsls	r0, r0, #18
    1a2c:	0d40      	lsrs	r0, r0, #21
}

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    1a2e:	4770      	bx	lr
    1a30:	20000228 	.word	0x20000228

00001a34 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
    1a36:	b082      	sub	sp, #8
    1a38:	1c04      	adds	r4, r0, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    1a3a:	ad01      	add	r5, sp, #4
    1a3c:	1c28      	adds	r0, r5, #0
    1a3e:	4b0d      	ldr	r3, [pc, #52]	; (1a74 <udd_ep_free+0x40>)
    1a40:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    1a42:	1c20      	adds	r0, r4, #0
    1a44:	4b0c      	ldr	r3, [pc, #48]	; (1a78 <udd_ep_free+0x44>)
    1a46:	4798      	blx	r3

	config_ep.ep_address = ep;
    1a48:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    1a4a:	2300      	movs	r3, #0
    1a4c:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    1a4e:	4e0b      	ldr	r6, [pc, #44]	; (1a7c <udd_ep_free+0x48>)
    1a50:	1c30      	adds	r0, r6, #0
    1a52:	1c29      	adds	r1, r5, #0
    1a54:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <udd_ep_free+0x4c>)
    1a56:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1a58:	210f      	movs	r1, #15
    1a5a:	4021      	ands	r1, r4
    1a5c:	1c30      	adds	r0, r6, #0
    1a5e:	2200      	movs	r2, #0
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <udd_ep_free+0x50>)
    1a62:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1a64:	1c30      	adds	r0, r6, #0
    1a66:	1c21      	adds	r1, r4, #0
    1a68:	2200      	movs	r2, #0
    1a6a:	4b07      	ldr	r3, [pc, #28]	; (1a88 <udd_ep_free+0x54>)
    1a6c:	4798      	blx	r3
}
    1a6e:	b002      	add	sp, #8
    1a70:	bd70      	pop	{r4, r5, r6, pc}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	000023a9 	.word	0x000023a9
    1a78:	000019e9 	.word	0x000019e9
    1a7c:	20000228 	.word	0x20000228
    1a80:	000023b9 	.word	0x000023b9
    1a84:	000021c9 	.word	0x000021c9
    1a88:	000022cd 	.word	0x000022cd

00001a8c <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    1a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a8e:	b083      	sub	sp, #12
    1a90:	1c06      	adds	r6, r0, #0
    1a92:	1c0c      	adds	r4, r1, #0
    1a94:	1c15      	adds	r5, r2, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    1a96:	af01      	add	r7, sp, #4
    1a98:	1c38      	adds	r0, r7, #0
    1a9a:	4b36      	ldr	r3, [pc, #216]	; (1b74 <udd_ep_alloc+0xe8>)
    1a9c:	4798      	blx	r3

	config_ep.ep_address = ep;
    1a9e:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    1aa0:	2d08      	cmp	r5, #8
    1aa2:	d803      	bhi.n	1aac <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    1aa4:	2200      	movs	r2, #0
    1aa6:	ab01      	add	r3, sp, #4
    1aa8:	705a      	strb	r2, [r3, #1]
    1aaa:	e02e      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    1aac:	2d10      	cmp	r5, #16
    1aae:	d803      	bhi.n	1ab8 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    1ab0:	2201      	movs	r2, #1
    1ab2:	ab01      	add	r3, sp, #4
    1ab4:	705a      	strb	r2, [r3, #1]
    1ab6:	e028      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    1ab8:	2d20      	cmp	r5, #32
    1aba:	d803      	bhi.n	1ac4 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    1abc:	2202      	movs	r2, #2
    1abe:	ab01      	add	r3, sp, #4
    1ac0:	705a      	strb	r2, [r3, #1]
    1ac2:	e022      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    1ac4:	2d40      	cmp	r5, #64	; 0x40
    1ac6:	d803      	bhi.n	1ad0 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1ac8:	2203      	movs	r2, #3
    1aca:	ab01      	add	r3, sp, #4
    1acc:	705a      	strb	r2, [r3, #1]
    1ace:	e01c      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    1ad0:	2d80      	cmp	r5, #128	; 0x80
    1ad2:	d803      	bhi.n	1adc <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1ad4:	2204      	movs	r2, #4
    1ad6:	ab01      	add	r3, sp, #4
    1ad8:	705a      	strb	r2, [r3, #1]
    1ada:	e016      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    1adc:	2380      	movs	r3, #128	; 0x80
    1ade:	005b      	lsls	r3, r3, #1
    1ae0:	429d      	cmp	r5, r3
    1ae2:	d803      	bhi.n	1aec <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1ae4:	2205      	movs	r2, #5
    1ae6:	ab01      	add	r3, sp, #4
    1ae8:	705a      	strb	r2, [r3, #1]
    1aea:	e00e      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	009b      	lsls	r3, r3, #2
    1af0:	429d      	cmp	r5, r3
    1af2:	d803      	bhi.n	1afc <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1af4:	2206      	movs	r2, #6
    1af6:	ab01      	add	r3, sp, #4
    1af8:	705a      	strb	r2, [r3, #1]
    1afa:	e006      	b.n	1b0a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    1afc:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    1afe:	4a1e      	ldr	r2, [pc, #120]	; (1b78 <udd_ep_alloc+0xec>)
    1b00:	4295      	cmp	r5, r2
    1b02:	d833      	bhi.n	1b6c <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1b04:	2207      	movs	r2, #7
    1b06:	ab01      	add	r3, sp, #4
    1b08:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    1b0a:	1c30      	adds	r0, r6, #0
    1b0c:	4b1b      	ldr	r3, [pc, #108]	; (1b7c <udd_ep_alloc+0xf0>)
    1b0e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    1b10:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1b12:	2103      	movs	r1, #3
    1b14:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1b16:	2901      	cmp	r1, #1
    1b18:	d103      	bne.n	1b22 <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    1b1a:	2202      	movs	r2, #2
    1b1c:	ab01      	add	r3, sp, #4
    1b1e:	70da      	strb	r2, [r3, #3]
    1b20:	e00b      	b.n	1b3a <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    1b22:	2902      	cmp	r1, #2
    1b24:	d103      	bne.n	1b2e <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1b26:	2203      	movs	r2, #3
    1b28:	ab01      	add	r3, sp, #4
    1b2a:	70da      	strb	r2, [r3, #3]
    1b2c:	e005      	b.n	1b3a <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    1b2e:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1b30:	2903      	cmp	r1, #3
    1b32:	d11b      	bne.n	1b6c <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1b34:	2204      	movs	r2, #4
    1b36:	ab01      	add	r3, sp, #4
    1b38:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1b3a:	4811      	ldr	r0, [pc, #68]	; (1b80 <udd_ep_alloc+0xf4>)
    1b3c:	a901      	add	r1, sp, #4
    1b3e:	4b11      	ldr	r3, [pc, #68]	; (1b84 <udd_ep_alloc+0xf8>)
    1b40:	4798      	blx	r3
		return false;
    1b42:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1b44:	2800      	cmp	r0, #0
    1b46:	d111      	bne.n	1b6c <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1b48:	4c0d      	ldr	r4, [pc, #52]	; (1b80 <udd_ep_alloc+0xf4>)
    1b4a:	210f      	movs	r1, #15
    1b4c:	4031      	ands	r1, r6
    1b4e:	1c20      	adds	r0, r4, #0
    1b50:	2200      	movs	r2, #0
    1b52:	4b0d      	ldr	r3, [pc, #52]	; (1b88 <udd_ep_alloc+0xfc>)
    1b54:	4d0d      	ldr	r5, [pc, #52]	; (1b8c <udd_ep_alloc+0x100>)
    1b56:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1b58:	1c20      	adds	r0, r4, #0
    1b5a:	1c31      	adds	r1, r6, #0
    1b5c:	2200      	movs	r2, #0
    1b5e:	4d0c      	ldr	r5, [pc, #48]	; (1b90 <udd_ep_alloc+0x104>)
    1b60:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1b62:	1c20      	adds	r0, r4, #0
    1b64:	1c31      	adds	r1, r6, #0
    1b66:	2201      	movs	r2, #1
    1b68:	47a8      	blx	r5

	return true;
    1b6a:	2301      	movs	r3, #1
}
    1b6c:	1c18      	adds	r0, r3, #0
    1b6e:	b003      	add	sp, #12
    1b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	000023a9 	.word	0x000023a9
    1b78:	000003ff 	.word	0x000003ff
    1b7c:	00001419 	.word	0x00001419
    1b80:	20000228 	.word	0x20000228
    1b84:	000023b9 	.word	0x000023b9
    1b88:	00001435 	.word	0x00001435
    1b8c:	000021a1 	.word	0x000021a1
    1b90:	000021f1 	.word	0x000021f1

00001b94 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    1b94:	b508      	push	{r3, lr}
    1b96:	1c01      	adds	r1, r0, #0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1b98:	4801      	ldr	r0, [pc, #4]	; (1ba0 <udd_ep_is_halted+0xc>)
    1b9a:	4b02      	ldr	r3, [pc, #8]	; (1ba4 <udd_ep_is_halted+0x10>)
    1b9c:	4798      	blx	r3
}
    1b9e:	bd08      	pop	{r3, pc}
    1ba0:	20000228 	.word	0x20000228
    1ba4:	00002645 	.word	0x00002645

00001ba8 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    1ba8:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1baa:	230f      	movs	r3, #15
    1bac:	4003      	ands	r3, r0
		return false;
    1bae:	2200      	movs	r2, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1bb0:	2b01      	cmp	r3, #1
    1bb2:	d808      	bhi.n	1bc6 <udd_ep_set_halt+0x1e>
    1bb4:	1c04      	adds	r4, r0, #0
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    1bb6:	4805      	ldr	r0, [pc, #20]	; (1bcc <udd_ep_set_halt+0x24>)
    1bb8:	1c21      	adds	r1, r4, #0
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <udd_ep_set_halt+0x28>)
    1bbc:	4798      	blx	r3

	udd_ep_abort(ep);
    1bbe:	1c20      	adds	r0, r4, #0
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <udd_ep_set_halt+0x2c>)
    1bc2:	4798      	blx	r3
	return true;
    1bc4:	2201      	movs	r2, #1
}
    1bc6:	1c10      	adds	r0, r2, #0
    1bc8:	bd10      	pop	{r4, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	20000228 	.word	0x20000228
    1bd0:	00002671 	.word	0x00002671
    1bd4:	000019e9 	.word	0x000019e9

00001bd8 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    1bd8:	b538      	push	{r3, r4, r5, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1bda:	4b34      	ldr	r3, [pc, #208]	; (1cac <_usb_ep0_on_tansfer_ok+0xd4>)
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	2b01      	cmp	r3, #1
    1be0:	d155      	bne.n	1c8e <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1be2:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1be4:	4b32      	ldr	r3, [pc, #200]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1be6:	899b      	ldrh	r3, [r3, #12]
    1be8:	4a32      	ldr	r2, [pc, #200]	; (1cb4 <_usb_ep0_on_tansfer_ok+0xdc>)
    1bea:	8814      	ldrh	r4, [r2, #0]
    1bec:	1962      	adds	r2, r4, r5
    1bee:	4293      	cmp	r3, r2
    1bf0:	da01      	bge.n	1bf6 <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1bf2:	1b1d      	subs	r5, r3, r4
    1bf4:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1bf6:	4b2e      	ldr	r3, [pc, #184]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1bf8:	6898      	ldr	r0, [r3, #8]
    1bfa:	1900      	adds	r0, r0, r4
    1bfc:	492e      	ldr	r1, [pc, #184]	; (1cb8 <_usb_ep0_on_tansfer_ok+0xe0>)
    1bfe:	1c2a      	adds	r2, r5, #0
    1c00:	4b2e      	ldr	r3, [pc, #184]	; (1cbc <_usb_ep0_on_tansfer_ok+0xe4>)
    1c02:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1c04:	192c      	adds	r4, r5, r4
    1c06:	b2a4      	uxth	r4, r4
    1c08:	4b2a      	ldr	r3, [pc, #168]	; (1cb4 <_usb_ep0_on_tansfer_ok+0xdc>)
    1c0a:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1c0c:	2d08      	cmp	r5, #8
    1c0e:	d106      	bne.n	1c1e <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1c10:	4b27      	ldr	r3, [pc, #156]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1c12:	88da      	ldrh	r2, [r3, #6]
    1c14:	4b2a      	ldr	r3, [pc, #168]	; (1cc0 <_usb_ep0_on_tansfer_ok+0xe8>)
    1c16:	881b      	ldrh	r3, [r3, #0]
    1c18:	191b      	adds	r3, r3, r4
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1c1a:	429a      	cmp	r2, r3
    1c1c:	dc10      	bgt.n	1c40 <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1c1e:	4b24      	ldr	r3, [pc, #144]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1c20:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1c22:	695b      	ldr	r3, [r3, #20]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d008      	beq.n	1c3a <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    1c28:	4798      	blx	r3
    1c2a:	2800      	cmp	r0, #0
    1c2c:	d105      	bne.n	1c3a <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1c2e:	2205      	movs	r2, #5
    1c30:	4b1e      	ldr	r3, [pc, #120]	; (1cac <_usb_ep0_on_tansfer_ok+0xd4>)
    1c32:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    1c34:	4b23      	ldr	r3, [pc, #140]	; (1cc4 <_usb_ep0_on_tansfer_ok+0xec>)
    1c36:	4798      	blx	r3
    1c38:	e036      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    1c3a:	4b23      	ldr	r3, [pc, #140]	; (1cc8 <_usb_ep0_on_tansfer_ok+0xf0>)
    1c3c:	4798      	blx	r3
    1c3e:	e033      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1c40:	4b1b      	ldr	r3, [pc, #108]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1c42:	899b      	ldrh	r3, [r3, #12]
    1c44:	42a3      	cmp	r3, r4
    1c46:	d11b      	bne.n	1c80 <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    1c48:	4b19      	ldr	r3, [pc, #100]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1c4a:	695b      	ldr	r3, [r3, #20]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d106      	bne.n	1c5e <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1c50:	2205      	movs	r2, #5
    1c52:	4b16      	ldr	r3, [pc, #88]	; (1cac <_usb_ep0_on_tansfer_ok+0xd4>)
    1c54:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1c56:	2000      	movs	r0, #0
    1c58:	4b1a      	ldr	r3, [pc, #104]	; (1cc4 <_usb_ep0_on_tansfer_ok+0xec>)
    1c5a:	4798      	blx	r3
    1c5c:	e024      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1c5e:	4798      	blx	r3
    1c60:	2800      	cmp	r0, #0
    1c62:	d105      	bne.n	1c70 <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1c64:	2205      	movs	r2, #5
    1c66:	4b11      	ldr	r3, [pc, #68]	; (1cac <_usb_ep0_on_tansfer_ok+0xd4>)
    1c68:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1c6a:	4b16      	ldr	r3, [pc, #88]	; (1cc4 <_usb_ep0_on_tansfer_ok+0xec>)
    1c6c:	4798      	blx	r3
    1c6e:	e01b      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1c70:	4913      	ldr	r1, [pc, #76]	; (1cc0 <_usb_ep0_on_tansfer_ok+0xe8>)
    1c72:	4a10      	ldr	r2, [pc, #64]	; (1cb4 <_usb_ep0_on_tansfer_ok+0xdc>)
    1c74:	8810      	ldrh	r0, [r2, #0]
    1c76:	880b      	ldrh	r3, [r1, #0]
    1c78:	18c3      	adds	r3, r0, r3
    1c7a:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    1c7c:	2300      	movs	r3, #0
    1c7e:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1c80:	4812      	ldr	r0, [pc, #72]	; (1ccc <_usb_ep0_on_tansfer_ok+0xf4>)
    1c82:	2100      	movs	r1, #0
    1c84:	4a0c      	ldr	r2, [pc, #48]	; (1cb8 <_usb_ep0_on_tansfer_ok+0xe0>)
    1c86:	2308      	movs	r3, #8
    1c88:	4c11      	ldr	r4, [pc, #68]	; (1cd0 <_usb_ep0_on_tansfer_ok+0xf8>)
    1c8a:	47a0      	blx	r4
    1c8c:	e00c      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1c8e:	2b02      	cmp	r3, #2
    1c90:	d102      	bne.n	1c98 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    1c92:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <_usb_ep0_on_tansfer_ok+0xfc>)
    1c94:	4798      	blx	r3
    1c96:	e007      	b.n	1ca8 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    1c98:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1c9a:	691b      	ldr	r3, [r3, #16]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d000      	beq.n	1ca2 <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    1ca0:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1ca2:	2200      	movs	r2, #0
    1ca4:	4b01      	ldr	r3, [pc, #4]	; (1cac <_usb_ep0_on_tansfer_ok+0xd4>)
    1ca6:	701a      	strb	r2, [r3, #0]
		}
}
    1ca8:	bd38      	pop	{r3, r4, r5, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	2000017b 	.word	0x2000017b
    1cb0:	20000390 	.word	0x20000390
    1cb4:	20000178 	.word	0x20000178
    1cb8:	200003a8 	.word	0x200003a8
    1cbc:	000035b5 	.word	0x000035b5
    1cc0:	2000014c 	.word	0x2000014c
    1cc4:	00001ba9 	.word	0x00001ba9
    1cc8:	00001789 	.word	0x00001789
    1ccc:	20000228 	.word	0x20000228
    1cd0:	00002771 	.word	0x00002771
    1cd4:	00001815 	.word	0x00001815

00001cd8 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    1cd8:	b538      	push	{r3, r4, r5, lr}
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1cda:	230f      	movs	r3, #15
    1cdc:	4003      	ands	r3, r0
		return false;
    1cde:	2200      	movs	r2, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1ce0:	2b01      	cmp	r3, #1
    1ce2:	d811      	bhi.n	1d08 <udd_ep_clear_halt+0x30>
    1ce4:	1c04      	adds	r4, r0, #0
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    1ce6:	4b09      	ldr	r3, [pc, #36]	; (1d0c <udd_ep_clear_halt+0x34>)
    1ce8:	4798      	blx	r3
    1cea:	1c05      	adds	r5, r0, #0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    1cec:	4808      	ldr	r0, [pc, #32]	; (1d10 <udd_ep_clear_halt+0x38>)
    1cee:	1c21      	adds	r1, r4, #0
    1cf0:	4b08      	ldr	r3, [pc, #32]	; (1d14 <udd_ep_clear_halt+0x3c>)
    1cf2:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    1cf4:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    1cf6:	2201      	movs	r2, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    1cf8:	07db      	lsls	r3, r3, #31
    1cfa:	d505      	bpl.n	1d08 <udd_ep_clear_halt+0x30>
		ptr_job->busy = false;
    1cfc:	7cab      	ldrb	r3, [r5, #18]
    1cfe:	4393      	bics	r3, r2
    1d00:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1d02:	682b      	ldr	r3, [r5, #0]
    1d04:	4798      	blx	r3
	}

	return true;
    1d06:	2201      	movs	r2, #1
}
    1d08:	1c10      	adds	r0, r2, #0
    1d0a:	bd38      	pop	{r3, r4, r5, pc}
    1d0c:	00001419 	.word	0x00001419
    1d10:	20000228 	.word	0x20000228
    1d14:	00002699 	.word	0x00002699

00001d18 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	b085      	sub	sp, #20
    1d1c:	1c05      	adds	r5, r0, #0
    1d1e:	9103      	str	r1, [sp, #12]
    1d20:	9202      	str	r2, [sp, #8]
    1d22:	9301      	str	r3, [sp, #4]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    1d24:	230f      	movs	r3, #15
    1d26:	4003      	ands	r3, r0
    1d28:	1c1e      	adds	r6, r3, #0

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    1d2a:	2400      	movs	r4, #0
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1d2c:	2b01      	cmp	r3, #1
    1d2e:	d900      	bls.n	1d32 <udd_ep_run+0x1a>
    1d30:	e0c7      	b.n	1ec2 <udd_ep_run+0x1aa>
    1d32:	4b65      	ldr	r3, [pc, #404]	; (1ec8 <udd_ep_run+0x1b0>)
    1d34:	4798      	blx	r3
    1d36:	1e04      	subs	r4, r0, #0
    1d38:	d000      	beq.n	1d3c <udd_ep_run+0x24>
    1d3a:	e0bd      	b.n	1eb8 <udd_ep_run+0x1a0>
		return false;
	}

	ptr_job = udd_ep_get_job(ep);
    1d3c:	1c28      	adds	r0, r5, #0
    1d3e:	4b63      	ldr	r3, [pc, #396]	; (1ecc <udd_ep_run+0x1b4>)
    1d40:	4798      	blx	r3
    1d42:	1c07      	adds	r7, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d44:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    1d48:	425a      	negs	r2, r3
    1d4a:	415a      	adcs	r2, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d4c:	b672      	cpsid	i
    1d4e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1d52:	2100      	movs	r1, #0
    1d54:	4b5e      	ldr	r3, [pc, #376]	; (1ed0 <udd_ep_run+0x1b8>)
    1d56:	7019      	strb	r1, [r3, #0]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    1d58:	7c83      	ldrb	r3, [r0, #18]
    1d5a:	07db      	lsls	r3, r3, #31
    1d5c:	d509      	bpl.n	1d72 <udd_ep_run+0x5a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d100      	bne.n	1d64 <udd_ep_run+0x4c>
    1d62:	e0ae      	b.n	1ec2 <udd_ep_run+0x1aa>
		cpu_irq_enable();
    1d64:	2201      	movs	r2, #1
    1d66:	4b5a      	ldr	r3, [pc, #360]	; (1ed0 <udd_ep_run+0x1b8>)
    1d68:	701a      	strb	r2, [r3, #0]
    1d6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d6e:	b662      	cpsie	i
    1d70:	e0a7      	b.n	1ec2 <udd_ep_run+0x1aa>
		cpu_irq_restore(flags);
		return false; /* Job already on going */
	}
	ptr_job->busy = true;
    1d72:	7c81      	ldrb	r1, [r0, #18]
    1d74:	2301      	movs	r3, #1
    1d76:	430b      	orrs	r3, r1
    1d78:	7483      	strb	r3, [r0, #18]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1d7a:	2a00      	cmp	r2, #0
    1d7c:	d005      	beq.n	1d8a <udd_ep_run+0x72>
		cpu_irq_enable();
    1d7e:	2201      	movs	r2, #1
    1d80:	4b53      	ldr	r3, [pc, #332]	; (1ed0 <udd_ep_run+0x1b8>)
    1d82:	701a      	strb	r2, [r3, #0]
    1d84:	f3bf 8f5f 	dmb	sy
    1d88:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    1d8a:	9b02      	ldr	r3, [sp, #8]
    1d8c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1d8e:	9b01      	ldr	r3, [sp, #4]
    1d90:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1d92:	2300      	movs	r3, #0
    1d94:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d98:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1d9a:	2301      	movs	r3, #1
    1d9c:	9a03      	ldr	r2, [sp, #12]
    1d9e:	4013      	ands	r3, r2
    1da0:	005a      	lsls	r2, r3, #1
    1da2:	7cbb      	ldrb	r3, [r7, #18]
    1da4:	2102      	movs	r1, #2
    1da6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1da8:	4313      	orrs	r3, r2
    1daa:	2204      	movs	r2, #4
    1dac:	4393      	bics	r3, r2
    1dae:	74bb      	strb	r3, [r7, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    1db0:	b26b      	sxtb	r3, r5
    1db2:	2b00      	cmp	r3, #0
    1db4:	da40      	bge.n	1e38 <udd_ep_run+0x120>
		if (0 != ptr_job->buf_size) {
    1db6:	9b01      	ldr	r3, [sp, #4]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d01d      	beq.n	1df8 <udd_ep_run+0xe0>
			next_trans = ptr_job->buf_size;
    1dbc:	466b      	mov	r3, sp
    1dbe:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1dc0:	4b44      	ldr	r3, [pc, #272]	; (1ed4 <udd_ep_run+0x1bc>)
    1dc2:	429c      	cmp	r4, r3
    1dc4:	d906      	bls.n	1dd4 <udd_ep_run+0xbc>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1dc6:	8a39      	ldrh	r1, [r7, #16]
    1dc8:	1c1c      	adds	r4, r3, #0
    1dca:	1c18      	adds	r0, r3, #0
    1dcc:	4b42      	ldr	r3, [pc, #264]	; (1ed8 <udd_ep_run+0x1c0>)
    1dce:	4798      	blx	r3

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1dd0:	1a63      	subs	r3, r4, r1
    1dd2:	b29c      	uxth	r4, r3
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1dd4:	7cba      	ldrb	r2, [r7, #18]
    1dd6:	2300      	movs	r3, #0
    1dd8:	0792      	lsls	r2, r2, #30
    1dda:	d506      	bpl.n	1dea <udd_ep_run+0xd2>
					(0 == (next_trans % ptr_job->ep_size));
    1ddc:	8a39      	ldrh	r1, [r7, #16]
    1dde:	1c20      	adds	r0, r4, #0
    1de0:	4b3e      	ldr	r3, [pc, #248]	; (1edc <udd_ep_run+0x1c4>)
    1de2:	4798      	blx	r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1de4:	b289      	uxth	r1, r1
    1de6:	424b      	negs	r3, r1
    1de8:	414b      	adcs	r3, r1
    1dea:	005b      	lsls	r3, r3, #1
    1dec:	7cba      	ldrb	r2, [r7, #18]
    1dee:	2102      	movs	r1, #2
    1df0:	438a      	bics	r2, r1
    1df2:	4313      	orrs	r3, r2
    1df4:	74bb      	strb	r3, [r7, #18]
    1df6:	e015      	b.n	1e24 <udd_ep_run+0x10c>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    1df8:	7cbb      	ldrb	r3, [r7, #18]
    1dfa:	079b      	lsls	r3, r3, #30
    1dfc:	d505      	bpl.n	1e0a <udd_ep_run+0xf2>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1dfe:	7cbb      	ldrb	r3, [r7, #18]
    1e00:	2202      	movs	r2, #2
    1e02:	4393      	bics	r3, r2
    1e04:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1e06:	2400      	movs	r4, #0
    1e08:	e00c      	b.n	1e24 <udd_ep_run+0x10c>
		} else {
			ptr_job->busy = false;
    1e0a:	7cbb      	ldrb	r3, [r7, #18]
    1e0c:	2201      	movs	r2, #1
    1e0e:	4393      	bics	r3, r2
    1e10:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e14:	2b00      	cmp	r3, #0
    1e16:	d051      	beq.n	1ebc <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1e18:	2000      	movs	r0, #0
    1e1a:	2100      	movs	r1, #0
    1e1c:	1c2a      	adds	r2, r5, #0
    1e1e:	4798      	blx	r3
			}
			return true;
    1e20:	2401      	movs	r4, #1
    1e22:	e04e      	b.n	1ec2 <udd_ep_run+0x1aa>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    1e24:	482e      	ldr	r0, [pc, #184]	; (1ee0 <udd_ep_run+0x1c8>)
    1e26:	1c31      	adds	r1, r6, #0
    1e28:	9a02      	ldr	r2, [sp, #8]
    1e2a:	1c23      	adds	r3, r4, #0
    1e2c:	4c2d      	ldr	r4, [pc, #180]	; (1ee4 <udd_ep_run+0x1cc>)
    1e2e:	47a0      	blx	r4
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    1e30:	4244      	negs	r4, r0
    1e32:	4144      	adcs	r4, r0
    1e34:	b2e4      	uxtb	r4, r4
    1e36:	e044      	b.n	1ec2 <udd_ep_run+0x1aa>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    1e38:	9b01      	ldr	r3, [sp, #4]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d02f      	beq.n	1e9e <udd_ep_run+0x186>
			next_trans = ptr_job->buf_size;
    1e3e:	466b      	mov	r3, sp
    1e40:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1e42:	4b24      	ldr	r3, [pc, #144]	; (1ed4 <udd_ep_run+0x1bc>)
    1e44:	429c      	cmp	r4, r3
    1e46:	d907      	bls.n	1e58 <udd_ep_run+0x140>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1e48:	8a39      	ldrh	r1, [r7, #16]
    1e4a:	1c1c      	adds	r4, r3, #0
    1e4c:	1c18      	adds	r0, r3, #0
    1e4e:	4b22      	ldr	r3, [pc, #136]	; (1ed8 <udd_ep_run+0x1c0>)
    1e50:	4798      	blx	r3
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1e52:	1a63      	subs	r3, r4, r1
    1e54:	b29c      	uxth	r4, r3
    1e56:	e005      	b.n	1e64 <udd_ep_run+0x14c>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    1e58:	8a39      	ldrh	r1, [r7, #16]
    1e5a:	1c20      	adds	r0, r4, #0
    1e5c:	4b1f      	ldr	r3, [pc, #124]	; (1edc <udd_ep_run+0x1c4>)
    1e5e:	4798      	blx	r3
    1e60:	1a63      	subs	r3, r4, r1
    1e62:	b29c      	uxth	r4, r3
			}
			if (next_trans < ptr_job->ep_size) {
    1e64:	8a3b      	ldrh	r3, [r7, #16]
    1e66:	429c      	cmp	r4, r3
    1e68:	d20f      	bcs.n	1e8a <udd_ep_run+0x172>
				ptr_job->b_use_out_cache_buffer = true;
    1e6a:	7cb9      	ldrb	r1, [r7, #18]
    1e6c:	2204      	movs	r2, #4
    1e6e:	430a      	orrs	r2, r1
    1e70:	74ba      	strb	r2, [r7, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    1e72:	1e72      	subs	r2, r6, #1
    1e74:	0192      	lsls	r2, r2, #6
    1e76:	491c      	ldr	r1, [pc, #112]	; (1ee8 <udd_ep_run+0x1d0>)
    1e78:	1852      	adds	r2, r2, r1
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1e7a:	4819      	ldr	r0, [pc, #100]	; (1ee0 <udd_ep_run+0x1c8>)
    1e7c:	1c31      	adds	r1, r6, #0
    1e7e:	4c1b      	ldr	r4, [pc, #108]	; (1eec <udd_ep_run+0x1d4>)
    1e80:	47a0      	blx	r4
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    1e82:	4244      	negs	r4, r0
    1e84:	4144      	adcs	r4, r0
    1e86:	b2e4      	uxtb	r4, r4
    1e88:	e01b      	b.n	1ec2 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1e8a:	4815      	ldr	r0, [pc, #84]	; (1ee0 <udd_ep_run+0x1c8>)
    1e8c:	1c31      	adds	r1, r6, #0
    1e8e:	9a02      	ldr	r2, [sp, #8]
    1e90:	1c23      	adds	r3, r4, #0
    1e92:	4c16      	ldr	r4, [pc, #88]	; (1eec <udd_ep_run+0x1d4>)
    1e94:	47a0      	blx	r4
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    1e96:	4244      	negs	r4, r0
    1e98:	4144      	adcs	r4, r0
    1e9a:	b2e4      	uxtb	r4, r4
    1e9c:	e011      	b.n	1ec2 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    1e9e:	7cbb      	ldrb	r3, [r7, #18]
    1ea0:	2201      	movs	r2, #1
    1ea2:	4393      	bics	r3, r2
    1ea4:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d009      	beq.n	1ec0 <udd_ep_run+0x1a8>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1eac:	2000      	movs	r0, #0
    1eae:	2100      	movs	r1, #0
    1eb0:	1c2a      	adds	r2, r5, #0
    1eb2:	4798      	blx	r3
			}
			return true;
    1eb4:	2401      	movs	r4, #1
    1eb6:	e004      	b.n	1ec2 <udd_ep_run+0x1aa>
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    1eb8:	2400      	movs	r4, #0
    1eba:	e002      	b.n	1ec2 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    1ebc:	2401      	movs	r4, #1
    1ebe:	e000      	b.n	1ec2 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    1ec0:	2401      	movs	r4, #1
		}
	}
}
    1ec2:	1c20      	adds	r0, r4, #0
    1ec4:	b005      	add	sp, #20
    1ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec8:	00001b95 	.word	0x00001b95
    1ecc:	00001419 	.word	0x00001419
    1ed0:	200000d8 	.word	0x200000d8
    1ed4:	00001fff 	.word	0x00001fff
    1ed8:	00003511 	.word	0x00003511
    1edc:	00003331 	.word	0x00003331
    1ee0:	20000228 	.word	0x20000228
    1ee4:	00002721 	.word	0x00002721
    1ee8:	200001e8 	.word	0x200001e8
    1eec:	00002771 	.word	0x00002771

00001ef0 <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1ef0:	4b02      	ldr	r3, [pc, #8]	; (1efc <udd_set_address+0xc>)
    1ef2:	681a      	ldr	r2, [r3, #0]
    1ef4:	2380      	movs	r3, #128	; 0x80
    1ef6:	4318      	orrs	r0, r3
    1ef8:	7290      	strb	r0, [r2, #10]

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    1efa:	4770      	bx	lr
    1efc:	20000228 	.word	0x20000228

00001f00 <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1f00:	4b02      	ldr	r3, [pc, #8]	; (1f0c <udd_getaddress+0xc>)
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	7a9b      	ldrb	r3, [r3, #10]
    1f06:	207f      	movs	r0, #127	; 0x7f
    1f08:	4018      	ands	r0, r3

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    1f0a:	4770      	bx	lr
    1f0c:	20000228 	.word	0x20000228

00001f10 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    1f10:	b508      	push	{r3, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1f12:	4b12      	ldr	r3, [pc, #72]	; (1f5c <udd_send_remotewakeup+0x4c>)
    1f14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1f16:	069b      	lsls	r3, r3, #26
    1f18:	d406      	bmi.n	1f28 <udd_send_remotewakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1f1a:	4910      	ldr	r1, [pc, #64]	; (1f5c <udd_send_remotewakeup+0x4c>)
    1f1c:	22d0      	movs	r2, #208	; 0xd0
    1f1e:	68cb      	ldr	r3, [r1, #12]
    1f20:	4013      	ands	r3, r2
    1f22:	2bd0      	cmp	r3, #208	; 0xd0
    1f24:	d1fb      	bne.n	1f1e <udd_send_remotewakeup+0xe>
    1f26:	e004      	b.n	1f32 <udd_send_remotewakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1f28:	490c      	ldr	r1, [pc, #48]	; (1f5c <udd_send_remotewakeup+0x4c>)
    1f2a:	2210      	movs	r2, #16
    1f2c:	68cb      	ldr	r3, [r1, #12]
    1f2e:	421a      	tst	r2, r3
    1f30:	d0fc      	beq.n	1f2c <udd_send_remotewakeup+0x1c>

void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
    1f32:	2003      	movs	r0, #3
    1f34:	4b0a      	ldr	r3, [pc, #40]	; (1f60 <udd_send_remotewakeup+0x50>)
    1f36:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    1f38:	4b0a      	ldr	r3, [pc, #40]	; (1f64 <udd_send_remotewakeup+0x54>)
    1f3a:	681a      	ldr	r2, [r3, #0]
    1f3c:	7b53      	ldrb	r3, [r2, #13]
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    1f3e:	2b02      	cmp	r3, #2
    1f40:	d00b      	beq.n	1f5a <udd_send_remotewakeup+0x4a>
    1f42:	2105      	movs	r1, #5
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    1f44:	2002      	movs	r0, #2
    1f46:	8913      	ldrh	r3, [r2, #8]
    1f48:	4303      	orrs	r3, r0
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	8113      	strh	r3, [r2, #8]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    1f4e:	7b53      	ldrb	r3, [r2, #13]
    1f50:	2b02      	cmp	r3, #2
    1f52:	d002      	beq.n	1f5a <udd_send_remotewakeup+0x4a>
    1f54:	3901      	subs	r1, #1
    1f56:	2900      	cmp	r1, #0
    1f58:	d1f5      	bne.n	1f46 <udd_send_remotewakeup+0x36>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    1f5a:	bd08      	pop	{r3, pc}
    1f5c:	40000800 	.word	0x40000800
    1f60:	0000136d 	.word	0x0000136d
    1f64:	20000228 	.word	0x20000228

00001f68 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    1f68:	4b01      	ldr	r3, [pc, #4]	; (1f70 <udd_set_setup_payload+0x8>)
    1f6a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1f6c:	8199      	strh	r1, [r3, #12]
}
    1f6e:	4770      	bx	lr
    1f70:	20000390 	.word	0x20000390

00001f74 <udd_detach>:
	UDC_RESUME_EVENT();
#endif
}

void udd_detach(void)
{
    1f74:	b508      	push	{r3, lr}
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <udd_detach+0x18>)
    1f78:	681a      	ldr	r2, [r3, #0]
    1f7a:	8911      	ldrh	r1, [r2, #8]
    1f7c:	2301      	movs	r3, #1
    1f7e:	430b      	orrs	r3, r1
    1f80:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1f82:	2001      	movs	r0, #1
    1f84:	4b02      	ldr	r3, [pc, #8]	; (1f90 <udd_detach+0x1c>)
    1f86:	4798      	blx	r3
}
    1f88:	bd08      	pop	{r3, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	20000228 	.word	0x20000228
    1f90:	0000136d 	.word	0x0000136d

00001f94 <udd_attach>:

void udd_attach(void)
{
    1f94:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1f96:	2003      	movs	r0, #3
    1f98:	4b16      	ldr	r3, [pc, #88]	; (1ff4 <udd_attach+0x60>)
    1f9a:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1f9c:	4c16      	ldr	r4, [pc, #88]	; (1ff8 <udd_attach+0x64>)
    1f9e:	6822      	ldr	r2, [r4, #0]
    1fa0:	8913      	ldrh	r3, [r2, #8]
    1fa2:	2101      	movs	r1, #1
    1fa4:	438b      	bics	r3, r1
    1fa6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1fa8:	1c20      	adds	r0, r4, #0
    1faa:	3103      	adds	r1, #3
    1fac:	4a13      	ldr	r2, [pc, #76]	; (1ffc <udd_attach+0x68>)
    1fae:	4e14      	ldr	r6, [pc, #80]	; (2000 <STACK_SIZE>)
    1fb0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1fb2:	1c20      	adds	r0, r4, #0
    1fb4:	2100      	movs	r1, #0
    1fb6:	4a13      	ldr	r2, [pc, #76]	; (2004 <STACK_SIZE+0x4>)
    1fb8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1fba:	1c20      	adds	r0, r4, #0
    1fbc:	2101      	movs	r1, #1
    1fbe:	4a12      	ldr	r2, [pc, #72]	; (2008 <STACK_SIZE+0x8>)
    1fc0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1fc2:	1c20      	adds	r0, r4, #0
    1fc4:	2102      	movs	r1, #2
    1fc6:	4a11      	ldr	r2, [pc, #68]	; (200c <STACK_SIZE+0xc>)
    1fc8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1fca:	1c20      	adds	r0, r4, #0
    1fcc:	2104      	movs	r1, #4
    1fce:	4d10      	ldr	r5, [pc, #64]	; (2010 <STACK_SIZE+0x10>)
    1fd0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1fd2:	1c20      	adds	r0, r4, #0
    1fd4:	2100      	movs	r1, #0
    1fd6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1fd8:	1c20      	adds	r0, r4, #0
    1fda:	2101      	movs	r1, #1
    1fdc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1fde:	1c20      	adds	r0, r4, #0
    1fe0:	2102      	movs	r1, #2
    1fe2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1fe4:	1c20      	adds	r0, r4, #0
    1fe6:	2106      	movs	r1, #6
    1fe8:	4a0a      	ldr	r2, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fea:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1fec:	1c20      	adds	r0, r4, #0
    1fee:	2106      	movs	r1, #6
    1ff0:	47a8      	blx	r5
#endif
}
    1ff2:	bd70      	pop	{r4, r5, r6, pc}
    1ff4:	0000136d 	.word	0x0000136d
    1ff8:	20000228 	.word	0x20000228
    1ffc:	000019b5 	.word	0x000019b5
    2000:	00002145 	.word	0x00002145
    2004:	000019a1 	.word	0x000019a1
    2008:	000016d9 	.word	0x000016d9
    200c:	00001669 	.word	0x00001669
    2010:	00002165 	.word	0x00002165
    2014:	00001611 	.word	0x00001611

00002018 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    2018:	b508      	push	{r3, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    201a:	200e      	movs	r0, #14
    201c:	2100      	movs	r1, #0
    201e:	4b08      	ldr	r3, [pc, #32]	; (2040 <_uhd_vbus_handler+0x28>)
    2020:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    2022:	4b08      	ldr	r3, [pc, #32]	; (2044 <_uhd_vbus_handler+0x2c>)
    2024:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    2026:	045b      	lsls	r3, r3, #17
    2028:	d502      	bpl.n	2030 <_uhd_vbus_handler+0x18>
		udd_attach();
    202a:	4b07      	ldr	r3, [pc, #28]	; (2048 <_uhd_vbus_handler+0x30>)
    202c:	4798      	blx	r3
    202e:	e001      	b.n	2034 <_uhd_vbus_handler+0x1c>
	} else {
		udd_detach();
    2030:	4b06      	ldr	r3, [pc, #24]	; (204c <_uhd_vbus_handler+0x34>)
    2032:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    2034:	200e      	movs	r0, #14
    2036:	2100      	movs	r1, #0
    2038:	4b05      	ldr	r3, [pc, #20]	; (2050 <_uhd_vbus_handler+0x38>)
    203a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    203c:	bd08      	pop	{r3, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	00000c7d 	.word	0x00000c7d
    2044:	41004400 	.word	0x41004400
    2048:	00001f95 	.word	0x00001f95
    204c:	00001f75 	.word	0x00001f75
    2050:	00000c5d 	.word	0x00000c5d

00002054 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2058:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    205c:	b672      	cpsid	i
    205e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2062:	2600      	movs	r6, #0
    2064:	4b28      	ldr	r3, [pc, #160]	; (2108 <udd_enable+0xb4>)
    2066:	701e      	strb	r6, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2068:	ad03      	add	r5, sp, #12
    206a:	1c28      	adds	r0, r5, #0
    206c:	4b27      	ldr	r3, [pc, #156]	; (210c <udd_enable+0xb8>)
    206e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2070:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    2072:	4e27      	ldr	r6, [pc, #156]	; (2110 <udd_enable+0xbc>)
    2074:	1c30      	adds	r0, r6, #0
    2076:	4927      	ldr	r1, [pc, #156]	; (2114 <udd_enable+0xc0>)
    2078:	1c2a      	adds	r2, r5, #0
    207a:	4b27      	ldr	r3, [pc, #156]	; (2118 <udd_enable+0xc4>)
    207c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    207e:	1c30      	adds	r0, r6, #0
    2080:	4b26      	ldr	r3, [pc, #152]	; (211c <udd_enable+0xc8>)
    2082:	4798      	blx	r3
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2084:	4b26      	ldr	r3, [pc, #152]	; (2120 <udd_enable+0xcc>)
    2086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2088:	069b      	lsls	r3, r3, #26
    208a:	d406      	bmi.n	209a <udd_enable+0x46>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    208c:	4924      	ldr	r1, [pc, #144]	; (2120 <udd_enable+0xcc>)
    208e:	22d0      	movs	r2, #208	; 0xd0
    2090:	68cb      	ldr	r3, [r1, #12]
    2092:	4013      	ands	r3, r2
    2094:	2bd0      	cmp	r3, #208	; 0xd0
    2096:	d1fb      	bne.n	2090 <udd_enable+0x3c>
    2098:	e004      	b.n	20a4 <udd_enable+0x50>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    209a:	4921      	ldr	r1, [pc, #132]	; (2120 <udd_enable+0xcc>)
    209c:	2210      	movs	r2, #16
    209e:	68cb      	ldr	r3, [r1, #12]
    20a0:	421a      	tst	r2, r3
    20a2:	d0fc      	beq.n	209e <udd_enable+0x4a>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    20a4:	2001      	movs	r0, #1
    20a6:	4b1f      	ldr	r3, [pc, #124]	; (2124 <udd_enable+0xd0>)
    20a8:	4798      	blx	r3
static void _usb_vbus_config(void)
{

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    20aa:	4668      	mov	r0, sp
    20ac:	4b1e      	ldr	r3, [pc, #120]	; (2128 <udd_enable+0xd4>)
    20ae:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    20b0:	230e      	movs	r3, #14
    20b2:	9300      	str	r3, [sp, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    20b4:	2300      	movs	r3, #0
    20b6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    20b8:	466a      	mov	r2, sp
    20ba:	7213      	strb	r3, [r2, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    20bc:	3303      	adds	r3, #3
    20be:	72d3      	strb	r3, [r2, #11]
	eint_chan_conf.filter_input_signal = true;
    20c0:	3b02      	subs	r3, #2
    20c2:	7293      	strb	r3, [r2, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    20c4:	200e      	movs	r0, #14
    20c6:	2100      	movs	r1, #0
    20c8:	4b18      	ldr	r3, [pc, #96]	; (212c <udd_enable+0xd8>)
    20ca:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    20cc:	200e      	movs	r0, #14
    20ce:	4669      	mov	r1, sp
    20d0:	4b17      	ldr	r3, [pc, #92]	; (2130 <udd_enable+0xdc>)
    20d2:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    20d4:	4817      	ldr	r0, [pc, #92]	; (2134 <udd_enable+0xe0>)
    20d6:	210e      	movs	r1, #14
    20d8:	2200      	movs	r2, #0
    20da:	4b17      	ldr	r3, [pc, #92]	; (2138 <udd_enable+0xe4>)
    20dc:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    20de:	200e      	movs	r0, #14
    20e0:	2100      	movs	r1, #0
    20e2:	4b16      	ldr	r3, [pc, #88]	; (213c <udd_enable+0xe8>)
    20e4:	4798      	blx	r3
    20e6:	4b16      	ldr	r3, [pc, #88]	; (2140 <udd_enable+0xec>)
    20e8:	6a1b      	ldr	r3, [r3, #32]

	udd_sleep_mode(UDD_STATE_SUSPEND);

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    20ea:	045b      	lsls	r3, r3, #17
    20ec:	d501      	bpl.n	20f2 <udd_enable+0x9e>
		/* USB Attach */
		_uhd_vbus_handler();
    20ee:	4b11      	ldr	r3, [pc, #68]	; (2134 <udd_enable+0xe0>)
    20f0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    20f2:	2c00      	cmp	r4, #0
    20f4:	d105      	bne.n	2102 <udd_enable+0xae>
		cpu_irq_enable();
    20f6:	2201      	movs	r2, #1
    20f8:	4b03      	ldr	r3, [pc, #12]	; (2108 <udd_enable+0xb4>)
    20fa:	701a      	strb	r2, [r3, #0]
    20fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2100:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    2102:	b004      	add	sp, #16
    2104:	bd70      	pop	{r4, r5, r6, pc}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	200000d8 	.word	0x200000d8
    210c:	00002da1 	.word	0x00002da1
    2110:	20000228 	.word	0x20000228
    2114:	41005000 	.word	0x41005000
    2118:	00002db1 	.word	0x00002db1
    211c:	000027ed 	.word	0x000027ed
    2120:	40000800 	.word	0x40000800
    2124:	0000136d 	.word	0x0000136d
    2128:	00000d89 	.word	0x00000d89
    212c:	00000c7d 	.word	0x00000c7d
    2130:	00000d9d 	.word	0x00000d9d
    2134:	00002019 	.word	0x00002019
    2138:	00000c31 	.word	0x00000c31
    213c:	00000c5d 	.word	0x00000c5d
    2140:	41004400 	.word	0x41004400

00002144 <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    2144:	1c0b      	adds	r3, r1, #0
    2146:	332e      	adds	r3, #46	; 0x2e
    2148:	009b      	lsls	r3, r3, #2
    214a:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    214c:	0049      	lsls	r1, r1, #1
    214e:	22aa      	movs	r2, #170	; 0xaa
    2150:	0052      	lsls	r2, r2, #1
    2152:	4b03      	ldr	r3, [pc, #12]	; (2160 <usb_device_register_callback+0x1c>)
    2154:	5ac9      	ldrh	r1, [r1, r3]
    2156:	5a83      	ldrh	r3, [r0, r2]
    2158:	430b      	orrs	r3, r1
    215a:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    215c:	2000      	movs	r0, #0
    215e:	4770      	bx	lr
    2160:	00003614 	.word	0x00003614

00002164 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    2164:	0049      	lsls	r1, r1, #1
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <usb_device_enable_callback+0x1c>)
    2168:	5acb      	ldrh	r3, [r1, r3]
    216a:	6802      	ldr	r2, [r0, #0]
    216c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    216e:	21ab      	movs	r1, #171	; 0xab
    2170:	0049      	lsls	r1, r1, #1
    2172:	5a42      	ldrh	r2, [r0, r1]
    2174:	431a      	orrs	r2, r3
    2176:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2178:	6802      	ldr	r2, [r0, #0]
    217a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    217c:	2000      	movs	r0, #0
    217e:	4770      	bx	lr
    2180:	00003614 	.word	0x00003614

00002184 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    2184:	0049      	lsls	r1, r1, #1
    2186:	4b05      	ldr	r3, [pc, #20]	; (219c <usb_device_disable_callback+0x18>)
    2188:	5aca      	ldrh	r2, [r1, r3]
    218a:	21ab      	movs	r1, #171	; 0xab
    218c:	0049      	lsls	r1, r1, #1
    218e:	5a43      	ldrh	r3, [r0, r1]
    2190:	4393      	bics	r3, r2
    2192:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2194:	6803      	ldr	r3, [r0, #0]
    2196:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2198:	2000      	movs	r0, #0
    219a:	4770      	bx	lr
    219c:	00003614 	.word	0x00003614

000021a0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    21a0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    21a2:	008c      	lsls	r4, r1, #2
    21a4:	18a4      	adds	r4, r4, r2
    21a6:	3434      	adds	r4, #52	; 0x34
    21a8:	00a4      	lsls	r4, r4, #2
    21aa:	1904      	adds	r4, r0, r4
    21ac:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    21ae:	1841      	adds	r1, r0, r1
    21b0:	3159      	adds	r1, #89	; 0x59
    21b2:	31ff      	adds	r1, #255	; 0xff
    21b4:	7808      	ldrb	r0, [r1, #0]
    21b6:	4b03      	ldr	r3, [pc, #12]	; (21c4 <usb_device_endpoint_register_callback+0x24>)
    21b8:	5c9b      	ldrb	r3, [r3, r2]
    21ba:	4303      	orrs	r3, r0
    21bc:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    21be:	2000      	movs	r0, #0
    21c0:	bd10      	pop	{r4, pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	00003624 	.word	0x00003624

000021c8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    21c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    21ca:	008b      	lsls	r3, r1, #2
    21cc:	189b      	adds	r3, r3, r2
    21ce:	3334      	adds	r3, #52	; 0x34
    21d0:	009b      	lsls	r3, r3, #2
    21d2:	18c3      	adds	r3, r0, r3
    21d4:	2400      	movs	r4, #0
    21d6:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    21d8:	1841      	adds	r1, r0, r1
    21da:	3159      	adds	r1, #89	; 0x59
    21dc:	31ff      	adds	r1, #255	; 0xff
    21de:	4b03      	ldr	r3, [pc, #12]	; (21ec <usb_device_endpoint_unregister_callback+0x24>)
    21e0:	5c9a      	ldrb	r2, [r3, r2]
    21e2:	780b      	ldrb	r3, [r1, #0]
    21e4:	4393      	bics	r3, r2
    21e6:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    21e8:	2000      	movs	r0, #0
    21ea:	bd10      	pop	{r4, pc}
    21ec:	00003624 	.word	0x00003624

000021f0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    21f0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    21f2:	230f      	movs	r3, #15
    21f4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    21f6:	18c4      	adds	r4, r0, r3
    21f8:	3461      	adds	r4, #97	; 0x61
    21fa:	34ff      	adds	r4, #255	; 0xff
    21fc:	7826      	ldrb	r6, [r4, #0]
    21fe:	4d32      	ldr	r5, [pc, #200]	; (22c8 <usb_device_endpoint_enable_callback+0xd8>)
    2200:	5cad      	ldrb	r5, [r5, r2]
    2202:	4335      	orrs	r5, r6
    2204:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2206:	2a00      	cmp	r2, #0
    2208:	d11f      	bne.n	224a <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    220a:	2b00      	cmp	r3, #0
    220c:	d108      	bne.n	2220 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    220e:	015c      	lsls	r4, r3, #5
    2210:	6805      	ldr	r5, [r0, #0]
    2212:	46ac      	mov	ip, r5
    2214:	4464      	add	r4, ip
    2216:	3409      	adds	r4, #9
    2218:	34ff      	adds	r4, #255	; 0xff
    221a:	2503      	movs	r5, #3
    221c:	7065      	strb	r5, [r4, #1]
    221e:	e03d      	b.n	229c <usb_device_endpoint_enable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    2220:	b24c      	sxtb	r4, r1
    2222:	2c00      	cmp	r4, #0
    2224:	da08      	bge.n	2238 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2226:	015c      	lsls	r4, r3, #5
    2228:	6805      	ldr	r5, [r0, #0]
    222a:	46ac      	mov	ip, r5
    222c:	4464      	add	r4, ip
    222e:	3409      	adds	r4, #9
    2230:	34ff      	adds	r4, #255	; 0xff
    2232:	2502      	movs	r5, #2
    2234:	7065      	strb	r5, [r4, #1]
    2236:	e031      	b.n	229c <usb_device_endpoint_enable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    2238:	015c      	lsls	r4, r3, #5
    223a:	6805      	ldr	r5, [r0, #0]
    223c:	46ac      	mov	ip, r5
    223e:	4464      	add	r4, ip
    2240:	3409      	adds	r4, #9
    2242:	34ff      	adds	r4, #255	; 0xff
    2244:	2501      	movs	r5, #1
    2246:	7065      	strb	r5, [r4, #1]
    2248:	e028      	b.n	229c <usb_device_endpoint_enable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    224a:	2a01      	cmp	r2, #1
    224c:	d11c      	bne.n	2288 <usb_device_endpoint_enable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    224e:	2b00      	cmp	r3, #0
    2250:	d107      	bne.n	2262 <usb_device_endpoint_enable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    2252:	6802      	ldr	r2, [r0, #0]
    2254:	015b      	lsls	r3, r3, #5
    2256:	18d3      	adds	r3, r2, r3
    2258:	3309      	adds	r3, #9
    225a:	33ff      	adds	r3, #255	; 0xff
    225c:	220c      	movs	r2, #12
    225e:	705a      	strb	r2, [r3, #1]
    2260:	e030      	b.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    2262:	b249      	sxtb	r1, r1
    2264:	2900      	cmp	r1, #0
    2266:	da07      	bge.n	2278 <usb_device_endpoint_enable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2268:	6802      	ldr	r2, [r0, #0]
    226a:	015b      	lsls	r3, r3, #5
    226c:	18d3      	adds	r3, r2, r3
    226e:	3309      	adds	r3, #9
    2270:	33ff      	adds	r3, #255	; 0xff
    2272:	2208      	movs	r2, #8
    2274:	705a      	strb	r2, [r3, #1]
    2276:	e025      	b.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2278:	6802      	ldr	r2, [r0, #0]
    227a:	015b      	lsls	r3, r3, #5
    227c:	18d3      	adds	r3, r2, r3
    227e:	3309      	adds	r3, #9
    2280:	33ff      	adds	r3, #255	; 0xff
    2282:	2204      	movs	r2, #4
    2284:	705a      	strb	r2, [r3, #1]
    2286:	e01d      	b.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2288:	2a02      	cmp	r2, #2
    228a:	d107      	bne.n	229c <usb_device_endpoint_enable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    228c:	6802      	ldr	r2, [r0, #0]
    228e:	015b      	lsls	r3, r3, #5
    2290:	18d3      	adds	r3, r2, r3
    2292:	3309      	adds	r3, #9
    2294:	33ff      	adds	r3, #255	; 0xff
    2296:	2210      	movs	r2, #16
    2298:	705a      	strb	r2, [r3, #1]
    229a:	e013      	b.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    229c:	2a03      	cmp	r2, #3
    229e:	d111      	bne.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    22a0:	b249      	sxtb	r1, r1
    22a2:	2900      	cmp	r1, #0
    22a4:	da07      	bge.n	22b6 <usb_device_endpoint_enable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    22a6:	6802      	ldr	r2, [r0, #0]
    22a8:	015b      	lsls	r3, r3, #5
    22aa:	18d3      	adds	r3, r2, r3
    22ac:	3309      	adds	r3, #9
    22ae:	33ff      	adds	r3, #255	; 0xff
    22b0:	2240      	movs	r2, #64	; 0x40
    22b2:	705a      	strb	r2, [r3, #1]
    22b4:	e006      	b.n	22c4 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    22b6:	6802      	ldr	r2, [r0, #0]
    22b8:	015b      	lsls	r3, r3, #5
    22ba:	18d3      	adds	r3, r2, r3
    22bc:	3309      	adds	r3, #9
    22be:	33ff      	adds	r3, #255	; 0xff
    22c0:	2220      	movs	r2, #32
    22c2:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
}
    22c4:	2000      	movs	r0, #0
    22c6:	bd70      	pop	{r4, r5, r6, pc}
    22c8:	00003624 	.word	0x00003624

000022cc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    22cc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    22ce:	230f      	movs	r3, #15
    22d0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    22d2:	18c4      	adds	r4, r0, r3
    22d4:	3461      	adds	r4, #97	; 0x61
    22d6:	34ff      	adds	r4, #255	; 0xff
    22d8:	4d32      	ldr	r5, [pc, #200]	; (23a4 <usb_device_endpoint_disable_callback+0xd8>)
    22da:	5cae      	ldrb	r6, [r5, r2]
    22dc:	7825      	ldrb	r5, [r4, #0]
    22de:	43b5      	bics	r5, r6
    22e0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    22e2:	2a00      	cmp	r2, #0
    22e4:	d11f      	bne.n	2326 <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    22e6:	2b00      	cmp	r3, #0
    22e8:	d108      	bne.n	22fc <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    22ea:	015c      	lsls	r4, r3, #5
    22ec:	6805      	ldr	r5, [r0, #0]
    22ee:	46ac      	mov	ip, r5
    22f0:	4464      	add	r4, ip
    22f2:	3409      	adds	r4, #9
    22f4:	34ff      	adds	r4, #255	; 0xff
    22f6:	2503      	movs	r5, #3
    22f8:	7025      	strb	r5, [r4, #0]
    22fa:	e03d      	b.n	2378 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    22fc:	b24c      	sxtb	r4, r1
    22fe:	2c00      	cmp	r4, #0
    2300:	da08      	bge.n	2314 <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2302:	015c      	lsls	r4, r3, #5
    2304:	6805      	ldr	r5, [r0, #0]
    2306:	46ac      	mov	ip, r5
    2308:	4464      	add	r4, ip
    230a:	3409      	adds	r4, #9
    230c:	34ff      	adds	r4, #255	; 0xff
    230e:	2502      	movs	r5, #2
    2310:	7025      	strb	r5, [r4, #0]
    2312:	e031      	b.n	2378 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2314:	015c      	lsls	r4, r3, #5
    2316:	6805      	ldr	r5, [r0, #0]
    2318:	46ac      	mov	ip, r5
    231a:	4464      	add	r4, ip
    231c:	3409      	adds	r4, #9
    231e:	34ff      	adds	r4, #255	; 0xff
    2320:	2501      	movs	r5, #1
    2322:	7025      	strb	r5, [r4, #0]
    2324:	e028      	b.n	2378 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2326:	2a01      	cmp	r2, #1
    2328:	d11c      	bne.n	2364 <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    232a:	2b00      	cmp	r3, #0
    232c:	d107      	bne.n	233e <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    232e:	6802      	ldr	r2, [r0, #0]
    2330:	015b      	lsls	r3, r3, #5
    2332:	18d3      	adds	r3, r2, r3
    2334:	3309      	adds	r3, #9
    2336:	33ff      	adds	r3, #255	; 0xff
    2338:	220c      	movs	r2, #12
    233a:	701a      	strb	r2, [r3, #0]
    233c:	e030      	b.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    233e:	b249      	sxtb	r1, r1
    2340:	2900      	cmp	r1, #0
    2342:	da07      	bge.n	2354 <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2344:	6802      	ldr	r2, [r0, #0]
    2346:	015b      	lsls	r3, r3, #5
    2348:	18d3      	adds	r3, r2, r3
    234a:	3309      	adds	r3, #9
    234c:	33ff      	adds	r3, #255	; 0xff
    234e:	2208      	movs	r2, #8
    2350:	701a      	strb	r2, [r3, #0]
    2352:	e025      	b.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    2354:	6802      	ldr	r2, [r0, #0]
    2356:	015b      	lsls	r3, r3, #5
    2358:	18d3      	adds	r3, r2, r3
    235a:	3309      	adds	r3, #9
    235c:	33ff      	adds	r3, #255	; 0xff
    235e:	2204      	movs	r2, #4
    2360:	701a      	strb	r2, [r3, #0]
    2362:	e01d      	b.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2364:	2a02      	cmp	r2, #2
    2366:	d107      	bne.n	2378 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2368:	6802      	ldr	r2, [r0, #0]
    236a:	015b      	lsls	r3, r3, #5
    236c:	18d3      	adds	r3, r2, r3
    236e:	3309      	adds	r3, #9
    2370:	33ff      	adds	r3, #255	; 0xff
    2372:	2210      	movs	r2, #16
    2374:	701a      	strb	r2, [r3, #0]
    2376:	e013      	b.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2378:	2a03      	cmp	r2, #3
    237a:	d111      	bne.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    237c:	b249      	sxtb	r1, r1
    237e:	2900      	cmp	r1, #0
    2380:	da07      	bge.n	2392 <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2382:	6802      	ldr	r2, [r0, #0]
    2384:	015b      	lsls	r3, r3, #5
    2386:	18d3      	adds	r3, r2, r3
    2388:	3309      	adds	r3, #9
    238a:	33ff      	adds	r3, #255	; 0xff
    238c:	2240      	movs	r2, #64	; 0x40
    238e:	701a      	strb	r2, [r3, #0]
    2390:	e006      	b.n	23a0 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    2392:	6802      	ldr	r2, [r0, #0]
    2394:	015b      	lsls	r3, r3, #5
    2396:	18d3      	adds	r3, r2, r3
    2398:	3309      	adds	r3, #9
    239a:	33ff      	adds	r3, #255	; 0xff
    239c:	2220      	movs	r2, #32
    239e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    23a0:	2000      	movs	r0, #0
    23a2:	bd70      	pop	{r4, r5, r6, pc}
    23a4:	00003624 	.word	0x00003624

000023a8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    23a8:	2300      	movs	r3, #0
    23aa:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    23ac:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    23ae:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    23b0:	3301      	adds	r3, #1
    23b2:	70c3      	strb	r3, [r0, #3]
}
    23b4:	4770      	bx	lr
    23b6:	46c0      	nop			; (mov r8, r8)

000023b8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    23b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    23ba:	780a      	ldrb	r2, [r1, #0]
    23bc:	230f      	movs	r3, #15
    23be:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    23c0:	09d4      	lsrs	r4, r2, #7

	switch (ep_config->ep_type) {
    23c2:	78ca      	ldrb	r2, [r1, #3]
    23c4:	2a04      	cmp	r2, #4
    23c6:	d900      	bls.n	23ca <usb_device_endpoint_set_config+0x12>
    23c8:	e0f0      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
    23ca:	0092      	lsls	r2, r2, #2
    23cc:	4e8c      	ldr	r6, [pc, #560]	; (2600 <usb_device_endpoint_set_config+0x248>)
    23ce:	58b2      	ldr	r2, [r6, r2]
    23d0:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    23d2:	6802      	ldr	r2, [r0, #0]
    23d4:	3308      	adds	r3, #8
    23d6:	015b      	lsls	r3, r3, #5
    23d8:	2100      	movs	r1, #0
    23da:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    23dc:	2200      	movs	r2, #0
    23de:	e10c      	b.n	25fa <usb_device_endpoint_set_config+0x242>
    23e0:	015c      	lsls	r4, r3, #5
    23e2:	6802      	ldr	r2, [r0, #0]
    23e4:	4694      	mov	ip, r2
    23e6:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    23e8:	2280      	movs	r2, #128	; 0x80
    23ea:	0052      	lsls	r2, r2, #1
    23ec:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    23ee:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    23f0:	076d      	lsls	r5, r5, #29
    23f2:	d000      	beq.n	23f6 <usb_device_endpoint_set_config+0x3e>
    23f4:	e101      	b.n	25fa <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    23f6:	32e4      	adds	r2, #228	; 0xe4
    23f8:	5ca6      	ldrb	r6, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    23fa:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    23fc:	2570      	movs	r5, #112	; 0x70
    23fe:	422e      	tst	r6, r5
    2400:	d000      	beq.n	2404 <usb_device_endpoint_set_config+0x4c>
    2402:	e0fa      	b.n	25fa <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2404:	3d5f      	subs	r5, #95	; 0x5f
    2406:	32e4      	adds	r2, #228	; 0xe4
    2408:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    240a:	1c1a      	adds	r2, r3, #0
    240c:	3208      	adds	r2, #8
    240e:	0152      	lsls	r2, r2, #5
    2410:	6804      	ldr	r4, [r0, #0]
    2412:	18a4      	adds	r4, r4, r2
    2414:	352f      	adds	r5, #47	; 0x2f
    2416:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2418:	6800      	ldr	r0, [r0, #0]
    241a:	1882      	adds	r2, r0, r2
    241c:	2080      	movs	r0, #128	; 0x80
    241e:	7110      	strb	r0, [r2, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    2420:	788a      	ldrb	r2, [r1, #2]
    2422:	2a00      	cmp	r2, #0
    2424:	d00b      	beq.n	243e <usb_device_endpoint_set_config+0x86>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2426:	015a      	lsls	r2, r3, #5
    2428:	4876      	ldr	r0, [pc, #472]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    242a:	1882      	adds	r2, r0, r2
    242c:	6854      	ldr	r4, [r2, #4]
    242e:	2580      	movs	r5, #128	; 0x80
    2430:	062d      	lsls	r5, r5, #24
    2432:	432c      	orrs	r4, r5
    2434:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2436:	6950      	ldr	r0, [r2, #20]
    2438:	4328      	orrs	r0, r5
    243a:	6150      	str	r0, [r2, #20]
    243c:	e00a      	b.n	2454 <usb_device_endpoint_set_config+0x9c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    243e:	015a      	lsls	r2, r3, #5
    2440:	4870      	ldr	r0, [pc, #448]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    2442:	1882      	adds	r2, r0, r2
    2444:	6850      	ldr	r0, [r2, #4]
    2446:	0040      	lsls	r0, r0, #1
    2448:	0840      	lsrs	r0, r0, #1
    244a:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    244c:	6950      	ldr	r0, [r2, #20]
    244e:	0040      	lsls	r0, r0, #1
    2450:	0840      	lsrs	r0, r0, #1
    2452:	6150      	str	r0, [r2, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2454:	2207      	movs	r2, #7
    2456:	7848      	ldrb	r0, [r1, #1]
    2458:	015b      	lsls	r3, r3, #5
    245a:	4c6a      	ldr	r4, [pc, #424]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    245c:	18e3      	adds	r3, r4, r3
    245e:	4010      	ands	r0, r2
    2460:	0704      	lsls	r4, r0, #28
    2462:	6858      	ldr	r0, [r3, #4]
    2464:	4d68      	ldr	r5, [pc, #416]	; (2608 <usb_device_endpoint_set_config+0x250>)
    2466:	4028      	ands	r0, r5
    2468:	4320      	orrs	r0, r4
    246a:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    246c:	7849      	ldrb	r1, [r1, #1]
    246e:	400a      	ands	r2, r1
    2470:	0711      	lsls	r1, r2, #28
    2472:	695a      	ldr	r2, [r3, #20]
    2474:	402a      	ands	r2, r5
    2476:	430a      	orrs	r2, r1
    2478:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    247a:	2200      	movs	r2, #0
    247c:	e0bd      	b.n	25fa <usb_device_endpoint_set_config+0x242>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    247e:	2c00      	cmp	r4, #0
    2480:	d018      	beq.n	24b4 <usb_device_endpoint_set_config+0xfc>
    2482:	015d      	lsls	r5, r3, #5
    2484:	6802      	ldr	r2, [r0, #0]
    2486:	4694      	mov	ip, r2
    2488:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    248a:	2280      	movs	r2, #128	; 0x80
    248c:	0052      	lsls	r2, r2, #1
    248e:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    2490:	3ae4      	subs	r2, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2492:	2670      	movs	r6, #112	; 0x70
    2494:	4237      	tst	r7, r6
    2496:	d000      	beq.n	249a <usb_device_endpoint_set_config+0xe2>
    2498:	e0af      	b.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    249a:	3690      	adds	r6, #144	; 0x90
    249c:	5daf      	ldrb	r7, [r5, r6]
    249e:	3204      	adds	r2, #4
    24a0:	433a      	orrs	r2, r7
    24a2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    24a4:	6800      	ldr	r0, [r0, #0]
    24a6:	1c1a      	adds	r2, r3, #0
    24a8:	3208      	adds	r2, #8
    24aa:	0152      	lsls	r2, r2, #5
    24ac:	1882      	adds	r2, r0, r2
    24ae:	2080      	movs	r0, #128	; 0x80
    24b0:	7110      	strb	r0, [r2, #4]
    24b2:	e07b      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
    24b4:	015d      	lsls	r5, r3, #5
    24b6:	6802      	ldr	r2, [r0, #0]
    24b8:	4694      	mov	ip, r2
    24ba:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    24bc:	2280      	movs	r2, #128	; 0x80
    24be:	0052      	lsls	r2, r2, #1
    24c0:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    24c2:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    24c4:	0776      	lsls	r6, r6, #29
    24c6:	d000      	beq.n	24ca <usb_device_endpoint_set_config+0x112>
    24c8:	e097      	b.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    24ca:	2680      	movs	r6, #128	; 0x80
    24cc:	0076      	lsls	r6, r6, #1
    24ce:	5daf      	ldrb	r7, [r5, r6]
    24d0:	3a1a      	subs	r2, #26
    24d2:	433a      	orrs	r2, r7
    24d4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    24d6:	6800      	ldr	r0, [r0, #0]
    24d8:	1c1a      	adds	r2, r3, #0
    24da:	3208      	adds	r2, #8
    24dc:	0152      	lsls	r2, r2, #5
    24de:	1882      	adds	r2, r0, r2
    24e0:	2040      	movs	r0, #64	; 0x40
    24e2:	7150      	strb	r0, [r2, #5]
    24e4:	e062      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    24e6:	2c00      	cmp	r4, #0
    24e8:	d017      	beq.n	251a <usb_device_endpoint_set_config+0x162>
    24ea:	015d      	lsls	r5, r3, #5
    24ec:	6802      	ldr	r2, [r0, #0]
    24ee:	4694      	mov	ip, r2
    24f0:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    24f2:	2280      	movs	r2, #128	; 0x80
    24f4:	0052      	lsls	r2, r2, #1
    24f6:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    24f8:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    24fa:	2670      	movs	r6, #112	; 0x70
    24fc:	4237      	tst	r7, r6
    24fe:	d17c      	bne.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2500:	3690      	adds	r6, #144	; 0x90
    2502:	5daf      	ldrb	r7, [r5, r6]
    2504:	3214      	adds	r2, #20
    2506:	433a      	orrs	r2, r7
    2508:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    250a:	6800      	ldr	r0, [r0, #0]
    250c:	1c1a      	adds	r2, r3, #0
    250e:	3208      	adds	r2, #8
    2510:	0152      	lsls	r2, r2, #5
    2512:	1882      	adds	r2, r0, r2
    2514:	2080      	movs	r0, #128	; 0x80
    2516:	7110      	strb	r0, [r2, #4]
    2518:	e048      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
    251a:	015d      	lsls	r5, r3, #5
    251c:	6802      	ldr	r2, [r0, #0]
    251e:	4694      	mov	ip, r2
    2520:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	0052      	lsls	r2, r2, #1
    2526:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2528:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    252a:	0776      	lsls	r6, r6, #29
    252c:	d165      	bne.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    252e:	2680      	movs	r6, #128	; 0x80
    2530:	0076      	lsls	r6, r6, #1
    2532:	5daf      	ldrb	r7, [r5, r6]
    2534:	3a19      	subs	r2, #25
    2536:	433a      	orrs	r2, r7
    2538:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    253a:	6800      	ldr	r0, [r0, #0]
    253c:	1c1a      	adds	r2, r3, #0
    253e:	3208      	adds	r2, #8
    2540:	0152      	lsls	r2, r2, #5
    2542:	1882      	adds	r2, r0, r2
    2544:	2040      	movs	r0, #64	; 0x40
    2546:	7150      	strb	r0, [r2, #5]
    2548:	e030      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    254a:	2c00      	cmp	r4, #0
    254c:	d017      	beq.n	257e <usb_device_endpoint_set_config+0x1c6>
    254e:	015d      	lsls	r5, r3, #5
    2550:	6802      	ldr	r2, [r0, #0]
    2552:	4694      	mov	ip, r2
    2554:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2556:	2280      	movs	r2, #128	; 0x80
    2558:	0052      	lsls	r2, r2, #1
    255a:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    255c:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    255e:	2670      	movs	r6, #112	; 0x70
    2560:	4237      	tst	r7, r6
    2562:	d14a      	bne.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2564:	3690      	adds	r6, #144	; 0x90
    2566:	5daf      	ldrb	r7, [r5, r6]
    2568:	3224      	adds	r2, #36	; 0x24
    256a:	433a      	orrs	r2, r7
    256c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    256e:	6800      	ldr	r0, [r0, #0]
    2570:	1c1a      	adds	r2, r3, #0
    2572:	3208      	adds	r2, #8
    2574:	0152      	lsls	r2, r2, #5
    2576:	1882      	adds	r2, r0, r2
    2578:	2080      	movs	r0, #128	; 0x80
    257a:	7110      	strb	r0, [r2, #4]
    257c:	e016      	b.n	25ac <usb_device_endpoint_set_config+0x1f4>
    257e:	015d      	lsls	r5, r3, #5
    2580:	6802      	ldr	r2, [r0, #0]
    2582:	4694      	mov	ip, r2
    2584:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2586:	2280      	movs	r2, #128	; 0x80
    2588:	0052      	lsls	r2, r2, #1
    258a:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    258c:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    258e:	0776      	lsls	r6, r6, #29
    2590:	d133      	bne.n	25fa <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2592:	2680      	movs	r6, #128	; 0x80
    2594:	0076      	lsls	r6, r6, #1
    2596:	5daf      	ldrb	r7, [r5, r6]
    2598:	3a18      	subs	r2, #24
    259a:	433a      	orrs	r2, r7
    259c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    259e:	6800      	ldr	r0, [r0, #0]
    25a0:	1c1a      	adds	r2, r3, #0
    25a2:	3208      	adds	r2, #8
    25a4:	0152      	lsls	r2, r2, #5
    25a6:	1882      	adds	r2, r0, r2
    25a8:	2040      	movs	r0, #64	; 0x40
    25aa:	7150      	strb	r0, [r2, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    25ac:	7848      	ldrb	r0, [r1, #1]
    25ae:	005a      	lsls	r2, r3, #1
    25b0:	1912      	adds	r2, r2, r4
    25b2:	0112      	lsls	r2, r2, #4
    25b4:	4d13      	ldr	r5, [pc, #76]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    25b6:	18aa      	adds	r2, r5, r2
    25b8:	2507      	movs	r5, #7
    25ba:	4028      	ands	r0, r5
    25bc:	0705      	lsls	r5, r0, #28
    25be:	6856      	ldr	r6, [r2, #4]
    25c0:	4811      	ldr	r0, [pc, #68]	; (2608 <usb_device_endpoint_set_config+0x250>)
    25c2:	4030      	ands	r0, r6
    25c4:	4328      	orrs	r0, r5
    25c6:	6050      	str	r0, [r2, #4]

	if (true == ep_config->auto_zlp) {
    25c8:	788a      	ldrb	r2, [r1, #2]
    25ca:	2a00      	cmp	r2, #0
    25cc:	d00b      	beq.n	25e6 <usb_device_endpoint_set_config+0x22e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    25ce:	005b      	lsls	r3, r3, #1
    25d0:	191a      	adds	r2, r3, r4
    25d2:	0112      	lsls	r2, r2, #4
    25d4:	4c0b      	ldr	r4, [pc, #44]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    25d6:	18a2      	adds	r2, r4, r2
    25d8:	6853      	ldr	r3, [r2, #4]
    25da:	2180      	movs	r1, #128	; 0x80
    25dc:	0609      	lsls	r1, r1, #24
    25de:	430b      	orrs	r3, r1
    25e0:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    25e2:	2200      	movs	r2, #0
    25e4:	e009      	b.n	25fa <usb_device_endpoint_set_config+0x242>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    25e6:	005b      	lsls	r3, r3, #1
    25e8:	191b      	adds	r3, r3, r4
    25ea:	011b      	lsls	r3, r3, #4
    25ec:	4a05      	ldr	r2, [pc, #20]	; (2604 <usb_device_endpoint_set_config+0x24c>)
    25ee:	18d3      	adds	r3, r2, r3
    25f0:	685a      	ldr	r2, [r3, #4]
    25f2:	0052      	lsls	r2, r2, #1
    25f4:	0852      	lsrs	r2, r2, #1
    25f6:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    25f8:	2200      	movs	r2, #0
}
    25fa:	1c10      	adds	r0, r2, #0
    25fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	00003600 	.word	0x00003600
    2604:	200003b0 	.word	0x200003b0
    2608:	8fffffff 	.word	0x8fffffff

0000260c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    260c:	230f      	movs	r3, #15
    260e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2610:	b249      	sxtb	r1, r1
    2612:	2900      	cmp	r1, #0
    2614:	da0a      	bge.n	262c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2616:	3308      	adds	r3, #8
    2618:	015b      	lsls	r3, r3, #5
    261a:	6802      	ldr	r2, [r0, #0]
    261c:	18d2      	adds	r2, r2, r3
    261e:	2180      	movs	r1, #128	; 0x80
    2620:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2622:	6802      	ldr	r2, [r0, #0]
    2624:	18d3      	adds	r3, r2, r3
    2626:	2202      	movs	r2, #2
    2628:	71da      	strb	r2, [r3, #7]
    262a:	e009      	b.n	2640 <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    262c:	3308      	adds	r3, #8
    262e:	015b      	lsls	r3, r3, #5
    2630:	6802      	ldr	r2, [r0, #0]
    2632:	18d2      	adds	r2, r2, r3
    2634:	2140      	movs	r1, #64	; 0x40
    2636:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2638:	6802      	ldr	r2, [r0, #0]
    263a:	18d3      	adds	r3, r2, r3
    263c:	2201      	movs	r2, #1
    263e:	71da      	strb	r2, [r3, #7]
	}
}
    2640:	4770      	bx	lr
    2642:	46c0      	nop			; (mov r8, r8)

00002644 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2644:	230f      	movs	r3, #15
    2646:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2648:	b249      	sxtb	r1, r1
    264a:	2900      	cmp	r1, #0
    264c:	da07      	bge.n	265e <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    264e:	6802      	ldr	r2, [r0, #0]
    2650:	3308      	adds	r3, #8
    2652:	015b      	lsls	r3, r3, #5
    2654:	18d3      	adds	r3, r2, r3
    2656:	7998      	ldrb	r0, [r3, #6]
    2658:	0680      	lsls	r0, r0, #26
    265a:	0fc0      	lsrs	r0, r0, #31
    265c:	e006      	b.n	266c <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    265e:	6802      	ldr	r2, [r0, #0]
    2660:	3308      	adds	r3, #8
    2662:	015b      	lsls	r3, r3, #5
    2664:	18d3      	adds	r3, r2, r3
    2666:	7998      	ldrb	r0, [r3, #6]
    2668:	06c0      	lsls	r0, r0, #27
    266a:	0fc0      	lsrs	r0, r0, #31
	}
}
    266c:	4770      	bx	lr
    266e:	46c0      	nop			; (mov r8, r8)

00002670 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2670:	230f      	movs	r3, #15
    2672:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2674:	b249      	sxtb	r1, r1
    2676:	2900      	cmp	r1, #0
    2678:	da06      	bge.n	2688 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    267a:	6802      	ldr	r2, [r0, #0]
    267c:	3308      	adds	r3, #8
    267e:	015b      	lsls	r3, r3, #5
    2680:	18d3      	adds	r3, r2, r3
    2682:	2220      	movs	r2, #32
    2684:	715a      	strb	r2, [r3, #5]
    2686:	e005      	b.n	2694 <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2688:	6802      	ldr	r2, [r0, #0]
    268a:	3308      	adds	r3, #8
    268c:	015b      	lsls	r3, r3, #5
    268e:	18d3      	adds	r3, r2, r3
    2690:	2210      	movs	r2, #16
    2692:	715a      	strb	r2, [r3, #5]
	}
}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			; (mov r8, r8)

00002698 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2698:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    269a:	230f      	movs	r3, #15
    269c:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    269e:	b249      	sxtb	r1, r1
    26a0:	2900      	cmp	r1, #0
    26a2:	da1e      	bge.n	26e2 <usb_device_endpoint_clear_halt+0x4a>
    26a4:	0159      	lsls	r1, r3, #5
    26a6:	6802      	ldr	r2, [r0, #0]
    26a8:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    26aa:	2483      	movs	r4, #131	; 0x83
    26ac:	0064      	lsls	r4, r4, #1
    26ae:	5d14      	ldrb	r4, [r2, r4]
    26b0:	06a4      	lsls	r4, r4, #26
    26b2:	d534      	bpl.n	271e <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    26b4:	2520      	movs	r5, #32
    26b6:	2482      	movs	r4, #130	; 0x82
    26b8:	0064      	lsls	r4, r4, #1
    26ba:	5515      	strb	r5, [r2, r4]
    26bc:	6802      	ldr	r2, [r0, #0]
    26be:	4694      	mov	ip, r2
    26c0:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    26c2:	2208      	movs	r2, #8
    26c4:	32ff      	adds	r2, #255	; 0xff
    26c6:	5c8a      	ldrb	r2, [r1, r2]
    26c8:	0652      	lsls	r2, r2, #25
    26ca:	d528      	bpl.n	271e <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    26cc:	3cc4      	subs	r4, #196	; 0xc4
    26ce:	2208      	movs	r2, #8
    26d0:	32ff      	adds	r2, #255	; 0xff
    26d2:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    26d4:	6802      	ldr	r2, [r0, #0]
    26d6:	3308      	adds	r3, #8
    26d8:	015b      	lsls	r3, r3, #5
    26da:	18d3      	adds	r3, r2, r3
    26dc:	2202      	movs	r2, #2
    26de:	711a      	strb	r2, [r3, #4]
    26e0:	e01d      	b.n	271e <usb_device_endpoint_clear_halt+0x86>
    26e2:	0159      	lsls	r1, r3, #5
    26e4:	6802      	ldr	r2, [r0, #0]
    26e6:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    26e8:	2483      	movs	r4, #131	; 0x83
    26ea:	0064      	lsls	r4, r4, #1
    26ec:	5d14      	ldrb	r4, [r2, r4]
    26ee:	06e4      	lsls	r4, r4, #27
    26f0:	d515      	bpl.n	271e <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    26f2:	2510      	movs	r5, #16
    26f4:	2482      	movs	r4, #130	; 0x82
    26f6:	0064      	lsls	r4, r4, #1
    26f8:	5515      	strb	r5, [r2, r4]
    26fa:	6802      	ldr	r2, [r0, #0]
    26fc:	4694      	mov	ip, r2
    26fe:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2700:	2208      	movs	r2, #8
    2702:	32ff      	adds	r2, #255	; 0xff
    2704:	5c8a      	ldrb	r2, [r1, r2]
    2706:	0692      	lsls	r2, r2, #26
    2708:	d509      	bpl.n	271e <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    270a:	3ce4      	subs	r4, #228	; 0xe4
    270c:	2208      	movs	r2, #8
    270e:	32ff      	adds	r2, #255	; 0xff
    2710:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2712:	6802      	ldr	r2, [r0, #0]
    2714:	3308      	adds	r3, #8
    2716:	015b      	lsls	r3, r3, #5
    2718:	18d3      	adds	r3, r2, r3
    271a:	2201      	movs	r2, #1
    271c:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    271e:	bd30      	pop	{r4, r5, pc}

00002720 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2720:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2722:	1c0c      	adds	r4, r1, #0
    2724:	3408      	adds	r4, #8
    2726:	0164      	lsls	r4, r4, #5
    2728:	6805      	ldr	r5, [r0, #0]
    272a:	5d64      	ldrb	r4, [r4, r5]
    272c:	0664      	lsls	r4, r4, #25
    272e:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2730:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2732:	2c00      	cmp	r4, #0
    2734:	d016      	beq.n	2764 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2736:	014c      	lsls	r4, r1, #5
    2738:	4d0b      	ldr	r5, [pc, #44]	; (2768 <usb_device_endpoint_write_buffer_job+0x48>)
    273a:	192d      	adds	r5, r5, r4
    273c:	1c2c      	adds	r4, r5, #0
    273e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2740:	696d      	ldr	r5, [r5, #20]
    2742:	4a0a      	ldr	r2, [pc, #40]	; (276c <usb_device_endpoint_write_buffer_job+0x4c>)
    2744:	402a      	ands	r2, r5
    2746:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2748:	049b      	lsls	r3, r3, #18
    274a:	0c9a      	lsrs	r2, r3, #18
    274c:	6963      	ldr	r3, [r4, #20]
    274e:	0b9b      	lsrs	r3, r3, #14
    2750:	039b      	lsls	r3, r3, #14
    2752:	4313      	orrs	r3, r2
    2754:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2756:	6803      	ldr	r3, [r0, #0]
    2758:	3108      	adds	r1, #8
    275a:	0149      	lsls	r1, r1, #5
    275c:	1859      	adds	r1, r3, r1
    275e:	2380      	movs	r3, #128	; 0x80
    2760:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    2762:	2500      	movs	r5, #0
}
    2764:	1c28      	adds	r0, r5, #0
    2766:	bd30      	pop	{r4, r5, pc}
    2768:	200003b0 	.word	0x200003b0
    276c:	f0003fff 	.word	0xf0003fff

00002770 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2770:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2772:	1c0c      	adds	r4, r1, #0
    2774:	3408      	adds	r4, #8
    2776:	0164      	lsls	r4, r4, #5
    2778:	6805      	ldr	r5, [r0, #0]
    277a:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    277c:	241c      	movs	r4, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    277e:	076d      	lsls	r5, r5, #29
    2780:	d015      	beq.n	27ae <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2782:	4d0c      	ldr	r5, [pc, #48]	; (27b4 <usb_device_endpoint_read_buffer_job+0x44>)
    2784:	014c      	lsls	r4, r1, #5
    2786:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2788:	192c      	adds	r4, r5, r4
    278a:	049b      	lsls	r3, r3, #18
    278c:	091a      	lsrs	r2, r3, #4
    278e:	6865      	ldr	r5, [r4, #4]
    2790:	4b09      	ldr	r3, [pc, #36]	; (27b8 <usb_device_endpoint_read_buffer_job+0x48>)
    2792:	402b      	ands	r3, r5
    2794:	4313      	orrs	r3, r2
    2796:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2798:	6863      	ldr	r3, [r4, #4]
    279a:	0b9b      	lsrs	r3, r3, #14
    279c:	039b      	lsls	r3, r3, #14
    279e:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    27a0:	6803      	ldr	r3, [r0, #0]
    27a2:	3108      	adds	r1, #8
    27a4:	0149      	lsls	r1, r1, #5
    27a6:	1859      	adds	r1, r3, r1
    27a8:	2340      	movs	r3, #64	; 0x40
    27aa:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    27ac:	2400      	movs	r4, #0
}
    27ae:	1c20      	adds	r0, r4, #0
    27b0:	bd30      	pop	{r4, r5, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	200003b0 	.word	0x200003b0
    27b8:	f0003fff 	.word	0xf0003fff

000027bc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    27bc:	4b09      	ldr	r3, [pc, #36]	; (27e4 <usb_device_endpoint_setup_buffer_job+0x28>)
    27be:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    27c0:	6859      	ldr	r1, [r3, #4]
    27c2:	4a09      	ldr	r2, [pc, #36]	; (27e8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    27c4:	400a      	ands	r2, r1
    27c6:	2180      	movs	r1, #128	; 0x80
    27c8:	0289      	lsls	r1, r1, #10
    27ca:	430a      	orrs	r2, r1
    27cc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    27ce:	685a      	ldr	r2, [r3, #4]
    27d0:	0b92      	lsrs	r2, r2, #14
    27d2:	0392      	lsls	r2, r2, #14
    27d4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    27d6:	6802      	ldr	r2, [r0, #0]
    27d8:	2140      	movs	r1, #64	; 0x40
    27da:	2382      	movs	r3, #130	; 0x82
    27dc:	005b      	lsls	r3, r3, #1
    27de:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    27e0:	2000      	movs	r0, #0
    27e2:	4770      	bx	lr
    27e4:	200003b0 	.word	0x200003b0
    27e8:	f0003fff 	.word	0xf0003fff

000027ec <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    27ec:	6802      	ldr	r2, [r0, #0]
    27ee:	7811      	ldrb	r1, [r2, #0]
    27f0:	2302      	movs	r3, #2
    27f2:	430b      	orrs	r3, r1
    27f4:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    27f6:	6802      	ldr	r2, [r0, #0]
    27f8:	7893      	ldrb	r3, [r2, #2]
    27fa:	2b02      	cmp	r3, #2
    27fc:	d0fc      	beq.n	27f8 <usb_enable+0xc>
}
    27fe:	4770      	bx	lr

00002800 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	465f      	mov	r7, fp
    2804:	4656      	mov	r6, sl
    2806:	464d      	mov	r5, r9
    2808:	4644      	mov	r4, r8
    280a:	b4f0      	push	{r4, r5, r6, r7}
    280c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    280e:	4bc8      	ldr	r3, [pc, #800]	; (2b30 <USB_Handler+0x330>)
    2810:	681f      	ldr	r7, [r3, #0]
    2812:	683d      	ldr	r5, [r7, #0]
    2814:	782b      	ldrb	r3, [r5, #0]
    2816:	09db      	lsrs	r3, r3, #7
    2818:	d100      	bne.n	281c <USB_Handler+0x1c>
    281a:	e154      	b.n	2ac6 <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    281c:	8c28      	ldrh	r0, [r5, #32]
    281e:	b280      	uxth	r0, r0
    2820:	4bc4      	ldr	r3, [pc, #784]	; (2b34 <USB_Handler+0x334>)
    2822:	4798      	blx	r3
    2824:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    2826:	2c1f      	cmp	r4, #31
    2828:	d900      	bls.n	282c <USB_Handler+0x2c>
    282a:	e0d2      	b.n	29d2 <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    282c:	1c03      	adds	r3, r0, #0
    282e:	3308      	adds	r3, #8
    2830:	015b      	lsls	r3, r3, #5
    2832:	18ed      	adds	r5, r5, r3
    2834:	79ed      	ldrb	r5, [r5, #7]
    2836:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2838:	07ab      	lsls	r3, r5, #30
    283a:	d050      	beq.n	28de <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    283c:	4abe      	ldr	r2, [pc, #760]	; (2b38 <USB_Handler+0x338>)
    283e:	2301      	movs	r3, #1
    2840:	4083      	lsls	r3, r0
    2842:	6811      	ldr	r1, [r2, #0]
    2844:	4399      	bics	r1, r3
    2846:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2848:	1c03      	adds	r3, r0, #0
    284a:	3308      	adds	r3, #8
    284c:	015b      	lsls	r3, r3, #5
    284e:	683a      	ldr	r2, [r7, #0]
    2850:	4694      	mov	ip, r2
    2852:	4463      	add	r3, ip
    2854:	2203      	movs	r2, #3
    2856:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2858:	183b      	adds	r3, r7, r0
    285a:	33a8      	adds	r3, #168	; 0xa8
    285c:	799b      	ldrb	r3, [r3, #6]
    285e:	07db      	lsls	r3, r3, #31
    2860:	d53d      	bpl.n	28de <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    2862:	4bb6      	ldr	r3, [pc, #728]	; (2b3c <USB_Handler+0x33c>)
    2864:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2866:	683a      	ldr	r2, [r7, #0]
    2868:	1c03      	adds	r3, r0, #0
    286a:	3308      	adds	r3, #8
    286c:	015b      	lsls	r3, r3, #5
    286e:	5c9b      	ldrb	r3, [r3, r2]
    2870:	2203      	movs	r2, #3
    2872:	4013      	ands	r3, r2
    2874:	2b01      	cmp	r3, #1
    2876:	d110      	bne.n	289a <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2878:	0142      	lsls	r2, r0, #5
    287a:	4bb1      	ldr	r3, [pc, #708]	; (2b40 <USB_Handler+0x340>)
    287c:	189b      	adds	r3, r3, r2
    287e:	685a      	ldr	r2, [r3, #4]
    2880:	0492      	lsls	r2, r2, #18
    2882:	0c92      	lsrs	r2, r2, #18
    2884:	49ad      	ldr	r1, [pc, #692]	; (2b3c <USB_Handler+0x33c>)
    2886:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2888:	685a      	ldr	r2, [r3, #4]
    288a:	0112      	lsls	r2, r2, #4
    288c:	0c92      	lsrs	r2, r2, #18
    288e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2890:	685a      	ldr	r2, [r3, #4]
    2892:	0b92      	lsrs	r2, r2, #14
    2894:	0392      	lsls	r2, r2, #14
    2896:	605a      	str	r2, [r3, #4]
    2898:	e019      	b.n	28ce <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    289a:	0143      	lsls	r3, r0, #5
    289c:	4aa8      	ldr	r2, [pc, #672]	; (2b40 <USB_Handler+0x340>)
    289e:	18d3      	adds	r3, r2, r3
    28a0:	685a      	ldr	r2, [r3, #4]
    28a2:	0112      	lsls	r2, r2, #4
    28a4:	0c92      	lsrs	r2, r2, #18
    28a6:	48a5      	ldr	r0, [pc, #660]	; (2b3c <USB_Handler+0x33c>)
    28a8:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    28aa:	6859      	ldr	r1, [r3, #4]
    28ac:	0489      	lsls	r1, r1, #18
    28ae:	0c89      	lsrs	r1, r1, #18
    28b0:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    28b2:	6858      	ldr	r0, [r3, #4]
    28b4:	49a3      	ldr	r1, [pc, #652]	; (2b44 <USB_Handler+0x344>)
    28b6:	4001      	ands	r1, r0
    28b8:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    28ba:	2a00      	cmp	r2, #0
    28bc:	d107      	bne.n	28ce <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    28be:	0163      	lsls	r3, r4, #5
    28c0:	4a9f      	ldr	r2, [pc, #636]	; (2b40 <USB_Handler+0x340>)
    28c2:	18d3      	adds	r3, r2, r3
    28c4:	685b      	ldr	r3, [r3, #4]
    28c6:	049b      	lsls	r3, r3, #18
    28c8:	0c9b      	lsrs	r3, r3, #18
    28ca:	4a9c      	ldr	r2, [pc, #624]	; (2b3c <USB_Handler+0x33c>)
    28cc:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    28ce:	4b98      	ldr	r3, [pc, #608]	; (2b30 <USB_Handler+0x330>)
    28d0:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    28d2:	1ca3      	adds	r3, r4, #2
    28d4:	011b      	lsls	r3, r3, #4
    28d6:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    28d8:	685b      	ldr	r3, [r3, #4]
    28da:	4998      	ldr	r1, [pc, #608]	; (2b3c <USB_Handler+0x33c>)
    28dc:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    28de:	076b      	lsls	r3, r5, #29
    28e0:	d50e      	bpl.n	2900 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    28e2:	4a95      	ldr	r2, [pc, #596]	; (2b38 <USB_Handler+0x338>)
    28e4:	2301      	movs	r3, #1
    28e6:	40a3      	lsls	r3, r4
    28e8:	6811      	ldr	r1, [r2, #0]
    28ea:	4399      	bics	r1, r3
    28ec:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    28ee:	4b90      	ldr	r3, [pc, #576]	; (2b30 <USB_Handler+0x330>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	681a      	ldr	r2, [r3, #0]
    28f4:	1c23      	adds	r3, r4, #0
    28f6:	3308      	adds	r3, #8
    28f8:	015b      	lsls	r3, r3, #5
    28fa:	18d3      	adds	r3, r2, r3
    28fc:	2204      	movs	r2, #4
    28fe:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2900:	072b      	lsls	r3, r5, #28
    2902:	d521      	bpl.n	2948 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2904:	4a8c      	ldr	r2, [pc, #560]	; (2b38 <USB_Handler+0x338>)
    2906:	2301      	movs	r3, #1
    2908:	40a3      	lsls	r3, r4
    290a:	6811      	ldr	r1, [r2, #0]
    290c:	4399      	bics	r1, r3
    290e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2910:	4b87      	ldr	r3, [pc, #540]	; (2b30 <USB_Handler+0x330>)
    2912:	6818      	ldr	r0, [r3, #0]
    2914:	1c23      	adds	r3, r4, #0
    2916:	3308      	adds	r3, #8
    2918:	015b      	lsls	r3, r3, #5
    291a:	6802      	ldr	r2, [r0, #0]
    291c:	4694      	mov	ip, r2
    291e:	4463      	add	r3, ip
    2920:	2208      	movs	r2, #8
    2922:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2924:	1903      	adds	r3, r0, r4
    2926:	33a8      	adds	r3, #168	; 0xa8
    2928:	799b      	ldrb	r3, [r3, #6]
    292a:	079b      	lsls	r3, r3, #30
    292c:	d50c      	bpl.n	2948 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    292e:	4983      	ldr	r1, [pc, #524]	; (2b3c <USB_Handler+0x33c>)
    2930:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    2932:	0163      	lsls	r3, r4, #5
    2934:	4a82      	ldr	r2, [pc, #520]	; (2b40 <USB_Handler+0x340>)
    2936:	18d3      	adds	r3, r2, r3
    2938:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    293a:	231f      	movs	r3, #31
    293c:	4013      	ands	r3, r2
    293e:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2940:	0123      	lsls	r3, r4, #4
    2942:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    2944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2946:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2948:	06eb      	lsls	r3, r5, #27
    294a:	d522      	bpl.n	2992 <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    294c:	4a7a      	ldr	r2, [pc, #488]	; (2b38 <USB_Handler+0x338>)
    294e:	2301      	movs	r3, #1
    2950:	40a3      	lsls	r3, r4
    2952:	6811      	ldr	r1, [r2, #0]
    2954:	4399      	bics	r1, r3
    2956:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2958:	4b75      	ldr	r3, [pc, #468]	; (2b30 <USB_Handler+0x330>)
    295a:	6818      	ldr	r0, [r3, #0]
    295c:	1c23      	adds	r3, r4, #0
    295e:	3308      	adds	r3, #8
    2960:	015b      	lsls	r3, r3, #5
    2962:	6802      	ldr	r2, [r0, #0]
    2964:	4694      	mov	ip, r2
    2966:	4463      	add	r3, ip
    2968:	2210      	movs	r2, #16
    296a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    296c:	1903      	adds	r3, r0, r4
    296e:	33a8      	adds	r3, #168	; 0xa8
    2970:	799b      	ldrb	r3, [r3, #6]
    2972:	075b      	lsls	r3, r3, #29
    2974:	d50d      	bpl.n	2992 <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    2976:	4a71      	ldr	r2, [pc, #452]	; (2b3c <USB_Handler+0x33c>)
    2978:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    297a:	0163      	lsls	r3, r4, #5
    297c:	4970      	ldr	r1, [pc, #448]	; (2b40 <USB_Handler+0x340>)
    297e:	18cb      	adds	r3, r1, r3
    2980:	685b      	ldr	r3, [r3, #4]
    2982:	011b      	lsls	r3, r3, #4
    2984:	0c9b      	lsrs	r3, r3, #18
    2986:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    2988:	0123      	lsls	r3, r4, #4
    298a:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    298e:	2100      	movs	r1, #0
    2990:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    2992:	06ab      	lsls	r3, r5, #26
    2994:	d400      	bmi.n	2998 <USB_Handler+0x198>
    2996:	e1f8      	b.n	2d8a <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2998:	4a67      	ldr	r2, [pc, #412]	; (2b38 <USB_Handler+0x338>)
    299a:	2301      	movs	r3, #1
    299c:	40a3      	lsls	r3, r4
    299e:	6811      	ldr	r1, [r2, #0]
    29a0:	4399      	bics	r1, r3
    29a2:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    29a4:	4b62      	ldr	r3, [pc, #392]	; (2b30 <USB_Handler+0x330>)
    29a6:	6818      	ldr	r0, [r3, #0]
    29a8:	1c23      	adds	r3, r4, #0
    29aa:	3308      	adds	r3, #8
    29ac:	015b      	lsls	r3, r3, #5
    29ae:	6802      	ldr	r2, [r0, #0]
    29b0:	4694      	mov	ip, r2
    29b2:	4463      	add	r3, ip
    29b4:	2220      	movs	r2, #32
    29b6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    29b8:	1903      	adds	r3, r0, r4
    29ba:	33a8      	adds	r3, #168	; 0xa8
    29bc:	799b      	ldrb	r3, [r3, #6]
    29be:	071b      	lsls	r3, r3, #28
    29c0:	d400      	bmi.n	29c4 <USB_Handler+0x1c4>
    29c2:	e1e2      	b.n	2d8a <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    29c4:	495d      	ldr	r1, [pc, #372]	; (2b3c <USB_Handler+0x33c>)
    29c6:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    29c8:	0124      	lsls	r4, r4, #4
    29ca:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    29cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    29ce:	4798      	blx	r3
    29d0:	e1db      	b.n	2d8a <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    29d2:	8bac      	ldrh	r4, [r5, #28]
    29d4:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    29d6:	0763      	lsls	r3, r4, #29
    29d8:	d508      	bpl.n	29ec <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    29da:	2304      	movs	r3, #4
    29dc:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    29de:	33a1      	adds	r3, #161	; 0xa1
    29e0:	5cfb      	ldrb	r3, [r7, r3]
    29e2:	07db      	lsls	r3, r3, #31
    29e4:	d502      	bpl.n	29ec <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	1c38      	adds	r0, r7, #0
    29ea:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    29ec:	0723      	lsls	r3, r4, #28
    29ee:	d50d      	bpl.n	2a0c <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    29f0:	2200      	movs	r2, #0
    29f2:	4b51      	ldr	r3, [pc, #324]	; (2b38 <USB_Handler+0x338>)
    29f4:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    29f6:	4b4e      	ldr	r3, [pc, #312]	; (2b30 <USB_Handler+0x330>)
    29f8:	6818      	ldr	r0, [r3, #0]
    29fa:	2308      	movs	r3, #8
    29fc:	6802      	ldr	r2, [r0, #0]
    29fe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    2a00:	339d      	adds	r3, #157	; 0x9d
    2a02:	5cc3      	ldrb	r3, [r0, r3]
    2a04:	079b      	lsls	r3, r3, #30
    2a06:	d501      	bpl.n	2a0c <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    2a08:	6883      	ldr	r3, [r0, #8]
    2a0a:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    2a0c:	0663      	lsls	r3, r4, #25
    2a0e:	d50a      	bpl.n	2a26 <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    2a10:	4b47      	ldr	r3, [pc, #284]	; (2b30 <USB_Handler+0x330>)
    2a12:	6818      	ldr	r0, [r3, #0]
    2a14:	2340      	movs	r3, #64	; 0x40
    2a16:	6802      	ldr	r2, [r0, #0]
    2a18:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    2a1a:	3365      	adds	r3, #101	; 0x65
    2a1c:	5cc3      	ldrb	r3, [r0, r3]
    2a1e:	06db      	lsls	r3, r3, #27
    2a20:	d501      	bpl.n	2a26 <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    2a22:	6943      	ldr	r3, [r0, #20]
    2a24:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    2a26:	06a3      	lsls	r3, r4, #26
    2a28:	d50a      	bpl.n	2a40 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    2a2a:	4b41      	ldr	r3, [pc, #260]	; (2b30 <USB_Handler+0x330>)
    2a2c:	6818      	ldr	r0, [r3, #0]
    2a2e:	2320      	movs	r3, #32
    2a30:	6802      	ldr	r2, [r0, #0]
    2a32:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    2a34:	3385      	adds	r3, #133	; 0x85
    2a36:	5cc3      	ldrb	r3, [r0, r3]
    2a38:	071b      	lsls	r3, r3, #28
    2a3a:	d501      	bpl.n	2a40 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    2a3c:	6903      	ldr	r3, [r0, #16]
    2a3e:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    2a40:	06e3      	lsls	r3, r4, #27
    2a42:	d50a      	bpl.n	2a5a <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    2a44:	4b3a      	ldr	r3, [pc, #232]	; (2b30 <USB_Handler+0x330>)
    2a46:	6818      	ldr	r0, [r3, #0]
    2a48:	2310      	movs	r3, #16
    2a4a:	6802      	ldr	r2, [r0, #0]
    2a4c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    2a4e:	3395      	adds	r3, #149	; 0x95
    2a50:	5cc3      	ldrb	r3, [r0, r3]
    2a52:	075b      	lsls	r3, r3, #29
    2a54:	d501      	bpl.n	2a5a <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    2a56:	68c3      	ldr	r3, [r0, #12]
    2a58:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    2a5a:	0623      	lsls	r3, r4, #24
    2a5c:	d50d      	bpl.n	2a7a <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2a5e:	2200      	movs	r2, #0
    2a60:	4b35      	ldr	r3, [pc, #212]	; (2b38 <USB_Handler+0x338>)
    2a62:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    2a64:	4b32      	ldr	r3, [pc, #200]	; (2b30 <USB_Handler+0x330>)
    2a66:	6818      	ldr	r0, [r3, #0]
    2a68:	2380      	movs	r3, #128	; 0x80
    2a6a:	6802      	ldr	r2, [r0, #0]
    2a6c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    2a6e:	3325      	adds	r3, #37	; 0x25
    2a70:	5cc3      	ldrb	r3, [r0, r3]
    2a72:	069b      	lsls	r3, r3, #26
    2a74:	d501      	bpl.n	2a7a <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    2a76:	6983      	ldr	r3, [r0, #24]
    2a78:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    2a7a:	05e3      	lsls	r3, r4, #23
    2a7c:	d50e      	bpl.n	2a9c <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2a7e:	2200      	movs	r2, #0
    2a80:	4b2d      	ldr	r3, [pc, #180]	; (2b38 <USB_Handler+0x338>)
    2a82:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    2a84:	4b2a      	ldr	r3, [pc, #168]	; (2b30 <USB_Handler+0x330>)
    2a86:	6818      	ldr	r0, [r3, #0]
    2a88:	2380      	movs	r3, #128	; 0x80
    2a8a:	005b      	lsls	r3, r3, #1
    2a8c:	6802      	ldr	r2, [r0, #0]
    2a8e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    2a90:	3b5b      	subs	r3, #91	; 0x5b
    2a92:	5cc3      	ldrb	r3, [r0, r3]
    2a94:	065b      	lsls	r3, r3, #25
    2a96:	d501      	bpl.n	2a9c <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    2a98:	69c3      	ldr	r3, [r0, #28]
    2a9a:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    2a9c:	05a3      	lsls	r3, r4, #22
    2a9e:	d400      	bmi.n	2aa2 <USB_Handler+0x2a2>
    2aa0:	e173      	b.n	2d8a <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2aa2:	2200      	movs	r2, #0
    2aa4:	4b24      	ldr	r3, [pc, #144]	; (2b38 <USB_Handler+0x338>)
    2aa6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    2aa8:	4b21      	ldr	r3, [pc, #132]	; (2b30 <USB_Handler+0x330>)
    2aaa:	6818      	ldr	r0, [r3, #0]
    2aac:	2380      	movs	r3, #128	; 0x80
    2aae:	009b      	lsls	r3, r3, #2
    2ab0:	6802      	ldr	r2, [r0, #0]
    2ab2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    2ab4:	3b5c      	subs	r3, #92	; 0x5c
    2ab6:	3bff      	subs	r3, #255	; 0xff
    2ab8:	5cc3      	ldrb	r3, [r0, r3]
    2aba:	2b7f      	cmp	r3, #127	; 0x7f
    2abc:	d800      	bhi.n	2ac0 <USB_Handler+0x2c0>
    2abe:	e164      	b.n	2d8a <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    2ac0:	6a03      	ldr	r3, [r0, #32]
    2ac2:	4798      	blx	r3
    2ac4:	e161      	b.n	2d8a <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2ac6:	8c2e      	ldrh	r6, [r5, #32]
    2ac8:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    2aca:	2e00      	cmp	r6, #0
    2acc:	d140      	bne.n	2b50 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2ace:	8bae      	ldrh	r6, [r5, #28]
    2ad0:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    2ad2:	23ab      	movs	r3, #171	; 0xab
    2ad4:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    2ad6:	5afd      	ldrh	r5, [r7, r3]
    2ad8:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    2ada:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    2adc:	5afb      	ldrh	r3, [r7, r3]
    2ade:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2ae0:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2ae2:	4f19      	ldr	r7, [pc, #100]	; (2b48 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2ae4:	4b12      	ldr	r3, [pc, #72]	; (2b30 <USB_Handler+0x330>)
    2ae6:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2ae8:	4698      	mov	r8, r3
    2aea:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    2aec:	5bdb      	ldrh	r3, [r3, r7]
    2aee:	421e      	tst	r6, r3
    2af0:	d003      	beq.n	2afa <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2af2:	464a      	mov	r2, r9
    2af4:	6812      	ldr	r2, [r2, #0]
    2af6:	6812      	ldr	r2, [r2, #0]
    2af8:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    2afa:	421d      	tst	r5, r3
    2afc:	d013      	beq.n	2b26 <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    2afe:	2c06      	cmp	r4, #6
    2b00:	d107      	bne.n	2b12 <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2b02:	4b0f      	ldr	r3, [pc, #60]	; (2b40 <USB_Handler+0x340>)
    2b04:	891b      	ldrh	r3, [r3, #8]
    2b06:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    2b08:	2380      	movs	r3, #128	; 0x80
    2b0a:	005b      	lsls	r3, r3, #1
    2b0c:	4013      	ands	r3, r2
    2b0e:	4a0f      	ldr	r2, [pc, #60]	; (2b4c <USB_Handler+0x34c>)
    2b10:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2b12:	1c23      	adds	r3, r4, #0
    2b14:	332e      	adds	r3, #46	; 0x2e
    2b16:	009b      	lsls	r3, r3, #2
    2b18:	4642      	mov	r2, r8
    2b1a:	6812      	ldr	r2, [r2, #0]
    2b1c:	589b      	ldr	r3, [r3, r2]
    2b1e:	4642      	mov	r2, r8
    2b20:	6810      	ldr	r0, [r2, #0]
    2b22:	490a      	ldr	r1, [pc, #40]	; (2b4c <USB_Handler+0x34c>)
    2b24:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2b26:	3401      	adds	r4, #1
    2b28:	2c07      	cmp	r4, #7
    2b2a:	d1de      	bne.n	2aea <USB_Handler+0x2ea>
    2b2c:	e12d      	b.n	2d8a <USB_Handler+0x58a>
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	20000198 	.word	0x20000198
    2b34:	00003529 	.word	0x00003529
    2b38:	2000018c 	.word	0x2000018c
    2b3c:	20000184 	.word	0x20000184
    2b40:	200003b0 	.word	0x200003b0
    2b44:	f0003fff 	.word	0xf0003fff
    2b48:	00003614 	.word	0x00003614
    2b4c:	20000180 	.word	0x20000180
    2b50:	1c3c      	adds	r4, r7, #0
    2b52:	3459      	adds	r4, #89	; 0x59
    2b54:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    2b56:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    2b58:	2201      	movs	r2, #1
    2b5a:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b5c:	325f      	adds	r2, #95	; 0x5f
    2b5e:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2b60:	3a50      	subs	r2, #80	; 0x50
    2b62:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2b64:	3a0d      	subs	r2, #13
    2b66:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2b68:	46b8      	mov	r8, r7
    2b6a:	1c2f      	adds	r7, r5, #0
    2b6c:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    2b6e:	9301      	str	r3, [sp, #4]
    2b70:	1c32      	adds	r2, r6, #0
    2b72:	411a      	asrs	r2, r3
    2b74:	4661      	mov	r1, ip
    2b76:	4211      	tst	r1, r2
    2b78:	d100      	bne.n	2b7c <USB_Handler+0x37c>
    2b7a:	e101      	b.n	2d80 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2b7c:	1c1a      	adds	r2, r3, #0
    2b7e:	3208      	adds	r2, #8
    2b80:	0152      	lsls	r2, r2, #5
    2b82:	18ba      	adds	r2, r7, r2
    2b84:	79d2      	ldrb	r2, [r2, #7]
    2b86:	b2d2      	uxtb	r2, r2
    2b88:	7a21      	ldrb	r1, [r4, #8]
    2b8a:	7825      	ldrb	r5, [r4, #0]
    2b8c:	4029      	ands	r1, r5
				flags_run = flags &
    2b8e:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b90:	464d      	mov	r5, r9
    2b92:	4215      	tst	r5, r2
    2b94:	d02a      	beq.n	2bec <USB_Handler+0x3ec>
    2b96:	1c3d      	adds	r5, r7, #0
    2b98:	4647      	mov	r7, r8
    2b9a:	015b      	lsls	r3, r3, #5
    2b9c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2b9e:	2308      	movs	r3, #8
    2ba0:	33ff      	adds	r3, #255	; 0xff
    2ba2:	5ceb      	ldrb	r3, [r5, r3]
    2ba4:	065b      	lsls	r3, r3, #25
    2ba6:	d509      	bpl.n	2bbc <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2ba8:	2240      	movs	r2, #64	; 0x40
    2baa:	2308      	movs	r3, #8
    2bac:	33ff      	adds	r3, #255	; 0xff
    2bae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2bb0:	3b88      	subs	r3, #136	; 0x88
    2bb2:	3bff      	subs	r3, #255	; 0xff
    2bb4:	4303      	orrs	r3, r0
    2bb6:	4a78      	ldr	r2, [pc, #480]	; (2d98 <USB_Handler+0x598>)
    2bb8:	7193      	strb	r3, [r2, #6]
    2bba:	e00a      	b.n	2bd2 <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2bbc:	2308      	movs	r3, #8
    2bbe:	33ff      	adds	r3, #255	; 0xff
    2bc0:	5ceb      	ldrb	r3, [r5, r3]
    2bc2:	069b      	lsls	r3, r3, #26
    2bc4:	d505      	bpl.n	2bd2 <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2bc6:	2220      	movs	r2, #32
    2bc8:	2308      	movs	r3, #8
    2bca:	33ff      	adds	r3, #255	; 0xff
    2bcc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2bce:	4b72      	ldr	r3, [pc, #456]	; (2d98 <USB_Handler+0x598>)
    2bd0:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2bd2:	2360      	movs	r3, #96	; 0x60
    2bd4:	420b      	tst	r3, r1
    2bd6:	d100      	bne.n	2bda <USB_Handler+0x3da>
    2bd8:	e0d7      	b.n	2d8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	011b      	lsls	r3, r3, #4
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	33dc      	adds	r3, #220	; 0xdc
    2be2:	685b      	ldr	r3, [r3, #4]
    2be4:	1c38      	adds	r0, r7, #0
    2be6:	496c      	ldr	r1, [pc, #432]	; (2d98 <USB_Handler+0x598>)
    2be8:	4798      	blx	r3
    2bea:	e0ce      	b.n	2d8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2bec:	4655      	mov	r5, sl
    2bee:	4215      	tst	r5, r2
    2bf0:	d01f      	beq.n	2c32 <USB_Handler+0x432>
    2bf2:	1c3d      	adds	r5, r7, #0
    2bf4:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    2bf6:	9a01      	ldr	r2, [sp, #4]
    2bf8:	1c13      	adds	r3, r2, #0
    2bfa:	3308      	adds	r3, #8
    2bfc:	015b      	lsls	r3, r3, #5
    2bfe:	18ed      	adds	r5, r5, r3
    2c00:	2310      	movs	r3, #16
    2c02:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2c04:	18bb      	adds	r3, r7, r2
    2c06:	3361      	adds	r3, #97	; 0x61
    2c08:	33ff      	adds	r3, #255	; 0xff
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	06db      	lsls	r3, r3, #27
    2c0e:	d400      	bmi.n	2c12 <USB_Handler+0x412>
    2c10:	e0bb      	b.n	2d8a <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2c12:	1c10      	adds	r0, r2, #0
    2c14:	0153      	lsls	r3, r2, #5
    2c16:	4a61      	ldr	r2, [pc, #388]	; (2d9c <USB_Handler+0x59c>)
    2c18:	18d3      	adds	r3, r2, r3
    2c1a:	685b      	ldr	r3, [r3, #4]
    2c1c:	049b      	lsls	r3, r3, #18
    2c1e:	0c9b      	lsrs	r3, r3, #18
    2c20:	495d      	ldr	r1, [pc, #372]	; (2d98 <USB_Handler+0x598>)
    2c22:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2c24:	0103      	lsls	r3, r0, #4
    2c26:	18fb      	adds	r3, r7, r3
    2c28:	33d8      	adds	r3, #216	; 0xd8
    2c2a:	685b      	ldr	r3, [r3, #4]
    2c2c:	4640      	mov	r0, r8
    2c2e:	4798      	blx	r3
    2c30:	e0ab      	b.n	2d8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2c32:	465d      	mov	r5, fp
    2c34:	4215      	tst	r5, r2
    2c36:	d040      	beq.n	2cba <USB_Handler+0x4ba>
    2c38:	1c3d      	adds	r5, r7, #0
    2c3a:	4647      	mov	r7, r8
    2c3c:	4680      	mov	r8, r0
    2c3e:	9b01      	ldr	r3, [sp, #4]
    2c40:	015b      	lsls	r3, r3, #5
    2c42:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2c44:	2308      	movs	r3, #8
    2c46:	33ff      	adds	r3, #255	; 0xff
    2c48:	5ceb      	ldrb	r3, [r5, r3]
    2c4a:	079b      	lsls	r3, r3, #30
    2c4c:	d512      	bpl.n	2c74 <USB_Handler+0x474>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2c4e:	2202      	movs	r2, #2
    2c50:	2308      	movs	r3, #8
    2c52:	33ff      	adds	r3, #255	; 0xff
    2c54:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2c56:	4a50      	ldr	r2, [pc, #320]	; (2d98 <USB_Handler+0x598>)
    2c58:	3b88      	subs	r3, #136	; 0x88
    2c5a:	3bff      	subs	r3, #255	; 0xff
    2c5c:	4303      	orrs	r3, r0
    2c5e:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2c60:	9b01      	ldr	r3, [sp, #4]
    2c62:	015b      	lsls	r3, r3, #5
    2c64:	484d      	ldr	r0, [pc, #308]	; (2d9c <USB_Handler+0x59c>)
    2c66:	18c3      	adds	r3, r0, r3
    2c68:	3310      	adds	r3, #16
    2c6a:	685b      	ldr	r3, [r3, #4]
    2c6c:	049b      	lsls	r3, r3, #18
    2c6e:	0c9b      	lsrs	r3, r3, #18
    2c70:	8053      	strh	r3, [r2, #2]
    2c72:	e017      	b.n	2ca4 <USB_Handler+0x4a4>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2c74:	2308      	movs	r3, #8
    2c76:	33ff      	adds	r3, #255	; 0xff
    2c78:	5ceb      	ldrb	r3, [r5, r3]
    2c7a:	07db      	lsls	r3, r3, #31
    2c7c:	d512      	bpl.n	2ca4 <USB_Handler+0x4a4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2c7e:	2201      	movs	r2, #1
    2c80:	2308      	movs	r3, #8
    2c82:	33ff      	adds	r3, #255	; 0xff
    2c84:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2c86:	4844      	ldr	r0, [pc, #272]	; (2d98 <USB_Handler+0x598>)
    2c88:	4643      	mov	r3, r8
    2c8a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	015a      	lsls	r2, r3, #5
    2c90:	4b42      	ldr	r3, [pc, #264]	; (2d9c <USB_Handler+0x59c>)
    2c92:	189b      	adds	r3, r3, r2
    2c94:	685a      	ldr	r2, [r3, #4]
    2c96:	0492      	lsls	r2, r2, #18
    2c98:	0c92      	lsrs	r2, r2, #18
    2c9a:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2c9c:	685b      	ldr	r3, [r3, #4]
    2c9e:	011b      	lsls	r3, r3, #4
    2ca0:	0c9b      	lsrs	r3, r3, #18
    2ca2:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2ca4:	078b      	lsls	r3, r1, #30
    2ca6:	d070      	beq.n	2d8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2ca8:	9b01      	ldr	r3, [sp, #4]
    2caa:	330d      	adds	r3, #13
    2cac:	011b      	lsls	r3, r3, #4
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	685b      	ldr	r3, [r3, #4]
    2cb2:	1c38      	adds	r0, r7, #0
    2cb4:	4938      	ldr	r1, [pc, #224]	; (2d98 <USB_Handler+0x598>)
    2cb6:	4798      	blx	r3
    2cb8:	e067      	b.n	2d8a <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2cba:	250c      	movs	r5, #12
    2cbc:	4215      	tst	r5, r2
    2cbe:	d05f      	beq.n	2d80 <USB_Handler+0x580>
    2cc0:	1c3d      	adds	r5, r7, #0
    2cc2:	4647      	mov	r7, r8
    2cc4:	4680      	mov	r8, r0
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	015b      	lsls	r3, r3, #5
    2cca:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2ccc:	2308      	movs	r3, #8
    2cce:	33ff      	adds	r3, #255	; 0xff
    2cd0:	5ceb      	ldrb	r3, [r5, r3]
    2cd2:	071b      	lsls	r3, r3, #28
    2cd4:	d523      	bpl.n	2d1e <USB_Handler+0x51e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2cd6:	2208      	movs	r2, #8
    2cd8:	2308      	movs	r3, #8
    2cda:	33ff      	adds	r3, #255	; 0xff
    2cdc:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2cde:	9b01      	ldr	r3, [sp, #4]
    2ce0:	015b      	lsls	r3, r3, #5
    2ce2:	4a2e      	ldr	r2, [pc, #184]	; (2d9c <USB_Handler+0x59c>)
    2ce4:	18d3      	adds	r3, r2, r3
    2ce6:	3318      	adds	r3, #24
    2ce8:	789b      	ldrb	r3, [r3, #2]
    2cea:	079b      	lsls	r3, r3, #30
    2cec:	d507      	bpl.n	2cfe <USB_Handler+0x4fe>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	015a      	lsls	r2, r3, #5
    2cf2:	4b2a      	ldr	r3, [pc, #168]	; (2d9c <USB_Handler+0x59c>)
    2cf4:	189b      	adds	r3, r3, r2
    2cf6:	7e9a      	ldrb	r2, [r3, #26]
    2cf8:	2002      	movs	r0, #2
    2cfa:	4382      	bics	r2, r0
    2cfc:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2cfe:	2380      	movs	r3, #128	; 0x80
    2d00:	425b      	negs	r3, r3
    2d02:	4642      	mov	r2, r8
    2d04:	4313      	orrs	r3, r2
    2d06:	4a24      	ldr	r2, [pc, #144]	; (2d98 <USB_Handler+0x598>)
    2d08:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	3308      	adds	r3, #8
    2d0e:	015b      	lsls	r3, r3, #5
    2d10:	683a      	ldr	r2, [r7, #0]
    2d12:	4694      	mov	ip, r2
    2d14:	4463      	add	r3, ip
    2d16:	79db      	ldrb	r3, [r3, #7]
    2d18:	079b      	lsls	r3, r3, #30
    2d1a:	d525      	bpl.n	2d68 <USB_Handler+0x568>
    2d1c:	e035      	b.n	2d8a <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2d1e:	2308      	movs	r3, #8
    2d20:	33ff      	adds	r3, #255	; 0xff
    2d22:	5ceb      	ldrb	r3, [r5, r3]
    2d24:	075b      	lsls	r3, r3, #29
    2d26:	d51f      	bpl.n	2d68 <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2d28:	2204      	movs	r2, #4
    2d2a:	2308      	movs	r3, #8
    2d2c:	33ff      	adds	r3, #255	; 0xff
    2d2e:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2d30:	9b01      	ldr	r3, [sp, #4]
    2d32:	015b      	lsls	r3, r3, #5
    2d34:	4a19      	ldr	r2, [pc, #100]	; (2d9c <USB_Handler+0x59c>)
    2d36:	18d3      	adds	r3, r2, r3
    2d38:	3308      	adds	r3, #8
    2d3a:	789b      	ldrb	r3, [r3, #2]
    2d3c:	079b      	lsls	r3, r3, #30
    2d3e:	d507      	bpl.n	2d50 <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2d40:	9b01      	ldr	r3, [sp, #4]
    2d42:	015a      	lsls	r2, r3, #5
    2d44:	4b15      	ldr	r3, [pc, #84]	; (2d9c <USB_Handler+0x59c>)
    2d46:	189b      	adds	r3, r3, r2
    2d48:	7a9a      	ldrb	r2, [r3, #10]
    2d4a:	2002      	movs	r0, #2
    2d4c:	4382      	bics	r2, r0
    2d4e:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2d50:	4b11      	ldr	r3, [pc, #68]	; (2d98 <USB_Handler+0x598>)
    2d52:	4642      	mov	r2, r8
    2d54:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	3308      	adds	r3, #8
    2d5a:	015b      	lsls	r3, r3, #5
    2d5c:	683a      	ldr	r2, [r7, #0]
    2d5e:	4694      	mov	ip, r2
    2d60:	4463      	add	r3, ip
    2d62:	79db      	ldrb	r3, [r3, #7]
    2d64:	07db      	lsls	r3, r3, #31
    2d66:	d410      	bmi.n	2d8a <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2d68:	230c      	movs	r3, #12
    2d6a:	420b      	tst	r3, r1
    2d6c:	d00d      	beq.n	2d8a <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2d6e:	9b01      	ldr	r3, [sp, #4]
    2d70:	011b      	lsls	r3, r3, #4
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	33d4      	adds	r3, #212	; 0xd4
    2d76:	685b      	ldr	r3, [r3, #4]
    2d78:	1c38      	adds	r0, r7, #0
    2d7a:	4907      	ldr	r1, [pc, #28]	; (2d98 <USB_Handler+0x598>)
    2d7c:	4798      	blx	r3
    2d7e:	e004      	b.n	2d8a <USB_Handler+0x58a>
    2d80:	3301      	adds	r3, #1
    2d82:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2d84:	2b08      	cmp	r3, #8
    2d86:	d000      	beq.n	2d8a <USB_Handler+0x58a>
    2d88:	e6f0      	b.n	2b6c <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    2d8a:	b003      	add	sp, #12
    2d8c:	bc3c      	pop	{r2, r3, r4, r5}
    2d8e:	4690      	mov	r8, r2
    2d90:	4699      	mov	r9, r3
    2d92:	46a2      	mov	sl, r4
    2d94:	46ab      	mov	fp, r5
    2d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d98:	20000190 	.word	0x20000190
    2d9c:	200003b0 	.word	0x200003b0

00002da0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2da0:	2200      	movs	r2, #0
    2da2:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2da4:	2301      	movs	r3, #1
    2da6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2da8:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2daa:	70c3      	strb	r3, [r0, #3]
}
    2dac:	4770      	bx	lr
    2dae:	46c0      	nop			; (mov r8, r8)

00002db0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2db2:	464f      	mov	r7, r9
    2db4:	4646      	mov	r6, r8
    2db6:	b4c0      	push	{r6, r7}
    2db8:	b083      	sub	sp, #12
    2dba:	1c04      	adds	r4, r0, #0
    2dbc:	1c0d      	adds	r5, r1, #0
    2dbe:	1c16      	adds	r6, r2, #0
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    2dc0:	2300      	movs	r3, #0
    2dc2:	4a6c      	ldr	r2, [pc, #432]	; (2f74 <usb_init+0x1c4>)
    2dc4:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2dc6:	4a6c      	ldr	r2, [pc, #432]	; (2f78 <usb_init+0x1c8>)
    2dc8:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2dca:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2dcc:	496b      	ldr	r1, [pc, #428]	; (2f7c <usb_init+0x1cc>)
    2dce:	69c8      	ldr	r0, [r1, #28]
    2dd0:	2220      	movs	r2, #32
    2dd2:	4302      	orrs	r2, r0
    2dd4:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2dd6:	af01      	add	r7, sp, #4
    2dd8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2dda:	2201      	movs	r2, #1
    2ddc:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    2dde:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2de0:	3306      	adds	r3, #6
    2de2:	4699      	mov	r9, r3
    2de4:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2de6:	2018      	movs	r0, #24
    2de8:	1c39      	adds	r1, r7, #0
    2dea:	4b65      	ldr	r3, [pc, #404]	; (2f80 <usb_init+0x1d0>)
    2dec:	4698      	mov	r8, r3
    2dee:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2df0:	464b      	mov	r3, r9
    2df2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2df4:	2019      	movs	r0, #25
    2df6:	1c39      	adds	r1, r7, #0
    2df8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2dfa:	78b3      	ldrb	r3, [r6, #2]
    2dfc:	466a      	mov	r2, sp
    2dfe:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2e00:	2006      	movs	r0, #6
    2e02:	4669      	mov	r1, sp
    2e04:	4b5f      	ldr	r3, [pc, #380]	; (2f84 <usb_init+0x1d4>)
    2e06:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2e08:	2006      	movs	r0, #6
    2e0a:	4b5f      	ldr	r3, [pc, #380]	; (2f88 <usb_init+0x1d8>)
    2e0c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2e0e:	782a      	ldrb	r2, [r5, #0]
    2e10:	2301      	movs	r3, #1
    2e12:	4313      	orrs	r3, r2
    2e14:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2e16:	2201      	movs	r2, #1
    2e18:	78ab      	ldrb	r3, [r5, #2]
    2e1a:	421a      	tst	r2, r3
    2e1c:	d1fc      	bne.n	2e18 <usb_init+0x68>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2e1e:	4b5b      	ldr	r3, [pc, #364]	; (2f8c <usb_init+0x1dc>)
    2e20:	78da      	ldrb	r2, [r3, #3]
    2e22:	2103      	movs	r1, #3
    2e24:	438a      	bics	r2, r1
    2e26:	2102      	movs	r1, #2
    2e28:	430a      	orrs	r2, r1
    2e2a:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2e2c:	78da      	ldrb	r2, [r3, #3]
    2e2e:	210c      	movs	r1, #12
    2e30:	438a      	bics	r2, r1
    2e32:	2108      	movs	r1, #8
    2e34:	430a      	orrs	r2, r1
    2e36:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2e38:	4b55      	ldr	r3, [pc, #340]	; (2f90 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2e3a:	681b      	ldr	r3, [r3, #0]
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2e3c:	039b      	lsls	r3, r3, #14
    2e3e:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2e40:	2b1f      	cmp	r3, #31
    2e42:	d100      	bne.n	2e46 <usb_init+0x96>
		pad_transn = 5;
    2e44:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2e46:	019a      	lsls	r2, r3, #6
    2e48:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    2e4a:	4b52      	ldr	r3, [pc, #328]	; (2f94 <usb_init+0x1e4>)
    2e4c:	400b      	ands	r3, r1
    2e4e:	4313      	orrs	r3, r2
    2e50:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2e52:	4b4f      	ldr	r3, [pc, #316]	; (2f90 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2e54:	681b      	ldr	r3, [r3, #0]
    2e56:	025b      	lsls	r3, r3, #9
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2e58:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2e5a:	2b1f      	cmp	r3, #31
    2e5c:	d100      	bne.n	2e60 <usb_init+0xb0>
		pad_transp = 29;
    2e5e:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2e60:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2e62:	211f      	movs	r1, #31
    2e64:	438a      	bics	r2, r1
    2e66:	4313      	orrs	r3, r2
    2e68:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2e6a:	4b49      	ldr	r3, [pc, #292]	; (2f90 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2e6c:	681b      	ldr	r3, [r3, #0]
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2e6e:	019b      	lsls	r3, r3, #6
    2e70:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2e72:	2b07      	cmp	r3, #7
    2e74:	d100      	bne.n	2e78 <usb_init+0xc8>
		pad_trim = 3;
    2e76:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2e78:	031a      	lsls	r2, r3, #12
    2e7a:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    2e7c:	4b46      	ldr	r3, [pc, #280]	; (2f98 <usb_init+0x1e8>)
    2e7e:	400b      	ands	r3, r1
    2e80:	4313      	orrs	r3, r2
    2e82:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2e84:	7833      	ldrb	r3, [r6, #0]
    2e86:	01da      	lsls	r2, r3, #7
    2e88:	782b      	ldrb	r3, [r5, #0]
    2e8a:	217f      	movs	r1, #127	; 0x7f
    2e8c:	400b      	ands	r3, r1
    2e8e:	4313      	orrs	r3, r2
    2e90:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2e92:	7873      	ldrb	r3, [r6, #1]
    2e94:	2201      	movs	r2, #1
    2e96:	4013      	ands	r3, r2
    2e98:	009a      	lsls	r2, r3, #2
    2e9a:	782b      	ldrb	r3, [r5, #0]
    2e9c:	397b      	subs	r1, #123	; 0x7b
    2e9e:	438b      	bics	r3, r1
    2ea0:	4313      	orrs	r3, r2
    2ea2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2ea4:	4b3d      	ldr	r3, [pc, #244]	; (2f9c <usb_init+0x1ec>)
    2ea6:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2ea8:	78f3      	ldrb	r3, [r6, #3]
    2eaa:	2b01      	cmp	r3, #1
    2eac:	d105      	bne.n	2eba <usb_init+0x10a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2eae:	6822      	ldr	r2, [r4, #0]
    2eb0:	8913      	ldrh	r3, [r2, #8]
    2eb2:	3108      	adds	r1, #8
    2eb4:	438b      	bics	r3, r1
    2eb6:	8113      	strh	r3, [r2, #8]
    2eb8:	e008      	b.n	2ecc <usb_init+0x11c>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d106      	bne.n	2ecc <usb_init+0x11c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2ebe:	6821      	ldr	r1, [r4, #0]
    2ec0:	890b      	ldrh	r3, [r1, #8]
    2ec2:	220c      	movs	r2, #12
    2ec4:	4393      	bics	r3, r2
    2ec6:	2204      	movs	r2, #4
    2ec8:	4313      	orrs	r3, r2
    2eca:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2ecc:	4833      	ldr	r0, [pc, #204]	; (2f9c <usb_init+0x1ec>)
    2ece:	2100      	movs	r1, #0
    2ed0:	2280      	movs	r2, #128	; 0x80
    2ed2:	0052      	lsls	r2, r2, #1
    2ed4:	4b32      	ldr	r3, [pc, #200]	; (2fa0 <usb_init+0x1f0>)
    2ed6:	4798      	blx	r3
    2ed8:	1d22      	adds	r2, r4, #4
    2eda:	1c23      	adds	r3, r4, #0
    2edc:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2ede:	2100      	movs	r1, #0
    2ee0:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2ee2:	429a      	cmp	r2, r3
    2ee4:	d1fc      	bne.n	2ee0 <usb_init+0x130>
    2ee6:	1c21      	adds	r1, r4, #0
    2ee8:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    2eea:	2200      	movs	r2, #0
    2eec:	601a      	str	r2, [r3, #0]
    2eee:	605a      	str	r2, [r3, #4]
    2ef0:	609a      	str	r2, [r3, #8]
    2ef2:	60da      	str	r2, [r3, #12]
    2ef4:	3310      	adds	r3, #16
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2ef6:	428b      	cmp	r3, r1
    2ef8:	d1f8      	bne.n	2eec <usb_init+0x13c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    2efa:	2300      	movs	r3, #0
    2efc:	22a4      	movs	r2, #164	; 0xa4
    2efe:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2f00:	3201      	adds	r2, #1
    2f02:	54a3      	strb	r3, [r4, r2]
    2f04:	1c23      	adds	r3, r4, #0
    2f06:	33a6      	adds	r3, #166	; 0xa6
    2f08:	1c21      	adds	r1, r4, #0
    2f0a:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    2f0c:	2200      	movs	r2, #0
    2f0e:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2f10:	721a      	strb	r2, [r3, #8]
    2f12:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2f14:	428b      	cmp	r3, r1
    2f16:	d1fa      	bne.n	2f0e <usb_init+0x15e>
    2f18:	1c22      	adds	r2, r4, #0
    2f1a:	32b8      	adds	r2, #184	; 0xb8
    2f1c:	1c23      	adds	r3, r4, #0
    2f1e:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2f20:	2100      	movs	r1, #0
    2f22:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2f24:	429a      	cmp	r2, r3
    2f26:	d1fc      	bne.n	2f22 <usb_init+0x172>
    2f28:	1c21      	adds	r1, r4, #0
    2f2a:	3155      	adds	r1, #85	; 0x55
    2f2c:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2f2e:	2200      	movs	r2, #0
    2f30:	601a      	str	r2, [r3, #0]
    2f32:	605a      	str	r2, [r3, #4]
    2f34:	609a      	str	r2, [r3, #8]
    2f36:	60da      	str	r2, [r3, #12]
    2f38:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    2f3a:	428b      	cmp	r3, r1
    2f3c:	d1f8      	bne.n	2f30 <usb_init+0x180>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2f3e:	2300      	movs	r3, #0
    2f40:	22aa      	movs	r2, #170	; 0xaa
    2f42:	0052      	lsls	r2, r2, #1
    2f44:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    2f46:	3202      	adds	r2, #2
    2f48:	52a3      	strh	r3, [r4, r2]
    2f4a:	1c23      	adds	r3, r4, #0
    2f4c:	3359      	adds	r3, #89	; 0x59
    2f4e:	33ff      	adds	r3, #255	; 0xff
    2f50:	3461      	adds	r4, #97	; 0x61
    2f52:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    2f54:	2200      	movs	r2, #0
    2f56:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2f58:	721a      	strb	r2, [r3, #8]
    2f5a:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    2f5c:	42a3      	cmp	r3, r4
    2f5e:	d1fa      	bne.n	2f56 <usb_init+0x1a6>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f60:	2280      	movs	r2, #128	; 0x80
    2f62:	4b10      	ldr	r3, [pc, #64]	; (2fa4 <usb_init+0x1f4>)
    2f64:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2f66:	2000      	movs	r0, #0
    2f68:	b003      	add	sp, #12
    2f6a:	bc0c      	pop	{r2, r3}
    2f6c:	4690      	mov	r8, r2
    2f6e:	4699      	mov	r9, r3
    2f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	2000018c 	.word	0x2000018c
    2f78:	20000198 	.word	0x20000198
    2f7c:	40000400 	.word	0x40000400
    2f80:	0000130d 	.word	0x0000130d
    2f84:	00001249 	.word	0x00001249
    2f88:	000011bd 	.word	0x000011bd
    2f8c:	41005000 	.word	0x41005000
    2f90:	00806024 	.word	0x00806024
    2f94:	fffff83f 	.word	0xfffff83f
    2f98:	ffff8fff 	.word	0xffff8fff
    2f9c:	200003b0 	.word	0x200003b0
    2fa0:	000035c7 	.word	0x000035c7
    2fa4:	e000e100 	.word	0xe000e100

00002fa8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    2fa8:	e7fe      	b.n	2fa8 <Dummy_Handler>
    2faa:	46c0      	nop			; (mov r8, r8)

00002fac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2fac:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2fae:	4b2e      	ldr	r3, [pc, #184]	; (3068 <Reset_Handler+0xbc>)
    2fb0:	4a2e      	ldr	r2, [pc, #184]	; (306c <Reset_Handler+0xc0>)
    2fb2:	429a      	cmp	r2, r3
    2fb4:	d003      	beq.n	2fbe <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2fb6:	4b2e      	ldr	r3, [pc, #184]	; (3070 <Reset_Handler+0xc4>)
    2fb8:	4a2b      	ldr	r2, [pc, #172]	; (3068 <Reset_Handler+0xbc>)
    2fba:	429a      	cmp	r2, r3
    2fbc:	d304      	bcc.n	2fc8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2fbe:	4b2d      	ldr	r3, [pc, #180]	; (3074 <Reset_Handler+0xc8>)
    2fc0:	4a2d      	ldr	r2, [pc, #180]	; (3078 <Reset_Handler+0xcc>)
    2fc2:	429a      	cmp	r2, r3
    2fc4:	d310      	bcc.n	2fe8 <Reset_Handler+0x3c>
    2fc6:	e01e      	b.n	3006 <Reset_Handler+0x5a>
    2fc8:	4a2c      	ldr	r2, [pc, #176]	; (307c <Reset_Handler+0xd0>)
    2fca:	4b29      	ldr	r3, [pc, #164]	; (3070 <Reset_Handler+0xc4>)
    2fcc:	3303      	adds	r3, #3
    2fce:	1a9b      	subs	r3, r3, r2
    2fd0:	089b      	lsrs	r3, r3, #2
    2fd2:	3301      	adds	r3, #1
    2fd4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2fd6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2fd8:	4823      	ldr	r0, [pc, #140]	; (3068 <Reset_Handler+0xbc>)
    2fda:	4924      	ldr	r1, [pc, #144]	; (306c <Reset_Handler+0xc0>)
    2fdc:	588c      	ldr	r4, [r1, r2]
    2fde:	5084      	str	r4, [r0, r2]
    2fe0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2fe2:	429a      	cmp	r2, r3
    2fe4:	d1fa      	bne.n	2fdc <Reset_Handler+0x30>
    2fe6:	e7ea      	b.n	2fbe <Reset_Handler+0x12>
    2fe8:	4a25      	ldr	r2, [pc, #148]	; (3080 <Reset_Handler+0xd4>)
    2fea:	4b22      	ldr	r3, [pc, #136]	; (3074 <Reset_Handler+0xc8>)
    2fec:	3303      	adds	r3, #3
    2fee:	1a9b      	subs	r3, r3, r2
    2ff0:	089b      	lsrs	r3, r3, #2
    2ff2:	3301      	adds	r3, #1
    2ff4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2ff6:	2200      	movs	r2, #0
                *pDest++ = 0;
    2ff8:	481f      	ldr	r0, [pc, #124]	; (3078 <Reset_Handler+0xcc>)
    2ffa:	2100      	movs	r1, #0
    2ffc:	1814      	adds	r4, r2, r0
    2ffe:	6021      	str	r1, [r4, #0]
    3000:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3002:	429a      	cmp	r2, r3
    3004:	d1fa      	bne.n	2ffc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3006:	4a1f      	ldr	r2, [pc, #124]	; (3084 <Reset_Handler+0xd8>)
    3008:	21ff      	movs	r1, #255	; 0xff
    300a:	4b1f      	ldr	r3, [pc, #124]	; (3088 <Reset_Handler+0xdc>)
    300c:	438b      	bics	r3, r1
    300e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3010:	39fd      	subs	r1, #253	; 0xfd
    3012:	2390      	movs	r3, #144	; 0x90
    3014:	005b      	lsls	r3, r3, #1
    3016:	4a1d      	ldr	r2, [pc, #116]	; (308c <Reset_Handler+0xe0>)
    3018:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    301a:	481d      	ldr	r0, [pc, #116]	; (3090 <Reset_Handler+0xe4>)
    301c:	78c3      	ldrb	r3, [r0, #3]
    301e:	2403      	movs	r4, #3
    3020:	43a3      	bics	r3, r4
    3022:	2202      	movs	r2, #2
    3024:	4313      	orrs	r3, r2
    3026:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3028:	78c3      	ldrb	r3, [r0, #3]
    302a:	260c      	movs	r6, #12
    302c:	43b3      	bics	r3, r6
    302e:	2108      	movs	r1, #8
    3030:	430b      	orrs	r3, r1
    3032:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3034:	4b17      	ldr	r3, [pc, #92]	; (3094 <Reset_Handler+0xe8>)
    3036:	7b98      	ldrb	r0, [r3, #14]
    3038:	2530      	movs	r5, #48	; 0x30
    303a:	43a8      	bics	r0, r5
    303c:	1c05      	adds	r5, r0, #0
    303e:	2020      	movs	r0, #32
    3040:	4328      	orrs	r0, r5
    3042:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3044:	7b98      	ldrb	r0, [r3, #14]
    3046:	43b0      	bics	r0, r6
    3048:	4301      	orrs	r1, r0
    304a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    304c:	7b99      	ldrb	r1, [r3, #14]
    304e:	43a1      	bics	r1, r4
    3050:	430a      	orrs	r2, r1
    3052:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3054:	4a10      	ldr	r2, [pc, #64]	; (3098 <Reset_Handler+0xec>)
    3056:	6851      	ldr	r1, [r2, #4]
    3058:	2380      	movs	r3, #128	; 0x80
    305a:	430b      	orrs	r3, r1
    305c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    305e:	4b0f      	ldr	r3, [pc, #60]	; (309c <Reset_Handler+0xf0>)
    3060:	4798      	blx	r3

        /* Branch to main function */
        main();
    3062:	4b0f      	ldr	r3, [pc, #60]	; (30a0 <Reset_Handler+0xf4>)
    3064:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3066:	e7fe      	b.n	3066 <Reset_Handler+0xba>
    3068:	20000000 	.word	0x20000000
    306c:	00003648 	.word	0x00003648
    3070:	200000dc 	.word	0x200000dc
    3074:	200004b0 	.word	0x200004b0
    3078:	200000dc 	.word	0x200000dc
    307c:	20000004 	.word	0x20000004
    3080:	200000e0 	.word	0x200000e0
    3084:	e000ed00 	.word	0xe000ed00
    3088:	00000000 	.word	0x00000000
    308c:	41007000 	.word	0x41007000
    3090:	41005000 	.word	0x41005000
    3094:	41004800 	.word	0x41004800
    3098:	41004000 	.word	0x41004000
    309c:	00003569 	.word	0x00003569
    30a0:	000030a5 	.word	0x000030a5

000030a4 <main>:
static volatile bool main_b_mouse_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30a6:	465f      	mov	r7, fp
    30a8:	4656      	mov	r6, sl
    30aa:	464d      	mov	r5, r9
    30ac:	4644      	mov	r4, r8
    30ae:	b4f0      	push	{r4, r5, r6, r7}
	irq_initialize_vectors();
	cpu_irq_enable();
    30b0:	2401      	movs	r4, #1
    30b2:	4b2f      	ldr	r3, [pc, #188]	; (3170 <main+0xcc>)
    30b4:	701c      	strb	r4, [r3, #0]
    30b6:	f3bf 8f5f 	dmb	sy
    30ba:	b662      	cpsie	i
	system_init();
    30bc:	4b2d      	ldr	r3, [pc, #180]	; (3174 <main+0xd0>)
    30be:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    30c0:	4b2d      	ldr	r3, [pc, #180]	; (3178 <main+0xd4>)
    30c2:	2200      	movs	r2, #0
    30c4:	701a      	strb	r2, [r3, #0]
    30c6:	705a      	strb	r2, [r3, #1]
    30c8:	709a      	strb	r2, [r3, #2]
    30ca:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    30cc:	711c      	strb	r4, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();
	ui_init();
    30ce:	4b2b      	ldr	r3, [pc, #172]	; (317c <main+0xd8>)
    30d0:	4798      	blx	r3
	ui_powerdown();
    30d2:	4b2b      	ldr	r3, [pc, #172]	; (3180 <main+0xdc>)
    30d4:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    30d6:	4b2b      	ldr	r3, [pc, #172]	; (3184 <main+0xe0>)
    30d8:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    30da:	4c25      	ldr	r4, [pc, #148]	; (3170 <main+0xcc>)
    30dc:	2000      	movs	r0, #0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    30de:	4926      	ldr	r1, [pc, #152]	; (3178 <main+0xd4>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    30e0:	2501      	movs	r5, #1

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    30e2:	46a1      	mov	r9, r4
	const enum system_sleepmode sleep_mode)
{
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    30e4:	4e28      	ldr	r6, [pc, #160]	; (3188 <main+0xe4>)

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    30e6:	46a0      	mov	r8, r4
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    30e8:	b672      	cpsid	i
    30ea:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    30ee:	7020      	strb	r0, [r4, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    30f0:	780b      	ldrb	r3, [r1, #0]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d108      	bne.n	3108 <main+0x64>
    30f6:	4a20      	ldr	r2, [pc, #128]	; (3178 <main+0xd4>)
		lock_ptr++;
    30f8:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    30fa:	3301      	adds	r3, #1
    30fc:	b2db      	uxtb	r3, r3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    30fe:	7817      	ldrb	r7, [r2, #0]
    3100:	2f00      	cmp	r7, #0
    3102:	d0f9      	beq.n	30f8 <main+0x54>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3104:	2b00      	cmp	r3, #0
    3106:	d105      	bne.n	3114 <main+0x70>
		cpu_irq_enable();
    3108:	4b19      	ldr	r3, [pc, #100]	; (3170 <main+0xcc>)
    310a:	701d      	strb	r5, [r3, #0]
    310c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3110:	b662      	cpsie	i
    3112:	e7e9      	b.n	30e8 <main+0x44>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3114:	b672      	cpsid	i
    3116:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    311a:	464a      	mov	r2, r9
    311c:	2700      	movs	r7, #0
    311e:	7017      	strb	r7, [r2, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    3120:	3b01      	subs	r3, #1
    3122:	b2db      	uxtb	r3, r3
    3124:	6872      	ldr	r2, [r6, #4]
    3126:	27c0      	movs	r7, #192	; 0xc0
    3128:	00bf      	lsls	r7, r7, #2
    312a:	433a      	orrs	r2, r7
    312c:	6072      	str	r2, [r6, #4]
#endif

	switch (sleep_mode) {
    312e:	2b02      	cmp	r3, #2
    3130:	d902      	bls.n	3138 <main+0x94>
    3132:	2b03      	cmp	r3, #3
    3134:	d00d      	beq.n	3152 <main+0xae>
    3136:	e011      	b.n	315c <main+0xb8>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3138:	4a14      	ldr	r2, [pc, #80]	; (318c <main+0xe8>)
    313a:	4693      	mov	fp, r2
    313c:	6912      	ldr	r2, [r2, #16]
    313e:	4692      	mov	sl, r2
    3140:	2204      	movs	r2, #4
    3142:	4657      	mov	r7, sl
    3144:	4397      	bics	r7, r2
    3146:	1c3a      	adds	r2, r7, #0
    3148:	465f      	mov	r7, fp
    314a:	613a      	str	r2, [r7, #16]
			PM->SLEEP.reg = sleep_mode;
    314c:	4a10      	ldr	r2, [pc, #64]	; (3190 <main+0xec>)
    314e:	7053      	strb	r3, [r2, #1]
    3150:	e004      	b.n	315c <main+0xb8>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3152:	4a0e      	ldr	r2, [pc, #56]	; (318c <main+0xe8>)
    3154:	6917      	ldr	r7, [r2, #16]
    3156:	2304      	movs	r3, #4
    3158:	433b      	orrs	r3, r7
    315a:	6113      	str	r3, [r2, #16]
	cpu_irq_enable();
    315c:	4643      	mov	r3, r8
    315e:	701d      	strb	r5, [r3, #0]
    3160:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3164:	b662      	cpsie	i
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3166:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    316a:	bf30      	wfi
    316c:	e7bc      	b.n	30e8 <main+0x44>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	200000d8 	.word	0x200000d8
    3174:	00001341 	.word	0x00001341
    3178:	200001a0 	.word	0x200001a0
    317c:	0000012d 	.word	0x0000012d
    3180:	00000189 	.word	0x00000189
    3184:	00000699 	.word	0x00000699
    3188:	41004000 	.word	0x41004000
    318c:	e000ed00 	.word	0xe000ed00
    3190:	40000400 	.word	0x40000400

00003194 <main_suspend_action>:
#endif
	}
}

void main_suspend_action(void)
{
    3194:	b508      	push	{r3, lr}
	ui_powerdown();
    3196:	4b01      	ldr	r3, [pc, #4]	; (319c <main_suspend_action+0x8>)
    3198:	4798      	blx	r3
}
    319a:	bd08      	pop	{r3, pc}
    319c:	00000189 	.word	0x00000189

000031a0 <main_resume_action>:

void main_resume_action(void)
{
    31a0:	b508      	push	{r3, lr}
	ui_wakeup();
    31a2:	4b01      	ldr	r3, [pc, #4]	; (31a8 <main_resume_action+0x8>)
    31a4:	4798      	blx	r3
}
    31a6:	bd08      	pop	{r3, pc}
    31a8:	000001b9 	.word	0x000001b9

000031ac <main_sof_action>:

void main_sof_action(void)
{
    31ac:	b508      	push	{r3, lr}
	if (!main_b_mouse_enable)
    31ae:	4b04      	ldr	r3, [pc, #16]	; (31c0 <main_sof_action+0x14>)
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	2b00      	cmp	r3, #0
    31b4:	d003      	beq.n	31be <main_sof_action+0x12>
		return;
	ui_process(udd_get_frame_number());
    31b6:	4b03      	ldr	r3, [pc, #12]	; (31c4 <main_sof_action+0x18>)
    31b8:	4798      	blx	r3
    31ba:	4b03      	ldr	r3, [pc, #12]	; (31c8 <main_sof_action+0x1c>)
    31bc:	4798      	blx	r3
}
    31be:	bd08      	pop	{r3, pc}
    31c0:	2000019c 	.word	0x2000019c
    31c4:	00001a25 	.word	0x00001a25
    31c8:	000001c9 	.word	0x000001c9

000031cc <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    31cc:	b508      	push	{r3, lr}
	ui_wakeup_enable();
    31ce:	4b01      	ldr	r3, [pc, #4]	; (31d4 <main_remotewakeup_enable+0x8>)
    31d0:	4798      	blx	r3
}
    31d2:	bd08      	pop	{r3, pc}
    31d4:	00000199 	.word	0x00000199

000031d8 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    31d8:	b508      	push	{r3, lr}
	ui_wakeup_disable();
    31da:	4b01      	ldr	r3, [pc, #4]	; (31e0 <main_remotewakeup_disable+0x8>)
    31dc:	4798      	blx	r3
}
    31de:	bd08      	pop	{r3, pc}
    31e0:	000001a9 	.word	0x000001a9

000031e4 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    31e4:	b508      	push	{r3, lr}
	ui_powerdown();
    31e6:	4b01      	ldr	r3, [pc, #4]	; (31ec <main_suspend_lpm_action+0x8>)
    31e8:	4798      	blx	r3
}
    31ea:	bd08      	pop	{r3, pc}
    31ec:	00000189 	.word	0x00000189

000031f0 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    31f0:	b508      	push	{r3, lr}
	ui_wakeup_disable();
    31f2:	4b01      	ldr	r3, [pc, #4]	; (31f8 <main_remotewakeup_lpm_disable+0x8>)
    31f4:	4798      	blx	r3
}
    31f6:	bd08      	pop	{r3, pc}
    31f8:	000001a9 	.word	0x000001a9

000031fc <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    31fc:	b508      	push	{r3, lr}
	ui_wakeup_enable();
    31fe:	4b01      	ldr	r3, [pc, #4]	; (3204 <main_remotewakeup_lpm_enable+0x8>)
    3200:	4798      	blx	r3
}
    3202:	bd08      	pop	{r3, pc}
    3204:	00000199 	.word	0x00000199

00003208 <main_mouse_enable>:
#endif

bool main_mouse_enable(void)
{
	main_b_mouse_enable = true;
    3208:	2201      	movs	r2, #1
    320a:	4b02      	ldr	r3, [pc, #8]	; (3214 <main_mouse_enable+0xc>)
    320c:	701a      	strb	r2, [r3, #0]
	return true;
}
    320e:	2001      	movs	r0, #1
    3210:	4770      	bx	lr
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	2000019c 	.word	0x2000019c

00003218 <main_mouse_disable>:

void main_mouse_disable(void)
{
	main_b_mouse_enable = false;
    3218:	2200      	movs	r2, #0
    321a:	4b01      	ldr	r3, [pc, #4]	; (3220 <main_mouse_disable+0x8>)
    321c:	701a      	strb	r2, [r3, #0]
}
    321e:	4770      	bx	lr
    3220:	2000019c 	.word	0x2000019c

00003224 <__aeabi_uidiv>:
    3224:	2200      	movs	r2, #0
    3226:	0843      	lsrs	r3, r0, #1
    3228:	428b      	cmp	r3, r1
    322a:	d374      	bcc.n	3316 <__aeabi_uidiv+0xf2>
    322c:	0903      	lsrs	r3, r0, #4
    322e:	428b      	cmp	r3, r1
    3230:	d35f      	bcc.n	32f2 <__aeabi_uidiv+0xce>
    3232:	0a03      	lsrs	r3, r0, #8
    3234:	428b      	cmp	r3, r1
    3236:	d344      	bcc.n	32c2 <__aeabi_uidiv+0x9e>
    3238:	0b03      	lsrs	r3, r0, #12
    323a:	428b      	cmp	r3, r1
    323c:	d328      	bcc.n	3290 <__aeabi_uidiv+0x6c>
    323e:	0c03      	lsrs	r3, r0, #16
    3240:	428b      	cmp	r3, r1
    3242:	d30d      	bcc.n	3260 <__aeabi_uidiv+0x3c>
    3244:	22ff      	movs	r2, #255	; 0xff
    3246:	0209      	lsls	r1, r1, #8
    3248:	ba12      	rev	r2, r2
    324a:	0c03      	lsrs	r3, r0, #16
    324c:	428b      	cmp	r3, r1
    324e:	d302      	bcc.n	3256 <__aeabi_uidiv+0x32>
    3250:	1212      	asrs	r2, r2, #8
    3252:	0209      	lsls	r1, r1, #8
    3254:	d065      	beq.n	3322 <__aeabi_uidiv+0xfe>
    3256:	0b03      	lsrs	r3, r0, #12
    3258:	428b      	cmp	r3, r1
    325a:	d319      	bcc.n	3290 <__aeabi_uidiv+0x6c>
    325c:	e000      	b.n	3260 <__aeabi_uidiv+0x3c>
    325e:	0a09      	lsrs	r1, r1, #8
    3260:	0bc3      	lsrs	r3, r0, #15
    3262:	428b      	cmp	r3, r1
    3264:	d301      	bcc.n	326a <__aeabi_uidiv+0x46>
    3266:	03cb      	lsls	r3, r1, #15
    3268:	1ac0      	subs	r0, r0, r3
    326a:	4152      	adcs	r2, r2
    326c:	0b83      	lsrs	r3, r0, #14
    326e:	428b      	cmp	r3, r1
    3270:	d301      	bcc.n	3276 <__aeabi_uidiv+0x52>
    3272:	038b      	lsls	r3, r1, #14
    3274:	1ac0      	subs	r0, r0, r3
    3276:	4152      	adcs	r2, r2
    3278:	0b43      	lsrs	r3, r0, #13
    327a:	428b      	cmp	r3, r1
    327c:	d301      	bcc.n	3282 <__aeabi_uidiv+0x5e>
    327e:	034b      	lsls	r3, r1, #13
    3280:	1ac0      	subs	r0, r0, r3
    3282:	4152      	adcs	r2, r2
    3284:	0b03      	lsrs	r3, r0, #12
    3286:	428b      	cmp	r3, r1
    3288:	d301      	bcc.n	328e <__aeabi_uidiv+0x6a>
    328a:	030b      	lsls	r3, r1, #12
    328c:	1ac0      	subs	r0, r0, r3
    328e:	4152      	adcs	r2, r2
    3290:	0ac3      	lsrs	r3, r0, #11
    3292:	428b      	cmp	r3, r1
    3294:	d301      	bcc.n	329a <__aeabi_uidiv+0x76>
    3296:	02cb      	lsls	r3, r1, #11
    3298:	1ac0      	subs	r0, r0, r3
    329a:	4152      	adcs	r2, r2
    329c:	0a83      	lsrs	r3, r0, #10
    329e:	428b      	cmp	r3, r1
    32a0:	d301      	bcc.n	32a6 <__aeabi_uidiv+0x82>
    32a2:	028b      	lsls	r3, r1, #10
    32a4:	1ac0      	subs	r0, r0, r3
    32a6:	4152      	adcs	r2, r2
    32a8:	0a43      	lsrs	r3, r0, #9
    32aa:	428b      	cmp	r3, r1
    32ac:	d301      	bcc.n	32b2 <__aeabi_uidiv+0x8e>
    32ae:	024b      	lsls	r3, r1, #9
    32b0:	1ac0      	subs	r0, r0, r3
    32b2:	4152      	adcs	r2, r2
    32b4:	0a03      	lsrs	r3, r0, #8
    32b6:	428b      	cmp	r3, r1
    32b8:	d301      	bcc.n	32be <__aeabi_uidiv+0x9a>
    32ba:	020b      	lsls	r3, r1, #8
    32bc:	1ac0      	subs	r0, r0, r3
    32be:	4152      	adcs	r2, r2
    32c0:	d2cd      	bcs.n	325e <__aeabi_uidiv+0x3a>
    32c2:	09c3      	lsrs	r3, r0, #7
    32c4:	428b      	cmp	r3, r1
    32c6:	d301      	bcc.n	32cc <__aeabi_uidiv+0xa8>
    32c8:	01cb      	lsls	r3, r1, #7
    32ca:	1ac0      	subs	r0, r0, r3
    32cc:	4152      	adcs	r2, r2
    32ce:	0983      	lsrs	r3, r0, #6
    32d0:	428b      	cmp	r3, r1
    32d2:	d301      	bcc.n	32d8 <__aeabi_uidiv+0xb4>
    32d4:	018b      	lsls	r3, r1, #6
    32d6:	1ac0      	subs	r0, r0, r3
    32d8:	4152      	adcs	r2, r2
    32da:	0943      	lsrs	r3, r0, #5
    32dc:	428b      	cmp	r3, r1
    32de:	d301      	bcc.n	32e4 <__aeabi_uidiv+0xc0>
    32e0:	014b      	lsls	r3, r1, #5
    32e2:	1ac0      	subs	r0, r0, r3
    32e4:	4152      	adcs	r2, r2
    32e6:	0903      	lsrs	r3, r0, #4
    32e8:	428b      	cmp	r3, r1
    32ea:	d301      	bcc.n	32f0 <__aeabi_uidiv+0xcc>
    32ec:	010b      	lsls	r3, r1, #4
    32ee:	1ac0      	subs	r0, r0, r3
    32f0:	4152      	adcs	r2, r2
    32f2:	08c3      	lsrs	r3, r0, #3
    32f4:	428b      	cmp	r3, r1
    32f6:	d301      	bcc.n	32fc <__aeabi_uidiv+0xd8>
    32f8:	00cb      	lsls	r3, r1, #3
    32fa:	1ac0      	subs	r0, r0, r3
    32fc:	4152      	adcs	r2, r2
    32fe:	0883      	lsrs	r3, r0, #2
    3300:	428b      	cmp	r3, r1
    3302:	d301      	bcc.n	3308 <__aeabi_uidiv+0xe4>
    3304:	008b      	lsls	r3, r1, #2
    3306:	1ac0      	subs	r0, r0, r3
    3308:	4152      	adcs	r2, r2
    330a:	0843      	lsrs	r3, r0, #1
    330c:	428b      	cmp	r3, r1
    330e:	d301      	bcc.n	3314 <__aeabi_uidiv+0xf0>
    3310:	004b      	lsls	r3, r1, #1
    3312:	1ac0      	subs	r0, r0, r3
    3314:	4152      	adcs	r2, r2
    3316:	1a41      	subs	r1, r0, r1
    3318:	d200      	bcs.n	331c <__aeabi_uidiv+0xf8>
    331a:	4601      	mov	r1, r0
    331c:	4152      	adcs	r2, r2
    331e:	4610      	mov	r0, r2
    3320:	4770      	bx	lr
    3322:	e7ff      	b.n	3324 <__aeabi_uidiv+0x100>
    3324:	b501      	push	{r0, lr}
    3326:	2000      	movs	r0, #0
    3328:	f000 f8fc 	bl	3524 <__aeabi_idiv0>
    332c:	bd02      	pop	{r1, pc}
    332e:	46c0      	nop			; (mov r8, r8)

00003330 <__aeabi_uidivmod>:
    3330:	2900      	cmp	r1, #0
    3332:	d0f7      	beq.n	3324 <__aeabi_uidiv+0x100>
    3334:	b503      	push	{r0, r1, lr}
    3336:	f7ff ff75 	bl	3224 <__aeabi_uidiv>
    333a:	bc0e      	pop	{r1, r2, r3}
    333c:	4342      	muls	r2, r0
    333e:	1a89      	subs	r1, r1, r2
    3340:	4718      	bx	r3
    3342:	46c0      	nop			; (mov r8, r8)

00003344 <__aeabi_idiv>:
    3344:	4603      	mov	r3, r0
    3346:	430b      	orrs	r3, r1
    3348:	d47f      	bmi.n	344a <__aeabi_idiv+0x106>
    334a:	2200      	movs	r2, #0
    334c:	0843      	lsrs	r3, r0, #1
    334e:	428b      	cmp	r3, r1
    3350:	d374      	bcc.n	343c <__aeabi_idiv+0xf8>
    3352:	0903      	lsrs	r3, r0, #4
    3354:	428b      	cmp	r3, r1
    3356:	d35f      	bcc.n	3418 <__aeabi_idiv+0xd4>
    3358:	0a03      	lsrs	r3, r0, #8
    335a:	428b      	cmp	r3, r1
    335c:	d344      	bcc.n	33e8 <__aeabi_idiv+0xa4>
    335e:	0b03      	lsrs	r3, r0, #12
    3360:	428b      	cmp	r3, r1
    3362:	d328      	bcc.n	33b6 <__aeabi_idiv+0x72>
    3364:	0c03      	lsrs	r3, r0, #16
    3366:	428b      	cmp	r3, r1
    3368:	d30d      	bcc.n	3386 <__aeabi_idiv+0x42>
    336a:	22ff      	movs	r2, #255	; 0xff
    336c:	0209      	lsls	r1, r1, #8
    336e:	ba12      	rev	r2, r2
    3370:	0c03      	lsrs	r3, r0, #16
    3372:	428b      	cmp	r3, r1
    3374:	d302      	bcc.n	337c <__aeabi_idiv+0x38>
    3376:	1212      	asrs	r2, r2, #8
    3378:	0209      	lsls	r1, r1, #8
    337a:	d065      	beq.n	3448 <__aeabi_idiv+0x104>
    337c:	0b03      	lsrs	r3, r0, #12
    337e:	428b      	cmp	r3, r1
    3380:	d319      	bcc.n	33b6 <__aeabi_idiv+0x72>
    3382:	e000      	b.n	3386 <__aeabi_idiv+0x42>
    3384:	0a09      	lsrs	r1, r1, #8
    3386:	0bc3      	lsrs	r3, r0, #15
    3388:	428b      	cmp	r3, r1
    338a:	d301      	bcc.n	3390 <__aeabi_idiv+0x4c>
    338c:	03cb      	lsls	r3, r1, #15
    338e:	1ac0      	subs	r0, r0, r3
    3390:	4152      	adcs	r2, r2
    3392:	0b83      	lsrs	r3, r0, #14
    3394:	428b      	cmp	r3, r1
    3396:	d301      	bcc.n	339c <__aeabi_idiv+0x58>
    3398:	038b      	lsls	r3, r1, #14
    339a:	1ac0      	subs	r0, r0, r3
    339c:	4152      	adcs	r2, r2
    339e:	0b43      	lsrs	r3, r0, #13
    33a0:	428b      	cmp	r3, r1
    33a2:	d301      	bcc.n	33a8 <__aeabi_idiv+0x64>
    33a4:	034b      	lsls	r3, r1, #13
    33a6:	1ac0      	subs	r0, r0, r3
    33a8:	4152      	adcs	r2, r2
    33aa:	0b03      	lsrs	r3, r0, #12
    33ac:	428b      	cmp	r3, r1
    33ae:	d301      	bcc.n	33b4 <__aeabi_idiv+0x70>
    33b0:	030b      	lsls	r3, r1, #12
    33b2:	1ac0      	subs	r0, r0, r3
    33b4:	4152      	adcs	r2, r2
    33b6:	0ac3      	lsrs	r3, r0, #11
    33b8:	428b      	cmp	r3, r1
    33ba:	d301      	bcc.n	33c0 <__aeabi_idiv+0x7c>
    33bc:	02cb      	lsls	r3, r1, #11
    33be:	1ac0      	subs	r0, r0, r3
    33c0:	4152      	adcs	r2, r2
    33c2:	0a83      	lsrs	r3, r0, #10
    33c4:	428b      	cmp	r3, r1
    33c6:	d301      	bcc.n	33cc <__aeabi_idiv+0x88>
    33c8:	028b      	lsls	r3, r1, #10
    33ca:	1ac0      	subs	r0, r0, r3
    33cc:	4152      	adcs	r2, r2
    33ce:	0a43      	lsrs	r3, r0, #9
    33d0:	428b      	cmp	r3, r1
    33d2:	d301      	bcc.n	33d8 <__aeabi_idiv+0x94>
    33d4:	024b      	lsls	r3, r1, #9
    33d6:	1ac0      	subs	r0, r0, r3
    33d8:	4152      	adcs	r2, r2
    33da:	0a03      	lsrs	r3, r0, #8
    33dc:	428b      	cmp	r3, r1
    33de:	d301      	bcc.n	33e4 <__aeabi_idiv+0xa0>
    33e0:	020b      	lsls	r3, r1, #8
    33e2:	1ac0      	subs	r0, r0, r3
    33e4:	4152      	adcs	r2, r2
    33e6:	d2cd      	bcs.n	3384 <__aeabi_idiv+0x40>
    33e8:	09c3      	lsrs	r3, r0, #7
    33ea:	428b      	cmp	r3, r1
    33ec:	d301      	bcc.n	33f2 <__aeabi_idiv+0xae>
    33ee:	01cb      	lsls	r3, r1, #7
    33f0:	1ac0      	subs	r0, r0, r3
    33f2:	4152      	adcs	r2, r2
    33f4:	0983      	lsrs	r3, r0, #6
    33f6:	428b      	cmp	r3, r1
    33f8:	d301      	bcc.n	33fe <__aeabi_idiv+0xba>
    33fa:	018b      	lsls	r3, r1, #6
    33fc:	1ac0      	subs	r0, r0, r3
    33fe:	4152      	adcs	r2, r2
    3400:	0943      	lsrs	r3, r0, #5
    3402:	428b      	cmp	r3, r1
    3404:	d301      	bcc.n	340a <__aeabi_idiv+0xc6>
    3406:	014b      	lsls	r3, r1, #5
    3408:	1ac0      	subs	r0, r0, r3
    340a:	4152      	adcs	r2, r2
    340c:	0903      	lsrs	r3, r0, #4
    340e:	428b      	cmp	r3, r1
    3410:	d301      	bcc.n	3416 <__aeabi_idiv+0xd2>
    3412:	010b      	lsls	r3, r1, #4
    3414:	1ac0      	subs	r0, r0, r3
    3416:	4152      	adcs	r2, r2
    3418:	08c3      	lsrs	r3, r0, #3
    341a:	428b      	cmp	r3, r1
    341c:	d301      	bcc.n	3422 <__aeabi_idiv+0xde>
    341e:	00cb      	lsls	r3, r1, #3
    3420:	1ac0      	subs	r0, r0, r3
    3422:	4152      	adcs	r2, r2
    3424:	0883      	lsrs	r3, r0, #2
    3426:	428b      	cmp	r3, r1
    3428:	d301      	bcc.n	342e <__aeabi_idiv+0xea>
    342a:	008b      	lsls	r3, r1, #2
    342c:	1ac0      	subs	r0, r0, r3
    342e:	4152      	adcs	r2, r2
    3430:	0843      	lsrs	r3, r0, #1
    3432:	428b      	cmp	r3, r1
    3434:	d301      	bcc.n	343a <__aeabi_idiv+0xf6>
    3436:	004b      	lsls	r3, r1, #1
    3438:	1ac0      	subs	r0, r0, r3
    343a:	4152      	adcs	r2, r2
    343c:	1a41      	subs	r1, r0, r1
    343e:	d200      	bcs.n	3442 <__aeabi_idiv+0xfe>
    3440:	4601      	mov	r1, r0
    3442:	4152      	adcs	r2, r2
    3444:	4610      	mov	r0, r2
    3446:	4770      	bx	lr
    3448:	e05d      	b.n	3506 <__aeabi_idiv+0x1c2>
    344a:	0fca      	lsrs	r2, r1, #31
    344c:	d000      	beq.n	3450 <__aeabi_idiv+0x10c>
    344e:	4249      	negs	r1, r1
    3450:	1003      	asrs	r3, r0, #32
    3452:	d300      	bcc.n	3456 <__aeabi_idiv+0x112>
    3454:	4240      	negs	r0, r0
    3456:	4053      	eors	r3, r2
    3458:	2200      	movs	r2, #0
    345a:	469c      	mov	ip, r3
    345c:	0903      	lsrs	r3, r0, #4
    345e:	428b      	cmp	r3, r1
    3460:	d32d      	bcc.n	34be <__aeabi_idiv+0x17a>
    3462:	0a03      	lsrs	r3, r0, #8
    3464:	428b      	cmp	r3, r1
    3466:	d312      	bcc.n	348e <__aeabi_idiv+0x14a>
    3468:	22fc      	movs	r2, #252	; 0xfc
    346a:	0189      	lsls	r1, r1, #6
    346c:	ba12      	rev	r2, r2
    346e:	0a03      	lsrs	r3, r0, #8
    3470:	428b      	cmp	r3, r1
    3472:	d30c      	bcc.n	348e <__aeabi_idiv+0x14a>
    3474:	0189      	lsls	r1, r1, #6
    3476:	1192      	asrs	r2, r2, #6
    3478:	428b      	cmp	r3, r1
    347a:	d308      	bcc.n	348e <__aeabi_idiv+0x14a>
    347c:	0189      	lsls	r1, r1, #6
    347e:	1192      	asrs	r2, r2, #6
    3480:	428b      	cmp	r3, r1
    3482:	d304      	bcc.n	348e <__aeabi_idiv+0x14a>
    3484:	0189      	lsls	r1, r1, #6
    3486:	d03a      	beq.n	34fe <__aeabi_idiv+0x1ba>
    3488:	1192      	asrs	r2, r2, #6
    348a:	e000      	b.n	348e <__aeabi_idiv+0x14a>
    348c:	0989      	lsrs	r1, r1, #6
    348e:	09c3      	lsrs	r3, r0, #7
    3490:	428b      	cmp	r3, r1
    3492:	d301      	bcc.n	3498 <__aeabi_idiv+0x154>
    3494:	01cb      	lsls	r3, r1, #7
    3496:	1ac0      	subs	r0, r0, r3
    3498:	4152      	adcs	r2, r2
    349a:	0983      	lsrs	r3, r0, #6
    349c:	428b      	cmp	r3, r1
    349e:	d301      	bcc.n	34a4 <__aeabi_idiv+0x160>
    34a0:	018b      	lsls	r3, r1, #6
    34a2:	1ac0      	subs	r0, r0, r3
    34a4:	4152      	adcs	r2, r2
    34a6:	0943      	lsrs	r3, r0, #5
    34a8:	428b      	cmp	r3, r1
    34aa:	d301      	bcc.n	34b0 <__aeabi_idiv+0x16c>
    34ac:	014b      	lsls	r3, r1, #5
    34ae:	1ac0      	subs	r0, r0, r3
    34b0:	4152      	adcs	r2, r2
    34b2:	0903      	lsrs	r3, r0, #4
    34b4:	428b      	cmp	r3, r1
    34b6:	d301      	bcc.n	34bc <__aeabi_idiv+0x178>
    34b8:	010b      	lsls	r3, r1, #4
    34ba:	1ac0      	subs	r0, r0, r3
    34bc:	4152      	adcs	r2, r2
    34be:	08c3      	lsrs	r3, r0, #3
    34c0:	428b      	cmp	r3, r1
    34c2:	d301      	bcc.n	34c8 <__aeabi_idiv+0x184>
    34c4:	00cb      	lsls	r3, r1, #3
    34c6:	1ac0      	subs	r0, r0, r3
    34c8:	4152      	adcs	r2, r2
    34ca:	0883      	lsrs	r3, r0, #2
    34cc:	428b      	cmp	r3, r1
    34ce:	d301      	bcc.n	34d4 <__aeabi_idiv+0x190>
    34d0:	008b      	lsls	r3, r1, #2
    34d2:	1ac0      	subs	r0, r0, r3
    34d4:	4152      	adcs	r2, r2
    34d6:	d2d9      	bcs.n	348c <__aeabi_idiv+0x148>
    34d8:	0843      	lsrs	r3, r0, #1
    34da:	428b      	cmp	r3, r1
    34dc:	d301      	bcc.n	34e2 <__aeabi_idiv+0x19e>
    34de:	004b      	lsls	r3, r1, #1
    34e0:	1ac0      	subs	r0, r0, r3
    34e2:	4152      	adcs	r2, r2
    34e4:	1a41      	subs	r1, r0, r1
    34e6:	d200      	bcs.n	34ea <__aeabi_idiv+0x1a6>
    34e8:	4601      	mov	r1, r0
    34ea:	4663      	mov	r3, ip
    34ec:	4152      	adcs	r2, r2
    34ee:	105b      	asrs	r3, r3, #1
    34f0:	4610      	mov	r0, r2
    34f2:	d301      	bcc.n	34f8 <__aeabi_idiv+0x1b4>
    34f4:	4240      	negs	r0, r0
    34f6:	2b00      	cmp	r3, #0
    34f8:	d500      	bpl.n	34fc <__aeabi_idiv+0x1b8>
    34fa:	4249      	negs	r1, r1
    34fc:	4770      	bx	lr
    34fe:	4663      	mov	r3, ip
    3500:	105b      	asrs	r3, r3, #1
    3502:	d300      	bcc.n	3506 <__aeabi_idiv+0x1c2>
    3504:	4240      	negs	r0, r0
    3506:	b501      	push	{r0, lr}
    3508:	2000      	movs	r0, #0
    350a:	f000 f80b 	bl	3524 <__aeabi_idiv0>
    350e:	bd02      	pop	{r1, pc}

00003510 <__aeabi_idivmod>:
    3510:	2900      	cmp	r1, #0
    3512:	d0f8      	beq.n	3506 <__aeabi_idiv+0x1c2>
    3514:	b503      	push	{r0, r1, lr}
    3516:	f7ff ff15 	bl	3344 <__aeabi_idiv>
    351a:	bc0e      	pop	{r1, r2, r3}
    351c:	4342      	muls	r2, r0
    351e:	1a89      	subs	r1, r1, r2
    3520:	4718      	bx	r3
    3522:	46c0      	nop			; (mov r8, r8)

00003524 <__aeabi_idiv0>:
    3524:	4770      	bx	lr
    3526:	46c0      	nop			; (mov r8, r8)

00003528 <__ctzsi2>:
    3528:	4241      	negs	r1, r0
    352a:	4008      	ands	r0, r1
    352c:	211c      	movs	r1, #28
    352e:	2301      	movs	r3, #1
    3530:	041b      	lsls	r3, r3, #16
    3532:	4298      	cmp	r0, r3
    3534:	d301      	bcc.n	353a <__ctzsi2+0x12>
    3536:	0c00      	lsrs	r0, r0, #16
    3538:	3910      	subs	r1, #16
    353a:	0a1b      	lsrs	r3, r3, #8
    353c:	4298      	cmp	r0, r3
    353e:	d301      	bcc.n	3544 <__ctzsi2+0x1c>
    3540:	0a00      	lsrs	r0, r0, #8
    3542:	3908      	subs	r1, #8
    3544:	091b      	lsrs	r3, r3, #4
    3546:	4298      	cmp	r0, r3
    3548:	d301      	bcc.n	354e <__ctzsi2+0x26>
    354a:	0900      	lsrs	r0, r0, #4
    354c:	3904      	subs	r1, #4
    354e:	a202      	add	r2, pc, #8	; (adr r2, 3558 <__ctzsi2+0x30>)
    3550:	5c10      	ldrb	r0, [r2, r0]
    3552:	1a40      	subs	r0, r0, r1
    3554:	4770      	bx	lr
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	1d1d1c1b 	.word	0x1d1d1c1b
    355c:	1e1e1e1e 	.word	0x1e1e1e1e
    3560:	1f1f1f1f 	.word	0x1f1f1f1f
    3564:	1f1f1f1f 	.word	0x1f1f1f1f

00003568 <__libc_init_array>:
    3568:	4b0e      	ldr	r3, [pc, #56]	; (35a4 <__libc_init_array+0x3c>)
    356a:	b570      	push	{r4, r5, r6, lr}
    356c:	2500      	movs	r5, #0
    356e:	1c1e      	adds	r6, r3, #0
    3570:	4c0d      	ldr	r4, [pc, #52]	; (35a8 <__libc_init_array+0x40>)
    3572:	1ae4      	subs	r4, r4, r3
    3574:	10a4      	asrs	r4, r4, #2
    3576:	42a5      	cmp	r5, r4
    3578:	d004      	beq.n	3584 <__libc_init_array+0x1c>
    357a:	00ab      	lsls	r3, r5, #2
    357c:	58f3      	ldr	r3, [r6, r3]
    357e:	4798      	blx	r3
    3580:	3501      	adds	r5, #1
    3582:	e7f8      	b.n	3576 <__libc_init_array+0xe>
    3584:	f000 f850 	bl	3628 <_init>
    3588:	4b08      	ldr	r3, [pc, #32]	; (35ac <__libc_init_array+0x44>)
    358a:	2500      	movs	r5, #0
    358c:	1c1e      	adds	r6, r3, #0
    358e:	4c08      	ldr	r4, [pc, #32]	; (35b0 <__libc_init_array+0x48>)
    3590:	1ae4      	subs	r4, r4, r3
    3592:	10a4      	asrs	r4, r4, #2
    3594:	42a5      	cmp	r5, r4
    3596:	d004      	beq.n	35a2 <__libc_init_array+0x3a>
    3598:	00ab      	lsls	r3, r5, #2
    359a:	58f3      	ldr	r3, [r6, r3]
    359c:	4798      	blx	r3
    359e:	3501      	adds	r5, #1
    35a0:	e7f8      	b.n	3594 <__libc_init_array+0x2c>
    35a2:	bd70      	pop	{r4, r5, r6, pc}
    35a4:	00003634 	.word	0x00003634
    35a8:	00003634 	.word	0x00003634
    35ac:	00003634 	.word	0x00003634
    35b0:	00003638 	.word	0x00003638

000035b4 <memcpy>:
    35b4:	2300      	movs	r3, #0
    35b6:	b510      	push	{r4, lr}
    35b8:	4293      	cmp	r3, r2
    35ba:	d003      	beq.n	35c4 <memcpy+0x10>
    35bc:	5ccc      	ldrb	r4, [r1, r3]
    35be:	54c4      	strb	r4, [r0, r3]
    35c0:	3301      	adds	r3, #1
    35c2:	e7f9      	b.n	35b8 <memcpy+0x4>
    35c4:	bd10      	pop	{r4, pc}

000035c6 <memset>:
    35c6:	1c03      	adds	r3, r0, #0
    35c8:	1882      	adds	r2, r0, r2
    35ca:	4293      	cmp	r3, r2
    35cc:	d002      	beq.n	35d4 <memset+0xe>
    35ce:	7019      	strb	r1, [r3, #0]
    35d0:	3301      	adds	r3, #1
    35d2:	e7fa      	b.n	35ca <memset+0x4>
    35d4:	4770      	bx	lr
    35d6:	0000      	movs	r0, r0
    35d8:	00000f24 	.word	0x00000f24
    35dc:	00000f04 	.word	0x00000f04
    35e0:	00000f04 	.word	0x00000f04
    35e4:	00000f90 	.word	0x00000f90
    35e8:	00000f16 	.word	0x00000f16
    35ec:	00000f32 	.word	0x00000f32
    35f0:	00000f08 	.word	0x00000f08
    35f4:	00000f40 	.word	0x00000f40
    35f8:	00000f80 	.word	0x00000f80
    35fc:	01020300 	.word	0x01020300
    3600:	000023d2 	.word	0x000023d2
    3604:	000023e0 	.word	0x000023e0
    3608:	0000247e 	.word	0x0000247e
    360c:	000024e6 	.word	0x000024e6
    3610:	0000254a 	.word	0x0000254a

00003614 <_usb_device_irq_bits>:
    3614:	00080004 00800070 01000001 00000200     ....p...........

00003624 <_usb_endpoint_irq_bits>:
    3624:	60100c03                                ...`

00003628 <_init>:
    3628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    362e:	bc08      	pop	{r3}
    3630:	469e      	mov	lr, r3
    3632:	4770      	bx	lr

00003634 <__init_array_start>:
    3634:	000000dd 	.word	0x000000dd

00003638 <_fini>:
    3638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    363e:	bc08      	pop	{r3}
    3640:	469e      	mov	lr, r3
    3642:	4770      	bx	lr

00003644 <__fini_array_start>:
    3644:	000000b5 	.word	0x000000b5
