
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009004  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00009004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a8  20000010  00009014  00020010  2**2
                  ALLOC
  3 .stack        00002000  200002b8  000092bc  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037de3  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ad1  00000000  00000000  00057e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000508e  00000000  00000000  0005b945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e18  00000000  00000000  000609d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ca8  00000000  00000000  000617eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a7d5  00000000  00000000  00062493  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011d8c  00000000  00000000  0006cc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092734  00000000  00000000  0007e9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003224  00000000  00000000  00111128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200022b8 	.word	0x200022b8
       4:	00004d29 	.word	0x00004d29
       8:	00004e21 	.word	0x00004e21
       c:	00004e21 	.word	0x00004e21
	...
      2c:	00004e21 	.word	0x00004e21
	...
      38:	00004e21 	.word	0x00004e21
      3c:	00004e21 	.word	0x00004e21
      40:	00004e21 	.word	0x00004e21
      44:	00004e21 	.word	0x00004e21
      48:	00004e21 	.word	0x00004e21
      4c:	00000ae1 	.word	0x00000ae1
      50:	00000edd 	.word	0x00000edd
      54:	00004e21 	.word	0x00004e21
      58:	00004e21 	.word	0x00004e21
      5c:	00004e21 	.word	0x00004e21
      60:	00004e21 	.word	0x00004e21
      64:	00003ed9 	.word	0x00003ed9
      68:	00003ef1 	.word	0x00003ef1
      6c:	00003f09 	.word	0x00003f09
      70:	00003f21 	.word	0x00003f21
      74:	00003f39 	.word	0x00003f39
      78:	00003f51 	.word	0x00003f51
      7c:	00002bed 	.word	0x00002bed
      80:	00002c01 	.word	0x00002c01
      84:	00002c15 	.word	0x00002c15
      88:	00002ca5 	.word	0x00002ca5
      8c:	00002cb9 	.word	0x00002cb9
      90:	00002ccd 	.word	0x00002ccd
	...
      9c:	00004e21 	.word	0x00004e21
      a0:	00004e21 	.word	0x00004e21
      a4:	00004e21 	.word	0x00004e21
      a8:	00004e21 	.word	0x00004e21
      ac:	00004e21 	.word	0x00004e21
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00009004 	.word	0x00009004

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00009004 	.word	0x00009004
     10c:	00009004 	.word	0x00009004
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <system_interrupt_enable+0x28>)
     1be:	1dfa      	adds	r2, r7, #7
     1c0:	7812      	ldrb	r2, [r2, #0]
     1c2:	0011      	movs	r1, r2
     1c4:	221f      	movs	r2, #31
     1c6:	400a      	ands	r2, r1
     1c8:	2101      	movs	r1, #1
     1ca:	4091      	lsls	r1, r2
     1cc:	000a      	movs	r2, r1
     1ce:	601a      	str	r2, [r3, #0]
}
     1d0:	46c0      	nop			; (mov r8, r8)
     1d2:	46bd      	mov	sp, r7
     1d4:	b002      	add	sp, #8
     1d6:	bd80      	pop	{r7, pc}
     1d8:	e000e100 	.word	0xe000e100

000001dc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b084      	sub	sp, #16
     1e0:	af00      	add	r7, sp, #0
     1e2:	0002      	movs	r2, r0
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e8:	230f      	movs	r3, #15
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f4:	230f      	movs	r3, #15
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d10c      	bne.n	218 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <_extint_get_eic_from_channel+0x48>)
     200:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681b      	ldr	r3, [r3, #0]
     216:	e000      	b.n	21a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     218:	2300      	movs	r3, #0
	}
}
     21a:	0018      	movs	r0, r3
     21c:	46bd      	mov	sp, r7
     21e:	b004      	add	sp, #16
     220:	bd80      	pop	{r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	40001800 	.word	0x40001800

00000228 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     228:	b580      	push	{r7, lr}
     22a:	b082      	sub	sp, #8
     22c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22e:	4b0f      	ldr	r3, [pc, #60]	; (26c <extint_is_syncing+0x44>)
     230:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     232:	2300      	movs	r3, #0
     234:	607b      	str	r3, [r7, #4]
     236:	e011      	b.n	25c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     238:	687b      	ldr	r3, [r7, #4]
     23a:	009b      	lsls	r3, r3, #2
     23c:	2208      	movs	r2, #8
     23e:	4694      	mov	ip, r2
     240:	44bc      	add	ip, r7
     242:	4463      	add	r3, ip
     244:	3b08      	subs	r3, #8
     246:	681b      	ldr	r3, [r3, #0]
     248:	785b      	ldrb	r3, [r3, #1]
     24a:	b2db      	uxtb	r3, r3
     24c:	b25b      	sxtb	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	da01      	bge.n	256 <extint_is_syncing+0x2e>
			return true;
     252:	2301      	movs	r3, #1
     254:	e006      	b.n	264 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     256:	687b      	ldr	r3, [r7, #4]
     258:	3301      	adds	r3, #1
     25a:	607b      	str	r3, [r7, #4]
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2b00      	cmp	r3, #0
     260:	d0ea      	beq.n	238 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     262:	2300      	movs	r3, #0
}
     264:	0018      	movs	r0, r3
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2d      	ldr	r3, [pc, #180]	; (32c <_system_extint_init+0xbc>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2140      	movs	r1, #64	; 0x40
     27c:	2000      	movs	r0, #0
     27e:	4b2c      	ldr	r3, [pc, #176]	; (330 <_system_extint_init+0xc0>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	003b      	movs	r3, r7
     284:	0018      	movs	r0, r3
     286:	4b2b      	ldr	r3, [pc, #172]	; (334 <_system_extint_init+0xc4>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	003b      	movs	r3, r7
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	003b      	movs	r3, r7
     292:	0019      	movs	r1, r3
     294:	2005      	movs	r0, #5
     296:	4b28      	ldr	r3, [pc, #160]	; (338 <_system_extint_init+0xc8>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b27      	ldr	r3, [pc, #156]	; (33c <_system_extint_init+0xcc>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b17      	ldr	r3, [pc, #92]	; (340 <_system_extint_init+0xd0>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b12      	ldr	r3, [pc, #72]	; (344 <_system_extint_init+0xd4>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0b      	ldr	r3, [pc, #44]	; (348 <_system_extint_init+0xd8>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_system_extint_init+0xdc>)
     320:	4798      	blx	r3
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b004      	add	sp, #16
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	40001800 	.word	0x40001800
     330:	0000012d 	.word	0x0000012d
     334:	00000115 	.word	0x00000115
     338:	000049b5 	.word	0x000049b5
     33c:	000049f9 	.word	0x000049f9
     340:	00000229 	.word	0x00000229
     344:	2000008c 	.word	0x2000008c
     348:	000001b1 	.word	0x000001b1
     34c:	00000351 	.word	0x00000351

00000350 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     350:	b580      	push	{r7, lr}
     352:	b082      	sub	sp, #8
     354:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     356:	4b15      	ldr	r3, [pc, #84]	; (3ac <_extint_enable+0x5c>)
     358:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     35a:	2300      	movs	r3, #0
     35c:	607b      	str	r3, [r7, #4]
     35e:	e018      	b.n	392 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     360:	687b      	ldr	r3, [r7, #4]
     362:	009b      	lsls	r3, r3, #2
     364:	2208      	movs	r2, #8
     366:	4694      	mov	ip, r2
     368:	44bc      	add	ip, r7
     36a:	4463      	add	r3, ip
     36c:	3b08      	subs	r3, #8
     36e:	681a      	ldr	r2, [r3, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	009b      	lsls	r3, r3, #2
     374:	2108      	movs	r1, #8
     376:	468c      	mov	ip, r1
     378:	44bc      	add	ip, r7
     37a:	4463      	add	r3, ip
     37c:	3b08      	subs	r3, #8
     37e:	681b      	ldr	r3, [r3, #0]
     380:	781b      	ldrb	r3, [r3, #0]
     382:	b2db      	uxtb	r3, r3
     384:	2102      	movs	r1, #2
     386:	430b      	orrs	r3, r1
     388:	b2db      	uxtb	r3, r3
     38a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	3301      	adds	r3, #1
     390:	607b      	str	r3, [r7, #4]
     392:	687b      	ldr	r3, [r7, #4]
     394:	2b00      	cmp	r3, #0
     396:	d0e3      	beq.n	360 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     398:	46c0      	nop			; (mov r8, r8)
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_extint_enable+0x60>)
     39c:	4798      	blx	r3
     39e:	1e03      	subs	r3, r0, #0
     3a0:	d1fb      	bne.n	39a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	46bd      	mov	sp, r7
     3a6:	b002      	add	sp, #8
     3a8:	bd80      	pop	{r7, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001800 	.word	0x40001800
     3b0:	00000229 	.word	0x00000229

000003b4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	2200      	movs	r2, #0
     3c0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2200      	movs	r2, #0
     3c6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	2201      	movs	r2, #1
     3cc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	2201      	movs	r2, #1
     3d2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2202      	movs	r2, #2
     3de:	72da      	strb	r2, [r3, #11]
}
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	46bd      	mov	sp, r7
     3e4:	b002      	add	sp, #8
     3e6:	bd80      	pop	{r7, pc}

000003e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b086      	sub	sp, #24
     3ec:	af00      	add	r7, sp, #0
     3ee:	0002      	movs	r2, r0
     3f0:	6039      	str	r1, [r7, #0]
     3f2:	1dfb      	adds	r3, r7, #7
     3f4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3f6:	2308      	movs	r3, #8
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	0018      	movs	r0, r3
     3fc:	4b36      	ldr	r3, [pc, #216]	; (4d8 <extint_chan_set_config+0xf0>)
     3fe:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     400:	683b      	ldr	r3, [r7, #0]
     402:	685b      	ldr	r3, [r3, #4]
     404:	b2da      	uxtb	r2, r3
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     40c:	2308      	movs	r3, #8
     40e:	18fb      	adds	r3, r7, r3
     410:	2200      	movs	r2, #0
     412:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     414:	683b      	ldr	r3, [r7, #0]
     416:	7a1a      	ldrb	r2, [r3, #8]
     418:	2308      	movs	r3, #8
     41a:	18fb      	adds	r3, r7, r3
     41c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     41e:	683b      	ldr	r3, [r7, #0]
     420:	681b      	ldr	r3, [r3, #0]
     422:	b2db      	uxtb	r3, r3
     424:	2208      	movs	r2, #8
     426:	18ba      	adds	r2, r7, r2
     428:	0011      	movs	r1, r2
     42a:	0018      	movs	r0, r3
     42c:	4b2b      	ldr	r3, [pc, #172]	; (4dc <extint_chan_set_config+0xf4>)
     42e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     430:	1dfb      	adds	r3, r7, #7
     432:	781b      	ldrb	r3, [r3, #0]
     434:	0018      	movs	r0, r3
     436:	4b2a      	ldr	r3, [pc, #168]	; (4e0 <extint_chan_set_config+0xf8>)
     438:	4798      	blx	r3
     43a:	0003      	movs	r3, r0
     43c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     43e:	1dfb      	adds	r3, r7, #7
     440:	781b      	ldrb	r3, [r3, #0]
     442:	2207      	movs	r2, #7
     444:	4013      	ands	r3, r2
     446:	009b      	lsls	r3, r3, #2
     448:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	7adb      	ldrb	r3, [r3, #11]
     44e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     450:	683b      	ldr	r3, [r7, #0]
     452:	7a9b      	ldrb	r3, [r3, #10]
     454:	2b00      	cmp	r3, #0
     456:	d003      	beq.n	460 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     458:	697b      	ldr	r3, [r7, #20]
     45a:	2208      	movs	r2, #8
     45c:	4313      	orrs	r3, r2
     45e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     460:	1dfb      	adds	r3, r7, #7
     462:	781b      	ldrb	r3, [r3, #0]
     464:	08db      	lsrs	r3, r3, #3
     466:	b2db      	uxtb	r3, r3
     468:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     46a:	1dfb      	adds	r3, r7, #7
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	08db      	lsrs	r3, r3, #3
     470:	b2db      	uxtb	r3, r3
     472:	001a      	movs	r2, r3
     474:	693b      	ldr	r3, [r7, #16]
     476:	3206      	adds	r2, #6
     478:	0092      	lsls	r2, r2, #2
     47a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47c:	210f      	movs	r1, #15
     47e:	68fa      	ldr	r2, [r7, #12]
     480:	4091      	lsls	r1, r2
     482:	000a      	movs	r2, r1
     484:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     486:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     488:	6979      	ldr	r1, [r7, #20]
     48a:	68fb      	ldr	r3, [r7, #12]
     48c:	4099      	lsls	r1, r3
     48e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     490:	431a      	orrs	r2, r3
     492:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	693b      	ldr	r3, [r7, #16]
     496:	1d82      	adds	r2, r0, #6
     498:	0092      	lsls	r2, r2, #2
     49a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     49c:	683b      	ldr	r3, [r7, #0]
     49e:	7a5b      	ldrb	r3, [r3, #9]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d00a      	beq.n	4ba <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4a4:	693b      	ldr	r3, [r7, #16]
     4a6:	695a      	ldr	r2, [r3, #20]
     4a8:	1dfb      	adds	r3, r7, #7
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	2101      	movs	r1, #1
     4ae:	4099      	lsls	r1, r3
     4b0:	000b      	movs	r3, r1
     4b2:	431a      	orrs	r2, r3
     4b4:	693b      	ldr	r3, [r7, #16]
     4b6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     4b8:	e00a      	b.n	4d0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4ba:	693b      	ldr	r3, [r7, #16]
     4bc:	695b      	ldr	r3, [r3, #20]
     4be:	1dfa      	adds	r2, r7, #7
     4c0:	7812      	ldrb	r2, [r2, #0]
     4c2:	2101      	movs	r1, #1
     4c4:	4091      	lsls	r1, r2
     4c6:	000a      	movs	r2, r1
     4c8:	43d2      	mvns	r2, r2
     4ca:	401a      	ands	r2, r3
     4cc:	693b      	ldr	r3, [r7, #16]
     4ce:	615a      	str	r2, [r3, #20]
	}
}
     4d0:	46c0      	nop			; (mov r8, r8)
     4d2:	46bd      	mov	sp, r7
     4d4:	b006      	add	sp, #24
     4d6:	bd80      	pop	{r7, pc}
     4d8:	00000189 	.word	0x00000189
     4dc:	00004ca1 	.word	0x00004ca1
     4e0:	000001dd 	.word	0x000001dd

000004e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	2200      	movs	r2, #0
     4f0:	701a      	strb	r2, [r3, #0]
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b002      	add	sp, #8
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)

000004fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b082      	sub	sp, #8
     500:	af00      	add	r7, sp, #0
     502:	0002      	movs	r2, r0
     504:	6039      	str	r1, [r7, #0]
     506:	1dfb      	adds	r3, r7, #7
     508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     50a:	1dfb      	adds	r3, r7, #7
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	2b01      	cmp	r3, #1
     510:	d00a      	beq.n	528 <system_apb_clock_set_mask+0x2c>
     512:	2b02      	cmp	r3, #2
     514:	d00f      	beq.n	536 <system_apb_clock_set_mask+0x3a>
     516:	2b00      	cmp	r3, #0
     518:	d114      	bne.n	544 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     51a:	4b0e      	ldr	r3, [pc, #56]	; (554 <system_apb_clock_set_mask+0x58>)
     51c:	4a0d      	ldr	r2, [pc, #52]	; (554 <system_apb_clock_set_mask+0x58>)
     51e:	6991      	ldr	r1, [r2, #24]
     520:	683a      	ldr	r2, [r7, #0]
     522:	430a      	orrs	r2, r1
     524:	619a      	str	r2, [r3, #24]
			break;
     526:	e00f      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     528:	4b0a      	ldr	r3, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52a:	4a0a      	ldr	r2, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52c:	69d1      	ldr	r1, [r2, #28]
     52e:	683a      	ldr	r2, [r7, #0]
     530:	430a      	orrs	r2, r1
     532:	61da      	str	r2, [r3, #28]
			break;
     534:	e008      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <system_apb_clock_set_mask+0x58>)
     538:	4a06      	ldr	r2, [pc, #24]	; (554 <system_apb_clock_set_mask+0x58>)
     53a:	6a11      	ldr	r1, [r2, #32]
     53c:	683a      	ldr	r2, [r7, #0]
     53e:	430a      	orrs	r2, r1
     540:	621a      	str	r2, [r3, #32]
			break;
     542:	e001      	b.n	548 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     544:	2317      	movs	r3, #23
     546:	e000      	b.n	54a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     548:	2300      	movs	r3, #0
}
     54a:	0018      	movs	r0, r3
     54c:	46bd      	mov	sp, r7
     54e:	b002      	add	sp, #8
     550:	bd80      	pop	{r7, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	40000400 	.word	0x40000400

00000558 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
     55e:	0002      	movs	r2, r0
     560:	1dfb      	adds	r3, r7, #7
     562:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <system_interrupt_enable+0x28>)
     566:	1dfa      	adds	r2, r7, #7
     568:	7812      	ldrb	r2, [r2, #0]
     56a:	0011      	movs	r1, r2
     56c:	221f      	movs	r2, #31
     56e:	400a      	ands	r2, r1
     570:	2101      	movs	r1, #1
     572:	4091      	lsls	r1, r2
     574:	000a      	movs	r2, r1
     576:	601a      	str	r2, [r3, #0]
}
     578:	46c0      	nop			; (mov r8, r8)
     57a:	46bd      	mov	sp, r7
     57c:	b002      	add	sp, #8
     57e:	bd80      	pop	{r7, pc}
     580:	e000e100 	.word	0xe000e100

00000584 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     584:	b580      	push	{r7, lr}
     586:	b082      	sub	sp, #8
     588:	af00      	add	r7, sp, #0
     58a:	0002      	movs	r2, r0
     58c:	1dfb      	adds	r3, r7, #7
     58e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     590:	4a07      	ldr	r2, [pc, #28]	; (5b0 <system_interrupt_disable+0x2c>)
     592:	1dfb      	adds	r3, r7, #7
     594:	781b      	ldrb	r3, [r3, #0]
     596:	0019      	movs	r1, r3
     598:	231f      	movs	r3, #31
     59a:	400b      	ands	r3, r1
     59c:	2101      	movs	r1, #1
     59e:	4099      	lsls	r1, r3
     5a0:	000b      	movs	r3, r1
     5a2:	0019      	movs	r1, r3
     5a4:	2380      	movs	r3, #128	; 0x80
     5a6:	50d1      	str	r1, [r2, r3]
}
     5a8:	46c0      	nop			; (mov r8, r8)
     5aa:	46bd      	mov	sp, r7
     5ac:	b002      	add	sp, #8
     5ae:	bd80      	pop	{r7, pc}
     5b0:	e000e100 	.word	0xe000e100

000005b4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5b4:	b580      	push	{r7, lr}
     5b6:	b084      	sub	sp, #16
     5b8:	af00      	add	r7, sp, #0
     5ba:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	681b      	ldr	r3, [r3, #0]
     5c0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c2:	68fb      	ldr	r3, [r7, #12]
     5c4:	7a9b      	ldrb	r3, [r3, #10]
     5c6:	b2db      	uxtb	r3, r3
     5c8:	b25b      	sxtb	r3, r3
     5ca:	2b00      	cmp	r3, #0
     5cc:	da01      	bge.n	5d2 <rtc_count_is_syncing+0x1e>
                return true;
     5ce:	2301      	movs	r3, #1
     5d0:	e000      	b.n	5d4 <rtc_count_is_syncing+0x20>
        }

        return false;
     5d2:	2300      	movs	r3, #0
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b004      	add	sp, #16
     5da:	bd80      	pop	{r7, pc}

000005dc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5dc:	b580      	push	{r7, lr}
     5de:	b084      	sub	sp, #16
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5ea:	2003      	movs	r0, #3
     5ec:	4b0a      	ldr	r3, [pc, #40]	; (618 <rtc_count_enable+0x3c>)
     5ee:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	0018      	movs	r0, r3
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <rtc_count_enable+0x40>)
     5f8:	4798      	blx	r3
     5fa:	1e03      	subs	r3, r0, #0
     5fc:	d1f9      	bne.n	5f2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5fe:	68fb      	ldr	r3, [r7, #12]
     600:	881b      	ldrh	r3, [r3, #0]
     602:	b29b      	uxth	r3, r3
     604:	2202      	movs	r2, #2
     606:	4313      	orrs	r3, r2
     608:	b29a      	uxth	r2, r3
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	801a      	strh	r2, [r3, #0]
}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	46bd      	mov	sp, r7
     612:	b004      	add	sp, #16
     614:	bd80      	pop	{r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000559 	.word	0x00000559
     61c:	000005b5 	.word	0x000005b5

00000620 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     62e:	2003      	movs	r0, #3
     630:	4b0a      	ldr	r3, [pc, #40]	; (65c <rtc_count_disable+0x3c>)
     632:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     634:	46c0      	nop			; (mov r8, r8)
     636:	687b      	ldr	r3, [r7, #4]
     638:	0018      	movs	r0, r3
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <rtc_count_disable+0x40>)
     63c:	4798      	blx	r3
     63e:	1e03      	subs	r3, r0, #0
     640:	d1f9      	bne.n	636 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     642:	68fb      	ldr	r3, [r7, #12]
     644:	881b      	ldrh	r3, [r3, #0]
     646:	b29b      	uxth	r3, r3
     648:	2202      	movs	r2, #2
     64a:	4393      	bics	r3, r2
     64c:	b29a      	uxth	r2, r3
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	801a      	strh	r2, [r3, #0]
}
     652:	46c0      	nop			; (mov r8, r8)
     654:	46bd      	mov	sp, r7
     656:	b004      	add	sp, #16
     658:	bd80      	pop	{r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00000585 	.word	0x00000585
     660:	000005b5 	.word	0x000005b5

00000664 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     672:	687b      	ldr	r3, [r7, #4]
     674:	0018      	movs	r0, r3
     676:	4b0d      	ldr	r3, [pc, #52]	; (6ac <rtc_count_reset+0x48>)
     678:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2200      	movs	r2, #0
     684:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     686:	46c0      	nop			; (mov r8, r8)
     688:	687b      	ldr	r3, [r7, #4]
     68a:	0018      	movs	r0, r3
     68c:	4b08      	ldr	r3, [pc, #32]	; (6b0 <rtc_count_reset+0x4c>)
     68e:	4798      	blx	r3
     690:	1e03      	subs	r3, r0, #0
     692:	d1f9      	bne.n	688 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	881b      	ldrh	r3, [r3, #0]
     698:	b29b      	uxth	r3, r3
     69a:	2201      	movs	r2, #1
     69c:	4313      	orrs	r3, r2
     69e:	b29a      	uxth	r2, r3
     6a0:	68fb      	ldr	r3, [r7, #12]
     6a2:	801a      	strh	r2, [r3, #0]
}
     6a4:	46c0      	nop			; (mov r8, r8)
     6a6:	46bd      	mov	sp, r7
     6a8:	b004      	add	sp, #16
     6aa:	bd80      	pop	{r7, pc}
     6ac:	00000621 	.word	0x00000621
     6b0:	000005b5 	.word	0x000005b5

000006b4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	b084      	sub	sp, #16
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
     6bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	681b      	ldr	r3, [r3, #0]
     6c2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6c4:	683b      	ldr	r3, [r7, #0]
     6c6:	881a      	ldrh	r2, [r3, #0]
     6c8:	68bb      	ldr	r3, [r7, #8]
     6ca:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	789b      	ldrb	r3, [r3, #2]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d03a      	beq.n	74a <_rtc_count_set_config+0x96>
     6d4:	2b01      	cmp	r3, #1
     6d6:	d000      	beq.n	6da <_rtc_count_set_config+0x26>
     6d8:	e06c      	b.n	7b4 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6da:	68bb      	ldr	r3, [r7, #8]
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29a      	uxth	r2, r3
     6e0:	68bb      	ldr	r3, [r7, #8]
     6e2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	78db      	ldrb	r3, [r3, #3]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d007      	beq.n	6fc <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6ec:	68bb      	ldr	r3, [r7, #8]
     6ee:	881b      	ldrh	r3, [r3, #0]
     6f0:	b29b      	uxth	r3, r3
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	4313      	orrs	r3, r2
     6f6:	b29a      	uxth	r2, r3
     6f8:	68bb      	ldr	r3, [r7, #8]
     6fa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6fc:	230f      	movs	r3, #15
     6fe:	18fb      	adds	r3, r7, r3
     700:	2200      	movs	r2, #0
     702:	701a      	strb	r2, [r3, #0]
     704:	e01b      	b.n	73e <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     706:	46c0      	nop			; (mov r8, r8)
     708:	687b      	ldr	r3, [r7, #4]
     70a:	0018      	movs	r0, r3
     70c:	4b33      	ldr	r3, [pc, #204]	; (7dc <_rtc_count_set_config+0x128>)
     70e:	4798      	blx	r3
     710:	1e03      	subs	r3, r0, #0
     712:	d1f9      	bne.n	708 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781a      	ldrb	r2, [r3, #0]
     71a:	683b      	ldr	r3, [r7, #0]
     71c:	3202      	adds	r2, #2
     71e:	0092      	lsls	r2, r2, #2
     720:	58d1      	ldr	r1, [r2, r3]
     722:	230f      	movs	r3, #15
     724:	18fb      	adds	r3, r7, r3
     726:	781a      	ldrb	r2, [r3, #0]
     728:	687b      	ldr	r3, [r7, #4]
     72a:	0018      	movs	r0, r3
     72c:	4b2c      	ldr	r3, [pc, #176]	; (7e0 <_rtc_count_set_config+0x12c>)
     72e:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     730:	230f      	movs	r3, #15
     732:	18fb      	adds	r3, r7, r3
     734:	781a      	ldrb	r2, [r3, #0]
     736:	230f      	movs	r3, #15
     738:	18fb      	adds	r3, r7, r3
     73a:	3201      	adds	r2, #1
     73c:	701a      	strb	r2, [r3, #0]
     73e:	230f      	movs	r3, #15
     740:	18fb      	adds	r3, r7, r3
     742:	781b      	ldrb	r3, [r3, #0]
     744:	2b00      	cmp	r3, #0
     746:	d0de      	beq.n	706 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     748:	e036      	b.n	7b8 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	881b      	ldrh	r3, [r3, #0]
     74e:	b29b      	uxth	r3, r3
     750:	2204      	movs	r2, #4
     752:	4313      	orrs	r3, r2
     754:	b29a      	uxth	r2, r3
     756:	68bb      	ldr	r3, [r7, #8]
     758:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	78db      	ldrb	r3, [r3, #3]
     75e:	2b00      	cmp	r3, #0
     760:	d001      	beq.n	766 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     762:	2317      	movs	r3, #23
     764:	e036      	b.n	7d4 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     766:	230e      	movs	r3, #14
     768:	18fb      	adds	r3, r7, r3
     76a:	2200      	movs	r2, #0
     76c:	701a      	strb	r2, [r3, #0]
     76e:	e01b      	b.n	7a8 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     770:	46c0      	nop			; (mov r8, r8)
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b19      	ldr	r3, [pc, #100]	; (7dc <_rtc_count_set_config+0x128>)
     778:	4798      	blx	r3
     77a:	1e03      	subs	r3, r0, #0
     77c:	d1f9      	bne.n	772 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     77e:	230e      	movs	r3, #14
     780:	18fb      	adds	r3, r7, r3
     782:	781a      	ldrb	r2, [r3, #0]
     784:	683b      	ldr	r3, [r7, #0]
     786:	3202      	adds	r2, #2
     788:	0092      	lsls	r2, r2, #2
     78a:	58d1      	ldr	r1, [r2, r3]
     78c:	230e      	movs	r3, #14
     78e:	18fb      	adds	r3, r7, r3
     790:	781a      	ldrb	r2, [r3, #0]
     792:	687b      	ldr	r3, [r7, #4]
     794:	0018      	movs	r0, r3
     796:	4b12      	ldr	r3, [pc, #72]	; (7e0 <_rtc_count_set_config+0x12c>)
     798:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     79a:	230e      	movs	r3, #14
     79c:	18fb      	adds	r3, r7, r3
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	3201      	adds	r2, #1
     7a6:	701a      	strb	r2, [r3, #0]
     7a8:	230e      	movs	r3, #14
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2b01      	cmp	r3, #1
     7b0:	d9de      	bls.n	770 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7b2:	e001      	b.n	7b8 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7b4:	2317      	movs	r3, #23
     7b6:	e00d      	b.n	7d4 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	791b      	ldrb	r3, [r3, #4]
     7bc:	2b00      	cmp	r3, #0
     7be:	d008      	beq.n	7d2 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7c0:	68bb      	ldr	r3, [r7, #8]
     7c2:	885b      	ldrh	r3, [r3, #2]
     7c4:	b29b      	uxth	r3, r3
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	01d2      	lsls	r2, r2, #7
     7ca:	4313      	orrs	r3, r2
     7cc:	b29a      	uxth	r2, r3
     7ce:	68bb      	ldr	r3, [r7, #8]
     7d0:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7d2:	2300      	movs	r3, #0
}
     7d4:	0018      	movs	r0, r3
     7d6:	46bd      	mov	sp, r7
     7d8:	b004      	add	sp, #16
     7da:	bd80      	pop	{r7, pc}
     7dc:	000005b5 	.word	0x000005b5
     7e0:	0000093d 	.word	0x0000093d

000007e4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b086      	sub	sp, #24
     7e8:	af00      	add	r7, sp, #0
     7ea:	60f8      	str	r0, [r7, #12]
     7ec:	60b9      	str	r1, [r7, #8]
     7ee:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	68ba      	ldr	r2, [r7, #8]
     7f4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7f6:	2120      	movs	r1, #32
     7f8:	2000      	movs	r0, #0
     7fa:	4b17      	ldr	r3, [pc, #92]	; (858 <rtc_count_init+0x74>)
     7fc:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7fe:	2314      	movs	r3, #20
     800:	18fb      	adds	r3, r7, r3
     802:	0018      	movs	r0, r3
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <rtc_count_init+0x78>)
     806:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2202      	movs	r2, #2
     80e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     810:	2314      	movs	r3, #20
     812:	18fb      	adds	r3, r7, r3
     814:	0019      	movs	r1, r3
     816:	2004      	movs	r0, #4
     818:	4b11      	ldr	r3, [pc, #68]	; (860 <rtc_count_init+0x7c>)
     81a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     81c:	2004      	movs	r0, #4
     81e:	4b11      	ldr	r3, [pc, #68]	; (864 <rtc_count_init+0x80>)
     820:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     822:	68fb      	ldr	r3, [r7, #12]
     824:	0018      	movs	r0, r3
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <rtc_count_init+0x84>)
     828:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	789a      	ldrb	r2, [r3, #2]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     832:	687b      	ldr	r3, [r7, #4]
     834:	791a      	ldrb	r2, [r3, #4]
     836:	68fb      	ldr	r3, [r7, #12]
     838:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <rtc_count_init+0x88>)
     83c:	68fa      	ldr	r2, [r7, #12]
     83e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     840:	687a      	ldr	r2, [r7, #4]
     842:	68fb      	ldr	r3, [r7, #12]
     844:	0011      	movs	r1, r2
     846:	0018      	movs	r0, r3
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <rtc_count_init+0x8c>)
     84a:	4798      	blx	r3
     84c:	0003      	movs	r3, r0
}
     84e:	0018      	movs	r0, r3
     850:	46bd      	mov	sp, r7
     852:	b006      	add	sp, #24
     854:	bd80      	pop	{r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	000004fd 	.word	0x000004fd
     85c:	000004e5 	.word	0x000004e5
     860:	000049b5 	.word	0x000049b5
     864:	000049f9 	.word	0x000049f9
     868:	00000665 	.word	0x00000665
     86c:	200000cc 	.word	0x200000cc
     870:	000006b5 	.word	0x000006b5

00000874 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     884:	46c0      	nop			; (mov r8, r8)
     886:	687b      	ldr	r3, [r7, #4]
     888:	0018      	movs	r0, r3
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <rtc_count_set_count+0x58>)
     88c:	4798      	blx	r3
     88e:	1e03      	subs	r3, r0, #0
     890:	d1f9      	bne.n	886 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     892:	687b      	ldr	r3, [r7, #4]
     894:	791b      	ldrb	r3, [r3, #4]
     896:	2b00      	cmp	r3, #0
     898:	d005      	beq.n	8a6 <rtc_count_set_count+0x32>
     89a:	2b01      	cmp	r3, #1
     89c:	d10e      	bne.n	8bc <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	683a      	ldr	r2, [r7, #0]
     8a2:	611a      	str	r2, [r3, #16]

			break;
     8a4:	e00c      	b.n	8c0 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	4a09      	ldr	r2, [pc, #36]	; (8d0 <rtc_count_set_count+0x5c>)
     8aa:	4293      	cmp	r3, r2
     8ac:	d901      	bls.n	8b2 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8ae:	2317      	movs	r3, #23
     8b0:	e007      	b.n	8c2 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	b29a      	uxth	r2, r3
     8b6:	68fb      	ldr	r3, [r7, #12]
     8b8:	821a      	strh	r2, [r3, #16]

			break;
     8ba:	e001      	b.n	8c0 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8bc:	2317      	movs	r3, #23
     8be:	e000      	b.n	8c2 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8c0:	2300      	movs	r3, #0
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b004      	add	sp, #16
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	000005b5 	.word	0x000005b5
     8d0:	0000ffff 	.word	0x0000ffff

000008d4 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b084      	sub	sp, #16
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	795b      	ldrb	r3, [r3, #5]
     8e6:	2201      	movs	r2, #1
     8e8:	4053      	eors	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2b00      	cmp	r3, #0
     8ee:	d009      	beq.n	904 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8f0:	68bb      	ldr	r3, [r7, #8]
     8f2:	4a10      	ldr	r2, [pc, #64]	; (934 <rtc_count_get_count+0x60>)
     8f4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	0018      	movs	r0, r3
     8fc:	4b0e      	ldr	r3, [pc, #56]	; (938 <rtc_count_get_count+0x64>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d1f9      	bne.n	8f8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     904:	687b      	ldr	r3, [r7, #4]
     906:	791b      	ldrb	r3, [r3, #4]
     908:	2b00      	cmp	r3, #0
     90a:	d005      	beq.n	918 <rtc_count_get_count+0x44>
     90c:	2b01      	cmp	r3, #1
     90e:	d108      	bne.n	922 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	691b      	ldr	r3, [r3, #16]
     914:	60fb      	str	r3, [r7, #12]

			break;
     916:	e007      	b.n	928 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     918:	68bb      	ldr	r3, [r7, #8]
     91a:	8a1b      	ldrh	r3, [r3, #16]
     91c:	b29b      	uxth	r3, r3
     91e:	60fb      	str	r3, [r7, #12]

			break;
     920:	e002      	b.n	928 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     922:	2300      	movs	r3, #0
     924:	60fb      	str	r3, [r7, #12]
			break;
     926:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     928:	68fb      	ldr	r3, [r7, #12]
}
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bd80      	pop	{r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	ffff8000 	.word	0xffff8000
     938:	000005b5 	.word	0x000005b5

0000093c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     93c:	b580      	push	{r7, lr}
     93e:	b086      	sub	sp, #24
     940:	af00      	add	r7, sp, #0
     942:	60f8      	str	r0, [r7, #12]
     944:	60b9      	str	r1, [r7, #8]
     946:	1dfb      	adds	r3, r7, #7
     948:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     950:	46c0      	nop			; (mov r8, r8)
     952:	68fb      	ldr	r3, [r7, #12]
     954:	0018      	movs	r0, r3
     956:	4b1a      	ldr	r3, [pc, #104]	; (9c0 <rtc_count_set_compare+0x84>)
     958:	4798      	blx	r3
     95a:	1e03      	subs	r3, r0, #0
     95c:	d1f9      	bne.n	952 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	791b      	ldrb	r3, [r3, #4]
     962:	2b00      	cmp	r3, #0
     964:	d00f      	beq.n	986 <rtc_count_set_compare+0x4a>
     966:	2b01      	cmp	r3, #1
     968:	d122      	bne.n	9b0 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     96a:	1dfb      	adds	r3, r7, #7
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	2b01      	cmp	r3, #1
     970:	d901      	bls.n	976 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     972:	2317      	movs	r3, #23
     974:	e01f      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     976:	1dfb      	adds	r3, r7, #7
     978:	781a      	ldrb	r2, [r3, #0]
     97a:	697b      	ldr	r3, [r7, #20]
     97c:	3206      	adds	r2, #6
     97e:	0092      	lsls	r2, r2, #2
     980:	68b9      	ldr	r1, [r7, #8]
     982:	50d1      	str	r1, [r2, r3]

			break;
     984:	e016      	b.n	9b4 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     986:	1dfb      	adds	r3, r7, #7
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	2b02      	cmp	r3, #2
     98c:	d901      	bls.n	992 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     98e:	2317      	movs	r3, #23
     990:	e011      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     992:	68bb      	ldr	r3, [r7, #8]
     994:	4a0b      	ldr	r2, [pc, #44]	; (9c4 <rtc_count_set_compare+0x88>)
     996:	4293      	cmp	r3, r2
     998:	d901      	bls.n	99e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e00b      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     99e:	1dfb      	adds	r3, r7, #7
     9a0:	781a      	ldrb	r2, [r3, #0]
     9a2:	68bb      	ldr	r3, [r7, #8]
     9a4:	b299      	uxth	r1, r3
     9a6:	697b      	ldr	r3, [r7, #20]
     9a8:	320c      	adds	r2, #12
     9aa:	0052      	lsls	r2, r2, #1
     9ac:	52d1      	strh	r1, [r2, r3]

			break;
     9ae:	e001      	b.n	9b4 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9b0:	231a      	movs	r3, #26
     9b2:	e000      	b.n	9b6 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9b4:	2300      	movs	r3, #0
}
     9b6:	0018      	movs	r0, r3
     9b8:	46bd      	mov	sp, r7
     9ba:	b006      	add	sp, #24
     9bc:	bd80      	pop	{r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	000005b5 	.word	0x000005b5
     9c4:	0000ffff 	.word	0x0000ffff

000009c8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b084      	sub	sp, #16
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	000a      	movs	r2, r1
     9d2:	1cbb      	adds	r3, r7, #2
     9d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	791b      	ldrb	r3, [r3, #4]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d001      	beq.n	9e8 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9e4:	2315      	movs	r3, #21
     9e6:	e00b      	b.n	a00 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	0018      	movs	r0, r3
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <rtc_count_set_period+0x40>)
     9f0:	4798      	blx	r3
     9f2:	1e03      	subs	r3, r0, #0
     9f4:	d1f9      	bne.n	9ea <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9f6:	68fb      	ldr	r3, [r7, #12]
     9f8:	1cba      	adds	r2, r7, #2
     9fa:	8812      	ldrh	r2, [r2, #0]
     9fc:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9fe:	2300      	movs	r3, #0
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	b004      	add	sp, #16
     a06:	bd80      	pop	{r7, pc}
     a08:	000005b5 	.word	0x000005b5

00000a0c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b086      	sub	sp, #24
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a14:	4b31      	ldr	r3, [pc, #196]	; (adc <_rtc_interrupt_handler+0xd0>)
     a16:	687a      	ldr	r2, [r7, #4]
     a18:	0092      	lsls	r2, r2, #2
     a1a:	58d3      	ldr	r3, [r2, r3]
     a1c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a1e:	697b      	ldr	r3, [r7, #20]
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a24:	230e      	movs	r3, #14
     a26:	18fb      	adds	r3, r7, r3
     a28:	697a      	ldr	r2, [r7, #20]
     a2a:	8ad2      	ldrh	r2, [r2, #22]
     a2c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	8a9b      	ldrh	r3, [r3, #20]
     a32:	b29a      	uxth	r2, r3
     a34:	230e      	movs	r3, #14
     a36:	18fb      	adds	r3, r7, r3
     a38:	210e      	movs	r1, #14
     a3a:	1879      	adds	r1, r7, r1
     a3c:	8809      	ldrh	r1, [r1, #0]
     a3e:	400a      	ands	r2, r1
     a40:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a42:	693b      	ldr	r3, [r7, #16]
     a44:	7a1b      	ldrb	r3, [r3, #8]
     a46:	b2da      	uxtb	r2, r3
     a48:	230c      	movs	r3, #12
     a4a:	18fb      	adds	r3, r7, r3
     a4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a4e:	693b      	ldr	r3, [r7, #16]
     a50:	79db      	ldrb	r3, [r3, #7]
     a52:	b2db      	uxtb	r3, r3
     a54:	b29a      	uxth	r2, r3
     a56:	230c      	movs	r3, #12
     a58:	18fb      	adds	r3, r7, r3
     a5a:	210c      	movs	r1, #12
     a5c:	1879      	adds	r1, r7, r1
     a5e:	8809      	ldrh	r1, [r1, #0]
     a60:	400a      	ands	r2, r1
     a62:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a64:	230c      	movs	r3, #12
     a66:	18fb      	adds	r3, r7, r3
     a68:	881b      	ldrh	r3, [r3, #0]
     a6a:	2280      	movs	r2, #128	; 0x80
     a6c:	4013      	ands	r3, r2
     a6e:	d00c      	beq.n	a8a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a70:	230e      	movs	r3, #14
     a72:	18fb      	adds	r3, r7, r3
     a74:	881b      	ldrh	r3, [r3, #0]
     a76:	2204      	movs	r2, #4
     a78:	4013      	ands	r3, r2
     a7a:	d002      	beq.n	a82 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a7c:	697b      	ldr	r3, [r7, #20]
     a7e:	691b      	ldr	r3, [r3, #16]
     a80:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a82:	693b      	ldr	r3, [r7, #16]
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     a88:	e024      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a8a:	230c      	movs	r3, #12
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	881b      	ldrh	r3, [r3, #0]
     a90:	2201      	movs	r2, #1
     a92:	4013      	ands	r3, r2
     a94:	d00c      	beq.n	ab0 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a96:	230e      	movs	r3, #14
     a98:	18fb      	adds	r3, r7, r3
     a9a:	881b      	ldrh	r3, [r3, #0]
     a9c:	2201      	movs	r2, #1
     a9e:	4013      	ands	r3, r2
     aa0:	d002      	beq.n	aa8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     aa2:	697b      	ldr	r3, [r7, #20]
     aa4:	689b      	ldr	r3, [r3, #8]
     aa6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa8:	693b      	ldr	r3, [r7, #16]
     aaa:	2201      	movs	r2, #1
     aac:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     aae:	e011      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     ab0:	230c      	movs	r3, #12
     ab2:	18fb      	adds	r3, r7, r3
     ab4:	881b      	ldrh	r3, [r3, #0]
     ab6:	2202      	movs	r2, #2
     ab8:	4013      	ands	r3, r2
     aba:	d00b      	beq.n	ad4 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     abc:	230e      	movs	r3, #14
     abe:	18fb      	adds	r3, r7, r3
     ac0:	881b      	ldrh	r3, [r3, #0]
     ac2:	2202      	movs	r2, #2
     ac4:	4013      	ands	r3, r2
     ac6:	d002      	beq.n	ace <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac8:	697b      	ldr	r3, [r7, #20]
     aca:	68db      	ldr	r3, [r3, #12]
     acc:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ace:	693b      	ldr	r3, [r7, #16]
     ad0:	2202      	movs	r2, #2
     ad2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     ad4:	46c0      	nop			; (mov r8, r8)
     ad6:	46bd      	mov	sp, r7
     ad8:	b006      	add	sp, #24
     ada:	bd80      	pop	{r7, pc}
     adc:	200000cc 	.word	0x200000cc

00000ae0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     ae4:	2000      	movs	r0, #0
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <RTC_Handler+0x10>)
     ae8:	4798      	blx	r3
}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	bd80      	pop	{r7, pc}
     af0:	00000a0d 	.word	0x00000a0d

00000af4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     af4:	b580      	push	{r7, lr}
     af6:	b084      	sub	sp, #16
     af8:	af00      	add	r7, sp, #0
     afa:	0002      	movs	r2, r0
     afc:	1dfb      	adds	r3, r7, #7
     afe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     b00:	230f      	movs	r3, #15
     b02:	18fb      	adds	r3, r7, r3
     b04:	1dfa      	adds	r2, r7, #7
     b06:	7812      	ldrb	r2, [r2, #0]
     b08:	09d2      	lsrs	r2, r2, #7
     b0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     b0c:	230e      	movs	r3, #14
     b0e:	18fb      	adds	r3, r7, r3
     b10:	1dfa      	adds	r2, r7, #7
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	0952      	lsrs	r2, r2, #5
     b16:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     b18:	4b0d      	ldr	r3, [pc, #52]	; (b50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     b1a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     b1c:	230f      	movs	r3, #15
     b1e:	18fb      	adds	r3, r7, r3
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d10f      	bne.n	b46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     b26:	230f      	movs	r3, #15
     b28:	18fb      	adds	r3, r7, r3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	009b      	lsls	r3, r3, #2
     b2e:	2210      	movs	r2, #16
     b30:	4694      	mov	ip, r2
     b32:	44bc      	add	ip, r7
     b34:	4463      	add	r3, ip
     b36:	3b08      	subs	r3, #8
     b38:	681a      	ldr	r2, [r3, #0]
     b3a:	230e      	movs	r3, #14
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	01db      	lsls	r3, r3, #7
     b42:	18d3      	adds	r3, r2, r3
     b44:	e000      	b.n	b48 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     b46:	2300      	movs	r3, #0
	}
}
     b48:	0018      	movs	r0, r3
     b4a:	46bd      	mov	sp, r7
     b4c:	b004      	add	sp, #16
     b4e:	bd80      	pop	{r7, pc}
     b50:	41004400 	.word	0x41004400

00000b54 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
     b5a:	0002      	movs	r2, r0
     b5c:	1dfb      	adds	r3, r7, #7
     b5e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     b60:	1dfb      	adds	r3, r7, #7
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	0018      	movs	r0, r3
     b66:	4b03      	ldr	r3, [pc, #12]	; (b74 <port_get_group_from_gpio_pin+0x20>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
}
     b6c:	0018      	movs	r0, r3
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}
     b74:	00000af5 	.word	0x00000af5

00000b78 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	0002      	movs	r2, r0
     b80:	1dfb      	adds	r3, r7, #7
     b82:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	0018      	movs	r0, r3
     b8a:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <port_pin_get_input_level+0x40>)
     b8c:	4798      	blx	r3
     b8e:	0003      	movs	r3, r0
     b90:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b92:	1dfb      	adds	r3, r7, #7
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	221f      	movs	r2, #31
     b98:	4013      	ands	r3, r2
     b9a:	2201      	movs	r2, #1
     b9c:	409a      	lsls	r2, r3
     b9e:	0013      	movs	r3, r2
     ba0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     ba2:	68fb      	ldr	r3, [r7, #12]
     ba4:	6a1b      	ldr	r3, [r3, #32]
     ba6:	68ba      	ldr	r2, [r7, #8]
     ba8:	4013      	ands	r3, r2
     baa:	1e5a      	subs	r2, r3, #1
     bac:	4193      	sbcs	r3, r2
     bae:	b2db      	uxtb	r3, r3
}
     bb0:	0018      	movs	r0, r3
     bb2:	46bd      	mov	sp, r7
     bb4:	b004      	add	sp, #16
     bb6:	bd80      	pop	{r7, pc}
     bb8:	00000b55 	.word	0x00000b55

00000bbc <init_wheel>:
#include "wheel.h"
#include <asf.h>
/********************************************************************/

//Init all values to 0
void init_wheel(){
     bbc:	b580      	push	{r7, lr}
     bbe:	af00      	add	r7, sp, #0
	wheel.up_val = 0;
     bc0:	4b10      	ldr	r3, [pc, #64]	; (c04 <init_wheel+0x48>)
     bc2:	2200      	movs	r2, #0
     bc4:	701a      	strb	r2, [r3, #0]
	wheel.down_val = 0;
     bc6:	4b0f      	ldr	r3, [pc, #60]	; (c04 <init_wheel+0x48>)
     bc8:	2200      	movs	r2, #0
     bca:	705a      	strb	r2, [r3, #1]
	wheel.left_val = 0;
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <init_wheel+0x48>)
     bce:	2200      	movs	r2, #0
     bd0:	709a      	strb	r2, [r3, #2]
	wheel.right_val = 0;
     bd2:	4b0c      	ldr	r3, [pc, #48]	; (c04 <init_wheel+0x48>)
     bd4:	2200      	movs	r2, #0
     bd6:	70da      	strb	r2, [r3, #3]

	wheel.left_state = 0;
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <init_wheel+0x48>)
     bda:	2200      	movs	r2, #0
     bdc:	711a      	strb	r2, [r3, #4]
	wheel.right_state = 0;
     bde:	4b09      	ldr	r3, [pc, #36]	; (c04 <init_wheel+0x48>)
     be0:	2200      	movs	r2, #0
     be2:	715a      	strb	r2, [r3, #5]
	wheel.up_state = 0;
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <init_wheel+0x48>)
     be6:	2200      	movs	r2, #0
     be8:	719a      	strb	r2, [r3, #6]
	wheel.down_state = 0;
     bea:	4b06      	ldr	r3, [pc, #24]	; (c04 <init_wheel+0x48>)
     bec:	2200      	movs	r2, #0
     bee:	71da      	strb	r2, [r3, #7]

	wheel.LR_count = 0;
     bf0:	4b04      	ldr	r3, [pc, #16]	; (c04 <init_wheel+0x48>)
     bf2:	2200      	movs	r2, #0
     bf4:	811a      	strh	r2, [r3, #8]
	wheel.UD_count = 0;
     bf6:	4b03      	ldr	r3, [pc, #12]	; (c04 <init_wheel+0x48>)
     bf8:	2200      	movs	r2, #0
     bfa:	815a      	strh	r2, [r3, #10]

}
     bfc:	46c0      	nop			; (mov r8, r8)
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	200000d0 	.word	0x200000d0

00000c08 <update_values>:

/********************************************************************/

//Reads the values of the wheel and updates the struct
void update_values(){
     c08:	b5b0      	push	{r4, r5, r7, lr}
     c0a:	af00      	add	r7, sp, #0
	
	//Read in the new values
	wheel.left_val = getState(LEFT);
     c0c:	2000      	movs	r0, #0
     c0e:	4b1b      	ldr	r3, [pc, #108]	; (c7c <update_values+0x74>)
     c10:	4798      	blx	r3
     c12:	0003      	movs	r3, r0
     c14:	001a      	movs	r2, r3
     c16:	4b1a      	ldr	r3, [pc, #104]	; (c80 <update_values+0x78>)
     c18:	709a      	strb	r2, [r3, #2]
	wheel.right_val = getState(RIGHT);
     c1a:	2001      	movs	r0, #1
     c1c:	4b17      	ldr	r3, [pc, #92]	; (c7c <update_values+0x74>)
     c1e:	4798      	blx	r3
     c20:	0003      	movs	r3, r0
     c22:	001a      	movs	r2, r3
     c24:	4b16      	ldr	r3, [pc, #88]	; (c80 <update_values+0x78>)
     c26:	70da      	strb	r2, [r3, #3]
	wheel.up_val = getState(UP);
     c28:	2002      	movs	r0, #2
     c2a:	4b14      	ldr	r3, [pc, #80]	; (c7c <update_values+0x74>)
     c2c:	4798      	blx	r3
     c2e:	0003      	movs	r3, r0
     c30:	001a      	movs	r2, r3
     c32:	4b13      	ldr	r3, [pc, #76]	; (c80 <update_values+0x78>)
     c34:	701a      	strb	r2, [r3, #0]
	wheel.down_val = getState(DOWN);
     c36:	2003      	movs	r0, #3
     c38:	4b10      	ldr	r3, [pc, #64]	; (c7c <update_values+0x74>)
     c3a:	4798      	blx	r3
     c3c:	0003      	movs	r3, r0
     c3e:	001a      	movs	r2, r3
     c40:	4b0f      	ldr	r3, [pc, #60]	; (c80 <update_values+0x78>)
     c42:	705a      	strb	r2, [r3, #1]
	//wheel.left_val = port_pin_get_input_level(PIN_PA10); //Left value
	//wheel.right_val = port_pin_get_input_level(PIN_PA11); // Right value
	//wheel.up_val = port_pin_get_input_level(PIN_PA06); // Up value
	//wheel.down_val = port_pin_get_input_level(PIN_PA09); // Down value

	saveValues(&wheel.left_val, &wheel.left_state, &wheel.LR_count, 0);
     c44:	4a0f      	ldr	r2, [pc, #60]	; (c84 <update_values+0x7c>)
     c46:	4910      	ldr	r1, [pc, #64]	; (c88 <update_values+0x80>)
     c48:	4810      	ldr	r0, [pc, #64]	; (c8c <update_values+0x84>)
     c4a:	2300      	movs	r3, #0
     c4c:	4c10      	ldr	r4, [pc, #64]	; (c90 <update_values+0x88>)
     c4e:	47a0      	blx	r4
	saveValues(&wheel.right_val, &wheel.right_state, &wheel.LR_count, 1);
     c50:	4a0c      	ldr	r2, [pc, #48]	; (c84 <update_values+0x7c>)
     c52:	4910      	ldr	r1, [pc, #64]	; (c94 <update_values+0x8c>)
     c54:	4810      	ldr	r0, [pc, #64]	; (c98 <update_values+0x90>)
     c56:	2301      	movs	r3, #1
     c58:	4c0d      	ldr	r4, [pc, #52]	; (c90 <update_values+0x88>)
     c5a:	47a0      	blx	r4
	saveValues(&wheel.up_val, &wheel.up_state, &wheel.UD_count, 1);
     c5c:	4a0f      	ldr	r2, [pc, #60]	; (c9c <update_values+0x94>)
     c5e:	4910      	ldr	r1, [pc, #64]	; (ca0 <update_values+0x98>)
     c60:	4807      	ldr	r0, [pc, #28]	; (c80 <update_values+0x78>)
     c62:	2301      	movs	r3, #1
     c64:	4c0a      	ldr	r4, [pc, #40]	; (c90 <update_values+0x88>)
     c66:	47a0      	blx	r4
	saveValues(&wheel.down_val, &wheel.down_state, &wheel.UD_count, 0);
     c68:	4a0c      	ldr	r2, [pc, #48]	; (c9c <update_values+0x94>)
     c6a:	490e      	ldr	r1, [pc, #56]	; (ca4 <update_values+0x9c>)
     c6c:	480e      	ldr	r0, [pc, #56]	; (ca8 <update_values+0xa0>)
     c6e:	2300      	movs	r3, #0
     c70:	4c07      	ldr	r4, [pc, #28]	; (c90 <update_values+0x88>)
     c72:	47a0      	blx	r4
}
     c74:	46c0      	nop			; (mov r8, r8)
     c76:	46bd      	mov	sp, r7
     c78:	bdb0      	pop	{r4, r5, r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000d09 	.word	0x00000d09
     c80:	200000d0 	.word	0x200000d0
     c84:	200000d8 	.word	0x200000d8
     c88:	200000d4 	.word	0x200000d4
     c8c:	200000d2 	.word	0x200000d2
     c90:	00000cad 	.word	0x00000cad
     c94:	200000d5 	.word	0x200000d5
     c98:	200000d3 	.word	0x200000d3
     c9c:	200000da 	.word	0x200000da
     ca0:	200000d6 	.word	0x200000d6
     ca4:	200000d7 	.word	0x200000d7
     ca8:	200000d1 	.word	0x200000d1

00000cac <saveValues>:

/********************************************************************/

//Updates the values and increments the counter
void saveValues(uint8_t *current, uint8_t *previous, int16_t *count, uint8_t up_down){
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
     cb8:	001a      	movs	r2, r3
     cba:	1cfb      	adds	r3, r7, #3
     cbc:	701a      	strb	r2, [r3, #0]

	//If the current value is not equal to the previous value
	if(*current != *previous){
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	781a      	ldrb	r2, [r3, #0]
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	429a      	cmp	r2, r3
     cc8:	d01a      	beq.n	d00 <saveValues+0x54>
		if(up_down){
     cca:	1cfb      	adds	r3, r7, #3
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d009      	beq.n	ce6 <saveValues+0x3a>
			(*count)++;
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	2200      	movs	r2, #0
     cd6:	5e9b      	ldrsh	r3, [r3, r2]
     cd8:	b29b      	uxth	r3, r3
     cda:	3301      	adds	r3, #1
     cdc:	b29b      	uxth	r3, r3
     cde:	b21a      	sxth	r2, r3
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	801a      	strh	r2, [r3, #0]
     ce4:	e008      	b.n	cf8 <saveValues+0x4c>
		}

		else{
			(*count)--;
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	2200      	movs	r2, #0
     cea:	5e9b      	ldrsh	r3, [r3, r2]
     cec:	b29b      	uxth	r3, r3
     cee:	3b01      	subs	r3, #1
     cf0:	b29b      	uxth	r3, r3
     cf2:	b21a      	sxth	r2, r3
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	801a      	strh	r2, [r3, #0]
		}
		
		*previous = *current;
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	781a      	ldrb	r2, [r3, #0]
     cfc:	68bb      	ldr	r3, [r7, #8]
     cfe:	701a      	strb	r2, [r3, #0]
	}
}
     d00:	46c0      	nop			; (mov r8, r8)
     d02:	46bd      	mov	sp, r7
     d04:	b004      	add	sp, #16
     d06:	bd80      	pop	{r7, pc}

00000d08 <getState>:
// 	}
// }

/********************************************************************/

uint8_t getState(uint8_t button_num){
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	0002      	movs	r2, r0
     d10:	1dfb      	adds	r3, r7, #7
     d12:	701a      	strb	r2, [r3, #0]
	switch(button_num){
     d14:	1dfb      	adds	r3, r7, #7
     d16:	781b      	ldrb	r3, [r3, #0]
     d18:	2b01      	cmp	r3, #1
     d1a:	d00d      	beq.n	d38 <getState+0x30>
     d1c:	dc02      	bgt.n	d24 <getState+0x1c>
     d1e:	2b00      	cmp	r3, #0
     d20:	d005      	beq.n	d2e <getState+0x26>
     d22:	e018      	b.n	d56 <getState+0x4e>
     d24:	2b02      	cmp	r3, #2
     d26:	d00c      	beq.n	d42 <getState+0x3a>
     d28:	2b03      	cmp	r3, #3
     d2a:	d00f      	beq.n	d4c <getState+0x44>
     d2c:	e013      	b.n	d56 <getState+0x4e>
		case LEFT:
			return port_pin_get_input_level(PIN_PA10);
     d2e:	200a      	movs	r0, #10
     d30:	4b0b      	ldr	r3, [pc, #44]	; (d60 <getState+0x58>)
     d32:	4798      	blx	r3
     d34:	0003      	movs	r3, r0
     d36:	e00e      	b.n	d56 <getState+0x4e>
		break;

		case RIGHT:
			return port_pin_get_input_level(PIN_PA11);
     d38:	200b      	movs	r0, #11
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <getState+0x58>)
     d3c:	4798      	blx	r3
     d3e:	0003      	movs	r3, r0
     d40:	e009      	b.n	d56 <getState+0x4e>
		break;

		case UP:
			return port_pin_get_input_level(PIN_PA06);
     d42:	2006      	movs	r0, #6
     d44:	4b06      	ldr	r3, [pc, #24]	; (d60 <getState+0x58>)
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	e004      	b.n	d56 <getState+0x4e>
		break;

		case DOWN:
			return port_pin_get_input_level(PIN_PA09);
     d4c:	2009      	movs	r0, #9
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <getState+0x58>)
     d50:	4798      	blx	r3
     d52:	0003      	movs	r3, r0
     d54:	e7ff      	b.n	d56 <getState+0x4e>
		break;
	}
}
     d56:	0018      	movs	r0, r3
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00000b79 	.word	0x00000b79

00000d64 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     d64:	b580      	push	{r7, lr}
     d66:	b084      	sub	sp, #16
     d68:	af00      	add	r7, sp, #0
     d6a:	0002      	movs	r2, r0
     d6c:	1dfb      	adds	r3, r7, #7
     d6e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     d70:	230f      	movs	r3, #15
     d72:	18fb      	adds	r3, r7, r3
     d74:	1dfa      	adds	r2, r7, #7
     d76:	7812      	ldrb	r2, [r2, #0]
     d78:	0952      	lsrs	r2, r2, #5
     d7a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     d7c:	230f      	movs	r3, #15
     d7e:	18fb      	adds	r3, r7, r3
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d10c      	bne.n	da0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     d86:	4b09      	ldr	r3, [pc, #36]	; (dac <_extint_get_eic_from_channel+0x48>)
     d88:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     d8a:	230f      	movs	r3, #15
     d8c:	18fb      	adds	r3, r7, r3
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	009b      	lsls	r3, r3, #2
     d92:	2210      	movs	r2, #16
     d94:	4694      	mov	ip, r2
     d96:	44bc      	add	ip, r7
     d98:	4463      	add	r3, ip
     d9a:	3b08      	subs	r3, #8
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	e000      	b.n	da2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     da0:	2300      	movs	r3, #0
	}
}
     da2:	0018      	movs	r0, r3
     da4:	46bd      	mov	sp, r7
     da6:	b004      	add	sp, #16
     da8:	bd80      	pop	{r7, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	40001800 	.word	0x40001800

00000db0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     db0:	b580      	push	{r7, lr}
     db2:	b084      	sub	sp, #16
     db4:	af00      	add	r7, sp, #0
     db6:	0002      	movs	r2, r0
     db8:	1dfb      	adds	r3, r7, #7
     dba:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     dbc:	1dfb      	adds	r3, r7, #7
     dbe:	781b      	ldrb	r3, [r3, #0]
     dc0:	0018      	movs	r0, r3
     dc2:	4b0b      	ldr	r3, [pc, #44]	; (df0 <extint_chan_is_detected+0x40>)
     dc4:	4798      	blx	r3
     dc6:	0003      	movs	r3, r0
     dc8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     dca:	1dfb      	adds	r3, r7, #7
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	221f      	movs	r2, #31
     dd0:	4013      	ands	r3, r2
     dd2:	2201      	movs	r2, #1
     dd4:	409a      	lsls	r2, r3
     dd6:	0013      	movs	r3, r2
     dd8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	691b      	ldr	r3, [r3, #16]
     dde:	68ba      	ldr	r2, [r7, #8]
     de0:	4013      	ands	r3, r2
     de2:	1e5a      	subs	r2, r3, #1
     de4:	4193      	sbcs	r3, r2
     de6:	b2db      	uxtb	r3, r3
}
     de8:	0018      	movs	r0, r3
     dea:	46bd      	mov	sp, r7
     dec:	b004      	add	sp, #16
     dee:	bd80      	pop	{r7, pc}
     df0:	00000d65 	.word	0x00000d65

00000df4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     df4:	b580      	push	{r7, lr}
     df6:	b084      	sub	sp, #16
     df8:	af00      	add	r7, sp, #0
     dfa:	0002      	movs	r2, r0
     dfc:	1dfb      	adds	r3, r7, #7
     dfe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     e00:	1dfb      	adds	r3, r7, #7
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	0018      	movs	r0, r3
     e06:	4b09      	ldr	r3, [pc, #36]	; (e2c <extint_chan_clear_detected+0x38>)
     e08:	4798      	blx	r3
     e0a:	0003      	movs	r3, r0
     e0c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	221f      	movs	r2, #31
     e14:	4013      	ands	r3, r2
     e16:	2201      	movs	r2, #1
     e18:	409a      	lsls	r2, r3
     e1a:	0013      	movs	r3, r2
     e1c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	68ba      	ldr	r2, [r7, #8]
     e22:	611a      	str	r2, [r3, #16]
}
     e24:	46c0      	nop			; (mov r8, r8)
     e26:	46bd      	mov	sp, r7
     e28:	b004      	add	sp, #16
     e2a:	bd80      	pop	{r7, pc}
     e2c:	00000d65 	.word	0x00000d65

00000e30 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     e30:	b580      	push	{r7, lr}
     e32:	b082      	sub	sp, #8
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	0008      	movs	r0, r1
     e3a:	0011      	movs	r1, r2
     e3c:	1cfb      	adds	r3, r7, #3
     e3e:	1c02      	adds	r2, r0, #0
     e40:	701a      	strb	r2, [r3, #0]
     e42:	1cbb      	adds	r3, r7, #2
     e44:	1c0a      	adds	r2, r1, #0
     e46:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     e48:	1cbb      	adds	r3, r7, #2
     e4a:	781b      	ldrb	r3, [r3, #0]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d001      	beq.n	e54 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e50:	2317      	movs	r3, #23
     e52:	e019      	b.n	e88 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     e54:	1cfb      	adds	r3, r7, #3
     e56:	781a      	ldrb	r2, [r3, #0]
     e58:	4b0d      	ldr	r3, [pc, #52]	; (e90 <extint_register_callback+0x60>)
     e5a:	0092      	lsls	r2, r2, #2
     e5c:	58d3      	ldr	r3, [r2, r3]
     e5e:	2b00      	cmp	r3, #0
     e60:	d107      	bne.n	e72 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     e62:	1cfb      	adds	r3, r7, #3
     e64:	781a      	ldrb	r2, [r3, #0]
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <extint_register_callback+0x60>)
     e68:	0092      	lsls	r2, r2, #2
     e6a:	6879      	ldr	r1, [r7, #4]
     e6c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     e6e:	2300      	movs	r3, #0
     e70:	e00a      	b.n	e88 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     e72:	1cfb      	adds	r3, r7, #3
     e74:	781a      	ldrb	r2, [r3, #0]
     e76:	4b06      	ldr	r3, [pc, #24]	; (e90 <extint_register_callback+0x60>)
     e78:	0092      	lsls	r2, r2, #2
     e7a:	58d2      	ldr	r2, [r2, r3]
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	429a      	cmp	r2, r3
     e80:	d101      	bne.n	e86 <extint_register_callback+0x56>
		return STATUS_OK;
     e82:	2300      	movs	r3, #0
     e84:	e000      	b.n	e88 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     e86:	231d      	movs	r3, #29
}
     e88:	0018      	movs	r0, r3
     e8a:	46bd      	mov	sp, r7
     e8c:	b002      	add	sp, #8
     e8e:	bd80      	pop	{r7, pc}
     e90:	2000008c 	.word	0x2000008c

00000e94 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     e94:	b580      	push	{r7, lr}
     e96:	b084      	sub	sp, #16
     e98:	af00      	add	r7, sp, #0
     e9a:	0002      	movs	r2, r0
     e9c:	1dfb      	adds	r3, r7, #7
     e9e:	701a      	strb	r2, [r3, #0]
     ea0:	1dbb      	adds	r3, r7, #6
     ea2:	1c0a      	adds	r2, r1, #0
     ea4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     ea6:	1dbb      	adds	r3, r7, #6
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	2b00      	cmp	r3, #0
     eac:	d10e      	bne.n	ecc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     eae:	1dfb      	adds	r3, r7, #7
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	0018      	movs	r0, r3
     eb4:	4b08      	ldr	r3, [pc, #32]	; (ed8 <extint_chan_enable_callback+0x44>)
     eb6:	4798      	blx	r3
     eb8:	0003      	movs	r3, r0
     eba:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     ebc:	1dfb      	adds	r3, r7, #7
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	2201      	movs	r2, #1
     ec2:	409a      	lsls	r2, r3
     ec4:	68fb      	ldr	r3, [r7, #12]
     ec6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     ec8:	2300      	movs	r3, #0
     eca:	e000      	b.n	ece <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ecc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     ece:	0018      	movs	r0, r3
     ed0:	46bd      	mov	sp, r7
     ed2:	b004      	add	sp, #16
     ed4:	bd80      	pop	{r7, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	00000d65 	.word	0x00000d65

00000edc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     edc:	b580      	push	{r7, lr}
     ede:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ee0:	4b15      	ldr	r3, [pc, #84]	; (f38 <EIC_Handler+0x5c>)
     ee2:	2200      	movs	r2, #0
     ee4:	701a      	strb	r2, [r3, #0]
     ee6:	e020      	b.n	f2a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     ee8:	4b13      	ldr	r3, [pc, #76]	; (f38 <EIC_Handler+0x5c>)
     eea:	781b      	ldrb	r3, [r3, #0]
     eec:	0018      	movs	r0, r3
     eee:	4b13      	ldr	r3, [pc, #76]	; (f3c <EIC_Handler+0x60>)
     ef0:	4798      	blx	r3
     ef2:	1e03      	subs	r3, r0, #0
     ef4:	d013      	beq.n	f1e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     ef6:	4b10      	ldr	r3, [pc, #64]	; (f38 <EIC_Handler+0x5c>)
     ef8:	781b      	ldrb	r3, [r3, #0]
     efa:	0018      	movs	r0, r3
     efc:	4b10      	ldr	r3, [pc, #64]	; (f40 <EIC_Handler+0x64>)
     efe:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     f00:	4b0d      	ldr	r3, [pc, #52]	; (f38 <EIC_Handler+0x5c>)
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	001a      	movs	r2, r3
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <EIC_Handler+0x68>)
     f08:	0092      	lsls	r2, r2, #2
     f0a:	58d3      	ldr	r3, [r2, r3]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d006      	beq.n	f1e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     f10:	4b09      	ldr	r3, [pc, #36]	; (f38 <EIC_Handler+0x5c>)
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	001a      	movs	r2, r3
     f16:	4b0b      	ldr	r3, [pc, #44]	; (f44 <EIC_Handler+0x68>)
     f18:	0092      	lsls	r2, r2, #2
     f1a:	58d3      	ldr	r3, [r2, r3]
     f1c:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     f1e:	4b06      	ldr	r3, [pc, #24]	; (f38 <EIC_Handler+0x5c>)
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	3301      	adds	r3, #1
     f24:	b2da      	uxtb	r2, r3
     f26:	4b04      	ldr	r3, [pc, #16]	; (f38 <EIC_Handler+0x5c>)
     f28:	701a      	strb	r2, [r3, #0]
     f2a:	4b03      	ldr	r3, [pc, #12]	; (f38 <EIC_Handler+0x5c>)
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2b0f      	cmp	r3, #15
     f30:	d9da      	bls.n	ee8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	46bd      	mov	sp, r7
     f36:	bd80      	pop	{r7, pc}
     f38:	200000dc 	.word	0x200000dc
     f3c:	00000db1 	.word	0x00000db1
     f40:	00000df5 	.word	0x00000df5
     f44:	2000008c 	.word	0x2000008c

00000f48 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	2200      	movs	r2, #0
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	46bd      	mov	sp, r7
     f5a:	b002      	add	sp, #8
     f5c:	bd80      	pop	{r7, pc}
     f5e:	46c0      	nop			; (mov r8, r8)

00000f60 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     f60:	b580      	push	{r7, lr}
     f62:	b082      	sub	sp, #8
     f64:	af00      	add	r7, sp, #0
     f66:	0002      	movs	r2, r0
     f68:	6039      	str	r1, [r7, #0]
     f6a:	1dfb      	adds	r3, r7, #7
     f6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f6e:	1dfb      	adds	r3, r7, #7
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	2b01      	cmp	r3, #1
     f74:	d00a      	beq.n	f8c <system_apb_clock_set_mask+0x2c>
     f76:	2b02      	cmp	r3, #2
     f78:	d00f      	beq.n	f9a <system_apb_clock_set_mask+0x3a>
     f7a:	2b00      	cmp	r3, #0
     f7c:	d114      	bne.n	fa8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     f7e:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f80:	4a0d      	ldr	r2, [pc, #52]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f82:	6991      	ldr	r1, [r2, #24]
     f84:	683a      	ldr	r2, [r7, #0]
     f86:	430a      	orrs	r2, r1
     f88:	619a      	str	r2, [r3, #24]
			break;
     f8a:	e00f      	b.n	fac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     f8c:	4b0a      	ldr	r3, [pc, #40]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f8e:	4a0a      	ldr	r2, [pc, #40]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f90:	69d1      	ldr	r1, [r2, #28]
     f92:	683a      	ldr	r2, [r7, #0]
     f94:	430a      	orrs	r2, r1
     f96:	61da      	str	r2, [r3, #28]
			break;
     f98:	e008      	b.n	fac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f9a:	4b07      	ldr	r3, [pc, #28]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f9c:	4a06      	ldr	r2, [pc, #24]	; (fb8 <system_apb_clock_set_mask+0x58>)
     f9e:	6a11      	ldr	r1, [r2, #32]
     fa0:	683a      	ldr	r2, [r7, #0]
     fa2:	430a      	orrs	r2, r1
     fa4:	621a      	str	r2, [r3, #32]
			break;
     fa6:	e001      	b.n	fac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     fa8:	2317      	movs	r3, #23
     faa:	e000      	b.n	fae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     fac:	2300      	movs	r3, #0
}
     fae:	0018      	movs	r0, r3
     fb0:	46bd      	mov	sp, r7
     fb2:	b002      	add	sp, #8
     fb4:	bd80      	pop	{r7, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	40000400 	.word	0x40000400

00000fbc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fc4:	687b      	ldr	r3, [r7, #4]
     fc6:	2280      	movs	r2, #128	; 0x80
     fc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2200      	movs	r2, #0
     fce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	2201      	movs	r2, #1
     fd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2200      	movs	r2, #0
     fda:	70da      	strb	r2, [r3, #3]
}
     fdc:	46c0      	nop			; (mov r8, r8)
     fde:	46bd      	mov	sp, r7
     fe0:	b002      	add	sp, #8
     fe2:	bd80      	pop	{r7, pc}

00000fe4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     fe4:	b580      	push	{r7, lr}
     fe6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <system_is_debugger_present+0x1c>)
     fea:	789b      	ldrb	r3, [r3, #2]
     fec:	b2db      	uxtb	r3, r3
     fee:	001a      	movs	r2, r3
     ff0:	2302      	movs	r3, #2
     ff2:	4013      	ands	r3, r2
     ff4:	1e5a      	subs	r2, r3, #1
     ff6:	4193      	sbcs	r3, r2
     ff8:	b2db      	uxtb	r3, r3
}
     ffa:	0018      	movs	r0, r3
     ffc:	46bd      	mov	sp, r7
     ffe:	bd80      	pop	{r7, pc}
    1000:	41002000 	.word	0x41002000

00001004 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1004:	b580      	push	{r7, lr}
    1006:	b084      	sub	sp, #16
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	69db      	ldr	r3, [r3, #28]
    1016:	2207      	movs	r2, #7
    1018:	4013      	ands	r3, r2
    101a:	1e5a      	subs	r2, r3, #1
    101c:	4193      	sbcs	r3, r2
    101e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1020:	0018      	movs	r0, r3
    1022:	46bd      	mov	sp, r7
    1024:	b004      	add	sp, #16
    1026:	bd80      	pop	{r7, pc}

00001028 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1028:	b580      	push	{r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1030:	46c0      	nop			; (mov r8, r8)
    1032:	687b      	ldr	r3, [r7, #4]
    1034:	0018      	movs	r0, r3
    1036:	4b04      	ldr	r3, [pc, #16]	; (1048 <_i2c_master_wait_for_sync+0x20>)
    1038:	4798      	blx	r3
    103a:	1e03      	subs	r3, r0, #0
    103c:	d1f9      	bne.n	1032 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	46bd      	mov	sp, r7
    1042:	b002      	add	sp, #8
    1044:	bd80      	pop	{r7, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00001005 	.word	0x00001005

0000104c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    104c:	b5f0      	push	{r4, r5, r6, r7, lr}
    104e:	b095      	sub	sp, #84	; 0x54
    1050:	af00      	add	r7, sp, #0
    1052:	60f8      	str	r0, [r7, #12]
    1054:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1056:	2300      	movs	r3, #0
    1058:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    105a:	2300      	movs	r3, #0
    105c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    105e:	2300      	movs	r3, #0
    1060:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    1062:	233b      	movs	r3, #59	; 0x3b
    1064:	2208      	movs	r2, #8
    1066:	4694      	mov	ip, r2
    1068:	44bc      	add	ip, r7
    106a:	4463      	add	r3, ip
    106c:	2200      	movs	r2, #0
    106e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1070:	68fb      	ldr	r3, [r7, #12]
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    107c:	2323      	movs	r3, #35	; 0x23
    107e:	2208      	movs	r2, #8
    1080:	18ba      	adds	r2, r7, r2
    1082:	18d4      	adds	r4, r2, r3
    1084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1086:	0018      	movs	r0, r3
    1088:	4bdb      	ldr	r3, [pc, #876]	; (13f8 <_i2c_master_set_config+0x3ac>)
    108a:	4798      	blx	r3
    108c:	0003      	movs	r3, r0
    108e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1090:	230c      	movs	r3, #12
    1092:	2208      	movs	r2, #8
    1094:	4694      	mov	ip, r2
    1096:	44bc      	add	ip, r7
    1098:	4463      	add	r3, ip
    109a:	0018      	movs	r0, r3
    109c:	4bd7      	ldr	r3, [pc, #860]	; (13fc <_i2c_master_set_config+0x3b0>)
    109e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    10a0:	68bb      	ldr	r3, [r7, #8]
    10a2:	69db      	ldr	r3, [r3, #28]
    10a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    10a6:	68bb      	ldr	r3, [r7, #8]
    10a8:	6a1b      	ldr	r3, [r3, #32]
    10aa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    10ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ae:	2b00      	cmp	r3, #0
    10b0:	d106      	bne.n	10c0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    10b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10b4:	2100      	movs	r1, #0
    10b6:	0018      	movs	r0, r3
    10b8:	4bd1      	ldr	r3, [pc, #836]	; (1400 <_i2c_master_set_config+0x3b4>)
    10ba:	4798      	blx	r3
    10bc:	0003      	movs	r3, r0
    10be:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    10c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10c2:	b2da      	uxtb	r2, r3
    10c4:	230c      	movs	r3, #12
    10c6:	2108      	movs	r1, #8
    10c8:	468c      	mov	ip, r1
    10ca:	44bc      	add	ip, r7
    10cc:	4463      	add	r3, ip
    10ce:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    10d0:	230c      	movs	r3, #12
    10d2:	2208      	movs	r2, #8
    10d4:	4694      	mov	ip, r2
    10d6:	44bc      	add	ip, r7
    10d8:	4463      	add	r3, ip
    10da:	2202      	movs	r2, #2
    10dc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    10de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10e0:	0c1b      	lsrs	r3, r3, #16
    10e2:	b2db      	uxtb	r3, r3
    10e4:	220c      	movs	r2, #12
    10e6:	2108      	movs	r1, #8
    10e8:	468c      	mov	ip, r1
    10ea:	44bc      	add	ip, r7
    10ec:	4462      	add	r2, ip
    10ee:	0011      	movs	r1, r2
    10f0:	0018      	movs	r0, r3
    10f2:	4bc4      	ldr	r3, [pc, #784]	; (1404 <_i2c_master_set_config+0x3b8>)
    10f4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    10f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f8:	2b00      	cmp	r3, #0
    10fa:	d106      	bne.n	110a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    10fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10fe:	2101      	movs	r1, #1
    1100:	0018      	movs	r0, r3
    1102:	4bbf      	ldr	r3, [pc, #764]	; (1400 <_i2c_master_set_config+0x3b4>)
    1104:	4798      	blx	r3
    1106:	0003      	movs	r3, r0
    1108:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    110c:	b2da      	uxtb	r2, r3
    110e:	230c      	movs	r3, #12
    1110:	2108      	movs	r1, #8
    1112:	468c      	mov	ip, r1
    1114:	44bc      	add	ip, r7
    1116:	4463      	add	r3, ip
    1118:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    111a:	230c      	movs	r3, #12
    111c:	2208      	movs	r2, #8
    111e:	4694      	mov	ip, r2
    1120:	44bc      	add	ip, r7
    1122:	4463      	add	r3, ip
    1124:	2202      	movs	r2, #2
    1126:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    112a:	0c1b      	lsrs	r3, r3, #16
    112c:	b2db      	uxtb	r3, r3
    112e:	220c      	movs	r2, #12
    1130:	2108      	movs	r1, #8
    1132:	468c      	mov	ip, r1
    1134:	44bc      	add	ip, r7
    1136:	4462      	add	r2, ip
    1138:	0011      	movs	r1, r2
    113a:	0018      	movs	r0, r3
    113c:	4bb1      	ldr	r3, [pc, #708]	; (1404 <_i2c_master_set_config+0x3b8>)
    113e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1140:	68bb      	ldr	r3, [r7, #8]
    1142:	8a9a      	ldrh	r2, [r3, #20]
    1144:	68fb      	ldr	r3, [r7, #12]
    1146:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	8ada      	ldrh	r2, [r3, #22]
    114c:	68fb      	ldr	r3, [r7, #12]
    114e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1150:	68bb      	ldr	r3, [r7, #8]
    1152:	7e1b      	ldrb	r3, [r3, #24]
    1154:	2b00      	cmp	r3, #0
    1156:	d103      	bne.n	1160 <_i2c_master_set_config+0x114>
    1158:	4bab      	ldr	r3, [pc, #684]	; (1408 <_i2c_master_set_config+0x3bc>)
    115a:	4798      	blx	r3
    115c:	1e03      	subs	r3, r0, #0
    115e:	d002      	beq.n	1166 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1160:	2380      	movs	r3, #128	; 0x80
    1162:	64fb      	str	r3, [r7, #76]	; 0x4c
    1164:	e001      	b.n	116a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1166:	2300      	movs	r3, #0
    1168:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    116a:	68bb      	ldr	r3, [r7, #8]
    116c:	691b      	ldr	r3, [r3, #16]
    116e:	2b00      	cmp	r3, #0
    1170:	d004      	beq.n	117c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1172:	68bb      	ldr	r3, [r7, #8]
    1174:	691b      	ldr	r3, [r3, #16]
    1176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1178:	4313      	orrs	r3, r2
    117a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    117c:	68bb      	ldr	r3, [r7, #8]
    117e:	689b      	ldr	r3, [r3, #8]
    1180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1182:	4313      	orrs	r3, r2
    1184:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	2224      	movs	r2, #36	; 0x24
    118a:	5c9b      	ldrb	r3, [r3, r2]
    118c:	2b00      	cmp	r3, #0
    118e:	d004      	beq.n	119a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1192:	2280      	movs	r2, #128	; 0x80
    1194:	05d2      	lsls	r2, r2, #23
    1196:	4313      	orrs	r3, r2
    1198:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    119a:	68bb      	ldr	r3, [r7, #8]
    119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    119e:	2b00      	cmp	r3, #0
    11a0:	d004      	beq.n	11ac <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    11a8:	4313      	orrs	r3, r2
    11aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    11ac:	68bb      	ldr	r3, [r7, #8]
    11ae:	222c      	movs	r2, #44	; 0x2c
    11b0:	5c9b      	ldrb	r3, [r3, r2]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d105      	bne.n	11c2 <_i2c_master_set_config+0x176>
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	689a      	ldr	r2, [r3, #8]
    11ba:	2380      	movs	r3, #128	; 0x80
    11bc:	049b      	lsls	r3, r3, #18
    11be:	429a      	cmp	r2, r3
    11c0:	d104      	bne.n	11cc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    11c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11c4:	2280      	movs	r2, #128	; 0x80
    11c6:	0512      	lsls	r2, r2, #20
    11c8:	4313      	orrs	r3, r2
    11ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	222d      	movs	r2, #45	; 0x2d
    11d0:	5c9b      	ldrb	r3, [r3, r2]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d004      	beq.n	11e0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    11d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11d8:	2280      	movs	r2, #128	; 0x80
    11da:	0412      	lsls	r2, r2, #16
    11dc:	4313      	orrs	r3, r2
    11de:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    11e0:	68bb      	ldr	r3, [r7, #8]
    11e2:	222e      	movs	r2, #46	; 0x2e
    11e4:	5c9b      	ldrb	r3, [r3, r2]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d004      	beq.n	11f4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    11ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	03d2      	lsls	r2, r2, #15
    11f0:	4313      	orrs	r3, r2
    11f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    11f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11f6:	681a      	ldr	r2, [r3, #0]
    11f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11fa:	431a      	orrs	r2, r3
    11fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11fe:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1202:	2280      	movs	r2, #128	; 0x80
    1204:	0052      	lsls	r2, r2, #1
    1206:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1208:	2323      	movs	r3, #35	; 0x23
    120a:	2208      	movs	r2, #8
    120c:	4694      	mov	ip, r2
    120e:	44bc      	add	ip, r7
    1210:	4463      	add	r3, ip
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	3314      	adds	r3, #20
    1216:	b2db      	uxtb	r3, r3
    1218:	0018      	movs	r0, r3
    121a:	4b7c      	ldr	r3, [pc, #496]	; (140c <_i2c_master_set_config+0x3c0>)
    121c:	4798      	blx	r3
    121e:	0003      	movs	r3, r0
    1220:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    1222:	68bb      	ldr	r3, [r7, #8]
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	22fa      	movs	r2, #250	; 0xfa
    1228:	0092      	lsls	r2, r2, #2
    122a:	4353      	muls	r3, r2
    122c:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    122e:	68bb      	ldr	r3, [r7, #8]
    1230:	685b      	ldr	r3, [r3, #4]
    1232:	22fa      	movs	r2, #250	; 0xfa
    1234:	0092      	lsls	r2, r2, #2
    1236:	4353      	muls	r3, r2
    1238:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    123e:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    1240:	4b73      	ldr	r3, [pc, #460]	; (1410 <_i2c_master_set_config+0x3c4>)
    1242:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1244:	4798      	blx	r3
    1246:	0005      	movs	r5, r0
    1248:	000e      	movs	r6, r1
    124a:	4b71      	ldr	r3, [pc, #452]	; (1410 <_i2c_master_set_config+0x3c4>)
    124c:	6a38      	ldr	r0, [r7, #32]
    124e:	4798      	blx	r3
    1250:	6038      	str	r0, [r7, #0]
    1252:	6079      	str	r1, [r7, #4]
    1254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1256:	69ba      	ldr	r2, [r7, #24]
    1258:	435a      	muls	r2, r3
    125a:	4b6d      	ldr	r3, [pc, #436]	; (1410 <_i2c_master_set_config+0x3c4>)
    125c:	0010      	movs	r0, r2
    125e:	4798      	blx	r3
    1260:	4c6c      	ldr	r4, [pc, #432]	; (1414 <_i2c_master_set_config+0x3c8>)
    1262:	4a6d      	ldr	r2, [pc, #436]	; (1418 <_i2c_master_set_config+0x3cc>)
    1264:	4b6d      	ldr	r3, [pc, #436]	; (141c <_i2c_master_set_config+0x3d0>)
    1266:	47a0      	blx	r4
    1268:	0003      	movs	r3, r0
    126a:	000c      	movs	r4, r1
    126c:	0018      	movs	r0, r3
    126e:	0021      	movs	r1, r4
    1270:	4c6b      	ldr	r4, [pc, #428]	; (1420 <_i2c_master_set_config+0x3d4>)
    1272:	2200      	movs	r2, #0
    1274:	4b6b      	ldr	r3, [pc, #428]	; (1424 <_i2c_master_set_config+0x3d8>)
    1276:	47a0      	blx	r4
    1278:	0003      	movs	r3, r0
    127a:	000c      	movs	r4, r1
    127c:	001a      	movs	r2, r3
    127e:	0023      	movs	r3, r4
    1280:	4c64      	ldr	r4, [pc, #400]	; (1414 <_i2c_master_set_config+0x3c8>)
    1282:	6838      	ldr	r0, [r7, #0]
    1284:	6879      	ldr	r1, [r7, #4]
    1286:	47a0      	blx	r4
    1288:	0003      	movs	r3, r0
    128a:	000c      	movs	r4, r1
    128c:	001a      	movs	r2, r3
    128e:	0023      	movs	r3, r4
    1290:	4c65      	ldr	r4, [pc, #404]	; (1428 <_i2c_master_set_config+0x3dc>)
    1292:	0028      	movs	r0, r5
    1294:	0031      	movs	r1, r6
    1296:	47a0      	blx	r4
    1298:	0003      	movs	r3, r0
    129a:	000c      	movs	r4, r1
    129c:	001d      	movs	r5, r3
    129e:	0026      	movs	r6, r4
    12a0:	6a3b      	ldr	r3, [r7, #32]
    12a2:	005a      	lsls	r2, r3, #1
    12a4:	4b5a      	ldr	r3, [pc, #360]	; (1410 <_i2c_master_set_config+0x3c4>)
    12a6:	0010      	movs	r0, r2
    12a8:	4798      	blx	r3
    12aa:	0002      	movs	r2, r0
    12ac:	000b      	movs	r3, r1
    12ae:	4c5c      	ldr	r4, [pc, #368]	; (1420 <_i2c_master_set_config+0x3d4>)
    12b0:	0028      	movs	r0, r5
    12b2:	0031      	movs	r1, r6
    12b4:	47a0      	blx	r4
    12b6:	0003      	movs	r3, r0
    12b8:	000c      	movs	r4, r1
    12ba:	0018      	movs	r0, r3
    12bc:	0021      	movs	r1, r4
    12be:	4c5a      	ldr	r4, [pc, #360]	; (1428 <_i2c_master_set_config+0x3dc>)
    12c0:	2200      	movs	r2, #0
    12c2:	4b5a      	ldr	r3, [pc, #360]	; (142c <_i2c_master_set_config+0x3e0>)
    12c4:	47a0      	blx	r4
    12c6:	0003      	movs	r3, r0
    12c8:	000c      	movs	r4, r1
    12ca:	001d      	movs	r5, r3
    12cc:	0026      	movs	r6, r4
    12ce:	6a3b      	ldr	r3, [r7, #32]
    12d0:	005a      	lsls	r2, r3, #1
    12d2:	4b4f      	ldr	r3, [pc, #316]	; (1410 <_i2c_master_set_config+0x3c4>)
    12d4:	0010      	movs	r0, r2
    12d6:	4798      	blx	r3
    12d8:	0002      	movs	r2, r0
    12da:	000b      	movs	r3, r1
    12dc:	4c54      	ldr	r4, [pc, #336]	; (1430 <_i2c_master_set_config+0x3e4>)
    12de:	0028      	movs	r0, r5
    12e0:	0031      	movs	r1, r6
    12e2:	47a0      	blx	r4
    12e4:	0003      	movs	r3, r0
    12e6:	000c      	movs	r4, r1
    12e8:	0019      	movs	r1, r3
    12ea:	0022      	movs	r2, r4
    12ec:	4b51      	ldr	r3, [pc, #324]	; (1434 <_i2c_master_set_config+0x3e8>)
    12ee:	0008      	movs	r0, r1
    12f0:	0011      	movs	r1, r2
    12f2:	4798      	blx	r3
    12f4:	0003      	movs	r3, r0
    12f6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    12f8:	68bb      	ldr	r3, [r7, #8]
    12fa:	689a      	ldr	r2, [r3, #8]
    12fc:	2380      	movs	r3, #128	; 0x80
    12fe:	049b      	lsls	r3, r3, #18
    1300:	429a      	cmp	r2, r3
    1302:	d145      	bne.n	1390 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1304:	4b42      	ldr	r3, [pc, #264]	; (1410 <_i2c_master_set_config+0x3c4>)
    1306:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1308:	4798      	blx	r3
    130a:	4c45      	ldr	r4, [pc, #276]	; (1420 <_i2c_master_set_config+0x3d4>)
    130c:	0002      	movs	r2, r0
    130e:	000b      	movs	r3, r1
    1310:	47a0      	blx	r4
    1312:	0003      	movs	r3, r0
    1314:	000c      	movs	r4, r1
    1316:	001d      	movs	r5, r3
    1318:	0026      	movs	r6, r4
    131a:	4b3d      	ldr	r3, [pc, #244]	; (1410 <_i2c_master_set_config+0x3c4>)
    131c:	69f8      	ldr	r0, [r7, #28]
    131e:	4798      	blx	r3
    1320:	4c3c      	ldr	r4, [pc, #240]	; (1414 <_i2c_master_set_config+0x3c8>)
    1322:	2200      	movs	r2, #0
    1324:	4b44      	ldr	r3, [pc, #272]	; (1438 <_i2c_master_set_config+0x3ec>)
    1326:	47a0      	blx	r4
    1328:	0003      	movs	r3, r0
    132a:	000c      	movs	r4, r1
    132c:	001a      	movs	r2, r3
    132e:	0023      	movs	r3, r4
    1330:	4c3f      	ldr	r4, [pc, #252]	; (1430 <_i2c_master_set_config+0x3e4>)
    1332:	0028      	movs	r0, r5
    1334:	0031      	movs	r1, r6
    1336:	47a0      	blx	r4
    1338:	0003      	movs	r3, r0
    133a:	000c      	movs	r4, r1
    133c:	0018      	movs	r0, r3
    133e:	0021      	movs	r1, r4
    1340:	4c39      	ldr	r4, [pc, #228]	; (1428 <_i2c_master_set_config+0x3dc>)
    1342:	2200      	movs	r2, #0
    1344:	4b39      	ldr	r3, [pc, #228]	; (142c <_i2c_master_set_config+0x3e0>)
    1346:	47a0      	blx	r4
    1348:	0003      	movs	r3, r0
    134a:	000c      	movs	r4, r1
    134c:	0019      	movs	r1, r3
    134e:	0022      	movs	r2, r4
    1350:	4b38      	ldr	r3, [pc, #224]	; (1434 <_i2c_master_set_config+0x3e8>)
    1352:	0008      	movs	r0, r1
    1354:	0011      	movs	r1, r2
    1356:	4798      	blx	r3
    1358:	0003      	movs	r3, r0
    135a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    135c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    135e:	2b00      	cmp	r3, #0
    1360:	d009      	beq.n	1376 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1362:	4b36      	ldr	r3, [pc, #216]	; (143c <_i2c_master_set_config+0x3f0>)
    1364:	69f9      	ldr	r1, [r7, #28]
    1366:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1368:	4798      	blx	r3
    136a:	0003      	movs	r3, r0
    136c:	1e9a      	subs	r2, r3, #2
    136e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1370:	1ad3      	subs	r3, r2, r3
    1372:	64bb      	str	r3, [r7, #72]	; 0x48
    1374:	e00c      	b.n	1390 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1376:	69fb      	ldr	r3, [r7, #28]
    1378:	005a      	lsls	r2, r3, #1
    137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    137c:	18d3      	adds	r3, r2, r3
    137e:	1e5a      	subs	r2, r3, #1
    1380:	69fb      	ldr	r3, [r7, #28]
    1382:	0059      	lsls	r1, r3, #1
    1384:	4b2d      	ldr	r3, [pc, #180]	; (143c <_i2c_master_set_config+0x3f0>)
    1386:	0010      	movs	r0, r2
    1388:	4798      	blx	r3
    138a:	0003      	movs	r3, r0
    138c:	3b01      	subs	r3, #1
    138e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1392:	2bff      	cmp	r3, #255	; 0xff
    1394:	dc08      	bgt.n	13a8 <_i2c_master_set_config+0x35c>
    1396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1398:	2b00      	cmp	r3, #0
    139a:	db05      	blt.n	13a8 <_i2c_master_set_config+0x35c>
    139c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    139e:	2bff      	cmp	r3, #255	; 0xff
    13a0:	dc02      	bgt.n	13a8 <_i2c_master_set_config+0x35c>
    13a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    13a4:	2b00      	cmp	r3, #0
    13a6:	da06      	bge.n	13b6 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13a8:	233b      	movs	r3, #59	; 0x3b
    13aa:	2208      	movs	r2, #8
    13ac:	4694      	mov	ip, r2
    13ae:	44bc      	add	ip, r7
    13b0:	4463      	add	r3, ip
    13b2:	2240      	movs	r2, #64	; 0x40
    13b4:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    13b6:	233b      	movs	r3, #59	; 0x3b
    13b8:	2208      	movs	r2, #8
    13ba:	4694      	mov	ip, r2
    13bc:	44bc      	add	ip, r7
    13be:	4463      	add	r3, ip
    13c0:	781b      	ldrb	r3, [r3, #0]
    13c2:	2b40      	cmp	r3, #64	; 0x40
    13c4:	d00e      	beq.n	13e4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    13c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13c8:	22ff      	movs	r2, #255	; 0xff
    13ca:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    13cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    13ce:	041b      	lsls	r3, r3, #16
    13d0:	0019      	movs	r1, r3
    13d2:	23ff      	movs	r3, #255	; 0xff
    13d4:	041b      	lsls	r3, r3, #16
    13d6:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    13d8:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    13da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    13dc:	0612      	lsls	r2, r2, #24
    13de:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    13e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13e2:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    13e4:	233b      	movs	r3, #59	; 0x3b
    13e6:	2208      	movs	r2, #8
    13e8:	4694      	mov	ip, r2
    13ea:	44bc      	add	ip, r7
    13ec:	4463      	add	r3, ip
    13ee:	781b      	ldrb	r3, [r3, #0]
}
    13f0:	0018      	movs	r0, r3
    13f2:	46bd      	mov	sp, r7
    13f4:	b015      	add	sp, #84	; 0x54
    13f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13f8:	00003dbd 	.word	0x00003dbd
    13fc:	00000fbd 	.word	0x00000fbd
    1400:	00003c01 	.word	0x00003c01
    1404:	00004ca1 	.word	0x00004ca1
    1408:	00000fe5 	.word	0x00000fe5
    140c:	00004ad9 	.word	0x00004ad9
    1410:	00008d59 	.word	0x00008d59
    1414:	00008151 	.word	0x00008151
    1418:	e826d695 	.word	0xe826d695
    141c:	3e112e0b 	.word	0x3e112e0b
    1420:	000074cd 	.word	0x000074cd
    1424:	40240000 	.word	0x40240000
    1428:	00008645 	.word	0x00008645
    142c:	3ff00000 	.word	0x3ff00000
    1430:	00007b25 	.word	0x00007b25
    1434:	00008ced 	.word	0x00008ced
    1438:	40080000 	.word	0x40080000
    143c:	000073b5 	.word	0x000073b5

00001440 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1440:	b590      	push	{r4, r7, lr}
    1442:	b08b      	sub	sp, #44	; 0x2c
    1444:	af00      	add	r7, sp, #0
    1446:	60f8      	str	r0, [r7, #12]
    1448:	60b9      	str	r1, [r7, #8]
    144a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    144c:	68fb      	ldr	r3, [r7, #12]
    144e:	68ba      	ldr	r2, [r7, #8]
    1450:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	0018      	movs	r0, r3
    145e:	4b3b      	ldr	r3, [pc, #236]	; (154c <i2c_master_init+0x10c>)
    1460:	4798      	blx	r3
    1462:	0003      	movs	r3, r0
    1464:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1466:	6a3b      	ldr	r3, [r7, #32]
    1468:	3302      	adds	r3, #2
    146a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    146c:	6a3b      	ldr	r3, [r7, #32]
    146e:	3314      	adds	r3, #20
    1470:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1472:	2201      	movs	r2, #1
    1474:	69fb      	ldr	r3, [r7, #28]
    1476:	409a      	lsls	r2, r3
    1478:	0013      	movs	r3, r2
    147a:	0019      	movs	r1, r3
    147c:	2002      	movs	r0, #2
    147e:	4b34      	ldr	r3, [pc, #208]	; (1550 <i2c_master_init+0x110>)
    1480:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1482:	2314      	movs	r3, #20
    1484:	18fb      	adds	r3, r7, r3
    1486:	0018      	movs	r0, r3
    1488:	4b32      	ldr	r3, [pc, #200]	; (1554 <i2c_master_init+0x114>)
    148a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	7b1a      	ldrb	r2, [r3, #12]
    1490:	2314      	movs	r3, #20
    1492:	18fb      	adds	r3, r7, r3
    1494:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1496:	69bb      	ldr	r3, [r7, #24]
    1498:	b2db      	uxtb	r3, r3
    149a:	2214      	movs	r2, #20
    149c:	18ba      	adds	r2, r7, r2
    149e:	0011      	movs	r1, r2
    14a0:	0018      	movs	r0, r3
    14a2:	4b2d      	ldr	r3, [pc, #180]	; (1558 <i2c_master_init+0x118>)
    14a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14a6:	69bb      	ldr	r3, [r7, #24]
    14a8:	b2db      	uxtb	r3, r3
    14aa:	0018      	movs	r0, r3
    14ac:	4b2b      	ldr	r3, [pc, #172]	; (155c <i2c_master_init+0x11c>)
    14ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	7b1b      	ldrb	r3, [r3, #12]
    14b4:	2100      	movs	r1, #0
    14b6:	0018      	movs	r0, r3
    14b8:	4b29      	ldr	r3, [pc, #164]	; (1560 <i2c_master_init+0x120>)
    14ba:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	2202      	movs	r2, #2
    14c2:	4013      	ands	r3, r2
    14c4:	d001      	beq.n	14ca <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    14c6:	231c      	movs	r3, #28
    14c8:	e03b      	b.n	1542 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    14ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	2201      	movs	r2, #1
    14d0:	4013      	ands	r3, r2
    14d2:	d001      	beq.n	14d8 <i2c_master_init+0x98>
		return STATUS_BUSY;
    14d4:	2305      	movs	r3, #5
    14d6:	e034      	b.n	1542 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	2217      	movs	r2, #23
    14de:	18bc      	adds	r4, r7, r2
    14e0:	0018      	movs	r0, r3
    14e2:	4b1a      	ldr	r3, [pc, #104]	; (154c <i2c_master_init+0x10c>)
    14e4:	4798      	blx	r3
    14e6:	0003      	movs	r3, r0
    14e8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    14ea:	4a1e      	ldr	r2, [pc, #120]	; (1564 <i2c_master_init+0x124>)
    14ec:	2317      	movs	r3, #23
    14ee:	18fb      	adds	r3, r7, r3
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	0011      	movs	r1, r2
    14f4:	0018      	movs	r0, r3
    14f6:	4b1c      	ldr	r3, [pc, #112]	; (1568 <i2c_master_init+0x128>)
    14f8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14fa:	2317      	movs	r3, #23
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	781a      	ldrb	r2, [r3, #0]
    1500:	4b1a      	ldr	r3, [pc, #104]	; (156c <i2c_master_init+0x12c>)
    1502:	0092      	lsls	r2, r2, #2
    1504:	68f9      	ldr	r1, [r7, #12]
    1506:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    1508:	68fb      	ldr	r3, [r7, #12]
    150a:	2200      	movs	r2, #0
    150c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	2200      	movs	r2, #0
    1512:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	2200      	movs	r2, #0
    1518:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	2200      	movs	r2, #0
    151e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	2225      	movs	r2, #37	; 0x25
    1524:	2100      	movs	r1, #0
    1526:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	2200      	movs	r2, #0
    152c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1530:	2214      	movs	r2, #20
    1532:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1534:	687a      	ldr	r2, [r7, #4]
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	0011      	movs	r1, r2
    153a:	0018      	movs	r0, r3
    153c:	4b0c      	ldr	r3, [pc, #48]	; (1570 <i2c_master_init+0x130>)
    153e:	4798      	blx	r3
    1540:	0003      	movs	r3, r0
}
    1542:	0018      	movs	r0, r3
    1544:	46bd      	mov	sp, r7
    1546:	b00b      	add	sp, #44	; 0x2c
    1548:	bd90      	pop	{r4, r7, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	00003dbd 	.word	0x00003dbd
    1550:	00000f61 	.word	0x00000f61
    1554:	00000f49 	.word	0x00000f49
    1558:	000049b5 	.word	0x000049b5
    155c:	000049f9 	.word	0x000049f9
    1560:	00003b75 	.word	0x00003b75
    1564:	00001d65 	.word	0x00001d65
    1568:	00003e21 	.word	0x00003e21
    156c:	200000fc 	.word	0x200000fc
    1570:	0000104d 	.word	0x0000104d

00001574 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	7e1b      	ldrb	r3, [r3, #24]
    1586:	b2db      	uxtb	r3, r3
    1588:	001a      	movs	r2, r3
    158a:	2302      	movs	r3, #2
    158c:	4013      	ands	r3, r2
    158e:	d00b      	beq.n	15a8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	2202      	movs	r2, #2
    1594:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1596:	68fb      	ldr	r3, [r7, #12]
    1598:	8b5b      	ldrh	r3, [r3, #26]
    159a:	b29b      	uxth	r3, r3
    159c:	001a      	movs	r2, r3
    159e:	2302      	movs	r3, #2
    15a0:	4013      	ands	r3, r2
    15a2:	d011      	beq.n	15c8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    15a4:	2341      	movs	r3, #65	; 0x41
    15a6:	e010      	b.n	15ca <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	8b5b      	ldrh	r3, [r3, #26]
    15ac:	b29b      	uxth	r3, r3
    15ae:	001a      	movs	r2, r3
    15b0:	2304      	movs	r3, #4
    15b2:	4013      	ands	r3, r2
    15b4:	d008      	beq.n	15c8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	685b      	ldr	r3, [r3, #4]
    15ba:	22c0      	movs	r2, #192	; 0xc0
    15bc:	0292      	lsls	r2, r2, #10
    15be:	431a      	orrs	r2, r3
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    15c4:	2318      	movs	r3, #24
    15c6:	e000      	b.n	15ca <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    15c8:	2300      	movs	r3, #0
}
    15ca:	0018      	movs	r0, r3
    15cc:	46bd      	mov	sp, r7
    15ce:	b004      	add	sp, #16
    15d0:	bd80      	pop	{r7, pc}
    15d2:	46c0      	nop			; (mov r8, r8)

000015d4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    15d4:	b580      	push	{r7, lr}
    15d6:	b084      	sub	sp, #16
    15d8:	af00      	add	r7, sp, #0
    15da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    15e2:	230e      	movs	r3, #14
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	2200      	movs	r2, #0
    15e8:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    15ea:	e00f      	b.n	160c <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    15ec:	230e      	movs	r3, #14
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	220e      	movs	r2, #14
    15f2:	18ba      	adds	r2, r7, r2
    15f4:	8812      	ldrh	r2, [r2, #0]
    15f6:	3201      	adds	r2, #1
    15f8:	801a      	strh	r2, [r3, #0]
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	891b      	ldrh	r3, [r3, #8]
    15fe:	220e      	movs	r2, #14
    1600:	18ba      	adds	r2, r7, r2
    1602:	8812      	ldrh	r2, [r2, #0]
    1604:	429a      	cmp	r2, r3
    1606:	d301      	bcc.n	160c <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1608:	2312      	movs	r3, #18
    160a:	e00e      	b.n	162a <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    160c:	68bb      	ldr	r3, [r7, #8]
    160e:	7e1b      	ldrb	r3, [r3, #24]
    1610:	b2db      	uxtb	r3, r3
    1612:	001a      	movs	r2, r3
    1614:	2301      	movs	r3, #1
    1616:	4013      	ands	r3, r2
    1618:	d106      	bne.n	1628 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    161a:	68bb      	ldr	r3, [r7, #8]
    161c:	7e1b      	ldrb	r3, [r3, #24]
    161e:	b2db      	uxtb	r3, r3
    1620:	001a      	movs	r2, r3
    1622:	2302      	movs	r3, #2
    1624:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1626:	d0e1      	beq.n	15ec <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1628:	2300      	movs	r3, #0
}
    162a:	0018      	movs	r0, r3
    162c:	46bd      	mov	sp, r7
    162e:	b004      	add	sp, #16
    1630:	bd80      	pop	{r7, pc}
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1634:	b590      	push	{r4, r7, lr}
    1636:	b085      	sub	sp, #20
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	000a      	movs	r2, r1
    163e:	1cfb      	adds	r3, r7, #3
    1640:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	685b      	ldr	r3, [r3, #4]
    164c:	2280      	movs	r2, #128	; 0x80
    164e:	02d2      	lsls	r2, r2, #11
    1650:	431a      	orrs	r2, r3
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1656:	1cfb      	adds	r3, r7, #3
    1658:	781a      	ldrb	r2, [r3, #0]
    165a:	68fb      	ldr	r3, [r7, #12]
    165c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    165e:	230b      	movs	r3, #11
    1660:	18fc      	adds	r4, r7, r3
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	0018      	movs	r0, r3
    1666:	4b07      	ldr	r3, [pc, #28]	; (1684 <_i2c_master_send_hs_master_code+0x50>)
    1668:	4798      	blx	r3
    166a:	0003      	movs	r3, r0
    166c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	2201      	movs	r2, #1
    1672:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1674:	230b      	movs	r3, #11
    1676:	18fb      	adds	r3, r7, r3
    1678:	781b      	ldrb	r3, [r3, #0]
}
    167a:	0018      	movs	r0, r3
    167c:	46bd      	mov	sp, r7
    167e:	b005      	add	sp, #20
    1680:	bd90      	pop	{r4, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	000015d5 	.word	0x000015d5

00001688 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1688:	b590      	push	{r4, r7, lr}
    168a:	b087      	sub	sp, #28
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1698:	2314      	movs	r3, #20
    169a:	18fb      	adds	r3, r7, r3
    169c:	683a      	ldr	r2, [r7, #0]
    169e:	8852      	ldrh	r2, [r2, #2]
    16a0:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    16a2:	2312      	movs	r3, #18
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	2200      	movs	r2, #0
    16a8:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    16aa:	68fb      	ldr	r3, [r7, #12]
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	011b      	lsls	r3, r3, #4
    16b0:	0fdb      	lsrs	r3, r3, #31
    16b2:	b2db      	uxtb	r3, r3
    16b4:	001a      	movs	r2, r3
    16b6:	230b      	movs	r3, #11
    16b8:	18fb      	adds	r3, r7, r3
    16ba:	1e51      	subs	r1, r2, #1
    16bc:	418a      	sbcs	r2, r1
    16be:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	7a5b      	ldrb	r3, [r3, #9]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d006      	beq.n	16d6 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    16c8:	683b      	ldr	r3, [r7, #0]
    16ca:	7a9a      	ldrb	r2, [r3, #10]
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	0011      	movs	r1, r2
    16d0:	0018      	movs	r0, r3
    16d2:	4b85      	ldr	r3, [pc, #532]	; (18e8 <_i2c_master_read_packet+0x260>)
    16d4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16d6:	68fb      	ldr	r3, [r7, #12]
    16d8:	685b      	ldr	r3, [r3, #4]
    16da:	4a84      	ldr	r2, [pc, #528]	; (18ec <_i2c_master_read_packet+0x264>)
    16dc:	401a      	ands	r2, r3
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    16e2:	683b      	ldr	r3, [r7, #0]
    16e4:	7a1b      	ldrb	r3, [r3, #8]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d042      	beq.n	1770 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    16ea:	683b      	ldr	r3, [r7, #0]
    16ec:	881b      	ldrh	r3, [r3, #0]
    16ee:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16f0:	683b      	ldr	r3, [r7, #0]
    16f2:	7a5b      	ldrb	r3, [r3, #9]
    16f4:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    16f6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16f8:	001a      	movs	r2, r3
    16fa:	2380      	movs	r3, #128	; 0x80
    16fc:	021b      	lsls	r3, r3, #8
    16fe:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1704:	2317      	movs	r3, #23
    1706:	18fc      	adds	r4, r7, r3
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	0018      	movs	r0, r3
    170c:	4b78      	ldr	r3, [pc, #480]	; (18f0 <_i2c_master_read_packet+0x268>)
    170e:	4798      	blx	r3
    1710:	0003      	movs	r3, r0
    1712:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	4a74      	ldr	r2, [pc, #464]	; (18ec <_i2c_master_read_packet+0x264>)
    171a:	401a      	ands	r2, r3
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1720:	2317      	movs	r3, #23
    1722:	18fb      	adds	r3, r7, r3
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	2b00      	cmp	r3, #0
    1728:	d107      	bne.n	173a <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    172a:	2317      	movs	r3, #23
    172c:	18fc      	adds	r4, r7, r3
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	0018      	movs	r0, r3
    1732:	4b70      	ldr	r3, [pc, #448]	; (18f4 <_i2c_master_read_packet+0x26c>)
    1734:	4798      	blx	r3
    1736:	0003      	movs	r3, r0
    1738:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    173a:	2317      	movs	r3, #23
    173c:	18fb      	adds	r3, r7, r3
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	2b00      	cmp	r3, #0
    1742:	d111      	bne.n	1768 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1744:	683b      	ldr	r3, [r7, #0]
    1746:	881b      	ldrh	r3, [r3, #0]
    1748:	0a1b      	lsrs	r3, r3, #8
    174a:	b29b      	uxth	r3, r3
    174c:	2278      	movs	r2, #120	; 0x78
    174e:	4313      	orrs	r3, r2
    1750:	b29b      	uxth	r3, r3
    1752:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1754:	683b      	ldr	r3, [r7, #0]
    1756:	7a5b      	ldrb	r3, [r3, #9]
    1758:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    175a:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    175c:	2201      	movs	r2, #1
    175e:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1760:	001a      	movs	r2, r3
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	625a      	str	r2, [r3, #36]	; 0x24
    1766:	e00f      	b.n	1788 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1768:	2317      	movs	r3, #23
    176a:	18fb      	adds	r3, r7, r3
    176c:	781b      	ldrb	r3, [r3, #0]
    176e:	e0b6      	b.n	18de <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	881b      	ldrh	r3, [r3, #0]
    1774:	005b      	lsls	r3, r3, #1
    1776:	2201      	movs	r2, #1
    1778:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    177a:	683b      	ldr	r3, [r7, #0]
    177c:	7a5b      	ldrb	r3, [r3, #9]
    177e:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1780:	4313      	orrs	r3, r2
    1782:	001a      	movs	r2, r3
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1788:	2317      	movs	r3, #23
    178a:	18fc      	adds	r4, r7, r3
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	0018      	movs	r0, r3
    1790:	4b57      	ldr	r3, [pc, #348]	; (18f0 <_i2c_master_read_packet+0x268>)
    1792:	4798      	blx	r3
    1794:	0003      	movs	r3, r0
    1796:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1798:	230b      	movs	r3, #11
    179a:	18fb      	adds	r3, r7, r3
    179c:	781b      	ldrb	r3, [r3, #0]
    179e:	2b00      	cmp	r3, #0
    17a0:	d00b      	beq.n	17ba <_i2c_master_read_packet+0x132>
    17a2:	683b      	ldr	r3, [r7, #0]
    17a4:	885b      	ldrh	r3, [r3, #2]
    17a6:	2b01      	cmp	r3, #1
    17a8:	d107      	bne.n	17ba <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	685b      	ldr	r3, [r3, #4]
    17ae:	2280      	movs	r2, #128	; 0x80
    17b0:	02d2      	lsls	r2, r2, #11
    17b2:	431a      	orrs	r2, r3
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	605a      	str	r2, [r3, #4]
    17b8:	e005      	b.n	17c6 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    17ba:	68fb      	ldr	r3, [r7, #12]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	4a4b      	ldr	r2, [pc, #300]	; (18ec <_i2c_master_read_packet+0x264>)
    17c0:	401a      	ands	r2, r3
    17c2:	68fb      	ldr	r3, [r7, #12]
    17c4:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    17c6:	2317      	movs	r3, #23
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	781b      	ldrb	r3, [r3, #0]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d107      	bne.n	17e0 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    17d0:	2317      	movs	r3, #23
    17d2:	18fc      	adds	r4, r7, r3
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	0018      	movs	r0, r3
    17d8:	4b46      	ldr	r3, [pc, #280]	; (18f4 <_i2c_master_read_packet+0x26c>)
    17da:	4798      	blx	r3
    17dc:	0003      	movs	r3, r0
    17de:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    17e0:	2317      	movs	r3, #23
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	781b      	ldrb	r3, [r3, #0]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d000      	beq.n	17ec <_i2c_master_read_packet+0x164>
    17ea:	e075      	b.n	18d8 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    17ec:	e04b      	b.n	1886 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	8b5b      	ldrh	r3, [r3, #26]
    17f2:	b29b      	uxth	r3, r3
    17f4:	001a      	movs	r2, r3
    17f6:	2320      	movs	r3, #32
    17f8:	4013      	ands	r3, r2
    17fa:	d101      	bne.n	1800 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    17fc:	2341      	movs	r3, #65	; 0x41
    17fe:	e06e      	b.n	18de <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	7adb      	ldrb	r3, [r3, #11]
    1804:	2b00      	cmp	r3, #0
    1806:	d01e      	beq.n	1846 <_i2c_master_read_packet+0x1be>
    1808:	230b      	movs	r3, #11
    180a:	18fb      	adds	r3, r7, r3
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2201      	movs	r2, #1
    1810:	4053      	eors	r3, r2
    1812:	b2db      	uxtb	r3, r3
    1814:	2b00      	cmp	r3, #0
    1816:	d004      	beq.n	1822 <_i2c_master_read_packet+0x19a>
    1818:	2314      	movs	r3, #20
    181a:	18fb      	adds	r3, r7, r3
    181c:	881b      	ldrh	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d009      	beq.n	1836 <_i2c_master_read_packet+0x1ae>
    1822:	230b      	movs	r3, #11
    1824:	18fb      	adds	r3, r7, r3
    1826:	781b      	ldrb	r3, [r3, #0]
    1828:	2b00      	cmp	r3, #0
    182a:	d00c      	beq.n	1846 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    182c:	2314      	movs	r3, #20
    182e:	18fb      	adds	r3, r7, r3
    1830:	881b      	ldrh	r3, [r3, #0]
    1832:	2b01      	cmp	r3, #1
    1834:	d107      	bne.n	1846 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	685b      	ldr	r3, [r3, #4]
    183a:	2280      	movs	r2, #128	; 0x80
    183c:	02d2      	lsls	r2, r2, #11
    183e:	431a      	orrs	r2, r3
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	605a      	str	r2, [r3, #4]
    1844:	e01a      	b.n	187c <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	0018      	movs	r0, r3
    184a:	4b2b      	ldr	r3, [pc, #172]	; (18f8 <_i2c_master_read_packet+0x270>)
    184c:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    184e:	683b      	ldr	r3, [r7, #0]
    1850:	685a      	ldr	r2, [r3, #4]
    1852:	2312      	movs	r3, #18
    1854:	18fb      	adds	r3, r7, r3
    1856:	881b      	ldrh	r3, [r3, #0]
    1858:	2112      	movs	r1, #18
    185a:	1879      	adds	r1, r7, r1
    185c:	1c58      	adds	r0, r3, #1
    185e:	8008      	strh	r0, [r1, #0]
    1860:	18d3      	adds	r3, r2, r3
    1862:	68fa      	ldr	r2, [r7, #12]
    1864:	2128      	movs	r1, #40	; 0x28
    1866:	5c52      	ldrb	r2, [r2, r1]
    1868:	b2d2      	uxtb	r2, r2
    186a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    186c:	2317      	movs	r3, #23
    186e:	18fc      	adds	r4, r7, r3
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	0018      	movs	r0, r3
    1874:	4b1e      	ldr	r3, [pc, #120]	; (18f0 <_i2c_master_read_packet+0x268>)
    1876:	4798      	blx	r3
    1878:	0003      	movs	r3, r0
    187a:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    187c:	2317      	movs	r3, #23
    187e:	18fb      	adds	r3, r7, r3
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d109      	bne.n	189a <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1886:	2314      	movs	r3, #20
    1888:	18fb      	adds	r3, r7, r3
    188a:	881b      	ldrh	r3, [r3, #0]
    188c:	2214      	movs	r2, #20
    188e:	18ba      	adds	r2, r7, r2
    1890:	1e59      	subs	r1, r3, #1
    1892:	8011      	strh	r1, [r2, #0]
    1894:	2b00      	cmp	r3, #0
    1896:	d1aa      	bne.n	17ee <_i2c_master_read_packet+0x166>
    1898:	e000      	b.n	189c <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    189a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    189c:	687b      	ldr	r3, [r7, #4]
    189e:	7a9b      	ldrb	r3, [r3, #10]
    18a0:	2b00      	cmp	r3, #0
    18a2:	d00a      	beq.n	18ba <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	0018      	movs	r0, r3
    18a8:	4b13      	ldr	r3, [pc, #76]	; (18f8 <_i2c_master_read_packet+0x270>)
    18aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	685b      	ldr	r3, [r3, #4]
    18b0:	22c0      	movs	r2, #192	; 0xc0
    18b2:	0292      	lsls	r2, r2, #10
    18b4:	431a      	orrs	r2, r3
    18b6:	68fb      	ldr	r3, [r7, #12]
    18b8:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	0018      	movs	r0, r3
    18be:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <_i2c_master_read_packet+0x270>)
    18c0:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    18c2:	683b      	ldr	r3, [r7, #0]
    18c4:	685a      	ldr	r2, [r3, #4]
    18c6:	2312      	movs	r3, #18
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	881b      	ldrh	r3, [r3, #0]
    18cc:	18d3      	adds	r3, r2, r3
    18ce:	68fa      	ldr	r2, [r7, #12]
    18d0:	2128      	movs	r1, #40	; 0x28
    18d2:	5c52      	ldrb	r2, [r2, r1]
    18d4:	b2d2      	uxtb	r2, r2
    18d6:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    18d8:	2317      	movs	r3, #23
    18da:	18fb      	adds	r3, r7, r3
    18dc:	781b      	ldrb	r3, [r3, #0]
}
    18de:	0018      	movs	r0, r3
    18e0:	46bd      	mov	sp, r7
    18e2:	b007      	add	sp, #28
    18e4:	bd90      	pop	{r4, r7, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00001635 	.word	0x00001635
    18ec:	fffbffff 	.word	0xfffbffff
    18f0:	000015d5 	.word	0x000015d5
    18f4:	00001575 	.word	0x00001575
    18f8:	00001029 	.word	0x00001029

000018fc <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	8b9b      	ldrh	r3, [r3, #28]
    190a:	b29b      	uxth	r3, r3
    190c:	2b00      	cmp	r3, #0
    190e:	d001      	beq.n	1914 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1910:	2305      	movs	r3, #5
    1912:	e00c      	b.n	192e <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	2201      	movs	r2, #1
    1918:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	2201      	movs	r2, #1
    191e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1920:	683a      	ldr	r2, [r7, #0]
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	0011      	movs	r1, r2
    1926:	0018      	movs	r0, r3
    1928:	4b03      	ldr	r3, [pc, #12]	; (1938 <i2c_master_read_packet_wait+0x3c>)
    192a:	4798      	blx	r3
    192c:	0003      	movs	r3, r0
}
    192e:	0018      	movs	r0, r3
    1930:	46bd      	mov	sp, r7
    1932:	b002      	add	sp, #8
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00001689 	.word	0x00001689

0000193c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    193c:	b590      	push	{r4, r7, lr}
    193e:	b087      	sub	sp, #28
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    1944:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    194c:	2314      	movs	r3, #20
    194e:	18fb      	adds	r3, r7, r3
    1950:	683a      	ldr	r2, [r7, #0]
    1952:	8852      	ldrh	r2, [r2, #2]
    1954:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	0018      	movs	r0, r3
    195a:	4b51      	ldr	r3, [pc, #324]	; (1aa0 <_i2c_master_write_packet+0x164>)
    195c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	7a5b      	ldrb	r3, [r3, #9]
    1962:	2b00      	cmp	r3, #0
    1964:	d006      	beq.n	1974 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1966:	683b      	ldr	r3, [r7, #0]
    1968:	7a9a      	ldrb	r2, [r3, #10]
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	0011      	movs	r1, r2
    196e:	0018      	movs	r0, r3
    1970:	4b4c      	ldr	r3, [pc, #304]	; (1aa4 <_i2c_master_write_packet+0x168>)
    1972:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1974:	68fb      	ldr	r3, [r7, #12]
    1976:	685b      	ldr	r3, [r3, #4]
    1978:	4a4b      	ldr	r2, [pc, #300]	; (1aa8 <_i2c_master_write_packet+0x16c>)
    197a:	401a      	ands	r2, r3
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1980:	683b      	ldr	r3, [r7, #0]
    1982:	7a1b      	ldrb	r3, [r3, #8]
    1984:	2b00      	cmp	r3, #0
    1986:	d00d      	beq.n	19a4 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1988:	683b      	ldr	r3, [r7, #0]
    198a:	881b      	ldrh	r3, [r3, #0]
    198c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    198e:	683b      	ldr	r3, [r7, #0]
    1990:	7a5b      	ldrb	r3, [r3, #9]
    1992:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1994:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1996:	001a      	movs	r2, r3
    1998:	2380      	movs	r3, #128	; 0x80
    199a:	021b      	lsls	r3, r3, #8
    199c:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	625a      	str	r2, [r3, #36]	; 0x24
    19a2:	e009      	b.n	19b8 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19a4:	683b      	ldr	r3, [r7, #0]
    19a6:	881b      	ldrh	r3, [r3, #0]
    19a8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    19aa:	683b      	ldr	r3, [r7, #0]
    19ac:	7a5b      	ldrb	r3, [r3, #9]
    19ae:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19b0:	4313      	orrs	r3, r2
    19b2:	001a      	movs	r2, r3
    19b4:	68fb      	ldr	r3, [r7, #12]
    19b6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    19b8:	2317      	movs	r3, #23
    19ba:	18fc      	adds	r4, r7, r3
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	0018      	movs	r0, r3
    19c0:	4b3a      	ldr	r3, [pc, #232]	; (1aac <_i2c_master_write_packet+0x170>)
    19c2:	4798      	blx	r3
    19c4:	0003      	movs	r3, r0
    19c6:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    19c8:	2317      	movs	r3, #23
    19ca:	18fb      	adds	r3, r7, r3
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d107      	bne.n	19e2 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    19d2:	2317      	movs	r3, #23
    19d4:	18fc      	adds	r4, r7, r3
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	0018      	movs	r0, r3
    19da:	4b35      	ldr	r3, [pc, #212]	; (1ab0 <_i2c_master_write_packet+0x174>)
    19dc:	4798      	blx	r3
    19de:	0003      	movs	r3, r0
    19e0:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    19e2:	2317      	movs	r3, #23
    19e4:	18fb      	adds	r3, r7, r3
    19e6:	781b      	ldrb	r3, [r3, #0]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d152      	bne.n	1a92 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    19ec:	2312      	movs	r3, #18
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	2200      	movs	r2, #0
    19f2:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    19f4:	e033      	b.n	1a5e <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	8b5b      	ldrh	r3, [r3, #26]
    19fa:	b29b      	uxth	r3, r3
    19fc:	001a      	movs	r2, r3
    19fe:	2320      	movs	r3, #32
    1a00:	4013      	ands	r3, r2
    1a02:	d101      	bne.n	1a08 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1a04:	2341      	movs	r3, #65	; 0x41
    1a06:	e047      	b.n	1a98 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	0018      	movs	r0, r3
    1a0c:	4b24      	ldr	r3, [pc, #144]	; (1aa0 <_i2c_master_write_packet+0x164>)
    1a0e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1a10:	683b      	ldr	r3, [r7, #0]
    1a12:	685a      	ldr	r2, [r3, #4]
    1a14:	2312      	movs	r3, #18
    1a16:	18fb      	adds	r3, r7, r3
    1a18:	881b      	ldrh	r3, [r3, #0]
    1a1a:	2112      	movs	r1, #18
    1a1c:	1879      	adds	r1, r7, r1
    1a1e:	1c58      	adds	r0, r3, #1
    1a20:	8008      	strh	r0, [r1, #0]
    1a22:	18d3      	adds	r3, r2, r3
    1a24:	7819      	ldrb	r1, [r3, #0]
    1a26:	68fb      	ldr	r3, [r7, #12]
    1a28:	2228      	movs	r2, #40	; 0x28
    1a2a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1a2c:	2317      	movs	r3, #23
    1a2e:	18fc      	adds	r4, r7, r3
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	0018      	movs	r0, r3
    1a34:	4b1d      	ldr	r3, [pc, #116]	; (1aac <_i2c_master_write_packet+0x170>)
    1a36:	4798      	blx	r3
    1a38:	0003      	movs	r3, r0
    1a3a:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1a3c:	2317      	movs	r3, #23
    1a3e:	18fb      	adds	r3, r7, r3
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d115      	bne.n	1a72 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	8b5b      	ldrh	r3, [r3, #26]
    1a4a:	b29b      	uxth	r3, r3
    1a4c:	001a      	movs	r2, r3
    1a4e:	2304      	movs	r3, #4
    1a50:	4013      	ands	r3, r2
    1a52:	d004      	beq.n	1a5e <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1a54:	2317      	movs	r3, #23
    1a56:	18fb      	adds	r3, r7, r3
    1a58:	221e      	movs	r2, #30
    1a5a:	701a      	strb	r2, [r3, #0]
				break;
    1a5c:	e00a      	b.n	1a74 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1a5e:	2314      	movs	r3, #20
    1a60:	18fb      	adds	r3, r7, r3
    1a62:	881b      	ldrh	r3, [r3, #0]
    1a64:	2214      	movs	r2, #20
    1a66:	18ba      	adds	r2, r7, r2
    1a68:	1e59      	subs	r1, r3, #1
    1a6a:	8011      	strh	r1, [r2, #0]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d1c2      	bne.n	19f6 <_i2c_master_write_packet+0xba>
    1a70:	e000      	b.n	1a74 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1a72:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1a74:	687b      	ldr	r3, [r7, #4]
    1a76:	7a9b      	ldrb	r3, [r3, #10]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d00a      	beq.n	1a92 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	0018      	movs	r0, r3
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <_i2c_master_write_packet+0x164>)
    1a82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a84:	68fb      	ldr	r3, [r7, #12]
    1a86:	685b      	ldr	r3, [r3, #4]
    1a88:	22c0      	movs	r2, #192	; 0xc0
    1a8a:	0292      	lsls	r2, r2, #10
    1a8c:	431a      	orrs	r2, r3
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1a92:	2317      	movs	r3, #23
    1a94:	18fb      	adds	r3, r7, r3
    1a96:	781b      	ldrb	r3, [r3, #0]
}
    1a98:	0018      	movs	r0, r3
    1a9a:	46bd      	mov	sp, r7
    1a9c:	b007      	add	sp, #28
    1a9e:	bd90      	pop	{r4, r7, pc}
    1aa0:	00001029 	.word	0x00001029
    1aa4:	00001635 	.word	0x00001635
    1aa8:	fffbffff 	.word	0xfffbffff
    1aac:	000015d5 	.word	0x000015d5
    1ab0:	00001575 	.word	0x00001575

00001ab4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	b082      	sub	sp, #8
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
    1abc:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	8b9b      	ldrh	r3, [r3, #28]
    1ac2:	b29b      	uxth	r3, r3
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d001      	beq.n	1acc <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    1ac8:	2305      	movs	r3, #5
    1aca:	e00c      	b.n	1ae6 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	2201      	movs	r2, #1
    1ad0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	2201      	movs	r2, #1
    1ad6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1ad8:	683a      	ldr	r2, [r7, #0]
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	0011      	movs	r1, r2
    1ade:	0018      	movs	r0, r3
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <i2c_master_write_packet_wait+0x3c>)
    1ae2:	4798      	blx	r3
    1ae4:	0003      	movs	r3, r0
}
    1ae6:	0018      	movs	r0, r3
    1ae8:	46bd      	mov	sp, r7
    1aea:	b002      	add	sp, #8
    1aec:	bd80      	pop	{r7, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	0000193d 	.word	0x0000193d

00001af4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b084      	sub	sp, #16
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	69db      	ldr	r3, [r3, #28]
    1b06:	2207      	movs	r2, #7
    1b08:	4013      	ands	r3, r2
    1b0a:	1e5a      	subs	r2, r3, #1
    1b0c:	4193      	sbcs	r3, r2
    1b0e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1b10:	0018      	movs	r0, r3
    1b12:	46bd      	mov	sp, r7
    1b14:	b004      	add	sp, #16
    1b16:	bd80      	pop	{r7, pc}

00001b18 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	0018      	movs	r0, r3
    1b26:	4b04      	ldr	r3, [pc, #16]	; (1b38 <_i2c_master_wait_for_sync+0x20>)
    1b28:	4798      	blx	r3
    1b2a:	1e03      	subs	r3, r0, #0
    1b2c:	d1f9      	bne.n	1b22 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	46bd      	mov	sp, r7
    1b32:	b002      	add	sp, #8
    1b34:	bd80      	pop	{r7, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	00001af5 	.word	0x00001af5

00001b3c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b084      	sub	sp, #16
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b44:	687b      	ldr	r3, [r7, #4]
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	011b      	lsls	r3, r3, #4
    1b50:	0fdb      	lsrs	r3, r3, #31
    1b52:	b2db      	uxtb	r3, r3
    1b54:	001a      	movs	r2, r3
    1b56:	230b      	movs	r3, #11
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	1e51      	subs	r1, r2, #1
    1b5c:	418a      	sbcs	r2, r1
    1b5e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1b60:	2308      	movs	r3, #8
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	687a      	ldr	r2, [r7, #4]
    1b66:	8b52      	ldrh	r2, [r2, #26]
    1b68:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	8b9b      	ldrh	r3, [r3, #28]
    1b6e:	b29a      	uxth	r2, r3
    1b70:	2308      	movs	r3, #8
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	2108      	movs	r1, #8
    1b76:	1879      	adds	r1, r7, r1
    1b78:	8809      	ldrh	r1, [r1, #0]
    1b7a:	1a8a      	subs	r2, r1, r2
    1b7c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	8b9b      	ldrh	r3, [r3, #28]
    1b82:	b29b      	uxth	r3, r3
    1b84:	3b01      	subs	r3, #1
    1b86:	b29a      	uxth	r2, r3
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1b8c:	230b      	movs	r3, #11
    1b8e:	18fb      	adds	r3, r7, r3
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	2b00      	cmp	r3, #0
    1b94:	d010      	beq.n	1bb8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	7adb      	ldrb	r3, [r3, #11]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d01c      	beq.n	1bd8 <_i2c_master_read+0x9c>
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	8b9b      	ldrh	r3, [r3, #28]
    1ba2:	b29b      	uxth	r3, r3
    1ba4:	2b01      	cmp	r3, #1
    1ba6:	d117      	bne.n	1bd8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ba8:	68fb      	ldr	r3, [r7, #12]
    1baa:	685b      	ldr	r3, [r3, #4]
    1bac:	2280      	movs	r2, #128	; 0x80
    1bae:	02d2      	lsls	r2, r2, #11
    1bb0:	431a      	orrs	r2, r3
    1bb2:	68fb      	ldr	r3, [r7, #12]
    1bb4:	605a      	str	r2, [r3, #4]
    1bb6:	e00f      	b.n	1bd8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	7adb      	ldrb	r3, [r3, #11]
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d00b      	beq.n	1bd8 <_i2c_master_read+0x9c>
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	8b9b      	ldrh	r3, [r3, #28]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d106      	bne.n	1bd8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1bca:	68fb      	ldr	r3, [r7, #12]
    1bcc:	685b      	ldr	r3, [r3, #4]
    1bce:	2280      	movs	r2, #128	; 0x80
    1bd0:	02d2      	lsls	r2, r2, #11
    1bd2:	431a      	orrs	r2, r3
    1bd4:	68fb      	ldr	r3, [r7, #12]
    1bd6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	8b9b      	ldrh	r3, [r3, #28]
    1bdc:	b29b      	uxth	r3, r3
    1bde:	2b00      	cmp	r3, #0
    1be0:	d10e      	bne.n	1c00 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	7a9b      	ldrb	r3, [r3, #10]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d00a      	beq.n	1c00 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	0018      	movs	r0, r3
    1bee:	4b0e      	ldr	r3, [pc, #56]	; (1c28 <_i2c_master_read+0xec>)
    1bf0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bf2:	68fb      	ldr	r3, [r7, #12]
    1bf4:	685b      	ldr	r3, [r3, #4]
    1bf6:	22c0      	movs	r2, #192	; 0xc0
    1bf8:	0292      	lsls	r2, r2, #10
    1bfa:	431a      	orrs	r2, r3
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	0018      	movs	r0, r3
    1c04:	4b08      	ldr	r3, [pc, #32]	; (1c28 <_i2c_master_read+0xec>)
    1c06:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	6a1a      	ldr	r2, [r3, #32]
    1c0c:	2308      	movs	r3, #8
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	881b      	ldrh	r3, [r3, #0]
    1c12:	18d3      	adds	r3, r2, r3
    1c14:	68fa      	ldr	r2, [r7, #12]
    1c16:	2128      	movs	r1, #40	; 0x28
    1c18:	5c52      	ldrb	r2, [r2, r1]
    1c1a:	b2d2      	uxtb	r2, r2
    1c1c:	701a      	strb	r2, [r3, #0]
}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	46bd      	mov	sp, r7
    1c22:	b004      	add	sp, #16
    1c24:	bd80      	pop	{r7, pc}
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	00001b19 	.word	0x00001b19

00001c2c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b084      	sub	sp, #16
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	681b      	ldr	r3, [r3, #0]
    1c38:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1c3a:	68fb      	ldr	r3, [r7, #12]
    1c3c:	8b5b      	ldrh	r3, [r3, #26]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	001a      	movs	r2, r3
    1c42:	2304      	movs	r3, #4
    1c44:	4013      	ands	r3, r2
    1c46:	d004      	beq.n	1c52 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	2225      	movs	r2, #37	; 0x25
    1c4c:	211e      	movs	r1, #30
    1c4e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1c50:	e024      	b.n	1c9c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1c52:	230a      	movs	r3, #10
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	687a      	ldr	r2, [r7, #4]
    1c58:	8b52      	ldrh	r2, [r2, #26]
    1c5a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	8b9b      	ldrh	r3, [r3, #28]
    1c60:	b29a      	uxth	r2, r3
    1c62:	230a      	movs	r3, #10
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	210a      	movs	r1, #10
    1c68:	1879      	adds	r1, r7, r1
    1c6a:	8809      	ldrh	r1, [r1, #0]
    1c6c:	1a8a      	subs	r2, r1, r2
    1c6e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	8b9b      	ldrh	r3, [r3, #28]
    1c74:	b29b      	uxth	r3, r3
    1c76:	3b01      	subs	r3, #1
    1c78:	b29a      	uxth	r2, r3
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	0018      	movs	r0, r3
    1c82:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <_i2c_master_write+0x78>)
    1c84:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	6a1a      	ldr	r2, [r3, #32]
    1c8a:	230a      	movs	r3, #10
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	881b      	ldrh	r3, [r3, #0]
    1c90:	18d3      	adds	r3, r2, r3
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	b2d9      	uxtb	r1, r3
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	2228      	movs	r2, #40	; 0x28
    1c9a:	5499      	strb	r1, [r3, r2]
}
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b004      	add	sp, #16
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00001b19 	.word	0x00001b19

00001ca8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	7e1b      	ldrb	r3, [r3, #24]
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	001a      	movs	r2, r3
    1cbe:	2301      	movs	r3, #1
    1cc0:	4013      	ands	r3, r2
    1cc2:	d02b      	beq.n	1d1c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	2201      	movs	r2, #1
    1cc8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	8b5b      	ldrh	r3, [r3, #26]
    1cce:	b29b      	uxth	r3, r3
    1cd0:	001a      	movs	r2, r3
    1cd2:	2302      	movs	r3, #2
    1cd4:	4013      	ands	r3, r2
    1cd6:	d004      	beq.n	1ce2 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	2225      	movs	r2, #37	; 0x25
    1cdc:	2141      	movs	r1, #65	; 0x41
    1cde:	5499      	strb	r1, [r3, r2]
    1ce0:	e01c      	b.n	1d1c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ce2:	68fb      	ldr	r3, [r7, #12]
    1ce4:	8b5b      	ldrh	r3, [r3, #26]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	001a      	movs	r2, r3
    1cea:	2304      	movs	r3, #4
    1cec:	4013      	ands	r3, r2
    1cee:	d015      	beq.n	1d1c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	2225      	movs	r2, #37	; 0x25
    1cf4:	2118      	movs	r1, #24
    1cf6:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	2200      	movs	r2, #0
    1cfc:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	7a9b      	ldrb	r3, [r3, #10]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d00a      	beq.n	1d1c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	0018      	movs	r0, r3
    1d0a:	4b13      	ldr	r3, [pc, #76]	; (1d58 <_i2c_master_async_address_response+0xb0>)
    1d0c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1d0e:	68fb      	ldr	r3, [r7, #12]
    1d10:	685b      	ldr	r3, [r3, #4]
    1d12:	22c0      	movs	r2, #192	; 0xc0
    1d14:	0292      	lsls	r2, r2, #10
    1d16:	431a      	orrs	r2, r3
    1d18:	68fb      	ldr	r3, [r7, #12]
    1d1a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	8b9b      	ldrh	r3, [r3, #28]
    1d20:	b29a      	uxth	r2, r3
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	2225      	movs	r2, #37	; 0x25
    1d2a:	5c9b      	ldrb	r3, [r3, r2]
    1d2c:	b2db      	uxtb	r3, r3
    1d2e:	2b05      	cmp	r3, #5
    1d30:	d10e      	bne.n	1d50 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	2224      	movs	r2, #36	; 0x24
    1d36:	5c9b      	ldrb	r3, [r3, r2]
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d104      	bne.n	1d48 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	0018      	movs	r0, r3
    1d42:	4b06      	ldr	r3, [pc, #24]	; (1d5c <_i2c_master_async_address_response+0xb4>)
    1d44:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1d46:	e003      	b.n	1d50 <_i2c_master_async_address_response+0xa8>
	if (module->status == STATUS_BUSY) {
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	0018      	movs	r0, r3
    1d4c:	4b04      	ldr	r3, [pc, #16]	; (1d60 <_i2c_master_async_address_response+0xb8>)
    1d4e:	4798      	blx	r3
		}
	}
}
    1d50:	46c0      	nop			; (mov r8, r8)
    1d52:	46bd      	mov	sp, r7
    1d54:	b004      	add	sp, #16
    1d56:	bd80      	pop	{r7, pc}
    1d58:	00001b19 	.word	0x00001b19
    1d5c:	00001c2d 	.word	0x00001c2d
    1d60:	00001b3d 	.word	0x00001b3d

00001d64 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b086      	sub	sp, #24
    1d68:	af00      	add	r7, sp, #0
    1d6a:	0002      	movs	r2, r0
    1d6c:	1dfb      	adds	r3, r7, #7
    1d6e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1d70:	1dfb      	adds	r3, r7, #7
    1d72:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1d74:	4b93      	ldr	r3, [pc, #588]	; (1fc4 <_i2c_master_interrupt_handler+0x260>)
    1d76:	0092      	lsls	r2, r2, #2
    1d78:	58d3      	ldr	r3, [r2, r3]
    1d7a:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d7c:	697b      	ldr	r3, [r7, #20]
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1d82:	693b      	ldr	r3, [r7, #16]
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	011b      	lsls	r3, r3, #4
    1d88:	0fdb      	lsrs	r3, r3, #31
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	001a      	movs	r2, r3
    1d8e:	230f      	movs	r3, #15
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	1e51      	subs	r1, r2, #1
    1d94:	418a      	sbcs	r2, r1
    1d96:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1d98:	230e      	movs	r3, #14
    1d9a:	18fb      	adds	r3, r7, r3
    1d9c:	697a      	ldr	r2, [r7, #20]
    1d9e:	7e52      	ldrb	r2, [r2, #25]
    1da0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1da2:	697b      	ldr	r3, [r7, #20]
    1da4:	7e1b      	ldrb	r3, [r3, #24]
    1da6:	b2da      	uxtb	r2, r3
    1da8:	230e      	movs	r3, #14
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	210e      	movs	r1, #14
    1dae:	1879      	adds	r1, r7, r1
    1db0:	7809      	ldrb	r1, [r1, #0]
    1db2:	400a      	ands	r2, r1
    1db4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1db6:	697b      	ldr	r3, [r7, #20]
    1db8:	8b5b      	ldrh	r3, [r3, #26]
    1dba:	b29b      	uxth	r3, r3
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d109      	bne.n	1dd4 <_i2c_master_interrupt_handler+0x70>
    1dc0:	697b      	ldr	r3, [r7, #20]
    1dc2:	8b9b      	ldrh	r3, [r3, #28]
    1dc4:	b29b      	uxth	r3, r3
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d004      	beq.n	1dd4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1dca:	697b      	ldr	r3, [r7, #20]
    1dcc:	0018      	movs	r0, r3
    1dce:	4b7e      	ldr	r3, [pc, #504]	; (1fc8 <_i2c_master_interrupt_handler+0x264>)
    1dd0:	4798      	blx	r3
    1dd2:	e070      	b.n	1eb6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1dd4:	697b      	ldr	r3, [r7, #20]
    1dd6:	8b5b      	ldrh	r3, [r3, #26]
    1dd8:	b29b      	uxth	r3, r3
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d039      	beq.n	1e52 <_i2c_master_interrupt_handler+0xee>
    1dde:	697b      	ldr	r3, [r7, #20]
    1de0:	8b9b      	ldrh	r3, [r3, #28]
    1de2:	b29b      	uxth	r3, r3
    1de4:	2b00      	cmp	r3, #0
    1de6:	d134      	bne.n	1e52 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1de8:	697b      	ldr	r3, [r7, #20]
    1dea:	2225      	movs	r2, #37	; 0x25
    1dec:	5c9b      	ldrb	r3, [r3, r2]
    1dee:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1df0:	2b05      	cmp	r3, #5
    1df2:	d12e      	bne.n	1e52 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1df4:	697b      	ldr	r3, [r7, #20]
    1df6:	2224      	movs	r2, #36	; 0x24
    1df8:	5c9b      	ldrb	r3, [r3, r2]
    1dfa:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d128      	bne.n	1e52 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1e00:	693b      	ldr	r3, [r7, #16]
    1e02:	2203      	movs	r2, #3
    1e04:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1e06:	697b      	ldr	r3, [r7, #20]
    1e08:	2200      	movs	r2, #0
    1e0a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1e0c:	697b      	ldr	r3, [r7, #20]
    1e0e:	2225      	movs	r2, #37	; 0x25
    1e10:	2100      	movs	r1, #0
    1e12:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1e14:	697b      	ldr	r3, [r7, #20]
    1e16:	7a9b      	ldrb	r3, [r3, #10]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d00b      	beq.n	1e34 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1e1c:	697b      	ldr	r3, [r7, #20]
    1e1e:	0018      	movs	r0, r3
    1e20:	4b6a      	ldr	r3, [pc, #424]	; (1fcc <_i2c_master_interrupt_handler+0x268>)
    1e22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1e24:	693b      	ldr	r3, [r7, #16]
    1e26:	685b      	ldr	r3, [r3, #4]
    1e28:	22c0      	movs	r2, #192	; 0xc0
    1e2a:	0292      	lsls	r2, r2, #10
    1e2c:	431a      	orrs	r2, r3
    1e2e:	693b      	ldr	r3, [r7, #16]
    1e30:	605a      	str	r2, [r3, #4]
    1e32:	e002      	b.n	1e3a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1e34:	693b      	ldr	r3, [r7, #16]
    1e36:	2201      	movs	r2, #1
    1e38:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1e3a:	230e      	movs	r3, #14
    1e3c:	18fb      	adds	r3, r7, r3
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	2201      	movs	r2, #1
    1e42:	4013      	ands	r3, r2
    1e44:	d037      	beq.n	1eb6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1e46:	697b      	ldr	r3, [r7, #20]
    1e48:	68db      	ldr	r3, [r3, #12]
    1e4a:	697a      	ldr	r2, [r7, #20]
    1e4c:	0010      	movs	r0, r2
    1e4e:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1e50:	e031      	b.n	1eb6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1e52:	697b      	ldr	r3, [r7, #20]
    1e54:	8b5b      	ldrh	r3, [r3, #26]
    1e56:	b29b      	uxth	r3, r3
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d02c      	beq.n	1eb6 <_i2c_master_interrupt_handler+0x152>
    1e5c:	697b      	ldr	r3, [r7, #20]
    1e5e:	8b9b      	ldrh	r3, [r3, #28]
    1e60:	b29b      	uxth	r3, r3
    1e62:	2b00      	cmp	r3, #0
    1e64:	d027      	beq.n	1eb6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1e66:	693b      	ldr	r3, [r7, #16]
    1e68:	8b5b      	ldrh	r3, [r3, #26]
    1e6a:	b29b      	uxth	r3, r3
    1e6c:	001a      	movs	r2, r3
    1e6e:	2320      	movs	r3, #32
    1e70:	4013      	ands	r3, r2
    1e72:	d111      	bne.n	1e98 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1e74:	230f      	movs	r3, #15
    1e76:	18fb      	adds	r3, r7, r3
    1e78:	781b      	ldrb	r3, [r3, #0]
    1e7a:	2201      	movs	r2, #1
    1e7c:	4053      	eors	r3, r2
    1e7e:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1e80:	2b00      	cmp	r3, #0
    1e82:	d104      	bne.n	1e8e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1e84:	697b      	ldr	r3, [r7, #20]
    1e86:	8b9b      	ldrh	r3, [r3, #28]
    1e88:	b29b      	uxth	r3, r3
    1e8a:	2b01      	cmp	r3, #1
    1e8c:	d004      	beq.n	1e98 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1e8e:	697b      	ldr	r3, [r7, #20]
    1e90:	2225      	movs	r2, #37	; 0x25
    1e92:	2141      	movs	r1, #65	; 0x41
    1e94:	5499      	strb	r1, [r3, r2]
    1e96:	e00e      	b.n	1eb6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1e98:	697b      	ldr	r3, [r7, #20]
    1e9a:	2224      	movs	r2, #36	; 0x24
    1e9c:	5c9b      	ldrb	r3, [r3, r2]
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d104      	bne.n	1eae <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1ea4:	697b      	ldr	r3, [r7, #20]
    1ea6:	0018      	movs	r0, r3
    1ea8:	4b49      	ldr	r3, [pc, #292]	; (1fd0 <_i2c_master_interrupt_handler+0x26c>)
    1eaa:	4798      	blx	r3
    1eac:	e003      	b.n	1eb6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1eae:	697b      	ldr	r3, [r7, #20]
    1eb0:	0018      	movs	r0, r3
    1eb2:	4b48      	ldr	r3, [pc, #288]	; (1fd4 <_i2c_master_interrupt_handler+0x270>)
    1eb4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1eb6:	697b      	ldr	r3, [r7, #20]
    1eb8:	8b5b      	ldrh	r3, [r3, #26]
    1eba:	b29b      	uxth	r3, r3
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d047      	beq.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
    1ec0:	697b      	ldr	r3, [r7, #20]
    1ec2:	8b9b      	ldrh	r3, [r3, #28]
    1ec4:	b29b      	uxth	r3, r3
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d142      	bne.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1eca:	697b      	ldr	r3, [r7, #20]
    1ecc:	2225      	movs	r2, #37	; 0x25
    1ece:	5c9b      	ldrb	r3, [r3, r2]
    1ed0:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1ed2:	2b05      	cmp	r3, #5
    1ed4:	d13c      	bne.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1ed6:	697b      	ldr	r3, [r7, #20]
    1ed8:	2224      	movs	r2, #36	; 0x24
    1eda:	5c9b      	ldrb	r3, [r3, r2]
    1edc:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d136      	bne.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1ee2:	693b      	ldr	r3, [r7, #16]
    1ee4:	7e1b      	ldrb	r3, [r3, #24]
    1ee6:	b2db      	uxtb	r3, r3
    1ee8:	001a      	movs	r2, r3
    1eea:	2302      	movs	r3, #2
    1eec:	4013      	ands	r3, r2
    1eee:	d002      	beq.n	1ef6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1ef0:	693b      	ldr	r3, [r7, #16]
    1ef2:	2202      	movs	r2, #2
    1ef4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1ef6:	693b      	ldr	r3, [r7, #16]
    1ef8:	2203      	movs	r2, #3
    1efa:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1efc:	697b      	ldr	r3, [r7, #20]
    1efe:	2200      	movs	r2, #0
    1f00:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1f02:	697b      	ldr	r3, [r7, #20]
    1f04:	2225      	movs	r2, #37	; 0x25
    1f06:	2100      	movs	r1, #0
    1f08:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1f0a:	230e      	movs	r3, #14
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	2202      	movs	r2, #2
    1f12:	4013      	ands	r3, r2
    1f14:	d00b      	beq.n	1f2e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1f16:	697b      	ldr	r3, [r7, #20]
    1f18:	2224      	movs	r2, #36	; 0x24
    1f1a:	5c9b      	ldrb	r3, [r3, r2]
    1f1c:	b2db      	uxtb	r3, r3
    1f1e:	2b01      	cmp	r3, #1
    1f20:	d105      	bne.n	1f2e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1f22:	697b      	ldr	r3, [r7, #20]
    1f24:	691b      	ldr	r3, [r3, #16]
    1f26:	697a      	ldr	r2, [r7, #20]
    1f28:	0010      	movs	r0, r2
    1f2a:	4798      	blx	r3
    1f2c:	e010      	b.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1f2e:	230e      	movs	r3, #14
    1f30:	18fb      	adds	r3, r7, r3
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	2201      	movs	r2, #1
    1f36:	4013      	ands	r3, r2
    1f38:	d00a      	beq.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1f3a:	697b      	ldr	r3, [r7, #20]
    1f3c:	2224      	movs	r2, #36	; 0x24
    1f3e:	5c9b      	ldrb	r3, [r3, r2]
    1f40:	b2db      	uxtb	r3, r3
    1f42:	2b00      	cmp	r3, #0
    1f44:	d104      	bne.n	1f50 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1f46:	697b      	ldr	r3, [r7, #20]
    1f48:	68db      	ldr	r3, [r3, #12]
    1f4a:	697a      	ldr	r2, [r7, #20]
    1f4c:	0010      	movs	r0, r2
    1f4e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	2225      	movs	r2, #37	; 0x25
    1f54:	5c9b      	ldrb	r3, [r3, r2]
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2b05      	cmp	r3, #5
    1f5a:	d02e      	beq.n	1fba <_i2c_master_interrupt_handler+0x256>
    1f5c:	697b      	ldr	r3, [r7, #20]
    1f5e:	2225      	movs	r2, #37	; 0x25
    1f60:	5c9b      	ldrb	r3, [r3, r2]
    1f62:	b2db      	uxtb	r3, r3
    1f64:	2b00      	cmp	r3, #0
    1f66:	d028      	beq.n	1fba <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1f68:	693b      	ldr	r3, [r7, #16]
    1f6a:	2203      	movs	r2, #3
    1f6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1f6e:	697b      	ldr	r3, [r7, #20]
    1f70:	2200      	movs	r2, #0
    1f72:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1f74:	697b      	ldr	r3, [r7, #20]
    1f76:	2200      	movs	r2, #0
    1f78:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1f7a:	697b      	ldr	r3, [r7, #20]
    1f7c:	2225      	movs	r2, #37	; 0x25
    1f7e:	5c9b      	ldrb	r3, [r3, r2]
    1f80:	b2db      	uxtb	r3, r3
    1f82:	2b41      	cmp	r3, #65	; 0x41
    1f84:	d00e      	beq.n	1fa4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1f86:	697b      	ldr	r3, [r7, #20]
    1f88:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d00a      	beq.n	1fa4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    1f8e:	697b      	ldr	r3, [r7, #20]
    1f90:	0018      	movs	r0, r3
    1f92:	4b0e      	ldr	r3, [pc, #56]	; (1fcc <_i2c_master_interrupt_handler+0x268>)
    1f94:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1f96:	693b      	ldr	r3, [r7, #16]
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	22e0      	movs	r2, #224	; 0xe0
    1f9c:	02d2      	lsls	r2, r2, #11
    1f9e:	431a      	orrs	r2, r3
    1fa0:	693b      	ldr	r3, [r7, #16]
    1fa2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1fa4:	230e      	movs	r3, #14
    1fa6:	18fb      	adds	r3, r7, r3
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2204      	movs	r2, #4
    1fac:	4013      	ands	r3, r2
    1fae:	d004      	beq.n	1fba <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1fb0:	697b      	ldr	r3, [r7, #20]
    1fb2:	695b      	ldr	r3, [r3, #20]
    1fb4:	697a      	ldr	r2, [r7, #20]
    1fb6:	0010      	movs	r0, r2
    1fb8:	4798      	blx	r3
		}
	}
}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	46bd      	mov	sp, r7
    1fbe:	b006      	add	sp, #24
    1fc0:	bd80      	pop	{r7, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	200000fc 	.word	0x200000fc
    1fc8:	00001ca9 	.word	0x00001ca9
    1fcc:	00001b19 	.word	0x00001b19
    1fd0:	00001c2d 	.word	0x00001c2d
    1fd4:	00001b3d 	.word	0x00001b3d

00001fd8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	b082      	sub	sp, #8
    1fdc:	af00      	add	r7, sp, #0
    1fde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1fe0:	687b      	ldr	r3, [r7, #4]
    1fe2:	2200      	movs	r2, #0
    1fe4:	701a      	strb	r2, [r3, #0]
}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	46bd      	mov	sp, r7
    1fea:	b002      	add	sp, #8
    1fec:	bd80      	pop	{r7, pc}
    1fee:	46c0      	nop			; (mov r8, r8)

00001ff0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b082      	sub	sp, #8
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	0002      	movs	r2, r0
    1ff8:	6039      	str	r1, [r7, #0]
    1ffa:	1dfb      	adds	r3, r7, #7
    1ffc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1ffe:	1dfb      	adds	r3, r7, #7
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	2b01      	cmp	r3, #1
    2004:	d00a      	beq.n	201c <STACK_SIZE+0x1c>
    2006:	2b02      	cmp	r3, #2
    2008:	d00f      	beq.n	202a <STACK_SIZE+0x2a>
    200a:	2b00      	cmp	r3, #0
    200c:	d114      	bne.n	2038 <STACK_SIZE+0x38>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    200e:	4b0e      	ldr	r3, [pc, #56]	; (2048 <STACK_SIZE+0x48>)
    2010:	4a0d      	ldr	r2, [pc, #52]	; (2048 <STACK_SIZE+0x48>)
    2012:	6991      	ldr	r1, [r2, #24]
    2014:	683a      	ldr	r2, [r7, #0]
    2016:	430a      	orrs	r2, r1
    2018:	619a      	str	r2, [r3, #24]
			break;
    201a:	e00f      	b.n	203c <STACK_SIZE+0x3c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    201c:	4b0a      	ldr	r3, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    201e:	4a0a      	ldr	r2, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    2020:	69d1      	ldr	r1, [r2, #28]
    2022:	683a      	ldr	r2, [r7, #0]
    2024:	430a      	orrs	r2, r1
    2026:	61da      	str	r2, [r3, #28]
			break;
    2028:	e008      	b.n	203c <STACK_SIZE+0x3c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    202a:	4b07      	ldr	r3, [pc, #28]	; (2048 <STACK_SIZE+0x48>)
    202c:	4a06      	ldr	r2, [pc, #24]	; (2048 <STACK_SIZE+0x48>)
    202e:	6a11      	ldr	r1, [r2, #32]
    2030:	683a      	ldr	r2, [r7, #0]
    2032:	430a      	orrs	r2, r1
    2034:	621a      	str	r2, [r3, #32]
			break;
    2036:	e001      	b.n	203c <STACK_SIZE+0x3c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2038:	2317      	movs	r3, #23
    203a:	e000      	b.n	203e <STACK_SIZE+0x3e>

	}

	return STATUS_OK;
    203c:	2300      	movs	r3, #0
}
    203e:	0018      	movs	r0, r3
    2040:	46bd      	mov	sp, r7
    2042:	b002      	add	sp, #8
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	40000400 	.word	0x40000400

0000204c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	2280      	movs	r2, #128	; 0x80
    2058:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	2200      	movs	r2, #0
    205e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2060:	687b      	ldr	r3, [r7, #4]
    2062:	2201      	movs	r2, #1
    2064:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2200      	movs	r2, #0
    206a:	70da      	strb	r2, [r3, #3]
}
    206c:	46c0      	nop			; (mov r8, r8)
    206e:	46bd      	mov	sp, r7
    2070:	b002      	add	sp, #8
    2072:	bd80      	pop	{r7, pc}

00002074 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    207c:	2300      	movs	r3, #0
    207e:	60fb      	str	r3, [r7, #12]
    2080:	e00c      	b.n	209c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    2082:	4b0a      	ldr	r3, [pc, #40]	; (20ac <_tcc_get_inst_index+0x38>)
    2084:	68fa      	ldr	r2, [r7, #12]
    2086:	0092      	lsls	r2, r2, #2
    2088:	58d2      	ldr	r2, [r2, r3]
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	429a      	cmp	r2, r3
    208e:	d102      	bne.n	2096 <_tcc_get_inst_index+0x22>
			return i;
    2090:	68fb      	ldr	r3, [r7, #12]
    2092:	b2db      	uxtb	r3, r3
    2094:	e006      	b.n	20a4 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2096:	68fb      	ldr	r3, [r7, #12]
    2098:	3301      	adds	r3, #1
    209a:	60fb      	str	r3, [r7, #12]
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	2b02      	cmp	r3, #2
    20a0:	d9ef      	bls.n	2082 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    20a2:	2300      	movs	r3, #0
}
    20a4:	0018      	movs	r0, r3
    20a6:	46bd      	mov	sp, r7
    20a8:	b004      	add	sp, #16
    20aa:	bd80      	pop	{r7, pc}
    20ac:	00008e74 	.word	0x00008e74

000020b0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    20b0:	b590      	push	{r4, r7, lr}
    20b2:	b085      	sub	sp, #20
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
    20b8:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    20ba:	230f      	movs	r3, #15
    20bc:	18fc      	adds	r4, r7, r3
    20be:	683b      	ldr	r3, [r7, #0]
    20c0:	0018      	movs	r0, r3
    20c2:	4bad      	ldr	r3, [pc, #692]	; (2378 <tcc_get_config_defaults+0x2c8>)
    20c4:	4798      	blx	r3
    20c6:	0003      	movs	r3, r0
    20c8:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	2200      	movs	r2, #0
    20ce:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    20d0:	230f      	movs	r3, #15
    20d2:	18fb      	adds	r3, r7, r3
    20d4:	781a      	ldrb	r2, [r3, #0]
    20d6:	4ba9      	ldr	r3, [pc, #676]	; (237c <tcc_get_config_defaults+0x2cc>)
    20d8:	0092      	lsls	r2, r2, #2
    20da:	58d2      	ldr	r2, [r2, r3]
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	2200      	movs	r2, #0
    20e4:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	2200      	movs	r2, #0
    20ea:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	2200      	movs	r2, #0
    20f0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	2200      	movs	r2, #0
    20f6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	2200      	movs	r2, #0
    20fc:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    20fe:	687b      	ldr	r3, [r7, #4]
    2100:	2200      	movs	r2, #0
    2102:	61da      	str	r2, [r3, #28]
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	2200      	movs	r2, #0
    2108:	621a      	str	r2, [r3, #32]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	2200      	movs	r2, #0
    210e:	625a      	str	r2, [r3, #36]	; 0x24
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	751a      	strb	r2, [r3, #20]
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	755a      	strb	r2, [r3, #21]
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	759a      	strb	r2, [r3, #22]
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	2200      	movs	r2, #0
    212c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	2200      	movs	r2, #0
    2132:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	2200      	movs	r2, #0
    2138:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	2200      	movs	r2, #0
    213e:	741a      	strb	r2, [r3, #16]
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	2200      	movs	r2, #0
    2144:	745a      	strb	r2, [r3, #17]
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	2200      	movs	r2, #0
    214a:	749a      	strb	r2, [r3, #18]
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	2200      	movs	r2, #0
    2150:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	222c      	movs	r2, #44	; 0x2c
    2156:	2100      	movs	r1, #0
    2158:	5499      	strb	r1, [r3, r2]
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	222d      	movs	r2, #45	; 0x2d
    215e:	2100      	movs	r1, #0
    2160:	5499      	strb	r1, [r3, r2]
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	222e      	movs	r2, #46	; 0x2e
    2166:	2100      	movs	r1, #0
    2168:	5499      	strb	r1, [r3, r2]
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	222f      	movs	r2, #47	; 0x2f
    216e:	2100      	movs	r1, #0
    2170:	5499      	strb	r1, [r3, r2]
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2230      	movs	r2, #48	; 0x30
    2176:	2100      	movs	r1, #0
    2178:	5499      	strb	r1, [r3, r2]
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2231      	movs	r2, #49	; 0x31
    217e:	2100      	movs	r1, #0
    2180:	5499      	strb	r1, [r3, r2]
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	2232      	movs	r2, #50	; 0x32
    2186:	2100      	movs	r1, #0
    2188:	5499      	strb	r1, [r3, r2]
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	2233      	movs	r2, #51	; 0x33
    218e:	2100      	movs	r1, #0
    2190:	5499      	strb	r1, [r3, r2]
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	2234      	movs	r2, #52	; 0x34
    2196:	2100      	movs	r1, #0
    2198:	5499      	strb	r1, [r3, r2]
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	2235      	movs	r2, #53	; 0x35
    219e:	2100      	movs	r1, #0
    21a0:	5499      	strb	r1, [r3, r2]
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2236      	movs	r2, #54	; 0x36
    21a6:	2100      	movs	r1, #0
    21a8:	5499      	strb	r1, [r3, r2]
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2237      	movs	r2, #55	; 0x37
    21ae:	2100      	movs	r1, #0
    21b0:	5499      	strb	r1, [r3, r2]
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	2238      	movs	r2, #56	; 0x38
    21b6:	2100      	movs	r1, #0
    21b8:	5499      	strb	r1, [r3, r2]
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	2239      	movs	r2, #57	; 0x39
    21be:	2100      	movs	r1, #0
    21c0:	5499      	strb	r1, [r3, r2]
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	223a      	movs	r2, #58	; 0x3a
    21c6:	2100      	movs	r1, #0
    21c8:	5499      	strb	r1, [r3, r2]
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	223b      	movs	r2, #59	; 0x3b
    21ce:	2100      	movs	r1, #0
    21d0:	5499      	strb	r1, [r3, r2]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	223c      	movs	r2, #60	; 0x3c
    21d6:	2100      	movs	r1, #0
    21d8:	5499      	strb	r1, [r3, r2]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	223d      	movs	r2, #61	; 0x3d
    21de:	2100      	movs	r1, #0
    21e0:	5499      	strb	r1, [r3, r2]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	223e      	movs	r2, #62	; 0x3e
    21e6:	2100      	movs	r1, #0
    21e8:	5499      	strb	r1, [r3, r2]
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	223f      	movs	r2, #63	; 0x3f
    21ee:	2100      	movs	r1, #0
    21f0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	2240      	movs	r2, #64	; 0x40
    21f6:	2100      	movs	r1, #0
    21f8:	5499      	strb	r1, [r3, r2]
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	2241      	movs	r2, #65	; 0x41
    21fe:	2100      	movs	r1, #0
    2200:	5499      	strb	r1, [r3, r2]
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	2242      	movs	r2, #66	; 0x42
    2206:	2100      	movs	r1, #0
    2208:	5499      	strb	r1, [r3, r2]
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	2243      	movs	r2, #67	; 0x43
    220e:	2100      	movs	r1, #0
    2210:	5499      	strb	r1, [r3, r2]
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	2244      	movs	r2, #68	; 0x44
    2216:	2100      	movs	r1, #0
    2218:	5499      	strb	r1, [r3, r2]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2245      	movs	r2, #69	; 0x45
    221e:	2100      	movs	r1, #0
    2220:	5499      	strb	r1, [r3, r2]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	2246      	movs	r2, #70	; 0x46
    2226:	2100      	movs	r1, #0
    2228:	5499      	strb	r1, [r3, r2]
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2247      	movs	r2, #71	; 0x47
    222e:	2100      	movs	r1, #0
    2230:	5499      	strb	r1, [r3, r2]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2248      	movs	r2, #72	; 0x48
    2236:	2100      	movs	r1, #0
    2238:	5499      	strb	r1, [r3, r2]
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	2249      	movs	r2, #73	; 0x49
    223e:	2100      	movs	r1, #0
    2240:	5499      	strb	r1, [r3, r2]
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	224a      	movs	r2, #74	; 0x4a
    2246:	2100      	movs	r1, #0
    2248:	5499      	strb	r1, [r3, r2]
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	224b      	movs	r2, #75	; 0x4b
    224e:	2100      	movs	r1, #0
    2250:	5499      	strb	r1, [r3, r2]
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	224c      	movs	r2, #76	; 0x4c
    2256:	2100      	movs	r1, #0
    2258:	5499      	strb	r1, [r3, r2]
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	224d      	movs	r2, #77	; 0x4d
    225e:	2100      	movs	r1, #0
    2260:	5499      	strb	r1, [r3, r2]
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	224e      	movs	r2, #78	; 0x4e
    2266:	2100      	movs	r1, #0
    2268:	5499      	strb	r1, [r3, r2]
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	224f      	movs	r2, #79	; 0x4f
    226e:	2100      	movs	r1, #0
    2270:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	2250      	movs	r2, #80	; 0x50
    2276:	2100      	movs	r1, #0
    2278:	5499      	strb	r1, [r3, r2]
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	2251      	movs	r2, #81	; 0x51
    227e:	2100      	movs	r1, #0
    2280:	5499      	strb	r1, [r3, r2]
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	2252      	movs	r2, #82	; 0x52
    2286:	2100      	movs	r1, #0
    2288:	5499      	strb	r1, [r3, r2]
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2253      	movs	r2, #83	; 0x53
    228e:	2100      	movs	r1, #0
    2290:	5499      	strb	r1, [r3, r2]
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	2254      	movs	r2, #84	; 0x54
    2296:	2100      	movs	r1, #0
    2298:	5499      	strb	r1, [r3, r2]
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	2255      	movs	r2, #85	; 0x55
    229e:	2100      	movs	r1, #0
    22a0:	5499      	strb	r1, [r3, r2]
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	2256      	movs	r2, #86	; 0x56
    22a6:	2100      	movs	r1, #0
    22a8:	5499      	strb	r1, [r3, r2]
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	2257      	movs	r2, #87	; 0x57
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	2298      	movs	r2, #152	; 0x98
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	2200      	movs	r2, #0
    22be:	659a      	str	r2, [r3, #88]	; 0x58
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	2200      	movs	r2, #0
    22c4:	679a      	str	r2, [r3, #120]	; 0x78
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	2299      	movs	r2, #153	; 0x99
    22ca:	2100      	movs	r1, #0
    22cc:	5499      	strb	r1, [r3, r2]
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	2200      	movs	r2, #0
    22d2:	65da      	str	r2, [r3, #92]	; 0x5c
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	2200      	movs	r2, #0
    22d8:	67da      	str	r2, [r3, #124]	; 0x7c
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	229a      	movs	r2, #154	; 0x9a
    22de:	2100      	movs	r1, #0
    22e0:	5499      	strb	r1, [r3, r2]
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2200      	movs	r2, #0
    22e6:	661a      	str	r2, [r3, #96]	; 0x60
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	2280      	movs	r2, #128	; 0x80
    22ec:	2100      	movs	r1, #0
    22ee:	5099      	str	r1, [r3, r2]
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	229b      	movs	r2, #155	; 0x9b
    22f4:	2100      	movs	r1, #0
    22f6:	5499      	strb	r1, [r3, r2]
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	2200      	movs	r2, #0
    22fc:	665a      	str	r2, [r3, #100]	; 0x64
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	2284      	movs	r2, #132	; 0x84
    2302:	2100      	movs	r1, #0
    2304:	5099      	str	r1, [r3, r2]
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	229c      	movs	r2, #156	; 0x9c
    230a:	2100      	movs	r1, #0
    230c:	5499      	strb	r1, [r3, r2]
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	2200      	movs	r2, #0
    2312:	669a      	str	r2, [r3, #104]	; 0x68
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	2288      	movs	r2, #136	; 0x88
    2318:	2100      	movs	r1, #0
    231a:	5099      	str	r1, [r3, r2]
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	229d      	movs	r2, #157	; 0x9d
    2320:	2100      	movs	r1, #0
    2322:	5499      	strb	r1, [r3, r2]
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	2200      	movs	r2, #0
    2328:	66da      	str	r2, [r3, #108]	; 0x6c
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	228c      	movs	r2, #140	; 0x8c
    232e:	2100      	movs	r1, #0
    2330:	5099      	str	r1, [r3, r2]
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	229e      	movs	r2, #158	; 0x9e
    2336:	2100      	movs	r1, #0
    2338:	5499      	strb	r1, [r3, r2]
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2200      	movs	r2, #0
    233e:	671a      	str	r2, [r3, #112]	; 0x70
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	2290      	movs	r2, #144	; 0x90
    2344:	2100      	movs	r1, #0
    2346:	5099      	str	r1, [r3, r2]
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	229f      	movs	r2, #159	; 0x9f
    234c:	2100      	movs	r1, #0
    234e:	5499      	strb	r1, [r3, r2]
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	2200      	movs	r2, #0
    2354:	675a      	str	r2, [r3, #116]	; 0x74
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	2294      	movs	r2, #148	; 0x94
    235a:	2100      	movs	r1, #0
    235c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	22a0      	movs	r2, #160	; 0xa0
    2362:	2101      	movs	r1, #1
    2364:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	22a1      	movs	r2, #161	; 0xa1
    236a:	2100      	movs	r1, #0
    236c:	5499      	strb	r1, [r3, r2]
}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	46bd      	mov	sp, r7
    2372:	b005      	add	sp, #20
    2374:	bd90      	pop	{r4, r7, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	00002075 	.word	0x00002075
    237c:	00008e90 	.word	0x00008e90

00002380 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2380:	b580      	push	{r7, lr}
    2382:	b086      	sub	sp, #24
    2384:	af00      	add	r7, sp, #0
    2386:	60b9      	str	r1, [r7, #8]
    2388:	607a      	str	r2, [r7, #4]
    238a:	230f      	movs	r3, #15
    238c:	18fb      	adds	r3, r7, r3
    238e:	1c02      	adds	r2, r0, #0
    2390:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    2392:	2300      	movs	r3, #0
    2394:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2396:	2300      	movs	r3, #0
    2398:	613b      	str	r3, [r7, #16]
    239a:	e01d      	b.n	23d8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    239c:	68ba      	ldr	r2, [r7, #8]
    239e:	693b      	ldr	r3, [r7, #16]
    23a0:	18d3      	adds	r3, r2, r3
    23a2:	3310      	adds	r3, #16
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	2b01      	cmp	r3, #1
    23a8:	d113      	bne.n	23d2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    23aa:	230f      	movs	r3, #15
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	4a1b      	ldr	r2, [pc, #108]	; (2420 <_tcc_build_ctrla+0xa0>)
    23b2:	5cd3      	ldrb	r3, [r2, r3]
    23b4:	1e1a      	subs	r2, r3, #0
    23b6:	693b      	ldr	r3, [r7, #16]
    23b8:	429a      	cmp	r2, r3
    23ba:	da01      	bge.n	23c0 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    23bc:	2317      	movs	r3, #23
    23be:	e02a      	b.n	2416 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    23c0:	2380      	movs	r3, #128	; 0x80
    23c2:	045a      	lsls	r2, r3, #17
    23c4:	693b      	ldr	r3, [r7, #16]
    23c6:	409a      	lsls	r2, r3
    23c8:	0013      	movs	r3, r2
    23ca:	001a      	movs	r2, r3
    23cc:	697b      	ldr	r3, [r7, #20]
    23ce:	4313      	orrs	r3, r2
    23d0:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    23d2:	693b      	ldr	r3, [r7, #16]
    23d4:	3301      	adds	r3, #1
    23d6:	613b      	str	r3, [r7, #16]
    23d8:	693b      	ldr	r3, [r7, #16]
    23da:	2b03      	cmp	r3, #3
    23dc:	ddde      	ble.n	239c <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    23de:	68bb      	ldr	r3, [r7, #8]
    23e0:	22a1      	movs	r2, #161	; 0xa1
    23e2:	5c9b      	ldrb	r3, [r3, r2]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d004      	beq.n	23f2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    23e8:	697b      	ldr	r3, [r7, #20]
    23ea:	2280      	movs	r2, #128	; 0x80
    23ec:	0112      	lsls	r2, r2, #4
    23ee:	4313      	orrs	r3, r2
    23f0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    23f2:	68bb      	ldr	r3, [r7, #8]
    23f4:	7b1b      	ldrb	r3, [r3, #12]
    23f6:	031b      	lsls	r3, r3, #12
    23f8:	001a      	movs	r2, r3
    23fa:	697b      	ldr	r3, [r7, #20]
    23fc:	4313      	orrs	r3, r2
    23fe:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2400:	68bb      	ldr	r3, [r7, #8]
    2402:	7adb      	ldrb	r3, [r3, #11]
    2404:	021b      	lsls	r3, r3, #8
    2406:	001a      	movs	r2, r3
    2408:	697b      	ldr	r3, [r7, #20]
    240a:	4313      	orrs	r3, r2
    240c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	697a      	ldr	r2, [r7, #20]
    2412:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2414:	2300      	movs	r3, #0
}
    2416:	0018      	movs	r0, r3
    2418:	46bd      	mov	sp, r7
    241a:	b006      	add	sp, #24
    241c:	bd80      	pop	{r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	00008e9c 	.word	0x00008e9c

00002424 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    2424:	b580      	push	{r7, lr}
    2426:	b086      	sub	sp, #24
    2428:	af00      	add	r7, sp, #0
    242a:	60b9      	str	r1, [r7, #8]
    242c:	607a      	str	r2, [r7, #4]
    242e:	230f      	movs	r3, #15
    2430:	18fb      	adds	r3, r7, r3
    2432:	1c02      	adds	r2, r0, #0
    2434:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    2436:	2317      	movs	r3, #23
    2438:	18fb      	adds	r3, r7, r3
    243a:	2200      	movs	r2, #0
    243c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    243e:	68bb      	ldr	r3, [r7, #8]
    2440:	7a1b      	ldrb	r3, [r3, #8]
    2442:	2b00      	cmp	r3, #0
    2444:	d007      	beq.n	2456 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2446:	2317      	movs	r3, #23
    2448:	18fb      	adds	r3, r7, r3
    244a:	2217      	movs	r2, #23
    244c:	18ba      	adds	r2, r7, r2
    244e:	7812      	ldrb	r2, [r2, #0]
    2450:	2104      	movs	r1, #4
    2452:	430a      	orrs	r2, r1
    2454:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2456:	68bb      	ldr	r3, [r7, #8]
    2458:	7a5b      	ldrb	r3, [r3, #9]
    245a:	2b01      	cmp	r3, #1
    245c:	d107      	bne.n	246e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    245e:	2317      	movs	r3, #23
    2460:	18fb      	adds	r3, r7, r3
    2462:	2217      	movs	r2, #23
    2464:	18ba      	adds	r2, r7, r2
    2466:	7812      	ldrb	r2, [r2, #0]
    2468:	2101      	movs	r1, #1
    246a:	430a      	orrs	r2, r1
    246c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	2217      	movs	r2, #23
    2472:	18ba      	adds	r2, r7, r2
    2474:	7812      	ldrb	r2, [r2, #0]
    2476:	701a      	strb	r2, [r3, #0]
}
    2478:	46c0      	nop			; (mov r8, r8)
    247a:	46bd      	mov	sp, r7
    247c:	b006      	add	sp, #24
    247e:	bd80      	pop	{r7, pc}

00002480 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2480:	b580      	push	{r7, lr}
    2482:	b088      	sub	sp, #32
    2484:	af00      	add	r7, sp, #0
    2486:	60b9      	str	r1, [r7, #8]
    2488:	607a      	str	r2, [r7, #4]
    248a:	230f      	movs	r3, #15
    248c:	18fb      	adds	r3, r7, r3
    248e:	1c02      	adds	r2, r0, #0
    2490:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    2492:	230f      	movs	r3, #15
    2494:	18fb      	adds	r3, r7, r3
    2496:	781a      	ldrb	r2, [r3, #0]
    2498:	231b      	movs	r3, #27
    249a:	18fb      	adds	r3, r7, r3
    249c:	493e      	ldr	r1, [pc, #248]	; (2598 <_tcc_build_faults+0x118>)
    249e:	5c8a      	ldrb	r2, [r1, r2]
    24a0:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    24a2:	2300      	movs	r3, #0
    24a4:	61fb      	str	r3, [r7, #28]
    24a6:	e06e      	b.n	2586 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    24a8:	69fa      	ldr	r2, [r7, #28]
    24aa:	0013      	movs	r3, r2
    24ac:	009b      	lsls	r3, r3, #2
    24ae:	189b      	adds	r3, r3, r2
    24b0:	005b      	lsls	r3, r3, #1
    24b2:	3328      	adds	r3, #40	; 0x28
    24b4:	68ba      	ldr	r2, [r7, #8]
    24b6:	18d3      	adds	r3, r2, r3
    24b8:	3304      	adds	r3, #4
    24ba:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    24bc:	697b      	ldr	r3, [r7, #20]
    24be:	7a5b      	ldrb	r3, [r3, #9]
    24c0:	221b      	movs	r2, #27
    24c2:	18ba      	adds	r2, r7, r2
    24c4:	7812      	ldrb	r2, [r2, #0]
    24c6:	429a      	cmp	r2, r3
    24c8:	d801      	bhi.n	24ce <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    24ca:	2317      	movs	r3, #23
    24cc:	e05f      	b.n	258e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    24ce:	697b      	ldr	r3, [r7, #20]
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b0f      	cmp	r3, #15
    24d4:	d901      	bls.n	24da <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    24d6:	2317      	movs	r3, #23
    24d8:	e059      	b.n	258e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    24da:	697b      	ldr	r3, [r7, #20]
    24dc:	781b      	ldrb	r3, [r3, #0]
    24de:	061b      	lsls	r3, r3, #24
    24e0:	001a      	movs	r2, r3
    24e2:	23f0      	movs	r3, #240	; 0xf0
    24e4:	051b      	lsls	r3, r3, #20
    24e6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    24e8:	697b      	ldr	r3, [r7, #20]
    24ea:	785b      	ldrb	r3, [r3, #1]
    24ec:	041b      	lsls	r3, r3, #16
    24ee:	0019      	movs	r1, r3
    24f0:	23ff      	movs	r3, #255	; 0xff
    24f2:	041b      	lsls	r3, r3, #16
    24f4:	400b      	ands	r3, r1
    24f6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    24f8:	697b      	ldr	r3, [r7, #20]
    24fa:	789b      	ldrb	r3, [r3, #2]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d001      	beq.n	2504 <_tcc_build_faults+0x84>
    2500:	2380      	movs	r3, #128	; 0x80
    2502:	e000      	b.n	2506 <_tcc_build_faults+0x86>
    2504:	2300      	movs	r3, #0
    2506:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2508:	697b      	ldr	r3, [r7, #20]
    250a:	78db      	ldrb	r3, [r3, #3]
    250c:	2b00      	cmp	r3, #0
    250e:	d001      	beq.n	2514 <_tcc_build_faults+0x94>
    2510:	2308      	movs	r3, #8
    2512:	e000      	b.n	2516 <_tcc_build_faults+0x96>
    2514:	2300      	movs	r3, #0
    2516:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2518:	697b      	ldr	r3, [r7, #20]
    251a:	791b      	ldrb	r3, [r3, #4]
    251c:	2b00      	cmp	r3, #0
    251e:	d001      	beq.n	2524 <_tcc_build_faults+0xa4>
    2520:	2310      	movs	r3, #16
    2522:	e000      	b.n	2526 <_tcc_build_faults+0xa6>
    2524:	2300      	movs	r3, #0
    2526:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    2528:	697b      	ldr	r3, [r7, #20]
    252a:	795b      	ldrb	r3, [r3, #5]
    252c:	0019      	movs	r1, r3
    252e:	2303      	movs	r3, #3
    2530:	400b      	ands	r3, r1
    2532:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2534:	697b      	ldr	r3, [r7, #20]
    2536:	799b      	ldrb	r3, [r3, #6]
    2538:	015b      	lsls	r3, r3, #5
    253a:	0019      	movs	r1, r3
    253c:	2360      	movs	r3, #96	; 0x60
    253e:	400b      	ands	r3, r1
    2540:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2542:	697b      	ldr	r3, [r7, #20]
    2544:	79db      	ldrb	r3, [r3, #7]
    2546:	021b      	lsls	r3, r3, #8
    2548:	0019      	movs	r1, r3
    254a:	23c0      	movs	r3, #192	; 0xc0
    254c:	009b      	lsls	r3, r3, #2
    254e:	400b      	ands	r3, r1
    2550:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2552:	697b      	ldr	r3, [r7, #20]
    2554:	7a1b      	ldrb	r3, [r3, #8]
    2556:	031b      	lsls	r3, r3, #12
    2558:	0019      	movs	r1, r3
    255a:	23e0      	movs	r3, #224	; 0xe0
    255c:	01db      	lsls	r3, r3, #7
    255e:	400b      	ands	r3, r1
    2560:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2562:	697b      	ldr	r3, [r7, #20]
    2564:	7a5b      	ldrb	r3, [r3, #9]
    2566:	029b      	lsls	r3, r3, #10
    2568:	0019      	movs	r1, r3
    256a:	23c0      	movs	r3, #192	; 0xc0
    256c:	011b      	lsls	r3, r3, #4
    256e:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2570:	4313      	orrs	r3, r2
    2572:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    2574:	69fb      	ldr	r3, [r7, #28]
    2576:	009b      	lsls	r3, r3, #2
    2578:	687a      	ldr	r2, [r7, #4]
    257a:	18d3      	adds	r3, r2, r3
    257c:	693a      	ldr	r2, [r7, #16]
    257e:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2580:	69fb      	ldr	r3, [r7, #28]
    2582:	3301      	adds	r3, #1
    2584:	61fb      	str	r3, [r7, #28]
    2586:	69fb      	ldr	r3, [r7, #28]
    2588:	2b01      	cmp	r3, #1
    258a:	dd8d      	ble.n	24a8 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    258c:	2300      	movs	r3, #0
}
    258e:	0018      	movs	r0, r3
    2590:	46bd      	mov	sp, r7
    2592:	b008      	add	sp, #32
    2594:	bd80      	pop	{r7, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00008e9c 	.word	0x00008e9c

0000259c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    259c:	b580      	push	{r7, lr}
    259e:	b088      	sub	sp, #32
    25a0:	af00      	add	r7, sp, #0
    25a2:	60b9      	str	r1, [r7, #8]
    25a4:	607a      	str	r2, [r7, #4]
    25a6:	230f      	movs	r3, #15
    25a8:	18fb      	adds	r3, r7, r3
    25aa:	1c02      	adds	r2, r0, #0
    25ac:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    25ae:	230f      	movs	r3, #15
    25b0:	18fb      	adds	r3, r7, r3
    25b2:	781a      	ldrb	r2, [r3, #0]
    25b4:	2317      	movs	r3, #23
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	492d      	ldr	r1, [pc, #180]	; (2670 <_tcc_build_drvctrl+0xd4>)
    25ba:	5c8a      	ldrb	r2, [r1, r2]
    25bc:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    25be:	2300      	movs	r3, #0
    25c0:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    25c2:	2300      	movs	r3, #0
    25c4:	61fb      	str	r3, [r7, #28]
    25c6:	e048      	b.n	265a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    25c8:	68ba      	ldr	r2, [r7, #8]
    25ca:	2150      	movs	r1, #80	; 0x50
    25cc:	69fb      	ldr	r3, [r7, #28]
    25ce:	18d3      	adds	r3, r2, r3
    25d0:	185b      	adds	r3, r3, r1
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d010      	beq.n	25fa <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    25d8:	2317      	movs	r3, #23
    25da:	18fb      	adds	r3, r7, r3
    25dc:	781a      	ldrb	r2, [r3, #0]
    25de:	69fb      	ldr	r3, [r7, #28]
    25e0:	429a      	cmp	r2, r3
    25e2:	d801      	bhi.n	25e8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    25e4:	2317      	movs	r3, #23
    25e6:	e03f      	b.n	2668 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    25e8:	2380      	movs	r3, #128	; 0x80
    25ea:	025a      	lsls	r2, r3, #9
    25ec:	69fb      	ldr	r3, [r7, #28]
    25ee:	409a      	lsls	r2, r3
    25f0:	0013      	movs	r3, r2
    25f2:	001a      	movs	r2, r3
    25f4:	69bb      	ldr	r3, [r7, #24]
    25f6:	4313      	orrs	r3, r2
    25f8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    25fa:	68ba      	ldr	r2, [r7, #8]
    25fc:	69fb      	ldr	r3, [r7, #28]
    25fe:	331c      	adds	r3, #28
    2600:	005b      	lsls	r3, r3, #1
    2602:	18d3      	adds	r3, r2, r3
    2604:	3309      	adds	r3, #9
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	2b00      	cmp	r3, #0
    260a:	d023      	beq.n	2654 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    260c:	2317      	movs	r3, #23
    260e:	18fb      	adds	r3, r7, r3
    2610:	781a      	ldrb	r2, [r3, #0]
    2612:	69fb      	ldr	r3, [r7, #28]
    2614:	429a      	cmp	r2, r3
    2616:	d801      	bhi.n	261c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    2618:	2317      	movs	r3, #23
    261a:	e025      	b.n	2668 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    261c:	68ba      	ldr	r2, [r7, #8]
    261e:	69fb      	ldr	r3, [r7, #28]
    2620:	331c      	adds	r3, #28
    2622:	005b      	lsls	r3, r3, #1
    2624:	18d3      	adds	r3, r2, r3
    2626:	3309      	adds	r3, #9
    2628:	781b      	ldrb	r3, [r3, #0]
    262a:	2b02      	cmp	r3, #2
    262c:	d10a      	bne.n	2644 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    262e:	2302      	movs	r3, #2
    2630:	33ff      	adds	r3, #255	; 0xff
    2632:	001a      	movs	r2, r3
    2634:	69fb      	ldr	r3, [r7, #28]
    2636:	409a      	lsls	r2, r3
    2638:	0013      	movs	r3, r2
    263a:	001a      	movs	r2, r3
    263c:	69bb      	ldr	r3, [r7, #24]
    263e:	4313      	orrs	r3, r2
    2640:	61bb      	str	r3, [r7, #24]
    2642:	e007      	b.n	2654 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2644:	2201      	movs	r2, #1
    2646:	69fb      	ldr	r3, [r7, #28]
    2648:	409a      	lsls	r2, r3
    264a:	0013      	movs	r3, r2
    264c:	001a      	movs	r2, r3
    264e:	69bb      	ldr	r3, [r7, #24]
    2650:	4313      	orrs	r3, r2
    2652:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2654:	69fb      	ldr	r3, [r7, #28]
    2656:	3301      	adds	r3, #1
    2658:	61fb      	str	r3, [r7, #28]
    265a:	69fb      	ldr	r3, [r7, #28]
    265c:	2b07      	cmp	r3, #7
    265e:	d9b3      	bls.n	25c8 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	69ba      	ldr	r2, [r7, #24]
    2664:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2666:	2300      	movs	r3, #0
}
    2668:	0018      	movs	r0, r3
    266a:	46bd      	mov	sp, r7
    266c:	b008      	add	sp, #32
    266e:	bd80      	pop	{r7, pc}
    2670:	00008ea0 	.word	0x00008ea0

00002674 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2674:	b580      	push	{r7, lr}
    2676:	b088      	sub	sp, #32
    2678:	af00      	add	r7, sp, #0
    267a:	60b9      	str	r1, [r7, #8]
    267c:	607a      	str	r2, [r7, #4]
    267e:	230f      	movs	r3, #15
    2680:	18fb      	adds	r3, r7, r3
    2682:	1c02      	adds	r2, r0, #0
    2684:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    2686:	230f      	movs	r3, #15
    2688:	18fb      	adds	r3, r7, r3
    268a:	781a      	ldrb	r2, [r3, #0]
    268c:	2317      	movs	r3, #23
    268e:	18fb      	adds	r3, r7, r3
    2690:	491d      	ldr	r1, [pc, #116]	; (2708 <_tcc_build_waves+0x94>)
    2692:	5c8a      	ldrb	r2, [r1, r2]
    2694:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    2696:	68bb      	ldr	r3, [r7, #8]
    2698:	3310      	adds	r3, #16
    269a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    269c:	693b      	ldr	r3, [r7, #16]
    269e:	7a5b      	ldrb	r3, [r3, #9]
    26a0:	011b      	lsls	r3, r3, #4
    26a2:	001a      	movs	r2, r3
    26a4:	2330      	movs	r3, #48	; 0x30
    26a6:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    26a8:	693b      	ldr	r3, [r7, #16]
    26aa:	7a1b      	ldrb	r3, [r3, #8]
    26ac:	0019      	movs	r1, r3
    26ae:	2307      	movs	r3, #7
    26b0:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    26b2:	4313      	orrs	r3, r2
    26b4:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    26b6:	2300      	movs	r3, #0
    26b8:	61fb      	str	r3, [r7, #28]
    26ba:	e01a      	b.n	26f2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    26bc:	693a      	ldr	r2, [r7, #16]
    26be:	69fb      	ldr	r3, [r7, #28]
    26c0:	18d3      	adds	r3, r2, r3
    26c2:	3304      	adds	r3, #4
    26c4:	781b      	ldrb	r3, [r3, #0]
    26c6:	2b00      	cmp	r3, #0
    26c8:	d010      	beq.n	26ec <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    26ca:	2317      	movs	r3, #23
    26cc:	18fb      	adds	r3, r7, r3
    26ce:	781a      	ldrb	r2, [r3, #0]
    26d0:	69fb      	ldr	r3, [r7, #28]
    26d2:	429a      	cmp	r2, r3
    26d4:	dc01      	bgt.n	26da <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    26d6:	2317      	movs	r3, #23
    26d8:	e012      	b.n	2700 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    26da:	2380      	movs	r3, #128	; 0x80
    26dc:	025a      	lsls	r2, r3, #9
    26de:	69fb      	ldr	r3, [r7, #28]
    26e0:	409a      	lsls	r2, r3
    26e2:	0013      	movs	r3, r2
    26e4:	001a      	movs	r2, r3
    26e6:	69bb      	ldr	r3, [r7, #24]
    26e8:	4313      	orrs	r3, r2
    26ea:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    26ec:	69fb      	ldr	r3, [r7, #28]
    26ee:	3301      	adds	r3, #1
    26f0:	61fb      	str	r3, [r7, #28]
    26f2:	69fb      	ldr	r3, [r7, #28]
    26f4:	2b03      	cmp	r3, #3
    26f6:	dde1      	ble.n	26bc <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	69ba      	ldr	r2, [r7, #24]
    26fc:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    26fe:	2300      	movs	r3, #0
}
    2700:	0018      	movs	r0, r3
    2702:	46bd      	mov	sp, r7
    2704:	b008      	add	sp, #32
    2706:	bd80      	pop	{r7, pc}
    2708:	00008e9c 	.word	0x00008e9c

0000270c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    270c:	b590      	push	{r4, r7, lr}
    270e:	b091      	sub	sp, #68	; 0x44
    2710:	af00      	add	r7, sp, #0
    2712:	60f8      	str	r0, [r7, #12]
    2714:	60b9      	str	r1, [r7, #8]
    2716:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2718:	233b      	movs	r3, #59	; 0x3b
    271a:	18fc      	adds	r4, r7, r3
    271c:	68bb      	ldr	r3, [r7, #8]
    271e:	0018      	movs	r0, r3
    2720:	4bc4      	ldr	r3, [pc, #784]	; (2a34 <tcc_init+0x328>)
    2722:	4798      	blx	r3
    2724:	0003      	movs	r3, r0
    2726:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2728:	233b      	movs	r3, #59	; 0x3b
    272a:	18fb      	adds	r3, r7, r3
    272c:	781a      	ldrb	r2, [r3, #0]
    272e:	4bc2      	ldr	r3, [pc, #776]	; (2a38 <tcc_init+0x32c>)
    2730:	0092      	lsls	r2, r2, #2
    2732:	58d3      	ldr	r3, [r2, r3]
    2734:	0019      	movs	r1, r3
    2736:	2002      	movs	r0, #2
    2738:	4bc0      	ldr	r3, [pc, #768]	; (2a3c <tcc_init+0x330>)
    273a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    273c:	68bb      	ldr	r3, [r7, #8]
    273e:	681b      	ldr	r3, [r3, #0]
    2740:	2202      	movs	r2, #2
    2742:	4013      	ands	r3, r2
    2744:	d001      	beq.n	274a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    2746:	231c      	movs	r3, #28
    2748:	e1be      	b.n	2ac8 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    274a:	68bb      	ldr	r3, [r7, #8]
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	2201      	movs	r2, #1
    2750:	4013      	ands	r3, r2
    2752:	d001      	beq.n	2758 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    2754:	231c      	movs	r3, #28
    2756:	e1b7      	b.n	2ac8 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    2758:	233b      	movs	r3, #59	; 0x3b
    275a:	18fb      	adds	r3, r7, r3
    275c:	781a      	ldrb	r2, [r3, #0]
    275e:	4bb8      	ldr	r3, [pc, #736]	; (2a40 <tcc_init+0x334>)
    2760:	0092      	lsls	r2, r2, #2
    2762:	58d3      	ldr	r3, [r2, r3]
    2764:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	681a      	ldr	r2, [r3, #0]
    276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    276c:	429a      	cmp	r2, r3
    276e:	d804      	bhi.n	277a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	685a      	ldr	r2, [r3, #4]
    2774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2776:	429a      	cmp	r2, r3
    2778:	d901      	bls.n	277e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    277a:	2317      	movs	r3, #23
    277c:	e1a4      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    277e:	2300      	movs	r3, #0
    2780:	63fb      	str	r3, [r7, #60]	; 0x3c
    2782:	e00e      	b.n	27a2 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    2784:	687a      	ldr	r2, [r7, #4]
    2786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2788:	3306      	adds	r3, #6
    278a:	009b      	lsls	r3, r3, #2
    278c:	18d3      	adds	r3, r2, r3
    278e:	3304      	adds	r3, #4
    2790:	681a      	ldr	r2, [r3, #0]
    2792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2794:	429a      	cmp	r2, r3
    2796:	d901      	bls.n	279c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    2798:	2317      	movs	r3, #23
    279a:	e195      	b.n	2ac8 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    279e:	3301      	adds	r3, #1
    27a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    27a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27a4:	2b03      	cmp	r3, #3
    27a6:	dded      	ble.n	2784 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    27a8:	2300      	movs	r3, #0
    27aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    27ac:	e019      	b.n	27e2 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	2198      	movs	r1, #152	; 0x98
    27b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27b4:	18d3      	adds	r3, r2, r3
    27b6:	185b      	adds	r3, r3, r1
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	2201      	movs	r2, #1
    27bc:	4053      	eors	r3, r2
    27be:	b2db      	uxtb	r3, r3
    27c0:	2b00      	cmp	r3, #0
    27c2:	d10a      	bne.n	27da <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    27c4:	233b      	movs	r3, #59	; 0x3b
    27c6:	18fb      	adds	r3, r7, r3
    27c8:	781b      	ldrb	r3, [r3, #0]
    27ca:	4a9e      	ldr	r2, [pc, #632]	; (2a44 <tcc_init+0x338>)
    27cc:	5cd3      	ldrb	r3, [r2, r3]
    27ce:	1e1a      	subs	r2, r3, #0
    27d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27d2:	429a      	cmp	r2, r3
    27d4:	dc02      	bgt.n	27dc <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    27d6:	2317      	movs	r3, #23
    27d8:	e176      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    27da:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    27dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27de:	3301      	adds	r3, #1
    27e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    27e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27e4:	2b07      	cmp	r3, #7
    27e6:	dde2      	ble.n	27ae <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    27e8:	2300      	movs	r3, #0
    27ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    27ec:	2333      	movs	r3, #51	; 0x33
    27ee:	18fc      	adds	r4, r7, r3
    27f0:	232c      	movs	r3, #44	; 0x2c
    27f2:	18fa      	adds	r2, r7, r3
    27f4:	6879      	ldr	r1, [r7, #4]
    27f6:	233b      	movs	r3, #59	; 0x3b
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	781b      	ldrb	r3, [r3, #0]
    27fc:	0018      	movs	r0, r3
    27fe:	4b92      	ldr	r3, [pc, #584]	; (2a48 <tcc_init+0x33c>)
    2800:	4798      	blx	r3
    2802:	0003      	movs	r3, r0
    2804:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2806:	2333      	movs	r3, #51	; 0x33
    2808:	18fb      	adds	r3, r7, r3
    280a:	781b      	ldrb	r3, [r3, #0]
    280c:	2b00      	cmp	r3, #0
    280e:	d003      	beq.n	2818 <tcc_init+0x10c>
		return status;
    2810:	2333      	movs	r3, #51	; 0x33
    2812:	18fb      	adds	r3, r7, r3
    2814:	781b      	ldrb	r3, [r3, #0]
    2816:	e157      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    2818:	232b      	movs	r3, #43	; 0x2b
    281a:	18fa      	adds	r2, r7, r3
    281c:	6879      	ldr	r1, [r7, #4]
    281e:	233b      	movs	r3, #59	; 0x3b
    2820:	18fb      	adds	r3, r7, r3
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	0018      	movs	r0, r3
    2826:	4b89      	ldr	r3, [pc, #548]	; (2a4c <tcc_init+0x340>)
    2828:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    282a:	2333      	movs	r3, #51	; 0x33
    282c:	18fc      	adds	r4, r7, r3
    282e:	2320      	movs	r3, #32
    2830:	18fa      	adds	r2, r7, r3
    2832:	6879      	ldr	r1, [r7, #4]
    2834:	233b      	movs	r3, #59	; 0x3b
    2836:	18fb      	adds	r3, r7, r3
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	0018      	movs	r0, r3
    283c:	4b84      	ldr	r3, [pc, #528]	; (2a50 <tcc_init+0x344>)
    283e:	4798      	blx	r3
    2840:	0003      	movs	r3, r0
    2842:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2844:	2333      	movs	r3, #51	; 0x33
    2846:	18fb      	adds	r3, r7, r3
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	2b00      	cmp	r3, #0
    284c:	d003      	beq.n	2856 <tcc_init+0x14a>
		return status;
    284e:	2333      	movs	r3, #51	; 0x33
    2850:	18fb      	adds	r3, r7, r3
    2852:	781b      	ldrb	r3, [r3, #0]
    2854:	e138      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    2856:	2300      	movs	r3, #0
    2858:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    285a:	2333      	movs	r3, #51	; 0x33
    285c:	18fc      	adds	r4, r7, r3
    285e:	231c      	movs	r3, #28
    2860:	18fa      	adds	r2, r7, r3
    2862:	6879      	ldr	r1, [r7, #4]
    2864:	233b      	movs	r3, #59	; 0x3b
    2866:	18fb      	adds	r3, r7, r3
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	0018      	movs	r0, r3
    286c:	4b79      	ldr	r3, [pc, #484]	; (2a54 <tcc_init+0x348>)
    286e:	4798      	blx	r3
    2870:	0003      	movs	r3, r0
    2872:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2874:	2333      	movs	r3, #51	; 0x33
    2876:	18fb      	adds	r3, r7, r3
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	2b00      	cmp	r3, #0
    287c:	d003      	beq.n	2886 <tcc_init+0x17a>
		return status;
    287e:	2333      	movs	r3, #51	; 0x33
    2880:	18fb      	adds	r3, r7, r3
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	e120      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    2886:	2333      	movs	r3, #51	; 0x33
    2888:	18fc      	adds	r4, r7, r3
    288a:	2318      	movs	r3, #24
    288c:	18fa      	adds	r2, r7, r3
    288e:	6879      	ldr	r1, [r7, #4]
    2890:	233b      	movs	r3, #59	; 0x3b
    2892:	18fb      	adds	r3, r7, r3
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	0018      	movs	r0, r3
    2898:	4b6f      	ldr	r3, [pc, #444]	; (2a58 <tcc_init+0x34c>)
    289a:	4798      	blx	r3
    289c:	0003      	movs	r3, r0
    289e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    28a0:	2333      	movs	r3, #51	; 0x33
    28a2:	18fb      	adds	r3, r7, r3
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d003      	beq.n	28b2 <tcc_init+0x1a6>
		return status;
    28aa:	2333      	movs	r3, #51	; 0x33
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	e10a      	b.n	2ac8 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    28b2:	2300      	movs	r3, #0
    28b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    28b6:	e009      	b.n	28cc <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    28b8:	68fa      	ldr	r2, [r7, #12]
    28ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28bc:	009b      	lsls	r3, r3, #2
    28be:	18d3      	adds	r3, r2, r3
    28c0:	3304      	adds	r3, #4
    28c2:	2200      	movs	r2, #0
    28c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    28c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28c8:	3301      	adds	r3, #1
    28ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    28cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28ce:	2b0b      	cmp	r3, #11
    28d0:	ddf2      	ble.n	28b8 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    28d2:	68fb      	ldr	r3, [r7, #12]
    28d4:	2200      	movs	r2, #0
    28d6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	2200      	movs	r2, #0
    28dc:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    28de:	233b      	movs	r3, #59	; 0x3b
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781a      	ldrb	r2, [r3, #0]
    28e4:	4b5d      	ldr	r3, [pc, #372]	; (2a5c <tcc_init+0x350>)
    28e6:	0092      	lsls	r2, r2, #2
    28e8:	68f9      	ldr	r1, [r7, #12]
    28ea:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    28ec:	68fb      	ldr	r3, [r7, #12]
    28ee:	68ba      	ldr	r2, [r7, #8]
    28f0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	22a0      	movs	r2, #160	; 0xa0
    28f6:	5c99      	ldrb	r1, [r3, r2]
    28f8:	68fb      	ldr	r3, [r7, #12]
    28fa:	223c      	movs	r2, #60	; 0x3c
    28fc:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    28fe:	2314      	movs	r3, #20
    2900:	18fb      	adds	r3, r7, r3
    2902:	0018      	movs	r0, r3
    2904:	4b56      	ldr	r3, [pc, #344]	; (2a60 <tcc_init+0x354>)
    2906:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	7a9a      	ldrb	r2, [r3, #10]
    290c:	2314      	movs	r3, #20
    290e:	18fb      	adds	r3, r7, r3
    2910:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    2912:	233b      	movs	r3, #59	; 0x3b
    2914:	18fb      	adds	r3, r7, r3
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	4a52      	ldr	r2, [pc, #328]	; (2a64 <tcc_init+0x358>)
    291a:	5cd3      	ldrb	r3, [r2, r3]
    291c:	2214      	movs	r2, #20
    291e:	18ba      	adds	r2, r7, r2
    2920:	0011      	movs	r1, r2
    2922:	0018      	movs	r0, r3
    2924:	4b50      	ldr	r3, [pc, #320]	; (2a68 <tcc_init+0x35c>)
    2926:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2928:	233b      	movs	r3, #59	; 0x3b
    292a:	18fb      	adds	r3, r7, r3
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	4a4d      	ldr	r2, [pc, #308]	; (2a64 <tcc_init+0x358>)
    2930:	5cd3      	ldrb	r3, [r2, r3]
    2932:	0018      	movs	r0, r3
    2934:	4b4d      	ldr	r3, [pc, #308]	; (2a6c <tcc_init+0x360>)
    2936:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2938:	2300      	movs	r3, #0
    293a:	63fb      	str	r3, [r7, #60]	; 0x3c
    293c:	e02d      	b.n	299a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    293e:	687a      	ldr	r2, [r7, #4]
    2940:	2198      	movs	r1, #152	; 0x98
    2942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2944:	18d3      	adds	r3, r2, r3
    2946:	185b      	adds	r3, r3, r1
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	2201      	movs	r2, #1
    294c:	4053      	eors	r3, r2
    294e:	b2db      	uxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d11e      	bne.n	2992 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    2954:	2310      	movs	r3, #16
    2956:	18fb      	adds	r3, r7, r3
    2958:	0018      	movs	r0, r3
    295a:	4b45      	ldr	r3, [pc, #276]	; (2a70 <tcc_init+0x364>)
    295c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    295e:	687b      	ldr	r3, [r7, #4]
    2960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2962:	321e      	adds	r2, #30
    2964:	0092      	lsls	r2, r2, #2
    2966:	58d3      	ldr	r3, [r2, r3]
    2968:	b2da      	uxtb	r2, r3
    296a:	2310      	movs	r3, #16
    296c:	18fb      	adds	r3, r7, r3
    296e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2970:	2310      	movs	r3, #16
    2972:	18fb      	adds	r3, r7, r3
    2974:	2201      	movs	r2, #1
    2976:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    297c:	3216      	adds	r2, #22
    297e:	0092      	lsls	r2, r2, #2
    2980:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2982:	b2db      	uxtb	r3, r3
    2984:	2210      	movs	r2, #16
    2986:	18ba      	adds	r2, r7, r2
    2988:	0011      	movs	r1, r2
    298a:	0018      	movs	r0, r3
    298c:	4b39      	ldr	r3, [pc, #228]	; (2a74 <tcc_init+0x368>)
    298e:	4798      	blx	r3
    2990:	e000      	b.n	2994 <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    2992:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2996:	3301      	adds	r3, #1
    2998:	63fb      	str	r3, [r7, #60]	; 0x3c
    299a:	233b      	movs	r3, #59	; 0x3b
    299c:	18fb      	adds	r3, r7, r3
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	4a28      	ldr	r2, [pc, #160]	; (2a44 <tcc_init+0x338>)
    29a2:	5cd3      	ldrb	r3, [r2, r3]
    29a4:	1e1a      	subs	r2, r3, #0
    29a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    29a8:	429a      	cmp	r2, r3
    29aa:	dcc8      	bgt.n	293e <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    29ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    29ae:	68bb      	ldr	r3, [r7, #8]
    29b0:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	68bb      	ldr	r3, [r7, #8]
    29b6:	689b      	ldr	r3, [r3, #8]
    29b8:	2204      	movs	r2, #4
    29ba:	4013      	ands	r3, r2
    29bc:	d1fa      	bne.n	29b4 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    29be:	68bb      	ldr	r3, [r7, #8]
    29c0:	22ff      	movs	r2, #255	; 0xff
    29c2:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    29c4:	46c0      	nop			; (mov r8, r8)
    29c6:	68bb      	ldr	r3, [r7, #8]
    29c8:	689b      	ldr	r3, [r3, #8]
    29ca:	2204      	movs	r2, #4
    29cc:	4013      	ands	r3, r2
    29ce:	d1fa      	bne.n	29c6 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    29d0:	232b      	movs	r3, #43	; 0x2b
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	781a      	ldrb	r2, [r3, #0]
    29d6:	68bb      	ldr	r3, [r7, #8]
    29d8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    29da:	2320      	movs	r3, #32
    29dc:	18fb      	adds	r3, r7, r3
    29de:	681a      	ldr	r2, [r3, #0]
    29e0:	68bb      	ldr	r3, [r7, #8]
    29e2:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    29e4:	2320      	movs	r3, #32
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	685a      	ldr	r2, [r3, #4]
    29ea:	68bb      	ldr	r3, [r7, #8]
    29ec:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    29ee:	69fa      	ldr	r2, [r7, #28]
    29f0:	68bb      	ldr	r3, [r7, #8]
    29f2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    29f4:	46c0      	nop			; (mov r8, r8)
    29f6:	68bb      	ldr	r3, [r7, #8]
    29f8:	689b      	ldr	r3, [r3, #8]
    29fa:	4a1f      	ldr	r2, [pc, #124]	; (2a78 <tcc_init+0x36c>)
    29fc:	4013      	ands	r3, r2
    29fe:	d1fa      	bne.n	29f6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    2a00:	69ba      	ldr	r2, [r7, #24]
    2a02:	68bb      	ldr	r3, [r7, #8]
    2a04:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	68bb      	ldr	r3, [r7, #8]
    2a0a:	689b      	ldr	r3, [r3, #8]
    2a0c:	2210      	movs	r2, #16
    2a0e:	4013      	ands	r3, r2
    2a10:	d1fa      	bne.n	2a08 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	681a      	ldr	r2, [r3, #0]
    2a16:	68bb      	ldr	r3, [r7, #8]
    2a18:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	68bb      	ldr	r3, [r7, #8]
    2a1e:	689b      	ldr	r3, [r3, #8]
    2a20:	4a16      	ldr	r2, [pc, #88]	; (2a7c <tcc_init+0x370>)
    2a22:	4013      	ands	r3, r2
    2a24:	d1fa      	bne.n	2a1c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	685a      	ldr	r2, [r3, #4]
    2a2a:	68bb      	ldr	r3, [r7, #8]
    2a2c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2a2e:	2300      	movs	r3, #0
    2a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    2a32:	e03f      	b.n	2ab4 <tcc_init+0x3a8>
    2a34:	00002075 	.word	0x00002075
    2a38:	00008e84 	.word	0x00008e84
    2a3c:	00001ff1 	.word	0x00001ff1
    2a40:	00008e90 	.word	0x00008e90
    2a44:	00008ea0 	.word	0x00008ea0
    2a48:	00002381 	.word	0x00002381
    2a4c:	00002425 	.word	0x00002425
    2a50:	00002481 	.word	0x00002481
    2a54:	0000259d 	.word	0x0000259d
    2a58:	00002675 	.word	0x00002675
    2a5c:	200000e0 	.word	0x200000e0
    2a60:	00001fd9 	.word	0x00001fd9
    2a64:	00008e80 	.word	0x00008e80
    2a68:	000049b5 	.word	0x000049b5
    2a6c:	000049f9 	.word	0x000049f9
    2a70:	0000204d 	.word	0x0000204d
    2a74:	00004ca1 	.word	0x00004ca1
    2a78:	00020040 	.word	0x00020040
    2a7c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2a80:	46c0      	nop			; (mov r8, r8)
    2a82:	68bb      	ldr	r3, [r7, #8]
    2a84:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2a86:	4912      	ldr	r1, [pc, #72]	; (2ad0 <tcc_init+0x3c4>)
    2a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a8a:	4091      	lsls	r1, r2
    2a8c:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2a8e:	4013      	ands	r3, r2
    2a90:	d1f7      	bne.n	2a82 <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    2a92:	687a      	ldr	r2, [r7, #4]
    2a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a96:	3306      	adds	r3, #6
    2a98:	009b      	lsls	r3, r3, #2
    2a9a:	18d3      	adds	r3, r2, r3
    2a9c:	3304      	adds	r3, #4
    2a9e:	681a      	ldr	r2, [r3, #0]
    2aa0:	68b9      	ldr	r1, [r7, #8]
    2aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2aa4:	3310      	adds	r3, #16
    2aa6:	009b      	lsls	r3, r3, #2
    2aa8:	18cb      	adds	r3, r1, r3
    2aaa:	3304      	adds	r3, #4
    2aac:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ab0:	3301      	adds	r3, #1
    2ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    2ab4:	233b      	movs	r3, #59	; 0x3b
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	4a06      	ldr	r2, [pc, #24]	; (2ad4 <tcc_init+0x3c8>)
    2abc:	5cd3      	ldrb	r3, [r2, r3]
    2abe:	1e1a      	subs	r2, r3, #0
    2ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ac2:	429a      	cmp	r2, r3
    2ac4:	dcdc      	bgt.n	2a80 <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    2ac6:	2300      	movs	r3, #0
}
    2ac8:	0018      	movs	r0, r3
    2aca:	46bd      	mov	sp, r7
    2acc:	b011      	add	sp, #68	; 0x44
    2ace:	bd90      	pop	{r4, r7, pc}
    2ad0:	00080100 	.word	0x00080100
    2ad4:	00008e9c 	.word	0x00008e9c

00002ad8 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2ad8:	b590      	push	{r4, r7, lr}
    2ada:	b089      	sub	sp, #36	; 0x24
    2adc:	af00      	add	r7, sp, #0
    2ade:	60f8      	str	r0, [r7, #12]
    2ae0:	0008      	movs	r0, r1
    2ae2:	607a      	str	r2, [r7, #4]
    2ae4:	0019      	movs	r1, r3
    2ae6:	230b      	movs	r3, #11
    2ae8:	18fb      	adds	r3, r7, r3
    2aea:	1c02      	adds	r2, r0, #0
    2aec:	701a      	strb	r2, [r3, #0]
    2aee:	230a      	movs	r3, #10
    2af0:	18fb      	adds	r3, r7, r3
    2af2:	1c0a      	adds	r2, r1, #0
    2af4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2af6:	68fb      	ldr	r3, [r7, #12]
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2afc:	231b      	movs	r3, #27
    2afe:	18fc      	adds	r4, r7, r3
    2b00:	69fb      	ldr	r3, [r7, #28]
    2b02:	0018      	movs	r0, r3
    2b04:	4b28      	ldr	r3, [pc, #160]	; (2ba8 <_tcc_set_compare_value+0xd0>)
    2b06:	4798      	blx	r3
    2b08:	0003      	movs	r3, r0
    2b0a:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2b0c:	231b      	movs	r3, #27
    2b0e:	18fb      	adds	r3, r7, r3
    2b10:	781b      	ldrb	r3, [r3, #0]
    2b12:	4a26      	ldr	r2, [pc, #152]	; (2bac <_tcc_set_compare_value+0xd4>)
    2b14:	5cd3      	ldrb	r3, [r2, r3]
    2b16:	220b      	movs	r2, #11
    2b18:	18ba      	adds	r2, r7, r2
    2b1a:	7812      	ldrb	r2, [r2, #0]
    2b1c:	429a      	cmp	r2, r3
    2b1e:	d301      	bcc.n	2b24 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    2b20:	2317      	movs	r3, #23
    2b22:	e03d      	b.n	2ba0 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    2b24:	231b      	movs	r3, #27
    2b26:	18fb      	adds	r3, r7, r3
    2b28:	781a      	ldrb	r2, [r3, #0]
    2b2a:	4b21      	ldr	r3, [pc, #132]	; (2bb0 <_tcc_set_compare_value+0xd8>)
    2b2c:	0092      	lsls	r2, r2, #2
    2b2e:	58d3      	ldr	r3, [r2, r3]
    2b30:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    2b32:	687a      	ldr	r2, [r7, #4]
    2b34:	697b      	ldr	r3, [r7, #20]
    2b36:	429a      	cmp	r2, r3
    2b38:	d901      	bls.n	2b3e <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    2b3a:	2317      	movs	r3, #23
    2b3c:	e030      	b.n	2ba0 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    2b3e:	230a      	movs	r3, #10
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	781b      	ldrb	r3, [r3, #0]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d014      	beq.n	2b72 <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2b48:	46c0      	nop			; (mov r8, r8)
    2b4a:	69fb      	ldr	r3, [r7, #28]
    2b4c:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    2b4e:	220b      	movs	r2, #11
    2b50:	18ba      	adds	r2, r7, r2
    2b52:	7812      	ldrb	r2, [r2, #0]
    2b54:	2180      	movs	r1, #128	; 0x80
    2b56:	0309      	lsls	r1, r1, #12
    2b58:	4091      	lsls	r1, r2
    2b5a:	000a      	movs	r2, r1

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2b5c:	4013      	ands	r3, r2
    2b5e:	d1f4      	bne.n	2b4a <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    2b60:	230b      	movs	r3, #11
    2b62:	18fb      	adds	r3, r7, r3
    2b64:	781a      	ldrb	r2, [r3, #0]
    2b66:	69fb      	ldr	r3, [r7, #28]
    2b68:	321c      	adds	r2, #28
    2b6a:	0092      	lsls	r2, r2, #2
    2b6c:	6879      	ldr	r1, [r7, #4]
    2b6e:	50d1      	str	r1, [r2, r3]
    2b70:	e015      	b.n	2b9e <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	69fb      	ldr	r3, [r7, #28]
    2b76:	689b      	ldr	r3, [r3, #8]
    2b78:	220b      	movs	r2, #11
    2b7a:	18ba      	adds	r2, r7, r2
    2b7c:	7812      	ldrb	r2, [r2, #0]
    2b7e:	2180      	movs	r1, #128	; 0x80
    2b80:	0049      	lsls	r1, r1, #1
    2b82:	4091      	lsls	r1, r2
    2b84:	000a      	movs	r2, r1
    2b86:	4013      	ands	r3, r2
    2b88:	d1f4      	bne.n	2b74 <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    2b8a:	230b      	movs	r3, #11
    2b8c:	18fb      	adds	r3, r7, r3
    2b8e:	781b      	ldrb	r3, [r3, #0]
    2b90:	69fa      	ldr	r2, [r7, #28]
    2b92:	3310      	adds	r3, #16
    2b94:	009b      	lsls	r3, r3, #2
    2b96:	18d3      	adds	r3, r2, r3
    2b98:	3304      	adds	r3, #4
    2b9a:	687a      	ldr	r2, [r7, #4]
    2b9c:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    2b9e:	2300      	movs	r3, #0
}
    2ba0:	0018      	movs	r0, r3
    2ba2:	46bd      	mov	sp, r7
    2ba4:	b009      	add	sp, #36	; 0x24
    2ba6:	bd90      	pop	{r4, r7, pc}
    2ba8:	00002075 	.word	0x00002075
    2bac:	00008e9c 	.word	0x00008e9c
    2bb0:	00008e90 	.word	0x00008e90

00002bb4 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    2bb4:	b590      	push	{r4, r7, lr}
    2bb6:	b085      	sub	sp, #20
    2bb8:	af00      	add	r7, sp, #0
    2bba:	60f8      	str	r0, [r7, #12]
    2bbc:	607a      	str	r2, [r7, #4]
    2bbe:	230b      	movs	r3, #11
    2bc0:	18fb      	adds	r3, r7, r3
    2bc2:	1c0a      	adds	r2, r1, #0
    2bc4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    2bc6:	68fb      	ldr	r3, [r7, #12]
    2bc8:	223c      	movs	r2, #60	; 0x3c
    2bca:	5c9c      	ldrb	r4, [r3, r2]
    2bcc:	687a      	ldr	r2, [r7, #4]
    2bce:	230b      	movs	r3, #11
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	7819      	ldrb	r1, [r3, #0]
    2bd4:	68f8      	ldr	r0, [r7, #12]
    2bd6:	0023      	movs	r3, r4
    2bd8:	4c03      	ldr	r4, [pc, #12]	; (2be8 <tcc_set_compare_value+0x34>)
    2bda:	47a0      	blx	r4
    2bdc:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    2bde:	0018      	movs	r0, r3
    2be0:	46bd      	mov	sp, r7
    2be2:	b005      	add	sp, #20
    2be4:	bd90      	pop	{r4, r7, pc}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	00002ad9 	.word	0x00002ad9

00002bec <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2bec:	b580      	push	{r7, lr}
    2bee:	af00      	add	r7, sp, #0
    2bf0:	2000      	movs	r0, #0
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <TCC0_Handler+0x10>)
    2bf4:	4798      	blx	r3
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	00002c29 	.word	0x00002c29

00002c00 <TCC1_Handler>:
    2c00:	b580      	push	{r7, lr}
    2c02:	af00      	add	r7, sp, #0
    2c04:	2001      	movs	r0, #1
    2c06:	4b02      	ldr	r3, [pc, #8]	; (2c10 <TCC1_Handler+0x10>)
    2c08:	4798      	blx	r3
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	46bd      	mov	sp, r7
    2c0e:	bd80      	pop	{r7, pc}
    2c10:	00002c29 	.word	0x00002c29

00002c14 <TCC2_Handler>:
    2c14:	b580      	push	{r7, lr}
    2c16:	af00      	add	r7, sp, #0
    2c18:	2002      	movs	r0, #2
    2c1a:	4b02      	ldr	r3, [pc, #8]	; (2c24 <TCC2_Handler+0x10>)
    2c1c:	4798      	blx	r3
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	46bd      	mov	sp, r7
    2c22:	bd80      	pop	{r7, pc}
    2c24:	00002c29 	.word	0x00002c29

00002c28 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b086      	sub	sp, #24
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	0002      	movs	r2, r0
    2c30:	1dfb      	adds	r3, r7, #7
    2c32:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    2c34:	1dfb      	adds	r3, r7, #7
    2c36:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2c38:	4b18      	ldr	r3, [pc, #96]	; (2c9c <_tcc_interrupt_handler+0x74>)
    2c3a:	0092      	lsls	r2, r2, #2
    2c3c:	58d3      	ldr	r3, [r2, r3]
    2c3e:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2c40:	693b      	ldr	r3, [r7, #16]
    2c42:	681b      	ldr	r3, [r3, #0]
    2c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    2c46:	693b      	ldr	r3, [r7, #16]
    2c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2c4a:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    2c4c:	693b      	ldr	r3, [r7, #16]
    2c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2c50:	4013      	ands	r3, r2
    2c52:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2c54:	2300      	movs	r3, #0
    2c56:	617b      	str	r3, [r7, #20]
    2c58:	e019      	b.n	2c8e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2c5a:	4b11      	ldr	r3, [pc, #68]	; (2ca0 <_tcc_interrupt_handler+0x78>)
    2c5c:	697a      	ldr	r2, [r7, #20]
    2c5e:	0092      	lsls	r2, r2, #2
    2c60:	58d3      	ldr	r3, [r2, r3]
    2c62:	68fa      	ldr	r2, [r7, #12]
    2c64:	4013      	ands	r3, r2
    2c66:	d00f      	beq.n	2c88 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2c68:	693a      	ldr	r2, [r7, #16]
    2c6a:	697b      	ldr	r3, [r7, #20]
    2c6c:	009b      	lsls	r3, r3, #2
    2c6e:	18d3      	adds	r3, r2, r3
    2c70:	3304      	adds	r3, #4
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	693a      	ldr	r2, [r7, #16]
    2c76:	0010      	movs	r0, r2
    2c78:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2c7a:	693b      	ldr	r3, [r7, #16]
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <_tcc_interrupt_handler+0x78>)
    2c80:	6979      	ldr	r1, [r7, #20]
    2c82:	0089      	lsls	r1, r1, #2
    2c84:	588a      	ldr	r2, [r1, r2]
    2c86:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2c88:	697b      	ldr	r3, [r7, #20]
    2c8a:	3301      	adds	r3, #1
    2c8c:	617b      	str	r3, [r7, #20]
    2c8e:	697b      	ldr	r3, [r7, #20]
    2c90:	2b0b      	cmp	r3, #11
    2c92:	dde2      	ble.n	2c5a <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    2c94:	46c0      	nop			; (mov r8, r8)
    2c96:	46bd      	mov	sp, r7
    2c98:	b006      	add	sp, #24
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	200000e0 	.word	0x200000e0
    2ca0:	00008ea4 	.word	0x00008ea4

00002ca4 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2ca4:	b580      	push	{r7, lr}
    2ca6:	af00      	add	r7, sp, #0
    2ca8:	2000      	movs	r0, #0
    2caa:	4b02      	ldr	r3, [pc, #8]	; (2cb4 <TC3_Handler+0x10>)
    2cac:	4798      	blx	r3
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	46bd      	mov	sp, r7
    2cb2:	bd80      	pop	{r7, pc}
    2cb4:	00002ce1 	.word	0x00002ce1

00002cb8 <TC4_Handler>:
    2cb8:	b580      	push	{r7, lr}
    2cba:	af00      	add	r7, sp, #0
    2cbc:	2001      	movs	r0, #1
    2cbe:	4b02      	ldr	r3, [pc, #8]	; (2cc8 <TC4_Handler+0x10>)
    2cc0:	4798      	blx	r3
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	46bd      	mov	sp, r7
    2cc6:	bd80      	pop	{r7, pc}
    2cc8:	00002ce1 	.word	0x00002ce1

00002ccc <TC5_Handler>:
    2ccc:	b580      	push	{r7, lr}
    2cce:	af00      	add	r7, sp, #0
    2cd0:	2002      	movs	r0, #2
    2cd2:	4b02      	ldr	r3, [pc, #8]	; (2cdc <TC5_Handler+0x10>)
    2cd4:	4798      	blx	r3
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	00002ce1 	.word	0x00002ce1

00002ce0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b084      	sub	sp, #16
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	0002      	movs	r2, r0
    2ce8:	1dfb      	adds	r3, r7, #7
    2cea:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    2cec:	1dfb      	adds	r3, r7, #7
    2cee:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2cf0:	4b28      	ldr	r3, [pc, #160]	; (2d94 <_tc_interrupt_handler+0xb4>)
    2cf2:	0092      	lsls	r2, r2, #2
    2cf4:	58d3      	ldr	r3, [r2, r3]
    2cf6:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2cf8:	68fb      	ldr	r3, [r7, #12]
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	7b9b      	ldrb	r3, [r3, #14]
    2cfe:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    2d00:	68fa      	ldr	r2, [r7, #12]
    2d02:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2d04:	4013      	ands	r3, r2
    2d06:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2d0c:	230b      	movs	r3, #11
    2d0e:	18fb      	adds	r3, r7, r3
    2d10:	400a      	ands	r2, r1
    2d12:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2d14:	230b      	movs	r3, #11
    2d16:	18fb      	adds	r3, r7, r3
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	2201      	movs	r2, #1
    2d1c:	4013      	ands	r3, r2
    2d1e:	d008      	beq.n	2d32 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2d20:	68fb      	ldr	r3, [r7, #12]
    2d22:	689b      	ldr	r3, [r3, #8]
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	0010      	movs	r0, r2
    2d28:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	681b      	ldr	r3, [r3, #0]
    2d2e:	2201      	movs	r2, #1
    2d30:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2d32:	230b      	movs	r3, #11
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	781b      	ldrb	r3, [r3, #0]
    2d38:	2202      	movs	r2, #2
    2d3a:	4013      	ands	r3, r2
    2d3c:	d008      	beq.n	2d50 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2d3e:	68fb      	ldr	r3, [r7, #12]
    2d40:	68db      	ldr	r3, [r3, #12]
    2d42:	68fa      	ldr	r2, [r7, #12]
    2d44:	0010      	movs	r0, r2
    2d46:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2d48:	68fb      	ldr	r3, [r7, #12]
    2d4a:	681b      	ldr	r3, [r3, #0]
    2d4c:	2202      	movs	r2, #2
    2d4e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2d50:	230b      	movs	r3, #11
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	2210      	movs	r2, #16
    2d58:	4013      	ands	r3, r2
    2d5a:	d008      	beq.n	2d6e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2d5c:	68fb      	ldr	r3, [r7, #12]
    2d5e:	691b      	ldr	r3, [r3, #16]
    2d60:	68fa      	ldr	r2, [r7, #12]
    2d62:	0010      	movs	r0, r2
    2d64:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2d66:	68fb      	ldr	r3, [r7, #12]
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	2210      	movs	r2, #16
    2d6c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2d6e:	230b      	movs	r3, #11
    2d70:	18fb      	adds	r3, r7, r3
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	2220      	movs	r2, #32
    2d76:	4013      	ands	r3, r2
    2d78:	d008      	beq.n	2d8c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	695b      	ldr	r3, [r3, #20]
    2d7e:	68fa      	ldr	r2, [r7, #12]
    2d80:	0010      	movs	r0, r2
    2d82:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2d84:	68fb      	ldr	r3, [r7, #12]
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	2220      	movs	r2, #32
    2d8a:	739a      	strb	r2, [r3, #14]
	}
}
    2d8c:	46c0      	nop			; (mov r8, r8)
    2d8e:	46bd      	mov	sp, r7
    2d90:	b004      	add	sp, #16
    2d92:	bd80      	pop	{r7, pc}
    2d94:	200000ec 	.word	0x200000ec

00002d98 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	2280      	movs	r2, #128	; 0x80
    2da4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	2200      	movs	r2, #0
    2daa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2201      	movs	r2, #1
    2db0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	2200      	movs	r2, #0
    2db6:	70da      	strb	r2, [r3, #3]
}
    2db8:	46c0      	nop			; (mov r8, r8)
    2dba:	46bd      	mov	sp, r7
    2dbc:	b002      	add	sp, #8
    2dbe:	bd80      	pop	{r7, pc}

00002dc0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b084      	sub	sp, #16
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	0002      	movs	r2, r0
    2dc8:	1dfb      	adds	r3, r7, #7
    2dca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2dcc:	230f      	movs	r3, #15
    2dce:	18fb      	adds	r3, r7, r3
    2dd0:	1dfa      	adds	r2, r7, #7
    2dd2:	7812      	ldrb	r2, [r2, #0]
    2dd4:	09d2      	lsrs	r2, r2, #7
    2dd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2dd8:	230e      	movs	r3, #14
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	1dfa      	adds	r2, r7, #7
    2dde:	7812      	ldrb	r2, [r2, #0]
    2de0:	0952      	lsrs	r2, r2, #5
    2de2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2de4:	4b0d      	ldr	r3, [pc, #52]	; (2e1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2de6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2de8:	230f      	movs	r3, #15
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d10f      	bne.n	2e12 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2df2:	230f      	movs	r3, #15
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	009b      	lsls	r3, r3, #2
    2dfa:	2210      	movs	r2, #16
    2dfc:	4694      	mov	ip, r2
    2dfe:	44bc      	add	ip, r7
    2e00:	4463      	add	r3, ip
    2e02:	3b08      	subs	r3, #8
    2e04:	681a      	ldr	r2, [r3, #0]
    2e06:	230e      	movs	r3, #14
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	01db      	lsls	r3, r3, #7
    2e0e:	18d3      	adds	r3, r2, r3
    2e10:	e000      	b.n	2e14 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2e12:	2300      	movs	r3, #0
	}
}
    2e14:	0018      	movs	r0, r3
    2e16:	46bd      	mov	sp, r7
    2e18:	b004      	add	sp, #16
    2e1a:	bd80      	pop	{r7, pc}
    2e1c:	41004400 	.word	0x41004400

00002e20 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	b082      	sub	sp, #8
    2e24:	af00      	add	r7, sp, #0
    2e26:	0002      	movs	r2, r0
    2e28:	1dfb      	adds	r3, r7, #7
    2e2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2e2c:	1dfb      	adds	r3, r7, #7
    2e2e:	781b      	ldrb	r3, [r3, #0]
    2e30:	0018      	movs	r0, r3
    2e32:	4b03      	ldr	r3, [pc, #12]	; (2e40 <port_get_group_from_gpio_pin+0x20>)
    2e34:	4798      	blx	r3
    2e36:	0003      	movs	r3, r0
}
    2e38:	0018      	movs	r0, r3
    2e3a:	46bd      	mov	sp, r7
    2e3c:	b002      	add	sp, #8
    2e3e:	bd80      	pop	{r7, pc}
    2e40:	00002dc1 	.word	0x00002dc1

00002e44 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2e44:	b580      	push	{r7, lr}
    2e46:	b084      	sub	sp, #16
    2e48:	af00      	add	r7, sp, #0
    2e4a:	0002      	movs	r2, r0
    2e4c:	1dfb      	adds	r3, r7, #7
    2e4e:	701a      	strb	r2, [r3, #0]
    2e50:	1dbb      	adds	r3, r7, #6
    2e52:	1c0a      	adds	r2, r1, #0
    2e54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2e56:	1dfb      	adds	r3, r7, #7
    2e58:	781b      	ldrb	r3, [r3, #0]
    2e5a:	0018      	movs	r0, r3
    2e5c:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <port_pin_set_output_level+0x50>)
    2e5e:	4798      	blx	r3
    2e60:	0003      	movs	r3, r0
    2e62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2e64:	1dfb      	adds	r3, r7, #7
    2e66:	781b      	ldrb	r3, [r3, #0]
    2e68:	221f      	movs	r2, #31
    2e6a:	4013      	ands	r3, r2
    2e6c:	2201      	movs	r2, #1
    2e6e:	409a      	lsls	r2, r3
    2e70:	0013      	movs	r3, r2
    2e72:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2e74:	1dbb      	adds	r3, r7, #6
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d003      	beq.n	2e84 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	68ba      	ldr	r2, [r7, #8]
    2e80:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2e82:	e002      	b.n	2e8a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e84:	68fb      	ldr	r3, [r7, #12]
    2e86:	68ba      	ldr	r2, [r7, #8]
    2e88:	615a      	str	r2, [r3, #20]
	}
}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	46bd      	mov	sp, r7
    2e8e:	b004      	add	sp, #16
    2e90:	bd80      	pop	{r7, pc}
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	00002e21 	.word	0x00002e21

00002e98 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b082      	sub	sp, #8
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2ea0:	687b      	ldr	r3, [r7, #4]
    2ea2:	2200      	movs	r2, #0
    2ea4:	701a      	strb	r2, [r3, #0]
}
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	46bd      	mov	sp, r7
    2eaa:	b002      	add	sp, #8
    2eac:	bd80      	pop	{r7, pc}
    2eae:	46c0      	nop			; (mov r8, r8)

00002eb0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	0002      	movs	r2, r0
    2eb8:	6039      	str	r1, [r7, #0]
    2eba:	1dfb      	adds	r3, r7, #7
    2ebc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2ebe:	1dfb      	adds	r3, r7, #7
    2ec0:	781b      	ldrb	r3, [r3, #0]
    2ec2:	2b01      	cmp	r3, #1
    2ec4:	d00a      	beq.n	2edc <system_apb_clock_set_mask+0x2c>
    2ec6:	2b02      	cmp	r3, #2
    2ec8:	d00f      	beq.n	2eea <system_apb_clock_set_mask+0x3a>
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d114      	bne.n	2ef8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2ece:	4b0e      	ldr	r3, [pc, #56]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2ed0:	4a0d      	ldr	r2, [pc, #52]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2ed2:	6991      	ldr	r1, [r2, #24]
    2ed4:	683a      	ldr	r2, [r7, #0]
    2ed6:	430a      	orrs	r2, r1
    2ed8:	619a      	str	r2, [r3, #24]
			break;
    2eda:	e00f      	b.n	2efc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2ede:	4a0a      	ldr	r2, [pc, #40]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2ee0:	69d1      	ldr	r1, [r2, #28]
    2ee2:	683a      	ldr	r2, [r7, #0]
    2ee4:	430a      	orrs	r2, r1
    2ee6:	61da      	str	r2, [r3, #28]
			break;
    2ee8:	e008      	b.n	2efc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2eea:	4b07      	ldr	r3, [pc, #28]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2eec:	4a06      	ldr	r2, [pc, #24]	; (2f08 <system_apb_clock_set_mask+0x58>)
    2eee:	6a11      	ldr	r1, [r2, #32]
    2ef0:	683a      	ldr	r2, [r7, #0]
    2ef2:	430a      	orrs	r2, r1
    2ef4:	621a      	str	r2, [r3, #32]
			break;
    2ef6:	e001      	b.n	2efc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2ef8:	2317      	movs	r3, #23
    2efa:	e000      	b.n	2efe <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2efc:	2300      	movs	r3, #0
}
    2efe:	0018      	movs	r0, r3
    2f00:	46bd      	mov	sp, r7
    2f02:	b002      	add	sp, #8
    2f04:	bd80      	pop	{r7, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	40000400 	.word	0x40000400

00002f0c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2f10:	4b05      	ldr	r3, [pc, #20]	; (2f28 <system_is_debugger_present+0x1c>)
    2f12:	789b      	ldrb	r3, [r3, #2]
    2f14:	b2db      	uxtb	r3, r3
    2f16:	001a      	movs	r2, r3
    2f18:	2302      	movs	r3, #2
    2f1a:	4013      	ands	r3, r2
    2f1c:	1e5a      	subs	r2, r3, #1
    2f1e:	4193      	sbcs	r3, r2
    2f20:	b2db      	uxtb	r3, r3
}
    2f22:	0018      	movs	r0, r3
    2f24:	46bd      	mov	sp, r7
    2f26:	bd80      	pop	{r7, pc}
    2f28:	41002000 	.word	0x41002000

00002f2c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b084      	sub	sp, #16
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	7e1b      	ldrb	r3, [r3, #24]
    2f3e:	b2db      	uxtb	r3, r3
    2f40:	001a      	movs	r2, r3
    2f42:	2301      	movs	r3, #1
    2f44:	4013      	ands	r3, r2
    2f46:	1e5a      	subs	r2, r3, #1
    2f48:	4193      	sbcs	r3, r2
    2f4a:	b2db      	uxtb	r3, r3
}
    2f4c:	0018      	movs	r0, r3
    2f4e:	46bd      	mov	sp, r7
    2f50:	b004      	add	sp, #16
    2f52:	bd80      	pop	{r7, pc}

00002f54 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	b084      	sub	sp, #16
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f62:	68fb      	ldr	r3, [r7, #12]
    2f64:	7e1b      	ldrb	r3, [r3, #24]
    2f66:	b2db      	uxtb	r3, r3
    2f68:	001a      	movs	r2, r3
    2f6a:	2304      	movs	r3, #4
    2f6c:	4013      	ands	r3, r2
    2f6e:	1e5a      	subs	r2, r3, #1
    2f70:	4193      	sbcs	r3, r2
    2f72:	b2db      	uxtb	r3, r3
}
    2f74:	0018      	movs	r0, r3
    2f76:	46bd      	mov	sp, r7
    2f78:	b004      	add	sp, #16
    2f7a:	bd80      	pop	{r7, pc}

00002f7c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	000a      	movs	r2, r1
    2f86:	1cbb      	adds	r3, r7, #2
    2f88:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	0018      	movs	r0, r3
    2f94:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <spi_write+0x44>)
    2f96:	4798      	blx	r3
    2f98:	0003      	movs	r3, r0
    2f9a:	001a      	movs	r2, r3
    2f9c:	2301      	movs	r3, #1
    2f9e:	4053      	eors	r3, r2
    2fa0:	b2db      	uxtb	r3, r3
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d001      	beq.n	2faa <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2fa6:	2305      	movs	r3, #5
    2fa8:	e006      	b.n	2fb8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2faa:	1cbb      	adds	r3, r7, #2
    2fac:	881b      	ldrh	r3, [r3, #0]
    2fae:	05db      	lsls	r3, r3, #23
    2fb0:	0dda      	lsrs	r2, r3, #23
    2fb2:	68fb      	ldr	r3, [r7, #12]
    2fb4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2fb6:	2300      	movs	r3, #0
}
    2fb8:	0018      	movs	r0, r3
    2fba:	46bd      	mov	sp, r7
    2fbc:	b004      	add	sp, #16
    2fbe:	bd80      	pop	{r7, pc}
    2fc0:	00002f2d 	.word	0x00002f2d

00002fc4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b084      	sub	sp, #16
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
    2fcc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	0018      	movs	r0, r3
    2fd8:	4b1b      	ldr	r3, [pc, #108]	; (3048 <spi_read+0x84>)
    2fda:	4798      	blx	r3
    2fdc:	0003      	movs	r3, r0
    2fde:	001a      	movs	r2, r3
    2fe0:	2301      	movs	r3, #1
    2fe2:	4053      	eors	r3, r2
    2fe4:	b2db      	uxtb	r3, r3
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d001      	beq.n	2fee <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2fea:	2310      	movs	r3, #16
    2fec:	e027      	b.n	303e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2fee:	230f      	movs	r3, #15
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	2200      	movs	r2, #0
    2ff4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2ff6:	68bb      	ldr	r3, [r7, #8]
    2ff8:	8b5b      	ldrh	r3, [r3, #26]
    2ffa:	b29b      	uxth	r3, r3
    2ffc:	001a      	movs	r2, r3
    2ffe:	2304      	movs	r3, #4
    3000:	4013      	ands	r3, r2
    3002:	d006      	beq.n	3012 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3004:	230f      	movs	r3, #15
    3006:	18fb      	adds	r3, r7, r3
    3008:	221e      	movs	r2, #30
    300a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    300c:	68bb      	ldr	r3, [r7, #8]
    300e:	2204      	movs	r2, #4
    3010:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	799b      	ldrb	r3, [r3, #6]
    3016:	2b01      	cmp	r3, #1
    3018:	d108      	bne.n	302c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    301a:	68bb      	ldr	r3, [r7, #8]
    301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    301e:	b29b      	uxth	r3, r3
    3020:	05db      	lsls	r3, r3, #23
    3022:	0ddb      	lsrs	r3, r3, #23
    3024:	b29a      	uxth	r2, r3
    3026:	683b      	ldr	r3, [r7, #0]
    3028:	801a      	strh	r2, [r3, #0]
    302a:	e005      	b.n	3038 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    302c:	68bb      	ldr	r3, [r7, #8]
    302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3030:	b2db      	uxtb	r3, r3
    3032:	b29a      	uxth	r2, r3
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3038:	230f      	movs	r3, #15
    303a:	18fb      	adds	r3, r7, r3
    303c:	781b      	ldrb	r3, [r3, #0]
}
    303e:	0018      	movs	r0, r3
    3040:	46bd      	mov	sp, r7
    3042:	b004      	add	sp, #16
    3044:	bd80      	pop	{r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	00002f55 	.word	0x00002f55

0000304c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    304c:	b590      	push	{r4, r7, lr}
    304e:	b093      	sub	sp, #76	; 0x4c
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
    3054:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	681b      	ldr	r3, [r3, #0]
    3060:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3062:	231c      	movs	r3, #28
    3064:	18fb      	adds	r3, r7, r3
    3066:	0018      	movs	r0, r3
    3068:	4b85      	ldr	r3, [pc, #532]	; (3280 <_spi_set_config+0x234>)
    306a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    306c:	231c      	movs	r3, #28
    306e:	18fb      	adds	r3, r7, r3
    3070:	2200      	movs	r2, #0
    3072:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    3074:	683b      	ldr	r3, [r7, #0]
    3076:	781b      	ldrb	r3, [r3, #0]
    3078:	2b00      	cmp	r3, #0
    307a:	d103      	bne.n	3084 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    307c:	231c      	movs	r3, #28
    307e:	18fb      	adds	r3, r7, r3
    3080:	2200      	movs	r2, #0
    3082:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3084:	683b      	ldr	r3, [r7, #0]
    3086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3088:	230c      	movs	r3, #12
    308a:	18fb      	adds	r3, r7, r3
    308c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    308e:	683b      	ldr	r3, [r7, #0]
    3090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3092:	230c      	movs	r3, #12
    3094:	18fb      	adds	r3, r7, r3
    3096:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3098:	683b      	ldr	r3, [r7, #0]
    309a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    309c:	230c      	movs	r3, #12
    309e:	18fb      	adds	r3, r7, r3
    30a0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    30a2:	683b      	ldr	r3, [r7, #0]
    30a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    30a6:	230c      	movs	r3, #12
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    30ac:	2347      	movs	r3, #71	; 0x47
    30ae:	18fb      	adds	r3, r7, r3
    30b0:	2200      	movs	r2, #0
    30b2:	701a      	strb	r2, [r3, #0]
    30b4:	e02c      	b.n	3110 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    30b6:	2347      	movs	r3, #71	; 0x47
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	781a      	ldrb	r2, [r3, #0]
    30bc:	230c      	movs	r3, #12
    30be:	18fb      	adds	r3, r7, r3
    30c0:	0092      	lsls	r2, r2, #2
    30c2:	58d3      	ldr	r3, [r2, r3]
    30c4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    30c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    30c8:	2b00      	cmp	r3, #0
    30ca:	d109      	bne.n	30e0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    30cc:	2347      	movs	r3, #71	; 0x47
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	781a      	ldrb	r2, [r3, #0]
    30d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    30d4:	0011      	movs	r1, r2
    30d6:	0018      	movs	r0, r3
    30d8:	4b6a      	ldr	r3, [pc, #424]	; (3284 <_spi_set_config+0x238>)
    30da:	4798      	blx	r3
    30dc:	0003      	movs	r3, r0
    30de:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    30e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    30e2:	3301      	adds	r3, #1
    30e4:	d00d      	beq.n	3102 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    30e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    30e8:	b2da      	uxtb	r2, r3
    30ea:	231c      	movs	r3, #28
    30ec:	18fb      	adds	r3, r7, r3
    30ee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    30f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    30f2:	0c1b      	lsrs	r3, r3, #16
    30f4:	b2db      	uxtb	r3, r3
    30f6:	221c      	movs	r2, #28
    30f8:	18ba      	adds	r2, r7, r2
    30fa:	0011      	movs	r1, r2
    30fc:	0018      	movs	r0, r3
    30fe:	4b62      	ldr	r3, [pc, #392]	; (3288 <_spi_set_config+0x23c>)
    3100:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3102:	2347      	movs	r3, #71	; 0x47
    3104:	18fb      	adds	r3, r7, r3
    3106:	781a      	ldrb	r2, [r3, #0]
    3108:	2347      	movs	r3, #71	; 0x47
    310a:	18fb      	adds	r3, r7, r3
    310c:	3201      	adds	r2, #1
    310e:	701a      	strb	r2, [r3, #0]
    3110:	2347      	movs	r3, #71	; 0x47
    3112:	18fb      	adds	r3, r7, r3
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	2b03      	cmp	r3, #3
    3118:	d9cd      	bls.n	30b6 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    311a:	683b      	ldr	r3, [r7, #0]
    311c:	781a      	ldrb	r2, [r3, #0]
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    3122:	683b      	ldr	r3, [r7, #0]
    3124:	7c1a      	ldrb	r2, [r3, #16]
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    312a:	683b      	ldr	r3, [r7, #0]
    312c:	7c9a      	ldrb	r2, [r3, #18]
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3132:	683b      	ldr	r3, [r7, #0]
    3134:	7d1a      	ldrb	r2, [r3, #20]
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    313a:	230a      	movs	r3, #10
    313c:	18fb      	adds	r3, r7, r3
    313e:	2200      	movs	r2, #0
    3140:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    3142:	2300      	movs	r3, #0
    3144:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    3146:	2300      	movs	r3, #0
    3148:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    314a:	683b      	ldr	r3, [r7, #0]
    314c:	781b      	ldrb	r3, [r3, #0]
    314e:	2b01      	cmp	r3, #1
    3150:	d129      	bne.n	31a6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	0018      	movs	r0, r3
    3158:	4b4c      	ldr	r3, [pc, #304]	; (328c <_spi_set_config+0x240>)
    315a:	4798      	blx	r3
    315c:	0003      	movs	r3, r0
    315e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3162:	3314      	adds	r3, #20
    3164:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3166:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3168:	b2db      	uxtb	r3, r3
    316a:	0018      	movs	r0, r3
    316c:	4b48      	ldr	r3, [pc, #288]	; (3290 <_spi_set_config+0x244>)
    316e:	4798      	blx	r3
    3170:	0003      	movs	r3, r0
    3172:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3174:	683b      	ldr	r3, [r7, #0]
    3176:	699b      	ldr	r3, [r3, #24]
    3178:	2223      	movs	r2, #35	; 0x23
    317a:	18bc      	adds	r4, r7, r2
    317c:	220a      	movs	r2, #10
    317e:	18ba      	adds	r2, r7, r2
    3180:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3182:	0018      	movs	r0, r3
    3184:	4b43      	ldr	r3, [pc, #268]	; (3294 <_spi_set_config+0x248>)
    3186:	4798      	blx	r3
    3188:	0003      	movs	r3, r0
    318a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    318c:	2323      	movs	r3, #35	; 0x23
    318e:	18fb      	adds	r3, r7, r3
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d001      	beq.n	319a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3196:	2317      	movs	r3, #23
    3198:	e06d      	b.n	3276 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    319a:	230a      	movs	r3, #10
    319c:	18fb      	adds	r3, r7, r3
    319e:	881b      	ldrh	r3, [r3, #0]
    31a0:	b2da      	uxtb	r2, r3
    31a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31a4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    31a6:	683b      	ldr	r3, [r7, #0]
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d11a      	bne.n	31e4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    31ae:	683b      	ldr	r3, [r7, #0]
    31b0:	699b      	ldr	r3, [r3, #24]
    31b2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    31b4:	683b      	ldr	r3, [r7, #0]
    31b6:	8b9b      	ldrh	r3, [r3, #28]
    31b8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    31ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    31be:	683a      	ldr	r2, [r7, #0]
    31c0:	7f92      	ldrb	r2, [r2, #30]
    31c2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    31c4:	683a      	ldr	r2, [r7, #0]
    31c6:	7fd2      	ldrb	r2, [r2, #31]
    31c8:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    31ca:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    31cc:	431a      	orrs	r2, r3
    31ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31d0:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    31d2:	683b      	ldr	r3, [r7, #0]
    31d4:	2220      	movs	r2, #32
    31d6:	5c9b      	ldrb	r3, [r3, r2]
    31d8:	2b00      	cmp	r3, #0
    31da:	d003      	beq.n	31e4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    31dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    31de:	2240      	movs	r2, #64	; 0x40
    31e0:	4313      	orrs	r3, r2
    31e2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    31e4:	683b      	ldr	r3, [r7, #0]
    31e6:	685b      	ldr	r3, [r3, #4]
    31e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    31ea:	4313      	orrs	r3, r2
    31ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    31ee:	683b      	ldr	r3, [r7, #0]
    31f0:	689b      	ldr	r3, [r3, #8]
    31f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    31f4:	4313      	orrs	r3, r2
    31f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    31f8:	683b      	ldr	r3, [r7, #0]
    31fa:	68db      	ldr	r3, [r3, #12]
    31fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    31fe:	4313      	orrs	r3, r2
    3200:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3202:	683b      	ldr	r3, [r7, #0]
    3204:	7c1b      	ldrb	r3, [r3, #16]
    3206:	001a      	movs	r2, r3
    3208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    320a:	4313      	orrs	r3, r2
    320c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    320e:	683b      	ldr	r3, [r7, #0]
    3210:	7c5b      	ldrb	r3, [r3, #17]
    3212:	2b00      	cmp	r3, #0
    3214:	d103      	bne.n	321e <_spi_set_config+0x1d2>
    3216:	4b20      	ldr	r3, [pc, #128]	; (3298 <_spi_set_config+0x24c>)
    3218:	4798      	blx	r3
    321a:	1e03      	subs	r3, r0, #0
    321c:	d003      	beq.n	3226 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    321e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3220:	2280      	movs	r2, #128	; 0x80
    3222:	4313      	orrs	r3, r2
    3224:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    3226:	683b      	ldr	r3, [r7, #0]
    3228:	7c9b      	ldrb	r3, [r3, #18]
    322a:	2b00      	cmp	r3, #0
    322c:	d004      	beq.n	3238 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3230:	2280      	movs	r2, #128	; 0x80
    3232:	0292      	lsls	r2, r2, #10
    3234:	4313      	orrs	r3, r2
    3236:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3238:	683b      	ldr	r3, [r7, #0]
    323a:	7cdb      	ldrb	r3, [r3, #19]
    323c:	2b00      	cmp	r3, #0
    323e:	d004      	beq.n	324a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3242:	2280      	movs	r2, #128	; 0x80
    3244:	0092      	lsls	r2, r2, #2
    3246:	4313      	orrs	r3, r2
    3248:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    324a:	683b      	ldr	r3, [r7, #0]
    324c:	7d1b      	ldrb	r3, [r3, #20]
    324e:	2b00      	cmp	r3, #0
    3250:	d004      	beq.n	325c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3254:	2280      	movs	r2, #128	; 0x80
    3256:	0192      	lsls	r2, r2, #6
    3258:	4313      	orrs	r3, r2
    325a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    325e:	681a      	ldr	r2, [r3, #0]
    3260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3262:	431a      	orrs	r2, r3
    3264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3266:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    326a:	685a      	ldr	r2, [r3, #4]
    326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    326e:	431a      	orrs	r2, r3
    3270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3272:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3274:	2300      	movs	r3, #0
}
    3276:	0018      	movs	r0, r3
    3278:	46bd      	mov	sp, r7
    327a:	b013      	add	sp, #76	; 0x4c
    327c:	bd90      	pop	{r4, r7, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00002d99 	.word	0x00002d99
    3284:	00003c01 	.word	0x00003c01
    3288:	00004ca1 	.word	0x00004ca1
    328c:	00003dbd 	.word	0x00003dbd
    3290:	00004ad9 	.word	0x00004ad9
    3294:	00003af9 	.word	0x00003af9
    3298:	00002f0d 	.word	0x00002f0d

0000329c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    329c:	b590      	push	{r4, r7, lr}
    329e:	b08b      	sub	sp, #44	; 0x2c
    32a0:	af00      	add	r7, sp, #0
    32a2:	60f8      	str	r0, [r7, #12]
    32a4:	60b9      	str	r1, [r7, #8]
    32a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    32a8:	68fb      	ldr	r3, [r7, #12]
    32aa:	68ba      	ldr	r2, [r7, #8]
    32ac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    32ae:	68fb      	ldr	r3, [r7, #12]
    32b0:	681b      	ldr	r3, [r3, #0]
    32b2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    32b4:	6a3b      	ldr	r3, [r7, #32]
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	2202      	movs	r2, #2
    32ba:	4013      	ands	r3, r2
    32bc:	d001      	beq.n	32c2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    32be:	231c      	movs	r3, #28
    32c0:	e0a6      	b.n	3410 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    32c2:	6a3b      	ldr	r3, [r7, #32]
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	2201      	movs	r2, #1
    32c8:	4013      	ands	r3, r2
    32ca:	d001      	beq.n	32d0 <spi_init+0x34>
		return STATUS_BUSY;
    32cc:	2305      	movs	r3, #5
    32ce:	e09f      	b.n	3410 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    32d0:	68fb      	ldr	r3, [r7, #12]
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	0018      	movs	r0, r3
    32d6:	4b50      	ldr	r3, [pc, #320]	; (3418 <spi_init+0x17c>)
    32d8:	4798      	blx	r3
    32da:	0003      	movs	r3, r0
    32dc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    32de:	69fb      	ldr	r3, [r7, #28]
    32e0:	3302      	adds	r3, #2
    32e2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32e4:	69fb      	ldr	r3, [r7, #28]
    32e6:	3314      	adds	r3, #20
    32e8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    32ea:	2201      	movs	r2, #1
    32ec:	69bb      	ldr	r3, [r7, #24]
    32ee:	409a      	lsls	r2, r3
    32f0:	0013      	movs	r3, r2
    32f2:	0019      	movs	r1, r3
    32f4:	2002      	movs	r0, #2
    32f6:	4b49      	ldr	r3, [pc, #292]	; (341c <spi_init+0x180>)
    32f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    32fa:	2310      	movs	r3, #16
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	0018      	movs	r0, r3
    3300:	4b47      	ldr	r3, [pc, #284]	; (3420 <spi_init+0x184>)
    3302:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	2224      	movs	r2, #36	; 0x24
    3308:	5c9a      	ldrb	r2, [r3, r2]
    330a:	2310      	movs	r3, #16
    330c:	18fb      	adds	r3, r7, r3
    330e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3310:	697b      	ldr	r3, [r7, #20]
    3312:	b2db      	uxtb	r3, r3
    3314:	2210      	movs	r2, #16
    3316:	18ba      	adds	r2, r7, r2
    3318:	0011      	movs	r1, r2
    331a:	0018      	movs	r0, r3
    331c:	4b41      	ldr	r3, [pc, #260]	; (3424 <spi_init+0x188>)
    331e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3320:	697b      	ldr	r3, [r7, #20]
    3322:	b2db      	uxtb	r3, r3
    3324:	0018      	movs	r0, r3
    3326:	4b40      	ldr	r3, [pc, #256]	; (3428 <spi_init+0x18c>)
    3328:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	2224      	movs	r2, #36	; 0x24
    332e:	5c9b      	ldrb	r3, [r3, r2]
    3330:	2100      	movs	r1, #0
    3332:	0018      	movs	r0, r3
    3334:	4b3d      	ldr	r3, [pc, #244]	; (342c <spi_init+0x190>)
    3336:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	781b      	ldrb	r3, [r3, #0]
    333c:	2b01      	cmp	r3, #1
    333e:	d105      	bne.n	334c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3340:	6a3b      	ldr	r3, [r7, #32]
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	220c      	movs	r2, #12
    3346:	431a      	orrs	r2, r3
    3348:	6a3b      	ldr	r3, [r7, #32]
    334a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d105      	bne.n	3360 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3354:	6a3b      	ldr	r3, [r7, #32]
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2208      	movs	r2, #8
    335a:	431a      	orrs	r2, r3
    335c:	6a3b      	ldr	r3, [r7, #32]
    335e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3360:	2327      	movs	r3, #39	; 0x27
    3362:	18fb      	adds	r3, r7, r3
    3364:	2200      	movs	r2, #0
    3366:	701a      	strb	r2, [r3, #0]
    3368:	e010      	b.n	338c <spi_init+0xf0>
		module->callback[i]        = NULL;
    336a:	2327      	movs	r3, #39	; 0x27
    336c:	18fb      	adds	r3, r7, r3
    336e:	781b      	ldrb	r3, [r3, #0]
    3370:	68fa      	ldr	r2, [r7, #12]
    3372:	3302      	adds	r3, #2
    3374:	009b      	lsls	r3, r3, #2
    3376:	18d3      	adds	r3, r2, r3
    3378:	3304      	adds	r3, #4
    337a:	2200      	movs	r2, #0
    337c:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    337e:	2327      	movs	r3, #39	; 0x27
    3380:	18fb      	adds	r3, r7, r3
    3382:	781a      	ldrb	r2, [r3, #0]
    3384:	2327      	movs	r3, #39	; 0x27
    3386:	18fb      	adds	r3, r7, r3
    3388:	3201      	adds	r2, #1
    338a:	701a      	strb	r2, [r3, #0]
    338c:	2327      	movs	r3, #39	; 0x27
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2b06      	cmp	r3, #6
    3394:	d9e9      	bls.n	336a <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3396:	68fb      	ldr	r3, [r7, #12]
    3398:	2200      	movs	r2, #0
    339a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    339c:	68fb      	ldr	r3, [r7, #12]
    339e:	2200      	movs	r2, #0
    33a0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    33a2:	68fb      	ldr	r3, [r7, #12]
    33a4:	2200      	movs	r2, #0
    33a6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    33a8:	68fb      	ldr	r3, [r7, #12]
    33aa:	2200      	movs	r2, #0
    33ac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    33ae:	68fb      	ldr	r3, [r7, #12]
    33b0:	2236      	movs	r2, #54	; 0x36
    33b2:	2100      	movs	r1, #0
    33b4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    33b6:	68fb      	ldr	r3, [r7, #12]
    33b8:	2237      	movs	r2, #55	; 0x37
    33ba:	2100      	movs	r1, #0
    33bc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    33be:	68fb      	ldr	r3, [r7, #12]
    33c0:	2238      	movs	r2, #56	; 0x38
    33c2:	2100      	movs	r1, #0
    33c4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    33c6:	68fb      	ldr	r3, [r7, #12]
    33c8:	2203      	movs	r2, #3
    33ca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    33cc:	68fb      	ldr	r3, [r7, #12]
    33ce:	2200      	movs	r2, #0
    33d0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    33d2:	68fb      	ldr	r3, [r7, #12]
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	2213      	movs	r2, #19
    33d8:	18bc      	adds	r4, r7, r2
    33da:	0018      	movs	r0, r3
    33dc:	4b0e      	ldr	r3, [pc, #56]	; (3418 <spi_init+0x17c>)
    33de:	4798      	blx	r3
    33e0:	0003      	movs	r3, r0
    33e2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    33e4:	4a12      	ldr	r2, [pc, #72]	; (3430 <spi_init+0x194>)
    33e6:	2313      	movs	r3, #19
    33e8:	18fb      	adds	r3, r7, r3
    33ea:	781b      	ldrb	r3, [r3, #0]
    33ec:	0011      	movs	r1, r2
    33ee:	0018      	movs	r0, r3
    33f0:	4b10      	ldr	r3, [pc, #64]	; (3434 <spi_init+0x198>)
    33f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    33f4:	2313      	movs	r3, #19
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	781a      	ldrb	r2, [r3, #0]
    33fa:	4b0f      	ldr	r3, [pc, #60]	; (3438 <spi_init+0x19c>)
    33fc:	0092      	lsls	r2, r2, #2
    33fe:	68f9      	ldr	r1, [r7, #12]
    3400:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    3402:	687a      	ldr	r2, [r7, #4]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	0011      	movs	r1, r2
    3408:	0018      	movs	r0, r3
    340a:	4b0c      	ldr	r3, [pc, #48]	; (343c <spi_init+0x1a0>)
    340c:	4798      	blx	r3
    340e:	0003      	movs	r3, r0
}
    3410:	0018      	movs	r0, r3
    3412:	46bd      	mov	sp, r7
    3414:	b00b      	add	sp, #44	; 0x2c
    3416:	bd90      	pop	{r4, r7, pc}
    3418:	00003dbd 	.word	0x00003dbd
    341c:	00002eb1 	.word	0x00002eb1
    3420:	00002e99 	.word	0x00002e99
    3424:	000049b5 	.word	0x000049b5
    3428:	000049f9 	.word	0x000049f9
    342c:	00003b75 	.word	0x00003b75
    3430:	000037d5 	.word	0x000037d5
    3434:	00003e21 	.word	0x00003e21
    3438:	200000fc 	.word	0x200000fc
    343c:	0000304d 	.word	0x0000304d

00003440 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    3440:	b590      	push	{r4, r7, lr}
    3442:	b087      	sub	sp, #28
    3444:	af00      	add	r7, sp, #0
    3446:	60f8      	str	r0, [r7, #12]
    3448:	607a      	str	r2, [r7, #4]
    344a:	230a      	movs	r3, #10
    344c:	18fb      	adds	r3, r7, r3
    344e:	1c0a      	adds	r2, r1, #0
    3450:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	79db      	ldrb	r3, [r3, #7]
    3456:	2201      	movs	r2, #1
    3458:	4053      	eors	r3, r2
    345a:	b2db      	uxtb	r3, r3
    345c:	2b00      	cmp	r3, #0
    345e:	d001      	beq.n	3464 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    3460:	231c      	movs	r3, #28
    3462:	e084      	b.n	356e <spi_transceive_wait+0x12e>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	2238      	movs	r2, #56	; 0x38
    3468:	5c9b      	ldrb	r3, [r3, r2]
    346a:	b2db      	uxtb	r3, r3
    346c:	2b05      	cmp	r3, #5
    346e:	d101      	bne.n	3474 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3470:	2305      	movs	r3, #5
    3472:	e07c      	b.n	356e <spi_transceive_wait+0x12e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    3474:	2315      	movs	r3, #21
    3476:	18fb      	adds	r3, r7, r3
    3478:	2200      	movs	r2, #0
    347a:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	795b      	ldrb	r3, [r3, #5]
    3480:	2b00      	cmp	r3, #0
    3482:	d121      	bne.n	34c8 <spi_transceive_wait+0x88>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3484:	2316      	movs	r3, #22
    3486:	18fb      	adds	r3, r7, r3
    3488:	2200      	movs	r2, #0
    348a:	801a      	strh	r2, [r3, #0]
    348c:	e014      	b.n	34b8 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	0018      	movs	r0, r3
    3492:	4b39      	ldr	r3, [pc, #228]	; (3578 <spi_transceive_wait+0x138>)
    3494:	4798      	blx	r3
    3496:	1e03      	subs	r3, r0, #0
    3498:	d115      	bne.n	34c6 <spi_transceive_wait+0x86>
				break;
			} else if (j == SPI_TIMEOUT) {
    349a:	2316      	movs	r3, #22
    349c:	18fb      	adds	r3, r7, r3
    349e:	881b      	ldrh	r3, [r3, #0]
    34a0:	4a36      	ldr	r2, [pc, #216]	; (357c <spi_transceive_wait+0x13c>)
    34a2:	4293      	cmp	r3, r2
    34a4:	d101      	bne.n	34aa <spi_transceive_wait+0x6a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    34a6:	2312      	movs	r3, #18
    34a8:	e061      	b.n	356e <spi_transceive_wait+0x12e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    34aa:	2316      	movs	r3, #22
    34ac:	18fb      	adds	r3, r7, r3
    34ae:	881a      	ldrh	r2, [r3, #0]
    34b0:	2316      	movs	r3, #22
    34b2:	18fb      	adds	r3, r7, r3
    34b4:	3201      	adds	r2, #1
    34b6:	801a      	strh	r2, [r3, #0]
    34b8:	2316      	movs	r3, #22
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	881b      	ldrh	r3, [r3, #0]
    34be:	4a2f      	ldr	r2, [pc, #188]	; (357c <spi_transceive_wait+0x13c>)
    34c0:	4293      	cmp	r3, r2
    34c2:	d9e4      	bls.n	348e <spi_transceive_wait+0x4e>
    34c4:	e000      	b.n	34c8 <spi_transceive_wait+0x88>
			if (spi_is_ready_to_write(module)) {
				break;
    34c6:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	68fb      	ldr	r3, [r7, #12]
    34cc:	0018      	movs	r0, r3
    34ce:	4b2a      	ldr	r3, [pc, #168]	; (3578 <spi_transceive_wait+0x138>)
    34d0:	4798      	blx	r3
    34d2:	0003      	movs	r3, r0
    34d4:	001a      	movs	r2, r3
    34d6:	2301      	movs	r3, #1
    34d8:	4053      	eors	r3, r2
    34da:	b2db      	uxtb	r3, r3
    34dc:	2b00      	cmp	r3, #0
    34de:	d1f4      	bne.n	34ca <spi_transceive_wait+0x8a>
	}

	/* Write data */
	spi_write(module, tx_data);
    34e0:	230a      	movs	r3, #10
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	881a      	ldrh	r2, [r3, #0]
    34e6:	68fb      	ldr	r3, [r7, #12]
    34e8:	0011      	movs	r1, r2
    34ea:	0018      	movs	r0, r3
    34ec:	4b24      	ldr	r3, [pc, #144]	; (3580 <spi_transceive_wait+0x140>)
    34ee:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    34f0:	68fb      	ldr	r3, [r7, #12]
    34f2:	795b      	ldrb	r3, [r3, #5]
    34f4:	2b00      	cmp	r3, #0
    34f6:	d121      	bne.n	353c <spi_transceive_wait+0xfc>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    34f8:	2316      	movs	r3, #22
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	2200      	movs	r2, #0
    34fe:	801a      	strh	r2, [r3, #0]
    3500:	e014      	b.n	352c <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    3502:	68fb      	ldr	r3, [r7, #12]
    3504:	0018      	movs	r0, r3
    3506:	4b1f      	ldr	r3, [pc, #124]	; (3584 <spi_transceive_wait+0x144>)
    3508:	4798      	blx	r3
    350a:	1e03      	subs	r3, r0, #0
    350c:	d115      	bne.n	353a <spi_transceive_wait+0xfa>
				break;
			} else if (j == SPI_TIMEOUT) {
    350e:	2316      	movs	r3, #22
    3510:	18fb      	adds	r3, r7, r3
    3512:	881b      	ldrh	r3, [r3, #0]
    3514:	4a19      	ldr	r2, [pc, #100]	; (357c <spi_transceive_wait+0x13c>)
    3516:	4293      	cmp	r3, r2
    3518:	d101      	bne.n	351e <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    351a:	2312      	movs	r3, #18
    351c:	e027      	b.n	356e <spi_transceive_wait+0x12e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    351e:	2316      	movs	r3, #22
    3520:	18fb      	adds	r3, r7, r3
    3522:	881a      	ldrh	r2, [r3, #0]
    3524:	2316      	movs	r3, #22
    3526:	18fb      	adds	r3, r7, r3
    3528:	3201      	adds	r2, #1
    352a:	801a      	strh	r2, [r3, #0]
    352c:	2316      	movs	r3, #22
    352e:	18fb      	adds	r3, r7, r3
    3530:	881b      	ldrh	r3, [r3, #0]
    3532:	4a12      	ldr	r2, [pc, #72]	; (357c <spi_transceive_wait+0x13c>)
    3534:	4293      	cmp	r3, r2
    3536:	d9e4      	bls.n	3502 <spi_transceive_wait+0xc2>
    3538:	e000      	b.n	353c <spi_transceive_wait+0xfc>
			if (spi_is_ready_to_read(module)) {
				break;
    353a:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    353c:	46c0      	nop			; (mov r8, r8)
    353e:	68fb      	ldr	r3, [r7, #12]
    3540:	0018      	movs	r0, r3
    3542:	4b10      	ldr	r3, [pc, #64]	; (3584 <spi_transceive_wait+0x144>)
    3544:	4798      	blx	r3
    3546:	0003      	movs	r3, r0
    3548:	001a      	movs	r2, r3
    354a:	2301      	movs	r3, #1
    354c:	4053      	eors	r3, r2
    354e:	b2db      	uxtb	r3, r3
    3550:	2b00      	cmp	r3, #0
    3552:	d1f4      	bne.n	353e <spi_transceive_wait+0xfe>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    3554:	2315      	movs	r3, #21
    3556:	18fc      	adds	r4, r7, r3
    3558:	687a      	ldr	r2, [r7, #4]
    355a:	68fb      	ldr	r3, [r7, #12]
    355c:	0011      	movs	r1, r2
    355e:	0018      	movs	r0, r3
    3560:	4b09      	ldr	r3, [pc, #36]	; (3588 <spi_transceive_wait+0x148>)
    3562:	4798      	blx	r3
    3564:	0003      	movs	r3, r0
    3566:	7023      	strb	r3, [r4, #0]

	return retval;
    3568:	2315      	movs	r3, #21
    356a:	18fb      	adds	r3, r7, r3
    356c:	781b      	ldrb	r3, [r3, #0]
}
    356e:	0018      	movs	r0, r3
    3570:	46bd      	mov	sp, r7
    3572:	b007      	add	sp, #28
    3574:	bd90      	pop	{r4, r7, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	00002f2d 	.word	0x00002f2d
    357c:	00002710 	.word	0x00002710
    3580:	00002f7d 	.word	0x00002f7d
    3584:	00002f55 	.word	0x00002f55
    3588:	00002fc5 	.word	0x00002fc5

0000358c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    358c:	b580      	push	{r7, lr}
    358e:	b086      	sub	sp, #24
    3590:	af00      	add	r7, sp, #0
    3592:	60f8      	str	r0, [r7, #12]
    3594:	60b9      	str	r1, [r7, #8]
    3596:	1dfb      	adds	r3, r7, #7
    3598:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    359a:	68fb      	ldr	r3, [r7, #12]
    359c:	795b      	ldrb	r3, [r3, #5]
    359e:	2b01      	cmp	r3, #1
    35a0:	d001      	beq.n	35a6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    35a2:	2315      	movs	r3, #21
    35a4:	e05c      	b.n	3660 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    35a6:	68fb      	ldr	r3, [r7, #12]
    35a8:	7a1b      	ldrb	r3, [r3, #8]
    35aa:	2201      	movs	r2, #1
    35ac:	4053      	eors	r3, r2
    35ae:	b2db      	uxtb	r3, r3
    35b0:	2b00      	cmp	r3, #0
    35b2:	d054      	beq.n	365e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    35b4:	1dfb      	adds	r3, r7, #7
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d04a      	beq.n	3652 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    35bc:	68bb      	ldr	r3, [r7, #8]
    35be:	785b      	ldrb	r3, [r3, #1]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d03f      	beq.n	3644 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    35c4:	68fb      	ldr	r3, [r7, #12]
    35c6:	0018      	movs	r0, r3
    35c8:	4b27      	ldr	r3, [pc, #156]	; (3668 <spi_select_slave+0xdc>)
    35ca:	4798      	blx	r3
    35cc:	0003      	movs	r3, r0
    35ce:	001a      	movs	r2, r3
    35d0:	2301      	movs	r3, #1
    35d2:	4053      	eors	r3, r2
    35d4:	b2db      	uxtb	r3, r3
    35d6:	2b00      	cmp	r3, #0
    35d8:	d007      	beq.n	35ea <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    35da:	68bb      	ldr	r3, [r7, #8]
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	2101      	movs	r1, #1
    35e0:	0018      	movs	r0, r3
    35e2:	4b22      	ldr	r3, [pc, #136]	; (366c <spi_select_slave+0xe0>)
    35e4:	4798      	blx	r3
					return STATUS_BUSY;
    35e6:	2305      	movs	r3, #5
    35e8:	e03a      	b.n	3660 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    35ea:	68bb      	ldr	r3, [r7, #8]
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	2100      	movs	r1, #0
    35f0:	0018      	movs	r0, r3
    35f2:	4b1e      	ldr	r3, [pc, #120]	; (366c <spi_select_slave+0xe0>)
    35f4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    35f6:	68bb      	ldr	r3, [r7, #8]
    35f8:	789b      	ldrb	r3, [r3, #2]
    35fa:	b29a      	uxth	r2, r3
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	0011      	movs	r1, r2
    3600:	0018      	movs	r0, r3
    3602:	4b1b      	ldr	r3, [pc, #108]	; (3670 <spi_select_slave+0xe4>)
    3604:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    3606:	68fb      	ldr	r3, [r7, #12]
    3608:	79db      	ldrb	r3, [r3, #7]
    360a:	2201      	movs	r2, #1
    360c:	4053      	eors	r3, r2
    360e:	b2db      	uxtb	r3, r3
    3610:	2b00      	cmp	r3, #0
    3612:	d024      	beq.n	365e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3614:	46c0      	nop			; (mov r8, r8)
    3616:	68fb      	ldr	r3, [r7, #12]
    3618:	0018      	movs	r0, r3
    361a:	4b16      	ldr	r3, [pc, #88]	; (3674 <spi_select_slave+0xe8>)
    361c:	4798      	blx	r3
    361e:	0003      	movs	r3, r0
    3620:	001a      	movs	r2, r3
    3622:	2301      	movs	r3, #1
    3624:	4053      	eors	r3, r2
    3626:	b2db      	uxtb	r3, r3
    3628:	2b00      	cmp	r3, #0
    362a:	d1f4      	bne.n	3616 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    362c:	2316      	movs	r3, #22
    362e:	18fb      	adds	r3, r7, r3
    3630:	2200      	movs	r2, #0
    3632:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    3634:	2316      	movs	r3, #22
    3636:	18fa      	adds	r2, r7, r3
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	0011      	movs	r1, r2
    363c:	0018      	movs	r0, r3
    363e:	4b0e      	ldr	r3, [pc, #56]	; (3678 <spi_select_slave+0xec>)
    3640:	4798      	blx	r3
    3642:	e00c      	b.n	365e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3644:	68bb      	ldr	r3, [r7, #8]
    3646:	781b      	ldrb	r3, [r3, #0]
    3648:	2100      	movs	r1, #0
    364a:	0018      	movs	r0, r3
    364c:	4b07      	ldr	r3, [pc, #28]	; (366c <spi_select_slave+0xe0>)
    364e:	4798      	blx	r3
    3650:	e005      	b.n	365e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3652:	68bb      	ldr	r3, [r7, #8]
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2101      	movs	r1, #1
    3658:	0018      	movs	r0, r3
    365a:	4b04      	ldr	r3, [pc, #16]	; (366c <spi_select_slave+0xe0>)
    365c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    365e:	2300      	movs	r3, #0
}
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b006      	add	sp, #24
    3666:	bd80      	pop	{r7, pc}
    3668:	00002f2d 	.word	0x00002f2d
    366c:	00002e45 	.word	0x00002e45
    3670:	00002f7d 	.word	0x00002f7d
    3674:	00002f55 	.word	0x00002f55
    3678:	00002fc5 	.word	0x00002fc5

0000367c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    367c:	b580      	push	{r7, lr}
    367e:	b084      	sub	sp, #16
    3680:	af00      	add	r7, sp, #0
    3682:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	b2da      	uxtb	r2, r3
    3692:	230e      	movs	r3, #14
    3694:	18fb      	adds	r3, r7, r3
    3696:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3698:	687b      	ldr	r3, [r7, #4]
    369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    369c:	1c5a      	adds	r2, r3, #1
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	799b      	ldrb	r3, [r3, #6]
    36a6:	2b01      	cmp	r3, #1
    36a8:	d113      	bne.n	36d2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    36aa:	687b      	ldr	r3, [r7, #4]
    36ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	b2db      	uxtb	r3, r3
    36b2:	021b      	lsls	r3, r3, #8
    36b4:	b21a      	sxth	r2, r3
    36b6:	230e      	movs	r3, #14
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	2100      	movs	r1, #0
    36bc:	5e5b      	ldrsh	r3, [r3, r1]
    36be:	4313      	orrs	r3, r2
    36c0:	b21a      	sxth	r2, r3
    36c2:	230e      	movs	r3, #14
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36cc:	1c5a      	adds	r2, r3, #1
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    36d2:	230e      	movs	r3, #14
    36d4:	18fb      	adds	r3, r7, r3
    36d6:	881b      	ldrh	r3, [r3, #0]
    36d8:	05db      	lsls	r3, r3, #23
    36da:	0dda      	lsrs	r2, r3, #23
    36dc:	68bb      	ldr	r3, [r7, #8]
    36de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    36e4:	b29b      	uxth	r3, r3
    36e6:	3b01      	subs	r3, #1
    36e8:	b29a      	uxth	r2, r3
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	869a      	strh	r2, [r3, #52]	; 0x34
}
    36ee:	46c0      	nop			; (mov r8, r8)
    36f0:	46bd      	mov	sp, r7
    36f2:	b004      	add	sp, #16
    36f4:	bd80      	pop	{r7, pc}
    36f6:	46c0      	nop			; (mov r8, r8)

000036f8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    36f8:	b580      	push	{r7, lr}
    36fa:	b084      	sub	sp, #16
    36fc:	af00      	add	r7, sp, #0
    36fe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    3706:	4b08      	ldr	r3, [pc, #32]	; (3728 <_spi_write_dummy+0x30>)
    3708:	881b      	ldrh	r3, [r3, #0]
    370a:	001a      	movs	r2, r3
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3714:	b29b      	uxth	r3, r3
    3716:	3b01      	subs	r3, #1
    3718:	b29a      	uxth	r2, r3
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	46bd      	mov	sp, r7
    3722:	b004      	add	sp, #16
    3724:	bd80      	pop	{r7, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	200000f8 	.word	0x200000f8

0000372c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    372c:	b580      	push	{r7, lr}
    372e:	b084      	sub	sp, #16
    3730:	af00      	add	r7, sp, #0
    3732:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	681b      	ldr	r3, [r3, #0]
    3738:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    373a:	230a      	movs	r3, #10
    373c:	18fb      	adds	r3, r7, r3
    373e:	2200      	movs	r2, #0
    3740:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    3742:	68fb      	ldr	r3, [r7, #12]
    3744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3746:	230a      	movs	r3, #10
    3748:	18fb      	adds	r3, r7, r3
    374a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3750:	b29b      	uxth	r3, r3
    3752:	3b01      	subs	r3, #1
    3754:	b29a      	uxth	r2, r3
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	865a      	strh	r2, [r3, #50]	; 0x32
}
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	46bd      	mov	sp, r7
    375e:	b004      	add	sp, #16
    3760:	bd80      	pop	{r7, pc}
    3762:	46c0      	nop			; (mov r8, r8)

00003764 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    3764:	b580      	push	{r7, lr}
    3766:	b084      	sub	sp, #16
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	681b      	ldr	r3, [r3, #0]
    3770:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3772:	68fb      	ldr	r3, [r7, #12]
    3774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3776:	b29a      	uxth	r2, r3
    3778:	230a      	movs	r3, #10
    377a:	18fb      	adds	r3, r7, r3
    377c:	05d2      	lsls	r2, r2, #23
    377e:	0dd2      	lsrs	r2, r2, #23
    3780:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3786:	220a      	movs	r2, #10
    3788:	18ba      	adds	r2, r7, r2
    378a:	8812      	ldrh	r2, [r2, #0]
    378c:	b2d2      	uxtb	r2, r2
    378e:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3794:	1c5a      	adds	r2, r3, #1
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	799b      	ldrb	r3, [r3, #6]
    379e:	2b01      	cmp	r3, #1
    37a0:	d10d      	bne.n	37be <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37a6:	220a      	movs	r2, #10
    37a8:	18ba      	adds	r2, r7, r2
    37aa:	8812      	ldrh	r2, [r2, #0]
    37ac:	0a12      	lsrs	r2, r2, #8
    37ae:	b292      	uxth	r2, r2
    37b0:	b2d2      	uxtb	r2, r2
    37b2:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37b8:	1c5a      	adds	r2, r3, #1
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    37c2:	b29b      	uxth	r3, r3
    37c4:	3b01      	subs	r3, #1
    37c6:	b29a      	uxth	r2, r3
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	861a      	strh	r2, [r3, #48]	; 0x30
}
    37cc:	46c0      	nop			; (mov r8, r8)
    37ce:	46bd      	mov	sp, r7
    37d0:	b004      	add	sp, #16
    37d2:	bd80      	pop	{r7, pc}

000037d4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    37d4:	b580      	push	{r7, lr}
    37d6:	b086      	sub	sp, #24
    37d8:	af00      	add	r7, sp, #0
    37da:	0002      	movs	r2, r0
    37dc:	1dfb      	adds	r3, r7, #7
    37de:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    37e0:	1dfb      	adds	r3, r7, #7
    37e2:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    37e4:	4bb9      	ldr	r3, [pc, #740]	; (3acc <_spi_interrupt_handler+0x2f8>)
    37e6:	0092      	lsls	r2, r2, #2
    37e8:	58d3      	ldr	r3, [r2, r3]
    37ea:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    37ec:	697b      	ldr	r3, [r7, #20]
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    37f2:	697b      	ldr	r3, [r7, #20]
    37f4:	2237      	movs	r2, #55	; 0x37
    37f6:	5c9a      	ldrb	r2, [r3, r2]
    37f8:	697b      	ldr	r3, [r7, #20]
    37fa:	2136      	movs	r1, #54	; 0x36
    37fc:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    37fe:	230f      	movs	r3, #15
    3800:	18fb      	adds	r3, r7, r3
    3802:	400a      	ands	r2, r1
    3804:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3806:	693b      	ldr	r3, [r7, #16]
    3808:	7e1b      	ldrb	r3, [r3, #24]
    380a:	b2da      	uxtb	r2, r3
    380c:	230c      	movs	r3, #12
    380e:	18fb      	adds	r3, r7, r3
    3810:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    3812:	693b      	ldr	r3, [r7, #16]
    3814:	7d9b      	ldrb	r3, [r3, #22]
    3816:	b2db      	uxtb	r3, r3
    3818:	b29a      	uxth	r2, r3
    381a:	230c      	movs	r3, #12
    381c:	18fb      	adds	r3, r7, r3
    381e:	210c      	movs	r1, #12
    3820:	1879      	adds	r1, r7, r1
    3822:	8809      	ldrh	r1, [r1, #0]
    3824:	400a      	ands	r2, r1
    3826:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3828:	230c      	movs	r3, #12
    382a:	18fb      	adds	r3, r7, r3
    382c:	881b      	ldrh	r3, [r3, #0]
    382e:	2201      	movs	r2, #1
    3830:	4013      	ands	r3, r2
    3832:	d041      	beq.n	38b8 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3834:	697b      	ldr	r3, [r7, #20]
    3836:	795b      	ldrb	r3, [r3, #5]
    3838:	2b01      	cmp	r3, #1
    383a:	d110      	bne.n	385e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    383c:	697b      	ldr	r3, [r7, #20]
    383e:	7a5b      	ldrb	r3, [r3, #9]
    3840:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3842:	2b00      	cmp	r3, #0
    3844:	d10b      	bne.n	385e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    3846:	697b      	ldr	r3, [r7, #20]
    3848:	0018      	movs	r0, r3
    384a:	4ba1      	ldr	r3, [pc, #644]	; (3ad0 <_spi_interrupt_handler+0x2fc>)
    384c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    384e:	697b      	ldr	r3, [r7, #20]
    3850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3852:	b29b      	uxth	r3, r3
    3854:	2b00      	cmp	r3, #0
    3856:	d102      	bne.n	385e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3858:	693b      	ldr	r3, [r7, #16]
    385a:	2201      	movs	r2, #1
    385c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    385e:	697b      	ldr	r3, [r7, #20]
    3860:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    3862:	2b01      	cmp	r3, #1
    3864:	d104      	bne.n	3870 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3866:	697b      	ldr	r3, [r7, #20]
    3868:	7a5b      	ldrb	r3, [r3, #9]
    386a:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    386c:	2b00      	cmp	r3, #0
    386e:	d108      	bne.n	3882 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3870:	697b      	ldr	r3, [r7, #20]
    3872:	795b      	ldrb	r3, [r3, #5]
    3874:	2b00      	cmp	r3, #0
    3876:	d11f      	bne.n	38b8 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    3878:	697b      	ldr	r3, [r7, #20]
    387a:	7a5b      	ldrb	r3, [r3, #9]
    387c:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    387e:	2b00      	cmp	r3, #0
    3880:	d01a      	beq.n	38b8 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    3882:	697b      	ldr	r3, [r7, #20]
    3884:	0018      	movs	r0, r3
    3886:	4b93      	ldr	r3, [pc, #588]	; (3ad4 <_spi_interrupt_handler+0x300>)
    3888:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    388a:	697b      	ldr	r3, [r7, #20]
    388c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    388e:	b29b      	uxth	r3, r3
    3890:	2b00      	cmp	r3, #0
    3892:	d111      	bne.n	38b8 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3894:	693b      	ldr	r3, [r7, #16]
    3896:	2201      	movs	r2, #1
    3898:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    389a:	697b      	ldr	r3, [r7, #20]
    389c:	7a5b      	ldrb	r3, [r3, #9]
    389e:	b2db      	uxtb	r3, r3
    38a0:	2b01      	cmp	r3, #1
    38a2:	d109      	bne.n	38b8 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    38a4:	697b      	ldr	r3, [r7, #20]
    38a6:	79db      	ldrb	r3, [r3, #7]
    38a8:	2201      	movs	r2, #1
    38aa:	4053      	eors	r3, r2
    38ac:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    38ae:	2b00      	cmp	r3, #0
    38b0:	d002      	beq.n	38b8 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    38b2:	693b      	ldr	r3, [r7, #16]
    38b4:	2202      	movs	r2, #2
    38b6:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    38b8:	230c      	movs	r3, #12
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	881b      	ldrh	r3, [r3, #0]
    38be:	2204      	movs	r2, #4
    38c0:	4013      	ands	r3, r2
    38c2:	d100      	bne.n	38c6 <_spi_interrupt_handler+0xf2>
    38c4:	e07e      	b.n	39c4 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    38c6:	693b      	ldr	r3, [r7, #16]
    38c8:	8b5b      	ldrh	r3, [r3, #26]
    38ca:	b29b      	uxth	r3, r3
    38cc:	001a      	movs	r2, r3
    38ce:	2304      	movs	r3, #4
    38d0:	4013      	ands	r3, r2
    38d2:	d022      	beq.n	391a <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    38d4:	697b      	ldr	r3, [r7, #20]
    38d6:	7a5b      	ldrb	r3, [r3, #9]
    38d8:	b2db      	uxtb	r3, r3
    38da:	2b01      	cmp	r3, #1
    38dc:	d014      	beq.n	3908 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    38de:	697b      	ldr	r3, [r7, #20]
    38e0:	2238      	movs	r2, #56	; 0x38
    38e2:	211e      	movs	r1, #30
    38e4:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    38e6:	697b      	ldr	r3, [r7, #20]
    38e8:	2203      	movs	r2, #3
    38ea:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    38ec:	693b      	ldr	r3, [r7, #16]
    38ee:	2205      	movs	r2, #5
    38f0:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    38f2:	230f      	movs	r3, #15
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	781b      	ldrb	r3, [r3, #0]
    38f8:	2208      	movs	r2, #8
    38fa:	4013      	ands	r3, r2
    38fc:	d004      	beq.n	3908 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    38fe:	697b      	ldr	r3, [r7, #20]
    3900:	699b      	ldr	r3, [r3, #24]
    3902:	697a      	ldr	r2, [r7, #20]
    3904:	0010      	movs	r0, r2
    3906:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3908:	693b      	ldr	r3, [r7, #16]
    390a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    390c:	230a      	movs	r3, #10
    390e:	18fb      	adds	r3, r7, r3
    3910:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3912:	693b      	ldr	r3, [r7, #16]
    3914:	2204      	movs	r2, #4
    3916:	835a      	strh	r2, [r3, #26]
    3918:	e054      	b.n	39c4 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    391a:	697b      	ldr	r3, [r7, #20]
    391c:	7a5b      	ldrb	r3, [r3, #9]
    391e:	b2db      	uxtb	r3, r3
    3920:	2b01      	cmp	r3, #1
    3922:	d11e      	bne.n	3962 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    3924:	697b      	ldr	r3, [r7, #20]
    3926:	0018      	movs	r0, r3
    3928:	4b6b      	ldr	r3, [pc, #428]	; (3ad8 <_spi_interrupt_handler+0x304>)
    392a:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    392c:	697b      	ldr	r3, [r7, #20]
    392e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3930:	b29b      	uxth	r3, r3
    3932:	2b00      	cmp	r3, #0
    3934:	d146      	bne.n	39c4 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3936:	693b      	ldr	r3, [r7, #16]
    3938:	2204      	movs	r2, #4
    393a:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    393c:	697b      	ldr	r3, [r7, #20]
    393e:	2238      	movs	r2, #56	; 0x38
    3940:	2100      	movs	r1, #0
    3942:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	2203      	movs	r2, #3
    3948:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    394a:	230f      	movs	r3, #15
    394c:	18fb      	adds	r3, r7, r3
    394e:	781b      	ldrb	r3, [r3, #0]
    3950:	2201      	movs	r2, #1
    3952:	4013      	ands	r3, r2
    3954:	d036      	beq.n	39c4 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3956:	697b      	ldr	r3, [r7, #20]
    3958:	68db      	ldr	r3, [r3, #12]
    395a:	697a      	ldr	r2, [r7, #20]
    395c:	0010      	movs	r0, r2
    395e:	4798      	blx	r3
    3960:	e030      	b.n	39c4 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    3962:	697b      	ldr	r3, [r7, #20]
    3964:	0018      	movs	r0, r3
    3966:	4b5d      	ldr	r3, [pc, #372]	; (3adc <_spi_interrupt_handler+0x308>)
    3968:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    396a:	697b      	ldr	r3, [r7, #20]
    396c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    396e:	b29b      	uxth	r3, r3
    3970:	2b00      	cmp	r3, #0
    3972:	d127      	bne.n	39c4 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    3974:	697b      	ldr	r3, [r7, #20]
    3976:	2238      	movs	r2, #56	; 0x38
    3978:	2100      	movs	r1, #0
    397a:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    397c:	693b      	ldr	r3, [r7, #16]
    397e:	2204      	movs	r2, #4
    3980:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3982:	697b      	ldr	r3, [r7, #20]
    3984:	7a5b      	ldrb	r3, [r3, #9]
    3986:	b2db      	uxtb	r3, r3
    3988:	2b02      	cmp	r3, #2
    398a:	d10b      	bne.n	39a4 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    398c:	230f      	movs	r3, #15
    398e:	18fb      	adds	r3, r7, r3
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	2204      	movs	r2, #4
    3994:	4013      	ands	r3, r2
    3996:	d015      	beq.n	39c4 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3998:	697b      	ldr	r3, [r7, #20]
    399a:	695b      	ldr	r3, [r3, #20]
    399c:	697a      	ldr	r2, [r7, #20]
    399e:	0010      	movs	r0, r2
    39a0:	4798      	blx	r3
    39a2:	e00f      	b.n	39c4 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    39a4:	697b      	ldr	r3, [r7, #20]
    39a6:	7a5b      	ldrb	r3, [r3, #9]
    39a8:	b2db      	uxtb	r3, r3
    39aa:	2b00      	cmp	r3, #0
    39ac:	d10a      	bne.n	39c4 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    39ae:	230f      	movs	r3, #15
    39b0:	18fb      	adds	r3, r7, r3
    39b2:	781b      	ldrb	r3, [r3, #0]
    39b4:	2202      	movs	r2, #2
    39b6:	4013      	ands	r3, r2
    39b8:	d004      	beq.n	39c4 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    39ba:	697b      	ldr	r3, [r7, #20]
    39bc:	691b      	ldr	r3, [r3, #16]
    39be:	697a      	ldr	r2, [r7, #20]
    39c0:	0010      	movs	r0, r2
    39c2:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    39c4:	230c      	movs	r3, #12
    39c6:	18fb      	adds	r3, r7, r3
    39c8:	881b      	ldrh	r3, [r3, #0]
    39ca:	2202      	movs	r2, #2
    39cc:	4013      	ands	r3, r2
    39ce:	d046      	beq.n	3a5e <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    39d0:	697b      	ldr	r3, [r7, #20]
    39d2:	795b      	ldrb	r3, [r3, #5]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d11d      	bne.n	3a14 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    39d8:	693b      	ldr	r3, [r7, #16]
    39da:	2207      	movs	r2, #7
    39dc:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    39de:	693b      	ldr	r3, [r7, #16]
    39e0:	2202      	movs	r2, #2
    39e2:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    39e4:	697b      	ldr	r3, [r7, #20]
    39e6:	2203      	movs	r2, #3
    39e8:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    39ea:	697b      	ldr	r3, [r7, #20]
    39ec:	2200      	movs	r2, #0
    39ee:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    39f0:	697b      	ldr	r3, [r7, #20]
    39f2:	2200      	movs	r2, #0
    39f4:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    39f6:	697b      	ldr	r3, [r7, #20]
    39f8:	2238      	movs	r2, #56	; 0x38
    39fa:	2100      	movs	r1, #0
    39fc:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    39fe:	230f      	movs	r3, #15
    3a00:	18fb      	adds	r3, r7, r3
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	2210      	movs	r2, #16
    3a06:	4013      	ands	r3, r2
    3a08:	d004      	beq.n	3a14 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    3a0a:	697b      	ldr	r3, [r7, #20]
    3a0c:	69db      	ldr	r3, [r3, #28]
    3a0e:	697a      	ldr	r2, [r7, #20]
    3a10:	0010      	movs	r0, r2
    3a12:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3a14:	697b      	ldr	r3, [r7, #20]
    3a16:	795b      	ldrb	r3, [r3, #5]
    3a18:	2b01      	cmp	r3, #1
    3a1a:	d120      	bne.n	3a5e <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3a1c:	697b      	ldr	r3, [r7, #20]
    3a1e:	7a5b      	ldrb	r3, [r3, #9]
    3a20:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3a22:	2b01      	cmp	r3, #1
    3a24:	d11b      	bne.n	3a5e <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3a26:	697b      	ldr	r3, [r7, #20]
    3a28:	79db      	ldrb	r3, [r3, #7]
    3a2a:	2201      	movs	r2, #1
    3a2c:	4053      	eors	r3, r2
    3a2e:	b2db      	uxtb	r3, r3
    3a30:	2b00      	cmp	r3, #0
    3a32:	d014      	beq.n	3a5e <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3a34:	693b      	ldr	r3, [r7, #16]
    3a36:	2202      	movs	r2, #2
    3a38:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3a3a:	697b      	ldr	r3, [r7, #20]
    3a3c:	2203      	movs	r2, #3
    3a3e:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    3a40:	697b      	ldr	r3, [r7, #20]
    3a42:	2238      	movs	r2, #56	; 0x38
    3a44:	2100      	movs	r1, #0
    3a46:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3a48:	230f      	movs	r3, #15
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
    3a4e:	2201      	movs	r2, #1
    3a50:	4013      	ands	r3, r2
    3a52:	d004      	beq.n	3a5e <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3a54:	697b      	ldr	r3, [r7, #20]
    3a56:	68db      	ldr	r3, [r3, #12]
    3a58:	697a      	ldr	r2, [r7, #20]
    3a5a:	0010      	movs	r0, r2
    3a5c:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    3a5e:	230c      	movs	r3, #12
    3a60:	18fb      	adds	r3, r7, r3
    3a62:	881b      	ldrh	r3, [r3, #0]
    3a64:	2208      	movs	r2, #8
    3a66:	4013      	ands	r3, r2
    3a68:	d014      	beq.n	3a94 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    3a6a:	697b      	ldr	r3, [r7, #20]
    3a6c:	795b      	ldrb	r3, [r3, #5]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d110      	bne.n	3a94 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3a72:	693b      	ldr	r3, [r7, #16]
    3a74:	2208      	movs	r2, #8
    3a76:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3a78:	693b      	ldr	r3, [r7, #16]
    3a7a:	2208      	movs	r2, #8
    3a7c:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    3a7e:	230f      	movs	r3, #15
    3a80:	18fb      	adds	r3, r7, r3
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	2220      	movs	r2, #32
    3a86:	4013      	ands	r3, r2
    3a88:	d004      	beq.n	3a94 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    3a8a:	697b      	ldr	r3, [r7, #20]
    3a8c:	6a1b      	ldr	r3, [r3, #32]
    3a8e:	697a      	ldr	r2, [r7, #20]
    3a90:	0010      	movs	r0, r2
    3a92:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3a94:	230c      	movs	r3, #12
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	881b      	ldrh	r3, [r3, #0]
    3a9a:	2280      	movs	r2, #128	; 0x80
    3a9c:	4013      	ands	r3, r2
    3a9e:	d010      	beq.n	3ac2 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3aa0:	693b      	ldr	r3, [r7, #16]
    3aa2:	2280      	movs	r2, #128	; 0x80
    3aa4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3aa6:	693b      	ldr	r3, [r7, #16]
    3aa8:	2280      	movs	r2, #128	; 0x80
    3aaa:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3aac:	230f      	movs	r3, #15
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2240      	movs	r2, #64	; 0x40
    3ab4:	4013      	ands	r3, r2
    3ab6:	d004      	beq.n	3ac2 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3ab8:	697b      	ldr	r3, [r7, #20]
    3aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3abc:	697a      	ldr	r2, [r7, #20]
    3abe:	0010      	movs	r0, r2
    3ac0:	4798      	blx	r3
		}
	}
#  endif
}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	46bd      	mov	sp, r7
    3ac6:	b006      	add	sp, #24
    3ac8:	bd80      	pop	{r7, pc}
    3aca:	46c0      	nop			; (mov r8, r8)
    3acc:	200000fc 	.word	0x200000fc
    3ad0:	000036f9 	.word	0x000036f9
    3ad4:	0000367d 	.word	0x0000367d
    3ad8:	0000372d 	.word	0x0000372d
    3adc:	00003765 	.word	0x00003765

00003ae0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b082      	sub	sp, #8
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	2200      	movs	r2, #0
    3aec:	701a      	strb	r2, [r3, #0]
}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	46bd      	mov	sp, r7
    3af2:	b002      	add	sp, #8
    3af4:	bd80      	pop	{r7, pc}
    3af6:	46c0      	nop			; (mov r8, r8)

00003af8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b086      	sub	sp, #24
    3afc:	af00      	add	r7, sp, #0
    3afe:	60f8      	str	r0, [r7, #12]
    3b00:	60b9      	str	r1, [r7, #8]
    3b02:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3b04:	2316      	movs	r3, #22
    3b06:	18fb      	adds	r3, r7, r3
    3b08:	2200      	movs	r2, #0
    3b0a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3b0c:	68bb      	ldr	r3, [r7, #8]
    3b0e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3b10:	68bb      	ldr	r3, [r7, #8]
    3b12:	085a      	lsrs	r2, r3, #1
    3b14:	68fb      	ldr	r3, [r7, #12]
    3b16:	429a      	cmp	r2, r3
    3b18:	d201      	bcs.n	3b1e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b1a:	2340      	movs	r3, #64	; 0x40
    3b1c:	e026      	b.n	3b6c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3b1e:	68bb      	ldr	r3, [r7, #8]
    3b20:	085b      	lsrs	r3, r3, #1
    3b22:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3b24:	e00a      	b.n	3b3c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3b26:	693a      	ldr	r2, [r7, #16]
    3b28:	68fb      	ldr	r3, [r7, #12]
    3b2a:	1ad3      	subs	r3, r2, r3
    3b2c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3b2e:	2316      	movs	r3, #22
    3b30:	18fb      	adds	r3, r7, r3
    3b32:	881a      	ldrh	r2, [r3, #0]
    3b34:	2316      	movs	r3, #22
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	3201      	adds	r2, #1
    3b3a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3b3c:	693a      	ldr	r2, [r7, #16]
    3b3e:	68fb      	ldr	r3, [r7, #12]
    3b40:	429a      	cmp	r2, r3
    3b42:	d2f0      	bcs.n	3b26 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3b44:	2316      	movs	r3, #22
    3b46:	18fb      	adds	r3, r7, r3
    3b48:	2216      	movs	r2, #22
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	8812      	ldrh	r2, [r2, #0]
    3b4e:	3a01      	subs	r2, #1
    3b50:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3b52:	2316      	movs	r3, #22
    3b54:	18fb      	adds	r3, r7, r3
    3b56:	881b      	ldrh	r3, [r3, #0]
    3b58:	2bff      	cmp	r3, #255	; 0xff
    3b5a:	d901      	bls.n	3b60 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b5c:	2340      	movs	r3, #64	; 0x40
    3b5e:	e005      	b.n	3b6c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	2216      	movs	r2, #22
    3b64:	18ba      	adds	r2, r7, r2
    3b66:	8812      	ldrh	r2, [r2, #0]
    3b68:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3b6a:	2300      	movs	r3, #0
	}
}
    3b6c:	0018      	movs	r0, r3
    3b6e:	46bd      	mov	sp, r7
    3b70:	b006      	add	sp, #24
    3b72:	bd80      	pop	{r7, pc}

00003b74 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b084      	sub	sp, #16
    3b78:	af00      	add	r7, sp, #0
    3b7a:	0002      	movs	r2, r0
    3b7c:	1dfb      	adds	r3, r7, #7
    3b7e:	701a      	strb	r2, [r3, #0]
    3b80:	1dbb      	adds	r3, r7, #6
    3b82:	1c0a      	adds	r2, r1, #0
    3b84:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3b86:	4b1a      	ldr	r3, [pc, #104]	; (3bf0 <sercom_set_gclk_generator+0x7c>)
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	2201      	movs	r2, #1
    3b8c:	4053      	eors	r3, r2
    3b8e:	b2db      	uxtb	r3, r3
    3b90:	2b00      	cmp	r3, #0
    3b92:	d103      	bne.n	3b9c <sercom_set_gclk_generator+0x28>
    3b94:	1dbb      	adds	r3, r7, #6
    3b96:	781b      	ldrb	r3, [r3, #0]
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d01b      	beq.n	3bd4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3b9c:	230c      	movs	r3, #12
    3b9e:	18fb      	adds	r3, r7, r3
    3ba0:	0018      	movs	r0, r3
    3ba2:	4b14      	ldr	r3, [pc, #80]	; (3bf4 <sercom_set_gclk_generator+0x80>)
    3ba4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3ba6:	230c      	movs	r3, #12
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	1dfa      	adds	r2, r7, #7
    3bac:	7812      	ldrb	r2, [r2, #0]
    3bae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3bb0:	230c      	movs	r3, #12
    3bb2:	18fb      	adds	r3, r7, r3
    3bb4:	0019      	movs	r1, r3
    3bb6:	2013      	movs	r0, #19
    3bb8:	4b0f      	ldr	r3, [pc, #60]	; (3bf8 <sercom_set_gclk_generator+0x84>)
    3bba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3bbc:	2013      	movs	r0, #19
    3bbe:	4b0f      	ldr	r3, [pc, #60]	; (3bfc <sercom_set_gclk_generator+0x88>)
    3bc0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3bc2:	4b0b      	ldr	r3, [pc, #44]	; (3bf0 <sercom_set_gclk_generator+0x7c>)
    3bc4:	1dfa      	adds	r2, r7, #7
    3bc6:	7812      	ldrb	r2, [r2, #0]
    3bc8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3bca:	4b09      	ldr	r3, [pc, #36]	; (3bf0 <sercom_set_gclk_generator+0x7c>)
    3bcc:	2201      	movs	r2, #1
    3bce:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3bd0:	2300      	movs	r3, #0
    3bd2:	e008      	b.n	3be6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3bd4:	4b06      	ldr	r3, [pc, #24]	; (3bf0 <sercom_set_gclk_generator+0x7c>)
    3bd6:	785b      	ldrb	r3, [r3, #1]
    3bd8:	1dfa      	adds	r2, r7, #7
    3bda:	7812      	ldrb	r2, [r2, #0]
    3bdc:	429a      	cmp	r2, r3
    3bde:	d101      	bne.n	3be4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3be0:	2300      	movs	r3, #0
    3be2:	e000      	b.n	3be6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3be4:	231d      	movs	r3, #29
}
    3be6:	0018      	movs	r0, r3
    3be8:	46bd      	mov	sp, r7
    3bea:	b004      	add	sp, #16
    3bec:	bd80      	pop	{r7, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	2000002c 	.word	0x2000002c
    3bf4:	00003ae1 	.word	0x00003ae1
    3bf8:	000049b5 	.word	0x000049b5
    3bfc:	000049f9 	.word	0x000049f9

00003c00 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
    3c08:	000a      	movs	r2, r1
    3c0a:	1cfb      	adds	r3, r7, #3
    3c0c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	4a4d      	ldr	r2, [pc, #308]	; (3d48 <_sercom_get_default_pad+0x148>)
    3c12:	4293      	cmp	r3, r2
    3c14:	d03f      	beq.n	3c96 <_sercom_get_default_pad+0x96>
    3c16:	4a4c      	ldr	r2, [pc, #304]	; (3d48 <_sercom_get_default_pad+0x148>)
    3c18:	4293      	cmp	r3, r2
    3c1a:	d806      	bhi.n	3c2a <_sercom_get_default_pad+0x2a>
    3c1c:	4a4b      	ldr	r2, [pc, #300]	; (3d4c <_sercom_get_default_pad+0x14c>)
    3c1e:	4293      	cmp	r3, r2
    3c20:	d00f      	beq.n	3c42 <_sercom_get_default_pad+0x42>
    3c22:	4a4b      	ldr	r2, [pc, #300]	; (3d50 <_sercom_get_default_pad+0x150>)
    3c24:	4293      	cmp	r3, r2
    3c26:	d021      	beq.n	3c6c <_sercom_get_default_pad+0x6c>
    3c28:	e089      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3c2a:	4a4a      	ldr	r2, [pc, #296]	; (3d54 <_sercom_get_default_pad+0x154>)
    3c2c:	4293      	cmp	r3, r2
    3c2e:	d100      	bne.n	3c32 <_sercom_get_default_pad+0x32>
    3c30:	e05b      	b.n	3cea <_sercom_get_default_pad+0xea>
    3c32:	4a49      	ldr	r2, [pc, #292]	; (3d58 <_sercom_get_default_pad+0x158>)
    3c34:	4293      	cmp	r3, r2
    3c36:	d100      	bne.n	3c3a <_sercom_get_default_pad+0x3a>
    3c38:	e06c      	b.n	3d14 <_sercom_get_default_pad+0x114>
    3c3a:	4a48      	ldr	r2, [pc, #288]	; (3d5c <_sercom_get_default_pad+0x15c>)
    3c3c:	4293      	cmp	r3, r2
    3c3e:	d03f      	beq.n	3cc0 <_sercom_get_default_pad+0xc0>
    3c40:	e07d      	b.n	3d3e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c42:	1cfb      	adds	r3, r7, #3
    3c44:	781b      	ldrb	r3, [r3, #0]
    3c46:	2b01      	cmp	r3, #1
    3c48:	d00a      	beq.n	3c60 <_sercom_get_default_pad+0x60>
    3c4a:	dc02      	bgt.n	3c52 <_sercom_get_default_pad+0x52>
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d005      	beq.n	3c5c <_sercom_get_default_pad+0x5c>
    3c50:	e075      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3c52:	2b02      	cmp	r3, #2
    3c54:	d006      	beq.n	3c64 <_sercom_get_default_pad+0x64>
    3c56:	2b03      	cmp	r3, #3
    3c58:	d006      	beq.n	3c68 <_sercom_get_default_pad+0x68>
    3c5a:	e070      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3c5c:	4b40      	ldr	r3, [pc, #256]	; (3d60 <_sercom_get_default_pad+0x160>)
    3c5e:	e06f      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c60:	4b40      	ldr	r3, [pc, #256]	; (3d64 <_sercom_get_default_pad+0x164>)
    3c62:	e06d      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c64:	4b40      	ldr	r3, [pc, #256]	; (3d68 <_sercom_get_default_pad+0x168>)
    3c66:	e06b      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c68:	4b40      	ldr	r3, [pc, #256]	; (3d6c <_sercom_get_default_pad+0x16c>)
    3c6a:	e069      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c6c:	1cfb      	adds	r3, r7, #3
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	2b01      	cmp	r3, #1
    3c72:	d00a      	beq.n	3c8a <_sercom_get_default_pad+0x8a>
    3c74:	dc02      	bgt.n	3c7c <_sercom_get_default_pad+0x7c>
    3c76:	2b00      	cmp	r3, #0
    3c78:	d005      	beq.n	3c86 <_sercom_get_default_pad+0x86>
    3c7a:	e060      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3c7c:	2b02      	cmp	r3, #2
    3c7e:	d006      	beq.n	3c8e <_sercom_get_default_pad+0x8e>
    3c80:	2b03      	cmp	r3, #3
    3c82:	d006      	beq.n	3c92 <_sercom_get_default_pad+0x92>
    3c84:	e05b      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3c86:	2303      	movs	r3, #3
    3c88:	e05a      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c8a:	4b39      	ldr	r3, [pc, #228]	; (3d70 <_sercom_get_default_pad+0x170>)
    3c8c:	e058      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c8e:	4b39      	ldr	r3, [pc, #228]	; (3d74 <_sercom_get_default_pad+0x174>)
    3c90:	e056      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c92:	4b39      	ldr	r3, [pc, #228]	; (3d78 <_sercom_get_default_pad+0x178>)
    3c94:	e054      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3c96:	1cfb      	adds	r3, r7, #3
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	2b01      	cmp	r3, #1
    3c9c:	d00a      	beq.n	3cb4 <_sercom_get_default_pad+0xb4>
    3c9e:	dc02      	bgt.n	3ca6 <_sercom_get_default_pad+0xa6>
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d005      	beq.n	3cb0 <_sercom_get_default_pad+0xb0>
    3ca4:	e04b      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3ca6:	2b02      	cmp	r3, #2
    3ca8:	d006      	beq.n	3cb8 <_sercom_get_default_pad+0xb8>
    3caa:	2b03      	cmp	r3, #3
    3cac:	d006      	beq.n	3cbc <_sercom_get_default_pad+0xbc>
    3cae:	e046      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3cb0:	4b32      	ldr	r3, [pc, #200]	; (3d7c <_sercom_get_default_pad+0x17c>)
    3cb2:	e045      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cb4:	4b32      	ldr	r3, [pc, #200]	; (3d80 <_sercom_get_default_pad+0x180>)
    3cb6:	e043      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cb8:	4b32      	ldr	r3, [pc, #200]	; (3d84 <_sercom_get_default_pad+0x184>)
    3cba:	e041      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cbc:	4b32      	ldr	r3, [pc, #200]	; (3d88 <_sercom_get_default_pad+0x188>)
    3cbe:	e03f      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cc0:	1cfb      	adds	r3, r7, #3
    3cc2:	781b      	ldrb	r3, [r3, #0]
    3cc4:	2b01      	cmp	r3, #1
    3cc6:	d00a      	beq.n	3cde <_sercom_get_default_pad+0xde>
    3cc8:	dc02      	bgt.n	3cd0 <_sercom_get_default_pad+0xd0>
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d005      	beq.n	3cda <_sercom_get_default_pad+0xda>
    3cce:	e036      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3cd0:	2b02      	cmp	r3, #2
    3cd2:	d006      	beq.n	3ce2 <_sercom_get_default_pad+0xe2>
    3cd4:	2b03      	cmp	r3, #3
    3cd6:	d006      	beq.n	3ce6 <_sercom_get_default_pad+0xe6>
    3cd8:	e031      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3cda:	4b2c      	ldr	r3, [pc, #176]	; (3d8c <_sercom_get_default_pad+0x18c>)
    3cdc:	e030      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cde:	4b2c      	ldr	r3, [pc, #176]	; (3d90 <_sercom_get_default_pad+0x190>)
    3ce0:	e02e      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3ce2:	4b2c      	ldr	r3, [pc, #176]	; (3d94 <_sercom_get_default_pad+0x194>)
    3ce4:	e02c      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3ce6:	4b2c      	ldr	r3, [pc, #176]	; (3d98 <_sercom_get_default_pad+0x198>)
    3ce8:	e02a      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3cea:	1cfb      	adds	r3, r7, #3
    3cec:	781b      	ldrb	r3, [r3, #0]
    3cee:	2b01      	cmp	r3, #1
    3cf0:	d00a      	beq.n	3d08 <_sercom_get_default_pad+0x108>
    3cf2:	dc02      	bgt.n	3cfa <_sercom_get_default_pad+0xfa>
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d005      	beq.n	3d04 <_sercom_get_default_pad+0x104>
    3cf8:	e021      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3cfa:	2b02      	cmp	r3, #2
    3cfc:	d006      	beq.n	3d0c <_sercom_get_default_pad+0x10c>
    3cfe:	2b03      	cmp	r3, #3
    3d00:	d006      	beq.n	3d10 <_sercom_get_default_pad+0x110>
    3d02:	e01c      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3d04:	4b25      	ldr	r3, [pc, #148]	; (3d9c <_sercom_get_default_pad+0x19c>)
    3d06:	e01b      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d08:	4b25      	ldr	r3, [pc, #148]	; (3da0 <_sercom_get_default_pad+0x1a0>)
    3d0a:	e019      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d0c:	4b25      	ldr	r3, [pc, #148]	; (3da4 <_sercom_get_default_pad+0x1a4>)
    3d0e:	e017      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d10:	4b25      	ldr	r3, [pc, #148]	; (3da8 <_sercom_get_default_pad+0x1a8>)
    3d12:	e015      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d14:	1cfb      	adds	r3, r7, #3
    3d16:	781b      	ldrb	r3, [r3, #0]
    3d18:	2b01      	cmp	r3, #1
    3d1a:	d00a      	beq.n	3d32 <_sercom_get_default_pad+0x132>
    3d1c:	dc02      	bgt.n	3d24 <_sercom_get_default_pad+0x124>
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d005      	beq.n	3d2e <_sercom_get_default_pad+0x12e>
    3d22:	e00c      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3d24:	2b02      	cmp	r3, #2
    3d26:	d006      	beq.n	3d36 <_sercom_get_default_pad+0x136>
    3d28:	2b03      	cmp	r3, #3
    3d2a:	d006      	beq.n	3d3a <_sercom_get_default_pad+0x13a>
    3d2c:	e007      	b.n	3d3e <_sercom_get_default_pad+0x13e>
    3d2e:	4b1f      	ldr	r3, [pc, #124]	; (3dac <_sercom_get_default_pad+0x1ac>)
    3d30:	e006      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d32:	4b1f      	ldr	r3, [pc, #124]	; (3db0 <_sercom_get_default_pad+0x1b0>)
    3d34:	e004      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d36:	4b1f      	ldr	r3, [pc, #124]	; (3db4 <_sercom_get_default_pad+0x1b4>)
    3d38:	e002      	b.n	3d40 <_sercom_get_default_pad+0x140>
    3d3a:	4b1f      	ldr	r3, [pc, #124]	; (3db8 <_sercom_get_default_pad+0x1b8>)
    3d3c:	e000      	b.n	3d40 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3d3e:	2300      	movs	r3, #0
}
    3d40:	0018      	movs	r0, r3
    3d42:	46bd      	mov	sp, r7
    3d44:	b002      	add	sp, #8
    3d46:	bd80      	pop	{r7, pc}
    3d48:	42001000 	.word	0x42001000
    3d4c:	42000800 	.word	0x42000800
    3d50:	42000c00 	.word	0x42000c00
    3d54:	42001800 	.word	0x42001800
    3d58:	42001c00 	.word	0x42001c00
    3d5c:	42001400 	.word	0x42001400
    3d60:	00040003 	.word	0x00040003
    3d64:	00050003 	.word	0x00050003
    3d68:	00060003 	.word	0x00060003
    3d6c:	00070003 	.word	0x00070003
    3d70:	00010003 	.word	0x00010003
    3d74:	001e0003 	.word	0x001e0003
    3d78:	001f0003 	.word	0x001f0003
    3d7c:	00080003 	.word	0x00080003
    3d80:	00090003 	.word	0x00090003
    3d84:	000a0003 	.word	0x000a0003
    3d88:	000b0003 	.word	0x000b0003
    3d8c:	00100003 	.word	0x00100003
    3d90:	00110003 	.word	0x00110003
    3d94:	00120003 	.word	0x00120003
    3d98:	00130003 	.word	0x00130003
    3d9c:	000c0003 	.word	0x000c0003
    3da0:	000d0003 	.word	0x000d0003
    3da4:	000e0003 	.word	0x000e0003
    3da8:	000f0003 	.word	0x000f0003
    3dac:	00160003 	.word	0x00160003
    3db0:	00170003 	.word	0x00170003
    3db4:	00180003 	.word	0x00180003
    3db8:	00190003 	.word	0x00190003

00003dbc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3dbc:	b590      	push	{r4, r7, lr}
    3dbe:	b08b      	sub	sp, #44	; 0x2c
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3dc4:	230c      	movs	r3, #12
    3dc6:	18fb      	adds	r3, r7, r3
    3dc8:	4a0f      	ldr	r2, [pc, #60]	; (3e08 <_sercom_get_sercom_inst_index+0x4c>)
    3dca:	ca13      	ldmia	r2!, {r0, r1, r4}
    3dcc:	c313      	stmia	r3!, {r0, r1, r4}
    3dce:	ca13      	ldmia	r2!, {r0, r1, r4}
    3dd0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3dd2:	2300      	movs	r3, #0
    3dd4:	627b      	str	r3, [r7, #36]	; 0x24
    3dd6:	e00e      	b.n	3df6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3dd8:	230c      	movs	r3, #12
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3dde:	0092      	lsls	r2, r2, #2
    3de0:	58d3      	ldr	r3, [r2, r3]
    3de2:	1e1a      	subs	r2, r3, #0
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	429a      	cmp	r2, r3
    3de8:	d102      	bne.n	3df0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3dec:	b2db      	uxtb	r3, r3
    3dee:	e006      	b.n	3dfe <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3df2:	3301      	adds	r3, #1
    3df4:	627b      	str	r3, [r7, #36]	; 0x24
    3df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3df8:	2b05      	cmp	r3, #5
    3dfa:	d9ed      	bls.n	3dd8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3dfc:	2300      	movs	r3, #0
}
    3dfe:	0018      	movs	r0, r3
    3e00:	46bd      	mov	sp, r7
    3e02:	b00b      	add	sp, #44	; 0x2c
    3e04:	bd90      	pop	{r4, r7, pc}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	00008ed4 	.word	0x00008ed4

00003e0c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b082      	sub	sp, #8
    3e10:	af00      	add	r7, sp, #0
    3e12:	0002      	movs	r2, r0
    3e14:	1dfb      	adds	r3, r7, #7
    3e16:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3e18:	46c0      	nop			; (mov r8, r8)
    3e1a:	46bd      	mov	sp, r7
    3e1c:	b002      	add	sp, #8
    3e1e:	bd80      	pop	{r7, pc}

00003e20 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3e20:	b580      	push	{r7, lr}
    3e22:	b084      	sub	sp, #16
    3e24:	af00      	add	r7, sp, #0
    3e26:	0002      	movs	r2, r0
    3e28:	6039      	str	r1, [r7, #0]
    3e2a:	1dfb      	adds	r3, r7, #7
    3e2c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3e2e:	4b13      	ldr	r3, [pc, #76]	; (3e7c <_sercom_set_handler+0x5c>)
    3e30:	781b      	ldrb	r3, [r3, #0]
    3e32:	2201      	movs	r2, #1
    3e34:	4053      	eors	r3, r2
    3e36:	b2db      	uxtb	r3, r3
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d015      	beq.n	3e68 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e3c:	2300      	movs	r3, #0
    3e3e:	60fb      	str	r3, [r7, #12]
    3e40:	e00c      	b.n	3e5c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3e42:	4b0f      	ldr	r3, [pc, #60]	; (3e80 <_sercom_set_handler+0x60>)
    3e44:	68fa      	ldr	r2, [r7, #12]
    3e46:	0092      	lsls	r2, r2, #2
    3e48:	490e      	ldr	r1, [pc, #56]	; (3e84 <_sercom_set_handler+0x64>)
    3e4a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3e4c:	4b0e      	ldr	r3, [pc, #56]	; (3e88 <_sercom_set_handler+0x68>)
    3e4e:	68fa      	ldr	r2, [r7, #12]
    3e50:	0092      	lsls	r2, r2, #2
    3e52:	2100      	movs	r1, #0
    3e54:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e56:	68fb      	ldr	r3, [r7, #12]
    3e58:	3301      	adds	r3, #1
    3e5a:	60fb      	str	r3, [r7, #12]
    3e5c:	68fb      	ldr	r3, [r7, #12]
    3e5e:	2b05      	cmp	r3, #5
    3e60:	d9ef      	bls.n	3e42 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3e62:	4b06      	ldr	r3, [pc, #24]	; (3e7c <_sercom_set_handler+0x5c>)
    3e64:	2201      	movs	r2, #1
    3e66:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3e68:	1dfb      	adds	r3, r7, #7
    3e6a:	781a      	ldrb	r2, [r3, #0]
    3e6c:	4b04      	ldr	r3, [pc, #16]	; (3e80 <_sercom_set_handler+0x60>)
    3e6e:	0092      	lsls	r2, r2, #2
    3e70:	6839      	ldr	r1, [r7, #0]
    3e72:	50d1      	str	r1, [r2, r3]
}
    3e74:	46c0      	nop			; (mov r8, r8)
    3e76:	46bd      	mov	sp, r7
    3e78:	b004      	add	sp, #16
    3e7a:	bd80      	pop	{r7, pc}
    3e7c:	2000002e 	.word	0x2000002e
    3e80:	20000030 	.word	0x20000030
    3e84:	00003e0d 	.word	0x00003e0d
    3e88:	200000fc 	.word	0x200000fc

00003e8c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3e8c:	b590      	push	{r4, r7, lr}
    3e8e:	b085      	sub	sp, #20
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3e94:	2308      	movs	r3, #8
    3e96:	18fa      	adds	r2, r7, r3
    3e98:	4b0c      	ldr	r3, [pc, #48]	; (3ecc <_sercom_get_interrupt_vector+0x40>)
    3e9a:	0010      	movs	r0, r2
    3e9c:	0019      	movs	r1, r3
    3e9e:	2306      	movs	r3, #6
    3ea0:	001a      	movs	r2, r3
    3ea2:	4b0b      	ldr	r3, [pc, #44]	; (3ed0 <_sercom_get_interrupt_vector+0x44>)
    3ea4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3ea6:	230f      	movs	r3, #15
    3ea8:	18fc      	adds	r4, r7, r3
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	0018      	movs	r0, r3
    3eae:	4b09      	ldr	r3, [pc, #36]	; (3ed4 <_sercom_get_interrupt_vector+0x48>)
    3eb0:	4798      	blx	r3
    3eb2:	0003      	movs	r3, r0
    3eb4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3eb6:	230f      	movs	r3, #15
    3eb8:	18fb      	adds	r3, r7, r3
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	2208      	movs	r2, #8
    3ebe:	18ba      	adds	r2, r7, r2
    3ec0:	5cd3      	ldrb	r3, [r2, r3]
    3ec2:	b25b      	sxtb	r3, r3
}
    3ec4:	0018      	movs	r0, r3
    3ec6:	46bd      	mov	sp, r7
    3ec8:	b005      	add	sp, #20
    3eca:	bd90      	pop	{r4, r7, pc}
    3ecc:	00008eec 	.word	0x00008eec
    3ed0:	00008e51 	.word	0x00008e51
    3ed4:	00003dbd 	.word	0x00003dbd

00003ed8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3ed8:	b580      	push	{r7, lr}
    3eda:	af00      	add	r7, sp, #0
    3edc:	4b03      	ldr	r3, [pc, #12]	; (3eec <SERCOM0_Handler+0x14>)
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	2000      	movs	r0, #0
    3ee2:	4798      	blx	r3
    3ee4:	46c0      	nop			; (mov r8, r8)
    3ee6:	46bd      	mov	sp, r7
    3ee8:	bd80      	pop	{r7, pc}
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	20000030 	.word	0x20000030

00003ef0 <SERCOM1_Handler>:
    3ef0:	b580      	push	{r7, lr}
    3ef2:	af00      	add	r7, sp, #0
    3ef4:	4b03      	ldr	r3, [pc, #12]	; (3f04 <SERCOM1_Handler+0x14>)
    3ef6:	685b      	ldr	r3, [r3, #4]
    3ef8:	2001      	movs	r0, #1
    3efa:	4798      	blx	r3
    3efc:	46c0      	nop			; (mov r8, r8)
    3efe:	46bd      	mov	sp, r7
    3f00:	bd80      	pop	{r7, pc}
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	20000030 	.word	0x20000030

00003f08 <SERCOM2_Handler>:
    3f08:	b580      	push	{r7, lr}
    3f0a:	af00      	add	r7, sp, #0
    3f0c:	4b03      	ldr	r3, [pc, #12]	; (3f1c <SERCOM2_Handler+0x14>)
    3f0e:	689b      	ldr	r3, [r3, #8]
    3f10:	2002      	movs	r0, #2
    3f12:	4798      	blx	r3
    3f14:	46c0      	nop			; (mov r8, r8)
    3f16:	46bd      	mov	sp, r7
    3f18:	bd80      	pop	{r7, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	20000030 	.word	0x20000030

00003f20 <SERCOM3_Handler>:
    3f20:	b580      	push	{r7, lr}
    3f22:	af00      	add	r7, sp, #0
    3f24:	4b03      	ldr	r3, [pc, #12]	; (3f34 <SERCOM3_Handler+0x14>)
    3f26:	68db      	ldr	r3, [r3, #12]
    3f28:	2003      	movs	r0, #3
    3f2a:	4798      	blx	r3
    3f2c:	46c0      	nop			; (mov r8, r8)
    3f2e:	46bd      	mov	sp, r7
    3f30:	bd80      	pop	{r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	20000030 	.word	0x20000030

00003f38 <SERCOM4_Handler>:
    3f38:	b580      	push	{r7, lr}
    3f3a:	af00      	add	r7, sp, #0
    3f3c:	4b03      	ldr	r3, [pc, #12]	; (3f4c <SERCOM4_Handler+0x14>)
    3f3e:	691b      	ldr	r3, [r3, #16]
    3f40:	2004      	movs	r0, #4
    3f42:	4798      	blx	r3
    3f44:	46c0      	nop			; (mov r8, r8)
    3f46:	46bd      	mov	sp, r7
    3f48:	bd80      	pop	{r7, pc}
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	20000030 	.word	0x20000030

00003f50 <SERCOM5_Handler>:
    3f50:	b580      	push	{r7, lr}
    3f52:	af00      	add	r7, sp, #0
    3f54:	4b03      	ldr	r3, [pc, #12]	; (3f64 <SERCOM5_Handler+0x14>)
    3f56:	695b      	ldr	r3, [r3, #20]
    3f58:	2005      	movs	r0, #5
    3f5a:	4798      	blx	r3
    3f5c:	46c0      	nop			; (mov r8, r8)
    3f5e:	46bd      	mov	sp, r7
    3f60:	bd80      	pop	{r7, pc}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	20000030 	.word	0x20000030

00003f68 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	2280      	movs	r2, #128	; 0x80
    3f74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	2200      	movs	r2, #0
    3f7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	2201      	movs	r2, #1
    3f80:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	2200      	movs	r2, #0
    3f86:	70da      	strb	r2, [r3, #3]
}
    3f88:	46c0      	nop			; (mov r8, r8)
    3f8a:	46bd      	mov	sp, r7
    3f8c:	b002      	add	sp, #8
    3f8e:	bd80      	pop	{r7, pc}

00003f90 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	b084      	sub	sp, #16
    3f94:	af00      	add	r7, sp, #0
    3f96:	0002      	movs	r2, r0
    3f98:	6039      	str	r1, [r7, #0]
    3f9a:	1dfb      	adds	r3, r7, #7
    3f9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3f9e:	230c      	movs	r3, #12
    3fa0:	18fb      	adds	r3, r7, r3
    3fa2:	0018      	movs	r0, r3
    3fa4:	4b10      	ldr	r3, [pc, #64]	; (3fe8 <port_pin_set_config+0x58>)
    3fa6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3fa8:	230c      	movs	r3, #12
    3faa:	18fb      	adds	r3, r7, r3
    3fac:	2280      	movs	r2, #128	; 0x80
    3fae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3fb0:	683b      	ldr	r3, [r7, #0]
    3fb2:	781a      	ldrb	r2, [r3, #0]
    3fb4:	230c      	movs	r3, #12
    3fb6:	18fb      	adds	r3, r7, r3
    3fb8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3fba:	683b      	ldr	r3, [r7, #0]
    3fbc:	785a      	ldrb	r2, [r3, #1]
    3fbe:	230c      	movs	r3, #12
    3fc0:	18fb      	adds	r3, r7, r3
    3fc2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3fc4:	683b      	ldr	r3, [r7, #0]
    3fc6:	789a      	ldrb	r2, [r3, #2]
    3fc8:	230c      	movs	r3, #12
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3fce:	230c      	movs	r3, #12
    3fd0:	18fa      	adds	r2, r7, r3
    3fd2:	1dfb      	adds	r3, r7, #7
    3fd4:	781b      	ldrb	r3, [r3, #0]
    3fd6:	0011      	movs	r1, r2
    3fd8:	0018      	movs	r0, r3
    3fda:	4b04      	ldr	r3, [pc, #16]	; (3fec <port_pin_set_config+0x5c>)
    3fdc:	4798      	blx	r3
}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	46bd      	mov	sp, r7
    3fe2:	b004      	add	sp, #16
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	00003f69 	.word	0x00003f69
    3fec:	00004ca1 	.word	0x00004ca1

00003ff0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3ff4:	46c0      	nop			; (mov r8, r8)
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bd80      	pop	{r7, pc}
    3ffa:	46c0      	nop			; (mov r8, r8)

00003ffc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b082      	sub	sp, #8
    4000:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    4002:	4b10      	ldr	r3, [pc, #64]	; (4044 <cpu_irq_enter_critical+0x48>)
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	2b00      	cmp	r3, #0
    4008:	d112      	bne.n	4030 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    400a:	f3ef 8310 	mrs	r3, PRIMASK
    400e:	607b      	str	r3, [r7, #4]
  return(result);
    4010:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4012:	2b00      	cmp	r3, #0
    4014:	d109      	bne.n	402a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4016:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4018:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    401c:	4b0a      	ldr	r3, [pc, #40]	; (4048 <cpu_irq_enter_critical+0x4c>)
    401e:	2200      	movs	r2, #0
    4020:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4022:	4b0a      	ldr	r3, [pc, #40]	; (404c <cpu_irq_enter_critical+0x50>)
    4024:	2201      	movs	r2, #1
    4026:	701a      	strb	r2, [r3, #0]
    4028:	e002      	b.n	4030 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    402a:	4b08      	ldr	r3, [pc, #32]	; (404c <cpu_irq_enter_critical+0x50>)
    402c:	2200      	movs	r2, #0
    402e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4030:	4b04      	ldr	r3, [pc, #16]	; (4044 <cpu_irq_enter_critical+0x48>)
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	1c5a      	adds	r2, r3, #1
    4036:	4b03      	ldr	r3, [pc, #12]	; (4044 <cpu_irq_enter_critical+0x48>)
    4038:	601a      	str	r2, [r3, #0]
}
    403a:	46c0      	nop			; (mov r8, r8)
    403c:	46bd      	mov	sp, r7
    403e:	b002      	add	sp, #8
    4040:	bd80      	pop	{r7, pc}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	20000048 	.word	0x20000048
    4048:	20000000 	.word	0x20000000
    404c:	2000004c 	.word	0x2000004c

00004050 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4050:	b580      	push	{r7, lr}
    4052:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4054:	4b0b      	ldr	r3, [pc, #44]	; (4084 <cpu_irq_leave_critical+0x34>)
    4056:	681b      	ldr	r3, [r3, #0]
    4058:	1e5a      	subs	r2, r3, #1
    405a:	4b0a      	ldr	r3, [pc, #40]	; (4084 <cpu_irq_leave_critical+0x34>)
    405c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    405e:	4b09      	ldr	r3, [pc, #36]	; (4084 <cpu_irq_leave_critical+0x34>)
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d10a      	bne.n	407c <cpu_irq_leave_critical+0x2c>
    4066:	4b08      	ldr	r3, [pc, #32]	; (4088 <cpu_irq_leave_critical+0x38>)
    4068:	781b      	ldrb	r3, [r3, #0]
    406a:	b2db      	uxtb	r3, r3
    406c:	2b00      	cmp	r3, #0
    406e:	d005      	beq.n	407c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4070:	4b06      	ldr	r3, [pc, #24]	; (408c <cpu_irq_leave_critical+0x3c>)
    4072:	2201      	movs	r2, #1
    4074:	701a      	strb	r2, [r3, #0]
    4076:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    407a:	b662      	cpsie	i
	}
}
    407c:	46c0      	nop			; (mov r8, r8)
    407e:	46bd      	mov	sp, r7
    4080:	bd80      	pop	{r7, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	20000048 	.word	0x20000048
    4088:	2000004c 	.word	0x2000004c
    408c:	20000000 	.word	0x20000000

00004090 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4090:	b580      	push	{r7, lr}
    4092:	b082      	sub	sp, #8
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4098:	687b      	ldr	r3, [r7, #4]
    409a:	2201      	movs	r2, #1
    409c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	2200      	movs	r2, #0
    40a2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	2206      	movs	r2, #6
    40a8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	2200      	movs	r2, #0
    40ae:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	2200      	movs	r2, #0
    40b4:	725a      	strb	r2, [r3, #9]
}
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	46bd      	mov	sp, r7
    40ba:	b002      	add	sp, #8
    40bc:	bd80      	pop	{r7, pc}
    40be:	46c0      	nop			; (mov r8, r8)

000040c0 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b082      	sub	sp, #8
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	2201      	movs	r2, #1
    40cc:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	2201      	movs	r2, #1
    40d2:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	2200      	movs	r2, #0
    40d8:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	2201      	movs	r2, #1
    40de:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	2207      	movs	r2, #7
    40e4:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	2200      	movs	r2, #0
    40ea:	715a      	strb	r2, [r3, #5]
}
    40ec:	46c0      	nop			; (mov r8, r8)
    40ee:	46bd      	mov	sp, r7
    40f0:	b002      	add	sp, #8
    40f2:	bd80      	pop	{r7, pc}

000040f4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b082      	sub	sp, #8
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	2203      	movs	r2, #3
    4100:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	2200      	movs	r2, #0
    4106:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	2201      	movs	r2, #1
    410c:	709a      	strb	r2, [r3, #2]
}
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	46bd      	mov	sp, r7
    4112:	b002      	add	sp, #8
    4114:	bd80      	pop	{r7, pc}
    4116:	46c0      	nop			; (mov r8, r8)

00004118 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4118:	b580      	push	{r7, lr}
    411a:	b082      	sub	sp, #8
    411c:	af00      	add	r7, sp, #0
    411e:	0002      	movs	r2, r0
    4120:	1dfb      	adds	r3, r7, #7
    4122:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4124:	4a03      	ldr	r2, [pc, #12]	; (4134 <system_cpu_clock_set_divider+0x1c>)
    4126:	1dfb      	adds	r3, r7, #7
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	7213      	strb	r3, [r2, #8]
}
    412c:	46c0      	nop			; (mov r8, r8)
    412e:	46bd      	mov	sp, r7
    4130:	b002      	add	sp, #8
    4132:	bd80      	pop	{r7, pc}
    4134:	40000400 	.word	0x40000400

00004138 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4138:	b580      	push	{r7, lr}
    413a:	b082      	sub	sp, #8
    413c:	af00      	add	r7, sp, #0
    413e:	0002      	movs	r2, r0
    4140:	1dfb      	adds	r3, r7, #7
    4142:	701a      	strb	r2, [r3, #0]
    4144:	1dbb      	adds	r3, r7, #6
    4146:	1c0a      	adds	r2, r1, #0
    4148:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    414a:	1dfb      	adds	r3, r7, #7
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	2b01      	cmp	r3, #1
    4150:	d008      	beq.n	4164 <system_apb_clock_set_divider+0x2c>
    4152:	2b02      	cmp	r3, #2
    4154:	d00b      	beq.n	416e <system_apb_clock_set_divider+0x36>
    4156:	2b00      	cmp	r3, #0
    4158:	d10e      	bne.n	4178 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    415a:	4a0b      	ldr	r2, [pc, #44]	; (4188 <system_apb_clock_set_divider+0x50>)
    415c:	1dbb      	adds	r3, r7, #6
    415e:	781b      	ldrb	r3, [r3, #0]
    4160:	7253      	strb	r3, [r2, #9]
			break;
    4162:	e00b      	b.n	417c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4164:	4a08      	ldr	r2, [pc, #32]	; (4188 <system_apb_clock_set_divider+0x50>)
    4166:	1dbb      	adds	r3, r7, #6
    4168:	781b      	ldrb	r3, [r3, #0]
    416a:	7293      	strb	r3, [r2, #10]
			break;
    416c:	e006      	b.n	417c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    416e:	4a06      	ldr	r2, [pc, #24]	; (4188 <system_apb_clock_set_divider+0x50>)
    4170:	1dbb      	adds	r3, r7, #6
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	72d3      	strb	r3, [r2, #11]
			break;
    4176:	e001      	b.n	417c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4178:	2317      	movs	r3, #23
    417a:	e000      	b.n	417e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    417c:	2300      	movs	r3, #0
}
    417e:	0018      	movs	r0, r3
    4180:	46bd      	mov	sp, r7
    4182:	b002      	add	sp, #8
    4184:	bd80      	pop	{r7, pc}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	40000400 	.word	0x40000400

0000418c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    418c:	b580      	push	{r7, lr}
    418e:	b082      	sub	sp, #8
    4190:	af00      	add	r7, sp, #0
    4192:	0002      	movs	r2, r0
    4194:	1dfb      	adds	r3, r7, #7
    4196:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4198:	4a08      	ldr	r2, [pc, #32]	; (41bc <system_flash_set_waitstates+0x30>)
    419a:	1dfb      	adds	r3, r7, #7
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	210f      	movs	r1, #15
    41a0:	400b      	ands	r3, r1
    41a2:	b2d9      	uxtb	r1, r3
    41a4:	6853      	ldr	r3, [r2, #4]
    41a6:	200f      	movs	r0, #15
    41a8:	4001      	ands	r1, r0
    41aa:	0049      	lsls	r1, r1, #1
    41ac:	201e      	movs	r0, #30
    41ae:	4383      	bics	r3, r0
    41b0:	430b      	orrs	r3, r1
    41b2:	6053      	str	r3, [r2, #4]
}
    41b4:	46c0      	nop			; (mov r8, r8)
    41b6:	46bd      	mov	sp, r7
    41b8:	b002      	add	sp, #8
    41ba:	bd80      	pop	{r7, pc}
    41bc:	41004000 	.word	0x41004000

000041c0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    41c0:	b580      	push	{r7, lr}
    41c2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    41c4:	46c0      	nop			; (mov r8, r8)
    41c6:	4b04      	ldr	r3, [pc, #16]	; (41d8 <_system_dfll_wait_for_sync+0x18>)
    41c8:	68db      	ldr	r3, [r3, #12]
    41ca:	2210      	movs	r2, #16
    41cc:	4013      	ands	r3, r2
    41ce:	d0fa      	beq.n	41c6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    41d0:	46c0      	nop			; (mov r8, r8)
    41d2:	46bd      	mov	sp, r7
    41d4:	bd80      	pop	{r7, pc}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	40000800 	.word	0x40000800

000041dc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    41dc:	b580      	push	{r7, lr}
    41de:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    41e0:	4b0c      	ldr	r3, [pc, #48]	; (4214 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    41e2:	2202      	movs	r2, #2
    41e4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    41e6:	4b0c      	ldr	r3, [pc, #48]	; (4218 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    41e8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    41ea:	4a0a      	ldr	r2, [pc, #40]	; (4214 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    41ec:	4b0b      	ldr	r3, [pc, #44]	; (421c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    41ee:	689b      	ldr	r3, [r3, #8]
    41f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    41f2:	4a08      	ldr	r2, [pc, #32]	; (4214 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    41f4:	4b09      	ldr	r3, [pc, #36]	; (421c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    41f6:	685b      	ldr	r3, [r3, #4]
    41f8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    41fa:	4b06      	ldr	r3, [pc, #24]	; (4214 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    41fc:	2200      	movs	r2, #0
    41fe:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4200:	4b05      	ldr	r3, [pc, #20]	; (4218 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4202:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4204:	4a03      	ldr	r2, [pc, #12]	; (4214 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4206:	4b05      	ldr	r3, [pc, #20]	; (421c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	b29b      	uxth	r3, r3
    420c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	46bd      	mov	sp, r7
    4212:	bd80      	pop	{r7, pc}
    4214:	40000800 	.word	0x40000800
    4218:	000041c1 	.word	0x000041c1
    421c:	20000050 	.word	0x20000050

00004220 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4220:	b580      	push	{r7, lr}
    4222:	b082      	sub	sp, #8
    4224:	af00      	add	r7, sp, #0
    4226:	0002      	movs	r2, r0
    4228:	1dfb      	adds	r3, r7, #7
    422a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    422c:	1dfb      	adds	r3, r7, #7
    422e:	781b      	ldrb	r3, [r3, #0]
    4230:	2b08      	cmp	r3, #8
    4232:	d840      	bhi.n	42b6 <system_clock_source_get_hz+0x96>
    4234:	009a      	lsls	r2, r3, #2
    4236:	4b22      	ldr	r3, [pc, #136]	; (42c0 <system_clock_source_get_hz+0xa0>)
    4238:	18d3      	adds	r3, r2, r3
    423a:	681b      	ldr	r3, [r3, #0]
    423c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    423e:	4b21      	ldr	r3, [pc, #132]	; (42c4 <system_clock_source_get_hz+0xa4>)
    4240:	691b      	ldr	r3, [r3, #16]
    4242:	e039      	b.n	42b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4244:	4b20      	ldr	r3, [pc, #128]	; (42c8 <system_clock_source_get_hz+0xa8>)
    4246:	6a1b      	ldr	r3, [r3, #32]
    4248:	059b      	lsls	r3, r3, #22
    424a:	0f9b      	lsrs	r3, r3, #30
    424c:	b2db      	uxtb	r3, r3
    424e:	001a      	movs	r2, r3
    4250:	4b1e      	ldr	r3, [pc, #120]	; (42cc <system_clock_source_get_hz+0xac>)
    4252:	40d3      	lsrs	r3, r2
    4254:	e030      	b.n	42b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4256:	2380      	movs	r3, #128	; 0x80
    4258:	021b      	lsls	r3, r3, #8
    425a:	e02d      	b.n	42b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	021b      	lsls	r3, r3, #8
    4260:	e02a      	b.n	42b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4262:	4b18      	ldr	r3, [pc, #96]	; (42c4 <system_clock_source_get_hz+0xa4>)
    4264:	695b      	ldr	r3, [r3, #20]
    4266:	e027      	b.n	42b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4268:	4b16      	ldr	r3, [pc, #88]	; (42c4 <system_clock_source_get_hz+0xa4>)
    426a:	681b      	ldr	r3, [r3, #0]
    426c:	2202      	movs	r2, #2
    426e:	4013      	ands	r3, r2
    4270:	d101      	bne.n	4276 <system_clock_source_get_hz+0x56>
			return 0;
    4272:	2300      	movs	r3, #0
    4274:	e020      	b.n	42b8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4276:	4b16      	ldr	r3, [pc, #88]	; (42d0 <system_clock_source_get_hz+0xb0>)
    4278:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    427a:	4b12      	ldr	r3, [pc, #72]	; (42c4 <system_clock_source_get_hz+0xa4>)
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	2204      	movs	r2, #4
    4280:	4013      	ands	r3, r2
    4282:	d009      	beq.n	4298 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4284:	2000      	movs	r0, #0
    4286:	4b13      	ldr	r3, [pc, #76]	; (42d4 <system_clock_source_get_hz+0xb4>)
    4288:	4798      	blx	r3
    428a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    428c:	4b0d      	ldr	r3, [pc, #52]	; (42c4 <system_clock_source_get_hz+0xa4>)
    428e:	689b      	ldr	r3, [r3, #8]
    4290:	041b      	lsls	r3, r3, #16
    4292:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4294:	4353      	muls	r3, r2
    4296:	e00f      	b.n	42b8 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4298:	4b0f      	ldr	r3, [pc, #60]	; (42d8 <system_clock_source_get_hz+0xb8>)
    429a:	e00d      	b.n	42b8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    429c:	4a0a      	ldr	r2, [pc, #40]	; (42c8 <system_clock_source_get_hz+0xa8>)
    429e:	2350      	movs	r3, #80	; 0x50
    42a0:	5cd3      	ldrb	r3, [r2, r3]
    42a2:	b2db      	uxtb	r3, r3
    42a4:	001a      	movs	r2, r3
    42a6:	2304      	movs	r3, #4
    42a8:	4013      	ands	r3, r2
    42aa:	d101      	bne.n	42b0 <system_clock_source_get_hz+0x90>
			return 0;
    42ac:	2300      	movs	r3, #0
    42ae:	e003      	b.n	42b8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    42b0:	4b04      	ldr	r3, [pc, #16]	; (42c4 <system_clock_source_get_hz+0xa4>)
    42b2:	68db      	ldr	r3, [r3, #12]
    42b4:	e000      	b.n	42b8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    42b6:	2300      	movs	r3, #0
	}
}
    42b8:	0018      	movs	r0, r3
    42ba:	46bd      	mov	sp, r7
    42bc:	b002      	add	sp, #8
    42be:	bd80      	pop	{r7, pc}
    42c0:	00008ef4 	.word	0x00008ef4
    42c4:	20000050 	.word	0x20000050
    42c8:	40000800 	.word	0x40000800
    42cc:	007a1200 	.word	0x007a1200
    42d0:	000041c1 	.word	0x000041c1
    42d4:	00004ad9 	.word	0x00004ad9
    42d8:	02dc6c00 	.word	0x02dc6c00

000042dc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    42dc:	b580      	push	{r7, lr}
    42de:	b084      	sub	sp, #16
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    42e4:	4b1a      	ldr	r3, [pc, #104]	; (4350 <system_clock_source_osc8m_set_config+0x74>)
    42e6:	6a1b      	ldr	r3, [r3, #32]
    42e8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	781b      	ldrb	r3, [r3, #0]
    42ee:	1c1a      	adds	r2, r3, #0
    42f0:	2303      	movs	r3, #3
    42f2:	4013      	ands	r3, r2
    42f4:	b2da      	uxtb	r2, r3
    42f6:	230d      	movs	r3, #13
    42f8:	18fb      	adds	r3, r7, r3
    42fa:	2103      	movs	r1, #3
    42fc:	400a      	ands	r2, r1
    42fe:	0010      	movs	r0, r2
    4300:	781a      	ldrb	r2, [r3, #0]
    4302:	2103      	movs	r1, #3
    4304:	438a      	bics	r2, r1
    4306:	1c11      	adds	r1, r2, #0
    4308:	1c02      	adds	r2, r0, #0
    430a:	430a      	orrs	r2, r1
    430c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	789a      	ldrb	r2, [r3, #2]
    4312:	230c      	movs	r3, #12
    4314:	18fb      	adds	r3, r7, r3
    4316:	01d0      	lsls	r0, r2, #7
    4318:	781a      	ldrb	r2, [r3, #0]
    431a:	217f      	movs	r1, #127	; 0x7f
    431c:	400a      	ands	r2, r1
    431e:	1c11      	adds	r1, r2, #0
    4320:	1c02      	adds	r2, r0, #0
    4322:	430a      	orrs	r2, r1
    4324:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	785a      	ldrb	r2, [r3, #1]
    432a:	230c      	movs	r3, #12
    432c:	18fb      	adds	r3, r7, r3
    432e:	2101      	movs	r1, #1
    4330:	400a      	ands	r2, r1
    4332:	0190      	lsls	r0, r2, #6
    4334:	781a      	ldrb	r2, [r3, #0]
    4336:	2140      	movs	r1, #64	; 0x40
    4338:	438a      	bics	r2, r1
    433a:	1c11      	adds	r1, r2, #0
    433c:	1c02      	adds	r2, r0, #0
    433e:	430a      	orrs	r2, r1
    4340:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4342:	4b03      	ldr	r3, [pc, #12]	; (4350 <system_clock_source_osc8m_set_config+0x74>)
    4344:	68fa      	ldr	r2, [r7, #12]
    4346:	621a      	str	r2, [r3, #32]
}
    4348:	46c0      	nop			; (mov r8, r8)
    434a:	46bd      	mov	sp, r7
    434c:	b004      	add	sp, #16
    434e:	bd80      	pop	{r7, pc}
    4350:	40000800 	.word	0x40000800

00004354 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    435c:	4b2f      	ldr	r3, [pc, #188]	; (441c <system_clock_source_osc32k_set_config+0xc8>)
    435e:	699b      	ldr	r3, [r3, #24]
    4360:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	785a      	ldrb	r2, [r3, #1]
    4366:	230c      	movs	r3, #12
    4368:	18fb      	adds	r3, r7, r3
    436a:	2101      	movs	r1, #1
    436c:	400a      	ands	r2, r1
    436e:	00d0      	lsls	r0, r2, #3
    4370:	781a      	ldrb	r2, [r3, #0]
    4372:	2108      	movs	r1, #8
    4374:	438a      	bics	r2, r1
    4376:	1c11      	adds	r1, r2, #0
    4378:	1c02      	adds	r2, r0, #0
    437a:	430a      	orrs	r2, r1
    437c:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	789a      	ldrb	r2, [r3, #2]
    4382:	230c      	movs	r3, #12
    4384:	18fb      	adds	r3, r7, r3
    4386:	2101      	movs	r1, #1
    4388:	400a      	ands	r2, r1
    438a:	0090      	lsls	r0, r2, #2
    438c:	781a      	ldrb	r2, [r3, #0]
    438e:	2104      	movs	r1, #4
    4390:	438a      	bics	r2, r1
    4392:	1c11      	adds	r1, r2, #0
    4394:	1c02      	adds	r2, r0, #0
    4396:	430a      	orrs	r2, r1
    4398:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	781b      	ldrb	r3, [r3, #0]
    439e:	1c1a      	adds	r2, r3, #0
    43a0:	2307      	movs	r3, #7
    43a2:	4013      	ands	r3, r2
    43a4:	b2da      	uxtb	r2, r3
    43a6:	230d      	movs	r3, #13
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	2107      	movs	r1, #7
    43ac:	400a      	ands	r2, r1
    43ae:	0010      	movs	r0, r2
    43b0:	781a      	ldrb	r2, [r3, #0]
    43b2:	2107      	movs	r1, #7
    43b4:	438a      	bics	r2, r1
    43b6:	1c11      	adds	r1, r2, #0
    43b8:	1c02      	adds	r2, r0, #0
    43ba:	430a      	orrs	r2, r1
    43bc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	791a      	ldrb	r2, [r3, #4]
    43c2:	230c      	movs	r3, #12
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	01d0      	lsls	r0, r2, #7
    43c8:	781a      	ldrb	r2, [r3, #0]
    43ca:	217f      	movs	r1, #127	; 0x7f
    43cc:	400a      	ands	r2, r1
    43ce:	1c11      	adds	r1, r2, #0
    43d0:	1c02      	adds	r2, r0, #0
    43d2:	430a      	orrs	r2, r1
    43d4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	78da      	ldrb	r2, [r3, #3]
    43da:	230c      	movs	r3, #12
    43dc:	18fb      	adds	r3, r7, r3
    43de:	2101      	movs	r1, #1
    43e0:	400a      	ands	r2, r1
    43e2:	0190      	lsls	r0, r2, #6
    43e4:	781a      	ldrb	r2, [r3, #0]
    43e6:	2140      	movs	r1, #64	; 0x40
    43e8:	438a      	bics	r2, r1
    43ea:	1c11      	adds	r1, r2, #0
    43ec:	1c02      	adds	r2, r0, #0
    43ee:	430a      	orrs	r2, r1
    43f0:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	795a      	ldrb	r2, [r3, #5]
    43f6:	230d      	movs	r3, #13
    43f8:	18fb      	adds	r3, r7, r3
    43fa:	2101      	movs	r1, #1
    43fc:	400a      	ands	r2, r1
    43fe:	0110      	lsls	r0, r2, #4
    4400:	781a      	ldrb	r2, [r3, #0]
    4402:	2110      	movs	r1, #16
    4404:	438a      	bics	r2, r1
    4406:	1c11      	adds	r1, r2, #0
    4408:	1c02      	adds	r2, r0, #0
    440a:	430a      	orrs	r2, r1
    440c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    440e:	4b03      	ldr	r3, [pc, #12]	; (441c <system_clock_source_osc32k_set_config+0xc8>)
    4410:	68fa      	ldr	r2, [r7, #12]
    4412:	619a      	str	r2, [r3, #24]
}
    4414:	46c0      	nop			; (mov r8, r8)
    4416:	46bd      	mov	sp, r7
    4418:	b004      	add	sp, #16
    441a:	bd80      	pop	{r7, pc}
    441c:	40000800 	.word	0x40000800

00004420 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4420:	b580      	push	{r7, lr}
    4422:	b082      	sub	sp, #8
    4424:	af00      	add	r7, sp, #0
    4426:	0002      	movs	r2, r0
    4428:	1dfb      	adds	r3, r7, #7
    442a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    442c:	1dfb      	adds	r3, r7, #7
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	2b08      	cmp	r3, #8
    4432:	d83b      	bhi.n	44ac <system_clock_source_enable+0x8c>
    4434:	009a      	lsls	r2, r3, #2
    4436:	4b21      	ldr	r3, [pc, #132]	; (44bc <system_clock_source_enable+0x9c>)
    4438:	18d3      	adds	r3, r2, r3
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    443e:	4b20      	ldr	r3, [pc, #128]	; (44c0 <system_clock_source_enable+0xa0>)
    4440:	4a1f      	ldr	r2, [pc, #124]	; (44c0 <system_clock_source_enable+0xa0>)
    4442:	6a12      	ldr	r2, [r2, #32]
    4444:	2102      	movs	r1, #2
    4446:	430a      	orrs	r2, r1
    4448:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    444a:	2300      	movs	r3, #0
    444c:	e031      	b.n	44b2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    444e:	4b1c      	ldr	r3, [pc, #112]	; (44c0 <system_clock_source_enable+0xa0>)
    4450:	4a1b      	ldr	r2, [pc, #108]	; (44c0 <system_clock_source_enable+0xa0>)
    4452:	6992      	ldr	r2, [r2, #24]
    4454:	2102      	movs	r1, #2
    4456:	430a      	orrs	r2, r1
    4458:	619a      	str	r2, [r3, #24]
		break;
    445a:	e029      	b.n	44b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    445c:	4a18      	ldr	r2, [pc, #96]	; (44c0 <system_clock_source_enable+0xa0>)
    445e:	4b18      	ldr	r3, [pc, #96]	; (44c0 <system_clock_source_enable+0xa0>)
    4460:	8a1b      	ldrh	r3, [r3, #16]
    4462:	b29b      	uxth	r3, r3
    4464:	2102      	movs	r1, #2
    4466:	430b      	orrs	r3, r1
    4468:	b29b      	uxth	r3, r3
    446a:	8213      	strh	r3, [r2, #16]
		break;
    446c:	e020      	b.n	44b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    446e:	4a14      	ldr	r2, [pc, #80]	; (44c0 <system_clock_source_enable+0xa0>)
    4470:	4b13      	ldr	r3, [pc, #76]	; (44c0 <system_clock_source_enable+0xa0>)
    4472:	8a9b      	ldrh	r3, [r3, #20]
    4474:	b29b      	uxth	r3, r3
    4476:	2102      	movs	r1, #2
    4478:	430b      	orrs	r3, r1
    447a:	b29b      	uxth	r3, r3
    447c:	8293      	strh	r3, [r2, #20]
		break;
    447e:	e017      	b.n	44b0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4480:	4b10      	ldr	r3, [pc, #64]	; (44c4 <system_clock_source_enable+0xa4>)
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	2202      	movs	r2, #2
    4486:	431a      	orrs	r2, r3
    4488:	4b0e      	ldr	r3, [pc, #56]	; (44c4 <system_clock_source_enable+0xa4>)
    448a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    448c:	4b0e      	ldr	r3, [pc, #56]	; (44c8 <system_clock_source_enable+0xa8>)
    448e:	4798      	blx	r3
		break;
    4490:	e00e      	b.n	44b0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4492:	4a0b      	ldr	r2, [pc, #44]	; (44c0 <system_clock_source_enable+0xa0>)
    4494:	490a      	ldr	r1, [pc, #40]	; (44c0 <system_clock_source_enable+0xa0>)
    4496:	2344      	movs	r3, #68	; 0x44
    4498:	5ccb      	ldrb	r3, [r1, r3]
    449a:	b2db      	uxtb	r3, r3
    449c:	2102      	movs	r1, #2
    449e:	430b      	orrs	r3, r1
    44a0:	b2d9      	uxtb	r1, r3
    44a2:	2344      	movs	r3, #68	; 0x44
    44a4:	54d1      	strb	r1, [r2, r3]
		break;
    44a6:	e003      	b.n	44b0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    44a8:	2300      	movs	r3, #0
    44aa:	e002      	b.n	44b2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    44ac:	2317      	movs	r3, #23
    44ae:	e000      	b.n	44b2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    44b0:	2300      	movs	r3, #0
}
    44b2:	0018      	movs	r0, r3
    44b4:	46bd      	mov	sp, r7
    44b6:	b002      	add	sp, #8
    44b8:	bd80      	pop	{r7, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00008f18 	.word	0x00008f18
    44c0:	40000800 	.word	0x40000800
    44c4:	20000050 	.word	0x20000050
    44c8:	000041dd 	.word	0x000041dd

000044cc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b082      	sub	sp, #8
    44d0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    44d2:	003b      	movs	r3, r7
    44d4:	2201      	movs	r2, #1
    44d6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    44d8:	2300      	movs	r3, #0
    44da:	607b      	str	r3, [r7, #4]
    44dc:	e009      	b.n	44f2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	b2db      	uxtb	r3, r3
    44e2:	003a      	movs	r2, r7
    44e4:	0011      	movs	r1, r2
    44e6:	0018      	movs	r0, r3
    44e8:	4b05      	ldr	r3, [pc, #20]	; (4500 <_switch_peripheral_gclk+0x34>)
    44ea:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	3301      	adds	r3, #1
    44f0:	607b      	str	r3, [r7, #4]
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	2b24      	cmp	r3, #36	; 0x24
    44f6:	d9f2      	bls.n	44de <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    44f8:	46c0      	nop			; (mov r8, r8)
    44fa:	46bd      	mov	sp, r7
    44fc:	b002      	add	sp, #8
    44fe:	bd80      	pop	{r7, pc}
    4500:	000049b5 	.word	0x000049b5

00004504 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4504:	b580      	push	{r7, lr}
    4506:	b0a2      	sub	sp, #136	; 0x88
    4508:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    450a:	4b4f      	ldr	r3, [pc, #316]	; (4648 <system_clock_init+0x144>)
    450c:	22c2      	movs	r2, #194	; 0xc2
    450e:	00d2      	lsls	r2, r2, #3
    4510:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4512:	2000      	movs	r0, #0
    4514:	4b4d      	ldr	r3, [pc, #308]	; (464c <system_clock_init+0x148>)
    4516:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4518:	4b4d      	ldr	r3, [pc, #308]	; (4650 <system_clock_init+0x14c>)
    451a:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    451c:	4a4a      	ldr	r2, [pc, #296]	; (4648 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    451e:	4b4d      	ldr	r3, [pc, #308]	; (4654 <system_clock_init+0x150>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    4524:	b2db      	uxtb	r3, r3
    4526:	1c19      	adds	r1, r3, #0
    4528:	237f      	movs	r3, #127	; 0x7f
    452a:	400b      	ands	r3, r1
    452c:	b2d9      	uxtb	r1, r3
    452e:	6993      	ldr	r3, [r2, #24]
    4530:	207f      	movs	r0, #127	; 0x7f
    4532:	4001      	ands	r1, r0
    4534:	0409      	lsls	r1, r1, #16
    4536:	4848      	ldr	r0, [pc, #288]	; (4658 <system_clock_init+0x154>)
    4538:	4003      	ands	r3, r0
    453a:	430b      	orrs	r3, r1
    453c:	6193      	str	r3, [r2, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    453e:	2380      	movs	r3, #128	; 0x80
    4540:	18fb      	adds	r3, r7, r3
    4542:	0018      	movs	r0, r3
    4544:	4b45      	ldr	r3, [pc, #276]	; (465c <system_clock_init+0x158>)
    4546:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	18fb      	adds	r3, r7, r3
    454c:	2207      	movs	r2, #7
    454e:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    4550:	2380      	movs	r3, #128	; 0x80
    4552:	18fb      	adds	r3, r7, r3
    4554:	2201      	movs	r2, #1
    4556:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    4558:	2380      	movs	r3, #128	; 0x80
    455a:	18fb      	adds	r3, r7, r3
    455c:	2201      	movs	r2, #1
    455e:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    4560:	2380      	movs	r3, #128	; 0x80
    4562:	18fb      	adds	r3, r7, r3
    4564:	2201      	movs	r2, #1
    4566:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    4568:	2380      	movs	r3, #128	; 0x80
    456a:	18fb      	adds	r3, r7, r3
    456c:	2200      	movs	r2, #0
    456e:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4570:	2380      	movs	r3, #128	; 0x80
    4572:	18fb      	adds	r3, r7, r3
    4574:	0018      	movs	r0, r3
    4576:	4b3a      	ldr	r3, [pc, #232]	; (4660 <system_clock_init+0x15c>)
    4578:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    457a:	2004      	movs	r0, #4
    457c:	4b39      	ldr	r3, [pc, #228]	; (4664 <system_clock_init+0x160>)
    457e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4580:	237c      	movs	r3, #124	; 0x7c
    4582:	18fb      	adds	r3, r7, r3
    4584:	0018      	movs	r0, r3
    4586:	4b38      	ldr	r3, [pc, #224]	; (4668 <system_clock_init+0x164>)
    4588:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    458a:	237c      	movs	r3, #124	; 0x7c
    458c:	18fb      	adds	r3, r7, r3
    458e:	2200      	movs	r2, #0
    4590:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4592:	237c      	movs	r3, #124	; 0x7c
    4594:	18fb      	adds	r3, r7, r3
    4596:	2201      	movs	r2, #1
    4598:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    459a:	237c      	movs	r3, #124	; 0x7c
    459c:	18fb      	adds	r3, r7, r3
    459e:	2200      	movs	r2, #0
    45a0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    45a2:	237c      	movs	r3, #124	; 0x7c
    45a4:	18fb      	adds	r3, r7, r3
    45a6:	0018      	movs	r0, r3
    45a8:	4b30      	ldr	r3, [pc, #192]	; (466c <system_clock_init+0x168>)
    45aa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    45ac:	2006      	movs	r0, #6
    45ae:	4b2d      	ldr	r3, [pc, #180]	; (4664 <system_clock_init+0x160>)
    45b0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    45b2:	4b2f      	ldr	r3, [pc, #188]	; (4670 <system_clock_init+0x16c>)
    45b4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    45b6:	2358      	movs	r3, #88	; 0x58
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	0018      	movs	r0, r3
    45bc:	4b2d      	ldr	r3, [pc, #180]	; (4674 <system_clock_init+0x170>)
    45be:	4798      	blx	r3
    45c0:	2358      	movs	r3, #88	; 0x58
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	2204      	movs	r2, #4
    45c6:	701a      	strb	r2, [r3, #0]
    45c8:	2358      	movs	r3, #88	; 0x58
    45ca:	18fb      	adds	r3, r7, r3
    45cc:	2220      	movs	r2, #32
    45ce:	605a      	str	r2, [r3, #4]
    45d0:	2358      	movs	r3, #88	; 0x58
    45d2:	18fb      	adds	r3, r7, r3
    45d4:	2200      	movs	r2, #0
    45d6:	721a      	strb	r2, [r3, #8]
    45d8:	2358      	movs	r3, #88	; 0x58
    45da:	18fb      	adds	r3, r7, r3
    45dc:	2200      	movs	r2, #0
    45de:	725a      	strb	r2, [r3, #9]
    45e0:	2358      	movs	r3, #88	; 0x58
    45e2:	18fb      	adds	r3, r7, r3
    45e4:	0019      	movs	r1, r3
    45e6:	2002      	movs	r0, #2
    45e8:	4b23      	ldr	r3, [pc, #140]	; (4678 <system_clock_init+0x174>)
    45ea:	4798      	blx	r3
    45ec:	2002      	movs	r0, #2
    45ee:	4b23      	ldr	r3, [pc, #140]	; (467c <system_clock_init+0x178>)
    45f0:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    45f2:	2000      	movs	r0, #0
    45f4:	4b22      	ldr	r3, [pc, #136]	; (4680 <system_clock_init+0x17c>)
    45f6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    45f8:	2100      	movs	r1, #0
    45fa:	2000      	movs	r0, #0
    45fc:	4b21      	ldr	r3, [pc, #132]	; (4684 <system_clock_init+0x180>)
    45fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4600:	2100      	movs	r1, #0
    4602:	2001      	movs	r0, #1
    4604:	4b1f      	ldr	r3, [pc, #124]	; (4684 <system_clock_init+0x180>)
    4606:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4608:	2100      	movs	r1, #0
    460a:	2002      	movs	r0, #2
    460c:	4b1d      	ldr	r3, [pc, #116]	; (4684 <system_clock_init+0x180>)
    460e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4610:	1d3b      	adds	r3, r7, #4
    4612:	0018      	movs	r0, r3
    4614:	4b17      	ldr	r3, [pc, #92]	; (4674 <system_clock_init+0x170>)
    4616:	4798      	blx	r3
    4618:	1d3b      	adds	r3, r7, #4
    461a:	2206      	movs	r2, #6
    461c:	701a      	strb	r2, [r3, #0]
    461e:	1d3b      	adds	r3, r7, #4
    4620:	2201      	movs	r2, #1
    4622:	605a      	str	r2, [r3, #4]
    4624:	1d3b      	adds	r3, r7, #4
    4626:	2200      	movs	r2, #0
    4628:	721a      	strb	r2, [r3, #8]
    462a:	1d3b      	adds	r3, r7, #4
    462c:	2200      	movs	r2, #0
    462e:	725a      	strb	r2, [r3, #9]
    4630:	1d3b      	adds	r3, r7, #4
    4632:	0019      	movs	r1, r3
    4634:	2000      	movs	r0, #0
    4636:	4b10      	ldr	r3, [pc, #64]	; (4678 <system_clock_init+0x174>)
    4638:	4798      	blx	r3
    463a:	2000      	movs	r0, #0
    463c:	4b0f      	ldr	r3, [pc, #60]	; (467c <system_clock_init+0x178>)
    463e:	4798      	blx	r3
#endif
}
    4640:	46c0      	nop			; (mov r8, r8)
    4642:	46bd      	mov	sp, r7
    4644:	b022      	add	sp, #136	; 0x88
    4646:	bd80      	pop	{r7, pc}
    4648:	40000800 	.word	0x40000800
    464c:	0000418d 	.word	0x0000418d
    4650:	000044cd 	.word	0x000044cd
    4654:	00806024 	.word	0x00806024
    4658:	ff80ffff 	.word	0xff80ffff
    465c:	000040c1 	.word	0x000040c1
    4660:	00004355 	.word	0x00004355
    4664:	00004421 	.word	0x00004421
    4668:	000040f5 	.word	0x000040f5
    466c:	000042dd 	.word	0x000042dd
    4670:	0000472d 	.word	0x0000472d
    4674:	00004091 	.word	0x00004091
    4678:	0000475d 	.word	0x0000475d
    467c:	00004881 	.word	0x00004881
    4680:	00004119 	.word	0x00004119
    4684:	00004139 	.word	0x00004139

00004688 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0
    468e:	0002      	movs	r2, r0
    4690:	6039      	str	r1, [r7, #0]
    4692:	1dfb      	adds	r3, r7, #7
    4694:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4696:	1dfb      	adds	r3, r7, #7
    4698:	781b      	ldrb	r3, [r3, #0]
    469a:	2b01      	cmp	r3, #1
    469c:	d00a      	beq.n	46b4 <system_apb_clock_set_mask+0x2c>
    469e:	2b02      	cmp	r3, #2
    46a0:	d00f      	beq.n	46c2 <system_apb_clock_set_mask+0x3a>
    46a2:	2b00      	cmp	r3, #0
    46a4:	d114      	bne.n	46d0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    46a6:	4b0e      	ldr	r3, [pc, #56]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46a8:	4a0d      	ldr	r2, [pc, #52]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46aa:	6991      	ldr	r1, [r2, #24]
    46ac:	683a      	ldr	r2, [r7, #0]
    46ae:	430a      	orrs	r2, r1
    46b0:	619a      	str	r2, [r3, #24]
			break;
    46b2:	e00f      	b.n	46d4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    46b4:	4b0a      	ldr	r3, [pc, #40]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46b6:	4a0a      	ldr	r2, [pc, #40]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46b8:	69d1      	ldr	r1, [r2, #28]
    46ba:	683a      	ldr	r2, [r7, #0]
    46bc:	430a      	orrs	r2, r1
    46be:	61da      	str	r2, [r3, #28]
			break;
    46c0:	e008      	b.n	46d4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    46c2:	4b07      	ldr	r3, [pc, #28]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46c4:	4a06      	ldr	r2, [pc, #24]	; (46e0 <system_apb_clock_set_mask+0x58>)
    46c6:	6a11      	ldr	r1, [r2, #32]
    46c8:	683a      	ldr	r2, [r7, #0]
    46ca:	430a      	orrs	r2, r1
    46cc:	621a      	str	r2, [r3, #32]
			break;
    46ce:	e001      	b.n	46d4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    46d0:	2317      	movs	r3, #23
    46d2:	e000      	b.n	46d6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    46d4:	2300      	movs	r3, #0
}
    46d6:	0018      	movs	r0, r3
    46d8:	46bd      	mov	sp, r7
    46da:	b002      	add	sp, #8
    46dc:	bd80      	pop	{r7, pc}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	40000400 	.word	0x40000400

000046e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    46e8:	4b02      	ldr	r3, [pc, #8]	; (46f4 <system_interrupt_enter_critical_section+0x10>)
    46ea:	4798      	blx	r3
}
    46ec:	46c0      	nop			; (mov r8, r8)
    46ee:	46bd      	mov	sp, r7
    46f0:	bd80      	pop	{r7, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	00003ffd 	.word	0x00003ffd

000046f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    46fc:	4b02      	ldr	r3, [pc, #8]	; (4708 <system_interrupt_leave_critical_section+0x10>)
    46fe:	4798      	blx	r3
}
    4700:	46c0      	nop			; (mov r8, r8)
    4702:	46bd      	mov	sp, r7
    4704:	bd80      	pop	{r7, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	00004051 	.word	0x00004051

0000470c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    470c:	b580      	push	{r7, lr}
    470e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4710:	4b05      	ldr	r3, [pc, #20]	; (4728 <system_gclk_is_syncing+0x1c>)
    4712:	785b      	ldrb	r3, [r3, #1]
    4714:	b2db      	uxtb	r3, r3
    4716:	b25b      	sxtb	r3, r3
    4718:	2b00      	cmp	r3, #0
    471a:	da01      	bge.n	4720 <system_gclk_is_syncing+0x14>
		return true;
    471c:	2301      	movs	r3, #1
    471e:	e000      	b.n	4722 <system_gclk_is_syncing+0x16>
	}

	return false;
    4720:	2300      	movs	r3, #0
}
    4722:	0018      	movs	r0, r3
    4724:	46bd      	mov	sp, r7
    4726:	bd80      	pop	{r7, pc}
    4728:	40000c00 	.word	0x40000c00

0000472c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    472c:	b580      	push	{r7, lr}
    472e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4730:	2108      	movs	r1, #8
    4732:	2000      	movs	r0, #0
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <system_gclk_init+0x28>)
    4736:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4738:	4b07      	ldr	r3, [pc, #28]	; (4758 <system_gclk_init+0x2c>)
    473a:	2201      	movs	r2, #1
    473c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	4b05      	ldr	r3, [pc, #20]	; (4758 <system_gclk_init+0x2c>)
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	b2db      	uxtb	r3, r3
    4746:	001a      	movs	r2, r3
    4748:	2301      	movs	r3, #1
    474a:	4013      	ands	r3, r2
    474c:	d1f8      	bne.n	4740 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    474e:	46c0      	nop			; (mov r8, r8)
    4750:	46bd      	mov	sp, r7
    4752:	bd80      	pop	{r7, pc}
    4754:	00004689 	.word	0x00004689
    4758:	40000c00 	.word	0x40000c00

0000475c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    475c:	b580      	push	{r7, lr}
    475e:	b086      	sub	sp, #24
    4760:	af00      	add	r7, sp, #0
    4762:	0002      	movs	r2, r0
    4764:	6039      	str	r1, [r7, #0]
    4766:	1dfb      	adds	r3, r7, #7
    4768:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    476a:	1dfb      	adds	r3, r7, #7
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4770:	1dfb      	adds	r3, r7, #7
    4772:	781b      	ldrb	r3, [r3, #0]
    4774:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4776:	683b      	ldr	r3, [r7, #0]
    4778:	781b      	ldrb	r3, [r3, #0]
    477a:	021b      	lsls	r3, r3, #8
    477c:	001a      	movs	r2, r3
    477e:	697b      	ldr	r3, [r7, #20]
    4780:	4313      	orrs	r3, r2
    4782:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4784:	683b      	ldr	r3, [r7, #0]
    4786:	785b      	ldrb	r3, [r3, #1]
    4788:	2b00      	cmp	r3, #0
    478a:	d004      	beq.n	4796 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    478c:	697b      	ldr	r3, [r7, #20]
    478e:	2280      	movs	r2, #128	; 0x80
    4790:	02d2      	lsls	r2, r2, #11
    4792:	4313      	orrs	r3, r2
    4794:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4796:	683b      	ldr	r3, [r7, #0]
    4798:	7a5b      	ldrb	r3, [r3, #9]
    479a:	2b00      	cmp	r3, #0
    479c:	d004      	beq.n	47a8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    479e:	697b      	ldr	r3, [r7, #20]
    47a0:	2280      	movs	r2, #128	; 0x80
    47a2:	0312      	lsls	r2, r2, #12
    47a4:	4313      	orrs	r3, r2
    47a6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    47a8:	683b      	ldr	r3, [r7, #0]
    47aa:	685b      	ldr	r3, [r3, #4]
    47ac:	2b01      	cmp	r3, #1
    47ae:	d92c      	bls.n	480a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    47b0:	683b      	ldr	r3, [r7, #0]
    47b2:	685a      	ldr	r2, [r3, #4]
    47b4:	683b      	ldr	r3, [r7, #0]
    47b6:	685b      	ldr	r3, [r3, #4]
    47b8:	3b01      	subs	r3, #1
    47ba:	4013      	ands	r3, r2
    47bc:	d11a      	bne.n	47f4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    47be:	2300      	movs	r3, #0
    47c0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    47c2:	2302      	movs	r3, #2
    47c4:	60bb      	str	r3, [r7, #8]
    47c6:	e005      	b.n	47d4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	3301      	adds	r3, #1
    47cc:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    47ce:	68bb      	ldr	r3, [r7, #8]
    47d0:	005b      	lsls	r3, r3, #1
    47d2:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    47d4:	683b      	ldr	r3, [r7, #0]
    47d6:	685a      	ldr	r2, [r3, #4]
    47d8:	68bb      	ldr	r3, [r7, #8]
    47da:	429a      	cmp	r2, r3
    47dc:	d8f4      	bhi.n	47c8 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	021b      	lsls	r3, r3, #8
    47e2:	693a      	ldr	r2, [r7, #16]
    47e4:	4313      	orrs	r3, r2
    47e6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    47e8:	697b      	ldr	r3, [r7, #20]
    47ea:	2280      	movs	r2, #128	; 0x80
    47ec:	0352      	lsls	r2, r2, #13
    47ee:	4313      	orrs	r3, r2
    47f0:	617b      	str	r3, [r7, #20]
    47f2:	e00a      	b.n	480a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    47f4:	683b      	ldr	r3, [r7, #0]
    47f6:	685b      	ldr	r3, [r3, #4]
    47f8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    47fa:	693a      	ldr	r2, [r7, #16]
    47fc:	4313      	orrs	r3, r2
    47fe:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4800:	697b      	ldr	r3, [r7, #20]
    4802:	2280      	movs	r2, #128	; 0x80
    4804:	0292      	lsls	r2, r2, #10
    4806:	4313      	orrs	r3, r2
    4808:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    480a:	683b      	ldr	r3, [r7, #0]
    480c:	7a1b      	ldrb	r3, [r3, #8]
    480e:	2b00      	cmp	r3, #0
    4810:	d004      	beq.n	481c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4812:	697b      	ldr	r3, [r7, #20]
    4814:	2280      	movs	r2, #128	; 0x80
    4816:	0392      	lsls	r2, r2, #14
    4818:	4313      	orrs	r3, r2
    481a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    481c:	46c0      	nop			; (mov r8, r8)
    481e:	4b13      	ldr	r3, [pc, #76]	; (486c <system_gclk_gen_set_config+0x110>)
    4820:	4798      	blx	r3
    4822:	1e03      	subs	r3, r0, #0
    4824:	d1fb      	bne.n	481e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4826:	4b12      	ldr	r3, [pc, #72]	; (4870 <system_gclk_gen_set_config+0x114>)
    4828:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    482a:	4a12      	ldr	r2, [pc, #72]	; (4874 <system_gclk_gen_set_config+0x118>)
    482c:	1dfb      	adds	r3, r7, #7
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	4b0d      	ldr	r3, [pc, #52]	; (486c <system_gclk_gen_set_config+0x110>)
    4836:	4798      	blx	r3
    4838:	1e03      	subs	r3, r0, #0
    483a:	d1fb      	bne.n	4834 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    483c:	4b0e      	ldr	r3, [pc, #56]	; (4878 <system_gclk_gen_set_config+0x11c>)
    483e:	693a      	ldr	r2, [r7, #16]
    4840:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	4b09      	ldr	r3, [pc, #36]	; (486c <system_gclk_gen_set_config+0x110>)
    4846:	4798      	blx	r3
    4848:	1e03      	subs	r3, r0, #0
    484a:	d1fb      	bne.n	4844 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    484c:	4b0a      	ldr	r3, [pc, #40]	; (4878 <system_gclk_gen_set_config+0x11c>)
    484e:	4a0a      	ldr	r2, [pc, #40]	; (4878 <system_gclk_gen_set_config+0x11c>)
    4850:	6851      	ldr	r1, [r2, #4]
    4852:	2280      	movs	r2, #128	; 0x80
    4854:	0252      	lsls	r2, r2, #9
    4856:	4011      	ands	r1, r2
    4858:	697a      	ldr	r2, [r7, #20]
    485a:	430a      	orrs	r2, r1
    485c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    485e:	4b07      	ldr	r3, [pc, #28]	; (487c <system_gclk_gen_set_config+0x120>)
    4860:	4798      	blx	r3
}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	46bd      	mov	sp, r7
    4866:	b006      	add	sp, #24
    4868:	bd80      	pop	{r7, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	0000470d 	.word	0x0000470d
    4870:	000046e5 	.word	0x000046e5
    4874:	40000c08 	.word	0x40000c08
    4878:	40000c00 	.word	0x40000c00
    487c:	000046f9 	.word	0x000046f9

00004880 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4880:	b580      	push	{r7, lr}
    4882:	b082      	sub	sp, #8
    4884:	af00      	add	r7, sp, #0
    4886:	0002      	movs	r2, r0
    4888:	1dfb      	adds	r3, r7, #7
    488a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    488c:	46c0      	nop			; (mov r8, r8)
    488e:	4b0e      	ldr	r3, [pc, #56]	; (48c8 <system_gclk_gen_enable+0x48>)
    4890:	4798      	blx	r3
    4892:	1e03      	subs	r3, r0, #0
    4894:	d1fb      	bne.n	488e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4896:	4b0d      	ldr	r3, [pc, #52]	; (48cc <system_gclk_gen_enable+0x4c>)
    4898:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    489a:	4a0d      	ldr	r2, [pc, #52]	; (48d0 <system_gclk_gen_enable+0x50>)
    489c:	1dfb      	adds	r3, r7, #7
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	4b08      	ldr	r3, [pc, #32]	; (48c8 <system_gclk_gen_enable+0x48>)
    48a6:	4798      	blx	r3
    48a8:	1e03      	subs	r3, r0, #0
    48aa:	d1fb      	bne.n	48a4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    48ac:	4b09      	ldr	r3, [pc, #36]	; (48d4 <system_gclk_gen_enable+0x54>)
    48ae:	4a09      	ldr	r2, [pc, #36]	; (48d4 <system_gclk_gen_enable+0x54>)
    48b0:	6852      	ldr	r2, [r2, #4]
    48b2:	2180      	movs	r1, #128	; 0x80
    48b4:	0249      	lsls	r1, r1, #9
    48b6:	430a      	orrs	r2, r1
    48b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    48ba:	4b07      	ldr	r3, [pc, #28]	; (48d8 <system_gclk_gen_enable+0x58>)
    48bc:	4798      	blx	r3
}
    48be:	46c0      	nop			; (mov r8, r8)
    48c0:	46bd      	mov	sp, r7
    48c2:	b002      	add	sp, #8
    48c4:	bd80      	pop	{r7, pc}
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	0000470d 	.word	0x0000470d
    48cc:	000046e5 	.word	0x000046e5
    48d0:	40000c04 	.word	0x40000c04
    48d4:	40000c00 	.word	0x40000c00
    48d8:	000046f9 	.word	0x000046f9

000048dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    48dc:	b580      	push	{r7, lr}
    48de:	b086      	sub	sp, #24
    48e0:	af00      	add	r7, sp, #0
    48e2:	0002      	movs	r2, r0
    48e4:	1dfb      	adds	r3, r7, #7
    48e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    48e8:	46c0      	nop			; (mov r8, r8)
    48ea:	4b2a      	ldr	r3, [pc, #168]	; (4994 <system_gclk_gen_get_hz+0xb8>)
    48ec:	4798      	blx	r3
    48ee:	1e03      	subs	r3, r0, #0
    48f0:	d1fb      	bne.n	48ea <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    48f2:	4b29      	ldr	r3, [pc, #164]	; (4998 <system_gclk_gen_get_hz+0xbc>)
    48f4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    48f6:	4a29      	ldr	r2, [pc, #164]	; (499c <system_gclk_gen_get_hz+0xc0>)
    48f8:	1dfb      	adds	r3, r7, #7
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	4b24      	ldr	r3, [pc, #144]	; (4994 <system_gclk_gen_get_hz+0xb8>)
    4902:	4798      	blx	r3
    4904:	1e03      	subs	r3, r0, #0
    4906:	d1fb      	bne.n	4900 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4908:	4b25      	ldr	r3, [pc, #148]	; (49a0 <system_gclk_gen_get_hz+0xc4>)
    490a:	685b      	ldr	r3, [r3, #4]
    490c:	04db      	lsls	r3, r3, #19
    490e:	0edb      	lsrs	r3, r3, #27
    4910:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4912:	0018      	movs	r0, r3
    4914:	4b23      	ldr	r3, [pc, #140]	; (49a4 <system_gclk_gen_get_hz+0xc8>)
    4916:	4798      	blx	r3
    4918:	0003      	movs	r3, r0
    491a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    491c:	4a1f      	ldr	r2, [pc, #124]	; (499c <system_gclk_gen_get_hz+0xc0>)
    491e:	1dfb      	adds	r3, r7, #7
    4920:	781b      	ldrb	r3, [r3, #0]
    4922:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4924:	4b1e      	ldr	r3, [pc, #120]	; (49a0 <system_gclk_gen_get_hz+0xc4>)
    4926:	685b      	ldr	r3, [r3, #4]
    4928:	02db      	lsls	r3, r3, #11
    492a:	0fdb      	lsrs	r3, r3, #31
    492c:	b2da      	uxtb	r2, r3
    492e:	2313      	movs	r3, #19
    4930:	18fb      	adds	r3, r7, r3
    4932:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4934:	4a1c      	ldr	r2, [pc, #112]	; (49a8 <system_gclk_gen_get_hz+0xcc>)
    4936:	1dfb      	adds	r3, r7, #7
    4938:	781b      	ldrb	r3, [r3, #0]
    493a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    493c:	46c0      	nop			; (mov r8, r8)
    493e:	4b15      	ldr	r3, [pc, #84]	; (4994 <system_gclk_gen_get_hz+0xb8>)
    4940:	4798      	blx	r3
    4942:	1e03      	subs	r3, r0, #0
    4944:	d1fb      	bne.n	493e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4946:	4b16      	ldr	r3, [pc, #88]	; (49a0 <system_gclk_gen_get_hz+0xc4>)
    4948:	689b      	ldr	r3, [r3, #8]
    494a:	021b      	lsls	r3, r3, #8
    494c:	0c1b      	lsrs	r3, r3, #16
    494e:	b29b      	uxth	r3, r3
    4950:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4952:	4b16      	ldr	r3, [pc, #88]	; (49ac <system_gclk_gen_get_hz+0xd0>)
    4954:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4956:	2313      	movs	r3, #19
    4958:	18fb      	adds	r3, r7, r3
    495a:	781b      	ldrb	r3, [r3, #0]
    495c:	2b00      	cmp	r3, #0
    495e:	d109      	bne.n	4974 <system_gclk_gen_get_hz+0x98>
    4960:	68fb      	ldr	r3, [r7, #12]
    4962:	2b01      	cmp	r3, #1
    4964:	d906      	bls.n	4974 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4966:	4b12      	ldr	r3, [pc, #72]	; (49b0 <system_gclk_gen_get_hz+0xd4>)
    4968:	68f9      	ldr	r1, [r7, #12]
    496a:	6978      	ldr	r0, [r7, #20]
    496c:	4798      	blx	r3
    496e:	0003      	movs	r3, r0
    4970:	617b      	str	r3, [r7, #20]
    4972:	e00a      	b.n	498a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4974:	2313      	movs	r3, #19
    4976:	18fb      	adds	r3, r7, r3
    4978:	781b      	ldrb	r3, [r3, #0]
    497a:	2b00      	cmp	r3, #0
    497c:	d005      	beq.n	498a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    497e:	68fb      	ldr	r3, [r7, #12]
    4980:	3301      	adds	r3, #1
    4982:	697a      	ldr	r2, [r7, #20]
    4984:	40da      	lsrs	r2, r3
    4986:	0013      	movs	r3, r2
    4988:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    498a:	697b      	ldr	r3, [r7, #20]
}
    498c:	0018      	movs	r0, r3
    498e:	46bd      	mov	sp, r7
    4990:	b006      	add	sp, #24
    4992:	bd80      	pop	{r7, pc}
    4994:	0000470d 	.word	0x0000470d
    4998:	000046e5 	.word	0x000046e5
    499c:	40000c04 	.word	0x40000c04
    49a0:	40000c00 	.word	0x40000c00
    49a4:	00004221 	.word	0x00004221
    49a8:	40000c08 	.word	0x40000c08
    49ac:	000046f9 	.word	0x000046f9
    49b0:	000073b5 	.word	0x000073b5

000049b4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    49b4:	b580      	push	{r7, lr}
    49b6:	b084      	sub	sp, #16
    49b8:	af00      	add	r7, sp, #0
    49ba:	0002      	movs	r2, r0
    49bc:	6039      	str	r1, [r7, #0]
    49be:	1dfb      	adds	r3, r7, #7
    49c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    49c2:	1dfb      	adds	r3, r7, #7
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    49c8:	683b      	ldr	r3, [r7, #0]
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	021b      	lsls	r3, r3, #8
    49ce:	001a      	movs	r2, r3
    49d0:	68fb      	ldr	r3, [r7, #12]
    49d2:	4313      	orrs	r3, r2
    49d4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    49d6:	1dfb      	adds	r3, r7, #7
    49d8:	781b      	ldrb	r3, [r3, #0]
    49da:	0018      	movs	r0, r3
    49dc:	4b04      	ldr	r3, [pc, #16]	; (49f0 <system_gclk_chan_set_config+0x3c>)
    49de:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    49e0:	4b04      	ldr	r3, [pc, #16]	; (49f4 <system_gclk_chan_set_config+0x40>)
    49e2:	68fa      	ldr	r2, [r7, #12]
    49e4:	b292      	uxth	r2, r2
    49e6:	805a      	strh	r2, [r3, #2]
}
    49e8:	46c0      	nop			; (mov r8, r8)
    49ea:	46bd      	mov	sp, r7
    49ec:	b004      	add	sp, #16
    49ee:	bd80      	pop	{r7, pc}
    49f0:	00004a41 	.word	0x00004a41
    49f4:	40000c00 	.word	0x40000c00

000049f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b082      	sub	sp, #8
    49fc:	af00      	add	r7, sp, #0
    49fe:	0002      	movs	r2, r0
    4a00:	1dfb      	adds	r3, r7, #7
    4a02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4a04:	4b0a      	ldr	r3, [pc, #40]	; (4a30 <system_gclk_chan_enable+0x38>)
    4a06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a08:	4a0a      	ldr	r2, [pc, #40]	; (4a34 <system_gclk_chan_enable+0x3c>)
    4a0a:	1dfb      	adds	r3, r7, #7
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a10:	4909      	ldr	r1, [pc, #36]	; (4a38 <system_gclk_chan_enable+0x40>)
    4a12:	4b09      	ldr	r3, [pc, #36]	; (4a38 <system_gclk_chan_enable+0x40>)
    4a14:	885b      	ldrh	r3, [r3, #2]
    4a16:	b29b      	uxth	r3, r3
    4a18:	2280      	movs	r2, #128	; 0x80
    4a1a:	01d2      	lsls	r2, r2, #7
    4a1c:	4313      	orrs	r3, r2
    4a1e:	b29b      	uxth	r3, r3
    4a20:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4a22:	4b06      	ldr	r3, [pc, #24]	; (4a3c <system_gclk_chan_enable+0x44>)
    4a24:	4798      	blx	r3
}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	46bd      	mov	sp, r7
    4a2a:	b002      	add	sp, #8
    4a2c:	bd80      	pop	{r7, pc}
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	000046e5 	.word	0x000046e5
    4a34:	40000c02 	.word	0x40000c02
    4a38:	40000c00 	.word	0x40000c00
    4a3c:	000046f9 	.word	0x000046f9

00004a40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a40:	b580      	push	{r7, lr}
    4a42:	b084      	sub	sp, #16
    4a44:	af00      	add	r7, sp, #0
    4a46:	0002      	movs	r2, r0
    4a48:	1dfb      	adds	r3, r7, #7
    4a4a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4a4c:	4b1c      	ldr	r3, [pc, #112]	; (4ac0 <system_gclk_chan_disable+0x80>)
    4a4e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a50:	4a1c      	ldr	r2, [pc, #112]	; (4ac4 <system_gclk_chan_disable+0x84>)
    4a52:	1dfb      	adds	r3, r7, #7
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a58:	4b1b      	ldr	r3, [pc, #108]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a5a:	885b      	ldrh	r3, [r3, #2]
    4a5c:	051b      	lsls	r3, r3, #20
    4a5e:	0f1b      	lsrs	r3, r3, #28
    4a60:	b2db      	uxtb	r3, r3
    4a62:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4a64:	4a18      	ldr	r2, [pc, #96]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a66:	8853      	ldrh	r3, [r2, #2]
    4a68:	4918      	ldr	r1, [pc, #96]	; (4acc <system_gclk_chan_disable+0x8c>)
    4a6a:	400b      	ands	r3, r1
    4a6c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a6e:	4a16      	ldr	r2, [pc, #88]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a70:	4b15      	ldr	r3, [pc, #84]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a72:	885b      	ldrh	r3, [r3, #2]
    4a74:	b29b      	uxth	r3, r3
    4a76:	4916      	ldr	r1, [pc, #88]	; (4ad0 <system_gclk_chan_disable+0x90>)
    4a78:	400b      	ands	r3, r1
    4a7a:	b29b      	uxth	r3, r3
    4a7c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	4b11      	ldr	r3, [pc, #68]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a82:	885b      	ldrh	r3, [r3, #2]
    4a84:	b29b      	uxth	r3, r3
    4a86:	001a      	movs	r2, r3
    4a88:	2380      	movs	r3, #128	; 0x80
    4a8a:	01db      	lsls	r3, r3, #7
    4a8c:	4013      	ands	r3, r2
    4a8e:	d1f7      	bne.n	4a80 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a90:	4a0d      	ldr	r2, [pc, #52]	; (4ac8 <system_gclk_chan_disable+0x88>)
    4a92:	68fb      	ldr	r3, [r7, #12]
    4a94:	b2db      	uxtb	r3, r3
    4a96:	1c19      	adds	r1, r3, #0
    4a98:	230f      	movs	r3, #15
    4a9a:	400b      	ands	r3, r1
    4a9c:	b2d9      	uxtb	r1, r3
    4a9e:	8853      	ldrh	r3, [r2, #2]
    4aa0:	1c08      	adds	r0, r1, #0
    4aa2:	210f      	movs	r1, #15
    4aa4:	4001      	ands	r1, r0
    4aa6:	0208      	lsls	r0, r1, #8
    4aa8:	4908      	ldr	r1, [pc, #32]	; (4acc <system_gclk_chan_disable+0x8c>)
    4aaa:	400b      	ands	r3, r1
    4aac:	1c19      	adds	r1, r3, #0
    4aae:	1c03      	adds	r3, r0, #0
    4ab0:	430b      	orrs	r3, r1
    4ab2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4ab4:	4b07      	ldr	r3, [pc, #28]	; (4ad4 <system_gclk_chan_disable+0x94>)
    4ab6:	4798      	blx	r3
}
    4ab8:	46c0      	nop			; (mov r8, r8)
    4aba:	46bd      	mov	sp, r7
    4abc:	b004      	add	sp, #16
    4abe:	bd80      	pop	{r7, pc}
    4ac0:	000046e5 	.word	0x000046e5
    4ac4:	40000c02 	.word	0x40000c02
    4ac8:	40000c00 	.word	0x40000c00
    4acc:	fffff0ff 	.word	0xfffff0ff
    4ad0:	ffffbfff 	.word	0xffffbfff
    4ad4:	000046f9 	.word	0x000046f9

00004ad8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ad8:	b580      	push	{r7, lr}
    4ada:	b084      	sub	sp, #16
    4adc:	af00      	add	r7, sp, #0
    4ade:	0002      	movs	r2, r0
    4ae0:	1dfb      	adds	r3, r7, #7
    4ae2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4ae4:	4b0d      	ldr	r3, [pc, #52]	; (4b1c <system_gclk_chan_get_hz+0x44>)
    4ae6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ae8:	4a0d      	ldr	r2, [pc, #52]	; (4b20 <system_gclk_chan_get_hz+0x48>)
    4aea:	1dfb      	adds	r3, r7, #7
    4aec:	781b      	ldrb	r3, [r3, #0]
    4aee:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4af0:	4b0c      	ldr	r3, [pc, #48]	; (4b24 <system_gclk_chan_get_hz+0x4c>)
    4af2:	885b      	ldrh	r3, [r3, #2]
    4af4:	051b      	lsls	r3, r3, #20
    4af6:	0f1b      	lsrs	r3, r3, #28
    4af8:	b2da      	uxtb	r2, r3
    4afa:	230f      	movs	r3, #15
    4afc:	18fb      	adds	r3, r7, r3
    4afe:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4b00:	4b09      	ldr	r3, [pc, #36]	; (4b28 <system_gclk_chan_get_hz+0x50>)
    4b02:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4b04:	230f      	movs	r3, #15
    4b06:	18fb      	adds	r3, r7, r3
    4b08:	781b      	ldrb	r3, [r3, #0]
    4b0a:	0018      	movs	r0, r3
    4b0c:	4b07      	ldr	r3, [pc, #28]	; (4b2c <system_gclk_chan_get_hz+0x54>)
    4b0e:	4798      	blx	r3
    4b10:	0003      	movs	r3, r0
}
    4b12:	0018      	movs	r0, r3
    4b14:	46bd      	mov	sp, r7
    4b16:	b004      	add	sp, #16
    4b18:	bd80      	pop	{r7, pc}
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	000046e5 	.word	0x000046e5
    4b20:	40000c02 	.word	0x40000c02
    4b24:	40000c00 	.word	0x40000c00
    4b28:	000046f9 	.word	0x000046f9
    4b2c:	000048dd 	.word	0x000048dd

00004b30 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b084      	sub	sp, #16
    4b34:	af00      	add	r7, sp, #0
    4b36:	0002      	movs	r2, r0
    4b38:	1dfb      	adds	r3, r7, #7
    4b3a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4b3c:	230f      	movs	r3, #15
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	1dfa      	adds	r2, r7, #7
    4b42:	7812      	ldrb	r2, [r2, #0]
    4b44:	09d2      	lsrs	r2, r2, #7
    4b46:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4b48:	230e      	movs	r3, #14
    4b4a:	18fb      	adds	r3, r7, r3
    4b4c:	1dfa      	adds	r2, r7, #7
    4b4e:	7812      	ldrb	r2, [r2, #0]
    4b50:	0952      	lsrs	r2, r2, #5
    4b52:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4b54:	4b0d      	ldr	r3, [pc, #52]	; (4b8c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4b56:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4b58:	230f      	movs	r3, #15
    4b5a:	18fb      	adds	r3, r7, r3
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d10f      	bne.n	4b82 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4b62:	230f      	movs	r3, #15
    4b64:	18fb      	adds	r3, r7, r3
    4b66:	781b      	ldrb	r3, [r3, #0]
    4b68:	009b      	lsls	r3, r3, #2
    4b6a:	2210      	movs	r2, #16
    4b6c:	4694      	mov	ip, r2
    4b6e:	44bc      	add	ip, r7
    4b70:	4463      	add	r3, ip
    4b72:	3b08      	subs	r3, #8
    4b74:	681a      	ldr	r2, [r3, #0]
    4b76:	230e      	movs	r3, #14
    4b78:	18fb      	adds	r3, r7, r3
    4b7a:	781b      	ldrb	r3, [r3, #0]
    4b7c:	01db      	lsls	r3, r3, #7
    4b7e:	18d3      	adds	r3, r2, r3
    4b80:	e000      	b.n	4b84 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4b82:	2300      	movs	r3, #0
	}
}
    4b84:	0018      	movs	r0, r3
    4b86:	46bd      	mov	sp, r7
    4b88:	b004      	add	sp, #16
    4b8a:	bd80      	pop	{r7, pc}
    4b8c:	41004400 	.word	0x41004400

00004b90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4b90:	b580      	push	{r7, lr}
    4b92:	b088      	sub	sp, #32
    4b94:	af00      	add	r7, sp, #0
    4b96:	60f8      	str	r0, [r7, #12]
    4b98:	60b9      	str	r1, [r7, #8]
    4b9a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b9c:	2300      	movs	r3, #0
    4b9e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4ba0:	687b      	ldr	r3, [r7, #4]
    4ba2:	78db      	ldrb	r3, [r3, #3]
    4ba4:	2201      	movs	r2, #1
    4ba6:	4053      	eors	r3, r2
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	2b00      	cmp	r3, #0
    4bac:	d035      	beq.n	4c1a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4bae:	687b      	ldr	r3, [r7, #4]
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	2b80      	cmp	r3, #128	; 0x80
    4bb4:	d00b      	beq.n	4bce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4bb6:	69fb      	ldr	r3, [r7, #28]
    4bb8:	2280      	movs	r2, #128	; 0x80
    4bba:	0252      	lsls	r2, r2, #9
    4bbc:	4313      	orrs	r3, r2
    4bbe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	061b      	lsls	r3, r3, #24
    4bc6:	001a      	movs	r2, r3
    4bc8:	69fb      	ldr	r3, [r7, #28]
    4bca:	4313      	orrs	r3, r2
    4bcc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	785b      	ldrb	r3, [r3, #1]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d003      	beq.n	4bde <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4bda:	2b02      	cmp	r3, #2
    4bdc:	d110      	bne.n	4c00 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4bde:	69fb      	ldr	r3, [r7, #28]
    4be0:	2280      	movs	r2, #128	; 0x80
    4be2:	0292      	lsls	r2, r2, #10
    4be4:	4313      	orrs	r3, r2
    4be6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	789b      	ldrb	r3, [r3, #2]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d004      	beq.n	4bfa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4bf0:	69fb      	ldr	r3, [r7, #28]
    4bf2:	2280      	movs	r2, #128	; 0x80
    4bf4:	02d2      	lsls	r2, r2, #11
    4bf6:	4313      	orrs	r3, r2
    4bf8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	68ba      	ldr	r2, [r7, #8]
    4bfe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	785b      	ldrb	r3, [r3, #1]
    4c04:	2b01      	cmp	r3, #1
    4c06:	d003      	beq.n	4c10 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c0c:	2b02      	cmp	r3, #2
    4c0e:	d107      	bne.n	4c20 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4c10:	69fb      	ldr	r3, [r7, #28]
    4c12:	4a22      	ldr	r2, [pc, #136]	; (4c9c <_system_pinmux_config+0x10c>)
    4c14:	4013      	ands	r3, r2
    4c16:	61fb      	str	r3, [r7, #28]
    4c18:	e002      	b.n	4c20 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4c1a:	68fb      	ldr	r3, [r7, #12]
    4c1c:	68ba      	ldr	r2, [r7, #8]
    4c1e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4c20:	68bb      	ldr	r3, [r7, #8]
    4c22:	041b      	lsls	r3, r3, #16
    4c24:	0c1b      	lsrs	r3, r3, #16
    4c26:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4c28:	68bb      	ldr	r3, [r7, #8]
    4c2a:	0c1b      	lsrs	r3, r3, #16
    4c2c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c2e:	69ba      	ldr	r2, [r7, #24]
    4c30:	69fb      	ldr	r3, [r7, #28]
    4c32:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4c34:	22a0      	movs	r2, #160	; 0xa0
    4c36:	05d2      	lsls	r2, r2, #23
    4c38:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c3a:	68fb      	ldr	r3, [r7, #12]
    4c3c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c3e:	697a      	ldr	r2, [r7, #20]
    4c40:	69fb      	ldr	r3, [r7, #28]
    4c42:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4c44:	22d0      	movs	r2, #208	; 0xd0
    4c46:	0612      	lsls	r2, r2, #24
    4c48:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c4a:	68fb      	ldr	r3, [r7, #12]
    4c4c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	78db      	ldrb	r3, [r3, #3]
    4c52:	2201      	movs	r2, #1
    4c54:	4053      	eors	r3, r2
    4c56:	b2db      	uxtb	r3, r3
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d01a      	beq.n	4c92 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4c5c:	69fa      	ldr	r2, [r7, #28]
    4c5e:	2380      	movs	r3, #128	; 0x80
    4c60:	02db      	lsls	r3, r3, #11
    4c62:	4013      	ands	r3, r2
    4c64:	d00a      	beq.n	4c7c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	789b      	ldrb	r3, [r3, #2]
    4c6a:	2b01      	cmp	r3, #1
    4c6c:	d103      	bne.n	4c76 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	68ba      	ldr	r2, [r7, #8]
    4c72:	619a      	str	r2, [r3, #24]
    4c74:	e002      	b.n	4c7c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4c76:	68fb      	ldr	r3, [r7, #12]
    4c78:	68ba      	ldr	r2, [r7, #8]
    4c7a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	785b      	ldrb	r3, [r3, #1]
    4c80:	2b01      	cmp	r3, #1
    4c82:	d003      	beq.n	4c8c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c84:	687b      	ldr	r3, [r7, #4]
    4c86:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c88:	2b02      	cmp	r3, #2
    4c8a:	d102      	bne.n	4c92 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4c8c:	68fb      	ldr	r3, [r7, #12]
    4c8e:	68ba      	ldr	r2, [r7, #8]
    4c90:	609a      	str	r2, [r3, #8]
		}
	}
}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	46bd      	mov	sp, r7
    4c96:	b008      	add	sp, #32
    4c98:	bd80      	pop	{r7, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	fffbffff 	.word	0xfffbffff

00004ca0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	6039      	str	r1, [r7, #0]
    4caa:	1dfb      	adds	r3, r7, #7
    4cac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4cae:	1dfb      	adds	r3, r7, #7
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	0018      	movs	r0, r3
    4cb4:	4b0a      	ldr	r3, [pc, #40]	; (4ce0 <system_pinmux_pin_set_config+0x40>)
    4cb6:	4798      	blx	r3
    4cb8:	0003      	movs	r3, r0
    4cba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	781b      	ldrb	r3, [r3, #0]
    4cc0:	221f      	movs	r2, #31
    4cc2:	4013      	ands	r3, r2
    4cc4:	2201      	movs	r2, #1
    4cc6:	409a      	lsls	r2, r3
    4cc8:	0013      	movs	r3, r2
    4cca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4ccc:	683a      	ldr	r2, [r7, #0]
    4cce:	68b9      	ldr	r1, [r7, #8]
    4cd0:	68fb      	ldr	r3, [r7, #12]
    4cd2:	0018      	movs	r0, r3
    4cd4:	4b03      	ldr	r3, [pc, #12]	; (4ce4 <system_pinmux_pin_set_config+0x44>)
    4cd6:	4798      	blx	r3
}
    4cd8:	46c0      	nop			; (mov r8, r8)
    4cda:	46bd      	mov	sp, r7
    4cdc:	b004      	add	sp, #16
    4cde:	bd80      	pop	{r7, pc}
    4ce0:	00004b31 	.word	0x00004b31
    4ce4:	00004b91 	.word	0x00004b91

00004ce8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	af00      	add	r7, sp, #0
	return;
    4cec:	46c0      	nop			; (mov r8, r8)
}
    4cee:	46bd      	mov	sp, r7
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)

00004cf4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4cf8:	4b06      	ldr	r3, [pc, #24]	; (4d14 <system_init+0x20>)
    4cfa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4cfc:	4b06      	ldr	r3, [pc, #24]	; (4d18 <system_init+0x24>)
    4cfe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4d00:	4b06      	ldr	r3, [pc, #24]	; (4d1c <system_init+0x28>)
    4d02:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4d04:	4b06      	ldr	r3, [pc, #24]	; (4d20 <system_init+0x2c>)
    4d06:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4d08:	4b06      	ldr	r3, [pc, #24]	; (4d24 <system_init+0x30>)
    4d0a:	4798      	blx	r3
}
    4d0c:	46c0      	nop			; (mov r8, r8)
    4d0e:	46bd      	mov	sp, r7
    4d10:	bd80      	pop	{r7, pc}
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	00004505 	.word	0x00004505
    4d18:	00003ff1 	.word	0x00003ff1
    4d1c:	00004ce9 	.word	0x00004ce9
    4d20:	00000271 	.word	0x00000271
    4d24:	00004ce9 	.word	0x00004ce9

00004d28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b082      	sub	sp, #8
    4d2c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4d2e:	4b2f      	ldr	r3, [pc, #188]	; (4dec <Reset_Handler+0xc4>)
    4d30:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4d32:	4b2f      	ldr	r3, [pc, #188]	; (4df0 <Reset_Handler+0xc8>)
    4d34:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4d36:	687a      	ldr	r2, [r7, #4]
    4d38:	683b      	ldr	r3, [r7, #0]
    4d3a:	429a      	cmp	r2, r3
    4d3c:	d00c      	beq.n	4d58 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4d3e:	e007      	b.n	4d50 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4d40:	683b      	ldr	r3, [r7, #0]
    4d42:	1d1a      	adds	r2, r3, #4
    4d44:	603a      	str	r2, [r7, #0]
    4d46:	687a      	ldr	r2, [r7, #4]
    4d48:	1d11      	adds	r1, r2, #4
    4d4a:	6079      	str	r1, [r7, #4]
    4d4c:	6812      	ldr	r2, [r2, #0]
    4d4e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4d50:	683a      	ldr	r2, [r7, #0]
    4d52:	4b28      	ldr	r3, [pc, #160]	; (4df4 <Reset_Handler+0xcc>)
    4d54:	429a      	cmp	r2, r3
    4d56:	d3f3      	bcc.n	4d40 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4d58:	4b27      	ldr	r3, [pc, #156]	; (4df8 <Reset_Handler+0xd0>)
    4d5a:	603b      	str	r3, [r7, #0]
    4d5c:	e004      	b.n	4d68 <Reset_Handler+0x40>
                *pDest++ = 0;
    4d5e:	683b      	ldr	r3, [r7, #0]
    4d60:	1d1a      	adds	r2, r3, #4
    4d62:	603a      	str	r2, [r7, #0]
    4d64:	2200      	movs	r2, #0
    4d66:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4d68:	683a      	ldr	r2, [r7, #0]
    4d6a:	4b24      	ldr	r3, [pc, #144]	; (4dfc <Reset_Handler+0xd4>)
    4d6c:	429a      	cmp	r2, r3
    4d6e:	d3f6      	bcc.n	4d5e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4d70:	4b23      	ldr	r3, [pc, #140]	; (4e00 <Reset_Handler+0xd8>)
    4d72:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4d74:	4b23      	ldr	r3, [pc, #140]	; (4e04 <Reset_Handler+0xdc>)
    4d76:	687a      	ldr	r2, [r7, #4]
    4d78:	21ff      	movs	r1, #255	; 0xff
    4d7a:	438a      	bics	r2, r1
    4d7c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4d7e:	4a22      	ldr	r2, [pc, #136]	; (4e08 <Reset_Handler+0xe0>)
    4d80:	2390      	movs	r3, #144	; 0x90
    4d82:	005b      	lsls	r3, r3, #1
    4d84:	2102      	movs	r1, #2
    4d86:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4d88:	4a20      	ldr	r2, [pc, #128]	; (4e0c <Reset_Handler+0xe4>)
    4d8a:	78d3      	ldrb	r3, [r2, #3]
    4d8c:	2103      	movs	r1, #3
    4d8e:	438b      	bics	r3, r1
    4d90:	1c19      	adds	r1, r3, #0
    4d92:	2302      	movs	r3, #2
    4d94:	430b      	orrs	r3, r1
    4d96:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4d98:	4a1c      	ldr	r2, [pc, #112]	; (4e0c <Reset_Handler+0xe4>)
    4d9a:	78d3      	ldrb	r3, [r2, #3]
    4d9c:	210c      	movs	r1, #12
    4d9e:	438b      	bics	r3, r1
    4da0:	1c19      	adds	r1, r3, #0
    4da2:	2308      	movs	r3, #8
    4da4:	430b      	orrs	r3, r1
    4da6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4da8:	4a19      	ldr	r2, [pc, #100]	; (4e10 <Reset_Handler+0xe8>)
    4daa:	7b93      	ldrb	r3, [r2, #14]
    4dac:	2130      	movs	r1, #48	; 0x30
    4dae:	438b      	bics	r3, r1
    4db0:	1c19      	adds	r1, r3, #0
    4db2:	2320      	movs	r3, #32
    4db4:	430b      	orrs	r3, r1
    4db6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4db8:	4a15      	ldr	r2, [pc, #84]	; (4e10 <Reset_Handler+0xe8>)
    4dba:	7b93      	ldrb	r3, [r2, #14]
    4dbc:	210c      	movs	r1, #12
    4dbe:	438b      	bics	r3, r1
    4dc0:	1c19      	adds	r1, r3, #0
    4dc2:	2308      	movs	r3, #8
    4dc4:	430b      	orrs	r3, r1
    4dc6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4dc8:	4a11      	ldr	r2, [pc, #68]	; (4e10 <Reset_Handler+0xe8>)
    4dca:	7b93      	ldrb	r3, [r2, #14]
    4dcc:	2103      	movs	r1, #3
    4dce:	438b      	bics	r3, r1
    4dd0:	1c19      	adds	r1, r3, #0
    4dd2:	2302      	movs	r3, #2
    4dd4:	430b      	orrs	r3, r1
    4dd6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4dd8:	4a0e      	ldr	r2, [pc, #56]	; (4e14 <Reset_Handler+0xec>)
    4dda:	6853      	ldr	r3, [r2, #4]
    4ddc:	2180      	movs	r1, #128	; 0x80
    4dde:	430b      	orrs	r3, r1
    4de0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4de2:	4b0d      	ldr	r3, [pc, #52]	; (4e18 <Reset_Handler+0xf0>)
    4de4:	4798      	blx	r3

        /* Branch to main function */
        main();
    4de6:	4b0d      	ldr	r3, [pc, #52]	; (4e1c <Reset_Handler+0xf4>)
    4de8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4dea:	e7fe      	b.n	4dea <Reset_Handler+0xc2>
    4dec:	00009004 	.word	0x00009004
    4df0:	20000000 	.word	0x20000000
    4df4:	20000010 	.word	0x20000010
    4df8:	20000010 	.word	0x20000010
    4dfc:	200002b8 	.word	0x200002b8
    4e00:	00000000 	.word	0x00000000
    4e04:	e000ed00 	.word	0xe000ed00
    4e08:	41007000 	.word	0x41007000
    4e0c:	41005000 	.word	0x41005000
    4e10:	41004800 	.word	0x41004800
    4e14:	41004000 	.word	0x41004000
    4e18:	00008e05 	.word	0x00008e05
    4e1c:	00006d85 	.word	0x00006d85

00004e20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4e20:	b580      	push	{r7, lr}
    4e22:	af00      	add	r7, sp, #0
        while (1) {
        }
    4e24:	e7fe      	b.n	4e24 <Dummy_Handler+0x4>
    4e26:	46c0      	nop			; (mov r8, r8)

00004e28 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b084      	sub	sp, #16
    4e2c:	af00      	add	r7, sp, #0
    4e2e:	0002      	movs	r2, r0
    4e30:	1dfb      	adds	r3, r7, #7
    4e32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4e34:	230f      	movs	r3, #15
    4e36:	18fb      	adds	r3, r7, r3
    4e38:	1dfa      	adds	r2, r7, #7
    4e3a:	7812      	ldrb	r2, [r2, #0]
    4e3c:	09d2      	lsrs	r2, r2, #7
    4e3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4e40:	230e      	movs	r3, #14
    4e42:	18fb      	adds	r3, r7, r3
    4e44:	1dfa      	adds	r2, r7, #7
    4e46:	7812      	ldrb	r2, [r2, #0]
    4e48:	0952      	lsrs	r2, r2, #5
    4e4a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4e4c:	4b0d      	ldr	r3, [pc, #52]	; (4e84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4e4e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4e50:	230f      	movs	r3, #15
    4e52:	18fb      	adds	r3, r7, r3
    4e54:	781b      	ldrb	r3, [r3, #0]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d10f      	bne.n	4e7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4e5a:	230f      	movs	r3, #15
    4e5c:	18fb      	adds	r3, r7, r3
    4e5e:	781b      	ldrb	r3, [r3, #0]
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	2210      	movs	r2, #16
    4e64:	4694      	mov	ip, r2
    4e66:	44bc      	add	ip, r7
    4e68:	4463      	add	r3, ip
    4e6a:	3b08      	subs	r3, #8
    4e6c:	681a      	ldr	r2, [r3, #0]
    4e6e:	230e      	movs	r3, #14
    4e70:	18fb      	adds	r3, r7, r3
    4e72:	781b      	ldrb	r3, [r3, #0]
    4e74:	01db      	lsls	r3, r3, #7
    4e76:	18d3      	adds	r3, r2, r3
    4e78:	e000      	b.n	4e7c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4e7a:	2300      	movs	r3, #0
	}
}
    4e7c:	0018      	movs	r0, r3
    4e7e:	46bd      	mov	sp, r7
    4e80:	b004      	add	sp, #16
    4e82:	bd80      	pop	{r7, pc}
    4e84:	41004400 	.word	0x41004400

00004e88 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	0002      	movs	r2, r0
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4e94:	1dfb      	adds	r3, r7, #7
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	0018      	movs	r0, r3
    4e9a:	4b03      	ldr	r3, [pc, #12]	; (4ea8 <port_get_group_from_gpio_pin+0x20>)
    4e9c:	4798      	blx	r3
    4e9e:	0003      	movs	r3, r0
}
    4ea0:	0018      	movs	r0, r3
    4ea2:	46bd      	mov	sp, r7
    4ea4:	b002      	add	sp, #8
    4ea6:	bd80      	pop	{r7, pc}
    4ea8:	00004e29 	.word	0x00004e29

00004eac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b082      	sub	sp, #8
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2200      	movs	r2, #0
    4eb8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	2201      	movs	r2, #1
    4ebe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	2200      	movs	r2, #0
    4ec4:	709a      	strb	r2, [r3, #2]
}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	46bd      	mov	sp, r7
    4eca:	b002      	add	sp, #8
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)

00004ed0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4ed0:	b580      	push	{r7, lr}
    4ed2:	b084      	sub	sp, #16
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	0002      	movs	r2, r0
    4ed8:	1dfb      	adds	r3, r7, #7
    4eda:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4edc:	1dfb      	adds	r3, r7, #7
    4ede:	781b      	ldrb	r3, [r3, #0]
    4ee0:	0018      	movs	r0, r3
    4ee2:	4b0b      	ldr	r3, [pc, #44]	; (4f10 <port_pin_get_input_level+0x40>)
    4ee4:	4798      	blx	r3
    4ee6:	0003      	movs	r3, r0
    4ee8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4eea:	1dfb      	adds	r3, r7, #7
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	221f      	movs	r2, #31
    4ef0:	4013      	ands	r3, r2
    4ef2:	2201      	movs	r2, #1
    4ef4:	409a      	lsls	r2, r3
    4ef6:	0013      	movs	r3, r2
    4ef8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	6a1b      	ldr	r3, [r3, #32]
    4efe:	68ba      	ldr	r2, [r7, #8]
    4f00:	4013      	ands	r3, r2
    4f02:	1e5a      	subs	r2, r3, #1
    4f04:	4193      	sbcs	r3, r2
    4f06:	b2db      	uxtb	r3, r3
}
    4f08:	0018      	movs	r0, r3
    4f0a:	46bd      	mov	sp, r7
    4f0c:	b004      	add	sp, #16
    4f0e:	bd80      	pop	{r7, pc}
    4f10:	00004e89 	.word	0x00004e89

00004f14 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
    4f1a:	0002      	movs	r2, r0
    4f1c:	1dfb      	adds	r3, r7, #7
    4f1e:	701a      	strb	r2, [r3, #0]
    4f20:	1dbb      	adds	r3, r7, #6
    4f22:	1c0a      	adds	r2, r1, #0
    4f24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f26:	1dfb      	adds	r3, r7, #7
    4f28:	781b      	ldrb	r3, [r3, #0]
    4f2a:	0018      	movs	r0, r3
    4f2c:	4b0d      	ldr	r3, [pc, #52]	; (4f64 <port_pin_set_output_level+0x50>)
    4f2e:	4798      	blx	r3
    4f30:	0003      	movs	r3, r0
    4f32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f34:	1dfb      	adds	r3, r7, #7
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	221f      	movs	r2, #31
    4f3a:	4013      	ands	r3, r2
    4f3c:	2201      	movs	r2, #1
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4f44:	1dbb      	adds	r3, r7, #6
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d003      	beq.n	4f54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4f4c:	68fb      	ldr	r3, [r7, #12]
    4f4e:	68ba      	ldr	r2, [r7, #8]
    4f50:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4f52:	e002      	b.n	4f5a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4f54:	68fb      	ldr	r3, [r7, #12]
    4f56:	68ba      	ldr	r2, [r7, #8]
    4f58:	615a      	str	r2, [r3, #20]
	}
}
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	46bd      	mov	sp, r7
    4f5e:	b004      	add	sp, #16
    4f60:	bd80      	pop	{r7, pc}
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	00004e89 	.word	0x00004e89

00004f68 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4f6c:	4b04      	ldr	r3, [pc, #16]	; (4f80 <system_interrupt_enable_global+0x18>)
    4f6e:	2201      	movs	r2, #1
    4f70:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4f72:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4f76:	b662      	cpsie	i
}
    4f78:	46c0      	nop			; (mov r8, r8)
    4f7a:	46bd      	mov	sp, r7
    4f7c:	bd80      	pop	{r7, pc}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	20000000 	.word	0x20000000

00004f84 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    4f84:	b580      	push	{r7, lr}
    4f86:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4f88:	b672      	cpsid	i
    4f8a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4f8e:	4b03      	ldr	r3, [pc, #12]	; (4f9c <system_interrupt_disable_global+0x18>)
    4f90:	2200      	movs	r2, #0
    4f92:	701a      	strb	r2, [r3, #0]
}
    4f94:	46c0      	nop			; (mov r8, r8)
    4f96:	46bd      	mov	sp, r7
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	20000000 	.word	0x20000000

00004fa0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b082      	sub	sp, #8
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	0002      	movs	r2, r0
    4fa8:	1dfb      	adds	r3, r7, #7
    4faa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4fac:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <system_interrupt_enable+0x28>)
    4fae:	1dfa      	adds	r2, r7, #7
    4fb0:	7812      	ldrb	r2, [r2, #0]
    4fb2:	0011      	movs	r1, r2
    4fb4:	221f      	movs	r2, #31
    4fb6:	400a      	ands	r2, r1
    4fb8:	2101      	movs	r1, #1
    4fba:	4091      	lsls	r1, r2
    4fbc:	000a      	movs	r2, r1
    4fbe:	601a      	str	r2, [r3, #0]
}
    4fc0:	46c0      	nop			; (mov r8, r8)
    4fc2:	46bd      	mov	sp, r7
    4fc4:	b002      	add	sp, #8
    4fc6:	bd80      	pop	{r7, pc}
    4fc8:	e000e100 	.word	0xe000e100

00004fcc <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b084      	sub	sp, #16
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	22a0      	movs	r2, #160	; 0xa0
    4fd8:	0112      	lsls	r2, r2, #4
    4fda:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	2201      	movs	r2, #1
    4fe0:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    4fe2:	687b      	ldr	r3, [r7, #4]
    4fe4:	2200      	movs	r2, #0
    4fe6:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	2200      	movs	r2, #0
    4fec:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    4fee:	230f      	movs	r3, #15
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	2200      	movs	r2, #0
    4ff4:	701a      	strb	r2, [r3, #0]
    4ff6:	e00e      	b.n	5016 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    4ff8:	230f      	movs	r3, #15
    4ffa:	18fb      	adds	r3, r7, r3
    4ffc:	781a      	ldrb	r2, [r3, #0]
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	3202      	adds	r2, #2
    5002:	0092      	lsls	r2, r2, #2
    5004:	2100      	movs	r1, #0
    5006:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5008:	230f      	movs	r3, #15
    500a:	18fb      	adds	r3, r7, r3
    500c:	781a      	ldrb	r2, [r3, #0]
    500e:	230f      	movs	r3, #15
    5010:	18fb      	adds	r3, r7, r3
    5012:	3201      	adds	r2, #1
    5014:	701a      	strb	r2, [r3, #0]
    5016:	230f      	movs	r3, #15
    5018:	18fb      	adds	r3, r7, r3
    501a:	781b      	ldrb	r3, [r3, #0]
    501c:	2b01      	cmp	r3, #1
    501e:	d9eb      	bls.n	4ff8 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    5020:	46c0      	nop			; (mov r8, r8)
    5022:	46bd      	mov	sp, r7
    5024:	b004      	add	sp, #16
    5026:	bd80      	pop	{r7, pc}

00005028 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    5028:	b580      	push	{r7, lr}
    502a:	b084      	sub	sp, #16
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	681b      	ldr	r3, [r3, #0]
    5034:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	69db      	ldr	r3, [r3, #28]
    503a:	2207      	movs	r2, #7
    503c:	4013      	ands	r3, r2
    503e:	1e5a      	subs	r2, r3, #1
    5040:	4193      	sbcs	r3, r2
    5042:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5044:	0018      	movs	r0, r3
    5046:	46bd      	mov	sp, r7
    5048:	b004      	add	sp, #16
    504a:	bd80      	pop	{r7, pc}

0000504c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    504c:	b580      	push	{r7, lr}
    504e:	b082      	sub	sp, #8
    5050:	af00      	add	r7, sp, #0
    5052:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5054:	46c0      	nop			; (mov r8, r8)
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	0018      	movs	r0, r3
    505a:	4b04      	ldr	r3, [pc, #16]	; (506c <_i2c_master_wait_for_sync+0x20>)
    505c:	4798      	blx	r3
    505e:	1e03      	subs	r3, r0, #0
    5060:	d1f9      	bne.n	5056 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	46bd      	mov	sp, r7
    5066:	b002      	add	sp, #8
    5068:	bd80      	pop	{r7, pc}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	00005029 	.word	0x00005029

00005070 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	2264      	movs	r2, #100	; 0x64
    507c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	4a1b      	ldr	r2, [pc, #108]	; (50f0 <i2c_master_get_config_defaults+0x80>)
    5082:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	2200      	movs	r2, #0
    5088:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    508a:	687b      	ldr	r3, [r7, #4]
    508c:	2200      	movs	r2, #0
    508e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	2200      	movs	r2, #0
    5094:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	2280      	movs	r2, #128	; 0x80
    509a:	0392      	lsls	r2, r2, #14
    509c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	2201      	movs	r2, #1
    50a2:	4252      	negs	r2, r2
    50a4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    50a6:	687b      	ldr	r3, [r7, #4]
    50a8:	2201      	movs	r2, #1
    50aa:	4252      	negs	r2, r2
    50ac:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	2200      	movs	r2, #0
    50b2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    50b4:	687b      	ldr	r3, [r7, #4]
    50b6:	2200      	movs	r2, #0
    50b8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	2224      	movs	r2, #36	; 0x24
    50be:	2100      	movs	r1, #0
    50c0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	2200      	movs	r2, #0
    50c6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    50c8:	687b      	ldr	r3, [r7, #4]
    50ca:	222c      	movs	r2, #44	; 0x2c
    50cc:	2100      	movs	r1, #0
    50ce:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    50d0:	687b      	ldr	r3, [r7, #4]
    50d2:	222d      	movs	r2, #45	; 0x2d
    50d4:	2100      	movs	r1, #0
    50d6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	222e      	movs	r2, #46	; 0x2e
    50dc:	2100      	movs	r1, #0
    50de:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	22d7      	movs	r2, #215	; 0xd7
    50e4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	46bd      	mov	sp, r7
    50ea:	b002      	add	sp, #8
    50ec:	bd80      	pop	{r7, pc}
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	00000d48 	.word	0x00000d48

000050f4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b084      	sub	sp, #16
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	681b      	ldr	r3, [r3, #0]
    5100:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    5102:	2300      	movs	r3, #0
    5104:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	0018      	movs	r0, r3
    510a:	4b14      	ldr	r3, [pc, #80]	; (515c <i2c_master_enable+0x68>)
    510c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    510e:	68bb      	ldr	r3, [r7, #8]
    5110:	681b      	ldr	r3, [r3, #0]
    5112:	2202      	movs	r2, #2
    5114:	431a      	orrs	r2, r3
    5116:	68bb      	ldr	r3, [r7, #8]
    5118:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	0018      	movs	r0, r3
    5120:	4b0f      	ldr	r3, [pc, #60]	; (5160 <i2c_master_enable+0x6c>)
    5122:	4798      	blx	r3
    5124:	0003      	movs	r3, r0
    5126:	0018      	movs	r0, r3
    5128:	4b0e      	ldr	r3, [pc, #56]	; (5164 <i2c_master_enable+0x70>)
    512a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    512c:	e00c      	b.n	5148 <i2c_master_enable+0x54>
		timeout_counter++;
    512e:	68fb      	ldr	r3, [r7, #12]
    5130:	3301      	adds	r3, #1
    5132:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5134:	687b      	ldr	r3, [r7, #4]
    5136:	88db      	ldrh	r3, [r3, #6]
    5138:	1e1a      	subs	r2, r3, #0
    513a:	68fb      	ldr	r3, [r7, #12]
    513c:	429a      	cmp	r2, r3
    513e:	d803      	bhi.n	5148 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5140:	68bb      	ldr	r3, [r7, #8]
    5142:	2210      	movs	r2, #16
    5144:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    5146:	e006      	b.n	5156 <i2c_master_enable+0x62>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5148:	68bb      	ldr	r3, [r7, #8]
    514a:	8b5b      	ldrh	r3, [r3, #26]
    514c:	b29b      	uxth	r3, r3
    514e:	001a      	movs	r2, r3
    5150:	2310      	movs	r3, #16
    5152:	4013      	ands	r3, r2
    5154:	d0eb      	beq.n	512e <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    5156:	46bd      	mov	sp, r7
    5158:	b004      	add	sp, #16
    515a:	bd80      	pop	{r7, pc}
    515c:	0000504d 	.word	0x0000504d
    5160:	00003e8d 	.word	0x00003e8d
    5164:	00004fa1 	.word	0x00004fa1

00005168 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    5168:	b580      	push	{r7, lr}
    516a:	b084      	sub	sp, #16
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	681b      	ldr	r3, [r3, #0]
    5174:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	69db      	ldr	r3, [r3, #28]
    517a:	1e5a      	subs	r2, r3, #1
    517c:	4193      	sbcs	r3, r2
    517e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    5180:	0018      	movs	r0, r3
    5182:	46bd      	mov	sp, r7
    5184:	b004      	add	sp, #16
    5186:	bd80      	pop	{r7, pc}

00005188 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    5188:	b580      	push	{r7, lr}
    518a:	b082      	sub	sp, #8
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	2201      	movs	r2, #1
    5194:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	2200      	movs	r2, #0
    519a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	2200      	movs	r2, #0
    51a0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	22c0      	movs	r2, #192	; 0xc0
    51a6:	0392      	lsls	r2, r2, #14
    51a8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    51aa:	687b      	ldr	r3, [r7, #4]
    51ac:	2200      	movs	r2, #0
    51ae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    51b0:	687b      	ldr	r3, [r7, #4]
    51b2:	2200      	movs	r2, #0
    51b4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	2201      	movs	r2, #1
    51ba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	2201      	movs	r2, #1
    51c0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	2200      	movs	r2, #0
    51c6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	2224      	movs	r2, #36	; 0x24
    51cc:	2100      	movs	r1, #0
    51ce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	3318      	adds	r3, #24
    51d4:	220c      	movs	r2, #12
    51d6:	2100      	movs	r1, #0
    51d8:	0018      	movs	r0, r3
    51da:	4b0a      	ldr	r3, [pc, #40]	; (5204 <spi_get_config_defaults+0x7c>)
    51dc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	4a09      	ldr	r2, [pc, #36]	; (5208 <spi_get_config_defaults+0x80>)
    51e2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	2200      	movs	r2, #0
    51e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	2200      	movs	r2, #0
    51ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	2200      	movs	r2, #0
    51f4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	2200      	movs	r2, #0
    51fa:	635a      	str	r2, [r3, #52]	; 0x34

};
    51fc:	46c0      	nop			; (mov r8, r8)
    51fe:	46bd      	mov	sp, r7
    5200:	b002      	add	sp, #8
    5202:	bd80      	pop	{r7, pc}
    5204:	00008e63 	.word	0x00008e63
    5208:	000186a0 	.word	0x000186a0

0000520c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    520c:	b580      	push	{r7, lr}
    520e:	b082      	sub	sp, #8
    5210:	af00      	add	r7, sp, #0
    5212:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	220a      	movs	r2, #10
    5218:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	2200      	movs	r2, #0
    521e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	2200      	movs	r2, #0
    5224:	709a      	strb	r2, [r3, #2]
}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	46bd      	mov	sp, r7
    522a:	b002      	add	sp, #8
    522c:	bd80      	pop	{r7, pc}
    522e:	46c0      	nop			; (mov r8, r8)

00005230 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    5230:	b580      	push	{r7, lr}
    5232:	b084      	sub	sp, #16
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
    5238:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    523a:	683b      	ldr	r3, [r7, #0]
    523c:	781a      	ldrb	r2, [r3, #0]
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    5242:	683b      	ldr	r3, [r7, #0]
    5244:	785a      	ldrb	r2, [r3, #1]
    5246:	687b      	ldr	r3, [r7, #4]
    5248:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    524a:	683b      	ldr	r3, [r7, #0]
    524c:	789a      	ldrb	r2, [r3, #2]
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5252:	230c      	movs	r3, #12
    5254:	18fb      	adds	r3, r7, r3
    5256:	0018      	movs	r0, r3
    5258:	4b0b      	ldr	r3, [pc, #44]	; (5288 <spi_attach_slave+0x58>)
    525a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    525c:	230c      	movs	r3, #12
    525e:	18fb      	adds	r3, r7, r3
    5260:	2201      	movs	r2, #1
    5262:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	781b      	ldrb	r3, [r3, #0]
    5268:	220c      	movs	r2, #12
    526a:	18ba      	adds	r2, r7, r2
    526c:	0011      	movs	r1, r2
    526e:	0018      	movs	r0, r3
    5270:	4b06      	ldr	r3, [pc, #24]	; (528c <spi_attach_slave+0x5c>)
    5272:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5274:	687b      	ldr	r3, [r7, #4]
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	2101      	movs	r1, #1
    527a:	0018      	movs	r0, r3
    527c:	4b04      	ldr	r3, [pc, #16]	; (5290 <spi_attach_slave+0x60>)
    527e:	4798      	blx	r3
}
    5280:	46c0      	nop			; (mov r8, r8)
    5282:	46bd      	mov	sp, r7
    5284:	b004      	add	sp, #16
    5286:	bd80      	pop	{r7, pc}
    5288:	00004ead 	.word	0x00004ead
    528c:	00003f91 	.word	0x00003f91
    5290:	00004f15 	.word	0x00004f15

00005294 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    5294:	b580      	push	{r7, lr}
    5296:	b084      	sub	sp, #16
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	0018      	movs	r0, r3
    52a8:	4b0b      	ldr	r3, [pc, #44]	; (52d8 <spi_enable+0x44>)
    52aa:	4798      	blx	r3
    52ac:	0003      	movs	r3, r0
    52ae:	0018      	movs	r0, r3
    52b0:	4b0a      	ldr	r3, [pc, #40]	; (52dc <spi_enable+0x48>)
    52b2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    52b4:	46c0      	nop			; (mov r8, r8)
    52b6:	687b      	ldr	r3, [r7, #4]
    52b8:	0018      	movs	r0, r3
    52ba:	4b09      	ldr	r3, [pc, #36]	; (52e0 <spi_enable+0x4c>)
    52bc:	4798      	blx	r3
    52be:	1e03      	subs	r3, r0, #0
    52c0:	d1f9      	bne.n	52b6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    52c2:	68fb      	ldr	r3, [r7, #12]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2202      	movs	r2, #2
    52c8:	431a      	orrs	r2, r3
    52ca:	68fb      	ldr	r3, [r7, #12]
    52cc:	601a      	str	r2, [r3, #0]
}
    52ce:	46c0      	nop			; (mov r8, r8)
    52d0:	46bd      	mov	sp, r7
    52d2:	b004      	add	sp, #16
    52d4:	bd80      	pop	{r7, pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	00003e8d 	.word	0x00003e8d
    52dc:	00004fa1 	.word	0x00004fa1
    52e0:	00005169 	.word	0x00005169

000052e4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    52e4:	b580      	push	{r7, lr}
    52e6:	b084      	sub	sp, #16
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	681b      	ldr	r3, [r3, #0]
    52f0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    52f2:	46c0      	nop			; (mov r8, r8)
    52f4:	68fb      	ldr	r3, [r7, #12]
    52f6:	689b      	ldr	r3, [r3, #8]
    52f8:	2202      	movs	r2, #2
    52fa:	4013      	ands	r3, r2
    52fc:	d1fa      	bne.n	52f4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    52fe:	68fb      	ldr	r3, [r7, #12]
    5300:	681b      	ldr	r3, [r3, #0]
    5302:	2202      	movs	r2, #2
    5304:	431a      	orrs	r2, r3
    5306:	68fb      	ldr	r3, [r7, #12]
    5308:	601a      	str	r2, [r3, #0]
}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	46bd      	mov	sp, r7
    530e:	b004      	add	sp, #16
    5310:	bd80      	pop	{r7, pc}
    5312:	46c0      	nop			; (mov r8, r8)

00005314 <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    531a:	1d3b      	adds	r3, r7, #4
    531c:	0018      	movs	r0, r3
    531e:	4b07      	ldr	r3, [pc, #28]	; (533c <configure_port_pins+0x28>)
    5320:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    5322:	1d3b      	adds	r3, r7, #4
    5324:	2200      	movs	r2, #0
    5326:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    5328:	1d3b      	adds	r3, r7, #4
    532a:	0019      	movs	r1, r3
    532c:	2003      	movs	r0, #3
    532e:	4b04      	ldr	r3, [pc, #16]	; (5340 <configure_port_pins+0x2c>)
    5330:	4798      	blx	r3
}
    5332:	46c0      	nop			; (mov r8, r8)
    5334:	46bd      	mov	sp, r7
    5336:	b002      	add	sp, #8
    5338:	bd80      	pop	{r7, pc}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	00004ead 	.word	0x00004ead
    5340:	00003f91 	.word	0x00003f91

00005344 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    5344:	b580      	push	{r7, lr}
    5346:	b084      	sub	sp, #16
    5348:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    534a:	1d3b      	adds	r3, r7, #4
    534c:	0018      	movs	r0, r3
    534e:	4b0b      	ldr	r3, [pc, #44]	; (537c <configure_extint_channel+0x38>)
    5350:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    5352:	1d3b      	adds	r3, r7, #4
    5354:	2203      	movs	r2, #3
    5356:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    5358:	1d3b      	adds	r3, r7, #4
    535a:	2200      	movs	r2, #0
    535c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    535e:	1d3b      	adds	r3, r7, #4
    5360:	2201      	movs	r2, #1
    5362:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    5364:	1d3b      	adds	r3, r7, #4
    5366:	2201      	movs	r2, #1
    5368:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    536a:	1d3b      	adds	r3, r7, #4
    536c:	0019      	movs	r1, r3
    536e:	2003      	movs	r0, #3
    5370:	4b03      	ldr	r3, [pc, #12]	; (5380 <configure_extint_channel+0x3c>)
    5372:	4798      	blx	r3
}
    5374:	46c0      	nop			; (mov r8, r8)
    5376:	46bd      	mov	sp, r7
    5378:	b004      	add	sp, #16
    537a:	bd80      	pop	{r7, pc}
    537c:	000003b5 	.word	0x000003b5
    5380:	000003e9 	.word	0x000003e9

00005384 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    5384:	b580      	push	{r7, lr}
    5386:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    5388:	4b06      	ldr	r3, [pc, #24]	; (53a4 <configure_extint_callbacks+0x20>)
    538a:	2200      	movs	r2, #0
    538c:	2103      	movs	r1, #3
    538e:	0018      	movs	r0, r3
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <configure_extint_callbacks+0x24>)
    5392:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    5394:	2100      	movs	r1, #0
    5396:	2003      	movs	r0, #3
    5398:	4b04      	ldr	r3, [pc, #16]	; (53ac <configure_extint_callbacks+0x28>)
    539a:	4798      	blx	r3
}
    539c:	46c0      	nop			; (mov r8, r8)
    539e:	46bd      	mov	sp, r7
    53a0:	bd80      	pop	{r7, pc}
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	00005ea9 	.word	0x00005ea9
    53a8:	00000e31 	.word	0x00000e31
    53ac:	00000e95 	.word	0x00000e95

000053b0 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b090      	sub	sp, #64	; 0x40
    53b4:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    53b6:	1d3b      	adds	r3, r7, #4
    53b8:	0018      	movs	r0, r3
    53ba:	4b21      	ldr	r3, [pc, #132]	; (5440 <configure_RFM69_spi+0x90>)
    53bc:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    53be:	1d3b      	adds	r3, r7, #4
    53c0:	2212      	movs	r2, #18
    53c2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    53c4:	1d3a      	adds	r2, r7, #4
    53c6:	4b1f      	ldr	r3, [pc, #124]	; (5444 <configure_RFM69_spi+0x94>)
    53c8:	0011      	movs	r1, r2
    53ca:	0018      	movs	r0, r3
    53cc:	4b1e      	ldr	r3, [pc, #120]	; (5448 <configure_RFM69_spi+0x98>)
    53ce:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    53d0:	2308      	movs	r3, #8
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	0018      	movs	r0, r3
    53d6:	4b1d      	ldr	r3, [pc, #116]	; (544c <configure_RFM69_spi+0x9c>)
    53d8:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    53da:	2308      	movs	r3, #8
    53dc:	18fb      	adds	r3, r7, r3
    53de:	22c0      	movs	r2, #192	; 0xc0
    53e0:	0392      	lsls	r2, r2, #14
    53e2:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    53e4:	2308      	movs	r3, #8
    53e6:	18fb      	adds	r3, r7, r3
    53e8:	4a19      	ldr	r2, [pc, #100]	; (5450 <configure_RFM69_spi+0xa0>)
    53ea:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    53ec:	2308      	movs	r3, #8
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	4a18      	ldr	r2, [pc, #96]	; (5454 <configure_RFM69_spi+0xa4>)
    53f2:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    53f4:	2308      	movs	r3, #8
    53f6:	18fb      	adds	r3, r7, r3
    53f8:	2201      	movs	r2, #1
    53fa:	4252      	negs	r2, r2
    53fc:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    53fe:	2308      	movs	r3, #8
    5400:	18fb      	adds	r3, r7, r3
    5402:	4a15      	ldr	r2, [pc, #84]	; (5458 <configure_RFM69_spi+0xa8>)
    5404:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    5406:	2308      	movs	r3, #8
    5408:	18fb      	adds	r3, r7, r3
    540a:	2200      	movs	r2, #0
    540c:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    540e:	2308      	movs	r3, #8
    5410:	18fb      	adds	r3, r7, r3
    5412:	2200      	movs	r2, #0
    5414:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    5416:	2308      	movs	r3, #8
    5418:	18fa      	adds	r2, r7, r3
    541a:	4910      	ldr	r1, [pc, #64]	; (545c <configure_RFM69_spi+0xac>)
    541c:	4b10      	ldr	r3, [pc, #64]	; (5460 <configure_RFM69_spi+0xb0>)
    541e:	0018      	movs	r0, r3
    5420:	4b10      	ldr	r3, [pc, #64]	; (5464 <configure_RFM69_spi+0xb4>)
    5422:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    5424:	4b0e      	ldr	r3, [pc, #56]	; (5460 <configure_RFM69_spi+0xb0>)
    5426:	0018      	movs	r0, r3
    5428:	4b0f      	ldr	r3, [pc, #60]	; (5468 <configure_RFM69_spi+0xb8>)
    542a:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    542c:	4905      	ldr	r1, [pc, #20]	; (5444 <configure_RFM69_spi+0x94>)
    542e:	4b0c      	ldr	r3, [pc, #48]	; (5460 <configure_RFM69_spi+0xb0>)
    5430:	2200      	movs	r2, #0
    5432:	0018      	movs	r0, r3
    5434:	4b0d      	ldr	r3, [pc, #52]	; (546c <configure_RFM69_spi+0xbc>)
    5436:	4798      	blx	r3
}
    5438:	46c0      	nop			; (mov r8, r8)
    543a:	46bd      	mov	sp, r7
    543c:	b010      	add	sp, #64	; 0x40
    543e:	bd80      	pop	{r7, pc}
    5440:	0000520d 	.word	0x0000520d
    5444:	200002b4 	.word	0x200002b4
    5448:	00005231 	.word	0x00005231
    544c:	00005189 	.word	0x00005189
    5450:	00100002 	.word	0x00100002
    5454:	00110002 	.word	0x00110002
    5458:	00130002 	.word	0x00130002
    545c:	42000c00 	.word	0x42000c00
    5460:	20000234 	.word	0x20000234
    5464:	0000329d 	.word	0x0000329d
    5468:	00005295 	.word	0x00005295
    546c:	0000358d 	.word	0x0000358d

00005470 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    5470:	b580      	push	{r7, lr}
    5472:	b084      	sub	sp, #16
    5474:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    5476:	003b      	movs	r3, r7
    5478:	0018      	movs	r0, r3
    547a:	4b0f      	ldr	r3, [pc, #60]	; (54b8 <configure_rtc_count+0x48>)
    547c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    547e:	003b      	movs	r3, r7
    5480:	2200      	movs	r2, #0
    5482:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    5484:	003b      	movs	r3, r7
    5486:	2200      	movs	r2, #0
    5488:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    548a:	003b      	movs	r3, r7
    548c:	2201      	movs	r2, #1
    548e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    5490:	003a      	movs	r2, r7
    5492:	490a      	ldr	r1, [pc, #40]	; (54bc <configure_rtc_count+0x4c>)
    5494:	4b0a      	ldr	r3, [pc, #40]	; (54c0 <configure_rtc_count+0x50>)
    5496:	0018      	movs	r0, r3
    5498:	4b0a      	ldr	r3, [pc, #40]	; (54c4 <configure_rtc_count+0x54>)
    549a:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    549c:	4b08      	ldr	r3, [pc, #32]	; (54c0 <configure_rtc_count+0x50>)
    549e:	0018      	movs	r0, r3
    54a0:	4b09      	ldr	r3, [pc, #36]	; (54c8 <configure_rtc_count+0x58>)
    54a2:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    54a4:	4a09      	ldr	r2, [pc, #36]	; (54cc <configure_rtc_count+0x5c>)
    54a6:	4b06      	ldr	r3, [pc, #24]	; (54c0 <configure_rtc_count+0x50>)
    54a8:	0011      	movs	r1, r2
    54aa:	0018      	movs	r0, r3
    54ac:	4b08      	ldr	r3, [pc, #32]	; (54d0 <configure_rtc_count+0x60>)
    54ae:	4798      	blx	r3
}
    54b0:	46c0      	nop			; (mov r8, r8)
    54b2:	46bd      	mov	sp, r7
    54b4:	b004      	add	sp, #16
    54b6:	bd80      	pop	{r7, pc}
    54b8:	00004fcd 	.word	0x00004fcd
    54bc:	40001400 	.word	0x40001400
    54c0:	20000118 	.word	0x20000118
    54c4:	000007e5 	.word	0x000007e5
    54c8:	000005dd 	.word	0x000005dd
    54cc:	00002710 	.word	0x00002710
    54d0:	000009c9 	.word	0x000009c9

000054d4 <reset_millis>:

void reset_millis(void)
{
    54d4:	b580      	push	{r7, lr}
    54d6:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    54d8:	4b05      	ldr	r3, [pc, #20]	; (54f0 <reset_millis+0x1c>)
    54da:	2100      	movs	r1, #0
    54dc:	0018      	movs	r0, r3
    54de:	4b05      	ldr	r3, [pc, #20]	; (54f4 <reset_millis+0x20>)
    54e0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    54e2:	4b03      	ldr	r3, [pc, #12]	; (54f0 <reset_millis+0x1c>)
    54e4:	0018      	movs	r0, r3
    54e6:	4b04      	ldr	r3, [pc, #16]	; (54f8 <reset_millis+0x24>)
    54e8:	4798      	blx	r3
}
    54ea:	46c0      	nop			; (mov r8, r8)
    54ec:	46bd      	mov	sp, r7
    54ee:	bd80      	pop	{r7, pc}
    54f0:	20000118 	.word	0x20000118
    54f4:	00000875 	.word	0x00000875
    54f8:	000005dd 	.word	0x000005dd

000054fc <millis>:

uint32_t millis(void)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	b082      	sub	sp, #8
    5500:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    5502:	2300      	movs	r3, #0
    5504:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    5506:	4b05      	ldr	r3, [pc, #20]	; (551c <millis+0x20>)
    5508:	0018      	movs	r0, r3
    550a:	4b05      	ldr	r3, [pc, #20]	; (5520 <millis+0x24>)
    550c:	4798      	blx	r3
    550e:	0003      	movs	r3, r0
    5510:	607b      	str	r3, [r7, #4]
	return milli;
    5512:	687b      	ldr	r3, [r7, #4]
}
    5514:	0018      	movs	r0, r3
    5516:	46bd      	mov	sp, r7
    5518:	b002      	add	sp, #8
    551a:	bd80      	pop	{r7, pc}
    551c:	20000118 	.word	0x20000118
    5520:	000008d5 	.word	0x000008d5

00005524 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    5524:	b590      	push	{r4, r7, lr}
    5526:	b085      	sub	sp, #20
    5528:	af00      	add	r7, sp, #0
    552a:	0004      	movs	r4, r0
    552c:	6039      	str	r1, [r7, #0]
    552e:	0010      	movs	r0, r2
    5530:	0019      	movs	r1, r3
    5532:	1dfb      	adds	r3, r7, #7
    5534:	1c22      	adds	r2, r4, #0
    5536:	701a      	strb	r2, [r3, #0]
    5538:	1dbb      	adds	r3, r7, #6
    553a:	1c02      	adds	r2, r0, #0
    553c:	701a      	strb	r2, [r3, #0]
    553e:	1d7b      	adds	r3, r7, #5
    5540:	1c0a      	adds	r2, r1, #0
    5542:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    5544:	2001      	movs	r0, #1
    5546:	4b4b      	ldr	r3, [pc, #300]	; (5674 <sendFrame+0x150>)
    5548:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	2027      	movs	r0, #39	; 0x27
    554e:	4b4a      	ldr	r3, [pc, #296]	; (5678 <sendFrame+0x154>)
    5550:	4798      	blx	r3
    5552:	0003      	movs	r3, r0
    5554:	b25b      	sxtb	r3, r3
    5556:	2b00      	cmp	r3, #0
    5558:	daf8      	bge.n	554c <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    555a:	2100      	movs	r1, #0
    555c:	2025      	movs	r0, #37	; 0x25
    555e:	4b47      	ldr	r3, [pc, #284]	; (567c <sendFrame+0x158>)
    5560:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    5562:	1dbb      	adds	r3, r7, #6
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	2b3d      	cmp	r3, #61	; 0x3d
    5568:	d902      	bls.n	5570 <sendFrame+0x4c>
    556a:	1dbb      	adds	r3, r7, #6
    556c:	223d      	movs	r2, #61	; 0x3d
    556e:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    5570:	230e      	movs	r3, #14
    5572:	18fb      	adds	r3, r7, r3
    5574:	2200      	movs	r2, #0
    5576:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    5578:	2320      	movs	r3, #32
    557a:	18fb      	adds	r3, r7, r3
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	2b00      	cmp	r3, #0
    5580:	d004      	beq.n	558c <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    5582:	230e      	movs	r3, #14
    5584:	18fb      	adds	r3, r7, r3
    5586:	2280      	movs	r2, #128	; 0x80
    5588:	701a      	strb	r2, [r3, #0]
    558a:	e007      	b.n	559c <sendFrame+0x78>
	else if (requestACK)
    558c:	1d7b      	adds	r3, r7, #5
    558e:	781b      	ldrb	r3, [r3, #0]
    5590:	2b00      	cmp	r3, #0
    5592:	d003      	beq.n	559c <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    5594:	230e      	movs	r3, #14
    5596:	18fb      	adds	r3, r7, r3
    5598:	2240      	movs	r2, #64	; 0x40
    559a:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	radioselect();
    559c:	4b38      	ldr	r3, [pc, #224]	; (5680 <sendFrame+0x15c>)
    559e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    55a0:	4a38      	ldr	r2, [pc, #224]	; (5684 <sendFrame+0x160>)
    55a2:	4b39      	ldr	r3, [pc, #228]	; (5688 <sendFrame+0x164>)
    55a4:	2180      	movs	r1, #128	; 0x80
    55a6:	0018      	movs	r0, r3
    55a8:	4b38      	ldr	r3, [pc, #224]	; (568c <sendFrame+0x168>)
    55aa:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    55ac:	1dbb      	adds	r3, r7, #6
    55ae:	781b      	ldrb	r3, [r3, #0]
    55b0:	b29b      	uxth	r3, r3
    55b2:	3303      	adds	r3, #3
    55b4:	b299      	uxth	r1, r3
    55b6:	4a33      	ldr	r2, [pc, #204]	; (5684 <sendFrame+0x160>)
    55b8:	4b33      	ldr	r3, [pc, #204]	; (5688 <sendFrame+0x164>)
    55ba:	0018      	movs	r0, r3
    55bc:	4b33      	ldr	r3, [pc, #204]	; (568c <sendFrame+0x168>)
    55be:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    55c0:	1dfb      	adds	r3, r7, #7
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	b299      	uxth	r1, r3
    55c6:	4a2f      	ldr	r2, [pc, #188]	; (5684 <sendFrame+0x160>)
    55c8:	4b2f      	ldr	r3, [pc, #188]	; (5688 <sendFrame+0x164>)
    55ca:	0018      	movs	r0, r3
    55cc:	4b2f      	ldr	r3, [pc, #188]	; (568c <sendFrame+0x168>)
    55ce:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    55d0:	4b2f      	ldr	r3, [pc, #188]	; (5690 <sendFrame+0x16c>)
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	b2db      	uxtb	r3, r3
    55d6:	b299      	uxth	r1, r3
    55d8:	4a2a      	ldr	r2, [pc, #168]	; (5684 <sendFrame+0x160>)
    55da:	4b2b      	ldr	r3, [pc, #172]	; (5688 <sendFrame+0x164>)
    55dc:	0018      	movs	r0, r3
    55de:	4b2b      	ldr	r3, [pc, #172]	; (568c <sendFrame+0x168>)
    55e0:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    55e2:	230e      	movs	r3, #14
    55e4:	18fb      	adds	r3, r7, r3
    55e6:	781b      	ldrb	r3, [r3, #0]
    55e8:	b2db      	uxtb	r3, r3
    55ea:	b299      	uxth	r1, r3
    55ec:	4a25      	ldr	r2, [pc, #148]	; (5684 <sendFrame+0x160>)
    55ee:	4b26      	ldr	r3, [pc, #152]	; (5688 <sendFrame+0x164>)
    55f0:	0018      	movs	r0, r3
    55f2:	4b26      	ldr	r3, [pc, #152]	; (568c <sendFrame+0x168>)
    55f4:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    55f6:	230f      	movs	r3, #15
    55f8:	18fb      	adds	r3, r7, r3
    55fa:	2200      	movs	r2, #0
    55fc:	701a      	strb	r2, [r3, #0]
    55fe:	e012      	b.n	5626 <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    5600:	230f      	movs	r3, #15
    5602:	18fb      	adds	r3, r7, r3
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	683a      	ldr	r2, [r7, #0]
    5608:	18d3      	adds	r3, r2, r3
    560a:	781b      	ldrb	r3, [r3, #0]
    560c:	b299      	uxth	r1, r3
    560e:	4a1d      	ldr	r2, [pc, #116]	; (5684 <sendFrame+0x160>)
    5610:	4b1d      	ldr	r3, [pc, #116]	; (5688 <sendFrame+0x164>)
    5612:	0018      	movs	r0, r3
    5614:	4b1d      	ldr	r3, [pc, #116]	; (568c <sendFrame+0x168>)
    5616:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    5618:	230f      	movs	r3, #15
    561a:	18fb      	adds	r3, r7, r3
    561c:	781a      	ldrb	r2, [r3, #0]
    561e:	230f      	movs	r3, #15
    5620:	18fb      	adds	r3, r7, r3
    5622:	3201      	adds	r2, #1
    5624:	701a      	strb	r2, [r3, #0]
    5626:	230f      	movs	r3, #15
    5628:	18fa      	adds	r2, r7, r3
    562a:	1dbb      	adds	r3, r7, #6
    562c:	7812      	ldrb	r2, [r2, #0]
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	429a      	cmp	r2, r3
    5632:	d3e5      	bcc.n	5600 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    5634:	4b17      	ldr	r3, [pc, #92]	; (5694 <sendFrame+0x170>)
    5636:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    5638:	2004      	movs	r0, #4
    563a:	4b0e      	ldr	r3, [pc, #56]	; (5674 <sendFrame+0x150>)
    563c:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    563e:	4b16      	ldr	r3, [pc, #88]	; (5698 <sendFrame+0x174>)
    5640:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	2003      	movs	r0, #3
    5646:	4b15      	ldr	r3, [pc, #84]	; (569c <sendFrame+0x178>)
    5648:	4798      	blx	r3
    564a:	0003      	movs	r3, r0
    564c:	001a      	movs	r2, r3
    564e:	2301      	movs	r3, #1
    5650:	4053      	eors	r3, r2
    5652:	b2db      	uxtb	r3, r3
    5654:	2b00      	cmp	r3, #0
    5656:	d005      	beq.n	5664 <sendFrame+0x140>
    5658:	4b11      	ldr	r3, [pc, #68]	; (56a0 <sendFrame+0x17c>)
    565a:	4798      	blx	r3
    565c:	1e02      	subs	r2, r0, #0
    565e:	4b11      	ldr	r3, [pc, #68]	; (56a4 <sendFrame+0x180>)
    5660:	429a      	cmp	r2, r3
    5662:	d9ef      	bls.n	5644 <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    5664:	2001      	movs	r0, #1
    5666:	4b03      	ldr	r3, [pc, #12]	; (5674 <sendFrame+0x150>)
    5668:	4798      	blx	r3
}
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	46bd      	mov	sp, r7
    566e:	b005      	add	sp, #20
    5670:	bd90      	pop	{r4, r7, pc}
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	00005ac5 	.word	0x00005ac5
    5678:	000060b1 	.word	0x000060b1
    567c:	00006119 	.word	0x00006119
    5680:	00006179 	.word	0x00006179
    5684:	20000068 	.word	0x20000068
    5688:	20000234 	.word	0x20000234
    568c:	00003441 	.word	0x00003441
    5690:	20000174 	.word	0x20000174
    5694:	000061a5 	.word	0x000061a5
    5698:	000054d5 	.word	0x000054d5
    569c:	00004ed1 	.word	0x00004ed1
    56a0:	000054fd 	.word	0x000054fd
    56a4:	000003e7 	.word	0x000003e7

000056a8 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    56a8:	b580      	push	{r7, lr}
    56aa:	b082      	sub	sp, #8
    56ac:	af00      	add	r7, sp, #0
    56ae:	0002      	movs	r2, r0
    56b0:	1dfb      	adds	r3, r7, #7
    56b2:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    56b4:	4b19      	ldr	r3, [pc, #100]	; (571c <RFM_setHighPower+0x74>)
    56b6:	1dfa      	adds	r2, r7, #7
    56b8:	7812      	ldrb	r2, [r2, #0]
    56ba:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    56bc:	4b17      	ldr	r3, [pc, #92]	; (571c <RFM_setHighPower+0x74>)
    56be:	781b      	ldrb	r3, [r3, #0]
    56c0:	b2db      	uxtb	r3, r3
    56c2:	2b00      	cmp	r3, #0
    56c4:	d001      	beq.n	56ca <RFM_setHighPower+0x22>
    56c6:	230f      	movs	r3, #15
    56c8:	e000      	b.n	56cc <RFM_setHighPower+0x24>
    56ca:	231a      	movs	r3, #26
    56cc:	0019      	movs	r1, r3
    56ce:	2013      	movs	r0, #19
    56d0:	4b13      	ldr	r3, [pc, #76]	; (5720 <RFM_setHighPower+0x78>)
    56d2:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    56d4:	4b11      	ldr	r3, [pc, #68]	; (571c <RFM_setHighPower+0x74>)
    56d6:	781b      	ldrb	r3, [r3, #0]
    56d8:	b2db      	uxtb	r3, r3
    56da:	2b00      	cmp	r3, #0
    56dc:	d010      	beq.n	5700 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    56de:	2011      	movs	r0, #17
    56e0:	4b10      	ldr	r3, [pc, #64]	; (5724 <RFM_setHighPower+0x7c>)
    56e2:	4798      	blx	r3
    56e4:	0003      	movs	r3, r0
    56e6:	b25b      	sxtb	r3, r3
    56e8:	221f      	movs	r2, #31
    56ea:	4013      	ands	r3, r2
    56ec:	b25b      	sxtb	r3, r3
    56ee:	2260      	movs	r2, #96	; 0x60
    56f0:	4313      	orrs	r3, r2
    56f2:	b25b      	sxtb	r3, r3
    56f4:	b2db      	uxtb	r3, r3
    56f6:	0019      	movs	r1, r3
    56f8:	2011      	movs	r0, #17
    56fa:	4b09      	ldr	r3, [pc, #36]	; (5720 <RFM_setHighPower+0x78>)
    56fc:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    56fe:	e009      	b.n	5714 <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    5700:	4b09      	ldr	r3, [pc, #36]	; (5728 <RFM_setHighPower+0x80>)
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	2280      	movs	r2, #128	; 0x80
    5706:	4252      	negs	r2, r2
    5708:	4313      	orrs	r3, r2
    570a:	b2db      	uxtb	r3, r3
    570c:	0019      	movs	r1, r3
    570e:	2011      	movs	r0, #17
    5710:	4b03      	ldr	r3, [pc, #12]	; (5720 <RFM_setHighPower+0x78>)
    5712:	4798      	blx	r3
}
    5714:	46c0      	nop			; (mov r8, r8)
    5716:	46bd      	mov	sp, r7
    5718:	b002      	add	sp, #8
    571a:	bd80      	pop	{r7, pc}
    571c:	20000230 	.word	0x20000230
    5720:	00006119 	.word	0x00006119
    5724:	000060b1 	.word	0x000060b1
    5728:	20000130 	.word	0x20000130

0000572c <RFM69>:

void RFM69()
{
    572c:	b580      	push	{r7, lr}
    572e:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    5730:	4b07      	ldr	r3, [pc, #28]	; (5750 <RFM69+0x24>)
    5732:	2201      	movs	r2, #1
    5734:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    5736:	4b07      	ldr	r3, [pc, #28]	; (5754 <RFM69+0x28>)
    5738:	2200      	movs	r2, #0
    573a:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    573c:	4b06      	ldr	r3, [pc, #24]	; (5758 <RFM69+0x2c>)
    573e:	221f      	movs	r2, #31
    5740:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    5742:	4b06      	ldr	r3, [pc, #24]	; (575c <RFM69+0x30>)
    5744:	2200      	movs	r2, #0
    5746:	701a      	strb	r2, [r3, #0]
}
    5748:	46c0      	nop			; (mov r8, r8)
    574a:	46bd      	mov	sp, r7
    574c:	bd80      	pop	{r7, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	2000022e 	.word	0x2000022e
    5754:	2000017c 	.word	0x2000017c
    5758:	20000130 	.word	0x20000130
    575c:	20000230 	.word	0x20000230

00005760 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    5760:	b590      	push	{r4, r7, lr}
    5762:	b091      	sub	sp, #68	; 0x44
    5764:	af00      	add	r7, sp, #0
    5766:	0004      	movs	r4, r0
    5768:	0008      	movs	r0, r1
    576a:	0011      	movs	r1, r2
    576c:	1dfb      	adds	r3, r7, #7
    576e:	1c22      	adds	r2, r4, #0
    5770:	701a      	strb	r2, [r3, #0]
    5772:	1dbb      	adds	r3, r7, #6
    5774:	1c02      	adds	r2, r0, #0
    5776:	701a      	strb	r2, [r3, #0]
    5778:	1d7b      	adds	r3, r7, #5
    577a:	1c0a      	adds	r2, r1, #0
    577c:	701a      	strb	r2, [r3, #0]
  RFM69();
    577e:	4bc1      	ldr	r3, [pc, #772]	; (5a84 <RFM_initialize+0x324>)
    5780:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    5782:	2310      	movs	r3, #16
    5784:	18fb      	adds	r3, r7, r3
    5786:	2201      	movs	r2, #1
    5788:	701a      	strb	r2, [r3, #0]
    578a:	2310      	movs	r3, #16
    578c:	18fb      	adds	r3, r7, r3
    578e:	2204      	movs	r2, #4
    5790:	705a      	strb	r2, [r3, #1]
    5792:	2310      	movs	r3, #16
    5794:	18fb      	adds	r3, r7, r3
    5796:	2202      	movs	r2, #2
    5798:	709a      	strb	r2, [r3, #2]
    579a:	2310      	movs	r3, #16
    579c:	18fb      	adds	r3, r7, r3
    579e:	2200      	movs	r2, #0
    57a0:	70da      	strb	r2, [r3, #3]
    57a2:	2310      	movs	r3, #16
    57a4:	18fb      	adds	r3, r7, r3
    57a6:	2203      	movs	r2, #3
    57a8:	711a      	strb	r2, [r3, #4]
    57aa:	2310      	movs	r3, #16
    57ac:	18fb      	adds	r3, r7, r3
    57ae:	2202      	movs	r2, #2
    57b0:	715a      	strb	r2, [r3, #5]
    57b2:	2310      	movs	r3, #16
    57b4:	18fb      	adds	r3, r7, r3
    57b6:	2204      	movs	r2, #4
    57b8:	719a      	strb	r2, [r3, #6]
    57ba:	2310      	movs	r3, #16
    57bc:	18fb      	adds	r3, r7, r3
    57be:	2240      	movs	r2, #64	; 0x40
    57c0:	71da      	strb	r2, [r3, #7]
    57c2:	2310      	movs	r3, #16
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	2205      	movs	r2, #5
    57c8:	721a      	strb	r2, [r3, #8]
    57ca:	2310      	movs	r3, #16
    57cc:	18fb      	adds	r3, r7, r3
    57ce:	2203      	movs	r2, #3
    57d0:	725a      	strb	r2, [r3, #9]
    57d2:	2310      	movs	r3, #16
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	2206      	movs	r2, #6
    57d8:	729a      	strb	r2, [r3, #10]
    57da:	2310      	movs	r3, #16
    57dc:	18fb      	adds	r3, r7, r3
    57de:	2233      	movs	r2, #51	; 0x33
    57e0:	72da      	strb	r2, [r3, #11]
    57e2:	2310      	movs	r3, #16
    57e4:	18fb      	adds	r3, r7, r3
    57e6:	2207      	movs	r2, #7
    57e8:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    57ea:	1dfb      	adds	r3, r7, #7
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	2b1f      	cmp	r3, #31
    57f0:	d00d      	beq.n	580e <RFM_initialize+0xae>
    57f2:	1dfb      	adds	r3, r7, #7
    57f4:	781b      	ldrb	r3, [r3, #0]
    57f6:	2b2b      	cmp	r3, #43	; 0x2b
    57f8:	d007      	beq.n	580a <RFM_initialize+0xaa>
    57fa:	1dfb      	adds	r3, r7, #7
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	2b56      	cmp	r3, #86	; 0x56
    5800:	d101      	bne.n	5806 <RFM_initialize+0xa6>
    5802:	23d9      	movs	r3, #217	; 0xd9
    5804:	e004      	b.n	5810 <RFM_initialize+0xb0>
    5806:	23e4      	movs	r3, #228	; 0xe4
    5808:	e002      	b.n	5810 <RFM_initialize+0xb0>
    580a:	236c      	movs	r3, #108	; 0x6c
    580c:	e000      	b.n	5810 <RFM_initialize+0xb0>
    580e:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    5810:	2210      	movs	r2, #16
    5812:	18ba      	adds	r2, r7, r2
    5814:	7353      	strb	r3, [r2, #13]
    5816:	2310      	movs	r3, #16
    5818:	18fb      	adds	r3, r7, r3
    581a:	2208      	movs	r2, #8
    581c:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    581e:	1dfb      	adds	r3, r7, #7
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	2b1f      	cmp	r3, #31
    5824:	d00d      	beq.n	5842 <RFM_initialize+0xe2>
    5826:	1dfb      	adds	r3, r7, #7
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	2b2b      	cmp	r3, #43	; 0x2b
    582c:	d007      	beq.n	583e <RFM_initialize+0xde>
    582e:	1dfb      	adds	r3, r7, #7
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	2b56      	cmp	r3, #86	; 0x56
    5834:	d101      	bne.n	583a <RFM_initialize+0xda>
    5836:	2300      	movs	r3, #0
    5838:	e004      	b.n	5844 <RFM_initialize+0xe4>
    583a:	23c0      	movs	r3, #192	; 0xc0
    583c:	e002      	b.n	5844 <RFM_initialize+0xe4>
    583e:	2340      	movs	r3, #64	; 0x40
    5840:	e000      	b.n	5844 <RFM_initialize+0xe4>
    5842:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    5844:	2210      	movs	r2, #16
    5846:	18ba      	adds	r2, r7, r2
    5848:	73d3      	strb	r3, [r2, #15]
    584a:	2310      	movs	r3, #16
    584c:	18fb      	adds	r3, r7, r3
    584e:	2209      	movs	r2, #9
    5850:	741a      	strb	r2, [r3, #16]
    5852:	2310      	movs	r3, #16
    5854:	18fb      	adds	r3, r7, r3
    5856:	2200      	movs	r2, #0
    5858:	745a      	strb	r2, [r3, #17]
    585a:	2310      	movs	r3, #16
    585c:	18fb      	adds	r3, r7, r3
    585e:	2219      	movs	r2, #25
    5860:	749a      	strb	r2, [r3, #18]
    5862:	2310      	movs	r3, #16
    5864:	18fb      	adds	r3, r7, r3
    5866:	2242      	movs	r2, #66	; 0x42
    5868:	74da      	strb	r2, [r3, #19]
    586a:	2310      	movs	r3, #16
    586c:	18fb      	adds	r3, r7, r3
    586e:	2225      	movs	r2, #37	; 0x25
    5870:	751a      	strb	r2, [r3, #20]
    5872:	2310      	movs	r3, #16
    5874:	18fb      	adds	r3, r7, r3
    5876:	2240      	movs	r2, #64	; 0x40
    5878:	755a      	strb	r2, [r3, #21]
    587a:	2310      	movs	r3, #16
    587c:	18fb      	adds	r3, r7, r3
    587e:	2226      	movs	r2, #38	; 0x26
    5880:	759a      	strb	r2, [r3, #22]
    5882:	2310      	movs	r3, #16
    5884:	18fb      	adds	r3, r7, r3
    5886:	2207      	movs	r2, #7
    5888:	75da      	strb	r2, [r3, #23]
    588a:	2310      	movs	r3, #16
    588c:	18fb      	adds	r3, r7, r3
    588e:	2228      	movs	r2, #40	; 0x28
    5890:	761a      	strb	r2, [r3, #24]
    5892:	2310      	movs	r3, #16
    5894:	18fb      	adds	r3, r7, r3
    5896:	2210      	movs	r2, #16
    5898:	765a      	strb	r2, [r3, #25]
    589a:	2310      	movs	r3, #16
    589c:	18fb      	adds	r3, r7, r3
    589e:	2229      	movs	r2, #41	; 0x29
    58a0:	769a      	strb	r2, [r3, #26]
    58a2:	2310      	movs	r3, #16
    58a4:	18fb      	adds	r3, r7, r3
    58a6:	22dc      	movs	r2, #220	; 0xdc
    58a8:	76da      	strb	r2, [r3, #27]
    58aa:	2310      	movs	r3, #16
    58ac:	18fb      	adds	r3, r7, r3
    58ae:	222e      	movs	r2, #46	; 0x2e
    58b0:	771a      	strb	r2, [r3, #28]
    58b2:	2310      	movs	r3, #16
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	2288      	movs	r2, #136	; 0x88
    58b8:	775a      	strb	r2, [r3, #29]
    58ba:	2310      	movs	r3, #16
    58bc:	18fb      	adds	r3, r7, r3
    58be:	222f      	movs	r2, #47	; 0x2f
    58c0:	779a      	strb	r2, [r3, #30]
    58c2:	2310      	movs	r3, #16
    58c4:	18fb      	adds	r3, r7, r3
    58c6:	222d      	movs	r2, #45	; 0x2d
    58c8:	77da      	strb	r2, [r3, #31]
    58ca:	2310      	movs	r3, #16
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	2220      	movs	r2, #32
    58d0:	2130      	movs	r1, #48	; 0x30
    58d2:	5499      	strb	r1, [r3, r2]
    58d4:	2310      	movs	r3, #16
    58d6:	18fb      	adds	r3, r7, r3
    58d8:	1d7a      	adds	r2, r7, #5
    58da:	2121      	movs	r1, #33	; 0x21
    58dc:	7812      	ldrb	r2, [r2, #0]
    58de:	545a      	strb	r2, [r3, r1]
    58e0:	2310      	movs	r3, #16
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	2222      	movs	r2, #34	; 0x22
    58e6:	2137      	movs	r1, #55	; 0x37
    58e8:	5499      	strb	r1, [r3, r2]
    58ea:	2310      	movs	r3, #16
    58ec:	18fb      	adds	r3, r7, r3
    58ee:	2223      	movs	r2, #35	; 0x23
    58f0:	2190      	movs	r1, #144	; 0x90
    58f2:	5499      	strb	r1, [r3, r2]
    58f4:	2310      	movs	r3, #16
    58f6:	18fb      	adds	r3, r7, r3
    58f8:	2224      	movs	r2, #36	; 0x24
    58fa:	2138      	movs	r1, #56	; 0x38
    58fc:	5499      	strb	r1, [r3, r2]
    58fe:	2310      	movs	r3, #16
    5900:	18fb      	adds	r3, r7, r3
    5902:	2225      	movs	r2, #37	; 0x25
    5904:	2142      	movs	r1, #66	; 0x42
    5906:	5499      	strb	r1, [r3, r2]
    5908:	2310      	movs	r3, #16
    590a:	18fb      	adds	r3, r7, r3
    590c:	2226      	movs	r2, #38	; 0x26
    590e:	213c      	movs	r1, #60	; 0x3c
    5910:	5499      	strb	r1, [r3, r2]
    5912:	2310      	movs	r3, #16
    5914:	18fb      	adds	r3, r7, r3
    5916:	2227      	movs	r2, #39	; 0x27
    5918:	218f      	movs	r1, #143	; 0x8f
    591a:	5499      	strb	r1, [r3, r2]
    591c:	2310      	movs	r3, #16
    591e:	18fb      	adds	r3, r7, r3
    5920:	2228      	movs	r2, #40	; 0x28
    5922:	213d      	movs	r1, #61	; 0x3d
    5924:	5499      	strb	r1, [r3, r2]
    5926:	2310      	movs	r3, #16
    5928:	18fb      	adds	r3, r7, r3
    592a:	2229      	movs	r2, #41	; 0x29
    592c:	2112      	movs	r1, #18
    592e:	5499      	strb	r1, [r3, r2]
    5930:	2310      	movs	r3, #16
    5932:	18fb      	adds	r3, r7, r3
    5934:	222a      	movs	r2, #42	; 0x2a
    5936:	216f      	movs	r1, #111	; 0x6f
    5938:	5499      	strb	r1, [r3, r2]
    593a:	2310      	movs	r3, #16
    593c:	18fb      	adds	r3, r7, r3
    593e:	222b      	movs	r2, #43	; 0x2b
    5940:	2130      	movs	r1, #48	; 0x30
    5942:	5499      	strb	r1, [r3, r2]
    5944:	2310      	movs	r3, #16
    5946:	18fb      	adds	r3, r7, r3
    5948:	222c      	movs	r2, #44	; 0x2c
    594a:	21ff      	movs	r1, #255	; 0xff
    594c:	5499      	strb	r1, [r3, r2]
    594e:	2310      	movs	r3, #16
    5950:	18fb      	adds	r3, r7, r3
    5952:	222d      	movs	r2, #45	; 0x2d
    5954:	2100      	movs	r1, #0
    5956:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    5958:	4b4b      	ldr	r3, [pc, #300]	; (5a88 <RFM_initialize+0x328>)
    595a:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    595c:	4b4b      	ldr	r3, [pc, #300]	; (5a8c <RFM_initialize+0x32c>)
    595e:	4798      	blx	r3
  configure_port_pins();
    5960:	4b4b      	ldr	r3, [pc, #300]	; (5a90 <RFM_initialize+0x330>)
    5962:	4798      	blx	r3
  configure_extint_channel();
    5964:	4b4b      	ldr	r3, [pc, #300]	; (5a94 <RFM_initialize+0x334>)
    5966:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    5968:	4b4b      	ldr	r3, [pc, #300]	; (5a98 <RFM_initialize+0x338>)
    596a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    596c:	230f      	movs	r3, #15
    596e:	18fb      	adds	r3, r7, r3
    5970:	2232      	movs	r2, #50	; 0x32
    5972:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    5974:	21aa      	movs	r1, #170	; 0xaa
    5976:	202f      	movs	r0, #47	; 0x2f
    5978:	4b48      	ldr	r3, [pc, #288]	; (5a9c <RFM_initialize+0x33c>)
    597a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    597c:	202f      	movs	r0, #47	; 0x2f
    597e:	4b48      	ldr	r3, [pc, #288]	; (5aa0 <RFM_initialize+0x340>)
    5980:	4798      	blx	r3
    5982:	1e03      	subs	r3, r0, #0
    5984:	2baa      	cmp	r3, #170	; 0xaa
    5986:	d008      	beq.n	599a <RFM_initialize+0x23a>
    5988:	4b46      	ldr	r3, [pc, #280]	; (5aa4 <RFM_initialize+0x344>)
    598a:	4798      	blx	r3
    598c:	0002      	movs	r2, r0
    598e:	230f      	movs	r3, #15
    5990:	18fb      	adds	r3, r7, r3
    5992:	781b      	ldrb	r3, [r3, #0]
    5994:	b2db      	uxtb	r3, r3
    5996:	429a      	cmp	r2, r3
    5998:	d3ec      	bcc.n	5974 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    599a:	4b3f      	ldr	r3, [pc, #252]	; (5a98 <RFM_initialize+0x338>)
    599c:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    599e:	2155      	movs	r1, #85	; 0x55
    59a0:	202f      	movs	r0, #47	; 0x2f
    59a2:	4b3e      	ldr	r3, [pc, #248]	; (5a9c <RFM_initialize+0x33c>)
    59a4:	4798      	blx	r3
    59a6:	202f      	movs	r0, #47	; 0x2f
    59a8:	4b3d      	ldr	r3, [pc, #244]	; (5aa0 <RFM_initialize+0x340>)
    59aa:	4798      	blx	r3
    59ac:	1e03      	subs	r3, r0, #0
    59ae:	2b55      	cmp	r3, #85	; 0x55
    59b0:	d008      	beq.n	59c4 <RFM_initialize+0x264>
    59b2:	4b3c      	ldr	r3, [pc, #240]	; (5aa4 <RFM_initialize+0x344>)
    59b4:	4798      	blx	r3
    59b6:	0002      	movs	r2, r0
    59b8:	230f      	movs	r3, #15
    59ba:	18fb      	adds	r3, r7, r3
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	b2db      	uxtb	r3, r3
    59c0:	429a      	cmp	r2, r3
    59c2:	d3ec      	bcc.n	599e <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    59c4:	233f      	movs	r3, #63	; 0x3f
    59c6:	18fb      	adds	r3, r7, r3
    59c8:	2200      	movs	r2, #0
    59ca:	701a      	strb	r2, [r3, #0]
    59cc:	e019      	b.n	5a02 <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    59ce:	233f      	movs	r3, #63	; 0x3f
    59d0:	18fb      	adds	r3, r7, r3
    59d2:	781a      	ldrb	r2, [r3, #0]
    59d4:	2310      	movs	r3, #16
    59d6:	18fb      	adds	r3, r7, r3
    59d8:	0052      	lsls	r2, r2, #1
    59da:	5cd0      	ldrb	r0, [r2, r3]
    59dc:	233f      	movs	r3, #63	; 0x3f
    59de:	18fb      	adds	r3, r7, r3
    59e0:	781b      	ldrb	r3, [r3, #0]
    59e2:	2210      	movs	r2, #16
    59e4:	18ba      	adds	r2, r7, r2
    59e6:	005b      	lsls	r3, r3, #1
    59e8:	18d3      	adds	r3, r2, r3
    59ea:	3301      	adds	r3, #1
    59ec:	781b      	ldrb	r3, [r3, #0]
    59ee:	0019      	movs	r1, r3
    59f0:	4b2a      	ldr	r3, [pc, #168]	; (5a9c <RFM_initialize+0x33c>)
    59f2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    59f4:	233f      	movs	r3, #63	; 0x3f
    59f6:	18fb      	adds	r3, r7, r3
    59f8:	781a      	ldrb	r2, [r3, #0]
    59fa:	233f      	movs	r3, #63	; 0x3f
    59fc:	18fb      	adds	r3, r7, r3
    59fe:	3201      	adds	r2, #1
    5a00:	701a      	strb	r2, [r3, #0]
    5a02:	233f      	movs	r3, #63	; 0x3f
    5a04:	18fb      	adds	r3, r7, r3
    5a06:	781a      	ldrb	r2, [r3, #0]
    5a08:	2310      	movs	r3, #16
    5a0a:	18fb      	adds	r3, r7, r3
    5a0c:	0052      	lsls	r2, r2, #1
    5a0e:	5cd3      	ldrb	r3, [r2, r3]
    5a10:	2bff      	cmp	r3, #255	; 0xff
    5a12:	d1dc      	bne.n	59ce <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    5a14:	2000      	movs	r0, #0
    5a16:	4b24      	ldr	r3, [pc, #144]	; (5aa8 <RFM_initialize+0x348>)
    5a18:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    5a1a:	4b24      	ldr	r3, [pc, #144]	; (5aac <RFM_initialize+0x34c>)
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	b2db      	uxtb	r3, r3
    5a20:	0018      	movs	r0, r3
    5a22:	4b23      	ldr	r3, [pc, #140]	; (5ab0 <RFM_initialize+0x350>)
    5a24:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    5a26:	2001      	movs	r0, #1
    5a28:	4b22      	ldr	r3, [pc, #136]	; (5ab4 <RFM_initialize+0x354>)
    5a2a:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    5a2c:	4b1a      	ldr	r3, [pc, #104]	; (5a98 <RFM_initialize+0x338>)
    5a2e:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    5a30:	46c0      	nop			; (mov r8, r8)
    5a32:	2027      	movs	r0, #39	; 0x27
    5a34:	4b1a      	ldr	r3, [pc, #104]	; (5aa0 <RFM_initialize+0x340>)
    5a36:	4798      	blx	r3
    5a38:	0003      	movs	r3, r0
    5a3a:	b25b      	sxtb	r3, r3
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	db08      	blt.n	5a52 <RFM_initialize+0x2f2>
    5a40:	4b18      	ldr	r3, [pc, #96]	; (5aa4 <RFM_initialize+0x344>)
    5a42:	4798      	blx	r3
    5a44:	0002      	movs	r2, r0
    5a46:	230f      	movs	r3, #15
    5a48:	18fb      	adds	r3, r7, r3
    5a4a:	781b      	ldrb	r3, [r3, #0]
    5a4c:	b2db      	uxtb	r3, r3
    5a4e:	429a      	cmp	r2, r3
    5a50:	d3ef      	bcc.n	5a32 <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    5a52:	4b14      	ldr	r3, [pc, #80]	; (5aa4 <RFM_initialize+0x344>)
    5a54:	4798      	blx	r3
    5a56:	0002      	movs	r2, r0
    5a58:	230f      	movs	r3, #15
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	b2db      	uxtb	r3, r3
    5a60:	429a      	cmp	r2, r3
    5a62:	d301      	bcc.n	5a68 <RFM_initialize+0x308>
    return false;
    5a64:	2300      	movs	r3, #0
    5a66:	e009      	b.n	5a7c <RFM_initialize+0x31c>
  _inISR = false;
    5a68:	4b13      	ldr	r3, [pc, #76]	; (5ab8 <RFM_initialize+0x358>)
    5a6a:	2200      	movs	r2, #0
    5a6c:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    5a6e:	4b13      	ldr	r3, [pc, #76]	; (5abc <RFM_initialize+0x35c>)
    5a70:	4798      	blx	r3

  _address = nodeID;
    5a72:	4b13      	ldr	r3, [pc, #76]	; (5ac0 <RFM_initialize+0x360>)
    5a74:	1dba      	adds	r2, r7, #6
    5a76:	7812      	ldrb	r2, [r2, #0]
    5a78:	701a      	strb	r2, [r3, #0]
  return true;
    5a7a:	2301      	movs	r3, #1
}
    5a7c:	0018      	movs	r0, r3
    5a7e:	46bd      	mov	sp, r7
    5a80:	b011      	add	sp, #68	; 0x44
    5a82:	bd90      	pop	{r4, r7, pc}
    5a84:	0000572d 	.word	0x0000572d
    5a88:	000053b1 	.word	0x000053b1
    5a8c:	00005471 	.word	0x00005471
    5a90:	00005315 	.word	0x00005315
    5a94:	00005345 	.word	0x00005345
    5a98:	000054d5 	.word	0x000054d5
    5a9c:	00006119 	.word	0x00006119
    5aa0:	000060b1 	.word	0x000060b1
    5aa4:	000054fd 	.word	0x000054fd
    5aa8:	00005fbd 	.word	0x00005fbd
    5aac:	20000230 	.word	0x20000230
    5ab0:	000056a9 	.word	0x000056a9
    5ab4:	00005ac5 	.word	0x00005ac5
    5ab8:	20000131 	.word	0x20000131
    5abc:	00005385 	.word	0x00005385
    5ac0:	20000174 	.word	0x20000174

00005ac4 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b082      	sub	sp, #8
    5ac8:	af00      	add	r7, sp, #0
    5aca:	0002      	movs	r2, r0
    5acc:	1dfb      	adds	r3, r7, #7
    5ace:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    5ad0:	1dfb      	adds	r3, r7, #7
    5ad2:	781b      	ldrb	r3, [r3, #0]
    5ad4:	b29a      	uxth	r2, r3
    5ad6:	4b47      	ldr	r3, [pc, #284]	; (5bf4 <setMode+0x130>)
    5ad8:	881b      	ldrh	r3, [r3, #0]
    5ada:	b29b      	uxth	r3, r3
    5adc:	429a      	cmp	r2, r3
    5ade:	d100      	bne.n	5ae2 <setMode+0x1e>
    5ae0:	e081      	b.n	5be6 <setMode+0x122>
    return;

  switch (newMode) {
    5ae2:	1dfb      	adds	r3, r7, #7
    5ae4:	781b      	ldrb	r3, [r3, #0]
    5ae6:	2b04      	cmp	r3, #4
    5ae8:	d900      	bls.n	5aec <setMode+0x28>
    5aea:	e07e      	b.n	5bea <setMode+0x126>
    5aec:	009a      	lsls	r2, r3, #2
    5aee:	4b42      	ldr	r3, [pc, #264]	; (5bf8 <setMode+0x134>)
    5af0:	18d3      	adds	r3, r2, r3
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    5af6:	2001      	movs	r0, #1
    5af8:	4b40      	ldr	r3, [pc, #256]	; (5bfc <setMode+0x138>)
    5afa:	4798      	blx	r3
    5afc:	0003      	movs	r3, r0
    5afe:	b25b      	sxtb	r3, r3
    5b00:	221c      	movs	r2, #28
    5b02:	4393      	bics	r3, r2
    5b04:	b25b      	sxtb	r3, r3
    5b06:	220c      	movs	r2, #12
    5b08:	4313      	orrs	r3, r2
    5b0a:	b25b      	sxtb	r3, r3
    5b0c:	b2db      	uxtb	r3, r3
    5b0e:	0019      	movs	r1, r3
    5b10:	2001      	movs	r0, #1
    5b12:	4b3b      	ldr	r3, [pc, #236]	; (5c00 <setMode+0x13c>)
    5b14:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    5b16:	4b3b      	ldr	r3, [pc, #236]	; (5c04 <setMode+0x140>)
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	b2db      	uxtb	r3, r3
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	d04c      	beq.n	5bba <setMode+0xf6>
    5b20:	2001      	movs	r0, #1
    5b22:	4b39      	ldr	r3, [pc, #228]	; (5c08 <setMode+0x144>)
    5b24:	4798      	blx	r3
      break;
    5b26:	e048      	b.n	5bba <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    5b28:	2001      	movs	r0, #1
    5b2a:	4b34      	ldr	r3, [pc, #208]	; (5bfc <setMode+0x138>)
    5b2c:	4798      	blx	r3
    5b2e:	0003      	movs	r3, r0
    5b30:	b25b      	sxtb	r3, r3
    5b32:	221c      	movs	r2, #28
    5b34:	4393      	bics	r3, r2
    5b36:	b25b      	sxtb	r3, r3
    5b38:	2210      	movs	r2, #16
    5b3a:	4313      	orrs	r3, r2
    5b3c:	b25b      	sxtb	r3, r3
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	0019      	movs	r1, r3
    5b42:	2001      	movs	r0, #1
    5b44:	4b2e      	ldr	r3, [pc, #184]	; (5c00 <setMode+0x13c>)
    5b46:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    5b48:	4b2e      	ldr	r3, [pc, #184]	; (5c04 <setMode+0x140>)
    5b4a:	781b      	ldrb	r3, [r3, #0]
    5b4c:	b2db      	uxtb	r3, r3
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d035      	beq.n	5bbe <setMode+0xfa>
    5b52:	2000      	movs	r0, #0
    5b54:	4b2c      	ldr	r3, [pc, #176]	; (5c08 <setMode+0x144>)
    5b56:	4798      	blx	r3
      break;
    5b58:	e031      	b.n	5bbe <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    5b5a:	2001      	movs	r0, #1
    5b5c:	4b27      	ldr	r3, [pc, #156]	; (5bfc <setMode+0x138>)
    5b5e:	4798      	blx	r3
    5b60:	0003      	movs	r3, r0
    5b62:	b25b      	sxtb	r3, r3
    5b64:	221c      	movs	r2, #28
    5b66:	4393      	bics	r3, r2
    5b68:	b25b      	sxtb	r3, r3
    5b6a:	2208      	movs	r2, #8
    5b6c:	4313      	orrs	r3, r2
    5b6e:	b25b      	sxtb	r3, r3
    5b70:	b2db      	uxtb	r3, r3
    5b72:	0019      	movs	r1, r3
    5b74:	2001      	movs	r0, #1
    5b76:	4b22      	ldr	r3, [pc, #136]	; (5c00 <setMode+0x13c>)
    5b78:	4798      	blx	r3
      break;
    5b7a:	e021      	b.n	5bc0 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    5b7c:	2001      	movs	r0, #1
    5b7e:	4b1f      	ldr	r3, [pc, #124]	; (5bfc <setMode+0x138>)
    5b80:	4798      	blx	r3
    5b82:	0003      	movs	r3, r0
    5b84:	b25b      	sxtb	r3, r3
    5b86:	221c      	movs	r2, #28
    5b88:	4393      	bics	r3, r2
    5b8a:	b25b      	sxtb	r3, r3
    5b8c:	2204      	movs	r2, #4
    5b8e:	4313      	orrs	r3, r2
    5b90:	b25b      	sxtb	r3, r3
    5b92:	b2db      	uxtb	r3, r3
    5b94:	0019      	movs	r1, r3
    5b96:	2001      	movs	r0, #1
    5b98:	4b19      	ldr	r3, [pc, #100]	; (5c00 <setMode+0x13c>)
    5b9a:	4798      	blx	r3
      break;
    5b9c:	e010      	b.n	5bc0 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    5b9e:	2001      	movs	r0, #1
    5ba0:	4b16      	ldr	r3, [pc, #88]	; (5bfc <setMode+0x138>)
    5ba2:	4798      	blx	r3
    5ba4:	0003      	movs	r3, r0
    5ba6:	001a      	movs	r2, r3
    5ba8:	231c      	movs	r3, #28
    5baa:	439a      	bics	r2, r3
    5bac:	0013      	movs	r3, r2
    5bae:	b2db      	uxtb	r3, r3
    5bb0:	0019      	movs	r1, r3
    5bb2:	2001      	movs	r0, #1
    5bb4:	4b12      	ldr	r3, [pc, #72]	; (5c00 <setMode+0x13c>)
    5bb6:	4798      	blx	r3
      break;
    5bb8:	e002      	b.n	5bc0 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	e000      	b.n	5bc0 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    5bbe:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	4b0c      	ldr	r3, [pc, #48]	; (5bf4 <setMode+0x130>)
    5bc4:	881b      	ldrh	r3, [r3, #0]
    5bc6:	b29b      	uxth	r3, r3
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d106      	bne.n	5bda <setMode+0x116>
    5bcc:	2027      	movs	r0, #39	; 0x27
    5bce:	4b0b      	ldr	r3, [pc, #44]	; (5bfc <setMode+0x138>)
    5bd0:	4798      	blx	r3
    5bd2:	0003      	movs	r3, r0
    5bd4:	b25b      	sxtb	r3, r3
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	daf3      	bge.n	5bc2 <setMode+0xfe>

  _mode = newMode;
    5bda:	1dfb      	adds	r3, r7, #7
    5bdc:	781b      	ldrb	r3, [r3, #0]
    5bde:	b29a      	uxth	r2, r3
    5be0:	4b04      	ldr	r3, [pc, #16]	; (5bf4 <setMode+0x130>)
    5be2:	801a      	strh	r2, [r3, #0]
    5be4:	e002      	b.n	5bec <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	e000      	b.n	5bec <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    5bea:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    5bec:	46bd      	mov	sp, r7
    5bee:	b002      	add	sp, #8
    5bf0:	bd80      	pop	{r7, pc}
    5bf2:	46c0      	nop			; (mov r8, r8)
    5bf4:	2000022e 	.word	0x2000022e
    5bf8:	00008f3c 	.word	0x00008f3c
    5bfc:	000060b1 	.word	0x000060b1
    5c00:	00006119 	.word	0x00006119
    5c04:	20000230 	.word	0x20000230
    5c08:	000061d1 	.word	0x000061d1

00005c0c <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    5c10:	4b0b      	ldr	r3, [pc, #44]	; (5c40 <canSend+0x34>)
    5c12:	881b      	ldrh	r3, [r3, #0]
    5c14:	b29b      	uxth	r3, r3
    5c16:	2b03      	cmp	r3, #3
    5c18:	d10e      	bne.n	5c38 <canSend+0x2c>
    5c1a:	4b0a      	ldr	r3, [pc, #40]	; (5c44 <canSend+0x38>)
    5c1c:	881b      	ldrh	r3, [r3, #0]
    5c1e:	b29b      	uxth	r3, r3
    5c20:	2b00      	cmp	r3, #0
    5c22:	d109      	bne.n	5c38 <canSend+0x2c>
    5c24:	4b08      	ldr	r3, [pc, #32]	; (5c48 <canSend+0x3c>)
    5c26:	4798      	blx	r3
    5c28:	0003      	movs	r3, r0
    5c2a:	335a      	adds	r3, #90	; 0x5a
    5c2c:	da04      	bge.n	5c38 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    5c2e:	2001      	movs	r0, #1
    5c30:	4b06      	ldr	r3, [pc, #24]	; (5c4c <canSend+0x40>)
    5c32:	4798      	blx	r3
    return true;
    5c34:	2301      	movs	r3, #1
    5c36:	e000      	b.n	5c3a <canSend+0x2e>
  }
  return false;
    5c38:	2300      	movs	r3, #0
}
    5c3a:	0018      	movs	r0, r3
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}
    5c40:	2000022e 	.word	0x2000022e
    5c44:	200001fc 	.word	0x200001fc
    5c48:	00006071 	.word	0x00006071
    5c4c:	00005ac5 	.word	0x00005ac5

00005c50 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    5c50:	b590      	push	{r4, r7, lr}
    5c52:	b085      	sub	sp, #20
    5c54:	af02      	add	r7, sp, #8
    5c56:	0004      	movs	r4, r0
    5c58:	6039      	str	r1, [r7, #0]
    5c5a:	0010      	movs	r0, r2
    5c5c:	0019      	movs	r1, r3
    5c5e:	1dfb      	adds	r3, r7, #7
    5c60:	1c22      	adds	r2, r4, #0
    5c62:	701a      	strb	r2, [r3, #0]
    5c64:	1dbb      	adds	r3, r7, #6
    5c66:	1c02      	adds	r2, r0, #0
    5c68:	701a      	strb	r2, [r3, #0]
    5c6a:	1d7b      	adds	r3, r7, #5
    5c6c:	1c0a      	adds	r2, r1, #0
    5c6e:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5c70:	203d      	movs	r0, #61	; 0x3d
    5c72:	4b17      	ldr	r3, [pc, #92]	; (5cd0 <RFM_send+0x80>)
    5c74:	4798      	blx	r3
    5c76:	0003      	movs	r3, r0
    5c78:	001a      	movs	r2, r3
    5c7a:	2304      	movs	r3, #4
    5c7c:	4313      	orrs	r3, r2
    5c7e:	b2db      	uxtb	r3, r3
    5c80:	0019      	movs	r1, r3
    5c82:	203d      	movs	r0, #61	; 0x3d
    5c84:	4b13      	ldr	r3, [pc, #76]	; (5cd4 <RFM_send+0x84>)
    5c86:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    5c88:	4b13      	ldr	r3, [pc, #76]	; (5cd8 <RFM_send+0x88>)
    5c8a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    5c8c:	e001      	b.n	5c92 <RFM_send+0x42>
    5c8e:	4b13      	ldr	r3, [pc, #76]	; (5cdc <RFM_send+0x8c>)
    5c90:	4798      	blx	r3
    5c92:	4b13      	ldr	r3, [pc, #76]	; (5ce0 <RFM_send+0x90>)
    5c94:	4798      	blx	r3
    5c96:	0003      	movs	r3, r0
    5c98:	001a      	movs	r2, r3
    5c9a:	2301      	movs	r3, #1
    5c9c:	4053      	eors	r3, r2
    5c9e:	b2db      	uxtb	r3, r3
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d005      	beq.n	5cb0 <RFM_send+0x60>
    5ca4:	4b0f      	ldr	r3, [pc, #60]	; (5ce4 <RFM_send+0x94>)
    5ca6:	4798      	blx	r3
    5ca8:	1e02      	subs	r2, r0, #0
    5caa:	4b0f      	ldr	r3, [pc, #60]	; (5ce8 <RFM_send+0x98>)
    5cac:	429a      	cmp	r2, r3
    5cae:	d9ee      	bls.n	5c8e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    5cb0:	1d7b      	adds	r3, r7, #5
    5cb2:	781c      	ldrb	r4, [r3, #0]
    5cb4:	1dbb      	adds	r3, r7, #6
    5cb6:	781a      	ldrb	r2, [r3, #0]
    5cb8:	6839      	ldr	r1, [r7, #0]
    5cba:	1dfb      	adds	r3, r7, #7
    5cbc:	7818      	ldrb	r0, [r3, #0]
    5cbe:	2300      	movs	r3, #0
    5cc0:	9300      	str	r3, [sp, #0]
    5cc2:	0023      	movs	r3, r4
    5cc4:	4c09      	ldr	r4, [pc, #36]	; (5cec <RFM_send+0x9c>)
    5cc6:	47a0      	blx	r4
}
    5cc8:	46c0      	nop			; (mov r8, r8)
    5cca:	46bd      	mov	sp, r7
    5ccc:	b003      	add	sp, #12
    5cce:	bd90      	pop	{r4, r7, pc}
    5cd0:	000060b1 	.word	0x000060b1
    5cd4:	00006119 	.word	0x00006119
    5cd8:	000054d5 	.word	0x000054d5
    5cdc:	00005f61 	.word	0x00005f61
    5ce0:	00005c0d 	.word	0x00005c0d
    5ce4:	000054fd 	.word	0x000054fd
    5ce8:	000003e7 	.word	0x000003e7
    5cec:	00005525 	.word	0x00005525

00005cf0 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    5cf0:	b580      	push	{r7, lr}
    5cf2:	b082      	sub	sp, #8
    5cf4:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    5cf6:	4b58      	ldr	r3, [pc, #352]	; (5e58 <interruptHandler+0x168>)
    5cf8:	881b      	ldrh	r3, [r3, #0]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	2b03      	cmp	r3, #3
    5cfe:	d000      	beq.n	5d02 <interruptHandler+0x12>
    5d00:	e0a1      	b.n	5e46 <interruptHandler+0x156>
    5d02:	2028      	movs	r0, #40	; 0x28
    5d04:	4b55      	ldr	r3, [pc, #340]	; (5e5c <interruptHandler+0x16c>)
    5d06:	4798      	blx	r3
    5d08:	0003      	movs	r3, r0
    5d0a:	001a      	movs	r2, r3
    5d0c:	2304      	movs	r3, #4
    5d0e:	4013      	ands	r3, r2
    5d10:	d100      	bne.n	5d14 <interruptHandler+0x24>
    5d12:	e098      	b.n	5e46 <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    5d14:	2001      	movs	r0, #1
    5d16:	4b52      	ldr	r3, [pc, #328]	; (5e60 <interruptHandler+0x170>)
    5d18:	4798      	blx	r3
    radioselect();
    5d1a:	4b52      	ldr	r3, [pc, #328]	; (5e64 <interruptHandler+0x174>)
    5d1c:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    5d1e:	4a52      	ldr	r2, [pc, #328]	; (5e68 <interruptHandler+0x178>)
    5d20:	4b52      	ldr	r3, [pc, #328]	; (5e6c <interruptHandler+0x17c>)
    5d22:	2100      	movs	r1, #0
    5d24:	0018      	movs	r0, r3
    5d26:	4b52      	ldr	r3, [pc, #328]	; (5e70 <interruptHandler+0x180>)
    5d28:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    5d2a:	4a52      	ldr	r2, [pc, #328]	; (5e74 <interruptHandler+0x184>)
    5d2c:	4b4f      	ldr	r3, [pc, #316]	; (5e6c <interruptHandler+0x17c>)
    5d2e:	2100      	movs	r1, #0
    5d30:	0018      	movs	r0, r3
    5d32:	4b4f      	ldr	r3, [pc, #316]	; (5e70 <interruptHandler+0x180>)
    5d34:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    5d36:	4b4f      	ldr	r3, [pc, #316]	; (5e74 <interruptHandler+0x184>)
    5d38:	881b      	ldrh	r3, [r3, #0]
    5d3a:	b29b      	uxth	r3, r3
    5d3c:	2b42      	cmp	r3, #66	; 0x42
    5d3e:	d803      	bhi.n	5d48 <interruptHandler+0x58>
    5d40:	4b4c      	ldr	r3, [pc, #304]	; (5e74 <interruptHandler+0x184>)
    5d42:	881b      	ldrh	r3, [r3, #0]
    5d44:	b29a      	uxth	r2, r3
    5d46:	e000      	b.n	5d4a <interruptHandler+0x5a>
    5d48:	2242      	movs	r2, #66	; 0x42
    5d4a:	4b4a      	ldr	r3, [pc, #296]	; (5e74 <interruptHandler+0x184>)
    5d4c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    5d4e:	4a4a      	ldr	r2, [pc, #296]	; (5e78 <interruptHandler+0x188>)
    5d50:	4b46      	ldr	r3, [pc, #280]	; (5e6c <interruptHandler+0x17c>)
    5d52:	2100      	movs	r1, #0
    5d54:	0018      	movs	r0, r3
    5d56:	4b46      	ldr	r3, [pc, #280]	; (5e70 <interruptHandler+0x180>)
    5d58:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    5d5a:	4b48      	ldr	r3, [pc, #288]	; (5e7c <interruptHandler+0x18c>)
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	b2db      	uxtb	r3, r3
    5d60:	2201      	movs	r2, #1
    5d62:	4053      	eors	r3, r2
    5d64:	b2db      	uxtb	r3, r3
    5d66:	2b00      	cmp	r3, #0
    5d68:	d00d      	beq.n	5d86 <interruptHandler+0x96>
    5d6a:	4b45      	ldr	r3, [pc, #276]	; (5e80 <interruptHandler+0x190>)
    5d6c:	781b      	ldrb	r3, [r3, #0]
    5d6e:	b2db      	uxtb	r3, r3
    5d70:	b29a      	uxth	r2, r3
    5d72:	4b41      	ldr	r3, [pc, #260]	; (5e78 <interruptHandler+0x188>)
    5d74:	881b      	ldrh	r3, [r3, #0]
    5d76:	b29b      	uxth	r3, r3
    5d78:	429a      	cmp	r2, r3
    5d7a:	d004      	beq.n	5d86 <interruptHandler+0x96>
    5d7c:	4b3e      	ldr	r3, [pc, #248]	; (5e78 <interruptHandler+0x188>)
    5d7e:	881b      	ldrh	r3, [r3, #0]
    5d80:	b29b      	uxth	r3, r3
    5d82:	2bff      	cmp	r3, #255	; 0xff
    5d84:	d104      	bne.n	5d90 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    5d86:	4b3b      	ldr	r3, [pc, #236]	; (5e74 <interruptHandler+0x184>)
    5d88:	881b      	ldrh	r3, [r3, #0]
    5d8a:	b29b      	uxth	r3, r3
    5d8c:	2b02      	cmp	r3, #2
    5d8e:	d807      	bhi.n	5da0 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    5d90:	4b38      	ldr	r3, [pc, #224]	; (5e74 <interruptHandler+0x184>)
    5d92:	2200      	movs	r2, #0
    5d94:	801a      	strh	r2, [r3, #0]
      unselect();
    5d96:	4b3b      	ldr	r3, [pc, #236]	; (5e84 <interruptHandler+0x194>)
    5d98:	4798      	blx	r3
      receiveBegin();
    5d9a:	4b3b      	ldr	r3, [pc, #236]	; (5e88 <interruptHandler+0x198>)
    5d9c:	4798      	blx	r3
    5d9e:	e058      	b.n	5e52 <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    5da0:	4b34      	ldr	r3, [pc, #208]	; (5e74 <interruptHandler+0x184>)
    5da2:	881b      	ldrh	r3, [r3, #0]
    5da4:	b29b      	uxth	r3, r3
    5da6:	3b03      	subs	r3, #3
    5da8:	b29a      	uxth	r2, r3
    5daa:	4b38      	ldr	r3, [pc, #224]	; (5e8c <interruptHandler+0x19c>)
    5dac:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    5dae:	4a38      	ldr	r2, [pc, #224]	; (5e90 <interruptHandler+0x1a0>)
    5db0:	4b2e      	ldr	r3, [pc, #184]	; (5e6c <interruptHandler+0x17c>)
    5db2:	2100      	movs	r1, #0
    5db4:	0018      	movs	r0, r3
    5db6:	4b2e      	ldr	r3, [pc, #184]	; (5e70 <interruptHandler+0x180>)
    5db8:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    5dba:	1dbb      	adds	r3, r7, #6
    5dbc:	2200      	movs	r2, #0
    5dbe:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    5dc0:	1dba      	adds	r2, r7, #6
    5dc2:	4b2a      	ldr	r3, [pc, #168]	; (5e6c <interruptHandler+0x17c>)
    5dc4:	2100      	movs	r1, #0
    5dc6:	0018      	movs	r0, r3
    5dc8:	4b29      	ldr	r3, [pc, #164]	; (5e70 <interruptHandler+0x180>)
    5dca:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    5dcc:	1dbb      	adds	r3, r7, #6
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	b29b      	uxth	r3, r3
    5dd2:	2280      	movs	r2, #128	; 0x80
    5dd4:	4013      	ands	r3, r2
    5dd6:	b29a      	uxth	r2, r3
    5dd8:	4b2e      	ldr	r3, [pc, #184]	; (5e94 <interruptHandler+0x1a4>)
    5dda:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    5ddc:	1dbb      	adds	r3, r7, #6
    5dde:	781b      	ldrb	r3, [r3, #0]
    5de0:	b29b      	uxth	r3, r3
    5de2:	2240      	movs	r2, #64	; 0x40
    5de4:	4013      	ands	r3, r2
    5de6:	b29a      	uxth	r2, r3
    5de8:	4b2b      	ldr	r3, [pc, #172]	; (5e98 <interruptHandler+0x1a8>)
    5dea:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5dec:	1dfb      	adds	r3, r7, #7
    5dee:	2200      	movs	r2, #0
    5df0:	701a      	strb	r2, [r3, #0]
    5df2:	e00e      	b.n	5e12 <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    5df4:	1dfb      	adds	r3, r7, #7
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	005a      	lsls	r2, r3, #1
    5dfa:	4b28      	ldr	r3, [pc, #160]	; (5e9c <interruptHandler+0x1ac>)
    5dfc:	18d2      	adds	r2, r2, r3
    5dfe:	4b1b      	ldr	r3, [pc, #108]	; (5e6c <interruptHandler+0x17c>)
    5e00:	2100      	movs	r1, #0
    5e02:	0018      	movs	r0, r3
    5e04:	4b1a      	ldr	r3, [pc, #104]	; (5e70 <interruptHandler+0x180>)
    5e06:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5e08:	1dfb      	adds	r3, r7, #7
    5e0a:	781a      	ldrb	r2, [r3, #0]
    5e0c:	1dfb      	adds	r3, r7, #7
    5e0e:	3201      	adds	r2, #1
    5e10:	701a      	strb	r2, [r3, #0]
    5e12:	1dfb      	adds	r3, r7, #7
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	b29a      	uxth	r2, r3
    5e18:	4b1c      	ldr	r3, [pc, #112]	; (5e8c <interruptHandler+0x19c>)
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	b29b      	uxth	r3, r3
    5e1e:	429a      	cmp	r2, r3
    5e20:	d3e8      	bcc.n	5df4 <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    5e22:	4b1a      	ldr	r3, [pc, #104]	; (5e8c <interruptHandler+0x19c>)
    5e24:	881b      	ldrh	r3, [r3, #0]
    5e26:	b29b      	uxth	r3, r3
    5e28:	2b3c      	cmp	r3, #60	; 0x3c
    5e2a:	d807      	bhi.n	5e3c <interruptHandler+0x14c>
    5e2c:	4b17      	ldr	r3, [pc, #92]	; (5e8c <interruptHandler+0x19c>)
    5e2e:	881b      	ldrh	r3, [r3, #0]
    5e30:	b29b      	uxth	r3, r3
    5e32:	001a      	movs	r2, r3
    5e34:	4b19      	ldr	r3, [pc, #100]	; (5e9c <interruptHandler+0x1ac>)
    5e36:	0052      	lsls	r2, r2, #1
    5e38:	2100      	movs	r1, #0
    5e3a:	52d1      	strh	r1, [r2, r3]
    unselect();
    5e3c:	4b11      	ldr	r3, [pc, #68]	; (5e84 <interruptHandler+0x194>)
    5e3e:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    5e40:	2003      	movs	r0, #3
    5e42:	4b07      	ldr	r3, [pc, #28]	; (5e60 <interruptHandler+0x170>)
    5e44:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    5e46:	4b16      	ldr	r3, [pc, #88]	; (5ea0 <interruptHandler+0x1b0>)
    5e48:	4798      	blx	r3
    5e4a:	0003      	movs	r3, r0
    5e4c:	001a      	movs	r2, r3
    5e4e:	4b15      	ldr	r3, [pc, #84]	; (5ea4 <interruptHandler+0x1b4>)
    5e50:	801a      	strh	r2, [r3, #0]
}
    5e52:	46bd      	mov	sp, r7
    5e54:	b002      	add	sp, #8
    5e56:	bd80      	pop	{r7, pc}
    5e58:	2000022e 	.word	0x2000022e
    5e5c:	000060b1 	.word	0x000060b1
    5e60:	00005ac5 	.word	0x00005ac5
    5e64:	00006179 	.word	0x00006179
    5e68:	20000068 	.word	0x20000068
    5e6c:	20000234 	.word	0x20000234
    5e70:	00003441 	.word	0x00003441
    5e74:	200001fc 	.word	0x200001fc
    5e78:	2000022c 	.word	0x2000022c
    5e7c:	2000017c 	.word	0x2000017c
    5e80:	20000174 	.word	0x20000174
    5e84:	000061a5 	.word	0x000061a5
    5e88:	00005ecd 	.word	0x00005ecd
    5e8c:	2000017a 	.word	0x2000017a
    5e90:	20000116 	.word	0x20000116
    5e94:	20000178 	.word	0x20000178
    5e98:	2000022a 	.word	0x2000022a
    5e9c:	20000180 	.word	0x20000180
    5ea0:	00006071 	.word	0x00006071
    5ea4:	20000270 	.word	0x20000270

00005ea8 <isr0>:

// internal function
void isr0()
{ 
    5ea8:	b580      	push	{r7, lr}
    5eaa:	af00      	add	r7, sp, #0
	_inISR = true; 
    5eac:	4b05      	ldr	r3, [pc, #20]	; (5ec4 <isr0+0x1c>)
    5eae:	2201      	movs	r2, #1
    5eb0:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    5eb2:	4b05      	ldr	r3, [pc, #20]	; (5ec8 <isr0+0x20>)
    5eb4:	4798      	blx	r3
	_inISR = false;
    5eb6:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <isr0+0x1c>)
    5eb8:	2200      	movs	r2, #0
    5eba:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    5ebc:	46c0      	nop			; (mov r8, r8)
    5ebe:	46bd      	mov	sp, r7
    5ec0:	bd80      	pop	{r7, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	20000131 	.word	0x20000131
    5ec8:	00005cf1 	.word	0x00005cf1

00005ecc <receiveBegin>:

// internal function
void receiveBegin() {
    5ecc:	b580      	push	{r7, lr}
    5ece:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    5ed0:	4b19      	ldr	r3, [pc, #100]	; (5f38 <receiveBegin+0x6c>)
    5ed2:	2200      	movs	r2, #0
    5ed4:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    5ed6:	4b19      	ldr	r3, [pc, #100]	; (5f3c <receiveBegin+0x70>)
    5ed8:	2200      	movs	r2, #0
    5eda:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    5edc:	4b18      	ldr	r3, [pc, #96]	; (5f40 <receiveBegin+0x74>)
    5ede:	2200      	movs	r2, #0
    5ee0:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    5ee2:	4b18      	ldr	r3, [pc, #96]	; (5f44 <receiveBegin+0x78>)
    5ee4:	2200      	movs	r2, #0
    5ee6:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    5ee8:	4b17      	ldr	r3, [pc, #92]	; (5f48 <receiveBegin+0x7c>)
    5eea:	2200      	movs	r2, #0
    5eec:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    5eee:	4b17      	ldr	r3, [pc, #92]	; (5f4c <receiveBegin+0x80>)
    5ef0:	2200      	movs	r2, #0
    5ef2:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    5ef4:	4b16      	ldr	r3, [pc, #88]	; (5f50 <receiveBegin+0x84>)
    5ef6:	2200      	movs	r2, #0
    5ef8:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    5efa:	2028      	movs	r0, #40	; 0x28
    5efc:	4b15      	ldr	r3, [pc, #84]	; (5f54 <receiveBegin+0x88>)
    5efe:	4798      	blx	r3
    5f00:	0003      	movs	r3, r0
    5f02:	001a      	movs	r2, r3
    5f04:	2304      	movs	r3, #4
    5f06:	4013      	ands	r3, r2
    5f08:	d00b      	beq.n	5f22 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5f0a:	203d      	movs	r0, #61	; 0x3d
    5f0c:	4b11      	ldr	r3, [pc, #68]	; (5f54 <receiveBegin+0x88>)
    5f0e:	4798      	blx	r3
    5f10:	0003      	movs	r3, r0
    5f12:	001a      	movs	r2, r3
    5f14:	2304      	movs	r3, #4
    5f16:	4313      	orrs	r3, r2
    5f18:	b2db      	uxtb	r3, r3
    5f1a:	0019      	movs	r1, r3
    5f1c:	203d      	movs	r0, #61	; 0x3d
    5f1e:	4b0e      	ldr	r3, [pc, #56]	; (5f58 <receiveBegin+0x8c>)
    5f20:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    5f22:	2140      	movs	r1, #64	; 0x40
    5f24:	2025      	movs	r0, #37	; 0x25
    5f26:	4b0c      	ldr	r3, [pc, #48]	; (5f58 <receiveBegin+0x8c>)
    5f28:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    5f2a:	2003      	movs	r0, #3
    5f2c:	4b0b      	ldr	r3, [pc, #44]	; (5f5c <receiveBegin+0x90>)
    5f2e:	4798      	blx	r3
}
    5f30:	46c0      	nop			; (mov r8, r8)
    5f32:	46bd      	mov	sp, r7
    5f34:	bd80      	pop	{r7, pc}
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	2000017a 	.word	0x2000017a
    5f3c:	20000116 	.word	0x20000116
    5f40:	2000022c 	.word	0x2000022c
    5f44:	200001fc 	.word	0x200001fc
    5f48:	2000022a 	.word	0x2000022a
    5f4c:	20000178 	.word	0x20000178
    5f50:	20000270 	.word	0x20000270
    5f54:	000060b1 	.word	0x000060b1
    5f58:	00006119 	.word	0x00006119
    5f5c:	00005ac5 	.word	0x00005ac5

00005f60 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    5f60:	b580      	push	{r7, lr}
    5f62:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    5f64:	4b0f      	ldr	r3, [pc, #60]	; (5fa4 <RFM_receiveDone+0x44>)
    5f66:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    5f68:	4b0f      	ldr	r3, [pc, #60]	; (5fa8 <RFM_receiveDone+0x48>)
    5f6a:	881b      	ldrh	r3, [r3, #0]
    5f6c:	b29b      	uxth	r3, r3
    5f6e:	2b03      	cmp	r3, #3
    5f70:	d109      	bne.n	5f86 <RFM_receiveDone+0x26>
    5f72:	4b0e      	ldr	r3, [pc, #56]	; (5fac <RFM_receiveDone+0x4c>)
    5f74:	881b      	ldrh	r3, [r3, #0]
    5f76:	b29b      	uxth	r3, r3
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d004      	beq.n	5f86 <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    5f7c:	2001      	movs	r0, #1
    5f7e:	4b0c      	ldr	r3, [pc, #48]	; (5fb0 <RFM_receiveDone+0x50>)
    5f80:	4798      	blx	r3
    return true;
    5f82:	2301      	movs	r3, #1
    5f84:	e00b      	b.n	5f9e <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    5f86:	4b08      	ldr	r3, [pc, #32]	; (5fa8 <RFM_receiveDone+0x48>)
    5f88:	881b      	ldrh	r3, [r3, #0]
    5f8a:	b29b      	uxth	r3, r3
    5f8c:	2b03      	cmp	r3, #3
    5f8e:	d103      	bne.n	5f98 <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    5f90:	4b08      	ldr	r3, [pc, #32]	; (5fb4 <RFM_receiveDone+0x54>)
    5f92:	4798      	blx	r3
    return false;
    5f94:	2300      	movs	r3, #0
    5f96:	e002      	b.n	5f9e <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    5f98:	4b07      	ldr	r3, [pc, #28]	; (5fb8 <RFM_receiveDone+0x58>)
    5f9a:	4798      	blx	r3
  return false;
    5f9c:	2300      	movs	r3, #0
}
    5f9e:	0018      	movs	r0, r3
    5fa0:	46bd      	mov	sp, r7
    5fa2:	bd80      	pop	{r7, pc}
    5fa4:	00004f85 	.word	0x00004f85
    5fa8:	2000022e 	.word	0x2000022e
    5fac:	200001fc 	.word	0x200001fc
    5fb0:	00005ac5 	.word	0x00005ac5
    5fb4:	00004f69 	.word	0x00004f69
    5fb8:	00005ecd 	.word	0x00005ecd

00005fbc <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b084      	sub	sp, #16
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    5fc4:	2001      	movs	r0, #1
    5fc6:	4b22      	ldr	r3, [pc, #136]	; (6050 <RFM_encrypt+0x94>)
    5fc8:	4798      	blx	r3
  if (key != 0)
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	2b00      	cmp	r3, #0
    5fce:	d026      	beq.n	601e <RFM_encrypt+0x62>
  {
    radioselect();
    5fd0:	4b20      	ldr	r3, [pc, #128]	; (6054 <RFM_encrypt+0x98>)
    5fd2:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    5fd4:	4a20      	ldr	r2, [pc, #128]	; (6058 <RFM_encrypt+0x9c>)
    5fd6:	4b21      	ldr	r3, [pc, #132]	; (605c <RFM_encrypt+0xa0>)
    5fd8:	21be      	movs	r1, #190	; 0xbe
    5fda:	0018      	movs	r0, r3
    5fdc:	4b20      	ldr	r3, [pc, #128]	; (6060 <RFM_encrypt+0xa4>)
    5fde:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    5fe0:	230f      	movs	r3, #15
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2200      	movs	r2, #0
    5fe6:	701a      	strb	r2, [r3, #0]
    5fe8:	e012      	b.n	6010 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    5fea:	230f      	movs	r3, #15
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	781b      	ldrb	r3, [r3, #0]
    5ff0:	687a      	ldr	r2, [r7, #4]
    5ff2:	18d3      	adds	r3, r2, r3
    5ff4:	781b      	ldrb	r3, [r3, #0]
    5ff6:	b299      	uxth	r1, r3
    5ff8:	4a17      	ldr	r2, [pc, #92]	; (6058 <RFM_encrypt+0x9c>)
    5ffa:	4b18      	ldr	r3, [pc, #96]	; (605c <RFM_encrypt+0xa0>)
    5ffc:	0018      	movs	r0, r3
    5ffe:	4b18      	ldr	r3, [pc, #96]	; (6060 <RFM_encrypt+0xa4>)
    6000:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    radioselect();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    6002:	230f      	movs	r3, #15
    6004:	18fb      	adds	r3, r7, r3
    6006:	781a      	ldrb	r2, [r3, #0]
    6008:	230f      	movs	r3, #15
    600a:	18fb      	adds	r3, r7, r3
    600c:	3201      	adds	r2, #1
    600e:	701a      	strb	r2, [r3, #0]
    6010:	230f      	movs	r3, #15
    6012:	18fb      	adds	r3, r7, r3
    6014:	781b      	ldrb	r3, [r3, #0]
    6016:	2b0f      	cmp	r3, #15
    6018:	d9e7      	bls.n	5fea <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    601a:	4b12      	ldr	r3, [pc, #72]	; (6064 <RFM_encrypt+0xa8>)
    601c:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    601e:	203d      	movs	r0, #61	; 0x3d
    6020:	4b11      	ldr	r3, [pc, #68]	; (6068 <RFM_encrypt+0xac>)
    6022:	4798      	blx	r3
    6024:	0003      	movs	r3, r0
    6026:	b25b      	sxtb	r3, r3
    6028:	2201      	movs	r2, #1
    602a:	4393      	bics	r3, r2
    602c:	b25a      	sxtb	r2, r3
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	1e59      	subs	r1, r3, #1
    6032:	418b      	sbcs	r3, r1
    6034:	b2db      	uxtb	r3, r3
    6036:	b25b      	sxtb	r3, r3
    6038:	4313      	orrs	r3, r2
    603a:	b25b      	sxtb	r3, r3
    603c:	b2db      	uxtb	r3, r3
    603e:	0019      	movs	r1, r3
    6040:	203d      	movs	r0, #61	; 0x3d
    6042:	4b0a      	ldr	r3, [pc, #40]	; (606c <RFM_encrypt+0xb0>)
    6044:	4798      	blx	r3
}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	46bd      	mov	sp, r7
    604a:	b004      	add	sp, #16
    604c:	bd80      	pop	{r7, pc}
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	00005ac5 	.word	0x00005ac5
    6054:	00006179 	.word	0x00006179
    6058:	20000068 	.word	0x20000068
    605c:	20000234 	.word	0x20000234
    6060:	00003441 	.word	0x00003441
    6064:	000061a5 	.word	0x000061a5
    6068:	000060b1 	.word	0x000060b1
    606c:	00006119 	.word	0x00006119

00006070 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    6070:	b580      	push	{r7, lr}
    6072:	b082      	sub	sp, #8
    6074:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    6076:	1dbb      	adds	r3, r7, #6
    6078:	2200      	movs	r2, #0
    607a:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    607c:	2024      	movs	r0, #36	; 0x24
    607e:	4b0b      	ldr	r3, [pc, #44]	; (60ac <readRSSI+0x3c>)
    6080:	4798      	blx	r3
    6082:	0003      	movs	r3, r0
    6084:	b29b      	uxth	r3, r3
    6086:	425b      	negs	r3, r3
    6088:	b29b      	uxth	r3, r3
    608a:	b21a      	sxth	r2, r3
    608c:	1dbb      	adds	r3, r7, #6
    608e:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    6090:	1dbb      	adds	r3, r7, #6
    6092:	881b      	ldrh	r3, [r3, #0]
    6094:	b21b      	sxth	r3, r3
    6096:	105b      	asrs	r3, r3, #1
    6098:	b21a      	sxth	r2, r3
    609a:	1dbb      	adds	r3, r7, #6
    609c:	801a      	strh	r2, [r3, #0]
  return rssi;
    609e:	1dbb      	adds	r3, r7, #6
    60a0:	881b      	ldrh	r3, [r3, #0]
    60a2:	b21b      	sxth	r3, r3
}
    60a4:	0018      	movs	r0, r3
    60a6:	46bd      	mov	sp, r7
    60a8:	b002      	add	sp, #8
    60aa:	bd80      	pop	{r7, pc}
    60ac:	000060b1 	.word	0x000060b1

000060b0 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b084      	sub	sp, #16
    60b4:	af00      	add	r7, sp, #0
    60b6:	0002      	movs	r2, r0
    60b8:	1dbb      	adds	r3, r7, #6
    60ba:	801a      	strh	r2, [r3, #0]
  radioselect();
    60bc:	4b11      	ldr	r3, [pc, #68]	; (6104 <readReg+0x54>)
    60be:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    60c0:	1dbb      	adds	r3, r7, #6
    60c2:	881b      	ldrh	r3, [r3, #0]
    60c4:	b29b      	uxth	r3, r3
    60c6:	227f      	movs	r2, #127	; 0x7f
    60c8:	4013      	ands	r3, r2
    60ca:	b299      	uxth	r1, r3
    60cc:	4a0e      	ldr	r2, [pc, #56]	; (6108 <readReg+0x58>)
    60ce:	4b0f      	ldr	r3, [pc, #60]	; (610c <readReg+0x5c>)
    60d0:	0018      	movs	r0, r3
    60d2:	4b0f      	ldr	r3, [pc, #60]	; (6110 <readReg+0x60>)
    60d4:	4798      	blx	r3
  volatile uint16_t regval = 0;
    60d6:	230e      	movs	r3, #14
    60d8:	18fb      	adds	r3, r7, r3
    60da:	2200      	movs	r2, #0
    60dc:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    60de:	230e      	movs	r3, #14
    60e0:	18fa      	adds	r2, r7, r3
    60e2:	4b0a      	ldr	r3, [pc, #40]	; (610c <readReg+0x5c>)
    60e4:	2100      	movs	r1, #0
    60e6:	0018      	movs	r0, r3
    60e8:	4b09      	ldr	r3, [pc, #36]	; (6110 <readReg+0x60>)
    60ea:	4798      	blx	r3
  unselect();
    60ec:	4b09      	ldr	r3, [pc, #36]	; (6114 <readReg+0x64>)
    60ee:	4798      	blx	r3
  return (uint8_t)regval;
    60f0:	230e      	movs	r3, #14
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	881b      	ldrh	r3, [r3, #0]
    60f6:	b29b      	uxth	r3, r3
    60f8:	b2db      	uxtb	r3, r3
}
    60fa:	0018      	movs	r0, r3
    60fc:	46bd      	mov	sp, r7
    60fe:	b004      	add	sp, #16
    6100:	bd80      	pop	{r7, pc}
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	00006179 	.word	0x00006179
    6108:	20000068 	.word	0x20000068
    610c:	20000234 	.word	0x20000234
    6110:	00003441 	.word	0x00003441
    6114:	000061a5 	.word	0x000061a5

00006118 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    6118:	b580      	push	{r7, lr}
    611a:	b082      	sub	sp, #8
    611c:	af00      	add	r7, sp, #0
    611e:	0002      	movs	r2, r0
    6120:	1dfb      	adds	r3, r7, #7
    6122:	701a      	strb	r2, [r3, #0]
    6124:	1dbb      	adds	r3, r7, #6
    6126:	1c0a      	adds	r2, r1, #0
    6128:	701a      	strb	r2, [r3, #0]
  radioselect();
    612a:	4b0e      	ldr	r3, [pc, #56]	; (6164 <writeReg+0x4c>)
    612c:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    612e:	1dfb      	adds	r3, r7, #7
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2280      	movs	r2, #128	; 0x80
    6134:	4252      	negs	r2, r2
    6136:	4313      	orrs	r3, r2
    6138:	b2db      	uxtb	r3, r3
    613a:	b299      	uxth	r1, r3
    613c:	4a0a      	ldr	r2, [pc, #40]	; (6168 <writeReg+0x50>)
    613e:	4b0b      	ldr	r3, [pc, #44]	; (616c <writeReg+0x54>)
    6140:	0018      	movs	r0, r3
    6142:	4b0b      	ldr	r3, [pc, #44]	; (6170 <writeReg+0x58>)
    6144:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    6146:	1dbb      	adds	r3, r7, #6
    6148:	781b      	ldrb	r3, [r3, #0]
    614a:	b299      	uxth	r1, r3
    614c:	4a06      	ldr	r2, [pc, #24]	; (6168 <writeReg+0x50>)
    614e:	4b07      	ldr	r3, [pc, #28]	; (616c <writeReg+0x54>)
    6150:	0018      	movs	r0, r3
    6152:	4b07      	ldr	r3, [pc, #28]	; (6170 <writeReg+0x58>)
    6154:	4798      	blx	r3
  unselect();
    6156:	4b07      	ldr	r3, [pc, #28]	; (6174 <writeReg+0x5c>)
    6158:	4798      	blx	r3
}
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	46bd      	mov	sp, r7
    615e:	b002      	add	sp, #8
    6160:	bd80      	pop	{r7, pc}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	00006179 	.word	0x00006179
    6168:	20000068 	.word	0x20000068
    616c:	20000234 	.word	0x20000234
    6170:	00003441 	.word	0x00003441
    6174:	000061a5 	.word	0x000061a5

00006178 <radioselect>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void radioselect() {
    6178:	b580      	push	{r7, lr}
    617a:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    617c:	4b05      	ldr	r3, [pc, #20]	; (6194 <radioselect+0x1c>)
    617e:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    6180:	4905      	ldr	r1, [pc, #20]	; (6198 <radioselect+0x20>)
    6182:	4b06      	ldr	r3, [pc, #24]	; (619c <radioselect+0x24>)
    6184:	2201      	movs	r2, #1
    6186:	0018      	movs	r0, r3
    6188:	4b05      	ldr	r3, [pc, #20]	; (61a0 <radioselect+0x28>)
    618a:	4798      	blx	r3
}
    618c:	46c0      	nop			; (mov r8, r8)
    618e:	46bd      	mov	sp, r7
    6190:	bd80      	pop	{r7, pc}
    6192:	46c0      	nop			; (mov r8, r8)
    6194:	00004f85 	.word	0x00004f85
    6198:	200002b4 	.word	0x200002b4
    619c:	20000234 	.word	0x20000234
    61a0:	0000358d 	.word	0x0000358d

000061a4 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    61a4:	b580      	push	{r7, lr}
    61a6:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    61a8:	4905      	ldr	r1, [pc, #20]	; (61c0 <unselect+0x1c>)
    61aa:	4b06      	ldr	r3, [pc, #24]	; (61c4 <unselect+0x20>)
    61ac:	2200      	movs	r2, #0
    61ae:	0018      	movs	r0, r3
    61b0:	4b05      	ldr	r3, [pc, #20]	; (61c8 <unselect+0x24>)
    61b2:	4798      	blx	r3
  maybeInterrupts();
    61b4:	4b05      	ldr	r3, [pc, #20]	; (61cc <unselect+0x28>)
    61b6:	4798      	blx	r3
}
    61b8:	46c0      	nop			; (mov r8, r8)
    61ba:	46bd      	mov	sp, r7
    61bc:	bd80      	pop	{r7, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	200002b4 	.word	0x200002b4
    61c4:	20000234 	.word	0x20000234
    61c8:	0000358d 	.word	0x0000358d
    61cc:	00006215 	.word	0x00006215

000061d0 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    61d0:	b580      	push	{r7, lr}
    61d2:	b082      	sub	sp, #8
    61d4:	af00      	add	r7, sp, #0
    61d6:	0002      	movs	r2, r0
    61d8:	1dfb      	adds	r3, r7, #7
    61da:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    61dc:	1dfb      	adds	r3, r7, #7
    61de:	781b      	ldrb	r3, [r3, #0]
    61e0:	2b00      	cmp	r3, #0
    61e2:	d001      	beq.n	61e8 <setHighPowerRegs+0x18>
    61e4:	235d      	movs	r3, #93	; 0x5d
    61e6:	e000      	b.n	61ea <setHighPowerRegs+0x1a>
    61e8:	2355      	movs	r3, #85	; 0x55
    61ea:	0019      	movs	r1, r3
    61ec:	205a      	movs	r0, #90	; 0x5a
    61ee:	4b08      	ldr	r3, [pc, #32]	; (6210 <setHighPowerRegs+0x40>)
    61f0:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    61f2:	1dfb      	adds	r3, r7, #7
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	2b00      	cmp	r3, #0
    61f8:	d001      	beq.n	61fe <setHighPowerRegs+0x2e>
    61fa:	237c      	movs	r3, #124	; 0x7c
    61fc:	e000      	b.n	6200 <setHighPowerRegs+0x30>
    61fe:	2370      	movs	r3, #112	; 0x70
    6200:	0019      	movs	r1, r3
    6202:	205c      	movs	r0, #92	; 0x5c
    6204:	4b02      	ldr	r3, [pc, #8]	; (6210 <setHighPowerRegs+0x40>)
    6206:	4798      	blx	r3
}
    6208:	46c0      	nop			; (mov r8, r8)
    620a:	46bd      	mov	sp, r7
    620c:	b002      	add	sp, #8
    620e:	bd80      	pop	{r7, pc}
    6210:	00006119 	.word	0x00006119

00006214 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    6214:	b580      	push	{r7, lr}
    6216:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    6218:	4b06      	ldr	r3, [pc, #24]	; (6234 <maybeInterrupts+0x20>)
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	b2db      	uxtb	r3, r3
    621e:	2201      	movs	r2, #1
    6220:	4053      	eors	r3, r2
    6222:	b2db      	uxtb	r3, r3
    6224:	2b00      	cmp	r3, #0
    6226:	d001      	beq.n	622c <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    6228:	4b03      	ldr	r3, [pc, #12]	; (6238 <maybeInterrupts+0x24>)
    622a:	4798      	blx	r3
}
    622c:	46c0      	nop			; (mov r8, r8)
    622e:	46bd      	mov	sp, r7
    6230:	bd80      	pop	{r7, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	20000131 	.word	0x20000131
    6238:	00004f69 	.word	0x00004f69

0000623c <configure_i2c_master>:
struct i2c_master_module i2c_master_instance;
void configure_i2c_master(void);


void configure_i2c_master(void)
{
    623c:	b580      	push	{r7, lr}
    623e:	b08e      	sub	sp, #56	; 0x38
    6240:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    6242:	1d3b      	adds	r3, r7, #4
    6244:	0018      	movs	r0, r3
    6246:	4b0c      	ldr	r3, [pc, #48]	; (6278 <configure_i2c_master+0x3c>)
    6248:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    624a:	1d3b      	adds	r3, r7, #4
    624c:	4a0b      	ldr	r2, [pc, #44]	; (627c <configure_i2c_master+0x40>)
    624e:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    6250:	1d3b      	adds	r3, r7, #4
    6252:	4a0b      	ldr	r2, [pc, #44]	; (6280 <configure_i2c_master+0x44>)
    6254:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    6256:	1d3b      	adds	r3, r7, #4
    6258:	4a0a      	ldr	r2, [pc, #40]	; (6284 <configure_i2c_master+0x48>)
    625a:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    625c:	1d3a      	adds	r2, r7, #4
    625e:	490a      	ldr	r1, [pc, #40]	; (6288 <configure_i2c_master+0x4c>)
    6260:	4b0a      	ldr	r3, [pc, #40]	; (628c <configure_i2c_master+0x50>)
    6262:	0018      	movs	r0, r3
    6264:	4b0a      	ldr	r3, [pc, #40]	; (6290 <configure_i2c_master+0x54>)
    6266:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    6268:	4b08      	ldr	r3, [pc, #32]	; (628c <configure_i2c_master+0x50>)
    626a:	0018      	movs	r0, r3
    626c:	4b09      	ldr	r3, [pc, #36]	; (6294 <configure_i2c_master+0x58>)
    626e:	4798      	blx	r3
}
    6270:	46c0      	nop			; (mov r8, r8)
    6272:	46bd      	mov	sp, r7
    6274:	b00e      	add	sp, #56	; 0x38
    6276:	bd80      	pop	{r7, pc}
    6278:	00005071 	.word	0x00005071
    627c:	00002710 	.word	0x00002710
    6280:	00160002 	.word	0x00160002
    6284:	00170002 	.word	0x00170002
    6288:	42001400 	.word	0x42001400
    628c:	20000200 	.word	0x20000200
    6290:	00001441 	.word	0x00001441
    6294:	000050f5 	.word	0x000050f5

00006298 <lipo_begin>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Initializes I2C and verifies communication with the BQ27441.
bool lipo_begin(void)
{
    6298:	b590      	push	{r4, r7, lr}
    629a:	b083      	sub	sp, #12
    629c:	af00      	add	r7, sp, #0
	uint16_t deviceID = 0;
    629e:	1dbb      	adds	r3, r7, #6
    62a0:	2200      	movs	r2, #0
    62a2:	801a      	strh	r2, [r3, #0]
	
	_userConfigControl = false;
    62a4:	4b0d      	ldr	r3, [pc, #52]	; (62dc <lipo_begin+0x44>)
    62a6:	2200      	movs	r2, #0
    62a8:	701a      	strb	r2, [r3, #0]
	_sealFlag = false;
    62aa:	4b0d      	ldr	r3, [pc, #52]	; (62e0 <lipo_begin+0x48>)
    62ac:	2200      	movs	r2, #0
    62ae:	701a      	strb	r2, [r3, #0]
	_deviceAddress = BQ72441_I2C_ADDRESS;
    62b0:	4b0c      	ldr	r3, [pc, #48]	; (62e4 <lipo_begin+0x4c>)
    62b2:	2255      	movs	r2, #85	; 0x55
    62b4:	701a      	strb	r2, [r3, #0]
	configure_i2c_master(); // Initialize I2C master
    62b6:	4b0c      	ldr	r3, [pc, #48]	; (62e8 <lipo_begin+0x50>)
    62b8:	4798      	blx	r3
	
	deviceID = deviceType(); // Read deviceType from BQ27441
    62ba:	1dbc      	adds	r4, r7, #6
    62bc:	4b0b      	ldr	r3, [pc, #44]	; (62ec <lipo_begin+0x54>)
    62be:	4798      	blx	r3
    62c0:	0003      	movs	r3, r0
    62c2:	8023      	strh	r3, [r4, #0]
	
	if (deviceID == BQ27441_DEVICE_ID)
    62c4:	1dbb      	adds	r3, r7, #6
    62c6:	881b      	ldrh	r3, [r3, #0]
    62c8:	4a09      	ldr	r2, [pc, #36]	; (62f0 <lipo_begin+0x58>)
    62ca:	4293      	cmp	r3, r2
    62cc:	d101      	bne.n	62d2 <lipo_begin+0x3a>
	{
		return true; // If device ID is valid, return true
    62ce:	2301      	movs	r3, #1
    62d0:	e000      	b.n	62d4 <lipo_begin+0x3c>
	}
	
	return false; // Otherwise return false
    62d2:	2300      	movs	r3, #0
}
    62d4:	0018      	movs	r0, r3
    62d6:	46bd      	mov	sp, r7
    62d8:	b003      	add	sp, #12
    62da:	bd90      	pop	{r4, r7, pc}
    62dc:	20000176 	.word	0x20000176
    62e0:	20000228 	.word	0x20000228
    62e4:	20000175 	.word	0x20000175
    62e8:	0000623d 	.word	0x0000623d
    62ec:	00006411 	.word	0x00006411
    62f0:	00000421 	.word	0x00000421

000062f4 <lipo_setCapacity>:

// Configures the design capacity of the connected battery.
bool lipo_setCapacity(uint16_t capacity)
{
    62f4:	b590      	push	{r4, r7, lr}
    62f6:	b085      	sub	sp, #20
    62f8:	af00      	add	r7, sp, #0
    62fa:	0002      	movs	r2, r0
    62fc:	1dbb      	adds	r3, r7, #6
    62fe:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	uint8_t capMSB = capacity >> 8;
    6300:	1dbb      	adds	r3, r7, #6
    6302:	881b      	ldrh	r3, [r3, #0]
    6304:	0a1b      	lsrs	r3, r3, #8
    6306:	b29a      	uxth	r2, r3
    6308:	230f      	movs	r3, #15
    630a:	18fb      	adds	r3, r7, r3
    630c:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
    630e:	230e      	movs	r3, #14
    6310:	18fb      	adds	r3, r7, r3
    6312:	1dba      	adds	r2, r7, #6
    6314:	8812      	ldrh	r2, [r2, #0]
    6316:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capMSB, capLSB};
    6318:	230c      	movs	r3, #12
    631a:	18fb      	adds	r3, r7, r3
    631c:	220f      	movs	r2, #15
    631e:	18ba      	adds	r2, r7, r2
    6320:	7812      	ldrb	r2, [r2, #0]
    6322:	701a      	strb	r2, [r3, #0]
    6324:	230c      	movs	r3, #12
    6326:	18fb      	adds	r3, r7, r3
    6328:	220e      	movs	r2, #14
    632a:	18ba      	adds	r2, r7, r2
    632c:	7812      	ldrb	r2, [r2, #0]
    632e:	705a      	strb	r2, [r3, #1]
	return writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
    6330:	230c      	movs	r3, #12
    6332:	18fa      	adds	r2, r7, r3
    6334:	2302      	movs	r3, #2
    6336:	210a      	movs	r1, #10
    6338:	2052      	movs	r0, #82	; 0x52
    633a:	4c03      	ldr	r4, [pc, #12]	; (6348 <lipo_setCapacity+0x54>)
    633c:	47a0      	blx	r4
    633e:	0003      	movs	r3, r0
}
    6340:	0018      	movs	r0, r3
    6342:	46bd      	mov	sp, r7
    6344:	b005      	add	sp, #20
    6346:	bd90      	pop	{r4, r7, pc}
    6348:	00006901 	.word	0x00006901

0000634c <lipo_current>:
	return readWord(BQ27441_COMMAND_VOLTAGE);
}

// Reads and returns the specified current measurement
int16_t lipo_current(current_measure type)
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	0002      	movs	r2, r0
    6354:	1dfb      	adds	r3, r7, #7
    6356:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
    6358:	230e      	movs	r3, #14
    635a:	18fb      	adds	r3, r7, r3
    635c:	2200      	movs	r2, #0
    635e:	801a      	strh	r2, [r3, #0]
	switch (type)
    6360:	1dfb      	adds	r3, r7, #7
    6362:	781b      	ldrb	r3, [r3, #0]
    6364:	2b01      	cmp	r3, #1
    6366:	d00c      	beq.n	6382 <lipo_current+0x36>
    6368:	2b02      	cmp	r3, #2
    636a:	d013      	beq.n	6394 <lipo_current+0x48>
    636c:	2b00      	cmp	r3, #0
    636e:	d11a      	bne.n	63a6 <lipo_current+0x5a>
	{
	case AVG:
		current = (int16_t) readWord(BQ27441_COMMAND_AVG_CURRENT);
    6370:	2010      	movs	r0, #16
    6372:	4b11      	ldr	r3, [pc, #68]	; (63b8 <lipo_current+0x6c>)
    6374:	4798      	blx	r3
    6376:	0003      	movs	r3, r0
    6378:	001a      	movs	r2, r3
    637a:	230e      	movs	r3, #14
    637c:	18fb      	adds	r3, r7, r3
    637e:	801a      	strh	r2, [r3, #0]
		break;
    6380:	e011      	b.n	63a6 <lipo_current+0x5a>
	case STBY:
		current = (int16_t) readWord(BQ27441_COMMAND_STDBY_CURRENT);
    6382:	2012      	movs	r0, #18
    6384:	4b0c      	ldr	r3, [pc, #48]	; (63b8 <lipo_current+0x6c>)
    6386:	4798      	blx	r3
    6388:	0003      	movs	r3, r0
    638a:	001a      	movs	r2, r3
    638c:	230e      	movs	r3, #14
    638e:	18fb      	adds	r3, r7, r3
    6390:	801a      	strh	r2, [r3, #0]
		break;
    6392:	e008      	b.n	63a6 <lipo_current+0x5a>
	case MAX:
		current = (int16_t) readWord(BQ27441_COMMAND_MAX_CURRENT);
    6394:	2014      	movs	r0, #20
    6396:	4b08      	ldr	r3, [pc, #32]	; (63b8 <lipo_current+0x6c>)
    6398:	4798      	blx	r3
    639a:	0003      	movs	r3, r0
    639c:	001a      	movs	r2, r3
    639e:	230e      	movs	r3, #14
    63a0:	18fb      	adds	r3, r7, r3
    63a2:	801a      	strh	r2, [r3, #0]
		break;
    63a4:	46c0      	nop			; (mov r8, r8)
	}
	
	return current;
    63a6:	230e      	movs	r3, #14
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	2200      	movs	r2, #0
    63ac:	5e9b      	ldrsh	r3, [r3, r2]
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00006631 	.word	0x00006631

000063bc <lipo_soc>:
	return (int16_t) readWord(BQ27441_COMMAND_AVG_POWER);
}

// Reads and returns specified state of charge measurement
uint16_t lipo_soc(soc_measure type)
{
    63bc:	b590      	push	{r4, r7, lr}
    63be:	b085      	sub	sp, #20
    63c0:	af00      	add	r7, sp, #0
    63c2:	0002      	movs	r2, r0
    63c4:	1dfb      	adds	r3, r7, #7
    63c6:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
    63c8:	230e      	movs	r3, #14
    63ca:	18fb      	adds	r3, r7, r3
    63cc:	2200      	movs	r2, #0
    63ce:	801a      	strh	r2, [r3, #0]
	switch (type)
    63d0:	1dfb      	adds	r3, r7, #7
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	2b00      	cmp	r3, #0
    63d6:	d002      	beq.n	63de <lipo_soc+0x22>
    63d8:	2b01      	cmp	r3, #1
    63da:	d008      	beq.n	63ee <lipo_soc+0x32>
    63dc:	e00f      	b.n	63fe <lipo_soc+0x42>
	{
	case FILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC);
    63de:	230e      	movs	r3, #14
    63e0:	18fc      	adds	r4, r7, r3
    63e2:	201c      	movs	r0, #28
    63e4:	4b09      	ldr	r3, [pc, #36]	; (640c <lipo_soc+0x50>)
    63e6:	4798      	blx	r3
    63e8:	0003      	movs	r3, r0
    63ea:	8023      	strh	r3, [r4, #0]
		break;
    63ec:	e007      	b.n	63fe <lipo_soc+0x42>
	case UNFILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL);
    63ee:	230e      	movs	r3, #14
    63f0:	18fc      	adds	r4, r7, r3
    63f2:	2030      	movs	r0, #48	; 0x30
    63f4:	4b05      	ldr	r3, [pc, #20]	; (640c <lipo_soc+0x50>)
    63f6:	4798      	blx	r3
    63f8:	0003      	movs	r3, r0
    63fa:	8023      	strh	r3, [r4, #0]
		break;
    63fc:	46c0      	nop			; (mov r8, r8)
	}
	
	return socRet;
    63fe:	230e      	movs	r3, #14
    6400:	18fb      	adds	r3, r7, r3
    6402:	881b      	ldrh	r3, [r3, #0]
}
    6404:	0018      	movs	r0, r3
    6406:	46bd      	mov	sp, r7
    6408:	b005      	add	sp, #20
    640a:	bd90      	pop	{r4, r7, pc}
    640c:	00006631 	.word	0x00006631

00006410 <deviceType>:
 *************************** Control Sub-Commands ****************************
 *****************************************************************************/

// Read the device type - should be 0x0421
uint16_t deviceType(void)
{
    6410:	b580      	push	{r7, lr}
    6412:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_DEVICE_TYPE);
    6414:	2001      	movs	r0, #1
    6416:	4b03      	ldr	r3, [pc, #12]	; (6424 <deviceType+0x14>)
    6418:	4798      	blx	r3
    641a:	0003      	movs	r3, r0
}
    641c:	0018      	movs	r0, r3
    641e:	46bd      	mov	sp, r7
    6420:	bd80      	pop	{r7, pc}
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	00006675 	.word	0x00006675

00006428 <enterConfig>:

// Enter configuration mode - set userControl if calling from an Arduino sketch
// and you want control over when to exitConfig
bool enterConfig(bool userControl)
{
    6428:	b580      	push	{r7, lr}
    642a:	b084      	sub	sp, #16
    642c:	af00      	add	r7, sp, #0
    642e:	0002      	movs	r2, r0
    6430:	1dfb      	adds	r3, r7, #7
    6432:	701a      	strb	r2, [r3, #0]
	if (userControl) _userConfigControl = true;
    6434:	1dfb      	adds	r3, r7, #7
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	2b00      	cmp	r3, #0
    643a:	d002      	beq.n	6442 <enterConfig+0x1a>
    643c:	4b1a      	ldr	r3, [pc, #104]	; (64a8 <enterConfig+0x80>)
    643e:	2201      	movs	r2, #1
    6440:	701a      	strb	r2, [r3, #0]
	
	if (sealed())
    6442:	4b1a      	ldr	r3, [pc, #104]	; (64ac <enterConfig+0x84>)
    6444:	4798      	blx	r3
    6446:	1e03      	subs	r3, r0, #0
    6448:	d004      	beq.n	6454 <enterConfig+0x2c>
	{
		_sealFlag = true;
    644a:	4b19      	ldr	r3, [pc, #100]	; (64b0 <enterConfig+0x88>)
    644c:	2201      	movs	r2, #1
    644e:	701a      	strb	r2, [r3, #0]
		unseal(); // Must be unsealed before making changes
    6450:	4b18      	ldr	r3, [pc, #96]	; (64b4 <enterConfig+0x8c>)
    6452:	4798      	blx	r3
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
    6454:	2013      	movs	r0, #19
    6456:	4b18      	ldr	r3, [pc, #96]	; (64b8 <enterConfig+0x90>)
    6458:	4798      	blx	r3
    645a:	1e03      	subs	r3, r0, #0
    645c:	d01f      	beq.n	649e <enterConfig+0x76>
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT - 1900;
    645e:	230e      	movs	r3, #14
    6460:	18fb      	adds	r3, r7, r3
    6462:	2264      	movs	r2, #100	; 0x64
    6464:	801a      	strh	r2, [r3, #0]
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	230e      	movs	r3, #14
    646a:	18fb      	adds	r3, r7, r3
    646c:	2200      	movs	r2, #0
    646e:	5e9b      	ldrsh	r3, [r3, r2]
    6470:	b29a      	uxth	r2, r3
    6472:	3a01      	subs	r2, #1
    6474:	b291      	uxth	r1, r2
    6476:	220e      	movs	r2, #14
    6478:	18ba      	adds	r2, r7, r2
    647a:	8011      	strh	r1, [r2, #0]
    647c:	2b00      	cmp	r3, #0
    647e:	d006      	beq.n	648e <enterConfig+0x66>
    6480:	4b0e      	ldr	r3, [pc, #56]	; (64bc <enterConfig+0x94>)
    6482:	4798      	blx	r3
    6484:	0003      	movs	r3, r0
    6486:	001a      	movs	r2, r3
    6488:	2310      	movs	r3, #16
    648a:	4013      	ands	r3, r2
    648c:	d0ec      	beq.n	6468 <enterConfig+0x40>
			  uint32_t time = millis();
			}
			*/
		}
		
		if (timeout > 0)
    648e:	230e      	movs	r3, #14
    6490:	18fb      	adds	r3, r7, r3
    6492:	2200      	movs	r2, #0
    6494:	5e9b      	ldrsh	r3, [r3, r2]
    6496:	2b00      	cmp	r3, #0
    6498:	dd01      	ble.n	649e <enterConfig+0x76>
			return true;
    649a:	2301      	movs	r3, #1
    649c:	e000      	b.n	64a0 <enterConfig+0x78>
	}
	
	return false;
    649e:	2300      	movs	r3, #0
}
    64a0:	0018      	movs	r0, r3
    64a2:	46bd      	mov	sp, r7
    64a4:	b004      	add	sp, #16
    64a6:	bd80      	pop	{r7, pc}
    64a8:	20000176 	.word	0x20000176
    64ac:	0000659d 	.word	0x0000659d
    64b0:	20000228 	.word	0x20000228
    64b4:	000065e5 	.word	0x000065e5
    64b8:	00006715 	.word	0x00006715
    64bc:	00006585 	.word	0x00006585

000064c0 <exitConfig>:

// Exit configuration mode with the option to perform a resimulation
bool exitConfig(bool resim)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b084      	sub	sp, #16
    64c4:	af00      	add	r7, sp, #0
    64c6:	0002      	movs	r2, r0
    64c8:	1dfb      	adds	r3, r7, #7
    64ca:	701a      	strb	r2, [r3, #0]
	//    2. Execute the SOFT_RESET command
	// EXIT_CFGUPDATE exits config mode _without_ an OCV (open-circuit voltage)
	// measurement, and without resimulating to update unfiltered-SoC and SoC.
	// If a new OCV measurement or resimulation is desired, SOFT_RESET or
	// EXIT_RESIM should be used to exit config mode.
	if (resim)
    64cc:	1dfb      	adds	r3, r7, #7
    64ce:	781b      	ldrb	r3, [r3, #0]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d037      	beq.n	6544 <exitConfig+0x84>
	{
		if (softReset())
    64d4:	4b1f      	ldr	r3, [pc, #124]	; (6554 <exitConfig+0x94>)
    64d6:	4798      	blx	r3
    64d8:	1e03      	subs	r3, r0, #0
    64da:	d031      	beq.n	6540 <exitConfig+0x80>
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
    64dc:	230e      	movs	r3, #14
    64de:	18fb      	adds	r3, r7, r3
    64e0:	22fa      	movs	r2, #250	; 0xfa
    64e2:	00d2      	lsls	r2, r2, #3
    64e4:	801a      	strh	r2, [r3, #0]
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    64e6:	e00a      	b.n	64fe <exitConfig+0x3e>
			{
				uint32_t time = millis();
    64e8:	4b1b      	ldr	r3, [pc, #108]	; (6558 <exitConfig+0x98>)
    64ea:	4798      	blx	r3
    64ec:	0003      	movs	r3, r0
    64ee:	60bb      	str	r3, [r7, #8]
				while(millis()-time < 1)
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	4b19      	ldr	r3, [pc, #100]	; (6558 <exitConfig+0x98>)
    64f4:	4798      	blx	r3
    64f6:	1e02      	subs	r2, r0, #0
    64f8:	68bb      	ldr	r3, [r7, #8]
    64fa:	429a      	cmp	r2, r3
    64fc:	d0f9      	beq.n	64f2 <exitConfig+0x32>
	if (resim)
	{
		if (softReset())
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    64fe:	230e      	movs	r3, #14
    6500:	18fb      	adds	r3, r7, r3
    6502:	2200      	movs	r2, #0
    6504:	5e9b      	ldrsh	r3, [r3, r2]
    6506:	b29a      	uxth	r2, r3
    6508:	3a01      	subs	r2, #1
    650a:	b291      	uxth	r1, r2
    650c:	220e      	movs	r2, #14
    650e:	18ba      	adds	r2, r7, r2
    6510:	8011      	strh	r1, [r2, #0]
    6512:	2b00      	cmp	r3, #0
    6514:	d006      	beq.n	6524 <exitConfig+0x64>
    6516:	4b11      	ldr	r3, [pc, #68]	; (655c <exitConfig+0x9c>)
    6518:	4798      	blx	r3
    651a:	0003      	movs	r3, r0
    651c:	001a      	movs	r2, r3
    651e:	2310      	movs	r3, #16
    6520:	4013      	ands	r3, r2
    6522:	d1e1      	bne.n	64e8 <exitConfig+0x28>
				{
					//Delay(1);
				}
			}

			if (timeout > 0)
    6524:	230e      	movs	r3, #14
    6526:	18fb      	adds	r3, r7, r3
    6528:	2200      	movs	r2, #0
    652a:	5e9b      	ldrsh	r3, [r3, r2]
    652c:	2b00      	cmp	r3, #0
    652e:	dd07      	ble.n	6540 <exitConfig+0x80>
			{
				if (_sealFlag) seal(); // Seal back up if we IC was sealed coming in
    6530:	4b0b      	ldr	r3, [pc, #44]	; (6560 <exitConfig+0xa0>)
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	2b00      	cmp	r3, #0
    6536:	d001      	beq.n	653c <exitConfig+0x7c>
    6538:	4b0a      	ldr	r3, [pc, #40]	; (6564 <exitConfig+0xa4>)
    653a:	4798      	blx	r3
				return true;
    653c:	2301      	movs	r3, #1
    653e:	e005      	b.n	654c <exitConfig+0x8c>
			}
		}
		return false;
    6540:	2300      	movs	r3, #0
    6542:	e003      	b.n	654c <exitConfig+0x8c>
	}
	else
	{
		return executeControlWord(BQ27441_CONTROL_EXIT_CFGUPDATE);
    6544:	2043      	movs	r0, #67	; 0x43
    6546:	4b08      	ldr	r3, [pc, #32]	; (6568 <exitConfig+0xa8>)
    6548:	4798      	blx	r3
    654a:	0003      	movs	r3, r0
	}	
}
    654c:	0018      	movs	r0, r3
    654e:	46bd      	mov	sp, r7
    6550:	b004      	add	sp, #16
    6552:	bd80      	pop	{r7, pc}
    6554:	00006619 	.word	0x00006619
    6558:	000054fd 	.word	0x000054fd
    655c:	0000656d 	.word	0x0000656d
    6560:	20000228 	.word	0x20000228
    6564:	000065c9 	.word	0x000065c9
    6568:	00006715 	.word	0x00006715

0000656c <flags>:

// Read the flags() command
uint16_t flags(void)
{
    656c:	b580      	push	{r7, lr}
    656e:	af00      	add	r7, sp, #0
	return readWord(BQ27441_COMMAND_FLAGS);
    6570:	2006      	movs	r0, #6
    6572:	4b03      	ldr	r3, [pc, #12]	; (6580 <flags+0x14>)
    6574:	4798      	blx	r3
    6576:	0003      	movs	r3, r0
}
    6578:	0018      	movs	r0, r3
    657a:	46bd      	mov	sp, r7
    657c:	bd80      	pop	{r7, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	00006631 	.word	0x00006631

00006584 <status>:

// Read the CONTROL_STATUS subcommand of control()
uint16_t status(void)
{
    6584:	b580      	push	{r7, lr}
    6586:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_STATUS);
    6588:	2000      	movs	r0, #0
    658a:	4b03      	ldr	r3, [pc, #12]	; (6598 <status+0x14>)
    658c:	4798      	blx	r3
    658e:	0003      	movs	r3, r0
}
    6590:	0018      	movs	r0, r3
    6592:	46bd      	mov	sp, r7
    6594:	bd80      	pop	{r7, pc}
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	00006675 	.word	0x00006675

0000659c <sealed>:

/***************************** Private Functions *****************************/

// Check if the BQ27441-G1A is sealed or not.
bool sealed(void)
{
    659c:	b590      	push	{r4, r7, lr}
    659e:	b083      	sub	sp, #12
    65a0:	af00      	add	r7, sp, #0
	uint16_t stat = status();
    65a2:	1dbc      	adds	r4, r7, #6
    65a4:	4b07      	ldr	r3, [pc, #28]	; (65c4 <sealed+0x28>)
    65a6:	4798      	blx	r3
    65a8:	0003      	movs	r3, r0
    65aa:	8023      	strh	r3, [r4, #0]
	return stat & BQ27441_STATUS_SS;
    65ac:	1dbb      	adds	r3, r7, #6
    65ae:	881a      	ldrh	r2, [r3, #0]
    65b0:	2380      	movs	r3, #128	; 0x80
    65b2:	019b      	lsls	r3, r3, #6
    65b4:	4013      	ands	r3, r2
    65b6:	1e5a      	subs	r2, r3, #1
    65b8:	4193      	sbcs	r3, r2
    65ba:	b2db      	uxtb	r3, r3
}
    65bc:	0018      	movs	r0, r3
    65be:	46bd      	mov	sp, r7
    65c0:	b003      	add	sp, #12
    65c2:	bd90      	pop	{r4, r7, pc}
    65c4:	00006585 	.word	0x00006585

000065c8 <seal>:

// Seal the BQ27441-G1A
bool seal(void)
{
    65c8:	b580      	push	{r7, lr}
    65ca:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_SEALED);
    65cc:	2020      	movs	r0, #32
    65ce:	4b04      	ldr	r3, [pc, #16]	; (65e0 <seal+0x18>)
    65d0:	4798      	blx	r3
    65d2:	0003      	movs	r3, r0
    65d4:	1e5a      	subs	r2, r3, #1
    65d6:	4193      	sbcs	r3, r2
    65d8:	b2db      	uxtb	r3, r3
}
    65da:	0018      	movs	r0, r3
    65dc:	46bd      	mov	sp, r7
    65de:	bd80      	pop	{r7, pc}
    65e0:	00006675 	.word	0x00006675

000065e4 <unseal>:

// UNseal the BQ27441-G1A
bool unseal(void)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	af00      	add	r7, sp, #0
	// To unseal the BQ27441, write the key to the control
	// command. Then immediately write the same key to control again.
	if (readControlWord(BQ27441_UNSEAL_KEY))
    65e8:	2380      	movs	r3, #128	; 0x80
    65ea:	021b      	lsls	r3, r3, #8
    65ec:	0018      	movs	r0, r3
    65ee:	4b09      	ldr	r3, [pc, #36]	; (6614 <unseal+0x30>)
    65f0:	4798      	blx	r3
    65f2:	1e03      	subs	r3, r0, #0
    65f4:	d009      	beq.n	660a <unseal+0x26>
	{
		return readControlWord(BQ27441_UNSEAL_KEY);
    65f6:	2380      	movs	r3, #128	; 0x80
    65f8:	021b      	lsls	r3, r3, #8
    65fa:	0018      	movs	r0, r3
    65fc:	4b05      	ldr	r3, [pc, #20]	; (6614 <unseal+0x30>)
    65fe:	4798      	blx	r3
    6600:	0003      	movs	r3, r0
    6602:	1e5a      	subs	r2, r3, #1
    6604:	4193      	sbcs	r3, r2
    6606:	b2db      	uxtb	r3, r3
    6608:	e000      	b.n	660c <unseal+0x28>
	}
	return false;
    660a:	2300      	movs	r3, #0
}
    660c:	0018      	movs	r0, r3
    660e:	46bd      	mov	sp, r7
    6610:	bd80      	pop	{r7, pc}
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	00006675 	.word	0x00006675

00006618 <softReset>:
	return writeExtendedData(BQ27441_ID_REGISTERS, 0, opConfigData, 2);	
}

// Issue a soft-reset to the BQ27441-G1A
bool softReset(void)
{
    6618:	b580      	push	{r7, lr}
    661a:	af00      	add	r7, sp, #0
	return executeControlWord(BQ27441_CONTROL_SOFT_RESET);
    661c:	2042      	movs	r0, #66	; 0x42
    661e:	4b03      	ldr	r3, [pc, #12]	; (662c <softReset+0x14>)
    6620:	4798      	blx	r3
    6622:	0003      	movs	r3, r0
}
    6624:	0018      	movs	r0, r3
    6626:	46bd      	mov	sp, r7
    6628:	bd80      	pop	{r7, pc}
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	00006715 	.word	0x00006715

00006630 <readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t readWord(uint16_t subAddress)
{
    6630:	b580      	push	{r7, lr}
    6632:	b084      	sub	sp, #16
    6634:	af00      	add	r7, sp, #0
    6636:	0002      	movs	r2, r0
    6638:	1dbb      	adds	r3, r7, #6
    663a:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	i2cReadBytes(subAddress, data, 2);
    663c:	1dbb      	adds	r3, r7, #6
    663e:	881b      	ldrh	r3, [r3, #0]
    6640:	b2db      	uxtb	r3, r3
    6642:	220c      	movs	r2, #12
    6644:	18b9      	adds	r1, r7, r2
    6646:	2202      	movs	r2, #2
    6648:	0018      	movs	r0, r3
    664a:	4b09      	ldr	r3, [pc, #36]	; (6670 <readWord+0x40>)
    664c:	4798      	blx	r3
	return ((uint16_t) data[1] << 8) | data[0];
    664e:	230c      	movs	r3, #12
    6650:	18fb      	adds	r3, r7, r3
    6652:	785b      	ldrb	r3, [r3, #1]
    6654:	021b      	lsls	r3, r3, #8
    6656:	b21a      	sxth	r2, r3
    6658:	230c      	movs	r3, #12
    665a:	18fb      	adds	r3, r7, r3
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	b21b      	sxth	r3, r3
    6660:	4313      	orrs	r3, r2
    6662:	b21b      	sxth	r3, r3
    6664:	b29b      	uxth	r3, r3
}
    6666:	0018      	movs	r0, r3
    6668:	46bd      	mov	sp, r7
    666a:	b004      	add	sp, #16
    666c:	bd80      	pop	{r7, pc}
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	00006a25 	.word	0x00006a25

00006674 <readControlWord>:

// Read a 16-bit subcommand() from the BQ27441-G1A's control()
uint16_t readControlWord(uint16_t function)
{
    6674:	b580      	push	{r7, lr}
    6676:	b086      	sub	sp, #24
    6678:	af00      	add	r7, sp, #0
    667a:	0002      	movs	r2, r0
    667c:	1dbb      	adds	r3, r7, #6
    667e:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    6680:	1dbb      	adds	r3, r7, #6
    6682:	881b      	ldrh	r3, [r3, #0]
    6684:	0a1b      	lsrs	r3, r3, #8
    6686:	b29a      	uxth	r2, r3
    6688:	2317      	movs	r3, #23
    668a:	18fb      	adds	r3, r7, r3
    668c:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    668e:	2316      	movs	r3, #22
    6690:	18fb      	adds	r3, r7, r3
    6692:	1dba      	adds	r2, r7, #6
    6694:	8812      	ldrh	r2, [r2, #0]
    6696:	701a      	strb	r2, [r3, #0]
	uint8_t command[3] = {0x00, subCommandLSB, subCommandMSB};
    6698:	2310      	movs	r3, #16
    669a:	18fb      	adds	r3, r7, r3
    669c:	2200      	movs	r2, #0
    669e:	701a      	strb	r2, [r3, #0]
    66a0:	2310      	movs	r3, #16
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	2216      	movs	r2, #22
    66a6:	18ba      	adds	r2, r7, r2
    66a8:	7812      	ldrb	r2, [r2, #0]
    66aa:	705a      	strb	r2, [r3, #1]
    66ac:	2310      	movs	r3, #16
    66ae:	18fb      	adds	r3, r7, r3
    66b0:	2217      	movs	r2, #23
    66b2:	18ba      	adds	r2, r7, r2
    66b4:	7812      	ldrb	r2, [r2, #0]
    66b6:	709a      	strb	r2, [r3, #2]
	uint8_t data[2] = {0, 0};
    66b8:	230c      	movs	r3, #12
    66ba:	18fb      	adds	r3, r7, r3
    66bc:	2200      	movs	r2, #0
    66be:	701a      	strb	r2, [r3, #0]
    66c0:	230c      	movs	r3, #12
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	2200      	movs	r2, #0
    66c6:	705a      	strb	r2, [r3, #1]
	
	i2cWriteBytes((uint8_t) 0, command, 3);
    66c8:	2310      	movs	r3, #16
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	2203      	movs	r2, #3
    66ce:	0019      	movs	r1, r3
    66d0:	2000      	movs	r0, #0
    66d2:	4b0e      	ldr	r3, [pc, #56]	; (670c <readControlWord+0x98>)
    66d4:	4798      	blx	r3
	
	if (i2cReadBytes((uint8_t) 0, data, 2))
    66d6:	230c      	movs	r3, #12
    66d8:	18fb      	adds	r3, r7, r3
    66da:	2202      	movs	r2, #2
    66dc:	0019      	movs	r1, r3
    66de:	2000      	movs	r0, #0
    66e0:	4b0b      	ldr	r3, [pc, #44]	; (6710 <readControlWord+0x9c>)
    66e2:	4798      	blx	r3
    66e4:	1e03      	subs	r3, r0, #0
    66e6:	d00c      	beq.n	6702 <readControlWord+0x8e>
	{
		return ((uint16_t)data[1] << 8) | data[0];
    66e8:	230c      	movs	r3, #12
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	785b      	ldrb	r3, [r3, #1]
    66ee:	021b      	lsls	r3, r3, #8
    66f0:	b21a      	sxth	r2, r3
    66f2:	230c      	movs	r3, #12
    66f4:	18fb      	adds	r3, r7, r3
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	b21b      	sxth	r3, r3
    66fa:	4313      	orrs	r3, r2
    66fc:	b21b      	sxth	r3, r3
    66fe:	b29b      	uxth	r3, r3
    6700:	e000      	b.n	6704 <readControlWord+0x90>
	}
	
	return false;
    6702:	2300      	movs	r3, #0
}
    6704:	0018      	movs	r0, r3
    6706:	46bd      	mov	sp, r7
    6708:	b006      	add	sp, #24
    670a:	bd80      	pop	{r7, pc}
    670c:	00006b25 	.word	0x00006b25
    6710:	00006a25 	.word	0x00006a25

00006714 <executeControlWord>:

// Execute a subcommand() from the BQ27441-G1A's control()
bool executeControlWord(uint16_t function)
{
    6714:	b580      	push	{r7, lr}
    6716:	b084      	sub	sp, #16
    6718:	af00      	add	r7, sp, #0
    671a:	0002      	movs	r2, r0
    671c:	1dbb      	adds	r3, r7, #6
    671e:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    6720:	1dbb      	adds	r3, r7, #6
    6722:	881b      	ldrh	r3, [r3, #0]
    6724:	0a1b      	lsrs	r3, r3, #8
    6726:	b29a      	uxth	r2, r3
    6728:	230f      	movs	r3, #15
    672a:	18fb      	adds	r3, r7, r3
    672c:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    672e:	230e      	movs	r3, #14
    6730:	18fb      	adds	r3, r7, r3
    6732:	1dba      	adds	r2, r7, #6
    6734:	8812      	ldrh	r2, [r2, #0]
    6736:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    6738:	230c      	movs	r3, #12
    673a:	18fb      	adds	r3, r7, r3
    673c:	220e      	movs	r2, #14
    673e:	18ba      	adds	r2, r7, r2
    6740:	7812      	ldrb	r2, [r2, #0]
    6742:	701a      	strb	r2, [r3, #0]
    6744:	230c      	movs	r3, #12
    6746:	18fb      	adds	r3, r7, r3
    6748:	220f      	movs	r2, #15
    674a:	18ba      	adds	r2, r7, r2
    674c:	7812      	ldrb	r2, [r2, #0]
    674e:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    6750:	2308      	movs	r3, #8
    6752:	18fb      	adds	r3, r7, r3
    6754:	2200      	movs	r2, #0
    6756:	701a      	strb	r2, [r3, #0]
    6758:	2308      	movs	r3, #8
    675a:	18fb      	adds	r3, r7, r3
    675c:	2200      	movs	r2, #0
    675e:	705a      	strb	r2, [r3, #1]
	
	if (i2cWriteBytes((uint8_t) 0, command, 2))
    6760:	230c      	movs	r3, #12
    6762:	18fb      	adds	r3, r7, r3
    6764:	2202      	movs	r2, #2
    6766:	0019      	movs	r1, r3
    6768:	2000      	movs	r0, #0
    676a:	4b05      	ldr	r3, [pc, #20]	; (6780 <executeControlWord+0x6c>)
    676c:	4798      	blx	r3
    676e:	1e03      	subs	r3, r0, #0
    6770:	d001      	beq.n	6776 <executeControlWord+0x62>
		return true;
    6772:	2301      	movs	r3, #1
    6774:	e000      	b.n	6778 <executeControlWord+0x64>
	
	return false;
    6776:	2300      	movs	r3, #0
}
    6778:	0018      	movs	r0, r3
    677a:	46bd      	mov	sp, r7
    677c:	b004      	add	sp, #16
    677e:	bd80      	pop	{r7, pc}
    6780:	00006b25 	.word	0x00006b25

00006784 <blockDataControl>:
 ************************** Extended Data Commands ***************************
 *****************************************************************************/
 
// Issue a BlockDataControl() command to enable BlockData access
bool blockDataControl(void)
{
    6784:	b580      	push	{r7, lr}
    6786:	b082      	sub	sp, #8
    6788:	af00      	add	r7, sp, #0
	uint8_t enableByte = 0x00;
    678a:	1dfb      	adds	r3, r7, #7
    678c:	2200      	movs	r2, #0
    678e:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
    6790:	1dfb      	adds	r3, r7, #7
    6792:	2201      	movs	r2, #1
    6794:	0019      	movs	r1, r3
    6796:	2061      	movs	r0, #97	; 0x61
    6798:	4b04      	ldr	r3, [pc, #16]	; (67ac <blockDataControl+0x28>)
    679a:	4798      	blx	r3
    679c:	0003      	movs	r3, r0
    679e:	1e5a      	subs	r2, r3, #1
    67a0:	4193      	sbcs	r3, r2
    67a2:	b2db      	uxtb	r3, r3
}
    67a4:	0018      	movs	r0, r3
    67a6:	46bd      	mov	sp, r7
    67a8:	b002      	add	sp, #8
    67aa:	bd80      	pop	{r7, pc}
    67ac:	00006b25 	.word	0x00006b25

000067b0 <blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
bool blockDataClass(uint8_t id)
{
    67b0:	b580      	push	{r7, lr}
    67b2:	b082      	sub	sp, #8
    67b4:	af00      	add	r7, sp, #0
    67b6:	0002      	movs	r2, r0
    67b8:	1dfb      	adds	r3, r7, #7
    67ba:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
    67bc:	1dfb      	adds	r3, r7, #7
    67be:	2201      	movs	r2, #1
    67c0:	0019      	movs	r1, r3
    67c2:	203e      	movs	r0, #62	; 0x3e
    67c4:	4b04      	ldr	r3, [pc, #16]	; (67d8 <blockDataClass+0x28>)
    67c6:	4798      	blx	r3
    67c8:	0003      	movs	r3, r0
    67ca:	1e5a      	subs	r2, r3, #1
    67cc:	4193      	sbcs	r3, r2
    67ce:	b2db      	uxtb	r3, r3
}
    67d0:	0018      	movs	r0, r3
    67d2:	46bd      	mov	sp, r7
    67d4:	b002      	add	sp, #8
    67d6:	bd80      	pop	{r7, pc}
    67d8:	00006b25 	.word	0x00006b25

000067dc <blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
bool blockDataOffset(uint8_t offset)
{
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	0002      	movs	r2, r0
    67e4:	1dfb      	adds	r3, r7, #7
    67e6:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
    67e8:	1dfb      	adds	r3, r7, #7
    67ea:	2201      	movs	r2, #1
    67ec:	0019      	movs	r1, r3
    67ee:	203f      	movs	r0, #63	; 0x3f
    67f0:	4b04      	ldr	r3, [pc, #16]	; (6804 <blockDataOffset+0x28>)
    67f2:	4798      	blx	r3
    67f4:	0003      	movs	r3, r0
    67f6:	1e5a      	subs	r2, r3, #1
    67f8:	4193      	sbcs	r3, r2
    67fa:	b2db      	uxtb	r3, r3
}
    67fc:	0018      	movs	r0, r3
    67fe:	46bd      	mov	sp, r7
    6800:	b002      	add	sp, #8
    6802:	bd80      	pop	{r7, pc}
    6804:	00006b25 	.word	0x00006b25

00006808 <blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t blockDataChecksum(void)
{
    6808:	b580      	push	{r7, lr}
    680a:	b082      	sub	sp, #8
    680c:	af00      	add	r7, sp, #0
	uint8_t csum;
	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
    680e:	1dfb      	adds	r3, r7, #7
    6810:	2201      	movs	r2, #1
    6812:	0019      	movs	r1, r3
    6814:	2060      	movs	r0, #96	; 0x60
    6816:	4b04      	ldr	r3, [pc, #16]	; (6828 <blockDataChecksum+0x20>)
    6818:	4798      	blx	r3
	return csum;
    681a:	1dfb      	adds	r3, r7, #7
    681c:	781b      	ldrb	r3, [r3, #0]
}
    681e:	0018      	movs	r0, r3
    6820:	46bd      	mov	sp, r7
    6822:	b002      	add	sp, #8
    6824:	bd80      	pop	{r7, pc}
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	00006a25 	.word	0x00006a25

0000682c <writeBlockData>:
	return ret;
}

// Use BlockData() to write a byte to an offset of the loaded data
bool writeBlockData(uint8_t offset, uint8_t data)
{
    682c:	b580      	push	{r7, lr}
    682e:	b084      	sub	sp, #16
    6830:	af00      	add	r7, sp, #0
    6832:	0002      	movs	r2, r0
    6834:	1dfb      	adds	r3, r7, #7
    6836:	701a      	strb	r2, [r3, #0]
    6838:	1dbb      	adds	r3, r7, #6
    683a:	1c0a      	adds	r2, r1, #0
    683c:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
    683e:	230f      	movs	r3, #15
    6840:	18fb      	adds	r3, r7, r3
    6842:	1dfa      	adds	r2, r7, #7
    6844:	7812      	ldrb	r2, [r2, #0]
    6846:	3240      	adds	r2, #64	; 0x40
    6848:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(address, &data, 1);
    684a:	1db9      	adds	r1, r7, #6
    684c:	230f      	movs	r3, #15
    684e:	18fb      	adds	r3, r7, r3
    6850:	781b      	ldrb	r3, [r3, #0]
    6852:	2201      	movs	r2, #1
    6854:	0018      	movs	r0, r3
    6856:	4b05      	ldr	r3, [pc, #20]	; (686c <writeBlockData+0x40>)
    6858:	4798      	blx	r3
    685a:	0003      	movs	r3, r0
    685c:	1e5a      	subs	r2, r3, #1
    685e:	4193      	sbcs	r3, r2
    6860:	b2db      	uxtb	r3, r3
}
    6862:	0018      	movs	r0, r3
    6864:	46bd      	mov	sp, r7
    6866:	b004      	add	sp, #16
    6868:	bd80      	pop	{r7, pc}
    686a:	46c0      	nop			; (mov r8, r8)
    686c:	00006b25 	.word	0x00006b25

00006870 <computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a 
// checksum based on the values.
uint8_t computeBlockChecksum(void)
{
    6870:	b580      	push	{r7, lr}
    6872:	b08a      	sub	sp, #40	; 0x28
    6874:	af00      	add	r7, sp, #0
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
    6876:	003b      	movs	r3, r7
    6878:	2220      	movs	r2, #32
    687a:	0019      	movs	r1, r3
    687c:	2040      	movs	r0, #64	; 0x40
    687e:	4b14      	ldr	r3, [pc, #80]	; (68d0 <computeBlockChecksum+0x60>)
    6880:	4798      	blx	r3

	uint8_t csum = 0;
    6882:	2327      	movs	r3, #39	; 0x27
    6884:	18fb      	adds	r3, r7, r3
    6886:	2200      	movs	r2, #0
    6888:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
    688a:	2300      	movs	r3, #0
    688c:	623b      	str	r3, [r7, #32]
    688e:	e00d      	b.n	68ac <computeBlockChecksum+0x3c>
	{
		csum += data[i];
    6890:	003a      	movs	r2, r7
    6892:	6a3b      	ldr	r3, [r7, #32]
    6894:	18d3      	adds	r3, r2, r3
    6896:	7819      	ldrb	r1, [r3, #0]
    6898:	2327      	movs	r3, #39	; 0x27
    689a:	18fb      	adds	r3, r7, r3
    689c:	2227      	movs	r2, #39	; 0x27
    689e:	18ba      	adds	r2, r7, r2
    68a0:	7812      	ldrb	r2, [r2, #0]
    68a2:	188a      	adds	r2, r1, r2
    68a4:	701a      	strb	r2, [r3, #0]
{
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);

	uint8_t csum = 0;
	for (int i=0; i<32; i++)
    68a6:	6a3b      	ldr	r3, [r7, #32]
    68a8:	3301      	adds	r3, #1
    68aa:	623b      	str	r3, [r7, #32]
    68ac:	6a3b      	ldr	r3, [r7, #32]
    68ae:	2b1f      	cmp	r3, #31
    68b0:	ddee      	ble.n	6890 <computeBlockChecksum+0x20>
	{
		csum += data[i];
	}
	csum = 255 - csum;
    68b2:	2327      	movs	r3, #39	; 0x27
    68b4:	18fb      	adds	r3, r7, r3
    68b6:	2227      	movs	r2, #39	; 0x27
    68b8:	18ba      	adds	r2, r7, r2
    68ba:	7812      	ldrb	r2, [r2, #0]
    68bc:	43d2      	mvns	r2, r2
    68be:	701a      	strb	r2, [r3, #0]
	
	return csum;
    68c0:	2327      	movs	r3, #39	; 0x27
    68c2:	18fb      	adds	r3, r7, r3
    68c4:	781b      	ldrb	r3, [r3, #0]
}
    68c6:	0018      	movs	r0, r3
    68c8:	46bd      	mov	sp, r7
    68ca:	b00a      	add	sp, #40	; 0x28
    68cc:	bd80      	pop	{r7, pc}
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	00006a25 	.word	0x00006a25

000068d4 <writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
bool writeBlockChecksum(uint8_t csum)
{
    68d4:	b580      	push	{r7, lr}
    68d6:	b082      	sub	sp, #8
    68d8:	af00      	add	r7, sp, #0
    68da:	0002      	movs	r2, r0
    68dc:	1dfb      	adds	r3, r7, #7
    68de:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);	
    68e0:	1dfb      	adds	r3, r7, #7
    68e2:	2201      	movs	r2, #1
    68e4:	0019      	movs	r1, r3
    68e6:	2060      	movs	r0, #96	; 0x60
    68e8:	4b04      	ldr	r3, [pc, #16]	; (68fc <writeBlockChecksum+0x28>)
    68ea:	4798      	blx	r3
    68ec:	0003      	movs	r3, r0
    68ee:	1e5a      	subs	r2, r3, #1
    68f0:	4193      	sbcs	r3, r2
    68f2:	b2db      	uxtb	r3, r3
}
    68f4:	0018      	movs	r0, r3
    68f6:	46bd      	mov	sp, r7
    68f8:	b002      	add	sp, #8
    68fa:	bd80      	pop	{r7, pc}
    68fc:	00006b25 	.word	0x00006b25

00006900 <writeExtendedData>:
}

// Write a specified number of bytes to extended data specifying a 
// class ID, position offset.
bool writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
    6900:	b590      	push	{r4, r7, lr}
    6902:	b085      	sub	sp, #20
    6904:	af00      	add	r7, sp, #0
    6906:	0004      	movs	r4, r0
    6908:	0008      	movs	r0, r1
    690a:	603a      	str	r2, [r7, #0]
    690c:	0019      	movs	r1, r3
    690e:	1dfb      	adds	r3, r7, #7
    6910:	1c22      	adds	r2, r4, #0
    6912:	701a      	strb	r2, [r3, #0]
    6914:	1dbb      	adds	r3, r7, #6
    6916:	1c02      	adds	r2, r0, #0
    6918:	701a      	strb	r2, [r3, #0]
    691a:	1d7b      	adds	r3, r7, #5
    691c:	1c0a      	adds	r2, r1, #0
    691e:	701a      	strb	r2, [r3, #0]
	if (len > 32)
    6920:	1d7b      	adds	r3, r7, #5
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	2b20      	cmp	r3, #32
    6926:	d901      	bls.n	692c <writeExtendedData+0x2c>
		return false;
    6928:	2300      	movs	r3, #0
    692a:	e063      	b.n	69f4 <writeExtendedData+0xf4>
	
	if (!_userConfigControl) enterConfig(false);
    692c:	4b33      	ldr	r3, [pc, #204]	; (69fc <writeExtendedData+0xfc>)
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	2201      	movs	r2, #1
    6932:	4053      	eors	r3, r2
    6934:	b2db      	uxtb	r3, r3
    6936:	2b00      	cmp	r3, #0
    6938:	d002      	beq.n	6940 <writeExtendedData+0x40>
    693a:	2000      	movs	r0, #0
    693c:	4b30      	ldr	r3, [pc, #192]	; (6a00 <writeExtendedData+0x100>)
    693e:	4798      	blx	r3
	
	if (!blockDataControl()) // // enable block data memory control
    6940:	4b30      	ldr	r3, [pc, #192]	; (6a04 <writeExtendedData+0x104>)
    6942:	4798      	blx	r3
    6944:	0003      	movs	r3, r0
    6946:	001a      	movs	r2, r3
    6948:	2301      	movs	r3, #1
    694a:	4053      	eors	r3, r2
    694c:	b2db      	uxtb	r3, r3
    694e:	2b00      	cmp	r3, #0
    6950:	d001      	beq.n	6956 <writeExtendedData+0x56>
		return false; // Return false if enable fails
    6952:	2300      	movs	r3, #0
    6954:	e04e      	b.n	69f4 <writeExtendedData+0xf4>
	if (!blockDataClass(classID)) // Write class ID using DataBlockClass()
    6956:	1dfb      	adds	r3, r7, #7
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	0018      	movs	r0, r3
    695c:	4b2a      	ldr	r3, [pc, #168]	; (6a08 <writeExtendedData+0x108>)
    695e:	4798      	blx	r3
    6960:	0003      	movs	r3, r0
    6962:	001a      	movs	r2, r3
    6964:	2301      	movs	r3, #1
    6966:	4053      	eors	r3, r2
    6968:	b2db      	uxtb	r3, r3
    696a:	2b00      	cmp	r3, #0
    696c:	d001      	beq.n	6972 <writeExtendedData+0x72>
		return false;
    696e:	2300      	movs	r3, #0
    6970:	e040      	b.n	69f4 <writeExtendedData+0xf4>
	
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
    6972:	1dbb      	adds	r3, r7, #6
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	095b      	lsrs	r3, r3, #5
    6978:	b2db      	uxtb	r3, r3
    697a:	0018      	movs	r0, r3
    697c:	4b23      	ldr	r3, [pc, #140]	; (6a0c <writeExtendedData+0x10c>)
    697e:	4798      	blx	r3
	computeBlockChecksum(); // Compute checksum going in
    6980:	4b23      	ldr	r3, [pc, #140]	; (6a10 <writeExtendedData+0x110>)
    6982:	4798      	blx	r3
	uint8_t oldCsum = blockDataChecksum();
    6984:	230b      	movs	r3, #11
    6986:	18fc      	adds	r4, r7, r3
    6988:	4b22      	ldr	r3, [pc, #136]	; (6a14 <writeExtendedData+0x114>)
    698a:	4798      	blx	r3
    698c:	0003      	movs	r3, r0
    698e:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
    6990:	2300      	movs	r3, #0
    6992:	60fb      	str	r3, [r7, #12]
    6994:	e012      	b.n	69bc <writeExtendedData+0xbc>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
    6996:	1dbb      	adds	r3, r7, #6
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	221f      	movs	r2, #31
    699c:	4013      	ands	r3, r2
    699e:	b2da      	uxtb	r2, r3
    69a0:	68fb      	ldr	r3, [r7, #12]
    69a2:	b2db      	uxtb	r3, r3
    69a4:	18d3      	adds	r3, r2, r3
    69a6:	b2d8      	uxtb	r0, r3
    69a8:	68fb      	ldr	r3, [r7, #12]
    69aa:	683a      	ldr	r2, [r7, #0]
    69ac:	18d3      	adds	r3, r2, r3
    69ae:	781b      	ldrb	r3, [r3, #0]
    69b0:	0019      	movs	r1, r3
    69b2:	4b19      	ldr	r3, [pc, #100]	; (6a18 <writeExtendedData+0x118>)
    69b4:	4798      	blx	r3
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
	computeBlockChecksum(); // Compute checksum going in
	uint8_t oldCsum = blockDataChecksum();

	// Write data bytes:
	for (int i = 0; i < len; i++)
    69b6:	68fb      	ldr	r3, [r7, #12]
    69b8:	3301      	adds	r3, #1
    69ba:	60fb      	str	r3, [r7, #12]
    69bc:	1d7b      	adds	r3, r7, #5
    69be:	781a      	ldrb	r2, [r3, #0]
    69c0:	68fb      	ldr	r3, [r7, #12]
    69c2:	429a      	cmp	r2, r3
    69c4:	dce7      	bgt.n	6996 <writeExtendedData+0x96>
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
	}
	
	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = computeBlockChecksum(); // Compute the new checksum
    69c6:	230a      	movs	r3, #10
    69c8:	18fc      	adds	r4, r7, r3
    69ca:	4b11      	ldr	r3, [pc, #68]	; (6a10 <writeExtendedData+0x110>)
    69cc:	4798      	blx	r3
    69ce:	0003      	movs	r3, r0
    69d0:	7023      	strb	r3, [r4, #0]
	writeBlockChecksum(newCsum);
    69d2:	230a      	movs	r3, #10
    69d4:	18fb      	adds	r3, r7, r3
    69d6:	781b      	ldrb	r3, [r3, #0]
    69d8:	0018      	movs	r0, r3
    69da:	4b10      	ldr	r3, [pc, #64]	; (6a1c <writeExtendedData+0x11c>)
    69dc:	4798      	blx	r3

	if (!_userConfigControl) exitConfig(true);
    69de:	4b07      	ldr	r3, [pc, #28]	; (69fc <writeExtendedData+0xfc>)
    69e0:	781b      	ldrb	r3, [r3, #0]
    69e2:	2201      	movs	r2, #1
    69e4:	4053      	eors	r3, r2
    69e6:	b2db      	uxtb	r3, r3
    69e8:	2b00      	cmp	r3, #0
    69ea:	d002      	beq.n	69f2 <writeExtendedData+0xf2>
    69ec:	2001      	movs	r0, #1
    69ee:	4b0c      	ldr	r3, [pc, #48]	; (6a20 <writeExtendedData+0x120>)
    69f0:	4798      	blx	r3
	
	return true;
    69f2:	2301      	movs	r3, #1
}
    69f4:	0018      	movs	r0, r3
    69f6:	46bd      	mov	sp, r7
    69f8:	b005      	add	sp, #20
    69fa:	bd90      	pop	{r4, r7, pc}
    69fc:	20000176 	.word	0x20000176
    6a00:	00006429 	.word	0x00006429
    6a04:	00006785 	.word	0x00006785
    6a08:	000067b1 	.word	0x000067b1
    6a0c:	000067dd 	.word	0x000067dd
    6a10:	00006871 	.word	0x00006871
    6a14:	00006809 	.word	0x00006809
    6a18:	0000682d 	.word	0x0000682d
    6a1c:	000068d5 	.word	0x000068d5
    6a20:	000064c1 	.word	0x000064c1

00006a24 <i2cReadBytes>:
 ************************ I2C Read and Write Routines ************************
 *****************************************************************************/

// Read a specified number of bytes over I2C at a given subAddress
int16_t i2cReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    6a24:	b580      	push	{r7, lr}
    6a26:	b086      	sub	sp, #24
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6039      	str	r1, [r7, #0]
    6a2c:	0011      	movs	r1, r2
    6a2e:	1dfb      	adds	r3, r7, #7
    6a30:	1c02      	adds	r2, r0, #0
    6a32:	701a      	strb	r2, [r3, #0]
    6a34:	1dbb      	adds	r3, r7, #6
    6a36:	1c0a      	adds	r2, r1, #0
    6a38:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;	
    6a3a:	2316      	movs	r3, #22
    6a3c:	18fb      	adds	r3, r7, r3
    6a3e:	22fa      	movs	r2, #250	; 0xfa
    6a40:	00d2      	lsls	r2, r2, #3
    6a42:	801a      	strh	r2, [r3, #0]

	uint8_t write_buffer = subAddress;
    6a44:	2315      	movs	r3, #21
    6a46:	18fb      	adds	r3, r7, r3
    6a48:	1dfa      	adds	r2, r7, #7
    6a4a:	7812      	ldrb	r2, [r2, #0]
    6a4c:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6a4e:	4b31      	ldr	r3, [pc, #196]	; (6b14 <i2cReadBytes+0xf0>)
    6a50:	781b      	ldrb	r3, [r3, #0]
    6a52:	b29a      	uxth	r2, r3
    6a54:	2308      	movs	r3, #8
    6a56:	18fb      	adds	r3, r7, r3
    6a58:	801a      	strh	r2, [r3, #0]
    6a5a:	2308      	movs	r3, #8
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	2201      	movs	r2, #1
    6a60:	805a      	strh	r2, [r3, #2]
    6a62:	2308      	movs	r3, #8
    6a64:	18fb      	adds	r3, r7, r3
    6a66:	2215      	movs	r2, #21
    6a68:	18ba      	adds	r2, r7, r2
    6a6a:	605a      	str	r2, [r3, #4]
    6a6c:	2308      	movs	r3, #8
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	2200      	movs	r2, #0
    6a72:	721a      	strb	r2, [r3, #8]
    6a74:	2308      	movs	r3, #8
    6a76:	18fb      	adds	r3, r7, r3
    6a78:	2200      	movs	r2, #0
    6a7a:	725a      	strb	r2, [r3, #9]
    6a7c:	2308      	movs	r3, #8
    6a7e:	18fb      	adds	r3, r7, r3
    6a80:	2200      	movs	r2, #0
    6a82:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6a84:	e00b      	b.n	6a9e <i2cReadBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    6a86:	2316      	movs	r3, #22
    6a88:	18fb      	adds	r3, r7, r3
    6a8a:	2200      	movs	r2, #0
    6a8c:	5e9b      	ldrsh	r3, [r3, r2]
    6a8e:	b29a      	uxth	r2, r3
    6a90:	3a01      	subs	r2, #1
    6a92:	b291      	uxth	r1, r2
    6a94:	2216      	movs	r2, #22
    6a96:	18ba      	adds	r2, r7, r2
    6a98:	8011      	strh	r1, [r2, #0]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d109      	bne.n	6ab2 <i2cReadBytes+0x8e>
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6a9e:	2308      	movs	r3, #8
    6aa0:	18fa      	adds	r2, r7, r3
    6aa2:	4b1d      	ldr	r3, [pc, #116]	; (6b18 <i2cReadBytes+0xf4>)
    6aa4:	0011      	movs	r1, r2
    6aa6:	0018      	movs	r0, r3
    6aa8:	4b1c      	ldr	r3, [pc, #112]	; (6b1c <i2cReadBytes+0xf8>)
    6aaa:	4798      	blx	r3
    6aac:	1e03      	subs	r3, r0, #0
    6aae:	d1ea      	bne.n	6a86 <i2cReadBytes+0x62>
    6ab0:	e000      	b.n	6ab4 <i2cReadBytes+0x90>
	STATUS_OK) {
		if (timeout--) {
			break;
    6ab2:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    6ab4:	2316      	movs	r3, #22
    6ab6:	18fb      	adds	r3, r7, r3
    6ab8:	22fa      	movs	r2, #250	; 0xfa
    6aba:	00d2      	lsls	r2, r2, #3
    6abc:	801a      	strh	r2, [r3, #0]
	packet.data = dest;
    6abe:	2308      	movs	r3, #8
    6ac0:	18fb      	adds	r3, r7, r3
    6ac2:	683a      	ldr	r2, [r7, #0]
    6ac4:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6ac6:	1dbb      	adds	r3, r7, #6
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	b29a      	uxth	r2, r3
    6acc:	2308      	movs	r3, #8
    6ace:	18fb      	adds	r3, r7, r3
    6ad0:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6ad2:	e00b      	b.n	6aec <i2cReadBytes+0xc8>
	STATUS_OK) {
		if (timeout--) {
    6ad4:	2316      	movs	r3, #22
    6ad6:	18fb      	adds	r3, r7, r3
    6ad8:	2200      	movs	r2, #0
    6ada:	5e9b      	ldrsh	r3, [r3, r2]
    6adc:	b29a      	uxth	r2, r3
    6ade:	3a01      	subs	r2, #1
    6ae0:	b291      	uxth	r1, r2
    6ae2:	2216      	movs	r2, #22
    6ae4:	18ba      	adds	r2, r7, r2
    6ae6:	8011      	strh	r1, [r2, #0]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d109      	bne.n	6b00 <i2cReadBytes+0xdc>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = dest;
	packet.data_length = count;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6aec:	2308      	movs	r3, #8
    6aee:	18fa      	adds	r2, r7, r3
    6af0:	4b09      	ldr	r3, [pc, #36]	; (6b18 <i2cReadBytes+0xf4>)
    6af2:	0011      	movs	r1, r2
    6af4:	0018      	movs	r0, r3
    6af6:	4b0a      	ldr	r3, [pc, #40]	; (6b20 <i2cReadBytes+0xfc>)
    6af8:	4798      	blx	r3
    6afa:	1e03      	subs	r3, r0, #0
    6afc:	d1ea      	bne.n	6ad4 <i2cReadBytes+0xb0>
    6afe:	e000      	b.n	6b02 <i2cReadBytes+0xde>
	STATUS_OK) {
		if (timeout--) {
			break;
    6b00:	46c0      	nop			; (mov r8, r8)
		{
			dest[i] = Wire.read();
		}
	}*/
	
	return timeout;
    6b02:	2316      	movs	r3, #22
    6b04:	18fb      	adds	r3, r7, r3
    6b06:	2200      	movs	r2, #0
    6b08:	5e9b      	ldrsh	r3, [r3, r2]
}
    6b0a:	0018      	movs	r0, r3
    6b0c:	46bd      	mov	sp, r7
    6b0e:	b006      	add	sp, #24
    6b10:	bd80      	pop	{r7, pc}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	20000175 	.word	0x20000175
    6b18:	20000200 	.word	0x20000200
    6b1c:	00001ab5 	.word	0x00001ab5
    6b20:	000018fd 	.word	0x000018fd

00006b24 <i2cWriteBytes>:

// Write a specified number of bytes over I2C to a given subAddress
uint16_t i2cWriteBytes(uint8_t subAddress, uint8_t * src, uint8_t count)
{
    6b24:	b580      	push	{r7, lr}
    6b26:	b086      	sub	sp, #24
    6b28:	af00      	add	r7, sp, #0
    6b2a:	6039      	str	r1, [r7, #0]
    6b2c:	0011      	movs	r1, r2
    6b2e:	1dfb      	adds	r3, r7, #7
    6b30:	1c02      	adds	r2, r0, #0
    6b32:	701a      	strb	r2, [r3, #0]
    6b34:	1dbb      	adds	r3, r7, #6
    6b36:	1c0a      	adds	r2, r1, #0
    6b38:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;
    6b3a:	2316      	movs	r3, #22
    6b3c:	18fb      	adds	r3, r7, r3
    6b3e:	22fa      	movs	r2, #250	; 0xfa
    6b40:	00d2      	lsls	r2, r2, #3
    6b42:	801a      	strh	r2, [r3, #0]
	
	uint8_t write_buffer = subAddress;
    6b44:	2315      	movs	r3, #21
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	1dfa      	adds	r2, r7, #7
    6b4a:	7812      	ldrb	r2, [r2, #0]
    6b4c:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6b4e:	4b23      	ldr	r3, [pc, #140]	; (6bdc <i2cWriteBytes+0xb8>)
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	b29a      	uxth	r2, r3
    6b54:	2308      	movs	r3, #8
    6b56:	18fb      	adds	r3, r7, r3
    6b58:	801a      	strh	r2, [r3, #0]
    6b5a:	2308      	movs	r3, #8
    6b5c:	18fb      	adds	r3, r7, r3
    6b5e:	2201      	movs	r2, #1
    6b60:	805a      	strh	r2, [r3, #2]
    6b62:	2308      	movs	r3, #8
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	2215      	movs	r2, #21
    6b68:	18ba      	adds	r2, r7, r2
    6b6a:	605a      	str	r2, [r3, #4]
    6b6c:	2308      	movs	r3, #8
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	2200      	movs	r2, #0
    6b72:	721a      	strb	r2, [r3, #8]
    6b74:	2308      	movs	r3, #8
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	2200      	movs	r2, #0
    6b7a:	725a      	strb	r2, [r3, #9]
    6b7c:	2308      	movs	r3, #8
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	2200      	movs	r2, #0
    6b82:	729a      	strb	r2, [r3, #10]
		if (timeout--) {
			break;
		}
	}
	*/
	timeout = BQ72441_I2C_TIMEOUT;
    6b84:	2316      	movs	r3, #22
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	22fa      	movs	r2, #250	; 0xfa
    6b8a:	00d2      	lsls	r2, r2, #3
    6b8c:	801a      	strh	r2, [r3, #0]
	packet.data = src;
    6b8e:	2308      	movs	r3, #8
    6b90:	18fb      	adds	r3, r7, r3
    6b92:	683a      	ldr	r2, [r7, #0]
    6b94:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6b96:	1dbb      	adds	r3, r7, #6
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	b29a      	uxth	r2, r3
    6b9c:	2308      	movs	r3, #8
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6ba2:	e00b      	b.n	6bbc <i2cWriteBytes+0x98>
	STATUS_OK) {
		if (timeout--) {
    6ba4:	2316      	movs	r3, #22
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	2200      	movs	r2, #0
    6baa:	5e9b      	ldrsh	r3, [r3, r2]
    6bac:	b29a      	uxth	r2, r3
    6bae:	3a01      	subs	r2, #1
    6bb0:	b291      	uxth	r1, r2
    6bb2:	2216      	movs	r2, #22
    6bb4:	18ba      	adds	r2, r7, r2
    6bb6:	8011      	strh	r1, [r2, #0]
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d109      	bne.n	6bd0 <i2cWriteBytes+0xac>
	}
	*/
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = src;
	packet.data_length = count;
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6bbc:	2308      	movs	r3, #8
    6bbe:	18fa      	adds	r2, r7, r3
    6bc0:	4b07      	ldr	r3, [pc, #28]	; (6be0 <i2cWriteBytes+0xbc>)
    6bc2:	0011      	movs	r1, r2
    6bc4:	0018      	movs	r0, r3
    6bc6:	4b07      	ldr	r3, [pc, #28]	; (6be4 <i2cWriteBytes+0xc0>)
    6bc8:	4798      	blx	r3
    6bca:	1e03      	subs	r3, r0, #0
    6bcc:	d1ea      	bne.n	6ba4 <i2cWriteBytes+0x80>
    6bce:	e000      	b.n	6bd2 <i2cWriteBytes+0xae>
	STATUS_OK) {
		if (timeout--) {
			break;
    6bd0:	46c0      	nop			; (mov r8, r8)
	{
		Wire.write(src[i]);
	}	
	Wire.endTransmission(true);*/
	
	return true;	
    6bd2:	2301      	movs	r3, #1
}
    6bd4:	0018      	movs	r0, r3
    6bd6:	46bd      	mov	sp, r7
    6bd8:	b006      	add	sp, #24
    6bda:	bd80      	pop	{r7, pc}
    6bdc:	20000175 	.word	0x20000175
    6be0:	20000200 	.word	0x20000200
    6be4:	00001ab5 	.word	0x00001ab5

00006be8 <configure_LED_PWM>:
void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b0aa      	sub	sp, #168	; 0xa8
    6bec:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    6bee:	4a32      	ldr	r2, [pc, #200]	; (6cb8 <configure_LED_PWM+0xd0>)
    6bf0:	1d3b      	adds	r3, r7, #4
    6bf2:	0011      	movs	r1, r2
    6bf4:	0018      	movs	r0, r3
    6bf6:	4b31      	ldr	r3, [pc, #196]	; (6cbc <configure_LED_PWM+0xd4>)
    6bf8:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6bfa:	1d3b      	adds	r3, r7, #4
    6bfc:	4a30      	ldr	r2, [pc, #192]	; (6cc0 <configure_LED_PWM+0xd8>)
    6bfe:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6c00:	1d3b      	adds	r3, r7, #4
    6c02:	2202      	movs	r2, #2
    6c04:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6c06:	1d3b      	adds	r3, r7, #4
    6c08:	2200      	movs	r2, #0
    6c0a:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6c0c:	1d3b      	adds	r3, r7, #4
    6c0e:	2200      	movs	r2, #0
    6c10:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6c12:	1d3b      	adds	r3, r7, #4
    6c14:	2298      	movs	r2, #152	; 0x98
    6c16:	2101      	movs	r1, #1
    6c18:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6c1a:	1d3b      	adds	r3, r7, #4
    6c1c:	2299      	movs	r2, #153	; 0x99
    6c1e:	2101      	movs	r1, #1
    6c20:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    6c22:	1d3b      	adds	r3, r7, #4
    6c24:	2215      	movs	r2, #21
    6c26:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    6c28:	1d3b      	adds	r3, r7, #4
    6c2a:	220e      	movs	r2, #14
    6c2c:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    6c2e:	1d3b      	adds	r3, r7, #4
    6c30:	2205      	movs	r2, #5
    6c32:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    6c34:	1d3b      	adds	r3, r7, #4
    6c36:	2205      	movs	r2, #5
    6c38:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    6c3a:	1d3a      	adds	r2, r7, #4
    6c3c:	491e      	ldr	r1, [pc, #120]	; (6cb8 <configure_LED_PWM+0xd0>)
    6c3e:	4b21      	ldr	r3, [pc, #132]	; (6cc4 <configure_LED_PWM+0xdc>)
    6c40:	0018      	movs	r0, r3
    6c42:	4b21      	ldr	r3, [pc, #132]	; (6cc8 <configure_LED_PWM+0xe0>)
    6c44:	4798      	blx	r3
	tcc_enable(&tcc0);
    6c46:	4b1f      	ldr	r3, [pc, #124]	; (6cc4 <configure_LED_PWM+0xdc>)
    6c48:	0018      	movs	r0, r3
    6c4a:	4b20      	ldr	r3, [pc, #128]	; (6ccc <configure_LED_PWM+0xe4>)
    6c4c:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    6c4e:	4a20      	ldr	r2, [pc, #128]	; (6cd0 <configure_LED_PWM+0xe8>)
    6c50:	1d3b      	adds	r3, r7, #4
    6c52:	0011      	movs	r1, r2
    6c54:	0018      	movs	r0, r3
    6c56:	4b19      	ldr	r3, [pc, #100]	; (6cbc <configure_LED_PWM+0xd4>)
    6c58:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6c5a:	1d3b      	adds	r3, r7, #4
    6c5c:	4a18      	ldr	r2, [pc, #96]	; (6cc0 <configure_LED_PWM+0xd8>)
    6c5e:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6c60:	1d3b      	adds	r3, r7, #4
    6c62:	2202      	movs	r2, #2
    6c64:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6c66:	1d3b      	adds	r3, r7, #4
    6c68:	2200      	movs	r2, #0
    6c6a:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6c6c:	1d3b      	adds	r3, r7, #4
    6c6e:	2200      	movs	r2, #0
    6c70:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6c72:	1d3b      	adds	r3, r7, #4
    6c74:	2298      	movs	r2, #152	; 0x98
    6c76:	2101      	movs	r1, #1
    6c78:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6c7a:	1d3b      	adds	r3, r7, #4
    6c7c:	2299      	movs	r2, #153	; 0x99
    6c7e:	2101      	movs	r1, #1
    6c80:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    6c82:	1d3b      	adds	r3, r7, #4
    6c84:	2208      	movs	r2, #8
    6c86:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    6c88:	1d3b      	adds	r3, r7, #4
    6c8a:	2207      	movs	r2, #7
    6c8c:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    6c8e:	1d3b      	adds	r3, r7, #4
    6c90:	2205      	movs	r2, #5
    6c92:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    6c94:	1d3b      	adds	r3, r7, #4
    6c96:	2204      	movs	r2, #4
    6c98:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    6c9a:	1d3a      	adds	r2, r7, #4
    6c9c:	490c      	ldr	r1, [pc, #48]	; (6cd0 <configure_LED_PWM+0xe8>)
    6c9e:	4b0d      	ldr	r3, [pc, #52]	; (6cd4 <configure_LED_PWM+0xec>)
    6ca0:	0018      	movs	r0, r3
    6ca2:	4b09      	ldr	r3, [pc, #36]	; (6cc8 <configure_LED_PWM+0xe0>)
    6ca4:	4798      	blx	r3
	tcc_enable(&tcc1);
    6ca6:	4b0b      	ldr	r3, [pc, #44]	; (6cd4 <configure_LED_PWM+0xec>)
    6ca8:	0018      	movs	r0, r3
    6caa:	4b08      	ldr	r3, [pc, #32]	; (6ccc <configure_LED_PWM+0xe4>)
    6cac:	4798      	blx	r3
}
    6cae:	46c0      	nop			; (mov r8, r8)
    6cb0:	46bd      	mov	sp, r7
    6cb2:	b02a      	add	sp, #168	; 0xa8
    6cb4:	bd80      	pop	{r7, pc}
    6cb6:	46c0      	nop			; (mov r8, r8)
    6cb8:	42002000 	.word	0x42002000
    6cbc:	000020b1 	.word	0x000020b1
    6cc0:	0000ffff 	.word	0x0000ffff
    6cc4:	20000134 	.word	0x20000134
    6cc8:	0000270d 	.word	0x0000270d
    6ccc:	000052e5 	.word	0x000052e5
    6cd0:	42002400 	.word	0x42002400
    6cd4:	20000274 	.word	0x20000274

00006cd8 <configure_IO_pins>:
///////////////////////////////////////////////////////////////////////////

// Configure the LED selection port as output
void configure_IO_pins(void)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b082      	sub	sp, #8
    6cdc:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    6cde:	1d3b      	adds	r3, r7, #4
    6ce0:	0018      	movs	r0, r3
    6ce2:	4b26      	ldr	r3, [pc, #152]	; (6d7c <configure_IO_pins+0xa4>)
    6ce4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    6ce6:	1d3b      	adds	r3, r7, #4
    6ce8:	2200      	movs	r2, #0
    6cea:	701a      	strb	r2, [r3, #0]
	// Right Arrow Button
	port_pin_set_config(PIN_PA04, &config_port_pin);
    6cec:	1d3b      	adds	r3, r7, #4
    6cee:	0019      	movs	r1, r3
    6cf0:	2004      	movs	r0, #4
    6cf2:	4b23      	ldr	r3, [pc, #140]	; (6d80 <configure_IO_pins+0xa8>)
    6cf4:	4798      	blx	r3
	// Hall Up*
	port_pin_set_config(PIN_PA06, &config_port_pin);
    6cf6:	1d3b      	adds	r3, r7, #4
    6cf8:	0019      	movs	r1, r3
    6cfa:	2006      	movs	r0, #6
    6cfc:	4b20      	ldr	r3, [pc, #128]	; (6d80 <configure_IO_pins+0xa8>)
    6cfe:	4798      	blx	r3
	// Hall Down*
	port_pin_set_config(PIN_PA09, &config_port_pin);
    6d00:	1d3b      	adds	r3, r7, #4
    6d02:	0019      	movs	r1, r3
    6d04:	2009      	movs	r0, #9
    6d06:	4b1e      	ldr	r3, [pc, #120]	; (6d80 <configure_IO_pins+0xa8>)
    6d08:	4798      	blx	r3
	// Hall Left*
	port_pin_set_config(PIN_PA10, &config_port_pin);
    6d0a:	1d3b      	adds	r3, r7, #4
    6d0c:	0019      	movs	r1, r3
    6d0e:	200a      	movs	r0, #10
    6d10:	4b1b      	ldr	r3, [pc, #108]	; (6d80 <configure_IO_pins+0xa8>)
    6d12:	4798      	blx	r3
	// Hall Right*
	port_pin_set_config(PIN_PA11, &config_port_pin);
    6d14:	1d3b      	adds	r3, r7, #4
    6d16:	0019      	movs	r1, r3
    6d18:	200b      	movs	r0, #11
    6d1a:	4b19      	ldr	r3, [pc, #100]	; (6d80 <configure_IO_pins+0xa8>)
    6d1c:	4798      	blx	r3
	// Down Arrow Button
	port_pin_set_config(PIN_PA12, &config_port_pin);
    6d1e:	1d3b      	adds	r3, r7, #4
    6d20:	0019      	movs	r1, r3
    6d22:	200c      	movs	r0, #12
    6d24:	4b16      	ldr	r3, [pc, #88]	; (6d80 <configure_IO_pins+0xa8>)
    6d26:	4798      	blx	r3
	// Scroll Button
	port_pin_set_config(PIN_PA13, &config_port_pin);
    6d28:	1d3b      	adds	r3, r7, #4
    6d2a:	0019      	movs	r1, r3
    6d2c:	200d      	movs	r0, #13
    6d2e:	4b14      	ldr	r3, [pc, #80]	; (6d80 <configure_IO_pins+0xa8>)
    6d30:	4798      	blx	r3
	// Right Mouse Button
	port_pin_set_config(PIN_PA15, &config_port_pin);
    6d32:	1d3b      	adds	r3, r7, #4
    6d34:	0019      	movs	r1, r3
    6d36:	200f      	movs	r0, #15
    6d38:	4b11      	ldr	r3, [pc, #68]	; (6d80 <configure_IO_pins+0xa8>)
    6d3a:	4798      	blx	r3
	// Up Arrow Button
	port_pin_set_config(PIN_PA20, &config_port_pin);
    6d3c:	1d3b      	adds	r3, r7, #4
    6d3e:	0019      	movs	r1, r3
    6d40:	2014      	movs	r0, #20
    6d42:	4b0f      	ldr	r3, [pc, #60]	; (6d80 <configure_IO_pins+0xa8>)
    6d44:	4798      	blx	r3
	// Left Mouse Button
	port_pin_set_config(PIN_PB02, &config_port_pin);
    6d46:	1d3b      	adds	r3, r7, #4
    6d48:	0019      	movs	r1, r3
    6d4a:	2022      	movs	r0, #34	; 0x22
    6d4c:	4b0c      	ldr	r3, [pc, #48]	; (6d80 <configure_IO_pins+0xa8>)
    6d4e:	4798      	blx	r3
	// Laser Button
	port_pin_set_config(PIN_PB03, &config_port_pin);
    6d50:	1d3b      	adds	r3, r7, #4
    6d52:	0019      	movs	r1, r3
    6d54:	2023      	movs	r0, #35	; 0x23
    6d56:	4b0a      	ldr	r3, [pc, #40]	; (6d80 <configure_IO_pins+0xa8>)
    6d58:	4798      	blx	r3
	// Left Arrow Button
	port_pin_set_config(PIN_PB09, &config_port_pin);
    6d5a:	1d3b      	adds	r3, r7, #4
    6d5c:	0019      	movs	r1, r3
    6d5e:	2029      	movs	r0, #41	; 0x29
    6d60:	4b07      	ldr	r3, [pc, #28]	; (6d80 <configure_IO_pins+0xa8>)
    6d62:	4798      	blx	r3
	// Laser Output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    6d64:	1d3b      	adds	r3, r7, #4
    6d66:	2201      	movs	r2, #1
    6d68:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB08, &config_port_pin);
    6d6a:	1d3b      	adds	r3, r7, #4
    6d6c:	0019      	movs	r1, r3
    6d6e:	2028      	movs	r0, #40	; 0x28
    6d70:	4b03      	ldr	r3, [pc, #12]	; (6d80 <configure_IO_pins+0xa8>)
    6d72:	4798      	blx	r3
}
    6d74:	46c0      	nop			; (mov r8, r8)
    6d76:	46bd      	mov	sp, r7
    6d78:	b002      	add	sp, #8
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	00004ead 	.word	0x00004ead
    6d80:	00003f91 	.word	0x00003f91

00006d84 <main>:


int main (void)
{
    6d84:	b590      	push	{r4, r7, lr}
    6d86:	b08b      	sub	sp, #44	; 0x2c
    6d88:	af00      	add	r7, sp, #0
	int receivingNode = 0;
    6d8a:	2300      	movs	r3, #0
    6d8c:	623b      	str	r3, [r7, #32]
	bool calibrationLEDS = false;
    6d8e:	2327      	movs	r3, #39	; 0x27
    6d90:	18fb      	adds	r3, r7, r3
    6d92:	2200      	movs	r2, #0
    6d94:	701a      	strb	r2, [r3, #0]

	uint16_t state = 0;
    6d96:	231e      	movs	r3, #30
    6d98:	18fb      	adds	r3, r7, r3
    6d9a:	2200      	movs	r2, #0
    6d9c:	801a      	strh	r2, [r3, #0]
	
    /* Initialize system */
	system_init();
    6d9e:	4baf      	ldr	r3, [pc, #700]	; (705c <main+0x2d8>)
    6da0:	4798      	blx	r3
	configure_LED_PWM();
    6da2:	4baf      	ldr	r3, [pc, #700]	; (7060 <main+0x2dc>)
    6da4:	4798      	blx	r3
	configure_IO_pins();
    6da6:	4baf      	ldr	r3, [pc, #700]	; (7064 <main+0x2e0>)
    6da8:	4798      	blx	r3
	

	if(!lipo_begin())
    6daa:	4baf      	ldr	r3, [pc, #700]	; (7068 <main+0x2e4>)
    6dac:	4798      	blx	r3
    6dae:	0003      	movs	r3, r0
    6db0:	001a      	movs	r2, r3
    6db2:	2301      	movs	r3, #1
    6db4:	4053      	eors	r3, r2
    6db6:	b2db      	uxtb	r3, r3
    6db8:	2b00      	cmp	r3, #0
    6dba:	d006      	beq.n	6dca <main+0x46>
	{
		setTrackBallRGBW(0xFFFF, 0, 0, 0);
    6dbc:	48ab      	ldr	r0, [pc, #684]	; (706c <main+0x2e8>)
    6dbe:	2300      	movs	r3, #0
    6dc0:	2200      	movs	r2, #0
    6dc2:	2100      	movs	r1, #0
    6dc4:	4caa      	ldr	r4, [pc, #680]	; (7070 <main+0x2ec>)
    6dc6:	47a0      	blx	r4
    6dc8:	e005      	b.n	6dd6 <main+0x52>
		//{ }
		
	}
	else
	{
		setTrackBallRGBW(0, 0xFFFF, 0, 0);
    6dca:	49a8      	ldr	r1, [pc, #672]	; (706c <main+0x2e8>)
    6dcc:	2300      	movs	r3, #0
    6dce:	2200      	movs	r2, #0
    6dd0:	2000      	movs	r0, #0
    6dd2:	4ca7      	ldr	r4, [pc, #668]	; (7070 <main+0x2ec>)
    6dd4:	47a0      	blx	r4
		//for(int i = 0; i < 100000; i++)
		//{ }
	}

	lipo_setCapacity(Capacity);
    6dd6:	2396      	movs	r3, #150	; 0x96
    6dd8:	00db      	lsls	r3, r3, #3
    6dda:	0018      	movs	r0, r3
    6ddc:	4ba5      	ldr	r3, [pc, #660]	; (7074 <main+0x2f0>)
    6dde:	4798      	blx	r3
		}
	}
	*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    6de0:	2200      	movs	r2, #0
    6de2:	2103      	movs	r1, #3
    6de4:	205b      	movs	r0, #91	; 0x5b
    6de6:	4ba4      	ldr	r3, [pc, #656]	; (7078 <main+0x2f4>)
    6de8:	4798      	blx	r3
	RFM_setHighPower(true);
    6dea:	2001      	movs	r0, #1
    6dec:	4ba3      	ldr	r3, [pc, #652]	; (707c <main+0x2f8>)
    6dee:	4798      	blx	r3
	if (ENCRYPT){
		RFM_encrypt(ENCRYPTKEY);
    6df0:	4ba3      	ldr	r3, [pc, #652]	; (7080 <main+0x2fc>)
    6df2:	0018      	movs	r0, r3
    6df4:	4ba3      	ldr	r3, [pc, #652]	; (7084 <main+0x300>)
    6df6:	4798      	blx	r3
	}


	int sendlength = 3; //number can be increased 
    6df8:	2303      	movs	r3, #3
    6dfa:	61bb      	str	r3, [r7, #24]
	int index = 0;
    6dfc:	2300      	movs	r3, #0
    6dfe:	617b      	str	r3, [r7, #20]
	int8_t sendbuffer[16];
	int16_t current = 0;
    6e00:	2312      	movs	r3, #18
    6e02:	18fb      	adds	r3, r7, r3
    6e04:	2200      	movs	r2, #0
    6e06:	801a      	strh	r2, [r3, #0]
	bool charging = false;
    6e08:	2326      	movs	r3, #38	; 0x26
    6e0a:	18fb      	adds	r3, r7, r3
    6e0c:	2200      	movs	r2, #0
    6e0e:	701a      	strb	r2, [r3, #0]

	init_wheel();
    6e10:	4b9d      	ldr	r3, [pc, #628]	; (7088 <main+0x304>)
    6e12:	4798      	blx	r3
	
	while(1) //busy loop
	//sends data after receiving a request message from the dongle
	//sends X axis byte, Y axis byte, button byte
	{
		if (calibrationLEDS){
    6e14:	2327      	movs	r3, #39	; 0x27
    6e16:	18fb      	adds	r3, r7, r3
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	d001      	beq.n	6e22 <main+0x9e>
			ColorCycle();
    6e1e:	4b9b      	ldr	r3, [pc, #620]	; (708c <main+0x308>)
    6e20:	4798      	blx	r3
			
		static bool button = 0;
		static bool lbutton = 0;
		static bool laserState = 0;

		button = port_pin_get_input_level(PIN_PB03);
    6e22:	2023      	movs	r0, #35	; 0x23
    6e24:	4b9a      	ldr	r3, [pc, #616]	; (7090 <main+0x30c>)
    6e26:	4798      	blx	r3
    6e28:	0003      	movs	r3, r0
    6e2a:	001a      	movs	r2, r3
    6e2c:	4b99      	ldr	r3, [pc, #612]	; (7094 <main+0x310>)
    6e2e:	701a      	strb	r2, [r3, #0]
		if(button && !lbutton)
    6e30:	4b98      	ldr	r3, [pc, #608]	; (7094 <main+0x310>)
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d01a      	beq.n	6e6e <main+0xea>
    6e38:	4b97      	ldr	r3, [pc, #604]	; (7098 <main+0x314>)
    6e3a:	781b      	ldrb	r3, [r3, #0]
    6e3c:	2201      	movs	r2, #1
    6e3e:	4053      	eors	r3, r2
    6e40:	b2db      	uxtb	r3, r3
    6e42:	2b00      	cmp	r3, #0
    6e44:	d013      	beq.n	6e6e <main+0xea>
		{
			laserState = !laserState;
    6e46:	4b95      	ldr	r3, [pc, #596]	; (709c <main+0x318>)
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	1e5a      	subs	r2, r3, #1
    6e4c:	4193      	sbcs	r3, r2
    6e4e:	b2db      	uxtb	r3, r3
    6e50:	2201      	movs	r2, #1
    6e52:	4053      	eors	r3, r2
    6e54:	b2db      	uxtb	r3, r3
    6e56:	1c1a      	adds	r2, r3, #0
    6e58:	2301      	movs	r3, #1
    6e5a:	4013      	ands	r3, r2
    6e5c:	b2da      	uxtb	r2, r3
    6e5e:	4b8f      	ldr	r3, [pc, #572]	; (709c <main+0x318>)
    6e60:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(PIN_PB08, laserState);
    6e62:	4b8e      	ldr	r3, [pc, #568]	; (709c <main+0x318>)
    6e64:	781b      	ldrb	r3, [r3, #0]
    6e66:	0019      	movs	r1, r3
    6e68:	2028      	movs	r0, #40	; 0x28
    6e6a:	4b8d      	ldr	r3, [pc, #564]	; (70a0 <main+0x31c>)
    6e6c:	4798      	blx	r3
		}

		//Do the wheel update
		update_values();
    6e6e:	4b8d      	ldr	r3, [pc, #564]	; (70a4 <main+0x320>)
    6e70:	4798      	blx	r3
		
		//getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
		
		lbutton = button;
    6e72:	4b88      	ldr	r3, [pc, #544]	; (7094 <main+0x310>)
    6e74:	781a      	ldrb	r2, [r3, #0]
    6e76:	4b88      	ldr	r3, [pc, #544]	; (7098 <main+0x314>)
    6e78:	701a      	strb	r2, [r3, #0]

			// The actual message is contained in the RFM_DATA array,
			// and is RFM_DATALEN bytes in size:
			//getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update

			sendbuffer[0] = 0;
    6e7a:	003b      	movs	r3, r7
    6e7c:	2200      	movs	r2, #0
    6e7e:	701a      	strb	r2, [r3, #0]
			sendbuffer[1] = 0;
    6e80:	003b      	movs	r3, r7
    6e82:	2200      	movs	r2, #0
    6e84:	705a      	strb	r2, [r3, #1]
			sendbuffer[2] = 0;
    6e86:	003b      	movs	r3, r7
    6e88:	2200      	movs	r2, #0
    6e8a:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA20) << 7); // Up
    6e8c:	2014      	movs	r0, #20
    6e8e:	4b80      	ldr	r3, [pc, #512]	; (7090 <main+0x30c>)
    6e90:	4798      	blx	r3
    6e92:	0003      	movs	r3, r0
    6e94:	01d9      	lsls	r1, r3, #7
    6e96:	003b      	movs	r3, r7
    6e98:	2202      	movs	r2, #2
    6e9a:	569a      	ldrsb	r2, [r3, r2]
    6e9c:	b24b      	sxtb	r3, r1
    6e9e:	4313      	orrs	r3, r2
    6ea0:	b25a      	sxtb	r2, r3
    6ea2:	003b      	movs	r3, r7
    6ea4:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA12) << 6); // Down
    6ea6:	200c      	movs	r0, #12
    6ea8:	4b79      	ldr	r3, [pc, #484]	; (7090 <main+0x30c>)
    6eaa:	4798      	blx	r3
    6eac:	0003      	movs	r3, r0
    6eae:	0199      	lsls	r1, r3, #6
    6eb0:	003b      	movs	r3, r7
    6eb2:	2202      	movs	r2, #2
    6eb4:	569a      	ldrsb	r2, [r3, r2]
    6eb6:	b24b      	sxtb	r3, r1
    6eb8:	4313      	orrs	r3, r2
    6eba:	b25a      	sxtb	r2, r3
    6ebc:	003b      	movs	r3, r7
    6ebe:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB09) << 5); // Left
    6ec0:	2029      	movs	r0, #41	; 0x29
    6ec2:	4b73      	ldr	r3, [pc, #460]	; (7090 <main+0x30c>)
    6ec4:	4798      	blx	r3
    6ec6:	0003      	movs	r3, r0
    6ec8:	0159      	lsls	r1, r3, #5
    6eca:	003b      	movs	r3, r7
    6ecc:	2202      	movs	r2, #2
    6ece:	569a      	ldrsb	r2, [r3, r2]
    6ed0:	b24b      	sxtb	r3, r1
    6ed2:	4313      	orrs	r3, r2
    6ed4:	b25a      	sxtb	r2, r3
    6ed6:	003b      	movs	r3, r7
    6ed8:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA04) << 4); // Right
    6eda:	2004      	movs	r0, #4
    6edc:	4b6c      	ldr	r3, [pc, #432]	; (7090 <main+0x30c>)
    6ede:	4798      	blx	r3
    6ee0:	0003      	movs	r3, r0
    6ee2:	0119      	lsls	r1, r3, #4
    6ee4:	003b      	movs	r3, r7
    6ee6:	2202      	movs	r2, #2
    6ee8:	569a      	ldrsb	r2, [r3, r2]
    6eea:	b24b      	sxtb	r3, r1
    6eec:	4313      	orrs	r3, r2
    6eee:	b25a      	sxtb	r2, r3
    6ef0:	003b      	movs	r3, r7
    6ef2:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB02) << 3); // Left Click
    6ef4:	2022      	movs	r0, #34	; 0x22
    6ef6:	4b66      	ldr	r3, [pc, #408]	; (7090 <main+0x30c>)
    6ef8:	4798      	blx	r3
    6efa:	0003      	movs	r3, r0
    6efc:	00d9      	lsls	r1, r3, #3
    6efe:	003b      	movs	r3, r7
    6f00:	2202      	movs	r2, #2
    6f02:	569a      	ldrsb	r2, [r3, r2]
    6f04:	b24b      	sxtb	r3, r1
    6f06:	4313      	orrs	r3, r2
    6f08:	b25a      	sxtb	r2, r3
    6f0a:	003b      	movs	r3, r7
    6f0c:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA15) << 2); // Right Click
    6f0e:	200f      	movs	r0, #15
    6f10:	4b5f      	ldr	r3, [pc, #380]	; (7090 <main+0x30c>)
    6f12:	4798      	blx	r3
    6f14:	0003      	movs	r3, r0
    6f16:	0099      	lsls	r1, r3, #2
    6f18:	003b      	movs	r3, r7
    6f1a:	2202      	movs	r2, #2
    6f1c:	569a      	ldrsb	r2, [r3, r2]
    6f1e:	b24b      	sxtb	r3, r1
    6f20:	4313      	orrs	r3, r2
    6f22:	b25a      	sxtb	r2, r3
    6f24:	003b      	movs	r3, r7
    6f26:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (!port_pin_get_input_level(PIN_PA13) << 1); // Middle Click
    6f28:	200d      	movs	r0, #13
    6f2a:	4b59      	ldr	r3, [pc, #356]	; (7090 <main+0x30c>)
    6f2c:	4798      	blx	r3
    6f2e:	0003      	movs	r3, r0
    6f30:	001a      	movs	r2, r3
    6f32:	2301      	movs	r3, #1
    6f34:	4053      	eors	r3, r2
    6f36:	b2db      	uxtb	r3, r3
    6f38:	0059      	lsls	r1, r3, #1
    6f3a:	003b      	movs	r3, r7
    6f3c:	2202      	movs	r2, #2
    6f3e:	569a      	ldrsb	r2, [r3, r2]
    6f40:	b24b      	sxtb	r3, r1
    6f42:	4313      	orrs	r3, r2
    6f44:	b25a      	sxtb	r2, r3
    6f46:	003b      	movs	r3, r7
    6f48:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= laserState;								// Laser State
    6f4a:	003b      	movs	r3, r7
    6f4c:	2202      	movs	r2, #2
    6f4e:	569a      	ldrsb	r2, [r3, r2]
    6f50:	4b52      	ldr	r3, [pc, #328]	; (709c <main+0x318>)
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	b25b      	sxtb	r3, r3
    6f56:	4313      	orrs	r3, r2
    6f58:	b25a      	sxtb	r2, r3
    6f5a:	003b      	movs	r3, r7
    6f5c:	709a      	strb	r2, [r3, #2]

			if (RFM_receiveDone()) // Got one!
    6f5e:	4b52      	ldr	r3, [pc, #328]	; (70a8 <main+0x324>)
    6f60:	4798      	blx	r3
    6f62:	1e03      	subs	r3, r0, #0
    6f64:	d015      	beq.n	6f92 <main+0x20e>
			{
				receivingNode = RFM_SENDERID;
    6f66:	4b51      	ldr	r3, [pc, #324]	; (70ac <main+0x328>)
    6f68:	881b      	ldrh	r3, [r3, #0]
    6f6a:	b29b      	uxth	r3, r3
    6f6c:	623b      	str	r3, [r7, #32]
				if (RFM_DATA[0] == 'Y'){
    6f6e:	4b50      	ldr	r3, [pc, #320]	; (70b0 <main+0x32c>)
    6f70:	881b      	ldrh	r3, [r3, #0]
    6f72:	b29b      	uxth	r3, r3
    6f74:	2b59      	cmp	r3, #89	; 0x59
    6f76:	d103      	bne.n	6f80 <main+0x1fc>
					calibrationLEDS = true;
    6f78:	2327      	movs	r3, #39	; 0x27
    6f7a:	18fb      	adds	r3, r7, r3
    6f7c:	2201      	movs	r2, #1
    6f7e:	701a      	strb	r2, [r3, #0]
				}
				if (RFM_DATA[0] == 'N'){
    6f80:	4b4b      	ldr	r3, [pc, #300]	; (70b0 <main+0x32c>)
    6f82:	881b      	ldrh	r3, [r3, #0]
    6f84:	b29b      	uxth	r3, r3
    6f86:	2b4e      	cmp	r3, #78	; 0x4e
    6f88:	d103      	bne.n	6f92 <main+0x20e>
					calibrationLEDS = false;
    6f8a:	2327      	movs	r3, #39	; 0x27
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	2200      	movs	r2, #0
    6f90:	701a      	strb	r2, [r3, #0]
				}

				//RFM_send(2, sendbuffer, sendlength, false);
			}
			static int count = 0;
			if(count >= 50)
    6f92:	4b48      	ldr	r3, [pc, #288]	; (70b4 <main+0x330>)
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	2b31      	cmp	r3, #49	; 0x31
    6f98:	dd09      	ble.n	6fae <main+0x22a>
			{
				count = 0;
    6f9a:	4b46      	ldr	r3, [pc, #280]	; (70b4 <main+0x330>)
    6f9c:	2200      	movs	r2, #0
    6f9e:	601a      	str	r2, [r3, #0]
				RFM_send(2, sendbuffer, sendlength, false);
    6fa0:	69bb      	ldr	r3, [r7, #24]
    6fa2:	b2da      	uxtb	r2, r3
    6fa4:	0039      	movs	r1, r7
    6fa6:	2300      	movs	r3, #0
    6fa8:	2002      	movs	r0, #2
    6faa:	4c43      	ldr	r4, [pc, #268]	; (70b8 <main+0x334>)
    6fac:	47a0      	blx	r4
			}
			count++;
    6fae:	4b41      	ldr	r3, [pc, #260]	; (70b4 <main+0x330>)
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	1c5a      	adds	r2, r3, #1
    6fb4:	4b3f      	ldr	r3, [pc, #252]	; (70b4 <main+0x330>)
    6fb6:	601a      	str	r2, [r3, #0]
		//}

		state = lipo_soc(FILTERED);
    6fb8:	231e      	movs	r3, #30
    6fba:	18fc      	adds	r4, r7, r3
    6fbc:	2000      	movs	r0, #0
    6fbe:	4b3f      	ldr	r3, [pc, #252]	; (70bc <main+0x338>)
    6fc0:	4798      	blx	r3
    6fc2:	0003      	movs	r3, r0
    6fc4:	8023      	strh	r3, [r4, #0]
		current = lipo_current(AVG);
    6fc6:	2312      	movs	r3, #18
    6fc8:	18fc      	adds	r4, r7, r3
    6fca:	2000      	movs	r0, #0
    6fcc:	4b3c      	ldr	r3, [pc, #240]	; (70c0 <main+0x33c>)
    6fce:	4798      	blx	r3
    6fd0:	0003      	movs	r3, r0
    6fd2:	8023      	strh	r3, [r4, #0]

		if(current >= -1){
    6fd4:	2312      	movs	r3, #18
    6fd6:	18fb      	adds	r3, r7, r3
    6fd8:	2200      	movs	r2, #0
    6fda:	5e9b      	ldrsh	r3, [r3, r2]
    6fdc:	3301      	adds	r3, #1
    6fde:	db04      	blt.n	6fea <main+0x266>
			charging = true;
    6fe0:	2326      	movs	r3, #38	; 0x26
    6fe2:	18fb      	adds	r3, r7, r3
    6fe4:	2201      	movs	r2, #1
    6fe6:	701a      	strb	r2, [r3, #0]
    6fe8:	e003      	b.n	6ff2 <main+0x26e>
		}
		else{
			charging = false;
    6fea:	2326      	movs	r3, #38	; 0x26
    6fec:	18fb      	adds	r3, r7, r3
    6fee:	2200      	movs	r2, #0
    6ff0:	701a      	strb	r2, [r3, #0]
		}

		if(state > 10 && charging){
    6ff2:	231e      	movs	r3, #30
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	881b      	ldrh	r3, [r3, #0]
    6ff8:	2b0a      	cmp	r3, #10
    6ffa:	d90b      	bls.n	7014 <main+0x290>
    6ffc:	2326      	movs	r3, #38	; 0x26
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	781b      	ldrb	r3, [r3, #0]
    7002:	2b00      	cmp	r3, #0
    7004:	d006      	beq.n	7014 <main+0x290>
			colorGradient(state);
    7006:	231e      	movs	r3, #30
    7008:	18fb      	adds	r3, r7, r3
    700a:	881b      	ldrh	r3, [r3, #0]
    700c:	0018      	movs	r0, r3
    700e:	4b2d      	ldr	r3, [pc, #180]	; (70c4 <main+0x340>)
    7010:	4798      	blx	r3
    7012:	e022      	b.n	705a <main+0x2d6>
		}
		else if(state > 10 && !charging){
    7014:	231e      	movs	r3, #30
    7016:	18fb      	adds	r3, r7, r3
    7018:	881b      	ldrh	r3, [r3, #0]
    701a:	2b0a      	cmp	r3, #10
    701c:	d90e      	bls.n	703c <main+0x2b8>
    701e:	2326      	movs	r3, #38	; 0x26
    7020:	18fb      	adds	r3, r7, r3
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	2201      	movs	r2, #1
    7026:	4053      	eors	r3, r2
    7028:	b2db      	uxtb	r3, r3
    702a:	2b00      	cmp	r3, #0
    702c:	d006      	beq.n	703c <main+0x2b8>
			colorSolid(state);
    702e:	231e      	movs	r3, #30
    7030:	18fb      	adds	r3, r7, r3
    7032:	881b      	ldrh	r3, [r3, #0]
    7034:	0018      	movs	r0, r3
    7036:	4b24      	ldr	r3, [pc, #144]	; (70c8 <main+0x344>)
    7038:	4798      	blx	r3
    703a:	e00e      	b.n	705a <main+0x2d6>
		}
		else if(state > 5){
    703c:	231e      	movs	r3, #30
    703e:	18fb      	adds	r3, r7, r3
    7040:	881b      	ldrh	r3, [r3, #0]
    7042:	2b05      	cmp	r3, #5
    7044:	d902      	bls.n	704c <main+0x2c8>
			blinkRed();
    7046:	4b21      	ldr	r3, [pc, #132]	; (70cc <main+0x348>)
    7048:	4798      	blx	r3
    704a:	e6e3      	b.n	6e14 <main+0x90>
		}
		else{
			//Put into sleep mode, but I don't know how to do that
			while(lipo_soc(FILTERED) < 0x0005){}
    704c:	46c0      	nop			; (mov r8, r8)
    704e:	2000      	movs	r0, #0
    7050:	4b1a      	ldr	r3, [pc, #104]	; (70bc <main+0x338>)
    7052:	4798      	blx	r3
    7054:	1e03      	subs	r3, r0, #0
    7056:	2b04      	cmp	r3, #4
    7058:	d9f9      	bls.n	704e <main+0x2ca>
		}
	}
    705a:	e6db      	b.n	6e14 <main+0x90>
    705c:	00004cf5 	.word	0x00004cf5
    7060:	00006be9 	.word	0x00006be9
    7064:	00006cd9 	.word	0x00006cd9
    7068:	00006299 	.word	0x00006299
    706c:	0000ffff 	.word	0x0000ffff
    7070:	000070d1 	.word	0x000070d1
    7074:	000062f5 	.word	0x000062f5
    7078:	00005761 	.word	0x00005761
    707c:	000056a9 	.word	0x000056a9
    7080:	00008f50 	.word	0x00008f50
    7084:	00005fbd 	.word	0x00005fbd
    7088:	00000bbd 	.word	0x00000bbd
    708c:	00007145 	.word	0x00007145
    7090:	00004ed1 	.word	0x00004ed1
    7094:	2000006a 	.word	0x2000006a
    7098:	2000006b 	.word	0x2000006b
    709c:	2000006c 	.word	0x2000006c
    70a0:	00004f15 	.word	0x00004f15
    70a4:	00000c09 	.word	0x00000c09
    70a8:	00005f61 	.word	0x00005f61
    70ac:	20000116 	.word	0x20000116
    70b0:	20000180 	.word	0x20000180
    70b4:	20000070 	.word	0x20000070
    70b8:	00005c51 	.word	0x00005c51
    70bc:	000063bd 	.word	0x000063bd
    70c0:	0000634d 	.word	0x0000634d
    70c4:	00007205 	.word	0x00007205
    70c8:	00007351 	.word	0x00007351
    70cc:	000072d9 	.word	0x000072d9

000070d0 <setTrackBallRGBW>:
}

void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{	
    70d0:	b5b0      	push	{r4, r5, r7, lr}
    70d2:	b082      	sub	sp, #8
    70d4:	af00      	add	r7, sp, #0
    70d6:	0005      	movs	r5, r0
    70d8:	000c      	movs	r4, r1
    70da:	0010      	movs	r0, r2
    70dc:	0019      	movs	r1, r3
    70de:	1dbb      	adds	r3, r7, #6
    70e0:	1c2a      	adds	r2, r5, #0
    70e2:	801a      	strh	r2, [r3, #0]
    70e4:	1d3b      	adds	r3, r7, #4
    70e6:	1c22      	adds	r2, r4, #0
    70e8:	801a      	strh	r2, [r3, #0]
    70ea:	1cbb      	adds	r3, r7, #2
    70ec:	1c02      	adds	r2, r0, #0
    70ee:	801a      	strh	r2, [r3, #0]
    70f0:	003b      	movs	r3, r7
    70f2:	1c0a      	adds	r2, r1, #0
    70f4:	801a      	strh	r2, [r3, #0]
	/* WHITE */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), white);
    70f6:	003b      	movs	r3, r7
    70f8:	881a      	ldrh	r2, [r3, #0]
    70fa:	4b0f      	ldr	r3, [pc, #60]	; (7138 <setTrackBallRGBW+0x68>)
    70fc:	2100      	movs	r1, #0
    70fe:	0018      	movs	r0, r3
    7100:	4b0e      	ldr	r3, [pc, #56]	; (713c <setTrackBallRGBW+0x6c>)
    7102:	4798      	blx	r3
	/* GREEN */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    7104:	1d3b      	adds	r3, r7, #4
    7106:	881a      	ldrh	r2, [r3, #0]
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <setTrackBallRGBW+0x68>)
    710a:	2103      	movs	r1, #3
    710c:	0018      	movs	r0, r3
    710e:	4b0b      	ldr	r3, [pc, #44]	; (713c <setTrackBallRGBW+0x6c>)
    7110:	4798      	blx	r3
	/* BLUE */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), blue);
    7112:	1cbb      	adds	r3, r7, #2
    7114:	881a      	ldrh	r2, [r3, #0]
    7116:	4b0a      	ldr	r3, [pc, #40]	; (7140 <setTrackBallRGBW+0x70>)
    7118:	2100      	movs	r1, #0
    711a:	0018      	movs	r0, r3
    711c:	4b07      	ldr	r3, [pc, #28]	; (713c <setTrackBallRGBW+0x6c>)
    711e:	4798      	blx	r3
	/* RED */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), red);
    7120:	1dbb      	adds	r3, r7, #6
    7122:	881a      	ldrh	r2, [r3, #0]
    7124:	4b06      	ldr	r3, [pc, #24]	; (7140 <setTrackBallRGBW+0x70>)
    7126:	2101      	movs	r1, #1
    7128:	0018      	movs	r0, r3
    712a:	4b04      	ldr	r3, [pc, #16]	; (713c <setTrackBallRGBW+0x6c>)
    712c:	4798      	blx	r3
} 
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	46bd      	mov	sp, r7
    7132:	b002      	add	sp, #8
    7134:	bdb0      	pop	{r4, r5, r7, pc}
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	20000134 	.word	0x20000134
    713c:	00002bb5 	.word	0x00002bb5
    7140:	20000274 	.word	0x20000274

00007144 <ColorCycle>:

void ColorCycle(void)
{
    7144:	b5b0      	push	{r4, r5, r7, lr}
    7146:	af00      	add	r7, sp, #0
	static int color = 0;
	static int speed = 100;
	static int index = 0;
	if(index == 0)
    7148:	4b29      	ldr	r3, [pc, #164]	; (71f0 <ColorCycle+0xac>)
    714a:	681b      	ldr	r3, [r3, #0]
    714c:	2b00      	cmp	r3, #0
    714e:	d10c      	bne.n	716a <ColorCycle+0x26>
	{
		setTrackBallRGBW(0xFFFF - color,color,0x0,0x0);
    7150:	4b28      	ldr	r3, [pc, #160]	; (71f4 <ColorCycle+0xb0>)
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	b29b      	uxth	r3, r3
    7156:	43db      	mvns	r3, r3
    7158:	b298      	uxth	r0, r3
    715a:	4b26      	ldr	r3, [pc, #152]	; (71f4 <ColorCycle+0xb0>)
    715c:	681b      	ldr	r3, [r3, #0]
    715e:	b299      	uxth	r1, r3
    7160:	2300      	movs	r3, #0
    7162:	2200      	movs	r2, #0
    7164:	4c24      	ldr	r4, [pc, #144]	; (71f8 <ColorCycle+0xb4>)
    7166:	47a0      	blx	r4
    7168:	e020      	b.n	71ac <ColorCycle+0x68>
	}
	else if(index == 1)
    716a:	4b21      	ldr	r3, [pc, #132]	; (71f0 <ColorCycle+0xac>)
    716c:	681b      	ldr	r3, [r3, #0]
    716e:	2b01      	cmp	r3, #1
    7170:	d10c      	bne.n	718c <ColorCycle+0x48>
	{
		setTrackBallRGBW(0x0,0xFFFF - color,color,0x0);
    7172:	4b20      	ldr	r3, [pc, #128]	; (71f4 <ColorCycle+0xb0>)
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	b29b      	uxth	r3, r3
    7178:	43db      	mvns	r3, r3
    717a:	b299      	uxth	r1, r3
    717c:	4b1d      	ldr	r3, [pc, #116]	; (71f4 <ColorCycle+0xb0>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	b29a      	uxth	r2, r3
    7182:	2300      	movs	r3, #0
    7184:	2000      	movs	r0, #0
    7186:	4c1c      	ldr	r4, [pc, #112]	; (71f8 <ColorCycle+0xb4>)
    7188:	47a0      	blx	r4
    718a:	e00f      	b.n	71ac <ColorCycle+0x68>
	}
	else if(index == 2)
    718c:	4b18      	ldr	r3, [pc, #96]	; (71f0 <ColorCycle+0xac>)
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	2b02      	cmp	r3, #2
    7192:	d10b      	bne.n	71ac <ColorCycle+0x68>
	{
		setTrackBallRGBW(color,0x0,0xFFFF - color,0x0);
    7194:	4b17      	ldr	r3, [pc, #92]	; (71f4 <ColorCycle+0xb0>)
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	b298      	uxth	r0, r3
    719a:	4b16      	ldr	r3, [pc, #88]	; (71f4 <ColorCycle+0xb0>)
    719c:	681b      	ldr	r3, [r3, #0]
    719e:	b29b      	uxth	r3, r3
    71a0:	43db      	mvns	r3, r3
    71a2:	b29a      	uxth	r2, r3
    71a4:	2300      	movs	r3, #0
    71a6:	2100      	movs	r1, #0
    71a8:	4c13      	ldr	r4, [pc, #76]	; (71f8 <ColorCycle+0xb4>)
    71aa:	47a0      	blx	r4
	}
	
	color += speed;
    71ac:	4b11      	ldr	r3, [pc, #68]	; (71f4 <ColorCycle+0xb0>)
    71ae:	681a      	ldr	r2, [r3, #0]
    71b0:	4b12      	ldr	r3, [pc, #72]	; (71fc <ColorCycle+0xb8>)
    71b2:	681b      	ldr	r3, [r3, #0]
    71b4:	18d2      	adds	r2, r2, r3
    71b6:	4b0f      	ldr	r3, [pc, #60]	; (71f4 <ColorCycle+0xb0>)
    71b8:	601a      	str	r2, [r3, #0]
	if(color >= (0xFFFF - speed))
    71ba:	4b10      	ldr	r3, [pc, #64]	; (71fc <ColorCycle+0xb8>)
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	4a10      	ldr	r2, [pc, #64]	; (7200 <ColorCycle+0xbc>)
    71c0:	1ad2      	subs	r2, r2, r3
    71c2:	4b0c      	ldr	r3, [pc, #48]	; (71f4 <ColorCycle+0xb0>)
    71c4:	681b      	ldr	r3, [r3, #0]
    71c6:	429a      	cmp	r2, r3
    71c8:	dc0e      	bgt.n	71e8 <ColorCycle+0xa4>
	{
		color = 0;
    71ca:	4b0a      	ldr	r3, [pc, #40]	; (71f4 <ColorCycle+0xb0>)
    71cc:	2200      	movs	r2, #0
    71ce:	601a      	str	r2, [r3, #0]
		index++;
    71d0:	4b07      	ldr	r3, [pc, #28]	; (71f0 <ColorCycle+0xac>)
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	1c5a      	adds	r2, r3, #1
    71d6:	4b06      	ldr	r3, [pc, #24]	; (71f0 <ColorCycle+0xac>)
    71d8:	601a      	str	r2, [r3, #0]

		if(index > 2){
    71da:	4b05      	ldr	r3, [pc, #20]	; (71f0 <ColorCycle+0xac>)
    71dc:	681b      	ldr	r3, [r3, #0]
    71de:	2b02      	cmp	r3, #2
    71e0:	dd02      	ble.n	71e8 <ColorCycle+0xa4>
			index = 0;
    71e2:	4b03      	ldr	r3, [pc, #12]	; (71f0 <ColorCycle+0xac>)
    71e4:	2200      	movs	r2, #0
    71e6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
    71e8:	46c0      	nop			; (mov r8, r8)
    71ea:	46bd      	mov	sp, r7
    71ec:	bdb0      	pop	{r4, r5, r7, pc}
    71ee:	46c0      	nop			; (mov r8, r8)
    71f0:	20000074 	.word	0x20000074
    71f4:	20000078 	.word	0x20000078
    71f8:	000070d1 	.word	0x000070d1
    71fc:	20000004 	.word	0x20000004
    7200:	0000ffff 	.word	0x0000ffff

00007204 <colorGradient>:

void colorGradient(uint16_t state){
    7204:	b590      	push	{r4, r7, lr}
    7206:	b083      	sub	sp, #12
    7208:	af00      	add	r7, sp, #0
    720a:	0002      	movs	r2, r0
    720c:	1dbb      	adds	r3, r7, #6
    720e:	801a      	strh	r2, [r3, #0]
	static int gradient = 0;
	static int updown = 0; //up = 1, down = 0
	static int speed = 100;
	
	//Now check if it's max faded
	if(gradient >= (0xFFFF - speed)){ //yes (max)
    7210:	4b2c      	ldr	r3, [pc, #176]	; (72c4 <colorGradient+0xc0>)
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	4a2c      	ldr	r2, [pc, #176]	; (72c8 <colorGradient+0xc4>)
    7216:	1ad2      	subs	r2, r2, r3
    7218:	4b2c      	ldr	r3, [pc, #176]	; (72cc <colorGradient+0xc8>)
    721a:	681b      	ldr	r3, [r3, #0]
    721c:	429a      	cmp	r2, r3
    721e:	dc03      	bgt.n	7228 <colorGradient+0x24>
		updown = 0;
    7220:	4b2b      	ldr	r3, [pc, #172]	; (72d0 <colorGradient+0xcc>)
    7222:	2200      	movs	r2, #0
    7224:	601a      	str	r2, [r3, #0]
    7226:	e006      	b.n	7236 <colorGradient+0x32>
	}
	else if(gradient <= 0){ //No, min
    7228:	4b28      	ldr	r3, [pc, #160]	; (72cc <colorGradient+0xc8>)
    722a:	681b      	ldr	r3, [r3, #0]
    722c:	2b00      	cmp	r3, #0
    722e:	dc02      	bgt.n	7236 <colorGradient+0x32>
		updown = 1;
    7230:	4b27      	ldr	r3, [pc, #156]	; (72d0 <colorGradient+0xcc>)
    7232:	2201      	movs	r2, #1
    7234:	601a      	str	r2, [r3, #0]
	}

	//Increment or decrement
	if(updown){
    7236:	4b26      	ldr	r3, [pc, #152]	; (72d0 <colorGradient+0xcc>)
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	2b00      	cmp	r3, #0
    723c:	d007      	beq.n	724e <colorGradient+0x4a>
		gradient += speed;
    723e:	4b23      	ldr	r3, [pc, #140]	; (72cc <colorGradient+0xc8>)
    7240:	681a      	ldr	r2, [r3, #0]
    7242:	4b20      	ldr	r3, [pc, #128]	; (72c4 <colorGradient+0xc0>)
    7244:	681b      	ldr	r3, [r3, #0]
    7246:	18d2      	adds	r2, r2, r3
    7248:	4b20      	ldr	r3, [pc, #128]	; (72cc <colorGradient+0xc8>)
    724a:	601a      	str	r2, [r3, #0]
    724c:	e006      	b.n	725c <colorGradient+0x58>
	}
	else{
		gradient -= speed;
    724e:	4b1f      	ldr	r3, [pc, #124]	; (72cc <colorGradient+0xc8>)
    7250:	681a      	ldr	r2, [r3, #0]
    7252:	4b1c      	ldr	r3, [pc, #112]	; (72c4 <colorGradient+0xc0>)
    7254:	681b      	ldr	r3, [r3, #0]
    7256:	1ad2      	subs	r2, r2, r3
    7258:	4b1c      	ldr	r3, [pc, #112]	; (72cc <colorGradient+0xc8>)
    725a:	601a      	str	r2, [r3, #0]
	}

	//See what color the RGB should be
	if(state > 65){ //green
    725c:	1dbb      	adds	r3, r7, #6
    725e:	881b      	ldrh	r3, [r3, #0]
    7260:	2b41      	cmp	r3, #65	; 0x41
    7262:	d90a      	bls.n	727a <colorGradient+0x76>
		setTrackBallRGBW(0x0, 0xFFFF - gradient, 0x0000, 0x0000);
    7264:	4b19      	ldr	r3, [pc, #100]	; (72cc <colorGradient+0xc8>)
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	b29b      	uxth	r3, r3
    726a:	43db      	mvns	r3, r3
    726c:	b299      	uxth	r1, r3
    726e:	2300      	movs	r3, #0
    7270:	2200      	movs	r2, #0
    7272:	2000      	movs	r0, #0
    7274:	4c17      	ldr	r4, [pc, #92]	; (72d4 <colorGradient+0xd0>)
    7276:	47a0      	blx	r4
	}
	else if(state > 10){ //red
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
	}
	else{}
}
    7278:	e020      	b.n	72bc <colorGradient+0xb8>

	//See what color the RGB should be
	if(state > 65){ //green
		setTrackBallRGBW(0x0, 0xFFFF - gradient, 0x0000, 0x0000);
	}
	else if(state > 25){ //yellow
    727a:	1dbb      	adds	r3, r7, #6
    727c:	881b      	ldrh	r3, [r3, #0]
    727e:	2b19      	cmp	r3, #25
    7280:	d90e      	bls.n	72a0 <colorGradient+0x9c>
		//setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
		setTrackBallRGBW(0xFFFF - gradient, 0xFFFF - gradient, 0x0, 0x0);
    7282:	4b12      	ldr	r3, [pc, #72]	; (72cc <colorGradient+0xc8>)
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	b29b      	uxth	r3, r3
    7288:	43db      	mvns	r3, r3
    728a:	b298      	uxth	r0, r3
    728c:	4b0f      	ldr	r3, [pc, #60]	; (72cc <colorGradient+0xc8>)
    728e:	681b      	ldr	r3, [r3, #0]
    7290:	b29b      	uxth	r3, r3
    7292:	43db      	mvns	r3, r3
    7294:	b299      	uxth	r1, r3
    7296:	2300      	movs	r3, #0
    7298:	2200      	movs	r2, #0
    729a:	4c0e      	ldr	r4, [pc, #56]	; (72d4 <colorGradient+0xd0>)
    729c:	47a0      	blx	r4
	}
	else if(state > 10){ //red
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
	}
	else{}
}
    729e:	e00d      	b.n	72bc <colorGradient+0xb8>
	}
	else if(state > 25){ //yellow
		//setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
		setTrackBallRGBW(0xFFFF - gradient, 0xFFFF - gradient, 0x0, 0x0);
	}
	else if(state > 10){ //red
    72a0:	1dbb      	adds	r3, r7, #6
    72a2:	881b      	ldrh	r3, [r3, #0]
    72a4:	2b0a      	cmp	r3, #10
    72a6:	d909      	bls.n	72bc <colorGradient+0xb8>
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
    72a8:	4b08      	ldr	r3, [pc, #32]	; (72cc <colorGradient+0xc8>)
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	b29b      	uxth	r3, r3
    72ae:	43db      	mvns	r3, r3
    72b0:	b298      	uxth	r0, r3
    72b2:	2300      	movs	r3, #0
    72b4:	2200      	movs	r2, #0
    72b6:	2100      	movs	r1, #0
    72b8:	4c06      	ldr	r4, [pc, #24]	; (72d4 <colorGradient+0xd0>)
    72ba:	47a0      	blx	r4
	}
	else{}
}
    72bc:	46c0      	nop			; (mov r8, r8)
    72be:	46bd      	mov	sp, r7
    72c0:	b003      	add	sp, #12
    72c2:	bd90      	pop	{r4, r7, pc}
    72c4:	20000008 	.word	0x20000008
    72c8:	0000ffff 	.word	0x0000ffff
    72cc:	2000007c 	.word	0x2000007c
    72d0:	20000080 	.word	0x20000080
    72d4:	000070d1 	.word	0x000070d1

000072d8 <blinkRed>:


void blinkRed(void){
    72d8:	b5b0      	push	{r4, r5, r7, lr}
    72da:	af00      	add	r7, sp, #0
	static int time_on = 200;
	static int count = 0;
	static int updown = 0;

	if(count >= time_on){
    72dc:	4b17      	ldr	r3, [pc, #92]	; (733c <blinkRed+0x64>)
    72de:	681a      	ldr	r2, [r3, #0]
    72e0:	4b17      	ldr	r3, [pc, #92]	; (7340 <blinkRed+0x68>)
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	429a      	cmp	r2, r3
    72e6:	db03      	blt.n	72f0 <blinkRed+0x18>
		updown = 0;
    72e8:	4b16      	ldr	r3, [pc, #88]	; (7344 <blinkRed+0x6c>)
    72ea:	2200      	movs	r2, #0
    72ec:	601a      	str	r2, [r3, #0]
    72ee:	e006      	b.n	72fe <blinkRed+0x26>
	}

	else if(count <= 0){
    72f0:	4b12      	ldr	r3, [pc, #72]	; (733c <blinkRed+0x64>)
    72f2:	681b      	ldr	r3, [r3, #0]
    72f4:	2b00      	cmp	r3, #0
    72f6:	dc02      	bgt.n	72fe <blinkRed+0x26>
		updown = 1;
    72f8:	4b12      	ldr	r3, [pc, #72]	; (7344 <blinkRed+0x6c>)
    72fa:	2201      	movs	r2, #1
    72fc:	601a      	str	r2, [r3, #0]
	}

	if(updown){
    72fe:	4b11      	ldr	r3, [pc, #68]	; (7344 <blinkRed+0x6c>)
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	2b00      	cmp	r3, #0
    7304:	d00b      	beq.n	731e <blinkRed+0x46>
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
    7306:	4810      	ldr	r0, [pc, #64]	; (7348 <blinkRed+0x70>)
    7308:	2300      	movs	r3, #0
    730a:	2200      	movs	r2, #0
    730c:	2100      	movs	r1, #0
    730e:	4c0f      	ldr	r4, [pc, #60]	; (734c <blinkRed+0x74>)
    7310:	47a0      	blx	r4
		count++;
    7312:	4b0a      	ldr	r3, [pc, #40]	; (733c <blinkRed+0x64>)
    7314:	681b      	ldr	r3, [r3, #0]
    7316:	1c5a      	adds	r2, r3, #1
    7318:	4b08      	ldr	r3, [pc, #32]	; (733c <blinkRed+0x64>)
    731a:	601a      	str	r2, [r3, #0]
	}
	else{
		setTrackBallRGBW(0x0, 0x0, 0x0, 0x0);
		count--;
	}
}
    731c:	e00a      	b.n	7334 <blinkRed+0x5c>
	if(updown){
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
		count++;
	}
	else{
		setTrackBallRGBW(0x0, 0x0, 0x0, 0x0);
    731e:	2300      	movs	r3, #0
    7320:	2200      	movs	r2, #0
    7322:	2100      	movs	r1, #0
    7324:	2000      	movs	r0, #0
    7326:	4c09      	ldr	r4, [pc, #36]	; (734c <blinkRed+0x74>)
    7328:	47a0      	blx	r4
		count--;
    732a:	4b04      	ldr	r3, [pc, #16]	; (733c <blinkRed+0x64>)
    732c:	681b      	ldr	r3, [r3, #0]
    732e:	1e5a      	subs	r2, r3, #1
    7330:	4b02      	ldr	r3, [pc, #8]	; (733c <blinkRed+0x64>)
    7332:	601a      	str	r2, [r3, #0]
	}
}
    7334:	46c0      	nop			; (mov r8, r8)
    7336:	46bd      	mov	sp, r7
    7338:	bdb0      	pop	{r4, r5, r7, pc}
    733a:	46c0      	nop			; (mov r8, r8)
    733c:	20000084 	.word	0x20000084
    7340:	2000000c 	.word	0x2000000c
    7344:	20000088 	.word	0x20000088
    7348:	0000ffff 	.word	0x0000ffff
    734c:	000070d1 	.word	0x000070d1

00007350 <colorSolid>:

void colorSolid(uint16_t state){
    7350:	b590      	push	{r4, r7, lr}
    7352:	b083      	sub	sp, #12
    7354:	af00      	add	r7, sp, #0
    7356:	0002      	movs	r2, r0
    7358:	1dbb      	adds	r3, r7, #6
    735a:	801a      	strh	r2, [r3, #0]


	//See what color the RGB should be
	if(state > 65){ //green
    735c:	1dbb      	adds	r3, r7, #6
    735e:	881b      	ldrh	r3, [r3, #0]
    7360:	2b41      	cmp	r3, #65	; 0x41
    7362:	d906      	bls.n	7372 <colorSolid+0x22>
		setTrackBallRGBW(0x0, 0xFFFF, 0x0000, 0x0000);
    7364:	4911      	ldr	r1, [pc, #68]	; (73ac <colorSolid+0x5c>)
    7366:	2300      	movs	r3, #0
    7368:	2200      	movs	r2, #0
    736a:	2000      	movs	r0, #0
    736c:	4c10      	ldr	r4, [pc, #64]	; (73b0 <colorSolid+0x60>)
    736e:	47a0      	blx	r4
	else if(state > 10){ //red
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
	}
	else{}

    7370:	e017      	b.n	73a2 <colorSolid+0x52>

	//See what color the RGB should be
	if(state > 65){ //green
		setTrackBallRGBW(0x0, 0xFFFF, 0x0000, 0x0000);
	}
	else if(state > 25){ //yellow
    7372:	1dbb      	adds	r3, r7, #6
    7374:	881b      	ldrh	r3, [r3, #0]
    7376:	2b19      	cmp	r3, #25
    7378:	d909      	bls.n	738e <colorSolid+0x3e>
		setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
    737a:	2380      	movs	r3, #128	; 0x80
    737c:	015a      	lsls	r2, r3, #5
    737e:	490b      	ldr	r1, [pc, #44]	; (73ac <colorSolid+0x5c>)
    7380:	23e0      	movs	r3, #224	; 0xe0
    7382:	01d8      	lsls	r0, r3, #7
    7384:	0013      	movs	r3, r2
    7386:	2200      	movs	r2, #0
    7388:	4c09      	ldr	r4, [pc, #36]	; (73b0 <colorSolid+0x60>)
    738a:	47a0      	blx	r4
	else if(state > 10){ //red
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
	}
	else{}

    738c:	e009      	b.n	73a2 <colorSolid+0x52>
		setTrackBallRGBW(0x0, 0xFFFF, 0x0000, 0x0000);
	}
	else if(state > 25){ //yellow
		setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
	}
	else if(state > 10){ //red
    738e:	1dbb      	adds	r3, r7, #6
    7390:	881b      	ldrh	r3, [r3, #0]
    7392:	2b0a      	cmp	r3, #10
    7394:	d905      	bls.n	73a2 <colorSolid+0x52>
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
    7396:	4805      	ldr	r0, [pc, #20]	; (73ac <colorSolid+0x5c>)
    7398:	2300      	movs	r3, #0
    739a:	2200      	movs	r2, #0
    739c:	2100      	movs	r1, #0
    739e:	4c04      	ldr	r4, [pc, #16]	; (73b0 <colorSolid+0x60>)
    73a0:	47a0      	blx	r4
	}
	else{}

    73a2:	46c0      	nop			; (mov r8, r8)
    73a4:	46bd      	mov	sp, r7
    73a6:	b003      	add	sp, #12
    73a8:	bd90      	pop	{r4, r7, pc}
    73aa:	46c0      	nop			; (mov r8, r8)
    73ac:	0000ffff 	.word	0x0000ffff
    73b0:	000070d1 	.word	0x000070d1

000073b4 <__aeabi_uidiv>:
    73b4:	2200      	movs	r2, #0
    73b6:	0843      	lsrs	r3, r0, #1
    73b8:	428b      	cmp	r3, r1
    73ba:	d374      	bcc.n	74a6 <__aeabi_uidiv+0xf2>
    73bc:	0903      	lsrs	r3, r0, #4
    73be:	428b      	cmp	r3, r1
    73c0:	d35f      	bcc.n	7482 <__aeabi_uidiv+0xce>
    73c2:	0a03      	lsrs	r3, r0, #8
    73c4:	428b      	cmp	r3, r1
    73c6:	d344      	bcc.n	7452 <__aeabi_uidiv+0x9e>
    73c8:	0b03      	lsrs	r3, r0, #12
    73ca:	428b      	cmp	r3, r1
    73cc:	d328      	bcc.n	7420 <__aeabi_uidiv+0x6c>
    73ce:	0c03      	lsrs	r3, r0, #16
    73d0:	428b      	cmp	r3, r1
    73d2:	d30d      	bcc.n	73f0 <__aeabi_uidiv+0x3c>
    73d4:	22ff      	movs	r2, #255	; 0xff
    73d6:	0209      	lsls	r1, r1, #8
    73d8:	ba12      	rev	r2, r2
    73da:	0c03      	lsrs	r3, r0, #16
    73dc:	428b      	cmp	r3, r1
    73de:	d302      	bcc.n	73e6 <__aeabi_uidiv+0x32>
    73e0:	1212      	asrs	r2, r2, #8
    73e2:	0209      	lsls	r1, r1, #8
    73e4:	d065      	beq.n	74b2 <__aeabi_uidiv+0xfe>
    73e6:	0b03      	lsrs	r3, r0, #12
    73e8:	428b      	cmp	r3, r1
    73ea:	d319      	bcc.n	7420 <__aeabi_uidiv+0x6c>
    73ec:	e000      	b.n	73f0 <__aeabi_uidiv+0x3c>
    73ee:	0a09      	lsrs	r1, r1, #8
    73f0:	0bc3      	lsrs	r3, r0, #15
    73f2:	428b      	cmp	r3, r1
    73f4:	d301      	bcc.n	73fa <__aeabi_uidiv+0x46>
    73f6:	03cb      	lsls	r3, r1, #15
    73f8:	1ac0      	subs	r0, r0, r3
    73fa:	4152      	adcs	r2, r2
    73fc:	0b83      	lsrs	r3, r0, #14
    73fe:	428b      	cmp	r3, r1
    7400:	d301      	bcc.n	7406 <__aeabi_uidiv+0x52>
    7402:	038b      	lsls	r3, r1, #14
    7404:	1ac0      	subs	r0, r0, r3
    7406:	4152      	adcs	r2, r2
    7408:	0b43      	lsrs	r3, r0, #13
    740a:	428b      	cmp	r3, r1
    740c:	d301      	bcc.n	7412 <__aeabi_uidiv+0x5e>
    740e:	034b      	lsls	r3, r1, #13
    7410:	1ac0      	subs	r0, r0, r3
    7412:	4152      	adcs	r2, r2
    7414:	0b03      	lsrs	r3, r0, #12
    7416:	428b      	cmp	r3, r1
    7418:	d301      	bcc.n	741e <__aeabi_uidiv+0x6a>
    741a:	030b      	lsls	r3, r1, #12
    741c:	1ac0      	subs	r0, r0, r3
    741e:	4152      	adcs	r2, r2
    7420:	0ac3      	lsrs	r3, r0, #11
    7422:	428b      	cmp	r3, r1
    7424:	d301      	bcc.n	742a <__aeabi_uidiv+0x76>
    7426:	02cb      	lsls	r3, r1, #11
    7428:	1ac0      	subs	r0, r0, r3
    742a:	4152      	adcs	r2, r2
    742c:	0a83      	lsrs	r3, r0, #10
    742e:	428b      	cmp	r3, r1
    7430:	d301      	bcc.n	7436 <__aeabi_uidiv+0x82>
    7432:	028b      	lsls	r3, r1, #10
    7434:	1ac0      	subs	r0, r0, r3
    7436:	4152      	adcs	r2, r2
    7438:	0a43      	lsrs	r3, r0, #9
    743a:	428b      	cmp	r3, r1
    743c:	d301      	bcc.n	7442 <__aeabi_uidiv+0x8e>
    743e:	024b      	lsls	r3, r1, #9
    7440:	1ac0      	subs	r0, r0, r3
    7442:	4152      	adcs	r2, r2
    7444:	0a03      	lsrs	r3, r0, #8
    7446:	428b      	cmp	r3, r1
    7448:	d301      	bcc.n	744e <__aeabi_uidiv+0x9a>
    744a:	020b      	lsls	r3, r1, #8
    744c:	1ac0      	subs	r0, r0, r3
    744e:	4152      	adcs	r2, r2
    7450:	d2cd      	bcs.n	73ee <__aeabi_uidiv+0x3a>
    7452:	09c3      	lsrs	r3, r0, #7
    7454:	428b      	cmp	r3, r1
    7456:	d301      	bcc.n	745c <__aeabi_uidiv+0xa8>
    7458:	01cb      	lsls	r3, r1, #7
    745a:	1ac0      	subs	r0, r0, r3
    745c:	4152      	adcs	r2, r2
    745e:	0983      	lsrs	r3, r0, #6
    7460:	428b      	cmp	r3, r1
    7462:	d301      	bcc.n	7468 <__aeabi_uidiv+0xb4>
    7464:	018b      	lsls	r3, r1, #6
    7466:	1ac0      	subs	r0, r0, r3
    7468:	4152      	adcs	r2, r2
    746a:	0943      	lsrs	r3, r0, #5
    746c:	428b      	cmp	r3, r1
    746e:	d301      	bcc.n	7474 <__aeabi_uidiv+0xc0>
    7470:	014b      	lsls	r3, r1, #5
    7472:	1ac0      	subs	r0, r0, r3
    7474:	4152      	adcs	r2, r2
    7476:	0903      	lsrs	r3, r0, #4
    7478:	428b      	cmp	r3, r1
    747a:	d301      	bcc.n	7480 <__aeabi_uidiv+0xcc>
    747c:	010b      	lsls	r3, r1, #4
    747e:	1ac0      	subs	r0, r0, r3
    7480:	4152      	adcs	r2, r2
    7482:	08c3      	lsrs	r3, r0, #3
    7484:	428b      	cmp	r3, r1
    7486:	d301      	bcc.n	748c <__aeabi_uidiv+0xd8>
    7488:	00cb      	lsls	r3, r1, #3
    748a:	1ac0      	subs	r0, r0, r3
    748c:	4152      	adcs	r2, r2
    748e:	0883      	lsrs	r3, r0, #2
    7490:	428b      	cmp	r3, r1
    7492:	d301      	bcc.n	7498 <__aeabi_uidiv+0xe4>
    7494:	008b      	lsls	r3, r1, #2
    7496:	1ac0      	subs	r0, r0, r3
    7498:	4152      	adcs	r2, r2
    749a:	0843      	lsrs	r3, r0, #1
    749c:	428b      	cmp	r3, r1
    749e:	d301      	bcc.n	74a4 <__aeabi_uidiv+0xf0>
    74a0:	004b      	lsls	r3, r1, #1
    74a2:	1ac0      	subs	r0, r0, r3
    74a4:	4152      	adcs	r2, r2
    74a6:	1a41      	subs	r1, r0, r1
    74a8:	d200      	bcs.n	74ac <__aeabi_uidiv+0xf8>
    74aa:	4601      	mov	r1, r0
    74ac:	4152      	adcs	r2, r2
    74ae:	4610      	mov	r0, r2
    74b0:	4770      	bx	lr
    74b2:	e7ff      	b.n	74b4 <__aeabi_uidiv+0x100>
    74b4:	b501      	push	{r0, lr}
    74b6:	2000      	movs	r0, #0
    74b8:	f000 f806 	bl	74c8 <__aeabi_idiv0>
    74bc:	bd02      	pop	{r1, pc}
    74be:	46c0      	nop			; (mov r8, r8)

000074c0 <__aeabi_uidivmod>:
    74c0:	2900      	cmp	r1, #0
    74c2:	d0f7      	beq.n	74b4 <__aeabi_uidiv+0x100>
    74c4:	e776      	b.n	73b4 <__aeabi_uidiv>
    74c6:	4770      	bx	lr

000074c8 <__aeabi_idiv0>:
    74c8:	4770      	bx	lr
    74ca:	46c0      	nop			; (mov r8, r8)

000074cc <__aeabi_dadd>:
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ce:	4656      	mov	r6, sl
    74d0:	465f      	mov	r7, fp
    74d2:	464d      	mov	r5, r9
    74d4:	4644      	mov	r4, r8
    74d6:	b4f0      	push	{r4, r5, r6, r7}
    74d8:	000f      	movs	r7, r1
    74da:	0ffd      	lsrs	r5, r7, #31
    74dc:	46aa      	mov	sl, r5
    74de:	0309      	lsls	r1, r1, #12
    74e0:	007c      	lsls	r4, r7, #1
    74e2:	002e      	movs	r6, r5
    74e4:	005f      	lsls	r7, r3, #1
    74e6:	0f45      	lsrs	r5, r0, #29
    74e8:	0a49      	lsrs	r1, r1, #9
    74ea:	0d7f      	lsrs	r7, r7, #21
    74ec:	4329      	orrs	r1, r5
    74ee:	00c5      	lsls	r5, r0, #3
    74f0:	0318      	lsls	r0, r3, #12
    74f2:	46bc      	mov	ip, r7
    74f4:	0a40      	lsrs	r0, r0, #9
    74f6:	0f57      	lsrs	r7, r2, #29
    74f8:	0d64      	lsrs	r4, r4, #21
    74fa:	0fdb      	lsrs	r3, r3, #31
    74fc:	4338      	orrs	r0, r7
    74fe:	00d2      	lsls	r2, r2, #3
    7500:	459a      	cmp	sl, r3
    7502:	d100      	bne.n	7506 <__aeabi_dadd+0x3a>
    7504:	e0aa      	b.n	765c <__aeabi_dadd+0x190>
    7506:	4666      	mov	r6, ip
    7508:	1ba6      	subs	r6, r4, r6
    750a:	2e00      	cmp	r6, #0
    750c:	dc00      	bgt.n	7510 <__aeabi_dadd+0x44>
    750e:	e0ff      	b.n	7710 <__aeabi_dadd+0x244>
    7510:	4663      	mov	r3, ip
    7512:	2b00      	cmp	r3, #0
    7514:	d139      	bne.n	758a <__aeabi_dadd+0xbe>
    7516:	0003      	movs	r3, r0
    7518:	4313      	orrs	r3, r2
    751a:	d000      	beq.n	751e <__aeabi_dadd+0x52>
    751c:	e0d9      	b.n	76d2 <__aeabi_dadd+0x206>
    751e:	076b      	lsls	r3, r5, #29
    7520:	d009      	beq.n	7536 <__aeabi_dadd+0x6a>
    7522:	230f      	movs	r3, #15
    7524:	402b      	ands	r3, r5
    7526:	2b04      	cmp	r3, #4
    7528:	d005      	beq.n	7536 <__aeabi_dadd+0x6a>
    752a:	1d2b      	adds	r3, r5, #4
    752c:	42ab      	cmp	r3, r5
    752e:	41ad      	sbcs	r5, r5
    7530:	426d      	negs	r5, r5
    7532:	1949      	adds	r1, r1, r5
    7534:	001d      	movs	r5, r3
    7536:	020b      	lsls	r3, r1, #8
    7538:	d400      	bmi.n	753c <__aeabi_dadd+0x70>
    753a:	e082      	b.n	7642 <__aeabi_dadd+0x176>
    753c:	4bca      	ldr	r3, [pc, #808]	; (7868 <__aeabi_dadd+0x39c>)
    753e:	3401      	adds	r4, #1
    7540:	429c      	cmp	r4, r3
    7542:	d100      	bne.n	7546 <__aeabi_dadd+0x7a>
    7544:	e0fe      	b.n	7744 <__aeabi_dadd+0x278>
    7546:	000a      	movs	r2, r1
    7548:	4656      	mov	r6, sl
    754a:	4bc8      	ldr	r3, [pc, #800]	; (786c <__aeabi_dadd+0x3a0>)
    754c:	08ed      	lsrs	r5, r5, #3
    754e:	401a      	ands	r2, r3
    7550:	0750      	lsls	r0, r2, #29
    7552:	0564      	lsls	r4, r4, #21
    7554:	0252      	lsls	r2, r2, #9
    7556:	4305      	orrs	r5, r0
    7558:	0b12      	lsrs	r2, r2, #12
    755a:	0d64      	lsrs	r4, r4, #21
    755c:	2100      	movs	r1, #0
    755e:	0312      	lsls	r2, r2, #12
    7560:	0d0b      	lsrs	r3, r1, #20
    7562:	051b      	lsls	r3, r3, #20
    7564:	0564      	lsls	r4, r4, #21
    7566:	0b12      	lsrs	r2, r2, #12
    7568:	431a      	orrs	r2, r3
    756a:	0863      	lsrs	r3, r4, #1
    756c:	4cc0      	ldr	r4, [pc, #768]	; (7870 <__aeabi_dadd+0x3a4>)
    756e:	07f6      	lsls	r6, r6, #31
    7570:	4014      	ands	r4, r2
    7572:	431c      	orrs	r4, r3
    7574:	0064      	lsls	r4, r4, #1
    7576:	0864      	lsrs	r4, r4, #1
    7578:	4334      	orrs	r4, r6
    757a:	0028      	movs	r0, r5
    757c:	0021      	movs	r1, r4
    757e:	bc3c      	pop	{r2, r3, r4, r5}
    7580:	4690      	mov	r8, r2
    7582:	4699      	mov	r9, r3
    7584:	46a2      	mov	sl, r4
    7586:	46ab      	mov	fp, r5
    7588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    758a:	4bb7      	ldr	r3, [pc, #732]	; (7868 <__aeabi_dadd+0x39c>)
    758c:	429c      	cmp	r4, r3
    758e:	d0c6      	beq.n	751e <__aeabi_dadd+0x52>
    7590:	2380      	movs	r3, #128	; 0x80
    7592:	041b      	lsls	r3, r3, #16
    7594:	4318      	orrs	r0, r3
    7596:	2e38      	cmp	r6, #56	; 0x38
    7598:	dd00      	ble.n	759c <__aeabi_dadd+0xd0>
    759a:	e0eb      	b.n	7774 <__aeabi_dadd+0x2a8>
    759c:	2e1f      	cmp	r6, #31
    759e:	dd00      	ble.n	75a2 <__aeabi_dadd+0xd6>
    75a0:	e11e      	b.n	77e0 <__aeabi_dadd+0x314>
    75a2:	2320      	movs	r3, #32
    75a4:	1b9b      	subs	r3, r3, r6
    75a6:	469c      	mov	ip, r3
    75a8:	0003      	movs	r3, r0
    75aa:	4667      	mov	r7, ip
    75ac:	40bb      	lsls	r3, r7
    75ae:	4698      	mov	r8, r3
    75b0:	0013      	movs	r3, r2
    75b2:	4647      	mov	r7, r8
    75b4:	40f3      	lsrs	r3, r6
    75b6:	433b      	orrs	r3, r7
    75b8:	4667      	mov	r7, ip
    75ba:	40ba      	lsls	r2, r7
    75bc:	1e57      	subs	r7, r2, #1
    75be:	41ba      	sbcs	r2, r7
    75c0:	4313      	orrs	r3, r2
    75c2:	0002      	movs	r2, r0
    75c4:	40f2      	lsrs	r2, r6
    75c6:	1aeb      	subs	r3, r5, r3
    75c8:	429d      	cmp	r5, r3
    75ca:	41b6      	sbcs	r6, r6
    75cc:	001d      	movs	r5, r3
    75ce:	1a8a      	subs	r2, r1, r2
    75d0:	4276      	negs	r6, r6
    75d2:	1b91      	subs	r1, r2, r6
    75d4:	020b      	lsls	r3, r1, #8
    75d6:	d531      	bpl.n	763c <__aeabi_dadd+0x170>
    75d8:	024a      	lsls	r2, r1, #9
    75da:	0a56      	lsrs	r6, r2, #9
    75dc:	2e00      	cmp	r6, #0
    75de:	d100      	bne.n	75e2 <__aeabi_dadd+0x116>
    75e0:	e0b4      	b.n	774c <__aeabi_dadd+0x280>
    75e2:	0030      	movs	r0, r6
    75e4:	f001 fbf0 	bl	8dc8 <__clzsi2>
    75e8:	0003      	movs	r3, r0
    75ea:	3b08      	subs	r3, #8
    75ec:	2b1f      	cmp	r3, #31
    75ee:	dd00      	ble.n	75f2 <__aeabi_dadd+0x126>
    75f0:	e0b5      	b.n	775e <__aeabi_dadd+0x292>
    75f2:	2220      	movs	r2, #32
    75f4:	0029      	movs	r1, r5
    75f6:	1ad2      	subs	r2, r2, r3
    75f8:	40d1      	lsrs	r1, r2
    75fa:	409e      	lsls	r6, r3
    75fc:	000a      	movs	r2, r1
    75fe:	409d      	lsls	r5, r3
    7600:	4332      	orrs	r2, r6
    7602:	429c      	cmp	r4, r3
    7604:	dd00      	ble.n	7608 <__aeabi_dadd+0x13c>
    7606:	e0b1      	b.n	776c <__aeabi_dadd+0x2a0>
    7608:	1b1c      	subs	r4, r3, r4
    760a:	1c63      	adds	r3, r4, #1
    760c:	2b1f      	cmp	r3, #31
    760e:	dd00      	ble.n	7612 <__aeabi_dadd+0x146>
    7610:	e0d5      	b.n	77be <__aeabi_dadd+0x2f2>
    7612:	2120      	movs	r1, #32
    7614:	0014      	movs	r4, r2
    7616:	0028      	movs	r0, r5
    7618:	1ac9      	subs	r1, r1, r3
    761a:	408c      	lsls	r4, r1
    761c:	40d8      	lsrs	r0, r3
    761e:	408d      	lsls	r5, r1
    7620:	4304      	orrs	r4, r0
    7622:	40da      	lsrs	r2, r3
    7624:	1e68      	subs	r0, r5, #1
    7626:	4185      	sbcs	r5, r0
    7628:	0011      	movs	r1, r2
    762a:	4325      	orrs	r5, r4
    762c:	2400      	movs	r4, #0
    762e:	e776      	b.n	751e <__aeabi_dadd+0x52>
    7630:	4641      	mov	r1, r8
    7632:	4331      	orrs	r1, r6
    7634:	d100      	bne.n	7638 <__aeabi_dadd+0x16c>
    7636:	e234      	b.n	7aa2 <__aeabi_dadd+0x5d6>
    7638:	0031      	movs	r1, r6
    763a:	4645      	mov	r5, r8
    763c:	076b      	lsls	r3, r5, #29
    763e:	d000      	beq.n	7642 <__aeabi_dadd+0x176>
    7640:	e76f      	b.n	7522 <__aeabi_dadd+0x56>
    7642:	4656      	mov	r6, sl
    7644:	0748      	lsls	r0, r1, #29
    7646:	08ed      	lsrs	r5, r5, #3
    7648:	08c9      	lsrs	r1, r1, #3
    764a:	4305      	orrs	r5, r0
    764c:	4b86      	ldr	r3, [pc, #536]	; (7868 <__aeabi_dadd+0x39c>)
    764e:	429c      	cmp	r4, r3
    7650:	d035      	beq.n	76be <__aeabi_dadd+0x1f2>
    7652:	030a      	lsls	r2, r1, #12
    7654:	0564      	lsls	r4, r4, #21
    7656:	0b12      	lsrs	r2, r2, #12
    7658:	0d64      	lsrs	r4, r4, #21
    765a:	e77f      	b.n	755c <__aeabi_dadd+0x90>
    765c:	4663      	mov	r3, ip
    765e:	1ae3      	subs	r3, r4, r3
    7660:	469b      	mov	fp, r3
    7662:	2b00      	cmp	r3, #0
    7664:	dc00      	bgt.n	7668 <__aeabi_dadd+0x19c>
    7666:	e08b      	b.n	7780 <__aeabi_dadd+0x2b4>
    7668:	4667      	mov	r7, ip
    766a:	2f00      	cmp	r7, #0
    766c:	d03c      	beq.n	76e8 <__aeabi_dadd+0x21c>
    766e:	4f7e      	ldr	r7, [pc, #504]	; (7868 <__aeabi_dadd+0x39c>)
    7670:	42bc      	cmp	r4, r7
    7672:	d100      	bne.n	7676 <__aeabi_dadd+0x1aa>
    7674:	e753      	b.n	751e <__aeabi_dadd+0x52>
    7676:	2780      	movs	r7, #128	; 0x80
    7678:	043f      	lsls	r7, r7, #16
    767a:	4338      	orrs	r0, r7
    767c:	465b      	mov	r3, fp
    767e:	2b38      	cmp	r3, #56	; 0x38
    7680:	dc00      	bgt.n	7684 <__aeabi_dadd+0x1b8>
    7682:	e0f7      	b.n	7874 <__aeabi_dadd+0x3a8>
    7684:	4302      	orrs	r2, r0
    7686:	1e50      	subs	r0, r2, #1
    7688:	4182      	sbcs	r2, r0
    768a:	2000      	movs	r0, #0
    768c:	b2d2      	uxtb	r2, r2
    768e:	1953      	adds	r3, r2, r5
    7690:	1842      	adds	r2, r0, r1
    7692:	42ab      	cmp	r3, r5
    7694:	4189      	sbcs	r1, r1
    7696:	001d      	movs	r5, r3
    7698:	4249      	negs	r1, r1
    769a:	1889      	adds	r1, r1, r2
    769c:	020b      	lsls	r3, r1, #8
    769e:	d5cd      	bpl.n	763c <__aeabi_dadd+0x170>
    76a0:	4b71      	ldr	r3, [pc, #452]	; (7868 <__aeabi_dadd+0x39c>)
    76a2:	3401      	adds	r4, #1
    76a4:	429c      	cmp	r4, r3
    76a6:	d100      	bne.n	76aa <__aeabi_dadd+0x1de>
    76a8:	e13d      	b.n	7926 <__aeabi_dadd+0x45a>
    76aa:	2001      	movs	r0, #1
    76ac:	4a6f      	ldr	r2, [pc, #444]	; (786c <__aeabi_dadd+0x3a0>)
    76ae:	086b      	lsrs	r3, r5, #1
    76b0:	400a      	ands	r2, r1
    76b2:	4028      	ands	r0, r5
    76b4:	4318      	orrs	r0, r3
    76b6:	07d5      	lsls	r5, r2, #31
    76b8:	4305      	orrs	r5, r0
    76ba:	0851      	lsrs	r1, r2, #1
    76bc:	e72f      	b.n	751e <__aeabi_dadd+0x52>
    76be:	002b      	movs	r3, r5
    76c0:	430b      	orrs	r3, r1
    76c2:	d100      	bne.n	76c6 <__aeabi_dadd+0x1fa>
    76c4:	e1cb      	b.n	7a5e <__aeabi_dadd+0x592>
    76c6:	2380      	movs	r3, #128	; 0x80
    76c8:	031b      	lsls	r3, r3, #12
    76ca:	430b      	orrs	r3, r1
    76cc:	031a      	lsls	r2, r3, #12
    76ce:	0b12      	lsrs	r2, r2, #12
    76d0:	e744      	b.n	755c <__aeabi_dadd+0x90>
    76d2:	3e01      	subs	r6, #1
    76d4:	2e00      	cmp	r6, #0
    76d6:	d16d      	bne.n	77b4 <__aeabi_dadd+0x2e8>
    76d8:	1aae      	subs	r6, r5, r2
    76da:	42b5      	cmp	r5, r6
    76dc:	419b      	sbcs	r3, r3
    76de:	1a09      	subs	r1, r1, r0
    76e0:	425b      	negs	r3, r3
    76e2:	1ac9      	subs	r1, r1, r3
    76e4:	0035      	movs	r5, r6
    76e6:	e775      	b.n	75d4 <__aeabi_dadd+0x108>
    76e8:	0007      	movs	r7, r0
    76ea:	4317      	orrs	r7, r2
    76ec:	d100      	bne.n	76f0 <__aeabi_dadd+0x224>
    76ee:	e716      	b.n	751e <__aeabi_dadd+0x52>
    76f0:	2301      	movs	r3, #1
    76f2:	425b      	negs	r3, r3
    76f4:	469c      	mov	ip, r3
    76f6:	44e3      	add	fp, ip
    76f8:	465b      	mov	r3, fp
    76fa:	2b00      	cmp	r3, #0
    76fc:	d000      	beq.n	7700 <__aeabi_dadd+0x234>
    76fe:	e0e0      	b.n	78c2 <__aeabi_dadd+0x3f6>
    7700:	18aa      	adds	r2, r5, r2
    7702:	42aa      	cmp	r2, r5
    7704:	419b      	sbcs	r3, r3
    7706:	1809      	adds	r1, r1, r0
    7708:	425b      	negs	r3, r3
    770a:	1859      	adds	r1, r3, r1
    770c:	0015      	movs	r5, r2
    770e:	e7c5      	b.n	769c <__aeabi_dadd+0x1d0>
    7710:	2e00      	cmp	r6, #0
    7712:	d175      	bne.n	7800 <__aeabi_dadd+0x334>
    7714:	1c66      	adds	r6, r4, #1
    7716:	0576      	lsls	r6, r6, #21
    7718:	0d76      	lsrs	r6, r6, #21
    771a:	2e01      	cmp	r6, #1
    771c:	dc00      	bgt.n	7720 <__aeabi_dadd+0x254>
    771e:	e0f3      	b.n	7908 <__aeabi_dadd+0x43c>
    7720:	1aae      	subs	r6, r5, r2
    7722:	46b0      	mov	r8, r6
    7724:	4545      	cmp	r5, r8
    7726:	41bf      	sbcs	r7, r7
    7728:	1a0e      	subs	r6, r1, r0
    772a:	427f      	negs	r7, r7
    772c:	1bf6      	subs	r6, r6, r7
    772e:	0237      	lsls	r7, r6, #8
    7730:	d400      	bmi.n	7734 <__aeabi_dadd+0x268>
    7732:	e08f      	b.n	7854 <__aeabi_dadd+0x388>
    7734:	1b55      	subs	r5, r2, r5
    7736:	42aa      	cmp	r2, r5
    7738:	41b6      	sbcs	r6, r6
    773a:	1a41      	subs	r1, r0, r1
    773c:	4276      	negs	r6, r6
    773e:	1b8e      	subs	r6, r1, r6
    7740:	469a      	mov	sl, r3
    7742:	e74b      	b.n	75dc <__aeabi_dadd+0x110>
    7744:	4656      	mov	r6, sl
    7746:	2200      	movs	r2, #0
    7748:	2500      	movs	r5, #0
    774a:	e707      	b.n	755c <__aeabi_dadd+0x90>
    774c:	0028      	movs	r0, r5
    774e:	f001 fb3b 	bl	8dc8 <__clzsi2>
    7752:	3020      	adds	r0, #32
    7754:	0003      	movs	r3, r0
    7756:	3b08      	subs	r3, #8
    7758:	2b1f      	cmp	r3, #31
    775a:	dc00      	bgt.n	775e <__aeabi_dadd+0x292>
    775c:	e749      	b.n	75f2 <__aeabi_dadd+0x126>
    775e:	002a      	movs	r2, r5
    7760:	3828      	subs	r0, #40	; 0x28
    7762:	4082      	lsls	r2, r0
    7764:	2500      	movs	r5, #0
    7766:	429c      	cmp	r4, r3
    7768:	dc00      	bgt.n	776c <__aeabi_dadd+0x2a0>
    776a:	e74d      	b.n	7608 <__aeabi_dadd+0x13c>
    776c:	493f      	ldr	r1, [pc, #252]	; (786c <__aeabi_dadd+0x3a0>)
    776e:	1ae4      	subs	r4, r4, r3
    7770:	4011      	ands	r1, r2
    7772:	e6d4      	b.n	751e <__aeabi_dadd+0x52>
    7774:	4302      	orrs	r2, r0
    7776:	1e50      	subs	r0, r2, #1
    7778:	4182      	sbcs	r2, r0
    777a:	b2d3      	uxtb	r3, r2
    777c:	2200      	movs	r2, #0
    777e:	e722      	b.n	75c6 <__aeabi_dadd+0xfa>
    7780:	2b00      	cmp	r3, #0
    7782:	d000      	beq.n	7786 <__aeabi_dadd+0x2ba>
    7784:	e0f3      	b.n	796e <__aeabi_dadd+0x4a2>
    7786:	1c63      	adds	r3, r4, #1
    7788:	469c      	mov	ip, r3
    778a:	055b      	lsls	r3, r3, #21
    778c:	0d5b      	lsrs	r3, r3, #21
    778e:	2b01      	cmp	r3, #1
    7790:	dc00      	bgt.n	7794 <__aeabi_dadd+0x2c8>
    7792:	e09f      	b.n	78d4 <__aeabi_dadd+0x408>
    7794:	4b34      	ldr	r3, [pc, #208]	; (7868 <__aeabi_dadd+0x39c>)
    7796:	459c      	cmp	ip, r3
    7798:	d100      	bne.n	779c <__aeabi_dadd+0x2d0>
    779a:	e0c3      	b.n	7924 <__aeabi_dadd+0x458>
    779c:	18aa      	adds	r2, r5, r2
    779e:	1809      	adds	r1, r1, r0
    77a0:	42aa      	cmp	r2, r5
    77a2:	4180      	sbcs	r0, r0
    77a4:	4240      	negs	r0, r0
    77a6:	1841      	adds	r1, r0, r1
    77a8:	07cd      	lsls	r5, r1, #31
    77aa:	0852      	lsrs	r2, r2, #1
    77ac:	4315      	orrs	r5, r2
    77ae:	0849      	lsrs	r1, r1, #1
    77b0:	4664      	mov	r4, ip
    77b2:	e6b4      	b.n	751e <__aeabi_dadd+0x52>
    77b4:	4b2c      	ldr	r3, [pc, #176]	; (7868 <__aeabi_dadd+0x39c>)
    77b6:	429c      	cmp	r4, r3
    77b8:	d000      	beq.n	77bc <__aeabi_dadd+0x2f0>
    77ba:	e6ec      	b.n	7596 <__aeabi_dadd+0xca>
    77bc:	e6af      	b.n	751e <__aeabi_dadd+0x52>
    77be:	0011      	movs	r1, r2
    77c0:	3c1f      	subs	r4, #31
    77c2:	40e1      	lsrs	r1, r4
    77c4:	000c      	movs	r4, r1
    77c6:	2b20      	cmp	r3, #32
    77c8:	d100      	bne.n	77cc <__aeabi_dadd+0x300>
    77ca:	e07f      	b.n	78cc <__aeabi_dadd+0x400>
    77cc:	2140      	movs	r1, #64	; 0x40
    77ce:	1acb      	subs	r3, r1, r3
    77d0:	409a      	lsls	r2, r3
    77d2:	4315      	orrs	r5, r2
    77d4:	1e6a      	subs	r2, r5, #1
    77d6:	4195      	sbcs	r5, r2
    77d8:	2100      	movs	r1, #0
    77da:	4325      	orrs	r5, r4
    77dc:	2400      	movs	r4, #0
    77de:	e72d      	b.n	763c <__aeabi_dadd+0x170>
    77e0:	0033      	movs	r3, r6
    77e2:	0007      	movs	r7, r0
    77e4:	3b20      	subs	r3, #32
    77e6:	40df      	lsrs	r7, r3
    77e8:	003b      	movs	r3, r7
    77ea:	2e20      	cmp	r6, #32
    77ec:	d070      	beq.n	78d0 <__aeabi_dadd+0x404>
    77ee:	2740      	movs	r7, #64	; 0x40
    77f0:	1bbe      	subs	r6, r7, r6
    77f2:	40b0      	lsls	r0, r6
    77f4:	4302      	orrs	r2, r0
    77f6:	1e50      	subs	r0, r2, #1
    77f8:	4182      	sbcs	r2, r0
    77fa:	4313      	orrs	r3, r2
    77fc:	2200      	movs	r2, #0
    77fe:	e6e2      	b.n	75c6 <__aeabi_dadd+0xfa>
    7800:	2c00      	cmp	r4, #0
    7802:	d04f      	beq.n	78a4 <__aeabi_dadd+0x3d8>
    7804:	4c18      	ldr	r4, [pc, #96]	; (7868 <__aeabi_dadd+0x39c>)
    7806:	45a4      	cmp	ip, r4
    7808:	d100      	bne.n	780c <__aeabi_dadd+0x340>
    780a:	e0ab      	b.n	7964 <__aeabi_dadd+0x498>
    780c:	2480      	movs	r4, #128	; 0x80
    780e:	0424      	lsls	r4, r4, #16
    7810:	4276      	negs	r6, r6
    7812:	4321      	orrs	r1, r4
    7814:	2e38      	cmp	r6, #56	; 0x38
    7816:	dd00      	ble.n	781a <__aeabi_dadd+0x34e>
    7818:	e0df      	b.n	79da <__aeabi_dadd+0x50e>
    781a:	2e1f      	cmp	r6, #31
    781c:	dd00      	ble.n	7820 <__aeabi_dadd+0x354>
    781e:	e143      	b.n	7aa8 <__aeabi_dadd+0x5dc>
    7820:	2720      	movs	r7, #32
    7822:	1bbc      	subs	r4, r7, r6
    7824:	46a1      	mov	r9, r4
    7826:	000c      	movs	r4, r1
    7828:	464f      	mov	r7, r9
    782a:	40bc      	lsls	r4, r7
    782c:	46a0      	mov	r8, r4
    782e:	002c      	movs	r4, r5
    7830:	4647      	mov	r7, r8
    7832:	40f4      	lsrs	r4, r6
    7834:	433c      	orrs	r4, r7
    7836:	464f      	mov	r7, r9
    7838:	40bd      	lsls	r5, r7
    783a:	1e6f      	subs	r7, r5, #1
    783c:	41bd      	sbcs	r5, r7
    783e:	40f1      	lsrs	r1, r6
    7840:	432c      	orrs	r4, r5
    7842:	1b15      	subs	r5, r2, r4
    7844:	42aa      	cmp	r2, r5
    7846:	4192      	sbcs	r2, r2
    7848:	1a41      	subs	r1, r0, r1
    784a:	4252      	negs	r2, r2
    784c:	1a89      	subs	r1, r1, r2
    784e:	4664      	mov	r4, ip
    7850:	469a      	mov	sl, r3
    7852:	e6bf      	b.n	75d4 <__aeabi_dadd+0x108>
    7854:	4641      	mov	r1, r8
    7856:	4645      	mov	r5, r8
    7858:	4331      	orrs	r1, r6
    785a:	d000      	beq.n	785e <__aeabi_dadd+0x392>
    785c:	e6be      	b.n	75dc <__aeabi_dadd+0x110>
    785e:	2600      	movs	r6, #0
    7860:	2400      	movs	r4, #0
    7862:	2500      	movs	r5, #0
    7864:	e6f2      	b.n	764c <__aeabi_dadd+0x180>
    7866:	46c0      	nop			; (mov r8, r8)
    7868:	000007ff 	.word	0x000007ff
    786c:	ff7fffff 	.word	0xff7fffff
    7870:	800fffff 	.word	0x800fffff
    7874:	2b1f      	cmp	r3, #31
    7876:	dc59      	bgt.n	792c <__aeabi_dadd+0x460>
    7878:	2720      	movs	r7, #32
    787a:	1aff      	subs	r7, r7, r3
    787c:	46bc      	mov	ip, r7
    787e:	0007      	movs	r7, r0
    7880:	4663      	mov	r3, ip
    7882:	409f      	lsls	r7, r3
    7884:	465b      	mov	r3, fp
    7886:	46b9      	mov	r9, r7
    7888:	0017      	movs	r7, r2
    788a:	40df      	lsrs	r7, r3
    788c:	46b8      	mov	r8, r7
    788e:	464f      	mov	r7, r9
    7890:	4643      	mov	r3, r8
    7892:	431f      	orrs	r7, r3
    7894:	4663      	mov	r3, ip
    7896:	409a      	lsls	r2, r3
    7898:	1e53      	subs	r3, r2, #1
    789a:	419a      	sbcs	r2, r3
    789c:	465b      	mov	r3, fp
    789e:	433a      	orrs	r2, r7
    78a0:	40d8      	lsrs	r0, r3
    78a2:	e6f4      	b.n	768e <__aeabi_dadd+0x1c2>
    78a4:	000c      	movs	r4, r1
    78a6:	432c      	orrs	r4, r5
    78a8:	d05c      	beq.n	7964 <__aeabi_dadd+0x498>
    78aa:	43f6      	mvns	r6, r6
    78ac:	2e00      	cmp	r6, #0
    78ae:	d155      	bne.n	795c <__aeabi_dadd+0x490>
    78b0:	1b55      	subs	r5, r2, r5
    78b2:	42aa      	cmp	r2, r5
    78b4:	41a4      	sbcs	r4, r4
    78b6:	1a41      	subs	r1, r0, r1
    78b8:	4264      	negs	r4, r4
    78ba:	1b09      	subs	r1, r1, r4
    78bc:	469a      	mov	sl, r3
    78be:	4664      	mov	r4, ip
    78c0:	e688      	b.n	75d4 <__aeabi_dadd+0x108>
    78c2:	4f96      	ldr	r7, [pc, #600]	; (7b1c <__aeabi_dadd+0x650>)
    78c4:	42bc      	cmp	r4, r7
    78c6:	d000      	beq.n	78ca <__aeabi_dadd+0x3fe>
    78c8:	e6d8      	b.n	767c <__aeabi_dadd+0x1b0>
    78ca:	e628      	b.n	751e <__aeabi_dadd+0x52>
    78cc:	2200      	movs	r2, #0
    78ce:	e780      	b.n	77d2 <__aeabi_dadd+0x306>
    78d0:	2000      	movs	r0, #0
    78d2:	e78f      	b.n	77f4 <__aeabi_dadd+0x328>
    78d4:	000b      	movs	r3, r1
    78d6:	432b      	orrs	r3, r5
    78d8:	2c00      	cmp	r4, #0
    78da:	d000      	beq.n	78de <__aeabi_dadd+0x412>
    78dc:	e0c2      	b.n	7a64 <__aeabi_dadd+0x598>
    78de:	2b00      	cmp	r3, #0
    78e0:	d100      	bne.n	78e4 <__aeabi_dadd+0x418>
    78e2:	e101      	b.n	7ae8 <__aeabi_dadd+0x61c>
    78e4:	0003      	movs	r3, r0
    78e6:	4313      	orrs	r3, r2
    78e8:	d100      	bne.n	78ec <__aeabi_dadd+0x420>
    78ea:	e618      	b.n	751e <__aeabi_dadd+0x52>
    78ec:	18ab      	adds	r3, r5, r2
    78ee:	42ab      	cmp	r3, r5
    78f0:	41b6      	sbcs	r6, r6
    78f2:	1809      	adds	r1, r1, r0
    78f4:	4276      	negs	r6, r6
    78f6:	1871      	adds	r1, r6, r1
    78f8:	020a      	lsls	r2, r1, #8
    78fa:	d400      	bmi.n	78fe <__aeabi_dadd+0x432>
    78fc:	e109      	b.n	7b12 <__aeabi_dadd+0x646>
    78fe:	4a88      	ldr	r2, [pc, #544]	; (7b20 <__aeabi_dadd+0x654>)
    7900:	001d      	movs	r5, r3
    7902:	4011      	ands	r1, r2
    7904:	4664      	mov	r4, ip
    7906:	e60a      	b.n	751e <__aeabi_dadd+0x52>
    7908:	2c00      	cmp	r4, #0
    790a:	d15b      	bne.n	79c4 <__aeabi_dadd+0x4f8>
    790c:	000e      	movs	r6, r1
    790e:	432e      	orrs	r6, r5
    7910:	d000      	beq.n	7914 <__aeabi_dadd+0x448>
    7912:	e08a      	b.n	7a2a <__aeabi_dadd+0x55e>
    7914:	0001      	movs	r1, r0
    7916:	4311      	orrs	r1, r2
    7918:	d100      	bne.n	791c <__aeabi_dadd+0x450>
    791a:	e0c2      	b.n	7aa2 <__aeabi_dadd+0x5d6>
    791c:	0001      	movs	r1, r0
    791e:	0015      	movs	r5, r2
    7920:	469a      	mov	sl, r3
    7922:	e5fc      	b.n	751e <__aeabi_dadd+0x52>
    7924:	4664      	mov	r4, ip
    7926:	2100      	movs	r1, #0
    7928:	2500      	movs	r5, #0
    792a:	e68f      	b.n	764c <__aeabi_dadd+0x180>
    792c:	2320      	movs	r3, #32
    792e:	425b      	negs	r3, r3
    7930:	469c      	mov	ip, r3
    7932:	44dc      	add	ip, fp
    7934:	4663      	mov	r3, ip
    7936:	0007      	movs	r7, r0
    7938:	40df      	lsrs	r7, r3
    793a:	465b      	mov	r3, fp
    793c:	46bc      	mov	ip, r7
    793e:	2b20      	cmp	r3, #32
    7940:	d100      	bne.n	7944 <__aeabi_dadd+0x478>
    7942:	e0ac      	b.n	7a9e <__aeabi_dadd+0x5d2>
    7944:	2340      	movs	r3, #64	; 0x40
    7946:	465f      	mov	r7, fp
    7948:	1bdb      	subs	r3, r3, r7
    794a:	4098      	lsls	r0, r3
    794c:	4302      	orrs	r2, r0
    794e:	1e50      	subs	r0, r2, #1
    7950:	4182      	sbcs	r2, r0
    7952:	4663      	mov	r3, ip
    7954:	4313      	orrs	r3, r2
    7956:	001a      	movs	r2, r3
    7958:	2000      	movs	r0, #0
    795a:	e698      	b.n	768e <__aeabi_dadd+0x1c2>
    795c:	4c6f      	ldr	r4, [pc, #444]	; (7b1c <__aeabi_dadd+0x650>)
    795e:	45a4      	cmp	ip, r4
    7960:	d000      	beq.n	7964 <__aeabi_dadd+0x498>
    7962:	e757      	b.n	7814 <__aeabi_dadd+0x348>
    7964:	0001      	movs	r1, r0
    7966:	0015      	movs	r5, r2
    7968:	4664      	mov	r4, ip
    796a:	469a      	mov	sl, r3
    796c:	e5d7      	b.n	751e <__aeabi_dadd+0x52>
    796e:	2c00      	cmp	r4, #0
    7970:	d139      	bne.n	79e6 <__aeabi_dadd+0x51a>
    7972:	000c      	movs	r4, r1
    7974:	432c      	orrs	r4, r5
    7976:	d06e      	beq.n	7a56 <__aeabi_dadd+0x58a>
    7978:	43db      	mvns	r3, r3
    797a:	2b00      	cmp	r3, #0
    797c:	d01a      	beq.n	79b4 <__aeabi_dadd+0x4e8>
    797e:	4c67      	ldr	r4, [pc, #412]	; (7b1c <__aeabi_dadd+0x650>)
    7980:	45a4      	cmp	ip, r4
    7982:	d068      	beq.n	7a56 <__aeabi_dadd+0x58a>
    7984:	2b38      	cmp	r3, #56	; 0x38
    7986:	dd00      	ble.n	798a <__aeabi_dadd+0x4be>
    7988:	e0a4      	b.n	7ad4 <__aeabi_dadd+0x608>
    798a:	2b1f      	cmp	r3, #31
    798c:	dd00      	ble.n	7990 <__aeabi_dadd+0x4c4>
    798e:	e0ae      	b.n	7aee <__aeabi_dadd+0x622>
    7990:	2420      	movs	r4, #32
    7992:	000f      	movs	r7, r1
    7994:	1ae4      	subs	r4, r4, r3
    7996:	40a7      	lsls	r7, r4
    7998:	46b9      	mov	r9, r7
    799a:	002f      	movs	r7, r5
    799c:	40df      	lsrs	r7, r3
    799e:	46b8      	mov	r8, r7
    79a0:	46a3      	mov	fp, r4
    79a2:	464f      	mov	r7, r9
    79a4:	4644      	mov	r4, r8
    79a6:	4327      	orrs	r7, r4
    79a8:	465c      	mov	r4, fp
    79aa:	40a5      	lsls	r5, r4
    79ac:	1e6c      	subs	r4, r5, #1
    79ae:	41a5      	sbcs	r5, r4
    79b0:	40d9      	lsrs	r1, r3
    79b2:	433d      	orrs	r5, r7
    79b4:	18ad      	adds	r5, r5, r2
    79b6:	4295      	cmp	r5, r2
    79b8:	419b      	sbcs	r3, r3
    79ba:	1809      	adds	r1, r1, r0
    79bc:	425b      	negs	r3, r3
    79be:	1859      	adds	r1, r3, r1
    79c0:	4664      	mov	r4, ip
    79c2:	e66b      	b.n	769c <__aeabi_dadd+0x1d0>
    79c4:	000c      	movs	r4, r1
    79c6:	432c      	orrs	r4, r5
    79c8:	d115      	bne.n	79f6 <__aeabi_dadd+0x52a>
    79ca:	0001      	movs	r1, r0
    79cc:	4311      	orrs	r1, r2
    79ce:	d07b      	beq.n	7ac8 <__aeabi_dadd+0x5fc>
    79d0:	0001      	movs	r1, r0
    79d2:	0015      	movs	r5, r2
    79d4:	469a      	mov	sl, r3
    79d6:	4c51      	ldr	r4, [pc, #324]	; (7b1c <__aeabi_dadd+0x650>)
    79d8:	e5a1      	b.n	751e <__aeabi_dadd+0x52>
    79da:	430d      	orrs	r5, r1
    79dc:	1e69      	subs	r1, r5, #1
    79de:	418d      	sbcs	r5, r1
    79e0:	2100      	movs	r1, #0
    79e2:	b2ec      	uxtb	r4, r5
    79e4:	e72d      	b.n	7842 <__aeabi_dadd+0x376>
    79e6:	4c4d      	ldr	r4, [pc, #308]	; (7b1c <__aeabi_dadd+0x650>)
    79e8:	45a4      	cmp	ip, r4
    79ea:	d034      	beq.n	7a56 <__aeabi_dadd+0x58a>
    79ec:	2480      	movs	r4, #128	; 0x80
    79ee:	0424      	lsls	r4, r4, #16
    79f0:	425b      	negs	r3, r3
    79f2:	4321      	orrs	r1, r4
    79f4:	e7c6      	b.n	7984 <__aeabi_dadd+0x4b8>
    79f6:	0004      	movs	r4, r0
    79f8:	4314      	orrs	r4, r2
    79fa:	d04e      	beq.n	7a9a <__aeabi_dadd+0x5ce>
    79fc:	08ed      	lsrs	r5, r5, #3
    79fe:	074c      	lsls	r4, r1, #29
    7a00:	432c      	orrs	r4, r5
    7a02:	2580      	movs	r5, #128	; 0x80
    7a04:	08c9      	lsrs	r1, r1, #3
    7a06:	032d      	lsls	r5, r5, #12
    7a08:	4229      	tst	r1, r5
    7a0a:	d008      	beq.n	7a1e <__aeabi_dadd+0x552>
    7a0c:	08c6      	lsrs	r6, r0, #3
    7a0e:	422e      	tst	r6, r5
    7a10:	d105      	bne.n	7a1e <__aeabi_dadd+0x552>
    7a12:	08d2      	lsrs	r2, r2, #3
    7a14:	0741      	lsls	r1, r0, #29
    7a16:	4311      	orrs	r1, r2
    7a18:	000c      	movs	r4, r1
    7a1a:	469a      	mov	sl, r3
    7a1c:	0031      	movs	r1, r6
    7a1e:	0f62      	lsrs	r2, r4, #29
    7a20:	00c9      	lsls	r1, r1, #3
    7a22:	00e5      	lsls	r5, r4, #3
    7a24:	4311      	orrs	r1, r2
    7a26:	4c3d      	ldr	r4, [pc, #244]	; (7b1c <__aeabi_dadd+0x650>)
    7a28:	e579      	b.n	751e <__aeabi_dadd+0x52>
    7a2a:	0006      	movs	r6, r0
    7a2c:	4316      	orrs	r6, r2
    7a2e:	d100      	bne.n	7a32 <__aeabi_dadd+0x566>
    7a30:	e575      	b.n	751e <__aeabi_dadd+0x52>
    7a32:	1aae      	subs	r6, r5, r2
    7a34:	46b0      	mov	r8, r6
    7a36:	4545      	cmp	r5, r8
    7a38:	41bf      	sbcs	r7, r7
    7a3a:	1a0e      	subs	r6, r1, r0
    7a3c:	427f      	negs	r7, r7
    7a3e:	1bf6      	subs	r6, r6, r7
    7a40:	0237      	lsls	r7, r6, #8
    7a42:	d400      	bmi.n	7a46 <__aeabi_dadd+0x57a>
    7a44:	e5f4      	b.n	7630 <__aeabi_dadd+0x164>
    7a46:	1b55      	subs	r5, r2, r5
    7a48:	42aa      	cmp	r2, r5
    7a4a:	41b6      	sbcs	r6, r6
    7a4c:	1a41      	subs	r1, r0, r1
    7a4e:	4276      	negs	r6, r6
    7a50:	1b89      	subs	r1, r1, r6
    7a52:	469a      	mov	sl, r3
    7a54:	e563      	b.n	751e <__aeabi_dadd+0x52>
    7a56:	0001      	movs	r1, r0
    7a58:	0015      	movs	r5, r2
    7a5a:	4664      	mov	r4, ip
    7a5c:	e55f      	b.n	751e <__aeabi_dadd+0x52>
    7a5e:	2200      	movs	r2, #0
    7a60:	2500      	movs	r5, #0
    7a62:	e57b      	b.n	755c <__aeabi_dadd+0x90>
    7a64:	2b00      	cmp	r3, #0
    7a66:	d03b      	beq.n	7ae0 <__aeabi_dadd+0x614>
    7a68:	0003      	movs	r3, r0
    7a6a:	4313      	orrs	r3, r2
    7a6c:	d015      	beq.n	7a9a <__aeabi_dadd+0x5ce>
    7a6e:	08ed      	lsrs	r5, r5, #3
    7a70:	074b      	lsls	r3, r1, #29
    7a72:	432b      	orrs	r3, r5
    7a74:	2580      	movs	r5, #128	; 0x80
    7a76:	08c9      	lsrs	r1, r1, #3
    7a78:	032d      	lsls	r5, r5, #12
    7a7a:	4229      	tst	r1, r5
    7a7c:	d007      	beq.n	7a8e <__aeabi_dadd+0x5c2>
    7a7e:	08c4      	lsrs	r4, r0, #3
    7a80:	422c      	tst	r4, r5
    7a82:	d104      	bne.n	7a8e <__aeabi_dadd+0x5c2>
    7a84:	0741      	lsls	r1, r0, #29
    7a86:	000b      	movs	r3, r1
    7a88:	0021      	movs	r1, r4
    7a8a:	08d2      	lsrs	r2, r2, #3
    7a8c:	4313      	orrs	r3, r2
    7a8e:	00c9      	lsls	r1, r1, #3
    7a90:	0f5a      	lsrs	r2, r3, #29
    7a92:	4311      	orrs	r1, r2
    7a94:	00dd      	lsls	r5, r3, #3
    7a96:	4c21      	ldr	r4, [pc, #132]	; (7b1c <__aeabi_dadd+0x650>)
    7a98:	e541      	b.n	751e <__aeabi_dadd+0x52>
    7a9a:	4c20      	ldr	r4, [pc, #128]	; (7b1c <__aeabi_dadd+0x650>)
    7a9c:	e53f      	b.n	751e <__aeabi_dadd+0x52>
    7a9e:	2000      	movs	r0, #0
    7aa0:	e754      	b.n	794c <__aeabi_dadd+0x480>
    7aa2:	2600      	movs	r6, #0
    7aa4:	2500      	movs	r5, #0
    7aa6:	e5d1      	b.n	764c <__aeabi_dadd+0x180>
    7aa8:	0034      	movs	r4, r6
    7aaa:	000f      	movs	r7, r1
    7aac:	3c20      	subs	r4, #32
    7aae:	40e7      	lsrs	r7, r4
    7ab0:	003c      	movs	r4, r7
    7ab2:	2e20      	cmp	r6, #32
    7ab4:	d02b      	beq.n	7b0e <__aeabi_dadd+0x642>
    7ab6:	2740      	movs	r7, #64	; 0x40
    7ab8:	1bbe      	subs	r6, r7, r6
    7aba:	40b1      	lsls	r1, r6
    7abc:	430d      	orrs	r5, r1
    7abe:	1e69      	subs	r1, r5, #1
    7ac0:	418d      	sbcs	r5, r1
    7ac2:	2100      	movs	r1, #0
    7ac4:	432c      	orrs	r4, r5
    7ac6:	e6bc      	b.n	7842 <__aeabi_dadd+0x376>
    7ac8:	2180      	movs	r1, #128	; 0x80
    7aca:	2600      	movs	r6, #0
    7acc:	0309      	lsls	r1, r1, #12
    7ace:	4c13      	ldr	r4, [pc, #76]	; (7b1c <__aeabi_dadd+0x650>)
    7ad0:	2500      	movs	r5, #0
    7ad2:	e5bb      	b.n	764c <__aeabi_dadd+0x180>
    7ad4:	430d      	orrs	r5, r1
    7ad6:	1e69      	subs	r1, r5, #1
    7ad8:	418d      	sbcs	r5, r1
    7ada:	2100      	movs	r1, #0
    7adc:	b2ed      	uxtb	r5, r5
    7ade:	e769      	b.n	79b4 <__aeabi_dadd+0x4e8>
    7ae0:	0001      	movs	r1, r0
    7ae2:	0015      	movs	r5, r2
    7ae4:	4c0d      	ldr	r4, [pc, #52]	; (7b1c <__aeabi_dadd+0x650>)
    7ae6:	e51a      	b.n	751e <__aeabi_dadd+0x52>
    7ae8:	0001      	movs	r1, r0
    7aea:	0015      	movs	r5, r2
    7aec:	e517      	b.n	751e <__aeabi_dadd+0x52>
    7aee:	001c      	movs	r4, r3
    7af0:	000f      	movs	r7, r1
    7af2:	3c20      	subs	r4, #32
    7af4:	40e7      	lsrs	r7, r4
    7af6:	003c      	movs	r4, r7
    7af8:	2b20      	cmp	r3, #32
    7afa:	d00c      	beq.n	7b16 <__aeabi_dadd+0x64a>
    7afc:	2740      	movs	r7, #64	; 0x40
    7afe:	1afb      	subs	r3, r7, r3
    7b00:	4099      	lsls	r1, r3
    7b02:	430d      	orrs	r5, r1
    7b04:	1e69      	subs	r1, r5, #1
    7b06:	418d      	sbcs	r5, r1
    7b08:	2100      	movs	r1, #0
    7b0a:	4325      	orrs	r5, r4
    7b0c:	e752      	b.n	79b4 <__aeabi_dadd+0x4e8>
    7b0e:	2100      	movs	r1, #0
    7b10:	e7d4      	b.n	7abc <__aeabi_dadd+0x5f0>
    7b12:	001d      	movs	r5, r3
    7b14:	e592      	b.n	763c <__aeabi_dadd+0x170>
    7b16:	2100      	movs	r1, #0
    7b18:	e7f3      	b.n	7b02 <__aeabi_dadd+0x636>
    7b1a:	46c0      	nop			; (mov r8, r8)
    7b1c:	000007ff 	.word	0x000007ff
    7b20:	ff7fffff 	.word	0xff7fffff

00007b24 <__aeabi_ddiv>:
    7b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b26:	4656      	mov	r6, sl
    7b28:	464d      	mov	r5, r9
    7b2a:	4644      	mov	r4, r8
    7b2c:	465f      	mov	r7, fp
    7b2e:	b4f0      	push	{r4, r5, r6, r7}
    7b30:	001d      	movs	r5, r3
    7b32:	030e      	lsls	r6, r1, #12
    7b34:	004c      	lsls	r4, r1, #1
    7b36:	0fcb      	lsrs	r3, r1, #31
    7b38:	b087      	sub	sp, #28
    7b3a:	0007      	movs	r7, r0
    7b3c:	4692      	mov	sl, r2
    7b3e:	4681      	mov	r9, r0
    7b40:	0b36      	lsrs	r6, r6, #12
    7b42:	0d64      	lsrs	r4, r4, #21
    7b44:	4698      	mov	r8, r3
    7b46:	d06a      	beq.n	7c1e <__aeabi_ddiv+0xfa>
    7b48:	4b6d      	ldr	r3, [pc, #436]	; (7d00 <__aeabi_ddiv+0x1dc>)
    7b4a:	429c      	cmp	r4, r3
    7b4c:	d035      	beq.n	7bba <__aeabi_ddiv+0x96>
    7b4e:	2280      	movs	r2, #128	; 0x80
    7b50:	0f43      	lsrs	r3, r0, #29
    7b52:	0412      	lsls	r2, r2, #16
    7b54:	4313      	orrs	r3, r2
    7b56:	00f6      	lsls	r6, r6, #3
    7b58:	431e      	orrs	r6, r3
    7b5a:	00c3      	lsls	r3, r0, #3
    7b5c:	4699      	mov	r9, r3
    7b5e:	4b69      	ldr	r3, [pc, #420]	; (7d04 <__aeabi_ddiv+0x1e0>)
    7b60:	2700      	movs	r7, #0
    7b62:	469c      	mov	ip, r3
    7b64:	2300      	movs	r3, #0
    7b66:	4464      	add	r4, ip
    7b68:	9302      	str	r3, [sp, #8]
    7b6a:	032b      	lsls	r3, r5, #12
    7b6c:	0068      	lsls	r0, r5, #1
    7b6e:	0b1b      	lsrs	r3, r3, #12
    7b70:	0fed      	lsrs	r5, r5, #31
    7b72:	4651      	mov	r1, sl
    7b74:	469b      	mov	fp, r3
    7b76:	0d40      	lsrs	r0, r0, #21
    7b78:	9500      	str	r5, [sp, #0]
    7b7a:	d100      	bne.n	7b7e <__aeabi_ddiv+0x5a>
    7b7c:	e078      	b.n	7c70 <__aeabi_ddiv+0x14c>
    7b7e:	4b60      	ldr	r3, [pc, #384]	; (7d00 <__aeabi_ddiv+0x1dc>)
    7b80:	4298      	cmp	r0, r3
    7b82:	d06c      	beq.n	7c5e <__aeabi_ddiv+0x13a>
    7b84:	465b      	mov	r3, fp
    7b86:	00da      	lsls	r2, r3, #3
    7b88:	0f4b      	lsrs	r3, r1, #29
    7b8a:	2180      	movs	r1, #128	; 0x80
    7b8c:	0409      	lsls	r1, r1, #16
    7b8e:	430b      	orrs	r3, r1
    7b90:	4313      	orrs	r3, r2
    7b92:	469b      	mov	fp, r3
    7b94:	4653      	mov	r3, sl
    7b96:	00d9      	lsls	r1, r3, #3
    7b98:	4b5a      	ldr	r3, [pc, #360]	; (7d04 <__aeabi_ddiv+0x1e0>)
    7b9a:	469c      	mov	ip, r3
    7b9c:	2300      	movs	r3, #0
    7b9e:	4460      	add	r0, ip
    7ba0:	4642      	mov	r2, r8
    7ba2:	1a20      	subs	r0, r4, r0
    7ba4:	406a      	eors	r2, r5
    7ba6:	4692      	mov	sl, r2
    7ba8:	9001      	str	r0, [sp, #4]
    7baa:	431f      	orrs	r7, r3
    7bac:	2f0f      	cmp	r7, #15
    7bae:	d900      	bls.n	7bb2 <__aeabi_ddiv+0x8e>
    7bb0:	e0b0      	b.n	7d14 <__aeabi_ddiv+0x1f0>
    7bb2:	4855      	ldr	r0, [pc, #340]	; (7d08 <__aeabi_ddiv+0x1e4>)
    7bb4:	00bf      	lsls	r7, r7, #2
    7bb6:	59c0      	ldr	r0, [r0, r7]
    7bb8:	4687      	mov	pc, r0
    7bba:	4337      	orrs	r7, r6
    7bbc:	d000      	beq.n	7bc0 <__aeabi_ddiv+0x9c>
    7bbe:	e088      	b.n	7cd2 <__aeabi_ddiv+0x1ae>
    7bc0:	2300      	movs	r3, #0
    7bc2:	4699      	mov	r9, r3
    7bc4:	3302      	adds	r3, #2
    7bc6:	2708      	movs	r7, #8
    7bc8:	2600      	movs	r6, #0
    7bca:	9302      	str	r3, [sp, #8]
    7bcc:	e7cd      	b.n	7b6a <__aeabi_ddiv+0x46>
    7bce:	4643      	mov	r3, r8
    7bd0:	46b3      	mov	fp, r6
    7bd2:	4649      	mov	r1, r9
    7bd4:	9300      	str	r3, [sp, #0]
    7bd6:	9b02      	ldr	r3, [sp, #8]
    7bd8:	9a00      	ldr	r2, [sp, #0]
    7bda:	4692      	mov	sl, r2
    7bdc:	2b02      	cmp	r3, #2
    7bde:	d000      	beq.n	7be2 <__aeabi_ddiv+0xbe>
    7be0:	e1bf      	b.n	7f62 <__aeabi_ddiv+0x43e>
    7be2:	2100      	movs	r1, #0
    7be4:	4653      	mov	r3, sl
    7be6:	2201      	movs	r2, #1
    7be8:	2600      	movs	r6, #0
    7bea:	4689      	mov	r9, r1
    7bec:	401a      	ands	r2, r3
    7bee:	4b44      	ldr	r3, [pc, #272]	; (7d00 <__aeabi_ddiv+0x1dc>)
    7bf0:	2100      	movs	r1, #0
    7bf2:	0336      	lsls	r6, r6, #12
    7bf4:	0d0c      	lsrs	r4, r1, #20
    7bf6:	0524      	lsls	r4, r4, #20
    7bf8:	0b36      	lsrs	r6, r6, #12
    7bfa:	4326      	orrs	r6, r4
    7bfc:	4c43      	ldr	r4, [pc, #268]	; (7d0c <__aeabi_ddiv+0x1e8>)
    7bfe:	051b      	lsls	r3, r3, #20
    7c00:	4026      	ands	r6, r4
    7c02:	431e      	orrs	r6, r3
    7c04:	0076      	lsls	r6, r6, #1
    7c06:	07d2      	lsls	r2, r2, #31
    7c08:	0876      	lsrs	r6, r6, #1
    7c0a:	4316      	orrs	r6, r2
    7c0c:	4648      	mov	r0, r9
    7c0e:	0031      	movs	r1, r6
    7c10:	b007      	add	sp, #28
    7c12:	bc3c      	pop	{r2, r3, r4, r5}
    7c14:	4690      	mov	r8, r2
    7c16:	4699      	mov	r9, r3
    7c18:	46a2      	mov	sl, r4
    7c1a:	46ab      	mov	fp, r5
    7c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c1e:	0033      	movs	r3, r6
    7c20:	4303      	orrs	r3, r0
    7c22:	d04f      	beq.n	7cc4 <__aeabi_ddiv+0x1a0>
    7c24:	2e00      	cmp	r6, #0
    7c26:	d100      	bne.n	7c2a <__aeabi_ddiv+0x106>
    7c28:	e1bc      	b.n	7fa4 <__aeabi_ddiv+0x480>
    7c2a:	0030      	movs	r0, r6
    7c2c:	f001 f8cc 	bl	8dc8 <__clzsi2>
    7c30:	0003      	movs	r3, r0
    7c32:	3b0b      	subs	r3, #11
    7c34:	2b1c      	cmp	r3, #28
    7c36:	dd00      	ble.n	7c3a <__aeabi_ddiv+0x116>
    7c38:	e1ad      	b.n	7f96 <__aeabi_ddiv+0x472>
    7c3a:	221d      	movs	r2, #29
    7c3c:	0001      	movs	r1, r0
    7c3e:	1ad3      	subs	r3, r2, r3
    7c40:	3908      	subs	r1, #8
    7c42:	003a      	movs	r2, r7
    7c44:	408f      	lsls	r7, r1
    7c46:	408e      	lsls	r6, r1
    7c48:	40da      	lsrs	r2, r3
    7c4a:	46b9      	mov	r9, r7
    7c4c:	4316      	orrs	r6, r2
    7c4e:	4b30      	ldr	r3, [pc, #192]	; (7d10 <__aeabi_ddiv+0x1ec>)
    7c50:	2700      	movs	r7, #0
    7c52:	469c      	mov	ip, r3
    7c54:	2300      	movs	r3, #0
    7c56:	4460      	add	r0, ip
    7c58:	4244      	negs	r4, r0
    7c5a:	9302      	str	r3, [sp, #8]
    7c5c:	e785      	b.n	7b6a <__aeabi_ddiv+0x46>
    7c5e:	4653      	mov	r3, sl
    7c60:	465a      	mov	r2, fp
    7c62:	4313      	orrs	r3, r2
    7c64:	d12c      	bne.n	7cc0 <__aeabi_ddiv+0x19c>
    7c66:	2300      	movs	r3, #0
    7c68:	2100      	movs	r1, #0
    7c6a:	469b      	mov	fp, r3
    7c6c:	3302      	adds	r3, #2
    7c6e:	e797      	b.n	7ba0 <__aeabi_ddiv+0x7c>
    7c70:	430b      	orrs	r3, r1
    7c72:	d020      	beq.n	7cb6 <__aeabi_ddiv+0x192>
    7c74:	465b      	mov	r3, fp
    7c76:	2b00      	cmp	r3, #0
    7c78:	d100      	bne.n	7c7c <__aeabi_ddiv+0x158>
    7c7a:	e19e      	b.n	7fba <__aeabi_ddiv+0x496>
    7c7c:	4658      	mov	r0, fp
    7c7e:	f001 f8a3 	bl	8dc8 <__clzsi2>
    7c82:	0003      	movs	r3, r0
    7c84:	3b0b      	subs	r3, #11
    7c86:	2b1c      	cmp	r3, #28
    7c88:	dd00      	ble.n	7c8c <__aeabi_ddiv+0x168>
    7c8a:	e18f      	b.n	7fac <__aeabi_ddiv+0x488>
    7c8c:	0002      	movs	r2, r0
    7c8e:	4659      	mov	r1, fp
    7c90:	3a08      	subs	r2, #8
    7c92:	4091      	lsls	r1, r2
    7c94:	468b      	mov	fp, r1
    7c96:	211d      	movs	r1, #29
    7c98:	1acb      	subs	r3, r1, r3
    7c9a:	4651      	mov	r1, sl
    7c9c:	40d9      	lsrs	r1, r3
    7c9e:	000b      	movs	r3, r1
    7ca0:	4659      	mov	r1, fp
    7ca2:	430b      	orrs	r3, r1
    7ca4:	4651      	mov	r1, sl
    7ca6:	469b      	mov	fp, r3
    7ca8:	4091      	lsls	r1, r2
    7caa:	4b19      	ldr	r3, [pc, #100]	; (7d10 <__aeabi_ddiv+0x1ec>)
    7cac:	469c      	mov	ip, r3
    7cae:	4460      	add	r0, ip
    7cb0:	4240      	negs	r0, r0
    7cb2:	2300      	movs	r3, #0
    7cb4:	e774      	b.n	7ba0 <__aeabi_ddiv+0x7c>
    7cb6:	2300      	movs	r3, #0
    7cb8:	2100      	movs	r1, #0
    7cba:	469b      	mov	fp, r3
    7cbc:	3301      	adds	r3, #1
    7cbe:	e76f      	b.n	7ba0 <__aeabi_ddiv+0x7c>
    7cc0:	2303      	movs	r3, #3
    7cc2:	e76d      	b.n	7ba0 <__aeabi_ddiv+0x7c>
    7cc4:	2300      	movs	r3, #0
    7cc6:	4699      	mov	r9, r3
    7cc8:	3301      	adds	r3, #1
    7cca:	2704      	movs	r7, #4
    7ccc:	2600      	movs	r6, #0
    7cce:	9302      	str	r3, [sp, #8]
    7cd0:	e74b      	b.n	7b6a <__aeabi_ddiv+0x46>
    7cd2:	2303      	movs	r3, #3
    7cd4:	270c      	movs	r7, #12
    7cd6:	9302      	str	r3, [sp, #8]
    7cd8:	e747      	b.n	7b6a <__aeabi_ddiv+0x46>
    7cda:	2201      	movs	r2, #1
    7cdc:	1ad5      	subs	r5, r2, r3
    7cde:	2d38      	cmp	r5, #56	; 0x38
    7ce0:	dc00      	bgt.n	7ce4 <__aeabi_ddiv+0x1c0>
    7ce2:	e1b0      	b.n	8046 <__aeabi_ddiv+0x522>
    7ce4:	4653      	mov	r3, sl
    7ce6:	401a      	ands	r2, r3
    7ce8:	2100      	movs	r1, #0
    7cea:	2300      	movs	r3, #0
    7cec:	2600      	movs	r6, #0
    7cee:	4689      	mov	r9, r1
    7cf0:	e77e      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    7cf2:	2300      	movs	r3, #0
    7cf4:	2680      	movs	r6, #128	; 0x80
    7cf6:	4699      	mov	r9, r3
    7cf8:	2200      	movs	r2, #0
    7cfa:	0336      	lsls	r6, r6, #12
    7cfc:	4b00      	ldr	r3, [pc, #0]	; (7d00 <__aeabi_ddiv+0x1dc>)
    7cfe:	e777      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    7d00:	000007ff 	.word	0x000007ff
    7d04:	fffffc01 	.word	0xfffffc01
    7d08:	00008f64 	.word	0x00008f64
    7d0c:	800fffff 	.word	0x800fffff
    7d10:	000003f3 	.word	0x000003f3
    7d14:	455e      	cmp	r6, fp
    7d16:	d900      	bls.n	7d1a <__aeabi_ddiv+0x1f6>
    7d18:	e172      	b.n	8000 <__aeabi_ddiv+0x4dc>
    7d1a:	d100      	bne.n	7d1e <__aeabi_ddiv+0x1fa>
    7d1c:	e16d      	b.n	7ffa <__aeabi_ddiv+0x4d6>
    7d1e:	9b01      	ldr	r3, [sp, #4]
    7d20:	464d      	mov	r5, r9
    7d22:	3b01      	subs	r3, #1
    7d24:	9301      	str	r3, [sp, #4]
    7d26:	2300      	movs	r3, #0
    7d28:	0034      	movs	r4, r6
    7d2a:	9302      	str	r3, [sp, #8]
    7d2c:	465b      	mov	r3, fp
    7d2e:	021e      	lsls	r6, r3, #8
    7d30:	0e0b      	lsrs	r3, r1, #24
    7d32:	431e      	orrs	r6, r3
    7d34:	020b      	lsls	r3, r1, #8
    7d36:	9303      	str	r3, [sp, #12]
    7d38:	0c33      	lsrs	r3, r6, #16
    7d3a:	4699      	mov	r9, r3
    7d3c:	0433      	lsls	r3, r6, #16
    7d3e:	0c1b      	lsrs	r3, r3, #16
    7d40:	4649      	mov	r1, r9
    7d42:	0020      	movs	r0, r4
    7d44:	9300      	str	r3, [sp, #0]
    7d46:	f7ff fb35 	bl	73b4 <__aeabi_uidiv>
    7d4a:	9b00      	ldr	r3, [sp, #0]
    7d4c:	0037      	movs	r7, r6
    7d4e:	4343      	muls	r3, r0
    7d50:	0006      	movs	r6, r0
    7d52:	4649      	mov	r1, r9
    7d54:	0020      	movs	r0, r4
    7d56:	4698      	mov	r8, r3
    7d58:	f7ff fbb2 	bl	74c0 <__aeabi_uidivmod>
    7d5c:	0c2c      	lsrs	r4, r5, #16
    7d5e:	0409      	lsls	r1, r1, #16
    7d60:	430c      	orrs	r4, r1
    7d62:	45a0      	cmp	r8, r4
    7d64:	d909      	bls.n	7d7a <__aeabi_ddiv+0x256>
    7d66:	19e4      	adds	r4, r4, r7
    7d68:	1e73      	subs	r3, r6, #1
    7d6a:	42a7      	cmp	r7, r4
    7d6c:	d900      	bls.n	7d70 <__aeabi_ddiv+0x24c>
    7d6e:	e15c      	b.n	802a <__aeabi_ddiv+0x506>
    7d70:	45a0      	cmp	r8, r4
    7d72:	d800      	bhi.n	7d76 <__aeabi_ddiv+0x252>
    7d74:	e159      	b.n	802a <__aeabi_ddiv+0x506>
    7d76:	3e02      	subs	r6, #2
    7d78:	19e4      	adds	r4, r4, r7
    7d7a:	4643      	mov	r3, r8
    7d7c:	1ae4      	subs	r4, r4, r3
    7d7e:	4649      	mov	r1, r9
    7d80:	0020      	movs	r0, r4
    7d82:	f7ff fb17 	bl	73b4 <__aeabi_uidiv>
    7d86:	0003      	movs	r3, r0
    7d88:	9a00      	ldr	r2, [sp, #0]
    7d8a:	4680      	mov	r8, r0
    7d8c:	4353      	muls	r3, r2
    7d8e:	4649      	mov	r1, r9
    7d90:	0020      	movs	r0, r4
    7d92:	469b      	mov	fp, r3
    7d94:	f7ff fb94 	bl	74c0 <__aeabi_uidivmod>
    7d98:	042a      	lsls	r2, r5, #16
    7d9a:	0409      	lsls	r1, r1, #16
    7d9c:	0c12      	lsrs	r2, r2, #16
    7d9e:	430a      	orrs	r2, r1
    7da0:	4593      	cmp	fp, r2
    7da2:	d90d      	bls.n	7dc0 <__aeabi_ddiv+0x29c>
    7da4:	4643      	mov	r3, r8
    7da6:	19d2      	adds	r2, r2, r7
    7da8:	3b01      	subs	r3, #1
    7daa:	4297      	cmp	r7, r2
    7dac:	d900      	bls.n	7db0 <__aeabi_ddiv+0x28c>
    7dae:	e13a      	b.n	8026 <__aeabi_ddiv+0x502>
    7db0:	4593      	cmp	fp, r2
    7db2:	d800      	bhi.n	7db6 <__aeabi_ddiv+0x292>
    7db4:	e137      	b.n	8026 <__aeabi_ddiv+0x502>
    7db6:	2302      	movs	r3, #2
    7db8:	425b      	negs	r3, r3
    7dba:	469c      	mov	ip, r3
    7dbc:	19d2      	adds	r2, r2, r7
    7dbe:	44e0      	add	r8, ip
    7dc0:	465b      	mov	r3, fp
    7dc2:	1ad2      	subs	r2, r2, r3
    7dc4:	4643      	mov	r3, r8
    7dc6:	0436      	lsls	r6, r6, #16
    7dc8:	4333      	orrs	r3, r6
    7dca:	469b      	mov	fp, r3
    7dcc:	9903      	ldr	r1, [sp, #12]
    7dce:	0c18      	lsrs	r0, r3, #16
    7dd0:	0c0b      	lsrs	r3, r1, #16
    7dd2:	001d      	movs	r5, r3
    7dd4:	9305      	str	r3, [sp, #20]
    7dd6:	0409      	lsls	r1, r1, #16
    7dd8:	465b      	mov	r3, fp
    7dda:	0c09      	lsrs	r1, r1, #16
    7ddc:	000c      	movs	r4, r1
    7dde:	041b      	lsls	r3, r3, #16
    7de0:	0c1b      	lsrs	r3, r3, #16
    7de2:	4344      	muls	r4, r0
    7de4:	9104      	str	r1, [sp, #16]
    7de6:	4359      	muls	r1, r3
    7de8:	436b      	muls	r3, r5
    7dea:	4368      	muls	r0, r5
    7dec:	191b      	adds	r3, r3, r4
    7dee:	0c0d      	lsrs	r5, r1, #16
    7df0:	18eb      	adds	r3, r5, r3
    7df2:	429c      	cmp	r4, r3
    7df4:	d903      	bls.n	7dfe <__aeabi_ddiv+0x2da>
    7df6:	2480      	movs	r4, #128	; 0x80
    7df8:	0264      	lsls	r4, r4, #9
    7dfa:	46a4      	mov	ip, r4
    7dfc:	4460      	add	r0, ip
    7dfe:	0c1c      	lsrs	r4, r3, #16
    7e00:	0409      	lsls	r1, r1, #16
    7e02:	041b      	lsls	r3, r3, #16
    7e04:	0c09      	lsrs	r1, r1, #16
    7e06:	1820      	adds	r0, r4, r0
    7e08:	185d      	adds	r5, r3, r1
    7e0a:	4282      	cmp	r2, r0
    7e0c:	d200      	bcs.n	7e10 <__aeabi_ddiv+0x2ec>
    7e0e:	e0de      	b.n	7fce <__aeabi_ddiv+0x4aa>
    7e10:	d100      	bne.n	7e14 <__aeabi_ddiv+0x2f0>
    7e12:	e0d7      	b.n	7fc4 <__aeabi_ddiv+0x4a0>
    7e14:	1a16      	subs	r6, r2, r0
    7e16:	9b02      	ldr	r3, [sp, #8]
    7e18:	469c      	mov	ip, r3
    7e1a:	1b5d      	subs	r5, r3, r5
    7e1c:	45ac      	cmp	ip, r5
    7e1e:	419b      	sbcs	r3, r3
    7e20:	425b      	negs	r3, r3
    7e22:	1af6      	subs	r6, r6, r3
    7e24:	42b7      	cmp	r7, r6
    7e26:	d100      	bne.n	7e2a <__aeabi_ddiv+0x306>
    7e28:	e106      	b.n	8038 <__aeabi_ddiv+0x514>
    7e2a:	4649      	mov	r1, r9
    7e2c:	0030      	movs	r0, r6
    7e2e:	f7ff fac1 	bl	73b4 <__aeabi_uidiv>
    7e32:	9b00      	ldr	r3, [sp, #0]
    7e34:	0004      	movs	r4, r0
    7e36:	4343      	muls	r3, r0
    7e38:	4649      	mov	r1, r9
    7e3a:	0030      	movs	r0, r6
    7e3c:	4698      	mov	r8, r3
    7e3e:	f7ff fb3f 	bl	74c0 <__aeabi_uidivmod>
    7e42:	0c2e      	lsrs	r6, r5, #16
    7e44:	0409      	lsls	r1, r1, #16
    7e46:	430e      	orrs	r6, r1
    7e48:	45b0      	cmp	r8, r6
    7e4a:	d909      	bls.n	7e60 <__aeabi_ddiv+0x33c>
    7e4c:	19f6      	adds	r6, r6, r7
    7e4e:	1e63      	subs	r3, r4, #1
    7e50:	42b7      	cmp	r7, r6
    7e52:	d900      	bls.n	7e56 <__aeabi_ddiv+0x332>
    7e54:	e0f3      	b.n	803e <__aeabi_ddiv+0x51a>
    7e56:	45b0      	cmp	r8, r6
    7e58:	d800      	bhi.n	7e5c <__aeabi_ddiv+0x338>
    7e5a:	e0f0      	b.n	803e <__aeabi_ddiv+0x51a>
    7e5c:	3c02      	subs	r4, #2
    7e5e:	19f6      	adds	r6, r6, r7
    7e60:	4643      	mov	r3, r8
    7e62:	1af3      	subs	r3, r6, r3
    7e64:	4649      	mov	r1, r9
    7e66:	0018      	movs	r0, r3
    7e68:	9302      	str	r3, [sp, #8]
    7e6a:	f7ff faa3 	bl	73b4 <__aeabi_uidiv>
    7e6e:	9b00      	ldr	r3, [sp, #0]
    7e70:	0006      	movs	r6, r0
    7e72:	4343      	muls	r3, r0
    7e74:	4649      	mov	r1, r9
    7e76:	9802      	ldr	r0, [sp, #8]
    7e78:	4698      	mov	r8, r3
    7e7a:	f7ff fb21 	bl	74c0 <__aeabi_uidivmod>
    7e7e:	042d      	lsls	r5, r5, #16
    7e80:	0409      	lsls	r1, r1, #16
    7e82:	0c2d      	lsrs	r5, r5, #16
    7e84:	430d      	orrs	r5, r1
    7e86:	45a8      	cmp	r8, r5
    7e88:	d909      	bls.n	7e9e <__aeabi_ddiv+0x37a>
    7e8a:	19ed      	adds	r5, r5, r7
    7e8c:	1e73      	subs	r3, r6, #1
    7e8e:	42af      	cmp	r7, r5
    7e90:	d900      	bls.n	7e94 <__aeabi_ddiv+0x370>
    7e92:	e0d6      	b.n	8042 <__aeabi_ddiv+0x51e>
    7e94:	45a8      	cmp	r8, r5
    7e96:	d800      	bhi.n	7e9a <__aeabi_ddiv+0x376>
    7e98:	e0d3      	b.n	8042 <__aeabi_ddiv+0x51e>
    7e9a:	3e02      	subs	r6, #2
    7e9c:	19ed      	adds	r5, r5, r7
    7e9e:	0424      	lsls	r4, r4, #16
    7ea0:	0021      	movs	r1, r4
    7ea2:	4643      	mov	r3, r8
    7ea4:	4331      	orrs	r1, r6
    7ea6:	9e04      	ldr	r6, [sp, #16]
    7ea8:	9a05      	ldr	r2, [sp, #20]
    7eaa:	0030      	movs	r0, r6
    7eac:	1aed      	subs	r5, r5, r3
    7eae:	040b      	lsls	r3, r1, #16
    7eb0:	0c0c      	lsrs	r4, r1, #16
    7eb2:	0c1b      	lsrs	r3, r3, #16
    7eb4:	4358      	muls	r0, r3
    7eb6:	4366      	muls	r6, r4
    7eb8:	4353      	muls	r3, r2
    7eba:	4354      	muls	r4, r2
    7ebc:	199a      	adds	r2, r3, r6
    7ebe:	0c03      	lsrs	r3, r0, #16
    7ec0:	189b      	adds	r3, r3, r2
    7ec2:	429e      	cmp	r6, r3
    7ec4:	d903      	bls.n	7ece <__aeabi_ddiv+0x3aa>
    7ec6:	2280      	movs	r2, #128	; 0x80
    7ec8:	0252      	lsls	r2, r2, #9
    7eca:	4694      	mov	ip, r2
    7ecc:	4464      	add	r4, ip
    7ece:	0c1a      	lsrs	r2, r3, #16
    7ed0:	0400      	lsls	r0, r0, #16
    7ed2:	041b      	lsls	r3, r3, #16
    7ed4:	0c00      	lsrs	r0, r0, #16
    7ed6:	1914      	adds	r4, r2, r4
    7ed8:	181b      	adds	r3, r3, r0
    7eda:	42a5      	cmp	r5, r4
    7edc:	d350      	bcc.n	7f80 <__aeabi_ddiv+0x45c>
    7ede:	d04d      	beq.n	7f7c <__aeabi_ddiv+0x458>
    7ee0:	2301      	movs	r3, #1
    7ee2:	4319      	orrs	r1, r3
    7ee4:	4a96      	ldr	r2, [pc, #600]	; (8140 <__aeabi_ddiv+0x61c>)
    7ee6:	9b01      	ldr	r3, [sp, #4]
    7ee8:	4694      	mov	ip, r2
    7eea:	4463      	add	r3, ip
    7eec:	2b00      	cmp	r3, #0
    7eee:	dc00      	bgt.n	7ef2 <__aeabi_ddiv+0x3ce>
    7ef0:	e6f3      	b.n	7cda <__aeabi_ddiv+0x1b6>
    7ef2:	074a      	lsls	r2, r1, #29
    7ef4:	d009      	beq.n	7f0a <__aeabi_ddiv+0x3e6>
    7ef6:	220f      	movs	r2, #15
    7ef8:	400a      	ands	r2, r1
    7efa:	2a04      	cmp	r2, #4
    7efc:	d005      	beq.n	7f0a <__aeabi_ddiv+0x3e6>
    7efe:	1d0a      	adds	r2, r1, #4
    7f00:	428a      	cmp	r2, r1
    7f02:	4189      	sbcs	r1, r1
    7f04:	4249      	negs	r1, r1
    7f06:	448b      	add	fp, r1
    7f08:	0011      	movs	r1, r2
    7f0a:	465a      	mov	r2, fp
    7f0c:	01d2      	lsls	r2, r2, #7
    7f0e:	d508      	bpl.n	7f22 <__aeabi_ddiv+0x3fe>
    7f10:	465a      	mov	r2, fp
    7f12:	4b8c      	ldr	r3, [pc, #560]	; (8144 <__aeabi_ddiv+0x620>)
    7f14:	401a      	ands	r2, r3
    7f16:	4693      	mov	fp, r2
    7f18:	2280      	movs	r2, #128	; 0x80
    7f1a:	00d2      	lsls	r2, r2, #3
    7f1c:	4694      	mov	ip, r2
    7f1e:	9b01      	ldr	r3, [sp, #4]
    7f20:	4463      	add	r3, ip
    7f22:	4a89      	ldr	r2, [pc, #548]	; (8148 <__aeabi_ddiv+0x624>)
    7f24:	4293      	cmp	r3, r2
    7f26:	dd00      	ble.n	7f2a <__aeabi_ddiv+0x406>
    7f28:	e65b      	b.n	7be2 <__aeabi_ddiv+0xbe>
    7f2a:	465a      	mov	r2, fp
    7f2c:	08c9      	lsrs	r1, r1, #3
    7f2e:	0750      	lsls	r0, r2, #29
    7f30:	4308      	orrs	r0, r1
    7f32:	0256      	lsls	r6, r2, #9
    7f34:	4651      	mov	r1, sl
    7f36:	2201      	movs	r2, #1
    7f38:	055b      	lsls	r3, r3, #21
    7f3a:	4681      	mov	r9, r0
    7f3c:	0b36      	lsrs	r6, r6, #12
    7f3e:	0d5b      	lsrs	r3, r3, #21
    7f40:	400a      	ands	r2, r1
    7f42:	e655      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    7f44:	2380      	movs	r3, #128	; 0x80
    7f46:	031b      	lsls	r3, r3, #12
    7f48:	421e      	tst	r6, r3
    7f4a:	d011      	beq.n	7f70 <__aeabi_ddiv+0x44c>
    7f4c:	465a      	mov	r2, fp
    7f4e:	421a      	tst	r2, r3
    7f50:	d10e      	bne.n	7f70 <__aeabi_ddiv+0x44c>
    7f52:	465e      	mov	r6, fp
    7f54:	431e      	orrs	r6, r3
    7f56:	0336      	lsls	r6, r6, #12
    7f58:	0b36      	lsrs	r6, r6, #12
    7f5a:	002a      	movs	r2, r5
    7f5c:	4689      	mov	r9, r1
    7f5e:	4b7b      	ldr	r3, [pc, #492]	; (814c <__aeabi_ddiv+0x628>)
    7f60:	e646      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    7f62:	2b03      	cmp	r3, #3
    7f64:	d100      	bne.n	7f68 <__aeabi_ddiv+0x444>
    7f66:	e0e1      	b.n	812c <__aeabi_ddiv+0x608>
    7f68:	2b01      	cmp	r3, #1
    7f6a:	d1bb      	bne.n	7ee4 <__aeabi_ddiv+0x3c0>
    7f6c:	401a      	ands	r2, r3
    7f6e:	e6bb      	b.n	7ce8 <__aeabi_ddiv+0x1c4>
    7f70:	431e      	orrs	r6, r3
    7f72:	0336      	lsls	r6, r6, #12
    7f74:	0b36      	lsrs	r6, r6, #12
    7f76:	4642      	mov	r2, r8
    7f78:	4b74      	ldr	r3, [pc, #464]	; (814c <__aeabi_ddiv+0x628>)
    7f7a:	e639      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	d0b1      	beq.n	7ee4 <__aeabi_ddiv+0x3c0>
    7f80:	197d      	adds	r5, r7, r5
    7f82:	1e4a      	subs	r2, r1, #1
    7f84:	42af      	cmp	r7, r5
    7f86:	d952      	bls.n	802e <__aeabi_ddiv+0x50a>
    7f88:	0011      	movs	r1, r2
    7f8a:	42a5      	cmp	r5, r4
    7f8c:	d1a8      	bne.n	7ee0 <__aeabi_ddiv+0x3bc>
    7f8e:	9a03      	ldr	r2, [sp, #12]
    7f90:	429a      	cmp	r2, r3
    7f92:	d1a5      	bne.n	7ee0 <__aeabi_ddiv+0x3bc>
    7f94:	e7a6      	b.n	7ee4 <__aeabi_ddiv+0x3c0>
    7f96:	0003      	movs	r3, r0
    7f98:	003e      	movs	r6, r7
    7f9a:	3b28      	subs	r3, #40	; 0x28
    7f9c:	409e      	lsls	r6, r3
    7f9e:	2300      	movs	r3, #0
    7fa0:	4699      	mov	r9, r3
    7fa2:	e654      	b.n	7c4e <__aeabi_ddiv+0x12a>
    7fa4:	f000 ff10 	bl	8dc8 <__clzsi2>
    7fa8:	3020      	adds	r0, #32
    7faa:	e641      	b.n	7c30 <__aeabi_ddiv+0x10c>
    7fac:	0003      	movs	r3, r0
    7fae:	4652      	mov	r2, sl
    7fb0:	3b28      	subs	r3, #40	; 0x28
    7fb2:	409a      	lsls	r2, r3
    7fb4:	2100      	movs	r1, #0
    7fb6:	4693      	mov	fp, r2
    7fb8:	e677      	b.n	7caa <__aeabi_ddiv+0x186>
    7fba:	4650      	mov	r0, sl
    7fbc:	f000 ff04 	bl	8dc8 <__clzsi2>
    7fc0:	3020      	adds	r0, #32
    7fc2:	e65e      	b.n	7c82 <__aeabi_ddiv+0x15e>
    7fc4:	9b02      	ldr	r3, [sp, #8]
    7fc6:	2600      	movs	r6, #0
    7fc8:	42ab      	cmp	r3, r5
    7fca:	d300      	bcc.n	7fce <__aeabi_ddiv+0x4aa>
    7fcc:	e723      	b.n	7e16 <__aeabi_ddiv+0x2f2>
    7fce:	9e03      	ldr	r6, [sp, #12]
    7fd0:	9902      	ldr	r1, [sp, #8]
    7fd2:	46b4      	mov	ip, r6
    7fd4:	4461      	add	r1, ip
    7fd6:	4688      	mov	r8, r1
    7fd8:	45b0      	cmp	r8, r6
    7fda:	41b6      	sbcs	r6, r6
    7fdc:	465b      	mov	r3, fp
    7fde:	4276      	negs	r6, r6
    7fe0:	19f6      	adds	r6, r6, r7
    7fe2:	18b2      	adds	r2, r6, r2
    7fe4:	3b01      	subs	r3, #1
    7fe6:	9102      	str	r1, [sp, #8]
    7fe8:	4297      	cmp	r7, r2
    7fea:	d213      	bcs.n	8014 <__aeabi_ddiv+0x4f0>
    7fec:	4290      	cmp	r0, r2
    7fee:	d84f      	bhi.n	8090 <__aeabi_ddiv+0x56c>
    7ff0:	d100      	bne.n	7ff4 <__aeabi_ddiv+0x4d0>
    7ff2:	e08e      	b.n	8112 <__aeabi_ddiv+0x5ee>
    7ff4:	1a16      	subs	r6, r2, r0
    7ff6:	469b      	mov	fp, r3
    7ff8:	e70d      	b.n	7e16 <__aeabi_ddiv+0x2f2>
    7ffa:	4589      	cmp	r9, r1
    7ffc:	d200      	bcs.n	8000 <__aeabi_ddiv+0x4dc>
    7ffe:	e68e      	b.n	7d1e <__aeabi_ddiv+0x1fa>
    8000:	0874      	lsrs	r4, r6, #1
    8002:	464b      	mov	r3, r9
    8004:	07f6      	lsls	r6, r6, #31
    8006:	0035      	movs	r5, r6
    8008:	085b      	lsrs	r3, r3, #1
    800a:	431d      	orrs	r5, r3
    800c:	464b      	mov	r3, r9
    800e:	07db      	lsls	r3, r3, #31
    8010:	9302      	str	r3, [sp, #8]
    8012:	e68b      	b.n	7d2c <__aeabi_ddiv+0x208>
    8014:	4297      	cmp	r7, r2
    8016:	d1ed      	bne.n	7ff4 <__aeabi_ddiv+0x4d0>
    8018:	9903      	ldr	r1, [sp, #12]
    801a:	9c02      	ldr	r4, [sp, #8]
    801c:	42a1      	cmp	r1, r4
    801e:	d9e5      	bls.n	7fec <__aeabi_ddiv+0x4c8>
    8020:	1a3e      	subs	r6, r7, r0
    8022:	469b      	mov	fp, r3
    8024:	e6f7      	b.n	7e16 <__aeabi_ddiv+0x2f2>
    8026:	4698      	mov	r8, r3
    8028:	e6ca      	b.n	7dc0 <__aeabi_ddiv+0x29c>
    802a:	001e      	movs	r6, r3
    802c:	e6a5      	b.n	7d7a <__aeabi_ddiv+0x256>
    802e:	42ac      	cmp	r4, r5
    8030:	d83e      	bhi.n	80b0 <__aeabi_ddiv+0x58c>
    8032:	d074      	beq.n	811e <__aeabi_ddiv+0x5fa>
    8034:	0011      	movs	r1, r2
    8036:	e753      	b.n	7ee0 <__aeabi_ddiv+0x3bc>
    8038:	2101      	movs	r1, #1
    803a:	4249      	negs	r1, r1
    803c:	e752      	b.n	7ee4 <__aeabi_ddiv+0x3c0>
    803e:	001c      	movs	r4, r3
    8040:	e70e      	b.n	7e60 <__aeabi_ddiv+0x33c>
    8042:	001e      	movs	r6, r3
    8044:	e72b      	b.n	7e9e <__aeabi_ddiv+0x37a>
    8046:	2d1f      	cmp	r5, #31
    8048:	dc3c      	bgt.n	80c4 <__aeabi_ddiv+0x5a0>
    804a:	2320      	movs	r3, #32
    804c:	000a      	movs	r2, r1
    804e:	4658      	mov	r0, fp
    8050:	1b5b      	subs	r3, r3, r5
    8052:	4098      	lsls	r0, r3
    8054:	40ea      	lsrs	r2, r5
    8056:	4099      	lsls	r1, r3
    8058:	4302      	orrs	r2, r0
    805a:	1e48      	subs	r0, r1, #1
    805c:	4181      	sbcs	r1, r0
    805e:	465e      	mov	r6, fp
    8060:	4311      	orrs	r1, r2
    8062:	40ee      	lsrs	r6, r5
    8064:	074b      	lsls	r3, r1, #29
    8066:	d009      	beq.n	807c <__aeabi_ddiv+0x558>
    8068:	230f      	movs	r3, #15
    806a:	400b      	ands	r3, r1
    806c:	2b04      	cmp	r3, #4
    806e:	d005      	beq.n	807c <__aeabi_ddiv+0x558>
    8070:	000b      	movs	r3, r1
    8072:	1d19      	adds	r1, r3, #4
    8074:	4299      	cmp	r1, r3
    8076:	419b      	sbcs	r3, r3
    8078:	425b      	negs	r3, r3
    807a:	18f6      	adds	r6, r6, r3
    807c:	0233      	lsls	r3, r6, #8
    807e:	d53c      	bpl.n	80fa <__aeabi_ddiv+0x5d6>
    8080:	4653      	mov	r3, sl
    8082:	2201      	movs	r2, #1
    8084:	2100      	movs	r1, #0
    8086:	401a      	ands	r2, r3
    8088:	2600      	movs	r6, #0
    808a:	2301      	movs	r3, #1
    808c:	4689      	mov	r9, r1
    808e:	e5af      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    8090:	2302      	movs	r3, #2
    8092:	425b      	negs	r3, r3
    8094:	469c      	mov	ip, r3
    8096:	9c03      	ldr	r4, [sp, #12]
    8098:	44e3      	add	fp, ip
    809a:	46a4      	mov	ip, r4
    809c:	9b02      	ldr	r3, [sp, #8]
    809e:	4463      	add	r3, ip
    80a0:	4698      	mov	r8, r3
    80a2:	45a0      	cmp	r8, r4
    80a4:	41b6      	sbcs	r6, r6
    80a6:	4276      	negs	r6, r6
    80a8:	19f6      	adds	r6, r6, r7
    80aa:	9302      	str	r3, [sp, #8]
    80ac:	18b2      	adds	r2, r6, r2
    80ae:	e6b1      	b.n	7e14 <__aeabi_ddiv+0x2f0>
    80b0:	9803      	ldr	r0, [sp, #12]
    80b2:	1e8a      	subs	r2, r1, #2
    80b4:	0041      	lsls	r1, r0, #1
    80b6:	4281      	cmp	r1, r0
    80b8:	41b6      	sbcs	r6, r6
    80ba:	4276      	negs	r6, r6
    80bc:	19f6      	adds	r6, r6, r7
    80be:	19ad      	adds	r5, r5, r6
    80c0:	9103      	str	r1, [sp, #12]
    80c2:	e761      	b.n	7f88 <__aeabi_ddiv+0x464>
    80c4:	221f      	movs	r2, #31
    80c6:	4252      	negs	r2, r2
    80c8:	1ad3      	subs	r3, r2, r3
    80ca:	465a      	mov	r2, fp
    80cc:	40da      	lsrs	r2, r3
    80ce:	0013      	movs	r3, r2
    80d0:	2d20      	cmp	r5, #32
    80d2:	d029      	beq.n	8128 <__aeabi_ddiv+0x604>
    80d4:	2240      	movs	r2, #64	; 0x40
    80d6:	4658      	mov	r0, fp
    80d8:	1b55      	subs	r5, r2, r5
    80da:	40a8      	lsls	r0, r5
    80dc:	4301      	orrs	r1, r0
    80de:	1e48      	subs	r0, r1, #1
    80e0:	4181      	sbcs	r1, r0
    80e2:	2007      	movs	r0, #7
    80e4:	430b      	orrs	r3, r1
    80e6:	4018      	ands	r0, r3
    80e8:	2600      	movs	r6, #0
    80ea:	2800      	cmp	r0, #0
    80ec:	d009      	beq.n	8102 <__aeabi_ddiv+0x5de>
    80ee:	220f      	movs	r2, #15
    80f0:	2600      	movs	r6, #0
    80f2:	401a      	ands	r2, r3
    80f4:	0019      	movs	r1, r3
    80f6:	2a04      	cmp	r2, #4
    80f8:	d1bb      	bne.n	8072 <__aeabi_ddiv+0x54e>
    80fa:	000b      	movs	r3, r1
    80fc:	0770      	lsls	r0, r6, #29
    80fe:	0276      	lsls	r6, r6, #9
    8100:	0b36      	lsrs	r6, r6, #12
    8102:	08db      	lsrs	r3, r3, #3
    8104:	4303      	orrs	r3, r0
    8106:	4699      	mov	r9, r3
    8108:	2201      	movs	r2, #1
    810a:	4653      	mov	r3, sl
    810c:	401a      	ands	r2, r3
    810e:	2300      	movs	r3, #0
    8110:	e56e      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    8112:	9902      	ldr	r1, [sp, #8]
    8114:	428d      	cmp	r5, r1
    8116:	d8bb      	bhi.n	8090 <__aeabi_ddiv+0x56c>
    8118:	469b      	mov	fp, r3
    811a:	2600      	movs	r6, #0
    811c:	e67b      	b.n	7e16 <__aeabi_ddiv+0x2f2>
    811e:	9803      	ldr	r0, [sp, #12]
    8120:	4298      	cmp	r0, r3
    8122:	d3c5      	bcc.n	80b0 <__aeabi_ddiv+0x58c>
    8124:	0011      	movs	r1, r2
    8126:	e732      	b.n	7f8e <__aeabi_ddiv+0x46a>
    8128:	2000      	movs	r0, #0
    812a:	e7d7      	b.n	80dc <__aeabi_ddiv+0x5b8>
    812c:	2680      	movs	r6, #128	; 0x80
    812e:	465b      	mov	r3, fp
    8130:	0336      	lsls	r6, r6, #12
    8132:	431e      	orrs	r6, r3
    8134:	0336      	lsls	r6, r6, #12
    8136:	0b36      	lsrs	r6, r6, #12
    8138:	9a00      	ldr	r2, [sp, #0]
    813a:	4689      	mov	r9, r1
    813c:	4b03      	ldr	r3, [pc, #12]	; (814c <__aeabi_ddiv+0x628>)
    813e:	e557      	b.n	7bf0 <__aeabi_ddiv+0xcc>
    8140:	000003ff 	.word	0x000003ff
    8144:	feffffff 	.word	0xfeffffff
    8148:	000007fe 	.word	0x000007fe
    814c:	000007ff 	.word	0x000007ff

00008150 <__aeabi_dmul>:
    8150:	b5f0      	push	{r4, r5, r6, r7, lr}
    8152:	465f      	mov	r7, fp
    8154:	4656      	mov	r6, sl
    8156:	464d      	mov	r5, r9
    8158:	4644      	mov	r4, r8
    815a:	b4f0      	push	{r4, r5, r6, r7}
    815c:	030d      	lsls	r5, r1, #12
    815e:	4699      	mov	r9, r3
    8160:	004e      	lsls	r6, r1, #1
    8162:	0b2b      	lsrs	r3, r5, #12
    8164:	b087      	sub	sp, #28
    8166:	0007      	movs	r7, r0
    8168:	4692      	mov	sl, r2
    816a:	4680      	mov	r8, r0
    816c:	469b      	mov	fp, r3
    816e:	0d76      	lsrs	r6, r6, #21
    8170:	0fcc      	lsrs	r4, r1, #31
    8172:	2e00      	cmp	r6, #0
    8174:	d069      	beq.n	824a <__aeabi_dmul+0xfa>
    8176:	4b6d      	ldr	r3, [pc, #436]	; (832c <__aeabi_dmul+0x1dc>)
    8178:	429e      	cmp	r6, r3
    817a:	d035      	beq.n	81e8 <__aeabi_dmul+0x98>
    817c:	465b      	mov	r3, fp
    817e:	2280      	movs	r2, #128	; 0x80
    8180:	00dd      	lsls	r5, r3, #3
    8182:	0412      	lsls	r2, r2, #16
    8184:	0f43      	lsrs	r3, r0, #29
    8186:	4313      	orrs	r3, r2
    8188:	432b      	orrs	r3, r5
    818a:	469b      	mov	fp, r3
    818c:	00c3      	lsls	r3, r0, #3
    818e:	4698      	mov	r8, r3
    8190:	4b67      	ldr	r3, [pc, #412]	; (8330 <__aeabi_dmul+0x1e0>)
    8192:	2700      	movs	r7, #0
    8194:	469c      	mov	ip, r3
    8196:	2300      	movs	r3, #0
    8198:	4466      	add	r6, ip
    819a:	9301      	str	r3, [sp, #4]
    819c:	464a      	mov	r2, r9
    819e:	0315      	lsls	r5, r2, #12
    81a0:	0050      	lsls	r0, r2, #1
    81a2:	0fd2      	lsrs	r2, r2, #31
    81a4:	4653      	mov	r3, sl
    81a6:	0b2d      	lsrs	r5, r5, #12
    81a8:	0d40      	lsrs	r0, r0, #21
    81aa:	4691      	mov	r9, r2
    81ac:	d100      	bne.n	81b0 <__aeabi_dmul+0x60>
    81ae:	e076      	b.n	829e <__aeabi_dmul+0x14e>
    81b0:	4a5e      	ldr	r2, [pc, #376]	; (832c <__aeabi_dmul+0x1dc>)
    81b2:	4290      	cmp	r0, r2
    81b4:	d06c      	beq.n	8290 <__aeabi_dmul+0x140>
    81b6:	2280      	movs	r2, #128	; 0x80
    81b8:	0f5b      	lsrs	r3, r3, #29
    81ba:	0412      	lsls	r2, r2, #16
    81bc:	4313      	orrs	r3, r2
    81be:	4a5c      	ldr	r2, [pc, #368]	; (8330 <__aeabi_dmul+0x1e0>)
    81c0:	00ed      	lsls	r5, r5, #3
    81c2:	4694      	mov	ip, r2
    81c4:	431d      	orrs	r5, r3
    81c6:	4653      	mov	r3, sl
    81c8:	2200      	movs	r2, #0
    81ca:	00db      	lsls	r3, r3, #3
    81cc:	4460      	add	r0, ip
    81ce:	4649      	mov	r1, r9
    81d0:	1836      	adds	r6, r6, r0
    81d2:	1c70      	adds	r0, r6, #1
    81d4:	4061      	eors	r1, r4
    81d6:	9002      	str	r0, [sp, #8]
    81d8:	4317      	orrs	r7, r2
    81da:	2f0f      	cmp	r7, #15
    81dc:	d900      	bls.n	81e0 <__aeabi_dmul+0x90>
    81de:	e0af      	b.n	8340 <__aeabi_dmul+0x1f0>
    81e0:	4854      	ldr	r0, [pc, #336]	; (8334 <__aeabi_dmul+0x1e4>)
    81e2:	00bf      	lsls	r7, r7, #2
    81e4:	59c7      	ldr	r7, [r0, r7]
    81e6:	46bf      	mov	pc, r7
    81e8:	465b      	mov	r3, fp
    81ea:	431f      	orrs	r7, r3
    81ec:	d000      	beq.n	81f0 <__aeabi_dmul+0xa0>
    81ee:	e088      	b.n	8302 <__aeabi_dmul+0x1b2>
    81f0:	2300      	movs	r3, #0
    81f2:	469b      	mov	fp, r3
    81f4:	4698      	mov	r8, r3
    81f6:	3302      	adds	r3, #2
    81f8:	2708      	movs	r7, #8
    81fa:	9301      	str	r3, [sp, #4]
    81fc:	e7ce      	b.n	819c <__aeabi_dmul+0x4c>
    81fe:	4649      	mov	r1, r9
    8200:	2a02      	cmp	r2, #2
    8202:	d06a      	beq.n	82da <__aeabi_dmul+0x18a>
    8204:	2a03      	cmp	r2, #3
    8206:	d100      	bne.n	820a <__aeabi_dmul+0xba>
    8208:	e209      	b.n	861e <__aeabi_dmul+0x4ce>
    820a:	2a01      	cmp	r2, #1
    820c:	d000      	beq.n	8210 <__aeabi_dmul+0xc0>
    820e:	e1bb      	b.n	8588 <__aeabi_dmul+0x438>
    8210:	4011      	ands	r1, r2
    8212:	2200      	movs	r2, #0
    8214:	2300      	movs	r3, #0
    8216:	2500      	movs	r5, #0
    8218:	4690      	mov	r8, r2
    821a:	b2cc      	uxtb	r4, r1
    821c:	2100      	movs	r1, #0
    821e:	032d      	lsls	r5, r5, #12
    8220:	0d0a      	lsrs	r2, r1, #20
    8222:	0512      	lsls	r2, r2, #20
    8224:	0b2d      	lsrs	r5, r5, #12
    8226:	4315      	orrs	r5, r2
    8228:	4a43      	ldr	r2, [pc, #268]	; (8338 <__aeabi_dmul+0x1e8>)
    822a:	051b      	lsls	r3, r3, #20
    822c:	4015      	ands	r5, r2
    822e:	431d      	orrs	r5, r3
    8230:	006d      	lsls	r5, r5, #1
    8232:	07e4      	lsls	r4, r4, #31
    8234:	086d      	lsrs	r5, r5, #1
    8236:	4325      	orrs	r5, r4
    8238:	4640      	mov	r0, r8
    823a:	0029      	movs	r1, r5
    823c:	b007      	add	sp, #28
    823e:	bc3c      	pop	{r2, r3, r4, r5}
    8240:	4690      	mov	r8, r2
    8242:	4699      	mov	r9, r3
    8244:	46a2      	mov	sl, r4
    8246:	46ab      	mov	fp, r5
    8248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    824a:	4303      	orrs	r3, r0
    824c:	d052      	beq.n	82f4 <__aeabi_dmul+0x1a4>
    824e:	465b      	mov	r3, fp
    8250:	2b00      	cmp	r3, #0
    8252:	d100      	bne.n	8256 <__aeabi_dmul+0x106>
    8254:	e18a      	b.n	856c <__aeabi_dmul+0x41c>
    8256:	4658      	mov	r0, fp
    8258:	f000 fdb6 	bl	8dc8 <__clzsi2>
    825c:	0003      	movs	r3, r0
    825e:	3b0b      	subs	r3, #11
    8260:	2b1c      	cmp	r3, #28
    8262:	dd00      	ble.n	8266 <__aeabi_dmul+0x116>
    8264:	e17b      	b.n	855e <__aeabi_dmul+0x40e>
    8266:	221d      	movs	r2, #29
    8268:	1ad3      	subs	r3, r2, r3
    826a:	003a      	movs	r2, r7
    826c:	0001      	movs	r1, r0
    826e:	465d      	mov	r5, fp
    8270:	40da      	lsrs	r2, r3
    8272:	3908      	subs	r1, #8
    8274:	408d      	lsls	r5, r1
    8276:	0013      	movs	r3, r2
    8278:	408f      	lsls	r7, r1
    827a:	432b      	orrs	r3, r5
    827c:	469b      	mov	fp, r3
    827e:	46b8      	mov	r8, r7
    8280:	4b2e      	ldr	r3, [pc, #184]	; (833c <__aeabi_dmul+0x1ec>)
    8282:	2700      	movs	r7, #0
    8284:	469c      	mov	ip, r3
    8286:	2300      	movs	r3, #0
    8288:	4460      	add	r0, ip
    828a:	4246      	negs	r6, r0
    828c:	9301      	str	r3, [sp, #4]
    828e:	e785      	b.n	819c <__aeabi_dmul+0x4c>
    8290:	4652      	mov	r2, sl
    8292:	432a      	orrs	r2, r5
    8294:	d12c      	bne.n	82f0 <__aeabi_dmul+0x1a0>
    8296:	2500      	movs	r5, #0
    8298:	2300      	movs	r3, #0
    829a:	2202      	movs	r2, #2
    829c:	e797      	b.n	81ce <__aeabi_dmul+0x7e>
    829e:	4652      	mov	r2, sl
    82a0:	432a      	orrs	r2, r5
    82a2:	d021      	beq.n	82e8 <__aeabi_dmul+0x198>
    82a4:	2d00      	cmp	r5, #0
    82a6:	d100      	bne.n	82aa <__aeabi_dmul+0x15a>
    82a8:	e154      	b.n	8554 <__aeabi_dmul+0x404>
    82aa:	0028      	movs	r0, r5
    82ac:	f000 fd8c 	bl	8dc8 <__clzsi2>
    82b0:	0003      	movs	r3, r0
    82b2:	3b0b      	subs	r3, #11
    82b4:	2b1c      	cmp	r3, #28
    82b6:	dd00      	ble.n	82ba <__aeabi_dmul+0x16a>
    82b8:	e146      	b.n	8548 <__aeabi_dmul+0x3f8>
    82ba:	211d      	movs	r1, #29
    82bc:	1acb      	subs	r3, r1, r3
    82be:	4651      	mov	r1, sl
    82c0:	0002      	movs	r2, r0
    82c2:	40d9      	lsrs	r1, r3
    82c4:	4653      	mov	r3, sl
    82c6:	3a08      	subs	r2, #8
    82c8:	4095      	lsls	r5, r2
    82ca:	4093      	lsls	r3, r2
    82cc:	430d      	orrs	r5, r1
    82ce:	4a1b      	ldr	r2, [pc, #108]	; (833c <__aeabi_dmul+0x1ec>)
    82d0:	4694      	mov	ip, r2
    82d2:	4460      	add	r0, ip
    82d4:	4240      	negs	r0, r0
    82d6:	2200      	movs	r2, #0
    82d8:	e779      	b.n	81ce <__aeabi_dmul+0x7e>
    82da:	2401      	movs	r4, #1
    82dc:	2200      	movs	r2, #0
    82de:	400c      	ands	r4, r1
    82e0:	4b12      	ldr	r3, [pc, #72]	; (832c <__aeabi_dmul+0x1dc>)
    82e2:	2500      	movs	r5, #0
    82e4:	4690      	mov	r8, r2
    82e6:	e799      	b.n	821c <__aeabi_dmul+0xcc>
    82e8:	2500      	movs	r5, #0
    82ea:	2300      	movs	r3, #0
    82ec:	2201      	movs	r2, #1
    82ee:	e76e      	b.n	81ce <__aeabi_dmul+0x7e>
    82f0:	2203      	movs	r2, #3
    82f2:	e76c      	b.n	81ce <__aeabi_dmul+0x7e>
    82f4:	2300      	movs	r3, #0
    82f6:	469b      	mov	fp, r3
    82f8:	4698      	mov	r8, r3
    82fa:	3301      	adds	r3, #1
    82fc:	2704      	movs	r7, #4
    82fe:	9301      	str	r3, [sp, #4]
    8300:	e74c      	b.n	819c <__aeabi_dmul+0x4c>
    8302:	2303      	movs	r3, #3
    8304:	270c      	movs	r7, #12
    8306:	9301      	str	r3, [sp, #4]
    8308:	e748      	b.n	819c <__aeabi_dmul+0x4c>
    830a:	2300      	movs	r3, #0
    830c:	2580      	movs	r5, #128	; 0x80
    830e:	4698      	mov	r8, r3
    8310:	2400      	movs	r4, #0
    8312:	032d      	lsls	r5, r5, #12
    8314:	4b05      	ldr	r3, [pc, #20]	; (832c <__aeabi_dmul+0x1dc>)
    8316:	e781      	b.n	821c <__aeabi_dmul+0xcc>
    8318:	465d      	mov	r5, fp
    831a:	4643      	mov	r3, r8
    831c:	9a01      	ldr	r2, [sp, #4]
    831e:	e76f      	b.n	8200 <__aeabi_dmul+0xb0>
    8320:	465d      	mov	r5, fp
    8322:	4643      	mov	r3, r8
    8324:	0021      	movs	r1, r4
    8326:	9a01      	ldr	r2, [sp, #4]
    8328:	e76a      	b.n	8200 <__aeabi_dmul+0xb0>
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	000007ff 	.word	0x000007ff
    8330:	fffffc01 	.word	0xfffffc01
    8334:	00008fa4 	.word	0x00008fa4
    8338:	800fffff 	.word	0x800fffff
    833c:	000003f3 	.word	0x000003f3
    8340:	4642      	mov	r2, r8
    8342:	0c12      	lsrs	r2, r2, #16
    8344:	4691      	mov	r9, r2
    8346:	0c1a      	lsrs	r2, r3, #16
    8348:	4694      	mov	ip, r2
    834a:	4642      	mov	r2, r8
    834c:	0417      	lsls	r7, r2, #16
    834e:	464a      	mov	r2, r9
    8350:	041b      	lsls	r3, r3, #16
    8352:	0c1b      	lsrs	r3, r3, #16
    8354:	435a      	muls	r2, r3
    8356:	4660      	mov	r0, ip
    8358:	4690      	mov	r8, r2
    835a:	464a      	mov	r2, r9
    835c:	4342      	muls	r2, r0
    835e:	0010      	movs	r0, r2
    8360:	9203      	str	r2, [sp, #12]
    8362:	4662      	mov	r2, ip
    8364:	001c      	movs	r4, r3
    8366:	0c3f      	lsrs	r7, r7, #16
    8368:	437a      	muls	r2, r7
    836a:	437c      	muls	r4, r7
    836c:	4442      	add	r2, r8
    836e:	9201      	str	r2, [sp, #4]
    8370:	0c22      	lsrs	r2, r4, #16
    8372:	4692      	mov	sl, r2
    8374:	9a01      	ldr	r2, [sp, #4]
    8376:	4452      	add	r2, sl
    8378:	4590      	cmp	r8, r2
    837a:	d906      	bls.n	838a <__aeabi_dmul+0x23a>
    837c:	4682      	mov	sl, r0
    837e:	2080      	movs	r0, #128	; 0x80
    8380:	0240      	lsls	r0, r0, #9
    8382:	4680      	mov	r8, r0
    8384:	44c2      	add	sl, r8
    8386:	4650      	mov	r0, sl
    8388:	9003      	str	r0, [sp, #12]
    838a:	0c10      	lsrs	r0, r2, #16
    838c:	9004      	str	r0, [sp, #16]
    838e:	4648      	mov	r0, r9
    8390:	0424      	lsls	r4, r4, #16
    8392:	0c24      	lsrs	r4, r4, #16
    8394:	0412      	lsls	r2, r2, #16
    8396:	1912      	adds	r2, r2, r4
    8398:	9205      	str	r2, [sp, #20]
    839a:	0c2a      	lsrs	r2, r5, #16
    839c:	042d      	lsls	r5, r5, #16
    839e:	0c2d      	lsrs	r5, r5, #16
    83a0:	4368      	muls	r0, r5
    83a2:	002c      	movs	r4, r5
    83a4:	4682      	mov	sl, r0
    83a6:	4648      	mov	r0, r9
    83a8:	437c      	muls	r4, r7
    83aa:	4350      	muls	r0, r2
    83ac:	4681      	mov	r9, r0
    83ae:	0c20      	lsrs	r0, r4, #16
    83b0:	4680      	mov	r8, r0
    83b2:	4357      	muls	r7, r2
    83b4:	4457      	add	r7, sl
    83b6:	4447      	add	r7, r8
    83b8:	45ba      	cmp	sl, r7
    83ba:	d903      	bls.n	83c4 <__aeabi_dmul+0x274>
    83bc:	2080      	movs	r0, #128	; 0x80
    83be:	0240      	lsls	r0, r0, #9
    83c0:	4680      	mov	r8, r0
    83c2:	44c1      	add	r9, r8
    83c4:	0c38      	lsrs	r0, r7, #16
    83c6:	043f      	lsls	r7, r7, #16
    83c8:	46b8      	mov	r8, r7
    83ca:	4448      	add	r0, r9
    83cc:	0424      	lsls	r4, r4, #16
    83ce:	0c24      	lsrs	r4, r4, #16
    83d0:	9001      	str	r0, [sp, #4]
    83d2:	9804      	ldr	r0, [sp, #16]
    83d4:	44a0      	add	r8, r4
    83d6:	4440      	add	r0, r8
    83d8:	9004      	str	r0, [sp, #16]
    83da:	4658      	mov	r0, fp
    83dc:	0c00      	lsrs	r0, r0, #16
    83de:	4681      	mov	r9, r0
    83e0:	4658      	mov	r0, fp
    83e2:	0404      	lsls	r4, r0, #16
    83e4:	0c20      	lsrs	r0, r4, #16
    83e6:	4682      	mov	sl, r0
    83e8:	0007      	movs	r7, r0
    83ea:	4648      	mov	r0, r9
    83ec:	435f      	muls	r7, r3
    83ee:	464c      	mov	r4, r9
    83f0:	4343      	muls	r3, r0
    83f2:	4660      	mov	r0, ip
    83f4:	4360      	muls	r0, r4
    83f6:	4664      	mov	r4, ip
    83f8:	4683      	mov	fp, r0
    83fa:	4650      	mov	r0, sl
    83fc:	4344      	muls	r4, r0
    83fe:	0c38      	lsrs	r0, r7, #16
    8400:	4684      	mov	ip, r0
    8402:	18e4      	adds	r4, r4, r3
    8404:	4464      	add	r4, ip
    8406:	42a3      	cmp	r3, r4
    8408:	d903      	bls.n	8412 <__aeabi_dmul+0x2c2>
    840a:	2380      	movs	r3, #128	; 0x80
    840c:	025b      	lsls	r3, r3, #9
    840e:	469c      	mov	ip, r3
    8410:	44e3      	add	fp, ip
    8412:	4648      	mov	r0, r9
    8414:	043f      	lsls	r7, r7, #16
    8416:	0c23      	lsrs	r3, r4, #16
    8418:	0c3f      	lsrs	r7, r7, #16
    841a:	0424      	lsls	r4, r4, #16
    841c:	19e4      	adds	r4, r4, r7
    841e:	4657      	mov	r7, sl
    8420:	4368      	muls	r0, r5
    8422:	436f      	muls	r7, r5
    8424:	4684      	mov	ip, r0
    8426:	464d      	mov	r5, r9
    8428:	4650      	mov	r0, sl
    842a:	4355      	muls	r5, r2
    842c:	4342      	muls	r2, r0
    842e:	0c38      	lsrs	r0, r7, #16
    8430:	4681      	mov	r9, r0
    8432:	4462      	add	r2, ip
    8434:	444a      	add	r2, r9
    8436:	445b      	add	r3, fp
    8438:	4594      	cmp	ip, r2
    843a:	d903      	bls.n	8444 <__aeabi_dmul+0x2f4>
    843c:	2080      	movs	r0, #128	; 0x80
    843e:	0240      	lsls	r0, r0, #9
    8440:	4684      	mov	ip, r0
    8442:	4465      	add	r5, ip
    8444:	9803      	ldr	r0, [sp, #12]
    8446:	043f      	lsls	r7, r7, #16
    8448:	4683      	mov	fp, r0
    844a:	9804      	ldr	r0, [sp, #16]
    844c:	0c3f      	lsrs	r7, r7, #16
    844e:	4684      	mov	ip, r0
    8450:	44e3      	add	fp, ip
    8452:	45c3      	cmp	fp, r8
    8454:	4180      	sbcs	r0, r0
    8456:	4240      	negs	r0, r0
    8458:	4682      	mov	sl, r0
    845a:	0410      	lsls	r0, r2, #16
    845c:	4684      	mov	ip, r0
    845e:	9801      	ldr	r0, [sp, #4]
    8460:	4467      	add	r7, ip
    8462:	4684      	mov	ip, r0
    8464:	4467      	add	r7, ip
    8466:	44a3      	add	fp, r4
    8468:	46bc      	mov	ip, r7
    846a:	45a3      	cmp	fp, r4
    846c:	41a4      	sbcs	r4, r4
    846e:	4699      	mov	r9, r3
    8470:	44d4      	add	ip, sl
    8472:	4264      	negs	r4, r4
    8474:	4287      	cmp	r7, r0
    8476:	41bf      	sbcs	r7, r7
    8478:	45d4      	cmp	ip, sl
    847a:	4180      	sbcs	r0, r0
    847c:	44e1      	add	r9, ip
    847e:	46a0      	mov	r8, r4
    8480:	4599      	cmp	r9, r3
    8482:	419b      	sbcs	r3, r3
    8484:	427f      	negs	r7, r7
    8486:	4240      	negs	r0, r0
    8488:	44c8      	add	r8, r9
    848a:	4307      	orrs	r7, r0
    848c:	0c12      	lsrs	r2, r2, #16
    848e:	18ba      	adds	r2, r7, r2
    8490:	45a0      	cmp	r8, r4
    8492:	41a4      	sbcs	r4, r4
    8494:	425f      	negs	r7, r3
    8496:	003b      	movs	r3, r7
    8498:	4264      	negs	r4, r4
    849a:	4323      	orrs	r3, r4
    849c:	18d7      	adds	r7, r2, r3
    849e:	4643      	mov	r3, r8
    84a0:	197d      	adds	r5, r7, r5
    84a2:	0ddb      	lsrs	r3, r3, #23
    84a4:	026d      	lsls	r5, r5, #9
    84a6:	431d      	orrs	r5, r3
    84a8:	465b      	mov	r3, fp
    84aa:	025a      	lsls	r2, r3, #9
    84ac:	9b05      	ldr	r3, [sp, #20]
    84ae:	431a      	orrs	r2, r3
    84b0:	1e53      	subs	r3, r2, #1
    84b2:	419a      	sbcs	r2, r3
    84b4:	465b      	mov	r3, fp
    84b6:	0ddb      	lsrs	r3, r3, #23
    84b8:	431a      	orrs	r2, r3
    84ba:	4643      	mov	r3, r8
    84bc:	025b      	lsls	r3, r3, #9
    84be:	4313      	orrs	r3, r2
    84c0:	01ea      	lsls	r2, r5, #7
    84c2:	d507      	bpl.n	84d4 <__aeabi_dmul+0x384>
    84c4:	2201      	movs	r2, #1
    84c6:	085c      	lsrs	r4, r3, #1
    84c8:	4013      	ands	r3, r2
    84ca:	4323      	orrs	r3, r4
    84cc:	07ea      	lsls	r2, r5, #31
    84ce:	9e02      	ldr	r6, [sp, #8]
    84d0:	4313      	orrs	r3, r2
    84d2:	086d      	lsrs	r5, r5, #1
    84d4:	4a57      	ldr	r2, [pc, #348]	; (8634 <__aeabi_dmul+0x4e4>)
    84d6:	18b2      	adds	r2, r6, r2
    84d8:	2a00      	cmp	r2, #0
    84da:	dd4b      	ble.n	8574 <__aeabi_dmul+0x424>
    84dc:	0758      	lsls	r0, r3, #29
    84de:	d009      	beq.n	84f4 <__aeabi_dmul+0x3a4>
    84e0:	200f      	movs	r0, #15
    84e2:	4018      	ands	r0, r3
    84e4:	2804      	cmp	r0, #4
    84e6:	d005      	beq.n	84f4 <__aeabi_dmul+0x3a4>
    84e8:	1d18      	adds	r0, r3, #4
    84ea:	4298      	cmp	r0, r3
    84ec:	419b      	sbcs	r3, r3
    84ee:	425b      	negs	r3, r3
    84f0:	18ed      	adds	r5, r5, r3
    84f2:	0003      	movs	r3, r0
    84f4:	01e8      	lsls	r0, r5, #7
    84f6:	d504      	bpl.n	8502 <__aeabi_dmul+0x3b2>
    84f8:	4a4f      	ldr	r2, [pc, #316]	; (8638 <__aeabi_dmul+0x4e8>)
    84fa:	4015      	ands	r5, r2
    84fc:	2280      	movs	r2, #128	; 0x80
    84fe:	00d2      	lsls	r2, r2, #3
    8500:	18b2      	adds	r2, r6, r2
    8502:	484e      	ldr	r0, [pc, #312]	; (863c <__aeabi_dmul+0x4ec>)
    8504:	4282      	cmp	r2, r0
    8506:	dd00      	ble.n	850a <__aeabi_dmul+0x3ba>
    8508:	e6e7      	b.n	82da <__aeabi_dmul+0x18a>
    850a:	2401      	movs	r4, #1
    850c:	08db      	lsrs	r3, r3, #3
    850e:	0768      	lsls	r0, r5, #29
    8510:	4318      	orrs	r0, r3
    8512:	026d      	lsls	r5, r5, #9
    8514:	0553      	lsls	r3, r2, #21
    8516:	4680      	mov	r8, r0
    8518:	0b2d      	lsrs	r5, r5, #12
    851a:	0d5b      	lsrs	r3, r3, #21
    851c:	400c      	ands	r4, r1
    851e:	e67d      	b.n	821c <__aeabi_dmul+0xcc>
    8520:	2280      	movs	r2, #128	; 0x80
    8522:	4659      	mov	r1, fp
    8524:	0312      	lsls	r2, r2, #12
    8526:	4211      	tst	r1, r2
    8528:	d008      	beq.n	853c <__aeabi_dmul+0x3ec>
    852a:	4215      	tst	r5, r2
    852c:	d106      	bne.n	853c <__aeabi_dmul+0x3ec>
    852e:	4315      	orrs	r5, r2
    8530:	032d      	lsls	r5, r5, #12
    8532:	4698      	mov	r8, r3
    8534:	0b2d      	lsrs	r5, r5, #12
    8536:	464c      	mov	r4, r9
    8538:	4b41      	ldr	r3, [pc, #260]	; (8640 <__aeabi_dmul+0x4f0>)
    853a:	e66f      	b.n	821c <__aeabi_dmul+0xcc>
    853c:	465d      	mov	r5, fp
    853e:	4315      	orrs	r5, r2
    8540:	032d      	lsls	r5, r5, #12
    8542:	0b2d      	lsrs	r5, r5, #12
    8544:	4b3e      	ldr	r3, [pc, #248]	; (8640 <__aeabi_dmul+0x4f0>)
    8546:	e669      	b.n	821c <__aeabi_dmul+0xcc>
    8548:	0003      	movs	r3, r0
    854a:	4655      	mov	r5, sl
    854c:	3b28      	subs	r3, #40	; 0x28
    854e:	409d      	lsls	r5, r3
    8550:	2300      	movs	r3, #0
    8552:	e6bc      	b.n	82ce <__aeabi_dmul+0x17e>
    8554:	4650      	mov	r0, sl
    8556:	f000 fc37 	bl	8dc8 <__clzsi2>
    855a:	3020      	adds	r0, #32
    855c:	e6a8      	b.n	82b0 <__aeabi_dmul+0x160>
    855e:	0003      	movs	r3, r0
    8560:	3b28      	subs	r3, #40	; 0x28
    8562:	409f      	lsls	r7, r3
    8564:	2300      	movs	r3, #0
    8566:	46bb      	mov	fp, r7
    8568:	4698      	mov	r8, r3
    856a:	e689      	b.n	8280 <__aeabi_dmul+0x130>
    856c:	f000 fc2c 	bl	8dc8 <__clzsi2>
    8570:	3020      	adds	r0, #32
    8572:	e673      	b.n	825c <__aeabi_dmul+0x10c>
    8574:	2401      	movs	r4, #1
    8576:	1aa6      	subs	r6, r4, r2
    8578:	2e38      	cmp	r6, #56	; 0x38
    857a:	dd07      	ble.n	858c <__aeabi_dmul+0x43c>
    857c:	2200      	movs	r2, #0
    857e:	400c      	ands	r4, r1
    8580:	2300      	movs	r3, #0
    8582:	2500      	movs	r5, #0
    8584:	4690      	mov	r8, r2
    8586:	e649      	b.n	821c <__aeabi_dmul+0xcc>
    8588:	9e02      	ldr	r6, [sp, #8]
    858a:	e7a3      	b.n	84d4 <__aeabi_dmul+0x384>
    858c:	2e1f      	cmp	r6, #31
    858e:	dc20      	bgt.n	85d2 <__aeabi_dmul+0x482>
    8590:	2220      	movs	r2, #32
    8592:	002c      	movs	r4, r5
    8594:	0018      	movs	r0, r3
    8596:	1b92      	subs	r2, r2, r6
    8598:	40f0      	lsrs	r0, r6
    859a:	4094      	lsls	r4, r2
    859c:	4093      	lsls	r3, r2
    859e:	4304      	orrs	r4, r0
    85a0:	1e58      	subs	r0, r3, #1
    85a2:	4183      	sbcs	r3, r0
    85a4:	431c      	orrs	r4, r3
    85a6:	40f5      	lsrs	r5, r6
    85a8:	0763      	lsls	r3, r4, #29
    85aa:	d009      	beq.n	85c0 <__aeabi_dmul+0x470>
    85ac:	230f      	movs	r3, #15
    85ae:	4023      	ands	r3, r4
    85b0:	2b04      	cmp	r3, #4
    85b2:	d005      	beq.n	85c0 <__aeabi_dmul+0x470>
    85b4:	0023      	movs	r3, r4
    85b6:	1d1c      	adds	r4, r3, #4
    85b8:	429c      	cmp	r4, r3
    85ba:	4192      	sbcs	r2, r2
    85bc:	4252      	negs	r2, r2
    85be:	18ad      	adds	r5, r5, r2
    85c0:	022b      	lsls	r3, r5, #8
    85c2:	d51f      	bpl.n	8604 <__aeabi_dmul+0x4b4>
    85c4:	2401      	movs	r4, #1
    85c6:	2200      	movs	r2, #0
    85c8:	400c      	ands	r4, r1
    85ca:	2301      	movs	r3, #1
    85cc:	2500      	movs	r5, #0
    85ce:	4690      	mov	r8, r2
    85d0:	e624      	b.n	821c <__aeabi_dmul+0xcc>
    85d2:	201f      	movs	r0, #31
    85d4:	002c      	movs	r4, r5
    85d6:	4240      	negs	r0, r0
    85d8:	1a82      	subs	r2, r0, r2
    85da:	40d4      	lsrs	r4, r2
    85dc:	2e20      	cmp	r6, #32
    85de:	d01c      	beq.n	861a <__aeabi_dmul+0x4ca>
    85e0:	2240      	movs	r2, #64	; 0x40
    85e2:	1b96      	subs	r6, r2, r6
    85e4:	40b5      	lsls	r5, r6
    85e6:	432b      	orrs	r3, r5
    85e8:	1e58      	subs	r0, r3, #1
    85ea:	4183      	sbcs	r3, r0
    85ec:	2007      	movs	r0, #7
    85ee:	4323      	orrs	r3, r4
    85f0:	4018      	ands	r0, r3
    85f2:	2500      	movs	r5, #0
    85f4:	2800      	cmp	r0, #0
    85f6:	d009      	beq.n	860c <__aeabi_dmul+0x4bc>
    85f8:	220f      	movs	r2, #15
    85fa:	2500      	movs	r5, #0
    85fc:	401a      	ands	r2, r3
    85fe:	001c      	movs	r4, r3
    8600:	2a04      	cmp	r2, #4
    8602:	d1d8      	bne.n	85b6 <__aeabi_dmul+0x466>
    8604:	0023      	movs	r3, r4
    8606:	0768      	lsls	r0, r5, #29
    8608:	026d      	lsls	r5, r5, #9
    860a:	0b2d      	lsrs	r5, r5, #12
    860c:	2401      	movs	r4, #1
    860e:	08db      	lsrs	r3, r3, #3
    8610:	4303      	orrs	r3, r0
    8612:	4698      	mov	r8, r3
    8614:	400c      	ands	r4, r1
    8616:	2300      	movs	r3, #0
    8618:	e600      	b.n	821c <__aeabi_dmul+0xcc>
    861a:	2500      	movs	r5, #0
    861c:	e7e3      	b.n	85e6 <__aeabi_dmul+0x496>
    861e:	2280      	movs	r2, #128	; 0x80
    8620:	2401      	movs	r4, #1
    8622:	0312      	lsls	r2, r2, #12
    8624:	4315      	orrs	r5, r2
    8626:	032d      	lsls	r5, r5, #12
    8628:	4698      	mov	r8, r3
    862a:	0b2d      	lsrs	r5, r5, #12
    862c:	400c      	ands	r4, r1
    862e:	4b04      	ldr	r3, [pc, #16]	; (8640 <__aeabi_dmul+0x4f0>)
    8630:	e5f4      	b.n	821c <__aeabi_dmul+0xcc>
    8632:	46c0      	nop			; (mov r8, r8)
    8634:	000003ff 	.word	0x000003ff
    8638:	feffffff 	.word	0xfeffffff
    863c:	000007fe 	.word	0x000007fe
    8640:	000007ff 	.word	0x000007ff

00008644 <__aeabi_dsub>:
    8644:	b5f0      	push	{r4, r5, r6, r7, lr}
    8646:	4657      	mov	r7, sl
    8648:	464e      	mov	r6, r9
    864a:	4645      	mov	r5, r8
    864c:	b4e0      	push	{r5, r6, r7}
    864e:	000e      	movs	r6, r1
    8650:	0011      	movs	r1, r2
    8652:	0ff2      	lsrs	r2, r6, #31
    8654:	4692      	mov	sl, r2
    8656:	00c5      	lsls	r5, r0, #3
    8658:	0f42      	lsrs	r2, r0, #29
    865a:	0318      	lsls	r0, r3, #12
    865c:	0337      	lsls	r7, r6, #12
    865e:	0074      	lsls	r4, r6, #1
    8660:	0a40      	lsrs	r0, r0, #9
    8662:	0f4e      	lsrs	r6, r1, #29
    8664:	0a7f      	lsrs	r7, r7, #9
    8666:	4330      	orrs	r0, r6
    8668:	4ecf      	ldr	r6, [pc, #828]	; (89a8 <__aeabi_dsub+0x364>)
    866a:	4317      	orrs	r7, r2
    866c:	005a      	lsls	r2, r3, #1
    866e:	0d64      	lsrs	r4, r4, #21
    8670:	0d52      	lsrs	r2, r2, #21
    8672:	0fdb      	lsrs	r3, r3, #31
    8674:	00c9      	lsls	r1, r1, #3
    8676:	42b2      	cmp	r2, r6
    8678:	d100      	bne.n	867c <__aeabi_dsub+0x38>
    867a:	e0e5      	b.n	8848 <__aeabi_dsub+0x204>
    867c:	2601      	movs	r6, #1
    867e:	4073      	eors	r3, r6
    8680:	1aa6      	subs	r6, r4, r2
    8682:	46b4      	mov	ip, r6
    8684:	4553      	cmp	r3, sl
    8686:	d100      	bne.n	868a <__aeabi_dsub+0x46>
    8688:	e0af      	b.n	87ea <__aeabi_dsub+0x1a6>
    868a:	2e00      	cmp	r6, #0
    868c:	dc00      	bgt.n	8690 <__aeabi_dsub+0x4c>
    868e:	e10d      	b.n	88ac <__aeabi_dsub+0x268>
    8690:	2a00      	cmp	r2, #0
    8692:	d13a      	bne.n	870a <__aeabi_dsub+0xc6>
    8694:	0003      	movs	r3, r0
    8696:	430b      	orrs	r3, r1
    8698:	d000      	beq.n	869c <__aeabi_dsub+0x58>
    869a:	e0e4      	b.n	8866 <__aeabi_dsub+0x222>
    869c:	076b      	lsls	r3, r5, #29
    869e:	d009      	beq.n	86b4 <__aeabi_dsub+0x70>
    86a0:	230f      	movs	r3, #15
    86a2:	402b      	ands	r3, r5
    86a4:	2b04      	cmp	r3, #4
    86a6:	d005      	beq.n	86b4 <__aeabi_dsub+0x70>
    86a8:	1d2b      	adds	r3, r5, #4
    86aa:	42ab      	cmp	r3, r5
    86ac:	41ad      	sbcs	r5, r5
    86ae:	426d      	negs	r5, r5
    86b0:	197f      	adds	r7, r7, r5
    86b2:	001d      	movs	r5, r3
    86b4:	023b      	lsls	r3, r7, #8
    86b6:	d400      	bmi.n	86ba <__aeabi_dsub+0x76>
    86b8:	e088      	b.n	87cc <__aeabi_dsub+0x188>
    86ba:	4bbb      	ldr	r3, [pc, #748]	; (89a8 <__aeabi_dsub+0x364>)
    86bc:	3401      	adds	r4, #1
    86be:	429c      	cmp	r4, r3
    86c0:	d100      	bne.n	86c4 <__aeabi_dsub+0x80>
    86c2:	e110      	b.n	88e6 <__aeabi_dsub+0x2a2>
    86c4:	003a      	movs	r2, r7
    86c6:	4bb9      	ldr	r3, [pc, #740]	; (89ac <__aeabi_dsub+0x368>)
    86c8:	4651      	mov	r1, sl
    86ca:	401a      	ands	r2, r3
    86cc:	2301      	movs	r3, #1
    86ce:	0750      	lsls	r0, r2, #29
    86d0:	08ed      	lsrs	r5, r5, #3
    86d2:	0252      	lsls	r2, r2, #9
    86d4:	0564      	lsls	r4, r4, #21
    86d6:	4305      	orrs	r5, r0
    86d8:	0b12      	lsrs	r2, r2, #12
    86da:	0d64      	lsrs	r4, r4, #21
    86dc:	400b      	ands	r3, r1
    86de:	2100      	movs	r1, #0
    86e0:	0028      	movs	r0, r5
    86e2:	0312      	lsls	r2, r2, #12
    86e4:	0d0d      	lsrs	r5, r1, #20
    86e6:	0b12      	lsrs	r2, r2, #12
    86e8:	0564      	lsls	r4, r4, #21
    86ea:	052d      	lsls	r5, r5, #20
    86ec:	4315      	orrs	r5, r2
    86ee:	0862      	lsrs	r2, r4, #1
    86f0:	4caf      	ldr	r4, [pc, #700]	; (89b0 <__aeabi_dsub+0x36c>)
    86f2:	07db      	lsls	r3, r3, #31
    86f4:	402c      	ands	r4, r5
    86f6:	4314      	orrs	r4, r2
    86f8:	0064      	lsls	r4, r4, #1
    86fa:	0864      	lsrs	r4, r4, #1
    86fc:	431c      	orrs	r4, r3
    86fe:	0021      	movs	r1, r4
    8700:	bc1c      	pop	{r2, r3, r4}
    8702:	4690      	mov	r8, r2
    8704:	4699      	mov	r9, r3
    8706:	46a2      	mov	sl, r4
    8708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    870a:	4ba7      	ldr	r3, [pc, #668]	; (89a8 <__aeabi_dsub+0x364>)
    870c:	429c      	cmp	r4, r3
    870e:	d0c5      	beq.n	869c <__aeabi_dsub+0x58>
    8710:	2380      	movs	r3, #128	; 0x80
    8712:	041b      	lsls	r3, r3, #16
    8714:	4318      	orrs	r0, r3
    8716:	4663      	mov	r3, ip
    8718:	2b38      	cmp	r3, #56	; 0x38
    871a:	dd00      	ble.n	871e <__aeabi_dsub+0xda>
    871c:	e0fd      	b.n	891a <__aeabi_dsub+0x2d6>
    871e:	2b1f      	cmp	r3, #31
    8720:	dd00      	ble.n	8724 <__aeabi_dsub+0xe0>
    8722:	e130      	b.n	8986 <__aeabi_dsub+0x342>
    8724:	4662      	mov	r2, ip
    8726:	2320      	movs	r3, #32
    8728:	1a9b      	subs	r3, r3, r2
    872a:	0002      	movs	r2, r0
    872c:	409a      	lsls	r2, r3
    872e:	4666      	mov	r6, ip
    8730:	4690      	mov	r8, r2
    8732:	000a      	movs	r2, r1
    8734:	4099      	lsls	r1, r3
    8736:	40f2      	lsrs	r2, r6
    8738:	4646      	mov	r6, r8
    873a:	1e4b      	subs	r3, r1, #1
    873c:	4199      	sbcs	r1, r3
    873e:	4332      	orrs	r2, r6
    8740:	4311      	orrs	r1, r2
    8742:	4663      	mov	r3, ip
    8744:	0002      	movs	r2, r0
    8746:	40da      	lsrs	r2, r3
    8748:	1a69      	subs	r1, r5, r1
    874a:	428d      	cmp	r5, r1
    874c:	419b      	sbcs	r3, r3
    874e:	000d      	movs	r5, r1
    8750:	1aba      	subs	r2, r7, r2
    8752:	425b      	negs	r3, r3
    8754:	1ad7      	subs	r7, r2, r3
    8756:	023b      	lsls	r3, r7, #8
    8758:	d535      	bpl.n	87c6 <__aeabi_dsub+0x182>
    875a:	027a      	lsls	r2, r7, #9
    875c:	0a53      	lsrs	r3, r2, #9
    875e:	4698      	mov	r8, r3
    8760:	4643      	mov	r3, r8
    8762:	2b00      	cmp	r3, #0
    8764:	d100      	bne.n	8768 <__aeabi_dsub+0x124>
    8766:	e0c4      	b.n	88f2 <__aeabi_dsub+0x2ae>
    8768:	4640      	mov	r0, r8
    876a:	f000 fb2d 	bl	8dc8 <__clzsi2>
    876e:	0003      	movs	r3, r0
    8770:	3b08      	subs	r3, #8
    8772:	2b1f      	cmp	r3, #31
    8774:	dd00      	ble.n	8778 <__aeabi_dsub+0x134>
    8776:	e0c5      	b.n	8904 <__aeabi_dsub+0x2c0>
    8778:	2220      	movs	r2, #32
    877a:	0029      	movs	r1, r5
    877c:	1ad2      	subs	r2, r2, r3
    877e:	4647      	mov	r7, r8
    8780:	40d1      	lsrs	r1, r2
    8782:	409f      	lsls	r7, r3
    8784:	000a      	movs	r2, r1
    8786:	409d      	lsls	r5, r3
    8788:	433a      	orrs	r2, r7
    878a:	429c      	cmp	r4, r3
    878c:	dd00      	ble.n	8790 <__aeabi_dsub+0x14c>
    878e:	e0c0      	b.n	8912 <__aeabi_dsub+0x2ce>
    8790:	1b1c      	subs	r4, r3, r4
    8792:	1c63      	adds	r3, r4, #1
    8794:	2b1f      	cmp	r3, #31
    8796:	dd00      	ble.n	879a <__aeabi_dsub+0x156>
    8798:	e0e4      	b.n	8964 <__aeabi_dsub+0x320>
    879a:	2120      	movs	r1, #32
    879c:	0014      	movs	r4, r2
    879e:	0028      	movs	r0, r5
    87a0:	1ac9      	subs	r1, r1, r3
    87a2:	40d8      	lsrs	r0, r3
    87a4:	408c      	lsls	r4, r1
    87a6:	408d      	lsls	r5, r1
    87a8:	4304      	orrs	r4, r0
    87aa:	40da      	lsrs	r2, r3
    87ac:	1e68      	subs	r0, r5, #1
    87ae:	4185      	sbcs	r5, r0
    87b0:	0017      	movs	r7, r2
    87b2:	4325      	orrs	r5, r4
    87b4:	2400      	movs	r4, #0
    87b6:	e771      	b.n	869c <__aeabi_dsub+0x58>
    87b8:	4642      	mov	r2, r8
    87ba:	4663      	mov	r3, ip
    87bc:	431a      	orrs	r2, r3
    87be:	d100      	bne.n	87c2 <__aeabi_dsub+0x17e>
    87c0:	e24c      	b.n	8c5c <__aeabi_dsub+0x618>
    87c2:	4667      	mov	r7, ip
    87c4:	4645      	mov	r5, r8
    87c6:	076b      	lsls	r3, r5, #29
    87c8:	d000      	beq.n	87cc <__aeabi_dsub+0x188>
    87ca:	e769      	b.n	86a0 <__aeabi_dsub+0x5c>
    87cc:	2301      	movs	r3, #1
    87ce:	4651      	mov	r1, sl
    87d0:	0778      	lsls	r0, r7, #29
    87d2:	08ed      	lsrs	r5, r5, #3
    87d4:	08fa      	lsrs	r2, r7, #3
    87d6:	400b      	ands	r3, r1
    87d8:	4305      	orrs	r5, r0
    87da:	4973      	ldr	r1, [pc, #460]	; (89a8 <__aeabi_dsub+0x364>)
    87dc:	428c      	cmp	r4, r1
    87de:	d038      	beq.n	8852 <__aeabi_dsub+0x20e>
    87e0:	0312      	lsls	r2, r2, #12
    87e2:	0564      	lsls	r4, r4, #21
    87e4:	0b12      	lsrs	r2, r2, #12
    87e6:	0d64      	lsrs	r4, r4, #21
    87e8:	e779      	b.n	86de <__aeabi_dsub+0x9a>
    87ea:	2e00      	cmp	r6, #0
    87ec:	dc00      	bgt.n	87f0 <__aeabi_dsub+0x1ac>
    87ee:	e09a      	b.n	8926 <__aeabi_dsub+0x2e2>
    87f0:	2a00      	cmp	r2, #0
    87f2:	d047      	beq.n	8884 <__aeabi_dsub+0x240>
    87f4:	4a6c      	ldr	r2, [pc, #432]	; (89a8 <__aeabi_dsub+0x364>)
    87f6:	4294      	cmp	r4, r2
    87f8:	d100      	bne.n	87fc <__aeabi_dsub+0x1b8>
    87fa:	e74f      	b.n	869c <__aeabi_dsub+0x58>
    87fc:	2280      	movs	r2, #128	; 0x80
    87fe:	0412      	lsls	r2, r2, #16
    8800:	4310      	orrs	r0, r2
    8802:	4662      	mov	r2, ip
    8804:	2a38      	cmp	r2, #56	; 0x38
    8806:	dc00      	bgt.n	880a <__aeabi_dsub+0x1c6>
    8808:	e108      	b.n	8a1c <__aeabi_dsub+0x3d8>
    880a:	4301      	orrs	r1, r0
    880c:	1e48      	subs	r0, r1, #1
    880e:	4181      	sbcs	r1, r0
    8810:	2200      	movs	r2, #0
    8812:	b2c9      	uxtb	r1, r1
    8814:	1949      	adds	r1, r1, r5
    8816:	19d2      	adds	r2, r2, r7
    8818:	42a9      	cmp	r1, r5
    881a:	41bf      	sbcs	r7, r7
    881c:	000d      	movs	r5, r1
    881e:	427f      	negs	r7, r7
    8820:	18bf      	adds	r7, r7, r2
    8822:	023a      	lsls	r2, r7, #8
    8824:	d400      	bmi.n	8828 <__aeabi_dsub+0x1e4>
    8826:	e142      	b.n	8aae <__aeabi_dsub+0x46a>
    8828:	4a5f      	ldr	r2, [pc, #380]	; (89a8 <__aeabi_dsub+0x364>)
    882a:	3401      	adds	r4, #1
    882c:	4294      	cmp	r4, r2
    882e:	d100      	bne.n	8832 <__aeabi_dsub+0x1ee>
    8830:	e14e      	b.n	8ad0 <__aeabi_dsub+0x48c>
    8832:	2001      	movs	r0, #1
    8834:	4a5d      	ldr	r2, [pc, #372]	; (89ac <__aeabi_dsub+0x368>)
    8836:	0869      	lsrs	r1, r5, #1
    8838:	403a      	ands	r2, r7
    883a:	4028      	ands	r0, r5
    883c:	4308      	orrs	r0, r1
    883e:	07d5      	lsls	r5, r2, #31
    8840:	4305      	orrs	r5, r0
    8842:	0857      	lsrs	r7, r2, #1
    8844:	469a      	mov	sl, r3
    8846:	e729      	b.n	869c <__aeabi_dsub+0x58>
    8848:	0006      	movs	r6, r0
    884a:	430e      	orrs	r6, r1
    884c:	d000      	beq.n	8850 <__aeabi_dsub+0x20c>
    884e:	e717      	b.n	8680 <__aeabi_dsub+0x3c>
    8850:	e714      	b.n	867c <__aeabi_dsub+0x38>
    8852:	0029      	movs	r1, r5
    8854:	4311      	orrs	r1, r2
    8856:	d100      	bne.n	885a <__aeabi_dsub+0x216>
    8858:	e1f9      	b.n	8c4e <__aeabi_dsub+0x60a>
    885a:	2180      	movs	r1, #128	; 0x80
    885c:	0309      	lsls	r1, r1, #12
    885e:	430a      	orrs	r2, r1
    8860:	0312      	lsls	r2, r2, #12
    8862:	0b12      	lsrs	r2, r2, #12
    8864:	e73b      	b.n	86de <__aeabi_dsub+0x9a>
    8866:	2301      	movs	r3, #1
    8868:	425b      	negs	r3, r3
    886a:	4698      	mov	r8, r3
    886c:	44c4      	add	ip, r8
    886e:	4663      	mov	r3, ip
    8870:	2b00      	cmp	r3, #0
    8872:	d172      	bne.n	895a <__aeabi_dsub+0x316>
    8874:	1a69      	subs	r1, r5, r1
    8876:	428d      	cmp	r5, r1
    8878:	419b      	sbcs	r3, r3
    887a:	1a3f      	subs	r7, r7, r0
    887c:	425b      	negs	r3, r3
    887e:	1aff      	subs	r7, r7, r3
    8880:	000d      	movs	r5, r1
    8882:	e768      	b.n	8756 <__aeabi_dsub+0x112>
    8884:	0002      	movs	r2, r0
    8886:	430a      	orrs	r2, r1
    8888:	d100      	bne.n	888c <__aeabi_dsub+0x248>
    888a:	e707      	b.n	869c <__aeabi_dsub+0x58>
    888c:	2201      	movs	r2, #1
    888e:	4252      	negs	r2, r2
    8890:	4690      	mov	r8, r2
    8892:	44c4      	add	ip, r8
    8894:	4662      	mov	r2, ip
    8896:	2a00      	cmp	r2, #0
    8898:	d000      	beq.n	889c <__aeabi_dsub+0x258>
    889a:	e0e6      	b.n	8a6a <__aeabi_dsub+0x426>
    889c:	1869      	adds	r1, r5, r1
    889e:	42a9      	cmp	r1, r5
    88a0:	41b6      	sbcs	r6, r6
    88a2:	183f      	adds	r7, r7, r0
    88a4:	4276      	negs	r6, r6
    88a6:	19f7      	adds	r7, r6, r7
    88a8:	000d      	movs	r5, r1
    88aa:	e7ba      	b.n	8822 <__aeabi_dsub+0x1de>
    88ac:	2e00      	cmp	r6, #0
    88ae:	d000      	beq.n	88b2 <__aeabi_dsub+0x26e>
    88b0:	e080      	b.n	89b4 <__aeabi_dsub+0x370>
    88b2:	1c62      	adds	r2, r4, #1
    88b4:	0552      	lsls	r2, r2, #21
    88b6:	0d52      	lsrs	r2, r2, #21
    88b8:	2a01      	cmp	r2, #1
    88ba:	dc00      	bgt.n	88be <__aeabi_dsub+0x27a>
    88bc:	e0f9      	b.n	8ab2 <__aeabi_dsub+0x46e>
    88be:	1a6a      	subs	r2, r5, r1
    88c0:	4691      	mov	r9, r2
    88c2:	454d      	cmp	r5, r9
    88c4:	41b6      	sbcs	r6, r6
    88c6:	1a3a      	subs	r2, r7, r0
    88c8:	4276      	negs	r6, r6
    88ca:	1b92      	subs	r2, r2, r6
    88cc:	4690      	mov	r8, r2
    88ce:	0212      	lsls	r2, r2, #8
    88d0:	d400      	bmi.n	88d4 <__aeabi_dsub+0x290>
    88d2:	e099      	b.n	8a08 <__aeabi_dsub+0x3c4>
    88d4:	1b4d      	subs	r5, r1, r5
    88d6:	42a9      	cmp	r1, r5
    88d8:	4189      	sbcs	r1, r1
    88da:	1bc7      	subs	r7, r0, r7
    88dc:	4249      	negs	r1, r1
    88de:	1a7a      	subs	r2, r7, r1
    88e0:	4690      	mov	r8, r2
    88e2:	469a      	mov	sl, r3
    88e4:	e73c      	b.n	8760 <__aeabi_dsub+0x11c>
    88e6:	4652      	mov	r2, sl
    88e8:	2301      	movs	r3, #1
    88ea:	2500      	movs	r5, #0
    88ec:	4013      	ands	r3, r2
    88ee:	2200      	movs	r2, #0
    88f0:	e6f5      	b.n	86de <__aeabi_dsub+0x9a>
    88f2:	0028      	movs	r0, r5
    88f4:	f000 fa68 	bl	8dc8 <__clzsi2>
    88f8:	3020      	adds	r0, #32
    88fa:	0003      	movs	r3, r0
    88fc:	3b08      	subs	r3, #8
    88fe:	2b1f      	cmp	r3, #31
    8900:	dc00      	bgt.n	8904 <__aeabi_dsub+0x2c0>
    8902:	e739      	b.n	8778 <__aeabi_dsub+0x134>
    8904:	002a      	movs	r2, r5
    8906:	3828      	subs	r0, #40	; 0x28
    8908:	4082      	lsls	r2, r0
    890a:	2500      	movs	r5, #0
    890c:	429c      	cmp	r4, r3
    890e:	dc00      	bgt.n	8912 <__aeabi_dsub+0x2ce>
    8910:	e73e      	b.n	8790 <__aeabi_dsub+0x14c>
    8912:	4f26      	ldr	r7, [pc, #152]	; (89ac <__aeabi_dsub+0x368>)
    8914:	1ae4      	subs	r4, r4, r3
    8916:	4017      	ands	r7, r2
    8918:	e6c0      	b.n	869c <__aeabi_dsub+0x58>
    891a:	4301      	orrs	r1, r0
    891c:	1e48      	subs	r0, r1, #1
    891e:	4181      	sbcs	r1, r0
    8920:	2200      	movs	r2, #0
    8922:	b2c9      	uxtb	r1, r1
    8924:	e710      	b.n	8748 <__aeabi_dsub+0x104>
    8926:	2e00      	cmp	r6, #0
    8928:	d000      	beq.n	892c <__aeabi_dsub+0x2e8>
    892a:	e0f1      	b.n	8b10 <__aeabi_dsub+0x4cc>
    892c:	1c62      	adds	r2, r4, #1
    892e:	4694      	mov	ip, r2
    8930:	0552      	lsls	r2, r2, #21
    8932:	0d52      	lsrs	r2, r2, #21
    8934:	2a01      	cmp	r2, #1
    8936:	dc00      	bgt.n	893a <__aeabi_dsub+0x2f6>
    8938:	e0a0      	b.n	8a7c <__aeabi_dsub+0x438>
    893a:	4a1b      	ldr	r2, [pc, #108]	; (89a8 <__aeabi_dsub+0x364>)
    893c:	4594      	cmp	ip, r2
    893e:	d100      	bne.n	8942 <__aeabi_dsub+0x2fe>
    8940:	e0c5      	b.n	8ace <__aeabi_dsub+0x48a>
    8942:	1869      	adds	r1, r5, r1
    8944:	42a9      	cmp	r1, r5
    8946:	4192      	sbcs	r2, r2
    8948:	183f      	adds	r7, r7, r0
    894a:	4252      	negs	r2, r2
    894c:	19d2      	adds	r2, r2, r7
    894e:	0849      	lsrs	r1, r1, #1
    8950:	07d5      	lsls	r5, r2, #31
    8952:	430d      	orrs	r5, r1
    8954:	0857      	lsrs	r7, r2, #1
    8956:	4664      	mov	r4, ip
    8958:	e6a0      	b.n	869c <__aeabi_dsub+0x58>
    895a:	4b13      	ldr	r3, [pc, #76]	; (89a8 <__aeabi_dsub+0x364>)
    895c:	429c      	cmp	r4, r3
    895e:	d000      	beq.n	8962 <__aeabi_dsub+0x31e>
    8960:	e6d9      	b.n	8716 <__aeabi_dsub+0xd2>
    8962:	e69b      	b.n	869c <__aeabi_dsub+0x58>
    8964:	0011      	movs	r1, r2
    8966:	3c1f      	subs	r4, #31
    8968:	40e1      	lsrs	r1, r4
    896a:	000c      	movs	r4, r1
    896c:	2b20      	cmp	r3, #32
    896e:	d100      	bne.n	8972 <__aeabi_dsub+0x32e>
    8970:	e080      	b.n	8a74 <__aeabi_dsub+0x430>
    8972:	2140      	movs	r1, #64	; 0x40
    8974:	1acb      	subs	r3, r1, r3
    8976:	409a      	lsls	r2, r3
    8978:	4315      	orrs	r5, r2
    897a:	1e6a      	subs	r2, r5, #1
    897c:	4195      	sbcs	r5, r2
    897e:	2700      	movs	r7, #0
    8980:	4325      	orrs	r5, r4
    8982:	2400      	movs	r4, #0
    8984:	e71f      	b.n	87c6 <__aeabi_dsub+0x182>
    8986:	4663      	mov	r3, ip
    8988:	0002      	movs	r2, r0
    898a:	3b20      	subs	r3, #32
    898c:	40da      	lsrs	r2, r3
    898e:	4663      	mov	r3, ip
    8990:	2b20      	cmp	r3, #32
    8992:	d071      	beq.n	8a78 <__aeabi_dsub+0x434>
    8994:	2340      	movs	r3, #64	; 0x40
    8996:	4666      	mov	r6, ip
    8998:	1b9b      	subs	r3, r3, r6
    899a:	4098      	lsls	r0, r3
    899c:	4301      	orrs	r1, r0
    899e:	1e48      	subs	r0, r1, #1
    89a0:	4181      	sbcs	r1, r0
    89a2:	4311      	orrs	r1, r2
    89a4:	2200      	movs	r2, #0
    89a6:	e6cf      	b.n	8748 <__aeabi_dsub+0x104>
    89a8:	000007ff 	.word	0x000007ff
    89ac:	ff7fffff 	.word	0xff7fffff
    89b0:	800fffff 	.word	0x800fffff
    89b4:	2c00      	cmp	r4, #0
    89b6:	d048      	beq.n	8a4a <__aeabi_dsub+0x406>
    89b8:	4cca      	ldr	r4, [pc, #808]	; (8ce4 <__aeabi_dsub+0x6a0>)
    89ba:	42a2      	cmp	r2, r4
    89bc:	d100      	bne.n	89c0 <__aeabi_dsub+0x37c>
    89be:	e0a2      	b.n	8b06 <__aeabi_dsub+0x4c2>
    89c0:	4274      	negs	r4, r6
    89c2:	46a1      	mov	r9, r4
    89c4:	2480      	movs	r4, #128	; 0x80
    89c6:	0424      	lsls	r4, r4, #16
    89c8:	4327      	orrs	r7, r4
    89ca:	464c      	mov	r4, r9
    89cc:	2c38      	cmp	r4, #56	; 0x38
    89ce:	dd00      	ble.n	89d2 <__aeabi_dsub+0x38e>
    89d0:	e0db      	b.n	8b8a <__aeabi_dsub+0x546>
    89d2:	2c1f      	cmp	r4, #31
    89d4:	dd00      	ble.n	89d8 <__aeabi_dsub+0x394>
    89d6:	e144      	b.n	8c62 <__aeabi_dsub+0x61e>
    89d8:	464e      	mov	r6, r9
    89da:	2420      	movs	r4, #32
    89dc:	1ba4      	subs	r4, r4, r6
    89de:	003e      	movs	r6, r7
    89e0:	40a6      	lsls	r6, r4
    89e2:	46a2      	mov	sl, r4
    89e4:	46b0      	mov	r8, r6
    89e6:	464c      	mov	r4, r9
    89e8:	002e      	movs	r6, r5
    89ea:	40e6      	lsrs	r6, r4
    89ec:	46b4      	mov	ip, r6
    89ee:	4646      	mov	r6, r8
    89f0:	4664      	mov	r4, ip
    89f2:	4326      	orrs	r6, r4
    89f4:	4654      	mov	r4, sl
    89f6:	40a5      	lsls	r5, r4
    89f8:	1e6c      	subs	r4, r5, #1
    89fa:	41a5      	sbcs	r5, r4
    89fc:	0034      	movs	r4, r6
    89fe:	432c      	orrs	r4, r5
    8a00:	464d      	mov	r5, r9
    8a02:	40ef      	lsrs	r7, r5
    8a04:	1b0d      	subs	r5, r1, r4
    8a06:	e028      	b.n	8a5a <__aeabi_dsub+0x416>
    8a08:	464a      	mov	r2, r9
    8a0a:	4643      	mov	r3, r8
    8a0c:	464d      	mov	r5, r9
    8a0e:	431a      	orrs	r2, r3
    8a10:	d000      	beq.n	8a14 <__aeabi_dsub+0x3d0>
    8a12:	e6a5      	b.n	8760 <__aeabi_dsub+0x11c>
    8a14:	2300      	movs	r3, #0
    8a16:	2400      	movs	r4, #0
    8a18:	2500      	movs	r5, #0
    8a1a:	e6de      	b.n	87da <__aeabi_dsub+0x196>
    8a1c:	2a1f      	cmp	r2, #31
    8a1e:	dc5a      	bgt.n	8ad6 <__aeabi_dsub+0x492>
    8a20:	4666      	mov	r6, ip
    8a22:	2220      	movs	r2, #32
    8a24:	1b92      	subs	r2, r2, r6
    8a26:	0006      	movs	r6, r0
    8a28:	4096      	lsls	r6, r2
    8a2a:	4691      	mov	r9, r2
    8a2c:	46b0      	mov	r8, r6
    8a2e:	4662      	mov	r2, ip
    8a30:	000e      	movs	r6, r1
    8a32:	40d6      	lsrs	r6, r2
    8a34:	4642      	mov	r2, r8
    8a36:	4316      	orrs	r6, r2
    8a38:	464a      	mov	r2, r9
    8a3a:	4091      	lsls	r1, r2
    8a3c:	1e4a      	subs	r2, r1, #1
    8a3e:	4191      	sbcs	r1, r2
    8a40:	0002      	movs	r2, r0
    8a42:	4660      	mov	r0, ip
    8a44:	4331      	orrs	r1, r6
    8a46:	40c2      	lsrs	r2, r0
    8a48:	e6e4      	b.n	8814 <__aeabi_dsub+0x1d0>
    8a4a:	003c      	movs	r4, r7
    8a4c:	432c      	orrs	r4, r5
    8a4e:	d05a      	beq.n	8b06 <__aeabi_dsub+0x4c2>
    8a50:	43f4      	mvns	r4, r6
    8a52:	46a1      	mov	r9, r4
    8a54:	2c00      	cmp	r4, #0
    8a56:	d152      	bne.n	8afe <__aeabi_dsub+0x4ba>
    8a58:	1b4d      	subs	r5, r1, r5
    8a5a:	42a9      	cmp	r1, r5
    8a5c:	4189      	sbcs	r1, r1
    8a5e:	1bc7      	subs	r7, r0, r7
    8a60:	4249      	negs	r1, r1
    8a62:	1a7f      	subs	r7, r7, r1
    8a64:	0014      	movs	r4, r2
    8a66:	469a      	mov	sl, r3
    8a68:	e675      	b.n	8756 <__aeabi_dsub+0x112>
    8a6a:	4a9e      	ldr	r2, [pc, #632]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8a6c:	4294      	cmp	r4, r2
    8a6e:	d000      	beq.n	8a72 <__aeabi_dsub+0x42e>
    8a70:	e6c7      	b.n	8802 <__aeabi_dsub+0x1be>
    8a72:	e613      	b.n	869c <__aeabi_dsub+0x58>
    8a74:	2200      	movs	r2, #0
    8a76:	e77f      	b.n	8978 <__aeabi_dsub+0x334>
    8a78:	2000      	movs	r0, #0
    8a7a:	e78f      	b.n	899c <__aeabi_dsub+0x358>
    8a7c:	2c00      	cmp	r4, #0
    8a7e:	d000      	beq.n	8a82 <__aeabi_dsub+0x43e>
    8a80:	e0c8      	b.n	8c14 <__aeabi_dsub+0x5d0>
    8a82:	003b      	movs	r3, r7
    8a84:	432b      	orrs	r3, r5
    8a86:	d100      	bne.n	8a8a <__aeabi_dsub+0x446>
    8a88:	e10f      	b.n	8caa <__aeabi_dsub+0x666>
    8a8a:	0003      	movs	r3, r0
    8a8c:	430b      	orrs	r3, r1
    8a8e:	d100      	bne.n	8a92 <__aeabi_dsub+0x44e>
    8a90:	e604      	b.n	869c <__aeabi_dsub+0x58>
    8a92:	1869      	adds	r1, r5, r1
    8a94:	42a9      	cmp	r1, r5
    8a96:	419b      	sbcs	r3, r3
    8a98:	183f      	adds	r7, r7, r0
    8a9a:	425b      	negs	r3, r3
    8a9c:	19df      	adds	r7, r3, r7
    8a9e:	023b      	lsls	r3, r7, #8
    8aa0:	d400      	bmi.n	8aa4 <__aeabi_dsub+0x460>
    8aa2:	e11a      	b.n	8cda <__aeabi_dsub+0x696>
    8aa4:	4b90      	ldr	r3, [pc, #576]	; (8ce8 <__aeabi_dsub+0x6a4>)
    8aa6:	000d      	movs	r5, r1
    8aa8:	401f      	ands	r7, r3
    8aaa:	4664      	mov	r4, ip
    8aac:	e5f6      	b.n	869c <__aeabi_dsub+0x58>
    8aae:	469a      	mov	sl, r3
    8ab0:	e689      	b.n	87c6 <__aeabi_dsub+0x182>
    8ab2:	003a      	movs	r2, r7
    8ab4:	432a      	orrs	r2, r5
    8ab6:	2c00      	cmp	r4, #0
    8ab8:	d15c      	bne.n	8b74 <__aeabi_dsub+0x530>
    8aba:	2a00      	cmp	r2, #0
    8abc:	d175      	bne.n	8baa <__aeabi_dsub+0x566>
    8abe:	0002      	movs	r2, r0
    8ac0:	430a      	orrs	r2, r1
    8ac2:	d100      	bne.n	8ac6 <__aeabi_dsub+0x482>
    8ac4:	e0ca      	b.n	8c5c <__aeabi_dsub+0x618>
    8ac6:	0007      	movs	r7, r0
    8ac8:	000d      	movs	r5, r1
    8aca:	469a      	mov	sl, r3
    8acc:	e5e6      	b.n	869c <__aeabi_dsub+0x58>
    8ace:	4664      	mov	r4, ip
    8ad0:	2200      	movs	r2, #0
    8ad2:	2500      	movs	r5, #0
    8ad4:	e681      	b.n	87da <__aeabi_dsub+0x196>
    8ad6:	4662      	mov	r2, ip
    8ad8:	0006      	movs	r6, r0
    8ada:	3a20      	subs	r2, #32
    8adc:	40d6      	lsrs	r6, r2
    8ade:	4662      	mov	r2, ip
    8ae0:	46b0      	mov	r8, r6
    8ae2:	2a20      	cmp	r2, #32
    8ae4:	d100      	bne.n	8ae8 <__aeabi_dsub+0x4a4>
    8ae6:	e0b7      	b.n	8c58 <__aeabi_dsub+0x614>
    8ae8:	2240      	movs	r2, #64	; 0x40
    8aea:	4666      	mov	r6, ip
    8aec:	1b92      	subs	r2, r2, r6
    8aee:	4090      	lsls	r0, r2
    8af0:	4301      	orrs	r1, r0
    8af2:	4642      	mov	r2, r8
    8af4:	1e48      	subs	r0, r1, #1
    8af6:	4181      	sbcs	r1, r0
    8af8:	4311      	orrs	r1, r2
    8afa:	2200      	movs	r2, #0
    8afc:	e68a      	b.n	8814 <__aeabi_dsub+0x1d0>
    8afe:	4c79      	ldr	r4, [pc, #484]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8b00:	42a2      	cmp	r2, r4
    8b02:	d000      	beq.n	8b06 <__aeabi_dsub+0x4c2>
    8b04:	e761      	b.n	89ca <__aeabi_dsub+0x386>
    8b06:	0007      	movs	r7, r0
    8b08:	000d      	movs	r5, r1
    8b0a:	0014      	movs	r4, r2
    8b0c:	469a      	mov	sl, r3
    8b0e:	e5c5      	b.n	869c <__aeabi_dsub+0x58>
    8b10:	2c00      	cmp	r4, #0
    8b12:	d141      	bne.n	8b98 <__aeabi_dsub+0x554>
    8b14:	003c      	movs	r4, r7
    8b16:	432c      	orrs	r4, r5
    8b18:	d078      	beq.n	8c0c <__aeabi_dsub+0x5c8>
    8b1a:	43f4      	mvns	r4, r6
    8b1c:	46a1      	mov	r9, r4
    8b1e:	2c00      	cmp	r4, #0
    8b20:	d020      	beq.n	8b64 <__aeabi_dsub+0x520>
    8b22:	4c70      	ldr	r4, [pc, #448]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8b24:	42a2      	cmp	r2, r4
    8b26:	d071      	beq.n	8c0c <__aeabi_dsub+0x5c8>
    8b28:	464c      	mov	r4, r9
    8b2a:	2c38      	cmp	r4, #56	; 0x38
    8b2c:	dd00      	ble.n	8b30 <__aeabi_dsub+0x4ec>
    8b2e:	e0b2      	b.n	8c96 <__aeabi_dsub+0x652>
    8b30:	2c1f      	cmp	r4, #31
    8b32:	dd00      	ble.n	8b36 <__aeabi_dsub+0x4f2>
    8b34:	e0bc      	b.n	8cb0 <__aeabi_dsub+0x66c>
    8b36:	2620      	movs	r6, #32
    8b38:	1b34      	subs	r4, r6, r4
    8b3a:	46a2      	mov	sl, r4
    8b3c:	003c      	movs	r4, r7
    8b3e:	4656      	mov	r6, sl
    8b40:	40b4      	lsls	r4, r6
    8b42:	464e      	mov	r6, r9
    8b44:	46a0      	mov	r8, r4
    8b46:	002c      	movs	r4, r5
    8b48:	40f4      	lsrs	r4, r6
    8b4a:	46a4      	mov	ip, r4
    8b4c:	4644      	mov	r4, r8
    8b4e:	4666      	mov	r6, ip
    8b50:	4334      	orrs	r4, r6
    8b52:	46a4      	mov	ip, r4
    8b54:	4654      	mov	r4, sl
    8b56:	40a5      	lsls	r5, r4
    8b58:	4664      	mov	r4, ip
    8b5a:	1e6e      	subs	r6, r5, #1
    8b5c:	41b5      	sbcs	r5, r6
    8b5e:	4325      	orrs	r5, r4
    8b60:	464c      	mov	r4, r9
    8b62:	40e7      	lsrs	r7, r4
    8b64:	186d      	adds	r5, r5, r1
    8b66:	428d      	cmp	r5, r1
    8b68:	4189      	sbcs	r1, r1
    8b6a:	183f      	adds	r7, r7, r0
    8b6c:	4249      	negs	r1, r1
    8b6e:	19cf      	adds	r7, r1, r7
    8b70:	0014      	movs	r4, r2
    8b72:	e656      	b.n	8822 <__aeabi_dsub+0x1de>
    8b74:	2a00      	cmp	r2, #0
    8b76:	d12f      	bne.n	8bd8 <__aeabi_dsub+0x594>
    8b78:	0002      	movs	r2, r0
    8b7a:	430a      	orrs	r2, r1
    8b7c:	d100      	bne.n	8b80 <__aeabi_dsub+0x53c>
    8b7e:	e084      	b.n	8c8a <__aeabi_dsub+0x646>
    8b80:	0007      	movs	r7, r0
    8b82:	000d      	movs	r5, r1
    8b84:	469a      	mov	sl, r3
    8b86:	4c57      	ldr	r4, [pc, #348]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8b88:	e588      	b.n	869c <__aeabi_dsub+0x58>
    8b8a:	433d      	orrs	r5, r7
    8b8c:	1e6f      	subs	r7, r5, #1
    8b8e:	41bd      	sbcs	r5, r7
    8b90:	b2ec      	uxtb	r4, r5
    8b92:	2700      	movs	r7, #0
    8b94:	1b0d      	subs	r5, r1, r4
    8b96:	e760      	b.n	8a5a <__aeabi_dsub+0x416>
    8b98:	4c52      	ldr	r4, [pc, #328]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8b9a:	42a2      	cmp	r2, r4
    8b9c:	d036      	beq.n	8c0c <__aeabi_dsub+0x5c8>
    8b9e:	4274      	negs	r4, r6
    8ba0:	2680      	movs	r6, #128	; 0x80
    8ba2:	0436      	lsls	r6, r6, #16
    8ba4:	46a1      	mov	r9, r4
    8ba6:	4337      	orrs	r7, r6
    8ba8:	e7be      	b.n	8b28 <__aeabi_dsub+0x4e4>
    8baa:	0002      	movs	r2, r0
    8bac:	430a      	orrs	r2, r1
    8bae:	d100      	bne.n	8bb2 <__aeabi_dsub+0x56e>
    8bb0:	e574      	b.n	869c <__aeabi_dsub+0x58>
    8bb2:	1a6a      	subs	r2, r5, r1
    8bb4:	4690      	mov	r8, r2
    8bb6:	4545      	cmp	r5, r8
    8bb8:	41b6      	sbcs	r6, r6
    8bba:	1a3a      	subs	r2, r7, r0
    8bbc:	4276      	negs	r6, r6
    8bbe:	1b92      	subs	r2, r2, r6
    8bc0:	4694      	mov	ip, r2
    8bc2:	0212      	lsls	r2, r2, #8
    8bc4:	d400      	bmi.n	8bc8 <__aeabi_dsub+0x584>
    8bc6:	e5f7      	b.n	87b8 <__aeabi_dsub+0x174>
    8bc8:	1b4d      	subs	r5, r1, r5
    8bca:	42a9      	cmp	r1, r5
    8bcc:	4189      	sbcs	r1, r1
    8bce:	1bc7      	subs	r7, r0, r7
    8bd0:	4249      	negs	r1, r1
    8bd2:	1a7f      	subs	r7, r7, r1
    8bd4:	469a      	mov	sl, r3
    8bd6:	e561      	b.n	869c <__aeabi_dsub+0x58>
    8bd8:	0002      	movs	r2, r0
    8bda:	430a      	orrs	r2, r1
    8bdc:	d03a      	beq.n	8c54 <__aeabi_dsub+0x610>
    8bde:	08ed      	lsrs	r5, r5, #3
    8be0:	077c      	lsls	r4, r7, #29
    8be2:	432c      	orrs	r4, r5
    8be4:	2580      	movs	r5, #128	; 0x80
    8be6:	08fa      	lsrs	r2, r7, #3
    8be8:	032d      	lsls	r5, r5, #12
    8bea:	422a      	tst	r2, r5
    8bec:	d008      	beq.n	8c00 <__aeabi_dsub+0x5bc>
    8bee:	08c7      	lsrs	r7, r0, #3
    8bf0:	422f      	tst	r7, r5
    8bf2:	d105      	bne.n	8c00 <__aeabi_dsub+0x5bc>
    8bf4:	0745      	lsls	r5, r0, #29
    8bf6:	002c      	movs	r4, r5
    8bf8:	003a      	movs	r2, r7
    8bfa:	469a      	mov	sl, r3
    8bfc:	08c9      	lsrs	r1, r1, #3
    8bfe:	430c      	orrs	r4, r1
    8c00:	0f67      	lsrs	r7, r4, #29
    8c02:	00d2      	lsls	r2, r2, #3
    8c04:	00e5      	lsls	r5, r4, #3
    8c06:	4317      	orrs	r7, r2
    8c08:	4c36      	ldr	r4, [pc, #216]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8c0a:	e547      	b.n	869c <__aeabi_dsub+0x58>
    8c0c:	0007      	movs	r7, r0
    8c0e:	000d      	movs	r5, r1
    8c10:	0014      	movs	r4, r2
    8c12:	e543      	b.n	869c <__aeabi_dsub+0x58>
    8c14:	003a      	movs	r2, r7
    8c16:	432a      	orrs	r2, r5
    8c18:	d043      	beq.n	8ca2 <__aeabi_dsub+0x65e>
    8c1a:	0002      	movs	r2, r0
    8c1c:	430a      	orrs	r2, r1
    8c1e:	d019      	beq.n	8c54 <__aeabi_dsub+0x610>
    8c20:	08ed      	lsrs	r5, r5, #3
    8c22:	077c      	lsls	r4, r7, #29
    8c24:	432c      	orrs	r4, r5
    8c26:	2580      	movs	r5, #128	; 0x80
    8c28:	08fa      	lsrs	r2, r7, #3
    8c2a:	032d      	lsls	r5, r5, #12
    8c2c:	422a      	tst	r2, r5
    8c2e:	d007      	beq.n	8c40 <__aeabi_dsub+0x5fc>
    8c30:	08c6      	lsrs	r6, r0, #3
    8c32:	422e      	tst	r6, r5
    8c34:	d104      	bne.n	8c40 <__aeabi_dsub+0x5fc>
    8c36:	0747      	lsls	r7, r0, #29
    8c38:	003c      	movs	r4, r7
    8c3a:	0032      	movs	r2, r6
    8c3c:	08c9      	lsrs	r1, r1, #3
    8c3e:	430c      	orrs	r4, r1
    8c40:	00d7      	lsls	r7, r2, #3
    8c42:	0f62      	lsrs	r2, r4, #29
    8c44:	00e5      	lsls	r5, r4, #3
    8c46:	4317      	orrs	r7, r2
    8c48:	469a      	mov	sl, r3
    8c4a:	4c26      	ldr	r4, [pc, #152]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8c4c:	e526      	b.n	869c <__aeabi_dsub+0x58>
    8c4e:	2200      	movs	r2, #0
    8c50:	2500      	movs	r5, #0
    8c52:	e544      	b.n	86de <__aeabi_dsub+0x9a>
    8c54:	4c23      	ldr	r4, [pc, #140]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8c56:	e521      	b.n	869c <__aeabi_dsub+0x58>
    8c58:	2000      	movs	r0, #0
    8c5a:	e749      	b.n	8af0 <__aeabi_dsub+0x4ac>
    8c5c:	2300      	movs	r3, #0
    8c5e:	2500      	movs	r5, #0
    8c60:	e5bb      	b.n	87da <__aeabi_dsub+0x196>
    8c62:	464c      	mov	r4, r9
    8c64:	003e      	movs	r6, r7
    8c66:	3c20      	subs	r4, #32
    8c68:	40e6      	lsrs	r6, r4
    8c6a:	464c      	mov	r4, r9
    8c6c:	46b4      	mov	ip, r6
    8c6e:	2c20      	cmp	r4, #32
    8c70:	d031      	beq.n	8cd6 <__aeabi_dsub+0x692>
    8c72:	2440      	movs	r4, #64	; 0x40
    8c74:	464e      	mov	r6, r9
    8c76:	1ba6      	subs	r6, r4, r6
    8c78:	40b7      	lsls	r7, r6
    8c7a:	433d      	orrs	r5, r7
    8c7c:	1e6c      	subs	r4, r5, #1
    8c7e:	41a5      	sbcs	r5, r4
    8c80:	4664      	mov	r4, ip
    8c82:	432c      	orrs	r4, r5
    8c84:	2700      	movs	r7, #0
    8c86:	1b0d      	subs	r5, r1, r4
    8c88:	e6e7      	b.n	8a5a <__aeabi_dsub+0x416>
    8c8a:	2280      	movs	r2, #128	; 0x80
    8c8c:	2300      	movs	r3, #0
    8c8e:	0312      	lsls	r2, r2, #12
    8c90:	4c14      	ldr	r4, [pc, #80]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8c92:	2500      	movs	r5, #0
    8c94:	e5a1      	b.n	87da <__aeabi_dsub+0x196>
    8c96:	433d      	orrs	r5, r7
    8c98:	1e6f      	subs	r7, r5, #1
    8c9a:	41bd      	sbcs	r5, r7
    8c9c:	2700      	movs	r7, #0
    8c9e:	b2ed      	uxtb	r5, r5
    8ca0:	e760      	b.n	8b64 <__aeabi_dsub+0x520>
    8ca2:	0007      	movs	r7, r0
    8ca4:	000d      	movs	r5, r1
    8ca6:	4c0f      	ldr	r4, [pc, #60]	; (8ce4 <__aeabi_dsub+0x6a0>)
    8ca8:	e4f8      	b.n	869c <__aeabi_dsub+0x58>
    8caa:	0007      	movs	r7, r0
    8cac:	000d      	movs	r5, r1
    8cae:	e4f5      	b.n	869c <__aeabi_dsub+0x58>
    8cb0:	464e      	mov	r6, r9
    8cb2:	003c      	movs	r4, r7
    8cb4:	3e20      	subs	r6, #32
    8cb6:	40f4      	lsrs	r4, r6
    8cb8:	46a0      	mov	r8, r4
    8cba:	464c      	mov	r4, r9
    8cbc:	2c20      	cmp	r4, #32
    8cbe:	d00e      	beq.n	8cde <__aeabi_dsub+0x69a>
    8cc0:	2440      	movs	r4, #64	; 0x40
    8cc2:	464e      	mov	r6, r9
    8cc4:	1ba4      	subs	r4, r4, r6
    8cc6:	40a7      	lsls	r7, r4
    8cc8:	433d      	orrs	r5, r7
    8cca:	1e6f      	subs	r7, r5, #1
    8ccc:	41bd      	sbcs	r5, r7
    8cce:	4644      	mov	r4, r8
    8cd0:	2700      	movs	r7, #0
    8cd2:	4325      	orrs	r5, r4
    8cd4:	e746      	b.n	8b64 <__aeabi_dsub+0x520>
    8cd6:	2700      	movs	r7, #0
    8cd8:	e7cf      	b.n	8c7a <__aeabi_dsub+0x636>
    8cda:	000d      	movs	r5, r1
    8cdc:	e573      	b.n	87c6 <__aeabi_dsub+0x182>
    8cde:	2700      	movs	r7, #0
    8ce0:	e7f2      	b.n	8cc8 <__aeabi_dsub+0x684>
    8ce2:	46c0      	nop			; (mov r8, r8)
    8ce4:	000007ff 	.word	0x000007ff
    8ce8:	ff7fffff 	.word	0xff7fffff

00008cec <__aeabi_d2iz>:
    8cec:	030b      	lsls	r3, r1, #12
    8cee:	b530      	push	{r4, r5, lr}
    8cf0:	4d13      	ldr	r5, [pc, #76]	; (8d40 <__aeabi_d2iz+0x54>)
    8cf2:	0b1a      	lsrs	r2, r3, #12
    8cf4:	004b      	lsls	r3, r1, #1
    8cf6:	0d5b      	lsrs	r3, r3, #21
    8cf8:	0fc9      	lsrs	r1, r1, #31
    8cfa:	2400      	movs	r4, #0
    8cfc:	42ab      	cmp	r3, r5
    8cfe:	dd11      	ble.n	8d24 <__aeabi_d2iz+0x38>
    8d00:	4c10      	ldr	r4, [pc, #64]	; (8d44 <__aeabi_d2iz+0x58>)
    8d02:	42a3      	cmp	r3, r4
    8d04:	dc10      	bgt.n	8d28 <__aeabi_d2iz+0x3c>
    8d06:	2480      	movs	r4, #128	; 0x80
    8d08:	0364      	lsls	r4, r4, #13
    8d0a:	4322      	orrs	r2, r4
    8d0c:	4c0e      	ldr	r4, [pc, #56]	; (8d48 <__aeabi_d2iz+0x5c>)
    8d0e:	1ae4      	subs	r4, r4, r3
    8d10:	2c1f      	cmp	r4, #31
    8d12:	dd0c      	ble.n	8d2e <__aeabi_d2iz+0x42>
    8d14:	480d      	ldr	r0, [pc, #52]	; (8d4c <__aeabi_d2iz+0x60>)
    8d16:	1ac3      	subs	r3, r0, r3
    8d18:	40da      	lsrs	r2, r3
    8d1a:	0013      	movs	r3, r2
    8d1c:	425c      	negs	r4, r3
    8d1e:	2900      	cmp	r1, #0
    8d20:	d100      	bne.n	8d24 <__aeabi_d2iz+0x38>
    8d22:	001c      	movs	r4, r3
    8d24:	0020      	movs	r0, r4
    8d26:	bd30      	pop	{r4, r5, pc}
    8d28:	4b09      	ldr	r3, [pc, #36]	; (8d50 <__aeabi_d2iz+0x64>)
    8d2a:	18cc      	adds	r4, r1, r3
    8d2c:	e7fa      	b.n	8d24 <__aeabi_d2iz+0x38>
    8d2e:	40e0      	lsrs	r0, r4
    8d30:	4c08      	ldr	r4, [pc, #32]	; (8d54 <__aeabi_d2iz+0x68>)
    8d32:	46a4      	mov	ip, r4
    8d34:	4463      	add	r3, ip
    8d36:	409a      	lsls	r2, r3
    8d38:	0013      	movs	r3, r2
    8d3a:	4303      	orrs	r3, r0
    8d3c:	e7ee      	b.n	8d1c <__aeabi_d2iz+0x30>
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	000003fe 	.word	0x000003fe
    8d44:	0000041d 	.word	0x0000041d
    8d48:	00000433 	.word	0x00000433
    8d4c:	00000413 	.word	0x00000413
    8d50:	7fffffff 	.word	0x7fffffff
    8d54:	fffffbed 	.word	0xfffffbed

00008d58 <__aeabi_ui2d>:
    8d58:	b570      	push	{r4, r5, r6, lr}
    8d5a:	1e05      	subs	r5, r0, #0
    8d5c:	d028      	beq.n	8db0 <__aeabi_ui2d+0x58>
    8d5e:	f000 f833 	bl	8dc8 <__clzsi2>
    8d62:	4b15      	ldr	r3, [pc, #84]	; (8db8 <__aeabi_ui2d+0x60>)
    8d64:	4a15      	ldr	r2, [pc, #84]	; (8dbc <__aeabi_ui2d+0x64>)
    8d66:	1a1b      	subs	r3, r3, r0
    8d68:	1ad2      	subs	r2, r2, r3
    8d6a:	2a1f      	cmp	r2, #31
    8d6c:	dd16      	ble.n	8d9c <__aeabi_ui2d+0x44>
    8d6e:	002c      	movs	r4, r5
    8d70:	4a13      	ldr	r2, [pc, #76]	; (8dc0 <__aeabi_ui2d+0x68>)
    8d72:	2500      	movs	r5, #0
    8d74:	1ad2      	subs	r2, r2, r3
    8d76:	4094      	lsls	r4, r2
    8d78:	055a      	lsls	r2, r3, #21
    8d7a:	0324      	lsls	r4, r4, #12
    8d7c:	0b24      	lsrs	r4, r4, #12
    8d7e:	0d52      	lsrs	r2, r2, #21
    8d80:	2100      	movs	r1, #0
    8d82:	0324      	lsls	r4, r4, #12
    8d84:	0d0b      	lsrs	r3, r1, #20
    8d86:	0b24      	lsrs	r4, r4, #12
    8d88:	051b      	lsls	r3, r3, #20
    8d8a:	4323      	orrs	r3, r4
    8d8c:	4c0d      	ldr	r4, [pc, #52]	; (8dc4 <__aeabi_ui2d+0x6c>)
    8d8e:	0512      	lsls	r2, r2, #20
    8d90:	4023      	ands	r3, r4
    8d92:	4313      	orrs	r3, r2
    8d94:	005b      	lsls	r3, r3, #1
    8d96:	0028      	movs	r0, r5
    8d98:	0859      	lsrs	r1, r3, #1
    8d9a:	bd70      	pop	{r4, r5, r6, pc}
    8d9c:	210b      	movs	r1, #11
    8d9e:	002c      	movs	r4, r5
    8da0:	1a08      	subs	r0, r1, r0
    8da2:	40c4      	lsrs	r4, r0
    8da4:	4095      	lsls	r5, r2
    8da6:	0324      	lsls	r4, r4, #12
    8da8:	055a      	lsls	r2, r3, #21
    8daa:	0b24      	lsrs	r4, r4, #12
    8dac:	0d52      	lsrs	r2, r2, #21
    8dae:	e7e7      	b.n	8d80 <__aeabi_ui2d+0x28>
    8db0:	2200      	movs	r2, #0
    8db2:	2400      	movs	r4, #0
    8db4:	e7e4      	b.n	8d80 <__aeabi_ui2d+0x28>
    8db6:	46c0      	nop			; (mov r8, r8)
    8db8:	0000041e 	.word	0x0000041e
    8dbc:	00000433 	.word	0x00000433
    8dc0:	00000413 	.word	0x00000413
    8dc4:	800fffff 	.word	0x800fffff

00008dc8 <__clzsi2>:
    8dc8:	211c      	movs	r1, #28
    8dca:	2301      	movs	r3, #1
    8dcc:	041b      	lsls	r3, r3, #16
    8dce:	4298      	cmp	r0, r3
    8dd0:	d301      	bcc.n	8dd6 <__clzsi2+0xe>
    8dd2:	0c00      	lsrs	r0, r0, #16
    8dd4:	3910      	subs	r1, #16
    8dd6:	0a1b      	lsrs	r3, r3, #8
    8dd8:	4298      	cmp	r0, r3
    8dda:	d301      	bcc.n	8de0 <__clzsi2+0x18>
    8ddc:	0a00      	lsrs	r0, r0, #8
    8dde:	3908      	subs	r1, #8
    8de0:	091b      	lsrs	r3, r3, #4
    8de2:	4298      	cmp	r0, r3
    8de4:	d301      	bcc.n	8dea <__clzsi2+0x22>
    8de6:	0900      	lsrs	r0, r0, #4
    8de8:	3904      	subs	r1, #4
    8dea:	a202      	add	r2, pc, #8	; (adr r2, 8df4 <__clzsi2+0x2c>)
    8dec:	5c10      	ldrb	r0, [r2, r0]
    8dee:	1840      	adds	r0, r0, r1
    8df0:	4770      	bx	lr
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	02020304 	.word	0x02020304
    8df8:	01010101 	.word	0x01010101
	...

00008e04 <__libc_init_array>:
    8e04:	4b0e      	ldr	r3, [pc, #56]	; (8e40 <__libc_init_array+0x3c>)
    8e06:	b570      	push	{r4, r5, r6, lr}
    8e08:	2500      	movs	r5, #0
    8e0a:	001e      	movs	r6, r3
    8e0c:	4c0d      	ldr	r4, [pc, #52]	; (8e44 <__libc_init_array+0x40>)
    8e0e:	1ae4      	subs	r4, r4, r3
    8e10:	10a4      	asrs	r4, r4, #2
    8e12:	42a5      	cmp	r5, r4
    8e14:	d004      	beq.n	8e20 <__libc_init_array+0x1c>
    8e16:	00ab      	lsls	r3, r5, #2
    8e18:	58f3      	ldr	r3, [r6, r3]
    8e1a:	4798      	blx	r3
    8e1c:	3501      	adds	r5, #1
    8e1e:	e7f8      	b.n	8e12 <__libc_init_array+0xe>
    8e20:	f000 f8e0 	bl	8fe4 <_init>
    8e24:	4b08      	ldr	r3, [pc, #32]	; (8e48 <__libc_init_array+0x44>)
    8e26:	2500      	movs	r5, #0
    8e28:	001e      	movs	r6, r3
    8e2a:	4c08      	ldr	r4, [pc, #32]	; (8e4c <__libc_init_array+0x48>)
    8e2c:	1ae4      	subs	r4, r4, r3
    8e2e:	10a4      	asrs	r4, r4, #2
    8e30:	42a5      	cmp	r5, r4
    8e32:	d004      	beq.n	8e3e <__libc_init_array+0x3a>
    8e34:	00ab      	lsls	r3, r5, #2
    8e36:	58f3      	ldr	r3, [r6, r3]
    8e38:	4798      	blx	r3
    8e3a:	3501      	adds	r5, #1
    8e3c:	e7f8      	b.n	8e30 <__libc_init_array+0x2c>
    8e3e:	bd70      	pop	{r4, r5, r6, pc}
    8e40:	00008ff0 	.word	0x00008ff0
    8e44:	00008ff0 	.word	0x00008ff0
    8e48:	00008ff0 	.word	0x00008ff0
    8e4c:	00008ff4 	.word	0x00008ff4

00008e50 <memcpy>:
    8e50:	2300      	movs	r3, #0
    8e52:	b510      	push	{r4, lr}
    8e54:	429a      	cmp	r2, r3
    8e56:	d003      	beq.n	8e60 <memcpy+0x10>
    8e58:	5ccc      	ldrb	r4, [r1, r3]
    8e5a:	54c4      	strb	r4, [r0, r3]
    8e5c:	3301      	adds	r3, #1
    8e5e:	e7f9      	b.n	8e54 <memcpy+0x4>
    8e60:	bd10      	pop	{r4, pc}

00008e62 <memset>:
    8e62:	0003      	movs	r3, r0
    8e64:	1882      	adds	r2, r0, r2
    8e66:	4293      	cmp	r3, r2
    8e68:	d002      	beq.n	8e70 <memset+0xe>
    8e6a:	7019      	strb	r1, [r3, #0]
    8e6c:	3301      	adds	r3, #1
    8e6e:	e7fa      	b.n	8e66 <memset+0x4>
    8e70:	4770      	bx	lr
	...

00008e74 <tcc_modules>:
    8e74:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00008e80 <_tcc_gclk_ids>:
    8e80:	1a1a 001b                                   ....

00008e84 <_tcc_apbcmasks>:
    8e84:	0100 0000 0200 0000 0400 0000               ............

00008e90 <_tcc_maxs>:
    8e90:	ffff 00ff ffff 00ff ffff 0000               ............

00008e9c <_tcc_cc_nums>:
    8e9c:	0204 0002                                   ....

00008ea0 <_tcc_ow_nums>:
    8ea0:	0408 0002                                   ....

00008ea4 <_tcc_intflag>:
    8ea4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    8eb4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    8ec4:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    8ed4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    8ee4:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    8ef4:	423e 0000 42b6 0000 42b6 0000 425c 0000     >B...B...B..\B..
    8f04:	4256 0000 4262 0000 4244 0000 4268 0000     VB..bB..DB..hB..
    8f14:	429c 0000 445c 0000 44ac 0000 44ac 0000     .B..\D...D...D..
    8f24:	44a8 0000 444e 0000 446e 0000 443e 0000     .D..ND..nD..>D..
    8f34:	4480 0000 4492 0000 5b9e 0000 5b7c 0000     .D...D...[..|[..
    8f44:	5b5a 0000 5b28 0000 5af6 0000 4f54 5350     Z[..([...Z..TOPS
    8f54:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....
    8f64:	7d14 0000 7be2 0000 7ce8 0000 7bd8 0000     .}...{...|...{..
    8f74:	7ce8 0000 7cf2 0000 7ce8 0000 7bd8 0000     .|...|...|...{..
    8f84:	7be2 0000 7be2 0000 7cf2 0000 7bd8 0000     .{...{...|...{..
    8f94:	7bce 0000 7bce 0000 7bce 0000 7f44 0000     .{...{...{..D...
    8fa4:	8340 0000 8200 0000 8200 0000 81fe 0000     @...............
    8fb4:	8318 0000 8318 0000 830a 0000 81fe 0000     ................
    8fc4:	8318 0000 830a 0000 8318 0000 81fe 0000     ................
    8fd4:	8320 0000 8320 0000 8320 0000 8520 0000      ... ... ... ...

00008fe4 <_init>:
    8fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fe6:	46c0      	nop			; (mov r8, r8)
    8fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fea:	bc08      	pop	{r3}
    8fec:	469e      	mov	lr, r3
    8fee:	4770      	bx	lr

00008ff0 <__init_array_start>:
    8ff0:	000000dd 	.word	0x000000dd

00008ff4 <_fini>:
    8ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ff6:	46c0      	nop			; (mov r8, r8)
    8ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ffa:	bc08      	pop	{r3}
    8ffc:	469e      	mov	lr, r3
    8ffe:	4770      	bx	lr

00009000 <__fini_array_start>:
    9000:	000000b5 	.word	0x000000b5
