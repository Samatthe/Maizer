
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004708  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00004708  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c8  20000004  0000470c  00010004  2**2
                  ALLOC
  3 .stack        00002004  200001cc  000048d4  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000292f7  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d7c  00000000  00000000  0003937e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003280  00000000  00000000  0003c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000948  00000000  00000000  0003f37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000818  00000000  00000000  0003fcc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007e14  00000000  00000000  000404da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d21b  00000000  00000000  000482ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e09e  00000000  00000000  00055509  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f40  00000000  00000000  000e35a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021d0 	.word	0x200021d0
       4:	00002c21 	.word	0x00002c21
       8:	00002d19 	.word	0x00002d19
       c:	00002d19 	.word	0x00002d19
	...
      2c:	00002d19 	.word	0x00002d19
	...
      38:	00002d19 	.word	0x00002d19
      3c:	00002d19 	.word	0x00002d19
      40:	00002d19 	.word	0x00002d19
      44:	00002d19 	.word	0x00002d19
      48:	00002d19 	.word	0x00002d19
      4c:	00000935 	.word	0x00000935
      50:	00000ac1 	.word	0x00000ac1
      54:	00002d19 	.word	0x00002d19
      58:	00002d19 	.word	0x00002d19
      5c:	00002d19 	.word	0x00002d19
      60:	00002d19 	.word	0x00002d19
      64:	00001dfd 	.word	0x00001dfd
      68:	00001e11 	.word	0x00001e11
      6c:	00001e25 	.word	0x00001e25
      70:	00001e39 	.word	0x00001e39
      74:	00001e4d 	.word	0x00001e4d
      78:	00001e61 	.word	0x00001e61
      7c:	00000b2d 	.word	0x00000b2d
      80:	00000b41 	.word	0x00000b41
      84:	00000b55 	.word	0x00000b55
      88:	00000be1 	.word	0x00000be1
      8c:	00000bf5 	.word	0x00000bf5
      90:	00000c09 	.word	0x00000c09
	...
      9c:	00002d19 	.word	0x00002d19
      a0:	00002d19 	.word	0x00002d19
      a4:	00002d19 	.word	0x00002d19
      a8:	00002d19 	.word	0x00002d19
      ac:	00002d19 	.word	0x00002d19
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00004708 	.word	0x00004708

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00004708 	.word	0x00004708
     108:	20000008 	.word	0x20000008
     10c:	00004708 	.word	0x00004708
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	1c02      	adds	r2, r0, #0
     18c:	1dfb      	adds	r3, r7, #7
     18e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     190:	4b06      	ldr	r3, [pc, #24]	; (1ac <system_interrupt_enable+0x28>)
     192:	1dfa      	adds	r2, r7, #7
     194:	7812      	ldrb	r2, [r2, #0]
     196:	1c11      	adds	r1, r2, #0
     198:	221f      	movs	r2, #31
     19a:	400a      	ands	r2, r1
     19c:	2101      	movs	r1, #1
     19e:	4091      	lsls	r1, r2
     1a0:	1c0a      	adds	r2, r1, #0
     1a2:	601a      	str	r2, [r3, #0]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	e000e100 	.word	0xe000e100

000001b0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1b6:	4b10      	ldr	r3, [pc, #64]	; (1f8 <extint_is_syncing+0x48>)
     1b8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1ba:	2300      	movs	r3, #0
     1bc:	607b      	str	r3, [r7, #4]
     1be:	e012      	b.n	1e6 <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	009b      	lsls	r3, r3, #2
     1c4:	2208      	movs	r2, #8
     1c6:	4694      	mov	ip, r2
     1c8:	44bc      	add	ip, r7
     1ca:	4463      	add	r3, ip
     1cc:	3b08      	subs	r3, #8
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	785b      	ldrb	r3, [r3, #1]
     1d2:	b2db      	uxtb	r3, r3
     1d4:	b2db      	uxtb	r3, r3
     1d6:	b25b      	sxtb	r3, r3
     1d8:	2b00      	cmp	r3, #0
     1da:	da01      	bge.n	1e0 <extint_is_syncing+0x30>
			return true;
     1dc:	2301      	movs	r3, #1
     1de:	e006      	b.n	1ee <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	3301      	adds	r3, #1
     1e4:	607b      	str	r3, [r7, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	2b00      	cmp	r3, #0
     1ea:	d0e9      	beq.n	1c0 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     1ec:	2300      	movs	r3, #0
}
     1ee:	1c18      	adds	r0, r3, #0
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	40001800 	.word	0x40001800

000001fc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     202:	4b2c      	ldr	r3, [pc, #176]	; (2b4 <_system_extint_init+0xb8>)
     204:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     206:	2000      	movs	r0, #0
     208:	2140      	movs	r1, #64	; 0x40
     20a:	4b2b      	ldr	r3, [pc, #172]	; (2b8 <_system_extint_init+0xbc>)
     20c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     20e:	1c3b      	adds	r3, r7, #0
     210:	1c18      	adds	r0, r3, #0
     212:	4b2a      	ldr	r3, [pc, #168]	; (2bc <_system_extint_init+0xc0>)
     214:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     216:	1c3b      	adds	r3, r7, #0
     218:	2200      	movs	r2, #0
     21a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     21c:	1c3b      	adds	r3, r7, #0
     21e:	2005      	movs	r0, #5
     220:	1c19      	adds	r1, r3, #0
     222:	4b27      	ldr	r3, [pc, #156]	; (2c0 <_system_extint_init+0xc4>)
     224:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     226:	2005      	movs	r0, #5
     228:	4b26      	ldr	r3, [pc, #152]	; (2c4 <_system_extint_init+0xc8>)
     22a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22c:	2300      	movs	r3, #0
     22e:	60fb      	str	r3, [r7, #12]
     230:	e018      	b.n	264 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     232:	68fb      	ldr	r3, [r7, #12]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b0c      	subs	r3, #12
     240:	681a      	ldr	r2, [r3, #0]
     242:	68fb      	ldr	r3, [r7, #12]
     244:	009b      	lsls	r3, r3, #2
     246:	2110      	movs	r1, #16
     248:	468c      	mov	ip, r1
     24a:	44bc      	add	ip, r7
     24c:	4463      	add	r3, ip
     24e:	3b0c      	subs	r3, #12
     250:	681b      	ldr	r3, [r3, #0]
     252:	781b      	ldrb	r3, [r3, #0]
     254:	b2db      	uxtb	r3, r3
     256:	2101      	movs	r1, #1
     258:	430b      	orrs	r3, r1
     25a:	b2db      	uxtb	r3, r3
     25c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     25e:	68fb      	ldr	r3, [r7, #12]
     260:	3301      	adds	r3, #1
     262:	60fb      	str	r3, [r7, #12]
     264:	68fb      	ldr	r3, [r7, #12]
     266:	2b00      	cmp	r3, #0
     268:	d0e3      	beq.n	232 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	4b16      	ldr	r3, [pc, #88]	; (2c8 <_system_extint_init+0xcc>)
     26e:	4798      	blx	r3
     270:	1e03      	subs	r3, r0, #0
     272:	d1fb      	bne.n	26c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     274:	230b      	movs	r3, #11
     276:	18fb      	adds	r3, r7, r3
     278:	2200      	movs	r2, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	e00d      	b.n	29a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     27e:	230b      	movs	r3, #11
     280:	18fb      	adds	r3, r7, r3
     282:	781a      	ldrb	r2, [r3, #0]
     284:	4b11      	ldr	r3, [pc, #68]	; (2cc <_system_extint_init+0xd0>)
     286:	0092      	lsls	r2, r2, #2
     288:	2100      	movs	r1, #0
     28a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     28c:	230b      	movs	r3, #11
     28e:	18fb      	adds	r3, r7, r3
     290:	781a      	ldrb	r2, [r3, #0]
     292:	230b      	movs	r3, #11
     294:	18fb      	adds	r3, r7, r3
     296:	3201      	adds	r2, #1
     298:	701a      	strb	r2, [r3, #0]
     29a:	230b      	movs	r3, #11
     29c:	18fb      	adds	r3, r7, r3
     29e:	781b      	ldrb	r3, [r3, #0]
     2a0:	2b0f      	cmp	r3, #15
     2a2:	d9ec      	bls.n	27e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     2a4:	2004      	movs	r0, #4
     2a6:	4b0a      	ldr	r3, [pc, #40]	; (2d0 <_system_extint_init+0xd4>)
     2a8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     2aa:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <_system_extint_init+0xd8>)
     2ac:	4798      	blx	r3
}
     2ae:	46bd      	mov	sp, r7
     2b0:	b004      	add	sp, #16
     2b2:	bd80      	pop	{r7, pc}
     2b4:	40001800 	.word	0x40001800
     2b8:	00000129 	.word	0x00000129
     2bc:	00000115 	.word	0x00000115
     2c0:	000028ad 	.word	0x000028ad
     2c4:	000028f1 	.word	0x000028f1
     2c8:	000001b1 	.word	0x000001b1
     2cc:	20000060 	.word	0x20000060
     2d0:	00000185 	.word	0x00000185
     2d4:	000002d9 	.word	0x000002d9

000002d8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     2d8:	b580      	push	{r7, lr}
     2da:	b082      	sub	sp, #8
     2dc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2de:	4b14      	ldr	r3, [pc, #80]	; (330 <_extint_enable+0x58>)
     2e0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2e2:	2300      	movs	r3, #0
     2e4:	607b      	str	r3, [r7, #4]
     2e6:	e018      	b.n	31a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	009b      	lsls	r3, r3, #2
     2ec:	2208      	movs	r2, #8
     2ee:	4694      	mov	ip, r2
     2f0:	44bc      	add	ip, r7
     2f2:	4463      	add	r3, ip
     2f4:	3b08      	subs	r3, #8
     2f6:	681a      	ldr	r2, [r3, #0]
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	009b      	lsls	r3, r3, #2
     2fc:	2108      	movs	r1, #8
     2fe:	468c      	mov	ip, r1
     300:	44bc      	add	ip, r7
     302:	4463      	add	r3, ip
     304:	3b08      	subs	r3, #8
     306:	681b      	ldr	r3, [r3, #0]
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	b2db      	uxtb	r3, r3
     30c:	2102      	movs	r1, #2
     30e:	430b      	orrs	r3, r1
     310:	b2db      	uxtb	r3, r3
     312:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     314:	687b      	ldr	r3, [r7, #4]
     316:	3301      	adds	r3, #1
     318:	607b      	str	r3, [r7, #4]
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	2b00      	cmp	r3, #0
     31e:	d0e3      	beq.n	2e8 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     320:	46c0      	nop			; (mov r8, r8)
     322:	4b04      	ldr	r3, [pc, #16]	; (334 <_extint_enable+0x5c>)
     324:	4798      	blx	r3
     326:	1e03      	subs	r3, r0, #0
     328:	d1fb      	bne.n	322 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     32a:	46bd      	mov	sp, r7
     32c:	b002      	add	sp, #8
     32e:	bd80      	pop	{r7, pc}
     330:	40001800 	.word	0x40001800
     334:	000001b1 	.word	0x000001b1

00000338 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     338:	b580      	push	{r7, lr}
     33a:	b082      	sub	sp, #8
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     340:	687b      	ldr	r3, [r7, #4]
     342:	2200      	movs	r2, #0
     344:	701a      	strb	r2, [r3, #0]
}
     346:	46bd      	mov	sp, r7
     348:	b002      	add	sp, #8
     34a:	bd80      	pop	{r7, pc}

0000034c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	1c02      	adds	r2, r0, #0
     354:	6039      	str	r1, [r7, #0]
     356:	1dfb      	adds	r3, r7, #7
     358:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     35a:	1dfb      	adds	r3, r7, #7
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	2b01      	cmp	r3, #1
     360:	d00a      	beq.n	378 <system_apb_clock_set_mask+0x2c>
     362:	2b02      	cmp	r3, #2
     364:	d00f      	beq.n	386 <system_apb_clock_set_mask+0x3a>
     366:	2b00      	cmp	r3, #0
     368:	d114      	bne.n	394 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     36a:	4b0e      	ldr	r3, [pc, #56]	; (3a4 <system_apb_clock_set_mask+0x58>)
     36c:	4a0d      	ldr	r2, [pc, #52]	; (3a4 <system_apb_clock_set_mask+0x58>)
     36e:	6991      	ldr	r1, [r2, #24]
     370:	683a      	ldr	r2, [r7, #0]
     372:	430a      	orrs	r2, r1
     374:	619a      	str	r2, [r3, #24]
			break;
     376:	e00f      	b.n	398 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <system_apb_clock_set_mask+0x58>)
     37a:	4a0a      	ldr	r2, [pc, #40]	; (3a4 <system_apb_clock_set_mask+0x58>)
     37c:	69d1      	ldr	r1, [r2, #28]
     37e:	683a      	ldr	r2, [r7, #0]
     380:	430a      	orrs	r2, r1
     382:	61da      	str	r2, [r3, #28]
			break;
     384:	e008      	b.n	398 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <system_apb_clock_set_mask+0x58>)
     388:	4a06      	ldr	r2, [pc, #24]	; (3a4 <system_apb_clock_set_mask+0x58>)
     38a:	6a11      	ldr	r1, [r2, #32]
     38c:	683a      	ldr	r2, [r7, #0]
     38e:	430a      	orrs	r2, r1
     390:	621a      	str	r2, [r3, #32]
			break;
     392:	e001      	b.n	398 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     394:	2317      	movs	r3, #23
     396:	e000      	b.n	39a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     398:	2300      	movs	r3, #0
}
     39a:	1c18      	adds	r0, r3, #0
     39c:	46bd      	mov	sp, r7
     39e:	b002      	add	sp, #8
     3a0:	bd80      	pop	{r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	40000400 	.word	0x40000400

000003a8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	1c02      	adds	r2, r0, #0
     3b0:	1dfb      	adds	r3, r7, #7
     3b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3b4:	4b06      	ldr	r3, [pc, #24]	; (3d0 <system_interrupt_enable+0x28>)
     3b6:	1dfa      	adds	r2, r7, #7
     3b8:	7812      	ldrb	r2, [r2, #0]
     3ba:	1c11      	adds	r1, r2, #0
     3bc:	221f      	movs	r2, #31
     3be:	400a      	ands	r2, r1
     3c0:	2101      	movs	r1, #1
     3c2:	4091      	lsls	r1, r2
     3c4:	1c0a      	adds	r2, r1, #0
     3c6:	601a      	str	r2, [r3, #0]
}
     3c8:	46bd      	mov	sp, r7
     3ca:	b002      	add	sp, #8
     3cc:	bd80      	pop	{r7, pc}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	e000e100 	.word	0xe000e100

000003d4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b082      	sub	sp, #8
     3d8:	af00      	add	r7, sp, #0
     3da:	1c02      	adds	r2, r0, #0
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3e0:	4a07      	ldr	r2, [pc, #28]	; (400 <system_interrupt_disable+0x2c>)
     3e2:	1dfb      	adds	r3, r7, #7
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	1c19      	adds	r1, r3, #0
     3e8:	231f      	movs	r3, #31
     3ea:	400b      	ands	r3, r1
     3ec:	2101      	movs	r1, #1
     3ee:	4099      	lsls	r1, r3
     3f0:	1c0b      	adds	r3, r1, #0
     3f2:	1c19      	adds	r1, r3, #0
     3f4:	2380      	movs	r3, #128	; 0x80
     3f6:	50d1      	str	r1, [r2, r3]
}
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	e000e100 	.word	0xe000e100

00000404 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     404:	b580      	push	{r7, lr}
     406:	b084      	sub	sp, #16
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     412:	68fb      	ldr	r3, [r7, #12]
     414:	7a9b      	ldrb	r3, [r3, #10]
     416:	b2db      	uxtb	r3, r3
     418:	b2db      	uxtb	r3, r3
     41a:	b25b      	sxtb	r3, r3
     41c:	2b00      	cmp	r3, #0
     41e:	da01      	bge.n	424 <rtc_count_is_syncing+0x20>
                return true;
     420:	2301      	movs	r3, #1
     422:	e000      	b.n	426 <rtc_count_is_syncing+0x22>
        }

        return false;
     424:	2300      	movs	r3, #0
}
     426:	1c18      	adds	r0, r3, #0
     428:	46bd      	mov	sp, r7
     42a:	b004      	add	sp, #16
     42c:	bd80      	pop	{r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)

00000430 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     430:	b580      	push	{r7, lr}
     432:	b084      	sub	sp, #16
     434:	af00      	add	r7, sp, #0
     436:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	687b      	ldr	r3, [r7, #4]
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     43e:	2003      	movs	r0, #3
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <rtc_count_enable+0x38>)
     442:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     444:	46c0      	nop			; (mov r8, r8)
     446:	687b      	ldr	r3, [r7, #4]
     448:	1c18      	adds	r0, r3, #0
     44a:	4b08      	ldr	r3, [pc, #32]	; (46c <rtc_count_enable+0x3c>)
     44c:	4798      	blx	r3
     44e:	1e03      	subs	r3, r0, #0
     450:	d1f9      	bne.n	446 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     452:	68fb      	ldr	r3, [r7, #12]
     454:	881b      	ldrh	r3, [r3, #0]
     456:	b29b      	uxth	r3, r3
     458:	2202      	movs	r2, #2
     45a:	4313      	orrs	r3, r2
     45c:	b29a      	uxth	r2, r3
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	801a      	strh	r2, [r3, #0]
}
     462:	46bd      	mov	sp, r7
     464:	b004      	add	sp, #16
     466:	bd80      	pop	{r7, pc}
     468:	000003a9 	.word	0x000003a9
     46c:	00000405 	.word	0x00000405

00000470 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     470:	b580      	push	{r7, lr}
     472:	b084      	sub	sp, #16
     474:	af00      	add	r7, sp, #0
     476:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     478:	687b      	ldr	r3, [r7, #4]
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     47e:	2003      	movs	r0, #3
     480:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_count_disable+0x38>)
     482:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     484:	46c0      	nop			; (mov r8, r8)
     486:	687b      	ldr	r3, [r7, #4]
     488:	1c18      	adds	r0, r3, #0
     48a:	4b08      	ldr	r3, [pc, #32]	; (4ac <rtc_count_disable+0x3c>)
     48c:	4798      	blx	r3
     48e:	1e03      	subs	r3, r0, #0
     490:	d1f9      	bne.n	486 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     492:	68fb      	ldr	r3, [r7, #12]
     494:	881b      	ldrh	r3, [r3, #0]
     496:	b29b      	uxth	r3, r3
     498:	2202      	movs	r2, #2
     49a:	4393      	bics	r3, r2
     49c:	b29a      	uxth	r2, r3
     49e:	68fb      	ldr	r3, [r7, #12]
     4a0:	801a      	strh	r2, [r3, #0]
}
     4a2:	46bd      	mov	sp, r7
     4a4:	b004      	add	sp, #16
     4a6:	bd80      	pop	{r7, pc}
     4a8:	000003d5 	.word	0x000003d5
     4ac:	00000405 	.word	0x00000405

000004b0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	1c18      	adds	r0, r3, #0
     4c2:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <rtc_count_reset+0x48>)
     4c4:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	2200      	movs	r2, #0
     4d0:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	1c18      	adds	r0, r3, #0
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <rtc_count_reset+0x4c>)
     4da:	4798      	blx	r3
     4dc:	1e03      	subs	r3, r0, #0
     4de:	d1f9      	bne.n	4d4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	881b      	ldrh	r3, [r3, #0]
     4e4:	b29b      	uxth	r3, r3
     4e6:	2201      	movs	r2, #1
     4e8:	4313      	orrs	r3, r2
     4ea:	b29a      	uxth	r2, r3
     4ec:	68fb      	ldr	r3, [r7, #12]
     4ee:	801a      	strh	r2, [r3, #0]
}
     4f0:	46bd      	mov	sp, r7
     4f2:	b004      	add	sp, #16
     4f4:	bd80      	pop	{r7, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00000471 	.word	0x00000471
     4fc:	00000405 	.word	0x00000405

00000500 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     500:	b580      	push	{r7, lr}
     502:	b084      	sub	sp, #16
     504:	af00      	add	r7, sp, #0
     506:	6078      	str	r0, [r7, #4]
     508:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	681b      	ldr	r3, [r3, #0]
     50e:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     510:	683b      	ldr	r3, [r7, #0]
     512:	881a      	ldrh	r2, [r3, #0]
     514:	68bb      	ldr	r3, [r7, #8]
     516:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     518:	683b      	ldr	r3, [r7, #0]
     51a:	789b      	ldrb	r3, [r3, #2]
     51c:	2b00      	cmp	r3, #0
     51e:	d03c      	beq.n	59a <_rtc_count_set_config+0x9a>
     520:	2b01      	cmp	r3, #1
     522:	d000      	beq.n	526 <_rtc_count_set_config+0x26>
     524:	e070      	b.n	608 <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     526:	68bb      	ldr	r3, [r7, #8]
     528:	881b      	ldrh	r3, [r3, #0]
     52a:	b29a      	uxth	r2, r3
     52c:	68bb      	ldr	r3, [r7, #8]
     52e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     530:	683b      	ldr	r3, [r7, #0]
     532:	78db      	ldrb	r3, [r3, #3]
     534:	2b00      	cmp	r3, #0
     536:	d007      	beq.n	548 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     538:	68bb      	ldr	r3, [r7, #8]
     53a:	881b      	ldrh	r3, [r3, #0]
     53c:	b29b      	uxth	r3, r3
     53e:	2280      	movs	r2, #128	; 0x80
     540:	4313      	orrs	r3, r2
     542:	b29a      	uxth	r2, r3
     544:	68bb      	ldr	r3, [r7, #8]
     546:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     548:	230f      	movs	r3, #15
     54a:	18fb      	adds	r3, r7, r3
     54c:	2200      	movs	r2, #0
     54e:	701a      	strb	r2, [r3, #0]
     550:	e01d      	b.n	58e <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     552:	46c0      	nop			; (mov r8, r8)
     554:	687b      	ldr	r3, [r7, #4]
     556:	1c18      	adds	r0, r3, #0
     558:	4b35      	ldr	r3, [pc, #212]	; (630 <_rtc_count_set_config+0x130>)
     55a:	4798      	blx	r3
     55c:	1e03      	subs	r3, r0, #0
     55e:	d1f9      	bne.n	554 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     560:	230f      	movs	r3, #15
     562:	18fb      	adds	r3, r7, r3
     564:	781a      	ldrb	r2, [r3, #0]
     566:	683b      	ldr	r3, [r7, #0]
     568:	3202      	adds	r2, #2
     56a:	0092      	lsls	r2, r2, #2
     56c:	58d2      	ldr	r2, [r2, r3]
     56e:	6879      	ldr	r1, [r7, #4]
     570:	230f      	movs	r3, #15
     572:	18fb      	adds	r3, r7, r3
     574:	781b      	ldrb	r3, [r3, #0]
     576:	1c08      	adds	r0, r1, #0
     578:	1c11      	adds	r1, r2, #0
     57a:	1c1a      	adds	r2, r3, #0
     57c:	4b2d      	ldr	r3, [pc, #180]	; (634 <_rtc_count_set_config+0x134>)
     57e:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     580:	230f      	movs	r3, #15
     582:	18fb      	adds	r3, r7, r3
     584:	781a      	ldrb	r2, [r3, #0]
     586:	230f      	movs	r3, #15
     588:	18fb      	adds	r3, r7, r3
     58a:	3201      	adds	r2, #1
     58c:	701a      	strb	r2, [r3, #0]
     58e:	230f      	movs	r3, #15
     590:	18fb      	adds	r3, r7, r3
     592:	781b      	ldrb	r3, [r3, #0]
     594:	2b00      	cmp	r3, #0
     596:	d0dc      	beq.n	552 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     598:	e038      	b.n	60c <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     59a:	68bb      	ldr	r3, [r7, #8]
     59c:	881b      	ldrh	r3, [r3, #0]
     59e:	b29b      	uxth	r3, r3
     5a0:	2204      	movs	r2, #4
     5a2:	4313      	orrs	r3, r2
     5a4:	b29a      	uxth	r2, r3
     5a6:	68bb      	ldr	r3, [r7, #8]
     5a8:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	78db      	ldrb	r3, [r3, #3]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d001      	beq.n	5b6 <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     5b2:	2317      	movs	r3, #23
     5b4:	e038      	b.n	628 <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     5b6:	230e      	movs	r3, #14
     5b8:	18fb      	adds	r3, r7, r3
     5ba:	2200      	movs	r2, #0
     5bc:	701a      	strb	r2, [r3, #0]
     5be:	e01d      	b.n	5fc <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     5c0:	46c0      	nop			; (mov r8, r8)
     5c2:	687b      	ldr	r3, [r7, #4]
     5c4:	1c18      	adds	r0, r3, #0
     5c6:	4b1a      	ldr	r3, [pc, #104]	; (630 <_rtc_count_set_config+0x130>)
     5c8:	4798      	blx	r3
     5ca:	1e03      	subs	r3, r0, #0
     5cc:	d1f9      	bne.n	5c2 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     5ce:	230e      	movs	r3, #14
     5d0:	18fb      	adds	r3, r7, r3
     5d2:	781a      	ldrb	r2, [r3, #0]
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	3202      	adds	r2, #2
     5d8:	0092      	lsls	r2, r2, #2
     5da:	58d2      	ldr	r2, [r2, r3]
     5dc:	6879      	ldr	r1, [r7, #4]
     5de:	230e      	movs	r3, #14
     5e0:	18fb      	adds	r3, r7, r3
     5e2:	781b      	ldrb	r3, [r3, #0]
     5e4:	1c08      	adds	r0, r1, #0
     5e6:	1c11      	adds	r1, r2, #0
     5e8:	1c1a      	adds	r2, r3, #0
     5ea:	4b12      	ldr	r3, [pc, #72]	; (634 <_rtc_count_set_config+0x134>)
     5ec:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     5ee:	230e      	movs	r3, #14
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	781a      	ldrb	r2, [r3, #0]
     5f4:	230e      	movs	r3, #14
     5f6:	18fb      	adds	r3, r7, r3
     5f8:	3201      	adds	r2, #1
     5fa:	701a      	strb	r2, [r3, #0]
     5fc:	230e      	movs	r3, #14
     5fe:	18fb      	adds	r3, r7, r3
     600:	781b      	ldrb	r3, [r3, #0]
     602:	2b01      	cmp	r3, #1
     604:	d9dc      	bls.n	5c0 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     606:	e001      	b.n	60c <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     608:	2317      	movs	r3, #23
     60a:	e00d      	b.n	628 <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     60c:	683b      	ldr	r3, [r7, #0]
     60e:	791b      	ldrb	r3, [r3, #4]
     610:	2b00      	cmp	r3, #0
     612:	d008      	beq.n	626 <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     614:	68bb      	ldr	r3, [r7, #8]
     616:	885b      	ldrh	r3, [r3, #2]
     618:	b29b      	uxth	r3, r3
     61a:	2280      	movs	r2, #128	; 0x80
     61c:	01d2      	lsls	r2, r2, #7
     61e:	4313      	orrs	r3, r2
     620:	b29a      	uxth	r2, r3
     622:	68bb      	ldr	r3, [r7, #8]
     624:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     626:	2300      	movs	r3, #0
}
     628:	1c18      	adds	r0, r3, #0
     62a:	46bd      	mov	sp, r7
     62c:	b004      	add	sp, #16
     62e:	bd80      	pop	{r7, pc}
     630:	00000405 	.word	0x00000405
     634:	00000791 	.word	0x00000791

00000638 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     638:	b580      	push	{r7, lr}
     63a:	b086      	sub	sp, #24
     63c:	af00      	add	r7, sp, #0
     63e:	60f8      	str	r0, [r7, #12]
     640:	60b9      	str	r1, [r7, #8]
     642:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     644:	68fb      	ldr	r3, [r7, #12]
     646:	68ba      	ldr	r2, [r7, #8]
     648:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     64a:	2000      	movs	r0, #0
     64c:	2120      	movs	r1, #32
     64e:	4b17      	ldr	r3, [pc, #92]	; (6ac <rtc_count_init+0x74>)
     650:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     652:	2314      	movs	r3, #20
     654:	18fb      	adds	r3, r7, r3
     656:	1c18      	adds	r0, r3, #0
     658:	4b15      	ldr	r3, [pc, #84]	; (6b0 <rtc_count_init+0x78>)
     65a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     65c:	2314      	movs	r3, #20
     65e:	18fb      	adds	r3, r7, r3
     660:	2202      	movs	r2, #2
     662:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     664:	2314      	movs	r3, #20
     666:	18fb      	adds	r3, r7, r3
     668:	2004      	movs	r0, #4
     66a:	1c19      	adds	r1, r3, #0
     66c:	4b11      	ldr	r3, [pc, #68]	; (6b4 <rtc_count_init+0x7c>)
     66e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     670:	2004      	movs	r0, #4
     672:	4b11      	ldr	r3, [pc, #68]	; (6b8 <rtc_count_init+0x80>)
     674:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     676:	68fb      	ldr	r3, [r7, #12]
     678:	1c18      	adds	r0, r3, #0
     67a:	4b10      	ldr	r3, [pc, #64]	; (6bc <rtc_count_init+0x84>)
     67c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	789a      	ldrb	r2, [r3, #2]
     682:	68fb      	ldr	r3, [r7, #12]
     684:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     686:	687b      	ldr	r3, [r7, #4]
     688:	791a      	ldrb	r2, [r3, #4]
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     68e:	4b0c      	ldr	r3, [pc, #48]	; (6c0 <rtc_count_init+0x88>)
     690:	68fa      	ldr	r2, [r7, #12]
     692:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     694:	68fa      	ldr	r2, [r7, #12]
     696:	687b      	ldr	r3, [r7, #4]
     698:	1c10      	adds	r0, r2, #0
     69a:	1c19      	adds	r1, r3, #0
     69c:	4b09      	ldr	r3, [pc, #36]	; (6c4 <rtc_count_init+0x8c>)
     69e:	4798      	blx	r3
     6a0:	1c03      	adds	r3, r0, #0
}
     6a2:	1c18      	adds	r0, r3, #0
     6a4:	46bd      	mov	sp, r7
     6a6:	b006      	add	sp, #24
     6a8:	bd80      	pop	{r7, pc}
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	0000034d 	.word	0x0000034d
     6b0:	00000339 	.word	0x00000339
     6b4:	000028ad 	.word	0x000028ad
     6b8:	000028f1 	.word	0x000028f1
     6bc:	000004b1 	.word	0x000004b1
     6c0:	200000a0 	.word	0x200000a0
     6c4:	00000501 	.word	0x00000501

000006c8 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b084      	sub	sp, #16
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
     6d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     6d8:	46c0      	nop			; (mov r8, r8)
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	1c18      	adds	r0, r3, #0
     6de:	4b10      	ldr	r3, [pc, #64]	; (720 <rtc_count_set_count+0x58>)
     6e0:	4798      	blx	r3
     6e2:	1e03      	subs	r3, r0, #0
     6e4:	d1f9      	bne.n	6da <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	791b      	ldrb	r3, [r3, #4]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d005      	beq.n	6fa <rtc_count_set_count+0x32>
     6ee:	2b01      	cmp	r3, #1
     6f0:	d10e      	bne.n	710 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     6f2:	68fb      	ldr	r3, [r7, #12]
     6f4:	683a      	ldr	r2, [r7, #0]
     6f6:	611a      	str	r2, [r3, #16]

			break;
     6f8:	e00c      	b.n	714 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     6fa:	683b      	ldr	r3, [r7, #0]
     6fc:	4a09      	ldr	r2, [pc, #36]	; (724 <rtc_count_set_count+0x5c>)
     6fe:	4293      	cmp	r3, r2
     700:	d901      	bls.n	706 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     702:	2317      	movs	r3, #23
     704:	e007      	b.n	716 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     706:	683b      	ldr	r3, [r7, #0]
     708:	b29a      	uxth	r2, r3
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	821a      	strh	r2, [r3, #16]

			break;
     70e:	e001      	b.n	714 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     710:	2317      	movs	r3, #23
     712:	e000      	b.n	716 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     714:	2300      	movs	r3, #0
}
     716:	1c18      	adds	r0, r3, #0
     718:	46bd      	mov	sp, r7
     71a:	b004      	add	sp, #16
     71c:	bd80      	pop	{r7, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	00000405 	.word	0x00000405
     724:	0000ffff 	.word	0x0000ffff

00000728 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     728:	b580      	push	{r7, lr}
     72a:	b084      	sub	sp, #16
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     730:	687b      	ldr	r3, [r7, #4]
     732:	681b      	ldr	r3, [r3, #0]
     734:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     736:	687b      	ldr	r3, [r7, #4]
     738:	795b      	ldrb	r3, [r3, #5]
     73a:	2201      	movs	r2, #1
     73c:	4053      	eors	r3, r2
     73e:	b2db      	uxtb	r3, r3
     740:	2b00      	cmp	r3, #0
     742:	d009      	beq.n	758 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     744:	68bb      	ldr	r3, [r7, #8]
     746:	4a10      	ldr	r2, [pc, #64]	; (788 <rtc_count_get_count+0x60>)
     748:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	1c18      	adds	r0, r3, #0
     750:	4b0e      	ldr	r3, [pc, #56]	; (78c <rtc_count_get_count+0x64>)
     752:	4798      	blx	r3
     754:	1e03      	subs	r3, r0, #0
     756:	d1f9      	bne.n	74c <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     758:	687b      	ldr	r3, [r7, #4]
     75a:	791b      	ldrb	r3, [r3, #4]
     75c:	2b00      	cmp	r3, #0
     75e:	d005      	beq.n	76c <rtc_count_get_count+0x44>
     760:	2b01      	cmp	r3, #1
     762:	d108      	bne.n	776 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     764:	68bb      	ldr	r3, [r7, #8]
     766:	691b      	ldr	r3, [r3, #16]
     768:	60fb      	str	r3, [r7, #12]

			break;
     76a:	e007      	b.n	77c <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     76c:	68bb      	ldr	r3, [r7, #8]
     76e:	8a1b      	ldrh	r3, [r3, #16]
     770:	b29b      	uxth	r3, r3
     772:	60fb      	str	r3, [r7, #12]

			break;
     774:	e002      	b.n	77c <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     776:	2300      	movs	r3, #0
     778:	60fb      	str	r3, [r7, #12]
			break;
     77a:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     77c:	68fb      	ldr	r3, [r7, #12]
}
     77e:	1c18      	adds	r0, r3, #0
     780:	46bd      	mov	sp, r7
     782:	b004      	add	sp, #16
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	ffff8000 	.word	0xffff8000
     78c:	00000405 	.word	0x00000405

00000790 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     790:	b580      	push	{r7, lr}
     792:	b086      	sub	sp, #24
     794:	af00      	add	r7, sp, #0
     796:	60f8      	str	r0, [r7, #12]
     798:	60b9      	str	r1, [r7, #8]
     79a:	1dfb      	adds	r3, r7, #7
     79c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     79e:	68fb      	ldr	r3, [r7, #12]
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     7a4:	46c0      	nop			; (mov r8, r8)
     7a6:	68fb      	ldr	r3, [r7, #12]
     7a8:	1c18      	adds	r0, r3, #0
     7aa:	4b1a      	ldr	r3, [pc, #104]	; (814 <rtc_count_set_compare+0x84>)
     7ac:	4798      	blx	r3
     7ae:	1e03      	subs	r3, r0, #0
     7b0:	d1f9      	bne.n	7a6 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	791b      	ldrb	r3, [r3, #4]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d00f      	beq.n	7da <rtc_count_set_compare+0x4a>
     7ba:	2b01      	cmp	r3, #1
     7bc:	d122      	bne.n	804 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     7be:	1dfb      	adds	r3, r7, #7
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	2b01      	cmp	r3, #1
     7c4:	d901      	bls.n	7ca <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     7c6:	2317      	movs	r3, #23
     7c8:	e01f      	b.n	80a <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     7ca:	1dfb      	adds	r3, r7, #7
     7cc:	781a      	ldrb	r2, [r3, #0]
     7ce:	697b      	ldr	r3, [r7, #20]
     7d0:	3206      	adds	r2, #6
     7d2:	0092      	lsls	r2, r2, #2
     7d4:	68b9      	ldr	r1, [r7, #8]
     7d6:	50d1      	str	r1, [r2, r3]

			break;
     7d8:	e016      	b.n	808 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     7da:	1dfb      	adds	r3, r7, #7
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	2b02      	cmp	r3, #2
     7e0:	d901      	bls.n	7e6 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     7e2:	2317      	movs	r3, #23
     7e4:	e011      	b.n	80a <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     7e6:	68bb      	ldr	r3, [r7, #8]
     7e8:	4a0b      	ldr	r2, [pc, #44]	; (818 <rtc_count_set_compare+0x88>)
     7ea:	4293      	cmp	r3, r2
     7ec:	d901      	bls.n	7f2 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     7ee:	2317      	movs	r3, #23
     7f0:	e00b      	b.n	80a <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     7f2:	1dfb      	adds	r3, r7, #7
     7f4:	781a      	ldrb	r2, [r3, #0]
     7f6:	68bb      	ldr	r3, [r7, #8]
     7f8:	b299      	uxth	r1, r3
     7fa:	697b      	ldr	r3, [r7, #20]
     7fc:	320c      	adds	r2, #12
     7fe:	0052      	lsls	r2, r2, #1
     800:	52d1      	strh	r1, [r2, r3]

			break;
     802:	e001      	b.n	808 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     804:	231a      	movs	r3, #26
     806:	e000      	b.n	80a <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     808:	2300      	movs	r3, #0
}
     80a:	1c18      	adds	r0, r3, #0
     80c:	46bd      	mov	sp, r7
     80e:	b006      	add	sp, #24
     810:	bd80      	pop	{r7, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	00000405 	.word	0x00000405
     818:	0000ffff 	.word	0x0000ffff

0000081c <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	1c0a      	adds	r2, r1, #0
     826:	1cbb      	adds	r3, r7, #2
     828:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     830:	687b      	ldr	r3, [r7, #4]
     832:	791b      	ldrb	r3, [r3, #4]
     834:	2b00      	cmp	r3, #0
     836:	d001      	beq.n	83c <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     838:	2315      	movs	r3, #21
     83a:	e00b      	b.n	854 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     83c:	46c0      	nop			; (mov r8, r8)
     83e:	687b      	ldr	r3, [r7, #4]
     840:	1c18      	adds	r0, r3, #0
     842:	4b06      	ldr	r3, [pc, #24]	; (85c <rtc_count_set_period+0x40>)
     844:	4798      	blx	r3
     846:	1e03      	subs	r3, r0, #0
     848:	d1f9      	bne.n	83e <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	1cba      	adds	r2, r7, #2
     84e:	8812      	ldrh	r2, [r2, #0]
     850:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     852:	2300      	movs	r3, #0
}
     854:	1c18      	adds	r0, r3, #0
     856:	46bd      	mov	sp, r7
     858:	b004      	add	sp, #16
     85a:	bd80      	pop	{r7, pc}
     85c:	00000405 	.word	0x00000405

00000860 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     860:	b580      	push	{r7, lr}
     862:	b086      	sub	sp, #24
     864:	af00      	add	r7, sp, #0
     866:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     868:	4b31      	ldr	r3, [pc, #196]	; (930 <_rtc_interrupt_handler+0xd0>)
     86a:	687a      	ldr	r2, [r7, #4]
     86c:	0092      	lsls	r2, r2, #2
     86e:	58d3      	ldr	r3, [r2, r3]
     870:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     872:	697b      	ldr	r3, [r7, #20]
     874:	681b      	ldr	r3, [r3, #0]
     876:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     878:	230e      	movs	r3, #14
     87a:	18fb      	adds	r3, r7, r3
     87c:	697a      	ldr	r2, [r7, #20]
     87e:	8ad2      	ldrh	r2, [r2, #22]
     880:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     882:	697b      	ldr	r3, [r7, #20]
     884:	8a9b      	ldrh	r3, [r3, #20]
     886:	b29a      	uxth	r2, r3
     888:	230e      	movs	r3, #14
     88a:	18fb      	adds	r3, r7, r3
     88c:	210e      	movs	r1, #14
     88e:	1879      	adds	r1, r7, r1
     890:	8809      	ldrh	r1, [r1, #0]
     892:	400a      	ands	r2, r1
     894:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     896:	693b      	ldr	r3, [r7, #16]
     898:	7a1b      	ldrb	r3, [r3, #8]
     89a:	b2da      	uxtb	r2, r3
     89c:	230c      	movs	r3, #12
     89e:	18fb      	adds	r3, r7, r3
     8a0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     8a2:	693b      	ldr	r3, [r7, #16]
     8a4:	79db      	ldrb	r3, [r3, #7]
     8a6:	b2db      	uxtb	r3, r3
     8a8:	b29a      	uxth	r2, r3
     8aa:	230c      	movs	r3, #12
     8ac:	18fb      	adds	r3, r7, r3
     8ae:	210c      	movs	r1, #12
     8b0:	1879      	adds	r1, r7, r1
     8b2:	8809      	ldrh	r1, [r1, #0]
     8b4:	400a      	ands	r2, r1
     8b6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     8b8:	230c      	movs	r3, #12
     8ba:	18fb      	adds	r3, r7, r3
     8bc:	881b      	ldrh	r3, [r3, #0]
     8be:	2280      	movs	r2, #128	; 0x80
     8c0:	4013      	ands	r3, r2
     8c2:	d00c      	beq.n	8de <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     8c4:	230e      	movs	r3, #14
     8c6:	18fb      	adds	r3, r7, r3
     8c8:	881b      	ldrh	r3, [r3, #0]
     8ca:	2204      	movs	r2, #4
     8cc:	4013      	ands	r3, r2
     8ce:	d002      	beq.n	8d6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     8d0:	697b      	ldr	r3, [r7, #20]
     8d2:	691b      	ldr	r3, [r3, #16]
     8d4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     8d6:	693b      	ldr	r3, [r7, #16]
     8d8:	2280      	movs	r2, #128	; 0x80
     8da:	721a      	strb	r2, [r3, #8]
     8dc:	e024      	b.n	928 <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     8de:	230c      	movs	r3, #12
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	881b      	ldrh	r3, [r3, #0]
     8e4:	2201      	movs	r2, #1
     8e6:	4013      	ands	r3, r2
     8e8:	d00c      	beq.n	904 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     8ea:	230e      	movs	r3, #14
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	2201      	movs	r2, #1
     8f2:	4013      	ands	r3, r2
     8f4:	d002      	beq.n	8fc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     8f6:	697b      	ldr	r3, [r7, #20]
     8f8:	689b      	ldr	r3, [r3, #8]
     8fa:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     8fc:	693b      	ldr	r3, [r7, #16]
     8fe:	2201      	movs	r2, #1
     900:	721a      	strb	r2, [r3, #8]
     902:	e011      	b.n	928 <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     904:	230c      	movs	r3, #12
     906:	18fb      	adds	r3, r7, r3
     908:	881b      	ldrh	r3, [r3, #0]
     90a:	2202      	movs	r2, #2
     90c:	4013      	ands	r3, r2
     90e:	d00b      	beq.n	928 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     910:	230e      	movs	r3, #14
     912:	18fb      	adds	r3, r7, r3
     914:	881b      	ldrh	r3, [r3, #0]
     916:	2202      	movs	r2, #2
     918:	4013      	ands	r3, r2
     91a:	d002      	beq.n	922 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     91c:	697b      	ldr	r3, [r7, #20]
     91e:	68db      	ldr	r3, [r3, #12]
     920:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     922:	693b      	ldr	r3, [r7, #16]
     924:	2202      	movs	r2, #2
     926:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     928:	46bd      	mov	sp, r7
     92a:	b006      	add	sp, #24
     92c:	bd80      	pop	{r7, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	200000a0 	.word	0x200000a0

00000934 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     934:	b580      	push	{r7, lr}
     936:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     938:	2000      	movs	r0, #0
     93a:	4b02      	ldr	r3, [pc, #8]	; (944 <RTC_Handler+0x10>)
     93c:	4798      	blx	r3
}
     93e:	46bd      	mov	sp, r7
     940:	bd80      	pop	{r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	00000861 	.word	0x00000861

00000948 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     948:	b580      	push	{r7, lr}
     94a:	b084      	sub	sp, #16
     94c:	af00      	add	r7, sp, #0
     94e:	1c02      	adds	r2, r0, #0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     954:	230f      	movs	r3, #15
     956:	18fb      	adds	r3, r7, r3
     958:	1dfa      	adds	r2, r7, #7
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	0952      	lsrs	r2, r2, #5
     95e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     960:	230f      	movs	r3, #15
     962:	18fb      	adds	r3, r7, r3
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b00      	cmp	r3, #0
     968:	d10c      	bne.n	984 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     96a:	4b09      	ldr	r3, [pc, #36]	; (990 <_extint_get_eic_from_channel+0x48>)
     96c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     96e:	230f      	movs	r3, #15
     970:	18fb      	adds	r3, r7, r3
     972:	781b      	ldrb	r3, [r3, #0]
     974:	009b      	lsls	r3, r3, #2
     976:	2210      	movs	r2, #16
     978:	4694      	mov	ip, r2
     97a:	44bc      	add	ip, r7
     97c:	4463      	add	r3, ip
     97e:	3b08      	subs	r3, #8
     980:	681b      	ldr	r3, [r3, #0]
     982:	e000      	b.n	986 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     984:	2300      	movs	r3, #0
	}
}
     986:	1c18      	adds	r0, r3, #0
     988:	46bd      	mov	sp, r7
     98a:	b004      	add	sp, #16
     98c:	bd80      	pop	{r7, pc}
     98e:	46c0      	nop			; (mov r8, r8)
     990:	40001800 	.word	0x40001800

00000994 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	1c02      	adds	r2, r0, #0
     99c:	1dfb      	adds	r3, r7, #7
     99e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9a0:	1dfb      	adds	r3, r7, #7
     9a2:	781b      	ldrb	r3, [r3, #0]
     9a4:	1c18      	adds	r0, r3, #0
     9a6:	4b0b      	ldr	r3, [pc, #44]	; (9d4 <extint_chan_is_detected+0x40>)
     9a8:	4798      	blx	r3
     9aa:	1c03      	adds	r3, r0, #0
     9ac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     9ae:	1dfb      	adds	r3, r7, #7
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	221f      	movs	r2, #31
     9b4:	4013      	ands	r3, r2
     9b6:	2201      	movs	r2, #1
     9b8:	409a      	lsls	r2, r3
     9ba:	1c13      	adds	r3, r2, #0
     9bc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	68ba      	ldr	r2, [r7, #8]
     9c4:	4013      	ands	r3, r2
     9c6:	1e5a      	subs	r2, r3, #1
     9c8:	4193      	sbcs	r3, r2
     9ca:	b2db      	uxtb	r3, r3
}
     9cc:	1c18      	adds	r0, r3, #0
     9ce:	46bd      	mov	sp, r7
     9d0:	b004      	add	sp, #16
     9d2:	bd80      	pop	{r7, pc}
     9d4:	00000949 	.word	0x00000949

000009d8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     9d8:	b580      	push	{r7, lr}
     9da:	b084      	sub	sp, #16
     9dc:	af00      	add	r7, sp, #0
     9de:	1c02      	adds	r2, r0, #0
     9e0:	1dfb      	adds	r3, r7, #7
     9e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9e4:	1dfb      	adds	r3, r7, #7
     9e6:	781b      	ldrb	r3, [r3, #0]
     9e8:	1c18      	adds	r0, r3, #0
     9ea:	4b09      	ldr	r3, [pc, #36]	; (a10 <extint_chan_clear_detected+0x38>)
     9ec:	4798      	blx	r3
     9ee:	1c03      	adds	r3, r0, #0
     9f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     9f2:	1dfb      	adds	r3, r7, #7
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	221f      	movs	r2, #31
     9f8:	4013      	ands	r3, r2
     9fa:	2201      	movs	r2, #1
     9fc:	409a      	lsls	r2, r3
     9fe:	1c13      	adds	r3, r2, #0
     a00:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	68ba      	ldr	r2, [r7, #8]
     a06:	611a      	str	r2, [r3, #16]
}
     a08:	46bd      	mov	sp, r7
     a0a:	b004      	add	sp, #16
     a0c:	bd80      	pop	{r7, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	00000949 	.word	0x00000949

00000a14 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     a14:	b580      	push	{r7, lr}
     a16:	b082      	sub	sp, #8
     a18:	af00      	add	r7, sp, #0
     a1a:	6078      	str	r0, [r7, #4]
     a1c:	1c08      	adds	r0, r1, #0
     a1e:	1c11      	adds	r1, r2, #0
     a20:	1cfb      	adds	r3, r7, #3
     a22:	1c02      	adds	r2, r0, #0
     a24:	701a      	strb	r2, [r3, #0]
     a26:	1cbb      	adds	r3, r7, #2
     a28:	1c0a      	adds	r2, r1, #0
     a2a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     a2c:	1cbb      	adds	r3, r7, #2
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	2b00      	cmp	r3, #0
     a32:	d001      	beq.n	a38 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a34:	2317      	movs	r3, #23
     a36:	e019      	b.n	a6c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     a38:	1cfb      	adds	r3, r7, #3
     a3a:	781a      	ldrb	r2, [r3, #0]
     a3c:	4b0d      	ldr	r3, [pc, #52]	; (a74 <extint_register_callback+0x60>)
     a3e:	0092      	lsls	r2, r2, #2
     a40:	58d3      	ldr	r3, [r2, r3]
     a42:	2b00      	cmp	r3, #0
     a44:	d107      	bne.n	a56 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     a46:	1cfb      	adds	r3, r7, #3
     a48:	781a      	ldrb	r2, [r3, #0]
     a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <extint_register_callback+0x60>)
     a4c:	0092      	lsls	r2, r2, #2
     a4e:	6879      	ldr	r1, [r7, #4]
     a50:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     a52:	2300      	movs	r3, #0
     a54:	e00a      	b.n	a6c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     a56:	1cfb      	adds	r3, r7, #3
     a58:	781a      	ldrb	r2, [r3, #0]
     a5a:	4b06      	ldr	r3, [pc, #24]	; (a74 <extint_register_callback+0x60>)
     a5c:	0092      	lsls	r2, r2, #2
     a5e:	58d2      	ldr	r2, [r2, r3]
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	429a      	cmp	r2, r3
     a64:	d101      	bne.n	a6a <extint_register_callback+0x56>
		return STATUS_OK;
     a66:	2300      	movs	r3, #0
     a68:	e000      	b.n	a6c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     a6a:	231d      	movs	r3, #29
}
     a6c:	1c18      	adds	r0, r3, #0
     a6e:	46bd      	mov	sp, r7
     a70:	b002      	add	sp, #8
     a72:	bd80      	pop	{r7, pc}
     a74:	20000060 	.word	0x20000060

00000a78 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     a78:	b580      	push	{r7, lr}
     a7a:	b084      	sub	sp, #16
     a7c:	af00      	add	r7, sp, #0
     a7e:	1c02      	adds	r2, r0, #0
     a80:	1dfb      	adds	r3, r7, #7
     a82:	701a      	strb	r2, [r3, #0]
     a84:	1dbb      	adds	r3, r7, #6
     a86:	1c0a      	adds	r2, r1, #0
     a88:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     a8a:	1dbb      	adds	r3, r7, #6
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b00      	cmp	r3, #0
     a90:	d10e      	bne.n	ab0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     a92:	1dfb      	adds	r3, r7, #7
     a94:	781b      	ldrb	r3, [r3, #0]
     a96:	1c18      	adds	r0, r3, #0
     a98:	4b08      	ldr	r3, [pc, #32]	; (abc <extint_chan_enable_callback+0x44>)
     a9a:	4798      	blx	r3
     a9c:	1c03      	adds	r3, r0, #0
     a9e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     aa0:	1dfb      	adds	r3, r7, #7
     aa2:	781b      	ldrb	r3, [r3, #0]
     aa4:	2201      	movs	r2, #1
     aa6:	409a      	lsls	r2, r3
     aa8:	68fb      	ldr	r3, [r7, #12]
     aaa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     aac:	2300      	movs	r3, #0
     aae:	e000      	b.n	ab2 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ab0:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     ab2:	1c18      	adds	r0, r3, #0
     ab4:	46bd      	mov	sp, r7
     ab6:	b004      	add	sp, #16
     ab8:	bd80      	pop	{r7, pc}
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	00000949 	.word	0x00000949

00000ac0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     ac0:	b580      	push	{r7, lr}
     ac2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ac4:	4b15      	ldr	r3, [pc, #84]	; (b1c <EIC_Handler+0x5c>)
     ac6:	2200      	movs	r2, #0
     ac8:	701a      	strb	r2, [r3, #0]
     aca:	e020      	b.n	b0e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     acc:	4b13      	ldr	r3, [pc, #76]	; (b1c <EIC_Handler+0x5c>)
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	1c18      	adds	r0, r3, #0
     ad2:	4b13      	ldr	r3, [pc, #76]	; (b20 <EIC_Handler+0x60>)
     ad4:	4798      	blx	r3
     ad6:	1e03      	subs	r3, r0, #0
     ad8:	d013      	beq.n	b02 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     ada:	4b10      	ldr	r3, [pc, #64]	; (b1c <EIC_Handler+0x5c>)
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	1c18      	adds	r0, r3, #0
     ae0:	4b10      	ldr	r3, [pc, #64]	; (b24 <EIC_Handler+0x64>)
     ae2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     ae4:	4b0d      	ldr	r3, [pc, #52]	; (b1c <EIC_Handler+0x5c>)
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	1c1a      	adds	r2, r3, #0
     aea:	4b0f      	ldr	r3, [pc, #60]	; (b28 <EIC_Handler+0x68>)
     aec:	0092      	lsls	r2, r2, #2
     aee:	58d3      	ldr	r3, [r2, r3]
     af0:	2b00      	cmp	r3, #0
     af2:	d006      	beq.n	b02 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     af4:	4b09      	ldr	r3, [pc, #36]	; (b1c <EIC_Handler+0x5c>)
     af6:	781b      	ldrb	r3, [r3, #0]
     af8:	1c1a      	adds	r2, r3, #0
     afa:	4b0b      	ldr	r3, [pc, #44]	; (b28 <EIC_Handler+0x68>)
     afc:	0092      	lsls	r2, r2, #2
     afe:	58d3      	ldr	r3, [r2, r3]
     b00:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b02:	4b06      	ldr	r3, [pc, #24]	; (b1c <EIC_Handler+0x5c>)
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	3301      	adds	r3, #1
     b08:	b2da      	uxtb	r2, r3
     b0a:	4b04      	ldr	r3, [pc, #16]	; (b1c <EIC_Handler+0x5c>)
     b0c:	701a      	strb	r2, [r3, #0]
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <EIC_Handler+0x5c>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	2b0f      	cmp	r3, #15
     b14:	d9da      	bls.n	acc <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     b16:	46bd      	mov	sp, r7
     b18:	bd80      	pop	{r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	200000a4 	.word	0x200000a4
     b20:	00000995 	.word	0x00000995
     b24:	000009d9 	.word	0x000009d9
     b28:	20000060 	.word	0x20000060

00000b2c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     b2c:	b580      	push	{r7, lr}
     b2e:	af00      	add	r7, sp, #0
     b30:	2000      	movs	r0, #0
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <TCC0_Handler+0x10>)
     b34:	4798      	blx	r3
     b36:	46bd      	mov	sp, r7
     b38:	bd80      	pop	{r7, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00000b69 	.word	0x00000b69

00000b40 <TCC1_Handler>:
     b40:	b580      	push	{r7, lr}
     b42:	af00      	add	r7, sp, #0
     b44:	2001      	movs	r0, #1
     b46:	4b02      	ldr	r3, [pc, #8]	; (b50 <TCC1_Handler+0x10>)
     b48:	4798      	blx	r3
     b4a:	46bd      	mov	sp, r7
     b4c:	bd80      	pop	{r7, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	00000b69 	.word	0x00000b69

00000b54 <TCC2_Handler>:
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
     b58:	2002      	movs	r0, #2
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <TCC2_Handler+0x10>)
     b5c:	4798      	blx	r3
     b5e:	46bd      	mov	sp, r7
     b60:	bd80      	pop	{r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00000b69 	.word	0x00000b69

00000b68 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b086      	sub	sp, #24
     b6c:	af00      	add	r7, sp, #0
     b6e:	1c02      	adds	r2, r0, #0
     b70:	1dfb      	adds	r3, r7, #7
     b72:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
     b74:	1dfb      	adds	r3, r7, #7
     b76:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     b78:	4b17      	ldr	r3, [pc, #92]	; (bd8 <_tcc_interrupt_handler+0x70>)
     b7a:	0092      	lsls	r2, r2, #2
     b7c:	58d3      	ldr	r3, [r2, r3]
     b7e:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b80:	693b      	ldr	r3, [r7, #16]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
     b86:	693b      	ldr	r3, [r7, #16]
     b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b8a:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
     b8c:	693b      	ldr	r3, [r7, #16]
     b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b90:	4013      	ands	r3, r2
     b92:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     b94:	2300      	movs	r3, #0
     b96:	617b      	str	r3, [r7, #20]
     b98:	e018      	b.n	bcc <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     b9a:	4b10      	ldr	r3, [pc, #64]	; (bdc <_tcc_interrupt_handler+0x74>)
     b9c:	697a      	ldr	r2, [r7, #20]
     b9e:	0092      	lsls	r2, r2, #2
     ba0:	58d3      	ldr	r3, [r2, r3]
     ba2:	68fa      	ldr	r2, [r7, #12]
     ba4:	4013      	ands	r3, r2
     ba6:	d00e      	beq.n	bc6 <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ba8:	693a      	ldr	r2, [r7, #16]
     baa:	697b      	ldr	r3, [r7, #20]
     bac:	009b      	lsls	r3, r3, #2
     bae:	18d3      	adds	r3, r2, r3
     bb0:	685b      	ldr	r3, [r3, #4]
     bb2:	693a      	ldr	r2, [r7, #16]
     bb4:	1c10      	adds	r0, r2, #0
     bb6:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	4a07      	ldr	r2, [pc, #28]	; (bdc <_tcc_interrupt_handler+0x74>)
     bbe:	6979      	ldr	r1, [r7, #20]
     bc0:	0089      	lsls	r1, r1, #2
     bc2:	588a      	ldr	r2, [r1, r2]
     bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     bc6:	697b      	ldr	r3, [r7, #20]
     bc8:	3301      	adds	r3, #1
     bca:	617b      	str	r3, [r7, #20]
     bcc:	697b      	ldr	r3, [r7, #20]
     bce:	2b0b      	cmp	r3, #11
     bd0:	dde3      	ble.n	b9a <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     bd2:	46bd      	mov	sp, r7
     bd4:	b006      	add	sp, #24
     bd6:	bd80      	pop	{r7, pc}
     bd8:	200000a8 	.word	0x200000a8
     bdc:	00004614 	.word	0x00004614

00000be0 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     be0:	b580      	push	{r7, lr}
     be2:	af00      	add	r7, sp, #0
     be4:	2000      	movs	r0, #0
     be6:	4b02      	ldr	r3, [pc, #8]	; (bf0 <TC3_Handler+0x10>)
     be8:	4798      	blx	r3
     bea:	46bd      	mov	sp, r7
     bec:	bd80      	pop	{r7, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	00000c1d 	.word	0x00000c1d

00000bf4 <TC4_Handler>:
     bf4:	b580      	push	{r7, lr}
     bf6:	af00      	add	r7, sp, #0
     bf8:	2001      	movs	r0, #1
     bfa:	4b02      	ldr	r3, [pc, #8]	; (c04 <TC4_Handler+0x10>)
     bfc:	4798      	blx	r3
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00000c1d 	.word	0x00000c1d

00000c08 <TC5_Handler>:
     c08:	b580      	push	{r7, lr}
     c0a:	af00      	add	r7, sp, #0
     c0c:	2002      	movs	r0, #2
     c0e:	4b02      	ldr	r3, [pc, #8]	; (c18 <TC5_Handler+0x10>)
     c10:	4798      	blx	r3
     c12:	46bd      	mov	sp, r7
     c14:	bd80      	pop	{r7, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000c1d 	.word	0x00000c1d

00000c1c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b084      	sub	sp, #16
     c20:	af00      	add	r7, sp, #0
     c22:	1c02      	adds	r2, r0, #0
     c24:	1dfb      	adds	r3, r7, #7
     c26:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     c28:	1dfb      	adds	r3, r7, #7
     c2a:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     c2c:	4b28      	ldr	r3, [pc, #160]	; (cd0 <_tc_interrupt_handler+0xb4>)
     c2e:	0092      	lsls	r2, r2, #2
     c30:	58d3      	ldr	r3, [r2, r3]
     c32:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	7b9b      	ldrb	r3, [r3, #14]
     c3a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     c3c:	68fa      	ldr	r2, [r7, #12]
     c3e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     c40:	4013      	ands	r3, r2
     c42:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     c44:	68fb      	ldr	r3, [r7, #12]
     c46:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     c48:	230b      	movs	r3, #11
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	400a      	ands	r2, r1
     c4e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     c50:	230b      	movs	r3, #11
     c52:	18fb      	adds	r3, r7, r3
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2201      	movs	r2, #1
     c58:	4013      	ands	r3, r2
     c5a:	d008      	beq.n	c6e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	689b      	ldr	r3, [r3, #8]
     c60:	68fa      	ldr	r2, [r7, #12]
     c62:	1c10      	adds	r0, r2, #0
     c64:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	2201      	movs	r2, #1
     c6c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     c6e:	230b      	movs	r3, #11
     c70:	18fb      	adds	r3, r7, r3
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	2202      	movs	r2, #2
     c76:	4013      	ands	r3, r2
     c78:	d008      	beq.n	c8c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	68db      	ldr	r3, [r3, #12]
     c7e:	68fa      	ldr	r2, [r7, #12]
     c80:	1c10      	adds	r0, r2, #0
     c82:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     c84:	68fb      	ldr	r3, [r7, #12]
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	2202      	movs	r2, #2
     c8a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     c8c:	230b      	movs	r3, #11
     c8e:	18fb      	adds	r3, r7, r3
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2210      	movs	r2, #16
     c94:	4013      	ands	r3, r2
     c96:	d008      	beq.n	caa <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     c98:	68fb      	ldr	r3, [r7, #12]
     c9a:	691b      	ldr	r3, [r3, #16]
     c9c:	68fa      	ldr	r2, [r7, #12]
     c9e:	1c10      	adds	r0, r2, #0
     ca0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	2210      	movs	r2, #16
     ca8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     caa:	230b      	movs	r3, #11
     cac:	18fb      	adds	r3, r7, r3
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	2220      	movs	r2, #32
     cb2:	4013      	ands	r3, r2
     cb4:	d008      	beq.n	cc8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	695b      	ldr	r3, [r3, #20]
     cba:	68fa      	ldr	r2, [r7, #12]
     cbc:	1c10      	adds	r0, r2, #0
     cbe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	2220      	movs	r2, #32
     cc6:	739a      	strb	r2, [r3, #14]
	}
}
     cc8:	46bd      	mov	sp, r7
     cca:	b004      	add	sp, #16
     ccc:	bd80      	pop	{r7, pc}
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	200000b4 	.word	0x200000b4

00000cd4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b082      	sub	sp, #8
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	2280      	movs	r2, #128	; 0x80
     ce0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	2200      	movs	r2, #0
     ce6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	2201      	movs	r2, #1
     cec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2200      	movs	r2, #0
     cf2:	70da      	strb	r2, [r3, #3]
}
     cf4:	46bd      	mov	sp, r7
     cf6:	b002      	add	sp, #8
     cf8:	bd80      	pop	{r7, pc}
     cfa:	46c0      	nop			; (mov r8, r8)

00000cfc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b084      	sub	sp, #16
     d00:	af00      	add	r7, sp, #0
     d02:	1c02      	adds	r2, r0, #0
     d04:	1dfb      	adds	r3, r7, #7
     d06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d08:	230f      	movs	r3, #15
     d0a:	18fb      	adds	r3, r7, r3
     d0c:	1dfa      	adds	r2, r7, #7
     d0e:	7812      	ldrb	r2, [r2, #0]
     d10:	09d2      	lsrs	r2, r2, #7
     d12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     d14:	230e      	movs	r3, #14
     d16:	18fb      	adds	r3, r7, r3
     d18:	1dfa      	adds	r2, r7, #7
     d1a:	7812      	ldrb	r2, [r2, #0]
     d1c:	0952      	lsrs	r2, r2, #5
     d1e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     d20:	4b0d      	ldr	r3, [pc, #52]	; (d58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     d22:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     d24:	230f      	movs	r3, #15
     d26:	18fb      	adds	r3, r7, r3
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d10f      	bne.n	d4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     d2e:	230f      	movs	r3, #15
     d30:	18fb      	adds	r3, r7, r3
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	009b      	lsls	r3, r3, #2
     d36:	2210      	movs	r2, #16
     d38:	4694      	mov	ip, r2
     d3a:	44bc      	add	ip, r7
     d3c:	4463      	add	r3, ip
     d3e:	3b08      	subs	r3, #8
     d40:	681a      	ldr	r2, [r3, #0]
     d42:	230e      	movs	r3, #14
     d44:	18fb      	adds	r3, r7, r3
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	01db      	lsls	r3, r3, #7
     d4a:	18d3      	adds	r3, r2, r3
     d4c:	e000      	b.n	d50 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     d4e:	2300      	movs	r3, #0
	}
}
     d50:	1c18      	adds	r0, r3, #0
     d52:	46bd      	mov	sp, r7
     d54:	b004      	add	sp, #16
     d56:	bd80      	pop	{r7, pc}
     d58:	41004400 	.word	0x41004400

00000d5c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b082      	sub	sp, #8
     d60:	af00      	add	r7, sp, #0
     d62:	1c02      	adds	r2, r0, #0
     d64:	1dfb      	adds	r3, r7, #7
     d66:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     d68:	1dfb      	adds	r3, r7, #7
     d6a:	781b      	ldrb	r3, [r3, #0]
     d6c:	1c18      	adds	r0, r3, #0
     d6e:	4b03      	ldr	r3, [pc, #12]	; (d7c <port_get_group_from_gpio_pin+0x20>)
     d70:	4798      	blx	r3
     d72:	1c03      	adds	r3, r0, #0
}
     d74:	1c18      	adds	r0, r3, #0
     d76:	46bd      	mov	sp, r7
     d78:	b002      	add	sp, #8
     d7a:	bd80      	pop	{r7, pc}
     d7c:	00000cfd 	.word	0x00000cfd

00000d80 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     d80:	b580      	push	{r7, lr}
     d82:	b084      	sub	sp, #16
     d84:	af00      	add	r7, sp, #0
     d86:	1c02      	adds	r2, r0, #0
     d88:	1dfb      	adds	r3, r7, #7
     d8a:	701a      	strb	r2, [r3, #0]
     d8c:	1dbb      	adds	r3, r7, #6
     d8e:	1c0a      	adds	r2, r1, #0
     d90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     d92:	1dfb      	adds	r3, r7, #7
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	1c18      	adds	r0, r3, #0
     d98:	4b0c      	ldr	r3, [pc, #48]	; (dcc <port_pin_set_output_level+0x4c>)
     d9a:	4798      	blx	r3
     d9c:	1c03      	adds	r3, r0, #0
     d9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     da0:	1dfb      	adds	r3, r7, #7
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	221f      	movs	r2, #31
     da6:	4013      	ands	r3, r2
     da8:	2201      	movs	r2, #1
     daa:	409a      	lsls	r2, r3
     dac:	1c13      	adds	r3, r2, #0
     dae:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     db0:	1dbb      	adds	r3, r7, #6
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	2b00      	cmp	r3, #0
     db6:	d003      	beq.n	dc0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	68ba      	ldr	r2, [r7, #8]
     dbc:	619a      	str	r2, [r3, #24]
     dbe:	e002      	b.n	dc6 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	68ba      	ldr	r2, [r7, #8]
     dc4:	615a      	str	r2, [r3, #20]
	}
}
     dc6:	46bd      	mov	sp, r7
     dc8:	b004      	add	sp, #16
     dca:	bd80      	pop	{r7, pc}
     dcc:	00000d5d 	.word	0x00000d5d

00000dd0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	2200      	movs	r2, #0
     ddc:	701a      	strb	r2, [r3, #0]
}
     dde:	46bd      	mov	sp, r7
     de0:	b002      	add	sp, #8
     de2:	bd80      	pop	{r7, pc}

00000de4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     de4:	b580      	push	{r7, lr}
     de6:	b082      	sub	sp, #8
     de8:	af00      	add	r7, sp, #0
     dea:	1c02      	adds	r2, r0, #0
     dec:	6039      	str	r1, [r7, #0]
     dee:	1dfb      	adds	r3, r7, #7
     df0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     df2:	1dfb      	adds	r3, r7, #7
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	2b01      	cmp	r3, #1
     df8:	d00a      	beq.n	e10 <system_apb_clock_set_mask+0x2c>
     dfa:	2b02      	cmp	r3, #2
     dfc:	d00f      	beq.n	e1e <system_apb_clock_set_mask+0x3a>
     dfe:	2b00      	cmp	r3, #0
     e00:	d114      	bne.n	e2c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     e02:	4b0e      	ldr	r3, [pc, #56]	; (e3c <system_apb_clock_set_mask+0x58>)
     e04:	4a0d      	ldr	r2, [pc, #52]	; (e3c <system_apb_clock_set_mask+0x58>)
     e06:	6991      	ldr	r1, [r2, #24]
     e08:	683a      	ldr	r2, [r7, #0]
     e0a:	430a      	orrs	r2, r1
     e0c:	619a      	str	r2, [r3, #24]
			break;
     e0e:	e00f      	b.n	e30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     e10:	4b0a      	ldr	r3, [pc, #40]	; (e3c <system_apb_clock_set_mask+0x58>)
     e12:	4a0a      	ldr	r2, [pc, #40]	; (e3c <system_apb_clock_set_mask+0x58>)
     e14:	69d1      	ldr	r1, [r2, #28]
     e16:	683a      	ldr	r2, [r7, #0]
     e18:	430a      	orrs	r2, r1
     e1a:	61da      	str	r2, [r3, #28]
			break;
     e1c:	e008      	b.n	e30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e1e:	4b07      	ldr	r3, [pc, #28]	; (e3c <system_apb_clock_set_mask+0x58>)
     e20:	4a06      	ldr	r2, [pc, #24]	; (e3c <system_apb_clock_set_mask+0x58>)
     e22:	6a11      	ldr	r1, [r2, #32]
     e24:	683a      	ldr	r2, [r7, #0]
     e26:	430a      	orrs	r2, r1
     e28:	621a      	str	r2, [r3, #32]
			break;
     e2a:	e001      	b.n	e30 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     e2c:	2317      	movs	r3, #23
     e2e:	e000      	b.n	e32 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     e30:	2300      	movs	r3, #0
}
     e32:	1c18      	adds	r0, r3, #0
     e34:	46bd      	mov	sp, r7
     e36:	b002      	add	sp, #8
     e38:	bd80      	pop	{r7, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	40000400 	.word	0x40000400

00000e40 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     e40:	b580      	push	{r7, lr}
     e42:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <system_is_debugger_present+0x1c>)
     e46:	789b      	ldrb	r3, [r3, #2]
     e48:	b2db      	uxtb	r3, r3
     e4a:	1c1a      	adds	r2, r3, #0
     e4c:	2302      	movs	r3, #2
     e4e:	4013      	ands	r3, r2
     e50:	1e5a      	subs	r2, r3, #1
     e52:	4193      	sbcs	r3, r2
     e54:	b2db      	uxtb	r3, r3
}
     e56:	1c18      	adds	r0, r3, #0
     e58:	46bd      	mov	sp, r7
     e5a:	bd80      	pop	{r7, pc}
     e5c:	41002000 	.word	0x41002000

00000e60 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     e60:	b580      	push	{r7, lr}
     e62:	b084      	sub	sp, #16
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	7e1b      	ldrb	r3, [r3, #24]
     e72:	b2db      	uxtb	r3, r3
     e74:	1c1a      	adds	r2, r3, #0
     e76:	2301      	movs	r3, #1
     e78:	4013      	ands	r3, r2
     e7a:	1e5a      	subs	r2, r3, #1
     e7c:	4193      	sbcs	r3, r2
     e7e:	b2db      	uxtb	r3, r3
}
     e80:	1c18      	adds	r0, r3, #0
     e82:	46bd      	mov	sp, r7
     e84:	b004      	add	sp, #16
     e86:	bd80      	pop	{r7, pc}

00000e88 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b084      	sub	sp, #16
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e96:	68fb      	ldr	r3, [r7, #12]
     e98:	7e1b      	ldrb	r3, [r3, #24]
     e9a:	b2db      	uxtb	r3, r3
     e9c:	1c1a      	adds	r2, r3, #0
     e9e:	2304      	movs	r3, #4
     ea0:	4013      	ands	r3, r2
     ea2:	1e5a      	subs	r2, r3, #1
     ea4:	4193      	sbcs	r3, r2
     ea6:	b2db      	uxtb	r3, r3
}
     ea8:	1c18      	adds	r0, r3, #0
     eaa:	46bd      	mov	sp, r7
     eac:	b004      	add	sp, #16
     eae:	bd80      	pop	{r7, pc}

00000eb0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	b084      	sub	sp, #16
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	1c0a      	adds	r2, r1, #0
     eba:	1cbb      	adds	r3, r7, #2
     ebc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	1c18      	adds	r0, r3, #0
     ec8:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <spi_write+0x44>)
     eca:	4798      	blx	r3
     ecc:	1c03      	adds	r3, r0, #0
     ece:	1c1a      	adds	r2, r3, #0
     ed0:	2301      	movs	r3, #1
     ed2:	4053      	eors	r3, r2
     ed4:	b2db      	uxtb	r3, r3
     ed6:	2b00      	cmp	r3, #0
     ed8:	d001      	beq.n	ede <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     eda:	2305      	movs	r3, #5
     edc:	e006      	b.n	eec <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ede:	1cbb      	adds	r3, r7, #2
     ee0:	881b      	ldrh	r3, [r3, #0]
     ee2:	05db      	lsls	r3, r3, #23
     ee4:	0dda      	lsrs	r2, r3, #23
     ee6:	68fb      	ldr	r3, [r7, #12]
     ee8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     eea:	2300      	movs	r3, #0
}
     eec:	1c18      	adds	r0, r3, #0
     eee:	46bd      	mov	sp, r7
     ef0:	b004      	add	sp, #16
     ef2:	bd80      	pop	{r7, pc}
     ef4:	00000e61 	.word	0x00000e61

00000ef8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b084      	sub	sp, #16
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
     f00:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	1c18      	adds	r0, r3, #0
     f0c:	4b1b      	ldr	r3, [pc, #108]	; (f7c <spi_read+0x84>)
     f0e:	4798      	blx	r3
     f10:	1c03      	adds	r3, r0, #0
     f12:	1c1a      	adds	r2, r3, #0
     f14:	2301      	movs	r3, #1
     f16:	4053      	eors	r3, r2
     f18:	b2db      	uxtb	r3, r3
     f1a:	2b00      	cmp	r3, #0
     f1c:	d001      	beq.n	f22 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     f1e:	2310      	movs	r3, #16
     f20:	e027      	b.n	f72 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     f22:	230f      	movs	r3, #15
     f24:	18fb      	adds	r3, r7, r3
     f26:	2200      	movs	r2, #0
     f28:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	8b5b      	ldrh	r3, [r3, #26]
     f2e:	b29b      	uxth	r3, r3
     f30:	1c1a      	adds	r2, r3, #0
     f32:	2304      	movs	r3, #4
     f34:	4013      	ands	r3, r2
     f36:	d006      	beq.n	f46 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     f38:	230f      	movs	r3, #15
     f3a:	18fb      	adds	r3, r7, r3
     f3c:	221e      	movs	r2, #30
     f3e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f40:	68bb      	ldr	r3, [r7, #8]
     f42:	2204      	movs	r2, #4
     f44:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	799b      	ldrb	r3, [r3, #6]
     f4a:	2b01      	cmp	r3, #1
     f4c:	d108      	bne.n	f60 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f4e:	68bb      	ldr	r3, [r7, #8]
     f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f52:	b29b      	uxth	r3, r3
     f54:	05db      	lsls	r3, r3, #23
     f56:	0ddb      	lsrs	r3, r3, #23
     f58:	b29a      	uxth	r2, r3
     f5a:	683b      	ldr	r3, [r7, #0]
     f5c:	801a      	strh	r2, [r3, #0]
     f5e:	e005      	b.n	f6c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f64:	b2db      	uxtb	r3, r3
     f66:	b29a      	uxth	r2, r3
     f68:	683b      	ldr	r3, [r7, #0]
     f6a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     f6c:	230f      	movs	r3, #15
     f6e:	18fb      	adds	r3, r7, r3
     f70:	781b      	ldrb	r3, [r3, #0]
}
     f72:	1c18      	adds	r0, r3, #0
     f74:	46bd      	mov	sp, r7
     f76:	b004      	add	sp, #16
     f78:	bd80      	pop	{r7, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000e89 	.word	0x00000e89

00000f80 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     f80:	b590      	push	{r4, r7, lr}
     f82:	b093      	sub	sp, #76	; 0x4c
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f8a:	687b      	ldr	r3, [r7, #4]
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     f96:	231c      	movs	r3, #28
     f98:	18fb      	adds	r3, r7, r3
     f9a:	1c18      	adds	r0, r3, #0
     f9c:	4b86      	ldr	r3, [pc, #536]	; (11b8 <_spi_set_config+0x238>)
     f9e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     fa0:	231c      	movs	r3, #28
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	2200      	movs	r2, #0
     fa6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	781b      	ldrb	r3, [r3, #0]
     fac:	2b00      	cmp	r3, #0
     fae:	d103      	bne.n	fb8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     fb0:	231c      	movs	r3, #28
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	2200      	movs	r2, #0
     fb6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     fbc:	230c      	movs	r3, #12
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     fc2:	683b      	ldr	r3, [r7, #0]
     fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     fc6:	230c      	movs	r3, #12
     fc8:	18fb      	adds	r3, r7, r3
     fca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     fd0:	230c      	movs	r3, #12
     fd2:	18fb      	adds	r3, r7, r3
     fd4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     fd6:	683b      	ldr	r3, [r7, #0]
     fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     fda:	230c      	movs	r3, #12
     fdc:	18fb      	adds	r3, r7, r3
     fde:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fe0:	2347      	movs	r3, #71	; 0x47
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	2200      	movs	r2, #0
     fe6:	701a      	strb	r2, [r3, #0]
     fe8:	e02c      	b.n	1044 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fea:	2347      	movs	r3, #71	; 0x47
     fec:	18fb      	adds	r3, r7, r3
     fee:	781a      	ldrb	r2, [r3, #0]
     ff0:	230c      	movs	r3, #12
     ff2:	18fb      	adds	r3, r7, r3
     ff4:	0092      	lsls	r2, r2, #2
     ff6:	58d3      	ldr	r3, [r2, r3]
     ff8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ffc:	2b00      	cmp	r3, #0
     ffe:	d109      	bne.n	1014 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1002:	2347      	movs	r3, #71	; 0x47
    1004:	18fb      	adds	r3, r7, r3
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	1c10      	adds	r0, r2, #0
    100a:	1c19      	adds	r1, r3, #0
    100c:	4b6b      	ldr	r3, [pc, #428]	; (11bc <_spi_set_config+0x23c>)
    100e:	4798      	blx	r3
    1010:	1c03      	adds	r3, r0, #0
    1012:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1016:	3301      	adds	r3, #1
    1018:	d00d      	beq.n	1036 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    101a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    101c:	b2da      	uxtb	r2, r3
    101e:	231c      	movs	r3, #28
    1020:	18fb      	adds	r3, r7, r3
    1022:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1026:	0c1b      	lsrs	r3, r3, #16
    1028:	b2da      	uxtb	r2, r3
    102a:	231c      	movs	r3, #28
    102c:	18fb      	adds	r3, r7, r3
    102e:	1c10      	adds	r0, r2, #0
    1030:	1c19      	adds	r1, r3, #0
    1032:	4b63      	ldr	r3, [pc, #396]	; (11c0 <_spi_set_config+0x240>)
    1034:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1036:	2347      	movs	r3, #71	; 0x47
    1038:	18fb      	adds	r3, r7, r3
    103a:	781a      	ldrb	r2, [r3, #0]
    103c:	2347      	movs	r3, #71	; 0x47
    103e:	18fb      	adds	r3, r7, r3
    1040:	3201      	adds	r2, #1
    1042:	701a      	strb	r2, [r3, #0]
    1044:	2347      	movs	r3, #71	; 0x47
    1046:	18fb      	adds	r3, r7, r3
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	2b03      	cmp	r3, #3
    104c:	d9cd      	bls.n	fea <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    104e:	683b      	ldr	r3, [r7, #0]
    1050:	781a      	ldrb	r2, [r3, #0]
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    1056:	683b      	ldr	r3, [r7, #0]
    1058:	7c1a      	ldrb	r2, [r3, #16]
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    105e:	683b      	ldr	r3, [r7, #0]
    1060:	7c9a      	ldrb	r2, [r3, #18]
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1066:	683b      	ldr	r3, [r7, #0]
    1068:	7d1a      	ldrb	r2, [r3, #20]
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    106e:	230a      	movs	r3, #10
    1070:	18fb      	adds	r3, r7, r3
    1072:	2200      	movs	r2, #0
    1074:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1076:	2300      	movs	r3, #0
    1078:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    107a:	2300      	movs	r3, #0
    107c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    107e:	683b      	ldr	r3, [r7, #0]
    1080:	781b      	ldrb	r3, [r3, #0]
    1082:	2b01      	cmp	r3, #1
    1084:	d12b      	bne.n	10de <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	1c18      	adds	r0, r3, #0
    108c:	4b4d      	ldr	r3, [pc, #308]	; (11c4 <_spi_set_config+0x244>)
    108e:	4798      	blx	r3
    1090:	1c03      	adds	r3, r0, #0
    1092:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1096:	3314      	adds	r3, #20
    1098:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    109c:	b2db      	uxtb	r3, r3
    109e:	1c18      	adds	r0, r3, #0
    10a0:	4b49      	ldr	r3, [pc, #292]	; (11c8 <_spi_set_config+0x248>)
    10a2:	4798      	blx	r3
    10a4:	1c03      	adds	r3, r0, #0
    10a6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    10a8:	683b      	ldr	r3, [r7, #0]
    10aa:	6999      	ldr	r1, [r3, #24]
    10ac:	2323      	movs	r3, #35	; 0x23
    10ae:	18fc      	adds	r4, r7, r3
    10b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10b2:	230a      	movs	r3, #10
    10b4:	18fb      	adds	r3, r7, r3
    10b6:	1c08      	adds	r0, r1, #0
    10b8:	1c11      	adds	r1, r2, #0
    10ba:	1c1a      	adds	r2, r3, #0
    10bc:	4b43      	ldr	r3, [pc, #268]	; (11cc <_spi_set_config+0x24c>)
    10be:	4798      	blx	r3
    10c0:	1c03      	adds	r3, r0, #0
    10c2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    10c4:	2323      	movs	r3, #35	; 0x23
    10c6:	18fb      	adds	r3, r7, r3
    10c8:	781b      	ldrb	r3, [r3, #0]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d001      	beq.n	10d2 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    10ce:	2317      	movs	r3, #23
    10d0:	e06d      	b.n	11ae <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    10d2:	230a      	movs	r3, #10
    10d4:	18fb      	adds	r3, r7, r3
    10d6:	881b      	ldrh	r3, [r3, #0]
    10d8:	b2da      	uxtb	r2, r3
    10da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10dc:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d11a      	bne.n	111c <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    10e6:	683b      	ldr	r3, [r7, #0]
    10e8:	699b      	ldr	r3, [r3, #24]
    10ea:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	8b9b      	ldrh	r3, [r3, #28]
    10f0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    10f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    10f6:	683a      	ldr	r2, [r7, #0]
    10f8:	7f92      	ldrb	r2, [r2, #30]
    10fa:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    10fc:	683a      	ldr	r2, [r7, #0]
    10fe:	7fd2      	ldrb	r2, [r2, #31]
    1100:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1102:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1104:	431a      	orrs	r2, r3
    1106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1108:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    110a:	683b      	ldr	r3, [r7, #0]
    110c:	2220      	movs	r2, #32
    110e:	5c9b      	ldrb	r3, [r3, r2]
    1110:	2b00      	cmp	r3, #0
    1112:	d003      	beq.n	111c <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1116:	2240      	movs	r2, #64	; 0x40
    1118:	4313      	orrs	r3, r2
    111a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    111c:	683b      	ldr	r3, [r7, #0]
    111e:	685b      	ldr	r3, [r3, #4]
    1120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1122:	4313      	orrs	r3, r2
    1124:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	689b      	ldr	r3, [r3, #8]
    112a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    112c:	4313      	orrs	r3, r2
    112e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1130:	683b      	ldr	r3, [r7, #0]
    1132:	68db      	ldr	r3, [r3, #12]
    1134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1136:	4313      	orrs	r3, r2
    1138:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	7c1b      	ldrb	r3, [r3, #16]
    113e:	1c1a      	adds	r2, r3, #0
    1140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1142:	4313      	orrs	r3, r2
    1144:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1146:	683b      	ldr	r3, [r7, #0]
    1148:	7c5b      	ldrb	r3, [r3, #17]
    114a:	2b00      	cmp	r3, #0
    114c:	d103      	bne.n	1156 <_spi_set_config+0x1d6>
    114e:	4b20      	ldr	r3, [pc, #128]	; (11d0 <_spi_set_config+0x250>)
    1150:	4798      	blx	r3
    1152:	1e03      	subs	r3, r0, #0
    1154:	d003      	beq.n	115e <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1158:	2280      	movs	r2, #128	; 0x80
    115a:	4313      	orrs	r3, r2
    115c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    115e:	683b      	ldr	r3, [r7, #0]
    1160:	7c9b      	ldrb	r3, [r3, #18]
    1162:	2b00      	cmp	r3, #0
    1164:	d004      	beq.n	1170 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1168:	2280      	movs	r2, #128	; 0x80
    116a:	0292      	lsls	r2, r2, #10
    116c:	4313      	orrs	r3, r2
    116e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	7cdb      	ldrb	r3, [r3, #19]
    1174:	2b00      	cmp	r3, #0
    1176:	d004      	beq.n	1182 <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117a:	2280      	movs	r2, #128	; 0x80
    117c:	0092      	lsls	r2, r2, #2
    117e:	4313      	orrs	r3, r2
    1180:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1182:	683b      	ldr	r3, [r7, #0]
    1184:	7d1b      	ldrb	r3, [r3, #20]
    1186:	2b00      	cmp	r3, #0
    1188:	d004      	beq.n	1194 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    118c:	2280      	movs	r2, #128	; 0x80
    118e:	0192      	lsls	r2, r2, #6
    1190:	4313      	orrs	r3, r2
    1192:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1196:	681a      	ldr	r2, [r3, #0]
    1198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    119a:	431a      	orrs	r2, r3
    119c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    119e:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    11a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a2:	685a      	ldr	r2, [r3, #4]
    11a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a6:	431a      	orrs	r2, r3
    11a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11aa:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    11ac:	2300      	movs	r3, #0
}
    11ae:	1c18      	adds	r0, r3, #0
    11b0:	46bd      	mov	sp, r7
    11b2:	b013      	add	sp, #76	; 0x4c
    11b4:	bd90      	pop	{r4, r7, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	00000cd5 	.word	0x00000cd5
    11bc:	00001b21 	.word	0x00001b21
    11c0:	00002b99 	.word	0x00002b99
    11c4:	00001cdd 	.word	0x00001cdd
    11c8:	000029d1 	.word	0x000029d1
    11cc:	00001a19 	.word	0x00001a19
    11d0:	00000e41 	.word	0x00000e41

000011d4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    11d4:	b590      	push	{r4, r7, lr}
    11d6:	b08b      	sub	sp, #44	; 0x2c
    11d8:	af00      	add	r7, sp, #0
    11da:	60f8      	str	r0, [r7, #12]
    11dc:	60b9      	str	r1, [r7, #8]
    11de:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    11e0:	68fb      	ldr	r3, [r7, #12]
    11e2:	68ba      	ldr	r2, [r7, #8]
    11e4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    11ec:	6a3b      	ldr	r3, [r7, #32]
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	2202      	movs	r2, #2
    11f2:	4013      	ands	r3, r2
    11f4:	d001      	beq.n	11fa <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    11f6:	231c      	movs	r3, #28
    11f8:	e0a5      	b.n	1346 <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    11fa:	6a3b      	ldr	r3, [r7, #32]
    11fc:	681b      	ldr	r3, [r3, #0]
    11fe:	2201      	movs	r2, #1
    1200:	4013      	ands	r3, r2
    1202:	d001      	beq.n	1208 <spi_init+0x34>
		return STATUS_BUSY;
    1204:	2305      	movs	r3, #5
    1206:	e09e      	b.n	1346 <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	1c18      	adds	r0, r3, #0
    120e:	4b50      	ldr	r3, [pc, #320]	; (1350 <spi_init+0x17c>)
    1210:	4798      	blx	r3
    1212:	1c03      	adds	r3, r0, #0
    1214:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1216:	69fb      	ldr	r3, [r7, #28]
    1218:	3302      	adds	r3, #2
    121a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    121c:	69fb      	ldr	r3, [r7, #28]
    121e:	3314      	adds	r3, #20
    1220:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	1c13      	adds	r3, r2, #0
    122a:	2002      	movs	r0, #2
    122c:	1c19      	adds	r1, r3, #0
    122e:	4b49      	ldr	r3, [pc, #292]	; (1354 <spi_init+0x180>)
    1230:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1232:	2310      	movs	r3, #16
    1234:	18fb      	adds	r3, r7, r3
    1236:	1c18      	adds	r0, r3, #0
    1238:	4b47      	ldr	r3, [pc, #284]	; (1358 <spi_init+0x184>)
    123a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    123c:	687b      	ldr	r3, [r7, #4]
    123e:	2224      	movs	r2, #36	; 0x24
    1240:	5c9a      	ldrb	r2, [r3, r2]
    1242:	2310      	movs	r3, #16
    1244:	18fb      	adds	r3, r7, r3
    1246:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1248:	697b      	ldr	r3, [r7, #20]
    124a:	b2da      	uxtb	r2, r3
    124c:	2310      	movs	r3, #16
    124e:	18fb      	adds	r3, r7, r3
    1250:	1c10      	adds	r0, r2, #0
    1252:	1c19      	adds	r1, r3, #0
    1254:	4b41      	ldr	r3, [pc, #260]	; (135c <spi_init+0x188>)
    1256:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1258:	697b      	ldr	r3, [r7, #20]
    125a:	b2db      	uxtb	r3, r3
    125c:	1c18      	adds	r0, r3, #0
    125e:	4b40      	ldr	r3, [pc, #256]	; (1360 <spi_init+0x18c>)
    1260:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1262:	687b      	ldr	r3, [r7, #4]
    1264:	2224      	movs	r2, #36	; 0x24
    1266:	5c9b      	ldrb	r3, [r3, r2]
    1268:	1c18      	adds	r0, r3, #0
    126a:	2100      	movs	r1, #0
    126c:	4b3d      	ldr	r3, [pc, #244]	; (1364 <spi_init+0x190>)
    126e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	2b01      	cmp	r3, #1
    1276:	d105      	bne.n	1284 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1278:	6a3b      	ldr	r3, [r7, #32]
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	220c      	movs	r2, #12
    127e:	431a      	orrs	r2, r3
    1280:	6a3b      	ldr	r3, [r7, #32]
    1282:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	781b      	ldrb	r3, [r3, #0]
    1288:	2b00      	cmp	r3, #0
    128a:	d105      	bne.n	1298 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    128c:	6a3b      	ldr	r3, [r7, #32]
    128e:	681b      	ldr	r3, [r3, #0]
    1290:	2208      	movs	r2, #8
    1292:	431a      	orrs	r2, r3
    1294:	6a3b      	ldr	r3, [r7, #32]
    1296:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1298:	2327      	movs	r3, #39	; 0x27
    129a:	18fb      	adds	r3, r7, r3
    129c:	2200      	movs	r2, #0
    129e:	701a      	strb	r2, [r3, #0]
    12a0:	e00f      	b.n	12c2 <spi_init+0xee>
		module->callback[i]        = NULL;
    12a2:	2327      	movs	r3, #39	; 0x27
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	68fa      	ldr	r2, [r7, #12]
    12aa:	3302      	adds	r3, #2
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	18d3      	adds	r3, r2, r3
    12b0:	2200      	movs	r2, #0
    12b2:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    12b4:	2327      	movs	r3, #39	; 0x27
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	781a      	ldrb	r2, [r3, #0]
    12ba:	2327      	movs	r3, #39	; 0x27
    12bc:	18fb      	adds	r3, r7, r3
    12be:	3201      	adds	r2, #1
    12c0:	701a      	strb	r2, [r3, #0]
    12c2:	2327      	movs	r3, #39	; 0x27
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	2b06      	cmp	r3, #6
    12ca:	d9ea      	bls.n	12a2 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	2200      	movs	r2, #0
    12d0:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2200      	movs	r2, #0
    12d6:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	2200      	movs	r2, #0
    12dc:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    12de:	68fb      	ldr	r3, [r7, #12]
    12e0:	2200      	movs	r2, #0
    12e2:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    12e4:	68fb      	ldr	r3, [r7, #12]
    12e6:	2236      	movs	r2, #54	; 0x36
    12e8:	2100      	movs	r1, #0
    12ea:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	2237      	movs	r2, #55	; 0x37
    12f0:	2100      	movs	r1, #0
    12f2:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	2238      	movs	r2, #56	; 0x38
    12f8:	2100      	movs	r1, #0
    12fa:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	2203      	movs	r2, #3
    1300:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	2200      	movs	r2, #0
    1306:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	681b      	ldr	r3, [r3, #0]
    130c:	2213      	movs	r2, #19
    130e:	18bc      	adds	r4, r7, r2
    1310:	1c18      	adds	r0, r3, #0
    1312:	4b0f      	ldr	r3, [pc, #60]	; (1350 <spi_init+0x17c>)
    1314:	4798      	blx	r3
    1316:	1c03      	adds	r3, r0, #0
    1318:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    131a:	2313      	movs	r3, #19
    131c:	18fb      	adds	r3, r7, r3
    131e:	781a      	ldrb	r2, [r3, #0]
    1320:	4b11      	ldr	r3, [pc, #68]	; (1368 <spi_init+0x194>)
    1322:	1c10      	adds	r0, r2, #0
    1324:	1c19      	adds	r1, r3, #0
    1326:	4b11      	ldr	r3, [pc, #68]	; (136c <spi_init+0x198>)
    1328:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    132a:	2313      	movs	r3, #19
    132c:	18fb      	adds	r3, r7, r3
    132e:	781a      	ldrb	r2, [r3, #0]
    1330:	4b0f      	ldr	r3, [pc, #60]	; (1370 <spi_init+0x19c>)
    1332:	0092      	lsls	r2, r2, #2
    1334:	68f9      	ldr	r1, [r7, #12]
    1336:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1338:	68fa      	ldr	r2, [r7, #12]
    133a:	687b      	ldr	r3, [r7, #4]
    133c:	1c10      	adds	r0, r2, #0
    133e:	1c19      	adds	r1, r3, #0
    1340:	4b0c      	ldr	r3, [pc, #48]	; (1374 <spi_init+0x1a0>)
    1342:	4798      	blx	r3
    1344:	1c03      	adds	r3, r0, #0
}
    1346:	1c18      	adds	r0, r3, #0
    1348:	46bd      	mov	sp, r7
    134a:	b00b      	add	sp, #44	; 0x2c
    134c:	bd90      	pop	{r4, r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	00001cdd 	.word	0x00001cdd
    1354:	00000de5 	.word	0x00000de5
    1358:	00000dd1 	.word	0x00000dd1
    135c:	000028ad 	.word	0x000028ad
    1360:	000028f1 	.word	0x000028f1
    1364:	00001a95 	.word	0x00001a95
    1368:	000016fd 	.word	0x000016fd
    136c:	00001d3d 	.word	0x00001d3d
    1370:	200000c4 	.word	0x200000c4
    1374:	00000f81 	.word	0x00000f81

00001378 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    1378:	b590      	push	{r4, r7, lr}
    137a:	b087      	sub	sp, #28
    137c:	af00      	add	r7, sp, #0
    137e:	60f8      	str	r0, [r7, #12]
    1380:	607a      	str	r2, [r7, #4]
    1382:	230a      	movs	r3, #10
    1384:	18fb      	adds	r3, r7, r3
    1386:	1c0a      	adds	r2, r1, #0
    1388:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    138a:	68fb      	ldr	r3, [r7, #12]
    138c:	79db      	ldrb	r3, [r3, #7]
    138e:	2201      	movs	r2, #1
    1390:	4053      	eors	r3, r2
    1392:	b2db      	uxtb	r3, r3
    1394:	2b00      	cmp	r3, #0
    1396:	d001      	beq.n	139c <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    1398:	231c      	movs	r3, #28
    139a:	e082      	b.n	14a2 <spi_transceive_wait+0x12a>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	2238      	movs	r2, #56	; 0x38
    13a0:	5c9b      	ldrb	r3, [r3, r2]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	2b05      	cmp	r3, #5
    13a6:	d101      	bne.n	13ac <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    13a8:	2305      	movs	r3, #5
    13aa:	e07a      	b.n	14a2 <spi_transceive_wait+0x12a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    13ac:	2315      	movs	r3, #21
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	2200      	movs	r2, #0
    13b2:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	795b      	ldrb	r3, [r3, #5]
    13b8:	2b00      	cmp	r3, #0
    13ba:	d120      	bne.n	13fe <spi_transceive_wait+0x86>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    13bc:	2316      	movs	r3, #22
    13be:	18fb      	adds	r3, r7, r3
    13c0:	2200      	movs	r2, #0
    13c2:	801a      	strh	r2, [r3, #0]
    13c4:	e015      	b.n	13f2 <spi_transceive_wait+0x7a>
			if (spi_is_ready_to_write(module)) {
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	1c18      	adds	r0, r3, #0
    13ca:	4b38      	ldr	r3, [pc, #224]	; (14ac <spi_transceive_wait+0x134>)
    13cc:	4798      	blx	r3
    13ce:	1e03      	subs	r3, r0, #0
    13d0:	d000      	beq.n	13d4 <spi_transceive_wait+0x5c>
				break;
    13d2:	e014      	b.n	13fe <spi_transceive_wait+0x86>
			} else if (j == SPI_TIMEOUT) {
    13d4:	2316      	movs	r3, #22
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	881b      	ldrh	r3, [r3, #0]
    13da:	4a35      	ldr	r2, [pc, #212]	; (14b0 <spi_transceive_wait+0x138>)
    13dc:	4293      	cmp	r3, r2
    13de:	d101      	bne.n	13e4 <spi_transceive_wait+0x6c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    13e0:	2312      	movs	r3, #18
    13e2:	e05e      	b.n	14a2 <spi_transceive_wait+0x12a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    13e4:	2316      	movs	r3, #22
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	881a      	ldrh	r2, [r3, #0]
    13ea:	2316      	movs	r3, #22
    13ec:	18fb      	adds	r3, r7, r3
    13ee:	3201      	adds	r2, #1
    13f0:	801a      	strh	r2, [r3, #0]
    13f2:	2316      	movs	r3, #22
    13f4:	18fb      	adds	r3, r7, r3
    13f6:	881b      	ldrh	r3, [r3, #0]
    13f8:	4a2d      	ldr	r2, [pc, #180]	; (14b0 <spi_transceive_wait+0x138>)
    13fa:	4293      	cmp	r3, r2
    13fc:	d9e3      	bls.n	13c6 <spi_transceive_wait+0x4e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	1c18      	adds	r0, r3, #0
    1404:	4b29      	ldr	r3, [pc, #164]	; (14ac <spi_transceive_wait+0x134>)
    1406:	4798      	blx	r3
    1408:	1c03      	adds	r3, r0, #0
    140a:	1c1a      	adds	r2, r3, #0
    140c:	2301      	movs	r3, #1
    140e:	4053      	eors	r3, r2
    1410:	b2db      	uxtb	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	d1f4      	bne.n	1400 <spi_transceive_wait+0x88>
	}

	/* Write data */
	spi_write(module, tx_data);
    1416:	68fa      	ldr	r2, [r7, #12]
    1418:	230a      	movs	r3, #10
    141a:	18fb      	adds	r3, r7, r3
    141c:	881b      	ldrh	r3, [r3, #0]
    141e:	1c10      	adds	r0, r2, #0
    1420:	1c19      	adds	r1, r3, #0
    1422:	4b24      	ldr	r3, [pc, #144]	; (14b4 <spi_transceive_wait+0x13c>)
    1424:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    1426:	68fb      	ldr	r3, [r7, #12]
    1428:	795b      	ldrb	r3, [r3, #5]
    142a:	2b00      	cmp	r3, #0
    142c:	d120      	bne.n	1470 <spi_transceive_wait+0xf8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    142e:	2316      	movs	r3, #22
    1430:	18fb      	adds	r3, r7, r3
    1432:	2200      	movs	r2, #0
    1434:	801a      	strh	r2, [r3, #0]
    1436:	e015      	b.n	1464 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	1c18      	adds	r0, r3, #0
    143c:	4b1e      	ldr	r3, [pc, #120]	; (14b8 <spi_transceive_wait+0x140>)
    143e:	4798      	blx	r3
    1440:	1e03      	subs	r3, r0, #0
    1442:	d000      	beq.n	1446 <spi_transceive_wait+0xce>
				break;
    1444:	e014      	b.n	1470 <spi_transceive_wait+0xf8>
			} else if (j == SPI_TIMEOUT) {
    1446:	2316      	movs	r3, #22
    1448:	18fb      	adds	r3, r7, r3
    144a:	881b      	ldrh	r3, [r3, #0]
    144c:	4a18      	ldr	r2, [pc, #96]	; (14b0 <spi_transceive_wait+0x138>)
    144e:	4293      	cmp	r3, r2
    1450:	d101      	bne.n	1456 <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1452:	2312      	movs	r3, #18
    1454:	e025      	b.n	14a2 <spi_transceive_wait+0x12a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1456:	2316      	movs	r3, #22
    1458:	18fb      	adds	r3, r7, r3
    145a:	881a      	ldrh	r2, [r3, #0]
    145c:	2316      	movs	r3, #22
    145e:	18fb      	adds	r3, r7, r3
    1460:	3201      	adds	r2, #1
    1462:	801a      	strh	r2, [r3, #0]
    1464:	2316      	movs	r3, #22
    1466:	18fb      	adds	r3, r7, r3
    1468:	881b      	ldrh	r3, [r3, #0]
    146a:	4a11      	ldr	r2, [pc, #68]	; (14b0 <spi_transceive_wait+0x138>)
    146c:	4293      	cmp	r3, r2
    146e:	d9e3      	bls.n	1438 <spi_transceive_wait+0xc0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1470:	46c0      	nop			; (mov r8, r8)
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	1c18      	adds	r0, r3, #0
    1476:	4b10      	ldr	r3, [pc, #64]	; (14b8 <spi_transceive_wait+0x140>)
    1478:	4798      	blx	r3
    147a:	1c03      	adds	r3, r0, #0
    147c:	1c1a      	adds	r2, r3, #0
    147e:	2301      	movs	r3, #1
    1480:	4053      	eors	r3, r2
    1482:	b2db      	uxtb	r3, r3
    1484:	2b00      	cmp	r3, #0
    1486:	d1f4      	bne.n	1472 <spi_transceive_wait+0xfa>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    1488:	2315      	movs	r3, #21
    148a:	18fc      	adds	r4, r7, r3
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	1c10      	adds	r0, r2, #0
    1492:	1c19      	adds	r1, r3, #0
    1494:	4b09      	ldr	r3, [pc, #36]	; (14bc <spi_transceive_wait+0x144>)
    1496:	4798      	blx	r3
    1498:	1c03      	adds	r3, r0, #0
    149a:	7023      	strb	r3, [r4, #0]

	return retval;
    149c:	2315      	movs	r3, #21
    149e:	18fb      	adds	r3, r7, r3
    14a0:	781b      	ldrb	r3, [r3, #0]
}
    14a2:	1c18      	adds	r0, r3, #0
    14a4:	46bd      	mov	sp, r7
    14a6:	b007      	add	sp, #28
    14a8:	bd90      	pop	{r4, r7, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00000e61 	.word	0x00000e61
    14b0:	00002710 	.word	0x00002710
    14b4:	00000eb1 	.word	0x00000eb1
    14b8:	00000e89 	.word	0x00000e89
    14bc:	00000ef9 	.word	0x00000ef9

000014c0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	b086      	sub	sp, #24
    14c4:	af00      	add	r7, sp, #0
    14c6:	60f8      	str	r0, [r7, #12]
    14c8:	60b9      	str	r1, [r7, #8]
    14ca:	1dfb      	adds	r3, r7, #7
    14cc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    14ce:	68fb      	ldr	r3, [r7, #12]
    14d0:	795b      	ldrb	r3, [r3, #5]
    14d2:	2b01      	cmp	r3, #1
    14d4:	d001      	beq.n	14da <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    14d6:	2315      	movs	r3, #21
    14d8:	e05c      	b.n	1594 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    14da:	68fb      	ldr	r3, [r7, #12]
    14dc:	7a1b      	ldrb	r3, [r3, #8]
    14de:	2201      	movs	r2, #1
    14e0:	4053      	eors	r3, r2
    14e2:	b2db      	uxtb	r3, r3
    14e4:	2b00      	cmp	r3, #0
    14e6:	d054      	beq.n	1592 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    14e8:	1dfb      	adds	r3, r7, #7
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d04a      	beq.n	1586 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    14f0:	68bb      	ldr	r3, [r7, #8]
    14f2:	785b      	ldrb	r3, [r3, #1]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d03f      	beq.n	1578 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    14f8:	68fb      	ldr	r3, [r7, #12]
    14fa:	1c18      	adds	r0, r3, #0
    14fc:	4b27      	ldr	r3, [pc, #156]	; (159c <spi_select_slave+0xdc>)
    14fe:	4798      	blx	r3
    1500:	1c03      	adds	r3, r0, #0
    1502:	1c1a      	adds	r2, r3, #0
    1504:	2301      	movs	r3, #1
    1506:	4053      	eors	r3, r2
    1508:	b2db      	uxtb	r3, r3
    150a:	2b00      	cmp	r3, #0
    150c:	d007      	beq.n	151e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    150e:	68bb      	ldr	r3, [r7, #8]
    1510:	781b      	ldrb	r3, [r3, #0]
    1512:	1c18      	adds	r0, r3, #0
    1514:	2101      	movs	r1, #1
    1516:	4b22      	ldr	r3, [pc, #136]	; (15a0 <spi_select_slave+0xe0>)
    1518:	4798      	blx	r3
					return STATUS_BUSY;
    151a:	2305      	movs	r3, #5
    151c:	e03a      	b.n	1594 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    151e:	68bb      	ldr	r3, [r7, #8]
    1520:	781b      	ldrb	r3, [r3, #0]
    1522:	1c18      	adds	r0, r3, #0
    1524:	2100      	movs	r1, #0
    1526:	4b1e      	ldr	r3, [pc, #120]	; (15a0 <spi_select_slave+0xe0>)
    1528:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    152a:	68bb      	ldr	r3, [r7, #8]
    152c:	789b      	ldrb	r3, [r3, #2]
    152e:	b29b      	uxth	r3, r3
    1530:	68fa      	ldr	r2, [r7, #12]
    1532:	1c10      	adds	r0, r2, #0
    1534:	1c19      	adds	r1, r3, #0
    1536:	4b1b      	ldr	r3, [pc, #108]	; (15a4 <spi_select_slave+0xe4>)
    1538:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	79db      	ldrb	r3, [r3, #7]
    153e:	2201      	movs	r2, #1
    1540:	4053      	eors	r3, r2
    1542:	b2db      	uxtb	r3, r3
    1544:	2b00      	cmp	r3, #0
    1546:	d024      	beq.n	1592 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1548:	46c0      	nop			; (mov r8, r8)
    154a:	68fb      	ldr	r3, [r7, #12]
    154c:	1c18      	adds	r0, r3, #0
    154e:	4b16      	ldr	r3, [pc, #88]	; (15a8 <spi_select_slave+0xe8>)
    1550:	4798      	blx	r3
    1552:	1c03      	adds	r3, r0, #0
    1554:	1c1a      	adds	r2, r3, #0
    1556:	2301      	movs	r3, #1
    1558:	4053      	eors	r3, r2
    155a:	b2db      	uxtb	r3, r3
    155c:	2b00      	cmp	r3, #0
    155e:	d1f4      	bne.n	154a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1560:	2316      	movs	r3, #22
    1562:	18fb      	adds	r3, r7, r3
    1564:	2200      	movs	r2, #0
    1566:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1568:	68fa      	ldr	r2, [r7, #12]
    156a:	2316      	movs	r3, #22
    156c:	18fb      	adds	r3, r7, r3
    156e:	1c10      	adds	r0, r2, #0
    1570:	1c19      	adds	r1, r3, #0
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <spi_select_slave+0xec>)
    1574:	4798      	blx	r3
    1576:	e00c      	b.n	1592 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1578:	68bb      	ldr	r3, [r7, #8]
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	1c18      	adds	r0, r3, #0
    157e:	2100      	movs	r1, #0
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <spi_select_slave+0xe0>)
    1582:	4798      	blx	r3
    1584:	e005      	b.n	1592 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1586:	68bb      	ldr	r3, [r7, #8]
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	1c18      	adds	r0, r3, #0
    158c:	2101      	movs	r1, #1
    158e:	4b04      	ldr	r3, [pc, #16]	; (15a0 <spi_select_slave+0xe0>)
    1590:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1592:	2300      	movs	r3, #0
}
    1594:	1c18      	adds	r0, r3, #0
    1596:	46bd      	mov	sp, r7
    1598:	b006      	add	sp, #24
    159a:	bd80      	pop	{r7, pc}
    159c:	00000e61 	.word	0x00000e61
    15a0:	00000d81 	.word	0x00000d81
    15a4:	00000eb1 	.word	0x00000eb1
    15a8:	00000e89 	.word	0x00000e89
    15ac:	00000ef9 	.word	0x00000ef9

000015b0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	b084      	sub	sp, #16
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	b2da      	uxtb	r2, r3
    15c6:	230e      	movs	r3, #14
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15d0:	1c5a      	adds	r2, r3, #1
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	799b      	ldrb	r3, [r3, #6]
    15da:	2b01      	cmp	r3, #1
    15dc:	d112      	bne.n	1604 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	b2db      	uxtb	r3, r3
    15e6:	021b      	lsls	r3, r3, #8
    15e8:	b29a      	uxth	r2, r3
    15ea:	230e      	movs	r3, #14
    15ec:	18fb      	adds	r3, r7, r3
    15ee:	881b      	ldrh	r3, [r3, #0]
    15f0:	4313      	orrs	r3, r2
    15f2:	b29a      	uxth	r2, r3
    15f4:	230e      	movs	r3, #14
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15fe:	1c5a      	adds	r2, r3, #1
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1604:	230e      	movs	r3, #14
    1606:	18fb      	adds	r3, r7, r3
    1608:	881b      	ldrh	r3, [r3, #0]
    160a:	05db      	lsls	r3, r3, #23
    160c:	0dda      	lsrs	r2, r3, #23
    160e:	68bb      	ldr	r3, [r7, #8]
    1610:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1616:	b29b      	uxth	r3, r3
    1618:	3b01      	subs	r3, #1
    161a:	b29a      	uxth	r2, r3
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1620:	46bd      	mov	sp, r7
    1622:	b004      	add	sp, #16
    1624:	bd80      	pop	{r7, pc}
    1626:	46c0      	nop			; (mov r8, r8)

00001628 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1628:	b580      	push	{r7, lr}
    162a:	b084      	sub	sp, #16
    162c:	af00      	add	r7, sp, #0
    162e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1636:	4b07      	ldr	r3, [pc, #28]	; (1654 <_spi_write_dummy+0x2c>)
    1638:	881b      	ldrh	r3, [r3, #0]
    163a:	1c1a      	adds	r2, r3, #0
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1644:	b29b      	uxth	r3, r3
    1646:	3b01      	subs	r3, #1
    1648:	b29a      	uxth	r2, r3
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    164e:	46bd      	mov	sp, r7
    1650:	b004      	add	sp, #16
    1652:	bd80      	pop	{r7, pc}
    1654:	200000c0 	.word	0x200000c0

00001658 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1666:	230a      	movs	r3, #10
    1668:	18fb      	adds	r3, r7, r3
    166a:	2200      	movs	r2, #0
    166c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1672:	230a      	movs	r3, #10
    1674:	18fb      	adds	r3, r7, r3
    1676:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    167c:	b29b      	uxth	r3, r3
    167e:	3b01      	subs	r3, #1
    1680:	b29a      	uxth	r2, r3
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1686:	46bd      	mov	sp, r7
    1688:	b004      	add	sp, #16
    168a:	bd80      	pop	{r7, pc}

0000168c <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    168c:	b580      	push	{r7, lr}
    168e:	b084      	sub	sp, #16
    1690:	af00      	add	r7, sp, #0
    1692:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    169a:	68fb      	ldr	r3, [r7, #12]
    169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    169e:	b29a      	uxth	r2, r3
    16a0:	230a      	movs	r3, #10
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	05d2      	lsls	r2, r2, #23
    16a6:	0dd2      	lsrs	r2, r2, #23
    16a8:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ae:	220a      	movs	r2, #10
    16b0:	18ba      	adds	r2, r7, r2
    16b2:	8812      	ldrh	r2, [r2, #0]
    16b4:	b2d2      	uxtb	r2, r2
    16b6:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16bc:	1c5a      	adds	r2, r3, #1
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	799b      	ldrb	r3, [r3, #6]
    16c6:	2b01      	cmp	r3, #1
    16c8:	d10d      	bne.n	16e6 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ce:	220a      	movs	r2, #10
    16d0:	18ba      	adds	r2, r7, r2
    16d2:	8812      	ldrh	r2, [r2, #0]
    16d4:	0a12      	lsrs	r2, r2, #8
    16d6:	b292      	uxth	r2, r2
    16d8:	b2d2      	uxtb	r2, r2
    16da:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e0:	1c5a      	adds	r2, r3, #1
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    16ea:	b29b      	uxth	r3, r3
    16ec:	3b01      	subs	r3, #1
    16ee:	b29a      	uxth	r2, r3
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	861a      	strh	r2, [r3, #48]	; 0x30
}
    16f4:	46bd      	mov	sp, r7
    16f6:	b004      	add	sp, #16
    16f8:	bd80      	pop	{r7, pc}
    16fa:	46c0      	nop			; (mov r8, r8)

000016fc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    16fc:	b580      	push	{r7, lr}
    16fe:	b086      	sub	sp, #24
    1700:	af00      	add	r7, sp, #0
    1702:	1c02      	adds	r2, r0, #0
    1704:	1dfb      	adds	r3, r7, #7
    1706:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1708:	1dfb      	adds	r3, r7, #7
    170a:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    170c:	4bb8      	ldr	r3, [pc, #736]	; (19f0 <_spi_interrupt_handler+0x2f4>)
    170e:	0092      	lsls	r2, r2, #2
    1710:	58d3      	ldr	r3, [r2, r3]
    1712:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1714:	697b      	ldr	r3, [r7, #20]
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    171a:	697b      	ldr	r3, [r7, #20]
    171c:	2237      	movs	r2, #55	; 0x37
    171e:	5c9a      	ldrb	r2, [r3, r2]
    1720:	697b      	ldr	r3, [r7, #20]
    1722:	2136      	movs	r1, #54	; 0x36
    1724:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    1726:	230f      	movs	r3, #15
    1728:	18fb      	adds	r3, r7, r3
    172a:	400a      	ands	r2, r1
    172c:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    172e:	693b      	ldr	r3, [r7, #16]
    1730:	7e1b      	ldrb	r3, [r3, #24]
    1732:	b2da      	uxtb	r2, r3
    1734:	230c      	movs	r3, #12
    1736:	18fb      	adds	r3, r7, r3
    1738:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    173a:	693b      	ldr	r3, [r7, #16]
    173c:	7d9b      	ldrb	r3, [r3, #22]
    173e:	b2db      	uxtb	r3, r3
    1740:	b29a      	uxth	r2, r3
    1742:	230c      	movs	r3, #12
    1744:	18fb      	adds	r3, r7, r3
    1746:	210c      	movs	r1, #12
    1748:	1879      	adds	r1, r7, r1
    174a:	8809      	ldrh	r1, [r1, #0]
    174c:	400a      	ands	r2, r1
    174e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1750:	230c      	movs	r3, #12
    1752:	18fb      	adds	r3, r7, r3
    1754:	881b      	ldrh	r3, [r3, #0]
    1756:	2201      	movs	r2, #1
    1758:	4013      	ands	r3, r2
    175a:	d041      	beq.n	17e0 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    175c:	697b      	ldr	r3, [r7, #20]
    175e:	795b      	ldrb	r3, [r3, #5]
    1760:	2b01      	cmp	r3, #1
    1762:	d110      	bne.n	1786 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1764:	697b      	ldr	r3, [r7, #20]
    1766:	7a5b      	ldrb	r3, [r3, #9]
    1768:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    176a:	2b00      	cmp	r3, #0
    176c:	d10b      	bne.n	1786 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    176e:	697b      	ldr	r3, [r7, #20]
    1770:	1c18      	adds	r0, r3, #0
    1772:	4ba0      	ldr	r3, [pc, #640]	; (19f4 <_spi_interrupt_handler+0x2f8>)
    1774:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1776:	697b      	ldr	r3, [r7, #20]
    1778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    177a:	b29b      	uxth	r3, r3
    177c:	2b00      	cmp	r3, #0
    177e:	d102      	bne.n	1786 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1780:	693b      	ldr	r3, [r7, #16]
    1782:	2201      	movs	r2, #1
    1784:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1786:	697b      	ldr	r3, [r7, #20]
    1788:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    178a:	2b01      	cmp	r3, #1
    178c:	d104      	bne.n	1798 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    178e:	697b      	ldr	r3, [r7, #20]
    1790:	7a5b      	ldrb	r3, [r3, #9]
    1792:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1794:	2b00      	cmp	r3, #0
    1796:	d108      	bne.n	17aa <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1798:	697b      	ldr	r3, [r7, #20]
    179a:	795b      	ldrb	r3, [r3, #5]
    179c:	2b00      	cmp	r3, #0
    179e:	d11f      	bne.n	17e0 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    17a0:	697b      	ldr	r3, [r7, #20]
    17a2:	7a5b      	ldrb	r3, [r3, #9]
    17a4:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    17a6:	2b00      	cmp	r3, #0
    17a8:	d01a      	beq.n	17e0 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    17aa:	697b      	ldr	r3, [r7, #20]
    17ac:	1c18      	adds	r0, r3, #0
    17ae:	4b92      	ldr	r3, [pc, #584]	; (19f8 <_spi_interrupt_handler+0x2fc>)
    17b0:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    17b2:	697b      	ldr	r3, [r7, #20]
    17b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    17b6:	b29b      	uxth	r3, r3
    17b8:	2b00      	cmp	r3, #0
    17ba:	d111      	bne.n	17e0 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    17bc:	693b      	ldr	r3, [r7, #16]
    17be:	2201      	movs	r2, #1
    17c0:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    17c2:	697b      	ldr	r3, [r7, #20]
    17c4:	7a5b      	ldrb	r3, [r3, #9]
    17c6:	b2db      	uxtb	r3, r3
    17c8:	2b01      	cmp	r3, #1
    17ca:	d109      	bne.n	17e0 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    17cc:	697b      	ldr	r3, [r7, #20]
    17ce:	79db      	ldrb	r3, [r3, #7]
    17d0:	2201      	movs	r2, #1
    17d2:	4053      	eors	r3, r2
    17d4:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    17d6:	2b00      	cmp	r3, #0
    17d8:	d002      	beq.n	17e0 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17da:	693b      	ldr	r3, [r7, #16]
    17dc:	2202      	movs	r2, #2
    17de:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    17e0:	230c      	movs	r3, #12
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	881b      	ldrh	r3, [r3, #0]
    17e6:	2204      	movs	r2, #4
    17e8:	4013      	ands	r3, r2
    17ea:	d100      	bne.n	17ee <_spi_interrupt_handler+0xf2>
    17ec:	e07e      	b.n	18ec <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17ee:	693b      	ldr	r3, [r7, #16]
    17f0:	8b5b      	ldrh	r3, [r3, #26]
    17f2:	b29b      	uxth	r3, r3
    17f4:	1c1a      	adds	r2, r3, #0
    17f6:	2304      	movs	r3, #4
    17f8:	4013      	ands	r3, r2
    17fa:	d022      	beq.n	1842 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    17fc:	697b      	ldr	r3, [r7, #20]
    17fe:	7a5b      	ldrb	r3, [r3, #9]
    1800:	b2db      	uxtb	r3, r3
    1802:	2b01      	cmp	r3, #1
    1804:	d014      	beq.n	1830 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1806:	697b      	ldr	r3, [r7, #20]
    1808:	2238      	movs	r2, #56	; 0x38
    180a:	211e      	movs	r1, #30
    180c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    180e:	697b      	ldr	r3, [r7, #20]
    1810:	2203      	movs	r2, #3
    1812:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1814:	693b      	ldr	r3, [r7, #16]
    1816:	2205      	movs	r2, #5
    1818:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    181a:	230f      	movs	r3, #15
    181c:	18fb      	adds	r3, r7, r3
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	2208      	movs	r2, #8
    1822:	4013      	ands	r3, r2
    1824:	d004      	beq.n	1830 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1826:	697b      	ldr	r3, [r7, #20]
    1828:	699b      	ldr	r3, [r3, #24]
    182a:	697a      	ldr	r2, [r7, #20]
    182c:	1c10      	adds	r0, r2, #0
    182e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1830:	693b      	ldr	r3, [r7, #16]
    1832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1834:	230a      	movs	r3, #10
    1836:	18fb      	adds	r3, r7, r3
    1838:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    183a:	693b      	ldr	r3, [r7, #16]
    183c:	2204      	movs	r2, #4
    183e:	835a      	strh	r2, [r3, #26]
    1840:	e054      	b.n	18ec <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1842:	697b      	ldr	r3, [r7, #20]
    1844:	7a5b      	ldrb	r3, [r3, #9]
    1846:	b2db      	uxtb	r3, r3
    1848:	2b01      	cmp	r3, #1
    184a:	d11e      	bne.n	188a <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    184c:	697b      	ldr	r3, [r7, #20]
    184e:	1c18      	adds	r0, r3, #0
    1850:	4b6a      	ldr	r3, [pc, #424]	; (19fc <_spi_interrupt_handler+0x300>)
    1852:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1854:	697b      	ldr	r3, [r7, #20]
    1856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1858:	b29b      	uxth	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	d146      	bne.n	18ec <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    185e:	693b      	ldr	r3, [r7, #16]
    1860:	2204      	movs	r2, #4
    1862:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1864:	697b      	ldr	r3, [r7, #20]
    1866:	2238      	movs	r2, #56	; 0x38
    1868:	2100      	movs	r1, #0
    186a:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    186c:	697b      	ldr	r3, [r7, #20]
    186e:	2203      	movs	r2, #3
    1870:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1872:	230f      	movs	r3, #15
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	2201      	movs	r2, #1
    187a:	4013      	ands	r3, r2
    187c:	d036      	beq.n	18ec <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    187e:	697b      	ldr	r3, [r7, #20]
    1880:	68db      	ldr	r3, [r3, #12]
    1882:	697a      	ldr	r2, [r7, #20]
    1884:	1c10      	adds	r0, r2, #0
    1886:	4798      	blx	r3
    1888:	e030      	b.n	18ec <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    188a:	697b      	ldr	r3, [r7, #20]
    188c:	1c18      	adds	r0, r3, #0
    188e:	4b5c      	ldr	r3, [pc, #368]	; (1a00 <_spi_interrupt_handler+0x304>)
    1890:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1892:	697b      	ldr	r3, [r7, #20]
    1894:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1896:	b29b      	uxth	r3, r3
    1898:	2b00      	cmp	r3, #0
    189a:	d127      	bne.n	18ec <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    189c:	697b      	ldr	r3, [r7, #20]
    189e:	2238      	movs	r2, #56	; 0x38
    18a0:	2100      	movs	r1, #0
    18a2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    18a4:	693b      	ldr	r3, [r7, #16]
    18a6:	2204      	movs	r2, #4
    18a8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    18aa:	697b      	ldr	r3, [r7, #20]
    18ac:	7a5b      	ldrb	r3, [r3, #9]
    18ae:	b2db      	uxtb	r3, r3
    18b0:	2b02      	cmp	r3, #2
    18b2:	d10b      	bne.n	18cc <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    18b4:	230f      	movs	r3, #15
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	781b      	ldrb	r3, [r3, #0]
    18ba:	2204      	movs	r2, #4
    18bc:	4013      	ands	r3, r2
    18be:	d015      	beq.n	18ec <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    18c0:	697b      	ldr	r3, [r7, #20]
    18c2:	695b      	ldr	r3, [r3, #20]
    18c4:	697a      	ldr	r2, [r7, #20]
    18c6:	1c10      	adds	r0, r2, #0
    18c8:	4798      	blx	r3
    18ca:	e00f      	b.n	18ec <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    18cc:	697b      	ldr	r3, [r7, #20]
    18ce:	7a5b      	ldrb	r3, [r3, #9]
    18d0:	b2db      	uxtb	r3, r3
    18d2:	2b00      	cmp	r3, #0
    18d4:	d10a      	bne.n	18ec <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    18d6:	230f      	movs	r3, #15
    18d8:	18fb      	adds	r3, r7, r3
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	2202      	movs	r2, #2
    18de:	4013      	ands	r3, r2
    18e0:	d004      	beq.n	18ec <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    18e2:	697b      	ldr	r3, [r7, #20]
    18e4:	691b      	ldr	r3, [r3, #16]
    18e6:	697a      	ldr	r2, [r7, #20]
    18e8:	1c10      	adds	r0, r2, #0
    18ea:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    18ec:	230c      	movs	r3, #12
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	881b      	ldrh	r3, [r3, #0]
    18f2:	2202      	movs	r2, #2
    18f4:	4013      	ands	r3, r2
    18f6:	d046      	beq.n	1986 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    18f8:	697b      	ldr	r3, [r7, #20]
    18fa:	795b      	ldrb	r3, [r3, #5]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d11d      	bne.n	193c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1900:	693b      	ldr	r3, [r7, #16]
    1902:	2207      	movs	r2, #7
    1904:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1906:	693b      	ldr	r3, [r7, #16]
    1908:	2202      	movs	r2, #2
    190a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    190c:	697b      	ldr	r3, [r7, #20]
    190e:	2203      	movs	r2, #3
    1910:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1912:	697b      	ldr	r3, [r7, #20]
    1914:	2200      	movs	r2, #0
    1916:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1918:	697b      	ldr	r3, [r7, #20]
    191a:	2200      	movs	r2, #0
    191c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    191e:	697b      	ldr	r3, [r7, #20]
    1920:	2238      	movs	r2, #56	; 0x38
    1922:	2100      	movs	r1, #0
    1924:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1926:	230f      	movs	r3, #15
    1928:	18fb      	adds	r3, r7, r3
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	2210      	movs	r2, #16
    192e:	4013      	ands	r3, r2
    1930:	d004      	beq.n	193c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1932:	697b      	ldr	r3, [r7, #20]
    1934:	69db      	ldr	r3, [r3, #28]
    1936:	697a      	ldr	r2, [r7, #20]
    1938:	1c10      	adds	r0, r2, #0
    193a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    193c:	697b      	ldr	r3, [r7, #20]
    193e:	795b      	ldrb	r3, [r3, #5]
    1940:	2b01      	cmp	r3, #1
    1942:	d120      	bne.n	1986 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	7a5b      	ldrb	r3, [r3, #9]
    1948:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    194a:	2b01      	cmp	r3, #1
    194c:	d11b      	bne.n	1986 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    194e:	697b      	ldr	r3, [r7, #20]
    1950:	79db      	ldrb	r3, [r3, #7]
    1952:	2201      	movs	r2, #1
    1954:	4053      	eors	r3, r2
    1956:	b2db      	uxtb	r3, r3
    1958:	2b00      	cmp	r3, #0
    195a:	d014      	beq.n	1986 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    195c:	693b      	ldr	r3, [r7, #16]
    195e:	2202      	movs	r2, #2
    1960:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1962:	697b      	ldr	r3, [r7, #20]
    1964:	2203      	movs	r2, #3
    1966:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1968:	697b      	ldr	r3, [r7, #20]
    196a:	2238      	movs	r2, #56	; 0x38
    196c:	2100      	movs	r1, #0
    196e:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1970:	230f      	movs	r3, #15
    1972:	18fb      	adds	r3, r7, r3
    1974:	781b      	ldrb	r3, [r3, #0]
    1976:	2201      	movs	r2, #1
    1978:	4013      	ands	r3, r2
    197a:	d004      	beq.n	1986 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    197c:	697b      	ldr	r3, [r7, #20]
    197e:	68db      	ldr	r3, [r3, #12]
    1980:	697a      	ldr	r2, [r7, #20]
    1982:	1c10      	adds	r0, r2, #0
    1984:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1986:	230c      	movs	r3, #12
    1988:	18fb      	adds	r3, r7, r3
    198a:	881b      	ldrh	r3, [r3, #0]
    198c:	2208      	movs	r2, #8
    198e:	4013      	ands	r3, r2
    1990:	d014      	beq.n	19bc <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    1992:	697b      	ldr	r3, [r7, #20]
    1994:	795b      	ldrb	r3, [r3, #5]
    1996:	2b00      	cmp	r3, #0
    1998:	d110      	bne.n	19bc <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    199a:	693b      	ldr	r3, [r7, #16]
    199c:	2208      	movs	r2, #8
    199e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    19a0:	693b      	ldr	r3, [r7, #16]
    19a2:	2208      	movs	r2, #8
    19a4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    19a6:	230f      	movs	r3, #15
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2220      	movs	r2, #32
    19ae:	4013      	ands	r3, r2
    19b0:	d004      	beq.n	19bc <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    19b2:	697b      	ldr	r3, [r7, #20]
    19b4:	6a1b      	ldr	r3, [r3, #32]
    19b6:	697a      	ldr	r2, [r7, #20]
    19b8:	1c10      	adds	r0, r2, #0
    19ba:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    19bc:	230c      	movs	r3, #12
    19be:	18fb      	adds	r3, r7, r3
    19c0:	881b      	ldrh	r3, [r3, #0]
    19c2:	2280      	movs	r2, #128	; 0x80
    19c4:	4013      	ands	r3, r2
    19c6:	d010      	beq.n	19ea <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    19c8:	693b      	ldr	r3, [r7, #16]
    19ca:	2280      	movs	r2, #128	; 0x80
    19cc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    19ce:	693b      	ldr	r3, [r7, #16]
    19d0:	2280      	movs	r2, #128	; 0x80
    19d2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    19d4:	230f      	movs	r3, #15
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	2240      	movs	r2, #64	; 0x40
    19dc:	4013      	ands	r3, r2
    19de:	d004      	beq.n	19ea <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19e4:	697a      	ldr	r2, [r7, #20]
    19e6:	1c10      	adds	r0, r2, #0
    19e8:	4798      	blx	r3
		}
	}
#  endif
}
    19ea:	46bd      	mov	sp, r7
    19ec:	b006      	add	sp, #24
    19ee:	bd80      	pop	{r7, pc}
    19f0:	200000c4 	.word	0x200000c4
    19f4:	00001629 	.word	0x00001629
    19f8:	000015b1 	.word	0x000015b1
    19fc:	00001659 	.word	0x00001659
    1a00:	0000168d 	.word	0x0000168d

00001a04 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	2200      	movs	r2, #0
    1a10:	701a      	strb	r2, [r3, #0]
}
    1a12:	46bd      	mov	sp, r7
    1a14:	b002      	add	sp, #8
    1a16:	bd80      	pop	{r7, pc}

00001a18 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1a18:	b580      	push	{r7, lr}
    1a1a:	b086      	sub	sp, #24
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	60f8      	str	r0, [r7, #12]
    1a20:	60b9      	str	r1, [r7, #8]
    1a22:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1a24:	2316      	movs	r3, #22
    1a26:	18fb      	adds	r3, r7, r3
    1a28:	2200      	movs	r2, #0
    1a2a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1a2c:	68bb      	ldr	r3, [r7, #8]
    1a2e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1a30:	68bb      	ldr	r3, [r7, #8]
    1a32:	085a      	lsrs	r2, r3, #1
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	429a      	cmp	r2, r3
    1a38:	d201      	bcs.n	1a3e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a3a:	2340      	movs	r3, #64	; 0x40
    1a3c:	e026      	b.n	1a8c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1a3e:	68bb      	ldr	r3, [r7, #8]
    1a40:	085b      	lsrs	r3, r3, #1
    1a42:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1a44:	e00a      	b.n	1a5c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1a46:	693a      	ldr	r2, [r7, #16]
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	1ad3      	subs	r3, r2, r3
    1a4c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1a4e:	2316      	movs	r3, #22
    1a50:	18fb      	adds	r3, r7, r3
    1a52:	881a      	ldrh	r2, [r3, #0]
    1a54:	2316      	movs	r3, #22
    1a56:	18fb      	adds	r3, r7, r3
    1a58:	3201      	adds	r2, #1
    1a5a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1a5c:	693a      	ldr	r2, [r7, #16]
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	429a      	cmp	r2, r3
    1a62:	d2f0      	bcs.n	1a46 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1a64:	2316      	movs	r3, #22
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	2216      	movs	r2, #22
    1a6a:	18ba      	adds	r2, r7, r2
    1a6c:	8812      	ldrh	r2, [r2, #0]
    1a6e:	3a01      	subs	r2, #1
    1a70:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1a72:	2316      	movs	r3, #22
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	881b      	ldrh	r3, [r3, #0]
    1a78:	2bff      	cmp	r3, #255	; 0xff
    1a7a:	d901      	bls.n	1a80 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a7c:	2340      	movs	r3, #64	; 0x40
    1a7e:	e005      	b.n	1a8c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	2216      	movs	r2, #22
    1a84:	18ba      	adds	r2, r7, r2
    1a86:	8812      	ldrh	r2, [r2, #0]
    1a88:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1a8a:	2300      	movs	r3, #0
	}
}
    1a8c:	1c18      	adds	r0, r3, #0
    1a8e:	46bd      	mov	sp, r7
    1a90:	b006      	add	sp, #24
    1a92:	bd80      	pop	{r7, pc}

00001a94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b084      	sub	sp, #16
    1a98:	af00      	add	r7, sp, #0
    1a9a:	1c02      	adds	r2, r0, #0
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	701a      	strb	r2, [r3, #0]
    1aa0:	1dbb      	adds	r3, r7, #6
    1aa2:	1c0a      	adds	r2, r1, #0
    1aa4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1aa6:	4b1a      	ldr	r3, [pc, #104]	; (1b10 <sercom_set_gclk_generator+0x7c>)
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2201      	movs	r2, #1
    1aac:	4053      	eors	r3, r2
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d103      	bne.n	1abc <sercom_set_gclk_generator+0x28>
    1ab4:	1dbb      	adds	r3, r7, #6
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d01b      	beq.n	1af4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1abc:	230c      	movs	r3, #12
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	1c18      	adds	r0, r3, #0
    1ac2:	4b14      	ldr	r3, [pc, #80]	; (1b14 <sercom_set_gclk_generator+0x80>)
    1ac4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1ac6:	230c      	movs	r3, #12
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	1dfa      	adds	r2, r7, #7
    1acc:	7812      	ldrb	r2, [r2, #0]
    1ace:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1ad0:	230c      	movs	r3, #12
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	2013      	movs	r0, #19
    1ad6:	1c19      	adds	r1, r3, #0
    1ad8:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <sercom_set_gclk_generator+0x84>)
    1ada:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1adc:	2013      	movs	r0, #19
    1ade:	4b0f      	ldr	r3, [pc, #60]	; (1b1c <sercom_set_gclk_generator+0x88>)
    1ae0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1ae2:	4b0b      	ldr	r3, [pc, #44]	; (1b10 <sercom_set_gclk_generator+0x7c>)
    1ae4:	1dfa      	adds	r2, r7, #7
    1ae6:	7812      	ldrb	r2, [r2, #0]
    1ae8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1aea:	4b09      	ldr	r3, [pc, #36]	; (1b10 <sercom_set_gclk_generator+0x7c>)
    1aec:	2201      	movs	r2, #1
    1aee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1af0:	2300      	movs	r3, #0
    1af2:	e008      	b.n	1b06 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <sercom_set_gclk_generator+0x7c>)
    1af6:	785b      	ldrb	r3, [r3, #1]
    1af8:	1dfa      	adds	r2, r7, #7
    1afa:	7812      	ldrb	r2, [r2, #0]
    1afc:	429a      	cmp	r2, r3
    1afe:	d101      	bne.n	1b04 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1b00:	2300      	movs	r3, #0
    1b02:	e000      	b.n	1b06 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1b04:	231d      	movs	r3, #29
}
    1b06:	1c18      	adds	r0, r3, #0
    1b08:	46bd      	mov	sp, r7
    1b0a:	b004      	add	sp, #16
    1b0c:	bd80      	pop	{r7, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20000020 	.word	0x20000020
    1b14:	00001a05 	.word	0x00001a05
    1b18:	000028ad 	.word	0x000028ad
    1b1c:	000028f1 	.word	0x000028f1

00001b20 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
    1b28:	1c0a      	adds	r2, r1, #0
    1b2a:	1cfb      	adds	r3, r7, #3
    1b2c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	4a4d      	ldr	r2, [pc, #308]	; (1c68 <_sercom_get_default_pad+0x148>)
    1b32:	4293      	cmp	r3, r2
    1b34:	d03f      	beq.n	1bb6 <_sercom_get_default_pad+0x96>
    1b36:	4a4c      	ldr	r2, [pc, #304]	; (1c68 <_sercom_get_default_pad+0x148>)
    1b38:	4293      	cmp	r3, r2
    1b3a:	d806      	bhi.n	1b4a <_sercom_get_default_pad+0x2a>
    1b3c:	4a4b      	ldr	r2, [pc, #300]	; (1c6c <_sercom_get_default_pad+0x14c>)
    1b3e:	4293      	cmp	r3, r2
    1b40:	d00f      	beq.n	1b62 <_sercom_get_default_pad+0x42>
    1b42:	4a4b      	ldr	r2, [pc, #300]	; (1c70 <_sercom_get_default_pad+0x150>)
    1b44:	4293      	cmp	r3, r2
    1b46:	d021      	beq.n	1b8c <_sercom_get_default_pad+0x6c>
    1b48:	e089      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1b4a:	4a4a      	ldr	r2, [pc, #296]	; (1c74 <_sercom_get_default_pad+0x154>)
    1b4c:	4293      	cmp	r3, r2
    1b4e:	d100      	bne.n	1b52 <_sercom_get_default_pad+0x32>
    1b50:	e05b      	b.n	1c0a <_sercom_get_default_pad+0xea>
    1b52:	4a49      	ldr	r2, [pc, #292]	; (1c78 <_sercom_get_default_pad+0x158>)
    1b54:	4293      	cmp	r3, r2
    1b56:	d100      	bne.n	1b5a <_sercom_get_default_pad+0x3a>
    1b58:	e06c      	b.n	1c34 <_sercom_get_default_pad+0x114>
    1b5a:	4a48      	ldr	r2, [pc, #288]	; (1c7c <_sercom_get_default_pad+0x15c>)
    1b5c:	4293      	cmp	r3, r2
    1b5e:	d03f      	beq.n	1be0 <_sercom_get_default_pad+0xc0>
    1b60:	e07d      	b.n	1c5e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b62:	1cfb      	adds	r3, r7, #3
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	2b01      	cmp	r3, #1
    1b68:	d00a      	beq.n	1b80 <_sercom_get_default_pad+0x60>
    1b6a:	dc02      	bgt.n	1b72 <_sercom_get_default_pad+0x52>
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d005      	beq.n	1b7c <_sercom_get_default_pad+0x5c>
    1b70:	e075      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1b72:	2b02      	cmp	r3, #2
    1b74:	d006      	beq.n	1b84 <_sercom_get_default_pad+0x64>
    1b76:	2b03      	cmp	r3, #3
    1b78:	d006      	beq.n	1b88 <_sercom_get_default_pad+0x68>
    1b7a:	e070      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1b7c:	4b40      	ldr	r3, [pc, #256]	; (1c80 <_sercom_get_default_pad+0x160>)
    1b7e:	e06f      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1b80:	4b40      	ldr	r3, [pc, #256]	; (1c84 <_sercom_get_default_pad+0x164>)
    1b82:	e06d      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1b84:	4b40      	ldr	r3, [pc, #256]	; (1c88 <_sercom_get_default_pad+0x168>)
    1b86:	e06b      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1b88:	4b40      	ldr	r3, [pc, #256]	; (1c8c <_sercom_get_default_pad+0x16c>)
    1b8a:	e069      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1b8c:	1cfb      	adds	r3, r7, #3
    1b8e:	781b      	ldrb	r3, [r3, #0]
    1b90:	2b01      	cmp	r3, #1
    1b92:	d00a      	beq.n	1baa <_sercom_get_default_pad+0x8a>
    1b94:	dc02      	bgt.n	1b9c <_sercom_get_default_pad+0x7c>
    1b96:	2b00      	cmp	r3, #0
    1b98:	d005      	beq.n	1ba6 <_sercom_get_default_pad+0x86>
    1b9a:	e060      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1b9c:	2b02      	cmp	r3, #2
    1b9e:	d006      	beq.n	1bae <_sercom_get_default_pad+0x8e>
    1ba0:	2b03      	cmp	r3, #3
    1ba2:	d006      	beq.n	1bb2 <_sercom_get_default_pad+0x92>
    1ba4:	e05b      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1ba6:	2303      	movs	r3, #3
    1ba8:	e05a      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1baa:	4b39      	ldr	r3, [pc, #228]	; (1c90 <_sercom_get_default_pad+0x170>)
    1bac:	e058      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bae:	4b39      	ldr	r3, [pc, #228]	; (1c94 <_sercom_get_default_pad+0x174>)
    1bb0:	e056      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bb2:	4b39      	ldr	r3, [pc, #228]	; (1c98 <_sercom_get_default_pad+0x178>)
    1bb4:	e054      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bb6:	1cfb      	adds	r3, r7, #3
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	2b01      	cmp	r3, #1
    1bbc:	d00a      	beq.n	1bd4 <_sercom_get_default_pad+0xb4>
    1bbe:	dc02      	bgt.n	1bc6 <_sercom_get_default_pad+0xa6>
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d005      	beq.n	1bd0 <_sercom_get_default_pad+0xb0>
    1bc4:	e04b      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1bc6:	2b02      	cmp	r3, #2
    1bc8:	d006      	beq.n	1bd8 <_sercom_get_default_pad+0xb8>
    1bca:	2b03      	cmp	r3, #3
    1bcc:	d006      	beq.n	1bdc <_sercom_get_default_pad+0xbc>
    1bce:	e046      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1bd0:	4b32      	ldr	r3, [pc, #200]	; (1c9c <_sercom_get_default_pad+0x17c>)
    1bd2:	e045      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bd4:	4b32      	ldr	r3, [pc, #200]	; (1ca0 <_sercom_get_default_pad+0x180>)
    1bd6:	e043      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bd8:	4b32      	ldr	r3, [pc, #200]	; (1ca4 <_sercom_get_default_pad+0x184>)
    1bda:	e041      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bdc:	4b32      	ldr	r3, [pc, #200]	; (1ca8 <_sercom_get_default_pad+0x188>)
    1bde:	e03f      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1be0:	1cfb      	adds	r3, r7, #3
    1be2:	781b      	ldrb	r3, [r3, #0]
    1be4:	2b01      	cmp	r3, #1
    1be6:	d00a      	beq.n	1bfe <_sercom_get_default_pad+0xde>
    1be8:	dc02      	bgt.n	1bf0 <_sercom_get_default_pad+0xd0>
    1bea:	2b00      	cmp	r3, #0
    1bec:	d005      	beq.n	1bfa <_sercom_get_default_pad+0xda>
    1bee:	e036      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1bf0:	2b02      	cmp	r3, #2
    1bf2:	d006      	beq.n	1c02 <_sercom_get_default_pad+0xe2>
    1bf4:	2b03      	cmp	r3, #3
    1bf6:	d006      	beq.n	1c06 <_sercom_get_default_pad+0xe6>
    1bf8:	e031      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1bfa:	4b2c      	ldr	r3, [pc, #176]	; (1cac <_sercom_get_default_pad+0x18c>)
    1bfc:	e030      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1bfe:	4b2c      	ldr	r3, [pc, #176]	; (1cb0 <_sercom_get_default_pad+0x190>)
    1c00:	e02e      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c02:	4b2c      	ldr	r3, [pc, #176]	; (1cb4 <_sercom_get_default_pad+0x194>)
    1c04:	e02c      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c06:	4b2c      	ldr	r3, [pc, #176]	; (1cb8 <_sercom_get_default_pad+0x198>)
    1c08:	e02a      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c0a:	1cfb      	adds	r3, r7, #3
    1c0c:	781b      	ldrb	r3, [r3, #0]
    1c0e:	2b01      	cmp	r3, #1
    1c10:	d00a      	beq.n	1c28 <_sercom_get_default_pad+0x108>
    1c12:	dc02      	bgt.n	1c1a <_sercom_get_default_pad+0xfa>
    1c14:	2b00      	cmp	r3, #0
    1c16:	d005      	beq.n	1c24 <_sercom_get_default_pad+0x104>
    1c18:	e021      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1c1a:	2b02      	cmp	r3, #2
    1c1c:	d006      	beq.n	1c2c <_sercom_get_default_pad+0x10c>
    1c1e:	2b03      	cmp	r3, #3
    1c20:	d006      	beq.n	1c30 <_sercom_get_default_pad+0x110>
    1c22:	e01c      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1c24:	4b25      	ldr	r3, [pc, #148]	; (1cbc <_sercom_get_default_pad+0x19c>)
    1c26:	e01b      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c28:	4b25      	ldr	r3, [pc, #148]	; (1cc0 <_sercom_get_default_pad+0x1a0>)
    1c2a:	e019      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c2c:	4b25      	ldr	r3, [pc, #148]	; (1cc4 <_sercom_get_default_pad+0x1a4>)
    1c2e:	e017      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c30:	4b25      	ldr	r3, [pc, #148]	; (1cc8 <_sercom_get_default_pad+0x1a8>)
    1c32:	e015      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c34:	1cfb      	adds	r3, r7, #3
    1c36:	781b      	ldrb	r3, [r3, #0]
    1c38:	2b01      	cmp	r3, #1
    1c3a:	d00a      	beq.n	1c52 <_sercom_get_default_pad+0x132>
    1c3c:	dc02      	bgt.n	1c44 <_sercom_get_default_pad+0x124>
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d005      	beq.n	1c4e <_sercom_get_default_pad+0x12e>
    1c42:	e00c      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1c44:	2b02      	cmp	r3, #2
    1c46:	d006      	beq.n	1c56 <_sercom_get_default_pad+0x136>
    1c48:	2b03      	cmp	r3, #3
    1c4a:	d006      	beq.n	1c5a <_sercom_get_default_pad+0x13a>
    1c4c:	e007      	b.n	1c5e <_sercom_get_default_pad+0x13e>
    1c4e:	4b1f      	ldr	r3, [pc, #124]	; (1ccc <_sercom_get_default_pad+0x1ac>)
    1c50:	e006      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c52:	4b1f      	ldr	r3, [pc, #124]	; (1cd0 <_sercom_get_default_pad+0x1b0>)
    1c54:	e004      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c56:	4b1f      	ldr	r3, [pc, #124]	; (1cd4 <_sercom_get_default_pad+0x1b4>)
    1c58:	e002      	b.n	1c60 <_sercom_get_default_pad+0x140>
    1c5a:	4b1f      	ldr	r3, [pc, #124]	; (1cd8 <_sercom_get_default_pad+0x1b8>)
    1c5c:	e000      	b.n	1c60 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1c5e:	2300      	movs	r3, #0
}
    1c60:	1c18      	adds	r0, r3, #0
    1c62:	46bd      	mov	sp, r7
    1c64:	b002      	add	sp, #8
    1c66:	bd80      	pop	{r7, pc}
    1c68:	42001000 	.word	0x42001000
    1c6c:	42000800 	.word	0x42000800
    1c70:	42000c00 	.word	0x42000c00
    1c74:	42001800 	.word	0x42001800
    1c78:	42001c00 	.word	0x42001c00
    1c7c:	42001400 	.word	0x42001400
    1c80:	00040003 	.word	0x00040003
    1c84:	00050003 	.word	0x00050003
    1c88:	00060003 	.word	0x00060003
    1c8c:	00070003 	.word	0x00070003
    1c90:	00010003 	.word	0x00010003
    1c94:	001e0003 	.word	0x001e0003
    1c98:	001f0003 	.word	0x001f0003
    1c9c:	00080003 	.word	0x00080003
    1ca0:	00090003 	.word	0x00090003
    1ca4:	000a0003 	.word	0x000a0003
    1ca8:	000b0003 	.word	0x000b0003
    1cac:	00100003 	.word	0x00100003
    1cb0:	00110003 	.word	0x00110003
    1cb4:	00120003 	.word	0x00120003
    1cb8:	00130003 	.word	0x00130003
    1cbc:	000c0003 	.word	0x000c0003
    1cc0:	000d0003 	.word	0x000d0003
    1cc4:	000e0003 	.word	0x000e0003
    1cc8:	000f0003 	.word	0x000f0003
    1ccc:	00160003 	.word	0x00160003
    1cd0:	00170003 	.word	0x00170003
    1cd4:	00180003 	.word	0x00180003
    1cd8:	00190003 	.word	0x00190003

00001cdc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1cdc:	b590      	push	{r4, r7, lr}
    1cde:	b08b      	sub	sp, #44	; 0x2c
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ce4:	230c      	movs	r3, #12
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	4a0e      	ldr	r2, [pc, #56]	; (1d24 <_sercom_get_sercom_inst_index+0x48>)
    1cea:	ca13      	ldmia	r2!, {r0, r1, r4}
    1cec:	c313      	stmia	r3!, {r0, r1, r4}
    1cee:	ca13      	ldmia	r2!, {r0, r1, r4}
    1cf0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1cf2:	2300      	movs	r3, #0
    1cf4:	627b      	str	r3, [r7, #36]	; 0x24
    1cf6:	e00d      	b.n	1d14 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	220c      	movs	r2, #12
    1cfc:	18ba      	adds	r2, r7, r2
    1cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1d00:	0089      	lsls	r1, r1, #2
    1d02:	588a      	ldr	r2, [r1, r2]
    1d04:	4293      	cmp	r3, r2
    1d06:	d102      	bne.n	1d0e <_sercom_get_sercom_inst_index+0x32>
			return i;
    1d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d0a:	b2db      	uxtb	r3, r3
    1d0c:	e006      	b.n	1d1c <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d10:	3301      	adds	r3, #1
    1d12:	627b      	str	r3, [r7, #36]	; 0x24
    1d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d16:	2b05      	cmp	r3, #5
    1d18:	d9ee      	bls.n	1cf8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d1a:	2300      	movs	r3, #0
}
    1d1c:	1c18      	adds	r0, r3, #0
    1d1e:	46bd      	mov	sp, r7
    1d20:	b00b      	add	sp, #44	; 0x2c
    1d22:	bd90      	pop	{r4, r7, pc}
    1d24:	00004644 	.word	0x00004644

00001d28 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	b082      	sub	sp, #8
    1d2c:	af00      	add	r7, sp, #0
    1d2e:	1c02      	adds	r2, r0, #0
    1d30:	1dfb      	adds	r3, r7, #7
    1d32:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1d34:	46bd      	mov	sp, r7
    1d36:	b002      	add	sp, #8
    1d38:	bd80      	pop	{r7, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)

00001d3c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b084      	sub	sp, #16
    1d40:	af00      	add	r7, sp, #0
    1d42:	1c02      	adds	r2, r0, #0
    1d44:	6039      	str	r1, [r7, #0]
    1d46:	1dfb      	adds	r3, r7, #7
    1d48:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1d4a:	4b13      	ldr	r3, [pc, #76]	; (1d98 <_sercom_set_handler+0x5c>)
    1d4c:	781b      	ldrb	r3, [r3, #0]
    1d4e:	2201      	movs	r2, #1
    1d50:	4053      	eors	r3, r2
    1d52:	b2db      	uxtb	r3, r3
    1d54:	2b00      	cmp	r3, #0
    1d56:	d015      	beq.n	1d84 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d58:	2300      	movs	r3, #0
    1d5a:	60fb      	str	r3, [r7, #12]
    1d5c:	e00c      	b.n	1d78 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d5e:	4b0f      	ldr	r3, [pc, #60]	; (1d9c <_sercom_set_handler+0x60>)
    1d60:	68fa      	ldr	r2, [r7, #12]
    1d62:	0092      	lsls	r2, r2, #2
    1d64:	490e      	ldr	r1, [pc, #56]	; (1da0 <_sercom_set_handler+0x64>)
    1d66:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <_sercom_set_handler+0x68>)
    1d6a:	68fa      	ldr	r2, [r7, #12]
    1d6c:	0092      	lsls	r2, r2, #2
    1d6e:	2100      	movs	r1, #0
    1d70:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d72:	68fb      	ldr	r3, [r7, #12]
    1d74:	3301      	adds	r3, #1
    1d76:	60fb      	str	r3, [r7, #12]
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	2b05      	cmp	r3, #5
    1d7c:	d9ef      	bls.n	1d5e <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1d7e:	4b06      	ldr	r3, [pc, #24]	; (1d98 <_sercom_set_handler+0x5c>)
    1d80:	2201      	movs	r2, #1
    1d82:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1d84:	1dfb      	adds	r3, r7, #7
    1d86:	781a      	ldrb	r2, [r3, #0]
    1d88:	4b04      	ldr	r3, [pc, #16]	; (1d9c <_sercom_set_handler+0x60>)
    1d8a:	0092      	lsls	r2, r2, #2
    1d8c:	6839      	ldr	r1, [r7, #0]
    1d8e:	50d1      	str	r1, [r2, r3]
}
    1d90:	46bd      	mov	sp, r7
    1d92:	b004      	add	sp, #16
    1d94:	bd80      	pop	{r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	20000022 	.word	0x20000022
    1d9c:	20000024 	.word	0x20000024
    1da0:	00001d29 	.word	0x00001d29
    1da4:	200000c4 	.word	0x200000c4

00001da8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1da8:	b590      	push	{r4, r7, lr}
    1daa:	b085      	sub	sp, #20
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1db0:	2308      	movs	r3, #8
    1db2:	18fa      	adds	r2, r7, r3
    1db4:	4b0e      	ldr	r3, [pc, #56]	; (1df0 <_sercom_get_interrupt_vector+0x48>)
    1db6:	1c11      	adds	r1, r2, #0
    1db8:	1c1a      	adds	r2, r3, #0
    1dba:	2306      	movs	r3, #6
    1dbc:	1c08      	adds	r0, r1, #0
    1dbe:	1c11      	adds	r1, r2, #0
    1dc0:	1c1a      	adds	r2, r3, #0
    1dc2:	4b0c      	ldr	r3, [pc, #48]	; (1df4 <_sercom_get_interrupt_vector+0x4c>)
    1dc4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1dc6:	230f      	movs	r3, #15
    1dc8:	18fc      	adds	r4, r7, r3
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	1c18      	adds	r0, r3, #0
    1dce:	4b0a      	ldr	r3, [pc, #40]	; (1df8 <_sercom_get_interrupt_vector+0x50>)
    1dd0:	4798      	blx	r3
    1dd2:	1c03      	adds	r3, r0, #0
    1dd4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1dd6:	230f      	movs	r3, #15
    1dd8:	18fb      	adds	r3, r7, r3
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	2208      	movs	r2, #8
    1dde:	18ba      	adds	r2, r7, r2
    1de0:	5cd3      	ldrb	r3, [r2, r3]
    1de2:	b2db      	uxtb	r3, r3
    1de4:	b25b      	sxtb	r3, r3
}
    1de6:	1c18      	adds	r0, r3, #0
    1de8:	46bd      	mov	sp, r7
    1dea:	b005      	add	sp, #20
    1dec:	bd90      	pop	{r4, r7, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	0000465c 	.word	0x0000465c
    1df4:	000045f1 	.word	0x000045f1
    1df8:	00001cdd 	.word	0x00001cdd

00001dfc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1dfc:	b580      	push	{r7, lr}
    1dfe:	af00      	add	r7, sp, #0
    1e00:	4b02      	ldr	r3, [pc, #8]	; (1e0c <SERCOM0_Handler+0x10>)
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	2000      	movs	r0, #0
    1e06:	4798      	blx	r3
    1e08:	46bd      	mov	sp, r7
    1e0a:	bd80      	pop	{r7, pc}
    1e0c:	20000024 	.word	0x20000024

00001e10 <SERCOM1_Handler>:
    1e10:	b580      	push	{r7, lr}
    1e12:	af00      	add	r7, sp, #0
    1e14:	4b02      	ldr	r3, [pc, #8]	; (1e20 <SERCOM1_Handler+0x10>)
    1e16:	685b      	ldr	r3, [r3, #4]
    1e18:	2001      	movs	r0, #1
    1e1a:	4798      	blx	r3
    1e1c:	46bd      	mov	sp, r7
    1e1e:	bd80      	pop	{r7, pc}
    1e20:	20000024 	.word	0x20000024

00001e24 <SERCOM2_Handler>:
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0
    1e28:	4b02      	ldr	r3, [pc, #8]	; (1e34 <SERCOM2_Handler+0x10>)
    1e2a:	689b      	ldr	r3, [r3, #8]
    1e2c:	2002      	movs	r0, #2
    1e2e:	4798      	blx	r3
    1e30:	46bd      	mov	sp, r7
    1e32:	bd80      	pop	{r7, pc}
    1e34:	20000024 	.word	0x20000024

00001e38 <SERCOM3_Handler>:
    1e38:	b580      	push	{r7, lr}
    1e3a:	af00      	add	r7, sp, #0
    1e3c:	4b02      	ldr	r3, [pc, #8]	; (1e48 <SERCOM3_Handler+0x10>)
    1e3e:	68db      	ldr	r3, [r3, #12]
    1e40:	2003      	movs	r0, #3
    1e42:	4798      	blx	r3
    1e44:	46bd      	mov	sp, r7
    1e46:	bd80      	pop	{r7, pc}
    1e48:	20000024 	.word	0x20000024

00001e4c <SERCOM4_Handler>:
    1e4c:	b580      	push	{r7, lr}
    1e4e:	af00      	add	r7, sp, #0
    1e50:	4b02      	ldr	r3, [pc, #8]	; (1e5c <SERCOM4_Handler+0x10>)
    1e52:	691b      	ldr	r3, [r3, #16]
    1e54:	2004      	movs	r0, #4
    1e56:	4798      	blx	r3
    1e58:	46bd      	mov	sp, r7
    1e5a:	bd80      	pop	{r7, pc}
    1e5c:	20000024 	.word	0x20000024

00001e60 <SERCOM5_Handler>:
    1e60:	b580      	push	{r7, lr}
    1e62:	af00      	add	r7, sp, #0
    1e64:	4b02      	ldr	r3, [pc, #8]	; (1e70 <SERCOM5_Handler+0x10>)
    1e66:	695b      	ldr	r3, [r3, #20]
    1e68:	2005      	movs	r0, #5
    1e6a:	4798      	blx	r3
    1e6c:	46bd      	mov	sp, r7
    1e6e:	bd80      	pop	{r7, pc}
    1e70:	20000024 	.word	0x20000024

00001e74 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	b082      	sub	sp, #8
    1e78:	af00      	add	r7, sp, #0
    1e7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	2280      	movs	r2, #128	; 0x80
    1e80:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2200      	movs	r2, #0
    1e86:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2201      	movs	r2, #1
    1e8c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2200      	movs	r2, #0
    1e92:	70da      	strb	r2, [r3, #3]
}
    1e94:	46bd      	mov	sp, r7
    1e96:	b002      	add	sp, #8
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)

00001e9c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b084      	sub	sp, #16
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	1c02      	adds	r2, r0, #0
    1ea4:	6039      	str	r1, [r7, #0]
    1ea6:	1dfb      	adds	r3, r7, #7
    1ea8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1eaa:	230c      	movs	r3, #12
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	1c18      	adds	r0, r3, #0
    1eb0:	4b0f      	ldr	r3, [pc, #60]	; (1ef0 <port_pin_set_config+0x54>)
    1eb2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1eb4:	230c      	movs	r3, #12
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	2280      	movs	r2, #128	; 0x80
    1eba:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1ebc:	683b      	ldr	r3, [r7, #0]
    1ebe:	781a      	ldrb	r2, [r3, #0]
    1ec0:	230c      	movs	r3, #12
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1ec6:	683b      	ldr	r3, [r7, #0]
    1ec8:	785a      	ldrb	r2, [r3, #1]
    1eca:	230c      	movs	r3, #12
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1ed0:	683b      	ldr	r3, [r7, #0]
    1ed2:	789a      	ldrb	r2, [r3, #2]
    1ed4:	230c      	movs	r3, #12
    1ed6:	18fb      	adds	r3, r7, r3
    1ed8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1eda:	1dfb      	adds	r3, r7, #7
    1edc:	781a      	ldrb	r2, [r3, #0]
    1ede:	230c      	movs	r3, #12
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	1c10      	adds	r0, r2, #0
    1ee4:	1c19      	adds	r1, r3, #0
    1ee6:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <port_pin_set_config+0x58>)
    1ee8:	4798      	blx	r3
}
    1eea:	46bd      	mov	sp, r7
    1eec:	b004      	add	sp, #16
    1eee:	bd80      	pop	{r7, pc}
    1ef0:	00001e75 	.word	0x00001e75
    1ef4:	00002b99 	.word	0x00002b99

00001ef8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1efc:	46bd      	mov	sp, r7
    1efe:	bd80      	pop	{r7, pc}

00001f00 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1f06:	4b0f      	ldr	r3, [pc, #60]	; (1f44 <cpu_irq_enter_critical+0x44>)
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d112      	bne.n	1f34 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f0e:	f3ef 8310 	mrs	r3, PRIMASK
    1f12:	607b      	str	r3, [r7, #4]
  return(result);
    1f14:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1f16:	2b00      	cmp	r3, #0
    1f18:	d109      	bne.n	1f2e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1f1a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1f1c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1f20:	4b09      	ldr	r3, [pc, #36]	; (1f48 <cpu_irq_enter_critical+0x48>)
    1f22:	2200      	movs	r2, #0
    1f24:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1f26:	4b09      	ldr	r3, [pc, #36]	; (1f4c <cpu_irq_enter_critical+0x4c>)
    1f28:	2201      	movs	r2, #1
    1f2a:	701a      	strb	r2, [r3, #0]
    1f2c:	e002      	b.n	1f34 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1f2e:	4b07      	ldr	r3, [pc, #28]	; (1f4c <cpu_irq_enter_critical+0x4c>)
    1f30:	2200      	movs	r2, #0
    1f32:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1f34:	4b03      	ldr	r3, [pc, #12]	; (1f44 <cpu_irq_enter_critical+0x44>)
    1f36:	681b      	ldr	r3, [r3, #0]
    1f38:	1c5a      	adds	r2, r3, #1
    1f3a:	4b02      	ldr	r3, [pc, #8]	; (1f44 <cpu_irq_enter_critical+0x44>)
    1f3c:	601a      	str	r2, [r3, #0]
}
    1f3e:	46bd      	mov	sp, r7
    1f40:	b002      	add	sp, #8
    1f42:	bd80      	pop	{r7, pc}
    1f44:	2000003c 	.word	0x2000003c
    1f48:	20000000 	.word	0x20000000
    1f4c:	20000040 	.word	0x20000040

00001f50 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1f54:	4b0a      	ldr	r3, [pc, #40]	; (1f80 <cpu_irq_leave_critical+0x30>)
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	1e5a      	subs	r2, r3, #1
    1f5a:	4b09      	ldr	r3, [pc, #36]	; (1f80 <cpu_irq_leave_critical+0x30>)
    1f5c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1f5e:	4b08      	ldr	r3, [pc, #32]	; (1f80 <cpu_irq_leave_critical+0x30>)
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d10a      	bne.n	1f7c <cpu_irq_leave_critical+0x2c>
    1f66:	4b07      	ldr	r3, [pc, #28]	; (1f84 <cpu_irq_leave_critical+0x34>)
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d005      	beq.n	1f7c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <cpu_irq_leave_critical+0x38>)
    1f72:	2201      	movs	r2, #1
    1f74:	701a      	strb	r2, [r3, #0]
    1f76:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1f7a:	b662      	cpsie	i
	}
}
    1f7c:	46bd      	mov	sp, r7
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	2000003c 	.word	0x2000003c
    1f84:	20000040 	.word	0x20000040
    1f88:	20000000 	.word	0x20000000

00001f8c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b082      	sub	sp, #8
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	2201      	movs	r2, #1
    1f98:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	2200      	movs	r2, #0
    1f9e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	2206      	movs	r2, #6
    1fa4:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	2200      	movs	r2, #0
    1faa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	2200      	movs	r2, #0
    1fb0:	725a      	strb	r2, [r3, #9]
}
    1fb2:	46bd      	mov	sp, r7
    1fb4:	b002      	add	sp, #8
    1fb6:	bd80      	pop	{r7, pc}

00001fb8 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    1fb8:	b580      	push	{r7, lr}
    1fba:	b082      	sub	sp, #8
    1fbc:	af00      	add	r7, sp, #0
    1fbe:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	2201      	movs	r2, #1
    1fc4:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	2201      	movs	r2, #1
    1fca:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	2200      	movs	r2, #0
    1fd0:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    1fd2:	687b      	ldr	r3, [r7, #4]
    1fd4:	2201      	movs	r2, #1
    1fd6:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	2207      	movs	r2, #7
    1fdc:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	2200      	movs	r2, #0
    1fe2:	715a      	strb	r2, [r3, #5]
}
    1fe4:	46bd      	mov	sp, r7
    1fe6:	b002      	add	sp, #8
    1fe8:	bd80      	pop	{r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)

00001fec <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b082      	sub	sp, #8
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	2203      	movs	r2, #3
    1ff8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	2200      	movs	r2, #0
    1ffe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	2201      	movs	r2, #1
    2004:	709a      	strb	r2, [r3, #2]
}
    2006:	46bd      	mov	sp, r7
    2008:	b002      	add	sp, #8
    200a:	bd80      	pop	{r7, pc}

0000200c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    200c:	b580      	push	{r7, lr}
    200e:	b082      	sub	sp, #8
    2010:	af00      	add	r7, sp, #0
    2012:	1c02      	adds	r2, r0, #0
    2014:	1dfb      	adds	r3, r7, #7
    2016:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2018:	4a03      	ldr	r2, [pc, #12]	; (2028 <system_cpu_clock_set_divider+0x1c>)
    201a:	1dfb      	adds	r3, r7, #7
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	7213      	strb	r3, [r2, #8]
}
    2020:	46bd      	mov	sp, r7
    2022:	b002      	add	sp, #8
    2024:	bd80      	pop	{r7, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	40000400 	.word	0x40000400

0000202c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    202c:	b580      	push	{r7, lr}
    202e:	b082      	sub	sp, #8
    2030:	af00      	add	r7, sp, #0
    2032:	1c02      	adds	r2, r0, #0
    2034:	1dfb      	adds	r3, r7, #7
    2036:	701a      	strb	r2, [r3, #0]
    2038:	1dbb      	adds	r3, r7, #6
    203a:	1c0a      	adds	r2, r1, #0
    203c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    203e:	1dfb      	adds	r3, r7, #7
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b01      	cmp	r3, #1
    2044:	d008      	beq.n	2058 <system_apb_clock_set_divider+0x2c>
    2046:	2b02      	cmp	r3, #2
    2048:	d00b      	beq.n	2062 <system_apb_clock_set_divider+0x36>
    204a:	2b00      	cmp	r3, #0
    204c:	d10e      	bne.n	206c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    204e:	4a0b      	ldr	r2, [pc, #44]	; (207c <system_apb_clock_set_divider+0x50>)
    2050:	1dbb      	adds	r3, r7, #6
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	7253      	strb	r3, [r2, #9]
			break;
    2056:	e00b      	b.n	2070 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2058:	4a08      	ldr	r2, [pc, #32]	; (207c <system_apb_clock_set_divider+0x50>)
    205a:	1dbb      	adds	r3, r7, #6
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	7293      	strb	r3, [r2, #10]
			break;
    2060:	e006      	b.n	2070 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2062:	4a06      	ldr	r2, [pc, #24]	; (207c <system_apb_clock_set_divider+0x50>)
    2064:	1dbb      	adds	r3, r7, #6
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	72d3      	strb	r3, [r2, #11]
			break;
    206a:	e001      	b.n	2070 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    206c:	2317      	movs	r3, #23
    206e:	e000      	b.n	2072 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2070:	2300      	movs	r3, #0
}
    2072:	1c18      	adds	r0, r3, #0
    2074:	46bd      	mov	sp, r7
    2076:	b002      	add	sp, #8
    2078:	bd80      	pop	{r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	40000400 	.word	0x40000400

00002080 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2080:	b580      	push	{r7, lr}
    2082:	b082      	sub	sp, #8
    2084:	af00      	add	r7, sp, #0
    2086:	1c02      	adds	r2, r0, #0
    2088:	1dfb      	adds	r3, r7, #7
    208a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <system_flash_set_waitstates+0x30>)
    208e:	1dfa      	adds	r2, r7, #7
    2090:	7812      	ldrb	r2, [r2, #0]
    2092:	210f      	movs	r1, #15
    2094:	400a      	ands	r2, r1
    2096:	b2d2      	uxtb	r2, r2
    2098:	210f      	movs	r1, #15
    209a:	400a      	ands	r2, r1
    209c:	0052      	lsls	r2, r2, #1
    209e:	6859      	ldr	r1, [r3, #4]
    20a0:	201e      	movs	r0, #30
    20a2:	4381      	bics	r1, r0
    20a4:	430a      	orrs	r2, r1
    20a6:	605a      	str	r2, [r3, #4]
}
    20a8:	46bd      	mov	sp, r7
    20aa:	b002      	add	sp, #8
    20ac:	bd80      	pop	{r7, pc}
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	41004000 	.word	0x41004000

000020b4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    20b4:	b580      	push	{r7, lr}
    20b6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20b8:	46c0      	nop			; (mov r8, r8)
    20ba:	4b03      	ldr	r3, [pc, #12]	; (20c8 <_system_dfll_wait_for_sync+0x14>)
    20bc:	68db      	ldr	r3, [r3, #12]
    20be:	2210      	movs	r2, #16
    20c0:	4013      	ands	r3, r2
    20c2:	d0fa      	beq.n	20ba <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    20c4:	46bd      	mov	sp, r7
    20c6:	bd80      	pop	{r7, pc}
    20c8:	40000800 	.word	0x40000800

000020cc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    20d0:	4b0c      	ldr	r3, [pc, #48]	; (2104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    20d2:	2202      	movs	r2, #2
    20d4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    20d6:	4b0c      	ldr	r3, [pc, #48]	; (2108 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    20d8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    20da:	4a0a      	ldr	r2, [pc, #40]	; (2104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    20dc:	4b0b      	ldr	r3, [pc, #44]	; (210c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    20de:	689b      	ldr	r3, [r3, #8]
    20e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    20e2:	4a08      	ldr	r2, [pc, #32]	; (2104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    20e4:	4b09      	ldr	r3, [pc, #36]	; (210c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    20e6:	685b      	ldr	r3, [r3, #4]
    20e8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    20ea:	4b06      	ldr	r3, [pc, #24]	; (2104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    20ec:	2200      	movs	r2, #0
    20ee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    20f0:	4b05      	ldr	r3, [pc, #20]	; (2108 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    20f2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    20f4:	4a03      	ldr	r2, [pc, #12]	; (2104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    20f6:	4b05      	ldr	r3, [pc, #20]	; (210c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	b29b      	uxth	r3, r3
    20fc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    20fe:	46bd      	mov	sp, r7
    2100:	bd80      	pop	{r7, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	40000800 	.word	0x40000800
    2108:	000020b5 	.word	0x000020b5
    210c:	20000044 	.word	0x20000044

00002110 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2110:	b580      	push	{r7, lr}
    2112:	b082      	sub	sp, #8
    2114:	af00      	add	r7, sp, #0
    2116:	1c02      	adds	r2, r0, #0
    2118:	1dfb      	adds	r3, r7, #7
    211a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    211c:	1dfb      	adds	r3, r7, #7
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	2b08      	cmp	r3, #8
    2122:	d842      	bhi.n	21aa <system_clock_source_get_hz+0x9a>
    2124:	009a      	lsls	r2, r3, #2
    2126:	4b23      	ldr	r3, [pc, #140]	; (21b4 <system_clock_source_get_hz+0xa4>)
    2128:	18d3      	adds	r3, r2, r3
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    212e:	4b22      	ldr	r3, [pc, #136]	; (21b8 <system_clock_source_get_hz+0xa8>)
    2130:	691b      	ldr	r3, [r3, #16]
    2132:	e03b      	b.n	21ac <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2134:	4b21      	ldr	r3, [pc, #132]	; (21bc <system_clock_source_get_hz+0xac>)
    2136:	6a1b      	ldr	r3, [r3, #32]
    2138:	0a1b      	lsrs	r3, r3, #8
    213a:	1c1a      	adds	r2, r3, #0
    213c:	2303      	movs	r3, #3
    213e:	4013      	ands	r3, r2
    2140:	b2db      	uxtb	r3, r3
    2142:	1c1a      	adds	r2, r3, #0
    2144:	4b1e      	ldr	r3, [pc, #120]	; (21c0 <system_clock_source_get_hz+0xb0>)
    2146:	40d3      	lsrs	r3, r2
    2148:	e030      	b.n	21ac <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    214a:	2380      	movs	r3, #128	; 0x80
    214c:	021b      	lsls	r3, r3, #8
    214e:	e02d      	b.n	21ac <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2150:	2380      	movs	r3, #128	; 0x80
    2152:	021b      	lsls	r3, r3, #8
    2154:	e02a      	b.n	21ac <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2156:	4b18      	ldr	r3, [pc, #96]	; (21b8 <system_clock_source_get_hz+0xa8>)
    2158:	695b      	ldr	r3, [r3, #20]
    215a:	e027      	b.n	21ac <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    215c:	4b16      	ldr	r3, [pc, #88]	; (21b8 <system_clock_source_get_hz+0xa8>)
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	2202      	movs	r2, #2
    2162:	4013      	ands	r3, r2
    2164:	d101      	bne.n	216a <system_clock_source_get_hz+0x5a>
			return 0;
    2166:	2300      	movs	r3, #0
    2168:	e020      	b.n	21ac <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    216a:	4b16      	ldr	r3, [pc, #88]	; (21c4 <system_clock_source_get_hz+0xb4>)
    216c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    216e:	4b12      	ldr	r3, [pc, #72]	; (21b8 <system_clock_source_get_hz+0xa8>)
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	2204      	movs	r2, #4
    2174:	4013      	ands	r3, r2
    2176:	d009      	beq.n	218c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2178:	2000      	movs	r0, #0
    217a:	4b13      	ldr	r3, [pc, #76]	; (21c8 <system_clock_source_get_hz+0xb8>)
    217c:	4798      	blx	r3
    217e:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <system_clock_source_get_hz+0xa8>)
    2182:	689b      	ldr	r3, [r3, #8]
    2184:	041b      	lsls	r3, r3, #16
    2186:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2188:	4353      	muls	r3, r2
    218a:	e00f      	b.n	21ac <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    218c:	4b0f      	ldr	r3, [pc, #60]	; (21cc <system_clock_source_get_hz+0xbc>)
    218e:	e00d      	b.n	21ac <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2190:	4a0a      	ldr	r2, [pc, #40]	; (21bc <system_clock_source_get_hz+0xac>)
    2192:	2350      	movs	r3, #80	; 0x50
    2194:	5cd3      	ldrb	r3, [r2, r3]
    2196:	b2db      	uxtb	r3, r3
    2198:	1c1a      	adds	r2, r3, #0
    219a:	2304      	movs	r3, #4
    219c:	4013      	ands	r3, r2
    219e:	d101      	bne.n	21a4 <system_clock_source_get_hz+0x94>
			return 0;
    21a0:	2300      	movs	r3, #0
    21a2:	e003      	b.n	21ac <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    21a4:	4b04      	ldr	r3, [pc, #16]	; (21b8 <system_clock_source_get_hz+0xa8>)
    21a6:	68db      	ldr	r3, [r3, #12]
    21a8:	e000      	b.n	21ac <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    21aa:	2300      	movs	r3, #0
	}
}
    21ac:	1c18      	adds	r0, r3, #0
    21ae:	46bd      	mov	sp, r7
    21b0:	b002      	add	sp, #8
    21b2:	bd80      	pop	{r7, pc}
    21b4:	00004664 	.word	0x00004664
    21b8:	20000044 	.word	0x20000044
    21bc:	40000800 	.word	0x40000800
    21c0:	007a1200 	.word	0x007a1200
    21c4:	000020b5 	.word	0x000020b5
    21c8:	000029d1 	.word	0x000029d1
    21cc:	02dc6c00 	.word	0x02dc6c00

000021d0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b084      	sub	sp, #16
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    21d8:	4b1a      	ldr	r3, [pc, #104]	; (2244 <system_clock_source_osc8m_set_config+0x74>)
    21da:	6a1b      	ldr	r3, [r3, #32]
    21dc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	1c1a      	adds	r2, r3, #0
    21e4:	2303      	movs	r3, #3
    21e6:	4013      	ands	r3, r2
    21e8:	b2da      	uxtb	r2, r3
    21ea:	230d      	movs	r3, #13
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	2103      	movs	r1, #3
    21f0:	400a      	ands	r2, r1
    21f2:	1c10      	adds	r0, r2, #0
    21f4:	781a      	ldrb	r2, [r3, #0]
    21f6:	2103      	movs	r1, #3
    21f8:	438a      	bics	r2, r1
    21fa:	1c11      	adds	r1, r2, #0
    21fc:	1c02      	adds	r2, r0, #0
    21fe:	430a      	orrs	r2, r1
    2200:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	789a      	ldrb	r2, [r3, #2]
    2206:	230c      	movs	r3, #12
    2208:	18fb      	adds	r3, r7, r3
    220a:	01d0      	lsls	r0, r2, #7
    220c:	781a      	ldrb	r2, [r3, #0]
    220e:	217f      	movs	r1, #127	; 0x7f
    2210:	400a      	ands	r2, r1
    2212:	1c11      	adds	r1, r2, #0
    2214:	1c02      	adds	r2, r0, #0
    2216:	430a      	orrs	r2, r1
    2218:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	785a      	ldrb	r2, [r3, #1]
    221e:	230c      	movs	r3, #12
    2220:	18fb      	adds	r3, r7, r3
    2222:	2101      	movs	r1, #1
    2224:	400a      	ands	r2, r1
    2226:	0190      	lsls	r0, r2, #6
    2228:	781a      	ldrb	r2, [r3, #0]
    222a:	2140      	movs	r1, #64	; 0x40
    222c:	438a      	bics	r2, r1
    222e:	1c11      	adds	r1, r2, #0
    2230:	1c02      	adds	r2, r0, #0
    2232:	430a      	orrs	r2, r1
    2234:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2236:	4b03      	ldr	r3, [pc, #12]	; (2244 <system_clock_source_osc8m_set_config+0x74>)
    2238:	68fa      	ldr	r2, [r7, #12]
    223a:	621a      	str	r2, [r3, #32]
}
    223c:	46bd      	mov	sp, r7
    223e:	b004      	add	sp, #16
    2240:	bd80      	pop	{r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	40000800 	.word	0x40000800

00002248 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2248:	b580      	push	{r7, lr}
    224a:	b084      	sub	sp, #16
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2250:	4b2f      	ldr	r3, [pc, #188]	; (2310 <system_clock_source_osc32k_set_config+0xc8>)
    2252:	699b      	ldr	r3, [r3, #24]
    2254:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	785a      	ldrb	r2, [r3, #1]
    225a:	230c      	movs	r3, #12
    225c:	18fb      	adds	r3, r7, r3
    225e:	2101      	movs	r1, #1
    2260:	400a      	ands	r2, r1
    2262:	00d0      	lsls	r0, r2, #3
    2264:	781a      	ldrb	r2, [r3, #0]
    2266:	2108      	movs	r1, #8
    2268:	438a      	bics	r2, r1
    226a:	1c11      	adds	r1, r2, #0
    226c:	1c02      	adds	r2, r0, #0
    226e:	430a      	orrs	r2, r1
    2270:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	789a      	ldrb	r2, [r3, #2]
    2276:	230c      	movs	r3, #12
    2278:	18fb      	adds	r3, r7, r3
    227a:	2101      	movs	r1, #1
    227c:	400a      	ands	r2, r1
    227e:	0090      	lsls	r0, r2, #2
    2280:	781a      	ldrb	r2, [r3, #0]
    2282:	2104      	movs	r1, #4
    2284:	438a      	bics	r2, r1
    2286:	1c11      	adds	r1, r2, #0
    2288:	1c02      	adds	r2, r0, #0
    228a:	430a      	orrs	r2, r1
    228c:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	1c1a      	adds	r2, r3, #0
    2294:	2307      	movs	r3, #7
    2296:	4013      	ands	r3, r2
    2298:	b2da      	uxtb	r2, r3
    229a:	230d      	movs	r3, #13
    229c:	18fb      	adds	r3, r7, r3
    229e:	2107      	movs	r1, #7
    22a0:	400a      	ands	r2, r1
    22a2:	1c10      	adds	r0, r2, #0
    22a4:	781a      	ldrb	r2, [r3, #0]
    22a6:	2107      	movs	r1, #7
    22a8:	438a      	bics	r2, r1
    22aa:	1c11      	adds	r1, r2, #0
    22ac:	1c02      	adds	r2, r0, #0
    22ae:	430a      	orrs	r2, r1
    22b0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	791a      	ldrb	r2, [r3, #4]
    22b6:	230c      	movs	r3, #12
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	01d0      	lsls	r0, r2, #7
    22bc:	781a      	ldrb	r2, [r3, #0]
    22be:	217f      	movs	r1, #127	; 0x7f
    22c0:	400a      	ands	r2, r1
    22c2:	1c11      	adds	r1, r2, #0
    22c4:	1c02      	adds	r2, r0, #0
    22c6:	430a      	orrs	r2, r1
    22c8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	78da      	ldrb	r2, [r3, #3]
    22ce:	230c      	movs	r3, #12
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	2101      	movs	r1, #1
    22d4:	400a      	ands	r2, r1
    22d6:	0190      	lsls	r0, r2, #6
    22d8:	781a      	ldrb	r2, [r3, #0]
    22da:	2140      	movs	r1, #64	; 0x40
    22dc:	438a      	bics	r2, r1
    22de:	1c11      	adds	r1, r2, #0
    22e0:	1c02      	adds	r2, r0, #0
    22e2:	430a      	orrs	r2, r1
    22e4:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	795a      	ldrb	r2, [r3, #5]
    22ea:	230d      	movs	r3, #13
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	2101      	movs	r1, #1
    22f0:	400a      	ands	r2, r1
    22f2:	0110      	lsls	r0, r2, #4
    22f4:	781a      	ldrb	r2, [r3, #0]
    22f6:	2110      	movs	r1, #16
    22f8:	438a      	bics	r2, r1
    22fa:	1c11      	adds	r1, r2, #0
    22fc:	1c02      	adds	r2, r0, #0
    22fe:	430a      	orrs	r2, r1
    2300:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <system_clock_source_osc32k_set_config+0xc8>)
    2304:	68fa      	ldr	r2, [r7, #12]
    2306:	619a      	str	r2, [r3, #24]
}
    2308:	46bd      	mov	sp, r7
    230a:	b004      	add	sp, #16
    230c:	bd80      	pop	{r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	40000800 	.word	0x40000800

00002314 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	1c02      	adds	r2, r0, #0
    231c:	1dfb      	adds	r3, r7, #7
    231e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2320:	1dfb      	adds	r3, r7, #7
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	2b08      	cmp	r3, #8
    2326:	d83b      	bhi.n	23a0 <system_clock_source_enable+0x8c>
    2328:	009a      	lsls	r2, r3, #2
    232a:	4b21      	ldr	r3, [pc, #132]	; (23b0 <system_clock_source_enable+0x9c>)
    232c:	18d3      	adds	r3, r2, r3
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2332:	4b20      	ldr	r3, [pc, #128]	; (23b4 <system_clock_source_enable+0xa0>)
    2334:	4a1f      	ldr	r2, [pc, #124]	; (23b4 <system_clock_source_enable+0xa0>)
    2336:	6a12      	ldr	r2, [r2, #32]
    2338:	2102      	movs	r1, #2
    233a:	430a      	orrs	r2, r1
    233c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    233e:	2300      	movs	r3, #0
    2340:	e031      	b.n	23a6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2342:	4b1c      	ldr	r3, [pc, #112]	; (23b4 <system_clock_source_enable+0xa0>)
    2344:	4a1b      	ldr	r2, [pc, #108]	; (23b4 <system_clock_source_enable+0xa0>)
    2346:	6992      	ldr	r2, [r2, #24]
    2348:	2102      	movs	r1, #2
    234a:	430a      	orrs	r2, r1
    234c:	619a      	str	r2, [r3, #24]
		break;
    234e:	e029      	b.n	23a4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2350:	4a18      	ldr	r2, [pc, #96]	; (23b4 <system_clock_source_enable+0xa0>)
    2352:	4b18      	ldr	r3, [pc, #96]	; (23b4 <system_clock_source_enable+0xa0>)
    2354:	8a1b      	ldrh	r3, [r3, #16]
    2356:	b29b      	uxth	r3, r3
    2358:	2102      	movs	r1, #2
    235a:	430b      	orrs	r3, r1
    235c:	b29b      	uxth	r3, r3
    235e:	8213      	strh	r3, [r2, #16]
		break;
    2360:	e020      	b.n	23a4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2362:	4a14      	ldr	r2, [pc, #80]	; (23b4 <system_clock_source_enable+0xa0>)
    2364:	4b13      	ldr	r3, [pc, #76]	; (23b4 <system_clock_source_enable+0xa0>)
    2366:	8a9b      	ldrh	r3, [r3, #20]
    2368:	b29b      	uxth	r3, r3
    236a:	2102      	movs	r1, #2
    236c:	430b      	orrs	r3, r1
    236e:	b29b      	uxth	r3, r3
    2370:	8293      	strh	r3, [r2, #20]
		break;
    2372:	e017      	b.n	23a4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2374:	4b10      	ldr	r3, [pc, #64]	; (23b8 <system_clock_source_enable+0xa4>)
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	2202      	movs	r2, #2
    237a:	431a      	orrs	r2, r3
    237c:	4b0e      	ldr	r3, [pc, #56]	; (23b8 <system_clock_source_enable+0xa4>)
    237e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2380:	4b0e      	ldr	r3, [pc, #56]	; (23bc <system_clock_source_enable+0xa8>)
    2382:	4798      	blx	r3
		break;
    2384:	e00e      	b.n	23a4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2386:	4a0b      	ldr	r2, [pc, #44]	; (23b4 <system_clock_source_enable+0xa0>)
    2388:	490a      	ldr	r1, [pc, #40]	; (23b4 <system_clock_source_enable+0xa0>)
    238a:	2344      	movs	r3, #68	; 0x44
    238c:	5ccb      	ldrb	r3, [r1, r3]
    238e:	b2db      	uxtb	r3, r3
    2390:	2102      	movs	r1, #2
    2392:	430b      	orrs	r3, r1
    2394:	b2d9      	uxtb	r1, r3
    2396:	2344      	movs	r3, #68	; 0x44
    2398:	54d1      	strb	r1, [r2, r3]
		break;
    239a:	e003      	b.n	23a4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    239c:	2300      	movs	r3, #0
    239e:	e002      	b.n	23a6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    23a0:	2317      	movs	r3, #23
    23a2:	e000      	b.n	23a6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    23a4:	2300      	movs	r3, #0
}
    23a6:	1c18      	adds	r0, r3, #0
    23a8:	46bd      	mov	sp, r7
    23aa:	b002      	add	sp, #8
    23ac:	bd80      	pop	{r7, pc}
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	00004688 	.word	0x00004688
    23b4:	40000800 	.word	0x40000800
    23b8:	20000044 	.word	0x20000044
    23bc:	000020cd 	.word	0x000020cd

000023c0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    23c6:	1c3b      	adds	r3, r7, #0
    23c8:	2201      	movs	r2, #1
    23ca:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    23cc:	2300      	movs	r3, #0
    23ce:	607b      	str	r3, [r7, #4]
    23d0:	e009      	b.n	23e6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	b2da      	uxtb	r2, r3
    23d6:	1c3b      	adds	r3, r7, #0
    23d8:	1c10      	adds	r0, r2, #0
    23da:	1c19      	adds	r1, r3, #0
    23dc:	4b05      	ldr	r3, [pc, #20]	; (23f4 <_switch_peripheral_gclk+0x34>)
    23de:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	3301      	adds	r3, #1
    23e4:	607b      	str	r3, [r7, #4]
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	2b24      	cmp	r3, #36	; 0x24
    23ea:	d9f2      	bls.n	23d2 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    23ec:	46bd      	mov	sp, r7
    23ee:	b002      	add	sp, #8
    23f0:	bd80      	pop	{r7, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	000028ad 	.word	0x000028ad

000023f8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b0a2      	sub	sp, #136	; 0x88
    23fc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    23fe:	4b4f      	ldr	r3, [pc, #316]	; (253c <system_clock_init+0x144>)
    2400:	22c2      	movs	r2, #194	; 0xc2
    2402:	00d2      	lsls	r2, r2, #3
    2404:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2406:	2000      	movs	r0, #0
    2408:	4b4d      	ldr	r3, [pc, #308]	; (2540 <system_clock_init+0x148>)
    240a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    240c:	4b4d      	ldr	r3, [pc, #308]	; (2544 <system_clock_init+0x14c>)
    240e:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    2410:	4b4a      	ldr	r3, [pc, #296]	; (253c <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2412:	4a4d      	ldr	r2, [pc, #308]	; (2548 <system_clock_init+0x150>)
    2414:	6812      	ldr	r2, [r2, #0]
    2416:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    2418:	b2d2      	uxtb	r2, r2
    241a:	1c11      	adds	r1, r2, #0
    241c:	227f      	movs	r2, #127	; 0x7f
    241e:	400a      	ands	r2, r1
    2420:	b2d2      	uxtb	r2, r2
    2422:	217f      	movs	r1, #127	; 0x7f
    2424:	400a      	ands	r2, r1
    2426:	0412      	lsls	r2, r2, #16
    2428:	6999      	ldr	r1, [r3, #24]
    242a:	4848      	ldr	r0, [pc, #288]	; (254c <system_clock_init+0x154>)
    242c:	4001      	ands	r1, r0
    242e:	430a      	orrs	r2, r1
    2430:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    2432:	2380      	movs	r3, #128	; 0x80
    2434:	18fb      	adds	r3, r7, r3
    2436:	1c18      	adds	r0, r3, #0
    2438:	4b45      	ldr	r3, [pc, #276]	; (2550 <system_clock_init+0x158>)
    243a:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    243c:	2380      	movs	r3, #128	; 0x80
    243e:	18fb      	adds	r3, r7, r3
    2440:	2207      	movs	r2, #7
    2442:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    2444:	2380      	movs	r3, #128	; 0x80
    2446:	18fb      	adds	r3, r7, r3
    2448:	2201      	movs	r2, #1
    244a:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    244c:	2380      	movs	r3, #128	; 0x80
    244e:	18fb      	adds	r3, r7, r3
    2450:	2201      	movs	r2, #1
    2452:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    2454:	2380      	movs	r3, #128	; 0x80
    2456:	18fb      	adds	r3, r7, r3
    2458:	2201      	movs	r2, #1
    245a:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    245c:	2380      	movs	r3, #128	; 0x80
    245e:	18fb      	adds	r3, r7, r3
    2460:	2200      	movs	r2, #0
    2462:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2464:	2380      	movs	r3, #128	; 0x80
    2466:	18fb      	adds	r3, r7, r3
    2468:	1c18      	adds	r0, r3, #0
    246a:	4b3a      	ldr	r3, [pc, #232]	; (2554 <system_clock_init+0x15c>)
    246c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    246e:	2004      	movs	r0, #4
    2470:	4b39      	ldr	r3, [pc, #228]	; (2558 <system_clock_init+0x160>)
    2472:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2474:	237c      	movs	r3, #124	; 0x7c
    2476:	18fb      	adds	r3, r7, r3
    2478:	1c18      	adds	r0, r3, #0
    247a:	4b38      	ldr	r3, [pc, #224]	; (255c <system_clock_init+0x164>)
    247c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    247e:	237c      	movs	r3, #124	; 0x7c
    2480:	18fb      	adds	r3, r7, r3
    2482:	2200      	movs	r2, #0
    2484:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2486:	237c      	movs	r3, #124	; 0x7c
    2488:	18fb      	adds	r3, r7, r3
    248a:	2201      	movs	r2, #1
    248c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    248e:	237c      	movs	r3, #124	; 0x7c
    2490:	18fb      	adds	r3, r7, r3
    2492:	2200      	movs	r2, #0
    2494:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2496:	237c      	movs	r3, #124	; 0x7c
    2498:	18fb      	adds	r3, r7, r3
    249a:	1c18      	adds	r0, r3, #0
    249c:	4b30      	ldr	r3, [pc, #192]	; (2560 <system_clock_init+0x168>)
    249e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    24a0:	2006      	movs	r0, #6
    24a2:	4b2d      	ldr	r3, [pc, #180]	; (2558 <system_clock_init+0x160>)
    24a4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    24a6:	4b2f      	ldr	r3, [pc, #188]	; (2564 <system_clock_init+0x16c>)
    24a8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    24aa:	2358      	movs	r3, #88	; 0x58
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	1c18      	adds	r0, r3, #0
    24b0:	4b2d      	ldr	r3, [pc, #180]	; (2568 <system_clock_init+0x170>)
    24b2:	4798      	blx	r3
    24b4:	2358      	movs	r3, #88	; 0x58
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	2204      	movs	r2, #4
    24ba:	701a      	strb	r2, [r3, #0]
    24bc:	2358      	movs	r3, #88	; 0x58
    24be:	18fb      	adds	r3, r7, r3
    24c0:	2220      	movs	r2, #32
    24c2:	605a      	str	r2, [r3, #4]
    24c4:	2358      	movs	r3, #88	; 0x58
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	2200      	movs	r2, #0
    24ca:	721a      	strb	r2, [r3, #8]
    24cc:	2358      	movs	r3, #88	; 0x58
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	2200      	movs	r2, #0
    24d2:	725a      	strb	r2, [r3, #9]
    24d4:	2358      	movs	r3, #88	; 0x58
    24d6:	18fb      	adds	r3, r7, r3
    24d8:	2002      	movs	r0, #2
    24da:	1c19      	adds	r1, r3, #0
    24dc:	4b23      	ldr	r3, [pc, #140]	; (256c <system_clock_init+0x174>)
    24de:	4798      	blx	r3
    24e0:	2002      	movs	r0, #2
    24e2:	4b23      	ldr	r3, [pc, #140]	; (2570 <system_clock_init+0x178>)
    24e4:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    24e6:	2000      	movs	r0, #0
    24e8:	4b22      	ldr	r3, [pc, #136]	; (2574 <system_clock_init+0x17c>)
    24ea:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    24ec:	2000      	movs	r0, #0
    24ee:	2100      	movs	r1, #0
    24f0:	4b21      	ldr	r3, [pc, #132]	; (2578 <system_clock_init+0x180>)
    24f2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    24f4:	2001      	movs	r0, #1
    24f6:	2100      	movs	r1, #0
    24f8:	4b1f      	ldr	r3, [pc, #124]	; (2578 <system_clock_init+0x180>)
    24fa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    24fc:	2002      	movs	r0, #2
    24fe:	2100      	movs	r1, #0
    2500:	4b1d      	ldr	r3, [pc, #116]	; (2578 <system_clock_init+0x180>)
    2502:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2504:	1d3b      	adds	r3, r7, #4
    2506:	1c18      	adds	r0, r3, #0
    2508:	4b17      	ldr	r3, [pc, #92]	; (2568 <system_clock_init+0x170>)
    250a:	4798      	blx	r3
    250c:	1d3b      	adds	r3, r7, #4
    250e:	2206      	movs	r2, #6
    2510:	701a      	strb	r2, [r3, #0]
    2512:	1d3b      	adds	r3, r7, #4
    2514:	2201      	movs	r2, #1
    2516:	605a      	str	r2, [r3, #4]
    2518:	1d3b      	adds	r3, r7, #4
    251a:	2200      	movs	r2, #0
    251c:	721a      	strb	r2, [r3, #8]
    251e:	1d3b      	adds	r3, r7, #4
    2520:	2200      	movs	r2, #0
    2522:	725a      	strb	r2, [r3, #9]
    2524:	1d3b      	adds	r3, r7, #4
    2526:	2000      	movs	r0, #0
    2528:	1c19      	adds	r1, r3, #0
    252a:	4b10      	ldr	r3, [pc, #64]	; (256c <system_clock_init+0x174>)
    252c:	4798      	blx	r3
    252e:	2000      	movs	r0, #0
    2530:	4b0f      	ldr	r3, [pc, #60]	; (2570 <system_clock_init+0x178>)
    2532:	4798      	blx	r3
#endif
}
    2534:	46bd      	mov	sp, r7
    2536:	b022      	add	sp, #136	; 0x88
    2538:	bd80      	pop	{r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	40000800 	.word	0x40000800
    2540:	00002081 	.word	0x00002081
    2544:	000023c1 	.word	0x000023c1
    2548:	00806024 	.word	0x00806024
    254c:	ff80ffff 	.word	0xff80ffff
    2550:	00001fb9 	.word	0x00001fb9
    2554:	00002249 	.word	0x00002249
    2558:	00002315 	.word	0x00002315
    255c:	00001fed 	.word	0x00001fed
    2560:	000021d1 	.word	0x000021d1
    2564:	0000261d 	.word	0x0000261d
    2568:	00001f8d 	.word	0x00001f8d
    256c:	0000264d 	.word	0x0000264d
    2570:	0000276d 	.word	0x0000276d
    2574:	0000200d 	.word	0x0000200d
    2578:	0000202d 	.word	0x0000202d

0000257c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    257c:	b580      	push	{r7, lr}
    257e:	b082      	sub	sp, #8
    2580:	af00      	add	r7, sp, #0
    2582:	1c02      	adds	r2, r0, #0
    2584:	6039      	str	r1, [r7, #0]
    2586:	1dfb      	adds	r3, r7, #7
    2588:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    258a:	1dfb      	adds	r3, r7, #7
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2b01      	cmp	r3, #1
    2590:	d00a      	beq.n	25a8 <system_apb_clock_set_mask+0x2c>
    2592:	2b02      	cmp	r3, #2
    2594:	d00f      	beq.n	25b6 <system_apb_clock_set_mask+0x3a>
    2596:	2b00      	cmp	r3, #0
    2598:	d114      	bne.n	25c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    259a:	4b0e      	ldr	r3, [pc, #56]	; (25d4 <system_apb_clock_set_mask+0x58>)
    259c:	4a0d      	ldr	r2, [pc, #52]	; (25d4 <system_apb_clock_set_mask+0x58>)
    259e:	6991      	ldr	r1, [r2, #24]
    25a0:	683a      	ldr	r2, [r7, #0]
    25a2:	430a      	orrs	r2, r1
    25a4:	619a      	str	r2, [r3, #24]
			break;
    25a6:	e00f      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    25a8:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25aa:	4a0a      	ldr	r2, [pc, #40]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25ac:	69d1      	ldr	r1, [r2, #28]
    25ae:	683a      	ldr	r2, [r7, #0]
    25b0:	430a      	orrs	r2, r1
    25b2:	61da      	str	r2, [r3, #28]
			break;
    25b4:	e008      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    25b6:	4b07      	ldr	r3, [pc, #28]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25b8:	4a06      	ldr	r2, [pc, #24]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25ba:	6a11      	ldr	r1, [r2, #32]
    25bc:	683a      	ldr	r2, [r7, #0]
    25be:	430a      	orrs	r2, r1
    25c0:	621a      	str	r2, [r3, #32]
			break;
    25c2:	e001      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    25c4:	2317      	movs	r3, #23
    25c6:	e000      	b.n	25ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    25c8:	2300      	movs	r3, #0
}
    25ca:	1c18      	adds	r0, r3, #0
    25cc:	46bd      	mov	sp, r7
    25ce:	b002      	add	sp, #8
    25d0:	bd80      	pop	{r7, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	40000400 	.word	0x40000400

000025d8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    25d8:	b580      	push	{r7, lr}
    25da:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    25dc:	4b01      	ldr	r3, [pc, #4]	; (25e4 <system_interrupt_enter_critical_section+0xc>)
    25de:	4798      	blx	r3
}
    25e0:	46bd      	mov	sp, r7
    25e2:	bd80      	pop	{r7, pc}
    25e4:	00001f01 	.word	0x00001f01

000025e8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    25ec:	4b01      	ldr	r3, [pc, #4]	; (25f4 <system_interrupt_leave_critical_section+0xc>)
    25ee:	4798      	blx	r3
}
    25f0:	46bd      	mov	sp, r7
    25f2:	bd80      	pop	{r7, pc}
    25f4:	00001f51 	.word	0x00001f51

000025f8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25fc:	4b06      	ldr	r3, [pc, #24]	; (2618 <system_gclk_is_syncing+0x20>)
    25fe:	785b      	ldrb	r3, [r3, #1]
    2600:	b2db      	uxtb	r3, r3
    2602:	b2db      	uxtb	r3, r3
    2604:	b25b      	sxtb	r3, r3
    2606:	2b00      	cmp	r3, #0
    2608:	da01      	bge.n	260e <system_gclk_is_syncing+0x16>
		return true;
    260a:	2301      	movs	r3, #1
    260c:	e000      	b.n	2610 <system_gclk_is_syncing+0x18>
	}

	return false;
    260e:	2300      	movs	r3, #0
}
    2610:	1c18      	adds	r0, r3, #0
    2612:	46bd      	mov	sp, r7
    2614:	bd80      	pop	{r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	40000c00 	.word	0x40000c00

0000261c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    261c:	b580      	push	{r7, lr}
    261e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2620:	2000      	movs	r0, #0
    2622:	2108      	movs	r1, #8
    2624:	4b07      	ldr	r3, [pc, #28]	; (2644 <system_gclk_init+0x28>)
    2626:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2628:	4b07      	ldr	r3, [pc, #28]	; (2648 <system_gclk_init+0x2c>)
    262a:	2201      	movs	r2, #1
    262c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	4b05      	ldr	r3, [pc, #20]	; (2648 <system_gclk_init+0x2c>)
    2632:	781b      	ldrb	r3, [r3, #0]
    2634:	b2db      	uxtb	r3, r3
    2636:	1c1a      	adds	r2, r3, #0
    2638:	2301      	movs	r3, #1
    263a:	4013      	ands	r3, r2
    263c:	d1f8      	bne.n	2630 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    263e:	46bd      	mov	sp, r7
    2640:	bd80      	pop	{r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	0000257d 	.word	0x0000257d
    2648:	40000c00 	.word	0x40000c00

0000264c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    264c:	b580      	push	{r7, lr}
    264e:	b086      	sub	sp, #24
    2650:	af00      	add	r7, sp, #0
    2652:	1c02      	adds	r2, r0, #0
    2654:	6039      	str	r1, [r7, #0]
    2656:	1dfb      	adds	r3, r7, #7
    2658:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    265a:	1dfb      	adds	r3, r7, #7
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2660:	1dfb      	adds	r3, r7, #7
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2666:	683b      	ldr	r3, [r7, #0]
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	021b      	lsls	r3, r3, #8
    266c:	1c1a      	adds	r2, r3, #0
    266e:	697b      	ldr	r3, [r7, #20]
    2670:	4313      	orrs	r3, r2
    2672:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2674:	683b      	ldr	r3, [r7, #0]
    2676:	785b      	ldrb	r3, [r3, #1]
    2678:	2b00      	cmp	r3, #0
    267a:	d004      	beq.n	2686 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    267c:	697b      	ldr	r3, [r7, #20]
    267e:	2280      	movs	r2, #128	; 0x80
    2680:	02d2      	lsls	r2, r2, #11
    2682:	4313      	orrs	r3, r2
    2684:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	7a5b      	ldrb	r3, [r3, #9]
    268a:	2b00      	cmp	r3, #0
    268c:	d004      	beq.n	2698 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    268e:	697b      	ldr	r3, [r7, #20]
    2690:	2280      	movs	r2, #128	; 0x80
    2692:	0312      	lsls	r2, r2, #12
    2694:	4313      	orrs	r3, r2
    2696:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2698:	683b      	ldr	r3, [r7, #0]
    269a:	685b      	ldr	r3, [r3, #4]
    269c:	2b01      	cmp	r3, #1
    269e:	d92c      	bls.n	26fa <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    26a0:	683b      	ldr	r3, [r7, #0]
    26a2:	685a      	ldr	r2, [r3, #4]
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	685b      	ldr	r3, [r3, #4]
    26a8:	3b01      	subs	r3, #1
    26aa:	4013      	ands	r3, r2
    26ac:	d11a      	bne.n	26e4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    26ae:	2300      	movs	r3, #0
    26b0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    26b2:	2302      	movs	r3, #2
    26b4:	60bb      	str	r3, [r7, #8]
    26b6:	e005      	b.n	26c4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    26b8:	68fb      	ldr	r3, [r7, #12]
    26ba:	3301      	adds	r3, #1
    26bc:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    26be:	68bb      	ldr	r3, [r7, #8]
    26c0:	005b      	lsls	r3, r3, #1
    26c2:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	685a      	ldr	r2, [r3, #4]
    26c8:	68bb      	ldr	r3, [r7, #8]
    26ca:	429a      	cmp	r2, r3
    26cc:	d8f4      	bhi.n	26b8 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	021b      	lsls	r3, r3, #8
    26d2:	693a      	ldr	r2, [r7, #16]
    26d4:	4313      	orrs	r3, r2
    26d6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    26d8:	697b      	ldr	r3, [r7, #20]
    26da:	2280      	movs	r2, #128	; 0x80
    26dc:	0352      	lsls	r2, r2, #13
    26de:	4313      	orrs	r3, r2
    26e0:	617b      	str	r3, [r7, #20]
    26e2:	e00a      	b.n	26fa <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    26e4:	683b      	ldr	r3, [r7, #0]
    26e6:	685b      	ldr	r3, [r3, #4]
    26e8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    26ea:	693a      	ldr	r2, [r7, #16]
    26ec:	4313      	orrs	r3, r2
    26ee:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26f0:	697b      	ldr	r3, [r7, #20]
    26f2:	2280      	movs	r2, #128	; 0x80
    26f4:	0292      	lsls	r2, r2, #10
    26f6:	4313      	orrs	r3, r2
    26f8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    26fa:	683b      	ldr	r3, [r7, #0]
    26fc:	7a1b      	ldrb	r3, [r3, #8]
    26fe:	2b00      	cmp	r3, #0
    2700:	d004      	beq.n	270c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2702:	697b      	ldr	r3, [r7, #20]
    2704:	2280      	movs	r2, #128	; 0x80
    2706:	0392      	lsls	r2, r2, #14
    2708:	4313      	orrs	r3, r2
    270a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    270c:	46c0      	nop			; (mov r8, r8)
    270e:	4b12      	ldr	r3, [pc, #72]	; (2758 <system_gclk_gen_set_config+0x10c>)
    2710:	4798      	blx	r3
    2712:	1e03      	subs	r3, r0, #0
    2714:	d1fb      	bne.n	270e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2716:	4b11      	ldr	r3, [pc, #68]	; (275c <system_gclk_gen_set_config+0x110>)
    2718:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    271a:	4a11      	ldr	r2, [pc, #68]	; (2760 <system_gclk_gen_set_config+0x114>)
    271c:	1dfb      	adds	r3, r7, #7
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	4b0c      	ldr	r3, [pc, #48]	; (2758 <system_gclk_gen_set_config+0x10c>)
    2726:	4798      	blx	r3
    2728:	1e03      	subs	r3, r0, #0
    272a:	d1fb      	bne.n	2724 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    272c:	4b0d      	ldr	r3, [pc, #52]	; (2764 <system_gclk_gen_set_config+0x118>)
    272e:	693a      	ldr	r2, [r7, #16]
    2730:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	4b08      	ldr	r3, [pc, #32]	; (2758 <system_gclk_gen_set_config+0x10c>)
    2736:	4798      	blx	r3
    2738:	1e03      	subs	r3, r0, #0
    273a:	d1fb      	bne.n	2734 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    273c:	4b09      	ldr	r3, [pc, #36]	; (2764 <system_gclk_gen_set_config+0x118>)
    273e:	4a09      	ldr	r2, [pc, #36]	; (2764 <system_gclk_gen_set_config+0x118>)
    2740:	6851      	ldr	r1, [r2, #4]
    2742:	2280      	movs	r2, #128	; 0x80
    2744:	0252      	lsls	r2, r2, #9
    2746:	4011      	ands	r1, r2
    2748:	697a      	ldr	r2, [r7, #20]
    274a:	430a      	orrs	r2, r1
    274c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    274e:	4b06      	ldr	r3, [pc, #24]	; (2768 <system_gclk_gen_set_config+0x11c>)
    2750:	4798      	blx	r3
}
    2752:	46bd      	mov	sp, r7
    2754:	b006      	add	sp, #24
    2756:	bd80      	pop	{r7, pc}
    2758:	000025f9 	.word	0x000025f9
    275c:	000025d9 	.word	0x000025d9
    2760:	40000c08 	.word	0x40000c08
    2764:	40000c00 	.word	0x40000c00
    2768:	000025e9 	.word	0x000025e9

0000276c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    2772:	1c02      	adds	r2, r0, #0
    2774:	1dfb      	adds	r3, r7, #7
    2776:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2778:	46c0      	nop			; (mov r8, r8)
    277a:	4b0d      	ldr	r3, [pc, #52]	; (27b0 <system_gclk_gen_enable+0x44>)
    277c:	4798      	blx	r3
    277e:	1e03      	subs	r3, r0, #0
    2780:	d1fb      	bne.n	277a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2782:	4b0c      	ldr	r3, [pc, #48]	; (27b4 <system_gclk_gen_enable+0x48>)
    2784:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2786:	4a0c      	ldr	r2, [pc, #48]	; (27b8 <system_gclk_gen_enable+0x4c>)
    2788:	1dfb      	adds	r3, r7, #7
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	4b07      	ldr	r3, [pc, #28]	; (27b0 <system_gclk_gen_enable+0x44>)
    2792:	4798      	blx	r3
    2794:	1e03      	subs	r3, r0, #0
    2796:	d1fb      	bne.n	2790 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2798:	4b08      	ldr	r3, [pc, #32]	; (27bc <system_gclk_gen_enable+0x50>)
    279a:	4a08      	ldr	r2, [pc, #32]	; (27bc <system_gclk_gen_enable+0x50>)
    279c:	6852      	ldr	r2, [r2, #4]
    279e:	2180      	movs	r1, #128	; 0x80
    27a0:	0249      	lsls	r1, r1, #9
    27a2:	430a      	orrs	r2, r1
    27a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    27a6:	4b06      	ldr	r3, [pc, #24]	; (27c0 <system_gclk_gen_enable+0x54>)
    27a8:	4798      	blx	r3
}
    27aa:	46bd      	mov	sp, r7
    27ac:	b002      	add	sp, #8
    27ae:	bd80      	pop	{r7, pc}
    27b0:	000025f9 	.word	0x000025f9
    27b4:	000025d9 	.word	0x000025d9
    27b8:	40000c04 	.word	0x40000c04
    27bc:	40000c00 	.word	0x40000c00
    27c0:	000025e9 	.word	0x000025e9

000027c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    27c4:	b580      	push	{r7, lr}
    27c6:	b086      	sub	sp, #24
    27c8:	af00      	add	r7, sp, #0
    27ca:	1c02      	adds	r2, r0, #0
    27cc:	1dfb      	adds	r3, r7, #7
    27ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    27d0:	46c0      	nop			; (mov r8, r8)
    27d2:	4b2e      	ldr	r3, [pc, #184]	; (288c <system_gclk_gen_get_hz+0xc8>)
    27d4:	4798      	blx	r3
    27d6:	1e03      	subs	r3, r0, #0
    27d8:	d1fb      	bne.n	27d2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    27da:	4b2d      	ldr	r3, [pc, #180]	; (2890 <system_gclk_gen_get_hz+0xcc>)
    27dc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27de:	4a2d      	ldr	r2, [pc, #180]	; (2894 <system_gclk_gen_get_hz+0xd0>)
    27e0:	1dfb      	adds	r3, r7, #7
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	4b28      	ldr	r3, [pc, #160]	; (288c <system_gclk_gen_get_hz+0xc8>)
    27ea:	4798      	blx	r3
    27ec:	1e03      	subs	r3, r0, #0
    27ee:	d1fb      	bne.n	27e8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <system_gclk_gen_get_hz+0xd4>)
    27f2:	685b      	ldr	r3, [r3, #4]
    27f4:	0a1b      	lsrs	r3, r3, #8
    27f6:	1c1a      	adds	r2, r3, #0
    27f8:	231f      	movs	r3, #31
    27fa:	4013      	ands	r3, r2
    27fc:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    27fe:	1c18      	adds	r0, r3, #0
    2800:	4b26      	ldr	r3, [pc, #152]	; (289c <system_gclk_gen_get_hz+0xd8>)
    2802:	4798      	blx	r3
    2804:	1c03      	adds	r3, r0, #0
    2806:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2808:	4a22      	ldr	r2, [pc, #136]	; (2894 <system_gclk_gen_get_hz+0xd0>)
    280a:	1dfb      	adds	r3, r7, #7
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2810:	4b21      	ldr	r3, [pc, #132]	; (2898 <system_gclk_gen_get_hz+0xd4>)
    2812:	685b      	ldr	r3, [r3, #4]
    2814:	0d1b      	lsrs	r3, r3, #20
    2816:	1c1a      	adds	r2, r3, #0
    2818:	2301      	movs	r3, #1
    281a:	4013      	ands	r3, r2
    281c:	b2da      	uxtb	r2, r3
    281e:	2313      	movs	r3, #19
    2820:	18fb      	adds	r3, r7, r3
    2822:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2824:	4a1e      	ldr	r2, [pc, #120]	; (28a0 <system_gclk_gen_get_hz+0xdc>)
    2826:	1dfb      	adds	r3, r7, #7
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    282c:	46c0      	nop			; (mov r8, r8)
    282e:	4b17      	ldr	r3, [pc, #92]	; (288c <system_gclk_gen_get_hz+0xc8>)
    2830:	4798      	blx	r3
    2832:	1e03      	subs	r3, r0, #0
    2834:	d1fb      	bne.n	282e <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2836:	4b18      	ldr	r3, [pc, #96]	; (2898 <system_gclk_gen_get_hz+0xd4>)
    2838:	689b      	ldr	r3, [r3, #8]
    283a:	0a1b      	lsrs	r3, r3, #8
    283c:	1c1a      	adds	r2, r3, #0
    283e:	2300      	movs	r3, #0
    2840:	439a      	bics	r2, r3
    2842:	1c13      	adds	r3, r2, #0
    2844:	b29b      	uxth	r3, r3
    2846:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2848:	4b16      	ldr	r3, [pc, #88]	; (28a4 <system_gclk_gen_get_hz+0xe0>)
    284a:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    284c:	2313      	movs	r3, #19
    284e:	18fb      	adds	r3, r7, r3
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d109      	bne.n	286a <system_gclk_gen_get_hz+0xa6>
    2856:	68fb      	ldr	r3, [r7, #12]
    2858:	2b01      	cmp	r3, #1
    285a:	d906      	bls.n	286a <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    285c:	4b12      	ldr	r3, [pc, #72]	; (28a8 <system_gclk_gen_get_hz+0xe4>)
    285e:	6978      	ldr	r0, [r7, #20]
    2860:	68f9      	ldr	r1, [r7, #12]
    2862:	4798      	blx	r3
    2864:	1c03      	adds	r3, r0, #0
    2866:	617b      	str	r3, [r7, #20]
    2868:	e00a      	b.n	2880 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    286a:	2313      	movs	r3, #19
    286c:	18fb      	adds	r3, r7, r3
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	2b00      	cmp	r3, #0
    2872:	d005      	beq.n	2880 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	3301      	adds	r3, #1
    2878:	1c1a      	adds	r2, r3, #0
    287a:	697b      	ldr	r3, [r7, #20]
    287c:	40d3      	lsrs	r3, r2
    287e:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2880:	697b      	ldr	r3, [r7, #20]
}
    2882:	1c18      	adds	r0, r3, #0
    2884:	46bd      	mov	sp, r7
    2886:	b006      	add	sp, #24
    2888:	bd80      	pop	{r7, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	000025f9 	.word	0x000025f9
    2890:	000025d9 	.word	0x000025d9
    2894:	40000c04 	.word	0x40000c04
    2898:	40000c00 	.word	0x40000c00
    289c:	00002111 	.word	0x00002111
    28a0:	40000c08 	.word	0x40000c08
    28a4:	000025e9 	.word	0x000025e9
    28a8:	000042a1 	.word	0x000042a1

000028ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    28ac:	b580      	push	{r7, lr}
    28ae:	b084      	sub	sp, #16
    28b0:	af00      	add	r7, sp, #0
    28b2:	1c02      	adds	r2, r0, #0
    28b4:	6039      	str	r1, [r7, #0]
    28b6:	1dfb      	adds	r3, r7, #7
    28b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    28ba:	1dfb      	adds	r3, r7, #7
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    28c0:	683b      	ldr	r3, [r7, #0]
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	021b      	lsls	r3, r3, #8
    28c6:	1c1a      	adds	r2, r3, #0
    28c8:	68fb      	ldr	r3, [r7, #12]
    28ca:	4313      	orrs	r3, r2
    28cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    28ce:	1dfb      	adds	r3, r7, #7
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	1c18      	adds	r0, r3, #0
    28d4:	4b04      	ldr	r3, [pc, #16]	; (28e8 <system_gclk_chan_set_config+0x3c>)
    28d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    28d8:	4b04      	ldr	r3, [pc, #16]	; (28ec <system_gclk_chan_set_config+0x40>)
    28da:	68fa      	ldr	r2, [r7, #12]
    28dc:	b292      	uxth	r2, r2
    28de:	805a      	strh	r2, [r3, #2]
}
    28e0:	46bd      	mov	sp, r7
    28e2:	b004      	add	sp, #16
    28e4:	bd80      	pop	{r7, pc}
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	00002935 	.word	0x00002935
    28ec:	40000c00 	.word	0x40000c00

000028f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    28f0:	b580      	push	{r7, lr}
    28f2:	b082      	sub	sp, #8
    28f4:	af00      	add	r7, sp, #0
    28f6:	1c02      	adds	r2, r0, #0
    28f8:	1dfb      	adds	r3, r7, #7
    28fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    28fc:	4b09      	ldr	r3, [pc, #36]	; (2924 <system_gclk_chan_enable+0x34>)
    28fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2900:	4a09      	ldr	r2, [pc, #36]	; (2928 <system_gclk_chan_enable+0x38>)
    2902:	1dfb      	adds	r3, r7, #7
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2908:	4908      	ldr	r1, [pc, #32]	; (292c <system_gclk_chan_enable+0x3c>)
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <system_gclk_chan_enable+0x3c>)
    290c:	885b      	ldrh	r3, [r3, #2]
    290e:	b29b      	uxth	r3, r3
    2910:	2280      	movs	r2, #128	; 0x80
    2912:	01d2      	lsls	r2, r2, #7
    2914:	4313      	orrs	r3, r2
    2916:	b29b      	uxth	r3, r3
    2918:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    291a:	4b05      	ldr	r3, [pc, #20]	; (2930 <system_gclk_chan_enable+0x40>)
    291c:	4798      	blx	r3
}
    291e:	46bd      	mov	sp, r7
    2920:	b002      	add	sp, #8
    2922:	bd80      	pop	{r7, pc}
    2924:	000025d9 	.word	0x000025d9
    2928:	40000c02 	.word	0x40000c02
    292c:	40000c00 	.word	0x40000c00
    2930:	000025e9 	.word	0x000025e9

00002934 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2934:	b580      	push	{r7, lr}
    2936:	b084      	sub	sp, #16
    2938:	af00      	add	r7, sp, #0
    293a:	1c02      	adds	r2, r0, #0
    293c:	1dfb      	adds	r3, r7, #7
    293e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2940:	4b1d      	ldr	r3, [pc, #116]	; (29b8 <system_gclk_chan_disable+0x84>)
    2942:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2944:	4a1d      	ldr	r2, [pc, #116]	; (29bc <system_gclk_chan_disable+0x88>)
    2946:	1dfb      	adds	r3, r7, #7
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    294c:	4b1c      	ldr	r3, [pc, #112]	; (29c0 <system_gclk_chan_disable+0x8c>)
    294e:	885b      	ldrh	r3, [r3, #2]
    2950:	b29b      	uxth	r3, r3
    2952:	0a1b      	lsrs	r3, r3, #8
    2954:	1c1a      	adds	r2, r3, #0
    2956:	230f      	movs	r3, #15
    2958:	4013      	ands	r3, r2
    295a:	b2db      	uxtb	r3, r3
    295c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    295e:	4b18      	ldr	r3, [pc, #96]	; (29c0 <system_gclk_chan_disable+0x8c>)
    2960:	885a      	ldrh	r2, [r3, #2]
    2962:	4918      	ldr	r1, [pc, #96]	; (29c4 <system_gclk_chan_disable+0x90>)
    2964:	400a      	ands	r2, r1
    2966:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2968:	4a15      	ldr	r2, [pc, #84]	; (29c0 <system_gclk_chan_disable+0x8c>)
    296a:	4b15      	ldr	r3, [pc, #84]	; (29c0 <system_gclk_chan_disable+0x8c>)
    296c:	885b      	ldrh	r3, [r3, #2]
    296e:	b29b      	uxth	r3, r3
    2970:	4915      	ldr	r1, [pc, #84]	; (29c8 <system_gclk_chan_disable+0x94>)
    2972:	400b      	ands	r3, r1
    2974:	b29b      	uxth	r3, r3
    2976:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	4b11      	ldr	r3, [pc, #68]	; (29c0 <system_gclk_chan_disable+0x8c>)
    297c:	885b      	ldrh	r3, [r3, #2]
    297e:	b29b      	uxth	r3, r3
    2980:	1c1a      	adds	r2, r3, #0
    2982:	2380      	movs	r3, #128	; 0x80
    2984:	01db      	lsls	r3, r3, #7
    2986:	4013      	ands	r3, r2
    2988:	d1f7      	bne.n	297a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    298a:	4b0d      	ldr	r3, [pc, #52]	; (29c0 <system_gclk_chan_disable+0x8c>)
    298c:	68fa      	ldr	r2, [r7, #12]
    298e:	b2d2      	uxtb	r2, r2
    2990:	1c11      	adds	r1, r2, #0
    2992:	220f      	movs	r2, #15
    2994:	400a      	ands	r2, r1
    2996:	b2d2      	uxtb	r2, r2
    2998:	1c11      	adds	r1, r2, #0
    299a:	220f      	movs	r2, #15
    299c:	400a      	ands	r2, r1
    299e:	0210      	lsls	r0, r2, #8
    29a0:	885a      	ldrh	r2, [r3, #2]
    29a2:	4908      	ldr	r1, [pc, #32]	; (29c4 <system_gclk_chan_disable+0x90>)
    29a4:	400a      	ands	r2, r1
    29a6:	1c11      	adds	r1, r2, #0
    29a8:	1c02      	adds	r2, r0, #0
    29aa:	430a      	orrs	r2, r1
    29ac:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    29ae:	4b07      	ldr	r3, [pc, #28]	; (29cc <system_gclk_chan_disable+0x98>)
    29b0:	4798      	blx	r3
}
    29b2:	46bd      	mov	sp, r7
    29b4:	b004      	add	sp, #16
    29b6:	bd80      	pop	{r7, pc}
    29b8:	000025d9 	.word	0x000025d9
    29bc:	40000c02 	.word	0x40000c02
    29c0:	40000c00 	.word	0x40000c00
    29c4:	fffff0ff 	.word	0xfffff0ff
    29c8:	ffffbfff 	.word	0xffffbfff
    29cc:	000025e9 	.word	0x000025e9

000029d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	1c02      	adds	r2, r0, #0
    29d8:	1dfb      	adds	r3, r7, #7
    29da:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    29dc:	4b0e      	ldr	r3, [pc, #56]	; (2a18 <system_gclk_chan_get_hz+0x48>)
    29de:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    29e0:	4a0e      	ldr	r2, [pc, #56]	; (2a1c <system_gclk_chan_get_hz+0x4c>)
    29e2:	1dfb      	adds	r3, r7, #7
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    29e8:	4b0d      	ldr	r3, [pc, #52]	; (2a20 <system_gclk_chan_get_hz+0x50>)
    29ea:	885b      	ldrh	r3, [r3, #2]
    29ec:	b29b      	uxth	r3, r3
    29ee:	0a1b      	lsrs	r3, r3, #8
    29f0:	1c1a      	adds	r2, r3, #0
    29f2:	230f      	movs	r3, #15
    29f4:	4013      	ands	r3, r2
    29f6:	b2da      	uxtb	r2, r3
    29f8:	230f      	movs	r3, #15
    29fa:	18fb      	adds	r3, r7, r3
    29fc:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    29fe:	4b09      	ldr	r3, [pc, #36]	; (2a24 <system_gclk_chan_get_hz+0x54>)
    2a00:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2a02:	230f      	movs	r3, #15
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	1c18      	adds	r0, r3, #0
    2a0a:	4b07      	ldr	r3, [pc, #28]	; (2a28 <system_gclk_chan_get_hz+0x58>)
    2a0c:	4798      	blx	r3
    2a0e:	1c03      	adds	r3, r0, #0
}
    2a10:	1c18      	adds	r0, r3, #0
    2a12:	46bd      	mov	sp, r7
    2a14:	b004      	add	sp, #16
    2a16:	bd80      	pop	{r7, pc}
    2a18:	000025d9 	.word	0x000025d9
    2a1c:	40000c02 	.word	0x40000c02
    2a20:	40000c00 	.word	0x40000c00
    2a24:	000025e9 	.word	0x000025e9
    2a28:	000027c5 	.word	0x000027c5

00002a2c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	b084      	sub	sp, #16
    2a30:	af00      	add	r7, sp, #0
    2a32:	1c02      	adds	r2, r0, #0
    2a34:	1dfb      	adds	r3, r7, #7
    2a36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2a38:	230f      	movs	r3, #15
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	1dfa      	adds	r2, r7, #7
    2a3e:	7812      	ldrb	r2, [r2, #0]
    2a40:	09d2      	lsrs	r2, r2, #7
    2a42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2a44:	230e      	movs	r3, #14
    2a46:	18fb      	adds	r3, r7, r3
    2a48:	1dfa      	adds	r2, r7, #7
    2a4a:	7812      	ldrb	r2, [r2, #0]
    2a4c:	0952      	lsrs	r2, r2, #5
    2a4e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2a50:	4b0d      	ldr	r3, [pc, #52]	; (2a88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2a52:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2a54:	230f      	movs	r3, #15
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d10f      	bne.n	2a7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2a5e:	230f      	movs	r3, #15
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	009b      	lsls	r3, r3, #2
    2a66:	2210      	movs	r2, #16
    2a68:	4694      	mov	ip, r2
    2a6a:	44bc      	add	ip, r7
    2a6c:	4463      	add	r3, ip
    2a6e:	3b08      	subs	r3, #8
    2a70:	681a      	ldr	r2, [r3, #0]
    2a72:	230e      	movs	r3, #14
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	01db      	lsls	r3, r3, #7
    2a7a:	18d3      	adds	r3, r2, r3
    2a7c:	e000      	b.n	2a80 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2a7e:	2300      	movs	r3, #0
	}
}
    2a80:	1c18      	adds	r0, r3, #0
    2a82:	46bd      	mov	sp, r7
    2a84:	b004      	add	sp, #16
    2a86:	bd80      	pop	{r7, pc}
    2a88:	41004400 	.word	0x41004400

00002a8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b088      	sub	sp, #32
    2a90:	af00      	add	r7, sp, #0
    2a92:	60f8      	str	r0, [r7, #12]
    2a94:	60b9      	str	r1, [r7, #8]
    2a96:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2a98:	2300      	movs	r3, #0
    2a9a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	78db      	ldrb	r3, [r3, #3]
    2aa0:	2201      	movs	r2, #1
    2aa2:	4053      	eors	r3, r2
    2aa4:	b2db      	uxtb	r3, r3
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d035      	beq.n	2b16 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	2b80      	cmp	r3, #128	; 0x80
    2ab0:	d00b      	beq.n	2aca <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2ab2:	69fb      	ldr	r3, [r7, #28]
    2ab4:	2280      	movs	r2, #128	; 0x80
    2ab6:	0252      	lsls	r2, r2, #9
    2ab8:	4313      	orrs	r3, r2
    2aba:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	781b      	ldrb	r3, [r3, #0]
    2ac0:	061b      	lsls	r3, r3, #24
    2ac2:	1c1a      	adds	r2, r3, #0
    2ac4:	69fb      	ldr	r3, [r7, #28]
    2ac6:	4313      	orrs	r3, r2
    2ac8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	785b      	ldrb	r3, [r3, #1]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d003      	beq.n	2ada <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ad6:	2b02      	cmp	r3, #2
    2ad8:	d110      	bne.n	2afc <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2ada:	69fb      	ldr	r3, [r7, #28]
    2adc:	2280      	movs	r2, #128	; 0x80
    2ade:	0292      	lsls	r2, r2, #10
    2ae0:	4313      	orrs	r3, r2
    2ae2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	789b      	ldrb	r3, [r3, #2]
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d004      	beq.n	2af6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2aec:	69fb      	ldr	r3, [r7, #28]
    2aee:	2280      	movs	r2, #128	; 0x80
    2af0:	02d2      	lsls	r2, r2, #11
    2af2:	4313      	orrs	r3, r2
    2af4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2af6:	68fb      	ldr	r3, [r7, #12]
    2af8:	68ba      	ldr	r2, [r7, #8]
    2afa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	785b      	ldrb	r3, [r3, #1]
    2b00:	2b01      	cmp	r3, #1
    2b02:	d003      	beq.n	2b0c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b08:	2b02      	cmp	r3, #2
    2b0a:	d107      	bne.n	2b1c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2b0c:	69fb      	ldr	r3, [r7, #28]
    2b0e:	4a21      	ldr	r2, [pc, #132]	; (2b94 <_system_pinmux_config+0x108>)
    2b10:	4013      	ands	r3, r2
    2b12:	61fb      	str	r3, [r7, #28]
    2b14:	e002      	b.n	2b1c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2b16:	68fb      	ldr	r3, [r7, #12]
    2b18:	68ba      	ldr	r2, [r7, #8]
    2b1a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2b1c:	68bb      	ldr	r3, [r7, #8]
    2b1e:	041b      	lsls	r3, r3, #16
    2b20:	0c1b      	lsrs	r3, r3, #16
    2b22:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2b24:	68bb      	ldr	r3, [r7, #8]
    2b26:	0c1b      	lsrs	r3, r3, #16
    2b28:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b2a:	69ba      	ldr	r2, [r7, #24]
    2b2c:	69fb      	ldr	r3, [r7, #28]
    2b2e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2b30:	22a0      	movs	r2, #160	; 0xa0
    2b32:	05d2      	lsls	r2, r2, #23
    2b34:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b36:	68fb      	ldr	r3, [r7, #12]
    2b38:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b3a:	697a      	ldr	r2, [r7, #20]
    2b3c:	69fb      	ldr	r3, [r7, #28]
    2b3e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2b40:	22d0      	movs	r2, #208	; 0xd0
    2b42:	0612      	lsls	r2, r2, #24
    2b44:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b46:	68fb      	ldr	r3, [r7, #12]
    2b48:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	78db      	ldrb	r3, [r3, #3]
    2b4e:	2201      	movs	r2, #1
    2b50:	4053      	eors	r3, r2
    2b52:	b2db      	uxtb	r3, r3
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01a      	beq.n	2b8e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2b58:	69fa      	ldr	r2, [r7, #28]
    2b5a:	2380      	movs	r3, #128	; 0x80
    2b5c:	02db      	lsls	r3, r3, #11
    2b5e:	4013      	ands	r3, r2
    2b60:	d00a      	beq.n	2b78 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	789b      	ldrb	r3, [r3, #2]
    2b66:	2b01      	cmp	r3, #1
    2b68:	d103      	bne.n	2b72 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	68ba      	ldr	r2, [r7, #8]
    2b6e:	619a      	str	r2, [r3, #24]
    2b70:	e002      	b.n	2b78 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	68ba      	ldr	r2, [r7, #8]
    2b76:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	785b      	ldrb	r3, [r3, #1]
    2b7c:	2b01      	cmp	r3, #1
    2b7e:	d003      	beq.n	2b88 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b84:	2b02      	cmp	r3, #2
    2b86:	d102      	bne.n	2b8e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	68ba      	ldr	r2, [r7, #8]
    2b8c:	609a      	str	r2, [r3, #8]
		}
	}
}
    2b8e:	46bd      	mov	sp, r7
    2b90:	b008      	add	sp, #32
    2b92:	bd80      	pop	{r7, pc}
    2b94:	fffbffff 	.word	0xfffbffff

00002b98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	b084      	sub	sp, #16
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	1c02      	adds	r2, r0, #0
    2ba0:	6039      	str	r1, [r7, #0]
    2ba2:	1dfb      	adds	r3, r7, #7
    2ba4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2ba6:	1dfb      	adds	r3, r7, #7
    2ba8:	781b      	ldrb	r3, [r3, #0]
    2baa:	1c18      	adds	r0, r3, #0
    2bac:	4b0b      	ldr	r3, [pc, #44]	; (2bdc <system_pinmux_pin_set_config+0x44>)
    2bae:	4798      	blx	r3
    2bb0:	1c03      	adds	r3, r0, #0
    2bb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2bb4:	1dfb      	adds	r3, r7, #7
    2bb6:	781b      	ldrb	r3, [r3, #0]
    2bb8:	221f      	movs	r2, #31
    2bba:	4013      	ands	r3, r2
    2bbc:	2201      	movs	r2, #1
    2bbe:	409a      	lsls	r2, r3
    2bc0:	1c13      	adds	r3, r2, #0
    2bc2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2bc4:	68f9      	ldr	r1, [r7, #12]
    2bc6:	68ba      	ldr	r2, [r7, #8]
    2bc8:	683b      	ldr	r3, [r7, #0]
    2bca:	1c08      	adds	r0, r1, #0
    2bcc:	1c11      	adds	r1, r2, #0
    2bce:	1c1a      	adds	r2, r3, #0
    2bd0:	4b03      	ldr	r3, [pc, #12]	; (2be0 <system_pinmux_pin_set_config+0x48>)
    2bd2:	4798      	blx	r3
}
    2bd4:	46bd      	mov	sp, r7
    2bd6:	b004      	add	sp, #16
    2bd8:	bd80      	pop	{r7, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	00002a2d 	.word	0x00002a2d
    2be0:	00002a8d 	.word	0x00002a8d

00002be4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2be4:	b580      	push	{r7, lr}
    2be6:	af00      	add	r7, sp, #0
	return;
    2be8:	46c0      	nop			; (mov r8, r8)
}
    2bea:	46bd      	mov	sp, r7
    2bec:	bd80      	pop	{r7, pc}
    2bee:	46c0      	nop			; (mov r8, r8)

00002bf0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <system_init+0x1c>)
    2bf6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2bf8:	4b05      	ldr	r3, [pc, #20]	; (2c10 <system_init+0x20>)
    2bfa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2bfc:	4b05      	ldr	r3, [pc, #20]	; (2c14 <system_init+0x24>)
    2bfe:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2c00:	4b05      	ldr	r3, [pc, #20]	; (2c18 <system_init+0x28>)
    2c02:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2c04:	4b05      	ldr	r3, [pc, #20]	; (2c1c <system_init+0x2c>)
    2c06:	4798      	blx	r3
}
    2c08:	46bd      	mov	sp, r7
    2c0a:	bd80      	pop	{r7, pc}
    2c0c:	000023f9 	.word	0x000023f9
    2c10:	00001ef9 	.word	0x00001ef9
    2c14:	00002be5 	.word	0x00002be5
    2c18:	000001fd 	.word	0x000001fd
    2c1c:	00002be5 	.word	0x00002be5

00002c20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2c20:	b580      	push	{r7, lr}
    2c22:	b082      	sub	sp, #8
    2c24:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2c26:	4b2f      	ldr	r3, [pc, #188]	; (2ce4 <Reset_Handler+0xc4>)
    2c28:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2c2a:	4b2f      	ldr	r3, [pc, #188]	; (2ce8 <Reset_Handler+0xc8>)
    2c2c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2c2e:	687a      	ldr	r2, [r7, #4]
    2c30:	683b      	ldr	r3, [r7, #0]
    2c32:	429a      	cmp	r2, r3
    2c34:	d00c      	beq.n	2c50 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2c36:	e007      	b.n	2c48 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2c38:	683b      	ldr	r3, [r7, #0]
    2c3a:	1d1a      	adds	r2, r3, #4
    2c3c:	603a      	str	r2, [r7, #0]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	1d11      	adds	r1, r2, #4
    2c42:	6079      	str	r1, [r7, #4]
    2c44:	6812      	ldr	r2, [r2, #0]
    2c46:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2c48:	683a      	ldr	r2, [r7, #0]
    2c4a:	4b28      	ldr	r3, [pc, #160]	; (2cec <Reset_Handler+0xcc>)
    2c4c:	429a      	cmp	r2, r3
    2c4e:	d3f3      	bcc.n	2c38 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2c50:	4b27      	ldr	r3, [pc, #156]	; (2cf0 <Reset_Handler+0xd0>)
    2c52:	603b      	str	r3, [r7, #0]
    2c54:	e004      	b.n	2c60 <Reset_Handler+0x40>
                *pDest++ = 0;
    2c56:	683b      	ldr	r3, [r7, #0]
    2c58:	1d1a      	adds	r2, r3, #4
    2c5a:	603a      	str	r2, [r7, #0]
    2c5c:	2200      	movs	r2, #0
    2c5e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2c60:	683a      	ldr	r2, [r7, #0]
    2c62:	4b24      	ldr	r3, [pc, #144]	; (2cf4 <Reset_Handler+0xd4>)
    2c64:	429a      	cmp	r2, r3
    2c66:	d3f6      	bcc.n	2c56 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2c68:	4b23      	ldr	r3, [pc, #140]	; (2cf8 <Reset_Handler+0xd8>)
    2c6a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2c6c:	4b23      	ldr	r3, [pc, #140]	; (2cfc <Reset_Handler+0xdc>)
    2c6e:	687a      	ldr	r2, [r7, #4]
    2c70:	21ff      	movs	r1, #255	; 0xff
    2c72:	438a      	bics	r2, r1
    2c74:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2c76:	4a22      	ldr	r2, [pc, #136]	; (2d00 <Reset_Handler+0xe0>)
    2c78:	2390      	movs	r3, #144	; 0x90
    2c7a:	005b      	lsls	r3, r3, #1
    2c7c:	2102      	movs	r1, #2
    2c7e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2c80:	4b20      	ldr	r3, [pc, #128]	; (2d04 <Reset_Handler+0xe4>)
    2c82:	78da      	ldrb	r2, [r3, #3]
    2c84:	2103      	movs	r1, #3
    2c86:	438a      	bics	r2, r1
    2c88:	1c11      	adds	r1, r2, #0
    2c8a:	2202      	movs	r2, #2
    2c8c:	430a      	orrs	r2, r1
    2c8e:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2c90:	4b1c      	ldr	r3, [pc, #112]	; (2d04 <Reset_Handler+0xe4>)
    2c92:	78da      	ldrb	r2, [r3, #3]
    2c94:	210c      	movs	r1, #12
    2c96:	438a      	bics	r2, r1
    2c98:	1c11      	adds	r1, r2, #0
    2c9a:	2208      	movs	r2, #8
    2c9c:	430a      	orrs	r2, r1
    2c9e:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ca0:	4b19      	ldr	r3, [pc, #100]	; (2d08 <Reset_Handler+0xe8>)
    2ca2:	7b9a      	ldrb	r2, [r3, #14]
    2ca4:	2130      	movs	r1, #48	; 0x30
    2ca6:	438a      	bics	r2, r1
    2ca8:	1c11      	adds	r1, r2, #0
    2caa:	2220      	movs	r2, #32
    2cac:	430a      	orrs	r2, r1
    2cae:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2cb0:	4b15      	ldr	r3, [pc, #84]	; (2d08 <Reset_Handler+0xe8>)
    2cb2:	7b9a      	ldrb	r2, [r3, #14]
    2cb4:	210c      	movs	r1, #12
    2cb6:	438a      	bics	r2, r1
    2cb8:	1c11      	adds	r1, r2, #0
    2cba:	2208      	movs	r2, #8
    2cbc:	430a      	orrs	r2, r1
    2cbe:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2cc0:	4b11      	ldr	r3, [pc, #68]	; (2d08 <Reset_Handler+0xe8>)
    2cc2:	7b9a      	ldrb	r2, [r3, #14]
    2cc4:	2103      	movs	r1, #3
    2cc6:	438a      	bics	r2, r1
    2cc8:	1c11      	adds	r1, r2, #0
    2cca:	2202      	movs	r2, #2
    2ccc:	430a      	orrs	r2, r1
    2cce:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2cd0:	4b0e      	ldr	r3, [pc, #56]	; (2d0c <Reset_Handler+0xec>)
    2cd2:	685a      	ldr	r2, [r3, #4]
    2cd4:	2180      	movs	r1, #128	; 0x80
    2cd6:	430a      	orrs	r2, r1
    2cd8:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    2cda:	4b0d      	ldr	r3, [pc, #52]	; (2d10 <Reset_Handler+0xf0>)
    2cdc:	4798      	blx	r3

        /* Branch to main function */
        main();
    2cde:	4b0d      	ldr	r3, [pc, #52]	; (2d14 <Reset_Handler+0xf4>)
    2ce0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2ce2:	e7fe      	b.n	2ce2 <Reset_Handler+0xc2>
    2ce4:	00004708 	.word	0x00004708
    2ce8:	20000000 	.word	0x20000000
    2cec:	20000004 	.word	0x20000004
    2cf0:	20000004 	.word	0x20000004
    2cf4:	200001cc 	.word	0x200001cc
    2cf8:	00000000 	.word	0x00000000
    2cfc:	e000ed00 	.word	0xe000ed00
    2d00:	41007000 	.word	0x41007000
    2d04:	41005000 	.word	0x41005000
    2d08:	41004800 	.word	0x41004800
    2d0c:	41004000 	.word	0x41004000
    2d10:	000045a5 	.word	0x000045a5
    2d14:	00004185 	.word	0x00004185

00002d18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	af00      	add	r7, sp, #0
        while (1) {
        }
    2d1c:	e7fe      	b.n	2d1c <Dummy_Handler+0x4>
    2d1e:	46c0      	nop			; (mov r8, r8)

00002d20 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b084      	sub	sp, #16
    2d24:	af00      	add	r7, sp, #0
    2d26:	1c02      	adds	r2, r0, #0
    2d28:	1dfb      	adds	r3, r7, #7
    2d2a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2d2c:	230f      	movs	r3, #15
    2d2e:	18fb      	adds	r3, r7, r3
    2d30:	1dfa      	adds	r2, r7, #7
    2d32:	7812      	ldrb	r2, [r2, #0]
    2d34:	09d2      	lsrs	r2, r2, #7
    2d36:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2d38:	230e      	movs	r3, #14
    2d3a:	18fb      	adds	r3, r7, r3
    2d3c:	1dfa      	adds	r2, r7, #7
    2d3e:	7812      	ldrb	r2, [r2, #0]
    2d40:	0952      	lsrs	r2, r2, #5
    2d42:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2d44:	4b0d      	ldr	r3, [pc, #52]	; (2d7c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2d46:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2d48:	230f      	movs	r3, #15
    2d4a:	18fb      	adds	r3, r7, r3
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d10f      	bne.n	2d72 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2d52:	230f      	movs	r3, #15
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	781b      	ldrb	r3, [r3, #0]
    2d58:	009b      	lsls	r3, r3, #2
    2d5a:	2210      	movs	r2, #16
    2d5c:	4694      	mov	ip, r2
    2d5e:	44bc      	add	ip, r7
    2d60:	4463      	add	r3, ip
    2d62:	3b08      	subs	r3, #8
    2d64:	681a      	ldr	r2, [r3, #0]
    2d66:	230e      	movs	r3, #14
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	781b      	ldrb	r3, [r3, #0]
    2d6c:	01db      	lsls	r3, r3, #7
    2d6e:	18d3      	adds	r3, r2, r3
    2d70:	e000      	b.n	2d74 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2d72:	2300      	movs	r3, #0
	}
}
    2d74:	1c18      	adds	r0, r3, #0
    2d76:	46bd      	mov	sp, r7
    2d78:	b004      	add	sp, #16
    2d7a:	bd80      	pop	{r7, pc}
    2d7c:	41004400 	.word	0x41004400

00002d80 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b082      	sub	sp, #8
    2d84:	af00      	add	r7, sp, #0
    2d86:	1c02      	adds	r2, r0, #0
    2d88:	1dfb      	adds	r3, r7, #7
    2d8a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2d8c:	1dfb      	adds	r3, r7, #7
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	1c18      	adds	r0, r3, #0
    2d92:	4b03      	ldr	r3, [pc, #12]	; (2da0 <port_get_group_from_gpio_pin+0x20>)
    2d94:	4798      	blx	r3
    2d96:	1c03      	adds	r3, r0, #0
}
    2d98:	1c18      	adds	r0, r3, #0
    2d9a:	46bd      	mov	sp, r7
    2d9c:	b002      	add	sp, #8
    2d9e:	bd80      	pop	{r7, pc}
    2da0:	00002d21 	.word	0x00002d21

00002da4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b082      	sub	sp, #8
    2da8:	af00      	add	r7, sp, #0
    2daa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2200      	movs	r2, #0
    2db0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	2201      	movs	r2, #1
    2db6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	2200      	movs	r2, #0
    2dbc:	709a      	strb	r2, [r3, #2]
}
    2dbe:	46bd      	mov	sp, r7
    2dc0:	b002      	add	sp, #8
    2dc2:	bd80      	pop	{r7, pc}

00002dc4 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b084      	sub	sp, #16
    2dc8:	af00      	add	r7, sp, #0
    2dca:	1c02      	adds	r2, r0, #0
    2dcc:	1dfb      	adds	r3, r7, #7
    2dce:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2dd0:	1dfb      	adds	r3, r7, #7
    2dd2:	781b      	ldrb	r3, [r3, #0]
    2dd4:	1c18      	adds	r0, r3, #0
    2dd6:	4b0b      	ldr	r3, [pc, #44]	; (2e04 <port_pin_get_input_level+0x40>)
    2dd8:	4798      	blx	r3
    2dda:	1c03      	adds	r3, r0, #0
    2ddc:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2dde:	1dfb      	adds	r3, r7, #7
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	221f      	movs	r2, #31
    2de4:	4013      	ands	r3, r2
    2de6:	2201      	movs	r2, #1
    2de8:	409a      	lsls	r2, r3
    2dea:	1c13      	adds	r3, r2, #0
    2dec:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2dee:	68fb      	ldr	r3, [r7, #12]
    2df0:	6a1b      	ldr	r3, [r3, #32]
    2df2:	68ba      	ldr	r2, [r7, #8]
    2df4:	4013      	ands	r3, r2
    2df6:	1e5a      	subs	r2, r3, #1
    2df8:	4193      	sbcs	r3, r2
    2dfa:	b2db      	uxtb	r3, r3
}
    2dfc:	1c18      	adds	r0, r3, #0
    2dfe:	46bd      	mov	sp, r7
    2e00:	b004      	add	sp, #16
    2e02:	bd80      	pop	{r7, pc}
    2e04:	00002d81 	.word	0x00002d81

00002e08 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b084      	sub	sp, #16
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	1c02      	adds	r2, r0, #0
    2e10:	1dfb      	adds	r3, r7, #7
    2e12:	701a      	strb	r2, [r3, #0]
    2e14:	1dbb      	adds	r3, r7, #6
    2e16:	1c0a      	adds	r2, r1, #0
    2e18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2e1a:	1dfb      	adds	r3, r7, #7
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	1c18      	adds	r0, r3, #0
    2e20:	4b0c      	ldr	r3, [pc, #48]	; (2e54 <port_pin_set_output_level+0x4c>)
    2e22:	4798      	blx	r3
    2e24:	1c03      	adds	r3, r0, #0
    2e26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2e28:	1dfb      	adds	r3, r7, #7
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	221f      	movs	r2, #31
    2e2e:	4013      	ands	r3, r2
    2e30:	2201      	movs	r2, #1
    2e32:	409a      	lsls	r2, r3
    2e34:	1c13      	adds	r3, r2, #0
    2e36:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2e38:	1dbb      	adds	r3, r7, #6
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d003      	beq.n	2e48 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	68ba      	ldr	r2, [r7, #8]
    2e44:	619a      	str	r2, [r3, #24]
    2e46:	e002      	b.n	2e4e <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	68ba      	ldr	r2, [r7, #8]
    2e4c:	615a      	str	r2, [r3, #20]
	}
}
    2e4e:	46bd      	mov	sp, r7
    2e50:	b004      	add	sp, #16
    2e52:	bd80      	pop	{r7, pc}
    2e54:	00002d81 	.word	0x00002d81

00002e58 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2e5c:	4b03      	ldr	r3, [pc, #12]	; (2e6c <system_interrupt_enable_global+0x14>)
    2e5e:	2201      	movs	r2, #1
    2e60:	701a      	strb	r2, [r3, #0]
    2e62:	f3bf 8f5f 	dmb	sy
    2e66:	b662      	cpsie	i
}
    2e68:	46bd      	mov	sp, r7
    2e6a:	bd80      	pop	{r7, pc}
    2e6c:	20000000 	.word	0x20000000

00002e70 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e74:	b672      	cpsid	i
    2e76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2e7a:	4b02      	ldr	r3, [pc, #8]	; (2e84 <system_interrupt_disable_global+0x14>)
    2e7c:	2200      	movs	r2, #0
    2e7e:	701a      	strb	r2, [r3, #0]
}
    2e80:	46bd      	mov	sp, r7
    2e82:	bd80      	pop	{r7, pc}
    2e84:	20000000 	.word	0x20000000

00002e88 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b082      	sub	sp, #8
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	1c02      	adds	r2, r0, #0
    2e90:	1dfb      	adds	r3, r7, #7
    2e92:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e94:	4b06      	ldr	r3, [pc, #24]	; (2eb0 <system_interrupt_enable+0x28>)
    2e96:	1dfa      	adds	r2, r7, #7
    2e98:	7812      	ldrb	r2, [r2, #0]
    2e9a:	1c11      	adds	r1, r2, #0
    2e9c:	221f      	movs	r2, #31
    2e9e:	400a      	ands	r2, r1
    2ea0:	2101      	movs	r1, #1
    2ea2:	4091      	lsls	r1, r2
    2ea4:	1c0a      	adds	r2, r1, #0
    2ea6:	601a      	str	r2, [r3, #0]
}
    2ea8:	46bd      	mov	sp, r7
    2eaa:	b002      	add	sp, #8
    2eac:	bd80      	pop	{r7, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	e000e100 	.word	0xe000e100

00002eb4 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b084      	sub	sp, #16
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	22a0      	movs	r2, #160	; 0xa0
    2ec0:	0112      	lsls	r2, r2, #4
    2ec2:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	2201      	movs	r2, #1
    2ec8:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	2200      	movs	r2, #0
    2ece:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	2200      	movs	r2, #0
    2ed4:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2ed6:	230f      	movs	r3, #15
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	2200      	movs	r2, #0
    2edc:	701a      	strb	r2, [r3, #0]
    2ede:	e00e      	b.n	2efe <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    2ee0:	230f      	movs	r3, #15
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	781a      	ldrb	r2, [r3, #0]
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	3202      	adds	r2, #2
    2eea:	0092      	lsls	r2, r2, #2
    2eec:	2100      	movs	r1, #0
    2eee:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2ef0:	230f      	movs	r3, #15
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	781a      	ldrb	r2, [r3, #0]
    2ef6:	230f      	movs	r3, #15
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	3201      	adds	r2, #1
    2efc:	701a      	strb	r2, [r3, #0]
    2efe:	230f      	movs	r3, #15
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	2b01      	cmp	r3, #1
    2f06:	d9eb      	bls.n	2ee0 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    2f08:	46bd      	mov	sp, r7
    2f0a:	b004      	add	sp, #16
    2f0c:	bd80      	pop	{r7, pc}
    2f0e:	46c0      	nop			; (mov r8, r8)

00002f10 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b084      	sub	sp, #16
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2f1e:	68fb      	ldr	r3, [r7, #12]
    2f20:	69db      	ldr	r3, [r3, #28]
    2f22:	1e5a      	subs	r2, r3, #1
    2f24:	4193      	sbcs	r3, r2
    2f26:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2f28:	1c18      	adds	r0, r3, #0
    2f2a:	46bd      	mov	sp, r7
    2f2c:	b004      	add	sp, #16
    2f2e:	bd80      	pop	{r7, pc}

00002f30 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2f30:	b580      	push	{r7, lr}
    2f32:	b082      	sub	sp, #8
    2f34:	af00      	add	r7, sp, #0
    2f36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	2201      	movs	r2, #1
    2f3c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	2200      	movs	r2, #0
    2f42:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	2200      	movs	r2, #0
    2f48:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2f4a:	687b      	ldr	r3, [r7, #4]
    2f4c:	22c0      	movs	r2, #192	; 0xc0
    2f4e:	0392      	lsls	r2, r2, #14
    2f50:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	2200      	movs	r2, #0
    2f56:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	2200      	movs	r2, #0
    2f5c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	2201      	movs	r2, #1
    2f62:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	2201      	movs	r2, #1
    2f68:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	2200      	movs	r2, #0
    2f6e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	2224      	movs	r2, #36	; 0x24
    2f74:	2100      	movs	r1, #0
    2f76:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	3318      	adds	r3, #24
    2f7c:	1c18      	adds	r0, r3, #0
    2f7e:	2100      	movs	r1, #0
    2f80:	220c      	movs	r2, #12
    2f82:	4b0a      	ldr	r3, [pc, #40]	; (2fac <spi_get_config_defaults+0x7c>)
    2f84:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	4a09      	ldr	r2, [pc, #36]	; (2fb0 <spi_get_config_defaults+0x80>)
    2f8a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	2200      	movs	r2, #0
    2f90:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	2200      	movs	r2, #0
    2f96:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	2200      	movs	r2, #0
    2f9c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	2200      	movs	r2, #0
    2fa2:	635a      	str	r2, [r3, #52]	; 0x34

};
    2fa4:	46bd      	mov	sp, r7
    2fa6:	b002      	add	sp, #8
    2fa8:	bd80      	pop	{r7, pc}
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	00004603 	.word	0x00004603
    2fb0:	000186a0 	.word	0x000186a0

00002fb4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b082      	sub	sp, #8
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	220a      	movs	r2, #10
    2fc0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	2200      	movs	r2, #0
    2fc6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	2200      	movs	r2, #0
    2fcc:	709a      	strb	r2, [r3, #2]
}
    2fce:	46bd      	mov	sp, r7
    2fd0:	b002      	add	sp, #8
    2fd2:	bd80      	pop	{r7, pc}

00002fd4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	b084      	sub	sp, #16
    2fd8:	af00      	add	r7, sp, #0
    2fda:	6078      	str	r0, [r7, #4]
    2fdc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2fde:	683b      	ldr	r3, [r7, #0]
    2fe0:	781a      	ldrb	r2, [r3, #0]
    2fe2:	687b      	ldr	r3, [r7, #4]
    2fe4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2fe6:	683b      	ldr	r3, [r7, #0]
    2fe8:	785a      	ldrb	r2, [r3, #1]
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2fee:	683b      	ldr	r3, [r7, #0]
    2ff0:	789a      	ldrb	r2, [r3, #2]
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2ff6:	230c      	movs	r3, #12
    2ff8:	18fb      	adds	r3, r7, r3
    2ffa:	1c18      	adds	r0, r3, #0
    2ffc:	4b0b      	ldr	r3, [pc, #44]	; (302c <spi_attach_slave+0x58>)
    2ffe:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3000:	230c      	movs	r3, #12
    3002:	18fb      	adds	r3, r7, r3
    3004:	2201      	movs	r2, #1
    3006:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	781a      	ldrb	r2, [r3, #0]
    300c:	230c      	movs	r3, #12
    300e:	18fb      	adds	r3, r7, r3
    3010:	1c10      	adds	r0, r2, #0
    3012:	1c19      	adds	r1, r3, #0
    3014:	4b06      	ldr	r3, [pc, #24]	; (3030 <spi_attach_slave+0x5c>)
    3016:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	781b      	ldrb	r3, [r3, #0]
    301c:	1c18      	adds	r0, r3, #0
    301e:	2101      	movs	r1, #1
    3020:	4b04      	ldr	r3, [pc, #16]	; (3034 <spi_attach_slave+0x60>)
    3022:	4798      	blx	r3
}
    3024:	46bd      	mov	sp, r7
    3026:	b004      	add	sp, #16
    3028:	bd80      	pop	{r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	00002da5 	.word	0x00002da5
    3030:	00001e9d 	.word	0x00001e9d
    3034:	00002e09 	.word	0x00002e09

00003038 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    3038:	b580      	push	{r7, lr}
    303a:	b084      	sub	sp, #16
    303c:	af00      	add	r7, sp, #0
    303e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	1c18      	adds	r0, r3, #0
    304c:	4b0a      	ldr	r3, [pc, #40]	; (3078 <spi_enable+0x40>)
    304e:	4798      	blx	r3
    3050:	1c03      	adds	r3, r0, #0
    3052:	1c18      	adds	r0, r3, #0
    3054:	4b09      	ldr	r3, [pc, #36]	; (307c <spi_enable+0x44>)
    3056:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3058:	46c0      	nop			; (mov r8, r8)
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	1c18      	adds	r0, r3, #0
    305e:	4b08      	ldr	r3, [pc, #32]	; (3080 <spi_enable+0x48>)
    3060:	4798      	blx	r3
    3062:	1e03      	subs	r3, r0, #0
    3064:	d1f9      	bne.n	305a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3066:	68fb      	ldr	r3, [r7, #12]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	2202      	movs	r2, #2
    306c:	431a      	orrs	r2, r3
    306e:	68fb      	ldr	r3, [r7, #12]
    3070:	601a      	str	r2, [r3, #0]
}
    3072:	46bd      	mov	sp, r7
    3074:	b004      	add	sp, #16
    3076:	bd80      	pop	{r7, pc}
    3078:	00001da9 	.word	0x00001da9
    307c:	00002e89 	.word	0x00002e89
    3080:	00002f11 	.word	0x00002f11

00003084 <configure_extint_callbacks>:
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
	extint_chan_set_config(15, &config_extint_chan);
}
void configure_extint_callbacks(void)
{
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    3088:	4b05      	ldr	r3, [pc, #20]	; (30a0 <configure_extint_callbacks+0x1c>)
    308a:	1c18      	adds	r0, r3, #0
    308c:	2103      	movs	r1, #3
    308e:	2200      	movs	r2, #0
    3090:	4b04      	ldr	r3, [pc, #16]	; (30a4 <configure_extint_callbacks+0x20>)
    3092:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    3094:	2003      	movs	r0, #3
    3096:	2100      	movs	r1, #0
    3098:	4b03      	ldr	r3, [pc, #12]	; (30a8 <configure_extint_callbacks+0x24>)
    309a:	4798      	blx	r3
}
    309c:	46bd      	mov	sp, r7
    309e:	bd80      	pop	{r7, pc}
    30a0:	00003de9 	.word	0x00003de9
    30a4:	00000a15 	.word	0x00000a15
    30a8:	00000a79 	.word	0x00000a79

000030ac <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b090      	sub	sp, #64	; 0x40
    30b0:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    30b2:	1d3b      	adds	r3, r7, #4
    30b4:	1c18      	adds	r0, r3, #0
    30b6:	4b22      	ldr	r3, [pc, #136]	; (3140 <configure_RFM69_spi+0x94>)
    30b8:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    30ba:	1d3b      	adds	r3, r7, #4
    30bc:	2212      	movs	r2, #18
    30be:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    30c0:	4a20      	ldr	r2, [pc, #128]	; (3144 <configure_RFM69_spi+0x98>)
    30c2:	1d3b      	adds	r3, r7, #4
    30c4:	1c10      	adds	r0, r2, #0
    30c6:	1c19      	adds	r1, r3, #0
    30c8:	4b1f      	ldr	r3, [pc, #124]	; (3148 <configure_RFM69_spi+0x9c>)
    30ca:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    30cc:	2308      	movs	r3, #8
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	1c18      	adds	r0, r3, #0
    30d2:	4b1e      	ldr	r3, [pc, #120]	; (314c <configure_RFM69_spi+0xa0>)
    30d4:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    30d6:	2308      	movs	r3, #8
    30d8:	18fb      	adds	r3, r7, r3
    30da:	22c0      	movs	r2, #192	; 0xc0
    30dc:	0392      	lsls	r2, r2, #14
    30de:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    30e0:	2308      	movs	r3, #8
    30e2:	18fb      	adds	r3, r7, r3
    30e4:	4a1a      	ldr	r2, [pc, #104]	; (3150 <configure_RFM69_spi+0xa4>)
    30e6:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    30e8:	2308      	movs	r3, #8
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	4a19      	ldr	r2, [pc, #100]	; (3154 <configure_RFM69_spi+0xa8>)
    30ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    30f0:	2308      	movs	r3, #8
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	2201      	movs	r2, #1
    30f6:	4252      	negs	r2, r2
    30f8:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    30fa:	2308      	movs	r3, #8
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	4a16      	ldr	r2, [pc, #88]	; (3158 <configure_RFM69_spi+0xac>)
    3100:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    3102:	2308      	movs	r3, #8
    3104:	18fb      	adds	r3, r7, r3
    3106:	2200      	movs	r2, #0
    3108:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    310a:	2308      	movs	r3, #8
    310c:	18fb      	adds	r3, r7, r3
    310e:	2200      	movs	r2, #0
    3110:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    3112:	4a12      	ldr	r2, [pc, #72]	; (315c <configure_RFM69_spi+0xb0>)
    3114:	4912      	ldr	r1, [pc, #72]	; (3160 <configure_RFM69_spi+0xb4>)
    3116:	2308      	movs	r3, #8
    3118:	18fb      	adds	r3, r7, r3
    311a:	1c10      	adds	r0, r2, #0
    311c:	1c1a      	adds	r2, r3, #0
    311e:	4b11      	ldr	r3, [pc, #68]	; (3164 <configure_RFM69_spi+0xb8>)
    3120:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    3122:	4b0e      	ldr	r3, [pc, #56]	; (315c <configure_RFM69_spi+0xb0>)
    3124:	1c18      	adds	r0, r3, #0
    3126:	4b10      	ldr	r3, [pc, #64]	; (3168 <configure_RFM69_spi+0xbc>)
    3128:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    312a:	4a0c      	ldr	r2, [pc, #48]	; (315c <configure_RFM69_spi+0xb0>)
    312c:	4b05      	ldr	r3, [pc, #20]	; (3144 <configure_RFM69_spi+0x98>)
    312e:	1c10      	adds	r0, r2, #0
    3130:	1c19      	adds	r1, r3, #0
    3132:	2200      	movs	r2, #0
    3134:	4b0d      	ldr	r3, [pc, #52]	; (316c <configure_RFM69_spi+0xc0>)
    3136:	4798      	blx	r3
}
    3138:	46bd      	mov	sp, r7
    313a:	b010      	add	sp, #64	; 0x40
    313c:	bd80      	pop	{r7, pc}
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	00002fb5 	.word	0x00002fb5
    3144:	200001c8 	.word	0x200001c8
    3148:	00002fd5 	.word	0x00002fd5
    314c:	00002f31 	.word	0x00002f31
    3150:	00100002 	.word	0x00100002
    3154:	00110002 	.word	0x00110002
    3158:	00130002 	.word	0x00130002
    315c:	20000188 	.word	0x20000188
    3160:	42000c00 	.word	0x42000c00
    3164:	000011d5 	.word	0x000011d5
    3168:	00003039 	.word	0x00003039
    316c:	000014c1 	.word	0x000014c1

00003170 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    3170:	b580      	push	{r7, lr}
    3172:	b084      	sub	sp, #16
    3174:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    3176:	1c3b      	adds	r3, r7, #0
    3178:	1c18      	adds	r0, r3, #0
    317a:	4b10      	ldr	r3, [pc, #64]	; (31bc <configure_rtc_count+0x4c>)
    317c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    317e:	1c3b      	adds	r3, r7, #0
    3180:	2200      	movs	r2, #0
    3182:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    3184:	1c3b      	adds	r3, r7, #0
    3186:	2200      	movs	r2, #0
    3188:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    318a:	1c3b      	adds	r3, r7, #0
    318c:	2201      	movs	r2, #1
    318e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    3190:	4a0b      	ldr	r2, [pc, #44]	; (31c0 <configure_rtc_count+0x50>)
    3192:	490c      	ldr	r1, [pc, #48]	; (31c4 <configure_rtc_count+0x54>)
    3194:	1c3b      	adds	r3, r7, #0
    3196:	1c10      	adds	r0, r2, #0
    3198:	1c1a      	adds	r2, r3, #0
    319a:	4b0b      	ldr	r3, [pc, #44]	; (31c8 <configure_rtc_count+0x58>)
    319c:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    319e:	4b08      	ldr	r3, [pc, #32]	; (31c0 <configure_rtc_count+0x50>)
    31a0:	1c18      	adds	r0, r3, #0
    31a2:	4b0a      	ldr	r3, [pc, #40]	; (31cc <configure_rtc_count+0x5c>)
    31a4:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 2000);
    31a6:	4a06      	ldr	r2, [pc, #24]	; (31c0 <configure_rtc_count+0x50>)
    31a8:	23fa      	movs	r3, #250	; 0xfa
    31aa:	00db      	lsls	r3, r3, #3
    31ac:	1c10      	adds	r0, r2, #0
    31ae:	1c19      	adds	r1, r3, #0
    31b0:	4b07      	ldr	r3, [pc, #28]	; (31d0 <configure_rtc_count+0x60>)
    31b2:	4798      	blx	r3
}
    31b4:	46bd      	mov	sp, r7
    31b6:	b004      	add	sp, #16
    31b8:	bd80      	pop	{r7, pc}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	00002eb5 	.word	0x00002eb5
    31c0:	200000e0 	.word	0x200000e0
    31c4:	40001400 	.word	0x40001400
    31c8:	00000639 	.word	0x00000639
    31cc:	00000431 	.word	0x00000431
    31d0:	0000081d 	.word	0x0000081d

000031d4 <reset_millis>:

void reset_millis(void)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 10);
    31d8:	4b05      	ldr	r3, [pc, #20]	; (31f0 <reset_millis+0x1c>)
    31da:	1c18      	adds	r0, r3, #0
    31dc:	210a      	movs	r1, #10
    31de:	4b05      	ldr	r3, [pc, #20]	; (31f4 <reset_millis+0x20>)
    31e0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    31e2:	4b03      	ldr	r3, [pc, #12]	; (31f0 <reset_millis+0x1c>)
    31e4:	1c18      	adds	r0, r3, #0
    31e6:	4b04      	ldr	r3, [pc, #16]	; (31f8 <reset_millis+0x24>)
    31e8:	4798      	blx	r3
}
    31ea:	46bd      	mov	sp, r7
    31ec:	bd80      	pop	{r7, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	200000e0 	.word	0x200000e0
    31f4:	000006c9 	.word	0x000006c9
    31f8:	00000431 	.word	0x00000431

000031fc <millis>:

uint32_t millis(void)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b082      	sub	sp, #8
    3200:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    3202:	2300      	movs	r3, #0
    3204:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    3206:	4b06      	ldr	r3, [pc, #24]	; (3220 <millis+0x24>)
    3208:	1c18      	adds	r0, r3, #0
    320a:	4b06      	ldr	r3, [pc, #24]	; (3224 <millis+0x28>)
    320c:	4798      	blx	r3
    320e:	1c03      	adds	r3, r0, #0
    3210:	607b      	str	r3, [r7, #4]
	milli = milli;
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	607b      	str	r3, [r7, #4]
	return milli;
    3216:	687b      	ldr	r3, [r7, #4]
}
    3218:	1c18      	adds	r0, r3, #0
    321a:	46bd      	mov	sp, r7
    321c:	b002      	add	sp, #8
    321e:	bd80      	pop	{r7, pc}
    3220:	200000e0 	.word	0x200000e0
    3224:	00000729 	.word	0x00000729

00003228 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    3228:	b590      	push	{r4, r7, lr}
    322a:	b085      	sub	sp, #20
    322c:	af00      	add	r7, sp, #0
    322e:	1c04      	adds	r4, r0, #0
    3230:	6039      	str	r1, [r7, #0]
    3232:	1c10      	adds	r0, r2, #0
    3234:	1c19      	adds	r1, r3, #0
    3236:	1dfb      	adds	r3, r7, #7
    3238:	1c22      	adds	r2, r4, #0
    323a:	701a      	strb	r2, [r3, #0]
    323c:	1dbb      	adds	r3, r7, #6
    323e:	1c02      	adds	r2, r0, #0
    3240:	701a      	strb	r2, [r3, #0]
    3242:	1d7b      	adds	r3, r7, #5
    3244:	1c0a      	adds	r2, r1, #0
    3246:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    3248:	2001      	movs	r0, #1
    324a:	4b50      	ldr	r3, [pc, #320]	; (338c <sendFrame+0x164>)
    324c:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	2027      	movs	r0, #39	; 0x27
    3252:	4b4f      	ldr	r3, [pc, #316]	; (3390 <sendFrame+0x168>)
    3254:	4798      	blx	r3
    3256:	1c03      	adds	r3, r0, #0
    3258:	b2db      	uxtb	r3, r3
    325a:	b25b      	sxtb	r3, r3
    325c:	2b00      	cmp	r3, #0
    325e:	daf7      	bge.n	3250 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    3260:	2025      	movs	r0, #37	; 0x25
    3262:	2100      	movs	r1, #0
    3264:	4b4b      	ldr	r3, [pc, #300]	; (3394 <sendFrame+0x16c>)
    3266:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    3268:	1dbb      	adds	r3, r7, #6
    326a:	781b      	ldrb	r3, [r3, #0]
    326c:	2b3d      	cmp	r3, #61	; 0x3d
    326e:	d902      	bls.n	3276 <sendFrame+0x4e>
    3270:	1dbb      	adds	r3, r7, #6
    3272:	223d      	movs	r2, #61	; 0x3d
    3274:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    3276:	230e      	movs	r3, #14
    3278:	18fb      	adds	r3, r7, r3
    327a:	2200      	movs	r2, #0
    327c:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    327e:	2320      	movs	r3, #32
    3280:	18fb      	adds	r3, r7, r3
    3282:	781b      	ldrb	r3, [r3, #0]
    3284:	2b00      	cmp	r3, #0
    3286:	d004      	beq.n	3292 <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    3288:	230e      	movs	r3, #14
    328a:	18fb      	adds	r3, r7, r3
    328c:	2280      	movs	r2, #128	; 0x80
    328e:	701a      	strb	r2, [r3, #0]
    3290:	e007      	b.n	32a2 <sendFrame+0x7a>
	else if (requestACK)
    3292:	1d7b      	adds	r3, r7, #5
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	2b00      	cmp	r3, #0
    3298:	d003      	beq.n	32a2 <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    329a:	230e      	movs	r3, #14
    329c:	18fb      	adds	r3, r7, r3
    329e:	2240      	movs	r2, #64	; 0x40
    32a0:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	select();
    32a2:	4b3d      	ldr	r3, [pc, #244]	; (3398 <sendFrame+0x170>)
    32a4:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    32a6:	4a3d      	ldr	r2, [pc, #244]	; (339c <sendFrame+0x174>)
    32a8:	4b3d      	ldr	r3, [pc, #244]	; (33a0 <sendFrame+0x178>)
    32aa:	1c10      	adds	r0, r2, #0
    32ac:	2180      	movs	r1, #128	; 0x80
    32ae:	1c1a      	adds	r2, r3, #0
    32b0:	4b3c      	ldr	r3, [pc, #240]	; (33a4 <sendFrame+0x17c>)
    32b2:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    32b4:	1dbb      	adds	r3, r7, #6
    32b6:	781b      	ldrb	r3, [r3, #0]
    32b8:	b29b      	uxth	r3, r3
    32ba:	3303      	adds	r3, #3
    32bc:	b29a      	uxth	r2, r3
    32be:	4937      	ldr	r1, [pc, #220]	; (339c <sendFrame+0x174>)
    32c0:	4b37      	ldr	r3, [pc, #220]	; (33a0 <sendFrame+0x178>)
    32c2:	1c08      	adds	r0, r1, #0
    32c4:	1c11      	adds	r1, r2, #0
    32c6:	1c1a      	adds	r2, r3, #0
    32c8:	4b36      	ldr	r3, [pc, #216]	; (33a4 <sendFrame+0x17c>)
    32ca:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    32cc:	1dfb      	adds	r3, r7, #7
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	b29a      	uxth	r2, r3
    32d2:	4932      	ldr	r1, [pc, #200]	; (339c <sendFrame+0x174>)
    32d4:	4b32      	ldr	r3, [pc, #200]	; (33a0 <sendFrame+0x178>)
    32d6:	1c08      	adds	r0, r1, #0
    32d8:	1c11      	adds	r1, r2, #0
    32da:	1c1a      	adds	r2, r3, #0
    32dc:	4b31      	ldr	r3, [pc, #196]	; (33a4 <sendFrame+0x17c>)
    32de:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    32e0:	4b31      	ldr	r3, [pc, #196]	; (33a8 <sendFrame+0x180>)
    32e2:	781b      	ldrb	r3, [r3, #0]
    32e4:	b2db      	uxtb	r3, r3
    32e6:	b29a      	uxth	r2, r3
    32e8:	492c      	ldr	r1, [pc, #176]	; (339c <sendFrame+0x174>)
    32ea:	4b2d      	ldr	r3, [pc, #180]	; (33a0 <sendFrame+0x178>)
    32ec:	1c08      	adds	r0, r1, #0
    32ee:	1c11      	adds	r1, r2, #0
    32f0:	1c1a      	adds	r2, r3, #0
    32f2:	4b2c      	ldr	r3, [pc, #176]	; (33a4 <sendFrame+0x17c>)
    32f4:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    32f6:	230e      	movs	r3, #14
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	b2db      	uxtb	r3, r3
    32fe:	b29a      	uxth	r2, r3
    3300:	4926      	ldr	r1, [pc, #152]	; (339c <sendFrame+0x174>)
    3302:	4b27      	ldr	r3, [pc, #156]	; (33a0 <sendFrame+0x178>)
    3304:	1c08      	adds	r0, r1, #0
    3306:	1c11      	adds	r1, r2, #0
    3308:	1c1a      	adds	r2, r3, #0
    330a:	4b26      	ldr	r3, [pc, #152]	; (33a4 <sendFrame+0x17c>)
    330c:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    330e:	230f      	movs	r3, #15
    3310:	18fb      	adds	r3, r7, r3
    3312:	2200      	movs	r2, #0
    3314:	701a      	strb	r2, [r3, #0]
    3316:	e014      	b.n	3342 <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    3318:	230f      	movs	r3, #15
    331a:	18fb      	adds	r3, r7, r3
    331c:	781b      	ldrb	r3, [r3, #0]
    331e:	683a      	ldr	r2, [r7, #0]
    3320:	18d3      	adds	r3, r2, r3
    3322:	781b      	ldrb	r3, [r3, #0]
    3324:	b29a      	uxth	r2, r3
    3326:	491d      	ldr	r1, [pc, #116]	; (339c <sendFrame+0x174>)
    3328:	4b1d      	ldr	r3, [pc, #116]	; (33a0 <sendFrame+0x178>)
    332a:	1c08      	adds	r0, r1, #0
    332c:	1c11      	adds	r1, r2, #0
    332e:	1c1a      	adds	r2, r3, #0
    3330:	4b1c      	ldr	r3, [pc, #112]	; (33a4 <sendFrame+0x17c>)
    3332:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    3334:	230f      	movs	r3, #15
    3336:	18fb      	adds	r3, r7, r3
    3338:	781a      	ldrb	r2, [r3, #0]
    333a:	230f      	movs	r3, #15
    333c:	18fb      	adds	r3, r7, r3
    333e:	3201      	adds	r2, #1
    3340:	701a      	strb	r2, [r3, #0]
    3342:	230f      	movs	r3, #15
    3344:	18fa      	adds	r2, r7, r3
    3346:	1dbb      	adds	r3, r7, #6
    3348:	7812      	ldrb	r2, [r2, #0]
    334a:	781b      	ldrb	r3, [r3, #0]
    334c:	429a      	cmp	r2, r3
    334e:	d3e3      	bcc.n	3318 <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    3350:	4b16      	ldr	r3, [pc, #88]	; (33ac <sendFrame+0x184>)
    3352:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    3354:	2004      	movs	r0, #4
    3356:	4b0d      	ldr	r3, [pc, #52]	; (338c <sendFrame+0x164>)
    3358:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    335a:	4b15      	ldr	r3, [pc, #84]	; (33b0 <sendFrame+0x188>)
    335c:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	2003      	movs	r0, #3
    3362:	4b14      	ldr	r3, [pc, #80]	; (33b4 <sendFrame+0x18c>)
    3364:	4798      	blx	r3
    3366:	1c03      	adds	r3, r0, #0
    3368:	1c1a      	adds	r2, r3, #0
    336a:	2301      	movs	r3, #1
    336c:	4053      	eors	r3, r2
    336e:	b2db      	uxtb	r3, r3
    3370:	2b00      	cmp	r3, #0
    3372:	d005      	beq.n	3380 <sendFrame+0x158>
    3374:	4b10      	ldr	r3, [pc, #64]	; (33b8 <sendFrame+0x190>)
    3376:	4798      	blx	r3
    3378:	1e02      	subs	r2, r0, #0
    337a:	4b10      	ldr	r3, [pc, #64]	; (33bc <sendFrame+0x194>)
    337c:	429a      	cmp	r2, r3
    337e:	d9ef      	bls.n	3360 <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    3380:	2001      	movs	r0, #1
    3382:	4b02      	ldr	r3, [pc, #8]	; (338c <sendFrame+0x164>)
    3384:	4798      	blx	r3
}
    3386:	46bd      	mov	sp, r7
    3388:	b005      	add	sp, #20
    338a:	bd90      	pop	{r4, r7, pc}
    338c:	000037d1 	.word	0x000037d1
    3390:	00003ff5 	.word	0x00003ff5
    3394:	00004061 	.word	0x00004061
    3398:	000040c5 	.word	0x000040c5
    339c:	20000188 	.word	0x20000188
    33a0:	2000005c 	.word	0x2000005c
    33a4:	00001379 	.word	0x00001379
    33a8:	2000013c 	.word	0x2000013c
    33ac:	000040f1 	.word	0x000040f1
    33b0:	000031d5 	.word	0x000031d5
    33b4:	00002dc5 	.word	0x00002dc5
    33b8:	000031fd 	.word	0x000031fd
    33bc:	000003e7 	.word	0x000003e7

000033c0 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    33c0:	b580      	push	{r7, lr}
    33c2:	b082      	sub	sp, #8
    33c4:	af00      	add	r7, sp, #0
    33c6:	1c02      	adds	r2, r0, #0
    33c8:	1dfb      	adds	r3, r7, #7
    33ca:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    33cc:	4b1a      	ldr	r3, [pc, #104]	; (3438 <RFM_setHighPower+0x78>)
    33ce:	1dfa      	adds	r2, r7, #7
    33d0:	7812      	ldrb	r2, [r2, #0]
    33d2:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    33d4:	4b18      	ldr	r3, [pc, #96]	; (3438 <RFM_setHighPower+0x78>)
    33d6:	781b      	ldrb	r3, [r3, #0]
    33d8:	b2db      	uxtb	r3, r3
    33da:	2b00      	cmp	r3, #0
    33dc:	d001      	beq.n	33e2 <RFM_setHighPower+0x22>
    33de:	230f      	movs	r3, #15
    33e0:	e000      	b.n	33e4 <RFM_setHighPower+0x24>
    33e2:	231a      	movs	r3, #26
    33e4:	2013      	movs	r0, #19
    33e6:	1c19      	adds	r1, r3, #0
    33e8:	4b14      	ldr	r3, [pc, #80]	; (343c <RFM_setHighPower+0x7c>)
    33ea:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    33ec:	4b12      	ldr	r3, [pc, #72]	; (3438 <RFM_setHighPower+0x78>)
    33ee:	781b      	ldrb	r3, [r3, #0]
    33f0:	b2db      	uxtb	r3, r3
    33f2:	2b00      	cmp	r3, #0
    33f4:	d012      	beq.n	341c <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    33f6:	2011      	movs	r0, #17
    33f8:	4b11      	ldr	r3, [pc, #68]	; (3440 <RFM_setHighPower+0x80>)
    33fa:	4798      	blx	r3
    33fc:	1c03      	adds	r3, r0, #0
    33fe:	b2db      	uxtb	r3, r3
    3400:	1c1a      	adds	r2, r3, #0
    3402:	231f      	movs	r3, #31
    3404:	4013      	ands	r3, r2
    3406:	b2db      	uxtb	r3, r3
    3408:	1c1a      	adds	r2, r3, #0
    340a:	2360      	movs	r3, #96	; 0x60
    340c:	4313      	orrs	r3, r2
    340e:	b2db      	uxtb	r3, r3
    3410:	b2db      	uxtb	r3, r3
    3412:	2011      	movs	r0, #17
    3414:	1c19      	adds	r1, r3, #0
    3416:	4b09      	ldr	r3, [pc, #36]	; (343c <RFM_setHighPower+0x7c>)
    3418:	4798      	blx	r3
    341a:	e009      	b.n	3430 <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    341c:	4b09      	ldr	r3, [pc, #36]	; (3444 <RFM_setHighPower+0x84>)
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2280      	movs	r2, #128	; 0x80
    3422:	4252      	negs	r2, r2
    3424:	4313      	orrs	r3, r2
    3426:	b2db      	uxtb	r3, r3
    3428:	2011      	movs	r0, #17
    342a:	1c19      	adds	r1, r3, #0
    342c:	4b03      	ldr	r3, [pc, #12]	; (343c <RFM_setHighPower+0x7c>)
    342e:	4798      	blx	r3
}
    3430:	46bd      	mov	sp, r7
    3432:	b002      	add	sp, #8
    3434:	bd80      	pop	{r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	20000186 	.word	0x20000186
    343c:	00004061 	.word	0x00004061
    3440:	00003ff5 	.word	0x00003ff5
    3444:	200000f8 	.word	0x200000f8

00003448 <RFM69>:

void RFM69()
{
    3448:	b580      	push	{r7, lr}
    344a:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    344c:	4b06      	ldr	r3, [pc, #24]	; (3468 <RFM69+0x20>)
    344e:	2201      	movs	r2, #1
    3450:	701a      	strb	r2, [r3, #0]
	_promiscuousMode = false;
    3452:	4b06      	ldr	r3, [pc, #24]	; (346c <RFM69+0x24>)
    3454:	2200      	movs	r2, #0
    3456:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    3458:	4b05      	ldr	r3, [pc, #20]	; (3470 <RFM69+0x28>)
    345a:	221f      	movs	r2, #31
    345c:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    345e:	4b05      	ldr	r3, [pc, #20]	; (3474 <RFM69+0x2c>)
    3460:	2200      	movs	r2, #0
    3462:	701a      	strb	r2, [r3, #0]
}
    3464:	46bd      	mov	sp, r7
    3466:	bd80      	pop	{r7, pc}
    3468:	20000185 	.word	0x20000185
    346c:	2000013f 	.word	0x2000013f
    3470:	200000f8 	.word	0x200000f8
    3474:	20000186 	.word	0x20000186

00003478 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    3478:	b590      	push	{r4, r7, lr}
    347a:	b091      	sub	sp, #68	; 0x44
    347c:	af00      	add	r7, sp, #0
    347e:	1c04      	adds	r4, r0, #0
    3480:	1c08      	adds	r0, r1, #0
    3482:	1c11      	adds	r1, r2, #0
    3484:	1dfb      	adds	r3, r7, #7
    3486:	1c22      	adds	r2, r4, #0
    3488:	701a      	strb	r2, [r3, #0]
    348a:	1dbb      	adds	r3, r7, #6
    348c:	1c02      	adds	r2, r0, #0
    348e:	701a      	strb	r2, [r3, #0]
    3490:	1d7b      	adds	r3, r7, #5
    3492:	1c0a      	adds	r2, r1, #0
    3494:	701a      	strb	r2, [r3, #0]
  RFM69();
    3496:	4bc0      	ldr	r3, [pc, #768]	; (3798 <RFM_initialize+0x320>)
    3498:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    349a:	2310      	movs	r3, #16
    349c:	18fb      	adds	r3, r7, r3
    349e:	2201      	movs	r2, #1
    34a0:	701a      	strb	r2, [r3, #0]
    34a2:	2310      	movs	r3, #16
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	2204      	movs	r2, #4
    34a8:	705a      	strb	r2, [r3, #1]
    34aa:	2310      	movs	r3, #16
    34ac:	18fb      	adds	r3, r7, r3
    34ae:	2202      	movs	r2, #2
    34b0:	709a      	strb	r2, [r3, #2]
    34b2:	2310      	movs	r3, #16
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	2200      	movs	r2, #0
    34b8:	70da      	strb	r2, [r3, #3]
    34ba:	2310      	movs	r3, #16
    34bc:	18fb      	adds	r3, r7, r3
    34be:	2203      	movs	r2, #3
    34c0:	711a      	strb	r2, [r3, #4]
    34c2:	2310      	movs	r3, #16
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	2202      	movs	r2, #2
    34c8:	715a      	strb	r2, [r3, #5]
    34ca:	2310      	movs	r3, #16
    34cc:	18fb      	adds	r3, r7, r3
    34ce:	2204      	movs	r2, #4
    34d0:	719a      	strb	r2, [r3, #6]
    34d2:	2310      	movs	r3, #16
    34d4:	18fb      	adds	r3, r7, r3
    34d6:	2240      	movs	r2, #64	; 0x40
    34d8:	71da      	strb	r2, [r3, #7]
    34da:	2310      	movs	r3, #16
    34dc:	18fb      	adds	r3, r7, r3
    34de:	2205      	movs	r2, #5
    34e0:	721a      	strb	r2, [r3, #8]
    34e2:	2310      	movs	r3, #16
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	2203      	movs	r2, #3
    34e8:	725a      	strb	r2, [r3, #9]
    34ea:	2310      	movs	r3, #16
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	2206      	movs	r2, #6
    34f0:	729a      	strb	r2, [r3, #10]
    34f2:	2310      	movs	r3, #16
    34f4:	18fb      	adds	r3, r7, r3
    34f6:	2233      	movs	r2, #51	; 0x33
    34f8:	72da      	strb	r2, [r3, #11]
    34fa:	2310      	movs	r3, #16
    34fc:	18fb      	adds	r3, r7, r3
    34fe:	2207      	movs	r2, #7
    3500:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    3502:	1dfb      	adds	r3, r7, #7
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	2b1f      	cmp	r3, #31
    3508:	d00d      	beq.n	3526 <RFM_initialize+0xae>
    350a:	1dfb      	adds	r3, r7, #7
    350c:	781b      	ldrb	r3, [r3, #0]
    350e:	2b2b      	cmp	r3, #43	; 0x2b
    3510:	d007      	beq.n	3522 <RFM_initialize+0xaa>
    3512:	1dfb      	adds	r3, r7, #7
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	2b56      	cmp	r3, #86	; 0x56
    3518:	d101      	bne.n	351e <RFM_initialize+0xa6>
    351a:	23d9      	movs	r3, #217	; 0xd9
    351c:	e004      	b.n	3528 <RFM_initialize+0xb0>
    351e:	23e4      	movs	r3, #228	; 0xe4
    3520:	e002      	b.n	3528 <RFM_initialize+0xb0>
    3522:	236c      	movs	r3, #108	; 0x6c
    3524:	e000      	b.n	3528 <RFM_initialize+0xb0>
    3526:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    3528:	2210      	movs	r2, #16
    352a:	18ba      	adds	r2, r7, r2
    352c:	7353      	strb	r3, [r2, #13]
    352e:	2310      	movs	r3, #16
    3530:	18fb      	adds	r3, r7, r3
    3532:	2208      	movs	r2, #8
    3534:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    3536:	1dfb      	adds	r3, r7, #7
    3538:	781b      	ldrb	r3, [r3, #0]
    353a:	2b1f      	cmp	r3, #31
    353c:	d00d      	beq.n	355a <RFM_initialize+0xe2>
    353e:	1dfb      	adds	r3, r7, #7
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	2b2b      	cmp	r3, #43	; 0x2b
    3544:	d007      	beq.n	3556 <RFM_initialize+0xde>
    3546:	1dfb      	adds	r3, r7, #7
    3548:	781b      	ldrb	r3, [r3, #0]
    354a:	2b56      	cmp	r3, #86	; 0x56
    354c:	d101      	bne.n	3552 <RFM_initialize+0xda>
    354e:	2300      	movs	r3, #0
    3550:	e004      	b.n	355c <RFM_initialize+0xe4>
    3552:	23c0      	movs	r3, #192	; 0xc0
    3554:	e002      	b.n	355c <RFM_initialize+0xe4>
    3556:	2340      	movs	r3, #64	; 0x40
    3558:	e000      	b.n	355c <RFM_initialize+0xe4>
    355a:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    355c:	2210      	movs	r2, #16
    355e:	18ba      	adds	r2, r7, r2
    3560:	73d3      	strb	r3, [r2, #15]
    3562:	2310      	movs	r3, #16
    3564:	18fb      	adds	r3, r7, r3
    3566:	2209      	movs	r2, #9
    3568:	741a      	strb	r2, [r3, #16]
    356a:	2310      	movs	r3, #16
    356c:	18fb      	adds	r3, r7, r3
    356e:	2200      	movs	r2, #0
    3570:	745a      	strb	r2, [r3, #17]
    3572:	2310      	movs	r3, #16
    3574:	18fb      	adds	r3, r7, r3
    3576:	2219      	movs	r2, #25
    3578:	749a      	strb	r2, [r3, #18]
    357a:	2310      	movs	r3, #16
    357c:	18fb      	adds	r3, r7, r3
    357e:	2242      	movs	r2, #66	; 0x42
    3580:	74da      	strb	r2, [r3, #19]
    3582:	2310      	movs	r3, #16
    3584:	18fb      	adds	r3, r7, r3
    3586:	2225      	movs	r2, #37	; 0x25
    3588:	751a      	strb	r2, [r3, #20]
    358a:	2310      	movs	r3, #16
    358c:	18fb      	adds	r3, r7, r3
    358e:	2240      	movs	r2, #64	; 0x40
    3590:	755a      	strb	r2, [r3, #21]
    3592:	2310      	movs	r3, #16
    3594:	18fb      	adds	r3, r7, r3
    3596:	2226      	movs	r2, #38	; 0x26
    3598:	759a      	strb	r2, [r3, #22]
    359a:	2310      	movs	r3, #16
    359c:	18fb      	adds	r3, r7, r3
    359e:	2207      	movs	r2, #7
    35a0:	75da      	strb	r2, [r3, #23]
    35a2:	2310      	movs	r3, #16
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	2228      	movs	r2, #40	; 0x28
    35a8:	761a      	strb	r2, [r3, #24]
    35aa:	2310      	movs	r3, #16
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	2210      	movs	r2, #16
    35b0:	765a      	strb	r2, [r3, #25]
    35b2:	2310      	movs	r3, #16
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	2229      	movs	r2, #41	; 0x29
    35b8:	769a      	strb	r2, [r3, #26]
    35ba:	2310      	movs	r3, #16
    35bc:	18fb      	adds	r3, r7, r3
    35be:	22dc      	movs	r2, #220	; 0xdc
    35c0:	76da      	strb	r2, [r3, #27]
    35c2:	2310      	movs	r3, #16
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	222e      	movs	r2, #46	; 0x2e
    35c8:	771a      	strb	r2, [r3, #28]
    35ca:	2310      	movs	r3, #16
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	2288      	movs	r2, #136	; 0x88
    35d0:	775a      	strb	r2, [r3, #29]
    35d2:	2310      	movs	r3, #16
    35d4:	18fb      	adds	r3, r7, r3
    35d6:	222f      	movs	r2, #47	; 0x2f
    35d8:	779a      	strb	r2, [r3, #30]
    35da:	2310      	movs	r3, #16
    35dc:	18fb      	adds	r3, r7, r3
    35de:	222d      	movs	r2, #45	; 0x2d
    35e0:	77da      	strb	r2, [r3, #31]
    35e2:	2310      	movs	r3, #16
    35e4:	18fb      	adds	r3, r7, r3
    35e6:	2220      	movs	r2, #32
    35e8:	2130      	movs	r1, #48	; 0x30
    35ea:	5499      	strb	r1, [r3, r2]
    35ec:	2310      	movs	r3, #16
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	1d7a      	adds	r2, r7, #5
    35f2:	2121      	movs	r1, #33	; 0x21
    35f4:	7812      	ldrb	r2, [r2, #0]
    35f6:	545a      	strb	r2, [r3, r1]
    35f8:	2310      	movs	r3, #16
    35fa:	18fb      	adds	r3, r7, r3
    35fc:	2222      	movs	r2, #34	; 0x22
    35fe:	2137      	movs	r1, #55	; 0x37
    3600:	5499      	strb	r1, [r3, r2]
    3602:	2310      	movs	r3, #16
    3604:	18fb      	adds	r3, r7, r3
    3606:	2223      	movs	r2, #35	; 0x23
    3608:	2190      	movs	r1, #144	; 0x90
    360a:	5499      	strb	r1, [r3, r2]
    360c:	2310      	movs	r3, #16
    360e:	18fb      	adds	r3, r7, r3
    3610:	2224      	movs	r2, #36	; 0x24
    3612:	2138      	movs	r1, #56	; 0x38
    3614:	5499      	strb	r1, [r3, r2]
    3616:	2310      	movs	r3, #16
    3618:	18fb      	adds	r3, r7, r3
    361a:	2225      	movs	r2, #37	; 0x25
    361c:	2142      	movs	r1, #66	; 0x42
    361e:	5499      	strb	r1, [r3, r2]
    3620:	2310      	movs	r3, #16
    3622:	18fb      	adds	r3, r7, r3
    3624:	2226      	movs	r2, #38	; 0x26
    3626:	213c      	movs	r1, #60	; 0x3c
    3628:	5499      	strb	r1, [r3, r2]
    362a:	2310      	movs	r3, #16
    362c:	18fb      	adds	r3, r7, r3
    362e:	2227      	movs	r2, #39	; 0x27
    3630:	218f      	movs	r1, #143	; 0x8f
    3632:	5499      	strb	r1, [r3, r2]
    3634:	2310      	movs	r3, #16
    3636:	18fb      	adds	r3, r7, r3
    3638:	2228      	movs	r2, #40	; 0x28
    363a:	213d      	movs	r1, #61	; 0x3d
    363c:	5499      	strb	r1, [r3, r2]
    363e:	2310      	movs	r3, #16
    3640:	18fb      	adds	r3, r7, r3
    3642:	2229      	movs	r2, #41	; 0x29
    3644:	2112      	movs	r1, #18
    3646:	5499      	strb	r1, [r3, r2]
    3648:	2310      	movs	r3, #16
    364a:	18fb      	adds	r3, r7, r3
    364c:	222a      	movs	r2, #42	; 0x2a
    364e:	216f      	movs	r1, #111	; 0x6f
    3650:	5499      	strb	r1, [r3, r2]
    3652:	2310      	movs	r3, #16
    3654:	18fb      	adds	r3, r7, r3
    3656:	222b      	movs	r2, #43	; 0x2b
    3658:	2130      	movs	r1, #48	; 0x30
    365a:	5499      	strb	r1, [r3, r2]
    365c:	2310      	movs	r3, #16
    365e:	18fb      	adds	r3, r7, r3
    3660:	222c      	movs	r2, #44	; 0x2c
    3662:	21ff      	movs	r1, #255	; 0xff
    3664:	5499      	strb	r1, [r3, r2]
    3666:	2310      	movs	r3, #16
    3668:	18fb      	adds	r3, r7, r3
    366a:	222d      	movs	r2, #45	; 0x2d
    366c:	2100      	movs	r1, #0
    366e:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    3670:	4b4a      	ldr	r3, [pc, #296]	; (379c <RFM_initialize+0x324>)
    3672:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis()
    3674:	4b4a      	ldr	r3, [pc, #296]	; (37a0 <RFM_initialize+0x328>)
    3676:	4798      	blx	r3

  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    3678:	4b4a      	ldr	r3, [pc, #296]	; (37a4 <RFM_initialize+0x32c>)
    367a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    367c:	230f      	movs	r3, #15
    367e:	18fb      	adds	r3, r7, r3
    3680:	2232      	movs	r2, #50	; 0x32
    3682:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    3684:	202f      	movs	r0, #47	; 0x2f
    3686:	21aa      	movs	r1, #170	; 0xaa
    3688:	4b47      	ldr	r3, [pc, #284]	; (37a8 <RFM_initialize+0x330>)
    368a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    368c:	202f      	movs	r0, #47	; 0x2f
    368e:	4b47      	ldr	r3, [pc, #284]	; (37ac <RFM_initialize+0x334>)
    3690:	4798      	blx	r3
    3692:	1e03      	subs	r3, r0, #0
    3694:	2baa      	cmp	r3, #170	; 0xaa
    3696:	d008      	beq.n	36aa <RFM_initialize+0x232>
    3698:	4b45      	ldr	r3, [pc, #276]	; (37b0 <RFM_initialize+0x338>)
    369a:	4798      	blx	r3
    369c:	1c02      	adds	r2, r0, #0
    369e:	230f      	movs	r3, #15
    36a0:	18fb      	adds	r3, r7, r3
    36a2:	781b      	ldrb	r3, [r3, #0]
    36a4:	b2db      	uxtb	r3, r3
    36a6:	429a      	cmp	r2, r3
    36a8:	d3ec      	bcc.n	3684 <RFM_initialize+0x20c>
  
  reset_millis(); //start = millis(); // CHANGE // 
    36aa:	4b3e      	ldr	r3, [pc, #248]	; (37a4 <RFM_initialize+0x32c>)
    36ac:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    36ae:	202f      	movs	r0, #47	; 0x2f
    36b0:	2155      	movs	r1, #85	; 0x55
    36b2:	4b3d      	ldr	r3, [pc, #244]	; (37a8 <RFM_initialize+0x330>)
    36b4:	4798      	blx	r3
    36b6:	202f      	movs	r0, #47	; 0x2f
    36b8:	4b3c      	ldr	r3, [pc, #240]	; (37ac <RFM_initialize+0x334>)
    36ba:	4798      	blx	r3
    36bc:	1e03      	subs	r3, r0, #0
    36be:	2b55      	cmp	r3, #85	; 0x55
    36c0:	d008      	beq.n	36d4 <RFM_initialize+0x25c>
    36c2:	4b3b      	ldr	r3, [pc, #236]	; (37b0 <RFM_initialize+0x338>)
    36c4:	4798      	blx	r3
    36c6:	1c02      	adds	r2, r0, #0
    36c8:	230f      	movs	r3, #15
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	781b      	ldrb	r3, [r3, #0]
    36ce:	b2db      	uxtb	r3, r3
    36d0:	429a      	cmp	r2, r3
    36d2:	d3ec      	bcc.n	36ae <RFM_initialize+0x236>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    36d4:	233f      	movs	r3, #63	; 0x3f
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	2200      	movs	r2, #0
    36da:	701a      	strb	r2, [r3, #0]
    36dc:	e01a      	b.n	3714 <RFM_initialize+0x29c>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    36de:	233f      	movs	r3, #63	; 0x3f
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	781a      	ldrb	r2, [r3, #0]
    36e4:	2310      	movs	r3, #16
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	0052      	lsls	r2, r2, #1
    36ea:	5cd1      	ldrb	r1, [r2, r3]
    36ec:	233f      	movs	r3, #63	; 0x3f
    36ee:	18fb      	adds	r3, r7, r3
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	2210      	movs	r2, #16
    36f4:	18ba      	adds	r2, r7, r2
    36f6:	005b      	lsls	r3, r3, #1
    36f8:	18d3      	adds	r3, r2, r3
    36fa:	3301      	adds	r3, #1
    36fc:	781b      	ldrb	r3, [r3, #0]
    36fe:	1c08      	adds	r0, r1, #0
    3700:	1c19      	adds	r1, r3, #0
    3702:	4b29      	ldr	r3, [pc, #164]	; (37a8 <RFM_initialize+0x330>)
    3704:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    3706:	233f      	movs	r3, #63	; 0x3f
    3708:	18fb      	adds	r3, r7, r3
    370a:	781a      	ldrb	r2, [r3, #0]
    370c:	233f      	movs	r3, #63	; 0x3f
    370e:	18fb      	adds	r3, r7, r3
    3710:	3201      	adds	r2, #1
    3712:	701a      	strb	r2, [r3, #0]
    3714:	233f      	movs	r3, #63	; 0x3f
    3716:	18fb      	adds	r3, r7, r3
    3718:	781a      	ldrb	r2, [r3, #0]
    371a:	2310      	movs	r3, #16
    371c:	18fb      	adds	r3, r7, r3
    371e:	0052      	lsls	r2, r2, #1
    3720:	5cd3      	ldrb	r3, [r2, r3]
    3722:	2bff      	cmp	r3, #255	; 0xff
    3724:	d1db      	bne.n	36de <RFM_initialize+0x266>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    3726:	2000      	movs	r0, #0
    3728:	4b22      	ldr	r3, [pc, #136]	; (37b4 <RFM_initialize+0x33c>)
    372a:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    372c:	4b22      	ldr	r3, [pc, #136]	; (37b8 <RFM_initialize+0x340>)
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	b2db      	uxtb	r3, r3
    3732:	1c18      	adds	r0, r3, #0
    3734:	4b21      	ldr	r3, [pc, #132]	; (37bc <RFM_initialize+0x344>)
    3736:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    3738:	2001      	movs	r0, #1
    373a:	4b21      	ldr	r3, [pc, #132]	; (37c0 <RFM_initialize+0x348>)
    373c:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    373e:	4b19      	ldr	r3, [pc, #100]	; (37a4 <RFM_initialize+0x32c>)
    3740:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	2027      	movs	r0, #39	; 0x27
    3746:	4b19      	ldr	r3, [pc, #100]	; (37ac <RFM_initialize+0x334>)
    3748:	4798      	blx	r3
    374a:	1c03      	adds	r3, r0, #0
    374c:	b2db      	uxtb	r3, r3
    374e:	b25b      	sxtb	r3, r3
    3750:	2b00      	cmp	r3, #0
    3752:	db08      	blt.n	3766 <RFM_initialize+0x2ee>
    3754:	4b16      	ldr	r3, [pc, #88]	; (37b0 <RFM_initialize+0x338>)
    3756:	4798      	blx	r3
    3758:	1c02      	adds	r2, r0, #0
    375a:	230f      	movs	r3, #15
    375c:	18fb      	adds	r3, r7, r3
    375e:	781b      	ldrb	r3, [r3, #0]
    3760:	b2db      	uxtb	r3, r3
    3762:	429a      	cmp	r2, r3
    3764:	d3ee      	bcc.n	3744 <RFM_initialize+0x2cc>
  if (millis() >= timeout) // CHANGE //
    3766:	4b12      	ldr	r3, [pc, #72]	; (37b0 <RFM_initialize+0x338>)
    3768:	4798      	blx	r3
    376a:	1c02      	adds	r2, r0, #0
    376c:	230f      	movs	r3, #15
    376e:	18fb      	adds	r3, r7, r3
    3770:	781b      	ldrb	r3, [r3, #0]
    3772:	b2db      	uxtb	r3, r3
    3774:	429a      	cmp	r2, r3
    3776:	d301      	bcc.n	377c <RFM_initialize+0x304>
    return false;
    3778:	2300      	movs	r3, #0
    377a:	e009      	b.n	3790 <RFM_initialize+0x318>
  _inISR = false;
    377c:	4b11      	ldr	r3, [pc, #68]	; (37c4 <RFM_initialize+0x34c>)
    377e:	2200      	movs	r2, #0
    3780:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    3782:	4b11      	ldr	r3, [pc, #68]	; (37c8 <RFM_initialize+0x350>)
    3784:	4798      	blx	r3

  _address = nodeID;
    3786:	4b11      	ldr	r3, [pc, #68]	; (37cc <RFM_initialize+0x354>)
    3788:	1dba      	adds	r2, r7, #6
    378a:	7812      	ldrb	r2, [r2, #0]
    378c:	701a      	strb	r2, [r3, #0]
  return true;
    378e:	2301      	movs	r3, #1
}
    3790:	1c18      	adds	r0, r3, #0
    3792:	46bd      	mov	sp, r7
    3794:	b011      	add	sp, #68	; 0x44
    3796:	bd90      	pop	{r4, r7, pc}
    3798:	00003449 	.word	0x00003449
    379c:	000030ad 	.word	0x000030ad
    37a0:	00003171 	.word	0x00003171
    37a4:	000031d5 	.word	0x000031d5
    37a8:	00004061 	.word	0x00004061
    37ac:	00003ff5 	.word	0x00003ff5
    37b0:	000031fd 	.word	0x000031fd
    37b4:	00003ef5 	.word	0x00003ef5
    37b8:	20000186 	.word	0x20000186
    37bc:	000033c1 	.word	0x000033c1
    37c0:	000037d1 	.word	0x000037d1
    37c4:	200000f9 	.word	0x200000f9
    37c8:	00003085 	.word	0x00003085
    37cc:	2000013c 	.word	0x2000013c

000037d0 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	b082      	sub	sp, #8
    37d4:	af00      	add	r7, sp, #0
    37d6:	1c02      	adds	r2, r0, #0
    37d8:	1dfb      	adds	r3, r7, #7
    37da:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    37dc:	4b4c      	ldr	r3, [pc, #304]	; (3910 <setMode+0x140>)
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	b2db      	uxtb	r3, r3
    37e2:	1dfa      	adds	r2, r7, #7
    37e4:	7812      	ldrb	r2, [r2, #0]
    37e6:	429a      	cmp	r2, r3
    37e8:	d100      	bne.n	37ec <setMode+0x1c>
    return;
    37ea:	e08d      	b.n	3908 <setMode+0x138>

  switch (newMode) {
    37ec:	1dfb      	adds	r3, r7, #7
    37ee:	781b      	ldrb	r3, [r3, #0]
    37f0:	2b04      	cmp	r3, #4
    37f2:	d900      	bls.n	37f6 <setMode+0x26>
    37f4:	e087      	b.n	3906 <setMode+0x136>
    37f6:	009a      	lsls	r2, r3, #2
    37f8:	4b46      	ldr	r3, [pc, #280]	; (3914 <setMode+0x144>)
    37fa:	18d3      	adds	r3, r2, r3
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    3800:	2001      	movs	r0, #1
    3802:	4b45      	ldr	r3, [pc, #276]	; (3918 <setMode+0x148>)
    3804:	4798      	blx	r3
    3806:	1c03      	adds	r3, r0, #0
    3808:	b2db      	uxtb	r3, r3
    380a:	1c1a      	adds	r2, r3, #0
    380c:	231c      	movs	r3, #28
    380e:	439a      	bics	r2, r3
    3810:	1c13      	adds	r3, r2, #0
    3812:	b2db      	uxtb	r3, r3
    3814:	1c1a      	adds	r2, r3, #0
    3816:	230c      	movs	r3, #12
    3818:	4313      	orrs	r3, r2
    381a:	b2db      	uxtb	r3, r3
    381c:	b2db      	uxtb	r3, r3
    381e:	2001      	movs	r0, #1
    3820:	1c19      	adds	r1, r3, #0
    3822:	4b3e      	ldr	r3, [pc, #248]	; (391c <setMode+0x14c>)
    3824:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    3826:	4b3e      	ldr	r3, [pc, #248]	; (3920 <setMode+0x150>)
    3828:	781b      	ldrb	r3, [r3, #0]
    382a:	b2db      	uxtb	r3, r3
    382c:	2b00      	cmp	r3, #0
    382e:	d003      	beq.n	3838 <setMode+0x68>
    3830:	2001      	movs	r0, #1
    3832:	4b3c      	ldr	r3, [pc, #240]	; (3924 <setMode+0x154>)
    3834:	4798      	blx	r3
      break;
    3836:	e053      	b.n	38e0 <setMode+0x110>
    3838:	e052      	b.n	38e0 <setMode+0x110>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    383a:	2001      	movs	r0, #1
    383c:	4b36      	ldr	r3, [pc, #216]	; (3918 <setMode+0x148>)
    383e:	4798      	blx	r3
    3840:	1c03      	adds	r3, r0, #0
    3842:	b2db      	uxtb	r3, r3
    3844:	1c1a      	adds	r2, r3, #0
    3846:	231c      	movs	r3, #28
    3848:	439a      	bics	r2, r3
    384a:	1c13      	adds	r3, r2, #0
    384c:	b2db      	uxtb	r3, r3
    384e:	1c1a      	adds	r2, r3, #0
    3850:	2310      	movs	r3, #16
    3852:	4313      	orrs	r3, r2
    3854:	b2db      	uxtb	r3, r3
    3856:	b2db      	uxtb	r3, r3
    3858:	2001      	movs	r0, #1
    385a:	1c19      	adds	r1, r3, #0
    385c:	4b2f      	ldr	r3, [pc, #188]	; (391c <setMode+0x14c>)
    385e:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    3860:	4b2f      	ldr	r3, [pc, #188]	; (3920 <setMode+0x150>)
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	b2db      	uxtb	r3, r3
    3866:	2b00      	cmp	r3, #0
    3868:	d003      	beq.n	3872 <setMode+0xa2>
    386a:	2000      	movs	r0, #0
    386c:	4b2d      	ldr	r3, [pc, #180]	; (3924 <setMode+0x154>)
    386e:	4798      	blx	r3
      break;
    3870:	e036      	b.n	38e0 <setMode+0x110>
    3872:	e035      	b.n	38e0 <setMode+0x110>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    3874:	2001      	movs	r0, #1
    3876:	4b28      	ldr	r3, [pc, #160]	; (3918 <setMode+0x148>)
    3878:	4798      	blx	r3
    387a:	1c03      	adds	r3, r0, #0
    387c:	b2db      	uxtb	r3, r3
    387e:	1c1a      	adds	r2, r3, #0
    3880:	231c      	movs	r3, #28
    3882:	439a      	bics	r2, r3
    3884:	1c13      	adds	r3, r2, #0
    3886:	b2db      	uxtb	r3, r3
    3888:	1c1a      	adds	r2, r3, #0
    388a:	2308      	movs	r3, #8
    388c:	4313      	orrs	r3, r2
    388e:	b2db      	uxtb	r3, r3
    3890:	b2db      	uxtb	r3, r3
    3892:	2001      	movs	r0, #1
    3894:	1c19      	adds	r1, r3, #0
    3896:	4b21      	ldr	r3, [pc, #132]	; (391c <setMode+0x14c>)
    3898:	4798      	blx	r3
      break;
    389a:	e021      	b.n	38e0 <setMode+0x110>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    389c:	2001      	movs	r0, #1
    389e:	4b1e      	ldr	r3, [pc, #120]	; (3918 <setMode+0x148>)
    38a0:	4798      	blx	r3
    38a2:	1c03      	adds	r3, r0, #0
    38a4:	b2db      	uxtb	r3, r3
    38a6:	1c1a      	adds	r2, r3, #0
    38a8:	231c      	movs	r3, #28
    38aa:	439a      	bics	r2, r3
    38ac:	1c13      	adds	r3, r2, #0
    38ae:	b2db      	uxtb	r3, r3
    38b0:	1c1a      	adds	r2, r3, #0
    38b2:	2304      	movs	r3, #4
    38b4:	4313      	orrs	r3, r2
    38b6:	b2db      	uxtb	r3, r3
    38b8:	b2db      	uxtb	r3, r3
    38ba:	2001      	movs	r0, #1
    38bc:	1c19      	adds	r1, r3, #0
    38be:	4b17      	ldr	r3, [pc, #92]	; (391c <setMode+0x14c>)
    38c0:	4798      	blx	r3
      break;
    38c2:	e00d      	b.n	38e0 <setMode+0x110>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    38c4:	2001      	movs	r0, #1
    38c6:	4b14      	ldr	r3, [pc, #80]	; (3918 <setMode+0x148>)
    38c8:	4798      	blx	r3
    38ca:	1c03      	adds	r3, r0, #0
    38cc:	1c1a      	adds	r2, r3, #0
    38ce:	231c      	movs	r3, #28
    38d0:	439a      	bics	r2, r3
    38d2:	1c13      	adds	r3, r2, #0
    38d4:	b2db      	uxtb	r3, r3
    38d6:	2001      	movs	r0, #1
    38d8:	1c19      	adds	r1, r3, #0
    38da:	4b10      	ldr	r3, [pc, #64]	; (391c <setMode+0x14c>)
    38dc:	4798      	blx	r3
      break;
    38de:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    38e0:	46c0      	nop			; (mov r8, r8)
    38e2:	4b0b      	ldr	r3, [pc, #44]	; (3910 <setMode+0x140>)
    38e4:	781b      	ldrb	r3, [r3, #0]
    38e6:	b2db      	uxtb	r3, r3
    38e8:	2b00      	cmp	r3, #0
    38ea:	d107      	bne.n	38fc <setMode+0x12c>
    38ec:	2027      	movs	r0, #39	; 0x27
    38ee:	4b0a      	ldr	r3, [pc, #40]	; (3918 <setMode+0x148>)
    38f0:	4798      	blx	r3
    38f2:	1c03      	adds	r3, r0, #0
    38f4:	b2db      	uxtb	r3, r3
    38f6:	b25b      	sxtb	r3, r3
    38f8:	2b00      	cmp	r3, #0
    38fa:	daf2      	bge.n	38e2 <setMode+0x112>

  _mode = newMode;
    38fc:	4b04      	ldr	r3, [pc, #16]	; (3910 <setMode+0x140>)
    38fe:	1dfa      	adds	r2, r7, #7
    3900:	7812      	ldrb	r2, [r2, #0]
    3902:	701a      	strb	r2, [r3, #0]
    3904:	e000      	b.n	3908 <setMode+0x138>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    3906:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    3908:	46bd      	mov	sp, r7
    390a:	b002      	add	sp, #8
    390c:	bd80      	pop	{r7, pc}
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	20000185 	.word	0x20000185
    3914:	000046ac 	.word	0x000046ac
    3918:	00003ff5 	.word	0x00003ff5
    391c:	00004061 	.word	0x00004061
    3920:	20000186 	.word	0x20000186
    3924:	0000411d 	.word	0x0000411d

00003928 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    3928:	b580      	push	{r7, lr}
    392a:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    392c:	4b0b      	ldr	r3, [pc, #44]	; (395c <canSend+0x34>)
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	b2db      	uxtb	r3, r3
    3932:	2b03      	cmp	r3, #3
    3934:	d10e      	bne.n	3954 <canSend+0x2c>
    3936:	4b0a      	ldr	r3, [pc, #40]	; (3960 <canSend+0x38>)
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	b2db      	uxtb	r3, r3
    393c:	2b00      	cmp	r3, #0
    393e:	d109      	bne.n	3954 <canSend+0x2c>
    3940:	4b08      	ldr	r3, [pc, #32]	; (3964 <canSend+0x3c>)
    3942:	4798      	blx	r3
    3944:	1c03      	adds	r3, r0, #0
    3946:	335a      	adds	r3, #90	; 0x5a
    3948:	da04      	bge.n	3954 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    394a:	2001      	movs	r0, #1
    394c:	4b06      	ldr	r3, [pc, #24]	; (3968 <canSend+0x40>)
    394e:	4798      	blx	r3
    return true;
    3950:	2301      	movs	r3, #1
    3952:	e000      	b.n	3956 <canSend+0x2e>
  }
  return false;
    3954:	2300      	movs	r3, #0
}
    3956:	1c18      	adds	r0, r3, #0
    3958:	46bd      	mov	sp, r7
    395a:	bd80      	pop	{r7, pc}
    395c:	20000185 	.word	0x20000185
    3960:	20000182 	.word	0x20000182
    3964:	00003fb1 	.word	0x00003fb1
    3968:	000037d1 	.word	0x000037d1

0000396c <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    396c:	b590      	push	{r4, r7, lr}
    396e:	b085      	sub	sp, #20
    3970:	af02      	add	r7, sp, #8
    3972:	1c04      	adds	r4, r0, #0
    3974:	6039      	str	r1, [r7, #0]
    3976:	1c10      	adds	r0, r2, #0
    3978:	1c19      	adds	r1, r3, #0
    397a:	1dfb      	adds	r3, r7, #7
    397c:	1c22      	adds	r2, r4, #0
    397e:	701a      	strb	r2, [r3, #0]
    3980:	1dbb      	adds	r3, r7, #6
    3982:	1c02      	adds	r2, r0, #0
    3984:	701a      	strb	r2, [r3, #0]
    3986:	1d7b      	adds	r3, r7, #5
    3988:	1c0a      	adds	r2, r1, #0
    398a:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    398c:	203d      	movs	r0, #61	; 0x3d
    398e:	4b17      	ldr	r3, [pc, #92]	; (39ec <RFM_send+0x80>)
    3990:	4798      	blx	r3
    3992:	1c03      	adds	r3, r0, #0
    3994:	1c1a      	adds	r2, r3, #0
    3996:	2304      	movs	r3, #4
    3998:	4313      	orrs	r3, r2
    399a:	b2db      	uxtb	r3, r3
    399c:	203d      	movs	r0, #61	; 0x3d
    399e:	1c19      	adds	r1, r3, #0
    39a0:	4b13      	ldr	r3, [pc, #76]	; (39f0 <RFM_send+0x84>)
    39a2:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    39a4:	4b13      	ldr	r3, [pc, #76]	; (39f4 <RFM_send+0x88>)
    39a6:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    39a8:	e001      	b.n	39ae <RFM_send+0x42>
    39aa:	4b13      	ldr	r3, [pc, #76]	; (39f8 <RFM_send+0x8c>)
    39ac:	4798      	blx	r3
    39ae:	4b13      	ldr	r3, [pc, #76]	; (39fc <RFM_send+0x90>)
    39b0:	4798      	blx	r3
    39b2:	1c03      	adds	r3, r0, #0
    39b4:	1c1a      	adds	r2, r3, #0
    39b6:	2301      	movs	r3, #1
    39b8:	4053      	eors	r3, r2
    39ba:	b2db      	uxtb	r3, r3
    39bc:	2b00      	cmp	r3, #0
    39be:	d005      	beq.n	39cc <RFM_send+0x60>
    39c0:	4b0f      	ldr	r3, [pc, #60]	; (3a00 <RFM_send+0x94>)
    39c2:	4798      	blx	r3
    39c4:	1e02      	subs	r2, r0, #0
    39c6:	4b0f      	ldr	r3, [pc, #60]	; (3a04 <RFM_send+0x98>)
    39c8:	429a      	cmp	r2, r3
    39ca:	d9ee      	bls.n	39aa <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    39cc:	1dfb      	adds	r3, r7, #7
    39ce:	7818      	ldrb	r0, [r3, #0]
    39d0:	6839      	ldr	r1, [r7, #0]
    39d2:	1dbb      	adds	r3, r7, #6
    39d4:	781a      	ldrb	r2, [r3, #0]
    39d6:	1d7b      	adds	r3, r7, #5
    39d8:	781c      	ldrb	r4, [r3, #0]
    39da:	2300      	movs	r3, #0
    39dc:	9300      	str	r3, [sp, #0]
    39de:	1c23      	adds	r3, r4, #0
    39e0:	4c09      	ldr	r4, [pc, #36]	; (3a08 <RFM_send+0x9c>)
    39e2:	47a0      	blx	r4
}
    39e4:	46bd      	mov	sp, r7
    39e6:	b003      	add	sp, #12
    39e8:	bd90      	pop	{r4, r7, pc}
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	00003ff5 	.word	0x00003ff5
    39f0:	00004061 	.word	0x00004061
    39f4:	000031d5 	.word	0x000031d5
    39f8:	00003e99 	.word	0x00003e99
    39fc:	00003929 	.word	0x00003929
    3a00:	000031fd 	.word	0x000031fd
    3a04:	000003e7 	.word	0x000003e7
    3a08:	00003229 	.word	0x00003229

00003a0c <RFM_sendWithRetry>:
// and it handles all the ACK requesting/retrying for you :)
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
    3a0c:	b590      	push	{r4, r7, lr}
    3a0e:	b085      	sub	sp, #20
    3a10:	af00      	add	r7, sp, #0
    3a12:	1c04      	adds	r4, r0, #0
    3a14:	6039      	str	r1, [r7, #0]
    3a16:	1c10      	adds	r0, r2, #0
    3a18:	1c19      	adds	r1, r3, #0
    3a1a:	1dfb      	adds	r3, r7, #7
    3a1c:	1c22      	adds	r2, r4, #0
    3a1e:	701a      	strb	r2, [r3, #0]
    3a20:	1dbb      	adds	r3, r7, #6
    3a22:	1c02      	adds	r2, r0, #0
    3a24:	701a      	strb	r2, [r3, #0]
    3a26:	1d7b      	adds	r3, r7, #5
    3a28:	1c0a      	adds	r2, r1, #0
    3a2a:	701a      	strb	r2, [r3, #0]
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    3a2c:	230f      	movs	r3, #15
    3a2e:	18fb      	adds	r3, r7, r3
    3a30:	2200      	movs	r2, #0
    3a32:	701a      	strb	r2, [r3, #0]
    3a34:	e025      	b.n	3a82 <RFM_sendWithRetry+0x76>
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    3a36:	1dfb      	adds	r3, r7, #7
    3a38:	7819      	ldrb	r1, [r3, #0]
    3a3a:	683a      	ldr	r2, [r7, #0]
    3a3c:	1dbb      	adds	r3, r7, #6
    3a3e:	781b      	ldrb	r3, [r3, #0]
    3a40:	1c08      	adds	r0, r1, #0
    3a42:	1c11      	adds	r1, r2, #0
    3a44:	1c1a      	adds	r2, r3, #0
    3a46:	2301      	movs	r3, #1
    3a48:	4c14      	ldr	r4, [pc, #80]	; (3a9c <RFM_sendWithRetry+0x90>)
    3a4a:	47a0      	blx	r4
    reset_millis(); //sentTime = millis(); // CHANGE //
    3a4c:	4b14      	ldr	r3, [pc, #80]	; (3aa0 <RFM_sendWithRetry+0x94>)
    3a4e:	4798      	blx	r3
    while (millis() < retryWaitTime) // CHANGE //
    3a50:	e008      	b.n	3a64 <RFM_sendWithRetry+0x58>
    {
      if (ACKReceived(toAddress))
    3a52:	1dfb      	adds	r3, r7, #7
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	1c18      	adds	r0, r3, #0
    3a58:	4b12      	ldr	r3, [pc, #72]	; (3aa4 <RFM_sendWithRetry+0x98>)
    3a5a:	4798      	blx	r3
    3a5c:	1e03      	subs	r3, r0, #0
    3a5e:	d001      	beq.n	3a64 <RFM_sendWithRetry+0x58>
      {
        return true;
    3a60:	2301      	movs	r3, #1
    3a62:	e016      	b.n	3a92 <RFM_sendWithRetry+0x86>
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    reset_millis(); //sentTime = millis(); // CHANGE //
    while (millis() < retryWaitTime) // CHANGE //
    3a64:	4b10      	ldr	r3, [pc, #64]	; (3aa8 <RFM_sendWithRetry+0x9c>)
    3a66:	4798      	blx	r3
    3a68:	1c02      	adds	r2, r0, #0
    3a6a:	2320      	movs	r3, #32
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	429a      	cmp	r2, r3
    3a72:	d3ee      	bcc.n	3a52 <RFM_sendWithRetry+0x46>
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    3a74:	230f      	movs	r3, #15
    3a76:	18fb      	adds	r3, r7, r3
    3a78:	781a      	ldrb	r2, [r3, #0]
    3a7a:	230f      	movs	r3, #15
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	3201      	adds	r2, #1
    3a80:	701a      	strb	r2, [r3, #0]
    3a82:	230f      	movs	r3, #15
    3a84:	18fa      	adds	r2, r7, r3
    3a86:	1d7b      	adds	r3, r7, #5
    3a88:	7812      	ldrb	r2, [r2, #0]
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	429a      	cmp	r2, r3
    3a8e:	d9d2      	bls.n	3a36 <RFM_sendWithRetry+0x2a>
      {
        return true;
      }
    }
  }
  return false;
    3a90:	2300      	movs	r3, #0
}
    3a92:	1c18      	adds	r0, r3, #0
    3a94:	46bd      	mov	sp, r7
    3a96:	b005      	add	sp, #20
    3a98:	bd90      	pop	{r4, r7, pc}
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	0000396d 	.word	0x0000396d
    3aa0:	000031d5 	.word	0x000031d5
    3aa4:	00003aad 	.word	0x00003aad
    3aa8:	000031fd 	.word	0x000031fd

00003aac <ACKReceived>:

// should be polled immediately after sending a packet with ACK request
bool ACKReceived(uint8_t fromNodeID) {
    3aac:	b580      	push	{r7, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	1c02      	adds	r2, r0, #0
    3ab4:	1dfb      	adds	r3, r7, #7
    3ab6:	701a      	strb	r2, [r3, #0]
  if (RFM_receiveDone())
    3ab8:	4b10      	ldr	r3, [pc, #64]	; (3afc <ACKReceived+0x50>)
    3aba:	4798      	blx	r3
    3abc:	1e03      	subs	r3, r0, #0
    3abe:	d017      	beq.n	3af0 <ACKReceived+0x44>
    return (RFM_SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
    3ac0:	4b0f      	ldr	r3, [pc, #60]	; (3b00 <ACKReceived+0x54>)
    3ac2:	781b      	ldrb	r3, [r3, #0]
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	1dfa      	adds	r2, r7, #7
    3ac8:	7812      	ldrb	r2, [r2, #0]
    3aca:	429a      	cmp	r2, r3
    3acc:	d003      	beq.n	3ad6 <ACKReceived+0x2a>
    3ace:	1dfb      	adds	r3, r7, #7
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	2bff      	cmp	r3, #255	; 0xff
    3ad4:	d106      	bne.n	3ae4 <ACKReceived+0x38>
    3ad6:	4b0b      	ldr	r3, [pc, #44]	; (3b04 <ACKReceived+0x58>)
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	b2db      	uxtb	r3, r3
    3adc:	2b00      	cmp	r3, #0
    3ade:	d001      	beq.n	3ae4 <ACKReceived+0x38>
    3ae0:	2301      	movs	r3, #1
    3ae2:	e000      	b.n	3ae6 <ACKReceived+0x3a>
    3ae4:	2300      	movs	r3, #0
    3ae6:	1c1a      	adds	r2, r3, #0
    3ae8:	2301      	movs	r3, #1
    3aea:	4013      	ands	r3, r2
    3aec:	b2db      	uxtb	r3, r3
    3aee:	e000      	b.n	3af2 <ACKReceived+0x46>
  return false;
    3af0:	2300      	movs	r3, #0
}
    3af2:	1c18      	adds	r0, r3, #0
    3af4:	46bd      	mov	sp, r7
    3af6:	b002      	add	sp, #8
    3af8:	bd80      	pop	{r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	00003e99 	.word	0x00003e99
    3b00:	200000dd 	.word	0x200000dd
    3b04:	2000013d 	.word	0x2000013d

00003b08 <RFM_ACKRequested>:

// check whether an ACK was requested in the last received packet (non-broadcasted packet)
bool RFM_ACKRequested() {
    3b08:	b580      	push	{r7, lr}
    3b0a:	af00      	add	r7, sp, #0
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
    3b0c:	4b09      	ldr	r3, [pc, #36]	; (3b34 <RFM_ACKRequested+0x2c>)
    3b0e:	781b      	ldrb	r3, [r3, #0]
    3b10:	b2db      	uxtb	r3, r3
    3b12:	2b00      	cmp	r3, #0
    3b14:	d006      	beq.n	3b24 <RFM_ACKRequested+0x1c>
    3b16:	4b08      	ldr	r3, [pc, #32]	; (3b38 <RFM_ACKRequested+0x30>)
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	b2db      	uxtb	r3, r3
    3b1c:	2bff      	cmp	r3, #255	; 0xff
    3b1e:	d001      	beq.n	3b24 <RFM_ACKRequested+0x1c>
    3b20:	2301      	movs	r3, #1
    3b22:	e000      	b.n	3b26 <RFM_ACKRequested+0x1e>
    3b24:	2300      	movs	r3, #0
    3b26:	1c1a      	adds	r2, r3, #0
    3b28:	2301      	movs	r3, #1
    3b2a:	4013      	ands	r3, r2
    3b2c:	b2db      	uxtb	r3, r3
}
    3b2e:	1c18      	adds	r0, r3, #0
    3b30:	46bd      	mov	sp, r7
    3b32:	bd80      	pop	{r7, pc}
    3b34:	20000183 	.word	0x20000183
    3b38:	20000184 	.word	0x20000184

00003b3c <RFM_sendACK>:

// should be called immediately after reception in case sender wants ACK
void RFM_sendACK(const void* buffer, uint8_t bufferSize) {
    3b3c:	b590      	push	{r4, r7, lr}
    3b3e:	b087      	sub	sp, #28
    3b40:	af02      	add	r7, sp, #8
    3b42:	6078      	str	r0, [r7, #4]
    3b44:	1c0a      	adds	r2, r1, #0
    3b46:	1cfb      	adds	r3, r7, #3
    3b48:	701a      	strb	r2, [r3, #0]
  ACK_REQUESTED = 0;   // TWS added to make sure we don't end up in a timing race and infinite loop sending Acks
    3b4a:	4b25      	ldr	r3, [pc, #148]	; (3be0 <RFM_sendACK+0xa4>)
    3b4c:	2200      	movs	r2, #0
    3b4e:	701a      	strb	r2, [r3, #0]
  volatile uint8_t sender = RFM_SENDERID;
    3b50:	4b24      	ldr	r3, [pc, #144]	; (3be4 <RFM_sendACK+0xa8>)
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	b2da      	uxtb	r2, r3
    3b56:	230f      	movs	r3, #15
    3b58:	18fb      	adds	r3, r7, r3
    3b5a:	701a      	strb	r2, [r3, #0]
  volatile int16_t _RSSI = RFM_RSSI; // save payload received RSSI value
    3b5c:	4b22      	ldr	r3, [pc, #136]	; (3be8 <RFM_sendACK+0xac>)
    3b5e:	881b      	ldrh	r3, [r3, #0]
    3b60:	b29a      	uxth	r2, r3
    3b62:	230c      	movs	r3, #12
    3b64:	18fb      	adds	r3, r7, r3
    3b66:	801a      	strh	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    3b68:	203d      	movs	r0, #61	; 0x3d
    3b6a:	4b20      	ldr	r3, [pc, #128]	; (3bec <RFM_sendACK+0xb0>)
    3b6c:	4798      	blx	r3
    3b6e:	1c03      	adds	r3, r0, #0
    3b70:	1c1a      	adds	r2, r3, #0
    3b72:	2304      	movs	r3, #4
    3b74:	4313      	orrs	r3, r2
    3b76:	b2db      	uxtb	r3, r3
    3b78:	203d      	movs	r0, #61	; 0x3d
    3b7a:	1c19      	adds	r1, r3, #0
    3b7c:	4b1c      	ldr	r3, [pc, #112]	; (3bf0 <RFM_sendACK+0xb4>)
    3b7e:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    3b80:	4b1c      	ldr	r3, [pc, #112]	; (3bf4 <RFM_sendACK+0xb8>)
    3b82:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    3b84:	e001      	b.n	3b8a <RFM_sendACK+0x4e>
    3b86:	4b1c      	ldr	r3, [pc, #112]	; (3bf8 <RFM_sendACK+0xbc>)
    3b88:	4798      	blx	r3
    3b8a:	4b1c      	ldr	r3, [pc, #112]	; (3bfc <RFM_sendACK+0xc0>)
    3b8c:	4798      	blx	r3
    3b8e:	1c03      	adds	r3, r0, #0
    3b90:	1c1a      	adds	r2, r3, #0
    3b92:	2301      	movs	r3, #1
    3b94:	4053      	eors	r3, r2
    3b96:	b2db      	uxtb	r3, r3
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d005      	beq.n	3ba8 <RFM_sendACK+0x6c>
    3b9c:	4b18      	ldr	r3, [pc, #96]	; (3c00 <RFM_sendACK+0xc4>)
    3b9e:	4798      	blx	r3
    3ba0:	1e02      	subs	r2, r0, #0
    3ba2:	4b18      	ldr	r3, [pc, #96]	; (3c04 <RFM_sendACK+0xc8>)
    3ba4:	429a      	cmp	r2, r3
    3ba6:	d9ee      	bls.n	3b86 <RFM_sendACK+0x4a>
  RFM_SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by RFM_receiveDone()
    3ba8:	230f      	movs	r3, #15
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	b2da      	uxtb	r2, r3
    3bb0:	4b0c      	ldr	r3, [pc, #48]	; (3be4 <RFM_sendACK+0xa8>)
    3bb2:	701a      	strb	r2, [r3, #0]
  sendFrame(sender, buffer, bufferSize, false, true);
    3bb4:	230f      	movs	r3, #15
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	b2d8      	uxtb	r0, r3
    3bbc:	6879      	ldr	r1, [r7, #4]
    3bbe:	1cfb      	adds	r3, r7, #3
    3bc0:	781a      	ldrb	r2, [r3, #0]
    3bc2:	2301      	movs	r3, #1
    3bc4:	9300      	str	r3, [sp, #0]
    3bc6:	2300      	movs	r3, #0
    3bc8:	4c0f      	ldr	r4, [pc, #60]	; (3c08 <RFM_sendACK+0xcc>)
    3bca:	47a0      	blx	r4
  RFM_RSSI = _RSSI; // restore payload RSSI
    3bcc:	230c      	movs	r3, #12
    3bce:	18fb      	adds	r3, r7, r3
    3bd0:	881b      	ldrh	r3, [r3, #0]
    3bd2:	b29a      	uxth	r2, r3
    3bd4:	4b04      	ldr	r3, [pc, #16]	; (3be8 <RFM_sendACK+0xac>)
    3bd6:	801a      	strh	r2, [r3, #0]
}
    3bd8:	46bd      	mov	sp, r7
    3bda:	b005      	add	sp, #20
    3bdc:	bd90      	pop	{r4, r7, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	20000183 	.word	0x20000183
    3be4:	200000dd 	.word	0x200000dd
    3be8:	200001c4 	.word	0x200001c4
    3bec:	00003ff5 	.word	0x00003ff5
    3bf0:	00004061 	.word	0x00004061
    3bf4:	000031d5 	.word	0x000031d5
    3bf8:	00003e99 	.word	0x00003e99
    3bfc:	00003929 	.word	0x00003929
    3c00:	000031fd 	.word	0x000031fd
    3c04:	000003e7 	.word	0x000003e7
    3c08:	00003229 	.word	0x00003229

00003c0c <interruptHandler>:

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    3c0c:	b590      	push	{r4, r7, lr}
    3c0e:	b083      	sub	sp, #12
    3c10:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
    3c12:	4b61      	ldr	r3, [pc, #388]	; (3d98 <interruptHandler+0x18c>)
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	b2db      	uxtb	r3, r3
    3c18:	2b03      	cmp	r3, #3
    3c1a:	d000      	beq.n	3c1e <interruptHandler+0x12>
    3c1c:	e0b3      	b.n	3d86 <interruptHandler+0x17a>
    3c1e:	2028      	movs	r0, #40	; 0x28
    3c20:	4b5e      	ldr	r3, [pc, #376]	; (3d9c <interruptHandler+0x190>)
    3c22:	4798      	blx	r3
    3c24:	1c03      	adds	r3, r0, #0
    3c26:	1c1a      	adds	r2, r3, #0
    3c28:	2304      	movs	r3, #4
    3c2a:	4013      	ands	r3, r2
    3c2c:	d100      	bne.n	3c30 <interruptHandler+0x24>
    3c2e:	e0aa      	b.n	3d86 <interruptHandler+0x17a>
  {
    setMode(RF69_MODE_STANDBY);
    3c30:	2001      	movs	r0, #1
    3c32:	4b5b      	ldr	r3, [pc, #364]	; (3da0 <interruptHandler+0x194>)
    3c34:	4798      	blx	r3
    select();
    3c36:	4b5b      	ldr	r3, [pc, #364]	; (3da4 <interruptHandler+0x198>)
    3c38:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    3c3a:	4a5b      	ldr	r2, [pc, #364]	; (3da8 <interruptHandler+0x19c>)
    3c3c:	4b5b      	ldr	r3, [pc, #364]	; (3dac <interruptHandler+0x1a0>)
    3c3e:	1c10      	adds	r0, r2, #0
    3c40:	2100      	movs	r1, #0
    3c42:	1c1a      	adds	r2, r3, #0
    3c44:	4b5a      	ldr	r3, [pc, #360]	; (3db0 <interruptHandler+0x1a4>)
    3c46:	4798      	blx	r3
    PAYLOADLEN = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    3c48:	4a57      	ldr	r2, [pc, #348]	; (3da8 <interruptHandler+0x19c>)
    3c4a:	4b58      	ldr	r3, [pc, #352]	; (3dac <interruptHandler+0x1a0>)
    3c4c:	1c10      	adds	r0, r2, #0
    3c4e:	2100      	movs	r1, #0
    3c50:	1c1a      	adds	r2, r3, #0
    3c52:	4b57      	ldr	r3, [pc, #348]	; (3db0 <interruptHandler+0x1a4>)
    3c54:	4798      	blx	r3
    3c56:	1c03      	adds	r3, r0, #0
    3c58:	1c1a      	adds	r2, r3, #0
    3c5a:	4b56      	ldr	r3, [pc, #344]	; (3db4 <interruptHandler+0x1a8>)
    3c5c:	701a      	strb	r2, [r3, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    3c5e:	4b55      	ldr	r3, [pc, #340]	; (3db4 <interruptHandler+0x1a8>)
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	b2db      	uxtb	r3, r3
    3c64:	2b42      	cmp	r3, #66	; 0x42
    3c66:	d803      	bhi.n	3c70 <interruptHandler+0x64>
    3c68:	4b52      	ldr	r3, [pc, #328]	; (3db4 <interruptHandler+0x1a8>)
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	b2da      	uxtb	r2, r3
    3c6e:	e000      	b.n	3c72 <interruptHandler+0x66>
    3c70:	2242      	movs	r2, #66	; 0x42
    3c72:	4b50      	ldr	r3, [pc, #320]	; (3db4 <interruptHandler+0x1a8>)
    3c74:	701a      	strb	r2, [r3, #0]
    TARGETID = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    3c76:	4a4c      	ldr	r2, [pc, #304]	; (3da8 <interruptHandler+0x19c>)
    3c78:	4b4c      	ldr	r3, [pc, #304]	; (3dac <interruptHandler+0x1a0>)
    3c7a:	1c10      	adds	r0, r2, #0
    3c7c:	2100      	movs	r1, #0
    3c7e:	1c1a      	adds	r2, r3, #0
    3c80:	4b4b      	ldr	r3, [pc, #300]	; (3db0 <interruptHandler+0x1a4>)
    3c82:	4798      	blx	r3
    3c84:	1c03      	adds	r3, r0, #0
    3c86:	1c1a      	adds	r2, r3, #0
    3c88:	4b4b      	ldr	r3, [pc, #300]	; (3db8 <interruptHandler+0x1ac>)
    3c8a:	701a      	strb	r2, [r3, #0]
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    3c8c:	4b4b      	ldr	r3, [pc, #300]	; (3dbc <interruptHandler+0x1b0>)
    3c8e:	781b      	ldrb	r3, [r3, #0]
    3c90:	b2db      	uxtb	r3, r3
    3c92:	2201      	movs	r2, #1
    3c94:	4053      	eors	r3, r2
    3c96:	b2db      	uxtb	r3, r3
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d00c      	beq.n	3cb6 <interruptHandler+0xaa>
    3c9c:	4b46      	ldr	r3, [pc, #280]	; (3db8 <interruptHandler+0x1ac>)
    3c9e:	781b      	ldrb	r3, [r3, #0]
    3ca0:	b2da      	uxtb	r2, r3
    3ca2:	4b47      	ldr	r3, [pc, #284]	; (3dc0 <interruptHandler+0x1b4>)
    3ca4:	781b      	ldrb	r3, [r3, #0]
    3ca6:	b2db      	uxtb	r3, r3
    3ca8:	429a      	cmp	r2, r3
    3caa:	d004      	beq.n	3cb6 <interruptHandler+0xaa>
    3cac:	4b42      	ldr	r3, [pc, #264]	; (3db8 <interruptHandler+0x1ac>)
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	2bff      	cmp	r3, #255	; 0xff
    3cb4:	d104      	bne.n	3cc0 <interruptHandler+0xb4>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    3cb6:	4b3f      	ldr	r3, [pc, #252]	; (3db4 <interruptHandler+0x1a8>)
    3cb8:	781b      	ldrb	r3, [r3, #0]
    3cba:	b2db      	uxtb	r3, r3
    3cbc:	2b02      	cmp	r3, #2
    3cbe:	d807      	bhi.n	3cd0 <interruptHandler+0xc4>
    {
      PAYLOADLEN = 0;
    3cc0:	4b3c      	ldr	r3, [pc, #240]	; (3db4 <interruptHandler+0x1a8>)
    3cc2:	2200      	movs	r2, #0
    3cc4:	701a      	strb	r2, [r3, #0]
      unselect();
    3cc6:	4b3f      	ldr	r3, [pc, #252]	; (3dc4 <interruptHandler+0x1b8>)
    3cc8:	4798      	blx	r3
      receiveBegin();
    3cca:	4b3f      	ldr	r3, [pc, #252]	; (3dc8 <interruptHandler+0x1bc>)
    3ccc:	4798      	blx	r3
      return;
    3cce:	e060      	b.n	3d92 <interruptHandler+0x186>
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    3cd0:	4b38      	ldr	r3, [pc, #224]	; (3db4 <interruptHandler+0x1a8>)
    3cd2:	781b      	ldrb	r3, [r3, #0]
    3cd4:	b2db      	uxtb	r3, r3
    3cd6:	3b03      	subs	r3, #3
    3cd8:	b2da      	uxtb	r2, r3
    3cda:	4b3c      	ldr	r3, [pc, #240]	; (3dcc <interruptHandler+0x1c0>)
    3cdc:	701a      	strb	r2, [r3, #0]
    RFM_SENDERID = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    3cde:	4a32      	ldr	r2, [pc, #200]	; (3da8 <interruptHandler+0x19c>)
    3ce0:	4b32      	ldr	r3, [pc, #200]	; (3dac <interruptHandler+0x1a0>)
    3ce2:	1c10      	adds	r0, r2, #0
    3ce4:	2100      	movs	r1, #0
    3ce6:	1c1a      	adds	r2, r3, #0
    3ce8:	4b31      	ldr	r3, [pc, #196]	; (3db0 <interruptHandler+0x1a4>)
    3cea:	4798      	blx	r3
    3cec:	1c03      	adds	r3, r0, #0
    3cee:	1c1a      	adds	r2, r3, #0
    3cf0:	4b37      	ldr	r3, [pc, #220]	; (3dd0 <interruptHandler+0x1c4>)
    3cf2:	701a      	strb	r2, [r3, #0]
    volatile uint8_t CTLbyte = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    3cf4:	4a2c      	ldr	r2, [pc, #176]	; (3da8 <interruptHandler+0x19c>)
    3cf6:	4b2d      	ldr	r3, [pc, #180]	; (3dac <interruptHandler+0x1a0>)
    3cf8:	1c10      	adds	r0, r2, #0
    3cfa:	2100      	movs	r1, #0
    3cfc:	1c1a      	adds	r2, r3, #0
    3cfe:	4b2c      	ldr	r3, [pc, #176]	; (3db0 <interruptHandler+0x1a4>)
    3d00:	4798      	blx	r3
    3d02:	1c03      	adds	r3, r0, #0
    3d04:	1c1a      	adds	r2, r3, #0
    3d06:	1dbb      	adds	r3, r7, #6
    3d08:	701a      	strb	r2, [r3, #0]

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    3d0a:	1dbb      	adds	r3, r7, #6
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	b2db      	uxtb	r3, r3
    3d10:	227f      	movs	r2, #127	; 0x7f
    3d12:	4393      	bics	r3, r2
    3d14:	b2da      	uxtb	r2, r3
    3d16:	4b2f      	ldr	r3, [pc, #188]	; (3dd4 <interruptHandler+0x1c8>)
    3d18:	701a      	strb	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    3d1a:	1dbb      	adds	r3, r7, #6
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	b2db      	uxtb	r3, r3
    3d20:	2240      	movs	r2, #64	; 0x40
    3d22:	4013      	ands	r3, r2
    3d24:	b2da      	uxtb	r2, r3
    3d26:	4b2c      	ldr	r3, [pc, #176]	; (3dd8 <interruptHandler+0x1cc>)
    3d28:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    3d2a:	1dfb      	adds	r3, r7, #7
    3d2c:	2200      	movs	r2, #0
    3d2e:	701a      	strb	r2, [r3, #0]
    3d30:	e011      	b.n	3d56 <interruptHandler+0x14a>
    {
      RFM_DATA[i] = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    3d32:	1dfb      	adds	r3, r7, #7
    3d34:	781c      	ldrb	r4, [r3, #0]
    3d36:	4a1c      	ldr	r2, [pc, #112]	; (3da8 <interruptHandler+0x19c>)
    3d38:	4b1c      	ldr	r3, [pc, #112]	; (3dac <interruptHandler+0x1a0>)
    3d3a:	1c10      	adds	r0, r2, #0
    3d3c:	2100      	movs	r1, #0
    3d3e:	1c1a      	adds	r2, r3, #0
    3d40:	4b1b      	ldr	r3, [pc, #108]	; (3db0 <interruptHandler+0x1a4>)
    3d42:	4798      	blx	r3
    3d44:	1c03      	adds	r3, r0, #0
    3d46:	1c1a      	adds	r2, r3, #0
    3d48:	4b24      	ldr	r3, [pc, #144]	; (3ddc <interruptHandler+0x1d0>)
    3d4a:	551a      	strb	r2, [r3, r4]
    volatile uint8_t CTLbyte = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    3d4c:	1dfb      	adds	r3, r7, #7
    3d4e:	781a      	ldrb	r2, [r3, #0]
    3d50:	1dfb      	adds	r3, r7, #7
    3d52:	3201      	adds	r2, #1
    3d54:	701a      	strb	r2, [r3, #0]
    3d56:	4b1d      	ldr	r3, [pc, #116]	; (3dcc <interruptHandler+0x1c0>)
    3d58:	781b      	ldrb	r3, [r3, #0]
    3d5a:	b2db      	uxtb	r3, r3
    3d5c:	1dfa      	adds	r2, r7, #7
    3d5e:	7812      	ldrb	r2, [r2, #0]
    3d60:	429a      	cmp	r2, r3
    3d62:	d3e6      	bcc.n	3d32 <interruptHandler+0x126>
    {
      RFM_DATA[i] = spi_transceive_wait(&spi_master_instance, 0, &read_buf); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    3d64:	4b19      	ldr	r3, [pc, #100]	; (3dcc <interruptHandler+0x1c0>)
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	b2db      	uxtb	r3, r3
    3d6a:	2b3c      	cmp	r3, #60	; 0x3c
    3d6c:	d806      	bhi.n	3d7c <interruptHandler+0x170>
    3d6e:	4b17      	ldr	r3, [pc, #92]	; (3dcc <interruptHandler+0x1c0>)
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	b2db      	uxtb	r3, r3
    3d74:	1c1a      	adds	r2, r3, #0
    3d76:	4b19      	ldr	r3, [pc, #100]	; (3ddc <interruptHandler+0x1d0>)
    3d78:	2100      	movs	r1, #0
    3d7a:	5499      	strb	r1, [r3, r2]
    unselect();
    3d7c:	4b11      	ldr	r3, [pc, #68]	; (3dc4 <interruptHandler+0x1b8>)
    3d7e:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    3d80:	2003      	movs	r0, #3
    3d82:	4b07      	ldr	r3, [pc, #28]	; (3da0 <interruptHandler+0x194>)
    3d84:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    3d86:	4b16      	ldr	r3, [pc, #88]	; (3de0 <interruptHandler+0x1d4>)
    3d88:	4798      	blx	r3
    3d8a:	1c03      	adds	r3, r0, #0
    3d8c:	1c1a      	adds	r2, r3, #0
    3d8e:	4b15      	ldr	r3, [pc, #84]	; (3de4 <interruptHandler+0x1d8>)
    3d90:	801a      	strh	r2, [r3, #0]
}
    3d92:	46bd      	mov	sp, r7
    3d94:	b003      	add	sp, #12
    3d96:	bd90      	pop	{r4, r7, pc}
    3d98:	20000185 	.word	0x20000185
    3d9c:	00003ff5 	.word	0x00003ff5
    3da0:	000037d1 	.word	0x000037d1
    3da4:	000040c5 	.word	0x000040c5
    3da8:	20000188 	.word	0x20000188
    3dac:	2000005c 	.word	0x2000005c
    3db0:	00001379 	.word	0x00001379
    3db4:	20000182 	.word	0x20000182
    3db8:	20000184 	.word	0x20000184
    3dbc:	2000013f 	.word	0x2000013f
    3dc0:	2000013c 	.word	0x2000013c
    3dc4:	000040f1 	.word	0x000040f1
    3dc8:	00003e09 	.word	0x00003e09
    3dcc:	2000013e 	.word	0x2000013e
    3dd0:	200000dd 	.word	0x200000dd
    3dd4:	2000013d 	.word	0x2000013d
    3dd8:	20000183 	.word	0x20000183
    3ddc:	20000144 	.word	0x20000144
    3de0:	00003fb1 	.word	0x00003fb1
    3de4:	200001c4 	.word	0x200001c4

00003de8 <isr0>:

// internal function
void isr0()
{ 
    3de8:	b580      	push	{r7, lr}
    3dea:	af00      	add	r7, sp, #0
	_inISR = true; 
    3dec:	4b04      	ldr	r3, [pc, #16]	; (3e00 <isr0+0x18>)
    3dee:	2201      	movs	r2, #1
    3df0:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    3df2:	4b04      	ldr	r3, [pc, #16]	; (3e04 <isr0+0x1c>)
    3df4:	4798      	blx	r3
	_inISR = false;
    3df6:	4b02      	ldr	r3, [pc, #8]	; (3e00 <isr0+0x18>)
    3df8:	2200      	movs	r2, #0
    3dfa:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    3dfc:	46bd      	mov	sp, r7
    3dfe:	bd80      	pop	{r7, pc}
    3e00:	200000f9 	.word	0x200000f9
    3e04:	00003c0d 	.word	0x00003c0d

00003e08 <receiveBegin>:

// internal function
void receiveBegin() {
    3e08:	b580      	push	{r7, lr}
    3e0a:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    3e0c:	4b18      	ldr	r3, [pc, #96]	; (3e70 <receiveBegin+0x68>)
    3e0e:	2200      	movs	r2, #0
    3e10:	701a      	strb	r2, [r3, #0]
  RFM_SENDERID = 0;
    3e12:	4b18      	ldr	r3, [pc, #96]	; (3e74 <receiveBegin+0x6c>)
    3e14:	2200      	movs	r2, #0
    3e16:	701a      	strb	r2, [r3, #0]
  TARGETID = 0;
    3e18:	4b17      	ldr	r3, [pc, #92]	; (3e78 <receiveBegin+0x70>)
    3e1a:	2200      	movs	r2, #0
    3e1c:	701a      	strb	r2, [r3, #0]
  PAYLOADLEN = 0;
    3e1e:	4b17      	ldr	r3, [pc, #92]	; (3e7c <receiveBegin+0x74>)
    3e20:	2200      	movs	r2, #0
    3e22:	701a      	strb	r2, [r3, #0]
  ACK_REQUESTED = 0;
    3e24:	4b16      	ldr	r3, [pc, #88]	; (3e80 <receiveBegin+0x78>)
    3e26:	2200      	movs	r2, #0
    3e28:	701a      	strb	r2, [r3, #0]
  ACK_RECEIVED = 0;
    3e2a:	4b16      	ldr	r3, [pc, #88]	; (3e84 <receiveBegin+0x7c>)
    3e2c:	2200      	movs	r2, #0
    3e2e:	701a      	strb	r2, [r3, #0]
  RFM_RSSI = 0;
    3e30:	4b15      	ldr	r3, [pc, #84]	; (3e88 <receiveBegin+0x80>)
    3e32:	2200      	movs	r2, #0
    3e34:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    3e36:	2028      	movs	r0, #40	; 0x28
    3e38:	4b14      	ldr	r3, [pc, #80]	; (3e8c <receiveBegin+0x84>)
    3e3a:	4798      	blx	r3
    3e3c:	1c03      	adds	r3, r0, #0
    3e3e:	1c1a      	adds	r2, r3, #0
    3e40:	2304      	movs	r3, #4
    3e42:	4013      	ands	r3, r2
    3e44:	d00b      	beq.n	3e5e <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    3e46:	203d      	movs	r0, #61	; 0x3d
    3e48:	4b10      	ldr	r3, [pc, #64]	; (3e8c <receiveBegin+0x84>)
    3e4a:	4798      	blx	r3
    3e4c:	1c03      	adds	r3, r0, #0
    3e4e:	1c1a      	adds	r2, r3, #0
    3e50:	2304      	movs	r3, #4
    3e52:	4313      	orrs	r3, r2
    3e54:	b2db      	uxtb	r3, r3
    3e56:	203d      	movs	r0, #61	; 0x3d
    3e58:	1c19      	adds	r1, r3, #0
    3e5a:	4b0d      	ldr	r3, [pc, #52]	; (3e90 <receiveBegin+0x88>)
    3e5c:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    3e5e:	2025      	movs	r0, #37	; 0x25
    3e60:	2140      	movs	r1, #64	; 0x40
    3e62:	4b0b      	ldr	r3, [pc, #44]	; (3e90 <receiveBegin+0x88>)
    3e64:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    3e66:	2003      	movs	r0, #3
    3e68:	4b0a      	ldr	r3, [pc, #40]	; (3e94 <receiveBegin+0x8c>)
    3e6a:	4798      	blx	r3
}
    3e6c:	46bd      	mov	sp, r7
    3e6e:	bd80      	pop	{r7, pc}
    3e70:	2000013e 	.word	0x2000013e
    3e74:	200000dd 	.word	0x200000dd
    3e78:	20000184 	.word	0x20000184
    3e7c:	20000182 	.word	0x20000182
    3e80:	20000183 	.word	0x20000183
    3e84:	2000013d 	.word	0x2000013d
    3e88:	200001c4 	.word	0x200001c4
    3e8c:	00003ff5 	.word	0x00003ff5
    3e90:	00004061 	.word	0x00004061
    3e94:	000037d1 	.word	0x000037d1

00003e98 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    3e98:	b580      	push	{r7, lr}
    3e9a:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    3e9c:	4b0f      	ldr	r3, [pc, #60]	; (3edc <RFM_receiveDone+0x44>)
    3e9e:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    3ea0:	4b0f      	ldr	r3, [pc, #60]	; (3ee0 <RFM_receiveDone+0x48>)
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	b2db      	uxtb	r3, r3
    3ea6:	2b03      	cmp	r3, #3
    3ea8:	d109      	bne.n	3ebe <RFM_receiveDone+0x26>
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <RFM_receiveDone+0x4c>)
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d004      	beq.n	3ebe <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    3eb4:	2001      	movs	r0, #1
    3eb6:	4b0c      	ldr	r3, [pc, #48]	; (3ee8 <RFM_receiveDone+0x50>)
    3eb8:	4798      	blx	r3
    return true;
    3eba:	2301      	movs	r3, #1
    3ebc:	e00b      	b.n	3ed6 <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    3ebe:	4b08      	ldr	r3, [pc, #32]	; (3ee0 <RFM_receiveDone+0x48>)
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	b2db      	uxtb	r3, r3
    3ec4:	2b03      	cmp	r3, #3
    3ec6:	d103      	bne.n	3ed0 <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    3ec8:	4b08      	ldr	r3, [pc, #32]	; (3eec <RFM_receiveDone+0x54>)
    3eca:	4798      	blx	r3
    return false;
    3ecc:	2300      	movs	r3, #0
    3ece:	e002      	b.n	3ed6 <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    3ed0:	4b07      	ldr	r3, [pc, #28]	; (3ef0 <RFM_receiveDone+0x58>)
    3ed2:	4798      	blx	r3
  return false;
    3ed4:	2300      	movs	r3, #0
}
    3ed6:	1c18      	adds	r0, r3, #0
    3ed8:	46bd      	mov	sp, r7
    3eda:	bd80      	pop	{r7, pc}
    3edc:	00002e71 	.word	0x00002e71
    3ee0:	20000185 	.word	0x20000185
    3ee4:	20000182 	.word	0x20000182
    3ee8:	000037d1 	.word	0x000037d1
    3eec:	00002e59 	.word	0x00002e59
    3ef0:	00003e09 	.word	0x00003e09

00003ef4 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b084      	sub	sp, #16
    3ef8:	af00      	add	r7, sp, #0
    3efa:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    3efc:	2001      	movs	r0, #1
    3efe:	4b24      	ldr	r3, [pc, #144]	; (3f90 <RFM_encrypt+0x9c>)
    3f00:	4798      	blx	r3
  if (key != 0)
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d029      	beq.n	3f5c <RFM_encrypt+0x68>
  {
    select();
    3f08:	4b22      	ldr	r3, [pc, #136]	; (3f94 <RFM_encrypt+0xa0>)
    3f0a:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    3f0c:	4a22      	ldr	r2, [pc, #136]	; (3f98 <RFM_encrypt+0xa4>)
    3f0e:	4b23      	ldr	r3, [pc, #140]	; (3f9c <RFM_encrypt+0xa8>)
    3f10:	1c10      	adds	r0, r2, #0
    3f12:	21be      	movs	r1, #190	; 0xbe
    3f14:	1c1a      	adds	r2, r3, #0
    3f16:	4b22      	ldr	r3, [pc, #136]	; (3fa0 <RFM_encrypt+0xac>)
    3f18:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    3f1a:	230f      	movs	r3, #15
    3f1c:	18fb      	adds	r3, r7, r3
    3f1e:	2200      	movs	r2, #0
    3f20:	701a      	strb	r2, [r3, #0]
    3f22:	e014      	b.n	3f4e <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    3f24:	230f      	movs	r3, #15
    3f26:	18fb      	adds	r3, r7, r3
    3f28:	781b      	ldrb	r3, [r3, #0]
    3f2a:	687a      	ldr	r2, [r7, #4]
    3f2c:	18d3      	adds	r3, r2, r3
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	b29a      	uxth	r2, r3
    3f32:	4919      	ldr	r1, [pc, #100]	; (3f98 <RFM_encrypt+0xa4>)
    3f34:	4b19      	ldr	r3, [pc, #100]	; (3f9c <RFM_encrypt+0xa8>)
    3f36:	1c08      	adds	r0, r1, #0
    3f38:	1c11      	adds	r1, r2, #0
    3f3a:	1c1a      	adds	r2, r3, #0
    3f3c:	4b18      	ldr	r3, [pc, #96]	; (3fa0 <RFM_encrypt+0xac>)
    3f3e:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    select();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    3f40:	230f      	movs	r3, #15
    3f42:	18fb      	adds	r3, r7, r3
    3f44:	781a      	ldrb	r2, [r3, #0]
    3f46:	230f      	movs	r3, #15
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	3201      	adds	r2, #1
    3f4c:	701a      	strb	r2, [r3, #0]
    3f4e:	230f      	movs	r3, #15
    3f50:	18fb      	adds	r3, r7, r3
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	2b0f      	cmp	r3, #15
    3f56:	d9e5      	bls.n	3f24 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    3f58:	4b12      	ldr	r3, [pc, #72]	; (3fa4 <RFM_encrypt+0xb0>)
    3f5a:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    3f5c:	203d      	movs	r0, #61	; 0x3d
    3f5e:	4b12      	ldr	r3, [pc, #72]	; (3fa8 <RFM_encrypt+0xb4>)
    3f60:	4798      	blx	r3
    3f62:	1c03      	adds	r3, r0, #0
    3f64:	b2db      	uxtb	r3, r3
    3f66:	1c1a      	adds	r2, r3, #0
    3f68:	2301      	movs	r3, #1
    3f6a:	439a      	bics	r2, r3
    3f6c:	1c13      	adds	r3, r2, #0
    3f6e:	b2da      	uxtb	r2, r3
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	1e59      	subs	r1, r3, #1
    3f74:	418b      	sbcs	r3, r1
    3f76:	b2db      	uxtb	r3, r3
    3f78:	b2db      	uxtb	r3, r3
    3f7a:	4313      	orrs	r3, r2
    3f7c:	b2db      	uxtb	r3, r3
    3f7e:	b2db      	uxtb	r3, r3
    3f80:	203d      	movs	r0, #61	; 0x3d
    3f82:	1c19      	adds	r1, r3, #0
    3f84:	4b09      	ldr	r3, [pc, #36]	; (3fac <RFM_encrypt+0xb8>)
    3f86:	4798      	blx	r3
}
    3f88:	46bd      	mov	sp, r7
    3f8a:	b004      	add	sp, #16
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	000037d1 	.word	0x000037d1
    3f94:	000040c5 	.word	0x000040c5
    3f98:	20000188 	.word	0x20000188
    3f9c:	2000005c 	.word	0x2000005c
    3fa0:	00001379 	.word	0x00001379
    3fa4:	000040f1 	.word	0x000040f1
    3fa8:	00003ff5 	.word	0x00003ff5
    3fac:	00004061 	.word	0x00004061

00003fb0 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    3fb0:	b580      	push	{r7, lr}
    3fb2:	b082      	sub	sp, #8
    3fb4:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    3fb6:	1dbb      	adds	r3, r7, #6
    3fb8:	2200      	movs	r2, #0
    3fba:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    3fbc:	2024      	movs	r0, #36	; 0x24
    3fbe:	4b0c      	ldr	r3, [pc, #48]	; (3ff0 <readRSSI+0x40>)
    3fc0:	4798      	blx	r3
    3fc2:	1c03      	adds	r3, r0, #0
    3fc4:	b29b      	uxth	r3, r3
    3fc6:	425b      	negs	r3, r3
    3fc8:	b29b      	uxth	r3, r3
    3fca:	b29a      	uxth	r2, r3
    3fcc:	1dbb      	adds	r3, r7, #6
    3fce:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    3fd0:	1dbb      	adds	r3, r7, #6
    3fd2:	881b      	ldrh	r3, [r3, #0]
    3fd4:	b29b      	uxth	r3, r3
    3fd6:	b21b      	sxth	r3, r3
    3fd8:	105b      	asrs	r3, r3, #1
    3fda:	b29a      	uxth	r2, r3
    3fdc:	1dbb      	adds	r3, r7, #6
    3fde:	801a      	strh	r2, [r3, #0]
  return rssi;
    3fe0:	1dbb      	adds	r3, r7, #6
    3fe2:	881b      	ldrh	r3, [r3, #0]
    3fe4:	b29b      	uxth	r3, r3
    3fe6:	b21b      	sxth	r3, r3
}
    3fe8:	1c18      	adds	r0, r3, #0
    3fea:	46bd      	mov	sp, r7
    3fec:	b002      	add	sp, #8
    3fee:	bd80      	pop	{r7, pc}
    3ff0:	00003ff5 	.word	0x00003ff5

00003ff4 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	b084      	sub	sp, #16
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	1c02      	adds	r2, r0, #0
    3ffc:	1dbb      	adds	r3, r7, #6
    3ffe:	801a      	strh	r2, [r3, #0]
  select();
    4000:	4b12      	ldr	r3, [pc, #72]	; (404c <readReg+0x58>)
    4002:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    4004:	1dbb      	adds	r3, r7, #6
    4006:	881b      	ldrh	r3, [r3, #0]
    4008:	b29b      	uxth	r3, r3
    400a:	227f      	movs	r2, #127	; 0x7f
    400c:	4013      	ands	r3, r2
    400e:	b29a      	uxth	r2, r3
    4010:	490f      	ldr	r1, [pc, #60]	; (4050 <readReg+0x5c>)
    4012:	4b10      	ldr	r3, [pc, #64]	; (4054 <readReg+0x60>)
    4014:	1c08      	adds	r0, r1, #0
    4016:	1c11      	adds	r1, r2, #0
    4018:	1c1a      	adds	r2, r3, #0
    401a:	4b0f      	ldr	r3, [pc, #60]	; (4058 <readReg+0x64>)
    401c:	4798      	blx	r3
  volatile uint16_t regval = 0;
    401e:	230e      	movs	r3, #14
    4020:	18fb      	adds	r3, r7, r3
    4022:	2200      	movs	r2, #0
    4024:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    4026:	4a0a      	ldr	r2, [pc, #40]	; (4050 <readReg+0x5c>)
    4028:	230e      	movs	r3, #14
    402a:	18fb      	adds	r3, r7, r3
    402c:	1c10      	adds	r0, r2, #0
    402e:	2100      	movs	r1, #0
    4030:	1c1a      	adds	r2, r3, #0
    4032:	4b09      	ldr	r3, [pc, #36]	; (4058 <readReg+0x64>)
    4034:	4798      	blx	r3
  unselect();
    4036:	4b09      	ldr	r3, [pc, #36]	; (405c <readReg+0x68>)
    4038:	4798      	blx	r3
  return (uint8_t)regval;
    403a:	230e      	movs	r3, #14
    403c:	18fb      	adds	r3, r7, r3
    403e:	881b      	ldrh	r3, [r3, #0]
    4040:	b29b      	uxth	r3, r3
    4042:	b2db      	uxtb	r3, r3
}
    4044:	1c18      	adds	r0, r3, #0
    4046:	46bd      	mov	sp, r7
    4048:	b004      	add	sp, #16
    404a:	bd80      	pop	{r7, pc}
    404c:	000040c5 	.word	0x000040c5
    4050:	20000188 	.word	0x20000188
    4054:	2000005c 	.word	0x2000005c
    4058:	00001379 	.word	0x00001379
    405c:	000040f1 	.word	0x000040f1

00004060 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    4060:	b580      	push	{r7, lr}
    4062:	b082      	sub	sp, #8
    4064:	af00      	add	r7, sp, #0
    4066:	1c02      	adds	r2, r0, #0
    4068:	1dfb      	adds	r3, r7, #7
    406a:	701a      	strb	r2, [r3, #0]
    406c:	1dbb      	adds	r3, r7, #6
    406e:	1c0a      	adds	r2, r1, #0
    4070:	701a      	strb	r2, [r3, #0]
  select();
    4072:	4b0f      	ldr	r3, [pc, #60]	; (40b0 <writeReg+0x50>)
    4074:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    4076:	1dfb      	adds	r3, r7, #7
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	2280      	movs	r2, #128	; 0x80
    407c:	4252      	negs	r2, r2
    407e:	4313      	orrs	r3, r2
    4080:	b2db      	uxtb	r3, r3
    4082:	b29a      	uxth	r2, r3
    4084:	490b      	ldr	r1, [pc, #44]	; (40b4 <writeReg+0x54>)
    4086:	4b0c      	ldr	r3, [pc, #48]	; (40b8 <writeReg+0x58>)
    4088:	1c08      	adds	r0, r1, #0
    408a:	1c11      	adds	r1, r2, #0
    408c:	1c1a      	adds	r2, r3, #0
    408e:	4b0b      	ldr	r3, [pc, #44]	; (40bc <writeReg+0x5c>)
    4090:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    4092:	1dbb      	adds	r3, r7, #6
    4094:	781b      	ldrb	r3, [r3, #0]
    4096:	b29a      	uxth	r2, r3
    4098:	4906      	ldr	r1, [pc, #24]	; (40b4 <writeReg+0x54>)
    409a:	4b07      	ldr	r3, [pc, #28]	; (40b8 <writeReg+0x58>)
    409c:	1c08      	adds	r0, r1, #0
    409e:	1c11      	adds	r1, r2, #0
    40a0:	1c1a      	adds	r2, r3, #0
    40a2:	4b06      	ldr	r3, [pc, #24]	; (40bc <writeReg+0x5c>)
    40a4:	4798      	blx	r3
  unselect();
    40a6:	4b06      	ldr	r3, [pc, #24]	; (40c0 <writeReg+0x60>)
    40a8:	4798      	blx	r3
}
    40aa:	46bd      	mov	sp, r7
    40ac:	b002      	add	sp, #8
    40ae:	bd80      	pop	{r7, pc}
    40b0:	000040c5 	.word	0x000040c5
    40b4:	20000188 	.word	0x20000188
    40b8:	2000005c 	.word	0x2000005c
    40bc:	00001379 	.word	0x00001379
    40c0:	000040f1 	.word	0x000040f1

000040c4 <select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void select() {
    40c4:	b580      	push	{r7, lr}
    40c6:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <select+0x1c>)
    40ca:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    40cc:	4a05      	ldr	r2, [pc, #20]	; (40e4 <select+0x20>)
    40ce:	4b06      	ldr	r3, [pc, #24]	; (40e8 <select+0x24>)
    40d0:	1c10      	adds	r0, r2, #0
    40d2:	1c19      	adds	r1, r3, #0
    40d4:	2201      	movs	r2, #1
    40d6:	4b05      	ldr	r3, [pc, #20]	; (40ec <select+0x28>)
    40d8:	4798      	blx	r3
}
    40da:	46bd      	mov	sp, r7
    40dc:	bd80      	pop	{r7, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00002e71 	.word	0x00002e71
    40e4:	20000188 	.word	0x20000188
    40e8:	200001c8 	.word	0x200001c8
    40ec:	000014c1 	.word	0x000014c1

000040f0 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    40f0:	b580      	push	{r7, lr}
    40f2:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    40f4:	4a05      	ldr	r2, [pc, #20]	; (410c <unselect+0x1c>)
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <unselect+0x20>)
    40f8:	1c10      	adds	r0, r2, #0
    40fa:	1c19      	adds	r1, r3, #0
    40fc:	2200      	movs	r2, #0
    40fe:	4b05      	ldr	r3, [pc, #20]	; (4114 <unselect+0x24>)
    4100:	4798      	blx	r3
  maybeInterrupts();
    4102:	4b05      	ldr	r3, [pc, #20]	; (4118 <unselect+0x28>)
    4104:	4798      	blx	r3
}
    4106:	46bd      	mov	sp, r7
    4108:	bd80      	pop	{r7, pc}
    410a:	46c0      	nop			; (mov r8, r8)
    410c:	20000188 	.word	0x20000188
    4110:	200001c8 	.word	0x200001c8
    4114:	000014c1 	.word	0x000014c1
    4118:	00004161 	.word	0x00004161

0000411c <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    411c:	b580      	push	{r7, lr}
    411e:	b082      	sub	sp, #8
    4120:	af00      	add	r7, sp, #0
    4122:	1c02      	adds	r2, r0, #0
    4124:	1dfb      	adds	r3, r7, #7
    4126:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    4128:	1dfb      	adds	r3, r7, #7
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	2b00      	cmp	r3, #0
    412e:	d001      	beq.n	4134 <setHighPowerRegs+0x18>
    4130:	235d      	movs	r3, #93	; 0x5d
    4132:	e000      	b.n	4136 <setHighPowerRegs+0x1a>
    4134:	2355      	movs	r3, #85	; 0x55
    4136:	205a      	movs	r0, #90	; 0x5a
    4138:	1c19      	adds	r1, r3, #0
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <setHighPowerRegs+0x40>)
    413c:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    413e:	1dfb      	adds	r3, r7, #7
    4140:	781b      	ldrb	r3, [r3, #0]
    4142:	2b00      	cmp	r3, #0
    4144:	d001      	beq.n	414a <setHighPowerRegs+0x2e>
    4146:	237c      	movs	r3, #124	; 0x7c
    4148:	e000      	b.n	414c <setHighPowerRegs+0x30>
    414a:	2370      	movs	r3, #112	; 0x70
    414c:	205c      	movs	r0, #92	; 0x5c
    414e:	1c19      	adds	r1, r3, #0
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <setHighPowerRegs+0x40>)
    4152:	4798      	blx	r3
}
    4154:	46bd      	mov	sp, r7
    4156:	b002      	add	sp, #8
    4158:	bd80      	pop	{r7, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	00004061 	.word	0x00004061

00004160 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    4160:	b580      	push	{r7, lr}
    4162:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    4164:	4b05      	ldr	r3, [pc, #20]	; (417c <maybeInterrupts+0x1c>)
    4166:	781b      	ldrb	r3, [r3, #0]
    4168:	b2db      	uxtb	r3, r3
    416a:	2201      	movs	r2, #1
    416c:	4053      	eors	r3, r2
    416e:	b2db      	uxtb	r3, r3
    4170:	2b00      	cmp	r3, #0
    4172:	d001      	beq.n	4178 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    4174:	4b02      	ldr	r3, [pc, #8]	; (4180 <maybeInterrupts+0x20>)
    4176:	4798      	blx	r3
}
    4178:	46bd      	mov	sp, r7
    417a:	bd80      	pop	{r7, pc}
    417c:	200000f9 	.word	0x200000f9
    4180:	00002e59 	.word	0x00002e59

00004184 <main>:
///////////////////////////////////////////////////////////////////////////



int main (void)
{
    4184:	b590      	push	{r4, r7, lr}
    4186:	b08b      	sub	sp, #44	; 0x2c
    4188:	af02      	add	r7, sp, #8
    /* Initialize system */
	system_init();
    418a:	4b36      	ldr	r3, [pc, #216]	; (4264 <main+0xe0>)
    418c:	4798      	blx	r3
	//while (true) {
		
	//}

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    418e:	205b      	movs	r0, #91	; 0x5b
    4190:	2102      	movs	r1, #2
    4192:	2200      	movs	r2, #0
    4194:	4b34      	ldr	r3, [pc, #208]	; (4268 <main+0xe4>)
    4196:	4798      	blx	r3
	RFM_setHighPower(true); // Always use this for RFM69HCW
    4198:	2001      	movs	r0, #1
    419a:	4b34      	ldr	r3, [pc, #208]	; (426c <main+0xe8>)
    419c:	4798      	blx	r3

	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    419e:	4b34      	ldr	r3, [pc, #208]	; (4270 <main+0xec>)
    41a0:	1c18      	adds	r0, r3, #0
    41a2:	4b34      	ldr	r3, [pc, #208]	; (4274 <main+0xf0>)
    41a4:	4798      	blx	r3


	int sendlength = 16;
    41a6:	2310      	movs	r3, #16
    41a8:	61fb      	str	r3, [r7, #28]
	int index = 0;
    41aa:	2300      	movs	r3, #0
    41ac:	61bb      	str	r3, [r7, #24]
	while(1)
	{
		char sendbuffer[16] = "Hello World!   ";
    41ae:	1d3b      	adds	r3, r7, #4
    41b0:	4a31      	ldr	r2, [pc, #196]	; (4278 <main+0xf4>)
    41b2:	ca13      	ldmia	r2!, {r0, r1, r4}
    41b4:	c313      	stmia	r3!, {r0, r1, r4}
    41b6:	6812      	ldr	r2, [r2, #0]
    41b8:	601a      	str	r2, [r3, #0]
		// Set up a "buffer" for characters that we'll send:
		index++;
    41ba:	69bb      	ldr	r3, [r7, #24]
    41bc:	3301      	adds	r3, #1
    41be:	61bb      	str	r3, [r7, #24]
		if(index < 10)
    41c0:	69bb      	ldr	r3, [r7, #24]
    41c2:	2b09      	cmp	r3, #9
    41c4:	dc06      	bgt.n	41d4 <main+0x50>
			sendbuffer[15] = index + '0';
    41c6:	69bb      	ldr	r3, [r7, #24]
    41c8:	b2db      	uxtb	r3, r3
    41ca:	3330      	adds	r3, #48	; 0x30
    41cc:	b2da      	uxtb	r2, r3
    41ce:	1d3b      	adds	r3, r7, #4
    41d0:	73da      	strb	r2, [r3, #15]
    41d2:	e01b      	b.n	420c <main+0x88>
		else if(index > 10 && index < 100)
    41d4:	69bb      	ldr	r3, [r7, #24]
    41d6:	2b0a      	cmp	r3, #10
    41d8:	dd18      	ble.n	420c <main+0x88>
    41da:	69bb      	ldr	r3, [r7, #24]
    41dc:	2b63      	cmp	r3, #99	; 0x63
    41de:	dc15      	bgt.n	420c <main+0x88>
		{
			sendbuffer[14] = index/10 + '0';
    41e0:	69ba      	ldr	r2, [r7, #24]
    41e2:	4b26      	ldr	r3, [pc, #152]	; (427c <main+0xf8>)
    41e4:	1c10      	adds	r0, r2, #0
    41e6:	210a      	movs	r1, #10
    41e8:	4798      	blx	r3
    41ea:	1c03      	adds	r3, r0, #0
    41ec:	b2db      	uxtb	r3, r3
    41ee:	3330      	adds	r3, #48	; 0x30
    41f0:	b2da      	uxtb	r2, r3
    41f2:	1d3b      	adds	r3, r7, #4
    41f4:	739a      	strb	r2, [r3, #14]
			sendbuffer[15] = index%10 + '0';
    41f6:	69ba      	ldr	r2, [r7, #24]
    41f8:	4b21      	ldr	r3, [pc, #132]	; (4280 <main+0xfc>)
    41fa:	1c10      	adds	r0, r2, #0
    41fc:	210a      	movs	r1, #10
    41fe:	4798      	blx	r3
    4200:	1c0b      	adds	r3, r1, #0
    4202:	b2db      	uxtb	r3, r3
    4204:	3330      	adds	r3, #48	; 0x30
    4206:	b2da      	uxtb	r2, r3
    4208:	1d3b      	adds	r3, r7, #4
    420a:	73da      	strb	r2, [r3, #15]
			//dbg_print_str("]\n");
			  
			// If you want acknowledgements, use RFM_sendWithRetry(): 
			if (USEACK)
			{
				int ACK = 0;
    420c:	2300      	movs	r3, #0
    420e:	617b      	str	r3, [r7, #20]
				if (RFM_sendWithRetry(TONODEID, sendbuffer, sendlength, 2, 40))
    4210:	69fb      	ldr	r3, [r7, #28]
    4212:	b2da      	uxtb	r2, r3
    4214:	1d39      	adds	r1, r7, #4
    4216:	2328      	movs	r3, #40	; 0x28
    4218:	9300      	str	r3, [sp, #0]
    421a:	2001      	movs	r0, #1
    421c:	2302      	movs	r3, #2
    421e:	4c19      	ldr	r4, [pc, #100]	; (4284 <main+0x100>)
    4220:	47a0      	blx	r4
    4222:	1e03      	subs	r3, r0, #0
    4224:	d002      	beq.n	422c <main+0xa8>
					ACK = 1;
    4226:	2301      	movs	r3, #1
    4228:	617b      	str	r3, [r7, #20]
    422a:	e001      	b.n	4230 <main+0xac>
				else
					ACK = 0;
    422c:	2300      	movs	r3, #0
    422e:	617b      	str	r3, [r7, #20]
			else // don't use ACK
			{
				RFM_send(TONODEID, sendbuffer, sendlength, false);
			}
			  
			sendlength = 0; // reset the packet
    4230:	2300      	movs	r3, #0
    4232:	61fb      	str	r3, [r7, #28]
	// RECEIVING

	// In this section, we'll check with the RFM69HCW to see
	// if it has received any packets:

	if (RFM_receiveDone()) // Got one!
    4234:	4b14      	ldr	r3, [pc, #80]	; (4288 <main+0x104>)
    4236:	4798      	blx	r3
    4238:	1e03      	subs	r3, r0, #0
    423a:	d012      	beq.n	4262 <main+0xde>
		// The actual message is contained in the RFM_DATA array,
		// and is RFM_DATALEN bytes in size:
		  
		//for (byte i = 0; i < RFM_DATALEN; i++)
		//dbg_print_str((char)RFM_DATA[i]);
		RFM_DATALEN = RFM_DATALEN;
    423c:	4b13      	ldr	r3, [pc, #76]	; (428c <main+0x108>)
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	b2da      	uxtb	r2, r3
    4242:	4b12      	ldr	r3, [pc, #72]	; (428c <main+0x108>)
    4244:	701a      	strb	r2, [r3, #0]
		// RFM_RSSI is the "Receive Signal Strength Indicator",
		// smaller numbers mean higher power.
		  
		//dbg_print_str("], RSSI ");
		//dbg_print_str("%d\n", RFM_RSSI);
		RFM_RSSI = RFM_RSSI;
    4246:	4b12      	ldr	r3, [pc, #72]	; (4290 <main+0x10c>)
    4248:	881b      	ldrh	r3, [r3, #0]
    424a:	b29a      	uxth	r2, r3
    424c:	4b10      	ldr	r3, [pc, #64]	; (4290 <main+0x10c>)
    424e:	801a      	strh	r2, [r3, #0]

		// Send an ACK if requested.
		// (You don't need this code if you're not using ACKs.)
		  
		if (RFM_ACKRequested())
    4250:	4b10      	ldr	r3, [pc, #64]	; (4294 <main+0x110>)
    4252:	4798      	blx	r3
    4254:	1e03      	subs	r3, r0, #0
    4256:	d004      	beq.n	4262 <main+0xde>
		{
			RFM_sendACK("", 0);
    4258:	4b0f      	ldr	r3, [pc, #60]	; (4298 <main+0x114>)
    425a:	1c18      	adds	r0, r3, #0
    425c:	2100      	movs	r1, #0
    425e:	4b0f      	ldr	r3, [pc, #60]	; (429c <main+0x118>)
    4260:	4798      	blx	r3
		//	dbg_print_str("ACK sent\n");
		}
	}
  }
    4262:	e7a4      	b.n	41ae <main+0x2a>
    4264:	00002bf1 	.word	0x00002bf1
    4268:	00003479 	.word	0x00003479
    426c:	000033c1 	.word	0x000033c1
    4270:	000046c0 	.word	0x000046c0
    4274:	00003ef5 	.word	0x00003ef5
    4278:	000046d8 	.word	0x000046d8
    427c:	000043c1 	.word	0x000043c1
    4280:	0000458d 	.word	0x0000458d
    4284:	00003a0d 	.word	0x00003a0d
    4288:	00003e99 	.word	0x00003e99
    428c:	2000013e 	.word	0x2000013e
    4290:	200001c4 	.word	0x200001c4
    4294:	00003b09 	.word	0x00003b09
    4298:	000046d4 	.word	0x000046d4
    429c:	00003b3d 	.word	0x00003b3d

000042a0 <__aeabi_uidiv>:
    42a0:	2200      	movs	r2, #0
    42a2:	0843      	lsrs	r3, r0, #1
    42a4:	428b      	cmp	r3, r1
    42a6:	d374      	bcc.n	4392 <__aeabi_uidiv+0xf2>
    42a8:	0903      	lsrs	r3, r0, #4
    42aa:	428b      	cmp	r3, r1
    42ac:	d35f      	bcc.n	436e <__aeabi_uidiv+0xce>
    42ae:	0a03      	lsrs	r3, r0, #8
    42b0:	428b      	cmp	r3, r1
    42b2:	d344      	bcc.n	433e <__aeabi_uidiv+0x9e>
    42b4:	0b03      	lsrs	r3, r0, #12
    42b6:	428b      	cmp	r3, r1
    42b8:	d328      	bcc.n	430c <__aeabi_uidiv+0x6c>
    42ba:	0c03      	lsrs	r3, r0, #16
    42bc:	428b      	cmp	r3, r1
    42be:	d30d      	bcc.n	42dc <__aeabi_uidiv+0x3c>
    42c0:	22ff      	movs	r2, #255	; 0xff
    42c2:	0209      	lsls	r1, r1, #8
    42c4:	ba12      	rev	r2, r2
    42c6:	0c03      	lsrs	r3, r0, #16
    42c8:	428b      	cmp	r3, r1
    42ca:	d302      	bcc.n	42d2 <__aeabi_uidiv+0x32>
    42cc:	1212      	asrs	r2, r2, #8
    42ce:	0209      	lsls	r1, r1, #8
    42d0:	d065      	beq.n	439e <__aeabi_uidiv+0xfe>
    42d2:	0b03      	lsrs	r3, r0, #12
    42d4:	428b      	cmp	r3, r1
    42d6:	d319      	bcc.n	430c <__aeabi_uidiv+0x6c>
    42d8:	e000      	b.n	42dc <__aeabi_uidiv+0x3c>
    42da:	0a09      	lsrs	r1, r1, #8
    42dc:	0bc3      	lsrs	r3, r0, #15
    42de:	428b      	cmp	r3, r1
    42e0:	d301      	bcc.n	42e6 <__aeabi_uidiv+0x46>
    42e2:	03cb      	lsls	r3, r1, #15
    42e4:	1ac0      	subs	r0, r0, r3
    42e6:	4152      	adcs	r2, r2
    42e8:	0b83      	lsrs	r3, r0, #14
    42ea:	428b      	cmp	r3, r1
    42ec:	d301      	bcc.n	42f2 <__aeabi_uidiv+0x52>
    42ee:	038b      	lsls	r3, r1, #14
    42f0:	1ac0      	subs	r0, r0, r3
    42f2:	4152      	adcs	r2, r2
    42f4:	0b43      	lsrs	r3, r0, #13
    42f6:	428b      	cmp	r3, r1
    42f8:	d301      	bcc.n	42fe <__aeabi_uidiv+0x5e>
    42fa:	034b      	lsls	r3, r1, #13
    42fc:	1ac0      	subs	r0, r0, r3
    42fe:	4152      	adcs	r2, r2
    4300:	0b03      	lsrs	r3, r0, #12
    4302:	428b      	cmp	r3, r1
    4304:	d301      	bcc.n	430a <__aeabi_uidiv+0x6a>
    4306:	030b      	lsls	r3, r1, #12
    4308:	1ac0      	subs	r0, r0, r3
    430a:	4152      	adcs	r2, r2
    430c:	0ac3      	lsrs	r3, r0, #11
    430e:	428b      	cmp	r3, r1
    4310:	d301      	bcc.n	4316 <__aeabi_uidiv+0x76>
    4312:	02cb      	lsls	r3, r1, #11
    4314:	1ac0      	subs	r0, r0, r3
    4316:	4152      	adcs	r2, r2
    4318:	0a83      	lsrs	r3, r0, #10
    431a:	428b      	cmp	r3, r1
    431c:	d301      	bcc.n	4322 <__aeabi_uidiv+0x82>
    431e:	028b      	lsls	r3, r1, #10
    4320:	1ac0      	subs	r0, r0, r3
    4322:	4152      	adcs	r2, r2
    4324:	0a43      	lsrs	r3, r0, #9
    4326:	428b      	cmp	r3, r1
    4328:	d301      	bcc.n	432e <__aeabi_uidiv+0x8e>
    432a:	024b      	lsls	r3, r1, #9
    432c:	1ac0      	subs	r0, r0, r3
    432e:	4152      	adcs	r2, r2
    4330:	0a03      	lsrs	r3, r0, #8
    4332:	428b      	cmp	r3, r1
    4334:	d301      	bcc.n	433a <__aeabi_uidiv+0x9a>
    4336:	020b      	lsls	r3, r1, #8
    4338:	1ac0      	subs	r0, r0, r3
    433a:	4152      	adcs	r2, r2
    433c:	d2cd      	bcs.n	42da <__aeabi_uidiv+0x3a>
    433e:	09c3      	lsrs	r3, r0, #7
    4340:	428b      	cmp	r3, r1
    4342:	d301      	bcc.n	4348 <__aeabi_uidiv+0xa8>
    4344:	01cb      	lsls	r3, r1, #7
    4346:	1ac0      	subs	r0, r0, r3
    4348:	4152      	adcs	r2, r2
    434a:	0983      	lsrs	r3, r0, #6
    434c:	428b      	cmp	r3, r1
    434e:	d301      	bcc.n	4354 <__aeabi_uidiv+0xb4>
    4350:	018b      	lsls	r3, r1, #6
    4352:	1ac0      	subs	r0, r0, r3
    4354:	4152      	adcs	r2, r2
    4356:	0943      	lsrs	r3, r0, #5
    4358:	428b      	cmp	r3, r1
    435a:	d301      	bcc.n	4360 <__aeabi_uidiv+0xc0>
    435c:	014b      	lsls	r3, r1, #5
    435e:	1ac0      	subs	r0, r0, r3
    4360:	4152      	adcs	r2, r2
    4362:	0903      	lsrs	r3, r0, #4
    4364:	428b      	cmp	r3, r1
    4366:	d301      	bcc.n	436c <__aeabi_uidiv+0xcc>
    4368:	010b      	lsls	r3, r1, #4
    436a:	1ac0      	subs	r0, r0, r3
    436c:	4152      	adcs	r2, r2
    436e:	08c3      	lsrs	r3, r0, #3
    4370:	428b      	cmp	r3, r1
    4372:	d301      	bcc.n	4378 <__aeabi_uidiv+0xd8>
    4374:	00cb      	lsls	r3, r1, #3
    4376:	1ac0      	subs	r0, r0, r3
    4378:	4152      	adcs	r2, r2
    437a:	0883      	lsrs	r3, r0, #2
    437c:	428b      	cmp	r3, r1
    437e:	d301      	bcc.n	4384 <__aeabi_uidiv+0xe4>
    4380:	008b      	lsls	r3, r1, #2
    4382:	1ac0      	subs	r0, r0, r3
    4384:	4152      	adcs	r2, r2
    4386:	0843      	lsrs	r3, r0, #1
    4388:	428b      	cmp	r3, r1
    438a:	d301      	bcc.n	4390 <__aeabi_uidiv+0xf0>
    438c:	004b      	lsls	r3, r1, #1
    438e:	1ac0      	subs	r0, r0, r3
    4390:	4152      	adcs	r2, r2
    4392:	1a41      	subs	r1, r0, r1
    4394:	d200      	bcs.n	4398 <__aeabi_uidiv+0xf8>
    4396:	4601      	mov	r1, r0
    4398:	4152      	adcs	r2, r2
    439a:	4610      	mov	r0, r2
    439c:	4770      	bx	lr
    439e:	e7ff      	b.n	43a0 <__aeabi_uidiv+0x100>
    43a0:	b501      	push	{r0, lr}
    43a2:	2000      	movs	r0, #0
    43a4:	f000 f8fc 	bl	45a0 <__aeabi_idiv0>
    43a8:	bd02      	pop	{r1, pc}
    43aa:	46c0      	nop			; (mov r8, r8)

000043ac <__aeabi_uidivmod>:
    43ac:	2900      	cmp	r1, #0
    43ae:	d0f7      	beq.n	43a0 <__aeabi_uidiv+0x100>
    43b0:	b503      	push	{r0, r1, lr}
    43b2:	f7ff ff75 	bl	42a0 <__aeabi_uidiv>
    43b6:	bc0e      	pop	{r1, r2, r3}
    43b8:	4342      	muls	r2, r0
    43ba:	1a89      	subs	r1, r1, r2
    43bc:	4718      	bx	r3
    43be:	46c0      	nop			; (mov r8, r8)

000043c0 <__aeabi_idiv>:
    43c0:	4603      	mov	r3, r0
    43c2:	430b      	orrs	r3, r1
    43c4:	d47f      	bmi.n	44c6 <__aeabi_idiv+0x106>
    43c6:	2200      	movs	r2, #0
    43c8:	0843      	lsrs	r3, r0, #1
    43ca:	428b      	cmp	r3, r1
    43cc:	d374      	bcc.n	44b8 <__aeabi_idiv+0xf8>
    43ce:	0903      	lsrs	r3, r0, #4
    43d0:	428b      	cmp	r3, r1
    43d2:	d35f      	bcc.n	4494 <__aeabi_idiv+0xd4>
    43d4:	0a03      	lsrs	r3, r0, #8
    43d6:	428b      	cmp	r3, r1
    43d8:	d344      	bcc.n	4464 <__aeabi_idiv+0xa4>
    43da:	0b03      	lsrs	r3, r0, #12
    43dc:	428b      	cmp	r3, r1
    43de:	d328      	bcc.n	4432 <__aeabi_idiv+0x72>
    43e0:	0c03      	lsrs	r3, r0, #16
    43e2:	428b      	cmp	r3, r1
    43e4:	d30d      	bcc.n	4402 <__aeabi_idiv+0x42>
    43e6:	22ff      	movs	r2, #255	; 0xff
    43e8:	0209      	lsls	r1, r1, #8
    43ea:	ba12      	rev	r2, r2
    43ec:	0c03      	lsrs	r3, r0, #16
    43ee:	428b      	cmp	r3, r1
    43f0:	d302      	bcc.n	43f8 <__aeabi_idiv+0x38>
    43f2:	1212      	asrs	r2, r2, #8
    43f4:	0209      	lsls	r1, r1, #8
    43f6:	d065      	beq.n	44c4 <__aeabi_idiv+0x104>
    43f8:	0b03      	lsrs	r3, r0, #12
    43fa:	428b      	cmp	r3, r1
    43fc:	d319      	bcc.n	4432 <__aeabi_idiv+0x72>
    43fe:	e000      	b.n	4402 <__aeabi_idiv+0x42>
    4400:	0a09      	lsrs	r1, r1, #8
    4402:	0bc3      	lsrs	r3, r0, #15
    4404:	428b      	cmp	r3, r1
    4406:	d301      	bcc.n	440c <__aeabi_idiv+0x4c>
    4408:	03cb      	lsls	r3, r1, #15
    440a:	1ac0      	subs	r0, r0, r3
    440c:	4152      	adcs	r2, r2
    440e:	0b83      	lsrs	r3, r0, #14
    4410:	428b      	cmp	r3, r1
    4412:	d301      	bcc.n	4418 <__aeabi_idiv+0x58>
    4414:	038b      	lsls	r3, r1, #14
    4416:	1ac0      	subs	r0, r0, r3
    4418:	4152      	adcs	r2, r2
    441a:	0b43      	lsrs	r3, r0, #13
    441c:	428b      	cmp	r3, r1
    441e:	d301      	bcc.n	4424 <__aeabi_idiv+0x64>
    4420:	034b      	lsls	r3, r1, #13
    4422:	1ac0      	subs	r0, r0, r3
    4424:	4152      	adcs	r2, r2
    4426:	0b03      	lsrs	r3, r0, #12
    4428:	428b      	cmp	r3, r1
    442a:	d301      	bcc.n	4430 <__aeabi_idiv+0x70>
    442c:	030b      	lsls	r3, r1, #12
    442e:	1ac0      	subs	r0, r0, r3
    4430:	4152      	adcs	r2, r2
    4432:	0ac3      	lsrs	r3, r0, #11
    4434:	428b      	cmp	r3, r1
    4436:	d301      	bcc.n	443c <__aeabi_idiv+0x7c>
    4438:	02cb      	lsls	r3, r1, #11
    443a:	1ac0      	subs	r0, r0, r3
    443c:	4152      	adcs	r2, r2
    443e:	0a83      	lsrs	r3, r0, #10
    4440:	428b      	cmp	r3, r1
    4442:	d301      	bcc.n	4448 <__aeabi_idiv+0x88>
    4444:	028b      	lsls	r3, r1, #10
    4446:	1ac0      	subs	r0, r0, r3
    4448:	4152      	adcs	r2, r2
    444a:	0a43      	lsrs	r3, r0, #9
    444c:	428b      	cmp	r3, r1
    444e:	d301      	bcc.n	4454 <__aeabi_idiv+0x94>
    4450:	024b      	lsls	r3, r1, #9
    4452:	1ac0      	subs	r0, r0, r3
    4454:	4152      	adcs	r2, r2
    4456:	0a03      	lsrs	r3, r0, #8
    4458:	428b      	cmp	r3, r1
    445a:	d301      	bcc.n	4460 <__aeabi_idiv+0xa0>
    445c:	020b      	lsls	r3, r1, #8
    445e:	1ac0      	subs	r0, r0, r3
    4460:	4152      	adcs	r2, r2
    4462:	d2cd      	bcs.n	4400 <__aeabi_idiv+0x40>
    4464:	09c3      	lsrs	r3, r0, #7
    4466:	428b      	cmp	r3, r1
    4468:	d301      	bcc.n	446e <__aeabi_idiv+0xae>
    446a:	01cb      	lsls	r3, r1, #7
    446c:	1ac0      	subs	r0, r0, r3
    446e:	4152      	adcs	r2, r2
    4470:	0983      	lsrs	r3, r0, #6
    4472:	428b      	cmp	r3, r1
    4474:	d301      	bcc.n	447a <__aeabi_idiv+0xba>
    4476:	018b      	lsls	r3, r1, #6
    4478:	1ac0      	subs	r0, r0, r3
    447a:	4152      	adcs	r2, r2
    447c:	0943      	lsrs	r3, r0, #5
    447e:	428b      	cmp	r3, r1
    4480:	d301      	bcc.n	4486 <__aeabi_idiv+0xc6>
    4482:	014b      	lsls	r3, r1, #5
    4484:	1ac0      	subs	r0, r0, r3
    4486:	4152      	adcs	r2, r2
    4488:	0903      	lsrs	r3, r0, #4
    448a:	428b      	cmp	r3, r1
    448c:	d301      	bcc.n	4492 <__aeabi_idiv+0xd2>
    448e:	010b      	lsls	r3, r1, #4
    4490:	1ac0      	subs	r0, r0, r3
    4492:	4152      	adcs	r2, r2
    4494:	08c3      	lsrs	r3, r0, #3
    4496:	428b      	cmp	r3, r1
    4498:	d301      	bcc.n	449e <__aeabi_idiv+0xde>
    449a:	00cb      	lsls	r3, r1, #3
    449c:	1ac0      	subs	r0, r0, r3
    449e:	4152      	adcs	r2, r2
    44a0:	0883      	lsrs	r3, r0, #2
    44a2:	428b      	cmp	r3, r1
    44a4:	d301      	bcc.n	44aa <__aeabi_idiv+0xea>
    44a6:	008b      	lsls	r3, r1, #2
    44a8:	1ac0      	subs	r0, r0, r3
    44aa:	4152      	adcs	r2, r2
    44ac:	0843      	lsrs	r3, r0, #1
    44ae:	428b      	cmp	r3, r1
    44b0:	d301      	bcc.n	44b6 <__aeabi_idiv+0xf6>
    44b2:	004b      	lsls	r3, r1, #1
    44b4:	1ac0      	subs	r0, r0, r3
    44b6:	4152      	adcs	r2, r2
    44b8:	1a41      	subs	r1, r0, r1
    44ba:	d200      	bcs.n	44be <__aeabi_idiv+0xfe>
    44bc:	4601      	mov	r1, r0
    44be:	4152      	adcs	r2, r2
    44c0:	4610      	mov	r0, r2
    44c2:	4770      	bx	lr
    44c4:	e05d      	b.n	4582 <__aeabi_idiv+0x1c2>
    44c6:	0fca      	lsrs	r2, r1, #31
    44c8:	d000      	beq.n	44cc <__aeabi_idiv+0x10c>
    44ca:	4249      	negs	r1, r1
    44cc:	1003      	asrs	r3, r0, #32
    44ce:	d300      	bcc.n	44d2 <__aeabi_idiv+0x112>
    44d0:	4240      	negs	r0, r0
    44d2:	4053      	eors	r3, r2
    44d4:	2200      	movs	r2, #0
    44d6:	469c      	mov	ip, r3
    44d8:	0903      	lsrs	r3, r0, #4
    44da:	428b      	cmp	r3, r1
    44dc:	d32d      	bcc.n	453a <__aeabi_idiv+0x17a>
    44de:	0a03      	lsrs	r3, r0, #8
    44e0:	428b      	cmp	r3, r1
    44e2:	d312      	bcc.n	450a <__aeabi_idiv+0x14a>
    44e4:	22fc      	movs	r2, #252	; 0xfc
    44e6:	0189      	lsls	r1, r1, #6
    44e8:	ba12      	rev	r2, r2
    44ea:	0a03      	lsrs	r3, r0, #8
    44ec:	428b      	cmp	r3, r1
    44ee:	d30c      	bcc.n	450a <__aeabi_idiv+0x14a>
    44f0:	0189      	lsls	r1, r1, #6
    44f2:	1192      	asrs	r2, r2, #6
    44f4:	428b      	cmp	r3, r1
    44f6:	d308      	bcc.n	450a <__aeabi_idiv+0x14a>
    44f8:	0189      	lsls	r1, r1, #6
    44fa:	1192      	asrs	r2, r2, #6
    44fc:	428b      	cmp	r3, r1
    44fe:	d304      	bcc.n	450a <__aeabi_idiv+0x14a>
    4500:	0189      	lsls	r1, r1, #6
    4502:	d03a      	beq.n	457a <__aeabi_idiv+0x1ba>
    4504:	1192      	asrs	r2, r2, #6
    4506:	e000      	b.n	450a <__aeabi_idiv+0x14a>
    4508:	0989      	lsrs	r1, r1, #6
    450a:	09c3      	lsrs	r3, r0, #7
    450c:	428b      	cmp	r3, r1
    450e:	d301      	bcc.n	4514 <__aeabi_idiv+0x154>
    4510:	01cb      	lsls	r3, r1, #7
    4512:	1ac0      	subs	r0, r0, r3
    4514:	4152      	adcs	r2, r2
    4516:	0983      	lsrs	r3, r0, #6
    4518:	428b      	cmp	r3, r1
    451a:	d301      	bcc.n	4520 <__aeabi_idiv+0x160>
    451c:	018b      	lsls	r3, r1, #6
    451e:	1ac0      	subs	r0, r0, r3
    4520:	4152      	adcs	r2, r2
    4522:	0943      	lsrs	r3, r0, #5
    4524:	428b      	cmp	r3, r1
    4526:	d301      	bcc.n	452c <__aeabi_idiv+0x16c>
    4528:	014b      	lsls	r3, r1, #5
    452a:	1ac0      	subs	r0, r0, r3
    452c:	4152      	adcs	r2, r2
    452e:	0903      	lsrs	r3, r0, #4
    4530:	428b      	cmp	r3, r1
    4532:	d301      	bcc.n	4538 <__aeabi_idiv+0x178>
    4534:	010b      	lsls	r3, r1, #4
    4536:	1ac0      	subs	r0, r0, r3
    4538:	4152      	adcs	r2, r2
    453a:	08c3      	lsrs	r3, r0, #3
    453c:	428b      	cmp	r3, r1
    453e:	d301      	bcc.n	4544 <__aeabi_idiv+0x184>
    4540:	00cb      	lsls	r3, r1, #3
    4542:	1ac0      	subs	r0, r0, r3
    4544:	4152      	adcs	r2, r2
    4546:	0883      	lsrs	r3, r0, #2
    4548:	428b      	cmp	r3, r1
    454a:	d301      	bcc.n	4550 <__aeabi_idiv+0x190>
    454c:	008b      	lsls	r3, r1, #2
    454e:	1ac0      	subs	r0, r0, r3
    4550:	4152      	adcs	r2, r2
    4552:	d2d9      	bcs.n	4508 <__aeabi_idiv+0x148>
    4554:	0843      	lsrs	r3, r0, #1
    4556:	428b      	cmp	r3, r1
    4558:	d301      	bcc.n	455e <__aeabi_idiv+0x19e>
    455a:	004b      	lsls	r3, r1, #1
    455c:	1ac0      	subs	r0, r0, r3
    455e:	4152      	adcs	r2, r2
    4560:	1a41      	subs	r1, r0, r1
    4562:	d200      	bcs.n	4566 <__aeabi_idiv+0x1a6>
    4564:	4601      	mov	r1, r0
    4566:	4663      	mov	r3, ip
    4568:	4152      	adcs	r2, r2
    456a:	105b      	asrs	r3, r3, #1
    456c:	4610      	mov	r0, r2
    456e:	d301      	bcc.n	4574 <__aeabi_idiv+0x1b4>
    4570:	4240      	negs	r0, r0
    4572:	2b00      	cmp	r3, #0
    4574:	d500      	bpl.n	4578 <__aeabi_idiv+0x1b8>
    4576:	4249      	negs	r1, r1
    4578:	4770      	bx	lr
    457a:	4663      	mov	r3, ip
    457c:	105b      	asrs	r3, r3, #1
    457e:	d300      	bcc.n	4582 <__aeabi_idiv+0x1c2>
    4580:	4240      	negs	r0, r0
    4582:	b501      	push	{r0, lr}
    4584:	2000      	movs	r0, #0
    4586:	f000 f80b 	bl	45a0 <__aeabi_idiv0>
    458a:	bd02      	pop	{r1, pc}

0000458c <__aeabi_idivmod>:
    458c:	2900      	cmp	r1, #0
    458e:	d0f8      	beq.n	4582 <__aeabi_idiv+0x1c2>
    4590:	b503      	push	{r0, r1, lr}
    4592:	f7ff ff15 	bl	43c0 <__aeabi_idiv>
    4596:	bc0e      	pop	{r1, r2, r3}
    4598:	4342      	muls	r2, r0
    459a:	1a89      	subs	r1, r1, r2
    459c:	4718      	bx	r3
    459e:	46c0      	nop			; (mov r8, r8)

000045a0 <__aeabi_idiv0>:
    45a0:	4770      	bx	lr
    45a2:	46c0      	nop			; (mov r8, r8)

000045a4 <__libc_init_array>:
    45a4:	4b0e      	ldr	r3, [pc, #56]	; (45e0 <__libc_init_array+0x3c>)
    45a6:	b570      	push	{r4, r5, r6, lr}
    45a8:	2500      	movs	r5, #0
    45aa:	1c1e      	adds	r6, r3, #0
    45ac:	4c0d      	ldr	r4, [pc, #52]	; (45e4 <__libc_init_array+0x40>)
    45ae:	1ae4      	subs	r4, r4, r3
    45b0:	10a4      	asrs	r4, r4, #2
    45b2:	42a5      	cmp	r5, r4
    45b4:	d004      	beq.n	45c0 <__libc_init_array+0x1c>
    45b6:	00ab      	lsls	r3, r5, #2
    45b8:	58f3      	ldr	r3, [r6, r3]
    45ba:	4798      	blx	r3
    45bc:	3501      	adds	r5, #1
    45be:	e7f8      	b.n	45b2 <__libc_init_array+0xe>
    45c0:	f000 f892 	bl	46e8 <_init>
    45c4:	4b08      	ldr	r3, [pc, #32]	; (45e8 <__libc_init_array+0x44>)
    45c6:	2500      	movs	r5, #0
    45c8:	1c1e      	adds	r6, r3, #0
    45ca:	4c08      	ldr	r4, [pc, #32]	; (45ec <__libc_init_array+0x48>)
    45cc:	1ae4      	subs	r4, r4, r3
    45ce:	10a4      	asrs	r4, r4, #2
    45d0:	42a5      	cmp	r5, r4
    45d2:	d004      	beq.n	45de <__libc_init_array+0x3a>
    45d4:	00ab      	lsls	r3, r5, #2
    45d6:	58f3      	ldr	r3, [r6, r3]
    45d8:	4798      	blx	r3
    45da:	3501      	adds	r5, #1
    45dc:	e7f8      	b.n	45d0 <__libc_init_array+0x2c>
    45de:	bd70      	pop	{r4, r5, r6, pc}
    45e0:	000046f4 	.word	0x000046f4
    45e4:	000046f4 	.word	0x000046f4
    45e8:	000046f4 	.word	0x000046f4
    45ec:	000046f8 	.word	0x000046f8

000045f0 <memcpy>:
    45f0:	2300      	movs	r3, #0
    45f2:	b510      	push	{r4, lr}
    45f4:	4293      	cmp	r3, r2
    45f6:	d003      	beq.n	4600 <memcpy+0x10>
    45f8:	5ccc      	ldrb	r4, [r1, r3]
    45fa:	54c4      	strb	r4, [r0, r3]
    45fc:	3301      	adds	r3, #1
    45fe:	e7f9      	b.n	45f4 <memcpy+0x4>
    4600:	bd10      	pop	{r4, pc}

00004602 <memset>:
    4602:	1c03      	adds	r3, r0, #0
    4604:	1882      	adds	r2, r0, r2
    4606:	4293      	cmp	r3, r2
    4608:	d002      	beq.n	4610 <memset+0xe>
    460a:	7019      	strb	r1, [r3, #0]
    460c:	3301      	adds	r3, #1
    460e:	e7fa      	b.n	4606 <memset+0x4>
    4610:	4770      	bx	lr
	...

00004614 <_tcc_intflag>:
    4614:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    4624:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    4634:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    4644:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    4654:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    4664:	212e 0000 21aa 0000 21aa 0000 2150 0000     .!...!...!..P!..
    4674:	214a 0000 2156 0000 2134 0000 215c 0000     J!..V!..4!..\!..
    4684:	2190 0000 2350 0000 23a0 0000 23a0 0000     .!..P#...#...#..
    4694:	239c 0000 2342 0000 2362 0000 2332 0000     .#..B#..b#..2#..
    46a4:	2374 0000 2386 0000 38c4 0000 389c 0000     t#...#...8...8..
    46b4:	3874 0000 383a 0000 3800 0000 4f54 5350     t8..:8...8..TOPS
    46c4:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....
    46d4:	0000 0000 6548 6c6c 206f 6f57 6c72 2164     ....Hello World!
    46e4:	2020 0020                                      .

000046e8 <_init>:
    46e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ee:	bc08      	pop	{r3}
    46f0:	469e      	mov	lr, r3
    46f2:	4770      	bx	lr

000046f4 <__init_array_start>:
    46f4:	000000dd 	.word	0x000000dd

000046f8 <_fini>:
    46f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46fe:	bc08      	pop	{r3}
    4700:	469e      	mov	lr, r3
    4702:	4770      	bx	lr

00004704 <__fini_array_start>:
    4704:	000000b5 	.word	0x000000b5
