
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021f8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000021f8  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000258  20000004  000021fc  00010004  2**2
                  ALLOC
  3 .stack        00002004  2000025c  00002454  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024311  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026e8  00000000  00000000  00034398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000389c  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009f8  00000000  00000000  0003a31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008f8  00000000  00000000  0003ad14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007228  00000000  00000000  0003b60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b77e  00000000  00000000  00042834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fc50  00000000  00000000  0004dfb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000222c  00000000  00000000  000ddc04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
       0:	20002260 	.word	0x20002260
       4:	00001eb5 	.word	0x00001eb5
       8:	00001fad 	.word	0x00001fad
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       c:	00001fad 	.word	0x00001fad
	...

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      2c:	00001fad 	.word	0x00001fad
	...

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      38:	00001fad 	.word	0x00001fad
      3c:	00001fad 	.word	0x00001fad
      40:	00001fad 	.word	0x00001fad
      44:	00001fad 	.word	0x00001fad
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      48:	00001fad 	.word	0x00001fad
      4c:	0000040d 	.word	0x0000040d
      50:	000004ed 	.word	0x000004ed
				while (rtc_count_is_syncing(module)) {
      54:	00001fad 	.word	0x00001fad
      58:	00001fad 	.word	0x00001fad
      5c:	00001fad 	.word	0x00001fad
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      60:	00001fad 	.word	0x00001fad
      64:	00001319 	.word	0x00001319
      68:	0000132d 	.word	0x0000132d
      6c:	00001341 	.word	0x00001341
      70:	00001355 	.word	0x00001355
      74:	00001369 	.word	0x00001369
      78:	0000137d 	.word	0x0000137d
      7c:	00001171 	.word	0x00001171
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      80:	00001185 	.word	0x00001185
      84:	00001199 	.word	0x00001199
      88:	00001225 	.word	0x00001225
      8c:	00001239 	.word	0x00001239
      90:	0000124d 	.word	0x0000124d
	...
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
      9c:	00001fad 	.word	0x00001fad
      a0:	00001fad 	.word	0x00001fad
      a4:	00001fad 	.word	0x00001fad
      a8:	00001fad 	.word	0x00001fad

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      ac:	00001fad 	.word	0x00001fad
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
      b4:	b510      	push	{r4, lr}
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
				while (rtc_count_is_syncing(module)) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	000021f8 	.word	0x000021f8

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	000021f8 	.word	0x000021f8
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     108:	20000008 	.word	0x20000008
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     10c:	000021f8 	.word	0x000021f8
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
}
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
     136:	1dfb      	adds	r3, r7, #7
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	1c02      	adds	r2, r0, #0
     18c:	1dfb      	adds	r3, r7, #7
     18e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     190:	4b06      	ldr	r3, [pc, #24]	; (1ac <system_interrupt_enable+0x28>)
     192:	1dfa      	adds	r2, r7, #7
     194:	7812      	ldrb	r2, [r2, #0]
     196:	1c11      	adds	r1, r2, #0
     198:	221f      	movs	r2, #31
     19a:	400a      	ands	r2, r1
     19c:	2101      	movs	r1, #1
     19e:	4091      	lsls	r1, r2
     1a0:	1c0a      	adds	r2, r1, #0
     1a2:	601a      	str	r2, [r3, #0]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	e000e100 	.word	0xe000e100

000001b0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1b6:	4b10      	ldr	r3, [pc, #64]	; (1f8 <extint_is_syncing+0x48>)
     1b8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1ba:	2300      	movs	r3, #0
     1bc:	607b      	str	r3, [r7, #4]
     1be:	e012      	b.n	1e6 <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1c0:	687b      	ldr	r3, [r7, #4]
     1c2:	009b      	lsls	r3, r3, #2
     1c4:	2208      	movs	r2, #8
     1c6:	4694      	mov	ip, r2
     1c8:	44bc      	add	ip, r7
     1ca:	4463      	add	r3, ip
     1cc:	3b08      	subs	r3, #8
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	785b      	ldrb	r3, [r3, #1]
     1d2:	b2db      	uxtb	r3, r3
     1d4:	b2db      	uxtb	r3, r3
     1d6:	b25b      	sxtb	r3, r3
     1d8:	2b00      	cmp	r3, #0
     1da:	da01      	bge.n	1e0 <extint_is_syncing+0x30>
			return true;
     1dc:	2301      	movs	r3, #1
     1de:	e006      	b.n	1ee <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	3301      	adds	r3, #1
     1e4:	607b      	str	r3, [r7, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	2b00      	cmp	r3, #0
     1ea:	d0e9      	beq.n	1c0 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     1ec:	2300      	movs	r3, #0
}
     1ee:	1c18      	adds	r0, r3, #0
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	40001800 	.word	0x40001800

000001fc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     202:	4b2c      	ldr	r3, [pc, #176]	; (2b4 <_system_extint_init+0xb8>)
     204:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     206:	2000      	movs	r0, #0
     208:	2140      	movs	r1, #64	; 0x40
     20a:	4b2b      	ldr	r3, [pc, #172]	; (2b8 <_system_extint_init+0xbc>)
     20c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     20e:	1c3b      	adds	r3, r7, #0
     210:	1c18      	adds	r0, r3, #0
     212:	4b2a      	ldr	r3, [pc, #168]	; (2bc <_system_extint_init+0xc0>)
     214:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     216:	1c3b      	adds	r3, r7, #0
     218:	2200      	movs	r2, #0
     21a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     21c:	1c3b      	adds	r3, r7, #0
     21e:	2005      	movs	r0, #5
     220:	1c19      	adds	r1, r3, #0
     222:	4b27      	ldr	r3, [pc, #156]	; (2c0 <_system_extint_init+0xc4>)
     224:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     226:	2005      	movs	r0, #5
     228:	4b26      	ldr	r3, [pc, #152]	; (2c4 <_system_extint_init+0xc8>)
     22a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22c:	2300      	movs	r3, #0
     22e:	60fb      	str	r3, [r7, #12]
     230:	e018      	b.n	264 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     232:	68fb      	ldr	r3, [r7, #12]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b0c      	subs	r3, #12
     240:	681a      	ldr	r2, [r3, #0]
     242:	68fb      	ldr	r3, [r7, #12]
     244:	009b      	lsls	r3, r3, #2
     246:	2110      	movs	r1, #16
     248:	468c      	mov	ip, r1
     24a:	44bc      	add	ip, r7
     24c:	4463      	add	r3, ip
     24e:	3b0c      	subs	r3, #12
     250:	681b      	ldr	r3, [r3, #0]
     252:	781b      	ldrb	r3, [r3, #0]
     254:	b2db      	uxtb	r3, r3
     256:	2101      	movs	r1, #1
     258:	430b      	orrs	r3, r1
     25a:	b2db      	uxtb	r3, r3
     25c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     25e:	68fb      	ldr	r3, [r7, #12]
     260:	3301      	adds	r3, #1
     262:	60fb      	str	r3, [r7, #12]
     264:	68fb      	ldr	r3, [r7, #12]
     266:	2b00      	cmp	r3, #0
     268:	d0e3      	beq.n	232 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	4b16      	ldr	r3, [pc, #88]	; (2c8 <_system_extint_init+0xcc>)
     26e:	4798      	blx	r3
     270:	1e03      	subs	r3, r0, #0
     272:	d1fb      	bne.n	26c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     274:	230b      	movs	r3, #11
     276:	18fb      	adds	r3, r7, r3
     278:	2200      	movs	r2, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	e00d      	b.n	29a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     27e:	230b      	movs	r3, #11
     280:	18fb      	adds	r3, r7, r3
     282:	781a      	ldrb	r2, [r3, #0]
     284:	4b11      	ldr	r3, [pc, #68]	; (2cc <_system_extint_init+0xd0>)
     286:	0092      	lsls	r2, r2, #2
     288:	2100      	movs	r1, #0
     28a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     28c:	230b      	movs	r3, #11
     28e:	18fb      	adds	r3, r7, r3
     290:	781a      	ldrb	r2, [r3, #0]
     292:	230b      	movs	r3, #11
     294:	18fb      	adds	r3, r7, r3
     296:	3201      	adds	r2, #1
     298:	701a      	strb	r2, [r3, #0]
     29a:	230b      	movs	r3, #11
     29c:	18fb      	adds	r3, r7, r3
     29e:	781b      	ldrb	r3, [r3, #0]
     2a0:	2b0f      	cmp	r3, #15
     2a2:	d9ec      	bls.n	27e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     2a4:	2004      	movs	r0, #4
     2a6:	4b0a      	ldr	r3, [pc, #40]	; (2d0 <_system_extint_init+0xd4>)
     2a8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     2aa:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <_system_extint_init+0xd8>)
     2ac:	4798      	blx	r3
}
     2ae:	46bd      	mov	sp, r7
     2b0:	b004      	add	sp, #16
     2b2:	bd80      	pop	{r7, pc}
     2b4:	40001800 	.word	0x40001800
     2b8:	00000129 	.word	0x00000129
     2bc:	00000115 	.word	0x00000115
     2c0:	00001b9d 	.word	0x00001b9d
     2c4:	00001be1 	.word	0x00001be1
     2c8:	000001b1 	.word	0x000001b1
     2cc:	20000058 	.word	0x20000058
     2d0:	00000185 	.word	0x00000185
     2d4:	000002d9 	.word	0x000002d9

000002d8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     2d8:	b580      	push	{r7, lr}
     2da:	b082      	sub	sp, #8
     2dc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2de:	4b14      	ldr	r3, [pc, #80]	; (330 <_extint_enable+0x58>)
     2e0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2e2:	2300      	movs	r3, #0
     2e4:	607b      	str	r3, [r7, #4]
     2e6:	e018      	b.n	31a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	009b      	lsls	r3, r3, #2
     2ec:	2208      	movs	r2, #8
     2ee:	4694      	mov	ip, r2
     2f0:	44bc      	add	ip, r7
     2f2:	4463      	add	r3, ip
     2f4:	3b08      	subs	r3, #8
     2f6:	681a      	ldr	r2, [r3, #0]
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	009b      	lsls	r3, r3, #2
     2fc:	2108      	movs	r1, #8
     2fe:	468c      	mov	ip, r1
     300:	44bc      	add	ip, r7
     302:	4463      	add	r3, ip
     304:	3b08      	subs	r3, #8
     306:	681b      	ldr	r3, [r3, #0]
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	b2db      	uxtb	r3, r3
     30c:	2102      	movs	r1, #2
     30e:	430b      	orrs	r3, r1
     310:	b2db      	uxtb	r3, r3
     312:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     314:	687b      	ldr	r3, [r7, #4]
     316:	3301      	adds	r3, #1
     318:	607b      	str	r3, [r7, #4]
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	2b00      	cmp	r3, #0
     31e:	d0e3      	beq.n	2e8 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     320:	46c0      	nop			; (mov r8, r8)
     322:	4b04      	ldr	r3, [pc, #16]	; (334 <_extint_enable+0x5c>)
     324:	4798      	blx	r3
     326:	1e03      	subs	r3, r0, #0
     328:	d1fb      	bne.n	322 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     32a:	46bd      	mov	sp, r7
     32c:	b002      	add	sp, #8
     32e:	bd80      	pop	{r7, pc}
     330:	40001800 	.word	0x40001800
     334:	000001b1 	.word	0x000001b1

00000338 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     338:	b580      	push	{r7, lr}
     33a:	b086      	sub	sp, #24
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     340:	4b31      	ldr	r3, [pc, #196]	; (408 <_rtc_interrupt_handler+0xd0>)
     342:	687a      	ldr	r2, [r7, #4]
     344:	0092      	lsls	r2, r2, #2
     346:	58d3      	ldr	r3, [r2, r3]
     348:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     34a:	697b      	ldr	r3, [r7, #20]
     34c:	681b      	ldr	r3, [r3, #0]
     34e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     350:	230e      	movs	r3, #14
     352:	18fb      	adds	r3, r7, r3
     354:	697a      	ldr	r2, [r7, #20]
     356:	8ad2      	ldrh	r2, [r2, #22]
     358:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     35a:	697b      	ldr	r3, [r7, #20]
     35c:	8a9b      	ldrh	r3, [r3, #20]
     35e:	b29a      	uxth	r2, r3
     360:	230e      	movs	r3, #14
     362:	18fb      	adds	r3, r7, r3
     364:	210e      	movs	r1, #14
     366:	1879      	adds	r1, r7, r1
     368:	8809      	ldrh	r1, [r1, #0]
     36a:	400a      	ands	r2, r1
     36c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     36e:	693b      	ldr	r3, [r7, #16]
     370:	7a1b      	ldrb	r3, [r3, #8]
     372:	b2da      	uxtb	r2, r3
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     37a:	693b      	ldr	r3, [r7, #16]
     37c:	79db      	ldrb	r3, [r3, #7]
     37e:	b2db      	uxtb	r3, r3
     380:	b29a      	uxth	r2, r3
     382:	230c      	movs	r3, #12
     384:	18fb      	adds	r3, r7, r3
     386:	210c      	movs	r1, #12
     388:	1879      	adds	r1, r7, r1
     38a:	8809      	ldrh	r1, [r1, #0]
     38c:	400a      	ands	r2, r1
     38e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     390:	230c      	movs	r3, #12
     392:	18fb      	adds	r3, r7, r3
     394:	881b      	ldrh	r3, [r3, #0]
     396:	2280      	movs	r2, #128	; 0x80
     398:	4013      	ands	r3, r2
     39a:	d00c      	beq.n	3b6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     39c:	230e      	movs	r3, #14
     39e:	18fb      	adds	r3, r7, r3
     3a0:	881b      	ldrh	r3, [r3, #0]
     3a2:	2204      	movs	r2, #4
     3a4:	4013      	ands	r3, r2
     3a6:	d002      	beq.n	3ae <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     3a8:	697b      	ldr	r3, [r7, #20]
     3aa:	691b      	ldr	r3, [r3, #16]
     3ac:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     3ae:	693b      	ldr	r3, [r7, #16]
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	721a      	strb	r2, [r3, #8]
     3b4:	e024      	b.n	400 <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     3b6:	230c      	movs	r3, #12
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	881b      	ldrh	r3, [r3, #0]
     3bc:	2201      	movs	r2, #1
     3be:	4013      	ands	r3, r2
     3c0:	d00c      	beq.n	3dc <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     3c2:	230e      	movs	r3, #14
     3c4:	18fb      	adds	r3, r7, r3
     3c6:	881b      	ldrh	r3, [r3, #0]
     3c8:	2201      	movs	r2, #1
     3ca:	4013      	ands	r3, r2
     3cc:	d002      	beq.n	3d4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     3ce:	697b      	ldr	r3, [r7, #20]
     3d0:	689b      	ldr	r3, [r3, #8]
     3d2:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     3d4:	693b      	ldr	r3, [r7, #16]
     3d6:	2201      	movs	r2, #1
     3d8:	721a      	strb	r2, [r3, #8]
     3da:	e011      	b.n	400 <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     3dc:	230c      	movs	r3, #12
     3de:	18fb      	adds	r3, r7, r3
     3e0:	881b      	ldrh	r3, [r3, #0]
     3e2:	2202      	movs	r2, #2
     3e4:	4013      	ands	r3, r2
     3e6:	d00b      	beq.n	400 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     3e8:	230e      	movs	r3, #14
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	881b      	ldrh	r3, [r3, #0]
     3ee:	2202      	movs	r2, #2
     3f0:	4013      	ands	r3, r2
     3f2:	d002      	beq.n	3fa <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     3f4:	697b      	ldr	r3, [r7, #20]
     3f6:	68db      	ldr	r3, [r3, #12]
     3f8:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     3fa:	693b      	ldr	r3, [r7, #16]
     3fc:	2202      	movs	r2, #2
     3fe:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     400:	46bd      	mov	sp, r7
     402:	b006      	add	sp, #24
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	20000098 	.word	0x20000098

0000040c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     40c:	b580      	push	{r7, lr}
     40e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     410:	2000      	movs	r0, #0
     412:	4b02      	ldr	r3, [pc, #8]	; (41c <RTC_Handler+0x10>)
     414:	4798      	blx	r3
}
     416:	46bd      	mov	sp, r7
     418:	bd80      	pop	{r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	00000339 	.word	0x00000339

00000420 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
     426:	1c02      	adds	r2, r0, #0
     428:	1dfb      	adds	r3, r7, #7
     42a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	1dfa      	adds	r2, r7, #7
     432:	7812      	ldrb	r2, [r2, #0]
     434:	0952      	lsrs	r2, r2, #5
     436:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     438:	230f      	movs	r3, #15
     43a:	18fb      	adds	r3, r7, r3
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	2b00      	cmp	r3, #0
     440:	d10c      	bne.n	45c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     442:	4b09      	ldr	r3, [pc, #36]	; (468 <_extint_get_eic_from_channel+0x48>)
     444:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	781b      	ldrb	r3, [r3, #0]
     44c:	009b      	lsls	r3, r3, #2
     44e:	2210      	movs	r2, #16
     450:	4694      	mov	ip, r2
     452:	44bc      	add	ip, r7
     454:	4463      	add	r3, ip
     456:	3b08      	subs	r3, #8
     458:	681b      	ldr	r3, [r3, #0]
     45a:	e000      	b.n	45e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     45c:	2300      	movs	r3, #0
	}
}
     45e:	1c18      	adds	r0, r3, #0
     460:	46bd      	mov	sp, r7
     462:	b004      	add	sp, #16
     464:	bd80      	pop	{r7, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	40001800 	.word	0x40001800

0000046c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     46c:	b580      	push	{r7, lr}
     46e:	b084      	sub	sp, #16
     470:	af00      	add	r7, sp, #0
     472:	1c02      	adds	r2, r0, #0
     474:	1dfb      	adds	r3, r7, #7
     476:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     478:	1dfb      	adds	r3, r7, #7
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	1c18      	adds	r0, r3, #0
     47e:	4b0b      	ldr	r3, [pc, #44]	; (4ac <extint_chan_is_detected+0x40>)
     480:	4798      	blx	r3
     482:	1c03      	adds	r3, r0, #0
     484:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     486:	1dfb      	adds	r3, r7, #7
     488:	781b      	ldrb	r3, [r3, #0]
     48a:	221f      	movs	r2, #31
     48c:	4013      	ands	r3, r2
     48e:	2201      	movs	r2, #1
     490:	409a      	lsls	r2, r3
     492:	1c13      	adds	r3, r2, #0
     494:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     496:	68fb      	ldr	r3, [r7, #12]
     498:	691b      	ldr	r3, [r3, #16]
     49a:	68ba      	ldr	r2, [r7, #8]
     49c:	4013      	ands	r3, r2
     49e:	1e5a      	subs	r2, r3, #1
     4a0:	4193      	sbcs	r3, r2
     4a2:	b2db      	uxtb	r3, r3
}
     4a4:	1c18      	adds	r0, r3, #0
     4a6:	46bd      	mov	sp, r7
     4a8:	b004      	add	sp, #16
     4aa:	bd80      	pop	{r7, pc}
     4ac:	00000421 	.word	0x00000421

000004b0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	1c02      	adds	r2, r0, #0
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     4bc:	1dfb      	adds	r3, r7, #7
     4be:	781b      	ldrb	r3, [r3, #0]
     4c0:	1c18      	adds	r0, r3, #0
     4c2:	4b09      	ldr	r3, [pc, #36]	; (4e8 <extint_chan_clear_detected+0x38>)
     4c4:	4798      	blx	r3
     4c6:	1c03      	adds	r3, r0, #0
     4c8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     4ca:	1dfb      	adds	r3, r7, #7
     4cc:	781b      	ldrb	r3, [r3, #0]
     4ce:	221f      	movs	r2, #31
     4d0:	4013      	ands	r3, r2
     4d2:	2201      	movs	r2, #1
     4d4:	409a      	lsls	r2, r3
     4d6:	1c13      	adds	r3, r2, #0
     4d8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     4da:	68fb      	ldr	r3, [r7, #12]
     4dc:	68ba      	ldr	r2, [r7, #8]
     4de:	611a      	str	r2, [r3, #16]
}
     4e0:	46bd      	mov	sp, r7
     4e2:	b004      	add	sp, #16
     4e4:	bd80      	pop	{r7, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	00000421 	.word	0x00000421

000004ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4f0:	4b15      	ldr	r3, [pc, #84]	; (548 <EIC_Handler+0x5c>)
     4f2:	2200      	movs	r2, #0
     4f4:	701a      	strb	r2, [r3, #0]
     4f6:	e020      	b.n	53a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     4f8:	4b13      	ldr	r3, [pc, #76]	; (548 <EIC_Handler+0x5c>)
     4fa:	781b      	ldrb	r3, [r3, #0]
     4fc:	1c18      	adds	r0, r3, #0
     4fe:	4b13      	ldr	r3, [pc, #76]	; (54c <EIC_Handler+0x60>)
     500:	4798      	blx	r3
     502:	1e03      	subs	r3, r0, #0
     504:	d013      	beq.n	52e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     506:	4b10      	ldr	r3, [pc, #64]	; (548 <EIC_Handler+0x5c>)
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	1c18      	adds	r0, r3, #0
     50c:	4b10      	ldr	r3, [pc, #64]	; (550 <EIC_Handler+0x64>)
     50e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <EIC_Handler+0x5c>)
     512:	781b      	ldrb	r3, [r3, #0]
     514:	1c1a      	adds	r2, r3, #0
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <EIC_Handler+0x68>)
     518:	0092      	lsls	r2, r2, #2
     51a:	58d3      	ldr	r3, [r2, r3]
     51c:	2b00      	cmp	r3, #0
     51e:	d006      	beq.n	52e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     520:	4b09      	ldr	r3, [pc, #36]	; (548 <EIC_Handler+0x5c>)
     522:	781b      	ldrb	r3, [r3, #0]
     524:	1c1a      	adds	r2, r3, #0
     526:	4b0b      	ldr	r3, [pc, #44]	; (554 <EIC_Handler+0x68>)
     528:	0092      	lsls	r2, r2, #2
     52a:	58d3      	ldr	r3, [r2, r3]
     52c:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     52e:	4b06      	ldr	r3, [pc, #24]	; (548 <EIC_Handler+0x5c>)
     530:	781b      	ldrb	r3, [r3, #0]
     532:	3301      	adds	r3, #1
     534:	b2da      	uxtb	r2, r3
     536:	4b04      	ldr	r3, [pc, #16]	; (548 <EIC_Handler+0x5c>)
     538:	701a      	strb	r2, [r3, #0]
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <EIC_Handler+0x5c>)
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	2b0f      	cmp	r3, #15
     540:	d9da      	bls.n	4f8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     542:	46bd      	mov	sp, r7
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	2000009c 	.word	0x2000009c
     54c:	0000046d 	.word	0x0000046d
     550:	000004b1 	.word	0x000004b1
     554:	20000058 	.word	0x20000058

00000558 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
     55e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     560:	687b      	ldr	r3, [r7, #4]
     562:	2200      	movs	r2, #0
     564:	701a      	strb	r2, [r3, #0]
}
     566:	46bd      	mov	sp, r7
     568:	b002      	add	sp, #8
     56a:	bd80      	pop	{r7, pc}

0000056c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     56c:	b580      	push	{r7, lr}
     56e:	b082      	sub	sp, #8
     570:	af00      	add	r7, sp, #0
     572:	1c02      	adds	r2, r0, #0
     574:	6039      	str	r1, [r7, #0]
     576:	1dfb      	adds	r3, r7, #7
     578:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     57a:	1dfb      	adds	r3, r7, #7
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b01      	cmp	r3, #1
     580:	d00a      	beq.n	598 <system_apb_clock_set_mask+0x2c>
     582:	2b02      	cmp	r3, #2
     584:	d00f      	beq.n	5a6 <system_apb_clock_set_mask+0x3a>
     586:	2b00      	cmp	r3, #0
     588:	d114      	bne.n	5b4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     58a:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <system_apb_clock_set_mask+0x58>)
     58c:	4a0d      	ldr	r2, [pc, #52]	; (5c4 <system_apb_clock_set_mask+0x58>)
     58e:	6991      	ldr	r1, [r2, #24]
     590:	683a      	ldr	r2, [r7, #0]
     592:	430a      	orrs	r2, r1
     594:	619a      	str	r2, [r3, #24]
			break;
     596:	e00f      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     598:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <system_apb_clock_set_mask+0x58>)
     59a:	4a0a      	ldr	r2, [pc, #40]	; (5c4 <system_apb_clock_set_mask+0x58>)
     59c:	69d1      	ldr	r1, [r2, #28]
     59e:	683a      	ldr	r2, [r7, #0]
     5a0:	430a      	orrs	r2, r1
     5a2:	61da      	str	r2, [r3, #28]
			break;
     5a4:	e008      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5a6:	4b07      	ldr	r3, [pc, #28]	; (5c4 <system_apb_clock_set_mask+0x58>)
     5a8:	4a06      	ldr	r2, [pc, #24]	; (5c4 <system_apb_clock_set_mask+0x58>)
     5aa:	6a11      	ldr	r1, [r2, #32]
     5ac:	683a      	ldr	r2, [r7, #0]
     5ae:	430a      	orrs	r2, r1
     5b0:	621a      	str	r2, [r3, #32]
			break;
     5b2:	e001      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     5b4:	2317      	movs	r3, #23
     5b6:	e000      	b.n	5ba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     5b8:	2300      	movs	r3, #0
}
     5ba:	1c18      	adds	r0, r3, #0
     5bc:	46bd      	mov	sp, r7
     5be:	b002      	add	sp, #8
     5c0:	bd80      	pop	{r7, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	40000400 	.word	0x40000400

000005c8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	2280      	movs	r2, #128	; 0x80
     5d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	2200      	movs	r2, #0
     5da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2201      	movs	r2, #1
     5e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	2200      	movs	r2, #0
     5e6:	70da      	strb	r2, [r3, #3]
}
     5e8:	46bd      	mov	sp, r7
     5ea:	b002      	add	sp, #8
     5ec:	bd80      	pop	{r7, pc}
     5ee:	46c0      	nop			; (mov r8, r8)

000005f0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b084      	sub	sp, #16
     5f4:	af00      	add	r7, sp, #0
     5f6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     5f8:	2300      	movs	r3, #0
     5fa:	60fb      	str	r3, [r7, #12]
     5fc:	e00c      	b.n	618 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
     5fe:	4b0a      	ldr	r3, [pc, #40]	; (628 <_tcc_get_inst_index+0x38>)
     600:	68fa      	ldr	r2, [r7, #12]
     602:	0092      	lsls	r2, r2, #2
     604:	58d2      	ldr	r2, [r2, r3]
     606:	687b      	ldr	r3, [r7, #4]
     608:	429a      	cmp	r2, r3
     60a:	d102      	bne.n	612 <_tcc_get_inst_index+0x22>
			return i;
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	b2db      	uxtb	r3, r3
     610:	e006      	b.n	620 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     612:	68fb      	ldr	r3, [r7, #12]
     614:	3301      	adds	r3, #1
     616:	60fb      	str	r3, [r7, #12]
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	2b02      	cmp	r3, #2
     61c:	d9ef      	bls.n	5fe <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     61e:	2300      	movs	r3, #0
}
     620:	1c18      	adds	r0, r3, #0
     622:	46bd      	mov	sp, r7
     624:	b004      	add	sp, #16
     626:	bd80      	pop	{r7, pc}
     628:	00002154 	.word	0x00002154

0000062c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     62c:	b590      	push	{r4, r7, lr}
     62e:	b085      	sub	sp, #20
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
     634:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     636:	230f      	movs	r3, #15
     638:	18fc      	adds	r4, r7, r3
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	1c18      	adds	r0, r3, #0
     63e:	4bac      	ldr	r3, [pc, #688]	; (8f0 <tcc_get_config_defaults+0x2c4>)
     640:	4798      	blx	r3
     642:	1c03      	adds	r3, r0, #0
     644:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
     646:	687b      	ldr	r3, [r7, #4]
     648:	2200      	movs	r2, #0
     64a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     64c:	230f      	movs	r3, #15
     64e:	18fb      	adds	r3, r7, r3
     650:	781a      	ldrb	r2, [r3, #0]
     652:	4ba8      	ldr	r3, [pc, #672]	; (8f4 <tcc_get_config_defaults+0x2c8>)
     654:	0092      	lsls	r2, r2, #2
     656:	58d2      	ldr	r2, [r2, r3]
     658:	687b      	ldr	r3, [r7, #4]
     65a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	2200      	movs	r2, #0
     660:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	2200      	movs	r2, #0
     66c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     66e:	687b      	ldr	r3, [r7, #4]
     670:	2200      	movs	r2, #0
     672:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
     674:	687b      	ldr	r3, [r7, #4]
     676:	2200      	movs	r2, #0
     678:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	61da      	str	r2, [r3, #28]
     680:	687b      	ldr	r3, [r7, #4]
     682:	2200      	movs	r2, #0
     684:	621a      	str	r2, [r3, #32]
     686:	687b      	ldr	r3, [r7, #4]
     688:	2200      	movs	r2, #0
     68a:	625a      	str	r2, [r3, #36]	; 0x24
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	2200      	movs	r2, #0
     690:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     692:	687b      	ldr	r3, [r7, #4]
     694:	2200      	movs	r2, #0
     696:	751a      	strb	r2, [r3, #20]
     698:	687b      	ldr	r3, [r7, #4]
     69a:	2200      	movs	r2, #0
     69c:	755a      	strb	r2, [r3, #21]
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2200      	movs	r2, #0
     6a2:	759a      	strb	r2, [r3, #22]
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	2200      	movs	r2, #0
     6a8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	2200      	movs	r2, #0
     6ae:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	2200      	movs	r2, #0
     6b4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	2200      	movs	r2, #0
     6ba:	741a      	strb	r2, [r3, #16]
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	2200      	movs	r2, #0
     6c0:	745a      	strb	r2, [r3, #17]
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	2200      	movs	r2, #0
     6c6:	749a      	strb	r2, [r3, #18]
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	2200      	movs	r2, #0
     6cc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	222c      	movs	r2, #44	; 0x2c
     6d2:	2100      	movs	r1, #0
     6d4:	5499      	strb	r1, [r3, r2]
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	222d      	movs	r2, #45	; 0x2d
     6da:	2100      	movs	r1, #0
     6dc:	5499      	strb	r1, [r3, r2]
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	222e      	movs	r2, #46	; 0x2e
     6e2:	2100      	movs	r1, #0
     6e4:	5499      	strb	r1, [r3, r2]
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	222f      	movs	r2, #47	; 0x2f
     6ea:	2100      	movs	r1, #0
     6ec:	5499      	strb	r1, [r3, r2]
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	2230      	movs	r2, #48	; 0x30
     6f2:	2100      	movs	r1, #0
     6f4:	5499      	strb	r1, [r3, r2]
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	2231      	movs	r2, #49	; 0x31
     6fa:	2100      	movs	r1, #0
     6fc:	5499      	strb	r1, [r3, r2]
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	2232      	movs	r2, #50	; 0x32
     702:	2100      	movs	r1, #0
     704:	5499      	strb	r1, [r3, r2]
     706:	687b      	ldr	r3, [r7, #4]
     708:	2233      	movs	r2, #51	; 0x33
     70a:	2100      	movs	r1, #0
     70c:	5499      	strb	r1, [r3, r2]
     70e:	687b      	ldr	r3, [r7, #4]
     710:	2234      	movs	r2, #52	; 0x34
     712:	2100      	movs	r1, #0
     714:	5499      	strb	r1, [r3, r2]
     716:	687b      	ldr	r3, [r7, #4]
     718:	2235      	movs	r2, #53	; 0x35
     71a:	2100      	movs	r1, #0
     71c:	5499      	strb	r1, [r3, r2]
     71e:	687b      	ldr	r3, [r7, #4]
     720:	2236      	movs	r2, #54	; 0x36
     722:	2100      	movs	r1, #0
     724:	5499      	strb	r1, [r3, r2]
     726:	687b      	ldr	r3, [r7, #4]
     728:	2237      	movs	r2, #55	; 0x37
     72a:	2100      	movs	r1, #0
     72c:	5499      	strb	r1, [r3, r2]
     72e:	687b      	ldr	r3, [r7, #4]
     730:	2238      	movs	r2, #56	; 0x38
     732:	2100      	movs	r1, #0
     734:	5499      	strb	r1, [r3, r2]
     736:	687b      	ldr	r3, [r7, #4]
     738:	2239      	movs	r2, #57	; 0x39
     73a:	2100      	movs	r1, #0
     73c:	5499      	strb	r1, [r3, r2]
     73e:	687b      	ldr	r3, [r7, #4]
     740:	223a      	movs	r2, #58	; 0x3a
     742:	2100      	movs	r1, #0
     744:	5499      	strb	r1, [r3, r2]
     746:	687b      	ldr	r3, [r7, #4]
     748:	223b      	movs	r2, #59	; 0x3b
     74a:	2100      	movs	r1, #0
     74c:	5499      	strb	r1, [r3, r2]
     74e:	687b      	ldr	r3, [r7, #4]
     750:	223c      	movs	r2, #60	; 0x3c
     752:	2100      	movs	r1, #0
     754:	5499      	strb	r1, [r3, r2]
     756:	687b      	ldr	r3, [r7, #4]
     758:	223d      	movs	r2, #61	; 0x3d
     75a:	2100      	movs	r1, #0
     75c:	5499      	strb	r1, [r3, r2]
     75e:	687b      	ldr	r3, [r7, #4]
     760:	223e      	movs	r2, #62	; 0x3e
     762:	2100      	movs	r1, #0
     764:	5499      	strb	r1, [r3, r2]
     766:	687b      	ldr	r3, [r7, #4]
     768:	223f      	movs	r2, #63	; 0x3f
     76a:	2100      	movs	r1, #0
     76c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     76e:	687b      	ldr	r3, [r7, #4]
     770:	2240      	movs	r2, #64	; 0x40
     772:	2100      	movs	r1, #0
     774:	5499      	strb	r1, [r3, r2]
     776:	687b      	ldr	r3, [r7, #4]
     778:	2241      	movs	r2, #65	; 0x41
     77a:	2100      	movs	r1, #0
     77c:	5499      	strb	r1, [r3, r2]
     77e:	687b      	ldr	r3, [r7, #4]
     780:	2242      	movs	r2, #66	; 0x42
     782:	2100      	movs	r1, #0
     784:	5499      	strb	r1, [r3, r2]
     786:	687b      	ldr	r3, [r7, #4]
     788:	2243      	movs	r2, #67	; 0x43
     78a:	2100      	movs	r1, #0
     78c:	5499      	strb	r1, [r3, r2]
     78e:	687b      	ldr	r3, [r7, #4]
     790:	2244      	movs	r2, #68	; 0x44
     792:	2100      	movs	r1, #0
     794:	5499      	strb	r1, [r3, r2]
     796:	687b      	ldr	r3, [r7, #4]
     798:	2245      	movs	r2, #69	; 0x45
     79a:	2100      	movs	r1, #0
     79c:	5499      	strb	r1, [r3, r2]
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	2246      	movs	r2, #70	; 0x46
     7a2:	2100      	movs	r1, #0
     7a4:	5499      	strb	r1, [r3, r2]
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	2247      	movs	r2, #71	; 0x47
     7aa:	2100      	movs	r1, #0
     7ac:	5499      	strb	r1, [r3, r2]
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	2248      	movs	r2, #72	; 0x48
     7b2:	2100      	movs	r1, #0
     7b4:	5499      	strb	r1, [r3, r2]
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	2249      	movs	r2, #73	; 0x49
     7ba:	2100      	movs	r1, #0
     7bc:	5499      	strb	r1, [r3, r2]
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	224a      	movs	r2, #74	; 0x4a
     7c2:	2100      	movs	r1, #0
     7c4:	5499      	strb	r1, [r3, r2]
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	224b      	movs	r2, #75	; 0x4b
     7ca:	2100      	movs	r1, #0
     7cc:	5499      	strb	r1, [r3, r2]
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	224c      	movs	r2, #76	; 0x4c
     7d2:	2100      	movs	r1, #0
     7d4:	5499      	strb	r1, [r3, r2]
     7d6:	687b      	ldr	r3, [r7, #4]
     7d8:	224d      	movs	r2, #77	; 0x4d
     7da:	2100      	movs	r1, #0
     7dc:	5499      	strb	r1, [r3, r2]
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	224e      	movs	r2, #78	; 0x4e
     7e2:	2100      	movs	r1, #0
     7e4:	5499      	strb	r1, [r3, r2]
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	224f      	movs	r2, #79	; 0x4f
     7ea:	2100      	movs	r1, #0
     7ec:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	2250      	movs	r2, #80	; 0x50
     7f2:	2100      	movs	r1, #0
     7f4:	5499      	strb	r1, [r3, r2]
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	2251      	movs	r2, #81	; 0x51
     7fa:	2100      	movs	r1, #0
     7fc:	5499      	strb	r1, [r3, r2]
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	2252      	movs	r2, #82	; 0x52
     802:	2100      	movs	r1, #0
     804:	5499      	strb	r1, [r3, r2]
     806:	687b      	ldr	r3, [r7, #4]
     808:	2253      	movs	r2, #83	; 0x53
     80a:	2100      	movs	r1, #0
     80c:	5499      	strb	r1, [r3, r2]
     80e:	687b      	ldr	r3, [r7, #4]
     810:	2254      	movs	r2, #84	; 0x54
     812:	2100      	movs	r1, #0
     814:	5499      	strb	r1, [r3, r2]
     816:	687b      	ldr	r3, [r7, #4]
     818:	2255      	movs	r2, #85	; 0x55
     81a:	2100      	movs	r1, #0
     81c:	5499      	strb	r1, [r3, r2]
     81e:	687b      	ldr	r3, [r7, #4]
     820:	2256      	movs	r2, #86	; 0x56
     822:	2100      	movs	r1, #0
     824:	5499      	strb	r1, [r3, r2]
     826:	687b      	ldr	r3, [r7, #4]
     828:	2257      	movs	r2, #87	; 0x57
     82a:	2100      	movs	r1, #0
     82c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     82e:	687b      	ldr	r3, [r7, #4]
     830:	2298      	movs	r2, #152	; 0x98
     832:	2100      	movs	r1, #0
     834:	5499      	strb	r1, [r3, r2]
     836:	687b      	ldr	r3, [r7, #4]
     838:	2200      	movs	r2, #0
     83a:	659a      	str	r2, [r3, #88]	; 0x58
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2200      	movs	r2, #0
     840:	679a      	str	r2, [r3, #120]	; 0x78
     842:	687b      	ldr	r3, [r7, #4]
     844:	2299      	movs	r2, #153	; 0x99
     846:	2100      	movs	r1, #0
     848:	5499      	strb	r1, [r3, r2]
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	2200      	movs	r2, #0
     84e:	65da      	str	r2, [r3, #92]	; 0x5c
     850:	687b      	ldr	r3, [r7, #4]
     852:	2200      	movs	r2, #0
     854:	67da      	str	r2, [r3, #124]	; 0x7c
     856:	687b      	ldr	r3, [r7, #4]
     858:	229a      	movs	r2, #154	; 0x9a
     85a:	2100      	movs	r1, #0
     85c:	5499      	strb	r1, [r3, r2]
     85e:	687b      	ldr	r3, [r7, #4]
     860:	2200      	movs	r2, #0
     862:	661a      	str	r2, [r3, #96]	; 0x60
     864:	687b      	ldr	r3, [r7, #4]
     866:	2280      	movs	r2, #128	; 0x80
     868:	2100      	movs	r1, #0
     86a:	5099      	str	r1, [r3, r2]
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	229b      	movs	r2, #155	; 0x9b
     870:	2100      	movs	r1, #0
     872:	5499      	strb	r1, [r3, r2]
     874:	687b      	ldr	r3, [r7, #4]
     876:	2200      	movs	r2, #0
     878:	665a      	str	r2, [r3, #100]	; 0x64
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2284      	movs	r2, #132	; 0x84
     87e:	2100      	movs	r1, #0
     880:	5099      	str	r1, [r3, r2]
     882:	687b      	ldr	r3, [r7, #4]
     884:	229c      	movs	r2, #156	; 0x9c
     886:	2100      	movs	r1, #0
     888:	5499      	strb	r1, [r3, r2]
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	2200      	movs	r2, #0
     88e:	669a      	str	r2, [r3, #104]	; 0x68
     890:	687b      	ldr	r3, [r7, #4]
     892:	2288      	movs	r2, #136	; 0x88
     894:	2100      	movs	r1, #0
     896:	5099      	str	r1, [r3, r2]
     898:	687b      	ldr	r3, [r7, #4]
     89a:	229d      	movs	r2, #157	; 0x9d
     89c:	2100      	movs	r1, #0
     89e:	5499      	strb	r1, [r3, r2]
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	2200      	movs	r2, #0
     8a4:	66da      	str	r2, [r3, #108]	; 0x6c
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	228c      	movs	r2, #140	; 0x8c
     8aa:	2100      	movs	r1, #0
     8ac:	5099      	str	r1, [r3, r2]
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	229e      	movs	r2, #158	; 0x9e
     8b2:	2100      	movs	r1, #0
     8b4:	5499      	strb	r1, [r3, r2]
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	2200      	movs	r2, #0
     8ba:	671a      	str	r2, [r3, #112]	; 0x70
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	2290      	movs	r2, #144	; 0x90
     8c0:	2100      	movs	r1, #0
     8c2:	5099      	str	r1, [r3, r2]
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	229f      	movs	r2, #159	; 0x9f
     8c8:	2100      	movs	r1, #0
     8ca:	5499      	strb	r1, [r3, r2]
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2200      	movs	r2, #0
     8d0:	675a      	str	r2, [r3, #116]	; 0x74
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	2294      	movs	r2, #148	; 0x94
     8d6:	2100      	movs	r1, #0
     8d8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	22a0      	movs	r2, #160	; 0xa0
     8de:	2101      	movs	r1, #1
     8e0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	22a1      	movs	r2, #161	; 0xa1
     8e6:	2100      	movs	r1, #0
     8e8:	5499      	strb	r1, [r3, r2]
}
     8ea:	46bd      	mov	sp, r7
     8ec:	b005      	add	sp, #20
     8ee:	bd90      	pop	{r4, r7, pc}
     8f0:	000005f1 	.word	0x000005f1
     8f4:	00002170 	.word	0x00002170

000008f8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b086      	sub	sp, #24
     8fc:	af00      	add	r7, sp, #0
     8fe:	60b9      	str	r1, [r7, #8]
     900:	607a      	str	r2, [r7, #4]
     902:	230f      	movs	r3, #15
     904:	18fb      	adds	r3, r7, r3
     906:	1c02      	adds	r2, r0, #0
     908:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
     90a:	2300      	movs	r3, #0
     90c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     90e:	2300      	movs	r3, #0
     910:	613b      	str	r3, [r7, #16]
     912:	e01d      	b.n	950 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
     914:	68ba      	ldr	r2, [r7, #8]
     916:	693b      	ldr	r3, [r7, #16]
     918:	18d3      	adds	r3, r2, r3
     91a:	3310      	adds	r3, #16
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b01      	cmp	r3, #1
     920:	d113      	bne.n	94a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
     922:	230f      	movs	r3, #15
     924:	18fb      	adds	r3, r7, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	4a1b      	ldr	r2, [pc, #108]	; (998 <_tcc_build_ctrla+0xa0>)
     92a:	5cd3      	ldrb	r3, [r2, r3]
     92c:	1e1a      	subs	r2, r3, #0
     92e:	693b      	ldr	r3, [r7, #16]
     930:	429a      	cmp	r2, r3
     932:	da01      	bge.n	938 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
     934:	2317      	movs	r3, #23
     936:	e02a      	b.n	98e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     938:	2380      	movs	r3, #128	; 0x80
     93a:	045a      	lsls	r2, r3, #17
     93c:	693b      	ldr	r3, [r7, #16]
     93e:	409a      	lsls	r2, r3
     940:	1c13      	adds	r3, r2, #0
     942:	1c1a      	adds	r2, r3, #0
     944:	697b      	ldr	r3, [r7, #20]
     946:	4313      	orrs	r3, r2
     948:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     94a:	693b      	ldr	r3, [r7, #16]
     94c:	3301      	adds	r3, #1
     94e:	613b      	str	r3, [r7, #16]
     950:	693b      	ldr	r3, [r7, #16]
     952:	2b03      	cmp	r3, #3
     954:	ddde      	ble.n	914 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
     956:	68bb      	ldr	r3, [r7, #8]
     958:	22a1      	movs	r2, #161	; 0xa1
     95a:	5c9b      	ldrb	r3, [r3, r2]
     95c:	2b00      	cmp	r3, #0
     95e:	d004      	beq.n	96a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     960:	697b      	ldr	r3, [r7, #20]
     962:	2280      	movs	r2, #128	; 0x80
     964:	0112      	lsls	r2, r2, #4
     966:	4313      	orrs	r3, r2
     968:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     96a:	68bb      	ldr	r3, [r7, #8]
     96c:	7b1b      	ldrb	r3, [r3, #12]
     96e:	031b      	lsls	r3, r3, #12
     970:	1c1a      	adds	r2, r3, #0
     972:	697b      	ldr	r3, [r7, #20]
     974:	4313      	orrs	r3, r2
     976:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     978:	68bb      	ldr	r3, [r7, #8]
     97a:	7adb      	ldrb	r3, [r3, #11]
     97c:	021b      	lsls	r3, r3, #8
     97e:	1c1a      	adds	r2, r3, #0
     980:	697b      	ldr	r3, [r7, #20]
     982:	4313      	orrs	r3, r2
     984:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
     986:	687b      	ldr	r3, [r7, #4]
     988:	697a      	ldr	r2, [r7, #20]
     98a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
     98c:	2300      	movs	r3, #0
}
     98e:	1c18      	adds	r0, r3, #0
     990:	46bd      	mov	sp, r7
     992:	b006      	add	sp, #24
     994:	bd80      	pop	{r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	0000217c 	.word	0x0000217c

0000099c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
     99c:	b580      	push	{r7, lr}
     99e:	b086      	sub	sp, #24
     9a0:	af00      	add	r7, sp, #0
     9a2:	60b9      	str	r1, [r7, #8]
     9a4:	607a      	str	r2, [r7, #4]
     9a6:	230f      	movs	r3, #15
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	1c02      	adds	r2, r0, #0
     9ac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
     9ae:	2317      	movs	r3, #23
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
     9b6:	68bb      	ldr	r3, [r7, #8]
     9b8:	7a1b      	ldrb	r3, [r3, #8]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d007      	beq.n	9ce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     9be:	2317      	movs	r3, #23
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	2217      	movs	r2, #23
     9c4:	18ba      	adds	r2, r7, r2
     9c6:	7812      	ldrb	r2, [r2, #0]
     9c8:	2104      	movs	r1, #4
     9ca:	430a      	orrs	r2, r1
     9cc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     9ce:	68bb      	ldr	r3, [r7, #8]
     9d0:	7a5b      	ldrb	r3, [r3, #9]
     9d2:	2b01      	cmp	r3, #1
     9d4:	d107      	bne.n	9e6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
     9d6:	2317      	movs	r3, #23
     9d8:	18fb      	adds	r3, r7, r3
     9da:	2217      	movs	r2, #23
     9dc:	18ba      	adds	r2, r7, r2
     9de:	7812      	ldrb	r2, [r2, #0]
     9e0:	2101      	movs	r1, #1
     9e2:	430a      	orrs	r2, r1
     9e4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	2217      	movs	r2, #23
     9ea:	18ba      	adds	r2, r7, r2
     9ec:	7812      	ldrb	r2, [r2, #0]
     9ee:	701a      	strb	r2, [r3, #0]
}
     9f0:	46bd      	mov	sp, r7
     9f2:	b006      	add	sp, #24
     9f4:	bd80      	pop	{r7, pc}
     9f6:	46c0      	nop			; (mov r8, r8)

000009f8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b088      	sub	sp, #32
     9fc:	af00      	add	r7, sp, #0
     9fe:	60b9      	str	r1, [r7, #8]
     a00:	607a      	str	r2, [r7, #4]
     a02:	230f      	movs	r3, #15
     a04:	18fb      	adds	r3, r7, r3
     a06:	1c02      	adds	r2, r0, #0
     a08:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
     a0a:	230f      	movs	r3, #15
     a0c:	18fb      	adds	r3, r7, r3
     a0e:	781a      	ldrb	r2, [r3, #0]
     a10:	231b      	movs	r3, #27
     a12:	18fb      	adds	r3, r7, r3
     a14:	493e      	ldr	r1, [pc, #248]	; (b10 <_tcc_build_faults+0x118>)
     a16:	5c8a      	ldrb	r2, [r1, r2]
     a18:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     a1a:	2300      	movs	r3, #0
     a1c:	61fb      	str	r3, [r7, #28]
     a1e:	e06e      	b.n	afe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
     a20:	69fa      	ldr	r2, [r7, #28]
     a22:	1c13      	adds	r3, r2, #0
     a24:	009b      	lsls	r3, r3, #2
     a26:	189b      	adds	r3, r3, r2
     a28:	005b      	lsls	r3, r3, #1
     a2a:	3328      	adds	r3, #40	; 0x28
     a2c:	68ba      	ldr	r2, [r7, #8]
     a2e:	18d3      	adds	r3, r2, r3
     a30:	3304      	adds	r3, #4
     a32:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     a34:	697b      	ldr	r3, [r7, #20]
     a36:	7a5b      	ldrb	r3, [r3, #9]
     a38:	221b      	movs	r2, #27
     a3a:	18ba      	adds	r2, r7, r2
     a3c:	7812      	ldrb	r2, [r2, #0]
     a3e:	429a      	cmp	r2, r3
     a40:	d801      	bhi.n	a46 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
     a42:	2317      	movs	r3, #23
     a44:	e05f      	b.n	b06 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
     a46:	697b      	ldr	r3, [r7, #20]
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	2b0f      	cmp	r3, #15
     a4c:	d901      	bls.n	a52 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
     a4e:	2317      	movs	r3, #23
     a50:	e059      	b.n	b06 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     a52:	697b      	ldr	r3, [r7, #20]
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	061b      	lsls	r3, r3, #24
     a58:	1c1a      	adds	r2, r3, #0
     a5a:	23f0      	movs	r3, #240	; 0xf0
     a5c:	051b      	lsls	r3, r3, #20
     a5e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     a60:	697b      	ldr	r3, [r7, #20]
     a62:	785b      	ldrb	r3, [r3, #1]
     a64:	041b      	lsls	r3, r3, #16
     a66:	1c19      	adds	r1, r3, #0
     a68:	23ff      	movs	r3, #255	; 0xff
     a6a:	041b      	lsls	r3, r3, #16
     a6c:	400b      	ands	r3, r1
     a6e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     a70:	697b      	ldr	r3, [r7, #20]
     a72:	789b      	ldrb	r3, [r3, #2]
     a74:	2b00      	cmp	r3, #0
     a76:	d001      	beq.n	a7c <_tcc_build_faults+0x84>
     a78:	2380      	movs	r3, #128	; 0x80
     a7a:	e000      	b.n	a7e <_tcc_build_faults+0x86>
     a7c:	2300      	movs	r3, #0
     a7e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     a80:	697b      	ldr	r3, [r7, #20]
     a82:	78db      	ldrb	r3, [r3, #3]
     a84:	2b00      	cmp	r3, #0
     a86:	d001      	beq.n	a8c <_tcc_build_faults+0x94>
     a88:	2308      	movs	r3, #8
     a8a:	e000      	b.n	a8e <_tcc_build_faults+0x96>
     a8c:	2300      	movs	r3, #0
     a8e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     a90:	697b      	ldr	r3, [r7, #20]
     a92:	791b      	ldrb	r3, [r3, #4]
     a94:	2b00      	cmp	r3, #0
     a96:	d001      	beq.n	a9c <_tcc_build_faults+0xa4>
     a98:	2310      	movs	r3, #16
     a9a:	e000      	b.n	a9e <_tcc_build_faults+0xa6>
     a9c:	2300      	movs	r3, #0
     a9e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
     aa0:	697b      	ldr	r3, [r7, #20]
     aa2:	795b      	ldrb	r3, [r3, #5]
     aa4:	1c19      	adds	r1, r3, #0
     aa6:	2303      	movs	r3, #3
     aa8:	400b      	ands	r3, r1
     aaa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
     aac:	697b      	ldr	r3, [r7, #20]
     aae:	799b      	ldrb	r3, [r3, #6]
     ab0:	015b      	lsls	r3, r3, #5
     ab2:	1c19      	adds	r1, r3, #0
     ab4:	2360      	movs	r3, #96	; 0x60
     ab6:	400b      	ands	r3, r1
     ab8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	79db      	ldrb	r3, [r3, #7]
     abe:	021b      	lsls	r3, r3, #8
     ac0:	1c19      	adds	r1, r3, #0
     ac2:	23c0      	movs	r3, #192	; 0xc0
     ac4:	009b      	lsls	r3, r3, #2
     ac6:	400b      	ands	r3, r1
     ac8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     aca:	697b      	ldr	r3, [r7, #20]
     acc:	7a1b      	ldrb	r3, [r3, #8]
     ace:	031b      	lsls	r3, r3, #12
     ad0:	1c19      	adds	r1, r3, #0
     ad2:	23e0      	movs	r3, #224	; 0xe0
     ad4:	01db      	lsls	r3, r3, #7
     ad6:	400b      	ands	r3, r1
     ad8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     ada:	697b      	ldr	r3, [r7, #20]
     adc:	7a5b      	ldrb	r3, [r3, #9]
     ade:	029b      	lsls	r3, r3, #10
     ae0:	1c19      	adds	r1, r3, #0
     ae2:	23c0      	movs	r3, #192	; 0xc0
     ae4:	011b      	lsls	r3, r3, #4
     ae6:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     ae8:	4313      	orrs	r3, r2
     aea:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
     aec:	69fb      	ldr	r3, [r7, #28]
     aee:	009b      	lsls	r3, r3, #2
     af0:	687a      	ldr	r2, [r7, #4]
     af2:	18d3      	adds	r3, r2, r3
     af4:	693a      	ldr	r2, [r7, #16]
     af6:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     af8:	69fb      	ldr	r3, [r7, #28]
     afa:	3301      	adds	r3, #1
     afc:	61fb      	str	r3, [r7, #28]
     afe:	69fb      	ldr	r3, [r7, #28]
     b00:	2b01      	cmp	r3, #1
     b02:	dd8d      	ble.n	a20 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
     b04:	2300      	movs	r3, #0
}
     b06:	1c18      	adds	r0, r3, #0
     b08:	46bd      	mov	sp, r7
     b0a:	b008      	add	sp, #32
     b0c:	bd80      	pop	{r7, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	0000217c 	.word	0x0000217c

00000b14 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
     b14:	b580      	push	{r7, lr}
     b16:	b088      	sub	sp, #32
     b18:	af00      	add	r7, sp, #0
     b1a:	60b9      	str	r1, [r7, #8]
     b1c:	607a      	str	r2, [r7, #4]
     b1e:	230f      	movs	r3, #15
     b20:	18fb      	adds	r3, r7, r3
     b22:	1c02      	adds	r2, r0, #0
     b24:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
     b26:	230f      	movs	r3, #15
     b28:	18fb      	adds	r3, r7, r3
     b2a:	781a      	ldrb	r2, [r3, #0]
     b2c:	2317      	movs	r3, #23
     b2e:	18fb      	adds	r3, r7, r3
     b30:	492c      	ldr	r1, [pc, #176]	; (be4 <_tcc_build_drvctrl+0xd0>)
     b32:	5c8a      	ldrb	r2, [r1, r2]
     b34:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
     b36:	2300      	movs	r3, #0
     b38:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     b3a:	2300      	movs	r3, #0
     b3c:	61fb      	str	r3, [r7, #28]
     b3e:	e045      	b.n	bcc <_tcc_build_drvctrl+0xb8>
		if (config->wave_ext.invert[i]) {
     b40:	68ba      	ldr	r2, [r7, #8]
     b42:	2148      	movs	r1, #72	; 0x48
     b44:	69fb      	ldr	r3, [r7, #28]
     b46:	18d3      	adds	r3, r2, r3
     b48:	185b      	adds	r3, r3, r1
     b4a:	7a1b      	ldrb	r3, [r3, #8]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d010      	beq.n	b72 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
     b50:	2317      	movs	r3, #23
     b52:	18fb      	adds	r3, r7, r3
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	69fb      	ldr	r3, [r7, #28]
     b58:	429a      	cmp	r2, r3
     b5a:	d801      	bhi.n	b60 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
     b5c:	2317      	movs	r3, #23
     b5e:	e03c      	b.n	bda <_tcc_build_drvctrl+0xc6>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     b60:	69fb      	ldr	r3, [r7, #28]
     b62:	2280      	movs	r2, #128	; 0x80
     b64:	0252      	lsls	r2, r2, #9
     b66:	409a      	lsls	r2, r3
     b68:	1c13      	adds	r3, r2, #0
     b6a:	1c1a      	adds	r2, r3, #0
     b6c:	69bb      	ldr	r3, [r7, #24]
     b6e:	4313      	orrs	r3, r2
     b70:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	69fb      	ldr	r3, [r7, #28]
     b76:	331c      	adds	r3, #28
     b78:	005b      	lsls	r3, r3, #1
     b7a:	18d3      	adds	r3, r2, r3
     b7c:	7a5b      	ldrb	r3, [r3, #9]
     b7e:	2b00      	cmp	r3, #0
     b80:	d021      	beq.n	bc6 <_tcc_build_drvctrl+0xb2>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     b82:	2317      	movs	r3, #23
     b84:	18fb      	adds	r3, r7, r3
     b86:	781a      	ldrb	r2, [r3, #0]
     b88:	69fb      	ldr	r3, [r7, #28]
     b8a:	429a      	cmp	r2, r3
     b8c:	d801      	bhi.n	b92 <_tcc_build_drvctrl+0x7e>
				return STATUS_ERR_INVALID_ARG;
     b8e:	2317      	movs	r3, #23
     b90:	e023      	b.n	bda <_tcc_build_drvctrl+0xc6>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
     b92:	68ba      	ldr	r2, [r7, #8]
     b94:	69fb      	ldr	r3, [r7, #28]
     b96:	331c      	adds	r3, #28
     b98:	005b      	lsls	r3, r3, #1
     b9a:	18d3      	adds	r3, r2, r3
     b9c:	7a5b      	ldrb	r3, [r3, #9]
     b9e:	2b02      	cmp	r3, #2
     ba0:	d109      	bne.n	bb6 <_tcc_build_drvctrl+0xa2>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     ba2:	69fb      	ldr	r3, [r7, #28]
     ba4:	2202      	movs	r2, #2
     ba6:	32ff      	adds	r2, #255	; 0xff
     ba8:	409a      	lsls	r2, r3
     baa:	1c13      	adds	r3, r2, #0
     bac:	1c1a      	adds	r2, r3, #0
     bae:	69bb      	ldr	r3, [r7, #24]
     bb0:	4313      	orrs	r3, r2
     bb2:	61bb      	str	r3, [r7, #24]
     bb4:	e007      	b.n	bc6 <_tcc_build_drvctrl+0xb2>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     bb6:	69fb      	ldr	r3, [r7, #28]
     bb8:	2201      	movs	r2, #1
     bba:	409a      	lsls	r2, r3
     bbc:	1c13      	adds	r3, r2, #0
     bbe:	1c1a      	adds	r2, r3, #0
     bc0:	69bb      	ldr	r3, [r7, #24]
     bc2:	4313      	orrs	r3, r2
     bc4:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     bc6:	69fb      	ldr	r3, [r7, #28]
     bc8:	3301      	adds	r3, #1
     bca:	61fb      	str	r3, [r7, #28]
     bcc:	69fb      	ldr	r3, [r7, #28]
     bce:	2b07      	cmp	r3, #7
     bd0:	d9b6      	bls.n	b40 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	69ba      	ldr	r2, [r7, #24]
     bd6:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
     bd8:	2300      	movs	r3, #0
}
     bda:	1c18      	adds	r0, r3, #0
     bdc:	46bd      	mov	sp, r7
     bde:	b008      	add	sp, #32
     be0:	bd80      	pop	{r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00002180 	.word	0x00002180

00000be8 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
     be8:	b580      	push	{r7, lr}
     bea:	b088      	sub	sp, #32
     bec:	af00      	add	r7, sp, #0
     bee:	60b9      	str	r1, [r7, #8]
     bf0:	607a      	str	r2, [r7, #4]
     bf2:	230f      	movs	r3, #15
     bf4:	18fb      	adds	r3, r7, r3
     bf6:	1c02      	adds	r2, r0, #0
     bf8:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
     bfa:	230f      	movs	r3, #15
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	2317      	movs	r3, #23
     c02:	18fb      	adds	r3, r7, r3
     c04:	491d      	ldr	r1, [pc, #116]	; (c7c <_tcc_build_waves+0x94>)
     c06:	5c8a      	ldrb	r2, [r1, r2]
     c08:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	3310      	adds	r3, #16
     c0e:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     c10:	693b      	ldr	r3, [r7, #16]
     c12:	7a5b      	ldrb	r3, [r3, #9]
     c14:	011b      	lsls	r3, r3, #4
     c16:	1c1a      	adds	r2, r3, #0
     c18:	2330      	movs	r3, #48	; 0x30
     c1a:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     c1c:	693b      	ldr	r3, [r7, #16]
     c1e:	7a1b      	ldrb	r3, [r3, #8]
     c20:	1c19      	adds	r1, r3, #0
     c22:	2307      	movs	r3, #7
     c24:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     c26:	4313      	orrs	r3, r2
     c28:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     c2a:	2300      	movs	r3, #0
     c2c:	61fb      	str	r3, [r7, #28]
     c2e:	e019      	b.n	c64 <_tcc_build_waves+0x7c>
		if (wav_cfg->wave_polarity[n]) {
     c30:	693a      	ldr	r2, [r7, #16]
     c32:	69fb      	ldr	r3, [r7, #28]
     c34:	18d3      	adds	r3, r2, r3
     c36:	791b      	ldrb	r3, [r3, #4]
     c38:	2b00      	cmp	r3, #0
     c3a:	d010      	beq.n	c5e <_tcc_build_waves+0x76>
			if (n >= cc_num) {
     c3c:	2317      	movs	r3, #23
     c3e:	18fb      	adds	r3, r7, r3
     c40:	781a      	ldrb	r2, [r3, #0]
     c42:	69fb      	ldr	r3, [r7, #28]
     c44:	429a      	cmp	r2, r3
     c46:	dc01      	bgt.n	c4c <_tcc_build_waves+0x64>
				return STATUS_ERR_INVALID_ARG;
     c48:	2317      	movs	r3, #23
     c4a:	e012      	b.n	c72 <_tcc_build_waves+0x8a>
			}
			wave |= (TCC_WAVE_POL0 << n);
     c4c:	2380      	movs	r3, #128	; 0x80
     c4e:	025a      	lsls	r2, r3, #9
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	409a      	lsls	r2, r3
     c54:	1c13      	adds	r3, r2, #0
     c56:	1c1a      	adds	r2, r3, #0
     c58:	69bb      	ldr	r3, [r7, #24]
     c5a:	4313      	orrs	r3, r2
     c5c:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     c5e:	69fb      	ldr	r3, [r7, #28]
     c60:	3301      	adds	r3, #1
     c62:	61fb      	str	r3, [r7, #28]
     c64:	69fb      	ldr	r3, [r7, #28]
     c66:	2b03      	cmp	r3, #3
     c68:	dde2      	ble.n	c30 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	69ba      	ldr	r2, [r7, #24]
     c6e:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
     c70:	2300      	movs	r3, #0
}
     c72:	1c18      	adds	r0, r3, #0
     c74:	46bd      	mov	sp, r7
     c76:	b008      	add	sp, #32
     c78:	bd80      	pop	{r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	0000217c 	.word	0x0000217c

00000c80 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     c80:	b590      	push	{r4, r7, lr}
     c82:	b091      	sub	sp, #68	; 0x44
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	60b9      	str	r1, [r7, #8]
     c8a:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     c8c:	233b      	movs	r3, #59	; 0x3b
     c8e:	18fc      	adds	r4, r7, r3
     c90:	68bb      	ldr	r3, [r7, #8]
     c92:	1c18      	adds	r0, r3, #0
     c94:	4bc8      	ldr	r3, [pc, #800]	; (fb8 <tcc_init+0x338>)
     c96:	4798      	blx	r3
     c98:	1c03      	adds	r3, r0, #0
     c9a:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     c9c:	233b      	movs	r3, #59	; 0x3b
     c9e:	18fb      	adds	r3, r7, r3
     ca0:	781a      	ldrb	r2, [r3, #0]
     ca2:	4bc6      	ldr	r3, [pc, #792]	; (fbc <tcc_init+0x33c>)
     ca4:	0092      	lsls	r2, r2, #2
     ca6:	58d3      	ldr	r3, [r2, r3]
     ca8:	2002      	movs	r0, #2
     caa:	1c19      	adds	r1, r3, #0
     cac:	4bc4      	ldr	r3, [pc, #784]	; (fc0 <tcc_init+0x340>)
     cae:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     cb0:	68bb      	ldr	r3, [r7, #8]
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	2202      	movs	r2, #2
     cb6:	4013      	ands	r3, r2
     cb8:	d001      	beq.n	cbe <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
     cba:	231c      	movs	r3, #28
     cbc:	e1c4      	b.n	1048 <tcc_init+0x3c8>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	2201      	movs	r2, #1
     cc4:	4013      	ands	r3, r2
     cc6:	d001      	beq.n	ccc <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
     cc8:	231c      	movs	r3, #28
     cca:	e1bd      	b.n	1048 <tcc_init+0x3c8>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
     ccc:	233b      	movs	r3, #59	; 0x3b
     cce:	18fb      	adds	r3, r7, r3
     cd0:	781a      	ldrb	r2, [r3, #0]
     cd2:	4bbc      	ldr	r3, [pc, #752]	; (fc4 <tcc_init+0x344>)
     cd4:	0092      	lsls	r2, r2, #2
     cd6:	58d3      	ldr	r3, [r2, r3]
     cd8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	681a      	ldr	r2, [r3, #0]
     cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ce0:	429a      	cmp	r2, r3
     ce2:	d804      	bhi.n	cee <tcc_init+0x6e>
		|| (config->counter.period > count_max)
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	685a      	ldr	r2, [r3, #4]
     ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cea:	429a      	cmp	r2, r3
     cec:	d901      	bls.n	cf2 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
     cee:	2317      	movs	r3, #23
     cf0:	e1aa      	b.n	1048 <tcc_init+0x3c8>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     cf2:	2300      	movs	r3, #0
     cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
     cf6:	e00d      	b.n	d14 <tcc_init+0x94>
		if ((config->compare.match[i] > count_max)
     cf8:	687a      	ldr	r2, [r7, #4]
     cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cfc:	3306      	adds	r3, #6
     cfe:	009b      	lsls	r3, r3, #2
     d00:	18d3      	adds	r3, r2, r3
     d02:	685a      	ldr	r2, [r3, #4]
     d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d06:	429a      	cmp	r2, r3
     d08:	d901      	bls.n	d0e <tcc_init+0x8e>
			) {
			return STATUS_ERR_INVALID_ARG;
     d0a:	2317      	movs	r3, #23
     d0c:	e19c      	b.n	1048 <tcc_init+0x3c8>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d10:	3301      	adds	r3, #1
     d12:	63fb      	str	r3, [r7, #60]	; 0x3c
     d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d16:	2b03      	cmp	r3, #3
     d18:	ddee      	ble.n	cf8 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     d1a:	2300      	movs	r3, #0
     d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
     d1e:	e019      	b.n	d54 <tcc_init+0xd4>
		if (!config->pins.enable_wave_out_pin[i]) {
     d20:	687a      	ldr	r2, [r7, #4]
     d22:	2198      	movs	r1, #152	; 0x98
     d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d26:	18d3      	adds	r3, r2, r3
     d28:	185b      	adds	r3, r3, r1
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	2201      	movs	r2, #1
     d2e:	4053      	eors	r3, r2
     d30:	b2db      	uxtb	r3, r3
     d32:	2b00      	cmp	r3, #0
     d34:	d000      	beq.n	d38 <tcc_init+0xb8>
			continue;
     d36:	e00a      	b.n	d4e <tcc_init+0xce>
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     d38:	233b      	movs	r3, #59	; 0x3b
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	4aa2      	ldr	r2, [pc, #648]	; (fc8 <tcc_init+0x348>)
     d40:	5cd3      	ldrb	r3, [r2, r3]
     d42:	1e1a      	subs	r2, r3, #0
     d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d46:	429a      	cmp	r2, r3
     d48:	dc01      	bgt.n	d4e <tcc_init+0xce>
			return STATUS_ERR_INVALID_ARG;
     d4a:	2317      	movs	r3, #23
     d4c:	e17c      	b.n	1048 <tcc_init+0x3c8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d50:	3301      	adds	r3, #1
     d52:	63fb      	str	r3, [r7, #60]	; 0x3c
     d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d56:	2b07      	cmp	r3, #7
     d58:	dde2      	ble.n	d20 <tcc_init+0xa0>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
     d5a:	2300      	movs	r3, #0
     d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
     d5e:	2333      	movs	r3, #51	; 0x33
     d60:	18fc      	adds	r4, r7, r3
     d62:	233b      	movs	r3, #59	; 0x3b
     d64:	18fb      	adds	r3, r7, r3
     d66:	7819      	ldrb	r1, [r3, #0]
     d68:	687a      	ldr	r2, [r7, #4]
     d6a:	232c      	movs	r3, #44	; 0x2c
     d6c:	18fb      	adds	r3, r7, r3
     d6e:	1c08      	adds	r0, r1, #0
     d70:	1c11      	adds	r1, r2, #0
     d72:	1c1a      	adds	r2, r3, #0
     d74:	4b95      	ldr	r3, [pc, #596]	; (fcc <tcc_init+0x34c>)
     d76:	4798      	blx	r3
     d78:	1c03      	adds	r3, r0, #0
     d7a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
     d7c:	2333      	movs	r3, #51	; 0x33
     d7e:	18fb      	adds	r3, r7, r3
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d003      	beq.n	d8e <tcc_init+0x10e>
		return status;
     d86:	2333      	movs	r3, #51	; 0x33
     d88:	18fb      	adds	r3, r7, r3
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	e15c      	b.n	1048 <tcc_init+0x3c8>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
     d8e:	233b      	movs	r3, #59	; 0x3b
     d90:	18fb      	adds	r3, r7, r3
     d92:	7819      	ldrb	r1, [r3, #0]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	232b      	movs	r3, #43	; 0x2b
     d98:	18fb      	adds	r3, r7, r3
     d9a:	1c08      	adds	r0, r1, #0
     d9c:	1c11      	adds	r1, r2, #0
     d9e:	1c1a      	adds	r2, r3, #0
     da0:	4b8b      	ldr	r3, [pc, #556]	; (fd0 <tcc_init+0x350>)
     da2:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
     da4:	2333      	movs	r3, #51	; 0x33
     da6:	18fc      	adds	r4, r7, r3
     da8:	233b      	movs	r3, #59	; 0x3b
     daa:	18fb      	adds	r3, r7, r3
     dac:	7819      	ldrb	r1, [r3, #0]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	2320      	movs	r3, #32
     db2:	18fb      	adds	r3, r7, r3
     db4:	1c08      	adds	r0, r1, #0
     db6:	1c11      	adds	r1, r2, #0
     db8:	1c1a      	adds	r2, r3, #0
     dba:	4b86      	ldr	r3, [pc, #536]	; (fd4 <tcc_init+0x354>)
     dbc:	4798      	blx	r3
     dbe:	1c03      	adds	r3, r0, #0
     dc0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
     dc2:	2333      	movs	r3, #51	; 0x33
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	781b      	ldrb	r3, [r3, #0]
     dc8:	2b00      	cmp	r3, #0
     dca:	d003      	beq.n	dd4 <tcc_init+0x154>
		return status;
     dcc:	2333      	movs	r3, #51	; 0x33
     dce:	18fb      	adds	r3, r7, r3
     dd0:	781b      	ldrb	r3, [r3, #0]
     dd2:	e139      	b.n	1048 <tcc_init+0x3c8>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
     dd4:	2300      	movs	r3, #0
     dd6:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
     dd8:	2333      	movs	r3, #51	; 0x33
     dda:	18fc      	adds	r4, r7, r3
     ddc:	233b      	movs	r3, #59	; 0x3b
     dde:	18fb      	adds	r3, r7, r3
     de0:	7819      	ldrb	r1, [r3, #0]
     de2:	687a      	ldr	r2, [r7, #4]
     de4:	231c      	movs	r3, #28
     de6:	18fb      	adds	r3, r7, r3
     de8:	1c08      	adds	r0, r1, #0
     dea:	1c11      	adds	r1, r2, #0
     dec:	1c1a      	adds	r2, r3, #0
     dee:	4b7a      	ldr	r3, [pc, #488]	; (fd8 <tcc_init+0x358>)
     df0:	4798      	blx	r3
     df2:	1c03      	adds	r3, r0, #0
     df4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
     df6:	2333      	movs	r3, #51	; 0x33
     df8:	18fb      	adds	r3, r7, r3
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d003      	beq.n	e08 <tcc_init+0x188>
		return status;
     e00:	2333      	movs	r3, #51	; 0x33
     e02:	18fb      	adds	r3, r7, r3
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	e11f      	b.n	1048 <tcc_init+0x3c8>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
     e08:	2333      	movs	r3, #51	; 0x33
     e0a:	18fc      	adds	r4, r7, r3
     e0c:	233b      	movs	r3, #59	; 0x3b
     e0e:	18fb      	adds	r3, r7, r3
     e10:	7819      	ldrb	r1, [r3, #0]
     e12:	687a      	ldr	r2, [r7, #4]
     e14:	2318      	movs	r3, #24
     e16:	18fb      	adds	r3, r7, r3
     e18:	1c08      	adds	r0, r1, #0
     e1a:	1c11      	adds	r1, r2, #0
     e1c:	1c1a      	adds	r2, r3, #0
     e1e:	4b6f      	ldr	r3, [pc, #444]	; (fdc <tcc_init+0x35c>)
     e20:	4798      	blx	r3
     e22:	1c03      	adds	r3, r0, #0
     e24:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
     e26:	2333      	movs	r3, #51	; 0x33
     e28:	18fb      	adds	r3, r7, r3
     e2a:	781b      	ldrb	r3, [r3, #0]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d003      	beq.n	e38 <tcc_init+0x1b8>
		return status;
     e30:	2333      	movs	r3, #51	; 0x33
     e32:	18fb      	adds	r3, r7, r3
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	e107      	b.n	1048 <tcc_init+0x3c8>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     e38:	2300      	movs	r3, #0
     e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
     e3c:	e008      	b.n	e50 <tcc_init+0x1d0>
		module_inst->callback[i] = NULL;
     e3e:	68fa      	ldr	r2, [r7, #12]
     e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e42:	009b      	lsls	r3, r3, #2
     e44:	18d3      	adds	r3, r2, r3
     e46:	2200      	movs	r2, #0
     e48:	605a      	str	r2, [r3, #4]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e4c:	3301      	adds	r3, #1
     e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
     e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e52:	2b0b      	cmp	r3, #11
     e54:	ddf3      	ble.n	e3e <tcc_init+0x1be>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	2200      	movs	r2, #0
     e5a:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     e5c:	68fb      	ldr	r3, [r7, #12]
     e5e:	2200      	movs	r2, #0
     e60:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     e62:	233b      	movs	r3, #59	; 0x3b
     e64:	18fb      	adds	r3, r7, r3
     e66:	781a      	ldrb	r2, [r3, #0]
     e68:	4b5d      	ldr	r3, [pc, #372]	; (fe0 <tcc_init+0x360>)
     e6a:	0092      	lsls	r2, r2, #2
     e6c:	68f9      	ldr	r1, [r7, #12]
     e6e:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	68ba      	ldr	r2, [r7, #8]
     e74:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	22a0      	movs	r2, #160	; 0xa0
     e7a:	5c99      	ldrb	r1, [r3, r2]
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	223c      	movs	r2, #60	; 0x3c
     e80:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     e82:	2314      	movs	r3, #20
     e84:	18fb      	adds	r3, r7, r3
     e86:	1c18      	adds	r0, r3, #0
     e88:	4b56      	ldr	r3, [pc, #344]	; (fe4 <tcc_init+0x364>)
     e8a:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	7a9a      	ldrb	r2, [r3, #10]
     e90:	2314      	movs	r3, #20
     e92:	18fb      	adds	r3, r7, r3
     e94:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     e96:	233b      	movs	r3, #59	; 0x3b
     e98:	18fb      	adds	r3, r7, r3
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	4a52      	ldr	r2, [pc, #328]	; (fe8 <tcc_init+0x368>)
     e9e:	5cd2      	ldrb	r2, [r2, r3]
     ea0:	2314      	movs	r3, #20
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	1c10      	adds	r0, r2, #0
     ea6:	1c19      	adds	r1, r3, #0
     ea8:	4b50      	ldr	r3, [pc, #320]	; (fec <tcc_init+0x36c>)
     eaa:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     eac:	233b      	movs	r3, #59	; 0x3b
     eae:	18fb      	adds	r3, r7, r3
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	4a4d      	ldr	r2, [pc, #308]	; (fe8 <tcc_init+0x368>)
     eb4:	5cd3      	ldrb	r3, [r2, r3]
     eb6:	1c18      	adds	r0, r3, #0
     eb8:	4b4d      	ldr	r3, [pc, #308]	; (ff0 <tcc_init+0x370>)
     eba:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     ebc:	2300      	movs	r3, #0
     ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
     ec0:	e02c      	b.n	f1c <tcc_init+0x29c>
		if (!config->pins.enable_wave_out_pin[i]) {
     ec2:	687a      	ldr	r2, [r7, #4]
     ec4:	2198      	movs	r1, #152	; 0x98
     ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec8:	18d3      	adds	r3, r2, r3
     eca:	185b      	adds	r3, r3, r1
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2201      	movs	r2, #1
     ed0:	4053      	eors	r3, r2
     ed2:	b2db      	uxtb	r3, r3
     ed4:	2b00      	cmp	r3, #0
     ed6:	d000      	beq.n	eda <tcc_init+0x25a>
			continue;
     ed8:	e01d      	b.n	f16 <tcc_init+0x296>
		}

		system_pinmux_get_config_defaults(&pin_config);
     eda:	2310      	movs	r3, #16
     edc:	18fb      	adds	r3, r7, r3
     ede:	1c18      	adds	r0, r3, #0
     ee0:	4b44      	ldr	r3, [pc, #272]	; (ff4 <tcc_init+0x374>)
     ee2:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ee8:	321e      	adds	r2, #30
     eea:	0092      	lsls	r2, r2, #2
     eec:	58d3      	ldr	r3, [r2, r3]
     eee:	b2da      	uxtb	r2, r3
     ef0:	2310      	movs	r3, #16
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     ef6:	2310      	movs	r3, #16
     ef8:	18fb      	adds	r3, r7, r3
     efa:	2201      	movs	r2, #1
     efc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f02:	3216      	adds	r2, #22
     f04:	0092      	lsls	r2, r2, #2
     f06:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     f08:	b2da      	uxtb	r2, r3
     f0a:	2310      	movs	r3, #16
     f0c:	18fb      	adds	r3, r7, r3
     f0e:	1c10      	adds	r0, r2, #0
     f10:	1c19      	adds	r1, r3, #0
     f12:	4b39      	ldr	r3, [pc, #228]	; (ff8 <tcc_init+0x378>)
     f14:	4798      	blx	r3
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f18:	3301      	adds	r3, #1
     f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
     f1c:	233b      	movs	r3, #59	; 0x3b
     f1e:	18fb      	adds	r3, r7, r3
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	4a29      	ldr	r2, [pc, #164]	; (fc8 <tcc_init+0x348>)
     f24:	5cd3      	ldrb	r3, [r2, r3]
     f26:	1e1a      	subs	r2, r3, #0
     f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f2a:	429a      	cmp	r2, r3
     f2c:	dcc9      	bgt.n	ec2 <tcc_init+0x242>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
     f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f30:	68bb      	ldr	r3, [r7, #8]
     f32:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     f34:	46c0      	nop			; (mov r8, r8)
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	689b      	ldr	r3, [r3, #8]
     f3a:	2204      	movs	r2, #4
     f3c:	4013      	ands	r3, r2
     f3e:	d1fa      	bne.n	f36 <tcc_init+0x2b6>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
     f40:	68bb      	ldr	r3, [r7, #8]
     f42:	22ff      	movs	r2, #255	; 0xff
     f44:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	689b      	ldr	r3, [r3, #8]
     f4c:	2204      	movs	r2, #4
     f4e:	4013      	ands	r3, r2
     f50:	d1fa      	bne.n	f48 <tcc_init+0x2c8>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
     f52:	232b      	movs	r3, #43	; 0x2b
     f54:	18fb      	adds	r3, r7, r3
     f56:	781a      	ldrb	r2, [r3, #0]
     f58:	68bb      	ldr	r3, [r7, #8]
     f5a:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
     f5c:	2320      	movs	r3, #32
     f5e:	18fb      	adds	r3, r7, r3
     f60:	681a      	ldr	r2, [r3, #0]
     f62:	68bb      	ldr	r3, [r7, #8]
     f64:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
     f66:	2320      	movs	r3, #32
     f68:	18fb      	adds	r3, r7, r3
     f6a:	685a      	ldr	r2, [r3, #4]
     f6c:	68bb      	ldr	r3, [r7, #8]
     f6e:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
     f70:	69fa      	ldr	r2, [r7, #28]
     f72:	68bb      	ldr	r3, [r7, #8]
     f74:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	68bb      	ldr	r3, [r7, #8]
     f7a:	689b      	ldr	r3, [r3, #8]
     f7c:	4a1f      	ldr	r2, [pc, #124]	; (ffc <tcc_init+0x37c>)
     f7e:	4013      	ands	r3, r2
     f80:	d1fa      	bne.n	f78 <tcc_init+0x2f8>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
     f82:	69ba      	ldr	r2, [r7, #24]
     f84:	68bb      	ldr	r3, [r7, #8]
     f86:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     f88:	46c0      	nop			; (mov r8, r8)
     f8a:	68bb      	ldr	r3, [r7, #8]
     f8c:	689b      	ldr	r3, [r3, #8]
     f8e:	2210      	movs	r2, #16
     f90:	4013      	ands	r3, r2
     f92:	d1fa      	bne.n	f8a <tcc_init+0x30a>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	681a      	ldr	r2, [r3, #0]
     f98:	68bb      	ldr	r3, [r7, #8]
     f9a:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     f9c:	46c0      	nop			; (mov r8, r8)
     f9e:	68bb      	ldr	r3, [r7, #8]
     fa0:	689b      	ldr	r3, [r3, #8]
     fa2:	4a17      	ldr	r2, [pc, #92]	; (1000 <tcc_init+0x380>)
     fa4:	4013      	ands	r3, r2
     fa6:	d1fa      	bne.n	f9e <tcc_init+0x31e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	685a      	ldr	r2, [r3, #4]
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     fb0:	2300      	movs	r3, #0
     fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
     fb4:	e03e      	b.n	1034 <tcc_init+0x3b4>
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	000005f1 	.word	0x000005f1
     fbc:	00002164 	.word	0x00002164
     fc0:	0000056d 	.word	0x0000056d
     fc4:	00002170 	.word	0x00002170
     fc8:	00002180 	.word	0x00002180
     fcc:	000008f9 	.word	0x000008f9
     fd0:	0000099d 	.word	0x0000099d
     fd4:	000009f9 	.word	0x000009f9
     fd8:	00000b15 	.word	0x00000b15
     fdc:	00000be9 	.word	0x00000be9
     fe0:	200000a0 	.word	0x200000a0
     fe4:	00000559 	.word	0x00000559
     fe8:	00002160 	.word	0x00002160
     fec:	00001b9d 	.word	0x00001b9d
     ff0:	00001be1 	.word	0x00001be1
     ff4:	000005c9 	.word	0x000005c9
     ff8:	00001e2d 	.word	0x00001e2d
     ffc:	00020040 	.word	0x00020040
    1000:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	68bb      	ldr	r3, [r7, #8]
    1008:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    100a:	4911      	ldr	r1, [pc, #68]	; (1050 <tcc_init+0x3d0>)
    100c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    100e:	4091      	lsls	r1, r2
    1010:	1c0a      	adds	r2, r1, #0
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    1012:	4013      	ands	r3, r2
    1014:	d1f7      	bne.n	1006 <tcc_init+0x386>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    1016:	687a      	ldr	r2, [r7, #4]
    1018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    101a:	3306      	adds	r3, #6
    101c:	009b      	lsls	r3, r3, #2
    101e:	18d3      	adds	r3, r2, r3
    1020:	685a      	ldr	r2, [r3, #4]
    1022:	68b9      	ldr	r1, [r7, #8]
    1024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1026:	3310      	adds	r3, #16
    1028:	009b      	lsls	r3, r3, #2
    102a:	18cb      	adds	r3, r1, r3
    102c:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1030:	3301      	adds	r3, #1
    1032:	63fb      	str	r3, [r7, #60]	; 0x3c
    1034:	233b      	movs	r3, #59	; 0x3b
    1036:	18fb      	adds	r3, r7, r3
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	4a06      	ldr	r2, [pc, #24]	; (1054 <tcc_init+0x3d4>)
    103c:	5cd3      	ldrb	r3, [r2, r3]
    103e:	1e1a      	subs	r2, r3, #0
    1040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1042:	429a      	cmp	r2, r3
    1044:	dcde      	bgt.n	1004 <tcc_init+0x384>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    1046:	2300      	movs	r3, #0
}
    1048:	1c18      	adds	r0, r3, #0
    104a:	46bd      	mov	sp, r7
    104c:	b011      	add	sp, #68	; 0x44
    104e:	bd90      	pop	{r4, r7, pc}
    1050:	00080100 	.word	0x00080100
    1054:	0000217c 	.word	0x0000217c

00001058 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1058:	b590      	push	{r4, r7, lr}
    105a:	b089      	sub	sp, #36	; 0x24
    105c:	af00      	add	r7, sp, #0
    105e:	60f8      	str	r0, [r7, #12]
    1060:	1c08      	adds	r0, r1, #0
    1062:	607a      	str	r2, [r7, #4]
    1064:	1c19      	adds	r1, r3, #0
    1066:	230b      	movs	r3, #11
    1068:	18fb      	adds	r3, r7, r3
    106a:	1c02      	adds	r2, r0, #0
    106c:	701a      	strb	r2, [r3, #0]
    106e:	230a      	movs	r3, #10
    1070:	18fb      	adds	r3, r7, r3
    1072:	1c0a      	adds	r2, r1, #0
    1074:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    107c:	231b      	movs	r3, #27
    107e:	18fc      	adds	r4, r7, r3
    1080:	69fb      	ldr	r3, [r7, #28]
    1082:	1c18      	adds	r0, r3, #0
    1084:	4b28      	ldr	r3, [pc, #160]	; (1128 <_tcc_set_compare_value+0xd0>)
    1086:	4798      	blx	r3
    1088:	1c03      	adds	r3, r0, #0
    108a:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    108c:	231b      	movs	r3, #27
    108e:	18fb      	adds	r3, r7, r3
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	4a26      	ldr	r2, [pc, #152]	; (112c <_tcc_set_compare_value+0xd4>)
    1094:	5cd3      	ldrb	r3, [r2, r3]
    1096:	220b      	movs	r2, #11
    1098:	18ba      	adds	r2, r7, r2
    109a:	7812      	ldrb	r2, [r2, #0]
    109c:	429a      	cmp	r2, r3
    109e:	d301      	bcc.n	10a4 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    10a0:	2317      	movs	r3, #23
    10a2:	e03c      	b.n	111e <_tcc_set_compare_value+0xc6>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    10a4:	231b      	movs	r3, #27
    10a6:	18fb      	adds	r3, r7, r3
    10a8:	781a      	ldrb	r2, [r3, #0]
    10aa:	4b21      	ldr	r3, [pc, #132]	; (1130 <_tcc_set_compare_value+0xd8>)
    10ac:	0092      	lsls	r2, r2, #2
    10ae:	58d3      	ldr	r3, [r2, r3]
    10b0:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    10b2:	687a      	ldr	r2, [r7, #4]
    10b4:	697b      	ldr	r3, [r7, #20]
    10b6:	429a      	cmp	r2, r3
    10b8:	d901      	bls.n	10be <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    10ba:	2317      	movs	r3, #23
    10bc:	e02f      	b.n	111e <_tcc_set_compare_value+0xc6>
	}

	if (double_buffering_enabled) {
    10be:	230a      	movs	r3, #10
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d014      	beq.n	10f2 <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    10c8:	46c0      	nop			; (mov r8, r8)
    10ca:	69fb      	ldr	r3, [r7, #28]
    10cc:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    10ce:	220b      	movs	r2, #11
    10d0:	18ba      	adds	r2, r7, r2
    10d2:	7812      	ldrb	r2, [r2, #0]
    10d4:	2180      	movs	r1, #128	; 0x80
    10d6:	0309      	lsls	r1, r1, #12
    10d8:	4091      	lsls	r1, r2
    10da:	1c0a      	adds	r2, r1, #0

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    10dc:	4013      	ands	r3, r2
    10de:	d1f4      	bne.n	10ca <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    10e0:	230b      	movs	r3, #11
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	781a      	ldrb	r2, [r3, #0]
    10e6:	69fb      	ldr	r3, [r7, #28]
    10e8:	321c      	adds	r2, #28
    10ea:	0092      	lsls	r2, r2, #2
    10ec:	6879      	ldr	r1, [r7, #4]
    10ee:	50d1      	str	r1, [r2, r3]
    10f0:	e014      	b.n	111c <_tcc_set_compare_value+0xc4>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	69fb      	ldr	r3, [r7, #28]
    10f6:	689b      	ldr	r3, [r3, #8]
    10f8:	220b      	movs	r2, #11
    10fa:	18ba      	adds	r2, r7, r2
    10fc:	7812      	ldrb	r2, [r2, #0]
    10fe:	2180      	movs	r1, #128	; 0x80
    1100:	0049      	lsls	r1, r1, #1
    1102:	4091      	lsls	r1, r2
    1104:	1c0a      	adds	r2, r1, #0
    1106:	4013      	ands	r3, r2
    1108:	d1f4      	bne.n	10f4 <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    110a:	230b      	movs	r3, #11
    110c:	18fb      	adds	r3, r7, r3
    110e:	781b      	ldrb	r3, [r3, #0]
    1110:	69fa      	ldr	r2, [r7, #28]
    1112:	3310      	adds	r3, #16
    1114:	009b      	lsls	r3, r3, #2
    1116:	18d3      	adds	r3, r2, r3
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	605a      	str	r2, [r3, #4]
	}
	return STATUS_OK;
    111c:	2300      	movs	r3, #0
}
    111e:	1c18      	adds	r0, r3, #0
    1120:	46bd      	mov	sp, r7
    1122:	b009      	add	sp, #36	; 0x24
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	000005f1 	.word	0x000005f1
    112c:	0000217c 	.word	0x0000217c
    1130:	00002170 	.word	0x00002170

00001134 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1134:	b590      	push	{r4, r7, lr}
    1136:	b085      	sub	sp, #20
    1138:	af00      	add	r7, sp, #0
    113a:	60f8      	str	r0, [r7, #12]
    113c:	607a      	str	r2, [r7, #4]
    113e:	230b      	movs	r3, #11
    1140:	18fb      	adds	r3, r7, r3
    1142:	1c0a      	adds	r2, r1, #0
    1144:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1146:	68fb      	ldr	r3, [r7, #12]
    1148:	223c      	movs	r2, #60	; 0x3c
    114a:	5c9c      	ldrb	r4, [r3, r2]
    114c:	68f9      	ldr	r1, [r7, #12]
    114e:	230b      	movs	r3, #11
    1150:	18fb      	adds	r3, r7, r3
    1152:	781a      	ldrb	r2, [r3, #0]
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	1c08      	adds	r0, r1, #0
    1158:	1c11      	adds	r1, r2, #0
    115a:	1c1a      	adds	r2, r3, #0
    115c:	1c23      	adds	r3, r4, #0
    115e:	4c03      	ldr	r4, [pc, #12]	; (116c <tcc_set_compare_value+0x38>)
    1160:	47a0      	blx	r4
    1162:	1c03      	adds	r3, r0, #0
			module_inst->double_buffering_enabled);
}
    1164:	1c18      	adds	r0, r3, #0
    1166:	46bd      	mov	sp, r7
    1168:	b005      	add	sp, #20
    116a:	bd90      	pop	{r4, r7, pc}
    116c:	00001059 	.word	0x00001059

00001170 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1170:	b580      	push	{r7, lr}
    1172:	af00      	add	r7, sp, #0
    1174:	2000      	movs	r0, #0
    1176:	4b02      	ldr	r3, [pc, #8]	; (1180 <TCC0_Handler+0x10>)
    1178:	4798      	blx	r3
    117a:	46bd      	mov	sp, r7
    117c:	bd80      	pop	{r7, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	000011ad 	.word	0x000011ad

00001184 <TCC1_Handler>:
    1184:	b580      	push	{r7, lr}
    1186:	af00      	add	r7, sp, #0
    1188:	2001      	movs	r0, #1
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <TCC1_Handler+0x10>)
    118c:	4798      	blx	r3
    118e:	46bd      	mov	sp, r7
    1190:	bd80      	pop	{r7, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	000011ad 	.word	0x000011ad

00001198 <TCC2_Handler>:
    1198:	b580      	push	{r7, lr}
    119a:	af00      	add	r7, sp, #0
    119c:	2002      	movs	r0, #2
    119e:	4b02      	ldr	r3, [pc, #8]	; (11a8 <TCC2_Handler+0x10>)
    11a0:	4798      	blx	r3
    11a2:	46bd      	mov	sp, r7
    11a4:	bd80      	pop	{r7, pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	000011ad 	.word	0x000011ad

000011ac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    11ac:	b580      	push	{r7, lr}
    11ae:	b086      	sub	sp, #24
    11b0:	af00      	add	r7, sp, #0
    11b2:	1c02      	adds	r2, r0, #0
    11b4:	1dfb      	adds	r3, r7, #7
    11b6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    11b8:	1dfb      	adds	r3, r7, #7
    11ba:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    11bc:	4b17      	ldr	r3, [pc, #92]	; (121c <_tcc_interrupt_handler+0x70>)
    11be:	0092      	lsls	r2, r2, #2
    11c0:	58d3      	ldr	r3, [r2, r3]
    11c2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    11c4:	693b      	ldr	r3, [r7, #16]
    11c6:	681b      	ldr	r3, [r3, #0]
    11c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    11ca:	693b      	ldr	r3, [r7, #16]
    11cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    11ce:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    11d0:	693b      	ldr	r3, [r7, #16]
    11d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    11d4:	4013      	ands	r3, r2
    11d6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    11d8:	2300      	movs	r3, #0
    11da:	617b      	str	r3, [r7, #20]
    11dc:	e018      	b.n	1210 <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    11de:	4b10      	ldr	r3, [pc, #64]	; (1220 <_tcc_interrupt_handler+0x74>)
    11e0:	697a      	ldr	r2, [r7, #20]
    11e2:	0092      	lsls	r2, r2, #2
    11e4:	58d3      	ldr	r3, [r2, r3]
    11e6:	68fa      	ldr	r2, [r7, #12]
    11e8:	4013      	ands	r3, r2
    11ea:	d00e      	beq.n	120a <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    11ec:	693a      	ldr	r2, [r7, #16]
    11ee:	697b      	ldr	r3, [r7, #20]
    11f0:	009b      	lsls	r3, r3, #2
    11f2:	18d3      	adds	r3, r2, r3
    11f4:	685b      	ldr	r3, [r3, #4]
    11f6:	693a      	ldr	r2, [r7, #16]
    11f8:	1c10      	adds	r0, r2, #0
    11fa:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    11fc:	693b      	ldr	r3, [r7, #16]
    11fe:	681b      	ldr	r3, [r3, #0]
    1200:	4a07      	ldr	r2, [pc, #28]	; (1220 <_tcc_interrupt_handler+0x74>)
    1202:	6979      	ldr	r1, [r7, #20]
    1204:	0089      	lsls	r1, r1, #2
    1206:	588a      	ldr	r2, [r1, r2]
    1208:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    120a:	697b      	ldr	r3, [r7, #20]
    120c:	3301      	adds	r3, #1
    120e:	617b      	str	r3, [r7, #20]
    1210:	697b      	ldr	r3, [r7, #20]
    1212:	2b0b      	cmp	r3, #11
    1214:	dde3      	ble.n	11de <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    1216:	46bd      	mov	sp, r7
    1218:	b006      	add	sp, #24
    121a:	bd80      	pop	{r7, pc}
    121c:	200000a0 	.word	0x200000a0
    1220:	00002184 	.word	0x00002184

00001224 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1224:	b580      	push	{r7, lr}
    1226:	af00      	add	r7, sp, #0
    1228:	2000      	movs	r0, #0
    122a:	4b02      	ldr	r3, [pc, #8]	; (1234 <TC3_Handler+0x10>)
    122c:	4798      	blx	r3
    122e:	46bd      	mov	sp, r7
    1230:	bd80      	pop	{r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	00001261 	.word	0x00001261

00001238 <TC4_Handler>:
    1238:	b580      	push	{r7, lr}
    123a:	af00      	add	r7, sp, #0
    123c:	2001      	movs	r0, #1
    123e:	4b02      	ldr	r3, [pc, #8]	; (1248 <TC4_Handler+0x10>)
    1240:	4798      	blx	r3
    1242:	46bd      	mov	sp, r7
    1244:	bd80      	pop	{r7, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	00001261 	.word	0x00001261

0000124c <TC5_Handler>:
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0
    1250:	2002      	movs	r0, #2
    1252:	4b02      	ldr	r3, [pc, #8]	; (125c <TC5_Handler+0x10>)
    1254:	4798      	blx	r3
    1256:	46bd      	mov	sp, r7
    1258:	bd80      	pop	{r7, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	00001261 	.word	0x00001261

00001260 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1260:	b580      	push	{r7, lr}
    1262:	b084      	sub	sp, #16
    1264:	af00      	add	r7, sp, #0
    1266:	1c02      	adds	r2, r0, #0
    1268:	1dfb      	adds	r3, r7, #7
    126a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    126c:	1dfb      	adds	r3, r7, #7
    126e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1270:	4b28      	ldr	r3, [pc, #160]	; (1314 <_tc_interrupt_handler+0xb4>)
    1272:	0092      	lsls	r2, r2, #2
    1274:	58d3      	ldr	r3, [r2, r3]
    1276:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	7b9b      	ldrb	r3, [r3, #14]
    127e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1280:	68fa      	ldr	r2, [r7, #12]
    1282:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1284:	4013      	ands	r3, r2
    1286:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    128c:	230b      	movs	r3, #11
    128e:	18fb      	adds	r3, r7, r3
    1290:	400a      	ands	r2, r1
    1292:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1294:	230b      	movs	r3, #11
    1296:	18fb      	adds	r3, r7, r3
    1298:	781b      	ldrb	r3, [r3, #0]
    129a:	2201      	movs	r2, #1
    129c:	4013      	ands	r3, r2
    129e:	d008      	beq.n	12b2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    12a0:	68fb      	ldr	r3, [r7, #12]
    12a2:	689b      	ldr	r3, [r3, #8]
    12a4:	68fa      	ldr	r2, [r7, #12]
    12a6:	1c10      	adds	r0, r2, #0
    12a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    12aa:	68fb      	ldr	r3, [r7, #12]
    12ac:	681b      	ldr	r3, [r3, #0]
    12ae:	2201      	movs	r2, #1
    12b0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    12b2:	230b      	movs	r3, #11
    12b4:	18fb      	adds	r3, r7, r3
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	2202      	movs	r2, #2
    12ba:	4013      	ands	r3, r2
    12bc:	d008      	beq.n	12d0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    12be:	68fb      	ldr	r3, [r7, #12]
    12c0:	68db      	ldr	r3, [r3, #12]
    12c2:	68fa      	ldr	r2, [r7, #12]
    12c4:	1c10      	adds	r0, r2, #0
    12c6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	2202      	movs	r2, #2
    12ce:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    12d0:	230b      	movs	r3, #11
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2210      	movs	r2, #16
    12d8:	4013      	ands	r3, r2
    12da:	d008      	beq.n	12ee <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	691b      	ldr	r3, [r3, #16]
    12e0:	68fa      	ldr	r2, [r7, #12]
    12e2:	1c10      	adds	r0, r2, #0
    12e4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	2210      	movs	r2, #16
    12ec:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    12ee:	230b      	movs	r3, #11
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	2220      	movs	r2, #32
    12f6:	4013      	ands	r3, r2
    12f8:	d008      	beq.n	130c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	695b      	ldr	r3, [r3, #20]
    12fe:	68fa      	ldr	r2, [r7, #12]
    1300:	1c10      	adds	r0, r2, #0
    1302:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	2220      	movs	r2, #32
    130a:	739a      	strb	r2, [r3, #14]
	}
}
    130c:	46bd      	mov	sp, r7
    130e:	b004      	add	sp, #16
    1310:	bd80      	pop	{r7, pc}
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	200000ac 	.word	0x200000ac

00001318 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1318:	b580      	push	{r7, lr}
    131a:	af00      	add	r7, sp, #0
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <SERCOM0_Handler+0x10>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	2000      	movs	r0, #0
    1322:	4798      	blx	r3
    1324:	46bd      	mov	sp, r7
    1326:	bd80      	pop	{r7, pc}
    1328:	20000020 	.word	0x20000020

0000132c <SERCOM1_Handler>:
    132c:	b580      	push	{r7, lr}
    132e:	af00      	add	r7, sp, #0
    1330:	4b02      	ldr	r3, [pc, #8]	; (133c <SERCOM1_Handler+0x10>)
    1332:	685b      	ldr	r3, [r3, #4]
    1334:	2001      	movs	r0, #1
    1336:	4798      	blx	r3
    1338:	46bd      	mov	sp, r7
    133a:	bd80      	pop	{r7, pc}
    133c:	20000020 	.word	0x20000020

00001340 <SERCOM2_Handler>:
    1340:	b580      	push	{r7, lr}
    1342:	af00      	add	r7, sp, #0
    1344:	4b02      	ldr	r3, [pc, #8]	; (1350 <SERCOM2_Handler+0x10>)
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	2002      	movs	r0, #2
    134a:	4798      	blx	r3
    134c:	46bd      	mov	sp, r7
    134e:	bd80      	pop	{r7, pc}
    1350:	20000020 	.word	0x20000020

00001354 <SERCOM3_Handler>:
    1354:	b580      	push	{r7, lr}
    1356:	af00      	add	r7, sp, #0
    1358:	4b02      	ldr	r3, [pc, #8]	; (1364 <SERCOM3_Handler+0x10>)
    135a:	68db      	ldr	r3, [r3, #12]
    135c:	2003      	movs	r0, #3
    135e:	4798      	blx	r3
    1360:	46bd      	mov	sp, r7
    1362:	bd80      	pop	{r7, pc}
    1364:	20000020 	.word	0x20000020

00001368 <SERCOM4_Handler>:
    1368:	b580      	push	{r7, lr}
    136a:	af00      	add	r7, sp, #0
    136c:	4b02      	ldr	r3, [pc, #8]	; (1378 <SERCOM4_Handler+0x10>)
    136e:	691b      	ldr	r3, [r3, #16]
    1370:	2004      	movs	r0, #4
    1372:	4798      	blx	r3
    1374:	46bd      	mov	sp, r7
    1376:	bd80      	pop	{r7, pc}
    1378:	20000020 	.word	0x20000020

0000137c <SERCOM5_Handler>:
    137c:	b580      	push	{r7, lr}
    137e:	af00      	add	r7, sp, #0
    1380:	4b02      	ldr	r3, [pc, #8]	; (138c <SERCOM5_Handler+0x10>)
    1382:	695b      	ldr	r3, [r3, #20]
    1384:	2005      	movs	r0, #5
    1386:	4798      	blx	r3
    1388:	46bd      	mov	sp, r7
    138a:	bd80      	pop	{r7, pc}
    138c:	20000020 	.word	0x20000020

00001390 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1390:	b580      	push	{r7, lr}
    1392:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1394:	46bd      	mov	sp, r7
    1396:	bd80      	pop	{r7, pc}

00001398 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1398:	b580      	push	{r7, lr}
    139a:	b082      	sub	sp, #8
    139c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    139e:	4b0f      	ldr	r3, [pc, #60]	; (13dc <cpu_irq_enter_critical+0x44>)
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	2b00      	cmp	r3, #0
    13a4:	d112      	bne.n	13cc <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13a6:	f3ef 8310 	mrs	r3, PRIMASK
    13aa:	607b      	str	r3, [r7, #4]
  return(result);
    13ac:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    13ae:	2b00      	cmp	r3, #0
    13b0:	d109      	bne.n	13c6 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    13b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    13b4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    13b8:	4b09      	ldr	r3, [pc, #36]	; (13e0 <cpu_irq_enter_critical+0x48>)
    13ba:	2200      	movs	r2, #0
    13bc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    13be:	4b09      	ldr	r3, [pc, #36]	; (13e4 <cpu_irq_enter_critical+0x4c>)
    13c0:	2201      	movs	r2, #1
    13c2:	701a      	strb	r2, [r3, #0]
    13c4:	e002      	b.n	13cc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    13c6:	4b07      	ldr	r3, [pc, #28]	; (13e4 <cpu_irq_enter_critical+0x4c>)
    13c8:	2200      	movs	r2, #0
    13ca:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    13cc:	4b03      	ldr	r3, [pc, #12]	; (13dc <cpu_irq_enter_critical+0x44>)
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	1c5a      	adds	r2, r3, #1
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <cpu_irq_enter_critical+0x44>)
    13d4:	601a      	str	r2, [r3, #0]
}
    13d6:	46bd      	mov	sp, r7
    13d8:	b002      	add	sp, #8
    13da:	bd80      	pop	{r7, pc}
    13dc:	20000038 	.word	0x20000038
    13e0:	20000000 	.word	0x20000000
    13e4:	2000003c 	.word	0x2000003c

000013e8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    13ec:	4b0a      	ldr	r3, [pc, #40]	; (1418 <cpu_irq_leave_critical+0x30>)
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	1e5a      	subs	r2, r3, #1
    13f2:	4b09      	ldr	r3, [pc, #36]	; (1418 <cpu_irq_leave_critical+0x30>)
    13f4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <cpu_irq_leave_critical+0x30>)
    13f8:	681b      	ldr	r3, [r3, #0]
    13fa:	2b00      	cmp	r3, #0
    13fc:	d10a      	bne.n	1414 <cpu_irq_leave_critical+0x2c>
    13fe:	4b07      	ldr	r3, [pc, #28]	; (141c <cpu_irq_leave_critical+0x34>)
    1400:	781b      	ldrb	r3, [r3, #0]
    1402:	b2db      	uxtb	r3, r3
    1404:	2b00      	cmp	r3, #0
    1406:	d005      	beq.n	1414 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1408:	4b05      	ldr	r3, [pc, #20]	; (1420 <cpu_irq_leave_critical+0x38>)
    140a:	2201      	movs	r2, #1
    140c:	701a      	strb	r2, [r3, #0]
    140e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1412:	b662      	cpsie	i
	}
}
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}
    1418:	20000038 	.word	0x20000038
    141c:	2000003c 	.word	0x2000003c
    1420:	20000000 	.word	0x20000000

00001424 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	2201      	movs	r2, #1
    1430:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	2200      	movs	r2, #0
    1436:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	2206      	movs	r2, #6
    143c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	2200      	movs	r2, #0
    1442:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2200      	movs	r2, #0
    1448:	725a      	strb	r2, [r3, #9]
}
    144a:	46bd      	mov	sp, r7
    144c:	b002      	add	sp, #8
    144e:	bd80      	pop	{r7, pc}

00001450 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    1450:	b580      	push	{r7, lr}
    1452:	b082      	sub	sp, #8
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	2201      	movs	r2, #1
    145c:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	2201      	movs	r2, #1
    1462:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2200      	movs	r2, #0
    1468:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	2201      	movs	r2, #1
    146e:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	2207      	movs	r2, #7
    1474:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	2200      	movs	r2, #0
    147a:	715a      	strb	r2, [r3, #5]
}
    147c:	46bd      	mov	sp, r7
    147e:	b002      	add	sp, #8
    1480:	bd80      	pop	{r7, pc}
    1482:	46c0      	nop			; (mov r8, r8)

00001484 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    1484:	b580      	push	{r7, lr}
    1486:	b082      	sub	sp, #8
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	2203      	movs	r2, #3
    1490:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	2200      	movs	r2, #0
    1496:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	2201      	movs	r2, #1
    149c:	709a      	strb	r2, [r3, #2]
}
    149e:	46bd      	mov	sp, r7
    14a0:	b002      	add	sp, #8
    14a2:	bd80      	pop	{r7, pc}

000014a4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	1c02      	adds	r2, r0, #0
    14ac:	1dfb      	adds	r3, r7, #7
    14ae:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    14b0:	4a03      	ldr	r2, [pc, #12]	; (14c0 <system_cpu_clock_set_divider+0x1c>)
    14b2:	1dfb      	adds	r3, r7, #7
    14b4:	781b      	ldrb	r3, [r3, #0]
    14b6:	7213      	strb	r3, [r2, #8]
}
    14b8:	46bd      	mov	sp, r7
    14ba:	b002      	add	sp, #8
    14bc:	bd80      	pop	{r7, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	40000400 	.word	0x40000400

000014c4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	1c02      	adds	r2, r0, #0
    14cc:	1dfb      	adds	r3, r7, #7
    14ce:	701a      	strb	r2, [r3, #0]
    14d0:	1dbb      	adds	r3, r7, #6
    14d2:	1c0a      	adds	r2, r1, #0
    14d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    14d6:	1dfb      	adds	r3, r7, #7
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	2b01      	cmp	r3, #1
    14dc:	d008      	beq.n	14f0 <system_apb_clock_set_divider+0x2c>
    14de:	2b02      	cmp	r3, #2
    14e0:	d00b      	beq.n	14fa <system_apb_clock_set_divider+0x36>
    14e2:	2b00      	cmp	r3, #0
    14e4:	d10e      	bne.n	1504 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    14e6:	4a0b      	ldr	r2, [pc, #44]	; (1514 <system_apb_clock_set_divider+0x50>)
    14e8:	1dbb      	adds	r3, r7, #6
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	7253      	strb	r3, [r2, #9]
			break;
    14ee:	e00b      	b.n	1508 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    14f0:	4a08      	ldr	r2, [pc, #32]	; (1514 <system_apb_clock_set_divider+0x50>)
    14f2:	1dbb      	adds	r3, r7, #6
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	7293      	strb	r3, [r2, #10]
			break;
    14f8:	e006      	b.n	1508 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    14fa:	4a06      	ldr	r2, [pc, #24]	; (1514 <system_apb_clock_set_divider+0x50>)
    14fc:	1dbb      	adds	r3, r7, #6
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	72d3      	strb	r3, [r2, #11]
			break;
    1502:	e001      	b.n	1508 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1504:	2317      	movs	r3, #23
    1506:	e000      	b.n	150a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1508:	2300      	movs	r3, #0
}
    150a:	1c18      	adds	r0, r3, #0
    150c:	46bd      	mov	sp, r7
    150e:	b002      	add	sp, #8
    1510:	bd80      	pop	{r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	40000400 	.word	0x40000400

00001518 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1518:	b580      	push	{r7, lr}
    151a:	b082      	sub	sp, #8
    151c:	af00      	add	r7, sp, #0
    151e:	1c02      	adds	r2, r0, #0
    1520:	1dfb      	adds	r3, r7, #7
    1522:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1524:	4b08      	ldr	r3, [pc, #32]	; (1548 <system_flash_set_waitstates+0x30>)
    1526:	1dfa      	adds	r2, r7, #7
    1528:	7812      	ldrb	r2, [r2, #0]
    152a:	210f      	movs	r1, #15
    152c:	400a      	ands	r2, r1
    152e:	b2d2      	uxtb	r2, r2
    1530:	210f      	movs	r1, #15
    1532:	400a      	ands	r2, r1
    1534:	0052      	lsls	r2, r2, #1
    1536:	6859      	ldr	r1, [r3, #4]
    1538:	201e      	movs	r0, #30
    153a:	4381      	bics	r1, r0
    153c:	430a      	orrs	r2, r1
    153e:	605a      	str	r2, [r3, #4]
}
    1540:	46bd      	mov	sp, r7
    1542:	b002      	add	sp, #8
    1544:	bd80      	pop	{r7, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	41004000 	.word	0x41004000

0000154c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    154c:	b580      	push	{r7, lr}
    154e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1550:	46c0      	nop			; (mov r8, r8)
    1552:	4b03      	ldr	r3, [pc, #12]	; (1560 <_system_dfll_wait_for_sync+0x14>)
    1554:	68db      	ldr	r3, [r3, #12]
    1556:	2210      	movs	r2, #16
    1558:	4013      	ands	r3, r2
    155a:	d0fa      	beq.n	1552 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    155c:	46bd      	mov	sp, r7
    155e:	bd80      	pop	{r7, pc}
    1560:	40000800 	.word	0x40000800

00001564 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1564:	b580      	push	{r7, lr}
    1566:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1568:	4b0c      	ldr	r3, [pc, #48]	; (159c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    156a:	2202      	movs	r2, #2
    156c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    156e:	4b0c      	ldr	r3, [pc, #48]	; (15a0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1570:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1572:	4a0a      	ldr	r2, [pc, #40]	; (159c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1574:	4b0b      	ldr	r3, [pc, #44]	; (15a4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1576:	689b      	ldr	r3, [r3, #8]
    1578:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    157a:	4a08      	ldr	r2, [pc, #32]	; (159c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    157c:	4b09      	ldr	r3, [pc, #36]	; (15a4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    157e:	685b      	ldr	r3, [r3, #4]
    1580:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1582:	4b06      	ldr	r3, [pc, #24]	; (159c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1584:	2200      	movs	r2, #0
    1586:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1588:	4b05      	ldr	r3, [pc, #20]	; (15a0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    158a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    158c:	4a03      	ldr	r2, [pc, #12]	; (159c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    158e:	4b05      	ldr	r3, [pc, #20]	; (15a4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	b29b      	uxth	r3, r3
    1594:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	40000800 	.word	0x40000800
    15a0:	0000154d 	.word	0x0000154d
    15a4:	20000040 	.word	0x20000040

000015a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	b084      	sub	sp, #16
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    15b0:	4b1a      	ldr	r3, [pc, #104]	; (161c <system_clock_source_osc8m_set_config+0x74>)
    15b2:	6a1b      	ldr	r3, [r3, #32]
    15b4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	781b      	ldrb	r3, [r3, #0]
    15ba:	1c1a      	adds	r2, r3, #0
    15bc:	2303      	movs	r3, #3
    15be:	4013      	ands	r3, r2
    15c0:	b2da      	uxtb	r2, r3
    15c2:	230d      	movs	r3, #13
    15c4:	18fb      	adds	r3, r7, r3
    15c6:	2103      	movs	r1, #3
    15c8:	400a      	ands	r2, r1
    15ca:	1c10      	adds	r0, r2, #0
    15cc:	781a      	ldrb	r2, [r3, #0]
    15ce:	2103      	movs	r1, #3
    15d0:	438a      	bics	r2, r1
    15d2:	1c11      	adds	r1, r2, #0
    15d4:	1c02      	adds	r2, r0, #0
    15d6:	430a      	orrs	r2, r1
    15d8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	789a      	ldrb	r2, [r3, #2]
    15de:	230c      	movs	r3, #12
    15e0:	18fb      	adds	r3, r7, r3
    15e2:	01d0      	lsls	r0, r2, #7
    15e4:	781a      	ldrb	r2, [r3, #0]
    15e6:	217f      	movs	r1, #127	; 0x7f
    15e8:	400a      	ands	r2, r1
    15ea:	1c11      	adds	r1, r2, #0
    15ec:	1c02      	adds	r2, r0, #0
    15ee:	430a      	orrs	r2, r1
    15f0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    15f2:	687b      	ldr	r3, [r7, #4]
    15f4:	785a      	ldrb	r2, [r3, #1]
    15f6:	230c      	movs	r3, #12
    15f8:	18fb      	adds	r3, r7, r3
    15fa:	2101      	movs	r1, #1
    15fc:	400a      	ands	r2, r1
    15fe:	0190      	lsls	r0, r2, #6
    1600:	781a      	ldrb	r2, [r3, #0]
    1602:	2140      	movs	r1, #64	; 0x40
    1604:	438a      	bics	r2, r1
    1606:	1c11      	adds	r1, r2, #0
    1608:	1c02      	adds	r2, r0, #0
    160a:	430a      	orrs	r2, r1
    160c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    160e:	4b03      	ldr	r3, [pc, #12]	; (161c <system_clock_source_osc8m_set_config+0x74>)
    1610:	68fa      	ldr	r2, [r7, #12]
    1612:	621a      	str	r2, [r3, #32]
}
    1614:	46bd      	mov	sp, r7
    1616:	b004      	add	sp, #16
    1618:	bd80      	pop	{r7, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	40000800 	.word	0x40000800

00001620 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1620:	b580      	push	{r7, lr}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1628:	4b2f      	ldr	r3, [pc, #188]	; (16e8 <system_clock_source_osc32k_set_config+0xc8>)
    162a:	699b      	ldr	r3, [r3, #24]
    162c:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	785a      	ldrb	r2, [r3, #1]
    1632:	230c      	movs	r3, #12
    1634:	18fb      	adds	r3, r7, r3
    1636:	2101      	movs	r1, #1
    1638:	400a      	ands	r2, r1
    163a:	00d0      	lsls	r0, r2, #3
    163c:	781a      	ldrb	r2, [r3, #0]
    163e:	2108      	movs	r1, #8
    1640:	438a      	bics	r2, r1
    1642:	1c11      	adds	r1, r2, #0
    1644:	1c02      	adds	r2, r0, #0
    1646:	430a      	orrs	r2, r1
    1648:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	789a      	ldrb	r2, [r3, #2]
    164e:	230c      	movs	r3, #12
    1650:	18fb      	adds	r3, r7, r3
    1652:	2101      	movs	r1, #1
    1654:	400a      	ands	r2, r1
    1656:	0090      	lsls	r0, r2, #2
    1658:	781a      	ldrb	r2, [r3, #0]
    165a:	2104      	movs	r1, #4
    165c:	438a      	bics	r2, r1
    165e:	1c11      	adds	r1, r2, #0
    1660:	1c02      	adds	r2, r0, #0
    1662:	430a      	orrs	r2, r1
    1664:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	1c1a      	adds	r2, r3, #0
    166c:	2307      	movs	r3, #7
    166e:	4013      	ands	r3, r2
    1670:	b2da      	uxtb	r2, r3
    1672:	230d      	movs	r3, #13
    1674:	18fb      	adds	r3, r7, r3
    1676:	2107      	movs	r1, #7
    1678:	400a      	ands	r2, r1
    167a:	1c10      	adds	r0, r2, #0
    167c:	781a      	ldrb	r2, [r3, #0]
    167e:	2107      	movs	r1, #7
    1680:	438a      	bics	r2, r1
    1682:	1c11      	adds	r1, r2, #0
    1684:	1c02      	adds	r2, r0, #0
    1686:	430a      	orrs	r2, r1
    1688:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	791a      	ldrb	r2, [r3, #4]
    168e:	230c      	movs	r3, #12
    1690:	18fb      	adds	r3, r7, r3
    1692:	01d0      	lsls	r0, r2, #7
    1694:	781a      	ldrb	r2, [r3, #0]
    1696:	217f      	movs	r1, #127	; 0x7f
    1698:	400a      	ands	r2, r1
    169a:	1c11      	adds	r1, r2, #0
    169c:	1c02      	adds	r2, r0, #0
    169e:	430a      	orrs	r2, r1
    16a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	78da      	ldrb	r2, [r3, #3]
    16a6:	230c      	movs	r3, #12
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	2101      	movs	r1, #1
    16ac:	400a      	ands	r2, r1
    16ae:	0190      	lsls	r0, r2, #6
    16b0:	781a      	ldrb	r2, [r3, #0]
    16b2:	2140      	movs	r1, #64	; 0x40
    16b4:	438a      	bics	r2, r1
    16b6:	1c11      	adds	r1, r2, #0
    16b8:	1c02      	adds	r2, r0, #0
    16ba:	430a      	orrs	r2, r1
    16bc:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	795a      	ldrb	r2, [r3, #5]
    16c2:	230d      	movs	r3, #13
    16c4:	18fb      	adds	r3, r7, r3
    16c6:	2101      	movs	r1, #1
    16c8:	400a      	ands	r2, r1
    16ca:	0110      	lsls	r0, r2, #4
    16cc:	781a      	ldrb	r2, [r3, #0]
    16ce:	2110      	movs	r1, #16
    16d0:	438a      	bics	r2, r1
    16d2:	1c11      	adds	r1, r2, #0
    16d4:	1c02      	adds	r2, r0, #0
    16d6:	430a      	orrs	r2, r1
    16d8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    16da:	4b03      	ldr	r3, [pc, #12]	; (16e8 <system_clock_source_osc32k_set_config+0xc8>)
    16dc:	68fa      	ldr	r2, [r7, #12]
    16de:	619a      	str	r2, [r3, #24]
}
    16e0:	46bd      	mov	sp, r7
    16e2:	b004      	add	sp, #16
    16e4:	bd80      	pop	{r7, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	40000800 	.word	0x40000800

000016ec <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    16ec:	b580      	push	{r7, lr}
    16ee:	b082      	sub	sp, #8
    16f0:	af00      	add	r7, sp, #0
    16f2:	1c02      	adds	r2, r0, #0
    16f4:	1dfb      	adds	r3, r7, #7
    16f6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    16f8:	1dfb      	adds	r3, r7, #7
    16fa:	781b      	ldrb	r3, [r3, #0]
    16fc:	2b08      	cmp	r3, #8
    16fe:	d83b      	bhi.n	1778 <system_clock_source_enable+0x8c>
    1700:	009a      	lsls	r2, r3, #2
    1702:	4b21      	ldr	r3, [pc, #132]	; (1788 <system_clock_source_enable+0x9c>)
    1704:	18d3      	adds	r3, r2, r3
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    170a:	4b20      	ldr	r3, [pc, #128]	; (178c <system_clock_source_enable+0xa0>)
    170c:	4a1f      	ldr	r2, [pc, #124]	; (178c <system_clock_source_enable+0xa0>)
    170e:	6a12      	ldr	r2, [r2, #32]
    1710:	2102      	movs	r1, #2
    1712:	430a      	orrs	r2, r1
    1714:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1716:	2300      	movs	r3, #0
    1718:	e031      	b.n	177e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    171a:	4b1c      	ldr	r3, [pc, #112]	; (178c <system_clock_source_enable+0xa0>)
    171c:	4a1b      	ldr	r2, [pc, #108]	; (178c <system_clock_source_enable+0xa0>)
    171e:	6992      	ldr	r2, [r2, #24]
    1720:	2102      	movs	r1, #2
    1722:	430a      	orrs	r2, r1
    1724:	619a      	str	r2, [r3, #24]
		break;
    1726:	e029      	b.n	177c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1728:	4a18      	ldr	r2, [pc, #96]	; (178c <system_clock_source_enable+0xa0>)
    172a:	4b18      	ldr	r3, [pc, #96]	; (178c <system_clock_source_enable+0xa0>)
    172c:	8a1b      	ldrh	r3, [r3, #16]
    172e:	b29b      	uxth	r3, r3
    1730:	2102      	movs	r1, #2
    1732:	430b      	orrs	r3, r1
    1734:	b29b      	uxth	r3, r3
    1736:	8213      	strh	r3, [r2, #16]
		break;
    1738:	e020      	b.n	177c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    173a:	4a14      	ldr	r2, [pc, #80]	; (178c <system_clock_source_enable+0xa0>)
    173c:	4b13      	ldr	r3, [pc, #76]	; (178c <system_clock_source_enable+0xa0>)
    173e:	8a9b      	ldrh	r3, [r3, #20]
    1740:	b29b      	uxth	r3, r3
    1742:	2102      	movs	r1, #2
    1744:	430b      	orrs	r3, r1
    1746:	b29b      	uxth	r3, r3
    1748:	8293      	strh	r3, [r2, #20]
		break;
    174a:	e017      	b.n	177c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    174c:	4b10      	ldr	r3, [pc, #64]	; (1790 <system_clock_source_enable+0xa4>)
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	2202      	movs	r2, #2
    1752:	431a      	orrs	r2, r3
    1754:	4b0e      	ldr	r3, [pc, #56]	; (1790 <system_clock_source_enable+0xa4>)
    1756:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1758:	4b0e      	ldr	r3, [pc, #56]	; (1794 <system_clock_source_enable+0xa8>)
    175a:	4798      	blx	r3
		break;
    175c:	e00e      	b.n	177c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    175e:	4a0b      	ldr	r2, [pc, #44]	; (178c <system_clock_source_enable+0xa0>)
    1760:	490a      	ldr	r1, [pc, #40]	; (178c <system_clock_source_enable+0xa0>)
    1762:	2344      	movs	r3, #68	; 0x44
    1764:	5ccb      	ldrb	r3, [r1, r3]
    1766:	b2db      	uxtb	r3, r3
    1768:	2102      	movs	r1, #2
    176a:	430b      	orrs	r3, r1
    176c:	b2d9      	uxtb	r1, r3
    176e:	2344      	movs	r3, #68	; 0x44
    1770:	54d1      	strb	r1, [r2, r3]
		break;
    1772:	e003      	b.n	177c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1774:	2300      	movs	r3, #0
    1776:	e002      	b.n	177e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1778:	2317      	movs	r3, #23
    177a:	e000      	b.n	177e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    177c:	2300      	movs	r3, #0
}
    177e:	1c18      	adds	r0, r3, #0
    1780:	46bd      	mov	sp, r7
    1782:	b002      	add	sp, #8
    1784:	bd80      	pop	{r7, pc}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	000021b4 	.word	0x000021b4
    178c:	40000800 	.word	0x40000800
    1790:	20000040 	.word	0x20000040
    1794:	00001565 	.word	0x00001565

00001798 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1798:	b580      	push	{r7, lr}
    179a:	b082      	sub	sp, #8
    179c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    179e:	1c3b      	adds	r3, r7, #0
    17a0:	2201      	movs	r2, #1
    17a2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    17a4:	2300      	movs	r3, #0
    17a6:	607b      	str	r3, [r7, #4]
    17a8:	e009      	b.n	17be <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	b2da      	uxtb	r2, r3
    17ae:	1c3b      	adds	r3, r7, #0
    17b0:	1c10      	adds	r0, r2, #0
    17b2:	1c19      	adds	r1, r3, #0
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <_switch_peripheral_gclk+0x34>)
    17b6:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	3301      	adds	r3, #1
    17bc:	607b      	str	r3, [r7, #4]
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	2b24      	cmp	r3, #36	; 0x24
    17c2:	d9f2      	bls.n	17aa <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    17c4:	46bd      	mov	sp, r7
    17c6:	b002      	add	sp, #8
    17c8:	bd80      	pop	{r7, pc}
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	00001b9d 	.word	0x00001b9d

000017d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b0a2      	sub	sp, #136	; 0x88
    17d4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17d6:	4b4f      	ldr	r3, [pc, #316]	; (1914 <system_clock_init+0x144>)
    17d8:	22c2      	movs	r2, #194	; 0xc2
    17da:	00d2      	lsls	r2, r2, #3
    17dc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    17de:	2000      	movs	r0, #0
    17e0:	4b4d      	ldr	r3, [pc, #308]	; (1918 <system_clock_init+0x148>)
    17e2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    17e4:	4b4d      	ldr	r3, [pc, #308]	; (191c <system_clock_init+0x14c>)
    17e6:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    17e8:	4b4a      	ldr	r3, [pc, #296]	; (1914 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    17ea:	4a4d      	ldr	r2, [pc, #308]	; (1920 <system_clock_init+0x150>)
    17ec:	6812      	ldr	r2, [r2, #0]
    17ee:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    17f0:	b2d2      	uxtb	r2, r2
    17f2:	1c11      	adds	r1, r2, #0
    17f4:	227f      	movs	r2, #127	; 0x7f
    17f6:	400a      	ands	r2, r1
    17f8:	b2d2      	uxtb	r2, r2
    17fa:	217f      	movs	r1, #127	; 0x7f
    17fc:	400a      	ands	r2, r1
    17fe:	0412      	lsls	r2, r2, #16
    1800:	6999      	ldr	r1, [r3, #24]
    1802:	4848      	ldr	r0, [pc, #288]	; (1924 <system_clock_init+0x154>)
    1804:	4001      	ands	r1, r0
    1806:	430a      	orrs	r2, r1
    1808:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    180a:	2380      	movs	r3, #128	; 0x80
    180c:	18fb      	adds	r3, r7, r3
    180e:	1c18      	adds	r0, r3, #0
    1810:	4b45      	ldr	r3, [pc, #276]	; (1928 <system_clock_init+0x158>)
    1812:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    1814:	2380      	movs	r3, #128	; 0x80
    1816:	18fb      	adds	r3, r7, r3
    1818:	2207      	movs	r2, #7
    181a:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	18fb      	adds	r3, r7, r3
    1820:	2201      	movs	r2, #1
    1822:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    1824:	2380      	movs	r3, #128	; 0x80
    1826:	18fb      	adds	r3, r7, r3
    1828:	2201      	movs	r2, #1
    182a:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    182c:	2380      	movs	r3, #128	; 0x80
    182e:	18fb      	adds	r3, r7, r3
    1830:	2201      	movs	r2, #1
    1832:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1834:	2380      	movs	r3, #128	; 0x80
    1836:	18fb      	adds	r3, r7, r3
    1838:	2200      	movs	r2, #0
    183a:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    183c:	2380      	movs	r3, #128	; 0x80
    183e:	18fb      	adds	r3, r7, r3
    1840:	1c18      	adds	r0, r3, #0
    1842:	4b3a      	ldr	r3, [pc, #232]	; (192c <system_clock_init+0x15c>)
    1844:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1846:	2004      	movs	r0, #4
    1848:	4b39      	ldr	r3, [pc, #228]	; (1930 <system_clock_init+0x160>)
    184a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    184c:	237c      	movs	r3, #124	; 0x7c
    184e:	18fb      	adds	r3, r7, r3
    1850:	1c18      	adds	r0, r3, #0
    1852:	4b38      	ldr	r3, [pc, #224]	; (1934 <system_clock_init+0x164>)
    1854:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1856:	237c      	movs	r3, #124	; 0x7c
    1858:	18fb      	adds	r3, r7, r3
    185a:	2200      	movs	r2, #0
    185c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    185e:	237c      	movs	r3, #124	; 0x7c
    1860:	18fb      	adds	r3, r7, r3
    1862:	2201      	movs	r2, #1
    1864:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1866:	237c      	movs	r3, #124	; 0x7c
    1868:	18fb      	adds	r3, r7, r3
    186a:	2200      	movs	r2, #0
    186c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    186e:	237c      	movs	r3, #124	; 0x7c
    1870:	18fb      	adds	r3, r7, r3
    1872:	1c18      	adds	r0, r3, #0
    1874:	4b30      	ldr	r3, [pc, #192]	; (1938 <system_clock_init+0x168>)
    1876:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1878:	2006      	movs	r0, #6
    187a:	4b2d      	ldr	r3, [pc, #180]	; (1930 <system_clock_init+0x160>)
    187c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    187e:	4b2f      	ldr	r3, [pc, #188]	; (193c <system_clock_init+0x16c>)
    1880:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1882:	2358      	movs	r3, #88	; 0x58
    1884:	18fb      	adds	r3, r7, r3
    1886:	1c18      	adds	r0, r3, #0
    1888:	4b2d      	ldr	r3, [pc, #180]	; (1940 <system_clock_init+0x170>)
    188a:	4798      	blx	r3
    188c:	2358      	movs	r3, #88	; 0x58
    188e:	18fb      	adds	r3, r7, r3
    1890:	2204      	movs	r2, #4
    1892:	701a      	strb	r2, [r3, #0]
    1894:	2358      	movs	r3, #88	; 0x58
    1896:	18fb      	adds	r3, r7, r3
    1898:	2220      	movs	r2, #32
    189a:	605a      	str	r2, [r3, #4]
    189c:	2358      	movs	r3, #88	; 0x58
    189e:	18fb      	adds	r3, r7, r3
    18a0:	2200      	movs	r2, #0
    18a2:	721a      	strb	r2, [r3, #8]
    18a4:	2358      	movs	r3, #88	; 0x58
    18a6:	18fb      	adds	r3, r7, r3
    18a8:	2200      	movs	r2, #0
    18aa:	725a      	strb	r2, [r3, #9]
    18ac:	2358      	movs	r3, #88	; 0x58
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	2002      	movs	r0, #2
    18b2:	1c19      	adds	r1, r3, #0
    18b4:	4b23      	ldr	r3, [pc, #140]	; (1944 <system_clock_init+0x174>)
    18b6:	4798      	blx	r3
    18b8:	2002      	movs	r0, #2
    18ba:	4b23      	ldr	r3, [pc, #140]	; (1948 <system_clock_init+0x178>)
    18bc:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    18be:	2000      	movs	r0, #0
    18c0:	4b22      	ldr	r3, [pc, #136]	; (194c <system_clock_init+0x17c>)
    18c2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    18c4:	2000      	movs	r0, #0
    18c6:	2100      	movs	r1, #0
    18c8:	4b21      	ldr	r3, [pc, #132]	; (1950 <system_clock_init+0x180>)
    18ca:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    18cc:	2001      	movs	r0, #1
    18ce:	2100      	movs	r1, #0
    18d0:	4b1f      	ldr	r3, [pc, #124]	; (1950 <system_clock_init+0x180>)
    18d2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    18d4:	2002      	movs	r0, #2
    18d6:	2100      	movs	r1, #0
    18d8:	4b1d      	ldr	r3, [pc, #116]	; (1950 <system_clock_init+0x180>)
    18da:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    18dc:	1d3b      	adds	r3, r7, #4
    18de:	1c18      	adds	r0, r3, #0
    18e0:	4b17      	ldr	r3, [pc, #92]	; (1940 <system_clock_init+0x170>)
    18e2:	4798      	blx	r3
    18e4:	1d3b      	adds	r3, r7, #4
    18e6:	2206      	movs	r2, #6
    18e8:	701a      	strb	r2, [r3, #0]
    18ea:	1d3b      	adds	r3, r7, #4
    18ec:	2201      	movs	r2, #1
    18ee:	605a      	str	r2, [r3, #4]
    18f0:	1d3b      	adds	r3, r7, #4
    18f2:	2200      	movs	r2, #0
    18f4:	721a      	strb	r2, [r3, #8]
    18f6:	1d3b      	adds	r3, r7, #4
    18f8:	2200      	movs	r2, #0
    18fa:	725a      	strb	r2, [r3, #9]
    18fc:	1d3b      	adds	r3, r7, #4
    18fe:	2000      	movs	r0, #0
    1900:	1c19      	adds	r1, r3, #0
    1902:	4b10      	ldr	r3, [pc, #64]	; (1944 <system_clock_init+0x174>)
    1904:	4798      	blx	r3
    1906:	2000      	movs	r0, #0
    1908:	4b0f      	ldr	r3, [pc, #60]	; (1948 <system_clock_init+0x178>)
    190a:	4798      	blx	r3
#endif
}
    190c:	46bd      	mov	sp, r7
    190e:	b022      	add	sp, #136	; 0x88
    1910:	bd80      	pop	{r7, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	40000800 	.word	0x40000800
    1918:	00001519 	.word	0x00001519
    191c:	00001799 	.word	0x00001799
    1920:	00806024 	.word	0x00806024
    1924:	ff80ffff 	.word	0xff80ffff
    1928:	00001451 	.word	0x00001451
    192c:	00001621 	.word	0x00001621
    1930:	000016ed 	.word	0x000016ed
    1934:	00001485 	.word	0x00001485
    1938:	000015a9 	.word	0x000015a9
    193c:	000019f5 	.word	0x000019f5
    1940:	00001425 	.word	0x00001425
    1944:	00001a25 	.word	0x00001a25
    1948:	00001b45 	.word	0x00001b45
    194c:	000014a5 	.word	0x000014a5
    1950:	000014c5 	.word	0x000014c5

00001954 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1954:	b580      	push	{r7, lr}
    1956:	b082      	sub	sp, #8
    1958:	af00      	add	r7, sp, #0
    195a:	1c02      	adds	r2, r0, #0
    195c:	6039      	str	r1, [r7, #0]
    195e:	1dfb      	adds	r3, r7, #7
    1960:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1962:	1dfb      	adds	r3, r7, #7
    1964:	781b      	ldrb	r3, [r3, #0]
    1966:	2b01      	cmp	r3, #1
    1968:	d00a      	beq.n	1980 <system_apb_clock_set_mask+0x2c>
    196a:	2b02      	cmp	r3, #2
    196c:	d00f      	beq.n	198e <system_apb_clock_set_mask+0x3a>
    196e:	2b00      	cmp	r3, #0
    1970:	d114      	bne.n	199c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1972:	4b0e      	ldr	r3, [pc, #56]	; (19ac <system_apb_clock_set_mask+0x58>)
    1974:	4a0d      	ldr	r2, [pc, #52]	; (19ac <system_apb_clock_set_mask+0x58>)
    1976:	6991      	ldr	r1, [r2, #24]
    1978:	683a      	ldr	r2, [r7, #0]
    197a:	430a      	orrs	r2, r1
    197c:	619a      	str	r2, [r3, #24]
			break;
    197e:	e00f      	b.n	19a0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1980:	4b0a      	ldr	r3, [pc, #40]	; (19ac <system_apb_clock_set_mask+0x58>)
    1982:	4a0a      	ldr	r2, [pc, #40]	; (19ac <system_apb_clock_set_mask+0x58>)
    1984:	69d1      	ldr	r1, [r2, #28]
    1986:	683a      	ldr	r2, [r7, #0]
    1988:	430a      	orrs	r2, r1
    198a:	61da      	str	r2, [r3, #28]
			break;
    198c:	e008      	b.n	19a0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <system_apb_clock_set_mask+0x58>)
    1990:	4a06      	ldr	r2, [pc, #24]	; (19ac <system_apb_clock_set_mask+0x58>)
    1992:	6a11      	ldr	r1, [r2, #32]
    1994:	683a      	ldr	r2, [r7, #0]
    1996:	430a      	orrs	r2, r1
    1998:	621a      	str	r2, [r3, #32]
			break;
    199a:	e001      	b.n	19a0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    199c:	2317      	movs	r3, #23
    199e:	e000      	b.n	19a2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    19a0:	2300      	movs	r3, #0
}
    19a2:	1c18      	adds	r0, r3, #0
    19a4:	46bd      	mov	sp, r7
    19a6:	b002      	add	sp, #8
    19a8:	bd80      	pop	{r7, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	40000400 	.word	0x40000400

000019b0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    19b4:	4b01      	ldr	r3, [pc, #4]	; (19bc <system_interrupt_enter_critical_section+0xc>)
    19b6:	4798      	blx	r3
}
    19b8:	46bd      	mov	sp, r7
    19ba:	bd80      	pop	{r7, pc}
    19bc:	00001399 	.word	0x00001399

000019c0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    19c4:	4b01      	ldr	r3, [pc, #4]	; (19cc <system_interrupt_leave_critical_section+0xc>)
    19c6:	4798      	blx	r3
}
    19c8:	46bd      	mov	sp, r7
    19ca:	bd80      	pop	{r7, pc}
    19cc:	000013e9 	.word	0x000013e9

000019d0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <system_gclk_is_syncing+0x20>)
    19d6:	785b      	ldrb	r3, [r3, #1]
    19d8:	b2db      	uxtb	r3, r3
    19da:	b2db      	uxtb	r3, r3
    19dc:	b25b      	sxtb	r3, r3
    19de:	2b00      	cmp	r3, #0
    19e0:	da01      	bge.n	19e6 <system_gclk_is_syncing+0x16>
		return true;
    19e2:	2301      	movs	r3, #1
    19e4:	e000      	b.n	19e8 <system_gclk_is_syncing+0x18>
	}

	return false;
    19e6:	2300      	movs	r3, #0
}
    19e8:	1c18      	adds	r0, r3, #0
    19ea:	46bd      	mov	sp, r7
    19ec:	bd80      	pop	{r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	40000c00 	.word	0x40000c00

000019f4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    19f8:	2000      	movs	r0, #0
    19fa:	2108      	movs	r1, #8
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <system_gclk_init+0x28>)
    19fe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a00:	4b07      	ldr	r3, [pc, #28]	; (1a20 <system_gclk_init+0x2c>)
    1a02:	2201      	movs	r2, #1
    1a04:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	4b05      	ldr	r3, [pc, #20]	; (1a20 <system_gclk_init+0x2c>)
    1a0a:	781b      	ldrb	r3, [r3, #0]
    1a0c:	b2db      	uxtb	r3, r3
    1a0e:	1c1a      	adds	r2, r3, #0
    1a10:	2301      	movs	r3, #1
    1a12:	4013      	ands	r3, r2
    1a14:	d1f8      	bne.n	1a08 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	00001955 	.word	0x00001955
    1a20:	40000c00 	.word	0x40000c00

00001a24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b086      	sub	sp, #24
    1a28:	af00      	add	r7, sp, #0
    1a2a:	1c02      	adds	r2, r0, #0
    1a2c:	6039      	str	r1, [r7, #0]
    1a2e:	1dfb      	adds	r3, r7, #7
    1a30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a32:	1dfb      	adds	r3, r7, #7
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1a38:	1dfb      	adds	r3, r7, #7
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a3e:	683b      	ldr	r3, [r7, #0]
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	021b      	lsls	r3, r3, #8
    1a44:	1c1a      	adds	r2, r3, #0
    1a46:	697b      	ldr	r3, [r7, #20]
    1a48:	4313      	orrs	r3, r2
    1a4a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a4c:	683b      	ldr	r3, [r7, #0]
    1a4e:	785b      	ldrb	r3, [r3, #1]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d004      	beq.n	1a5e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a54:	697b      	ldr	r3, [r7, #20]
    1a56:	2280      	movs	r2, #128	; 0x80
    1a58:	02d2      	lsls	r2, r2, #11
    1a5a:	4313      	orrs	r3, r2
    1a5c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a5e:	683b      	ldr	r3, [r7, #0]
    1a60:	7a5b      	ldrb	r3, [r3, #9]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d004      	beq.n	1a70 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a66:	697b      	ldr	r3, [r7, #20]
    1a68:	2280      	movs	r2, #128	; 0x80
    1a6a:	0312      	lsls	r2, r2, #12
    1a6c:	4313      	orrs	r3, r2
    1a6e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a70:	683b      	ldr	r3, [r7, #0]
    1a72:	685b      	ldr	r3, [r3, #4]
    1a74:	2b01      	cmp	r3, #1
    1a76:	d92c      	bls.n	1ad2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a78:	683b      	ldr	r3, [r7, #0]
    1a7a:	685a      	ldr	r2, [r3, #4]
    1a7c:	683b      	ldr	r3, [r7, #0]
    1a7e:	685b      	ldr	r3, [r3, #4]
    1a80:	3b01      	subs	r3, #1
    1a82:	4013      	ands	r3, r2
    1a84:	d11a      	bne.n	1abc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1a86:	2300      	movs	r3, #0
    1a88:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a8a:	2302      	movs	r3, #2
    1a8c:	60bb      	str	r3, [r7, #8]
    1a8e:	e005      	b.n	1a9c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	3301      	adds	r3, #1
    1a94:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a96:	68bb      	ldr	r3, [r7, #8]
    1a98:	005b      	lsls	r3, r3, #1
    1a9a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a9c:	683b      	ldr	r3, [r7, #0]
    1a9e:	685a      	ldr	r2, [r3, #4]
    1aa0:	68bb      	ldr	r3, [r7, #8]
    1aa2:	429a      	cmp	r2, r3
    1aa4:	d8f4      	bhi.n	1a90 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1aa6:	68fb      	ldr	r3, [r7, #12]
    1aa8:	021b      	lsls	r3, r3, #8
    1aaa:	693a      	ldr	r2, [r7, #16]
    1aac:	4313      	orrs	r3, r2
    1aae:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ab0:	697b      	ldr	r3, [r7, #20]
    1ab2:	2280      	movs	r2, #128	; 0x80
    1ab4:	0352      	lsls	r2, r2, #13
    1ab6:	4313      	orrs	r3, r2
    1ab8:	617b      	str	r3, [r7, #20]
    1aba:	e00a      	b.n	1ad2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1abc:	683b      	ldr	r3, [r7, #0]
    1abe:	685b      	ldr	r3, [r3, #4]
    1ac0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1ac2:	693a      	ldr	r2, [r7, #16]
    1ac4:	4313      	orrs	r3, r2
    1ac6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ac8:	697b      	ldr	r3, [r7, #20]
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	0292      	lsls	r2, r2, #10
    1ace:	4313      	orrs	r3, r2
    1ad0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ad2:	683b      	ldr	r3, [r7, #0]
    1ad4:	7a1b      	ldrb	r3, [r3, #8]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d004      	beq.n	1ae4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ada:	697b      	ldr	r3, [r7, #20]
    1adc:	2280      	movs	r2, #128	; 0x80
    1ade:	0392      	lsls	r2, r2, #14
    1ae0:	4313      	orrs	r3, r2
    1ae2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1ae4:	46c0      	nop			; (mov r8, r8)
    1ae6:	4b12      	ldr	r3, [pc, #72]	; (1b30 <system_gclk_gen_set_config+0x10c>)
    1ae8:	4798      	blx	r3
    1aea:	1e03      	subs	r3, r0, #0
    1aec:	d1fb      	bne.n	1ae6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1aee:	4b11      	ldr	r3, [pc, #68]	; (1b34 <system_gclk_gen_set_config+0x110>)
    1af0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1af2:	4a11      	ldr	r2, [pc, #68]	; (1b38 <system_gclk_gen_set_config+0x114>)
    1af4:	1dfb      	adds	r3, r7, #7
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	4b0c      	ldr	r3, [pc, #48]	; (1b30 <system_gclk_gen_set_config+0x10c>)
    1afe:	4798      	blx	r3
    1b00:	1e03      	subs	r3, r0, #0
    1b02:	d1fb      	bne.n	1afc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b04:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <system_gclk_gen_set_config+0x118>)
    1b06:	693a      	ldr	r2, [r7, #16]
    1b08:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <system_gclk_gen_set_config+0x10c>)
    1b0e:	4798      	blx	r3
    1b10:	1e03      	subs	r3, r0, #0
    1b12:	d1fb      	bne.n	1b0c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b14:	4b09      	ldr	r3, [pc, #36]	; (1b3c <system_gclk_gen_set_config+0x118>)
    1b16:	4a09      	ldr	r2, [pc, #36]	; (1b3c <system_gclk_gen_set_config+0x118>)
    1b18:	6851      	ldr	r1, [r2, #4]
    1b1a:	2280      	movs	r2, #128	; 0x80
    1b1c:	0252      	lsls	r2, r2, #9
    1b1e:	4011      	ands	r1, r2
    1b20:	697a      	ldr	r2, [r7, #20]
    1b22:	430a      	orrs	r2, r1
    1b24:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1b26:	4b06      	ldr	r3, [pc, #24]	; (1b40 <system_gclk_gen_set_config+0x11c>)
    1b28:	4798      	blx	r3
}
    1b2a:	46bd      	mov	sp, r7
    1b2c:	b006      	add	sp, #24
    1b2e:	bd80      	pop	{r7, pc}
    1b30:	000019d1 	.word	0x000019d1
    1b34:	000019b1 	.word	0x000019b1
    1b38:	40000c08 	.word	0x40000c08
    1b3c:	40000c00 	.word	0x40000c00
    1b40:	000019c1 	.word	0x000019c1

00001b44 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	1c02      	adds	r2, r0, #0
    1b4c:	1dfb      	adds	r3, r7, #7
    1b4e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	4b0d      	ldr	r3, [pc, #52]	; (1b88 <system_gclk_gen_enable+0x44>)
    1b54:	4798      	blx	r3
    1b56:	1e03      	subs	r3, r0, #0
    1b58:	d1fb      	bne.n	1b52 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1b5a:	4b0c      	ldr	r3, [pc, #48]	; (1b8c <system_gclk_gen_enable+0x48>)
    1b5c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b5e:	4a0c      	ldr	r2, [pc, #48]	; (1b90 <system_gclk_gen_enable+0x4c>)
    1b60:	1dfb      	adds	r3, r7, #7
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	4b07      	ldr	r3, [pc, #28]	; (1b88 <system_gclk_gen_enable+0x44>)
    1b6a:	4798      	blx	r3
    1b6c:	1e03      	subs	r3, r0, #0
    1b6e:	d1fb      	bne.n	1b68 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <system_gclk_gen_enable+0x50>)
    1b72:	4a08      	ldr	r2, [pc, #32]	; (1b94 <system_gclk_gen_enable+0x50>)
    1b74:	6852      	ldr	r2, [r2, #4]
    1b76:	2180      	movs	r1, #128	; 0x80
    1b78:	0249      	lsls	r1, r1, #9
    1b7a:	430a      	orrs	r2, r1
    1b7c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1b7e:	4b06      	ldr	r3, [pc, #24]	; (1b98 <system_gclk_gen_enable+0x54>)
    1b80:	4798      	blx	r3
}
    1b82:	46bd      	mov	sp, r7
    1b84:	b002      	add	sp, #8
    1b86:	bd80      	pop	{r7, pc}
    1b88:	000019d1 	.word	0x000019d1
    1b8c:	000019b1 	.word	0x000019b1
    1b90:	40000c04 	.word	0x40000c04
    1b94:	40000c00 	.word	0x40000c00
    1b98:	000019c1 	.word	0x000019c1

00001b9c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b084      	sub	sp, #16
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	1c02      	adds	r2, r0, #0
    1ba4:	6039      	str	r1, [r7, #0]
    1ba6:	1dfb      	adds	r3, r7, #7
    1ba8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1bb0:	683b      	ldr	r3, [r7, #0]
    1bb2:	781b      	ldrb	r3, [r3, #0]
    1bb4:	021b      	lsls	r3, r3, #8
    1bb6:	1c1a      	adds	r2, r3, #0
    1bb8:	68fb      	ldr	r3, [r7, #12]
    1bba:	4313      	orrs	r3, r2
    1bbc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1bbe:	1dfb      	adds	r3, r7, #7
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	1c18      	adds	r0, r3, #0
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <system_gclk_chan_set_config+0x3c>)
    1bc6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1bc8:	4b04      	ldr	r3, [pc, #16]	; (1bdc <system_gclk_chan_set_config+0x40>)
    1bca:	68fa      	ldr	r2, [r7, #12]
    1bcc:	b292      	uxth	r2, r2
    1bce:	805a      	strh	r2, [r3, #2]
}
    1bd0:	46bd      	mov	sp, r7
    1bd2:	b004      	add	sp, #16
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00001c25 	.word	0x00001c25
    1bdc:	40000c00 	.word	0x40000c00

00001be0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	af00      	add	r7, sp, #0
    1be6:	1c02      	adds	r2, r0, #0
    1be8:	1dfb      	adds	r3, r7, #7
    1bea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1bec:	4b09      	ldr	r3, [pc, #36]	; (1c14 <system_gclk_chan_enable+0x34>)
    1bee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bf0:	4a09      	ldr	r2, [pc, #36]	; (1c18 <system_gclk_chan_enable+0x38>)
    1bf2:	1dfb      	adds	r3, r7, #7
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bf8:	4908      	ldr	r1, [pc, #32]	; (1c1c <system_gclk_chan_enable+0x3c>)
    1bfa:	4b08      	ldr	r3, [pc, #32]	; (1c1c <system_gclk_chan_enable+0x3c>)
    1bfc:	885b      	ldrh	r3, [r3, #2]
    1bfe:	b29b      	uxth	r3, r3
    1c00:	2280      	movs	r2, #128	; 0x80
    1c02:	01d2      	lsls	r2, r2, #7
    1c04:	4313      	orrs	r3, r2
    1c06:	b29b      	uxth	r3, r3
    1c08:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <system_gclk_chan_enable+0x40>)
    1c0c:	4798      	blx	r3
}
    1c0e:	46bd      	mov	sp, r7
    1c10:	b002      	add	sp, #8
    1c12:	bd80      	pop	{r7, pc}
    1c14:	000019b1 	.word	0x000019b1
    1c18:	40000c02 	.word	0x40000c02
    1c1c:	40000c00 	.word	0x40000c00
    1c20:	000019c1 	.word	0x000019c1

00001c24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b084      	sub	sp, #16
    1c28:	af00      	add	r7, sp, #0
    1c2a:	1c02      	adds	r2, r0, #0
    1c2c:	1dfb      	adds	r3, r7, #7
    1c2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1c30:	4b1d      	ldr	r3, [pc, #116]	; (1ca8 <system_gclk_chan_disable+0x84>)
    1c32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c34:	4a1d      	ldr	r2, [pc, #116]	; (1cac <system_gclk_chan_disable+0x88>)
    1c36:	1dfb      	adds	r3, r7, #7
    1c38:	781b      	ldrb	r3, [r3, #0]
    1c3a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c3c:	4b1c      	ldr	r3, [pc, #112]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c3e:	885b      	ldrh	r3, [r3, #2]
    1c40:	b29b      	uxth	r3, r3
    1c42:	0a1b      	lsrs	r3, r3, #8
    1c44:	1c1a      	adds	r2, r3, #0
    1c46:	230f      	movs	r3, #15
    1c48:	4013      	ands	r3, r2
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1c4e:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c50:	885a      	ldrh	r2, [r3, #2]
    1c52:	4918      	ldr	r1, [pc, #96]	; (1cb4 <system_gclk_chan_disable+0x90>)
    1c54:	400a      	ands	r2, r1
    1c56:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c58:	4a15      	ldr	r2, [pc, #84]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c5a:	4b15      	ldr	r3, [pc, #84]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c5c:	885b      	ldrh	r3, [r3, #2]
    1c5e:	b29b      	uxth	r3, r3
    1c60:	4915      	ldr	r1, [pc, #84]	; (1cb8 <system_gclk_chan_disable+0x94>)
    1c62:	400b      	ands	r3, r1
    1c64:	b29b      	uxth	r3, r3
    1c66:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c68:	46c0      	nop			; (mov r8, r8)
    1c6a:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c6c:	885b      	ldrh	r3, [r3, #2]
    1c6e:	b29b      	uxth	r3, r3
    1c70:	1c1a      	adds	r2, r3, #0
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	01db      	lsls	r3, r3, #7
    1c76:	4013      	ands	r3, r2
    1c78:	d1f7      	bne.n	1c6a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c7a:	4b0d      	ldr	r3, [pc, #52]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c7c:	68fa      	ldr	r2, [r7, #12]
    1c7e:	b2d2      	uxtb	r2, r2
    1c80:	1c11      	adds	r1, r2, #0
    1c82:	220f      	movs	r2, #15
    1c84:	400a      	ands	r2, r1
    1c86:	b2d2      	uxtb	r2, r2
    1c88:	1c11      	adds	r1, r2, #0
    1c8a:	220f      	movs	r2, #15
    1c8c:	400a      	ands	r2, r1
    1c8e:	0210      	lsls	r0, r2, #8
    1c90:	885a      	ldrh	r2, [r3, #2]
    1c92:	4908      	ldr	r1, [pc, #32]	; (1cb4 <system_gclk_chan_disable+0x90>)
    1c94:	400a      	ands	r2, r1
    1c96:	1c11      	adds	r1, r2, #0
    1c98:	1c02      	adds	r2, r0, #0
    1c9a:	430a      	orrs	r2, r1
    1c9c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1c9e:	4b07      	ldr	r3, [pc, #28]	; (1cbc <system_gclk_chan_disable+0x98>)
    1ca0:	4798      	blx	r3
}
    1ca2:	46bd      	mov	sp, r7
    1ca4:	b004      	add	sp, #16
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	000019b1 	.word	0x000019b1
    1cac:	40000c02 	.word	0x40000c02
    1cb0:	40000c00 	.word	0x40000c00
    1cb4:	fffff0ff 	.word	0xfffff0ff
    1cb8:	ffffbfff 	.word	0xffffbfff
    1cbc:	000019c1 	.word	0x000019c1

00001cc0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b084      	sub	sp, #16
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	1c02      	adds	r2, r0, #0
    1cc8:	1dfb      	adds	r3, r7, #7
    1cca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1ccc:	230f      	movs	r3, #15
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	1dfa      	adds	r2, r7, #7
    1cd2:	7812      	ldrb	r2, [r2, #0]
    1cd4:	09d2      	lsrs	r2, r2, #7
    1cd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1cd8:	230e      	movs	r3, #14
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	1dfa      	adds	r2, r7, #7
    1cde:	7812      	ldrb	r2, [r2, #0]
    1ce0:	0952      	lsrs	r2, r2, #5
    1ce2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1ce4:	4b0d      	ldr	r3, [pc, #52]	; (1d1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1ce6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1ce8:	230f      	movs	r3, #15
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d10f      	bne.n	1d12 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1cf2:	230f      	movs	r3, #15
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	009b      	lsls	r3, r3, #2
    1cfa:	2210      	movs	r2, #16
    1cfc:	4694      	mov	ip, r2
    1cfe:	44bc      	add	ip, r7
    1d00:	4463      	add	r3, ip
    1d02:	3b08      	subs	r3, #8
    1d04:	681a      	ldr	r2, [r3, #0]
    1d06:	230e      	movs	r3, #14
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	01db      	lsls	r3, r3, #7
    1d0e:	18d3      	adds	r3, r2, r3
    1d10:	e000      	b.n	1d14 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1d12:	2300      	movs	r3, #0
	}
}
    1d14:	1c18      	adds	r0, r3, #0
    1d16:	46bd      	mov	sp, r7
    1d18:	b004      	add	sp, #16
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	41004400 	.word	0x41004400

00001d20 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b088      	sub	sp, #32
    1d24:	af00      	add	r7, sp, #0
    1d26:	60f8      	str	r0, [r7, #12]
    1d28:	60b9      	str	r1, [r7, #8]
    1d2a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1d2c:	2300      	movs	r3, #0
    1d2e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	78db      	ldrb	r3, [r3, #3]
    1d34:	2201      	movs	r2, #1
    1d36:	4053      	eors	r3, r2
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d035      	beq.n	1daa <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	781b      	ldrb	r3, [r3, #0]
    1d42:	2b80      	cmp	r3, #128	; 0x80
    1d44:	d00b      	beq.n	1d5e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1d46:	69fb      	ldr	r3, [r7, #28]
    1d48:	2280      	movs	r2, #128	; 0x80
    1d4a:	0252      	lsls	r2, r2, #9
    1d4c:	4313      	orrs	r3, r2
    1d4e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	061b      	lsls	r3, r3, #24
    1d56:	1c1a      	adds	r2, r3, #0
    1d58:	69fb      	ldr	r3, [r7, #28]
    1d5a:	4313      	orrs	r3, r2
    1d5c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d5e:	687b      	ldr	r3, [r7, #4]
    1d60:	785b      	ldrb	r3, [r3, #1]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d003      	beq.n	1d6e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d6a:	2b02      	cmp	r3, #2
    1d6c:	d110      	bne.n	1d90 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d6e:	69fb      	ldr	r3, [r7, #28]
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	0292      	lsls	r2, r2, #10
    1d74:	4313      	orrs	r3, r2
    1d76:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	789b      	ldrb	r3, [r3, #2]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d004      	beq.n	1d8a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d80:	69fb      	ldr	r3, [r7, #28]
    1d82:	2280      	movs	r2, #128	; 0x80
    1d84:	02d2      	lsls	r2, r2, #11
    1d86:	4313      	orrs	r3, r2
    1d88:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	68ba      	ldr	r2, [r7, #8]
    1d8e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	785b      	ldrb	r3, [r3, #1]
    1d94:	2b01      	cmp	r3, #1
    1d96:	d003      	beq.n	1da0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d9c:	2b02      	cmp	r3, #2
    1d9e:	d107      	bne.n	1db0 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1da0:	69fb      	ldr	r3, [r7, #28]
    1da2:	4a21      	ldr	r2, [pc, #132]	; (1e28 <_system_pinmux_config+0x108>)
    1da4:	4013      	ands	r3, r2
    1da6:	61fb      	str	r3, [r7, #28]
    1da8:	e002      	b.n	1db0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	68ba      	ldr	r2, [r7, #8]
    1dae:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1db0:	68bb      	ldr	r3, [r7, #8]
    1db2:	041b      	lsls	r3, r3, #16
    1db4:	0c1b      	lsrs	r3, r3, #16
    1db6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1db8:	68bb      	ldr	r3, [r7, #8]
    1dba:	0c1b      	lsrs	r3, r3, #16
    1dbc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dbe:	69ba      	ldr	r2, [r7, #24]
    1dc0:	69fb      	ldr	r3, [r7, #28]
    1dc2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dc4:	22a0      	movs	r2, #160	; 0xa0
    1dc6:	05d2      	lsls	r2, r2, #23
    1dc8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dce:	697a      	ldr	r2, [r7, #20]
    1dd0:	69fb      	ldr	r3, [r7, #28]
    1dd2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1dd4:	22d0      	movs	r2, #208	; 0xd0
    1dd6:	0612      	lsls	r2, r2, #24
    1dd8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	78db      	ldrb	r3, [r3, #3]
    1de2:	2201      	movs	r2, #1
    1de4:	4053      	eors	r3, r2
    1de6:	b2db      	uxtb	r3, r3
    1de8:	2b00      	cmp	r3, #0
    1dea:	d01a      	beq.n	1e22 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1dec:	69fa      	ldr	r2, [r7, #28]
    1dee:	2380      	movs	r3, #128	; 0x80
    1df0:	02db      	lsls	r3, r3, #11
    1df2:	4013      	ands	r3, r2
    1df4:	d00a      	beq.n	1e0c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	789b      	ldrb	r3, [r3, #2]
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d103      	bne.n	1e06 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1dfe:	68fb      	ldr	r3, [r7, #12]
    1e00:	68ba      	ldr	r2, [r7, #8]
    1e02:	619a      	str	r2, [r3, #24]
    1e04:	e002      	b.n	1e0c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1e06:	68fb      	ldr	r3, [r7, #12]
    1e08:	68ba      	ldr	r2, [r7, #8]
    1e0a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	785b      	ldrb	r3, [r3, #1]
    1e10:	2b01      	cmp	r3, #1
    1e12:	d003      	beq.n	1e1c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e18:	2b02      	cmp	r3, #2
    1e1a:	d102      	bne.n	1e22 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1e1c:	68fb      	ldr	r3, [r7, #12]
    1e1e:	68ba      	ldr	r2, [r7, #8]
    1e20:	609a      	str	r2, [r3, #8]
		}
	}
}
    1e22:	46bd      	mov	sp, r7
    1e24:	b008      	add	sp, #32
    1e26:	bd80      	pop	{r7, pc}
    1e28:	fffbffff 	.word	0xfffbffff

00001e2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b084      	sub	sp, #16
    1e30:	af00      	add	r7, sp, #0
    1e32:	1c02      	adds	r2, r0, #0
    1e34:	6039      	str	r1, [r7, #0]
    1e36:	1dfb      	adds	r3, r7, #7
    1e38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1e3a:	1dfb      	adds	r3, r7, #7
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	1c18      	adds	r0, r3, #0
    1e40:	4b0b      	ldr	r3, [pc, #44]	; (1e70 <system_pinmux_pin_set_config+0x44>)
    1e42:	4798      	blx	r3
    1e44:	1c03      	adds	r3, r0, #0
    1e46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e48:	1dfb      	adds	r3, r7, #7
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	221f      	movs	r2, #31
    1e4e:	4013      	ands	r3, r2
    1e50:	2201      	movs	r2, #1
    1e52:	409a      	lsls	r2, r3
    1e54:	1c13      	adds	r3, r2, #0
    1e56:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1e58:	68f9      	ldr	r1, [r7, #12]
    1e5a:	68ba      	ldr	r2, [r7, #8]
    1e5c:	683b      	ldr	r3, [r7, #0]
    1e5e:	1c08      	adds	r0, r1, #0
    1e60:	1c11      	adds	r1, r2, #0
    1e62:	1c1a      	adds	r2, r3, #0
    1e64:	4b03      	ldr	r3, [pc, #12]	; (1e74 <system_pinmux_pin_set_config+0x48>)
    1e66:	4798      	blx	r3
}
    1e68:	46bd      	mov	sp, r7
    1e6a:	b004      	add	sp, #16
    1e6c:	bd80      	pop	{r7, pc}
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	00001cc1 	.word	0x00001cc1
    1e74:	00001d21 	.word	0x00001d21

00001e78 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1e78:	b580      	push	{r7, lr}
    1e7a:	af00      	add	r7, sp, #0
	return;
    1e7c:	46c0      	nop			; (mov r8, r8)
}
    1e7e:	46bd      	mov	sp, r7
    1e80:	bd80      	pop	{r7, pc}
    1e82:	46c0      	nop			; (mov r8, r8)

00001e84 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e88:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <system_init+0x1c>)
    1e8a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e8c:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <system_init+0x20>)
    1e8e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e90:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <system_init+0x24>)
    1e92:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <system_init+0x28>)
    1e96:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e98:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <system_init+0x2c>)
    1e9a:	4798      	blx	r3
}
    1e9c:	46bd      	mov	sp, r7
    1e9e:	bd80      	pop	{r7, pc}
    1ea0:	000017d1 	.word	0x000017d1
    1ea4:	00001391 	.word	0x00001391
    1ea8:	00001e79 	.word	0x00001e79
    1eac:	000001fd 	.word	0x000001fd
    1eb0:	00001e79 	.word	0x00001e79

00001eb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b082      	sub	sp, #8
    1eb8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1eba:	4b2f      	ldr	r3, [pc, #188]	; (1f78 <Reset_Handler+0xc4>)
    1ebc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1ebe:	4b2f      	ldr	r3, [pc, #188]	; (1f7c <Reset_Handler+0xc8>)
    1ec0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1ec2:	687a      	ldr	r2, [r7, #4]
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	429a      	cmp	r2, r3
    1ec8:	d00c      	beq.n	1ee4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1eca:	e007      	b.n	1edc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1ecc:	683b      	ldr	r3, [r7, #0]
    1ece:	1d1a      	adds	r2, r3, #4
    1ed0:	603a      	str	r2, [r7, #0]
    1ed2:	687a      	ldr	r2, [r7, #4]
    1ed4:	1d11      	adds	r1, r2, #4
    1ed6:	6079      	str	r1, [r7, #4]
    1ed8:	6812      	ldr	r2, [r2, #0]
    1eda:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1edc:	683a      	ldr	r2, [r7, #0]
    1ede:	4b28      	ldr	r3, [pc, #160]	; (1f80 <Reset_Handler+0xcc>)
    1ee0:	429a      	cmp	r2, r3
    1ee2:	d3f3      	bcc.n	1ecc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ee4:	4b27      	ldr	r3, [pc, #156]	; (1f84 <Reset_Handler+0xd0>)
    1ee6:	603b      	str	r3, [r7, #0]
    1ee8:	e004      	b.n	1ef4 <Reset_Handler+0x40>
                *pDest++ = 0;
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	1d1a      	adds	r2, r3, #4
    1eee:	603a      	str	r2, [r7, #0]
    1ef0:	2200      	movs	r2, #0
    1ef2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ef4:	683a      	ldr	r2, [r7, #0]
    1ef6:	4b24      	ldr	r3, [pc, #144]	; (1f88 <Reset_Handler+0xd4>)
    1ef8:	429a      	cmp	r2, r3
    1efa:	d3f6      	bcc.n	1eea <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1efc:	4b23      	ldr	r3, [pc, #140]	; (1f8c <Reset_Handler+0xd8>)
    1efe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f00:	4b23      	ldr	r3, [pc, #140]	; (1f90 <Reset_Handler+0xdc>)
    1f02:	687a      	ldr	r2, [r7, #4]
    1f04:	21ff      	movs	r1, #255	; 0xff
    1f06:	438a      	bics	r2, r1
    1f08:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f0a:	4a22      	ldr	r2, [pc, #136]	; (1f94 <Reset_Handler+0xe0>)
    1f0c:	2390      	movs	r3, #144	; 0x90
    1f0e:	005b      	lsls	r3, r3, #1
    1f10:	2102      	movs	r1, #2
    1f12:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f14:	4b20      	ldr	r3, [pc, #128]	; (1f98 <Reset_Handler+0xe4>)
    1f16:	78da      	ldrb	r2, [r3, #3]
    1f18:	2103      	movs	r1, #3
    1f1a:	438a      	bics	r2, r1
    1f1c:	1c11      	adds	r1, r2, #0
    1f1e:	2202      	movs	r2, #2
    1f20:	430a      	orrs	r2, r1
    1f22:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f24:	4b1c      	ldr	r3, [pc, #112]	; (1f98 <Reset_Handler+0xe4>)
    1f26:	78da      	ldrb	r2, [r3, #3]
    1f28:	210c      	movs	r1, #12
    1f2a:	438a      	bics	r2, r1
    1f2c:	1c11      	adds	r1, r2, #0
    1f2e:	2208      	movs	r2, #8
    1f30:	430a      	orrs	r2, r1
    1f32:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f34:	4b19      	ldr	r3, [pc, #100]	; (1f9c <Reset_Handler+0xe8>)
    1f36:	7b9a      	ldrb	r2, [r3, #14]
    1f38:	2130      	movs	r1, #48	; 0x30
    1f3a:	438a      	bics	r2, r1
    1f3c:	1c11      	adds	r1, r2, #0
    1f3e:	2220      	movs	r2, #32
    1f40:	430a      	orrs	r2, r1
    1f42:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f44:	4b15      	ldr	r3, [pc, #84]	; (1f9c <Reset_Handler+0xe8>)
    1f46:	7b9a      	ldrb	r2, [r3, #14]
    1f48:	210c      	movs	r1, #12
    1f4a:	438a      	bics	r2, r1
    1f4c:	1c11      	adds	r1, r2, #0
    1f4e:	2208      	movs	r2, #8
    1f50:	430a      	orrs	r2, r1
    1f52:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <Reset_Handler+0xe8>)
    1f56:	7b9a      	ldrb	r2, [r3, #14]
    1f58:	2103      	movs	r1, #3
    1f5a:	438a      	bics	r2, r1
    1f5c:	1c11      	adds	r1, r2, #0
    1f5e:	2202      	movs	r2, #2
    1f60:	430a      	orrs	r2, r1
    1f62:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f64:	4b0e      	ldr	r3, [pc, #56]	; (1fa0 <Reset_Handler+0xec>)
    1f66:	685a      	ldr	r2, [r3, #4]
    1f68:	2180      	movs	r1, #128	; 0x80
    1f6a:	430a      	orrs	r2, r1
    1f6c:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1f6e:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <Reset_Handler+0xf0>)
    1f70:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f72:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <Reset_Handler+0xf4>)
    1f74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1f76:	e7fe      	b.n	1f76 <Reset_Handler+0xc2>
    1f78:	000021f8 	.word	0x000021f8
    1f7c:	20000000 	.word	0x20000000
    1f80:	20000004 	.word	0x20000004
    1f84:	20000004 	.word	0x20000004
    1f88:	2000025c 	.word	0x2000025c
    1f8c:	00000000 	.word	0x00000000
    1f90:	e000ed00 	.word	0xe000ed00
    1f94:	41007000 	.word	0x41007000
    1f98:	41005000 	.word	0x41005000
    1f9c:	41004800 	.word	0x41004800
    1fa0:	41004000 	.word	0x41004000
    1fa4:	00002109 	.word	0x00002109
    1fa8:	000020d1 	.word	0x000020d1

00001fac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	af00      	add	r7, sp, #0
        while (1) {
        }
    1fb0:	e7fe      	b.n	1fb0 <Dummy_Handler+0x4>
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b084      	sub	sp, #16
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	68fb      	ldr	r3, [r7, #12]
    1fc6:	689b      	ldr	r3, [r3, #8]
    1fc8:	2202      	movs	r2, #2
    1fca:	4013      	ands	r3, r2
    1fcc:	d1fa      	bne.n	1fc4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1fce:	68fb      	ldr	r3, [r7, #12]
    1fd0:	681b      	ldr	r3, [r3, #0]
    1fd2:	2202      	movs	r2, #2
    1fd4:	431a      	orrs	r2, r3
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	601a      	str	r2, [r3, #0]
}
    1fda:	46bd      	mov	sp, r7
    1fdc:	b004      	add	sp, #16
    1fde:	bd80      	pop	{r7, pc}

00001fe0 <configure_LED_PWM>:
void configure_button_pins(void);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b0aa      	sub	sp, #168	; 0xa8
    1fe4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    1fe6:	1d3b      	adds	r3, r7, #4
    1fe8:	4a31      	ldr	r2, [pc, #196]	; (20b0 <STACK_SIZE+0xb0>)
    1fea:	1c18      	adds	r0, r3, #0
    1fec:	1c11      	adds	r1, r2, #0
    1fee:	4b31      	ldr	r3, [pc, #196]	; (20b4 <STACK_SIZE+0xb4>)
    1ff0:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    1ff2:	1d3b      	adds	r3, r7, #4
    1ff4:	4a30      	ldr	r2, [pc, #192]	; (20b8 <STACK_SIZE+0xb8>)
    1ff6:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1ff8:	1d3b      	adds	r3, r7, #4
    1ffa:	2202      	movs	r2, #2
    1ffc:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    1ffe:	1d3b      	adds	r3, r7, #4
    2000:	2200      	movs	r2, #0
    2002:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    2004:	1d3b      	adds	r3, r7, #4
    2006:	2200      	movs	r2, #0
    2008:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    200a:	1d3b      	adds	r3, r7, #4
    200c:	2298      	movs	r2, #152	; 0x98
    200e:	2101      	movs	r1, #1
    2010:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    2012:	1d3b      	adds	r3, r7, #4
    2014:	2299      	movs	r2, #153	; 0x99
    2016:	2101      	movs	r1, #1
    2018:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    201a:	1d3b      	adds	r3, r7, #4
    201c:	2215      	movs	r2, #21
    201e:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    2020:	1d3b      	adds	r3, r7, #4
    2022:	220e      	movs	r2, #14
    2024:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    2026:	1d3b      	adds	r3, r7, #4
    2028:	2205      	movs	r2, #5
    202a:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    202c:	1d3b      	adds	r3, r7, #4
    202e:	2205      	movs	r2, #5
    2030:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    2032:	4a22      	ldr	r2, [pc, #136]	; (20bc <STACK_SIZE+0xbc>)
    2034:	491e      	ldr	r1, [pc, #120]	; (20b0 <STACK_SIZE+0xb0>)
    2036:	1d3b      	adds	r3, r7, #4
    2038:	1c10      	adds	r0, r2, #0
    203a:	1c1a      	adds	r2, r3, #0
    203c:	4b20      	ldr	r3, [pc, #128]	; (20c0 <STACK_SIZE+0xc0>)
    203e:	4798      	blx	r3
	tcc_enable(&tcc0);
    2040:	4b1e      	ldr	r3, [pc, #120]	; (20bc <STACK_SIZE+0xbc>)
    2042:	1c18      	adds	r0, r3, #0
    2044:	4b1f      	ldr	r3, [pc, #124]	; (20c4 <STACK_SIZE+0xc4>)
    2046:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    2048:	1d3b      	adds	r3, r7, #4
    204a:	4a1f      	ldr	r2, [pc, #124]	; (20c8 <STACK_SIZE+0xc8>)
    204c:	1c18      	adds	r0, r3, #0
    204e:	1c11      	adds	r1, r2, #0
    2050:	4b18      	ldr	r3, [pc, #96]	; (20b4 <STACK_SIZE+0xb4>)
    2052:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    2054:	1d3b      	adds	r3, r7, #4
    2056:	4a18      	ldr	r2, [pc, #96]	; (20b8 <STACK_SIZE+0xb8>)
    2058:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    205a:	1d3b      	adds	r3, r7, #4
    205c:	2202      	movs	r2, #2
    205e:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    2060:	1d3b      	adds	r3, r7, #4
    2062:	2200      	movs	r2, #0
    2064:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    2066:	1d3b      	adds	r3, r7, #4
    2068:	2200      	movs	r2, #0
    206a:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    206c:	1d3b      	adds	r3, r7, #4
    206e:	2298      	movs	r2, #152	; 0x98
    2070:	2101      	movs	r1, #1
    2072:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    2074:	1d3b      	adds	r3, r7, #4
    2076:	2299      	movs	r2, #153	; 0x99
    2078:	2101      	movs	r1, #1
    207a:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    207c:	1d3b      	adds	r3, r7, #4
    207e:	2208      	movs	r2, #8
    2080:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    2082:	1d3b      	adds	r3, r7, #4
    2084:	2207      	movs	r2, #7
    2086:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    2088:	1d3b      	adds	r3, r7, #4
    208a:	2205      	movs	r2, #5
    208c:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    208e:	1d3b      	adds	r3, r7, #4
    2090:	2204      	movs	r2, #4
    2092:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    2094:	4a0d      	ldr	r2, [pc, #52]	; (20cc <STACK_SIZE+0xcc>)
    2096:	490c      	ldr	r1, [pc, #48]	; (20c8 <STACK_SIZE+0xc8>)
    2098:	1d3b      	adds	r3, r7, #4
    209a:	1c10      	adds	r0, r2, #0
    209c:	1c1a      	adds	r2, r3, #0
    209e:	4b08      	ldr	r3, [pc, #32]	; (20c0 <STACK_SIZE+0xc0>)
    20a0:	4798      	blx	r3
	tcc_enable(&tcc1);
    20a2:	4b0a      	ldr	r3, [pc, #40]	; (20cc <STACK_SIZE+0xcc>)
    20a4:	1c18      	adds	r0, r3, #0
    20a6:	4b07      	ldr	r3, [pc, #28]	; (20c4 <STACK_SIZE+0xc4>)
    20a8:	4798      	blx	r3
}
    20aa:	46bd      	mov	sp, r7
    20ac:	b02a      	add	sp, #168	; 0xa8
    20ae:	bd80      	pop	{r7, pc}
    20b0:	42002000 	.word	0x42002000
    20b4:	0000062d 	.word	0x0000062d
    20b8:	0000ffff 	.word	0x0000ffff
    20bc:	200000d8 	.word	0x200000d8
    20c0:	00000c81 	.word	0x00000c81
    20c4:	00001fb5 	.word	0x00001fb5
    20c8:	42002400 	.word	0x42002400
    20cc:	20000218 	.word	0x20000218

000020d0 <main>:
	port_pin_set_config(PIN_PB09, &config_port_pin);
}


int main (void)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b086      	sub	sp, #24
    20d4:	af00      	add	r7, sp, #0
    /* Initialize system */
	system_init();
    20d6:	4b07      	ldr	r3, [pc, #28]	; (20f4 <main+0x24>)
    20d8:	4798      	blx	r3
	configure_LED_PWM();
    20da:	4b07      	ldr	r3, [pc, #28]	; (20f8 <main+0x28>)
    20dc:	4798      	blx	r3
	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);*/


	int sendlength = 3; //number can be increased 
    20de:	2303      	movs	r3, #3
    20e0:	617b      	str	r3, [r7, #20]
	int index = 0;
    20e2:	2300      	movs	r3, #0
    20e4:	613b      	str	r3, [r7, #16]
		/* WHITE */
		//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), 0xFFFF);
		/* GREEN */
		//tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), 0xFFFF);
		/* BLUE */
		tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), 0xFFFF);
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <main+0x2c>)
    20e8:	4a05      	ldr	r2, [pc, #20]	; (2100 <main+0x30>)
    20ea:	1c18      	adds	r0, r3, #0
    20ec:	2100      	movs	r1, #0
    20ee:	4b05      	ldr	r3, [pc, #20]	; (2104 <main+0x34>)
    20f0:	4798      	blx	r3
		sendbuffer[2] = 0xFF; // button byte
		
		
		RFM_send(TONODEID, sendbuffer, sendlength, false);
	}*/
  }
    20f2:	e7f8      	b.n	20e6 <main+0x16>
    20f4:	00001e85 	.word	0x00001e85
    20f8:	00001fe1 	.word	0x00001fe1
    20fc:	20000218 	.word	0x20000218
    2100:	0000ffff 	.word	0x0000ffff
    2104:	00001135 	.word	0x00001135

00002108 <__libc_init_array>:
    2108:	4b0e      	ldr	r3, [pc, #56]	; (2144 <__libc_init_array+0x3c>)
    210a:	b570      	push	{r4, r5, r6, lr}
    210c:	2500      	movs	r5, #0
    210e:	1c1e      	adds	r6, r3, #0
    2110:	4c0d      	ldr	r4, [pc, #52]	; (2148 <__libc_init_array+0x40>)
    2112:	1ae4      	subs	r4, r4, r3
    2114:	10a4      	asrs	r4, r4, #2
    2116:	42a5      	cmp	r5, r4
    2118:	d004      	beq.n	2124 <__libc_init_array+0x1c>
    211a:	00ab      	lsls	r3, r5, #2
    211c:	58f3      	ldr	r3, [r6, r3]
    211e:	4798      	blx	r3
    2120:	3501      	adds	r5, #1
    2122:	e7f8      	b.n	2116 <__libc_init_array+0xe>
    2124:	f000 f858 	bl	21d8 <_init>
    2128:	4b08      	ldr	r3, [pc, #32]	; (214c <__libc_init_array+0x44>)
    212a:	2500      	movs	r5, #0
    212c:	1c1e      	adds	r6, r3, #0
    212e:	4c08      	ldr	r4, [pc, #32]	; (2150 <__libc_init_array+0x48>)
    2130:	1ae4      	subs	r4, r4, r3
    2132:	10a4      	asrs	r4, r4, #2
    2134:	42a5      	cmp	r5, r4
    2136:	d004      	beq.n	2142 <__libc_init_array+0x3a>
    2138:	00ab      	lsls	r3, r5, #2
    213a:	58f3      	ldr	r3, [r6, r3]
    213c:	4798      	blx	r3
    213e:	3501      	adds	r5, #1
    2140:	e7f8      	b.n	2134 <__libc_init_array+0x2c>
    2142:	bd70      	pop	{r4, r5, r6, pc}
    2144:	000021e4 	.word	0x000021e4
    2148:	000021e4 	.word	0x000021e4
    214c:	000021e4 	.word	0x000021e4
    2150:	000021e8 	.word	0x000021e8

00002154 <tcc_modules>:
    2154:	42002000 42002400 42002800              . .B.$.B.(.B

00002160 <_tcc_gclk_ids>:
    2160:	001b1a1a                                ....

00002164 <_tcc_apbcmasks>:
    2164:	00000100 00000200 00000400              ............

00002170 <_tcc_maxs>:
    2170:	00ffffff 00ffffff 0000ffff              ............

0000217c <_tcc_cc_nums>:
    217c:	00020204                                ....

00002180 <_tcc_ow_nums>:
    2180:	00020408                                ....

00002184 <_tcc_intflag>:
    2184:	00000001 00000002 00000004 00000008     ................
    2194:	00001000 00002000 00004000 00008000     ..... ...@......
    21a4:	00010000 00020000 00040000 00080000     ................
    21b4:	00001728 00001778 00001778 00001774     (...x...x...t...
    21c4:	0000171a 0000173a 0000170a 0000174c     ....:.......L...
    21d4:	0000175e                                ^...

000021d8 <_init>:
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21de:	bc08      	pop	{r3}
    21e0:	469e      	mov	lr, r3
    21e2:	4770      	bx	lr

000021e4 <__init_array_start>:
    21e4:	000000dd 	.word	0x000000dd

000021e8 <_fini>:
    21e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ee:	bc08      	pop	{r3}
    21f0:	469e      	mov	lr, r3
    21f2:	4770      	bx	lr

000021f4 <__fini_array_start>:
    21f4:	000000b5 	.word	0x000000b5
