
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008118  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00008118  00018000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023c  20000004  0000811c  00018004  2**2
                  ALLOC
  3 .stack        00002000  20000240  00008358  00018004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001802c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00030b48  00000000  00000000  00018087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033cc  00000000  00000000  00048bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004756  00000000  00000000  0004bf9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c90  00000000  00000000  000506f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  00051381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008bd8  00000000  00000000  00051ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f2f4  00000000  00000000  0005aa99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f87e  00000000  00000000  00069d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cbc  00000000  00000000  000f960c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002240 	.word	0x20002240
       4:	00003e75 	.word	0x00003e75
       8:	00003f6d 	.word	0x00003f6d
       c:	00003f6d 	.word	0x00003f6d
	...
      2c:	00003f6d 	.word	0x00003f6d
	...
      38:	00003f6d 	.word	0x00003f6d
      3c:	00003f6d 	.word	0x00003f6d
      40:	00003f6d 	.word	0x00003f6d
      44:	00003f6d 	.word	0x00003f6d
      48:	00003f6d 	.word	0x00003f6d
      4c:	00000ad9 	.word	0x00000ad9
      50:	00000c65 	.word	0x00000c65
      54:	00003f6d 	.word	0x00003f6d
      58:	00003f6d 	.word	0x00003f6d
      5c:	00003f6d 	.word	0x00003f6d
      60:	00003f6d 	.word	0x00003f6d
      64:	00003051 	.word	0x00003051
      68:	00003065 	.word	0x00003065
      6c:	00003079 	.word	0x00003079
      70:	0000308d 	.word	0x0000308d
      74:	000030a1 	.word	0x000030a1
      78:	000030b5 	.word	0x000030b5
      7c:	00001d81 	.word	0x00001d81
      80:	00001d95 	.word	0x00001d95
      84:	00001da9 	.word	0x00001da9
      88:	00001e35 	.word	0x00001e35
      8c:	00001e49 	.word	0x00001e49
      90:	00001e5d 	.word	0x00001e5d
	...
      9c:	00003f6d 	.word	0x00003f6d
      a0:	00003f6d 	.word	0x00003f6d
      a4:	00003f6d 	.word	0x00003f6d
      a8:	00003f6d 	.word	0x00003f6d
      ac:	00003f6d 	.word	0x00003f6d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00008118 	.word	0x00008118

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00008118 	.word	0x00008118
     108:	20000008 	.word	0x20000008
     10c:	00008118 	.word	0x00008118
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
     196:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	2201      	movs	r2, #1
     19c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	70da      	strb	r2, [r3, #3]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)

000001ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	1c02      	adds	r2, r0, #0
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b8:	4b06      	ldr	r3, [pc, #24]	; (1d4 <system_interrupt_enable+0x28>)
     1ba:	1dfa      	adds	r2, r7, #7
     1bc:	7812      	ldrb	r2, [r2, #0]
     1be:	1c11      	adds	r1, r2, #0
     1c0:	221f      	movs	r2, #31
     1c2:	400a      	ands	r2, r1
     1c4:	2101      	movs	r1, #1
     1c6:	4091      	lsls	r1, r2
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	601a      	str	r2, [r3, #0]
}
     1cc:	46bd      	mov	sp, r7
     1ce:	b002      	add	sp, #8
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	e000e100 	.word	0xe000e100

000001d8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	1c02      	adds	r2, r0, #0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e4:	230f      	movs	r3, #15
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	0952      	lsrs	r2, r2, #5
     1ee:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f0:	230f      	movs	r3, #15
     1f2:	18fb      	adds	r3, r7, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d10c      	bne.n	214 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fa:	4b09      	ldr	r3, [pc, #36]	; (220 <_extint_get_eic_from_channel+0x48>)
     1fc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1fe:	230f      	movs	r3, #15
     200:	18fb      	adds	r3, r7, r3
     202:	781b      	ldrb	r3, [r3, #0]
     204:	009b      	lsls	r3, r3, #2
     206:	2210      	movs	r2, #16
     208:	4694      	mov	ip, r2
     20a:	44bc      	add	ip, r7
     20c:	4463      	add	r3, ip
     20e:	3b08      	subs	r3, #8
     210:	681b      	ldr	r3, [r3, #0]
     212:	e000      	b.n	216 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     214:	2300      	movs	r3, #0
	}
}
     216:	1c18      	adds	r0, r3, #0
     218:	46bd      	mov	sp, r7
     21a:	b004      	add	sp, #16
     21c:	bd80      	pop	{r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	40001800 	.word	0x40001800

00000224 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22a:	4b10      	ldr	r3, [pc, #64]	; (26c <extint_is_syncing+0x48>)
     22c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22e:	2300      	movs	r3, #0
     230:	607b      	str	r3, [r7, #4]
     232:	e012      	b.n	25a <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     234:	687b      	ldr	r3, [r7, #4]
     236:	009b      	lsls	r3, r3, #2
     238:	2208      	movs	r2, #8
     23a:	4694      	mov	ip, r2
     23c:	44bc      	add	ip, r7
     23e:	4463      	add	r3, ip
     240:	3b08      	subs	r3, #8
     242:	681b      	ldr	r3, [r3, #0]
     244:	785b      	ldrb	r3, [r3, #1]
     246:	b2db      	uxtb	r3, r3
     248:	b2db      	uxtb	r3, r3
     24a:	b25b      	sxtb	r3, r3
     24c:	2b00      	cmp	r3, #0
     24e:	da01      	bge.n	254 <extint_is_syncing+0x30>
			return true;
     250:	2301      	movs	r3, #1
     252:	e006      	b.n	262 <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     254:	687b      	ldr	r3, [r7, #4]
     256:	3301      	adds	r3, #1
     258:	607b      	str	r3, [r7, #4]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	2b00      	cmp	r3, #0
     25e:	d0e9      	beq.n	234 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     260:	2300      	movs	r3, #0
}
     262:	1c18      	adds	r0, r3, #0
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2c      	ldr	r3, [pc, #176]	; (328 <_system_extint_init+0xb8>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2000      	movs	r0, #0
     27c:	2140      	movs	r1, #64	; 0x40
     27e:	4b2b      	ldr	r3, [pc, #172]	; (32c <_system_extint_init+0xbc>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	1c3b      	adds	r3, r7, #0
     284:	1c18      	adds	r0, r3, #0
     286:	4b2a      	ldr	r3, [pc, #168]	; (330 <_system_extint_init+0xc0>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	1c3b      	adds	r3, r7, #0
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	1c3b      	adds	r3, r7, #0
     292:	2005      	movs	r0, #5
     294:	1c19      	adds	r1, r3, #0
     296:	4b27      	ldr	r3, [pc, #156]	; (334 <_system_extint_init+0xc4>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b26      	ldr	r3, [pc, #152]	; (338 <_system_extint_init+0xc8>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b16      	ldr	r3, [pc, #88]	; (33c <_system_extint_init+0xcc>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <_system_extint_init+0xd0>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <_system_extint_init+0xd4>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <_system_extint_init+0xd8>)
     320:	4798      	blx	r3
}
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}
     328:	40001800 	.word	0x40001800
     32c:	00000129 	.word	0x00000129
     330:	00000115 	.word	0x00000115
     334:	00003b01 	.word	0x00003b01
     338:	00003b45 	.word	0x00003b45
     33c:	00000225 	.word	0x00000225
     340:	20000060 	.word	0x20000060
     344:	000001ad 	.word	0x000001ad
     348:	0000034d 	.word	0x0000034d

0000034c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_extint_enable+0x58>)
     354:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     356:	2300      	movs	r3, #0
     358:	607b      	str	r3, [r7, #4]
     35a:	e018      	b.n	38e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	009b      	lsls	r3, r3, #2
     360:	2208      	movs	r2, #8
     362:	4694      	mov	ip, r2
     364:	44bc      	add	ip, r7
     366:	4463      	add	r3, ip
     368:	3b08      	subs	r3, #8
     36a:	681a      	ldr	r2, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	2108      	movs	r1, #8
     372:	468c      	mov	ip, r1
     374:	44bc      	add	ip, r7
     376:	4463      	add	r3, ip
     378:	3b08      	subs	r3, #8
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	b2db      	uxtb	r3, r3
     380:	2102      	movs	r1, #2
     382:	430b      	orrs	r3, r1
     384:	b2db      	uxtb	r3, r3
     386:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     388:	687b      	ldr	r3, [r7, #4]
     38a:	3301      	adds	r3, #1
     38c:	607b      	str	r3, [r7, #4]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2b00      	cmp	r3, #0
     392:	d0e3      	beq.n	35c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     394:	46c0      	nop			; (mov r8, r8)
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <_extint_enable+0x5c>)
     398:	4798      	blx	r3
     39a:	1e03      	subs	r3, r0, #0
     39c:	d1fb      	bne.n	396 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	40001800 	.word	0x40001800
     3a8:	00000225 	.word	0x00000225

000003ac <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2200      	movs	r2, #0
     3be:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2201      	movs	r2, #1
     3c4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2201      	movs	r2, #1
     3ca:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2202      	movs	r2, #2
     3d6:	72da      	strb	r2, [r3, #11]
}
     3d8:	46bd      	mov	sp, r7
     3da:	b002      	add	sp, #8
     3dc:	bd80      	pop	{r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)

000003e0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	b086      	sub	sp, #24
     3e4:	af00      	add	r7, sp, #0
     3e6:	1c02      	adds	r2, r0, #0
     3e8:	6039      	str	r1, [r7, #0]
     3ea:	1dfb      	adds	r3, r7, #7
     3ec:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3ee:	2308      	movs	r3, #8
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	4b36      	ldr	r3, [pc, #216]	; (4d0 <extint_chan_set_config+0xf0>)
     3f6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	b2da      	uxtb	r2, r3
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	2308      	movs	r3, #8
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     40c:	683b      	ldr	r3, [r7, #0]
     40e:	7a1a      	ldrb	r2, [r3, #8]
     410:	2308      	movs	r3, #8
     412:	18fb      	adds	r3, r7, r3
     414:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     416:	683b      	ldr	r3, [r7, #0]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	b2da      	uxtb	r2, r3
     41c:	2308      	movs	r3, #8
     41e:	18fb      	adds	r3, r7, r3
     420:	1c10      	adds	r0, r2, #0
     422:	1c19      	adds	r1, r3, #0
     424:	4b2b      	ldr	r3, [pc, #172]	; (4d4 <extint_chan_set_config+0xf4>)
     426:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     428:	1dfb      	adds	r3, r7, #7
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	1c18      	adds	r0, r3, #0
     42e:	4b2a      	ldr	r3, [pc, #168]	; (4d8 <extint_chan_set_config+0xf8>)
     430:	4798      	blx	r3
     432:	1c03      	adds	r3, r0, #0
     434:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     436:	1dfb      	adds	r3, r7, #7
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2207      	movs	r2, #7
     43c:	4013      	ands	r3, r2
     43e:	009b      	lsls	r3, r3, #2
     440:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     442:	683b      	ldr	r3, [r7, #0]
     444:	7adb      	ldrb	r3, [r3, #11]
     446:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     448:	683b      	ldr	r3, [r7, #0]
     44a:	7a9b      	ldrb	r3, [r3, #10]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     450:	697b      	ldr	r3, [r7, #20]
     452:	2208      	movs	r2, #8
     454:	4313      	orrs	r3, r2
     456:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     458:	1dfb      	adds	r3, r7, #7
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	08db      	lsrs	r3, r3, #3
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
     462:	1dfb      	adds	r3, r7, #7
     464:	781b      	ldrb	r3, [r3, #0]
     466:	08db      	lsrs	r3, r3, #3
     468:	b2db      	uxtb	r3, r3
     46a:	1c1a      	adds	r2, r3, #0
     46c:	693b      	ldr	r3, [r7, #16]
     46e:	3206      	adds	r2, #6
     470:	0092      	lsls	r2, r2, #2
     472:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     474:	68fa      	ldr	r2, [r7, #12]
     476:	210f      	movs	r1, #15
     478:	4091      	lsls	r1, r2
     47a:	1c0a      	adds	r2, r1, #0
     47c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     480:	68fb      	ldr	r3, [r7, #12]
     482:	6979      	ldr	r1, [r7, #20]
     484:	4099      	lsls	r1, r3
     486:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	431a      	orrs	r2, r3
     48a:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	1d82      	adds	r2, r0, #6
     490:	0092      	lsls	r2, r2, #2
     492:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     494:	683b      	ldr	r3, [r7, #0]
     496:	7a5b      	ldrb	r3, [r3, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d00a      	beq.n	4b2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     49c:	693b      	ldr	r3, [r7, #16]
     49e:	695a      	ldr	r2, [r3, #20]
     4a0:	1dfb      	adds	r3, r7, #7
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	4099      	lsls	r1, r3
     4a8:	1c0b      	adds	r3, r1, #0
     4aa:	431a      	orrs	r2, r3
     4ac:	693b      	ldr	r3, [r7, #16]
     4ae:	615a      	str	r2, [r3, #20]
     4b0:	e00a      	b.n	4c8 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4b2:	693b      	ldr	r3, [r7, #16]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	1dfa      	adds	r2, r7, #7
     4b8:	7812      	ldrb	r2, [r2, #0]
     4ba:	2101      	movs	r1, #1
     4bc:	4091      	lsls	r1, r2
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	43d2      	mvns	r2, r2
     4c2:	401a      	ands	r2, r3
     4c4:	693b      	ldr	r3, [r7, #16]
     4c6:	615a      	str	r2, [r3, #20]
	}
}
     4c8:	46bd      	mov	sp, r7
     4ca:	b006      	add	sp, #24
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000185 	.word	0x00000185
     4d4:	00003ded 	.word	0x00003ded
     4d8:	000001d9 	.word	0x000001d9

000004dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	2200      	movs	r2, #0
     4e8:	701a      	strb	r2, [r3, #0]
}
     4ea:	46bd      	mov	sp, r7
     4ec:	b002      	add	sp, #8
     4ee:	bd80      	pop	{r7, pc}

000004f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	1c02      	adds	r2, r0, #0
     4f8:	6039      	str	r1, [r7, #0]
     4fa:	1dfb      	adds	r3, r7, #7
     4fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     4fe:	1dfb      	adds	r3, r7, #7
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b01      	cmp	r3, #1
     504:	d00a      	beq.n	51c <system_apb_clock_set_mask+0x2c>
     506:	2b02      	cmp	r3, #2
     508:	d00f      	beq.n	52a <system_apb_clock_set_mask+0x3a>
     50a:	2b00      	cmp	r3, #0
     50c:	d114      	bne.n	538 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <system_apb_clock_set_mask+0x58>)
     510:	4a0d      	ldr	r2, [pc, #52]	; (548 <system_apb_clock_set_mask+0x58>)
     512:	6991      	ldr	r1, [r2, #24]
     514:	683a      	ldr	r2, [r7, #0]
     516:	430a      	orrs	r2, r1
     518:	619a      	str	r2, [r3, #24]
			break;
     51a:	e00f      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     51e:	4a0a      	ldr	r2, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     520:	69d1      	ldr	r1, [r2, #28]
     522:	683a      	ldr	r2, [r7, #0]
     524:	430a      	orrs	r2, r1
     526:	61da      	str	r2, [r3, #28]
			break;
     528:	e008      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <system_apb_clock_set_mask+0x58>)
     52c:	4a06      	ldr	r2, [pc, #24]	; (548 <system_apb_clock_set_mask+0x58>)
     52e:	6a11      	ldr	r1, [r2, #32]
     530:	683a      	ldr	r2, [r7, #0]
     532:	430a      	orrs	r2, r1
     534:	621a      	str	r2, [r3, #32]
			break;
     536:	e001      	b.n	53c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     538:	2317      	movs	r3, #23
     53a:	e000      	b.n	53e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     53c:	2300      	movs	r3, #0
}
     53e:	1c18      	adds	r0, r3, #0
     540:	46bd      	mov	sp, r7
     542:	b002      	add	sp, #8
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	40000400 	.word	0x40000400

0000054c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	1c02      	adds	r2, r0, #0
     554:	1dfb      	adds	r3, r7, #7
     556:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <system_interrupt_enable+0x28>)
     55a:	1dfa      	adds	r2, r7, #7
     55c:	7812      	ldrb	r2, [r2, #0]
     55e:	1c11      	adds	r1, r2, #0
     560:	221f      	movs	r2, #31
     562:	400a      	ands	r2, r1
     564:	2101      	movs	r1, #1
     566:	4091      	lsls	r1, r2
     568:	1c0a      	adds	r2, r1, #0
     56a:	601a      	str	r2, [r3, #0]
}
     56c:	46bd      	mov	sp, r7
     56e:	b002      	add	sp, #8
     570:	bd80      	pop	{r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	e000e100 	.word	0xe000e100

00000578 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	1c02      	adds	r2, r0, #0
     580:	1dfb      	adds	r3, r7, #7
     582:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     584:	4a07      	ldr	r2, [pc, #28]	; (5a4 <system_interrupt_disable+0x2c>)
     586:	1dfb      	adds	r3, r7, #7
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	1c19      	adds	r1, r3, #0
     58c:	231f      	movs	r3, #31
     58e:	400b      	ands	r3, r1
     590:	2101      	movs	r1, #1
     592:	4099      	lsls	r1, r3
     594:	1c0b      	adds	r3, r1, #0
     596:	1c19      	adds	r1, r3, #0
     598:	2380      	movs	r3, #128	; 0x80
     59a:	50d1      	str	r1, [r2, r3]
}
     59c:	46bd      	mov	sp, r7
     59e:	b002      	add	sp, #8
     5a0:	bd80      	pop	{r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	e000e100 	.word	0xe000e100

000005a8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b084      	sub	sp, #16
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	7a9b      	ldrb	r3, [r3, #10]
     5ba:	b2db      	uxtb	r3, r3
     5bc:	b2db      	uxtb	r3, r3
     5be:	b25b      	sxtb	r3, r3
     5c0:	2b00      	cmp	r3, #0
     5c2:	da01      	bge.n	5c8 <rtc_count_is_syncing+0x20>
                return true;
     5c4:	2301      	movs	r3, #1
     5c6:	e000      	b.n	5ca <rtc_count_is_syncing+0x22>
        }

        return false;
     5c8:	2300      	movs	r3, #0
}
     5ca:	1c18      	adds	r0, r3, #0
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5e2:	2003      	movs	r0, #3
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <rtc_count_enable+0x38>)
     5e6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	1c18      	adds	r0, r3, #0
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <rtc_count_enable+0x3c>)
     5f0:	4798      	blx	r3
     5f2:	1e03      	subs	r3, r0, #0
     5f4:	d1f9      	bne.n	5ea <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5f6:	68fb      	ldr	r3, [r7, #12]
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	b29b      	uxth	r3, r3
     5fc:	2202      	movs	r2, #2
     5fe:	4313      	orrs	r3, r2
     600:	b29a      	uxth	r2, r3
     602:	68fb      	ldr	r3, [r7, #12]
     604:	801a      	strh	r2, [r3, #0]
}
     606:	46bd      	mov	sp, r7
     608:	b004      	add	sp, #16
     60a:	bd80      	pop	{r7, pc}
     60c:	0000054d 	.word	0x0000054d
     610:	000005a9 	.word	0x000005a9

00000614 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     614:	b580      	push	{r7, lr}
     616:	b084      	sub	sp, #16
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	681b      	ldr	r3, [r3, #0]
     620:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     622:	2003      	movs	r0, #3
     624:	4b09      	ldr	r3, [pc, #36]	; (64c <rtc_count_disable+0x38>)
     626:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	1c18      	adds	r0, r3, #0
     62e:	4b08      	ldr	r3, [pc, #32]	; (650 <rtc_count_disable+0x3c>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     636:	68fb      	ldr	r3, [r7, #12]
     638:	881b      	ldrh	r3, [r3, #0]
     63a:	b29b      	uxth	r3, r3
     63c:	2202      	movs	r2, #2
     63e:	4393      	bics	r3, r2
     640:	b29a      	uxth	r2, r3
     642:	68fb      	ldr	r3, [r7, #12]
     644:	801a      	strh	r2, [r3, #0]
}
     646:	46bd      	mov	sp, r7
     648:	b004      	add	sp, #16
     64a:	bd80      	pop	{r7, pc}
     64c:	00000579 	.word	0x00000579
     650:	000005a9 	.word	0x000005a9

00000654 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     662:	687b      	ldr	r3, [r7, #4]
     664:	1c18      	adds	r0, r3, #0
     666:	4b0d      	ldr	r3, [pc, #52]	; (69c <rtc_count_reset+0x48>)
     668:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2200      	movs	r2, #0
     66e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	1c18      	adds	r0, r3, #0
     67c:	4b08      	ldr	r3, [pc, #32]	; (6a0 <rtc_count_reset+0x4c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	881b      	ldrh	r3, [r3, #0]
     688:	b29b      	uxth	r3, r3
     68a:	2201      	movs	r2, #1
     68c:	4313      	orrs	r3, r2
     68e:	b29a      	uxth	r2, r3
     690:	68fb      	ldr	r3, [r7, #12]
     692:	801a      	strh	r2, [r3, #0]
}
     694:	46bd      	mov	sp, r7
     696:	b004      	add	sp, #16
     698:	bd80      	pop	{r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000615 	.word	0x00000615
     6a0:	000005a9 	.word	0x000005a9

000006a4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6a4:	b580      	push	{r7, lr}
     6a6:	b084      	sub	sp, #16
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
     6ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	881a      	ldrh	r2, [r3, #0]
     6b8:	68bb      	ldr	r3, [r7, #8]
     6ba:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	789b      	ldrb	r3, [r3, #2]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d03c      	beq.n	73e <_rtc_count_set_config+0x9a>
     6c4:	2b01      	cmp	r3, #1
     6c6:	d000      	beq.n	6ca <_rtc_count_set_config+0x26>
     6c8:	e070      	b.n	7ac <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	b29a      	uxth	r2, r3
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	78db      	ldrb	r3, [r3, #3]
     6d8:	2b00      	cmp	r3, #0
     6da:	d007      	beq.n	6ec <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6dc:	68bb      	ldr	r3, [r7, #8]
     6de:	881b      	ldrh	r3, [r3, #0]
     6e0:	b29b      	uxth	r3, r3
     6e2:	2280      	movs	r2, #128	; 0x80
     6e4:	4313      	orrs	r3, r2
     6e6:	b29a      	uxth	r2, r3
     6e8:	68bb      	ldr	r3, [r7, #8]
     6ea:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6ec:	230f      	movs	r3, #15
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	2200      	movs	r2, #0
     6f2:	701a      	strb	r2, [r3, #0]
     6f4:	e01d      	b.n	732 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	1c18      	adds	r0, r3, #0
     6fc:	4b35      	ldr	r3, [pc, #212]	; (7d4 <_rtc_count_set_config+0x130>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     704:	230f      	movs	r3, #15
     706:	18fb      	adds	r3, r7, r3
     708:	781a      	ldrb	r2, [r3, #0]
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	3202      	adds	r2, #2
     70e:	0092      	lsls	r2, r2, #2
     710:	58d2      	ldr	r2, [r2, r3]
     712:	6879      	ldr	r1, [r7, #4]
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	1c08      	adds	r0, r1, #0
     71c:	1c11      	adds	r1, r2, #0
     71e:	1c1a      	adds	r2, r3, #0
     720:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <_rtc_count_set_config+0x134>)
     722:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     724:	230f      	movs	r3, #15
     726:	18fb      	adds	r3, r7, r3
     728:	781a      	ldrb	r2, [r3, #0]
     72a:	230f      	movs	r3, #15
     72c:	18fb      	adds	r3, r7, r3
     72e:	3201      	adds	r2, #1
     730:	701a      	strb	r2, [r3, #0]
     732:	230f      	movs	r3, #15
     734:	18fb      	adds	r3, r7, r3
     736:	781b      	ldrb	r3, [r3, #0]
     738:	2b00      	cmp	r3, #0
     73a:	d0dc      	beq.n	6f6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     73c:	e038      	b.n	7b0 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     73e:	68bb      	ldr	r3, [r7, #8]
     740:	881b      	ldrh	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	2204      	movs	r2, #4
     746:	4313      	orrs	r3, r2
     748:	b29a      	uxth	r2, r3
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     74e:	683b      	ldr	r3, [r7, #0]
     750:	78db      	ldrb	r3, [r3, #3]
     752:	2b00      	cmp	r3, #0
     754:	d001      	beq.n	75a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     756:	2317      	movs	r3, #23
     758:	e038      	b.n	7cc <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     75a:	230e      	movs	r3, #14
     75c:	18fb      	adds	r3, r7, r3
     75e:	2200      	movs	r2, #0
     760:	701a      	strb	r2, [r3, #0]
     762:	e01d      	b.n	7a0 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     764:	46c0      	nop			; (mov r8, r8)
     766:	687b      	ldr	r3, [r7, #4]
     768:	1c18      	adds	r0, r3, #0
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <_rtc_count_set_config+0x130>)
     76c:	4798      	blx	r3
     76e:	1e03      	subs	r3, r0, #0
     770:	d1f9      	bne.n	766 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     772:	230e      	movs	r3, #14
     774:	18fb      	adds	r3, r7, r3
     776:	781a      	ldrb	r2, [r3, #0]
     778:	683b      	ldr	r3, [r7, #0]
     77a:	3202      	adds	r2, #2
     77c:	0092      	lsls	r2, r2, #2
     77e:	58d2      	ldr	r2, [r2, r3]
     780:	6879      	ldr	r1, [r7, #4]
     782:	230e      	movs	r3, #14
     784:	18fb      	adds	r3, r7, r3
     786:	781b      	ldrb	r3, [r3, #0]
     788:	1c08      	adds	r0, r1, #0
     78a:	1c11      	adds	r1, r2, #0
     78c:	1c1a      	adds	r2, r3, #0
     78e:	4b12      	ldr	r3, [pc, #72]	; (7d8 <_rtc_count_set_config+0x134>)
     790:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     792:	230e      	movs	r3, #14
     794:	18fb      	adds	r3, r7, r3
     796:	781a      	ldrb	r2, [r3, #0]
     798:	230e      	movs	r3, #14
     79a:	18fb      	adds	r3, r7, r3
     79c:	3201      	adds	r2, #1
     79e:	701a      	strb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d9dc      	bls.n	764 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7aa:	e001      	b.n	7b0 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7ac:	2317      	movs	r3, #23
     7ae:	e00d      	b.n	7cc <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	791b      	ldrb	r3, [r3, #4]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d008      	beq.n	7ca <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	885b      	ldrh	r3, [r3, #2]
     7bc:	b29b      	uxth	r3, r3
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	01d2      	lsls	r2, r2, #7
     7c2:	4313      	orrs	r3, r2
     7c4:	b29a      	uxth	r2, r3
     7c6:	68bb      	ldr	r3, [r7, #8]
     7c8:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7ca:	2300      	movs	r3, #0
}
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	46bd      	mov	sp, r7
     7d0:	b004      	add	sp, #16
     7d2:	bd80      	pop	{r7, pc}
     7d4:	000005a9 	.word	0x000005a9
     7d8:	00000935 	.word	0x00000935

000007dc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b086      	sub	sp, #24
     7e0:	af00      	add	r7, sp, #0
     7e2:	60f8      	str	r0, [r7, #12]
     7e4:	60b9      	str	r1, [r7, #8]
     7e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	68ba      	ldr	r2, [r7, #8]
     7ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7ee:	2000      	movs	r0, #0
     7f0:	2120      	movs	r1, #32
     7f2:	4b17      	ldr	r3, [pc, #92]	; (850 <rtc_count_init+0x74>)
     7f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7f6:	2314      	movs	r3, #20
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	1c18      	adds	r0, r3, #0
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <rtc_count_init+0x78>)
     7fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     800:	2314      	movs	r3, #20
     802:	18fb      	adds	r3, r7, r3
     804:	2202      	movs	r2, #2
     806:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2004      	movs	r0, #4
     80e:	1c19      	adds	r1, r3, #0
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <rtc_count_init+0x7c>)
     812:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     814:	2004      	movs	r0, #4
     816:	4b11      	ldr	r3, [pc, #68]	; (85c <rtc_count_init+0x80>)
     818:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	1c18      	adds	r0, r3, #0
     81e:	4b10      	ldr	r3, [pc, #64]	; (860 <rtc_count_init+0x84>)
     820:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     822:	687b      	ldr	r3, [r7, #4]
     824:	789a      	ldrb	r2, [r3, #2]
     826:	68fb      	ldr	r3, [r7, #12]
     828:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	791a      	ldrb	r2, [r3, #4]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     832:	4b0c      	ldr	r3, [pc, #48]	; (864 <rtc_count_init+0x88>)
     834:	68fa      	ldr	r2, [r7, #12]
     836:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     838:	68fa      	ldr	r2, [r7, #12]
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	1c10      	adds	r0, r2, #0
     83e:	1c19      	adds	r1, r3, #0
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <rtc_count_init+0x8c>)
     842:	4798      	blx	r3
     844:	1c03      	adds	r3, r0, #0
}
     846:	1c18      	adds	r0, r3, #0
     848:	46bd      	mov	sp, r7
     84a:	b006      	add	sp, #24
     84c:	bd80      	pop	{r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	000004f1 	.word	0x000004f1
     854:	000004dd 	.word	0x000004dd
     858:	00003b01 	.word	0x00003b01
     85c:	00003b45 	.word	0x00003b45
     860:	00000655 	.word	0x00000655
     864:	200000a0 	.word	0x200000a0
     868:	000006a5 	.word	0x000006a5

0000086c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     876:	687b      	ldr	r3, [r7, #4]
     878:	681b      	ldr	r3, [r3, #0]
     87a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	1c18      	adds	r0, r3, #0
     882:	4b10      	ldr	r3, [pc, #64]	; (8c4 <rtc_count_set_count+0x58>)
     884:	4798      	blx	r3
     886:	1e03      	subs	r3, r0, #0
     888:	d1f9      	bne.n	87e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	2b00      	cmp	r3, #0
     890:	d005      	beq.n	89e <rtc_count_set_count+0x32>
     892:	2b01      	cmp	r3, #1
     894:	d10e      	bne.n	8b4 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     896:	68fb      	ldr	r3, [r7, #12]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	611a      	str	r2, [r3, #16]

			break;
     89c:	e00c      	b.n	8b8 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	4a09      	ldr	r2, [pc, #36]	; (8c8 <rtc_count_set_count+0x5c>)
     8a2:	4293      	cmp	r3, r2
     8a4:	d901      	bls.n	8aa <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8a6:	2317      	movs	r3, #23
     8a8:	e007      	b.n	8ba <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8aa:	683b      	ldr	r3, [r7, #0]
     8ac:	b29a      	uxth	r2, r3
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	821a      	strh	r2, [r3, #16]

			break;
     8b2:	e001      	b.n	8b8 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8b4:	2317      	movs	r3, #23
     8b6:	e000      	b.n	8ba <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	1c18      	adds	r0, r3, #0
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	000005a9 	.word	0x000005a9
     8c8:	0000ffff 	.word	0x0000ffff

000008cc <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	795b      	ldrb	r3, [r3, #5]
     8de:	2201      	movs	r2, #1
     8e0:	4053      	eors	r3, r2
     8e2:	b2db      	uxtb	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d009      	beq.n	8fc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	4a10      	ldr	r2, [pc, #64]	; (92c <rtc_count_get_count+0x60>)
     8ec:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	1c18      	adds	r0, r3, #0
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <rtc_count_get_count+0x64>)
     8f6:	4798      	blx	r3
     8f8:	1e03      	subs	r3, r0, #0
     8fa:	d1f9      	bne.n	8f0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	791b      	ldrb	r3, [r3, #4]
     900:	2b00      	cmp	r3, #0
     902:	d005      	beq.n	910 <rtc_count_get_count+0x44>
     904:	2b01      	cmp	r3, #1
     906:	d108      	bne.n	91a <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     908:	68bb      	ldr	r3, [r7, #8]
     90a:	691b      	ldr	r3, [r3, #16]
     90c:	60fb      	str	r3, [r7, #12]

			break;
     90e:	e007      	b.n	920 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	8a1b      	ldrh	r3, [r3, #16]
     914:	b29b      	uxth	r3, r3
     916:	60fb      	str	r3, [r7, #12]

			break;
     918:	e002      	b.n	920 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     91a:	2300      	movs	r3, #0
     91c:	60fb      	str	r3, [r7, #12]
			break;
     91e:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     920:	68fb      	ldr	r3, [r7, #12]
}
     922:	1c18      	adds	r0, r3, #0
     924:	46bd      	mov	sp, r7
     926:	b004      	add	sp, #16
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	ffff8000 	.word	0xffff8000
     930:	000005a9 	.word	0x000005a9

00000934 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     934:	b580      	push	{r7, lr}
     936:	b086      	sub	sp, #24
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	1dfb      	adds	r3, r7, #7
     940:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     942:	68fb      	ldr	r3, [r7, #12]
     944:	681b      	ldr	r3, [r3, #0]
     946:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     948:	46c0      	nop			; (mov r8, r8)
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	1c18      	adds	r0, r3, #0
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <rtc_count_set_compare+0x84>)
     950:	4798      	blx	r3
     952:	1e03      	subs	r3, r0, #0
     954:	d1f9      	bne.n	94a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     956:	68fb      	ldr	r3, [r7, #12]
     958:	791b      	ldrb	r3, [r3, #4]
     95a:	2b00      	cmp	r3, #0
     95c:	d00f      	beq.n	97e <rtc_count_set_compare+0x4a>
     95e:	2b01      	cmp	r3, #1
     960:	d122      	bne.n	9a8 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b01      	cmp	r3, #1
     968:	d901      	bls.n	96e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     96a:	2317      	movs	r3, #23
     96c:	e01f      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     96e:	1dfb      	adds	r3, r7, #7
     970:	781a      	ldrb	r2, [r3, #0]
     972:	697b      	ldr	r3, [r7, #20]
     974:	3206      	adds	r2, #6
     976:	0092      	lsls	r2, r2, #2
     978:	68b9      	ldr	r1, [r7, #8]
     97a:	50d1      	str	r1, [r2, r3]

			break;
     97c:	e016      	b.n	9ac <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     97e:	1dfb      	adds	r3, r7, #7
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b02      	cmp	r3, #2
     984:	d901      	bls.n	98a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     986:	2317      	movs	r3, #23
     988:	e011      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	4a0b      	ldr	r2, [pc, #44]	; (9bc <rtc_count_set_compare+0x88>)
     98e:	4293      	cmp	r3, r2
     990:	d901      	bls.n	996 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e00b      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     996:	1dfb      	adds	r3, r7, #7
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	68bb      	ldr	r3, [r7, #8]
     99c:	b299      	uxth	r1, r3
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	320c      	adds	r2, #12
     9a2:	0052      	lsls	r2, r2, #1
     9a4:	52d1      	strh	r1, [r2, r3]

			break;
     9a6:	e001      	b.n	9ac <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9a8:	231a      	movs	r3, #26
     9aa:	e000      	b.n	9ae <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9ac:	2300      	movs	r3, #0
}
     9ae:	1c18      	adds	r0, r3, #0
     9b0:	46bd      	mov	sp, r7
     9b2:	b006      	add	sp, #24
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	000005a9 	.word	0x000005a9
     9bc:	0000ffff 	.word	0x0000ffff

000009c0 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b084      	sub	sp, #16
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
     9c8:	1c0a      	adds	r2, r1, #0
     9ca:	1cbb      	adds	r3, r7, #2
     9cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	791b      	ldrb	r3, [r3, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d001      	beq.n	9e0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9dc:	2315      	movs	r3, #21
     9de:	e00b      	b.n	9f8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e0:	46c0      	nop			; (mov r8, r8)
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <rtc_count_set_period+0x40>)
     9e8:	4798      	blx	r3
     9ea:	1e03      	subs	r3, r0, #0
     9ec:	d1f9      	bne.n	9e2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	1cba      	adds	r2, r7, #2
     9f2:	8812      	ldrh	r2, [r2, #0]
     9f4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9f6:	2300      	movs	r3, #0
}
     9f8:	1c18      	adds	r0, r3, #0
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	000005a9 	.word	0x000005a9

00000a04 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a04:	b580      	push	{r7, lr}
     a06:	b086      	sub	sp, #24
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a0c:	4b31      	ldr	r3, [pc, #196]	; (ad4 <_rtc_interrupt_handler+0xd0>)
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	0092      	lsls	r2, r2, #2
     a12:	58d3      	ldr	r3, [r2, r3]
     a14:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a16:	697b      	ldr	r3, [r7, #20]
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a1c:	230e      	movs	r3, #14
     a1e:	18fb      	adds	r3, r7, r3
     a20:	697a      	ldr	r2, [r7, #20]
     a22:	8ad2      	ldrh	r2, [r2, #22]
     a24:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a26:	697b      	ldr	r3, [r7, #20]
     a28:	8a9b      	ldrh	r3, [r3, #20]
     a2a:	b29a      	uxth	r2, r3
     a2c:	230e      	movs	r3, #14
     a2e:	18fb      	adds	r3, r7, r3
     a30:	210e      	movs	r1, #14
     a32:	1879      	adds	r1, r7, r1
     a34:	8809      	ldrh	r1, [r1, #0]
     a36:	400a      	ands	r2, r1
     a38:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a3a:	693b      	ldr	r3, [r7, #16]
     a3c:	7a1b      	ldrb	r3, [r3, #8]
     a3e:	b2da      	uxtb	r2, r3
     a40:	230c      	movs	r3, #12
     a42:	18fb      	adds	r3, r7, r3
     a44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a46:	693b      	ldr	r3, [r7, #16]
     a48:	79db      	ldrb	r3, [r3, #7]
     a4a:	b2db      	uxtb	r3, r3
     a4c:	b29a      	uxth	r2, r3
     a4e:	230c      	movs	r3, #12
     a50:	18fb      	adds	r3, r7, r3
     a52:	210c      	movs	r1, #12
     a54:	1879      	adds	r1, r7, r1
     a56:	8809      	ldrh	r1, [r1, #0]
     a58:	400a      	ands	r2, r1
     a5a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a5c:	230c      	movs	r3, #12
     a5e:	18fb      	adds	r3, r7, r3
     a60:	881b      	ldrh	r3, [r3, #0]
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	4013      	ands	r3, r2
     a66:	d00c      	beq.n	a82 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a68:	230e      	movs	r3, #14
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	881b      	ldrh	r3, [r3, #0]
     a6e:	2204      	movs	r2, #4
     a70:	4013      	ands	r3, r2
     a72:	d002      	beq.n	a7a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a74:	697b      	ldr	r3, [r7, #20]
     a76:	691b      	ldr	r3, [r3, #16]
     a78:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a7a:	693b      	ldr	r3, [r7, #16]
     a7c:	2280      	movs	r2, #128	; 0x80
     a7e:	721a      	strb	r2, [r3, #8]
     a80:	e024      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a82:	230c      	movs	r3, #12
     a84:	18fb      	adds	r3, r7, r3
     a86:	881b      	ldrh	r3, [r3, #0]
     a88:	2201      	movs	r2, #1
     a8a:	4013      	ands	r3, r2
     a8c:	d00c      	beq.n	aa8 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a8e:	230e      	movs	r3, #14
     a90:	18fb      	adds	r3, r7, r3
     a92:	881b      	ldrh	r3, [r3, #0]
     a94:	2201      	movs	r2, #1
     a96:	4013      	ands	r3, r2
     a98:	d002      	beq.n	aa0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     a9a:	697b      	ldr	r3, [r7, #20]
     a9c:	689b      	ldr	r3, [r3, #8]
     a9e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa0:	693b      	ldr	r3, [r7, #16]
     aa2:	2201      	movs	r2, #1
     aa4:	721a      	strb	r2, [r3, #8]
     aa6:	e011      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     aa8:	230c      	movs	r3, #12
     aaa:	18fb      	adds	r3, r7, r3
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	2202      	movs	r2, #2
     ab0:	4013      	ands	r3, r2
     ab2:	d00b      	beq.n	acc <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     ab4:	230e      	movs	r3, #14
     ab6:	18fb      	adds	r3, r7, r3
     ab8:	881b      	ldrh	r3, [r3, #0]
     aba:	2202      	movs	r2, #2
     abc:	4013      	ands	r3, r2
     abe:	d002      	beq.n	ac6 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	68db      	ldr	r3, [r3, #12]
     ac4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ac6:	693b      	ldr	r3, [r7, #16]
     ac8:	2202      	movs	r2, #2
     aca:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     acc:	46bd      	mov	sp, r7
     ace:	b006      	add	sp, #24
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	200000a0 	.word	0x200000a0

00000ad8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     adc:	2000      	movs	r0, #0
     ade:	4b02      	ldr	r3, [pc, #8]	; (ae8 <RTC_Handler+0x10>)
     ae0:	4798      	blx	r3
}
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000a05 	.word	0x00000a05

00000aec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     aec:	b580      	push	{r7, lr}
     aee:	b084      	sub	sp, #16
     af0:	af00      	add	r7, sp, #0
     af2:	1c02      	adds	r2, r0, #0
     af4:	1dfb      	adds	r3, r7, #7
     af6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     af8:	230f      	movs	r3, #15
     afa:	18fb      	adds	r3, r7, r3
     afc:	1dfa      	adds	r2, r7, #7
     afe:	7812      	ldrb	r2, [r2, #0]
     b00:	0952      	lsrs	r2, r2, #5
     b02:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     b04:	230f      	movs	r3, #15
     b06:	18fb      	adds	r3, r7, r3
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d10c      	bne.n	b28 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <_extint_get_eic_from_channel+0x48>)
     b10:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     b12:	230f      	movs	r3, #15
     b14:	18fb      	adds	r3, r7, r3
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	009b      	lsls	r3, r3, #2
     b1a:	2210      	movs	r2, #16
     b1c:	4694      	mov	ip, r2
     b1e:	44bc      	add	ip, r7
     b20:	4463      	add	r3, ip
     b22:	3b08      	subs	r3, #8
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	e000      	b.n	b2a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     b28:	2300      	movs	r3, #0
	}
}
     b2a:	1c18      	adds	r0, r3, #0
     b2c:	46bd      	mov	sp, r7
     b2e:	b004      	add	sp, #16
     b30:	bd80      	pop	{r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	40001800 	.word	0x40001800

00000b38 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	1c02      	adds	r2, r0, #0
     b40:	1dfb      	adds	r3, r7, #7
     b42:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	1c18      	adds	r0, r3, #0
     b4a:	4b0b      	ldr	r3, [pc, #44]	; (b78 <extint_chan_is_detected+0x40>)
     b4c:	4798      	blx	r3
     b4e:	1c03      	adds	r3, r0, #0
     b50:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b52:	1dfb      	adds	r3, r7, #7
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	221f      	movs	r2, #31
     b58:	4013      	ands	r3, r2
     b5a:	2201      	movs	r2, #1
     b5c:	409a      	lsls	r2, r3
     b5e:	1c13      	adds	r3, r2, #0
     b60:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     b62:	68fb      	ldr	r3, [r7, #12]
     b64:	691b      	ldr	r3, [r3, #16]
     b66:	68ba      	ldr	r2, [r7, #8]
     b68:	4013      	ands	r3, r2
     b6a:	1e5a      	subs	r2, r3, #1
     b6c:	4193      	sbcs	r3, r2
     b6e:	b2db      	uxtb	r3, r3
}
     b70:	1c18      	adds	r0, r3, #0
     b72:	46bd      	mov	sp, r7
     b74:	b004      	add	sp, #16
     b76:	bd80      	pop	{r7, pc}
     b78:	00000aed 	.word	0x00000aed

00000b7c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
     b82:	1c02      	adds	r2, r0, #0
     b84:	1dfb      	adds	r3, r7, #7
     b86:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	1c18      	adds	r0, r3, #0
     b8e:	4b09      	ldr	r3, [pc, #36]	; (bb4 <extint_chan_clear_detected+0x38>)
     b90:	4798      	blx	r3
     b92:	1c03      	adds	r3, r0, #0
     b94:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	221f      	movs	r2, #31
     b9c:	4013      	ands	r3, r2
     b9e:	2201      	movs	r2, #1
     ba0:	409a      	lsls	r2, r3
     ba2:	1c13      	adds	r3, r2, #0
     ba4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	68ba      	ldr	r2, [r7, #8]
     baa:	611a      	str	r2, [r3, #16]
}
     bac:	46bd      	mov	sp, r7
     bae:	b004      	add	sp, #16
     bb0:	bd80      	pop	{r7, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00000aed 	.word	0x00000aed

00000bb8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	1c11      	adds	r1, r2, #0
     bc4:	1cfb      	adds	r3, r7, #3
     bc6:	1c02      	adds	r2, r0, #0
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	1cbb      	adds	r3, r7, #2
     bcc:	1c0a      	adds	r2, r1, #0
     bce:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     bd0:	1cbb      	adds	r3, r7, #2
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d001      	beq.n	bdc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     bd8:	2317      	movs	r3, #23
     bda:	e019      	b.n	c10 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     bdc:	1cfb      	adds	r3, r7, #3
     bde:	781a      	ldrb	r2, [r3, #0]
     be0:	4b0d      	ldr	r3, [pc, #52]	; (c18 <extint_register_callback+0x60>)
     be2:	0092      	lsls	r2, r2, #2
     be4:	58d3      	ldr	r3, [r2, r3]
     be6:	2b00      	cmp	r3, #0
     be8:	d107      	bne.n	bfa <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     bea:	1cfb      	adds	r3, r7, #3
     bec:	781a      	ldrb	r2, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <extint_register_callback+0x60>)
     bf0:	0092      	lsls	r2, r2, #2
     bf2:	6879      	ldr	r1, [r7, #4]
     bf4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     bf6:	2300      	movs	r3, #0
     bf8:	e00a      	b.n	c10 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     bfa:	1cfb      	adds	r3, r7, #3
     bfc:	781a      	ldrb	r2, [r3, #0]
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <extint_register_callback+0x60>)
     c00:	0092      	lsls	r2, r2, #2
     c02:	58d2      	ldr	r2, [r2, r3]
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	429a      	cmp	r2, r3
     c08:	d101      	bne.n	c0e <extint_register_callback+0x56>
		return STATUS_OK;
     c0a:	2300      	movs	r3, #0
     c0c:	e000      	b.n	c10 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     c0e:	231d      	movs	r3, #29
}
     c10:	1c18      	adds	r0, r3, #0
     c12:	46bd      	mov	sp, r7
     c14:	b002      	add	sp, #8
     c16:	bd80      	pop	{r7, pc}
     c18:	20000060 	.word	0x20000060

00000c1c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b084      	sub	sp, #16
     c20:	af00      	add	r7, sp, #0
     c22:	1c02      	adds	r2, r0, #0
     c24:	1dfb      	adds	r3, r7, #7
     c26:	701a      	strb	r2, [r3, #0]
     c28:	1dbb      	adds	r3, r7, #6
     c2a:	1c0a      	adds	r2, r1, #0
     c2c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c2e:	1dbb      	adds	r3, r7, #6
     c30:	781b      	ldrb	r3, [r3, #0]
     c32:	2b00      	cmp	r3, #0
     c34:	d10e      	bne.n	c54 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     c36:	1dfb      	adds	r3, r7, #7
     c38:	781b      	ldrb	r3, [r3, #0]
     c3a:	1c18      	adds	r0, r3, #0
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <extint_chan_enable_callback+0x44>)
     c3e:	4798      	blx	r3
     c40:	1c03      	adds	r3, r0, #0
     c42:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     c44:	1dfb      	adds	r3, r7, #7
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	2201      	movs	r2, #1
     c4a:	409a      	lsls	r2, r3
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c50:	2300      	movs	r3, #0
     c52:	e000      	b.n	c56 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c54:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     c56:	1c18      	adds	r0, r3, #0
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000aed 	.word	0x00000aed

00000c64 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c64:	b580      	push	{r7, lr}
     c66:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c68:	4b15      	ldr	r3, [pc, #84]	; (cc0 <EIC_Handler+0x5c>)
     c6a:	2200      	movs	r2, #0
     c6c:	701a      	strb	r2, [r3, #0]
     c6e:	e020      	b.n	cb2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     c70:	4b13      	ldr	r3, [pc, #76]	; (cc0 <EIC_Handler+0x5c>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	1c18      	adds	r0, r3, #0
     c76:	4b13      	ldr	r3, [pc, #76]	; (cc4 <EIC_Handler+0x60>)
     c78:	4798      	blx	r3
     c7a:	1e03      	subs	r3, r0, #0
     c7c:	d013      	beq.n	ca6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     c7e:	4b10      	ldr	r3, [pc, #64]	; (cc0 <EIC_Handler+0x5c>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	1c18      	adds	r0, r3, #0
     c84:	4b10      	ldr	r3, [pc, #64]	; (cc8 <EIC_Handler+0x64>)
     c86:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <EIC_Handler+0x5c>)
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	1c1a      	adds	r2, r3, #0
     c8e:	4b0f      	ldr	r3, [pc, #60]	; (ccc <EIC_Handler+0x68>)
     c90:	0092      	lsls	r2, r2, #2
     c92:	58d3      	ldr	r3, [r2, r3]
     c94:	2b00      	cmp	r3, #0
     c96:	d006      	beq.n	ca6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     c98:	4b09      	ldr	r3, [pc, #36]	; (cc0 <EIC_Handler+0x5c>)
     c9a:	781b      	ldrb	r3, [r3, #0]
     c9c:	1c1a      	adds	r2, r3, #0
     c9e:	4b0b      	ldr	r3, [pc, #44]	; (ccc <EIC_Handler+0x68>)
     ca0:	0092      	lsls	r2, r2, #2
     ca2:	58d3      	ldr	r3, [r2, r3]
     ca4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ca6:	4b06      	ldr	r3, [pc, #24]	; (cc0 <EIC_Handler+0x5c>)
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	3301      	adds	r3, #1
     cac:	b2da      	uxtb	r2, r3
     cae:	4b04      	ldr	r3, [pc, #16]	; (cc0 <EIC_Handler+0x5c>)
     cb0:	701a      	strb	r2, [r3, #0]
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <EIC_Handler+0x5c>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2b0f      	cmp	r3, #15
     cb8:	d9da      	bls.n	c70 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     cba:	46bd      	mov	sp, r7
     cbc:	bd80      	pop	{r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	200000a4 	.word	0x200000a4
     cc4:	00000b39 	.word	0x00000b39
     cc8:	00000b7d 	.word	0x00000b7d
     ccc:	20000060 	.word	0x20000060

00000cd0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	2200      	movs	r2, #0
     cdc:	701a      	strb	r2, [r3, #0]
}
     cde:	46bd      	mov	sp, r7
     ce0:	b002      	add	sp, #8
     ce2:	bd80      	pop	{r7, pc}

00000ce4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b082      	sub	sp, #8
     ce8:	af00      	add	r7, sp, #0
     cea:	1c02      	adds	r2, r0, #0
     cec:	6039      	str	r1, [r7, #0]
     cee:	1dfb      	adds	r3, r7, #7
     cf0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b01      	cmp	r3, #1
     cf8:	d00a      	beq.n	d10 <system_apb_clock_set_mask+0x2c>
     cfa:	2b02      	cmp	r3, #2
     cfc:	d00f      	beq.n	d1e <system_apb_clock_set_mask+0x3a>
     cfe:	2b00      	cmp	r3, #0
     d00:	d114      	bne.n	d2c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d02:	4b0e      	ldr	r3, [pc, #56]	; (d3c <system_apb_clock_set_mask+0x58>)
     d04:	4a0d      	ldr	r2, [pc, #52]	; (d3c <system_apb_clock_set_mask+0x58>)
     d06:	6991      	ldr	r1, [r2, #24]
     d08:	683a      	ldr	r2, [r7, #0]
     d0a:	430a      	orrs	r2, r1
     d0c:	619a      	str	r2, [r3, #24]
			break;
     d0e:	e00f      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d10:	4b0a      	ldr	r3, [pc, #40]	; (d3c <system_apb_clock_set_mask+0x58>)
     d12:	4a0a      	ldr	r2, [pc, #40]	; (d3c <system_apb_clock_set_mask+0x58>)
     d14:	69d1      	ldr	r1, [r2, #28]
     d16:	683a      	ldr	r2, [r7, #0]
     d18:	430a      	orrs	r2, r1
     d1a:	61da      	str	r2, [r3, #28]
			break;
     d1c:	e008      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d1e:	4b07      	ldr	r3, [pc, #28]	; (d3c <system_apb_clock_set_mask+0x58>)
     d20:	4a06      	ldr	r2, [pc, #24]	; (d3c <system_apb_clock_set_mask+0x58>)
     d22:	6a11      	ldr	r1, [r2, #32]
     d24:	683a      	ldr	r2, [r7, #0]
     d26:	430a      	orrs	r2, r1
     d28:	621a      	str	r2, [r3, #32]
			break;
     d2a:	e001      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     d2c:	2317      	movs	r3, #23
     d2e:	e000      	b.n	d32 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     d30:	2300      	movs	r3, #0
}
     d32:	1c18      	adds	r0, r3, #0
     d34:	46bd      	mov	sp, r7
     d36:	b002      	add	sp, #8
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	40000400 	.word	0x40000400

00000d40 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     d40:	b580      	push	{r7, lr}
     d42:	b082      	sub	sp, #8
     d44:	af00      	add	r7, sp, #0
     d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	2280      	movs	r2, #128	; 0x80
     d4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2200      	movs	r2, #0
     d52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	2201      	movs	r2, #1
     d58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	2200      	movs	r2, #0
     d5e:	70da      	strb	r2, [r3, #3]
}
     d60:	46bd      	mov	sp, r7
     d62:	b002      	add	sp, #8
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)

00000d68 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     d68:	b580      	push	{r7, lr}
     d6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d6c:	4b05      	ldr	r3, [pc, #20]	; (d84 <system_is_debugger_present+0x1c>)
     d6e:	789b      	ldrb	r3, [r3, #2]
     d70:	b2db      	uxtb	r3, r3
     d72:	1c1a      	adds	r2, r3, #0
     d74:	2302      	movs	r3, #2
     d76:	4013      	ands	r3, r2
     d78:	1e5a      	subs	r2, r3, #1
     d7a:	4193      	sbcs	r3, r2
     d7c:	b2db      	uxtb	r3, r3
}
     d7e:	1c18      	adds	r0, r3, #0
     d80:	46bd      	mov	sp, r7
     d82:	bd80      	pop	{r7, pc}
     d84:	41002000 	.word	0x41002000

00000d88 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     d88:	b580      	push	{r7, lr}
     d8a:	b084      	sub	sp, #16
     d8c:	af00      	add	r7, sp, #0
     d8e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	69db      	ldr	r3, [r3, #28]
     d9a:	2207      	movs	r2, #7
     d9c:	4013      	ands	r3, r2
     d9e:	1e5a      	subs	r2, r3, #1
     da0:	4193      	sbcs	r3, r2
     da2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     da4:	1c18      	adds	r0, r3, #0
     da6:	46bd      	mov	sp, r7
     da8:	b004      	add	sp, #16
     daa:	bd80      	pop	{r7, pc}

00000dac <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     dac:	b580      	push	{r7, lr}
     dae:	b082      	sub	sp, #8
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     db4:	46c0      	nop			; (mov r8, r8)
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	1c18      	adds	r0, r3, #0
     dba:	4b03      	ldr	r3, [pc, #12]	; (dc8 <_i2c_master_wait_for_sync+0x1c>)
     dbc:	4798      	blx	r3
     dbe:	1e03      	subs	r3, r0, #0
     dc0:	d1f9      	bne.n	db6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     dc2:	46bd      	mov	sp, r7
     dc4:	b002      	add	sp, #8
     dc6:	bd80      	pop	{r7, pc}
     dc8:	00000d89 	.word	0x00000d89

00000dcc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	b095      	sub	sp, #84	; 0x54
     dd0:	af00      	add	r7, sp, #0
     dd2:	60f8      	str	r0, [r7, #12]
     dd4:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     dd6:	2300      	movs	r3, #0
     dd8:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
     dda:	2300      	movs	r3, #0
     ddc:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
     dde:	2300      	movs	r3, #0
     de0:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
     de2:	233b      	movs	r3, #59	; 0x3b
     de4:	2208      	movs	r2, #8
     de6:	4694      	mov	ip, r2
     de8:	44bc      	add	ip, r7
     dea:	4463      	add	r3, ip
     dec:	2200      	movs	r2, #0
     dee:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
     df6:	68fb      	ldr	r3, [r7, #12]
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     dfc:	2323      	movs	r3, #35	; 0x23
     dfe:	2208      	movs	r2, #8
     e00:	18ba      	adds	r2, r7, r2
     e02:	18d4      	adds	r4, r2, r3
     e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e06:	1c18      	adds	r0, r3, #0
     e08:	4bc3      	ldr	r3, [pc, #780]	; (1118 <_i2c_master_set_config+0x34c>)
     e0a:	4798      	blx	r3
     e0c:	1c03      	adds	r3, r0, #0
     e0e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e10:	230c      	movs	r3, #12
     e12:	2208      	movs	r2, #8
     e14:	4694      	mov	ip, r2
     e16:	44bc      	add	ip, r7
     e18:	4463      	add	r3, ip
     e1a:	1c18      	adds	r0, r3, #0
     e1c:	4bbf      	ldr	r3, [pc, #764]	; (111c <_i2c_master_set_config+0x350>)
     e1e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     e20:	68bb      	ldr	r3, [r7, #8]
     e22:	69db      	ldr	r3, [r3, #28]
     e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	6a1b      	ldr	r3, [r3, #32]
     e2a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e2e:	2b00      	cmp	r3, #0
     e30:	d106      	bne.n	e40 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e34:	1c18      	adds	r0, r3, #0
     e36:	2100      	movs	r1, #0
     e38:	4bb9      	ldr	r3, [pc, #740]	; (1120 <_i2c_master_set_config+0x354>)
     e3a:	4798      	blx	r3
     e3c:	1c03      	adds	r3, r0, #0
     e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e42:	b2da      	uxtb	r2, r3
     e44:	230c      	movs	r3, #12
     e46:	2108      	movs	r1, #8
     e48:	468c      	mov	ip, r1
     e4a:	44bc      	add	ip, r7
     e4c:	4463      	add	r3, ip
     e4e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e50:	230c      	movs	r3, #12
     e52:	2208      	movs	r2, #8
     e54:	4694      	mov	ip, r2
     e56:	44bc      	add	ip, r7
     e58:	4463      	add	r3, ip
     e5a:	2202      	movs	r2, #2
     e5c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e60:	0c1b      	lsrs	r3, r3, #16
     e62:	b2da      	uxtb	r2, r3
     e64:	230c      	movs	r3, #12
     e66:	2108      	movs	r1, #8
     e68:	468c      	mov	ip, r1
     e6a:	44bc      	add	ip, r7
     e6c:	4463      	add	r3, ip
     e6e:	1c10      	adds	r0, r2, #0
     e70:	1c19      	adds	r1, r3, #0
     e72:	4bac      	ldr	r3, [pc, #688]	; (1124 <_i2c_master_set_config+0x358>)
     e74:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e78:	2b00      	cmp	r3, #0
     e7a:	d106      	bne.n	e8a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e7e:	1c18      	adds	r0, r3, #0
     e80:	2101      	movs	r1, #1
     e82:	4ba7      	ldr	r3, [pc, #668]	; (1120 <_i2c_master_set_config+0x354>)
     e84:	4798      	blx	r3
     e86:	1c03      	adds	r3, r0, #0
     e88:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e8c:	b2da      	uxtb	r2, r3
     e8e:	230c      	movs	r3, #12
     e90:	2108      	movs	r1, #8
     e92:	468c      	mov	ip, r1
     e94:	44bc      	add	ip, r7
     e96:	4463      	add	r3, ip
     e98:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e9a:	230c      	movs	r3, #12
     e9c:	2208      	movs	r2, #8
     e9e:	4694      	mov	ip, r2
     ea0:	44bc      	add	ip, r7
     ea2:	4463      	add	r3, ip
     ea4:	2202      	movs	r2, #2
     ea6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eaa:	0c1b      	lsrs	r3, r3, #16
     eac:	b2da      	uxtb	r2, r3
     eae:	230c      	movs	r3, #12
     eb0:	2108      	movs	r1, #8
     eb2:	468c      	mov	ip, r1
     eb4:	44bc      	add	ip, r7
     eb6:	4463      	add	r3, ip
     eb8:	1c10      	adds	r0, r2, #0
     eba:	1c19      	adds	r1, r3, #0
     ebc:	4b99      	ldr	r3, [pc, #612]	; (1124 <_i2c_master_set_config+0x358>)
     ebe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     ec0:	68bb      	ldr	r3, [r7, #8]
     ec2:	8a9a      	ldrh	r2, [r3, #20]
     ec4:	68fb      	ldr	r3, [r7, #12]
     ec6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     ec8:	68bb      	ldr	r3, [r7, #8]
     eca:	8ada      	ldrh	r2, [r3, #22]
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     ed0:	68bb      	ldr	r3, [r7, #8]
     ed2:	7e1b      	ldrb	r3, [r3, #24]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d103      	bne.n	ee0 <_i2c_master_set_config+0x114>
     ed8:	4b93      	ldr	r3, [pc, #588]	; (1128 <_i2c_master_set_config+0x35c>)
     eda:	4798      	blx	r3
     edc:	1e03      	subs	r3, r0, #0
     ede:	d002      	beq.n	ee6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     ee0:	2380      	movs	r3, #128	; 0x80
     ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
     ee4:	e001      	b.n	eea <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     ee6:	2300      	movs	r3, #0
     ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     eea:	68bb      	ldr	r3, [r7, #8]
     eec:	691b      	ldr	r3, [r3, #16]
     eee:	2b00      	cmp	r3, #0
     ef0:	d004      	beq.n	efc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     ef2:	68bb      	ldr	r3, [r7, #8]
     ef4:	691b      	ldr	r3, [r3, #16]
     ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ef8:	4313      	orrs	r3, r2
     efa:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     efc:	68bb      	ldr	r3, [r7, #8]
     efe:	689b      	ldr	r3, [r3, #8]
     f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f02:	4313      	orrs	r3, r2
     f04:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f06:	68bb      	ldr	r3, [r7, #8]
     f08:	2224      	movs	r2, #36	; 0x24
     f0a:	5c9b      	ldrb	r3, [r3, r2]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d004      	beq.n	f1a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f12:	2280      	movs	r2, #128	; 0x80
     f14:	05d2      	lsls	r2, r2, #23
     f16:	4313      	orrs	r3, r2
     f18:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f1a:	68bb      	ldr	r3, [r7, #8]
     f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f1e:	2b00      	cmp	r3, #0
     f20:	d004      	beq.n	f2c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     f22:	68bb      	ldr	r3, [r7, #8]
     f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f28:	4313      	orrs	r3, r2
     f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     f2c:	68bb      	ldr	r3, [r7, #8]
     f2e:	222c      	movs	r2, #44	; 0x2c
     f30:	5c9b      	ldrb	r3, [r3, r2]
     f32:	2b00      	cmp	r3, #0
     f34:	d105      	bne.n	f42 <_i2c_master_set_config+0x176>
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	689a      	ldr	r2, [r3, #8]
     f3a:	2380      	movs	r3, #128	; 0x80
     f3c:	049b      	lsls	r3, r3, #18
     f3e:	429a      	cmp	r2, r3
     f40:	d104      	bne.n	f4c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f44:	2280      	movs	r2, #128	; 0x80
     f46:	0512      	lsls	r2, r2, #20
     f48:	4313      	orrs	r3, r2
     f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     f4c:	68bb      	ldr	r3, [r7, #8]
     f4e:	222d      	movs	r2, #45	; 0x2d
     f50:	5c9b      	ldrb	r3, [r3, r2]
     f52:	2b00      	cmp	r3, #0
     f54:	d004      	beq.n	f60 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f58:	2280      	movs	r2, #128	; 0x80
     f5a:	0412      	lsls	r2, r2, #16
     f5c:	4313      	orrs	r3, r2
     f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	222e      	movs	r2, #46	; 0x2e
     f64:	5c9b      	ldrb	r3, [r3, r2]
     f66:	2b00      	cmp	r3, #0
     f68:	d004      	beq.n	f74 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f6c:	2280      	movs	r2, #128	; 0x80
     f6e:	03d2      	lsls	r2, r2, #15
     f70:	4313      	orrs	r3, r2
     f72:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f76:	681a      	ldr	r2, [r3, #0]
     f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f7a:	431a      	orrs	r2, r3
     f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f7e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	0052      	lsls	r2, r2, #1
     f86:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     f88:	2323      	movs	r3, #35	; 0x23
     f8a:	2208      	movs	r2, #8
     f8c:	4694      	mov	ip, r2
     f8e:	44bc      	add	ip, r7
     f90:	4463      	add	r3, ip
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	3314      	adds	r3, #20
     f96:	b2db      	uxtb	r3, r3
     f98:	1c18      	adds	r0, r3, #0
     f9a:	4b64      	ldr	r3, [pc, #400]	; (112c <_i2c_master_set_config+0x360>)
     f9c:	4798      	blx	r3
     f9e:	1c03      	adds	r3, r0, #0
     fa0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
     fa2:	68bb      	ldr	r3, [r7, #8]
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	22fa      	movs	r2, #250	; 0xfa
     fa8:	0092      	lsls	r2, r2, #2
     faa:	4353      	muls	r3, r2
     fac:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     fae:	68bb      	ldr	r3, [r7, #8]
     fb0:	685b      	ldr	r3, [r3, #4]
     fb2:	22fa      	movs	r2, #250	; 0xfa
     fb4:	0092      	lsls	r2, r2, #2
     fb6:	4353      	muls	r3, r2
     fb8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
     fba:	68bb      	ldr	r3, [r7, #8]
     fbc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     fbe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
     fc0:	4b5b      	ldr	r3, [pc, #364]	; (1130 <_i2c_master_set_config+0x364>)
     fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
     fc4:	4798      	blx	r3
     fc6:	1c05      	adds	r5, r0, #0
     fc8:	1c0e      	adds	r6, r1, #0
     fca:	4b59      	ldr	r3, [pc, #356]	; (1130 <_i2c_master_set_config+0x364>)
     fcc:	6a38      	ldr	r0, [r7, #32]
     fce:	4798      	blx	r3
     fd0:	6038      	str	r0, [r7, #0]
     fd2:	6079      	str	r1, [r7, #4]
     fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fd6:	69ba      	ldr	r2, [r7, #24]
     fd8:	435a      	muls	r2, r3
     fda:	4b55      	ldr	r3, [pc, #340]	; (1130 <_i2c_master_set_config+0x364>)
     fdc:	1c10      	adds	r0, r2, #0
     fde:	4798      	blx	r3
     fe0:	1c02      	adds	r2, r0, #0
     fe2:	1c0b      	adds	r3, r1, #0
     fe4:	4c53      	ldr	r4, [pc, #332]	; (1134 <_i2c_master_set_config+0x368>)
     fe6:	1c10      	adds	r0, r2, #0
     fe8:	1c19      	adds	r1, r3, #0
     fea:	4a53      	ldr	r2, [pc, #332]	; (1138 <_i2c_master_set_config+0x36c>)
     fec:	4b53      	ldr	r3, [pc, #332]	; (113c <_i2c_master_set_config+0x370>)
     fee:	47a0      	blx	r4
     ff0:	1c03      	adds	r3, r0, #0
     ff2:	1c0c      	adds	r4, r1, #0
     ff4:	1c1a      	adds	r2, r3, #0
     ff6:	1c23      	adds	r3, r4, #0
     ff8:	4c51      	ldr	r4, [pc, #324]	; (1140 <_i2c_master_set_config+0x374>)
     ffa:	1c10      	adds	r0, r2, #0
     ffc:	1c19      	adds	r1, r3, #0
     ffe:	2200      	movs	r2, #0
    1000:	4b50      	ldr	r3, [pc, #320]	; (1144 <_i2c_master_set_config+0x378>)
    1002:	47a0      	blx	r4
    1004:	1c03      	adds	r3, r0, #0
    1006:	1c0c      	adds	r4, r1, #0
    1008:	1c1a      	adds	r2, r3, #0
    100a:	1c23      	adds	r3, r4, #0
    100c:	4c49      	ldr	r4, [pc, #292]	; (1134 <_i2c_master_set_config+0x368>)
    100e:	6838      	ldr	r0, [r7, #0]
    1010:	6879      	ldr	r1, [r7, #4]
    1012:	47a0      	blx	r4
    1014:	1c03      	adds	r3, r0, #0
    1016:	1c0c      	adds	r4, r1, #0
    1018:	1c1a      	adds	r2, r3, #0
    101a:	1c23      	adds	r3, r4, #0
    101c:	4c4a      	ldr	r4, [pc, #296]	; (1148 <_i2c_master_set_config+0x37c>)
    101e:	1c28      	adds	r0, r5, #0
    1020:	1c31      	adds	r1, r6, #0
    1022:	47a0      	blx	r4
    1024:	1c03      	adds	r3, r0, #0
    1026:	1c0c      	adds	r4, r1, #0
    1028:	1c1d      	adds	r5, r3, #0
    102a:	1c26      	adds	r6, r4, #0
    102c:	6a3b      	ldr	r3, [r7, #32]
    102e:	005a      	lsls	r2, r3, #1
    1030:	4b3f      	ldr	r3, [pc, #252]	; (1130 <_i2c_master_set_config+0x364>)
    1032:	1c10      	adds	r0, r2, #0
    1034:	4798      	blx	r3
    1036:	1c02      	adds	r2, r0, #0
    1038:	1c0b      	adds	r3, r1, #0
    103a:	4c41      	ldr	r4, [pc, #260]	; (1140 <_i2c_master_set_config+0x374>)
    103c:	1c28      	adds	r0, r5, #0
    103e:	1c31      	adds	r1, r6, #0
    1040:	47a0      	blx	r4
    1042:	1c03      	adds	r3, r0, #0
    1044:	1c0c      	adds	r4, r1, #0
    1046:	1c1a      	adds	r2, r3, #0
    1048:	1c23      	adds	r3, r4, #0
    104a:	4c3f      	ldr	r4, [pc, #252]	; (1148 <_i2c_master_set_config+0x37c>)
    104c:	1c10      	adds	r0, r2, #0
    104e:	1c19      	adds	r1, r3, #0
    1050:	2200      	movs	r2, #0
    1052:	4b3e      	ldr	r3, [pc, #248]	; (114c <_i2c_master_set_config+0x380>)
    1054:	47a0      	blx	r4
    1056:	1c03      	adds	r3, r0, #0
    1058:	1c0c      	adds	r4, r1, #0
    105a:	1c1d      	adds	r5, r3, #0
    105c:	1c26      	adds	r6, r4, #0
    105e:	6a3b      	ldr	r3, [r7, #32]
    1060:	005a      	lsls	r2, r3, #1
    1062:	4b33      	ldr	r3, [pc, #204]	; (1130 <_i2c_master_set_config+0x364>)
    1064:	1c10      	adds	r0, r2, #0
    1066:	4798      	blx	r3
    1068:	1c02      	adds	r2, r0, #0
    106a:	1c0b      	adds	r3, r1, #0
    106c:	4c38      	ldr	r4, [pc, #224]	; (1150 <_i2c_master_set_config+0x384>)
    106e:	1c28      	adds	r0, r5, #0
    1070:	1c31      	adds	r1, r6, #0
    1072:	47a0      	blx	r4
    1074:	1c03      	adds	r3, r0, #0
    1076:	1c0c      	adds	r4, r1, #0
    1078:	1c19      	adds	r1, r3, #0
    107a:	1c22      	adds	r2, r4, #0
    107c:	4b35      	ldr	r3, [pc, #212]	; (1154 <_i2c_master_set_config+0x388>)
    107e:	1c08      	adds	r0, r1, #0
    1080:	1c11      	adds	r1, r2, #0
    1082:	4798      	blx	r3
    1084:	1c03      	adds	r3, r0, #0
    1086:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	689a      	ldr	r2, [r3, #8]
    108c:	2380      	movs	r3, #128	; 0x80
    108e:	049b      	lsls	r3, r3, #18
    1090:	429a      	cmp	r2, r3
    1092:	d173      	bne.n	117c <_i2c_master_set_config+0x3b0>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1094:	4b26      	ldr	r3, [pc, #152]	; (1130 <_i2c_master_set_config+0x364>)
    1096:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1098:	4798      	blx	r3
    109a:	1c02      	adds	r2, r0, #0
    109c:	1c0b      	adds	r3, r1, #0
    109e:	4c28      	ldr	r4, [pc, #160]	; (1140 <_i2c_master_set_config+0x374>)
    10a0:	1c10      	adds	r0, r2, #0
    10a2:	1c19      	adds	r1, r3, #0
    10a4:	47a0      	blx	r4
    10a6:	1c03      	adds	r3, r0, #0
    10a8:	1c0c      	adds	r4, r1, #0
    10aa:	1c1d      	adds	r5, r3, #0
    10ac:	1c26      	adds	r6, r4, #0
    10ae:	4b20      	ldr	r3, [pc, #128]	; (1130 <_i2c_master_set_config+0x364>)
    10b0:	69f8      	ldr	r0, [r7, #28]
    10b2:	4798      	blx	r3
    10b4:	1c02      	adds	r2, r0, #0
    10b6:	1c0b      	adds	r3, r1, #0
    10b8:	4c1e      	ldr	r4, [pc, #120]	; (1134 <_i2c_master_set_config+0x368>)
    10ba:	1c10      	adds	r0, r2, #0
    10bc:	1c19      	adds	r1, r3, #0
    10be:	2200      	movs	r2, #0
    10c0:	4b25      	ldr	r3, [pc, #148]	; (1158 <_i2c_master_set_config+0x38c>)
    10c2:	47a0      	blx	r4
    10c4:	1c03      	adds	r3, r0, #0
    10c6:	1c0c      	adds	r4, r1, #0
    10c8:	1c1a      	adds	r2, r3, #0
    10ca:	1c23      	adds	r3, r4, #0
    10cc:	4c20      	ldr	r4, [pc, #128]	; (1150 <_i2c_master_set_config+0x384>)
    10ce:	1c28      	adds	r0, r5, #0
    10d0:	1c31      	adds	r1, r6, #0
    10d2:	47a0      	blx	r4
    10d4:	1c03      	adds	r3, r0, #0
    10d6:	1c0c      	adds	r4, r1, #0
    10d8:	1c1a      	adds	r2, r3, #0
    10da:	1c23      	adds	r3, r4, #0
    10dc:	4c1a      	ldr	r4, [pc, #104]	; (1148 <_i2c_master_set_config+0x37c>)
    10de:	1c10      	adds	r0, r2, #0
    10e0:	1c19      	adds	r1, r3, #0
    10e2:	2200      	movs	r2, #0
    10e4:	4b19      	ldr	r3, [pc, #100]	; (114c <_i2c_master_set_config+0x380>)
    10e6:	47a0      	blx	r4
    10e8:	1c03      	adds	r3, r0, #0
    10ea:	1c0c      	adds	r4, r1, #0
    10ec:	1c19      	adds	r1, r3, #0
    10ee:	1c22      	adds	r2, r4, #0
    10f0:	4b18      	ldr	r3, [pc, #96]	; (1154 <_i2c_master_set_config+0x388>)
    10f2:	1c08      	adds	r0, r1, #0
    10f4:	1c11      	adds	r1, r2, #0
    10f6:	4798      	blx	r3
    10f8:	1c03      	adds	r3, r0, #0
    10fa:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    10fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    10fe:	2b00      	cmp	r3, #0
    1100:	d02e      	beq.n	1160 <_i2c_master_set_config+0x394>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1102:	4b16      	ldr	r3, [pc, #88]	; (115c <_i2c_master_set_config+0x390>)
    1104:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1106:	69f9      	ldr	r1, [r7, #28]
    1108:	4798      	blx	r3
    110a:	1c03      	adds	r3, r0, #0
    110c:	1e9a      	subs	r2, r3, #2
    110e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1110:	1ad3      	subs	r3, r2, r3
    1112:	64bb      	str	r3, [r7, #72]	; 0x48
    1114:	e032      	b.n	117c <_i2c_master_set_config+0x3b0>
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	00002f31 	.word	0x00002f31
    111c:	00000d41 	.word	0x00000d41
    1120:	00002d75 	.word	0x00002d75
    1124:	00003ded 	.word	0x00003ded
    1128:	00000d69 	.word	0x00000d69
    112c:	00003c25 	.word	0x00003c25
    1130:	00007e71 	.word	0x00007e71
    1134:	000071dd 	.word	0x000071dd
    1138:	e826d695 	.word	0xe826d695
    113c:	3e112e0b 	.word	0x3e112e0b
    1140:	00006545 	.word	0x00006545
    1144:	40240000 	.word	0x40240000
    1148:	00007711 	.word	0x00007711
    114c:	3ff00000 	.word	0x3ff00000
    1150:	00006b95 	.word	0x00006b95
    1154:	00007e05 	.word	0x00007e05
    1158:	40080000 	.word	0x40080000
    115c:	00006241 	.word	0x00006241
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1160:	69fb      	ldr	r3, [r7, #28]
    1162:	005a      	lsls	r2, r3, #1
    1164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1166:	18d3      	adds	r3, r2, r3
    1168:	1e59      	subs	r1, r3, #1
    116a:	69fb      	ldr	r3, [r7, #28]
    116c:	005a      	lsls	r2, r3, #1
    116e:	4b1d      	ldr	r3, [pc, #116]	; (11e4 <_i2c_master_set_config+0x418>)
    1170:	1c08      	adds	r0, r1, #0
    1172:	1c11      	adds	r1, r2, #0
    1174:	4798      	blx	r3
    1176:	1c03      	adds	r3, r0, #0
    1178:	3b01      	subs	r3, #1
    117a:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    117e:	2bff      	cmp	r3, #255	; 0xff
    1180:	dc08      	bgt.n	1194 <_i2c_master_set_config+0x3c8>
    1182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1184:	2b00      	cmp	r3, #0
    1186:	db05      	blt.n	1194 <_i2c_master_set_config+0x3c8>
    1188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    118a:	2bff      	cmp	r3, #255	; 0xff
    118c:	dc02      	bgt.n	1194 <_i2c_master_set_config+0x3c8>
    118e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1190:	2b00      	cmp	r3, #0
    1192:	da06      	bge.n	11a2 <_i2c_master_set_config+0x3d6>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1194:	233b      	movs	r3, #59	; 0x3b
    1196:	2208      	movs	r2, #8
    1198:	4694      	mov	ip, r2
    119a:	44bc      	add	ip, r7
    119c:	4463      	add	r3, ip
    119e:	2240      	movs	r2, #64	; 0x40
    11a0:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11a2:	233b      	movs	r3, #59	; 0x3b
    11a4:	2208      	movs	r2, #8
    11a6:	4694      	mov	ip, r2
    11a8:	44bc      	add	ip, r7
    11aa:	4463      	add	r3, ip
    11ac:	781b      	ldrb	r3, [r3, #0]
    11ae:	2b40      	cmp	r3, #64	; 0x40
    11b0:	d00e      	beq.n	11d0 <_i2c_master_set_config+0x404>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b4:	22ff      	movs	r2, #255	; 0xff
    11b6:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11ba:	041b      	lsls	r3, r3, #16
    11bc:	1c19      	adds	r1, r3, #0
    11be:	23ff      	movs	r3, #255	; 0xff
    11c0:	041b      	lsls	r3, r3, #16
    11c2:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11c4:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    11c8:	0612      	lsls	r2, r2, #24
    11ca:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11ce:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    11d0:	233b      	movs	r3, #59	; 0x3b
    11d2:	2208      	movs	r2, #8
    11d4:	4694      	mov	ip, r2
    11d6:	44bc      	add	ip, r7
    11d8:	4463      	add	r3, ip
    11da:	781b      	ldrb	r3, [r3, #0]
}
    11dc:	1c18      	adds	r0, r3, #0
    11de:	46bd      	mov	sp, r7
    11e0:	b015      	add	sp, #84	; 0x54
    11e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e4:	00006241 	.word	0x00006241

000011e8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    11e8:	b590      	push	{r4, r7, lr}
    11ea:	b08b      	sub	sp, #44	; 0x2c
    11ec:	af00      	add	r7, sp, #0
    11ee:	60f8      	str	r0, [r7, #12]
    11f0:	60b9      	str	r1, [r7, #8]
    11f2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    11f4:	68fb      	ldr	r3, [r7, #12]
    11f6:	68ba      	ldr	r2, [r7, #8]
    11f8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11fa:	68fb      	ldr	r3, [r7, #12]
    11fc:	681b      	ldr	r3, [r3, #0]
    11fe:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	1c18      	adds	r0, r3, #0
    1206:	4b3b      	ldr	r3, [pc, #236]	; (12f4 <i2c_master_init+0x10c>)
    1208:	4798      	blx	r3
    120a:	1c03      	adds	r3, r0, #0
    120c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    120e:	6a3b      	ldr	r3, [r7, #32]
    1210:	3302      	adds	r3, #2
    1212:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1214:	6a3b      	ldr	r3, [r7, #32]
    1216:	3314      	adds	r3, #20
    1218:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    121a:	69fb      	ldr	r3, [r7, #28]
    121c:	2201      	movs	r2, #1
    121e:	409a      	lsls	r2, r3
    1220:	1c13      	adds	r3, r2, #0
    1222:	2002      	movs	r0, #2
    1224:	1c19      	adds	r1, r3, #0
    1226:	4b34      	ldr	r3, [pc, #208]	; (12f8 <i2c_master_init+0x110>)
    1228:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    122a:	2314      	movs	r3, #20
    122c:	18fb      	adds	r3, r7, r3
    122e:	1c18      	adds	r0, r3, #0
    1230:	4b32      	ldr	r3, [pc, #200]	; (12fc <i2c_master_init+0x114>)
    1232:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	7b1a      	ldrb	r2, [r3, #12]
    1238:	2314      	movs	r3, #20
    123a:	18fb      	adds	r3, r7, r3
    123c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    123e:	69bb      	ldr	r3, [r7, #24]
    1240:	b2da      	uxtb	r2, r3
    1242:	2314      	movs	r3, #20
    1244:	18fb      	adds	r3, r7, r3
    1246:	1c10      	adds	r0, r2, #0
    1248:	1c19      	adds	r1, r3, #0
    124a:	4b2d      	ldr	r3, [pc, #180]	; (1300 <i2c_master_init+0x118>)
    124c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    124e:	69bb      	ldr	r3, [r7, #24]
    1250:	b2db      	uxtb	r3, r3
    1252:	1c18      	adds	r0, r3, #0
    1254:	4b2b      	ldr	r3, [pc, #172]	; (1304 <i2c_master_init+0x11c>)
    1256:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	7b1b      	ldrb	r3, [r3, #12]
    125c:	1c18      	adds	r0, r3, #0
    125e:	2100      	movs	r1, #0
    1260:	4b29      	ldr	r3, [pc, #164]	; (1308 <i2c_master_init+0x120>)
    1262:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	2202      	movs	r2, #2
    126a:	4013      	ands	r3, r2
    126c:	d001      	beq.n	1272 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    126e:	231c      	movs	r3, #28
    1270:	e03b      	b.n	12ea <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1274:	681b      	ldr	r3, [r3, #0]
    1276:	2201      	movs	r2, #1
    1278:	4013      	ands	r3, r2
    127a:	d001      	beq.n	1280 <i2c_master_init+0x98>
		return STATUS_BUSY;
    127c:	2305      	movs	r3, #5
    127e:	e034      	b.n	12ea <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	2217      	movs	r2, #23
    1286:	18bc      	adds	r4, r7, r2
    1288:	1c18      	adds	r0, r3, #0
    128a:	4b1a      	ldr	r3, [pc, #104]	; (12f4 <i2c_master_init+0x10c>)
    128c:	4798      	blx	r3
    128e:	1c03      	adds	r3, r0, #0
    1290:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1292:	2317      	movs	r3, #23
    1294:	18fb      	adds	r3, r7, r3
    1296:	781a      	ldrb	r2, [r3, #0]
    1298:	4b1c      	ldr	r3, [pc, #112]	; (130c <i2c_master_init+0x124>)
    129a:	1c10      	adds	r0, r2, #0
    129c:	1c19      	adds	r1, r3, #0
    129e:	4b1c      	ldr	r3, [pc, #112]	; (1310 <i2c_master_init+0x128>)
    12a0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12a2:	2317      	movs	r3, #23
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	781a      	ldrb	r2, [r3, #0]
    12a8:	4b1a      	ldr	r3, [pc, #104]	; (1314 <i2c_master_init+0x12c>)
    12aa:	0092      	lsls	r2, r2, #2
    12ac:	68f9      	ldr	r1, [r7, #12]
    12ae:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	2200      	movs	r2, #0
    12b4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2200      	movs	r2, #0
    12ba:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	2200      	movs	r2, #0
    12c0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2200      	movs	r2, #0
    12c6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	2225      	movs	r2, #37	; 0x25
    12cc:	2100      	movs	r1, #0
    12ce:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    12d0:	68fb      	ldr	r3, [r7, #12]
    12d2:	2200      	movs	r2, #0
    12d4:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    12d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12d8:	2214      	movs	r2, #20
    12da:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    12dc:	68fa      	ldr	r2, [r7, #12]
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	1c10      	adds	r0, r2, #0
    12e2:	1c19      	adds	r1, r3, #0
    12e4:	4b0c      	ldr	r3, [pc, #48]	; (1318 <i2c_master_init+0x130>)
    12e6:	4798      	blx	r3
    12e8:	1c03      	adds	r3, r0, #0
}
    12ea:	1c18      	adds	r0, r3, #0
    12ec:	46bd      	mov	sp, r7
    12ee:	b00b      	add	sp, #44	; 0x2c
    12f0:	bd90      	pop	{r4, r7, pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	00002f31 	.word	0x00002f31
    12f8:	00000ce5 	.word	0x00000ce5
    12fc:	00000cd1 	.word	0x00000cd1
    1300:	00003b01 	.word	0x00003b01
    1304:	00003b45 	.word	0x00003b45
    1308:	00002ce9 	.word	0x00002ce9
    130c:	00001b09 	.word	0x00001b09
    1310:	00002f91 	.word	0x00002f91
    1314:	200000c4 	.word	0x200000c4
    1318:	00000dcd 	.word	0x00000dcd

0000131c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    131c:	b580      	push	{r7, lr}
    131e:	b084      	sub	sp, #16
    1320:	af00      	add	r7, sp, #0
    1322:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	7e1b      	ldrb	r3, [r3, #24]
    132e:	b2db      	uxtb	r3, r3
    1330:	1c1a      	adds	r2, r3, #0
    1332:	2302      	movs	r3, #2
    1334:	4013      	ands	r3, r2
    1336:	d00b      	beq.n	1350 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	2202      	movs	r2, #2
    133c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	8b5b      	ldrh	r3, [r3, #26]
    1342:	b29b      	uxth	r3, r3
    1344:	1c1a      	adds	r2, r3, #0
    1346:	2302      	movs	r3, #2
    1348:	4013      	ands	r3, r2
    134a:	d011      	beq.n	1370 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    134c:	2341      	movs	r3, #65	; 0x41
    134e:	e010      	b.n	1372 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1350:	68fb      	ldr	r3, [r7, #12]
    1352:	8b5b      	ldrh	r3, [r3, #26]
    1354:	b29b      	uxth	r3, r3
    1356:	1c1a      	adds	r2, r3, #0
    1358:	2304      	movs	r3, #4
    135a:	4013      	ands	r3, r2
    135c:	d008      	beq.n	1370 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	685b      	ldr	r3, [r3, #4]
    1362:	22c0      	movs	r2, #192	; 0xc0
    1364:	0292      	lsls	r2, r2, #10
    1366:	431a      	orrs	r2, r3
    1368:	68fb      	ldr	r3, [r7, #12]
    136a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    136c:	2318      	movs	r3, #24
    136e:	e000      	b.n	1372 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1370:	2300      	movs	r3, #0
}
    1372:	1c18      	adds	r0, r3, #0
    1374:	46bd      	mov	sp, r7
    1376:	b004      	add	sp, #16
    1378:	bd80      	pop	{r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)

0000137c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    137c:	b580      	push	{r7, lr}
    137e:	b084      	sub	sp, #16
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    138a:	230e      	movs	r3, #14
    138c:	18fb      	adds	r3, r7, r3
    138e:	2200      	movs	r2, #0
    1390:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1392:	e00f      	b.n	13b4 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1394:	230e      	movs	r3, #14
    1396:	18fb      	adds	r3, r7, r3
    1398:	220e      	movs	r2, #14
    139a:	18ba      	adds	r2, r7, r2
    139c:	8812      	ldrh	r2, [r2, #0]
    139e:	3201      	adds	r2, #1
    13a0:	801a      	strh	r2, [r3, #0]
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	891b      	ldrh	r3, [r3, #8]
    13a6:	220e      	movs	r2, #14
    13a8:	18ba      	adds	r2, r7, r2
    13aa:	8812      	ldrh	r2, [r2, #0]
    13ac:	429a      	cmp	r2, r3
    13ae:	d301      	bcc.n	13b4 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    13b0:	2312      	movs	r3, #18
    13b2:	e00e      	b.n	13d2 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13b4:	68bb      	ldr	r3, [r7, #8]
    13b6:	7e1b      	ldrb	r3, [r3, #24]
    13b8:	b2db      	uxtb	r3, r3
    13ba:	1c1a      	adds	r2, r3, #0
    13bc:	2301      	movs	r3, #1
    13be:	4013      	ands	r3, r2
    13c0:	d106      	bne.n	13d0 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13c2:	68bb      	ldr	r3, [r7, #8]
    13c4:	7e1b      	ldrb	r3, [r3, #24]
    13c6:	b2db      	uxtb	r3, r3
    13c8:	1c1a      	adds	r2, r3, #0
    13ca:	2302      	movs	r3, #2
    13cc:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13ce:	d0e1      	beq.n	1394 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    13d0:	2300      	movs	r3, #0
}
    13d2:	1c18      	adds	r0, r3, #0
    13d4:	46bd      	mov	sp, r7
    13d6:	b004      	add	sp, #16
    13d8:	bd80      	pop	{r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)

000013dc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13dc:	b590      	push	{r4, r7, lr}
    13de:	b085      	sub	sp, #20
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
    13e4:	1c0a      	adds	r2, r1, #0
    13e6:	1cfb      	adds	r3, r7, #3
    13e8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	681b      	ldr	r3, [r3, #0]
    13ee:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	685b      	ldr	r3, [r3, #4]
    13f4:	2280      	movs	r2, #128	; 0x80
    13f6:	02d2      	lsls	r2, r2, #11
    13f8:	431a      	orrs	r2, r3
    13fa:	68fb      	ldr	r3, [r7, #12]
    13fc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13fe:	1cfb      	adds	r3, r7, #3
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1406:	230b      	movs	r3, #11
    1408:	18fc      	adds	r4, r7, r3
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	1c18      	adds	r0, r3, #0
    140e:	4b07      	ldr	r3, [pc, #28]	; (142c <_i2c_master_send_hs_master_code+0x50>)
    1410:	4798      	blx	r3
    1412:	1c03      	adds	r3, r0, #0
    1414:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1416:	68fb      	ldr	r3, [r7, #12]
    1418:	2201      	movs	r2, #1
    141a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    141c:	230b      	movs	r3, #11
    141e:	18fb      	adds	r3, r7, r3
    1420:	781b      	ldrb	r3, [r3, #0]
}
    1422:	1c18      	adds	r0, r3, #0
    1424:	46bd      	mov	sp, r7
    1426:	b005      	add	sp, #20
    1428:	bd90      	pop	{r4, r7, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	0000137d 	.word	0x0000137d

00001430 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1430:	b590      	push	{r4, r7, lr}
    1432:	b087      	sub	sp, #28
    1434:	af00      	add	r7, sp, #0
    1436:	6078      	str	r0, [r7, #4]
    1438:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	681b      	ldr	r3, [r3, #0]
    143e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1440:	2314      	movs	r3, #20
    1442:	18fb      	adds	r3, r7, r3
    1444:	683a      	ldr	r2, [r7, #0]
    1446:	8852      	ldrh	r2, [r2, #2]
    1448:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    144a:	2312      	movs	r3, #18
    144c:	18fb      	adds	r3, r7, r3
    144e:	2200      	movs	r2, #0
    1450:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	0edb      	lsrs	r3, r3, #27
    1458:	1c1a      	adds	r2, r3, #0
    145a:	2301      	movs	r3, #1
    145c:	4013      	ands	r3, r2
    145e:	b2db      	uxtb	r3, r3
    1460:	1c1a      	adds	r2, r3, #0
    1462:	230b      	movs	r3, #11
    1464:	18fb      	adds	r3, r7, r3
    1466:	1e51      	subs	r1, r2, #1
    1468:	418a      	sbcs	r2, r1
    146a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    146c:	683b      	ldr	r3, [r7, #0]
    146e:	7a5b      	ldrb	r3, [r3, #9]
    1470:	2b00      	cmp	r3, #0
    1472:	d006      	beq.n	1482 <_i2c_master_read_packet+0x52>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1474:	683b      	ldr	r3, [r7, #0]
    1476:	7a9b      	ldrb	r3, [r3, #10]
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	1c10      	adds	r0, r2, #0
    147c:	1c19      	adds	r1, r3, #0
    147e:	4b84      	ldr	r3, [pc, #528]	; (1690 <_i2c_master_read_packet+0x260>)
    1480:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	685b      	ldr	r3, [r3, #4]
    1486:	4a83      	ldr	r2, [pc, #524]	; (1694 <_i2c_master_read_packet+0x264>)
    1488:	401a      	ands	r2, r3
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    148e:	683b      	ldr	r3, [r7, #0]
    1490:	7a1b      	ldrb	r3, [r3, #8]
    1492:	2b00      	cmp	r3, #0
    1494:	d042      	beq.n	151c <_i2c_master_read_packet+0xec>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1496:	683b      	ldr	r3, [r7, #0]
    1498:	881b      	ldrh	r3, [r3, #0]
    149a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    149c:	683b      	ldr	r3, [r7, #0]
    149e:	7a5b      	ldrb	r3, [r3, #9]
    14a0:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    14a2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14a4:	1c1a      	adds	r2, r3, #0
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	021b      	lsls	r3, r3, #8
    14aa:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    14ac:	68fb      	ldr	r3, [r7, #12]
    14ae:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    14b0:	2317      	movs	r3, #23
    14b2:	18fc      	adds	r4, r7, r3
    14b4:	687b      	ldr	r3, [r7, #4]
    14b6:	1c18      	adds	r0, r3, #0
    14b8:	4b77      	ldr	r3, [pc, #476]	; (1698 <_i2c_master_read_packet+0x268>)
    14ba:	4798      	blx	r3
    14bc:	1c03      	adds	r3, r0, #0
    14be:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14c0:	68fb      	ldr	r3, [r7, #12]
    14c2:	685b      	ldr	r3, [r3, #4]
    14c4:	4a73      	ldr	r2, [pc, #460]	; (1694 <_i2c_master_read_packet+0x264>)
    14c6:	401a      	ands	r2, r3
    14c8:	68fb      	ldr	r3, [r7, #12]
    14ca:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    14cc:	2317      	movs	r3, #23
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d107      	bne.n	14e6 <_i2c_master_read_packet+0xb6>
			tmp_status = _i2c_master_address_response(module);
    14d6:	2317      	movs	r3, #23
    14d8:	18fc      	adds	r4, r7, r3
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	1c18      	adds	r0, r3, #0
    14de:	4b6f      	ldr	r3, [pc, #444]	; (169c <_i2c_master_read_packet+0x26c>)
    14e0:	4798      	blx	r3
    14e2:	1c03      	adds	r3, r0, #0
    14e4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    14e6:	2317      	movs	r3, #23
    14e8:	18fb      	adds	r3, r7, r3
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d111      	bne.n	1514 <_i2c_master_read_packet+0xe4>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	881b      	ldrh	r3, [r3, #0]
    14f4:	0a1b      	lsrs	r3, r3, #8
    14f6:	b29b      	uxth	r3, r3
    14f8:	2278      	movs	r2, #120	; 0x78
    14fa:	4313      	orrs	r3, r2
    14fc:	b29b      	uxth	r3, r3
    14fe:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1500:	683b      	ldr	r3, [r7, #0]
    1502:	7a5b      	ldrb	r3, [r3, #9]
    1504:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1506:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1508:	2201      	movs	r2, #1
    150a:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    150c:	1c1a      	adds	r2, r3, #0
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	625a      	str	r2, [r3, #36]	; 0x24
    1512:	e00f      	b.n	1534 <_i2c_master_read_packet+0x104>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1514:	2317      	movs	r3, #23
    1516:	18fb      	adds	r3, r7, r3
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	e0b5      	b.n	1688 <_i2c_master_read_packet+0x258>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    151c:	683b      	ldr	r3, [r7, #0]
    151e:	881b      	ldrh	r3, [r3, #0]
    1520:	005b      	lsls	r3, r3, #1
    1522:	2201      	movs	r2, #1
    1524:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1526:	683b      	ldr	r3, [r7, #0]
    1528:	7a5b      	ldrb	r3, [r3, #9]
    152a:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    152c:	4313      	orrs	r3, r2
    152e:	1c1a      	adds	r2, r3, #0
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1534:	2317      	movs	r3, #23
    1536:	18fc      	adds	r4, r7, r3
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	1c18      	adds	r0, r3, #0
    153c:	4b56      	ldr	r3, [pc, #344]	; (1698 <_i2c_master_read_packet+0x268>)
    153e:	4798      	blx	r3
    1540:	1c03      	adds	r3, r0, #0
    1542:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1544:	230b      	movs	r3, #11
    1546:	18fb      	adds	r3, r7, r3
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	2b00      	cmp	r3, #0
    154c:	d00b      	beq.n	1566 <_i2c_master_read_packet+0x136>
    154e:	683b      	ldr	r3, [r7, #0]
    1550:	885b      	ldrh	r3, [r3, #2]
    1552:	2b01      	cmp	r3, #1
    1554:	d107      	bne.n	1566 <_i2c_master_read_packet+0x136>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	685b      	ldr	r3, [r3, #4]
    155a:	2280      	movs	r2, #128	; 0x80
    155c:	02d2      	lsls	r2, r2, #11
    155e:	431a      	orrs	r2, r3
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	605a      	str	r2, [r3, #4]
    1564:	e005      	b.n	1572 <_i2c_master_read_packet+0x142>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	685b      	ldr	r3, [r3, #4]
    156a:	4a4a      	ldr	r2, [pc, #296]	; (1694 <_i2c_master_read_packet+0x264>)
    156c:	401a      	ands	r2, r3
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1572:	2317      	movs	r3, #23
    1574:	18fb      	adds	r3, r7, r3
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d107      	bne.n	158c <_i2c_master_read_packet+0x15c>
		tmp_status = _i2c_master_address_response(module);
    157c:	2317      	movs	r3, #23
    157e:	18fc      	adds	r4, r7, r3
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	1c18      	adds	r0, r3, #0
    1584:	4b45      	ldr	r3, [pc, #276]	; (169c <_i2c_master_read_packet+0x26c>)
    1586:	4798      	blx	r3
    1588:	1c03      	adds	r3, r0, #0
    158a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    158c:	2317      	movs	r3, #23
    158e:	18fb      	adds	r3, r7, r3
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d000      	beq.n	1598 <_i2c_master_read_packet+0x168>
    1596:	e074      	b.n	1682 <_i2c_master_read_packet+0x252>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1598:	e04c      	b.n	1634 <_i2c_master_read_packet+0x204>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	8b5b      	ldrh	r3, [r3, #26]
    159e:	b29b      	uxth	r3, r3
    15a0:	1c1a      	adds	r2, r3, #0
    15a2:	2320      	movs	r3, #32
    15a4:	4013      	ands	r3, r2
    15a6:	d101      	bne.n	15ac <_i2c_master_read_packet+0x17c>
				return STATUS_ERR_PACKET_COLLISION;
    15a8:	2341      	movs	r3, #65	; 0x41
    15aa:	e06d      	b.n	1688 <_i2c_master_read_packet+0x258>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	7adb      	ldrb	r3, [r3, #11]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d01e      	beq.n	15f2 <_i2c_master_read_packet+0x1c2>
    15b4:	230b      	movs	r3, #11
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	781b      	ldrb	r3, [r3, #0]
    15ba:	2201      	movs	r2, #1
    15bc:	4053      	eors	r3, r2
    15be:	b2db      	uxtb	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	d004      	beq.n	15ce <_i2c_master_read_packet+0x19e>
    15c4:	2314      	movs	r3, #20
    15c6:	18fb      	adds	r3, r7, r3
    15c8:	881b      	ldrh	r3, [r3, #0]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d009      	beq.n	15e2 <_i2c_master_read_packet+0x1b2>
    15ce:	230b      	movs	r3, #11
    15d0:	18fb      	adds	r3, r7, r3
    15d2:	781b      	ldrb	r3, [r3, #0]
    15d4:	2b00      	cmp	r3, #0
    15d6:	d00c      	beq.n	15f2 <_i2c_master_read_packet+0x1c2>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    15d8:	2314      	movs	r3, #20
    15da:	18fb      	adds	r3, r7, r3
    15dc:	881b      	ldrh	r3, [r3, #0]
    15de:	2b01      	cmp	r3, #1
    15e0:	d107      	bne.n	15f2 <_i2c_master_read_packet+0x1c2>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	685b      	ldr	r3, [r3, #4]
    15e6:	2280      	movs	r2, #128	; 0x80
    15e8:	02d2      	lsls	r2, r2, #11
    15ea:	431a      	orrs	r2, r3
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	605a      	str	r2, [r3, #4]
    15f0:	e01a      	b.n	1628 <_i2c_master_read_packet+0x1f8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    15f2:	687b      	ldr	r3, [r7, #4]
    15f4:	1c18      	adds	r0, r3, #0
    15f6:	4b2a      	ldr	r3, [pc, #168]	; (16a0 <_i2c_master_read_packet+0x270>)
    15f8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    15fa:	683b      	ldr	r3, [r7, #0]
    15fc:	685a      	ldr	r2, [r3, #4]
    15fe:	2312      	movs	r3, #18
    1600:	18fb      	adds	r3, r7, r3
    1602:	881b      	ldrh	r3, [r3, #0]
    1604:	2112      	movs	r1, #18
    1606:	1879      	adds	r1, r7, r1
    1608:	1c58      	adds	r0, r3, #1
    160a:	8008      	strh	r0, [r1, #0]
    160c:	18d3      	adds	r3, r2, r3
    160e:	68fa      	ldr	r2, [r7, #12]
    1610:	2128      	movs	r1, #40	; 0x28
    1612:	5c52      	ldrb	r2, [r2, r1]
    1614:	b2d2      	uxtb	r2, r2
    1616:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1618:	2317      	movs	r3, #23
    161a:	18fc      	adds	r4, r7, r3
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	1c18      	adds	r0, r3, #0
    1620:	4b1d      	ldr	r3, [pc, #116]	; (1698 <_i2c_master_read_packet+0x268>)
    1622:	4798      	blx	r3
    1624:	1c03      	adds	r3, r0, #0
    1626:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1628:	2317      	movs	r3, #23
    162a:	18fb      	adds	r3, r7, r3
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	2b00      	cmp	r3, #0
    1630:	d000      	beq.n	1634 <_i2c_master_read_packet+0x204>
				break;
    1632:	e008      	b.n	1646 <_i2c_master_read_packet+0x216>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1634:	2314      	movs	r3, #20
    1636:	18fb      	adds	r3, r7, r3
    1638:	881b      	ldrh	r3, [r3, #0]
    163a:	2214      	movs	r2, #20
    163c:	18ba      	adds	r2, r7, r2
    163e:	1e59      	subs	r1, r3, #1
    1640:	8011      	strh	r1, [r2, #0]
    1642:	2b00      	cmp	r3, #0
    1644:	d1a9      	bne.n	159a <_i2c_master_read_packet+0x16a>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	7a9b      	ldrb	r3, [r3, #10]
    164a:	2b00      	cmp	r3, #0
    164c:	d00a      	beq.n	1664 <_i2c_master_read_packet+0x234>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	1c18      	adds	r0, r3, #0
    1652:	4b13      	ldr	r3, [pc, #76]	; (16a0 <_i2c_master_read_packet+0x270>)
    1654:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	685b      	ldr	r3, [r3, #4]
    165a:	22c0      	movs	r2, #192	; 0xc0
    165c:	0292      	lsls	r2, r2, #10
    165e:	431a      	orrs	r2, r3
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	1c18      	adds	r0, r3, #0
    1668:	4b0d      	ldr	r3, [pc, #52]	; (16a0 <_i2c_master_read_packet+0x270>)
    166a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    166c:	683b      	ldr	r3, [r7, #0]
    166e:	685a      	ldr	r2, [r3, #4]
    1670:	2312      	movs	r3, #18
    1672:	18fb      	adds	r3, r7, r3
    1674:	881b      	ldrh	r3, [r3, #0]
    1676:	18d3      	adds	r3, r2, r3
    1678:	68fa      	ldr	r2, [r7, #12]
    167a:	2128      	movs	r1, #40	; 0x28
    167c:	5c52      	ldrb	r2, [r2, r1]
    167e:	b2d2      	uxtb	r2, r2
    1680:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1682:	2317      	movs	r3, #23
    1684:	18fb      	adds	r3, r7, r3
    1686:	781b      	ldrb	r3, [r3, #0]
}
    1688:	1c18      	adds	r0, r3, #0
    168a:	46bd      	mov	sp, r7
    168c:	b007      	add	sp, #28
    168e:	bd90      	pop	{r4, r7, pc}
    1690:	000013dd 	.word	0x000013dd
    1694:	fffbffff 	.word	0xfffbffff
    1698:	0000137d 	.word	0x0000137d
    169c:	0000131d 	.word	0x0000131d
    16a0:	00000dad 	.word	0x00000dad

000016a4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
    16ac:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	8b9b      	ldrh	r3, [r3, #28]
    16b2:	b29b      	uxth	r3, r3
    16b4:	2b00      	cmp	r3, #0
    16b6:	d001      	beq.n	16bc <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    16b8:	2305      	movs	r3, #5
    16ba:	e00c      	b.n	16d6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	2201      	movs	r2, #1
    16c0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	2201      	movs	r2, #1
    16c6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	683b      	ldr	r3, [r7, #0]
    16cc:	1c10      	adds	r0, r2, #0
    16ce:	1c19      	adds	r1, r3, #0
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <i2c_master_read_packet_wait+0x3c>)
    16d2:	4798      	blx	r3
    16d4:	1c03      	adds	r3, r0, #0
}
    16d6:	1c18      	adds	r0, r3, #0
    16d8:	46bd      	mov	sp, r7
    16da:	b002      	add	sp, #8
    16dc:	bd80      	pop	{r7, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	00001431 	.word	0x00001431

000016e4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16e4:	b590      	push	{r4, r7, lr}
    16e6:	b087      	sub	sp, #28
    16e8:	af00      	add	r7, sp, #0
    16ea:	6078      	str	r0, [r7, #4]
    16ec:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	681b      	ldr	r3, [r3, #0]
    16f2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16f4:	2314      	movs	r3, #20
    16f6:	18fb      	adds	r3, r7, r3
    16f8:	683a      	ldr	r2, [r7, #0]
    16fa:	8852      	ldrh	r2, [r2, #2]
    16fc:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	1c18      	adds	r0, r3, #0
    1702:	4b51      	ldr	r3, [pc, #324]	; (1848 <_i2c_master_write_packet+0x164>)
    1704:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1706:	683b      	ldr	r3, [r7, #0]
    1708:	7a5b      	ldrb	r3, [r3, #9]
    170a:	2b00      	cmp	r3, #0
    170c:	d006      	beq.n	171c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    170e:	683b      	ldr	r3, [r7, #0]
    1710:	7a9b      	ldrb	r3, [r3, #10]
    1712:	687a      	ldr	r2, [r7, #4]
    1714:	1c10      	adds	r0, r2, #0
    1716:	1c19      	adds	r1, r3, #0
    1718:	4b4c      	ldr	r3, [pc, #304]	; (184c <_i2c_master_write_packet+0x168>)
    171a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	685b      	ldr	r3, [r3, #4]
    1720:	4a4b      	ldr	r2, [pc, #300]	; (1850 <_i2c_master_write_packet+0x16c>)
    1722:	401a      	ands	r2, r3
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	7a1b      	ldrb	r3, [r3, #8]
    172c:	2b00      	cmp	r3, #0
    172e:	d00d      	beq.n	174c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1736:	683b      	ldr	r3, [r7, #0]
    1738:	7a5b      	ldrb	r3, [r3, #9]
    173a:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    173c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    173e:	1c1a      	adds	r2, r3, #0
    1740:	2380      	movs	r3, #128	; 0x80
    1742:	021b      	lsls	r3, r3, #8
    1744:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	625a      	str	r2, [r3, #36]	; 0x24
    174a:	e009      	b.n	1760 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    174c:	683b      	ldr	r3, [r7, #0]
    174e:	881b      	ldrh	r3, [r3, #0]
    1750:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1752:	683b      	ldr	r3, [r7, #0]
    1754:	7a5b      	ldrb	r3, [r3, #9]
    1756:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1758:	4313      	orrs	r3, r2
    175a:	1c1a      	adds	r2, r3, #0
    175c:	68fb      	ldr	r3, [r7, #12]
    175e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1760:	2317      	movs	r3, #23
    1762:	18fc      	adds	r4, r7, r3
    1764:	687b      	ldr	r3, [r7, #4]
    1766:	1c18      	adds	r0, r3, #0
    1768:	4b3a      	ldr	r3, [pc, #232]	; (1854 <_i2c_master_write_packet+0x170>)
    176a:	4798      	blx	r3
    176c:	1c03      	adds	r3, r0, #0
    176e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1770:	2317      	movs	r3, #23
    1772:	18fb      	adds	r3, r7, r3
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d107      	bne.n	178a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    177a:	2317      	movs	r3, #23
    177c:	18fc      	adds	r4, r7, r3
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	1c18      	adds	r0, r3, #0
    1782:	4b35      	ldr	r3, [pc, #212]	; (1858 <_i2c_master_write_packet+0x174>)
    1784:	4798      	blx	r3
    1786:	1c03      	adds	r3, r0, #0
    1788:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    178a:	2317      	movs	r3, #23
    178c:	18fb      	adds	r3, r7, r3
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d151      	bne.n	1838 <_i2c_master_write_packet+0x154>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1794:	2312      	movs	r3, #18
    1796:	18fb      	adds	r3, r7, r3
    1798:	2200      	movs	r2, #0
    179a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    179c:	e034      	b.n	1808 <_i2c_master_write_packet+0x124>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    179e:	68fb      	ldr	r3, [r7, #12]
    17a0:	8b5b      	ldrh	r3, [r3, #26]
    17a2:	b29b      	uxth	r3, r3
    17a4:	1c1a      	adds	r2, r3, #0
    17a6:	2320      	movs	r3, #32
    17a8:	4013      	ands	r3, r2
    17aa:	d101      	bne.n	17b0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    17ac:	2341      	movs	r3, #65	; 0x41
    17ae:	e046      	b.n	183e <_i2c_master_write_packet+0x15a>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	1c18      	adds	r0, r3, #0
    17b4:	4b24      	ldr	r3, [pc, #144]	; (1848 <_i2c_master_write_packet+0x164>)
    17b6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    17b8:	683b      	ldr	r3, [r7, #0]
    17ba:	685a      	ldr	r2, [r3, #4]
    17bc:	2312      	movs	r3, #18
    17be:	18fb      	adds	r3, r7, r3
    17c0:	881b      	ldrh	r3, [r3, #0]
    17c2:	2112      	movs	r1, #18
    17c4:	1879      	adds	r1, r7, r1
    17c6:	1c58      	adds	r0, r3, #1
    17c8:	8008      	strh	r0, [r1, #0]
    17ca:	18d3      	adds	r3, r2, r3
    17cc:	7819      	ldrb	r1, [r3, #0]
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	2228      	movs	r2, #40	; 0x28
    17d2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17d4:	2317      	movs	r3, #23
    17d6:	18fc      	adds	r4, r7, r3
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	1c18      	adds	r0, r3, #0
    17dc:	4b1d      	ldr	r3, [pc, #116]	; (1854 <_i2c_master_write_packet+0x170>)
    17de:	4798      	blx	r3
    17e0:	1c03      	adds	r3, r0, #0
    17e2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    17e4:	2317      	movs	r3, #23
    17e6:	18fb      	adds	r3, r7, r3
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d000      	beq.n	17f0 <_i2c_master_write_packet+0x10c>
				break;
    17ee:	e014      	b.n	181a <_i2c_master_write_packet+0x136>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	8b5b      	ldrh	r3, [r3, #26]
    17f4:	b29b      	uxth	r3, r3
    17f6:	1c1a      	adds	r2, r3, #0
    17f8:	2304      	movs	r3, #4
    17fa:	4013      	ands	r3, r2
    17fc:	d004      	beq.n	1808 <_i2c_master_write_packet+0x124>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17fe:	2317      	movs	r3, #23
    1800:	18fb      	adds	r3, r7, r3
    1802:	221e      	movs	r2, #30
    1804:	701a      	strb	r2, [r3, #0]
				break;
    1806:	e008      	b.n	181a <_i2c_master_write_packet+0x136>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1808:	2314      	movs	r3, #20
    180a:	18fb      	adds	r3, r7, r3
    180c:	881b      	ldrh	r3, [r3, #0]
    180e:	2214      	movs	r2, #20
    1810:	18ba      	adds	r2, r7, r2
    1812:	1e59      	subs	r1, r3, #1
    1814:	8011      	strh	r1, [r2, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d1c1      	bne.n	179e <_i2c_master_write_packet+0xba>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	7a9b      	ldrb	r3, [r3, #10]
    181e:	2b00      	cmp	r3, #0
    1820:	d00a      	beq.n	1838 <_i2c_master_write_packet+0x154>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	1c18      	adds	r0, r3, #0
    1826:	4b08      	ldr	r3, [pc, #32]	; (1848 <_i2c_master_write_packet+0x164>)
    1828:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    182a:	68fb      	ldr	r3, [r7, #12]
    182c:	685b      	ldr	r3, [r3, #4]
    182e:	22c0      	movs	r2, #192	; 0xc0
    1830:	0292      	lsls	r2, r2, #10
    1832:	431a      	orrs	r2, r3
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1838:	2317      	movs	r3, #23
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
}
    183e:	1c18      	adds	r0, r3, #0
    1840:	46bd      	mov	sp, r7
    1842:	b007      	add	sp, #28
    1844:	bd90      	pop	{r4, r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	00000dad 	.word	0x00000dad
    184c:	000013dd 	.word	0x000013dd
    1850:	fffbffff 	.word	0xfffbffff
    1854:	0000137d 	.word	0x0000137d
    1858:	0000131d 	.word	0x0000131d

0000185c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	8b9b      	ldrh	r3, [r3, #28]
    186a:	b29b      	uxth	r3, r3
    186c:	2b00      	cmp	r3, #0
    186e:	d001      	beq.n	1874 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    1870:	2305      	movs	r3, #5
    1872:	e00c      	b.n	188e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	2201      	movs	r2, #1
    1878:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	2201      	movs	r2, #1
    187e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	683b      	ldr	r3, [r7, #0]
    1884:	1c10      	adds	r0, r2, #0
    1886:	1c19      	adds	r1, r3, #0
    1888:	4b03      	ldr	r3, [pc, #12]	; (1898 <i2c_master_write_packet_wait+0x3c>)
    188a:	4798      	blx	r3
    188c:	1c03      	adds	r3, r0, #0
}
    188e:	1c18      	adds	r0, r3, #0
    1890:	46bd      	mov	sp, r7
    1892:	b002      	add	sp, #8
    1894:	bd80      	pop	{r7, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	000016e5 	.word	0x000016e5

0000189c <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    189c:	b580      	push	{r7, lr}
    189e:	b084      	sub	sp, #16
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    18aa:	68fb      	ldr	r3, [r7, #12]
    18ac:	69db      	ldr	r3, [r3, #28]
    18ae:	2207      	movs	r2, #7
    18b0:	4013      	ands	r3, r2
    18b2:	1e5a      	subs	r2, r3, #1
    18b4:	4193      	sbcs	r3, r2
    18b6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    18b8:	1c18      	adds	r0, r3, #0
    18ba:	46bd      	mov	sp, r7
    18bc:	b004      	add	sp, #16
    18be:	bd80      	pop	{r7, pc}

000018c0 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b082      	sub	sp, #8
    18c4:	af00      	add	r7, sp, #0
    18c6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    18c8:	46c0      	nop			; (mov r8, r8)
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	1c18      	adds	r0, r3, #0
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <_i2c_master_wait_for_sync+0x1c>)
    18d0:	4798      	blx	r3
    18d2:	1e03      	subs	r3, r0, #0
    18d4:	d1f9      	bne.n	18ca <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    18d6:	46bd      	mov	sp, r7
    18d8:	b002      	add	sp, #8
    18da:	bd80      	pop	{r7, pc}
    18dc:	0000189d 	.word	0x0000189d

000018e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    18ee:	68fb      	ldr	r3, [r7, #12]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	0edb      	lsrs	r3, r3, #27
    18f4:	1c1a      	adds	r2, r3, #0
    18f6:	2301      	movs	r3, #1
    18f8:	4013      	ands	r3, r2
    18fa:	b2db      	uxtb	r3, r3
    18fc:	1c1a      	adds	r2, r3, #0
    18fe:	230b      	movs	r3, #11
    1900:	18fb      	adds	r3, r7, r3
    1902:	1e51      	subs	r1, r2, #1
    1904:	418a      	sbcs	r2, r1
    1906:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1908:	2308      	movs	r3, #8
    190a:	18fb      	adds	r3, r7, r3
    190c:	687a      	ldr	r2, [r7, #4]
    190e:	8b52      	ldrh	r2, [r2, #26]
    1910:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	8b9b      	ldrh	r3, [r3, #28]
    1916:	b29a      	uxth	r2, r3
    1918:	2308      	movs	r3, #8
    191a:	18fb      	adds	r3, r7, r3
    191c:	2108      	movs	r1, #8
    191e:	1879      	adds	r1, r7, r1
    1920:	8809      	ldrh	r1, [r1, #0]
    1922:	1a8a      	subs	r2, r1, r2
    1924:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	8b9b      	ldrh	r3, [r3, #28]
    192a:	b29b      	uxth	r3, r3
    192c:	3b01      	subs	r3, #1
    192e:	b29a      	uxth	r2, r3
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1934:	230b      	movs	r3, #11
    1936:	18fb      	adds	r3, r7, r3
    1938:	781b      	ldrb	r3, [r3, #0]
    193a:	2b00      	cmp	r3, #0
    193c:	d010      	beq.n	1960 <_i2c_master_read+0x80>
		if (module->send_nack && module->buffer_remaining == 1) {
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	7adb      	ldrb	r3, [r3, #11]
    1942:	2b00      	cmp	r3, #0
    1944:	d01c      	beq.n	1980 <_i2c_master_read+0xa0>
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	8b9b      	ldrh	r3, [r3, #28]
    194a:	b29b      	uxth	r3, r3
    194c:	2b01      	cmp	r3, #1
    194e:	d117      	bne.n	1980 <_i2c_master_read+0xa0>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1950:	68fb      	ldr	r3, [r7, #12]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	2280      	movs	r2, #128	; 0x80
    1956:	02d2      	lsls	r2, r2, #11
    1958:	431a      	orrs	r2, r3
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	605a      	str	r2, [r3, #4]
    195e:	e00f      	b.n	1980 <_i2c_master_read+0xa0>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	7adb      	ldrb	r3, [r3, #11]
    1964:	2b00      	cmp	r3, #0
    1966:	d00b      	beq.n	1980 <_i2c_master_read+0xa0>
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	8b9b      	ldrh	r3, [r3, #28]
    196c:	b29b      	uxth	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	d106      	bne.n	1980 <_i2c_master_read+0xa0>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1972:	68fb      	ldr	r3, [r7, #12]
    1974:	685b      	ldr	r3, [r3, #4]
    1976:	2280      	movs	r2, #128	; 0x80
    1978:	02d2      	lsls	r2, r2, #11
    197a:	431a      	orrs	r2, r3
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	8b9b      	ldrh	r3, [r3, #28]
    1984:	b29b      	uxth	r3, r3
    1986:	2b00      	cmp	r3, #0
    1988:	d10e      	bne.n	19a8 <_i2c_master_read+0xc8>
		if (module->send_stop) {
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	7a9b      	ldrb	r3, [r3, #10]
    198e:	2b00      	cmp	r3, #0
    1990:	d00a      	beq.n	19a8 <_i2c_master_read+0xc8>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	1c18      	adds	r0, r3, #0
    1996:	4b0d      	ldr	r3, [pc, #52]	; (19cc <_i2c_master_read+0xec>)
    1998:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    199a:	68fb      	ldr	r3, [r7, #12]
    199c:	685b      	ldr	r3, [r3, #4]
    199e:	22c0      	movs	r2, #192	; 0xc0
    19a0:	0292      	lsls	r2, r2, #10
    19a2:	431a      	orrs	r2, r3
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	1c18      	adds	r0, r3, #0
    19ac:	4b07      	ldr	r3, [pc, #28]	; (19cc <_i2c_master_read+0xec>)
    19ae:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	6a1a      	ldr	r2, [r3, #32]
    19b4:	2308      	movs	r3, #8
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	881b      	ldrh	r3, [r3, #0]
    19ba:	18d3      	adds	r3, r2, r3
    19bc:	68fa      	ldr	r2, [r7, #12]
    19be:	2128      	movs	r1, #40	; 0x28
    19c0:	5c52      	ldrb	r2, [r2, r1]
    19c2:	b2d2      	uxtb	r2, r2
    19c4:	701a      	strb	r2, [r3, #0]
}
    19c6:	46bd      	mov	sp, r7
    19c8:	b004      	add	sp, #16
    19ca:	bd80      	pop	{r7, pc}
    19cc:	000018c1 	.word	0x000018c1

000019d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b084      	sub	sp, #16
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	8b5b      	ldrh	r3, [r3, #26]
    19e2:	b29b      	uxth	r3, r3
    19e4:	1c1a      	adds	r2, r3, #0
    19e6:	2304      	movs	r3, #4
    19e8:	4013      	ands	r3, r2
    19ea:	d004      	beq.n	19f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	2225      	movs	r2, #37	; 0x25
    19f0:	211e      	movs	r1, #30
    19f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    19f4:	e024      	b.n	1a40 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    19f6:	230a      	movs	r3, #10
    19f8:	18fb      	adds	r3, r7, r3
    19fa:	687a      	ldr	r2, [r7, #4]
    19fc:	8b52      	ldrh	r2, [r2, #26]
    19fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	8b9b      	ldrh	r3, [r3, #28]
    1a04:	b29a      	uxth	r2, r3
    1a06:	230a      	movs	r3, #10
    1a08:	18fb      	adds	r3, r7, r3
    1a0a:	210a      	movs	r1, #10
    1a0c:	1879      	adds	r1, r7, r1
    1a0e:	8809      	ldrh	r1, [r1, #0]
    1a10:	1a8a      	subs	r2, r1, r2
    1a12:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	8b9b      	ldrh	r3, [r3, #28]
    1a18:	b29b      	uxth	r3, r3
    1a1a:	3b01      	subs	r3, #1
    1a1c:	b29a      	uxth	r2, r3
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	1c18      	adds	r0, r3, #0
    1a26:	4b08      	ldr	r3, [pc, #32]	; (1a48 <_i2c_master_write+0x78>)
    1a28:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	6a1a      	ldr	r2, [r3, #32]
    1a2e:	230a      	movs	r3, #10
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	881b      	ldrh	r3, [r3, #0]
    1a34:	18d3      	adds	r3, r2, r3
    1a36:	781b      	ldrb	r3, [r3, #0]
    1a38:	b2d9      	uxtb	r1, r3
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	2228      	movs	r2, #40	; 0x28
    1a3e:	5499      	strb	r1, [r3, r2]
}
    1a40:	46bd      	mov	sp, r7
    1a42:	b004      	add	sp, #16
    1a44:	bd80      	pop	{r7, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	000018c1 	.word	0x000018c1

00001a4c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b084      	sub	sp, #16
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	681b      	ldr	r3, [r3, #0]
    1a58:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1a5a:	68fb      	ldr	r3, [r7, #12]
    1a5c:	7e1b      	ldrb	r3, [r3, #24]
    1a5e:	b2db      	uxtb	r3, r3
    1a60:	1c1a      	adds	r2, r3, #0
    1a62:	2301      	movs	r3, #1
    1a64:	4013      	ands	r3, r2
    1a66:	d02b      	beq.n	1ac0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1a68:	68fb      	ldr	r3, [r7, #12]
    1a6a:	2201      	movs	r2, #1
    1a6c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1a6e:	68fb      	ldr	r3, [r7, #12]
    1a70:	8b5b      	ldrh	r3, [r3, #26]
    1a72:	b29b      	uxth	r3, r3
    1a74:	1c1a      	adds	r2, r3, #0
    1a76:	2302      	movs	r3, #2
    1a78:	4013      	ands	r3, r2
    1a7a:	d004      	beq.n	1a86 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	2225      	movs	r2, #37	; 0x25
    1a80:	2141      	movs	r1, #65	; 0x41
    1a82:	5499      	strb	r1, [r3, r2]
    1a84:	e01c      	b.n	1ac0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	8b5b      	ldrh	r3, [r3, #26]
    1a8a:	b29b      	uxth	r3, r3
    1a8c:	1c1a      	adds	r2, r3, #0
    1a8e:	2304      	movs	r3, #4
    1a90:	4013      	ands	r3, r2
    1a92:	d015      	beq.n	1ac0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	2225      	movs	r2, #37	; 0x25
    1a98:	2118      	movs	r1, #24
    1a9a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	2200      	movs	r2, #0
    1aa0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	7a9b      	ldrb	r3, [r3, #10]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d00a      	beq.n	1ac0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	1c18      	adds	r0, r3, #0
    1aae:	4b13      	ldr	r3, [pc, #76]	; (1afc <_i2c_master_async_address_response+0xb0>)
    1ab0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	685b      	ldr	r3, [r3, #4]
    1ab6:	22c0      	movs	r2, #192	; 0xc0
    1ab8:	0292      	lsls	r2, r2, #10
    1aba:	431a      	orrs	r2, r3
    1abc:	68fb      	ldr	r3, [r7, #12]
    1abe:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	8b9b      	ldrh	r3, [r3, #28]
    1ac4:	b29a      	uxth	r2, r3
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	2225      	movs	r2, #37	; 0x25
    1ace:	5c9b      	ldrb	r3, [r3, r2]
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	2b05      	cmp	r3, #5
    1ad4:	d10e      	bne.n	1af4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	2224      	movs	r2, #36	; 0x24
    1ada:	5c9b      	ldrb	r3, [r3, r2]
    1adc:	b2db      	uxtb	r3, r3
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d104      	bne.n	1aec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	1c18      	adds	r0, r3, #0
    1ae6:	4b06      	ldr	r3, [pc, #24]	; (1b00 <_i2c_master_async_address_response+0xb4>)
    1ae8:	4798      	blx	r3
    1aea:	e003      	b.n	1af4 <_i2c_master_async_address_response+0xa8>
		} else {
			_i2c_master_read(module);
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	1c18      	adds	r0, r3, #0
    1af0:	4b04      	ldr	r3, [pc, #16]	; (1b04 <_i2c_master_async_address_response+0xb8>)
    1af2:	4798      	blx	r3
		}
	}
}
    1af4:	46bd      	mov	sp, r7
    1af6:	b004      	add	sp, #16
    1af8:	bd80      	pop	{r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	000018c1 	.word	0x000018c1
    1b00:	000019d1 	.word	0x000019d1
    1b04:	000018e1 	.word	0x000018e1

00001b08 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	b086      	sub	sp, #24
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	1c02      	adds	r2, r0, #0
    1b10:	1dfb      	adds	r3, r7, #7
    1b12:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1b14:	1dfb      	adds	r3, r7, #7
    1b16:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1b18:	4b94      	ldr	r3, [pc, #592]	; (1d6c <_i2c_master_interrupt_handler+0x264>)
    1b1a:	0092      	lsls	r2, r2, #2
    1b1c:	58d3      	ldr	r3, [r2, r3]
    1b1e:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b20:	697b      	ldr	r3, [r7, #20]
    1b22:	681b      	ldr	r3, [r3, #0]
    1b24:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b26:	693b      	ldr	r3, [r7, #16]
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	0edb      	lsrs	r3, r3, #27
    1b2c:	1c1a      	adds	r2, r3, #0
    1b2e:	2301      	movs	r3, #1
    1b30:	4013      	ands	r3, r2
    1b32:	b2db      	uxtb	r3, r3
    1b34:	1c1a      	adds	r2, r3, #0
    1b36:	230f      	movs	r3, #15
    1b38:	18fb      	adds	r3, r7, r3
    1b3a:	1e51      	subs	r1, r2, #1
    1b3c:	418a      	sbcs	r2, r1
    1b3e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1b40:	230e      	movs	r3, #14
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	697a      	ldr	r2, [r7, #20]
    1b46:	7e52      	ldrb	r2, [r2, #25]
    1b48:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1b4a:	697b      	ldr	r3, [r7, #20]
    1b4c:	7e1b      	ldrb	r3, [r3, #24]
    1b4e:	b2da      	uxtb	r2, r3
    1b50:	230e      	movs	r3, #14
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	210e      	movs	r1, #14
    1b56:	1879      	adds	r1, r7, r1
    1b58:	7809      	ldrb	r1, [r1, #0]
    1b5a:	400a      	ands	r2, r1
    1b5c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1b5e:	697b      	ldr	r3, [r7, #20]
    1b60:	8b5b      	ldrh	r3, [r3, #26]
    1b62:	b29b      	uxth	r3, r3
    1b64:	2b00      	cmp	r3, #0
    1b66:	d109      	bne.n	1b7c <_i2c_master_interrupt_handler+0x74>
    1b68:	697b      	ldr	r3, [r7, #20]
    1b6a:	8b9b      	ldrh	r3, [r3, #28]
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d004      	beq.n	1b7c <_i2c_master_interrupt_handler+0x74>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1b72:	697b      	ldr	r3, [r7, #20]
    1b74:	1c18      	adds	r0, r3, #0
    1b76:	4b7e      	ldr	r3, [pc, #504]	; (1d70 <_i2c_master_interrupt_handler+0x268>)
    1b78:	4798      	blx	r3
    1b7a:	e071      	b.n	1c60 <_i2c_master_interrupt_handler+0x158>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b7c:	697b      	ldr	r3, [r7, #20]
    1b7e:	8b5b      	ldrh	r3, [r3, #26]
    1b80:	b29b      	uxth	r3, r3
    1b82:	2b00      	cmp	r3, #0
    1b84:	d03a      	beq.n	1bfc <_i2c_master_interrupt_handler+0xf4>
    1b86:	697b      	ldr	r3, [r7, #20]
    1b88:	8b9b      	ldrh	r3, [r3, #28]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d135      	bne.n	1bfc <_i2c_master_interrupt_handler+0xf4>
			(module->status == STATUS_BUSY) &&
    1b90:	697b      	ldr	r3, [r7, #20]
    1b92:	2225      	movs	r2, #37	; 0x25
    1b94:	5c9b      	ldrb	r3, [r3, r2]
    1b96:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b98:	2b05      	cmp	r3, #5
    1b9a:	d12f      	bne.n	1bfc <_i2c_master_interrupt_handler+0xf4>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1b9c:	697b      	ldr	r3, [r7, #20]
    1b9e:	2224      	movs	r2, #36	; 0x24
    1ba0:	5c9b      	ldrb	r3, [r3, r2]
    1ba2:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d129      	bne.n	1bfc <_i2c_master_interrupt_handler+0xf4>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1ba8:	693b      	ldr	r3, [r7, #16]
    1baa:	2203      	movs	r2, #3
    1bac:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1bae:	697b      	ldr	r3, [r7, #20]
    1bb0:	2200      	movs	r2, #0
    1bb2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1bb4:	697b      	ldr	r3, [r7, #20]
    1bb6:	2225      	movs	r2, #37	; 0x25
    1bb8:	2100      	movs	r1, #0
    1bba:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1bbc:	697b      	ldr	r3, [r7, #20]
    1bbe:	7a9b      	ldrb	r3, [r3, #10]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d00b      	beq.n	1bdc <_i2c_master_interrupt_handler+0xd4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1bc4:	697b      	ldr	r3, [r7, #20]
    1bc6:	1c18      	adds	r0, r3, #0
    1bc8:	4b6a      	ldr	r3, [pc, #424]	; (1d74 <_i2c_master_interrupt_handler+0x26c>)
    1bca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bcc:	693b      	ldr	r3, [r7, #16]
    1bce:	685b      	ldr	r3, [r3, #4]
    1bd0:	22c0      	movs	r2, #192	; 0xc0
    1bd2:	0292      	lsls	r2, r2, #10
    1bd4:	431a      	orrs	r2, r3
    1bd6:	693b      	ldr	r3, [r7, #16]
    1bd8:	605a      	str	r2, [r3, #4]
    1bda:	e002      	b.n	1be2 <_i2c_master_interrupt_handler+0xda>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1bdc:	693b      	ldr	r3, [r7, #16]
    1bde:	2201      	movs	r2, #1
    1be0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1be2:	230e      	movs	r3, #14
    1be4:	18fb      	adds	r3, r7, r3
    1be6:	781b      	ldrb	r3, [r3, #0]
    1be8:	2201      	movs	r2, #1
    1bea:	4013      	ands	r3, r2
    1bec:	d005      	beq.n	1bfa <_i2c_master_interrupt_handler+0xf2>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1bee:	697b      	ldr	r3, [r7, #20]
    1bf0:	68db      	ldr	r3, [r3, #12]
    1bf2:	697a      	ldr	r2, [r7, #20]
    1bf4:	1c10      	adds	r0, r2, #0
    1bf6:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1bf8:	e032      	b.n	1c60 <_i2c_master_interrupt_handler+0x158>
    1bfa:	e031      	b.n	1c60 <_i2c_master_interrupt_handler+0x158>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1bfc:	697b      	ldr	r3, [r7, #20]
    1bfe:	8b5b      	ldrh	r3, [r3, #26]
    1c00:	b29b      	uxth	r3, r3
    1c02:	2b00      	cmp	r3, #0
    1c04:	d02c      	beq.n	1c60 <_i2c_master_interrupt_handler+0x158>
    1c06:	697b      	ldr	r3, [r7, #20]
    1c08:	8b9b      	ldrh	r3, [r3, #28]
    1c0a:	b29b      	uxth	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d027      	beq.n	1c60 <_i2c_master_interrupt_handler+0x158>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1c10:	693b      	ldr	r3, [r7, #16]
    1c12:	8b5b      	ldrh	r3, [r3, #26]
    1c14:	b29b      	uxth	r3, r3
    1c16:	1c1a      	adds	r2, r3, #0
    1c18:	2320      	movs	r3, #32
    1c1a:	4013      	ands	r3, r2
    1c1c:	d111      	bne.n	1c42 <_i2c_master_interrupt_handler+0x13a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1c1e:	230f      	movs	r3, #15
    1c20:	18fb      	adds	r3, r7, r3
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	2201      	movs	r2, #1
    1c26:	4053      	eors	r3, r2
    1c28:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d104      	bne.n	1c38 <_i2c_master_interrupt_handler+0x130>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	8b9b      	ldrh	r3, [r3, #28]
    1c32:	b29b      	uxth	r3, r3
    1c34:	2b01      	cmp	r3, #1
    1c36:	d004      	beq.n	1c42 <_i2c_master_interrupt_handler+0x13a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1c38:	697b      	ldr	r3, [r7, #20]
    1c3a:	2225      	movs	r2, #37	; 0x25
    1c3c:	2141      	movs	r1, #65	; 0x41
    1c3e:	5499      	strb	r1, [r3, r2]
    1c40:	e00e      	b.n	1c60 <_i2c_master_interrupt_handler+0x158>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1c42:	697b      	ldr	r3, [r7, #20]
    1c44:	2224      	movs	r2, #36	; 0x24
    1c46:	5c9b      	ldrb	r3, [r3, r2]
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d104      	bne.n	1c58 <_i2c_master_interrupt_handler+0x150>
			_i2c_master_write(module);
    1c4e:	697b      	ldr	r3, [r7, #20]
    1c50:	1c18      	adds	r0, r3, #0
    1c52:	4b49      	ldr	r3, [pc, #292]	; (1d78 <_i2c_master_interrupt_handler+0x270>)
    1c54:	4798      	blx	r3
    1c56:	e003      	b.n	1c60 <_i2c_master_interrupt_handler+0x158>
		} else {
			_i2c_master_read(module);
    1c58:	697b      	ldr	r3, [r7, #20]
    1c5a:	1c18      	adds	r0, r3, #0
    1c5c:	4b47      	ldr	r3, [pc, #284]	; (1d7c <_i2c_master_interrupt_handler+0x274>)
    1c5e:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c60:	697b      	ldr	r3, [r7, #20]
    1c62:	8b5b      	ldrh	r3, [r3, #26]
    1c64:	b29b      	uxth	r3, r3
    1c66:	2b00      	cmp	r3, #0
    1c68:	d047      	beq.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
    1c6a:	697b      	ldr	r3, [r7, #20]
    1c6c:	8b9b      	ldrh	r3, [r3, #28]
    1c6e:	b29b      	uxth	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	d142      	bne.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
			(module->status == STATUS_BUSY) &&
    1c74:	697b      	ldr	r3, [r7, #20]
    1c76:	2225      	movs	r2, #37	; 0x25
    1c78:	5c9b      	ldrb	r3, [r3, r2]
    1c7a:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c7c:	2b05      	cmp	r3, #5
    1c7e:	d13c      	bne.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1c80:	697b      	ldr	r3, [r7, #20]
    1c82:	2224      	movs	r2, #36	; 0x24
    1c84:	5c9b      	ldrb	r3, [r3, r2]
    1c86:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1c88:	2b01      	cmp	r3, #1
    1c8a:	d136      	bne.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1c8c:	693b      	ldr	r3, [r7, #16]
    1c8e:	7e1b      	ldrb	r3, [r3, #24]
    1c90:	b2db      	uxtb	r3, r3
    1c92:	1c1a      	adds	r2, r3, #0
    1c94:	2302      	movs	r3, #2
    1c96:	4013      	ands	r3, r2
    1c98:	d002      	beq.n	1ca0 <_i2c_master_interrupt_handler+0x198>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1c9a:	693b      	ldr	r3, [r7, #16]
    1c9c:	2202      	movs	r2, #2
    1c9e:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1ca0:	693b      	ldr	r3, [r7, #16]
    1ca2:	2203      	movs	r2, #3
    1ca4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1ca6:	697b      	ldr	r3, [r7, #20]
    1ca8:	2200      	movs	r2, #0
    1caa:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1cac:	697b      	ldr	r3, [r7, #20]
    1cae:	2225      	movs	r2, #37	; 0x25
    1cb0:	2100      	movs	r1, #0
    1cb2:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1cb4:	230e      	movs	r3, #14
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	781b      	ldrb	r3, [r3, #0]
    1cba:	2202      	movs	r2, #2
    1cbc:	4013      	ands	r3, r2
    1cbe:	d00b      	beq.n	1cd8 <_i2c_master_interrupt_handler+0x1d0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	2224      	movs	r2, #36	; 0x24
    1cc4:	5c9b      	ldrb	r3, [r3, r2]
    1cc6:	b2db      	uxtb	r3, r3
    1cc8:	2b01      	cmp	r3, #1
    1cca:	d105      	bne.n	1cd8 <_i2c_master_interrupt_handler+0x1d0>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1ccc:	697b      	ldr	r3, [r7, #20]
    1cce:	691b      	ldr	r3, [r3, #16]
    1cd0:	697a      	ldr	r2, [r7, #20]
    1cd2:	1c10      	adds	r0, r2, #0
    1cd4:	4798      	blx	r3
    1cd6:	e010      	b.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1cd8:	230e      	movs	r3, #14
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	2201      	movs	r2, #1
    1ce0:	4013      	ands	r3, r2
    1ce2:	d00a      	beq.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1ce4:	697b      	ldr	r3, [r7, #20]
    1ce6:	2224      	movs	r2, #36	; 0x24
    1ce8:	5c9b      	ldrb	r3, [r3, r2]
    1cea:	b2db      	uxtb	r3, r3
    1cec:	2b00      	cmp	r3, #0
    1cee:	d104      	bne.n	1cfa <_i2c_master_interrupt_handler+0x1f2>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1cf0:	697b      	ldr	r3, [r7, #20]
    1cf2:	68db      	ldr	r3, [r3, #12]
    1cf4:	697a      	ldr	r2, [r7, #20]
    1cf6:	1c10      	adds	r0, r2, #0
    1cf8:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1cfa:	697b      	ldr	r3, [r7, #20]
    1cfc:	2225      	movs	r2, #37	; 0x25
    1cfe:	5c9b      	ldrb	r3, [r3, r2]
    1d00:	b2db      	uxtb	r3, r3
    1d02:	2b05      	cmp	r3, #5
    1d04:	d02e      	beq.n	1d64 <_i2c_master_interrupt_handler+0x25c>
    1d06:	697b      	ldr	r3, [r7, #20]
    1d08:	2225      	movs	r2, #37	; 0x25
    1d0a:	5c9b      	ldrb	r3, [r3, r2]
    1d0c:	b2db      	uxtb	r3, r3
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d028      	beq.n	1d64 <_i2c_master_interrupt_handler+0x25c>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1d12:	693b      	ldr	r3, [r7, #16]
    1d14:	2203      	movs	r2, #3
    1d16:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1d18:	697b      	ldr	r3, [r7, #20]
    1d1a:	2200      	movs	r2, #0
    1d1c:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1d1e:	697b      	ldr	r3, [r7, #20]
    1d20:	2200      	movs	r2, #0
    1d22:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1d24:	697b      	ldr	r3, [r7, #20]
    1d26:	2225      	movs	r2, #37	; 0x25
    1d28:	5c9b      	ldrb	r3, [r3, r2]
    1d2a:	b2db      	uxtb	r3, r3
    1d2c:	2b41      	cmp	r3, #65	; 0x41
    1d2e:	d00e      	beq.n	1d4e <_i2c_master_interrupt_handler+0x246>
				module->send_stop) {
    1d30:	697b      	ldr	r3, [r7, #20]
    1d32:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1d34:	2b00      	cmp	r3, #0
    1d36:	d00a      	beq.n	1d4e <_i2c_master_interrupt_handler+0x246>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    1d38:	697b      	ldr	r3, [r7, #20]
    1d3a:	1c18      	adds	r0, r3, #0
    1d3c:	4b0d      	ldr	r3, [pc, #52]	; (1d74 <_i2c_master_interrupt_handler+0x26c>)
    1d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1d40:	693b      	ldr	r3, [r7, #16]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	22e0      	movs	r2, #224	; 0xe0
    1d46:	02d2      	lsls	r2, r2, #11
    1d48:	431a      	orrs	r2, r3
    1d4a:	693b      	ldr	r3, [r7, #16]
    1d4c:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1d4e:	230e      	movs	r3, #14
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	2204      	movs	r2, #4
    1d56:	4013      	ands	r3, r2
    1d58:	d004      	beq.n	1d64 <_i2c_master_interrupt_handler+0x25c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1d5a:	697b      	ldr	r3, [r7, #20]
    1d5c:	695b      	ldr	r3, [r3, #20]
    1d5e:	697a      	ldr	r2, [r7, #20]
    1d60:	1c10      	adds	r0, r2, #0
    1d62:	4798      	blx	r3
		}
	}
}
    1d64:	46bd      	mov	sp, r7
    1d66:	b006      	add	sp, #24
    1d68:	bd80      	pop	{r7, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	200000c4 	.word	0x200000c4
    1d70:	00001a4d 	.word	0x00001a4d
    1d74:	000018c1 	.word	0x000018c1
    1d78:	000019d1 	.word	0x000019d1
    1d7c:	000018e1 	.word	0x000018e1

00001d80 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1d80:	b580      	push	{r7, lr}
    1d82:	af00      	add	r7, sp, #0
    1d84:	2000      	movs	r0, #0
    1d86:	4b02      	ldr	r3, [pc, #8]	; (1d90 <TCC0_Handler+0x10>)
    1d88:	4798      	blx	r3
    1d8a:	46bd      	mov	sp, r7
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	00001dbd 	.word	0x00001dbd

00001d94 <TCC1_Handler>:
    1d94:	b580      	push	{r7, lr}
    1d96:	af00      	add	r7, sp, #0
    1d98:	2001      	movs	r0, #1
    1d9a:	4b02      	ldr	r3, [pc, #8]	; (1da4 <TCC1_Handler+0x10>)
    1d9c:	4798      	blx	r3
    1d9e:	46bd      	mov	sp, r7
    1da0:	bd80      	pop	{r7, pc}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	00001dbd 	.word	0x00001dbd

00001da8 <TCC2_Handler>:
    1da8:	b580      	push	{r7, lr}
    1daa:	af00      	add	r7, sp, #0
    1dac:	2002      	movs	r0, #2
    1dae:	4b02      	ldr	r3, [pc, #8]	; (1db8 <TCC2_Handler+0x10>)
    1db0:	4798      	blx	r3
    1db2:	46bd      	mov	sp, r7
    1db4:	bd80      	pop	{r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00001dbd 	.word	0x00001dbd

00001dbc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b086      	sub	sp, #24
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	1c02      	adds	r2, r0, #0
    1dc4:	1dfb      	adds	r3, r7, #7
    1dc6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    1dc8:	1dfb      	adds	r3, r7, #7
    1dca:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1dcc:	4b17      	ldr	r3, [pc, #92]	; (1e2c <_tcc_interrupt_handler+0x70>)
    1dce:	0092      	lsls	r2, r2, #2
    1dd0:	58d3      	ldr	r3, [r2, r3]
    1dd2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1dd4:	693b      	ldr	r3, [r7, #16]
    1dd6:	681b      	ldr	r3, [r3, #0]
    1dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    1dda:	693b      	ldr	r3, [r7, #16]
    1ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1dde:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    1de0:	693b      	ldr	r3, [r7, #16]
    1de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1de4:	4013      	ands	r3, r2
    1de6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1de8:	2300      	movs	r3, #0
    1dea:	617b      	str	r3, [r7, #20]
    1dec:	e018      	b.n	1e20 <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1dee:	4b10      	ldr	r3, [pc, #64]	; (1e30 <_tcc_interrupt_handler+0x74>)
    1df0:	697a      	ldr	r2, [r7, #20]
    1df2:	0092      	lsls	r2, r2, #2
    1df4:	58d3      	ldr	r3, [r2, r3]
    1df6:	68fa      	ldr	r2, [r7, #12]
    1df8:	4013      	ands	r3, r2
    1dfa:	d00e      	beq.n	1e1a <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1dfc:	693a      	ldr	r2, [r7, #16]
    1dfe:	697b      	ldr	r3, [r7, #20]
    1e00:	009b      	lsls	r3, r3, #2
    1e02:	18d3      	adds	r3, r2, r3
    1e04:	685b      	ldr	r3, [r3, #4]
    1e06:	693a      	ldr	r2, [r7, #16]
    1e08:	1c10      	adds	r0, r2, #0
    1e0a:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1e0c:	693b      	ldr	r3, [r7, #16]
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	4a07      	ldr	r2, [pc, #28]	; (1e30 <_tcc_interrupt_handler+0x74>)
    1e12:	6979      	ldr	r1, [r7, #20]
    1e14:	0089      	lsls	r1, r1, #2
    1e16:	588a      	ldr	r2, [r1, r2]
    1e18:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1e1a:	697b      	ldr	r3, [r7, #20]
    1e1c:	3301      	adds	r3, #1
    1e1e:	617b      	str	r3, [r7, #20]
    1e20:	697b      	ldr	r3, [r7, #20]
    1e22:	2b0b      	cmp	r3, #11
    1e24:	dde3      	ble.n	1dee <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    1e26:	46bd      	mov	sp, r7
    1e28:	b006      	add	sp, #24
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	200000a8 	.word	0x200000a8
    1e30:	00007f80 	.word	0x00007f80

00001e34 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1e34:	b580      	push	{r7, lr}
    1e36:	af00      	add	r7, sp, #0
    1e38:	2000      	movs	r0, #0
    1e3a:	4b02      	ldr	r3, [pc, #8]	; (1e44 <TC3_Handler+0x10>)
    1e3c:	4798      	blx	r3
    1e3e:	46bd      	mov	sp, r7
    1e40:	bd80      	pop	{r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00001e71 	.word	0x00001e71

00001e48 <TC4_Handler>:
    1e48:	b580      	push	{r7, lr}
    1e4a:	af00      	add	r7, sp, #0
    1e4c:	2001      	movs	r0, #1
    1e4e:	4b02      	ldr	r3, [pc, #8]	; (1e58 <TC4_Handler+0x10>)
    1e50:	4798      	blx	r3
    1e52:	46bd      	mov	sp, r7
    1e54:	bd80      	pop	{r7, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00001e71 	.word	0x00001e71

00001e5c <TC5_Handler>:
    1e5c:	b580      	push	{r7, lr}
    1e5e:	af00      	add	r7, sp, #0
    1e60:	2002      	movs	r0, #2
    1e62:	4b02      	ldr	r3, [pc, #8]	; (1e6c <TC5_Handler+0x10>)
    1e64:	4798      	blx	r3
    1e66:	46bd      	mov	sp, r7
    1e68:	bd80      	pop	{r7, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00001e71 	.word	0x00001e71

00001e70 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	b084      	sub	sp, #16
    1e74:	af00      	add	r7, sp, #0
    1e76:	1c02      	adds	r2, r0, #0
    1e78:	1dfb      	adds	r3, r7, #7
    1e7a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1e7c:	1dfb      	adds	r3, r7, #7
    1e7e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1e80:	4b28      	ldr	r3, [pc, #160]	; (1f24 <_tc_interrupt_handler+0xb4>)
    1e82:	0092      	lsls	r2, r2, #2
    1e84:	58d3      	ldr	r3, [r2, r3]
    1e86:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e88:	68fb      	ldr	r3, [r7, #12]
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	7b9b      	ldrb	r3, [r3, #14]
    1e8e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1e90:	68fa      	ldr	r2, [r7, #12]
    1e92:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e94:	4013      	ands	r3, r2
    1e96:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1e98:	68fb      	ldr	r3, [r7, #12]
    1e9a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e9c:	230b      	movs	r3, #11
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	400a      	ands	r2, r1
    1ea2:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1ea4:	230b      	movs	r3, #11
    1ea6:	18fb      	adds	r3, r7, r3
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	2201      	movs	r2, #1
    1eac:	4013      	ands	r3, r2
    1eae:	d008      	beq.n	1ec2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1eb0:	68fb      	ldr	r3, [r7, #12]
    1eb2:	689b      	ldr	r3, [r3, #8]
    1eb4:	68fa      	ldr	r2, [r7, #12]
    1eb6:	1c10      	adds	r0, r2, #0
    1eb8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1eba:	68fb      	ldr	r3, [r7, #12]
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	2201      	movs	r2, #1
    1ec0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1ec2:	230b      	movs	r3, #11
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	2202      	movs	r2, #2
    1eca:	4013      	ands	r3, r2
    1ecc:	d008      	beq.n	1ee0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	68db      	ldr	r3, [r3, #12]
    1ed2:	68fa      	ldr	r2, [r7, #12]
    1ed4:	1c10      	adds	r0, r2, #0
    1ed6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2202      	movs	r2, #2
    1ede:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ee0:	230b      	movs	r3, #11
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	781b      	ldrb	r3, [r3, #0]
    1ee6:	2210      	movs	r2, #16
    1ee8:	4013      	ands	r3, r2
    1eea:	d008      	beq.n	1efe <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1eec:	68fb      	ldr	r3, [r7, #12]
    1eee:	691b      	ldr	r3, [r3, #16]
    1ef0:	68fa      	ldr	r2, [r7, #12]
    1ef2:	1c10      	adds	r0, r2, #0
    1ef4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ef6:	68fb      	ldr	r3, [r7, #12]
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	2210      	movs	r2, #16
    1efc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1efe:	230b      	movs	r3, #11
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	2220      	movs	r2, #32
    1f06:	4013      	ands	r3, r2
    1f08:	d008      	beq.n	1f1c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	695b      	ldr	r3, [r3, #20]
    1f0e:	68fa      	ldr	r2, [r7, #12]
    1f10:	1c10      	adds	r0, r2, #0
    1f12:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	2220      	movs	r2, #32
    1f1a:	739a      	strb	r2, [r3, #14]
	}
}
    1f1c:	46bd      	mov	sp, r7
    1f1e:	b004      	add	sp, #16
    1f20:	bd80      	pop	{r7, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	200000b4 	.word	0x200000b4

00001f28 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	2280      	movs	r2, #128	; 0x80
    1f34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	2200      	movs	r2, #0
    1f3a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	2201      	movs	r2, #1
    1f40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	2200      	movs	r2, #0
    1f46:	70da      	strb	r2, [r3, #3]
}
    1f48:	46bd      	mov	sp, r7
    1f4a:	b002      	add	sp, #8
    1f4c:	bd80      	pop	{r7, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)

00001f50 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b084      	sub	sp, #16
    1f54:	af00      	add	r7, sp, #0
    1f56:	1c02      	adds	r2, r0, #0
    1f58:	1dfb      	adds	r3, r7, #7
    1f5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1f5c:	230f      	movs	r3, #15
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	1dfa      	adds	r2, r7, #7
    1f62:	7812      	ldrb	r2, [r2, #0]
    1f64:	09d2      	lsrs	r2, r2, #7
    1f66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1f68:	230e      	movs	r3, #14
    1f6a:	18fb      	adds	r3, r7, r3
    1f6c:	1dfa      	adds	r2, r7, #7
    1f6e:	7812      	ldrb	r2, [r2, #0]
    1f70:	0952      	lsrs	r2, r2, #5
    1f72:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1f74:	4b0d      	ldr	r3, [pc, #52]	; (1fac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1f76:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1f78:	230f      	movs	r3, #15
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d10f      	bne.n	1fa2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1f82:	230f      	movs	r3, #15
    1f84:	18fb      	adds	r3, r7, r3
    1f86:	781b      	ldrb	r3, [r3, #0]
    1f88:	009b      	lsls	r3, r3, #2
    1f8a:	2210      	movs	r2, #16
    1f8c:	4694      	mov	ip, r2
    1f8e:	44bc      	add	ip, r7
    1f90:	4463      	add	r3, ip
    1f92:	3b08      	subs	r3, #8
    1f94:	681a      	ldr	r2, [r3, #0]
    1f96:	230e      	movs	r3, #14
    1f98:	18fb      	adds	r3, r7, r3
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	01db      	lsls	r3, r3, #7
    1f9e:	18d3      	adds	r3, r2, r3
    1fa0:	e000      	b.n	1fa4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1fa2:	2300      	movs	r3, #0
	}
}
    1fa4:	1c18      	adds	r0, r3, #0
    1fa6:	46bd      	mov	sp, r7
    1fa8:	b004      	add	sp, #16
    1faa:	bd80      	pop	{r7, pc}
    1fac:	41004400 	.word	0x41004400

00001fb0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	1c02      	adds	r2, r0, #0
    1fb8:	1dfb      	adds	r3, r7, #7
    1fba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1fbc:	1dfb      	adds	r3, r7, #7
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	1c18      	adds	r0, r3, #0
    1fc2:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <port_get_group_from_gpio_pin+0x20>)
    1fc4:	4798      	blx	r3
    1fc6:	1c03      	adds	r3, r0, #0
}
    1fc8:	1c18      	adds	r0, r3, #0
    1fca:	46bd      	mov	sp, r7
    1fcc:	b002      	add	sp, #8
    1fce:	bd80      	pop	{r7, pc}
    1fd0:	00001f51 	.word	0x00001f51

00001fd4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b084      	sub	sp, #16
    1fd8:	af00      	add	r7, sp, #0
    1fda:	1c02      	adds	r2, r0, #0
    1fdc:	1dfb      	adds	r3, r7, #7
    1fde:	701a      	strb	r2, [r3, #0]
    1fe0:	1dbb      	adds	r3, r7, #6
    1fe2:	1c0a      	adds	r2, r1, #0
    1fe4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1fe6:	1dfb      	adds	r3, r7, #7
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	1c18      	adds	r0, r3, #0
    1fec:	4b0c      	ldr	r3, [pc, #48]	; (2020 <STACK_SIZE+0x20>)
    1fee:	4798      	blx	r3
    1ff0:	1c03      	adds	r3, r0, #0
    1ff2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ff4:	1dfb      	adds	r3, r7, #7
    1ff6:	781b      	ldrb	r3, [r3, #0]
    1ff8:	221f      	movs	r2, #31
    1ffa:	4013      	ands	r3, r2
    1ffc:	2201      	movs	r2, #1
    1ffe:	409a      	lsls	r2, r3
    2000:	1c13      	adds	r3, r2, #0
    2002:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2004:	1dbb      	adds	r3, r7, #6
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	2b00      	cmp	r3, #0
    200a:	d003      	beq.n	2014 <STACK_SIZE+0x14>
		port_base->OUTSET.reg = pin_mask;
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	68ba      	ldr	r2, [r7, #8]
    2010:	619a      	str	r2, [r3, #24]
    2012:	e002      	b.n	201a <STACK_SIZE+0x1a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	68ba      	ldr	r2, [r7, #8]
    2018:	615a      	str	r2, [r3, #20]
	}
}
    201a:	46bd      	mov	sp, r7
    201c:	b004      	add	sp, #16
    201e:	bd80      	pop	{r7, pc}
    2020:	00001fb1 	.word	0x00001fb1

00002024 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2024:	b580      	push	{r7, lr}
    2026:	b082      	sub	sp, #8
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2200      	movs	r2, #0
    2030:	701a      	strb	r2, [r3, #0]
}
    2032:	46bd      	mov	sp, r7
    2034:	b002      	add	sp, #8
    2036:	bd80      	pop	{r7, pc}

00002038 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2038:	b580      	push	{r7, lr}
    203a:	b082      	sub	sp, #8
    203c:	af00      	add	r7, sp, #0
    203e:	1c02      	adds	r2, r0, #0
    2040:	6039      	str	r1, [r7, #0]
    2042:	1dfb      	adds	r3, r7, #7
    2044:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2046:	1dfb      	adds	r3, r7, #7
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	2b01      	cmp	r3, #1
    204c:	d00a      	beq.n	2064 <system_apb_clock_set_mask+0x2c>
    204e:	2b02      	cmp	r3, #2
    2050:	d00f      	beq.n	2072 <system_apb_clock_set_mask+0x3a>
    2052:	2b00      	cmp	r3, #0
    2054:	d114      	bne.n	2080 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2056:	4b0e      	ldr	r3, [pc, #56]	; (2090 <system_apb_clock_set_mask+0x58>)
    2058:	4a0d      	ldr	r2, [pc, #52]	; (2090 <system_apb_clock_set_mask+0x58>)
    205a:	6991      	ldr	r1, [r2, #24]
    205c:	683a      	ldr	r2, [r7, #0]
    205e:	430a      	orrs	r2, r1
    2060:	619a      	str	r2, [r3, #24]
			break;
    2062:	e00f      	b.n	2084 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2064:	4b0a      	ldr	r3, [pc, #40]	; (2090 <system_apb_clock_set_mask+0x58>)
    2066:	4a0a      	ldr	r2, [pc, #40]	; (2090 <system_apb_clock_set_mask+0x58>)
    2068:	69d1      	ldr	r1, [r2, #28]
    206a:	683a      	ldr	r2, [r7, #0]
    206c:	430a      	orrs	r2, r1
    206e:	61da      	str	r2, [r3, #28]
			break;
    2070:	e008      	b.n	2084 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2072:	4b07      	ldr	r3, [pc, #28]	; (2090 <system_apb_clock_set_mask+0x58>)
    2074:	4a06      	ldr	r2, [pc, #24]	; (2090 <system_apb_clock_set_mask+0x58>)
    2076:	6a11      	ldr	r1, [r2, #32]
    2078:	683a      	ldr	r2, [r7, #0]
    207a:	430a      	orrs	r2, r1
    207c:	621a      	str	r2, [r3, #32]
			break;
    207e:	e001      	b.n	2084 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2080:	2317      	movs	r3, #23
    2082:	e000      	b.n	2086 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2084:	2300      	movs	r3, #0
}
    2086:	1c18      	adds	r0, r3, #0
    2088:	46bd      	mov	sp, r7
    208a:	b002      	add	sp, #8
    208c:	bd80      	pop	{r7, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	40000400 	.word	0x40000400

00002094 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2094:	b580      	push	{r7, lr}
    2096:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2098:	4b05      	ldr	r3, [pc, #20]	; (20b0 <system_is_debugger_present+0x1c>)
    209a:	789b      	ldrb	r3, [r3, #2]
    209c:	b2db      	uxtb	r3, r3
    209e:	1c1a      	adds	r2, r3, #0
    20a0:	2302      	movs	r3, #2
    20a2:	4013      	ands	r3, r2
    20a4:	1e5a      	subs	r2, r3, #1
    20a6:	4193      	sbcs	r3, r2
    20a8:	b2db      	uxtb	r3, r3
}
    20aa:	1c18      	adds	r0, r3, #0
    20ac:	46bd      	mov	sp, r7
    20ae:	bd80      	pop	{r7, pc}
    20b0:	41002000 	.word	0x41002000

000020b4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    20b4:	b580      	push	{r7, lr}
    20b6:	b084      	sub	sp, #16
    20b8:	af00      	add	r7, sp, #0
    20ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20c2:	68fb      	ldr	r3, [r7, #12]
    20c4:	7e1b      	ldrb	r3, [r3, #24]
    20c6:	b2db      	uxtb	r3, r3
    20c8:	1c1a      	adds	r2, r3, #0
    20ca:	2301      	movs	r3, #1
    20cc:	4013      	ands	r3, r2
    20ce:	1e5a      	subs	r2, r3, #1
    20d0:	4193      	sbcs	r3, r2
    20d2:	b2db      	uxtb	r3, r3
}
    20d4:	1c18      	adds	r0, r3, #0
    20d6:	46bd      	mov	sp, r7
    20d8:	b004      	add	sp, #16
    20da:	bd80      	pop	{r7, pc}

000020dc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    20dc:	b580      	push	{r7, lr}
    20de:	b084      	sub	sp, #16
    20e0:	af00      	add	r7, sp, #0
    20e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	7e1b      	ldrb	r3, [r3, #24]
    20ee:	b2db      	uxtb	r3, r3
    20f0:	1c1a      	adds	r2, r3, #0
    20f2:	2304      	movs	r3, #4
    20f4:	4013      	ands	r3, r2
    20f6:	1e5a      	subs	r2, r3, #1
    20f8:	4193      	sbcs	r3, r2
    20fa:	b2db      	uxtb	r3, r3
}
    20fc:	1c18      	adds	r0, r3, #0
    20fe:	46bd      	mov	sp, r7
    2100:	b004      	add	sp, #16
    2102:	bd80      	pop	{r7, pc}

00002104 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    2104:	b580      	push	{r7, lr}
    2106:	b084      	sub	sp, #16
    2108:	af00      	add	r7, sp, #0
    210a:	6078      	str	r0, [r7, #4]
    210c:	1c0a      	adds	r2, r1, #0
    210e:	1cbb      	adds	r3, r7, #2
    2110:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	1c18      	adds	r0, r3, #0
    211c:	4b0a      	ldr	r3, [pc, #40]	; (2148 <spi_write+0x44>)
    211e:	4798      	blx	r3
    2120:	1c03      	adds	r3, r0, #0
    2122:	1c1a      	adds	r2, r3, #0
    2124:	2301      	movs	r3, #1
    2126:	4053      	eors	r3, r2
    2128:	b2db      	uxtb	r3, r3
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    212e:	2305      	movs	r3, #5
    2130:	e006      	b.n	2140 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2132:	1cbb      	adds	r3, r7, #2
    2134:	881b      	ldrh	r3, [r3, #0]
    2136:	05db      	lsls	r3, r3, #23
    2138:	0dda      	lsrs	r2, r3, #23
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    213e:	2300      	movs	r3, #0
}
    2140:	1c18      	adds	r0, r3, #0
    2142:	46bd      	mov	sp, r7
    2144:	b004      	add	sp, #16
    2146:	bd80      	pop	{r7, pc}
    2148:	000020b5 	.word	0x000020b5

0000214c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    214c:	b580      	push	{r7, lr}
    214e:	b084      	sub	sp, #16
    2150:	af00      	add	r7, sp, #0
    2152:	6078      	str	r0, [r7, #4]
    2154:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	1c18      	adds	r0, r3, #0
    2160:	4b1b      	ldr	r3, [pc, #108]	; (21d0 <spi_read+0x84>)
    2162:	4798      	blx	r3
    2164:	1c03      	adds	r3, r0, #0
    2166:	1c1a      	adds	r2, r3, #0
    2168:	2301      	movs	r3, #1
    216a:	4053      	eors	r3, r2
    216c:	b2db      	uxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	d001      	beq.n	2176 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2172:	2310      	movs	r3, #16
    2174:	e027      	b.n	21c6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2176:	230f      	movs	r3, #15
    2178:	18fb      	adds	r3, r7, r3
    217a:	2200      	movs	r2, #0
    217c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    217e:	68bb      	ldr	r3, [r7, #8]
    2180:	8b5b      	ldrh	r3, [r3, #26]
    2182:	b29b      	uxth	r3, r3
    2184:	1c1a      	adds	r2, r3, #0
    2186:	2304      	movs	r3, #4
    2188:	4013      	ands	r3, r2
    218a:	d006      	beq.n	219a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    218c:	230f      	movs	r3, #15
    218e:	18fb      	adds	r3, r7, r3
    2190:	221e      	movs	r2, #30
    2192:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2194:	68bb      	ldr	r3, [r7, #8]
    2196:	2204      	movs	r2, #4
    2198:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	799b      	ldrb	r3, [r3, #6]
    219e:	2b01      	cmp	r3, #1
    21a0:	d108      	bne.n	21b4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    21a2:	68bb      	ldr	r3, [r7, #8]
    21a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21a6:	b29b      	uxth	r3, r3
    21a8:	05db      	lsls	r3, r3, #23
    21aa:	0ddb      	lsrs	r3, r3, #23
    21ac:	b29a      	uxth	r2, r3
    21ae:	683b      	ldr	r3, [r7, #0]
    21b0:	801a      	strh	r2, [r3, #0]
    21b2:	e005      	b.n	21c0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    21b4:	68bb      	ldr	r3, [r7, #8]
    21b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21b8:	b2db      	uxtb	r3, r3
    21ba:	b29a      	uxth	r2, r3
    21bc:	683b      	ldr	r3, [r7, #0]
    21be:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    21c0:	230f      	movs	r3, #15
    21c2:	18fb      	adds	r3, r7, r3
    21c4:	781b      	ldrb	r3, [r3, #0]
}
    21c6:	1c18      	adds	r0, r3, #0
    21c8:	46bd      	mov	sp, r7
    21ca:	b004      	add	sp, #16
    21cc:	bd80      	pop	{r7, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	000020dd 	.word	0x000020dd

000021d4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    21d4:	b590      	push	{r4, r7, lr}
    21d6:	b093      	sub	sp, #76	; 0x4c
    21d8:	af00      	add	r7, sp, #0
    21da:	6078      	str	r0, [r7, #4]
    21dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	681b      	ldr	r3, [r3, #0]
    21e8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    21ea:	231c      	movs	r3, #28
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	1c18      	adds	r0, r3, #0
    21f0:	4b86      	ldr	r3, [pc, #536]	; (240c <_spi_set_config+0x238>)
    21f2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    21f4:	231c      	movs	r3, #28
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	2200      	movs	r2, #0
    21fa:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    21fc:	683b      	ldr	r3, [r7, #0]
    21fe:	781b      	ldrb	r3, [r3, #0]
    2200:	2b00      	cmp	r3, #0
    2202:	d103      	bne.n	220c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2204:	231c      	movs	r3, #28
    2206:	18fb      	adds	r3, r7, r3
    2208:	2200      	movs	r2, #0
    220a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    220c:	683b      	ldr	r3, [r7, #0]
    220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2210:	230c      	movs	r3, #12
    2212:	18fb      	adds	r3, r7, r3
    2214:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2216:	683b      	ldr	r3, [r7, #0]
    2218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    221a:	230c      	movs	r3, #12
    221c:	18fb      	adds	r3, r7, r3
    221e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2220:	683b      	ldr	r3, [r7, #0]
    2222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2224:	230c      	movs	r3, #12
    2226:	18fb      	adds	r3, r7, r3
    2228:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    222a:	683b      	ldr	r3, [r7, #0]
    222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    222e:	230c      	movs	r3, #12
    2230:	18fb      	adds	r3, r7, r3
    2232:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2234:	2347      	movs	r3, #71	; 0x47
    2236:	18fb      	adds	r3, r7, r3
    2238:	2200      	movs	r2, #0
    223a:	701a      	strb	r2, [r3, #0]
    223c:	e02c      	b.n	2298 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    223e:	2347      	movs	r3, #71	; 0x47
    2240:	18fb      	adds	r3, r7, r3
    2242:	781a      	ldrb	r2, [r3, #0]
    2244:	230c      	movs	r3, #12
    2246:	18fb      	adds	r3, r7, r3
    2248:	0092      	lsls	r2, r2, #2
    224a:	58d3      	ldr	r3, [r2, r3]
    224c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2250:	2b00      	cmp	r3, #0
    2252:	d109      	bne.n	2268 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2256:	2347      	movs	r3, #71	; 0x47
    2258:	18fb      	adds	r3, r7, r3
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	1c10      	adds	r0, r2, #0
    225e:	1c19      	adds	r1, r3, #0
    2260:	4b6b      	ldr	r3, [pc, #428]	; (2410 <_spi_set_config+0x23c>)
    2262:	4798      	blx	r3
    2264:	1c03      	adds	r3, r0, #0
    2266:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    226a:	3301      	adds	r3, #1
    226c:	d00d      	beq.n	228a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    226e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2270:	b2da      	uxtb	r2, r3
    2272:	231c      	movs	r3, #28
    2274:	18fb      	adds	r3, r7, r3
    2276:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    227a:	0c1b      	lsrs	r3, r3, #16
    227c:	b2da      	uxtb	r2, r3
    227e:	231c      	movs	r3, #28
    2280:	18fb      	adds	r3, r7, r3
    2282:	1c10      	adds	r0, r2, #0
    2284:	1c19      	adds	r1, r3, #0
    2286:	4b63      	ldr	r3, [pc, #396]	; (2414 <_spi_set_config+0x240>)
    2288:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    228a:	2347      	movs	r3, #71	; 0x47
    228c:	18fb      	adds	r3, r7, r3
    228e:	781a      	ldrb	r2, [r3, #0]
    2290:	2347      	movs	r3, #71	; 0x47
    2292:	18fb      	adds	r3, r7, r3
    2294:	3201      	adds	r2, #1
    2296:	701a      	strb	r2, [r3, #0]
    2298:	2347      	movs	r3, #71	; 0x47
    229a:	18fb      	adds	r3, r7, r3
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b03      	cmp	r3, #3
    22a0:	d9cd      	bls.n	223e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    22a2:	683b      	ldr	r3, [r7, #0]
    22a4:	781a      	ldrb	r2, [r3, #0]
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    22aa:	683b      	ldr	r3, [r7, #0]
    22ac:	7c1a      	ldrb	r2, [r3, #16]
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    22b2:	683b      	ldr	r3, [r7, #0]
    22b4:	7c9a      	ldrb	r2, [r3, #18]
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    22ba:	683b      	ldr	r3, [r7, #0]
    22bc:	7d1a      	ldrb	r2, [r3, #20]
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    22c2:	230a      	movs	r3, #10
    22c4:	18fb      	adds	r3, r7, r3
    22c6:	2200      	movs	r2, #0
    22c8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    22ca:	2300      	movs	r3, #0
    22cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    22ce:	2300      	movs	r3, #0
    22d0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    22d2:	683b      	ldr	r3, [r7, #0]
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	2b01      	cmp	r3, #1
    22d8:	d12b      	bne.n	2332 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	681b      	ldr	r3, [r3, #0]
    22de:	1c18      	adds	r0, r3, #0
    22e0:	4b4d      	ldr	r3, [pc, #308]	; (2418 <_spi_set_config+0x244>)
    22e2:	4798      	blx	r3
    22e4:	1c03      	adds	r3, r0, #0
    22e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22ea:	3314      	adds	r3, #20
    22ec:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    22ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    22f0:	b2db      	uxtb	r3, r3
    22f2:	1c18      	adds	r0, r3, #0
    22f4:	4b49      	ldr	r3, [pc, #292]	; (241c <_spi_set_config+0x248>)
    22f6:	4798      	blx	r3
    22f8:	1c03      	adds	r3, r0, #0
    22fa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    22fc:	683b      	ldr	r3, [r7, #0]
    22fe:	6999      	ldr	r1, [r3, #24]
    2300:	2323      	movs	r3, #35	; 0x23
    2302:	18fc      	adds	r4, r7, r3
    2304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2306:	230a      	movs	r3, #10
    2308:	18fb      	adds	r3, r7, r3
    230a:	1c08      	adds	r0, r1, #0
    230c:	1c11      	adds	r1, r2, #0
    230e:	1c1a      	adds	r2, r3, #0
    2310:	4b43      	ldr	r3, [pc, #268]	; (2420 <_spi_set_config+0x24c>)
    2312:	4798      	blx	r3
    2314:	1c03      	adds	r3, r0, #0
    2316:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2318:	2323      	movs	r3, #35	; 0x23
    231a:	18fb      	adds	r3, r7, r3
    231c:	781b      	ldrb	r3, [r3, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2322:	2317      	movs	r3, #23
    2324:	e06d      	b.n	2402 <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2326:	230a      	movs	r3, #10
    2328:	18fb      	adds	r3, r7, r3
    232a:	881b      	ldrh	r3, [r3, #0]
    232c:	b2da      	uxtb	r2, r3
    232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2330:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2332:	683b      	ldr	r3, [r7, #0]
    2334:	781b      	ldrb	r3, [r3, #0]
    2336:	2b00      	cmp	r3, #0
    2338:	d11a      	bne.n	2370 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    233a:	683b      	ldr	r3, [r7, #0]
    233c:	699b      	ldr	r3, [r3, #24]
    233e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    2340:	683b      	ldr	r3, [r7, #0]
    2342:	8b9b      	ldrh	r3, [r3, #28]
    2344:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    234a:	683a      	ldr	r2, [r7, #0]
    234c:	7f92      	ldrb	r2, [r2, #30]
    234e:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2350:	683a      	ldr	r2, [r7, #0]
    2352:	7fd2      	ldrb	r2, [r2, #31]
    2354:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2356:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2358:	431a      	orrs	r2, r3
    235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    235c:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    235e:	683b      	ldr	r3, [r7, #0]
    2360:	2220      	movs	r2, #32
    2362:	5c9b      	ldrb	r3, [r3, r2]
    2364:	2b00      	cmp	r3, #0
    2366:	d003      	beq.n	2370 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    236a:	2240      	movs	r2, #64	; 0x40
    236c:	4313      	orrs	r3, r2
    236e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    2370:	683b      	ldr	r3, [r7, #0]
    2372:	685b      	ldr	r3, [r3, #4]
    2374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2376:	4313      	orrs	r3, r2
    2378:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    237a:	683b      	ldr	r3, [r7, #0]
    237c:	689b      	ldr	r3, [r3, #8]
    237e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2380:	4313      	orrs	r3, r2
    2382:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2384:	683b      	ldr	r3, [r7, #0]
    2386:	68db      	ldr	r3, [r3, #12]
    2388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    238a:	4313      	orrs	r3, r2
    238c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    238e:	683b      	ldr	r3, [r7, #0]
    2390:	7c1b      	ldrb	r3, [r3, #16]
    2392:	1c1a      	adds	r2, r3, #0
    2394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2396:	4313      	orrs	r3, r2
    2398:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    239a:	683b      	ldr	r3, [r7, #0]
    239c:	7c5b      	ldrb	r3, [r3, #17]
    239e:	2b00      	cmp	r3, #0
    23a0:	d103      	bne.n	23aa <_spi_set_config+0x1d6>
    23a2:	4b20      	ldr	r3, [pc, #128]	; (2424 <_spi_set_config+0x250>)
    23a4:	4798      	blx	r3
    23a6:	1e03      	subs	r3, r0, #0
    23a8:	d003      	beq.n	23b2 <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    23aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23ac:	2280      	movs	r2, #128	; 0x80
    23ae:	4313      	orrs	r3, r2
    23b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    23b2:	683b      	ldr	r3, [r7, #0]
    23b4:	7c9b      	ldrb	r3, [r3, #18]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d004      	beq.n	23c4 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    23ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23bc:	2280      	movs	r2, #128	; 0x80
    23be:	0292      	lsls	r2, r2, #10
    23c0:	4313      	orrs	r3, r2
    23c2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    23c4:	683b      	ldr	r3, [r7, #0]
    23c6:	7cdb      	ldrb	r3, [r3, #19]
    23c8:	2b00      	cmp	r3, #0
    23ca:	d004      	beq.n	23d6 <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    23cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23ce:	2280      	movs	r2, #128	; 0x80
    23d0:	0092      	lsls	r2, r2, #2
    23d2:	4313      	orrs	r3, r2
    23d4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    23d6:	683b      	ldr	r3, [r7, #0]
    23d8:	7d1b      	ldrb	r3, [r3, #20]
    23da:	2b00      	cmp	r3, #0
    23dc:	d004      	beq.n	23e8 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    23de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23e0:	2280      	movs	r2, #128	; 0x80
    23e2:	0192      	lsls	r2, r2, #6
    23e4:	4313      	orrs	r3, r2
    23e6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    23e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23ee:	431a      	orrs	r2, r3
    23f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23f2:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    23f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23f6:	685a      	ldr	r2, [r3, #4]
    23f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23fa:	431a      	orrs	r2, r3
    23fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23fe:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2400:	2300      	movs	r3, #0
}
    2402:	1c18      	adds	r0, r3, #0
    2404:	46bd      	mov	sp, r7
    2406:	b013      	add	sp, #76	; 0x4c
    2408:	bd90      	pop	{r4, r7, pc}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	00001f29 	.word	0x00001f29
    2410:	00002d75 	.word	0x00002d75
    2414:	00003ded 	.word	0x00003ded
    2418:	00002f31 	.word	0x00002f31
    241c:	00003c25 	.word	0x00003c25
    2420:	00002c6d 	.word	0x00002c6d
    2424:	00002095 	.word	0x00002095

00002428 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2428:	b590      	push	{r4, r7, lr}
    242a:	b08b      	sub	sp, #44	; 0x2c
    242c:	af00      	add	r7, sp, #0
    242e:	60f8      	str	r0, [r7, #12]
    2430:	60b9      	str	r1, [r7, #8]
    2432:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2434:	68fb      	ldr	r3, [r7, #12]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    243a:	68fb      	ldr	r3, [r7, #12]
    243c:	681b      	ldr	r3, [r3, #0]
    243e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2440:	6a3b      	ldr	r3, [r7, #32]
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	2202      	movs	r2, #2
    2446:	4013      	ands	r3, r2
    2448:	d001      	beq.n	244e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    244a:	231c      	movs	r3, #28
    244c:	e0a5      	b.n	259a <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    244e:	6a3b      	ldr	r3, [r7, #32]
    2450:	681b      	ldr	r3, [r3, #0]
    2452:	2201      	movs	r2, #1
    2454:	4013      	ands	r3, r2
    2456:	d001      	beq.n	245c <spi_init+0x34>
		return STATUS_BUSY;
    2458:	2305      	movs	r3, #5
    245a:	e09e      	b.n	259a <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    245c:	68fb      	ldr	r3, [r7, #12]
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	1c18      	adds	r0, r3, #0
    2462:	4b50      	ldr	r3, [pc, #320]	; (25a4 <spi_init+0x17c>)
    2464:	4798      	blx	r3
    2466:	1c03      	adds	r3, r0, #0
    2468:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    246a:	69fb      	ldr	r3, [r7, #28]
    246c:	3302      	adds	r3, #2
    246e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2470:	69fb      	ldr	r3, [r7, #28]
    2472:	3314      	adds	r3, #20
    2474:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2476:	69bb      	ldr	r3, [r7, #24]
    2478:	2201      	movs	r2, #1
    247a:	409a      	lsls	r2, r3
    247c:	1c13      	adds	r3, r2, #0
    247e:	2002      	movs	r0, #2
    2480:	1c19      	adds	r1, r3, #0
    2482:	4b49      	ldr	r3, [pc, #292]	; (25a8 <spi_init+0x180>)
    2484:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2486:	2310      	movs	r3, #16
    2488:	18fb      	adds	r3, r7, r3
    248a:	1c18      	adds	r0, r3, #0
    248c:	4b47      	ldr	r3, [pc, #284]	; (25ac <spi_init+0x184>)
    248e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	2224      	movs	r2, #36	; 0x24
    2494:	5c9a      	ldrb	r2, [r3, r2]
    2496:	2310      	movs	r3, #16
    2498:	18fb      	adds	r3, r7, r3
    249a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    249c:	697b      	ldr	r3, [r7, #20]
    249e:	b2da      	uxtb	r2, r3
    24a0:	2310      	movs	r3, #16
    24a2:	18fb      	adds	r3, r7, r3
    24a4:	1c10      	adds	r0, r2, #0
    24a6:	1c19      	adds	r1, r3, #0
    24a8:	4b41      	ldr	r3, [pc, #260]	; (25b0 <spi_init+0x188>)
    24aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	b2db      	uxtb	r3, r3
    24b0:	1c18      	adds	r0, r3, #0
    24b2:	4b40      	ldr	r3, [pc, #256]	; (25b4 <spi_init+0x18c>)
    24b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	2224      	movs	r2, #36	; 0x24
    24ba:	5c9b      	ldrb	r3, [r3, r2]
    24bc:	1c18      	adds	r0, r3, #0
    24be:	2100      	movs	r1, #0
    24c0:	4b3d      	ldr	r3, [pc, #244]	; (25b8 <spi_init+0x190>)
    24c2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	781b      	ldrb	r3, [r3, #0]
    24c8:	2b01      	cmp	r3, #1
    24ca:	d105      	bne.n	24d8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    24cc:	6a3b      	ldr	r3, [r7, #32]
    24ce:	681b      	ldr	r3, [r3, #0]
    24d0:	220c      	movs	r2, #12
    24d2:	431a      	orrs	r2, r3
    24d4:	6a3b      	ldr	r3, [r7, #32]
    24d6:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	2b00      	cmp	r3, #0
    24de:	d105      	bne.n	24ec <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    24e0:	6a3b      	ldr	r3, [r7, #32]
    24e2:	681b      	ldr	r3, [r3, #0]
    24e4:	2208      	movs	r2, #8
    24e6:	431a      	orrs	r2, r3
    24e8:	6a3b      	ldr	r3, [r7, #32]
    24ea:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    24ec:	2327      	movs	r3, #39	; 0x27
    24ee:	18fb      	adds	r3, r7, r3
    24f0:	2200      	movs	r2, #0
    24f2:	701a      	strb	r2, [r3, #0]
    24f4:	e00f      	b.n	2516 <spi_init+0xee>
		module->callback[i]        = NULL;
    24f6:	2327      	movs	r3, #39	; 0x27
    24f8:	18fb      	adds	r3, r7, r3
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	68fa      	ldr	r2, [r7, #12]
    24fe:	3302      	adds	r3, #2
    2500:	009b      	lsls	r3, r3, #2
    2502:	18d3      	adds	r3, r2, r3
    2504:	2200      	movs	r2, #0
    2506:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2508:	2327      	movs	r3, #39	; 0x27
    250a:	18fb      	adds	r3, r7, r3
    250c:	781a      	ldrb	r2, [r3, #0]
    250e:	2327      	movs	r3, #39	; 0x27
    2510:	18fb      	adds	r3, r7, r3
    2512:	3201      	adds	r2, #1
    2514:	701a      	strb	r2, [r3, #0]
    2516:	2327      	movs	r3, #39	; 0x27
    2518:	18fb      	adds	r3, r7, r3
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	2b06      	cmp	r3, #6
    251e:	d9ea      	bls.n	24f6 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    2520:	68fb      	ldr	r3, [r7, #12]
    2522:	2200      	movs	r2, #0
    2524:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2526:	68fb      	ldr	r3, [r7, #12]
    2528:	2200      	movs	r2, #0
    252a:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	2200      	movs	r2, #0
    2530:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	2200      	movs	r2, #0
    2536:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    2538:	68fb      	ldr	r3, [r7, #12]
    253a:	2236      	movs	r2, #54	; 0x36
    253c:	2100      	movs	r1, #0
    253e:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    2540:	68fb      	ldr	r3, [r7, #12]
    2542:	2237      	movs	r2, #55	; 0x37
    2544:	2100      	movs	r1, #0
    2546:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	2238      	movs	r2, #56	; 0x38
    254c:	2100      	movs	r1, #0
    254e:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	2203      	movs	r2, #3
    2554:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    2556:	68fb      	ldr	r3, [r7, #12]
    2558:	2200      	movs	r2, #0
    255a:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    255c:	68fb      	ldr	r3, [r7, #12]
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	2213      	movs	r2, #19
    2562:	18bc      	adds	r4, r7, r2
    2564:	1c18      	adds	r0, r3, #0
    2566:	4b0f      	ldr	r3, [pc, #60]	; (25a4 <spi_init+0x17c>)
    2568:	4798      	blx	r3
    256a:	1c03      	adds	r3, r0, #0
    256c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    256e:	2313      	movs	r3, #19
    2570:	18fb      	adds	r3, r7, r3
    2572:	781a      	ldrb	r2, [r3, #0]
    2574:	4b11      	ldr	r3, [pc, #68]	; (25bc <spi_init+0x194>)
    2576:	1c10      	adds	r0, r2, #0
    2578:	1c19      	adds	r1, r3, #0
    257a:	4b11      	ldr	r3, [pc, #68]	; (25c0 <spi_init+0x198>)
    257c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    257e:	2313      	movs	r3, #19
    2580:	18fb      	adds	r3, r7, r3
    2582:	781a      	ldrb	r2, [r3, #0]
    2584:	4b0f      	ldr	r3, [pc, #60]	; (25c4 <spi_init+0x19c>)
    2586:	0092      	lsls	r2, r2, #2
    2588:	68f9      	ldr	r1, [r7, #12]
    258a:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    258c:	68fa      	ldr	r2, [r7, #12]
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	1c10      	adds	r0, r2, #0
    2592:	1c19      	adds	r1, r3, #0
    2594:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <spi_init+0x1a0>)
    2596:	4798      	blx	r3
    2598:	1c03      	adds	r3, r0, #0
}
    259a:	1c18      	adds	r0, r3, #0
    259c:	46bd      	mov	sp, r7
    259e:	b00b      	add	sp, #44	; 0x2c
    25a0:	bd90      	pop	{r4, r7, pc}
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	00002f31 	.word	0x00002f31
    25a8:	00002039 	.word	0x00002039
    25ac:	00002025 	.word	0x00002025
    25b0:	00003b01 	.word	0x00003b01
    25b4:	00003b45 	.word	0x00003b45
    25b8:	00002ce9 	.word	0x00002ce9
    25bc:	00002951 	.word	0x00002951
    25c0:	00002f91 	.word	0x00002f91
    25c4:	200000c4 	.word	0x200000c4
    25c8:	000021d5 	.word	0x000021d5

000025cc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    25cc:	b590      	push	{r4, r7, lr}
    25ce:	b087      	sub	sp, #28
    25d0:	af00      	add	r7, sp, #0
    25d2:	60f8      	str	r0, [r7, #12]
    25d4:	607a      	str	r2, [r7, #4]
    25d6:	230a      	movs	r3, #10
    25d8:	18fb      	adds	r3, r7, r3
    25da:	1c0a      	adds	r2, r1, #0
    25dc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	79db      	ldrb	r3, [r3, #7]
    25e2:	2201      	movs	r2, #1
    25e4:	4053      	eors	r3, r2
    25e6:	b2db      	uxtb	r3, r3
    25e8:	2b00      	cmp	r3, #0
    25ea:	d001      	beq.n	25f0 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    25ec:	231c      	movs	r3, #28
    25ee:	e082      	b.n	26f6 <spi_transceive_wait+0x12a>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    25f0:	68fb      	ldr	r3, [r7, #12]
    25f2:	2238      	movs	r2, #56	; 0x38
    25f4:	5c9b      	ldrb	r3, [r3, r2]
    25f6:	b2db      	uxtb	r3, r3
    25f8:	2b05      	cmp	r3, #5
    25fa:	d101      	bne.n	2600 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    25fc:	2305      	movs	r3, #5
    25fe:	e07a      	b.n	26f6 <spi_transceive_wait+0x12a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    2600:	2315      	movs	r3, #21
    2602:	18fb      	adds	r3, r7, r3
    2604:	2200      	movs	r2, #0
    2606:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    2608:	68fb      	ldr	r3, [r7, #12]
    260a:	795b      	ldrb	r3, [r3, #5]
    260c:	2b00      	cmp	r3, #0
    260e:	d120      	bne.n	2652 <spi_transceive_wait+0x86>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2610:	2316      	movs	r3, #22
    2612:	18fb      	adds	r3, r7, r3
    2614:	2200      	movs	r2, #0
    2616:	801a      	strh	r2, [r3, #0]
    2618:	e015      	b.n	2646 <spi_transceive_wait+0x7a>
			if (spi_is_ready_to_write(module)) {
    261a:	68fb      	ldr	r3, [r7, #12]
    261c:	1c18      	adds	r0, r3, #0
    261e:	4b38      	ldr	r3, [pc, #224]	; (2700 <spi_transceive_wait+0x134>)
    2620:	4798      	blx	r3
    2622:	1e03      	subs	r3, r0, #0
    2624:	d000      	beq.n	2628 <spi_transceive_wait+0x5c>
				break;
    2626:	e014      	b.n	2652 <spi_transceive_wait+0x86>
			} else if (j == SPI_TIMEOUT) {
    2628:	2316      	movs	r3, #22
    262a:	18fb      	adds	r3, r7, r3
    262c:	881b      	ldrh	r3, [r3, #0]
    262e:	4a35      	ldr	r2, [pc, #212]	; (2704 <spi_transceive_wait+0x138>)
    2630:	4293      	cmp	r3, r2
    2632:	d101      	bne.n	2638 <spi_transceive_wait+0x6c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2634:	2312      	movs	r3, #18
    2636:	e05e      	b.n	26f6 <spi_transceive_wait+0x12a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2638:	2316      	movs	r3, #22
    263a:	18fb      	adds	r3, r7, r3
    263c:	881a      	ldrh	r2, [r3, #0]
    263e:	2316      	movs	r3, #22
    2640:	18fb      	adds	r3, r7, r3
    2642:	3201      	adds	r2, #1
    2644:	801a      	strh	r2, [r3, #0]
    2646:	2316      	movs	r3, #22
    2648:	18fb      	adds	r3, r7, r3
    264a:	881b      	ldrh	r3, [r3, #0]
    264c:	4a2d      	ldr	r2, [pc, #180]	; (2704 <spi_transceive_wait+0x138>)
    264e:	4293      	cmp	r3, r2
    2650:	d9e3      	bls.n	261a <spi_transceive_wait+0x4e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	1c18      	adds	r0, r3, #0
    2658:	4b29      	ldr	r3, [pc, #164]	; (2700 <spi_transceive_wait+0x134>)
    265a:	4798      	blx	r3
    265c:	1c03      	adds	r3, r0, #0
    265e:	1c1a      	adds	r2, r3, #0
    2660:	2301      	movs	r3, #1
    2662:	4053      	eors	r3, r2
    2664:	b2db      	uxtb	r3, r3
    2666:	2b00      	cmp	r3, #0
    2668:	d1f4      	bne.n	2654 <spi_transceive_wait+0x88>
	}

	/* Write data */
	spi_write(module, tx_data);
    266a:	68fa      	ldr	r2, [r7, #12]
    266c:	230a      	movs	r3, #10
    266e:	18fb      	adds	r3, r7, r3
    2670:	881b      	ldrh	r3, [r3, #0]
    2672:	1c10      	adds	r0, r2, #0
    2674:	1c19      	adds	r1, r3, #0
    2676:	4b24      	ldr	r3, [pc, #144]	; (2708 <spi_transceive_wait+0x13c>)
    2678:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	795b      	ldrb	r3, [r3, #5]
    267e:	2b00      	cmp	r3, #0
    2680:	d120      	bne.n	26c4 <spi_transceive_wait+0xf8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2682:	2316      	movs	r3, #22
    2684:	18fb      	adds	r3, r7, r3
    2686:	2200      	movs	r2, #0
    2688:	801a      	strh	r2, [r3, #0]
    268a:	e015      	b.n	26b8 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	1c18      	adds	r0, r3, #0
    2690:	4b1e      	ldr	r3, [pc, #120]	; (270c <spi_transceive_wait+0x140>)
    2692:	4798      	blx	r3
    2694:	1e03      	subs	r3, r0, #0
    2696:	d000      	beq.n	269a <spi_transceive_wait+0xce>
				break;
    2698:	e014      	b.n	26c4 <spi_transceive_wait+0xf8>
			} else if (j == SPI_TIMEOUT) {
    269a:	2316      	movs	r3, #22
    269c:	18fb      	adds	r3, r7, r3
    269e:	881b      	ldrh	r3, [r3, #0]
    26a0:	4a18      	ldr	r2, [pc, #96]	; (2704 <spi_transceive_wait+0x138>)
    26a2:	4293      	cmp	r3, r2
    26a4:	d101      	bne.n	26aa <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    26a6:	2312      	movs	r3, #18
    26a8:	e025      	b.n	26f6 <spi_transceive_wait+0x12a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    26aa:	2316      	movs	r3, #22
    26ac:	18fb      	adds	r3, r7, r3
    26ae:	881a      	ldrh	r2, [r3, #0]
    26b0:	2316      	movs	r3, #22
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	3201      	adds	r2, #1
    26b6:	801a      	strh	r2, [r3, #0]
    26b8:	2316      	movs	r3, #22
    26ba:	18fb      	adds	r3, r7, r3
    26bc:	881b      	ldrh	r3, [r3, #0]
    26be:	4a11      	ldr	r2, [pc, #68]	; (2704 <spi_transceive_wait+0x138>)
    26c0:	4293      	cmp	r3, r2
    26c2:	d9e3      	bls.n	268c <spi_transceive_wait+0xc0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	1c18      	adds	r0, r3, #0
    26ca:	4b10      	ldr	r3, [pc, #64]	; (270c <spi_transceive_wait+0x140>)
    26cc:	4798      	blx	r3
    26ce:	1c03      	adds	r3, r0, #0
    26d0:	1c1a      	adds	r2, r3, #0
    26d2:	2301      	movs	r3, #1
    26d4:	4053      	eors	r3, r2
    26d6:	b2db      	uxtb	r3, r3
    26d8:	2b00      	cmp	r3, #0
    26da:	d1f4      	bne.n	26c6 <spi_transceive_wait+0xfa>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    26dc:	2315      	movs	r3, #21
    26de:	18fc      	adds	r4, r7, r3
    26e0:	68fa      	ldr	r2, [r7, #12]
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	1c10      	adds	r0, r2, #0
    26e6:	1c19      	adds	r1, r3, #0
    26e8:	4b09      	ldr	r3, [pc, #36]	; (2710 <spi_transceive_wait+0x144>)
    26ea:	4798      	blx	r3
    26ec:	1c03      	adds	r3, r0, #0
    26ee:	7023      	strb	r3, [r4, #0]

	return retval;
    26f0:	2315      	movs	r3, #21
    26f2:	18fb      	adds	r3, r7, r3
    26f4:	781b      	ldrb	r3, [r3, #0]
}
    26f6:	1c18      	adds	r0, r3, #0
    26f8:	46bd      	mov	sp, r7
    26fa:	b007      	add	sp, #28
    26fc:	bd90      	pop	{r4, r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	000020b5 	.word	0x000020b5
    2704:	00002710 	.word	0x00002710
    2708:	00002105 	.word	0x00002105
    270c:	000020dd 	.word	0x000020dd
    2710:	0000214d 	.word	0x0000214d

00002714 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2714:	b580      	push	{r7, lr}
    2716:	b086      	sub	sp, #24
    2718:	af00      	add	r7, sp, #0
    271a:	60f8      	str	r0, [r7, #12]
    271c:	60b9      	str	r1, [r7, #8]
    271e:	1dfb      	adds	r3, r7, #7
    2720:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2722:	68fb      	ldr	r3, [r7, #12]
    2724:	795b      	ldrb	r3, [r3, #5]
    2726:	2b01      	cmp	r3, #1
    2728:	d001      	beq.n	272e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    272a:	2315      	movs	r3, #21
    272c:	e05c      	b.n	27e8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    272e:	68fb      	ldr	r3, [r7, #12]
    2730:	7a1b      	ldrb	r3, [r3, #8]
    2732:	2201      	movs	r2, #1
    2734:	4053      	eors	r3, r2
    2736:	b2db      	uxtb	r3, r3
    2738:	2b00      	cmp	r3, #0
    273a:	d054      	beq.n	27e6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    273c:	1dfb      	adds	r3, r7, #7
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	2b00      	cmp	r3, #0
    2742:	d04a      	beq.n	27da <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    2744:	68bb      	ldr	r3, [r7, #8]
    2746:	785b      	ldrb	r3, [r3, #1]
    2748:	2b00      	cmp	r3, #0
    274a:	d03f      	beq.n	27cc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    274c:	68fb      	ldr	r3, [r7, #12]
    274e:	1c18      	adds	r0, r3, #0
    2750:	4b27      	ldr	r3, [pc, #156]	; (27f0 <spi_select_slave+0xdc>)
    2752:	4798      	blx	r3
    2754:	1c03      	adds	r3, r0, #0
    2756:	1c1a      	adds	r2, r3, #0
    2758:	2301      	movs	r3, #1
    275a:	4053      	eors	r3, r2
    275c:	b2db      	uxtb	r3, r3
    275e:	2b00      	cmp	r3, #0
    2760:	d007      	beq.n	2772 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    2762:	68bb      	ldr	r3, [r7, #8]
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	1c18      	adds	r0, r3, #0
    2768:	2101      	movs	r1, #1
    276a:	4b22      	ldr	r3, [pc, #136]	; (27f4 <spi_select_slave+0xe0>)
    276c:	4798      	blx	r3
					return STATUS_BUSY;
    276e:	2305      	movs	r3, #5
    2770:	e03a      	b.n	27e8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2772:	68bb      	ldr	r3, [r7, #8]
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	1c18      	adds	r0, r3, #0
    2778:	2100      	movs	r1, #0
    277a:	4b1e      	ldr	r3, [pc, #120]	; (27f4 <spi_select_slave+0xe0>)
    277c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    277e:	68bb      	ldr	r3, [r7, #8]
    2780:	789b      	ldrb	r3, [r3, #2]
    2782:	b29b      	uxth	r3, r3
    2784:	68fa      	ldr	r2, [r7, #12]
    2786:	1c10      	adds	r0, r2, #0
    2788:	1c19      	adds	r1, r3, #0
    278a:	4b1b      	ldr	r3, [pc, #108]	; (27f8 <spi_select_slave+0xe4>)
    278c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    278e:	68fb      	ldr	r3, [r7, #12]
    2790:	79db      	ldrb	r3, [r3, #7]
    2792:	2201      	movs	r2, #1
    2794:	4053      	eors	r3, r2
    2796:	b2db      	uxtb	r3, r3
    2798:	2b00      	cmp	r3, #0
    279a:	d024      	beq.n	27e6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    279c:	46c0      	nop			; (mov r8, r8)
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	1c18      	adds	r0, r3, #0
    27a2:	4b16      	ldr	r3, [pc, #88]	; (27fc <spi_select_slave+0xe8>)
    27a4:	4798      	blx	r3
    27a6:	1c03      	adds	r3, r0, #0
    27a8:	1c1a      	adds	r2, r3, #0
    27aa:	2301      	movs	r3, #1
    27ac:	4053      	eors	r3, r2
    27ae:	b2db      	uxtb	r3, r3
    27b0:	2b00      	cmp	r3, #0
    27b2:	d1f4      	bne.n	279e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    27b4:	2316      	movs	r3, #22
    27b6:	18fb      	adds	r3, r7, r3
    27b8:	2200      	movs	r2, #0
    27ba:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    27bc:	68fa      	ldr	r2, [r7, #12]
    27be:	2316      	movs	r3, #22
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	1c10      	adds	r0, r2, #0
    27c4:	1c19      	adds	r1, r3, #0
    27c6:	4b0e      	ldr	r3, [pc, #56]	; (2800 <spi_select_slave+0xec>)
    27c8:	4798      	blx	r3
    27ca:	e00c      	b.n	27e6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    27cc:	68bb      	ldr	r3, [r7, #8]
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	1c18      	adds	r0, r3, #0
    27d2:	2100      	movs	r1, #0
    27d4:	4b07      	ldr	r3, [pc, #28]	; (27f4 <spi_select_slave+0xe0>)
    27d6:	4798      	blx	r3
    27d8:	e005      	b.n	27e6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    27da:	68bb      	ldr	r3, [r7, #8]
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	1c18      	adds	r0, r3, #0
    27e0:	2101      	movs	r1, #1
    27e2:	4b04      	ldr	r3, [pc, #16]	; (27f4 <spi_select_slave+0xe0>)
    27e4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    27e6:	2300      	movs	r3, #0
}
    27e8:	1c18      	adds	r0, r3, #0
    27ea:	46bd      	mov	sp, r7
    27ec:	b006      	add	sp, #24
    27ee:	bd80      	pop	{r7, pc}
    27f0:	000020b5 	.word	0x000020b5
    27f4:	00001fd5 	.word	0x00001fd5
    27f8:	00002105 	.word	0x00002105
    27fc:	000020dd 	.word	0x000020dd
    2800:	0000214d 	.word	0x0000214d

00002804 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    2804:	b580      	push	{r7, lr}
    2806:	b084      	sub	sp, #16
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2816:	781b      	ldrb	r3, [r3, #0]
    2818:	b2da      	uxtb	r2, r3
    281a:	230e      	movs	r3, #14
    281c:	18fb      	adds	r3, r7, r3
    281e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2824:	1c5a      	adds	r2, r3, #1
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	799b      	ldrb	r3, [r3, #6]
    282e:	2b01      	cmp	r3, #1
    2830:	d112      	bne.n	2858 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2836:	781b      	ldrb	r3, [r3, #0]
    2838:	b2db      	uxtb	r3, r3
    283a:	021b      	lsls	r3, r3, #8
    283c:	b29a      	uxth	r2, r3
    283e:	230e      	movs	r3, #14
    2840:	18fb      	adds	r3, r7, r3
    2842:	881b      	ldrh	r3, [r3, #0]
    2844:	4313      	orrs	r3, r2
    2846:	b29a      	uxth	r2, r3
    2848:	230e      	movs	r3, #14
    284a:	18fb      	adds	r3, r7, r3
    284c:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2852:	1c5a      	adds	r2, r3, #1
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2858:	230e      	movs	r3, #14
    285a:	18fb      	adds	r3, r7, r3
    285c:	881b      	ldrh	r3, [r3, #0]
    285e:	05db      	lsls	r3, r3, #23
    2860:	0dda      	lsrs	r2, r3, #23
    2862:	68bb      	ldr	r3, [r7, #8]
    2864:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    286a:	b29b      	uxth	r3, r3
    286c:	3b01      	subs	r3, #1
    286e:	b29a      	uxth	r2, r3
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	869a      	strh	r2, [r3, #52]	; 0x34
}
    2874:	46bd      	mov	sp, r7
    2876:	b004      	add	sp, #16
    2878:	bd80      	pop	{r7, pc}
    287a:	46c0      	nop			; (mov r8, r8)

0000287c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    287c:	b580      	push	{r7, lr}
    287e:	b084      	sub	sp, #16
    2880:	af00      	add	r7, sp, #0
    2882:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	681b      	ldr	r3, [r3, #0]
    2888:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    288a:	4b07      	ldr	r3, [pc, #28]	; (28a8 <_spi_write_dummy+0x2c>)
    288c:	881b      	ldrh	r3, [r3, #0]
    288e:	1c1a      	adds	r2, r3, #0
    2890:	68fb      	ldr	r3, [r7, #12]
    2892:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2898:	b29b      	uxth	r3, r3
    289a:	3b01      	subs	r3, #1
    289c:	b29a      	uxth	r2, r3
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    28a2:	46bd      	mov	sp, r7
    28a4:	b004      	add	sp, #16
    28a6:	bd80      	pop	{r7, pc}
    28a8:	200000c0 	.word	0x200000c0

000028ac <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    28ac:	b580      	push	{r7, lr}
    28ae:	b084      	sub	sp, #16
    28b0:	af00      	add	r7, sp, #0
    28b2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    28ba:	230a      	movs	r3, #10
    28bc:	18fb      	adds	r3, r7, r3
    28be:	2200      	movs	r2, #0
    28c0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28c6:	230a      	movs	r3, #10
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    28d0:	b29b      	uxth	r3, r3
    28d2:	3b01      	subs	r3, #1
    28d4:	b29a      	uxth	r2, r3
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    28da:	46bd      	mov	sp, r7
    28dc:	b004      	add	sp, #16
    28de:	bd80      	pop	{r7, pc}

000028e0 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	b084      	sub	sp, #16
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28f2:	b29a      	uxth	r2, r3
    28f4:	230a      	movs	r3, #10
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	05d2      	lsls	r2, r2, #23
    28fa:	0dd2      	lsrs	r2, r2, #23
    28fc:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2902:	220a      	movs	r2, #10
    2904:	18ba      	adds	r2, r7, r2
    2906:	8812      	ldrh	r2, [r2, #0]
    2908:	b2d2      	uxtb	r2, r2
    290a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2910:	1c5a      	adds	r2, r3, #1
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	799b      	ldrb	r3, [r3, #6]
    291a:	2b01      	cmp	r3, #1
    291c:	d10d      	bne.n	293a <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2922:	220a      	movs	r2, #10
    2924:	18ba      	adds	r2, r7, r2
    2926:	8812      	ldrh	r2, [r2, #0]
    2928:	0a12      	lsrs	r2, r2, #8
    292a:	b292      	uxth	r2, r2
    292c:	b2d2      	uxtb	r2, r2
    292e:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2934:	1c5a      	adds	r2, r3, #1
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    293e:	b29b      	uxth	r3, r3
    2940:	3b01      	subs	r3, #1
    2942:	b29a      	uxth	r2, r3
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2948:	46bd      	mov	sp, r7
    294a:	b004      	add	sp, #16
    294c:	bd80      	pop	{r7, pc}
    294e:	46c0      	nop			; (mov r8, r8)

00002950 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2950:	b580      	push	{r7, lr}
    2952:	b086      	sub	sp, #24
    2954:	af00      	add	r7, sp, #0
    2956:	1c02      	adds	r2, r0, #0
    2958:	1dfb      	adds	r3, r7, #7
    295a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    295c:	1dfb      	adds	r3, r7, #7
    295e:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    2960:	4bb8      	ldr	r3, [pc, #736]	; (2c44 <_spi_interrupt_handler+0x2f4>)
    2962:	0092      	lsls	r2, r2, #2
    2964:	58d3      	ldr	r3, [r2, r3]
    2966:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2968:	697b      	ldr	r3, [r7, #20]
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    296e:	697b      	ldr	r3, [r7, #20]
    2970:	2237      	movs	r2, #55	; 0x37
    2972:	5c9a      	ldrb	r2, [r3, r2]
    2974:	697b      	ldr	r3, [r7, #20]
    2976:	2136      	movs	r1, #54	; 0x36
    2978:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    297a:	230f      	movs	r3, #15
    297c:	18fb      	adds	r3, r7, r3
    297e:	400a      	ands	r2, r1
    2980:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2982:	693b      	ldr	r3, [r7, #16]
    2984:	7e1b      	ldrb	r3, [r3, #24]
    2986:	b2da      	uxtb	r2, r3
    2988:	230c      	movs	r3, #12
    298a:	18fb      	adds	r3, r7, r3
    298c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    298e:	693b      	ldr	r3, [r7, #16]
    2990:	7d9b      	ldrb	r3, [r3, #22]
    2992:	b2db      	uxtb	r3, r3
    2994:	b29a      	uxth	r2, r3
    2996:	230c      	movs	r3, #12
    2998:	18fb      	adds	r3, r7, r3
    299a:	210c      	movs	r1, #12
    299c:	1879      	adds	r1, r7, r1
    299e:	8809      	ldrh	r1, [r1, #0]
    29a0:	400a      	ands	r2, r1
    29a2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    29a4:	230c      	movs	r3, #12
    29a6:	18fb      	adds	r3, r7, r3
    29a8:	881b      	ldrh	r3, [r3, #0]
    29aa:	2201      	movs	r2, #1
    29ac:	4013      	ands	r3, r2
    29ae:	d041      	beq.n	2a34 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    29b0:	697b      	ldr	r3, [r7, #20]
    29b2:	795b      	ldrb	r3, [r3, #5]
    29b4:	2b01      	cmp	r3, #1
    29b6:	d110      	bne.n	29da <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    29b8:	697b      	ldr	r3, [r7, #20]
    29ba:	7a5b      	ldrb	r3, [r3, #9]
    29bc:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    29be:	2b00      	cmp	r3, #0
    29c0:	d10b      	bne.n	29da <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    29c2:	697b      	ldr	r3, [r7, #20]
    29c4:	1c18      	adds	r0, r3, #0
    29c6:	4ba0      	ldr	r3, [pc, #640]	; (2c48 <_spi_interrupt_handler+0x2f8>)
    29c8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    29ca:	697b      	ldr	r3, [r7, #20]
    29cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    29ce:	b29b      	uxth	r3, r3
    29d0:	2b00      	cmp	r3, #0
    29d2:	d102      	bne.n	29da <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	2201      	movs	r2, #1
    29d8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    29da:	697b      	ldr	r3, [r7, #20]
    29dc:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    29de:	2b01      	cmp	r3, #1
    29e0:	d104      	bne.n	29ec <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    29e2:	697b      	ldr	r3, [r7, #20]
    29e4:	7a5b      	ldrb	r3, [r3, #9]
    29e6:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    29e8:	2b00      	cmp	r3, #0
    29ea:	d108      	bne.n	29fe <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    29ec:	697b      	ldr	r3, [r7, #20]
    29ee:	795b      	ldrb	r3, [r3, #5]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d11f      	bne.n	2a34 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    29f4:	697b      	ldr	r3, [r7, #20]
    29f6:	7a5b      	ldrb	r3, [r3, #9]
    29f8:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    29fa:	2b00      	cmp	r3, #0
    29fc:	d01a      	beq.n	2a34 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    29fe:	697b      	ldr	r3, [r7, #20]
    2a00:	1c18      	adds	r0, r3, #0
    2a02:	4b92      	ldr	r3, [pc, #584]	; (2c4c <_spi_interrupt_handler+0x2fc>)
    2a04:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    2a06:	697b      	ldr	r3, [r7, #20]
    2a08:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2a0a:	b29b      	uxth	r3, r3
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d111      	bne.n	2a34 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2a10:	693b      	ldr	r3, [r7, #16]
    2a12:	2201      	movs	r2, #1
    2a14:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    2a16:	697b      	ldr	r3, [r7, #20]
    2a18:	7a5b      	ldrb	r3, [r3, #9]
    2a1a:	b2db      	uxtb	r3, r3
    2a1c:	2b01      	cmp	r3, #1
    2a1e:	d109      	bne.n	2a34 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    2a20:	697b      	ldr	r3, [r7, #20]
    2a22:	79db      	ldrb	r3, [r3, #7]
    2a24:	2201      	movs	r2, #1
    2a26:	4053      	eors	r3, r2
    2a28:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d002      	beq.n	2a34 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2a2e:	693b      	ldr	r3, [r7, #16]
    2a30:	2202      	movs	r2, #2
    2a32:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2a34:	230c      	movs	r3, #12
    2a36:	18fb      	adds	r3, r7, r3
    2a38:	881b      	ldrh	r3, [r3, #0]
    2a3a:	2204      	movs	r2, #4
    2a3c:	4013      	ands	r3, r2
    2a3e:	d100      	bne.n	2a42 <_spi_interrupt_handler+0xf2>
    2a40:	e07e      	b.n	2b40 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2a42:	693b      	ldr	r3, [r7, #16]
    2a44:	8b5b      	ldrh	r3, [r3, #26]
    2a46:	b29b      	uxth	r3, r3
    2a48:	1c1a      	adds	r2, r3, #0
    2a4a:	2304      	movs	r3, #4
    2a4c:	4013      	ands	r3, r2
    2a4e:	d022      	beq.n	2a96 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2a50:	697b      	ldr	r3, [r7, #20]
    2a52:	7a5b      	ldrb	r3, [r3, #9]
    2a54:	b2db      	uxtb	r3, r3
    2a56:	2b01      	cmp	r3, #1
    2a58:	d014      	beq.n	2a84 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2a5a:	697b      	ldr	r3, [r7, #20]
    2a5c:	2238      	movs	r2, #56	; 0x38
    2a5e:	211e      	movs	r1, #30
    2a60:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2a62:	697b      	ldr	r3, [r7, #20]
    2a64:	2203      	movs	r2, #3
    2a66:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2a68:	693b      	ldr	r3, [r7, #16]
    2a6a:	2205      	movs	r2, #5
    2a6c:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2a6e:	230f      	movs	r3, #15
    2a70:	18fb      	adds	r3, r7, r3
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	2208      	movs	r2, #8
    2a76:	4013      	ands	r3, r2
    2a78:	d004      	beq.n	2a84 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2a7a:	697b      	ldr	r3, [r7, #20]
    2a7c:	699b      	ldr	r3, [r3, #24]
    2a7e:	697a      	ldr	r2, [r7, #20]
    2a80:	1c10      	adds	r0, r2, #0
    2a82:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2a84:	693b      	ldr	r3, [r7, #16]
    2a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2a88:	230a      	movs	r3, #10
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2a8e:	693b      	ldr	r3, [r7, #16]
    2a90:	2204      	movs	r2, #4
    2a92:	835a      	strh	r2, [r3, #26]
    2a94:	e054      	b.n	2b40 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    2a96:	697b      	ldr	r3, [r7, #20]
    2a98:	7a5b      	ldrb	r3, [r3, #9]
    2a9a:	b2db      	uxtb	r3, r3
    2a9c:	2b01      	cmp	r3, #1
    2a9e:	d11e      	bne.n	2ade <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    2aa0:	697b      	ldr	r3, [r7, #20]
    2aa2:	1c18      	adds	r0, r3, #0
    2aa4:	4b6a      	ldr	r3, [pc, #424]	; (2c50 <_spi_interrupt_handler+0x300>)
    2aa6:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    2aa8:	697b      	ldr	r3, [r7, #20]
    2aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2aac:	b29b      	uxth	r3, r3
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d146      	bne.n	2b40 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2ab2:	693b      	ldr	r3, [r7, #16]
    2ab4:	2204      	movs	r2, #4
    2ab6:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    2ab8:	697b      	ldr	r3, [r7, #20]
    2aba:	2238      	movs	r2, #56	; 0x38
    2abc:	2100      	movs	r1, #0
    2abe:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    2ac0:	697b      	ldr	r3, [r7, #20]
    2ac2:	2203      	movs	r2, #3
    2ac4:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    2ac6:	230f      	movs	r3, #15
    2ac8:	18fb      	adds	r3, r7, r3
    2aca:	781b      	ldrb	r3, [r3, #0]
    2acc:	2201      	movs	r2, #1
    2ace:	4013      	ands	r3, r2
    2ad0:	d036      	beq.n	2b40 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2ad2:	697b      	ldr	r3, [r7, #20]
    2ad4:	68db      	ldr	r3, [r3, #12]
    2ad6:	697a      	ldr	r2, [r7, #20]
    2ad8:	1c10      	adds	r0, r2, #0
    2ada:	4798      	blx	r3
    2adc:	e030      	b.n	2b40 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    2ade:	697b      	ldr	r3, [r7, #20]
    2ae0:	1c18      	adds	r0, r3, #0
    2ae2:	4b5c      	ldr	r3, [pc, #368]	; (2c54 <_spi_interrupt_handler+0x304>)
    2ae4:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    2ae6:	697b      	ldr	r3, [r7, #20]
    2ae8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2aea:	b29b      	uxth	r3, r3
    2aec:	2b00      	cmp	r3, #0
    2aee:	d127      	bne.n	2b40 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    2af0:	697b      	ldr	r3, [r7, #20]
    2af2:	2238      	movs	r2, #56	; 0x38
    2af4:	2100      	movs	r1, #0
    2af6:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2af8:	693b      	ldr	r3, [r7, #16]
    2afa:	2204      	movs	r2, #4
    2afc:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2afe:	697b      	ldr	r3, [r7, #20]
    2b00:	7a5b      	ldrb	r3, [r3, #9]
    2b02:	b2db      	uxtb	r3, r3
    2b04:	2b02      	cmp	r3, #2
    2b06:	d10b      	bne.n	2b20 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2b08:	230f      	movs	r3, #15
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	2204      	movs	r2, #4
    2b10:	4013      	ands	r3, r2
    2b12:	d015      	beq.n	2b40 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2b14:	697b      	ldr	r3, [r7, #20]
    2b16:	695b      	ldr	r3, [r3, #20]
    2b18:	697a      	ldr	r2, [r7, #20]
    2b1a:	1c10      	adds	r0, r2, #0
    2b1c:	4798      	blx	r3
    2b1e:	e00f      	b.n	2b40 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    2b20:	697b      	ldr	r3, [r7, #20]
    2b22:	7a5b      	ldrb	r3, [r3, #9]
    2b24:	b2db      	uxtb	r3, r3
    2b26:	2b00      	cmp	r3, #0
    2b28:	d10a      	bne.n	2b40 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2b2a:	230f      	movs	r3, #15
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	781b      	ldrb	r3, [r3, #0]
    2b30:	2202      	movs	r2, #2
    2b32:	4013      	ands	r3, r2
    2b34:	d004      	beq.n	2b40 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2b36:	697b      	ldr	r3, [r7, #20]
    2b38:	691b      	ldr	r3, [r3, #16]
    2b3a:	697a      	ldr	r2, [r7, #20]
    2b3c:	1c10      	adds	r0, r2, #0
    2b3e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2b40:	230c      	movs	r3, #12
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	881b      	ldrh	r3, [r3, #0]
    2b46:	2202      	movs	r2, #2
    2b48:	4013      	ands	r3, r2
    2b4a:	d046      	beq.n	2bda <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    2b4c:	697b      	ldr	r3, [r7, #20]
    2b4e:	795b      	ldrb	r3, [r3, #5]
    2b50:	2b00      	cmp	r3, #0
    2b52:	d11d      	bne.n	2b90 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    2b54:	693b      	ldr	r3, [r7, #16]
    2b56:	2207      	movs	r2, #7
    2b58:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2b5a:	693b      	ldr	r3, [r7, #16]
    2b5c:	2202      	movs	r2, #2
    2b5e:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	2203      	movs	r2, #3
    2b64:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    2b66:	697b      	ldr	r3, [r7, #20]
    2b68:	2200      	movs	r2, #0
    2b6a:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    2b6c:	697b      	ldr	r3, [r7, #20]
    2b6e:	2200      	movs	r2, #0
    2b70:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    2b72:	697b      	ldr	r3, [r7, #20]
    2b74:	2238      	movs	r2, #56	; 0x38
    2b76:	2100      	movs	r1, #0
    2b78:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    2b7a:	230f      	movs	r3, #15
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	781b      	ldrb	r3, [r3, #0]
    2b80:	2210      	movs	r2, #16
    2b82:	4013      	ands	r3, r2
    2b84:	d004      	beq.n	2b90 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    2b86:	697b      	ldr	r3, [r7, #20]
    2b88:	69db      	ldr	r3, [r3, #28]
    2b8a:	697a      	ldr	r2, [r7, #20]
    2b8c:	1c10      	adds	r0, r2, #0
    2b8e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2b90:	697b      	ldr	r3, [r7, #20]
    2b92:	795b      	ldrb	r3, [r3, #5]
    2b94:	2b01      	cmp	r3, #1
    2b96:	d120      	bne.n	2bda <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	7a5b      	ldrb	r3, [r3, #9]
    2b9c:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2b9e:	2b01      	cmp	r3, #1
    2ba0:	d11b      	bne.n	2bda <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2ba2:	697b      	ldr	r3, [r7, #20]
    2ba4:	79db      	ldrb	r3, [r3, #7]
    2ba6:	2201      	movs	r2, #1
    2ba8:	4053      	eors	r3, r2
    2baa:	b2db      	uxtb	r3, r3
    2bac:	2b00      	cmp	r3, #0
    2bae:	d014      	beq.n	2bda <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2bb0:	693b      	ldr	r3, [r7, #16]
    2bb2:	2202      	movs	r2, #2
    2bb4:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    2bb6:	697b      	ldr	r3, [r7, #20]
    2bb8:	2203      	movs	r2, #3
    2bba:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    2bbc:	697b      	ldr	r3, [r7, #20]
    2bbe:	2238      	movs	r2, #56	; 0x38
    2bc0:	2100      	movs	r1, #0
    2bc2:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2bc4:	230f      	movs	r3, #15
    2bc6:	18fb      	adds	r3, r7, r3
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	2201      	movs	r2, #1
    2bcc:	4013      	ands	r3, r2
    2bce:	d004      	beq.n	2bda <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2bd0:	697b      	ldr	r3, [r7, #20]
    2bd2:	68db      	ldr	r3, [r3, #12]
    2bd4:	697a      	ldr	r2, [r7, #20]
    2bd6:	1c10      	adds	r0, r2, #0
    2bd8:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    2bda:	230c      	movs	r3, #12
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	881b      	ldrh	r3, [r3, #0]
    2be0:	2208      	movs	r2, #8
    2be2:	4013      	ands	r3, r2
    2be4:	d014      	beq.n	2c10 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    2be6:	697b      	ldr	r3, [r7, #20]
    2be8:	795b      	ldrb	r3, [r3, #5]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d110      	bne.n	2c10 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2208      	movs	r2, #8
    2bf2:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2bf4:	693b      	ldr	r3, [r7, #16]
    2bf6:	2208      	movs	r2, #8
    2bf8:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    2bfa:	230f      	movs	r3, #15
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	781b      	ldrb	r3, [r3, #0]
    2c00:	2220      	movs	r2, #32
    2c02:	4013      	ands	r3, r2
    2c04:	d004      	beq.n	2c10 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    2c06:	697b      	ldr	r3, [r7, #20]
    2c08:	6a1b      	ldr	r3, [r3, #32]
    2c0a:	697a      	ldr	r2, [r7, #20]
    2c0c:	1c10      	adds	r0, r2, #0
    2c0e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2c10:	230c      	movs	r3, #12
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	881b      	ldrh	r3, [r3, #0]
    2c16:	2280      	movs	r2, #128	; 0x80
    2c18:	4013      	ands	r3, r2
    2c1a:	d010      	beq.n	2c3e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2c1c:	693b      	ldr	r3, [r7, #16]
    2c1e:	2280      	movs	r2, #128	; 0x80
    2c20:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2c22:	693b      	ldr	r3, [r7, #16]
    2c24:	2280      	movs	r2, #128	; 0x80
    2c26:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2c28:	230f      	movs	r3, #15
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	2240      	movs	r2, #64	; 0x40
    2c30:	4013      	ands	r3, r2
    2c32:	d004      	beq.n	2c3e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2c34:	697b      	ldr	r3, [r7, #20]
    2c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c38:	697a      	ldr	r2, [r7, #20]
    2c3a:	1c10      	adds	r0, r2, #0
    2c3c:	4798      	blx	r3
		}
	}
#  endif
}
    2c3e:	46bd      	mov	sp, r7
    2c40:	b006      	add	sp, #24
    2c42:	bd80      	pop	{r7, pc}
    2c44:	200000c4 	.word	0x200000c4
    2c48:	0000287d 	.word	0x0000287d
    2c4c:	00002805 	.word	0x00002805
    2c50:	000028ad 	.word	0x000028ad
    2c54:	000028e1 	.word	0x000028e1

00002c58 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b082      	sub	sp, #8
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	2200      	movs	r2, #0
    2c64:	701a      	strb	r2, [r3, #0]
}
    2c66:	46bd      	mov	sp, r7
    2c68:	b002      	add	sp, #8
    2c6a:	bd80      	pop	{r7, pc}

00002c6c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b086      	sub	sp, #24
    2c70:	af00      	add	r7, sp, #0
    2c72:	60f8      	str	r0, [r7, #12]
    2c74:	60b9      	str	r1, [r7, #8]
    2c76:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    2c78:	2316      	movs	r3, #22
    2c7a:	18fb      	adds	r3, r7, r3
    2c7c:	2200      	movs	r2, #0
    2c7e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2c80:	68bb      	ldr	r3, [r7, #8]
    2c82:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2c84:	68bb      	ldr	r3, [r7, #8]
    2c86:	085a      	lsrs	r2, r3, #1
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	d201      	bcs.n	2c92 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2c8e:	2340      	movs	r3, #64	; 0x40
    2c90:	e026      	b.n	2ce0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2c92:	68bb      	ldr	r3, [r7, #8]
    2c94:	085b      	lsrs	r3, r3, #1
    2c96:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    2c98:	e00a      	b.n	2cb0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2c9a:	693a      	ldr	r2, [r7, #16]
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	1ad3      	subs	r3, r2, r3
    2ca0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2ca2:	2316      	movs	r3, #22
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	881a      	ldrh	r2, [r3, #0]
    2ca8:	2316      	movs	r3, #22
    2caa:	18fb      	adds	r3, r7, r3
    2cac:	3201      	adds	r2, #1
    2cae:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2cb0:	693a      	ldr	r2, [r7, #16]
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d2f0      	bcs.n	2c9a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    2cb8:	2316      	movs	r3, #22
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	2216      	movs	r2, #22
    2cbe:	18ba      	adds	r2, r7, r2
    2cc0:	8812      	ldrh	r2, [r2, #0]
    2cc2:	3a01      	subs	r2, #1
    2cc4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2cc6:	2316      	movs	r3, #22
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	881b      	ldrh	r3, [r3, #0]
    2ccc:	2bff      	cmp	r3, #255	; 0xff
    2cce:	d901      	bls.n	2cd4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2cd0:	2340      	movs	r3, #64	; 0x40
    2cd2:	e005      	b.n	2ce0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	2216      	movs	r2, #22
    2cd8:	18ba      	adds	r2, r7, r2
    2cda:	8812      	ldrh	r2, [r2, #0]
    2cdc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2cde:	2300      	movs	r3, #0
	}
}
    2ce0:	1c18      	adds	r0, r3, #0
    2ce2:	46bd      	mov	sp, r7
    2ce4:	b006      	add	sp, #24
    2ce6:	bd80      	pop	{r7, pc}

00002ce8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b084      	sub	sp, #16
    2cec:	af00      	add	r7, sp, #0
    2cee:	1c02      	adds	r2, r0, #0
    2cf0:	1dfb      	adds	r3, r7, #7
    2cf2:	701a      	strb	r2, [r3, #0]
    2cf4:	1dbb      	adds	r3, r7, #6
    2cf6:	1c0a      	adds	r2, r1, #0
    2cf8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2cfa:	4b1a      	ldr	r3, [pc, #104]	; (2d64 <sercom_set_gclk_generator+0x7c>)
    2cfc:	781b      	ldrb	r3, [r3, #0]
    2cfe:	2201      	movs	r2, #1
    2d00:	4053      	eors	r3, r2
    2d02:	b2db      	uxtb	r3, r3
    2d04:	2b00      	cmp	r3, #0
    2d06:	d103      	bne.n	2d10 <sercom_set_gclk_generator+0x28>
    2d08:	1dbb      	adds	r3, r7, #6
    2d0a:	781b      	ldrb	r3, [r3, #0]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d01b      	beq.n	2d48 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2d10:	230c      	movs	r3, #12
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	1c18      	adds	r0, r3, #0
    2d16:	4b14      	ldr	r3, [pc, #80]	; (2d68 <sercom_set_gclk_generator+0x80>)
    2d18:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2d1a:	230c      	movs	r3, #12
    2d1c:	18fb      	adds	r3, r7, r3
    2d1e:	1dfa      	adds	r2, r7, #7
    2d20:	7812      	ldrb	r2, [r2, #0]
    2d22:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2d24:	230c      	movs	r3, #12
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	2013      	movs	r0, #19
    2d2a:	1c19      	adds	r1, r3, #0
    2d2c:	4b0f      	ldr	r3, [pc, #60]	; (2d6c <sercom_set_gclk_generator+0x84>)
    2d2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2d30:	2013      	movs	r0, #19
    2d32:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <sercom_set_gclk_generator+0x88>)
    2d34:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    2d36:	4b0b      	ldr	r3, [pc, #44]	; (2d64 <sercom_set_gclk_generator+0x7c>)
    2d38:	1dfa      	adds	r2, r7, #7
    2d3a:	7812      	ldrb	r2, [r2, #0]
    2d3c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2d3e:	4b09      	ldr	r3, [pc, #36]	; (2d64 <sercom_set_gclk_generator+0x7c>)
    2d40:	2201      	movs	r2, #1
    2d42:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2d44:	2300      	movs	r3, #0
    2d46:	e008      	b.n	2d5a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2d48:	4b06      	ldr	r3, [pc, #24]	; (2d64 <sercom_set_gclk_generator+0x7c>)
    2d4a:	785b      	ldrb	r3, [r3, #1]
    2d4c:	1dfa      	adds	r2, r7, #7
    2d4e:	7812      	ldrb	r2, [r2, #0]
    2d50:	429a      	cmp	r2, r3
    2d52:	d101      	bne.n	2d58 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    2d54:	2300      	movs	r3, #0
    2d56:	e000      	b.n	2d5a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2d58:	231d      	movs	r3, #29
}
    2d5a:	1c18      	adds	r0, r3, #0
    2d5c:	46bd      	mov	sp, r7
    2d5e:	b004      	add	sp, #16
    2d60:	bd80      	pop	{r7, pc}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	20000020 	.word	0x20000020
    2d68:	00002c59 	.word	0x00002c59
    2d6c:	00003b01 	.word	0x00003b01
    2d70:	00003b45 	.word	0x00003b45

00002d74 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	1c0a      	adds	r2, r1, #0
    2d7e:	1cfb      	adds	r3, r7, #3
    2d80:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	4a4d      	ldr	r2, [pc, #308]	; (2ebc <_sercom_get_default_pad+0x148>)
    2d86:	4293      	cmp	r3, r2
    2d88:	d03f      	beq.n	2e0a <_sercom_get_default_pad+0x96>
    2d8a:	4a4c      	ldr	r2, [pc, #304]	; (2ebc <_sercom_get_default_pad+0x148>)
    2d8c:	4293      	cmp	r3, r2
    2d8e:	d806      	bhi.n	2d9e <_sercom_get_default_pad+0x2a>
    2d90:	4a4b      	ldr	r2, [pc, #300]	; (2ec0 <_sercom_get_default_pad+0x14c>)
    2d92:	4293      	cmp	r3, r2
    2d94:	d00f      	beq.n	2db6 <_sercom_get_default_pad+0x42>
    2d96:	4a4b      	ldr	r2, [pc, #300]	; (2ec4 <_sercom_get_default_pad+0x150>)
    2d98:	4293      	cmp	r3, r2
    2d9a:	d021      	beq.n	2de0 <_sercom_get_default_pad+0x6c>
    2d9c:	e089      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2d9e:	4a4a      	ldr	r2, [pc, #296]	; (2ec8 <_sercom_get_default_pad+0x154>)
    2da0:	4293      	cmp	r3, r2
    2da2:	d100      	bne.n	2da6 <_sercom_get_default_pad+0x32>
    2da4:	e05b      	b.n	2e5e <_sercom_get_default_pad+0xea>
    2da6:	4a49      	ldr	r2, [pc, #292]	; (2ecc <_sercom_get_default_pad+0x158>)
    2da8:	4293      	cmp	r3, r2
    2daa:	d100      	bne.n	2dae <_sercom_get_default_pad+0x3a>
    2dac:	e06c      	b.n	2e88 <_sercom_get_default_pad+0x114>
    2dae:	4a48      	ldr	r2, [pc, #288]	; (2ed0 <_sercom_get_default_pad+0x15c>)
    2db0:	4293      	cmp	r3, r2
    2db2:	d03f      	beq.n	2e34 <_sercom_get_default_pad+0xc0>
    2db4:	e07d      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2db6:	1cfb      	adds	r3, r7, #3
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	2b01      	cmp	r3, #1
    2dbc:	d00a      	beq.n	2dd4 <_sercom_get_default_pad+0x60>
    2dbe:	dc02      	bgt.n	2dc6 <_sercom_get_default_pad+0x52>
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d005      	beq.n	2dd0 <_sercom_get_default_pad+0x5c>
    2dc4:	e075      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2dc6:	2b02      	cmp	r3, #2
    2dc8:	d006      	beq.n	2dd8 <_sercom_get_default_pad+0x64>
    2dca:	2b03      	cmp	r3, #3
    2dcc:	d006      	beq.n	2ddc <_sercom_get_default_pad+0x68>
    2dce:	e070      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2dd0:	4b40      	ldr	r3, [pc, #256]	; (2ed4 <_sercom_get_default_pad+0x160>)
    2dd2:	e06f      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2dd4:	4b40      	ldr	r3, [pc, #256]	; (2ed8 <_sercom_get_default_pad+0x164>)
    2dd6:	e06d      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2dd8:	4b40      	ldr	r3, [pc, #256]	; (2edc <_sercom_get_default_pad+0x168>)
    2dda:	e06b      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2ddc:	4b40      	ldr	r3, [pc, #256]	; (2ee0 <_sercom_get_default_pad+0x16c>)
    2dde:	e069      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2de0:	1cfb      	adds	r3, r7, #3
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	2b01      	cmp	r3, #1
    2de6:	d00a      	beq.n	2dfe <_sercom_get_default_pad+0x8a>
    2de8:	dc02      	bgt.n	2df0 <_sercom_get_default_pad+0x7c>
    2dea:	2b00      	cmp	r3, #0
    2dec:	d005      	beq.n	2dfa <_sercom_get_default_pad+0x86>
    2dee:	e060      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2df0:	2b02      	cmp	r3, #2
    2df2:	d006      	beq.n	2e02 <_sercom_get_default_pad+0x8e>
    2df4:	2b03      	cmp	r3, #3
    2df6:	d006      	beq.n	2e06 <_sercom_get_default_pad+0x92>
    2df8:	e05b      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2dfa:	2303      	movs	r3, #3
    2dfc:	e05a      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2dfe:	4b39      	ldr	r3, [pc, #228]	; (2ee4 <_sercom_get_default_pad+0x170>)
    2e00:	e058      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e02:	4b39      	ldr	r3, [pc, #228]	; (2ee8 <_sercom_get_default_pad+0x174>)
    2e04:	e056      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e06:	4b39      	ldr	r3, [pc, #228]	; (2eec <_sercom_get_default_pad+0x178>)
    2e08:	e054      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e0a:	1cfb      	adds	r3, r7, #3
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d00a      	beq.n	2e28 <_sercom_get_default_pad+0xb4>
    2e12:	dc02      	bgt.n	2e1a <_sercom_get_default_pad+0xa6>
    2e14:	2b00      	cmp	r3, #0
    2e16:	d005      	beq.n	2e24 <_sercom_get_default_pad+0xb0>
    2e18:	e04b      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e1a:	2b02      	cmp	r3, #2
    2e1c:	d006      	beq.n	2e2c <_sercom_get_default_pad+0xb8>
    2e1e:	2b03      	cmp	r3, #3
    2e20:	d006      	beq.n	2e30 <_sercom_get_default_pad+0xbc>
    2e22:	e046      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e24:	4b32      	ldr	r3, [pc, #200]	; (2ef0 <_sercom_get_default_pad+0x17c>)
    2e26:	e045      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e28:	4b32      	ldr	r3, [pc, #200]	; (2ef4 <_sercom_get_default_pad+0x180>)
    2e2a:	e043      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e2c:	4b32      	ldr	r3, [pc, #200]	; (2ef8 <_sercom_get_default_pad+0x184>)
    2e2e:	e041      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e30:	4b32      	ldr	r3, [pc, #200]	; (2efc <_sercom_get_default_pad+0x188>)
    2e32:	e03f      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e34:	1cfb      	adds	r3, r7, #3
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	2b01      	cmp	r3, #1
    2e3a:	d00a      	beq.n	2e52 <_sercom_get_default_pad+0xde>
    2e3c:	dc02      	bgt.n	2e44 <_sercom_get_default_pad+0xd0>
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d005      	beq.n	2e4e <_sercom_get_default_pad+0xda>
    2e42:	e036      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e44:	2b02      	cmp	r3, #2
    2e46:	d006      	beq.n	2e56 <_sercom_get_default_pad+0xe2>
    2e48:	2b03      	cmp	r3, #3
    2e4a:	d006      	beq.n	2e5a <_sercom_get_default_pad+0xe6>
    2e4c:	e031      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e4e:	4b2c      	ldr	r3, [pc, #176]	; (2f00 <_sercom_get_default_pad+0x18c>)
    2e50:	e030      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e52:	4b2c      	ldr	r3, [pc, #176]	; (2f04 <_sercom_get_default_pad+0x190>)
    2e54:	e02e      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e56:	4b2c      	ldr	r3, [pc, #176]	; (2f08 <_sercom_get_default_pad+0x194>)
    2e58:	e02c      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e5a:	4b2c      	ldr	r3, [pc, #176]	; (2f0c <_sercom_get_default_pad+0x198>)
    2e5c:	e02a      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e5e:	1cfb      	adds	r3, r7, #3
    2e60:	781b      	ldrb	r3, [r3, #0]
    2e62:	2b01      	cmp	r3, #1
    2e64:	d00a      	beq.n	2e7c <_sercom_get_default_pad+0x108>
    2e66:	dc02      	bgt.n	2e6e <_sercom_get_default_pad+0xfa>
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d005      	beq.n	2e78 <_sercom_get_default_pad+0x104>
    2e6c:	e021      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e6e:	2b02      	cmp	r3, #2
    2e70:	d006      	beq.n	2e80 <_sercom_get_default_pad+0x10c>
    2e72:	2b03      	cmp	r3, #3
    2e74:	d006      	beq.n	2e84 <_sercom_get_default_pad+0x110>
    2e76:	e01c      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e78:	4b25      	ldr	r3, [pc, #148]	; (2f10 <_sercom_get_default_pad+0x19c>)
    2e7a:	e01b      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e7c:	4b25      	ldr	r3, [pc, #148]	; (2f14 <_sercom_get_default_pad+0x1a0>)
    2e7e:	e019      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e80:	4b25      	ldr	r3, [pc, #148]	; (2f18 <_sercom_get_default_pad+0x1a4>)
    2e82:	e017      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e84:	4b25      	ldr	r3, [pc, #148]	; (2f1c <_sercom_get_default_pad+0x1a8>)
    2e86:	e015      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2e88:	1cfb      	adds	r3, r7, #3
    2e8a:	781b      	ldrb	r3, [r3, #0]
    2e8c:	2b01      	cmp	r3, #1
    2e8e:	d00a      	beq.n	2ea6 <_sercom_get_default_pad+0x132>
    2e90:	dc02      	bgt.n	2e98 <_sercom_get_default_pad+0x124>
    2e92:	2b00      	cmp	r3, #0
    2e94:	d005      	beq.n	2ea2 <_sercom_get_default_pad+0x12e>
    2e96:	e00c      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2e98:	2b02      	cmp	r3, #2
    2e9a:	d006      	beq.n	2eaa <_sercom_get_default_pad+0x136>
    2e9c:	2b03      	cmp	r3, #3
    2e9e:	d006      	beq.n	2eae <_sercom_get_default_pad+0x13a>
    2ea0:	e007      	b.n	2eb2 <_sercom_get_default_pad+0x13e>
    2ea2:	4b1f      	ldr	r3, [pc, #124]	; (2f20 <_sercom_get_default_pad+0x1ac>)
    2ea4:	e006      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2ea6:	4b1f      	ldr	r3, [pc, #124]	; (2f24 <_sercom_get_default_pad+0x1b0>)
    2ea8:	e004      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2eaa:	4b1f      	ldr	r3, [pc, #124]	; (2f28 <_sercom_get_default_pad+0x1b4>)
    2eac:	e002      	b.n	2eb4 <_sercom_get_default_pad+0x140>
    2eae:	4b1f      	ldr	r3, [pc, #124]	; (2f2c <_sercom_get_default_pad+0x1b8>)
    2eb0:	e000      	b.n	2eb4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2eb2:	2300      	movs	r3, #0
}
    2eb4:	1c18      	adds	r0, r3, #0
    2eb6:	46bd      	mov	sp, r7
    2eb8:	b002      	add	sp, #8
    2eba:	bd80      	pop	{r7, pc}
    2ebc:	42001000 	.word	0x42001000
    2ec0:	42000800 	.word	0x42000800
    2ec4:	42000c00 	.word	0x42000c00
    2ec8:	42001800 	.word	0x42001800
    2ecc:	42001c00 	.word	0x42001c00
    2ed0:	42001400 	.word	0x42001400
    2ed4:	00040003 	.word	0x00040003
    2ed8:	00050003 	.word	0x00050003
    2edc:	00060003 	.word	0x00060003
    2ee0:	00070003 	.word	0x00070003
    2ee4:	00010003 	.word	0x00010003
    2ee8:	001e0003 	.word	0x001e0003
    2eec:	001f0003 	.word	0x001f0003
    2ef0:	00080003 	.word	0x00080003
    2ef4:	00090003 	.word	0x00090003
    2ef8:	000a0003 	.word	0x000a0003
    2efc:	000b0003 	.word	0x000b0003
    2f00:	00100003 	.word	0x00100003
    2f04:	00110003 	.word	0x00110003
    2f08:	00120003 	.word	0x00120003
    2f0c:	00130003 	.word	0x00130003
    2f10:	000c0003 	.word	0x000c0003
    2f14:	000d0003 	.word	0x000d0003
    2f18:	000e0003 	.word	0x000e0003
    2f1c:	000f0003 	.word	0x000f0003
    2f20:	00160003 	.word	0x00160003
    2f24:	00170003 	.word	0x00170003
    2f28:	00180003 	.word	0x00180003
    2f2c:	00190003 	.word	0x00190003

00002f30 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2f30:	b590      	push	{r4, r7, lr}
    2f32:	b08b      	sub	sp, #44	; 0x2c
    2f34:	af00      	add	r7, sp, #0
    2f36:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2f38:	230c      	movs	r3, #12
    2f3a:	18fb      	adds	r3, r7, r3
    2f3c:	4a0e      	ldr	r2, [pc, #56]	; (2f78 <_sercom_get_sercom_inst_index+0x48>)
    2f3e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2f40:	c313      	stmia	r3!, {r0, r1, r4}
    2f42:	ca13      	ldmia	r2!, {r0, r1, r4}
    2f44:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f46:	2300      	movs	r3, #0
    2f48:	627b      	str	r3, [r7, #36]	; 0x24
    2f4a:	e00d      	b.n	2f68 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	220c      	movs	r2, #12
    2f50:	18ba      	adds	r2, r7, r2
    2f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2f54:	0089      	lsls	r1, r1, #2
    2f56:	588a      	ldr	r2, [r1, r2]
    2f58:	4293      	cmp	r3, r2
    2f5a:	d102      	bne.n	2f62 <_sercom_get_sercom_inst_index+0x32>
			return i;
    2f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f5e:	b2db      	uxtb	r3, r3
    2f60:	e006      	b.n	2f70 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f64:	3301      	adds	r3, #1
    2f66:	627b      	str	r3, [r7, #36]	; 0x24
    2f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f6a:	2b05      	cmp	r3, #5
    2f6c:	d9ee      	bls.n	2f4c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2f6e:	2300      	movs	r3, #0
}
    2f70:	1c18      	adds	r0, r3, #0
    2f72:	46bd      	mov	sp, r7
    2f74:	b00b      	add	sp, #44	; 0x2c
    2f76:	bd90      	pop	{r4, r7, pc}
    2f78:	00007fb0 	.word	0x00007fb0

00002f7c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b082      	sub	sp, #8
    2f80:	af00      	add	r7, sp, #0
    2f82:	1c02      	adds	r2, r0, #0
    2f84:	1dfb      	adds	r3, r7, #7
    2f86:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)

00002f90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2f90:	b580      	push	{r7, lr}
    2f92:	b084      	sub	sp, #16
    2f94:	af00      	add	r7, sp, #0
    2f96:	1c02      	adds	r2, r0, #0
    2f98:	6039      	str	r1, [r7, #0]
    2f9a:	1dfb      	adds	r3, r7, #7
    2f9c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2f9e:	4b13      	ldr	r3, [pc, #76]	; (2fec <_sercom_set_handler+0x5c>)
    2fa0:	781b      	ldrb	r3, [r3, #0]
    2fa2:	2201      	movs	r2, #1
    2fa4:	4053      	eors	r3, r2
    2fa6:	b2db      	uxtb	r3, r3
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d015      	beq.n	2fd8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fac:	2300      	movs	r3, #0
    2fae:	60fb      	str	r3, [r7, #12]
    2fb0:	e00c      	b.n	2fcc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2fb2:	4b0f      	ldr	r3, [pc, #60]	; (2ff0 <_sercom_set_handler+0x60>)
    2fb4:	68fa      	ldr	r2, [r7, #12]
    2fb6:	0092      	lsls	r2, r2, #2
    2fb8:	490e      	ldr	r1, [pc, #56]	; (2ff4 <_sercom_set_handler+0x64>)
    2fba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2fbc:	4b0e      	ldr	r3, [pc, #56]	; (2ff8 <_sercom_set_handler+0x68>)
    2fbe:	68fa      	ldr	r2, [r7, #12]
    2fc0:	0092      	lsls	r2, r2, #2
    2fc2:	2100      	movs	r1, #0
    2fc4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fc6:	68fb      	ldr	r3, [r7, #12]
    2fc8:	3301      	adds	r3, #1
    2fca:	60fb      	str	r3, [r7, #12]
    2fcc:	68fb      	ldr	r3, [r7, #12]
    2fce:	2b05      	cmp	r3, #5
    2fd0:	d9ef      	bls.n	2fb2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2fd2:	4b06      	ldr	r3, [pc, #24]	; (2fec <_sercom_set_handler+0x5c>)
    2fd4:	2201      	movs	r2, #1
    2fd6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2fd8:	1dfb      	adds	r3, r7, #7
    2fda:	781a      	ldrb	r2, [r3, #0]
    2fdc:	4b04      	ldr	r3, [pc, #16]	; (2ff0 <_sercom_set_handler+0x60>)
    2fde:	0092      	lsls	r2, r2, #2
    2fe0:	6839      	ldr	r1, [r7, #0]
    2fe2:	50d1      	str	r1, [r2, r3]
}
    2fe4:	46bd      	mov	sp, r7
    2fe6:	b004      	add	sp, #16
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	20000022 	.word	0x20000022
    2ff0:	20000024 	.word	0x20000024
    2ff4:	00002f7d 	.word	0x00002f7d
    2ff8:	200000c4 	.word	0x200000c4

00002ffc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2ffc:	b590      	push	{r4, r7, lr}
    2ffe:	b085      	sub	sp, #20
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3004:	2308      	movs	r3, #8
    3006:	18fa      	adds	r2, r7, r3
    3008:	4b0e      	ldr	r3, [pc, #56]	; (3044 <_sercom_get_interrupt_vector+0x48>)
    300a:	1c11      	adds	r1, r2, #0
    300c:	1c1a      	adds	r2, r3, #0
    300e:	2306      	movs	r3, #6
    3010:	1c08      	adds	r0, r1, #0
    3012:	1c11      	adds	r1, r2, #0
    3014:	1c1a      	adds	r2, r3, #0
    3016:	4b0c      	ldr	r3, [pc, #48]	; (3048 <_sercom_get_interrupt_vector+0x4c>)
    3018:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    301a:	230f      	movs	r3, #15
    301c:	18fc      	adds	r4, r7, r3
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	1c18      	adds	r0, r3, #0
    3022:	4b0a      	ldr	r3, [pc, #40]	; (304c <_sercom_get_interrupt_vector+0x50>)
    3024:	4798      	blx	r3
    3026:	1c03      	adds	r3, r0, #0
    3028:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    302a:	230f      	movs	r3, #15
    302c:	18fb      	adds	r3, r7, r3
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	2208      	movs	r2, #8
    3032:	18ba      	adds	r2, r7, r2
    3034:	5cd3      	ldrb	r3, [r2, r3]
    3036:	b2db      	uxtb	r3, r3
    3038:	b25b      	sxtb	r3, r3
}
    303a:	1c18      	adds	r0, r3, #0
    303c:	46bd      	mov	sp, r7
    303e:	b005      	add	sp, #20
    3040:	bd90      	pop	{r4, r7, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	00007fc8 	.word	0x00007fc8
    3048:	00007f5d 	.word	0x00007f5d
    304c:	00002f31 	.word	0x00002f31

00003050 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3050:	b580      	push	{r7, lr}
    3052:	af00      	add	r7, sp, #0
    3054:	4b02      	ldr	r3, [pc, #8]	; (3060 <SERCOM0_Handler+0x10>)
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	2000      	movs	r0, #0
    305a:	4798      	blx	r3
    305c:	46bd      	mov	sp, r7
    305e:	bd80      	pop	{r7, pc}
    3060:	20000024 	.word	0x20000024

00003064 <SERCOM1_Handler>:
    3064:	b580      	push	{r7, lr}
    3066:	af00      	add	r7, sp, #0
    3068:	4b02      	ldr	r3, [pc, #8]	; (3074 <SERCOM1_Handler+0x10>)
    306a:	685b      	ldr	r3, [r3, #4]
    306c:	2001      	movs	r0, #1
    306e:	4798      	blx	r3
    3070:	46bd      	mov	sp, r7
    3072:	bd80      	pop	{r7, pc}
    3074:	20000024 	.word	0x20000024

00003078 <SERCOM2_Handler>:
    3078:	b580      	push	{r7, lr}
    307a:	af00      	add	r7, sp, #0
    307c:	4b02      	ldr	r3, [pc, #8]	; (3088 <SERCOM2_Handler+0x10>)
    307e:	689b      	ldr	r3, [r3, #8]
    3080:	2002      	movs	r0, #2
    3082:	4798      	blx	r3
    3084:	46bd      	mov	sp, r7
    3086:	bd80      	pop	{r7, pc}
    3088:	20000024 	.word	0x20000024

0000308c <SERCOM3_Handler>:
    308c:	b580      	push	{r7, lr}
    308e:	af00      	add	r7, sp, #0
    3090:	4b02      	ldr	r3, [pc, #8]	; (309c <SERCOM3_Handler+0x10>)
    3092:	68db      	ldr	r3, [r3, #12]
    3094:	2003      	movs	r0, #3
    3096:	4798      	blx	r3
    3098:	46bd      	mov	sp, r7
    309a:	bd80      	pop	{r7, pc}
    309c:	20000024 	.word	0x20000024

000030a0 <SERCOM4_Handler>:
    30a0:	b580      	push	{r7, lr}
    30a2:	af00      	add	r7, sp, #0
    30a4:	4b02      	ldr	r3, [pc, #8]	; (30b0 <SERCOM4_Handler+0x10>)
    30a6:	691b      	ldr	r3, [r3, #16]
    30a8:	2004      	movs	r0, #4
    30aa:	4798      	blx	r3
    30ac:	46bd      	mov	sp, r7
    30ae:	bd80      	pop	{r7, pc}
    30b0:	20000024 	.word	0x20000024

000030b4 <SERCOM5_Handler>:
    30b4:	b580      	push	{r7, lr}
    30b6:	af00      	add	r7, sp, #0
    30b8:	4b02      	ldr	r3, [pc, #8]	; (30c4 <SERCOM5_Handler+0x10>)
    30ba:	695b      	ldr	r3, [r3, #20]
    30bc:	2005      	movs	r0, #5
    30be:	4798      	blx	r3
    30c0:	46bd      	mov	sp, r7
    30c2:	bd80      	pop	{r7, pc}
    30c4:	20000024 	.word	0x20000024

000030c8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	af00      	add	r7, sp, #0
    30ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	2280      	movs	r2, #128	; 0x80
    30d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	2200      	movs	r2, #0
    30da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	2201      	movs	r2, #1
    30e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	2200      	movs	r2, #0
    30e6:	70da      	strb	r2, [r3, #3]
}
    30e8:	46bd      	mov	sp, r7
    30ea:	b002      	add	sp, #8
    30ec:	bd80      	pop	{r7, pc}
    30ee:	46c0      	nop			; (mov r8, r8)

000030f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    30f0:	b580      	push	{r7, lr}
    30f2:	b084      	sub	sp, #16
    30f4:	af00      	add	r7, sp, #0
    30f6:	1c02      	adds	r2, r0, #0
    30f8:	6039      	str	r1, [r7, #0]
    30fa:	1dfb      	adds	r3, r7, #7
    30fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    30fe:	230c      	movs	r3, #12
    3100:	18fb      	adds	r3, r7, r3
    3102:	1c18      	adds	r0, r3, #0
    3104:	4b0f      	ldr	r3, [pc, #60]	; (3144 <port_pin_set_config+0x54>)
    3106:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3108:	230c      	movs	r3, #12
    310a:	18fb      	adds	r3, r7, r3
    310c:	2280      	movs	r2, #128	; 0x80
    310e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3110:	683b      	ldr	r3, [r7, #0]
    3112:	781a      	ldrb	r2, [r3, #0]
    3114:	230c      	movs	r3, #12
    3116:	18fb      	adds	r3, r7, r3
    3118:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    311a:	683b      	ldr	r3, [r7, #0]
    311c:	785a      	ldrb	r2, [r3, #1]
    311e:	230c      	movs	r3, #12
    3120:	18fb      	adds	r3, r7, r3
    3122:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3124:	683b      	ldr	r3, [r7, #0]
    3126:	789a      	ldrb	r2, [r3, #2]
    3128:	230c      	movs	r3, #12
    312a:	18fb      	adds	r3, r7, r3
    312c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    312e:	1dfb      	adds	r3, r7, #7
    3130:	781a      	ldrb	r2, [r3, #0]
    3132:	230c      	movs	r3, #12
    3134:	18fb      	adds	r3, r7, r3
    3136:	1c10      	adds	r0, r2, #0
    3138:	1c19      	adds	r1, r3, #0
    313a:	4b03      	ldr	r3, [pc, #12]	; (3148 <port_pin_set_config+0x58>)
    313c:	4798      	blx	r3
}
    313e:	46bd      	mov	sp, r7
    3140:	b004      	add	sp, #16
    3142:	bd80      	pop	{r7, pc}
    3144:	000030c9 	.word	0x000030c9
    3148:	00003ded 	.word	0x00003ded

0000314c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    314c:	b580      	push	{r7, lr}
    314e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3150:	46bd      	mov	sp, r7
    3152:	bd80      	pop	{r7, pc}

00003154 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    315a:	4b0f      	ldr	r3, [pc, #60]	; (3198 <cpu_irq_enter_critical+0x44>)
    315c:	681b      	ldr	r3, [r3, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d112      	bne.n	3188 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3162:	f3ef 8310 	mrs	r3, PRIMASK
    3166:	607b      	str	r3, [r7, #4]
  return(result);
    3168:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    316a:	2b00      	cmp	r3, #0
    316c:	d109      	bne.n	3182 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    316e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3170:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3174:	4b09      	ldr	r3, [pc, #36]	; (319c <cpu_irq_enter_critical+0x48>)
    3176:	2200      	movs	r2, #0
    3178:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    317a:	4b09      	ldr	r3, [pc, #36]	; (31a0 <cpu_irq_enter_critical+0x4c>)
    317c:	2201      	movs	r2, #1
    317e:	701a      	strb	r2, [r3, #0]
    3180:	e002      	b.n	3188 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3182:	4b07      	ldr	r3, [pc, #28]	; (31a0 <cpu_irq_enter_critical+0x4c>)
    3184:	2200      	movs	r2, #0
    3186:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3188:	4b03      	ldr	r3, [pc, #12]	; (3198 <cpu_irq_enter_critical+0x44>)
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	1c5a      	adds	r2, r3, #1
    318e:	4b02      	ldr	r3, [pc, #8]	; (3198 <cpu_irq_enter_critical+0x44>)
    3190:	601a      	str	r2, [r3, #0]
}
    3192:	46bd      	mov	sp, r7
    3194:	b002      	add	sp, #8
    3196:	bd80      	pop	{r7, pc}
    3198:	2000003c 	.word	0x2000003c
    319c:	20000000 	.word	0x20000000
    31a0:	20000040 	.word	0x20000040

000031a4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    31a8:	4b0a      	ldr	r3, [pc, #40]	; (31d4 <cpu_irq_leave_critical+0x30>)
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	1e5a      	subs	r2, r3, #1
    31ae:	4b09      	ldr	r3, [pc, #36]	; (31d4 <cpu_irq_leave_critical+0x30>)
    31b0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    31b2:	4b08      	ldr	r3, [pc, #32]	; (31d4 <cpu_irq_leave_critical+0x30>)
    31b4:	681b      	ldr	r3, [r3, #0]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d10a      	bne.n	31d0 <cpu_irq_leave_critical+0x2c>
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <cpu_irq_leave_critical+0x34>)
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	b2db      	uxtb	r3, r3
    31c0:	2b00      	cmp	r3, #0
    31c2:	d005      	beq.n	31d0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    31c4:	4b05      	ldr	r3, [pc, #20]	; (31dc <cpu_irq_leave_critical+0x38>)
    31c6:	2201      	movs	r2, #1
    31c8:	701a      	strb	r2, [r3, #0]
    31ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    31ce:	b662      	cpsie	i
	}
}
    31d0:	46bd      	mov	sp, r7
    31d2:	bd80      	pop	{r7, pc}
    31d4:	2000003c 	.word	0x2000003c
    31d8:	20000040 	.word	0x20000040
    31dc:	20000000 	.word	0x20000000

000031e0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b082      	sub	sp, #8
    31e4:	af00      	add	r7, sp, #0
    31e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2201      	movs	r2, #1
    31ec:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	2200      	movs	r2, #0
    31f2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	2206      	movs	r2, #6
    31f8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	2200      	movs	r2, #0
    31fe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	2200      	movs	r2, #0
    3204:	725a      	strb	r2, [r3, #9]
}
    3206:	46bd      	mov	sp, r7
    3208:	b002      	add	sp, #8
    320a:	bd80      	pop	{r7, pc}

0000320c <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	2201      	movs	r2, #1
    3218:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	2201      	movs	r2, #1
    321e:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	2200      	movs	r2, #0
    3224:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	2201      	movs	r2, #1
    322a:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    322c:	687b      	ldr	r3, [r7, #4]
    322e:	2207      	movs	r2, #7
    3230:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	2200      	movs	r2, #0
    3236:	715a      	strb	r2, [r3, #5]
}
    3238:	46bd      	mov	sp, r7
    323a:	b002      	add	sp, #8
    323c:	bd80      	pop	{r7, pc}
    323e:	46c0      	nop			; (mov r8, r8)

00003240 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    3240:	b580      	push	{r7, lr}
    3242:	b082      	sub	sp, #8
    3244:	af00      	add	r7, sp, #0
    3246:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	2203      	movs	r2, #3
    324c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	2200      	movs	r2, #0
    3252:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	2201      	movs	r2, #1
    3258:	709a      	strb	r2, [r3, #2]
}
    325a:	46bd      	mov	sp, r7
    325c:	b002      	add	sp, #8
    325e:	bd80      	pop	{r7, pc}

00003260 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    3260:	b580      	push	{r7, lr}
    3262:	b082      	sub	sp, #8
    3264:	af00      	add	r7, sp, #0
    3266:	1c02      	adds	r2, r0, #0
    3268:	1dfb      	adds	r3, r7, #7
    326a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    326c:	4a03      	ldr	r2, [pc, #12]	; (327c <system_cpu_clock_set_divider+0x1c>)
    326e:	1dfb      	adds	r3, r7, #7
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	7213      	strb	r3, [r2, #8]
}
    3274:	46bd      	mov	sp, r7
    3276:	b002      	add	sp, #8
    3278:	bd80      	pop	{r7, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	40000400 	.word	0x40000400

00003280 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    3280:	b580      	push	{r7, lr}
    3282:	b082      	sub	sp, #8
    3284:	af00      	add	r7, sp, #0
    3286:	1c02      	adds	r2, r0, #0
    3288:	1dfb      	adds	r3, r7, #7
    328a:	701a      	strb	r2, [r3, #0]
    328c:	1dbb      	adds	r3, r7, #6
    328e:	1c0a      	adds	r2, r1, #0
    3290:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3292:	1dfb      	adds	r3, r7, #7
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	2b01      	cmp	r3, #1
    3298:	d008      	beq.n	32ac <system_apb_clock_set_divider+0x2c>
    329a:	2b02      	cmp	r3, #2
    329c:	d00b      	beq.n	32b6 <system_apb_clock_set_divider+0x36>
    329e:	2b00      	cmp	r3, #0
    32a0:	d10e      	bne.n	32c0 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    32a2:	4a0b      	ldr	r2, [pc, #44]	; (32d0 <system_apb_clock_set_divider+0x50>)
    32a4:	1dbb      	adds	r3, r7, #6
    32a6:	781b      	ldrb	r3, [r3, #0]
    32a8:	7253      	strb	r3, [r2, #9]
			break;
    32aa:	e00b      	b.n	32c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    32ac:	4a08      	ldr	r2, [pc, #32]	; (32d0 <system_apb_clock_set_divider+0x50>)
    32ae:	1dbb      	adds	r3, r7, #6
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	7293      	strb	r3, [r2, #10]
			break;
    32b4:	e006      	b.n	32c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    32b6:	4a06      	ldr	r2, [pc, #24]	; (32d0 <system_apb_clock_set_divider+0x50>)
    32b8:	1dbb      	adds	r3, r7, #6
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	72d3      	strb	r3, [r2, #11]
			break;
    32be:	e001      	b.n	32c4 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    32c0:	2317      	movs	r3, #23
    32c2:	e000      	b.n	32c6 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    32c4:	2300      	movs	r3, #0
}
    32c6:	1c18      	adds	r0, r3, #0
    32c8:	46bd      	mov	sp, r7
    32ca:	b002      	add	sp, #8
    32cc:	bd80      	pop	{r7, pc}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	40000400 	.word	0x40000400

000032d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b082      	sub	sp, #8
    32d8:	af00      	add	r7, sp, #0
    32da:	1c02      	adds	r2, r0, #0
    32dc:	1dfb      	adds	r3, r7, #7
    32de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    32e0:	4b08      	ldr	r3, [pc, #32]	; (3304 <system_flash_set_waitstates+0x30>)
    32e2:	1dfa      	adds	r2, r7, #7
    32e4:	7812      	ldrb	r2, [r2, #0]
    32e6:	210f      	movs	r1, #15
    32e8:	400a      	ands	r2, r1
    32ea:	b2d2      	uxtb	r2, r2
    32ec:	210f      	movs	r1, #15
    32ee:	400a      	ands	r2, r1
    32f0:	0052      	lsls	r2, r2, #1
    32f2:	6859      	ldr	r1, [r3, #4]
    32f4:	201e      	movs	r0, #30
    32f6:	4381      	bics	r1, r0
    32f8:	430a      	orrs	r2, r1
    32fa:	605a      	str	r2, [r3, #4]
}
    32fc:	46bd      	mov	sp, r7
    32fe:	b002      	add	sp, #8
    3300:	bd80      	pop	{r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	41004000 	.word	0x41004000

00003308 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3308:	b580      	push	{r7, lr}
    330a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    330c:	46c0      	nop			; (mov r8, r8)
    330e:	4b03      	ldr	r3, [pc, #12]	; (331c <_system_dfll_wait_for_sync+0x14>)
    3310:	68db      	ldr	r3, [r3, #12]
    3312:	2210      	movs	r2, #16
    3314:	4013      	ands	r3, r2
    3316:	d0fa      	beq.n	330e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3318:	46bd      	mov	sp, r7
    331a:	bd80      	pop	{r7, pc}
    331c:	40000800 	.word	0x40000800

00003320 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3320:	b580      	push	{r7, lr}
    3322:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3324:	4b0c      	ldr	r3, [pc, #48]	; (3358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3326:	2202      	movs	r2, #2
    3328:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    332a:	4b0c      	ldr	r3, [pc, #48]	; (335c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    332c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    332e:	4a0a      	ldr	r2, [pc, #40]	; (3358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3330:	4b0b      	ldr	r3, [pc, #44]	; (3360 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3332:	689b      	ldr	r3, [r3, #8]
    3334:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3336:	4a08      	ldr	r2, [pc, #32]	; (3358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3338:	4b09      	ldr	r3, [pc, #36]	; (3360 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    333a:	685b      	ldr	r3, [r3, #4]
    333c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    333e:	4b06      	ldr	r3, [pc, #24]	; (3358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3340:	2200      	movs	r2, #0
    3342:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3344:	4b05      	ldr	r3, [pc, #20]	; (335c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3346:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3348:	4a03      	ldr	r2, [pc, #12]	; (3358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    334a:	4b05      	ldr	r3, [pc, #20]	; (3360 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	b29b      	uxth	r3, r3
    3350:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3352:	46bd      	mov	sp, r7
    3354:	bd80      	pop	{r7, pc}
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	40000800 	.word	0x40000800
    335c:	00003309 	.word	0x00003309
    3360:	20000044 	.word	0x20000044

00003364 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3364:	b580      	push	{r7, lr}
    3366:	b082      	sub	sp, #8
    3368:	af00      	add	r7, sp, #0
    336a:	1c02      	adds	r2, r0, #0
    336c:	1dfb      	adds	r3, r7, #7
    336e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3370:	1dfb      	adds	r3, r7, #7
    3372:	781b      	ldrb	r3, [r3, #0]
    3374:	2b08      	cmp	r3, #8
    3376:	d842      	bhi.n	33fe <system_clock_source_get_hz+0x9a>
    3378:	009a      	lsls	r2, r3, #2
    337a:	4b23      	ldr	r3, [pc, #140]	; (3408 <system_clock_source_get_hz+0xa4>)
    337c:	18d3      	adds	r3, r2, r3
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3382:	4b22      	ldr	r3, [pc, #136]	; (340c <system_clock_source_get_hz+0xa8>)
    3384:	691b      	ldr	r3, [r3, #16]
    3386:	e03b      	b.n	3400 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3388:	4b21      	ldr	r3, [pc, #132]	; (3410 <system_clock_source_get_hz+0xac>)
    338a:	6a1b      	ldr	r3, [r3, #32]
    338c:	0a1b      	lsrs	r3, r3, #8
    338e:	1c1a      	adds	r2, r3, #0
    3390:	2303      	movs	r3, #3
    3392:	4013      	ands	r3, r2
    3394:	b2db      	uxtb	r3, r3
    3396:	1c1a      	adds	r2, r3, #0
    3398:	4b1e      	ldr	r3, [pc, #120]	; (3414 <system_clock_source_get_hz+0xb0>)
    339a:	40d3      	lsrs	r3, r2
    339c:	e030      	b.n	3400 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    339e:	2380      	movs	r3, #128	; 0x80
    33a0:	021b      	lsls	r3, r3, #8
    33a2:	e02d      	b.n	3400 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    33a4:	2380      	movs	r3, #128	; 0x80
    33a6:	021b      	lsls	r3, r3, #8
    33a8:	e02a      	b.n	3400 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    33aa:	4b18      	ldr	r3, [pc, #96]	; (340c <system_clock_source_get_hz+0xa8>)
    33ac:	695b      	ldr	r3, [r3, #20]
    33ae:	e027      	b.n	3400 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    33b0:	4b16      	ldr	r3, [pc, #88]	; (340c <system_clock_source_get_hz+0xa8>)
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	2202      	movs	r2, #2
    33b6:	4013      	ands	r3, r2
    33b8:	d101      	bne.n	33be <system_clock_source_get_hz+0x5a>
			return 0;
    33ba:	2300      	movs	r3, #0
    33bc:	e020      	b.n	3400 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    33be:	4b16      	ldr	r3, [pc, #88]	; (3418 <system_clock_source_get_hz+0xb4>)
    33c0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    33c2:	4b12      	ldr	r3, [pc, #72]	; (340c <system_clock_source_get_hz+0xa8>)
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	2204      	movs	r2, #4
    33c8:	4013      	ands	r3, r2
    33ca:	d009      	beq.n	33e0 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    33cc:	2000      	movs	r0, #0
    33ce:	4b13      	ldr	r3, [pc, #76]	; (341c <system_clock_source_get_hz+0xb8>)
    33d0:	4798      	blx	r3
    33d2:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    33d4:	4b0d      	ldr	r3, [pc, #52]	; (340c <system_clock_source_get_hz+0xa8>)
    33d6:	689b      	ldr	r3, [r3, #8]
    33d8:	041b      	lsls	r3, r3, #16
    33da:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    33dc:	4353      	muls	r3, r2
    33de:	e00f      	b.n	3400 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    33e0:	4b0f      	ldr	r3, [pc, #60]	; (3420 <system_clock_source_get_hz+0xbc>)
    33e2:	e00d      	b.n	3400 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    33e4:	4a0a      	ldr	r2, [pc, #40]	; (3410 <system_clock_source_get_hz+0xac>)
    33e6:	2350      	movs	r3, #80	; 0x50
    33e8:	5cd3      	ldrb	r3, [r2, r3]
    33ea:	b2db      	uxtb	r3, r3
    33ec:	1c1a      	adds	r2, r3, #0
    33ee:	2304      	movs	r3, #4
    33f0:	4013      	ands	r3, r2
    33f2:	d101      	bne.n	33f8 <system_clock_source_get_hz+0x94>
			return 0;
    33f4:	2300      	movs	r3, #0
    33f6:	e003      	b.n	3400 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    33f8:	4b04      	ldr	r3, [pc, #16]	; (340c <system_clock_source_get_hz+0xa8>)
    33fa:	68db      	ldr	r3, [r3, #12]
    33fc:	e000      	b.n	3400 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    33fe:	2300      	movs	r3, #0
	}
}
    3400:	1c18      	adds	r0, r3, #0
    3402:	46bd      	mov	sp, r7
    3404:	b002      	add	sp, #8
    3406:	bd80      	pop	{r7, pc}
    3408:	00007fd0 	.word	0x00007fd0
    340c:	20000044 	.word	0x20000044
    3410:	40000800 	.word	0x40000800
    3414:	007a1200 	.word	0x007a1200
    3418:	00003309 	.word	0x00003309
    341c:	00003c25 	.word	0x00003c25
    3420:	02dc6c00 	.word	0x02dc6c00

00003424 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3424:	b580      	push	{r7, lr}
    3426:	b084      	sub	sp, #16
    3428:	af00      	add	r7, sp, #0
    342a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    342c:	4b1a      	ldr	r3, [pc, #104]	; (3498 <system_clock_source_osc8m_set_config+0x74>)
    342e:	6a1b      	ldr	r3, [r3, #32]
    3430:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	781b      	ldrb	r3, [r3, #0]
    3436:	1c1a      	adds	r2, r3, #0
    3438:	2303      	movs	r3, #3
    343a:	4013      	ands	r3, r2
    343c:	b2da      	uxtb	r2, r3
    343e:	230d      	movs	r3, #13
    3440:	18fb      	adds	r3, r7, r3
    3442:	2103      	movs	r1, #3
    3444:	400a      	ands	r2, r1
    3446:	1c10      	adds	r0, r2, #0
    3448:	781a      	ldrb	r2, [r3, #0]
    344a:	2103      	movs	r1, #3
    344c:	438a      	bics	r2, r1
    344e:	1c11      	adds	r1, r2, #0
    3450:	1c02      	adds	r2, r0, #0
    3452:	430a      	orrs	r2, r1
    3454:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	789a      	ldrb	r2, [r3, #2]
    345a:	230c      	movs	r3, #12
    345c:	18fb      	adds	r3, r7, r3
    345e:	01d0      	lsls	r0, r2, #7
    3460:	781a      	ldrb	r2, [r3, #0]
    3462:	217f      	movs	r1, #127	; 0x7f
    3464:	400a      	ands	r2, r1
    3466:	1c11      	adds	r1, r2, #0
    3468:	1c02      	adds	r2, r0, #0
    346a:	430a      	orrs	r2, r1
    346c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	785a      	ldrb	r2, [r3, #1]
    3472:	230c      	movs	r3, #12
    3474:	18fb      	adds	r3, r7, r3
    3476:	2101      	movs	r1, #1
    3478:	400a      	ands	r2, r1
    347a:	0190      	lsls	r0, r2, #6
    347c:	781a      	ldrb	r2, [r3, #0]
    347e:	2140      	movs	r1, #64	; 0x40
    3480:	438a      	bics	r2, r1
    3482:	1c11      	adds	r1, r2, #0
    3484:	1c02      	adds	r2, r0, #0
    3486:	430a      	orrs	r2, r1
    3488:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <system_clock_source_osc8m_set_config+0x74>)
    348c:	68fa      	ldr	r2, [r7, #12]
    348e:	621a      	str	r2, [r3, #32]
}
    3490:	46bd      	mov	sp, r7
    3492:	b004      	add	sp, #16
    3494:	bd80      	pop	{r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	40000800 	.word	0x40000800

0000349c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    349c:	b580      	push	{r7, lr}
    349e:	b084      	sub	sp, #16
    34a0:	af00      	add	r7, sp, #0
    34a2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    34a4:	4b2f      	ldr	r3, [pc, #188]	; (3564 <system_clock_source_osc32k_set_config+0xc8>)
    34a6:	699b      	ldr	r3, [r3, #24]
    34a8:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	785a      	ldrb	r2, [r3, #1]
    34ae:	230c      	movs	r3, #12
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	2101      	movs	r1, #1
    34b4:	400a      	ands	r2, r1
    34b6:	00d0      	lsls	r0, r2, #3
    34b8:	781a      	ldrb	r2, [r3, #0]
    34ba:	2108      	movs	r1, #8
    34bc:	438a      	bics	r2, r1
    34be:	1c11      	adds	r1, r2, #0
    34c0:	1c02      	adds	r2, r0, #0
    34c2:	430a      	orrs	r2, r1
    34c4:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	789a      	ldrb	r2, [r3, #2]
    34ca:	230c      	movs	r3, #12
    34cc:	18fb      	adds	r3, r7, r3
    34ce:	2101      	movs	r1, #1
    34d0:	400a      	ands	r2, r1
    34d2:	0090      	lsls	r0, r2, #2
    34d4:	781a      	ldrb	r2, [r3, #0]
    34d6:	2104      	movs	r1, #4
    34d8:	438a      	bics	r2, r1
    34da:	1c11      	adds	r1, r2, #0
    34dc:	1c02      	adds	r2, r0, #0
    34de:	430a      	orrs	r2, r1
    34e0:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    34e2:	687b      	ldr	r3, [r7, #4]
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	1c1a      	adds	r2, r3, #0
    34e8:	2307      	movs	r3, #7
    34ea:	4013      	ands	r3, r2
    34ec:	b2da      	uxtb	r2, r3
    34ee:	230d      	movs	r3, #13
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	2107      	movs	r1, #7
    34f4:	400a      	ands	r2, r1
    34f6:	1c10      	adds	r0, r2, #0
    34f8:	781a      	ldrb	r2, [r3, #0]
    34fa:	2107      	movs	r1, #7
    34fc:	438a      	bics	r2, r1
    34fe:	1c11      	adds	r1, r2, #0
    3500:	1c02      	adds	r2, r0, #0
    3502:	430a      	orrs	r2, r1
    3504:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	791a      	ldrb	r2, [r3, #4]
    350a:	230c      	movs	r3, #12
    350c:	18fb      	adds	r3, r7, r3
    350e:	01d0      	lsls	r0, r2, #7
    3510:	781a      	ldrb	r2, [r3, #0]
    3512:	217f      	movs	r1, #127	; 0x7f
    3514:	400a      	ands	r2, r1
    3516:	1c11      	adds	r1, r2, #0
    3518:	1c02      	adds	r2, r0, #0
    351a:	430a      	orrs	r2, r1
    351c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	78da      	ldrb	r2, [r3, #3]
    3522:	230c      	movs	r3, #12
    3524:	18fb      	adds	r3, r7, r3
    3526:	2101      	movs	r1, #1
    3528:	400a      	ands	r2, r1
    352a:	0190      	lsls	r0, r2, #6
    352c:	781a      	ldrb	r2, [r3, #0]
    352e:	2140      	movs	r1, #64	; 0x40
    3530:	438a      	bics	r2, r1
    3532:	1c11      	adds	r1, r2, #0
    3534:	1c02      	adds	r2, r0, #0
    3536:	430a      	orrs	r2, r1
    3538:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	795a      	ldrb	r2, [r3, #5]
    353e:	230d      	movs	r3, #13
    3540:	18fb      	adds	r3, r7, r3
    3542:	2101      	movs	r1, #1
    3544:	400a      	ands	r2, r1
    3546:	0110      	lsls	r0, r2, #4
    3548:	781a      	ldrb	r2, [r3, #0]
    354a:	2110      	movs	r1, #16
    354c:	438a      	bics	r2, r1
    354e:	1c11      	adds	r1, r2, #0
    3550:	1c02      	adds	r2, r0, #0
    3552:	430a      	orrs	r2, r1
    3554:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    3556:	4b03      	ldr	r3, [pc, #12]	; (3564 <system_clock_source_osc32k_set_config+0xc8>)
    3558:	68fa      	ldr	r2, [r7, #12]
    355a:	619a      	str	r2, [r3, #24]
}
    355c:	46bd      	mov	sp, r7
    355e:	b004      	add	sp, #16
    3560:	bd80      	pop	{r7, pc}
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	40000800 	.word	0x40000800

00003568 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3568:	b580      	push	{r7, lr}
    356a:	b082      	sub	sp, #8
    356c:	af00      	add	r7, sp, #0
    356e:	1c02      	adds	r2, r0, #0
    3570:	1dfb      	adds	r3, r7, #7
    3572:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3574:	1dfb      	adds	r3, r7, #7
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	2b08      	cmp	r3, #8
    357a:	d83b      	bhi.n	35f4 <system_clock_source_enable+0x8c>
    357c:	009a      	lsls	r2, r3, #2
    357e:	4b21      	ldr	r3, [pc, #132]	; (3604 <system_clock_source_enable+0x9c>)
    3580:	18d3      	adds	r3, r2, r3
    3582:	681b      	ldr	r3, [r3, #0]
    3584:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3586:	4b20      	ldr	r3, [pc, #128]	; (3608 <system_clock_source_enable+0xa0>)
    3588:	4a1f      	ldr	r2, [pc, #124]	; (3608 <system_clock_source_enable+0xa0>)
    358a:	6a12      	ldr	r2, [r2, #32]
    358c:	2102      	movs	r1, #2
    358e:	430a      	orrs	r2, r1
    3590:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3592:	2300      	movs	r3, #0
    3594:	e031      	b.n	35fa <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3596:	4b1c      	ldr	r3, [pc, #112]	; (3608 <system_clock_source_enable+0xa0>)
    3598:	4a1b      	ldr	r2, [pc, #108]	; (3608 <system_clock_source_enable+0xa0>)
    359a:	6992      	ldr	r2, [r2, #24]
    359c:	2102      	movs	r1, #2
    359e:	430a      	orrs	r2, r1
    35a0:	619a      	str	r2, [r3, #24]
		break;
    35a2:	e029      	b.n	35f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    35a4:	4a18      	ldr	r2, [pc, #96]	; (3608 <system_clock_source_enable+0xa0>)
    35a6:	4b18      	ldr	r3, [pc, #96]	; (3608 <system_clock_source_enable+0xa0>)
    35a8:	8a1b      	ldrh	r3, [r3, #16]
    35aa:	b29b      	uxth	r3, r3
    35ac:	2102      	movs	r1, #2
    35ae:	430b      	orrs	r3, r1
    35b0:	b29b      	uxth	r3, r3
    35b2:	8213      	strh	r3, [r2, #16]
		break;
    35b4:	e020      	b.n	35f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    35b6:	4a14      	ldr	r2, [pc, #80]	; (3608 <system_clock_source_enable+0xa0>)
    35b8:	4b13      	ldr	r3, [pc, #76]	; (3608 <system_clock_source_enable+0xa0>)
    35ba:	8a9b      	ldrh	r3, [r3, #20]
    35bc:	b29b      	uxth	r3, r3
    35be:	2102      	movs	r1, #2
    35c0:	430b      	orrs	r3, r1
    35c2:	b29b      	uxth	r3, r3
    35c4:	8293      	strh	r3, [r2, #20]
		break;
    35c6:	e017      	b.n	35f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    35c8:	4b10      	ldr	r3, [pc, #64]	; (360c <system_clock_source_enable+0xa4>)
    35ca:	681b      	ldr	r3, [r3, #0]
    35cc:	2202      	movs	r2, #2
    35ce:	431a      	orrs	r2, r3
    35d0:	4b0e      	ldr	r3, [pc, #56]	; (360c <system_clock_source_enable+0xa4>)
    35d2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    35d4:	4b0e      	ldr	r3, [pc, #56]	; (3610 <system_clock_source_enable+0xa8>)
    35d6:	4798      	blx	r3
		break;
    35d8:	e00e      	b.n	35f8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    35da:	4a0b      	ldr	r2, [pc, #44]	; (3608 <system_clock_source_enable+0xa0>)
    35dc:	490a      	ldr	r1, [pc, #40]	; (3608 <system_clock_source_enable+0xa0>)
    35de:	2344      	movs	r3, #68	; 0x44
    35e0:	5ccb      	ldrb	r3, [r1, r3]
    35e2:	b2db      	uxtb	r3, r3
    35e4:	2102      	movs	r1, #2
    35e6:	430b      	orrs	r3, r1
    35e8:	b2d9      	uxtb	r1, r3
    35ea:	2344      	movs	r3, #68	; 0x44
    35ec:	54d1      	strb	r1, [r2, r3]
		break;
    35ee:	e003      	b.n	35f8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    35f0:	2300      	movs	r3, #0
    35f2:	e002      	b.n	35fa <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    35f4:	2317      	movs	r3, #23
    35f6:	e000      	b.n	35fa <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    35f8:	2300      	movs	r3, #0
}
    35fa:	1c18      	adds	r0, r3, #0
    35fc:	46bd      	mov	sp, r7
    35fe:	b002      	add	sp, #8
    3600:	bd80      	pop	{r7, pc}
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	00007ff4 	.word	0x00007ff4
    3608:	40000800 	.word	0x40000800
    360c:	20000044 	.word	0x20000044
    3610:	00003321 	.word	0x00003321

00003614 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3614:	b580      	push	{r7, lr}
    3616:	b082      	sub	sp, #8
    3618:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    361a:	1c3b      	adds	r3, r7, #0
    361c:	2201      	movs	r2, #1
    361e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3620:	2300      	movs	r3, #0
    3622:	607b      	str	r3, [r7, #4]
    3624:	e009      	b.n	363a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	b2da      	uxtb	r2, r3
    362a:	1c3b      	adds	r3, r7, #0
    362c:	1c10      	adds	r0, r2, #0
    362e:	1c19      	adds	r1, r3, #0
    3630:	4b05      	ldr	r3, [pc, #20]	; (3648 <_switch_peripheral_gclk+0x34>)
    3632:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	3301      	adds	r3, #1
    3638:	607b      	str	r3, [r7, #4]
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	2b24      	cmp	r3, #36	; 0x24
    363e:	d9f2      	bls.n	3626 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    3640:	46bd      	mov	sp, r7
    3642:	b002      	add	sp, #8
    3644:	bd80      	pop	{r7, pc}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	00003b01 	.word	0x00003b01

0000364c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    364c:	b580      	push	{r7, lr}
    364e:	b0a2      	sub	sp, #136	; 0x88
    3650:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3652:	4b4f      	ldr	r3, [pc, #316]	; (3790 <system_clock_init+0x144>)
    3654:	22c2      	movs	r2, #194	; 0xc2
    3656:	00d2      	lsls	r2, r2, #3
    3658:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    365a:	2000      	movs	r0, #0
    365c:	4b4d      	ldr	r3, [pc, #308]	; (3794 <system_clock_init+0x148>)
    365e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3660:	4b4d      	ldr	r3, [pc, #308]	; (3798 <system_clock_init+0x14c>)
    3662:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    3664:	4b4a      	ldr	r3, [pc, #296]	; (3790 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    3666:	4a4d      	ldr	r2, [pc, #308]	; (379c <system_clock_init+0x150>)
    3668:	6812      	ldr	r2, [r2, #0]
    366a:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    366c:	b2d2      	uxtb	r2, r2
    366e:	1c11      	adds	r1, r2, #0
    3670:	227f      	movs	r2, #127	; 0x7f
    3672:	400a      	ands	r2, r1
    3674:	b2d2      	uxtb	r2, r2
    3676:	217f      	movs	r1, #127	; 0x7f
    3678:	400a      	ands	r2, r1
    367a:	0412      	lsls	r2, r2, #16
    367c:	6999      	ldr	r1, [r3, #24]
    367e:	4848      	ldr	r0, [pc, #288]	; (37a0 <system_clock_init+0x154>)
    3680:	4001      	ands	r1, r0
    3682:	430a      	orrs	r2, r1
    3684:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    3686:	2380      	movs	r3, #128	; 0x80
    3688:	18fb      	adds	r3, r7, r3
    368a:	1c18      	adds	r0, r3, #0
    368c:	4b45      	ldr	r3, [pc, #276]	; (37a4 <system_clock_init+0x158>)
    368e:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    3690:	2380      	movs	r3, #128	; 0x80
    3692:	18fb      	adds	r3, r7, r3
    3694:	2207      	movs	r2, #7
    3696:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    3698:	2380      	movs	r3, #128	; 0x80
    369a:	18fb      	adds	r3, r7, r3
    369c:	2201      	movs	r2, #1
    369e:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    36a0:	2380      	movs	r3, #128	; 0x80
    36a2:	18fb      	adds	r3, r7, r3
    36a4:	2201      	movs	r2, #1
    36a6:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    36a8:	2380      	movs	r3, #128	; 0x80
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	2201      	movs	r2, #1
    36ae:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    36b0:	2380      	movs	r3, #128	; 0x80
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	2200      	movs	r2, #0
    36b6:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    36b8:	2380      	movs	r3, #128	; 0x80
    36ba:	18fb      	adds	r3, r7, r3
    36bc:	1c18      	adds	r0, r3, #0
    36be:	4b3a      	ldr	r3, [pc, #232]	; (37a8 <system_clock_init+0x15c>)
    36c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    36c2:	2004      	movs	r0, #4
    36c4:	4b39      	ldr	r3, [pc, #228]	; (37ac <system_clock_init+0x160>)
    36c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    36c8:	237c      	movs	r3, #124	; 0x7c
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	1c18      	adds	r0, r3, #0
    36ce:	4b38      	ldr	r3, [pc, #224]	; (37b0 <system_clock_init+0x164>)
    36d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    36d2:	237c      	movs	r3, #124	; 0x7c
    36d4:	18fb      	adds	r3, r7, r3
    36d6:	2200      	movs	r2, #0
    36d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    36da:	237c      	movs	r3, #124	; 0x7c
    36dc:	18fb      	adds	r3, r7, r3
    36de:	2201      	movs	r2, #1
    36e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    36e2:	237c      	movs	r3, #124	; 0x7c
    36e4:	18fb      	adds	r3, r7, r3
    36e6:	2200      	movs	r2, #0
    36e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    36ea:	237c      	movs	r3, #124	; 0x7c
    36ec:	18fb      	adds	r3, r7, r3
    36ee:	1c18      	adds	r0, r3, #0
    36f0:	4b30      	ldr	r3, [pc, #192]	; (37b4 <system_clock_init+0x168>)
    36f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    36f4:	2006      	movs	r0, #6
    36f6:	4b2d      	ldr	r3, [pc, #180]	; (37ac <system_clock_init+0x160>)
    36f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    36fa:	4b2f      	ldr	r3, [pc, #188]	; (37b8 <system_clock_init+0x16c>)
    36fc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    36fe:	2358      	movs	r3, #88	; 0x58
    3700:	18fb      	adds	r3, r7, r3
    3702:	1c18      	adds	r0, r3, #0
    3704:	4b2d      	ldr	r3, [pc, #180]	; (37bc <system_clock_init+0x170>)
    3706:	4798      	blx	r3
    3708:	2358      	movs	r3, #88	; 0x58
    370a:	18fb      	adds	r3, r7, r3
    370c:	2204      	movs	r2, #4
    370e:	701a      	strb	r2, [r3, #0]
    3710:	2358      	movs	r3, #88	; 0x58
    3712:	18fb      	adds	r3, r7, r3
    3714:	2220      	movs	r2, #32
    3716:	605a      	str	r2, [r3, #4]
    3718:	2358      	movs	r3, #88	; 0x58
    371a:	18fb      	adds	r3, r7, r3
    371c:	2200      	movs	r2, #0
    371e:	721a      	strb	r2, [r3, #8]
    3720:	2358      	movs	r3, #88	; 0x58
    3722:	18fb      	adds	r3, r7, r3
    3724:	2200      	movs	r2, #0
    3726:	725a      	strb	r2, [r3, #9]
    3728:	2358      	movs	r3, #88	; 0x58
    372a:	18fb      	adds	r3, r7, r3
    372c:	2002      	movs	r0, #2
    372e:	1c19      	adds	r1, r3, #0
    3730:	4b23      	ldr	r3, [pc, #140]	; (37c0 <system_clock_init+0x174>)
    3732:	4798      	blx	r3
    3734:	2002      	movs	r0, #2
    3736:	4b23      	ldr	r3, [pc, #140]	; (37c4 <system_clock_init+0x178>)
    3738:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    373a:	2000      	movs	r0, #0
    373c:	4b22      	ldr	r3, [pc, #136]	; (37c8 <system_clock_init+0x17c>)
    373e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3740:	2000      	movs	r0, #0
    3742:	2100      	movs	r1, #0
    3744:	4b21      	ldr	r3, [pc, #132]	; (37cc <system_clock_init+0x180>)
    3746:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3748:	2001      	movs	r0, #1
    374a:	2100      	movs	r1, #0
    374c:	4b1f      	ldr	r3, [pc, #124]	; (37cc <system_clock_init+0x180>)
    374e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3750:	2002      	movs	r0, #2
    3752:	2100      	movs	r1, #0
    3754:	4b1d      	ldr	r3, [pc, #116]	; (37cc <system_clock_init+0x180>)
    3756:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3758:	1d3b      	adds	r3, r7, #4
    375a:	1c18      	adds	r0, r3, #0
    375c:	4b17      	ldr	r3, [pc, #92]	; (37bc <system_clock_init+0x170>)
    375e:	4798      	blx	r3
    3760:	1d3b      	adds	r3, r7, #4
    3762:	2206      	movs	r2, #6
    3764:	701a      	strb	r2, [r3, #0]
    3766:	1d3b      	adds	r3, r7, #4
    3768:	2201      	movs	r2, #1
    376a:	605a      	str	r2, [r3, #4]
    376c:	1d3b      	adds	r3, r7, #4
    376e:	2200      	movs	r2, #0
    3770:	721a      	strb	r2, [r3, #8]
    3772:	1d3b      	adds	r3, r7, #4
    3774:	2200      	movs	r2, #0
    3776:	725a      	strb	r2, [r3, #9]
    3778:	1d3b      	adds	r3, r7, #4
    377a:	2000      	movs	r0, #0
    377c:	1c19      	adds	r1, r3, #0
    377e:	4b10      	ldr	r3, [pc, #64]	; (37c0 <system_clock_init+0x174>)
    3780:	4798      	blx	r3
    3782:	2000      	movs	r0, #0
    3784:	4b0f      	ldr	r3, [pc, #60]	; (37c4 <system_clock_init+0x178>)
    3786:	4798      	blx	r3
#endif
}
    3788:	46bd      	mov	sp, r7
    378a:	b022      	add	sp, #136	; 0x88
    378c:	bd80      	pop	{r7, pc}
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	40000800 	.word	0x40000800
    3794:	000032d5 	.word	0x000032d5
    3798:	00003615 	.word	0x00003615
    379c:	00806024 	.word	0x00806024
    37a0:	ff80ffff 	.word	0xff80ffff
    37a4:	0000320d 	.word	0x0000320d
    37a8:	0000349d 	.word	0x0000349d
    37ac:	00003569 	.word	0x00003569
    37b0:	00003241 	.word	0x00003241
    37b4:	00003425 	.word	0x00003425
    37b8:	00003871 	.word	0x00003871
    37bc:	000031e1 	.word	0x000031e1
    37c0:	000038a1 	.word	0x000038a1
    37c4:	000039c1 	.word	0x000039c1
    37c8:	00003261 	.word	0x00003261
    37cc:	00003281 	.word	0x00003281

000037d0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	b082      	sub	sp, #8
    37d4:	af00      	add	r7, sp, #0
    37d6:	1c02      	adds	r2, r0, #0
    37d8:	6039      	str	r1, [r7, #0]
    37da:	1dfb      	adds	r3, r7, #7
    37dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    37de:	1dfb      	adds	r3, r7, #7
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	2b01      	cmp	r3, #1
    37e4:	d00a      	beq.n	37fc <system_apb_clock_set_mask+0x2c>
    37e6:	2b02      	cmp	r3, #2
    37e8:	d00f      	beq.n	380a <system_apb_clock_set_mask+0x3a>
    37ea:	2b00      	cmp	r3, #0
    37ec:	d114      	bne.n	3818 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    37ee:	4b0e      	ldr	r3, [pc, #56]	; (3828 <system_apb_clock_set_mask+0x58>)
    37f0:	4a0d      	ldr	r2, [pc, #52]	; (3828 <system_apb_clock_set_mask+0x58>)
    37f2:	6991      	ldr	r1, [r2, #24]
    37f4:	683a      	ldr	r2, [r7, #0]
    37f6:	430a      	orrs	r2, r1
    37f8:	619a      	str	r2, [r3, #24]
			break;
    37fa:	e00f      	b.n	381c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    37fc:	4b0a      	ldr	r3, [pc, #40]	; (3828 <system_apb_clock_set_mask+0x58>)
    37fe:	4a0a      	ldr	r2, [pc, #40]	; (3828 <system_apb_clock_set_mask+0x58>)
    3800:	69d1      	ldr	r1, [r2, #28]
    3802:	683a      	ldr	r2, [r7, #0]
    3804:	430a      	orrs	r2, r1
    3806:	61da      	str	r2, [r3, #28]
			break;
    3808:	e008      	b.n	381c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    380a:	4b07      	ldr	r3, [pc, #28]	; (3828 <system_apb_clock_set_mask+0x58>)
    380c:	4a06      	ldr	r2, [pc, #24]	; (3828 <system_apb_clock_set_mask+0x58>)
    380e:	6a11      	ldr	r1, [r2, #32]
    3810:	683a      	ldr	r2, [r7, #0]
    3812:	430a      	orrs	r2, r1
    3814:	621a      	str	r2, [r3, #32]
			break;
    3816:	e001      	b.n	381c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3818:	2317      	movs	r3, #23
    381a:	e000      	b.n	381e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    381c:	2300      	movs	r3, #0
}
    381e:	1c18      	adds	r0, r3, #0
    3820:	46bd      	mov	sp, r7
    3822:	b002      	add	sp, #8
    3824:	bd80      	pop	{r7, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	40000400 	.word	0x40000400

0000382c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    382c:	b580      	push	{r7, lr}
    382e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3830:	4b01      	ldr	r3, [pc, #4]	; (3838 <system_interrupt_enter_critical_section+0xc>)
    3832:	4798      	blx	r3
}
    3834:	46bd      	mov	sp, r7
    3836:	bd80      	pop	{r7, pc}
    3838:	00003155 	.word	0x00003155

0000383c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    383c:	b580      	push	{r7, lr}
    383e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3840:	4b01      	ldr	r3, [pc, #4]	; (3848 <system_interrupt_leave_critical_section+0xc>)
    3842:	4798      	blx	r3
}
    3844:	46bd      	mov	sp, r7
    3846:	bd80      	pop	{r7, pc}
    3848:	000031a5 	.word	0x000031a5

0000384c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    384c:	b580      	push	{r7, lr}
    384e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3850:	4b06      	ldr	r3, [pc, #24]	; (386c <system_gclk_is_syncing+0x20>)
    3852:	785b      	ldrb	r3, [r3, #1]
    3854:	b2db      	uxtb	r3, r3
    3856:	b2db      	uxtb	r3, r3
    3858:	b25b      	sxtb	r3, r3
    385a:	2b00      	cmp	r3, #0
    385c:	da01      	bge.n	3862 <system_gclk_is_syncing+0x16>
		return true;
    385e:	2301      	movs	r3, #1
    3860:	e000      	b.n	3864 <system_gclk_is_syncing+0x18>
	}

	return false;
    3862:	2300      	movs	r3, #0
}
    3864:	1c18      	adds	r0, r3, #0
    3866:	46bd      	mov	sp, r7
    3868:	bd80      	pop	{r7, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	40000c00 	.word	0x40000c00

00003870 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3870:	b580      	push	{r7, lr}
    3872:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3874:	2000      	movs	r0, #0
    3876:	2108      	movs	r1, #8
    3878:	4b07      	ldr	r3, [pc, #28]	; (3898 <system_gclk_init+0x28>)
    387a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    387c:	4b07      	ldr	r3, [pc, #28]	; (389c <system_gclk_init+0x2c>)
    387e:	2201      	movs	r2, #1
    3880:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	4b05      	ldr	r3, [pc, #20]	; (389c <system_gclk_init+0x2c>)
    3886:	781b      	ldrb	r3, [r3, #0]
    3888:	b2db      	uxtb	r3, r3
    388a:	1c1a      	adds	r2, r3, #0
    388c:	2301      	movs	r3, #1
    388e:	4013      	ands	r3, r2
    3890:	d1f8      	bne.n	3884 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3892:	46bd      	mov	sp, r7
    3894:	bd80      	pop	{r7, pc}
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	000037d1 	.word	0x000037d1
    389c:	40000c00 	.word	0x40000c00

000038a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b086      	sub	sp, #24
    38a4:	af00      	add	r7, sp, #0
    38a6:	1c02      	adds	r2, r0, #0
    38a8:	6039      	str	r1, [r7, #0]
    38aa:	1dfb      	adds	r3, r7, #7
    38ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    38ae:	1dfb      	adds	r3, r7, #7
    38b0:	781b      	ldrb	r3, [r3, #0]
    38b2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    38b4:	1dfb      	adds	r3, r7, #7
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	021b      	lsls	r3, r3, #8
    38c0:	1c1a      	adds	r2, r3, #0
    38c2:	697b      	ldr	r3, [r7, #20]
    38c4:	4313      	orrs	r3, r2
    38c6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    38c8:	683b      	ldr	r3, [r7, #0]
    38ca:	785b      	ldrb	r3, [r3, #1]
    38cc:	2b00      	cmp	r3, #0
    38ce:	d004      	beq.n	38da <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    38d0:	697b      	ldr	r3, [r7, #20]
    38d2:	2280      	movs	r2, #128	; 0x80
    38d4:	02d2      	lsls	r2, r2, #11
    38d6:	4313      	orrs	r3, r2
    38d8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    38da:	683b      	ldr	r3, [r7, #0]
    38dc:	7a5b      	ldrb	r3, [r3, #9]
    38de:	2b00      	cmp	r3, #0
    38e0:	d004      	beq.n	38ec <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    38e2:	697b      	ldr	r3, [r7, #20]
    38e4:	2280      	movs	r2, #128	; 0x80
    38e6:	0312      	lsls	r2, r2, #12
    38e8:	4313      	orrs	r3, r2
    38ea:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    38ec:	683b      	ldr	r3, [r7, #0]
    38ee:	685b      	ldr	r3, [r3, #4]
    38f0:	2b01      	cmp	r3, #1
    38f2:	d92c      	bls.n	394e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    38f4:	683b      	ldr	r3, [r7, #0]
    38f6:	685a      	ldr	r2, [r3, #4]
    38f8:	683b      	ldr	r3, [r7, #0]
    38fa:	685b      	ldr	r3, [r3, #4]
    38fc:	3b01      	subs	r3, #1
    38fe:	4013      	ands	r3, r2
    3900:	d11a      	bne.n	3938 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3902:	2300      	movs	r3, #0
    3904:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3906:	2302      	movs	r3, #2
    3908:	60bb      	str	r3, [r7, #8]
    390a:	e005      	b.n	3918 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    390c:	68fb      	ldr	r3, [r7, #12]
    390e:	3301      	adds	r3, #1
    3910:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3912:	68bb      	ldr	r3, [r7, #8]
    3914:	005b      	lsls	r3, r3, #1
    3916:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3918:	683b      	ldr	r3, [r7, #0]
    391a:	685a      	ldr	r2, [r3, #4]
    391c:	68bb      	ldr	r3, [r7, #8]
    391e:	429a      	cmp	r2, r3
    3920:	d8f4      	bhi.n	390c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3922:	68fb      	ldr	r3, [r7, #12]
    3924:	021b      	lsls	r3, r3, #8
    3926:	693a      	ldr	r2, [r7, #16]
    3928:	4313      	orrs	r3, r2
    392a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    392c:	697b      	ldr	r3, [r7, #20]
    392e:	2280      	movs	r2, #128	; 0x80
    3930:	0352      	lsls	r2, r2, #13
    3932:	4313      	orrs	r3, r2
    3934:	617b      	str	r3, [r7, #20]
    3936:	e00a      	b.n	394e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3938:	683b      	ldr	r3, [r7, #0]
    393a:	685b      	ldr	r3, [r3, #4]
    393c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    393e:	693a      	ldr	r2, [r7, #16]
    3940:	4313      	orrs	r3, r2
    3942:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	2280      	movs	r2, #128	; 0x80
    3948:	0292      	lsls	r2, r2, #10
    394a:	4313      	orrs	r3, r2
    394c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    394e:	683b      	ldr	r3, [r7, #0]
    3950:	7a1b      	ldrb	r3, [r3, #8]
    3952:	2b00      	cmp	r3, #0
    3954:	d004      	beq.n	3960 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3956:	697b      	ldr	r3, [r7, #20]
    3958:	2280      	movs	r2, #128	; 0x80
    395a:	0392      	lsls	r2, r2, #14
    395c:	4313      	orrs	r3, r2
    395e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3960:	46c0      	nop			; (mov r8, r8)
    3962:	4b12      	ldr	r3, [pc, #72]	; (39ac <system_gclk_gen_set_config+0x10c>)
    3964:	4798      	blx	r3
    3966:	1e03      	subs	r3, r0, #0
    3968:	d1fb      	bne.n	3962 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    396a:	4b11      	ldr	r3, [pc, #68]	; (39b0 <system_gclk_gen_set_config+0x110>)
    396c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    396e:	4a11      	ldr	r2, [pc, #68]	; (39b4 <system_gclk_gen_set_config+0x114>)
    3970:	1dfb      	adds	r3, r7, #7
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	4b0c      	ldr	r3, [pc, #48]	; (39ac <system_gclk_gen_set_config+0x10c>)
    397a:	4798      	blx	r3
    397c:	1e03      	subs	r3, r0, #0
    397e:	d1fb      	bne.n	3978 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3980:	4b0d      	ldr	r3, [pc, #52]	; (39b8 <system_gclk_gen_set_config+0x118>)
    3982:	693a      	ldr	r2, [r7, #16]
    3984:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	4b08      	ldr	r3, [pc, #32]	; (39ac <system_gclk_gen_set_config+0x10c>)
    398a:	4798      	blx	r3
    398c:	1e03      	subs	r3, r0, #0
    398e:	d1fb      	bne.n	3988 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3990:	4b09      	ldr	r3, [pc, #36]	; (39b8 <system_gclk_gen_set_config+0x118>)
    3992:	4a09      	ldr	r2, [pc, #36]	; (39b8 <system_gclk_gen_set_config+0x118>)
    3994:	6851      	ldr	r1, [r2, #4]
    3996:	2280      	movs	r2, #128	; 0x80
    3998:	0252      	lsls	r2, r2, #9
    399a:	4011      	ands	r1, r2
    399c:	697a      	ldr	r2, [r7, #20]
    399e:	430a      	orrs	r2, r1
    39a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    39a2:	4b06      	ldr	r3, [pc, #24]	; (39bc <system_gclk_gen_set_config+0x11c>)
    39a4:	4798      	blx	r3
}
    39a6:	46bd      	mov	sp, r7
    39a8:	b006      	add	sp, #24
    39aa:	bd80      	pop	{r7, pc}
    39ac:	0000384d 	.word	0x0000384d
    39b0:	0000382d 	.word	0x0000382d
    39b4:	40000c08 	.word	0x40000c08
    39b8:	40000c00 	.word	0x40000c00
    39bc:	0000383d 	.word	0x0000383d

000039c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	af00      	add	r7, sp, #0
    39c6:	1c02      	adds	r2, r0, #0
    39c8:	1dfb      	adds	r3, r7, #7
    39ca:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    39cc:	46c0      	nop			; (mov r8, r8)
    39ce:	4b0d      	ldr	r3, [pc, #52]	; (3a04 <system_gclk_gen_enable+0x44>)
    39d0:	4798      	blx	r3
    39d2:	1e03      	subs	r3, r0, #0
    39d4:	d1fb      	bne.n	39ce <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    39d6:	4b0c      	ldr	r3, [pc, #48]	; (3a08 <system_gclk_gen_enable+0x48>)
    39d8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    39da:	4a0c      	ldr	r2, [pc, #48]	; (3a0c <system_gclk_gen_enable+0x4c>)
    39dc:	1dfb      	adds	r3, r7, #7
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	4b07      	ldr	r3, [pc, #28]	; (3a04 <system_gclk_gen_enable+0x44>)
    39e6:	4798      	blx	r3
    39e8:	1e03      	subs	r3, r0, #0
    39ea:	d1fb      	bne.n	39e4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    39ec:	4b08      	ldr	r3, [pc, #32]	; (3a10 <system_gclk_gen_enable+0x50>)
    39ee:	4a08      	ldr	r2, [pc, #32]	; (3a10 <system_gclk_gen_enable+0x50>)
    39f0:	6852      	ldr	r2, [r2, #4]
    39f2:	2180      	movs	r1, #128	; 0x80
    39f4:	0249      	lsls	r1, r1, #9
    39f6:	430a      	orrs	r2, r1
    39f8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    39fa:	4b06      	ldr	r3, [pc, #24]	; (3a14 <system_gclk_gen_enable+0x54>)
    39fc:	4798      	blx	r3
}
    39fe:	46bd      	mov	sp, r7
    3a00:	b002      	add	sp, #8
    3a02:	bd80      	pop	{r7, pc}
    3a04:	0000384d 	.word	0x0000384d
    3a08:	0000382d 	.word	0x0000382d
    3a0c:	40000c04 	.word	0x40000c04
    3a10:	40000c00 	.word	0x40000c00
    3a14:	0000383d 	.word	0x0000383d

00003a18 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3a18:	b580      	push	{r7, lr}
    3a1a:	b086      	sub	sp, #24
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	1c02      	adds	r2, r0, #0
    3a20:	1dfb      	adds	r3, r7, #7
    3a22:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3a24:	46c0      	nop			; (mov r8, r8)
    3a26:	4b2e      	ldr	r3, [pc, #184]	; (3ae0 <system_gclk_gen_get_hz+0xc8>)
    3a28:	4798      	blx	r3
    3a2a:	1e03      	subs	r3, r0, #0
    3a2c:	d1fb      	bne.n	3a26 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3a2e:	4b2d      	ldr	r3, [pc, #180]	; (3ae4 <system_gclk_gen_get_hz+0xcc>)
    3a30:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3a32:	4a2d      	ldr	r2, [pc, #180]	; (3ae8 <system_gclk_gen_get_hz+0xd0>)
    3a34:	1dfb      	adds	r3, r7, #7
    3a36:	781b      	ldrb	r3, [r3, #0]
    3a38:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	4b28      	ldr	r3, [pc, #160]	; (3ae0 <system_gclk_gen_get_hz+0xc8>)
    3a3e:	4798      	blx	r3
    3a40:	1e03      	subs	r3, r0, #0
    3a42:	d1fb      	bne.n	3a3c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3a44:	4b29      	ldr	r3, [pc, #164]	; (3aec <system_gclk_gen_get_hz+0xd4>)
    3a46:	685b      	ldr	r3, [r3, #4]
    3a48:	0a1b      	lsrs	r3, r3, #8
    3a4a:	1c1a      	adds	r2, r3, #0
    3a4c:	231f      	movs	r3, #31
    3a4e:	4013      	ands	r3, r2
    3a50:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3a52:	1c18      	adds	r0, r3, #0
    3a54:	4b26      	ldr	r3, [pc, #152]	; (3af0 <system_gclk_gen_get_hz+0xd8>)
    3a56:	4798      	blx	r3
    3a58:	1c03      	adds	r3, r0, #0
    3a5a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3a5c:	4a22      	ldr	r2, [pc, #136]	; (3ae8 <system_gclk_gen_get_hz+0xd0>)
    3a5e:	1dfb      	adds	r3, r7, #7
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3a64:	4b21      	ldr	r3, [pc, #132]	; (3aec <system_gclk_gen_get_hz+0xd4>)
    3a66:	685b      	ldr	r3, [r3, #4]
    3a68:	0d1b      	lsrs	r3, r3, #20
    3a6a:	1c1a      	adds	r2, r3, #0
    3a6c:	2301      	movs	r3, #1
    3a6e:	4013      	ands	r3, r2
    3a70:	b2da      	uxtb	r2, r3
    3a72:	2313      	movs	r3, #19
    3a74:	18fb      	adds	r3, r7, r3
    3a76:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3a78:	4a1e      	ldr	r2, [pc, #120]	; (3af4 <system_gclk_gen_get_hz+0xdc>)
    3a7a:	1dfb      	adds	r3, r7, #7
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3a80:	46c0      	nop			; (mov r8, r8)
    3a82:	4b17      	ldr	r3, [pc, #92]	; (3ae0 <system_gclk_gen_get_hz+0xc8>)
    3a84:	4798      	blx	r3
    3a86:	1e03      	subs	r3, r0, #0
    3a88:	d1fb      	bne.n	3a82 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3a8a:	4b18      	ldr	r3, [pc, #96]	; (3aec <system_gclk_gen_get_hz+0xd4>)
    3a8c:	689b      	ldr	r3, [r3, #8]
    3a8e:	0a1b      	lsrs	r3, r3, #8
    3a90:	1c1a      	adds	r2, r3, #0
    3a92:	2300      	movs	r3, #0
    3a94:	439a      	bics	r2, r3
    3a96:	1c13      	adds	r3, r2, #0
    3a98:	b29b      	uxth	r3, r3
    3a9a:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3a9c:	4b16      	ldr	r3, [pc, #88]	; (3af8 <system_gclk_gen_get_hz+0xe0>)
    3a9e:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3aa0:	2313      	movs	r3, #19
    3aa2:	18fb      	adds	r3, r7, r3
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d109      	bne.n	3abe <system_gclk_gen_get_hz+0xa6>
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	2b01      	cmp	r3, #1
    3aae:	d906      	bls.n	3abe <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    3ab0:	4b12      	ldr	r3, [pc, #72]	; (3afc <system_gclk_gen_get_hz+0xe4>)
    3ab2:	6978      	ldr	r0, [r7, #20]
    3ab4:	68f9      	ldr	r1, [r7, #12]
    3ab6:	4798      	blx	r3
    3ab8:	1c03      	adds	r3, r0, #0
    3aba:	617b      	str	r3, [r7, #20]
    3abc:	e00a      	b.n	3ad4 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    3abe:	2313      	movs	r3, #19
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	781b      	ldrb	r3, [r3, #0]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d005      	beq.n	3ad4 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    3ac8:	68fb      	ldr	r3, [r7, #12]
    3aca:	3301      	adds	r3, #1
    3acc:	1c1a      	adds	r2, r3, #0
    3ace:	697b      	ldr	r3, [r7, #20]
    3ad0:	40d3      	lsrs	r3, r2
    3ad2:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3ad4:	697b      	ldr	r3, [r7, #20]
}
    3ad6:	1c18      	adds	r0, r3, #0
    3ad8:	46bd      	mov	sp, r7
    3ada:	b006      	add	sp, #24
    3adc:	bd80      	pop	{r7, pc}
    3ade:	46c0      	nop			; (mov r8, r8)
    3ae0:	0000384d 	.word	0x0000384d
    3ae4:	0000382d 	.word	0x0000382d
    3ae8:	40000c04 	.word	0x40000c04
    3aec:	40000c00 	.word	0x40000c00
    3af0:	00003365 	.word	0x00003365
    3af4:	40000c08 	.word	0x40000c08
    3af8:	0000383d 	.word	0x0000383d
    3afc:	00006241 	.word	0x00006241

00003b00 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	1c02      	adds	r2, r0, #0
    3b08:	6039      	str	r1, [r7, #0]
    3b0a:	1dfb      	adds	r3, r7, #7
    3b0c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3b0e:	1dfb      	adds	r3, r7, #7
    3b10:	781b      	ldrb	r3, [r3, #0]
    3b12:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3b14:	683b      	ldr	r3, [r7, #0]
    3b16:	781b      	ldrb	r3, [r3, #0]
    3b18:	021b      	lsls	r3, r3, #8
    3b1a:	1c1a      	adds	r2, r3, #0
    3b1c:	68fb      	ldr	r3, [r7, #12]
    3b1e:	4313      	orrs	r3, r2
    3b20:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3b22:	1dfb      	adds	r3, r7, #7
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	1c18      	adds	r0, r3, #0
    3b28:	4b04      	ldr	r3, [pc, #16]	; (3b3c <system_gclk_chan_set_config+0x3c>)
    3b2a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3b2c:	4b04      	ldr	r3, [pc, #16]	; (3b40 <system_gclk_chan_set_config+0x40>)
    3b2e:	68fa      	ldr	r2, [r7, #12]
    3b30:	b292      	uxth	r2, r2
    3b32:	805a      	strh	r2, [r3, #2]
}
    3b34:	46bd      	mov	sp, r7
    3b36:	b004      	add	sp, #16
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	00003b89 	.word	0x00003b89
    3b40:	40000c00 	.word	0x40000c00

00003b44 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b082      	sub	sp, #8
    3b48:	af00      	add	r7, sp, #0
    3b4a:	1c02      	adds	r2, r0, #0
    3b4c:	1dfb      	adds	r3, r7, #7
    3b4e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3b50:	4b09      	ldr	r3, [pc, #36]	; (3b78 <system_gclk_chan_enable+0x34>)
    3b52:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3b54:	4a09      	ldr	r2, [pc, #36]	; (3b7c <system_gclk_chan_enable+0x38>)
    3b56:	1dfb      	adds	r3, r7, #7
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3b5c:	4908      	ldr	r1, [pc, #32]	; (3b80 <system_gclk_chan_enable+0x3c>)
    3b5e:	4b08      	ldr	r3, [pc, #32]	; (3b80 <system_gclk_chan_enable+0x3c>)
    3b60:	885b      	ldrh	r3, [r3, #2]
    3b62:	b29b      	uxth	r3, r3
    3b64:	2280      	movs	r2, #128	; 0x80
    3b66:	01d2      	lsls	r2, r2, #7
    3b68:	4313      	orrs	r3, r2
    3b6a:	b29b      	uxth	r3, r3
    3b6c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3b6e:	4b05      	ldr	r3, [pc, #20]	; (3b84 <system_gclk_chan_enable+0x40>)
    3b70:	4798      	blx	r3
}
    3b72:	46bd      	mov	sp, r7
    3b74:	b002      	add	sp, #8
    3b76:	bd80      	pop	{r7, pc}
    3b78:	0000382d 	.word	0x0000382d
    3b7c:	40000c02 	.word	0x40000c02
    3b80:	40000c00 	.word	0x40000c00
    3b84:	0000383d 	.word	0x0000383d

00003b88 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b084      	sub	sp, #16
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	1c02      	adds	r2, r0, #0
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3b94:	4b1d      	ldr	r3, [pc, #116]	; (3c0c <system_gclk_chan_disable+0x84>)
    3b96:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3b98:	4a1d      	ldr	r2, [pc, #116]	; (3c10 <system_gclk_chan_disable+0x88>)
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3ba0:	4b1c      	ldr	r3, [pc, #112]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3ba2:	885b      	ldrh	r3, [r3, #2]
    3ba4:	b29b      	uxth	r3, r3
    3ba6:	0a1b      	lsrs	r3, r3, #8
    3ba8:	1c1a      	adds	r2, r3, #0
    3baa:	230f      	movs	r3, #15
    3bac:	4013      	ands	r3, r2
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3bb2:	4b18      	ldr	r3, [pc, #96]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3bb4:	885a      	ldrh	r2, [r3, #2]
    3bb6:	4918      	ldr	r1, [pc, #96]	; (3c18 <system_gclk_chan_disable+0x90>)
    3bb8:	400a      	ands	r2, r1
    3bba:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3bbc:	4a15      	ldr	r2, [pc, #84]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3bbe:	4b15      	ldr	r3, [pc, #84]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3bc0:	885b      	ldrh	r3, [r3, #2]
    3bc2:	b29b      	uxth	r3, r3
    3bc4:	4915      	ldr	r1, [pc, #84]	; (3c1c <system_gclk_chan_disable+0x94>)
    3bc6:	400b      	ands	r3, r1
    3bc8:	b29b      	uxth	r3, r3
    3bca:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3bcc:	46c0      	nop			; (mov r8, r8)
    3bce:	4b11      	ldr	r3, [pc, #68]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3bd0:	885b      	ldrh	r3, [r3, #2]
    3bd2:	b29b      	uxth	r3, r3
    3bd4:	1c1a      	adds	r2, r3, #0
    3bd6:	2380      	movs	r3, #128	; 0x80
    3bd8:	01db      	lsls	r3, r3, #7
    3bda:	4013      	ands	r3, r2
    3bdc:	d1f7      	bne.n	3bce <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3bde:	4b0d      	ldr	r3, [pc, #52]	; (3c14 <system_gclk_chan_disable+0x8c>)
    3be0:	68fa      	ldr	r2, [r7, #12]
    3be2:	b2d2      	uxtb	r2, r2
    3be4:	1c11      	adds	r1, r2, #0
    3be6:	220f      	movs	r2, #15
    3be8:	400a      	ands	r2, r1
    3bea:	b2d2      	uxtb	r2, r2
    3bec:	1c11      	adds	r1, r2, #0
    3bee:	220f      	movs	r2, #15
    3bf0:	400a      	ands	r2, r1
    3bf2:	0210      	lsls	r0, r2, #8
    3bf4:	885a      	ldrh	r2, [r3, #2]
    3bf6:	4908      	ldr	r1, [pc, #32]	; (3c18 <system_gclk_chan_disable+0x90>)
    3bf8:	400a      	ands	r2, r1
    3bfa:	1c11      	adds	r1, r2, #0
    3bfc:	1c02      	adds	r2, r0, #0
    3bfe:	430a      	orrs	r2, r1
    3c00:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    3c02:	4b07      	ldr	r3, [pc, #28]	; (3c20 <system_gclk_chan_disable+0x98>)
    3c04:	4798      	blx	r3
}
    3c06:	46bd      	mov	sp, r7
    3c08:	b004      	add	sp, #16
    3c0a:	bd80      	pop	{r7, pc}
    3c0c:	0000382d 	.word	0x0000382d
    3c10:	40000c02 	.word	0x40000c02
    3c14:	40000c00 	.word	0x40000c00
    3c18:	fffff0ff 	.word	0xfffff0ff
    3c1c:	ffffbfff 	.word	0xffffbfff
    3c20:	0000383d 	.word	0x0000383d

00003c24 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b084      	sub	sp, #16
    3c28:	af00      	add	r7, sp, #0
    3c2a:	1c02      	adds	r2, r0, #0
    3c2c:	1dfb      	adds	r3, r7, #7
    3c2e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3c30:	4b0e      	ldr	r3, [pc, #56]	; (3c6c <system_gclk_chan_get_hz+0x48>)
    3c32:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c34:	4a0e      	ldr	r2, [pc, #56]	; (3c70 <system_gclk_chan_get_hz+0x4c>)
    3c36:	1dfb      	adds	r3, r7, #7
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3c3c:	4b0d      	ldr	r3, [pc, #52]	; (3c74 <system_gclk_chan_get_hz+0x50>)
    3c3e:	885b      	ldrh	r3, [r3, #2]
    3c40:	b29b      	uxth	r3, r3
    3c42:	0a1b      	lsrs	r3, r3, #8
    3c44:	1c1a      	adds	r2, r3, #0
    3c46:	230f      	movs	r3, #15
    3c48:	4013      	ands	r3, r2
    3c4a:	b2da      	uxtb	r2, r3
    3c4c:	230f      	movs	r3, #15
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3c52:	4b09      	ldr	r3, [pc, #36]	; (3c78 <system_gclk_chan_get_hz+0x54>)
    3c54:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3c56:	230f      	movs	r3, #15
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	1c18      	adds	r0, r3, #0
    3c5e:	4b07      	ldr	r3, [pc, #28]	; (3c7c <system_gclk_chan_get_hz+0x58>)
    3c60:	4798      	blx	r3
    3c62:	1c03      	adds	r3, r0, #0
}
    3c64:	1c18      	adds	r0, r3, #0
    3c66:	46bd      	mov	sp, r7
    3c68:	b004      	add	sp, #16
    3c6a:	bd80      	pop	{r7, pc}
    3c6c:	0000382d 	.word	0x0000382d
    3c70:	40000c02 	.word	0x40000c02
    3c74:	40000c00 	.word	0x40000c00
    3c78:	0000383d 	.word	0x0000383d
    3c7c:	00003a19 	.word	0x00003a19

00003c80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	1c02      	adds	r2, r0, #0
    3c88:	1dfb      	adds	r3, r7, #7
    3c8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c8c:	230f      	movs	r3, #15
    3c8e:	18fb      	adds	r3, r7, r3
    3c90:	1dfa      	adds	r2, r7, #7
    3c92:	7812      	ldrb	r2, [r2, #0]
    3c94:	09d2      	lsrs	r2, r2, #7
    3c96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c98:	230e      	movs	r3, #14
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	1dfa      	adds	r2, r7, #7
    3c9e:	7812      	ldrb	r2, [r2, #0]
    3ca0:	0952      	lsrs	r2, r2, #5
    3ca2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ca4:	4b0d      	ldr	r3, [pc, #52]	; (3cdc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ca6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ca8:	230f      	movs	r3, #15
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d10f      	bne.n	3cd2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3cb2:	230f      	movs	r3, #15
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	009b      	lsls	r3, r3, #2
    3cba:	2210      	movs	r2, #16
    3cbc:	4694      	mov	ip, r2
    3cbe:	44bc      	add	ip, r7
    3cc0:	4463      	add	r3, ip
    3cc2:	3b08      	subs	r3, #8
    3cc4:	681a      	ldr	r2, [r3, #0]
    3cc6:	230e      	movs	r3, #14
    3cc8:	18fb      	adds	r3, r7, r3
    3cca:	781b      	ldrb	r3, [r3, #0]
    3ccc:	01db      	lsls	r3, r3, #7
    3cce:	18d3      	adds	r3, r2, r3
    3cd0:	e000      	b.n	3cd4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3cd2:	2300      	movs	r3, #0
	}
}
    3cd4:	1c18      	adds	r0, r3, #0
    3cd6:	46bd      	mov	sp, r7
    3cd8:	b004      	add	sp, #16
    3cda:	bd80      	pop	{r7, pc}
    3cdc:	41004400 	.word	0x41004400

00003ce0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b088      	sub	sp, #32
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	60f8      	str	r0, [r7, #12]
    3ce8:	60b9      	str	r1, [r7, #8]
    3cea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3cec:	2300      	movs	r3, #0
    3cee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	78db      	ldrb	r3, [r3, #3]
    3cf4:	2201      	movs	r2, #1
    3cf6:	4053      	eors	r3, r2
    3cf8:	b2db      	uxtb	r3, r3
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d035      	beq.n	3d6a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	2b80      	cmp	r3, #128	; 0x80
    3d04:	d00b      	beq.n	3d1e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3d06:	69fb      	ldr	r3, [r7, #28]
    3d08:	2280      	movs	r2, #128	; 0x80
    3d0a:	0252      	lsls	r2, r2, #9
    3d0c:	4313      	orrs	r3, r2
    3d0e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	781b      	ldrb	r3, [r3, #0]
    3d14:	061b      	lsls	r3, r3, #24
    3d16:	1c1a      	adds	r2, r3, #0
    3d18:	69fb      	ldr	r3, [r7, #28]
    3d1a:	4313      	orrs	r3, r2
    3d1c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	785b      	ldrb	r3, [r3, #1]
    3d22:	2b00      	cmp	r3, #0
    3d24:	d003      	beq.n	3d2e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3d2a:	2b02      	cmp	r3, #2
    3d2c:	d110      	bne.n	3d50 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3d2e:	69fb      	ldr	r3, [r7, #28]
    3d30:	2280      	movs	r2, #128	; 0x80
    3d32:	0292      	lsls	r2, r2, #10
    3d34:	4313      	orrs	r3, r2
    3d36:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	789b      	ldrb	r3, [r3, #2]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d004      	beq.n	3d4a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3d40:	69fb      	ldr	r3, [r7, #28]
    3d42:	2280      	movs	r2, #128	; 0x80
    3d44:	02d2      	lsls	r2, r2, #11
    3d46:	4313      	orrs	r3, r2
    3d48:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	68ba      	ldr	r2, [r7, #8]
    3d4e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	785b      	ldrb	r3, [r3, #1]
    3d54:	2b01      	cmp	r3, #1
    3d56:	d003      	beq.n	3d60 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d5c:	2b02      	cmp	r3, #2
    3d5e:	d107      	bne.n	3d70 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3d60:	69fb      	ldr	r3, [r7, #28]
    3d62:	4a21      	ldr	r2, [pc, #132]	; (3de8 <_system_pinmux_config+0x108>)
    3d64:	4013      	ands	r3, r2
    3d66:	61fb      	str	r3, [r7, #28]
    3d68:	e002      	b.n	3d70 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3d6a:	68fb      	ldr	r3, [r7, #12]
    3d6c:	68ba      	ldr	r2, [r7, #8]
    3d6e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3d70:	68bb      	ldr	r3, [r7, #8]
    3d72:	041b      	lsls	r3, r3, #16
    3d74:	0c1b      	lsrs	r3, r3, #16
    3d76:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3d78:	68bb      	ldr	r3, [r7, #8]
    3d7a:	0c1b      	lsrs	r3, r3, #16
    3d7c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d7e:	69ba      	ldr	r2, [r7, #24]
    3d80:	69fb      	ldr	r3, [r7, #28]
    3d82:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3d84:	22a0      	movs	r2, #160	; 0xa0
    3d86:	05d2      	lsls	r2, r2, #23
    3d88:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d8e:	697a      	ldr	r2, [r7, #20]
    3d90:	69fb      	ldr	r3, [r7, #28]
    3d92:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3d94:	22d0      	movs	r2, #208	; 0xd0
    3d96:	0612      	lsls	r2, r2, #24
    3d98:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	78db      	ldrb	r3, [r3, #3]
    3da2:	2201      	movs	r2, #1
    3da4:	4053      	eors	r3, r2
    3da6:	b2db      	uxtb	r3, r3
    3da8:	2b00      	cmp	r3, #0
    3daa:	d01a      	beq.n	3de2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3dac:	69fa      	ldr	r2, [r7, #28]
    3dae:	2380      	movs	r3, #128	; 0x80
    3db0:	02db      	lsls	r3, r3, #11
    3db2:	4013      	ands	r3, r2
    3db4:	d00a      	beq.n	3dcc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	789b      	ldrb	r3, [r3, #2]
    3dba:	2b01      	cmp	r3, #1
    3dbc:	d103      	bne.n	3dc6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	68ba      	ldr	r2, [r7, #8]
    3dc2:	619a      	str	r2, [r3, #24]
    3dc4:	e002      	b.n	3dcc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	68ba      	ldr	r2, [r7, #8]
    3dca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	785b      	ldrb	r3, [r3, #1]
    3dd0:	2b01      	cmp	r3, #1
    3dd2:	d003      	beq.n	3ddc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3dd8:	2b02      	cmp	r3, #2
    3dda:	d102      	bne.n	3de2 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3ddc:	68fb      	ldr	r3, [r7, #12]
    3dde:	68ba      	ldr	r2, [r7, #8]
    3de0:	609a      	str	r2, [r3, #8]
		}
	}
}
    3de2:	46bd      	mov	sp, r7
    3de4:	b008      	add	sp, #32
    3de6:	bd80      	pop	{r7, pc}
    3de8:	fffbffff 	.word	0xfffbffff

00003dec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b084      	sub	sp, #16
    3df0:	af00      	add	r7, sp, #0
    3df2:	1c02      	adds	r2, r0, #0
    3df4:	6039      	str	r1, [r7, #0]
    3df6:	1dfb      	adds	r3, r7, #7
    3df8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3dfa:	1dfb      	adds	r3, r7, #7
    3dfc:	781b      	ldrb	r3, [r3, #0]
    3dfe:	1c18      	adds	r0, r3, #0
    3e00:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <system_pinmux_pin_set_config+0x44>)
    3e02:	4798      	blx	r3
    3e04:	1c03      	adds	r3, r0, #0
    3e06:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	781b      	ldrb	r3, [r3, #0]
    3e0c:	221f      	movs	r2, #31
    3e0e:	4013      	ands	r3, r2
    3e10:	2201      	movs	r2, #1
    3e12:	409a      	lsls	r2, r3
    3e14:	1c13      	adds	r3, r2, #0
    3e16:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3e18:	68f9      	ldr	r1, [r7, #12]
    3e1a:	68ba      	ldr	r2, [r7, #8]
    3e1c:	683b      	ldr	r3, [r7, #0]
    3e1e:	1c08      	adds	r0, r1, #0
    3e20:	1c11      	adds	r1, r2, #0
    3e22:	1c1a      	adds	r2, r3, #0
    3e24:	4b03      	ldr	r3, [pc, #12]	; (3e34 <system_pinmux_pin_set_config+0x48>)
    3e26:	4798      	blx	r3
}
    3e28:	46bd      	mov	sp, r7
    3e2a:	b004      	add	sp, #16
    3e2c:	bd80      	pop	{r7, pc}
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	00003c81 	.word	0x00003c81
    3e34:	00003ce1 	.word	0x00003ce1

00003e38 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	af00      	add	r7, sp, #0
	return;
    3e3c:	46c0      	nop			; (mov r8, r8)
}
    3e3e:	46bd      	mov	sp, r7
    3e40:	bd80      	pop	{r7, pc}
    3e42:	46c0      	nop			; (mov r8, r8)

00003e44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3e44:	b580      	push	{r7, lr}
    3e46:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3e48:	4b05      	ldr	r3, [pc, #20]	; (3e60 <system_init+0x1c>)
    3e4a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3e4c:	4b05      	ldr	r3, [pc, #20]	; (3e64 <system_init+0x20>)
    3e4e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3e50:	4b05      	ldr	r3, [pc, #20]	; (3e68 <system_init+0x24>)
    3e52:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3e54:	4b05      	ldr	r3, [pc, #20]	; (3e6c <system_init+0x28>)
    3e56:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3e58:	4b05      	ldr	r3, [pc, #20]	; (3e70 <system_init+0x2c>)
    3e5a:	4798      	blx	r3
}
    3e5c:	46bd      	mov	sp, r7
    3e5e:	bd80      	pop	{r7, pc}
    3e60:	0000364d 	.word	0x0000364d
    3e64:	0000314d 	.word	0x0000314d
    3e68:	00003e39 	.word	0x00003e39
    3e6c:	00000271 	.word	0x00000271
    3e70:	00003e39 	.word	0x00003e39

00003e74 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b082      	sub	sp, #8
    3e78:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3e7a:	4b2f      	ldr	r3, [pc, #188]	; (3f38 <Reset_Handler+0xc4>)
    3e7c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3e7e:	4b2f      	ldr	r3, [pc, #188]	; (3f3c <Reset_Handler+0xc8>)
    3e80:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3e82:	687a      	ldr	r2, [r7, #4]
    3e84:	683b      	ldr	r3, [r7, #0]
    3e86:	429a      	cmp	r2, r3
    3e88:	d00c      	beq.n	3ea4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3e8a:	e007      	b.n	3e9c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3e8c:	683b      	ldr	r3, [r7, #0]
    3e8e:	1d1a      	adds	r2, r3, #4
    3e90:	603a      	str	r2, [r7, #0]
    3e92:	687a      	ldr	r2, [r7, #4]
    3e94:	1d11      	adds	r1, r2, #4
    3e96:	6079      	str	r1, [r7, #4]
    3e98:	6812      	ldr	r2, [r2, #0]
    3e9a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3e9c:	683a      	ldr	r2, [r7, #0]
    3e9e:	4b28      	ldr	r3, [pc, #160]	; (3f40 <Reset_Handler+0xcc>)
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d3f3      	bcc.n	3e8c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3ea4:	4b27      	ldr	r3, [pc, #156]	; (3f44 <Reset_Handler+0xd0>)
    3ea6:	603b      	str	r3, [r7, #0]
    3ea8:	e004      	b.n	3eb4 <Reset_Handler+0x40>
                *pDest++ = 0;
    3eaa:	683b      	ldr	r3, [r7, #0]
    3eac:	1d1a      	adds	r2, r3, #4
    3eae:	603a      	str	r2, [r7, #0]
    3eb0:	2200      	movs	r2, #0
    3eb2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3eb4:	683a      	ldr	r2, [r7, #0]
    3eb6:	4b24      	ldr	r3, [pc, #144]	; (3f48 <Reset_Handler+0xd4>)
    3eb8:	429a      	cmp	r2, r3
    3eba:	d3f6      	bcc.n	3eaa <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3ebc:	4b23      	ldr	r3, [pc, #140]	; (3f4c <Reset_Handler+0xd8>)
    3ebe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3ec0:	4b23      	ldr	r3, [pc, #140]	; (3f50 <Reset_Handler+0xdc>)
    3ec2:	687a      	ldr	r2, [r7, #4]
    3ec4:	21ff      	movs	r1, #255	; 0xff
    3ec6:	438a      	bics	r2, r1
    3ec8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3eca:	4a22      	ldr	r2, [pc, #136]	; (3f54 <Reset_Handler+0xe0>)
    3ecc:	2390      	movs	r3, #144	; 0x90
    3ece:	005b      	lsls	r3, r3, #1
    3ed0:	2102      	movs	r1, #2
    3ed2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3ed4:	4b20      	ldr	r3, [pc, #128]	; (3f58 <Reset_Handler+0xe4>)
    3ed6:	78da      	ldrb	r2, [r3, #3]
    3ed8:	2103      	movs	r1, #3
    3eda:	438a      	bics	r2, r1
    3edc:	1c11      	adds	r1, r2, #0
    3ede:	2202      	movs	r2, #2
    3ee0:	430a      	orrs	r2, r1
    3ee2:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3ee4:	4b1c      	ldr	r3, [pc, #112]	; (3f58 <Reset_Handler+0xe4>)
    3ee6:	78da      	ldrb	r2, [r3, #3]
    3ee8:	210c      	movs	r1, #12
    3eea:	438a      	bics	r2, r1
    3eec:	1c11      	adds	r1, r2, #0
    3eee:	2208      	movs	r2, #8
    3ef0:	430a      	orrs	r2, r1
    3ef2:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3ef4:	4b19      	ldr	r3, [pc, #100]	; (3f5c <Reset_Handler+0xe8>)
    3ef6:	7b9a      	ldrb	r2, [r3, #14]
    3ef8:	2130      	movs	r1, #48	; 0x30
    3efa:	438a      	bics	r2, r1
    3efc:	1c11      	adds	r1, r2, #0
    3efe:	2220      	movs	r2, #32
    3f00:	430a      	orrs	r2, r1
    3f02:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3f04:	4b15      	ldr	r3, [pc, #84]	; (3f5c <Reset_Handler+0xe8>)
    3f06:	7b9a      	ldrb	r2, [r3, #14]
    3f08:	210c      	movs	r1, #12
    3f0a:	438a      	bics	r2, r1
    3f0c:	1c11      	adds	r1, r2, #0
    3f0e:	2208      	movs	r2, #8
    3f10:	430a      	orrs	r2, r1
    3f12:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3f14:	4b11      	ldr	r3, [pc, #68]	; (3f5c <Reset_Handler+0xe8>)
    3f16:	7b9a      	ldrb	r2, [r3, #14]
    3f18:	2103      	movs	r1, #3
    3f1a:	438a      	bics	r2, r1
    3f1c:	1c11      	adds	r1, r2, #0
    3f1e:	2202      	movs	r2, #2
    3f20:	430a      	orrs	r2, r1
    3f22:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3f24:	4b0e      	ldr	r3, [pc, #56]	; (3f60 <Reset_Handler+0xec>)
    3f26:	685a      	ldr	r2, [r3, #4]
    3f28:	2180      	movs	r1, #128	; 0x80
    3f2a:	430a      	orrs	r2, r1
    3f2c:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    3f2e:	4b0d      	ldr	r3, [pc, #52]	; (3f64 <Reset_Handler+0xf0>)
    3f30:	4798      	blx	r3

        /* Branch to main function */
        main();
    3f32:	4b0d      	ldr	r3, [pc, #52]	; (3f68 <Reset_Handler+0xf4>)
    3f34:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3f36:	e7fe      	b.n	3f36 <Reset_Handler+0xc2>
    3f38:	00008118 	.word	0x00008118
    3f3c:	20000000 	.word	0x20000000
    3f40:	20000004 	.word	0x20000004
    3f44:	20000004 	.word	0x20000004
    3f48:	20000240 	.word	0x20000240
    3f4c:	00000000 	.word	0x00000000
    3f50:	e000ed00 	.word	0xe000ed00
    3f54:	41007000 	.word	0x41007000
    3f58:	41005000 	.word	0x41005000
    3f5c:	41004800 	.word	0x41004800
    3f60:	41004000 	.word	0x41004000
    3f64:	00007f11 	.word	0x00007f11
    3f68:	00006099 	.word	0x00006099

00003f6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	af00      	add	r7, sp, #0
        while (1) {
        }
    3f70:	e7fe      	b.n	3f70 <Dummy_Handler+0x4>
    3f72:	46c0      	nop			; (mov r8, r8)

00003f74 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b084      	sub	sp, #16
    3f78:	af00      	add	r7, sp, #0
    3f7a:	1c02      	adds	r2, r0, #0
    3f7c:	1dfb      	adds	r3, r7, #7
    3f7e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3f80:	230f      	movs	r3, #15
    3f82:	18fb      	adds	r3, r7, r3
    3f84:	1dfa      	adds	r2, r7, #7
    3f86:	7812      	ldrb	r2, [r2, #0]
    3f88:	09d2      	lsrs	r2, r2, #7
    3f8a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3f8c:	230e      	movs	r3, #14
    3f8e:	18fb      	adds	r3, r7, r3
    3f90:	1dfa      	adds	r2, r7, #7
    3f92:	7812      	ldrb	r2, [r2, #0]
    3f94:	0952      	lsrs	r2, r2, #5
    3f96:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3f98:	4b0d      	ldr	r3, [pc, #52]	; (3fd0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3f9a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3f9c:	230f      	movs	r3, #15
    3f9e:	18fb      	adds	r3, r7, r3
    3fa0:	781b      	ldrb	r3, [r3, #0]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d10f      	bne.n	3fc6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3fa6:	230f      	movs	r3, #15
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	781b      	ldrb	r3, [r3, #0]
    3fac:	009b      	lsls	r3, r3, #2
    3fae:	2210      	movs	r2, #16
    3fb0:	4694      	mov	ip, r2
    3fb2:	44bc      	add	ip, r7
    3fb4:	4463      	add	r3, ip
    3fb6:	3b08      	subs	r3, #8
    3fb8:	681a      	ldr	r2, [r3, #0]
    3fba:	230e      	movs	r3, #14
    3fbc:	18fb      	adds	r3, r7, r3
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	01db      	lsls	r3, r3, #7
    3fc2:	18d3      	adds	r3, r2, r3
    3fc4:	e000      	b.n	3fc8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3fc6:	2300      	movs	r3, #0
	}
}
    3fc8:	1c18      	adds	r0, r3, #0
    3fca:	46bd      	mov	sp, r7
    3fcc:	b004      	add	sp, #16
    3fce:	bd80      	pop	{r7, pc}
    3fd0:	41004400 	.word	0x41004400

00003fd4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	1c02      	adds	r2, r0, #0
    3fdc:	1dfb      	adds	r3, r7, #7
    3fde:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3fe0:	1dfb      	adds	r3, r7, #7
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	1c18      	adds	r0, r3, #0
    3fe6:	4b03      	ldr	r3, [pc, #12]	; (3ff4 <port_get_group_from_gpio_pin+0x20>)
    3fe8:	4798      	blx	r3
    3fea:	1c03      	adds	r3, r0, #0
}
    3fec:	1c18      	adds	r0, r3, #0
    3fee:	46bd      	mov	sp, r7
    3ff0:	b002      	add	sp, #8
    3ff2:	bd80      	pop	{r7, pc}
    3ff4:	00003f75 	.word	0x00003f75

00003ff8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	b082      	sub	sp, #8
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2200      	movs	r2, #0
    4004:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	2201      	movs	r2, #1
    400a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	2200      	movs	r2, #0
    4010:	709a      	strb	r2, [r3, #2]
}
    4012:	46bd      	mov	sp, r7
    4014:	b002      	add	sp, #8
    4016:	bd80      	pop	{r7, pc}

00004018 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4018:	b580      	push	{r7, lr}
    401a:	b084      	sub	sp, #16
    401c:	af00      	add	r7, sp, #0
    401e:	1c02      	adds	r2, r0, #0
    4020:	1dfb      	adds	r3, r7, #7
    4022:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4024:	1dfb      	adds	r3, r7, #7
    4026:	781b      	ldrb	r3, [r3, #0]
    4028:	1c18      	adds	r0, r3, #0
    402a:	4b0b      	ldr	r3, [pc, #44]	; (4058 <port_pin_get_input_level+0x40>)
    402c:	4798      	blx	r3
    402e:	1c03      	adds	r3, r0, #0
    4030:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4032:	1dfb      	adds	r3, r7, #7
    4034:	781b      	ldrb	r3, [r3, #0]
    4036:	221f      	movs	r2, #31
    4038:	4013      	ands	r3, r2
    403a:	2201      	movs	r2, #1
    403c:	409a      	lsls	r2, r3
    403e:	1c13      	adds	r3, r2, #0
    4040:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4042:	68fb      	ldr	r3, [r7, #12]
    4044:	6a1b      	ldr	r3, [r3, #32]
    4046:	68ba      	ldr	r2, [r7, #8]
    4048:	4013      	ands	r3, r2
    404a:	1e5a      	subs	r2, r3, #1
    404c:	4193      	sbcs	r3, r2
    404e:	b2db      	uxtb	r3, r3
}
    4050:	1c18      	adds	r0, r3, #0
    4052:	46bd      	mov	sp, r7
    4054:	b004      	add	sp, #16
    4056:	bd80      	pop	{r7, pc}
    4058:	00003fd5 	.word	0x00003fd5

0000405c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    405c:	b580      	push	{r7, lr}
    405e:	b084      	sub	sp, #16
    4060:	af00      	add	r7, sp, #0
    4062:	1c02      	adds	r2, r0, #0
    4064:	1dfb      	adds	r3, r7, #7
    4066:	701a      	strb	r2, [r3, #0]
    4068:	1dbb      	adds	r3, r7, #6
    406a:	1c0a      	adds	r2, r1, #0
    406c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    406e:	1dfb      	adds	r3, r7, #7
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	1c18      	adds	r0, r3, #0
    4074:	4b0c      	ldr	r3, [pc, #48]	; (40a8 <port_pin_set_output_level+0x4c>)
    4076:	4798      	blx	r3
    4078:	1c03      	adds	r3, r0, #0
    407a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    407c:	1dfb      	adds	r3, r7, #7
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	221f      	movs	r2, #31
    4082:	4013      	ands	r3, r2
    4084:	2201      	movs	r2, #1
    4086:	409a      	lsls	r2, r3
    4088:	1c13      	adds	r3, r2, #0
    408a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    408c:	1dbb      	adds	r3, r7, #6
    408e:	781b      	ldrb	r3, [r3, #0]
    4090:	2b00      	cmp	r3, #0
    4092:	d003      	beq.n	409c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4094:	68fb      	ldr	r3, [r7, #12]
    4096:	68ba      	ldr	r2, [r7, #8]
    4098:	619a      	str	r2, [r3, #24]
    409a:	e002      	b.n	40a2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	68ba      	ldr	r2, [r7, #8]
    40a0:	615a      	str	r2, [r3, #20]
	}
}
    40a2:	46bd      	mov	sp, r7
    40a4:	b004      	add	sp, #16
    40a6:	bd80      	pop	{r7, pc}
    40a8:	00003fd5 	.word	0x00003fd5

000040ac <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    40b0:	4b03      	ldr	r3, [pc, #12]	; (40c0 <system_interrupt_enable_global+0x14>)
    40b2:	2201      	movs	r2, #1
    40b4:	701a      	strb	r2, [r3, #0]
    40b6:	f3bf 8f5f 	dmb	sy
    40ba:	b662      	cpsie	i
}
    40bc:	46bd      	mov	sp, r7
    40be:	bd80      	pop	{r7, pc}
    40c0:	20000000 	.word	0x20000000

000040c4 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40c8:	b672      	cpsid	i
    40ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    40ce:	4b02      	ldr	r3, [pc, #8]	; (40d8 <system_interrupt_disable_global+0x14>)
    40d0:	2200      	movs	r2, #0
    40d2:	701a      	strb	r2, [r3, #0]
}
    40d4:	46bd      	mov	sp, r7
    40d6:	bd80      	pop	{r7, pc}
    40d8:	20000000 	.word	0x20000000

000040dc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    40dc:	b580      	push	{r7, lr}
    40de:	b082      	sub	sp, #8
    40e0:	af00      	add	r7, sp, #0
    40e2:	1c02      	adds	r2, r0, #0
    40e4:	1dfb      	adds	r3, r7, #7
    40e6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    40e8:	4b06      	ldr	r3, [pc, #24]	; (4104 <system_interrupt_enable+0x28>)
    40ea:	1dfa      	adds	r2, r7, #7
    40ec:	7812      	ldrb	r2, [r2, #0]
    40ee:	1c11      	adds	r1, r2, #0
    40f0:	221f      	movs	r2, #31
    40f2:	400a      	ands	r2, r1
    40f4:	2101      	movs	r1, #1
    40f6:	4091      	lsls	r1, r2
    40f8:	1c0a      	adds	r2, r1, #0
    40fa:	601a      	str	r2, [r3, #0]
}
    40fc:	46bd      	mov	sp, r7
    40fe:	b002      	add	sp, #8
    4100:	bd80      	pop	{r7, pc}
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	e000e100 	.word	0xe000e100

00004108 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    4108:	b580      	push	{r7, lr}
    410a:	b084      	sub	sp, #16
    410c:	af00      	add	r7, sp, #0
    410e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	22a0      	movs	r2, #160	; 0xa0
    4114:	0112      	lsls	r2, r2, #4
    4116:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	2201      	movs	r2, #1
    411c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	2200      	movs	r2, #0
    4122:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	2200      	movs	r2, #0
    4128:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    412a:	230f      	movs	r3, #15
    412c:	18fb      	adds	r3, r7, r3
    412e:	2200      	movs	r2, #0
    4130:	701a      	strb	r2, [r3, #0]
    4132:	e00e      	b.n	4152 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    4134:	230f      	movs	r3, #15
    4136:	18fb      	adds	r3, r7, r3
    4138:	781a      	ldrb	r2, [r3, #0]
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	3202      	adds	r2, #2
    413e:	0092      	lsls	r2, r2, #2
    4140:	2100      	movs	r1, #0
    4142:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    4144:	230f      	movs	r3, #15
    4146:	18fb      	adds	r3, r7, r3
    4148:	781a      	ldrb	r2, [r3, #0]
    414a:	230f      	movs	r3, #15
    414c:	18fb      	adds	r3, r7, r3
    414e:	3201      	adds	r2, #1
    4150:	701a      	strb	r2, [r3, #0]
    4152:	230f      	movs	r3, #15
    4154:	18fb      	adds	r3, r7, r3
    4156:	781b      	ldrb	r3, [r3, #0]
    4158:	2b01      	cmp	r3, #1
    415a:	d9eb      	bls.n	4134 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    415c:	46bd      	mov	sp, r7
    415e:	b004      	add	sp, #16
    4160:	bd80      	pop	{r7, pc}
    4162:	46c0      	nop			; (mov r8, r8)

00004164 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    4164:	b580      	push	{r7, lr}
    4166:	b084      	sub	sp, #16
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	681b      	ldr	r3, [r3, #0]
    4170:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4172:	68fb      	ldr	r3, [r7, #12]
    4174:	69db      	ldr	r3, [r3, #28]
    4176:	2207      	movs	r2, #7
    4178:	4013      	ands	r3, r2
    417a:	1e5a      	subs	r2, r3, #1
    417c:	4193      	sbcs	r3, r2
    417e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    4180:	1c18      	adds	r0, r3, #0
    4182:	46bd      	mov	sp, r7
    4184:	b004      	add	sp, #16
    4186:	bd80      	pop	{r7, pc}

00004188 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    4188:	b580      	push	{r7, lr}
    418a:	b082      	sub	sp, #8
    418c:	af00      	add	r7, sp, #0
    418e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4190:	46c0      	nop			; (mov r8, r8)
    4192:	687b      	ldr	r3, [r7, #4]
    4194:	1c18      	adds	r0, r3, #0
    4196:	4b03      	ldr	r3, [pc, #12]	; (41a4 <_i2c_master_wait_for_sync+0x1c>)
    4198:	4798      	blx	r3
    419a:	1e03      	subs	r3, r0, #0
    419c:	d1f9      	bne.n	4192 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    419e:	46bd      	mov	sp, r7
    41a0:	b002      	add	sp, #8
    41a2:	bd80      	pop	{r7, pc}
    41a4:	00004165 	.word	0x00004165

000041a8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b082      	sub	sp, #8
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	2264      	movs	r2, #100	; 0x64
    41b4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	4a1a      	ldr	r2, [pc, #104]	; (4224 <i2c_master_get_config_defaults+0x7c>)
    41ba:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	2200      	movs	r2, #0
    41c0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	2200      	movs	r2, #0
    41c6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	2200      	movs	r2, #0
    41cc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	2280      	movs	r2, #128	; 0x80
    41d2:	0392      	lsls	r2, r2, #14
    41d4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	2201      	movs	r2, #1
    41da:	4252      	negs	r2, r2
    41dc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	2201      	movs	r2, #1
    41e2:	4252      	negs	r2, r2
    41e4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	2200      	movs	r2, #0
    41ea:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	2200      	movs	r2, #0
    41f0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	2224      	movs	r2, #36	; 0x24
    41f6:	2100      	movs	r1, #0
    41f8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	2200      	movs	r2, #0
    41fe:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	222c      	movs	r2, #44	; 0x2c
    4204:	2100      	movs	r1, #0
    4206:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	222d      	movs	r2, #45	; 0x2d
    420c:	2100      	movs	r1, #0
    420e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	222e      	movs	r2, #46	; 0x2e
    4214:	2100      	movs	r1, #0
    4216:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	22d7      	movs	r2, #215	; 0xd7
    421c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    421e:	46bd      	mov	sp, r7
    4220:	b002      	add	sp, #8
    4222:	bd80      	pop	{r7, pc}
    4224:	00000d48 	.word	0x00000d48

00004228 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    4228:	b580      	push	{r7, lr}
    422a:	b084      	sub	sp, #16
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	681b      	ldr	r3, [r3, #0]
    4234:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    4236:	2300      	movs	r3, #0
    4238:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	1c18      	adds	r0, r3, #0
    423e:	4b14      	ldr	r3, [pc, #80]	; (4290 <i2c_master_enable+0x68>)
    4240:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4242:	68bb      	ldr	r3, [r7, #8]
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	2202      	movs	r2, #2
    4248:	431a      	orrs	r2, r3
    424a:	68bb      	ldr	r3, [r7, #8]
    424c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	1c18      	adds	r0, r3, #0
    4254:	4b0f      	ldr	r3, [pc, #60]	; (4294 <i2c_master_enable+0x6c>)
    4256:	4798      	blx	r3
    4258:	1c03      	adds	r3, r0, #0
    425a:	1c18      	adds	r0, r3, #0
    425c:	4b0e      	ldr	r3, [pc, #56]	; (4298 <i2c_master_enable+0x70>)
    425e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4260:	e00c      	b.n	427c <i2c_master_enable+0x54>
		timeout_counter++;
    4262:	68fb      	ldr	r3, [r7, #12]
    4264:	3301      	adds	r3, #1
    4266:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	88db      	ldrh	r3, [r3, #6]
    426c:	1e1a      	subs	r2, r3, #0
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	429a      	cmp	r2, r3
    4272:	d803      	bhi.n	427c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4274:	68bb      	ldr	r3, [r7, #8]
    4276:	2210      	movs	r2, #16
    4278:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    427a:	e006      	b.n	428a <i2c_master_enable+0x62>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    427c:	68bb      	ldr	r3, [r7, #8]
    427e:	8b5b      	ldrh	r3, [r3, #26]
    4280:	b29b      	uxth	r3, r3
    4282:	1c1a      	adds	r2, r3, #0
    4284:	2310      	movs	r3, #16
    4286:	4013      	ands	r3, r2
    4288:	d0eb      	beq.n	4262 <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    428a:	46bd      	mov	sp, r7
    428c:	b004      	add	sp, #16
    428e:	bd80      	pop	{r7, pc}
    4290:	00004189 	.word	0x00004189
    4294:	00002ffd 	.word	0x00002ffd
    4298:	000040dd 	.word	0x000040dd

0000429c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    429c:	b580      	push	{r7, lr}
    429e:	b084      	sub	sp, #16
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    42aa:	68fb      	ldr	r3, [r7, #12]
    42ac:	69db      	ldr	r3, [r3, #28]
    42ae:	1e5a      	subs	r2, r3, #1
    42b0:	4193      	sbcs	r3, r2
    42b2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    42b4:	1c18      	adds	r0, r3, #0
    42b6:	46bd      	mov	sp, r7
    42b8:	b004      	add	sp, #16
    42ba:	bd80      	pop	{r7, pc}

000042bc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	2201      	movs	r2, #1
    42c8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	2200      	movs	r2, #0
    42ce:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	2200      	movs	r2, #0
    42d4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	22c0      	movs	r2, #192	; 0xc0
    42da:	0392      	lsls	r2, r2, #14
    42dc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	2200      	movs	r2, #0
    42e2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	2200      	movs	r2, #0
    42e8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	2201      	movs	r2, #1
    42ee:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	2201      	movs	r2, #1
    42f4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	2200      	movs	r2, #0
    42fa:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	2224      	movs	r2, #36	; 0x24
    4300:	2100      	movs	r1, #0
    4302:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	3318      	adds	r3, #24
    4308:	1c18      	adds	r0, r3, #0
    430a:	2100      	movs	r1, #0
    430c:	220c      	movs	r2, #12
    430e:	4b0a      	ldr	r3, [pc, #40]	; (4338 <spi_get_config_defaults+0x7c>)
    4310:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    4312:	687b      	ldr	r3, [r7, #4]
    4314:	4a09      	ldr	r2, [pc, #36]	; (433c <spi_get_config_defaults+0x80>)
    4316:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	2200      	movs	r2, #0
    431c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	2200      	movs	r2, #0
    4322:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	2200      	movs	r2, #0
    4328:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    432a:	687b      	ldr	r3, [r7, #4]
    432c:	2200      	movs	r2, #0
    432e:	635a      	str	r2, [r3, #52]	; 0x34

};
    4330:	46bd      	mov	sp, r7
    4332:	b002      	add	sp, #8
    4334:	bd80      	pop	{r7, pc}
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	00007f6f 	.word	0x00007f6f
    433c:	000186a0 	.word	0x000186a0

00004340 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    4340:	b580      	push	{r7, lr}
    4342:	b082      	sub	sp, #8
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	220a      	movs	r2, #10
    434c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    434e:	687b      	ldr	r3, [r7, #4]
    4350:	2200      	movs	r2, #0
    4352:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	2200      	movs	r2, #0
    4358:	709a      	strb	r2, [r3, #2]
}
    435a:	46bd      	mov	sp, r7
    435c:	b002      	add	sp, #8
    435e:	bd80      	pop	{r7, pc}

00004360 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    4360:	b580      	push	{r7, lr}
    4362:	b084      	sub	sp, #16
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    436a:	683b      	ldr	r3, [r7, #0]
    436c:	781a      	ldrb	r2, [r3, #0]
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    4372:	683b      	ldr	r3, [r7, #0]
    4374:	785a      	ldrb	r2, [r3, #1]
    4376:	687b      	ldr	r3, [r7, #4]
    4378:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    437a:	683b      	ldr	r3, [r7, #0]
    437c:	789a      	ldrb	r2, [r3, #2]
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4382:	230c      	movs	r3, #12
    4384:	18fb      	adds	r3, r7, r3
    4386:	1c18      	adds	r0, r3, #0
    4388:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <spi_attach_slave+0x58>)
    438a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    438c:	230c      	movs	r3, #12
    438e:	18fb      	adds	r3, r7, r3
    4390:	2201      	movs	r2, #1
    4392:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	781a      	ldrb	r2, [r3, #0]
    4398:	230c      	movs	r3, #12
    439a:	18fb      	adds	r3, r7, r3
    439c:	1c10      	adds	r0, r2, #0
    439e:	1c19      	adds	r1, r3, #0
    43a0:	4b06      	ldr	r3, [pc, #24]	; (43bc <spi_attach_slave+0x5c>)
    43a2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	781b      	ldrb	r3, [r3, #0]
    43a8:	1c18      	adds	r0, r3, #0
    43aa:	2101      	movs	r1, #1
    43ac:	4b04      	ldr	r3, [pc, #16]	; (43c0 <spi_attach_slave+0x60>)
    43ae:	4798      	blx	r3
}
    43b0:	46bd      	mov	sp, r7
    43b2:	b004      	add	sp, #16
    43b4:	bd80      	pop	{r7, pc}
    43b6:	46c0      	nop			; (mov r8, r8)
    43b8:	00003ff9 	.word	0x00003ff9
    43bc:	000030f1 	.word	0x000030f1
    43c0:	0000405d 	.word	0x0000405d

000043c4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b084      	sub	sp, #16
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	1c18      	adds	r0, r3, #0
    43d8:	4b0a      	ldr	r3, [pc, #40]	; (4404 <spi_enable+0x40>)
    43da:	4798      	blx	r3
    43dc:	1c03      	adds	r3, r0, #0
    43de:	1c18      	adds	r0, r3, #0
    43e0:	4b09      	ldr	r3, [pc, #36]	; (4408 <spi_enable+0x44>)
    43e2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    43e4:	46c0      	nop			; (mov r8, r8)
    43e6:	687b      	ldr	r3, [r7, #4]
    43e8:	1c18      	adds	r0, r3, #0
    43ea:	4b08      	ldr	r3, [pc, #32]	; (440c <spi_enable+0x48>)
    43ec:	4798      	blx	r3
    43ee:	1e03      	subs	r3, r0, #0
    43f0:	d1f9      	bne.n	43e6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	2202      	movs	r2, #2
    43f8:	431a      	orrs	r2, r3
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	601a      	str	r2, [r3, #0]
}
    43fe:	46bd      	mov	sp, r7
    4400:	b004      	add	sp, #16
    4402:	bd80      	pop	{r7, pc}
    4404:	00002ffd 	.word	0x00002ffd
    4408:	000040dd 	.word	0x000040dd
    440c:	0000429d 	.word	0x0000429d

00004410 <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    4410:	b580      	push	{r7, lr}
    4412:	b082      	sub	sp, #8
    4414:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4416:	1d3b      	adds	r3, r7, #4
    4418:	1c18      	adds	r0, r3, #0
    441a:	4b06      	ldr	r3, [pc, #24]	; (4434 <configure_port_pins+0x24>)
    441c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    441e:	1d3b      	adds	r3, r7, #4
    4420:	2200      	movs	r2, #0
    4422:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    4424:	1d3b      	adds	r3, r7, #4
    4426:	2003      	movs	r0, #3
    4428:	1c19      	adds	r1, r3, #0
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <configure_port_pins+0x28>)
    442c:	4798      	blx	r3
}
    442e:	46bd      	mov	sp, r7
    4430:	b002      	add	sp, #8
    4432:	bd80      	pop	{r7, pc}
    4434:	00003ff9 	.word	0x00003ff9
    4438:	000030f1 	.word	0x000030f1

0000443c <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    443c:	b580      	push	{r7, lr}
    443e:	b084      	sub	sp, #16
    4440:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    4442:	1d3b      	adds	r3, r7, #4
    4444:	1c18      	adds	r0, r3, #0
    4446:	4b0b      	ldr	r3, [pc, #44]	; (4474 <configure_extint_channel+0x38>)
    4448:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    444a:	1d3b      	adds	r3, r7, #4
    444c:	2203      	movs	r2, #3
    444e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    4450:	1d3b      	adds	r3, r7, #4
    4452:	2200      	movs	r2, #0
    4454:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    4456:	1d3b      	adds	r3, r7, #4
    4458:	2201      	movs	r2, #1
    445a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    445c:	1d3b      	adds	r3, r7, #4
    445e:	2201      	movs	r2, #1
    4460:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    4462:	1d3b      	adds	r3, r7, #4
    4464:	2003      	movs	r0, #3
    4466:	1c19      	adds	r1, r3, #0
    4468:	4b03      	ldr	r3, [pc, #12]	; (4478 <configure_extint_channel+0x3c>)
    446a:	4798      	blx	r3
}
    446c:	46bd      	mov	sp, r7
    446e:	b004      	add	sp, #16
    4470:	bd80      	pop	{r7, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	000003ad 	.word	0x000003ad
    4478:	000003e1 	.word	0x000003e1

0000447c <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    447c:	b580      	push	{r7, lr}
    447e:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    4480:	4b05      	ldr	r3, [pc, #20]	; (4498 <configure_extint_callbacks+0x1c>)
    4482:	1c18      	adds	r0, r3, #0
    4484:	2103      	movs	r1, #3
    4486:	2200      	movs	r2, #0
    4488:	4b04      	ldr	r3, [pc, #16]	; (449c <configure_extint_callbacks+0x20>)
    448a:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    448c:	2003      	movs	r0, #3
    448e:	2100      	movs	r1, #0
    4490:	4b03      	ldr	r3, [pc, #12]	; (44a0 <configure_extint_callbacks+0x24>)
    4492:	4798      	blx	r3
}
    4494:	46bd      	mov	sp, r7
    4496:	bd80      	pop	{r7, pc}
    4498:	000051dd 	.word	0x000051dd
    449c:	00000bb9 	.word	0x00000bb9
    44a0:	00000c1d 	.word	0x00000c1d

000044a4 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    44a4:	b580      	push	{r7, lr}
    44a6:	b090      	sub	sp, #64	; 0x40
    44a8:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    44aa:	1d3b      	adds	r3, r7, #4
    44ac:	1c18      	adds	r0, r3, #0
    44ae:	4b22      	ldr	r3, [pc, #136]	; (4538 <configure_RFM69_spi+0x94>)
    44b0:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    44b2:	1d3b      	adds	r3, r7, #4
    44b4:	2212      	movs	r2, #18
    44b6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    44b8:	4a20      	ldr	r2, [pc, #128]	; (453c <configure_RFM69_spi+0x98>)
    44ba:	1d3b      	adds	r3, r7, #4
    44bc:	1c10      	adds	r0, r2, #0
    44be:	1c19      	adds	r1, r3, #0
    44c0:	4b1f      	ldr	r3, [pc, #124]	; (4540 <configure_RFM69_spi+0x9c>)
    44c2:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    44c4:	2308      	movs	r3, #8
    44c6:	18fb      	adds	r3, r7, r3
    44c8:	1c18      	adds	r0, r3, #0
    44ca:	4b1e      	ldr	r3, [pc, #120]	; (4544 <configure_RFM69_spi+0xa0>)
    44cc:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    44ce:	2308      	movs	r3, #8
    44d0:	18fb      	adds	r3, r7, r3
    44d2:	22c0      	movs	r2, #192	; 0xc0
    44d4:	0392      	lsls	r2, r2, #14
    44d6:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    44d8:	2308      	movs	r3, #8
    44da:	18fb      	adds	r3, r7, r3
    44dc:	4a1a      	ldr	r2, [pc, #104]	; (4548 <configure_RFM69_spi+0xa4>)
    44de:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    44e0:	2308      	movs	r3, #8
    44e2:	18fb      	adds	r3, r7, r3
    44e4:	4a19      	ldr	r2, [pc, #100]	; (454c <configure_RFM69_spi+0xa8>)
    44e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    44e8:	2308      	movs	r3, #8
    44ea:	18fb      	adds	r3, r7, r3
    44ec:	2201      	movs	r2, #1
    44ee:	4252      	negs	r2, r2
    44f0:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    44f2:	2308      	movs	r3, #8
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	4a16      	ldr	r2, [pc, #88]	; (4550 <configure_RFM69_spi+0xac>)
    44f8:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    44fa:	2308      	movs	r3, #8
    44fc:	18fb      	adds	r3, r7, r3
    44fe:	2200      	movs	r2, #0
    4500:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    4502:	2308      	movs	r3, #8
    4504:	18fb      	adds	r3, r7, r3
    4506:	2200      	movs	r2, #0
    4508:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    450a:	4a12      	ldr	r2, [pc, #72]	; (4554 <configure_RFM69_spi+0xb0>)
    450c:	4912      	ldr	r1, [pc, #72]	; (4558 <configure_RFM69_spi+0xb4>)
    450e:	2308      	movs	r3, #8
    4510:	18fb      	adds	r3, r7, r3
    4512:	1c10      	adds	r0, r2, #0
    4514:	1c1a      	adds	r2, r3, #0
    4516:	4b11      	ldr	r3, [pc, #68]	; (455c <configure_RFM69_spi+0xb8>)
    4518:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    451a:	4b0e      	ldr	r3, [pc, #56]	; (4554 <configure_RFM69_spi+0xb0>)
    451c:	1c18      	adds	r0, r3, #0
    451e:	4b10      	ldr	r3, [pc, #64]	; (4560 <configure_RFM69_spi+0xbc>)
    4520:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    4522:	4a0c      	ldr	r2, [pc, #48]	; (4554 <configure_RFM69_spi+0xb0>)
    4524:	4b05      	ldr	r3, [pc, #20]	; (453c <configure_RFM69_spi+0x98>)
    4526:	1c10      	adds	r0, r2, #0
    4528:	1c19      	adds	r1, r3, #0
    452a:	2200      	movs	r2, #0
    452c:	4b0d      	ldr	r3, [pc, #52]	; (4564 <configure_RFM69_spi+0xc0>)
    452e:	4798      	blx	r3
}
    4530:	46bd      	mov	sp, r7
    4532:	b010      	add	sp, #64	; 0x40
    4534:	bd80      	pop	{r7, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	00004341 	.word	0x00004341
    453c:	2000023c 	.word	0x2000023c
    4540:	00004361 	.word	0x00004361
    4544:	000042bd 	.word	0x000042bd
    4548:	00100002 	.word	0x00100002
    454c:	00110002 	.word	0x00110002
    4550:	00130002 	.word	0x00130002
    4554:	200001fc 	.word	0x200001fc
    4558:	42000c00 	.word	0x42000c00
    455c:	00002429 	.word	0x00002429
    4560:	000043c5 	.word	0x000043c5
    4564:	00002715 	.word	0x00002715

00004568 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    4568:	b580      	push	{r7, lr}
    456a:	b084      	sub	sp, #16
    456c:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    456e:	1c3b      	adds	r3, r7, #0
    4570:	1c18      	adds	r0, r3, #0
    4572:	4b0f      	ldr	r3, [pc, #60]	; (45b0 <configure_rtc_count+0x48>)
    4574:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    4576:	1c3b      	adds	r3, r7, #0
    4578:	2200      	movs	r2, #0
    457a:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    457c:	1c3b      	adds	r3, r7, #0
    457e:	2200      	movs	r2, #0
    4580:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    4582:	1c3b      	adds	r3, r7, #0
    4584:	2201      	movs	r2, #1
    4586:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    4588:	4a0a      	ldr	r2, [pc, #40]	; (45b4 <configure_rtc_count+0x4c>)
    458a:	490b      	ldr	r1, [pc, #44]	; (45b8 <configure_rtc_count+0x50>)
    458c:	1c3b      	adds	r3, r7, #0
    458e:	1c10      	adds	r0, r2, #0
    4590:	1c1a      	adds	r2, r3, #0
    4592:	4b0a      	ldr	r3, [pc, #40]	; (45bc <configure_rtc_count+0x54>)
    4594:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    4596:	4b07      	ldr	r3, [pc, #28]	; (45b4 <configure_rtc_count+0x4c>)
    4598:	1c18      	adds	r0, r3, #0
    459a:	4b09      	ldr	r3, [pc, #36]	; (45c0 <configure_rtc_count+0x58>)
    459c:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    459e:	4b05      	ldr	r3, [pc, #20]	; (45b4 <configure_rtc_count+0x4c>)
    45a0:	4a08      	ldr	r2, [pc, #32]	; (45c4 <configure_rtc_count+0x5c>)
    45a2:	1c18      	adds	r0, r3, #0
    45a4:	1c11      	adds	r1, r2, #0
    45a6:	4b08      	ldr	r3, [pc, #32]	; (45c8 <configure_rtc_count+0x60>)
    45a8:	4798      	blx	r3
}
    45aa:	46bd      	mov	sp, r7
    45ac:	b004      	add	sp, #16
    45ae:	bd80      	pop	{r7, pc}
    45b0:	00004109 	.word	0x00004109
    45b4:	200000e0 	.word	0x200000e0
    45b8:	40001400 	.word	0x40001400
    45bc:	000007dd 	.word	0x000007dd
    45c0:	000005d5 	.word	0x000005d5
    45c4:	00002710 	.word	0x00002710
    45c8:	000009c1 	.word	0x000009c1

000045cc <reset_millis>:

void reset_millis(void)
{
    45cc:	b580      	push	{r7, lr}
    45ce:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    45d0:	4b05      	ldr	r3, [pc, #20]	; (45e8 <reset_millis+0x1c>)
    45d2:	1c18      	adds	r0, r3, #0
    45d4:	2100      	movs	r1, #0
    45d6:	4b05      	ldr	r3, [pc, #20]	; (45ec <reset_millis+0x20>)
    45d8:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    45da:	4b03      	ldr	r3, [pc, #12]	; (45e8 <reset_millis+0x1c>)
    45dc:	1c18      	adds	r0, r3, #0
    45de:	4b04      	ldr	r3, [pc, #16]	; (45f0 <reset_millis+0x24>)
    45e0:	4798      	blx	r3
}
    45e2:	46bd      	mov	sp, r7
    45e4:	bd80      	pop	{r7, pc}
    45e6:	46c0      	nop			; (mov r8, r8)
    45e8:	200000e0 	.word	0x200000e0
    45ec:	0000086d 	.word	0x0000086d
    45f0:	000005d5 	.word	0x000005d5

000045f4 <millis>:

uint32_t millis(void)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b082      	sub	sp, #8
    45f8:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    45fa:	2300      	movs	r3, #0
    45fc:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    45fe:	4b05      	ldr	r3, [pc, #20]	; (4614 <millis+0x20>)
    4600:	1c18      	adds	r0, r3, #0
    4602:	4b05      	ldr	r3, [pc, #20]	; (4618 <millis+0x24>)
    4604:	4798      	blx	r3
    4606:	1c03      	adds	r3, r0, #0
    4608:	607b      	str	r3, [r7, #4]
	return milli;
    460a:	687b      	ldr	r3, [r7, #4]
}
    460c:	1c18      	adds	r0, r3, #0
    460e:	46bd      	mov	sp, r7
    4610:	b002      	add	sp, #8
    4612:	bd80      	pop	{r7, pc}
    4614:	200000e0 	.word	0x200000e0
    4618:	000008cd 	.word	0x000008cd

0000461c <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    461c:	b590      	push	{r4, r7, lr}
    461e:	b085      	sub	sp, #20
    4620:	af00      	add	r7, sp, #0
    4622:	1c04      	adds	r4, r0, #0
    4624:	6039      	str	r1, [r7, #0]
    4626:	1c10      	adds	r0, r2, #0
    4628:	1c19      	adds	r1, r3, #0
    462a:	1dfb      	adds	r3, r7, #7
    462c:	1c22      	adds	r2, r4, #0
    462e:	701a      	strb	r2, [r3, #0]
    4630:	1dbb      	adds	r3, r7, #6
    4632:	1c02      	adds	r2, r0, #0
    4634:	701a      	strb	r2, [r3, #0]
    4636:	1d7b      	adds	r3, r7, #5
    4638:	1c0a      	adds	r2, r1, #0
    463a:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    463c:	2001      	movs	r0, #1
    463e:	4b50      	ldr	r3, [pc, #320]	; (4780 <sendFrame+0x164>)
    4640:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	2027      	movs	r0, #39	; 0x27
    4646:	4b4f      	ldr	r3, [pc, #316]	; (4784 <sendFrame+0x168>)
    4648:	4798      	blx	r3
    464a:	1c03      	adds	r3, r0, #0
    464c:	b2db      	uxtb	r3, r3
    464e:	b25b      	sxtb	r3, r3
    4650:	2b00      	cmp	r3, #0
    4652:	daf7      	bge.n	4644 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    4654:	2025      	movs	r0, #37	; 0x25
    4656:	2100      	movs	r1, #0
    4658:	4b4b      	ldr	r3, [pc, #300]	; (4788 <sendFrame+0x16c>)
    465a:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    465c:	1dbb      	adds	r3, r7, #6
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	2b3d      	cmp	r3, #61	; 0x3d
    4662:	d902      	bls.n	466a <sendFrame+0x4e>
    4664:	1dbb      	adds	r3, r7, #6
    4666:	223d      	movs	r2, #61	; 0x3d
    4668:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    466a:	230e      	movs	r3, #14
    466c:	18fb      	adds	r3, r7, r3
    466e:	2200      	movs	r2, #0
    4670:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    4672:	2320      	movs	r3, #32
    4674:	18fb      	adds	r3, r7, r3
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	2b00      	cmp	r3, #0
    467a:	d004      	beq.n	4686 <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    467c:	230e      	movs	r3, #14
    467e:	18fb      	adds	r3, r7, r3
    4680:	2280      	movs	r2, #128	; 0x80
    4682:	701a      	strb	r2, [r3, #0]
    4684:	e007      	b.n	4696 <sendFrame+0x7a>
	else if (requestACK)
    4686:	1d7b      	adds	r3, r7, #5
    4688:	781b      	ldrb	r3, [r3, #0]
    468a:	2b00      	cmp	r3, #0
    468c:	d003      	beq.n	4696 <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    468e:	230e      	movs	r3, #14
    4690:	18fb      	adds	r3, r7, r3
    4692:	2240      	movs	r2, #64	; 0x40
    4694:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	select();
    4696:	4b3d      	ldr	r3, [pc, #244]	; (478c <sendFrame+0x170>)
    4698:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    469a:	4a3d      	ldr	r2, [pc, #244]	; (4790 <sendFrame+0x174>)
    469c:	4b3d      	ldr	r3, [pc, #244]	; (4794 <sendFrame+0x178>)
    469e:	1c10      	adds	r0, r2, #0
    46a0:	2180      	movs	r1, #128	; 0x80
    46a2:	1c1a      	adds	r2, r3, #0
    46a4:	4b3c      	ldr	r3, [pc, #240]	; (4798 <sendFrame+0x17c>)
    46a6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    46a8:	1dbb      	adds	r3, r7, #6
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	b29b      	uxth	r3, r3
    46ae:	3303      	adds	r3, #3
    46b0:	b29a      	uxth	r2, r3
    46b2:	4937      	ldr	r1, [pc, #220]	; (4790 <sendFrame+0x174>)
    46b4:	4b37      	ldr	r3, [pc, #220]	; (4794 <sendFrame+0x178>)
    46b6:	1c08      	adds	r0, r1, #0
    46b8:	1c11      	adds	r1, r2, #0
    46ba:	1c1a      	adds	r2, r3, #0
    46bc:	4b36      	ldr	r3, [pc, #216]	; (4798 <sendFrame+0x17c>)
    46be:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    46c0:	1dfb      	adds	r3, r7, #7
    46c2:	781b      	ldrb	r3, [r3, #0]
    46c4:	b29a      	uxth	r2, r3
    46c6:	4932      	ldr	r1, [pc, #200]	; (4790 <sendFrame+0x174>)
    46c8:	4b32      	ldr	r3, [pc, #200]	; (4794 <sendFrame+0x178>)
    46ca:	1c08      	adds	r0, r1, #0
    46cc:	1c11      	adds	r1, r2, #0
    46ce:	1c1a      	adds	r2, r3, #0
    46d0:	4b31      	ldr	r3, [pc, #196]	; (4798 <sendFrame+0x17c>)
    46d2:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    46d4:	4b31      	ldr	r3, [pc, #196]	; (479c <sendFrame+0x180>)
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	b2db      	uxtb	r3, r3
    46da:	b29a      	uxth	r2, r3
    46dc:	492c      	ldr	r1, [pc, #176]	; (4790 <sendFrame+0x174>)
    46de:	4b2d      	ldr	r3, [pc, #180]	; (4794 <sendFrame+0x178>)
    46e0:	1c08      	adds	r0, r1, #0
    46e2:	1c11      	adds	r1, r2, #0
    46e4:	1c1a      	adds	r2, r3, #0
    46e6:	4b2c      	ldr	r3, [pc, #176]	; (4798 <sendFrame+0x17c>)
    46e8:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    46ea:	230e      	movs	r3, #14
    46ec:	18fb      	adds	r3, r7, r3
    46ee:	781b      	ldrb	r3, [r3, #0]
    46f0:	b2db      	uxtb	r3, r3
    46f2:	b29a      	uxth	r2, r3
    46f4:	4926      	ldr	r1, [pc, #152]	; (4790 <sendFrame+0x174>)
    46f6:	4b27      	ldr	r3, [pc, #156]	; (4794 <sendFrame+0x178>)
    46f8:	1c08      	adds	r0, r1, #0
    46fa:	1c11      	adds	r1, r2, #0
    46fc:	1c1a      	adds	r2, r3, #0
    46fe:	4b26      	ldr	r3, [pc, #152]	; (4798 <sendFrame+0x17c>)
    4700:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    4702:	230f      	movs	r3, #15
    4704:	18fb      	adds	r3, r7, r3
    4706:	2200      	movs	r2, #0
    4708:	701a      	strb	r2, [r3, #0]
    470a:	e014      	b.n	4736 <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    470c:	230f      	movs	r3, #15
    470e:	18fb      	adds	r3, r7, r3
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	683a      	ldr	r2, [r7, #0]
    4714:	18d3      	adds	r3, r2, r3
    4716:	781b      	ldrb	r3, [r3, #0]
    4718:	b29a      	uxth	r2, r3
    471a:	491d      	ldr	r1, [pc, #116]	; (4790 <sendFrame+0x174>)
    471c:	4b1d      	ldr	r3, [pc, #116]	; (4794 <sendFrame+0x178>)
    471e:	1c08      	adds	r0, r1, #0
    4720:	1c11      	adds	r1, r2, #0
    4722:	1c1a      	adds	r2, r3, #0
    4724:	4b1c      	ldr	r3, [pc, #112]	; (4798 <sendFrame+0x17c>)
    4726:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    4728:	230f      	movs	r3, #15
    472a:	18fb      	adds	r3, r7, r3
    472c:	781a      	ldrb	r2, [r3, #0]
    472e:	230f      	movs	r3, #15
    4730:	18fb      	adds	r3, r7, r3
    4732:	3201      	adds	r2, #1
    4734:	701a      	strb	r2, [r3, #0]
    4736:	230f      	movs	r3, #15
    4738:	18fa      	adds	r2, r7, r3
    473a:	1dbb      	adds	r3, r7, #6
    473c:	7812      	ldrb	r2, [r2, #0]
    473e:	781b      	ldrb	r3, [r3, #0]
    4740:	429a      	cmp	r2, r3
    4742:	d3e3      	bcc.n	470c <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    4744:	4b16      	ldr	r3, [pc, #88]	; (47a0 <sendFrame+0x184>)
    4746:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    4748:	2004      	movs	r0, #4
    474a:	4b0d      	ldr	r3, [pc, #52]	; (4780 <sendFrame+0x164>)
    474c:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    474e:	4b15      	ldr	r3, [pc, #84]	; (47a4 <sendFrame+0x188>)
    4750:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	2003      	movs	r0, #3
    4756:	4b14      	ldr	r3, [pc, #80]	; (47a8 <sendFrame+0x18c>)
    4758:	4798      	blx	r3
    475a:	1c03      	adds	r3, r0, #0
    475c:	1c1a      	adds	r2, r3, #0
    475e:	2301      	movs	r3, #1
    4760:	4053      	eors	r3, r2
    4762:	b2db      	uxtb	r3, r3
    4764:	2b00      	cmp	r3, #0
    4766:	d005      	beq.n	4774 <sendFrame+0x158>
    4768:	4b10      	ldr	r3, [pc, #64]	; (47ac <sendFrame+0x190>)
    476a:	4798      	blx	r3
    476c:	1e02      	subs	r2, r0, #0
    476e:	4b10      	ldr	r3, [pc, #64]	; (47b0 <sendFrame+0x194>)
    4770:	429a      	cmp	r2, r3
    4772:	d9ef      	bls.n	4754 <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    4774:	2001      	movs	r0, #1
    4776:	4b02      	ldr	r3, [pc, #8]	; (4780 <sendFrame+0x164>)
    4778:	4798      	blx	r3
}
    477a:	46bd      	mov	sp, r7
    477c:	b005      	add	sp, #20
    477e:	bd90      	pop	{r4, r7, pc}
    4780:	00004bd5 	.word	0x00004bd5
    4784:	000053e9 	.word	0x000053e9
    4788:	00005455 	.word	0x00005455
    478c:	000054b9 	.word	0x000054b9
    4790:	200001fc 	.word	0x200001fc
    4794:	2000005c 	.word	0x2000005c
    4798:	000025cd 	.word	0x000025cd
    479c:	2000013c 	.word	0x2000013c
    47a0:	000054e5 	.word	0x000054e5
    47a4:	000045cd 	.word	0x000045cd
    47a8:	00004019 	.word	0x00004019
    47ac:	000045f5 	.word	0x000045f5
    47b0:	000003e7 	.word	0x000003e7

000047b4 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    47b4:	b580      	push	{r7, lr}
    47b6:	b082      	sub	sp, #8
    47b8:	af00      	add	r7, sp, #0
    47ba:	1c02      	adds	r2, r0, #0
    47bc:	1dfb      	adds	r3, r7, #7
    47be:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    47c0:	4b1a      	ldr	r3, [pc, #104]	; (482c <RFM_setHighPower+0x78>)
    47c2:	1dfa      	adds	r2, r7, #7
    47c4:	7812      	ldrb	r2, [r2, #0]
    47c6:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    47c8:	4b18      	ldr	r3, [pc, #96]	; (482c <RFM_setHighPower+0x78>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b2db      	uxtb	r3, r3
    47ce:	2b00      	cmp	r3, #0
    47d0:	d001      	beq.n	47d6 <RFM_setHighPower+0x22>
    47d2:	230f      	movs	r3, #15
    47d4:	e000      	b.n	47d8 <RFM_setHighPower+0x24>
    47d6:	231a      	movs	r3, #26
    47d8:	2013      	movs	r0, #19
    47da:	1c19      	adds	r1, r3, #0
    47dc:	4b14      	ldr	r3, [pc, #80]	; (4830 <RFM_setHighPower+0x7c>)
    47de:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    47e0:	4b12      	ldr	r3, [pc, #72]	; (482c <RFM_setHighPower+0x78>)
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	b2db      	uxtb	r3, r3
    47e6:	2b00      	cmp	r3, #0
    47e8:	d012      	beq.n	4810 <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    47ea:	2011      	movs	r0, #17
    47ec:	4b11      	ldr	r3, [pc, #68]	; (4834 <RFM_setHighPower+0x80>)
    47ee:	4798      	blx	r3
    47f0:	1c03      	adds	r3, r0, #0
    47f2:	b2db      	uxtb	r3, r3
    47f4:	1c1a      	adds	r2, r3, #0
    47f6:	231f      	movs	r3, #31
    47f8:	4013      	ands	r3, r2
    47fa:	b2db      	uxtb	r3, r3
    47fc:	1c1a      	adds	r2, r3, #0
    47fe:	2360      	movs	r3, #96	; 0x60
    4800:	4313      	orrs	r3, r2
    4802:	b2db      	uxtb	r3, r3
    4804:	b2db      	uxtb	r3, r3
    4806:	2011      	movs	r0, #17
    4808:	1c19      	adds	r1, r3, #0
    480a:	4b09      	ldr	r3, [pc, #36]	; (4830 <RFM_setHighPower+0x7c>)
    480c:	4798      	blx	r3
    480e:	e009      	b.n	4824 <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    4810:	4b09      	ldr	r3, [pc, #36]	; (4838 <RFM_setHighPower+0x84>)
    4812:	781b      	ldrb	r3, [r3, #0]
    4814:	2280      	movs	r2, #128	; 0x80
    4816:	4252      	negs	r2, r2
    4818:	4313      	orrs	r3, r2
    481a:	b2db      	uxtb	r3, r3
    481c:	2011      	movs	r0, #17
    481e:	1c19      	adds	r1, r3, #0
    4820:	4b03      	ldr	r3, [pc, #12]	; (4830 <RFM_setHighPower+0x7c>)
    4822:	4798      	blx	r3
}
    4824:	46bd      	mov	sp, r7
    4826:	b002      	add	sp, #8
    4828:	bd80      	pop	{r7, pc}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	200001f8 	.word	0x200001f8
    4830:	00005455 	.word	0x00005455
    4834:	000053e9 	.word	0x000053e9
    4838:	200000f8 	.word	0x200000f8

0000483c <RFM69>:

void RFM69()
{
    483c:	b580      	push	{r7, lr}
    483e:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    4840:	4b06      	ldr	r3, [pc, #24]	; (485c <RFM69+0x20>)
    4842:	2201      	movs	r2, #1
    4844:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    4846:	4b06      	ldr	r3, [pc, #24]	; (4860 <RFM69+0x24>)
    4848:	2200      	movs	r2, #0
    484a:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    484c:	4b05      	ldr	r3, [pc, #20]	; (4864 <RFM69+0x28>)
    484e:	221f      	movs	r2, #31
    4850:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    4852:	4b05      	ldr	r3, [pc, #20]	; (4868 <RFM69+0x2c>)
    4854:	2200      	movs	r2, #0
    4856:	701a      	strb	r2, [r3, #0]
}
    4858:	46bd      	mov	sp, r7
    485a:	bd80      	pop	{r7, pc}
    485c:	200001f6 	.word	0x200001f6
    4860:	20000144 	.word	0x20000144
    4864:	200000f8 	.word	0x200000f8
    4868:	200001f8 	.word	0x200001f8

0000486c <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    486c:	b590      	push	{r4, r7, lr}
    486e:	b091      	sub	sp, #68	; 0x44
    4870:	af00      	add	r7, sp, #0
    4872:	1c04      	adds	r4, r0, #0
    4874:	1c08      	adds	r0, r1, #0
    4876:	1c11      	adds	r1, r2, #0
    4878:	1dfb      	adds	r3, r7, #7
    487a:	1c22      	adds	r2, r4, #0
    487c:	701a      	strb	r2, [r3, #0]
    487e:	1dbb      	adds	r3, r7, #6
    4880:	1c02      	adds	r2, r0, #0
    4882:	701a      	strb	r2, [r3, #0]
    4884:	1d7b      	adds	r3, r7, #5
    4886:	1c0a      	adds	r2, r1, #0
    4888:	701a      	strb	r2, [r3, #0]
  RFM69();
    488a:	4bc2      	ldr	r3, [pc, #776]	; (4b94 <RFM_initialize+0x328>)
    488c:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    488e:	2310      	movs	r3, #16
    4890:	18fb      	adds	r3, r7, r3
    4892:	2201      	movs	r2, #1
    4894:	701a      	strb	r2, [r3, #0]
    4896:	2310      	movs	r3, #16
    4898:	18fb      	adds	r3, r7, r3
    489a:	2204      	movs	r2, #4
    489c:	705a      	strb	r2, [r3, #1]
    489e:	2310      	movs	r3, #16
    48a0:	18fb      	adds	r3, r7, r3
    48a2:	2202      	movs	r2, #2
    48a4:	709a      	strb	r2, [r3, #2]
    48a6:	2310      	movs	r3, #16
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	2200      	movs	r2, #0
    48ac:	70da      	strb	r2, [r3, #3]
    48ae:	2310      	movs	r3, #16
    48b0:	18fb      	adds	r3, r7, r3
    48b2:	2203      	movs	r2, #3
    48b4:	711a      	strb	r2, [r3, #4]
    48b6:	2310      	movs	r3, #16
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	2202      	movs	r2, #2
    48bc:	715a      	strb	r2, [r3, #5]
    48be:	2310      	movs	r3, #16
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	2204      	movs	r2, #4
    48c4:	719a      	strb	r2, [r3, #6]
    48c6:	2310      	movs	r3, #16
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	2240      	movs	r2, #64	; 0x40
    48cc:	71da      	strb	r2, [r3, #7]
    48ce:	2310      	movs	r3, #16
    48d0:	18fb      	adds	r3, r7, r3
    48d2:	2205      	movs	r2, #5
    48d4:	721a      	strb	r2, [r3, #8]
    48d6:	2310      	movs	r3, #16
    48d8:	18fb      	adds	r3, r7, r3
    48da:	2203      	movs	r2, #3
    48dc:	725a      	strb	r2, [r3, #9]
    48de:	2310      	movs	r3, #16
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	2206      	movs	r2, #6
    48e4:	729a      	strb	r2, [r3, #10]
    48e6:	2310      	movs	r3, #16
    48e8:	18fb      	adds	r3, r7, r3
    48ea:	2233      	movs	r2, #51	; 0x33
    48ec:	72da      	strb	r2, [r3, #11]
    48ee:	2310      	movs	r3, #16
    48f0:	18fb      	adds	r3, r7, r3
    48f2:	2207      	movs	r2, #7
    48f4:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    48f6:	1dfb      	adds	r3, r7, #7
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	2b1f      	cmp	r3, #31
    48fc:	d00d      	beq.n	491a <RFM_initialize+0xae>
    48fe:	1dfb      	adds	r3, r7, #7
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	2b2b      	cmp	r3, #43	; 0x2b
    4904:	d007      	beq.n	4916 <RFM_initialize+0xaa>
    4906:	1dfb      	adds	r3, r7, #7
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2b56      	cmp	r3, #86	; 0x56
    490c:	d101      	bne.n	4912 <RFM_initialize+0xa6>
    490e:	23d9      	movs	r3, #217	; 0xd9
    4910:	e004      	b.n	491c <RFM_initialize+0xb0>
    4912:	23e4      	movs	r3, #228	; 0xe4
    4914:	e002      	b.n	491c <RFM_initialize+0xb0>
    4916:	236c      	movs	r3, #108	; 0x6c
    4918:	e000      	b.n	491c <RFM_initialize+0xb0>
    491a:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    491c:	2210      	movs	r2, #16
    491e:	18ba      	adds	r2, r7, r2
    4920:	7353      	strb	r3, [r2, #13]
    4922:	2310      	movs	r3, #16
    4924:	18fb      	adds	r3, r7, r3
    4926:	2208      	movs	r2, #8
    4928:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    492a:	1dfb      	adds	r3, r7, #7
    492c:	781b      	ldrb	r3, [r3, #0]
    492e:	2b1f      	cmp	r3, #31
    4930:	d00d      	beq.n	494e <RFM_initialize+0xe2>
    4932:	1dfb      	adds	r3, r7, #7
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	2b2b      	cmp	r3, #43	; 0x2b
    4938:	d007      	beq.n	494a <RFM_initialize+0xde>
    493a:	1dfb      	adds	r3, r7, #7
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2b56      	cmp	r3, #86	; 0x56
    4940:	d101      	bne.n	4946 <RFM_initialize+0xda>
    4942:	2300      	movs	r3, #0
    4944:	e004      	b.n	4950 <RFM_initialize+0xe4>
    4946:	23c0      	movs	r3, #192	; 0xc0
    4948:	e002      	b.n	4950 <RFM_initialize+0xe4>
    494a:	2340      	movs	r3, #64	; 0x40
    494c:	e000      	b.n	4950 <RFM_initialize+0xe4>
    494e:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    4950:	2210      	movs	r2, #16
    4952:	18ba      	adds	r2, r7, r2
    4954:	73d3      	strb	r3, [r2, #15]
    4956:	2310      	movs	r3, #16
    4958:	18fb      	adds	r3, r7, r3
    495a:	2209      	movs	r2, #9
    495c:	741a      	strb	r2, [r3, #16]
    495e:	2310      	movs	r3, #16
    4960:	18fb      	adds	r3, r7, r3
    4962:	2200      	movs	r2, #0
    4964:	745a      	strb	r2, [r3, #17]
    4966:	2310      	movs	r3, #16
    4968:	18fb      	adds	r3, r7, r3
    496a:	2219      	movs	r2, #25
    496c:	749a      	strb	r2, [r3, #18]
    496e:	2310      	movs	r3, #16
    4970:	18fb      	adds	r3, r7, r3
    4972:	2242      	movs	r2, #66	; 0x42
    4974:	74da      	strb	r2, [r3, #19]
    4976:	2310      	movs	r3, #16
    4978:	18fb      	adds	r3, r7, r3
    497a:	2225      	movs	r2, #37	; 0x25
    497c:	751a      	strb	r2, [r3, #20]
    497e:	2310      	movs	r3, #16
    4980:	18fb      	adds	r3, r7, r3
    4982:	2240      	movs	r2, #64	; 0x40
    4984:	755a      	strb	r2, [r3, #21]
    4986:	2310      	movs	r3, #16
    4988:	18fb      	adds	r3, r7, r3
    498a:	2226      	movs	r2, #38	; 0x26
    498c:	759a      	strb	r2, [r3, #22]
    498e:	2310      	movs	r3, #16
    4990:	18fb      	adds	r3, r7, r3
    4992:	2207      	movs	r2, #7
    4994:	75da      	strb	r2, [r3, #23]
    4996:	2310      	movs	r3, #16
    4998:	18fb      	adds	r3, r7, r3
    499a:	2228      	movs	r2, #40	; 0x28
    499c:	761a      	strb	r2, [r3, #24]
    499e:	2310      	movs	r3, #16
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	2210      	movs	r2, #16
    49a4:	765a      	strb	r2, [r3, #25]
    49a6:	2310      	movs	r3, #16
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	2229      	movs	r2, #41	; 0x29
    49ac:	769a      	strb	r2, [r3, #26]
    49ae:	2310      	movs	r3, #16
    49b0:	18fb      	adds	r3, r7, r3
    49b2:	22dc      	movs	r2, #220	; 0xdc
    49b4:	76da      	strb	r2, [r3, #27]
    49b6:	2310      	movs	r3, #16
    49b8:	18fb      	adds	r3, r7, r3
    49ba:	222e      	movs	r2, #46	; 0x2e
    49bc:	771a      	strb	r2, [r3, #28]
    49be:	2310      	movs	r3, #16
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	2288      	movs	r2, #136	; 0x88
    49c4:	775a      	strb	r2, [r3, #29]
    49c6:	2310      	movs	r3, #16
    49c8:	18fb      	adds	r3, r7, r3
    49ca:	222f      	movs	r2, #47	; 0x2f
    49cc:	779a      	strb	r2, [r3, #30]
    49ce:	2310      	movs	r3, #16
    49d0:	18fb      	adds	r3, r7, r3
    49d2:	222d      	movs	r2, #45	; 0x2d
    49d4:	77da      	strb	r2, [r3, #31]
    49d6:	2310      	movs	r3, #16
    49d8:	18fb      	adds	r3, r7, r3
    49da:	2220      	movs	r2, #32
    49dc:	2130      	movs	r1, #48	; 0x30
    49de:	5499      	strb	r1, [r3, r2]
    49e0:	2310      	movs	r3, #16
    49e2:	18fb      	adds	r3, r7, r3
    49e4:	1d7a      	adds	r2, r7, #5
    49e6:	2121      	movs	r1, #33	; 0x21
    49e8:	7812      	ldrb	r2, [r2, #0]
    49ea:	545a      	strb	r2, [r3, r1]
    49ec:	2310      	movs	r3, #16
    49ee:	18fb      	adds	r3, r7, r3
    49f0:	2222      	movs	r2, #34	; 0x22
    49f2:	2137      	movs	r1, #55	; 0x37
    49f4:	5499      	strb	r1, [r3, r2]
    49f6:	2310      	movs	r3, #16
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	2223      	movs	r2, #35	; 0x23
    49fc:	2190      	movs	r1, #144	; 0x90
    49fe:	5499      	strb	r1, [r3, r2]
    4a00:	2310      	movs	r3, #16
    4a02:	18fb      	adds	r3, r7, r3
    4a04:	2224      	movs	r2, #36	; 0x24
    4a06:	2138      	movs	r1, #56	; 0x38
    4a08:	5499      	strb	r1, [r3, r2]
    4a0a:	2310      	movs	r3, #16
    4a0c:	18fb      	adds	r3, r7, r3
    4a0e:	2225      	movs	r2, #37	; 0x25
    4a10:	2142      	movs	r1, #66	; 0x42
    4a12:	5499      	strb	r1, [r3, r2]
    4a14:	2310      	movs	r3, #16
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	2226      	movs	r2, #38	; 0x26
    4a1a:	213c      	movs	r1, #60	; 0x3c
    4a1c:	5499      	strb	r1, [r3, r2]
    4a1e:	2310      	movs	r3, #16
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	2227      	movs	r2, #39	; 0x27
    4a24:	218f      	movs	r1, #143	; 0x8f
    4a26:	5499      	strb	r1, [r3, r2]
    4a28:	2310      	movs	r3, #16
    4a2a:	18fb      	adds	r3, r7, r3
    4a2c:	2228      	movs	r2, #40	; 0x28
    4a2e:	213d      	movs	r1, #61	; 0x3d
    4a30:	5499      	strb	r1, [r3, r2]
    4a32:	2310      	movs	r3, #16
    4a34:	18fb      	adds	r3, r7, r3
    4a36:	2229      	movs	r2, #41	; 0x29
    4a38:	2112      	movs	r1, #18
    4a3a:	5499      	strb	r1, [r3, r2]
    4a3c:	2310      	movs	r3, #16
    4a3e:	18fb      	adds	r3, r7, r3
    4a40:	222a      	movs	r2, #42	; 0x2a
    4a42:	216f      	movs	r1, #111	; 0x6f
    4a44:	5499      	strb	r1, [r3, r2]
    4a46:	2310      	movs	r3, #16
    4a48:	18fb      	adds	r3, r7, r3
    4a4a:	222b      	movs	r2, #43	; 0x2b
    4a4c:	2130      	movs	r1, #48	; 0x30
    4a4e:	5499      	strb	r1, [r3, r2]
    4a50:	2310      	movs	r3, #16
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	222c      	movs	r2, #44	; 0x2c
    4a56:	21ff      	movs	r1, #255	; 0xff
    4a58:	5499      	strb	r1, [r3, r2]
    4a5a:	2310      	movs	r3, #16
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	222d      	movs	r2, #45	; 0x2d
    4a60:	2100      	movs	r1, #0
    4a62:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    4a64:	4b4c      	ldr	r3, [pc, #304]	; (4b98 <RFM_initialize+0x32c>)
    4a66:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    4a68:	4b4c      	ldr	r3, [pc, #304]	; (4b9c <RFM_initialize+0x330>)
    4a6a:	4798      	blx	r3
  configure_port_pins();
    4a6c:	4b4c      	ldr	r3, [pc, #304]	; (4ba0 <RFM_initialize+0x334>)
    4a6e:	4798      	blx	r3
  configure_extint_channel();
    4a70:	4b4c      	ldr	r3, [pc, #304]	; (4ba4 <RFM_initialize+0x338>)
    4a72:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    4a74:	4b4c      	ldr	r3, [pc, #304]	; (4ba8 <RFM_initialize+0x33c>)
    4a76:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    4a78:	230f      	movs	r3, #15
    4a7a:	18fb      	adds	r3, r7, r3
    4a7c:	2232      	movs	r2, #50	; 0x32
    4a7e:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    4a80:	202f      	movs	r0, #47	; 0x2f
    4a82:	21aa      	movs	r1, #170	; 0xaa
    4a84:	4b49      	ldr	r3, [pc, #292]	; (4bac <RFM_initialize+0x340>)
    4a86:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    4a88:	202f      	movs	r0, #47	; 0x2f
    4a8a:	4b49      	ldr	r3, [pc, #292]	; (4bb0 <RFM_initialize+0x344>)
    4a8c:	4798      	blx	r3
    4a8e:	1e03      	subs	r3, r0, #0
    4a90:	2baa      	cmp	r3, #170	; 0xaa
    4a92:	d008      	beq.n	4aa6 <RFM_initialize+0x23a>
    4a94:	4b47      	ldr	r3, [pc, #284]	; (4bb4 <RFM_initialize+0x348>)
    4a96:	4798      	blx	r3
    4a98:	1c02      	adds	r2, r0, #0
    4a9a:	230f      	movs	r3, #15
    4a9c:	18fb      	adds	r3, r7, r3
    4a9e:	781b      	ldrb	r3, [r3, #0]
    4aa0:	b2db      	uxtb	r3, r3
    4aa2:	429a      	cmp	r2, r3
    4aa4:	d3ec      	bcc.n	4a80 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    4aa6:	4b40      	ldr	r3, [pc, #256]	; (4ba8 <RFM_initialize+0x33c>)
    4aa8:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    4aaa:	202f      	movs	r0, #47	; 0x2f
    4aac:	2155      	movs	r1, #85	; 0x55
    4aae:	4b3f      	ldr	r3, [pc, #252]	; (4bac <RFM_initialize+0x340>)
    4ab0:	4798      	blx	r3
    4ab2:	202f      	movs	r0, #47	; 0x2f
    4ab4:	4b3e      	ldr	r3, [pc, #248]	; (4bb0 <RFM_initialize+0x344>)
    4ab6:	4798      	blx	r3
    4ab8:	1e03      	subs	r3, r0, #0
    4aba:	2b55      	cmp	r3, #85	; 0x55
    4abc:	d008      	beq.n	4ad0 <RFM_initialize+0x264>
    4abe:	4b3d      	ldr	r3, [pc, #244]	; (4bb4 <RFM_initialize+0x348>)
    4ac0:	4798      	blx	r3
    4ac2:	1c02      	adds	r2, r0, #0
    4ac4:	230f      	movs	r3, #15
    4ac6:	18fb      	adds	r3, r7, r3
    4ac8:	781b      	ldrb	r3, [r3, #0]
    4aca:	b2db      	uxtb	r3, r3
    4acc:	429a      	cmp	r2, r3
    4ace:	d3ec      	bcc.n	4aaa <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    4ad0:	233f      	movs	r3, #63	; 0x3f
    4ad2:	18fb      	adds	r3, r7, r3
    4ad4:	2200      	movs	r2, #0
    4ad6:	701a      	strb	r2, [r3, #0]
    4ad8:	e01a      	b.n	4b10 <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    4ada:	233f      	movs	r3, #63	; 0x3f
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	781a      	ldrb	r2, [r3, #0]
    4ae0:	2310      	movs	r3, #16
    4ae2:	18fb      	adds	r3, r7, r3
    4ae4:	0052      	lsls	r2, r2, #1
    4ae6:	5cd1      	ldrb	r1, [r2, r3]
    4ae8:	233f      	movs	r3, #63	; 0x3f
    4aea:	18fb      	adds	r3, r7, r3
    4aec:	781b      	ldrb	r3, [r3, #0]
    4aee:	2210      	movs	r2, #16
    4af0:	18ba      	adds	r2, r7, r2
    4af2:	005b      	lsls	r3, r3, #1
    4af4:	18d3      	adds	r3, r2, r3
    4af6:	3301      	adds	r3, #1
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	1c08      	adds	r0, r1, #0
    4afc:	1c19      	adds	r1, r3, #0
    4afe:	4b2b      	ldr	r3, [pc, #172]	; (4bac <RFM_initialize+0x340>)
    4b00:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    4b02:	233f      	movs	r3, #63	; 0x3f
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	781a      	ldrb	r2, [r3, #0]
    4b08:	233f      	movs	r3, #63	; 0x3f
    4b0a:	18fb      	adds	r3, r7, r3
    4b0c:	3201      	adds	r2, #1
    4b0e:	701a      	strb	r2, [r3, #0]
    4b10:	233f      	movs	r3, #63	; 0x3f
    4b12:	18fb      	adds	r3, r7, r3
    4b14:	781a      	ldrb	r2, [r3, #0]
    4b16:	2310      	movs	r3, #16
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	0052      	lsls	r2, r2, #1
    4b1c:	5cd3      	ldrb	r3, [r2, r3]
    4b1e:	2bff      	cmp	r3, #255	; 0xff
    4b20:	d1db      	bne.n	4ada <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    4b22:	2000      	movs	r0, #0
    4b24:	4b24      	ldr	r3, [pc, #144]	; (4bb8 <RFM_initialize+0x34c>)
    4b26:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    4b28:	4b24      	ldr	r3, [pc, #144]	; (4bbc <RFM_initialize+0x350>)
    4b2a:	781b      	ldrb	r3, [r3, #0]
    4b2c:	b2db      	uxtb	r3, r3
    4b2e:	1c18      	adds	r0, r3, #0
    4b30:	4b23      	ldr	r3, [pc, #140]	; (4bc0 <RFM_initialize+0x354>)
    4b32:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    4b34:	2001      	movs	r0, #1
    4b36:	4b23      	ldr	r3, [pc, #140]	; (4bc4 <RFM_initialize+0x358>)
    4b38:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    4b3a:	4b1b      	ldr	r3, [pc, #108]	; (4ba8 <RFM_initialize+0x33c>)
    4b3c:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    4b3e:	46c0      	nop			; (mov r8, r8)
    4b40:	2027      	movs	r0, #39	; 0x27
    4b42:	4b1b      	ldr	r3, [pc, #108]	; (4bb0 <RFM_initialize+0x344>)
    4b44:	4798      	blx	r3
    4b46:	1c03      	adds	r3, r0, #0
    4b48:	b2db      	uxtb	r3, r3
    4b4a:	b25b      	sxtb	r3, r3
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	db08      	blt.n	4b62 <RFM_initialize+0x2f6>
    4b50:	4b18      	ldr	r3, [pc, #96]	; (4bb4 <RFM_initialize+0x348>)
    4b52:	4798      	blx	r3
    4b54:	1c02      	adds	r2, r0, #0
    4b56:	230f      	movs	r3, #15
    4b58:	18fb      	adds	r3, r7, r3
    4b5a:	781b      	ldrb	r3, [r3, #0]
    4b5c:	b2db      	uxtb	r3, r3
    4b5e:	429a      	cmp	r2, r3
    4b60:	d3ee      	bcc.n	4b40 <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
    4b62:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <RFM_initialize+0x348>)
    4b64:	4798      	blx	r3
    4b66:	1c02      	adds	r2, r0, #0
    4b68:	230f      	movs	r3, #15
    4b6a:	18fb      	adds	r3, r7, r3
    4b6c:	781b      	ldrb	r3, [r3, #0]
    4b6e:	b2db      	uxtb	r3, r3
    4b70:	429a      	cmp	r2, r3
    4b72:	d301      	bcc.n	4b78 <RFM_initialize+0x30c>
    return false;
    4b74:	2300      	movs	r3, #0
    4b76:	e009      	b.n	4b8c <RFM_initialize+0x320>
  _inISR = false;
    4b78:	4b13      	ldr	r3, [pc, #76]	; (4bc8 <RFM_initialize+0x35c>)
    4b7a:	2200      	movs	r2, #0
    4b7c:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    4b7e:	4b13      	ldr	r3, [pc, #76]	; (4bcc <RFM_initialize+0x360>)
    4b80:	4798      	blx	r3

  _address = nodeID;
    4b82:	4b13      	ldr	r3, [pc, #76]	; (4bd0 <RFM_initialize+0x364>)
    4b84:	1dba      	adds	r2, r7, #6
    4b86:	7812      	ldrb	r2, [r2, #0]
    4b88:	701a      	strb	r2, [r3, #0]
  return true;
    4b8a:	2301      	movs	r3, #1
}
    4b8c:	1c18      	adds	r0, r3, #0
    4b8e:	46bd      	mov	sp, r7
    4b90:	b011      	add	sp, #68	; 0x44
    4b92:	bd90      	pop	{r4, r7, pc}
    4b94:	0000483d 	.word	0x0000483d
    4b98:	000044a5 	.word	0x000044a5
    4b9c:	00004569 	.word	0x00004569
    4ba0:	00004411 	.word	0x00004411
    4ba4:	0000443d 	.word	0x0000443d
    4ba8:	000045cd 	.word	0x000045cd
    4bac:	00005455 	.word	0x00005455
    4bb0:	000053e9 	.word	0x000053e9
    4bb4:	000045f5 	.word	0x000045f5
    4bb8:	000052e9 	.word	0x000052e9
    4bbc:	200001f8 	.word	0x200001f8
    4bc0:	000047b5 	.word	0x000047b5
    4bc4:	00004bd5 	.word	0x00004bd5
    4bc8:	200000f9 	.word	0x200000f9
    4bcc:	0000447d 	.word	0x0000447d
    4bd0:	2000013c 	.word	0x2000013c

00004bd4 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b082      	sub	sp, #8
    4bd8:	af00      	add	r7, sp, #0
    4bda:	1c02      	adds	r2, r0, #0
    4bdc:	1dfb      	adds	r3, r7, #7
    4bde:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    4be0:	1dfb      	adds	r3, r7, #7
    4be2:	781b      	ldrb	r3, [r3, #0]
    4be4:	b29a      	uxth	r2, r3
    4be6:	4b4c      	ldr	r3, [pc, #304]	; (4d18 <setMode+0x144>)
    4be8:	881b      	ldrh	r3, [r3, #0]
    4bea:	b29b      	uxth	r3, r3
    4bec:	429a      	cmp	r2, r3
    4bee:	d100      	bne.n	4bf2 <setMode+0x1e>
    return;
    4bf0:	e08e      	b.n	4d10 <setMode+0x13c>

  switch (newMode) {
    4bf2:	1dfb      	adds	r3, r7, #7
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	2b04      	cmp	r3, #4
    4bf8:	d900      	bls.n	4bfc <setMode+0x28>
    4bfa:	e088      	b.n	4d0e <setMode+0x13a>
    4bfc:	009a      	lsls	r2, r3, #2
    4bfe:	4b47      	ldr	r3, [pc, #284]	; (4d1c <setMode+0x148>)
    4c00:	18d3      	adds	r3, r2, r3
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    4c06:	2001      	movs	r0, #1
    4c08:	4b45      	ldr	r3, [pc, #276]	; (4d20 <setMode+0x14c>)
    4c0a:	4798      	blx	r3
    4c0c:	1c03      	adds	r3, r0, #0
    4c0e:	b2db      	uxtb	r3, r3
    4c10:	1c1a      	adds	r2, r3, #0
    4c12:	231c      	movs	r3, #28
    4c14:	439a      	bics	r2, r3
    4c16:	1c13      	adds	r3, r2, #0
    4c18:	b2db      	uxtb	r3, r3
    4c1a:	1c1a      	adds	r2, r3, #0
    4c1c:	230c      	movs	r3, #12
    4c1e:	4313      	orrs	r3, r2
    4c20:	b2db      	uxtb	r3, r3
    4c22:	b2db      	uxtb	r3, r3
    4c24:	2001      	movs	r0, #1
    4c26:	1c19      	adds	r1, r3, #0
    4c28:	4b3e      	ldr	r3, [pc, #248]	; (4d24 <setMode+0x150>)
    4c2a:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    4c2c:	4b3e      	ldr	r3, [pc, #248]	; (4d28 <setMode+0x154>)
    4c2e:	781b      	ldrb	r3, [r3, #0]
    4c30:	b2db      	uxtb	r3, r3
    4c32:	2b00      	cmp	r3, #0
    4c34:	d003      	beq.n	4c3e <setMode+0x6a>
    4c36:	2001      	movs	r0, #1
    4c38:	4b3c      	ldr	r3, [pc, #240]	; (4d2c <setMode+0x158>)
    4c3a:	4798      	blx	r3
      break;
    4c3c:	e053      	b.n	4ce6 <setMode+0x112>
    4c3e:	e052      	b.n	4ce6 <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    4c40:	2001      	movs	r0, #1
    4c42:	4b37      	ldr	r3, [pc, #220]	; (4d20 <setMode+0x14c>)
    4c44:	4798      	blx	r3
    4c46:	1c03      	adds	r3, r0, #0
    4c48:	b2db      	uxtb	r3, r3
    4c4a:	1c1a      	adds	r2, r3, #0
    4c4c:	231c      	movs	r3, #28
    4c4e:	439a      	bics	r2, r3
    4c50:	1c13      	adds	r3, r2, #0
    4c52:	b2db      	uxtb	r3, r3
    4c54:	1c1a      	adds	r2, r3, #0
    4c56:	2310      	movs	r3, #16
    4c58:	4313      	orrs	r3, r2
    4c5a:	b2db      	uxtb	r3, r3
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	2001      	movs	r0, #1
    4c60:	1c19      	adds	r1, r3, #0
    4c62:	4b30      	ldr	r3, [pc, #192]	; (4d24 <setMode+0x150>)
    4c64:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    4c66:	4b30      	ldr	r3, [pc, #192]	; (4d28 <setMode+0x154>)
    4c68:	781b      	ldrb	r3, [r3, #0]
    4c6a:	b2db      	uxtb	r3, r3
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d003      	beq.n	4c78 <setMode+0xa4>
    4c70:	2000      	movs	r0, #0
    4c72:	4b2e      	ldr	r3, [pc, #184]	; (4d2c <setMode+0x158>)
    4c74:	4798      	blx	r3
      break;
    4c76:	e036      	b.n	4ce6 <setMode+0x112>
    4c78:	e035      	b.n	4ce6 <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    4c7a:	2001      	movs	r0, #1
    4c7c:	4b28      	ldr	r3, [pc, #160]	; (4d20 <setMode+0x14c>)
    4c7e:	4798      	blx	r3
    4c80:	1c03      	adds	r3, r0, #0
    4c82:	b2db      	uxtb	r3, r3
    4c84:	1c1a      	adds	r2, r3, #0
    4c86:	231c      	movs	r3, #28
    4c88:	439a      	bics	r2, r3
    4c8a:	1c13      	adds	r3, r2, #0
    4c8c:	b2db      	uxtb	r3, r3
    4c8e:	1c1a      	adds	r2, r3, #0
    4c90:	2308      	movs	r3, #8
    4c92:	4313      	orrs	r3, r2
    4c94:	b2db      	uxtb	r3, r3
    4c96:	b2db      	uxtb	r3, r3
    4c98:	2001      	movs	r0, #1
    4c9a:	1c19      	adds	r1, r3, #0
    4c9c:	4b21      	ldr	r3, [pc, #132]	; (4d24 <setMode+0x150>)
    4c9e:	4798      	blx	r3
      break;
    4ca0:	e021      	b.n	4ce6 <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    4ca2:	2001      	movs	r0, #1
    4ca4:	4b1e      	ldr	r3, [pc, #120]	; (4d20 <setMode+0x14c>)
    4ca6:	4798      	blx	r3
    4ca8:	1c03      	adds	r3, r0, #0
    4caa:	b2db      	uxtb	r3, r3
    4cac:	1c1a      	adds	r2, r3, #0
    4cae:	231c      	movs	r3, #28
    4cb0:	439a      	bics	r2, r3
    4cb2:	1c13      	adds	r3, r2, #0
    4cb4:	b2db      	uxtb	r3, r3
    4cb6:	1c1a      	adds	r2, r3, #0
    4cb8:	2304      	movs	r3, #4
    4cba:	4313      	orrs	r3, r2
    4cbc:	b2db      	uxtb	r3, r3
    4cbe:	b2db      	uxtb	r3, r3
    4cc0:	2001      	movs	r0, #1
    4cc2:	1c19      	adds	r1, r3, #0
    4cc4:	4b17      	ldr	r3, [pc, #92]	; (4d24 <setMode+0x150>)
    4cc6:	4798      	blx	r3
      break;
    4cc8:	e00d      	b.n	4ce6 <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    4cca:	2001      	movs	r0, #1
    4ccc:	4b14      	ldr	r3, [pc, #80]	; (4d20 <setMode+0x14c>)
    4cce:	4798      	blx	r3
    4cd0:	1c03      	adds	r3, r0, #0
    4cd2:	1c1a      	adds	r2, r3, #0
    4cd4:	231c      	movs	r3, #28
    4cd6:	439a      	bics	r2, r3
    4cd8:	1c13      	adds	r3, r2, #0
    4cda:	b2db      	uxtb	r3, r3
    4cdc:	2001      	movs	r0, #1
    4cde:	1c19      	adds	r1, r3, #0
    4ce0:	4b10      	ldr	r3, [pc, #64]	; (4d24 <setMode+0x150>)
    4ce2:	4798      	blx	r3
      break;
    4ce4:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	4b0b      	ldr	r3, [pc, #44]	; (4d18 <setMode+0x144>)
    4cea:	881b      	ldrh	r3, [r3, #0]
    4cec:	b29b      	uxth	r3, r3
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d107      	bne.n	4d02 <setMode+0x12e>
    4cf2:	2027      	movs	r0, #39	; 0x27
    4cf4:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <setMode+0x14c>)
    4cf6:	4798      	blx	r3
    4cf8:	1c03      	adds	r3, r0, #0
    4cfa:	b2db      	uxtb	r3, r3
    4cfc:	b25b      	sxtb	r3, r3
    4cfe:	2b00      	cmp	r3, #0
    4d00:	daf2      	bge.n	4ce8 <setMode+0x114>

  _mode = newMode;
    4d02:	1dfb      	adds	r3, r7, #7
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	b29a      	uxth	r2, r3
    4d08:	4b03      	ldr	r3, [pc, #12]	; (4d18 <setMode+0x144>)
    4d0a:	801a      	strh	r2, [r3, #0]
    4d0c:	e000      	b.n	4d10 <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    4d0e:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    4d10:	46bd      	mov	sp, r7
    4d12:	b002      	add	sp, #8
    4d14:	bd80      	pop	{r7, pc}
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	200001f6 	.word	0x200001f6
    4d1c:	00008018 	.word	0x00008018
    4d20:	000053e9 	.word	0x000053e9
    4d24:	00005455 	.word	0x00005455
    4d28:	200001f8 	.word	0x200001f8
    4d2c:	00005511 	.word	0x00005511

00004d30 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    4d30:	b580      	push	{r7, lr}
    4d32:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    4d34:	4b0b      	ldr	r3, [pc, #44]	; (4d64 <canSend+0x34>)
    4d36:	881b      	ldrh	r3, [r3, #0]
    4d38:	b29b      	uxth	r3, r3
    4d3a:	2b03      	cmp	r3, #3
    4d3c:	d10e      	bne.n	4d5c <canSend+0x2c>
    4d3e:	4b0a      	ldr	r3, [pc, #40]	; (4d68 <canSend+0x38>)
    4d40:	881b      	ldrh	r3, [r3, #0]
    4d42:	b29b      	uxth	r3, r3
    4d44:	2b00      	cmp	r3, #0
    4d46:	d109      	bne.n	4d5c <canSend+0x2c>
    4d48:	4b08      	ldr	r3, [pc, #32]	; (4d6c <canSend+0x3c>)
    4d4a:	4798      	blx	r3
    4d4c:	1c03      	adds	r3, r0, #0
    4d4e:	335a      	adds	r3, #90	; 0x5a
    4d50:	da04      	bge.n	4d5c <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    4d52:	2001      	movs	r0, #1
    4d54:	4b06      	ldr	r3, [pc, #24]	; (4d70 <canSend+0x40>)
    4d56:	4798      	blx	r3
    return true;
    4d58:	2301      	movs	r3, #1
    4d5a:	e000      	b.n	4d5e <canSend+0x2e>
  }
  return false;
    4d5c:	2300      	movs	r3, #0
}
    4d5e:	1c18      	adds	r0, r3, #0
    4d60:	46bd      	mov	sp, r7
    4d62:	bd80      	pop	{r7, pc}
    4d64:	200001f6 	.word	0x200001f6
    4d68:	200001c4 	.word	0x200001c4
    4d6c:	000053a5 	.word	0x000053a5
    4d70:	00004bd5 	.word	0x00004bd5

00004d74 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    4d74:	b590      	push	{r4, r7, lr}
    4d76:	b085      	sub	sp, #20
    4d78:	af02      	add	r7, sp, #8
    4d7a:	1c04      	adds	r4, r0, #0
    4d7c:	6039      	str	r1, [r7, #0]
    4d7e:	1c10      	adds	r0, r2, #0
    4d80:	1c19      	adds	r1, r3, #0
    4d82:	1dfb      	adds	r3, r7, #7
    4d84:	1c22      	adds	r2, r4, #0
    4d86:	701a      	strb	r2, [r3, #0]
    4d88:	1dbb      	adds	r3, r7, #6
    4d8a:	1c02      	adds	r2, r0, #0
    4d8c:	701a      	strb	r2, [r3, #0]
    4d8e:	1d7b      	adds	r3, r7, #5
    4d90:	1c0a      	adds	r2, r1, #0
    4d92:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4d94:	203d      	movs	r0, #61	; 0x3d
    4d96:	4b17      	ldr	r3, [pc, #92]	; (4df4 <RFM_send+0x80>)
    4d98:	4798      	blx	r3
    4d9a:	1c03      	adds	r3, r0, #0
    4d9c:	1c1a      	adds	r2, r3, #0
    4d9e:	2304      	movs	r3, #4
    4da0:	4313      	orrs	r3, r2
    4da2:	b2db      	uxtb	r3, r3
    4da4:	203d      	movs	r0, #61	; 0x3d
    4da6:	1c19      	adds	r1, r3, #0
    4da8:	4b13      	ldr	r3, [pc, #76]	; (4df8 <RFM_send+0x84>)
    4daa:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    4dac:	4b13      	ldr	r3, [pc, #76]	; (4dfc <RFM_send+0x88>)
    4dae:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    4db0:	e001      	b.n	4db6 <RFM_send+0x42>
    4db2:	4b13      	ldr	r3, [pc, #76]	; (4e00 <RFM_send+0x8c>)
    4db4:	4798      	blx	r3
    4db6:	4b13      	ldr	r3, [pc, #76]	; (4e04 <RFM_send+0x90>)
    4db8:	4798      	blx	r3
    4dba:	1c03      	adds	r3, r0, #0
    4dbc:	1c1a      	adds	r2, r3, #0
    4dbe:	2301      	movs	r3, #1
    4dc0:	4053      	eors	r3, r2
    4dc2:	b2db      	uxtb	r3, r3
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d005      	beq.n	4dd4 <RFM_send+0x60>
    4dc8:	4b0f      	ldr	r3, [pc, #60]	; (4e08 <RFM_send+0x94>)
    4dca:	4798      	blx	r3
    4dcc:	1e02      	subs	r2, r0, #0
    4dce:	4b0f      	ldr	r3, [pc, #60]	; (4e0c <RFM_send+0x98>)
    4dd0:	429a      	cmp	r2, r3
    4dd2:	d9ee      	bls.n	4db2 <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    4dd4:	1dfb      	adds	r3, r7, #7
    4dd6:	7818      	ldrb	r0, [r3, #0]
    4dd8:	6839      	ldr	r1, [r7, #0]
    4dda:	1dbb      	adds	r3, r7, #6
    4ddc:	781a      	ldrb	r2, [r3, #0]
    4dde:	1d7b      	adds	r3, r7, #5
    4de0:	781c      	ldrb	r4, [r3, #0]
    4de2:	2300      	movs	r3, #0
    4de4:	9300      	str	r3, [sp, #0]
    4de6:	1c23      	adds	r3, r4, #0
    4de8:	4c09      	ldr	r4, [pc, #36]	; (4e10 <RFM_send+0x9c>)
    4dea:	47a0      	blx	r4
}
    4dec:	46bd      	mov	sp, r7
    4dee:	b003      	add	sp, #12
    4df0:	bd90      	pop	{r4, r7, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	000053e9 	.word	0x000053e9
    4df8:	00005455 	.word	0x00005455
    4dfc:	000045cd 	.word	0x000045cd
    4e00:	0000528d 	.word	0x0000528d
    4e04:	00004d31 	.word	0x00004d31
    4e08:	000045f5 	.word	0x000045f5
    4e0c:	000003e7 	.word	0x000003e7
    4e10:	0000461d 	.word	0x0000461d

00004e14 <RFM_sendWithRetry>:
// and it handles all the ACK requesting/retrying for you :)
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
    4e14:	b590      	push	{r4, r7, lr}
    4e16:	b085      	sub	sp, #20
    4e18:	af00      	add	r7, sp, #0
    4e1a:	1c04      	adds	r4, r0, #0
    4e1c:	6039      	str	r1, [r7, #0]
    4e1e:	1c10      	adds	r0, r2, #0
    4e20:	1c19      	adds	r1, r3, #0
    4e22:	1dfb      	adds	r3, r7, #7
    4e24:	1c22      	adds	r2, r4, #0
    4e26:	701a      	strb	r2, [r3, #0]
    4e28:	1dbb      	adds	r3, r7, #6
    4e2a:	1c02      	adds	r2, r0, #0
    4e2c:	701a      	strb	r2, [r3, #0]
    4e2e:	1d7b      	adds	r3, r7, #5
    4e30:	1c0a      	adds	r2, r1, #0
    4e32:	701a      	strb	r2, [r3, #0]
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    4e34:	230f      	movs	r3, #15
    4e36:	18fb      	adds	r3, r7, r3
    4e38:	2200      	movs	r2, #0
    4e3a:	701a      	strb	r2, [r3, #0]
    4e3c:	e025      	b.n	4e8a <RFM_sendWithRetry+0x76>
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    4e3e:	1dfb      	adds	r3, r7, #7
    4e40:	7819      	ldrb	r1, [r3, #0]
    4e42:	683a      	ldr	r2, [r7, #0]
    4e44:	1dbb      	adds	r3, r7, #6
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	1c08      	adds	r0, r1, #0
    4e4a:	1c11      	adds	r1, r2, #0
    4e4c:	1c1a      	adds	r2, r3, #0
    4e4e:	2301      	movs	r3, #1
    4e50:	4c14      	ldr	r4, [pc, #80]	; (4ea4 <RFM_sendWithRetry+0x90>)
    4e52:	47a0      	blx	r4
    reset_millis(); //sentTime = millis(); // CHANGE //
    4e54:	4b14      	ldr	r3, [pc, #80]	; (4ea8 <RFM_sendWithRetry+0x94>)
    4e56:	4798      	blx	r3
    while (millis() < retryWaitTime) // CHANGE //
    4e58:	e008      	b.n	4e6c <RFM_sendWithRetry+0x58>
    {
      if (ACKReceived(toAddress))
    4e5a:	1dfb      	adds	r3, r7, #7
    4e5c:	781b      	ldrb	r3, [r3, #0]
    4e5e:	1c18      	adds	r0, r3, #0
    4e60:	4b12      	ldr	r3, [pc, #72]	; (4eac <RFM_sendWithRetry+0x98>)
    4e62:	4798      	blx	r3
    4e64:	1e03      	subs	r3, r0, #0
    4e66:	d001      	beq.n	4e6c <RFM_sendWithRetry+0x58>
      {
        return true;
    4e68:	2301      	movs	r3, #1
    4e6a:	e016      	b.n	4e9a <RFM_sendWithRetry+0x86>
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    reset_millis(); //sentTime = millis(); // CHANGE //
    while (millis() < retryWaitTime) // CHANGE //
    4e6c:	4b10      	ldr	r3, [pc, #64]	; (4eb0 <RFM_sendWithRetry+0x9c>)
    4e6e:	4798      	blx	r3
    4e70:	1c02      	adds	r2, r0, #0
    4e72:	2320      	movs	r3, #32
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	781b      	ldrb	r3, [r3, #0]
    4e78:	429a      	cmp	r2, r3
    4e7a:	d3ee      	bcc.n	4e5a <RFM_sendWithRetry+0x46>
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    4e7c:	230f      	movs	r3, #15
    4e7e:	18fb      	adds	r3, r7, r3
    4e80:	781a      	ldrb	r2, [r3, #0]
    4e82:	230f      	movs	r3, #15
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	3201      	adds	r2, #1
    4e88:	701a      	strb	r2, [r3, #0]
    4e8a:	230f      	movs	r3, #15
    4e8c:	18fa      	adds	r2, r7, r3
    4e8e:	1d7b      	adds	r3, r7, #5
    4e90:	7812      	ldrb	r2, [r2, #0]
    4e92:	781b      	ldrb	r3, [r3, #0]
    4e94:	429a      	cmp	r2, r3
    4e96:	d9d2      	bls.n	4e3e <RFM_sendWithRetry+0x2a>
      {
        return true;
      }
    }
  }
  return false;
    4e98:	2300      	movs	r3, #0
}
    4e9a:	1c18      	adds	r0, r3, #0
    4e9c:	46bd      	mov	sp, r7
    4e9e:	b005      	add	sp, #20
    4ea0:	bd90      	pop	{r4, r7, pc}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	00004d75 	.word	0x00004d75
    4ea8:	000045cd 	.word	0x000045cd
    4eac:	00004eb5 	.word	0x00004eb5
    4eb0:	000045f5 	.word	0x000045f5

00004eb4 <ACKReceived>:

// should be polled immediately after sending a packet with ACK request
bool ACKReceived(uint8_t fromNodeID) {
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b082      	sub	sp, #8
    4eb8:	af00      	add	r7, sp, #0
    4eba:	1c02      	adds	r2, r0, #0
    4ebc:	1dfb      	adds	r3, r7, #7
    4ebe:	701a      	strb	r2, [r3, #0]
  if (RFM_receiveDone())
    4ec0:	4b10      	ldr	r3, [pc, #64]	; (4f04 <ACKReceived+0x50>)
    4ec2:	4798      	blx	r3
    4ec4:	1e03      	subs	r3, r0, #0
    4ec6:	d018      	beq.n	4efa <ACKReceived+0x46>
    return (RFM_SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
    4ec8:	1dfb      	adds	r3, r7, #7
    4eca:	781b      	ldrb	r3, [r3, #0]
    4ecc:	b29a      	uxth	r2, r3
    4ece:	4b0e      	ldr	r3, [pc, #56]	; (4f08 <ACKReceived+0x54>)
    4ed0:	881b      	ldrh	r3, [r3, #0]
    4ed2:	b29b      	uxth	r3, r3
    4ed4:	429a      	cmp	r2, r3
    4ed6:	d003      	beq.n	4ee0 <ACKReceived+0x2c>
    4ed8:	1dfb      	adds	r3, r7, #7
    4eda:	781b      	ldrb	r3, [r3, #0]
    4edc:	2bff      	cmp	r3, #255	; 0xff
    4ede:	d106      	bne.n	4eee <ACKReceived+0x3a>
    4ee0:	4b0a      	ldr	r3, [pc, #40]	; (4f0c <ACKReceived+0x58>)
    4ee2:	881b      	ldrh	r3, [r3, #0]
    4ee4:	b29b      	uxth	r3, r3
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d001      	beq.n	4eee <ACKReceived+0x3a>
    4eea:	2301      	movs	r3, #1
    4eec:	e000      	b.n	4ef0 <ACKReceived+0x3c>
    4eee:	2300      	movs	r3, #0
    4ef0:	1c1a      	adds	r2, r3, #0
    4ef2:	2301      	movs	r3, #1
    4ef4:	4013      	ands	r3, r2
    4ef6:	b2db      	uxtb	r3, r3
    4ef8:	e000      	b.n	4efc <ACKReceived+0x48>
  return false;
    4efa:	2300      	movs	r3, #0
}
    4efc:	1c18      	adds	r0, r3, #0
    4efe:	46bd      	mov	sp, r7
    4f00:	b002      	add	sp, #8
    4f02:	bd80      	pop	{r7, pc}
    4f04:	0000528d 	.word	0x0000528d
    4f08:	200000de 	.word	0x200000de
    4f0c:	20000140 	.word	0x20000140

00004f10 <RFM_ACKRequested>:

// check whether an ACK was requested in the last received packet (non-broadcasted packet)
bool RFM_ACKRequested() {
    4f10:	b580      	push	{r7, lr}
    4f12:	af00      	add	r7, sp, #0
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
    4f14:	4b09      	ldr	r3, [pc, #36]	; (4f3c <RFM_ACKRequested+0x2c>)
    4f16:	881b      	ldrh	r3, [r3, #0]
    4f18:	b29b      	uxth	r3, r3
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d006      	beq.n	4f2c <RFM_ACKRequested+0x1c>
    4f1e:	4b08      	ldr	r3, [pc, #32]	; (4f40 <RFM_ACKRequested+0x30>)
    4f20:	881b      	ldrh	r3, [r3, #0]
    4f22:	b29b      	uxth	r3, r3
    4f24:	2bff      	cmp	r3, #255	; 0xff
    4f26:	d001      	beq.n	4f2c <RFM_ACKRequested+0x1c>
    4f28:	2301      	movs	r3, #1
    4f2a:	e000      	b.n	4f2e <RFM_ACKRequested+0x1e>
    4f2c:	2300      	movs	r3, #0
    4f2e:	1c1a      	adds	r2, r3, #0
    4f30:	2301      	movs	r3, #1
    4f32:	4013      	ands	r3, r2
    4f34:	b2db      	uxtb	r3, r3
}
    4f36:	1c18      	adds	r0, r3, #0
    4f38:	46bd      	mov	sp, r7
    4f3a:	bd80      	pop	{r7, pc}
    4f3c:	200001f2 	.word	0x200001f2
    4f40:	200001f4 	.word	0x200001f4

00004f44 <RFM_sendACK>:

// should be called immediately after reception in case sender wants ACK
void RFM_sendACK(const void* buffer, uint8_t bufferSize) {
    4f44:	b590      	push	{r4, r7, lr}
    4f46:	b087      	sub	sp, #28
    4f48:	af02      	add	r7, sp, #8
    4f4a:	6078      	str	r0, [r7, #4]
    4f4c:	1c0a      	adds	r2, r1, #0
    4f4e:	1cfb      	adds	r3, r7, #3
    4f50:	701a      	strb	r2, [r3, #0]
  ACK_REQUESTED = 0;   // TWS added to make sure we don't end up in a timing race and infinite loop sending Acks
    4f52:	4b26      	ldr	r3, [pc, #152]	; (4fec <RFM_sendACK+0xa8>)
    4f54:	2200      	movs	r2, #0
    4f56:	801a      	strh	r2, [r3, #0]
  volatile uint8_t sender = RFM_SENDERID;
    4f58:	4b25      	ldr	r3, [pc, #148]	; (4ff0 <RFM_sendACK+0xac>)
    4f5a:	881b      	ldrh	r3, [r3, #0]
    4f5c:	b29b      	uxth	r3, r3
    4f5e:	b2da      	uxtb	r2, r3
    4f60:	230f      	movs	r3, #15
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	701a      	strb	r2, [r3, #0]
  volatile int16_t _RSSI = RFM_RSSI; // save payload received RSSI value
    4f66:	4b23      	ldr	r3, [pc, #140]	; (4ff4 <RFM_sendACK+0xb0>)
    4f68:	881b      	ldrh	r3, [r3, #0]
    4f6a:	b29a      	uxth	r2, r3
    4f6c:	230c      	movs	r3, #12
    4f6e:	18fb      	adds	r3, r7, r3
    4f70:	801a      	strh	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4f72:	203d      	movs	r0, #61	; 0x3d
    4f74:	4b20      	ldr	r3, [pc, #128]	; (4ff8 <RFM_sendACK+0xb4>)
    4f76:	4798      	blx	r3
    4f78:	1c03      	adds	r3, r0, #0
    4f7a:	1c1a      	adds	r2, r3, #0
    4f7c:	2304      	movs	r3, #4
    4f7e:	4313      	orrs	r3, r2
    4f80:	b2db      	uxtb	r3, r3
    4f82:	203d      	movs	r0, #61	; 0x3d
    4f84:	1c19      	adds	r1, r3, #0
    4f86:	4b1d      	ldr	r3, [pc, #116]	; (4ffc <RFM_sendACK+0xb8>)
    4f88:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    4f8a:	4b1d      	ldr	r3, [pc, #116]	; (5000 <RFM_sendACK+0xbc>)
    4f8c:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    4f8e:	e001      	b.n	4f94 <RFM_sendACK+0x50>
    4f90:	4b1c      	ldr	r3, [pc, #112]	; (5004 <RFM_sendACK+0xc0>)
    4f92:	4798      	blx	r3
    4f94:	4b1c      	ldr	r3, [pc, #112]	; (5008 <RFM_sendACK+0xc4>)
    4f96:	4798      	blx	r3
    4f98:	1c03      	adds	r3, r0, #0
    4f9a:	1c1a      	adds	r2, r3, #0
    4f9c:	2301      	movs	r3, #1
    4f9e:	4053      	eors	r3, r2
    4fa0:	b2db      	uxtb	r3, r3
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d005      	beq.n	4fb2 <RFM_sendACK+0x6e>
    4fa6:	4b19      	ldr	r3, [pc, #100]	; (500c <RFM_sendACK+0xc8>)
    4fa8:	4798      	blx	r3
    4faa:	1e02      	subs	r2, r0, #0
    4fac:	4b18      	ldr	r3, [pc, #96]	; (5010 <RFM_sendACK+0xcc>)
    4fae:	429a      	cmp	r2, r3
    4fb0:	d9ee      	bls.n	4f90 <RFM_sendACK+0x4c>
  RFM_SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by RFM_receiveDone()
    4fb2:	230f      	movs	r3, #15
    4fb4:	18fb      	adds	r3, r7, r3
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	b2db      	uxtb	r3, r3
    4fba:	b29a      	uxth	r2, r3
    4fbc:	4b0c      	ldr	r3, [pc, #48]	; (4ff0 <RFM_sendACK+0xac>)
    4fbe:	801a      	strh	r2, [r3, #0]
  sendFrame(sender, buffer, bufferSize, false, true);
    4fc0:	230f      	movs	r3, #15
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	b2d8      	uxtb	r0, r3
    4fc8:	6879      	ldr	r1, [r7, #4]
    4fca:	1cfb      	adds	r3, r7, #3
    4fcc:	781a      	ldrb	r2, [r3, #0]
    4fce:	2301      	movs	r3, #1
    4fd0:	9300      	str	r3, [sp, #0]
    4fd2:	2300      	movs	r3, #0
    4fd4:	4c0f      	ldr	r4, [pc, #60]	; (5014 <RFM_sendACK+0xd0>)
    4fd6:	47a0      	blx	r4
  RFM_RSSI = _RSSI; // restore payload RSSI
    4fd8:	230c      	movs	r3, #12
    4fda:	18fb      	adds	r3, r7, r3
    4fdc:	881b      	ldrh	r3, [r3, #0]
    4fde:	b29a      	uxth	r2, r3
    4fe0:	4b04      	ldr	r3, [pc, #16]	; (4ff4 <RFM_sendACK+0xb0>)
    4fe2:	801a      	strh	r2, [r3, #0]
}
    4fe4:	46bd      	mov	sp, r7
    4fe6:	b005      	add	sp, #20
    4fe8:	bd90      	pop	{r4, r7, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	200001f2 	.word	0x200001f2
    4ff0:	200000de 	.word	0x200000de
    4ff4:	20000238 	.word	0x20000238
    4ff8:	000053e9 	.word	0x000053e9
    4ffc:	00005455 	.word	0x00005455
    5000:	000045cd 	.word	0x000045cd
    5004:	0000528d 	.word	0x0000528d
    5008:	00004d31 	.word	0x00004d31
    500c:	000045f5 	.word	0x000045f5
    5010:	000003e7 	.word	0x000003e7
    5014:	0000461d 	.word	0x0000461d

00005018 <interruptHandler>:

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    5018:	b580      	push	{r7, lr}
    501a:	b082      	sub	sp, #8
    501c:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    501e:	4b5b      	ldr	r3, [pc, #364]	; (518c <interruptHandler+0x174>)
    5020:	881b      	ldrh	r3, [r3, #0]
    5022:	b29b      	uxth	r3, r3
    5024:	2b03      	cmp	r3, #3
    5026:	d000      	beq.n	502a <interruptHandler+0x12>
    5028:	e0a7      	b.n	517a <interruptHandler+0x162>
    502a:	2028      	movs	r0, #40	; 0x28
    502c:	4b58      	ldr	r3, [pc, #352]	; (5190 <interruptHandler+0x178>)
    502e:	4798      	blx	r3
    5030:	1c03      	adds	r3, r0, #0
    5032:	1c1a      	adds	r2, r3, #0
    5034:	2304      	movs	r3, #4
    5036:	4013      	ands	r3, r2
    5038:	d100      	bne.n	503c <interruptHandler+0x24>
    503a:	e09e      	b.n	517a <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    503c:	2001      	movs	r0, #1
    503e:	4b55      	ldr	r3, [pc, #340]	; (5194 <interruptHandler+0x17c>)
    5040:	4798      	blx	r3
    select();
    5042:	4b55      	ldr	r3, [pc, #340]	; (5198 <interruptHandler+0x180>)
    5044:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    5046:	4a55      	ldr	r2, [pc, #340]	; (519c <interruptHandler+0x184>)
    5048:	4b55      	ldr	r3, [pc, #340]	; (51a0 <interruptHandler+0x188>)
    504a:	1c10      	adds	r0, r2, #0
    504c:	2100      	movs	r1, #0
    504e:	1c1a      	adds	r2, r3, #0
    5050:	4b54      	ldr	r3, [pc, #336]	; (51a4 <interruptHandler+0x18c>)
    5052:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    5054:	4a51      	ldr	r2, [pc, #324]	; (519c <interruptHandler+0x184>)
    5056:	4b54      	ldr	r3, [pc, #336]	; (51a8 <interruptHandler+0x190>)
    5058:	1c10      	adds	r0, r2, #0
    505a:	2100      	movs	r1, #0
    505c:	1c1a      	adds	r2, r3, #0
    505e:	4b51      	ldr	r3, [pc, #324]	; (51a4 <interruptHandler+0x18c>)
    5060:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    5062:	4b51      	ldr	r3, [pc, #324]	; (51a8 <interruptHandler+0x190>)
    5064:	881b      	ldrh	r3, [r3, #0]
    5066:	b29b      	uxth	r3, r3
    5068:	2b42      	cmp	r3, #66	; 0x42
    506a:	d803      	bhi.n	5074 <interruptHandler+0x5c>
    506c:	4b4e      	ldr	r3, [pc, #312]	; (51a8 <interruptHandler+0x190>)
    506e:	881b      	ldrh	r3, [r3, #0]
    5070:	b29a      	uxth	r2, r3
    5072:	e000      	b.n	5076 <interruptHandler+0x5e>
    5074:	2242      	movs	r2, #66	; 0x42
    5076:	4b4c      	ldr	r3, [pc, #304]	; (51a8 <interruptHandler+0x190>)
    5078:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    507a:	4a48      	ldr	r2, [pc, #288]	; (519c <interruptHandler+0x184>)
    507c:	4b4b      	ldr	r3, [pc, #300]	; (51ac <interruptHandler+0x194>)
    507e:	1c10      	adds	r0, r2, #0
    5080:	2100      	movs	r1, #0
    5082:	1c1a      	adds	r2, r3, #0
    5084:	4b47      	ldr	r3, [pc, #284]	; (51a4 <interruptHandler+0x18c>)
    5086:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    5088:	4b49      	ldr	r3, [pc, #292]	; (51b0 <interruptHandler+0x198>)
    508a:	781b      	ldrb	r3, [r3, #0]
    508c:	b2db      	uxtb	r3, r3
    508e:	2201      	movs	r2, #1
    5090:	4053      	eors	r3, r2
    5092:	b2db      	uxtb	r3, r3
    5094:	2b00      	cmp	r3, #0
    5096:	d00d      	beq.n	50b4 <interruptHandler+0x9c>
    5098:	4b46      	ldr	r3, [pc, #280]	; (51b4 <interruptHandler+0x19c>)
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	b2db      	uxtb	r3, r3
    509e:	b29a      	uxth	r2, r3
    50a0:	4b42      	ldr	r3, [pc, #264]	; (51ac <interruptHandler+0x194>)
    50a2:	881b      	ldrh	r3, [r3, #0]
    50a4:	b29b      	uxth	r3, r3
    50a6:	429a      	cmp	r2, r3
    50a8:	d004      	beq.n	50b4 <interruptHandler+0x9c>
    50aa:	4b40      	ldr	r3, [pc, #256]	; (51ac <interruptHandler+0x194>)
    50ac:	881b      	ldrh	r3, [r3, #0]
    50ae:	b29b      	uxth	r3, r3
    50b0:	2bff      	cmp	r3, #255	; 0xff
    50b2:	d104      	bne.n	50be <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    50b4:	4b3c      	ldr	r3, [pc, #240]	; (51a8 <interruptHandler+0x190>)
    50b6:	881b      	ldrh	r3, [r3, #0]
    50b8:	b29b      	uxth	r3, r3
    50ba:	2b02      	cmp	r3, #2
    50bc:	d807      	bhi.n	50ce <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    50be:	4b3a      	ldr	r3, [pc, #232]	; (51a8 <interruptHandler+0x190>)
    50c0:	2200      	movs	r2, #0
    50c2:	801a      	strh	r2, [r3, #0]
      unselect();
    50c4:	4b3c      	ldr	r3, [pc, #240]	; (51b8 <interruptHandler+0x1a0>)
    50c6:	4798      	blx	r3
      receiveBegin();
    50c8:	4b3c      	ldr	r3, [pc, #240]	; (51bc <interruptHandler+0x1a4>)
    50ca:	4798      	blx	r3
    50cc:	e05b      	b.n	5186 <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    50ce:	4b36      	ldr	r3, [pc, #216]	; (51a8 <interruptHandler+0x190>)
    50d0:	881b      	ldrh	r3, [r3, #0]
    50d2:	b29b      	uxth	r3, r3
    50d4:	3b03      	subs	r3, #3
    50d6:	b29a      	uxth	r2, r3
    50d8:	4b39      	ldr	r3, [pc, #228]	; (51c0 <interruptHandler+0x1a8>)
    50da:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    50dc:	4a2f      	ldr	r2, [pc, #188]	; (519c <interruptHandler+0x184>)
    50de:	4b39      	ldr	r3, [pc, #228]	; (51c4 <interruptHandler+0x1ac>)
    50e0:	1c10      	adds	r0, r2, #0
    50e2:	2100      	movs	r1, #0
    50e4:	1c1a      	adds	r2, r3, #0
    50e6:	4b2f      	ldr	r3, [pc, #188]	; (51a4 <interruptHandler+0x18c>)
    50e8:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    50ea:	1dbb      	adds	r3, r7, #6
    50ec:	2200      	movs	r2, #0
    50ee:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    50f0:	4a2a      	ldr	r2, [pc, #168]	; (519c <interruptHandler+0x184>)
    50f2:	1dbb      	adds	r3, r7, #6
    50f4:	1c10      	adds	r0, r2, #0
    50f6:	2100      	movs	r1, #0
    50f8:	1c1a      	adds	r2, r3, #0
    50fa:	4b2a      	ldr	r3, [pc, #168]	; (51a4 <interruptHandler+0x18c>)
    50fc:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    50fe:	1dbb      	adds	r3, r7, #6
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	b29b      	uxth	r3, r3
    5104:	2280      	movs	r2, #128	; 0x80
    5106:	4013      	ands	r3, r2
    5108:	b29a      	uxth	r2, r3
    510a:	4b2f      	ldr	r3, [pc, #188]	; (51c8 <interruptHandler+0x1b0>)
    510c:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    510e:	1dbb      	adds	r3, r7, #6
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	b29b      	uxth	r3, r3
    5114:	2240      	movs	r2, #64	; 0x40
    5116:	4013      	ands	r3, r2
    5118:	b29a      	uxth	r2, r3
    511a:	4b2c      	ldr	r3, [pc, #176]	; (51cc <interruptHandler+0x1b4>)
    511c:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    511e:	1dfb      	adds	r3, r7, #7
    5120:	2200      	movs	r2, #0
    5122:	701a      	strb	r2, [r3, #0]
    5124:	e00f      	b.n	5146 <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    5126:	1dfb      	adds	r3, r7, #7
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	005a      	lsls	r2, r3, #1
    512c:	4b28      	ldr	r3, [pc, #160]	; (51d0 <interruptHandler+0x1b8>)
    512e:	18d3      	adds	r3, r2, r3
    5130:	4a1a      	ldr	r2, [pc, #104]	; (519c <interruptHandler+0x184>)
    5132:	1c10      	adds	r0, r2, #0
    5134:	2100      	movs	r1, #0
    5136:	1c1a      	adds	r2, r3, #0
    5138:	4b1a      	ldr	r3, [pc, #104]	; (51a4 <interruptHandler+0x18c>)
    513a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    513c:	1dfb      	adds	r3, r7, #7
    513e:	781a      	ldrb	r2, [r3, #0]
    5140:	1dfb      	adds	r3, r7, #7
    5142:	3201      	adds	r2, #1
    5144:	701a      	strb	r2, [r3, #0]
    5146:	1dfb      	adds	r3, r7, #7
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	b29a      	uxth	r2, r3
    514c:	4b1c      	ldr	r3, [pc, #112]	; (51c0 <interruptHandler+0x1a8>)
    514e:	881b      	ldrh	r3, [r3, #0]
    5150:	b29b      	uxth	r3, r3
    5152:	429a      	cmp	r2, r3
    5154:	d3e7      	bcc.n	5126 <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    5156:	4b1a      	ldr	r3, [pc, #104]	; (51c0 <interruptHandler+0x1a8>)
    5158:	881b      	ldrh	r3, [r3, #0]
    515a:	b29b      	uxth	r3, r3
    515c:	2b3c      	cmp	r3, #60	; 0x3c
    515e:	d807      	bhi.n	5170 <interruptHandler+0x158>
    5160:	4b17      	ldr	r3, [pc, #92]	; (51c0 <interruptHandler+0x1a8>)
    5162:	881b      	ldrh	r3, [r3, #0]
    5164:	b29b      	uxth	r3, r3
    5166:	1c1a      	adds	r2, r3, #0
    5168:	4b19      	ldr	r3, [pc, #100]	; (51d0 <interruptHandler+0x1b8>)
    516a:	0052      	lsls	r2, r2, #1
    516c:	2100      	movs	r1, #0
    516e:	52d1      	strh	r1, [r2, r3]
    unselect();
    5170:	4b11      	ldr	r3, [pc, #68]	; (51b8 <interruptHandler+0x1a0>)
    5172:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    5174:	2003      	movs	r0, #3
    5176:	4b07      	ldr	r3, [pc, #28]	; (5194 <interruptHandler+0x17c>)
    5178:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    517a:	4b16      	ldr	r3, [pc, #88]	; (51d4 <interruptHandler+0x1bc>)
    517c:	4798      	blx	r3
    517e:	1c03      	adds	r3, r0, #0
    5180:	1c1a      	adds	r2, r3, #0
    5182:	4b15      	ldr	r3, [pc, #84]	; (51d8 <interruptHandler+0x1c0>)
    5184:	801a      	strh	r2, [r3, #0]
}
    5186:	46bd      	mov	sp, r7
    5188:	b002      	add	sp, #8
    518a:	bd80      	pop	{r7, pc}
    518c:	200001f6 	.word	0x200001f6
    5190:	000053e9 	.word	0x000053e9
    5194:	00004bd5 	.word	0x00004bd5
    5198:	000054b9 	.word	0x000054b9
    519c:	200001fc 	.word	0x200001fc
    51a0:	2000005c 	.word	0x2000005c
    51a4:	000025cd 	.word	0x000025cd
    51a8:	200001c4 	.word	0x200001c4
    51ac:	200001f4 	.word	0x200001f4
    51b0:	20000144 	.word	0x20000144
    51b4:	2000013c 	.word	0x2000013c
    51b8:	000054e5 	.word	0x000054e5
    51bc:	000051fd 	.word	0x000051fd
    51c0:	20000142 	.word	0x20000142
    51c4:	200000de 	.word	0x200000de
    51c8:	20000140 	.word	0x20000140
    51cc:	200001f2 	.word	0x200001f2
    51d0:	20000148 	.word	0x20000148
    51d4:	000053a5 	.word	0x000053a5
    51d8:	20000238 	.word	0x20000238

000051dc <isr0>:

// internal function
void isr0()
{ 
    51dc:	b580      	push	{r7, lr}
    51de:	af00      	add	r7, sp, #0
	_inISR = true; 
    51e0:	4b04      	ldr	r3, [pc, #16]	; (51f4 <isr0+0x18>)
    51e2:	2201      	movs	r2, #1
    51e4:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    51e6:	4b04      	ldr	r3, [pc, #16]	; (51f8 <isr0+0x1c>)
    51e8:	4798      	blx	r3
	_inISR = false;
    51ea:	4b02      	ldr	r3, [pc, #8]	; (51f4 <isr0+0x18>)
    51ec:	2200      	movs	r2, #0
    51ee:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    51f0:	46bd      	mov	sp, r7
    51f2:	bd80      	pop	{r7, pc}
    51f4:	200000f9 	.word	0x200000f9
    51f8:	00005019 	.word	0x00005019

000051fc <receiveBegin>:

// internal function
void receiveBegin() {
    51fc:	b580      	push	{r7, lr}
    51fe:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    5200:	4b18      	ldr	r3, [pc, #96]	; (5264 <receiveBegin+0x68>)
    5202:	2200      	movs	r2, #0
    5204:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    5206:	4b18      	ldr	r3, [pc, #96]	; (5268 <receiveBegin+0x6c>)
    5208:	2200      	movs	r2, #0
    520a:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    520c:	4b17      	ldr	r3, [pc, #92]	; (526c <receiveBegin+0x70>)
    520e:	2200      	movs	r2, #0
    5210:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    5212:	4b17      	ldr	r3, [pc, #92]	; (5270 <receiveBegin+0x74>)
    5214:	2200      	movs	r2, #0
    5216:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    5218:	4b16      	ldr	r3, [pc, #88]	; (5274 <receiveBegin+0x78>)
    521a:	2200      	movs	r2, #0
    521c:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    521e:	4b16      	ldr	r3, [pc, #88]	; (5278 <receiveBegin+0x7c>)
    5220:	2200      	movs	r2, #0
    5222:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    5224:	4b15      	ldr	r3, [pc, #84]	; (527c <receiveBegin+0x80>)
    5226:	2200      	movs	r2, #0
    5228:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    522a:	2028      	movs	r0, #40	; 0x28
    522c:	4b14      	ldr	r3, [pc, #80]	; (5280 <receiveBegin+0x84>)
    522e:	4798      	blx	r3
    5230:	1c03      	adds	r3, r0, #0
    5232:	1c1a      	adds	r2, r3, #0
    5234:	2304      	movs	r3, #4
    5236:	4013      	ands	r3, r2
    5238:	d00b      	beq.n	5252 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    523a:	203d      	movs	r0, #61	; 0x3d
    523c:	4b10      	ldr	r3, [pc, #64]	; (5280 <receiveBegin+0x84>)
    523e:	4798      	blx	r3
    5240:	1c03      	adds	r3, r0, #0
    5242:	1c1a      	adds	r2, r3, #0
    5244:	2304      	movs	r3, #4
    5246:	4313      	orrs	r3, r2
    5248:	b2db      	uxtb	r3, r3
    524a:	203d      	movs	r0, #61	; 0x3d
    524c:	1c19      	adds	r1, r3, #0
    524e:	4b0d      	ldr	r3, [pc, #52]	; (5284 <receiveBegin+0x88>)
    5250:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    5252:	2025      	movs	r0, #37	; 0x25
    5254:	2140      	movs	r1, #64	; 0x40
    5256:	4b0b      	ldr	r3, [pc, #44]	; (5284 <receiveBegin+0x88>)
    5258:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    525a:	2003      	movs	r0, #3
    525c:	4b0a      	ldr	r3, [pc, #40]	; (5288 <receiveBegin+0x8c>)
    525e:	4798      	blx	r3
}
    5260:	46bd      	mov	sp, r7
    5262:	bd80      	pop	{r7, pc}
    5264:	20000142 	.word	0x20000142
    5268:	200000de 	.word	0x200000de
    526c:	200001f4 	.word	0x200001f4
    5270:	200001c4 	.word	0x200001c4
    5274:	200001f2 	.word	0x200001f2
    5278:	20000140 	.word	0x20000140
    527c:	20000238 	.word	0x20000238
    5280:	000053e9 	.word	0x000053e9
    5284:	00005455 	.word	0x00005455
    5288:	00004bd5 	.word	0x00004bd5

0000528c <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    528c:	b580      	push	{r7, lr}
    528e:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    5290:	4b0f      	ldr	r3, [pc, #60]	; (52d0 <RFM_receiveDone+0x44>)
    5292:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    5294:	4b0f      	ldr	r3, [pc, #60]	; (52d4 <RFM_receiveDone+0x48>)
    5296:	881b      	ldrh	r3, [r3, #0]
    5298:	b29b      	uxth	r3, r3
    529a:	2b03      	cmp	r3, #3
    529c:	d109      	bne.n	52b2 <RFM_receiveDone+0x26>
    529e:	4b0e      	ldr	r3, [pc, #56]	; (52d8 <RFM_receiveDone+0x4c>)
    52a0:	881b      	ldrh	r3, [r3, #0]
    52a2:	b29b      	uxth	r3, r3
    52a4:	2b00      	cmp	r3, #0
    52a6:	d004      	beq.n	52b2 <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    52a8:	2001      	movs	r0, #1
    52aa:	4b0c      	ldr	r3, [pc, #48]	; (52dc <RFM_receiveDone+0x50>)
    52ac:	4798      	blx	r3
    return true;
    52ae:	2301      	movs	r3, #1
    52b0:	e00b      	b.n	52ca <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    52b2:	4b08      	ldr	r3, [pc, #32]	; (52d4 <RFM_receiveDone+0x48>)
    52b4:	881b      	ldrh	r3, [r3, #0]
    52b6:	b29b      	uxth	r3, r3
    52b8:	2b03      	cmp	r3, #3
    52ba:	d103      	bne.n	52c4 <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    52bc:	4b08      	ldr	r3, [pc, #32]	; (52e0 <RFM_receiveDone+0x54>)
    52be:	4798      	blx	r3
    return false;
    52c0:	2300      	movs	r3, #0
    52c2:	e002      	b.n	52ca <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    52c4:	4b07      	ldr	r3, [pc, #28]	; (52e4 <RFM_receiveDone+0x58>)
    52c6:	4798      	blx	r3
  return false;
    52c8:	2300      	movs	r3, #0
}
    52ca:	1c18      	adds	r0, r3, #0
    52cc:	46bd      	mov	sp, r7
    52ce:	bd80      	pop	{r7, pc}
    52d0:	000040c5 	.word	0x000040c5
    52d4:	200001f6 	.word	0x200001f6
    52d8:	200001c4 	.word	0x200001c4
    52dc:	00004bd5 	.word	0x00004bd5
    52e0:	000040ad 	.word	0x000040ad
    52e4:	000051fd 	.word	0x000051fd

000052e8 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    52e8:	b580      	push	{r7, lr}
    52ea:	b084      	sub	sp, #16
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    52f0:	2001      	movs	r0, #1
    52f2:	4b24      	ldr	r3, [pc, #144]	; (5384 <RFM_encrypt+0x9c>)
    52f4:	4798      	blx	r3
  if (key != 0)
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	2b00      	cmp	r3, #0
    52fa:	d029      	beq.n	5350 <RFM_encrypt+0x68>
  {
    select();
    52fc:	4b22      	ldr	r3, [pc, #136]	; (5388 <RFM_encrypt+0xa0>)
    52fe:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    5300:	4a22      	ldr	r2, [pc, #136]	; (538c <RFM_encrypt+0xa4>)
    5302:	4b23      	ldr	r3, [pc, #140]	; (5390 <RFM_encrypt+0xa8>)
    5304:	1c10      	adds	r0, r2, #0
    5306:	21be      	movs	r1, #190	; 0xbe
    5308:	1c1a      	adds	r2, r3, #0
    530a:	4b22      	ldr	r3, [pc, #136]	; (5394 <RFM_encrypt+0xac>)
    530c:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    530e:	230f      	movs	r3, #15
    5310:	18fb      	adds	r3, r7, r3
    5312:	2200      	movs	r2, #0
    5314:	701a      	strb	r2, [r3, #0]
    5316:	e014      	b.n	5342 <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    5318:	230f      	movs	r3, #15
    531a:	18fb      	adds	r3, r7, r3
    531c:	781b      	ldrb	r3, [r3, #0]
    531e:	687a      	ldr	r2, [r7, #4]
    5320:	18d3      	adds	r3, r2, r3
    5322:	781b      	ldrb	r3, [r3, #0]
    5324:	b29a      	uxth	r2, r3
    5326:	4919      	ldr	r1, [pc, #100]	; (538c <RFM_encrypt+0xa4>)
    5328:	4b19      	ldr	r3, [pc, #100]	; (5390 <RFM_encrypt+0xa8>)
    532a:	1c08      	adds	r0, r1, #0
    532c:	1c11      	adds	r1, r2, #0
    532e:	1c1a      	adds	r2, r3, #0
    5330:	4b18      	ldr	r3, [pc, #96]	; (5394 <RFM_encrypt+0xac>)
    5332:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    select();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    5334:	230f      	movs	r3, #15
    5336:	18fb      	adds	r3, r7, r3
    5338:	781a      	ldrb	r2, [r3, #0]
    533a:	230f      	movs	r3, #15
    533c:	18fb      	adds	r3, r7, r3
    533e:	3201      	adds	r2, #1
    5340:	701a      	strb	r2, [r3, #0]
    5342:	230f      	movs	r3, #15
    5344:	18fb      	adds	r3, r7, r3
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	2b0f      	cmp	r3, #15
    534a:	d9e5      	bls.n	5318 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    534c:	4b12      	ldr	r3, [pc, #72]	; (5398 <RFM_encrypt+0xb0>)
    534e:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    5350:	203d      	movs	r0, #61	; 0x3d
    5352:	4b12      	ldr	r3, [pc, #72]	; (539c <RFM_encrypt+0xb4>)
    5354:	4798      	blx	r3
    5356:	1c03      	adds	r3, r0, #0
    5358:	b2db      	uxtb	r3, r3
    535a:	1c1a      	adds	r2, r3, #0
    535c:	2301      	movs	r3, #1
    535e:	439a      	bics	r2, r3
    5360:	1c13      	adds	r3, r2, #0
    5362:	b2da      	uxtb	r2, r3
    5364:	687b      	ldr	r3, [r7, #4]
    5366:	1e59      	subs	r1, r3, #1
    5368:	418b      	sbcs	r3, r1
    536a:	b2db      	uxtb	r3, r3
    536c:	b2db      	uxtb	r3, r3
    536e:	4313      	orrs	r3, r2
    5370:	b2db      	uxtb	r3, r3
    5372:	b2db      	uxtb	r3, r3
    5374:	203d      	movs	r0, #61	; 0x3d
    5376:	1c19      	adds	r1, r3, #0
    5378:	4b09      	ldr	r3, [pc, #36]	; (53a0 <RFM_encrypt+0xb8>)
    537a:	4798      	blx	r3
}
    537c:	46bd      	mov	sp, r7
    537e:	b004      	add	sp, #16
    5380:	bd80      	pop	{r7, pc}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	00004bd5 	.word	0x00004bd5
    5388:	000054b9 	.word	0x000054b9
    538c:	200001fc 	.word	0x200001fc
    5390:	2000005c 	.word	0x2000005c
    5394:	000025cd 	.word	0x000025cd
    5398:	000054e5 	.word	0x000054e5
    539c:	000053e9 	.word	0x000053e9
    53a0:	00005455 	.word	0x00005455

000053a4 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    53a4:	b580      	push	{r7, lr}
    53a6:	b082      	sub	sp, #8
    53a8:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    53aa:	1dbb      	adds	r3, r7, #6
    53ac:	2200      	movs	r2, #0
    53ae:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    53b0:	2024      	movs	r0, #36	; 0x24
    53b2:	4b0c      	ldr	r3, [pc, #48]	; (53e4 <readRSSI+0x40>)
    53b4:	4798      	blx	r3
    53b6:	1c03      	adds	r3, r0, #0
    53b8:	b29b      	uxth	r3, r3
    53ba:	425b      	negs	r3, r3
    53bc:	b29b      	uxth	r3, r3
    53be:	b29a      	uxth	r2, r3
    53c0:	1dbb      	adds	r3, r7, #6
    53c2:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    53c4:	1dbb      	adds	r3, r7, #6
    53c6:	881b      	ldrh	r3, [r3, #0]
    53c8:	b29b      	uxth	r3, r3
    53ca:	b21b      	sxth	r3, r3
    53cc:	105b      	asrs	r3, r3, #1
    53ce:	b29a      	uxth	r2, r3
    53d0:	1dbb      	adds	r3, r7, #6
    53d2:	801a      	strh	r2, [r3, #0]
  return rssi;
    53d4:	1dbb      	adds	r3, r7, #6
    53d6:	881b      	ldrh	r3, [r3, #0]
    53d8:	b29b      	uxth	r3, r3
    53da:	b21b      	sxth	r3, r3
}
    53dc:	1c18      	adds	r0, r3, #0
    53de:	46bd      	mov	sp, r7
    53e0:	b002      	add	sp, #8
    53e2:	bd80      	pop	{r7, pc}
    53e4:	000053e9 	.word	0x000053e9

000053e8 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	b084      	sub	sp, #16
    53ec:	af00      	add	r7, sp, #0
    53ee:	1c02      	adds	r2, r0, #0
    53f0:	1dbb      	adds	r3, r7, #6
    53f2:	801a      	strh	r2, [r3, #0]
  select();
    53f4:	4b12      	ldr	r3, [pc, #72]	; (5440 <readReg+0x58>)
    53f6:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    53f8:	1dbb      	adds	r3, r7, #6
    53fa:	881b      	ldrh	r3, [r3, #0]
    53fc:	b29b      	uxth	r3, r3
    53fe:	227f      	movs	r2, #127	; 0x7f
    5400:	4013      	ands	r3, r2
    5402:	b29a      	uxth	r2, r3
    5404:	490f      	ldr	r1, [pc, #60]	; (5444 <readReg+0x5c>)
    5406:	4b10      	ldr	r3, [pc, #64]	; (5448 <readReg+0x60>)
    5408:	1c08      	adds	r0, r1, #0
    540a:	1c11      	adds	r1, r2, #0
    540c:	1c1a      	adds	r2, r3, #0
    540e:	4b0f      	ldr	r3, [pc, #60]	; (544c <readReg+0x64>)
    5410:	4798      	blx	r3
  volatile uint16_t regval = 0;
    5412:	230e      	movs	r3, #14
    5414:	18fb      	adds	r3, r7, r3
    5416:	2200      	movs	r2, #0
    5418:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    541a:	4a0a      	ldr	r2, [pc, #40]	; (5444 <readReg+0x5c>)
    541c:	230e      	movs	r3, #14
    541e:	18fb      	adds	r3, r7, r3
    5420:	1c10      	adds	r0, r2, #0
    5422:	2100      	movs	r1, #0
    5424:	1c1a      	adds	r2, r3, #0
    5426:	4b09      	ldr	r3, [pc, #36]	; (544c <readReg+0x64>)
    5428:	4798      	blx	r3
  unselect();
    542a:	4b09      	ldr	r3, [pc, #36]	; (5450 <readReg+0x68>)
    542c:	4798      	blx	r3
  return (uint8_t)regval;
    542e:	230e      	movs	r3, #14
    5430:	18fb      	adds	r3, r7, r3
    5432:	881b      	ldrh	r3, [r3, #0]
    5434:	b29b      	uxth	r3, r3
    5436:	b2db      	uxtb	r3, r3
}
    5438:	1c18      	adds	r0, r3, #0
    543a:	46bd      	mov	sp, r7
    543c:	b004      	add	sp, #16
    543e:	bd80      	pop	{r7, pc}
    5440:	000054b9 	.word	0x000054b9
    5444:	200001fc 	.word	0x200001fc
    5448:	2000005c 	.word	0x2000005c
    544c:	000025cd 	.word	0x000025cd
    5450:	000054e5 	.word	0x000054e5

00005454 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    5454:	b580      	push	{r7, lr}
    5456:	b082      	sub	sp, #8
    5458:	af00      	add	r7, sp, #0
    545a:	1c02      	adds	r2, r0, #0
    545c:	1dfb      	adds	r3, r7, #7
    545e:	701a      	strb	r2, [r3, #0]
    5460:	1dbb      	adds	r3, r7, #6
    5462:	1c0a      	adds	r2, r1, #0
    5464:	701a      	strb	r2, [r3, #0]
  select();
    5466:	4b0f      	ldr	r3, [pc, #60]	; (54a4 <writeReg+0x50>)
    5468:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    546a:	1dfb      	adds	r3, r7, #7
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	2280      	movs	r2, #128	; 0x80
    5470:	4252      	negs	r2, r2
    5472:	4313      	orrs	r3, r2
    5474:	b2db      	uxtb	r3, r3
    5476:	b29a      	uxth	r2, r3
    5478:	490b      	ldr	r1, [pc, #44]	; (54a8 <writeReg+0x54>)
    547a:	4b0c      	ldr	r3, [pc, #48]	; (54ac <writeReg+0x58>)
    547c:	1c08      	adds	r0, r1, #0
    547e:	1c11      	adds	r1, r2, #0
    5480:	1c1a      	adds	r2, r3, #0
    5482:	4b0b      	ldr	r3, [pc, #44]	; (54b0 <writeReg+0x5c>)
    5484:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    5486:	1dbb      	adds	r3, r7, #6
    5488:	781b      	ldrb	r3, [r3, #0]
    548a:	b29a      	uxth	r2, r3
    548c:	4906      	ldr	r1, [pc, #24]	; (54a8 <writeReg+0x54>)
    548e:	4b07      	ldr	r3, [pc, #28]	; (54ac <writeReg+0x58>)
    5490:	1c08      	adds	r0, r1, #0
    5492:	1c11      	adds	r1, r2, #0
    5494:	1c1a      	adds	r2, r3, #0
    5496:	4b06      	ldr	r3, [pc, #24]	; (54b0 <writeReg+0x5c>)
    5498:	4798      	blx	r3
  unselect();
    549a:	4b06      	ldr	r3, [pc, #24]	; (54b4 <writeReg+0x60>)
    549c:	4798      	blx	r3
}
    549e:	46bd      	mov	sp, r7
    54a0:	b002      	add	sp, #8
    54a2:	bd80      	pop	{r7, pc}
    54a4:	000054b9 	.word	0x000054b9
    54a8:	200001fc 	.word	0x200001fc
    54ac:	2000005c 	.word	0x2000005c
    54b0:	000025cd 	.word	0x000025cd
    54b4:	000054e5 	.word	0x000054e5

000054b8 <select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void select() {
    54b8:	b580      	push	{r7, lr}
    54ba:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    54bc:	4b05      	ldr	r3, [pc, #20]	; (54d4 <select+0x1c>)
    54be:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    54c0:	4a05      	ldr	r2, [pc, #20]	; (54d8 <select+0x20>)
    54c2:	4b06      	ldr	r3, [pc, #24]	; (54dc <select+0x24>)
    54c4:	1c10      	adds	r0, r2, #0
    54c6:	1c19      	adds	r1, r3, #0
    54c8:	2201      	movs	r2, #1
    54ca:	4b05      	ldr	r3, [pc, #20]	; (54e0 <select+0x28>)
    54cc:	4798      	blx	r3
}
    54ce:	46bd      	mov	sp, r7
    54d0:	bd80      	pop	{r7, pc}
    54d2:	46c0      	nop			; (mov r8, r8)
    54d4:	000040c5 	.word	0x000040c5
    54d8:	200001fc 	.word	0x200001fc
    54dc:	2000023c 	.word	0x2000023c
    54e0:	00002715 	.word	0x00002715

000054e4 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    54e4:	b580      	push	{r7, lr}
    54e6:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    54e8:	4a05      	ldr	r2, [pc, #20]	; (5500 <unselect+0x1c>)
    54ea:	4b06      	ldr	r3, [pc, #24]	; (5504 <unselect+0x20>)
    54ec:	1c10      	adds	r0, r2, #0
    54ee:	1c19      	adds	r1, r3, #0
    54f0:	2200      	movs	r2, #0
    54f2:	4b05      	ldr	r3, [pc, #20]	; (5508 <unselect+0x24>)
    54f4:	4798      	blx	r3
  maybeInterrupts();
    54f6:	4b05      	ldr	r3, [pc, #20]	; (550c <unselect+0x28>)
    54f8:	4798      	blx	r3
}
    54fa:	46bd      	mov	sp, r7
    54fc:	bd80      	pop	{r7, pc}
    54fe:	46c0      	nop			; (mov r8, r8)
    5500:	200001fc 	.word	0x200001fc
    5504:	2000023c 	.word	0x2000023c
    5508:	00002715 	.word	0x00002715
    550c:	00005555 	.word	0x00005555

00005510 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    5510:	b580      	push	{r7, lr}
    5512:	b082      	sub	sp, #8
    5514:	af00      	add	r7, sp, #0
    5516:	1c02      	adds	r2, r0, #0
    5518:	1dfb      	adds	r3, r7, #7
    551a:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    551c:	1dfb      	adds	r3, r7, #7
    551e:	781b      	ldrb	r3, [r3, #0]
    5520:	2b00      	cmp	r3, #0
    5522:	d001      	beq.n	5528 <setHighPowerRegs+0x18>
    5524:	235d      	movs	r3, #93	; 0x5d
    5526:	e000      	b.n	552a <setHighPowerRegs+0x1a>
    5528:	2355      	movs	r3, #85	; 0x55
    552a:	205a      	movs	r0, #90	; 0x5a
    552c:	1c19      	adds	r1, r3, #0
    552e:	4b08      	ldr	r3, [pc, #32]	; (5550 <setHighPowerRegs+0x40>)
    5530:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    5532:	1dfb      	adds	r3, r7, #7
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	2b00      	cmp	r3, #0
    5538:	d001      	beq.n	553e <setHighPowerRegs+0x2e>
    553a:	237c      	movs	r3, #124	; 0x7c
    553c:	e000      	b.n	5540 <setHighPowerRegs+0x30>
    553e:	2370      	movs	r3, #112	; 0x70
    5540:	205c      	movs	r0, #92	; 0x5c
    5542:	1c19      	adds	r1, r3, #0
    5544:	4b02      	ldr	r3, [pc, #8]	; (5550 <setHighPowerRegs+0x40>)
    5546:	4798      	blx	r3
}
    5548:	46bd      	mov	sp, r7
    554a:	b002      	add	sp, #8
    554c:	bd80      	pop	{r7, pc}
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	00005455 	.word	0x00005455

00005554 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    5554:	b580      	push	{r7, lr}
    5556:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    5558:	4b05      	ldr	r3, [pc, #20]	; (5570 <maybeInterrupts+0x1c>)
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	b2db      	uxtb	r3, r3
    555e:	2201      	movs	r2, #1
    5560:	4053      	eors	r3, r2
    5562:	b2db      	uxtb	r3, r3
    5564:	2b00      	cmp	r3, #0
    5566:	d001      	beq.n	556c <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    5568:	4b02      	ldr	r3, [pc, #8]	; (5574 <maybeInterrupts+0x20>)
    556a:	4798      	blx	r3
}
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}
    5570:	200000f9 	.word	0x200000f9
    5574:	000040ad 	.word	0x000040ad

00005578 <configure_i2c_master>:
struct i2c_master_module i2c_master_instance;
void configure_i2c_master(void);


void configure_i2c_master(void)
{
    5578:	b580      	push	{r7, lr}
    557a:	b08e      	sub	sp, #56	; 0x38
    557c:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    557e:	1d3b      	adds	r3, r7, #4
    5580:	1c18      	adds	r0, r3, #0
    5582:	4b09      	ldr	r3, [pc, #36]	; (55a8 <configure_i2c_master+0x30>)
    5584:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    5586:	1d3b      	adds	r3, r7, #4
    5588:	4a08      	ldr	r2, [pc, #32]	; (55ac <configure_i2c_master+0x34>)
    558a:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    558c:	4a08      	ldr	r2, [pc, #32]	; (55b0 <configure_i2c_master+0x38>)
    558e:	4909      	ldr	r1, [pc, #36]	; (55b4 <configure_i2c_master+0x3c>)
    5590:	1d3b      	adds	r3, r7, #4
    5592:	1c10      	adds	r0, r2, #0
    5594:	1c1a      	adds	r2, r3, #0
    5596:	4b08      	ldr	r3, [pc, #32]	; (55b8 <configure_i2c_master+0x40>)
    5598:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    559a:	4b05      	ldr	r3, [pc, #20]	; (55b0 <configure_i2c_master+0x38>)
    559c:	1c18      	adds	r0, r3, #0
    559e:	4b07      	ldr	r3, [pc, #28]	; (55bc <configure_i2c_master+0x44>)
    55a0:	4798      	blx	r3
}
    55a2:	46bd      	mov	sp, r7
    55a4:	b00e      	add	sp, #56	; 0x38
    55a6:	bd80      	pop	{r7, pc}
    55a8:	000041a9 	.word	0x000041a9
    55ac:	00002710 	.word	0x00002710
    55b0:	200001c8 	.word	0x200001c8
    55b4:	42001000 	.word	0x42001000
    55b8:	000011e9 	.word	0x000011e9
    55bc:	00004229 	.word	0x00004229

000055c0 <lipo_begin>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Initializes I2C and verifies communication with the BQ27441.
bool lipo_begin(void)
{
    55c0:	b590      	push	{r4, r7, lr}
    55c2:	b083      	sub	sp, #12
    55c4:	af00      	add	r7, sp, #0
	uint16_t deviceID = 0;
    55c6:	1dbb      	adds	r3, r7, #6
    55c8:	2200      	movs	r2, #0
    55ca:	801a      	strh	r2, [r3, #0]
	
	_userConfigControl = false;
    55cc:	4b0d      	ldr	r3, [pc, #52]	; (5604 <lipo_begin+0x44>)
    55ce:	2200      	movs	r2, #0
    55d0:	701a      	strb	r2, [r3, #0]
	_sealFlag = false;
    55d2:	4b0d      	ldr	r3, [pc, #52]	; (5608 <lipo_begin+0x48>)
    55d4:	2200      	movs	r2, #0
    55d6:	701a      	strb	r2, [r3, #0]
	_deviceAddress = BQ72441_I2C_ADDRESS;
    55d8:	4b0c      	ldr	r3, [pc, #48]	; (560c <lipo_begin+0x4c>)
    55da:	2255      	movs	r2, #85	; 0x55
    55dc:	701a      	strb	r2, [r3, #0]
	configure_i2c_master(); // Initialize I2C master
    55de:	4b0c      	ldr	r3, [pc, #48]	; (5610 <lipo_begin+0x50>)
    55e0:	4798      	blx	r3
	
	deviceID = deviceType(); // Read deviceType from BQ27441
    55e2:	1dbc      	adds	r4, r7, #6
    55e4:	4b0b      	ldr	r3, [pc, #44]	; (5614 <lipo_begin+0x54>)
    55e6:	4798      	blx	r3
    55e8:	1c03      	adds	r3, r0, #0
    55ea:	8023      	strh	r3, [r4, #0]
	
	if (deviceID == BQ27441_DEVICE_ID)
    55ec:	1dbb      	adds	r3, r7, #6
    55ee:	881b      	ldrh	r3, [r3, #0]
    55f0:	4a09      	ldr	r2, [pc, #36]	; (5618 <lipo_begin+0x58>)
    55f2:	4293      	cmp	r3, r2
    55f4:	d101      	bne.n	55fa <lipo_begin+0x3a>
	{
		return true; // If device ID is valid, return true
    55f6:	2301      	movs	r3, #1
    55f8:	e000      	b.n	55fc <lipo_begin+0x3c>
	}
	
	return false; // Otherwise return false
    55fa:	2300      	movs	r3, #0
}
    55fc:	1c18      	adds	r0, r3, #0
    55fe:	46bd      	mov	sp, r7
    5600:	b003      	add	sp, #12
    5602:	bd90      	pop	{r4, r7, pc}
    5604:	2000013e 	.word	0x2000013e
    5608:	200001f0 	.word	0x200001f0
    560c:	2000013d 	.word	0x2000013d
    5610:	00005579 	.word	0x00005579
    5614:	00005889 	.word	0x00005889
    5618:	00000421 	.word	0x00000421

0000561c <lipo_setCapacity>:

// Configures the design capacity of the connected battery.
bool lipo_setCapacity(uint16_t capacity)
{
    561c:	b590      	push	{r4, r7, lr}
    561e:	b085      	sub	sp, #20
    5620:	af00      	add	r7, sp, #0
    5622:	1c02      	adds	r2, r0, #0
    5624:	1dbb      	adds	r3, r7, #6
    5626:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	uint8_t capMSB = capacity >> 8;
    5628:	1dbb      	adds	r3, r7, #6
    562a:	881b      	ldrh	r3, [r3, #0]
    562c:	0a1b      	lsrs	r3, r3, #8
    562e:	b29a      	uxth	r2, r3
    5630:	230f      	movs	r3, #15
    5632:	18fb      	adds	r3, r7, r3
    5634:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
    5636:	230e      	movs	r3, #14
    5638:	18fb      	adds	r3, r7, r3
    563a:	1dba      	adds	r2, r7, #6
    563c:	8812      	ldrh	r2, [r2, #0]
    563e:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capMSB, capLSB};
    5640:	230c      	movs	r3, #12
    5642:	18fb      	adds	r3, r7, r3
    5644:	220f      	movs	r2, #15
    5646:	18ba      	adds	r2, r7, r2
    5648:	7812      	ldrb	r2, [r2, #0]
    564a:	701a      	strb	r2, [r3, #0]
    564c:	230c      	movs	r3, #12
    564e:	18fb      	adds	r3, r7, r3
    5650:	220e      	movs	r2, #14
    5652:	18ba      	adds	r2, r7, r2
    5654:	7812      	ldrb	r2, [r2, #0]
    5656:	705a      	strb	r2, [r3, #1]
	return writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
    5658:	230c      	movs	r3, #12
    565a:	18fb      	adds	r3, r7, r3
    565c:	2052      	movs	r0, #82	; 0x52
    565e:	210a      	movs	r1, #10
    5660:	1c1a      	adds	r2, r3, #0
    5662:	2302      	movs	r3, #2
    5664:	4c03      	ldr	r4, [pc, #12]	; (5674 <lipo_setCapacity+0x58>)
    5666:	47a0      	blx	r4
    5668:	1c03      	adds	r3, r0, #0
}
    566a:	1c18      	adds	r0, r3, #0
    566c:	46bd      	mov	sp, r7
    566e:	b005      	add	sp, #20
    5670:	bd90      	pop	{r4, r7, pc}
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	00005d8d 	.word	0x00005d8d

00005678 <lipo_voltage>:
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/

// Reads and returns the battery voltage
uint16_t lipo_voltage(void)
{
    5678:	b580      	push	{r7, lr}
    567a:	af00      	add	r7, sp, #0
	return readWord(BQ27441_COMMAND_VOLTAGE);
    567c:	2004      	movs	r0, #4
    567e:	4b03      	ldr	r3, [pc, #12]	; (568c <lipo_voltage+0x14>)
    5680:	4798      	blx	r3
    5682:	1c03      	adds	r3, r0, #0
}
    5684:	1c18      	adds	r0, r3, #0
    5686:	46bd      	mov	sp, r7
    5688:	bd80      	pop	{r7, pc}
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	00005ac5 	.word	0x00005ac5

00005690 <lipo_current>:

// Reads and returns the specified current measurement
int16_t lipo_current(current_measure type)
{
    5690:	b580      	push	{r7, lr}
    5692:	b084      	sub	sp, #16
    5694:	af00      	add	r7, sp, #0
    5696:	1c02      	adds	r2, r0, #0
    5698:	1dfb      	adds	r3, r7, #7
    569a:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
    569c:	230e      	movs	r3, #14
    569e:	18fb      	adds	r3, r7, r3
    56a0:	2200      	movs	r2, #0
    56a2:	801a      	strh	r2, [r3, #0]
	switch (type)
    56a4:	1dfb      	adds	r3, r7, #7
    56a6:	781b      	ldrb	r3, [r3, #0]
    56a8:	2b01      	cmp	r3, #1
    56aa:	d00c      	beq.n	56c6 <lipo_current+0x36>
    56ac:	2b02      	cmp	r3, #2
    56ae:	d013      	beq.n	56d8 <lipo_current+0x48>
    56b0:	2b00      	cmp	r3, #0
    56b2:	d11a      	bne.n	56ea <lipo_current+0x5a>
	{
	case AVG:
		current = (int16_t) readWord(BQ27441_COMMAND_AVG_CURRENT);
    56b4:	2010      	movs	r0, #16
    56b6:	4b11      	ldr	r3, [pc, #68]	; (56fc <lipo_current+0x6c>)
    56b8:	4798      	blx	r3
    56ba:	1c03      	adds	r3, r0, #0
    56bc:	1c1a      	adds	r2, r3, #0
    56be:	230e      	movs	r3, #14
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	801a      	strh	r2, [r3, #0]
		break;
    56c4:	e011      	b.n	56ea <lipo_current+0x5a>
	case STBY:
		current = (int16_t) readWord(BQ27441_COMMAND_STDBY_CURRENT);
    56c6:	2012      	movs	r0, #18
    56c8:	4b0c      	ldr	r3, [pc, #48]	; (56fc <lipo_current+0x6c>)
    56ca:	4798      	blx	r3
    56cc:	1c03      	adds	r3, r0, #0
    56ce:	1c1a      	adds	r2, r3, #0
    56d0:	230e      	movs	r3, #14
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	801a      	strh	r2, [r3, #0]
		break;
    56d6:	e008      	b.n	56ea <lipo_current+0x5a>
	case MAX:
		current = (int16_t) readWord(BQ27441_COMMAND_MAX_CURRENT);
    56d8:	2014      	movs	r0, #20
    56da:	4b08      	ldr	r3, [pc, #32]	; (56fc <lipo_current+0x6c>)
    56dc:	4798      	blx	r3
    56de:	1c03      	adds	r3, r0, #0
    56e0:	1c1a      	adds	r2, r3, #0
    56e2:	230e      	movs	r3, #14
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	801a      	strh	r2, [r3, #0]
		break;
    56e8:	46c0      	nop			; (mov r8, r8)
	}
	
	return current;
    56ea:	230e      	movs	r3, #14
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	881b      	ldrh	r3, [r3, #0]
    56f0:	b21b      	sxth	r3, r3
}
    56f2:	1c18      	adds	r0, r3, #0
    56f4:	46bd      	mov	sp, r7
    56f6:	b004      	add	sp, #16
    56f8:	bd80      	pop	{r7, pc}
    56fa:	46c0      	nop			; (mov r8, r8)
    56fc:	00005ac5 	.word	0x00005ac5

00005700 <lipo_capacity>:

// Reads and returns the specified capacity measurement
uint16_t lipo_capacity(capacity_measure type)
{
    5700:	b590      	push	{r4, r7, lr}
    5702:	b085      	sub	sp, #20
    5704:	af00      	add	r7, sp, #0
    5706:	1c02      	adds	r2, r0, #0
    5708:	1dfb      	adds	r3, r7, #7
    570a:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
    570c:	230e      	movs	r3, #14
    570e:	18fb      	adds	r3, r7, r3
    5710:	2200      	movs	r2, #0
    5712:	801a      	strh	r2, [r3, #0]
	switch (type)
    5714:	1dfb      	adds	r3, r7, #7
    5716:	781b      	ldrb	r3, [r3, #0]
    5718:	2b08      	cmp	r3, #8
    571a:	d845      	bhi.n	57a8 <lipo_capacity+0xa8>
    571c:	009a      	lsls	r2, r3, #2
    571e:	4b26      	ldr	r3, [pc, #152]	; (57b8 <lipo_capacity+0xb8>)
    5720:	18d3      	adds	r3, r2, r3
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	469f      	mov	pc, r3
	{
	case REMAIN:
		return readWord(BQ27441_COMMAND_REM_CAPACITY);
    5726:	200c      	movs	r0, #12
    5728:	4b24      	ldr	r3, [pc, #144]	; (57bc <lipo_capacity+0xbc>)
    572a:	4798      	blx	r3
    572c:	1c03      	adds	r3, r0, #0
    572e:	e03e      	b.n	57ae <lipo_capacity+0xae>
		break;
	case FULL:
		return readWord(BQ27441_COMMAND_FULL_CAPACITY);
    5730:	200e      	movs	r0, #14
    5732:	4b22      	ldr	r3, [pc, #136]	; (57bc <lipo_capacity+0xbc>)
    5734:	4798      	blx	r3
    5736:	1c03      	adds	r3, r0, #0
    5738:	e039      	b.n	57ae <lipo_capacity+0xae>
		break;
	case AVAIL:
		capacity = readWord(BQ27441_COMMAND_NOM_CAPACITY);
    573a:	230e      	movs	r3, #14
    573c:	18fc      	adds	r4, r7, r3
    573e:	2008      	movs	r0, #8
    5740:	4b1e      	ldr	r3, [pc, #120]	; (57bc <lipo_capacity+0xbc>)
    5742:	4798      	blx	r3
    5744:	1c03      	adds	r3, r0, #0
    5746:	8023      	strh	r3, [r4, #0]
		break;
    5748:	e02e      	b.n	57a8 <lipo_capacity+0xa8>
	case AVAIL_FULL:
		capacity = readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
    574a:	230e      	movs	r3, #14
    574c:	18fc      	adds	r4, r7, r3
    574e:	200a      	movs	r0, #10
    5750:	4b1a      	ldr	r3, [pc, #104]	; (57bc <lipo_capacity+0xbc>)
    5752:	4798      	blx	r3
    5754:	1c03      	adds	r3, r0, #0
    5756:	8023      	strh	r3, [r4, #0]
		break;
    5758:	e026      	b.n	57a8 <lipo_capacity+0xa8>
	case REMAIN_F: 
		capacity = readWord(BQ27441_COMMAND_REM_CAP_FIL);
    575a:	230e      	movs	r3, #14
    575c:	18fc      	adds	r4, r7, r3
    575e:	202a      	movs	r0, #42	; 0x2a
    5760:	4b16      	ldr	r3, [pc, #88]	; (57bc <lipo_capacity+0xbc>)
    5762:	4798      	blx	r3
    5764:	1c03      	adds	r3, r0, #0
    5766:	8023      	strh	r3, [r4, #0]
		break;
    5768:	e01e      	b.n	57a8 <lipo_capacity+0xa8>
	case REMAIN_UF:
		capacity = readWord(BQ27441_COMMAND_REM_CAP_UNFL);
    576a:	230e      	movs	r3, #14
    576c:	18fc      	adds	r4, r7, r3
    576e:	2028      	movs	r0, #40	; 0x28
    5770:	4b12      	ldr	r3, [pc, #72]	; (57bc <lipo_capacity+0xbc>)
    5772:	4798      	blx	r3
    5774:	1c03      	adds	r3, r0, #0
    5776:	8023      	strh	r3, [r4, #0]
		break;
    5778:	e016      	b.n	57a8 <lipo_capacity+0xa8>
	case FULL_F:
		capacity = readWord(BQ27441_COMMAND_FULL_CAP_FIL);
    577a:	230e      	movs	r3, #14
    577c:	18fc      	adds	r4, r7, r3
    577e:	202e      	movs	r0, #46	; 0x2e
    5780:	4b0e      	ldr	r3, [pc, #56]	; (57bc <lipo_capacity+0xbc>)
    5782:	4798      	blx	r3
    5784:	1c03      	adds	r3, r0, #0
    5786:	8023      	strh	r3, [r4, #0]
		break;
    5788:	e00e      	b.n	57a8 <lipo_capacity+0xa8>
	case FULL_UF:
		capacity = readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
    578a:	230e      	movs	r3, #14
    578c:	18fc      	adds	r4, r7, r3
    578e:	202c      	movs	r0, #44	; 0x2c
    5790:	4b0a      	ldr	r3, [pc, #40]	; (57bc <lipo_capacity+0xbc>)
    5792:	4798      	blx	r3
    5794:	1c03      	adds	r3, r0, #0
    5796:	8023      	strh	r3, [r4, #0]
		break;
    5798:	e006      	b.n	57a8 <lipo_capacity+0xa8>
	case DESIGN:
		capacity = readWord(BQ27441_EXTENDED_CAPACITY);
    579a:	230e      	movs	r3, #14
    579c:	18fc      	adds	r4, r7, r3
    579e:	203c      	movs	r0, #60	; 0x3c
    57a0:	4b06      	ldr	r3, [pc, #24]	; (57bc <lipo_capacity+0xbc>)
    57a2:	4798      	blx	r3
    57a4:	1c03      	adds	r3, r0, #0
    57a6:	8023      	strh	r3, [r4, #0]
	}
	
	return capacity;
    57a8:	230e      	movs	r3, #14
    57aa:	18fb      	adds	r3, r7, r3
    57ac:	881b      	ldrh	r3, [r3, #0]
}
    57ae:	1c18      	adds	r0, r3, #0
    57b0:	46bd      	mov	sp, r7
    57b2:	b005      	add	sp, #20
    57b4:	bd90      	pop	{r4, r7, pc}
    57b6:	46c0      	nop			; (mov r8, r8)
    57b8:	0000802c 	.word	0x0000802c
    57bc:	00005ac5 	.word	0x00005ac5

000057c0 <lipo_power>:

// Reads and returns measured average power
int16_t lipo_power(void)
{
    57c0:	b580      	push	{r7, lr}
    57c2:	af00      	add	r7, sp, #0
	return (int16_t) readWord(BQ27441_COMMAND_AVG_POWER);
    57c4:	2018      	movs	r0, #24
    57c6:	4b04      	ldr	r3, [pc, #16]	; (57d8 <lipo_power+0x18>)
    57c8:	4798      	blx	r3
    57ca:	1c03      	adds	r3, r0, #0
    57cc:	b29b      	uxth	r3, r3
    57ce:	b21b      	sxth	r3, r3
}
    57d0:	1c18      	adds	r0, r3, #0
    57d2:	46bd      	mov	sp, r7
    57d4:	bd80      	pop	{r7, pc}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	00005ac5 	.word	0x00005ac5

000057dc <lipo_soc>:

// Reads and returns specified state of charge measurement
uint16_t lipo_soc(soc_measure type)
{
    57dc:	b590      	push	{r4, r7, lr}
    57de:	b085      	sub	sp, #20
    57e0:	af00      	add	r7, sp, #0
    57e2:	1c02      	adds	r2, r0, #0
    57e4:	1dfb      	adds	r3, r7, #7
    57e6:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
    57e8:	230e      	movs	r3, #14
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	2200      	movs	r2, #0
    57ee:	801a      	strh	r2, [r3, #0]
	switch (type)
    57f0:	1dfb      	adds	r3, r7, #7
    57f2:	781b      	ldrb	r3, [r3, #0]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d002      	beq.n	57fe <lipo_soc+0x22>
    57f8:	2b01      	cmp	r3, #1
    57fa:	d008      	beq.n	580e <lipo_soc+0x32>
    57fc:	e00f      	b.n	581e <lipo_soc+0x42>
	{
	case FILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC);
    57fe:	230e      	movs	r3, #14
    5800:	18fc      	adds	r4, r7, r3
    5802:	201c      	movs	r0, #28
    5804:	4b09      	ldr	r3, [pc, #36]	; (582c <lipo_soc+0x50>)
    5806:	4798      	blx	r3
    5808:	1c03      	adds	r3, r0, #0
    580a:	8023      	strh	r3, [r4, #0]
		break;
    580c:	e007      	b.n	581e <lipo_soc+0x42>
	case UNFILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL);
    580e:	230e      	movs	r3, #14
    5810:	18fc      	adds	r4, r7, r3
    5812:	2030      	movs	r0, #48	; 0x30
    5814:	4b05      	ldr	r3, [pc, #20]	; (582c <lipo_soc+0x50>)
    5816:	4798      	blx	r3
    5818:	1c03      	adds	r3, r0, #0
    581a:	8023      	strh	r3, [r4, #0]
		break;
    581c:	46c0      	nop			; (mov r8, r8)
	}
	
	return socRet;
    581e:	230e      	movs	r3, #14
    5820:	18fb      	adds	r3, r7, r3
    5822:	881b      	ldrh	r3, [r3, #0]
}
    5824:	1c18      	adds	r0, r3, #0
    5826:	46bd      	mov	sp, r7
    5828:	b005      	add	sp, #20
    582a:	bd90      	pop	{r4, r7, pc}
    582c:	00005ac5 	.word	0x00005ac5

00005830 <lipo_soh>:

// Reads and returns specified state of health measurement
uint8_t lipo_soh(soh_measure type)
{
    5830:	b590      	push	{r4, r7, lr}
    5832:	b085      	sub	sp, #20
    5834:	af00      	add	r7, sp, #0
    5836:	1c02      	adds	r2, r0, #0
    5838:	1dfb      	adds	r3, r7, #7
    583a:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = readWord(BQ27441_COMMAND_SOH);
    583c:	230e      	movs	r3, #14
    583e:	18fc      	adds	r4, r7, r3
    5840:	2020      	movs	r0, #32
    5842:	4b10      	ldr	r3, [pc, #64]	; (5884 <lipo_soh+0x54>)
    5844:	4798      	blx	r3
    5846:	1c03      	adds	r3, r0, #0
    5848:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
    584a:	230e      	movs	r3, #14
    584c:	18fb      	adds	r3, r7, r3
    584e:	881b      	ldrh	r3, [r3, #0]
    5850:	0a1b      	lsrs	r3, r3, #8
    5852:	b29a      	uxth	r2, r3
    5854:	230d      	movs	r3, #13
    5856:	18fb      	adds	r3, r7, r3
    5858:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
    585a:	230c      	movs	r3, #12
    585c:	18fb      	adds	r3, r7, r3
    585e:	220e      	movs	r2, #14
    5860:	18ba      	adds	r2, r7, r2
    5862:	8812      	ldrh	r2, [r2, #0]
    5864:	701a      	strb	r2, [r3, #0]
	
	if (type == PERCENT)	
    5866:	1dfb      	adds	r3, r7, #7
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d103      	bne.n	5876 <lipo_soh+0x46>
		return sohPercent;
    586e:	230c      	movs	r3, #12
    5870:	18fb      	adds	r3, r7, r3
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	e002      	b.n	587c <lipo_soh+0x4c>
	else
		return sohStatus;
    5876:	230d      	movs	r3, #13
    5878:	18fb      	adds	r3, r7, r3
    587a:	781b      	ldrb	r3, [r3, #0]
}
    587c:	1c18      	adds	r0, r3, #0
    587e:	46bd      	mov	sp, r7
    5880:	b005      	add	sp, #20
    5882:	bd90      	pop	{r4, r7, pc}
    5884:	00005ac5 	.word	0x00005ac5

00005888 <deviceType>:
 *************************** Control Sub-Commands ****************************
 *****************************************************************************/

// Read the device type - should be 0x0421
uint16_t deviceType(void)
{
    5888:	b580      	push	{r7, lr}
    588a:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_DEVICE_TYPE);
    588c:	2001      	movs	r0, #1
    588e:	4b03      	ldr	r3, [pc, #12]	; (589c <deviceType+0x14>)
    5890:	4798      	blx	r3
    5892:	1c03      	adds	r3, r0, #0
}
    5894:	1c18      	adds	r0, r3, #0
    5896:	46bd      	mov	sp, r7
    5898:	bd80      	pop	{r7, pc}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	00005b09 	.word	0x00005b09

000058a0 <enterConfig>:

// Enter configuration mode - set userControl if calling from an Arduino sketch
// and you want control over when to exitConfig
bool enterConfig(bool userControl)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b084      	sub	sp, #16
    58a4:	af00      	add	r7, sp, #0
    58a6:	1c02      	adds	r2, r0, #0
    58a8:	1dfb      	adds	r3, r7, #7
    58aa:	701a      	strb	r2, [r3, #0]
	if (userControl) _userConfigControl = true;
    58ac:	1dfb      	adds	r3, r7, #7
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d002      	beq.n	58ba <enterConfig+0x1a>
    58b4:	4b20      	ldr	r3, [pc, #128]	; (5938 <enterConfig+0x98>)
    58b6:	2201      	movs	r2, #1
    58b8:	701a      	strb	r2, [r3, #0]
	
	if (sealed())
    58ba:	4b20      	ldr	r3, [pc, #128]	; (593c <enterConfig+0x9c>)
    58bc:	4798      	blx	r3
    58be:	1e03      	subs	r3, r0, #0
    58c0:	d004      	beq.n	58cc <enterConfig+0x2c>
	{
		_sealFlag = true;
    58c2:	4b1f      	ldr	r3, [pc, #124]	; (5940 <enterConfig+0xa0>)
    58c4:	2201      	movs	r2, #1
    58c6:	701a      	strb	r2, [r3, #0]
		unseal(); // Must be unsealed before making changes
    58c8:	4b1e      	ldr	r3, [pc, #120]	; (5944 <enterConfig+0xa4>)
    58ca:	4798      	blx	r3
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
    58cc:	2013      	movs	r0, #19
    58ce:	4b1e      	ldr	r3, [pc, #120]	; (5948 <enterConfig+0xa8>)
    58d0:	4798      	blx	r3
    58d2:	1e03      	subs	r3, r0, #0
    58d4:	d02a      	beq.n	592c <enterConfig+0x8c>
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT;
    58d6:	230e      	movs	r3, #14
    58d8:	18fb      	adds	r3, r7, r3
    58da:	22fa      	movs	r2, #250	; 0xfa
    58dc:	00d2      	lsls	r2, r2, #3
    58de:	801a      	strh	r2, [r3, #0]
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    58e0:	e00a      	b.n	58f8 <enterConfig+0x58>
		{
			uint32_t time = millis();
    58e2:	4b1a      	ldr	r3, [pc, #104]	; (594c <enterConfig+0xac>)
    58e4:	4798      	blx	r3
    58e6:	1c03      	adds	r3, r0, #0
    58e8:	60bb      	str	r3, [r7, #8]
			while(millis()-time < 1)
    58ea:	46c0      	nop			; (mov r8, r8)
    58ec:	4b17      	ldr	r3, [pc, #92]	; (594c <enterConfig+0xac>)
    58ee:	4798      	blx	r3
    58f0:	1e02      	subs	r2, r0, #0
    58f2:	68bb      	ldr	r3, [r7, #8]
    58f4:	429a      	cmp	r2, r3
    58f6:	d0f9      	beq.n	58ec <enterConfig+0x4c>
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT;
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    58f8:	230e      	movs	r3, #14
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	881b      	ldrh	r3, [r3, #0]
    58fe:	b29a      	uxth	r2, r3
    5900:	3a01      	subs	r2, #1
    5902:	b291      	uxth	r1, r2
    5904:	220e      	movs	r2, #14
    5906:	18ba      	adds	r2, r7, r2
    5908:	8011      	strh	r1, [r2, #0]
    590a:	2b00      	cmp	r3, #0
    590c:	d006      	beq.n	591c <enterConfig+0x7c>
    590e:	4b10      	ldr	r3, [pc, #64]	; (5950 <enterConfig+0xb0>)
    5910:	4798      	blx	r3
    5912:	1c03      	adds	r3, r0, #0
    5914:	1c1a      	adds	r2, r3, #0
    5916:	2310      	movs	r3, #16
    5918:	4013      	ands	r3, r2
    591a:	d0e2      	beq.n	58e2 <enterConfig+0x42>
			{
			 //Delay(1);
			}
		}
		
		if (timeout > 0)
    591c:	230e      	movs	r3, #14
    591e:	18fb      	adds	r3, r7, r3
    5920:	2200      	movs	r2, #0
    5922:	5e9b      	ldrsh	r3, [r3, r2]
    5924:	2b00      	cmp	r3, #0
    5926:	dd01      	ble.n	592c <enterConfig+0x8c>
			return true;
    5928:	2301      	movs	r3, #1
    592a:	e000      	b.n	592e <enterConfig+0x8e>
	}
	
	return false;
    592c:	2300      	movs	r3, #0
}
    592e:	1c18      	adds	r0, r3, #0
    5930:	46bd      	mov	sp, r7
    5932:	b004      	add	sp, #16
    5934:	bd80      	pop	{r7, pc}
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	2000013e 	.word	0x2000013e
    593c:	00005a31 	.word	0x00005a31
    5940:	200001f0 	.word	0x200001f0
    5944:	00005a79 	.word	0x00005a79
    5948:	00005ba1 	.word	0x00005ba1
    594c:	000045f5 	.word	0x000045f5
    5950:	00005a19 	.word	0x00005a19

00005954 <exitConfig>:

// Exit configuration mode with the option to perform a resimulation
bool exitConfig(bool resim)
{
    5954:	b580      	push	{r7, lr}
    5956:	b084      	sub	sp, #16
    5958:	af00      	add	r7, sp, #0
    595a:	1c02      	adds	r2, r0, #0
    595c:	1dfb      	adds	r3, r7, #7
    595e:	701a      	strb	r2, [r3, #0]
	//    2. Execute the SOFT_RESET command
	// EXIT_CFGUPDATE exits config mode _without_ an OCV (open-circuit voltage)
	// measurement, and without resimulating to update unfiltered-SoC and SoC.
	// If a new OCV measurement or resimulation is desired, SOFT_RESET or
	// EXIT_RESIM should be used to exit config mode.
	if (resim)
    5960:	1dfb      	adds	r3, r7, #7
    5962:	781b      	ldrb	r3, [r3, #0]
    5964:	2b00      	cmp	r3, #0
    5966:	d036      	beq.n	59d6 <exitConfig+0x82>
	{
		if (softReset())
    5968:	4b1f      	ldr	r3, [pc, #124]	; (59e8 <exitConfig+0x94>)
    596a:	4798      	blx	r3
    596c:	1e03      	subs	r3, r0, #0
    596e:	d030      	beq.n	59d2 <exitConfig+0x7e>
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
    5970:	230e      	movs	r3, #14
    5972:	18fb      	adds	r3, r7, r3
    5974:	22fa      	movs	r2, #250	; 0xfa
    5976:	00d2      	lsls	r2, r2, #3
    5978:	801a      	strh	r2, [r3, #0]
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    597a:	e00a      	b.n	5992 <exitConfig+0x3e>
			{
				uint32_t time = millis();
    597c:	4b1b      	ldr	r3, [pc, #108]	; (59ec <exitConfig+0x98>)
    597e:	4798      	blx	r3
    5980:	1c03      	adds	r3, r0, #0
    5982:	60bb      	str	r3, [r7, #8]
				while(millis()-time < 1)
    5984:	46c0      	nop			; (mov r8, r8)
    5986:	4b19      	ldr	r3, [pc, #100]	; (59ec <exitConfig+0x98>)
    5988:	4798      	blx	r3
    598a:	1e02      	subs	r2, r0, #0
    598c:	68bb      	ldr	r3, [r7, #8]
    598e:	429a      	cmp	r2, r3
    5990:	d0f9      	beq.n	5986 <exitConfig+0x32>
	if (resim)
	{
		if (softReset())
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    5992:	230e      	movs	r3, #14
    5994:	18fb      	adds	r3, r7, r3
    5996:	881b      	ldrh	r3, [r3, #0]
    5998:	b29a      	uxth	r2, r3
    599a:	3a01      	subs	r2, #1
    599c:	b291      	uxth	r1, r2
    599e:	220e      	movs	r2, #14
    59a0:	18ba      	adds	r2, r7, r2
    59a2:	8011      	strh	r1, [r2, #0]
    59a4:	2b00      	cmp	r3, #0
    59a6:	d006      	beq.n	59b6 <exitConfig+0x62>
    59a8:	4b11      	ldr	r3, [pc, #68]	; (59f0 <exitConfig+0x9c>)
    59aa:	4798      	blx	r3
    59ac:	1c03      	adds	r3, r0, #0
    59ae:	1c1a      	adds	r2, r3, #0
    59b0:	2310      	movs	r3, #16
    59b2:	4013      	ands	r3, r2
    59b4:	d1e2      	bne.n	597c <exitConfig+0x28>
				{
					//Delay(1);
				}
			}

			if (timeout > 0)
    59b6:	230e      	movs	r3, #14
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	2200      	movs	r2, #0
    59bc:	5e9b      	ldrsh	r3, [r3, r2]
    59be:	2b00      	cmp	r3, #0
    59c0:	dd07      	ble.n	59d2 <exitConfig+0x7e>
			{
				if (_sealFlag) seal(); // Seal back up if we IC was sealed coming in
    59c2:	4b0c      	ldr	r3, [pc, #48]	; (59f4 <exitConfig+0xa0>)
    59c4:	781b      	ldrb	r3, [r3, #0]
    59c6:	2b00      	cmp	r3, #0
    59c8:	d001      	beq.n	59ce <exitConfig+0x7a>
    59ca:	4b0b      	ldr	r3, [pc, #44]	; (59f8 <exitConfig+0xa4>)
    59cc:	4798      	blx	r3
				return true;
    59ce:	2301      	movs	r3, #1
    59d0:	e005      	b.n	59de <exitConfig+0x8a>
			}
		}
		return false;
    59d2:	2300      	movs	r3, #0
    59d4:	e003      	b.n	59de <exitConfig+0x8a>
	}
	else
	{
		return executeControlWord(BQ27441_CONTROL_EXIT_CFGUPDATE);
    59d6:	2043      	movs	r0, #67	; 0x43
    59d8:	4b08      	ldr	r3, [pc, #32]	; (59fc <exitConfig+0xa8>)
    59da:	4798      	blx	r3
    59dc:	1c03      	adds	r3, r0, #0
	}	
}
    59de:	1c18      	adds	r0, r3, #0
    59e0:	46bd      	mov	sp, r7
    59e2:	b004      	add	sp, #16
    59e4:	bd80      	pop	{r7, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	00005aad 	.word	0x00005aad
    59ec:	000045f5 	.word	0x000045f5
    59f0:	00005a01 	.word	0x00005a01
    59f4:	200001f0 	.word	0x200001f0
    59f8:	00005a5d 	.word	0x00005a5d
    59fc:	00005ba1 	.word	0x00005ba1

00005a00 <flags>:

// Read the flags() command
uint16_t flags(void)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	af00      	add	r7, sp, #0
	return readWord(BQ27441_COMMAND_FLAGS);
    5a04:	2006      	movs	r0, #6
    5a06:	4b03      	ldr	r3, [pc, #12]	; (5a14 <flags+0x14>)
    5a08:	4798      	blx	r3
    5a0a:	1c03      	adds	r3, r0, #0
}
    5a0c:	1c18      	adds	r0, r3, #0
    5a0e:	46bd      	mov	sp, r7
    5a10:	bd80      	pop	{r7, pc}
    5a12:	46c0      	nop			; (mov r8, r8)
    5a14:	00005ac5 	.word	0x00005ac5

00005a18 <status>:

// Read the CONTROL_STATUS subcommand of control()
uint16_t status(void)
{
    5a18:	b580      	push	{r7, lr}
    5a1a:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_STATUS);
    5a1c:	2000      	movs	r0, #0
    5a1e:	4b03      	ldr	r3, [pc, #12]	; (5a2c <status+0x14>)
    5a20:	4798      	blx	r3
    5a22:	1c03      	adds	r3, r0, #0
}
    5a24:	1c18      	adds	r0, r3, #0
    5a26:	46bd      	mov	sp, r7
    5a28:	bd80      	pop	{r7, pc}
    5a2a:	46c0      	nop			; (mov r8, r8)
    5a2c:	00005b09 	.word	0x00005b09

00005a30 <sealed>:

/***************************** Private Functions *****************************/

// Check if the BQ27441-G1A is sealed or not.
bool sealed(void)
{
    5a30:	b590      	push	{r4, r7, lr}
    5a32:	b083      	sub	sp, #12
    5a34:	af00      	add	r7, sp, #0
	uint16_t stat = status();
    5a36:	1dbc      	adds	r4, r7, #6
    5a38:	4b07      	ldr	r3, [pc, #28]	; (5a58 <sealed+0x28>)
    5a3a:	4798      	blx	r3
    5a3c:	1c03      	adds	r3, r0, #0
    5a3e:	8023      	strh	r3, [r4, #0]
	return stat & BQ27441_STATUS_SS;
    5a40:	1dbb      	adds	r3, r7, #6
    5a42:	881a      	ldrh	r2, [r3, #0]
    5a44:	2380      	movs	r3, #128	; 0x80
    5a46:	019b      	lsls	r3, r3, #6
    5a48:	4013      	ands	r3, r2
    5a4a:	1e5a      	subs	r2, r3, #1
    5a4c:	4193      	sbcs	r3, r2
    5a4e:	b2db      	uxtb	r3, r3
}
    5a50:	1c18      	adds	r0, r3, #0
    5a52:	46bd      	mov	sp, r7
    5a54:	b003      	add	sp, #12
    5a56:	bd90      	pop	{r4, r7, pc}
    5a58:	00005a19 	.word	0x00005a19

00005a5c <seal>:

// Seal the BQ27441-G1A
bool seal(void)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_SEALED);
    5a60:	2020      	movs	r0, #32
    5a62:	4b04      	ldr	r3, [pc, #16]	; (5a74 <seal+0x18>)
    5a64:	4798      	blx	r3
    5a66:	1c03      	adds	r3, r0, #0
    5a68:	1e5a      	subs	r2, r3, #1
    5a6a:	4193      	sbcs	r3, r2
    5a6c:	b2db      	uxtb	r3, r3
}
    5a6e:	1c18      	adds	r0, r3, #0
    5a70:	46bd      	mov	sp, r7
    5a72:	bd80      	pop	{r7, pc}
    5a74:	00005b09 	.word	0x00005b09

00005a78 <unseal>:

// UNseal the BQ27441-G1A
bool unseal(void)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	af00      	add	r7, sp, #0
	// To unseal the BQ27441, write the key to the control
	// command. Then immediately write the same key to control again.
	if (readControlWord(BQ27441_UNSEAL_KEY))
    5a7c:	2380      	movs	r3, #128	; 0x80
    5a7e:	021b      	lsls	r3, r3, #8
    5a80:	1c18      	adds	r0, r3, #0
    5a82:	4b09      	ldr	r3, [pc, #36]	; (5aa8 <unseal+0x30>)
    5a84:	4798      	blx	r3
    5a86:	1e03      	subs	r3, r0, #0
    5a88:	d009      	beq.n	5a9e <unseal+0x26>
	{
		return readControlWord(BQ27441_UNSEAL_KEY);
    5a8a:	2380      	movs	r3, #128	; 0x80
    5a8c:	021b      	lsls	r3, r3, #8
    5a8e:	1c18      	adds	r0, r3, #0
    5a90:	4b05      	ldr	r3, [pc, #20]	; (5aa8 <unseal+0x30>)
    5a92:	4798      	blx	r3
    5a94:	1c03      	adds	r3, r0, #0
    5a96:	1e5a      	subs	r2, r3, #1
    5a98:	4193      	sbcs	r3, r2
    5a9a:	b2db      	uxtb	r3, r3
    5a9c:	e000      	b.n	5aa0 <unseal+0x28>
	}
	return false;
    5a9e:	2300      	movs	r3, #0
}
    5aa0:	1c18      	adds	r0, r3, #0
    5aa2:	46bd      	mov	sp, r7
    5aa4:	bd80      	pop	{r7, pc}
    5aa6:	46c0      	nop			; (mov r8, r8)
    5aa8:	00005b09 	.word	0x00005b09

00005aac <softReset>:
	return writeExtendedData(BQ27441_ID_REGISTERS, 0, opConfigData, 2);	
}

// Issue a soft-reset to the BQ27441-G1A
bool softReset(void)
{
    5aac:	b580      	push	{r7, lr}
    5aae:	af00      	add	r7, sp, #0
	return executeControlWord(BQ27441_CONTROL_SOFT_RESET);
    5ab0:	2042      	movs	r0, #66	; 0x42
    5ab2:	4b03      	ldr	r3, [pc, #12]	; (5ac0 <softReset+0x14>)
    5ab4:	4798      	blx	r3
    5ab6:	1c03      	adds	r3, r0, #0
}
    5ab8:	1c18      	adds	r0, r3, #0
    5aba:	46bd      	mov	sp, r7
    5abc:	bd80      	pop	{r7, pc}
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	00005ba1 	.word	0x00005ba1

00005ac4 <readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t readWord(uint16_t subAddress)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b084      	sub	sp, #16
    5ac8:	af00      	add	r7, sp, #0
    5aca:	1c02      	adds	r2, r0, #0
    5acc:	1dbb      	adds	r3, r7, #6
    5ace:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	i2cReadBytes(subAddress, data, 2);
    5ad0:	1dbb      	adds	r3, r7, #6
    5ad2:	881b      	ldrh	r3, [r3, #0]
    5ad4:	b2da      	uxtb	r2, r3
    5ad6:	230c      	movs	r3, #12
    5ad8:	18fb      	adds	r3, r7, r3
    5ada:	1c10      	adds	r0, r2, #0
    5adc:	1c19      	adds	r1, r3, #0
    5ade:	2202      	movs	r2, #2
    5ae0:	4b08      	ldr	r3, [pc, #32]	; (5b04 <readWord+0x40>)
    5ae2:	4798      	blx	r3
	return ((uint16_t) data[1] << 8) | data[0];
    5ae4:	230c      	movs	r3, #12
    5ae6:	18fb      	adds	r3, r7, r3
    5ae8:	785b      	ldrb	r3, [r3, #1]
    5aea:	021b      	lsls	r3, r3, #8
    5aec:	b29a      	uxth	r2, r3
    5aee:	230c      	movs	r3, #12
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	b29b      	uxth	r3, r3
    5af6:	4313      	orrs	r3, r2
    5af8:	b29b      	uxth	r3, r3
    5afa:	b29b      	uxth	r3, r3
}
    5afc:	1c18      	adds	r0, r3, #0
    5afe:	46bd      	mov	sp, r7
    5b00:	b004      	add	sp, #16
    5b02:	bd80      	pop	{r7, pc}
    5b04:	00005eb5 	.word	0x00005eb5

00005b08 <readControlWord>:

// Read a 16-bit subcommand() from the BQ27441-G1A's control()
uint16_t readControlWord(uint16_t function)
{
    5b08:	b580      	push	{r7, lr}
    5b0a:	b084      	sub	sp, #16
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	1c02      	adds	r2, r0, #0
    5b10:	1dbb      	adds	r3, r7, #6
    5b12:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    5b14:	1dbb      	adds	r3, r7, #6
    5b16:	881b      	ldrh	r3, [r3, #0]
    5b18:	0a1b      	lsrs	r3, r3, #8
    5b1a:	b29a      	uxth	r2, r3
    5b1c:	230f      	movs	r3, #15
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    5b22:	230e      	movs	r3, #14
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	1dba      	adds	r2, r7, #6
    5b28:	8812      	ldrh	r2, [r2, #0]
    5b2a:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    5b2c:	230c      	movs	r3, #12
    5b2e:	18fb      	adds	r3, r7, r3
    5b30:	220e      	movs	r2, #14
    5b32:	18ba      	adds	r2, r7, r2
    5b34:	7812      	ldrb	r2, [r2, #0]
    5b36:	701a      	strb	r2, [r3, #0]
    5b38:	230c      	movs	r3, #12
    5b3a:	18fb      	adds	r3, r7, r3
    5b3c:	220f      	movs	r2, #15
    5b3e:	18ba      	adds	r2, r7, r2
    5b40:	7812      	ldrb	r2, [r2, #0]
    5b42:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    5b44:	2308      	movs	r3, #8
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	2200      	movs	r2, #0
    5b4a:	701a      	strb	r2, [r3, #0]
    5b4c:	2308      	movs	r3, #8
    5b4e:	18fb      	adds	r3, r7, r3
    5b50:	2200      	movs	r2, #0
    5b52:	705a      	strb	r2, [r3, #1]
	
	i2cWriteBytes((uint8_t) 0, command, 2);
    5b54:	230c      	movs	r3, #12
    5b56:	18fb      	adds	r3, r7, r3
    5b58:	2000      	movs	r0, #0
    5b5a:	1c19      	adds	r1, r3, #0
    5b5c:	2202      	movs	r2, #2
    5b5e:	4b0e      	ldr	r3, [pc, #56]	; (5b98 <readControlWord+0x90>)
    5b60:	4798      	blx	r3
	
	if (i2cReadBytes((uint8_t) 0, data, 2))
    5b62:	2308      	movs	r3, #8
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	2000      	movs	r0, #0
    5b68:	1c19      	adds	r1, r3, #0
    5b6a:	2202      	movs	r2, #2
    5b6c:	4b0b      	ldr	r3, [pc, #44]	; (5b9c <readControlWord+0x94>)
    5b6e:	4798      	blx	r3
    5b70:	1e03      	subs	r3, r0, #0
    5b72:	d00c      	beq.n	5b8e <readControlWord+0x86>
	{
		return ((uint16_t)data[1] << 8) | data[0];
    5b74:	2308      	movs	r3, #8
    5b76:	18fb      	adds	r3, r7, r3
    5b78:	785b      	ldrb	r3, [r3, #1]
    5b7a:	021b      	lsls	r3, r3, #8
    5b7c:	b29a      	uxth	r2, r3
    5b7e:	2308      	movs	r3, #8
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	781b      	ldrb	r3, [r3, #0]
    5b84:	b29b      	uxth	r3, r3
    5b86:	4313      	orrs	r3, r2
    5b88:	b29b      	uxth	r3, r3
    5b8a:	b29b      	uxth	r3, r3
    5b8c:	e000      	b.n	5b90 <readControlWord+0x88>
	}
	
	return false;
    5b8e:	2300      	movs	r3, #0
}
    5b90:	1c18      	adds	r0, r3, #0
    5b92:	46bd      	mov	sp, r7
    5b94:	b004      	add	sp, #16
    5b96:	bd80      	pop	{r7, pc}
    5b98:	00005fad 	.word	0x00005fad
    5b9c:	00005eb5 	.word	0x00005eb5

00005ba0 <executeControlWord>:

// Execute a subcommand() from the BQ27441-G1A's control()
bool executeControlWord(uint16_t function)
{
    5ba0:	b580      	push	{r7, lr}
    5ba2:	b084      	sub	sp, #16
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	1c02      	adds	r2, r0, #0
    5ba8:	1dbb      	adds	r3, r7, #6
    5baa:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    5bac:	1dbb      	adds	r3, r7, #6
    5bae:	881b      	ldrh	r3, [r3, #0]
    5bb0:	0a1b      	lsrs	r3, r3, #8
    5bb2:	b29a      	uxth	r2, r3
    5bb4:	230f      	movs	r3, #15
    5bb6:	18fb      	adds	r3, r7, r3
    5bb8:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    5bba:	230e      	movs	r3, #14
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	1dba      	adds	r2, r7, #6
    5bc0:	8812      	ldrh	r2, [r2, #0]
    5bc2:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    5bc4:	230c      	movs	r3, #12
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	220e      	movs	r2, #14
    5bca:	18ba      	adds	r2, r7, r2
    5bcc:	7812      	ldrb	r2, [r2, #0]
    5bce:	701a      	strb	r2, [r3, #0]
    5bd0:	230c      	movs	r3, #12
    5bd2:	18fb      	adds	r3, r7, r3
    5bd4:	220f      	movs	r2, #15
    5bd6:	18ba      	adds	r2, r7, r2
    5bd8:	7812      	ldrb	r2, [r2, #0]
    5bda:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    5bdc:	2308      	movs	r3, #8
    5bde:	18fb      	adds	r3, r7, r3
    5be0:	2200      	movs	r2, #0
    5be2:	701a      	strb	r2, [r3, #0]
    5be4:	2308      	movs	r3, #8
    5be6:	18fb      	adds	r3, r7, r3
    5be8:	2200      	movs	r2, #0
    5bea:	705a      	strb	r2, [r3, #1]
	
	if (i2cWriteBytes((uint8_t) 0, command, 2))
    5bec:	230c      	movs	r3, #12
    5bee:	18fb      	adds	r3, r7, r3
    5bf0:	2000      	movs	r0, #0
    5bf2:	1c19      	adds	r1, r3, #0
    5bf4:	2202      	movs	r2, #2
    5bf6:	4b05      	ldr	r3, [pc, #20]	; (5c0c <executeControlWord+0x6c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d001      	beq.n	5c02 <executeControlWord+0x62>
		return true;
    5bfe:	2301      	movs	r3, #1
    5c00:	e000      	b.n	5c04 <executeControlWord+0x64>
	
	return false;
    5c02:	2300      	movs	r3, #0
}
    5c04:	1c18      	adds	r0, r3, #0
    5c06:	46bd      	mov	sp, r7
    5c08:	b004      	add	sp, #16
    5c0a:	bd80      	pop	{r7, pc}
    5c0c:	00005fad 	.word	0x00005fad

00005c10 <blockDataControl>:
 ************************** Extended Data Commands ***************************
 *****************************************************************************/
 
// Issue a BlockDataControl() command to enable BlockData access
bool blockDataControl(void)
{
    5c10:	b580      	push	{r7, lr}
    5c12:	b082      	sub	sp, #8
    5c14:	af00      	add	r7, sp, #0
	uint8_t enableByte = 0x00;
    5c16:	1dfb      	adds	r3, r7, #7
    5c18:	2200      	movs	r2, #0
    5c1a:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
    5c1c:	1dfb      	adds	r3, r7, #7
    5c1e:	2061      	movs	r0, #97	; 0x61
    5c20:	1c19      	adds	r1, r3, #0
    5c22:	2201      	movs	r2, #1
    5c24:	4b04      	ldr	r3, [pc, #16]	; (5c38 <blockDataControl+0x28>)
    5c26:	4798      	blx	r3
    5c28:	1c03      	adds	r3, r0, #0
    5c2a:	1e5a      	subs	r2, r3, #1
    5c2c:	4193      	sbcs	r3, r2
    5c2e:	b2db      	uxtb	r3, r3
}
    5c30:	1c18      	adds	r0, r3, #0
    5c32:	46bd      	mov	sp, r7
    5c34:	b002      	add	sp, #8
    5c36:	bd80      	pop	{r7, pc}
    5c38:	00005fad 	.word	0x00005fad

00005c3c <blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
bool blockDataClass(uint8_t id)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b082      	sub	sp, #8
    5c40:	af00      	add	r7, sp, #0
    5c42:	1c02      	adds	r2, r0, #0
    5c44:	1dfb      	adds	r3, r7, #7
    5c46:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
    5c48:	1dfb      	adds	r3, r7, #7
    5c4a:	203e      	movs	r0, #62	; 0x3e
    5c4c:	1c19      	adds	r1, r3, #0
    5c4e:	2201      	movs	r2, #1
    5c50:	4b04      	ldr	r3, [pc, #16]	; (5c64 <blockDataClass+0x28>)
    5c52:	4798      	blx	r3
    5c54:	1c03      	adds	r3, r0, #0
    5c56:	1e5a      	subs	r2, r3, #1
    5c58:	4193      	sbcs	r3, r2
    5c5a:	b2db      	uxtb	r3, r3
}
    5c5c:	1c18      	adds	r0, r3, #0
    5c5e:	46bd      	mov	sp, r7
    5c60:	b002      	add	sp, #8
    5c62:	bd80      	pop	{r7, pc}
    5c64:	00005fad 	.word	0x00005fad

00005c68 <blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
bool blockDataOffset(uint8_t offset)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	b082      	sub	sp, #8
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	1c02      	adds	r2, r0, #0
    5c70:	1dfb      	adds	r3, r7, #7
    5c72:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
    5c74:	1dfb      	adds	r3, r7, #7
    5c76:	203f      	movs	r0, #63	; 0x3f
    5c78:	1c19      	adds	r1, r3, #0
    5c7a:	2201      	movs	r2, #1
    5c7c:	4b04      	ldr	r3, [pc, #16]	; (5c90 <blockDataOffset+0x28>)
    5c7e:	4798      	blx	r3
    5c80:	1c03      	adds	r3, r0, #0
    5c82:	1e5a      	subs	r2, r3, #1
    5c84:	4193      	sbcs	r3, r2
    5c86:	b2db      	uxtb	r3, r3
}
    5c88:	1c18      	adds	r0, r3, #0
    5c8a:	46bd      	mov	sp, r7
    5c8c:	b002      	add	sp, #8
    5c8e:	bd80      	pop	{r7, pc}
    5c90:	00005fad 	.word	0x00005fad

00005c94 <blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t blockDataChecksum(void)
{
    5c94:	b580      	push	{r7, lr}
    5c96:	b082      	sub	sp, #8
    5c98:	af00      	add	r7, sp, #0
	uint8_t csum;
	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
    5c9a:	1dfb      	adds	r3, r7, #7
    5c9c:	2060      	movs	r0, #96	; 0x60
    5c9e:	1c19      	adds	r1, r3, #0
    5ca0:	2201      	movs	r2, #1
    5ca2:	4b04      	ldr	r3, [pc, #16]	; (5cb4 <blockDataChecksum+0x20>)
    5ca4:	4798      	blx	r3
	return csum;
    5ca6:	1dfb      	adds	r3, r7, #7
    5ca8:	781b      	ldrb	r3, [r3, #0]
}
    5caa:	1c18      	adds	r0, r3, #0
    5cac:	46bd      	mov	sp, r7
    5cae:	b002      	add	sp, #8
    5cb0:	bd80      	pop	{r7, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	00005eb5 	.word	0x00005eb5

00005cb8 <writeBlockData>:
	return ret;
}

// Use BlockData() to write a byte to an offset of the loaded data
bool writeBlockData(uint8_t offset, uint8_t data)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	1c02      	adds	r2, r0, #0
    5cc0:	1dfb      	adds	r3, r7, #7
    5cc2:	701a      	strb	r2, [r3, #0]
    5cc4:	1dbb      	adds	r3, r7, #6
    5cc6:	1c0a      	adds	r2, r1, #0
    5cc8:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
    5cca:	230f      	movs	r3, #15
    5ccc:	18fb      	adds	r3, r7, r3
    5cce:	1dfa      	adds	r2, r7, #7
    5cd0:	7812      	ldrb	r2, [r2, #0]
    5cd2:	3240      	adds	r2, #64	; 0x40
    5cd4:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(address, &data, 1);
    5cd6:	230f      	movs	r3, #15
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	781a      	ldrb	r2, [r3, #0]
    5cdc:	1dbb      	adds	r3, r7, #6
    5cde:	1c10      	adds	r0, r2, #0
    5ce0:	1c19      	adds	r1, r3, #0
    5ce2:	2201      	movs	r2, #1
    5ce4:	4b04      	ldr	r3, [pc, #16]	; (5cf8 <writeBlockData+0x40>)
    5ce6:	4798      	blx	r3
    5ce8:	1c03      	adds	r3, r0, #0
    5cea:	1e5a      	subs	r2, r3, #1
    5cec:	4193      	sbcs	r3, r2
    5cee:	b2db      	uxtb	r3, r3
}
    5cf0:	1c18      	adds	r0, r3, #0
    5cf2:	46bd      	mov	sp, r7
    5cf4:	b004      	add	sp, #16
    5cf6:	bd80      	pop	{r7, pc}
    5cf8:	00005fad 	.word	0x00005fad

00005cfc <computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a 
// checksum based on the values.
uint8_t computeBlockChecksum(void)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b08a      	sub	sp, #40	; 0x28
    5d00:	af00      	add	r7, sp, #0
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
    5d02:	1c3b      	adds	r3, r7, #0
    5d04:	2040      	movs	r0, #64	; 0x40
    5d06:	1c19      	adds	r1, r3, #0
    5d08:	2220      	movs	r2, #32
    5d0a:	4b14      	ldr	r3, [pc, #80]	; (5d5c <computeBlockChecksum+0x60>)
    5d0c:	4798      	blx	r3

	uint8_t csum = 0;
    5d0e:	2327      	movs	r3, #39	; 0x27
    5d10:	18fb      	adds	r3, r7, r3
    5d12:	2200      	movs	r2, #0
    5d14:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
    5d16:	2300      	movs	r3, #0
    5d18:	623b      	str	r3, [r7, #32]
    5d1a:	e00d      	b.n	5d38 <computeBlockChecksum+0x3c>
	{
		csum += data[i];
    5d1c:	1c3a      	adds	r2, r7, #0
    5d1e:	6a3b      	ldr	r3, [r7, #32]
    5d20:	18d3      	adds	r3, r2, r3
    5d22:	7819      	ldrb	r1, [r3, #0]
    5d24:	2327      	movs	r3, #39	; 0x27
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	2227      	movs	r2, #39	; 0x27
    5d2a:	18ba      	adds	r2, r7, r2
    5d2c:	7812      	ldrb	r2, [r2, #0]
    5d2e:	188a      	adds	r2, r1, r2
    5d30:	701a      	strb	r2, [r3, #0]
{
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);

	uint8_t csum = 0;
	for (int i=0; i<32; i++)
    5d32:	6a3b      	ldr	r3, [r7, #32]
    5d34:	3301      	adds	r3, #1
    5d36:	623b      	str	r3, [r7, #32]
    5d38:	6a3b      	ldr	r3, [r7, #32]
    5d3a:	2b1f      	cmp	r3, #31
    5d3c:	ddee      	ble.n	5d1c <computeBlockChecksum+0x20>
	{
		csum += data[i];
	}
	csum = 255 - csum;
    5d3e:	2327      	movs	r3, #39	; 0x27
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	2227      	movs	r2, #39	; 0x27
    5d44:	18ba      	adds	r2, r7, r2
    5d46:	7812      	ldrb	r2, [r2, #0]
    5d48:	43d2      	mvns	r2, r2
    5d4a:	701a      	strb	r2, [r3, #0]
	
	return csum;
    5d4c:	2327      	movs	r3, #39	; 0x27
    5d4e:	18fb      	adds	r3, r7, r3
    5d50:	781b      	ldrb	r3, [r3, #0]
}
    5d52:	1c18      	adds	r0, r3, #0
    5d54:	46bd      	mov	sp, r7
    5d56:	b00a      	add	sp, #40	; 0x28
    5d58:	bd80      	pop	{r7, pc}
    5d5a:	46c0      	nop			; (mov r8, r8)
    5d5c:	00005eb5 	.word	0x00005eb5

00005d60 <writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
bool writeBlockChecksum(uint8_t csum)
{
    5d60:	b580      	push	{r7, lr}
    5d62:	b082      	sub	sp, #8
    5d64:	af00      	add	r7, sp, #0
    5d66:	1c02      	adds	r2, r0, #0
    5d68:	1dfb      	adds	r3, r7, #7
    5d6a:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);	
    5d6c:	1dfb      	adds	r3, r7, #7
    5d6e:	2060      	movs	r0, #96	; 0x60
    5d70:	1c19      	adds	r1, r3, #0
    5d72:	2201      	movs	r2, #1
    5d74:	4b04      	ldr	r3, [pc, #16]	; (5d88 <writeBlockChecksum+0x28>)
    5d76:	4798      	blx	r3
    5d78:	1c03      	adds	r3, r0, #0
    5d7a:	1e5a      	subs	r2, r3, #1
    5d7c:	4193      	sbcs	r3, r2
    5d7e:	b2db      	uxtb	r3, r3
}
    5d80:	1c18      	adds	r0, r3, #0
    5d82:	46bd      	mov	sp, r7
    5d84:	b002      	add	sp, #8
    5d86:	bd80      	pop	{r7, pc}
    5d88:	00005fad 	.word	0x00005fad

00005d8c <writeExtendedData>:
}

// Write a specified number of bytes to extended data specifying a 
// class ID, position offset.
bool writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
    5d8c:	b590      	push	{r4, r7, lr}
    5d8e:	b085      	sub	sp, #20
    5d90:	af00      	add	r7, sp, #0
    5d92:	1c04      	adds	r4, r0, #0
    5d94:	1c08      	adds	r0, r1, #0
    5d96:	603a      	str	r2, [r7, #0]
    5d98:	1c19      	adds	r1, r3, #0
    5d9a:	1dfb      	adds	r3, r7, #7
    5d9c:	1c22      	adds	r2, r4, #0
    5d9e:	701a      	strb	r2, [r3, #0]
    5da0:	1dbb      	adds	r3, r7, #6
    5da2:	1c02      	adds	r2, r0, #0
    5da4:	701a      	strb	r2, [r3, #0]
    5da6:	1d7b      	adds	r3, r7, #5
    5da8:	1c0a      	adds	r2, r1, #0
    5daa:	701a      	strb	r2, [r3, #0]
	if (len > 32)
    5dac:	1d7b      	adds	r3, r7, #5
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	2b20      	cmp	r3, #32
    5db2:	d901      	bls.n	5db8 <writeExtendedData+0x2c>
		return false;
    5db4:	2300      	movs	r3, #0
    5db6:	e064      	b.n	5e82 <writeExtendedData+0xf6>
	
	if (!_userConfigControl) enterConfig(false);
    5db8:	4b34      	ldr	r3, [pc, #208]	; (5e8c <writeExtendedData+0x100>)
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	2201      	movs	r2, #1
    5dbe:	4053      	eors	r3, r2
    5dc0:	b2db      	uxtb	r3, r3
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d002      	beq.n	5dcc <writeExtendedData+0x40>
    5dc6:	2000      	movs	r0, #0
    5dc8:	4b31      	ldr	r3, [pc, #196]	; (5e90 <writeExtendedData+0x104>)
    5dca:	4798      	blx	r3
	
	if (!blockDataControl()) // // enable block data memory control
    5dcc:	4b31      	ldr	r3, [pc, #196]	; (5e94 <writeExtendedData+0x108>)
    5dce:	4798      	blx	r3
    5dd0:	1c03      	adds	r3, r0, #0
    5dd2:	1c1a      	adds	r2, r3, #0
    5dd4:	2301      	movs	r3, #1
    5dd6:	4053      	eors	r3, r2
    5dd8:	b2db      	uxtb	r3, r3
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d001      	beq.n	5de2 <writeExtendedData+0x56>
		return false; // Return false if enable fails
    5dde:	2300      	movs	r3, #0
    5de0:	e04f      	b.n	5e82 <writeExtendedData+0xf6>
	if (!blockDataClass(classID)) // Write class ID using DataBlockClass()
    5de2:	1dfb      	adds	r3, r7, #7
    5de4:	781b      	ldrb	r3, [r3, #0]
    5de6:	1c18      	adds	r0, r3, #0
    5de8:	4b2b      	ldr	r3, [pc, #172]	; (5e98 <writeExtendedData+0x10c>)
    5dea:	4798      	blx	r3
    5dec:	1c03      	adds	r3, r0, #0
    5dee:	1c1a      	adds	r2, r3, #0
    5df0:	2301      	movs	r3, #1
    5df2:	4053      	eors	r3, r2
    5df4:	b2db      	uxtb	r3, r3
    5df6:	2b00      	cmp	r3, #0
    5df8:	d001      	beq.n	5dfe <writeExtendedData+0x72>
		return false;
    5dfa:	2300      	movs	r3, #0
    5dfc:	e041      	b.n	5e82 <writeExtendedData+0xf6>
	
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
    5dfe:	1dbb      	adds	r3, r7, #6
    5e00:	781b      	ldrb	r3, [r3, #0]
    5e02:	095b      	lsrs	r3, r3, #5
    5e04:	b2db      	uxtb	r3, r3
    5e06:	1c18      	adds	r0, r3, #0
    5e08:	4b24      	ldr	r3, [pc, #144]	; (5e9c <writeExtendedData+0x110>)
    5e0a:	4798      	blx	r3
	computeBlockChecksum(); // Compute checksum going in
    5e0c:	4b24      	ldr	r3, [pc, #144]	; (5ea0 <writeExtendedData+0x114>)
    5e0e:	4798      	blx	r3
	uint8_t oldCsum = blockDataChecksum();
    5e10:	230b      	movs	r3, #11
    5e12:	18fc      	adds	r4, r7, r3
    5e14:	4b23      	ldr	r3, [pc, #140]	; (5ea4 <writeExtendedData+0x118>)
    5e16:	4798      	blx	r3
    5e18:	1c03      	adds	r3, r0, #0
    5e1a:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
    5e1c:	2300      	movs	r3, #0
    5e1e:	60fb      	str	r3, [r7, #12]
    5e20:	e013      	b.n	5e4a <writeExtendedData+0xbe>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
    5e22:	1dbb      	adds	r3, r7, #6
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	221f      	movs	r2, #31
    5e28:	4013      	ands	r3, r2
    5e2a:	b2da      	uxtb	r2, r3
    5e2c:	68fb      	ldr	r3, [r7, #12]
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	18d3      	adds	r3, r2, r3
    5e32:	b2d9      	uxtb	r1, r3
    5e34:	68fb      	ldr	r3, [r7, #12]
    5e36:	683a      	ldr	r2, [r7, #0]
    5e38:	18d3      	adds	r3, r2, r3
    5e3a:	781b      	ldrb	r3, [r3, #0]
    5e3c:	1c08      	adds	r0, r1, #0
    5e3e:	1c19      	adds	r1, r3, #0
    5e40:	4b19      	ldr	r3, [pc, #100]	; (5ea8 <writeExtendedData+0x11c>)
    5e42:	4798      	blx	r3
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
	computeBlockChecksum(); // Compute checksum going in
	uint8_t oldCsum = blockDataChecksum();

	// Write data bytes:
	for (int i = 0; i < len; i++)
    5e44:	68fb      	ldr	r3, [r7, #12]
    5e46:	3301      	adds	r3, #1
    5e48:	60fb      	str	r3, [r7, #12]
    5e4a:	1d7b      	adds	r3, r7, #5
    5e4c:	781a      	ldrb	r2, [r3, #0]
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	429a      	cmp	r2, r3
    5e52:	dce6      	bgt.n	5e22 <writeExtendedData+0x96>
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
	}
	
	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = computeBlockChecksum(); // Compute the new checksum
    5e54:	230a      	movs	r3, #10
    5e56:	18fc      	adds	r4, r7, r3
    5e58:	4b11      	ldr	r3, [pc, #68]	; (5ea0 <writeExtendedData+0x114>)
    5e5a:	4798      	blx	r3
    5e5c:	1c03      	adds	r3, r0, #0
    5e5e:	7023      	strb	r3, [r4, #0]
	writeBlockChecksum(newCsum);
    5e60:	230a      	movs	r3, #10
    5e62:	18fb      	adds	r3, r7, r3
    5e64:	781b      	ldrb	r3, [r3, #0]
    5e66:	1c18      	adds	r0, r3, #0
    5e68:	4b10      	ldr	r3, [pc, #64]	; (5eac <writeExtendedData+0x120>)
    5e6a:	4798      	blx	r3

	if (!_userConfigControl) exitConfig(true);
    5e6c:	4b07      	ldr	r3, [pc, #28]	; (5e8c <writeExtendedData+0x100>)
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	2201      	movs	r2, #1
    5e72:	4053      	eors	r3, r2
    5e74:	b2db      	uxtb	r3, r3
    5e76:	2b00      	cmp	r3, #0
    5e78:	d002      	beq.n	5e80 <writeExtendedData+0xf4>
    5e7a:	2001      	movs	r0, #1
    5e7c:	4b0c      	ldr	r3, [pc, #48]	; (5eb0 <writeExtendedData+0x124>)
    5e7e:	4798      	blx	r3
	
	return true;
    5e80:	2301      	movs	r3, #1
}
    5e82:	1c18      	adds	r0, r3, #0
    5e84:	46bd      	mov	sp, r7
    5e86:	b005      	add	sp, #20
    5e88:	bd90      	pop	{r4, r7, pc}
    5e8a:	46c0      	nop			; (mov r8, r8)
    5e8c:	2000013e 	.word	0x2000013e
    5e90:	000058a1 	.word	0x000058a1
    5e94:	00005c11 	.word	0x00005c11
    5e98:	00005c3d 	.word	0x00005c3d
    5e9c:	00005c69 	.word	0x00005c69
    5ea0:	00005cfd 	.word	0x00005cfd
    5ea4:	00005c95 	.word	0x00005c95
    5ea8:	00005cb9 	.word	0x00005cb9
    5eac:	00005d61 	.word	0x00005d61
    5eb0:	00005955 	.word	0x00005955

00005eb4 <i2cReadBytes>:
 ************************ I2C Read and Write Routines ************************
 *****************************************************************************/

// Read a specified number of bytes over I2C at a given subAddress
int16_t i2cReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b086      	sub	sp, #24
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6039      	str	r1, [r7, #0]
    5ebc:	1c11      	adds	r1, r2, #0
    5ebe:	1dfb      	adds	r3, r7, #7
    5ec0:	1c02      	adds	r2, r0, #0
    5ec2:	701a      	strb	r2, [r3, #0]
    5ec4:	1dbb      	adds	r3, r7, #6
    5ec6:	1c0a      	adds	r2, r1, #0
    5ec8:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;	
    5eca:	2316      	movs	r3, #22
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	22fa      	movs	r2, #250	; 0xfa
    5ed0:	00d2      	lsls	r2, r2, #3
    5ed2:	801a      	strh	r2, [r3, #0]

	uint8_t write_buffer = subAddress;
    5ed4:	2315      	movs	r3, #21
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	1dfa      	adds	r2, r7, #7
    5eda:	7812      	ldrb	r2, [r2, #0]
    5edc:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    5ede:	4b2f      	ldr	r3, [pc, #188]	; (5f9c <i2cReadBytes+0xe8>)
    5ee0:	781b      	ldrb	r3, [r3, #0]
    5ee2:	b29a      	uxth	r2, r3
    5ee4:	2308      	movs	r3, #8
    5ee6:	18fb      	adds	r3, r7, r3
    5ee8:	801a      	strh	r2, [r3, #0]
    5eea:	2308      	movs	r3, #8
    5eec:	18fb      	adds	r3, r7, r3
    5eee:	2201      	movs	r2, #1
    5ef0:	805a      	strh	r2, [r3, #2]
    5ef2:	2308      	movs	r3, #8
    5ef4:	18fb      	adds	r3, r7, r3
    5ef6:	2215      	movs	r2, #21
    5ef8:	18ba      	adds	r2, r7, r2
    5efa:	605a      	str	r2, [r3, #4]
    5efc:	2308      	movs	r3, #8
    5efe:	18fb      	adds	r3, r7, r3
    5f00:	2200      	movs	r2, #0
    5f02:	721a      	strb	r2, [r3, #8]
    5f04:	2308      	movs	r3, #8
    5f06:	18fb      	adds	r3, r7, r3
    5f08:	2200      	movs	r2, #0
    5f0a:	725a      	strb	r2, [r3, #9]
    5f0c:	2308      	movs	r3, #8
    5f0e:	18fb      	adds	r3, r7, r3
    5f10:	2200      	movs	r2, #0
    5f12:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    5f14:	e00b      	b.n	5f2e <i2cReadBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    5f16:	2316      	movs	r3, #22
    5f18:	18fb      	adds	r3, r7, r3
    5f1a:	881b      	ldrh	r3, [r3, #0]
    5f1c:	b29a      	uxth	r2, r3
    5f1e:	3a01      	subs	r2, #1
    5f20:	b291      	uxth	r1, r2
    5f22:	2216      	movs	r2, #22
    5f24:	18ba      	adds	r2, r7, r2
    5f26:	8011      	strh	r1, [r2, #0]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d000      	beq.n	5f2e <i2cReadBytes+0x7a>
			break;
    5f2c:	e008      	b.n	5f40 <i2cReadBytes+0x8c>
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    5f2e:	4a1c      	ldr	r2, [pc, #112]	; (5fa0 <i2cReadBytes+0xec>)
    5f30:	2308      	movs	r3, #8
    5f32:	18fb      	adds	r3, r7, r3
    5f34:	1c10      	adds	r0, r2, #0
    5f36:	1c19      	adds	r1, r3, #0
    5f38:	4b1a      	ldr	r3, [pc, #104]	; (5fa4 <i2cReadBytes+0xf0>)
    5f3a:	4798      	blx	r3
    5f3c:	1e03      	subs	r3, r0, #0
    5f3e:	d1ea      	bne.n	5f16 <i2cReadBytes+0x62>
		if (timeout--) {
			break;
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    5f40:	2316      	movs	r3, #22
    5f42:	18fb      	adds	r3, r7, r3
    5f44:	22fa      	movs	r2, #250	; 0xfa
    5f46:	00d2      	lsls	r2, r2, #3
    5f48:	801a      	strh	r2, [r3, #0]
	packet.data = dest;
    5f4a:	2308      	movs	r3, #8
    5f4c:	18fb      	adds	r3, r7, r3
    5f4e:	683a      	ldr	r2, [r7, #0]
    5f50:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    5f52:	1dbb      	adds	r3, r7, #6
    5f54:	781b      	ldrb	r3, [r3, #0]
    5f56:	b29a      	uxth	r2, r3
    5f58:	2308      	movs	r3, #8
    5f5a:	18fb      	adds	r3, r7, r3
    5f5c:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    5f5e:	e00b      	b.n	5f78 <i2cReadBytes+0xc4>
	STATUS_OK) {
		if (timeout--) {
    5f60:	2316      	movs	r3, #22
    5f62:	18fb      	adds	r3, r7, r3
    5f64:	881b      	ldrh	r3, [r3, #0]
    5f66:	b29a      	uxth	r2, r3
    5f68:	3a01      	subs	r2, #1
    5f6a:	b291      	uxth	r1, r2
    5f6c:	2216      	movs	r2, #22
    5f6e:	18ba      	adds	r2, r7, r2
    5f70:	8011      	strh	r1, [r2, #0]
    5f72:	2b00      	cmp	r3, #0
    5f74:	d000      	beq.n	5f78 <i2cReadBytes+0xc4>
			break;
    5f76:	e008      	b.n	5f8a <i2cReadBytes+0xd6>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = dest;
	packet.data_length = count;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    5f78:	4a09      	ldr	r2, [pc, #36]	; (5fa0 <i2cReadBytes+0xec>)
    5f7a:	2308      	movs	r3, #8
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	1c10      	adds	r0, r2, #0
    5f80:	1c19      	adds	r1, r3, #0
    5f82:	4b09      	ldr	r3, [pc, #36]	; (5fa8 <i2cReadBytes+0xf4>)
    5f84:	4798      	blx	r3
    5f86:	1e03      	subs	r3, r0, #0
    5f88:	d1ea      	bne.n	5f60 <i2cReadBytes+0xac>
		{
			dest[i] = Wire.read();
		}
	}*/
	
	return timeout;
    5f8a:	2316      	movs	r3, #22
    5f8c:	18fb      	adds	r3, r7, r3
    5f8e:	881b      	ldrh	r3, [r3, #0]
    5f90:	b21b      	sxth	r3, r3
}
    5f92:	1c18      	adds	r0, r3, #0
    5f94:	46bd      	mov	sp, r7
    5f96:	b006      	add	sp, #24
    5f98:	bd80      	pop	{r7, pc}
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	2000013d 	.word	0x2000013d
    5fa0:	200001c8 	.word	0x200001c8
    5fa4:	0000185d 	.word	0x0000185d
    5fa8:	000016a5 	.word	0x000016a5

00005fac <i2cWriteBytes>:

// Write a specified number of bytes over I2C to a given subAddress
uint16_t i2cWriteBytes(uint8_t subAddress, uint8_t * src, uint8_t count)
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b086      	sub	sp, #24
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	6039      	str	r1, [r7, #0]
    5fb4:	1c11      	adds	r1, r2, #0
    5fb6:	1dfb      	adds	r3, r7, #7
    5fb8:	1c02      	adds	r2, r0, #0
    5fba:	701a      	strb	r2, [r3, #0]
    5fbc:	1dbb      	adds	r3, r7, #6
    5fbe:	1c0a      	adds	r2, r1, #0
    5fc0:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;
    5fc2:	2316      	movs	r3, #22
    5fc4:	18fb      	adds	r3, r7, r3
    5fc6:	22fa      	movs	r2, #250	; 0xfa
    5fc8:	00d2      	lsls	r2, r2, #3
    5fca:	801a      	strh	r2, [r3, #0]
	
	uint8_t write_buffer = subAddress;
    5fcc:	2315      	movs	r3, #21
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	1dfa      	adds	r2, r7, #7
    5fd2:	7812      	ldrb	r2, [r2, #0]
    5fd4:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    5fd6:	4b2d      	ldr	r3, [pc, #180]	; (608c <i2cWriteBytes+0xe0>)
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	b29a      	uxth	r2, r3
    5fdc:	2308      	movs	r3, #8
    5fde:	18fb      	adds	r3, r7, r3
    5fe0:	801a      	strh	r2, [r3, #0]
    5fe2:	2308      	movs	r3, #8
    5fe4:	18fb      	adds	r3, r7, r3
    5fe6:	2201      	movs	r2, #1
    5fe8:	805a      	strh	r2, [r3, #2]
    5fea:	2308      	movs	r3, #8
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	2215      	movs	r2, #21
    5ff0:	18ba      	adds	r2, r7, r2
    5ff2:	605a      	str	r2, [r3, #4]
    5ff4:	2308      	movs	r3, #8
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	2200      	movs	r2, #0
    5ffa:	721a      	strb	r2, [r3, #8]
    5ffc:	2308      	movs	r3, #8
    5ffe:	18fb      	adds	r3, r7, r3
    6000:	2200      	movs	r2, #0
    6002:	725a      	strb	r2, [r3, #9]
    6004:	2308      	movs	r3, #8
    6006:	18fb      	adds	r3, r7, r3
    6008:	2200      	movs	r2, #0
    600a:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    600c:	e00b      	b.n	6026 <i2cWriteBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    600e:	2316      	movs	r3, #22
    6010:	18fb      	adds	r3, r7, r3
    6012:	881b      	ldrh	r3, [r3, #0]
    6014:	b29a      	uxth	r2, r3
    6016:	3a01      	subs	r2, #1
    6018:	b291      	uxth	r1, r2
    601a:	2216      	movs	r2, #22
    601c:	18ba      	adds	r2, r7, r2
    601e:	8011      	strh	r1, [r2, #0]
    6020:	2b00      	cmp	r3, #0
    6022:	d000      	beq.n	6026 <i2cWriteBytes+0x7a>
			break;
    6024:	e008      	b.n	6038 <i2cWriteBytes+0x8c>
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6026:	4a1a      	ldr	r2, [pc, #104]	; (6090 <i2cWriteBytes+0xe4>)
    6028:	2308      	movs	r3, #8
    602a:	18fb      	adds	r3, r7, r3
    602c:	1c10      	adds	r0, r2, #0
    602e:	1c19      	adds	r1, r3, #0
    6030:	4b18      	ldr	r3, [pc, #96]	; (6094 <i2cWriteBytes+0xe8>)
    6032:	4798      	blx	r3
    6034:	1e03      	subs	r3, r0, #0
    6036:	d1ea      	bne.n	600e <i2cWriteBytes+0x62>
		if (timeout--) {
			break;
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    6038:	2316      	movs	r3, #22
    603a:	18fb      	adds	r3, r7, r3
    603c:	22fa      	movs	r2, #250	; 0xfa
    603e:	00d2      	lsls	r2, r2, #3
    6040:	801a      	strh	r2, [r3, #0]
	packet.data = src;
    6042:	2308      	movs	r3, #8
    6044:	18fb      	adds	r3, r7, r3
    6046:	683a      	ldr	r2, [r7, #0]
    6048:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    604a:	1dbb      	adds	r3, r7, #6
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	b29a      	uxth	r2, r3
    6050:	2308      	movs	r3, #8
    6052:	18fb      	adds	r3, r7, r3
    6054:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6056:	e00b      	b.n	6070 <i2cWriteBytes+0xc4>
	STATUS_OK) {
		if (timeout--) {
    6058:	2316      	movs	r3, #22
    605a:	18fb      	adds	r3, r7, r3
    605c:	881b      	ldrh	r3, [r3, #0]
    605e:	b29a      	uxth	r2, r3
    6060:	3a01      	subs	r2, #1
    6062:	b291      	uxth	r1, r2
    6064:	2216      	movs	r2, #22
    6066:	18ba      	adds	r2, r7, r2
    6068:	8011      	strh	r1, [r2, #0]
    606a:	2b00      	cmp	r3, #0
    606c:	d000      	beq.n	6070 <i2cWriteBytes+0xc4>
			break;
    606e:	e008      	b.n	6082 <i2cWriteBytes+0xd6>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = src;
	packet.data_length = count;
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6070:	4a07      	ldr	r2, [pc, #28]	; (6090 <i2cWriteBytes+0xe4>)
    6072:	2308      	movs	r3, #8
    6074:	18fb      	adds	r3, r7, r3
    6076:	1c10      	adds	r0, r2, #0
    6078:	1c19      	adds	r1, r3, #0
    607a:	4b06      	ldr	r3, [pc, #24]	; (6094 <i2cWriteBytes+0xe8>)
    607c:	4798      	blx	r3
    607e:	1e03      	subs	r3, r0, #0
    6080:	d1ea      	bne.n	6058 <i2cWriteBytes+0xac>
	{
		Wire.write(src[i]);
	}	
	Wire.endTransmission(true);*/
	
	return true;	
    6082:	2301      	movs	r3, #1
}
    6084:	1c18      	adds	r0, r3, #0
    6086:	46bd      	mov	sp, r7
    6088:	b006      	add	sp, #24
    608a:	bd80      	pop	{r7, pc}
    608c:	2000013d 	.word	0x2000013d
    6090:	200001c8 	.word	0x200001c8
    6094:	0000185d 	.word	0x0000185d

00006098 <main>:
	port_pin_set_config(PIN_PB09, &config_port_pin);
}


int main (void)
{
    6098:	b590      	push	{r4, r7, lr}
    609a:	b08f      	sub	sp, #60	; 0x3c
    609c:	af02      	add	r7, sp, #8
    /* Initialize system */
	system_init();
    609e:	4b51      	ldr	r3, [pc, #324]	; (61e4 <main+0x14c>)
    60a0:	4798      	blx	r3
	//configure_LED_PWM();
	//configure_button_pins();
	
	if(!lipo_begin())
    60a2:	4b51      	ldr	r3, [pc, #324]	; (61e8 <main+0x150>)
    60a4:	4798      	blx	r3
	{
		
	}
	lipo_setCapacity(Capacity);
    60a6:	2396      	movs	r3, #150	; 0x96
    60a8:	00db      	lsls	r3, r3, #3
    60aa:	1c18      	adds	r0, r3, #0
    60ac:	4b4f      	ldr	r3, [pc, #316]	; (61ec <main+0x154>)
    60ae:	4798      	blx	r3

	uint16_t soc = lipo_soc(FILTERED);
    60b0:	2326      	movs	r3, #38	; 0x26
    60b2:	18fc      	adds	r4, r7, r3
    60b4:	2000      	movs	r0, #0
    60b6:	4b4e      	ldr	r3, [pc, #312]	; (61f0 <main+0x158>)
    60b8:	4798      	blx	r3
    60ba:	1c03      	adds	r3, r0, #0
    60bc:	8023      	strh	r3, [r4, #0]
	uint16_t volts = lipo_voltage();
    60be:	2324      	movs	r3, #36	; 0x24
    60c0:	18fc      	adds	r4, r7, r3
    60c2:	4b4c      	ldr	r3, [pc, #304]	; (61f4 <main+0x15c>)
    60c4:	4798      	blx	r3
    60c6:	1c03      	adds	r3, r0, #0
    60c8:	8023      	strh	r3, [r4, #0]
	int16_t current = lipo_current(AVG);
    60ca:	2322      	movs	r3, #34	; 0x22
    60cc:	18fc      	adds	r4, r7, r3
    60ce:	2000      	movs	r0, #0
    60d0:	4b49      	ldr	r3, [pc, #292]	; (61f8 <main+0x160>)
    60d2:	4798      	blx	r3
    60d4:	1c03      	adds	r3, r0, #0
    60d6:	8023      	strh	r3, [r4, #0]
	uint16_t totalCapacity = lipo_capacity(FULL);
    60d8:	2320      	movs	r3, #32
    60da:	18fc      	adds	r4, r7, r3
    60dc:	2001      	movs	r0, #1
    60de:	4b47      	ldr	r3, [pc, #284]	; (61fc <main+0x164>)
    60e0:	4798      	blx	r3
    60e2:	1c03      	adds	r3, r0, #0
    60e4:	8023      	strh	r3, [r4, #0]
	uint16_t remainingCapacity = lipo_capacity(REMAIN);
    60e6:	231e      	movs	r3, #30
    60e8:	18fc      	adds	r4, r7, r3
    60ea:	2000      	movs	r0, #0
    60ec:	4b43      	ldr	r3, [pc, #268]	; (61fc <main+0x164>)
    60ee:	4798      	blx	r3
    60f0:	1c03      	adds	r3, r0, #0
    60f2:	8023      	strh	r3, [r4, #0]
	int16_t power = lipo_power();
    60f4:	231c      	movs	r3, #28
    60f6:	18fc      	adds	r4, r7, r3
    60f8:	4b41      	ldr	r3, [pc, #260]	; (6200 <main+0x168>)
    60fa:	4798      	blx	r3
    60fc:	1c03      	adds	r3, r0, #0
    60fe:	8023      	strh	r3, [r4, #0]
	uint8_t health = lipo_soh(PERCENT);
    6100:	231b      	movs	r3, #27
    6102:	18fc      	adds	r4, r7, r3
    6104:	2000      	movs	r0, #0
    6106:	4b3f      	ldr	r3, [pc, #252]	; (6204 <main+0x16c>)
    6108:	4798      	blx	r3
    610a:	1c03      	adds	r3, r0, #0
    610c:	7023      	strb	r3, [r4, #0]
			break;
		}
	}*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    610e:	205b      	movs	r0, #91	; 0x5b
    6110:	2102      	movs	r1, #2
    6112:	2200      	movs	r2, #0
    6114:	4b3c      	ldr	r3, [pc, #240]	; (6208 <main+0x170>)
    6116:	4798      	blx	r3
	RFM_setHighPower(true); // Always use this for RFM69HCW
    6118:	2001      	movs	r0, #1
    611a:	4b3c      	ldr	r3, [pc, #240]	; (620c <main+0x174>)
    611c:	4798      	blx	r3

	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    611e:	4b3c      	ldr	r3, [pc, #240]	; (6210 <main+0x178>)
    6120:	1c18      	adds	r0, r3, #0
    6122:	4b3c      	ldr	r3, [pc, #240]	; (6214 <main+0x17c>)
    6124:	4798      	blx	r3


	int sendlength = 16;
    6126:	2310      	movs	r3, #16
    6128:	62fb      	str	r3, [r7, #44]	; 0x2c
	int index = 0;
    612a:	2300      	movs	r3, #0
    612c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(1)
	{
		char sendbuffer[16] = "Hello World!   ";
    612e:	1d3b      	adds	r3, r7, #4
    6130:	4a39      	ldr	r2, [pc, #228]	; (6218 <main+0x180>)
    6132:	ca13      	ldmia	r2!, {r0, r1, r4}
    6134:	c313      	stmia	r3!, {r0, r1, r4}
    6136:	6812      	ldr	r2, [r2, #0]
    6138:	601a      	str	r2, [r3, #0]
		// Set up a "buffer" for characters that we'll send:
		index++;
    613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    613c:	3301      	adds	r3, #1
    613e:	62bb      	str	r3, [r7, #40]	; 0x28
		if(index < 10)
    6140:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6142:	2b09      	cmp	r3, #9
    6144:	dc06      	bgt.n	6154 <main+0xbc>
			sendbuffer[15] = index + '0';
    6146:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6148:	b2db      	uxtb	r3, r3
    614a:	3330      	adds	r3, #48	; 0x30
    614c:	b2da      	uxtb	r2, r3
    614e:	1d3b      	adds	r3, r7, #4
    6150:	73da      	strb	r2, [r3, #15]
    6152:	e01b      	b.n	618c <main+0xf4>
		else if(index > 10 && index < 100)
    6154:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6156:	2b0a      	cmp	r3, #10
    6158:	dd18      	ble.n	618c <main+0xf4>
    615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    615c:	2b63      	cmp	r3, #99	; 0x63
    615e:	dc15      	bgt.n	618c <main+0xf4>
		{
			sendbuffer[14] = index/10 + '0';
    6160:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6162:	4b2e      	ldr	r3, [pc, #184]	; (621c <main+0x184>)
    6164:	1c10      	adds	r0, r2, #0
    6166:	210a      	movs	r1, #10
    6168:	4798      	blx	r3
    616a:	1c03      	adds	r3, r0, #0
    616c:	b2db      	uxtb	r3, r3
    616e:	3330      	adds	r3, #48	; 0x30
    6170:	b2da      	uxtb	r2, r3
    6172:	1d3b      	adds	r3, r7, #4
    6174:	739a      	strb	r2, [r3, #14]
			sendbuffer[15] = index%10 + '0';
    6176:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6178:	4b29      	ldr	r3, [pc, #164]	; (6220 <main+0x188>)
    617a:	1c10      	adds	r0, r2, #0
    617c:	210a      	movs	r1, #10
    617e:	4798      	blx	r3
    6180:	1c0b      	adds	r3, r1, #0
    6182:	b2db      	uxtb	r3, r3
    6184:	3330      	adds	r3, #48	; 0x30
    6186:	b2da      	uxtb	r2, r3
    6188:	1d3b      	adds	r3, r7, #4
    618a:	73da      	strb	r2, [r3, #15]
			//dbg_print_str("]\n");
			  
			// If you want acknowledgements, use RFM_sendWithRetry(): 
			if (USEACK)
			{
				int ACK = 0;
    618c:	2300      	movs	r3, #0
    618e:	617b      	str	r3, [r7, #20]
				if (RFM_sendWithRetry(TONODEID, sendbuffer, sendlength, 2, 100))
    6190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6192:	b2da      	uxtb	r2, r3
    6194:	1d39      	adds	r1, r7, #4
    6196:	2364      	movs	r3, #100	; 0x64
    6198:	9300      	str	r3, [sp, #0]
    619a:	2001      	movs	r0, #1
    619c:	2302      	movs	r3, #2
    619e:	4c21      	ldr	r4, [pc, #132]	; (6224 <main+0x18c>)
    61a0:	47a0      	blx	r4
    61a2:	1e03      	subs	r3, r0, #0
    61a4:	d002      	beq.n	61ac <main+0x114>
					ACK = 1;
    61a6:	2301      	movs	r3, #1
    61a8:	617b      	str	r3, [r7, #20]
    61aa:	e001      	b.n	61b0 <main+0x118>
				else
					ACK = 0;
    61ac:	2300      	movs	r3, #0
    61ae:	617b      	str	r3, [r7, #20]
			else // don't use ACK
			{
				RFM_send(TONODEID, sendbuffer, sendlength, false);
			}
			  
			sendlength = 0; // reset the packet
    61b0:	2300      	movs	r3, #0
    61b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// RECEIVING

	// In this section, we'll check with the RFM69HCW to see
	// if it has received any packets:

	if (RFM_receiveDone()) // Got one!
    61b4:	4b1c      	ldr	r3, [pc, #112]	; (6228 <main+0x190>)
    61b6:	4798      	blx	r3
    61b8:	1e03      	subs	r3, r0, #0
    61ba:	d012      	beq.n	61e2 <main+0x14a>
	{
		// The actual message is contained in the RFM_DATA array,
		// and is RFM_DATALEN bytes in size:
		  
		//for (byte i = 0; i < RFM_DATALEN; i++)
		RFM_DATALEN = RFM_DATALEN;
    61bc:	4b1b      	ldr	r3, [pc, #108]	; (622c <main+0x194>)
    61be:	881b      	ldrh	r3, [r3, #0]
    61c0:	b29a      	uxth	r2, r3
    61c2:	4b1a      	ldr	r3, [pc, #104]	; (622c <main+0x194>)
    61c4:	801a      	strh	r2, [r3, #0]
		// RFM_RSSI is the "Receive Signal Strength Indicator",
		// smaller numbers mean higher power.

		RFM_RSSI = RFM_RSSI;
    61c6:	4b1a      	ldr	r3, [pc, #104]	; (6230 <main+0x198>)
    61c8:	881b      	ldrh	r3, [r3, #0]
    61ca:	b29a      	uxth	r2, r3
    61cc:	4b18      	ldr	r3, [pc, #96]	; (6230 <main+0x198>)
    61ce:	801a      	strh	r2, [r3, #0]

		// Send an ACK if requested.
		// (You don't need this code if you're not using ACKs.)
		if (RFM_ACKRequested())
    61d0:	4b18      	ldr	r3, [pc, #96]	; (6234 <main+0x19c>)
    61d2:	4798      	blx	r3
    61d4:	1e03      	subs	r3, r0, #0
    61d6:	d004      	beq.n	61e2 <main+0x14a>
		{
			RFM_sendACK("", 0);
    61d8:	4b17      	ldr	r3, [pc, #92]	; (6238 <main+0x1a0>)
    61da:	1c18      	adds	r0, r3, #0
    61dc:	2100      	movs	r1, #0
    61de:	4b17      	ldr	r3, [pc, #92]	; (623c <main+0x1a4>)
    61e0:	4798      	blx	r3
		}
	}
  }
    61e2:	e7a4      	b.n	612e <main+0x96>
    61e4:	00003e45 	.word	0x00003e45
    61e8:	000055c1 	.word	0x000055c1
    61ec:	0000561d 	.word	0x0000561d
    61f0:	000057dd 	.word	0x000057dd
    61f4:	00005679 	.word	0x00005679
    61f8:	00005691 	.word	0x00005691
    61fc:	00005701 	.word	0x00005701
    6200:	000057c1 	.word	0x000057c1
    6204:	00005831 	.word	0x00005831
    6208:	0000486d 	.word	0x0000486d
    620c:	000047b5 	.word	0x000047b5
    6210:	00008050 	.word	0x00008050
    6214:	000052e9 	.word	0x000052e9
    6218:	00008068 	.word	0x00008068
    621c:	00006361 	.word	0x00006361
    6220:	0000652d 	.word	0x0000652d
    6224:	00004e15 	.word	0x00004e15
    6228:	0000528d 	.word	0x0000528d
    622c:	20000142 	.word	0x20000142
    6230:	20000238 	.word	0x20000238
    6234:	00004f11 	.word	0x00004f11
    6238:	00008064 	.word	0x00008064
    623c:	00004f45 	.word	0x00004f45

00006240 <__aeabi_uidiv>:
    6240:	2200      	movs	r2, #0
    6242:	0843      	lsrs	r3, r0, #1
    6244:	428b      	cmp	r3, r1
    6246:	d374      	bcc.n	6332 <__aeabi_uidiv+0xf2>
    6248:	0903      	lsrs	r3, r0, #4
    624a:	428b      	cmp	r3, r1
    624c:	d35f      	bcc.n	630e <__aeabi_uidiv+0xce>
    624e:	0a03      	lsrs	r3, r0, #8
    6250:	428b      	cmp	r3, r1
    6252:	d344      	bcc.n	62de <__aeabi_uidiv+0x9e>
    6254:	0b03      	lsrs	r3, r0, #12
    6256:	428b      	cmp	r3, r1
    6258:	d328      	bcc.n	62ac <__aeabi_uidiv+0x6c>
    625a:	0c03      	lsrs	r3, r0, #16
    625c:	428b      	cmp	r3, r1
    625e:	d30d      	bcc.n	627c <__aeabi_uidiv+0x3c>
    6260:	22ff      	movs	r2, #255	; 0xff
    6262:	0209      	lsls	r1, r1, #8
    6264:	ba12      	rev	r2, r2
    6266:	0c03      	lsrs	r3, r0, #16
    6268:	428b      	cmp	r3, r1
    626a:	d302      	bcc.n	6272 <__aeabi_uidiv+0x32>
    626c:	1212      	asrs	r2, r2, #8
    626e:	0209      	lsls	r1, r1, #8
    6270:	d065      	beq.n	633e <__aeabi_uidiv+0xfe>
    6272:	0b03      	lsrs	r3, r0, #12
    6274:	428b      	cmp	r3, r1
    6276:	d319      	bcc.n	62ac <__aeabi_uidiv+0x6c>
    6278:	e000      	b.n	627c <__aeabi_uidiv+0x3c>
    627a:	0a09      	lsrs	r1, r1, #8
    627c:	0bc3      	lsrs	r3, r0, #15
    627e:	428b      	cmp	r3, r1
    6280:	d301      	bcc.n	6286 <__aeabi_uidiv+0x46>
    6282:	03cb      	lsls	r3, r1, #15
    6284:	1ac0      	subs	r0, r0, r3
    6286:	4152      	adcs	r2, r2
    6288:	0b83      	lsrs	r3, r0, #14
    628a:	428b      	cmp	r3, r1
    628c:	d301      	bcc.n	6292 <__aeabi_uidiv+0x52>
    628e:	038b      	lsls	r3, r1, #14
    6290:	1ac0      	subs	r0, r0, r3
    6292:	4152      	adcs	r2, r2
    6294:	0b43      	lsrs	r3, r0, #13
    6296:	428b      	cmp	r3, r1
    6298:	d301      	bcc.n	629e <__aeabi_uidiv+0x5e>
    629a:	034b      	lsls	r3, r1, #13
    629c:	1ac0      	subs	r0, r0, r3
    629e:	4152      	adcs	r2, r2
    62a0:	0b03      	lsrs	r3, r0, #12
    62a2:	428b      	cmp	r3, r1
    62a4:	d301      	bcc.n	62aa <__aeabi_uidiv+0x6a>
    62a6:	030b      	lsls	r3, r1, #12
    62a8:	1ac0      	subs	r0, r0, r3
    62aa:	4152      	adcs	r2, r2
    62ac:	0ac3      	lsrs	r3, r0, #11
    62ae:	428b      	cmp	r3, r1
    62b0:	d301      	bcc.n	62b6 <__aeabi_uidiv+0x76>
    62b2:	02cb      	lsls	r3, r1, #11
    62b4:	1ac0      	subs	r0, r0, r3
    62b6:	4152      	adcs	r2, r2
    62b8:	0a83      	lsrs	r3, r0, #10
    62ba:	428b      	cmp	r3, r1
    62bc:	d301      	bcc.n	62c2 <__aeabi_uidiv+0x82>
    62be:	028b      	lsls	r3, r1, #10
    62c0:	1ac0      	subs	r0, r0, r3
    62c2:	4152      	adcs	r2, r2
    62c4:	0a43      	lsrs	r3, r0, #9
    62c6:	428b      	cmp	r3, r1
    62c8:	d301      	bcc.n	62ce <__aeabi_uidiv+0x8e>
    62ca:	024b      	lsls	r3, r1, #9
    62cc:	1ac0      	subs	r0, r0, r3
    62ce:	4152      	adcs	r2, r2
    62d0:	0a03      	lsrs	r3, r0, #8
    62d2:	428b      	cmp	r3, r1
    62d4:	d301      	bcc.n	62da <__aeabi_uidiv+0x9a>
    62d6:	020b      	lsls	r3, r1, #8
    62d8:	1ac0      	subs	r0, r0, r3
    62da:	4152      	adcs	r2, r2
    62dc:	d2cd      	bcs.n	627a <__aeabi_uidiv+0x3a>
    62de:	09c3      	lsrs	r3, r0, #7
    62e0:	428b      	cmp	r3, r1
    62e2:	d301      	bcc.n	62e8 <__aeabi_uidiv+0xa8>
    62e4:	01cb      	lsls	r3, r1, #7
    62e6:	1ac0      	subs	r0, r0, r3
    62e8:	4152      	adcs	r2, r2
    62ea:	0983      	lsrs	r3, r0, #6
    62ec:	428b      	cmp	r3, r1
    62ee:	d301      	bcc.n	62f4 <__aeabi_uidiv+0xb4>
    62f0:	018b      	lsls	r3, r1, #6
    62f2:	1ac0      	subs	r0, r0, r3
    62f4:	4152      	adcs	r2, r2
    62f6:	0943      	lsrs	r3, r0, #5
    62f8:	428b      	cmp	r3, r1
    62fa:	d301      	bcc.n	6300 <__aeabi_uidiv+0xc0>
    62fc:	014b      	lsls	r3, r1, #5
    62fe:	1ac0      	subs	r0, r0, r3
    6300:	4152      	adcs	r2, r2
    6302:	0903      	lsrs	r3, r0, #4
    6304:	428b      	cmp	r3, r1
    6306:	d301      	bcc.n	630c <__aeabi_uidiv+0xcc>
    6308:	010b      	lsls	r3, r1, #4
    630a:	1ac0      	subs	r0, r0, r3
    630c:	4152      	adcs	r2, r2
    630e:	08c3      	lsrs	r3, r0, #3
    6310:	428b      	cmp	r3, r1
    6312:	d301      	bcc.n	6318 <__aeabi_uidiv+0xd8>
    6314:	00cb      	lsls	r3, r1, #3
    6316:	1ac0      	subs	r0, r0, r3
    6318:	4152      	adcs	r2, r2
    631a:	0883      	lsrs	r3, r0, #2
    631c:	428b      	cmp	r3, r1
    631e:	d301      	bcc.n	6324 <__aeabi_uidiv+0xe4>
    6320:	008b      	lsls	r3, r1, #2
    6322:	1ac0      	subs	r0, r0, r3
    6324:	4152      	adcs	r2, r2
    6326:	0843      	lsrs	r3, r0, #1
    6328:	428b      	cmp	r3, r1
    632a:	d301      	bcc.n	6330 <__aeabi_uidiv+0xf0>
    632c:	004b      	lsls	r3, r1, #1
    632e:	1ac0      	subs	r0, r0, r3
    6330:	4152      	adcs	r2, r2
    6332:	1a41      	subs	r1, r0, r1
    6334:	d200      	bcs.n	6338 <__aeabi_uidiv+0xf8>
    6336:	4601      	mov	r1, r0
    6338:	4152      	adcs	r2, r2
    633a:	4610      	mov	r0, r2
    633c:	4770      	bx	lr
    633e:	e7ff      	b.n	6340 <__aeabi_uidiv+0x100>
    6340:	b501      	push	{r0, lr}
    6342:	2000      	movs	r0, #0
    6344:	f000 f8fc 	bl	6540 <__aeabi_idiv0>
    6348:	bd02      	pop	{r1, pc}
    634a:	46c0      	nop			; (mov r8, r8)

0000634c <__aeabi_uidivmod>:
    634c:	2900      	cmp	r1, #0
    634e:	d0f7      	beq.n	6340 <__aeabi_uidiv+0x100>
    6350:	b503      	push	{r0, r1, lr}
    6352:	f7ff ff75 	bl	6240 <__aeabi_uidiv>
    6356:	bc0e      	pop	{r1, r2, r3}
    6358:	4342      	muls	r2, r0
    635a:	1a89      	subs	r1, r1, r2
    635c:	4718      	bx	r3
    635e:	46c0      	nop			; (mov r8, r8)

00006360 <__aeabi_idiv>:
    6360:	4603      	mov	r3, r0
    6362:	430b      	orrs	r3, r1
    6364:	d47f      	bmi.n	6466 <__aeabi_idiv+0x106>
    6366:	2200      	movs	r2, #0
    6368:	0843      	lsrs	r3, r0, #1
    636a:	428b      	cmp	r3, r1
    636c:	d374      	bcc.n	6458 <__aeabi_idiv+0xf8>
    636e:	0903      	lsrs	r3, r0, #4
    6370:	428b      	cmp	r3, r1
    6372:	d35f      	bcc.n	6434 <__aeabi_idiv+0xd4>
    6374:	0a03      	lsrs	r3, r0, #8
    6376:	428b      	cmp	r3, r1
    6378:	d344      	bcc.n	6404 <__aeabi_idiv+0xa4>
    637a:	0b03      	lsrs	r3, r0, #12
    637c:	428b      	cmp	r3, r1
    637e:	d328      	bcc.n	63d2 <__aeabi_idiv+0x72>
    6380:	0c03      	lsrs	r3, r0, #16
    6382:	428b      	cmp	r3, r1
    6384:	d30d      	bcc.n	63a2 <__aeabi_idiv+0x42>
    6386:	22ff      	movs	r2, #255	; 0xff
    6388:	0209      	lsls	r1, r1, #8
    638a:	ba12      	rev	r2, r2
    638c:	0c03      	lsrs	r3, r0, #16
    638e:	428b      	cmp	r3, r1
    6390:	d302      	bcc.n	6398 <__aeabi_idiv+0x38>
    6392:	1212      	asrs	r2, r2, #8
    6394:	0209      	lsls	r1, r1, #8
    6396:	d065      	beq.n	6464 <__aeabi_idiv+0x104>
    6398:	0b03      	lsrs	r3, r0, #12
    639a:	428b      	cmp	r3, r1
    639c:	d319      	bcc.n	63d2 <__aeabi_idiv+0x72>
    639e:	e000      	b.n	63a2 <__aeabi_idiv+0x42>
    63a0:	0a09      	lsrs	r1, r1, #8
    63a2:	0bc3      	lsrs	r3, r0, #15
    63a4:	428b      	cmp	r3, r1
    63a6:	d301      	bcc.n	63ac <__aeabi_idiv+0x4c>
    63a8:	03cb      	lsls	r3, r1, #15
    63aa:	1ac0      	subs	r0, r0, r3
    63ac:	4152      	adcs	r2, r2
    63ae:	0b83      	lsrs	r3, r0, #14
    63b0:	428b      	cmp	r3, r1
    63b2:	d301      	bcc.n	63b8 <__aeabi_idiv+0x58>
    63b4:	038b      	lsls	r3, r1, #14
    63b6:	1ac0      	subs	r0, r0, r3
    63b8:	4152      	adcs	r2, r2
    63ba:	0b43      	lsrs	r3, r0, #13
    63bc:	428b      	cmp	r3, r1
    63be:	d301      	bcc.n	63c4 <__aeabi_idiv+0x64>
    63c0:	034b      	lsls	r3, r1, #13
    63c2:	1ac0      	subs	r0, r0, r3
    63c4:	4152      	adcs	r2, r2
    63c6:	0b03      	lsrs	r3, r0, #12
    63c8:	428b      	cmp	r3, r1
    63ca:	d301      	bcc.n	63d0 <__aeabi_idiv+0x70>
    63cc:	030b      	lsls	r3, r1, #12
    63ce:	1ac0      	subs	r0, r0, r3
    63d0:	4152      	adcs	r2, r2
    63d2:	0ac3      	lsrs	r3, r0, #11
    63d4:	428b      	cmp	r3, r1
    63d6:	d301      	bcc.n	63dc <__aeabi_idiv+0x7c>
    63d8:	02cb      	lsls	r3, r1, #11
    63da:	1ac0      	subs	r0, r0, r3
    63dc:	4152      	adcs	r2, r2
    63de:	0a83      	lsrs	r3, r0, #10
    63e0:	428b      	cmp	r3, r1
    63e2:	d301      	bcc.n	63e8 <__aeabi_idiv+0x88>
    63e4:	028b      	lsls	r3, r1, #10
    63e6:	1ac0      	subs	r0, r0, r3
    63e8:	4152      	adcs	r2, r2
    63ea:	0a43      	lsrs	r3, r0, #9
    63ec:	428b      	cmp	r3, r1
    63ee:	d301      	bcc.n	63f4 <__aeabi_idiv+0x94>
    63f0:	024b      	lsls	r3, r1, #9
    63f2:	1ac0      	subs	r0, r0, r3
    63f4:	4152      	adcs	r2, r2
    63f6:	0a03      	lsrs	r3, r0, #8
    63f8:	428b      	cmp	r3, r1
    63fa:	d301      	bcc.n	6400 <__aeabi_idiv+0xa0>
    63fc:	020b      	lsls	r3, r1, #8
    63fe:	1ac0      	subs	r0, r0, r3
    6400:	4152      	adcs	r2, r2
    6402:	d2cd      	bcs.n	63a0 <__aeabi_idiv+0x40>
    6404:	09c3      	lsrs	r3, r0, #7
    6406:	428b      	cmp	r3, r1
    6408:	d301      	bcc.n	640e <__aeabi_idiv+0xae>
    640a:	01cb      	lsls	r3, r1, #7
    640c:	1ac0      	subs	r0, r0, r3
    640e:	4152      	adcs	r2, r2
    6410:	0983      	lsrs	r3, r0, #6
    6412:	428b      	cmp	r3, r1
    6414:	d301      	bcc.n	641a <__aeabi_idiv+0xba>
    6416:	018b      	lsls	r3, r1, #6
    6418:	1ac0      	subs	r0, r0, r3
    641a:	4152      	adcs	r2, r2
    641c:	0943      	lsrs	r3, r0, #5
    641e:	428b      	cmp	r3, r1
    6420:	d301      	bcc.n	6426 <__aeabi_idiv+0xc6>
    6422:	014b      	lsls	r3, r1, #5
    6424:	1ac0      	subs	r0, r0, r3
    6426:	4152      	adcs	r2, r2
    6428:	0903      	lsrs	r3, r0, #4
    642a:	428b      	cmp	r3, r1
    642c:	d301      	bcc.n	6432 <__aeabi_idiv+0xd2>
    642e:	010b      	lsls	r3, r1, #4
    6430:	1ac0      	subs	r0, r0, r3
    6432:	4152      	adcs	r2, r2
    6434:	08c3      	lsrs	r3, r0, #3
    6436:	428b      	cmp	r3, r1
    6438:	d301      	bcc.n	643e <__aeabi_idiv+0xde>
    643a:	00cb      	lsls	r3, r1, #3
    643c:	1ac0      	subs	r0, r0, r3
    643e:	4152      	adcs	r2, r2
    6440:	0883      	lsrs	r3, r0, #2
    6442:	428b      	cmp	r3, r1
    6444:	d301      	bcc.n	644a <__aeabi_idiv+0xea>
    6446:	008b      	lsls	r3, r1, #2
    6448:	1ac0      	subs	r0, r0, r3
    644a:	4152      	adcs	r2, r2
    644c:	0843      	lsrs	r3, r0, #1
    644e:	428b      	cmp	r3, r1
    6450:	d301      	bcc.n	6456 <__aeabi_idiv+0xf6>
    6452:	004b      	lsls	r3, r1, #1
    6454:	1ac0      	subs	r0, r0, r3
    6456:	4152      	adcs	r2, r2
    6458:	1a41      	subs	r1, r0, r1
    645a:	d200      	bcs.n	645e <__aeabi_idiv+0xfe>
    645c:	4601      	mov	r1, r0
    645e:	4152      	adcs	r2, r2
    6460:	4610      	mov	r0, r2
    6462:	4770      	bx	lr
    6464:	e05d      	b.n	6522 <__aeabi_idiv+0x1c2>
    6466:	0fca      	lsrs	r2, r1, #31
    6468:	d000      	beq.n	646c <__aeabi_idiv+0x10c>
    646a:	4249      	negs	r1, r1
    646c:	1003      	asrs	r3, r0, #32
    646e:	d300      	bcc.n	6472 <__aeabi_idiv+0x112>
    6470:	4240      	negs	r0, r0
    6472:	4053      	eors	r3, r2
    6474:	2200      	movs	r2, #0
    6476:	469c      	mov	ip, r3
    6478:	0903      	lsrs	r3, r0, #4
    647a:	428b      	cmp	r3, r1
    647c:	d32d      	bcc.n	64da <__aeabi_idiv+0x17a>
    647e:	0a03      	lsrs	r3, r0, #8
    6480:	428b      	cmp	r3, r1
    6482:	d312      	bcc.n	64aa <__aeabi_idiv+0x14a>
    6484:	22fc      	movs	r2, #252	; 0xfc
    6486:	0189      	lsls	r1, r1, #6
    6488:	ba12      	rev	r2, r2
    648a:	0a03      	lsrs	r3, r0, #8
    648c:	428b      	cmp	r3, r1
    648e:	d30c      	bcc.n	64aa <__aeabi_idiv+0x14a>
    6490:	0189      	lsls	r1, r1, #6
    6492:	1192      	asrs	r2, r2, #6
    6494:	428b      	cmp	r3, r1
    6496:	d308      	bcc.n	64aa <__aeabi_idiv+0x14a>
    6498:	0189      	lsls	r1, r1, #6
    649a:	1192      	asrs	r2, r2, #6
    649c:	428b      	cmp	r3, r1
    649e:	d304      	bcc.n	64aa <__aeabi_idiv+0x14a>
    64a0:	0189      	lsls	r1, r1, #6
    64a2:	d03a      	beq.n	651a <__aeabi_idiv+0x1ba>
    64a4:	1192      	asrs	r2, r2, #6
    64a6:	e000      	b.n	64aa <__aeabi_idiv+0x14a>
    64a8:	0989      	lsrs	r1, r1, #6
    64aa:	09c3      	lsrs	r3, r0, #7
    64ac:	428b      	cmp	r3, r1
    64ae:	d301      	bcc.n	64b4 <__aeabi_idiv+0x154>
    64b0:	01cb      	lsls	r3, r1, #7
    64b2:	1ac0      	subs	r0, r0, r3
    64b4:	4152      	adcs	r2, r2
    64b6:	0983      	lsrs	r3, r0, #6
    64b8:	428b      	cmp	r3, r1
    64ba:	d301      	bcc.n	64c0 <__aeabi_idiv+0x160>
    64bc:	018b      	lsls	r3, r1, #6
    64be:	1ac0      	subs	r0, r0, r3
    64c0:	4152      	adcs	r2, r2
    64c2:	0943      	lsrs	r3, r0, #5
    64c4:	428b      	cmp	r3, r1
    64c6:	d301      	bcc.n	64cc <__aeabi_idiv+0x16c>
    64c8:	014b      	lsls	r3, r1, #5
    64ca:	1ac0      	subs	r0, r0, r3
    64cc:	4152      	adcs	r2, r2
    64ce:	0903      	lsrs	r3, r0, #4
    64d0:	428b      	cmp	r3, r1
    64d2:	d301      	bcc.n	64d8 <__aeabi_idiv+0x178>
    64d4:	010b      	lsls	r3, r1, #4
    64d6:	1ac0      	subs	r0, r0, r3
    64d8:	4152      	adcs	r2, r2
    64da:	08c3      	lsrs	r3, r0, #3
    64dc:	428b      	cmp	r3, r1
    64de:	d301      	bcc.n	64e4 <__aeabi_idiv+0x184>
    64e0:	00cb      	lsls	r3, r1, #3
    64e2:	1ac0      	subs	r0, r0, r3
    64e4:	4152      	adcs	r2, r2
    64e6:	0883      	lsrs	r3, r0, #2
    64e8:	428b      	cmp	r3, r1
    64ea:	d301      	bcc.n	64f0 <__aeabi_idiv+0x190>
    64ec:	008b      	lsls	r3, r1, #2
    64ee:	1ac0      	subs	r0, r0, r3
    64f0:	4152      	adcs	r2, r2
    64f2:	d2d9      	bcs.n	64a8 <__aeabi_idiv+0x148>
    64f4:	0843      	lsrs	r3, r0, #1
    64f6:	428b      	cmp	r3, r1
    64f8:	d301      	bcc.n	64fe <__aeabi_idiv+0x19e>
    64fa:	004b      	lsls	r3, r1, #1
    64fc:	1ac0      	subs	r0, r0, r3
    64fe:	4152      	adcs	r2, r2
    6500:	1a41      	subs	r1, r0, r1
    6502:	d200      	bcs.n	6506 <__aeabi_idiv+0x1a6>
    6504:	4601      	mov	r1, r0
    6506:	4663      	mov	r3, ip
    6508:	4152      	adcs	r2, r2
    650a:	105b      	asrs	r3, r3, #1
    650c:	4610      	mov	r0, r2
    650e:	d301      	bcc.n	6514 <__aeabi_idiv+0x1b4>
    6510:	4240      	negs	r0, r0
    6512:	2b00      	cmp	r3, #0
    6514:	d500      	bpl.n	6518 <__aeabi_idiv+0x1b8>
    6516:	4249      	negs	r1, r1
    6518:	4770      	bx	lr
    651a:	4663      	mov	r3, ip
    651c:	105b      	asrs	r3, r3, #1
    651e:	d300      	bcc.n	6522 <__aeabi_idiv+0x1c2>
    6520:	4240      	negs	r0, r0
    6522:	b501      	push	{r0, lr}
    6524:	2000      	movs	r0, #0
    6526:	f000 f80b 	bl	6540 <__aeabi_idiv0>
    652a:	bd02      	pop	{r1, pc}

0000652c <__aeabi_idivmod>:
    652c:	2900      	cmp	r1, #0
    652e:	d0f8      	beq.n	6522 <__aeabi_idiv+0x1c2>
    6530:	b503      	push	{r0, r1, lr}
    6532:	f7ff ff15 	bl	6360 <__aeabi_idiv>
    6536:	bc0e      	pop	{r1, r2, r3}
    6538:	4342      	muls	r2, r0
    653a:	1a89      	subs	r1, r1, r2
    653c:	4718      	bx	r3
    653e:	46c0      	nop			; (mov r8, r8)

00006540 <__aeabi_idiv0>:
    6540:	4770      	bx	lr
    6542:	46c0      	nop			; (mov r8, r8)

00006544 <__aeabi_dadd>:
    6544:	b5f0      	push	{r4, r5, r6, r7, lr}
    6546:	4645      	mov	r5, r8
    6548:	4657      	mov	r7, sl
    654a:	464e      	mov	r6, r9
    654c:	4694      	mov	ip, r2
    654e:	004c      	lsls	r4, r1, #1
    6550:	030a      	lsls	r2, r1, #12
    6552:	0fc9      	lsrs	r1, r1, #31
    6554:	b4e0      	push	{r5, r6, r7}
    6556:	4688      	mov	r8, r1
    6558:	1c0e      	adds	r6, r1, #0
    655a:	0319      	lsls	r1, r3, #12
    655c:	0f47      	lsrs	r7, r0, #29
    655e:	00c5      	lsls	r5, r0, #3
    6560:	0a48      	lsrs	r0, r1, #9
    6562:	4661      	mov	r1, ip
    6564:	0f49      	lsrs	r1, r1, #29
    6566:	4301      	orrs	r1, r0
    6568:	4660      	mov	r0, ip
    656a:	0a52      	lsrs	r2, r2, #9
    656c:	4317      	orrs	r7, r2
    656e:	00c0      	lsls	r0, r0, #3
    6570:	005a      	lsls	r2, r3, #1
    6572:	0d64      	lsrs	r4, r4, #21
    6574:	0d52      	lsrs	r2, r2, #21
    6576:	0fdb      	lsrs	r3, r3, #31
    6578:	4684      	mov	ip, r0
    657a:	4598      	cmp	r8, r3
    657c:	d100      	bne.n	6580 <__aeabi_dadd+0x3c>
    657e:	e0a7      	b.n	66d0 <__aeabi_dadd+0x18c>
    6580:	1aa0      	subs	r0, r4, r2
    6582:	2800      	cmp	r0, #0
    6584:	dc00      	bgt.n	6588 <__aeabi_dadd+0x44>
    6586:	e101      	b.n	678c <__aeabi_dadd+0x248>
    6588:	2a00      	cmp	r2, #0
    658a:	d13d      	bne.n	6608 <__aeabi_dadd+0xc4>
    658c:	4663      	mov	r3, ip
    658e:	430b      	orrs	r3, r1
    6590:	d000      	beq.n	6594 <__aeabi_dadd+0x50>
    6592:	e0d4      	b.n	673e <__aeabi_dadd+0x1fa>
    6594:	076b      	lsls	r3, r5, #29
    6596:	d100      	bne.n	659a <__aeabi_dadd+0x56>
    6598:	e088      	b.n	66ac <__aeabi_dadd+0x168>
    659a:	230f      	movs	r3, #15
    659c:	402b      	ands	r3, r5
    659e:	2b04      	cmp	r3, #4
    65a0:	d100      	bne.n	65a4 <__aeabi_dadd+0x60>
    65a2:	e083      	b.n	66ac <__aeabi_dadd+0x168>
    65a4:	1d2a      	adds	r2, r5, #4
    65a6:	42aa      	cmp	r2, r5
    65a8:	41ad      	sbcs	r5, r5
    65aa:	2380      	movs	r3, #128	; 0x80
    65ac:	426d      	negs	r5, r5
    65ae:	197f      	adds	r7, r7, r5
    65b0:	041b      	lsls	r3, r3, #16
    65b2:	403b      	ands	r3, r7
    65b4:	4646      	mov	r6, r8
    65b6:	1c15      	adds	r5, r2, #0
    65b8:	2b00      	cmp	r3, #0
    65ba:	d100      	bne.n	65be <__aeabi_dadd+0x7a>
    65bc:	e07c      	b.n	66b8 <__aeabi_dadd+0x174>
    65be:	4bcc      	ldr	r3, [pc, #816]	; (68f0 <__aeabi_dadd+0x3ac>)
    65c0:	3401      	adds	r4, #1
    65c2:	429c      	cmp	r4, r3
    65c4:	d100      	bne.n	65c8 <__aeabi_dadd+0x84>
    65c6:	e0fd      	b.n	67c4 <__aeabi_dadd+0x280>
    65c8:	1c3a      	adds	r2, r7, #0
    65ca:	4bca      	ldr	r3, [pc, #808]	; (68f4 <__aeabi_dadd+0x3b0>)
    65cc:	08ed      	lsrs	r5, r5, #3
    65ce:	401a      	ands	r2, r3
    65d0:	0750      	lsls	r0, r2, #29
    65d2:	0564      	lsls	r4, r4, #21
    65d4:	0252      	lsls	r2, r2, #9
    65d6:	4305      	orrs	r5, r0
    65d8:	0b12      	lsrs	r2, r2, #12
    65da:	0d64      	lsrs	r4, r4, #21
    65dc:	2100      	movs	r1, #0
    65de:	0312      	lsls	r2, r2, #12
    65e0:	0d0b      	lsrs	r3, r1, #20
    65e2:	051b      	lsls	r3, r3, #20
    65e4:	0564      	lsls	r4, r4, #21
    65e6:	0b12      	lsrs	r2, r2, #12
    65e8:	431a      	orrs	r2, r3
    65ea:	0863      	lsrs	r3, r4, #1
    65ec:	4cc2      	ldr	r4, [pc, #776]	; (68f8 <__aeabi_dadd+0x3b4>)
    65ee:	07f6      	lsls	r6, r6, #31
    65f0:	4014      	ands	r4, r2
    65f2:	431c      	orrs	r4, r3
    65f4:	0064      	lsls	r4, r4, #1
    65f6:	0864      	lsrs	r4, r4, #1
    65f8:	4334      	orrs	r4, r6
    65fa:	1c28      	adds	r0, r5, #0
    65fc:	1c21      	adds	r1, r4, #0
    65fe:	bc1c      	pop	{r2, r3, r4}
    6600:	4690      	mov	r8, r2
    6602:	4699      	mov	r9, r3
    6604:	46a2      	mov	sl, r4
    6606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6608:	4bb9      	ldr	r3, [pc, #740]	; (68f0 <__aeabi_dadd+0x3ac>)
    660a:	429c      	cmp	r4, r3
    660c:	d0c2      	beq.n	6594 <__aeabi_dadd+0x50>
    660e:	2380      	movs	r3, #128	; 0x80
    6610:	041b      	lsls	r3, r3, #16
    6612:	4319      	orrs	r1, r3
    6614:	2838      	cmp	r0, #56	; 0x38
    6616:	dd00      	ble.n	661a <__aeabi_dadd+0xd6>
    6618:	e0ec      	b.n	67f4 <__aeabi_dadd+0x2b0>
    661a:	281f      	cmp	r0, #31
    661c:	dd00      	ble.n	6620 <__aeabi_dadd+0xdc>
    661e:	e121      	b.n	6864 <__aeabi_dadd+0x320>
    6620:	2220      	movs	r2, #32
    6622:	1c0e      	adds	r6, r1, #0
    6624:	4663      	mov	r3, ip
    6626:	1a12      	subs	r2, r2, r0
    6628:	4096      	lsls	r6, r2
    662a:	40c3      	lsrs	r3, r0
    662c:	4333      	orrs	r3, r6
    662e:	4666      	mov	r6, ip
    6630:	4096      	lsls	r6, r2
    6632:	1c32      	adds	r2, r6, #0
    6634:	1e56      	subs	r6, r2, #1
    6636:	41b2      	sbcs	r2, r6
    6638:	4313      	orrs	r3, r2
    663a:	1c0a      	adds	r2, r1, #0
    663c:	40c2      	lsrs	r2, r0
    663e:	1aeb      	subs	r3, r5, r3
    6640:	429d      	cmp	r5, r3
    6642:	41b6      	sbcs	r6, r6
    6644:	1c1d      	adds	r5, r3, #0
    6646:	1aba      	subs	r2, r7, r2
    6648:	4276      	negs	r6, r6
    664a:	1b97      	subs	r7, r2, r6
    664c:	023b      	lsls	r3, r7, #8
    664e:	d400      	bmi.n	6652 <__aeabi_dadd+0x10e>
    6650:	e097      	b.n	6782 <__aeabi_dadd+0x23e>
    6652:	027a      	lsls	r2, r7, #9
    6654:	0a56      	lsrs	r6, r2, #9
    6656:	2e00      	cmp	r6, #0
    6658:	d100      	bne.n	665c <__aeabi_dadd+0x118>
    665a:	e0b6      	b.n	67ca <__aeabi_dadd+0x286>
    665c:	1c30      	adds	r0, r6, #0
    665e:	f001 fc39 	bl	7ed4 <__clzsi2>
    6662:	1c03      	adds	r3, r0, #0
    6664:	3b08      	subs	r3, #8
    6666:	2b1f      	cmp	r3, #31
    6668:	dd00      	ble.n	666c <__aeabi_dadd+0x128>
    666a:	e0b7      	b.n	67dc <__aeabi_dadd+0x298>
    666c:	409e      	lsls	r6, r3
    666e:	1c37      	adds	r7, r6, #0
    6670:	2628      	movs	r6, #40	; 0x28
    6672:	1c2a      	adds	r2, r5, #0
    6674:	1a36      	subs	r6, r6, r0
    6676:	40f2      	lsrs	r2, r6
    6678:	1c16      	adds	r6, r2, #0
    667a:	409d      	lsls	r5, r3
    667c:	433e      	orrs	r6, r7
    667e:	429c      	cmp	r4, r3
    6680:	dd00      	ble.n	6684 <__aeabi_dadd+0x140>
    6682:	e0b2      	b.n	67ea <__aeabi_dadd+0x2a6>
    6684:	1b1c      	subs	r4, r3, r4
    6686:	1c62      	adds	r2, r4, #1
    6688:	2a1f      	cmp	r2, #31
    668a:	dd00      	ble.n	668e <__aeabi_dadd+0x14a>
    668c:	e0d8      	b.n	6840 <__aeabi_dadd+0x2fc>
    668e:	231f      	movs	r3, #31
    6690:	1c29      	adds	r1, r5, #0
    6692:	1b1c      	subs	r4, r3, r4
    6694:	1c33      	adds	r3, r6, #0
    6696:	40a5      	lsls	r5, r4
    6698:	40a3      	lsls	r3, r4
    669a:	40d1      	lsrs	r1, r2
    669c:	1e6c      	subs	r4, r5, #1
    669e:	41a5      	sbcs	r5, r4
    66a0:	40d6      	lsrs	r6, r2
    66a2:	4319      	orrs	r1, r3
    66a4:	430d      	orrs	r5, r1
    66a6:	1c37      	adds	r7, r6, #0
    66a8:	2400      	movs	r4, #0
    66aa:	e773      	b.n	6594 <__aeabi_dadd+0x50>
    66ac:	2380      	movs	r3, #128	; 0x80
    66ae:	041b      	lsls	r3, r3, #16
    66b0:	403b      	ands	r3, r7
    66b2:	4646      	mov	r6, r8
    66b4:	d000      	beq.n	66b8 <__aeabi_dadd+0x174>
    66b6:	e782      	b.n	65be <__aeabi_dadd+0x7a>
    66b8:	4b8d      	ldr	r3, [pc, #564]	; (68f0 <__aeabi_dadd+0x3ac>)
    66ba:	08ed      	lsrs	r5, r5, #3
    66bc:	0778      	lsls	r0, r7, #29
    66be:	4305      	orrs	r5, r0
    66c0:	08fa      	lsrs	r2, r7, #3
    66c2:	429c      	cmp	r4, r3
    66c4:	d032      	beq.n	672c <__aeabi_dadd+0x1e8>
    66c6:	0312      	lsls	r2, r2, #12
    66c8:	0564      	lsls	r4, r4, #21
    66ca:	0b12      	lsrs	r2, r2, #12
    66cc:	0d64      	lsrs	r4, r4, #21
    66ce:	e785      	b.n	65dc <__aeabi_dadd+0x98>
    66d0:	1aa3      	subs	r3, r4, r2
    66d2:	2b00      	cmp	r3, #0
    66d4:	dc00      	bgt.n	66d8 <__aeabi_dadd+0x194>
    66d6:	e094      	b.n	6802 <__aeabi_dadd+0x2be>
    66d8:	2a00      	cmp	r2, #0
    66da:	d03c      	beq.n	6756 <__aeabi_dadd+0x212>
    66dc:	4a84      	ldr	r2, [pc, #528]	; (68f0 <__aeabi_dadd+0x3ac>)
    66de:	4294      	cmp	r4, r2
    66e0:	d100      	bne.n	66e4 <__aeabi_dadd+0x1a0>
    66e2:	e757      	b.n	6594 <__aeabi_dadd+0x50>
    66e4:	2280      	movs	r2, #128	; 0x80
    66e6:	0412      	lsls	r2, r2, #16
    66e8:	4311      	orrs	r1, r2
    66ea:	2b38      	cmp	r3, #56	; 0x38
    66ec:	dc00      	bgt.n	66f0 <__aeabi_dadd+0x1ac>
    66ee:	e105      	b.n	68fc <__aeabi_dadd+0x3b8>
    66f0:	4663      	mov	r3, ip
    66f2:	4319      	orrs	r1, r3
    66f4:	1e48      	subs	r0, r1, #1
    66f6:	4181      	sbcs	r1, r0
    66f8:	2200      	movs	r2, #0
    66fa:	b2c8      	uxtb	r0, r1
    66fc:	1940      	adds	r0, r0, r5
    66fe:	42a8      	cmp	r0, r5
    6700:	419b      	sbcs	r3, r3
    6702:	1c05      	adds	r5, r0, #0
    6704:	19d2      	adds	r2, r2, r7
    6706:	425b      	negs	r3, r3
    6708:	18d7      	adds	r7, r2, r3
    670a:	023b      	lsls	r3, r7, #8
    670c:	d539      	bpl.n	6782 <__aeabi_dadd+0x23e>
    670e:	4b78      	ldr	r3, [pc, #480]	; (68f0 <__aeabi_dadd+0x3ac>)
    6710:	3401      	adds	r4, #1
    6712:	429c      	cmp	r4, r3
    6714:	d100      	bne.n	6718 <__aeabi_dadd+0x1d4>
    6716:	e14c      	b.n	69b2 <__aeabi_dadd+0x46e>
    6718:	2001      	movs	r0, #1
    671a:	4a76      	ldr	r2, [pc, #472]	; (68f4 <__aeabi_dadd+0x3b0>)
    671c:	086b      	lsrs	r3, r5, #1
    671e:	403a      	ands	r2, r7
    6720:	4028      	ands	r0, r5
    6722:	4318      	orrs	r0, r3
    6724:	07d5      	lsls	r5, r2, #31
    6726:	4305      	orrs	r5, r0
    6728:	0857      	lsrs	r7, r2, #1
    672a:	e733      	b.n	6594 <__aeabi_dadd+0x50>
    672c:	1c2b      	adds	r3, r5, #0
    672e:	4313      	orrs	r3, r2
    6730:	d048      	beq.n	67c4 <__aeabi_dadd+0x280>
    6732:	2380      	movs	r3, #128	; 0x80
    6734:	031b      	lsls	r3, r3, #12
    6736:	431a      	orrs	r2, r3
    6738:	0312      	lsls	r2, r2, #12
    673a:	0b12      	lsrs	r2, r2, #12
    673c:	e74e      	b.n	65dc <__aeabi_dadd+0x98>
    673e:	3801      	subs	r0, #1
    6740:	2800      	cmp	r0, #0
    6742:	d178      	bne.n	6836 <__aeabi_dadd+0x2f2>
    6744:	4663      	mov	r3, ip
    6746:	1aee      	subs	r6, r5, r3
    6748:	42b5      	cmp	r5, r6
    674a:	419b      	sbcs	r3, r3
    674c:	1a7a      	subs	r2, r7, r1
    674e:	425b      	negs	r3, r3
    6750:	1ad7      	subs	r7, r2, r3
    6752:	1c35      	adds	r5, r6, #0
    6754:	e77a      	b.n	664c <__aeabi_dadd+0x108>
    6756:	1c02      	adds	r2, r0, #0
    6758:	430a      	orrs	r2, r1
    675a:	d100      	bne.n	675e <__aeabi_dadd+0x21a>
    675c:	e71a      	b.n	6594 <__aeabi_dadd+0x50>
    675e:	3b01      	subs	r3, #1
    6760:	2b00      	cmp	r3, #0
    6762:	d000      	beq.n	6766 <__aeabi_dadd+0x222>
    6764:	e0f2      	b.n	694c <__aeabi_dadd+0x408>
    6766:	1940      	adds	r0, r0, r5
    6768:	42a8      	cmp	r0, r5
    676a:	419b      	sbcs	r3, r3
    676c:	19ca      	adds	r2, r1, r7
    676e:	425b      	negs	r3, r3
    6770:	18d7      	adds	r7, r2, r3
    6772:	1c05      	adds	r5, r0, #0
    6774:	e7c9      	b.n	670a <__aeabi_dadd+0x1c6>
    6776:	1c13      	adds	r3, r2, #0
    6778:	4333      	orrs	r3, r6
    677a:	d100      	bne.n	677e <__aeabi_dadd+0x23a>
    677c:	e118      	b.n	69b0 <__aeabi_dadd+0x46c>
    677e:	1c17      	adds	r7, r2, #0
    6780:	1c35      	adds	r5, r6, #0
    6782:	4646      	mov	r6, r8
    6784:	076b      	lsls	r3, r5, #29
    6786:	d000      	beq.n	678a <__aeabi_dadd+0x246>
    6788:	e707      	b.n	659a <__aeabi_dadd+0x56>
    678a:	e795      	b.n	66b8 <__aeabi_dadd+0x174>
    678c:	2800      	cmp	r0, #0
    678e:	d17a      	bne.n	6886 <__aeabi_dadd+0x342>
    6790:	1c62      	adds	r2, r4, #1
    6792:	0552      	lsls	r2, r2, #21
    6794:	0d52      	lsrs	r2, r2, #21
    6796:	2a01      	cmp	r2, #1
    6798:	dc00      	bgt.n	679c <__aeabi_dadd+0x258>
    679a:	e0fb      	b.n	6994 <__aeabi_dadd+0x450>
    679c:	4662      	mov	r2, ip
    679e:	1aaa      	subs	r2, r5, r2
    67a0:	4295      	cmp	r5, r2
    67a2:	41b6      	sbcs	r6, r6
    67a4:	4691      	mov	r9, r2
    67a6:	1a78      	subs	r0, r7, r1
    67a8:	4272      	negs	r2, r6
    67aa:	1a86      	subs	r6, r0, r2
    67ac:	0232      	lsls	r2, r6, #8
    67ae:	d400      	bmi.n	67b2 <__aeabi_dadd+0x26e>
    67b0:	e093      	b.n	68da <__aeabi_dadd+0x396>
    67b2:	4662      	mov	r2, ip
    67b4:	1b55      	subs	r5, r2, r5
    67b6:	45ac      	cmp	ip, r5
    67b8:	4180      	sbcs	r0, r0
    67ba:	1bcf      	subs	r7, r1, r7
    67bc:	4240      	negs	r0, r0
    67be:	1a3e      	subs	r6, r7, r0
    67c0:	4698      	mov	r8, r3
    67c2:	e748      	b.n	6656 <__aeabi_dadd+0x112>
    67c4:	2200      	movs	r2, #0
    67c6:	2500      	movs	r5, #0
    67c8:	e708      	b.n	65dc <__aeabi_dadd+0x98>
    67ca:	1c28      	adds	r0, r5, #0
    67cc:	f001 fb82 	bl	7ed4 <__clzsi2>
    67d0:	3020      	adds	r0, #32
    67d2:	1c03      	adds	r3, r0, #0
    67d4:	3b08      	subs	r3, #8
    67d6:	2b1f      	cmp	r3, #31
    67d8:	dc00      	bgt.n	67dc <__aeabi_dadd+0x298>
    67da:	e747      	b.n	666c <__aeabi_dadd+0x128>
    67dc:	3828      	subs	r0, #40	; 0x28
    67de:	4085      	lsls	r5, r0
    67e0:	1c2e      	adds	r6, r5, #0
    67e2:	2500      	movs	r5, #0
    67e4:	429c      	cmp	r4, r3
    67e6:	dc00      	bgt.n	67ea <__aeabi_dadd+0x2a6>
    67e8:	e74c      	b.n	6684 <__aeabi_dadd+0x140>
    67ea:	4a42      	ldr	r2, [pc, #264]	; (68f4 <__aeabi_dadd+0x3b0>)
    67ec:	1ae4      	subs	r4, r4, r3
    67ee:	4016      	ands	r6, r2
    67f0:	1c37      	adds	r7, r6, #0
    67f2:	e6cf      	b.n	6594 <__aeabi_dadd+0x50>
    67f4:	4663      	mov	r3, ip
    67f6:	4319      	orrs	r1, r3
    67f8:	1e4b      	subs	r3, r1, #1
    67fa:	4199      	sbcs	r1, r3
    67fc:	2200      	movs	r2, #0
    67fe:	b2cb      	uxtb	r3, r1
    6800:	e71d      	b.n	663e <__aeabi_dadd+0xfa>
    6802:	2b00      	cmp	r3, #0
    6804:	d000      	beq.n	6808 <__aeabi_dadd+0x2c4>
    6806:	e0f2      	b.n	69ee <__aeabi_dadd+0x4aa>
    6808:	1c60      	adds	r0, r4, #1
    680a:	0543      	lsls	r3, r0, #21
    680c:	0d5b      	lsrs	r3, r3, #21
    680e:	2b01      	cmp	r3, #1
    6810:	dc00      	bgt.n	6814 <__aeabi_dadd+0x2d0>
    6812:	e0a4      	b.n	695e <__aeabi_dadd+0x41a>
    6814:	4b36      	ldr	r3, [pc, #216]	; (68f0 <__aeabi_dadd+0x3ac>)
    6816:	4298      	cmp	r0, r3
    6818:	d100      	bne.n	681c <__aeabi_dadd+0x2d8>
    681a:	e121      	b.n	6a60 <__aeabi_dadd+0x51c>
    681c:	4663      	mov	r3, ip
    681e:	195c      	adds	r4, r3, r5
    6820:	42ac      	cmp	r4, r5
    6822:	419b      	sbcs	r3, r3
    6824:	19cf      	adds	r7, r1, r7
    6826:	425b      	negs	r3, r3
    6828:	18fa      	adds	r2, r7, r3
    682a:	0864      	lsrs	r4, r4, #1
    682c:	07d5      	lsls	r5, r2, #31
    682e:	4325      	orrs	r5, r4
    6830:	0857      	lsrs	r7, r2, #1
    6832:	1c04      	adds	r4, r0, #0
    6834:	e6ae      	b.n	6594 <__aeabi_dadd+0x50>
    6836:	4b2e      	ldr	r3, [pc, #184]	; (68f0 <__aeabi_dadd+0x3ac>)
    6838:	429c      	cmp	r4, r3
    683a:	d000      	beq.n	683e <__aeabi_dadd+0x2fa>
    683c:	e6ea      	b.n	6614 <__aeabi_dadd+0xd0>
    683e:	e6a9      	b.n	6594 <__aeabi_dadd+0x50>
    6840:	1c21      	adds	r1, r4, #0
    6842:	1c33      	adds	r3, r6, #0
    6844:	391f      	subs	r1, #31
    6846:	40cb      	lsrs	r3, r1
    6848:	1c19      	adds	r1, r3, #0
    684a:	2a20      	cmp	r2, #32
    684c:	d100      	bne.n	6850 <__aeabi_dadd+0x30c>
    684e:	e082      	b.n	6956 <__aeabi_dadd+0x412>
    6850:	233f      	movs	r3, #63	; 0x3f
    6852:	1b1c      	subs	r4, r3, r4
    6854:	40a6      	lsls	r6, r4
    6856:	4335      	orrs	r5, r6
    6858:	1e6e      	subs	r6, r5, #1
    685a:	41b5      	sbcs	r5, r6
    685c:	2700      	movs	r7, #0
    685e:	430d      	orrs	r5, r1
    6860:	2400      	movs	r4, #0
    6862:	e78e      	b.n	6782 <__aeabi_dadd+0x23e>
    6864:	1c03      	adds	r3, r0, #0
    6866:	1c0e      	adds	r6, r1, #0
    6868:	3b20      	subs	r3, #32
    686a:	40de      	lsrs	r6, r3
    686c:	2820      	cmp	r0, #32
    686e:	d074      	beq.n	695a <__aeabi_dadd+0x416>
    6870:	2340      	movs	r3, #64	; 0x40
    6872:	1a1b      	subs	r3, r3, r0
    6874:	4099      	lsls	r1, r3
    6876:	1c0b      	adds	r3, r1, #0
    6878:	4662      	mov	r2, ip
    687a:	4313      	orrs	r3, r2
    687c:	1e59      	subs	r1, r3, #1
    687e:	418b      	sbcs	r3, r1
    6880:	2200      	movs	r2, #0
    6882:	4333      	orrs	r3, r6
    6884:	e6db      	b.n	663e <__aeabi_dadd+0xfa>
    6886:	2c00      	cmp	r4, #0
    6888:	d050      	beq.n	692c <__aeabi_dadd+0x3e8>
    688a:	4c19      	ldr	r4, [pc, #100]	; (68f0 <__aeabi_dadd+0x3ac>)
    688c:	42a2      	cmp	r2, r4
    688e:	d100      	bne.n	6892 <__aeabi_dadd+0x34e>
    6890:	e0a8      	b.n	69e4 <__aeabi_dadd+0x4a0>
    6892:	2480      	movs	r4, #128	; 0x80
    6894:	0424      	lsls	r4, r4, #16
    6896:	4240      	negs	r0, r0
    6898:	4327      	orrs	r7, r4
    689a:	2838      	cmp	r0, #56	; 0x38
    689c:	dd00      	ble.n	68a0 <__aeabi_dadd+0x35c>
    689e:	e0d9      	b.n	6a54 <__aeabi_dadd+0x510>
    68a0:	281f      	cmp	r0, #31
    68a2:	dd00      	ble.n	68a6 <__aeabi_dadd+0x362>
    68a4:	e139      	b.n	6b1a <__aeabi_dadd+0x5d6>
    68a6:	2420      	movs	r4, #32
    68a8:	1c3e      	adds	r6, r7, #0
    68aa:	1a24      	subs	r4, r4, r0
    68ac:	40a6      	lsls	r6, r4
    68ae:	46b0      	mov	r8, r6
    68b0:	1c2e      	adds	r6, r5, #0
    68b2:	46a1      	mov	r9, r4
    68b4:	40c6      	lsrs	r6, r0
    68b6:	4644      	mov	r4, r8
    68b8:	4326      	orrs	r6, r4
    68ba:	464c      	mov	r4, r9
    68bc:	40a5      	lsls	r5, r4
    68be:	1e6c      	subs	r4, r5, #1
    68c0:	41a5      	sbcs	r5, r4
    68c2:	40c7      	lsrs	r7, r0
    68c4:	4335      	orrs	r5, r6
    68c6:	4660      	mov	r0, ip
    68c8:	1b45      	subs	r5, r0, r5
    68ca:	1bcf      	subs	r7, r1, r7
    68cc:	45ac      	cmp	ip, r5
    68ce:	4189      	sbcs	r1, r1
    68d0:	4249      	negs	r1, r1
    68d2:	1a7f      	subs	r7, r7, r1
    68d4:	1c14      	adds	r4, r2, #0
    68d6:	4698      	mov	r8, r3
    68d8:	e6b8      	b.n	664c <__aeabi_dadd+0x108>
    68da:	464b      	mov	r3, r9
    68dc:	464d      	mov	r5, r9
    68de:	4333      	orrs	r3, r6
    68e0:	d000      	beq.n	68e4 <__aeabi_dadd+0x3a0>
    68e2:	e6b8      	b.n	6656 <__aeabi_dadd+0x112>
    68e4:	2600      	movs	r6, #0
    68e6:	2700      	movs	r7, #0
    68e8:	2400      	movs	r4, #0
    68ea:	2500      	movs	r5, #0
    68ec:	e6e4      	b.n	66b8 <__aeabi_dadd+0x174>
    68ee:	46c0      	nop			; (mov r8, r8)
    68f0:	000007ff 	.word	0x000007ff
    68f4:	ff7fffff 	.word	0xff7fffff
    68f8:	800fffff 	.word	0x800fffff
    68fc:	2b1f      	cmp	r3, #31
    68fe:	dc5b      	bgt.n	69b8 <__aeabi_dadd+0x474>
    6900:	2220      	movs	r2, #32
    6902:	1c08      	adds	r0, r1, #0
    6904:	1ad2      	subs	r2, r2, r3
    6906:	4090      	lsls	r0, r2
    6908:	4681      	mov	r9, r0
    690a:	4660      	mov	r0, ip
    690c:	4692      	mov	sl, r2
    690e:	40d8      	lsrs	r0, r3
    6910:	464a      	mov	r2, r9
    6912:	4310      	orrs	r0, r2
    6914:	4681      	mov	r9, r0
    6916:	4652      	mov	r2, sl
    6918:	4660      	mov	r0, ip
    691a:	4090      	lsls	r0, r2
    691c:	1c02      	adds	r2, r0, #0
    691e:	1e50      	subs	r0, r2, #1
    6920:	4182      	sbcs	r2, r0
    6922:	4648      	mov	r0, r9
    6924:	4310      	orrs	r0, r2
    6926:	1c0a      	adds	r2, r1, #0
    6928:	40da      	lsrs	r2, r3
    692a:	e6e7      	b.n	66fc <__aeabi_dadd+0x1b8>
    692c:	1c3c      	adds	r4, r7, #0
    692e:	432c      	orrs	r4, r5
    6930:	d058      	beq.n	69e4 <__aeabi_dadd+0x4a0>
    6932:	43c0      	mvns	r0, r0
    6934:	2800      	cmp	r0, #0
    6936:	d151      	bne.n	69dc <__aeabi_dadd+0x498>
    6938:	4660      	mov	r0, ip
    693a:	1b45      	subs	r5, r0, r5
    693c:	45ac      	cmp	ip, r5
    693e:	4180      	sbcs	r0, r0
    6940:	1bcf      	subs	r7, r1, r7
    6942:	4240      	negs	r0, r0
    6944:	1a3f      	subs	r7, r7, r0
    6946:	1c14      	adds	r4, r2, #0
    6948:	4698      	mov	r8, r3
    694a:	e67f      	b.n	664c <__aeabi_dadd+0x108>
    694c:	4a8f      	ldr	r2, [pc, #572]	; (6b8c <__aeabi_dadd+0x648>)
    694e:	4294      	cmp	r4, r2
    6950:	d000      	beq.n	6954 <__aeabi_dadd+0x410>
    6952:	e6ca      	b.n	66ea <__aeabi_dadd+0x1a6>
    6954:	e61e      	b.n	6594 <__aeabi_dadd+0x50>
    6956:	2600      	movs	r6, #0
    6958:	e77d      	b.n	6856 <__aeabi_dadd+0x312>
    695a:	2300      	movs	r3, #0
    695c:	e78c      	b.n	6878 <__aeabi_dadd+0x334>
    695e:	1c3b      	adds	r3, r7, #0
    6960:	432b      	orrs	r3, r5
    6962:	2c00      	cmp	r4, #0
    6964:	d000      	beq.n	6968 <__aeabi_dadd+0x424>
    6966:	e0bd      	b.n	6ae4 <__aeabi_dadd+0x5a0>
    6968:	2b00      	cmp	r3, #0
    696a:	d100      	bne.n	696e <__aeabi_dadd+0x42a>
    696c:	e0f5      	b.n	6b5a <__aeabi_dadd+0x616>
    696e:	4663      	mov	r3, ip
    6970:	430b      	orrs	r3, r1
    6972:	d100      	bne.n	6976 <__aeabi_dadd+0x432>
    6974:	e60e      	b.n	6594 <__aeabi_dadd+0x50>
    6976:	4663      	mov	r3, ip
    6978:	195b      	adds	r3, r3, r5
    697a:	42ab      	cmp	r3, r5
    697c:	4180      	sbcs	r0, r0
    697e:	19ca      	adds	r2, r1, r7
    6980:	4240      	negs	r0, r0
    6982:	1817      	adds	r7, r2, r0
    6984:	023a      	lsls	r2, r7, #8
    6986:	d400      	bmi.n	698a <__aeabi_dadd+0x446>
    6988:	e0fc      	b.n	6b84 <__aeabi_dadd+0x640>
    698a:	4a81      	ldr	r2, [pc, #516]	; (6b90 <__aeabi_dadd+0x64c>)
    698c:	1c1d      	adds	r5, r3, #0
    698e:	4017      	ands	r7, r2
    6990:	3401      	adds	r4, #1
    6992:	e5ff      	b.n	6594 <__aeabi_dadd+0x50>
    6994:	1c3a      	adds	r2, r7, #0
    6996:	432a      	orrs	r2, r5
    6998:	2c00      	cmp	r4, #0
    699a:	d151      	bne.n	6a40 <__aeabi_dadd+0x4fc>
    699c:	2a00      	cmp	r2, #0
    699e:	d000      	beq.n	69a2 <__aeabi_dadd+0x45e>
    69a0:	e085      	b.n	6aae <__aeabi_dadd+0x56a>
    69a2:	4662      	mov	r2, ip
    69a4:	430a      	orrs	r2, r1
    69a6:	d003      	beq.n	69b0 <__aeabi_dadd+0x46c>
    69a8:	1c0f      	adds	r7, r1, #0
    69aa:	4665      	mov	r5, ip
    69ac:	4698      	mov	r8, r3
    69ae:	e5f1      	b.n	6594 <__aeabi_dadd+0x50>
    69b0:	2600      	movs	r6, #0
    69b2:	2700      	movs	r7, #0
    69b4:	2500      	movs	r5, #0
    69b6:	e67f      	b.n	66b8 <__aeabi_dadd+0x174>
    69b8:	1c18      	adds	r0, r3, #0
    69ba:	1c0a      	adds	r2, r1, #0
    69bc:	3820      	subs	r0, #32
    69be:	40c2      	lsrs	r2, r0
    69c0:	2b20      	cmp	r3, #32
    69c2:	d100      	bne.n	69c6 <__aeabi_dadd+0x482>
    69c4:	e0a7      	b.n	6b16 <__aeabi_dadd+0x5d2>
    69c6:	2040      	movs	r0, #64	; 0x40
    69c8:	1ac0      	subs	r0, r0, r3
    69ca:	4081      	lsls	r1, r0
    69cc:	1c08      	adds	r0, r1, #0
    69ce:	4663      	mov	r3, ip
    69d0:	4318      	orrs	r0, r3
    69d2:	1e41      	subs	r1, r0, #1
    69d4:	4188      	sbcs	r0, r1
    69d6:	4310      	orrs	r0, r2
    69d8:	2200      	movs	r2, #0
    69da:	e68f      	b.n	66fc <__aeabi_dadd+0x1b8>
    69dc:	4c6b      	ldr	r4, [pc, #428]	; (6b8c <__aeabi_dadd+0x648>)
    69de:	42a2      	cmp	r2, r4
    69e0:	d000      	beq.n	69e4 <__aeabi_dadd+0x4a0>
    69e2:	e75a      	b.n	689a <__aeabi_dadd+0x356>
    69e4:	1c0f      	adds	r7, r1, #0
    69e6:	4665      	mov	r5, ip
    69e8:	1c14      	adds	r4, r2, #0
    69ea:	4698      	mov	r8, r3
    69ec:	e5d2      	b.n	6594 <__aeabi_dadd+0x50>
    69ee:	2c00      	cmp	r4, #0
    69f0:	d13a      	bne.n	6a68 <__aeabi_dadd+0x524>
    69f2:	1c38      	adds	r0, r7, #0
    69f4:	4328      	orrs	r0, r5
    69f6:	d071      	beq.n	6adc <__aeabi_dadd+0x598>
    69f8:	43db      	mvns	r3, r3
    69fa:	2b00      	cmp	r3, #0
    69fc:	d018      	beq.n	6a30 <__aeabi_dadd+0x4ec>
    69fe:	4863      	ldr	r0, [pc, #396]	; (6b8c <__aeabi_dadd+0x648>)
    6a00:	4282      	cmp	r2, r0
    6a02:	d06b      	beq.n	6adc <__aeabi_dadd+0x598>
    6a04:	2b38      	cmp	r3, #56	; 0x38
    6a06:	dd00      	ble.n	6a0a <__aeabi_dadd+0x4c6>
    6a08:	e09d      	b.n	6b46 <__aeabi_dadd+0x602>
    6a0a:	2b1f      	cmp	r3, #31
    6a0c:	dd00      	ble.n	6a10 <__aeabi_dadd+0x4cc>
    6a0e:	e0a7      	b.n	6b60 <__aeabi_dadd+0x61c>
    6a10:	2020      	movs	r0, #32
    6a12:	1c3c      	adds	r4, r7, #0
    6a14:	1ac0      	subs	r0, r0, r3
    6a16:	4084      	lsls	r4, r0
    6a18:	46a1      	mov	r9, r4
    6a1a:	1c2c      	adds	r4, r5, #0
    6a1c:	4682      	mov	sl, r0
    6a1e:	40dc      	lsrs	r4, r3
    6a20:	4648      	mov	r0, r9
    6a22:	4304      	orrs	r4, r0
    6a24:	4650      	mov	r0, sl
    6a26:	4085      	lsls	r5, r0
    6a28:	1e68      	subs	r0, r5, #1
    6a2a:	4185      	sbcs	r5, r0
    6a2c:	40df      	lsrs	r7, r3
    6a2e:	4325      	orrs	r5, r4
    6a30:	4465      	add	r5, ip
    6a32:	4565      	cmp	r5, ip
    6a34:	419b      	sbcs	r3, r3
    6a36:	187f      	adds	r7, r7, r1
    6a38:	425b      	negs	r3, r3
    6a3a:	18ff      	adds	r7, r7, r3
    6a3c:	1c14      	adds	r4, r2, #0
    6a3e:	e664      	b.n	670a <__aeabi_dadd+0x1c6>
    6a40:	2a00      	cmp	r2, #0
    6a42:	d119      	bne.n	6a78 <__aeabi_dadd+0x534>
    6a44:	4662      	mov	r2, ip
    6a46:	430a      	orrs	r2, r1
    6a48:	d077      	beq.n	6b3a <__aeabi_dadd+0x5f6>
    6a4a:	1c0f      	adds	r7, r1, #0
    6a4c:	4665      	mov	r5, ip
    6a4e:	4698      	mov	r8, r3
    6a50:	4c4e      	ldr	r4, [pc, #312]	; (6b8c <__aeabi_dadd+0x648>)
    6a52:	e59f      	b.n	6594 <__aeabi_dadd+0x50>
    6a54:	433d      	orrs	r5, r7
    6a56:	1e6f      	subs	r7, r5, #1
    6a58:	41bd      	sbcs	r5, r7
    6a5a:	2700      	movs	r7, #0
    6a5c:	b2ed      	uxtb	r5, r5
    6a5e:	e732      	b.n	68c6 <__aeabi_dadd+0x382>
    6a60:	1c04      	adds	r4, r0, #0
    6a62:	2700      	movs	r7, #0
    6a64:	2500      	movs	r5, #0
    6a66:	e627      	b.n	66b8 <__aeabi_dadd+0x174>
    6a68:	4848      	ldr	r0, [pc, #288]	; (6b8c <__aeabi_dadd+0x648>)
    6a6a:	4282      	cmp	r2, r0
    6a6c:	d036      	beq.n	6adc <__aeabi_dadd+0x598>
    6a6e:	2080      	movs	r0, #128	; 0x80
    6a70:	0400      	lsls	r0, r0, #16
    6a72:	425b      	negs	r3, r3
    6a74:	4307      	orrs	r7, r0
    6a76:	e7c5      	b.n	6a04 <__aeabi_dadd+0x4c0>
    6a78:	4662      	mov	r2, ip
    6a7a:	430a      	orrs	r2, r1
    6a7c:	d049      	beq.n	6b12 <__aeabi_dadd+0x5ce>
    6a7e:	2480      	movs	r4, #128	; 0x80
    6a80:	08ed      	lsrs	r5, r5, #3
    6a82:	0778      	lsls	r0, r7, #29
    6a84:	08fa      	lsrs	r2, r7, #3
    6a86:	0324      	lsls	r4, r4, #12
    6a88:	4328      	orrs	r0, r5
    6a8a:	4222      	tst	r2, r4
    6a8c:	d009      	beq.n	6aa2 <__aeabi_dadd+0x55e>
    6a8e:	08ce      	lsrs	r6, r1, #3
    6a90:	4226      	tst	r6, r4
    6a92:	d106      	bne.n	6aa2 <__aeabi_dadd+0x55e>
    6a94:	4662      	mov	r2, ip
    6a96:	074f      	lsls	r7, r1, #29
    6a98:	1c38      	adds	r0, r7, #0
    6a9a:	08d2      	lsrs	r2, r2, #3
    6a9c:	4310      	orrs	r0, r2
    6a9e:	4698      	mov	r8, r3
    6aa0:	1c32      	adds	r2, r6, #0
    6aa2:	00d2      	lsls	r2, r2, #3
    6aa4:	0f47      	lsrs	r7, r0, #29
    6aa6:	4317      	orrs	r7, r2
    6aa8:	00c5      	lsls	r5, r0, #3
    6aaa:	4c38      	ldr	r4, [pc, #224]	; (6b8c <__aeabi_dadd+0x648>)
    6aac:	e572      	b.n	6594 <__aeabi_dadd+0x50>
    6aae:	4662      	mov	r2, ip
    6ab0:	430a      	orrs	r2, r1
    6ab2:	d100      	bne.n	6ab6 <__aeabi_dadd+0x572>
    6ab4:	e56e      	b.n	6594 <__aeabi_dadd+0x50>
    6ab6:	4662      	mov	r2, ip
    6ab8:	1aae      	subs	r6, r5, r2
    6aba:	42b5      	cmp	r5, r6
    6abc:	4192      	sbcs	r2, r2
    6abe:	1a78      	subs	r0, r7, r1
    6ac0:	4252      	negs	r2, r2
    6ac2:	1a82      	subs	r2, r0, r2
    6ac4:	0210      	lsls	r0, r2, #8
    6ac6:	d400      	bmi.n	6aca <__aeabi_dadd+0x586>
    6ac8:	e655      	b.n	6776 <__aeabi_dadd+0x232>
    6aca:	4662      	mov	r2, ip
    6acc:	1b55      	subs	r5, r2, r5
    6ace:	45ac      	cmp	ip, r5
    6ad0:	4180      	sbcs	r0, r0
    6ad2:	1bca      	subs	r2, r1, r7
    6ad4:	4240      	negs	r0, r0
    6ad6:	1a17      	subs	r7, r2, r0
    6ad8:	4698      	mov	r8, r3
    6ada:	e55b      	b.n	6594 <__aeabi_dadd+0x50>
    6adc:	1c0f      	adds	r7, r1, #0
    6ade:	4665      	mov	r5, ip
    6ae0:	1c14      	adds	r4, r2, #0
    6ae2:	e557      	b.n	6594 <__aeabi_dadd+0x50>
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d034      	beq.n	6b52 <__aeabi_dadd+0x60e>
    6ae8:	4663      	mov	r3, ip
    6aea:	430b      	orrs	r3, r1
    6aec:	d011      	beq.n	6b12 <__aeabi_dadd+0x5ce>
    6aee:	2480      	movs	r4, #128	; 0x80
    6af0:	08ed      	lsrs	r5, r5, #3
    6af2:	0778      	lsls	r0, r7, #29
    6af4:	08fa      	lsrs	r2, r7, #3
    6af6:	0324      	lsls	r4, r4, #12
    6af8:	4328      	orrs	r0, r5
    6afa:	4222      	tst	r2, r4
    6afc:	d0d1      	beq.n	6aa2 <__aeabi_dadd+0x55e>
    6afe:	08cb      	lsrs	r3, r1, #3
    6b00:	4223      	tst	r3, r4
    6b02:	d1ce      	bne.n	6aa2 <__aeabi_dadd+0x55e>
    6b04:	4662      	mov	r2, ip
    6b06:	074f      	lsls	r7, r1, #29
    6b08:	1c38      	adds	r0, r7, #0
    6b0a:	08d2      	lsrs	r2, r2, #3
    6b0c:	4310      	orrs	r0, r2
    6b0e:	1c1a      	adds	r2, r3, #0
    6b10:	e7c7      	b.n	6aa2 <__aeabi_dadd+0x55e>
    6b12:	4c1e      	ldr	r4, [pc, #120]	; (6b8c <__aeabi_dadd+0x648>)
    6b14:	e53e      	b.n	6594 <__aeabi_dadd+0x50>
    6b16:	2000      	movs	r0, #0
    6b18:	e759      	b.n	69ce <__aeabi_dadd+0x48a>
    6b1a:	1c04      	adds	r4, r0, #0
    6b1c:	1c3e      	adds	r6, r7, #0
    6b1e:	3c20      	subs	r4, #32
    6b20:	40e6      	lsrs	r6, r4
    6b22:	1c34      	adds	r4, r6, #0
    6b24:	2820      	cmp	r0, #32
    6b26:	d02b      	beq.n	6b80 <__aeabi_dadd+0x63c>
    6b28:	2640      	movs	r6, #64	; 0x40
    6b2a:	1a30      	subs	r0, r6, r0
    6b2c:	4087      	lsls	r7, r0
    6b2e:	433d      	orrs	r5, r7
    6b30:	1e6f      	subs	r7, r5, #1
    6b32:	41bd      	sbcs	r5, r7
    6b34:	2700      	movs	r7, #0
    6b36:	4325      	orrs	r5, r4
    6b38:	e6c5      	b.n	68c6 <__aeabi_dadd+0x382>
    6b3a:	2780      	movs	r7, #128	; 0x80
    6b3c:	2600      	movs	r6, #0
    6b3e:	03ff      	lsls	r7, r7, #15
    6b40:	4c12      	ldr	r4, [pc, #72]	; (6b8c <__aeabi_dadd+0x648>)
    6b42:	2500      	movs	r5, #0
    6b44:	e5b8      	b.n	66b8 <__aeabi_dadd+0x174>
    6b46:	433d      	orrs	r5, r7
    6b48:	1e6f      	subs	r7, r5, #1
    6b4a:	41bd      	sbcs	r5, r7
    6b4c:	2700      	movs	r7, #0
    6b4e:	b2ed      	uxtb	r5, r5
    6b50:	e76e      	b.n	6a30 <__aeabi_dadd+0x4ec>
    6b52:	1c0f      	adds	r7, r1, #0
    6b54:	4665      	mov	r5, ip
    6b56:	4c0d      	ldr	r4, [pc, #52]	; (6b8c <__aeabi_dadd+0x648>)
    6b58:	e51c      	b.n	6594 <__aeabi_dadd+0x50>
    6b5a:	1c0f      	adds	r7, r1, #0
    6b5c:	4665      	mov	r5, ip
    6b5e:	e519      	b.n	6594 <__aeabi_dadd+0x50>
    6b60:	1c1c      	adds	r4, r3, #0
    6b62:	1c38      	adds	r0, r7, #0
    6b64:	3c20      	subs	r4, #32
    6b66:	40e0      	lsrs	r0, r4
    6b68:	1c04      	adds	r4, r0, #0
    6b6a:	2b20      	cmp	r3, #32
    6b6c:	d00c      	beq.n	6b88 <__aeabi_dadd+0x644>
    6b6e:	2040      	movs	r0, #64	; 0x40
    6b70:	1ac3      	subs	r3, r0, r3
    6b72:	409f      	lsls	r7, r3
    6b74:	433d      	orrs	r5, r7
    6b76:	1e6f      	subs	r7, r5, #1
    6b78:	41bd      	sbcs	r5, r7
    6b7a:	2700      	movs	r7, #0
    6b7c:	4325      	orrs	r5, r4
    6b7e:	e757      	b.n	6a30 <__aeabi_dadd+0x4ec>
    6b80:	2700      	movs	r7, #0
    6b82:	e7d4      	b.n	6b2e <__aeabi_dadd+0x5ea>
    6b84:	1c1d      	adds	r5, r3, #0
    6b86:	e5fc      	b.n	6782 <__aeabi_dadd+0x23e>
    6b88:	2700      	movs	r7, #0
    6b8a:	e7f3      	b.n	6b74 <__aeabi_dadd+0x630>
    6b8c:	000007ff 	.word	0x000007ff
    6b90:	ff7fffff 	.word	0xff7fffff

00006b94 <__aeabi_ddiv>:
    6b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b96:	465f      	mov	r7, fp
    6b98:	4656      	mov	r6, sl
    6b9a:	464d      	mov	r5, r9
    6b9c:	4644      	mov	r4, r8
    6b9e:	b4f0      	push	{r4, r5, r6, r7}
    6ba0:	030f      	lsls	r7, r1, #12
    6ba2:	b087      	sub	sp, #28
    6ba4:	4698      	mov	r8, r3
    6ba6:	004d      	lsls	r5, r1, #1
    6ba8:	0b3b      	lsrs	r3, r7, #12
    6baa:	0fcc      	lsrs	r4, r1, #31
    6bac:	1c06      	adds	r6, r0, #0
    6bae:	4692      	mov	sl, r2
    6bb0:	4681      	mov	r9, r0
    6bb2:	469b      	mov	fp, r3
    6bb4:	0d6d      	lsrs	r5, r5, #21
    6bb6:	9401      	str	r4, [sp, #4]
    6bb8:	d06b      	beq.n	6c92 <__aeabi_ddiv+0xfe>
    6bba:	4b66      	ldr	r3, [pc, #408]	; (6d54 <__aeabi_ddiv+0x1c0>)
    6bbc:	429d      	cmp	r5, r3
    6bbe:	d035      	beq.n	6c2c <__aeabi_ddiv+0x98>
    6bc0:	2780      	movs	r7, #128	; 0x80
    6bc2:	465b      	mov	r3, fp
    6bc4:	037f      	lsls	r7, r7, #13
    6bc6:	431f      	orrs	r7, r3
    6bc8:	00f3      	lsls	r3, r6, #3
    6bca:	4699      	mov	r9, r3
    6bcc:	4b62      	ldr	r3, [pc, #392]	; (6d58 <__aeabi_ddiv+0x1c4>)
    6bce:	00ff      	lsls	r7, r7, #3
    6bd0:	0f40      	lsrs	r0, r0, #29
    6bd2:	469c      	mov	ip, r3
    6bd4:	4307      	orrs	r7, r0
    6bd6:	2300      	movs	r3, #0
    6bd8:	46bb      	mov	fp, r7
    6bda:	2600      	movs	r6, #0
    6bdc:	4465      	add	r5, ip
    6bde:	9300      	str	r3, [sp, #0]
    6be0:	4642      	mov	r2, r8
    6be2:	0317      	lsls	r7, r2, #12
    6be4:	0050      	lsls	r0, r2, #1
    6be6:	0fd2      	lsrs	r2, r2, #31
    6be8:	4653      	mov	r3, sl
    6bea:	0b3f      	lsrs	r7, r7, #12
    6bec:	0d40      	lsrs	r0, r0, #21
    6bee:	4690      	mov	r8, r2
    6bf0:	d100      	bne.n	6bf4 <__aeabi_ddiv+0x60>
    6bf2:	e072      	b.n	6cda <__aeabi_ddiv+0x146>
    6bf4:	4a57      	ldr	r2, [pc, #348]	; (6d54 <__aeabi_ddiv+0x1c0>)
    6bf6:	4290      	cmp	r0, r2
    6bf8:	d067      	beq.n	6cca <__aeabi_ddiv+0x136>
    6bfa:	2380      	movs	r3, #128	; 0x80
    6bfc:	035b      	lsls	r3, r3, #13
    6bfe:	431f      	orrs	r7, r3
    6c00:	4653      	mov	r3, sl
    6c02:	4a55      	ldr	r2, [pc, #340]	; (6d58 <__aeabi_ddiv+0x1c4>)
    6c04:	0f5b      	lsrs	r3, r3, #29
    6c06:	00ff      	lsls	r7, r7, #3
    6c08:	431f      	orrs	r7, r3
    6c0a:	4694      	mov	ip, r2
    6c0c:	4653      	mov	r3, sl
    6c0e:	2100      	movs	r1, #0
    6c10:	00db      	lsls	r3, r3, #3
    6c12:	4460      	add	r0, ip
    6c14:	4642      	mov	r2, r8
    6c16:	4062      	eors	r2, r4
    6c18:	4692      	mov	sl, r2
    6c1a:	1a2d      	subs	r5, r5, r0
    6c1c:	430e      	orrs	r6, r1
    6c1e:	2e0f      	cmp	r6, #15
    6c20:	d900      	bls.n	6c24 <__aeabi_ddiv+0x90>
    6c22:	e0a1      	b.n	6d68 <__aeabi_ddiv+0x1d4>
    6c24:	484d      	ldr	r0, [pc, #308]	; (6d5c <__aeabi_ddiv+0x1c8>)
    6c26:	00b6      	lsls	r6, r6, #2
    6c28:	5980      	ldr	r0, [r0, r6]
    6c2a:	4687      	mov	pc, r0
    6c2c:	465b      	mov	r3, fp
    6c2e:	431e      	orrs	r6, r3
    6c30:	d000      	beq.n	6c34 <__aeabi_ddiv+0xa0>
    6c32:	e076      	b.n	6d22 <__aeabi_ddiv+0x18e>
    6c34:	2300      	movs	r3, #0
    6c36:	469b      	mov	fp, r3
    6c38:	4699      	mov	r9, r3
    6c3a:	3302      	adds	r3, #2
    6c3c:	2608      	movs	r6, #8
    6c3e:	9300      	str	r3, [sp, #0]
    6c40:	e7ce      	b.n	6be0 <__aeabi_ddiv+0x4c>
    6c42:	4699      	mov	r9, r3
    6c44:	4643      	mov	r3, r8
    6c46:	46bb      	mov	fp, r7
    6c48:	9301      	str	r3, [sp, #4]
    6c4a:	9100      	str	r1, [sp, #0]
    6c4c:	9b00      	ldr	r3, [sp, #0]
    6c4e:	2b02      	cmp	r3, #2
    6c50:	d16b      	bne.n	6d2a <__aeabi_ddiv+0x196>
    6c52:	9b01      	ldr	r3, [sp, #4]
    6c54:	469a      	mov	sl, r3
    6c56:	2100      	movs	r1, #0
    6c58:	4653      	mov	r3, sl
    6c5a:	2201      	movs	r2, #1
    6c5c:	2700      	movs	r7, #0
    6c5e:	4689      	mov	r9, r1
    6c60:	401a      	ands	r2, r3
    6c62:	4b3c      	ldr	r3, [pc, #240]	; (6d54 <__aeabi_ddiv+0x1c0>)
    6c64:	2100      	movs	r1, #0
    6c66:	033f      	lsls	r7, r7, #12
    6c68:	0d0c      	lsrs	r4, r1, #20
    6c6a:	0524      	lsls	r4, r4, #20
    6c6c:	0b3f      	lsrs	r7, r7, #12
    6c6e:	4327      	orrs	r7, r4
    6c70:	4c3b      	ldr	r4, [pc, #236]	; (6d60 <__aeabi_ddiv+0x1cc>)
    6c72:	051b      	lsls	r3, r3, #20
    6c74:	4027      	ands	r7, r4
    6c76:	431f      	orrs	r7, r3
    6c78:	007f      	lsls	r7, r7, #1
    6c7a:	07d2      	lsls	r2, r2, #31
    6c7c:	087f      	lsrs	r7, r7, #1
    6c7e:	4317      	orrs	r7, r2
    6c80:	4648      	mov	r0, r9
    6c82:	1c39      	adds	r1, r7, #0
    6c84:	b007      	add	sp, #28
    6c86:	bc3c      	pop	{r2, r3, r4, r5}
    6c88:	4690      	mov	r8, r2
    6c8a:	4699      	mov	r9, r3
    6c8c:	46a2      	mov	sl, r4
    6c8e:	46ab      	mov	fp, r5
    6c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c92:	4303      	orrs	r3, r0
    6c94:	d03e      	beq.n	6d14 <__aeabi_ddiv+0x180>
    6c96:	465b      	mov	r3, fp
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d100      	bne.n	6c9e <__aeabi_ddiv+0x10a>
    6c9c:	e19c      	b.n	6fd8 <__aeabi_ddiv+0x444>
    6c9e:	4658      	mov	r0, fp
    6ca0:	f001 f918 	bl	7ed4 <__clzsi2>
    6ca4:	2328      	movs	r3, #40	; 0x28
    6ca6:	1c31      	adds	r1, r6, #0
    6ca8:	1a1b      	subs	r3, r3, r0
    6caa:	1c02      	adds	r2, r0, #0
    6cac:	465f      	mov	r7, fp
    6cae:	40d9      	lsrs	r1, r3
    6cb0:	3a08      	subs	r2, #8
    6cb2:	4097      	lsls	r7, r2
    6cb4:	1c0b      	adds	r3, r1, #0
    6cb6:	4096      	lsls	r6, r2
    6cb8:	433b      	orrs	r3, r7
    6cba:	469b      	mov	fp, r3
    6cbc:	46b1      	mov	r9, r6
    6cbe:	2300      	movs	r3, #0
    6cc0:	4d28      	ldr	r5, [pc, #160]	; (6d64 <__aeabi_ddiv+0x1d0>)
    6cc2:	2600      	movs	r6, #0
    6cc4:	1a2d      	subs	r5, r5, r0
    6cc6:	9300      	str	r3, [sp, #0]
    6cc8:	e78a      	b.n	6be0 <__aeabi_ddiv+0x4c>
    6cca:	4652      	mov	r2, sl
    6ccc:	2103      	movs	r1, #3
    6cce:	433a      	orrs	r2, r7
    6cd0:	d1a0      	bne.n	6c14 <__aeabi_ddiv+0x80>
    6cd2:	2700      	movs	r7, #0
    6cd4:	2300      	movs	r3, #0
    6cd6:	2102      	movs	r1, #2
    6cd8:	e79c      	b.n	6c14 <__aeabi_ddiv+0x80>
    6cda:	4652      	mov	r2, sl
    6cdc:	433a      	orrs	r2, r7
    6cde:	d015      	beq.n	6d0c <__aeabi_ddiv+0x178>
    6ce0:	2f00      	cmp	r7, #0
    6ce2:	d100      	bne.n	6ce6 <__aeabi_ddiv+0x152>
    6ce4:	e185      	b.n	6ff2 <__aeabi_ddiv+0x45e>
    6ce6:	1c38      	adds	r0, r7, #0
    6ce8:	f001 f8f4 	bl	7ed4 <__clzsi2>
    6cec:	1c02      	adds	r2, r0, #0
    6cee:	2128      	movs	r1, #40	; 0x28
    6cf0:	4650      	mov	r0, sl
    6cf2:	1a89      	subs	r1, r1, r2
    6cf4:	1c13      	adds	r3, r2, #0
    6cf6:	40c8      	lsrs	r0, r1
    6cf8:	4651      	mov	r1, sl
    6cfa:	3b08      	subs	r3, #8
    6cfc:	4099      	lsls	r1, r3
    6cfe:	409f      	lsls	r7, r3
    6d00:	1c0b      	adds	r3, r1, #0
    6d02:	4307      	orrs	r7, r0
    6d04:	4817      	ldr	r0, [pc, #92]	; (6d64 <__aeabi_ddiv+0x1d0>)
    6d06:	2100      	movs	r1, #0
    6d08:	1a80      	subs	r0, r0, r2
    6d0a:	e783      	b.n	6c14 <__aeabi_ddiv+0x80>
    6d0c:	2700      	movs	r7, #0
    6d0e:	2300      	movs	r3, #0
    6d10:	2101      	movs	r1, #1
    6d12:	e77f      	b.n	6c14 <__aeabi_ddiv+0x80>
    6d14:	2300      	movs	r3, #0
    6d16:	469b      	mov	fp, r3
    6d18:	4699      	mov	r9, r3
    6d1a:	3301      	adds	r3, #1
    6d1c:	2604      	movs	r6, #4
    6d1e:	9300      	str	r3, [sp, #0]
    6d20:	e75e      	b.n	6be0 <__aeabi_ddiv+0x4c>
    6d22:	2303      	movs	r3, #3
    6d24:	260c      	movs	r6, #12
    6d26:	9300      	str	r3, [sp, #0]
    6d28:	e75a      	b.n	6be0 <__aeabi_ddiv+0x4c>
    6d2a:	2b03      	cmp	r3, #3
    6d2c:	d100      	bne.n	6d30 <__aeabi_ddiv+0x19c>
    6d2e:	e23c      	b.n	71aa <__aeabi_ddiv+0x616>
    6d30:	2b01      	cmp	r3, #1
    6d32:	d000      	beq.n	6d36 <__aeabi_ddiv+0x1a2>
    6d34:	e1bf      	b.n	70b6 <__aeabi_ddiv+0x522>
    6d36:	1c1a      	adds	r2, r3, #0
    6d38:	9b01      	ldr	r3, [sp, #4]
    6d3a:	401a      	ands	r2, r3
    6d3c:	2100      	movs	r1, #0
    6d3e:	2300      	movs	r3, #0
    6d40:	2700      	movs	r7, #0
    6d42:	4689      	mov	r9, r1
    6d44:	e78e      	b.n	6c64 <__aeabi_ddiv+0xd0>
    6d46:	2300      	movs	r3, #0
    6d48:	2780      	movs	r7, #128	; 0x80
    6d4a:	4699      	mov	r9, r3
    6d4c:	2200      	movs	r2, #0
    6d4e:	033f      	lsls	r7, r7, #12
    6d50:	4b00      	ldr	r3, [pc, #0]	; (6d54 <__aeabi_ddiv+0x1c0>)
    6d52:	e787      	b.n	6c64 <__aeabi_ddiv+0xd0>
    6d54:	000007ff 	.word	0x000007ff
    6d58:	fffffc01 	.word	0xfffffc01
    6d5c:	00008078 	.word	0x00008078
    6d60:	800fffff 	.word	0x800fffff
    6d64:	fffffc0d 	.word	0xfffffc0d
    6d68:	45bb      	cmp	fp, r7
    6d6a:	d900      	bls.n	6d6e <__aeabi_ddiv+0x1da>
    6d6c:	e151      	b.n	7012 <__aeabi_ddiv+0x47e>
    6d6e:	d100      	bne.n	6d72 <__aeabi_ddiv+0x1de>
    6d70:	e14c      	b.n	700c <__aeabi_ddiv+0x478>
    6d72:	464a      	mov	r2, r9
    6d74:	9203      	str	r2, [sp, #12]
    6d76:	2200      	movs	r2, #0
    6d78:	465c      	mov	r4, fp
    6d7a:	4690      	mov	r8, r2
    6d7c:	3d01      	subs	r5, #1
    6d7e:	0e18      	lsrs	r0, r3, #24
    6d80:	023f      	lsls	r7, r7, #8
    6d82:	4338      	orrs	r0, r7
    6d84:	021b      	lsls	r3, r3, #8
    6d86:	9301      	str	r3, [sp, #4]
    6d88:	0c03      	lsrs	r3, r0, #16
    6d8a:	4699      	mov	r9, r3
    6d8c:	0403      	lsls	r3, r0, #16
    6d8e:	0c1b      	lsrs	r3, r3, #16
    6d90:	4649      	mov	r1, r9
    6d92:	1c06      	adds	r6, r0, #0
    6d94:	1c20      	adds	r0, r4, #0
    6d96:	1c1f      	adds	r7, r3, #0
    6d98:	9300      	str	r3, [sp, #0]
    6d9a:	f7ff fa51 	bl	6240 <__aeabi_uidiv>
    6d9e:	1c02      	adds	r2, r0, #0
    6da0:	437a      	muls	r2, r7
    6da2:	9002      	str	r0, [sp, #8]
    6da4:	4649      	mov	r1, r9
    6da6:	1c20      	adds	r0, r4, #0
    6da8:	1c17      	adds	r7, r2, #0
    6daa:	f7ff facf 	bl	634c <__aeabi_uidivmod>
    6dae:	9b03      	ldr	r3, [sp, #12]
    6db0:	0409      	lsls	r1, r1, #16
    6db2:	0c1b      	lsrs	r3, r3, #16
    6db4:	4319      	orrs	r1, r3
    6db6:	428f      	cmp	r7, r1
    6db8:	d90c      	bls.n	6dd4 <__aeabi_ddiv+0x240>
    6dba:	9b02      	ldr	r3, [sp, #8]
    6dbc:	1989      	adds	r1, r1, r6
    6dbe:	3b01      	subs	r3, #1
    6dc0:	428e      	cmp	r6, r1
    6dc2:	d900      	bls.n	6dc6 <__aeabi_ddiv+0x232>
    6dc4:	e152      	b.n	706c <__aeabi_ddiv+0x4d8>
    6dc6:	428f      	cmp	r7, r1
    6dc8:	d800      	bhi.n	6dcc <__aeabi_ddiv+0x238>
    6dca:	e14f      	b.n	706c <__aeabi_ddiv+0x4d8>
    6dcc:	9b02      	ldr	r3, [sp, #8]
    6dce:	1989      	adds	r1, r1, r6
    6dd0:	3b02      	subs	r3, #2
    6dd2:	9302      	str	r3, [sp, #8]
    6dd4:	1bcc      	subs	r4, r1, r7
    6dd6:	1c20      	adds	r0, r4, #0
    6dd8:	4649      	mov	r1, r9
    6dda:	f7ff fa31 	bl	6240 <__aeabi_uidiv>
    6dde:	9f00      	ldr	r7, [sp, #0]
    6de0:	4683      	mov	fp, r0
    6de2:	4347      	muls	r7, r0
    6de4:	4649      	mov	r1, r9
    6de6:	1c20      	adds	r0, r4, #0
    6de8:	f7ff fab0 	bl	634c <__aeabi_uidivmod>
    6dec:	9a03      	ldr	r2, [sp, #12]
    6dee:	040b      	lsls	r3, r1, #16
    6df0:	0414      	lsls	r4, r2, #16
    6df2:	0c24      	lsrs	r4, r4, #16
    6df4:	4323      	orrs	r3, r4
    6df6:	429f      	cmp	r7, r3
    6df8:	d90d      	bls.n	6e16 <__aeabi_ddiv+0x282>
    6dfa:	465a      	mov	r2, fp
    6dfc:	199b      	adds	r3, r3, r6
    6dfe:	3a01      	subs	r2, #1
    6e00:	429e      	cmp	r6, r3
    6e02:	d900      	bls.n	6e06 <__aeabi_ddiv+0x272>
    6e04:	e130      	b.n	7068 <__aeabi_ddiv+0x4d4>
    6e06:	429f      	cmp	r7, r3
    6e08:	d800      	bhi.n	6e0c <__aeabi_ddiv+0x278>
    6e0a:	e12d      	b.n	7068 <__aeabi_ddiv+0x4d4>
    6e0c:	2202      	movs	r2, #2
    6e0e:	4252      	negs	r2, r2
    6e10:	4694      	mov	ip, r2
    6e12:	199b      	adds	r3, r3, r6
    6e14:	44e3      	add	fp, ip
    6e16:	9a02      	ldr	r2, [sp, #8]
    6e18:	1bdb      	subs	r3, r3, r7
    6e1a:	0417      	lsls	r7, r2, #16
    6e1c:	465a      	mov	r2, fp
    6e1e:	433a      	orrs	r2, r7
    6e20:	4693      	mov	fp, r2
    6e22:	9c01      	ldr	r4, [sp, #4]
    6e24:	0c17      	lsrs	r7, r2, #16
    6e26:	0c22      	lsrs	r2, r4, #16
    6e28:	1c10      	adds	r0, r2, #0
    6e2a:	9204      	str	r2, [sp, #16]
    6e2c:	465a      	mov	r2, fp
    6e2e:	0411      	lsls	r1, r2, #16
    6e30:	0422      	lsls	r2, r4, #16
    6e32:	0c12      	lsrs	r2, r2, #16
    6e34:	1c14      	adds	r4, r2, #0
    6e36:	0c09      	lsrs	r1, r1, #16
    6e38:	437c      	muls	r4, r7
    6e3a:	9205      	str	r2, [sp, #20]
    6e3c:	434a      	muls	r2, r1
    6e3e:	4341      	muls	r1, r0
    6e40:	4347      	muls	r7, r0
    6e42:	1861      	adds	r1, r4, r1
    6e44:	0c10      	lsrs	r0, r2, #16
    6e46:	1809      	adds	r1, r1, r0
    6e48:	428c      	cmp	r4, r1
    6e4a:	d903      	bls.n	6e54 <__aeabi_ddiv+0x2c0>
    6e4c:	2080      	movs	r0, #128	; 0x80
    6e4e:	0240      	lsls	r0, r0, #9
    6e50:	4684      	mov	ip, r0
    6e52:	4467      	add	r7, ip
    6e54:	0c0c      	lsrs	r4, r1, #16
    6e56:	0412      	lsls	r2, r2, #16
    6e58:	0408      	lsls	r0, r1, #16
    6e5a:	0c12      	lsrs	r2, r2, #16
    6e5c:	193c      	adds	r4, r7, r4
    6e5e:	1881      	adds	r1, r0, r2
    6e60:	42a3      	cmp	r3, r4
    6e62:	d200      	bcs.n	6e66 <__aeabi_ddiv+0x2d2>
    6e64:	e0e5      	b.n	7032 <__aeabi_ddiv+0x49e>
    6e66:	d100      	bne.n	6e6a <__aeabi_ddiv+0x2d6>
    6e68:	e0df      	b.n	702a <__aeabi_ddiv+0x496>
    6e6a:	1b1f      	subs	r7, r3, r4
    6e6c:	4643      	mov	r3, r8
    6e6e:	1a5c      	subs	r4, r3, r1
    6e70:	45a0      	cmp	r8, r4
    6e72:	4192      	sbcs	r2, r2
    6e74:	4252      	negs	r2, r2
    6e76:	1abf      	subs	r7, r7, r2
    6e78:	42b7      	cmp	r7, r6
    6e7a:	d100      	bne.n	6e7e <__aeabi_ddiv+0x2ea>
    6e7c:	e10e      	b.n	709c <__aeabi_ddiv+0x508>
    6e7e:	1c38      	adds	r0, r7, #0
    6e80:	4649      	mov	r1, r9
    6e82:	f7ff f9dd 	bl	6240 <__aeabi_uidiv>
    6e86:	9b00      	ldr	r3, [sp, #0]
    6e88:	9002      	str	r0, [sp, #8]
    6e8a:	4343      	muls	r3, r0
    6e8c:	4649      	mov	r1, r9
    6e8e:	1c38      	adds	r0, r7, #0
    6e90:	4698      	mov	r8, r3
    6e92:	f7ff fa5b 	bl	634c <__aeabi_uidivmod>
    6e96:	0c23      	lsrs	r3, r4, #16
    6e98:	040f      	lsls	r7, r1, #16
    6e9a:	431f      	orrs	r7, r3
    6e9c:	45b8      	cmp	r8, r7
    6e9e:	d90c      	bls.n	6eba <__aeabi_ddiv+0x326>
    6ea0:	9b02      	ldr	r3, [sp, #8]
    6ea2:	19bf      	adds	r7, r7, r6
    6ea4:	3b01      	subs	r3, #1
    6ea6:	42be      	cmp	r6, r7
    6ea8:	d900      	bls.n	6eac <__aeabi_ddiv+0x318>
    6eaa:	e0fb      	b.n	70a4 <__aeabi_ddiv+0x510>
    6eac:	45b8      	cmp	r8, r7
    6eae:	d800      	bhi.n	6eb2 <__aeabi_ddiv+0x31e>
    6eb0:	e0f8      	b.n	70a4 <__aeabi_ddiv+0x510>
    6eb2:	9b02      	ldr	r3, [sp, #8]
    6eb4:	19bf      	adds	r7, r7, r6
    6eb6:	3b02      	subs	r3, #2
    6eb8:	9302      	str	r3, [sp, #8]
    6eba:	4643      	mov	r3, r8
    6ebc:	1aff      	subs	r7, r7, r3
    6ebe:	4649      	mov	r1, r9
    6ec0:	1c38      	adds	r0, r7, #0
    6ec2:	f7ff f9bd 	bl	6240 <__aeabi_uidiv>
    6ec6:	9b00      	ldr	r3, [sp, #0]
    6ec8:	9003      	str	r0, [sp, #12]
    6eca:	4343      	muls	r3, r0
    6ecc:	4649      	mov	r1, r9
    6ece:	1c38      	adds	r0, r7, #0
    6ed0:	4698      	mov	r8, r3
    6ed2:	f7ff fa3b 	bl	634c <__aeabi_uidivmod>
    6ed6:	0424      	lsls	r4, r4, #16
    6ed8:	0409      	lsls	r1, r1, #16
    6eda:	0c24      	lsrs	r4, r4, #16
    6edc:	4321      	orrs	r1, r4
    6ede:	4588      	cmp	r8, r1
    6ee0:	d90c      	bls.n	6efc <__aeabi_ddiv+0x368>
    6ee2:	9b03      	ldr	r3, [sp, #12]
    6ee4:	1989      	adds	r1, r1, r6
    6ee6:	3b01      	subs	r3, #1
    6ee8:	428e      	cmp	r6, r1
    6eea:	d900      	bls.n	6eee <__aeabi_ddiv+0x35a>
    6eec:	e0dc      	b.n	70a8 <__aeabi_ddiv+0x514>
    6eee:	4588      	cmp	r8, r1
    6ef0:	d800      	bhi.n	6ef4 <__aeabi_ddiv+0x360>
    6ef2:	e0d9      	b.n	70a8 <__aeabi_ddiv+0x514>
    6ef4:	9b03      	ldr	r3, [sp, #12]
    6ef6:	1989      	adds	r1, r1, r6
    6ef8:	3b02      	subs	r3, #2
    6efa:	9303      	str	r3, [sp, #12]
    6efc:	4643      	mov	r3, r8
    6efe:	1ac9      	subs	r1, r1, r3
    6f00:	9b02      	ldr	r3, [sp, #8]
    6f02:	9a03      	ldr	r2, [sp, #12]
    6f04:	041b      	lsls	r3, r3, #16
    6f06:	9c05      	ldr	r4, [sp, #20]
    6f08:	431a      	orrs	r2, r3
    6f0a:	0c10      	lsrs	r0, r2, #16
    6f0c:	0413      	lsls	r3, r2, #16
    6f0e:	4691      	mov	r9, r2
    6f10:	1c22      	adds	r2, r4, #0
    6f12:	9f04      	ldr	r7, [sp, #16]
    6f14:	0c1b      	lsrs	r3, r3, #16
    6f16:	435a      	muls	r2, r3
    6f18:	4344      	muls	r4, r0
    6f1a:	437b      	muls	r3, r7
    6f1c:	4378      	muls	r0, r7
    6f1e:	18e3      	adds	r3, r4, r3
    6f20:	0c17      	lsrs	r7, r2, #16
    6f22:	19db      	adds	r3, r3, r7
    6f24:	429c      	cmp	r4, r3
    6f26:	d903      	bls.n	6f30 <__aeabi_ddiv+0x39c>
    6f28:	2480      	movs	r4, #128	; 0x80
    6f2a:	0264      	lsls	r4, r4, #9
    6f2c:	46a4      	mov	ip, r4
    6f2e:	4460      	add	r0, ip
    6f30:	0c1c      	lsrs	r4, r3, #16
    6f32:	0412      	lsls	r2, r2, #16
    6f34:	041b      	lsls	r3, r3, #16
    6f36:	0c12      	lsrs	r2, r2, #16
    6f38:	1900      	adds	r0, r0, r4
    6f3a:	189b      	adds	r3, r3, r2
    6f3c:	4281      	cmp	r1, r0
    6f3e:	d200      	bcs.n	6f42 <__aeabi_ddiv+0x3ae>
    6f40:	e096      	b.n	7070 <__aeabi_ddiv+0x4dc>
    6f42:	d100      	bne.n	6f46 <__aeabi_ddiv+0x3b2>
    6f44:	e0fc      	b.n	7140 <__aeabi_ddiv+0x5ac>
    6f46:	464a      	mov	r2, r9
    6f48:	2301      	movs	r3, #1
    6f4a:	431a      	orrs	r2, r3
    6f4c:	4691      	mov	r9, r2
    6f4e:	4b9b      	ldr	r3, [pc, #620]	; (71bc <__aeabi_ddiv+0x628>)
    6f50:	18eb      	adds	r3, r5, r3
    6f52:	2b00      	cmp	r3, #0
    6f54:	dc00      	bgt.n	6f58 <__aeabi_ddiv+0x3c4>
    6f56:	e099      	b.n	708c <__aeabi_ddiv+0x4f8>
    6f58:	464a      	mov	r2, r9
    6f5a:	0752      	lsls	r2, r2, #29
    6f5c:	d00a      	beq.n	6f74 <__aeabi_ddiv+0x3e0>
    6f5e:	220f      	movs	r2, #15
    6f60:	4649      	mov	r1, r9
    6f62:	400a      	ands	r2, r1
    6f64:	2a04      	cmp	r2, #4
    6f66:	d005      	beq.n	6f74 <__aeabi_ddiv+0x3e0>
    6f68:	3104      	adds	r1, #4
    6f6a:	4549      	cmp	r1, r9
    6f6c:	4192      	sbcs	r2, r2
    6f6e:	4689      	mov	r9, r1
    6f70:	4252      	negs	r2, r2
    6f72:	4493      	add	fp, r2
    6f74:	465a      	mov	r2, fp
    6f76:	01d2      	lsls	r2, r2, #7
    6f78:	d506      	bpl.n	6f88 <__aeabi_ddiv+0x3f4>
    6f7a:	465a      	mov	r2, fp
    6f7c:	4b90      	ldr	r3, [pc, #576]	; (71c0 <__aeabi_ddiv+0x62c>)
    6f7e:	401a      	ands	r2, r3
    6f80:	2380      	movs	r3, #128	; 0x80
    6f82:	4693      	mov	fp, r2
    6f84:	00db      	lsls	r3, r3, #3
    6f86:	18eb      	adds	r3, r5, r3
    6f88:	4a8e      	ldr	r2, [pc, #568]	; (71c4 <__aeabi_ddiv+0x630>)
    6f8a:	4293      	cmp	r3, r2
    6f8c:	dd00      	ble.n	6f90 <__aeabi_ddiv+0x3fc>
    6f8e:	e662      	b.n	6c56 <__aeabi_ddiv+0xc2>
    6f90:	464a      	mov	r2, r9
    6f92:	4659      	mov	r1, fp
    6f94:	08d2      	lsrs	r2, r2, #3
    6f96:	0749      	lsls	r1, r1, #29
    6f98:	4311      	orrs	r1, r2
    6f9a:	465a      	mov	r2, fp
    6f9c:	4689      	mov	r9, r1
    6f9e:	0257      	lsls	r7, r2, #9
    6fa0:	4651      	mov	r1, sl
    6fa2:	2201      	movs	r2, #1
    6fa4:	055b      	lsls	r3, r3, #21
    6fa6:	0b3f      	lsrs	r7, r7, #12
    6fa8:	0d5b      	lsrs	r3, r3, #21
    6faa:	400a      	ands	r2, r1
    6fac:	e65a      	b.n	6c64 <__aeabi_ddiv+0xd0>
    6fae:	2080      	movs	r0, #128	; 0x80
    6fb0:	465a      	mov	r2, fp
    6fb2:	0300      	lsls	r0, r0, #12
    6fb4:	4202      	tst	r2, r0
    6fb6:	d008      	beq.n	6fca <__aeabi_ddiv+0x436>
    6fb8:	4207      	tst	r7, r0
    6fba:	d106      	bne.n	6fca <__aeabi_ddiv+0x436>
    6fbc:	4307      	orrs	r7, r0
    6fbe:	033f      	lsls	r7, r7, #12
    6fc0:	4699      	mov	r9, r3
    6fc2:	0b3f      	lsrs	r7, r7, #12
    6fc4:	4642      	mov	r2, r8
    6fc6:	4b80      	ldr	r3, [pc, #512]	; (71c8 <__aeabi_ddiv+0x634>)
    6fc8:	e64c      	b.n	6c64 <__aeabi_ddiv+0xd0>
    6fca:	465f      	mov	r7, fp
    6fcc:	4307      	orrs	r7, r0
    6fce:	033f      	lsls	r7, r7, #12
    6fd0:	0b3f      	lsrs	r7, r7, #12
    6fd2:	1c22      	adds	r2, r4, #0
    6fd4:	4b7c      	ldr	r3, [pc, #496]	; (71c8 <__aeabi_ddiv+0x634>)
    6fd6:	e645      	b.n	6c64 <__aeabi_ddiv+0xd0>
    6fd8:	f000 ff7c 	bl	7ed4 <__clzsi2>
    6fdc:	1c03      	adds	r3, r0, #0
    6fde:	3020      	adds	r0, #32
    6fe0:	2827      	cmp	r0, #39	; 0x27
    6fe2:	dc00      	bgt.n	6fe6 <__aeabi_ddiv+0x452>
    6fe4:	e65e      	b.n	6ca4 <__aeabi_ddiv+0x110>
    6fe6:	3b08      	subs	r3, #8
    6fe8:	409e      	lsls	r6, r3
    6fea:	2300      	movs	r3, #0
    6fec:	46b3      	mov	fp, r6
    6fee:	4699      	mov	r9, r3
    6ff0:	e665      	b.n	6cbe <__aeabi_ddiv+0x12a>
    6ff2:	4650      	mov	r0, sl
    6ff4:	f000 ff6e 	bl	7ed4 <__clzsi2>
    6ff8:	1c02      	adds	r2, r0, #0
    6ffa:	3220      	adds	r2, #32
    6ffc:	2a27      	cmp	r2, #39	; 0x27
    6ffe:	dc00      	bgt.n	7002 <__aeabi_ddiv+0x46e>
    7000:	e675      	b.n	6cee <__aeabi_ddiv+0x15a>
    7002:	4657      	mov	r7, sl
    7004:	3808      	subs	r0, #8
    7006:	4087      	lsls	r7, r0
    7008:	2300      	movs	r3, #0
    700a:	e67b      	b.n	6d04 <__aeabi_ddiv+0x170>
    700c:	4599      	cmp	r9, r3
    700e:	d200      	bcs.n	7012 <__aeabi_ddiv+0x47e>
    7010:	e6af      	b.n	6d72 <__aeabi_ddiv+0x1de>
    7012:	465a      	mov	r2, fp
    7014:	4659      	mov	r1, fp
    7016:	0854      	lsrs	r4, r2, #1
    7018:	464a      	mov	r2, r9
    701a:	07c8      	lsls	r0, r1, #31
    701c:	0852      	lsrs	r2, r2, #1
    701e:	4302      	orrs	r2, r0
    7020:	9203      	str	r2, [sp, #12]
    7022:	464a      	mov	r2, r9
    7024:	07d2      	lsls	r2, r2, #31
    7026:	4690      	mov	r8, r2
    7028:	e6a9      	b.n	6d7e <__aeabi_ddiv+0x1ea>
    702a:	2700      	movs	r7, #0
    702c:	4588      	cmp	r8, r1
    702e:	d300      	bcc.n	7032 <__aeabi_ddiv+0x49e>
    7030:	e71c      	b.n	6e6c <__aeabi_ddiv+0x2d8>
    7032:	9f01      	ldr	r7, [sp, #4]
    7034:	465a      	mov	r2, fp
    7036:	46bc      	mov	ip, r7
    7038:	44e0      	add	r8, ip
    703a:	45b8      	cmp	r8, r7
    703c:	41bf      	sbcs	r7, r7
    703e:	427f      	negs	r7, r7
    7040:	19bf      	adds	r7, r7, r6
    7042:	18ff      	adds	r7, r7, r3
    7044:	3a01      	subs	r2, #1
    7046:	42be      	cmp	r6, r7
    7048:	d206      	bcs.n	7058 <__aeabi_ddiv+0x4c4>
    704a:	42bc      	cmp	r4, r7
    704c:	d85f      	bhi.n	710e <__aeabi_ddiv+0x57a>
    704e:	d100      	bne.n	7052 <__aeabi_ddiv+0x4be>
    7050:	e09f      	b.n	7192 <__aeabi_ddiv+0x5fe>
    7052:	1b3f      	subs	r7, r7, r4
    7054:	4693      	mov	fp, r2
    7056:	e709      	b.n	6e6c <__aeabi_ddiv+0x2d8>
    7058:	42b7      	cmp	r7, r6
    705a:	d1fa      	bne.n	7052 <__aeabi_ddiv+0x4be>
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	4543      	cmp	r3, r8
    7060:	d9f3      	bls.n	704a <__aeabi_ddiv+0x4b6>
    7062:	1b37      	subs	r7, r6, r4
    7064:	4693      	mov	fp, r2
    7066:	e701      	b.n	6e6c <__aeabi_ddiv+0x2d8>
    7068:	4693      	mov	fp, r2
    706a:	e6d4      	b.n	6e16 <__aeabi_ddiv+0x282>
    706c:	9302      	str	r3, [sp, #8]
    706e:	e6b1      	b.n	6dd4 <__aeabi_ddiv+0x240>
    7070:	464a      	mov	r2, r9
    7072:	1989      	adds	r1, r1, r6
    7074:	3a01      	subs	r2, #1
    7076:	428e      	cmp	r6, r1
    7078:	d918      	bls.n	70ac <__aeabi_ddiv+0x518>
    707a:	4691      	mov	r9, r2
    707c:	4281      	cmp	r1, r0
    707e:	d000      	beq.n	7082 <__aeabi_ddiv+0x4ee>
    7080:	e761      	b.n	6f46 <__aeabi_ddiv+0x3b2>
    7082:	9a01      	ldr	r2, [sp, #4]
    7084:	429a      	cmp	r2, r3
    7086:	d000      	beq.n	708a <__aeabi_ddiv+0x4f6>
    7088:	e75d      	b.n	6f46 <__aeabi_ddiv+0x3b2>
    708a:	e760      	b.n	6f4e <__aeabi_ddiv+0x3ba>
    708c:	4f4f      	ldr	r7, [pc, #316]	; (71cc <__aeabi_ddiv+0x638>)
    708e:	1b7f      	subs	r7, r7, r5
    7090:	2f38      	cmp	r7, #56	; 0x38
    7092:	dd13      	ble.n	70bc <__aeabi_ddiv+0x528>
    7094:	2201      	movs	r2, #1
    7096:	4653      	mov	r3, sl
    7098:	401a      	ands	r2, r3
    709a:	e64f      	b.n	6d3c <__aeabi_ddiv+0x1a8>
    709c:	2301      	movs	r3, #1
    709e:	425b      	negs	r3, r3
    70a0:	4699      	mov	r9, r3
    70a2:	e754      	b.n	6f4e <__aeabi_ddiv+0x3ba>
    70a4:	9302      	str	r3, [sp, #8]
    70a6:	e708      	b.n	6eba <__aeabi_ddiv+0x326>
    70a8:	9303      	str	r3, [sp, #12]
    70aa:	e727      	b.n	6efc <__aeabi_ddiv+0x368>
    70ac:	4288      	cmp	r0, r1
    70ae:	d83c      	bhi.n	712a <__aeabi_ddiv+0x596>
    70b0:	d074      	beq.n	719c <__aeabi_ddiv+0x608>
    70b2:	4691      	mov	r9, r2
    70b4:	e747      	b.n	6f46 <__aeabi_ddiv+0x3b2>
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	469a      	mov	sl, r3
    70ba:	e748      	b.n	6f4e <__aeabi_ddiv+0x3ba>
    70bc:	2f1f      	cmp	r7, #31
    70be:	dc44      	bgt.n	714a <__aeabi_ddiv+0x5b6>
    70c0:	4b43      	ldr	r3, [pc, #268]	; (71d0 <__aeabi_ddiv+0x63c>)
    70c2:	464a      	mov	r2, r9
    70c4:	469c      	mov	ip, r3
    70c6:	465b      	mov	r3, fp
    70c8:	4465      	add	r5, ip
    70ca:	40fa      	lsrs	r2, r7
    70cc:	40ab      	lsls	r3, r5
    70ce:	4313      	orrs	r3, r2
    70d0:	464a      	mov	r2, r9
    70d2:	40aa      	lsls	r2, r5
    70d4:	1c15      	adds	r5, r2, #0
    70d6:	1e6a      	subs	r2, r5, #1
    70d8:	4195      	sbcs	r5, r2
    70da:	465a      	mov	r2, fp
    70dc:	40fa      	lsrs	r2, r7
    70de:	432b      	orrs	r3, r5
    70e0:	1c17      	adds	r7, r2, #0
    70e2:	075a      	lsls	r2, r3, #29
    70e4:	d009      	beq.n	70fa <__aeabi_ddiv+0x566>
    70e6:	220f      	movs	r2, #15
    70e8:	401a      	ands	r2, r3
    70ea:	2a04      	cmp	r2, #4
    70ec:	d005      	beq.n	70fa <__aeabi_ddiv+0x566>
    70ee:	1d1a      	adds	r2, r3, #4
    70f0:	429a      	cmp	r2, r3
    70f2:	419b      	sbcs	r3, r3
    70f4:	425b      	negs	r3, r3
    70f6:	18ff      	adds	r7, r7, r3
    70f8:	1c13      	adds	r3, r2, #0
    70fa:	023a      	lsls	r2, r7, #8
    70fc:	d53e      	bpl.n	717c <__aeabi_ddiv+0x5e8>
    70fe:	4653      	mov	r3, sl
    7100:	2201      	movs	r2, #1
    7102:	2100      	movs	r1, #0
    7104:	401a      	ands	r2, r3
    7106:	2700      	movs	r7, #0
    7108:	2301      	movs	r3, #1
    710a:	4689      	mov	r9, r1
    710c:	e5aa      	b.n	6c64 <__aeabi_ddiv+0xd0>
    710e:	2302      	movs	r3, #2
    7110:	425b      	negs	r3, r3
    7112:	469c      	mov	ip, r3
    7114:	9a01      	ldr	r2, [sp, #4]
    7116:	44e3      	add	fp, ip
    7118:	4694      	mov	ip, r2
    711a:	44e0      	add	r8, ip
    711c:	4590      	cmp	r8, r2
    711e:	419b      	sbcs	r3, r3
    7120:	425b      	negs	r3, r3
    7122:	199b      	adds	r3, r3, r6
    7124:	19df      	adds	r7, r3, r7
    7126:	1b3f      	subs	r7, r7, r4
    7128:	e6a0      	b.n	6e6c <__aeabi_ddiv+0x2d8>
    712a:	9f01      	ldr	r7, [sp, #4]
    712c:	464a      	mov	r2, r9
    712e:	007c      	lsls	r4, r7, #1
    7130:	42bc      	cmp	r4, r7
    7132:	41bf      	sbcs	r7, r7
    7134:	427f      	negs	r7, r7
    7136:	19bf      	adds	r7, r7, r6
    7138:	3a02      	subs	r2, #2
    713a:	19c9      	adds	r1, r1, r7
    713c:	9401      	str	r4, [sp, #4]
    713e:	e79c      	b.n	707a <__aeabi_ddiv+0x4e6>
    7140:	2b00      	cmp	r3, #0
    7142:	d195      	bne.n	7070 <__aeabi_ddiv+0x4dc>
    7144:	2200      	movs	r2, #0
    7146:	9201      	str	r2, [sp, #4]
    7148:	e79b      	b.n	7082 <__aeabi_ddiv+0x4ee>
    714a:	465a      	mov	r2, fp
    714c:	4b21      	ldr	r3, [pc, #132]	; (71d4 <__aeabi_ddiv+0x640>)
    714e:	1b5b      	subs	r3, r3, r5
    7150:	40da      	lsrs	r2, r3
    7152:	2f20      	cmp	r7, #32
    7154:	d027      	beq.n	71a6 <__aeabi_ddiv+0x612>
    7156:	4b20      	ldr	r3, [pc, #128]	; (71d8 <__aeabi_ddiv+0x644>)
    7158:	469c      	mov	ip, r3
    715a:	465b      	mov	r3, fp
    715c:	4465      	add	r5, ip
    715e:	40ab      	lsls	r3, r5
    7160:	4649      	mov	r1, r9
    7162:	430b      	orrs	r3, r1
    7164:	1e59      	subs	r1, r3, #1
    7166:	418b      	sbcs	r3, r1
    7168:	4313      	orrs	r3, r2
    716a:	2207      	movs	r2, #7
    716c:	2700      	movs	r7, #0
    716e:	401a      	ands	r2, r3
    7170:	d007      	beq.n	7182 <__aeabi_ddiv+0x5ee>
    7172:	220f      	movs	r2, #15
    7174:	2700      	movs	r7, #0
    7176:	401a      	ands	r2, r3
    7178:	2a04      	cmp	r2, #4
    717a:	d1b8      	bne.n	70ee <__aeabi_ddiv+0x55a>
    717c:	077a      	lsls	r2, r7, #29
    717e:	027f      	lsls	r7, r7, #9
    7180:	0b3f      	lsrs	r7, r7, #12
    7182:	08db      	lsrs	r3, r3, #3
    7184:	4313      	orrs	r3, r2
    7186:	4699      	mov	r9, r3
    7188:	2201      	movs	r2, #1
    718a:	4653      	mov	r3, sl
    718c:	401a      	ands	r2, r3
    718e:	2300      	movs	r3, #0
    7190:	e568      	b.n	6c64 <__aeabi_ddiv+0xd0>
    7192:	4541      	cmp	r1, r8
    7194:	d8bb      	bhi.n	710e <__aeabi_ddiv+0x57a>
    7196:	4693      	mov	fp, r2
    7198:	2700      	movs	r7, #0
    719a:	e667      	b.n	6e6c <__aeabi_ddiv+0x2d8>
    719c:	9c01      	ldr	r4, [sp, #4]
    719e:	429c      	cmp	r4, r3
    71a0:	d3c3      	bcc.n	712a <__aeabi_ddiv+0x596>
    71a2:	4691      	mov	r9, r2
    71a4:	e76d      	b.n	7082 <__aeabi_ddiv+0x4ee>
    71a6:	2300      	movs	r3, #0
    71a8:	e7da      	b.n	7160 <__aeabi_ddiv+0x5cc>
    71aa:	2780      	movs	r7, #128	; 0x80
    71ac:	465b      	mov	r3, fp
    71ae:	033f      	lsls	r7, r7, #12
    71b0:	431f      	orrs	r7, r3
    71b2:	033f      	lsls	r7, r7, #12
    71b4:	0b3f      	lsrs	r7, r7, #12
    71b6:	9a01      	ldr	r2, [sp, #4]
    71b8:	4b03      	ldr	r3, [pc, #12]	; (71c8 <__aeabi_ddiv+0x634>)
    71ba:	e553      	b.n	6c64 <__aeabi_ddiv+0xd0>
    71bc:	000003ff 	.word	0x000003ff
    71c0:	feffffff 	.word	0xfeffffff
    71c4:	000007fe 	.word	0x000007fe
    71c8:	000007ff 	.word	0x000007ff
    71cc:	fffffc02 	.word	0xfffffc02
    71d0:	0000041e 	.word	0x0000041e
    71d4:	fffffbe2 	.word	0xfffffbe2
    71d8:	0000043e 	.word	0x0000043e

000071dc <__aeabi_dmul>:
    71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    71de:	465f      	mov	r7, fp
    71e0:	4656      	mov	r6, sl
    71e2:	464d      	mov	r5, r9
    71e4:	4644      	mov	r4, r8
    71e6:	b4f0      	push	{r4, r5, r6, r7}
    71e8:	1c05      	adds	r5, r0, #0
    71ea:	1c06      	adds	r6, r0, #0
    71ec:	0308      	lsls	r0, r1, #12
    71ee:	b087      	sub	sp, #28
    71f0:	4699      	mov	r9, r3
    71f2:	004f      	lsls	r7, r1, #1
    71f4:	0b03      	lsrs	r3, r0, #12
    71f6:	0fcc      	lsrs	r4, r1, #31
    71f8:	4692      	mov	sl, r2
    71fa:	469b      	mov	fp, r3
    71fc:	0d7f      	lsrs	r7, r7, #21
    71fe:	9401      	str	r4, [sp, #4]
    7200:	d067      	beq.n	72d2 <__aeabi_dmul+0xf6>
    7202:	4b6c      	ldr	r3, [pc, #432]	; (73b4 <__aeabi_dmul+0x1d8>)
    7204:	429f      	cmp	r7, r3
    7206:	d036      	beq.n	7276 <__aeabi_dmul+0x9a>
    7208:	2080      	movs	r0, #128	; 0x80
    720a:	465b      	mov	r3, fp
    720c:	0340      	lsls	r0, r0, #13
    720e:	4318      	orrs	r0, r3
    7210:	00c0      	lsls	r0, r0, #3
    7212:	0f6b      	lsrs	r3, r5, #29
    7214:	4318      	orrs	r0, r3
    7216:	4b68      	ldr	r3, [pc, #416]	; (73b8 <__aeabi_dmul+0x1dc>)
    7218:	4683      	mov	fp, r0
    721a:	469c      	mov	ip, r3
    721c:	2300      	movs	r3, #0
    721e:	4698      	mov	r8, r3
    7220:	00ee      	lsls	r6, r5, #3
    7222:	4467      	add	r7, ip
    7224:	9300      	str	r3, [sp, #0]
    7226:	464b      	mov	r3, r9
    7228:	4649      	mov	r1, r9
    722a:	031d      	lsls	r5, r3, #12
    722c:	0fc9      	lsrs	r1, r1, #31
    722e:	005b      	lsls	r3, r3, #1
    7230:	4652      	mov	r2, sl
    7232:	0b2d      	lsrs	r5, r5, #12
    7234:	0d5b      	lsrs	r3, r3, #21
    7236:	4689      	mov	r9, r1
    7238:	d100      	bne.n	723c <__aeabi_dmul+0x60>
    723a:	e06e      	b.n	731a <__aeabi_dmul+0x13e>
    723c:	495d      	ldr	r1, [pc, #372]	; (73b4 <__aeabi_dmul+0x1d8>)
    723e:	428b      	cmp	r3, r1
    7240:	d064      	beq.n	730c <__aeabi_dmul+0x130>
    7242:	2080      	movs	r0, #128	; 0x80
    7244:	495c      	ldr	r1, [pc, #368]	; (73b8 <__aeabi_dmul+0x1dc>)
    7246:	0340      	lsls	r0, r0, #13
    7248:	468c      	mov	ip, r1
    724a:	2100      	movs	r1, #0
    724c:	4305      	orrs	r5, r0
    724e:	00ed      	lsls	r5, r5, #3
    7250:	0f50      	lsrs	r0, r2, #29
    7252:	4305      	orrs	r5, r0
    7254:	00d2      	lsls	r2, r2, #3
    7256:	4463      	add	r3, ip
    7258:	4648      	mov	r0, r9
    725a:	18ff      	adds	r7, r7, r3
    725c:	1c7b      	adds	r3, r7, #1
    725e:	469a      	mov	sl, r3
    7260:	9b00      	ldr	r3, [sp, #0]
    7262:	4060      	eors	r0, r4
    7264:	9002      	str	r0, [sp, #8]
    7266:	430b      	orrs	r3, r1
    7268:	2b0f      	cmp	r3, #15
    726a:	d900      	bls.n	726e <__aeabi_dmul+0x92>
    726c:	e0ac      	b.n	73c8 <__aeabi_dmul+0x1ec>
    726e:	4853      	ldr	r0, [pc, #332]	; (73bc <__aeabi_dmul+0x1e0>)
    7270:	009b      	lsls	r3, r3, #2
    7272:	58c3      	ldr	r3, [r0, r3]
    7274:	469f      	mov	pc, r3
    7276:	465b      	mov	r3, fp
    7278:	431d      	orrs	r5, r3
    727a:	d000      	beq.n	727e <__aeabi_dmul+0xa2>
    727c:	e082      	b.n	7384 <__aeabi_dmul+0x1a8>
    727e:	2308      	movs	r3, #8
    7280:	9300      	str	r3, [sp, #0]
    7282:	2300      	movs	r3, #0
    7284:	469b      	mov	fp, r3
    7286:	3302      	adds	r3, #2
    7288:	2600      	movs	r6, #0
    728a:	4698      	mov	r8, r3
    728c:	e7cb      	b.n	7226 <__aeabi_dmul+0x4a>
    728e:	9b02      	ldr	r3, [sp, #8]
    7290:	9301      	str	r3, [sp, #4]
    7292:	4643      	mov	r3, r8
    7294:	2b02      	cmp	r3, #2
    7296:	d159      	bne.n	734c <__aeabi_dmul+0x170>
    7298:	2401      	movs	r4, #1
    729a:	2500      	movs	r5, #0
    729c:	2600      	movs	r6, #0
    729e:	9b01      	ldr	r3, [sp, #4]
    72a0:	401c      	ands	r4, r3
    72a2:	4b44      	ldr	r3, [pc, #272]	; (73b4 <__aeabi_dmul+0x1d8>)
    72a4:	2100      	movs	r1, #0
    72a6:	032d      	lsls	r5, r5, #12
    72a8:	0d0a      	lsrs	r2, r1, #20
    72aa:	0512      	lsls	r2, r2, #20
    72ac:	0b2d      	lsrs	r5, r5, #12
    72ae:	4315      	orrs	r5, r2
    72b0:	4a43      	ldr	r2, [pc, #268]	; (73c0 <__aeabi_dmul+0x1e4>)
    72b2:	051b      	lsls	r3, r3, #20
    72b4:	4015      	ands	r5, r2
    72b6:	431d      	orrs	r5, r3
    72b8:	006d      	lsls	r5, r5, #1
    72ba:	07e4      	lsls	r4, r4, #31
    72bc:	086d      	lsrs	r5, r5, #1
    72be:	4325      	orrs	r5, r4
    72c0:	1c30      	adds	r0, r6, #0
    72c2:	1c29      	adds	r1, r5, #0
    72c4:	b007      	add	sp, #28
    72c6:	bc3c      	pop	{r2, r3, r4, r5}
    72c8:	4690      	mov	r8, r2
    72ca:	4699      	mov	r9, r3
    72cc:	46a2      	mov	sl, r4
    72ce:	46ab      	mov	fp, r5
    72d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72d2:	432b      	orrs	r3, r5
    72d4:	d04e      	beq.n	7374 <__aeabi_dmul+0x198>
    72d6:	465b      	mov	r3, fp
    72d8:	2b00      	cmp	r3, #0
    72da:	d100      	bne.n	72de <__aeabi_dmul+0x102>
    72dc:	e185      	b.n	75ea <__aeabi_dmul+0x40e>
    72de:	4658      	mov	r0, fp
    72e0:	f000 fdf8 	bl	7ed4 <__clzsi2>
    72e4:	1c02      	adds	r2, r0, #0
    72e6:	2328      	movs	r3, #40	; 0x28
    72e8:	1c29      	adds	r1, r5, #0
    72ea:	1a9b      	subs	r3, r3, r2
    72ec:	1c16      	adds	r6, r2, #0
    72ee:	4658      	mov	r0, fp
    72f0:	40d9      	lsrs	r1, r3
    72f2:	3e08      	subs	r6, #8
    72f4:	40b0      	lsls	r0, r6
    72f6:	1c0b      	adds	r3, r1, #0
    72f8:	40b5      	lsls	r5, r6
    72fa:	4303      	orrs	r3, r0
    72fc:	469b      	mov	fp, r3
    72fe:	1c2e      	adds	r6, r5, #0
    7300:	2300      	movs	r3, #0
    7302:	4f30      	ldr	r7, [pc, #192]	; (73c4 <__aeabi_dmul+0x1e8>)
    7304:	9300      	str	r3, [sp, #0]
    7306:	1abf      	subs	r7, r7, r2
    7308:	4698      	mov	r8, r3
    730a:	e78c      	b.n	7226 <__aeabi_dmul+0x4a>
    730c:	4651      	mov	r1, sl
    730e:	4329      	orrs	r1, r5
    7310:	d12e      	bne.n	7370 <__aeabi_dmul+0x194>
    7312:	2500      	movs	r5, #0
    7314:	2200      	movs	r2, #0
    7316:	2102      	movs	r1, #2
    7318:	e79e      	b.n	7258 <__aeabi_dmul+0x7c>
    731a:	4651      	mov	r1, sl
    731c:	4329      	orrs	r1, r5
    731e:	d023      	beq.n	7368 <__aeabi_dmul+0x18c>
    7320:	2d00      	cmp	r5, #0
    7322:	d100      	bne.n	7326 <__aeabi_dmul+0x14a>
    7324:	e154      	b.n	75d0 <__aeabi_dmul+0x3f4>
    7326:	1c28      	adds	r0, r5, #0
    7328:	f000 fdd4 	bl	7ed4 <__clzsi2>
    732c:	1c03      	adds	r3, r0, #0
    732e:	2128      	movs	r1, #40	; 0x28
    7330:	4650      	mov	r0, sl
    7332:	1ac9      	subs	r1, r1, r3
    7334:	1c1a      	adds	r2, r3, #0
    7336:	40c8      	lsrs	r0, r1
    7338:	4651      	mov	r1, sl
    733a:	3a08      	subs	r2, #8
    733c:	4091      	lsls	r1, r2
    733e:	4095      	lsls	r5, r2
    7340:	1c0a      	adds	r2, r1, #0
    7342:	4305      	orrs	r5, r0
    7344:	481f      	ldr	r0, [pc, #124]	; (73c4 <__aeabi_dmul+0x1e8>)
    7346:	2100      	movs	r1, #0
    7348:	1ac3      	subs	r3, r0, r3
    734a:	e785      	b.n	7258 <__aeabi_dmul+0x7c>
    734c:	2b03      	cmp	r3, #3
    734e:	d100      	bne.n	7352 <__aeabi_dmul+0x176>
    7350:	e1c2      	b.n	76d8 <__aeabi_dmul+0x4fc>
    7352:	2b01      	cmp	r3, #1
    7354:	d000      	beq.n	7358 <__aeabi_dmul+0x17c>
    7356:	e16d      	b.n	7634 <__aeabi_dmul+0x458>
    7358:	4644      	mov	r4, r8
    735a:	9b01      	ldr	r3, [sp, #4]
    735c:	2500      	movs	r5, #0
    735e:	401c      	ands	r4, r3
    7360:	b2e4      	uxtb	r4, r4
    7362:	2300      	movs	r3, #0
    7364:	2600      	movs	r6, #0
    7366:	e79d      	b.n	72a4 <__aeabi_dmul+0xc8>
    7368:	2500      	movs	r5, #0
    736a:	2200      	movs	r2, #0
    736c:	2101      	movs	r1, #1
    736e:	e773      	b.n	7258 <__aeabi_dmul+0x7c>
    7370:	2103      	movs	r1, #3
    7372:	e771      	b.n	7258 <__aeabi_dmul+0x7c>
    7374:	2304      	movs	r3, #4
    7376:	9300      	str	r3, [sp, #0]
    7378:	2300      	movs	r3, #0
    737a:	469b      	mov	fp, r3
    737c:	3301      	adds	r3, #1
    737e:	2600      	movs	r6, #0
    7380:	4698      	mov	r8, r3
    7382:	e750      	b.n	7226 <__aeabi_dmul+0x4a>
    7384:	230c      	movs	r3, #12
    7386:	9300      	str	r3, [sp, #0]
    7388:	3b09      	subs	r3, #9
    738a:	4698      	mov	r8, r3
    738c:	e74b      	b.n	7226 <__aeabi_dmul+0x4a>
    738e:	2580      	movs	r5, #128	; 0x80
    7390:	2400      	movs	r4, #0
    7392:	032d      	lsls	r5, r5, #12
    7394:	2600      	movs	r6, #0
    7396:	4b07      	ldr	r3, [pc, #28]	; (73b4 <__aeabi_dmul+0x1d8>)
    7398:	e784      	b.n	72a4 <__aeabi_dmul+0xc8>
    739a:	464b      	mov	r3, r9
    739c:	46ab      	mov	fp, r5
    739e:	1c16      	adds	r6, r2, #0
    73a0:	9301      	str	r3, [sp, #4]
    73a2:	4688      	mov	r8, r1
    73a4:	e775      	b.n	7292 <__aeabi_dmul+0xb6>
    73a6:	9b02      	ldr	r3, [sp, #8]
    73a8:	46ab      	mov	fp, r5
    73aa:	1c16      	adds	r6, r2, #0
    73ac:	9301      	str	r3, [sp, #4]
    73ae:	4688      	mov	r8, r1
    73b0:	e76f      	b.n	7292 <__aeabi_dmul+0xb6>
    73b2:	46c0      	nop			; (mov r8, r8)
    73b4:	000007ff 	.word	0x000007ff
    73b8:	fffffc01 	.word	0xfffffc01
    73bc:	000080b8 	.word	0x000080b8
    73c0:	800fffff 	.word	0x800fffff
    73c4:	fffffc0d 	.word	0xfffffc0d
    73c8:	0c33      	lsrs	r3, r6, #16
    73ca:	0436      	lsls	r6, r6, #16
    73cc:	0c36      	lsrs	r6, r6, #16
    73ce:	469c      	mov	ip, r3
    73d0:	1c33      	adds	r3, r6, #0
    73d2:	0c14      	lsrs	r4, r2, #16
    73d4:	0412      	lsls	r2, r2, #16
    73d6:	0c12      	lsrs	r2, r2, #16
    73d8:	4353      	muls	r3, r2
    73da:	4698      	mov	r8, r3
    73dc:	4663      	mov	r3, ip
    73de:	4353      	muls	r3, r2
    73e0:	4699      	mov	r9, r3
    73e2:	4663      	mov	r3, ip
    73e4:	4363      	muls	r3, r4
    73e6:	9301      	str	r3, [sp, #4]
    73e8:	1c33      	adds	r3, r6, #0
    73ea:	4641      	mov	r1, r8
    73ec:	4363      	muls	r3, r4
    73ee:	0c09      	lsrs	r1, r1, #16
    73f0:	444b      	add	r3, r9
    73f2:	185b      	adds	r3, r3, r1
    73f4:	4599      	cmp	r9, r3
    73f6:	d905      	bls.n	7404 <__aeabi_dmul+0x228>
    73f8:	2080      	movs	r0, #128	; 0x80
    73fa:	0240      	lsls	r0, r0, #9
    73fc:	4681      	mov	r9, r0
    73fe:	9901      	ldr	r1, [sp, #4]
    7400:	4449      	add	r1, r9
    7402:	9101      	str	r1, [sp, #4]
    7404:	0c19      	lsrs	r1, r3, #16
    7406:	9103      	str	r1, [sp, #12]
    7408:	4641      	mov	r1, r8
    740a:	0409      	lsls	r1, r1, #16
    740c:	0c09      	lsrs	r1, r1, #16
    740e:	041b      	lsls	r3, r3, #16
    7410:	185b      	adds	r3, r3, r1
    7412:	9304      	str	r3, [sp, #16]
    7414:	0c2b      	lsrs	r3, r5, #16
    7416:	4698      	mov	r8, r3
    7418:	1c33      	adds	r3, r6, #0
    741a:	042d      	lsls	r5, r5, #16
    741c:	0c29      	lsrs	r1, r5, #16
    741e:	434b      	muls	r3, r1
    7420:	4660      	mov	r0, ip
    7422:	9300      	str	r3, [sp, #0]
    7424:	4643      	mov	r3, r8
    7426:	4665      	mov	r5, ip
    7428:	4358      	muls	r0, r3
    742a:	435e      	muls	r6, r3
    742c:	9b00      	ldr	r3, [sp, #0]
    742e:	434d      	muls	r5, r1
    7430:	0c1b      	lsrs	r3, r3, #16
    7432:	4699      	mov	r9, r3
    7434:	19ae      	adds	r6, r5, r6
    7436:	444e      	add	r6, r9
    7438:	4684      	mov	ip, r0
    743a:	42b5      	cmp	r5, r6
    743c:	d903      	bls.n	7446 <__aeabi_dmul+0x26a>
    743e:	2380      	movs	r3, #128	; 0x80
    7440:	025b      	lsls	r3, r3, #9
    7442:	4699      	mov	r9, r3
    7444:	44cc      	add	ip, r9
    7446:	0c35      	lsrs	r5, r6, #16
    7448:	1c2b      	adds	r3, r5, #0
    744a:	9803      	ldr	r0, [sp, #12]
    744c:	4463      	add	r3, ip
    744e:	4684      	mov	ip, r0
    7450:	9305      	str	r3, [sp, #20]
    7452:	9b00      	ldr	r3, [sp, #0]
    7454:	0436      	lsls	r6, r6, #16
    7456:	041b      	lsls	r3, r3, #16
    7458:	0c1b      	lsrs	r3, r3, #16
    745a:	18f3      	adds	r3, r6, r3
    745c:	449c      	add	ip, r3
    745e:	4660      	mov	r0, ip
    7460:	9003      	str	r0, [sp, #12]
    7462:	4658      	mov	r0, fp
    7464:	0405      	lsls	r5, r0, #16
    7466:	0c06      	lsrs	r6, r0, #16
    7468:	0c28      	lsrs	r0, r5, #16
    746a:	4684      	mov	ip, r0
    746c:	4350      	muls	r0, r2
    746e:	1c35      	adds	r5, r6, #0
    7470:	4681      	mov	r9, r0
    7472:	4660      	mov	r0, ip
    7474:	4365      	muls	r5, r4
    7476:	4344      	muls	r4, r0
    7478:	4648      	mov	r0, r9
    747a:	0c00      	lsrs	r0, r0, #16
    747c:	4683      	mov	fp, r0
    747e:	4372      	muls	r2, r6
    7480:	1914      	adds	r4, r2, r4
    7482:	445c      	add	r4, fp
    7484:	42a2      	cmp	r2, r4
    7486:	d903      	bls.n	7490 <__aeabi_dmul+0x2b4>
    7488:	2280      	movs	r2, #128	; 0x80
    748a:	0252      	lsls	r2, r2, #9
    748c:	4693      	mov	fp, r2
    748e:	445d      	add	r5, fp
    7490:	0c22      	lsrs	r2, r4, #16
    7492:	18ad      	adds	r5, r5, r2
    7494:	464a      	mov	r2, r9
    7496:	0412      	lsls	r2, r2, #16
    7498:	0c12      	lsrs	r2, r2, #16
    749a:	0424      	lsls	r4, r4, #16
    749c:	4640      	mov	r0, r8
    749e:	18a4      	adds	r4, r4, r2
    74a0:	4662      	mov	r2, ip
    74a2:	434a      	muls	r2, r1
    74a4:	4371      	muls	r1, r6
    74a6:	4346      	muls	r6, r0
    74a8:	4660      	mov	r0, ip
    74aa:	9600      	str	r6, [sp, #0]
    74ac:	4646      	mov	r6, r8
    74ae:	4370      	muls	r0, r6
    74b0:	4680      	mov	r8, r0
    74b2:	0c10      	lsrs	r0, r2, #16
    74b4:	4684      	mov	ip, r0
    74b6:	4488      	add	r8, r1
    74b8:	44e0      	add	r8, ip
    74ba:	4541      	cmp	r1, r8
    74bc:	d905      	bls.n	74ca <__aeabi_dmul+0x2ee>
    74be:	2180      	movs	r1, #128	; 0x80
    74c0:	0249      	lsls	r1, r1, #9
    74c2:	468c      	mov	ip, r1
    74c4:	9900      	ldr	r1, [sp, #0]
    74c6:	4461      	add	r1, ip
    74c8:	9100      	str	r1, [sp, #0]
    74ca:	9801      	ldr	r0, [sp, #4]
    74cc:	9903      	ldr	r1, [sp, #12]
    74ce:	4684      	mov	ip, r0
    74d0:	4461      	add	r1, ip
    74d2:	4299      	cmp	r1, r3
    74d4:	419b      	sbcs	r3, r3
    74d6:	425b      	negs	r3, r3
    74d8:	4699      	mov	r9, r3
    74da:	9805      	ldr	r0, [sp, #20]
    74dc:	4643      	mov	r3, r8
    74de:	4684      	mov	ip, r0
    74e0:	0412      	lsls	r2, r2, #16
    74e2:	0c12      	lsrs	r2, r2, #16
    74e4:	041b      	lsls	r3, r3, #16
    74e6:	189b      	adds	r3, r3, r2
    74e8:	4463      	add	r3, ip
    74ea:	469c      	mov	ip, r3
    74ec:	46ab      	mov	fp, r5
    74ee:	4283      	cmp	r3, r0
    74f0:	419b      	sbcs	r3, r3
    74f2:	4640      	mov	r0, r8
    74f4:	190a      	adds	r2, r1, r4
    74f6:	44cc      	add	ip, r9
    74f8:	42a2      	cmp	r2, r4
    74fa:	4189      	sbcs	r1, r1
    74fc:	44e3      	add	fp, ip
    74fe:	45cc      	cmp	ip, r9
    7500:	41b6      	sbcs	r6, r6
    7502:	465c      	mov	r4, fp
    7504:	0c00      	lsrs	r0, r0, #16
    7506:	4680      	mov	r8, r0
    7508:	4249      	negs	r1, r1
    750a:	4276      	negs	r6, r6
    750c:	425b      	negs	r3, r3
    750e:	1864      	adds	r4, r4, r1
    7510:	4333      	orrs	r3, r6
    7512:	4498      	add	r8, r3
    7514:	428c      	cmp	r4, r1
    7516:	4189      	sbcs	r1, r1
    7518:	45ab      	cmp	fp, r5
    751a:	419b      	sbcs	r3, r3
    751c:	4249      	negs	r1, r1
    751e:	425b      	negs	r3, r3
    7520:	4319      	orrs	r1, r3
    7522:	1c0d      	adds	r5, r1, #0
    7524:	9b00      	ldr	r3, [sp, #0]
    7526:	4445      	add	r5, r8
    7528:	18ee      	adds	r6, r5, r3
    752a:	0276      	lsls	r6, r6, #9
    752c:	0de5      	lsrs	r5, r4, #23
    752e:	432e      	orrs	r6, r5
    7530:	46b3      	mov	fp, r6
    7532:	9b04      	ldr	r3, [sp, #16]
    7534:	0256      	lsls	r6, r2, #9
    7536:	431e      	orrs	r6, r3
    7538:	1e73      	subs	r3, r6, #1
    753a:	419e      	sbcs	r6, r3
    753c:	465b      	mov	r3, fp
    753e:	0dd2      	lsrs	r2, r2, #23
    7540:	4332      	orrs	r2, r6
    7542:	0266      	lsls	r6, r4, #9
    7544:	4316      	orrs	r6, r2
    7546:	01db      	lsls	r3, r3, #7
    7548:	d50a      	bpl.n	7560 <__aeabi_dmul+0x384>
    754a:	2301      	movs	r3, #1
    754c:	4033      	ands	r3, r6
    754e:	0876      	lsrs	r6, r6, #1
    7550:	431e      	orrs	r6, r3
    7552:	465b      	mov	r3, fp
    7554:	07db      	lsls	r3, r3, #31
    7556:	431e      	orrs	r6, r3
    7558:	465b      	mov	r3, fp
    755a:	085b      	lsrs	r3, r3, #1
    755c:	469b      	mov	fp, r3
    755e:	4657      	mov	r7, sl
    7560:	4b63      	ldr	r3, [pc, #396]	; (76f0 <__aeabi_dmul+0x514>)
    7562:	18fb      	adds	r3, r7, r3
    7564:	2b00      	cmp	r3, #0
    7566:	dd5a      	ble.n	761e <__aeabi_dmul+0x442>
    7568:	0772      	lsls	r2, r6, #29
    756a:	d009      	beq.n	7580 <__aeabi_dmul+0x3a4>
    756c:	220f      	movs	r2, #15
    756e:	4032      	ands	r2, r6
    7570:	2a04      	cmp	r2, #4
    7572:	d005      	beq.n	7580 <__aeabi_dmul+0x3a4>
    7574:	1d32      	adds	r2, r6, #4
    7576:	42b2      	cmp	r2, r6
    7578:	41b6      	sbcs	r6, r6
    757a:	4276      	negs	r6, r6
    757c:	44b3      	add	fp, r6
    757e:	1c16      	adds	r6, r2, #0
    7580:	465a      	mov	r2, fp
    7582:	01d2      	lsls	r2, r2, #7
    7584:	d506      	bpl.n	7594 <__aeabi_dmul+0x3b8>
    7586:	465a      	mov	r2, fp
    7588:	4b5a      	ldr	r3, [pc, #360]	; (76f4 <__aeabi_dmul+0x518>)
    758a:	401a      	ands	r2, r3
    758c:	2380      	movs	r3, #128	; 0x80
    758e:	4693      	mov	fp, r2
    7590:	00db      	lsls	r3, r3, #3
    7592:	18fb      	adds	r3, r7, r3
    7594:	4a58      	ldr	r2, [pc, #352]	; (76f8 <__aeabi_dmul+0x51c>)
    7596:	4293      	cmp	r3, r2
    7598:	dd34      	ble.n	7604 <__aeabi_dmul+0x428>
    759a:	2401      	movs	r4, #1
    759c:	9b02      	ldr	r3, [sp, #8]
    759e:	2500      	movs	r5, #0
    75a0:	401c      	ands	r4, r3
    75a2:	2600      	movs	r6, #0
    75a4:	4b55      	ldr	r3, [pc, #340]	; (76fc <__aeabi_dmul+0x520>)
    75a6:	e67d      	b.n	72a4 <__aeabi_dmul+0xc8>
    75a8:	2080      	movs	r0, #128	; 0x80
    75aa:	465b      	mov	r3, fp
    75ac:	0300      	lsls	r0, r0, #12
    75ae:	4203      	tst	r3, r0
    75b0:	d008      	beq.n	75c4 <__aeabi_dmul+0x3e8>
    75b2:	4205      	tst	r5, r0
    75b4:	d106      	bne.n	75c4 <__aeabi_dmul+0x3e8>
    75b6:	4305      	orrs	r5, r0
    75b8:	032d      	lsls	r5, r5, #12
    75ba:	0b2d      	lsrs	r5, r5, #12
    75bc:	464c      	mov	r4, r9
    75be:	1c16      	adds	r6, r2, #0
    75c0:	4b4e      	ldr	r3, [pc, #312]	; (76fc <__aeabi_dmul+0x520>)
    75c2:	e66f      	b.n	72a4 <__aeabi_dmul+0xc8>
    75c4:	465d      	mov	r5, fp
    75c6:	4305      	orrs	r5, r0
    75c8:	032d      	lsls	r5, r5, #12
    75ca:	0b2d      	lsrs	r5, r5, #12
    75cc:	4b4b      	ldr	r3, [pc, #300]	; (76fc <__aeabi_dmul+0x520>)
    75ce:	e669      	b.n	72a4 <__aeabi_dmul+0xc8>
    75d0:	4650      	mov	r0, sl
    75d2:	f000 fc7f 	bl	7ed4 <__clzsi2>
    75d6:	1c03      	adds	r3, r0, #0
    75d8:	3320      	adds	r3, #32
    75da:	2b27      	cmp	r3, #39	; 0x27
    75dc:	dc00      	bgt.n	75e0 <__aeabi_dmul+0x404>
    75de:	e6a6      	b.n	732e <__aeabi_dmul+0x152>
    75e0:	4655      	mov	r5, sl
    75e2:	3808      	subs	r0, #8
    75e4:	4085      	lsls	r5, r0
    75e6:	2200      	movs	r2, #0
    75e8:	e6ac      	b.n	7344 <__aeabi_dmul+0x168>
    75ea:	1c28      	adds	r0, r5, #0
    75ec:	f000 fc72 	bl	7ed4 <__clzsi2>
    75f0:	1c02      	adds	r2, r0, #0
    75f2:	3220      	adds	r2, #32
    75f4:	2a27      	cmp	r2, #39	; 0x27
    75f6:	dc00      	bgt.n	75fa <__aeabi_dmul+0x41e>
    75f8:	e675      	b.n	72e6 <__aeabi_dmul+0x10a>
    75fa:	3808      	subs	r0, #8
    75fc:	4085      	lsls	r5, r0
    75fe:	2600      	movs	r6, #0
    7600:	46ab      	mov	fp, r5
    7602:	e67d      	b.n	7300 <__aeabi_dmul+0x124>
    7604:	465a      	mov	r2, fp
    7606:	08f6      	lsrs	r6, r6, #3
    7608:	0752      	lsls	r2, r2, #29
    760a:	4316      	orrs	r6, r2
    760c:	465a      	mov	r2, fp
    760e:	2401      	movs	r4, #1
    7610:	0255      	lsls	r5, r2, #9
    7612:	9a02      	ldr	r2, [sp, #8]
    7614:	055b      	lsls	r3, r3, #21
    7616:	0b2d      	lsrs	r5, r5, #12
    7618:	0d5b      	lsrs	r3, r3, #21
    761a:	4014      	ands	r4, r2
    761c:	e642      	b.n	72a4 <__aeabi_dmul+0xc8>
    761e:	4d38      	ldr	r5, [pc, #224]	; (7700 <__aeabi_dmul+0x524>)
    7620:	1bed      	subs	r5, r5, r7
    7622:	2d38      	cmp	r5, #56	; 0x38
    7624:	dd0a      	ble.n	763c <__aeabi_dmul+0x460>
    7626:	2401      	movs	r4, #1
    7628:	9b02      	ldr	r3, [sp, #8]
    762a:	2500      	movs	r5, #0
    762c:	401c      	ands	r4, r3
    762e:	2600      	movs	r6, #0
    7630:	2300      	movs	r3, #0
    7632:	e637      	b.n	72a4 <__aeabi_dmul+0xc8>
    7634:	9b01      	ldr	r3, [sp, #4]
    7636:	4657      	mov	r7, sl
    7638:	9302      	str	r3, [sp, #8]
    763a:	e791      	b.n	7560 <__aeabi_dmul+0x384>
    763c:	2d1f      	cmp	r5, #31
    763e:	dc25      	bgt.n	768c <__aeabi_dmul+0x4b0>
    7640:	4b30      	ldr	r3, [pc, #192]	; (7704 <__aeabi_dmul+0x528>)
    7642:	1c32      	adds	r2, r6, #0
    7644:	469c      	mov	ip, r3
    7646:	4467      	add	r7, ip
    7648:	40be      	lsls	r6, r7
    764a:	465b      	mov	r3, fp
    764c:	40bb      	lsls	r3, r7
    764e:	1c37      	adds	r7, r6, #0
    7650:	40ea      	lsrs	r2, r5
    7652:	1e7e      	subs	r6, r7, #1
    7654:	41b7      	sbcs	r7, r6
    7656:	4313      	orrs	r3, r2
    7658:	433b      	orrs	r3, r7
    765a:	1c1e      	adds	r6, r3, #0
    765c:	465b      	mov	r3, fp
    765e:	40eb      	lsrs	r3, r5
    7660:	1c1d      	adds	r5, r3, #0
    7662:	0773      	lsls	r3, r6, #29
    7664:	d009      	beq.n	767a <__aeabi_dmul+0x49e>
    7666:	230f      	movs	r3, #15
    7668:	4033      	ands	r3, r6
    766a:	2b04      	cmp	r3, #4
    766c:	d005      	beq.n	767a <__aeabi_dmul+0x49e>
    766e:	1d33      	adds	r3, r6, #4
    7670:	42b3      	cmp	r3, r6
    7672:	41b6      	sbcs	r6, r6
    7674:	4276      	negs	r6, r6
    7676:	19ad      	adds	r5, r5, r6
    7678:	1c1e      	adds	r6, r3, #0
    767a:	022b      	lsls	r3, r5, #8
    767c:	d520      	bpl.n	76c0 <__aeabi_dmul+0x4e4>
    767e:	2401      	movs	r4, #1
    7680:	9b02      	ldr	r3, [sp, #8]
    7682:	2500      	movs	r5, #0
    7684:	401c      	ands	r4, r3
    7686:	2600      	movs	r6, #0
    7688:	2301      	movs	r3, #1
    768a:	e60b      	b.n	72a4 <__aeabi_dmul+0xc8>
    768c:	465a      	mov	r2, fp
    768e:	4b1e      	ldr	r3, [pc, #120]	; (7708 <__aeabi_dmul+0x52c>)
    7690:	1bdb      	subs	r3, r3, r7
    7692:	40da      	lsrs	r2, r3
    7694:	1c13      	adds	r3, r2, #0
    7696:	2d20      	cmp	r5, #32
    7698:	d01c      	beq.n	76d4 <__aeabi_dmul+0x4f8>
    769a:	4a1c      	ldr	r2, [pc, #112]	; (770c <__aeabi_dmul+0x530>)
    769c:	4694      	mov	ip, r2
    769e:	465a      	mov	r2, fp
    76a0:	4467      	add	r7, ip
    76a2:	40ba      	lsls	r2, r7
    76a4:	1c17      	adds	r7, r2, #0
    76a6:	433e      	orrs	r6, r7
    76a8:	1e72      	subs	r2, r6, #1
    76aa:	4196      	sbcs	r6, r2
    76ac:	431e      	orrs	r6, r3
    76ae:	2307      	movs	r3, #7
    76b0:	2500      	movs	r5, #0
    76b2:	4033      	ands	r3, r6
    76b4:	d007      	beq.n	76c6 <__aeabi_dmul+0x4ea>
    76b6:	230f      	movs	r3, #15
    76b8:	2500      	movs	r5, #0
    76ba:	4033      	ands	r3, r6
    76bc:	2b04      	cmp	r3, #4
    76be:	d1d6      	bne.n	766e <__aeabi_dmul+0x492>
    76c0:	076b      	lsls	r3, r5, #29
    76c2:	026d      	lsls	r5, r5, #9
    76c4:	0b2d      	lsrs	r5, r5, #12
    76c6:	2401      	movs	r4, #1
    76c8:	08f6      	lsrs	r6, r6, #3
    76ca:	431e      	orrs	r6, r3
    76cc:	9b02      	ldr	r3, [sp, #8]
    76ce:	401c      	ands	r4, r3
    76d0:	2300      	movs	r3, #0
    76d2:	e5e7      	b.n	72a4 <__aeabi_dmul+0xc8>
    76d4:	2700      	movs	r7, #0
    76d6:	e7e6      	b.n	76a6 <__aeabi_dmul+0x4ca>
    76d8:	2580      	movs	r5, #128	; 0x80
    76da:	465b      	mov	r3, fp
    76dc:	2401      	movs	r4, #1
    76de:	032d      	lsls	r5, r5, #12
    76e0:	431d      	orrs	r5, r3
    76e2:	9b01      	ldr	r3, [sp, #4]
    76e4:	032d      	lsls	r5, r5, #12
    76e6:	4023      	ands	r3, r4
    76e8:	1c1c      	adds	r4, r3, #0
    76ea:	0b2d      	lsrs	r5, r5, #12
    76ec:	4b03      	ldr	r3, [pc, #12]	; (76fc <__aeabi_dmul+0x520>)
    76ee:	e5d9      	b.n	72a4 <__aeabi_dmul+0xc8>
    76f0:	000003ff 	.word	0x000003ff
    76f4:	feffffff 	.word	0xfeffffff
    76f8:	000007fe 	.word	0x000007fe
    76fc:	000007ff 	.word	0x000007ff
    7700:	fffffc02 	.word	0xfffffc02
    7704:	0000041e 	.word	0x0000041e
    7708:	fffffbe2 	.word	0xfffffbe2
    770c:	0000043e 	.word	0x0000043e

00007710 <__aeabi_dsub>:
    7710:	b5f0      	push	{r4, r5, r6, r7, lr}
    7712:	464d      	mov	r5, r9
    7714:	4644      	mov	r4, r8
    7716:	465f      	mov	r7, fp
    7718:	4656      	mov	r6, sl
    771a:	b4f0      	push	{r4, r5, r6, r7}
    771c:	1c0e      	adds	r6, r1, #0
    771e:	1c11      	adds	r1, r2, #0
    7720:	0332      	lsls	r2, r6, #12
    7722:	0a52      	lsrs	r2, r2, #9
    7724:	0f47      	lsrs	r7, r0, #29
    7726:	4317      	orrs	r7, r2
    7728:	00c5      	lsls	r5, r0, #3
    772a:	031a      	lsls	r2, r3, #12
    772c:	0058      	lsls	r0, r3, #1
    772e:	0fdb      	lsrs	r3, r3, #31
    7730:	4699      	mov	r9, r3
    7732:	0a52      	lsrs	r2, r2, #9
    7734:	0f4b      	lsrs	r3, r1, #29
    7736:	b083      	sub	sp, #12
    7738:	431a      	orrs	r2, r3
    773a:	00cb      	lsls	r3, r1, #3
    773c:	9301      	str	r3, [sp, #4]
    773e:	4bcf      	ldr	r3, [pc, #828]	; (7a7c <__aeabi_dsub+0x36c>)
    7740:	0074      	lsls	r4, r6, #1
    7742:	0ff6      	lsrs	r6, r6, #31
    7744:	0d64      	lsrs	r4, r4, #21
    7746:	46b0      	mov	r8, r6
    7748:	0d40      	lsrs	r0, r0, #21
    774a:	4298      	cmp	r0, r3
    774c:	d100      	bne.n	7750 <__aeabi_dsub+0x40>
    774e:	e0e8      	b.n	7922 <__aeabi_dsub+0x212>
    7750:	2301      	movs	r3, #1
    7752:	4649      	mov	r1, r9
    7754:	4059      	eors	r1, r3
    7756:	1c0b      	adds	r3, r1, #0
    7758:	429e      	cmp	r6, r3
    775a:	d100      	bne.n	775e <__aeabi_dsub+0x4e>
    775c:	e0b1      	b.n	78c2 <__aeabi_dsub+0x1b2>
    775e:	1a26      	subs	r6, r4, r0
    7760:	2e00      	cmp	r6, #0
    7762:	dc00      	bgt.n	7766 <__aeabi_dsub+0x56>
    7764:	e11c      	b.n	79a0 <__aeabi_dsub+0x290>
    7766:	2800      	cmp	r0, #0
    7768:	d142      	bne.n	77f0 <__aeabi_dsub+0xe0>
    776a:	1c13      	adds	r3, r2, #0
    776c:	9901      	ldr	r1, [sp, #4]
    776e:	430b      	orrs	r3, r1
    7770:	d000      	beq.n	7774 <__aeabi_dsub+0x64>
    7772:	e0e6      	b.n	7942 <__aeabi_dsub+0x232>
    7774:	076b      	lsls	r3, r5, #29
    7776:	d100      	bne.n	777a <__aeabi_dsub+0x6a>
    7778:	e08e      	b.n	7898 <__aeabi_dsub+0x188>
    777a:	230f      	movs	r3, #15
    777c:	402b      	ands	r3, r5
    777e:	2b04      	cmp	r3, #4
    7780:	d100      	bne.n	7784 <__aeabi_dsub+0x74>
    7782:	e089      	b.n	7898 <__aeabi_dsub+0x188>
    7784:	1d2a      	adds	r2, r5, #4
    7786:	42aa      	cmp	r2, r5
    7788:	41ad      	sbcs	r5, r5
    778a:	2380      	movs	r3, #128	; 0x80
    778c:	2601      	movs	r6, #1
    778e:	4641      	mov	r1, r8
    7790:	426d      	negs	r5, r5
    7792:	197f      	adds	r7, r7, r5
    7794:	041b      	lsls	r3, r3, #16
    7796:	403b      	ands	r3, r7
    7798:	400e      	ands	r6, r1
    779a:	1c15      	adds	r5, r2, #0
    779c:	2b00      	cmp	r3, #0
    779e:	d100      	bne.n	77a2 <__aeabi_dsub+0x92>
    77a0:	e083      	b.n	78aa <__aeabi_dsub+0x19a>
    77a2:	4bb6      	ldr	r3, [pc, #728]	; (7a7c <__aeabi_dsub+0x36c>)
    77a4:	3401      	adds	r4, #1
    77a6:	429c      	cmp	r4, r3
    77a8:	d100      	bne.n	77ac <__aeabi_dsub+0x9c>
    77aa:	e116      	b.n	79da <__aeabi_dsub+0x2ca>
    77ac:	1c3a      	adds	r2, r7, #0
    77ae:	4bb4      	ldr	r3, [pc, #720]	; (7a80 <__aeabi_dsub+0x370>)
    77b0:	08ed      	lsrs	r5, r5, #3
    77b2:	401a      	ands	r2, r3
    77b4:	0750      	lsls	r0, r2, #29
    77b6:	0564      	lsls	r4, r4, #21
    77b8:	0252      	lsls	r2, r2, #9
    77ba:	4305      	orrs	r5, r0
    77bc:	0b12      	lsrs	r2, r2, #12
    77be:	0d64      	lsrs	r4, r4, #21
    77c0:	2100      	movs	r1, #0
    77c2:	0312      	lsls	r2, r2, #12
    77c4:	0d0b      	lsrs	r3, r1, #20
    77c6:	051b      	lsls	r3, r3, #20
    77c8:	0564      	lsls	r4, r4, #21
    77ca:	0b12      	lsrs	r2, r2, #12
    77cc:	431a      	orrs	r2, r3
    77ce:	0863      	lsrs	r3, r4, #1
    77d0:	4cac      	ldr	r4, [pc, #688]	; (7a84 <__aeabi_dsub+0x374>)
    77d2:	07f6      	lsls	r6, r6, #31
    77d4:	4014      	ands	r4, r2
    77d6:	431c      	orrs	r4, r3
    77d8:	0064      	lsls	r4, r4, #1
    77da:	0864      	lsrs	r4, r4, #1
    77dc:	4334      	orrs	r4, r6
    77de:	1c28      	adds	r0, r5, #0
    77e0:	1c21      	adds	r1, r4, #0
    77e2:	b003      	add	sp, #12
    77e4:	bc3c      	pop	{r2, r3, r4, r5}
    77e6:	4690      	mov	r8, r2
    77e8:	4699      	mov	r9, r3
    77ea:	46a2      	mov	sl, r4
    77ec:	46ab      	mov	fp, r5
    77ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77f0:	4ba2      	ldr	r3, [pc, #648]	; (7a7c <__aeabi_dsub+0x36c>)
    77f2:	429c      	cmp	r4, r3
    77f4:	d0be      	beq.n	7774 <__aeabi_dsub+0x64>
    77f6:	2380      	movs	r3, #128	; 0x80
    77f8:	041b      	lsls	r3, r3, #16
    77fa:	431a      	orrs	r2, r3
    77fc:	2e38      	cmp	r6, #56	; 0x38
    77fe:	dd00      	ble.n	7802 <__aeabi_dsub+0xf2>
    7800:	e103      	b.n	7a0a <__aeabi_dsub+0x2fa>
    7802:	2e1f      	cmp	r6, #31
    7804:	dd00      	ble.n	7808 <__aeabi_dsub+0xf8>
    7806:	e13f      	b.n	7a88 <__aeabi_dsub+0x378>
    7808:	2020      	movs	r0, #32
    780a:	1b83      	subs	r3, r0, r6
    780c:	4699      	mov	r9, r3
    780e:	1c13      	adds	r3, r2, #0
    7810:	4649      	mov	r1, r9
    7812:	408b      	lsls	r3, r1
    7814:	469c      	mov	ip, r3
    7816:	9b01      	ldr	r3, [sp, #4]
    7818:	4660      	mov	r0, ip
    781a:	40f3      	lsrs	r3, r6
    781c:	4303      	orrs	r3, r0
    781e:	9801      	ldr	r0, [sp, #4]
    7820:	40f2      	lsrs	r2, r6
    7822:	4088      	lsls	r0, r1
    7824:	1c01      	adds	r1, r0, #0
    7826:	1e48      	subs	r0, r1, #1
    7828:	4181      	sbcs	r1, r0
    782a:	430b      	orrs	r3, r1
    782c:	1aeb      	subs	r3, r5, r3
    782e:	429d      	cmp	r5, r3
    7830:	4180      	sbcs	r0, r0
    7832:	1c1d      	adds	r5, r3, #0
    7834:	1aba      	subs	r2, r7, r2
    7836:	4240      	negs	r0, r0
    7838:	1a17      	subs	r7, r2, r0
    783a:	023b      	lsls	r3, r7, #8
    783c:	d400      	bmi.n	7840 <__aeabi_dsub+0x130>
    783e:	e0a8      	b.n	7992 <__aeabi_dsub+0x282>
    7840:	027a      	lsls	r2, r7, #9
    7842:	0a56      	lsrs	r6, r2, #9
    7844:	2e00      	cmp	r6, #0
    7846:	d100      	bne.n	784a <__aeabi_dsub+0x13a>
    7848:	e0ca      	b.n	79e0 <__aeabi_dsub+0x2d0>
    784a:	1c30      	adds	r0, r6, #0
    784c:	f000 fb42 	bl	7ed4 <__clzsi2>
    7850:	1c03      	adds	r3, r0, #0
    7852:	3b08      	subs	r3, #8
    7854:	2b1f      	cmp	r3, #31
    7856:	dd00      	ble.n	785a <__aeabi_dsub+0x14a>
    7858:	e0cb      	b.n	79f2 <__aeabi_dsub+0x2e2>
    785a:	2228      	movs	r2, #40	; 0x28
    785c:	1c29      	adds	r1, r5, #0
    785e:	1a12      	subs	r2, r2, r0
    7860:	40d1      	lsrs	r1, r2
    7862:	409e      	lsls	r6, r3
    7864:	1c0a      	adds	r2, r1, #0
    7866:	409d      	lsls	r5, r3
    7868:	4332      	orrs	r2, r6
    786a:	429c      	cmp	r4, r3
    786c:	dd00      	ble.n	7870 <__aeabi_dsub+0x160>
    786e:	e0c8      	b.n	7a02 <__aeabi_dsub+0x2f2>
    7870:	1b1c      	subs	r4, r3, r4
    7872:	1c67      	adds	r7, r4, #1
    7874:	2f1f      	cmp	r7, #31
    7876:	dd00      	ble.n	787a <__aeabi_dsub+0x16a>
    7878:	e0ed      	b.n	7a56 <__aeabi_dsub+0x346>
    787a:	231f      	movs	r3, #31
    787c:	1c29      	adds	r1, r5, #0
    787e:	1b1c      	subs	r4, r3, r4
    7880:	1c13      	adds	r3, r2, #0
    7882:	40a5      	lsls	r5, r4
    7884:	40a3      	lsls	r3, r4
    7886:	40f9      	lsrs	r1, r7
    7888:	1e6c      	subs	r4, r5, #1
    788a:	41a5      	sbcs	r5, r4
    788c:	40fa      	lsrs	r2, r7
    788e:	4319      	orrs	r1, r3
    7890:	430d      	orrs	r5, r1
    7892:	1c17      	adds	r7, r2, #0
    7894:	2400      	movs	r4, #0
    7896:	e76d      	b.n	7774 <__aeabi_dsub+0x64>
    7898:	2380      	movs	r3, #128	; 0x80
    789a:	2601      	movs	r6, #1
    789c:	4642      	mov	r2, r8
    789e:	041b      	lsls	r3, r3, #16
    78a0:	403b      	ands	r3, r7
    78a2:	4016      	ands	r6, r2
    78a4:	2b00      	cmp	r3, #0
    78a6:	d000      	beq.n	78aa <__aeabi_dsub+0x19a>
    78a8:	e77b      	b.n	77a2 <__aeabi_dsub+0x92>
    78aa:	4b74      	ldr	r3, [pc, #464]	; (7a7c <__aeabi_dsub+0x36c>)
    78ac:	08ed      	lsrs	r5, r5, #3
    78ae:	0778      	lsls	r0, r7, #29
    78b0:	4305      	orrs	r5, r0
    78b2:	08fa      	lsrs	r2, r7, #3
    78b4:	429c      	cmp	r4, r3
    78b6:	d03b      	beq.n	7930 <__aeabi_dsub+0x220>
    78b8:	0312      	lsls	r2, r2, #12
    78ba:	0564      	lsls	r4, r4, #21
    78bc:	0b12      	lsrs	r2, r2, #12
    78be:	0d64      	lsrs	r4, r4, #21
    78c0:	e77e      	b.n	77c0 <__aeabi_dsub+0xb0>
    78c2:	1a23      	subs	r3, r4, r0
    78c4:	469a      	mov	sl, r3
    78c6:	2b00      	cmp	r3, #0
    78c8:	dc00      	bgt.n	78cc <__aeabi_dsub+0x1bc>
    78ca:	e0a5      	b.n	7a18 <__aeabi_dsub+0x308>
    78cc:	2800      	cmp	r0, #0
    78ce:	d044      	beq.n	795a <__aeabi_dsub+0x24a>
    78d0:	486a      	ldr	r0, [pc, #424]	; (7a7c <__aeabi_dsub+0x36c>)
    78d2:	4284      	cmp	r4, r0
    78d4:	d100      	bne.n	78d8 <__aeabi_dsub+0x1c8>
    78d6:	e74d      	b.n	7774 <__aeabi_dsub+0x64>
    78d8:	2080      	movs	r0, #128	; 0x80
    78da:	0400      	lsls	r0, r0, #16
    78dc:	4302      	orrs	r2, r0
    78de:	4653      	mov	r3, sl
    78e0:	2b38      	cmp	r3, #56	; 0x38
    78e2:	dc00      	bgt.n	78e6 <__aeabi_dsub+0x1d6>
    78e4:	e11c      	b.n	7b20 <__aeabi_dsub+0x410>
    78e6:	9b01      	ldr	r3, [sp, #4]
    78e8:	431a      	orrs	r2, r3
    78ea:	1e51      	subs	r1, r2, #1
    78ec:	418a      	sbcs	r2, r1
    78ee:	b2d1      	uxtb	r1, r2
    78f0:	2200      	movs	r2, #0
    78f2:	1949      	adds	r1, r1, r5
    78f4:	42a9      	cmp	r1, r5
    78f6:	4180      	sbcs	r0, r0
    78f8:	1c0d      	adds	r5, r1, #0
    78fa:	19d2      	adds	r2, r2, r7
    78fc:	4240      	negs	r0, r0
    78fe:	1817      	adds	r7, r2, r0
    7900:	023b      	lsls	r3, r7, #8
    7902:	d546      	bpl.n	7992 <__aeabi_dsub+0x282>
    7904:	4b5d      	ldr	r3, [pc, #372]	; (7a7c <__aeabi_dsub+0x36c>)
    7906:	3401      	adds	r4, #1
    7908:	429c      	cmp	r4, r3
    790a:	d100      	bne.n	790e <__aeabi_dsub+0x1fe>
    790c:	e169      	b.n	7be2 <__aeabi_dsub+0x4d2>
    790e:	2001      	movs	r0, #1
    7910:	4a5b      	ldr	r2, [pc, #364]	; (7a80 <__aeabi_dsub+0x370>)
    7912:	086b      	lsrs	r3, r5, #1
    7914:	403a      	ands	r2, r7
    7916:	4028      	ands	r0, r5
    7918:	4318      	orrs	r0, r3
    791a:	07d5      	lsls	r5, r2, #31
    791c:	4305      	orrs	r5, r0
    791e:	0857      	lsrs	r7, r2, #1
    7920:	e728      	b.n	7774 <__aeabi_dsub+0x64>
    7922:	1c13      	adds	r3, r2, #0
    7924:	9901      	ldr	r1, [sp, #4]
    7926:	430b      	orrs	r3, r1
    7928:	d100      	bne.n	792c <__aeabi_dsub+0x21c>
    792a:	e711      	b.n	7750 <__aeabi_dsub+0x40>
    792c:	464b      	mov	r3, r9
    792e:	e713      	b.n	7758 <__aeabi_dsub+0x48>
    7930:	1c2b      	adds	r3, r5, #0
    7932:	4313      	orrs	r3, r2
    7934:	d051      	beq.n	79da <__aeabi_dsub+0x2ca>
    7936:	2380      	movs	r3, #128	; 0x80
    7938:	031b      	lsls	r3, r3, #12
    793a:	431a      	orrs	r2, r3
    793c:	0312      	lsls	r2, r2, #12
    793e:	0b12      	lsrs	r2, r2, #12
    7940:	e73e      	b.n	77c0 <__aeabi_dsub+0xb0>
    7942:	3e01      	subs	r6, #1
    7944:	2e00      	cmp	r6, #0
    7946:	d000      	beq.n	794a <__aeabi_dsub+0x23a>
    7948:	e080      	b.n	7a4c <__aeabi_dsub+0x33c>
    794a:	1a69      	subs	r1, r5, r1
    794c:	428d      	cmp	r5, r1
    794e:	419b      	sbcs	r3, r3
    7950:	1aba      	subs	r2, r7, r2
    7952:	425b      	negs	r3, r3
    7954:	1ad7      	subs	r7, r2, r3
    7956:	1c0d      	adds	r5, r1, #0
    7958:	e76f      	b.n	783a <__aeabi_dsub+0x12a>
    795a:	1c10      	adds	r0, r2, #0
    795c:	9b01      	ldr	r3, [sp, #4]
    795e:	4318      	orrs	r0, r3
    7960:	d100      	bne.n	7964 <__aeabi_dsub+0x254>
    7962:	e707      	b.n	7774 <__aeabi_dsub+0x64>
    7964:	2301      	movs	r3, #1
    7966:	425b      	negs	r3, r3
    7968:	469c      	mov	ip, r3
    796a:	44e2      	add	sl, ip
    796c:	4653      	mov	r3, sl
    796e:	2b00      	cmp	r3, #0
    7970:	d000      	beq.n	7974 <__aeabi_dsub+0x264>
    7972:	e102      	b.n	7b7a <__aeabi_dsub+0x46a>
    7974:	9b01      	ldr	r3, [sp, #4]
    7976:	19d2      	adds	r2, r2, r7
    7978:	1959      	adds	r1, r3, r5
    797a:	42a9      	cmp	r1, r5
    797c:	419b      	sbcs	r3, r3
    797e:	425b      	negs	r3, r3
    7980:	18d7      	adds	r7, r2, r3
    7982:	1c0d      	adds	r5, r1, #0
    7984:	e7bc      	b.n	7900 <__aeabi_dsub+0x1f0>
    7986:	4663      	mov	r3, ip
    7988:	4303      	orrs	r3, r0
    798a:	d100      	bne.n	798e <__aeabi_dsub+0x27e>
    798c:	e128      	b.n	7be0 <__aeabi_dsub+0x4d0>
    798e:	1c07      	adds	r7, r0, #0
    7990:	4665      	mov	r5, ip
    7992:	076b      	lsls	r3, r5, #29
    7994:	d000      	beq.n	7998 <__aeabi_dsub+0x288>
    7996:	e6f0      	b.n	777a <__aeabi_dsub+0x6a>
    7998:	2601      	movs	r6, #1
    799a:	4643      	mov	r3, r8
    799c:	401e      	ands	r6, r3
    799e:	e784      	b.n	78aa <__aeabi_dsub+0x19a>
    79a0:	2e00      	cmp	r6, #0
    79a2:	d000      	beq.n	79a6 <__aeabi_dsub+0x296>
    79a4:	e081      	b.n	7aaa <__aeabi_dsub+0x39a>
    79a6:	1c60      	adds	r0, r4, #1
    79a8:	0540      	lsls	r0, r0, #21
    79aa:	0d40      	lsrs	r0, r0, #21
    79ac:	2801      	cmp	r0, #1
    79ae:	dc00      	bgt.n	79b2 <__aeabi_dsub+0x2a2>
    79b0:	e107      	b.n	7bc2 <__aeabi_dsub+0x4b2>
    79b2:	9901      	ldr	r1, [sp, #4]
    79b4:	1a68      	subs	r0, r5, r1
    79b6:	4684      	mov	ip, r0
    79b8:	4565      	cmp	r5, ip
    79ba:	41b6      	sbcs	r6, r6
    79bc:	1ab8      	subs	r0, r7, r2
    79be:	4276      	negs	r6, r6
    79c0:	1b86      	subs	r6, r0, r6
    79c2:	0230      	lsls	r0, r6, #8
    79c4:	d400      	bmi.n	79c8 <__aeabi_dsub+0x2b8>
    79c6:	e0a1      	b.n	7b0c <__aeabi_dsub+0x3fc>
    79c8:	468c      	mov	ip, r1
    79ca:	1b4d      	subs	r5, r1, r5
    79cc:	45ac      	cmp	ip, r5
    79ce:	4189      	sbcs	r1, r1
    79d0:	1bd2      	subs	r2, r2, r7
    79d2:	4249      	negs	r1, r1
    79d4:	1a56      	subs	r6, r2, r1
    79d6:	4698      	mov	r8, r3
    79d8:	e734      	b.n	7844 <__aeabi_dsub+0x134>
    79da:	2200      	movs	r2, #0
    79dc:	2500      	movs	r5, #0
    79de:	e6ef      	b.n	77c0 <__aeabi_dsub+0xb0>
    79e0:	1c28      	adds	r0, r5, #0
    79e2:	f000 fa77 	bl	7ed4 <__clzsi2>
    79e6:	3020      	adds	r0, #32
    79e8:	1c03      	adds	r3, r0, #0
    79ea:	3b08      	subs	r3, #8
    79ec:	2b1f      	cmp	r3, #31
    79ee:	dc00      	bgt.n	79f2 <__aeabi_dsub+0x2e2>
    79f0:	e733      	b.n	785a <__aeabi_dsub+0x14a>
    79f2:	1c02      	adds	r2, r0, #0
    79f4:	3a28      	subs	r2, #40	; 0x28
    79f6:	4095      	lsls	r5, r2
    79f8:	1c2a      	adds	r2, r5, #0
    79fa:	2500      	movs	r5, #0
    79fc:	429c      	cmp	r4, r3
    79fe:	dc00      	bgt.n	7a02 <__aeabi_dsub+0x2f2>
    7a00:	e736      	b.n	7870 <__aeabi_dsub+0x160>
    7a02:	4f1f      	ldr	r7, [pc, #124]	; (7a80 <__aeabi_dsub+0x370>)
    7a04:	1ae4      	subs	r4, r4, r3
    7a06:	4017      	ands	r7, r2
    7a08:	e6b4      	b.n	7774 <__aeabi_dsub+0x64>
    7a0a:	9b01      	ldr	r3, [sp, #4]
    7a0c:	431a      	orrs	r2, r3
    7a0e:	1e51      	subs	r1, r2, #1
    7a10:	418a      	sbcs	r2, r1
    7a12:	b2d3      	uxtb	r3, r2
    7a14:	2200      	movs	r2, #0
    7a16:	e709      	b.n	782c <__aeabi_dsub+0x11c>
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d000      	beq.n	7a1e <__aeabi_dsub+0x30e>
    7a1c:	e101      	b.n	7c22 <__aeabi_dsub+0x512>
    7a1e:	1c60      	adds	r0, r4, #1
    7a20:	0543      	lsls	r3, r0, #21
    7a22:	0d5b      	lsrs	r3, r3, #21
    7a24:	2b01      	cmp	r3, #1
    7a26:	dc00      	bgt.n	7a2a <__aeabi_dsub+0x31a>
    7a28:	e0b0      	b.n	7b8c <__aeabi_dsub+0x47c>
    7a2a:	4b14      	ldr	r3, [pc, #80]	; (7a7c <__aeabi_dsub+0x36c>)
    7a2c:	4298      	cmp	r0, r3
    7a2e:	d100      	bne.n	7a32 <__aeabi_dsub+0x322>
    7a30:	e11e      	b.n	7c70 <__aeabi_dsub+0x560>
    7a32:	9b01      	ldr	r3, [sp, #4]
    7a34:	19d2      	adds	r2, r2, r7
    7a36:	1959      	adds	r1, r3, r5
    7a38:	42a9      	cmp	r1, r5
    7a3a:	419b      	sbcs	r3, r3
    7a3c:	425b      	negs	r3, r3
    7a3e:	18d2      	adds	r2, r2, r3
    7a40:	0849      	lsrs	r1, r1, #1
    7a42:	07d5      	lsls	r5, r2, #31
    7a44:	430d      	orrs	r5, r1
    7a46:	0857      	lsrs	r7, r2, #1
    7a48:	1c04      	adds	r4, r0, #0
    7a4a:	e693      	b.n	7774 <__aeabi_dsub+0x64>
    7a4c:	4b0b      	ldr	r3, [pc, #44]	; (7a7c <__aeabi_dsub+0x36c>)
    7a4e:	429c      	cmp	r4, r3
    7a50:	d000      	beq.n	7a54 <__aeabi_dsub+0x344>
    7a52:	e6d3      	b.n	77fc <__aeabi_dsub+0xec>
    7a54:	e68e      	b.n	7774 <__aeabi_dsub+0x64>
    7a56:	1c21      	adds	r1, r4, #0
    7a58:	1c13      	adds	r3, r2, #0
    7a5a:	391f      	subs	r1, #31
    7a5c:	40cb      	lsrs	r3, r1
    7a5e:	1c19      	adds	r1, r3, #0
    7a60:	2f20      	cmp	r7, #32
    7a62:	d100      	bne.n	7a66 <__aeabi_dsub+0x356>
    7a64:	e08e      	b.n	7b84 <__aeabi_dsub+0x474>
    7a66:	233f      	movs	r3, #63	; 0x3f
    7a68:	1b1c      	subs	r4, r3, r4
    7a6a:	40a2      	lsls	r2, r4
    7a6c:	4315      	orrs	r5, r2
    7a6e:	1e6a      	subs	r2, r5, #1
    7a70:	4195      	sbcs	r5, r2
    7a72:	2700      	movs	r7, #0
    7a74:	430d      	orrs	r5, r1
    7a76:	2400      	movs	r4, #0
    7a78:	e78b      	b.n	7992 <__aeabi_dsub+0x282>
    7a7a:	46c0      	nop			; (mov r8, r8)
    7a7c:	000007ff 	.word	0x000007ff
    7a80:	ff7fffff 	.word	0xff7fffff
    7a84:	800fffff 	.word	0x800fffff
    7a88:	1c33      	adds	r3, r6, #0
    7a8a:	1c10      	adds	r0, r2, #0
    7a8c:	3b20      	subs	r3, #32
    7a8e:	40d8      	lsrs	r0, r3
    7a90:	2e20      	cmp	r6, #32
    7a92:	d079      	beq.n	7b88 <__aeabi_dsub+0x478>
    7a94:	2340      	movs	r3, #64	; 0x40
    7a96:	1b9b      	subs	r3, r3, r6
    7a98:	409a      	lsls	r2, r3
    7a9a:	1c13      	adds	r3, r2, #0
    7a9c:	9a01      	ldr	r2, [sp, #4]
    7a9e:	4313      	orrs	r3, r2
    7aa0:	1e59      	subs	r1, r3, #1
    7aa2:	418b      	sbcs	r3, r1
    7aa4:	2200      	movs	r2, #0
    7aa6:	4303      	orrs	r3, r0
    7aa8:	e6c0      	b.n	782c <__aeabi_dsub+0x11c>
    7aaa:	2c00      	cmp	r4, #0
    7aac:	d053      	beq.n	7b56 <__aeabi_dsub+0x446>
    7aae:	4cc7      	ldr	r4, [pc, #796]	; (7dcc <__aeabi_dsub+0x6bc>)
    7ab0:	42a0      	cmp	r0, r4
    7ab2:	d100      	bne.n	7ab6 <__aeabi_dsub+0x3a6>
    7ab4:	e0b0      	b.n	7c18 <__aeabi_dsub+0x508>
    7ab6:	2480      	movs	r4, #128	; 0x80
    7ab8:	4271      	negs	r1, r6
    7aba:	4689      	mov	r9, r1
    7abc:	0424      	lsls	r4, r4, #16
    7abe:	4327      	orrs	r7, r4
    7ac0:	4649      	mov	r1, r9
    7ac2:	2938      	cmp	r1, #56	; 0x38
    7ac4:	dd00      	ble.n	7ac8 <__aeabi_dsub+0x3b8>
    7ac6:	e0cd      	b.n	7c64 <__aeabi_dsub+0x554>
    7ac8:	291f      	cmp	r1, #31
    7aca:	dd00      	ble.n	7ace <__aeabi_dsub+0x3be>
    7acc:	e159      	b.n	7d82 <__aeabi_dsub+0x672>
    7ace:	2420      	movs	r4, #32
    7ad0:	1c3e      	adds	r6, r7, #0
    7ad2:	1a61      	subs	r1, r4, r1
    7ad4:	408e      	lsls	r6, r1
    7ad6:	468a      	mov	sl, r1
    7ad8:	46b0      	mov	r8, r6
    7ada:	4649      	mov	r1, r9
    7adc:	1c2e      	adds	r6, r5, #0
    7ade:	40ce      	lsrs	r6, r1
    7ae0:	4651      	mov	r1, sl
    7ae2:	46b4      	mov	ip, r6
    7ae4:	408d      	lsls	r5, r1
    7ae6:	4664      	mov	r4, ip
    7ae8:	4646      	mov	r6, r8
    7aea:	4649      	mov	r1, r9
    7aec:	4326      	orrs	r6, r4
    7aee:	1e6c      	subs	r4, r5, #1
    7af0:	41a5      	sbcs	r5, r4
    7af2:	40cf      	lsrs	r7, r1
    7af4:	4335      	orrs	r5, r6
    7af6:	9901      	ldr	r1, [sp, #4]
    7af8:	1bd7      	subs	r7, r2, r7
    7afa:	468c      	mov	ip, r1
    7afc:	1b4d      	subs	r5, r1, r5
    7afe:	45ac      	cmp	ip, r5
    7b00:	4192      	sbcs	r2, r2
    7b02:	4252      	negs	r2, r2
    7b04:	1abf      	subs	r7, r7, r2
    7b06:	1c04      	adds	r4, r0, #0
    7b08:	4698      	mov	r8, r3
    7b0a:	e696      	b.n	783a <__aeabi_dsub+0x12a>
    7b0c:	4663      	mov	r3, ip
    7b0e:	4665      	mov	r5, ip
    7b10:	4333      	orrs	r3, r6
    7b12:	d000      	beq.n	7b16 <__aeabi_dsub+0x406>
    7b14:	e696      	b.n	7844 <__aeabi_dsub+0x134>
    7b16:	2600      	movs	r6, #0
    7b18:	2700      	movs	r7, #0
    7b1a:	2400      	movs	r4, #0
    7b1c:	2500      	movs	r5, #0
    7b1e:	e6c4      	b.n	78aa <__aeabi_dsub+0x19a>
    7b20:	2b1f      	cmp	r3, #31
    7b22:	dc61      	bgt.n	7be8 <__aeabi_dsub+0x4d8>
    7b24:	2020      	movs	r0, #32
    7b26:	1ac3      	subs	r3, r0, r3
    7b28:	469b      	mov	fp, r3
    7b2a:	1c13      	adds	r3, r2, #0
    7b2c:	4659      	mov	r1, fp
    7b2e:	408b      	lsls	r3, r1
    7b30:	4651      	mov	r1, sl
    7b32:	4699      	mov	r9, r3
    7b34:	9b01      	ldr	r3, [sp, #4]
    7b36:	40cb      	lsrs	r3, r1
    7b38:	469c      	mov	ip, r3
    7b3a:	464b      	mov	r3, r9
    7b3c:	4660      	mov	r0, ip
    7b3e:	4303      	orrs	r3, r0
    7b40:	469c      	mov	ip, r3
    7b42:	465b      	mov	r3, fp
    7b44:	9901      	ldr	r1, [sp, #4]
    7b46:	4099      	lsls	r1, r3
    7b48:	4663      	mov	r3, ip
    7b4a:	1e48      	subs	r0, r1, #1
    7b4c:	4181      	sbcs	r1, r0
    7b4e:	4319      	orrs	r1, r3
    7b50:	4653      	mov	r3, sl
    7b52:	40da      	lsrs	r2, r3
    7b54:	e6cd      	b.n	78f2 <__aeabi_dsub+0x1e2>
    7b56:	1c3c      	adds	r4, r7, #0
    7b58:	432c      	orrs	r4, r5
    7b5a:	d05d      	beq.n	7c18 <__aeabi_dsub+0x508>
    7b5c:	43f1      	mvns	r1, r6
    7b5e:	4689      	mov	r9, r1
    7b60:	2900      	cmp	r1, #0
    7b62:	d155      	bne.n	7c10 <__aeabi_dsub+0x500>
    7b64:	9901      	ldr	r1, [sp, #4]
    7b66:	1bd2      	subs	r2, r2, r7
    7b68:	468c      	mov	ip, r1
    7b6a:	1b4d      	subs	r5, r1, r5
    7b6c:	45ac      	cmp	ip, r5
    7b6e:	4189      	sbcs	r1, r1
    7b70:	4249      	negs	r1, r1
    7b72:	1a57      	subs	r7, r2, r1
    7b74:	1c04      	adds	r4, r0, #0
    7b76:	4698      	mov	r8, r3
    7b78:	e65f      	b.n	783a <__aeabi_dsub+0x12a>
    7b7a:	4894      	ldr	r0, [pc, #592]	; (7dcc <__aeabi_dsub+0x6bc>)
    7b7c:	4284      	cmp	r4, r0
    7b7e:	d000      	beq.n	7b82 <__aeabi_dsub+0x472>
    7b80:	e6ad      	b.n	78de <__aeabi_dsub+0x1ce>
    7b82:	e5f7      	b.n	7774 <__aeabi_dsub+0x64>
    7b84:	2200      	movs	r2, #0
    7b86:	e771      	b.n	7a6c <__aeabi_dsub+0x35c>
    7b88:	2300      	movs	r3, #0
    7b8a:	e787      	b.n	7a9c <__aeabi_dsub+0x38c>
    7b8c:	1c3b      	adds	r3, r7, #0
    7b8e:	432b      	orrs	r3, r5
    7b90:	2c00      	cmp	r4, #0
    7b92:	d000      	beq.n	7b96 <__aeabi_dsub+0x486>
    7b94:	e0da      	b.n	7d4c <__aeabi_dsub+0x63c>
    7b96:	2b00      	cmp	r3, #0
    7b98:	d100      	bne.n	7b9c <__aeabi_dsub+0x48c>
    7b9a:	e113      	b.n	7dc4 <__aeabi_dsub+0x6b4>
    7b9c:	1c13      	adds	r3, r2, #0
    7b9e:	9901      	ldr	r1, [sp, #4]
    7ba0:	430b      	orrs	r3, r1
    7ba2:	d100      	bne.n	7ba6 <__aeabi_dsub+0x496>
    7ba4:	e5e6      	b.n	7774 <__aeabi_dsub+0x64>
    7ba6:	1949      	adds	r1, r1, r5
    7ba8:	42a9      	cmp	r1, r5
    7baa:	419b      	sbcs	r3, r3
    7bac:	19d2      	adds	r2, r2, r7
    7bae:	425b      	negs	r3, r3
    7bb0:	18d7      	adds	r7, r2, r3
    7bb2:	023b      	lsls	r3, r7, #8
    7bb4:	d400      	bmi.n	7bb8 <__aeabi_dsub+0x4a8>
    7bb6:	e121      	b.n	7dfc <__aeabi_dsub+0x6ec>
    7bb8:	4b85      	ldr	r3, [pc, #532]	; (7dd0 <__aeabi_dsub+0x6c0>)
    7bba:	1c0d      	adds	r5, r1, #0
    7bbc:	401f      	ands	r7, r3
    7bbe:	1c04      	adds	r4, r0, #0
    7bc0:	e5d8      	b.n	7774 <__aeabi_dsub+0x64>
    7bc2:	1c38      	adds	r0, r7, #0
    7bc4:	4328      	orrs	r0, r5
    7bc6:	2c00      	cmp	r4, #0
    7bc8:	d140      	bne.n	7c4c <__aeabi_dsub+0x53c>
    7bca:	2800      	cmp	r0, #0
    7bcc:	d000      	beq.n	7bd0 <__aeabi_dsub+0x4c0>
    7bce:	e083      	b.n	7cd8 <__aeabi_dsub+0x5c8>
    7bd0:	1c10      	adds	r0, r2, #0
    7bd2:	9901      	ldr	r1, [sp, #4]
    7bd4:	4308      	orrs	r0, r1
    7bd6:	d003      	beq.n	7be0 <__aeabi_dsub+0x4d0>
    7bd8:	1c17      	adds	r7, r2, #0
    7bda:	1c0d      	adds	r5, r1, #0
    7bdc:	4698      	mov	r8, r3
    7bde:	e5c9      	b.n	7774 <__aeabi_dsub+0x64>
    7be0:	2600      	movs	r6, #0
    7be2:	2700      	movs	r7, #0
    7be4:	2500      	movs	r5, #0
    7be6:	e660      	b.n	78aa <__aeabi_dsub+0x19a>
    7be8:	4650      	mov	r0, sl
    7bea:	1c13      	adds	r3, r2, #0
    7bec:	3820      	subs	r0, #32
    7bee:	40c3      	lsrs	r3, r0
    7bf0:	1c18      	adds	r0, r3, #0
    7bf2:	4653      	mov	r3, sl
    7bf4:	2b20      	cmp	r3, #32
    7bf6:	d100      	bne.n	7bfa <__aeabi_dsub+0x4ea>
    7bf8:	e0c1      	b.n	7d7e <__aeabi_dsub+0x66e>
    7bfa:	2340      	movs	r3, #64	; 0x40
    7bfc:	4651      	mov	r1, sl
    7bfe:	1a5b      	subs	r3, r3, r1
    7c00:	409a      	lsls	r2, r3
    7c02:	9901      	ldr	r1, [sp, #4]
    7c04:	4311      	orrs	r1, r2
    7c06:	1e4a      	subs	r2, r1, #1
    7c08:	4191      	sbcs	r1, r2
    7c0a:	2200      	movs	r2, #0
    7c0c:	4301      	orrs	r1, r0
    7c0e:	e670      	b.n	78f2 <__aeabi_dsub+0x1e2>
    7c10:	4c6e      	ldr	r4, [pc, #440]	; (7dcc <__aeabi_dsub+0x6bc>)
    7c12:	42a0      	cmp	r0, r4
    7c14:	d000      	beq.n	7c18 <__aeabi_dsub+0x508>
    7c16:	e753      	b.n	7ac0 <__aeabi_dsub+0x3b0>
    7c18:	1c17      	adds	r7, r2, #0
    7c1a:	9d01      	ldr	r5, [sp, #4]
    7c1c:	1c04      	adds	r4, r0, #0
    7c1e:	4698      	mov	r8, r3
    7c20:	e5a8      	b.n	7774 <__aeabi_dsub+0x64>
    7c22:	2c00      	cmp	r4, #0
    7c24:	d128      	bne.n	7c78 <__aeabi_dsub+0x568>
    7c26:	1c3c      	adds	r4, r7, #0
    7c28:	432c      	orrs	r4, r5
    7c2a:	d100      	bne.n	7c2e <__aeabi_dsub+0x51e>
    7c2c:	e08a      	b.n	7d44 <__aeabi_dsub+0x634>
    7c2e:	43db      	mvns	r3, r3
    7c30:	469a      	mov	sl, r3
    7c32:	2b00      	cmp	r3, #0
    7c34:	d000      	beq.n	7c38 <__aeabi_dsub+0x528>
    7c36:	e082      	b.n	7d3e <__aeabi_dsub+0x62e>
    7c38:	9b01      	ldr	r3, [sp, #4]
    7c3a:	19d2      	adds	r2, r2, r7
    7c3c:	469c      	mov	ip, r3
    7c3e:	4465      	add	r5, ip
    7c40:	429d      	cmp	r5, r3
    7c42:	4189      	sbcs	r1, r1
    7c44:	4249      	negs	r1, r1
    7c46:	1857      	adds	r7, r2, r1
    7c48:	1c04      	adds	r4, r0, #0
    7c4a:	e659      	b.n	7900 <__aeabi_dsub+0x1f0>
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d15b      	bne.n	7d08 <__aeabi_dsub+0x5f8>
    7c50:	1c10      	adds	r0, r2, #0
    7c52:	9901      	ldr	r1, [sp, #4]
    7c54:	4308      	orrs	r0, r1
    7c56:	d100      	bne.n	7c5a <__aeabi_dsub+0x54a>
    7c58:	e0a4      	b.n	7da4 <__aeabi_dsub+0x694>
    7c5a:	1c17      	adds	r7, r2, #0
    7c5c:	1c0d      	adds	r5, r1, #0
    7c5e:	4698      	mov	r8, r3
    7c60:	4c5a      	ldr	r4, [pc, #360]	; (7dcc <__aeabi_dsub+0x6bc>)
    7c62:	e587      	b.n	7774 <__aeabi_dsub+0x64>
    7c64:	433d      	orrs	r5, r7
    7c66:	1e6f      	subs	r7, r5, #1
    7c68:	41bd      	sbcs	r5, r7
    7c6a:	2700      	movs	r7, #0
    7c6c:	b2ed      	uxtb	r5, r5
    7c6e:	e742      	b.n	7af6 <__aeabi_dsub+0x3e6>
    7c70:	1c04      	adds	r4, r0, #0
    7c72:	2700      	movs	r7, #0
    7c74:	2500      	movs	r5, #0
    7c76:	e618      	b.n	78aa <__aeabi_dsub+0x19a>
    7c78:	4c54      	ldr	r4, [pc, #336]	; (7dcc <__aeabi_dsub+0x6bc>)
    7c7a:	42a0      	cmp	r0, r4
    7c7c:	d062      	beq.n	7d44 <__aeabi_dsub+0x634>
    7c7e:	4653      	mov	r3, sl
    7c80:	2480      	movs	r4, #128	; 0x80
    7c82:	425b      	negs	r3, r3
    7c84:	469a      	mov	sl, r3
    7c86:	0424      	lsls	r4, r4, #16
    7c88:	4327      	orrs	r7, r4
    7c8a:	4653      	mov	r3, sl
    7c8c:	2b38      	cmp	r3, #56	; 0x38
    7c8e:	dd00      	ble.n	7c92 <__aeabi_dsub+0x582>
    7c90:	e08e      	b.n	7db0 <__aeabi_dsub+0x6a0>
    7c92:	2b1f      	cmp	r3, #31
    7c94:	dd00      	ble.n	7c98 <__aeabi_dsub+0x588>
    7c96:	e09d      	b.n	7dd4 <__aeabi_dsub+0x6c4>
    7c98:	2420      	movs	r4, #32
    7c9a:	1ae3      	subs	r3, r4, r3
    7c9c:	469b      	mov	fp, r3
    7c9e:	1c3b      	adds	r3, r7, #0
    7ca0:	4659      	mov	r1, fp
    7ca2:	408b      	lsls	r3, r1
    7ca4:	4651      	mov	r1, sl
    7ca6:	4699      	mov	r9, r3
    7ca8:	1c2b      	adds	r3, r5, #0
    7caa:	40cb      	lsrs	r3, r1
    7cac:	469c      	mov	ip, r3
    7cae:	464b      	mov	r3, r9
    7cb0:	4664      	mov	r4, ip
    7cb2:	4323      	orrs	r3, r4
    7cb4:	469c      	mov	ip, r3
    7cb6:	465b      	mov	r3, fp
    7cb8:	409d      	lsls	r5, r3
    7cba:	4663      	mov	r3, ip
    7cbc:	1e6c      	subs	r4, r5, #1
    7cbe:	41a5      	sbcs	r5, r4
    7cc0:	40cf      	lsrs	r7, r1
    7cc2:	431d      	orrs	r5, r3
    7cc4:	9b01      	ldr	r3, [sp, #4]
    7cc6:	18bf      	adds	r7, r7, r2
    7cc8:	469c      	mov	ip, r3
    7cca:	4465      	add	r5, ip
    7ccc:	429d      	cmp	r5, r3
    7cce:	4192      	sbcs	r2, r2
    7cd0:	4252      	negs	r2, r2
    7cd2:	18bf      	adds	r7, r7, r2
    7cd4:	1c04      	adds	r4, r0, #0
    7cd6:	e613      	b.n	7900 <__aeabi_dsub+0x1f0>
    7cd8:	1c10      	adds	r0, r2, #0
    7cda:	9901      	ldr	r1, [sp, #4]
    7cdc:	4308      	orrs	r0, r1
    7cde:	d100      	bne.n	7ce2 <__aeabi_dsub+0x5d2>
    7ce0:	e548      	b.n	7774 <__aeabi_dsub+0x64>
    7ce2:	1a68      	subs	r0, r5, r1
    7ce4:	4684      	mov	ip, r0
    7ce6:	4285      	cmp	r5, r0
    7ce8:	4180      	sbcs	r0, r0
    7cea:	1abe      	subs	r6, r7, r2
    7cec:	4240      	negs	r0, r0
    7cee:	1a30      	subs	r0, r6, r0
    7cf0:	0206      	lsls	r6, r0, #8
    7cf2:	d400      	bmi.n	7cf6 <__aeabi_dsub+0x5e6>
    7cf4:	e647      	b.n	7986 <__aeabi_dsub+0x276>
    7cf6:	468c      	mov	ip, r1
    7cf8:	1b4d      	subs	r5, r1, r5
    7cfa:	45ac      	cmp	ip, r5
    7cfc:	4189      	sbcs	r1, r1
    7cfe:	1bd2      	subs	r2, r2, r7
    7d00:	4249      	negs	r1, r1
    7d02:	1a57      	subs	r7, r2, r1
    7d04:	4698      	mov	r8, r3
    7d06:	e535      	b.n	7774 <__aeabi_dsub+0x64>
    7d08:	1c10      	adds	r0, r2, #0
    7d0a:	9901      	ldr	r1, [sp, #4]
    7d0c:	4308      	orrs	r0, r1
    7d0e:	d034      	beq.n	7d7a <__aeabi_dsub+0x66a>
    7d10:	2480      	movs	r4, #128	; 0x80
    7d12:	0778      	lsls	r0, r7, #29
    7d14:	08ed      	lsrs	r5, r5, #3
    7d16:	08ff      	lsrs	r7, r7, #3
    7d18:	0324      	lsls	r4, r4, #12
    7d1a:	4328      	orrs	r0, r5
    7d1c:	4227      	tst	r7, r4
    7d1e:	d008      	beq.n	7d32 <__aeabi_dsub+0x622>
    7d20:	08d6      	lsrs	r6, r2, #3
    7d22:	4226      	tst	r6, r4
    7d24:	d105      	bne.n	7d32 <__aeabi_dsub+0x622>
    7d26:	08c9      	lsrs	r1, r1, #3
    7d28:	0752      	lsls	r2, r2, #29
    7d2a:	430a      	orrs	r2, r1
    7d2c:	1c10      	adds	r0, r2, #0
    7d2e:	1c37      	adds	r7, r6, #0
    7d30:	4698      	mov	r8, r3
    7d32:	00ff      	lsls	r7, r7, #3
    7d34:	0f42      	lsrs	r2, r0, #29
    7d36:	4317      	orrs	r7, r2
    7d38:	00c5      	lsls	r5, r0, #3
    7d3a:	4c24      	ldr	r4, [pc, #144]	; (7dcc <__aeabi_dsub+0x6bc>)
    7d3c:	e51a      	b.n	7774 <__aeabi_dsub+0x64>
    7d3e:	4c23      	ldr	r4, [pc, #140]	; (7dcc <__aeabi_dsub+0x6bc>)
    7d40:	42a0      	cmp	r0, r4
    7d42:	d1a2      	bne.n	7c8a <__aeabi_dsub+0x57a>
    7d44:	1c17      	adds	r7, r2, #0
    7d46:	9d01      	ldr	r5, [sp, #4]
    7d48:	1c04      	adds	r4, r0, #0
    7d4a:	e513      	b.n	7774 <__aeabi_dsub+0x64>
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	d035      	beq.n	7dbc <__aeabi_dsub+0x6ac>
    7d50:	1c13      	adds	r3, r2, #0
    7d52:	9901      	ldr	r1, [sp, #4]
    7d54:	430b      	orrs	r3, r1
    7d56:	d010      	beq.n	7d7a <__aeabi_dsub+0x66a>
    7d58:	2480      	movs	r4, #128	; 0x80
    7d5a:	0778      	lsls	r0, r7, #29
    7d5c:	08ed      	lsrs	r5, r5, #3
    7d5e:	08ff      	lsrs	r7, r7, #3
    7d60:	0324      	lsls	r4, r4, #12
    7d62:	4328      	orrs	r0, r5
    7d64:	4227      	tst	r7, r4
    7d66:	d0e4      	beq.n	7d32 <__aeabi_dsub+0x622>
    7d68:	08d3      	lsrs	r3, r2, #3
    7d6a:	4223      	tst	r3, r4
    7d6c:	d1e1      	bne.n	7d32 <__aeabi_dsub+0x622>
    7d6e:	08c9      	lsrs	r1, r1, #3
    7d70:	0752      	lsls	r2, r2, #29
    7d72:	430a      	orrs	r2, r1
    7d74:	1c10      	adds	r0, r2, #0
    7d76:	1c1f      	adds	r7, r3, #0
    7d78:	e7db      	b.n	7d32 <__aeabi_dsub+0x622>
    7d7a:	4c14      	ldr	r4, [pc, #80]	; (7dcc <__aeabi_dsub+0x6bc>)
    7d7c:	e4fa      	b.n	7774 <__aeabi_dsub+0x64>
    7d7e:	2200      	movs	r2, #0
    7d80:	e73f      	b.n	7c02 <__aeabi_dsub+0x4f2>
    7d82:	464c      	mov	r4, r9
    7d84:	1c3e      	adds	r6, r7, #0
    7d86:	3c20      	subs	r4, #32
    7d88:	40e6      	lsrs	r6, r4
    7d8a:	4649      	mov	r1, r9
    7d8c:	1c34      	adds	r4, r6, #0
    7d8e:	2920      	cmp	r1, #32
    7d90:	d032      	beq.n	7df8 <__aeabi_dsub+0x6e8>
    7d92:	2640      	movs	r6, #64	; 0x40
    7d94:	1a76      	subs	r6, r6, r1
    7d96:	40b7      	lsls	r7, r6
    7d98:	433d      	orrs	r5, r7
    7d9a:	1e6f      	subs	r7, r5, #1
    7d9c:	41bd      	sbcs	r5, r7
    7d9e:	2700      	movs	r7, #0
    7da0:	4325      	orrs	r5, r4
    7da2:	e6a8      	b.n	7af6 <__aeabi_dsub+0x3e6>
    7da4:	2780      	movs	r7, #128	; 0x80
    7da6:	2600      	movs	r6, #0
    7da8:	03ff      	lsls	r7, r7, #15
    7daa:	4c08      	ldr	r4, [pc, #32]	; (7dcc <__aeabi_dsub+0x6bc>)
    7dac:	2500      	movs	r5, #0
    7dae:	e57c      	b.n	78aa <__aeabi_dsub+0x19a>
    7db0:	433d      	orrs	r5, r7
    7db2:	1e6f      	subs	r7, r5, #1
    7db4:	41bd      	sbcs	r5, r7
    7db6:	2700      	movs	r7, #0
    7db8:	b2ed      	uxtb	r5, r5
    7dba:	e783      	b.n	7cc4 <__aeabi_dsub+0x5b4>
    7dbc:	1c17      	adds	r7, r2, #0
    7dbe:	9d01      	ldr	r5, [sp, #4]
    7dc0:	4c02      	ldr	r4, [pc, #8]	; (7dcc <__aeabi_dsub+0x6bc>)
    7dc2:	e4d7      	b.n	7774 <__aeabi_dsub+0x64>
    7dc4:	1c17      	adds	r7, r2, #0
    7dc6:	9d01      	ldr	r5, [sp, #4]
    7dc8:	e4d4      	b.n	7774 <__aeabi_dsub+0x64>
    7dca:	46c0      	nop			; (mov r8, r8)
    7dcc:	000007ff 	.word	0x000007ff
    7dd0:	ff7fffff 	.word	0xff7fffff
    7dd4:	4654      	mov	r4, sl
    7dd6:	1c3b      	adds	r3, r7, #0
    7dd8:	3c20      	subs	r4, #32
    7dda:	40e3      	lsrs	r3, r4
    7ddc:	1c1c      	adds	r4, r3, #0
    7dde:	4653      	mov	r3, sl
    7de0:	2b20      	cmp	r3, #32
    7de2:	d00d      	beq.n	7e00 <__aeabi_dsub+0x6f0>
    7de4:	2340      	movs	r3, #64	; 0x40
    7de6:	4651      	mov	r1, sl
    7de8:	1a5b      	subs	r3, r3, r1
    7dea:	409f      	lsls	r7, r3
    7dec:	433d      	orrs	r5, r7
    7dee:	1e6f      	subs	r7, r5, #1
    7df0:	41bd      	sbcs	r5, r7
    7df2:	2700      	movs	r7, #0
    7df4:	4325      	orrs	r5, r4
    7df6:	e765      	b.n	7cc4 <__aeabi_dsub+0x5b4>
    7df8:	2700      	movs	r7, #0
    7dfa:	e7cd      	b.n	7d98 <__aeabi_dsub+0x688>
    7dfc:	1c0d      	adds	r5, r1, #0
    7dfe:	e5c8      	b.n	7992 <__aeabi_dsub+0x282>
    7e00:	2700      	movs	r7, #0
    7e02:	e7f3      	b.n	7dec <__aeabi_dsub+0x6dc>

00007e04 <__aeabi_d2iz>:
    7e04:	030b      	lsls	r3, r1, #12
    7e06:	b530      	push	{r4, r5, lr}
    7e08:	4c13      	ldr	r4, [pc, #76]	; (7e58 <__aeabi_d2iz+0x54>)
    7e0a:	0b1a      	lsrs	r2, r3, #12
    7e0c:	004b      	lsls	r3, r1, #1
    7e0e:	1c05      	adds	r5, r0, #0
    7e10:	0d5b      	lsrs	r3, r3, #21
    7e12:	0fc9      	lsrs	r1, r1, #31
    7e14:	2000      	movs	r0, #0
    7e16:	42a3      	cmp	r3, r4
    7e18:	dd10      	ble.n	7e3c <__aeabi_d2iz+0x38>
    7e1a:	4810      	ldr	r0, [pc, #64]	; (7e5c <__aeabi_d2iz+0x58>)
    7e1c:	4283      	cmp	r3, r0
    7e1e:	dc0e      	bgt.n	7e3e <__aeabi_d2iz+0x3a>
    7e20:	2080      	movs	r0, #128	; 0x80
    7e22:	4c0f      	ldr	r4, [pc, #60]	; (7e60 <__aeabi_d2iz+0x5c>)
    7e24:	0340      	lsls	r0, r0, #13
    7e26:	4302      	orrs	r2, r0
    7e28:	1ae4      	subs	r4, r4, r3
    7e2a:	2c1f      	cmp	r4, #31
    7e2c:	dd0a      	ble.n	7e44 <__aeabi_d2iz+0x40>
    7e2e:	480d      	ldr	r0, [pc, #52]	; (7e64 <__aeabi_d2iz+0x60>)
    7e30:	1ac3      	subs	r3, r0, r3
    7e32:	40da      	lsrs	r2, r3
    7e34:	1c13      	adds	r3, r2, #0
    7e36:	4248      	negs	r0, r1
    7e38:	4043      	eors	r3, r0
    7e3a:	1858      	adds	r0, r3, r1
    7e3c:	bd30      	pop	{r4, r5, pc}
    7e3e:	4b0a      	ldr	r3, [pc, #40]	; (7e68 <__aeabi_d2iz+0x64>)
    7e40:	18c8      	adds	r0, r1, r3
    7e42:	e7fb      	b.n	7e3c <__aeabi_d2iz+0x38>
    7e44:	1c28      	adds	r0, r5, #0
    7e46:	40e0      	lsrs	r0, r4
    7e48:	4c08      	ldr	r4, [pc, #32]	; (7e6c <__aeabi_d2iz+0x68>)
    7e4a:	46a4      	mov	ip, r4
    7e4c:	4463      	add	r3, ip
    7e4e:	409a      	lsls	r2, r3
    7e50:	1c13      	adds	r3, r2, #0
    7e52:	4303      	orrs	r3, r0
    7e54:	e7ef      	b.n	7e36 <__aeabi_d2iz+0x32>
    7e56:	46c0      	nop			; (mov r8, r8)
    7e58:	000003fe 	.word	0x000003fe
    7e5c:	0000041d 	.word	0x0000041d
    7e60:	00000433 	.word	0x00000433
    7e64:	00000413 	.word	0x00000413
    7e68:	7fffffff 	.word	0x7fffffff
    7e6c:	fffffbed 	.word	0xfffffbed

00007e70 <__aeabi_ui2d>:
    7e70:	b510      	push	{r4, lr}
    7e72:	1e04      	subs	r4, r0, #0
    7e74:	d010      	beq.n	7e98 <__aeabi_ui2d+0x28>
    7e76:	f000 f82d 	bl	7ed4 <__clzsi2>
    7e7a:	4a14      	ldr	r2, [pc, #80]	; (7ecc <__aeabi_ui2d+0x5c>)
    7e7c:	1a12      	subs	r2, r2, r0
    7e7e:	280a      	cmp	r0, #10
    7e80:	dc1a      	bgt.n	7eb8 <__aeabi_ui2d+0x48>
    7e82:	230b      	movs	r3, #11
    7e84:	1c21      	adds	r1, r4, #0
    7e86:	1a1b      	subs	r3, r3, r0
    7e88:	40d9      	lsrs	r1, r3
    7e8a:	3015      	adds	r0, #21
    7e8c:	030b      	lsls	r3, r1, #12
    7e8e:	0552      	lsls	r2, r2, #21
    7e90:	4084      	lsls	r4, r0
    7e92:	0b1b      	lsrs	r3, r3, #12
    7e94:	0d52      	lsrs	r2, r2, #21
    7e96:	e001      	b.n	7e9c <__aeabi_ui2d+0x2c>
    7e98:	2200      	movs	r2, #0
    7e9a:	2300      	movs	r3, #0
    7e9c:	2100      	movs	r1, #0
    7e9e:	031b      	lsls	r3, r3, #12
    7ea0:	1c20      	adds	r0, r4, #0
    7ea2:	0b1c      	lsrs	r4, r3, #12
    7ea4:	0d0b      	lsrs	r3, r1, #20
    7ea6:	051b      	lsls	r3, r3, #20
    7ea8:	4323      	orrs	r3, r4
    7eaa:	4c09      	ldr	r4, [pc, #36]	; (7ed0 <__aeabi_ui2d+0x60>)
    7eac:	0512      	lsls	r2, r2, #20
    7eae:	4023      	ands	r3, r4
    7eb0:	4313      	orrs	r3, r2
    7eb2:	005b      	lsls	r3, r3, #1
    7eb4:	0859      	lsrs	r1, r3, #1
    7eb6:	bd10      	pop	{r4, pc}
    7eb8:	1c03      	adds	r3, r0, #0
    7eba:	3b0b      	subs	r3, #11
    7ebc:	409c      	lsls	r4, r3
    7ebe:	0552      	lsls	r2, r2, #21
    7ec0:	0323      	lsls	r3, r4, #12
    7ec2:	0b1b      	lsrs	r3, r3, #12
    7ec4:	0d52      	lsrs	r2, r2, #21
    7ec6:	2400      	movs	r4, #0
    7ec8:	e7e8      	b.n	7e9c <__aeabi_ui2d+0x2c>
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	0000041e 	.word	0x0000041e
    7ed0:	800fffff 	.word	0x800fffff

00007ed4 <__clzsi2>:
    7ed4:	211c      	movs	r1, #28
    7ed6:	2301      	movs	r3, #1
    7ed8:	041b      	lsls	r3, r3, #16
    7eda:	4298      	cmp	r0, r3
    7edc:	d301      	bcc.n	7ee2 <__clzsi2+0xe>
    7ede:	0c00      	lsrs	r0, r0, #16
    7ee0:	3910      	subs	r1, #16
    7ee2:	0a1b      	lsrs	r3, r3, #8
    7ee4:	4298      	cmp	r0, r3
    7ee6:	d301      	bcc.n	7eec <__clzsi2+0x18>
    7ee8:	0a00      	lsrs	r0, r0, #8
    7eea:	3908      	subs	r1, #8
    7eec:	091b      	lsrs	r3, r3, #4
    7eee:	4298      	cmp	r0, r3
    7ef0:	d301      	bcc.n	7ef6 <__clzsi2+0x22>
    7ef2:	0900      	lsrs	r0, r0, #4
    7ef4:	3904      	subs	r1, #4
    7ef6:	a202      	add	r2, pc, #8	; (adr r2, 7f00 <__clzsi2+0x2c>)
    7ef8:	5c10      	ldrb	r0, [r2, r0]
    7efa:	1840      	adds	r0, r0, r1
    7efc:	4770      	bx	lr
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	02020304 	.word	0x02020304
    7f04:	01010101 	.word	0x01010101
	...

00007f10 <__libc_init_array>:
    7f10:	4b0e      	ldr	r3, [pc, #56]	; (7f4c <__libc_init_array+0x3c>)
    7f12:	b570      	push	{r4, r5, r6, lr}
    7f14:	2500      	movs	r5, #0
    7f16:	1c1e      	adds	r6, r3, #0
    7f18:	4c0d      	ldr	r4, [pc, #52]	; (7f50 <__libc_init_array+0x40>)
    7f1a:	1ae4      	subs	r4, r4, r3
    7f1c:	10a4      	asrs	r4, r4, #2
    7f1e:	42a5      	cmp	r5, r4
    7f20:	d004      	beq.n	7f2c <__libc_init_array+0x1c>
    7f22:	00ab      	lsls	r3, r5, #2
    7f24:	58f3      	ldr	r3, [r6, r3]
    7f26:	4798      	blx	r3
    7f28:	3501      	adds	r5, #1
    7f2a:	e7f8      	b.n	7f1e <__libc_init_array+0xe>
    7f2c:	f000 f8e4 	bl	80f8 <_init>
    7f30:	4b08      	ldr	r3, [pc, #32]	; (7f54 <__libc_init_array+0x44>)
    7f32:	2500      	movs	r5, #0
    7f34:	1c1e      	adds	r6, r3, #0
    7f36:	4c08      	ldr	r4, [pc, #32]	; (7f58 <__libc_init_array+0x48>)
    7f38:	1ae4      	subs	r4, r4, r3
    7f3a:	10a4      	asrs	r4, r4, #2
    7f3c:	42a5      	cmp	r5, r4
    7f3e:	d004      	beq.n	7f4a <__libc_init_array+0x3a>
    7f40:	00ab      	lsls	r3, r5, #2
    7f42:	58f3      	ldr	r3, [r6, r3]
    7f44:	4798      	blx	r3
    7f46:	3501      	adds	r5, #1
    7f48:	e7f8      	b.n	7f3c <__libc_init_array+0x2c>
    7f4a:	bd70      	pop	{r4, r5, r6, pc}
    7f4c:	00008104 	.word	0x00008104
    7f50:	00008104 	.word	0x00008104
    7f54:	00008104 	.word	0x00008104
    7f58:	00008108 	.word	0x00008108

00007f5c <memcpy>:
    7f5c:	2300      	movs	r3, #0
    7f5e:	b510      	push	{r4, lr}
    7f60:	4293      	cmp	r3, r2
    7f62:	d003      	beq.n	7f6c <memcpy+0x10>
    7f64:	5ccc      	ldrb	r4, [r1, r3]
    7f66:	54c4      	strb	r4, [r0, r3]
    7f68:	3301      	adds	r3, #1
    7f6a:	e7f9      	b.n	7f60 <memcpy+0x4>
    7f6c:	bd10      	pop	{r4, pc}

00007f6e <memset>:
    7f6e:	1c03      	adds	r3, r0, #0
    7f70:	1882      	adds	r2, r0, r2
    7f72:	4293      	cmp	r3, r2
    7f74:	d002      	beq.n	7f7c <memset+0xe>
    7f76:	7019      	strb	r1, [r3, #0]
    7f78:	3301      	adds	r3, #1
    7f7a:	e7fa      	b.n	7f72 <memset+0x4>
    7f7c:	4770      	bx	lr
	...

00007f80 <_tcc_intflag>:
    7f80:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    7f90:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    7fa0:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    7fb0:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    7fc0:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    7fd0:	3382 0000 33fe 0000 33fe 0000 33a4 0000     .3...3...3...3..
    7fe0:	339e 0000 33aa 0000 3388 0000 33b0 0000     .3...3...3...3..
    7ff0:	33e4 0000 35a4 0000 35f4 0000 35f4 0000     .3...5...5...5..
    8000:	35f0 0000 3596 0000 35b6 0000 3586 0000     .5...5...5...5..
    8010:	35c8 0000 35da 0000 4cca 0000 4ca2 0000     .5...5...L...L..
    8020:	4c7a 0000 4c40 0000 4c06 0000 5726 0000     zL..@L...L..&W..
    8030:	5730 0000 573a 0000 574a 0000 575a 0000     0W..:W..JW..ZW..
    8040:	576a 0000 577a 0000 578a 0000 579a 0000     jW..zW...W...W..
    8050:	4f54 5350 4345 4552 5054 5341 5753 4452     TOPSECRETPASSWRD
	...
    8068:	6548 6c6c 206f 6f57 6c72 2164 2020 0020     Hello World!   .
    8078:	6d68 0000 6c56 0000 6d3c 0000 6c42 0000     hm..Vl..<m..Bl..
    8088:	6d3c 0000 6d46 0000 6d3c 0000 6c42 0000     <m..Fm..<m..Bl..
    8098:	6c56 0000 6c56 0000 6d46 0000 6c42 0000     Vl..Vl..Fm..Bl..
    80a8:	6c4c 0000 6c4c 0000 6c4c 0000 6fae 0000     Ll..Ll..Ll...o..
    80b8:	73c8 0000 73a6 0000 73a6 0000 739a 0000     .s...s...s...s..
    80c8:	728e 0000 728e 0000 738e 0000 739a 0000     .r...r...s...s..
    80d8:	728e 0000 738e 0000 728e 0000 739a 0000     .r...s...r...s..
    80e8:	7292 0000 7292 0000 7292 0000 75a8 0000     .r...r...r...u..

000080f8 <_init>:
    80f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80fa:	46c0      	nop			; (mov r8, r8)
    80fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    80fe:	bc08      	pop	{r3}
    8100:	469e      	mov	lr, r3
    8102:	4770      	bx	lr

00008104 <__init_array_start>:
    8104:	000000dd 	.word	0x000000dd

00008108 <_fini>:
    8108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    810a:	46c0      	nop			; (mov r8, r8)
    810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    810e:	bc08      	pop	{r3}
    8110:	469e      	mov	lr, r3
    8112:	4770      	bx	lr

00008114 <__fini_array_start>:
    8114:	000000b5 	.word	0x000000b5
