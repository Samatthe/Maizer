
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  000057fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000290  20000008  00005804  00020008  2**2
                  ALLOC
  3 .stack        00002000  20000298  00005a94  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   00031523  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b3  00000000  00000000  000515ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000046ac  00000000  00000000  00054a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c78  00000000  00000000  0005910b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b28  00000000  00000000  00059d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009c94  00000000  00000000  0005a8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010122  00000000  00000000  0006453f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092277  00000000  00000000  00074661  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b08  00000000  00000000  001068d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002298 	.word	0x20002298
       4:	00003cc1 	.word	0x00003cc1
       8:	00003db9 	.word	0x00003db9
       c:	00003db9 	.word	0x00003db9
	...
      2c:	00003db9 	.word	0x00003db9
	...
      38:	00003db9 	.word	0x00003db9
      3c:	00003db9 	.word	0x00003db9
      40:	00003db9 	.word	0x00003db9
      44:	00003db9 	.word	0x00003db9
      48:	00003db9 	.word	0x00003db9
      4c:	00000ae1 	.word	0x00000ae1
      50:	00000f05 	.word	0x00000f05
      54:	00003db9 	.word	0x00003db9
      58:	00003db9 	.word	0x00003db9
      5c:	00003db9 	.word	0x00003db9
      60:	00003db9 	.word	0x00003db9
      64:	00002e71 	.word	0x00002e71
      68:	00002e89 	.word	0x00002e89
      6c:	00002ea1 	.word	0x00002ea1
      70:	00002eb9 	.word	0x00002eb9
      74:	00002ed1 	.word	0x00002ed1
      78:	00002ee9 	.word	0x00002ee9
      7c:	00001b85 	.word	0x00001b85
      80:	00001b99 	.word	0x00001b99
      84:	00001bad 	.word	0x00001bad
      88:	00001c3d 	.word	0x00001c3d
      8c:	00001c51 	.word	0x00001c51
      90:	00001c65 	.word	0x00001c65
	...
      9c:	00003db9 	.word	0x00003db9
      a0:	00003db9 	.word	0x00003db9
      a4:	00003db9 	.word	0x00003db9
      a8:	00003db9 	.word	0x00003db9
      ac:	00003db9 	.word	0x00003db9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	000057fc 	.word	0x000057fc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	000057fc 	.word	0x000057fc
     10c:	000057fc 	.word	0x000057fc
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <system_interrupt_enable+0x28>)
     1be:	1dfa      	adds	r2, r7, #7
     1c0:	7812      	ldrb	r2, [r2, #0]
     1c2:	0011      	movs	r1, r2
     1c4:	221f      	movs	r2, #31
     1c6:	400a      	ands	r2, r1
     1c8:	2101      	movs	r1, #1
     1ca:	4091      	lsls	r1, r2
     1cc:	000a      	movs	r2, r1
     1ce:	601a      	str	r2, [r3, #0]
}
     1d0:	46c0      	nop			; (mov r8, r8)
     1d2:	46bd      	mov	sp, r7
     1d4:	b002      	add	sp, #8
     1d6:	bd80      	pop	{r7, pc}
     1d8:	e000e100 	.word	0xe000e100

000001dc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b084      	sub	sp, #16
     1e0:	af00      	add	r7, sp, #0
     1e2:	0002      	movs	r2, r0
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e8:	230f      	movs	r3, #15
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f4:	230f      	movs	r3, #15
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d10c      	bne.n	218 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <_extint_get_eic_from_channel+0x48>)
     200:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681b      	ldr	r3, [r3, #0]
     216:	e000      	b.n	21a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     218:	2300      	movs	r3, #0
	}
}
     21a:	0018      	movs	r0, r3
     21c:	46bd      	mov	sp, r7
     21e:	b004      	add	sp, #16
     220:	bd80      	pop	{r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	40001800 	.word	0x40001800

00000228 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     228:	b580      	push	{r7, lr}
     22a:	b082      	sub	sp, #8
     22c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22e:	4b0f      	ldr	r3, [pc, #60]	; (26c <extint_is_syncing+0x44>)
     230:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     232:	2300      	movs	r3, #0
     234:	607b      	str	r3, [r7, #4]
     236:	e011      	b.n	25c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     238:	687b      	ldr	r3, [r7, #4]
     23a:	009b      	lsls	r3, r3, #2
     23c:	2208      	movs	r2, #8
     23e:	4694      	mov	ip, r2
     240:	44bc      	add	ip, r7
     242:	4463      	add	r3, ip
     244:	3b08      	subs	r3, #8
     246:	681b      	ldr	r3, [r3, #0]
     248:	785b      	ldrb	r3, [r3, #1]
     24a:	b2db      	uxtb	r3, r3
     24c:	b25b      	sxtb	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	da01      	bge.n	256 <extint_is_syncing+0x2e>
			return true;
     252:	2301      	movs	r3, #1
     254:	e006      	b.n	264 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     256:	687b      	ldr	r3, [r7, #4]
     258:	3301      	adds	r3, #1
     25a:	607b      	str	r3, [r7, #4]
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2b00      	cmp	r3, #0
     260:	d0ea      	beq.n	238 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     262:	2300      	movs	r3, #0
}
     264:	0018      	movs	r0, r3
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2d      	ldr	r3, [pc, #180]	; (32c <_system_extint_init+0xbc>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2140      	movs	r1, #64	; 0x40
     27c:	2000      	movs	r0, #0
     27e:	4b2c      	ldr	r3, [pc, #176]	; (330 <_system_extint_init+0xc0>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	003b      	movs	r3, r7
     284:	0018      	movs	r0, r3
     286:	4b2b      	ldr	r3, [pc, #172]	; (334 <_system_extint_init+0xc4>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	003b      	movs	r3, r7
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	003b      	movs	r3, r7
     292:	0019      	movs	r1, r3
     294:	2005      	movs	r0, #5
     296:	4b28      	ldr	r3, [pc, #160]	; (338 <_system_extint_init+0xc8>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b27      	ldr	r3, [pc, #156]	; (33c <_system_extint_init+0xcc>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b17      	ldr	r3, [pc, #92]	; (340 <_system_extint_init+0xd0>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b12      	ldr	r3, [pc, #72]	; (344 <_system_extint_init+0xd4>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0b      	ldr	r3, [pc, #44]	; (348 <_system_extint_init+0xd8>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_system_extint_init+0xdc>)
     320:	4798      	blx	r3
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b004      	add	sp, #16
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	40001800 	.word	0x40001800
     330:	0000012d 	.word	0x0000012d
     334:	00000115 	.word	0x00000115
     338:	0000394d 	.word	0x0000394d
     33c:	00003991 	.word	0x00003991
     340:	00000229 	.word	0x00000229
     344:	20000070 	.word	0x20000070
     348:	000001b1 	.word	0x000001b1
     34c:	00000351 	.word	0x00000351

00000350 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     350:	b580      	push	{r7, lr}
     352:	b082      	sub	sp, #8
     354:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     356:	4b15      	ldr	r3, [pc, #84]	; (3ac <_extint_enable+0x5c>)
     358:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     35a:	2300      	movs	r3, #0
     35c:	607b      	str	r3, [r7, #4]
     35e:	e018      	b.n	392 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     360:	687b      	ldr	r3, [r7, #4]
     362:	009b      	lsls	r3, r3, #2
     364:	2208      	movs	r2, #8
     366:	4694      	mov	ip, r2
     368:	44bc      	add	ip, r7
     36a:	4463      	add	r3, ip
     36c:	3b08      	subs	r3, #8
     36e:	681a      	ldr	r2, [r3, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	009b      	lsls	r3, r3, #2
     374:	2108      	movs	r1, #8
     376:	468c      	mov	ip, r1
     378:	44bc      	add	ip, r7
     37a:	4463      	add	r3, ip
     37c:	3b08      	subs	r3, #8
     37e:	681b      	ldr	r3, [r3, #0]
     380:	781b      	ldrb	r3, [r3, #0]
     382:	b2db      	uxtb	r3, r3
     384:	2102      	movs	r1, #2
     386:	430b      	orrs	r3, r1
     388:	b2db      	uxtb	r3, r3
     38a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	3301      	adds	r3, #1
     390:	607b      	str	r3, [r7, #4]
     392:	687b      	ldr	r3, [r7, #4]
     394:	2b00      	cmp	r3, #0
     396:	d0e3      	beq.n	360 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     398:	46c0      	nop			; (mov r8, r8)
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_extint_enable+0x60>)
     39c:	4798      	blx	r3
     39e:	1e03      	subs	r3, r0, #0
     3a0:	d1fb      	bne.n	39a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	46bd      	mov	sp, r7
     3a6:	b002      	add	sp, #8
     3a8:	bd80      	pop	{r7, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001800 	.word	0x40001800
     3b0:	00000229 	.word	0x00000229

000003b4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	2200      	movs	r2, #0
     3c0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2200      	movs	r2, #0
     3c6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	2201      	movs	r2, #1
     3cc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	2201      	movs	r2, #1
     3d2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2202      	movs	r2, #2
     3de:	72da      	strb	r2, [r3, #11]
}
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	46bd      	mov	sp, r7
     3e4:	b002      	add	sp, #8
     3e6:	bd80      	pop	{r7, pc}

000003e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b086      	sub	sp, #24
     3ec:	af00      	add	r7, sp, #0
     3ee:	0002      	movs	r2, r0
     3f0:	6039      	str	r1, [r7, #0]
     3f2:	1dfb      	adds	r3, r7, #7
     3f4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3f6:	2308      	movs	r3, #8
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	0018      	movs	r0, r3
     3fc:	4b36      	ldr	r3, [pc, #216]	; (4d8 <extint_chan_set_config+0xf0>)
     3fe:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     400:	683b      	ldr	r3, [r7, #0]
     402:	685b      	ldr	r3, [r3, #4]
     404:	b2da      	uxtb	r2, r3
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     40c:	2308      	movs	r3, #8
     40e:	18fb      	adds	r3, r7, r3
     410:	2200      	movs	r2, #0
     412:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     414:	683b      	ldr	r3, [r7, #0]
     416:	7a1a      	ldrb	r2, [r3, #8]
     418:	2308      	movs	r3, #8
     41a:	18fb      	adds	r3, r7, r3
     41c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     41e:	683b      	ldr	r3, [r7, #0]
     420:	681b      	ldr	r3, [r3, #0]
     422:	b2db      	uxtb	r3, r3
     424:	2208      	movs	r2, #8
     426:	18ba      	adds	r2, r7, r2
     428:	0011      	movs	r1, r2
     42a:	0018      	movs	r0, r3
     42c:	4b2b      	ldr	r3, [pc, #172]	; (4dc <extint_chan_set_config+0xf4>)
     42e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     430:	1dfb      	adds	r3, r7, #7
     432:	781b      	ldrb	r3, [r3, #0]
     434:	0018      	movs	r0, r3
     436:	4b2a      	ldr	r3, [pc, #168]	; (4e0 <extint_chan_set_config+0xf8>)
     438:	4798      	blx	r3
     43a:	0003      	movs	r3, r0
     43c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     43e:	1dfb      	adds	r3, r7, #7
     440:	781b      	ldrb	r3, [r3, #0]
     442:	2207      	movs	r2, #7
     444:	4013      	ands	r3, r2
     446:	009b      	lsls	r3, r3, #2
     448:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	7adb      	ldrb	r3, [r3, #11]
     44e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     450:	683b      	ldr	r3, [r7, #0]
     452:	7a9b      	ldrb	r3, [r3, #10]
     454:	2b00      	cmp	r3, #0
     456:	d003      	beq.n	460 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     458:	697b      	ldr	r3, [r7, #20]
     45a:	2208      	movs	r2, #8
     45c:	4313      	orrs	r3, r2
     45e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     460:	1dfb      	adds	r3, r7, #7
     462:	781b      	ldrb	r3, [r3, #0]
     464:	08db      	lsrs	r3, r3, #3
     466:	b2db      	uxtb	r3, r3
     468:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     46a:	1dfb      	adds	r3, r7, #7
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	08db      	lsrs	r3, r3, #3
     470:	b2db      	uxtb	r3, r3
     472:	001a      	movs	r2, r3
     474:	693b      	ldr	r3, [r7, #16]
     476:	3206      	adds	r2, #6
     478:	0092      	lsls	r2, r2, #2
     47a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47c:	210f      	movs	r1, #15
     47e:	68fa      	ldr	r2, [r7, #12]
     480:	4091      	lsls	r1, r2
     482:	000a      	movs	r2, r1
     484:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     486:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     488:	6979      	ldr	r1, [r7, #20]
     48a:	68fb      	ldr	r3, [r7, #12]
     48c:	4099      	lsls	r1, r3
     48e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     490:	431a      	orrs	r2, r3
     492:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	693b      	ldr	r3, [r7, #16]
     496:	1d82      	adds	r2, r0, #6
     498:	0092      	lsls	r2, r2, #2
     49a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     49c:	683b      	ldr	r3, [r7, #0]
     49e:	7a5b      	ldrb	r3, [r3, #9]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d00a      	beq.n	4ba <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4a4:	693b      	ldr	r3, [r7, #16]
     4a6:	695a      	ldr	r2, [r3, #20]
     4a8:	1dfb      	adds	r3, r7, #7
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	2101      	movs	r1, #1
     4ae:	4099      	lsls	r1, r3
     4b0:	000b      	movs	r3, r1
     4b2:	431a      	orrs	r2, r3
     4b4:	693b      	ldr	r3, [r7, #16]
     4b6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     4b8:	e00a      	b.n	4d0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4ba:	693b      	ldr	r3, [r7, #16]
     4bc:	695b      	ldr	r3, [r3, #20]
     4be:	1dfa      	adds	r2, r7, #7
     4c0:	7812      	ldrb	r2, [r2, #0]
     4c2:	2101      	movs	r1, #1
     4c4:	4091      	lsls	r1, r2
     4c6:	000a      	movs	r2, r1
     4c8:	43d2      	mvns	r2, r2
     4ca:	401a      	ands	r2, r3
     4cc:	693b      	ldr	r3, [r7, #16]
     4ce:	615a      	str	r2, [r3, #20]
	}
}
     4d0:	46c0      	nop			; (mov r8, r8)
     4d2:	46bd      	mov	sp, r7
     4d4:	b006      	add	sp, #24
     4d6:	bd80      	pop	{r7, pc}
     4d8:	00000189 	.word	0x00000189
     4dc:	00003c39 	.word	0x00003c39
     4e0:	000001dd 	.word	0x000001dd

000004e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	2200      	movs	r2, #0
     4f0:	701a      	strb	r2, [r3, #0]
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b002      	add	sp, #8
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)

000004fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b082      	sub	sp, #8
     500:	af00      	add	r7, sp, #0
     502:	0002      	movs	r2, r0
     504:	6039      	str	r1, [r7, #0]
     506:	1dfb      	adds	r3, r7, #7
     508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     50a:	1dfb      	adds	r3, r7, #7
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	2b01      	cmp	r3, #1
     510:	d00a      	beq.n	528 <system_apb_clock_set_mask+0x2c>
     512:	2b02      	cmp	r3, #2
     514:	d00f      	beq.n	536 <system_apb_clock_set_mask+0x3a>
     516:	2b00      	cmp	r3, #0
     518:	d114      	bne.n	544 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     51a:	4b0e      	ldr	r3, [pc, #56]	; (554 <system_apb_clock_set_mask+0x58>)
     51c:	4a0d      	ldr	r2, [pc, #52]	; (554 <system_apb_clock_set_mask+0x58>)
     51e:	6991      	ldr	r1, [r2, #24]
     520:	683a      	ldr	r2, [r7, #0]
     522:	430a      	orrs	r2, r1
     524:	619a      	str	r2, [r3, #24]
			break;
     526:	e00f      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     528:	4b0a      	ldr	r3, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52a:	4a0a      	ldr	r2, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52c:	69d1      	ldr	r1, [r2, #28]
     52e:	683a      	ldr	r2, [r7, #0]
     530:	430a      	orrs	r2, r1
     532:	61da      	str	r2, [r3, #28]
			break;
     534:	e008      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <system_apb_clock_set_mask+0x58>)
     538:	4a06      	ldr	r2, [pc, #24]	; (554 <system_apb_clock_set_mask+0x58>)
     53a:	6a11      	ldr	r1, [r2, #32]
     53c:	683a      	ldr	r2, [r7, #0]
     53e:	430a      	orrs	r2, r1
     540:	621a      	str	r2, [r3, #32]
			break;
     542:	e001      	b.n	548 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     544:	2317      	movs	r3, #23
     546:	e000      	b.n	54a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     548:	2300      	movs	r3, #0
}
     54a:	0018      	movs	r0, r3
     54c:	46bd      	mov	sp, r7
     54e:	b002      	add	sp, #8
     550:	bd80      	pop	{r7, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	40000400 	.word	0x40000400

00000558 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
     55e:	0002      	movs	r2, r0
     560:	1dfb      	adds	r3, r7, #7
     562:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <system_interrupt_enable+0x28>)
     566:	1dfa      	adds	r2, r7, #7
     568:	7812      	ldrb	r2, [r2, #0]
     56a:	0011      	movs	r1, r2
     56c:	221f      	movs	r2, #31
     56e:	400a      	ands	r2, r1
     570:	2101      	movs	r1, #1
     572:	4091      	lsls	r1, r2
     574:	000a      	movs	r2, r1
     576:	601a      	str	r2, [r3, #0]
}
     578:	46c0      	nop			; (mov r8, r8)
     57a:	46bd      	mov	sp, r7
     57c:	b002      	add	sp, #8
     57e:	bd80      	pop	{r7, pc}
     580:	e000e100 	.word	0xe000e100

00000584 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     584:	b580      	push	{r7, lr}
     586:	b082      	sub	sp, #8
     588:	af00      	add	r7, sp, #0
     58a:	0002      	movs	r2, r0
     58c:	1dfb      	adds	r3, r7, #7
     58e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     590:	4a07      	ldr	r2, [pc, #28]	; (5b0 <system_interrupt_disable+0x2c>)
     592:	1dfb      	adds	r3, r7, #7
     594:	781b      	ldrb	r3, [r3, #0]
     596:	0019      	movs	r1, r3
     598:	231f      	movs	r3, #31
     59a:	400b      	ands	r3, r1
     59c:	2101      	movs	r1, #1
     59e:	4099      	lsls	r1, r3
     5a0:	000b      	movs	r3, r1
     5a2:	0019      	movs	r1, r3
     5a4:	2380      	movs	r3, #128	; 0x80
     5a6:	50d1      	str	r1, [r2, r3]
}
     5a8:	46c0      	nop			; (mov r8, r8)
     5aa:	46bd      	mov	sp, r7
     5ac:	b002      	add	sp, #8
     5ae:	bd80      	pop	{r7, pc}
     5b0:	e000e100 	.word	0xe000e100

000005b4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5b4:	b580      	push	{r7, lr}
     5b6:	b084      	sub	sp, #16
     5b8:	af00      	add	r7, sp, #0
     5ba:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	681b      	ldr	r3, [r3, #0]
     5c0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c2:	68fb      	ldr	r3, [r7, #12]
     5c4:	7a9b      	ldrb	r3, [r3, #10]
     5c6:	b2db      	uxtb	r3, r3
     5c8:	b25b      	sxtb	r3, r3
     5ca:	2b00      	cmp	r3, #0
     5cc:	da01      	bge.n	5d2 <rtc_count_is_syncing+0x1e>
                return true;
     5ce:	2301      	movs	r3, #1
     5d0:	e000      	b.n	5d4 <rtc_count_is_syncing+0x20>
        }

        return false;
     5d2:	2300      	movs	r3, #0
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b004      	add	sp, #16
     5da:	bd80      	pop	{r7, pc}

000005dc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5dc:	b580      	push	{r7, lr}
     5de:	b084      	sub	sp, #16
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5ea:	2003      	movs	r0, #3
     5ec:	4b0a      	ldr	r3, [pc, #40]	; (618 <rtc_count_enable+0x3c>)
     5ee:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	0018      	movs	r0, r3
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <rtc_count_enable+0x40>)
     5f8:	4798      	blx	r3
     5fa:	1e03      	subs	r3, r0, #0
     5fc:	d1f9      	bne.n	5f2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5fe:	68fb      	ldr	r3, [r7, #12]
     600:	881b      	ldrh	r3, [r3, #0]
     602:	b29b      	uxth	r3, r3
     604:	2202      	movs	r2, #2
     606:	4313      	orrs	r3, r2
     608:	b29a      	uxth	r2, r3
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	801a      	strh	r2, [r3, #0]
}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	46bd      	mov	sp, r7
     612:	b004      	add	sp, #16
     614:	bd80      	pop	{r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000559 	.word	0x00000559
     61c:	000005b5 	.word	0x000005b5

00000620 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     62e:	2003      	movs	r0, #3
     630:	4b0a      	ldr	r3, [pc, #40]	; (65c <rtc_count_disable+0x3c>)
     632:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     634:	46c0      	nop			; (mov r8, r8)
     636:	687b      	ldr	r3, [r7, #4]
     638:	0018      	movs	r0, r3
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <rtc_count_disable+0x40>)
     63c:	4798      	blx	r3
     63e:	1e03      	subs	r3, r0, #0
     640:	d1f9      	bne.n	636 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     642:	68fb      	ldr	r3, [r7, #12]
     644:	881b      	ldrh	r3, [r3, #0]
     646:	b29b      	uxth	r3, r3
     648:	2202      	movs	r2, #2
     64a:	4393      	bics	r3, r2
     64c:	b29a      	uxth	r2, r3
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	801a      	strh	r2, [r3, #0]
}
     652:	46c0      	nop			; (mov r8, r8)
     654:	46bd      	mov	sp, r7
     656:	b004      	add	sp, #16
     658:	bd80      	pop	{r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00000585 	.word	0x00000585
     660:	000005b5 	.word	0x000005b5

00000664 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     672:	687b      	ldr	r3, [r7, #4]
     674:	0018      	movs	r0, r3
     676:	4b0d      	ldr	r3, [pc, #52]	; (6ac <rtc_count_reset+0x48>)
     678:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2200      	movs	r2, #0
     684:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     686:	46c0      	nop			; (mov r8, r8)
     688:	687b      	ldr	r3, [r7, #4]
     68a:	0018      	movs	r0, r3
     68c:	4b08      	ldr	r3, [pc, #32]	; (6b0 <rtc_count_reset+0x4c>)
     68e:	4798      	blx	r3
     690:	1e03      	subs	r3, r0, #0
     692:	d1f9      	bne.n	688 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	881b      	ldrh	r3, [r3, #0]
     698:	b29b      	uxth	r3, r3
     69a:	2201      	movs	r2, #1
     69c:	4313      	orrs	r3, r2
     69e:	b29a      	uxth	r2, r3
     6a0:	68fb      	ldr	r3, [r7, #12]
     6a2:	801a      	strh	r2, [r3, #0]
}
     6a4:	46c0      	nop			; (mov r8, r8)
     6a6:	46bd      	mov	sp, r7
     6a8:	b004      	add	sp, #16
     6aa:	bd80      	pop	{r7, pc}
     6ac:	00000621 	.word	0x00000621
     6b0:	000005b5 	.word	0x000005b5

000006b4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	b084      	sub	sp, #16
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
     6bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	681b      	ldr	r3, [r3, #0]
     6c2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6c4:	683b      	ldr	r3, [r7, #0]
     6c6:	881a      	ldrh	r2, [r3, #0]
     6c8:	68bb      	ldr	r3, [r7, #8]
     6ca:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	789b      	ldrb	r3, [r3, #2]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d03a      	beq.n	74a <_rtc_count_set_config+0x96>
     6d4:	2b01      	cmp	r3, #1
     6d6:	d000      	beq.n	6da <_rtc_count_set_config+0x26>
     6d8:	e06c      	b.n	7b4 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6da:	68bb      	ldr	r3, [r7, #8]
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29a      	uxth	r2, r3
     6e0:	68bb      	ldr	r3, [r7, #8]
     6e2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	78db      	ldrb	r3, [r3, #3]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d007      	beq.n	6fc <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6ec:	68bb      	ldr	r3, [r7, #8]
     6ee:	881b      	ldrh	r3, [r3, #0]
     6f0:	b29b      	uxth	r3, r3
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	4313      	orrs	r3, r2
     6f6:	b29a      	uxth	r2, r3
     6f8:	68bb      	ldr	r3, [r7, #8]
     6fa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6fc:	230f      	movs	r3, #15
     6fe:	18fb      	adds	r3, r7, r3
     700:	2200      	movs	r2, #0
     702:	701a      	strb	r2, [r3, #0]
     704:	e01b      	b.n	73e <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     706:	46c0      	nop			; (mov r8, r8)
     708:	687b      	ldr	r3, [r7, #4]
     70a:	0018      	movs	r0, r3
     70c:	4b33      	ldr	r3, [pc, #204]	; (7dc <_rtc_count_set_config+0x128>)
     70e:	4798      	blx	r3
     710:	1e03      	subs	r3, r0, #0
     712:	d1f9      	bne.n	708 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781a      	ldrb	r2, [r3, #0]
     71a:	683b      	ldr	r3, [r7, #0]
     71c:	3202      	adds	r2, #2
     71e:	0092      	lsls	r2, r2, #2
     720:	58d1      	ldr	r1, [r2, r3]
     722:	230f      	movs	r3, #15
     724:	18fb      	adds	r3, r7, r3
     726:	781a      	ldrb	r2, [r3, #0]
     728:	687b      	ldr	r3, [r7, #4]
     72a:	0018      	movs	r0, r3
     72c:	4b2c      	ldr	r3, [pc, #176]	; (7e0 <_rtc_count_set_config+0x12c>)
     72e:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     730:	230f      	movs	r3, #15
     732:	18fb      	adds	r3, r7, r3
     734:	781a      	ldrb	r2, [r3, #0]
     736:	230f      	movs	r3, #15
     738:	18fb      	adds	r3, r7, r3
     73a:	3201      	adds	r2, #1
     73c:	701a      	strb	r2, [r3, #0]
     73e:	230f      	movs	r3, #15
     740:	18fb      	adds	r3, r7, r3
     742:	781b      	ldrb	r3, [r3, #0]
     744:	2b00      	cmp	r3, #0
     746:	d0de      	beq.n	706 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     748:	e036      	b.n	7b8 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	881b      	ldrh	r3, [r3, #0]
     74e:	b29b      	uxth	r3, r3
     750:	2204      	movs	r2, #4
     752:	4313      	orrs	r3, r2
     754:	b29a      	uxth	r2, r3
     756:	68bb      	ldr	r3, [r7, #8]
     758:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	78db      	ldrb	r3, [r3, #3]
     75e:	2b00      	cmp	r3, #0
     760:	d001      	beq.n	766 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     762:	2317      	movs	r3, #23
     764:	e036      	b.n	7d4 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     766:	230e      	movs	r3, #14
     768:	18fb      	adds	r3, r7, r3
     76a:	2200      	movs	r2, #0
     76c:	701a      	strb	r2, [r3, #0]
     76e:	e01b      	b.n	7a8 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     770:	46c0      	nop			; (mov r8, r8)
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b19      	ldr	r3, [pc, #100]	; (7dc <_rtc_count_set_config+0x128>)
     778:	4798      	blx	r3
     77a:	1e03      	subs	r3, r0, #0
     77c:	d1f9      	bne.n	772 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     77e:	230e      	movs	r3, #14
     780:	18fb      	adds	r3, r7, r3
     782:	781a      	ldrb	r2, [r3, #0]
     784:	683b      	ldr	r3, [r7, #0]
     786:	3202      	adds	r2, #2
     788:	0092      	lsls	r2, r2, #2
     78a:	58d1      	ldr	r1, [r2, r3]
     78c:	230e      	movs	r3, #14
     78e:	18fb      	adds	r3, r7, r3
     790:	781a      	ldrb	r2, [r3, #0]
     792:	687b      	ldr	r3, [r7, #4]
     794:	0018      	movs	r0, r3
     796:	4b12      	ldr	r3, [pc, #72]	; (7e0 <_rtc_count_set_config+0x12c>)
     798:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     79a:	230e      	movs	r3, #14
     79c:	18fb      	adds	r3, r7, r3
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	3201      	adds	r2, #1
     7a6:	701a      	strb	r2, [r3, #0]
     7a8:	230e      	movs	r3, #14
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2b01      	cmp	r3, #1
     7b0:	d9de      	bls.n	770 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7b2:	e001      	b.n	7b8 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7b4:	2317      	movs	r3, #23
     7b6:	e00d      	b.n	7d4 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	791b      	ldrb	r3, [r3, #4]
     7bc:	2b00      	cmp	r3, #0
     7be:	d008      	beq.n	7d2 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7c0:	68bb      	ldr	r3, [r7, #8]
     7c2:	885b      	ldrh	r3, [r3, #2]
     7c4:	b29b      	uxth	r3, r3
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	01d2      	lsls	r2, r2, #7
     7ca:	4313      	orrs	r3, r2
     7cc:	b29a      	uxth	r2, r3
     7ce:	68bb      	ldr	r3, [r7, #8]
     7d0:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7d2:	2300      	movs	r3, #0
}
     7d4:	0018      	movs	r0, r3
     7d6:	46bd      	mov	sp, r7
     7d8:	b004      	add	sp, #16
     7da:	bd80      	pop	{r7, pc}
     7dc:	000005b5 	.word	0x000005b5
     7e0:	0000093d 	.word	0x0000093d

000007e4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b086      	sub	sp, #24
     7e8:	af00      	add	r7, sp, #0
     7ea:	60f8      	str	r0, [r7, #12]
     7ec:	60b9      	str	r1, [r7, #8]
     7ee:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	68ba      	ldr	r2, [r7, #8]
     7f4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7f6:	2120      	movs	r1, #32
     7f8:	2000      	movs	r0, #0
     7fa:	4b17      	ldr	r3, [pc, #92]	; (858 <rtc_count_init+0x74>)
     7fc:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7fe:	2314      	movs	r3, #20
     800:	18fb      	adds	r3, r7, r3
     802:	0018      	movs	r0, r3
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <rtc_count_init+0x78>)
     806:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2202      	movs	r2, #2
     80e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     810:	2314      	movs	r3, #20
     812:	18fb      	adds	r3, r7, r3
     814:	0019      	movs	r1, r3
     816:	2004      	movs	r0, #4
     818:	4b11      	ldr	r3, [pc, #68]	; (860 <rtc_count_init+0x7c>)
     81a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     81c:	2004      	movs	r0, #4
     81e:	4b11      	ldr	r3, [pc, #68]	; (864 <rtc_count_init+0x80>)
     820:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     822:	68fb      	ldr	r3, [r7, #12]
     824:	0018      	movs	r0, r3
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <rtc_count_init+0x84>)
     828:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	789a      	ldrb	r2, [r3, #2]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     832:	687b      	ldr	r3, [r7, #4]
     834:	791a      	ldrb	r2, [r3, #4]
     836:	68fb      	ldr	r3, [r7, #12]
     838:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <rtc_count_init+0x88>)
     83c:	68fa      	ldr	r2, [r7, #12]
     83e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     840:	687a      	ldr	r2, [r7, #4]
     842:	68fb      	ldr	r3, [r7, #12]
     844:	0011      	movs	r1, r2
     846:	0018      	movs	r0, r3
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <rtc_count_init+0x8c>)
     84a:	4798      	blx	r3
     84c:	0003      	movs	r3, r0
}
     84e:	0018      	movs	r0, r3
     850:	46bd      	mov	sp, r7
     852:	b006      	add	sp, #24
     854:	bd80      	pop	{r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	000004fd 	.word	0x000004fd
     85c:	000004e5 	.word	0x000004e5
     860:	0000394d 	.word	0x0000394d
     864:	00003991 	.word	0x00003991
     868:	00000665 	.word	0x00000665
     86c:	200000b0 	.word	0x200000b0
     870:	000006b5 	.word	0x000006b5

00000874 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     884:	46c0      	nop			; (mov r8, r8)
     886:	687b      	ldr	r3, [r7, #4]
     888:	0018      	movs	r0, r3
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <rtc_count_set_count+0x58>)
     88c:	4798      	blx	r3
     88e:	1e03      	subs	r3, r0, #0
     890:	d1f9      	bne.n	886 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     892:	687b      	ldr	r3, [r7, #4]
     894:	791b      	ldrb	r3, [r3, #4]
     896:	2b00      	cmp	r3, #0
     898:	d005      	beq.n	8a6 <rtc_count_set_count+0x32>
     89a:	2b01      	cmp	r3, #1
     89c:	d10e      	bne.n	8bc <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	683a      	ldr	r2, [r7, #0]
     8a2:	611a      	str	r2, [r3, #16]

			break;
     8a4:	e00c      	b.n	8c0 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	4a09      	ldr	r2, [pc, #36]	; (8d0 <rtc_count_set_count+0x5c>)
     8aa:	4293      	cmp	r3, r2
     8ac:	d901      	bls.n	8b2 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8ae:	2317      	movs	r3, #23
     8b0:	e007      	b.n	8c2 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	b29a      	uxth	r2, r3
     8b6:	68fb      	ldr	r3, [r7, #12]
     8b8:	821a      	strh	r2, [r3, #16]

			break;
     8ba:	e001      	b.n	8c0 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8bc:	2317      	movs	r3, #23
     8be:	e000      	b.n	8c2 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8c0:	2300      	movs	r3, #0
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b004      	add	sp, #16
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	000005b5 	.word	0x000005b5
     8d0:	0000ffff 	.word	0x0000ffff

000008d4 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b084      	sub	sp, #16
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	795b      	ldrb	r3, [r3, #5]
     8e6:	2201      	movs	r2, #1
     8e8:	4053      	eors	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2b00      	cmp	r3, #0
     8ee:	d009      	beq.n	904 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8f0:	68bb      	ldr	r3, [r7, #8]
     8f2:	4a10      	ldr	r2, [pc, #64]	; (934 <rtc_count_get_count+0x60>)
     8f4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	0018      	movs	r0, r3
     8fc:	4b0e      	ldr	r3, [pc, #56]	; (938 <rtc_count_get_count+0x64>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d1f9      	bne.n	8f8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     904:	687b      	ldr	r3, [r7, #4]
     906:	791b      	ldrb	r3, [r3, #4]
     908:	2b00      	cmp	r3, #0
     90a:	d005      	beq.n	918 <rtc_count_get_count+0x44>
     90c:	2b01      	cmp	r3, #1
     90e:	d108      	bne.n	922 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	691b      	ldr	r3, [r3, #16]
     914:	60fb      	str	r3, [r7, #12]

			break;
     916:	e007      	b.n	928 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     918:	68bb      	ldr	r3, [r7, #8]
     91a:	8a1b      	ldrh	r3, [r3, #16]
     91c:	b29b      	uxth	r3, r3
     91e:	60fb      	str	r3, [r7, #12]

			break;
     920:	e002      	b.n	928 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     922:	2300      	movs	r3, #0
     924:	60fb      	str	r3, [r7, #12]
			break;
     926:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     928:	68fb      	ldr	r3, [r7, #12]
}
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bd80      	pop	{r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	ffff8000 	.word	0xffff8000
     938:	000005b5 	.word	0x000005b5

0000093c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     93c:	b580      	push	{r7, lr}
     93e:	b086      	sub	sp, #24
     940:	af00      	add	r7, sp, #0
     942:	60f8      	str	r0, [r7, #12]
     944:	60b9      	str	r1, [r7, #8]
     946:	1dfb      	adds	r3, r7, #7
     948:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     950:	46c0      	nop			; (mov r8, r8)
     952:	68fb      	ldr	r3, [r7, #12]
     954:	0018      	movs	r0, r3
     956:	4b1a      	ldr	r3, [pc, #104]	; (9c0 <rtc_count_set_compare+0x84>)
     958:	4798      	blx	r3
     95a:	1e03      	subs	r3, r0, #0
     95c:	d1f9      	bne.n	952 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	791b      	ldrb	r3, [r3, #4]
     962:	2b00      	cmp	r3, #0
     964:	d00f      	beq.n	986 <rtc_count_set_compare+0x4a>
     966:	2b01      	cmp	r3, #1
     968:	d122      	bne.n	9b0 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     96a:	1dfb      	adds	r3, r7, #7
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	2b01      	cmp	r3, #1
     970:	d901      	bls.n	976 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     972:	2317      	movs	r3, #23
     974:	e01f      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     976:	1dfb      	adds	r3, r7, #7
     978:	781a      	ldrb	r2, [r3, #0]
     97a:	697b      	ldr	r3, [r7, #20]
     97c:	3206      	adds	r2, #6
     97e:	0092      	lsls	r2, r2, #2
     980:	68b9      	ldr	r1, [r7, #8]
     982:	50d1      	str	r1, [r2, r3]

			break;
     984:	e016      	b.n	9b4 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     986:	1dfb      	adds	r3, r7, #7
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	2b02      	cmp	r3, #2
     98c:	d901      	bls.n	992 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     98e:	2317      	movs	r3, #23
     990:	e011      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     992:	68bb      	ldr	r3, [r7, #8]
     994:	4a0b      	ldr	r2, [pc, #44]	; (9c4 <rtc_count_set_compare+0x88>)
     996:	4293      	cmp	r3, r2
     998:	d901      	bls.n	99e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e00b      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     99e:	1dfb      	adds	r3, r7, #7
     9a0:	781a      	ldrb	r2, [r3, #0]
     9a2:	68bb      	ldr	r3, [r7, #8]
     9a4:	b299      	uxth	r1, r3
     9a6:	697b      	ldr	r3, [r7, #20]
     9a8:	320c      	adds	r2, #12
     9aa:	0052      	lsls	r2, r2, #1
     9ac:	52d1      	strh	r1, [r2, r3]

			break;
     9ae:	e001      	b.n	9b4 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9b0:	231a      	movs	r3, #26
     9b2:	e000      	b.n	9b6 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9b4:	2300      	movs	r3, #0
}
     9b6:	0018      	movs	r0, r3
     9b8:	46bd      	mov	sp, r7
     9ba:	b006      	add	sp, #24
     9bc:	bd80      	pop	{r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	000005b5 	.word	0x000005b5
     9c4:	0000ffff 	.word	0x0000ffff

000009c8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b084      	sub	sp, #16
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	000a      	movs	r2, r1
     9d2:	1cbb      	adds	r3, r7, #2
     9d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	791b      	ldrb	r3, [r3, #4]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d001      	beq.n	9e8 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9e4:	2315      	movs	r3, #21
     9e6:	e00b      	b.n	a00 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	0018      	movs	r0, r3
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <rtc_count_set_period+0x40>)
     9f0:	4798      	blx	r3
     9f2:	1e03      	subs	r3, r0, #0
     9f4:	d1f9      	bne.n	9ea <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9f6:	68fb      	ldr	r3, [r7, #12]
     9f8:	1cba      	adds	r2, r7, #2
     9fa:	8812      	ldrh	r2, [r2, #0]
     9fc:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9fe:	2300      	movs	r3, #0
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	b004      	add	sp, #16
     a06:	bd80      	pop	{r7, pc}
     a08:	000005b5 	.word	0x000005b5

00000a0c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b086      	sub	sp, #24
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a14:	4b31      	ldr	r3, [pc, #196]	; (adc <_rtc_interrupt_handler+0xd0>)
     a16:	687a      	ldr	r2, [r7, #4]
     a18:	0092      	lsls	r2, r2, #2
     a1a:	58d3      	ldr	r3, [r2, r3]
     a1c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a1e:	697b      	ldr	r3, [r7, #20]
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a24:	230e      	movs	r3, #14
     a26:	18fb      	adds	r3, r7, r3
     a28:	697a      	ldr	r2, [r7, #20]
     a2a:	8ad2      	ldrh	r2, [r2, #22]
     a2c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	8a9b      	ldrh	r3, [r3, #20]
     a32:	b29a      	uxth	r2, r3
     a34:	230e      	movs	r3, #14
     a36:	18fb      	adds	r3, r7, r3
     a38:	210e      	movs	r1, #14
     a3a:	1879      	adds	r1, r7, r1
     a3c:	8809      	ldrh	r1, [r1, #0]
     a3e:	400a      	ands	r2, r1
     a40:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a42:	693b      	ldr	r3, [r7, #16]
     a44:	7a1b      	ldrb	r3, [r3, #8]
     a46:	b2da      	uxtb	r2, r3
     a48:	230c      	movs	r3, #12
     a4a:	18fb      	adds	r3, r7, r3
     a4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a4e:	693b      	ldr	r3, [r7, #16]
     a50:	79db      	ldrb	r3, [r3, #7]
     a52:	b2db      	uxtb	r3, r3
     a54:	b29a      	uxth	r2, r3
     a56:	230c      	movs	r3, #12
     a58:	18fb      	adds	r3, r7, r3
     a5a:	210c      	movs	r1, #12
     a5c:	1879      	adds	r1, r7, r1
     a5e:	8809      	ldrh	r1, [r1, #0]
     a60:	400a      	ands	r2, r1
     a62:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a64:	230c      	movs	r3, #12
     a66:	18fb      	adds	r3, r7, r3
     a68:	881b      	ldrh	r3, [r3, #0]
     a6a:	2280      	movs	r2, #128	; 0x80
     a6c:	4013      	ands	r3, r2
     a6e:	d00c      	beq.n	a8a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a70:	230e      	movs	r3, #14
     a72:	18fb      	adds	r3, r7, r3
     a74:	881b      	ldrh	r3, [r3, #0]
     a76:	2204      	movs	r2, #4
     a78:	4013      	ands	r3, r2
     a7a:	d002      	beq.n	a82 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a7c:	697b      	ldr	r3, [r7, #20]
     a7e:	691b      	ldr	r3, [r3, #16]
     a80:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a82:	693b      	ldr	r3, [r7, #16]
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     a88:	e024      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a8a:	230c      	movs	r3, #12
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	881b      	ldrh	r3, [r3, #0]
     a90:	2201      	movs	r2, #1
     a92:	4013      	ands	r3, r2
     a94:	d00c      	beq.n	ab0 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a96:	230e      	movs	r3, #14
     a98:	18fb      	adds	r3, r7, r3
     a9a:	881b      	ldrh	r3, [r3, #0]
     a9c:	2201      	movs	r2, #1
     a9e:	4013      	ands	r3, r2
     aa0:	d002      	beq.n	aa8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     aa2:	697b      	ldr	r3, [r7, #20]
     aa4:	689b      	ldr	r3, [r3, #8]
     aa6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa8:	693b      	ldr	r3, [r7, #16]
     aaa:	2201      	movs	r2, #1
     aac:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     aae:	e011      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     ab0:	230c      	movs	r3, #12
     ab2:	18fb      	adds	r3, r7, r3
     ab4:	881b      	ldrh	r3, [r3, #0]
     ab6:	2202      	movs	r2, #2
     ab8:	4013      	ands	r3, r2
     aba:	d00b      	beq.n	ad4 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     abc:	230e      	movs	r3, #14
     abe:	18fb      	adds	r3, r7, r3
     ac0:	881b      	ldrh	r3, [r3, #0]
     ac2:	2202      	movs	r2, #2
     ac4:	4013      	ands	r3, r2
     ac6:	d002      	beq.n	ace <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac8:	697b      	ldr	r3, [r7, #20]
     aca:	68db      	ldr	r3, [r3, #12]
     acc:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ace:	693b      	ldr	r3, [r7, #16]
     ad0:	2202      	movs	r2, #2
     ad2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     ad4:	46c0      	nop			; (mov r8, r8)
     ad6:	46bd      	mov	sp, r7
     ad8:	b006      	add	sp, #24
     ada:	bd80      	pop	{r7, pc}
     adc:	200000b0 	.word	0x200000b0

00000ae0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     ae4:	2000      	movs	r0, #0
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <RTC_Handler+0x10>)
     ae8:	4798      	blx	r3
}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	bd80      	pop	{r7, pc}
     af0:	00000a0d 	.word	0x00000a0d

00000af4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     af4:	b580      	push	{r7, lr}
     af6:	b084      	sub	sp, #16
     af8:	af00      	add	r7, sp, #0
     afa:	0002      	movs	r2, r0
     afc:	1dfb      	adds	r3, r7, #7
     afe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     b00:	230f      	movs	r3, #15
     b02:	18fb      	adds	r3, r7, r3
     b04:	1dfa      	adds	r2, r7, #7
     b06:	7812      	ldrb	r2, [r2, #0]
     b08:	09d2      	lsrs	r2, r2, #7
     b0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     b0c:	230e      	movs	r3, #14
     b0e:	18fb      	adds	r3, r7, r3
     b10:	1dfa      	adds	r2, r7, #7
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	0952      	lsrs	r2, r2, #5
     b16:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     b18:	4b0d      	ldr	r3, [pc, #52]	; (b50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     b1a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     b1c:	230f      	movs	r3, #15
     b1e:	18fb      	adds	r3, r7, r3
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d10f      	bne.n	b46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     b26:	230f      	movs	r3, #15
     b28:	18fb      	adds	r3, r7, r3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	009b      	lsls	r3, r3, #2
     b2e:	2210      	movs	r2, #16
     b30:	4694      	mov	ip, r2
     b32:	44bc      	add	ip, r7
     b34:	4463      	add	r3, ip
     b36:	3b08      	subs	r3, #8
     b38:	681a      	ldr	r2, [r3, #0]
     b3a:	230e      	movs	r3, #14
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	01db      	lsls	r3, r3, #7
     b42:	18d3      	adds	r3, r2, r3
     b44:	e000      	b.n	b48 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     b46:	2300      	movs	r3, #0
	}
}
     b48:	0018      	movs	r0, r3
     b4a:	46bd      	mov	sp, r7
     b4c:	b004      	add	sp, #16
     b4e:	bd80      	pop	{r7, pc}
     b50:	41004400 	.word	0x41004400

00000b54 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
     b5a:	0002      	movs	r2, r0
     b5c:	1dfb      	adds	r3, r7, #7
     b5e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     b60:	1dfb      	adds	r3, r7, #7
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	0018      	movs	r0, r3
     b66:	4b03      	ldr	r3, [pc, #12]	; (b74 <port_get_group_from_gpio_pin+0x20>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
}
     b6c:	0018      	movs	r0, r3
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}
     b74:	00000af5 	.word	0x00000af5

00000b78 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	0002      	movs	r2, r0
     b80:	1dfb      	adds	r3, r7, #7
     b82:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	0018      	movs	r0, r3
     b8a:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <port_pin_get_input_level+0x40>)
     b8c:	4798      	blx	r3
     b8e:	0003      	movs	r3, r0
     b90:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b92:	1dfb      	adds	r3, r7, #7
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	221f      	movs	r2, #31
     b98:	4013      	ands	r3, r2
     b9a:	2201      	movs	r2, #1
     b9c:	409a      	lsls	r2, r3
     b9e:	0013      	movs	r3, r2
     ba0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     ba2:	68fb      	ldr	r3, [r7, #12]
     ba4:	6a1b      	ldr	r3, [r3, #32]
     ba6:	68ba      	ldr	r2, [r7, #8]
     ba8:	4013      	ands	r3, r2
     baa:	1e5a      	subs	r2, r3, #1
     bac:	4193      	sbcs	r3, r2
     bae:	b2db      	uxtb	r3, r3
}
     bb0:	0018      	movs	r0, r3
     bb2:	46bd      	mov	sp, r7
     bb4:	b004      	add	sp, #16
     bb6:	bd80      	pop	{r7, pc}
     bb8:	00000b55 	.word	0x00000b55

00000bbc <init_wheel>:
#include "wheel.h"
#include <asf.h>
/********************************************************************/

//Init all values to 0
void init_wheel(){
     bbc:	b580      	push	{r7, lr}
     bbe:	af00      	add	r7, sp, #0
	wheel.up_val = 0;
     bc0:	4b10      	ldr	r3, [pc, #64]	; (c04 <init_wheel+0x48>)
     bc2:	2200      	movs	r2, #0
     bc4:	701a      	strb	r2, [r3, #0]
	wheel.down_val = 0;
     bc6:	4b0f      	ldr	r3, [pc, #60]	; (c04 <init_wheel+0x48>)
     bc8:	2200      	movs	r2, #0
     bca:	705a      	strb	r2, [r3, #1]
	wheel.left_val = 0;
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <init_wheel+0x48>)
     bce:	2200      	movs	r2, #0
     bd0:	709a      	strb	r2, [r3, #2]
	wheel.right_val = 0;
     bd2:	4b0c      	ldr	r3, [pc, #48]	; (c04 <init_wheel+0x48>)
     bd4:	2200      	movs	r2, #0
     bd6:	70da      	strb	r2, [r3, #3]

	wheel.left_state = 0;
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <init_wheel+0x48>)
     bda:	2200      	movs	r2, #0
     bdc:	711a      	strb	r2, [r3, #4]
	wheel.right_state = 0;
     bde:	4b09      	ldr	r3, [pc, #36]	; (c04 <init_wheel+0x48>)
     be0:	2200      	movs	r2, #0
     be2:	715a      	strb	r2, [r3, #5]
	wheel.up_state = 0;
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <init_wheel+0x48>)
     be6:	2200      	movs	r2, #0
     be8:	719a      	strb	r2, [r3, #6]
	wheel.down_state = 0;
     bea:	4b06      	ldr	r3, [pc, #24]	; (c04 <init_wheel+0x48>)
     bec:	2200      	movs	r2, #0
     bee:	71da      	strb	r2, [r3, #7]

	wheel.LR_count = 0;
     bf0:	4b04      	ldr	r3, [pc, #16]	; (c04 <init_wheel+0x48>)
     bf2:	2200      	movs	r2, #0
     bf4:	721a      	strb	r2, [r3, #8]
	wheel.UD_count = 0;
     bf6:	4b03      	ldr	r3, [pc, #12]	; (c04 <init_wheel+0x48>)
     bf8:	2200      	movs	r2, #0
     bfa:	725a      	strb	r2, [r3, #9]

}
     bfc:	46c0      	nop			; (mov r8, r8)
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	200000b4 	.word	0x200000b4

00000c08 <update_values>:

/********************************************************************/

//Reads the values of the wheel and updates the struct
void update_values(){
     c08:	b5b0      	push	{r4, r5, r7, lr}
     c0a:	af00      	add	r7, sp, #0
	
	//Read in the new values
	wheel.left_val = port_pin_get_input_level(PIN_PA10); //Left value
     c0c:	200a      	movs	r0, #10
     c0e:	4b1b      	ldr	r3, [pc, #108]	; (c7c <update_values+0x74>)
     c10:	4798      	blx	r3
     c12:	0003      	movs	r3, r0
     c14:	001a      	movs	r2, r3
     c16:	4b1a      	ldr	r3, [pc, #104]	; (c80 <update_values+0x78>)
     c18:	709a      	strb	r2, [r3, #2]
	wheel.right_val = port_pin_get_input_level(PIN_PA11); // Right value
     c1a:	200b      	movs	r0, #11
     c1c:	4b17      	ldr	r3, [pc, #92]	; (c7c <update_values+0x74>)
     c1e:	4798      	blx	r3
     c20:	0003      	movs	r3, r0
     c22:	001a      	movs	r2, r3
     c24:	4b16      	ldr	r3, [pc, #88]	; (c80 <update_values+0x78>)
     c26:	70da      	strb	r2, [r3, #3]
	wheel.up_val = port_pin_get_input_level(PIN_PA06); // Up value
     c28:	2006      	movs	r0, #6
     c2a:	4b14      	ldr	r3, [pc, #80]	; (c7c <update_values+0x74>)
     c2c:	4798      	blx	r3
     c2e:	0003      	movs	r3, r0
     c30:	001a      	movs	r2, r3
     c32:	4b13      	ldr	r3, [pc, #76]	; (c80 <update_values+0x78>)
     c34:	701a      	strb	r2, [r3, #0]
	wheel.down_val = port_pin_get_input_level(PIN_PA09); // Down value
     c36:	2009      	movs	r0, #9
     c38:	4b10      	ldr	r3, [pc, #64]	; (c7c <update_values+0x74>)
     c3a:	4798      	blx	r3
     c3c:	0003      	movs	r3, r0
     c3e:	001a      	movs	r2, r3
     c40:	4b0f      	ldr	r3, [pc, #60]	; (c80 <update_values+0x78>)
     c42:	705a      	strb	r2, [r3, #1]

	saveValues(&wheel.left_val, &wheel.left_state, &wheel.LR_count, 0);
     c44:	4a0f      	ldr	r2, [pc, #60]	; (c84 <update_values+0x7c>)
     c46:	4910      	ldr	r1, [pc, #64]	; (c88 <update_values+0x80>)
     c48:	4810      	ldr	r0, [pc, #64]	; (c8c <update_values+0x84>)
     c4a:	2300      	movs	r3, #0
     c4c:	4c10      	ldr	r4, [pc, #64]	; (c90 <update_values+0x88>)
     c4e:	47a0      	blx	r4
	saveValues(&wheel.right_val, &wheel.right_state, &wheel.LR_count, 1);
     c50:	4a0c      	ldr	r2, [pc, #48]	; (c84 <update_values+0x7c>)
     c52:	4910      	ldr	r1, [pc, #64]	; (c94 <update_values+0x8c>)
     c54:	4810      	ldr	r0, [pc, #64]	; (c98 <update_values+0x90>)
     c56:	2301      	movs	r3, #1
     c58:	4c0d      	ldr	r4, [pc, #52]	; (c90 <update_values+0x88>)
     c5a:	47a0      	blx	r4
	saveValues(&wheel.up_val, &wheel.up_state, &wheel.UD_count, 1);
     c5c:	4a0f      	ldr	r2, [pc, #60]	; (c9c <update_values+0x94>)
     c5e:	4910      	ldr	r1, [pc, #64]	; (ca0 <update_values+0x98>)
     c60:	4807      	ldr	r0, [pc, #28]	; (c80 <update_values+0x78>)
     c62:	2301      	movs	r3, #1
     c64:	4c0a      	ldr	r4, [pc, #40]	; (c90 <update_values+0x88>)
     c66:	47a0      	blx	r4
	saveValues(&wheel.down_val, &wheel.down_state, &wheel.UD_count, 0);
     c68:	4a0c      	ldr	r2, [pc, #48]	; (c9c <update_values+0x94>)
     c6a:	490e      	ldr	r1, [pc, #56]	; (ca4 <update_values+0x9c>)
     c6c:	480e      	ldr	r0, [pc, #56]	; (ca8 <update_values+0xa0>)
     c6e:	2300      	movs	r3, #0
     c70:	4c07      	ldr	r4, [pc, #28]	; (c90 <update_values+0x88>)
     c72:	47a0      	blx	r4
}
     c74:	46c0      	nop			; (mov r8, r8)
     c76:	46bd      	mov	sp, r7
     c78:	bdb0      	pop	{r4, r5, r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000b79 	.word	0x00000b79
     c80:	200000b4 	.word	0x200000b4
     c84:	200000bc 	.word	0x200000bc
     c88:	200000b8 	.word	0x200000b8
     c8c:	200000b6 	.word	0x200000b6
     c90:	00000cad 	.word	0x00000cad
     c94:	200000b9 	.word	0x200000b9
     c98:	200000b7 	.word	0x200000b7
     c9c:	200000bd 	.word	0x200000bd
     ca0:	200000ba 	.word	0x200000ba
     ca4:	200000bb 	.word	0x200000bb
     ca8:	200000b5 	.word	0x200000b5

00000cac <saveValues>:

/********************************************************************/

//Updates the values and increments the counter
void saveValues(uint8_t *current, uint8_t *previous, int8_t *count, uint8_t up_down){
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
     cb8:	001a      	movs	r2, r3
     cba:	1cfb      	adds	r3, r7, #3
     cbc:	701a      	strb	r2, [r3, #0]

	//If the current value is not equal to the previous value
	if(*current != *previous){
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	781a      	ldrb	r2, [r3, #0]
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	429a      	cmp	r2, r3
     cc8:	d00e      	beq.n	ce8 <saveValues+0x3c>
		if(up_down){
     cca:	1cfb      	adds	r3, r7, #3
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d003      	beq.n	cda <saveValues+0x2e>
			*count++;
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	3301      	adds	r3, #1
     cd6:	607b      	str	r3, [r7, #4]
     cd8:	e002      	b.n	ce0 <saveValues+0x34>
		}

		else{
			*count--;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	3b01      	subs	r3, #1
     cde:	607b      	str	r3, [r7, #4]
		}
		
		*previous = *current;
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	781a      	ldrb	r2, [r3, #0]
     ce4:	68bb      	ldr	r3, [r7, #8]
     ce6:	701a      	strb	r2, [r3, #0]
	}
}
     ce8:	46c0      	nop			; (mov r8, r8)
     cea:	46bd      	mov	sp, r7
     cec:	b004      	add	sp, #16
     cee:	bd80      	pop	{r7, pc}

00000cf0 <getScroll>:
	}
}

/********************************************************************/

void getScroll(int8_t *LR_scroll, int8_t *UD_scroll){
     cf0:	b580      	push	{r7, lr}
     cf2:	b084      	sub	sp, #16
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
     cf8:	6039      	str	r1, [r7, #0]
	int8_t send_LR_val = (int8_t)(wheel.LR_count);
     cfa:	230f      	movs	r3, #15
     cfc:	18fb      	adds	r3, r7, r3
     cfe:	4a22      	ldr	r2, [pc, #136]	; (d88 <getScroll+0x98>)
     d00:	7a12      	ldrb	r2, [r2, #8]
     d02:	701a      	strb	r2, [r3, #0]
	int8_t send_UD_val = (int8_t)(wheel.UD_count);
     d04:	230e      	movs	r3, #14
     d06:	18fb      	adds	r3, r7, r3
     d08:	4a1f      	ldr	r2, [pc, #124]	; (d88 <getScroll+0x98>)
     d0a:	7a52      	ldrb	r2, [r2, #9]
     d0c:	701a      	strb	r2, [r3, #0]

	if(send_LR_val > MAX_POS_SCROLL){
     d0e:	230f      	movs	r3, #15
     d10:	18fb      	adds	r3, r7, r3
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	b25b      	sxtb	r3, r3
     d16:	2b64      	cmp	r3, #100	; 0x64
     d18:	dd03      	ble.n	d22 <getScroll+0x32>
		send_LR_val = MAX_POS_SCROLL;
     d1a:	230f      	movs	r3, #15
     d1c:	18fb      	adds	r3, r7, r3
     d1e:	2264      	movs	r2, #100	; 0x64
     d20:	701a      	strb	r2, [r3, #0]
	}

	if(send_LR_val < MAX_NEG_SCROLL){
     d22:	230f      	movs	r3, #15
     d24:	18fb      	adds	r3, r7, r3
     d26:	781b      	ldrb	r3, [r3, #0]
     d28:	b25b      	sxtb	r3, r3
     d2a:	3364      	adds	r3, #100	; 0x64
     d2c:	da03      	bge.n	d36 <getScroll+0x46>
		send_LR_val = MAX_NEG_SCROLL;
     d2e:	230f      	movs	r3, #15
     d30:	18fb      	adds	r3, r7, r3
     d32:	229c      	movs	r2, #156	; 0x9c
     d34:	701a      	strb	r2, [r3, #0]
	}

	if(send_UD_val > MAX_POS_SCROLL){
     d36:	230e      	movs	r3, #14
     d38:	18fb      	adds	r3, r7, r3
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	b25b      	sxtb	r3, r3
     d3e:	2b64      	cmp	r3, #100	; 0x64
     d40:	dd03      	ble.n	d4a <getScroll+0x5a>
		send_UD_val = MAX_POS_SCROLL;
     d42:	230e      	movs	r3, #14
     d44:	18fb      	adds	r3, r7, r3
     d46:	2264      	movs	r2, #100	; 0x64
     d48:	701a      	strb	r2, [r3, #0]
	}

	if(send_UD_val < MAX_NEG_SCROLL){
     d4a:	230e      	movs	r3, #14
     d4c:	18fb      	adds	r3, r7, r3
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	b25b      	sxtb	r3, r3
     d52:	3364      	adds	r3, #100	; 0x64
     d54:	da03      	bge.n	d5e <getScroll+0x6e>
		send_UD_val = MAX_NEG_SCROLL;
     d56:	230e      	movs	r3, #14
     d58:	18fb      	adds	r3, r7, r3
     d5a:	229c      	movs	r2, #156	; 0x9c
     d5c:	701a      	strb	r2, [r3, #0]
	}

	wheel.LR_count = 0;
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <getScroll+0x98>)
     d60:	2200      	movs	r2, #0
     d62:	721a      	strb	r2, [r3, #8]
	wheel.UD_count = 0;
     d64:	4b08      	ldr	r3, [pc, #32]	; (d88 <getScroll+0x98>)
     d66:	2200      	movs	r2, #0
     d68:	725a      	strb	r2, [r3, #9]

	*LR_scroll = send_LR_val;
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	220f      	movs	r2, #15
     d6e:	18ba      	adds	r2, r7, r2
     d70:	7812      	ldrb	r2, [r2, #0]
     d72:	701a      	strb	r2, [r3, #0]
	*UD_scroll = send_UD_val;
     d74:	683b      	ldr	r3, [r7, #0]
     d76:	220e      	movs	r2, #14
     d78:	18ba      	adds	r2, r7, r2
     d7a:	7812      	ldrb	r2, [r2, #0]
     d7c:	701a      	strb	r2, [r3, #0]
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	46bd      	mov	sp, r7
     d82:	b004      	add	sp, #16
     d84:	bd80      	pop	{r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	200000b4 	.word	0x200000b4

00000d8c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b084      	sub	sp, #16
     d90:	af00      	add	r7, sp, #0
     d92:	0002      	movs	r2, r0
     d94:	1dfb      	adds	r3, r7, #7
     d96:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     d98:	230f      	movs	r3, #15
     d9a:	18fb      	adds	r3, r7, r3
     d9c:	1dfa      	adds	r2, r7, #7
     d9e:	7812      	ldrb	r2, [r2, #0]
     da0:	0952      	lsrs	r2, r2, #5
     da2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     da4:	230f      	movs	r3, #15
     da6:	18fb      	adds	r3, r7, r3
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b00      	cmp	r3, #0
     dac:	d10c      	bne.n	dc8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     dae:	4b09      	ldr	r3, [pc, #36]	; (dd4 <_extint_get_eic_from_channel+0x48>)
     db0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     db2:	230f      	movs	r3, #15
     db4:	18fb      	adds	r3, r7, r3
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	009b      	lsls	r3, r3, #2
     dba:	2210      	movs	r2, #16
     dbc:	4694      	mov	ip, r2
     dbe:	44bc      	add	ip, r7
     dc0:	4463      	add	r3, ip
     dc2:	3b08      	subs	r3, #8
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	e000      	b.n	dca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     dc8:	2300      	movs	r3, #0
	}
}
     dca:	0018      	movs	r0, r3
     dcc:	46bd      	mov	sp, r7
     dce:	b004      	add	sp, #16
     dd0:	bd80      	pop	{r7, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	40001800 	.word	0x40001800

00000dd8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     dd8:	b580      	push	{r7, lr}
     dda:	b084      	sub	sp, #16
     ddc:	af00      	add	r7, sp, #0
     dde:	0002      	movs	r2, r0
     de0:	1dfb      	adds	r3, r7, #7
     de2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     de4:	1dfb      	adds	r3, r7, #7
     de6:	781b      	ldrb	r3, [r3, #0]
     de8:	0018      	movs	r0, r3
     dea:	4b0b      	ldr	r3, [pc, #44]	; (e18 <extint_chan_is_detected+0x40>)
     dec:	4798      	blx	r3
     dee:	0003      	movs	r3, r0
     df0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     df2:	1dfb      	adds	r3, r7, #7
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	221f      	movs	r2, #31
     df8:	4013      	ands	r3, r2
     dfa:	2201      	movs	r2, #1
     dfc:	409a      	lsls	r2, r3
     dfe:	0013      	movs	r3, r2
     e00:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     e02:	68fb      	ldr	r3, [r7, #12]
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	68ba      	ldr	r2, [r7, #8]
     e08:	4013      	ands	r3, r2
     e0a:	1e5a      	subs	r2, r3, #1
     e0c:	4193      	sbcs	r3, r2
     e0e:	b2db      	uxtb	r3, r3
}
     e10:	0018      	movs	r0, r3
     e12:	46bd      	mov	sp, r7
     e14:	b004      	add	sp, #16
     e16:	bd80      	pop	{r7, pc}
     e18:	00000d8d 	.word	0x00000d8d

00000e1c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     e1c:	b580      	push	{r7, lr}
     e1e:	b084      	sub	sp, #16
     e20:	af00      	add	r7, sp, #0
     e22:	0002      	movs	r2, r0
     e24:	1dfb      	adds	r3, r7, #7
     e26:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     e28:	1dfb      	adds	r3, r7, #7
     e2a:	781b      	ldrb	r3, [r3, #0]
     e2c:	0018      	movs	r0, r3
     e2e:	4b09      	ldr	r3, [pc, #36]	; (e54 <extint_chan_clear_detected+0x38>)
     e30:	4798      	blx	r3
     e32:	0003      	movs	r3, r0
     e34:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     e36:	1dfb      	adds	r3, r7, #7
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	221f      	movs	r2, #31
     e3c:	4013      	ands	r3, r2
     e3e:	2201      	movs	r2, #1
     e40:	409a      	lsls	r2, r3
     e42:	0013      	movs	r3, r2
     e44:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	68ba      	ldr	r2, [r7, #8]
     e4a:	611a      	str	r2, [r3, #16]
}
     e4c:	46c0      	nop			; (mov r8, r8)
     e4e:	46bd      	mov	sp, r7
     e50:	b004      	add	sp, #16
     e52:	bd80      	pop	{r7, pc}
     e54:	00000d8d 	.word	0x00000d8d

00000e58 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     e58:	b580      	push	{r7, lr}
     e5a:	b082      	sub	sp, #8
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
     e60:	0008      	movs	r0, r1
     e62:	0011      	movs	r1, r2
     e64:	1cfb      	adds	r3, r7, #3
     e66:	1c02      	adds	r2, r0, #0
     e68:	701a      	strb	r2, [r3, #0]
     e6a:	1cbb      	adds	r3, r7, #2
     e6c:	1c0a      	adds	r2, r1, #0
     e6e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     e70:	1cbb      	adds	r3, r7, #2
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	2b00      	cmp	r3, #0
     e76:	d001      	beq.n	e7c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e78:	2317      	movs	r3, #23
     e7a:	e019      	b.n	eb0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     e7c:	1cfb      	adds	r3, r7, #3
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	4b0d      	ldr	r3, [pc, #52]	; (eb8 <extint_register_callback+0x60>)
     e82:	0092      	lsls	r2, r2, #2
     e84:	58d3      	ldr	r3, [r2, r3]
     e86:	2b00      	cmp	r3, #0
     e88:	d107      	bne.n	e9a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     e8a:	1cfb      	adds	r3, r7, #3
     e8c:	781a      	ldrb	r2, [r3, #0]
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <extint_register_callback+0x60>)
     e90:	0092      	lsls	r2, r2, #2
     e92:	6879      	ldr	r1, [r7, #4]
     e94:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     e96:	2300      	movs	r3, #0
     e98:	e00a      	b.n	eb0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     e9a:	1cfb      	adds	r3, r7, #3
     e9c:	781a      	ldrb	r2, [r3, #0]
     e9e:	4b06      	ldr	r3, [pc, #24]	; (eb8 <extint_register_callback+0x60>)
     ea0:	0092      	lsls	r2, r2, #2
     ea2:	58d2      	ldr	r2, [r2, r3]
     ea4:	687b      	ldr	r3, [r7, #4]
     ea6:	429a      	cmp	r2, r3
     ea8:	d101      	bne.n	eae <extint_register_callback+0x56>
		return STATUS_OK;
     eaa:	2300      	movs	r3, #0
     eac:	e000      	b.n	eb0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     eae:	231d      	movs	r3, #29
}
     eb0:	0018      	movs	r0, r3
     eb2:	46bd      	mov	sp, r7
     eb4:	b002      	add	sp, #8
     eb6:	bd80      	pop	{r7, pc}
     eb8:	20000070 	.word	0x20000070

00000ebc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	b084      	sub	sp, #16
     ec0:	af00      	add	r7, sp, #0
     ec2:	0002      	movs	r2, r0
     ec4:	1dfb      	adds	r3, r7, #7
     ec6:	701a      	strb	r2, [r3, #0]
     ec8:	1dbb      	adds	r3, r7, #6
     eca:	1c0a      	adds	r2, r1, #0
     ecc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     ece:	1dbb      	adds	r3, r7, #6
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d10e      	bne.n	ef4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     ed6:	1dfb      	adds	r3, r7, #7
     ed8:	781b      	ldrb	r3, [r3, #0]
     eda:	0018      	movs	r0, r3
     edc:	4b08      	ldr	r3, [pc, #32]	; (f00 <extint_chan_enable_callback+0x44>)
     ede:	4798      	blx	r3
     ee0:	0003      	movs	r3, r0
     ee2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     ee4:	1dfb      	adds	r3, r7, #7
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	2201      	movs	r2, #1
     eea:	409a      	lsls	r2, r3
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     ef0:	2300      	movs	r3, #0
     ef2:	e000      	b.n	ef6 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ef4:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     ef6:	0018      	movs	r0, r3
     ef8:	46bd      	mov	sp, r7
     efa:	b004      	add	sp, #16
     efc:	bd80      	pop	{r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000d8d 	.word	0x00000d8d

00000f04 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     f04:	b580      	push	{r7, lr}
     f06:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     f08:	4b15      	ldr	r3, [pc, #84]	; (f60 <EIC_Handler+0x5c>)
     f0a:	2200      	movs	r2, #0
     f0c:	701a      	strb	r2, [r3, #0]
     f0e:	e020      	b.n	f52 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     f10:	4b13      	ldr	r3, [pc, #76]	; (f60 <EIC_Handler+0x5c>)
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	0018      	movs	r0, r3
     f16:	4b13      	ldr	r3, [pc, #76]	; (f64 <EIC_Handler+0x60>)
     f18:	4798      	blx	r3
     f1a:	1e03      	subs	r3, r0, #0
     f1c:	d013      	beq.n	f46 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     f1e:	4b10      	ldr	r3, [pc, #64]	; (f60 <EIC_Handler+0x5c>)
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	0018      	movs	r0, r3
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <EIC_Handler+0x64>)
     f26:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     f28:	4b0d      	ldr	r3, [pc, #52]	; (f60 <EIC_Handler+0x5c>)
     f2a:	781b      	ldrb	r3, [r3, #0]
     f2c:	001a      	movs	r2, r3
     f2e:	4b0f      	ldr	r3, [pc, #60]	; (f6c <EIC_Handler+0x68>)
     f30:	0092      	lsls	r2, r2, #2
     f32:	58d3      	ldr	r3, [r2, r3]
     f34:	2b00      	cmp	r3, #0
     f36:	d006      	beq.n	f46 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     f38:	4b09      	ldr	r3, [pc, #36]	; (f60 <EIC_Handler+0x5c>)
     f3a:	781b      	ldrb	r3, [r3, #0]
     f3c:	001a      	movs	r2, r3
     f3e:	4b0b      	ldr	r3, [pc, #44]	; (f6c <EIC_Handler+0x68>)
     f40:	0092      	lsls	r2, r2, #2
     f42:	58d3      	ldr	r3, [r2, r3]
     f44:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <EIC_Handler+0x5c>)
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	3301      	adds	r3, #1
     f4c:	b2da      	uxtb	r2, r3
     f4e:	4b04      	ldr	r3, [pc, #16]	; (f60 <EIC_Handler+0x5c>)
     f50:	701a      	strb	r2, [r3, #0]
     f52:	4b03      	ldr	r3, [pc, #12]	; (f60 <EIC_Handler+0x5c>)
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b0f      	cmp	r3, #15
     f58:	d9da      	bls.n	f10 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	46bd      	mov	sp, r7
     f5e:	bd80      	pop	{r7, pc}
     f60:	200000be 	.word	0x200000be
     f64:	00000dd9 	.word	0x00000dd9
     f68:	00000e1d 	.word	0x00000e1d
     f6c:	20000070 	.word	0x20000070

00000f70 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     f70:	b580      	push	{r7, lr}
     f72:	b082      	sub	sp, #8
     f74:	af00      	add	r7, sp, #0
     f76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     f78:	687b      	ldr	r3, [r7, #4]
     f7a:	2200      	movs	r2, #0
     f7c:	701a      	strb	r2, [r3, #0]
}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	46bd      	mov	sp, r7
     f82:	b002      	add	sp, #8
     f84:	bd80      	pop	{r7, pc}
     f86:	46c0      	nop			; (mov r8, r8)

00000f88 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     f88:	b580      	push	{r7, lr}
     f8a:	b082      	sub	sp, #8
     f8c:	af00      	add	r7, sp, #0
     f8e:	0002      	movs	r2, r0
     f90:	6039      	str	r1, [r7, #0]
     f92:	1dfb      	adds	r3, r7, #7
     f94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f96:	1dfb      	adds	r3, r7, #7
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b01      	cmp	r3, #1
     f9c:	d00a      	beq.n	fb4 <system_apb_clock_set_mask+0x2c>
     f9e:	2b02      	cmp	r3, #2
     fa0:	d00f      	beq.n	fc2 <system_apb_clock_set_mask+0x3a>
     fa2:	2b00      	cmp	r3, #0
     fa4:	d114      	bne.n	fd0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     fa6:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fa8:	4a0d      	ldr	r2, [pc, #52]	; (fe0 <system_apb_clock_set_mask+0x58>)
     faa:	6991      	ldr	r1, [r2, #24]
     fac:	683a      	ldr	r2, [r7, #0]
     fae:	430a      	orrs	r2, r1
     fb0:	619a      	str	r2, [r3, #24]
			break;
     fb2:	e00f      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     fb4:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fb6:	4a0a      	ldr	r2, [pc, #40]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fb8:	69d1      	ldr	r1, [r2, #28]
     fba:	683a      	ldr	r2, [r7, #0]
     fbc:	430a      	orrs	r2, r1
     fbe:	61da      	str	r2, [r3, #28]
			break;
     fc0:	e008      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fc4:	4a06      	ldr	r2, [pc, #24]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fc6:	6a11      	ldr	r1, [r2, #32]
     fc8:	683a      	ldr	r2, [r7, #0]
     fca:	430a      	orrs	r2, r1
     fcc:	621a      	str	r2, [r3, #32]
			break;
     fce:	e001      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     fd0:	2317      	movs	r3, #23
     fd2:	e000      	b.n	fd6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     fd4:	2300      	movs	r3, #0
}
     fd6:	0018      	movs	r0, r3
     fd8:	46bd      	mov	sp, r7
     fda:	b002      	add	sp, #8
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	40000400 	.word	0x40000400

00000fe4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     fe4:	b580      	push	{r7, lr}
     fe6:	b082      	sub	sp, #8
     fe8:	af00      	add	r7, sp, #0
     fea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	2280      	movs	r2, #128	; 0x80
     ff0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	2200      	movs	r2, #0
     ff6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	2201      	movs	r2, #1
     ffc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	2200      	movs	r2, #0
    1002:	70da      	strb	r2, [r3, #3]
}
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	46bd      	mov	sp, r7
    1008:	b002      	add	sp, #8
    100a:	bd80      	pop	{r7, pc}

0000100c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    100c:	b580      	push	{r7, lr}
    100e:	b084      	sub	sp, #16
    1010:	af00      	add	r7, sp, #0
    1012:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1014:	2300      	movs	r3, #0
    1016:	60fb      	str	r3, [r7, #12]
    1018:	e00c      	b.n	1034 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <_tcc_get_inst_index+0x38>)
    101c:	68fa      	ldr	r2, [r7, #12]
    101e:	0092      	lsls	r2, r2, #2
    1020:	58d2      	ldr	r2, [r2, r3]
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	429a      	cmp	r2, r3
    1026:	d102      	bne.n	102e <_tcc_get_inst_index+0x22>
			return i;
    1028:	68fb      	ldr	r3, [r7, #12]
    102a:	b2db      	uxtb	r3, r3
    102c:	e006      	b.n	103c <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	3301      	adds	r3, #1
    1032:	60fb      	str	r3, [r7, #12]
    1034:	68fb      	ldr	r3, [r7, #12]
    1036:	2b02      	cmp	r3, #2
    1038:	d9ef      	bls.n	101a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    103a:	2300      	movs	r3, #0
}
    103c:	0018      	movs	r0, r3
    103e:	46bd      	mov	sp, r7
    1040:	b004      	add	sp, #16
    1042:	bd80      	pop	{r7, pc}
    1044:	000056ec 	.word	0x000056ec

00001048 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    1048:	b590      	push	{r4, r7, lr}
    104a:	b085      	sub	sp, #20
    104c:	af00      	add	r7, sp, #0
    104e:	6078      	str	r0, [r7, #4]
    1050:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1052:	230f      	movs	r3, #15
    1054:	18fc      	adds	r4, r7, r3
    1056:	683b      	ldr	r3, [r7, #0]
    1058:	0018      	movs	r0, r3
    105a:	4bad      	ldr	r3, [pc, #692]	; (1310 <tcc_get_config_defaults+0x2c8>)
    105c:	4798      	blx	r3
    105e:	0003      	movs	r3, r0
    1060:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	2200      	movs	r2, #0
    1066:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    1068:	230f      	movs	r3, #15
    106a:	18fb      	adds	r3, r7, r3
    106c:	781a      	ldrb	r2, [r3, #0]
    106e:	4ba9      	ldr	r3, [pc, #676]	; (1314 <tcc_get_config_defaults+0x2cc>)
    1070:	0092      	lsls	r2, r2, #2
    1072:	58d2      	ldr	r2, [r2, r3]
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	2200      	movs	r2, #0
    107c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	2200      	movs	r2, #0
    1082:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	2200      	movs	r2, #0
    1088:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	2200      	movs	r2, #0
    108e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    1090:	687b      	ldr	r3, [r7, #4]
    1092:	2200      	movs	r2, #0
    1094:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2200      	movs	r2, #0
    109a:	61da      	str	r2, [r3, #28]
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	2200      	movs	r2, #0
    10a0:	621a      	str	r2, [r3, #32]
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	2200      	movs	r2, #0
    10a6:	625a      	str	r2, [r3, #36]	; 0x24
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	2200      	movs	r2, #0
    10ac:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	2200      	movs	r2, #0
    10b2:	751a      	strb	r2, [r3, #20]
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	2200      	movs	r2, #0
    10b8:	755a      	strb	r2, [r3, #21]
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	2200      	movs	r2, #0
    10be:	759a      	strb	r2, [r3, #22]
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	2200      	movs	r2, #0
    10c4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	2200      	movs	r2, #0
    10ca:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	2200      	movs	r2, #0
    10d0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	2200      	movs	r2, #0
    10d6:	741a      	strb	r2, [r3, #16]
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	2200      	movs	r2, #0
    10dc:	745a      	strb	r2, [r3, #17]
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	2200      	movs	r2, #0
    10e2:	749a      	strb	r2, [r3, #18]
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	2200      	movs	r2, #0
    10e8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	222c      	movs	r2, #44	; 0x2c
    10ee:	2100      	movs	r1, #0
    10f0:	5499      	strb	r1, [r3, r2]
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	222d      	movs	r2, #45	; 0x2d
    10f6:	2100      	movs	r1, #0
    10f8:	5499      	strb	r1, [r3, r2]
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	222e      	movs	r2, #46	; 0x2e
    10fe:	2100      	movs	r1, #0
    1100:	5499      	strb	r1, [r3, r2]
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	222f      	movs	r2, #47	; 0x2f
    1106:	2100      	movs	r1, #0
    1108:	5499      	strb	r1, [r3, r2]
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	2230      	movs	r2, #48	; 0x30
    110e:	2100      	movs	r1, #0
    1110:	5499      	strb	r1, [r3, r2]
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	2231      	movs	r2, #49	; 0x31
    1116:	2100      	movs	r1, #0
    1118:	5499      	strb	r1, [r3, r2]
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	2232      	movs	r2, #50	; 0x32
    111e:	2100      	movs	r1, #0
    1120:	5499      	strb	r1, [r3, r2]
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	2233      	movs	r2, #51	; 0x33
    1126:	2100      	movs	r1, #0
    1128:	5499      	strb	r1, [r3, r2]
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	2234      	movs	r2, #52	; 0x34
    112e:	2100      	movs	r1, #0
    1130:	5499      	strb	r1, [r3, r2]
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	2235      	movs	r2, #53	; 0x35
    1136:	2100      	movs	r1, #0
    1138:	5499      	strb	r1, [r3, r2]
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	2236      	movs	r2, #54	; 0x36
    113e:	2100      	movs	r1, #0
    1140:	5499      	strb	r1, [r3, r2]
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	2237      	movs	r2, #55	; 0x37
    1146:	2100      	movs	r1, #0
    1148:	5499      	strb	r1, [r3, r2]
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	2238      	movs	r2, #56	; 0x38
    114e:	2100      	movs	r1, #0
    1150:	5499      	strb	r1, [r3, r2]
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	2239      	movs	r2, #57	; 0x39
    1156:	2100      	movs	r1, #0
    1158:	5499      	strb	r1, [r3, r2]
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	223a      	movs	r2, #58	; 0x3a
    115e:	2100      	movs	r1, #0
    1160:	5499      	strb	r1, [r3, r2]
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	223b      	movs	r2, #59	; 0x3b
    1166:	2100      	movs	r1, #0
    1168:	5499      	strb	r1, [r3, r2]
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	223c      	movs	r2, #60	; 0x3c
    116e:	2100      	movs	r1, #0
    1170:	5499      	strb	r1, [r3, r2]
    1172:	687b      	ldr	r3, [r7, #4]
    1174:	223d      	movs	r2, #61	; 0x3d
    1176:	2100      	movs	r1, #0
    1178:	5499      	strb	r1, [r3, r2]
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	223e      	movs	r2, #62	; 0x3e
    117e:	2100      	movs	r1, #0
    1180:	5499      	strb	r1, [r3, r2]
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	223f      	movs	r2, #63	; 0x3f
    1186:	2100      	movs	r1, #0
    1188:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	2240      	movs	r2, #64	; 0x40
    118e:	2100      	movs	r1, #0
    1190:	5499      	strb	r1, [r3, r2]
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	2241      	movs	r2, #65	; 0x41
    1196:	2100      	movs	r1, #0
    1198:	5499      	strb	r1, [r3, r2]
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	2242      	movs	r2, #66	; 0x42
    119e:	2100      	movs	r1, #0
    11a0:	5499      	strb	r1, [r3, r2]
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	2243      	movs	r2, #67	; 0x43
    11a6:	2100      	movs	r1, #0
    11a8:	5499      	strb	r1, [r3, r2]
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	2244      	movs	r2, #68	; 0x44
    11ae:	2100      	movs	r1, #0
    11b0:	5499      	strb	r1, [r3, r2]
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	2245      	movs	r2, #69	; 0x45
    11b6:	2100      	movs	r1, #0
    11b8:	5499      	strb	r1, [r3, r2]
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	2246      	movs	r2, #70	; 0x46
    11be:	2100      	movs	r1, #0
    11c0:	5499      	strb	r1, [r3, r2]
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	2247      	movs	r2, #71	; 0x47
    11c6:	2100      	movs	r1, #0
    11c8:	5499      	strb	r1, [r3, r2]
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	2248      	movs	r2, #72	; 0x48
    11ce:	2100      	movs	r1, #0
    11d0:	5499      	strb	r1, [r3, r2]
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	2249      	movs	r2, #73	; 0x49
    11d6:	2100      	movs	r1, #0
    11d8:	5499      	strb	r1, [r3, r2]
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	224a      	movs	r2, #74	; 0x4a
    11de:	2100      	movs	r1, #0
    11e0:	5499      	strb	r1, [r3, r2]
    11e2:	687b      	ldr	r3, [r7, #4]
    11e4:	224b      	movs	r2, #75	; 0x4b
    11e6:	2100      	movs	r1, #0
    11e8:	5499      	strb	r1, [r3, r2]
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	224c      	movs	r2, #76	; 0x4c
    11ee:	2100      	movs	r1, #0
    11f0:	5499      	strb	r1, [r3, r2]
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	224d      	movs	r2, #77	; 0x4d
    11f6:	2100      	movs	r1, #0
    11f8:	5499      	strb	r1, [r3, r2]
    11fa:	687b      	ldr	r3, [r7, #4]
    11fc:	224e      	movs	r2, #78	; 0x4e
    11fe:	2100      	movs	r1, #0
    1200:	5499      	strb	r1, [r3, r2]
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	224f      	movs	r2, #79	; 0x4f
    1206:	2100      	movs	r1, #0
    1208:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	2250      	movs	r2, #80	; 0x50
    120e:	2100      	movs	r1, #0
    1210:	5499      	strb	r1, [r3, r2]
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	2251      	movs	r2, #81	; 0x51
    1216:	2100      	movs	r1, #0
    1218:	5499      	strb	r1, [r3, r2]
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	2252      	movs	r2, #82	; 0x52
    121e:	2100      	movs	r1, #0
    1220:	5499      	strb	r1, [r3, r2]
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	2253      	movs	r2, #83	; 0x53
    1226:	2100      	movs	r1, #0
    1228:	5499      	strb	r1, [r3, r2]
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	2254      	movs	r2, #84	; 0x54
    122e:	2100      	movs	r1, #0
    1230:	5499      	strb	r1, [r3, r2]
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	2255      	movs	r2, #85	; 0x55
    1236:	2100      	movs	r1, #0
    1238:	5499      	strb	r1, [r3, r2]
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	2256      	movs	r2, #86	; 0x56
    123e:	2100      	movs	r1, #0
    1240:	5499      	strb	r1, [r3, r2]
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	2257      	movs	r2, #87	; 0x57
    1246:	2100      	movs	r1, #0
    1248:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	2298      	movs	r2, #152	; 0x98
    124e:	2100      	movs	r1, #0
    1250:	5499      	strb	r1, [r3, r2]
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	2200      	movs	r2, #0
    1256:	659a      	str	r2, [r3, #88]	; 0x58
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	2200      	movs	r2, #0
    125c:	679a      	str	r2, [r3, #120]	; 0x78
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	2299      	movs	r2, #153	; 0x99
    1262:	2100      	movs	r1, #0
    1264:	5499      	strb	r1, [r3, r2]
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	2200      	movs	r2, #0
    126a:	65da      	str	r2, [r3, #92]	; 0x5c
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	2200      	movs	r2, #0
    1270:	67da      	str	r2, [r3, #124]	; 0x7c
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	229a      	movs	r2, #154	; 0x9a
    1276:	2100      	movs	r1, #0
    1278:	5499      	strb	r1, [r3, r2]
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	2200      	movs	r2, #0
    127e:	661a      	str	r2, [r3, #96]	; 0x60
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	2100      	movs	r1, #0
    1286:	5099      	str	r1, [r3, r2]
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	229b      	movs	r2, #155	; 0x9b
    128c:	2100      	movs	r1, #0
    128e:	5499      	strb	r1, [r3, r2]
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	2200      	movs	r2, #0
    1294:	665a      	str	r2, [r3, #100]	; 0x64
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	2284      	movs	r2, #132	; 0x84
    129a:	2100      	movs	r1, #0
    129c:	5099      	str	r1, [r3, r2]
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	229c      	movs	r2, #156	; 0x9c
    12a2:	2100      	movs	r1, #0
    12a4:	5499      	strb	r1, [r3, r2]
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	2200      	movs	r2, #0
    12aa:	669a      	str	r2, [r3, #104]	; 0x68
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	2288      	movs	r2, #136	; 0x88
    12b0:	2100      	movs	r1, #0
    12b2:	5099      	str	r1, [r3, r2]
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	229d      	movs	r2, #157	; 0x9d
    12b8:	2100      	movs	r1, #0
    12ba:	5499      	strb	r1, [r3, r2]
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	2200      	movs	r2, #0
    12c0:	66da      	str	r2, [r3, #108]	; 0x6c
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	228c      	movs	r2, #140	; 0x8c
    12c6:	2100      	movs	r1, #0
    12c8:	5099      	str	r1, [r3, r2]
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	229e      	movs	r2, #158	; 0x9e
    12ce:	2100      	movs	r1, #0
    12d0:	5499      	strb	r1, [r3, r2]
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	2200      	movs	r2, #0
    12d6:	671a      	str	r2, [r3, #112]	; 0x70
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	2290      	movs	r2, #144	; 0x90
    12dc:	2100      	movs	r1, #0
    12de:	5099      	str	r1, [r3, r2]
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	229f      	movs	r2, #159	; 0x9f
    12e4:	2100      	movs	r1, #0
    12e6:	5499      	strb	r1, [r3, r2]
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	2200      	movs	r2, #0
    12ec:	675a      	str	r2, [r3, #116]	; 0x74
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	2294      	movs	r2, #148	; 0x94
    12f2:	2100      	movs	r1, #0
    12f4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	22a0      	movs	r2, #160	; 0xa0
    12fa:	2101      	movs	r1, #1
    12fc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	22a1      	movs	r2, #161	; 0xa1
    1302:	2100      	movs	r1, #0
    1304:	5499      	strb	r1, [r3, r2]
}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	46bd      	mov	sp, r7
    130a:	b005      	add	sp, #20
    130c:	bd90      	pop	{r4, r7, pc}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	0000100d 	.word	0x0000100d
    1314:	00005708 	.word	0x00005708

00001318 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1318:	b580      	push	{r7, lr}
    131a:	b086      	sub	sp, #24
    131c:	af00      	add	r7, sp, #0
    131e:	60b9      	str	r1, [r7, #8]
    1320:	607a      	str	r2, [r7, #4]
    1322:	230f      	movs	r3, #15
    1324:	18fb      	adds	r3, r7, r3
    1326:	1c02      	adds	r2, r0, #0
    1328:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    132a:	2300      	movs	r3, #0
    132c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    132e:	2300      	movs	r3, #0
    1330:	613b      	str	r3, [r7, #16]
    1332:	e01d      	b.n	1370 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    1334:	68ba      	ldr	r2, [r7, #8]
    1336:	693b      	ldr	r3, [r7, #16]
    1338:	18d3      	adds	r3, r2, r3
    133a:	3310      	adds	r3, #16
    133c:	781b      	ldrb	r3, [r3, #0]
    133e:	2b01      	cmp	r3, #1
    1340:	d113      	bne.n	136a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    1342:	230f      	movs	r3, #15
    1344:	18fb      	adds	r3, r7, r3
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	4a1b      	ldr	r2, [pc, #108]	; (13b8 <_tcc_build_ctrla+0xa0>)
    134a:	5cd3      	ldrb	r3, [r2, r3]
    134c:	1e1a      	subs	r2, r3, #0
    134e:	693b      	ldr	r3, [r7, #16]
    1350:	429a      	cmp	r2, r3
    1352:	da01      	bge.n	1358 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    1354:	2317      	movs	r3, #23
    1356:	e02a      	b.n	13ae <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1358:	2380      	movs	r3, #128	; 0x80
    135a:	045a      	lsls	r2, r3, #17
    135c:	693b      	ldr	r3, [r7, #16]
    135e:	409a      	lsls	r2, r3
    1360:	0013      	movs	r3, r2
    1362:	001a      	movs	r2, r3
    1364:	697b      	ldr	r3, [r7, #20]
    1366:	4313      	orrs	r3, r2
    1368:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    136a:	693b      	ldr	r3, [r7, #16]
    136c:	3301      	adds	r3, #1
    136e:	613b      	str	r3, [r7, #16]
    1370:	693b      	ldr	r3, [r7, #16]
    1372:	2b03      	cmp	r3, #3
    1374:	ddde      	ble.n	1334 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    1376:	68bb      	ldr	r3, [r7, #8]
    1378:	22a1      	movs	r2, #161	; 0xa1
    137a:	5c9b      	ldrb	r3, [r3, r2]
    137c:	2b00      	cmp	r3, #0
    137e:	d004      	beq.n	138a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1380:	697b      	ldr	r3, [r7, #20]
    1382:	2280      	movs	r2, #128	; 0x80
    1384:	0112      	lsls	r2, r2, #4
    1386:	4313      	orrs	r3, r2
    1388:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    138a:	68bb      	ldr	r3, [r7, #8]
    138c:	7b1b      	ldrb	r3, [r3, #12]
    138e:	031b      	lsls	r3, r3, #12
    1390:	001a      	movs	r2, r3
    1392:	697b      	ldr	r3, [r7, #20]
    1394:	4313      	orrs	r3, r2
    1396:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1398:	68bb      	ldr	r3, [r7, #8]
    139a:	7adb      	ldrb	r3, [r3, #11]
    139c:	021b      	lsls	r3, r3, #8
    139e:	001a      	movs	r2, r3
    13a0:	697b      	ldr	r3, [r7, #20]
    13a2:	4313      	orrs	r3, r2
    13a4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	697a      	ldr	r2, [r7, #20]
    13aa:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    13ac:	2300      	movs	r3, #0
}
    13ae:	0018      	movs	r0, r3
    13b0:	46bd      	mov	sp, r7
    13b2:	b006      	add	sp, #24
    13b4:	bd80      	pop	{r7, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	00005714 	.word	0x00005714

000013bc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    13bc:	b580      	push	{r7, lr}
    13be:	b086      	sub	sp, #24
    13c0:	af00      	add	r7, sp, #0
    13c2:	60b9      	str	r1, [r7, #8]
    13c4:	607a      	str	r2, [r7, #4]
    13c6:	230f      	movs	r3, #15
    13c8:	18fb      	adds	r3, r7, r3
    13ca:	1c02      	adds	r2, r0, #0
    13cc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    13ce:	2317      	movs	r3, #23
    13d0:	18fb      	adds	r3, r7, r3
    13d2:	2200      	movs	r2, #0
    13d4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    13d6:	68bb      	ldr	r3, [r7, #8]
    13d8:	7a1b      	ldrb	r3, [r3, #8]
    13da:	2b00      	cmp	r3, #0
    13dc:	d007      	beq.n	13ee <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    13de:	2317      	movs	r3, #23
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	2217      	movs	r2, #23
    13e4:	18ba      	adds	r2, r7, r2
    13e6:	7812      	ldrb	r2, [r2, #0]
    13e8:	2104      	movs	r1, #4
    13ea:	430a      	orrs	r2, r1
    13ec:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    13ee:	68bb      	ldr	r3, [r7, #8]
    13f0:	7a5b      	ldrb	r3, [r3, #9]
    13f2:	2b01      	cmp	r3, #1
    13f4:	d107      	bne.n	1406 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    13f6:	2317      	movs	r3, #23
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	2217      	movs	r2, #23
    13fc:	18ba      	adds	r2, r7, r2
    13fe:	7812      	ldrb	r2, [r2, #0]
    1400:	2101      	movs	r1, #1
    1402:	430a      	orrs	r2, r1
    1404:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	2217      	movs	r2, #23
    140a:	18ba      	adds	r2, r7, r2
    140c:	7812      	ldrb	r2, [r2, #0]
    140e:	701a      	strb	r2, [r3, #0]
}
    1410:	46c0      	nop			; (mov r8, r8)
    1412:	46bd      	mov	sp, r7
    1414:	b006      	add	sp, #24
    1416:	bd80      	pop	{r7, pc}

00001418 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1418:	b580      	push	{r7, lr}
    141a:	b088      	sub	sp, #32
    141c:	af00      	add	r7, sp, #0
    141e:	60b9      	str	r1, [r7, #8]
    1420:	607a      	str	r2, [r7, #4]
    1422:	230f      	movs	r3, #15
    1424:	18fb      	adds	r3, r7, r3
    1426:	1c02      	adds	r2, r0, #0
    1428:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    142a:	230f      	movs	r3, #15
    142c:	18fb      	adds	r3, r7, r3
    142e:	781a      	ldrb	r2, [r3, #0]
    1430:	231b      	movs	r3, #27
    1432:	18fb      	adds	r3, r7, r3
    1434:	493e      	ldr	r1, [pc, #248]	; (1530 <_tcc_build_faults+0x118>)
    1436:	5c8a      	ldrb	r2, [r1, r2]
    1438:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    143a:	2300      	movs	r3, #0
    143c:	61fb      	str	r3, [r7, #28]
    143e:	e06e      	b.n	151e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    1440:	69fa      	ldr	r2, [r7, #28]
    1442:	0013      	movs	r3, r2
    1444:	009b      	lsls	r3, r3, #2
    1446:	189b      	adds	r3, r3, r2
    1448:	005b      	lsls	r3, r3, #1
    144a:	3328      	adds	r3, #40	; 0x28
    144c:	68ba      	ldr	r2, [r7, #8]
    144e:	18d3      	adds	r3, r2, r3
    1450:	3304      	adds	r3, #4
    1452:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    1454:	697b      	ldr	r3, [r7, #20]
    1456:	7a5b      	ldrb	r3, [r3, #9]
    1458:	221b      	movs	r2, #27
    145a:	18ba      	adds	r2, r7, r2
    145c:	7812      	ldrb	r2, [r2, #0]
    145e:	429a      	cmp	r2, r3
    1460:	d801      	bhi.n	1466 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    1462:	2317      	movs	r3, #23
    1464:	e05f      	b.n	1526 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    1466:	697b      	ldr	r3, [r7, #20]
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	2b0f      	cmp	r3, #15
    146c:	d901      	bls.n	1472 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    146e:	2317      	movs	r3, #23
    1470:	e059      	b.n	1526 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1472:	697b      	ldr	r3, [r7, #20]
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	061b      	lsls	r3, r3, #24
    1478:	001a      	movs	r2, r3
    147a:	23f0      	movs	r3, #240	; 0xf0
    147c:	051b      	lsls	r3, r3, #20
    147e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1480:	697b      	ldr	r3, [r7, #20]
    1482:	785b      	ldrb	r3, [r3, #1]
    1484:	041b      	lsls	r3, r3, #16
    1486:	0019      	movs	r1, r3
    1488:	23ff      	movs	r3, #255	; 0xff
    148a:	041b      	lsls	r3, r3, #16
    148c:	400b      	ands	r3, r1
    148e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1490:	697b      	ldr	r3, [r7, #20]
    1492:	789b      	ldrb	r3, [r3, #2]
    1494:	2b00      	cmp	r3, #0
    1496:	d001      	beq.n	149c <_tcc_build_faults+0x84>
    1498:	2380      	movs	r3, #128	; 0x80
    149a:	e000      	b.n	149e <_tcc_build_faults+0x86>
    149c:	2300      	movs	r3, #0
    149e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    14a0:	697b      	ldr	r3, [r7, #20]
    14a2:	78db      	ldrb	r3, [r3, #3]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d001      	beq.n	14ac <_tcc_build_faults+0x94>
    14a8:	2308      	movs	r3, #8
    14aa:	e000      	b.n	14ae <_tcc_build_faults+0x96>
    14ac:	2300      	movs	r3, #0
    14ae:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    14b0:	697b      	ldr	r3, [r7, #20]
    14b2:	791b      	ldrb	r3, [r3, #4]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d001      	beq.n	14bc <_tcc_build_faults+0xa4>
    14b8:	2310      	movs	r3, #16
    14ba:	e000      	b.n	14be <_tcc_build_faults+0xa6>
    14bc:	2300      	movs	r3, #0
    14be:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    14c0:	697b      	ldr	r3, [r7, #20]
    14c2:	795b      	ldrb	r3, [r3, #5]
    14c4:	0019      	movs	r1, r3
    14c6:	2303      	movs	r3, #3
    14c8:	400b      	ands	r3, r1
    14ca:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    14cc:	697b      	ldr	r3, [r7, #20]
    14ce:	799b      	ldrb	r3, [r3, #6]
    14d0:	015b      	lsls	r3, r3, #5
    14d2:	0019      	movs	r1, r3
    14d4:	2360      	movs	r3, #96	; 0x60
    14d6:	400b      	ands	r3, r1
    14d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    14da:	697b      	ldr	r3, [r7, #20]
    14dc:	79db      	ldrb	r3, [r3, #7]
    14de:	021b      	lsls	r3, r3, #8
    14e0:	0019      	movs	r1, r3
    14e2:	23c0      	movs	r3, #192	; 0xc0
    14e4:	009b      	lsls	r3, r3, #2
    14e6:	400b      	ands	r3, r1
    14e8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    14ea:	697b      	ldr	r3, [r7, #20]
    14ec:	7a1b      	ldrb	r3, [r3, #8]
    14ee:	031b      	lsls	r3, r3, #12
    14f0:	0019      	movs	r1, r3
    14f2:	23e0      	movs	r3, #224	; 0xe0
    14f4:	01db      	lsls	r3, r3, #7
    14f6:	400b      	ands	r3, r1
    14f8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    14fa:	697b      	ldr	r3, [r7, #20]
    14fc:	7a5b      	ldrb	r3, [r3, #9]
    14fe:	029b      	lsls	r3, r3, #10
    1500:	0019      	movs	r1, r3
    1502:	23c0      	movs	r3, #192	; 0xc0
    1504:	011b      	lsls	r3, r3, #4
    1506:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1508:	4313      	orrs	r3, r2
    150a:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    150c:	69fb      	ldr	r3, [r7, #28]
    150e:	009b      	lsls	r3, r3, #2
    1510:	687a      	ldr	r2, [r7, #4]
    1512:	18d3      	adds	r3, r2, r3
    1514:	693a      	ldr	r2, [r7, #16]
    1516:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1518:	69fb      	ldr	r3, [r7, #28]
    151a:	3301      	adds	r3, #1
    151c:	61fb      	str	r3, [r7, #28]
    151e:	69fb      	ldr	r3, [r7, #28]
    1520:	2b01      	cmp	r3, #1
    1522:	dd8d      	ble.n	1440 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    1524:	2300      	movs	r3, #0
}
    1526:	0018      	movs	r0, r3
    1528:	46bd      	mov	sp, r7
    152a:	b008      	add	sp, #32
    152c:	bd80      	pop	{r7, pc}
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	00005714 	.word	0x00005714

00001534 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1534:	b580      	push	{r7, lr}
    1536:	b088      	sub	sp, #32
    1538:	af00      	add	r7, sp, #0
    153a:	60b9      	str	r1, [r7, #8]
    153c:	607a      	str	r2, [r7, #4]
    153e:	230f      	movs	r3, #15
    1540:	18fb      	adds	r3, r7, r3
    1542:	1c02      	adds	r2, r0, #0
    1544:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    1546:	230f      	movs	r3, #15
    1548:	18fb      	adds	r3, r7, r3
    154a:	781a      	ldrb	r2, [r3, #0]
    154c:	2317      	movs	r3, #23
    154e:	18fb      	adds	r3, r7, r3
    1550:	492d      	ldr	r1, [pc, #180]	; (1608 <_tcc_build_drvctrl+0xd4>)
    1552:	5c8a      	ldrb	r2, [r1, r2]
    1554:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    1556:	2300      	movs	r3, #0
    1558:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    155a:	2300      	movs	r3, #0
    155c:	61fb      	str	r3, [r7, #28]
    155e:	e048      	b.n	15f2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    1560:	68ba      	ldr	r2, [r7, #8]
    1562:	2150      	movs	r1, #80	; 0x50
    1564:	69fb      	ldr	r3, [r7, #28]
    1566:	18d3      	adds	r3, r2, r3
    1568:	185b      	adds	r3, r3, r1
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	2b00      	cmp	r3, #0
    156e:	d010      	beq.n	1592 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    1570:	2317      	movs	r3, #23
    1572:	18fb      	adds	r3, r7, r3
    1574:	781a      	ldrb	r2, [r3, #0]
    1576:	69fb      	ldr	r3, [r7, #28]
    1578:	429a      	cmp	r2, r3
    157a:	d801      	bhi.n	1580 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    157c:	2317      	movs	r3, #23
    157e:	e03f      	b.n	1600 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1580:	2380      	movs	r3, #128	; 0x80
    1582:	025a      	lsls	r2, r3, #9
    1584:	69fb      	ldr	r3, [r7, #28]
    1586:	409a      	lsls	r2, r3
    1588:	0013      	movs	r3, r2
    158a:	001a      	movs	r2, r3
    158c:	69bb      	ldr	r3, [r7, #24]
    158e:	4313      	orrs	r3, r2
    1590:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1592:	68ba      	ldr	r2, [r7, #8]
    1594:	69fb      	ldr	r3, [r7, #28]
    1596:	331c      	adds	r3, #28
    1598:	005b      	lsls	r3, r3, #1
    159a:	18d3      	adds	r3, r2, r3
    159c:	3309      	adds	r3, #9
    159e:	781b      	ldrb	r3, [r3, #0]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d023      	beq.n	15ec <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    15a4:	2317      	movs	r3, #23
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781a      	ldrb	r2, [r3, #0]
    15aa:	69fb      	ldr	r3, [r7, #28]
    15ac:	429a      	cmp	r2, r3
    15ae:	d801      	bhi.n	15b4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    15b0:	2317      	movs	r3, #23
    15b2:	e025      	b.n	1600 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    15b4:	68ba      	ldr	r2, [r7, #8]
    15b6:	69fb      	ldr	r3, [r7, #28]
    15b8:	331c      	adds	r3, #28
    15ba:	005b      	lsls	r3, r3, #1
    15bc:	18d3      	adds	r3, r2, r3
    15be:	3309      	adds	r3, #9
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	2b02      	cmp	r3, #2
    15c4:	d10a      	bne.n	15dc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    15c6:	2302      	movs	r3, #2
    15c8:	33ff      	adds	r3, #255	; 0xff
    15ca:	001a      	movs	r2, r3
    15cc:	69fb      	ldr	r3, [r7, #28]
    15ce:	409a      	lsls	r2, r3
    15d0:	0013      	movs	r3, r2
    15d2:	001a      	movs	r2, r3
    15d4:	69bb      	ldr	r3, [r7, #24]
    15d6:	4313      	orrs	r3, r2
    15d8:	61bb      	str	r3, [r7, #24]
    15da:	e007      	b.n	15ec <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    15dc:	2201      	movs	r2, #1
    15de:	69fb      	ldr	r3, [r7, #28]
    15e0:	409a      	lsls	r2, r3
    15e2:	0013      	movs	r3, r2
    15e4:	001a      	movs	r2, r3
    15e6:	69bb      	ldr	r3, [r7, #24]
    15e8:	4313      	orrs	r3, r2
    15ea:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    15ec:	69fb      	ldr	r3, [r7, #28]
    15ee:	3301      	adds	r3, #1
    15f0:	61fb      	str	r3, [r7, #28]
    15f2:	69fb      	ldr	r3, [r7, #28]
    15f4:	2b07      	cmp	r3, #7
    15f6:	d9b3      	bls.n	1560 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	69ba      	ldr	r2, [r7, #24]
    15fc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    15fe:	2300      	movs	r3, #0
}
    1600:	0018      	movs	r0, r3
    1602:	46bd      	mov	sp, r7
    1604:	b008      	add	sp, #32
    1606:	bd80      	pop	{r7, pc}
    1608:	00005718 	.word	0x00005718

0000160c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    160c:	b580      	push	{r7, lr}
    160e:	b088      	sub	sp, #32
    1610:	af00      	add	r7, sp, #0
    1612:	60b9      	str	r1, [r7, #8]
    1614:	607a      	str	r2, [r7, #4]
    1616:	230f      	movs	r3, #15
    1618:	18fb      	adds	r3, r7, r3
    161a:	1c02      	adds	r2, r0, #0
    161c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    161e:	230f      	movs	r3, #15
    1620:	18fb      	adds	r3, r7, r3
    1622:	781a      	ldrb	r2, [r3, #0]
    1624:	2317      	movs	r3, #23
    1626:	18fb      	adds	r3, r7, r3
    1628:	491d      	ldr	r1, [pc, #116]	; (16a0 <_tcc_build_waves+0x94>)
    162a:	5c8a      	ldrb	r2, [r1, r2]
    162c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    162e:	68bb      	ldr	r3, [r7, #8]
    1630:	3310      	adds	r3, #16
    1632:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1634:	693b      	ldr	r3, [r7, #16]
    1636:	7a5b      	ldrb	r3, [r3, #9]
    1638:	011b      	lsls	r3, r3, #4
    163a:	001a      	movs	r2, r3
    163c:	2330      	movs	r3, #48	; 0x30
    163e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1640:	693b      	ldr	r3, [r7, #16]
    1642:	7a1b      	ldrb	r3, [r3, #8]
    1644:	0019      	movs	r1, r3
    1646:	2307      	movs	r3, #7
    1648:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    164a:	4313      	orrs	r3, r2
    164c:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    164e:	2300      	movs	r3, #0
    1650:	61fb      	str	r3, [r7, #28]
    1652:	e01a      	b.n	168a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    1654:	693a      	ldr	r2, [r7, #16]
    1656:	69fb      	ldr	r3, [r7, #28]
    1658:	18d3      	adds	r3, r2, r3
    165a:	3304      	adds	r3, #4
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	2b00      	cmp	r3, #0
    1660:	d010      	beq.n	1684 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    1662:	2317      	movs	r3, #23
    1664:	18fb      	adds	r3, r7, r3
    1666:	781a      	ldrb	r2, [r3, #0]
    1668:	69fb      	ldr	r3, [r7, #28]
    166a:	429a      	cmp	r2, r3
    166c:	dc01      	bgt.n	1672 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    166e:	2317      	movs	r3, #23
    1670:	e012      	b.n	1698 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    1672:	2380      	movs	r3, #128	; 0x80
    1674:	025a      	lsls	r2, r3, #9
    1676:	69fb      	ldr	r3, [r7, #28]
    1678:	409a      	lsls	r2, r3
    167a:	0013      	movs	r3, r2
    167c:	001a      	movs	r2, r3
    167e:	69bb      	ldr	r3, [r7, #24]
    1680:	4313      	orrs	r3, r2
    1682:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1684:	69fb      	ldr	r3, [r7, #28]
    1686:	3301      	adds	r3, #1
    1688:	61fb      	str	r3, [r7, #28]
    168a:	69fb      	ldr	r3, [r7, #28]
    168c:	2b03      	cmp	r3, #3
    168e:	dde1      	ble.n	1654 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	69ba      	ldr	r2, [r7, #24]
    1694:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1696:	2300      	movs	r3, #0
}
    1698:	0018      	movs	r0, r3
    169a:	46bd      	mov	sp, r7
    169c:	b008      	add	sp, #32
    169e:	bd80      	pop	{r7, pc}
    16a0:	00005714 	.word	0x00005714

000016a4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    16a4:	b590      	push	{r4, r7, lr}
    16a6:	b091      	sub	sp, #68	; 0x44
    16a8:	af00      	add	r7, sp, #0
    16aa:	60f8      	str	r0, [r7, #12]
    16ac:	60b9      	str	r1, [r7, #8]
    16ae:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    16b0:	233b      	movs	r3, #59	; 0x3b
    16b2:	18fc      	adds	r4, r7, r3
    16b4:	68bb      	ldr	r3, [r7, #8]
    16b6:	0018      	movs	r0, r3
    16b8:	4bc4      	ldr	r3, [pc, #784]	; (19cc <tcc_init+0x328>)
    16ba:	4798      	blx	r3
    16bc:	0003      	movs	r3, r0
    16be:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    16c0:	233b      	movs	r3, #59	; 0x3b
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	781a      	ldrb	r2, [r3, #0]
    16c6:	4bc2      	ldr	r3, [pc, #776]	; (19d0 <tcc_init+0x32c>)
    16c8:	0092      	lsls	r2, r2, #2
    16ca:	58d3      	ldr	r3, [r2, r3]
    16cc:	0019      	movs	r1, r3
    16ce:	2002      	movs	r0, #2
    16d0:	4bc0      	ldr	r3, [pc, #768]	; (19d4 <tcc_init+0x330>)
    16d2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    16d4:	68bb      	ldr	r3, [r7, #8]
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	2202      	movs	r2, #2
    16da:	4013      	ands	r3, r2
    16dc:	d001      	beq.n	16e2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    16de:	231c      	movs	r3, #28
    16e0:	e1be      	b.n	1a60 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    16e2:	68bb      	ldr	r3, [r7, #8]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	2201      	movs	r2, #1
    16e8:	4013      	ands	r3, r2
    16ea:	d001      	beq.n	16f0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    16ec:	231c      	movs	r3, #28
    16ee:	e1b7      	b.n	1a60 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    16f0:	233b      	movs	r3, #59	; 0x3b
    16f2:	18fb      	adds	r3, r7, r3
    16f4:	781a      	ldrb	r2, [r3, #0]
    16f6:	4bb8      	ldr	r3, [pc, #736]	; (19d8 <tcc_init+0x334>)
    16f8:	0092      	lsls	r2, r2, #2
    16fa:	58d3      	ldr	r3, [r2, r3]
    16fc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	681a      	ldr	r2, [r3, #0]
    1702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1704:	429a      	cmp	r2, r3
    1706:	d804      	bhi.n	1712 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	685a      	ldr	r2, [r3, #4]
    170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    170e:	429a      	cmp	r2, r3
    1710:	d901      	bls.n	1716 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    1712:	2317      	movs	r3, #23
    1714:	e1a4      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1716:	2300      	movs	r3, #0
    1718:	63fb      	str	r3, [r7, #60]	; 0x3c
    171a:	e00e      	b.n	173a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    171c:	687a      	ldr	r2, [r7, #4]
    171e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1720:	3306      	adds	r3, #6
    1722:	009b      	lsls	r3, r3, #2
    1724:	18d3      	adds	r3, r2, r3
    1726:	3304      	adds	r3, #4
    1728:	681a      	ldr	r2, [r3, #0]
    172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    172c:	429a      	cmp	r2, r3
    172e:	d901      	bls.n	1734 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    1730:	2317      	movs	r3, #23
    1732:	e195      	b.n	1a60 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1736:	3301      	adds	r3, #1
    1738:	63fb      	str	r3, [r7, #60]	; 0x3c
    173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    173c:	2b03      	cmp	r3, #3
    173e:	dded      	ble.n	171c <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1740:	2300      	movs	r3, #0
    1742:	63fb      	str	r3, [r7, #60]	; 0x3c
    1744:	e019      	b.n	177a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    1746:	687a      	ldr	r2, [r7, #4]
    1748:	2198      	movs	r1, #152	; 0x98
    174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    174c:	18d3      	adds	r3, r2, r3
    174e:	185b      	adds	r3, r3, r1
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	2201      	movs	r2, #1
    1754:	4053      	eors	r3, r2
    1756:	b2db      	uxtb	r3, r3
    1758:	2b00      	cmp	r3, #0
    175a:	d10a      	bne.n	1772 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    175c:	233b      	movs	r3, #59	; 0x3b
    175e:	18fb      	adds	r3, r7, r3
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	4a9e      	ldr	r2, [pc, #632]	; (19dc <tcc_init+0x338>)
    1764:	5cd3      	ldrb	r3, [r2, r3]
    1766:	1e1a      	subs	r2, r3, #0
    1768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    176a:	429a      	cmp	r2, r3
    176c:	dc02      	bgt.n	1774 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    176e:	2317      	movs	r3, #23
    1770:	e176      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    1772:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1776:	3301      	adds	r3, #1
    1778:	63fb      	str	r3, [r7, #60]	; 0x3c
    177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    177c:	2b07      	cmp	r3, #7
    177e:	dde2      	ble.n	1746 <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    1780:	2300      	movs	r3, #0
    1782:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    1784:	2333      	movs	r3, #51	; 0x33
    1786:	18fc      	adds	r4, r7, r3
    1788:	232c      	movs	r3, #44	; 0x2c
    178a:	18fa      	adds	r2, r7, r3
    178c:	6879      	ldr	r1, [r7, #4]
    178e:	233b      	movs	r3, #59	; 0x3b
    1790:	18fb      	adds	r3, r7, r3
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	0018      	movs	r0, r3
    1796:	4b92      	ldr	r3, [pc, #584]	; (19e0 <tcc_init+0x33c>)
    1798:	4798      	blx	r3
    179a:	0003      	movs	r3, r0
    179c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    179e:	2333      	movs	r3, #51	; 0x33
    17a0:	18fb      	adds	r3, r7, r3
    17a2:	781b      	ldrb	r3, [r3, #0]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d003      	beq.n	17b0 <tcc_init+0x10c>
		return status;
    17a8:	2333      	movs	r3, #51	; 0x33
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	e157      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    17b0:	232b      	movs	r3, #43	; 0x2b
    17b2:	18fa      	adds	r2, r7, r3
    17b4:	6879      	ldr	r1, [r7, #4]
    17b6:	233b      	movs	r3, #59	; 0x3b
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	0018      	movs	r0, r3
    17be:	4b89      	ldr	r3, [pc, #548]	; (19e4 <tcc_init+0x340>)
    17c0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    17c2:	2333      	movs	r3, #51	; 0x33
    17c4:	18fc      	adds	r4, r7, r3
    17c6:	2320      	movs	r3, #32
    17c8:	18fa      	adds	r2, r7, r3
    17ca:	6879      	ldr	r1, [r7, #4]
    17cc:	233b      	movs	r3, #59	; 0x3b
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	781b      	ldrb	r3, [r3, #0]
    17d2:	0018      	movs	r0, r3
    17d4:	4b84      	ldr	r3, [pc, #528]	; (19e8 <tcc_init+0x344>)
    17d6:	4798      	blx	r3
    17d8:	0003      	movs	r3, r0
    17da:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    17dc:	2333      	movs	r3, #51	; 0x33
    17de:	18fb      	adds	r3, r7, r3
    17e0:	781b      	ldrb	r3, [r3, #0]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d003      	beq.n	17ee <tcc_init+0x14a>
		return status;
    17e6:	2333      	movs	r3, #51	; 0x33
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	e138      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    17ee:	2300      	movs	r3, #0
    17f0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    17f2:	2333      	movs	r3, #51	; 0x33
    17f4:	18fc      	adds	r4, r7, r3
    17f6:	231c      	movs	r3, #28
    17f8:	18fa      	adds	r2, r7, r3
    17fa:	6879      	ldr	r1, [r7, #4]
    17fc:	233b      	movs	r3, #59	; 0x3b
    17fe:	18fb      	adds	r3, r7, r3
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	0018      	movs	r0, r3
    1804:	4b79      	ldr	r3, [pc, #484]	; (19ec <tcc_init+0x348>)
    1806:	4798      	blx	r3
    1808:	0003      	movs	r3, r0
    180a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    180c:	2333      	movs	r3, #51	; 0x33
    180e:	18fb      	adds	r3, r7, r3
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	2b00      	cmp	r3, #0
    1814:	d003      	beq.n	181e <tcc_init+0x17a>
		return status;
    1816:	2333      	movs	r3, #51	; 0x33
    1818:	18fb      	adds	r3, r7, r3
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	e120      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    181e:	2333      	movs	r3, #51	; 0x33
    1820:	18fc      	adds	r4, r7, r3
    1822:	2318      	movs	r3, #24
    1824:	18fa      	adds	r2, r7, r3
    1826:	6879      	ldr	r1, [r7, #4]
    1828:	233b      	movs	r3, #59	; 0x3b
    182a:	18fb      	adds	r3, r7, r3
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	0018      	movs	r0, r3
    1830:	4b6f      	ldr	r3, [pc, #444]	; (19f0 <tcc_init+0x34c>)
    1832:	4798      	blx	r3
    1834:	0003      	movs	r3, r0
    1836:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    1838:	2333      	movs	r3, #51	; 0x33
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d003      	beq.n	184a <tcc_init+0x1a6>
		return status;
    1842:	2333      	movs	r3, #51	; 0x33
    1844:	18fb      	adds	r3, r7, r3
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	e10a      	b.n	1a60 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    184a:	2300      	movs	r3, #0
    184c:	63fb      	str	r3, [r7, #60]	; 0x3c
    184e:	e009      	b.n	1864 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    1850:	68fa      	ldr	r2, [r7, #12]
    1852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1854:	009b      	lsls	r3, r3, #2
    1856:	18d3      	adds	r3, r2, r3
    1858:	3304      	adds	r3, #4
    185a:	2200      	movs	r2, #0
    185c:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    185e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1860:	3301      	adds	r3, #1
    1862:	63fb      	str	r3, [r7, #60]	; 0x3c
    1864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1866:	2b0b      	cmp	r3, #11
    1868:	ddf2      	ble.n	1850 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    186a:	68fb      	ldr	r3, [r7, #12]
    186c:	2200      	movs	r2, #0
    186e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1870:	68fb      	ldr	r3, [r7, #12]
    1872:	2200      	movs	r2, #0
    1874:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1876:	233b      	movs	r3, #59	; 0x3b
    1878:	18fb      	adds	r3, r7, r3
    187a:	781a      	ldrb	r2, [r3, #0]
    187c:	4b5d      	ldr	r3, [pc, #372]	; (19f4 <tcc_init+0x350>)
    187e:	0092      	lsls	r2, r2, #2
    1880:	68f9      	ldr	r1, [r7, #12]
    1882:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    1884:	68fb      	ldr	r3, [r7, #12]
    1886:	68ba      	ldr	r2, [r7, #8]
    1888:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	22a0      	movs	r2, #160	; 0xa0
    188e:	5c99      	ldrb	r1, [r3, r2]
    1890:	68fb      	ldr	r3, [r7, #12]
    1892:	223c      	movs	r2, #60	; 0x3c
    1894:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1896:	2314      	movs	r3, #20
    1898:	18fb      	adds	r3, r7, r3
    189a:	0018      	movs	r0, r3
    189c:	4b56      	ldr	r3, [pc, #344]	; (19f8 <tcc_init+0x354>)
    189e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	7a9a      	ldrb	r2, [r3, #10]
    18a4:	2314      	movs	r3, #20
    18a6:	18fb      	adds	r3, r7, r3
    18a8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    18aa:	233b      	movs	r3, #59	; 0x3b
    18ac:	18fb      	adds	r3, r7, r3
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	4a52      	ldr	r2, [pc, #328]	; (19fc <tcc_init+0x358>)
    18b2:	5cd3      	ldrb	r3, [r2, r3]
    18b4:	2214      	movs	r2, #20
    18b6:	18ba      	adds	r2, r7, r2
    18b8:	0011      	movs	r1, r2
    18ba:	0018      	movs	r0, r3
    18bc:	4b50      	ldr	r3, [pc, #320]	; (1a00 <tcc_init+0x35c>)
    18be:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    18c0:	233b      	movs	r3, #59	; 0x3b
    18c2:	18fb      	adds	r3, r7, r3
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	4a4d      	ldr	r2, [pc, #308]	; (19fc <tcc_init+0x358>)
    18c8:	5cd3      	ldrb	r3, [r2, r3]
    18ca:	0018      	movs	r0, r3
    18cc:	4b4d      	ldr	r3, [pc, #308]	; (1a04 <tcc_init+0x360>)
    18ce:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    18d0:	2300      	movs	r3, #0
    18d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    18d4:	e02d      	b.n	1932 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    18d6:	687a      	ldr	r2, [r7, #4]
    18d8:	2198      	movs	r1, #152	; 0x98
    18da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18dc:	18d3      	adds	r3, r2, r3
    18de:	185b      	adds	r3, r3, r1
    18e0:	781b      	ldrb	r3, [r3, #0]
    18e2:	2201      	movs	r2, #1
    18e4:	4053      	eors	r3, r2
    18e6:	b2db      	uxtb	r3, r3
    18e8:	2b00      	cmp	r3, #0
    18ea:	d11e      	bne.n	192a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    18ec:	2310      	movs	r3, #16
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	0018      	movs	r0, r3
    18f2:	4b45      	ldr	r3, [pc, #276]	; (1a08 <tcc_init+0x364>)
    18f4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18fa:	321e      	adds	r2, #30
    18fc:	0092      	lsls	r2, r2, #2
    18fe:	58d3      	ldr	r3, [r2, r3]
    1900:	b2da      	uxtb	r2, r3
    1902:	2310      	movs	r3, #16
    1904:	18fb      	adds	r3, r7, r3
    1906:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1908:	2310      	movs	r3, #16
    190a:	18fb      	adds	r3, r7, r3
    190c:	2201      	movs	r2, #1
    190e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1914:	3216      	adds	r2, #22
    1916:	0092      	lsls	r2, r2, #2
    1918:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    191a:	b2db      	uxtb	r3, r3
    191c:	2210      	movs	r2, #16
    191e:	18ba      	adds	r2, r7, r2
    1920:	0011      	movs	r1, r2
    1922:	0018      	movs	r0, r3
    1924:	4b39      	ldr	r3, [pc, #228]	; (1a0c <tcc_init+0x368>)
    1926:	4798      	blx	r3
    1928:	e000      	b.n	192c <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    192a:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    192c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    192e:	3301      	adds	r3, #1
    1930:	63fb      	str	r3, [r7, #60]	; 0x3c
    1932:	233b      	movs	r3, #59	; 0x3b
    1934:	18fb      	adds	r3, r7, r3
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	4a28      	ldr	r2, [pc, #160]	; (19dc <tcc_init+0x338>)
    193a:	5cd3      	ldrb	r3, [r2, r3]
    193c:	1e1a      	subs	r2, r3, #0
    193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1940:	429a      	cmp	r2, r3
    1942:	dcc8      	bgt.n	18d6 <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    1944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1946:	68bb      	ldr	r3, [r7, #8]
    1948:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	68bb      	ldr	r3, [r7, #8]
    194e:	689b      	ldr	r3, [r3, #8]
    1950:	2204      	movs	r2, #4
    1952:	4013      	ands	r3, r2
    1954:	d1fa      	bne.n	194c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    1956:	68bb      	ldr	r3, [r7, #8]
    1958:	22ff      	movs	r2, #255	; 0xff
    195a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    195c:	46c0      	nop			; (mov r8, r8)
    195e:	68bb      	ldr	r3, [r7, #8]
    1960:	689b      	ldr	r3, [r3, #8]
    1962:	2204      	movs	r2, #4
    1964:	4013      	ands	r3, r2
    1966:	d1fa      	bne.n	195e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    1968:	232b      	movs	r3, #43	; 0x2b
    196a:	18fb      	adds	r3, r7, r3
    196c:	781a      	ldrb	r2, [r3, #0]
    196e:	68bb      	ldr	r3, [r7, #8]
    1970:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    1972:	2320      	movs	r3, #32
    1974:	18fb      	adds	r3, r7, r3
    1976:	681a      	ldr	r2, [r3, #0]
    1978:	68bb      	ldr	r3, [r7, #8]
    197a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    197c:	2320      	movs	r3, #32
    197e:	18fb      	adds	r3, r7, r3
    1980:	685a      	ldr	r2, [r3, #4]
    1982:	68bb      	ldr	r3, [r7, #8]
    1984:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    1986:	69fa      	ldr	r2, [r7, #28]
    1988:	68bb      	ldr	r3, [r7, #8]
    198a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    198c:	46c0      	nop			; (mov r8, r8)
    198e:	68bb      	ldr	r3, [r7, #8]
    1990:	689b      	ldr	r3, [r3, #8]
    1992:	4a1f      	ldr	r2, [pc, #124]	; (1a10 <tcc_init+0x36c>)
    1994:	4013      	ands	r3, r2
    1996:	d1fa      	bne.n	198e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    1998:	69ba      	ldr	r2, [r7, #24]
    199a:	68bb      	ldr	r3, [r7, #8]
    199c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	68bb      	ldr	r3, [r7, #8]
    19a2:	689b      	ldr	r3, [r3, #8]
    19a4:	2210      	movs	r2, #16
    19a6:	4013      	ands	r3, r2
    19a8:	d1fa      	bne.n	19a0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	681a      	ldr	r2, [r3, #0]
    19ae:	68bb      	ldr	r3, [r7, #8]
    19b0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	68bb      	ldr	r3, [r7, #8]
    19b6:	689b      	ldr	r3, [r3, #8]
    19b8:	4a16      	ldr	r2, [pc, #88]	; (1a14 <tcc_init+0x370>)
    19ba:	4013      	ands	r3, r2
    19bc:	d1fa      	bne.n	19b4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	685a      	ldr	r2, [r3, #4]
    19c2:	68bb      	ldr	r3, [r7, #8]
    19c4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    19c6:	2300      	movs	r3, #0
    19c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    19ca:	e03f      	b.n	1a4c <tcc_init+0x3a8>
    19cc:	0000100d 	.word	0x0000100d
    19d0:	000056fc 	.word	0x000056fc
    19d4:	00000f89 	.word	0x00000f89
    19d8:	00005708 	.word	0x00005708
    19dc:	00005718 	.word	0x00005718
    19e0:	00001319 	.word	0x00001319
    19e4:	000013bd 	.word	0x000013bd
    19e8:	00001419 	.word	0x00001419
    19ec:	00001535 	.word	0x00001535
    19f0:	0000160d 	.word	0x0000160d
    19f4:	200000c0 	.word	0x200000c0
    19f8:	00000f71 	.word	0x00000f71
    19fc:	000056f8 	.word	0x000056f8
    1a00:	0000394d 	.word	0x0000394d
    1a04:	00003991 	.word	0x00003991
    1a08:	00000fe5 	.word	0x00000fe5
    1a0c:	00003c39 	.word	0x00003c39
    1a10:	00020040 	.word	0x00020040
    1a14:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	68bb      	ldr	r3, [r7, #8]
    1a1c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1a1e:	4912      	ldr	r1, [pc, #72]	; (1a68 <tcc_init+0x3c4>)
    1a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a22:	4091      	lsls	r1, r2
    1a24:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    1a26:	4013      	ands	r3, r2
    1a28:	d1f7      	bne.n	1a1a <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    1a2a:	687a      	ldr	r2, [r7, #4]
    1a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a2e:	3306      	adds	r3, #6
    1a30:	009b      	lsls	r3, r3, #2
    1a32:	18d3      	adds	r3, r2, r3
    1a34:	3304      	adds	r3, #4
    1a36:	681a      	ldr	r2, [r3, #0]
    1a38:	68b9      	ldr	r1, [r7, #8]
    1a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a3c:	3310      	adds	r3, #16
    1a3e:	009b      	lsls	r3, r3, #2
    1a40:	18cb      	adds	r3, r1, r3
    1a42:	3304      	adds	r3, #4
    1a44:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a48:	3301      	adds	r3, #1
    1a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    1a4c:	233b      	movs	r3, #59	; 0x3b
    1a4e:	18fb      	adds	r3, r7, r3
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	4a06      	ldr	r2, [pc, #24]	; (1a6c <tcc_init+0x3c8>)
    1a54:	5cd3      	ldrb	r3, [r2, r3]
    1a56:	1e1a      	subs	r2, r3, #0
    1a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a5a:	429a      	cmp	r2, r3
    1a5c:	dcdc      	bgt.n	1a18 <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    1a5e:	2300      	movs	r3, #0
}
    1a60:	0018      	movs	r0, r3
    1a62:	46bd      	mov	sp, r7
    1a64:	b011      	add	sp, #68	; 0x44
    1a66:	bd90      	pop	{r4, r7, pc}
    1a68:	00080100 	.word	0x00080100
    1a6c:	00005714 	.word	0x00005714

00001a70 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1a70:	b590      	push	{r4, r7, lr}
    1a72:	b089      	sub	sp, #36	; 0x24
    1a74:	af00      	add	r7, sp, #0
    1a76:	60f8      	str	r0, [r7, #12]
    1a78:	0008      	movs	r0, r1
    1a7a:	607a      	str	r2, [r7, #4]
    1a7c:	0019      	movs	r1, r3
    1a7e:	230b      	movs	r3, #11
    1a80:	18fb      	adds	r3, r7, r3
    1a82:	1c02      	adds	r2, r0, #0
    1a84:	701a      	strb	r2, [r3, #0]
    1a86:	230a      	movs	r3, #10
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	1c0a      	adds	r2, r1, #0
    1a8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    1a94:	231b      	movs	r3, #27
    1a96:	18fc      	adds	r4, r7, r3
    1a98:	69fb      	ldr	r3, [r7, #28]
    1a9a:	0018      	movs	r0, r3
    1a9c:	4b28      	ldr	r3, [pc, #160]	; (1b40 <_tcc_set_compare_value+0xd0>)
    1a9e:	4798      	blx	r3
    1aa0:	0003      	movs	r3, r0
    1aa2:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1aa4:	231b      	movs	r3, #27
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	4a26      	ldr	r2, [pc, #152]	; (1b44 <_tcc_set_compare_value+0xd4>)
    1aac:	5cd3      	ldrb	r3, [r2, r3]
    1aae:	220b      	movs	r2, #11
    1ab0:	18ba      	adds	r2, r7, r2
    1ab2:	7812      	ldrb	r2, [r2, #0]
    1ab4:	429a      	cmp	r2, r3
    1ab6:	d301      	bcc.n	1abc <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    1ab8:	2317      	movs	r3, #23
    1aba:	e03d      	b.n	1b38 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    1abc:	231b      	movs	r3, #27
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	781a      	ldrb	r2, [r3, #0]
    1ac2:	4b21      	ldr	r3, [pc, #132]	; (1b48 <_tcc_set_compare_value+0xd8>)
    1ac4:	0092      	lsls	r2, r2, #2
    1ac6:	58d3      	ldr	r3, [r2, r3]
    1ac8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    1aca:	687a      	ldr	r2, [r7, #4]
    1acc:	697b      	ldr	r3, [r7, #20]
    1ace:	429a      	cmp	r2, r3
    1ad0:	d901      	bls.n	1ad6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    1ad2:	2317      	movs	r3, #23
    1ad4:	e030      	b.n	1b38 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    1ad6:	230a      	movs	r3, #10
    1ad8:	18fb      	adds	r3, r7, r3
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d014      	beq.n	1b0a <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	69fb      	ldr	r3, [r7, #28]
    1ae4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1ae6:	220b      	movs	r2, #11
    1ae8:	18ba      	adds	r2, r7, r2
    1aea:	7812      	ldrb	r2, [r2, #0]
    1aec:	2180      	movs	r1, #128	; 0x80
    1aee:	0309      	lsls	r1, r1, #12
    1af0:	4091      	lsls	r1, r2
    1af2:	000a      	movs	r2, r1

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    1af4:	4013      	ands	r3, r2
    1af6:	d1f4      	bne.n	1ae2 <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    1af8:	230b      	movs	r3, #11
    1afa:	18fb      	adds	r3, r7, r3
    1afc:	781a      	ldrb	r2, [r3, #0]
    1afe:	69fb      	ldr	r3, [r7, #28]
    1b00:	321c      	adds	r2, #28
    1b02:	0092      	lsls	r2, r2, #2
    1b04:	6879      	ldr	r1, [r7, #4]
    1b06:	50d1      	str	r1, [r2, r3]
    1b08:	e015      	b.n	1b36 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	69fb      	ldr	r3, [r7, #28]
    1b0e:	689b      	ldr	r3, [r3, #8]
    1b10:	220b      	movs	r2, #11
    1b12:	18ba      	adds	r2, r7, r2
    1b14:	7812      	ldrb	r2, [r2, #0]
    1b16:	2180      	movs	r1, #128	; 0x80
    1b18:	0049      	lsls	r1, r1, #1
    1b1a:	4091      	lsls	r1, r2
    1b1c:	000a      	movs	r2, r1
    1b1e:	4013      	ands	r3, r2
    1b20:	d1f4      	bne.n	1b0c <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    1b22:	230b      	movs	r3, #11
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	69fa      	ldr	r2, [r7, #28]
    1b2a:	3310      	adds	r3, #16
    1b2c:	009b      	lsls	r3, r3, #2
    1b2e:	18d3      	adds	r3, r2, r3
    1b30:	3304      	adds	r3, #4
    1b32:	687a      	ldr	r2, [r7, #4]
    1b34:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    1b36:	2300      	movs	r3, #0
}
    1b38:	0018      	movs	r0, r3
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b009      	add	sp, #36	; 0x24
    1b3e:	bd90      	pop	{r4, r7, pc}
    1b40:	0000100d 	.word	0x0000100d
    1b44:	00005714 	.word	0x00005714
    1b48:	00005708 	.word	0x00005708

00001b4c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1b4c:	b590      	push	{r4, r7, lr}
    1b4e:	b085      	sub	sp, #20
    1b50:	af00      	add	r7, sp, #0
    1b52:	60f8      	str	r0, [r7, #12]
    1b54:	607a      	str	r2, [r7, #4]
    1b56:	230b      	movs	r3, #11
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	1c0a      	adds	r2, r1, #0
    1b5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1b5e:	68fb      	ldr	r3, [r7, #12]
    1b60:	223c      	movs	r2, #60	; 0x3c
    1b62:	5c9c      	ldrb	r4, [r3, r2]
    1b64:	687a      	ldr	r2, [r7, #4]
    1b66:	230b      	movs	r3, #11
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	7819      	ldrb	r1, [r3, #0]
    1b6c:	68f8      	ldr	r0, [r7, #12]
    1b6e:	0023      	movs	r3, r4
    1b70:	4c03      	ldr	r4, [pc, #12]	; (1b80 <tcc_set_compare_value+0x34>)
    1b72:	47a0      	blx	r4
    1b74:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    1b76:	0018      	movs	r0, r3
    1b78:	46bd      	mov	sp, r7
    1b7a:	b005      	add	sp, #20
    1b7c:	bd90      	pop	{r4, r7, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	00001a71 	.word	0x00001a71

00001b84 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1b84:	b580      	push	{r7, lr}
    1b86:	af00      	add	r7, sp, #0
    1b88:	2000      	movs	r0, #0
    1b8a:	4b02      	ldr	r3, [pc, #8]	; (1b94 <TCC0_Handler+0x10>)
    1b8c:	4798      	blx	r3
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	46bd      	mov	sp, r7
    1b92:	bd80      	pop	{r7, pc}
    1b94:	00001bc1 	.word	0x00001bc1

00001b98 <TCC1_Handler>:
    1b98:	b580      	push	{r7, lr}
    1b9a:	af00      	add	r7, sp, #0
    1b9c:	2001      	movs	r0, #1
    1b9e:	4b02      	ldr	r3, [pc, #8]	; (1ba8 <TCC1_Handler+0x10>)
    1ba0:	4798      	blx	r3
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	46bd      	mov	sp, r7
    1ba6:	bd80      	pop	{r7, pc}
    1ba8:	00001bc1 	.word	0x00001bc1

00001bac <TCC2_Handler>:
    1bac:	b580      	push	{r7, lr}
    1bae:	af00      	add	r7, sp, #0
    1bb0:	2002      	movs	r0, #2
    1bb2:	4b02      	ldr	r3, [pc, #8]	; (1bbc <TCC2_Handler+0x10>)
    1bb4:	4798      	blx	r3
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	46bd      	mov	sp, r7
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	00001bc1 	.word	0x00001bc1

00001bc0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	b086      	sub	sp, #24
    1bc4:	af00      	add	r7, sp, #0
    1bc6:	0002      	movs	r2, r0
    1bc8:	1dfb      	adds	r3, r7, #7
    1bca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    1bcc:	1dfb      	adds	r3, r7, #7
    1bce:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1bd0:	4b18      	ldr	r3, [pc, #96]	; (1c34 <_tcc_interrupt_handler+0x74>)
    1bd2:	0092      	lsls	r2, r2, #2
    1bd4:	58d3      	ldr	r3, [r2, r3]
    1bd6:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1bd8:	693b      	ldr	r3, [r7, #16]
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    1bde:	693b      	ldr	r3, [r7, #16]
    1be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1be2:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    1be4:	693b      	ldr	r3, [r7, #16]
    1be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1be8:	4013      	ands	r3, r2
    1bea:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1bec:	2300      	movs	r3, #0
    1bee:	617b      	str	r3, [r7, #20]
    1bf0:	e019      	b.n	1c26 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1bf2:	4b11      	ldr	r3, [pc, #68]	; (1c38 <_tcc_interrupt_handler+0x78>)
    1bf4:	697a      	ldr	r2, [r7, #20]
    1bf6:	0092      	lsls	r2, r2, #2
    1bf8:	58d3      	ldr	r3, [r2, r3]
    1bfa:	68fa      	ldr	r2, [r7, #12]
    1bfc:	4013      	ands	r3, r2
    1bfe:	d00f      	beq.n	1c20 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1c00:	693a      	ldr	r2, [r7, #16]
    1c02:	697b      	ldr	r3, [r7, #20]
    1c04:	009b      	lsls	r3, r3, #2
    1c06:	18d3      	adds	r3, r2, r3
    1c08:	3304      	adds	r3, #4
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	693a      	ldr	r2, [r7, #16]
    1c0e:	0010      	movs	r0, r2
    1c10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1c12:	693b      	ldr	r3, [r7, #16]
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	4a08      	ldr	r2, [pc, #32]	; (1c38 <_tcc_interrupt_handler+0x78>)
    1c18:	6979      	ldr	r1, [r7, #20]
    1c1a:	0089      	lsls	r1, r1, #2
    1c1c:	588a      	ldr	r2, [r1, r2]
    1c1e:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1c20:	697b      	ldr	r3, [r7, #20]
    1c22:	3301      	adds	r3, #1
    1c24:	617b      	str	r3, [r7, #20]
    1c26:	697b      	ldr	r3, [r7, #20]
    1c28:	2b0b      	cmp	r3, #11
    1c2a:	dde2      	ble.n	1bf2 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    1c2c:	46c0      	nop			; (mov r8, r8)
    1c2e:	46bd      	mov	sp, r7
    1c30:	b006      	add	sp, #24
    1c32:	bd80      	pop	{r7, pc}
    1c34:	200000c0 	.word	0x200000c0
    1c38:	0000571c 	.word	0x0000571c

00001c3c <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c3c:	b580      	push	{r7, lr}
    1c3e:	af00      	add	r7, sp, #0
    1c40:	2000      	movs	r0, #0
    1c42:	4b02      	ldr	r3, [pc, #8]	; (1c4c <TC3_Handler+0x10>)
    1c44:	4798      	blx	r3
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	46bd      	mov	sp, r7
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	00001c79 	.word	0x00001c79

00001c50 <TC4_Handler>:
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
    1c54:	2001      	movs	r0, #1
    1c56:	4b02      	ldr	r3, [pc, #8]	; (1c60 <TC4_Handler+0x10>)
    1c58:	4798      	blx	r3
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	00001c79 	.word	0x00001c79

00001c64 <TC5_Handler>:
    1c64:	b580      	push	{r7, lr}
    1c66:	af00      	add	r7, sp, #0
    1c68:	2002      	movs	r0, #2
    1c6a:	4b02      	ldr	r3, [pc, #8]	; (1c74 <TC5_Handler+0x10>)
    1c6c:	4798      	blx	r3
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	46bd      	mov	sp, r7
    1c72:	bd80      	pop	{r7, pc}
    1c74:	00001c79 	.word	0x00001c79

00001c78 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b084      	sub	sp, #16
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	0002      	movs	r2, r0
    1c80:	1dfb      	adds	r3, r7, #7
    1c82:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1c84:	1dfb      	adds	r3, r7, #7
    1c86:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c88:	4b28      	ldr	r3, [pc, #160]	; (1d2c <_tc_interrupt_handler+0xb4>)
    1c8a:	0092      	lsls	r2, r2, #2
    1c8c:	58d3      	ldr	r3, [r2, r3]
    1c8e:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c90:	68fb      	ldr	r3, [r7, #12]
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	7b9b      	ldrb	r3, [r3, #14]
    1c96:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1c98:	68fa      	ldr	r2, [r7, #12]
    1c9a:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c9c:	4013      	ands	r3, r2
    1c9e:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ca4:	230b      	movs	r3, #11
    1ca6:	18fb      	adds	r3, r7, r3
    1ca8:	400a      	ands	r2, r1
    1caa:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1cac:	230b      	movs	r3, #11
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	781b      	ldrb	r3, [r3, #0]
    1cb2:	2201      	movs	r2, #1
    1cb4:	4013      	ands	r3, r2
    1cb6:	d008      	beq.n	1cca <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1cb8:	68fb      	ldr	r3, [r7, #12]
    1cba:	689b      	ldr	r3, [r3, #8]
    1cbc:	68fa      	ldr	r2, [r7, #12]
    1cbe:	0010      	movs	r0, r2
    1cc0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1cc2:	68fb      	ldr	r3, [r7, #12]
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	2201      	movs	r2, #1
    1cc8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1cca:	230b      	movs	r3, #11
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	781b      	ldrb	r3, [r3, #0]
    1cd0:	2202      	movs	r2, #2
    1cd2:	4013      	ands	r3, r2
    1cd4:	d008      	beq.n	1ce8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1cd6:	68fb      	ldr	r3, [r7, #12]
    1cd8:	68db      	ldr	r3, [r3, #12]
    1cda:	68fa      	ldr	r2, [r7, #12]
    1cdc:	0010      	movs	r0, r2
    1cde:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1ce0:	68fb      	ldr	r3, [r7, #12]
    1ce2:	681b      	ldr	r3, [r3, #0]
    1ce4:	2202      	movs	r2, #2
    1ce6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ce8:	230b      	movs	r3, #11
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	2210      	movs	r2, #16
    1cf0:	4013      	ands	r3, r2
    1cf2:	d008      	beq.n	1d06 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	691b      	ldr	r3, [r3, #16]
    1cf8:	68fa      	ldr	r2, [r7, #12]
    1cfa:	0010      	movs	r0, r2
    1cfc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	2210      	movs	r2, #16
    1d04:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1d06:	230b      	movs	r3, #11
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	2220      	movs	r2, #32
    1d0e:	4013      	ands	r3, r2
    1d10:	d008      	beq.n	1d24 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1d12:	68fb      	ldr	r3, [r7, #12]
    1d14:	695b      	ldr	r3, [r3, #20]
    1d16:	68fa      	ldr	r2, [r7, #12]
    1d18:	0010      	movs	r0, r2
    1d1a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	2220      	movs	r2, #32
    1d22:	739a      	strb	r2, [r3, #14]
	}
}
    1d24:	46c0      	nop			; (mov r8, r8)
    1d26:	46bd      	mov	sp, r7
    1d28:	b004      	add	sp, #16
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	200000cc 	.word	0x200000cc

00001d30 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b082      	sub	sp, #8
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	2280      	movs	r2, #128	; 0x80
    1d3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	2200      	movs	r2, #0
    1d42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	2201      	movs	r2, #1
    1d48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	2200      	movs	r2, #0
    1d4e:	70da      	strb	r2, [r3, #3]
}
    1d50:	46c0      	nop			; (mov r8, r8)
    1d52:	46bd      	mov	sp, r7
    1d54:	b002      	add	sp, #8
    1d56:	bd80      	pop	{r7, pc}

00001d58 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b084      	sub	sp, #16
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	0002      	movs	r2, r0
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d64:	230f      	movs	r3, #15
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	1dfa      	adds	r2, r7, #7
    1d6a:	7812      	ldrb	r2, [r2, #0]
    1d6c:	09d2      	lsrs	r2, r2, #7
    1d6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d70:	230e      	movs	r3, #14
    1d72:	18fb      	adds	r3, r7, r3
    1d74:	1dfa      	adds	r2, r7, #7
    1d76:	7812      	ldrb	r2, [r2, #0]
    1d78:	0952      	lsrs	r2, r2, #5
    1d7a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d7c:	4b0d      	ldr	r3, [pc, #52]	; (1db4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d7e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1d80:	230f      	movs	r3, #15
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d10f      	bne.n	1daa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d8a:	230f      	movs	r3, #15
    1d8c:	18fb      	adds	r3, r7, r3
    1d8e:	781b      	ldrb	r3, [r3, #0]
    1d90:	009b      	lsls	r3, r3, #2
    1d92:	2210      	movs	r2, #16
    1d94:	4694      	mov	ip, r2
    1d96:	44bc      	add	ip, r7
    1d98:	4463      	add	r3, ip
    1d9a:	3b08      	subs	r3, #8
    1d9c:	681a      	ldr	r2, [r3, #0]
    1d9e:	230e      	movs	r3, #14
    1da0:	18fb      	adds	r3, r7, r3
    1da2:	781b      	ldrb	r3, [r3, #0]
    1da4:	01db      	lsls	r3, r3, #7
    1da6:	18d3      	adds	r3, r2, r3
    1da8:	e000      	b.n	1dac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1daa:	2300      	movs	r3, #0
	}
}
    1dac:	0018      	movs	r0, r3
    1dae:	46bd      	mov	sp, r7
    1db0:	b004      	add	sp, #16
    1db2:	bd80      	pop	{r7, pc}
    1db4:	41004400 	.word	0x41004400

00001db8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	0002      	movs	r2, r0
    1dc0:	1dfb      	adds	r3, r7, #7
    1dc2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1dc4:	1dfb      	adds	r3, r7, #7
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	0018      	movs	r0, r3
    1dca:	4b03      	ldr	r3, [pc, #12]	; (1dd8 <port_get_group_from_gpio_pin+0x20>)
    1dcc:	4798      	blx	r3
    1dce:	0003      	movs	r3, r0
}
    1dd0:	0018      	movs	r0, r3
    1dd2:	46bd      	mov	sp, r7
    1dd4:	b002      	add	sp, #8
    1dd6:	bd80      	pop	{r7, pc}
    1dd8:	00001d59 	.word	0x00001d59

00001ddc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b084      	sub	sp, #16
    1de0:	af00      	add	r7, sp, #0
    1de2:	0002      	movs	r2, r0
    1de4:	1dfb      	adds	r3, r7, #7
    1de6:	701a      	strb	r2, [r3, #0]
    1de8:	1dbb      	adds	r3, r7, #6
    1dea:	1c0a      	adds	r2, r1, #0
    1dec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dee:	1dfb      	adds	r3, r7, #7
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	0018      	movs	r0, r3
    1df4:	4b0d      	ldr	r3, [pc, #52]	; (1e2c <port_pin_set_output_level+0x50>)
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
    1dfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dfc:	1dfb      	adds	r3, r7, #7
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	221f      	movs	r2, #31
    1e02:	4013      	ands	r3, r2
    1e04:	2201      	movs	r2, #1
    1e06:	409a      	lsls	r2, r3
    1e08:	0013      	movs	r3, r2
    1e0a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1e0c:	1dbb      	adds	r3, r7, #6
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d003      	beq.n	1e1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1e14:	68fb      	ldr	r3, [r7, #12]
    1e16:	68ba      	ldr	r2, [r7, #8]
    1e18:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1e1a:	e002      	b.n	1e22 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e1c:	68fb      	ldr	r3, [r7, #12]
    1e1e:	68ba      	ldr	r2, [r7, #8]
    1e20:	615a      	str	r2, [r3, #20]
	}
}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	46bd      	mov	sp, r7
    1e26:	b004      	add	sp, #16
    1e28:	bd80      	pop	{r7, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	00001db9 	.word	0x00001db9

00001e30 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b082      	sub	sp, #8
    1e34:	af00      	add	r7, sp, #0
    1e36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	701a      	strb	r2, [r3, #0]
}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	46bd      	mov	sp, r7
    1e42:	b002      	add	sp, #8
    1e44:	bd80      	pop	{r7, pc}
    1e46:	46c0      	nop			; (mov r8, r8)

00001e48 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b082      	sub	sp, #8
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	0002      	movs	r2, r0
    1e50:	6039      	str	r1, [r7, #0]
    1e52:	1dfb      	adds	r3, r7, #7
    1e54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1e56:	1dfb      	adds	r3, r7, #7
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b01      	cmp	r3, #1
    1e5c:	d00a      	beq.n	1e74 <system_apb_clock_set_mask+0x2c>
    1e5e:	2b02      	cmp	r3, #2
    1e60:	d00f      	beq.n	1e82 <system_apb_clock_set_mask+0x3a>
    1e62:	2b00      	cmp	r3, #0
    1e64:	d114      	bne.n	1e90 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e66:	4b0e      	ldr	r3, [pc, #56]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e68:	4a0d      	ldr	r2, [pc, #52]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e6a:	6991      	ldr	r1, [r2, #24]
    1e6c:	683a      	ldr	r2, [r7, #0]
    1e6e:	430a      	orrs	r2, r1
    1e70:	619a      	str	r2, [r3, #24]
			break;
    1e72:	e00f      	b.n	1e94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1e74:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e76:	4a0a      	ldr	r2, [pc, #40]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e78:	69d1      	ldr	r1, [r2, #28]
    1e7a:	683a      	ldr	r2, [r7, #0]
    1e7c:	430a      	orrs	r2, r1
    1e7e:	61da      	str	r2, [r3, #28]
			break;
    1e80:	e008      	b.n	1e94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1e82:	4b07      	ldr	r3, [pc, #28]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e84:	4a06      	ldr	r2, [pc, #24]	; (1ea0 <system_apb_clock_set_mask+0x58>)
    1e86:	6a11      	ldr	r1, [r2, #32]
    1e88:	683a      	ldr	r2, [r7, #0]
    1e8a:	430a      	orrs	r2, r1
    1e8c:	621a      	str	r2, [r3, #32]
			break;
    1e8e:	e001      	b.n	1e94 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1e90:	2317      	movs	r3, #23
    1e92:	e000      	b.n	1e96 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1e94:	2300      	movs	r3, #0
}
    1e96:	0018      	movs	r0, r3
    1e98:	46bd      	mov	sp, r7
    1e9a:	b002      	add	sp, #8
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	40000400 	.word	0x40000400

00001ea4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1ea4:	b580      	push	{r7, lr}
    1ea6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ea8:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <system_is_debugger_present+0x1c>)
    1eaa:	789b      	ldrb	r3, [r3, #2]
    1eac:	b2db      	uxtb	r3, r3
    1eae:	001a      	movs	r2, r3
    1eb0:	2302      	movs	r3, #2
    1eb2:	4013      	ands	r3, r2
    1eb4:	1e5a      	subs	r2, r3, #1
    1eb6:	4193      	sbcs	r3, r2
    1eb8:	b2db      	uxtb	r3, r3
}
    1eba:	0018      	movs	r0, r3
    1ebc:	46bd      	mov	sp, r7
    1ebe:	bd80      	pop	{r7, pc}
    1ec0:	41002000 	.word	0x41002000

00001ec4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b084      	sub	sp, #16
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1ed2:	68fb      	ldr	r3, [r7, #12]
    1ed4:	7e1b      	ldrb	r3, [r3, #24]
    1ed6:	b2db      	uxtb	r3, r3
    1ed8:	001a      	movs	r2, r3
    1eda:	2301      	movs	r3, #1
    1edc:	4013      	ands	r3, r2
    1ede:	1e5a      	subs	r2, r3, #1
    1ee0:	4193      	sbcs	r3, r2
    1ee2:	b2db      	uxtb	r3, r3
}
    1ee4:	0018      	movs	r0, r3
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}

00001eec <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b084      	sub	sp, #16
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	681b      	ldr	r3, [r3, #0]
    1ef8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	7e1b      	ldrb	r3, [r3, #24]
    1efe:	b2db      	uxtb	r3, r3
    1f00:	001a      	movs	r2, r3
    1f02:	2304      	movs	r3, #4
    1f04:	4013      	ands	r3, r2
    1f06:	1e5a      	subs	r2, r3, #1
    1f08:	4193      	sbcs	r3, r2
    1f0a:	b2db      	uxtb	r3, r3
}
    1f0c:	0018      	movs	r0, r3
    1f0e:	46bd      	mov	sp, r7
    1f10:	b004      	add	sp, #16
    1f12:	bd80      	pop	{r7, pc}

00001f14 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b084      	sub	sp, #16
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	000a      	movs	r2, r1
    1f1e:	1cbb      	adds	r3, r7, #2
    1f20:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	0018      	movs	r0, r3
    1f2c:	4b0a      	ldr	r3, [pc, #40]	; (1f58 <spi_write+0x44>)
    1f2e:	4798      	blx	r3
    1f30:	0003      	movs	r3, r0
    1f32:	001a      	movs	r2, r3
    1f34:	2301      	movs	r3, #1
    1f36:	4053      	eors	r3, r2
    1f38:	b2db      	uxtb	r3, r3
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d001      	beq.n	1f42 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    1f3e:	2305      	movs	r3, #5
    1f40:	e006      	b.n	1f50 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f42:	1cbb      	adds	r3, r7, #2
    1f44:	881b      	ldrh	r3, [r3, #0]
    1f46:	05db      	lsls	r3, r3, #23
    1f48:	0dda      	lsrs	r2, r3, #23
    1f4a:	68fb      	ldr	r3, [r7, #12]
    1f4c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1f4e:	2300      	movs	r3, #0
}
    1f50:	0018      	movs	r0, r3
    1f52:	46bd      	mov	sp, r7
    1f54:	b004      	add	sp, #16
    1f56:	bd80      	pop	{r7, pc}
    1f58:	00001ec5 	.word	0x00001ec5

00001f5c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b084      	sub	sp, #16
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    1f64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	681b      	ldr	r3, [r3, #0]
    1f6a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	0018      	movs	r0, r3
    1f70:	4b1b      	ldr	r3, [pc, #108]	; (1fe0 <spi_read+0x84>)
    1f72:	4798      	blx	r3
    1f74:	0003      	movs	r3, r0
    1f76:	001a      	movs	r2, r3
    1f78:	2301      	movs	r3, #1
    1f7a:	4053      	eors	r3, r2
    1f7c:	b2db      	uxtb	r3, r3
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d001      	beq.n	1f86 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1f82:	2310      	movs	r3, #16
    1f84:	e027      	b.n	1fd6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1f86:	230f      	movs	r3, #15
    1f88:	18fb      	adds	r3, r7, r3
    1f8a:	2200      	movs	r2, #0
    1f8c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f8e:	68bb      	ldr	r3, [r7, #8]
    1f90:	8b5b      	ldrh	r3, [r3, #26]
    1f92:	b29b      	uxth	r3, r3
    1f94:	001a      	movs	r2, r3
    1f96:	2304      	movs	r3, #4
    1f98:	4013      	ands	r3, r2
    1f9a:	d006      	beq.n	1faa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1f9c:	230f      	movs	r3, #15
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	221e      	movs	r2, #30
    1fa2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1fa4:	68bb      	ldr	r3, [r7, #8]
    1fa6:	2204      	movs	r2, #4
    1fa8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	799b      	ldrb	r3, [r3, #6]
    1fae:	2b01      	cmp	r3, #1
    1fb0:	d108      	bne.n	1fc4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1fb2:	68bb      	ldr	r3, [r7, #8]
    1fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fb6:	b29b      	uxth	r3, r3
    1fb8:	05db      	lsls	r3, r3, #23
    1fba:	0ddb      	lsrs	r3, r3, #23
    1fbc:	b29a      	uxth	r2, r3
    1fbe:	683b      	ldr	r3, [r7, #0]
    1fc0:	801a      	strh	r2, [r3, #0]
    1fc2:	e005      	b.n	1fd0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1fc4:	68bb      	ldr	r3, [r7, #8]
    1fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fc8:	b2db      	uxtb	r3, r3
    1fca:	b29a      	uxth	r2, r3
    1fcc:	683b      	ldr	r3, [r7, #0]
    1fce:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1fd0:	230f      	movs	r3, #15
    1fd2:	18fb      	adds	r3, r7, r3
    1fd4:	781b      	ldrb	r3, [r3, #0]
}
    1fd6:	0018      	movs	r0, r3
    1fd8:	46bd      	mov	sp, r7
    1fda:	b004      	add	sp, #16
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	00001eed 	.word	0x00001eed

00001fe4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1fe4:	b590      	push	{r4, r7, lr}
    1fe6:	b093      	sub	sp, #76	; 0x4c
    1fe8:	af00      	add	r7, sp, #0
    1fea:	6078      	str	r0, [r7, #4]
    1fec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1ffa:	231c      	movs	r3, #28
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	0018      	movs	r0, r3
    2000:	4b85      	ldr	r3, [pc, #532]	; (2218 <STACK_SIZE+0x218>)
    2002:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2004:	231c      	movs	r3, #28
    2006:	18fb      	adds	r3, r7, r3
    2008:	2200      	movs	r2, #0
    200a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    200c:	683b      	ldr	r3, [r7, #0]
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	2b00      	cmp	r3, #0
    2012:	d103      	bne.n	201c <STACK_SIZE+0x1c>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2014:	231c      	movs	r3, #28
    2016:	18fb      	adds	r3, r7, r3
    2018:	2200      	movs	r2, #0
    201a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    201c:	683b      	ldr	r3, [r7, #0]
    201e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2020:	230c      	movs	r3, #12
    2022:	18fb      	adds	r3, r7, r3
    2024:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    202a:	230c      	movs	r3, #12
    202c:	18fb      	adds	r3, r7, r3
    202e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2030:	683b      	ldr	r3, [r7, #0]
    2032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2034:	230c      	movs	r3, #12
    2036:	18fb      	adds	r3, r7, r3
    2038:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    203a:	683b      	ldr	r3, [r7, #0]
    203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    203e:	230c      	movs	r3, #12
    2040:	18fb      	adds	r3, r7, r3
    2042:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2044:	2347      	movs	r3, #71	; 0x47
    2046:	18fb      	adds	r3, r7, r3
    2048:	2200      	movs	r2, #0
    204a:	701a      	strb	r2, [r3, #0]
    204c:	e02c      	b.n	20a8 <STACK_SIZE+0xa8>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    204e:	2347      	movs	r3, #71	; 0x47
    2050:	18fb      	adds	r3, r7, r3
    2052:	781a      	ldrb	r2, [r3, #0]
    2054:	230c      	movs	r3, #12
    2056:	18fb      	adds	r3, r7, r3
    2058:	0092      	lsls	r2, r2, #2
    205a:	58d3      	ldr	r3, [r2, r3]
    205c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2060:	2b00      	cmp	r3, #0
    2062:	d109      	bne.n	2078 <STACK_SIZE+0x78>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2064:	2347      	movs	r3, #71	; 0x47
    2066:	18fb      	adds	r3, r7, r3
    2068:	781a      	ldrb	r2, [r3, #0]
    206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    206c:	0011      	movs	r1, r2
    206e:	0018      	movs	r0, r3
    2070:	4b6a      	ldr	r3, [pc, #424]	; (221c <STACK_SIZE+0x21c>)
    2072:	4798      	blx	r3
    2074:	0003      	movs	r3, r0
    2076:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    207a:	3301      	adds	r3, #1
    207c:	d00d      	beq.n	209a <STACK_SIZE+0x9a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2080:	b2da      	uxtb	r2, r3
    2082:	231c      	movs	r3, #28
    2084:	18fb      	adds	r3, r7, r3
    2086:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    208a:	0c1b      	lsrs	r3, r3, #16
    208c:	b2db      	uxtb	r3, r3
    208e:	221c      	movs	r2, #28
    2090:	18ba      	adds	r2, r7, r2
    2092:	0011      	movs	r1, r2
    2094:	0018      	movs	r0, r3
    2096:	4b62      	ldr	r3, [pc, #392]	; (2220 <STACK_SIZE+0x220>)
    2098:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    209a:	2347      	movs	r3, #71	; 0x47
    209c:	18fb      	adds	r3, r7, r3
    209e:	781a      	ldrb	r2, [r3, #0]
    20a0:	2347      	movs	r3, #71	; 0x47
    20a2:	18fb      	adds	r3, r7, r3
    20a4:	3201      	adds	r2, #1
    20a6:	701a      	strb	r2, [r3, #0]
    20a8:	2347      	movs	r3, #71	; 0x47
    20aa:	18fb      	adds	r3, r7, r3
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	2b03      	cmp	r3, #3
    20b0:	d9cd      	bls.n	204e <STACK_SIZE+0x4e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    20b2:	683b      	ldr	r3, [r7, #0]
    20b4:	781a      	ldrb	r2, [r3, #0]
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    20ba:	683b      	ldr	r3, [r7, #0]
    20bc:	7c1a      	ldrb	r2, [r3, #16]
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    20c2:	683b      	ldr	r3, [r7, #0]
    20c4:	7c9a      	ldrb	r2, [r3, #18]
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    20ca:	683b      	ldr	r3, [r7, #0]
    20cc:	7d1a      	ldrb	r2, [r3, #20]
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    20d2:	230a      	movs	r3, #10
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	2200      	movs	r2, #0
    20d8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    20da:	2300      	movs	r3, #0
    20dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    20de:	2300      	movs	r3, #0
    20e0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    20e2:	683b      	ldr	r3, [r7, #0]
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2b01      	cmp	r3, #1
    20e8:	d129      	bne.n	213e <STACK_SIZE+0x13e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	0018      	movs	r0, r3
    20f0:	4b4c      	ldr	r3, [pc, #304]	; (2224 <STACK_SIZE+0x224>)
    20f2:	4798      	blx	r3
    20f4:	0003      	movs	r3, r0
    20f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    20fa:	3314      	adds	r3, #20
    20fc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    20fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2100:	b2db      	uxtb	r3, r3
    2102:	0018      	movs	r0, r3
    2104:	4b48      	ldr	r3, [pc, #288]	; (2228 <STACK_SIZE+0x228>)
    2106:	4798      	blx	r3
    2108:	0003      	movs	r3, r0
    210a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    210c:	683b      	ldr	r3, [r7, #0]
    210e:	699b      	ldr	r3, [r3, #24]
    2110:	2223      	movs	r2, #35	; 0x23
    2112:	18bc      	adds	r4, r7, r2
    2114:	220a      	movs	r2, #10
    2116:	18ba      	adds	r2, r7, r2
    2118:	6a79      	ldr	r1, [r7, #36]	; 0x24
    211a:	0018      	movs	r0, r3
    211c:	4b43      	ldr	r3, [pc, #268]	; (222c <STACK_SIZE+0x22c>)
    211e:	4798      	blx	r3
    2120:	0003      	movs	r3, r0
    2122:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2124:	2323      	movs	r3, #35	; 0x23
    2126:	18fb      	adds	r3, r7, r3
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <STACK_SIZE+0x132>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    212e:	2317      	movs	r3, #23
    2130:	e06d      	b.n	220e <STACK_SIZE+0x20e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2132:	230a      	movs	r3, #10
    2134:	18fb      	adds	r3, r7, r3
    2136:	881b      	ldrh	r3, [r3, #0]
    2138:	b2da      	uxtb	r2, r3
    213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    213c:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    213e:	683b      	ldr	r3, [r7, #0]
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d11a      	bne.n	217c <STACK_SIZE+0x17c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    2146:	683b      	ldr	r3, [r7, #0]
    2148:	699b      	ldr	r3, [r3, #24]
    214a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    214c:	683b      	ldr	r3, [r7, #0]
    214e:	8b9b      	ldrh	r3, [r3, #28]
    2150:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2156:	683a      	ldr	r2, [r7, #0]
    2158:	7f92      	ldrb	r2, [r2, #30]
    215a:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    215c:	683a      	ldr	r2, [r7, #0]
    215e:	7fd2      	ldrb	r2, [r2, #31]
    2160:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2162:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2164:	431a      	orrs	r2, r3
    2166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2168:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    216a:	683b      	ldr	r3, [r7, #0]
    216c:	2220      	movs	r2, #32
    216e:	5c9b      	ldrb	r3, [r3, r2]
    2170:	2b00      	cmp	r3, #0
    2172:	d003      	beq.n	217c <STACK_SIZE+0x17c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2176:	2240      	movs	r2, #64	; 0x40
    2178:	4313      	orrs	r3, r2
    217a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    217c:	683b      	ldr	r3, [r7, #0]
    217e:	685b      	ldr	r3, [r3, #4]
    2180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2182:	4313      	orrs	r3, r2
    2184:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    2186:	683b      	ldr	r3, [r7, #0]
    2188:	689b      	ldr	r3, [r3, #8]
    218a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    218c:	4313      	orrs	r3, r2
    218e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2190:	683b      	ldr	r3, [r7, #0]
    2192:	68db      	ldr	r3, [r3, #12]
    2194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2196:	4313      	orrs	r3, r2
    2198:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    219a:	683b      	ldr	r3, [r7, #0]
    219c:	7c1b      	ldrb	r3, [r3, #16]
    219e:	001a      	movs	r2, r3
    21a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21a2:	4313      	orrs	r3, r2
    21a4:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	7c5b      	ldrb	r3, [r3, #17]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d103      	bne.n	21b6 <STACK_SIZE+0x1b6>
    21ae:	4b20      	ldr	r3, [pc, #128]	; (2230 <STACK_SIZE+0x230>)
    21b0:	4798      	blx	r3
    21b2:	1e03      	subs	r3, r0, #0
    21b4:	d003      	beq.n	21be <STACK_SIZE+0x1be>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    21b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21b8:	2280      	movs	r2, #128	; 0x80
    21ba:	4313      	orrs	r3, r2
    21bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    21be:	683b      	ldr	r3, [r7, #0]
    21c0:	7c9b      	ldrb	r3, [r3, #18]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d004      	beq.n	21d0 <STACK_SIZE+0x1d0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    21c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21c8:	2280      	movs	r2, #128	; 0x80
    21ca:	0292      	lsls	r2, r2, #10
    21cc:	4313      	orrs	r3, r2
    21ce:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    21d0:	683b      	ldr	r3, [r7, #0]
    21d2:	7cdb      	ldrb	r3, [r3, #19]
    21d4:	2b00      	cmp	r3, #0
    21d6:	d004      	beq.n	21e2 <STACK_SIZE+0x1e2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    21d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21da:	2280      	movs	r2, #128	; 0x80
    21dc:	0092      	lsls	r2, r2, #2
    21de:	4313      	orrs	r3, r2
    21e0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    21e2:	683b      	ldr	r3, [r7, #0]
    21e4:	7d1b      	ldrb	r3, [r3, #20]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d004      	beq.n	21f4 <STACK_SIZE+0x1f4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    21ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21ec:	2280      	movs	r2, #128	; 0x80
    21ee:	0192      	lsls	r2, r2, #6
    21f0:	4313      	orrs	r3, r2
    21f2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    21f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21f6:	681a      	ldr	r2, [r3, #0]
    21f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21fa:	431a      	orrs	r2, r3
    21fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21fe:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2202:	685a      	ldr	r2, [r3, #4]
    2204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2206:	431a      	orrs	r2, r3
    2208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    220a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    220c:	2300      	movs	r3, #0
}
    220e:	0018      	movs	r0, r3
    2210:	46bd      	mov	sp, r7
    2212:	b013      	add	sp, #76	; 0x4c
    2214:	bd90      	pop	{r4, r7, pc}
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	00001d31 	.word	0x00001d31
    221c:	00002b99 	.word	0x00002b99
    2220:	00003c39 	.word	0x00003c39
    2224:	00002d55 	.word	0x00002d55
    2228:	00003a71 	.word	0x00003a71
    222c:	00002a91 	.word	0x00002a91
    2230:	00001ea5 	.word	0x00001ea5

00002234 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2234:	b590      	push	{r4, r7, lr}
    2236:	b08b      	sub	sp, #44	; 0x2c
    2238:	af00      	add	r7, sp, #0
    223a:	60f8      	str	r0, [r7, #12]
    223c:	60b9      	str	r1, [r7, #8]
    223e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2240:	68fb      	ldr	r3, [r7, #12]
    2242:	68ba      	ldr	r2, [r7, #8]
    2244:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    2246:	68fb      	ldr	r3, [r7, #12]
    2248:	681b      	ldr	r3, [r3, #0]
    224a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    224c:	6a3b      	ldr	r3, [r7, #32]
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	2202      	movs	r2, #2
    2252:	4013      	ands	r3, r2
    2254:	d001      	beq.n	225a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    2256:	231c      	movs	r3, #28
    2258:	e0a6      	b.n	23a8 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    225a:	6a3b      	ldr	r3, [r7, #32]
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	2201      	movs	r2, #1
    2260:	4013      	ands	r3, r2
    2262:	d001      	beq.n	2268 <spi_init+0x34>
		return STATUS_BUSY;
    2264:	2305      	movs	r3, #5
    2266:	e09f      	b.n	23a8 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	681b      	ldr	r3, [r3, #0]
    226c:	0018      	movs	r0, r3
    226e:	4b50      	ldr	r3, [pc, #320]	; (23b0 <spi_init+0x17c>)
    2270:	4798      	blx	r3
    2272:	0003      	movs	r3, r0
    2274:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2276:	69fb      	ldr	r3, [r7, #28]
    2278:	3302      	adds	r3, #2
    227a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    227c:	69fb      	ldr	r3, [r7, #28]
    227e:	3314      	adds	r3, #20
    2280:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2282:	2201      	movs	r2, #1
    2284:	69bb      	ldr	r3, [r7, #24]
    2286:	409a      	lsls	r2, r3
    2288:	0013      	movs	r3, r2
    228a:	0019      	movs	r1, r3
    228c:	2002      	movs	r0, #2
    228e:	4b49      	ldr	r3, [pc, #292]	; (23b4 <spi_init+0x180>)
    2290:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2292:	2310      	movs	r3, #16
    2294:	18fb      	adds	r3, r7, r3
    2296:	0018      	movs	r0, r3
    2298:	4b47      	ldr	r3, [pc, #284]	; (23b8 <spi_init+0x184>)
    229a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	2224      	movs	r2, #36	; 0x24
    22a0:	5c9a      	ldrb	r2, [r3, r2]
    22a2:	2310      	movs	r3, #16
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    22a8:	697b      	ldr	r3, [r7, #20]
    22aa:	b2db      	uxtb	r3, r3
    22ac:	2210      	movs	r2, #16
    22ae:	18ba      	adds	r2, r7, r2
    22b0:	0011      	movs	r1, r2
    22b2:	0018      	movs	r0, r3
    22b4:	4b41      	ldr	r3, [pc, #260]	; (23bc <spi_init+0x188>)
    22b6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    22b8:	697b      	ldr	r3, [r7, #20]
    22ba:	b2db      	uxtb	r3, r3
    22bc:	0018      	movs	r0, r3
    22be:	4b40      	ldr	r3, [pc, #256]	; (23c0 <spi_init+0x18c>)
    22c0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	2224      	movs	r2, #36	; 0x24
    22c6:	5c9b      	ldrb	r3, [r3, r2]
    22c8:	2100      	movs	r1, #0
    22ca:	0018      	movs	r0, r3
    22cc:	4b3d      	ldr	r3, [pc, #244]	; (23c4 <spi_init+0x190>)
    22ce:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b01      	cmp	r3, #1
    22d6:	d105      	bne.n	22e4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    22d8:	6a3b      	ldr	r3, [r7, #32]
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	220c      	movs	r2, #12
    22de:	431a      	orrs	r2, r3
    22e0:	6a3b      	ldr	r3, [r7, #32]
    22e2:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d105      	bne.n	22f8 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    22ec:	6a3b      	ldr	r3, [r7, #32]
    22ee:	681b      	ldr	r3, [r3, #0]
    22f0:	2208      	movs	r2, #8
    22f2:	431a      	orrs	r2, r3
    22f4:	6a3b      	ldr	r3, [r7, #32]
    22f6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    22f8:	2327      	movs	r3, #39	; 0x27
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	2200      	movs	r2, #0
    22fe:	701a      	strb	r2, [r3, #0]
    2300:	e010      	b.n	2324 <spi_init+0xf0>
		module->callback[i]        = NULL;
    2302:	2327      	movs	r3, #39	; 0x27
    2304:	18fb      	adds	r3, r7, r3
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	68fa      	ldr	r2, [r7, #12]
    230a:	3302      	adds	r3, #2
    230c:	009b      	lsls	r3, r3, #2
    230e:	18d3      	adds	r3, r2, r3
    2310:	3304      	adds	r3, #4
    2312:	2200      	movs	r2, #0
    2314:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2316:	2327      	movs	r3, #39	; 0x27
    2318:	18fb      	adds	r3, r7, r3
    231a:	781a      	ldrb	r2, [r3, #0]
    231c:	2327      	movs	r3, #39	; 0x27
    231e:	18fb      	adds	r3, r7, r3
    2320:	3201      	adds	r2, #1
    2322:	701a      	strb	r2, [r3, #0]
    2324:	2327      	movs	r3, #39	; 0x27
    2326:	18fb      	adds	r3, r7, r3
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	2b06      	cmp	r3, #6
    232c:	d9e9      	bls.n	2302 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	2200      	movs	r2, #0
    2332:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	2200      	movs	r2, #0
    2338:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    233a:	68fb      	ldr	r3, [r7, #12]
    233c:	2200      	movs	r2, #0
    233e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2340:	68fb      	ldr	r3, [r7, #12]
    2342:	2200      	movs	r2, #0
    2344:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    2346:	68fb      	ldr	r3, [r7, #12]
    2348:	2236      	movs	r2, #54	; 0x36
    234a:	2100      	movs	r1, #0
    234c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	2237      	movs	r2, #55	; 0x37
    2352:	2100      	movs	r1, #0
    2354:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	2238      	movs	r2, #56	; 0x38
    235a:	2100      	movs	r1, #0
    235c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    235e:	68fb      	ldr	r3, [r7, #12]
    2360:	2203      	movs	r2, #3
    2362:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    2364:	68fb      	ldr	r3, [r7, #12]
    2366:	2200      	movs	r2, #0
    2368:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	681b      	ldr	r3, [r3, #0]
    236e:	2213      	movs	r2, #19
    2370:	18bc      	adds	r4, r7, r2
    2372:	0018      	movs	r0, r3
    2374:	4b0e      	ldr	r3, [pc, #56]	; (23b0 <spi_init+0x17c>)
    2376:	4798      	blx	r3
    2378:	0003      	movs	r3, r0
    237a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    237c:	4a12      	ldr	r2, [pc, #72]	; (23c8 <spi_init+0x194>)
    237e:	2313      	movs	r3, #19
    2380:	18fb      	adds	r3, r7, r3
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	0011      	movs	r1, r2
    2386:	0018      	movs	r0, r3
    2388:	4b10      	ldr	r3, [pc, #64]	; (23cc <spi_init+0x198>)
    238a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    238c:	2313      	movs	r3, #19
    238e:	18fb      	adds	r3, r7, r3
    2390:	781a      	ldrb	r2, [r3, #0]
    2392:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <spi_init+0x19c>)
    2394:	0092      	lsls	r2, r2, #2
    2396:	68f9      	ldr	r1, [r7, #12]
    2398:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    239a:	687a      	ldr	r2, [r7, #4]
    239c:	68fb      	ldr	r3, [r7, #12]
    239e:	0011      	movs	r1, r2
    23a0:	0018      	movs	r0, r3
    23a2:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <spi_init+0x1a0>)
    23a4:	4798      	blx	r3
    23a6:	0003      	movs	r3, r0
}
    23a8:	0018      	movs	r0, r3
    23aa:	46bd      	mov	sp, r7
    23ac:	b00b      	add	sp, #44	; 0x2c
    23ae:	bd90      	pop	{r4, r7, pc}
    23b0:	00002d55 	.word	0x00002d55
    23b4:	00001e49 	.word	0x00001e49
    23b8:	00001e31 	.word	0x00001e31
    23bc:	0000394d 	.word	0x0000394d
    23c0:	00003991 	.word	0x00003991
    23c4:	00002b0d 	.word	0x00002b0d
    23c8:	0000276d 	.word	0x0000276d
    23cc:	00002db9 	.word	0x00002db9
    23d0:	200000dc 	.word	0x200000dc
    23d4:	00001fe5 	.word	0x00001fe5

000023d8 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    23d8:	b590      	push	{r4, r7, lr}
    23da:	b087      	sub	sp, #28
    23dc:	af00      	add	r7, sp, #0
    23de:	60f8      	str	r0, [r7, #12]
    23e0:	607a      	str	r2, [r7, #4]
    23e2:	230a      	movs	r3, #10
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	1c0a      	adds	r2, r1, #0
    23e8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	79db      	ldrb	r3, [r3, #7]
    23ee:	2201      	movs	r2, #1
    23f0:	4053      	eors	r3, r2
    23f2:	b2db      	uxtb	r3, r3
    23f4:	2b00      	cmp	r3, #0
    23f6:	d001      	beq.n	23fc <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    23f8:	231c      	movs	r3, #28
    23fa:	e084      	b.n	2506 <spi_transceive_wait+0x12e>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    23fc:	68fb      	ldr	r3, [r7, #12]
    23fe:	2238      	movs	r2, #56	; 0x38
    2400:	5c9b      	ldrb	r3, [r3, r2]
    2402:	b2db      	uxtb	r3, r3
    2404:	2b05      	cmp	r3, #5
    2406:	d101      	bne.n	240c <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2408:	2305      	movs	r3, #5
    240a:	e07c      	b.n	2506 <spi_transceive_wait+0x12e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    240c:	2315      	movs	r3, #21
    240e:	18fb      	adds	r3, r7, r3
    2410:	2200      	movs	r2, #0
    2412:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    2414:	68fb      	ldr	r3, [r7, #12]
    2416:	795b      	ldrb	r3, [r3, #5]
    2418:	2b00      	cmp	r3, #0
    241a:	d121      	bne.n	2460 <spi_transceive_wait+0x88>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    241c:	2316      	movs	r3, #22
    241e:	18fb      	adds	r3, r7, r3
    2420:	2200      	movs	r2, #0
    2422:	801a      	strh	r2, [r3, #0]
    2424:	e014      	b.n	2450 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
    2426:	68fb      	ldr	r3, [r7, #12]
    2428:	0018      	movs	r0, r3
    242a:	4b39      	ldr	r3, [pc, #228]	; (2510 <spi_transceive_wait+0x138>)
    242c:	4798      	blx	r3
    242e:	1e03      	subs	r3, r0, #0
    2430:	d115      	bne.n	245e <spi_transceive_wait+0x86>
				break;
			} else if (j == SPI_TIMEOUT) {
    2432:	2316      	movs	r3, #22
    2434:	18fb      	adds	r3, r7, r3
    2436:	881b      	ldrh	r3, [r3, #0]
    2438:	4a36      	ldr	r2, [pc, #216]	; (2514 <spi_transceive_wait+0x13c>)
    243a:	4293      	cmp	r3, r2
    243c:	d101      	bne.n	2442 <spi_transceive_wait+0x6a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    243e:	2312      	movs	r3, #18
    2440:	e061      	b.n	2506 <spi_transceive_wait+0x12e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2442:	2316      	movs	r3, #22
    2444:	18fb      	adds	r3, r7, r3
    2446:	881a      	ldrh	r2, [r3, #0]
    2448:	2316      	movs	r3, #22
    244a:	18fb      	adds	r3, r7, r3
    244c:	3201      	adds	r2, #1
    244e:	801a      	strh	r2, [r3, #0]
    2450:	2316      	movs	r3, #22
    2452:	18fb      	adds	r3, r7, r3
    2454:	881b      	ldrh	r3, [r3, #0]
    2456:	4a2f      	ldr	r2, [pc, #188]	; (2514 <spi_transceive_wait+0x13c>)
    2458:	4293      	cmp	r3, r2
    245a:	d9e4      	bls.n	2426 <spi_transceive_wait+0x4e>
    245c:	e000      	b.n	2460 <spi_transceive_wait+0x88>
			if (spi_is_ready_to_write(module)) {
				break;
    245e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    2460:	46c0      	nop			; (mov r8, r8)
    2462:	68fb      	ldr	r3, [r7, #12]
    2464:	0018      	movs	r0, r3
    2466:	4b2a      	ldr	r3, [pc, #168]	; (2510 <spi_transceive_wait+0x138>)
    2468:	4798      	blx	r3
    246a:	0003      	movs	r3, r0
    246c:	001a      	movs	r2, r3
    246e:	2301      	movs	r3, #1
    2470:	4053      	eors	r3, r2
    2472:	b2db      	uxtb	r3, r3
    2474:	2b00      	cmp	r3, #0
    2476:	d1f4      	bne.n	2462 <spi_transceive_wait+0x8a>
	}

	/* Write data */
	spi_write(module, tx_data);
    2478:	230a      	movs	r3, #10
    247a:	18fb      	adds	r3, r7, r3
    247c:	881a      	ldrh	r2, [r3, #0]
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	0011      	movs	r1, r2
    2482:	0018      	movs	r0, r3
    2484:	4b24      	ldr	r3, [pc, #144]	; (2518 <spi_transceive_wait+0x140>)
    2486:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    2488:	68fb      	ldr	r3, [r7, #12]
    248a:	795b      	ldrb	r3, [r3, #5]
    248c:	2b00      	cmp	r3, #0
    248e:	d121      	bne.n	24d4 <spi_transceive_wait+0xfc>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2490:	2316      	movs	r3, #22
    2492:	18fb      	adds	r3, r7, r3
    2494:	2200      	movs	r2, #0
    2496:	801a      	strh	r2, [r3, #0]
    2498:	e014      	b.n	24c4 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    249a:	68fb      	ldr	r3, [r7, #12]
    249c:	0018      	movs	r0, r3
    249e:	4b1f      	ldr	r3, [pc, #124]	; (251c <spi_transceive_wait+0x144>)
    24a0:	4798      	blx	r3
    24a2:	1e03      	subs	r3, r0, #0
    24a4:	d115      	bne.n	24d2 <spi_transceive_wait+0xfa>
				break;
			} else if (j == SPI_TIMEOUT) {
    24a6:	2316      	movs	r3, #22
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	881b      	ldrh	r3, [r3, #0]
    24ac:	4a19      	ldr	r2, [pc, #100]	; (2514 <spi_transceive_wait+0x13c>)
    24ae:	4293      	cmp	r3, r2
    24b0:	d101      	bne.n	24b6 <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    24b2:	2312      	movs	r3, #18
    24b4:	e027      	b.n	2506 <spi_transceive_wait+0x12e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    24b6:	2316      	movs	r3, #22
    24b8:	18fb      	adds	r3, r7, r3
    24ba:	881a      	ldrh	r2, [r3, #0]
    24bc:	2316      	movs	r3, #22
    24be:	18fb      	adds	r3, r7, r3
    24c0:	3201      	adds	r2, #1
    24c2:	801a      	strh	r2, [r3, #0]
    24c4:	2316      	movs	r3, #22
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	881b      	ldrh	r3, [r3, #0]
    24ca:	4a12      	ldr	r2, [pc, #72]	; (2514 <spi_transceive_wait+0x13c>)
    24cc:	4293      	cmp	r3, r2
    24ce:	d9e4      	bls.n	249a <spi_transceive_wait+0xc2>
    24d0:	e000      	b.n	24d4 <spi_transceive_wait+0xfc>
			if (spi_is_ready_to_read(module)) {
				break;
    24d2:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	68fb      	ldr	r3, [r7, #12]
    24d8:	0018      	movs	r0, r3
    24da:	4b10      	ldr	r3, [pc, #64]	; (251c <spi_transceive_wait+0x144>)
    24dc:	4798      	blx	r3
    24de:	0003      	movs	r3, r0
    24e0:	001a      	movs	r2, r3
    24e2:	2301      	movs	r3, #1
    24e4:	4053      	eors	r3, r2
    24e6:	b2db      	uxtb	r3, r3
    24e8:	2b00      	cmp	r3, #0
    24ea:	d1f4      	bne.n	24d6 <spi_transceive_wait+0xfe>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    24ec:	2315      	movs	r3, #21
    24ee:	18fc      	adds	r4, r7, r3
    24f0:	687a      	ldr	r2, [r7, #4]
    24f2:	68fb      	ldr	r3, [r7, #12]
    24f4:	0011      	movs	r1, r2
    24f6:	0018      	movs	r0, r3
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <spi_transceive_wait+0x148>)
    24fa:	4798      	blx	r3
    24fc:	0003      	movs	r3, r0
    24fe:	7023      	strb	r3, [r4, #0]

	return retval;
    2500:	2315      	movs	r3, #21
    2502:	18fb      	adds	r3, r7, r3
    2504:	781b      	ldrb	r3, [r3, #0]
}
    2506:	0018      	movs	r0, r3
    2508:	46bd      	mov	sp, r7
    250a:	b007      	add	sp, #28
    250c:	bd90      	pop	{r4, r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	00001ec5 	.word	0x00001ec5
    2514:	00002710 	.word	0x00002710
    2518:	00001f15 	.word	0x00001f15
    251c:	00001eed 	.word	0x00001eed
    2520:	00001f5d 	.word	0x00001f5d

00002524 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2524:	b580      	push	{r7, lr}
    2526:	b086      	sub	sp, #24
    2528:	af00      	add	r7, sp, #0
    252a:	60f8      	str	r0, [r7, #12]
    252c:	60b9      	str	r1, [r7, #8]
    252e:	1dfb      	adds	r3, r7, #7
    2530:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	795b      	ldrb	r3, [r3, #5]
    2536:	2b01      	cmp	r3, #1
    2538:	d001      	beq.n	253e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    253a:	2315      	movs	r3, #21
    253c:	e05c      	b.n	25f8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    253e:	68fb      	ldr	r3, [r7, #12]
    2540:	7a1b      	ldrb	r3, [r3, #8]
    2542:	2201      	movs	r2, #1
    2544:	4053      	eors	r3, r2
    2546:	b2db      	uxtb	r3, r3
    2548:	2b00      	cmp	r3, #0
    254a:	d054      	beq.n	25f6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    254c:	1dfb      	adds	r3, r7, #7
    254e:	781b      	ldrb	r3, [r3, #0]
    2550:	2b00      	cmp	r3, #0
    2552:	d04a      	beq.n	25ea <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    2554:	68bb      	ldr	r3, [r7, #8]
    2556:	785b      	ldrb	r3, [r3, #1]
    2558:	2b00      	cmp	r3, #0
    255a:	d03f      	beq.n	25dc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    255c:	68fb      	ldr	r3, [r7, #12]
    255e:	0018      	movs	r0, r3
    2560:	4b27      	ldr	r3, [pc, #156]	; (2600 <spi_select_slave+0xdc>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
    2566:	001a      	movs	r2, r3
    2568:	2301      	movs	r3, #1
    256a:	4053      	eors	r3, r2
    256c:	b2db      	uxtb	r3, r3
    256e:	2b00      	cmp	r3, #0
    2570:	d007      	beq.n	2582 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    2572:	68bb      	ldr	r3, [r7, #8]
    2574:	781b      	ldrb	r3, [r3, #0]
    2576:	2101      	movs	r1, #1
    2578:	0018      	movs	r0, r3
    257a:	4b22      	ldr	r3, [pc, #136]	; (2604 <spi_select_slave+0xe0>)
    257c:	4798      	blx	r3
					return STATUS_BUSY;
    257e:	2305      	movs	r3, #5
    2580:	e03a      	b.n	25f8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2582:	68bb      	ldr	r3, [r7, #8]
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	2100      	movs	r1, #0
    2588:	0018      	movs	r0, r3
    258a:	4b1e      	ldr	r3, [pc, #120]	; (2604 <spi_select_slave+0xe0>)
    258c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    258e:	68bb      	ldr	r3, [r7, #8]
    2590:	789b      	ldrb	r3, [r3, #2]
    2592:	b29a      	uxth	r2, r3
    2594:	68fb      	ldr	r3, [r7, #12]
    2596:	0011      	movs	r1, r2
    2598:	0018      	movs	r0, r3
    259a:	4b1b      	ldr	r3, [pc, #108]	; (2608 <spi_select_slave+0xe4>)
    259c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	79db      	ldrb	r3, [r3, #7]
    25a2:	2201      	movs	r2, #1
    25a4:	4053      	eors	r3, r2
    25a6:	b2db      	uxtb	r3, r3
    25a8:	2b00      	cmp	r3, #0
    25aa:	d024      	beq.n	25f6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    25ac:	46c0      	nop			; (mov r8, r8)
    25ae:	68fb      	ldr	r3, [r7, #12]
    25b0:	0018      	movs	r0, r3
    25b2:	4b16      	ldr	r3, [pc, #88]	; (260c <spi_select_slave+0xe8>)
    25b4:	4798      	blx	r3
    25b6:	0003      	movs	r3, r0
    25b8:	001a      	movs	r2, r3
    25ba:	2301      	movs	r3, #1
    25bc:	4053      	eors	r3, r2
    25be:	b2db      	uxtb	r3, r3
    25c0:	2b00      	cmp	r3, #0
    25c2:	d1f4      	bne.n	25ae <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    25c4:	2316      	movs	r3, #22
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	2200      	movs	r2, #0
    25ca:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    25cc:	2316      	movs	r3, #22
    25ce:	18fa      	adds	r2, r7, r3
    25d0:	68fb      	ldr	r3, [r7, #12]
    25d2:	0011      	movs	r1, r2
    25d4:	0018      	movs	r0, r3
    25d6:	4b0e      	ldr	r3, [pc, #56]	; (2610 <spi_select_slave+0xec>)
    25d8:	4798      	blx	r3
    25da:	e00c      	b.n	25f6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    25dc:	68bb      	ldr	r3, [r7, #8]
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	2100      	movs	r1, #0
    25e2:	0018      	movs	r0, r3
    25e4:	4b07      	ldr	r3, [pc, #28]	; (2604 <spi_select_slave+0xe0>)
    25e6:	4798      	blx	r3
    25e8:	e005      	b.n	25f6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    25ea:	68bb      	ldr	r3, [r7, #8]
    25ec:	781b      	ldrb	r3, [r3, #0]
    25ee:	2101      	movs	r1, #1
    25f0:	0018      	movs	r0, r3
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <spi_select_slave+0xe0>)
    25f4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    25f6:	2300      	movs	r3, #0
}
    25f8:	0018      	movs	r0, r3
    25fa:	46bd      	mov	sp, r7
    25fc:	b006      	add	sp, #24
    25fe:	bd80      	pop	{r7, pc}
    2600:	00001ec5 	.word	0x00001ec5
    2604:	00001ddd 	.word	0x00001ddd
    2608:	00001f15 	.word	0x00001f15
    260c:	00001eed 	.word	0x00001eed
    2610:	00001f5d 	.word	0x00001f5d

00002614 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    2614:	b580      	push	{r7, lr}
    2616:	b084      	sub	sp, #16
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	681b      	ldr	r3, [r3, #0]
    2620:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	b2da      	uxtb	r2, r3
    262a:	230e      	movs	r3, #14
    262c:	18fb      	adds	r3, r7, r3
    262e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2634:	1c5a      	adds	r2, r3, #1
    2636:	687b      	ldr	r3, [r7, #4]
    2638:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	799b      	ldrb	r3, [r3, #6]
    263e:	2b01      	cmp	r3, #1
    2640:	d113      	bne.n	266a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2642:	687b      	ldr	r3, [r7, #4]
    2644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2646:	781b      	ldrb	r3, [r3, #0]
    2648:	b2db      	uxtb	r3, r3
    264a:	021b      	lsls	r3, r3, #8
    264c:	b21a      	sxth	r2, r3
    264e:	230e      	movs	r3, #14
    2650:	18fb      	adds	r3, r7, r3
    2652:	2100      	movs	r1, #0
    2654:	5e5b      	ldrsh	r3, [r3, r1]
    2656:	4313      	orrs	r3, r2
    2658:	b21a      	sxth	r2, r3
    265a:	230e      	movs	r3, #14
    265c:	18fb      	adds	r3, r7, r3
    265e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2664:	1c5a      	adds	r2, r3, #1
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    266a:	230e      	movs	r3, #14
    266c:	18fb      	adds	r3, r7, r3
    266e:	881b      	ldrh	r3, [r3, #0]
    2670:	05db      	lsls	r3, r3, #23
    2672:	0dda      	lsrs	r2, r3, #23
    2674:	68bb      	ldr	r3, [r7, #8]
    2676:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    267c:	b29b      	uxth	r3, r3
    267e:	3b01      	subs	r3, #1
    2680:	b29a      	uxth	r2, r3
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	869a      	strh	r2, [r3, #52]	; 0x34
}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	46bd      	mov	sp, r7
    268a:	b004      	add	sp, #16
    268c:	bd80      	pop	{r7, pc}
    268e:	46c0      	nop			; (mov r8, r8)

00002690 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    2690:	b580      	push	{r7, lr}
    2692:	b084      	sub	sp, #16
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    269e:	4b08      	ldr	r3, [pc, #32]	; (26c0 <_spi_write_dummy+0x30>)
    26a0:	881b      	ldrh	r3, [r3, #0]
    26a2:	001a      	movs	r2, r3
    26a4:	68fb      	ldr	r3, [r7, #12]
    26a6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    26ac:	b29b      	uxth	r3, r3
    26ae:	3b01      	subs	r3, #1
    26b0:	b29a      	uxth	r2, r3
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	46bd      	mov	sp, r7
    26ba:	b004      	add	sp, #16
    26bc:	bd80      	pop	{r7, pc}
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	200000d8 	.word	0x200000d8

000026c4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b084      	sub	sp, #16
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	681b      	ldr	r3, [r3, #0]
    26d0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    26d2:	230a      	movs	r3, #10
    26d4:	18fb      	adds	r3, r7, r3
    26d6:	2200      	movs	r2, #0
    26d8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26de:	230a      	movs	r3, #10
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    26e8:	b29b      	uxth	r3, r3
    26ea:	3b01      	subs	r3, #1
    26ec:	b29a      	uxth	r2, r3
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	46bd      	mov	sp, r7
    26f6:	b004      	add	sp, #16
    26f8:	bd80      	pop	{r7, pc}
    26fa:	46c0      	nop			; (mov r8, r8)

000026fc <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b084      	sub	sp, #16
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	681b      	ldr	r3, [r3, #0]
    2708:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    270e:	b29a      	uxth	r2, r3
    2710:	230a      	movs	r3, #10
    2712:	18fb      	adds	r3, r7, r3
    2714:	05d2      	lsls	r2, r2, #23
    2716:	0dd2      	lsrs	r2, r2, #23
    2718:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    271e:	220a      	movs	r2, #10
    2720:	18ba      	adds	r2, r7, r2
    2722:	8812      	ldrh	r2, [r2, #0]
    2724:	b2d2      	uxtb	r2, r2
    2726:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    272c:	1c5a      	adds	r2, r3, #1
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	799b      	ldrb	r3, [r3, #6]
    2736:	2b01      	cmp	r3, #1
    2738:	d10d      	bne.n	2756 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    273e:	220a      	movs	r2, #10
    2740:	18ba      	adds	r2, r7, r2
    2742:	8812      	ldrh	r2, [r2, #0]
    2744:	0a12      	lsrs	r2, r2, #8
    2746:	b292      	uxth	r2, r2
    2748:	b2d2      	uxtb	r2, r2
    274a:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2750:	1c5a      	adds	r2, r3, #1
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    275a:	b29b      	uxth	r3, r3
    275c:	3b01      	subs	r3, #1
    275e:	b29a      	uxth	r2, r3
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	b004      	add	sp, #16
    276a:	bd80      	pop	{r7, pc}

0000276c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    276c:	b580      	push	{r7, lr}
    276e:	b086      	sub	sp, #24
    2770:	af00      	add	r7, sp, #0
    2772:	0002      	movs	r2, r0
    2774:	1dfb      	adds	r3, r7, #7
    2776:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    2778:	1dfb      	adds	r3, r7, #7
    277a:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    277c:	4bb9      	ldr	r3, [pc, #740]	; (2a64 <_spi_interrupt_handler+0x2f8>)
    277e:	0092      	lsls	r2, r2, #2
    2780:	58d3      	ldr	r3, [r2, r3]
    2782:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2784:	697b      	ldr	r3, [r7, #20]
    2786:	681b      	ldr	r3, [r3, #0]
    2788:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    278a:	697b      	ldr	r3, [r7, #20]
    278c:	2237      	movs	r2, #55	; 0x37
    278e:	5c9a      	ldrb	r2, [r3, r2]
    2790:	697b      	ldr	r3, [r7, #20]
    2792:	2136      	movs	r1, #54	; 0x36
    2794:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    2796:	230f      	movs	r3, #15
    2798:	18fb      	adds	r3, r7, r3
    279a:	400a      	ands	r2, r1
    279c:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    279e:	693b      	ldr	r3, [r7, #16]
    27a0:	7e1b      	ldrb	r3, [r3, #24]
    27a2:	b2da      	uxtb	r2, r3
    27a4:	230c      	movs	r3, #12
    27a6:	18fb      	adds	r3, r7, r3
    27a8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    27aa:	693b      	ldr	r3, [r7, #16]
    27ac:	7d9b      	ldrb	r3, [r3, #22]
    27ae:	b2db      	uxtb	r3, r3
    27b0:	b29a      	uxth	r2, r3
    27b2:	230c      	movs	r3, #12
    27b4:	18fb      	adds	r3, r7, r3
    27b6:	210c      	movs	r1, #12
    27b8:	1879      	adds	r1, r7, r1
    27ba:	8809      	ldrh	r1, [r1, #0]
    27bc:	400a      	ands	r2, r1
    27be:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    27c0:	230c      	movs	r3, #12
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	881b      	ldrh	r3, [r3, #0]
    27c6:	2201      	movs	r2, #1
    27c8:	4013      	ands	r3, r2
    27ca:	d041      	beq.n	2850 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    27cc:	697b      	ldr	r3, [r7, #20]
    27ce:	795b      	ldrb	r3, [r3, #5]
    27d0:	2b01      	cmp	r3, #1
    27d2:	d110      	bne.n	27f6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    27d4:	697b      	ldr	r3, [r7, #20]
    27d6:	7a5b      	ldrb	r3, [r3, #9]
    27d8:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    27da:	2b00      	cmp	r3, #0
    27dc:	d10b      	bne.n	27f6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    27de:	697b      	ldr	r3, [r7, #20]
    27e0:	0018      	movs	r0, r3
    27e2:	4ba1      	ldr	r3, [pc, #644]	; (2a68 <_spi_interrupt_handler+0x2fc>)
    27e4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    27e6:	697b      	ldr	r3, [r7, #20]
    27e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    27ea:	b29b      	uxth	r3, r3
    27ec:	2b00      	cmp	r3, #0
    27ee:	d102      	bne.n	27f6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    27f0:	693b      	ldr	r3, [r7, #16]
    27f2:	2201      	movs	r2, #1
    27f4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    27f6:	697b      	ldr	r3, [r7, #20]
    27f8:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    27fa:	2b01      	cmp	r3, #1
    27fc:	d104      	bne.n	2808 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    27fe:	697b      	ldr	r3, [r7, #20]
    2800:	7a5b      	ldrb	r3, [r3, #9]
    2802:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2804:	2b00      	cmp	r3, #0
    2806:	d108      	bne.n	281a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2808:	697b      	ldr	r3, [r7, #20]
    280a:	795b      	ldrb	r3, [r3, #5]
    280c:	2b00      	cmp	r3, #0
    280e:	d11f      	bne.n	2850 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    2810:	697b      	ldr	r3, [r7, #20]
    2812:	7a5b      	ldrb	r3, [r3, #9]
    2814:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2816:	2b00      	cmp	r3, #0
    2818:	d01a      	beq.n	2850 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    281a:	697b      	ldr	r3, [r7, #20]
    281c:	0018      	movs	r0, r3
    281e:	4b93      	ldr	r3, [pc, #588]	; (2a6c <_spi_interrupt_handler+0x300>)
    2820:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    2822:	697b      	ldr	r3, [r7, #20]
    2824:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2826:	b29b      	uxth	r3, r3
    2828:	2b00      	cmp	r3, #0
    282a:	d111      	bne.n	2850 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    282c:	693b      	ldr	r3, [r7, #16]
    282e:	2201      	movs	r2, #1
    2830:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    2832:	697b      	ldr	r3, [r7, #20]
    2834:	7a5b      	ldrb	r3, [r3, #9]
    2836:	b2db      	uxtb	r3, r3
    2838:	2b01      	cmp	r3, #1
    283a:	d109      	bne.n	2850 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    283c:	697b      	ldr	r3, [r7, #20]
    283e:	79db      	ldrb	r3, [r3, #7]
    2840:	2201      	movs	r2, #1
    2842:	4053      	eors	r3, r2
    2844:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    2846:	2b00      	cmp	r3, #0
    2848:	d002      	beq.n	2850 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    284a:	693b      	ldr	r3, [r7, #16]
    284c:	2202      	movs	r2, #2
    284e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2850:	230c      	movs	r3, #12
    2852:	18fb      	adds	r3, r7, r3
    2854:	881b      	ldrh	r3, [r3, #0]
    2856:	2204      	movs	r2, #4
    2858:	4013      	ands	r3, r2
    285a:	d100      	bne.n	285e <_spi_interrupt_handler+0xf2>
    285c:	e07e      	b.n	295c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    285e:	693b      	ldr	r3, [r7, #16]
    2860:	8b5b      	ldrh	r3, [r3, #26]
    2862:	b29b      	uxth	r3, r3
    2864:	001a      	movs	r2, r3
    2866:	2304      	movs	r3, #4
    2868:	4013      	ands	r3, r2
    286a:	d022      	beq.n	28b2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    286c:	697b      	ldr	r3, [r7, #20]
    286e:	7a5b      	ldrb	r3, [r3, #9]
    2870:	b2db      	uxtb	r3, r3
    2872:	2b01      	cmp	r3, #1
    2874:	d014      	beq.n	28a0 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2876:	697b      	ldr	r3, [r7, #20]
    2878:	2238      	movs	r2, #56	; 0x38
    287a:	211e      	movs	r1, #30
    287c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    287e:	697b      	ldr	r3, [r7, #20]
    2880:	2203      	movs	r2, #3
    2882:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2884:	693b      	ldr	r3, [r7, #16]
    2886:	2205      	movs	r2, #5
    2888:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    288a:	230f      	movs	r3, #15
    288c:	18fb      	adds	r3, r7, r3
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	2208      	movs	r2, #8
    2892:	4013      	ands	r3, r2
    2894:	d004      	beq.n	28a0 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2896:	697b      	ldr	r3, [r7, #20]
    2898:	699b      	ldr	r3, [r3, #24]
    289a:	697a      	ldr	r2, [r7, #20]
    289c:	0010      	movs	r0, r2
    289e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    28a0:	693b      	ldr	r3, [r7, #16]
    28a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28a4:	230a      	movs	r3, #10
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    28aa:	693b      	ldr	r3, [r7, #16]
    28ac:	2204      	movs	r2, #4
    28ae:	835a      	strh	r2, [r3, #26]
    28b0:	e054      	b.n	295c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    28b2:	697b      	ldr	r3, [r7, #20]
    28b4:	7a5b      	ldrb	r3, [r3, #9]
    28b6:	b2db      	uxtb	r3, r3
    28b8:	2b01      	cmp	r3, #1
    28ba:	d11e      	bne.n	28fa <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    28bc:	697b      	ldr	r3, [r7, #20]
    28be:	0018      	movs	r0, r3
    28c0:	4b6b      	ldr	r3, [pc, #428]	; (2a70 <_spi_interrupt_handler+0x304>)
    28c2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    28c4:	697b      	ldr	r3, [r7, #20]
    28c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    28c8:	b29b      	uxth	r3, r3
    28ca:	2b00      	cmp	r3, #0
    28cc:	d146      	bne.n	295c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    28ce:	693b      	ldr	r3, [r7, #16]
    28d0:	2204      	movs	r2, #4
    28d2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    28d4:	697b      	ldr	r3, [r7, #20]
    28d6:	2238      	movs	r2, #56	; 0x38
    28d8:	2100      	movs	r1, #0
    28da:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    28dc:	697b      	ldr	r3, [r7, #20]
    28de:	2203      	movs	r2, #3
    28e0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    28e2:	230f      	movs	r3, #15
    28e4:	18fb      	adds	r3, r7, r3
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2201      	movs	r2, #1
    28ea:	4013      	ands	r3, r2
    28ec:	d036      	beq.n	295c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    28ee:	697b      	ldr	r3, [r7, #20]
    28f0:	68db      	ldr	r3, [r3, #12]
    28f2:	697a      	ldr	r2, [r7, #20]
    28f4:	0010      	movs	r0, r2
    28f6:	4798      	blx	r3
    28f8:	e030      	b.n	295c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    28fa:	697b      	ldr	r3, [r7, #20]
    28fc:	0018      	movs	r0, r3
    28fe:	4b5d      	ldr	r3, [pc, #372]	; (2a74 <_spi_interrupt_handler+0x308>)
    2900:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    2902:	697b      	ldr	r3, [r7, #20]
    2904:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2906:	b29b      	uxth	r3, r3
    2908:	2b00      	cmp	r3, #0
    290a:	d127      	bne.n	295c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    290c:	697b      	ldr	r3, [r7, #20]
    290e:	2238      	movs	r2, #56	; 0x38
    2910:	2100      	movs	r1, #0
    2912:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2914:	693b      	ldr	r3, [r7, #16]
    2916:	2204      	movs	r2, #4
    2918:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    291a:	697b      	ldr	r3, [r7, #20]
    291c:	7a5b      	ldrb	r3, [r3, #9]
    291e:	b2db      	uxtb	r3, r3
    2920:	2b02      	cmp	r3, #2
    2922:	d10b      	bne.n	293c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2924:	230f      	movs	r3, #15
    2926:	18fb      	adds	r3, r7, r3
    2928:	781b      	ldrb	r3, [r3, #0]
    292a:	2204      	movs	r2, #4
    292c:	4013      	ands	r3, r2
    292e:	d015      	beq.n	295c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2930:	697b      	ldr	r3, [r7, #20]
    2932:	695b      	ldr	r3, [r3, #20]
    2934:	697a      	ldr	r2, [r7, #20]
    2936:	0010      	movs	r0, r2
    2938:	4798      	blx	r3
    293a:	e00f      	b.n	295c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    293c:	697b      	ldr	r3, [r7, #20]
    293e:	7a5b      	ldrb	r3, [r3, #9]
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d10a      	bne.n	295c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2946:	230f      	movs	r3, #15
    2948:	18fb      	adds	r3, r7, r3
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	2202      	movs	r2, #2
    294e:	4013      	ands	r3, r2
    2950:	d004      	beq.n	295c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2952:	697b      	ldr	r3, [r7, #20]
    2954:	691b      	ldr	r3, [r3, #16]
    2956:	697a      	ldr	r2, [r7, #20]
    2958:	0010      	movs	r0, r2
    295a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    295c:	230c      	movs	r3, #12
    295e:	18fb      	adds	r3, r7, r3
    2960:	881b      	ldrh	r3, [r3, #0]
    2962:	2202      	movs	r2, #2
    2964:	4013      	ands	r3, r2
    2966:	d046      	beq.n	29f6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    2968:	697b      	ldr	r3, [r7, #20]
    296a:	795b      	ldrb	r3, [r3, #5]
    296c:	2b00      	cmp	r3, #0
    296e:	d11d      	bne.n	29ac <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    2970:	693b      	ldr	r3, [r7, #16]
    2972:	2207      	movs	r2, #7
    2974:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2976:	693b      	ldr	r3, [r7, #16]
    2978:	2202      	movs	r2, #2
    297a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    297c:	697b      	ldr	r3, [r7, #20]
    297e:	2203      	movs	r2, #3
    2980:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    2982:	697b      	ldr	r3, [r7, #20]
    2984:	2200      	movs	r2, #0
    2986:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    2988:	697b      	ldr	r3, [r7, #20]
    298a:	2200      	movs	r2, #0
    298c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    298e:	697b      	ldr	r3, [r7, #20]
    2990:	2238      	movs	r2, #56	; 0x38
    2992:	2100      	movs	r1, #0
    2994:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    2996:	230f      	movs	r3, #15
    2998:	18fb      	adds	r3, r7, r3
    299a:	781b      	ldrb	r3, [r3, #0]
    299c:	2210      	movs	r2, #16
    299e:	4013      	ands	r3, r2
    29a0:	d004      	beq.n	29ac <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    29a2:	697b      	ldr	r3, [r7, #20]
    29a4:	69db      	ldr	r3, [r3, #28]
    29a6:	697a      	ldr	r2, [r7, #20]
    29a8:	0010      	movs	r0, r2
    29aa:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    29ac:	697b      	ldr	r3, [r7, #20]
    29ae:	795b      	ldrb	r3, [r3, #5]
    29b0:	2b01      	cmp	r3, #1
    29b2:	d120      	bne.n	29f6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    29b4:	697b      	ldr	r3, [r7, #20]
    29b6:	7a5b      	ldrb	r3, [r3, #9]
    29b8:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    29ba:	2b01      	cmp	r3, #1
    29bc:	d11b      	bne.n	29f6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    29be:	697b      	ldr	r3, [r7, #20]
    29c0:	79db      	ldrb	r3, [r3, #7]
    29c2:	2201      	movs	r2, #1
    29c4:	4053      	eors	r3, r2
    29c6:	b2db      	uxtb	r3, r3
    29c8:	2b00      	cmp	r3, #0
    29ca:	d014      	beq.n	29f6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    29cc:	693b      	ldr	r3, [r7, #16]
    29ce:	2202      	movs	r2, #2
    29d0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    29d2:	697b      	ldr	r3, [r7, #20]
    29d4:	2203      	movs	r2, #3
    29d6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    29d8:	697b      	ldr	r3, [r7, #20]
    29da:	2238      	movs	r2, #56	; 0x38
    29dc:	2100      	movs	r1, #0
    29de:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    29e0:	230f      	movs	r3, #15
    29e2:	18fb      	adds	r3, r7, r3
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	2201      	movs	r2, #1
    29e8:	4013      	ands	r3, r2
    29ea:	d004      	beq.n	29f6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    29ec:	697b      	ldr	r3, [r7, #20]
    29ee:	68db      	ldr	r3, [r3, #12]
    29f0:	697a      	ldr	r2, [r7, #20]
    29f2:	0010      	movs	r0, r2
    29f4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    29f6:	230c      	movs	r3, #12
    29f8:	18fb      	adds	r3, r7, r3
    29fa:	881b      	ldrh	r3, [r3, #0]
    29fc:	2208      	movs	r2, #8
    29fe:	4013      	ands	r3, r2
    2a00:	d014      	beq.n	2a2c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    2a02:	697b      	ldr	r3, [r7, #20]
    2a04:	795b      	ldrb	r3, [r3, #5]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d110      	bne.n	2a2c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2a0a:	693b      	ldr	r3, [r7, #16]
    2a0c:	2208      	movs	r2, #8
    2a0e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2a10:	693b      	ldr	r3, [r7, #16]
    2a12:	2208      	movs	r2, #8
    2a14:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    2a16:	230f      	movs	r3, #15
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	2220      	movs	r2, #32
    2a1e:	4013      	ands	r3, r2
    2a20:	d004      	beq.n	2a2c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    2a22:	697b      	ldr	r3, [r7, #20]
    2a24:	6a1b      	ldr	r3, [r3, #32]
    2a26:	697a      	ldr	r2, [r7, #20]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2a2c:	230c      	movs	r3, #12
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	881b      	ldrh	r3, [r3, #0]
    2a32:	2280      	movs	r2, #128	; 0x80
    2a34:	4013      	ands	r3, r2
    2a36:	d010      	beq.n	2a5a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2a38:	693b      	ldr	r3, [r7, #16]
    2a3a:	2280      	movs	r2, #128	; 0x80
    2a3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2a3e:	693b      	ldr	r3, [r7, #16]
    2a40:	2280      	movs	r2, #128	; 0x80
    2a42:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2a44:	230f      	movs	r3, #15
    2a46:	18fb      	adds	r3, r7, r3
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2240      	movs	r2, #64	; 0x40
    2a4c:	4013      	ands	r3, r2
    2a4e:	d004      	beq.n	2a5a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2a50:	697b      	ldr	r3, [r7, #20]
    2a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a54:	697a      	ldr	r2, [r7, #20]
    2a56:	0010      	movs	r0, r2
    2a58:	4798      	blx	r3
		}
	}
#  endif
}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	46bd      	mov	sp, r7
    2a5e:	b006      	add	sp, #24
    2a60:	bd80      	pop	{r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	200000dc 	.word	0x200000dc
    2a68:	00002691 	.word	0x00002691
    2a6c:	00002615 	.word	0x00002615
    2a70:	000026c5 	.word	0x000026c5
    2a74:	000026fd 	.word	0x000026fd

00002a78 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	2200      	movs	r2, #0
    2a84:	701a      	strb	r2, [r3, #0]
}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	46bd      	mov	sp, r7
    2a8a:	b002      	add	sp, #8
    2a8c:	bd80      	pop	{r7, pc}
    2a8e:	46c0      	nop			; (mov r8, r8)

00002a90 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b086      	sub	sp, #24
    2a94:	af00      	add	r7, sp, #0
    2a96:	60f8      	str	r0, [r7, #12]
    2a98:	60b9      	str	r1, [r7, #8]
    2a9a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    2a9c:	2316      	movs	r3, #22
    2a9e:	18fb      	adds	r3, r7, r3
    2aa0:	2200      	movs	r2, #0
    2aa2:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2aa4:	68bb      	ldr	r3, [r7, #8]
    2aa6:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2aa8:	68bb      	ldr	r3, [r7, #8]
    2aaa:	085a      	lsrs	r2, r3, #1
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	429a      	cmp	r2, r3
    2ab0:	d201      	bcs.n	2ab6 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ab2:	2340      	movs	r3, #64	; 0x40
    2ab4:	e026      	b.n	2b04 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2ab6:	68bb      	ldr	r3, [r7, #8]
    2ab8:	085b      	lsrs	r3, r3, #1
    2aba:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    2abc:	e00a      	b.n	2ad4 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2abe:	693a      	ldr	r2, [r7, #16]
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	1ad3      	subs	r3, r2, r3
    2ac4:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2ac6:	2316      	movs	r3, #22
    2ac8:	18fb      	adds	r3, r7, r3
    2aca:	881a      	ldrh	r2, [r3, #0]
    2acc:	2316      	movs	r3, #22
    2ace:	18fb      	adds	r3, r7, r3
    2ad0:	3201      	adds	r2, #1
    2ad2:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2ad4:	693a      	ldr	r2, [r7, #16]
    2ad6:	68fb      	ldr	r3, [r7, #12]
    2ad8:	429a      	cmp	r2, r3
    2ada:	d2f0      	bcs.n	2abe <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    2adc:	2316      	movs	r3, #22
    2ade:	18fb      	adds	r3, r7, r3
    2ae0:	2216      	movs	r2, #22
    2ae2:	18ba      	adds	r2, r7, r2
    2ae4:	8812      	ldrh	r2, [r2, #0]
    2ae6:	3a01      	subs	r2, #1
    2ae8:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2aea:	2316      	movs	r3, #22
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	881b      	ldrh	r3, [r3, #0]
    2af0:	2bff      	cmp	r3, #255	; 0xff
    2af2:	d901      	bls.n	2af8 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2af4:	2340      	movs	r3, #64	; 0x40
    2af6:	e005      	b.n	2b04 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	2216      	movs	r2, #22
    2afc:	18ba      	adds	r2, r7, r2
    2afe:	8812      	ldrh	r2, [r2, #0]
    2b00:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2b02:	2300      	movs	r3, #0
	}
}
    2b04:	0018      	movs	r0, r3
    2b06:	46bd      	mov	sp, r7
    2b08:	b006      	add	sp, #24
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b084      	sub	sp, #16
    2b10:	af00      	add	r7, sp, #0
    2b12:	0002      	movs	r2, r0
    2b14:	1dfb      	adds	r3, r7, #7
    2b16:	701a      	strb	r2, [r3, #0]
    2b18:	1dbb      	adds	r3, r7, #6
    2b1a:	1c0a      	adds	r2, r1, #0
    2b1c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2b1e:	4b1a      	ldr	r3, [pc, #104]	; (2b88 <sercom_set_gclk_generator+0x7c>)
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	2201      	movs	r2, #1
    2b24:	4053      	eors	r3, r2
    2b26:	b2db      	uxtb	r3, r3
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d103      	bne.n	2b34 <sercom_set_gclk_generator+0x28>
    2b2c:	1dbb      	adds	r3, r7, #6
    2b2e:	781b      	ldrb	r3, [r3, #0]
    2b30:	2b00      	cmp	r3, #0
    2b32:	d01b      	beq.n	2b6c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2b34:	230c      	movs	r3, #12
    2b36:	18fb      	adds	r3, r7, r3
    2b38:	0018      	movs	r0, r3
    2b3a:	4b14      	ldr	r3, [pc, #80]	; (2b8c <sercom_set_gclk_generator+0x80>)
    2b3c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2b3e:	230c      	movs	r3, #12
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	1dfa      	adds	r2, r7, #7
    2b44:	7812      	ldrb	r2, [r2, #0]
    2b46:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2b48:	230c      	movs	r3, #12
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	0019      	movs	r1, r3
    2b4e:	2013      	movs	r0, #19
    2b50:	4b0f      	ldr	r3, [pc, #60]	; (2b90 <sercom_set_gclk_generator+0x84>)
    2b52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2b54:	2013      	movs	r0, #19
    2b56:	4b0f      	ldr	r3, [pc, #60]	; (2b94 <sercom_set_gclk_generator+0x88>)
    2b58:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    2b5a:	4b0b      	ldr	r3, [pc, #44]	; (2b88 <sercom_set_gclk_generator+0x7c>)
    2b5c:	1dfa      	adds	r2, r7, #7
    2b5e:	7812      	ldrb	r2, [r2, #0]
    2b60:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2b62:	4b09      	ldr	r3, [pc, #36]	; (2b88 <sercom_set_gclk_generator+0x7c>)
    2b64:	2201      	movs	r2, #1
    2b66:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2b68:	2300      	movs	r3, #0
    2b6a:	e008      	b.n	2b7e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2b6c:	4b06      	ldr	r3, [pc, #24]	; (2b88 <sercom_set_gclk_generator+0x7c>)
    2b6e:	785b      	ldrb	r3, [r3, #1]
    2b70:	1dfa      	adds	r2, r7, #7
    2b72:	7812      	ldrb	r2, [r2, #0]
    2b74:	429a      	cmp	r2, r3
    2b76:	d101      	bne.n	2b7c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    2b78:	2300      	movs	r3, #0
    2b7a:	e000      	b.n	2b7e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2b7c:	231d      	movs	r3, #29
}
    2b7e:	0018      	movs	r0, r3
    2b80:	46bd      	mov	sp, r7
    2b82:	b004      	add	sp, #16
    2b84:	bd80      	pop	{r7, pc}
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	20000024 	.word	0x20000024
    2b8c:	00002a79 	.word	0x00002a79
    2b90:	0000394d 	.word	0x0000394d
    2b94:	00003991 	.word	0x00003991

00002b98 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	b082      	sub	sp, #8
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	000a      	movs	r2, r1
    2ba2:	1cfb      	adds	r3, r7, #3
    2ba4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	4a4d      	ldr	r2, [pc, #308]	; (2ce0 <_sercom_get_default_pad+0x148>)
    2baa:	4293      	cmp	r3, r2
    2bac:	d03f      	beq.n	2c2e <_sercom_get_default_pad+0x96>
    2bae:	4a4c      	ldr	r2, [pc, #304]	; (2ce0 <_sercom_get_default_pad+0x148>)
    2bb0:	4293      	cmp	r3, r2
    2bb2:	d806      	bhi.n	2bc2 <_sercom_get_default_pad+0x2a>
    2bb4:	4a4b      	ldr	r2, [pc, #300]	; (2ce4 <_sercom_get_default_pad+0x14c>)
    2bb6:	4293      	cmp	r3, r2
    2bb8:	d00f      	beq.n	2bda <_sercom_get_default_pad+0x42>
    2bba:	4a4b      	ldr	r2, [pc, #300]	; (2ce8 <_sercom_get_default_pad+0x150>)
    2bbc:	4293      	cmp	r3, r2
    2bbe:	d021      	beq.n	2c04 <_sercom_get_default_pad+0x6c>
    2bc0:	e089      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2bc2:	4a4a      	ldr	r2, [pc, #296]	; (2cec <_sercom_get_default_pad+0x154>)
    2bc4:	4293      	cmp	r3, r2
    2bc6:	d100      	bne.n	2bca <_sercom_get_default_pad+0x32>
    2bc8:	e05b      	b.n	2c82 <_sercom_get_default_pad+0xea>
    2bca:	4a49      	ldr	r2, [pc, #292]	; (2cf0 <_sercom_get_default_pad+0x158>)
    2bcc:	4293      	cmp	r3, r2
    2bce:	d100      	bne.n	2bd2 <_sercom_get_default_pad+0x3a>
    2bd0:	e06c      	b.n	2cac <_sercom_get_default_pad+0x114>
    2bd2:	4a48      	ldr	r2, [pc, #288]	; (2cf4 <_sercom_get_default_pad+0x15c>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d03f      	beq.n	2c58 <_sercom_get_default_pad+0xc0>
    2bd8:	e07d      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2bda:	1cfb      	adds	r3, r7, #3
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	2b01      	cmp	r3, #1
    2be0:	d00a      	beq.n	2bf8 <_sercom_get_default_pad+0x60>
    2be2:	dc02      	bgt.n	2bea <_sercom_get_default_pad+0x52>
    2be4:	2b00      	cmp	r3, #0
    2be6:	d005      	beq.n	2bf4 <_sercom_get_default_pad+0x5c>
    2be8:	e075      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2bea:	2b02      	cmp	r3, #2
    2bec:	d006      	beq.n	2bfc <_sercom_get_default_pad+0x64>
    2bee:	2b03      	cmp	r3, #3
    2bf0:	d006      	beq.n	2c00 <_sercom_get_default_pad+0x68>
    2bf2:	e070      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2bf4:	4b40      	ldr	r3, [pc, #256]	; (2cf8 <_sercom_get_default_pad+0x160>)
    2bf6:	e06f      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2bf8:	4b40      	ldr	r3, [pc, #256]	; (2cfc <_sercom_get_default_pad+0x164>)
    2bfa:	e06d      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2bfc:	4b40      	ldr	r3, [pc, #256]	; (2d00 <_sercom_get_default_pad+0x168>)
    2bfe:	e06b      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c00:	4b40      	ldr	r3, [pc, #256]	; (2d04 <_sercom_get_default_pad+0x16c>)
    2c02:	e069      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c04:	1cfb      	adds	r3, r7, #3
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	2b01      	cmp	r3, #1
    2c0a:	d00a      	beq.n	2c22 <_sercom_get_default_pad+0x8a>
    2c0c:	dc02      	bgt.n	2c14 <_sercom_get_default_pad+0x7c>
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d005      	beq.n	2c1e <_sercom_get_default_pad+0x86>
    2c12:	e060      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c14:	2b02      	cmp	r3, #2
    2c16:	d006      	beq.n	2c26 <_sercom_get_default_pad+0x8e>
    2c18:	2b03      	cmp	r3, #3
    2c1a:	d006      	beq.n	2c2a <_sercom_get_default_pad+0x92>
    2c1c:	e05b      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c1e:	2303      	movs	r3, #3
    2c20:	e05a      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c22:	4b39      	ldr	r3, [pc, #228]	; (2d08 <_sercom_get_default_pad+0x170>)
    2c24:	e058      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c26:	4b39      	ldr	r3, [pc, #228]	; (2d0c <_sercom_get_default_pad+0x174>)
    2c28:	e056      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c2a:	4b39      	ldr	r3, [pc, #228]	; (2d10 <_sercom_get_default_pad+0x178>)
    2c2c:	e054      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c2e:	1cfb      	adds	r3, r7, #3
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	2b01      	cmp	r3, #1
    2c34:	d00a      	beq.n	2c4c <_sercom_get_default_pad+0xb4>
    2c36:	dc02      	bgt.n	2c3e <_sercom_get_default_pad+0xa6>
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d005      	beq.n	2c48 <_sercom_get_default_pad+0xb0>
    2c3c:	e04b      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c3e:	2b02      	cmp	r3, #2
    2c40:	d006      	beq.n	2c50 <_sercom_get_default_pad+0xb8>
    2c42:	2b03      	cmp	r3, #3
    2c44:	d006      	beq.n	2c54 <_sercom_get_default_pad+0xbc>
    2c46:	e046      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c48:	4b32      	ldr	r3, [pc, #200]	; (2d14 <_sercom_get_default_pad+0x17c>)
    2c4a:	e045      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c4c:	4b32      	ldr	r3, [pc, #200]	; (2d18 <_sercom_get_default_pad+0x180>)
    2c4e:	e043      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c50:	4b32      	ldr	r3, [pc, #200]	; (2d1c <_sercom_get_default_pad+0x184>)
    2c52:	e041      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c54:	4b32      	ldr	r3, [pc, #200]	; (2d20 <_sercom_get_default_pad+0x188>)
    2c56:	e03f      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c58:	1cfb      	adds	r3, r7, #3
    2c5a:	781b      	ldrb	r3, [r3, #0]
    2c5c:	2b01      	cmp	r3, #1
    2c5e:	d00a      	beq.n	2c76 <_sercom_get_default_pad+0xde>
    2c60:	dc02      	bgt.n	2c68 <_sercom_get_default_pad+0xd0>
    2c62:	2b00      	cmp	r3, #0
    2c64:	d005      	beq.n	2c72 <_sercom_get_default_pad+0xda>
    2c66:	e036      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c68:	2b02      	cmp	r3, #2
    2c6a:	d006      	beq.n	2c7a <_sercom_get_default_pad+0xe2>
    2c6c:	2b03      	cmp	r3, #3
    2c6e:	d006      	beq.n	2c7e <_sercom_get_default_pad+0xe6>
    2c70:	e031      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c72:	4b2c      	ldr	r3, [pc, #176]	; (2d24 <_sercom_get_default_pad+0x18c>)
    2c74:	e030      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c76:	4b2c      	ldr	r3, [pc, #176]	; (2d28 <_sercom_get_default_pad+0x190>)
    2c78:	e02e      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c7a:	4b2c      	ldr	r3, [pc, #176]	; (2d2c <_sercom_get_default_pad+0x194>)
    2c7c:	e02c      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c7e:	4b2c      	ldr	r3, [pc, #176]	; (2d30 <_sercom_get_default_pad+0x198>)
    2c80:	e02a      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2c82:	1cfb      	adds	r3, r7, #3
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	2b01      	cmp	r3, #1
    2c88:	d00a      	beq.n	2ca0 <_sercom_get_default_pad+0x108>
    2c8a:	dc02      	bgt.n	2c92 <_sercom_get_default_pad+0xfa>
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d005      	beq.n	2c9c <_sercom_get_default_pad+0x104>
    2c90:	e021      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c92:	2b02      	cmp	r3, #2
    2c94:	d006      	beq.n	2ca4 <_sercom_get_default_pad+0x10c>
    2c96:	2b03      	cmp	r3, #3
    2c98:	d006      	beq.n	2ca8 <_sercom_get_default_pad+0x110>
    2c9a:	e01c      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2c9c:	4b25      	ldr	r3, [pc, #148]	; (2d34 <_sercom_get_default_pad+0x19c>)
    2c9e:	e01b      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2ca0:	4b25      	ldr	r3, [pc, #148]	; (2d38 <_sercom_get_default_pad+0x1a0>)
    2ca2:	e019      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2ca4:	4b25      	ldr	r3, [pc, #148]	; (2d3c <_sercom_get_default_pad+0x1a4>)
    2ca6:	e017      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2ca8:	4b25      	ldr	r3, [pc, #148]	; (2d40 <_sercom_get_default_pad+0x1a8>)
    2caa:	e015      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2cac:	1cfb      	adds	r3, r7, #3
    2cae:	781b      	ldrb	r3, [r3, #0]
    2cb0:	2b01      	cmp	r3, #1
    2cb2:	d00a      	beq.n	2cca <_sercom_get_default_pad+0x132>
    2cb4:	dc02      	bgt.n	2cbc <_sercom_get_default_pad+0x124>
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d005      	beq.n	2cc6 <_sercom_get_default_pad+0x12e>
    2cba:	e00c      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2cbc:	2b02      	cmp	r3, #2
    2cbe:	d006      	beq.n	2cce <_sercom_get_default_pad+0x136>
    2cc0:	2b03      	cmp	r3, #3
    2cc2:	d006      	beq.n	2cd2 <_sercom_get_default_pad+0x13a>
    2cc4:	e007      	b.n	2cd6 <_sercom_get_default_pad+0x13e>
    2cc6:	4b1f      	ldr	r3, [pc, #124]	; (2d44 <_sercom_get_default_pad+0x1ac>)
    2cc8:	e006      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2cca:	4b1f      	ldr	r3, [pc, #124]	; (2d48 <_sercom_get_default_pad+0x1b0>)
    2ccc:	e004      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2cce:	4b1f      	ldr	r3, [pc, #124]	; (2d4c <_sercom_get_default_pad+0x1b4>)
    2cd0:	e002      	b.n	2cd8 <_sercom_get_default_pad+0x140>
    2cd2:	4b1f      	ldr	r3, [pc, #124]	; (2d50 <_sercom_get_default_pad+0x1b8>)
    2cd4:	e000      	b.n	2cd8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2cd6:	2300      	movs	r3, #0
}
    2cd8:	0018      	movs	r0, r3
    2cda:	46bd      	mov	sp, r7
    2cdc:	b002      	add	sp, #8
    2cde:	bd80      	pop	{r7, pc}
    2ce0:	42001000 	.word	0x42001000
    2ce4:	42000800 	.word	0x42000800
    2ce8:	42000c00 	.word	0x42000c00
    2cec:	42001800 	.word	0x42001800
    2cf0:	42001c00 	.word	0x42001c00
    2cf4:	42001400 	.word	0x42001400
    2cf8:	00040003 	.word	0x00040003
    2cfc:	00050003 	.word	0x00050003
    2d00:	00060003 	.word	0x00060003
    2d04:	00070003 	.word	0x00070003
    2d08:	00010003 	.word	0x00010003
    2d0c:	001e0003 	.word	0x001e0003
    2d10:	001f0003 	.word	0x001f0003
    2d14:	00080003 	.word	0x00080003
    2d18:	00090003 	.word	0x00090003
    2d1c:	000a0003 	.word	0x000a0003
    2d20:	000b0003 	.word	0x000b0003
    2d24:	00100003 	.word	0x00100003
    2d28:	00110003 	.word	0x00110003
    2d2c:	00120003 	.word	0x00120003
    2d30:	00130003 	.word	0x00130003
    2d34:	000c0003 	.word	0x000c0003
    2d38:	000d0003 	.word	0x000d0003
    2d3c:	000e0003 	.word	0x000e0003
    2d40:	000f0003 	.word	0x000f0003
    2d44:	00160003 	.word	0x00160003
    2d48:	00170003 	.word	0x00170003
    2d4c:	00180003 	.word	0x00180003
    2d50:	00190003 	.word	0x00190003

00002d54 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2d54:	b590      	push	{r4, r7, lr}
    2d56:	b08b      	sub	sp, #44	; 0x2c
    2d58:	af00      	add	r7, sp, #0
    2d5a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2d5c:	230c      	movs	r3, #12
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	4a0f      	ldr	r2, [pc, #60]	; (2da0 <_sercom_get_sercom_inst_index+0x4c>)
    2d62:	ca13      	ldmia	r2!, {r0, r1, r4}
    2d64:	c313      	stmia	r3!, {r0, r1, r4}
    2d66:	ca13      	ldmia	r2!, {r0, r1, r4}
    2d68:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d6a:	2300      	movs	r3, #0
    2d6c:	627b      	str	r3, [r7, #36]	; 0x24
    2d6e:	e00e      	b.n	2d8e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2d70:	230c      	movs	r3, #12
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2d76:	0092      	lsls	r2, r2, #2
    2d78:	58d3      	ldr	r3, [r2, r3]
    2d7a:	1e1a      	subs	r2, r3, #0
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	429a      	cmp	r2, r3
    2d80:	d102      	bne.n	2d88 <_sercom_get_sercom_inst_index+0x34>
			return i;
    2d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d84:	b2db      	uxtb	r3, r3
    2d86:	e006      	b.n	2d96 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d8a:	3301      	adds	r3, #1
    2d8c:	627b      	str	r3, [r7, #36]	; 0x24
    2d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d90:	2b05      	cmp	r3, #5
    2d92:	d9ed      	bls.n	2d70 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2d94:	2300      	movs	r3, #0
}
    2d96:	0018      	movs	r0, r3
    2d98:	46bd      	mov	sp, r7
    2d9a:	b00b      	add	sp, #44	; 0x2c
    2d9c:	bd90      	pop	{r4, r7, pc}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	0000574c 	.word	0x0000574c

00002da4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b082      	sub	sp, #8
    2da8:	af00      	add	r7, sp, #0
    2daa:	0002      	movs	r2, r0
    2dac:	1dfb      	adds	r3, r7, #7
    2dae:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46bd      	mov	sp, r7
    2db4:	b002      	add	sp, #8
    2db6:	bd80      	pop	{r7, pc}

00002db8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2db8:	b580      	push	{r7, lr}
    2dba:	b084      	sub	sp, #16
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	0002      	movs	r2, r0
    2dc0:	6039      	str	r1, [r7, #0]
    2dc2:	1dfb      	adds	r3, r7, #7
    2dc4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2dc6:	4b13      	ldr	r3, [pc, #76]	; (2e14 <_sercom_set_handler+0x5c>)
    2dc8:	781b      	ldrb	r3, [r3, #0]
    2dca:	2201      	movs	r2, #1
    2dcc:	4053      	eors	r3, r2
    2dce:	b2db      	uxtb	r3, r3
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d015      	beq.n	2e00 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2dd4:	2300      	movs	r3, #0
    2dd6:	60fb      	str	r3, [r7, #12]
    2dd8:	e00c      	b.n	2df4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2dda:	4b0f      	ldr	r3, [pc, #60]	; (2e18 <_sercom_set_handler+0x60>)
    2ddc:	68fa      	ldr	r2, [r7, #12]
    2dde:	0092      	lsls	r2, r2, #2
    2de0:	490e      	ldr	r1, [pc, #56]	; (2e1c <_sercom_set_handler+0x64>)
    2de2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2de4:	4b0e      	ldr	r3, [pc, #56]	; (2e20 <_sercom_set_handler+0x68>)
    2de6:	68fa      	ldr	r2, [r7, #12]
    2de8:	0092      	lsls	r2, r2, #2
    2dea:	2100      	movs	r1, #0
    2dec:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2dee:	68fb      	ldr	r3, [r7, #12]
    2df0:	3301      	adds	r3, #1
    2df2:	60fb      	str	r3, [r7, #12]
    2df4:	68fb      	ldr	r3, [r7, #12]
    2df6:	2b05      	cmp	r3, #5
    2df8:	d9ef      	bls.n	2dda <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2dfa:	4b06      	ldr	r3, [pc, #24]	; (2e14 <_sercom_set_handler+0x5c>)
    2dfc:	2201      	movs	r2, #1
    2dfe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2e00:	1dfb      	adds	r3, r7, #7
    2e02:	781a      	ldrb	r2, [r3, #0]
    2e04:	4b04      	ldr	r3, [pc, #16]	; (2e18 <_sercom_set_handler+0x60>)
    2e06:	0092      	lsls	r2, r2, #2
    2e08:	6839      	ldr	r1, [r7, #0]
    2e0a:	50d1      	str	r1, [r2, r3]
}
    2e0c:	46c0      	nop			; (mov r8, r8)
    2e0e:	46bd      	mov	sp, r7
    2e10:	b004      	add	sp, #16
    2e12:	bd80      	pop	{r7, pc}
    2e14:	20000026 	.word	0x20000026
    2e18:	20000028 	.word	0x20000028
    2e1c:	00002da5 	.word	0x00002da5
    2e20:	200000dc 	.word	0x200000dc

00002e24 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2e24:	b590      	push	{r4, r7, lr}
    2e26:	b085      	sub	sp, #20
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2e2c:	2308      	movs	r3, #8
    2e2e:	18fa      	adds	r2, r7, r3
    2e30:	4b0c      	ldr	r3, [pc, #48]	; (2e64 <_sercom_get_interrupt_vector+0x40>)
    2e32:	0010      	movs	r0, r2
    2e34:	0019      	movs	r1, r3
    2e36:	2306      	movs	r3, #6
    2e38:	001a      	movs	r2, r3
    2e3a:	4b0b      	ldr	r3, [pc, #44]	; (2e68 <_sercom_get_interrupt_vector+0x44>)
    2e3c:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2e3e:	230f      	movs	r3, #15
    2e40:	18fc      	adds	r4, r7, r3
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	0018      	movs	r0, r3
    2e46:	4b09      	ldr	r3, [pc, #36]	; (2e6c <_sercom_get_interrupt_vector+0x48>)
    2e48:	4798      	blx	r3
    2e4a:	0003      	movs	r3, r0
    2e4c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2e4e:	230f      	movs	r3, #15
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	781b      	ldrb	r3, [r3, #0]
    2e54:	2208      	movs	r2, #8
    2e56:	18ba      	adds	r2, r7, r2
    2e58:	5cd3      	ldrb	r3, [r2, r3]
    2e5a:	b25b      	sxtb	r3, r3
}
    2e5c:	0018      	movs	r0, r3
    2e5e:	46bd      	mov	sp, r7
    2e60:	b005      	add	sp, #20
    2e62:	bd90      	pop	{r4, r7, pc}
    2e64:	00005764 	.word	0x00005764
    2e68:	000056c9 	.word	0x000056c9
    2e6c:	00002d55 	.word	0x00002d55

00002e70 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
    2e74:	4b03      	ldr	r3, [pc, #12]	; (2e84 <SERCOM0_Handler+0x14>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	2000      	movs	r0, #0
    2e7a:	4798      	blx	r3
    2e7c:	46c0      	nop			; (mov r8, r8)
    2e7e:	46bd      	mov	sp, r7
    2e80:	bd80      	pop	{r7, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	20000028 	.word	0x20000028

00002e88 <SERCOM1_Handler>:
    2e88:	b580      	push	{r7, lr}
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	4b03      	ldr	r3, [pc, #12]	; (2e9c <SERCOM1_Handler+0x14>)
    2e8e:	685b      	ldr	r3, [r3, #4]
    2e90:	2001      	movs	r0, #1
    2e92:	4798      	blx	r3
    2e94:	46c0      	nop			; (mov r8, r8)
    2e96:	46bd      	mov	sp, r7
    2e98:	bd80      	pop	{r7, pc}
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	20000028 	.word	0x20000028

00002ea0 <SERCOM2_Handler>:
    2ea0:	b580      	push	{r7, lr}
    2ea2:	af00      	add	r7, sp, #0
    2ea4:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <SERCOM2_Handler+0x14>)
    2ea6:	689b      	ldr	r3, [r3, #8]
    2ea8:	2002      	movs	r0, #2
    2eaa:	4798      	blx	r3
    2eac:	46c0      	nop			; (mov r8, r8)
    2eae:	46bd      	mov	sp, r7
    2eb0:	bd80      	pop	{r7, pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	20000028 	.word	0x20000028

00002eb8 <SERCOM3_Handler>:
    2eb8:	b580      	push	{r7, lr}
    2eba:	af00      	add	r7, sp, #0
    2ebc:	4b03      	ldr	r3, [pc, #12]	; (2ecc <SERCOM3_Handler+0x14>)
    2ebe:	68db      	ldr	r3, [r3, #12]
    2ec0:	2003      	movs	r0, #3
    2ec2:	4798      	blx	r3
    2ec4:	46c0      	nop			; (mov r8, r8)
    2ec6:	46bd      	mov	sp, r7
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	20000028 	.word	0x20000028

00002ed0 <SERCOM4_Handler>:
    2ed0:	b580      	push	{r7, lr}
    2ed2:	af00      	add	r7, sp, #0
    2ed4:	4b03      	ldr	r3, [pc, #12]	; (2ee4 <SERCOM4_Handler+0x14>)
    2ed6:	691b      	ldr	r3, [r3, #16]
    2ed8:	2004      	movs	r0, #4
    2eda:	4798      	blx	r3
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	46bd      	mov	sp, r7
    2ee0:	bd80      	pop	{r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	20000028 	.word	0x20000028

00002ee8 <SERCOM5_Handler>:
    2ee8:	b580      	push	{r7, lr}
    2eea:	af00      	add	r7, sp, #0
    2eec:	4b03      	ldr	r3, [pc, #12]	; (2efc <SERCOM5_Handler+0x14>)
    2eee:	695b      	ldr	r3, [r3, #20]
    2ef0:	2005      	movs	r0, #5
    2ef2:	4798      	blx	r3
    2ef4:	46c0      	nop			; (mov r8, r8)
    2ef6:	46bd      	mov	sp, r7
    2ef8:	bd80      	pop	{r7, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	20000028 	.word	0x20000028

00002f00 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b082      	sub	sp, #8
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	2280      	movs	r2, #128	; 0x80
    2f0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	2200      	movs	r2, #0
    2f12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	2201      	movs	r2, #1
    2f18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	2200      	movs	r2, #0
    2f1e:	70da      	strb	r2, [r3, #3]
}
    2f20:	46c0      	nop			; (mov r8, r8)
    2f22:	46bd      	mov	sp, r7
    2f24:	b002      	add	sp, #8
    2f26:	bd80      	pop	{r7, pc}

00002f28 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	b084      	sub	sp, #16
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	0002      	movs	r2, r0
    2f30:	6039      	str	r1, [r7, #0]
    2f32:	1dfb      	adds	r3, r7, #7
    2f34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2f36:	230c      	movs	r3, #12
    2f38:	18fb      	adds	r3, r7, r3
    2f3a:	0018      	movs	r0, r3
    2f3c:	4b10      	ldr	r3, [pc, #64]	; (2f80 <port_pin_set_config+0x58>)
    2f3e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2f40:	230c      	movs	r3, #12
    2f42:	18fb      	adds	r3, r7, r3
    2f44:	2280      	movs	r2, #128	; 0x80
    2f46:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2f48:	683b      	ldr	r3, [r7, #0]
    2f4a:	781a      	ldrb	r2, [r3, #0]
    2f4c:	230c      	movs	r3, #12
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2f52:	683b      	ldr	r3, [r7, #0]
    2f54:	785a      	ldrb	r2, [r3, #1]
    2f56:	230c      	movs	r3, #12
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2f5c:	683b      	ldr	r3, [r7, #0]
    2f5e:	789a      	ldrb	r2, [r3, #2]
    2f60:	230c      	movs	r3, #12
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2f66:	230c      	movs	r3, #12
    2f68:	18fa      	adds	r2, r7, r3
    2f6a:	1dfb      	adds	r3, r7, #7
    2f6c:	781b      	ldrb	r3, [r3, #0]
    2f6e:	0011      	movs	r1, r2
    2f70:	0018      	movs	r0, r3
    2f72:	4b04      	ldr	r3, [pc, #16]	; (2f84 <port_pin_set_config+0x5c>)
    2f74:	4798      	blx	r3
}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	46bd      	mov	sp, r7
    2f7a:	b004      	add	sp, #16
    2f7c:	bd80      	pop	{r7, pc}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	00002f01 	.word	0x00002f01
    2f84:	00003c39 	.word	0x00003c39

00002f88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46bd      	mov	sp, r7
    2f90:	bd80      	pop	{r7, pc}
    2f92:	46c0      	nop			; (mov r8, r8)

00002f94 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b082      	sub	sp, #8
    2f98:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2f9a:	4b10      	ldr	r3, [pc, #64]	; (2fdc <cpu_irq_enter_critical+0x48>)
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d112      	bne.n	2fc8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fa2:	f3ef 8310 	mrs	r3, PRIMASK
    2fa6:	607b      	str	r3, [r7, #4]
  return(result);
    2fa8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2faa:	2b00      	cmp	r3, #0
    2fac:	d109      	bne.n	2fc2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2fae:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2fb0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2fb4:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <cpu_irq_enter_critical+0x4c>)
    2fb6:	2200      	movs	r2, #0
    2fb8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2fba:	4b0a      	ldr	r3, [pc, #40]	; (2fe4 <cpu_irq_enter_critical+0x50>)
    2fbc:	2201      	movs	r2, #1
    2fbe:	701a      	strb	r2, [r3, #0]
    2fc0:	e002      	b.n	2fc8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2fc2:	4b08      	ldr	r3, [pc, #32]	; (2fe4 <cpu_irq_enter_critical+0x50>)
    2fc4:	2200      	movs	r2, #0
    2fc6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2fc8:	4b04      	ldr	r3, [pc, #16]	; (2fdc <cpu_irq_enter_critical+0x48>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	1c5a      	adds	r2, r3, #1
    2fce:	4b03      	ldr	r3, [pc, #12]	; (2fdc <cpu_irq_enter_critical+0x48>)
    2fd0:	601a      	str	r2, [r3, #0]
}
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	46bd      	mov	sp, r7
    2fd6:	b002      	add	sp, #8
    2fd8:	bd80      	pop	{r7, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20000040 	.word	0x20000040
    2fe0:	20000000 	.word	0x20000000
    2fe4:	20000044 	.word	0x20000044

00002fe8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2fe8:	b580      	push	{r7, lr}
    2fea:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fec:	4b0b      	ldr	r3, [pc, #44]	; (301c <cpu_irq_leave_critical+0x34>)
    2fee:	681b      	ldr	r3, [r3, #0]
    2ff0:	1e5a      	subs	r2, r3, #1
    2ff2:	4b0a      	ldr	r3, [pc, #40]	; (301c <cpu_irq_leave_critical+0x34>)
    2ff4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2ff6:	4b09      	ldr	r3, [pc, #36]	; (301c <cpu_irq_leave_critical+0x34>)
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d10a      	bne.n	3014 <cpu_irq_leave_critical+0x2c>
    2ffe:	4b08      	ldr	r3, [pc, #32]	; (3020 <cpu_irq_leave_critical+0x38>)
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	b2db      	uxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	d005      	beq.n	3014 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3008:	4b06      	ldr	r3, [pc, #24]	; (3024 <cpu_irq_leave_critical+0x3c>)
    300a:	2201      	movs	r2, #1
    300c:	701a      	strb	r2, [r3, #0]
    300e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3012:	b662      	cpsie	i
	}
}
    3014:	46c0      	nop			; (mov r8, r8)
    3016:	46bd      	mov	sp, r7
    3018:	bd80      	pop	{r7, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	20000040 	.word	0x20000040
    3020:	20000044 	.word	0x20000044
    3024:	20000000 	.word	0x20000000

00003028 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3028:	b580      	push	{r7, lr}
    302a:	b082      	sub	sp, #8
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	2201      	movs	r2, #1
    3034:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	2200      	movs	r2, #0
    303a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	2206      	movs	r2, #6
    3040:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    3042:	687b      	ldr	r3, [r7, #4]
    3044:	2200      	movs	r2, #0
    3046:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	2200      	movs	r2, #0
    304c:	725a      	strb	r2, [r3, #9]
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b002      	add	sp, #8
    3054:	bd80      	pop	{r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)

00003058 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    3058:	b580      	push	{r7, lr}
    305a:	b082      	sub	sp, #8
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	2201      	movs	r2, #1
    3064:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	2201      	movs	r2, #1
    306a:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	2200      	movs	r2, #0
    3070:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	2201      	movs	r2, #1
    3076:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	2207      	movs	r2, #7
    307c:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	2200      	movs	r2, #0
    3082:	715a      	strb	r2, [r3, #5]
}
    3084:	46c0      	nop			; (mov r8, r8)
    3086:	46bd      	mov	sp, r7
    3088:	b002      	add	sp, #8
    308a:	bd80      	pop	{r7, pc}

0000308c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2203      	movs	r2, #3
    3098:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	2200      	movs	r2, #0
    309e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	2201      	movs	r2, #1
    30a4:	709a      	strb	r2, [r3, #2]
}
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	46bd      	mov	sp, r7
    30aa:	b002      	add	sp, #8
    30ac:	bd80      	pop	{r7, pc}
    30ae:	46c0      	nop			; (mov r8, r8)

000030b0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b082      	sub	sp, #8
    30b4:	af00      	add	r7, sp, #0
    30b6:	0002      	movs	r2, r0
    30b8:	1dfb      	adds	r3, r7, #7
    30ba:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    30bc:	4a03      	ldr	r2, [pc, #12]	; (30cc <system_cpu_clock_set_divider+0x1c>)
    30be:	1dfb      	adds	r3, r7, #7
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	7213      	strb	r3, [r2, #8]
}
    30c4:	46c0      	nop			; (mov r8, r8)
    30c6:	46bd      	mov	sp, r7
    30c8:	b002      	add	sp, #8
    30ca:	bd80      	pop	{r7, pc}
    30cc:	40000400 	.word	0x40000400

000030d0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	0002      	movs	r2, r0
    30d8:	1dfb      	adds	r3, r7, #7
    30da:	701a      	strb	r2, [r3, #0]
    30dc:	1dbb      	adds	r3, r7, #6
    30de:	1c0a      	adds	r2, r1, #0
    30e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    30e2:	1dfb      	adds	r3, r7, #7
    30e4:	781b      	ldrb	r3, [r3, #0]
    30e6:	2b01      	cmp	r3, #1
    30e8:	d008      	beq.n	30fc <system_apb_clock_set_divider+0x2c>
    30ea:	2b02      	cmp	r3, #2
    30ec:	d00b      	beq.n	3106 <system_apb_clock_set_divider+0x36>
    30ee:	2b00      	cmp	r3, #0
    30f0:	d10e      	bne.n	3110 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    30f2:	4a0b      	ldr	r2, [pc, #44]	; (3120 <system_apb_clock_set_divider+0x50>)
    30f4:	1dbb      	adds	r3, r7, #6
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	7253      	strb	r3, [r2, #9]
			break;
    30fa:	e00b      	b.n	3114 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    30fc:	4a08      	ldr	r2, [pc, #32]	; (3120 <system_apb_clock_set_divider+0x50>)
    30fe:	1dbb      	adds	r3, r7, #6
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	7293      	strb	r3, [r2, #10]
			break;
    3104:	e006      	b.n	3114 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    3106:	4a06      	ldr	r2, [pc, #24]	; (3120 <system_apb_clock_set_divider+0x50>)
    3108:	1dbb      	adds	r3, r7, #6
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	72d3      	strb	r3, [r2, #11]
			break;
    310e:	e001      	b.n	3114 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3110:	2317      	movs	r3, #23
    3112:	e000      	b.n	3116 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    3114:	2300      	movs	r3, #0
}
    3116:	0018      	movs	r0, r3
    3118:	46bd      	mov	sp, r7
    311a:	b002      	add	sp, #8
    311c:	bd80      	pop	{r7, pc}
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	40000400 	.word	0x40000400

00003124 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3124:	b580      	push	{r7, lr}
    3126:	b082      	sub	sp, #8
    3128:	af00      	add	r7, sp, #0
    312a:	0002      	movs	r2, r0
    312c:	1dfb      	adds	r3, r7, #7
    312e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3130:	4a08      	ldr	r2, [pc, #32]	; (3154 <system_flash_set_waitstates+0x30>)
    3132:	1dfb      	adds	r3, r7, #7
    3134:	781b      	ldrb	r3, [r3, #0]
    3136:	210f      	movs	r1, #15
    3138:	400b      	ands	r3, r1
    313a:	b2d9      	uxtb	r1, r3
    313c:	6853      	ldr	r3, [r2, #4]
    313e:	200f      	movs	r0, #15
    3140:	4001      	ands	r1, r0
    3142:	0049      	lsls	r1, r1, #1
    3144:	201e      	movs	r0, #30
    3146:	4383      	bics	r3, r0
    3148:	430b      	orrs	r3, r1
    314a:	6053      	str	r3, [r2, #4]
}
    314c:	46c0      	nop			; (mov r8, r8)
    314e:	46bd      	mov	sp, r7
    3150:	b002      	add	sp, #8
    3152:	bd80      	pop	{r7, pc}
    3154:	41004000 	.word	0x41004000

00003158 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3158:	b580      	push	{r7, lr}
    315a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    315c:	46c0      	nop			; (mov r8, r8)
    315e:	4b04      	ldr	r3, [pc, #16]	; (3170 <_system_dfll_wait_for_sync+0x18>)
    3160:	68db      	ldr	r3, [r3, #12]
    3162:	2210      	movs	r2, #16
    3164:	4013      	ands	r3, r2
    3166:	d0fa      	beq.n	315e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3168:	46c0      	nop			; (mov r8, r8)
    316a:	46bd      	mov	sp, r7
    316c:	bd80      	pop	{r7, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	40000800 	.word	0x40000800

00003174 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3174:	b580      	push	{r7, lr}
    3176:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3178:	4b0c      	ldr	r3, [pc, #48]	; (31ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    317a:	2202      	movs	r2, #2
    317c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    317e:	4b0c      	ldr	r3, [pc, #48]	; (31b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3180:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3182:	4a0a      	ldr	r2, [pc, #40]	; (31ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3184:	4b0b      	ldr	r3, [pc, #44]	; (31b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3186:	689b      	ldr	r3, [r3, #8]
    3188:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    318a:	4a08      	ldr	r2, [pc, #32]	; (31ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    318c:	4b09      	ldr	r3, [pc, #36]	; (31b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    318e:	685b      	ldr	r3, [r3, #4]
    3190:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3192:	4b06      	ldr	r3, [pc, #24]	; (31ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3194:	2200      	movs	r2, #0
    3196:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    319a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    319c:	4a03      	ldr	r2, [pc, #12]	; (31ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    319e:	4b05      	ldr	r3, [pc, #20]	; (31b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    31a0:	681b      	ldr	r3, [r3, #0]
    31a2:	b29b      	uxth	r3, r3
    31a4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	46bd      	mov	sp, r7
    31aa:	bd80      	pop	{r7, pc}
    31ac:	40000800 	.word	0x40000800
    31b0:	00003159 	.word	0x00003159
    31b4:	20000048 	.word	0x20000048

000031b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    31b8:	b580      	push	{r7, lr}
    31ba:	b082      	sub	sp, #8
    31bc:	af00      	add	r7, sp, #0
    31be:	0002      	movs	r2, r0
    31c0:	1dfb      	adds	r3, r7, #7
    31c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    31c4:	1dfb      	adds	r3, r7, #7
    31c6:	781b      	ldrb	r3, [r3, #0]
    31c8:	2b08      	cmp	r3, #8
    31ca:	d840      	bhi.n	324e <system_clock_source_get_hz+0x96>
    31cc:	009a      	lsls	r2, r3, #2
    31ce:	4b22      	ldr	r3, [pc, #136]	; (3258 <system_clock_source_get_hz+0xa0>)
    31d0:	18d3      	adds	r3, r2, r3
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    31d6:	4b21      	ldr	r3, [pc, #132]	; (325c <system_clock_source_get_hz+0xa4>)
    31d8:	691b      	ldr	r3, [r3, #16]
    31da:	e039      	b.n	3250 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    31dc:	4b20      	ldr	r3, [pc, #128]	; (3260 <system_clock_source_get_hz+0xa8>)
    31de:	6a1b      	ldr	r3, [r3, #32]
    31e0:	059b      	lsls	r3, r3, #22
    31e2:	0f9b      	lsrs	r3, r3, #30
    31e4:	b2db      	uxtb	r3, r3
    31e6:	001a      	movs	r2, r3
    31e8:	4b1e      	ldr	r3, [pc, #120]	; (3264 <system_clock_source_get_hz+0xac>)
    31ea:	40d3      	lsrs	r3, r2
    31ec:	e030      	b.n	3250 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    31ee:	2380      	movs	r3, #128	; 0x80
    31f0:	021b      	lsls	r3, r3, #8
    31f2:	e02d      	b.n	3250 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    31f4:	2380      	movs	r3, #128	; 0x80
    31f6:	021b      	lsls	r3, r3, #8
    31f8:	e02a      	b.n	3250 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    31fa:	4b18      	ldr	r3, [pc, #96]	; (325c <system_clock_source_get_hz+0xa4>)
    31fc:	695b      	ldr	r3, [r3, #20]
    31fe:	e027      	b.n	3250 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3200:	4b16      	ldr	r3, [pc, #88]	; (325c <system_clock_source_get_hz+0xa4>)
    3202:	681b      	ldr	r3, [r3, #0]
    3204:	2202      	movs	r2, #2
    3206:	4013      	ands	r3, r2
    3208:	d101      	bne.n	320e <system_clock_source_get_hz+0x56>
			return 0;
    320a:	2300      	movs	r3, #0
    320c:	e020      	b.n	3250 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    320e:	4b16      	ldr	r3, [pc, #88]	; (3268 <system_clock_source_get_hz+0xb0>)
    3210:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3212:	4b12      	ldr	r3, [pc, #72]	; (325c <system_clock_source_get_hz+0xa4>)
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	2204      	movs	r2, #4
    3218:	4013      	ands	r3, r2
    321a:	d009      	beq.n	3230 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    321c:	2000      	movs	r0, #0
    321e:	4b13      	ldr	r3, [pc, #76]	; (326c <system_clock_source_get_hz+0xb4>)
    3220:	4798      	blx	r3
    3222:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3224:	4b0d      	ldr	r3, [pc, #52]	; (325c <system_clock_source_get_hz+0xa4>)
    3226:	689b      	ldr	r3, [r3, #8]
    3228:	041b      	lsls	r3, r3, #16
    322a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    322c:	4353      	muls	r3, r2
    322e:	e00f      	b.n	3250 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3230:	4b0f      	ldr	r3, [pc, #60]	; (3270 <system_clock_source_get_hz+0xb8>)
    3232:	e00d      	b.n	3250 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3234:	4a0a      	ldr	r2, [pc, #40]	; (3260 <system_clock_source_get_hz+0xa8>)
    3236:	2350      	movs	r3, #80	; 0x50
    3238:	5cd3      	ldrb	r3, [r2, r3]
    323a:	b2db      	uxtb	r3, r3
    323c:	001a      	movs	r2, r3
    323e:	2304      	movs	r3, #4
    3240:	4013      	ands	r3, r2
    3242:	d101      	bne.n	3248 <system_clock_source_get_hz+0x90>
			return 0;
    3244:	2300      	movs	r3, #0
    3246:	e003      	b.n	3250 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    3248:	4b04      	ldr	r3, [pc, #16]	; (325c <system_clock_source_get_hz+0xa4>)
    324a:	68db      	ldr	r3, [r3, #12]
    324c:	e000      	b.n	3250 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    324e:	2300      	movs	r3, #0
	}
}
    3250:	0018      	movs	r0, r3
    3252:	46bd      	mov	sp, r7
    3254:	b002      	add	sp, #8
    3256:	bd80      	pop	{r7, pc}
    3258:	0000576c 	.word	0x0000576c
    325c:	20000048 	.word	0x20000048
    3260:	40000800 	.word	0x40000800
    3264:	007a1200 	.word	0x007a1200
    3268:	00003159 	.word	0x00003159
    326c:	00003a71 	.word	0x00003a71
    3270:	02dc6c00 	.word	0x02dc6c00

00003274 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3274:	b580      	push	{r7, lr}
    3276:	b084      	sub	sp, #16
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    327c:	4b1a      	ldr	r3, [pc, #104]	; (32e8 <system_clock_source_osc8m_set_config+0x74>)
    327e:	6a1b      	ldr	r3, [r3, #32]
    3280:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	1c1a      	adds	r2, r3, #0
    3288:	2303      	movs	r3, #3
    328a:	4013      	ands	r3, r2
    328c:	b2da      	uxtb	r2, r3
    328e:	230d      	movs	r3, #13
    3290:	18fb      	adds	r3, r7, r3
    3292:	2103      	movs	r1, #3
    3294:	400a      	ands	r2, r1
    3296:	0010      	movs	r0, r2
    3298:	781a      	ldrb	r2, [r3, #0]
    329a:	2103      	movs	r1, #3
    329c:	438a      	bics	r2, r1
    329e:	1c11      	adds	r1, r2, #0
    32a0:	1c02      	adds	r2, r0, #0
    32a2:	430a      	orrs	r2, r1
    32a4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	789a      	ldrb	r2, [r3, #2]
    32aa:	230c      	movs	r3, #12
    32ac:	18fb      	adds	r3, r7, r3
    32ae:	01d0      	lsls	r0, r2, #7
    32b0:	781a      	ldrb	r2, [r3, #0]
    32b2:	217f      	movs	r1, #127	; 0x7f
    32b4:	400a      	ands	r2, r1
    32b6:	1c11      	adds	r1, r2, #0
    32b8:	1c02      	adds	r2, r0, #0
    32ba:	430a      	orrs	r2, r1
    32bc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	785a      	ldrb	r2, [r3, #1]
    32c2:	230c      	movs	r3, #12
    32c4:	18fb      	adds	r3, r7, r3
    32c6:	2101      	movs	r1, #1
    32c8:	400a      	ands	r2, r1
    32ca:	0190      	lsls	r0, r2, #6
    32cc:	781a      	ldrb	r2, [r3, #0]
    32ce:	2140      	movs	r1, #64	; 0x40
    32d0:	438a      	bics	r2, r1
    32d2:	1c11      	adds	r1, r2, #0
    32d4:	1c02      	adds	r2, r0, #0
    32d6:	430a      	orrs	r2, r1
    32d8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    32da:	4b03      	ldr	r3, [pc, #12]	; (32e8 <system_clock_source_osc8m_set_config+0x74>)
    32dc:	68fa      	ldr	r2, [r7, #12]
    32de:	621a      	str	r2, [r3, #32]
}
    32e0:	46c0      	nop			; (mov r8, r8)
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}
    32e8:	40000800 	.word	0x40000800

000032ec <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	b084      	sub	sp, #16
    32f0:	af00      	add	r7, sp, #0
    32f2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    32f4:	4b2f      	ldr	r3, [pc, #188]	; (33b4 <system_clock_source_osc32k_set_config+0xc8>)
    32f6:	699b      	ldr	r3, [r3, #24]
    32f8:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	785a      	ldrb	r2, [r3, #1]
    32fe:	230c      	movs	r3, #12
    3300:	18fb      	adds	r3, r7, r3
    3302:	2101      	movs	r1, #1
    3304:	400a      	ands	r2, r1
    3306:	00d0      	lsls	r0, r2, #3
    3308:	781a      	ldrb	r2, [r3, #0]
    330a:	2108      	movs	r1, #8
    330c:	438a      	bics	r2, r1
    330e:	1c11      	adds	r1, r2, #0
    3310:	1c02      	adds	r2, r0, #0
    3312:	430a      	orrs	r2, r1
    3314:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	789a      	ldrb	r2, [r3, #2]
    331a:	230c      	movs	r3, #12
    331c:	18fb      	adds	r3, r7, r3
    331e:	2101      	movs	r1, #1
    3320:	400a      	ands	r2, r1
    3322:	0090      	lsls	r0, r2, #2
    3324:	781a      	ldrb	r2, [r3, #0]
    3326:	2104      	movs	r1, #4
    3328:	438a      	bics	r2, r1
    332a:	1c11      	adds	r1, r2, #0
    332c:	1c02      	adds	r2, r0, #0
    332e:	430a      	orrs	r2, r1
    3330:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	781b      	ldrb	r3, [r3, #0]
    3336:	1c1a      	adds	r2, r3, #0
    3338:	2307      	movs	r3, #7
    333a:	4013      	ands	r3, r2
    333c:	b2da      	uxtb	r2, r3
    333e:	230d      	movs	r3, #13
    3340:	18fb      	adds	r3, r7, r3
    3342:	2107      	movs	r1, #7
    3344:	400a      	ands	r2, r1
    3346:	0010      	movs	r0, r2
    3348:	781a      	ldrb	r2, [r3, #0]
    334a:	2107      	movs	r1, #7
    334c:	438a      	bics	r2, r1
    334e:	1c11      	adds	r1, r2, #0
    3350:	1c02      	adds	r2, r0, #0
    3352:	430a      	orrs	r2, r1
    3354:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	791a      	ldrb	r2, [r3, #4]
    335a:	230c      	movs	r3, #12
    335c:	18fb      	adds	r3, r7, r3
    335e:	01d0      	lsls	r0, r2, #7
    3360:	781a      	ldrb	r2, [r3, #0]
    3362:	217f      	movs	r1, #127	; 0x7f
    3364:	400a      	ands	r2, r1
    3366:	1c11      	adds	r1, r2, #0
    3368:	1c02      	adds	r2, r0, #0
    336a:	430a      	orrs	r2, r1
    336c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    336e:	687b      	ldr	r3, [r7, #4]
    3370:	78da      	ldrb	r2, [r3, #3]
    3372:	230c      	movs	r3, #12
    3374:	18fb      	adds	r3, r7, r3
    3376:	2101      	movs	r1, #1
    3378:	400a      	ands	r2, r1
    337a:	0190      	lsls	r0, r2, #6
    337c:	781a      	ldrb	r2, [r3, #0]
    337e:	2140      	movs	r1, #64	; 0x40
    3380:	438a      	bics	r2, r1
    3382:	1c11      	adds	r1, r2, #0
    3384:	1c02      	adds	r2, r0, #0
    3386:	430a      	orrs	r2, r1
    3388:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	795a      	ldrb	r2, [r3, #5]
    338e:	230d      	movs	r3, #13
    3390:	18fb      	adds	r3, r7, r3
    3392:	2101      	movs	r1, #1
    3394:	400a      	ands	r2, r1
    3396:	0110      	lsls	r0, r2, #4
    3398:	781a      	ldrb	r2, [r3, #0]
    339a:	2110      	movs	r1, #16
    339c:	438a      	bics	r2, r1
    339e:	1c11      	adds	r1, r2, #0
    33a0:	1c02      	adds	r2, r0, #0
    33a2:	430a      	orrs	r2, r1
    33a4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    33a6:	4b03      	ldr	r3, [pc, #12]	; (33b4 <system_clock_source_osc32k_set_config+0xc8>)
    33a8:	68fa      	ldr	r2, [r7, #12]
    33aa:	619a      	str	r2, [r3, #24]
}
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	46bd      	mov	sp, r7
    33b0:	b004      	add	sp, #16
    33b2:	bd80      	pop	{r7, pc}
    33b4:	40000800 	.word	0x40000800

000033b8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	0002      	movs	r2, r0
    33c0:	1dfb      	adds	r3, r7, #7
    33c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    33c4:	1dfb      	adds	r3, r7, #7
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	2b08      	cmp	r3, #8
    33ca:	d83b      	bhi.n	3444 <system_clock_source_enable+0x8c>
    33cc:	009a      	lsls	r2, r3, #2
    33ce:	4b21      	ldr	r3, [pc, #132]	; (3454 <system_clock_source_enable+0x9c>)
    33d0:	18d3      	adds	r3, r2, r3
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    33d6:	4b20      	ldr	r3, [pc, #128]	; (3458 <system_clock_source_enable+0xa0>)
    33d8:	4a1f      	ldr	r2, [pc, #124]	; (3458 <system_clock_source_enable+0xa0>)
    33da:	6a12      	ldr	r2, [r2, #32]
    33dc:	2102      	movs	r1, #2
    33de:	430a      	orrs	r2, r1
    33e0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    33e2:	2300      	movs	r3, #0
    33e4:	e031      	b.n	344a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    33e6:	4b1c      	ldr	r3, [pc, #112]	; (3458 <system_clock_source_enable+0xa0>)
    33e8:	4a1b      	ldr	r2, [pc, #108]	; (3458 <system_clock_source_enable+0xa0>)
    33ea:	6992      	ldr	r2, [r2, #24]
    33ec:	2102      	movs	r1, #2
    33ee:	430a      	orrs	r2, r1
    33f0:	619a      	str	r2, [r3, #24]
		break;
    33f2:	e029      	b.n	3448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    33f4:	4a18      	ldr	r2, [pc, #96]	; (3458 <system_clock_source_enable+0xa0>)
    33f6:	4b18      	ldr	r3, [pc, #96]	; (3458 <system_clock_source_enable+0xa0>)
    33f8:	8a1b      	ldrh	r3, [r3, #16]
    33fa:	b29b      	uxth	r3, r3
    33fc:	2102      	movs	r1, #2
    33fe:	430b      	orrs	r3, r1
    3400:	b29b      	uxth	r3, r3
    3402:	8213      	strh	r3, [r2, #16]
		break;
    3404:	e020      	b.n	3448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3406:	4a14      	ldr	r2, [pc, #80]	; (3458 <system_clock_source_enable+0xa0>)
    3408:	4b13      	ldr	r3, [pc, #76]	; (3458 <system_clock_source_enable+0xa0>)
    340a:	8a9b      	ldrh	r3, [r3, #20]
    340c:	b29b      	uxth	r3, r3
    340e:	2102      	movs	r1, #2
    3410:	430b      	orrs	r3, r1
    3412:	b29b      	uxth	r3, r3
    3414:	8293      	strh	r3, [r2, #20]
		break;
    3416:	e017      	b.n	3448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3418:	4b10      	ldr	r3, [pc, #64]	; (345c <system_clock_source_enable+0xa4>)
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	2202      	movs	r2, #2
    341e:	431a      	orrs	r2, r3
    3420:	4b0e      	ldr	r3, [pc, #56]	; (345c <system_clock_source_enable+0xa4>)
    3422:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3424:	4b0e      	ldr	r3, [pc, #56]	; (3460 <system_clock_source_enable+0xa8>)
    3426:	4798      	blx	r3
		break;
    3428:	e00e      	b.n	3448 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    342a:	4a0b      	ldr	r2, [pc, #44]	; (3458 <system_clock_source_enable+0xa0>)
    342c:	490a      	ldr	r1, [pc, #40]	; (3458 <system_clock_source_enable+0xa0>)
    342e:	2344      	movs	r3, #68	; 0x44
    3430:	5ccb      	ldrb	r3, [r1, r3]
    3432:	b2db      	uxtb	r3, r3
    3434:	2102      	movs	r1, #2
    3436:	430b      	orrs	r3, r1
    3438:	b2d9      	uxtb	r1, r3
    343a:	2344      	movs	r3, #68	; 0x44
    343c:	54d1      	strb	r1, [r2, r3]
		break;
    343e:	e003      	b.n	3448 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3440:	2300      	movs	r3, #0
    3442:	e002      	b.n	344a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3444:	2317      	movs	r3, #23
    3446:	e000      	b.n	344a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3448:	2300      	movs	r3, #0
}
    344a:	0018      	movs	r0, r3
    344c:	46bd      	mov	sp, r7
    344e:	b002      	add	sp, #8
    3450:	bd80      	pop	{r7, pc}
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	00005790 	.word	0x00005790
    3458:	40000800 	.word	0x40000800
    345c:	20000048 	.word	0x20000048
    3460:	00003175 	.word	0x00003175

00003464 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    346a:	003b      	movs	r3, r7
    346c:	2201      	movs	r2, #1
    346e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3470:	2300      	movs	r3, #0
    3472:	607b      	str	r3, [r7, #4]
    3474:	e009      	b.n	348a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	b2db      	uxtb	r3, r3
    347a:	003a      	movs	r2, r7
    347c:	0011      	movs	r1, r2
    347e:	0018      	movs	r0, r3
    3480:	4b05      	ldr	r3, [pc, #20]	; (3498 <_switch_peripheral_gclk+0x34>)
    3482:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	3301      	adds	r3, #1
    3488:	607b      	str	r3, [r7, #4]
    348a:	687b      	ldr	r3, [r7, #4]
    348c:	2b24      	cmp	r3, #36	; 0x24
    348e:	d9f2      	bls.n	3476 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    3490:	46c0      	nop			; (mov r8, r8)
    3492:	46bd      	mov	sp, r7
    3494:	b002      	add	sp, #8
    3496:	bd80      	pop	{r7, pc}
    3498:	0000394d 	.word	0x0000394d

0000349c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    349c:	b580      	push	{r7, lr}
    349e:	b0a2      	sub	sp, #136	; 0x88
    34a0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    34a2:	4b4f      	ldr	r3, [pc, #316]	; (35e0 <system_clock_init+0x144>)
    34a4:	22c2      	movs	r2, #194	; 0xc2
    34a6:	00d2      	lsls	r2, r2, #3
    34a8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    34aa:	2000      	movs	r0, #0
    34ac:	4b4d      	ldr	r3, [pc, #308]	; (35e4 <system_clock_init+0x148>)
    34ae:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    34b0:	4b4d      	ldr	r3, [pc, #308]	; (35e8 <system_clock_init+0x14c>)
    34b2:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    34b4:	4a4a      	ldr	r2, [pc, #296]	; (35e0 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    34b6:	4b4d      	ldr	r3, [pc, #308]	; (35ec <system_clock_init+0x150>)
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    34bc:	b2db      	uxtb	r3, r3
    34be:	1c19      	adds	r1, r3, #0
    34c0:	237f      	movs	r3, #127	; 0x7f
    34c2:	400b      	ands	r3, r1
    34c4:	b2d9      	uxtb	r1, r3
    34c6:	6993      	ldr	r3, [r2, #24]
    34c8:	207f      	movs	r0, #127	; 0x7f
    34ca:	4001      	ands	r1, r0
    34cc:	0409      	lsls	r1, r1, #16
    34ce:	4848      	ldr	r0, [pc, #288]	; (35f0 <system_clock_init+0x154>)
    34d0:	4003      	ands	r3, r0
    34d2:	430b      	orrs	r3, r1
    34d4:	6193      	str	r3, [r2, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    34d6:	2380      	movs	r3, #128	; 0x80
    34d8:	18fb      	adds	r3, r7, r3
    34da:	0018      	movs	r0, r3
    34dc:	4b45      	ldr	r3, [pc, #276]	; (35f4 <system_clock_init+0x158>)
    34de:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    34e0:	2380      	movs	r3, #128	; 0x80
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	2207      	movs	r2, #7
    34e6:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    34e8:	2380      	movs	r3, #128	; 0x80
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	2201      	movs	r2, #1
    34ee:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    34f0:	2380      	movs	r3, #128	; 0x80
    34f2:	18fb      	adds	r3, r7, r3
    34f4:	2201      	movs	r2, #1
    34f6:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    34f8:	2380      	movs	r3, #128	; 0x80
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	2201      	movs	r2, #1
    34fe:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    3500:	2380      	movs	r3, #128	; 0x80
    3502:	18fb      	adds	r3, r7, r3
    3504:	2200      	movs	r2, #0
    3506:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    3508:	2380      	movs	r3, #128	; 0x80
    350a:	18fb      	adds	r3, r7, r3
    350c:	0018      	movs	r0, r3
    350e:	4b3a      	ldr	r3, [pc, #232]	; (35f8 <system_clock_init+0x15c>)
    3510:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    3512:	2004      	movs	r0, #4
    3514:	4b39      	ldr	r3, [pc, #228]	; (35fc <system_clock_init+0x160>)
    3516:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3518:	237c      	movs	r3, #124	; 0x7c
    351a:	18fb      	adds	r3, r7, r3
    351c:	0018      	movs	r0, r3
    351e:	4b38      	ldr	r3, [pc, #224]	; (3600 <system_clock_init+0x164>)
    3520:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3522:	237c      	movs	r3, #124	; 0x7c
    3524:	18fb      	adds	r3, r7, r3
    3526:	2200      	movs	r2, #0
    3528:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    352a:	237c      	movs	r3, #124	; 0x7c
    352c:	18fb      	adds	r3, r7, r3
    352e:	2201      	movs	r2, #1
    3530:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3532:	237c      	movs	r3, #124	; 0x7c
    3534:	18fb      	adds	r3, r7, r3
    3536:	2200      	movs	r2, #0
    3538:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    353a:	237c      	movs	r3, #124	; 0x7c
    353c:	18fb      	adds	r3, r7, r3
    353e:	0018      	movs	r0, r3
    3540:	4b30      	ldr	r3, [pc, #192]	; (3604 <system_clock_init+0x168>)
    3542:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3544:	2006      	movs	r0, #6
    3546:	4b2d      	ldr	r3, [pc, #180]	; (35fc <system_clock_init+0x160>)
    3548:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    354a:	4b2f      	ldr	r3, [pc, #188]	; (3608 <system_clock_init+0x16c>)
    354c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    354e:	2358      	movs	r3, #88	; 0x58
    3550:	18fb      	adds	r3, r7, r3
    3552:	0018      	movs	r0, r3
    3554:	4b2d      	ldr	r3, [pc, #180]	; (360c <system_clock_init+0x170>)
    3556:	4798      	blx	r3
    3558:	2358      	movs	r3, #88	; 0x58
    355a:	18fb      	adds	r3, r7, r3
    355c:	2204      	movs	r2, #4
    355e:	701a      	strb	r2, [r3, #0]
    3560:	2358      	movs	r3, #88	; 0x58
    3562:	18fb      	adds	r3, r7, r3
    3564:	2220      	movs	r2, #32
    3566:	605a      	str	r2, [r3, #4]
    3568:	2358      	movs	r3, #88	; 0x58
    356a:	18fb      	adds	r3, r7, r3
    356c:	2200      	movs	r2, #0
    356e:	721a      	strb	r2, [r3, #8]
    3570:	2358      	movs	r3, #88	; 0x58
    3572:	18fb      	adds	r3, r7, r3
    3574:	2200      	movs	r2, #0
    3576:	725a      	strb	r2, [r3, #9]
    3578:	2358      	movs	r3, #88	; 0x58
    357a:	18fb      	adds	r3, r7, r3
    357c:	0019      	movs	r1, r3
    357e:	2002      	movs	r0, #2
    3580:	4b23      	ldr	r3, [pc, #140]	; (3610 <system_clock_init+0x174>)
    3582:	4798      	blx	r3
    3584:	2002      	movs	r0, #2
    3586:	4b23      	ldr	r3, [pc, #140]	; (3614 <system_clock_init+0x178>)
    3588:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    358a:	2000      	movs	r0, #0
    358c:	4b22      	ldr	r3, [pc, #136]	; (3618 <system_clock_init+0x17c>)
    358e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3590:	2100      	movs	r1, #0
    3592:	2000      	movs	r0, #0
    3594:	4b21      	ldr	r3, [pc, #132]	; (361c <system_clock_init+0x180>)
    3596:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3598:	2100      	movs	r1, #0
    359a:	2001      	movs	r0, #1
    359c:	4b1f      	ldr	r3, [pc, #124]	; (361c <system_clock_init+0x180>)
    359e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    35a0:	2100      	movs	r1, #0
    35a2:	2002      	movs	r0, #2
    35a4:	4b1d      	ldr	r3, [pc, #116]	; (361c <system_clock_init+0x180>)
    35a6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    35a8:	1d3b      	adds	r3, r7, #4
    35aa:	0018      	movs	r0, r3
    35ac:	4b17      	ldr	r3, [pc, #92]	; (360c <system_clock_init+0x170>)
    35ae:	4798      	blx	r3
    35b0:	1d3b      	adds	r3, r7, #4
    35b2:	2206      	movs	r2, #6
    35b4:	701a      	strb	r2, [r3, #0]
    35b6:	1d3b      	adds	r3, r7, #4
    35b8:	2201      	movs	r2, #1
    35ba:	605a      	str	r2, [r3, #4]
    35bc:	1d3b      	adds	r3, r7, #4
    35be:	2200      	movs	r2, #0
    35c0:	721a      	strb	r2, [r3, #8]
    35c2:	1d3b      	adds	r3, r7, #4
    35c4:	2200      	movs	r2, #0
    35c6:	725a      	strb	r2, [r3, #9]
    35c8:	1d3b      	adds	r3, r7, #4
    35ca:	0019      	movs	r1, r3
    35cc:	2000      	movs	r0, #0
    35ce:	4b10      	ldr	r3, [pc, #64]	; (3610 <system_clock_init+0x174>)
    35d0:	4798      	blx	r3
    35d2:	2000      	movs	r0, #0
    35d4:	4b0f      	ldr	r3, [pc, #60]	; (3614 <system_clock_init+0x178>)
    35d6:	4798      	blx	r3
#endif
}
    35d8:	46c0      	nop			; (mov r8, r8)
    35da:	46bd      	mov	sp, r7
    35dc:	b022      	add	sp, #136	; 0x88
    35de:	bd80      	pop	{r7, pc}
    35e0:	40000800 	.word	0x40000800
    35e4:	00003125 	.word	0x00003125
    35e8:	00003465 	.word	0x00003465
    35ec:	00806024 	.word	0x00806024
    35f0:	ff80ffff 	.word	0xff80ffff
    35f4:	00003059 	.word	0x00003059
    35f8:	000032ed 	.word	0x000032ed
    35fc:	000033b9 	.word	0x000033b9
    3600:	0000308d 	.word	0x0000308d
    3604:	00003275 	.word	0x00003275
    3608:	000036c5 	.word	0x000036c5
    360c:	00003029 	.word	0x00003029
    3610:	000036f5 	.word	0x000036f5
    3614:	00003819 	.word	0x00003819
    3618:	000030b1 	.word	0x000030b1
    361c:	000030d1 	.word	0x000030d1

00003620 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3620:	b580      	push	{r7, lr}
    3622:	b082      	sub	sp, #8
    3624:	af00      	add	r7, sp, #0
    3626:	0002      	movs	r2, r0
    3628:	6039      	str	r1, [r7, #0]
    362a:	1dfb      	adds	r3, r7, #7
    362c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    362e:	1dfb      	adds	r3, r7, #7
    3630:	781b      	ldrb	r3, [r3, #0]
    3632:	2b01      	cmp	r3, #1
    3634:	d00a      	beq.n	364c <system_apb_clock_set_mask+0x2c>
    3636:	2b02      	cmp	r3, #2
    3638:	d00f      	beq.n	365a <system_apb_clock_set_mask+0x3a>
    363a:	2b00      	cmp	r3, #0
    363c:	d114      	bne.n	3668 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    363e:	4b0e      	ldr	r3, [pc, #56]	; (3678 <system_apb_clock_set_mask+0x58>)
    3640:	4a0d      	ldr	r2, [pc, #52]	; (3678 <system_apb_clock_set_mask+0x58>)
    3642:	6991      	ldr	r1, [r2, #24]
    3644:	683a      	ldr	r2, [r7, #0]
    3646:	430a      	orrs	r2, r1
    3648:	619a      	str	r2, [r3, #24]
			break;
    364a:	e00f      	b.n	366c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    364c:	4b0a      	ldr	r3, [pc, #40]	; (3678 <system_apb_clock_set_mask+0x58>)
    364e:	4a0a      	ldr	r2, [pc, #40]	; (3678 <system_apb_clock_set_mask+0x58>)
    3650:	69d1      	ldr	r1, [r2, #28]
    3652:	683a      	ldr	r2, [r7, #0]
    3654:	430a      	orrs	r2, r1
    3656:	61da      	str	r2, [r3, #28]
			break;
    3658:	e008      	b.n	366c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <system_apb_clock_set_mask+0x58>)
    365c:	4a06      	ldr	r2, [pc, #24]	; (3678 <system_apb_clock_set_mask+0x58>)
    365e:	6a11      	ldr	r1, [r2, #32]
    3660:	683a      	ldr	r2, [r7, #0]
    3662:	430a      	orrs	r2, r1
    3664:	621a      	str	r2, [r3, #32]
			break;
    3666:	e001      	b.n	366c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3668:	2317      	movs	r3, #23
    366a:	e000      	b.n	366e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    366c:	2300      	movs	r3, #0
}
    366e:	0018      	movs	r0, r3
    3670:	46bd      	mov	sp, r7
    3672:	b002      	add	sp, #8
    3674:	bd80      	pop	{r7, pc}
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	40000400 	.word	0x40000400

0000367c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    367c:	b580      	push	{r7, lr}
    367e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3680:	4b02      	ldr	r3, [pc, #8]	; (368c <system_interrupt_enter_critical_section+0x10>)
    3682:	4798      	blx	r3
}
    3684:	46c0      	nop			; (mov r8, r8)
    3686:	46bd      	mov	sp, r7
    3688:	bd80      	pop	{r7, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	00002f95 	.word	0x00002f95

00003690 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    3690:	b580      	push	{r7, lr}
    3692:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3694:	4b02      	ldr	r3, [pc, #8]	; (36a0 <system_interrupt_leave_critical_section+0x10>)
    3696:	4798      	blx	r3
}
    3698:	46c0      	nop			; (mov r8, r8)
    369a:	46bd      	mov	sp, r7
    369c:	bd80      	pop	{r7, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	00002fe9 	.word	0x00002fe9

000036a4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    36a4:	b580      	push	{r7, lr}
    36a6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    36a8:	4b05      	ldr	r3, [pc, #20]	; (36c0 <system_gclk_is_syncing+0x1c>)
    36aa:	785b      	ldrb	r3, [r3, #1]
    36ac:	b2db      	uxtb	r3, r3
    36ae:	b25b      	sxtb	r3, r3
    36b0:	2b00      	cmp	r3, #0
    36b2:	da01      	bge.n	36b8 <system_gclk_is_syncing+0x14>
		return true;
    36b4:	2301      	movs	r3, #1
    36b6:	e000      	b.n	36ba <system_gclk_is_syncing+0x16>
	}

	return false;
    36b8:	2300      	movs	r3, #0
}
    36ba:	0018      	movs	r0, r3
    36bc:	46bd      	mov	sp, r7
    36be:	bd80      	pop	{r7, pc}
    36c0:	40000c00 	.word	0x40000c00

000036c4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    36c8:	2108      	movs	r1, #8
    36ca:	2000      	movs	r0, #0
    36cc:	4b07      	ldr	r3, [pc, #28]	; (36ec <system_gclk_init+0x28>)
    36ce:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    36d0:	4b07      	ldr	r3, [pc, #28]	; (36f0 <system_gclk_init+0x2c>)
    36d2:	2201      	movs	r2, #1
    36d4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	4b05      	ldr	r3, [pc, #20]	; (36f0 <system_gclk_init+0x2c>)
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	b2db      	uxtb	r3, r3
    36de:	001a      	movs	r2, r3
    36e0:	2301      	movs	r3, #1
    36e2:	4013      	ands	r3, r2
    36e4:	d1f8      	bne.n	36d8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	46bd      	mov	sp, r7
    36ea:	bd80      	pop	{r7, pc}
    36ec:	00003621 	.word	0x00003621
    36f0:	40000c00 	.word	0x40000c00

000036f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	b086      	sub	sp, #24
    36f8:	af00      	add	r7, sp, #0
    36fa:	0002      	movs	r2, r0
    36fc:	6039      	str	r1, [r7, #0]
    36fe:	1dfb      	adds	r3, r7, #7
    3700:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3702:	1dfb      	adds	r3, r7, #7
    3704:	781b      	ldrb	r3, [r3, #0]
    3706:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3708:	1dfb      	adds	r3, r7, #7
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	021b      	lsls	r3, r3, #8
    3714:	001a      	movs	r2, r3
    3716:	697b      	ldr	r3, [r7, #20]
    3718:	4313      	orrs	r3, r2
    371a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    371c:	683b      	ldr	r3, [r7, #0]
    371e:	785b      	ldrb	r3, [r3, #1]
    3720:	2b00      	cmp	r3, #0
    3722:	d004      	beq.n	372e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3724:	697b      	ldr	r3, [r7, #20]
    3726:	2280      	movs	r2, #128	; 0x80
    3728:	02d2      	lsls	r2, r2, #11
    372a:	4313      	orrs	r3, r2
    372c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    372e:	683b      	ldr	r3, [r7, #0]
    3730:	7a5b      	ldrb	r3, [r3, #9]
    3732:	2b00      	cmp	r3, #0
    3734:	d004      	beq.n	3740 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3736:	697b      	ldr	r3, [r7, #20]
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	0312      	lsls	r2, r2, #12
    373c:	4313      	orrs	r3, r2
    373e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3740:	683b      	ldr	r3, [r7, #0]
    3742:	685b      	ldr	r3, [r3, #4]
    3744:	2b01      	cmp	r3, #1
    3746:	d92c      	bls.n	37a2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3748:	683b      	ldr	r3, [r7, #0]
    374a:	685a      	ldr	r2, [r3, #4]
    374c:	683b      	ldr	r3, [r7, #0]
    374e:	685b      	ldr	r3, [r3, #4]
    3750:	3b01      	subs	r3, #1
    3752:	4013      	ands	r3, r2
    3754:	d11a      	bne.n	378c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3756:	2300      	movs	r3, #0
    3758:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    375a:	2302      	movs	r3, #2
    375c:	60bb      	str	r3, [r7, #8]
    375e:	e005      	b.n	376c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3760:	68fb      	ldr	r3, [r7, #12]
    3762:	3301      	adds	r3, #1
    3764:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3766:	68bb      	ldr	r3, [r7, #8]
    3768:	005b      	lsls	r3, r3, #1
    376a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	685a      	ldr	r2, [r3, #4]
    3770:	68bb      	ldr	r3, [r7, #8]
    3772:	429a      	cmp	r2, r3
    3774:	d8f4      	bhi.n	3760 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	021b      	lsls	r3, r3, #8
    377a:	693a      	ldr	r2, [r7, #16]
    377c:	4313      	orrs	r3, r2
    377e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3780:	697b      	ldr	r3, [r7, #20]
    3782:	2280      	movs	r2, #128	; 0x80
    3784:	0352      	lsls	r2, r2, #13
    3786:	4313      	orrs	r3, r2
    3788:	617b      	str	r3, [r7, #20]
    378a:	e00a      	b.n	37a2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    378c:	683b      	ldr	r3, [r7, #0]
    378e:	685b      	ldr	r3, [r3, #4]
    3790:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    3792:	693a      	ldr	r2, [r7, #16]
    3794:	4313      	orrs	r3, r2
    3796:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3798:	697b      	ldr	r3, [r7, #20]
    379a:	2280      	movs	r2, #128	; 0x80
    379c:	0292      	lsls	r2, r2, #10
    379e:	4313      	orrs	r3, r2
    37a0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    37a2:	683b      	ldr	r3, [r7, #0]
    37a4:	7a1b      	ldrb	r3, [r3, #8]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d004      	beq.n	37b4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    37aa:	697b      	ldr	r3, [r7, #20]
    37ac:	2280      	movs	r2, #128	; 0x80
    37ae:	0392      	lsls	r2, r2, #14
    37b0:	4313      	orrs	r3, r2
    37b2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    37b4:	46c0      	nop			; (mov r8, r8)
    37b6:	4b13      	ldr	r3, [pc, #76]	; (3804 <system_gclk_gen_set_config+0x110>)
    37b8:	4798      	blx	r3
    37ba:	1e03      	subs	r3, r0, #0
    37bc:	d1fb      	bne.n	37b6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    37be:	4b12      	ldr	r3, [pc, #72]	; (3808 <system_gclk_gen_set_config+0x114>)
    37c0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    37c2:	4a12      	ldr	r2, [pc, #72]	; (380c <system_gclk_gen_set_config+0x118>)
    37c4:	1dfb      	adds	r3, r7, #7
    37c6:	781b      	ldrb	r3, [r3, #0]
    37c8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	4b0d      	ldr	r3, [pc, #52]	; (3804 <system_gclk_gen_set_config+0x110>)
    37ce:	4798      	blx	r3
    37d0:	1e03      	subs	r3, r0, #0
    37d2:	d1fb      	bne.n	37cc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    37d4:	4b0e      	ldr	r3, [pc, #56]	; (3810 <system_gclk_gen_set_config+0x11c>)
    37d6:	693a      	ldr	r2, [r7, #16]
    37d8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	4b09      	ldr	r3, [pc, #36]	; (3804 <system_gclk_gen_set_config+0x110>)
    37de:	4798      	blx	r3
    37e0:	1e03      	subs	r3, r0, #0
    37e2:	d1fb      	bne.n	37dc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    37e4:	4b0a      	ldr	r3, [pc, #40]	; (3810 <system_gclk_gen_set_config+0x11c>)
    37e6:	4a0a      	ldr	r2, [pc, #40]	; (3810 <system_gclk_gen_set_config+0x11c>)
    37e8:	6851      	ldr	r1, [r2, #4]
    37ea:	2280      	movs	r2, #128	; 0x80
    37ec:	0252      	lsls	r2, r2, #9
    37ee:	4011      	ands	r1, r2
    37f0:	697a      	ldr	r2, [r7, #20]
    37f2:	430a      	orrs	r2, r1
    37f4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    37f6:	4b07      	ldr	r3, [pc, #28]	; (3814 <system_gclk_gen_set_config+0x120>)
    37f8:	4798      	blx	r3
}
    37fa:	46c0      	nop			; (mov r8, r8)
    37fc:	46bd      	mov	sp, r7
    37fe:	b006      	add	sp, #24
    3800:	bd80      	pop	{r7, pc}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	000036a5 	.word	0x000036a5
    3808:	0000367d 	.word	0x0000367d
    380c:	40000c08 	.word	0x40000c08
    3810:	40000c00 	.word	0x40000c00
    3814:	00003691 	.word	0x00003691

00003818 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3818:	b580      	push	{r7, lr}
    381a:	b082      	sub	sp, #8
    381c:	af00      	add	r7, sp, #0
    381e:	0002      	movs	r2, r0
    3820:	1dfb      	adds	r3, r7, #7
    3822:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3824:	46c0      	nop			; (mov r8, r8)
    3826:	4b0e      	ldr	r3, [pc, #56]	; (3860 <system_gclk_gen_enable+0x48>)
    3828:	4798      	blx	r3
    382a:	1e03      	subs	r3, r0, #0
    382c:	d1fb      	bne.n	3826 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    382e:	4b0d      	ldr	r3, [pc, #52]	; (3864 <system_gclk_gen_enable+0x4c>)
    3830:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3832:	4a0d      	ldr	r2, [pc, #52]	; (3868 <system_gclk_gen_enable+0x50>)
    3834:	1dfb      	adds	r3, r7, #7
    3836:	781b      	ldrb	r3, [r3, #0]
    3838:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	4b08      	ldr	r3, [pc, #32]	; (3860 <system_gclk_gen_enable+0x48>)
    383e:	4798      	blx	r3
    3840:	1e03      	subs	r3, r0, #0
    3842:	d1fb      	bne.n	383c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3844:	4b09      	ldr	r3, [pc, #36]	; (386c <system_gclk_gen_enable+0x54>)
    3846:	4a09      	ldr	r2, [pc, #36]	; (386c <system_gclk_gen_enable+0x54>)
    3848:	6852      	ldr	r2, [r2, #4]
    384a:	2180      	movs	r1, #128	; 0x80
    384c:	0249      	lsls	r1, r1, #9
    384e:	430a      	orrs	r2, r1
    3850:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3852:	4b07      	ldr	r3, [pc, #28]	; (3870 <system_gclk_gen_enable+0x58>)
    3854:	4798      	blx	r3
}
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	46bd      	mov	sp, r7
    385a:	b002      	add	sp, #8
    385c:	bd80      	pop	{r7, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	000036a5 	.word	0x000036a5
    3864:	0000367d 	.word	0x0000367d
    3868:	40000c04 	.word	0x40000c04
    386c:	40000c00 	.word	0x40000c00
    3870:	00003691 	.word	0x00003691

00003874 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3874:	b580      	push	{r7, lr}
    3876:	b086      	sub	sp, #24
    3878:	af00      	add	r7, sp, #0
    387a:	0002      	movs	r2, r0
    387c:	1dfb      	adds	r3, r7, #7
    387e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3880:	46c0      	nop			; (mov r8, r8)
    3882:	4b2a      	ldr	r3, [pc, #168]	; (392c <system_gclk_gen_get_hz+0xb8>)
    3884:	4798      	blx	r3
    3886:	1e03      	subs	r3, r0, #0
    3888:	d1fb      	bne.n	3882 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    388a:	4b29      	ldr	r3, [pc, #164]	; (3930 <system_gclk_gen_get_hz+0xbc>)
    388c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    388e:	4a29      	ldr	r2, [pc, #164]	; (3934 <system_gclk_gen_get_hz+0xc0>)
    3890:	1dfb      	adds	r3, r7, #7
    3892:	781b      	ldrb	r3, [r3, #0]
    3894:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	4b24      	ldr	r3, [pc, #144]	; (392c <system_gclk_gen_get_hz+0xb8>)
    389a:	4798      	blx	r3
    389c:	1e03      	subs	r3, r0, #0
    389e:	d1fb      	bne.n	3898 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    38a0:	4b25      	ldr	r3, [pc, #148]	; (3938 <system_gclk_gen_get_hz+0xc4>)
    38a2:	685b      	ldr	r3, [r3, #4]
    38a4:	04db      	lsls	r3, r3, #19
    38a6:	0edb      	lsrs	r3, r3, #27
    38a8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    38aa:	0018      	movs	r0, r3
    38ac:	4b23      	ldr	r3, [pc, #140]	; (393c <system_gclk_gen_get_hz+0xc8>)
    38ae:	4798      	blx	r3
    38b0:	0003      	movs	r3, r0
    38b2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    38b4:	4a1f      	ldr	r2, [pc, #124]	; (3934 <system_gclk_gen_get_hz+0xc0>)
    38b6:	1dfb      	adds	r3, r7, #7
    38b8:	781b      	ldrb	r3, [r3, #0]
    38ba:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    38bc:	4b1e      	ldr	r3, [pc, #120]	; (3938 <system_gclk_gen_get_hz+0xc4>)
    38be:	685b      	ldr	r3, [r3, #4]
    38c0:	02db      	lsls	r3, r3, #11
    38c2:	0fdb      	lsrs	r3, r3, #31
    38c4:	b2da      	uxtb	r2, r3
    38c6:	2313      	movs	r3, #19
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    38cc:	4a1c      	ldr	r2, [pc, #112]	; (3940 <system_gclk_gen_get_hz+0xcc>)
    38ce:	1dfb      	adds	r3, r7, #7
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    38d4:	46c0      	nop			; (mov r8, r8)
    38d6:	4b15      	ldr	r3, [pc, #84]	; (392c <system_gclk_gen_get_hz+0xb8>)
    38d8:	4798      	blx	r3
    38da:	1e03      	subs	r3, r0, #0
    38dc:	d1fb      	bne.n	38d6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    38de:	4b16      	ldr	r3, [pc, #88]	; (3938 <system_gclk_gen_get_hz+0xc4>)
    38e0:	689b      	ldr	r3, [r3, #8]
    38e2:	021b      	lsls	r3, r3, #8
    38e4:	0c1b      	lsrs	r3, r3, #16
    38e6:	b29b      	uxth	r3, r3
    38e8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    38ea:	4b16      	ldr	r3, [pc, #88]	; (3944 <system_gclk_gen_get_hz+0xd0>)
    38ec:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    38ee:	2313      	movs	r3, #19
    38f0:	18fb      	adds	r3, r7, r3
    38f2:	781b      	ldrb	r3, [r3, #0]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d109      	bne.n	390c <system_gclk_gen_get_hz+0x98>
    38f8:	68fb      	ldr	r3, [r7, #12]
    38fa:	2b01      	cmp	r3, #1
    38fc:	d906      	bls.n	390c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    38fe:	4b12      	ldr	r3, [pc, #72]	; (3948 <system_gclk_gen_get_hz+0xd4>)
    3900:	68f9      	ldr	r1, [r7, #12]
    3902:	6978      	ldr	r0, [r7, #20]
    3904:	4798      	blx	r3
    3906:	0003      	movs	r3, r0
    3908:	617b      	str	r3, [r7, #20]
    390a:	e00a      	b.n	3922 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    390c:	2313      	movs	r3, #19
    390e:	18fb      	adds	r3, r7, r3
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d005      	beq.n	3922 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	3301      	adds	r3, #1
    391a:	697a      	ldr	r2, [r7, #20]
    391c:	40da      	lsrs	r2, r3
    391e:	0013      	movs	r3, r2
    3920:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3922:	697b      	ldr	r3, [r7, #20]
}
    3924:	0018      	movs	r0, r3
    3926:	46bd      	mov	sp, r7
    3928:	b006      	add	sp, #24
    392a:	bd80      	pop	{r7, pc}
    392c:	000036a5 	.word	0x000036a5
    3930:	0000367d 	.word	0x0000367d
    3934:	40000c04 	.word	0x40000c04
    3938:	40000c00 	.word	0x40000c00
    393c:	000031b9 	.word	0x000031b9
    3940:	40000c08 	.word	0x40000c08
    3944:	00003691 	.word	0x00003691
    3948:	00005565 	.word	0x00005565

0000394c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    394c:	b580      	push	{r7, lr}
    394e:	b084      	sub	sp, #16
    3950:	af00      	add	r7, sp, #0
    3952:	0002      	movs	r2, r0
    3954:	6039      	str	r1, [r7, #0]
    3956:	1dfb      	adds	r3, r7, #7
    3958:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    395a:	1dfb      	adds	r3, r7, #7
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3960:	683b      	ldr	r3, [r7, #0]
    3962:	781b      	ldrb	r3, [r3, #0]
    3964:	021b      	lsls	r3, r3, #8
    3966:	001a      	movs	r2, r3
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	4313      	orrs	r3, r2
    396c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    396e:	1dfb      	adds	r3, r7, #7
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	0018      	movs	r0, r3
    3974:	4b04      	ldr	r3, [pc, #16]	; (3988 <system_gclk_chan_set_config+0x3c>)
    3976:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3978:	4b04      	ldr	r3, [pc, #16]	; (398c <system_gclk_chan_set_config+0x40>)
    397a:	68fa      	ldr	r2, [r7, #12]
    397c:	b292      	uxth	r2, r2
    397e:	805a      	strh	r2, [r3, #2]
}
    3980:	46c0      	nop			; (mov r8, r8)
    3982:	46bd      	mov	sp, r7
    3984:	b004      	add	sp, #16
    3986:	bd80      	pop	{r7, pc}
    3988:	000039d9 	.word	0x000039d9
    398c:	40000c00 	.word	0x40000c00

00003990 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3990:	b580      	push	{r7, lr}
    3992:	b082      	sub	sp, #8
    3994:	af00      	add	r7, sp, #0
    3996:	0002      	movs	r2, r0
    3998:	1dfb      	adds	r3, r7, #7
    399a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    399c:	4b0a      	ldr	r3, [pc, #40]	; (39c8 <system_gclk_chan_enable+0x38>)
    399e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    39a0:	4a0a      	ldr	r2, [pc, #40]	; (39cc <system_gclk_chan_enable+0x3c>)
    39a2:	1dfb      	adds	r3, r7, #7
    39a4:	781b      	ldrb	r3, [r3, #0]
    39a6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    39a8:	4909      	ldr	r1, [pc, #36]	; (39d0 <system_gclk_chan_enable+0x40>)
    39aa:	4b09      	ldr	r3, [pc, #36]	; (39d0 <system_gclk_chan_enable+0x40>)
    39ac:	885b      	ldrh	r3, [r3, #2]
    39ae:	b29b      	uxth	r3, r3
    39b0:	2280      	movs	r2, #128	; 0x80
    39b2:	01d2      	lsls	r2, r2, #7
    39b4:	4313      	orrs	r3, r2
    39b6:	b29b      	uxth	r3, r3
    39b8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    39ba:	4b06      	ldr	r3, [pc, #24]	; (39d4 <system_gclk_chan_enable+0x44>)
    39bc:	4798      	blx	r3
}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	46bd      	mov	sp, r7
    39c2:	b002      	add	sp, #8
    39c4:	bd80      	pop	{r7, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	0000367d 	.word	0x0000367d
    39cc:	40000c02 	.word	0x40000c02
    39d0:	40000c00 	.word	0x40000c00
    39d4:	00003691 	.word	0x00003691

000039d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    39d8:	b580      	push	{r7, lr}
    39da:	b084      	sub	sp, #16
    39dc:	af00      	add	r7, sp, #0
    39de:	0002      	movs	r2, r0
    39e0:	1dfb      	adds	r3, r7, #7
    39e2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    39e4:	4b1c      	ldr	r3, [pc, #112]	; (3a58 <system_gclk_chan_disable+0x80>)
    39e6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    39e8:	4a1c      	ldr	r2, [pc, #112]	; (3a5c <system_gclk_chan_disable+0x84>)
    39ea:	1dfb      	adds	r3, r7, #7
    39ec:	781b      	ldrb	r3, [r3, #0]
    39ee:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    39f0:	4b1b      	ldr	r3, [pc, #108]	; (3a60 <system_gclk_chan_disable+0x88>)
    39f2:	885b      	ldrh	r3, [r3, #2]
    39f4:	051b      	lsls	r3, r3, #20
    39f6:	0f1b      	lsrs	r3, r3, #28
    39f8:	b2db      	uxtb	r3, r3
    39fa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    39fc:	4a18      	ldr	r2, [pc, #96]	; (3a60 <system_gclk_chan_disable+0x88>)
    39fe:	8853      	ldrh	r3, [r2, #2]
    3a00:	4918      	ldr	r1, [pc, #96]	; (3a64 <system_gclk_chan_disable+0x8c>)
    3a02:	400b      	ands	r3, r1
    3a04:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3a06:	4a16      	ldr	r2, [pc, #88]	; (3a60 <system_gclk_chan_disable+0x88>)
    3a08:	4b15      	ldr	r3, [pc, #84]	; (3a60 <system_gclk_chan_disable+0x88>)
    3a0a:	885b      	ldrh	r3, [r3, #2]
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	4916      	ldr	r1, [pc, #88]	; (3a68 <system_gclk_chan_disable+0x90>)
    3a10:	400b      	ands	r3, r1
    3a12:	b29b      	uxth	r3, r3
    3a14:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	4b11      	ldr	r3, [pc, #68]	; (3a60 <system_gclk_chan_disable+0x88>)
    3a1a:	885b      	ldrh	r3, [r3, #2]
    3a1c:	b29b      	uxth	r3, r3
    3a1e:	001a      	movs	r2, r3
    3a20:	2380      	movs	r3, #128	; 0x80
    3a22:	01db      	lsls	r3, r3, #7
    3a24:	4013      	ands	r3, r2
    3a26:	d1f7      	bne.n	3a18 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3a28:	4a0d      	ldr	r2, [pc, #52]	; (3a60 <system_gclk_chan_disable+0x88>)
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	b2db      	uxtb	r3, r3
    3a2e:	1c19      	adds	r1, r3, #0
    3a30:	230f      	movs	r3, #15
    3a32:	400b      	ands	r3, r1
    3a34:	b2d9      	uxtb	r1, r3
    3a36:	8853      	ldrh	r3, [r2, #2]
    3a38:	1c08      	adds	r0, r1, #0
    3a3a:	210f      	movs	r1, #15
    3a3c:	4001      	ands	r1, r0
    3a3e:	0208      	lsls	r0, r1, #8
    3a40:	4908      	ldr	r1, [pc, #32]	; (3a64 <system_gclk_chan_disable+0x8c>)
    3a42:	400b      	ands	r3, r1
    3a44:	1c19      	adds	r1, r3, #0
    3a46:	1c03      	adds	r3, r0, #0
    3a48:	430b      	orrs	r3, r1
    3a4a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3a4c:	4b07      	ldr	r3, [pc, #28]	; (3a6c <system_gclk_chan_disable+0x94>)
    3a4e:	4798      	blx	r3
}
    3a50:	46c0      	nop			; (mov r8, r8)
    3a52:	46bd      	mov	sp, r7
    3a54:	b004      	add	sp, #16
    3a56:	bd80      	pop	{r7, pc}
    3a58:	0000367d 	.word	0x0000367d
    3a5c:	40000c02 	.word	0x40000c02
    3a60:	40000c00 	.word	0x40000c00
    3a64:	fffff0ff 	.word	0xfffff0ff
    3a68:	ffffbfff 	.word	0xffffbfff
    3a6c:	00003691 	.word	0x00003691

00003a70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b084      	sub	sp, #16
    3a74:	af00      	add	r7, sp, #0
    3a76:	0002      	movs	r2, r0
    3a78:	1dfb      	adds	r3, r7, #7
    3a7a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3a7c:	4b0d      	ldr	r3, [pc, #52]	; (3ab4 <system_gclk_chan_get_hz+0x44>)
    3a7e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3a80:	4a0d      	ldr	r2, [pc, #52]	; (3ab8 <system_gclk_chan_get_hz+0x48>)
    3a82:	1dfb      	adds	r3, r7, #7
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3a88:	4b0c      	ldr	r3, [pc, #48]	; (3abc <system_gclk_chan_get_hz+0x4c>)
    3a8a:	885b      	ldrh	r3, [r3, #2]
    3a8c:	051b      	lsls	r3, r3, #20
    3a8e:	0f1b      	lsrs	r3, r3, #28
    3a90:	b2da      	uxtb	r2, r3
    3a92:	230f      	movs	r3, #15
    3a94:	18fb      	adds	r3, r7, r3
    3a96:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3a98:	4b09      	ldr	r3, [pc, #36]	; (3ac0 <system_gclk_chan_get_hz+0x50>)
    3a9a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3a9c:	230f      	movs	r3, #15
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	0018      	movs	r0, r3
    3aa4:	4b07      	ldr	r3, [pc, #28]	; (3ac4 <system_gclk_chan_get_hz+0x54>)
    3aa6:	4798      	blx	r3
    3aa8:	0003      	movs	r3, r0
}
    3aaa:	0018      	movs	r0, r3
    3aac:	46bd      	mov	sp, r7
    3aae:	b004      	add	sp, #16
    3ab0:	bd80      	pop	{r7, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	0000367d 	.word	0x0000367d
    3ab8:	40000c02 	.word	0x40000c02
    3abc:	40000c00 	.word	0x40000c00
    3ac0:	00003691 	.word	0x00003691
    3ac4:	00003875 	.word	0x00003875

00003ac8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b084      	sub	sp, #16
    3acc:	af00      	add	r7, sp, #0
    3ace:	0002      	movs	r2, r0
    3ad0:	1dfb      	adds	r3, r7, #7
    3ad2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ad4:	230f      	movs	r3, #15
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	1dfa      	adds	r2, r7, #7
    3ada:	7812      	ldrb	r2, [r2, #0]
    3adc:	09d2      	lsrs	r2, r2, #7
    3ade:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ae0:	230e      	movs	r3, #14
    3ae2:	18fb      	adds	r3, r7, r3
    3ae4:	1dfa      	adds	r2, r7, #7
    3ae6:	7812      	ldrb	r2, [r2, #0]
    3ae8:	0952      	lsrs	r2, r2, #5
    3aea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3aec:	4b0d      	ldr	r3, [pc, #52]	; (3b24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3aee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3af0:	230f      	movs	r3, #15
    3af2:	18fb      	adds	r3, r7, r3
    3af4:	781b      	ldrb	r3, [r3, #0]
    3af6:	2b00      	cmp	r3, #0
    3af8:	d10f      	bne.n	3b1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3afa:	230f      	movs	r3, #15
    3afc:	18fb      	adds	r3, r7, r3
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	009b      	lsls	r3, r3, #2
    3b02:	2210      	movs	r2, #16
    3b04:	4694      	mov	ip, r2
    3b06:	44bc      	add	ip, r7
    3b08:	4463      	add	r3, ip
    3b0a:	3b08      	subs	r3, #8
    3b0c:	681a      	ldr	r2, [r3, #0]
    3b0e:	230e      	movs	r3, #14
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	01db      	lsls	r3, r3, #7
    3b16:	18d3      	adds	r3, r2, r3
    3b18:	e000      	b.n	3b1c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3b1a:	2300      	movs	r3, #0
	}
}
    3b1c:	0018      	movs	r0, r3
    3b1e:	46bd      	mov	sp, r7
    3b20:	b004      	add	sp, #16
    3b22:	bd80      	pop	{r7, pc}
    3b24:	41004400 	.word	0x41004400

00003b28 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b088      	sub	sp, #32
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	60f8      	str	r0, [r7, #12]
    3b30:	60b9      	str	r1, [r7, #8]
    3b32:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3b34:	2300      	movs	r3, #0
    3b36:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	78db      	ldrb	r3, [r3, #3]
    3b3c:	2201      	movs	r2, #1
    3b3e:	4053      	eors	r3, r2
    3b40:	b2db      	uxtb	r3, r3
    3b42:	2b00      	cmp	r3, #0
    3b44:	d035      	beq.n	3bb2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2b80      	cmp	r3, #128	; 0x80
    3b4c:	d00b      	beq.n	3b66 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3b4e:	69fb      	ldr	r3, [r7, #28]
    3b50:	2280      	movs	r2, #128	; 0x80
    3b52:	0252      	lsls	r2, r2, #9
    3b54:	4313      	orrs	r3, r2
    3b56:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	061b      	lsls	r3, r3, #24
    3b5e:	001a      	movs	r2, r3
    3b60:	69fb      	ldr	r3, [r7, #28]
    3b62:	4313      	orrs	r3, r2
    3b64:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3b66:	687b      	ldr	r3, [r7, #4]
    3b68:	785b      	ldrb	r3, [r3, #1]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d003      	beq.n	3b76 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3b72:	2b02      	cmp	r3, #2
    3b74:	d110      	bne.n	3b98 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3b76:	69fb      	ldr	r3, [r7, #28]
    3b78:	2280      	movs	r2, #128	; 0x80
    3b7a:	0292      	lsls	r2, r2, #10
    3b7c:	4313      	orrs	r3, r2
    3b7e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	789b      	ldrb	r3, [r3, #2]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d004      	beq.n	3b92 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3b88:	69fb      	ldr	r3, [r7, #28]
    3b8a:	2280      	movs	r2, #128	; 0x80
    3b8c:	02d2      	lsls	r2, r2, #11
    3b8e:	4313      	orrs	r3, r2
    3b90:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	68ba      	ldr	r2, [r7, #8]
    3b96:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3b98:	687b      	ldr	r3, [r7, #4]
    3b9a:	785b      	ldrb	r3, [r3, #1]
    3b9c:	2b01      	cmp	r3, #1
    3b9e:	d003      	beq.n	3ba8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3ba0:	687b      	ldr	r3, [r7, #4]
    3ba2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ba4:	2b02      	cmp	r3, #2
    3ba6:	d107      	bne.n	3bb8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3ba8:	69fb      	ldr	r3, [r7, #28]
    3baa:	4a22      	ldr	r2, [pc, #136]	; (3c34 <_system_pinmux_config+0x10c>)
    3bac:	4013      	ands	r3, r2
    3bae:	61fb      	str	r3, [r7, #28]
    3bb0:	e002      	b.n	3bb8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3bb2:	68fb      	ldr	r3, [r7, #12]
    3bb4:	68ba      	ldr	r2, [r7, #8]
    3bb6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3bb8:	68bb      	ldr	r3, [r7, #8]
    3bba:	041b      	lsls	r3, r3, #16
    3bbc:	0c1b      	lsrs	r3, r3, #16
    3bbe:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3bc0:	68bb      	ldr	r3, [r7, #8]
    3bc2:	0c1b      	lsrs	r3, r3, #16
    3bc4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3bc6:	69ba      	ldr	r2, [r7, #24]
    3bc8:	69fb      	ldr	r3, [r7, #28]
    3bca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3bcc:	22a0      	movs	r2, #160	; 0xa0
    3bce:	05d2      	lsls	r2, r2, #23
    3bd0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3bd6:	697a      	ldr	r2, [r7, #20]
    3bd8:	69fb      	ldr	r3, [r7, #28]
    3bda:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3bdc:	22d0      	movs	r2, #208	; 0xd0
    3bde:	0612      	lsls	r2, r2, #24
    3be0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	78db      	ldrb	r3, [r3, #3]
    3bea:	2201      	movs	r2, #1
    3bec:	4053      	eors	r3, r2
    3bee:	b2db      	uxtb	r3, r3
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d01a      	beq.n	3c2a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3bf4:	69fa      	ldr	r2, [r7, #28]
    3bf6:	2380      	movs	r3, #128	; 0x80
    3bf8:	02db      	lsls	r3, r3, #11
    3bfa:	4013      	ands	r3, r2
    3bfc:	d00a      	beq.n	3c14 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	789b      	ldrb	r3, [r3, #2]
    3c02:	2b01      	cmp	r3, #1
    3c04:	d103      	bne.n	3c0e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	68ba      	ldr	r2, [r7, #8]
    3c0a:	619a      	str	r2, [r3, #24]
    3c0c:	e002      	b.n	3c14 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	68ba      	ldr	r2, [r7, #8]
    3c12:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	785b      	ldrb	r3, [r3, #1]
    3c18:	2b01      	cmp	r3, #1
    3c1a:	d003      	beq.n	3c24 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3c20:	2b02      	cmp	r3, #2
    3c22:	d102      	bne.n	3c2a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3c24:	68fb      	ldr	r3, [r7, #12]
    3c26:	68ba      	ldr	r2, [r7, #8]
    3c28:	609a      	str	r2, [r3, #8]
		}
	}
}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	46bd      	mov	sp, r7
    3c2e:	b008      	add	sp, #32
    3c30:	bd80      	pop	{r7, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	fffbffff 	.word	0xfffbffff

00003c38 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	0002      	movs	r2, r0
    3c40:	6039      	str	r1, [r7, #0]
    3c42:	1dfb      	adds	r3, r7, #7
    3c44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c46:	1dfb      	adds	r3, r7, #7
    3c48:	781b      	ldrb	r3, [r3, #0]
    3c4a:	0018      	movs	r0, r3
    3c4c:	4b0a      	ldr	r3, [pc, #40]	; (3c78 <system_pinmux_pin_set_config+0x40>)
    3c4e:	4798      	blx	r3
    3c50:	0003      	movs	r3, r0
    3c52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3c54:	1dfb      	adds	r3, r7, #7
    3c56:	781b      	ldrb	r3, [r3, #0]
    3c58:	221f      	movs	r2, #31
    3c5a:	4013      	ands	r3, r2
    3c5c:	2201      	movs	r2, #1
    3c5e:	409a      	lsls	r2, r3
    3c60:	0013      	movs	r3, r2
    3c62:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3c64:	683a      	ldr	r2, [r7, #0]
    3c66:	68b9      	ldr	r1, [r7, #8]
    3c68:	68fb      	ldr	r3, [r7, #12]
    3c6a:	0018      	movs	r0, r3
    3c6c:	4b03      	ldr	r3, [pc, #12]	; (3c7c <system_pinmux_pin_set_config+0x44>)
    3c6e:	4798      	blx	r3
}
    3c70:	46c0      	nop			; (mov r8, r8)
    3c72:	46bd      	mov	sp, r7
    3c74:	b004      	add	sp, #16
    3c76:	bd80      	pop	{r7, pc}
    3c78:	00003ac9 	.word	0x00003ac9
    3c7c:	00003b29 	.word	0x00003b29

00003c80 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	af00      	add	r7, sp, #0
	return;
    3c84:	46c0      	nop			; (mov r8, r8)
}
    3c86:	46bd      	mov	sp, r7
    3c88:	bd80      	pop	{r7, pc}
    3c8a:	46c0      	nop			; (mov r8, r8)

00003c8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3c90:	4b06      	ldr	r3, [pc, #24]	; (3cac <system_init+0x20>)
    3c92:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3c94:	4b06      	ldr	r3, [pc, #24]	; (3cb0 <system_init+0x24>)
    3c96:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3c98:	4b06      	ldr	r3, [pc, #24]	; (3cb4 <system_init+0x28>)
    3c9a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3c9c:	4b06      	ldr	r3, [pc, #24]	; (3cb8 <system_init+0x2c>)
    3c9e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3ca0:	4b06      	ldr	r3, [pc, #24]	; (3cbc <system_init+0x30>)
    3ca2:	4798      	blx	r3
}
    3ca4:	46c0      	nop			; (mov r8, r8)
    3ca6:	46bd      	mov	sp, r7
    3ca8:	bd80      	pop	{r7, pc}
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	0000349d 	.word	0x0000349d
    3cb0:	00002f89 	.word	0x00002f89
    3cb4:	00003c81 	.word	0x00003c81
    3cb8:	00000271 	.word	0x00000271
    3cbc:	00003c81 	.word	0x00003c81

00003cc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3cc6:	4b2f      	ldr	r3, [pc, #188]	; (3d84 <Reset_Handler+0xc4>)
    3cc8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3cca:	4b2f      	ldr	r3, [pc, #188]	; (3d88 <Reset_Handler+0xc8>)
    3ccc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3cce:	687a      	ldr	r2, [r7, #4]
    3cd0:	683b      	ldr	r3, [r7, #0]
    3cd2:	429a      	cmp	r2, r3
    3cd4:	d00c      	beq.n	3cf0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3cd6:	e007      	b.n	3ce8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3cd8:	683b      	ldr	r3, [r7, #0]
    3cda:	1d1a      	adds	r2, r3, #4
    3cdc:	603a      	str	r2, [r7, #0]
    3cde:	687a      	ldr	r2, [r7, #4]
    3ce0:	1d11      	adds	r1, r2, #4
    3ce2:	6079      	str	r1, [r7, #4]
    3ce4:	6812      	ldr	r2, [r2, #0]
    3ce6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3ce8:	683a      	ldr	r2, [r7, #0]
    3cea:	4b28      	ldr	r3, [pc, #160]	; (3d8c <Reset_Handler+0xcc>)
    3cec:	429a      	cmp	r2, r3
    3cee:	d3f3      	bcc.n	3cd8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3cf0:	4b27      	ldr	r3, [pc, #156]	; (3d90 <Reset_Handler+0xd0>)
    3cf2:	603b      	str	r3, [r7, #0]
    3cf4:	e004      	b.n	3d00 <Reset_Handler+0x40>
                *pDest++ = 0;
    3cf6:	683b      	ldr	r3, [r7, #0]
    3cf8:	1d1a      	adds	r2, r3, #4
    3cfa:	603a      	str	r2, [r7, #0]
    3cfc:	2200      	movs	r2, #0
    3cfe:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3d00:	683a      	ldr	r2, [r7, #0]
    3d02:	4b24      	ldr	r3, [pc, #144]	; (3d94 <Reset_Handler+0xd4>)
    3d04:	429a      	cmp	r2, r3
    3d06:	d3f6      	bcc.n	3cf6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3d08:	4b23      	ldr	r3, [pc, #140]	; (3d98 <Reset_Handler+0xd8>)
    3d0a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3d0c:	4b23      	ldr	r3, [pc, #140]	; (3d9c <Reset_Handler+0xdc>)
    3d0e:	687a      	ldr	r2, [r7, #4]
    3d10:	21ff      	movs	r1, #255	; 0xff
    3d12:	438a      	bics	r2, r1
    3d14:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3d16:	4a22      	ldr	r2, [pc, #136]	; (3da0 <Reset_Handler+0xe0>)
    3d18:	2390      	movs	r3, #144	; 0x90
    3d1a:	005b      	lsls	r3, r3, #1
    3d1c:	2102      	movs	r1, #2
    3d1e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3d20:	4a20      	ldr	r2, [pc, #128]	; (3da4 <Reset_Handler+0xe4>)
    3d22:	78d3      	ldrb	r3, [r2, #3]
    3d24:	2103      	movs	r1, #3
    3d26:	438b      	bics	r3, r1
    3d28:	1c19      	adds	r1, r3, #0
    3d2a:	2302      	movs	r3, #2
    3d2c:	430b      	orrs	r3, r1
    3d2e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3d30:	4a1c      	ldr	r2, [pc, #112]	; (3da4 <Reset_Handler+0xe4>)
    3d32:	78d3      	ldrb	r3, [r2, #3]
    3d34:	210c      	movs	r1, #12
    3d36:	438b      	bics	r3, r1
    3d38:	1c19      	adds	r1, r3, #0
    3d3a:	2308      	movs	r3, #8
    3d3c:	430b      	orrs	r3, r1
    3d3e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3d40:	4a19      	ldr	r2, [pc, #100]	; (3da8 <Reset_Handler+0xe8>)
    3d42:	7b93      	ldrb	r3, [r2, #14]
    3d44:	2130      	movs	r1, #48	; 0x30
    3d46:	438b      	bics	r3, r1
    3d48:	1c19      	adds	r1, r3, #0
    3d4a:	2320      	movs	r3, #32
    3d4c:	430b      	orrs	r3, r1
    3d4e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3d50:	4a15      	ldr	r2, [pc, #84]	; (3da8 <Reset_Handler+0xe8>)
    3d52:	7b93      	ldrb	r3, [r2, #14]
    3d54:	210c      	movs	r1, #12
    3d56:	438b      	bics	r3, r1
    3d58:	1c19      	adds	r1, r3, #0
    3d5a:	2308      	movs	r3, #8
    3d5c:	430b      	orrs	r3, r1
    3d5e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3d60:	4a11      	ldr	r2, [pc, #68]	; (3da8 <Reset_Handler+0xe8>)
    3d62:	7b93      	ldrb	r3, [r2, #14]
    3d64:	2103      	movs	r1, #3
    3d66:	438b      	bics	r3, r1
    3d68:	1c19      	adds	r1, r3, #0
    3d6a:	2302      	movs	r3, #2
    3d6c:	430b      	orrs	r3, r1
    3d6e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3d70:	4a0e      	ldr	r2, [pc, #56]	; (3dac <Reset_Handler+0xec>)
    3d72:	6853      	ldr	r3, [r2, #4]
    3d74:	2180      	movs	r1, #128	; 0x80
    3d76:	430b      	orrs	r3, r1
    3d78:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3d7a:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <Reset_Handler+0xf0>)
    3d7c:	4798      	blx	r3

        /* Branch to main function */
        main();
    3d7e:	4b0d      	ldr	r3, [pc, #52]	; (3db4 <Reset_Handler+0xf4>)
    3d80:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3d82:	e7fe      	b.n	3d82 <Reset_Handler+0xc2>
    3d84:	000057fc 	.word	0x000057fc
    3d88:	20000000 	.word	0x20000000
    3d8c:	20000008 	.word	0x20000008
    3d90:	20000008 	.word	0x20000008
    3d94:	20000298 	.word	0x20000298
    3d98:	00000000 	.word	0x00000000
    3d9c:	e000ed00 	.word	0xe000ed00
    3da0:	41007000 	.word	0x41007000
    3da4:	41005000 	.word	0x41005000
    3da8:	41004800 	.word	0x41004800
    3dac:	41004000 	.word	0x41004000
    3db0:	0000567d 	.word	0x0000567d
    3db4:	00005231 	.word	0x00005231

00003db8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	af00      	add	r7, sp, #0
        while (1) {
        }
    3dbc:	e7fe      	b.n	3dbc <Dummy_Handler+0x4>
    3dbe:	46c0      	nop			; (mov r8, r8)

00003dc0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b084      	sub	sp, #16
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	0002      	movs	r2, r0
    3dc8:	1dfb      	adds	r3, r7, #7
    3dca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3dcc:	230f      	movs	r3, #15
    3dce:	18fb      	adds	r3, r7, r3
    3dd0:	1dfa      	adds	r2, r7, #7
    3dd2:	7812      	ldrb	r2, [r2, #0]
    3dd4:	09d2      	lsrs	r2, r2, #7
    3dd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3dd8:	230e      	movs	r3, #14
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	1dfa      	adds	r2, r7, #7
    3dde:	7812      	ldrb	r2, [r2, #0]
    3de0:	0952      	lsrs	r2, r2, #5
    3de2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3de4:	4b0d      	ldr	r3, [pc, #52]	; (3e1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3de6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3de8:	230f      	movs	r3, #15
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	781b      	ldrb	r3, [r3, #0]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d10f      	bne.n	3e12 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3df2:	230f      	movs	r3, #15
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	781b      	ldrb	r3, [r3, #0]
    3df8:	009b      	lsls	r3, r3, #2
    3dfa:	2210      	movs	r2, #16
    3dfc:	4694      	mov	ip, r2
    3dfe:	44bc      	add	ip, r7
    3e00:	4463      	add	r3, ip
    3e02:	3b08      	subs	r3, #8
    3e04:	681a      	ldr	r2, [r3, #0]
    3e06:	230e      	movs	r3, #14
    3e08:	18fb      	adds	r3, r7, r3
    3e0a:	781b      	ldrb	r3, [r3, #0]
    3e0c:	01db      	lsls	r3, r3, #7
    3e0e:	18d3      	adds	r3, r2, r3
    3e10:	e000      	b.n	3e14 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3e12:	2300      	movs	r3, #0
	}
}
    3e14:	0018      	movs	r0, r3
    3e16:	46bd      	mov	sp, r7
    3e18:	b004      	add	sp, #16
    3e1a:	bd80      	pop	{r7, pc}
    3e1c:	41004400 	.word	0x41004400

00003e20 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3e20:	b580      	push	{r7, lr}
    3e22:	b082      	sub	sp, #8
    3e24:	af00      	add	r7, sp, #0
    3e26:	0002      	movs	r2, r0
    3e28:	1dfb      	adds	r3, r7, #7
    3e2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3e2c:	1dfb      	adds	r3, r7, #7
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	0018      	movs	r0, r3
    3e32:	4b03      	ldr	r3, [pc, #12]	; (3e40 <port_get_group_from_gpio_pin+0x20>)
    3e34:	4798      	blx	r3
    3e36:	0003      	movs	r3, r0
}
    3e38:	0018      	movs	r0, r3
    3e3a:	46bd      	mov	sp, r7
    3e3c:	b002      	add	sp, #8
    3e3e:	bd80      	pop	{r7, pc}
    3e40:	00003dc1 	.word	0x00003dc1

00003e44 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	2200      	movs	r2, #0
    3e50:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	2201      	movs	r2, #1
    3e56:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	2200      	movs	r2, #0
    3e5c:	709a      	strb	r2, [r3, #2]
}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	46bd      	mov	sp, r7
    3e62:	b002      	add	sp, #8
    3e64:	bd80      	pop	{r7, pc}
    3e66:	46c0      	nop			; (mov r8, r8)

00003e68 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	b084      	sub	sp, #16
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	0002      	movs	r2, r0
    3e70:	1dfb      	adds	r3, r7, #7
    3e72:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e74:	1dfb      	adds	r3, r7, #7
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	0018      	movs	r0, r3
    3e7a:	4b0b      	ldr	r3, [pc, #44]	; (3ea8 <port_pin_get_input_level+0x40>)
    3e7c:	4798      	blx	r3
    3e7e:	0003      	movs	r3, r0
    3e80:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e82:	1dfb      	adds	r3, r7, #7
    3e84:	781b      	ldrb	r3, [r3, #0]
    3e86:	221f      	movs	r2, #31
    3e88:	4013      	ands	r3, r2
    3e8a:	2201      	movs	r2, #1
    3e8c:	409a      	lsls	r2, r3
    3e8e:	0013      	movs	r3, r2
    3e90:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	6a1b      	ldr	r3, [r3, #32]
    3e96:	68ba      	ldr	r2, [r7, #8]
    3e98:	4013      	ands	r3, r2
    3e9a:	1e5a      	subs	r2, r3, #1
    3e9c:	4193      	sbcs	r3, r2
    3e9e:	b2db      	uxtb	r3, r3
}
    3ea0:	0018      	movs	r0, r3
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b004      	add	sp, #16
    3ea6:	bd80      	pop	{r7, pc}
    3ea8:	00003e21 	.word	0x00003e21

00003eac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	0002      	movs	r2, r0
    3eb4:	1dfb      	adds	r3, r7, #7
    3eb6:	701a      	strb	r2, [r3, #0]
    3eb8:	1dbb      	adds	r3, r7, #6
    3eba:	1c0a      	adds	r2, r1, #0
    3ebc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3ebe:	1dfb      	adds	r3, r7, #7
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	0018      	movs	r0, r3
    3ec4:	4b0d      	ldr	r3, [pc, #52]	; (3efc <port_pin_set_output_level+0x50>)
    3ec6:	4798      	blx	r3
    3ec8:	0003      	movs	r3, r0
    3eca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3ecc:	1dfb      	adds	r3, r7, #7
    3ece:	781b      	ldrb	r3, [r3, #0]
    3ed0:	221f      	movs	r2, #31
    3ed2:	4013      	ands	r3, r2
    3ed4:	2201      	movs	r2, #1
    3ed6:	409a      	lsls	r2, r3
    3ed8:	0013      	movs	r3, r2
    3eda:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3edc:	1dbb      	adds	r3, r7, #6
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d003      	beq.n	3eec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3ee4:	68fb      	ldr	r3, [r7, #12]
    3ee6:	68ba      	ldr	r2, [r7, #8]
    3ee8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3eea:	e002      	b.n	3ef2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	68ba      	ldr	r2, [r7, #8]
    3ef0:	615a      	str	r2, [r3, #20]
	}
}
    3ef2:	46c0      	nop			; (mov r8, r8)
    3ef4:	46bd      	mov	sp, r7
    3ef6:	b004      	add	sp, #16
    3ef8:	bd80      	pop	{r7, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	00003e21 	.word	0x00003e21

00003f00 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3f04:	4b04      	ldr	r3, [pc, #16]	; (3f18 <system_interrupt_enable_global+0x18>)
    3f06:	2201      	movs	r2, #1
    3f08:	701a      	strb	r2, [r3, #0]
    3f0a:	f3bf 8f5f 	dmb	sy
    3f0e:	b662      	cpsie	i
}
    3f10:	46c0      	nop			; (mov r8, r8)
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	20000000 	.word	0x20000000

00003f1c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3f20:	b672      	cpsid	i
    3f22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f26:	4b03      	ldr	r3, [pc, #12]	; (3f34 <system_interrupt_disable_global+0x18>)
    3f28:	2200      	movs	r2, #0
    3f2a:	701a      	strb	r2, [r3, #0]
}
    3f2c:	46c0      	nop			; (mov r8, r8)
    3f2e:	46bd      	mov	sp, r7
    3f30:	bd80      	pop	{r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	20000000 	.word	0x20000000

00003f38 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	0002      	movs	r2, r0
    3f40:	1dfb      	adds	r3, r7, #7
    3f42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f44:	4b06      	ldr	r3, [pc, #24]	; (3f60 <system_interrupt_enable+0x28>)
    3f46:	1dfa      	adds	r2, r7, #7
    3f48:	7812      	ldrb	r2, [r2, #0]
    3f4a:	0011      	movs	r1, r2
    3f4c:	221f      	movs	r2, #31
    3f4e:	400a      	ands	r2, r1
    3f50:	2101      	movs	r1, #1
    3f52:	4091      	lsls	r1, r2
    3f54:	000a      	movs	r2, r1
    3f56:	601a      	str	r2, [r3, #0]
}
    3f58:	46c0      	nop			; (mov r8, r8)
    3f5a:	46bd      	mov	sp, r7
    3f5c:	b002      	add	sp, #8
    3f5e:	bd80      	pop	{r7, pc}
    3f60:	e000e100 	.word	0xe000e100

00003f64 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	22a0      	movs	r2, #160	; 0xa0
    3f70:	0112      	lsls	r2, r2, #4
    3f72:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	2201      	movs	r2, #1
    3f78:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	2200      	movs	r2, #0
    3f7e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	2200      	movs	r2, #0
    3f84:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    3f86:	230f      	movs	r3, #15
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	2200      	movs	r2, #0
    3f8c:	701a      	strb	r2, [r3, #0]
    3f8e:	e00e      	b.n	3fae <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    3f90:	230f      	movs	r3, #15
    3f92:	18fb      	adds	r3, r7, r3
    3f94:	781a      	ldrb	r2, [r3, #0]
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	3202      	adds	r2, #2
    3f9a:	0092      	lsls	r2, r2, #2
    3f9c:	2100      	movs	r1, #0
    3f9e:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    3fa0:	230f      	movs	r3, #15
    3fa2:	18fb      	adds	r3, r7, r3
    3fa4:	781a      	ldrb	r2, [r3, #0]
    3fa6:	230f      	movs	r3, #15
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	3201      	adds	r2, #1
    3fac:	701a      	strb	r2, [r3, #0]
    3fae:	230f      	movs	r3, #15
    3fb0:	18fb      	adds	r3, r7, r3
    3fb2:	781b      	ldrb	r3, [r3, #0]
    3fb4:	2b01      	cmp	r3, #1
    3fb6:	d9eb      	bls.n	3f90 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    3fb8:	46c0      	nop			; (mov r8, r8)
    3fba:	46bd      	mov	sp, r7
    3fbc:	b004      	add	sp, #16
    3fbe:	bd80      	pop	{r7, pc}

00003fc0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b084      	sub	sp, #16
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3fce:	68fb      	ldr	r3, [r7, #12]
    3fd0:	69db      	ldr	r3, [r3, #28]
    3fd2:	1e5a      	subs	r2, r3, #1
    3fd4:	4193      	sbcs	r3, r2
    3fd6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    3fd8:	0018      	movs	r0, r3
    3fda:	46bd      	mov	sp, r7
    3fdc:	b004      	add	sp, #16
    3fde:	bd80      	pop	{r7, pc}

00003fe0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b082      	sub	sp, #8
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	2201      	movs	r2, #1
    3fec:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2200      	movs	r2, #0
    3ff2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	2200      	movs	r2, #0
    3ff8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	22c0      	movs	r2, #192	; 0xc0
    3ffe:	0392      	lsls	r2, r2, #14
    4000:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	2200      	movs	r2, #0
    4006:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	2200      	movs	r2, #0
    400c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    400e:	687b      	ldr	r3, [r7, #4]
    4010:	2201      	movs	r2, #1
    4012:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	2201      	movs	r2, #1
    4018:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	2200      	movs	r2, #0
    401e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	2224      	movs	r2, #36	; 0x24
    4024:	2100      	movs	r1, #0
    4026:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	3318      	adds	r3, #24
    402c:	220c      	movs	r2, #12
    402e:	2100      	movs	r1, #0
    4030:	0018      	movs	r0, r3
    4032:	4b0a      	ldr	r3, [pc, #40]	; (405c <spi_get_config_defaults+0x7c>)
    4034:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	4a09      	ldr	r2, [pc, #36]	; (4060 <spi_get_config_defaults+0x80>)
    403a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	2200      	movs	r2, #0
    4040:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	2200      	movs	r2, #0
    4046:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4048:	687b      	ldr	r3, [r7, #4]
    404a:	2200      	movs	r2, #0
    404c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	2200      	movs	r2, #0
    4052:	635a      	str	r2, [r3, #52]	; 0x34

};
    4054:	46c0      	nop			; (mov r8, r8)
    4056:	46bd      	mov	sp, r7
    4058:	b002      	add	sp, #8
    405a:	bd80      	pop	{r7, pc}
    405c:	000056db 	.word	0x000056db
    4060:	000186a0 	.word	0x000186a0

00004064 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	220a      	movs	r2, #10
    4070:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	2200      	movs	r2, #0
    4076:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	2200      	movs	r2, #0
    407c:	709a      	strb	r2, [r3, #2]
}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	46bd      	mov	sp, r7
    4082:	b002      	add	sp, #8
    4084:	bd80      	pop	{r7, pc}
    4086:	46c0      	nop			; (mov r8, r8)

00004088 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    4088:	b580      	push	{r7, lr}
    408a:	b084      	sub	sp, #16
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4092:	683b      	ldr	r3, [r7, #0]
    4094:	781a      	ldrb	r2, [r3, #0]
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    409a:	683b      	ldr	r3, [r7, #0]
    409c:	785a      	ldrb	r2, [r3, #1]
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	789a      	ldrb	r2, [r3, #2]
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    40aa:	230c      	movs	r3, #12
    40ac:	18fb      	adds	r3, r7, r3
    40ae:	0018      	movs	r0, r3
    40b0:	4b0b      	ldr	r3, [pc, #44]	; (40e0 <spi_attach_slave+0x58>)
    40b2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    40b4:	230c      	movs	r3, #12
    40b6:	18fb      	adds	r3, r7, r3
    40b8:	2201      	movs	r2, #1
    40ba:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	781b      	ldrb	r3, [r3, #0]
    40c0:	220c      	movs	r2, #12
    40c2:	18ba      	adds	r2, r7, r2
    40c4:	0011      	movs	r1, r2
    40c6:	0018      	movs	r0, r3
    40c8:	4b06      	ldr	r3, [pc, #24]	; (40e4 <spi_attach_slave+0x5c>)
    40ca:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	2101      	movs	r1, #1
    40d2:	0018      	movs	r0, r3
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <spi_attach_slave+0x60>)
    40d6:	4798      	blx	r3
}
    40d8:	46c0      	nop			; (mov r8, r8)
    40da:	46bd      	mov	sp, r7
    40dc:	b004      	add	sp, #16
    40de:	bd80      	pop	{r7, pc}
    40e0:	00003e45 	.word	0x00003e45
    40e4:	00002f29 	.word	0x00002f29
    40e8:	00003ead 	.word	0x00003ead

000040ec <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b084      	sub	sp, #16
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	0018      	movs	r0, r3
    4100:	4b0b      	ldr	r3, [pc, #44]	; (4130 <spi_enable+0x44>)
    4102:	4798      	blx	r3
    4104:	0003      	movs	r3, r0
    4106:	0018      	movs	r0, r3
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <spi_enable+0x48>)
    410a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    410c:	46c0      	nop			; (mov r8, r8)
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	0018      	movs	r0, r3
    4112:	4b09      	ldr	r3, [pc, #36]	; (4138 <spi_enable+0x4c>)
    4114:	4798      	blx	r3
    4116:	1e03      	subs	r3, r0, #0
    4118:	d1f9      	bne.n	410e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	2202      	movs	r2, #2
    4120:	431a      	orrs	r2, r3
    4122:	68fb      	ldr	r3, [r7, #12]
    4124:	601a      	str	r2, [r3, #0]
}
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	46bd      	mov	sp, r7
    412a:	b004      	add	sp, #16
    412c:	bd80      	pop	{r7, pc}
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	00002e25 	.word	0x00002e25
    4134:	00003f39 	.word	0x00003f39
    4138:	00003fc1 	.word	0x00003fc1

0000413c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    413c:	b580      	push	{r7, lr}
    413e:	b084      	sub	sp, #16
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	681b      	ldr	r3, [r3, #0]
    4148:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	689b      	ldr	r3, [r3, #8]
    4150:	2202      	movs	r2, #2
    4152:	4013      	ands	r3, r2
    4154:	d1fa      	bne.n	414c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    4156:	68fb      	ldr	r3, [r7, #12]
    4158:	681b      	ldr	r3, [r3, #0]
    415a:	2202      	movs	r2, #2
    415c:	431a      	orrs	r2, r3
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	601a      	str	r2, [r3, #0]
}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	46bd      	mov	sp, r7
    4166:	b004      	add	sp, #16
    4168:	bd80      	pop	{r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)

0000416c <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4172:	1d3b      	adds	r3, r7, #4
    4174:	0018      	movs	r0, r3
    4176:	4b07      	ldr	r3, [pc, #28]	; (4194 <configure_port_pins+0x28>)
    4178:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    417a:	1d3b      	adds	r3, r7, #4
    417c:	2200      	movs	r2, #0
    417e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    4180:	1d3b      	adds	r3, r7, #4
    4182:	0019      	movs	r1, r3
    4184:	2003      	movs	r0, #3
    4186:	4b04      	ldr	r3, [pc, #16]	; (4198 <configure_port_pins+0x2c>)
    4188:	4798      	blx	r3
}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	46bd      	mov	sp, r7
    418e:	b002      	add	sp, #8
    4190:	bd80      	pop	{r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	00003e45 	.word	0x00003e45
    4198:	00002f29 	.word	0x00002f29

0000419c <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    419c:	b580      	push	{r7, lr}
    419e:	b084      	sub	sp, #16
    41a0:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    41a2:	1d3b      	adds	r3, r7, #4
    41a4:	0018      	movs	r0, r3
    41a6:	4b0b      	ldr	r3, [pc, #44]	; (41d4 <configure_extint_channel+0x38>)
    41a8:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    41aa:	1d3b      	adds	r3, r7, #4
    41ac:	2203      	movs	r2, #3
    41ae:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    41b0:	1d3b      	adds	r3, r7, #4
    41b2:	2200      	movs	r2, #0
    41b4:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    41b6:	1d3b      	adds	r3, r7, #4
    41b8:	2201      	movs	r2, #1
    41ba:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    41bc:	1d3b      	adds	r3, r7, #4
    41be:	2201      	movs	r2, #1
    41c0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    41c2:	1d3b      	adds	r3, r7, #4
    41c4:	0019      	movs	r1, r3
    41c6:	2003      	movs	r0, #3
    41c8:	4b03      	ldr	r3, [pc, #12]	; (41d8 <configure_extint_channel+0x3c>)
    41ca:	4798      	blx	r3
}
    41cc:	46c0      	nop			; (mov r8, r8)
    41ce:	46bd      	mov	sp, r7
    41d0:	b004      	add	sp, #16
    41d2:	bd80      	pop	{r7, pc}
    41d4:	000003b5 	.word	0x000003b5
    41d8:	000003e9 	.word	0x000003e9

000041dc <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    41dc:	b580      	push	{r7, lr}
    41de:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    41e0:	4b06      	ldr	r3, [pc, #24]	; (41fc <configure_extint_callbacks+0x20>)
    41e2:	2200      	movs	r2, #0
    41e4:	2103      	movs	r1, #3
    41e6:	0018      	movs	r0, r3
    41e8:	4b05      	ldr	r3, [pc, #20]	; (4200 <configure_extint_callbacks+0x24>)
    41ea:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    41ec:	2100      	movs	r1, #0
    41ee:	2003      	movs	r0, #3
    41f0:	4b04      	ldr	r3, [pc, #16]	; (4204 <configure_extint_callbacks+0x28>)
    41f2:	4798      	blx	r3
}
    41f4:	46c0      	nop			; (mov r8, r8)
    41f6:	46bd      	mov	sp, r7
    41f8:	bd80      	pop	{r7, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00004d01 	.word	0x00004d01
    4200:	00000e59 	.word	0x00000e59
    4204:	00000ebd 	.word	0x00000ebd

00004208 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    4208:	b580      	push	{r7, lr}
    420a:	b090      	sub	sp, #64	; 0x40
    420c:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    420e:	1d3b      	adds	r3, r7, #4
    4210:	0018      	movs	r0, r3
    4212:	4b21      	ldr	r3, [pc, #132]	; (4298 <configure_RFM69_spi+0x90>)
    4214:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    4216:	1d3b      	adds	r3, r7, #4
    4218:	2212      	movs	r2, #18
    421a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    421c:	1d3a      	adds	r2, r7, #4
    421e:	4b1f      	ldr	r3, [pc, #124]	; (429c <configure_RFM69_spi+0x94>)
    4220:	0011      	movs	r1, r2
    4222:	0018      	movs	r0, r3
    4224:	4b1e      	ldr	r3, [pc, #120]	; (42a0 <configure_RFM69_spi+0x98>)
    4226:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    4228:	2308      	movs	r3, #8
    422a:	18fb      	adds	r3, r7, r3
    422c:	0018      	movs	r0, r3
    422e:	4b1d      	ldr	r3, [pc, #116]	; (42a4 <configure_RFM69_spi+0x9c>)
    4230:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    4232:	2308      	movs	r3, #8
    4234:	18fb      	adds	r3, r7, r3
    4236:	22c0      	movs	r2, #192	; 0xc0
    4238:	0392      	lsls	r2, r2, #14
    423a:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    423c:	2308      	movs	r3, #8
    423e:	18fb      	adds	r3, r7, r3
    4240:	4a19      	ldr	r2, [pc, #100]	; (42a8 <configure_RFM69_spi+0xa0>)
    4242:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    4244:	2308      	movs	r3, #8
    4246:	18fb      	adds	r3, r7, r3
    4248:	4a18      	ldr	r2, [pc, #96]	; (42ac <configure_RFM69_spi+0xa4>)
    424a:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    424c:	2308      	movs	r3, #8
    424e:	18fb      	adds	r3, r7, r3
    4250:	2201      	movs	r2, #1
    4252:	4252      	negs	r2, r2
    4254:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    4256:	2308      	movs	r3, #8
    4258:	18fb      	adds	r3, r7, r3
    425a:	4a15      	ldr	r2, [pc, #84]	; (42b0 <configure_RFM69_spi+0xa8>)
    425c:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    425e:	2308      	movs	r3, #8
    4260:	18fb      	adds	r3, r7, r3
    4262:	2200      	movs	r2, #0
    4264:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    4266:	2308      	movs	r3, #8
    4268:	18fb      	adds	r3, r7, r3
    426a:	2200      	movs	r2, #0
    426c:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    426e:	2308      	movs	r3, #8
    4270:	18fa      	adds	r2, r7, r3
    4272:	4910      	ldr	r1, [pc, #64]	; (42b4 <configure_RFM69_spi+0xac>)
    4274:	4b10      	ldr	r3, [pc, #64]	; (42b8 <configure_RFM69_spi+0xb0>)
    4276:	0018      	movs	r0, r3
    4278:	4b10      	ldr	r3, [pc, #64]	; (42bc <configure_RFM69_spi+0xb4>)
    427a:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    427c:	4b0e      	ldr	r3, [pc, #56]	; (42b8 <configure_RFM69_spi+0xb0>)
    427e:	0018      	movs	r0, r3
    4280:	4b0f      	ldr	r3, [pc, #60]	; (42c0 <configure_RFM69_spi+0xb8>)
    4282:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    4284:	4905      	ldr	r1, [pc, #20]	; (429c <configure_RFM69_spi+0x94>)
    4286:	4b0c      	ldr	r3, [pc, #48]	; (42b8 <configure_RFM69_spi+0xb0>)
    4288:	2200      	movs	r2, #0
    428a:	0018      	movs	r0, r3
    428c:	4b0d      	ldr	r3, [pc, #52]	; (42c4 <configure_RFM69_spi+0xbc>)
    428e:	4798      	blx	r3
}
    4290:	46c0      	nop			; (mov r8, r8)
    4292:	46bd      	mov	sp, r7
    4294:	b010      	add	sp, #64	; 0x40
    4296:	bd80      	pop	{r7, pc}
    4298:	00004065 	.word	0x00004065
    429c:	20000294 	.word	0x20000294
    42a0:	00004089 	.word	0x00004089
    42a4:	00003fe1 	.word	0x00003fe1
    42a8:	00100002 	.word	0x00100002
    42ac:	00110002 	.word	0x00110002
    42b0:	00130002 	.word	0x00130002
    42b4:	42000c00 	.word	0x42000c00
    42b8:	20000214 	.word	0x20000214
    42bc:	00002235 	.word	0x00002235
    42c0:	000040ed 	.word	0x000040ed
    42c4:	00002525 	.word	0x00002525

000042c8 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b084      	sub	sp, #16
    42cc:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    42ce:	003b      	movs	r3, r7
    42d0:	0018      	movs	r0, r3
    42d2:	4b0f      	ldr	r3, [pc, #60]	; (4310 <configure_rtc_count+0x48>)
    42d4:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    42d6:	003b      	movs	r3, r7
    42d8:	2200      	movs	r2, #0
    42da:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    42dc:	003b      	movs	r3, r7
    42de:	2200      	movs	r2, #0
    42e0:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    42e2:	003b      	movs	r3, r7
    42e4:	2201      	movs	r2, #1
    42e6:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    42e8:	003a      	movs	r2, r7
    42ea:	490a      	ldr	r1, [pc, #40]	; (4314 <configure_rtc_count+0x4c>)
    42ec:	4b0a      	ldr	r3, [pc, #40]	; (4318 <configure_rtc_count+0x50>)
    42ee:	0018      	movs	r0, r3
    42f0:	4b0a      	ldr	r3, [pc, #40]	; (431c <configure_rtc_count+0x54>)
    42f2:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    42f4:	4b08      	ldr	r3, [pc, #32]	; (4318 <configure_rtc_count+0x50>)
    42f6:	0018      	movs	r0, r3
    42f8:	4b09      	ldr	r3, [pc, #36]	; (4320 <configure_rtc_count+0x58>)
    42fa:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    42fc:	4a09      	ldr	r2, [pc, #36]	; (4324 <configure_rtc_count+0x5c>)
    42fe:	4b06      	ldr	r3, [pc, #24]	; (4318 <configure_rtc_count+0x50>)
    4300:	0011      	movs	r1, r2
    4302:	0018      	movs	r0, r3
    4304:	4b08      	ldr	r3, [pc, #32]	; (4328 <configure_rtc_count+0x60>)
    4306:	4798      	blx	r3
}
    4308:	46c0      	nop			; (mov r8, r8)
    430a:	46bd      	mov	sp, r7
    430c:	b004      	add	sp, #16
    430e:	bd80      	pop	{r7, pc}
    4310:	00003f65 	.word	0x00003f65
    4314:	40001400 	.word	0x40001400
    4318:	200000f8 	.word	0x200000f8
    431c:	000007e5 	.word	0x000007e5
    4320:	000005dd 	.word	0x000005dd
    4324:	00002710 	.word	0x00002710
    4328:	000009c9 	.word	0x000009c9

0000432c <reset_millis>:

void reset_millis(void)
{
    432c:	b580      	push	{r7, lr}
    432e:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    4330:	4b05      	ldr	r3, [pc, #20]	; (4348 <reset_millis+0x1c>)
    4332:	2100      	movs	r1, #0
    4334:	0018      	movs	r0, r3
    4336:	4b05      	ldr	r3, [pc, #20]	; (434c <reset_millis+0x20>)
    4338:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    433a:	4b03      	ldr	r3, [pc, #12]	; (4348 <reset_millis+0x1c>)
    433c:	0018      	movs	r0, r3
    433e:	4b04      	ldr	r3, [pc, #16]	; (4350 <reset_millis+0x24>)
    4340:	4798      	blx	r3
}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	46bd      	mov	sp, r7
    4346:	bd80      	pop	{r7, pc}
    4348:	200000f8 	.word	0x200000f8
    434c:	00000875 	.word	0x00000875
    4350:	000005dd 	.word	0x000005dd

00004354 <millis>:

uint32_t millis(void)
{
    4354:	b580      	push	{r7, lr}
    4356:	b082      	sub	sp, #8
    4358:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    435a:	2300      	movs	r3, #0
    435c:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    435e:	4b05      	ldr	r3, [pc, #20]	; (4374 <millis+0x20>)
    4360:	0018      	movs	r0, r3
    4362:	4b05      	ldr	r3, [pc, #20]	; (4378 <millis+0x24>)
    4364:	4798      	blx	r3
    4366:	0003      	movs	r3, r0
    4368:	607b      	str	r3, [r7, #4]
	return milli;
    436a:	687b      	ldr	r3, [r7, #4]
}
    436c:	0018      	movs	r0, r3
    436e:	46bd      	mov	sp, r7
    4370:	b002      	add	sp, #8
    4372:	bd80      	pop	{r7, pc}
    4374:	200000f8 	.word	0x200000f8
    4378:	000008d5 	.word	0x000008d5

0000437c <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    437c:	b590      	push	{r4, r7, lr}
    437e:	b085      	sub	sp, #20
    4380:	af00      	add	r7, sp, #0
    4382:	0004      	movs	r4, r0
    4384:	6039      	str	r1, [r7, #0]
    4386:	0010      	movs	r0, r2
    4388:	0019      	movs	r1, r3
    438a:	1dfb      	adds	r3, r7, #7
    438c:	1c22      	adds	r2, r4, #0
    438e:	701a      	strb	r2, [r3, #0]
    4390:	1dbb      	adds	r3, r7, #6
    4392:	1c02      	adds	r2, r0, #0
    4394:	701a      	strb	r2, [r3, #0]
    4396:	1d7b      	adds	r3, r7, #5
    4398:	1c0a      	adds	r2, r1, #0
    439a:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    439c:	2001      	movs	r0, #1
    439e:	4b4b      	ldr	r3, [pc, #300]	; (44cc <sendFrame+0x150>)
    43a0:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    43a2:	46c0      	nop			; (mov r8, r8)
    43a4:	2027      	movs	r0, #39	; 0x27
    43a6:	4b4a      	ldr	r3, [pc, #296]	; (44d0 <sendFrame+0x154>)
    43a8:	4798      	blx	r3
    43aa:	0003      	movs	r3, r0
    43ac:	b25b      	sxtb	r3, r3
    43ae:	2b00      	cmp	r3, #0
    43b0:	daf8      	bge.n	43a4 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    43b2:	2100      	movs	r1, #0
    43b4:	2025      	movs	r0, #37	; 0x25
    43b6:	4b47      	ldr	r3, [pc, #284]	; (44d4 <sendFrame+0x158>)
    43b8:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    43ba:	1dbb      	adds	r3, r7, #6
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	2b3d      	cmp	r3, #61	; 0x3d
    43c0:	d902      	bls.n	43c8 <sendFrame+0x4c>
    43c2:	1dbb      	adds	r3, r7, #6
    43c4:	223d      	movs	r2, #61	; 0x3d
    43c6:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    43c8:	230e      	movs	r3, #14
    43ca:	18fb      	adds	r3, r7, r3
    43cc:	2200      	movs	r2, #0
    43ce:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    43d0:	2320      	movs	r3, #32
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d004      	beq.n	43e4 <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    43da:	230e      	movs	r3, #14
    43dc:	18fb      	adds	r3, r7, r3
    43de:	2280      	movs	r2, #128	; 0x80
    43e0:	701a      	strb	r2, [r3, #0]
    43e2:	e007      	b.n	43f4 <sendFrame+0x78>
	else if (requestACK)
    43e4:	1d7b      	adds	r3, r7, #5
    43e6:	781b      	ldrb	r3, [r3, #0]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d003      	beq.n	43f4 <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    43ec:	230e      	movs	r3, #14
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	2240      	movs	r2, #64	; 0x40
    43f2:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	radioselect();
    43f4:	4b38      	ldr	r3, [pc, #224]	; (44d8 <sendFrame+0x15c>)
    43f6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    43f8:	4a38      	ldr	r2, [pc, #224]	; (44dc <sendFrame+0x160>)
    43fa:	4b39      	ldr	r3, [pc, #228]	; (44e0 <sendFrame+0x164>)
    43fc:	2180      	movs	r1, #128	; 0x80
    43fe:	0018      	movs	r0, r3
    4400:	4b38      	ldr	r3, [pc, #224]	; (44e4 <sendFrame+0x168>)
    4402:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    4404:	1dbb      	adds	r3, r7, #6
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	b29b      	uxth	r3, r3
    440a:	3303      	adds	r3, #3
    440c:	b299      	uxth	r1, r3
    440e:	4a33      	ldr	r2, [pc, #204]	; (44dc <sendFrame+0x160>)
    4410:	4b33      	ldr	r3, [pc, #204]	; (44e0 <sendFrame+0x164>)
    4412:	0018      	movs	r0, r3
    4414:	4b33      	ldr	r3, [pc, #204]	; (44e4 <sendFrame+0x168>)
    4416:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    4418:	1dfb      	adds	r3, r7, #7
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	b299      	uxth	r1, r3
    441e:	4a2f      	ldr	r2, [pc, #188]	; (44dc <sendFrame+0x160>)
    4420:	4b2f      	ldr	r3, [pc, #188]	; (44e0 <sendFrame+0x164>)
    4422:	0018      	movs	r0, r3
    4424:	4b2f      	ldr	r3, [pc, #188]	; (44e4 <sendFrame+0x168>)
    4426:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    4428:	4b2f      	ldr	r3, [pc, #188]	; (44e8 <sendFrame+0x16c>)
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	b2db      	uxtb	r3, r3
    442e:	b299      	uxth	r1, r3
    4430:	4a2a      	ldr	r2, [pc, #168]	; (44dc <sendFrame+0x160>)
    4432:	4b2b      	ldr	r3, [pc, #172]	; (44e0 <sendFrame+0x164>)
    4434:	0018      	movs	r0, r3
    4436:	4b2b      	ldr	r3, [pc, #172]	; (44e4 <sendFrame+0x168>)
    4438:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    443a:	230e      	movs	r3, #14
    443c:	18fb      	adds	r3, r7, r3
    443e:	781b      	ldrb	r3, [r3, #0]
    4440:	b2db      	uxtb	r3, r3
    4442:	b299      	uxth	r1, r3
    4444:	4a25      	ldr	r2, [pc, #148]	; (44dc <sendFrame+0x160>)
    4446:	4b26      	ldr	r3, [pc, #152]	; (44e0 <sendFrame+0x164>)
    4448:	0018      	movs	r0, r3
    444a:	4b26      	ldr	r3, [pc, #152]	; (44e4 <sendFrame+0x168>)
    444c:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    444e:	230f      	movs	r3, #15
    4450:	18fb      	adds	r3, r7, r3
    4452:	2200      	movs	r2, #0
    4454:	701a      	strb	r2, [r3, #0]
    4456:	e012      	b.n	447e <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    4458:	230f      	movs	r3, #15
    445a:	18fb      	adds	r3, r7, r3
    445c:	781b      	ldrb	r3, [r3, #0]
    445e:	683a      	ldr	r2, [r7, #0]
    4460:	18d3      	adds	r3, r2, r3
    4462:	781b      	ldrb	r3, [r3, #0]
    4464:	b299      	uxth	r1, r3
    4466:	4a1d      	ldr	r2, [pc, #116]	; (44dc <sendFrame+0x160>)
    4468:	4b1d      	ldr	r3, [pc, #116]	; (44e0 <sendFrame+0x164>)
    446a:	0018      	movs	r0, r3
    446c:	4b1d      	ldr	r3, [pc, #116]	; (44e4 <sendFrame+0x168>)
    446e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    4470:	230f      	movs	r3, #15
    4472:	18fb      	adds	r3, r7, r3
    4474:	781a      	ldrb	r2, [r3, #0]
    4476:	230f      	movs	r3, #15
    4478:	18fb      	adds	r3, r7, r3
    447a:	3201      	adds	r2, #1
    447c:	701a      	strb	r2, [r3, #0]
    447e:	230f      	movs	r3, #15
    4480:	18fa      	adds	r2, r7, r3
    4482:	1dbb      	adds	r3, r7, #6
    4484:	7812      	ldrb	r2, [r2, #0]
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	429a      	cmp	r2, r3
    448a:	d3e5      	bcc.n	4458 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    448c:	4b17      	ldr	r3, [pc, #92]	; (44ec <sendFrame+0x170>)
    448e:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    4490:	2004      	movs	r0, #4
    4492:	4b0e      	ldr	r3, [pc, #56]	; (44cc <sendFrame+0x150>)
    4494:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    4496:	4b16      	ldr	r3, [pc, #88]	; (44f0 <sendFrame+0x174>)
    4498:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    449a:	46c0      	nop			; (mov r8, r8)
    449c:	2003      	movs	r0, #3
    449e:	4b15      	ldr	r3, [pc, #84]	; (44f4 <sendFrame+0x178>)
    44a0:	4798      	blx	r3
    44a2:	0003      	movs	r3, r0
    44a4:	001a      	movs	r2, r3
    44a6:	2301      	movs	r3, #1
    44a8:	4053      	eors	r3, r2
    44aa:	b2db      	uxtb	r3, r3
    44ac:	2b00      	cmp	r3, #0
    44ae:	d005      	beq.n	44bc <sendFrame+0x140>
    44b0:	4b11      	ldr	r3, [pc, #68]	; (44f8 <sendFrame+0x17c>)
    44b2:	4798      	blx	r3
    44b4:	1e02      	subs	r2, r0, #0
    44b6:	4b11      	ldr	r3, [pc, #68]	; (44fc <sendFrame+0x180>)
    44b8:	429a      	cmp	r2, r3
    44ba:	d9ef      	bls.n	449c <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    44bc:	2001      	movs	r0, #1
    44be:	4b03      	ldr	r3, [pc, #12]	; (44cc <sendFrame+0x150>)
    44c0:	4798      	blx	r3
}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	46bd      	mov	sp, r7
    44c6:	b005      	add	sp, #20
    44c8:	bd90      	pop	{r4, r7, pc}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	0000491d 	.word	0x0000491d
    44d0:	00004f09 	.word	0x00004f09
    44d4:	00004f71 	.word	0x00004f71
    44d8:	00004fd1 	.word	0x00004fd1
    44dc:	20000060 	.word	0x20000060
    44e0:	20000214 	.word	0x20000214
    44e4:	000023d9 	.word	0x000023d9
    44e8:	20000154 	.word	0x20000154
    44ec:	00004ffd 	.word	0x00004ffd
    44f0:	0000432d 	.word	0x0000432d
    44f4:	00003e69 	.word	0x00003e69
    44f8:	00004355 	.word	0x00004355
    44fc:	000003e7 	.word	0x000003e7

00004500 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    4500:	b580      	push	{r7, lr}
    4502:	b082      	sub	sp, #8
    4504:	af00      	add	r7, sp, #0
    4506:	0002      	movs	r2, r0
    4508:	1dfb      	adds	r3, r7, #7
    450a:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    450c:	4b19      	ldr	r3, [pc, #100]	; (4574 <RFM_setHighPower+0x74>)
    450e:	1dfa      	adds	r2, r7, #7
    4510:	7812      	ldrb	r2, [r2, #0]
    4512:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    4514:	4b17      	ldr	r3, [pc, #92]	; (4574 <RFM_setHighPower+0x74>)
    4516:	781b      	ldrb	r3, [r3, #0]
    4518:	b2db      	uxtb	r3, r3
    451a:	2b00      	cmp	r3, #0
    451c:	d001      	beq.n	4522 <RFM_setHighPower+0x22>
    451e:	230f      	movs	r3, #15
    4520:	e000      	b.n	4524 <RFM_setHighPower+0x24>
    4522:	231a      	movs	r3, #26
    4524:	0019      	movs	r1, r3
    4526:	2013      	movs	r0, #19
    4528:	4b13      	ldr	r3, [pc, #76]	; (4578 <RFM_setHighPower+0x78>)
    452a:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    452c:	4b11      	ldr	r3, [pc, #68]	; (4574 <RFM_setHighPower+0x74>)
    452e:	781b      	ldrb	r3, [r3, #0]
    4530:	b2db      	uxtb	r3, r3
    4532:	2b00      	cmp	r3, #0
    4534:	d010      	beq.n	4558 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    4536:	2011      	movs	r0, #17
    4538:	4b10      	ldr	r3, [pc, #64]	; (457c <RFM_setHighPower+0x7c>)
    453a:	4798      	blx	r3
    453c:	0003      	movs	r3, r0
    453e:	b25b      	sxtb	r3, r3
    4540:	221f      	movs	r2, #31
    4542:	4013      	ands	r3, r2
    4544:	b25b      	sxtb	r3, r3
    4546:	2260      	movs	r2, #96	; 0x60
    4548:	4313      	orrs	r3, r2
    454a:	b25b      	sxtb	r3, r3
    454c:	b2db      	uxtb	r3, r3
    454e:	0019      	movs	r1, r3
    4550:	2011      	movs	r0, #17
    4552:	4b09      	ldr	r3, [pc, #36]	; (4578 <RFM_setHighPower+0x78>)
    4554:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    4556:	e009      	b.n	456c <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    4558:	4b09      	ldr	r3, [pc, #36]	; (4580 <RFM_setHighPower+0x80>)
    455a:	781b      	ldrb	r3, [r3, #0]
    455c:	2280      	movs	r2, #128	; 0x80
    455e:	4252      	negs	r2, r2
    4560:	4313      	orrs	r3, r2
    4562:	b2db      	uxtb	r3, r3
    4564:	0019      	movs	r1, r3
    4566:	2011      	movs	r0, #17
    4568:	4b03      	ldr	r3, [pc, #12]	; (4578 <RFM_setHighPower+0x78>)
    456a:	4798      	blx	r3
}
    456c:	46c0      	nop			; (mov r8, r8)
    456e:	46bd      	mov	sp, r7
    4570:	b002      	add	sp, #8
    4572:	bd80      	pop	{r7, pc}
    4574:	20000210 	.word	0x20000210
    4578:	00004f71 	.word	0x00004f71
    457c:	00004f09 	.word	0x00004f09
    4580:	20000110 	.word	0x20000110

00004584 <RFM69>:

void RFM69()
{
    4584:	b580      	push	{r7, lr}
    4586:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    4588:	4b07      	ldr	r3, [pc, #28]	; (45a8 <RFM69+0x24>)
    458a:	2201      	movs	r2, #1
    458c:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    458e:	4b07      	ldr	r3, [pc, #28]	; (45ac <RFM69+0x28>)
    4590:	2200      	movs	r2, #0
    4592:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    4594:	4b06      	ldr	r3, [pc, #24]	; (45b0 <RFM69+0x2c>)
    4596:	221f      	movs	r2, #31
    4598:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    459a:	4b06      	ldr	r3, [pc, #24]	; (45b4 <RFM69+0x30>)
    459c:	2200      	movs	r2, #0
    459e:	701a      	strb	r2, [r3, #0]
}
    45a0:	46c0      	nop			; (mov r8, r8)
    45a2:	46bd      	mov	sp, r7
    45a4:	bd80      	pop	{r7, pc}
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	2000020e 	.word	0x2000020e
    45ac:	2000015c 	.word	0x2000015c
    45b0:	20000110 	.word	0x20000110
    45b4:	20000210 	.word	0x20000210

000045b8 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    45b8:	b590      	push	{r4, r7, lr}
    45ba:	b091      	sub	sp, #68	; 0x44
    45bc:	af00      	add	r7, sp, #0
    45be:	0004      	movs	r4, r0
    45c0:	0008      	movs	r0, r1
    45c2:	0011      	movs	r1, r2
    45c4:	1dfb      	adds	r3, r7, #7
    45c6:	1c22      	adds	r2, r4, #0
    45c8:	701a      	strb	r2, [r3, #0]
    45ca:	1dbb      	adds	r3, r7, #6
    45cc:	1c02      	adds	r2, r0, #0
    45ce:	701a      	strb	r2, [r3, #0]
    45d0:	1d7b      	adds	r3, r7, #5
    45d2:	1c0a      	adds	r2, r1, #0
    45d4:	701a      	strb	r2, [r3, #0]
  RFM69();
    45d6:	4bc1      	ldr	r3, [pc, #772]	; (48dc <RFM_initialize+0x324>)
    45d8:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    45da:	2310      	movs	r3, #16
    45dc:	18fb      	adds	r3, r7, r3
    45de:	2201      	movs	r2, #1
    45e0:	701a      	strb	r2, [r3, #0]
    45e2:	2310      	movs	r3, #16
    45e4:	18fb      	adds	r3, r7, r3
    45e6:	2204      	movs	r2, #4
    45e8:	705a      	strb	r2, [r3, #1]
    45ea:	2310      	movs	r3, #16
    45ec:	18fb      	adds	r3, r7, r3
    45ee:	2202      	movs	r2, #2
    45f0:	709a      	strb	r2, [r3, #2]
    45f2:	2310      	movs	r3, #16
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	2200      	movs	r2, #0
    45f8:	70da      	strb	r2, [r3, #3]
    45fa:	2310      	movs	r3, #16
    45fc:	18fb      	adds	r3, r7, r3
    45fe:	2203      	movs	r2, #3
    4600:	711a      	strb	r2, [r3, #4]
    4602:	2310      	movs	r3, #16
    4604:	18fb      	adds	r3, r7, r3
    4606:	2202      	movs	r2, #2
    4608:	715a      	strb	r2, [r3, #5]
    460a:	2310      	movs	r3, #16
    460c:	18fb      	adds	r3, r7, r3
    460e:	2204      	movs	r2, #4
    4610:	719a      	strb	r2, [r3, #6]
    4612:	2310      	movs	r3, #16
    4614:	18fb      	adds	r3, r7, r3
    4616:	2240      	movs	r2, #64	; 0x40
    4618:	71da      	strb	r2, [r3, #7]
    461a:	2310      	movs	r3, #16
    461c:	18fb      	adds	r3, r7, r3
    461e:	2205      	movs	r2, #5
    4620:	721a      	strb	r2, [r3, #8]
    4622:	2310      	movs	r3, #16
    4624:	18fb      	adds	r3, r7, r3
    4626:	2203      	movs	r2, #3
    4628:	725a      	strb	r2, [r3, #9]
    462a:	2310      	movs	r3, #16
    462c:	18fb      	adds	r3, r7, r3
    462e:	2206      	movs	r2, #6
    4630:	729a      	strb	r2, [r3, #10]
    4632:	2310      	movs	r3, #16
    4634:	18fb      	adds	r3, r7, r3
    4636:	2233      	movs	r2, #51	; 0x33
    4638:	72da      	strb	r2, [r3, #11]
    463a:	2310      	movs	r3, #16
    463c:	18fb      	adds	r3, r7, r3
    463e:	2207      	movs	r2, #7
    4640:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    4642:	1dfb      	adds	r3, r7, #7
    4644:	781b      	ldrb	r3, [r3, #0]
    4646:	2b1f      	cmp	r3, #31
    4648:	d00d      	beq.n	4666 <RFM_initialize+0xae>
    464a:	1dfb      	adds	r3, r7, #7
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	2b2b      	cmp	r3, #43	; 0x2b
    4650:	d007      	beq.n	4662 <RFM_initialize+0xaa>
    4652:	1dfb      	adds	r3, r7, #7
    4654:	781b      	ldrb	r3, [r3, #0]
    4656:	2b56      	cmp	r3, #86	; 0x56
    4658:	d101      	bne.n	465e <RFM_initialize+0xa6>
    465a:	23d9      	movs	r3, #217	; 0xd9
    465c:	e004      	b.n	4668 <RFM_initialize+0xb0>
    465e:	23e4      	movs	r3, #228	; 0xe4
    4660:	e002      	b.n	4668 <RFM_initialize+0xb0>
    4662:	236c      	movs	r3, #108	; 0x6c
    4664:	e000      	b.n	4668 <RFM_initialize+0xb0>
    4666:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    4668:	2210      	movs	r2, #16
    466a:	18ba      	adds	r2, r7, r2
    466c:	7353      	strb	r3, [r2, #13]
    466e:	2310      	movs	r3, #16
    4670:	18fb      	adds	r3, r7, r3
    4672:	2208      	movs	r2, #8
    4674:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    4676:	1dfb      	adds	r3, r7, #7
    4678:	781b      	ldrb	r3, [r3, #0]
    467a:	2b1f      	cmp	r3, #31
    467c:	d00d      	beq.n	469a <RFM_initialize+0xe2>
    467e:	1dfb      	adds	r3, r7, #7
    4680:	781b      	ldrb	r3, [r3, #0]
    4682:	2b2b      	cmp	r3, #43	; 0x2b
    4684:	d007      	beq.n	4696 <RFM_initialize+0xde>
    4686:	1dfb      	adds	r3, r7, #7
    4688:	781b      	ldrb	r3, [r3, #0]
    468a:	2b56      	cmp	r3, #86	; 0x56
    468c:	d101      	bne.n	4692 <RFM_initialize+0xda>
    468e:	2300      	movs	r3, #0
    4690:	e004      	b.n	469c <RFM_initialize+0xe4>
    4692:	23c0      	movs	r3, #192	; 0xc0
    4694:	e002      	b.n	469c <RFM_initialize+0xe4>
    4696:	2340      	movs	r3, #64	; 0x40
    4698:	e000      	b.n	469c <RFM_initialize+0xe4>
    469a:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    469c:	2210      	movs	r2, #16
    469e:	18ba      	adds	r2, r7, r2
    46a0:	73d3      	strb	r3, [r2, #15]
    46a2:	2310      	movs	r3, #16
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	2209      	movs	r2, #9
    46a8:	741a      	strb	r2, [r3, #16]
    46aa:	2310      	movs	r3, #16
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	2200      	movs	r2, #0
    46b0:	745a      	strb	r2, [r3, #17]
    46b2:	2310      	movs	r3, #16
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	2219      	movs	r2, #25
    46b8:	749a      	strb	r2, [r3, #18]
    46ba:	2310      	movs	r3, #16
    46bc:	18fb      	adds	r3, r7, r3
    46be:	2242      	movs	r2, #66	; 0x42
    46c0:	74da      	strb	r2, [r3, #19]
    46c2:	2310      	movs	r3, #16
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	2225      	movs	r2, #37	; 0x25
    46c8:	751a      	strb	r2, [r3, #20]
    46ca:	2310      	movs	r3, #16
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	2240      	movs	r2, #64	; 0x40
    46d0:	755a      	strb	r2, [r3, #21]
    46d2:	2310      	movs	r3, #16
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	2226      	movs	r2, #38	; 0x26
    46d8:	759a      	strb	r2, [r3, #22]
    46da:	2310      	movs	r3, #16
    46dc:	18fb      	adds	r3, r7, r3
    46de:	2207      	movs	r2, #7
    46e0:	75da      	strb	r2, [r3, #23]
    46e2:	2310      	movs	r3, #16
    46e4:	18fb      	adds	r3, r7, r3
    46e6:	2228      	movs	r2, #40	; 0x28
    46e8:	761a      	strb	r2, [r3, #24]
    46ea:	2310      	movs	r3, #16
    46ec:	18fb      	adds	r3, r7, r3
    46ee:	2210      	movs	r2, #16
    46f0:	765a      	strb	r2, [r3, #25]
    46f2:	2310      	movs	r3, #16
    46f4:	18fb      	adds	r3, r7, r3
    46f6:	2229      	movs	r2, #41	; 0x29
    46f8:	769a      	strb	r2, [r3, #26]
    46fa:	2310      	movs	r3, #16
    46fc:	18fb      	adds	r3, r7, r3
    46fe:	22dc      	movs	r2, #220	; 0xdc
    4700:	76da      	strb	r2, [r3, #27]
    4702:	2310      	movs	r3, #16
    4704:	18fb      	adds	r3, r7, r3
    4706:	222e      	movs	r2, #46	; 0x2e
    4708:	771a      	strb	r2, [r3, #28]
    470a:	2310      	movs	r3, #16
    470c:	18fb      	adds	r3, r7, r3
    470e:	2288      	movs	r2, #136	; 0x88
    4710:	775a      	strb	r2, [r3, #29]
    4712:	2310      	movs	r3, #16
    4714:	18fb      	adds	r3, r7, r3
    4716:	222f      	movs	r2, #47	; 0x2f
    4718:	779a      	strb	r2, [r3, #30]
    471a:	2310      	movs	r3, #16
    471c:	18fb      	adds	r3, r7, r3
    471e:	222d      	movs	r2, #45	; 0x2d
    4720:	77da      	strb	r2, [r3, #31]
    4722:	2310      	movs	r3, #16
    4724:	18fb      	adds	r3, r7, r3
    4726:	2220      	movs	r2, #32
    4728:	2130      	movs	r1, #48	; 0x30
    472a:	5499      	strb	r1, [r3, r2]
    472c:	2310      	movs	r3, #16
    472e:	18fb      	adds	r3, r7, r3
    4730:	1d7a      	adds	r2, r7, #5
    4732:	2121      	movs	r1, #33	; 0x21
    4734:	7812      	ldrb	r2, [r2, #0]
    4736:	545a      	strb	r2, [r3, r1]
    4738:	2310      	movs	r3, #16
    473a:	18fb      	adds	r3, r7, r3
    473c:	2222      	movs	r2, #34	; 0x22
    473e:	2137      	movs	r1, #55	; 0x37
    4740:	5499      	strb	r1, [r3, r2]
    4742:	2310      	movs	r3, #16
    4744:	18fb      	adds	r3, r7, r3
    4746:	2223      	movs	r2, #35	; 0x23
    4748:	2190      	movs	r1, #144	; 0x90
    474a:	5499      	strb	r1, [r3, r2]
    474c:	2310      	movs	r3, #16
    474e:	18fb      	adds	r3, r7, r3
    4750:	2224      	movs	r2, #36	; 0x24
    4752:	2138      	movs	r1, #56	; 0x38
    4754:	5499      	strb	r1, [r3, r2]
    4756:	2310      	movs	r3, #16
    4758:	18fb      	adds	r3, r7, r3
    475a:	2225      	movs	r2, #37	; 0x25
    475c:	2142      	movs	r1, #66	; 0x42
    475e:	5499      	strb	r1, [r3, r2]
    4760:	2310      	movs	r3, #16
    4762:	18fb      	adds	r3, r7, r3
    4764:	2226      	movs	r2, #38	; 0x26
    4766:	213c      	movs	r1, #60	; 0x3c
    4768:	5499      	strb	r1, [r3, r2]
    476a:	2310      	movs	r3, #16
    476c:	18fb      	adds	r3, r7, r3
    476e:	2227      	movs	r2, #39	; 0x27
    4770:	218f      	movs	r1, #143	; 0x8f
    4772:	5499      	strb	r1, [r3, r2]
    4774:	2310      	movs	r3, #16
    4776:	18fb      	adds	r3, r7, r3
    4778:	2228      	movs	r2, #40	; 0x28
    477a:	213d      	movs	r1, #61	; 0x3d
    477c:	5499      	strb	r1, [r3, r2]
    477e:	2310      	movs	r3, #16
    4780:	18fb      	adds	r3, r7, r3
    4782:	2229      	movs	r2, #41	; 0x29
    4784:	2112      	movs	r1, #18
    4786:	5499      	strb	r1, [r3, r2]
    4788:	2310      	movs	r3, #16
    478a:	18fb      	adds	r3, r7, r3
    478c:	222a      	movs	r2, #42	; 0x2a
    478e:	216f      	movs	r1, #111	; 0x6f
    4790:	5499      	strb	r1, [r3, r2]
    4792:	2310      	movs	r3, #16
    4794:	18fb      	adds	r3, r7, r3
    4796:	222b      	movs	r2, #43	; 0x2b
    4798:	2130      	movs	r1, #48	; 0x30
    479a:	5499      	strb	r1, [r3, r2]
    479c:	2310      	movs	r3, #16
    479e:	18fb      	adds	r3, r7, r3
    47a0:	222c      	movs	r2, #44	; 0x2c
    47a2:	21ff      	movs	r1, #255	; 0xff
    47a4:	5499      	strb	r1, [r3, r2]
    47a6:	2310      	movs	r3, #16
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	222d      	movs	r2, #45	; 0x2d
    47ac:	2100      	movs	r1, #0
    47ae:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    47b0:	4b4b      	ldr	r3, [pc, #300]	; (48e0 <RFM_initialize+0x328>)
    47b2:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    47b4:	4b4b      	ldr	r3, [pc, #300]	; (48e4 <RFM_initialize+0x32c>)
    47b6:	4798      	blx	r3
  configure_port_pins();
    47b8:	4b4b      	ldr	r3, [pc, #300]	; (48e8 <RFM_initialize+0x330>)
    47ba:	4798      	blx	r3
  configure_extint_channel();
    47bc:	4b4b      	ldr	r3, [pc, #300]	; (48ec <RFM_initialize+0x334>)
    47be:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    47c0:	4b4b      	ldr	r3, [pc, #300]	; (48f0 <RFM_initialize+0x338>)
    47c2:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    47c4:	230f      	movs	r3, #15
    47c6:	18fb      	adds	r3, r7, r3
    47c8:	2232      	movs	r2, #50	; 0x32
    47ca:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    47cc:	21aa      	movs	r1, #170	; 0xaa
    47ce:	202f      	movs	r0, #47	; 0x2f
    47d0:	4b48      	ldr	r3, [pc, #288]	; (48f4 <RFM_initialize+0x33c>)
    47d2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    47d4:	202f      	movs	r0, #47	; 0x2f
    47d6:	4b48      	ldr	r3, [pc, #288]	; (48f8 <RFM_initialize+0x340>)
    47d8:	4798      	blx	r3
    47da:	1e03      	subs	r3, r0, #0
    47dc:	2baa      	cmp	r3, #170	; 0xaa
    47de:	d008      	beq.n	47f2 <RFM_initialize+0x23a>
    47e0:	4b46      	ldr	r3, [pc, #280]	; (48fc <RFM_initialize+0x344>)
    47e2:	4798      	blx	r3
    47e4:	0002      	movs	r2, r0
    47e6:	230f      	movs	r3, #15
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	b2db      	uxtb	r3, r3
    47ee:	429a      	cmp	r2, r3
    47f0:	d3ec      	bcc.n	47cc <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    47f2:	4b3f      	ldr	r3, [pc, #252]	; (48f0 <RFM_initialize+0x338>)
    47f4:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    47f6:	2155      	movs	r1, #85	; 0x55
    47f8:	202f      	movs	r0, #47	; 0x2f
    47fa:	4b3e      	ldr	r3, [pc, #248]	; (48f4 <RFM_initialize+0x33c>)
    47fc:	4798      	blx	r3
    47fe:	202f      	movs	r0, #47	; 0x2f
    4800:	4b3d      	ldr	r3, [pc, #244]	; (48f8 <RFM_initialize+0x340>)
    4802:	4798      	blx	r3
    4804:	1e03      	subs	r3, r0, #0
    4806:	2b55      	cmp	r3, #85	; 0x55
    4808:	d008      	beq.n	481c <RFM_initialize+0x264>
    480a:	4b3c      	ldr	r3, [pc, #240]	; (48fc <RFM_initialize+0x344>)
    480c:	4798      	blx	r3
    480e:	0002      	movs	r2, r0
    4810:	230f      	movs	r3, #15
    4812:	18fb      	adds	r3, r7, r3
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	b2db      	uxtb	r3, r3
    4818:	429a      	cmp	r2, r3
    481a:	d3ec      	bcc.n	47f6 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    481c:	233f      	movs	r3, #63	; 0x3f
    481e:	18fb      	adds	r3, r7, r3
    4820:	2200      	movs	r2, #0
    4822:	701a      	strb	r2, [r3, #0]
    4824:	e019      	b.n	485a <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    4826:	233f      	movs	r3, #63	; 0x3f
    4828:	18fb      	adds	r3, r7, r3
    482a:	781a      	ldrb	r2, [r3, #0]
    482c:	2310      	movs	r3, #16
    482e:	18fb      	adds	r3, r7, r3
    4830:	0052      	lsls	r2, r2, #1
    4832:	5cd0      	ldrb	r0, [r2, r3]
    4834:	233f      	movs	r3, #63	; 0x3f
    4836:	18fb      	adds	r3, r7, r3
    4838:	781b      	ldrb	r3, [r3, #0]
    483a:	2210      	movs	r2, #16
    483c:	18ba      	adds	r2, r7, r2
    483e:	005b      	lsls	r3, r3, #1
    4840:	18d3      	adds	r3, r2, r3
    4842:	3301      	adds	r3, #1
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	0019      	movs	r1, r3
    4848:	4b2a      	ldr	r3, [pc, #168]	; (48f4 <RFM_initialize+0x33c>)
    484a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    484c:	233f      	movs	r3, #63	; 0x3f
    484e:	18fb      	adds	r3, r7, r3
    4850:	781a      	ldrb	r2, [r3, #0]
    4852:	233f      	movs	r3, #63	; 0x3f
    4854:	18fb      	adds	r3, r7, r3
    4856:	3201      	adds	r2, #1
    4858:	701a      	strb	r2, [r3, #0]
    485a:	233f      	movs	r3, #63	; 0x3f
    485c:	18fb      	adds	r3, r7, r3
    485e:	781a      	ldrb	r2, [r3, #0]
    4860:	2310      	movs	r3, #16
    4862:	18fb      	adds	r3, r7, r3
    4864:	0052      	lsls	r2, r2, #1
    4866:	5cd3      	ldrb	r3, [r2, r3]
    4868:	2bff      	cmp	r3, #255	; 0xff
    486a:	d1dc      	bne.n	4826 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    486c:	2000      	movs	r0, #0
    486e:	4b24      	ldr	r3, [pc, #144]	; (4900 <RFM_initialize+0x348>)
    4870:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    4872:	4b24      	ldr	r3, [pc, #144]	; (4904 <RFM_initialize+0x34c>)
    4874:	781b      	ldrb	r3, [r3, #0]
    4876:	b2db      	uxtb	r3, r3
    4878:	0018      	movs	r0, r3
    487a:	4b23      	ldr	r3, [pc, #140]	; (4908 <RFM_initialize+0x350>)
    487c:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    487e:	2001      	movs	r0, #1
    4880:	4b22      	ldr	r3, [pc, #136]	; (490c <RFM_initialize+0x354>)
    4882:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    4884:	4b1a      	ldr	r3, [pc, #104]	; (48f0 <RFM_initialize+0x338>)
    4886:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    4888:	46c0      	nop			; (mov r8, r8)
    488a:	2027      	movs	r0, #39	; 0x27
    488c:	4b1a      	ldr	r3, [pc, #104]	; (48f8 <RFM_initialize+0x340>)
    488e:	4798      	blx	r3
    4890:	0003      	movs	r3, r0
    4892:	b25b      	sxtb	r3, r3
    4894:	2b00      	cmp	r3, #0
    4896:	db08      	blt.n	48aa <RFM_initialize+0x2f2>
    4898:	4b18      	ldr	r3, [pc, #96]	; (48fc <RFM_initialize+0x344>)
    489a:	4798      	blx	r3
    489c:	0002      	movs	r2, r0
    489e:	230f      	movs	r3, #15
    48a0:	18fb      	adds	r3, r7, r3
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	b2db      	uxtb	r3, r3
    48a6:	429a      	cmp	r2, r3
    48a8:	d3ef      	bcc.n	488a <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    48aa:	4b14      	ldr	r3, [pc, #80]	; (48fc <RFM_initialize+0x344>)
    48ac:	4798      	blx	r3
    48ae:	0002      	movs	r2, r0
    48b0:	230f      	movs	r3, #15
    48b2:	18fb      	adds	r3, r7, r3
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	b2db      	uxtb	r3, r3
    48b8:	429a      	cmp	r2, r3
    48ba:	d301      	bcc.n	48c0 <RFM_initialize+0x308>
    return false;
    48bc:	2300      	movs	r3, #0
    48be:	e009      	b.n	48d4 <RFM_initialize+0x31c>
  _inISR = false;
    48c0:	4b13      	ldr	r3, [pc, #76]	; (4910 <RFM_initialize+0x358>)
    48c2:	2200      	movs	r2, #0
    48c4:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    48c6:	4b13      	ldr	r3, [pc, #76]	; (4914 <RFM_initialize+0x35c>)
    48c8:	4798      	blx	r3

  _address = nodeID;
    48ca:	4b13      	ldr	r3, [pc, #76]	; (4918 <RFM_initialize+0x360>)
    48cc:	1dba      	adds	r2, r7, #6
    48ce:	7812      	ldrb	r2, [r2, #0]
    48d0:	701a      	strb	r2, [r3, #0]
  return true;
    48d2:	2301      	movs	r3, #1
}
    48d4:	0018      	movs	r0, r3
    48d6:	46bd      	mov	sp, r7
    48d8:	b011      	add	sp, #68	; 0x44
    48da:	bd90      	pop	{r4, r7, pc}
    48dc:	00004585 	.word	0x00004585
    48e0:	00004209 	.word	0x00004209
    48e4:	000042c9 	.word	0x000042c9
    48e8:	0000416d 	.word	0x0000416d
    48ec:	0000419d 	.word	0x0000419d
    48f0:	0000432d 	.word	0x0000432d
    48f4:	00004f71 	.word	0x00004f71
    48f8:	00004f09 	.word	0x00004f09
    48fc:	00004355 	.word	0x00004355
    4900:	00004e15 	.word	0x00004e15
    4904:	20000210 	.word	0x20000210
    4908:	00004501 	.word	0x00004501
    490c:	0000491d 	.word	0x0000491d
    4910:	20000111 	.word	0x20000111
    4914:	000041dd 	.word	0x000041dd
    4918:	20000154 	.word	0x20000154

0000491c <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    491c:	b580      	push	{r7, lr}
    491e:	b082      	sub	sp, #8
    4920:	af00      	add	r7, sp, #0
    4922:	0002      	movs	r2, r0
    4924:	1dfb      	adds	r3, r7, #7
    4926:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    4928:	1dfb      	adds	r3, r7, #7
    492a:	781b      	ldrb	r3, [r3, #0]
    492c:	b29a      	uxth	r2, r3
    492e:	4b47      	ldr	r3, [pc, #284]	; (4a4c <setMode+0x130>)
    4930:	881b      	ldrh	r3, [r3, #0]
    4932:	b29b      	uxth	r3, r3
    4934:	429a      	cmp	r2, r3
    4936:	d100      	bne.n	493a <setMode+0x1e>
    4938:	e081      	b.n	4a3e <setMode+0x122>
    return;

  switch (newMode) {
    493a:	1dfb      	adds	r3, r7, #7
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2b04      	cmp	r3, #4
    4940:	d900      	bls.n	4944 <setMode+0x28>
    4942:	e07e      	b.n	4a42 <setMode+0x126>
    4944:	009a      	lsls	r2, r3, #2
    4946:	4b42      	ldr	r3, [pc, #264]	; (4a50 <setMode+0x134>)
    4948:	18d3      	adds	r3, r2, r3
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    494e:	2001      	movs	r0, #1
    4950:	4b40      	ldr	r3, [pc, #256]	; (4a54 <setMode+0x138>)
    4952:	4798      	blx	r3
    4954:	0003      	movs	r3, r0
    4956:	b25b      	sxtb	r3, r3
    4958:	221c      	movs	r2, #28
    495a:	4393      	bics	r3, r2
    495c:	b25b      	sxtb	r3, r3
    495e:	220c      	movs	r2, #12
    4960:	4313      	orrs	r3, r2
    4962:	b25b      	sxtb	r3, r3
    4964:	b2db      	uxtb	r3, r3
    4966:	0019      	movs	r1, r3
    4968:	2001      	movs	r0, #1
    496a:	4b3b      	ldr	r3, [pc, #236]	; (4a58 <setMode+0x13c>)
    496c:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    496e:	4b3b      	ldr	r3, [pc, #236]	; (4a5c <setMode+0x140>)
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	b2db      	uxtb	r3, r3
    4974:	2b00      	cmp	r3, #0
    4976:	d04c      	beq.n	4a12 <setMode+0xf6>
    4978:	2001      	movs	r0, #1
    497a:	4b39      	ldr	r3, [pc, #228]	; (4a60 <setMode+0x144>)
    497c:	4798      	blx	r3
      break;
    497e:	e048      	b.n	4a12 <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    4980:	2001      	movs	r0, #1
    4982:	4b34      	ldr	r3, [pc, #208]	; (4a54 <setMode+0x138>)
    4984:	4798      	blx	r3
    4986:	0003      	movs	r3, r0
    4988:	b25b      	sxtb	r3, r3
    498a:	221c      	movs	r2, #28
    498c:	4393      	bics	r3, r2
    498e:	b25b      	sxtb	r3, r3
    4990:	2210      	movs	r2, #16
    4992:	4313      	orrs	r3, r2
    4994:	b25b      	sxtb	r3, r3
    4996:	b2db      	uxtb	r3, r3
    4998:	0019      	movs	r1, r3
    499a:	2001      	movs	r0, #1
    499c:	4b2e      	ldr	r3, [pc, #184]	; (4a58 <setMode+0x13c>)
    499e:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    49a0:	4b2e      	ldr	r3, [pc, #184]	; (4a5c <setMode+0x140>)
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b2db      	uxtb	r3, r3
    49a6:	2b00      	cmp	r3, #0
    49a8:	d035      	beq.n	4a16 <setMode+0xfa>
    49aa:	2000      	movs	r0, #0
    49ac:	4b2c      	ldr	r3, [pc, #176]	; (4a60 <setMode+0x144>)
    49ae:	4798      	blx	r3
      break;
    49b0:	e031      	b.n	4a16 <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    49b2:	2001      	movs	r0, #1
    49b4:	4b27      	ldr	r3, [pc, #156]	; (4a54 <setMode+0x138>)
    49b6:	4798      	blx	r3
    49b8:	0003      	movs	r3, r0
    49ba:	b25b      	sxtb	r3, r3
    49bc:	221c      	movs	r2, #28
    49be:	4393      	bics	r3, r2
    49c0:	b25b      	sxtb	r3, r3
    49c2:	2208      	movs	r2, #8
    49c4:	4313      	orrs	r3, r2
    49c6:	b25b      	sxtb	r3, r3
    49c8:	b2db      	uxtb	r3, r3
    49ca:	0019      	movs	r1, r3
    49cc:	2001      	movs	r0, #1
    49ce:	4b22      	ldr	r3, [pc, #136]	; (4a58 <setMode+0x13c>)
    49d0:	4798      	blx	r3
      break;
    49d2:	e021      	b.n	4a18 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    49d4:	2001      	movs	r0, #1
    49d6:	4b1f      	ldr	r3, [pc, #124]	; (4a54 <setMode+0x138>)
    49d8:	4798      	blx	r3
    49da:	0003      	movs	r3, r0
    49dc:	b25b      	sxtb	r3, r3
    49de:	221c      	movs	r2, #28
    49e0:	4393      	bics	r3, r2
    49e2:	b25b      	sxtb	r3, r3
    49e4:	2204      	movs	r2, #4
    49e6:	4313      	orrs	r3, r2
    49e8:	b25b      	sxtb	r3, r3
    49ea:	b2db      	uxtb	r3, r3
    49ec:	0019      	movs	r1, r3
    49ee:	2001      	movs	r0, #1
    49f0:	4b19      	ldr	r3, [pc, #100]	; (4a58 <setMode+0x13c>)
    49f2:	4798      	blx	r3
      break;
    49f4:	e010      	b.n	4a18 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    49f6:	2001      	movs	r0, #1
    49f8:	4b16      	ldr	r3, [pc, #88]	; (4a54 <setMode+0x138>)
    49fa:	4798      	blx	r3
    49fc:	0003      	movs	r3, r0
    49fe:	001a      	movs	r2, r3
    4a00:	231c      	movs	r3, #28
    4a02:	439a      	bics	r2, r3
    4a04:	0013      	movs	r3, r2
    4a06:	b2db      	uxtb	r3, r3
    4a08:	0019      	movs	r1, r3
    4a0a:	2001      	movs	r0, #1
    4a0c:	4b12      	ldr	r3, [pc, #72]	; (4a58 <setMode+0x13c>)
    4a0e:	4798      	blx	r3
      break;
    4a10:	e002      	b.n	4a18 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	e000      	b.n	4a18 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    4a16:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    4a18:	46c0      	nop			; (mov r8, r8)
    4a1a:	4b0c      	ldr	r3, [pc, #48]	; (4a4c <setMode+0x130>)
    4a1c:	881b      	ldrh	r3, [r3, #0]
    4a1e:	b29b      	uxth	r3, r3
    4a20:	2b00      	cmp	r3, #0
    4a22:	d106      	bne.n	4a32 <setMode+0x116>
    4a24:	2027      	movs	r0, #39	; 0x27
    4a26:	4b0b      	ldr	r3, [pc, #44]	; (4a54 <setMode+0x138>)
    4a28:	4798      	blx	r3
    4a2a:	0003      	movs	r3, r0
    4a2c:	b25b      	sxtb	r3, r3
    4a2e:	2b00      	cmp	r3, #0
    4a30:	daf3      	bge.n	4a1a <setMode+0xfe>

  _mode = newMode;
    4a32:	1dfb      	adds	r3, r7, #7
    4a34:	781b      	ldrb	r3, [r3, #0]
    4a36:	b29a      	uxth	r2, r3
    4a38:	4b04      	ldr	r3, [pc, #16]	; (4a4c <setMode+0x130>)
    4a3a:	801a      	strh	r2, [r3, #0]
    4a3c:	e002      	b.n	4a44 <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	e000      	b.n	4a44 <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    4a42:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    4a44:	46bd      	mov	sp, r7
    4a46:	b002      	add	sp, #8
    4a48:	bd80      	pop	{r7, pc}
    4a4a:	46c0      	nop			; (mov r8, r8)
    4a4c:	2000020e 	.word	0x2000020e
    4a50:	000057b4 	.word	0x000057b4
    4a54:	00004f09 	.word	0x00004f09
    4a58:	00004f71 	.word	0x00004f71
    4a5c:	20000210 	.word	0x20000210
    4a60:	00005029 	.word	0x00005029

00004a64 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    4a64:	b580      	push	{r7, lr}
    4a66:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    4a68:	4b0b      	ldr	r3, [pc, #44]	; (4a98 <canSend+0x34>)
    4a6a:	881b      	ldrh	r3, [r3, #0]
    4a6c:	b29b      	uxth	r3, r3
    4a6e:	2b03      	cmp	r3, #3
    4a70:	d10e      	bne.n	4a90 <canSend+0x2c>
    4a72:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <canSend+0x38>)
    4a74:	881b      	ldrh	r3, [r3, #0]
    4a76:	b29b      	uxth	r3, r3
    4a78:	2b00      	cmp	r3, #0
    4a7a:	d109      	bne.n	4a90 <canSend+0x2c>
    4a7c:	4b08      	ldr	r3, [pc, #32]	; (4aa0 <canSend+0x3c>)
    4a7e:	4798      	blx	r3
    4a80:	0003      	movs	r3, r0
    4a82:	335a      	adds	r3, #90	; 0x5a
    4a84:	da04      	bge.n	4a90 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    4a86:	2001      	movs	r0, #1
    4a88:	4b06      	ldr	r3, [pc, #24]	; (4aa4 <canSend+0x40>)
    4a8a:	4798      	blx	r3
    return true;
    4a8c:	2301      	movs	r3, #1
    4a8e:	e000      	b.n	4a92 <canSend+0x2e>
  }
  return false;
    4a90:	2300      	movs	r3, #0
}
    4a92:	0018      	movs	r0, r3
    4a94:	46bd      	mov	sp, r7
    4a96:	bd80      	pop	{r7, pc}
    4a98:	2000020e 	.word	0x2000020e
    4a9c:	200001dc 	.word	0x200001dc
    4aa0:	00004ec9 	.word	0x00004ec9
    4aa4:	0000491d 	.word	0x0000491d

00004aa8 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    4aa8:	b590      	push	{r4, r7, lr}
    4aaa:	b085      	sub	sp, #20
    4aac:	af02      	add	r7, sp, #8
    4aae:	0004      	movs	r4, r0
    4ab0:	6039      	str	r1, [r7, #0]
    4ab2:	0010      	movs	r0, r2
    4ab4:	0019      	movs	r1, r3
    4ab6:	1dfb      	adds	r3, r7, #7
    4ab8:	1c22      	adds	r2, r4, #0
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	1dbb      	adds	r3, r7, #6
    4abe:	1c02      	adds	r2, r0, #0
    4ac0:	701a      	strb	r2, [r3, #0]
    4ac2:	1d7b      	adds	r3, r7, #5
    4ac4:	1c0a      	adds	r2, r1, #0
    4ac6:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4ac8:	203d      	movs	r0, #61	; 0x3d
    4aca:	4b17      	ldr	r3, [pc, #92]	; (4b28 <RFM_send+0x80>)
    4acc:	4798      	blx	r3
    4ace:	0003      	movs	r3, r0
    4ad0:	001a      	movs	r2, r3
    4ad2:	2304      	movs	r3, #4
    4ad4:	4313      	orrs	r3, r2
    4ad6:	b2db      	uxtb	r3, r3
    4ad8:	0019      	movs	r1, r3
    4ada:	203d      	movs	r0, #61	; 0x3d
    4adc:	4b13      	ldr	r3, [pc, #76]	; (4b2c <RFM_send+0x84>)
    4ade:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    4ae0:	4b13      	ldr	r3, [pc, #76]	; (4b30 <RFM_send+0x88>)
    4ae2:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    4ae4:	e001      	b.n	4aea <RFM_send+0x42>
    4ae6:	4b13      	ldr	r3, [pc, #76]	; (4b34 <RFM_send+0x8c>)
    4ae8:	4798      	blx	r3
    4aea:	4b13      	ldr	r3, [pc, #76]	; (4b38 <RFM_send+0x90>)
    4aec:	4798      	blx	r3
    4aee:	0003      	movs	r3, r0
    4af0:	001a      	movs	r2, r3
    4af2:	2301      	movs	r3, #1
    4af4:	4053      	eors	r3, r2
    4af6:	b2db      	uxtb	r3, r3
    4af8:	2b00      	cmp	r3, #0
    4afa:	d005      	beq.n	4b08 <RFM_send+0x60>
    4afc:	4b0f      	ldr	r3, [pc, #60]	; (4b3c <RFM_send+0x94>)
    4afe:	4798      	blx	r3
    4b00:	1e02      	subs	r2, r0, #0
    4b02:	4b0f      	ldr	r3, [pc, #60]	; (4b40 <RFM_send+0x98>)
    4b04:	429a      	cmp	r2, r3
    4b06:	d9ee      	bls.n	4ae6 <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    4b08:	1d7b      	adds	r3, r7, #5
    4b0a:	781c      	ldrb	r4, [r3, #0]
    4b0c:	1dbb      	adds	r3, r7, #6
    4b0e:	781a      	ldrb	r2, [r3, #0]
    4b10:	6839      	ldr	r1, [r7, #0]
    4b12:	1dfb      	adds	r3, r7, #7
    4b14:	7818      	ldrb	r0, [r3, #0]
    4b16:	2300      	movs	r3, #0
    4b18:	9300      	str	r3, [sp, #0]
    4b1a:	0023      	movs	r3, r4
    4b1c:	4c09      	ldr	r4, [pc, #36]	; (4b44 <RFM_send+0x9c>)
    4b1e:	47a0      	blx	r4
}
    4b20:	46c0      	nop			; (mov r8, r8)
    4b22:	46bd      	mov	sp, r7
    4b24:	b003      	add	sp, #12
    4b26:	bd90      	pop	{r4, r7, pc}
    4b28:	00004f09 	.word	0x00004f09
    4b2c:	00004f71 	.word	0x00004f71
    4b30:	0000432d 	.word	0x0000432d
    4b34:	00004db9 	.word	0x00004db9
    4b38:	00004a65 	.word	0x00004a65
    4b3c:	00004355 	.word	0x00004355
    4b40:	000003e7 	.word	0x000003e7
    4b44:	0000437d 	.word	0x0000437d

00004b48 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    4b48:	b580      	push	{r7, lr}
    4b4a:	b082      	sub	sp, #8
    4b4c:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    4b4e:	4b58      	ldr	r3, [pc, #352]	; (4cb0 <interruptHandler+0x168>)
    4b50:	881b      	ldrh	r3, [r3, #0]
    4b52:	b29b      	uxth	r3, r3
    4b54:	2b03      	cmp	r3, #3
    4b56:	d000      	beq.n	4b5a <interruptHandler+0x12>
    4b58:	e0a1      	b.n	4c9e <interruptHandler+0x156>
    4b5a:	2028      	movs	r0, #40	; 0x28
    4b5c:	4b55      	ldr	r3, [pc, #340]	; (4cb4 <interruptHandler+0x16c>)
    4b5e:	4798      	blx	r3
    4b60:	0003      	movs	r3, r0
    4b62:	001a      	movs	r2, r3
    4b64:	2304      	movs	r3, #4
    4b66:	4013      	ands	r3, r2
    4b68:	d100      	bne.n	4b6c <interruptHandler+0x24>
    4b6a:	e098      	b.n	4c9e <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    4b6c:	2001      	movs	r0, #1
    4b6e:	4b52      	ldr	r3, [pc, #328]	; (4cb8 <interruptHandler+0x170>)
    4b70:	4798      	blx	r3
    radioselect();
    4b72:	4b52      	ldr	r3, [pc, #328]	; (4cbc <interruptHandler+0x174>)
    4b74:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    4b76:	4a52      	ldr	r2, [pc, #328]	; (4cc0 <interruptHandler+0x178>)
    4b78:	4b52      	ldr	r3, [pc, #328]	; (4cc4 <interruptHandler+0x17c>)
    4b7a:	2100      	movs	r1, #0
    4b7c:	0018      	movs	r0, r3
    4b7e:	4b52      	ldr	r3, [pc, #328]	; (4cc8 <interruptHandler+0x180>)
    4b80:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    4b82:	4a52      	ldr	r2, [pc, #328]	; (4ccc <interruptHandler+0x184>)
    4b84:	4b4f      	ldr	r3, [pc, #316]	; (4cc4 <interruptHandler+0x17c>)
    4b86:	2100      	movs	r1, #0
    4b88:	0018      	movs	r0, r3
    4b8a:	4b4f      	ldr	r3, [pc, #316]	; (4cc8 <interruptHandler+0x180>)
    4b8c:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    4b8e:	4b4f      	ldr	r3, [pc, #316]	; (4ccc <interruptHandler+0x184>)
    4b90:	881b      	ldrh	r3, [r3, #0]
    4b92:	b29b      	uxth	r3, r3
    4b94:	2b42      	cmp	r3, #66	; 0x42
    4b96:	d803      	bhi.n	4ba0 <interruptHandler+0x58>
    4b98:	4b4c      	ldr	r3, [pc, #304]	; (4ccc <interruptHandler+0x184>)
    4b9a:	881b      	ldrh	r3, [r3, #0]
    4b9c:	b29a      	uxth	r2, r3
    4b9e:	e000      	b.n	4ba2 <interruptHandler+0x5a>
    4ba0:	2242      	movs	r2, #66	; 0x42
    4ba2:	4b4a      	ldr	r3, [pc, #296]	; (4ccc <interruptHandler+0x184>)
    4ba4:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    4ba6:	4a4a      	ldr	r2, [pc, #296]	; (4cd0 <interruptHandler+0x188>)
    4ba8:	4b46      	ldr	r3, [pc, #280]	; (4cc4 <interruptHandler+0x17c>)
    4baa:	2100      	movs	r1, #0
    4bac:	0018      	movs	r0, r3
    4bae:	4b46      	ldr	r3, [pc, #280]	; (4cc8 <interruptHandler+0x180>)
    4bb0:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    4bb2:	4b48      	ldr	r3, [pc, #288]	; (4cd4 <interruptHandler+0x18c>)
    4bb4:	781b      	ldrb	r3, [r3, #0]
    4bb6:	b2db      	uxtb	r3, r3
    4bb8:	2201      	movs	r2, #1
    4bba:	4053      	eors	r3, r2
    4bbc:	b2db      	uxtb	r3, r3
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d00d      	beq.n	4bde <interruptHandler+0x96>
    4bc2:	4b45      	ldr	r3, [pc, #276]	; (4cd8 <interruptHandler+0x190>)
    4bc4:	781b      	ldrb	r3, [r3, #0]
    4bc6:	b2db      	uxtb	r3, r3
    4bc8:	b29a      	uxth	r2, r3
    4bca:	4b41      	ldr	r3, [pc, #260]	; (4cd0 <interruptHandler+0x188>)
    4bcc:	881b      	ldrh	r3, [r3, #0]
    4bce:	b29b      	uxth	r3, r3
    4bd0:	429a      	cmp	r2, r3
    4bd2:	d004      	beq.n	4bde <interruptHandler+0x96>
    4bd4:	4b3e      	ldr	r3, [pc, #248]	; (4cd0 <interruptHandler+0x188>)
    4bd6:	881b      	ldrh	r3, [r3, #0]
    4bd8:	b29b      	uxth	r3, r3
    4bda:	2bff      	cmp	r3, #255	; 0xff
    4bdc:	d104      	bne.n	4be8 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    4bde:	4b3b      	ldr	r3, [pc, #236]	; (4ccc <interruptHandler+0x184>)
    4be0:	881b      	ldrh	r3, [r3, #0]
    4be2:	b29b      	uxth	r3, r3
    4be4:	2b02      	cmp	r3, #2
    4be6:	d807      	bhi.n	4bf8 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    4be8:	4b38      	ldr	r3, [pc, #224]	; (4ccc <interruptHandler+0x184>)
    4bea:	2200      	movs	r2, #0
    4bec:	801a      	strh	r2, [r3, #0]
      unselect();
    4bee:	4b3b      	ldr	r3, [pc, #236]	; (4cdc <interruptHandler+0x194>)
    4bf0:	4798      	blx	r3
      receiveBegin();
    4bf2:	4b3b      	ldr	r3, [pc, #236]	; (4ce0 <interruptHandler+0x198>)
    4bf4:	4798      	blx	r3
    4bf6:	e058      	b.n	4caa <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    4bf8:	4b34      	ldr	r3, [pc, #208]	; (4ccc <interruptHandler+0x184>)
    4bfa:	881b      	ldrh	r3, [r3, #0]
    4bfc:	b29b      	uxth	r3, r3
    4bfe:	3b03      	subs	r3, #3
    4c00:	b29a      	uxth	r2, r3
    4c02:	4b38      	ldr	r3, [pc, #224]	; (4ce4 <interruptHandler+0x19c>)
    4c04:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    4c06:	4a38      	ldr	r2, [pc, #224]	; (4ce8 <interruptHandler+0x1a0>)
    4c08:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <interruptHandler+0x17c>)
    4c0a:	2100      	movs	r1, #0
    4c0c:	0018      	movs	r0, r3
    4c0e:	4b2e      	ldr	r3, [pc, #184]	; (4cc8 <interruptHandler+0x180>)
    4c10:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    4c12:	1dbb      	adds	r3, r7, #6
    4c14:	2200      	movs	r2, #0
    4c16:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    4c18:	1dba      	adds	r2, r7, #6
    4c1a:	4b2a      	ldr	r3, [pc, #168]	; (4cc4 <interruptHandler+0x17c>)
    4c1c:	2100      	movs	r1, #0
    4c1e:	0018      	movs	r0, r3
    4c20:	4b29      	ldr	r3, [pc, #164]	; (4cc8 <interruptHandler+0x180>)
    4c22:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    4c24:	1dbb      	adds	r3, r7, #6
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	b29b      	uxth	r3, r3
    4c2a:	2280      	movs	r2, #128	; 0x80
    4c2c:	4013      	ands	r3, r2
    4c2e:	b29a      	uxth	r2, r3
    4c30:	4b2e      	ldr	r3, [pc, #184]	; (4cec <interruptHandler+0x1a4>)
    4c32:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    4c34:	1dbb      	adds	r3, r7, #6
    4c36:	781b      	ldrb	r3, [r3, #0]
    4c38:	b29b      	uxth	r3, r3
    4c3a:	2240      	movs	r2, #64	; 0x40
    4c3c:	4013      	ands	r3, r2
    4c3e:	b29a      	uxth	r2, r3
    4c40:	4b2b      	ldr	r3, [pc, #172]	; (4cf0 <interruptHandler+0x1a8>)
    4c42:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    4c44:	1dfb      	adds	r3, r7, #7
    4c46:	2200      	movs	r2, #0
    4c48:	701a      	strb	r2, [r3, #0]
    4c4a:	e00e      	b.n	4c6a <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    4c4c:	1dfb      	adds	r3, r7, #7
    4c4e:	781b      	ldrb	r3, [r3, #0]
    4c50:	005a      	lsls	r2, r3, #1
    4c52:	4b28      	ldr	r3, [pc, #160]	; (4cf4 <interruptHandler+0x1ac>)
    4c54:	18d2      	adds	r2, r2, r3
    4c56:	4b1b      	ldr	r3, [pc, #108]	; (4cc4 <interruptHandler+0x17c>)
    4c58:	2100      	movs	r1, #0
    4c5a:	0018      	movs	r0, r3
    4c5c:	4b1a      	ldr	r3, [pc, #104]	; (4cc8 <interruptHandler+0x180>)
    4c5e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    4c60:	1dfb      	adds	r3, r7, #7
    4c62:	781a      	ldrb	r2, [r3, #0]
    4c64:	1dfb      	adds	r3, r7, #7
    4c66:	3201      	adds	r2, #1
    4c68:	701a      	strb	r2, [r3, #0]
    4c6a:	1dfb      	adds	r3, r7, #7
    4c6c:	781b      	ldrb	r3, [r3, #0]
    4c6e:	b29a      	uxth	r2, r3
    4c70:	4b1c      	ldr	r3, [pc, #112]	; (4ce4 <interruptHandler+0x19c>)
    4c72:	881b      	ldrh	r3, [r3, #0]
    4c74:	b29b      	uxth	r3, r3
    4c76:	429a      	cmp	r2, r3
    4c78:	d3e8      	bcc.n	4c4c <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    4c7a:	4b1a      	ldr	r3, [pc, #104]	; (4ce4 <interruptHandler+0x19c>)
    4c7c:	881b      	ldrh	r3, [r3, #0]
    4c7e:	b29b      	uxth	r3, r3
    4c80:	2b3c      	cmp	r3, #60	; 0x3c
    4c82:	d807      	bhi.n	4c94 <interruptHandler+0x14c>
    4c84:	4b17      	ldr	r3, [pc, #92]	; (4ce4 <interruptHandler+0x19c>)
    4c86:	881b      	ldrh	r3, [r3, #0]
    4c88:	b29b      	uxth	r3, r3
    4c8a:	001a      	movs	r2, r3
    4c8c:	4b19      	ldr	r3, [pc, #100]	; (4cf4 <interruptHandler+0x1ac>)
    4c8e:	0052      	lsls	r2, r2, #1
    4c90:	2100      	movs	r1, #0
    4c92:	52d1      	strh	r1, [r2, r3]
    unselect();
    4c94:	4b11      	ldr	r3, [pc, #68]	; (4cdc <interruptHandler+0x194>)
    4c96:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    4c98:	2003      	movs	r0, #3
    4c9a:	4b07      	ldr	r3, [pc, #28]	; (4cb8 <interruptHandler+0x170>)
    4c9c:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    4c9e:	4b16      	ldr	r3, [pc, #88]	; (4cf8 <interruptHandler+0x1b0>)
    4ca0:	4798      	blx	r3
    4ca2:	0003      	movs	r3, r0
    4ca4:	001a      	movs	r2, r3
    4ca6:	4b15      	ldr	r3, [pc, #84]	; (4cfc <interruptHandler+0x1b4>)
    4ca8:	801a      	strh	r2, [r3, #0]
}
    4caa:	46bd      	mov	sp, r7
    4cac:	b002      	add	sp, #8
    4cae:	bd80      	pop	{r7, pc}
    4cb0:	2000020e 	.word	0x2000020e
    4cb4:	00004f09 	.word	0x00004f09
    4cb8:	0000491d 	.word	0x0000491d
    4cbc:	00004fd1 	.word	0x00004fd1
    4cc0:	20000060 	.word	0x20000060
    4cc4:	20000214 	.word	0x20000214
    4cc8:	000023d9 	.word	0x000023d9
    4ccc:	200001dc 	.word	0x200001dc
    4cd0:	2000020c 	.word	0x2000020c
    4cd4:	2000015c 	.word	0x2000015c
    4cd8:	20000154 	.word	0x20000154
    4cdc:	00004ffd 	.word	0x00004ffd
    4ce0:	00004d25 	.word	0x00004d25
    4ce4:	2000015a 	.word	0x2000015a
    4ce8:	200000f6 	.word	0x200000f6
    4cec:	20000158 	.word	0x20000158
    4cf0:	2000020a 	.word	0x2000020a
    4cf4:	20000160 	.word	0x20000160
    4cf8:	00004ec9 	.word	0x00004ec9
    4cfc:	20000250 	.word	0x20000250

00004d00 <isr0>:

// internal function
void isr0()
{ 
    4d00:	b580      	push	{r7, lr}
    4d02:	af00      	add	r7, sp, #0
	_inISR = true; 
    4d04:	4b05      	ldr	r3, [pc, #20]	; (4d1c <isr0+0x1c>)
    4d06:	2201      	movs	r2, #1
    4d08:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    4d0a:	4b05      	ldr	r3, [pc, #20]	; (4d20 <isr0+0x20>)
    4d0c:	4798      	blx	r3
	_inISR = false;
    4d0e:	4b03      	ldr	r3, [pc, #12]	; (4d1c <isr0+0x1c>)
    4d10:	2200      	movs	r2, #0
    4d12:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    4d14:	46c0      	nop			; (mov r8, r8)
    4d16:	46bd      	mov	sp, r7
    4d18:	bd80      	pop	{r7, pc}
    4d1a:	46c0      	nop			; (mov r8, r8)
    4d1c:	20000111 	.word	0x20000111
    4d20:	00004b49 	.word	0x00004b49

00004d24 <receiveBegin>:

// internal function
void receiveBegin() {
    4d24:	b580      	push	{r7, lr}
    4d26:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    4d28:	4b19      	ldr	r3, [pc, #100]	; (4d90 <receiveBegin+0x6c>)
    4d2a:	2200      	movs	r2, #0
    4d2c:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    4d2e:	4b19      	ldr	r3, [pc, #100]	; (4d94 <receiveBegin+0x70>)
    4d30:	2200      	movs	r2, #0
    4d32:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    4d34:	4b18      	ldr	r3, [pc, #96]	; (4d98 <receiveBegin+0x74>)
    4d36:	2200      	movs	r2, #0
    4d38:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    4d3a:	4b18      	ldr	r3, [pc, #96]	; (4d9c <receiveBegin+0x78>)
    4d3c:	2200      	movs	r2, #0
    4d3e:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    4d40:	4b17      	ldr	r3, [pc, #92]	; (4da0 <receiveBegin+0x7c>)
    4d42:	2200      	movs	r2, #0
    4d44:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    4d46:	4b17      	ldr	r3, [pc, #92]	; (4da4 <receiveBegin+0x80>)
    4d48:	2200      	movs	r2, #0
    4d4a:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    4d4c:	4b16      	ldr	r3, [pc, #88]	; (4da8 <receiveBegin+0x84>)
    4d4e:	2200      	movs	r2, #0
    4d50:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    4d52:	2028      	movs	r0, #40	; 0x28
    4d54:	4b15      	ldr	r3, [pc, #84]	; (4dac <receiveBegin+0x88>)
    4d56:	4798      	blx	r3
    4d58:	0003      	movs	r3, r0
    4d5a:	001a      	movs	r2, r3
    4d5c:	2304      	movs	r3, #4
    4d5e:	4013      	ands	r3, r2
    4d60:	d00b      	beq.n	4d7a <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4d62:	203d      	movs	r0, #61	; 0x3d
    4d64:	4b11      	ldr	r3, [pc, #68]	; (4dac <receiveBegin+0x88>)
    4d66:	4798      	blx	r3
    4d68:	0003      	movs	r3, r0
    4d6a:	001a      	movs	r2, r3
    4d6c:	2304      	movs	r3, #4
    4d6e:	4313      	orrs	r3, r2
    4d70:	b2db      	uxtb	r3, r3
    4d72:	0019      	movs	r1, r3
    4d74:	203d      	movs	r0, #61	; 0x3d
    4d76:	4b0e      	ldr	r3, [pc, #56]	; (4db0 <receiveBegin+0x8c>)
    4d78:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    4d7a:	2140      	movs	r1, #64	; 0x40
    4d7c:	2025      	movs	r0, #37	; 0x25
    4d7e:	4b0c      	ldr	r3, [pc, #48]	; (4db0 <receiveBegin+0x8c>)
    4d80:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    4d82:	2003      	movs	r0, #3
    4d84:	4b0b      	ldr	r3, [pc, #44]	; (4db4 <receiveBegin+0x90>)
    4d86:	4798      	blx	r3
}
    4d88:	46c0      	nop			; (mov r8, r8)
    4d8a:	46bd      	mov	sp, r7
    4d8c:	bd80      	pop	{r7, pc}
    4d8e:	46c0      	nop			; (mov r8, r8)
    4d90:	2000015a 	.word	0x2000015a
    4d94:	200000f6 	.word	0x200000f6
    4d98:	2000020c 	.word	0x2000020c
    4d9c:	200001dc 	.word	0x200001dc
    4da0:	2000020a 	.word	0x2000020a
    4da4:	20000158 	.word	0x20000158
    4da8:	20000250 	.word	0x20000250
    4dac:	00004f09 	.word	0x00004f09
    4db0:	00004f71 	.word	0x00004f71
    4db4:	0000491d 	.word	0x0000491d

00004db8 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    4db8:	b580      	push	{r7, lr}
    4dba:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    4dbc:	4b0f      	ldr	r3, [pc, #60]	; (4dfc <RFM_receiveDone+0x44>)
    4dbe:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    4dc0:	4b0f      	ldr	r3, [pc, #60]	; (4e00 <RFM_receiveDone+0x48>)
    4dc2:	881b      	ldrh	r3, [r3, #0]
    4dc4:	b29b      	uxth	r3, r3
    4dc6:	2b03      	cmp	r3, #3
    4dc8:	d109      	bne.n	4dde <RFM_receiveDone+0x26>
    4dca:	4b0e      	ldr	r3, [pc, #56]	; (4e04 <RFM_receiveDone+0x4c>)
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	b29b      	uxth	r3, r3
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d004      	beq.n	4dde <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    4dd4:	2001      	movs	r0, #1
    4dd6:	4b0c      	ldr	r3, [pc, #48]	; (4e08 <RFM_receiveDone+0x50>)
    4dd8:	4798      	blx	r3
    return true;
    4dda:	2301      	movs	r3, #1
    4ddc:	e00b      	b.n	4df6 <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    4dde:	4b08      	ldr	r3, [pc, #32]	; (4e00 <RFM_receiveDone+0x48>)
    4de0:	881b      	ldrh	r3, [r3, #0]
    4de2:	b29b      	uxth	r3, r3
    4de4:	2b03      	cmp	r3, #3
    4de6:	d103      	bne.n	4df0 <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    4de8:	4b08      	ldr	r3, [pc, #32]	; (4e0c <RFM_receiveDone+0x54>)
    4dea:	4798      	blx	r3
    return false;
    4dec:	2300      	movs	r3, #0
    4dee:	e002      	b.n	4df6 <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    4df0:	4b07      	ldr	r3, [pc, #28]	; (4e10 <RFM_receiveDone+0x58>)
    4df2:	4798      	blx	r3
  return false;
    4df4:	2300      	movs	r3, #0
}
    4df6:	0018      	movs	r0, r3
    4df8:	46bd      	mov	sp, r7
    4dfa:	bd80      	pop	{r7, pc}
    4dfc:	00003f1d 	.word	0x00003f1d
    4e00:	2000020e 	.word	0x2000020e
    4e04:	200001dc 	.word	0x200001dc
    4e08:	0000491d 	.word	0x0000491d
    4e0c:	00003f01 	.word	0x00003f01
    4e10:	00004d25 	.word	0x00004d25

00004e14 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    4e14:	b580      	push	{r7, lr}
    4e16:	b084      	sub	sp, #16
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    4e1c:	2001      	movs	r0, #1
    4e1e:	4b22      	ldr	r3, [pc, #136]	; (4ea8 <RFM_encrypt+0x94>)
    4e20:	4798      	blx	r3
  if (key != 0)
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d026      	beq.n	4e76 <RFM_encrypt+0x62>
  {
    radioselect();
    4e28:	4b20      	ldr	r3, [pc, #128]	; (4eac <RFM_encrypt+0x98>)
    4e2a:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    4e2c:	4a20      	ldr	r2, [pc, #128]	; (4eb0 <RFM_encrypt+0x9c>)
    4e2e:	4b21      	ldr	r3, [pc, #132]	; (4eb4 <RFM_encrypt+0xa0>)
    4e30:	21be      	movs	r1, #190	; 0xbe
    4e32:	0018      	movs	r0, r3
    4e34:	4b20      	ldr	r3, [pc, #128]	; (4eb8 <RFM_encrypt+0xa4>)
    4e36:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    4e38:	230f      	movs	r3, #15
    4e3a:	18fb      	adds	r3, r7, r3
    4e3c:	2200      	movs	r2, #0
    4e3e:	701a      	strb	r2, [r3, #0]
    4e40:	e012      	b.n	4e68 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    4e42:	230f      	movs	r3, #15
    4e44:	18fb      	adds	r3, r7, r3
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	687a      	ldr	r2, [r7, #4]
    4e4a:	18d3      	adds	r3, r2, r3
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	b299      	uxth	r1, r3
    4e50:	4a17      	ldr	r2, [pc, #92]	; (4eb0 <RFM_encrypt+0x9c>)
    4e52:	4b18      	ldr	r3, [pc, #96]	; (4eb4 <RFM_encrypt+0xa0>)
    4e54:	0018      	movs	r0, r3
    4e56:	4b18      	ldr	r3, [pc, #96]	; (4eb8 <RFM_encrypt+0xa4>)
    4e58:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    radioselect();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    4e5a:	230f      	movs	r3, #15
    4e5c:	18fb      	adds	r3, r7, r3
    4e5e:	781a      	ldrb	r2, [r3, #0]
    4e60:	230f      	movs	r3, #15
    4e62:	18fb      	adds	r3, r7, r3
    4e64:	3201      	adds	r2, #1
    4e66:	701a      	strb	r2, [r3, #0]
    4e68:	230f      	movs	r3, #15
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	781b      	ldrb	r3, [r3, #0]
    4e6e:	2b0f      	cmp	r3, #15
    4e70:	d9e7      	bls.n	4e42 <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    4e72:	4b12      	ldr	r3, [pc, #72]	; (4ebc <RFM_encrypt+0xa8>)
    4e74:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    4e76:	203d      	movs	r0, #61	; 0x3d
    4e78:	4b11      	ldr	r3, [pc, #68]	; (4ec0 <RFM_encrypt+0xac>)
    4e7a:	4798      	blx	r3
    4e7c:	0003      	movs	r3, r0
    4e7e:	b25b      	sxtb	r3, r3
    4e80:	2201      	movs	r2, #1
    4e82:	4393      	bics	r3, r2
    4e84:	b25a      	sxtb	r2, r3
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	1e59      	subs	r1, r3, #1
    4e8a:	418b      	sbcs	r3, r1
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	b25b      	sxtb	r3, r3
    4e90:	4313      	orrs	r3, r2
    4e92:	b25b      	sxtb	r3, r3
    4e94:	b2db      	uxtb	r3, r3
    4e96:	0019      	movs	r1, r3
    4e98:	203d      	movs	r0, #61	; 0x3d
    4e9a:	4b0a      	ldr	r3, [pc, #40]	; (4ec4 <RFM_encrypt+0xb0>)
    4e9c:	4798      	blx	r3
}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	46bd      	mov	sp, r7
    4ea2:	b004      	add	sp, #16
    4ea4:	bd80      	pop	{r7, pc}
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	0000491d 	.word	0x0000491d
    4eac:	00004fd1 	.word	0x00004fd1
    4eb0:	20000060 	.word	0x20000060
    4eb4:	20000214 	.word	0x20000214
    4eb8:	000023d9 	.word	0x000023d9
    4ebc:	00004ffd 	.word	0x00004ffd
    4ec0:	00004f09 	.word	0x00004f09
    4ec4:	00004f71 	.word	0x00004f71

00004ec8 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    4ec8:	b580      	push	{r7, lr}
    4eca:	b082      	sub	sp, #8
    4ecc:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    4ece:	1dbb      	adds	r3, r7, #6
    4ed0:	2200      	movs	r2, #0
    4ed2:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    4ed4:	2024      	movs	r0, #36	; 0x24
    4ed6:	4b0b      	ldr	r3, [pc, #44]	; (4f04 <readRSSI+0x3c>)
    4ed8:	4798      	blx	r3
    4eda:	0003      	movs	r3, r0
    4edc:	b29b      	uxth	r3, r3
    4ede:	425b      	negs	r3, r3
    4ee0:	b29b      	uxth	r3, r3
    4ee2:	b21a      	sxth	r2, r3
    4ee4:	1dbb      	adds	r3, r7, #6
    4ee6:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    4ee8:	1dbb      	adds	r3, r7, #6
    4eea:	881b      	ldrh	r3, [r3, #0]
    4eec:	b21b      	sxth	r3, r3
    4eee:	105b      	asrs	r3, r3, #1
    4ef0:	b21a      	sxth	r2, r3
    4ef2:	1dbb      	adds	r3, r7, #6
    4ef4:	801a      	strh	r2, [r3, #0]
  return rssi;
    4ef6:	1dbb      	adds	r3, r7, #6
    4ef8:	881b      	ldrh	r3, [r3, #0]
    4efa:	b21b      	sxth	r3, r3
}
    4efc:	0018      	movs	r0, r3
    4efe:	46bd      	mov	sp, r7
    4f00:	b002      	add	sp, #8
    4f02:	bd80      	pop	{r7, pc}
    4f04:	00004f09 	.word	0x00004f09

00004f08 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b084      	sub	sp, #16
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	0002      	movs	r2, r0
    4f10:	1dbb      	adds	r3, r7, #6
    4f12:	801a      	strh	r2, [r3, #0]
  radioselect();
    4f14:	4b11      	ldr	r3, [pc, #68]	; (4f5c <readReg+0x54>)
    4f16:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    4f18:	1dbb      	adds	r3, r7, #6
    4f1a:	881b      	ldrh	r3, [r3, #0]
    4f1c:	b29b      	uxth	r3, r3
    4f1e:	227f      	movs	r2, #127	; 0x7f
    4f20:	4013      	ands	r3, r2
    4f22:	b299      	uxth	r1, r3
    4f24:	4a0e      	ldr	r2, [pc, #56]	; (4f60 <readReg+0x58>)
    4f26:	4b0f      	ldr	r3, [pc, #60]	; (4f64 <readReg+0x5c>)
    4f28:	0018      	movs	r0, r3
    4f2a:	4b0f      	ldr	r3, [pc, #60]	; (4f68 <readReg+0x60>)
    4f2c:	4798      	blx	r3
  volatile uint16_t regval = 0;
    4f2e:	230e      	movs	r3, #14
    4f30:	18fb      	adds	r3, r7, r3
    4f32:	2200      	movs	r2, #0
    4f34:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    4f36:	230e      	movs	r3, #14
    4f38:	18fa      	adds	r2, r7, r3
    4f3a:	4b0a      	ldr	r3, [pc, #40]	; (4f64 <readReg+0x5c>)
    4f3c:	2100      	movs	r1, #0
    4f3e:	0018      	movs	r0, r3
    4f40:	4b09      	ldr	r3, [pc, #36]	; (4f68 <readReg+0x60>)
    4f42:	4798      	blx	r3
  unselect();
    4f44:	4b09      	ldr	r3, [pc, #36]	; (4f6c <readReg+0x64>)
    4f46:	4798      	blx	r3
  return (uint8_t)regval;
    4f48:	230e      	movs	r3, #14
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	881b      	ldrh	r3, [r3, #0]
    4f4e:	b29b      	uxth	r3, r3
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	0018      	movs	r0, r3
    4f54:	46bd      	mov	sp, r7
    4f56:	b004      	add	sp, #16
    4f58:	bd80      	pop	{r7, pc}
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	00004fd1 	.word	0x00004fd1
    4f60:	20000060 	.word	0x20000060
    4f64:	20000214 	.word	0x20000214
    4f68:	000023d9 	.word	0x000023d9
    4f6c:	00004ffd 	.word	0x00004ffd

00004f70 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    4f70:	b580      	push	{r7, lr}
    4f72:	b082      	sub	sp, #8
    4f74:	af00      	add	r7, sp, #0
    4f76:	0002      	movs	r2, r0
    4f78:	1dfb      	adds	r3, r7, #7
    4f7a:	701a      	strb	r2, [r3, #0]
    4f7c:	1dbb      	adds	r3, r7, #6
    4f7e:	1c0a      	adds	r2, r1, #0
    4f80:	701a      	strb	r2, [r3, #0]
  radioselect();
    4f82:	4b0e      	ldr	r3, [pc, #56]	; (4fbc <writeReg+0x4c>)
    4f84:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    4f86:	1dfb      	adds	r3, r7, #7
    4f88:	781b      	ldrb	r3, [r3, #0]
    4f8a:	2280      	movs	r2, #128	; 0x80
    4f8c:	4252      	negs	r2, r2
    4f8e:	4313      	orrs	r3, r2
    4f90:	b2db      	uxtb	r3, r3
    4f92:	b299      	uxth	r1, r3
    4f94:	4a0a      	ldr	r2, [pc, #40]	; (4fc0 <writeReg+0x50>)
    4f96:	4b0b      	ldr	r3, [pc, #44]	; (4fc4 <writeReg+0x54>)
    4f98:	0018      	movs	r0, r3
    4f9a:	4b0b      	ldr	r3, [pc, #44]	; (4fc8 <writeReg+0x58>)
    4f9c:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    4f9e:	1dbb      	adds	r3, r7, #6
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	b299      	uxth	r1, r3
    4fa4:	4a06      	ldr	r2, [pc, #24]	; (4fc0 <writeReg+0x50>)
    4fa6:	4b07      	ldr	r3, [pc, #28]	; (4fc4 <writeReg+0x54>)
    4fa8:	0018      	movs	r0, r3
    4faa:	4b07      	ldr	r3, [pc, #28]	; (4fc8 <writeReg+0x58>)
    4fac:	4798      	blx	r3
  unselect();
    4fae:	4b07      	ldr	r3, [pc, #28]	; (4fcc <writeReg+0x5c>)
    4fb0:	4798      	blx	r3
}
    4fb2:	46c0      	nop			; (mov r8, r8)
    4fb4:	46bd      	mov	sp, r7
    4fb6:	b002      	add	sp, #8
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	00004fd1 	.word	0x00004fd1
    4fc0:	20000060 	.word	0x20000060
    4fc4:	20000214 	.word	0x20000214
    4fc8:	000023d9 	.word	0x000023d9
    4fcc:	00004ffd 	.word	0x00004ffd

00004fd0 <radioselect>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void radioselect() {
    4fd0:	b580      	push	{r7, lr}
    4fd2:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    4fd4:	4b05      	ldr	r3, [pc, #20]	; (4fec <radioselect+0x1c>)
    4fd6:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    4fd8:	4905      	ldr	r1, [pc, #20]	; (4ff0 <radioselect+0x20>)
    4fda:	4b06      	ldr	r3, [pc, #24]	; (4ff4 <radioselect+0x24>)
    4fdc:	2201      	movs	r2, #1
    4fde:	0018      	movs	r0, r3
    4fe0:	4b05      	ldr	r3, [pc, #20]	; (4ff8 <radioselect+0x28>)
    4fe2:	4798      	blx	r3
}
    4fe4:	46c0      	nop			; (mov r8, r8)
    4fe6:	46bd      	mov	sp, r7
    4fe8:	bd80      	pop	{r7, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	00003f1d 	.word	0x00003f1d
    4ff0:	20000294 	.word	0x20000294
    4ff4:	20000214 	.word	0x20000214
    4ff8:	00002525 	.word	0x00002525

00004ffc <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    4ffc:	b580      	push	{r7, lr}
    4ffe:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    5000:	4905      	ldr	r1, [pc, #20]	; (5018 <unselect+0x1c>)
    5002:	4b06      	ldr	r3, [pc, #24]	; (501c <unselect+0x20>)
    5004:	2200      	movs	r2, #0
    5006:	0018      	movs	r0, r3
    5008:	4b05      	ldr	r3, [pc, #20]	; (5020 <unselect+0x24>)
    500a:	4798      	blx	r3
  maybeInterrupts();
    500c:	4b05      	ldr	r3, [pc, #20]	; (5024 <unselect+0x28>)
    500e:	4798      	blx	r3
}
    5010:	46c0      	nop			; (mov r8, r8)
    5012:	46bd      	mov	sp, r7
    5014:	bd80      	pop	{r7, pc}
    5016:	46c0      	nop			; (mov r8, r8)
    5018:	20000294 	.word	0x20000294
    501c:	20000214 	.word	0x20000214
    5020:	00002525 	.word	0x00002525
    5024:	0000506d 	.word	0x0000506d

00005028 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    5028:	b580      	push	{r7, lr}
    502a:	b082      	sub	sp, #8
    502c:	af00      	add	r7, sp, #0
    502e:	0002      	movs	r2, r0
    5030:	1dfb      	adds	r3, r7, #7
    5032:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    5034:	1dfb      	adds	r3, r7, #7
    5036:	781b      	ldrb	r3, [r3, #0]
    5038:	2b00      	cmp	r3, #0
    503a:	d001      	beq.n	5040 <setHighPowerRegs+0x18>
    503c:	235d      	movs	r3, #93	; 0x5d
    503e:	e000      	b.n	5042 <setHighPowerRegs+0x1a>
    5040:	2355      	movs	r3, #85	; 0x55
    5042:	0019      	movs	r1, r3
    5044:	205a      	movs	r0, #90	; 0x5a
    5046:	4b08      	ldr	r3, [pc, #32]	; (5068 <setHighPowerRegs+0x40>)
    5048:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    504a:	1dfb      	adds	r3, r7, #7
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	2b00      	cmp	r3, #0
    5050:	d001      	beq.n	5056 <setHighPowerRegs+0x2e>
    5052:	237c      	movs	r3, #124	; 0x7c
    5054:	e000      	b.n	5058 <setHighPowerRegs+0x30>
    5056:	2370      	movs	r3, #112	; 0x70
    5058:	0019      	movs	r1, r3
    505a:	205c      	movs	r0, #92	; 0x5c
    505c:	4b02      	ldr	r3, [pc, #8]	; (5068 <setHighPowerRegs+0x40>)
    505e:	4798      	blx	r3
}
    5060:	46c0      	nop			; (mov r8, r8)
    5062:	46bd      	mov	sp, r7
    5064:	b002      	add	sp, #8
    5066:	bd80      	pop	{r7, pc}
    5068:	00004f71 	.word	0x00004f71

0000506c <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    506c:	b580      	push	{r7, lr}
    506e:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    5070:	4b06      	ldr	r3, [pc, #24]	; (508c <maybeInterrupts+0x20>)
    5072:	781b      	ldrb	r3, [r3, #0]
    5074:	b2db      	uxtb	r3, r3
    5076:	2201      	movs	r2, #1
    5078:	4053      	eors	r3, r2
    507a:	b2db      	uxtb	r3, r3
    507c:	2b00      	cmp	r3, #0
    507e:	d001      	beq.n	5084 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    5080:	4b03      	ldr	r3, [pc, #12]	; (5090 <maybeInterrupts+0x24>)
    5082:	4798      	blx	r3
}
    5084:	46c0      	nop			; (mov r8, r8)
    5086:	46bd      	mov	sp, r7
    5088:	bd80      	pop	{r7, pc}
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	20000111 	.word	0x20000111
    5090:	00003f01 	.word	0x00003f01

00005094 <configure_LED_PWM>:
void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    5094:	b580      	push	{r7, lr}
    5096:	b0aa      	sub	sp, #168	; 0xa8
    5098:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    509a:	4a32      	ldr	r2, [pc, #200]	; (5164 <configure_LED_PWM+0xd0>)
    509c:	1d3b      	adds	r3, r7, #4
    509e:	0011      	movs	r1, r2
    50a0:	0018      	movs	r0, r3
    50a2:	4b31      	ldr	r3, [pc, #196]	; (5168 <configure_LED_PWM+0xd4>)
    50a4:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    50a6:	1d3b      	adds	r3, r7, #4
    50a8:	4a30      	ldr	r2, [pc, #192]	; (516c <configure_LED_PWM+0xd8>)
    50aa:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    50ac:	1d3b      	adds	r3, r7, #4
    50ae:	2202      	movs	r2, #2
    50b0:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    50b2:	1d3b      	adds	r3, r7, #4
    50b4:	2200      	movs	r2, #0
    50b6:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    50b8:	1d3b      	adds	r3, r7, #4
    50ba:	2200      	movs	r2, #0
    50bc:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    50be:	1d3b      	adds	r3, r7, #4
    50c0:	2298      	movs	r2, #152	; 0x98
    50c2:	2101      	movs	r1, #1
    50c4:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    50c6:	1d3b      	adds	r3, r7, #4
    50c8:	2299      	movs	r2, #153	; 0x99
    50ca:	2101      	movs	r1, #1
    50cc:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    50ce:	1d3b      	adds	r3, r7, #4
    50d0:	2215      	movs	r2, #21
    50d2:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    50d4:	1d3b      	adds	r3, r7, #4
    50d6:	220e      	movs	r2, #14
    50d8:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    50da:	1d3b      	adds	r3, r7, #4
    50dc:	2205      	movs	r2, #5
    50de:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    50e0:	1d3b      	adds	r3, r7, #4
    50e2:	2205      	movs	r2, #5
    50e4:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    50e6:	1d3a      	adds	r2, r7, #4
    50e8:	491e      	ldr	r1, [pc, #120]	; (5164 <configure_LED_PWM+0xd0>)
    50ea:	4b21      	ldr	r3, [pc, #132]	; (5170 <configure_LED_PWM+0xdc>)
    50ec:	0018      	movs	r0, r3
    50ee:	4b21      	ldr	r3, [pc, #132]	; (5174 <configure_LED_PWM+0xe0>)
    50f0:	4798      	blx	r3
	tcc_enable(&tcc0);
    50f2:	4b1f      	ldr	r3, [pc, #124]	; (5170 <configure_LED_PWM+0xdc>)
    50f4:	0018      	movs	r0, r3
    50f6:	4b20      	ldr	r3, [pc, #128]	; (5178 <configure_LED_PWM+0xe4>)
    50f8:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    50fa:	4a20      	ldr	r2, [pc, #128]	; (517c <configure_LED_PWM+0xe8>)
    50fc:	1d3b      	adds	r3, r7, #4
    50fe:	0011      	movs	r1, r2
    5100:	0018      	movs	r0, r3
    5102:	4b19      	ldr	r3, [pc, #100]	; (5168 <configure_LED_PWM+0xd4>)
    5104:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    5106:	1d3b      	adds	r3, r7, #4
    5108:	4a18      	ldr	r2, [pc, #96]	; (516c <configure_LED_PWM+0xd8>)
    510a:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    510c:	1d3b      	adds	r3, r7, #4
    510e:	2202      	movs	r2, #2
    5110:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    5112:	1d3b      	adds	r3, r7, #4
    5114:	2200      	movs	r2, #0
    5116:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    5118:	1d3b      	adds	r3, r7, #4
    511a:	2200      	movs	r2, #0
    511c:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    511e:	1d3b      	adds	r3, r7, #4
    5120:	2298      	movs	r2, #152	; 0x98
    5122:	2101      	movs	r1, #1
    5124:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    5126:	1d3b      	adds	r3, r7, #4
    5128:	2299      	movs	r2, #153	; 0x99
    512a:	2101      	movs	r1, #1
    512c:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    512e:	1d3b      	adds	r3, r7, #4
    5130:	2208      	movs	r2, #8
    5132:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    5134:	1d3b      	adds	r3, r7, #4
    5136:	2207      	movs	r2, #7
    5138:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    513a:	1d3b      	adds	r3, r7, #4
    513c:	2205      	movs	r2, #5
    513e:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    5140:	1d3b      	adds	r3, r7, #4
    5142:	2204      	movs	r2, #4
    5144:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    5146:	1d3a      	adds	r2, r7, #4
    5148:	490c      	ldr	r1, [pc, #48]	; (517c <configure_LED_PWM+0xe8>)
    514a:	4b0d      	ldr	r3, [pc, #52]	; (5180 <configure_LED_PWM+0xec>)
    514c:	0018      	movs	r0, r3
    514e:	4b09      	ldr	r3, [pc, #36]	; (5174 <configure_LED_PWM+0xe0>)
    5150:	4798      	blx	r3
	tcc_enable(&tcc1);
    5152:	4b0b      	ldr	r3, [pc, #44]	; (5180 <configure_LED_PWM+0xec>)
    5154:	0018      	movs	r0, r3
    5156:	4b08      	ldr	r3, [pc, #32]	; (5178 <configure_LED_PWM+0xe4>)
    5158:	4798      	blx	r3
}
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	46bd      	mov	sp, r7
    515e:	b02a      	add	sp, #168	; 0xa8
    5160:	bd80      	pop	{r7, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	42002000 	.word	0x42002000
    5168:	00001049 	.word	0x00001049
    516c:	0000ffff 	.word	0x0000ffff
    5170:	20000114 	.word	0x20000114
    5174:	000016a5 	.word	0x000016a5
    5178:	0000413d 	.word	0x0000413d
    517c:	42002400 	.word	0x42002400
    5180:	20000254 	.word	0x20000254

00005184 <configure_IO_pins>:
///////////////////////////////////////////////////////////////////////////

// Configure the LED selection port as output
void configure_IO_pins(void)
{
    5184:	b580      	push	{r7, lr}
    5186:	b082      	sub	sp, #8
    5188:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    518a:	1d3b      	adds	r3, r7, #4
    518c:	0018      	movs	r0, r3
    518e:	4b26      	ldr	r3, [pc, #152]	; (5228 <configure_IO_pins+0xa4>)
    5190:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    5192:	1d3b      	adds	r3, r7, #4
    5194:	2200      	movs	r2, #0
    5196:	701a      	strb	r2, [r3, #0]
	// Right Arrow Button
	port_pin_set_config(PIN_PA04, &config_port_pin);
    5198:	1d3b      	adds	r3, r7, #4
    519a:	0019      	movs	r1, r3
    519c:	2004      	movs	r0, #4
    519e:	4b23      	ldr	r3, [pc, #140]	; (522c <configure_IO_pins+0xa8>)
    51a0:	4798      	blx	r3
	// Hall Up*
	port_pin_set_config(PIN_PA06, &config_port_pin);
    51a2:	1d3b      	adds	r3, r7, #4
    51a4:	0019      	movs	r1, r3
    51a6:	2006      	movs	r0, #6
    51a8:	4b20      	ldr	r3, [pc, #128]	; (522c <configure_IO_pins+0xa8>)
    51aa:	4798      	blx	r3
	// Hall Down*
	port_pin_set_config(PIN_PA09, &config_port_pin);
    51ac:	1d3b      	adds	r3, r7, #4
    51ae:	0019      	movs	r1, r3
    51b0:	2009      	movs	r0, #9
    51b2:	4b1e      	ldr	r3, [pc, #120]	; (522c <configure_IO_pins+0xa8>)
    51b4:	4798      	blx	r3
	// Hall Left*
	port_pin_set_config(PIN_PA10, &config_port_pin);
    51b6:	1d3b      	adds	r3, r7, #4
    51b8:	0019      	movs	r1, r3
    51ba:	200a      	movs	r0, #10
    51bc:	4b1b      	ldr	r3, [pc, #108]	; (522c <configure_IO_pins+0xa8>)
    51be:	4798      	blx	r3
	// Hall Right*
	port_pin_set_config(PIN_PA11, &config_port_pin);
    51c0:	1d3b      	adds	r3, r7, #4
    51c2:	0019      	movs	r1, r3
    51c4:	200b      	movs	r0, #11
    51c6:	4b19      	ldr	r3, [pc, #100]	; (522c <configure_IO_pins+0xa8>)
    51c8:	4798      	blx	r3
	// Down Arrow Button
	port_pin_set_config(PIN_PA12, &config_port_pin);
    51ca:	1d3b      	adds	r3, r7, #4
    51cc:	0019      	movs	r1, r3
    51ce:	200c      	movs	r0, #12
    51d0:	4b16      	ldr	r3, [pc, #88]	; (522c <configure_IO_pins+0xa8>)
    51d2:	4798      	blx	r3
	// Scroll Button
	port_pin_set_config(PIN_PA13, &config_port_pin);
    51d4:	1d3b      	adds	r3, r7, #4
    51d6:	0019      	movs	r1, r3
    51d8:	200d      	movs	r0, #13
    51da:	4b14      	ldr	r3, [pc, #80]	; (522c <configure_IO_pins+0xa8>)
    51dc:	4798      	blx	r3
	// Right Mouse Button
	port_pin_set_config(PIN_PA15, &config_port_pin);
    51de:	1d3b      	adds	r3, r7, #4
    51e0:	0019      	movs	r1, r3
    51e2:	200f      	movs	r0, #15
    51e4:	4b11      	ldr	r3, [pc, #68]	; (522c <configure_IO_pins+0xa8>)
    51e6:	4798      	blx	r3
	// Up Arrow Button
	port_pin_set_config(PIN_PA20, &config_port_pin);
    51e8:	1d3b      	adds	r3, r7, #4
    51ea:	0019      	movs	r1, r3
    51ec:	2014      	movs	r0, #20
    51ee:	4b0f      	ldr	r3, [pc, #60]	; (522c <configure_IO_pins+0xa8>)
    51f0:	4798      	blx	r3
	// Left Mouse Button
	port_pin_set_config(PIN_PB02, &config_port_pin);
    51f2:	1d3b      	adds	r3, r7, #4
    51f4:	0019      	movs	r1, r3
    51f6:	2022      	movs	r0, #34	; 0x22
    51f8:	4b0c      	ldr	r3, [pc, #48]	; (522c <configure_IO_pins+0xa8>)
    51fa:	4798      	blx	r3
	// Laser Button
	port_pin_set_config(PIN_PB03, &config_port_pin);
    51fc:	1d3b      	adds	r3, r7, #4
    51fe:	0019      	movs	r1, r3
    5200:	2023      	movs	r0, #35	; 0x23
    5202:	4b0a      	ldr	r3, [pc, #40]	; (522c <configure_IO_pins+0xa8>)
    5204:	4798      	blx	r3
	// Left Arrow Button
	port_pin_set_config(PIN_PB09, &config_port_pin);
    5206:	1d3b      	adds	r3, r7, #4
    5208:	0019      	movs	r1, r3
    520a:	2029      	movs	r0, #41	; 0x29
    520c:	4b07      	ldr	r3, [pc, #28]	; (522c <configure_IO_pins+0xa8>)
    520e:	4798      	blx	r3
	// Laser Output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5210:	1d3b      	adds	r3, r7, #4
    5212:	2201      	movs	r2, #1
    5214:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB08, &config_port_pin);
    5216:	1d3b      	adds	r3, r7, #4
    5218:	0019      	movs	r1, r3
    521a:	2028      	movs	r0, #40	; 0x28
    521c:	4b03      	ldr	r3, [pc, #12]	; (522c <configure_IO_pins+0xa8>)
    521e:	4798      	blx	r3
}
    5220:	46c0      	nop			; (mov r8, r8)
    5222:	46bd      	mov	sp, r7
    5224:	b002      	add	sp, #8
    5226:	bd80      	pop	{r7, pc}
    5228:	00003e45 	.word	0x00003e45
    522c:	00002f29 	.word	0x00002f29

00005230 <main>:


int main (void)
{
    5230:	b590      	push	{r4, r7, lr}
    5232:	b087      	sub	sp, #28
    5234:	af00      	add	r7, sp, #0
    /* Initialize system */
	system_init();
    5236:	4b6b      	ldr	r3, [pc, #428]	; (53e4 <main+0x1b4>)
    5238:	4798      	blx	r3
	configure_LED_PWM();
    523a:	4b6b      	ldr	r3, [pc, #428]	; (53e8 <main+0x1b8>)
    523c:	4798      	blx	r3
	configure_IO_pins();
    523e:	4b6b      	ldr	r3, [pc, #428]	; (53ec <main+0x1bc>)
    5240:	4798      	blx	r3
			break;
		}
	}*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    5242:	2200      	movs	r2, #0
    5244:	2103      	movs	r1, #3
    5246:	205b      	movs	r0, #91	; 0x5b
    5248:	4b69      	ldr	r3, [pc, #420]	; (53f0 <main+0x1c0>)
    524a:	4798      	blx	r3
	RFM_setHighPower(true);
    524c:	2001      	movs	r0, #1
    524e:	4b69      	ldr	r3, [pc, #420]	; (53f4 <main+0x1c4>)
    5250:	4798      	blx	r3
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
    5252:	4b69      	ldr	r3, [pc, #420]	; (53f8 <main+0x1c8>)
    5254:	0018      	movs	r0, r3
    5256:	4b69      	ldr	r3, [pc, #420]	; (53fc <main+0x1cc>)
    5258:	4798      	blx	r3


	int sendlength = 3; //number can be increased 
    525a:	2303      	movs	r3, #3
    525c:	617b      	str	r3, [r7, #20]
	int index = 0;
    525e:	2300      	movs	r3, #0
    5260:	613b      	str	r3, [r7, #16]
	int8_t sendbuffer[16];

	init_wheel();
    5262:	4b67      	ldr	r3, [pc, #412]	; (5400 <main+0x1d0>)
    5264:	4798      	blx	r3
	
	while(1) //busy loop
	//sends data after receiving a request message from the dongle
	//sends X axis byte, Y axis byte, button byte
	{
		ColorCycle();
    5266:	4b67      	ldr	r3, [pc, #412]	; (5404 <main+0x1d4>)
    5268:	4798      	blx	r3
		static bool button = 0;
		static bool lbutton = 0;
		static bool laserState = 0;

		button = port_pin_get_input_level(PIN_PB03);
    526a:	2023      	movs	r0, #35	; 0x23
    526c:	4b66      	ldr	r3, [pc, #408]	; (5408 <main+0x1d8>)
    526e:	4798      	blx	r3
    5270:	0003      	movs	r3, r0
    5272:	001a      	movs	r2, r3
    5274:	4b65      	ldr	r3, [pc, #404]	; (540c <main+0x1dc>)
    5276:	701a      	strb	r2, [r3, #0]
		if(button && !lbutton)
    5278:	4b64      	ldr	r3, [pc, #400]	; (540c <main+0x1dc>)
    527a:	781b      	ldrb	r3, [r3, #0]
    527c:	2b00      	cmp	r3, #0
    527e:	d01a      	beq.n	52b6 <main+0x86>
    5280:	4b63      	ldr	r3, [pc, #396]	; (5410 <main+0x1e0>)
    5282:	781b      	ldrb	r3, [r3, #0]
    5284:	2201      	movs	r2, #1
    5286:	4053      	eors	r3, r2
    5288:	b2db      	uxtb	r3, r3
    528a:	2b00      	cmp	r3, #0
    528c:	d013      	beq.n	52b6 <main+0x86>
		{
			laserState = !laserState;
    528e:	4b61      	ldr	r3, [pc, #388]	; (5414 <main+0x1e4>)
    5290:	781b      	ldrb	r3, [r3, #0]
    5292:	1e5a      	subs	r2, r3, #1
    5294:	4193      	sbcs	r3, r2
    5296:	b2db      	uxtb	r3, r3
    5298:	2201      	movs	r2, #1
    529a:	4053      	eors	r3, r2
    529c:	b2db      	uxtb	r3, r3
    529e:	1c1a      	adds	r2, r3, #0
    52a0:	2301      	movs	r3, #1
    52a2:	4013      	ands	r3, r2
    52a4:	b2da      	uxtb	r2, r3
    52a6:	4b5b      	ldr	r3, [pc, #364]	; (5414 <main+0x1e4>)
    52a8:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(PIN_PB08, laserState);
    52aa:	4b5a      	ldr	r3, [pc, #360]	; (5414 <main+0x1e4>)
    52ac:	781b      	ldrb	r3, [r3, #0]
    52ae:	0019      	movs	r1, r3
    52b0:	2028      	movs	r0, #40	; 0x28
    52b2:	4b59      	ldr	r3, [pc, #356]	; (5418 <main+0x1e8>)
    52b4:	4798      	blx	r3
		}

		//Do the wheel update
		update_values();
    52b6:	4b59      	ldr	r3, [pc, #356]	; (541c <main+0x1ec>)
    52b8:	4798      	blx	r3
		
		getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    52ba:	003b      	movs	r3, r7
    52bc:	1c5a      	adds	r2, r3, #1
    52be:	003b      	movs	r3, r7
    52c0:	0011      	movs	r1, r2
    52c2:	0018      	movs	r0, r3
    52c4:	4b56      	ldr	r3, [pc, #344]	; (5420 <main+0x1f0>)
    52c6:	4798      	blx	r3
		
		lbutton = button;
    52c8:	4b50      	ldr	r3, [pc, #320]	; (540c <main+0x1dc>)
    52ca:	781a      	ldrb	r2, [r3, #0]
    52cc:	4b50      	ldr	r3, [pc, #320]	; (5410 <main+0x1e0>)
    52ce:	701a      	strb	r2, [r3, #0]
		//check if the RFM69 receives a  packet
		//only send info when a packet is received from dongle module			
		if (RFM_receiveDone()) // Got one!
    52d0:	4b54      	ldr	r3, [pc, #336]	; (5424 <main+0x1f4>)
    52d2:	4798      	blx	r3
    52d4:	1e03      	subs	r3, r0, #0
    52d6:	d0c6      	beq.n	5266 <main+0x36>
		{
			if(RFM_DATALEN == 1 && RFM_DATA[0] == 'B' && RFM_SENDERID == 2)
    52d8:	4b53      	ldr	r3, [pc, #332]	; (5428 <main+0x1f8>)
    52da:	881b      	ldrh	r3, [r3, #0]
    52dc:	b29b      	uxth	r3, r3
    52de:	2b01      	cmp	r3, #1
    52e0:	d1c1      	bne.n	5266 <main+0x36>
    52e2:	4b52      	ldr	r3, [pc, #328]	; (542c <main+0x1fc>)
    52e4:	881b      	ldrh	r3, [r3, #0]
    52e6:	b29b      	uxth	r3, r3
    52e8:	2b42      	cmp	r3, #66	; 0x42
    52ea:	d1bc      	bne.n	5266 <main+0x36>
    52ec:	4b50      	ldr	r3, [pc, #320]	; (5430 <main+0x200>)
    52ee:	881b      	ldrh	r3, [r3, #0]
    52f0:	b29b      	uxth	r3, r3
    52f2:	2b02      	cmp	r3, #2
    52f4:	d1b7      	bne.n	5266 <main+0x36>
			{
				// The actual message is contained in the RFM_DATA array,
				// and is RFM_DATALEN bytes in size:
				getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    52f6:	003b      	movs	r3, r7
    52f8:	1c5a      	adds	r2, r3, #1
    52fa:	003b      	movs	r3, r7
    52fc:	0011      	movs	r1, r2
    52fe:	0018      	movs	r0, r3
    5300:	4b47      	ldr	r3, [pc, #284]	; (5420 <main+0x1f0>)
    5302:	4798      	blx	r3

				sendbuffer[2] = 0;
    5304:	003b      	movs	r3, r7
    5306:	2200      	movs	r2, #0
    5308:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PA20) << 7); // Up
    530a:	2014      	movs	r0, #20
    530c:	4b3e      	ldr	r3, [pc, #248]	; (5408 <main+0x1d8>)
    530e:	4798      	blx	r3
    5310:	0003      	movs	r3, r0
    5312:	01d9      	lsls	r1, r3, #7
    5314:	003b      	movs	r3, r7
    5316:	2202      	movs	r2, #2
    5318:	569a      	ldrsb	r2, [r3, r2]
    531a:	b24b      	sxtb	r3, r1
    531c:	4313      	orrs	r3, r2
    531e:	b25a      	sxtb	r2, r3
    5320:	003b      	movs	r3, r7
    5322:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PA12) << 6); // Down
    5324:	200c      	movs	r0, #12
    5326:	4b38      	ldr	r3, [pc, #224]	; (5408 <main+0x1d8>)
    5328:	4798      	blx	r3
    532a:	0003      	movs	r3, r0
    532c:	0199      	lsls	r1, r3, #6
    532e:	003b      	movs	r3, r7
    5330:	2202      	movs	r2, #2
    5332:	569a      	ldrsb	r2, [r3, r2]
    5334:	b24b      	sxtb	r3, r1
    5336:	4313      	orrs	r3, r2
    5338:	b25a      	sxtb	r2, r3
    533a:	003b      	movs	r3, r7
    533c:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PB09) << 5); // Left
    533e:	2029      	movs	r0, #41	; 0x29
    5340:	4b31      	ldr	r3, [pc, #196]	; (5408 <main+0x1d8>)
    5342:	4798      	blx	r3
    5344:	0003      	movs	r3, r0
    5346:	0159      	lsls	r1, r3, #5
    5348:	003b      	movs	r3, r7
    534a:	2202      	movs	r2, #2
    534c:	569a      	ldrsb	r2, [r3, r2]
    534e:	b24b      	sxtb	r3, r1
    5350:	4313      	orrs	r3, r2
    5352:	b25a      	sxtb	r2, r3
    5354:	003b      	movs	r3, r7
    5356:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PA15) << 4); // Right
    5358:	200f      	movs	r0, #15
    535a:	4b2b      	ldr	r3, [pc, #172]	; (5408 <main+0x1d8>)
    535c:	4798      	blx	r3
    535e:	0003      	movs	r3, r0
    5360:	0119      	lsls	r1, r3, #4
    5362:	003b      	movs	r3, r7
    5364:	2202      	movs	r2, #2
    5366:	569a      	ldrsb	r2, [r3, r2]
    5368:	b24b      	sxtb	r3, r1
    536a:	4313      	orrs	r3, r2
    536c:	b25a      	sxtb	r2, r3
    536e:	003b      	movs	r3, r7
    5370:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PB02) << 3); // Left Click
    5372:	2022      	movs	r0, #34	; 0x22
    5374:	4b24      	ldr	r3, [pc, #144]	; (5408 <main+0x1d8>)
    5376:	4798      	blx	r3
    5378:	0003      	movs	r3, r0
    537a:	00d9      	lsls	r1, r3, #3
    537c:	003b      	movs	r3, r7
    537e:	2202      	movs	r2, #2
    5380:	569a      	ldrsb	r2, [r3, r2]
    5382:	b24b      	sxtb	r3, r1
    5384:	4313      	orrs	r3, r2
    5386:	b25a      	sxtb	r2, r3
    5388:	003b      	movs	r3, r7
    538a:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PA15) << 2); // Right Click
    538c:	200f      	movs	r0, #15
    538e:	4b1e      	ldr	r3, [pc, #120]	; (5408 <main+0x1d8>)
    5390:	4798      	blx	r3
    5392:	0003      	movs	r3, r0
    5394:	0099      	lsls	r1, r3, #2
    5396:	003b      	movs	r3, r7
    5398:	2202      	movs	r2, #2
    539a:	569a      	ldrsb	r2, [r3, r2]
    539c:	b24b      	sxtb	r3, r1
    539e:	4313      	orrs	r3, r2
    53a0:	b25a      	sxtb	r2, r3
    53a2:	003b      	movs	r3, r7
    53a4:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= (port_pin_get_input_level(PIN_PA13) << 1); // Middle Click
    53a6:	200d      	movs	r0, #13
    53a8:	4b17      	ldr	r3, [pc, #92]	; (5408 <main+0x1d8>)
    53aa:	4798      	blx	r3
    53ac:	0003      	movs	r3, r0
    53ae:	0059      	lsls	r1, r3, #1
    53b0:	003b      	movs	r3, r7
    53b2:	2202      	movs	r2, #2
    53b4:	569a      	ldrsb	r2, [r3, r2]
    53b6:	b24b      	sxtb	r3, r1
    53b8:	4313      	orrs	r3, r2
    53ba:	b25a      	sxtb	r2, r3
    53bc:	003b      	movs	r3, r7
    53be:	709a      	strb	r2, [r3, #2]
				sendbuffer[2] |= laserState;								// Laser State
    53c0:	003b      	movs	r3, r7
    53c2:	2202      	movs	r2, #2
    53c4:	569a      	ldrsb	r2, [r3, r2]
    53c6:	4b13      	ldr	r3, [pc, #76]	; (5414 <main+0x1e4>)
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	b25b      	sxtb	r3, r3
    53cc:	4313      	orrs	r3, r2
    53ce:	b25a      	sxtb	r2, r3
    53d0:	003b      	movs	r3, r7
    53d2:	709a      	strb	r2, [r3, #2]

				RFM_send(TONODEID, sendbuffer, sendlength, false);
    53d4:	697b      	ldr	r3, [r7, #20]
    53d6:	b2da      	uxtb	r2, r3
    53d8:	0039      	movs	r1, r7
    53da:	2300      	movs	r3, #0
    53dc:	2002      	movs	r0, #2
    53de:	4c15      	ldr	r4, [pc, #84]	; (5434 <main+0x204>)
    53e0:	47a0      	blx	r4
			}
		}
	}
    53e2:	e740      	b.n	5266 <main+0x36>
    53e4:	00003c8d 	.word	0x00003c8d
    53e8:	00005095 	.word	0x00005095
    53ec:	00005185 	.word	0x00005185
    53f0:	000045b9 	.word	0x000045b9
    53f4:	00004501 	.word	0x00004501
    53f8:	000057c8 	.word	0x000057c8
    53fc:	00004e15 	.word	0x00004e15
    5400:	00000bbd 	.word	0x00000bbd
    5404:	000054ad 	.word	0x000054ad
    5408:	00003e69 	.word	0x00003e69
    540c:	20000062 	.word	0x20000062
    5410:	20000063 	.word	0x20000063
    5414:	20000064 	.word	0x20000064
    5418:	00003ead 	.word	0x00003ead
    541c:	00000c09 	.word	0x00000c09
    5420:	00000cf1 	.word	0x00000cf1
    5424:	00004db9 	.word	0x00004db9
    5428:	2000015a 	.word	0x2000015a
    542c:	20000160 	.word	0x20000160
    5430:	200000f6 	.word	0x200000f6
    5434:	00004aa9 	.word	0x00004aa9

00005438 <setTrackBallRGBW>:
}

void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{	
    5438:	b5b0      	push	{r4, r5, r7, lr}
    543a:	b082      	sub	sp, #8
    543c:	af00      	add	r7, sp, #0
    543e:	0005      	movs	r5, r0
    5440:	000c      	movs	r4, r1
    5442:	0010      	movs	r0, r2
    5444:	0019      	movs	r1, r3
    5446:	1dbb      	adds	r3, r7, #6
    5448:	1c2a      	adds	r2, r5, #0
    544a:	801a      	strh	r2, [r3, #0]
    544c:	1d3b      	adds	r3, r7, #4
    544e:	1c22      	adds	r2, r4, #0
    5450:	801a      	strh	r2, [r3, #0]
    5452:	1cbb      	adds	r3, r7, #2
    5454:	1c02      	adds	r2, r0, #0
    5456:	801a      	strh	r2, [r3, #0]
    5458:	003b      	movs	r3, r7
    545a:	1c0a      	adds	r2, r1, #0
    545c:	801a      	strh	r2, [r3, #0]
	/* WHITE */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), white);
    545e:	003b      	movs	r3, r7
    5460:	881a      	ldrh	r2, [r3, #0]
    5462:	4b0f      	ldr	r3, [pc, #60]	; (54a0 <setTrackBallRGBW+0x68>)
    5464:	2100      	movs	r1, #0
    5466:	0018      	movs	r0, r3
    5468:	4b0e      	ldr	r3, [pc, #56]	; (54a4 <setTrackBallRGBW+0x6c>)
    546a:	4798      	blx	r3
	/* GREEN */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    546c:	1d3b      	adds	r3, r7, #4
    546e:	881a      	ldrh	r2, [r3, #0]
    5470:	4b0b      	ldr	r3, [pc, #44]	; (54a0 <setTrackBallRGBW+0x68>)
    5472:	2103      	movs	r1, #3
    5474:	0018      	movs	r0, r3
    5476:	4b0b      	ldr	r3, [pc, #44]	; (54a4 <setTrackBallRGBW+0x6c>)
    5478:	4798      	blx	r3
	/* BLUE */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), blue);
    547a:	1cbb      	adds	r3, r7, #2
    547c:	881a      	ldrh	r2, [r3, #0]
    547e:	4b0a      	ldr	r3, [pc, #40]	; (54a8 <setTrackBallRGBW+0x70>)
    5480:	2100      	movs	r1, #0
    5482:	0018      	movs	r0, r3
    5484:	4b07      	ldr	r3, [pc, #28]	; (54a4 <setTrackBallRGBW+0x6c>)
    5486:	4798      	blx	r3
	/* RED */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), red);
    5488:	1dbb      	adds	r3, r7, #6
    548a:	881a      	ldrh	r2, [r3, #0]
    548c:	4b06      	ldr	r3, [pc, #24]	; (54a8 <setTrackBallRGBW+0x70>)
    548e:	2101      	movs	r1, #1
    5490:	0018      	movs	r0, r3
    5492:	4b04      	ldr	r3, [pc, #16]	; (54a4 <setTrackBallRGBW+0x6c>)
    5494:	4798      	blx	r3
} 
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	46bd      	mov	sp, r7
    549a:	b002      	add	sp, #8
    549c:	bdb0      	pop	{r4, r5, r7, pc}
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	20000114 	.word	0x20000114
    54a4:	00001b4d 	.word	0x00001b4d
    54a8:	20000254 	.word	0x20000254

000054ac <ColorCycle>:

void ColorCycle(void)
{
    54ac:	b5b0      	push	{r4, r5, r7, lr}
    54ae:	af00      	add	r7, sp, #0
	static int color = 0;
	static int speed = 100;
	static int index = 0;
	if(index == 0)
    54b0:	4b27      	ldr	r3, [pc, #156]	; (5550 <ColorCycle+0xa4>)
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	2b00      	cmp	r3, #0
    54b6:	d10c      	bne.n	54d2 <ColorCycle+0x26>
	{
		setTrackBallRGBW(0xFFFF - color,color,0x0,0x0);
    54b8:	4b26      	ldr	r3, [pc, #152]	; (5554 <ColorCycle+0xa8>)
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	b29b      	uxth	r3, r3
    54be:	43db      	mvns	r3, r3
    54c0:	b298      	uxth	r0, r3
    54c2:	4b24      	ldr	r3, [pc, #144]	; (5554 <ColorCycle+0xa8>)
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	b299      	uxth	r1, r3
    54c8:	2300      	movs	r3, #0
    54ca:	2200      	movs	r2, #0
    54cc:	4c22      	ldr	r4, [pc, #136]	; (5558 <ColorCycle+0xac>)
    54ce:	47a0      	blx	r4
    54d0:	e020      	b.n	5514 <ColorCycle+0x68>
	}
	else if(index == 1)
    54d2:	4b1f      	ldr	r3, [pc, #124]	; (5550 <ColorCycle+0xa4>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	2b01      	cmp	r3, #1
    54d8:	d10c      	bne.n	54f4 <ColorCycle+0x48>
	{
		setTrackBallRGBW(0x0,0xFFFF - color,color,0x0);
    54da:	4b1e      	ldr	r3, [pc, #120]	; (5554 <ColorCycle+0xa8>)
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	b29b      	uxth	r3, r3
    54e0:	43db      	mvns	r3, r3
    54e2:	b299      	uxth	r1, r3
    54e4:	4b1b      	ldr	r3, [pc, #108]	; (5554 <ColorCycle+0xa8>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	b29a      	uxth	r2, r3
    54ea:	2300      	movs	r3, #0
    54ec:	2000      	movs	r0, #0
    54ee:	4c1a      	ldr	r4, [pc, #104]	; (5558 <ColorCycle+0xac>)
    54f0:	47a0      	blx	r4
    54f2:	e00f      	b.n	5514 <ColorCycle+0x68>
	}
	else if(index == 2)
    54f4:	4b16      	ldr	r3, [pc, #88]	; (5550 <ColorCycle+0xa4>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	2b02      	cmp	r3, #2
    54fa:	d10b      	bne.n	5514 <ColorCycle+0x68>
	{
		setTrackBallRGBW(color,0x0,0xFFFF - color,0x0);
    54fc:	4b15      	ldr	r3, [pc, #84]	; (5554 <ColorCycle+0xa8>)
    54fe:	681b      	ldr	r3, [r3, #0]
    5500:	b298      	uxth	r0, r3
    5502:	4b14      	ldr	r3, [pc, #80]	; (5554 <ColorCycle+0xa8>)
    5504:	681b      	ldr	r3, [r3, #0]
    5506:	b29b      	uxth	r3, r3
    5508:	43db      	mvns	r3, r3
    550a:	b29a      	uxth	r2, r3
    550c:	2300      	movs	r3, #0
    550e:	2100      	movs	r1, #0
    5510:	4c11      	ldr	r4, [pc, #68]	; (5558 <ColorCycle+0xac>)
    5512:	47a0      	blx	r4
	}
	
	color += speed;
    5514:	4b0f      	ldr	r3, [pc, #60]	; (5554 <ColorCycle+0xa8>)
    5516:	681a      	ldr	r2, [r3, #0]
    5518:	4b10      	ldr	r3, [pc, #64]	; (555c <ColorCycle+0xb0>)
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	18d2      	adds	r2, r2, r3
    551e:	4b0d      	ldr	r3, [pc, #52]	; (5554 <ColorCycle+0xa8>)
    5520:	601a      	str	r2, [r3, #0]
	if(color >= 0xFFFF)
    5522:	4b0c      	ldr	r3, [pc, #48]	; (5554 <ColorCycle+0xa8>)
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	4a0e      	ldr	r2, [pc, #56]	; (5560 <ColorCycle+0xb4>)
    5528:	4293      	cmp	r3, r2
    552a:	dd0e      	ble.n	554a <ColorCycle+0x9e>
	{
		color = 0;
    552c:	4b09      	ldr	r3, [pc, #36]	; (5554 <ColorCycle+0xa8>)
    552e:	2200      	movs	r2, #0
    5530:	601a      	str	r2, [r3, #0]
		index++;
    5532:	4b07      	ldr	r3, [pc, #28]	; (5550 <ColorCycle+0xa4>)
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	1c5a      	adds	r2, r3, #1
    5538:	4b05      	ldr	r3, [pc, #20]	; (5550 <ColorCycle+0xa4>)
    553a:	601a      	str	r2, [r3, #0]
		if(index > 2)
    553c:	4b04      	ldr	r3, [pc, #16]	; (5550 <ColorCycle+0xa4>)
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	2b02      	cmp	r3, #2
    5542:	dd02      	ble.n	554a <ColorCycle+0x9e>
		index = 0;
    5544:	4b02      	ldr	r3, [pc, #8]	; (5550 <ColorCycle+0xa4>)
    5546:	2200      	movs	r2, #0
    5548:	601a      	str	r2, [r3, #0]
	}
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	46bd      	mov	sp, r7
    554e:	bdb0      	pop	{r4, r5, r7, pc}
    5550:	20000068 	.word	0x20000068
    5554:	2000006c 	.word	0x2000006c
    5558:	00005439 	.word	0x00005439
    555c:	20000004 	.word	0x20000004
    5560:	0000fffe 	.word	0x0000fffe

00005564 <__aeabi_uidiv>:
    5564:	2200      	movs	r2, #0
    5566:	0843      	lsrs	r3, r0, #1
    5568:	428b      	cmp	r3, r1
    556a:	d374      	bcc.n	5656 <__aeabi_uidiv+0xf2>
    556c:	0903      	lsrs	r3, r0, #4
    556e:	428b      	cmp	r3, r1
    5570:	d35f      	bcc.n	5632 <__aeabi_uidiv+0xce>
    5572:	0a03      	lsrs	r3, r0, #8
    5574:	428b      	cmp	r3, r1
    5576:	d344      	bcc.n	5602 <__aeabi_uidiv+0x9e>
    5578:	0b03      	lsrs	r3, r0, #12
    557a:	428b      	cmp	r3, r1
    557c:	d328      	bcc.n	55d0 <__aeabi_uidiv+0x6c>
    557e:	0c03      	lsrs	r3, r0, #16
    5580:	428b      	cmp	r3, r1
    5582:	d30d      	bcc.n	55a0 <__aeabi_uidiv+0x3c>
    5584:	22ff      	movs	r2, #255	; 0xff
    5586:	0209      	lsls	r1, r1, #8
    5588:	ba12      	rev	r2, r2
    558a:	0c03      	lsrs	r3, r0, #16
    558c:	428b      	cmp	r3, r1
    558e:	d302      	bcc.n	5596 <__aeabi_uidiv+0x32>
    5590:	1212      	asrs	r2, r2, #8
    5592:	0209      	lsls	r1, r1, #8
    5594:	d065      	beq.n	5662 <__aeabi_uidiv+0xfe>
    5596:	0b03      	lsrs	r3, r0, #12
    5598:	428b      	cmp	r3, r1
    559a:	d319      	bcc.n	55d0 <__aeabi_uidiv+0x6c>
    559c:	e000      	b.n	55a0 <__aeabi_uidiv+0x3c>
    559e:	0a09      	lsrs	r1, r1, #8
    55a0:	0bc3      	lsrs	r3, r0, #15
    55a2:	428b      	cmp	r3, r1
    55a4:	d301      	bcc.n	55aa <__aeabi_uidiv+0x46>
    55a6:	03cb      	lsls	r3, r1, #15
    55a8:	1ac0      	subs	r0, r0, r3
    55aa:	4152      	adcs	r2, r2
    55ac:	0b83      	lsrs	r3, r0, #14
    55ae:	428b      	cmp	r3, r1
    55b0:	d301      	bcc.n	55b6 <__aeabi_uidiv+0x52>
    55b2:	038b      	lsls	r3, r1, #14
    55b4:	1ac0      	subs	r0, r0, r3
    55b6:	4152      	adcs	r2, r2
    55b8:	0b43      	lsrs	r3, r0, #13
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <__aeabi_uidiv+0x5e>
    55be:	034b      	lsls	r3, r1, #13
    55c0:	1ac0      	subs	r0, r0, r3
    55c2:	4152      	adcs	r2, r2
    55c4:	0b03      	lsrs	r3, r0, #12
    55c6:	428b      	cmp	r3, r1
    55c8:	d301      	bcc.n	55ce <__aeabi_uidiv+0x6a>
    55ca:	030b      	lsls	r3, r1, #12
    55cc:	1ac0      	subs	r0, r0, r3
    55ce:	4152      	adcs	r2, r2
    55d0:	0ac3      	lsrs	r3, r0, #11
    55d2:	428b      	cmp	r3, r1
    55d4:	d301      	bcc.n	55da <__aeabi_uidiv+0x76>
    55d6:	02cb      	lsls	r3, r1, #11
    55d8:	1ac0      	subs	r0, r0, r3
    55da:	4152      	adcs	r2, r2
    55dc:	0a83      	lsrs	r3, r0, #10
    55de:	428b      	cmp	r3, r1
    55e0:	d301      	bcc.n	55e6 <__aeabi_uidiv+0x82>
    55e2:	028b      	lsls	r3, r1, #10
    55e4:	1ac0      	subs	r0, r0, r3
    55e6:	4152      	adcs	r2, r2
    55e8:	0a43      	lsrs	r3, r0, #9
    55ea:	428b      	cmp	r3, r1
    55ec:	d301      	bcc.n	55f2 <__aeabi_uidiv+0x8e>
    55ee:	024b      	lsls	r3, r1, #9
    55f0:	1ac0      	subs	r0, r0, r3
    55f2:	4152      	adcs	r2, r2
    55f4:	0a03      	lsrs	r3, r0, #8
    55f6:	428b      	cmp	r3, r1
    55f8:	d301      	bcc.n	55fe <__aeabi_uidiv+0x9a>
    55fa:	020b      	lsls	r3, r1, #8
    55fc:	1ac0      	subs	r0, r0, r3
    55fe:	4152      	adcs	r2, r2
    5600:	d2cd      	bcs.n	559e <__aeabi_uidiv+0x3a>
    5602:	09c3      	lsrs	r3, r0, #7
    5604:	428b      	cmp	r3, r1
    5606:	d301      	bcc.n	560c <__aeabi_uidiv+0xa8>
    5608:	01cb      	lsls	r3, r1, #7
    560a:	1ac0      	subs	r0, r0, r3
    560c:	4152      	adcs	r2, r2
    560e:	0983      	lsrs	r3, r0, #6
    5610:	428b      	cmp	r3, r1
    5612:	d301      	bcc.n	5618 <__aeabi_uidiv+0xb4>
    5614:	018b      	lsls	r3, r1, #6
    5616:	1ac0      	subs	r0, r0, r3
    5618:	4152      	adcs	r2, r2
    561a:	0943      	lsrs	r3, r0, #5
    561c:	428b      	cmp	r3, r1
    561e:	d301      	bcc.n	5624 <__aeabi_uidiv+0xc0>
    5620:	014b      	lsls	r3, r1, #5
    5622:	1ac0      	subs	r0, r0, r3
    5624:	4152      	adcs	r2, r2
    5626:	0903      	lsrs	r3, r0, #4
    5628:	428b      	cmp	r3, r1
    562a:	d301      	bcc.n	5630 <__aeabi_uidiv+0xcc>
    562c:	010b      	lsls	r3, r1, #4
    562e:	1ac0      	subs	r0, r0, r3
    5630:	4152      	adcs	r2, r2
    5632:	08c3      	lsrs	r3, r0, #3
    5634:	428b      	cmp	r3, r1
    5636:	d301      	bcc.n	563c <__aeabi_uidiv+0xd8>
    5638:	00cb      	lsls	r3, r1, #3
    563a:	1ac0      	subs	r0, r0, r3
    563c:	4152      	adcs	r2, r2
    563e:	0883      	lsrs	r3, r0, #2
    5640:	428b      	cmp	r3, r1
    5642:	d301      	bcc.n	5648 <__aeabi_uidiv+0xe4>
    5644:	008b      	lsls	r3, r1, #2
    5646:	1ac0      	subs	r0, r0, r3
    5648:	4152      	adcs	r2, r2
    564a:	0843      	lsrs	r3, r0, #1
    564c:	428b      	cmp	r3, r1
    564e:	d301      	bcc.n	5654 <__aeabi_uidiv+0xf0>
    5650:	004b      	lsls	r3, r1, #1
    5652:	1ac0      	subs	r0, r0, r3
    5654:	4152      	adcs	r2, r2
    5656:	1a41      	subs	r1, r0, r1
    5658:	d200      	bcs.n	565c <__aeabi_uidiv+0xf8>
    565a:	4601      	mov	r1, r0
    565c:	4152      	adcs	r2, r2
    565e:	4610      	mov	r0, r2
    5660:	4770      	bx	lr
    5662:	e7ff      	b.n	5664 <__aeabi_uidiv+0x100>
    5664:	b501      	push	{r0, lr}
    5666:	2000      	movs	r0, #0
    5668:	f000 f806 	bl	5678 <__aeabi_idiv0>
    566c:	bd02      	pop	{r1, pc}
    566e:	46c0      	nop			; (mov r8, r8)

00005670 <__aeabi_uidivmod>:
    5670:	2900      	cmp	r1, #0
    5672:	d0f7      	beq.n	5664 <__aeabi_uidiv+0x100>
    5674:	e776      	b.n	5564 <__aeabi_uidiv>
    5676:	4770      	bx	lr

00005678 <__aeabi_idiv0>:
    5678:	4770      	bx	lr
    567a:	46c0      	nop			; (mov r8, r8)

0000567c <__libc_init_array>:
    567c:	4b0e      	ldr	r3, [pc, #56]	; (56b8 <__libc_init_array+0x3c>)
    567e:	b570      	push	{r4, r5, r6, lr}
    5680:	2500      	movs	r5, #0
    5682:	001e      	movs	r6, r3
    5684:	4c0d      	ldr	r4, [pc, #52]	; (56bc <__libc_init_array+0x40>)
    5686:	1ae4      	subs	r4, r4, r3
    5688:	10a4      	asrs	r4, r4, #2
    568a:	42a5      	cmp	r5, r4
    568c:	d004      	beq.n	5698 <__libc_init_array+0x1c>
    568e:	00ab      	lsls	r3, r5, #2
    5690:	58f3      	ldr	r3, [r6, r3]
    5692:	4798      	blx	r3
    5694:	3501      	adds	r5, #1
    5696:	e7f8      	b.n	568a <__libc_init_array+0xe>
    5698:	f000 f8a0 	bl	57dc <_init>
    569c:	4b08      	ldr	r3, [pc, #32]	; (56c0 <__libc_init_array+0x44>)
    569e:	2500      	movs	r5, #0
    56a0:	001e      	movs	r6, r3
    56a2:	4c08      	ldr	r4, [pc, #32]	; (56c4 <__libc_init_array+0x48>)
    56a4:	1ae4      	subs	r4, r4, r3
    56a6:	10a4      	asrs	r4, r4, #2
    56a8:	42a5      	cmp	r5, r4
    56aa:	d004      	beq.n	56b6 <__libc_init_array+0x3a>
    56ac:	00ab      	lsls	r3, r5, #2
    56ae:	58f3      	ldr	r3, [r6, r3]
    56b0:	4798      	blx	r3
    56b2:	3501      	adds	r5, #1
    56b4:	e7f8      	b.n	56a8 <__libc_init_array+0x2c>
    56b6:	bd70      	pop	{r4, r5, r6, pc}
    56b8:	000057e8 	.word	0x000057e8
    56bc:	000057e8 	.word	0x000057e8
    56c0:	000057e8 	.word	0x000057e8
    56c4:	000057ec 	.word	0x000057ec

000056c8 <memcpy>:
    56c8:	2300      	movs	r3, #0
    56ca:	b510      	push	{r4, lr}
    56cc:	429a      	cmp	r2, r3
    56ce:	d003      	beq.n	56d8 <memcpy+0x10>
    56d0:	5ccc      	ldrb	r4, [r1, r3]
    56d2:	54c4      	strb	r4, [r0, r3]
    56d4:	3301      	adds	r3, #1
    56d6:	e7f9      	b.n	56cc <memcpy+0x4>
    56d8:	bd10      	pop	{r4, pc}

000056da <memset>:
    56da:	0003      	movs	r3, r0
    56dc:	1882      	adds	r2, r0, r2
    56de:	4293      	cmp	r3, r2
    56e0:	d002      	beq.n	56e8 <memset+0xe>
    56e2:	7019      	strb	r1, [r3, #0]
    56e4:	3301      	adds	r3, #1
    56e6:	e7fa      	b.n	56de <memset+0x4>
    56e8:	4770      	bx	lr
	...

000056ec <tcc_modules>:
    56ec:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000056f8 <_tcc_gclk_ids>:
    56f8:	1a1a 001b                                   ....

000056fc <_tcc_apbcmasks>:
    56fc:	0100 0000 0200 0000 0400 0000               ............

00005708 <_tcc_maxs>:
    5708:	ffff 00ff ffff 00ff ffff 0000               ............

00005714 <_tcc_cc_nums>:
    5714:	0204 0002                                   ....

00005718 <_tcc_ow_nums>:
    5718:	0408 0002                                   ....

0000571c <_tcc_intflag>:
    571c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    572c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    573c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    574c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    575c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    576c:	31d6 0000 324e 0000 324e 0000 31f4 0000     .1..N2..N2...1..
    577c:	31ee 0000 31fa 0000 31dc 0000 3200 0000     .1...1...1...2..
    578c:	3234 0000 33f4 0000 3444 0000 3444 0000     42...3..D4..D4..
    579c:	3440 0000 33e6 0000 3406 0000 33d6 0000     @4...3...4...3..
    57ac:	3418 0000 342a 0000 49f6 0000 49d4 0000     .4..*4...I...I..
    57bc:	49b2 0000 4980 0000 494e 0000 4f54 5350     .I...I..NI..TOPS
    57cc:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....

000057dc <_init>:
    57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57e2:	bc08      	pop	{r3}
    57e4:	469e      	mov	lr, r3
    57e6:	4770      	bx	lr

000057e8 <__init_array_start>:
    57e8:	000000dd 	.word	0x000000dd

000057ec <_fini>:
    57ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57f2:	bc08      	pop	{r3}
    57f4:	469e      	mov	lr, r3
    57f6:	4770      	bx	lr

000057f8 <__fini_array_start>:
    57f8:	000000b5 	.word	0x000000b5
