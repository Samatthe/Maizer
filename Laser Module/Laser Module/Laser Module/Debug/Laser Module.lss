
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009164  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00009164  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a8  20000010  00009174  00018010  2**2
                  ALLOC
  3 .stack        00002000  200002b8  0000941c  00018010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018010  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037a19  00000000  00000000  00018093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039cf  00000000  00000000  0004faac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005090  00000000  00000000  0005347b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e18  00000000  00000000  0005850b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ca8  00000000  00000000  00059323  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009f79  00000000  00000000  00059fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000110b6  00000000  00000000  00063f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009191b  00000000  00000000  00074ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003220  00000000  00000000  00106918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200022b8 	.word	0x200022b8
       4:	00004da5 	.word	0x00004da5
       8:	00004e9d 	.word	0x00004e9d
       c:	00004e9d 	.word	0x00004e9d
	...
      2c:	00004e9d 	.word	0x00004e9d
	...
      38:	00004e9d 	.word	0x00004e9d
      3c:	00004e9d 	.word	0x00004e9d
      40:	00004e9d 	.word	0x00004e9d
      44:	00004e9d 	.word	0x00004e9d
      48:	00004e9d 	.word	0x00004e9d
      4c:	00000ad9 	.word	0x00000ad9
      50:	00000f7d 	.word	0x00000f7d
      54:	00004e9d 	.word	0x00004e9d
      58:	00004e9d 	.word	0x00004e9d
      5c:	00004e9d 	.word	0x00004e9d
      60:	00004e9d 	.word	0x00004e9d
      64:	00003f81 	.word	0x00003f81
      68:	00003f95 	.word	0x00003f95
      6c:	00003fa9 	.word	0x00003fa9
      70:	00003fbd 	.word	0x00003fbd
      74:	00003fd1 	.word	0x00003fd1
      78:	00003fe5 	.word	0x00003fe5
      7c:	00002cb1 	.word	0x00002cb1
      80:	00002cc5 	.word	0x00002cc5
      84:	00002cd9 	.word	0x00002cd9
      88:	00002d65 	.word	0x00002d65
      8c:	00002d79 	.word	0x00002d79
      90:	00002d8d 	.word	0x00002d8d
	...
      9c:	00004e9d 	.word	0x00004e9d
      a0:	00004e9d 	.word	0x00004e9d
      a4:	00004e9d 	.word	0x00004e9d
      a8:	00004e9d 	.word	0x00004e9d
      ac:	00004e9d 	.word	0x00004e9d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00009164 	.word	0x00009164

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00009164 	.word	0x00009164
     108:	20000014 	.word	0x20000014
     10c:	00009164 	.word	0x00009164
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
     196:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	2201      	movs	r2, #1
     19c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	70da      	strb	r2, [r3, #3]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)

000001ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	1c02      	adds	r2, r0, #0
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b8:	4b06      	ldr	r3, [pc, #24]	; (1d4 <system_interrupt_enable+0x28>)
     1ba:	1dfa      	adds	r2, r7, #7
     1bc:	7812      	ldrb	r2, [r2, #0]
     1be:	1c11      	adds	r1, r2, #0
     1c0:	221f      	movs	r2, #31
     1c2:	400a      	ands	r2, r1
     1c4:	2101      	movs	r1, #1
     1c6:	4091      	lsls	r1, r2
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	601a      	str	r2, [r3, #0]
}
     1cc:	46bd      	mov	sp, r7
     1ce:	b002      	add	sp, #8
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	e000e100 	.word	0xe000e100

000001d8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	1c02      	adds	r2, r0, #0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e4:	230f      	movs	r3, #15
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	0952      	lsrs	r2, r2, #5
     1ee:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f0:	230f      	movs	r3, #15
     1f2:	18fb      	adds	r3, r7, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d10c      	bne.n	214 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fa:	4b09      	ldr	r3, [pc, #36]	; (220 <_extint_get_eic_from_channel+0x48>)
     1fc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1fe:	230f      	movs	r3, #15
     200:	18fb      	adds	r3, r7, r3
     202:	781b      	ldrb	r3, [r3, #0]
     204:	009b      	lsls	r3, r3, #2
     206:	2210      	movs	r2, #16
     208:	4694      	mov	ip, r2
     20a:	44bc      	add	ip, r7
     20c:	4463      	add	r3, ip
     20e:	3b08      	subs	r3, #8
     210:	681b      	ldr	r3, [r3, #0]
     212:	e000      	b.n	216 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     214:	2300      	movs	r3, #0
	}
}
     216:	1c18      	adds	r0, r3, #0
     218:	46bd      	mov	sp, r7
     21a:	b004      	add	sp, #16
     21c:	bd80      	pop	{r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	40001800 	.word	0x40001800

00000224 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22a:	4b10      	ldr	r3, [pc, #64]	; (26c <extint_is_syncing+0x48>)
     22c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22e:	2300      	movs	r3, #0
     230:	607b      	str	r3, [r7, #4]
     232:	e012      	b.n	25a <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     234:	687b      	ldr	r3, [r7, #4]
     236:	009b      	lsls	r3, r3, #2
     238:	2208      	movs	r2, #8
     23a:	4694      	mov	ip, r2
     23c:	44bc      	add	ip, r7
     23e:	4463      	add	r3, ip
     240:	3b08      	subs	r3, #8
     242:	681b      	ldr	r3, [r3, #0]
     244:	785b      	ldrb	r3, [r3, #1]
     246:	b2db      	uxtb	r3, r3
     248:	b2db      	uxtb	r3, r3
     24a:	b25b      	sxtb	r3, r3
     24c:	2b00      	cmp	r3, #0
     24e:	da01      	bge.n	254 <extint_is_syncing+0x30>
			return true;
     250:	2301      	movs	r3, #1
     252:	e006      	b.n	262 <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     254:	687b      	ldr	r3, [r7, #4]
     256:	3301      	adds	r3, #1
     258:	607b      	str	r3, [r7, #4]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	2b00      	cmp	r3, #0
     25e:	d0e9      	beq.n	234 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     260:	2300      	movs	r3, #0
}
     262:	1c18      	adds	r0, r3, #0
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2c      	ldr	r3, [pc, #176]	; (328 <_system_extint_init+0xb8>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2000      	movs	r0, #0
     27c:	2140      	movs	r1, #64	; 0x40
     27e:	4b2b      	ldr	r3, [pc, #172]	; (32c <_system_extint_init+0xbc>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	1c3b      	adds	r3, r7, #0
     284:	1c18      	adds	r0, r3, #0
     286:	4b2a      	ldr	r3, [pc, #168]	; (330 <_system_extint_init+0xc0>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	1c3b      	adds	r3, r7, #0
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	1c3b      	adds	r3, r7, #0
     292:	2005      	movs	r0, #5
     294:	1c19      	adds	r1, r3, #0
     296:	4b27      	ldr	r3, [pc, #156]	; (334 <_system_extint_init+0xc4>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b26      	ldr	r3, [pc, #152]	; (338 <_system_extint_init+0xc8>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b16      	ldr	r3, [pc, #88]	; (33c <_system_extint_init+0xcc>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <_system_extint_init+0xd0>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <_system_extint_init+0xd4>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <_system_extint_init+0xd8>)
     320:	4798      	blx	r3
}
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}
     328:	40001800 	.word	0x40001800
     32c:	00000129 	.word	0x00000129
     330:	00000115 	.word	0x00000115
     334:	00004a31 	.word	0x00004a31
     338:	00004a75 	.word	0x00004a75
     33c:	00000225 	.word	0x00000225
     340:	2000008c 	.word	0x2000008c
     344:	000001ad 	.word	0x000001ad
     348:	0000034d 	.word	0x0000034d

0000034c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_extint_enable+0x58>)
     354:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     356:	2300      	movs	r3, #0
     358:	607b      	str	r3, [r7, #4]
     35a:	e018      	b.n	38e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	009b      	lsls	r3, r3, #2
     360:	2208      	movs	r2, #8
     362:	4694      	mov	ip, r2
     364:	44bc      	add	ip, r7
     366:	4463      	add	r3, ip
     368:	3b08      	subs	r3, #8
     36a:	681a      	ldr	r2, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	2108      	movs	r1, #8
     372:	468c      	mov	ip, r1
     374:	44bc      	add	ip, r7
     376:	4463      	add	r3, ip
     378:	3b08      	subs	r3, #8
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	b2db      	uxtb	r3, r3
     380:	2102      	movs	r1, #2
     382:	430b      	orrs	r3, r1
     384:	b2db      	uxtb	r3, r3
     386:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     388:	687b      	ldr	r3, [r7, #4]
     38a:	3301      	adds	r3, #1
     38c:	607b      	str	r3, [r7, #4]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2b00      	cmp	r3, #0
     392:	d0e3      	beq.n	35c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     394:	46c0      	nop			; (mov r8, r8)
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <_extint_enable+0x5c>)
     398:	4798      	blx	r3
     39a:	1e03      	subs	r3, r0, #0
     39c:	d1fb      	bne.n	396 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	40001800 	.word	0x40001800
     3a8:	00000225 	.word	0x00000225

000003ac <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2200      	movs	r2, #0
     3be:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2201      	movs	r2, #1
     3c4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2201      	movs	r2, #1
     3ca:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2202      	movs	r2, #2
     3d6:	72da      	strb	r2, [r3, #11]
}
     3d8:	46bd      	mov	sp, r7
     3da:	b002      	add	sp, #8
     3dc:	bd80      	pop	{r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)

000003e0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	b086      	sub	sp, #24
     3e4:	af00      	add	r7, sp, #0
     3e6:	1c02      	adds	r2, r0, #0
     3e8:	6039      	str	r1, [r7, #0]
     3ea:	1dfb      	adds	r3, r7, #7
     3ec:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3ee:	2308      	movs	r3, #8
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	4b36      	ldr	r3, [pc, #216]	; (4d0 <extint_chan_set_config+0xf0>)
     3f6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	b2da      	uxtb	r2, r3
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	2308      	movs	r3, #8
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     40c:	683b      	ldr	r3, [r7, #0]
     40e:	7a1a      	ldrb	r2, [r3, #8]
     410:	2308      	movs	r3, #8
     412:	18fb      	adds	r3, r7, r3
     414:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     416:	683b      	ldr	r3, [r7, #0]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	b2da      	uxtb	r2, r3
     41c:	2308      	movs	r3, #8
     41e:	18fb      	adds	r3, r7, r3
     420:	1c10      	adds	r0, r2, #0
     422:	1c19      	adds	r1, r3, #0
     424:	4b2b      	ldr	r3, [pc, #172]	; (4d4 <extint_chan_set_config+0xf4>)
     426:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     428:	1dfb      	adds	r3, r7, #7
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	1c18      	adds	r0, r3, #0
     42e:	4b2a      	ldr	r3, [pc, #168]	; (4d8 <extint_chan_set_config+0xf8>)
     430:	4798      	blx	r3
     432:	1c03      	adds	r3, r0, #0
     434:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     436:	1dfb      	adds	r3, r7, #7
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2207      	movs	r2, #7
     43c:	4013      	ands	r3, r2
     43e:	009b      	lsls	r3, r3, #2
     440:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     442:	683b      	ldr	r3, [r7, #0]
     444:	7adb      	ldrb	r3, [r3, #11]
     446:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     448:	683b      	ldr	r3, [r7, #0]
     44a:	7a9b      	ldrb	r3, [r3, #10]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     450:	697b      	ldr	r3, [r7, #20]
     452:	2208      	movs	r2, #8
     454:	4313      	orrs	r3, r2
     456:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     458:	1dfb      	adds	r3, r7, #7
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	08db      	lsrs	r3, r3, #3
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
     462:	1dfb      	adds	r3, r7, #7
     464:	781b      	ldrb	r3, [r3, #0]
     466:	08db      	lsrs	r3, r3, #3
     468:	b2db      	uxtb	r3, r3
     46a:	1c1a      	adds	r2, r3, #0
     46c:	693b      	ldr	r3, [r7, #16]
     46e:	3206      	adds	r2, #6
     470:	0092      	lsls	r2, r2, #2
     472:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     474:	68fa      	ldr	r2, [r7, #12]
     476:	210f      	movs	r1, #15
     478:	4091      	lsls	r1, r2
     47a:	1c0a      	adds	r2, r1, #0
     47c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     480:	68fb      	ldr	r3, [r7, #12]
     482:	6979      	ldr	r1, [r7, #20]
     484:	4099      	lsls	r1, r3
     486:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	431a      	orrs	r2, r3
     48a:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	1d82      	adds	r2, r0, #6
     490:	0092      	lsls	r2, r2, #2
     492:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     494:	683b      	ldr	r3, [r7, #0]
     496:	7a5b      	ldrb	r3, [r3, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d00a      	beq.n	4b2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     49c:	693b      	ldr	r3, [r7, #16]
     49e:	695a      	ldr	r2, [r3, #20]
     4a0:	1dfb      	adds	r3, r7, #7
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	4099      	lsls	r1, r3
     4a8:	1c0b      	adds	r3, r1, #0
     4aa:	431a      	orrs	r2, r3
     4ac:	693b      	ldr	r3, [r7, #16]
     4ae:	615a      	str	r2, [r3, #20]
     4b0:	e00a      	b.n	4c8 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4b2:	693b      	ldr	r3, [r7, #16]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	1dfa      	adds	r2, r7, #7
     4b8:	7812      	ldrb	r2, [r2, #0]
     4ba:	2101      	movs	r1, #1
     4bc:	4091      	lsls	r1, r2
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	43d2      	mvns	r2, r2
     4c2:	401a      	ands	r2, r3
     4c4:	693b      	ldr	r3, [r7, #16]
     4c6:	615a      	str	r2, [r3, #20]
	}
}
     4c8:	46bd      	mov	sp, r7
     4ca:	b006      	add	sp, #24
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000185 	.word	0x00000185
     4d4:	00004d1d 	.word	0x00004d1d
     4d8:	000001d9 	.word	0x000001d9

000004dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	2200      	movs	r2, #0
     4e8:	701a      	strb	r2, [r3, #0]
}
     4ea:	46bd      	mov	sp, r7
     4ec:	b002      	add	sp, #8
     4ee:	bd80      	pop	{r7, pc}

000004f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	1c02      	adds	r2, r0, #0
     4f8:	6039      	str	r1, [r7, #0]
     4fa:	1dfb      	adds	r3, r7, #7
     4fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     4fe:	1dfb      	adds	r3, r7, #7
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b01      	cmp	r3, #1
     504:	d00a      	beq.n	51c <system_apb_clock_set_mask+0x2c>
     506:	2b02      	cmp	r3, #2
     508:	d00f      	beq.n	52a <system_apb_clock_set_mask+0x3a>
     50a:	2b00      	cmp	r3, #0
     50c:	d114      	bne.n	538 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <system_apb_clock_set_mask+0x58>)
     510:	4a0d      	ldr	r2, [pc, #52]	; (548 <system_apb_clock_set_mask+0x58>)
     512:	6991      	ldr	r1, [r2, #24]
     514:	683a      	ldr	r2, [r7, #0]
     516:	430a      	orrs	r2, r1
     518:	619a      	str	r2, [r3, #24]
			break;
     51a:	e00f      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     51e:	4a0a      	ldr	r2, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     520:	69d1      	ldr	r1, [r2, #28]
     522:	683a      	ldr	r2, [r7, #0]
     524:	430a      	orrs	r2, r1
     526:	61da      	str	r2, [r3, #28]
			break;
     528:	e008      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <system_apb_clock_set_mask+0x58>)
     52c:	4a06      	ldr	r2, [pc, #24]	; (548 <system_apb_clock_set_mask+0x58>)
     52e:	6a11      	ldr	r1, [r2, #32]
     530:	683a      	ldr	r2, [r7, #0]
     532:	430a      	orrs	r2, r1
     534:	621a      	str	r2, [r3, #32]
			break;
     536:	e001      	b.n	53c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     538:	2317      	movs	r3, #23
     53a:	e000      	b.n	53e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     53c:	2300      	movs	r3, #0
}
     53e:	1c18      	adds	r0, r3, #0
     540:	46bd      	mov	sp, r7
     542:	b002      	add	sp, #8
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	40000400 	.word	0x40000400

0000054c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	1c02      	adds	r2, r0, #0
     554:	1dfb      	adds	r3, r7, #7
     556:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <system_interrupt_enable+0x28>)
     55a:	1dfa      	adds	r2, r7, #7
     55c:	7812      	ldrb	r2, [r2, #0]
     55e:	1c11      	adds	r1, r2, #0
     560:	221f      	movs	r2, #31
     562:	400a      	ands	r2, r1
     564:	2101      	movs	r1, #1
     566:	4091      	lsls	r1, r2
     568:	1c0a      	adds	r2, r1, #0
     56a:	601a      	str	r2, [r3, #0]
}
     56c:	46bd      	mov	sp, r7
     56e:	b002      	add	sp, #8
     570:	bd80      	pop	{r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	e000e100 	.word	0xe000e100

00000578 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	1c02      	adds	r2, r0, #0
     580:	1dfb      	adds	r3, r7, #7
     582:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     584:	4a07      	ldr	r2, [pc, #28]	; (5a4 <system_interrupt_disable+0x2c>)
     586:	1dfb      	adds	r3, r7, #7
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	1c19      	adds	r1, r3, #0
     58c:	231f      	movs	r3, #31
     58e:	400b      	ands	r3, r1
     590:	2101      	movs	r1, #1
     592:	4099      	lsls	r1, r3
     594:	1c0b      	adds	r3, r1, #0
     596:	1c19      	adds	r1, r3, #0
     598:	2380      	movs	r3, #128	; 0x80
     59a:	50d1      	str	r1, [r2, r3]
}
     59c:	46bd      	mov	sp, r7
     59e:	b002      	add	sp, #8
     5a0:	bd80      	pop	{r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	e000e100 	.word	0xe000e100

000005a8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b084      	sub	sp, #16
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	7a9b      	ldrb	r3, [r3, #10]
     5ba:	b2db      	uxtb	r3, r3
     5bc:	b2db      	uxtb	r3, r3
     5be:	b25b      	sxtb	r3, r3
     5c0:	2b00      	cmp	r3, #0
     5c2:	da01      	bge.n	5c8 <rtc_count_is_syncing+0x20>
                return true;
     5c4:	2301      	movs	r3, #1
     5c6:	e000      	b.n	5ca <rtc_count_is_syncing+0x22>
        }

        return false;
     5c8:	2300      	movs	r3, #0
}
     5ca:	1c18      	adds	r0, r3, #0
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5e2:	2003      	movs	r0, #3
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <rtc_count_enable+0x38>)
     5e6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	1c18      	adds	r0, r3, #0
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <rtc_count_enable+0x3c>)
     5f0:	4798      	blx	r3
     5f2:	1e03      	subs	r3, r0, #0
     5f4:	d1f9      	bne.n	5ea <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5f6:	68fb      	ldr	r3, [r7, #12]
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	b29b      	uxth	r3, r3
     5fc:	2202      	movs	r2, #2
     5fe:	4313      	orrs	r3, r2
     600:	b29a      	uxth	r2, r3
     602:	68fb      	ldr	r3, [r7, #12]
     604:	801a      	strh	r2, [r3, #0]
}
     606:	46bd      	mov	sp, r7
     608:	b004      	add	sp, #16
     60a:	bd80      	pop	{r7, pc}
     60c:	0000054d 	.word	0x0000054d
     610:	000005a9 	.word	0x000005a9

00000614 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     614:	b580      	push	{r7, lr}
     616:	b084      	sub	sp, #16
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	681b      	ldr	r3, [r3, #0]
     620:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     622:	2003      	movs	r0, #3
     624:	4b09      	ldr	r3, [pc, #36]	; (64c <rtc_count_disable+0x38>)
     626:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	1c18      	adds	r0, r3, #0
     62e:	4b08      	ldr	r3, [pc, #32]	; (650 <rtc_count_disable+0x3c>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     636:	68fb      	ldr	r3, [r7, #12]
     638:	881b      	ldrh	r3, [r3, #0]
     63a:	b29b      	uxth	r3, r3
     63c:	2202      	movs	r2, #2
     63e:	4393      	bics	r3, r2
     640:	b29a      	uxth	r2, r3
     642:	68fb      	ldr	r3, [r7, #12]
     644:	801a      	strh	r2, [r3, #0]
}
     646:	46bd      	mov	sp, r7
     648:	b004      	add	sp, #16
     64a:	bd80      	pop	{r7, pc}
     64c:	00000579 	.word	0x00000579
     650:	000005a9 	.word	0x000005a9

00000654 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     662:	687b      	ldr	r3, [r7, #4]
     664:	1c18      	adds	r0, r3, #0
     666:	4b0d      	ldr	r3, [pc, #52]	; (69c <rtc_count_reset+0x48>)
     668:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2200      	movs	r2, #0
     66e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	1c18      	adds	r0, r3, #0
     67c:	4b08      	ldr	r3, [pc, #32]	; (6a0 <rtc_count_reset+0x4c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	881b      	ldrh	r3, [r3, #0]
     688:	b29b      	uxth	r3, r3
     68a:	2201      	movs	r2, #1
     68c:	4313      	orrs	r3, r2
     68e:	b29a      	uxth	r2, r3
     690:	68fb      	ldr	r3, [r7, #12]
     692:	801a      	strh	r2, [r3, #0]
}
     694:	46bd      	mov	sp, r7
     696:	b004      	add	sp, #16
     698:	bd80      	pop	{r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000615 	.word	0x00000615
     6a0:	000005a9 	.word	0x000005a9

000006a4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6a4:	b580      	push	{r7, lr}
     6a6:	b084      	sub	sp, #16
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
     6ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	881a      	ldrh	r2, [r3, #0]
     6b8:	68bb      	ldr	r3, [r7, #8]
     6ba:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	789b      	ldrb	r3, [r3, #2]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d03c      	beq.n	73e <_rtc_count_set_config+0x9a>
     6c4:	2b01      	cmp	r3, #1
     6c6:	d000      	beq.n	6ca <_rtc_count_set_config+0x26>
     6c8:	e070      	b.n	7ac <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	b29a      	uxth	r2, r3
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	78db      	ldrb	r3, [r3, #3]
     6d8:	2b00      	cmp	r3, #0
     6da:	d007      	beq.n	6ec <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6dc:	68bb      	ldr	r3, [r7, #8]
     6de:	881b      	ldrh	r3, [r3, #0]
     6e0:	b29b      	uxth	r3, r3
     6e2:	2280      	movs	r2, #128	; 0x80
     6e4:	4313      	orrs	r3, r2
     6e6:	b29a      	uxth	r2, r3
     6e8:	68bb      	ldr	r3, [r7, #8]
     6ea:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6ec:	230f      	movs	r3, #15
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	2200      	movs	r2, #0
     6f2:	701a      	strb	r2, [r3, #0]
     6f4:	e01d      	b.n	732 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	1c18      	adds	r0, r3, #0
     6fc:	4b35      	ldr	r3, [pc, #212]	; (7d4 <_rtc_count_set_config+0x130>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     704:	230f      	movs	r3, #15
     706:	18fb      	adds	r3, r7, r3
     708:	781a      	ldrb	r2, [r3, #0]
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	3202      	adds	r2, #2
     70e:	0092      	lsls	r2, r2, #2
     710:	58d2      	ldr	r2, [r2, r3]
     712:	6879      	ldr	r1, [r7, #4]
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	1c08      	adds	r0, r1, #0
     71c:	1c11      	adds	r1, r2, #0
     71e:	1c1a      	adds	r2, r3, #0
     720:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <_rtc_count_set_config+0x134>)
     722:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     724:	230f      	movs	r3, #15
     726:	18fb      	adds	r3, r7, r3
     728:	781a      	ldrb	r2, [r3, #0]
     72a:	230f      	movs	r3, #15
     72c:	18fb      	adds	r3, r7, r3
     72e:	3201      	adds	r2, #1
     730:	701a      	strb	r2, [r3, #0]
     732:	230f      	movs	r3, #15
     734:	18fb      	adds	r3, r7, r3
     736:	781b      	ldrb	r3, [r3, #0]
     738:	2b00      	cmp	r3, #0
     73a:	d0dc      	beq.n	6f6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     73c:	e038      	b.n	7b0 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     73e:	68bb      	ldr	r3, [r7, #8]
     740:	881b      	ldrh	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	2204      	movs	r2, #4
     746:	4313      	orrs	r3, r2
     748:	b29a      	uxth	r2, r3
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     74e:	683b      	ldr	r3, [r7, #0]
     750:	78db      	ldrb	r3, [r3, #3]
     752:	2b00      	cmp	r3, #0
     754:	d001      	beq.n	75a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     756:	2317      	movs	r3, #23
     758:	e038      	b.n	7cc <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     75a:	230e      	movs	r3, #14
     75c:	18fb      	adds	r3, r7, r3
     75e:	2200      	movs	r2, #0
     760:	701a      	strb	r2, [r3, #0]
     762:	e01d      	b.n	7a0 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     764:	46c0      	nop			; (mov r8, r8)
     766:	687b      	ldr	r3, [r7, #4]
     768:	1c18      	adds	r0, r3, #0
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <_rtc_count_set_config+0x130>)
     76c:	4798      	blx	r3
     76e:	1e03      	subs	r3, r0, #0
     770:	d1f9      	bne.n	766 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     772:	230e      	movs	r3, #14
     774:	18fb      	adds	r3, r7, r3
     776:	781a      	ldrb	r2, [r3, #0]
     778:	683b      	ldr	r3, [r7, #0]
     77a:	3202      	adds	r2, #2
     77c:	0092      	lsls	r2, r2, #2
     77e:	58d2      	ldr	r2, [r2, r3]
     780:	6879      	ldr	r1, [r7, #4]
     782:	230e      	movs	r3, #14
     784:	18fb      	adds	r3, r7, r3
     786:	781b      	ldrb	r3, [r3, #0]
     788:	1c08      	adds	r0, r1, #0
     78a:	1c11      	adds	r1, r2, #0
     78c:	1c1a      	adds	r2, r3, #0
     78e:	4b12      	ldr	r3, [pc, #72]	; (7d8 <_rtc_count_set_config+0x134>)
     790:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     792:	230e      	movs	r3, #14
     794:	18fb      	adds	r3, r7, r3
     796:	781a      	ldrb	r2, [r3, #0]
     798:	230e      	movs	r3, #14
     79a:	18fb      	adds	r3, r7, r3
     79c:	3201      	adds	r2, #1
     79e:	701a      	strb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d9dc      	bls.n	764 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7aa:	e001      	b.n	7b0 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7ac:	2317      	movs	r3, #23
     7ae:	e00d      	b.n	7cc <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	791b      	ldrb	r3, [r3, #4]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d008      	beq.n	7ca <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	885b      	ldrh	r3, [r3, #2]
     7bc:	b29b      	uxth	r3, r3
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	01d2      	lsls	r2, r2, #7
     7c2:	4313      	orrs	r3, r2
     7c4:	b29a      	uxth	r2, r3
     7c6:	68bb      	ldr	r3, [r7, #8]
     7c8:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7ca:	2300      	movs	r3, #0
}
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	46bd      	mov	sp, r7
     7d0:	b004      	add	sp, #16
     7d2:	bd80      	pop	{r7, pc}
     7d4:	000005a9 	.word	0x000005a9
     7d8:	00000935 	.word	0x00000935

000007dc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b086      	sub	sp, #24
     7e0:	af00      	add	r7, sp, #0
     7e2:	60f8      	str	r0, [r7, #12]
     7e4:	60b9      	str	r1, [r7, #8]
     7e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	68ba      	ldr	r2, [r7, #8]
     7ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7ee:	2000      	movs	r0, #0
     7f0:	2120      	movs	r1, #32
     7f2:	4b17      	ldr	r3, [pc, #92]	; (850 <rtc_count_init+0x74>)
     7f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7f6:	2314      	movs	r3, #20
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	1c18      	adds	r0, r3, #0
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <rtc_count_init+0x78>)
     7fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     800:	2314      	movs	r3, #20
     802:	18fb      	adds	r3, r7, r3
     804:	2202      	movs	r2, #2
     806:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2004      	movs	r0, #4
     80e:	1c19      	adds	r1, r3, #0
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <rtc_count_init+0x7c>)
     812:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     814:	2004      	movs	r0, #4
     816:	4b11      	ldr	r3, [pc, #68]	; (85c <rtc_count_init+0x80>)
     818:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	1c18      	adds	r0, r3, #0
     81e:	4b10      	ldr	r3, [pc, #64]	; (860 <rtc_count_init+0x84>)
     820:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     822:	687b      	ldr	r3, [r7, #4]
     824:	789a      	ldrb	r2, [r3, #2]
     826:	68fb      	ldr	r3, [r7, #12]
     828:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	791a      	ldrb	r2, [r3, #4]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     832:	4b0c      	ldr	r3, [pc, #48]	; (864 <rtc_count_init+0x88>)
     834:	68fa      	ldr	r2, [r7, #12]
     836:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     838:	68fa      	ldr	r2, [r7, #12]
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	1c10      	adds	r0, r2, #0
     83e:	1c19      	adds	r1, r3, #0
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <rtc_count_init+0x8c>)
     842:	4798      	blx	r3
     844:	1c03      	adds	r3, r0, #0
}
     846:	1c18      	adds	r0, r3, #0
     848:	46bd      	mov	sp, r7
     84a:	b006      	add	sp, #24
     84c:	bd80      	pop	{r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	000004f1 	.word	0x000004f1
     854:	000004dd 	.word	0x000004dd
     858:	00004a31 	.word	0x00004a31
     85c:	00004a75 	.word	0x00004a75
     860:	00000655 	.word	0x00000655
     864:	200000cc 	.word	0x200000cc
     868:	000006a5 	.word	0x000006a5

0000086c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     876:	687b      	ldr	r3, [r7, #4]
     878:	681b      	ldr	r3, [r3, #0]
     87a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	1c18      	adds	r0, r3, #0
     882:	4b10      	ldr	r3, [pc, #64]	; (8c4 <rtc_count_set_count+0x58>)
     884:	4798      	blx	r3
     886:	1e03      	subs	r3, r0, #0
     888:	d1f9      	bne.n	87e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	2b00      	cmp	r3, #0
     890:	d005      	beq.n	89e <rtc_count_set_count+0x32>
     892:	2b01      	cmp	r3, #1
     894:	d10e      	bne.n	8b4 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     896:	68fb      	ldr	r3, [r7, #12]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	611a      	str	r2, [r3, #16]

			break;
     89c:	e00c      	b.n	8b8 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	4a09      	ldr	r2, [pc, #36]	; (8c8 <rtc_count_set_count+0x5c>)
     8a2:	4293      	cmp	r3, r2
     8a4:	d901      	bls.n	8aa <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8a6:	2317      	movs	r3, #23
     8a8:	e007      	b.n	8ba <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8aa:	683b      	ldr	r3, [r7, #0]
     8ac:	b29a      	uxth	r2, r3
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	821a      	strh	r2, [r3, #16]

			break;
     8b2:	e001      	b.n	8b8 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8b4:	2317      	movs	r3, #23
     8b6:	e000      	b.n	8ba <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	1c18      	adds	r0, r3, #0
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	000005a9 	.word	0x000005a9
     8c8:	0000ffff 	.word	0x0000ffff

000008cc <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	795b      	ldrb	r3, [r3, #5]
     8de:	2201      	movs	r2, #1
     8e0:	4053      	eors	r3, r2
     8e2:	b2db      	uxtb	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d009      	beq.n	8fc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	4a10      	ldr	r2, [pc, #64]	; (92c <rtc_count_get_count+0x60>)
     8ec:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	1c18      	adds	r0, r3, #0
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <rtc_count_get_count+0x64>)
     8f6:	4798      	blx	r3
     8f8:	1e03      	subs	r3, r0, #0
     8fa:	d1f9      	bne.n	8f0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	791b      	ldrb	r3, [r3, #4]
     900:	2b00      	cmp	r3, #0
     902:	d005      	beq.n	910 <rtc_count_get_count+0x44>
     904:	2b01      	cmp	r3, #1
     906:	d108      	bne.n	91a <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     908:	68bb      	ldr	r3, [r7, #8]
     90a:	691b      	ldr	r3, [r3, #16]
     90c:	60fb      	str	r3, [r7, #12]

			break;
     90e:	e007      	b.n	920 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	8a1b      	ldrh	r3, [r3, #16]
     914:	b29b      	uxth	r3, r3
     916:	60fb      	str	r3, [r7, #12]

			break;
     918:	e002      	b.n	920 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     91a:	2300      	movs	r3, #0
     91c:	60fb      	str	r3, [r7, #12]
			break;
     91e:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     920:	68fb      	ldr	r3, [r7, #12]
}
     922:	1c18      	adds	r0, r3, #0
     924:	46bd      	mov	sp, r7
     926:	b004      	add	sp, #16
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	ffff8000 	.word	0xffff8000
     930:	000005a9 	.word	0x000005a9

00000934 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     934:	b580      	push	{r7, lr}
     936:	b086      	sub	sp, #24
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	1dfb      	adds	r3, r7, #7
     940:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     942:	68fb      	ldr	r3, [r7, #12]
     944:	681b      	ldr	r3, [r3, #0]
     946:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     948:	46c0      	nop			; (mov r8, r8)
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	1c18      	adds	r0, r3, #0
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <rtc_count_set_compare+0x84>)
     950:	4798      	blx	r3
     952:	1e03      	subs	r3, r0, #0
     954:	d1f9      	bne.n	94a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     956:	68fb      	ldr	r3, [r7, #12]
     958:	791b      	ldrb	r3, [r3, #4]
     95a:	2b00      	cmp	r3, #0
     95c:	d00f      	beq.n	97e <rtc_count_set_compare+0x4a>
     95e:	2b01      	cmp	r3, #1
     960:	d122      	bne.n	9a8 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b01      	cmp	r3, #1
     968:	d901      	bls.n	96e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     96a:	2317      	movs	r3, #23
     96c:	e01f      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     96e:	1dfb      	adds	r3, r7, #7
     970:	781a      	ldrb	r2, [r3, #0]
     972:	697b      	ldr	r3, [r7, #20]
     974:	3206      	adds	r2, #6
     976:	0092      	lsls	r2, r2, #2
     978:	68b9      	ldr	r1, [r7, #8]
     97a:	50d1      	str	r1, [r2, r3]

			break;
     97c:	e016      	b.n	9ac <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     97e:	1dfb      	adds	r3, r7, #7
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b02      	cmp	r3, #2
     984:	d901      	bls.n	98a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     986:	2317      	movs	r3, #23
     988:	e011      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	4a0b      	ldr	r2, [pc, #44]	; (9bc <rtc_count_set_compare+0x88>)
     98e:	4293      	cmp	r3, r2
     990:	d901      	bls.n	996 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e00b      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     996:	1dfb      	adds	r3, r7, #7
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	68bb      	ldr	r3, [r7, #8]
     99c:	b299      	uxth	r1, r3
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	320c      	adds	r2, #12
     9a2:	0052      	lsls	r2, r2, #1
     9a4:	52d1      	strh	r1, [r2, r3]

			break;
     9a6:	e001      	b.n	9ac <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9a8:	231a      	movs	r3, #26
     9aa:	e000      	b.n	9ae <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9ac:	2300      	movs	r3, #0
}
     9ae:	1c18      	adds	r0, r3, #0
     9b0:	46bd      	mov	sp, r7
     9b2:	b006      	add	sp, #24
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	000005a9 	.word	0x000005a9
     9bc:	0000ffff 	.word	0x0000ffff

000009c0 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b084      	sub	sp, #16
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
     9c8:	1c0a      	adds	r2, r1, #0
     9ca:	1cbb      	adds	r3, r7, #2
     9cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	791b      	ldrb	r3, [r3, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d001      	beq.n	9e0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9dc:	2315      	movs	r3, #21
     9de:	e00b      	b.n	9f8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e0:	46c0      	nop			; (mov r8, r8)
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <rtc_count_set_period+0x40>)
     9e8:	4798      	blx	r3
     9ea:	1e03      	subs	r3, r0, #0
     9ec:	d1f9      	bne.n	9e2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	1cba      	adds	r2, r7, #2
     9f2:	8812      	ldrh	r2, [r2, #0]
     9f4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9f6:	2300      	movs	r3, #0
}
     9f8:	1c18      	adds	r0, r3, #0
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	000005a9 	.word	0x000005a9

00000a04 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a04:	b580      	push	{r7, lr}
     a06:	b086      	sub	sp, #24
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a0c:	4b31      	ldr	r3, [pc, #196]	; (ad4 <_rtc_interrupt_handler+0xd0>)
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	0092      	lsls	r2, r2, #2
     a12:	58d3      	ldr	r3, [r2, r3]
     a14:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a16:	697b      	ldr	r3, [r7, #20]
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a1c:	230e      	movs	r3, #14
     a1e:	18fb      	adds	r3, r7, r3
     a20:	697a      	ldr	r2, [r7, #20]
     a22:	8ad2      	ldrh	r2, [r2, #22]
     a24:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a26:	697b      	ldr	r3, [r7, #20]
     a28:	8a9b      	ldrh	r3, [r3, #20]
     a2a:	b29a      	uxth	r2, r3
     a2c:	230e      	movs	r3, #14
     a2e:	18fb      	adds	r3, r7, r3
     a30:	210e      	movs	r1, #14
     a32:	1879      	adds	r1, r7, r1
     a34:	8809      	ldrh	r1, [r1, #0]
     a36:	400a      	ands	r2, r1
     a38:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a3a:	693b      	ldr	r3, [r7, #16]
     a3c:	7a1b      	ldrb	r3, [r3, #8]
     a3e:	b2da      	uxtb	r2, r3
     a40:	230c      	movs	r3, #12
     a42:	18fb      	adds	r3, r7, r3
     a44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a46:	693b      	ldr	r3, [r7, #16]
     a48:	79db      	ldrb	r3, [r3, #7]
     a4a:	b2db      	uxtb	r3, r3
     a4c:	b29a      	uxth	r2, r3
     a4e:	230c      	movs	r3, #12
     a50:	18fb      	adds	r3, r7, r3
     a52:	210c      	movs	r1, #12
     a54:	1879      	adds	r1, r7, r1
     a56:	8809      	ldrh	r1, [r1, #0]
     a58:	400a      	ands	r2, r1
     a5a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a5c:	230c      	movs	r3, #12
     a5e:	18fb      	adds	r3, r7, r3
     a60:	881b      	ldrh	r3, [r3, #0]
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	4013      	ands	r3, r2
     a66:	d00c      	beq.n	a82 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a68:	230e      	movs	r3, #14
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	881b      	ldrh	r3, [r3, #0]
     a6e:	2204      	movs	r2, #4
     a70:	4013      	ands	r3, r2
     a72:	d002      	beq.n	a7a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a74:	697b      	ldr	r3, [r7, #20]
     a76:	691b      	ldr	r3, [r3, #16]
     a78:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a7a:	693b      	ldr	r3, [r7, #16]
     a7c:	2280      	movs	r2, #128	; 0x80
     a7e:	721a      	strb	r2, [r3, #8]
     a80:	e024      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a82:	230c      	movs	r3, #12
     a84:	18fb      	adds	r3, r7, r3
     a86:	881b      	ldrh	r3, [r3, #0]
     a88:	2201      	movs	r2, #1
     a8a:	4013      	ands	r3, r2
     a8c:	d00c      	beq.n	aa8 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a8e:	230e      	movs	r3, #14
     a90:	18fb      	adds	r3, r7, r3
     a92:	881b      	ldrh	r3, [r3, #0]
     a94:	2201      	movs	r2, #1
     a96:	4013      	ands	r3, r2
     a98:	d002      	beq.n	aa0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     a9a:	697b      	ldr	r3, [r7, #20]
     a9c:	689b      	ldr	r3, [r3, #8]
     a9e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa0:	693b      	ldr	r3, [r7, #16]
     aa2:	2201      	movs	r2, #1
     aa4:	721a      	strb	r2, [r3, #8]
     aa6:	e011      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     aa8:	230c      	movs	r3, #12
     aaa:	18fb      	adds	r3, r7, r3
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	2202      	movs	r2, #2
     ab0:	4013      	ands	r3, r2
     ab2:	d00b      	beq.n	acc <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     ab4:	230e      	movs	r3, #14
     ab6:	18fb      	adds	r3, r7, r3
     ab8:	881b      	ldrh	r3, [r3, #0]
     aba:	2202      	movs	r2, #2
     abc:	4013      	ands	r3, r2
     abe:	d002      	beq.n	ac6 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	68db      	ldr	r3, [r3, #12]
     ac4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ac6:	693b      	ldr	r3, [r7, #16]
     ac8:	2202      	movs	r2, #2
     aca:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     acc:	46bd      	mov	sp, r7
     ace:	b006      	add	sp, #24
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	200000cc 	.word	0x200000cc

00000ad8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     adc:	2000      	movs	r0, #0
     ade:	4b02      	ldr	r3, [pc, #8]	; (ae8 <RTC_Handler+0x10>)
     ae0:	4798      	blx	r3
}
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000a05 	.word	0x00000a05

00000aec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     aec:	b580      	push	{r7, lr}
     aee:	b084      	sub	sp, #16
     af0:	af00      	add	r7, sp, #0
     af2:	1c02      	adds	r2, r0, #0
     af4:	1dfb      	adds	r3, r7, #7
     af6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     af8:	230f      	movs	r3, #15
     afa:	18fb      	adds	r3, r7, r3
     afc:	1dfa      	adds	r2, r7, #7
     afe:	7812      	ldrb	r2, [r2, #0]
     b00:	09d2      	lsrs	r2, r2, #7
     b02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     b04:	230e      	movs	r3, #14
     b06:	18fb      	adds	r3, r7, r3
     b08:	1dfa      	adds	r2, r7, #7
     b0a:	7812      	ldrb	r2, [r2, #0]
     b0c:	0952      	lsrs	r2, r2, #5
     b0e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     b10:	4b0d      	ldr	r3, [pc, #52]	; (b48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     b12:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     b14:	230f      	movs	r3, #15
     b16:	18fb      	adds	r3, r7, r3
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d10f      	bne.n	b3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     b1e:	230f      	movs	r3, #15
     b20:	18fb      	adds	r3, r7, r3
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	009b      	lsls	r3, r3, #2
     b26:	2210      	movs	r2, #16
     b28:	4694      	mov	ip, r2
     b2a:	44bc      	add	ip, r7
     b2c:	4463      	add	r3, ip
     b2e:	3b08      	subs	r3, #8
     b30:	681a      	ldr	r2, [r3, #0]
     b32:	230e      	movs	r3, #14
     b34:	18fb      	adds	r3, r7, r3
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	01db      	lsls	r3, r3, #7
     b3a:	18d3      	adds	r3, r2, r3
     b3c:	e000      	b.n	b40 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     b3e:	2300      	movs	r3, #0
	}
}
     b40:	1c18      	adds	r0, r3, #0
     b42:	46bd      	mov	sp, r7
     b44:	b004      	add	sp, #16
     b46:	bd80      	pop	{r7, pc}
     b48:	41004400 	.word	0x41004400

00000b4c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b082      	sub	sp, #8
     b50:	af00      	add	r7, sp, #0
     b52:	1c02      	adds	r2, r0, #0
     b54:	1dfb      	adds	r3, r7, #7
     b56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     b58:	1dfb      	adds	r3, r7, #7
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	1c18      	adds	r0, r3, #0
     b5e:	4b03      	ldr	r3, [pc, #12]	; (b6c <port_get_group_from_gpio_pin+0x20>)
     b60:	4798      	blx	r3
     b62:	1c03      	adds	r3, r0, #0
}
     b64:	1c18      	adds	r0, r3, #0
     b66:	46bd      	mov	sp, r7
     b68:	b002      	add	sp, #8
     b6a:	bd80      	pop	{r7, pc}
     b6c:	00000aed 	.word	0x00000aed

00000b70 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     b70:	b580      	push	{r7, lr}
     b72:	b084      	sub	sp, #16
     b74:	af00      	add	r7, sp, #0
     b76:	1c02      	adds	r2, r0, #0
     b78:	1dfb      	adds	r3, r7, #7
     b7a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     b7c:	1dfb      	adds	r3, r7, #7
     b7e:	781b      	ldrb	r3, [r3, #0]
     b80:	1c18      	adds	r0, r3, #0
     b82:	4b0b      	ldr	r3, [pc, #44]	; (bb0 <port_pin_get_input_level+0x40>)
     b84:	4798      	blx	r3
     b86:	1c03      	adds	r3, r0, #0
     b88:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b8a:	1dfb      	adds	r3, r7, #7
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	221f      	movs	r2, #31
     b90:	4013      	ands	r3, r2
     b92:	2201      	movs	r2, #1
     b94:	409a      	lsls	r2, r3
     b96:	1c13      	adds	r3, r2, #0
     b98:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	6a1b      	ldr	r3, [r3, #32]
     b9e:	68ba      	ldr	r2, [r7, #8]
     ba0:	4013      	ands	r3, r2
     ba2:	1e5a      	subs	r2, r3, #1
     ba4:	4193      	sbcs	r3, r2
     ba6:	b2db      	uxtb	r3, r3
}
     ba8:	1c18      	adds	r0, r3, #0
     baa:	46bd      	mov	sp, r7
     bac:	b004      	add	sp, #16
     bae:	bd80      	pop	{r7, pc}
     bb0:	00000b4d 	.word	0x00000b4d

00000bb4 <init_wheel>:
#include "wheel.h"
#include <asf.h>
/********************************************************************/

//Init all values to 0
void init_wheel(){
     bb4:	b580      	push	{r7, lr}
     bb6:	af00      	add	r7, sp, #0
	wheel.up_val = 0;
     bb8:	4b0f      	ldr	r3, [pc, #60]	; (bf8 <init_wheel+0x44>)
     bba:	2200      	movs	r2, #0
     bbc:	701a      	strb	r2, [r3, #0]
	wheel.down_val = 0;
     bbe:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <init_wheel+0x44>)
     bc0:	2200      	movs	r2, #0
     bc2:	705a      	strb	r2, [r3, #1]
	wheel.left_val = 0;
     bc4:	4b0c      	ldr	r3, [pc, #48]	; (bf8 <init_wheel+0x44>)
     bc6:	2200      	movs	r2, #0
     bc8:	709a      	strb	r2, [r3, #2]
	wheel.right_val = 0;
     bca:	4b0b      	ldr	r3, [pc, #44]	; (bf8 <init_wheel+0x44>)
     bcc:	2200      	movs	r2, #0
     bce:	70da      	strb	r2, [r3, #3]

	wheel.left_state = 0;
     bd0:	4b09      	ldr	r3, [pc, #36]	; (bf8 <init_wheel+0x44>)
     bd2:	2200      	movs	r2, #0
     bd4:	711a      	strb	r2, [r3, #4]
	wheel.right_state = 0;
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <init_wheel+0x44>)
     bd8:	2200      	movs	r2, #0
     bda:	715a      	strb	r2, [r3, #5]
	wheel.up_state = 0;
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <init_wheel+0x44>)
     bde:	2200      	movs	r2, #0
     be0:	719a      	strb	r2, [r3, #6]
	wheel.down_state = 0;
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <init_wheel+0x44>)
     be4:	2200      	movs	r2, #0
     be6:	71da      	strb	r2, [r3, #7]

	wheel.LR_count = 0;
     be8:	4b03      	ldr	r3, [pc, #12]	; (bf8 <init_wheel+0x44>)
     bea:	2200      	movs	r2, #0
     bec:	811a      	strh	r2, [r3, #8]
	wheel.UD_count = 0;
     bee:	4b02      	ldr	r3, [pc, #8]	; (bf8 <init_wheel+0x44>)
     bf0:	2200      	movs	r2, #0
     bf2:	815a      	strh	r2, [r3, #10]

}
     bf4:	46bd      	mov	sp, r7
     bf6:	bd80      	pop	{r7, pc}
     bf8:	200000d0 	.word	0x200000d0

00000bfc <update_values>:

/********************************************************************/

//Reads the values of the wheel and updates the struct
void update_values(){
     bfc:	b598      	push	{r3, r4, r7, lr}
     bfe:	af00      	add	r7, sp, #0
	
	//Read in the new values
	wheel.left_val = getState(LEFT);
     c00:	2000      	movs	r0, #0
     c02:	4b20      	ldr	r3, [pc, #128]	; (c84 <update_values+0x88>)
     c04:	4798      	blx	r3
     c06:	1c03      	adds	r3, r0, #0
     c08:	1c1a      	adds	r2, r3, #0
     c0a:	4b1f      	ldr	r3, [pc, #124]	; (c88 <update_values+0x8c>)
     c0c:	709a      	strb	r2, [r3, #2]
	wheel.right_val = getState(RIGHT);
     c0e:	2001      	movs	r0, #1
     c10:	4b1c      	ldr	r3, [pc, #112]	; (c84 <update_values+0x88>)
     c12:	4798      	blx	r3
     c14:	1c03      	adds	r3, r0, #0
     c16:	1c1a      	adds	r2, r3, #0
     c18:	4b1b      	ldr	r3, [pc, #108]	; (c88 <update_values+0x8c>)
     c1a:	70da      	strb	r2, [r3, #3]
	wheel.up_val = getState(UP);
     c1c:	2002      	movs	r0, #2
     c1e:	4b19      	ldr	r3, [pc, #100]	; (c84 <update_values+0x88>)
     c20:	4798      	blx	r3
     c22:	1c03      	adds	r3, r0, #0
     c24:	1c1a      	adds	r2, r3, #0
     c26:	4b18      	ldr	r3, [pc, #96]	; (c88 <update_values+0x8c>)
     c28:	701a      	strb	r2, [r3, #0]
	wheel.down_val = getState(DOWN);
     c2a:	2003      	movs	r0, #3
     c2c:	4b15      	ldr	r3, [pc, #84]	; (c84 <update_values+0x88>)
     c2e:	4798      	blx	r3
     c30:	1c03      	adds	r3, r0, #0
     c32:	1c1a      	adds	r2, r3, #0
     c34:	4b14      	ldr	r3, [pc, #80]	; (c88 <update_values+0x8c>)
     c36:	705a      	strb	r2, [r3, #1]
	//wheel.left_val = port_pin_get_input_level(PIN_PA10); //Left value
	//wheel.right_val = port_pin_get_input_level(PIN_PA11); // Right value
	//wheel.up_val = port_pin_get_input_level(PIN_PA06); // Up value
	//wheel.down_val = port_pin_get_input_level(PIN_PA09); // Down value

	saveValues(&wheel.left_val, &wheel.left_state, &wheel.LR_count, 0);
     c38:	4914      	ldr	r1, [pc, #80]	; (c8c <update_values+0x90>)
     c3a:	4a15      	ldr	r2, [pc, #84]	; (c90 <update_values+0x94>)
     c3c:	4b15      	ldr	r3, [pc, #84]	; (c94 <update_values+0x98>)
     c3e:	1c08      	adds	r0, r1, #0
     c40:	1c11      	adds	r1, r2, #0
     c42:	1c1a      	adds	r2, r3, #0
     c44:	2300      	movs	r3, #0
     c46:	4c14      	ldr	r4, [pc, #80]	; (c98 <update_values+0x9c>)
     c48:	47a0      	blx	r4
	saveValues(&wheel.right_val, &wheel.right_state, &wheel.LR_count, 1);
     c4a:	4914      	ldr	r1, [pc, #80]	; (c9c <update_values+0xa0>)
     c4c:	4a14      	ldr	r2, [pc, #80]	; (ca0 <update_values+0xa4>)
     c4e:	4b11      	ldr	r3, [pc, #68]	; (c94 <update_values+0x98>)
     c50:	1c08      	adds	r0, r1, #0
     c52:	1c11      	adds	r1, r2, #0
     c54:	1c1a      	adds	r2, r3, #0
     c56:	2301      	movs	r3, #1
     c58:	4c0f      	ldr	r4, [pc, #60]	; (c98 <update_values+0x9c>)
     c5a:	47a0      	blx	r4
	saveValues(&wheel.up_val, &wheel.up_state, &wheel.UD_count, 1);
     c5c:	490a      	ldr	r1, [pc, #40]	; (c88 <update_values+0x8c>)
     c5e:	4a11      	ldr	r2, [pc, #68]	; (ca4 <update_values+0xa8>)
     c60:	4b11      	ldr	r3, [pc, #68]	; (ca8 <update_values+0xac>)
     c62:	1c08      	adds	r0, r1, #0
     c64:	1c11      	adds	r1, r2, #0
     c66:	1c1a      	adds	r2, r3, #0
     c68:	2301      	movs	r3, #1
     c6a:	4c0b      	ldr	r4, [pc, #44]	; (c98 <update_values+0x9c>)
     c6c:	47a0      	blx	r4
	saveValues(&wheel.down_val, &wheel.down_state, &wheel.UD_count, 0);
     c6e:	490f      	ldr	r1, [pc, #60]	; (cac <update_values+0xb0>)
     c70:	4a0f      	ldr	r2, [pc, #60]	; (cb0 <update_values+0xb4>)
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <update_values+0xac>)
     c74:	1c08      	adds	r0, r1, #0
     c76:	1c11      	adds	r1, r2, #0
     c78:	1c1a      	adds	r2, r3, #0
     c7a:	2300      	movs	r3, #0
     c7c:	4c06      	ldr	r4, [pc, #24]	; (c98 <update_values+0x9c>)
     c7e:	47a0      	blx	r4
}
     c80:	46bd      	mov	sp, r7
     c82:	bd98      	pop	{r3, r4, r7, pc}
     c84:	00000d11 	.word	0x00000d11
     c88:	200000d0 	.word	0x200000d0
     c8c:	200000d2 	.word	0x200000d2
     c90:	200000d4 	.word	0x200000d4
     c94:	200000d8 	.word	0x200000d8
     c98:	00000cb5 	.word	0x00000cb5
     c9c:	200000d3 	.word	0x200000d3
     ca0:	200000d5 	.word	0x200000d5
     ca4:	200000d6 	.word	0x200000d6
     ca8:	200000da 	.word	0x200000da
     cac:	200000d1 	.word	0x200000d1
     cb0:	200000d7 	.word	0x200000d7

00000cb4 <saveValues>:

/********************************************************************/

//Updates the values and increments the counter
void saveValues(uint8_t *current, uint8_t *previous, int16_t *count, uint8_t up_down){
     cb4:	b580      	push	{r7, lr}
     cb6:	b084      	sub	sp, #16
     cb8:	af00      	add	r7, sp, #0
     cba:	60f8      	str	r0, [r7, #12]
     cbc:	60b9      	str	r1, [r7, #8]
     cbe:	607a      	str	r2, [r7, #4]
     cc0:	1c1a      	adds	r2, r3, #0
     cc2:	1cfb      	adds	r3, r7, #3
     cc4:	701a      	strb	r2, [r3, #0]

	//If the current value is not equal to the previous value
	if(*current != *previous){
     cc6:	68fb      	ldr	r3, [r7, #12]
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	68bb      	ldr	r3, [r7, #8]
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	429a      	cmp	r2, r3
     cd0:	d01a      	beq.n	d08 <saveValues+0x54>
		if(up_down){
     cd2:	1cfb      	adds	r3, r7, #3
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d009      	beq.n	cee <saveValues+0x3a>
			(*count)++;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	881b      	ldrh	r3, [r3, #0]
     cde:	b29b      	uxth	r3, r3
     ce0:	b29b      	uxth	r3, r3
     ce2:	3301      	adds	r3, #1
     ce4:	b29b      	uxth	r3, r3
     ce6:	b29a      	uxth	r2, r3
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	801a      	strh	r2, [r3, #0]
     cec:	e008      	b.n	d00 <saveValues+0x4c>
		}

		else{
			(*count)--;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	881b      	ldrh	r3, [r3, #0]
     cf2:	b29b      	uxth	r3, r3
     cf4:	b29b      	uxth	r3, r3
     cf6:	3b01      	subs	r3, #1
     cf8:	b29b      	uxth	r3, r3
     cfa:	b29a      	uxth	r2, r3
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	801a      	strh	r2, [r3, #0]
		}
		
		*previous = *current;
     d00:	68fb      	ldr	r3, [r7, #12]
     d02:	781a      	ldrb	r2, [r3, #0]
     d04:	68bb      	ldr	r3, [r7, #8]
     d06:	701a      	strb	r2, [r3, #0]
	}
}
     d08:	46bd      	mov	sp, r7
     d0a:	b004      	add	sp, #16
     d0c:	bd80      	pop	{r7, pc}
     d0e:	46c0      	nop			; (mov r8, r8)

00000d10 <getState>:
// 	}
// }

/********************************************************************/

uint8_t getState(uint8_t button_num){
     d10:	b580      	push	{r7, lr}
     d12:	b082      	sub	sp, #8
     d14:	af00      	add	r7, sp, #0
     d16:	1c02      	adds	r2, r0, #0
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	701a      	strb	r2, [r3, #0]
	switch(button_num){
     d1c:	1dfb      	adds	r3, r7, #7
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	2b01      	cmp	r3, #1
     d22:	d00d      	beq.n	d40 <getState+0x30>
     d24:	dc02      	bgt.n	d2c <getState+0x1c>
     d26:	2b00      	cmp	r3, #0
     d28:	d005      	beq.n	d36 <getState+0x26>
     d2a:	e018      	b.n	d5e <getState+0x4e>
     d2c:	2b02      	cmp	r3, #2
     d2e:	d00c      	beq.n	d4a <getState+0x3a>
     d30:	2b03      	cmp	r3, #3
     d32:	d00f      	beq.n	d54 <getState+0x44>
     d34:	e013      	b.n	d5e <getState+0x4e>
		case LEFT:
			return port_pin_get_input_level(PIN_PA10);
     d36:	200a      	movs	r0, #10
     d38:	4b0b      	ldr	r3, [pc, #44]	; (d68 <getState+0x58>)
     d3a:	4798      	blx	r3
     d3c:	1c03      	adds	r3, r0, #0
     d3e:	e00e      	b.n	d5e <getState+0x4e>
		break;

		case RIGHT:
			return port_pin_get_input_level(PIN_PA11);
     d40:	200b      	movs	r0, #11
     d42:	4b09      	ldr	r3, [pc, #36]	; (d68 <getState+0x58>)
     d44:	4798      	blx	r3
     d46:	1c03      	adds	r3, r0, #0
     d48:	e009      	b.n	d5e <getState+0x4e>
		break;

		case UP:
			return port_pin_get_input_level(PIN_PA06);
     d4a:	2006      	movs	r0, #6
     d4c:	4b06      	ldr	r3, [pc, #24]	; (d68 <getState+0x58>)
     d4e:	4798      	blx	r3
     d50:	1c03      	adds	r3, r0, #0
     d52:	e004      	b.n	d5e <getState+0x4e>
		break;

		case DOWN:
			return port_pin_get_input_level(PIN_PA09);
     d54:	2009      	movs	r0, #9
     d56:	4b04      	ldr	r3, [pc, #16]	; (d68 <getState+0x58>)
     d58:	4798      	blx	r3
     d5a:	1c03      	adds	r3, r0, #0
     d5c:	e7ff      	b.n	d5e <getState+0x4e>
		break;
	}
}
     d5e:	1c18      	adds	r0, r3, #0
     d60:	46bd      	mov	sp, r7
     d62:	b002      	add	sp, #8
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000b71 	.word	0x00000b71

00000d6c <getScroll>:

/********************************************************************/

void getScroll(int8_t *LR_scroll, int8_t *UD_scroll){
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
	int8_t send_LR_val = (int8_t)(wheel.LR_count);
     d76:	4b22      	ldr	r3, [pc, #136]	; (e00 <getScroll+0x94>)
     d78:	891a      	ldrh	r2, [r3, #8]
     d7a:	230f      	movs	r3, #15
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	701a      	strb	r2, [r3, #0]
	int8_t send_UD_val = (int8_t)(wheel.UD_count);
     d80:	4b1f      	ldr	r3, [pc, #124]	; (e00 <getScroll+0x94>)
     d82:	895a      	ldrh	r2, [r3, #10]
     d84:	230e      	movs	r3, #14
     d86:	18fb      	adds	r3, r7, r3
     d88:	701a      	strb	r2, [r3, #0]

	if(send_LR_val > MAX_POS_SCROLL){
     d8a:	230f      	movs	r3, #15
     d8c:	18fb      	adds	r3, r7, r3
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	b25b      	sxtb	r3, r3
     d92:	2b64      	cmp	r3, #100	; 0x64
     d94:	dd03      	ble.n	d9e <getScroll+0x32>
		send_LR_val = MAX_POS_SCROLL;
     d96:	230f      	movs	r3, #15
     d98:	18fb      	adds	r3, r7, r3
     d9a:	2264      	movs	r2, #100	; 0x64
     d9c:	701a      	strb	r2, [r3, #0]
	}

	if(send_LR_val < MAX_NEG_SCROLL){
     d9e:	230f      	movs	r3, #15
     da0:	18fb      	adds	r3, r7, r3
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	b25b      	sxtb	r3, r3
     da6:	3364      	adds	r3, #100	; 0x64
     da8:	da03      	bge.n	db2 <getScroll+0x46>
		send_LR_val = MAX_NEG_SCROLL;
     daa:	230f      	movs	r3, #15
     dac:	18fb      	adds	r3, r7, r3
     dae:	229c      	movs	r2, #156	; 0x9c
     db0:	701a      	strb	r2, [r3, #0]
	}

	if(send_UD_val > MAX_POS_SCROLL){
     db2:	230e      	movs	r3, #14
     db4:	18fb      	adds	r3, r7, r3
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	b25b      	sxtb	r3, r3
     dba:	2b64      	cmp	r3, #100	; 0x64
     dbc:	dd03      	ble.n	dc6 <getScroll+0x5a>
		send_UD_val = MAX_POS_SCROLL;
     dbe:	230e      	movs	r3, #14
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	2264      	movs	r2, #100	; 0x64
     dc4:	701a      	strb	r2, [r3, #0]
	}

	if(send_UD_val < MAX_NEG_SCROLL){
     dc6:	230e      	movs	r3, #14
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	b25b      	sxtb	r3, r3
     dce:	3364      	adds	r3, #100	; 0x64
     dd0:	da03      	bge.n	dda <getScroll+0x6e>
		send_UD_val = MAX_NEG_SCROLL;
     dd2:	230e      	movs	r3, #14
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	229c      	movs	r2, #156	; 0x9c
     dd8:	701a      	strb	r2, [r3, #0]
	}

	wheel.LR_count = 0;
     dda:	4b09      	ldr	r3, [pc, #36]	; (e00 <getScroll+0x94>)
     ddc:	2200      	movs	r2, #0
     dde:	811a      	strh	r2, [r3, #8]
	wheel.UD_count = 0;
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <getScroll+0x94>)
     de2:	2200      	movs	r2, #0
     de4:	815a      	strh	r2, [r3, #10]

	*LR_scroll = send_LR_val;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	220f      	movs	r2, #15
     dea:	18ba      	adds	r2, r7, r2
     dec:	7812      	ldrb	r2, [r2, #0]
     dee:	701a      	strb	r2, [r3, #0]
	*UD_scroll = send_UD_val;
     df0:	683b      	ldr	r3, [r7, #0]
     df2:	220e      	movs	r2, #14
     df4:	18ba      	adds	r2, r7, r2
     df6:	7812      	ldrb	r2, [r2, #0]
     df8:	701a      	strb	r2, [r3, #0]
     dfa:	46bd      	mov	sp, r7
     dfc:	b004      	add	sp, #16
     dfe:	bd80      	pop	{r7, pc}
     e00:	200000d0 	.word	0x200000d0

00000e04 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	1c02      	adds	r2, r0, #0
     e0c:	1dfb      	adds	r3, r7, #7
     e0e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     e10:	230f      	movs	r3, #15
     e12:	18fb      	adds	r3, r7, r3
     e14:	1dfa      	adds	r2, r7, #7
     e16:	7812      	ldrb	r2, [r2, #0]
     e18:	0952      	lsrs	r2, r2, #5
     e1a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     e1c:	230f      	movs	r3, #15
     e1e:	18fb      	adds	r3, r7, r3
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	d10c      	bne.n	e40 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     e26:	4b09      	ldr	r3, [pc, #36]	; (e4c <_extint_get_eic_from_channel+0x48>)
     e28:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     e2a:	230f      	movs	r3, #15
     e2c:	18fb      	adds	r3, r7, r3
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	009b      	lsls	r3, r3, #2
     e32:	2210      	movs	r2, #16
     e34:	4694      	mov	ip, r2
     e36:	44bc      	add	ip, r7
     e38:	4463      	add	r3, ip
     e3a:	3b08      	subs	r3, #8
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	e000      	b.n	e42 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     e40:	2300      	movs	r3, #0
	}
}
     e42:	1c18      	adds	r0, r3, #0
     e44:	46bd      	mov	sp, r7
     e46:	b004      	add	sp, #16
     e48:	bd80      	pop	{r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	40001800 	.word	0x40001800

00000e50 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     e50:	b580      	push	{r7, lr}
     e52:	b084      	sub	sp, #16
     e54:	af00      	add	r7, sp, #0
     e56:	1c02      	adds	r2, r0, #0
     e58:	1dfb      	adds	r3, r7, #7
     e5a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     e5c:	1dfb      	adds	r3, r7, #7
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	1c18      	adds	r0, r3, #0
     e62:	4b0b      	ldr	r3, [pc, #44]	; (e90 <extint_chan_is_detected+0x40>)
     e64:	4798      	blx	r3
     e66:	1c03      	adds	r3, r0, #0
     e68:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     e6a:	1dfb      	adds	r3, r7, #7
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	221f      	movs	r2, #31
     e70:	4013      	ands	r3, r2
     e72:	2201      	movs	r2, #1
     e74:	409a      	lsls	r2, r3
     e76:	1c13      	adds	r3, r2, #0
     e78:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     e7a:	68fb      	ldr	r3, [r7, #12]
     e7c:	691b      	ldr	r3, [r3, #16]
     e7e:	68ba      	ldr	r2, [r7, #8]
     e80:	4013      	ands	r3, r2
     e82:	1e5a      	subs	r2, r3, #1
     e84:	4193      	sbcs	r3, r2
     e86:	b2db      	uxtb	r3, r3
}
     e88:	1c18      	adds	r0, r3, #0
     e8a:	46bd      	mov	sp, r7
     e8c:	b004      	add	sp, #16
     e8e:	bd80      	pop	{r7, pc}
     e90:	00000e05 	.word	0x00000e05

00000e94 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     e94:	b580      	push	{r7, lr}
     e96:	b084      	sub	sp, #16
     e98:	af00      	add	r7, sp, #0
     e9a:	1c02      	adds	r2, r0, #0
     e9c:	1dfb      	adds	r3, r7, #7
     e9e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     ea0:	1dfb      	adds	r3, r7, #7
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	1c18      	adds	r0, r3, #0
     ea6:	4b09      	ldr	r3, [pc, #36]	; (ecc <extint_chan_clear_detected+0x38>)
     ea8:	4798      	blx	r3
     eaa:	1c03      	adds	r3, r0, #0
     eac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     eae:	1dfb      	adds	r3, r7, #7
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	221f      	movs	r2, #31
     eb4:	4013      	ands	r3, r2
     eb6:	2201      	movs	r2, #1
     eb8:	409a      	lsls	r2, r3
     eba:	1c13      	adds	r3, r2, #0
     ebc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     ebe:	68fb      	ldr	r3, [r7, #12]
     ec0:	68ba      	ldr	r2, [r7, #8]
     ec2:	611a      	str	r2, [r3, #16]
}
     ec4:	46bd      	mov	sp, r7
     ec6:	b004      	add	sp, #16
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000e05 	.word	0x00000e05

00000ed0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
     ed8:	1c08      	adds	r0, r1, #0
     eda:	1c11      	adds	r1, r2, #0
     edc:	1cfb      	adds	r3, r7, #3
     ede:	1c02      	adds	r2, r0, #0
     ee0:	701a      	strb	r2, [r3, #0]
     ee2:	1cbb      	adds	r3, r7, #2
     ee4:	1c0a      	adds	r2, r1, #0
     ee6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     ee8:	1cbb      	adds	r3, r7, #2
     eea:	781b      	ldrb	r3, [r3, #0]
     eec:	2b00      	cmp	r3, #0
     eee:	d001      	beq.n	ef4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ef0:	2317      	movs	r3, #23
     ef2:	e019      	b.n	f28 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     ef4:	1cfb      	adds	r3, r7, #3
     ef6:	781a      	ldrb	r2, [r3, #0]
     ef8:	4b0d      	ldr	r3, [pc, #52]	; (f30 <extint_register_callback+0x60>)
     efa:	0092      	lsls	r2, r2, #2
     efc:	58d3      	ldr	r3, [r2, r3]
     efe:	2b00      	cmp	r3, #0
     f00:	d107      	bne.n	f12 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     f02:	1cfb      	adds	r3, r7, #3
     f04:	781a      	ldrb	r2, [r3, #0]
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <extint_register_callback+0x60>)
     f08:	0092      	lsls	r2, r2, #2
     f0a:	6879      	ldr	r1, [r7, #4]
     f0c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     f0e:	2300      	movs	r3, #0
     f10:	e00a      	b.n	f28 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     f12:	1cfb      	adds	r3, r7, #3
     f14:	781a      	ldrb	r2, [r3, #0]
     f16:	4b06      	ldr	r3, [pc, #24]	; (f30 <extint_register_callback+0x60>)
     f18:	0092      	lsls	r2, r2, #2
     f1a:	58d2      	ldr	r2, [r2, r3]
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	429a      	cmp	r2, r3
     f20:	d101      	bne.n	f26 <extint_register_callback+0x56>
		return STATUS_OK;
     f22:	2300      	movs	r3, #0
     f24:	e000      	b.n	f28 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     f26:	231d      	movs	r3, #29
}
     f28:	1c18      	adds	r0, r3, #0
     f2a:	46bd      	mov	sp, r7
     f2c:	b002      	add	sp, #8
     f2e:	bd80      	pop	{r7, pc}
     f30:	2000008c 	.word	0x2000008c

00000f34 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
     f3a:	1c02      	adds	r2, r0, #0
     f3c:	1dfb      	adds	r3, r7, #7
     f3e:	701a      	strb	r2, [r3, #0]
     f40:	1dbb      	adds	r3, r7, #6
     f42:	1c0a      	adds	r2, r1, #0
     f44:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     f46:	1dbb      	adds	r3, r7, #6
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d10e      	bne.n	f6c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     f4e:	1dfb      	adds	r3, r7, #7
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	1c18      	adds	r0, r3, #0
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <extint_chan_enable_callback+0x44>)
     f56:	4798      	blx	r3
     f58:	1c03      	adds	r3, r0, #0
     f5a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     f5c:	1dfb      	adds	r3, r7, #7
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2201      	movs	r2, #1
     f62:	409a      	lsls	r2, r3
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f68:	2300      	movs	r3, #0
     f6a:	e000      	b.n	f6e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f6c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     f6e:	1c18      	adds	r0, r3, #0
     f70:	46bd      	mov	sp, r7
     f72:	b004      	add	sp, #16
     f74:	bd80      	pop	{r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	00000e05 	.word	0x00000e05

00000f7c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     f80:	4b15      	ldr	r3, [pc, #84]	; (fd8 <EIC_Handler+0x5c>)
     f82:	2200      	movs	r2, #0
     f84:	701a      	strb	r2, [r3, #0]
     f86:	e020      	b.n	fca <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     f88:	4b13      	ldr	r3, [pc, #76]	; (fd8 <EIC_Handler+0x5c>)
     f8a:	781b      	ldrb	r3, [r3, #0]
     f8c:	1c18      	adds	r0, r3, #0
     f8e:	4b13      	ldr	r3, [pc, #76]	; (fdc <EIC_Handler+0x60>)
     f90:	4798      	blx	r3
     f92:	1e03      	subs	r3, r0, #0
     f94:	d013      	beq.n	fbe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     f96:	4b10      	ldr	r3, [pc, #64]	; (fd8 <EIC_Handler+0x5c>)
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	1c18      	adds	r0, r3, #0
     f9c:	4b10      	ldr	r3, [pc, #64]	; (fe0 <EIC_Handler+0x64>)
     f9e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     fa0:	4b0d      	ldr	r3, [pc, #52]	; (fd8 <EIC_Handler+0x5c>)
     fa2:	781b      	ldrb	r3, [r3, #0]
     fa4:	1c1a      	adds	r2, r3, #0
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <EIC_Handler+0x68>)
     fa8:	0092      	lsls	r2, r2, #2
     faa:	58d3      	ldr	r3, [r2, r3]
     fac:	2b00      	cmp	r3, #0
     fae:	d006      	beq.n	fbe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     fb0:	4b09      	ldr	r3, [pc, #36]	; (fd8 <EIC_Handler+0x5c>)
     fb2:	781b      	ldrb	r3, [r3, #0]
     fb4:	1c1a      	adds	r2, r3, #0
     fb6:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <EIC_Handler+0x68>)
     fb8:	0092      	lsls	r2, r2, #2
     fba:	58d3      	ldr	r3, [r2, r3]
     fbc:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <EIC_Handler+0x5c>)
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	3301      	adds	r3, #1
     fc4:	b2da      	uxtb	r2, r3
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <EIC_Handler+0x5c>)
     fc8:	701a      	strb	r2, [r3, #0]
     fca:	4b03      	ldr	r3, [pc, #12]	; (fd8 <EIC_Handler+0x5c>)
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	2b0f      	cmp	r3, #15
     fd0:	d9da      	bls.n	f88 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     fd2:	46bd      	mov	sp, r7
     fd4:	bd80      	pop	{r7, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	200000dc 	.word	0x200000dc
     fdc:	00000e51 	.word	0x00000e51
     fe0:	00000e95 	.word	0x00000e95
     fe4:	2000008c 	.word	0x2000008c

00000fe8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     fe8:	b580      	push	{r7, lr}
     fea:	b082      	sub	sp, #8
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2200      	movs	r2, #0
     ff4:	701a      	strb	r2, [r3, #0]
}
     ff6:	46bd      	mov	sp, r7
     ff8:	b002      	add	sp, #8
     ffa:	bd80      	pop	{r7, pc}

00000ffc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	1c02      	adds	r2, r0, #0
    1004:	6039      	str	r1, [r7, #0]
    1006:	1dfb      	adds	r3, r7, #7
    1008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    100a:	1dfb      	adds	r3, r7, #7
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	2b01      	cmp	r3, #1
    1010:	d00a      	beq.n	1028 <system_apb_clock_set_mask+0x2c>
    1012:	2b02      	cmp	r3, #2
    1014:	d00f      	beq.n	1036 <system_apb_clock_set_mask+0x3a>
    1016:	2b00      	cmp	r3, #0
    1018:	d114      	bne.n	1044 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <system_apb_clock_set_mask+0x58>)
    101c:	4a0d      	ldr	r2, [pc, #52]	; (1054 <system_apb_clock_set_mask+0x58>)
    101e:	6991      	ldr	r1, [r2, #24]
    1020:	683a      	ldr	r2, [r7, #0]
    1022:	430a      	orrs	r2, r1
    1024:	619a      	str	r2, [r3, #24]
			break;
    1026:	e00f      	b.n	1048 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1028:	4b0a      	ldr	r3, [pc, #40]	; (1054 <system_apb_clock_set_mask+0x58>)
    102a:	4a0a      	ldr	r2, [pc, #40]	; (1054 <system_apb_clock_set_mask+0x58>)
    102c:	69d1      	ldr	r1, [r2, #28]
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	430a      	orrs	r2, r1
    1032:	61da      	str	r2, [r3, #28]
			break;
    1034:	e008      	b.n	1048 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1036:	4b07      	ldr	r3, [pc, #28]	; (1054 <system_apb_clock_set_mask+0x58>)
    1038:	4a06      	ldr	r2, [pc, #24]	; (1054 <system_apb_clock_set_mask+0x58>)
    103a:	6a11      	ldr	r1, [r2, #32]
    103c:	683a      	ldr	r2, [r7, #0]
    103e:	430a      	orrs	r2, r1
    1040:	621a      	str	r2, [r3, #32]
			break;
    1042:	e001      	b.n	1048 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1044:	2317      	movs	r3, #23
    1046:	e000      	b.n	104a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1048:	2300      	movs	r3, #0
}
    104a:	1c18      	adds	r0, r3, #0
    104c:	46bd      	mov	sp, r7
    104e:	b002      	add	sp, #8
    1050:	bd80      	pop	{r7, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	40000400 	.word	0x40000400

00001058 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1058:	b580      	push	{r7, lr}
    105a:	b082      	sub	sp, #8
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	2280      	movs	r2, #128	; 0x80
    1064:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	2200      	movs	r2, #0
    106a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    106c:	687b      	ldr	r3, [r7, #4]
    106e:	2201      	movs	r2, #1
    1070:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	2200      	movs	r2, #0
    1076:	70da      	strb	r2, [r3, #3]
}
    1078:	46bd      	mov	sp, r7
    107a:	b002      	add	sp, #8
    107c:	bd80      	pop	{r7, pc}
    107e:	46c0      	nop			; (mov r8, r8)

00001080 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1080:	b580      	push	{r7, lr}
    1082:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1084:	4b05      	ldr	r3, [pc, #20]	; (109c <system_is_debugger_present+0x1c>)
    1086:	789b      	ldrb	r3, [r3, #2]
    1088:	b2db      	uxtb	r3, r3
    108a:	1c1a      	adds	r2, r3, #0
    108c:	2302      	movs	r3, #2
    108e:	4013      	ands	r3, r2
    1090:	1e5a      	subs	r2, r3, #1
    1092:	4193      	sbcs	r3, r2
    1094:	b2db      	uxtb	r3, r3
}
    1096:	1c18      	adds	r0, r3, #0
    1098:	46bd      	mov	sp, r7
    109a:	bd80      	pop	{r7, pc}
    109c:	41002000 	.word	0x41002000

000010a0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	b084      	sub	sp, #16
    10a4:	af00      	add	r7, sp, #0
    10a6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    10ae:	68fb      	ldr	r3, [r7, #12]
    10b0:	69db      	ldr	r3, [r3, #28]
    10b2:	2207      	movs	r2, #7
    10b4:	4013      	ands	r3, r2
    10b6:	1e5a      	subs	r2, r3, #1
    10b8:	4193      	sbcs	r3, r2
    10ba:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    10bc:	1c18      	adds	r0, r3, #0
    10be:	46bd      	mov	sp, r7
    10c0:	b004      	add	sp, #16
    10c2:	bd80      	pop	{r7, pc}

000010c4 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    10cc:	46c0      	nop			; (mov r8, r8)
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	1c18      	adds	r0, r3, #0
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <_i2c_master_wait_for_sync+0x1c>)
    10d4:	4798      	blx	r3
    10d6:	1e03      	subs	r3, r0, #0
    10d8:	d1f9      	bne.n	10ce <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    10da:	46bd      	mov	sp, r7
    10dc:	b002      	add	sp, #8
    10de:	bd80      	pop	{r7, pc}
    10e0:	000010a1 	.word	0x000010a1

000010e4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    10e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e6:	b095      	sub	sp, #84	; 0x54
    10e8:	af00      	add	r7, sp, #0
    10ea:	60f8      	str	r0, [r7, #12]
    10ec:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    10ee:	2300      	movs	r3, #0
    10f0:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    10f2:	2300      	movs	r3, #0
    10f4:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    10f6:	2300      	movs	r3, #0
    10f8:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    10fa:	233b      	movs	r3, #59	; 0x3b
    10fc:	2208      	movs	r2, #8
    10fe:	4694      	mov	ip, r2
    1100:	44bc      	add	ip, r7
    1102:	4463      	add	r3, ip
    1104:	2200      	movs	r2, #0
    1106:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    110e:	68fb      	ldr	r3, [r7, #12]
    1110:	681b      	ldr	r3, [r3, #0]
    1112:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1114:	2323      	movs	r3, #35	; 0x23
    1116:	2208      	movs	r2, #8
    1118:	18ba      	adds	r2, r7, r2
    111a:	18d4      	adds	r4, r2, r3
    111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    111e:	1c18      	adds	r0, r3, #0
    1120:	4bc3      	ldr	r3, [pc, #780]	; (1430 <_i2c_master_set_config+0x34c>)
    1122:	4798      	blx	r3
    1124:	1c03      	adds	r3, r0, #0
    1126:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1128:	230c      	movs	r3, #12
    112a:	2208      	movs	r2, #8
    112c:	4694      	mov	ip, r2
    112e:	44bc      	add	ip, r7
    1130:	4463      	add	r3, ip
    1132:	1c18      	adds	r0, r3, #0
    1134:	4bbf      	ldr	r3, [pc, #764]	; (1434 <_i2c_master_set_config+0x350>)
    1136:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1138:	68bb      	ldr	r3, [r7, #8]
    113a:	69db      	ldr	r3, [r3, #28]
    113c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    113e:	68bb      	ldr	r3, [r7, #8]
    1140:	6a1b      	ldr	r3, [r3, #32]
    1142:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1146:	2b00      	cmp	r3, #0
    1148:	d106      	bne.n	1158 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    114c:	1c18      	adds	r0, r3, #0
    114e:	2100      	movs	r1, #0
    1150:	4bb9      	ldr	r3, [pc, #740]	; (1438 <_i2c_master_set_config+0x354>)
    1152:	4798      	blx	r3
    1154:	1c03      	adds	r3, r0, #0
    1156:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    115a:	b2da      	uxtb	r2, r3
    115c:	230c      	movs	r3, #12
    115e:	2108      	movs	r1, #8
    1160:	468c      	mov	ip, r1
    1162:	44bc      	add	ip, r7
    1164:	4463      	add	r3, ip
    1166:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1168:	230c      	movs	r3, #12
    116a:	2208      	movs	r2, #8
    116c:	4694      	mov	ip, r2
    116e:	44bc      	add	ip, r7
    1170:	4463      	add	r3, ip
    1172:	2202      	movs	r2, #2
    1174:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1178:	0c1b      	lsrs	r3, r3, #16
    117a:	b2da      	uxtb	r2, r3
    117c:	230c      	movs	r3, #12
    117e:	2108      	movs	r1, #8
    1180:	468c      	mov	ip, r1
    1182:	44bc      	add	ip, r7
    1184:	4463      	add	r3, ip
    1186:	1c10      	adds	r0, r2, #0
    1188:	1c19      	adds	r1, r3, #0
    118a:	4bac      	ldr	r3, [pc, #688]	; (143c <_i2c_master_set_config+0x358>)
    118c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1190:	2b00      	cmp	r3, #0
    1192:	d106      	bne.n	11a2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1196:	1c18      	adds	r0, r3, #0
    1198:	2101      	movs	r1, #1
    119a:	4ba7      	ldr	r3, [pc, #668]	; (1438 <_i2c_master_set_config+0x354>)
    119c:	4798      	blx	r3
    119e:	1c03      	adds	r3, r0, #0
    11a0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    11a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a4:	b2da      	uxtb	r2, r3
    11a6:	230c      	movs	r3, #12
    11a8:	2108      	movs	r1, #8
    11aa:	468c      	mov	ip, r1
    11ac:	44bc      	add	ip, r7
    11ae:	4463      	add	r3, ip
    11b0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    11b2:	230c      	movs	r3, #12
    11b4:	2208      	movs	r2, #8
    11b6:	4694      	mov	ip, r2
    11b8:	44bc      	add	ip, r7
    11ba:	4463      	add	r3, ip
    11bc:	2202      	movs	r2, #2
    11be:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    11c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c2:	0c1b      	lsrs	r3, r3, #16
    11c4:	b2da      	uxtb	r2, r3
    11c6:	230c      	movs	r3, #12
    11c8:	2108      	movs	r1, #8
    11ca:	468c      	mov	ip, r1
    11cc:	44bc      	add	ip, r7
    11ce:	4463      	add	r3, ip
    11d0:	1c10      	adds	r0, r2, #0
    11d2:	1c19      	adds	r1, r3, #0
    11d4:	4b99      	ldr	r3, [pc, #612]	; (143c <_i2c_master_set_config+0x358>)
    11d6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    11d8:	68bb      	ldr	r3, [r7, #8]
    11da:	8a9a      	ldrh	r2, [r3, #20]
    11dc:	68fb      	ldr	r3, [r7, #12]
    11de:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    11e0:	68bb      	ldr	r3, [r7, #8]
    11e2:	8ada      	ldrh	r2, [r3, #22]
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	7e1b      	ldrb	r3, [r3, #24]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d103      	bne.n	11f8 <_i2c_master_set_config+0x114>
    11f0:	4b93      	ldr	r3, [pc, #588]	; (1440 <_i2c_master_set_config+0x35c>)
    11f2:	4798      	blx	r3
    11f4:	1e03      	subs	r3, r0, #0
    11f6:	d002      	beq.n	11fe <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    11f8:	2380      	movs	r3, #128	; 0x80
    11fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    11fc:	e001      	b.n	1202 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    11fe:	2300      	movs	r3, #0
    1200:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1202:	68bb      	ldr	r3, [r7, #8]
    1204:	691b      	ldr	r3, [r3, #16]
    1206:	2b00      	cmp	r3, #0
    1208:	d004      	beq.n	1214 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    120a:	68bb      	ldr	r3, [r7, #8]
    120c:	691b      	ldr	r3, [r3, #16]
    120e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1210:	4313      	orrs	r3, r2
    1212:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1214:	68bb      	ldr	r3, [r7, #8]
    1216:	689b      	ldr	r3, [r3, #8]
    1218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    121a:	4313      	orrs	r3, r2
    121c:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    121e:	68bb      	ldr	r3, [r7, #8]
    1220:	2224      	movs	r2, #36	; 0x24
    1222:	5c9b      	ldrb	r3, [r3, r2]
    1224:	2b00      	cmp	r3, #0
    1226:	d004      	beq.n	1232 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    122a:	2280      	movs	r2, #128	; 0x80
    122c:	05d2      	lsls	r2, r2, #23
    122e:	4313      	orrs	r3, r2
    1230:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1232:	68bb      	ldr	r3, [r7, #8]
    1234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1236:	2b00      	cmp	r3, #0
    1238:	d004      	beq.n	1244 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    123e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1240:	4313      	orrs	r3, r2
    1242:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1244:	68bb      	ldr	r3, [r7, #8]
    1246:	222c      	movs	r2, #44	; 0x2c
    1248:	5c9b      	ldrb	r3, [r3, r2]
    124a:	2b00      	cmp	r3, #0
    124c:	d105      	bne.n	125a <_i2c_master_set_config+0x176>
    124e:	68bb      	ldr	r3, [r7, #8]
    1250:	689a      	ldr	r2, [r3, #8]
    1252:	2380      	movs	r3, #128	; 0x80
    1254:	049b      	lsls	r3, r3, #18
    1256:	429a      	cmp	r2, r3
    1258:	d104      	bne.n	1264 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    125a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    125c:	2280      	movs	r2, #128	; 0x80
    125e:	0512      	lsls	r2, r2, #20
    1260:	4313      	orrs	r3, r2
    1262:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1264:	68bb      	ldr	r3, [r7, #8]
    1266:	222d      	movs	r2, #45	; 0x2d
    1268:	5c9b      	ldrb	r3, [r3, r2]
    126a:	2b00      	cmp	r3, #0
    126c:	d004      	beq.n	1278 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    126e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1270:	2280      	movs	r2, #128	; 0x80
    1272:	0412      	lsls	r2, r2, #16
    1274:	4313      	orrs	r3, r2
    1276:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1278:	68bb      	ldr	r3, [r7, #8]
    127a:	222e      	movs	r2, #46	; 0x2e
    127c:	5c9b      	ldrb	r3, [r3, r2]
    127e:	2b00      	cmp	r3, #0
    1280:	d004      	beq.n	128c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1284:	2280      	movs	r2, #128	; 0x80
    1286:	03d2      	lsls	r2, r2, #15
    1288:	4313      	orrs	r3, r2
    128a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    128e:	681a      	ldr	r2, [r3, #0]
    1290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1292:	431a      	orrs	r2, r3
    1294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1296:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	0052      	lsls	r2, r2, #1
    129e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    12a0:	2323      	movs	r3, #35	; 0x23
    12a2:	2208      	movs	r2, #8
    12a4:	4694      	mov	ip, r2
    12a6:	44bc      	add	ip, r7
    12a8:	4463      	add	r3, ip
    12aa:	781b      	ldrb	r3, [r3, #0]
    12ac:	3314      	adds	r3, #20
    12ae:	b2db      	uxtb	r3, r3
    12b0:	1c18      	adds	r0, r3, #0
    12b2:	4b64      	ldr	r3, [pc, #400]	; (1444 <_i2c_master_set_config+0x360>)
    12b4:	4798      	blx	r3
    12b6:	1c03      	adds	r3, r0, #0
    12b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    12ba:	68bb      	ldr	r3, [r7, #8]
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	22fa      	movs	r2, #250	; 0xfa
    12c0:	0092      	lsls	r2, r2, #2
    12c2:	4353      	muls	r3, r2
    12c4:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    12c6:	68bb      	ldr	r3, [r7, #8]
    12c8:	685b      	ldr	r3, [r3, #4]
    12ca:	22fa      	movs	r2, #250	; 0xfa
    12cc:	0092      	lsls	r2, r2, #2
    12ce:	4353      	muls	r3, r2
    12d0:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    12d2:	68bb      	ldr	r3, [r7, #8]
    12d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    12d6:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    12d8:	4b5b      	ldr	r3, [pc, #364]	; (1448 <_i2c_master_set_config+0x364>)
    12da:	6a78      	ldr	r0, [r7, #36]	; 0x24
    12dc:	4798      	blx	r3
    12de:	1c05      	adds	r5, r0, #0
    12e0:	1c0e      	adds	r6, r1, #0
    12e2:	4b59      	ldr	r3, [pc, #356]	; (1448 <_i2c_master_set_config+0x364>)
    12e4:	6a38      	ldr	r0, [r7, #32]
    12e6:	4798      	blx	r3
    12e8:	6038      	str	r0, [r7, #0]
    12ea:	6079      	str	r1, [r7, #4]
    12ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12ee:	69ba      	ldr	r2, [r7, #24]
    12f0:	435a      	muls	r2, r3
    12f2:	4b55      	ldr	r3, [pc, #340]	; (1448 <_i2c_master_set_config+0x364>)
    12f4:	1c10      	adds	r0, r2, #0
    12f6:	4798      	blx	r3
    12f8:	1c02      	adds	r2, r0, #0
    12fa:	1c0b      	adds	r3, r1, #0
    12fc:	4c53      	ldr	r4, [pc, #332]	; (144c <_i2c_master_set_config+0x368>)
    12fe:	1c10      	adds	r0, r2, #0
    1300:	1c19      	adds	r1, r3, #0
    1302:	4a53      	ldr	r2, [pc, #332]	; (1450 <_i2c_master_set_config+0x36c>)
    1304:	4b53      	ldr	r3, [pc, #332]	; (1454 <_i2c_master_set_config+0x370>)
    1306:	47a0      	blx	r4
    1308:	1c03      	adds	r3, r0, #0
    130a:	1c0c      	adds	r4, r1, #0
    130c:	1c1a      	adds	r2, r3, #0
    130e:	1c23      	adds	r3, r4, #0
    1310:	4c51      	ldr	r4, [pc, #324]	; (1458 <_i2c_master_set_config+0x374>)
    1312:	1c10      	adds	r0, r2, #0
    1314:	1c19      	adds	r1, r3, #0
    1316:	2200      	movs	r2, #0
    1318:	4b50      	ldr	r3, [pc, #320]	; (145c <_i2c_master_set_config+0x378>)
    131a:	47a0      	blx	r4
    131c:	1c03      	adds	r3, r0, #0
    131e:	1c0c      	adds	r4, r1, #0
    1320:	1c1a      	adds	r2, r3, #0
    1322:	1c23      	adds	r3, r4, #0
    1324:	4c49      	ldr	r4, [pc, #292]	; (144c <_i2c_master_set_config+0x368>)
    1326:	6838      	ldr	r0, [r7, #0]
    1328:	6879      	ldr	r1, [r7, #4]
    132a:	47a0      	blx	r4
    132c:	1c03      	adds	r3, r0, #0
    132e:	1c0c      	adds	r4, r1, #0
    1330:	1c1a      	adds	r2, r3, #0
    1332:	1c23      	adds	r3, r4, #0
    1334:	4c4a      	ldr	r4, [pc, #296]	; (1460 <_i2c_master_set_config+0x37c>)
    1336:	1c28      	adds	r0, r5, #0
    1338:	1c31      	adds	r1, r6, #0
    133a:	47a0      	blx	r4
    133c:	1c03      	adds	r3, r0, #0
    133e:	1c0c      	adds	r4, r1, #0
    1340:	1c1d      	adds	r5, r3, #0
    1342:	1c26      	adds	r6, r4, #0
    1344:	6a3b      	ldr	r3, [r7, #32]
    1346:	005a      	lsls	r2, r3, #1
    1348:	4b3f      	ldr	r3, [pc, #252]	; (1448 <_i2c_master_set_config+0x364>)
    134a:	1c10      	adds	r0, r2, #0
    134c:	4798      	blx	r3
    134e:	1c02      	adds	r2, r0, #0
    1350:	1c0b      	adds	r3, r1, #0
    1352:	4c41      	ldr	r4, [pc, #260]	; (1458 <_i2c_master_set_config+0x374>)
    1354:	1c28      	adds	r0, r5, #0
    1356:	1c31      	adds	r1, r6, #0
    1358:	47a0      	blx	r4
    135a:	1c03      	adds	r3, r0, #0
    135c:	1c0c      	adds	r4, r1, #0
    135e:	1c1a      	adds	r2, r3, #0
    1360:	1c23      	adds	r3, r4, #0
    1362:	4c3f      	ldr	r4, [pc, #252]	; (1460 <_i2c_master_set_config+0x37c>)
    1364:	1c10      	adds	r0, r2, #0
    1366:	1c19      	adds	r1, r3, #0
    1368:	2200      	movs	r2, #0
    136a:	4b3e      	ldr	r3, [pc, #248]	; (1464 <_i2c_master_set_config+0x380>)
    136c:	47a0      	blx	r4
    136e:	1c03      	adds	r3, r0, #0
    1370:	1c0c      	adds	r4, r1, #0
    1372:	1c1d      	adds	r5, r3, #0
    1374:	1c26      	adds	r6, r4, #0
    1376:	6a3b      	ldr	r3, [r7, #32]
    1378:	005a      	lsls	r2, r3, #1
    137a:	4b33      	ldr	r3, [pc, #204]	; (1448 <_i2c_master_set_config+0x364>)
    137c:	1c10      	adds	r0, r2, #0
    137e:	4798      	blx	r3
    1380:	1c02      	adds	r2, r0, #0
    1382:	1c0b      	adds	r3, r1, #0
    1384:	4c38      	ldr	r4, [pc, #224]	; (1468 <_i2c_master_set_config+0x384>)
    1386:	1c28      	adds	r0, r5, #0
    1388:	1c31      	adds	r1, r6, #0
    138a:	47a0      	blx	r4
    138c:	1c03      	adds	r3, r0, #0
    138e:	1c0c      	adds	r4, r1, #0
    1390:	1c19      	adds	r1, r3, #0
    1392:	1c22      	adds	r2, r4, #0
    1394:	4b35      	ldr	r3, [pc, #212]	; (146c <_i2c_master_set_config+0x388>)
    1396:	1c08      	adds	r0, r1, #0
    1398:	1c11      	adds	r1, r2, #0
    139a:	4798      	blx	r3
    139c:	1c03      	adds	r3, r0, #0
    139e:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	689a      	ldr	r2, [r3, #8]
    13a4:	2380      	movs	r3, #128	; 0x80
    13a6:	049b      	lsls	r3, r3, #18
    13a8:	429a      	cmp	r2, r3
    13aa:	d173      	bne.n	1494 <_i2c_master_set_config+0x3b0>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    13ac:	4b26      	ldr	r3, [pc, #152]	; (1448 <_i2c_master_set_config+0x364>)
    13ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
    13b0:	4798      	blx	r3
    13b2:	1c02      	adds	r2, r0, #0
    13b4:	1c0b      	adds	r3, r1, #0
    13b6:	4c28      	ldr	r4, [pc, #160]	; (1458 <_i2c_master_set_config+0x374>)
    13b8:	1c10      	adds	r0, r2, #0
    13ba:	1c19      	adds	r1, r3, #0
    13bc:	47a0      	blx	r4
    13be:	1c03      	adds	r3, r0, #0
    13c0:	1c0c      	adds	r4, r1, #0
    13c2:	1c1d      	adds	r5, r3, #0
    13c4:	1c26      	adds	r6, r4, #0
    13c6:	4b20      	ldr	r3, [pc, #128]	; (1448 <_i2c_master_set_config+0x364>)
    13c8:	69f8      	ldr	r0, [r7, #28]
    13ca:	4798      	blx	r3
    13cc:	1c02      	adds	r2, r0, #0
    13ce:	1c0b      	adds	r3, r1, #0
    13d0:	4c1e      	ldr	r4, [pc, #120]	; (144c <_i2c_master_set_config+0x368>)
    13d2:	1c10      	adds	r0, r2, #0
    13d4:	1c19      	adds	r1, r3, #0
    13d6:	2200      	movs	r2, #0
    13d8:	4b25      	ldr	r3, [pc, #148]	; (1470 <_i2c_master_set_config+0x38c>)
    13da:	47a0      	blx	r4
    13dc:	1c03      	adds	r3, r0, #0
    13de:	1c0c      	adds	r4, r1, #0
    13e0:	1c1a      	adds	r2, r3, #0
    13e2:	1c23      	adds	r3, r4, #0
    13e4:	4c20      	ldr	r4, [pc, #128]	; (1468 <_i2c_master_set_config+0x384>)
    13e6:	1c28      	adds	r0, r5, #0
    13e8:	1c31      	adds	r1, r6, #0
    13ea:	47a0      	blx	r4
    13ec:	1c03      	adds	r3, r0, #0
    13ee:	1c0c      	adds	r4, r1, #0
    13f0:	1c1a      	adds	r2, r3, #0
    13f2:	1c23      	adds	r3, r4, #0
    13f4:	4c1a      	ldr	r4, [pc, #104]	; (1460 <_i2c_master_set_config+0x37c>)
    13f6:	1c10      	adds	r0, r2, #0
    13f8:	1c19      	adds	r1, r3, #0
    13fa:	2200      	movs	r2, #0
    13fc:	4b19      	ldr	r3, [pc, #100]	; (1464 <_i2c_master_set_config+0x380>)
    13fe:	47a0      	blx	r4
    1400:	1c03      	adds	r3, r0, #0
    1402:	1c0c      	adds	r4, r1, #0
    1404:	1c19      	adds	r1, r3, #0
    1406:	1c22      	adds	r2, r4, #0
    1408:	4b18      	ldr	r3, [pc, #96]	; (146c <_i2c_master_set_config+0x388>)
    140a:	1c08      	adds	r0, r1, #0
    140c:	1c11      	adds	r1, r2, #0
    140e:	4798      	blx	r3
    1410:	1c03      	adds	r3, r0, #0
    1412:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    1414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1416:	2b00      	cmp	r3, #0
    1418:	d02e      	beq.n	1478 <_i2c_master_set_config+0x394>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    141a:	4b16      	ldr	r3, [pc, #88]	; (1474 <_i2c_master_set_config+0x390>)
    141c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    141e:	69f9      	ldr	r1, [r7, #28]
    1420:	4798      	blx	r3
    1422:	1c03      	adds	r3, r0, #0
    1424:	1e9a      	subs	r2, r3, #2
    1426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1428:	1ad3      	subs	r3, r2, r3
    142a:	64bb      	str	r3, [r7, #72]	; 0x48
    142c:	e032      	b.n	1494 <_i2c_master_set_config+0x3b0>
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	00003e61 	.word	0x00003e61
    1434:	00001059 	.word	0x00001059
    1438:	00003ca5 	.word	0x00003ca5
    143c:	00004d1d 	.word	0x00004d1d
    1440:	00001081 	.word	0x00001081
    1444:	00004b55 	.word	0x00004b55
    1448:	00008ec5 	.word	0x00008ec5
    144c:	00008231 	.word	0x00008231
    1450:	e826d695 	.word	0xe826d695
    1454:	3e112e0b 	.word	0x3e112e0b
    1458:	00007599 	.word	0x00007599
    145c:	40240000 	.word	0x40240000
    1460:	00008765 	.word	0x00008765
    1464:	3ff00000 	.word	0x3ff00000
    1468:	00007be9 	.word	0x00007be9
    146c:	00008e59 	.word	0x00008e59
    1470:	40080000 	.word	0x40080000
    1474:	00007475 	.word	0x00007475
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1478:	69fb      	ldr	r3, [r7, #28]
    147a:	005a      	lsls	r2, r3, #1
    147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    147e:	18d3      	adds	r3, r2, r3
    1480:	1e59      	subs	r1, r3, #1
    1482:	69fb      	ldr	r3, [r7, #28]
    1484:	005a      	lsls	r2, r3, #1
    1486:	4b1d      	ldr	r3, [pc, #116]	; (14fc <_i2c_master_set_config+0x418>)
    1488:	1c08      	adds	r0, r1, #0
    148a:	1c11      	adds	r1, r2, #0
    148c:	4798      	blx	r3
    148e:	1c03      	adds	r3, r0, #0
    1490:	3b01      	subs	r3, #1
    1492:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1496:	2bff      	cmp	r3, #255	; 0xff
    1498:	dc08      	bgt.n	14ac <_i2c_master_set_config+0x3c8>
    149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    149c:	2b00      	cmp	r3, #0
    149e:	db05      	blt.n	14ac <_i2c_master_set_config+0x3c8>
    14a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14a2:	2bff      	cmp	r3, #255	; 0xff
    14a4:	dc02      	bgt.n	14ac <_i2c_master_set_config+0x3c8>
    14a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14a8:	2b00      	cmp	r3, #0
    14aa:	da06      	bge.n	14ba <_i2c_master_set_config+0x3d6>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14ac:	233b      	movs	r3, #59	; 0x3b
    14ae:	2208      	movs	r2, #8
    14b0:	4694      	mov	ip, r2
    14b2:	44bc      	add	ip, r7
    14b4:	4463      	add	r3, ip
    14b6:	2240      	movs	r2, #64	; 0x40
    14b8:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    14ba:	233b      	movs	r3, #59	; 0x3b
    14bc:	2208      	movs	r2, #8
    14be:	4694      	mov	ip, r2
    14c0:	44bc      	add	ip, r7
    14c2:	4463      	add	r3, ip
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	2b40      	cmp	r3, #64	; 0x40
    14c8:	d00e      	beq.n	14e8 <_i2c_master_set_config+0x404>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14cc:	22ff      	movs	r2, #255	; 0xff
    14ce:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    14d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    14d2:	041b      	lsls	r3, r3, #16
    14d4:	1c19      	adds	r1, r3, #0
    14d6:	23ff      	movs	r3, #255	; 0xff
    14d8:	041b      	lsls	r3, r3, #16
    14da:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14dc:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    14de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    14e0:	0612      	lsls	r2, r2, #24
    14e2:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14e6:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    14e8:	233b      	movs	r3, #59	; 0x3b
    14ea:	2208      	movs	r2, #8
    14ec:	4694      	mov	ip, r2
    14ee:	44bc      	add	ip, r7
    14f0:	4463      	add	r3, ip
    14f2:	781b      	ldrb	r3, [r3, #0]
}
    14f4:	1c18      	adds	r0, r3, #0
    14f6:	46bd      	mov	sp, r7
    14f8:	b015      	add	sp, #84	; 0x54
    14fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14fc:	00007475 	.word	0x00007475

00001500 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1500:	b590      	push	{r4, r7, lr}
    1502:	b08b      	sub	sp, #44	; 0x2c
    1504:	af00      	add	r7, sp, #0
    1506:	60f8      	str	r0, [r7, #12]
    1508:	60b9      	str	r1, [r7, #8]
    150a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	68ba      	ldr	r2, [r7, #8]
    1510:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1518:	68fb      	ldr	r3, [r7, #12]
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	1c18      	adds	r0, r3, #0
    151e:	4b3b      	ldr	r3, [pc, #236]	; (160c <i2c_master_init+0x10c>)
    1520:	4798      	blx	r3
    1522:	1c03      	adds	r3, r0, #0
    1524:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1526:	6a3b      	ldr	r3, [r7, #32]
    1528:	3302      	adds	r3, #2
    152a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    152c:	6a3b      	ldr	r3, [r7, #32]
    152e:	3314      	adds	r3, #20
    1530:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1532:	69fb      	ldr	r3, [r7, #28]
    1534:	2201      	movs	r2, #1
    1536:	409a      	lsls	r2, r3
    1538:	1c13      	adds	r3, r2, #0
    153a:	2002      	movs	r0, #2
    153c:	1c19      	adds	r1, r3, #0
    153e:	4b34      	ldr	r3, [pc, #208]	; (1610 <i2c_master_init+0x110>)
    1540:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1542:	2314      	movs	r3, #20
    1544:	18fb      	adds	r3, r7, r3
    1546:	1c18      	adds	r0, r3, #0
    1548:	4b32      	ldr	r3, [pc, #200]	; (1614 <i2c_master_init+0x114>)
    154a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	7b1a      	ldrb	r2, [r3, #12]
    1550:	2314      	movs	r3, #20
    1552:	18fb      	adds	r3, r7, r3
    1554:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1556:	69bb      	ldr	r3, [r7, #24]
    1558:	b2da      	uxtb	r2, r3
    155a:	2314      	movs	r3, #20
    155c:	18fb      	adds	r3, r7, r3
    155e:	1c10      	adds	r0, r2, #0
    1560:	1c19      	adds	r1, r3, #0
    1562:	4b2d      	ldr	r3, [pc, #180]	; (1618 <i2c_master_init+0x118>)
    1564:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1566:	69bb      	ldr	r3, [r7, #24]
    1568:	b2db      	uxtb	r3, r3
    156a:	1c18      	adds	r0, r3, #0
    156c:	4b2b      	ldr	r3, [pc, #172]	; (161c <i2c_master_init+0x11c>)
    156e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	7b1b      	ldrb	r3, [r3, #12]
    1574:	1c18      	adds	r0, r3, #0
    1576:	2100      	movs	r1, #0
    1578:	4b29      	ldr	r3, [pc, #164]	; (1620 <i2c_master_init+0x120>)
    157a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2202      	movs	r2, #2
    1582:	4013      	ands	r3, r2
    1584:	d001      	beq.n	158a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1586:	231c      	movs	r3, #28
    1588:	e03b      	b.n	1602 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	2201      	movs	r2, #1
    1590:	4013      	ands	r3, r2
    1592:	d001      	beq.n	1598 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1594:	2305      	movs	r3, #5
    1596:	e034      	b.n	1602 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	2217      	movs	r2, #23
    159e:	18bc      	adds	r4, r7, r2
    15a0:	1c18      	adds	r0, r3, #0
    15a2:	4b1a      	ldr	r3, [pc, #104]	; (160c <i2c_master_init+0x10c>)
    15a4:	4798      	blx	r3
    15a6:	1c03      	adds	r3, r0, #0
    15a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    15aa:	2317      	movs	r3, #23
    15ac:	18fb      	adds	r3, r7, r3
    15ae:	781a      	ldrb	r2, [r3, #0]
    15b0:	4b1c      	ldr	r3, [pc, #112]	; (1624 <i2c_master_init+0x124>)
    15b2:	1c10      	adds	r0, r2, #0
    15b4:	1c19      	adds	r1, r3, #0
    15b6:	4b1c      	ldr	r3, [pc, #112]	; (1628 <i2c_master_init+0x128>)
    15b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15ba:	2317      	movs	r3, #23
    15bc:	18fb      	adds	r3, r7, r3
    15be:	781a      	ldrb	r2, [r3, #0]
    15c0:	4b1a      	ldr	r3, [pc, #104]	; (162c <i2c_master_init+0x12c>)
    15c2:	0092      	lsls	r2, r2, #2
    15c4:	68f9      	ldr	r1, [r7, #12]
    15c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    15c8:	68fb      	ldr	r3, [r7, #12]
    15ca:	2200      	movs	r2, #0
    15cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	2200      	movs	r2, #0
    15d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	2200      	movs	r2, #0
    15d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	2200      	movs	r2, #0
    15de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    15e0:	68fb      	ldr	r3, [r7, #12]
    15e2:	2225      	movs	r2, #37	; 0x25
    15e4:	2100      	movs	r1, #0
    15e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	2200      	movs	r2, #0
    15ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    15ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15f0:	2214      	movs	r2, #20
    15f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    15f4:	68fa      	ldr	r2, [r7, #12]
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	1c10      	adds	r0, r2, #0
    15fa:	1c19      	adds	r1, r3, #0
    15fc:	4b0c      	ldr	r3, [pc, #48]	; (1630 <i2c_master_init+0x130>)
    15fe:	4798      	blx	r3
    1600:	1c03      	adds	r3, r0, #0
}
    1602:	1c18      	adds	r0, r3, #0
    1604:	46bd      	mov	sp, r7
    1606:	b00b      	add	sp, #44	; 0x2c
    1608:	bd90      	pop	{r4, r7, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	00003e61 	.word	0x00003e61
    1610:	00000ffd 	.word	0x00000ffd
    1614:	00000fe9 	.word	0x00000fe9
    1618:	00004a31 	.word	0x00004a31
    161c:	00004a75 	.word	0x00004a75
    1620:	00003c19 	.word	0x00003c19
    1624:	00001e21 	.word	0x00001e21
    1628:	00003ec1 	.word	0x00003ec1
    162c:	200000fc 	.word	0x200000fc
    1630:	000010e5 	.word	0x000010e5

00001634 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1642:	68fb      	ldr	r3, [r7, #12]
    1644:	7e1b      	ldrb	r3, [r3, #24]
    1646:	b2db      	uxtb	r3, r3
    1648:	1c1a      	adds	r2, r3, #0
    164a:	2302      	movs	r3, #2
    164c:	4013      	ands	r3, r2
    164e:	d00b      	beq.n	1668 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1650:	68fb      	ldr	r3, [r7, #12]
    1652:	2202      	movs	r2, #2
    1654:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	8b5b      	ldrh	r3, [r3, #26]
    165a:	b29b      	uxth	r3, r3
    165c:	1c1a      	adds	r2, r3, #0
    165e:	2302      	movs	r3, #2
    1660:	4013      	ands	r3, r2
    1662:	d011      	beq.n	1688 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1664:	2341      	movs	r3, #65	; 0x41
    1666:	e010      	b.n	168a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	8b5b      	ldrh	r3, [r3, #26]
    166c:	b29b      	uxth	r3, r3
    166e:	1c1a      	adds	r2, r3, #0
    1670:	2304      	movs	r3, #4
    1672:	4013      	ands	r3, r2
    1674:	d008      	beq.n	1688 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1676:	68fb      	ldr	r3, [r7, #12]
    1678:	685b      	ldr	r3, [r3, #4]
    167a:	22c0      	movs	r2, #192	; 0xc0
    167c:	0292      	lsls	r2, r2, #10
    167e:	431a      	orrs	r2, r3
    1680:	68fb      	ldr	r3, [r7, #12]
    1682:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1684:	2318      	movs	r3, #24
    1686:	e000      	b.n	168a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1688:	2300      	movs	r3, #0
}
    168a:	1c18      	adds	r0, r3, #0
    168c:	46bd      	mov	sp, r7
    168e:	b004      	add	sp, #16
    1690:	bd80      	pop	{r7, pc}
    1692:	46c0      	nop			; (mov r8, r8)

00001694 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1694:	b580      	push	{r7, lr}
    1696:	b084      	sub	sp, #16
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    16a2:	230e      	movs	r3, #14
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	2200      	movs	r2, #0
    16a8:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16aa:	e00f      	b.n	16cc <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    16ac:	230e      	movs	r3, #14
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	220e      	movs	r2, #14
    16b2:	18ba      	adds	r2, r7, r2
    16b4:	8812      	ldrh	r2, [r2, #0]
    16b6:	3201      	adds	r2, #1
    16b8:	801a      	strh	r2, [r3, #0]
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	891b      	ldrh	r3, [r3, #8]
    16be:	220e      	movs	r2, #14
    16c0:	18ba      	adds	r2, r7, r2
    16c2:	8812      	ldrh	r2, [r2, #0]
    16c4:	429a      	cmp	r2, r3
    16c6:	d301      	bcc.n	16cc <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    16c8:	2312      	movs	r3, #18
    16ca:	e00e      	b.n	16ea <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16cc:	68bb      	ldr	r3, [r7, #8]
    16ce:	7e1b      	ldrb	r3, [r3, #24]
    16d0:	b2db      	uxtb	r3, r3
    16d2:	1c1a      	adds	r2, r3, #0
    16d4:	2301      	movs	r3, #1
    16d6:	4013      	ands	r3, r2
    16d8:	d106      	bne.n	16e8 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    16da:	68bb      	ldr	r3, [r7, #8]
    16dc:	7e1b      	ldrb	r3, [r3, #24]
    16de:	b2db      	uxtb	r3, r3
    16e0:	1c1a      	adds	r2, r3, #0
    16e2:	2302      	movs	r3, #2
    16e4:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16e6:	d0e1      	beq.n	16ac <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    16e8:	2300      	movs	r3, #0
}
    16ea:	1c18      	adds	r0, r3, #0
    16ec:	46bd      	mov	sp, r7
    16ee:	b004      	add	sp, #16
    16f0:	bd80      	pop	{r7, pc}
    16f2:	46c0      	nop			; (mov r8, r8)

000016f4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    16f4:	b590      	push	{r4, r7, lr}
    16f6:	b085      	sub	sp, #20
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
    16fc:	1c0a      	adds	r2, r1, #0
    16fe:	1cfb      	adds	r3, r7, #3
    1700:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	685b      	ldr	r3, [r3, #4]
    170c:	2280      	movs	r2, #128	; 0x80
    170e:	02d2      	lsls	r2, r2, #11
    1710:	431a      	orrs	r2, r3
    1712:	68fb      	ldr	r3, [r7, #12]
    1714:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1716:	1cfb      	adds	r3, r7, #3
    1718:	781a      	ldrb	r2, [r3, #0]
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    171e:	230b      	movs	r3, #11
    1720:	18fc      	adds	r4, r7, r3
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	1c18      	adds	r0, r3, #0
    1726:	4b07      	ldr	r3, [pc, #28]	; (1744 <_i2c_master_send_hs_master_code+0x50>)
    1728:	4798      	blx	r3
    172a:	1c03      	adds	r3, r0, #0
    172c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2201      	movs	r2, #1
    1732:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1734:	230b      	movs	r3, #11
    1736:	18fb      	adds	r3, r7, r3
    1738:	781b      	ldrb	r3, [r3, #0]
}
    173a:	1c18      	adds	r0, r3, #0
    173c:	46bd      	mov	sp, r7
    173e:	b005      	add	sp, #20
    1740:	bd90      	pop	{r4, r7, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	00001695 	.word	0x00001695

00001748 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1748:	b590      	push	{r4, r7, lr}
    174a:	b087      	sub	sp, #28
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
    1750:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1758:	2314      	movs	r3, #20
    175a:	18fb      	adds	r3, r7, r3
    175c:	683a      	ldr	r2, [r7, #0]
    175e:	8852      	ldrh	r2, [r2, #2]
    1760:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1762:	2312      	movs	r3, #18
    1764:	18fb      	adds	r3, r7, r3
    1766:	2200      	movs	r2, #0
    1768:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    176a:	68fb      	ldr	r3, [r7, #12]
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	0edb      	lsrs	r3, r3, #27
    1770:	1c1a      	adds	r2, r3, #0
    1772:	2301      	movs	r3, #1
    1774:	4013      	ands	r3, r2
    1776:	b2db      	uxtb	r3, r3
    1778:	1c1a      	adds	r2, r3, #0
    177a:	230b      	movs	r3, #11
    177c:	18fb      	adds	r3, r7, r3
    177e:	1e51      	subs	r1, r2, #1
    1780:	418a      	sbcs	r2, r1
    1782:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1784:	683b      	ldr	r3, [r7, #0]
    1786:	7a5b      	ldrb	r3, [r3, #9]
    1788:	2b00      	cmp	r3, #0
    178a:	d006      	beq.n	179a <_i2c_master_read_packet+0x52>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    178c:	683b      	ldr	r3, [r7, #0]
    178e:	7a9b      	ldrb	r3, [r3, #10]
    1790:	687a      	ldr	r2, [r7, #4]
    1792:	1c10      	adds	r0, r2, #0
    1794:	1c19      	adds	r1, r3, #0
    1796:	4b84      	ldr	r3, [pc, #528]	; (19a8 <_i2c_master_read_packet+0x260>)
    1798:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    179a:	68fb      	ldr	r3, [r7, #12]
    179c:	685b      	ldr	r3, [r3, #4]
    179e:	4a83      	ldr	r2, [pc, #524]	; (19ac <_i2c_master_read_packet+0x264>)
    17a0:	401a      	ands	r2, r3
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    17a6:	683b      	ldr	r3, [r7, #0]
    17a8:	7a1b      	ldrb	r3, [r3, #8]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d042      	beq.n	1834 <_i2c_master_read_packet+0xec>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    17ae:	683b      	ldr	r3, [r7, #0]
    17b0:	881b      	ldrh	r3, [r3, #0]
    17b2:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17b4:	683b      	ldr	r3, [r7, #0]
    17b6:	7a5b      	ldrb	r3, [r3, #9]
    17b8:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    17ba:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17bc:	1c1a      	adds	r2, r3, #0
    17be:	2380      	movs	r3, #128	; 0x80
    17c0:	021b      	lsls	r3, r3, #8
    17c2:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    17c4:	68fb      	ldr	r3, [r7, #12]
    17c6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    17c8:	2317      	movs	r3, #23
    17ca:	18fc      	adds	r4, r7, r3
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	1c18      	adds	r0, r3, #0
    17d0:	4b77      	ldr	r3, [pc, #476]	; (19b0 <_i2c_master_read_packet+0x268>)
    17d2:	4798      	blx	r3
    17d4:	1c03      	adds	r3, r0, #0
    17d6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	685b      	ldr	r3, [r3, #4]
    17dc:	4a73      	ldr	r2, [pc, #460]	; (19ac <_i2c_master_read_packet+0x264>)
    17de:	401a      	ands	r2, r3
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    17e4:	2317      	movs	r3, #23
    17e6:	18fb      	adds	r3, r7, r3
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d107      	bne.n	17fe <_i2c_master_read_packet+0xb6>
			tmp_status = _i2c_master_address_response(module);
    17ee:	2317      	movs	r3, #23
    17f0:	18fc      	adds	r4, r7, r3
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	1c18      	adds	r0, r3, #0
    17f6:	4b6f      	ldr	r3, [pc, #444]	; (19b4 <_i2c_master_read_packet+0x26c>)
    17f8:	4798      	blx	r3
    17fa:	1c03      	adds	r3, r0, #0
    17fc:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    17fe:	2317      	movs	r3, #23
    1800:	18fb      	adds	r3, r7, r3
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	d111      	bne.n	182c <_i2c_master_read_packet+0xe4>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1808:	683b      	ldr	r3, [r7, #0]
    180a:	881b      	ldrh	r3, [r3, #0]
    180c:	0a1b      	lsrs	r3, r3, #8
    180e:	b29b      	uxth	r3, r3
    1810:	2278      	movs	r2, #120	; 0x78
    1812:	4313      	orrs	r3, r2
    1814:	b29b      	uxth	r3, r3
    1816:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1818:	683b      	ldr	r3, [r7, #0]
    181a:	7a5b      	ldrb	r3, [r3, #9]
    181c:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    181e:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1820:	2201      	movs	r2, #1
    1822:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1824:	1c1a      	adds	r2, r3, #0
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	625a      	str	r2, [r3, #36]	; 0x24
    182a:	e00f      	b.n	184c <_i2c_master_read_packet+0x104>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    182c:	2317      	movs	r3, #23
    182e:	18fb      	adds	r3, r7, r3
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	e0b5      	b.n	19a0 <_i2c_master_read_packet+0x258>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1834:	683b      	ldr	r3, [r7, #0]
    1836:	881b      	ldrh	r3, [r3, #0]
    1838:	005b      	lsls	r3, r3, #1
    183a:	2201      	movs	r2, #1
    183c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	7a5b      	ldrb	r3, [r3, #9]
    1842:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1844:	4313      	orrs	r3, r2
    1846:	1c1a      	adds	r2, r3, #0
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    184c:	2317      	movs	r3, #23
    184e:	18fc      	adds	r4, r7, r3
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	1c18      	adds	r0, r3, #0
    1854:	4b56      	ldr	r3, [pc, #344]	; (19b0 <_i2c_master_read_packet+0x268>)
    1856:	4798      	blx	r3
    1858:	1c03      	adds	r3, r0, #0
    185a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    185c:	230b      	movs	r3, #11
    185e:	18fb      	adds	r3, r7, r3
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d00b      	beq.n	187e <_i2c_master_read_packet+0x136>
    1866:	683b      	ldr	r3, [r7, #0]
    1868:	885b      	ldrh	r3, [r3, #2]
    186a:	2b01      	cmp	r3, #1
    186c:	d107      	bne.n	187e <_i2c_master_read_packet+0x136>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	685b      	ldr	r3, [r3, #4]
    1872:	2280      	movs	r2, #128	; 0x80
    1874:	02d2      	lsls	r2, r2, #11
    1876:	431a      	orrs	r2, r3
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	605a      	str	r2, [r3, #4]
    187c:	e005      	b.n	188a <_i2c_master_read_packet+0x142>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	685b      	ldr	r3, [r3, #4]
    1882:	4a4a      	ldr	r2, [pc, #296]	; (19ac <_i2c_master_read_packet+0x264>)
    1884:	401a      	ands	r2, r3
    1886:	68fb      	ldr	r3, [r7, #12]
    1888:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    188a:	2317      	movs	r3, #23
    188c:	18fb      	adds	r3, r7, r3
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	2b00      	cmp	r3, #0
    1892:	d107      	bne.n	18a4 <_i2c_master_read_packet+0x15c>
		tmp_status = _i2c_master_address_response(module);
    1894:	2317      	movs	r3, #23
    1896:	18fc      	adds	r4, r7, r3
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	1c18      	adds	r0, r3, #0
    189c:	4b45      	ldr	r3, [pc, #276]	; (19b4 <_i2c_master_read_packet+0x26c>)
    189e:	4798      	blx	r3
    18a0:	1c03      	adds	r3, r0, #0
    18a2:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    18a4:	2317      	movs	r3, #23
    18a6:	18fb      	adds	r3, r7, r3
    18a8:	781b      	ldrb	r3, [r3, #0]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d000      	beq.n	18b0 <_i2c_master_read_packet+0x168>
    18ae:	e074      	b.n	199a <_i2c_master_read_packet+0x252>
		/* Read data buffer. */
		while (tmp_data_length--) {
    18b0:	e04c      	b.n	194c <_i2c_master_read_packet+0x204>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	8b5b      	ldrh	r3, [r3, #26]
    18b6:	b29b      	uxth	r3, r3
    18b8:	1c1a      	adds	r2, r3, #0
    18ba:	2320      	movs	r3, #32
    18bc:	4013      	ands	r3, r2
    18be:	d101      	bne.n	18c4 <_i2c_master_read_packet+0x17c>
				return STATUS_ERR_PACKET_COLLISION;
    18c0:	2341      	movs	r3, #65	; 0x41
    18c2:	e06d      	b.n	19a0 <_i2c_master_read_packet+0x258>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	7adb      	ldrb	r3, [r3, #11]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d01e      	beq.n	190a <_i2c_master_read_packet+0x1c2>
    18cc:	230b      	movs	r3, #11
    18ce:	18fb      	adds	r3, r7, r3
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	2201      	movs	r2, #1
    18d4:	4053      	eors	r3, r2
    18d6:	b2db      	uxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	d004      	beq.n	18e6 <_i2c_master_read_packet+0x19e>
    18dc:	2314      	movs	r3, #20
    18de:	18fb      	adds	r3, r7, r3
    18e0:	881b      	ldrh	r3, [r3, #0]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d009      	beq.n	18fa <_i2c_master_read_packet+0x1b2>
    18e6:	230b      	movs	r3, #11
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d00c      	beq.n	190a <_i2c_master_read_packet+0x1c2>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    18f0:	2314      	movs	r3, #20
    18f2:	18fb      	adds	r3, r7, r3
    18f4:	881b      	ldrh	r3, [r3, #0]
    18f6:	2b01      	cmp	r3, #1
    18f8:	d107      	bne.n	190a <_i2c_master_read_packet+0x1c2>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	685b      	ldr	r3, [r3, #4]
    18fe:	2280      	movs	r2, #128	; 0x80
    1900:	02d2      	lsls	r2, r2, #11
    1902:	431a      	orrs	r2, r3
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	605a      	str	r2, [r3, #4]
    1908:	e01a      	b.n	1940 <_i2c_master_read_packet+0x1f8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	1c18      	adds	r0, r3, #0
    190e:	4b2a      	ldr	r3, [pc, #168]	; (19b8 <_i2c_master_read_packet+0x270>)
    1910:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1912:	683b      	ldr	r3, [r7, #0]
    1914:	685a      	ldr	r2, [r3, #4]
    1916:	2312      	movs	r3, #18
    1918:	18fb      	adds	r3, r7, r3
    191a:	881b      	ldrh	r3, [r3, #0]
    191c:	2112      	movs	r1, #18
    191e:	1879      	adds	r1, r7, r1
    1920:	1c58      	adds	r0, r3, #1
    1922:	8008      	strh	r0, [r1, #0]
    1924:	18d3      	adds	r3, r2, r3
    1926:	68fa      	ldr	r2, [r7, #12]
    1928:	2128      	movs	r1, #40	; 0x28
    192a:	5c52      	ldrb	r2, [r2, r1]
    192c:	b2d2      	uxtb	r2, r2
    192e:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1930:	2317      	movs	r3, #23
    1932:	18fc      	adds	r4, r7, r3
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	1c18      	adds	r0, r3, #0
    1938:	4b1d      	ldr	r3, [pc, #116]	; (19b0 <_i2c_master_read_packet+0x268>)
    193a:	4798      	blx	r3
    193c:	1c03      	adds	r3, r0, #0
    193e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1940:	2317      	movs	r3, #23
    1942:	18fb      	adds	r3, r7, r3
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	2b00      	cmp	r3, #0
    1948:	d000      	beq.n	194c <_i2c_master_read_packet+0x204>
				break;
    194a:	e008      	b.n	195e <_i2c_master_read_packet+0x216>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    194c:	2314      	movs	r3, #20
    194e:	18fb      	adds	r3, r7, r3
    1950:	881b      	ldrh	r3, [r3, #0]
    1952:	2214      	movs	r2, #20
    1954:	18ba      	adds	r2, r7, r2
    1956:	1e59      	subs	r1, r3, #1
    1958:	8011      	strh	r1, [r2, #0]
    195a:	2b00      	cmp	r3, #0
    195c:	d1a9      	bne.n	18b2 <_i2c_master_read_packet+0x16a>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	7a9b      	ldrb	r3, [r3, #10]
    1962:	2b00      	cmp	r3, #0
    1964:	d00a      	beq.n	197c <_i2c_master_read_packet+0x234>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	1c18      	adds	r0, r3, #0
    196a:	4b13      	ldr	r3, [pc, #76]	; (19b8 <_i2c_master_read_packet+0x270>)
    196c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	685b      	ldr	r3, [r3, #4]
    1972:	22c0      	movs	r2, #192	; 0xc0
    1974:	0292      	lsls	r2, r2, #10
    1976:	431a      	orrs	r2, r3
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	1c18      	adds	r0, r3, #0
    1980:	4b0d      	ldr	r3, [pc, #52]	; (19b8 <_i2c_master_read_packet+0x270>)
    1982:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1984:	683b      	ldr	r3, [r7, #0]
    1986:	685a      	ldr	r2, [r3, #4]
    1988:	2312      	movs	r3, #18
    198a:	18fb      	adds	r3, r7, r3
    198c:	881b      	ldrh	r3, [r3, #0]
    198e:	18d3      	adds	r3, r2, r3
    1990:	68fa      	ldr	r2, [r7, #12]
    1992:	2128      	movs	r1, #40	; 0x28
    1994:	5c52      	ldrb	r2, [r2, r1]
    1996:	b2d2      	uxtb	r2, r2
    1998:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    199a:	2317      	movs	r3, #23
    199c:	18fb      	adds	r3, r7, r3
    199e:	781b      	ldrb	r3, [r3, #0]
}
    19a0:	1c18      	adds	r0, r3, #0
    19a2:	46bd      	mov	sp, r7
    19a4:	b007      	add	sp, #28
    19a6:	bd90      	pop	{r4, r7, pc}
    19a8:	000016f5 	.word	0x000016f5
    19ac:	fffbffff 	.word	0xfffbffff
    19b0:	00001695 	.word	0x00001695
    19b4:	00001635 	.word	0x00001635
    19b8:	000010c5 	.word	0x000010c5

000019bc <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19bc:	b580      	push	{r7, lr}
    19be:	b082      	sub	sp, #8
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	8b9b      	ldrh	r3, [r3, #28]
    19ca:	b29b      	uxth	r3, r3
    19cc:	2b00      	cmp	r3, #0
    19ce:	d001      	beq.n	19d4 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    19d0:	2305      	movs	r3, #5
    19d2:	e00c      	b.n	19ee <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	2201      	movs	r2, #1
    19d8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	2201      	movs	r2, #1
    19de:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    19e0:	687a      	ldr	r2, [r7, #4]
    19e2:	683b      	ldr	r3, [r7, #0]
    19e4:	1c10      	adds	r0, r2, #0
    19e6:	1c19      	adds	r1, r3, #0
    19e8:	4b03      	ldr	r3, [pc, #12]	; (19f8 <i2c_master_read_packet_wait+0x3c>)
    19ea:	4798      	blx	r3
    19ec:	1c03      	adds	r3, r0, #0
}
    19ee:	1c18      	adds	r0, r3, #0
    19f0:	46bd      	mov	sp, r7
    19f2:	b002      	add	sp, #8
    19f4:	bd80      	pop	{r7, pc}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	00001749 	.word	0x00001749

000019fc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19fc:	b590      	push	{r4, r7, lr}
    19fe:	b087      	sub	sp, #28
    1a00:	af00      	add	r7, sp, #0
    1a02:	6078      	str	r0, [r7, #4]
    1a04:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	681b      	ldr	r3, [r3, #0]
    1a0a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1a0c:	2314      	movs	r3, #20
    1a0e:	18fb      	adds	r3, r7, r3
    1a10:	683a      	ldr	r2, [r7, #0]
    1a12:	8852      	ldrh	r2, [r2, #2]
    1a14:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	1c18      	adds	r0, r3, #0
    1a1a:	4b51      	ldr	r3, [pc, #324]	; (1b60 <_i2c_master_write_packet+0x164>)
    1a1c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1a1e:	683b      	ldr	r3, [r7, #0]
    1a20:	7a5b      	ldrb	r3, [r3, #9]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d006      	beq.n	1a34 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1a26:	683b      	ldr	r3, [r7, #0]
    1a28:	7a9b      	ldrb	r3, [r3, #10]
    1a2a:	687a      	ldr	r2, [r7, #4]
    1a2c:	1c10      	adds	r0, r2, #0
    1a2e:	1c19      	adds	r1, r3, #0
    1a30:	4b4c      	ldr	r3, [pc, #304]	; (1b64 <_i2c_master_write_packet+0x168>)
    1a32:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	685b      	ldr	r3, [r3, #4]
    1a38:	4a4b      	ldr	r2, [pc, #300]	; (1b68 <_i2c_master_write_packet+0x16c>)
    1a3a:	401a      	ands	r2, r3
    1a3c:	68fb      	ldr	r3, [r7, #12]
    1a3e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1a40:	683b      	ldr	r3, [r7, #0]
    1a42:	7a1b      	ldrb	r3, [r3, #8]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d00d      	beq.n	1a64 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	881b      	ldrh	r3, [r3, #0]
    1a4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a4e:	683b      	ldr	r3, [r7, #0]
    1a50:	7a5b      	ldrb	r3, [r3, #9]
    1a52:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a54:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a56:	1c1a      	adds	r2, r3, #0
    1a58:	2380      	movs	r3, #128	; 0x80
    1a5a:	021b      	lsls	r3, r3, #8
    1a5c:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	625a      	str	r2, [r3, #36]	; 0x24
    1a62:	e009      	b.n	1a78 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a64:	683b      	ldr	r3, [r7, #0]
    1a66:	881b      	ldrh	r3, [r3, #0]
    1a68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1a6a:	683b      	ldr	r3, [r7, #0]
    1a6c:	7a5b      	ldrb	r3, [r3, #9]
    1a6e:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a70:	4313      	orrs	r3, r2
    1a72:	1c1a      	adds	r2, r3, #0
    1a74:	68fb      	ldr	r3, [r7, #12]
    1a76:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1a78:	2317      	movs	r3, #23
    1a7a:	18fc      	adds	r4, r7, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	1c18      	adds	r0, r3, #0
    1a80:	4b3a      	ldr	r3, [pc, #232]	; (1b6c <_i2c_master_write_packet+0x170>)
    1a82:	4798      	blx	r3
    1a84:	1c03      	adds	r3, r0, #0
    1a86:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1a88:	2317      	movs	r3, #23
    1a8a:	18fb      	adds	r3, r7, r3
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d107      	bne.n	1aa2 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1a92:	2317      	movs	r3, #23
    1a94:	18fc      	adds	r4, r7, r3
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	1c18      	adds	r0, r3, #0
    1a9a:	4b35      	ldr	r3, [pc, #212]	; (1b70 <_i2c_master_write_packet+0x174>)
    1a9c:	4798      	blx	r3
    1a9e:	1c03      	adds	r3, r0, #0
    1aa0:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1aa2:	2317      	movs	r3, #23
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d151      	bne.n	1b50 <_i2c_master_write_packet+0x154>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1aac:	2312      	movs	r3, #18
    1aae:	18fb      	adds	r3, r7, r3
    1ab0:	2200      	movs	r2, #0
    1ab2:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1ab4:	e034      	b.n	1b20 <_i2c_master_write_packet+0x124>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1ab6:	68fb      	ldr	r3, [r7, #12]
    1ab8:	8b5b      	ldrh	r3, [r3, #26]
    1aba:	b29b      	uxth	r3, r3
    1abc:	1c1a      	adds	r2, r3, #0
    1abe:	2320      	movs	r3, #32
    1ac0:	4013      	ands	r3, r2
    1ac2:	d101      	bne.n	1ac8 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1ac4:	2341      	movs	r3, #65	; 0x41
    1ac6:	e046      	b.n	1b56 <_i2c_master_write_packet+0x15a>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	1c18      	adds	r0, r3, #0
    1acc:	4b24      	ldr	r3, [pc, #144]	; (1b60 <_i2c_master_write_packet+0x164>)
    1ace:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1ad0:	683b      	ldr	r3, [r7, #0]
    1ad2:	685a      	ldr	r2, [r3, #4]
    1ad4:	2312      	movs	r3, #18
    1ad6:	18fb      	adds	r3, r7, r3
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	2112      	movs	r1, #18
    1adc:	1879      	adds	r1, r7, r1
    1ade:	1c58      	adds	r0, r3, #1
    1ae0:	8008      	strh	r0, [r1, #0]
    1ae2:	18d3      	adds	r3, r2, r3
    1ae4:	7819      	ldrb	r1, [r3, #0]
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	2228      	movs	r2, #40	; 0x28
    1aea:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1aec:	2317      	movs	r3, #23
    1aee:	18fc      	adds	r4, r7, r3
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	1c18      	adds	r0, r3, #0
    1af4:	4b1d      	ldr	r3, [pc, #116]	; (1b6c <_i2c_master_write_packet+0x170>)
    1af6:	4798      	blx	r3
    1af8:	1c03      	adds	r3, r0, #0
    1afa:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1afc:	2317      	movs	r3, #23
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	2b00      	cmp	r3, #0
    1b04:	d000      	beq.n	1b08 <_i2c_master_write_packet+0x10c>
				break;
    1b06:	e014      	b.n	1b32 <_i2c_master_write_packet+0x136>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	8b5b      	ldrh	r3, [r3, #26]
    1b0c:	b29b      	uxth	r3, r3
    1b0e:	1c1a      	adds	r2, r3, #0
    1b10:	2304      	movs	r3, #4
    1b12:	4013      	ands	r3, r2
    1b14:	d004      	beq.n	1b20 <_i2c_master_write_packet+0x124>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1b16:	2317      	movs	r3, #23
    1b18:	18fb      	adds	r3, r7, r3
    1b1a:	221e      	movs	r2, #30
    1b1c:	701a      	strb	r2, [r3, #0]
				break;
    1b1e:	e008      	b.n	1b32 <_i2c_master_write_packet+0x136>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1b20:	2314      	movs	r3, #20
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	881b      	ldrh	r3, [r3, #0]
    1b26:	2214      	movs	r2, #20
    1b28:	18ba      	adds	r2, r7, r2
    1b2a:	1e59      	subs	r1, r3, #1
    1b2c:	8011      	strh	r1, [r2, #0]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d1c1      	bne.n	1ab6 <_i2c_master_write_packet+0xba>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	7a9b      	ldrb	r3, [r3, #10]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d00a      	beq.n	1b50 <_i2c_master_write_packet+0x154>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	1c18      	adds	r0, r3, #0
    1b3e:	4b08      	ldr	r3, [pc, #32]	; (1b60 <_i2c_master_write_packet+0x164>)
    1b40:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b42:	68fb      	ldr	r3, [r7, #12]
    1b44:	685b      	ldr	r3, [r3, #4]
    1b46:	22c0      	movs	r2, #192	; 0xc0
    1b48:	0292      	lsls	r2, r2, #10
    1b4a:	431a      	orrs	r2, r3
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1b50:	2317      	movs	r3, #23
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	781b      	ldrb	r3, [r3, #0]
}
    1b56:	1c18      	adds	r0, r3, #0
    1b58:	46bd      	mov	sp, r7
    1b5a:	b007      	add	sp, #28
    1b5c:	bd90      	pop	{r4, r7, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	000010c5 	.word	0x000010c5
    1b64:	000016f5 	.word	0x000016f5
    1b68:	fffbffff 	.word	0xfffbffff
    1b6c:	00001695 	.word	0x00001695
    1b70:	00001635 	.word	0x00001635

00001b74 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	8b9b      	ldrh	r3, [r3, #28]
    1b82:	b29b      	uxth	r3, r3
    1b84:	2b00      	cmp	r3, #0
    1b86:	d001      	beq.n	1b8c <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    1b88:	2305      	movs	r3, #5
    1b8a:	e00c      	b.n	1ba6 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	2201      	movs	r2, #1
    1b90:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	2201      	movs	r2, #1
    1b96:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1b98:	687a      	ldr	r2, [r7, #4]
    1b9a:	683b      	ldr	r3, [r7, #0]
    1b9c:	1c10      	adds	r0, r2, #0
    1b9e:	1c19      	adds	r1, r3, #0
    1ba0:	4b03      	ldr	r3, [pc, #12]	; (1bb0 <i2c_master_write_packet_wait+0x3c>)
    1ba2:	4798      	blx	r3
    1ba4:	1c03      	adds	r3, r0, #0
}
    1ba6:	1c18      	adds	r0, r3, #0
    1ba8:	46bd      	mov	sp, r7
    1baa:	b002      	add	sp, #8
    1bac:	bd80      	pop	{r7, pc}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	000019fd 	.word	0x000019fd

00001bb4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b084      	sub	sp, #16
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	69db      	ldr	r3, [r3, #28]
    1bc6:	2207      	movs	r2, #7
    1bc8:	4013      	ands	r3, r2
    1bca:	1e5a      	subs	r2, r3, #1
    1bcc:	4193      	sbcs	r3, r2
    1bce:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1bd0:	1c18      	adds	r0, r3, #0
    1bd2:	46bd      	mov	sp, r7
    1bd4:	b004      	add	sp, #16
    1bd6:	bd80      	pop	{r7, pc}

00001bd8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	b082      	sub	sp, #8
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1be0:	46c0      	nop			; (mov r8, r8)
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	1c18      	adds	r0, r3, #0
    1be6:	4b03      	ldr	r3, [pc, #12]	; (1bf4 <_i2c_master_wait_for_sync+0x1c>)
    1be8:	4798      	blx	r3
    1bea:	1e03      	subs	r3, r0, #0
    1bec:	d1f9      	bne.n	1be2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    1bee:	46bd      	mov	sp, r7
    1bf0:	b002      	add	sp, #8
    1bf2:	bd80      	pop	{r7, pc}
    1bf4:	00001bb5 	.word	0x00001bb5

00001bf8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	b084      	sub	sp, #16
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	681b      	ldr	r3, [r3, #0]
    1c04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	0edb      	lsrs	r3, r3, #27
    1c0c:	1c1a      	adds	r2, r3, #0
    1c0e:	2301      	movs	r3, #1
    1c10:	4013      	ands	r3, r2
    1c12:	b2db      	uxtb	r3, r3
    1c14:	1c1a      	adds	r2, r3, #0
    1c16:	230b      	movs	r3, #11
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	1e51      	subs	r1, r2, #1
    1c1c:	418a      	sbcs	r2, r1
    1c1e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1c20:	2308      	movs	r3, #8
    1c22:	18fb      	adds	r3, r7, r3
    1c24:	687a      	ldr	r2, [r7, #4]
    1c26:	8b52      	ldrh	r2, [r2, #26]
    1c28:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	8b9b      	ldrh	r3, [r3, #28]
    1c2e:	b29a      	uxth	r2, r3
    1c30:	2308      	movs	r3, #8
    1c32:	18fb      	adds	r3, r7, r3
    1c34:	2108      	movs	r1, #8
    1c36:	1879      	adds	r1, r7, r1
    1c38:	8809      	ldrh	r1, [r1, #0]
    1c3a:	1a8a      	subs	r2, r1, r2
    1c3c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	8b9b      	ldrh	r3, [r3, #28]
    1c42:	b29b      	uxth	r3, r3
    1c44:	3b01      	subs	r3, #1
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1c4c:	230b      	movs	r3, #11
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d010      	beq.n	1c78 <_i2c_master_read+0x80>
		if (module->send_nack && module->buffer_remaining == 1) {
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	7adb      	ldrb	r3, [r3, #11]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d01c      	beq.n	1c98 <_i2c_master_read+0xa0>
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	8b9b      	ldrh	r3, [r3, #28]
    1c62:	b29b      	uxth	r3, r3
    1c64:	2b01      	cmp	r3, #1
    1c66:	d117      	bne.n	1c98 <_i2c_master_read+0xa0>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	685b      	ldr	r3, [r3, #4]
    1c6c:	2280      	movs	r2, #128	; 0x80
    1c6e:	02d2      	lsls	r2, r2, #11
    1c70:	431a      	orrs	r2, r3
    1c72:	68fb      	ldr	r3, [r7, #12]
    1c74:	605a      	str	r2, [r3, #4]
    1c76:	e00f      	b.n	1c98 <_i2c_master_read+0xa0>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	7adb      	ldrb	r3, [r3, #11]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d00b      	beq.n	1c98 <_i2c_master_read+0xa0>
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	8b9b      	ldrh	r3, [r3, #28]
    1c84:	b29b      	uxth	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	d106      	bne.n	1c98 <_i2c_master_read+0xa0>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c8a:	68fb      	ldr	r3, [r7, #12]
    1c8c:	685b      	ldr	r3, [r3, #4]
    1c8e:	2280      	movs	r2, #128	; 0x80
    1c90:	02d2      	lsls	r2, r2, #11
    1c92:	431a      	orrs	r2, r3
    1c94:	68fb      	ldr	r3, [r7, #12]
    1c96:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	8b9b      	ldrh	r3, [r3, #28]
    1c9c:	b29b      	uxth	r3, r3
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d10e      	bne.n	1cc0 <_i2c_master_read+0xc8>
		if (module->send_stop) {
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	7a9b      	ldrb	r3, [r3, #10]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d00a      	beq.n	1cc0 <_i2c_master_read+0xc8>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	1c18      	adds	r0, r3, #0
    1cae:	4b0d      	ldr	r3, [pc, #52]	; (1ce4 <_i2c_master_read+0xec>)
    1cb0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	685b      	ldr	r3, [r3, #4]
    1cb6:	22c0      	movs	r2, #192	; 0xc0
    1cb8:	0292      	lsls	r2, r2, #10
    1cba:	431a      	orrs	r2, r3
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	1c18      	adds	r0, r3, #0
    1cc4:	4b07      	ldr	r3, [pc, #28]	; (1ce4 <_i2c_master_read+0xec>)
    1cc6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	6a1a      	ldr	r2, [r3, #32]
    1ccc:	2308      	movs	r3, #8
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	881b      	ldrh	r3, [r3, #0]
    1cd2:	18d3      	adds	r3, r2, r3
    1cd4:	68fa      	ldr	r2, [r7, #12]
    1cd6:	2128      	movs	r1, #40	; 0x28
    1cd8:	5c52      	ldrb	r2, [r2, r1]
    1cda:	b2d2      	uxtb	r2, r2
    1cdc:	701a      	strb	r2, [r3, #0]
}
    1cde:	46bd      	mov	sp, r7
    1ce0:	b004      	add	sp, #16
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	00001bd9 	.word	0x00001bd9

00001ce8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	b084      	sub	sp, #16
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1cf6:	68fb      	ldr	r3, [r7, #12]
    1cf8:	8b5b      	ldrh	r3, [r3, #26]
    1cfa:	b29b      	uxth	r3, r3
    1cfc:	1c1a      	adds	r2, r3, #0
    1cfe:	2304      	movs	r3, #4
    1d00:	4013      	ands	r3, r2
    1d02:	d004      	beq.n	1d0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	2225      	movs	r2, #37	; 0x25
    1d08:	211e      	movs	r1, #30
    1d0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1d0c:	e024      	b.n	1d58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1d0e:	230a      	movs	r3, #10
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	687a      	ldr	r2, [r7, #4]
    1d14:	8b52      	ldrh	r2, [r2, #26]
    1d16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	8b9b      	ldrh	r3, [r3, #28]
    1d1c:	b29a      	uxth	r2, r3
    1d1e:	230a      	movs	r3, #10
    1d20:	18fb      	adds	r3, r7, r3
    1d22:	210a      	movs	r1, #10
    1d24:	1879      	adds	r1, r7, r1
    1d26:	8809      	ldrh	r1, [r1, #0]
    1d28:	1a8a      	subs	r2, r1, r2
    1d2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	8b9b      	ldrh	r3, [r3, #28]
    1d30:	b29b      	uxth	r3, r3
    1d32:	3b01      	subs	r3, #1
    1d34:	b29a      	uxth	r2, r3
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	1c18      	adds	r0, r3, #0
    1d3e:	4b08      	ldr	r3, [pc, #32]	; (1d60 <_i2c_master_write+0x78>)
    1d40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1d42:	687b      	ldr	r3, [r7, #4]
    1d44:	6a1a      	ldr	r2, [r3, #32]
    1d46:	230a      	movs	r3, #10
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	881b      	ldrh	r3, [r3, #0]
    1d4c:	18d3      	adds	r3, r2, r3
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	b2d9      	uxtb	r1, r3
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	2228      	movs	r2, #40	; 0x28
    1d56:	5499      	strb	r1, [r3, r2]
}
    1d58:	46bd      	mov	sp, r7
    1d5a:	b004      	add	sp, #16
    1d5c:	bd80      	pop	{r7, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00001bd9 	.word	0x00001bd9

00001d64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b084      	sub	sp, #16
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	681b      	ldr	r3, [r3, #0]
    1d70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1d72:	68fb      	ldr	r3, [r7, #12]
    1d74:	7e1b      	ldrb	r3, [r3, #24]
    1d76:	b2db      	uxtb	r3, r3
    1d78:	1c1a      	adds	r2, r3, #0
    1d7a:	2301      	movs	r3, #1
    1d7c:	4013      	ands	r3, r2
    1d7e:	d02b      	beq.n	1dd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1d80:	68fb      	ldr	r3, [r7, #12]
    1d82:	2201      	movs	r2, #1
    1d84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	8b5b      	ldrh	r3, [r3, #26]
    1d8a:	b29b      	uxth	r3, r3
    1d8c:	1c1a      	adds	r2, r3, #0
    1d8e:	2302      	movs	r3, #2
    1d90:	4013      	ands	r3, r2
    1d92:	d004      	beq.n	1d9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	2225      	movs	r2, #37	; 0x25
    1d98:	2141      	movs	r1, #65	; 0x41
    1d9a:	5499      	strb	r1, [r3, r2]
    1d9c:	e01c      	b.n	1dd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	8b5b      	ldrh	r3, [r3, #26]
    1da2:	b29b      	uxth	r3, r3
    1da4:	1c1a      	adds	r2, r3, #0
    1da6:	2304      	movs	r3, #4
    1da8:	4013      	ands	r3, r2
    1daa:	d015      	beq.n	1dd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	2225      	movs	r2, #37	; 0x25
    1db0:	2118      	movs	r1, #24
    1db2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	2200      	movs	r2, #0
    1db8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	7a9b      	ldrb	r3, [r3, #10]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d00a      	beq.n	1dd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	1c18      	adds	r0, r3, #0
    1dc6:	4b13      	ldr	r3, [pc, #76]	; (1e14 <_i2c_master_async_address_response+0xb0>)
    1dc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	685b      	ldr	r3, [r3, #4]
    1dce:	22c0      	movs	r2, #192	; 0xc0
    1dd0:	0292      	lsls	r2, r2, #10
    1dd2:	431a      	orrs	r2, r3
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	8b9b      	ldrh	r3, [r3, #28]
    1ddc:	b29a      	uxth	r2, r3
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	2225      	movs	r2, #37	; 0x25
    1de6:	5c9b      	ldrb	r3, [r3, r2]
    1de8:	b2db      	uxtb	r3, r3
    1dea:	2b05      	cmp	r3, #5
    1dec:	d10e      	bne.n	1e0c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	2224      	movs	r2, #36	; 0x24
    1df2:	5c9b      	ldrb	r3, [r3, r2]
    1df4:	b2db      	uxtb	r3, r3
    1df6:	2b00      	cmp	r3, #0
    1df8:	d104      	bne.n	1e04 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	1c18      	adds	r0, r3, #0
    1dfe:	4b06      	ldr	r3, [pc, #24]	; (1e18 <_i2c_master_async_address_response+0xb4>)
    1e00:	4798      	blx	r3
    1e02:	e003      	b.n	1e0c <_i2c_master_async_address_response+0xa8>
		} else {
			_i2c_master_read(module);
    1e04:	687b      	ldr	r3, [r7, #4]
    1e06:	1c18      	adds	r0, r3, #0
    1e08:	4b04      	ldr	r3, [pc, #16]	; (1e1c <_i2c_master_async_address_response+0xb8>)
    1e0a:	4798      	blx	r3
		}
	}
}
    1e0c:	46bd      	mov	sp, r7
    1e0e:	b004      	add	sp, #16
    1e10:	bd80      	pop	{r7, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	00001bd9 	.word	0x00001bd9
    1e18:	00001ce9 	.word	0x00001ce9
    1e1c:	00001bf9 	.word	0x00001bf9

00001e20 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1e20:	b580      	push	{r7, lr}
    1e22:	b086      	sub	sp, #24
    1e24:	af00      	add	r7, sp, #0
    1e26:	1c02      	adds	r2, r0, #0
    1e28:	1dfb      	adds	r3, r7, #7
    1e2a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1e2c:	1dfb      	adds	r3, r7, #7
    1e2e:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1e30:	4b94      	ldr	r3, [pc, #592]	; (2084 <STACK_SIZE+0x84>)
    1e32:	0092      	lsls	r2, r2, #2
    1e34:	58d3      	ldr	r3, [r2, r3]
    1e36:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e38:	697b      	ldr	r3, [r7, #20]
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1e3e:	693b      	ldr	r3, [r7, #16]
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	0edb      	lsrs	r3, r3, #27
    1e44:	1c1a      	adds	r2, r3, #0
    1e46:	2301      	movs	r3, #1
    1e48:	4013      	ands	r3, r2
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	1c1a      	adds	r2, r3, #0
    1e4e:	230f      	movs	r3, #15
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	1e51      	subs	r1, r2, #1
    1e54:	418a      	sbcs	r2, r1
    1e56:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1e58:	230e      	movs	r3, #14
    1e5a:	18fb      	adds	r3, r7, r3
    1e5c:	697a      	ldr	r2, [r7, #20]
    1e5e:	7e52      	ldrb	r2, [r2, #25]
    1e60:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1e62:	697b      	ldr	r3, [r7, #20]
    1e64:	7e1b      	ldrb	r3, [r3, #24]
    1e66:	b2da      	uxtb	r2, r3
    1e68:	230e      	movs	r3, #14
    1e6a:	18fb      	adds	r3, r7, r3
    1e6c:	210e      	movs	r1, #14
    1e6e:	1879      	adds	r1, r7, r1
    1e70:	7809      	ldrb	r1, [r1, #0]
    1e72:	400a      	ands	r2, r1
    1e74:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1e76:	697b      	ldr	r3, [r7, #20]
    1e78:	8b5b      	ldrh	r3, [r3, #26]
    1e7a:	b29b      	uxth	r3, r3
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d109      	bne.n	1e94 <_i2c_master_interrupt_handler+0x74>
    1e80:	697b      	ldr	r3, [r7, #20]
    1e82:	8b9b      	ldrh	r3, [r3, #28]
    1e84:	b29b      	uxth	r3, r3
    1e86:	2b00      	cmp	r3, #0
    1e88:	d004      	beq.n	1e94 <_i2c_master_interrupt_handler+0x74>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1e8a:	697b      	ldr	r3, [r7, #20]
    1e8c:	1c18      	adds	r0, r3, #0
    1e8e:	4b7e      	ldr	r3, [pc, #504]	; (2088 <STACK_SIZE+0x88>)
    1e90:	4798      	blx	r3
    1e92:	e071      	b.n	1f78 <_i2c_master_interrupt_handler+0x158>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e94:	697b      	ldr	r3, [r7, #20]
    1e96:	8b5b      	ldrh	r3, [r3, #26]
    1e98:	b29b      	uxth	r3, r3
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d03a      	beq.n	1f14 <_i2c_master_interrupt_handler+0xf4>
    1e9e:	697b      	ldr	r3, [r7, #20]
    1ea0:	8b9b      	ldrh	r3, [r3, #28]
    1ea2:	b29b      	uxth	r3, r3
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d135      	bne.n	1f14 <_i2c_master_interrupt_handler+0xf4>
			(module->status == STATUS_BUSY) &&
    1ea8:	697b      	ldr	r3, [r7, #20]
    1eaa:	2225      	movs	r2, #37	; 0x25
    1eac:	5c9b      	ldrb	r3, [r3, r2]
    1eae:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1eb0:	2b05      	cmp	r3, #5
    1eb2:	d12f      	bne.n	1f14 <_i2c_master_interrupt_handler+0xf4>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1eb4:	697b      	ldr	r3, [r7, #20]
    1eb6:	2224      	movs	r2, #36	; 0x24
    1eb8:	5c9b      	ldrb	r3, [r3, r2]
    1eba:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d129      	bne.n	1f14 <_i2c_master_interrupt_handler+0xf4>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1ec0:	693b      	ldr	r3, [r7, #16]
    1ec2:	2203      	movs	r2, #3
    1ec4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	2200      	movs	r2, #0
    1eca:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1ecc:	697b      	ldr	r3, [r7, #20]
    1ece:	2225      	movs	r2, #37	; 0x25
    1ed0:	2100      	movs	r1, #0
    1ed2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1ed4:	697b      	ldr	r3, [r7, #20]
    1ed6:	7a9b      	ldrb	r3, [r3, #10]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d00b      	beq.n	1ef4 <_i2c_master_interrupt_handler+0xd4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1edc:	697b      	ldr	r3, [r7, #20]
    1ede:	1c18      	adds	r0, r3, #0
    1ee0:	4b6a      	ldr	r3, [pc, #424]	; (208c <STACK_SIZE+0x8c>)
    1ee2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1ee4:	693b      	ldr	r3, [r7, #16]
    1ee6:	685b      	ldr	r3, [r3, #4]
    1ee8:	22c0      	movs	r2, #192	; 0xc0
    1eea:	0292      	lsls	r2, r2, #10
    1eec:	431a      	orrs	r2, r3
    1eee:	693b      	ldr	r3, [r7, #16]
    1ef0:	605a      	str	r2, [r3, #4]
    1ef2:	e002      	b.n	1efa <_i2c_master_interrupt_handler+0xda>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1ef4:	693b      	ldr	r3, [r7, #16]
    1ef6:	2201      	movs	r2, #1
    1ef8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1efa:	230e      	movs	r3, #14
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	2201      	movs	r2, #1
    1f02:	4013      	ands	r3, r2
    1f04:	d005      	beq.n	1f12 <_i2c_master_interrupt_handler+0xf2>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1f06:	697b      	ldr	r3, [r7, #20]
    1f08:	68db      	ldr	r3, [r3, #12]
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	1c10      	adds	r0, r2, #0
    1f0e:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1f10:	e032      	b.n	1f78 <_i2c_master_interrupt_handler+0x158>
    1f12:	e031      	b.n	1f78 <_i2c_master_interrupt_handler+0x158>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1f14:	697b      	ldr	r3, [r7, #20]
    1f16:	8b5b      	ldrh	r3, [r3, #26]
    1f18:	b29b      	uxth	r3, r3
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d02c      	beq.n	1f78 <_i2c_master_interrupt_handler+0x158>
    1f1e:	697b      	ldr	r3, [r7, #20]
    1f20:	8b9b      	ldrh	r3, [r3, #28]
    1f22:	b29b      	uxth	r3, r3
    1f24:	2b00      	cmp	r3, #0
    1f26:	d027      	beq.n	1f78 <_i2c_master_interrupt_handler+0x158>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f28:	693b      	ldr	r3, [r7, #16]
    1f2a:	8b5b      	ldrh	r3, [r3, #26]
    1f2c:	b29b      	uxth	r3, r3
    1f2e:	1c1a      	adds	r2, r3, #0
    1f30:	2320      	movs	r3, #32
    1f32:	4013      	ands	r3, r2
    1f34:	d111      	bne.n	1f5a <_i2c_master_interrupt_handler+0x13a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f36:	230f      	movs	r3, #15
    1f38:	18fb      	adds	r3, r7, r3
    1f3a:	781b      	ldrb	r3, [r3, #0]
    1f3c:	2201      	movs	r2, #1
    1f3e:	4053      	eors	r3, r2
    1f40:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f42:	2b00      	cmp	r3, #0
    1f44:	d104      	bne.n	1f50 <_i2c_master_interrupt_handler+0x130>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f46:	697b      	ldr	r3, [r7, #20]
    1f48:	8b9b      	ldrh	r3, [r3, #28]
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	2b01      	cmp	r3, #1
    1f4e:	d004      	beq.n	1f5a <_i2c_master_interrupt_handler+0x13a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	2225      	movs	r2, #37	; 0x25
    1f54:	2141      	movs	r1, #65	; 0x41
    1f56:	5499      	strb	r1, [r3, r2]
    1f58:	e00e      	b.n	1f78 <_i2c_master_interrupt_handler+0x158>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1f5a:	697b      	ldr	r3, [r7, #20]
    1f5c:	2224      	movs	r2, #36	; 0x24
    1f5e:	5c9b      	ldrb	r3, [r3, r2]
    1f60:	b2db      	uxtb	r3, r3
    1f62:	2b00      	cmp	r3, #0
    1f64:	d104      	bne.n	1f70 <_i2c_master_interrupt_handler+0x150>
			_i2c_master_write(module);
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	1c18      	adds	r0, r3, #0
    1f6a:	4b49      	ldr	r3, [pc, #292]	; (2090 <STACK_SIZE+0x90>)
    1f6c:	4798      	blx	r3
    1f6e:	e003      	b.n	1f78 <_i2c_master_interrupt_handler+0x158>
		} else {
			_i2c_master_read(module);
    1f70:	697b      	ldr	r3, [r7, #20]
    1f72:	1c18      	adds	r0, r3, #0
    1f74:	4b47      	ldr	r3, [pc, #284]	; (2094 <STACK_SIZE+0x94>)
    1f76:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f78:	697b      	ldr	r3, [r7, #20]
    1f7a:	8b5b      	ldrh	r3, [r3, #26]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d047      	beq.n	2012 <STACK_SIZE+0x12>
    1f82:	697b      	ldr	r3, [r7, #20]
    1f84:	8b9b      	ldrh	r3, [r3, #28]
    1f86:	b29b      	uxth	r3, r3
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d142      	bne.n	2012 <STACK_SIZE+0x12>
			(module->status == STATUS_BUSY) &&
    1f8c:	697b      	ldr	r3, [r7, #20]
    1f8e:	2225      	movs	r2, #37	; 0x25
    1f90:	5c9b      	ldrb	r3, [r3, r2]
    1f92:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f94:	2b05      	cmp	r3, #5
    1f96:	d13c      	bne.n	2012 <STACK_SIZE+0x12>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1f98:	697b      	ldr	r3, [r7, #20]
    1f9a:	2224      	movs	r2, #36	; 0x24
    1f9c:	5c9b      	ldrb	r3, [r3, r2]
    1f9e:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1fa0:	2b01      	cmp	r3, #1
    1fa2:	d136      	bne.n	2012 <STACK_SIZE+0x12>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1fa4:	693b      	ldr	r3, [r7, #16]
    1fa6:	7e1b      	ldrb	r3, [r3, #24]
    1fa8:	b2db      	uxtb	r3, r3
    1faa:	1c1a      	adds	r2, r3, #0
    1fac:	2302      	movs	r3, #2
    1fae:	4013      	ands	r3, r2
    1fb0:	d002      	beq.n	1fb8 <_i2c_master_interrupt_handler+0x198>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1fb2:	693b      	ldr	r3, [r7, #16]
    1fb4:	2202      	movs	r2, #2
    1fb6:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1fb8:	693b      	ldr	r3, [r7, #16]
    1fba:	2203      	movs	r2, #3
    1fbc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1fbe:	697b      	ldr	r3, [r7, #20]
    1fc0:	2200      	movs	r2, #0
    1fc2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1fc4:	697b      	ldr	r3, [r7, #20]
    1fc6:	2225      	movs	r2, #37	; 0x25
    1fc8:	2100      	movs	r1, #0
    1fca:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1fcc:	230e      	movs	r3, #14
    1fce:	18fb      	adds	r3, r7, r3
    1fd0:	781b      	ldrb	r3, [r3, #0]
    1fd2:	2202      	movs	r2, #2
    1fd4:	4013      	ands	r3, r2
    1fd6:	d00b      	beq.n	1ff0 <_i2c_master_interrupt_handler+0x1d0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1fd8:	697b      	ldr	r3, [r7, #20]
    1fda:	2224      	movs	r2, #36	; 0x24
    1fdc:	5c9b      	ldrb	r3, [r3, r2]
    1fde:	b2db      	uxtb	r3, r3
    1fe0:	2b01      	cmp	r3, #1
    1fe2:	d105      	bne.n	1ff0 <_i2c_master_interrupt_handler+0x1d0>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1fe4:	697b      	ldr	r3, [r7, #20]
    1fe6:	691b      	ldr	r3, [r3, #16]
    1fe8:	697a      	ldr	r2, [r7, #20]
    1fea:	1c10      	adds	r0, r2, #0
    1fec:	4798      	blx	r3
    1fee:	e010      	b.n	2012 <STACK_SIZE+0x12>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1ff0:	230e      	movs	r3, #14
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	2201      	movs	r2, #1
    1ff8:	4013      	ands	r3, r2
    1ffa:	d00a      	beq.n	2012 <STACK_SIZE+0x12>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1ffc:	697b      	ldr	r3, [r7, #20]
    1ffe:	2224      	movs	r2, #36	; 0x24
    2000:	5c9b      	ldrb	r3, [r3, r2]
    2002:	b2db      	uxtb	r3, r3
    2004:	2b00      	cmp	r3, #0
    2006:	d104      	bne.n	2012 <STACK_SIZE+0x12>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    2008:	697b      	ldr	r3, [r7, #20]
    200a:	68db      	ldr	r3, [r3, #12]
    200c:	697a      	ldr	r2, [r7, #20]
    200e:	1c10      	adds	r0, r2, #0
    2010:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2012:	697b      	ldr	r3, [r7, #20]
    2014:	2225      	movs	r2, #37	; 0x25
    2016:	5c9b      	ldrb	r3, [r3, r2]
    2018:	b2db      	uxtb	r3, r3
    201a:	2b05      	cmp	r3, #5
    201c:	d02e      	beq.n	207c <STACK_SIZE+0x7c>
    201e:	697b      	ldr	r3, [r7, #20]
    2020:	2225      	movs	r2, #37	; 0x25
    2022:	5c9b      	ldrb	r3, [r3, r2]
    2024:	b2db      	uxtb	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	d028      	beq.n	207c <STACK_SIZE+0x7c>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    202a:	693b      	ldr	r3, [r7, #16]
    202c:	2203      	movs	r2, #3
    202e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2030:	697b      	ldr	r3, [r7, #20]
    2032:	2200      	movs	r2, #0
    2034:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    2036:	697b      	ldr	r3, [r7, #20]
    2038:	2200      	movs	r2, #0
    203a:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    203c:	697b      	ldr	r3, [r7, #20]
    203e:	2225      	movs	r2, #37	; 0x25
    2040:	5c9b      	ldrb	r3, [r3, r2]
    2042:	b2db      	uxtb	r3, r3
    2044:	2b41      	cmp	r3, #65	; 0x41
    2046:	d00e      	beq.n	2066 <STACK_SIZE+0x66>
				module->send_stop) {
    2048:	697b      	ldr	r3, [r7, #20]
    204a:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    204c:	2b00      	cmp	r3, #0
    204e:	d00a      	beq.n	2066 <STACK_SIZE+0x66>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    2050:	697b      	ldr	r3, [r7, #20]
    2052:	1c18      	adds	r0, r3, #0
    2054:	4b0d      	ldr	r3, [pc, #52]	; (208c <STACK_SIZE+0x8c>)
    2056:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    2058:	693b      	ldr	r3, [r7, #16]
    205a:	685b      	ldr	r3, [r3, #4]
    205c:	22e0      	movs	r2, #224	; 0xe0
    205e:	02d2      	lsls	r2, r2, #11
    2060:	431a      	orrs	r2, r3
    2062:	693b      	ldr	r3, [r7, #16]
    2064:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    2066:	230e      	movs	r3, #14
    2068:	18fb      	adds	r3, r7, r3
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	2204      	movs	r2, #4
    206e:	4013      	ands	r3, r2
    2070:	d004      	beq.n	207c <STACK_SIZE+0x7c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2072:	697b      	ldr	r3, [r7, #20]
    2074:	695b      	ldr	r3, [r3, #20]
    2076:	697a      	ldr	r2, [r7, #20]
    2078:	1c10      	adds	r0, r2, #0
    207a:	4798      	blx	r3
		}
	}
}
    207c:	46bd      	mov	sp, r7
    207e:	b006      	add	sp, #24
    2080:	bd80      	pop	{r7, pc}
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	200000fc 	.word	0x200000fc
    2088:	00001d65 	.word	0x00001d65
    208c:	00001bd9 	.word	0x00001bd9
    2090:	00001ce9 	.word	0x00001ce9
    2094:	00001bf9 	.word	0x00001bf9

00002098 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	2200      	movs	r2, #0
    20a4:	701a      	strb	r2, [r3, #0]
}
    20a6:	46bd      	mov	sp, r7
    20a8:	b002      	add	sp, #8
    20aa:	bd80      	pop	{r7, pc}

000020ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b082      	sub	sp, #8
    20b0:	af00      	add	r7, sp, #0
    20b2:	1c02      	adds	r2, r0, #0
    20b4:	6039      	str	r1, [r7, #0]
    20b6:	1dfb      	adds	r3, r7, #7
    20b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    20ba:	1dfb      	adds	r3, r7, #7
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b01      	cmp	r3, #1
    20c0:	d00a      	beq.n	20d8 <system_apb_clock_set_mask+0x2c>
    20c2:	2b02      	cmp	r3, #2
    20c4:	d00f      	beq.n	20e6 <system_apb_clock_set_mask+0x3a>
    20c6:	2b00      	cmp	r3, #0
    20c8:	d114      	bne.n	20f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    20ca:	4b0e      	ldr	r3, [pc, #56]	; (2104 <system_apb_clock_set_mask+0x58>)
    20cc:	4a0d      	ldr	r2, [pc, #52]	; (2104 <system_apb_clock_set_mask+0x58>)
    20ce:	6991      	ldr	r1, [r2, #24]
    20d0:	683a      	ldr	r2, [r7, #0]
    20d2:	430a      	orrs	r2, r1
    20d4:	619a      	str	r2, [r3, #24]
			break;
    20d6:	e00f      	b.n	20f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    20d8:	4b0a      	ldr	r3, [pc, #40]	; (2104 <system_apb_clock_set_mask+0x58>)
    20da:	4a0a      	ldr	r2, [pc, #40]	; (2104 <system_apb_clock_set_mask+0x58>)
    20dc:	69d1      	ldr	r1, [r2, #28]
    20de:	683a      	ldr	r2, [r7, #0]
    20e0:	430a      	orrs	r2, r1
    20e2:	61da      	str	r2, [r3, #28]
			break;
    20e4:	e008      	b.n	20f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20e6:	4b07      	ldr	r3, [pc, #28]	; (2104 <system_apb_clock_set_mask+0x58>)
    20e8:	4a06      	ldr	r2, [pc, #24]	; (2104 <system_apb_clock_set_mask+0x58>)
    20ea:	6a11      	ldr	r1, [r2, #32]
    20ec:	683a      	ldr	r2, [r7, #0]
    20ee:	430a      	orrs	r2, r1
    20f0:	621a      	str	r2, [r3, #32]
			break;
    20f2:	e001      	b.n	20f8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    20f4:	2317      	movs	r3, #23
    20f6:	e000      	b.n	20fa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    20f8:	2300      	movs	r3, #0
}
    20fa:	1c18      	adds	r0, r3, #0
    20fc:	46bd      	mov	sp, r7
    20fe:	b002      	add	sp, #8
    2100:	bd80      	pop	{r7, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	40000400 	.word	0x40000400

00002108 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2280      	movs	r2, #128	; 0x80
    2114:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2201      	movs	r2, #1
    2120:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	70da      	strb	r2, [r3, #3]
}
    2128:	46bd      	mov	sp, r7
    212a:	b002      	add	sp, #8
    212c:	bd80      	pop	{r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)

00002130 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    2130:	b580      	push	{r7, lr}
    2132:	b084      	sub	sp, #16
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2138:	2300      	movs	r3, #0
    213a:	60fb      	str	r3, [r7, #12]
    213c:	e00c      	b.n	2158 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    213e:	4b0a      	ldr	r3, [pc, #40]	; (2168 <_tcc_get_inst_index+0x38>)
    2140:	68fa      	ldr	r2, [r7, #12]
    2142:	0092      	lsls	r2, r2, #2
    2144:	58d2      	ldr	r2, [r2, r3]
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	429a      	cmp	r2, r3
    214a:	d102      	bne.n	2152 <_tcc_get_inst_index+0x22>
			return i;
    214c:	68fb      	ldr	r3, [r7, #12]
    214e:	b2db      	uxtb	r3, r3
    2150:	e006      	b.n	2160 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	3301      	adds	r3, #1
    2156:	60fb      	str	r3, [r7, #12]
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	2b02      	cmp	r3, #2
    215c:	d9ef      	bls.n	213e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    215e:	2300      	movs	r3, #0
}
    2160:	1c18      	adds	r0, r3, #0
    2162:	46bd      	mov	sp, r7
    2164:	b004      	add	sp, #16
    2166:	bd80      	pop	{r7, pc}
    2168:	00008fd4 	.word	0x00008fd4

0000216c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    216c:	b590      	push	{r4, r7, lr}
    216e:	b085      	sub	sp, #20
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
    2174:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2176:	230f      	movs	r3, #15
    2178:	18fc      	adds	r4, r7, r3
    217a:	683b      	ldr	r3, [r7, #0]
    217c:	1c18      	adds	r0, r3, #0
    217e:	4bac      	ldr	r3, [pc, #688]	; (2430 <tcc_get_config_defaults+0x2c4>)
    2180:	4798      	blx	r3
    2182:	1c03      	adds	r3, r0, #0
    2184:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	2200      	movs	r2, #0
    218a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    218c:	230f      	movs	r3, #15
    218e:	18fb      	adds	r3, r7, r3
    2190:	781a      	ldrb	r2, [r3, #0]
    2192:	4ba8      	ldr	r3, [pc, #672]	; (2434 <tcc_get_config_defaults+0x2c8>)
    2194:	0092      	lsls	r2, r2, #2
    2196:	58d2      	ldr	r2, [r2, r3]
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2200      	movs	r2, #0
    21a0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	2200      	movs	r2, #0
    21ac:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	2200      	movs	r2, #0
    21b2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	2200      	movs	r2, #0
    21b8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	2200      	movs	r2, #0
    21be:	61da      	str	r2, [r3, #28]
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	2200      	movs	r2, #0
    21c4:	621a      	str	r2, [r3, #32]
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	2200      	movs	r2, #0
    21ca:	625a      	str	r2, [r3, #36]	; 0x24
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	2200      	movs	r2, #0
    21d0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2200      	movs	r2, #0
    21d6:	751a      	strb	r2, [r3, #20]
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	2200      	movs	r2, #0
    21dc:	755a      	strb	r2, [r3, #21]
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	2200      	movs	r2, #0
    21e2:	759a      	strb	r2, [r3, #22]
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	2200      	movs	r2, #0
    21e8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	2200      	movs	r2, #0
    21ee:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	2200      	movs	r2, #0
    21f4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	2200      	movs	r2, #0
    21fa:	741a      	strb	r2, [r3, #16]
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	2200      	movs	r2, #0
    2200:	745a      	strb	r2, [r3, #17]
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	2200      	movs	r2, #0
    2206:	749a      	strb	r2, [r3, #18]
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	2200      	movs	r2, #0
    220c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	222c      	movs	r2, #44	; 0x2c
    2212:	2100      	movs	r1, #0
    2214:	5499      	strb	r1, [r3, r2]
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	222d      	movs	r2, #45	; 0x2d
    221a:	2100      	movs	r1, #0
    221c:	5499      	strb	r1, [r3, r2]
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	222e      	movs	r2, #46	; 0x2e
    2222:	2100      	movs	r1, #0
    2224:	5499      	strb	r1, [r3, r2]
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	222f      	movs	r2, #47	; 0x2f
    222a:	2100      	movs	r1, #0
    222c:	5499      	strb	r1, [r3, r2]
    222e:	687b      	ldr	r3, [r7, #4]
    2230:	2230      	movs	r2, #48	; 0x30
    2232:	2100      	movs	r1, #0
    2234:	5499      	strb	r1, [r3, r2]
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	2231      	movs	r2, #49	; 0x31
    223a:	2100      	movs	r1, #0
    223c:	5499      	strb	r1, [r3, r2]
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2232      	movs	r2, #50	; 0x32
    2242:	2100      	movs	r1, #0
    2244:	5499      	strb	r1, [r3, r2]
    2246:	687b      	ldr	r3, [r7, #4]
    2248:	2233      	movs	r2, #51	; 0x33
    224a:	2100      	movs	r1, #0
    224c:	5499      	strb	r1, [r3, r2]
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	2234      	movs	r2, #52	; 0x34
    2252:	2100      	movs	r1, #0
    2254:	5499      	strb	r1, [r3, r2]
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	2235      	movs	r2, #53	; 0x35
    225a:	2100      	movs	r1, #0
    225c:	5499      	strb	r1, [r3, r2]
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2236      	movs	r2, #54	; 0x36
    2262:	2100      	movs	r1, #0
    2264:	5499      	strb	r1, [r3, r2]
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	2237      	movs	r2, #55	; 0x37
    226a:	2100      	movs	r1, #0
    226c:	5499      	strb	r1, [r3, r2]
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	2238      	movs	r2, #56	; 0x38
    2272:	2100      	movs	r1, #0
    2274:	5499      	strb	r1, [r3, r2]
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2239      	movs	r2, #57	; 0x39
    227a:	2100      	movs	r1, #0
    227c:	5499      	strb	r1, [r3, r2]
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	223a      	movs	r2, #58	; 0x3a
    2282:	2100      	movs	r1, #0
    2284:	5499      	strb	r1, [r3, r2]
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	223b      	movs	r2, #59	; 0x3b
    228a:	2100      	movs	r1, #0
    228c:	5499      	strb	r1, [r3, r2]
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	223c      	movs	r2, #60	; 0x3c
    2292:	2100      	movs	r1, #0
    2294:	5499      	strb	r1, [r3, r2]
    2296:	687b      	ldr	r3, [r7, #4]
    2298:	223d      	movs	r2, #61	; 0x3d
    229a:	2100      	movs	r1, #0
    229c:	5499      	strb	r1, [r3, r2]
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	223e      	movs	r2, #62	; 0x3e
    22a2:	2100      	movs	r1, #0
    22a4:	5499      	strb	r1, [r3, r2]
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	223f      	movs	r2, #63	; 0x3f
    22aa:	2100      	movs	r1, #0
    22ac:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	2240      	movs	r2, #64	; 0x40
    22b2:	2100      	movs	r1, #0
    22b4:	5499      	strb	r1, [r3, r2]
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	2241      	movs	r2, #65	; 0x41
    22ba:	2100      	movs	r1, #0
    22bc:	5499      	strb	r1, [r3, r2]
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	2242      	movs	r2, #66	; 0x42
    22c2:	2100      	movs	r1, #0
    22c4:	5499      	strb	r1, [r3, r2]
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	2243      	movs	r2, #67	; 0x43
    22ca:	2100      	movs	r1, #0
    22cc:	5499      	strb	r1, [r3, r2]
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	2244      	movs	r2, #68	; 0x44
    22d2:	2100      	movs	r1, #0
    22d4:	5499      	strb	r1, [r3, r2]
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	2245      	movs	r2, #69	; 0x45
    22da:	2100      	movs	r1, #0
    22dc:	5499      	strb	r1, [r3, r2]
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	2246      	movs	r2, #70	; 0x46
    22e2:	2100      	movs	r1, #0
    22e4:	5499      	strb	r1, [r3, r2]
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	2247      	movs	r2, #71	; 0x47
    22ea:	2100      	movs	r1, #0
    22ec:	5499      	strb	r1, [r3, r2]
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	2248      	movs	r2, #72	; 0x48
    22f2:	2100      	movs	r1, #0
    22f4:	5499      	strb	r1, [r3, r2]
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	2249      	movs	r2, #73	; 0x49
    22fa:	2100      	movs	r1, #0
    22fc:	5499      	strb	r1, [r3, r2]
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	224a      	movs	r2, #74	; 0x4a
    2302:	2100      	movs	r1, #0
    2304:	5499      	strb	r1, [r3, r2]
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	224b      	movs	r2, #75	; 0x4b
    230a:	2100      	movs	r1, #0
    230c:	5499      	strb	r1, [r3, r2]
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	224c      	movs	r2, #76	; 0x4c
    2312:	2100      	movs	r1, #0
    2314:	5499      	strb	r1, [r3, r2]
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	224d      	movs	r2, #77	; 0x4d
    231a:	2100      	movs	r1, #0
    231c:	5499      	strb	r1, [r3, r2]
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	224e      	movs	r2, #78	; 0x4e
    2322:	2100      	movs	r1, #0
    2324:	5499      	strb	r1, [r3, r2]
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	224f      	movs	r2, #79	; 0x4f
    232a:	2100      	movs	r1, #0
    232c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	2250      	movs	r2, #80	; 0x50
    2332:	2100      	movs	r1, #0
    2334:	5499      	strb	r1, [r3, r2]
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	2251      	movs	r2, #81	; 0x51
    233a:	2100      	movs	r1, #0
    233c:	5499      	strb	r1, [r3, r2]
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	2252      	movs	r2, #82	; 0x52
    2342:	2100      	movs	r1, #0
    2344:	5499      	strb	r1, [r3, r2]
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	2253      	movs	r2, #83	; 0x53
    234a:	2100      	movs	r1, #0
    234c:	5499      	strb	r1, [r3, r2]
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	2254      	movs	r2, #84	; 0x54
    2352:	2100      	movs	r1, #0
    2354:	5499      	strb	r1, [r3, r2]
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	2255      	movs	r2, #85	; 0x55
    235a:	2100      	movs	r1, #0
    235c:	5499      	strb	r1, [r3, r2]
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	2256      	movs	r2, #86	; 0x56
    2362:	2100      	movs	r1, #0
    2364:	5499      	strb	r1, [r3, r2]
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2257      	movs	r2, #87	; 0x57
    236a:	2100      	movs	r1, #0
    236c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	2298      	movs	r2, #152	; 0x98
    2372:	2100      	movs	r1, #0
    2374:	5499      	strb	r1, [r3, r2]
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	2200      	movs	r2, #0
    237a:	659a      	str	r2, [r3, #88]	; 0x58
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	2200      	movs	r2, #0
    2380:	679a      	str	r2, [r3, #120]	; 0x78
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	2299      	movs	r2, #153	; 0x99
    2386:	2100      	movs	r1, #0
    2388:	5499      	strb	r1, [r3, r2]
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	2200      	movs	r2, #0
    238e:	65da      	str	r2, [r3, #92]	; 0x5c
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	2200      	movs	r2, #0
    2394:	67da      	str	r2, [r3, #124]	; 0x7c
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	229a      	movs	r2, #154	; 0x9a
    239a:	2100      	movs	r1, #0
    239c:	5499      	strb	r1, [r3, r2]
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	2200      	movs	r2, #0
    23a2:	661a      	str	r2, [r3, #96]	; 0x60
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	2280      	movs	r2, #128	; 0x80
    23a8:	2100      	movs	r1, #0
    23aa:	5099      	str	r1, [r3, r2]
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	229b      	movs	r2, #155	; 0x9b
    23b0:	2100      	movs	r1, #0
    23b2:	5499      	strb	r1, [r3, r2]
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	2200      	movs	r2, #0
    23b8:	665a      	str	r2, [r3, #100]	; 0x64
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	2284      	movs	r2, #132	; 0x84
    23be:	2100      	movs	r1, #0
    23c0:	5099      	str	r1, [r3, r2]
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	229c      	movs	r2, #156	; 0x9c
    23c6:	2100      	movs	r1, #0
    23c8:	5499      	strb	r1, [r3, r2]
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	2200      	movs	r2, #0
    23ce:	669a      	str	r2, [r3, #104]	; 0x68
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	2288      	movs	r2, #136	; 0x88
    23d4:	2100      	movs	r1, #0
    23d6:	5099      	str	r1, [r3, r2]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	229d      	movs	r2, #157	; 0x9d
    23dc:	2100      	movs	r1, #0
    23de:	5499      	strb	r1, [r3, r2]
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	2200      	movs	r2, #0
    23e4:	66da      	str	r2, [r3, #108]	; 0x6c
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	228c      	movs	r2, #140	; 0x8c
    23ea:	2100      	movs	r1, #0
    23ec:	5099      	str	r1, [r3, r2]
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	229e      	movs	r2, #158	; 0x9e
    23f2:	2100      	movs	r1, #0
    23f4:	5499      	strb	r1, [r3, r2]
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	2200      	movs	r2, #0
    23fa:	671a      	str	r2, [r3, #112]	; 0x70
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	2290      	movs	r2, #144	; 0x90
    2400:	2100      	movs	r1, #0
    2402:	5099      	str	r1, [r3, r2]
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	229f      	movs	r2, #159	; 0x9f
    2408:	2100      	movs	r1, #0
    240a:	5499      	strb	r1, [r3, r2]
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	2200      	movs	r2, #0
    2410:	675a      	str	r2, [r3, #116]	; 0x74
    2412:	687b      	ldr	r3, [r7, #4]
    2414:	2294      	movs	r2, #148	; 0x94
    2416:	2100      	movs	r1, #0
    2418:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	22a0      	movs	r2, #160	; 0xa0
    241e:	2101      	movs	r1, #1
    2420:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	22a1      	movs	r2, #161	; 0xa1
    2426:	2100      	movs	r1, #0
    2428:	5499      	strb	r1, [r3, r2]
}
    242a:	46bd      	mov	sp, r7
    242c:	b005      	add	sp, #20
    242e:	bd90      	pop	{r4, r7, pc}
    2430:	00002131 	.word	0x00002131
    2434:	00008ff0 	.word	0x00008ff0

00002438 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2438:	b580      	push	{r7, lr}
    243a:	b086      	sub	sp, #24
    243c:	af00      	add	r7, sp, #0
    243e:	60b9      	str	r1, [r7, #8]
    2440:	607a      	str	r2, [r7, #4]
    2442:	230f      	movs	r3, #15
    2444:	18fb      	adds	r3, r7, r3
    2446:	1c02      	adds	r2, r0, #0
    2448:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    244a:	2300      	movs	r3, #0
    244c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    244e:	2300      	movs	r3, #0
    2450:	613b      	str	r3, [r7, #16]
    2452:	e01d      	b.n	2490 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    2454:	68ba      	ldr	r2, [r7, #8]
    2456:	693b      	ldr	r3, [r7, #16]
    2458:	18d3      	adds	r3, r2, r3
    245a:	3310      	adds	r3, #16
    245c:	781b      	ldrb	r3, [r3, #0]
    245e:	2b01      	cmp	r3, #1
    2460:	d113      	bne.n	248a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    2462:	230f      	movs	r3, #15
    2464:	18fb      	adds	r3, r7, r3
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	4a1b      	ldr	r2, [pc, #108]	; (24d8 <_tcc_build_ctrla+0xa0>)
    246a:	5cd3      	ldrb	r3, [r2, r3]
    246c:	1e1a      	subs	r2, r3, #0
    246e:	693b      	ldr	r3, [r7, #16]
    2470:	429a      	cmp	r2, r3
    2472:	da01      	bge.n	2478 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    2474:	2317      	movs	r3, #23
    2476:	e02a      	b.n	24ce <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	045a      	lsls	r2, r3, #17
    247c:	693b      	ldr	r3, [r7, #16]
    247e:	409a      	lsls	r2, r3
    2480:	1c13      	adds	r3, r2, #0
    2482:	1c1a      	adds	r2, r3, #0
    2484:	697b      	ldr	r3, [r7, #20]
    2486:	4313      	orrs	r3, r2
    2488:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    248a:	693b      	ldr	r3, [r7, #16]
    248c:	3301      	adds	r3, #1
    248e:	613b      	str	r3, [r7, #16]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	2b03      	cmp	r3, #3
    2494:	ddde      	ble.n	2454 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    2496:	68bb      	ldr	r3, [r7, #8]
    2498:	22a1      	movs	r2, #161	; 0xa1
    249a:	5c9b      	ldrb	r3, [r3, r2]
    249c:	2b00      	cmp	r3, #0
    249e:	d004      	beq.n	24aa <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    24a0:	697b      	ldr	r3, [r7, #20]
    24a2:	2280      	movs	r2, #128	; 0x80
    24a4:	0112      	lsls	r2, r2, #4
    24a6:	4313      	orrs	r3, r2
    24a8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    24aa:	68bb      	ldr	r3, [r7, #8]
    24ac:	7b1b      	ldrb	r3, [r3, #12]
    24ae:	031b      	lsls	r3, r3, #12
    24b0:	1c1a      	adds	r2, r3, #0
    24b2:	697b      	ldr	r3, [r7, #20]
    24b4:	4313      	orrs	r3, r2
    24b6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    24b8:	68bb      	ldr	r3, [r7, #8]
    24ba:	7adb      	ldrb	r3, [r3, #11]
    24bc:	021b      	lsls	r3, r3, #8
    24be:	1c1a      	adds	r2, r3, #0
    24c0:	697b      	ldr	r3, [r7, #20]
    24c2:	4313      	orrs	r3, r2
    24c4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	697a      	ldr	r2, [r7, #20]
    24ca:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    24cc:	2300      	movs	r3, #0
}
    24ce:	1c18      	adds	r0, r3, #0
    24d0:	46bd      	mov	sp, r7
    24d2:	b006      	add	sp, #24
    24d4:	bd80      	pop	{r7, pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	00008ffc 	.word	0x00008ffc

000024dc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    24dc:	b580      	push	{r7, lr}
    24de:	b086      	sub	sp, #24
    24e0:	af00      	add	r7, sp, #0
    24e2:	60b9      	str	r1, [r7, #8]
    24e4:	607a      	str	r2, [r7, #4]
    24e6:	230f      	movs	r3, #15
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	1c02      	adds	r2, r0, #0
    24ec:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    24ee:	2317      	movs	r3, #23
    24f0:	18fb      	adds	r3, r7, r3
    24f2:	2200      	movs	r2, #0
    24f4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    24f6:	68bb      	ldr	r3, [r7, #8]
    24f8:	7a1b      	ldrb	r3, [r3, #8]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d007      	beq.n	250e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    24fe:	2317      	movs	r3, #23
    2500:	18fb      	adds	r3, r7, r3
    2502:	2217      	movs	r2, #23
    2504:	18ba      	adds	r2, r7, r2
    2506:	7812      	ldrb	r2, [r2, #0]
    2508:	2104      	movs	r1, #4
    250a:	430a      	orrs	r2, r1
    250c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    250e:	68bb      	ldr	r3, [r7, #8]
    2510:	7a5b      	ldrb	r3, [r3, #9]
    2512:	2b01      	cmp	r3, #1
    2514:	d107      	bne.n	2526 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    2516:	2317      	movs	r3, #23
    2518:	18fb      	adds	r3, r7, r3
    251a:	2217      	movs	r2, #23
    251c:	18ba      	adds	r2, r7, r2
    251e:	7812      	ldrb	r2, [r2, #0]
    2520:	2101      	movs	r1, #1
    2522:	430a      	orrs	r2, r1
    2524:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	2217      	movs	r2, #23
    252a:	18ba      	adds	r2, r7, r2
    252c:	7812      	ldrb	r2, [r2, #0]
    252e:	701a      	strb	r2, [r3, #0]
}
    2530:	46bd      	mov	sp, r7
    2532:	b006      	add	sp, #24
    2534:	bd80      	pop	{r7, pc}
    2536:	46c0      	nop			; (mov r8, r8)

00002538 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2538:	b580      	push	{r7, lr}
    253a:	b088      	sub	sp, #32
    253c:	af00      	add	r7, sp, #0
    253e:	60b9      	str	r1, [r7, #8]
    2540:	607a      	str	r2, [r7, #4]
    2542:	230f      	movs	r3, #15
    2544:	18fb      	adds	r3, r7, r3
    2546:	1c02      	adds	r2, r0, #0
    2548:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    254a:	230f      	movs	r3, #15
    254c:	18fb      	adds	r3, r7, r3
    254e:	781a      	ldrb	r2, [r3, #0]
    2550:	231b      	movs	r3, #27
    2552:	18fb      	adds	r3, r7, r3
    2554:	493e      	ldr	r1, [pc, #248]	; (2650 <_tcc_build_faults+0x118>)
    2556:	5c8a      	ldrb	r2, [r1, r2]
    2558:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    255a:	2300      	movs	r3, #0
    255c:	61fb      	str	r3, [r7, #28]
    255e:	e06e      	b.n	263e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    2560:	69fa      	ldr	r2, [r7, #28]
    2562:	1c13      	adds	r3, r2, #0
    2564:	009b      	lsls	r3, r3, #2
    2566:	189b      	adds	r3, r3, r2
    2568:	005b      	lsls	r3, r3, #1
    256a:	3328      	adds	r3, #40	; 0x28
    256c:	68ba      	ldr	r2, [r7, #8]
    256e:	18d3      	adds	r3, r2, r3
    2570:	3304      	adds	r3, #4
    2572:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    2574:	697b      	ldr	r3, [r7, #20]
    2576:	7a5b      	ldrb	r3, [r3, #9]
    2578:	221b      	movs	r2, #27
    257a:	18ba      	adds	r2, r7, r2
    257c:	7812      	ldrb	r2, [r2, #0]
    257e:	429a      	cmp	r2, r3
    2580:	d801      	bhi.n	2586 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    2582:	2317      	movs	r3, #23
    2584:	e05f      	b.n	2646 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    2586:	697b      	ldr	r3, [r7, #20]
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	2b0f      	cmp	r3, #15
    258c:	d901      	bls.n	2592 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    258e:	2317      	movs	r3, #23
    2590:	e059      	b.n	2646 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2592:	697b      	ldr	r3, [r7, #20]
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	061b      	lsls	r3, r3, #24
    2598:	1c1a      	adds	r2, r3, #0
    259a:	23f0      	movs	r3, #240	; 0xf0
    259c:	051b      	lsls	r3, r3, #20
    259e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    25a0:	697b      	ldr	r3, [r7, #20]
    25a2:	785b      	ldrb	r3, [r3, #1]
    25a4:	041b      	lsls	r3, r3, #16
    25a6:	1c19      	adds	r1, r3, #0
    25a8:	23ff      	movs	r3, #255	; 0xff
    25aa:	041b      	lsls	r3, r3, #16
    25ac:	400b      	ands	r3, r1
    25ae:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    25b0:	697b      	ldr	r3, [r7, #20]
    25b2:	789b      	ldrb	r3, [r3, #2]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d001      	beq.n	25bc <_tcc_build_faults+0x84>
    25b8:	2380      	movs	r3, #128	; 0x80
    25ba:	e000      	b.n	25be <_tcc_build_faults+0x86>
    25bc:	2300      	movs	r3, #0
    25be:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    25c0:	697b      	ldr	r3, [r7, #20]
    25c2:	78db      	ldrb	r3, [r3, #3]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d001      	beq.n	25cc <_tcc_build_faults+0x94>
    25c8:	2308      	movs	r3, #8
    25ca:	e000      	b.n	25ce <_tcc_build_faults+0x96>
    25cc:	2300      	movs	r3, #0
    25ce:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    25d0:	697b      	ldr	r3, [r7, #20]
    25d2:	791b      	ldrb	r3, [r3, #4]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d001      	beq.n	25dc <_tcc_build_faults+0xa4>
    25d8:	2310      	movs	r3, #16
    25da:	e000      	b.n	25de <_tcc_build_faults+0xa6>
    25dc:	2300      	movs	r3, #0
    25de:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    25e0:	697b      	ldr	r3, [r7, #20]
    25e2:	795b      	ldrb	r3, [r3, #5]
    25e4:	1c19      	adds	r1, r3, #0
    25e6:	2303      	movs	r3, #3
    25e8:	400b      	ands	r3, r1
    25ea:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    25ec:	697b      	ldr	r3, [r7, #20]
    25ee:	799b      	ldrb	r3, [r3, #6]
    25f0:	015b      	lsls	r3, r3, #5
    25f2:	1c19      	adds	r1, r3, #0
    25f4:	2360      	movs	r3, #96	; 0x60
    25f6:	400b      	ands	r3, r1
    25f8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    25fa:	697b      	ldr	r3, [r7, #20]
    25fc:	79db      	ldrb	r3, [r3, #7]
    25fe:	021b      	lsls	r3, r3, #8
    2600:	1c19      	adds	r1, r3, #0
    2602:	23c0      	movs	r3, #192	; 0xc0
    2604:	009b      	lsls	r3, r3, #2
    2606:	400b      	ands	r3, r1
    2608:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    260a:	697b      	ldr	r3, [r7, #20]
    260c:	7a1b      	ldrb	r3, [r3, #8]
    260e:	031b      	lsls	r3, r3, #12
    2610:	1c19      	adds	r1, r3, #0
    2612:	23e0      	movs	r3, #224	; 0xe0
    2614:	01db      	lsls	r3, r3, #7
    2616:	400b      	ands	r3, r1
    2618:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    261a:	697b      	ldr	r3, [r7, #20]
    261c:	7a5b      	ldrb	r3, [r3, #9]
    261e:	029b      	lsls	r3, r3, #10
    2620:	1c19      	adds	r1, r3, #0
    2622:	23c0      	movs	r3, #192	; 0xc0
    2624:	011b      	lsls	r3, r3, #4
    2626:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2628:	4313      	orrs	r3, r2
    262a:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    262c:	69fb      	ldr	r3, [r7, #28]
    262e:	009b      	lsls	r3, r3, #2
    2630:	687a      	ldr	r2, [r7, #4]
    2632:	18d3      	adds	r3, r2, r3
    2634:	693a      	ldr	r2, [r7, #16]
    2636:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2638:	69fb      	ldr	r3, [r7, #28]
    263a:	3301      	adds	r3, #1
    263c:	61fb      	str	r3, [r7, #28]
    263e:	69fb      	ldr	r3, [r7, #28]
    2640:	2b01      	cmp	r3, #1
    2642:	dd8d      	ble.n	2560 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    2644:	2300      	movs	r3, #0
}
    2646:	1c18      	adds	r0, r3, #0
    2648:	46bd      	mov	sp, r7
    264a:	b008      	add	sp, #32
    264c:	bd80      	pop	{r7, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	00008ffc 	.word	0x00008ffc

00002654 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2654:	b580      	push	{r7, lr}
    2656:	b088      	sub	sp, #32
    2658:	af00      	add	r7, sp, #0
    265a:	60b9      	str	r1, [r7, #8]
    265c:	607a      	str	r2, [r7, #4]
    265e:	230f      	movs	r3, #15
    2660:	18fb      	adds	r3, r7, r3
    2662:	1c02      	adds	r2, r0, #0
    2664:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    2666:	230f      	movs	r3, #15
    2668:	18fb      	adds	r3, r7, r3
    266a:	781a      	ldrb	r2, [r3, #0]
    266c:	2317      	movs	r3, #23
    266e:	18fb      	adds	r3, r7, r3
    2670:	492c      	ldr	r1, [pc, #176]	; (2724 <_tcc_build_drvctrl+0xd0>)
    2672:	5c8a      	ldrb	r2, [r1, r2]
    2674:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    2676:	2300      	movs	r3, #0
    2678:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    267a:	2300      	movs	r3, #0
    267c:	61fb      	str	r3, [r7, #28]
    267e:	e045      	b.n	270c <_tcc_build_drvctrl+0xb8>
		if (config->wave_ext.invert[i]) {
    2680:	68ba      	ldr	r2, [r7, #8]
    2682:	2148      	movs	r1, #72	; 0x48
    2684:	69fb      	ldr	r3, [r7, #28]
    2686:	18d3      	adds	r3, r2, r3
    2688:	185b      	adds	r3, r3, r1
    268a:	7a1b      	ldrb	r3, [r3, #8]
    268c:	2b00      	cmp	r3, #0
    268e:	d010      	beq.n	26b2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    2690:	2317      	movs	r3, #23
    2692:	18fb      	adds	r3, r7, r3
    2694:	781a      	ldrb	r2, [r3, #0]
    2696:	69fb      	ldr	r3, [r7, #28]
    2698:	429a      	cmp	r2, r3
    269a:	d801      	bhi.n	26a0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    269c:	2317      	movs	r3, #23
    269e:	e03c      	b.n	271a <_tcc_build_drvctrl+0xc6>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    26a0:	69fb      	ldr	r3, [r7, #28]
    26a2:	2280      	movs	r2, #128	; 0x80
    26a4:	0252      	lsls	r2, r2, #9
    26a6:	409a      	lsls	r2, r3
    26a8:	1c13      	adds	r3, r2, #0
    26aa:	1c1a      	adds	r2, r3, #0
    26ac:	69bb      	ldr	r3, [r7, #24]
    26ae:	4313      	orrs	r3, r2
    26b0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    26b2:	68ba      	ldr	r2, [r7, #8]
    26b4:	69fb      	ldr	r3, [r7, #28]
    26b6:	331c      	adds	r3, #28
    26b8:	005b      	lsls	r3, r3, #1
    26ba:	18d3      	adds	r3, r2, r3
    26bc:	7a5b      	ldrb	r3, [r3, #9]
    26be:	2b00      	cmp	r3, #0
    26c0:	d021      	beq.n	2706 <_tcc_build_drvctrl+0xb2>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    26c2:	2317      	movs	r3, #23
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	781a      	ldrb	r2, [r3, #0]
    26c8:	69fb      	ldr	r3, [r7, #28]
    26ca:	429a      	cmp	r2, r3
    26cc:	d801      	bhi.n	26d2 <_tcc_build_drvctrl+0x7e>
				return STATUS_ERR_INVALID_ARG;
    26ce:	2317      	movs	r3, #23
    26d0:	e023      	b.n	271a <_tcc_build_drvctrl+0xc6>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    26d2:	68ba      	ldr	r2, [r7, #8]
    26d4:	69fb      	ldr	r3, [r7, #28]
    26d6:	331c      	adds	r3, #28
    26d8:	005b      	lsls	r3, r3, #1
    26da:	18d3      	adds	r3, r2, r3
    26dc:	7a5b      	ldrb	r3, [r3, #9]
    26de:	2b02      	cmp	r3, #2
    26e0:	d109      	bne.n	26f6 <_tcc_build_drvctrl+0xa2>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    26e2:	69fb      	ldr	r3, [r7, #28]
    26e4:	2202      	movs	r2, #2
    26e6:	32ff      	adds	r2, #255	; 0xff
    26e8:	409a      	lsls	r2, r3
    26ea:	1c13      	adds	r3, r2, #0
    26ec:	1c1a      	adds	r2, r3, #0
    26ee:	69bb      	ldr	r3, [r7, #24]
    26f0:	4313      	orrs	r3, r2
    26f2:	61bb      	str	r3, [r7, #24]
    26f4:	e007      	b.n	2706 <_tcc_build_drvctrl+0xb2>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    26f6:	69fb      	ldr	r3, [r7, #28]
    26f8:	2201      	movs	r2, #1
    26fa:	409a      	lsls	r2, r3
    26fc:	1c13      	adds	r3, r2, #0
    26fe:	1c1a      	adds	r2, r3, #0
    2700:	69bb      	ldr	r3, [r7, #24]
    2702:	4313      	orrs	r3, r2
    2704:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2706:	69fb      	ldr	r3, [r7, #28]
    2708:	3301      	adds	r3, #1
    270a:	61fb      	str	r3, [r7, #28]
    270c:	69fb      	ldr	r3, [r7, #28]
    270e:	2b07      	cmp	r3, #7
    2710:	d9b6      	bls.n	2680 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	69ba      	ldr	r2, [r7, #24]
    2716:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2718:	2300      	movs	r3, #0
}
    271a:	1c18      	adds	r0, r3, #0
    271c:	46bd      	mov	sp, r7
    271e:	b008      	add	sp, #32
    2720:	bd80      	pop	{r7, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00009000 	.word	0x00009000

00002728 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2728:	b580      	push	{r7, lr}
    272a:	b088      	sub	sp, #32
    272c:	af00      	add	r7, sp, #0
    272e:	60b9      	str	r1, [r7, #8]
    2730:	607a      	str	r2, [r7, #4]
    2732:	230f      	movs	r3, #15
    2734:	18fb      	adds	r3, r7, r3
    2736:	1c02      	adds	r2, r0, #0
    2738:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    273a:	230f      	movs	r3, #15
    273c:	18fb      	adds	r3, r7, r3
    273e:	781a      	ldrb	r2, [r3, #0]
    2740:	2317      	movs	r3, #23
    2742:	18fb      	adds	r3, r7, r3
    2744:	491d      	ldr	r1, [pc, #116]	; (27bc <_tcc_build_waves+0x94>)
    2746:	5c8a      	ldrb	r2, [r1, r2]
    2748:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    274a:	68bb      	ldr	r3, [r7, #8]
    274c:	3310      	adds	r3, #16
    274e:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2750:	693b      	ldr	r3, [r7, #16]
    2752:	7a5b      	ldrb	r3, [r3, #9]
    2754:	011b      	lsls	r3, r3, #4
    2756:	1c1a      	adds	r2, r3, #0
    2758:	2330      	movs	r3, #48	; 0x30
    275a:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    275c:	693b      	ldr	r3, [r7, #16]
    275e:	7a1b      	ldrb	r3, [r3, #8]
    2760:	1c19      	adds	r1, r3, #0
    2762:	2307      	movs	r3, #7
    2764:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2766:	4313      	orrs	r3, r2
    2768:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    276a:	2300      	movs	r3, #0
    276c:	61fb      	str	r3, [r7, #28]
    276e:	e019      	b.n	27a4 <_tcc_build_waves+0x7c>
		if (wav_cfg->wave_polarity[n]) {
    2770:	693a      	ldr	r2, [r7, #16]
    2772:	69fb      	ldr	r3, [r7, #28]
    2774:	18d3      	adds	r3, r2, r3
    2776:	791b      	ldrb	r3, [r3, #4]
    2778:	2b00      	cmp	r3, #0
    277a:	d010      	beq.n	279e <_tcc_build_waves+0x76>
			if (n >= cc_num) {
    277c:	2317      	movs	r3, #23
    277e:	18fb      	adds	r3, r7, r3
    2780:	781a      	ldrb	r2, [r3, #0]
    2782:	69fb      	ldr	r3, [r7, #28]
    2784:	429a      	cmp	r2, r3
    2786:	dc01      	bgt.n	278c <_tcc_build_waves+0x64>
				return STATUS_ERR_INVALID_ARG;
    2788:	2317      	movs	r3, #23
    278a:	e012      	b.n	27b2 <_tcc_build_waves+0x8a>
			}
			wave |= (TCC_WAVE_POL0 << n);
    278c:	2380      	movs	r3, #128	; 0x80
    278e:	025a      	lsls	r2, r3, #9
    2790:	69fb      	ldr	r3, [r7, #28]
    2792:	409a      	lsls	r2, r3
    2794:	1c13      	adds	r3, r2, #0
    2796:	1c1a      	adds	r2, r3, #0
    2798:	69bb      	ldr	r3, [r7, #24]
    279a:	4313      	orrs	r3, r2
    279c:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    279e:	69fb      	ldr	r3, [r7, #28]
    27a0:	3301      	adds	r3, #1
    27a2:	61fb      	str	r3, [r7, #28]
    27a4:	69fb      	ldr	r3, [r7, #28]
    27a6:	2b03      	cmp	r3, #3
    27a8:	dde2      	ble.n	2770 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	69ba      	ldr	r2, [r7, #24]
    27ae:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    27b0:	2300      	movs	r3, #0
}
    27b2:	1c18      	adds	r0, r3, #0
    27b4:	46bd      	mov	sp, r7
    27b6:	b008      	add	sp, #32
    27b8:	bd80      	pop	{r7, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	00008ffc 	.word	0x00008ffc

000027c0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    27c0:	b590      	push	{r4, r7, lr}
    27c2:	b091      	sub	sp, #68	; 0x44
    27c4:	af00      	add	r7, sp, #0
    27c6:	60f8      	str	r0, [r7, #12]
    27c8:	60b9      	str	r1, [r7, #8]
    27ca:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    27cc:	233b      	movs	r3, #59	; 0x3b
    27ce:	18fc      	adds	r4, r7, r3
    27d0:	68bb      	ldr	r3, [r7, #8]
    27d2:	1c18      	adds	r0, r3, #0
    27d4:	4bc8      	ldr	r3, [pc, #800]	; (2af8 <tcc_init+0x338>)
    27d6:	4798      	blx	r3
    27d8:	1c03      	adds	r3, r0, #0
    27da:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    27dc:	233b      	movs	r3, #59	; 0x3b
    27de:	18fb      	adds	r3, r7, r3
    27e0:	781a      	ldrb	r2, [r3, #0]
    27e2:	4bc6      	ldr	r3, [pc, #792]	; (2afc <tcc_init+0x33c>)
    27e4:	0092      	lsls	r2, r2, #2
    27e6:	58d3      	ldr	r3, [r2, r3]
    27e8:	2002      	movs	r0, #2
    27ea:	1c19      	adds	r1, r3, #0
    27ec:	4bc4      	ldr	r3, [pc, #784]	; (2b00 <tcc_init+0x340>)
    27ee:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    27f0:	68bb      	ldr	r3, [r7, #8]
    27f2:	681b      	ldr	r3, [r3, #0]
    27f4:	2202      	movs	r2, #2
    27f6:	4013      	ands	r3, r2
    27f8:	d001      	beq.n	27fe <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    27fa:	231c      	movs	r3, #28
    27fc:	e1c4      	b.n	2b88 <tcc_init+0x3c8>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    27fe:	68bb      	ldr	r3, [r7, #8]
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	2201      	movs	r2, #1
    2804:	4013      	ands	r3, r2
    2806:	d001      	beq.n	280c <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    2808:	231c      	movs	r3, #28
    280a:	e1bd      	b.n	2b88 <tcc_init+0x3c8>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    280c:	233b      	movs	r3, #59	; 0x3b
    280e:	18fb      	adds	r3, r7, r3
    2810:	781a      	ldrb	r2, [r3, #0]
    2812:	4bbc      	ldr	r3, [pc, #752]	; (2b04 <tcc_init+0x344>)
    2814:	0092      	lsls	r2, r2, #2
    2816:	58d3      	ldr	r3, [r2, r3]
    2818:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	681a      	ldr	r2, [r3, #0]
    281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2820:	429a      	cmp	r2, r3
    2822:	d804      	bhi.n	282e <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	685a      	ldr	r2, [r3, #4]
    2828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    282a:	429a      	cmp	r2, r3
    282c:	d901      	bls.n	2832 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    282e:	2317      	movs	r3, #23
    2830:	e1aa      	b.n	2b88 <tcc_init+0x3c8>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2832:	2300      	movs	r3, #0
    2834:	63fb      	str	r3, [r7, #60]	; 0x3c
    2836:	e00d      	b.n	2854 <tcc_init+0x94>
		if ((config->compare.match[i] > count_max)
    2838:	687a      	ldr	r2, [r7, #4]
    283a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    283c:	3306      	adds	r3, #6
    283e:	009b      	lsls	r3, r3, #2
    2840:	18d3      	adds	r3, r2, r3
    2842:	685a      	ldr	r2, [r3, #4]
    2844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2846:	429a      	cmp	r2, r3
    2848:	d901      	bls.n	284e <tcc_init+0x8e>
			) {
			return STATUS_ERR_INVALID_ARG;
    284a:	2317      	movs	r3, #23
    284c:	e19c      	b.n	2b88 <tcc_init+0x3c8>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2850:	3301      	adds	r3, #1
    2852:	63fb      	str	r3, [r7, #60]	; 0x3c
    2854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2856:	2b03      	cmp	r3, #3
    2858:	ddee      	ble.n	2838 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    285a:	2300      	movs	r3, #0
    285c:	63fb      	str	r3, [r7, #60]	; 0x3c
    285e:	e019      	b.n	2894 <tcc_init+0xd4>
		if (!config->pins.enable_wave_out_pin[i]) {
    2860:	687a      	ldr	r2, [r7, #4]
    2862:	2198      	movs	r1, #152	; 0x98
    2864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2866:	18d3      	adds	r3, r2, r3
    2868:	185b      	adds	r3, r3, r1
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	2201      	movs	r2, #1
    286e:	4053      	eors	r3, r2
    2870:	b2db      	uxtb	r3, r3
    2872:	2b00      	cmp	r3, #0
    2874:	d000      	beq.n	2878 <tcc_init+0xb8>
			continue;
    2876:	e00a      	b.n	288e <tcc_init+0xce>
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    2878:	233b      	movs	r3, #59	; 0x3b
    287a:	18fb      	adds	r3, r7, r3
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	4aa2      	ldr	r2, [pc, #648]	; (2b08 <tcc_init+0x348>)
    2880:	5cd3      	ldrb	r3, [r2, r3]
    2882:	1e1a      	subs	r2, r3, #0
    2884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2886:	429a      	cmp	r2, r3
    2888:	dc01      	bgt.n	288e <tcc_init+0xce>
			return STATUS_ERR_INVALID_ARG;
    288a:	2317      	movs	r3, #23
    288c:	e17c      	b.n	2b88 <tcc_init+0x3c8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2890:	3301      	adds	r3, #1
    2892:	63fb      	str	r3, [r7, #60]	; 0x3c
    2894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2896:	2b07      	cmp	r3, #7
    2898:	dde2      	ble.n	2860 <tcc_init+0xa0>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    289a:	2300      	movs	r3, #0
    289c:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    289e:	2333      	movs	r3, #51	; 0x33
    28a0:	18fc      	adds	r4, r7, r3
    28a2:	233b      	movs	r3, #59	; 0x3b
    28a4:	18fb      	adds	r3, r7, r3
    28a6:	7819      	ldrb	r1, [r3, #0]
    28a8:	687a      	ldr	r2, [r7, #4]
    28aa:	232c      	movs	r3, #44	; 0x2c
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	1c08      	adds	r0, r1, #0
    28b0:	1c11      	adds	r1, r2, #0
    28b2:	1c1a      	adds	r2, r3, #0
    28b4:	4b95      	ldr	r3, [pc, #596]	; (2b0c <tcc_init+0x34c>)
    28b6:	4798      	blx	r3
    28b8:	1c03      	adds	r3, r0, #0
    28ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    28bc:	2333      	movs	r3, #51	; 0x33
    28be:	18fb      	adds	r3, r7, r3
    28c0:	781b      	ldrb	r3, [r3, #0]
    28c2:	2b00      	cmp	r3, #0
    28c4:	d003      	beq.n	28ce <tcc_init+0x10e>
		return status;
    28c6:	2333      	movs	r3, #51	; 0x33
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	e15c      	b.n	2b88 <tcc_init+0x3c8>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    28ce:	233b      	movs	r3, #59	; 0x3b
    28d0:	18fb      	adds	r3, r7, r3
    28d2:	7819      	ldrb	r1, [r3, #0]
    28d4:	687a      	ldr	r2, [r7, #4]
    28d6:	232b      	movs	r3, #43	; 0x2b
    28d8:	18fb      	adds	r3, r7, r3
    28da:	1c08      	adds	r0, r1, #0
    28dc:	1c11      	adds	r1, r2, #0
    28de:	1c1a      	adds	r2, r3, #0
    28e0:	4b8b      	ldr	r3, [pc, #556]	; (2b10 <tcc_init+0x350>)
    28e2:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    28e4:	2333      	movs	r3, #51	; 0x33
    28e6:	18fc      	adds	r4, r7, r3
    28e8:	233b      	movs	r3, #59	; 0x3b
    28ea:	18fb      	adds	r3, r7, r3
    28ec:	7819      	ldrb	r1, [r3, #0]
    28ee:	687a      	ldr	r2, [r7, #4]
    28f0:	2320      	movs	r3, #32
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	1c08      	adds	r0, r1, #0
    28f6:	1c11      	adds	r1, r2, #0
    28f8:	1c1a      	adds	r2, r3, #0
    28fa:	4b86      	ldr	r3, [pc, #536]	; (2b14 <tcc_init+0x354>)
    28fc:	4798      	blx	r3
    28fe:	1c03      	adds	r3, r0, #0
    2900:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2902:	2333      	movs	r3, #51	; 0x33
    2904:	18fb      	adds	r3, r7, r3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2b00      	cmp	r3, #0
    290a:	d003      	beq.n	2914 <tcc_init+0x154>
		return status;
    290c:	2333      	movs	r3, #51	; 0x33
    290e:	18fb      	adds	r3, r7, r3
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	e139      	b.n	2b88 <tcc_init+0x3c8>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    2914:	2300      	movs	r3, #0
    2916:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    2918:	2333      	movs	r3, #51	; 0x33
    291a:	18fc      	adds	r4, r7, r3
    291c:	233b      	movs	r3, #59	; 0x3b
    291e:	18fb      	adds	r3, r7, r3
    2920:	7819      	ldrb	r1, [r3, #0]
    2922:	687a      	ldr	r2, [r7, #4]
    2924:	231c      	movs	r3, #28
    2926:	18fb      	adds	r3, r7, r3
    2928:	1c08      	adds	r0, r1, #0
    292a:	1c11      	adds	r1, r2, #0
    292c:	1c1a      	adds	r2, r3, #0
    292e:	4b7a      	ldr	r3, [pc, #488]	; (2b18 <tcc_init+0x358>)
    2930:	4798      	blx	r3
    2932:	1c03      	adds	r3, r0, #0
    2934:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2936:	2333      	movs	r3, #51	; 0x33
    2938:	18fb      	adds	r3, r7, r3
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2b00      	cmp	r3, #0
    293e:	d003      	beq.n	2948 <tcc_init+0x188>
		return status;
    2940:	2333      	movs	r3, #51	; 0x33
    2942:	18fb      	adds	r3, r7, r3
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	e11f      	b.n	2b88 <tcc_init+0x3c8>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    2948:	2333      	movs	r3, #51	; 0x33
    294a:	18fc      	adds	r4, r7, r3
    294c:	233b      	movs	r3, #59	; 0x3b
    294e:	18fb      	adds	r3, r7, r3
    2950:	7819      	ldrb	r1, [r3, #0]
    2952:	687a      	ldr	r2, [r7, #4]
    2954:	2318      	movs	r3, #24
    2956:	18fb      	adds	r3, r7, r3
    2958:	1c08      	adds	r0, r1, #0
    295a:	1c11      	adds	r1, r2, #0
    295c:	1c1a      	adds	r2, r3, #0
    295e:	4b6f      	ldr	r3, [pc, #444]	; (2b1c <tcc_init+0x35c>)
    2960:	4798      	blx	r3
    2962:	1c03      	adds	r3, r0, #0
    2964:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2966:	2333      	movs	r3, #51	; 0x33
    2968:	18fb      	adds	r3, r7, r3
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d003      	beq.n	2978 <tcc_init+0x1b8>
		return status;
    2970:	2333      	movs	r3, #51	; 0x33
    2972:	18fb      	adds	r3, r7, r3
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	e107      	b.n	2b88 <tcc_init+0x3c8>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2978:	2300      	movs	r3, #0
    297a:	63fb      	str	r3, [r7, #60]	; 0x3c
    297c:	e008      	b.n	2990 <tcc_init+0x1d0>
		module_inst->callback[i] = NULL;
    297e:	68fa      	ldr	r2, [r7, #12]
    2980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2982:	009b      	lsls	r3, r3, #2
    2984:	18d3      	adds	r3, r2, r3
    2986:	2200      	movs	r2, #0
    2988:	605a      	str	r2, [r3, #4]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    298c:	3301      	adds	r3, #1
    298e:	63fb      	str	r3, [r7, #60]	; 0x3c
    2990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2992:	2b0b      	cmp	r3, #11
    2994:	ddf3      	ble.n	297e <tcc_init+0x1be>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	2200      	movs	r2, #0
    299a:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    299c:	68fb      	ldr	r3, [r7, #12]
    299e:	2200      	movs	r2, #0
    29a0:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    29a2:	233b      	movs	r3, #59	; 0x3b
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	781a      	ldrb	r2, [r3, #0]
    29a8:	4b5d      	ldr	r3, [pc, #372]	; (2b20 <tcc_init+0x360>)
    29aa:	0092      	lsls	r2, r2, #2
    29ac:	68f9      	ldr	r1, [r7, #12]
    29ae:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    29b0:	68fb      	ldr	r3, [r7, #12]
    29b2:	68ba      	ldr	r2, [r7, #8]
    29b4:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	22a0      	movs	r2, #160	; 0xa0
    29ba:	5c99      	ldrb	r1, [r3, r2]
    29bc:	68fb      	ldr	r3, [r7, #12]
    29be:	223c      	movs	r2, #60	; 0x3c
    29c0:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    29c2:	2314      	movs	r3, #20
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	1c18      	adds	r0, r3, #0
    29c8:	4b56      	ldr	r3, [pc, #344]	; (2b24 <tcc_init+0x364>)
    29ca:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	7a9a      	ldrb	r2, [r3, #10]
    29d0:	2314      	movs	r3, #20
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    29d6:	233b      	movs	r3, #59	; 0x3b
    29d8:	18fb      	adds	r3, r7, r3
    29da:	781b      	ldrb	r3, [r3, #0]
    29dc:	4a52      	ldr	r2, [pc, #328]	; (2b28 <tcc_init+0x368>)
    29de:	5cd2      	ldrb	r2, [r2, r3]
    29e0:	2314      	movs	r3, #20
    29e2:	18fb      	adds	r3, r7, r3
    29e4:	1c10      	adds	r0, r2, #0
    29e6:	1c19      	adds	r1, r3, #0
    29e8:	4b50      	ldr	r3, [pc, #320]	; (2b2c <tcc_init+0x36c>)
    29ea:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    29ec:	233b      	movs	r3, #59	; 0x3b
    29ee:	18fb      	adds	r3, r7, r3
    29f0:	781b      	ldrb	r3, [r3, #0]
    29f2:	4a4d      	ldr	r2, [pc, #308]	; (2b28 <tcc_init+0x368>)
    29f4:	5cd3      	ldrb	r3, [r2, r3]
    29f6:	1c18      	adds	r0, r3, #0
    29f8:	4b4d      	ldr	r3, [pc, #308]	; (2b30 <tcc_init+0x370>)
    29fa:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    29fc:	2300      	movs	r3, #0
    29fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    2a00:	e02c      	b.n	2a5c <tcc_init+0x29c>
		if (!config->pins.enable_wave_out_pin[i]) {
    2a02:	687a      	ldr	r2, [r7, #4]
    2a04:	2198      	movs	r1, #152	; 0x98
    2a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a08:	18d3      	adds	r3, r2, r3
    2a0a:	185b      	adds	r3, r3, r1
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	2201      	movs	r2, #1
    2a10:	4053      	eors	r3, r2
    2a12:	b2db      	uxtb	r3, r3
    2a14:	2b00      	cmp	r3, #0
    2a16:	d000      	beq.n	2a1a <tcc_init+0x25a>
			continue;
    2a18:	e01d      	b.n	2a56 <tcc_init+0x296>
		}

		system_pinmux_get_config_defaults(&pin_config);
    2a1a:	2310      	movs	r3, #16
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	1c18      	adds	r0, r3, #0
    2a20:	4b44      	ldr	r3, [pc, #272]	; (2b34 <tcc_init+0x374>)
    2a22:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a28:	321e      	adds	r2, #30
    2a2a:	0092      	lsls	r2, r2, #2
    2a2c:	58d3      	ldr	r3, [r2, r3]
    2a2e:	b2da      	uxtb	r2, r3
    2a30:	2310      	movs	r3, #16
    2a32:	18fb      	adds	r3, r7, r3
    2a34:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2a36:	2310      	movs	r3, #16
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	2201      	movs	r2, #1
    2a3c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a42:	3216      	adds	r2, #22
    2a44:	0092      	lsls	r2, r2, #2
    2a46:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2a48:	b2da      	uxtb	r2, r3
    2a4a:	2310      	movs	r3, #16
    2a4c:	18fb      	adds	r3, r7, r3
    2a4e:	1c10      	adds	r0, r2, #0
    2a50:	1c19      	adds	r1, r3, #0
    2a52:	4b39      	ldr	r3, [pc, #228]	; (2b38 <tcc_init+0x378>)
    2a54:	4798      	blx	r3
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a58:	3301      	adds	r3, #1
    2a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    2a5c:	233b      	movs	r3, #59	; 0x3b
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	4a29      	ldr	r2, [pc, #164]	; (2b08 <tcc_init+0x348>)
    2a64:	5cd3      	ldrb	r3, [r2, r3]
    2a66:	1e1a      	subs	r2, r3, #0
    2a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a6a:	429a      	cmp	r2, r3
    2a6c:	dcc9      	bgt.n	2a02 <tcc_init+0x242>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    2a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a70:	68bb      	ldr	r3, [r7, #8]
    2a72:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2a74:	46c0      	nop			; (mov r8, r8)
    2a76:	68bb      	ldr	r3, [r7, #8]
    2a78:	689b      	ldr	r3, [r3, #8]
    2a7a:	2204      	movs	r2, #4
    2a7c:	4013      	ands	r3, r2
    2a7e:	d1fa      	bne.n	2a76 <tcc_init+0x2b6>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    2a80:	68bb      	ldr	r3, [r7, #8]
    2a82:	22ff      	movs	r2, #255	; 0xff
    2a84:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	68bb      	ldr	r3, [r7, #8]
    2a8a:	689b      	ldr	r3, [r3, #8]
    2a8c:	2204      	movs	r2, #4
    2a8e:	4013      	ands	r3, r2
    2a90:	d1fa      	bne.n	2a88 <tcc_init+0x2c8>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    2a92:	232b      	movs	r3, #43	; 0x2b
    2a94:	18fb      	adds	r3, r7, r3
    2a96:	781a      	ldrb	r2, [r3, #0]
    2a98:	68bb      	ldr	r3, [r7, #8]
    2a9a:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    2a9c:	2320      	movs	r3, #32
    2a9e:	18fb      	adds	r3, r7, r3
    2aa0:	681a      	ldr	r2, [r3, #0]
    2aa2:	68bb      	ldr	r3, [r7, #8]
    2aa4:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    2aa6:	2320      	movs	r3, #32
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	685a      	ldr	r2, [r3, #4]
    2aac:	68bb      	ldr	r3, [r7, #8]
    2aae:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    2ab0:	69fa      	ldr	r2, [r7, #28]
    2ab2:	68bb      	ldr	r3, [r7, #8]
    2ab4:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	68bb      	ldr	r3, [r7, #8]
    2aba:	689b      	ldr	r3, [r3, #8]
    2abc:	4a1f      	ldr	r2, [pc, #124]	; (2b3c <tcc_init+0x37c>)
    2abe:	4013      	ands	r3, r2
    2ac0:	d1fa      	bne.n	2ab8 <tcc_init+0x2f8>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    2ac2:	69ba      	ldr	r2, [r7, #24]
    2ac4:	68bb      	ldr	r3, [r7, #8]
    2ac6:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2ac8:	46c0      	nop			; (mov r8, r8)
    2aca:	68bb      	ldr	r3, [r7, #8]
    2acc:	689b      	ldr	r3, [r3, #8]
    2ace:	2210      	movs	r2, #16
    2ad0:	4013      	ands	r3, r2
    2ad2:	d1fa      	bne.n	2aca <tcc_init+0x30a>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	681a      	ldr	r2, [r3, #0]
    2ad8:	68bb      	ldr	r3, [r7, #8]
    2ada:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    2adc:	46c0      	nop			; (mov r8, r8)
    2ade:	68bb      	ldr	r3, [r7, #8]
    2ae0:	689b      	ldr	r3, [r3, #8]
    2ae2:	4a17      	ldr	r2, [pc, #92]	; (2b40 <tcc_init+0x380>)
    2ae4:	4013      	ands	r3, r2
    2ae6:	d1fa      	bne.n	2ade <tcc_init+0x31e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	685a      	ldr	r2, [r3, #4]
    2aec:	68bb      	ldr	r3, [r7, #8]
    2aee:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2af0:	2300      	movs	r3, #0
    2af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    2af4:	e03e      	b.n	2b74 <tcc_init+0x3b4>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002131 	.word	0x00002131
    2afc:	00008fe4 	.word	0x00008fe4
    2b00:	000020ad 	.word	0x000020ad
    2b04:	00008ff0 	.word	0x00008ff0
    2b08:	00009000 	.word	0x00009000
    2b0c:	00002439 	.word	0x00002439
    2b10:	000024dd 	.word	0x000024dd
    2b14:	00002539 	.word	0x00002539
    2b18:	00002655 	.word	0x00002655
    2b1c:	00002729 	.word	0x00002729
    2b20:	200000e0 	.word	0x200000e0
    2b24:	00002099 	.word	0x00002099
    2b28:	00008fe0 	.word	0x00008fe0
    2b2c:	00004a31 	.word	0x00004a31
    2b30:	00004a75 	.word	0x00004a75
    2b34:	00002109 	.word	0x00002109
    2b38:	00004d1d 	.word	0x00004d1d
    2b3c:	00020040 	.word	0x00020040
    2b40:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2b44:	46c0      	nop			; (mov r8, r8)
    2b46:	68bb      	ldr	r3, [r7, #8]
    2b48:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2b4a:	4911      	ldr	r1, [pc, #68]	; (2b90 <tcc_init+0x3d0>)
    2b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2b4e:	4091      	lsls	r1, r2
    2b50:	1c0a      	adds	r2, r1, #0
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2b52:	4013      	ands	r3, r2
    2b54:	d1f7      	bne.n	2b46 <tcc_init+0x386>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	3306      	adds	r3, #6
    2b5c:	009b      	lsls	r3, r3, #2
    2b5e:	18d3      	adds	r3, r2, r3
    2b60:	685a      	ldr	r2, [r3, #4]
    2b62:	68b9      	ldr	r1, [r7, #8]
    2b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b66:	3310      	adds	r3, #16
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	18cb      	adds	r3, r1, r3
    2b6c:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b70:	3301      	adds	r3, #1
    2b72:	63fb      	str	r3, [r7, #60]	; 0x3c
    2b74:	233b      	movs	r3, #59	; 0x3b
    2b76:	18fb      	adds	r3, r7, r3
    2b78:	781b      	ldrb	r3, [r3, #0]
    2b7a:	4a06      	ldr	r2, [pc, #24]	; (2b94 <tcc_init+0x3d4>)
    2b7c:	5cd3      	ldrb	r3, [r2, r3]
    2b7e:	1e1a      	subs	r2, r3, #0
    2b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b82:	429a      	cmp	r2, r3
    2b84:	dcde      	bgt.n	2b44 <tcc_init+0x384>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    2b86:	2300      	movs	r3, #0
}
    2b88:	1c18      	adds	r0, r3, #0
    2b8a:	46bd      	mov	sp, r7
    2b8c:	b011      	add	sp, #68	; 0x44
    2b8e:	bd90      	pop	{r4, r7, pc}
    2b90:	00080100 	.word	0x00080100
    2b94:	00008ffc 	.word	0x00008ffc

00002b98 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2b98:	b590      	push	{r4, r7, lr}
    2b9a:	b089      	sub	sp, #36	; 0x24
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	60f8      	str	r0, [r7, #12]
    2ba0:	1c08      	adds	r0, r1, #0
    2ba2:	607a      	str	r2, [r7, #4]
    2ba4:	1c19      	adds	r1, r3, #0
    2ba6:	230b      	movs	r3, #11
    2ba8:	18fb      	adds	r3, r7, r3
    2baa:	1c02      	adds	r2, r0, #0
    2bac:	701a      	strb	r2, [r3, #0]
    2bae:	230a      	movs	r3, #10
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	1c0a      	adds	r2, r1, #0
    2bb4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2bb6:	68fb      	ldr	r3, [r7, #12]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2bbc:	231b      	movs	r3, #27
    2bbe:	18fc      	adds	r4, r7, r3
    2bc0:	69fb      	ldr	r3, [r7, #28]
    2bc2:	1c18      	adds	r0, r3, #0
    2bc4:	4b28      	ldr	r3, [pc, #160]	; (2c68 <_tcc_set_compare_value+0xd0>)
    2bc6:	4798      	blx	r3
    2bc8:	1c03      	adds	r3, r0, #0
    2bca:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2bcc:	231b      	movs	r3, #27
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	781b      	ldrb	r3, [r3, #0]
    2bd2:	4a26      	ldr	r2, [pc, #152]	; (2c6c <_tcc_set_compare_value+0xd4>)
    2bd4:	5cd3      	ldrb	r3, [r2, r3]
    2bd6:	220b      	movs	r2, #11
    2bd8:	18ba      	adds	r2, r7, r2
    2bda:	7812      	ldrb	r2, [r2, #0]
    2bdc:	429a      	cmp	r2, r3
    2bde:	d301      	bcc.n	2be4 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    2be0:	2317      	movs	r3, #23
    2be2:	e03c      	b.n	2c5e <_tcc_set_compare_value+0xc6>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    2be4:	231b      	movs	r3, #27
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	781a      	ldrb	r2, [r3, #0]
    2bea:	4b21      	ldr	r3, [pc, #132]	; (2c70 <_tcc_set_compare_value+0xd8>)
    2bec:	0092      	lsls	r2, r2, #2
    2bee:	58d3      	ldr	r3, [r2, r3]
    2bf0:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    2bf2:	687a      	ldr	r2, [r7, #4]
    2bf4:	697b      	ldr	r3, [r7, #20]
    2bf6:	429a      	cmp	r2, r3
    2bf8:	d901      	bls.n	2bfe <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    2bfa:	2317      	movs	r3, #23
    2bfc:	e02f      	b.n	2c5e <_tcc_set_compare_value+0xc6>
	}

	if (double_buffering_enabled) {
    2bfe:	230a      	movs	r3, #10
    2c00:	18fb      	adds	r3, r7, r3
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d014      	beq.n	2c32 <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2c08:	46c0      	nop			; (mov r8, r8)
    2c0a:	69fb      	ldr	r3, [r7, #28]
    2c0c:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    2c0e:	220b      	movs	r2, #11
    2c10:	18ba      	adds	r2, r7, r2
    2c12:	7812      	ldrb	r2, [r2, #0]
    2c14:	2180      	movs	r1, #128	; 0x80
    2c16:	0309      	lsls	r1, r1, #12
    2c18:	4091      	lsls	r1, r2
    2c1a:	1c0a      	adds	r2, r1, #0

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2c1c:	4013      	ands	r3, r2
    2c1e:	d1f4      	bne.n	2c0a <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    2c20:	230b      	movs	r3, #11
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	781a      	ldrb	r2, [r3, #0]
    2c26:	69fb      	ldr	r3, [r7, #28]
    2c28:	321c      	adds	r2, #28
    2c2a:	0092      	lsls	r2, r2, #2
    2c2c:	6879      	ldr	r1, [r7, #4]
    2c2e:	50d1      	str	r1, [r2, r3]
    2c30:	e014      	b.n	2c5c <_tcc_set_compare_value+0xc4>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	69fb      	ldr	r3, [r7, #28]
    2c36:	689b      	ldr	r3, [r3, #8]
    2c38:	220b      	movs	r2, #11
    2c3a:	18ba      	adds	r2, r7, r2
    2c3c:	7812      	ldrb	r2, [r2, #0]
    2c3e:	2180      	movs	r1, #128	; 0x80
    2c40:	0049      	lsls	r1, r1, #1
    2c42:	4091      	lsls	r1, r2
    2c44:	1c0a      	adds	r2, r1, #0
    2c46:	4013      	ands	r3, r2
    2c48:	d1f4      	bne.n	2c34 <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    2c4a:	230b      	movs	r3, #11
    2c4c:	18fb      	adds	r3, r7, r3
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	69fa      	ldr	r2, [r7, #28]
    2c52:	3310      	adds	r3, #16
    2c54:	009b      	lsls	r3, r3, #2
    2c56:	18d3      	adds	r3, r2, r3
    2c58:	687a      	ldr	r2, [r7, #4]
    2c5a:	605a      	str	r2, [r3, #4]
	}
	return STATUS_OK;
    2c5c:	2300      	movs	r3, #0
}
    2c5e:	1c18      	adds	r0, r3, #0
    2c60:	46bd      	mov	sp, r7
    2c62:	b009      	add	sp, #36	; 0x24
    2c64:	bd90      	pop	{r4, r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	00002131 	.word	0x00002131
    2c6c:	00008ffc 	.word	0x00008ffc
    2c70:	00008ff0 	.word	0x00008ff0

00002c74 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    2c74:	b590      	push	{r4, r7, lr}
    2c76:	b085      	sub	sp, #20
    2c78:	af00      	add	r7, sp, #0
    2c7a:	60f8      	str	r0, [r7, #12]
    2c7c:	607a      	str	r2, [r7, #4]
    2c7e:	230b      	movs	r3, #11
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	1c0a      	adds	r2, r1, #0
    2c84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    2c86:	68fb      	ldr	r3, [r7, #12]
    2c88:	223c      	movs	r2, #60	; 0x3c
    2c8a:	5c9c      	ldrb	r4, [r3, r2]
    2c8c:	68f9      	ldr	r1, [r7, #12]
    2c8e:	230b      	movs	r3, #11
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	781a      	ldrb	r2, [r3, #0]
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	1c08      	adds	r0, r1, #0
    2c98:	1c11      	adds	r1, r2, #0
    2c9a:	1c1a      	adds	r2, r3, #0
    2c9c:	1c23      	adds	r3, r4, #0
    2c9e:	4c03      	ldr	r4, [pc, #12]	; (2cac <tcc_set_compare_value+0x38>)
    2ca0:	47a0      	blx	r4
    2ca2:	1c03      	adds	r3, r0, #0
			module_inst->double_buffering_enabled);
}
    2ca4:	1c18      	adds	r0, r3, #0
    2ca6:	46bd      	mov	sp, r7
    2ca8:	b005      	add	sp, #20
    2caa:	bd90      	pop	{r4, r7, pc}
    2cac:	00002b99 	.word	0x00002b99

00002cb0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2cb0:	b580      	push	{r7, lr}
    2cb2:	af00      	add	r7, sp, #0
    2cb4:	2000      	movs	r0, #0
    2cb6:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <TCC0_Handler+0x10>)
    2cb8:	4798      	blx	r3
    2cba:	46bd      	mov	sp, r7
    2cbc:	bd80      	pop	{r7, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	00002ced 	.word	0x00002ced

00002cc4 <TCC1_Handler>:
    2cc4:	b580      	push	{r7, lr}
    2cc6:	af00      	add	r7, sp, #0
    2cc8:	2001      	movs	r0, #1
    2cca:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <TCC1_Handler+0x10>)
    2ccc:	4798      	blx	r3
    2cce:	46bd      	mov	sp, r7
    2cd0:	bd80      	pop	{r7, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	00002ced 	.word	0x00002ced

00002cd8 <TCC2_Handler>:
    2cd8:	b580      	push	{r7, lr}
    2cda:	af00      	add	r7, sp, #0
    2cdc:	2002      	movs	r0, #2
    2cde:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <TCC2_Handler+0x10>)
    2ce0:	4798      	blx	r3
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	00002ced 	.word	0x00002ced

00002cec <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2cec:	b580      	push	{r7, lr}
    2cee:	b086      	sub	sp, #24
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	1c02      	adds	r2, r0, #0
    2cf4:	1dfb      	adds	r3, r7, #7
    2cf6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    2cf8:	1dfb      	adds	r3, r7, #7
    2cfa:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2cfc:	4b17      	ldr	r3, [pc, #92]	; (2d5c <_tcc_interrupt_handler+0x70>)
    2cfe:	0092      	lsls	r2, r2, #2
    2d00:	58d3      	ldr	r3, [r2, r3]
    2d02:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2d04:	693b      	ldr	r3, [r7, #16]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    2d0a:	693b      	ldr	r3, [r7, #16]
    2d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2d0e:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    2d10:	693b      	ldr	r3, [r7, #16]
    2d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2d14:	4013      	ands	r3, r2
    2d16:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2d18:	2300      	movs	r3, #0
    2d1a:	617b      	str	r3, [r7, #20]
    2d1c:	e018      	b.n	2d50 <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2d1e:	4b10      	ldr	r3, [pc, #64]	; (2d60 <_tcc_interrupt_handler+0x74>)
    2d20:	697a      	ldr	r2, [r7, #20]
    2d22:	0092      	lsls	r2, r2, #2
    2d24:	58d3      	ldr	r3, [r2, r3]
    2d26:	68fa      	ldr	r2, [r7, #12]
    2d28:	4013      	ands	r3, r2
    2d2a:	d00e      	beq.n	2d4a <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2d2c:	693a      	ldr	r2, [r7, #16]
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	009b      	lsls	r3, r3, #2
    2d32:	18d3      	adds	r3, r2, r3
    2d34:	685b      	ldr	r3, [r3, #4]
    2d36:	693a      	ldr	r2, [r7, #16]
    2d38:	1c10      	adds	r0, r2, #0
    2d3a:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2d3c:	693b      	ldr	r3, [r7, #16]
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	4a07      	ldr	r2, [pc, #28]	; (2d60 <_tcc_interrupt_handler+0x74>)
    2d42:	6979      	ldr	r1, [r7, #20]
    2d44:	0089      	lsls	r1, r1, #2
    2d46:	588a      	ldr	r2, [r1, r2]
    2d48:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2d4a:	697b      	ldr	r3, [r7, #20]
    2d4c:	3301      	adds	r3, #1
    2d4e:	617b      	str	r3, [r7, #20]
    2d50:	697b      	ldr	r3, [r7, #20]
    2d52:	2b0b      	cmp	r3, #11
    2d54:	dde3      	ble.n	2d1e <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    2d56:	46bd      	mov	sp, r7
    2d58:	b006      	add	sp, #24
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	200000e0 	.word	0x200000e0
    2d60:	00009004 	.word	0x00009004

00002d64 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2d64:	b580      	push	{r7, lr}
    2d66:	af00      	add	r7, sp, #0
    2d68:	2000      	movs	r0, #0
    2d6a:	4b02      	ldr	r3, [pc, #8]	; (2d74 <TC3_Handler+0x10>)
    2d6c:	4798      	blx	r3
    2d6e:	46bd      	mov	sp, r7
    2d70:	bd80      	pop	{r7, pc}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	00002da1 	.word	0x00002da1

00002d78 <TC4_Handler>:
    2d78:	b580      	push	{r7, lr}
    2d7a:	af00      	add	r7, sp, #0
    2d7c:	2001      	movs	r0, #1
    2d7e:	4b02      	ldr	r3, [pc, #8]	; (2d88 <TC4_Handler+0x10>)
    2d80:	4798      	blx	r3
    2d82:	46bd      	mov	sp, r7
    2d84:	bd80      	pop	{r7, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	00002da1 	.word	0x00002da1

00002d8c <TC5_Handler>:
    2d8c:	b580      	push	{r7, lr}
    2d8e:	af00      	add	r7, sp, #0
    2d90:	2002      	movs	r0, #2
    2d92:	4b02      	ldr	r3, [pc, #8]	; (2d9c <TC5_Handler+0x10>)
    2d94:	4798      	blx	r3
    2d96:	46bd      	mov	sp, r7
    2d98:	bd80      	pop	{r7, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	00002da1 	.word	0x00002da1

00002da0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	1c02      	adds	r2, r0, #0
    2da8:	1dfb      	adds	r3, r7, #7
    2daa:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    2dac:	1dfb      	adds	r3, r7, #7
    2dae:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2db0:	4b28      	ldr	r3, [pc, #160]	; (2e54 <_tc_interrupt_handler+0xb4>)
    2db2:	0092      	lsls	r2, r2, #2
    2db4:	58d3      	ldr	r3, [r2, r3]
    2db6:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2db8:	68fb      	ldr	r3, [r7, #12]
    2dba:	681b      	ldr	r3, [r3, #0]
    2dbc:	7b9b      	ldrb	r3, [r3, #14]
    2dbe:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    2dc0:	68fa      	ldr	r2, [r7, #12]
    2dc2:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2dc4:	4013      	ands	r3, r2
    2dc6:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    2dc8:	68fb      	ldr	r3, [r7, #12]
    2dca:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2dcc:	230b      	movs	r3, #11
    2dce:	18fb      	adds	r3, r7, r3
    2dd0:	400a      	ands	r2, r1
    2dd2:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2dd4:	230b      	movs	r3, #11
    2dd6:	18fb      	adds	r3, r7, r3
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	2201      	movs	r2, #1
    2ddc:	4013      	ands	r3, r2
    2dde:	d008      	beq.n	2df2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	689b      	ldr	r3, [r3, #8]
    2de4:	68fa      	ldr	r2, [r7, #12]
    2de6:	1c10      	adds	r0, r2, #0
    2de8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2dea:	68fb      	ldr	r3, [r7, #12]
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	2201      	movs	r2, #1
    2df0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2df2:	230b      	movs	r3, #11
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	2202      	movs	r2, #2
    2dfa:	4013      	ands	r3, r2
    2dfc:	d008      	beq.n	2e10 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	68db      	ldr	r3, [r3, #12]
    2e02:	68fa      	ldr	r2, [r7, #12]
    2e04:	1c10      	adds	r0, r2, #0
    2e06:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2e08:	68fb      	ldr	r3, [r7, #12]
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	2202      	movs	r2, #2
    2e0e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2e10:	230b      	movs	r3, #11
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	2210      	movs	r2, #16
    2e18:	4013      	ands	r3, r2
    2e1a:	d008      	beq.n	2e2e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2e1c:	68fb      	ldr	r3, [r7, #12]
    2e1e:	691b      	ldr	r3, [r3, #16]
    2e20:	68fa      	ldr	r2, [r7, #12]
    2e22:	1c10      	adds	r0, r2, #0
    2e24:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2e26:	68fb      	ldr	r3, [r7, #12]
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	2210      	movs	r2, #16
    2e2c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2e2e:	230b      	movs	r3, #11
    2e30:	18fb      	adds	r3, r7, r3
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	2220      	movs	r2, #32
    2e36:	4013      	ands	r3, r2
    2e38:	d008      	beq.n	2e4c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	695b      	ldr	r3, [r3, #20]
    2e3e:	68fa      	ldr	r2, [r7, #12]
    2e40:	1c10      	adds	r0, r2, #0
    2e42:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2e44:	68fb      	ldr	r3, [r7, #12]
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	2220      	movs	r2, #32
    2e4a:	739a      	strb	r2, [r3, #14]
	}
}
    2e4c:	46bd      	mov	sp, r7
    2e4e:	b004      	add	sp, #16
    2e50:	bd80      	pop	{r7, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	200000ec 	.word	0x200000ec

00002e58 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	b082      	sub	sp, #8
    2e5c:	af00      	add	r7, sp, #0
    2e5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	2280      	movs	r2, #128	; 0x80
    2e64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e66:	687b      	ldr	r3, [r7, #4]
    2e68:	2200      	movs	r2, #0
    2e6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	2201      	movs	r2, #1
    2e70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	2200      	movs	r2, #0
    2e76:	70da      	strb	r2, [r3, #3]
}
    2e78:	46bd      	mov	sp, r7
    2e7a:	b002      	add	sp, #8
    2e7c:	bd80      	pop	{r7, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)

00002e80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b084      	sub	sp, #16
    2e84:	af00      	add	r7, sp, #0
    2e86:	1c02      	adds	r2, r0, #0
    2e88:	1dfb      	adds	r3, r7, #7
    2e8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2e8c:	230f      	movs	r3, #15
    2e8e:	18fb      	adds	r3, r7, r3
    2e90:	1dfa      	adds	r2, r7, #7
    2e92:	7812      	ldrb	r2, [r2, #0]
    2e94:	09d2      	lsrs	r2, r2, #7
    2e96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2e98:	230e      	movs	r3, #14
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	1dfa      	adds	r2, r7, #7
    2e9e:	7812      	ldrb	r2, [r2, #0]
    2ea0:	0952      	lsrs	r2, r2, #5
    2ea2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2ea4:	4b0d      	ldr	r3, [pc, #52]	; (2edc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2ea6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2ea8:	230f      	movs	r3, #15
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	781b      	ldrb	r3, [r3, #0]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d10f      	bne.n	2ed2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2eb2:	230f      	movs	r3, #15
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	009b      	lsls	r3, r3, #2
    2eba:	2210      	movs	r2, #16
    2ebc:	4694      	mov	ip, r2
    2ebe:	44bc      	add	ip, r7
    2ec0:	4463      	add	r3, ip
    2ec2:	3b08      	subs	r3, #8
    2ec4:	681a      	ldr	r2, [r3, #0]
    2ec6:	230e      	movs	r3, #14
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	01db      	lsls	r3, r3, #7
    2ece:	18d3      	adds	r3, r2, r3
    2ed0:	e000      	b.n	2ed4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2ed2:	2300      	movs	r3, #0
	}
}
    2ed4:	1c18      	adds	r0, r3, #0
    2ed6:	46bd      	mov	sp, r7
    2ed8:	b004      	add	sp, #16
    2eda:	bd80      	pop	{r7, pc}
    2edc:	41004400 	.word	0x41004400

00002ee0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b082      	sub	sp, #8
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	1c02      	adds	r2, r0, #0
    2ee8:	1dfb      	adds	r3, r7, #7
    2eea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2eec:	1dfb      	adds	r3, r7, #7
    2eee:	781b      	ldrb	r3, [r3, #0]
    2ef0:	1c18      	adds	r0, r3, #0
    2ef2:	4b03      	ldr	r3, [pc, #12]	; (2f00 <port_get_group_from_gpio_pin+0x20>)
    2ef4:	4798      	blx	r3
    2ef6:	1c03      	adds	r3, r0, #0
}
    2ef8:	1c18      	adds	r0, r3, #0
    2efa:	46bd      	mov	sp, r7
    2efc:	b002      	add	sp, #8
    2efe:	bd80      	pop	{r7, pc}
    2f00:	00002e81 	.word	0x00002e81

00002f04 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2f04:	b580      	push	{r7, lr}
    2f06:	b084      	sub	sp, #16
    2f08:	af00      	add	r7, sp, #0
    2f0a:	1c02      	adds	r2, r0, #0
    2f0c:	1dfb      	adds	r3, r7, #7
    2f0e:	701a      	strb	r2, [r3, #0]
    2f10:	1dbb      	adds	r3, r7, #6
    2f12:	1c0a      	adds	r2, r1, #0
    2f14:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2f16:	1dfb      	adds	r3, r7, #7
    2f18:	781b      	ldrb	r3, [r3, #0]
    2f1a:	1c18      	adds	r0, r3, #0
    2f1c:	4b0c      	ldr	r3, [pc, #48]	; (2f50 <port_pin_set_output_level+0x4c>)
    2f1e:	4798      	blx	r3
    2f20:	1c03      	adds	r3, r0, #0
    2f22:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f24:	1dfb      	adds	r3, r7, #7
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	221f      	movs	r2, #31
    2f2a:	4013      	ands	r3, r2
    2f2c:	2201      	movs	r2, #1
    2f2e:	409a      	lsls	r2, r3
    2f30:	1c13      	adds	r3, r2, #0
    2f32:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2f34:	1dbb      	adds	r3, r7, #6
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d003      	beq.n	2f44 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2f3c:	68fb      	ldr	r3, [r7, #12]
    2f3e:	68ba      	ldr	r2, [r7, #8]
    2f40:	619a      	str	r2, [r3, #24]
    2f42:	e002      	b.n	2f4a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f44:	68fb      	ldr	r3, [r7, #12]
    2f46:	68ba      	ldr	r2, [r7, #8]
    2f48:	615a      	str	r2, [r3, #20]
	}
}
    2f4a:	46bd      	mov	sp, r7
    2f4c:	b004      	add	sp, #16
    2f4e:	bd80      	pop	{r7, pc}
    2f50:	00002ee1 	.word	0x00002ee1

00002f54 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	b082      	sub	sp, #8
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	2200      	movs	r2, #0
    2f60:	701a      	strb	r2, [r3, #0]
}
    2f62:	46bd      	mov	sp, r7
    2f64:	b002      	add	sp, #8
    2f66:	bd80      	pop	{r7, pc}

00002f68 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	1c02      	adds	r2, r0, #0
    2f70:	6039      	str	r1, [r7, #0]
    2f72:	1dfb      	adds	r3, r7, #7
    2f74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2f76:	1dfb      	adds	r3, r7, #7
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	2b01      	cmp	r3, #1
    2f7c:	d00a      	beq.n	2f94 <system_apb_clock_set_mask+0x2c>
    2f7e:	2b02      	cmp	r3, #2
    2f80:	d00f      	beq.n	2fa2 <system_apb_clock_set_mask+0x3a>
    2f82:	2b00      	cmp	r3, #0
    2f84:	d114      	bne.n	2fb0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2f86:	4b0e      	ldr	r3, [pc, #56]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2f88:	4a0d      	ldr	r2, [pc, #52]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2f8a:	6991      	ldr	r1, [r2, #24]
    2f8c:	683a      	ldr	r2, [r7, #0]
    2f8e:	430a      	orrs	r2, r1
    2f90:	619a      	str	r2, [r3, #24]
			break;
    2f92:	e00f      	b.n	2fb4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2f94:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2f96:	4a0a      	ldr	r2, [pc, #40]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2f98:	69d1      	ldr	r1, [r2, #28]
    2f9a:	683a      	ldr	r2, [r7, #0]
    2f9c:	430a      	orrs	r2, r1
    2f9e:	61da      	str	r2, [r3, #28]
			break;
    2fa0:	e008      	b.n	2fb4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2fa2:	4b07      	ldr	r3, [pc, #28]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2fa4:	4a06      	ldr	r2, [pc, #24]	; (2fc0 <system_apb_clock_set_mask+0x58>)
    2fa6:	6a11      	ldr	r1, [r2, #32]
    2fa8:	683a      	ldr	r2, [r7, #0]
    2faa:	430a      	orrs	r2, r1
    2fac:	621a      	str	r2, [r3, #32]
			break;
    2fae:	e001      	b.n	2fb4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2fb0:	2317      	movs	r3, #23
    2fb2:	e000      	b.n	2fb6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2fb4:	2300      	movs	r3, #0
}
    2fb6:	1c18      	adds	r0, r3, #0
    2fb8:	46bd      	mov	sp, r7
    2fba:	b002      	add	sp, #8
    2fbc:	bd80      	pop	{r7, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	40000400 	.word	0x40000400

00002fc4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <system_is_debugger_present+0x1c>)
    2fca:	789b      	ldrb	r3, [r3, #2]
    2fcc:	b2db      	uxtb	r3, r3
    2fce:	1c1a      	adds	r2, r3, #0
    2fd0:	2302      	movs	r3, #2
    2fd2:	4013      	ands	r3, r2
    2fd4:	1e5a      	subs	r2, r3, #1
    2fd6:	4193      	sbcs	r3, r2
    2fd8:	b2db      	uxtb	r3, r3
}
    2fda:	1c18      	adds	r0, r3, #0
    2fdc:	46bd      	mov	sp, r7
    2fde:	bd80      	pop	{r7, pc}
    2fe0:	41002000 	.word	0x41002000

00002fe4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b084      	sub	sp, #16
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	681b      	ldr	r3, [r3, #0]
    2ff0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2ff2:	68fb      	ldr	r3, [r7, #12]
    2ff4:	7e1b      	ldrb	r3, [r3, #24]
    2ff6:	b2db      	uxtb	r3, r3
    2ff8:	1c1a      	adds	r2, r3, #0
    2ffa:	2301      	movs	r3, #1
    2ffc:	4013      	ands	r3, r2
    2ffe:	1e5a      	subs	r2, r3, #1
    3000:	4193      	sbcs	r3, r2
    3002:	b2db      	uxtb	r3, r3
}
    3004:	1c18      	adds	r0, r3, #0
    3006:	46bd      	mov	sp, r7
    3008:	b004      	add	sp, #16
    300a:	bd80      	pop	{r7, pc}

0000300c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    300c:	b580      	push	{r7, lr}
    300e:	b084      	sub	sp, #16
    3010:	af00      	add	r7, sp, #0
    3012:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3014:	687b      	ldr	r3, [r7, #4]
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    301a:	68fb      	ldr	r3, [r7, #12]
    301c:	7e1b      	ldrb	r3, [r3, #24]
    301e:	b2db      	uxtb	r3, r3
    3020:	1c1a      	adds	r2, r3, #0
    3022:	2304      	movs	r3, #4
    3024:	4013      	ands	r3, r2
    3026:	1e5a      	subs	r2, r3, #1
    3028:	4193      	sbcs	r3, r2
    302a:	b2db      	uxtb	r3, r3
}
    302c:	1c18      	adds	r0, r3, #0
    302e:	46bd      	mov	sp, r7
    3030:	b004      	add	sp, #16
    3032:	bd80      	pop	{r7, pc}

00003034 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3034:	b580      	push	{r7, lr}
    3036:	b084      	sub	sp, #16
    3038:	af00      	add	r7, sp, #0
    303a:	6078      	str	r0, [r7, #4]
    303c:	1c0a      	adds	r2, r1, #0
    303e:	1cbb      	adds	r3, r7, #2
    3040:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3042:	687b      	ldr	r3, [r7, #4]
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	1c18      	adds	r0, r3, #0
    304c:	4b0a      	ldr	r3, [pc, #40]	; (3078 <spi_write+0x44>)
    304e:	4798      	blx	r3
    3050:	1c03      	adds	r3, r0, #0
    3052:	1c1a      	adds	r2, r3, #0
    3054:	2301      	movs	r3, #1
    3056:	4053      	eors	r3, r2
    3058:	b2db      	uxtb	r3, r3
    305a:	2b00      	cmp	r3, #0
    305c:	d001      	beq.n	3062 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    305e:	2305      	movs	r3, #5
    3060:	e006      	b.n	3070 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3062:	1cbb      	adds	r3, r7, #2
    3064:	881b      	ldrh	r3, [r3, #0]
    3066:	05db      	lsls	r3, r3, #23
    3068:	0dda      	lsrs	r2, r3, #23
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    306e:	2300      	movs	r3, #0
}
    3070:	1c18      	adds	r0, r3, #0
    3072:	46bd      	mov	sp, r7
    3074:	b004      	add	sp, #16
    3076:	bd80      	pop	{r7, pc}
    3078:	00002fe5 	.word	0x00002fe5

0000307c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
    3084:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	1c18      	adds	r0, r3, #0
    3090:	4b1b      	ldr	r3, [pc, #108]	; (3100 <spi_read+0x84>)
    3092:	4798      	blx	r3
    3094:	1c03      	adds	r3, r0, #0
    3096:	1c1a      	adds	r2, r3, #0
    3098:	2301      	movs	r3, #1
    309a:	4053      	eors	r3, r2
    309c:	b2db      	uxtb	r3, r3
    309e:	2b00      	cmp	r3, #0
    30a0:	d001      	beq.n	30a6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    30a2:	2310      	movs	r3, #16
    30a4:	e027      	b.n	30f6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    30a6:	230f      	movs	r3, #15
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	2200      	movs	r2, #0
    30ac:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30ae:	68bb      	ldr	r3, [r7, #8]
    30b0:	8b5b      	ldrh	r3, [r3, #26]
    30b2:	b29b      	uxth	r3, r3
    30b4:	1c1a      	adds	r2, r3, #0
    30b6:	2304      	movs	r3, #4
    30b8:	4013      	ands	r3, r2
    30ba:	d006      	beq.n	30ca <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    30bc:	230f      	movs	r3, #15
    30be:	18fb      	adds	r3, r7, r3
    30c0:	221e      	movs	r2, #30
    30c2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30c4:	68bb      	ldr	r3, [r7, #8]
    30c6:	2204      	movs	r2, #4
    30c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	799b      	ldrb	r3, [r3, #6]
    30ce:	2b01      	cmp	r3, #1
    30d0:	d108      	bne.n	30e4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30d2:	68bb      	ldr	r3, [r7, #8]
    30d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30d6:	b29b      	uxth	r3, r3
    30d8:	05db      	lsls	r3, r3, #23
    30da:	0ddb      	lsrs	r3, r3, #23
    30dc:	b29a      	uxth	r2, r3
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	801a      	strh	r2, [r3, #0]
    30e2:	e005      	b.n	30f0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30e4:	68bb      	ldr	r3, [r7, #8]
    30e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e8:	b2db      	uxtb	r3, r3
    30ea:	b29a      	uxth	r2, r3
    30ec:	683b      	ldr	r3, [r7, #0]
    30ee:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    30f0:	230f      	movs	r3, #15
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	781b      	ldrb	r3, [r3, #0]
}
    30f6:	1c18      	adds	r0, r3, #0
    30f8:	46bd      	mov	sp, r7
    30fa:	b004      	add	sp, #16
    30fc:	bd80      	pop	{r7, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	0000300d 	.word	0x0000300d

00003104 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    3104:	b590      	push	{r4, r7, lr}
    3106:	b093      	sub	sp, #76	; 0x4c
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	681b      	ldr	r3, [r3, #0]
    3112:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    311a:	231c      	movs	r3, #28
    311c:	18fb      	adds	r3, r7, r3
    311e:	1c18      	adds	r0, r3, #0
    3120:	4b86      	ldr	r3, [pc, #536]	; (333c <_spi_set_config+0x238>)
    3122:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3124:	231c      	movs	r3, #28
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    312c:	683b      	ldr	r3, [r7, #0]
    312e:	781b      	ldrb	r3, [r3, #0]
    3130:	2b00      	cmp	r3, #0
    3132:	d103      	bne.n	313c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3134:	231c      	movs	r3, #28
    3136:	18fb      	adds	r3, r7, r3
    3138:	2200      	movs	r2, #0
    313a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    313c:	683b      	ldr	r3, [r7, #0]
    313e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3140:	230c      	movs	r3, #12
    3142:	18fb      	adds	r3, r7, r3
    3144:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    314a:	230c      	movs	r3, #12
    314c:	18fb      	adds	r3, r7, r3
    314e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3150:	683b      	ldr	r3, [r7, #0]
    3152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3154:	230c      	movs	r3, #12
    3156:	18fb      	adds	r3, r7, r3
    3158:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    315a:	683b      	ldr	r3, [r7, #0]
    315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    315e:	230c      	movs	r3, #12
    3160:	18fb      	adds	r3, r7, r3
    3162:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3164:	2347      	movs	r3, #71	; 0x47
    3166:	18fb      	adds	r3, r7, r3
    3168:	2200      	movs	r2, #0
    316a:	701a      	strb	r2, [r3, #0]
    316c:	e02c      	b.n	31c8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    316e:	2347      	movs	r3, #71	; 0x47
    3170:	18fb      	adds	r3, r7, r3
    3172:	781a      	ldrb	r2, [r3, #0]
    3174:	230c      	movs	r3, #12
    3176:	18fb      	adds	r3, r7, r3
    3178:	0092      	lsls	r2, r2, #2
    317a:	58d3      	ldr	r3, [r2, r3]
    317c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3180:	2b00      	cmp	r3, #0
    3182:	d109      	bne.n	3198 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3186:	2347      	movs	r3, #71	; 0x47
    3188:	18fb      	adds	r3, r7, r3
    318a:	781b      	ldrb	r3, [r3, #0]
    318c:	1c10      	adds	r0, r2, #0
    318e:	1c19      	adds	r1, r3, #0
    3190:	4b6b      	ldr	r3, [pc, #428]	; (3340 <_spi_set_config+0x23c>)
    3192:	4798      	blx	r3
    3194:	1c03      	adds	r3, r0, #0
    3196:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    319a:	3301      	adds	r3, #1
    319c:	d00d      	beq.n	31ba <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    319e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    31a0:	b2da      	uxtb	r2, r3
    31a2:	231c      	movs	r3, #28
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    31a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    31aa:	0c1b      	lsrs	r3, r3, #16
    31ac:	b2da      	uxtb	r2, r3
    31ae:	231c      	movs	r3, #28
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	1c10      	adds	r0, r2, #0
    31b4:	1c19      	adds	r1, r3, #0
    31b6:	4b63      	ldr	r3, [pc, #396]	; (3344 <_spi_set_config+0x240>)
    31b8:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    31ba:	2347      	movs	r3, #71	; 0x47
    31bc:	18fb      	adds	r3, r7, r3
    31be:	781a      	ldrb	r2, [r3, #0]
    31c0:	2347      	movs	r3, #71	; 0x47
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	3201      	adds	r2, #1
    31c6:	701a      	strb	r2, [r3, #0]
    31c8:	2347      	movs	r3, #71	; 0x47
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	781b      	ldrb	r3, [r3, #0]
    31ce:	2b03      	cmp	r3, #3
    31d0:	d9cd      	bls.n	316e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    31d2:	683b      	ldr	r3, [r7, #0]
    31d4:	781a      	ldrb	r2, [r3, #0]
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    31da:	683b      	ldr	r3, [r7, #0]
    31dc:	7c1a      	ldrb	r2, [r3, #16]
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    31e2:	683b      	ldr	r3, [r7, #0]
    31e4:	7c9a      	ldrb	r2, [r3, #18]
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    31ea:	683b      	ldr	r3, [r7, #0]
    31ec:	7d1a      	ldrb	r2, [r3, #20]
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    31f2:	230a      	movs	r3, #10
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	2200      	movs	r2, #0
    31f8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    31fa:	2300      	movs	r3, #0
    31fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    31fe:	2300      	movs	r3, #0
    3200:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3202:	683b      	ldr	r3, [r7, #0]
    3204:	781b      	ldrb	r3, [r3, #0]
    3206:	2b01      	cmp	r3, #1
    3208:	d12b      	bne.n	3262 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	1c18      	adds	r0, r3, #0
    3210:	4b4d      	ldr	r3, [pc, #308]	; (3348 <_spi_set_config+0x244>)
    3212:	4798      	blx	r3
    3214:	1c03      	adds	r3, r0, #0
    3216:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    321a:	3314      	adds	r3, #20
    321c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3220:	b2db      	uxtb	r3, r3
    3222:	1c18      	adds	r0, r3, #0
    3224:	4b49      	ldr	r3, [pc, #292]	; (334c <_spi_set_config+0x248>)
    3226:	4798      	blx	r3
    3228:	1c03      	adds	r3, r0, #0
    322a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    322c:	683b      	ldr	r3, [r7, #0]
    322e:	6999      	ldr	r1, [r3, #24]
    3230:	2323      	movs	r3, #35	; 0x23
    3232:	18fc      	adds	r4, r7, r3
    3234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3236:	230a      	movs	r3, #10
    3238:	18fb      	adds	r3, r7, r3
    323a:	1c08      	adds	r0, r1, #0
    323c:	1c11      	adds	r1, r2, #0
    323e:	1c1a      	adds	r2, r3, #0
    3240:	4b43      	ldr	r3, [pc, #268]	; (3350 <_spi_set_config+0x24c>)
    3242:	4798      	blx	r3
    3244:	1c03      	adds	r3, r0, #0
    3246:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3248:	2323      	movs	r3, #35	; 0x23
    324a:	18fb      	adds	r3, r7, r3
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3252:	2317      	movs	r3, #23
    3254:	e06d      	b.n	3332 <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3256:	230a      	movs	r3, #10
    3258:	18fb      	adds	r3, r7, r3
    325a:	881b      	ldrh	r3, [r3, #0]
    325c:	b2da      	uxtb	r2, r3
    325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3260:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3262:	683b      	ldr	r3, [r7, #0]
    3264:	781b      	ldrb	r3, [r3, #0]
    3266:	2b00      	cmp	r3, #0
    3268:	d11a      	bne.n	32a0 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    326a:	683b      	ldr	r3, [r7, #0]
    326c:	699b      	ldr	r3, [r3, #24]
    326e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    3270:	683b      	ldr	r3, [r7, #0]
    3272:	8b9b      	ldrh	r3, [r3, #28]
    3274:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    3276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    327a:	683a      	ldr	r2, [r7, #0]
    327c:	7f92      	ldrb	r2, [r2, #30]
    327e:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3280:	683a      	ldr	r2, [r7, #0]
    3282:	7fd2      	ldrb	r2, [r2, #31]
    3284:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3286:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    3288:	431a      	orrs	r2, r3
    328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    328c:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    328e:	683b      	ldr	r3, [r7, #0]
    3290:	2220      	movs	r2, #32
    3292:	5c9b      	ldrb	r3, [r3, r2]
    3294:	2b00      	cmp	r3, #0
    3296:	d003      	beq.n	32a0 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    329a:	2240      	movs	r2, #64	; 0x40
    329c:	4313      	orrs	r3, r2
    329e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    32a0:	683b      	ldr	r3, [r7, #0]
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    32a6:	4313      	orrs	r3, r2
    32a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    32aa:	683b      	ldr	r3, [r7, #0]
    32ac:	689b      	ldr	r3, [r3, #8]
    32ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    32b0:	4313      	orrs	r3, r2
    32b2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    32b4:	683b      	ldr	r3, [r7, #0]
    32b6:	68db      	ldr	r3, [r3, #12]
    32b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    32ba:	4313      	orrs	r3, r2
    32bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    32be:	683b      	ldr	r3, [r7, #0]
    32c0:	7c1b      	ldrb	r3, [r3, #16]
    32c2:	1c1a      	adds	r2, r3, #0
    32c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32c6:	4313      	orrs	r3, r2
    32c8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    32ca:	683b      	ldr	r3, [r7, #0]
    32cc:	7c5b      	ldrb	r3, [r3, #17]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d103      	bne.n	32da <_spi_set_config+0x1d6>
    32d2:	4b20      	ldr	r3, [pc, #128]	; (3354 <_spi_set_config+0x250>)
    32d4:	4798      	blx	r3
    32d6:	1e03      	subs	r3, r0, #0
    32d8:	d003      	beq.n	32e2 <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    32da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    32dc:	2280      	movs	r2, #128	; 0x80
    32de:	4313      	orrs	r3, r2
    32e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    32e2:	683b      	ldr	r3, [r7, #0]
    32e4:	7c9b      	ldrb	r3, [r3, #18]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d004      	beq.n	32f4 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    32ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32ec:	2280      	movs	r2, #128	; 0x80
    32ee:	0292      	lsls	r2, r2, #10
    32f0:	4313      	orrs	r3, r2
    32f2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    32f4:	683b      	ldr	r3, [r7, #0]
    32f6:	7cdb      	ldrb	r3, [r3, #19]
    32f8:	2b00      	cmp	r3, #0
    32fa:	d004      	beq.n	3306 <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    32fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32fe:	2280      	movs	r2, #128	; 0x80
    3300:	0092      	lsls	r2, r2, #2
    3302:	4313      	orrs	r3, r2
    3304:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3306:	683b      	ldr	r3, [r7, #0]
    3308:	7d1b      	ldrb	r3, [r3, #20]
    330a:	2b00      	cmp	r3, #0
    330c:	d004      	beq.n	3318 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3310:	2280      	movs	r2, #128	; 0x80
    3312:	0192      	lsls	r2, r2, #6
    3314:	4313      	orrs	r3, r2
    3316:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    331a:	681a      	ldr	r2, [r3, #0]
    331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    331e:	431a      	orrs	r2, r3
    3320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3322:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3326:	685a      	ldr	r2, [r3, #4]
    3328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    332a:	431a      	orrs	r2, r3
    332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    332e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3330:	2300      	movs	r3, #0
}
    3332:	1c18      	adds	r0, r3, #0
    3334:	46bd      	mov	sp, r7
    3336:	b013      	add	sp, #76	; 0x4c
    3338:	bd90      	pop	{r4, r7, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	00002e59 	.word	0x00002e59
    3340:	00003ca5 	.word	0x00003ca5
    3344:	00004d1d 	.word	0x00004d1d
    3348:	00003e61 	.word	0x00003e61
    334c:	00004b55 	.word	0x00004b55
    3350:	00003b9d 	.word	0x00003b9d
    3354:	00002fc5 	.word	0x00002fc5

00003358 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3358:	b590      	push	{r4, r7, lr}
    335a:	b08b      	sub	sp, #44	; 0x2c
    335c:	af00      	add	r7, sp, #0
    335e:	60f8      	str	r0, [r7, #12]
    3360:	60b9      	str	r1, [r7, #8]
    3362:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3364:	68fb      	ldr	r3, [r7, #12]
    3366:	68ba      	ldr	r2, [r7, #8]
    3368:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    336a:	68fb      	ldr	r3, [r7, #12]
    336c:	681b      	ldr	r3, [r3, #0]
    336e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3370:	6a3b      	ldr	r3, [r7, #32]
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	2202      	movs	r2, #2
    3376:	4013      	ands	r3, r2
    3378:	d001      	beq.n	337e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    337a:	231c      	movs	r3, #28
    337c:	e0a5      	b.n	34ca <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    337e:	6a3b      	ldr	r3, [r7, #32]
    3380:	681b      	ldr	r3, [r3, #0]
    3382:	2201      	movs	r2, #1
    3384:	4013      	ands	r3, r2
    3386:	d001      	beq.n	338c <spi_init+0x34>
		return STATUS_BUSY;
    3388:	2305      	movs	r3, #5
    338a:	e09e      	b.n	34ca <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	681b      	ldr	r3, [r3, #0]
    3390:	1c18      	adds	r0, r3, #0
    3392:	4b50      	ldr	r3, [pc, #320]	; (34d4 <spi_init+0x17c>)
    3394:	4798      	blx	r3
    3396:	1c03      	adds	r3, r0, #0
    3398:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    339a:	69fb      	ldr	r3, [r7, #28]
    339c:	3302      	adds	r3, #2
    339e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    33a0:	69fb      	ldr	r3, [r7, #28]
    33a2:	3314      	adds	r3, #20
    33a4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    33a6:	69bb      	ldr	r3, [r7, #24]
    33a8:	2201      	movs	r2, #1
    33aa:	409a      	lsls	r2, r3
    33ac:	1c13      	adds	r3, r2, #0
    33ae:	2002      	movs	r0, #2
    33b0:	1c19      	adds	r1, r3, #0
    33b2:	4b49      	ldr	r3, [pc, #292]	; (34d8 <spi_init+0x180>)
    33b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    33b6:	2310      	movs	r3, #16
    33b8:	18fb      	adds	r3, r7, r3
    33ba:	1c18      	adds	r0, r3, #0
    33bc:	4b47      	ldr	r3, [pc, #284]	; (34dc <spi_init+0x184>)
    33be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	2224      	movs	r2, #36	; 0x24
    33c4:	5c9a      	ldrb	r2, [r3, r2]
    33c6:	2310      	movs	r3, #16
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    33cc:	697b      	ldr	r3, [r7, #20]
    33ce:	b2da      	uxtb	r2, r3
    33d0:	2310      	movs	r3, #16
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	1c10      	adds	r0, r2, #0
    33d6:	1c19      	adds	r1, r3, #0
    33d8:	4b41      	ldr	r3, [pc, #260]	; (34e0 <spi_init+0x188>)
    33da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    33dc:	697b      	ldr	r3, [r7, #20]
    33de:	b2db      	uxtb	r3, r3
    33e0:	1c18      	adds	r0, r3, #0
    33e2:	4b40      	ldr	r3, [pc, #256]	; (34e4 <spi_init+0x18c>)
    33e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	2224      	movs	r2, #36	; 0x24
    33ea:	5c9b      	ldrb	r3, [r3, r2]
    33ec:	1c18      	adds	r0, r3, #0
    33ee:	2100      	movs	r1, #0
    33f0:	4b3d      	ldr	r3, [pc, #244]	; (34e8 <spi_init+0x190>)
    33f2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	2b01      	cmp	r3, #1
    33fa:	d105      	bne.n	3408 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    33fc:	6a3b      	ldr	r3, [r7, #32]
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	220c      	movs	r2, #12
    3402:	431a      	orrs	r2, r3
    3404:	6a3b      	ldr	r3, [r7, #32]
    3406:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	2b00      	cmp	r3, #0
    340e:	d105      	bne.n	341c <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3410:	6a3b      	ldr	r3, [r7, #32]
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	2208      	movs	r2, #8
    3416:	431a      	orrs	r2, r3
    3418:	6a3b      	ldr	r3, [r7, #32]
    341a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    341c:	2327      	movs	r3, #39	; 0x27
    341e:	18fb      	adds	r3, r7, r3
    3420:	2200      	movs	r2, #0
    3422:	701a      	strb	r2, [r3, #0]
    3424:	e00f      	b.n	3446 <spi_init+0xee>
		module->callback[i]        = NULL;
    3426:	2327      	movs	r3, #39	; 0x27
    3428:	18fb      	adds	r3, r7, r3
    342a:	781b      	ldrb	r3, [r3, #0]
    342c:	68fa      	ldr	r2, [r7, #12]
    342e:	3302      	adds	r3, #2
    3430:	009b      	lsls	r3, r3, #2
    3432:	18d3      	adds	r3, r2, r3
    3434:	2200      	movs	r2, #0
    3436:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3438:	2327      	movs	r3, #39	; 0x27
    343a:	18fb      	adds	r3, r7, r3
    343c:	781a      	ldrb	r2, [r3, #0]
    343e:	2327      	movs	r3, #39	; 0x27
    3440:	18fb      	adds	r3, r7, r3
    3442:	3201      	adds	r2, #1
    3444:	701a      	strb	r2, [r3, #0]
    3446:	2327      	movs	r3, #39	; 0x27
    3448:	18fb      	adds	r3, r7, r3
    344a:	781b      	ldrb	r3, [r3, #0]
    344c:	2b06      	cmp	r3, #6
    344e:	d9ea      	bls.n	3426 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	2200      	movs	r2, #0
    3454:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	2200      	movs	r2, #0
    345a:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    345c:	68fb      	ldr	r3, [r7, #12]
    345e:	2200      	movs	r2, #0
    3460:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3462:	68fb      	ldr	r3, [r7, #12]
    3464:	2200      	movs	r2, #0
    3466:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    3468:	68fb      	ldr	r3, [r7, #12]
    346a:	2236      	movs	r2, #54	; 0x36
    346c:	2100      	movs	r1, #0
    346e:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    3470:	68fb      	ldr	r3, [r7, #12]
    3472:	2237      	movs	r2, #55	; 0x37
    3474:	2100      	movs	r1, #0
    3476:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    3478:	68fb      	ldr	r3, [r7, #12]
    347a:	2238      	movs	r2, #56	; 0x38
    347c:	2100      	movs	r1, #0
    347e:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    3480:	68fb      	ldr	r3, [r7, #12]
    3482:	2203      	movs	r2, #3
    3484:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    3486:	68fb      	ldr	r3, [r7, #12]
    3488:	2200      	movs	r2, #0
    348a:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    348c:	68fb      	ldr	r3, [r7, #12]
    348e:	681b      	ldr	r3, [r3, #0]
    3490:	2213      	movs	r2, #19
    3492:	18bc      	adds	r4, r7, r2
    3494:	1c18      	adds	r0, r3, #0
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <spi_init+0x17c>)
    3498:	4798      	blx	r3
    349a:	1c03      	adds	r3, r0, #0
    349c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    349e:	2313      	movs	r3, #19
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	781a      	ldrb	r2, [r3, #0]
    34a4:	4b11      	ldr	r3, [pc, #68]	; (34ec <spi_init+0x194>)
    34a6:	1c10      	adds	r0, r2, #0
    34a8:	1c19      	adds	r1, r3, #0
    34aa:	4b11      	ldr	r3, [pc, #68]	; (34f0 <spi_init+0x198>)
    34ac:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    34ae:	2313      	movs	r3, #19
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	781a      	ldrb	r2, [r3, #0]
    34b4:	4b0f      	ldr	r3, [pc, #60]	; (34f4 <spi_init+0x19c>)
    34b6:	0092      	lsls	r2, r2, #2
    34b8:	68f9      	ldr	r1, [r7, #12]
    34ba:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    34bc:	68fa      	ldr	r2, [r7, #12]
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	1c10      	adds	r0, r2, #0
    34c2:	1c19      	adds	r1, r3, #0
    34c4:	4b0c      	ldr	r3, [pc, #48]	; (34f8 <spi_init+0x1a0>)
    34c6:	4798      	blx	r3
    34c8:	1c03      	adds	r3, r0, #0
}
    34ca:	1c18      	adds	r0, r3, #0
    34cc:	46bd      	mov	sp, r7
    34ce:	b00b      	add	sp, #44	; 0x2c
    34d0:	bd90      	pop	{r4, r7, pc}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	00003e61 	.word	0x00003e61
    34d8:	00002f69 	.word	0x00002f69
    34dc:	00002f55 	.word	0x00002f55
    34e0:	00004a31 	.word	0x00004a31
    34e4:	00004a75 	.word	0x00004a75
    34e8:	00003c19 	.word	0x00003c19
    34ec:	00003881 	.word	0x00003881
    34f0:	00003ec1 	.word	0x00003ec1
    34f4:	200000fc 	.word	0x200000fc
    34f8:	00003105 	.word	0x00003105

000034fc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    34fc:	b590      	push	{r4, r7, lr}
    34fe:	b087      	sub	sp, #28
    3500:	af00      	add	r7, sp, #0
    3502:	60f8      	str	r0, [r7, #12]
    3504:	607a      	str	r2, [r7, #4]
    3506:	230a      	movs	r3, #10
    3508:	18fb      	adds	r3, r7, r3
    350a:	1c0a      	adds	r2, r1, #0
    350c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    350e:	68fb      	ldr	r3, [r7, #12]
    3510:	79db      	ldrb	r3, [r3, #7]
    3512:	2201      	movs	r2, #1
    3514:	4053      	eors	r3, r2
    3516:	b2db      	uxtb	r3, r3
    3518:	2b00      	cmp	r3, #0
    351a:	d001      	beq.n	3520 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    351c:	231c      	movs	r3, #28
    351e:	e082      	b.n	3626 <spi_transceive_wait+0x12a>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3520:	68fb      	ldr	r3, [r7, #12]
    3522:	2238      	movs	r2, #56	; 0x38
    3524:	5c9b      	ldrb	r3, [r3, r2]
    3526:	b2db      	uxtb	r3, r3
    3528:	2b05      	cmp	r3, #5
    352a:	d101      	bne.n	3530 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    352c:	2305      	movs	r3, #5
    352e:	e07a      	b.n	3626 <spi_transceive_wait+0x12a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    3530:	2315      	movs	r3, #21
    3532:	18fb      	adds	r3, r7, r3
    3534:	2200      	movs	r2, #0
    3536:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    3538:	68fb      	ldr	r3, [r7, #12]
    353a:	795b      	ldrb	r3, [r3, #5]
    353c:	2b00      	cmp	r3, #0
    353e:	d120      	bne.n	3582 <spi_transceive_wait+0x86>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3540:	2316      	movs	r3, #22
    3542:	18fb      	adds	r3, r7, r3
    3544:	2200      	movs	r2, #0
    3546:	801a      	strh	r2, [r3, #0]
    3548:	e015      	b.n	3576 <spi_transceive_wait+0x7a>
			if (spi_is_ready_to_write(module)) {
    354a:	68fb      	ldr	r3, [r7, #12]
    354c:	1c18      	adds	r0, r3, #0
    354e:	4b38      	ldr	r3, [pc, #224]	; (3630 <spi_transceive_wait+0x134>)
    3550:	4798      	blx	r3
    3552:	1e03      	subs	r3, r0, #0
    3554:	d000      	beq.n	3558 <spi_transceive_wait+0x5c>
				break;
    3556:	e014      	b.n	3582 <spi_transceive_wait+0x86>
			} else if (j == SPI_TIMEOUT) {
    3558:	2316      	movs	r3, #22
    355a:	18fb      	adds	r3, r7, r3
    355c:	881b      	ldrh	r3, [r3, #0]
    355e:	4a35      	ldr	r2, [pc, #212]	; (3634 <spi_transceive_wait+0x138>)
    3560:	4293      	cmp	r3, r2
    3562:	d101      	bne.n	3568 <spi_transceive_wait+0x6c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3564:	2312      	movs	r3, #18
    3566:	e05e      	b.n	3626 <spi_transceive_wait+0x12a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3568:	2316      	movs	r3, #22
    356a:	18fb      	adds	r3, r7, r3
    356c:	881a      	ldrh	r2, [r3, #0]
    356e:	2316      	movs	r3, #22
    3570:	18fb      	adds	r3, r7, r3
    3572:	3201      	adds	r2, #1
    3574:	801a      	strh	r2, [r3, #0]
    3576:	2316      	movs	r3, #22
    3578:	18fb      	adds	r3, r7, r3
    357a:	881b      	ldrh	r3, [r3, #0]
    357c:	4a2d      	ldr	r2, [pc, #180]	; (3634 <spi_transceive_wait+0x138>)
    357e:	4293      	cmp	r3, r2
    3580:	d9e3      	bls.n	354a <spi_transceive_wait+0x4e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	1c18      	adds	r0, r3, #0
    3588:	4b29      	ldr	r3, [pc, #164]	; (3630 <spi_transceive_wait+0x134>)
    358a:	4798      	blx	r3
    358c:	1c03      	adds	r3, r0, #0
    358e:	1c1a      	adds	r2, r3, #0
    3590:	2301      	movs	r3, #1
    3592:	4053      	eors	r3, r2
    3594:	b2db      	uxtb	r3, r3
    3596:	2b00      	cmp	r3, #0
    3598:	d1f4      	bne.n	3584 <spi_transceive_wait+0x88>
	}

	/* Write data */
	spi_write(module, tx_data);
    359a:	68fa      	ldr	r2, [r7, #12]
    359c:	230a      	movs	r3, #10
    359e:	18fb      	adds	r3, r7, r3
    35a0:	881b      	ldrh	r3, [r3, #0]
    35a2:	1c10      	adds	r0, r2, #0
    35a4:	1c19      	adds	r1, r3, #0
    35a6:	4b24      	ldr	r3, [pc, #144]	; (3638 <spi_transceive_wait+0x13c>)
    35a8:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    35aa:	68fb      	ldr	r3, [r7, #12]
    35ac:	795b      	ldrb	r3, [r3, #5]
    35ae:	2b00      	cmp	r3, #0
    35b0:	d120      	bne.n	35f4 <spi_transceive_wait+0xf8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    35b2:	2316      	movs	r3, #22
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	2200      	movs	r2, #0
    35b8:	801a      	strh	r2, [r3, #0]
    35ba:	e015      	b.n	35e8 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	1c18      	adds	r0, r3, #0
    35c0:	4b1e      	ldr	r3, [pc, #120]	; (363c <spi_transceive_wait+0x140>)
    35c2:	4798      	blx	r3
    35c4:	1e03      	subs	r3, r0, #0
    35c6:	d000      	beq.n	35ca <spi_transceive_wait+0xce>
				break;
    35c8:	e014      	b.n	35f4 <spi_transceive_wait+0xf8>
			} else if (j == SPI_TIMEOUT) {
    35ca:	2316      	movs	r3, #22
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	881b      	ldrh	r3, [r3, #0]
    35d0:	4a18      	ldr	r2, [pc, #96]	; (3634 <spi_transceive_wait+0x138>)
    35d2:	4293      	cmp	r3, r2
    35d4:	d101      	bne.n	35da <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    35d6:	2312      	movs	r3, #18
    35d8:	e025      	b.n	3626 <spi_transceive_wait+0x12a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    35da:	2316      	movs	r3, #22
    35dc:	18fb      	adds	r3, r7, r3
    35de:	881a      	ldrh	r2, [r3, #0]
    35e0:	2316      	movs	r3, #22
    35e2:	18fb      	adds	r3, r7, r3
    35e4:	3201      	adds	r2, #1
    35e6:	801a      	strh	r2, [r3, #0]
    35e8:	2316      	movs	r3, #22
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	881b      	ldrh	r3, [r3, #0]
    35ee:	4a11      	ldr	r2, [pc, #68]	; (3634 <spi_transceive_wait+0x138>)
    35f0:	4293      	cmp	r3, r2
    35f2:	d9e3      	bls.n	35bc <spi_transceive_wait+0xc0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    35f4:	46c0      	nop			; (mov r8, r8)
    35f6:	68fb      	ldr	r3, [r7, #12]
    35f8:	1c18      	adds	r0, r3, #0
    35fa:	4b10      	ldr	r3, [pc, #64]	; (363c <spi_transceive_wait+0x140>)
    35fc:	4798      	blx	r3
    35fe:	1c03      	adds	r3, r0, #0
    3600:	1c1a      	adds	r2, r3, #0
    3602:	2301      	movs	r3, #1
    3604:	4053      	eors	r3, r2
    3606:	b2db      	uxtb	r3, r3
    3608:	2b00      	cmp	r3, #0
    360a:	d1f4      	bne.n	35f6 <spi_transceive_wait+0xfa>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    360c:	2315      	movs	r3, #21
    360e:	18fc      	adds	r4, r7, r3
    3610:	68fa      	ldr	r2, [r7, #12]
    3612:	687b      	ldr	r3, [r7, #4]
    3614:	1c10      	adds	r0, r2, #0
    3616:	1c19      	adds	r1, r3, #0
    3618:	4b09      	ldr	r3, [pc, #36]	; (3640 <spi_transceive_wait+0x144>)
    361a:	4798      	blx	r3
    361c:	1c03      	adds	r3, r0, #0
    361e:	7023      	strb	r3, [r4, #0]

	return retval;
    3620:	2315      	movs	r3, #21
    3622:	18fb      	adds	r3, r7, r3
    3624:	781b      	ldrb	r3, [r3, #0]
}
    3626:	1c18      	adds	r0, r3, #0
    3628:	46bd      	mov	sp, r7
    362a:	b007      	add	sp, #28
    362c:	bd90      	pop	{r4, r7, pc}
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	00002fe5 	.word	0x00002fe5
    3634:	00002710 	.word	0x00002710
    3638:	00003035 	.word	0x00003035
    363c:	0000300d 	.word	0x0000300d
    3640:	0000307d 	.word	0x0000307d

00003644 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3644:	b580      	push	{r7, lr}
    3646:	b086      	sub	sp, #24
    3648:	af00      	add	r7, sp, #0
    364a:	60f8      	str	r0, [r7, #12]
    364c:	60b9      	str	r1, [r7, #8]
    364e:	1dfb      	adds	r3, r7, #7
    3650:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3652:	68fb      	ldr	r3, [r7, #12]
    3654:	795b      	ldrb	r3, [r3, #5]
    3656:	2b01      	cmp	r3, #1
    3658:	d001      	beq.n	365e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    365a:	2315      	movs	r3, #21
    365c:	e05c      	b.n	3718 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	7a1b      	ldrb	r3, [r3, #8]
    3662:	2201      	movs	r2, #1
    3664:	4053      	eors	r3, r2
    3666:	b2db      	uxtb	r3, r3
    3668:	2b00      	cmp	r3, #0
    366a:	d054      	beq.n	3716 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    366c:	1dfb      	adds	r3, r7, #7
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	2b00      	cmp	r3, #0
    3672:	d04a      	beq.n	370a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3674:	68bb      	ldr	r3, [r7, #8]
    3676:	785b      	ldrb	r3, [r3, #1]
    3678:	2b00      	cmp	r3, #0
    367a:	d03f      	beq.n	36fc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    367c:	68fb      	ldr	r3, [r7, #12]
    367e:	1c18      	adds	r0, r3, #0
    3680:	4b27      	ldr	r3, [pc, #156]	; (3720 <spi_select_slave+0xdc>)
    3682:	4798      	blx	r3
    3684:	1c03      	adds	r3, r0, #0
    3686:	1c1a      	adds	r2, r3, #0
    3688:	2301      	movs	r3, #1
    368a:	4053      	eors	r3, r2
    368c:	b2db      	uxtb	r3, r3
    368e:	2b00      	cmp	r3, #0
    3690:	d007      	beq.n	36a2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3692:	68bb      	ldr	r3, [r7, #8]
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	1c18      	adds	r0, r3, #0
    3698:	2101      	movs	r1, #1
    369a:	4b22      	ldr	r3, [pc, #136]	; (3724 <spi_select_slave+0xe0>)
    369c:	4798      	blx	r3
					return STATUS_BUSY;
    369e:	2305      	movs	r3, #5
    36a0:	e03a      	b.n	3718 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    36a2:	68bb      	ldr	r3, [r7, #8]
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	1c18      	adds	r0, r3, #0
    36a8:	2100      	movs	r1, #0
    36aa:	4b1e      	ldr	r3, [pc, #120]	; (3724 <spi_select_slave+0xe0>)
    36ac:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    36ae:	68bb      	ldr	r3, [r7, #8]
    36b0:	789b      	ldrb	r3, [r3, #2]
    36b2:	b29b      	uxth	r3, r3
    36b4:	68fa      	ldr	r2, [r7, #12]
    36b6:	1c10      	adds	r0, r2, #0
    36b8:	1c19      	adds	r1, r3, #0
    36ba:	4b1b      	ldr	r3, [pc, #108]	; (3728 <spi_select_slave+0xe4>)
    36bc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    36be:	68fb      	ldr	r3, [r7, #12]
    36c0:	79db      	ldrb	r3, [r3, #7]
    36c2:	2201      	movs	r2, #1
    36c4:	4053      	eors	r3, r2
    36c6:	b2db      	uxtb	r3, r3
    36c8:	2b00      	cmp	r3, #0
    36ca:	d024      	beq.n	3716 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    36cc:	46c0      	nop			; (mov r8, r8)
    36ce:	68fb      	ldr	r3, [r7, #12]
    36d0:	1c18      	adds	r0, r3, #0
    36d2:	4b16      	ldr	r3, [pc, #88]	; (372c <spi_select_slave+0xe8>)
    36d4:	4798      	blx	r3
    36d6:	1c03      	adds	r3, r0, #0
    36d8:	1c1a      	adds	r2, r3, #0
    36da:	2301      	movs	r3, #1
    36dc:	4053      	eors	r3, r2
    36de:	b2db      	uxtb	r3, r3
    36e0:	2b00      	cmp	r3, #0
    36e2:	d1f4      	bne.n	36ce <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    36e4:	2316      	movs	r3, #22
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	2200      	movs	r2, #0
    36ea:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    36ec:	68fa      	ldr	r2, [r7, #12]
    36ee:	2316      	movs	r3, #22
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	1c10      	adds	r0, r2, #0
    36f4:	1c19      	adds	r1, r3, #0
    36f6:	4b0e      	ldr	r3, [pc, #56]	; (3730 <spi_select_slave+0xec>)
    36f8:	4798      	blx	r3
    36fa:	e00c      	b.n	3716 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    36fc:	68bb      	ldr	r3, [r7, #8]
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	1c18      	adds	r0, r3, #0
    3702:	2100      	movs	r1, #0
    3704:	4b07      	ldr	r3, [pc, #28]	; (3724 <spi_select_slave+0xe0>)
    3706:	4798      	blx	r3
    3708:	e005      	b.n	3716 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    370a:	68bb      	ldr	r3, [r7, #8]
    370c:	781b      	ldrb	r3, [r3, #0]
    370e:	1c18      	adds	r0, r3, #0
    3710:	2101      	movs	r1, #1
    3712:	4b04      	ldr	r3, [pc, #16]	; (3724 <spi_select_slave+0xe0>)
    3714:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    3716:	2300      	movs	r3, #0
}
    3718:	1c18      	adds	r0, r3, #0
    371a:	46bd      	mov	sp, r7
    371c:	b006      	add	sp, #24
    371e:	bd80      	pop	{r7, pc}
    3720:	00002fe5 	.word	0x00002fe5
    3724:	00002f05 	.word	0x00002f05
    3728:	00003035 	.word	0x00003035
    372c:	0000300d 	.word	0x0000300d
    3730:	0000307d 	.word	0x0000307d

00003734 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	b2da      	uxtb	r2, r3
    374a:	230e      	movs	r3, #14
    374c:	18fb      	adds	r3, r7, r3
    374e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3754:	1c5a      	adds	r2, r3, #1
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	799b      	ldrb	r3, [r3, #6]
    375e:	2b01      	cmp	r3, #1
    3760:	d112      	bne.n	3788 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	b2db      	uxtb	r3, r3
    376a:	021b      	lsls	r3, r3, #8
    376c:	b29a      	uxth	r2, r3
    376e:	230e      	movs	r3, #14
    3770:	18fb      	adds	r3, r7, r3
    3772:	881b      	ldrh	r3, [r3, #0]
    3774:	4313      	orrs	r3, r2
    3776:	b29a      	uxth	r2, r3
    3778:	230e      	movs	r3, #14
    377a:	18fb      	adds	r3, r7, r3
    377c:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3782:	1c5a      	adds	r2, r3, #1
    3784:	687b      	ldr	r3, [r7, #4]
    3786:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3788:	230e      	movs	r3, #14
    378a:	18fb      	adds	r3, r7, r3
    378c:	881b      	ldrh	r3, [r3, #0]
    378e:	05db      	lsls	r3, r3, #23
    3790:	0dda      	lsrs	r2, r3, #23
    3792:	68bb      	ldr	r3, [r7, #8]
    3794:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    379a:	b29b      	uxth	r3, r3
    379c:	3b01      	subs	r3, #1
    379e:	b29a      	uxth	r2, r3
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	869a      	strh	r2, [r3, #52]	; 0x34
}
    37a4:	46bd      	mov	sp, r7
    37a6:	b004      	add	sp, #16
    37a8:	bd80      	pop	{r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)

000037ac <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b084      	sub	sp, #16
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    37ba:	4b07      	ldr	r3, [pc, #28]	; (37d8 <_spi_write_dummy+0x2c>)
    37bc:	881b      	ldrh	r3, [r3, #0]
    37be:	1c1a      	adds	r2, r3, #0
    37c0:	68fb      	ldr	r3, [r7, #12]
    37c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    37c4:	687b      	ldr	r3, [r7, #4]
    37c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    37c8:	b29b      	uxth	r3, r3
    37ca:	3b01      	subs	r3, #1
    37cc:	b29a      	uxth	r2, r3
    37ce:	687b      	ldr	r3, [r7, #4]
    37d0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    37d2:	46bd      	mov	sp, r7
    37d4:	b004      	add	sp, #16
    37d6:	bd80      	pop	{r7, pc}
    37d8:	200000f8 	.word	0x200000f8

000037dc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    37dc:	b580      	push	{r7, lr}
    37de:	b084      	sub	sp, #16
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	681b      	ldr	r3, [r3, #0]
    37e8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    37ea:	230a      	movs	r3, #10
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	2200      	movs	r2, #0
    37f0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    37f2:	68fb      	ldr	r3, [r7, #12]
    37f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37f6:	230a      	movs	r3, #10
    37f8:	18fb      	adds	r3, r7, r3
    37fa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3800:	b29b      	uxth	r3, r3
    3802:	3b01      	subs	r3, #1
    3804:	b29a      	uxth	r2, r3
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	865a      	strh	r2, [r3, #50]	; 0x32
}
    380a:	46bd      	mov	sp, r7
    380c:	b004      	add	sp, #16
    380e:	bd80      	pop	{r7, pc}

00003810 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    3810:	b580      	push	{r7, lr}
    3812:	b084      	sub	sp, #16
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    381e:	68fb      	ldr	r3, [r7, #12]
    3820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3822:	b29a      	uxth	r2, r3
    3824:	230a      	movs	r3, #10
    3826:	18fb      	adds	r3, r7, r3
    3828:	05d2      	lsls	r2, r2, #23
    382a:	0dd2      	lsrs	r2, r2, #23
    382c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3832:	220a      	movs	r2, #10
    3834:	18ba      	adds	r2, r7, r2
    3836:	8812      	ldrh	r2, [r2, #0]
    3838:	b2d2      	uxtb	r2, r2
    383a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3840:	1c5a      	adds	r2, r3, #1
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	799b      	ldrb	r3, [r3, #6]
    384a:	2b01      	cmp	r3, #1
    384c:	d10d      	bne.n	386a <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3852:	220a      	movs	r2, #10
    3854:	18ba      	adds	r2, r7, r2
    3856:	8812      	ldrh	r2, [r2, #0]
    3858:	0a12      	lsrs	r2, r2, #8
    385a:	b292      	uxth	r2, r2
    385c:	b2d2      	uxtb	r2, r2
    385e:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3864:	1c5a      	adds	r2, r3, #1
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    386e:	b29b      	uxth	r3, r3
    3870:	3b01      	subs	r3, #1
    3872:	b29a      	uxth	r2, r3
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3878:	46bd      	mov	sp, r7
    387a:	b004      	add	sp, #16
    387c:	bd80      	pop	{r7, pc}
    387e:	46c0      	nop			; (mov r8, r8)

00003880 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3880:	b580      	push	{r7, lr}
    3882:	b086      	sub	sp, #24
    3884:	af00      	add	r7, sp, #0
    3886:	1c02      	adds	r2, r0, #0
    3888:	1dfb      	adds	r3, r7, #7
    388a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    388c:	1dfb      	adds	r3, r7, #7
    388e:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    3890:	4bb8      	ldr	r3, [pc, #736]	; (3b74 <_spi_interrupt_handler+0x2f4>)
    3892:	0092      	lsls	r2, r2, #2
    3894:	58d3      	ldr	r3, [r2, r3]
    3896:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    389e:	697b      	ldr	r3, [r7, #20]
    38a0:	2237      	movs	r2, #55	; 0x37
    38a2:	5c9a      	ldrb	r2, [r3, r2]
    38a4:	697b      	ldr	r3, [r7, #20]
    38a6:	2136      	movs	r1, #54	; 0x36
    38a8:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    38aa:	230f      	movs	r3, #15
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	400a      	ands	r2, r1
    38b0:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    38b2:	693b      	ldr	r3, [r7, #16]
    38b4:	7e1b      	ldrb	r3, [r3, #24]
    38b6:	b2da      	uxtb	r2, r3
    38b8:	230c      	movs	r3, #12
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    38be:	693b      	ldr	r3, [r7, #16]
    38c0:	7d9b      	ldrb	r3, [r3, #22]
    38c2:	b2db      	uxtb	r3, r3
    38c4:	b29a      	uxth	r2, r3
    38c6:	230c      	movs	r3, #12
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	210c      	movs	r1, #12
    38cc:	1879      	adds	r1, r7, r1
    38ce:	8809      	ldrh	r1, [r1, #0]
    38d0:	400a      	ands	r2, r1
    38d2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    38d4:	230c      	movs	r3, #12
    38d6:	18fb      	adds	r3, r7, r3
    38d8:	881b      	ldrh	r3, [r3, #0]
    38da:	2201      	movs	r2, #1
    38dc:	4013      	ands	r3, r2
    38de:	d041      	beq.n	3964 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    38e0:	697b      	ldr	r3, [r7, #20]
    38e2:	795b      	ldrb	r3, [r3, #5]
    38e4:	2b01      	cmp	r3, #1
    38e6:	d110      	bne.n	390a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    38e8:	697b      	ldr	r3, [r7, #20]
    38ea:	7a5b      	ldrb	r3, [r3, #9]
    38ec:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    38ee:	2b00      	cmp	r3, #0
    38f0:	d10b      	bne.n	390a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    38f2:	697b      	ldr	r3, [r7, #20]
    38f4:	1c18      	adds	r0, r3, #0
    38f6:	4ba0      	ldr	r3, [pc, #640]	; (3b78 <_spi_interrupt_handler+0x2f8>)
    38f8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    38fa:	697b      	ldr	r3, [r7, #20]
    38fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    38fe:	b29b      	uxth	r3, r3
    3900:	2b00      	cmp	r3, #0
    3902:	d102      	bne.n	390a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3904:	693b      	ldr	r3, [r7, #16]
    3906:	2201      	movs	r2, #1
    3908:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    390a:	697b      	ldr	r3, [r7, #20]
    390c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    390e:	2b01      	cmp	r3, #1
    3910:	d104      	bne.n	391c <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3912:	697b      	ldr	r3, [r7, #20]
    3914:	7a5b      	ldrb	r3, [r3, #9]
    3916:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    3918:	2b00      	cmp	r3, #0
    391a:	d108      	bne.n	392e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    391c:	697b      	ldr	r3, [r7, #20]
    391e:	795b      	ldrb	r3, [r3, #5]
    3920:	2b00      	cmp	r3, #0
    3922:	d11f      	bne.n	3964 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    3924:	697b      	ldr	r3, [r7, #20]
    3926:	7a5b      	ldrb	r3, [r3, #9]
    3928:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    392a:	2b00      	cmp	r3, #0
    392c:	d01a      	beq.n	3964 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    392e:	697b      	ldr	r3, [r7, #20]
    3930:	1c18      	adds	r0, r3, #0
    3932:	4b92      	ldr	r3, [pc, #584]	; (3b7c <_spi_interrupt_handler+0x2fc>)
    3934:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    3936:	697b      	ldr	r3, [r7, #20]
    3938:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    393a:	b29b      	uxth	r3, r3
    393c:	2b00      	cmp	r3, #0
    393e:	d111      	bne.n	3964 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3940:	693b      	ldr	r3, [r7, #16]
    3942:	2201      	movs	r2, #1
    3944:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3946:	697b      	ldr	r3, [r7, #20]
    3948:	7a5b      	ldrb	r3, [r3, #9]
    394a:	b2db      	uxtb	r3, r3
    394c:	2b01      	cmp	r3, #1
    394e:	d109      	bne.n	3964 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    3950:	697b      	ldr	r3, [r7, #20]
    3952:	79db      	ldrb	r3, [r3, #7]
    3954:	2201      	movs	r2, #1
    3956:	4053      	eors	r3, r2
    3958:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    395a:	2b00      	cmp	r3, #0
    395c:	d002      	beq.n	3964 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    395e:	693b      	ldr	r3, [r7, #16]
    3960:	2202      	movs	r2, #2
    3962:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3964:	230c      	movs	r3, #12
    3966:	18fb      	adds	r3, r7, r3
    3968:	881b      	ldrh	r3, [r3, #0]
    396a:	2204      	movs	r2, #4
    396c:	4013      	ands	r3, r2
    396e:	d100      	bne.n	3972 <_spi_interrupt_handler+0xf2>
    3970:	e07e      	b.n	3a70 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3972:	693b      	ldr	r3, [r7, #16]
    3974:	8b5b      	ldrh	r3, [r3, #26]
    3976:	b29b      	uxth	r3, r3
    3978:	1c1a      	adds	r2, r3, #0
    397a:	2304      	movs	r3, #4
    397c:	4013      	ands	r3, r2
    397e:	d022      	beq.n	39c6 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3980:	697b      	ldr	r3, [r7, #20]
    3982:	7a5b      	ldrb	r3, [r3, #9]
    3984:	b2db      	uxtb	r3, r3
    3986:	2b01      	cmp	r3, #1
    3988:	d014      	beq.n	39b4 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    398a:	697b      	ldr	r3, [r7, #20]
    398c:	2238      	movs	r2, #56	; 0x38
    398e:	211e      	movs	r1, #30
    3990:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3992:	697b      	ldr	r3, [r7, #20]
    3994:	2203      	movs	r2, #3
    3996:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3998:	693b      	ldr	r3, [r7, #16]
    399a:	2205      	movs	r2, #5
    399c:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    399e:	230f      	movs	r3, #15
    39a0:	18fb      	adds	r3, r7, r3
    39a2:	781b      	ldrb	r3, [r3, #0]
    39a4:	2208      	movs	r2, #8
    39a6:	4013      	ands	r3, r2
    39a8:	d004      	beq.n	39b4 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    39aa:	697b      	ldr	r3, [r7, #20]
    39ac:	699b      	ldr	r3, [r3, #24]
    39ae:	697a      	ldr	r2, [r7, #20]
    39b0:	1c10      	adds	r0, r2, #0
    39b2:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    39b4:	693b      	ldr	r3, [r7, #16]
    39b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39b8:	230a      	movs	r3, #10
    39ba:	18fb      	adds	r3, r7, r3
    39bc:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    39be:	693b      	ldr	r3, [r7, #16]
    39c0:	2204      	movs	r2, #4
    39c2:	835a      	strh	r2, [r3, #26]
    39c4:	e054      	b.n	3a70 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    39c6:	697b      	ldr	r3, [r7, #20]
    39c8:	7a5b      	ldrb	r3, [r3, #9]
    39ca:	b2db      	uxtb	r3, r3
    39cc:	2b01      	cmp	r3, #1
    39ce:	d11e      	bne.n	3a0e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    39d0:	697b      	ldr	r3, [r7, #20]
    39d2:	1c18      	adds	r0, r3, #0
    39d4:	4b6a      	ldr	r3, [pc, #424]	; (3b80 <_spi_interrupt_handler+0x300>)
    39d6:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    39d8:	697b      	ldr	r3, [r7, #20]
    39da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    39dc:	b29b      	uxth	r3, r3
    39de:	2b00      	cmp	r3, #0
    39e0:	d146      	bne.n	3a70 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    39e2:	693b      	ldr	r3, [r7, #16]
    39e4:	2204      	movs	r2, #4
    39e6:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    39e8:	697b      	ldr	r3, [r7, #20]
    39ea:	2238      	movs	r2, #56	; 0x38
    39ec:	2100      	movs	r1, #0
    39ee:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    39f0:	697b      	ldr	r3, [r7, #20]
    39f2:	2203      	movs	r2, #3
    39f4:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    39f6:	230f      	movs	r3, #15
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2201      	movs	r2, #1
    39fe:	4013      	ands	r3, r2
    3a00:	d036      	beq.n	3a70 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3a02:	697b      	ldr	r3, [r7, #20]
    3a04:	68db      	ldr	r3, [r3, #12]
    3a06:	697a      	ldr	r2, [r7, #20]
    3a08:	1c10      	adds	r0, r2, #0
    3a0a:	4798      	blx	r3
    3a0c:	e030      	b.n	3a70 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    3a0e:	697b      	ldr	r3, [r7, #20]
    3a10:	1c18      	adds	r0, r3, #0
    3a12:	4b5c      	ldr	r3, [pc, #368]	; (3b84 <_spi_interrupt_handler+0x304>)
    3a14:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3a16:	697b      	ldr	r3, [r7, #20]
    3a18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3a1a:	b29b      	uxth	r3, r3
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	d127      	bne.n	3a70 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    3a20:	697b      	ldr	r3, [r7, #20]
    3a22:	2238      	movs	r2, #56	; 0x38
    3a24:	2100      	movs	r1, #0
    3a26:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3a28:	693b      	ldr	r3, [r7, #16]
    3a2a:	2204      	movs	r2, #4
    3a2c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3a2e:	697b      	ldr	r3, [r7, #20]
    3a30:	7a5b      	ldrb	r3, [r3, #9]
    3a32:	b2db      	uxtb	r3, r3
    3a34:	2b02      	cmp	r3, #2
    3a36:	d10b      	bne.n	3a50 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3a38:	230f      	movs	r3, #15
    3a3a:	18fb      	adds	r3, r7, r3
    3a3c:	781b      	ldrb	r3, [r3, #0]
    3a3e:	2204      	movs	r2, #4
    3a40:	4013      	ands	r3, r2
    3a42:	d015      	beq.n	3a70 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3a44:	697b      	ldr	r3, [r7, #20]
    3a46:	695b      	ldr	r3, [r3, #20]
    3a48:	697a      	ldr	r2, [r7, #20]
    3a4a:	1c10      	adds	r0, r2, #0
    3a4c:	4798      	blx	r3
    3a4e:	e00f      	b.n	3a70 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    3a50:	697b      	ldr	r3, [r7, #20]
    3a52:	7a5b      	ldrb	r3, [r3, #9]
    3a54:	b2db      	uxtb	r3, r3
    3a56:	2b00      	cmp	r3, #0
    3a58:	d10a      	bne.n	3a70 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3a5a:	230f      	movs	r3, #15
    3a5c:	18fb      	adds	r3, r7, r3
    3a5e:	781b      	ldrb	r3, [r3, #0]
    3a60:	2202      	movs	r2, #2
    3a62:	4013      	ands	r3, r2
    3a64:	d004      	beq.n	3a70 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3a66:	697b      	ldr	r3, [r7, #20]
    3a68:	691b      	ldr	r3, [r3, #16]
    3a6a:	697a      	ldr	r2, [r7, #20]
    3a6c:	1c10      	adds	r0, r2, #0
    3a6e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3a70:	230c      	movs	r3, #12
    3a72:	18fb      	adds	r3, r7, r3
    3a74:	881b      	ldrh	r3, [r3, #0]
    3a76:	2202      	movs	r2, #2
    3a78:	4013      	ands	r3, r2
    3a7a:	d046      	beq.n	3b0a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    3a7c:	697b      	ldr	r3, [r7, #20]
    3a7e:	795b      	ldrb	r3, [r3, #5]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d11d      	bne.n	3ac0 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    3a84:	693b      	ldr	r3, [r7, #16]
    3a86:	2207      	movs	r2, #7
    3a88:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3a8a:	693b      	ldr	r3, [r7, #16]
    3a8c:	2202      	movs	r2, #2
    3a8e:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    3a90:	697b      	ldr	r3, [r7, #20]
    3a92:	2203      	movs	r2, #3
    3a94:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    3a96:	697b      	ldr	r3, [r7, #20]
    3a98:	2200      	movs	r2, #0
    3a9a:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    3a9c:	697b      	ldr	r3, [r7, #20]
    3a9e:	2200      	movs	r2, #0
    3aa0:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    3aa2:	697b      	ldr	r3, [r7, #20]
    3aa4:	2238      	movs	r2, #56	; 0x38
    3aa6:	2100      	movs	r1, #0
    3aa8:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    3aaa:	230f      	movs	r3, #15
    3aac:	18fb      	adds	r3, r7, r3
    3aae:	781b      	ldrb	r3, [r3, #0]
    3ab0:	2210      	movs	r2, #16
    3ab2:	4013      	ands	r3, r2
    3ab4:	d004      	beq.n	3ac0 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    3ab6:	697b      	ldr	r3, [r7, #20]
    3ab8:	69db      	ldr	r3, [r3, #28]
    3aba:	697a      	ldr	r2, [r7, #20]
    3abc:	1c10      	adds	r0, r2, #0
    3abe:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3ac0:	697b      	ldr	r3, [r7, #20]
    3ac2:	795b      	ldrb	r3, [r3, #5]
    3ac4:	2b01      	cmp	r3, #1
    3ac6:	d120      	bne.n	3b0a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3ac8:	697b      	ldr	r3, [r7, #20]
    3aca:	7a5b      	ldrb	r3, [r3, #9]
    3acc:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3ace:	2b01      	cmp	r3, #1
    3ad0:	d11b      	bne.n	3b0a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3ad2:	697b      	ldr	r3, [r7, #20]
    3ad4:	79db      	ldrb	r3, [r3, #7]
    3ad6:	2201      	movs	r2, #1
    3ad8:	4053      	eors	r3, r2
    3ada:	b2db      	uxtb	r3, r3
    3adc:	2b00      	cmp	r3, #0
    3ade:	d014      	beq.n	3b0a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3ae0:	693b      	ldr	r3, [r7, #16]
    3ae2:	2202      	movs	r2, #2
    3ae4:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3ae6:	697b      	ldr	r3, [r7, #20]
    3ae8:	2203      	movs	r2, #3
    3aea:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    3aec:	697b      	ldr	r3, [r7, #20]
    3aee:	2238      	movs	r2, #56	; 0x38
    3af0:	2100      	movs	r1, #0
    3af2:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3af4:	230f      	movs	r3, #15
    3af6:	18fb      	adds	r3, r7, r3
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	2201      	movs	r2, #1
    3afc:	4013      	ands	r3, r2
    3afe:	d004      	beq.n	3b0a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3b00:	697b      	ldr	r3, [r7, #20]
    3b02:	68db      	ldr	r3, [r3, #12]
    3b04:	697a      	ldr	r2, [r7, #20]
    3b06:	1c10      	adds	r0, r2, #0
    3b08:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    3b0a:	230c      	movs	r3, #12
    3b0c:	18fb      	adds	r3, r7, r3
    3b0e:	881b      	ldrh	r3, [r3, #0]
    3b10:	2208      	movs	r2, #8
    3b12:	4013      	ands	r3, r2
    3b14:	d014      	beq.n	3b40 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    3b16:	697b      	ldr	r3, [r7, #20]
    3b18:	795b      	ldrb	r3, [r3, #5]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d110      	bne.n	3b40 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3b1e:	693b      	ldr	r3, [r7, #16]
    3b20:	2208      	movs	r2, #8
    3b22:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3b24:	693b      	ldr	r3, [r7, #16]
    3b26:	2208      	movs	r2, #8
    3b28:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    3b2a:	230f      	movs	r3, #15
    3b2c:	18fb      	adds	r3, r7, r3
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	2220      	movs	r2, #32
    3b32:	4013      	ands	r3, r2
    3b34:	d004      	beq.n	3b40 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    3b36:	697b      	ldr	r3, [r7, #20]
    3b38:	6a1b      	ldr	r3, [r3, #32]
    3b3a:	697a      	ldr	r2, [r7, #20]
    3b3c:	1c10      	adds	r0, r2, #0
    3b3e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3b40:	230c      	movs	r3, #12
    3b42:	18fb      	adds	r3, r7, r3
    3b44:	881b      	ldrh	r3, [r3, #0]
    3b46:	2280      	movs	r2, #128	; 0x80
    3b48:	4013      	ands	r3, r2
    3b4a:	d010      	beq.n	3b6e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3b4c:	693b      	ldr	r3, [r7, #16]
    3b4e:	2280      	movs	r2, #128	; 0x80
    3b50:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3b52:	693b      	ldr	r3, [r7, #16]
    3b54:	2280      	movs	r2, #128	; 0x80
    3b56:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3b58:	230f      	movs	r3, #15
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2240      	movs	r2, #64	; 0x40
    3b60:	4013      	ands	r3, r2
    3b62:	d004      	beq.n	3b6e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3b64:	697b      	ldr	r3, [r7, #20]
    3b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b68:	697a      	ldr	r2, [r7, #20]
    3b6a:	1c10      	adds	r0, r2, #0
    3b6c:	4798      	blx	r3
		}
	}
#  endif
}
    3b6e:	46bd      	mov	sp, r7
    3b70:	b006      	add	sp, #24
    3b72:	bd80      	pop	{r7, pc}
    3b74:	200000fc 	.word	0x200000fc
    3b78:	000037ad 	.word	0x000037ad
    3b7c:	00003735 	.word	0x00003735
    3b80:	000037dd 	.word	0x000037dd
    3b84:	00003811 	.word	0x00003811

00003b88 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b082      	sub	sp, #8
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3b90:	687b      	ldr	r3, [r7, #4]
    3b92:	2200      	movs	r2, #0
    3b94:	701a      	strb	r2, [r3, #0]
}
    3b96:	46bd      	mov	sp, r7
    3b98:	b002      	add	sp, #8
    3b9a:	bd80      	pop	{r7, pc}

00003b9c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b086      	sub	sp, #24
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	60f8      	str	r0, [r7, #12]
    3ba4:	60b9      	str	r1, [r7, #8]
    3ba6:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3ba8:	2316      	movs	r3, #22
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	2200      	movs	r2, #0
    3bae:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3bb0:	68bb      	ldr	r3, [r7, #8]
    3bb2:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3bb4:	68bb      	ldr	r3, [r7, #8]
    3bb6:	085a      	lsrs	r2, r3, #1
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	429a      	cmp	r2, r3
    3bbc:	d201      	bcs.n	3bc2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bbe:	2340      	movs	r3, #64	; 0x40
    3bc0:	e026      	b.n	3c10 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3bc2:	68bb      	ldr	r3, [r7, #8]
    3bc4:	085b      	lsrs	r3, r3, #1
    3bc6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3bc8:	e00a      	b.n	3be0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3bca:	693a      	ldr	r2, [r7, #16]
    3bcc:	68fb      	ldr	r3, [r7, #12]
    3bce:	1ad3      	subs	r3, r2, r3
    3bd0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3bd2:	2316      	movs	r3, #22
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	881a      	ldrh	r2, [r3, #0]
    3bd8:	2316      	movs	r3, #22
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	3201      	adds	r2, #1
    3bde:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3be0:	693a      	ldr	r2, [r7, #16]
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	429a      	cmp	r2, r3
    3be6:	d2f0      	bcs.n	3bca <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3be8:	2316      	movs	r3, #22
    3bea:	18fb      	adds	r3, r7, r3
    3bec:	2216      	movs	r2, #22
    3bee:	18ba      	adds	r2, r7, r2
    3bf0:	8812      	ldrh	r2, [r2, #0]
    3bf2:	3a01      	subs	r2, #1
    3bf4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3bf6:	2316      	movs	r3, #22
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	881b      	ldrh	r3, [r3, #0]
    3bfc:	2bff      	cmp	r3, #255	; 0xff
    3bfe:	d901      	bls.n	3c04 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c00:	2340      	movs	r3, #64	; 0x40
    3c02:	e005      	b.n	3c10 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	2216      	movs	r2, #22
    3c08:	18ba      	adds	r2, r7, r2
    3c0a:	8812      	ldrh	r2, [r2, #0]
    3c0c:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3c0e:	2300      	movs	r3, #0
	}
}
    3c10:	1c18      	adds	r0, r3, #0
    3c12:	46bd      	mov	sp, r7
    3c14:	b006      	add	sp, #24
    3c16:	bd80      	pop	{r7, pc}

00003c18 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b084      	sub	sp, #16
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	1c02      	adds	r2, r0, #0
    3c20:	1dfb      	adds	r3, r7, #7
    3c22:	701a      	strb	r2, [r3, #0]
    3c24:	1dbb      	adds	r3, r7, #6
    3c26:	1c0a      	adds	r2, r1, #0
    3c28:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3c2a:	4b1a      	ldr	r3, [pc, #104]	; (3c94 <sercom_set_gclk_generator+0x7c>)
    3c2c:	781b      	ldrb	r3, [r3, #0]
    3c2e:	2201      	movs	r2, #1
    3c30:	4053      	eors	r3, r2
    3c32:	b2db      	uxtb	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d103      	bne.n	3c40 <sercom_set_gclk_generator+0x28>
    3c38:	1dbb      	adds	r3, r7, #6
    3c3a:	781b      	ldrb	r3, [r3, #0]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d01b      	beq.n	3c78 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3c40:	230c      	movs	r3, #12
    3c42:	18fb      	adds	r3, r7, r3
    3c44:	1c18      	adds	r0, r3, #0
    3c46:	4b14      	ldr	r3, [pc, #80]	; (3c98 <sercom_set_gclk_generator+0x80>)
    3c48:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3c4a:	230c      	movs	r3, #12
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	1dfa      	adds	r2, r7, #7
    3c50:	7812      	ldrb	r2, [r2, #0]
    3c52:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3c54:	230c      	movs	r3, #12
    3c56:	18fb      	adds	r3, r7, r3
    3c58:	2013      	movs	r0, #19
    3c5a:	1c19      	adds	r1, r3, #0
    3c5c:	4b0f      	ldr	r3, [pc, #60]	; (3c9c <sercom_set_gclk_generator+0x84>)
    3c5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3c60:	2013      	movs	r0, #19
    3c62:	4b0f      	ldr	r3, [pc, #60]	; (3ca0 <sercom_set_gclk_generator+0x88>)
    3c64:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3c66:	4b0b      	ldr	r3, [pc, #44]	; (3c94 <sercom_set_gclk_generator+0x7c>)
    3c68:	1dfa      	adds	r2, r7, #7
    3c6a:	7812      	ldrb	r2, [r2, #0]
    3c6c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3c6e:	4b09      	ldr	r3, [pc, #36]	; (3c94 <sercom_set_gclk_generator+0x7c>)
    3c70:	2201      	movs	r2, #1
    3c72:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3c74:	2300      	movs	r3, #0
    3c76:	e008      	b.n	3c8a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3c78:	4b06      	ldr	r3, [pc, #24]	; (3c94 <sercom_set_gclk_generator+0x7c>)
    3c7a:	785b      	ldrb	r3, [r3, #1]
    3c7c:	1dfa      	adds	r2, r7, #7
    3c7e:	7812      	ldrb	r2, [r2, #0]
    3c80:	429a      	cmp	r2, r3
    3c82:	d101      	bne.n	3c88 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3c84:	2300      	movs	r3, #0
    3c86:	e000      	b.n	3c8a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3c88:	231d      	movs	r3, #29
}
    3c8a:	1c18      	adds	r0, r3, #0
    3c8c:	46bd      	mov	sp, r7
    3c8e:	b004      	add	sp, #16
    3c90:	bd80      	pop	{r7, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	2000002c 	.word	0x2000002c
    3c98:	00003b89 	.word	0x00003b89
    3c9c:	00004a31 	.word	0x00004a31
    3ca0:	00004a75 	.word	0x00004a75

00003ca4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b082      	sub	sp, #8
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
    3cac:	1c0a      	adds	r2, r1, #0
    3cae:	1cfb      	adds	r3, r7, #3
    3cb0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	4a4d      	ldr	r2, [pc, #308]	; (3dec <_sercom_get_default_pad+0x148>)
    3cb6:	4293      	cmp	r3, r2
    3cb8:	d03f      	beq.n	3d3a <_sercom_get_default_pad+0x96>
    3cba:	4a4c      	ldr	r2, [pc, #304]	; (3dec <_sercom_get_default_pad+0x148>)
    3cbc:	4293      	cmp	r3, r2
    3cbe:	d806      	bhi.n	3cce <_sercom_get_default_pad+0x2a>
    3cc0:	4a4b      	ldr	r2, [pc, #300]	; (3df0 <_sercom_get_default_pad+0x14c>)
    3cc2:	4293      	cmp	r3, r2
    3cc4:	d00f      	beq.n	3ce6 <_sercom_get_default_pad+0x42>
    3cc6:	4a4b      	ldr	r2, [pc, #300]	; (3df4 <_sercom_get_default_pad+0x150>)
    3cc8:	4293      	cmp	r3, r2
    3cca:	d021      	beq.n	3d10 <_sercom_get_default_pad+0x6c>
    3ccc:	e089      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3cce:	4a4a      	ldr	r2, [pc, #296]	; (3df8 <_sercom_get_default_pad+0x154>)
    3cd0:	4293      	cmp	r3, r2
    3cd2:	d100      	bne.n	3cd6 <_sercom_get_default_pad+0x32>
    3cd4:	e05b      	b.n	3d8e <_sercom_get_default_pad+0xea>
    3cd6:	4a49      	ldr	r2, [pc, #292]	; (3dfc <_sercom_get_default_pad+0x158>)
    3cd8:	4293      	cmp	r3, r2
    3cda:	d100      	bne.n	3cde <_sercom_get_default_pad+0x3a>
    3cdc:	e06c      	b.n	3db8 <_sercom_get_default_pad+0x114>
    3cde:	4a48      	ldr	r2, [pc, #288]	; (3e00 <_sercom_get_default_pad+0x15c>)
    3ce0:	4293      	cmp	r3, r2
    3ce2:	d03f      	beq.n	3d64 <_sercom_get_default_pad+0xc0>
    3ce4:	e07d      	b.n	3de2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3ce6:	1cfb      	adds	r3, r7, #3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b01      	cmp	r3, #1
    3cec:	d00a      	beq.n	3d04 <_sercom_get_default_pad+0x60>
    3cee:	dc02      	bgt.n	3cf6 <_sercom_get_default_pad+0x52>
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d005      	beq.n	3d00 <_sercom_get_default_pad+0x5c>
    3cf4:	e075      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3cf6:	2b02      	cmp	r3, #2
    3cf8:	d006      	beq.n	3d08 <_sercom_get_default_pad+0x64>
    3cfa:	2b03      	cmp	r3, #3
    3cfc:	d006      	beq.n	3d0c <_sercom_get_default_pad+0x68>
    3cfe:	e070      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d00:	4b40      	ldr	r3, [pc, #256]	; (3e04 <_sercom_get_default_pad+0x160>)
    3d02:	e06f      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d04:	4b40      	ldr	r3, [pc, #256]	; (3e08 <_sercom_get_default_pad+0x164>)
    3d06:	e06d      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d08:	4b40      	ldr	r3, [pc, #256]	; (3e0c <_sercom_get_default_pad+0x168>)
    3d0a:	e06b      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d0c:	4b40      	ldr	r3, [pc, #256]	; (3e10 <_sercom_get_default_pad+0x16c>)
    3d0e:	e069      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d10:	1cfb      	adds	r3, r7, #3
    3d12:	781b      	ldrb	r3, [r3, #0]
    3d14:	2b01      	cmp	r3, #1
    3d16:	d00a      	beq.n	3d2e <_sercom_get_default_pad+0x8a>
    3d18:	dc02      	bgt.n	3d20 <_sercom_get_default_pad+0x7c>
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d005      	beq.n	3d2a <_sercom_get_default_pad+0x86>
    3d1e:	e060      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d20:	2b02      	cmp	r3, #2
    3d22:	d006      	beq.n	3d32 <_sercom_get_default_pad+0x8e>
    3d24:	2b03      	cmp	r3, #3
    3d26:	d006      	beq.n	3d36 <_sercom_get_default_pad+0x92>
    3d28:	e05b      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d2a:	2303      	movs	r3, #3
    3d2c:	e05a      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d2e:	4b39      	ldr	r3, [pc, #228]	; (3e14 <_sercom_get_default_pad+0x170>)
    3d30:	e058      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d32:	4b39      	ldr	r3, [pc, #228]	; (3e18 <_sercom_get_default_pad+0x174>)
    3d34:	e056      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d36:	4b39      	ldr	r3, [pc, #228]	; (3e1c <_sercom_get_default_pad+0x178>)
    3d38:	e054      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d3a:	1cfb      	adds	r3, r7, #3
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	2b01      	cmp	r3, #1
    3d40:	d00a      	beq.n	3d58 <_sercom_get_default_pad+0xb4>
    3d42:	dc02      	bgt.n	3d4a <_sercom_get_default_pad+0xa6>
    3d44:	2b00      	cmp	r3, #0
    3d46:	d005      	beq.n	3d54 <_sercom_get_default_pad+0xb0>
    3d48:	e04b      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d4a:	2b02      	cmp	r3, #2
    3d4c:	d006      	beq.n	3d5c <_sercom_get_default_pad+0xb8>
    3d4e:	2b03      	cmp	r3, #3
    3d50:	d006      	beq.n	3d60 <_sercom_get_default_pad+0xbc>
    3d52:	e046      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d54:	4b32      	ldr	r3, [pc, #200]	; (3e20 <_sercom_get_default_pad+0x17c>)
    3d56:	e045      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d58:	4b32      	ldr	r3, [pc, #200]	; (3e24 <_sercom_get_default_pad+0x180>)
    3d5a:	e043      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d5c:	4b32      	ldr	r3, [pc, #200]	; (3e28 <_sercom_get_default_pad+0x184>)
    3d5e:	e041      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d60:	4b32      	ldr	r3, [pc, #200]	; (3e2c <_sercom_get_default_pad+0x188>)
    3d62:	e03f      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d64:	1cfb      	adds	r3, r7, #3
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	2b01      	cmp	r3, #1
    3d6a:	d00a      	beq.n	3d82 <_sercom_get_default_pad+0xde>
    3d6c:	dc02      	bgt.n	3d74 <_sercom_get_default_pad+0xd0>
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d005      	beq.n	3d7e <_sercom_get_default_pad+0xda>
    3d72:	e036      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d74:	2b02      	cmp	r3, #2
    3d76:	d006      	beq.n	3d86 <_sercom_get_default_pad+0xe2>
    3d78:	2b03      	cmp	r3, #3
    3d7a:	d006      	beq.n	3d8a <_sercom_get_default_pad+0xe6>
    3d7c:	e031      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d7e:	4b2c      	ldr	r3, [pc, #176]	; (3e30 <_sercom_get_default_pad+0x18c>)
    3d80:	e030      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d82:	4b2c      	ldr	r3, [pc, #176]	; (3e34 <_sercom_get_default_pad+0x190>)
    3d84:	e02e      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d86:	4b2c      	ldr	r3, [pc, #176]	; (3e38 <_sercom_get_default_pad+0x194>)
    3d88:	e02c      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d8a:	4b2c      	ldr	r3, [pc, #176]	; (3e3c <_sercom_get_default_pad+0x198>)
    3d8c:	e02a      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3d8e:	1cfb      	adds	r3, r7, #3
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	2b01      	cmp	r3, #1
    3d94:	d00a      	beq.n	3dac <_sercom_get_default_pad+0x108>
    3d96:	dc02      	bgt.n	3d9e <_sercom_get_default_pad+0xfa>
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d005      	beq.n	3da8 <_sercom_get_default_pad+0x104>
    3d9c:	e021      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3d9e:	2b02      	cmp	r3, #2
    3da0:	d006      	beq.n	3db0 <_sercom_get_default_pad+0x10c>
    3da2:	2b03      	cmp	r3, #3
    3da4:	d006      	beq.n	3db4 <_sercom_get_default_pad+0x110>
    3da6:	e01c      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3da8:	4b25      	ldr	r3, [pc, #148]	; (3e40 <_sercom_get_default_pad+0x19c>)
    3daa:	e01b      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3dac:	4b25      	ldr	r3, [pc, #148]	; (3e44 <_sercom_get_default_pad+0x1a0>)
    3dae:	e019      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3db0:	4b25      	ldr	r3, [pc, #148]	; (3e48 <_sercom_get_default_pad+0x1a4>)
    3db2:	e017      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3db4:	4b25      	ldr	r3, [pc, #148]	; (3e4c <_sercom_get_default_pad+0x1a8>)
    3db6:	e015      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3db8:	1cfb      	adds	r3, r7, #3
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d00a      	beq.n	3dd6 <_sercom_get_default_pad+0x132>
    3dc0:	dc02      	bgt.n	3dc8 <_sercom_get_default_pad+0x124>
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d005      	beq.n	3dd2 <_sercom_get_default_pad+0x12e>
    3dc6:	e00c      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3dc8:	2b02      	cmp	r3, #2
    3dca:	d006      	beq.n	3dda <_sercom_get_default_pad+0x136>
    3dcc:	2b03      	cmp	r3, #3
    3dce:	d006      	beq.n	3dde <_sercom_get_default_pad+0x13a>
    3dd0:	e007      	b.n	3de2 <_sercom_get_default_pad+0x13e>
    3dd2:	4b1f      	ldr	r3, [pc, #124]	; (3e50 <_sercom_get_default_pad+0x1ac>)
    3dd4:	e006      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3dd6:	4b1f      	ldr	r3, [pc, #124]	; (3e54 <_sercom_get_default_pad+0x1b0>)
    3dd8:	e004      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3dda:	4b1f      	ldr	r3, [pc, #124]	; (3e58 <_sercom_get_default_pad+0x1b4>)
    3ddc:	e002      	b.n	3de4 <_sercom_get_default_pad+0x140>
    3dde:	4b1f      	ldr	r3, [pc, #124]	; (3e5c <_sercom_get_default_pad+0x1b8>)
    3de0:	e000      	b.n	3de4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3de2:	2300      	movs	r3, #0
}
    3de4:	1c18      	adds	r0, r3, #0
    3de6:	46bd      	mov	sp, r7
    3de8:	b002      	add	sp, #8
    3dea:	bd80      	pop	{r7, pc}
    3dec:	42001000 	.word	0x42001000
    3df0:	42000800 	.word	0x42000800
    3df4:	42000c00 	.word	0x42000c00
    3df8:	42001800 	.word	0x42001800
    3dfc:	42001c00 	.word	0x42001c00
    3e00:	42001400 	.word	0x42001400
    3e04:	00040003 	.word	0x00040003
    3e08:	00050003 	.word	0x00050003
    3e0c:	00060003 	.word	0x00060003
    3e10:	00070003 	.word	0x00070003
    3e14:	00010003 	.word	0x00010003
    3e18:	001e0003 	.word	0x001e0003
    3e1c:	001f0003 	.word	0x001f0003
    3e20:	00080003 	.word	0x00080003
    3e24:	00090003 	.word	0x00090003
    3e28:	000a0003 	.word	0x000a0003
    3e2c:	000b0003 	.word	0x000b0003
    3e30:	00100003 	.word	0x00100003
    3e34:	00110003 	.word	0x00110003
    3e38:	00120003 	.word	0x00120003
    3e3c:	00130003 	.word	0x00130003
    3e40:	000c0003 	.word	0x000c0003
    3e44:	000d0003 	.word	0x000d0003
    3e48:	000e0003 	.word	0x000e0003
    3e4c:	000f0003 	.word	0x000f0003
    3e50:	00160003 	.word	0x00160003
    3e54:	00170003 	.word	0x00170003
    3e58:	00180003 	.word	0x00180003
    3e5c:	00190003 	.word	0x00190003

00003e60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3e60:	b590      	push	{r4, r7, lr}
    3e62:	b08b      	sub	sp, #44	; 0x2c
    3e64:	af00      	add	r7, sp, #0
    3e66:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3e68:	230c      	movs	r3, #12
    3e6a:	18fb      	adds	r3, r7, r3
    3e6c:	4a0e      	ldr	r2, [pc, #56]	; (3ea8 <_sercom_get_sercom_inst_index+0x48>)
    3e6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e70:	c313      	stmia	r3!, {r0, r1, r4}
    3e72:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e74:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e76:	2300      	movs	r3, #0
    3e78:	627b      	str	r3, [r7, #36]	; 0x24
    3e7a:	e00d      	b.n	3e98 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	220c      	movs	r2, #12
    3e80:	18ba      	adds	r2, r7, r2
    3e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3e84:	0089      	lsls	r1, r1, #2
    3e86:	588a      	ldr	r2, [r1, r2]
    3e88:	4293      	cmp	r3, r2
    3e8a:	d102      	bne.n	3e92 <_sercom_get_sercom_inst_index+0x32>
			return i;
    3e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e8e:	b2db      	uxtb	r3, r3
    3e90:	e006      	b.n	3ea0 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e94:	3301      	adds	r3, #1
    3e96:	627b      	str	r3, [r7, #36]	; 0x24
    3e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e9a:	2b05      	cmp	r3, #5
    3e9c:	d9ee      	bls.n	3e7c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e9e:	2300      	movs	r3, #0
}
    3ea0:	1c18      	adds	r0, r3, #0
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b00b      	add	sp, #44	; 0x2c
    3ea6:	bd90      	pop	{r4, r7, pc}
    3ea8:	00009034 	.word	0x00009034

00003eac <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b082      	sub	sp, #8
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	1c02      	adds	r2, r0, #0
    3eb4:	1dfb      	adds	r3, r7, #7
    3eb6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3eb8:	46bd      	mov	sp, r7
    3eba:	b002      	add	sp, #8
    3ebc:	bd80      	pop	{r7, pc}
    3ebe:	46c0      	nop			; (mov r8, r8)

00003ec0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	1c02      	adds	r2, r0, #0
    3ec8:	6039      	str	r1, [r7, #0]
    3eca:	1dfb      	adds	r3, r7, #7
    3ecc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3ece:	4b13      	ldr	r3, [pc, #76]	; (3f1c <_sercom_set_handler+0x5c>)
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	2201      	movs	r2, #1
    3ed4:	4053      	eors	r3, r2
    3ed6:	b2db      	uxtb	r3, r3
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d015      	beq.n	3f08 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3edc:	2300      	movs	r3, #0
    3ede:	60fb      	str	r3, [r7, #12]
    3ee0:	e00c      	b.n	3efc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3ee2:	4b0f      	ldr	r3, [pc, #60]	; (3f20 <_sercom_set_handler+0x60>)
    3ee4:	68fa      	ldr	r2, [r7, #12]
    3ee6:	0092      	lsls	r2, r2, #2
    3ee8:	490e      	ldr	r1, [pc, #56]	; (3f24 <_sercom_set_handler+0x64>)
    3eea:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3eec:	4b0e      	ldr	r3, [pc, #56]	; (3f28 <_sercom_set_handler+0x68>)
    3eee:	68fa      	ldr	r2, [r7, #12]
    3ef0:	0092      	lsls	r2, r2, #2
    3ef2:	2100      	movs	r1, #0
    3ef4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	3301      	adds	r3, #1
    3efa:	60fb      	str	r3, [r7, #12]
    3efc:	68fb      	ldr	r3, [r7, #12]
    3efe:	2b05      	cmp	r3, #5
    3f00:	d9ef      	bls.n	3ee2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3f02:	4b06      	ldr	r3, [pc, #24]	; (3f1c <_sercom_set_handler+0x5c>)
    3f04:	2201      	movs	r2, #1
    3f06:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	781a      	ldrb	r2, [r3, #0]
    3f0c:	4b04      	ldr	r3, [pc, #16]	; (3f20 <_sercom_set_handler+0x60>)
    3f0e:	0092      	lsls	r2, r2, #2
    3f10:	6839      	ldr	r1, [r7, #0]
    3f12:	50d1      	str	r1, [r2, r3]
}
    3f14:	46bd      	mov	sp, r7
    3f16:	b004      	add	sp, #16
    3f18:	bd80      	pop	{r7, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	2000002e 	.word	0x2000002e
    3f20:	20000030 	.word	0x20000030
    3f24:	00003ead 	.word	0x00003ead
    3f28:	200000fc 	.word	0x200000fc

00003f2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3f2c:	b590      	push	{r4, r7, lr}
    3f2e:	b085      	sub	sp, #20
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3f34:	2308      	movs	r3, #8
    3f36:	18fa      	adds	r2, r7, r3
    3f38:	4b0e      	ldr	r3, [pc, #56]	; (3f74 <_sercom_get_interrupt_vector+0x48>)
    3f3a:	1c11      	adds	r1, r2, #0
    3f3c:	1c1a      	adds	r2, r3, #0
    3f3e:	2306      	movs	r3, #6
    3f40:	1c08      	adds	r0, r1, #0
    3f42:	1c11      	adds	r1, r2, #0
    3f44:	1c1a      	adds	r2, r3, #0
    3f46:	4b0c      	ldr	r3, [pc, #48]	; (3f78 <_sercom_get_interrupt_vector+0x4c>)
    3f48:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3f4a:	230f      	movs	r3, #15
    3f4c:	18fc      	adds	r4, r7, r3
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	1c18      	adds	r0, r3, #0
    3f52:	4b0a      	ldr	r3, [pc, #40]	; (3f7c <_sercom_get_interrupt_vector+0x50>)
    3f54:	4798      	blx	r3
    3f56:	1c03      	adds	r3, r0, #0
    3f58:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3f5a:	230f      	movs	r3, #15
    3f5c:	18fb      	adds	r3, r7, r3
    3f5e:	781b      	ldrb	r3, [r3, #0]
    3f60:	2208      	movs	r2, #8
    3f62:	18ba      	adds	r2, r7, r2
    3f64:	5cd3      	ldrb	r3, [r2, r3]
    3f66:	b2db      	uxtb	r3, r3
    3f68:	b25b      	sxtb	r3, r3
}
    3f6a:	1c18      	adds	r0, r3, #0
    3f6c:	46bd      	mov	sp, r7
    3f6e:	b005      	add	sp, #20
    3f70:	bd90      	pop	{r4, r7, pc}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	0000904c 	.word	0x0000904c
    3f78:	00008fb1 	.word	0x00008fb1
    3f7c:	00003e61 	.word	0x00003e61

00003f80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3f80:	b580      	push	{r7, lr}
    3f82:	af00      	add	r7, sp, #0
    3f84:	4b02      	ldr	r3, [pc, #8]	; (3f90 <SERCOM0_Handler+0x10>)
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	2000      	movs	r0, #0
    3f8a:	4798      	blx	r3
    3f8c:	46bd      	mov	sp, r7
    3f8e:	bd80      	pop	{r7, pc}
    3f90:	20000030 	.word	0x20000030

00003f94 <SERCOM1_Handler>:
    3f94:	b580      	push	{r7, lr}
    3f96:	af00      	add	r7, sp, #0
    3f98:	4b02      	ldr	r3, [pc, #8]	; (3fa4 <SERCOM1_Handler+0x10>)
    3f9a:	685b      	ldr	r3, [r3, #4]
    3f9c:	2001      	movs	r0, #1
    3f9e:	4798      	blx	r3
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bd80      	pop	{r7, pc}
    3fa4:	20000030 	.word	0x20000030

00003fa8 <SERCOM2_Handler>:
    3fa8:	b580      	push	{r7, lr}
    3faa:	af00      	add	r7, sp, #0
    3fac:	4b02      	ldr	r3, [pc, #8]	; (3fb8 <SERCOM2_Handler+0x10>)
    3fae:	689b      	ldr	r3, [r3, #8]
    3fb0:	2002      	movs	r0, #2
    3fb2:	4798      	blx	r3
    3fb4:	46bd      	mov	sp, r7
    3fb6:	bd80      	pop	{r7, pc}
    3fb8:	20000030 	.word	0x20000030

00003fbc <SERCOM3_Handler>:
    3fbc:	b580      	push	{r7, lr}
    3fbe:	af00      	add	r7, sp, #0
    3fc0:	4b02      	ldr	r3, [pc, #8]	; (3fcc <SERCOM3_Handler+0x10>)
    3fc2:	68db      	ldr	r3, [r3, #12]
    3fc4:	2003      	movs	r0, #3
    3fc6:	4798      	blx	r3
    3fc8:	46bd      	mov	sp, r7
    3fca:	bd80      	pop	{r7, pc}
    3fcc:	20000030 	.word	0x20000030

00003fd0 <SERCOM4_Handler>:
    3fd0:	b580      	push	{r7, lr}
    3fd2:	af00      	add	r7, sp, #0
    3fd4:	4b02      	ldr	r3, [pc, #8]	; (3fe0 <SERCOM4_Handler+0x10>)
    3fd6:	691b      	ldr	r3, [r3, #16]
    3fd8:	2004      	movs	r0, #4
    3fda:	4798      	blx	r3
    3fdc:	46bd      	mov	sp, r7
    3fde:	bd80      	pop	{r7, pc}
    3fe0:	20000030 	.word	0x20000030

00003fe4 <SERCOM5_Handler>:
    3fe4:	b580      	push	{r7, lr}
    3fe6:	af00      	add	r7, sp, #0
    3fe8:	4b02      	ldr	r3, [pc, #8]	; (3ff4 <SERCOM5_Handler+0x10>)
    3fea:	695b      	ldr	r3, [r3, #20]
    3fec:	2005      	movs	r0, #5
    3fee:	4798      	blx	r3
    3ff0:	46bd      	mov	sp, r7
    3ff2:	bd80      	pop	{r7, pc}
    3ff4:	20000030 	.word	0x20000030

00003ff8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	b082      	sub	sp, #8
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2280      	movs	r2, #128	; 0x80
    4004:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	2200      	movs	r2, #0
    400a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	2201      	movs	r2, #1
    4010:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	2200      	movs	r2, #0
    4016:	70da      	strb	r2, [r3, #3]
}
    4018:	46bd      	mov	sp, r7
    401a:	b002      	add	sp, #8
    401c:	bd80      	pop	{r7, pc}
    401e:	46c0      	nop			; (mov r8, r8)

00004020 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4020:	b580      	push	{r7, lr}
    4022:	b084      	sub	sp, #16
    4024:	af00      	add	r7, sp, #0
    4026:	1c02      	adds	r2, r0, #0
    4028:	6039      	str	r1, [r7, #0]
    402a:	1dfb      	adds	r3, r7, #7
    402c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    402e:	230c      	movs	r3, #12
    4030:	18fb      	adds	r3, r7, r3
    4032:	1c18      	adds	r0, r3, #0
    4034:	4b0f      	ldr	r3, [pc, #60]	; (4074 <port_pin_set_config+0x54>)
    4036:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4038:	230c      	movs	r3, #12
    403a:	18fb      	adds	r3, r7, r3
    403c:	2280      	movs	r2, #128	; 0x80
    403e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4040:	683b      	ldr	r3, [r7, #0]
    4042:	781a      	ldrb	r2, [r3, #0]
    4044:	230c      	movs	r3, #12
    4046:	18fb      	adds	r3, r7, r3
    4048:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    404a:	683b      	ldr	r3, [r7, #0]
    404c:	785a      	ldrb	r2, [r3, #1]
    404e:	230c      	movs	r3, #12
    4050:	18fb      	adds	r3, r7, r3
    4052:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4054:	683b      	ldr	r3, [r7, #0]
    4056:	789a      	ldrb	r2, [r3, #2]
    4058:	230c      	movs	r3, #12
    405a:	18fb      	adds	r3, r7, r3
    405c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    405e:	1dfb      	adds	r3, r7, #7
    4060:	781a      	ldrb	r2, [r3, #0]
    4062:	230c      	movs	r3, #12
    4064:	18fb      	adds	r3, r7, r3
    4066:	1c10      	adds	r0, r2, #0
    4068:	1c19      	adds	r1, r3, #0
    406a:	4b03      	ldr	r3, [pc, #12]	; (4078 <port_pin_set_config+0x58>)
    406c:	4798      	blx	r3
}
    406e:	46bd      	mov	sp, r7
    4070:	b004      	add	sp, #16
    4072:	bd80      	pop	{r7, pc}
    4074:	00003ff9 	.word	0x00003ff9
    4078:	00004d1d 	.word	0x00004d1d

0000407c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    407c:	b580      	push	{r7, lr}
    407e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4080:	46bd      	mov	sp, r7
    4082:	bd80      	pop	{r7, pc}

00004084 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4084:	b580      	push	{r7, lr}
    4086:	b082      	sub	sp, #8
    4088:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    408a:	4b0f      	ldr	r3, [pc, #60]	; (40c8 <cpu_irq_enter_critical+0x44>)
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	2b00      	cmp	r3, #0
    4090:	d112      	bne.n	40b8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4092:	f3ef 8310 	mrs	r3, PRIMASK
    4096:	607b      	str	r3, [r7, #4]
  return(result);
    4098:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    409a:	2b00      	cmp	r3, #0
    409c:	d109      	bne.n	40b2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    409e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    40a0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    40a4:	4b09      	ldr	r3, [pc, #36]	; (40cc <cpu_irq_enter_critical+0x48>)
    40a6:	2200      	movs	r2, #0
    40a8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    40aa:	4b09      	ldr	r3, [pc, #36]	; (40d0 <cpu_irq_enter_critical+0x4c>)
    40ac:	2201      	movs	r2, #1
    40ae:	701a      	strb	r2, [r3, #0]
    40b0:	e002      	b.n	40b8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    40b2:	4b07      	ldr	r3, [pc, #28]	; (40d0 <cpu_irq_enter_critical+0x4c>)
    40b4:	2200      	movs	r2, #0
    40b6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    40b8:	4b03      	ldr	r3, [pc, #12]	; (40c8 <cpu_irq_enter_critical+0x44>)
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	1c5a      	adds	r2, r3, #1
    40be:	4b02      	ldr	r3, [pc, #8]	; (40c8 <cpu_irq_enter_critical+0x44>)
    40c0:	601a      	str	r2, [r3, #0]
}
    40c2:	46bd      	mov	sp, r7
    40c4:	b002      	add	sp, #8
    40c6:	bd80      	pop	{r7, pc}
    40c8:	20000048 	.word	0x20000048
    40cc:	20000000 	.word	0x20000000
    40d0:	2000004c 	.word	0x2000004c

000040d4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    40d4:	b580      	push	{r7, lr}
    40d6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    40d8:	4b0a      	ldr	r3, [pc, #40]	; (4104 <cpu_irq_leave_critical+0x30>)
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	1e5a      	subs	r2, r3, #1
    40de:	4b09      	ldr	r3, [pc, #36]	; (4104 <cpu_irq_leave_critical+0x30>)
    40e0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    40e2:	4b08      	ldr	r3, [pc, #32]	; (4104 <cpu_irq_leave_critical+0x30>)
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	2b00      	cmp	r3, #0
    40e8:	d10a      	bne.n	4100 <cpu_irq_leave_critical+0x2c>
    40ea:	4b07      	ldr	r3, [pc, #28]	; (4108 <cpu_irq_leave_critical+0x34>)
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	b2db      	uxtb	r3, r3
    40f0:	2b00      	cmp	r3, #0
    40f2:	d005      	beq.n	4100 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    40f4:	4b05      	ldr	r3, [pc, #20]	; (410c <cpu_irq_leave_critical+0x38>)
    40f6:	2201      	movs	r2, #1
    40f8:	701a      	strb	r2, [r3, #0]
    40fa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    40fe:	b662      	cpsie	i
	}
}
    4100:	46bd      	mov	sp, r7
    4102:	bd80      	pop	{r7, pc}
    4104:	20000048 	.word	0x20000048
    4108:	2000004c 	.word	0x2000004c
    410c:	20000000 	.word	0x20000000

00004110 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4110:	b580      	push	{r7, lr}
    4112:	b082      	sub	sp, #8
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	2201      	movs	r2, #1
    411c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	2200      	movs	r2, #0
    4122:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	2206      	movs	r2, #6
    4128:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	2200      	movs	r2, #0
    412e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	2200      	movs	r2, #0
    4134:	725a      	strb	r2, [r3, #9]
}
    4136:	46bd      	mov	sp, r7
    4138:	b002      	add	sp, #8
    413a:	bd80      	pop	{r7, pc}

0000413c <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2201      	movs	r2, #1
    4148:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	2201      	movs	r2, #1
    414e:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	2200      	movs	r2, #0
    4154:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	2201      	movs	r2, #1
    415a:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	2207      	movs	r2, #7
    4160:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	2200      	movs	r2, #0
    4166:	715a      	strb	r2, [r3, #5]
}
    4168:	46bd      	mov	sp, r7
    416a:	b002      	add	sp, #8
    416c:	bd80      	pop	{r7, pc}
    416e:	46c0      	nop			; (mov r8, r8)

00004170 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4170:	b580      	push	{r7, lr}
    4172:	b082      	sub	sp, #8
    4174:	af00      	add	r7, sp, #0
    4176:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	2203      	movs	r2, #3
    417c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    417e:	687b      	ldr	r3, [r7, #4]
    4180:	2200      	movs	r2, #0
    4182:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4184:	687b      	ldr	r3, [r7, #4]
    4186:	2201      	movs	r2, #1
    4188:	709a      	strb	r2, [r3, #2]
}
    418a:	46bd      	mov	sp, r7
    418c:	b002      	add	sp, #8
    418e:	bd80      	pop	{r7, pc}

00004190 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4190:	b580      	push	{r7, lr}
    4192:	b082      	sub	sp, #8
    4194:	af00      	add	r7, sp, #0
    4196:	1c02      	adds	r2, r0, #0
    4198:	1dfb      	adds	r3, r7, #7
    419a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    419c:	4a03      	ldr	r2, [pc, #12]	; (41ac <system_cpu_clock_set_divider+0x1c>)
    419e:	1dfb      	adds	r3, r7, #7
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	7213      	strb	r3, [r2, #8]
}
    41a4:	46bd      	mov	sp, r7
    41a6:	b002      	add	sp, #8
    41a8:	bd80      	pop	{r7, pc}
    41aa:	46c0      	nop			; (mov r8, r8)
    41ac:	40000400 	.word	0x40000400

000041b0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    41b0:	b580      	push	{r7, lr}
    41b2:	b082      	sub	sp, #8
    41b4:	af00      	add	r7, sp, #0
    41b6:	1c02      	adds	r2, r0, #0
    41b8:	1dfb      	adds	r3, r7, #7
    41ba:	701a      	strb	r2, [r3, #0]
    41bc:	1dbb      	adds	r3, r7, #6
    41be:	1c0a      	adds	r2, r1, #0
    41c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    41c2:	1dfb      	adds	r3, r7, #7
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	2b01      	cmp	r3, #1
    41c8:	d008      	beq.n	41dc <system_apb_clock_set_divider+0x2c>
    41ca:	2b02      	cmp	r3, #2
    41cc:	d00b      	beq.n	41e6 <system_apb_clock_set_divider+0x36>
    41ce:	2b00      	cmp	r3, #0
    41d0:	d10e      	bne.n	41f0 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    41d2:	4a0b      	ldr	r2, [pc, #44]	; (4200 <system_apb_clock_set_divider+0x50>)
    41d4:	1dbb      	adds	r3, r7, #6
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	7253      	strb	r3, [r2, #9]
			break;
    41da:	e00b      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    41dc:	4a08      	ldr	r2, [pc, #32]	; (4200 <system_apb_clock_set_divider+0x50>)
    41de:	1dbb      	adds	r3, r7, #6
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	7293      	strb	r3, [r2, #10]
			break;
    41e4:	e006      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    41e6:	4a06      	ldr	r2, [pc, #24]	; (4200 <system_apb_clock_set_divider+0x50>)
    41e8:	1dbb      	adds	r3, r7, #6
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	72d3      	strb	r3, [r2, #11]
			break;
    41ee:	e001      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    41f0:	2317      	movs	r3, #23
    41f2:	e000      	b.n	41f6 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    41f4:	2300      	movs	r3, #0
}
    41f6:	1c18      	adds	r0, r3, #0
    41f8:	46bd      	mov	sp, r7
    41fa:	b002      	add	sp, #8
    41fc:	bd80      	pop	{r7, pc}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	40000400 	.word	0x40000400

00004204 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4204:	b580      	push	{r7, lr}
    4206:	b082      	sub	sp, #8
    4208:	af00      	add	r7, sp, #0
    420a:	1c02      	adds	r2, r0, #0
    420c:	1dfb      	adds	r3, r7, #7
    420e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4210:	4b08      	ldr	r3, [pc, #32]	; (4234 <system_flash_set_waitstates+0x30>)
    4212:	1dfa      	adds	r2, r7, #7
    4214:	7812      	ldrb	r2, [r2, #0]
    4216:	210f      	movs	r1, #15
    4218:	400a      	ands	r2, r1
    421a:	b2d2      	uxtb	r2, r2
    421c:	210f      	movs	r1, #15
    421e:	400a      	ands	r2, r1
    4220:	0052      	lsls	r2, r2, #1
    4222:	6859      	ldr	r1, [r3, #4]
    4224:	201e      	movs	r0, #30
    4226:	4381      	bics	r1, r0
    4228:	430a      	orrs	r2, r1
    422a:	605a      	str	r2, [r3, #4]
}
    422c:	46bd      	mov	sp, r7
    422e:	b002      	add	sp, #8
    4230:	bd80      	pop	{r7, pc}
    4232:	46c0      	nop			; (mov r8, r8)
    4234:	41004000 	.word	0x41004000

00004238 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4238:	b580      	push	{r7, lr}
    423a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    423c:	46c0      	nop			; (mov r8, r8)
    423e:	4b03      	ldr	r3, [pc, #12]	; (424c <_system_dfll_wait_for_sync+0x14>)
    4240:	68db      	ldr	r3, [r3, #12]
    4242:	2210      	movs	r2, #16
    4244:	4013      	ands	r3, r2
    4246:	d0fa      	beq.n	423e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4248:	46bd      	mov	sp, r7
    424a:	bd80      	pop	{r7, pc}
    424c:	40000800 	.word	0x40000800

00004250 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4250:	b580      	push	{r7, lr}
    4252:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4254:	4b0c      	ldr	r3, [pc, #48]	; (4288 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4256:	2202      	movs	r2, #2
    4258:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    425a:	4b0c      	ldr	r3, [pc, #48]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    425c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    425e:	4a0a      	ldr	r2, [pc, #40]	; (4288 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4260:	4b0b      	ldr	r3, [pc, #44]	; (4290 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4262:	689b      	ldr	r3, [r3, #8]
    4264:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4266:	4a08      	ldr	r2, [pc, #32]	; (4288 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4268:	4b09      	ldr	r3, [pc, #36]	; (4290 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    426a:	685b      	ldr	r3, [r3, #4]
    426c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    426e:	4b06      	ldr	r3, [pc, #24]	; (4288 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4270:	2200      	movs	r2, #0
    4272:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4274:	4b05      	ldr	r3, [pc, #20]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4276:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4278:	4a03      	ldr	r2, [pc, #12]	; (4288 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    427a:	4b05      	ldr	r3, [pc, #20]	; (4290 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	b29b      	uxth	r3, r3
    4280:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4282:	46bd      	mov	sp, r7
    4284:	bd80      	pop	{r7, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	40000800 	.word	0x40000800
    428c:	00004239 	.word	0x00004239
    4290:	20000050 	.word	0x20000050

00004294 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	1c02      	adds	r2, r0, #0
    429c:	1dfb      	adds	r3, r7, #7
    429e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    42a0:	1dfb      	adds	r3, r7, #7
    42a2:	781b      	ldrb	r3, [r3, #0]
    42a4:	2b08      	cmp	r3, #8
    42a6:	d842      	bhi.n	432e <system_clock_source_get_hz+0x9a>
    42a8:	009a      	lsls	r2, r3, #2
    42aa:	4b23      	ldr	r3, [pc, #140]	; (4338 <system_clock_source_get_hz+0xa4>)
    42ac:	18d3      	adds	r3, r2, r3
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    42b2:	4b22      	ldr	r3, [pc, #136]	; (433c <system_clock_source_get_hz+0xa8>)
    42b4:	691b      	ldr	r3, [r3, #16]
    42b6:	e03b      	b.n	4330 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    42b8:	4b21      	ldr	r3, [pc, #132]	; (4340 <system_clock_source_get_hz+0xac>)
    42ba:	6a1b      	ldr	r3, [r3, #32]
    42bc:	0a1b      	lsrs	r3, r3, #8
    42be:	1c1a      	adds	r2, r3, #0
    42c0:	2303      	movs	r3, #3
    42c2:	4013      	ands	r3, r2
    42c4:	b2db      	uxtb	r3, r3
    42c6:	1c1a      	adds	r2, r3, #0
    42c8:	4b1e      	ldr	r3, [pc, #120]	; (4344 <system_clock_source_get_hz+0xb0>)
    42ca:	40d3      	lsrs	r3, r2
    42cc:	e030      	b.n	4330 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    42ce:	2380      	movs	r3, #128	; 0x80
    42d0:	021b      	lsls	r3, r3, #8
    42d2:	e02d      	b.n	4330 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    42d4:	2380      	movs	r3, #128	; 0x80
    42d6:	021b      	lsls	r3, r3, #8
    42d8:	e02a      	b.n	4330 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    42da:	4b18      	ldr	r3, [pc, #96]	; (433c <system_clock_source_get_hz+0xa8>)
    42dc:	695b      	ldr	r3, [r3, #20]
    42de:	e027      	b.n	4330 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    42e0:	4b16      	ldr	r3, [pc, #88]	; (433c <system_clock_source_get_hz+0xa8>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	2202      	movs	r2, #2
    42e6:	4013      	ands	r3, r2
    42e8:	d101      	bne.n	42ee <system_clock_source_get_hz+0x5a>
			return 0;
    42ea:	2300      	movs	r3, #0
    42ec:	e020      	b.n	4330 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    42ee:	4b16      	ldr	r3, [pc, #88]	; (4348 <system_clock_source_get_hz+0xb4>)
    42f0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    42f2:	4b12      	ldr	r3, [pc, #72]	; (433c <system_clock_source_get_hz+0xa8>)
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	2204      	movs	r2, #4
    42f8:	4013      	ands	r3, r2
    42fa:	d009      	beq.n	4310 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42fc:	2000      	movs	r0, #0
    42fe:	4b13      	ldr	r3, [pc, #76]	; (434c <system_clock_source_get_hz+0xb8>)
    4300:	4798      	blx	r3
    4302:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    4304:	4b0d      	ldr	r3, [pc, #52]	; (433c <system_clock_source_get_hz+0xa8>)
    4306:	689b      	ldr	r3, [r3, #8]
    4308:	041b      	lsls	r3, r3, #16
    430a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    430c:	4353      	muls	r3, r2
    430e:	e00f      	b.n	4330 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4310:	4b0f      	ldr	r3, [pc, #60]	; (4350 <system_clock_source_get_hz+0xbc>)
    4312:	e00d      	b.n	4330 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4314:	4a0a      	ldr	r2, [pc, #40]	; (4340 <system_clock_source_get_hz+0xac>)
    4316:	2350      	movs	r3, #80	; 0x50
    4318:	5cd3      	ldrb	r3, [r2, r3]
    431a:	b2db      	uxtb	r3, r3
    431c:	1c1a      	adds	r2, r3, #0
    431e:	2304      	movs	r3, #4
    4320:	4013      	ands	r3, r2
    4322:	d101      	bne.n	4328 <system_clock_source_get_hz+0x94>
			return 0;
    4324:	2300      	movs	r3, #0
    4326:	e003      	b.n	4330 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <system_clock_source_get_hz+0xa8>)
    432a:	68db      	ldr	r3, [r3, #12]
    432c:	e000      	b.n	4330 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    432e:	2300      	movs	r3, #0
	}
}
    4330:	1c18      	adds	r0, r3, #0
    4332:	46bd      	mov	sp, r7
    4334:	b002      	add	sp, #8
    4336:	bd80      	pop	{r7, pc}
    4338:	00009054 	.word	0x00009054
    433c:	20000050 	.word	0x20000050
    4340:	40000800 	.word	0x40000800
    4344:	007a1200 	.word	0x007a1200
    4348:	00004239 	.word	0x00004239
    434c:	00004b55 	.word	0x00004b55
    4350:	02dc6c00 	.word	0x02dc6c00

00004354 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    435c:	4b1a      	ldr	r3, [pc, #104]	; (43c8 <system_clock_source_osc8m_set_config+0x74>)
    435e:	6a1b      	ldr	r3, [r3, #32]
    4360:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	1c1a      	adds	r2, r3, #0
    4368:	2303      	movs	r3, #3
    436a:	4013      	ands	r3, r2
    436c:	b2da      	uxtb	r2, r3
    436e:	230d      	movs	r3, #13
    4370:	18fb      	adds	r3, r7, r3
    4372:	2103      	movs	r1, #3
    4374:	400a      	ands	r2, r1
    4376:	1c10      	adds	r0, r2, #0
    4378:	781a      	ldrb	r2, [r3, #0]
    437a:	2103      	movs	r1, #3
    437c:	438a      	bics	r2, r1
    437e:	1c11      	adds	r1, r2, #0
    4380:	1c02      	adds	r2, r0, #0
    4382:	430a      	orrs	r2, r1
    4384:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	789a      	ldrb	r2, [r3, #2]
    438a:	230c      	movs	r3, #12
    438c:	18fb      	adds	r3, r7, r3
    438e:	01d0      	lsls	r0, r2, #7
    4390:	781a      	ldrb	r2, [r3, #0]
    4392:	217f      	movs	r1, #127	; 0x7f
    4394:	400a      	ands	r2, r1
    4396:	1c11      	adds	r1, r2, #0
    4398:	1c02      	adds	r2, r0, #0
    439a:	430a      	orrs	r2, r1
    439c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	785a      	ldrb	r2, [r3, #1]
    43a2:	230c      	movs	r3, #12
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	2101      	movs	r1, #1
    43a8:	400a      	ands	r2, r1
    43aa:	0190      	lsls	r0, r2, #6
    43ac:	781a      	ldrb	r2, [r3, #0]
    43ae:	2140      	movs	r1, #64	; 0x40
    43b0:	438a      	bics	r2, r1
    43b2:	1c11      	adds	r1, r2, #0
    43b4:	1c02      	adds	r2, r0, #0
    43b6:	430a      	orrs	r2, r1
    43b8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    43ba:	4b03      	ldr	r3, [pc, #12]	; (43c8 <system_clock_source_osc8m_set_config+0x74>)
    43bc:	68fa      	ldr	r2, [r7, #12]
    43be:	621a      	str	r2, [r3, #32]
}
    43c0:	46bd      	mov	sp, r7
    43c2:	b004      	add	sp, #16
    43c4:	bd80      	pop	{r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	40000800 	.word	0x40000800

000043cc <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    43d4:	4b2f      	ldr	r3, [pc, #188]	; (4494 <system_clock_source_osc32k_set_config+0xc8>)
    43d6:	699b      	ldr	r3, [r3, #24]
    43d8:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	785a      	ldrb	r2, [r3, #1]
    43de:	230c      	movs	r3, #12
    43e0:	18fb      	adds	r3, r7, r3
    43e2:	2101      	movs	r1, #1
    43e4:	400a      	ands	r2, r1
    43e6:	00d0      	lsls	r0, r2, #3
    43e8:	781a      	ldrb	r2, [r3, #0]
    43ea:	2108      	movs	r1, #8
    43ec:	438a      	bics	r2, r1
    43ee:	1c11      	adds	r1, r2, #0
    43f0:	1c02      	adds	r2, r0, #0
    43f2:	430a      	orrs	r2, r1
    43f4:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	789a      	ldrb	r2, [r3, #2]
    43fa:	230c      	movs	r3, #12
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	2101      	movs	r1, #1
    4400:	400a      	ands	r2, r1
    4402:	0090      	lsls	r0, r2, #2
    4404:	781a      	ldrb	r2, [r3, #0]
    4406:	2104      	movs	r1, #4
    4408:	438a      	bics	r2, r1
    440a:	1c11      	adds	r1, r2, #0
    440c:	1c02      	adds	r2, r0, #0
    440e:	430a      	orrs	r2, r1
    4410:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	1c1a      	adds	r2, r3, #0
    4418:	2307      	movs	r3, #7
    441a:	4013      	ands	r3, r2
    441c:	b2da      	uxtb	r2, r3
    441e:	230d      	movs	r3, #13
    4420:	18fb      	adds	r3, r7, r3
    4422:	2107      	movs	r1, #7
    4424:	400a      	ands	r2, r1
    4426:	1c10      	adds	r0, r2, #0
    4428:	781a      	ldrb	r2, [r3, #0]
    442a:	2107      	movs	r1, #7
    442c:	438a      	bics	r2, r1
    442e:	1c11      	adds	r1, r2, #0
    4430:	1c02      	adds	r2, r0, #0
    4432:	430a      	orrs	r2, r1
    4434:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	791a      	ldrb	r2, [r3, #4]
    443a:	230c      	movs	r3, #12
    443c:	18fb      	adds	r3, r7, r3
    443e:	01d0      	lsls	r0, r2, #7
    4440:	781a      	ldrb	r2, [r3, #0]
    4442:	217f      	movs	r1, #127	; 0x7f
    4444:	400a      	ands	r2, r1
    4446:	1c11      	adds	r1, r2, #0
    4448:	1c02      	adds	r2, r0, #0
    444a:	430a      	orrs	r2, r1
    444c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	78da      	ldrb	r2, [r3, #3]
    4452:	230c      	movs	r3, #12
    4454:	18fb      	adds	r3, r7, r3
    4456:	2101      	movs	r1, #1
    4458:	400a      	ands	r2, r1
    445a:	0190      	lsls	r0, r2, #6
    445c:	781a      	ldrb	r2, [r3, #0]
    445e:	2140      	movs	r1, #64	; 0x40
    4460:	438a      	bics	r2, r1
    4462:	1c11      	adds	r1, r2, #0
    4464:	1c02      	adds	r2, r0, #0
    4466:	430a      	orrs	r2, r1
    4468:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	795a      	ldrb	r2, [r3, #5]
    446e:	230d      	movs	r3, #13
    4470:	18fb      	adds	r3, r7, r3
    4472:	2101      	movs	r1, #1
    4474:	400a      	ands	r2, r1
    4476:	0110      	lsls	r0, r2, #4
    4478:	781a      	ldrb	r2, [r3, #0]
    447a:	2110      	movs	r1, #16
    447c:	438a      	bics	r2, r1
    447e:	1c11      	adds	r1, r2, #0
    4480:	1c02      	adds	r2, r0, #0
    4482:	430a      	orrs	r2, r1
    4484:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    4486:	4b03      	ldr	r3, [pc, #12]	; (4494 <system_clock_source_osc32k_set_config+0xc8>)
    4488:	68fa      	ldr	r2, [r7, #12]
    448a:	619a      	str	r2, [r3, #24]
}
    448c:	46bd      	mov	sp, r7
    448e:	b004      	add	sp, #16
    4490:	bd80      	pop	{r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	40000800 	.word	0x40000800

00004498 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4498:	b580      	push	{r7, lr}
    449a:	b082      	sub	sp, #8
    449c:	af00      	add	r7, sp, #0
    449e:	1c02      	adds	r2, r0, #0
    44a0:	1dfb      	adds	r3, r7, #7
    44a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    44a4:	1dfb      	adds	r3, r7, #7
    44a6:	781b      	ldrb	r3, [r3, #0]
    44a8:	2b08      	cmp	r3, #8
    44aa:	d83b      	bhi.n	4524 <system_clock_source_enable+0x8c>
    44ac:	009a      	lsls	r2, r3, #2
    44ae:	4b21      	ldr	r3, [pc, #132]	; (4534 <system_clock_source_enable+0x9c>)
    44b0:	18d3      	adds	r3, r2, r3
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    44b6:	4b20      	ldr	r3, [pc, #128]	; (4538 <system_clock_source_enable+0xa0>)
    44b8:	4a1f      	ldr	r2, [pc, #124]	; (4538 <system_clock_source_enable+0xa0>)
    44ba:	6a12      	ldr	r2, [r2, #32]
    44bc:	2102      	movs	r1, #2
    44be:	430a      	orrs	r2, r1
    44c0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    44c2:	2300      	movs	r3, #0
    44c4:	e031      	b.n	452a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    44c6:	4b1c      	ldr	r3, [pc, #112]	; (4538 <system_clock_source_enable+0xa0>)
    44c8:	4a1b      	ldr	r2, [pc, #108]	; (4538 <system_clock_source_enable+0xa0>)
    44ca:	6992      	ldr	r2, [r2, #24]
    44cc:	2102      	movs	r1, #2
    44ce:	430a      	orrs	r2, r1
    44d0:	619a      	str	r2, [r3, #24]
		break;
    44d2:	e029      	b.n	4528 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    44d4:	4a18      	ldr	r2, [pc, #96]	; (4538 <system_clock_source_enable+0xa0>)
    44d6:	4b18      	ldr	r3, [pc, #96]	; (4538 <system_clock_source_enable+0xa0>)
    44d8:	8a1b      	ldrh	r3, [r3, #16]
    44da:	b29b      	uxth	r3, r3
    44dc:	2102      	movs	r1, #2
    44de:	430b      	orrs	r3, r1
    44e0:	b29b      	uxth	r3, r3
    44e2:	8213      	strh	r3, [r2, #16]
		break;
    44e4:	e020      	b.n	4528 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    44e6:	4a14      	ldr	r2, [pc, #80]	; (4538 <system_clock_source_enable+0xa0>)
    44e8:	4b13      	ldr	r3, [pc, #76]	; (4538 <system_clock_source_enable+0xa0>)
    44ea:	8a9b      	ldrh	r3, [r3, #20]
    44ec:	b29b      	uxth	r3, r3
    44ee:	2102      	movs	r1, #2
    44f0:	430b      	orrs	r3, r1
    44f2:	b29b      	uxth	r3, r3
    44f4:	8293      	strh	r3, [r2, #20]
		break;
    44f6:	e017      	b.n	4528 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    44f8:	4b10      	ldr	r3, [pc, #64]	; (453c <system_clock_source_enable+0xa4>)
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	2202      	movs	r2, #2
    44fe:	431a      	orrs	r2, r3
    4500:	4b0e      	ldr	r3, [pc, #56]	; (453c <system_clock_source_enable+0xa4>)
    4502:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4504:	4b0e      	ldr	r3, [pc, #56]	; (4540 <system_clock_source_enable+0xa8>)
    4506:	4798      	blx	r3
		break;
    4508:	e00e      	b.n	4528 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    450a:	4a0b      	ldr	r2, [pc, #44]	; (4538 <system_clock_source_enable+0xa0>)
    450c:	490a      	ldr	r1, [pc, #40]	; (4538 <system_clock_source_enable+0xa0>)
    450e:	2344      	movs	r3, #68	; 0x44
    4510:	5ccb      	ldrb	r3, [r1, r3]
    4512:	b2db      	uxtb	r3, r3
    4514:	2102      	movs	r1, #2
    4516:	430b      	orrs	r3, r1
    4518:	b2d9      	uxtb	r1, r3
    451a:	2344      	movs	r3, #68	; 0x44
    451c:	54d1      	strb	r1, [r2, r3]
		break;
    451e:	e003      	b.n	4528 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4520:	2300      	movs	r3, #0
    4522:	e002      	b.n	452a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4524:	2317      	movs	r3, #23
    4526:	e000      	b.n	452a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4528:	2300      	movs	r3, #0
}
    452a:	1c18      	adds	r0, r3, #0
    452c:	46bd      	mov	sp, r7
    452e:	b002      	add	sp, #8
    4530:	bd80      	pop	{r7, pc}
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	00009078 	.word	0x00009078
    4538:	40000800 	.word	0x40000800
    453c:	20000050 	.word	0x20000050
    4540:	00004251 	.word	0x00004251

00004544 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4544:	b580      	push	{r7, lr}
    4546:	b082      	sub	sp, #8
    4548:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    454a:	1c3b      	adds	r3, r7, #0
    454c:	2201      	movs	r2, #1
    454e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4550:	2300      	movs	r3, #0
    4552:	607b      	str	r3, [r7, #4]
    4554:	e009      	b.n	456a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	b2da      	uxtb	r2, r3
    455a:	1c3b      	adds	r3, r7, #0
    455c:	1c10      	adds	r0, r2, #0
    455e:	1c19      	adds	r1, r3, #0
    4560:	4b05      	ldr	r3, [pc, #20]	; (4578 <_switch_peripheral_gclk+0x34>)
    4562:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	3301      	adds	r3, #1
    4568:	607b      	str	r3, [r7, #4]
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	2b24      	cmp	r3, #36	; 0x24
    456e:	d9f2      	bls.n	4556 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4570:	46bd      	mov	sp, r7
    4572:	b002      	add	sp, #8
    4574:	bd80      	pop	{r7, pc}
    4576:	46c0      	nop			; (mov r8, r8)
    4578:	00004a31 	.word	0x00004a31

0000457c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    457c:	b580      	push	{r7, lr}
    457e:	b0a2      	sub	sp, #136	; 0x88
    4580:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4582:	4b4f      	ldr	r3, [pc, #316]	; (46c0 <system_clock_init+0x144>)
    4584:	22c2      	movs	r2, #194	; 0xc2
    4586:	00d2      	lsls	r2, r2, #3
    4588:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    458a:	2000      	movs	r0, #0
    458c:	4b4d      	ldr	r3, [pc, #308]	; (46c4 <system_clock_init+0x148>)
    458e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4590:	4b4d      	ldr	r3, [pc, #308]	; (46c8 <system_clock_init+0x14c>)
    4592:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    4594:	4b4a      	ldr	r3, [pc, #296]	; (46c0 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    4596:	4a4d      	ldr	r2, [pc, #308]	; (46cc <system_clock_init+0x150>)
    4598:	6812      	ldr	r2, [r2, #0]
    459a:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    459c:	b2d2      	uxtb	r2, r2
    459e:	1c11      	adds	r1, r2, #0
    45a0:	227f      	movs	r2, #127	; 0x7f
    45a2:	400a      	ands	r2, r1
    45a4:	b2d2      	uxtb	r2, r2
    45a6:	217f      	movs	r1, #127	; 0x7f
    45a8:	400a      	ands	r2, r1
    45aa:	0412      	lsls	r2, r2, #16
    45ac:	6999      	ldr	r1, [r3, #24]
    45ae:	4848      	ldr	r0, [pc, #288]	; (46d0 <system_clock_init+0x154>)
    45b0:	4001      	ands	r1, r0
    45b2:	430a      	orrs	r2, r1
    45b4:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    45b6:	2380      	movs	r3, #128	; 0x80
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	1c18      	adds	r0, r3, #0
    45bc:	4b45      	ldr	r3, [pc, #276]	; (46d4 <system_clock_init+0x158>)
    45be:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    45c0:	2380      	movs	r3, #128	; 0x80
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	2207      	movs	r2, #7
    45c6:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    45c8:	2380      	movs	r3, #128	; 0x80
    45ca:	18fb      	adds	r3, r7, r3
    45cc:	2201      	movs	r2, #1
    45ce:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    45d0:	2380      	movs	r3, #128	; 0x80
    45d2:	18fb      	adds	r3, r7, r3
    45d4:	2201      	movs	r2, #1
    45d6:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    45d8:	2380      	movs	r3, #128	; 0x80
    45da:	18fb      	adds	r3, r7, r3
    45dc:	2201      	movs	r2, #1
    45de:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    45e0:	2380      	movs	r3, #128	; 0x80
    45e2:	18fb      	adds	r3, r7, r3
    45e4:	2200      	movs	r2, #0
    45e6:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    45e8:	2380      	movs	r3, #128	; 0x80
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	1c18      	adds	r0, r3, #0
    45ee:	4b3a      	ldr	r3, [pc, #232]	; (46d8 <system_clock_init+0x15c>)
    45f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    45f2:	2004      	movs	r0, #4
    45f4:	4b39      	ldr	r3, [pc, #228]	; (46dc <system_clock_init+0x160>)
    45f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    45f8:	237c      	movs	r3, #124	; 0x7c
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	1c18      	adds	r0, r3, #0
    45fe:	4b38      	ldr	r3, [pc, #224]	; (46e0 <system_clock_init+0x164>)
    4600:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4602:	237c      	movs	r3, #124	; 0x7c
    4604:	18fb      	adds	r3, r7, r3
    4606:	2200      	movs	r2, #0
    4608:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    460a:	237c      	movs	r3, #124	; 0x7c
    460c:	18fb      	adds	r3, r7, r3
    460e:	2201      	movs	r2, #1
    4610:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4612:	237c      	movs	r3, #124	; 0x7c
    4614:	18fb      	adds	r3, r7, r3
    4616:	2200      	movs	r2, #0
    4618:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    461a:	237c      	movs	r3, #124	; 0x7c
    461c:	18fb      	adds	r3, r7, r3
    461e:	1c18      	adds	r0, r3, #0
    4620:	4b30      	ldr	r3, [pc, #192]	; (46e4 <system_clock_init+0x168>)
    4622:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4624:	2006      	movs	r0, #6
    4626:	4b2d      	ldr	r3, [pc, #180]	; (46dc <system_clock_init+0x160>)
    4628:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    462a:	4b2f      	ldr	r3, [pc, #188]	; (46e8 <system_clock_init+0x16c>)
    462c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    462e:	2358      	movs	r3, #88	; 0x58
    4630:	18fb      	adds	r3, r7, r3
    4632:	1c18      	adds	r0, r3, #0
    4634:	4b2d      	ldr	r3, [pc, #180]	; (46ec <system_clock_init+0x170>)
    4636:	4798      	blx	r3
    4638:	2358      	movs	r3, #88	; 0x58
    463a:	18fb      	adds	r3, r7, r3
    463c:	2204      	movs	r2, #4
    463e:	701a      	strb	r2, [r3, #0]
    4640:	2358      	movs	r3, #88	; 0x58
    4642:	18fb      	adds	r3, r7, r3
    4644:	2220      	movs	r2, #32
    4646:	605a      	str	r2, [r3, #4]
    4648:	2358      	movs	r3, #88	; 0x58
    464a:	18fb      	adds	r3, r7, r3
    464c:	2200      	movs	r2, #0
    464e:	721a      	strb	r2, [r3, #8]
    4650:	2358      	movs	r3, #88	; 0x58
    4652:	18fb      	adds	r3, r7, r3
    4654:	2200      	movs	r2, #0
    4656:	725a      	strb	r2, [r3, #9]
    4658:	2358      	movs	r3, #88	; 0x58
    465a:	18fb      	adds	r3, r7, r3
    465c:	2002      	movs	r0, #2
    465e:	1c19      	adds	r1, r3, #0
    4660:	4b23      	ldr	r3, [pc, #140]	; (46f0 <system_clock_init+0x174>)
    4662:	4798      	blx	r3
    4664:	2002      	movs	r0, #2
    4666:	4b23      	ldr	r3, [pc, #140]	; (46f4 <system_clock_init+0x178>)
    4668:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    466a:	2000      	movs	r0, #0
    466c:	4b22      	ldr	r3, [pc, #136]	; (46f8 <system_clock_init+0x17c>)
    466e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4670:	2000      	movs	r0, #0
    4672:	2100      	movs	r1, #0
    4674:	4b21      	ldr	r3, [pc, #132]	; (46fc <system_clock_init+0x180>)
    4676:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4678:	2001      	movs	r0, #1
    467a:	2100      	movs	r1, #0
    467c:	4b1f      	ldr	r3, [pc, #124]	; (46fc <system_clock_init+0x180>)
    467e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4680:	2002      	movs	r0, #2
    4682:	2100      	movs	r1, #0
    4684:	4b1d      	ldr	r3, [pc, #116]	; (46fc <system_clock_init+0x180>)
    4686:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4688:	1d3b      	adds	r3, r7, #4
    468a:	1c18      	adds	r0, r3, #0
    468c:	4b17      	ldr	r3, [pc, #92]	; (46ec <system_clock_init+0x170>)
    468e:	4798      	blx	r3
    4690:	1d3b      	adds	r3, r7, #4
    4692:	2206      	movs	r2, #6
    4694:	701a      	strb	r2, [r3, #0]
    4696:	1d3b      	adds	r3, r7, #4
    4698:	2201      	movs	r2, #1
    469a:	605a      	str	r2, [r3, #4]
    469c:	1d3b      	adds	r3, r7, #4
    469e:	2200      	movs	r2, #0
    46a0:	721a      	strb	r2, [r3, #8]
    46a2:	1d3b      	adds	r3, r7, #4
    46a4:	2200      	movs	r2, #0
    46a6:	725a      	strb	r2, [r3, #9]
    46a8:	1d3b      	adds	r3, r7, #4
    46aa:	2000      	movs	r0, #0
    46ac:	1c19      	adds	r1, r3, #0
    46ae:	4b10      	ldr	r3, [pc, #64]	; (46f0 <system_clock_init+0x174>)
    46b0:	4798      	blx	r3
    46b2:	2000      	movs	r0, #0
    46b4:	4b0f      	ldr	r3, [pc, #60]	; (46f4 <system_clock_init+0x178>)
    46b6:	4798      	blx	r3
#endif
}
    46b8:	46bd      	mov	sp, r7
    46ba:	b022      	add	sp, #136	; 0x88
    46bc:	bd80      	pop	{r7, pc}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	40000800 	.word	0x40000800
    46c4:	00004205 	.word	0x00004205
    46c8:	00004545 	.word	0x00004545
    46cc:	00806024 	.word	0x00806024
    46d0:	ff80ffff 	.word	0xff80ffff
    46d4:	0000413d 	.word	0x0000413d
    46d8:	000043cd 	.word	0x000043cd
    46dc:	00004499 	.word	0x00004499
    46e0:	00004171 	.word	0x00004171
    46e4:	00004355 	.word	0x00004355
    46e8:	000047a1 	.word	0x000047a1
    46ec:	00004111 	.word	0x00004111
    46f0:	000047d1 	.word	0x000047d1
    46f4:	000048f1 	.word	0x000048f1
    46f8:	00004191 	.word	0x00004191
    46fc:	000041b1 	.word	0x000041b1

00004700 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4700:	b580      	push	{r7, lr}
    4702:	b082      	sub	sp, #8
    4704:	af00      	add	r7, sp, #0
    4706:	1c02      	adds	r2, r0, #0
    4708:	6039      	str	r1, [r7, #0]
    470a:	1dfb      	adds	r3, r7, #7
    470c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    470e:	1dfb      	adds	r3, r7, #7
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	2b01      	cmp	r3, #1
    4714:	d00a      	beq.n	472c <system_apb_clock_set_mask+0x2c>
    4716:	2b02      	cmp	r3, #2
    4718:	d00f      	beq.n	473a <system_apb_clock_set_mask+0x3a>
    471a:	2b00      	cmp	r3, #0
    471c:	d114      	bne.n	4748 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    471e:	4b0e      	ldr	r3, [pc, #56]	; (4758 <system_apb_clock_set_mask+0x58>)
    4720:	4a0d      	ldr	r2, [pc, #52]	; (4758 <system_apb_clock_set_mask+0x58>)
    4722:	6991      	ldr	r1, [r2, #24]
    4724:	683a      	ldr	r2, [r7, #0]
    4726:	430a      	orrs	r2, r1
    4728:	619a      	str	r2, [r3, #24]
			break;
    472a:	e00f      	b.n	474c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    472c:	4b0a      	ldr	r3, [pc, #40]	; (4758 <system_apb_clock_set_mask+0x58>)
    472e:	4a0a      	ldr	r2, [pc, #40]	; (4758 <system_apb_clock_set_mask+0x58>)
    4730:	69d1      	ldr	r1, [r2, #28]
    4732:	683a      	ldr	r2, [r7, #0]
    4734:	430a      	orrs	r2, r1
    4736:	61da      	str	r2, [r3, #28]
			break;
    4738:	e008      	b.n	474c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    473a:	4b07      	ldr	r3, [pc, #28]	; (4758 <system_apb_clock_set_mask+0x58>)
    473c:	4a06      	ldr	r2, [pc, #24]	; (4758 <system_apb_clock_set_mask+0x58>)
    473e:	6a11      	ldr	r1, [r2, #32]
    4740:	683a      	ldr	r2, [r7, #0]
    4742:	430a      	orrs	r2, r1
    4744:	621a      	str	r2, [r3, #32]
			break;
    4746:	e001      	b.n	474c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4748:	2317      	movs	r3, #23
    474a:	e000      	b.n	474e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    474c:	2300      	movs	r3, #0
}
    474e:	1c18      	adds	r0, r3, #0
    4750:	46bd      	mov	sp, r7
    4752:	b002      	add	sp, #8
    4754:	bd80      	pop	{r7, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	40000400 	.word	0x40000400

0000475c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    475c:	b580      	push	{r7, lr}
    475e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4760:	4b01      	ldr	r3, [pc, #4]	; (4768 <system_interrupt_enter_critical_section+0xc>)
    4762:	4798      	blx	r3
}
    4764:	46bd      	mov	sp, r7
    4766:	bd80      	pop	{r7, pc}
    4768:	00004085 	.word	0x00004085

0000476c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    476c:	b580      	push	{r7, lr}
    476e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4770:	4b01      	ldr	r3, [pc, #4]	; (4778 <system_interrupt_leave_critical_section+0xc>)
    4772:	4798      	blx	r3
}
    4774:	46bd      	mov	sp, r7
    4776:	bd80      	pop	{r7, pc}
    4778:	000040d5 	.word	0x000040d5

0000477c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    477c:	b580      	push	{r7, lr}
    477e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4780:	4b06      	ldr	r3, [pc, #24]	; (479c <system_gclk_is_syncing+0x20>)
    4782:	785b      	ldrb	r3, [r3, #1]
    4784:	b2db      	uxtb	r3, r3
    4786:	b2db      	uxtb	r3, r3
    4788:	b25b      	sxtb	r3, r3
    478a:	2b00      	cmp	r3, #0
    478c:	da01      	bge.n	4792 <system_gclk_is_syncing+0x16>
		return true;
    478e:	2301      	movs	r3, #1
    4790:	e000      	b.n	4794 <system_gclk_is_syncing+0x18>
	}

	return false;
    4792:	2300      	movs	r3, #0
}
    4794:	1c18      	adds	r0, r3, #0
    4796:	46bd      	mov	sp, r7
    4798:	bd80      	pop	{r7, pc}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	40000c00 	.word	0x40000c00

000047a0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    47a0:	b580      	push	{r7, lr}
    47a2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    47a4:	2000      	movs	r0, #0
    47a6:	2108      	movs	r1, #8
    47a8:	4b07      	ldr	r3, [pc, #28]	; (47c8 <system_gclk_init+0x28>)
    47aa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    47ac:	4b07      	ldr	r3, [pc, #28]	; (47cc <system_gclk_init+0x2c>)
    47ae:	2201      	movs	r2, #1
    47b0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	4b05      	ldr	r3, [pc, #20]	; (47cc <system_gclk_init+0x2c>)
    47b6:	781b      	ldrb	r3, [r3, #0]
    47b8:	b2db      	uxtb	r3, r3
    47ba:	1c1a      	adds	r2, r3, #0
    47bc:	2301      	movs	r3, #1
    47be:	4013      	ands	r3, r2
    47c0:	d1f8      	bne.n	47b4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    47c2:	46bd      	mov	sp, r7
    47c4:	bd80      	pop	{r7, pc}
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	00004701 	.word	0x00004701
    47cc:	40000c00 	.word	0x40000c00

000047d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    47d0:	b580      	push	{r7, lr}
    47d2:	b086      	sub	sp, #24
    47d4:	af00      	add	r7, sp, #0
    47d6:	1c02      	adds	r2, r0, #0
    47d8:	6039      	str	r1, [r7, #0]
    47da:	1dfb      	adds	r3, r7, #7
    47dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    47de:	1dfb      	adds	r3, r7, #7
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    47e4:	1dfb      	adds	r3, r7, #7
    47e6:	781b      	ldrb	r3, [r3, #0]
    47e8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    47ea:	683b      	ldr	r3, [r7, #0]
    47ec:	781b      	ldrb	r3, [r3, #0]
    47ee:	021b      	lsls	r3, r3, #8
    47f0:	1c1a      	adds	r2, r3, #0
    47f2:	697b      	ldr	r3, [r7, #20]
    47f4:	4313      	orrs	r3, r2
    47f6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    47f8:	683b      	ldr	r3, [r7, #0]
    47fa:	785b      	ldrb	r3, [r3, #1]
    47fc:	2b00      	cmp	r3, #0
    47fe:	d004      	beq.n	480a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4800:	697b      	ldr	r3, [r7, #20]
    4802:	2280      	movs	r2, #128	; 0x80
    4804:	02d2      	lsls	r2, r2, #11
    4806:	4313      	orrs	r3, r2
    4808:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    480a:	683b      	ldr	r3, [r7, #0]
    480c:	7a5b      	ldrb	r3, [r3, #9]
    480e:	2b00      	cmp	r3, #0
    4810:	d004      	beq.n	481c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4812:	697b      	ldr	r3, [r7, #20]
    4814:	2280      	movs	r2, #128	; 0x80
    4816:	0312      	lsls	r2, r2, #12
    4818:	4313      	orrs	r3, r2
    481a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    481c:	683b      	ldr	r3, [r7, #0]
    481e:	685b      	ldr	r3, [r3, #4]
    4820:	2b01      	cmp	r3, #1
    4822:	d92c      	bls.n	487e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4824:	683b      	ldr	r3, [r7, #0]
    4826:	685a      	ldr	r2, [r3, #4]
    4828:	683b      	ldr	r3, [r7, #0]
    482a:	685b      	ldr	r3, [r3, #4]
    482c:	3b01      	subs	r3, #1
    482e:	4013      	ands	r3, r2
    4830:	d11a      	bne.n	4868 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4832:	2300      	movs	r3, #0
    4834:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4836:	2302      	movs	r3, #2
    4838:	60bb      	str	r3, [r7, #8]
    483a:	e005      	b.n	4848 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	3301      	adds	r3, #1
    4840:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4842:	68bb      	ldr	r3, [r7, #8]
    4844:	005b      	lsls	r3, r3, #1
    4846:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4848:	683b      	ldr	r3, [r7, #0]
    484a:	685a      	ldr	r2, [r3, #4]
    484c:	68bb      	ldr	r3, [r7, #8]
    484e:	429a      	cmp	r2, r3
    4850:	d8f4      	bhi.n	483c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4852:	68fb      	ldr	r3, [r7, #12]
    4854:	021b      	lsls	r3, r3, #8
    4856:	693a      	ldr	r2, [r7, #16]
    4858:	4313      	orrs	r3, r2
    485a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    485c:	697b      	ldr	r3, [r7, #20]
    485e:	2280      	movs	r2, #128	; 0x80
    4860:	0352      	lsls	r2, r2, #13
    4862:	4313      	orrs	r3, r2
    4864:	617b      	str	r3, [r7, #20]
    4866:	e00a      	b.n	487e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4868:	683b      	ldr	r3, [r7, #0]
    486a:	685b      	ldr	r3, [r3, #4]
    486c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    486e:	693a      	ldr	r2, [r7, #16]
    4870:	4313      	orrs	r3, r2
    4872:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4874:	697b      	ldr	r3, [r7, #20]
    4876:	2280      	movs	r2, #128	; 0x80
    4878:	0292      	lsls	r2, r2, #10
    487a:	4313      	orrs	r3, r2
    487c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    487e:	683b      	ldr	r3, [r7, #0]
    4880:	7a1b      	ldrb	r3, [r3, #8]
    4882:	2b00      	cmp	r3, #0
    4884:	d004      	beq.n	4890 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4886:	697b      	ldr	r3, [r7, #20]
    4888:	2280      	movs	r2, #128	; 0x80
    488a:	0392      	lsls	r2, r2, #14
    488c:	4313      	orrs	r3, r2
    488e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4890:	46c0      	nop			; (mov r8, r8)
    4892:	4b12      	ldr	r3, [pc, #72]	; (48dc <system_gclk_gen_set_config+0x10c>)
    4894:	4798      	blx	r3
    4896:	1e03      	subs	r3, r0, #0
    4898:	d1fb      	bne.n	4892 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    489a:	4b11      	ldr	r3, [pc, #68]	; (48e0 <system_gclk_gen_set_config+0x110>)
    489c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    489e:	4a11      	ldr	r2, [pc, #68]	; (48e4 <system_gclk_gen_set_config+0x114>)
    48a0:	1dfb      	adds	r3, r7, #7
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	4b0c      	ldr	r3, [pc, #48]	; (48dc <system_gclk_gen_set_config+0x10c>)
    48aa:	4798      	blx	r3
    48ac:	1e03      	subs	r3, r0, #0
    48ae:	d1fb      	bne.n	48a8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    48b0:	4b0d      	ldr	r3, [pc, #52]	; (48e8 <system_gclk_gen_set_config+0x118>)
    48b2:	693a      	ldr	r2, [r7, #16]
    48b4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    48b6:	46c0      	nop			; (mov r8, r8)
    48b8:	4b08      	ldr	r3, [pc, #32]	; (48dc <system_gclk_gen_set_config+0x10c>)
    48ba:	4798      	blx	r3
    48bc:	1e03      	subs	r3, r0, #0
    48be:	d1fb      	bne.n	48b8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    48c0:	4b09      	ldr	r3, [pc, #36]	; (48e8 <system_gclk_gen_set_config+0x118>)
    48c2:	4a09      	ldr	r2, [pc, #36]	; (48e8 <system_gclk_gen_set_config+0x118>)
    48c4:	6851      	ldr	r1, [r2, #4]
    48c6:	2280      	movs	r2, #128	; 0x80
    48c8:	0252      	lsls	r2, r2, #9
    48ca:	4011      	ands	r1, r2
    48cc:	697a      	ldr	r2, [r7, #20]
    48ce:	430a      	orrs	r2, r1
    48d0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    48d2:	4b06      	ldr	r3, [pc, #24]	; (48ec <system_gclk_gen_set_config+0x11c>)
    48d4:	4798      	blx	r3
}
    48d6:	46bd      	mov	sp, r7
    48d8:	b006      	add	sp, #24
    48da:	bd80      	pop	{r7, pc}
    48dc:	0000477d 	.word	0x0000477d
    48e0:	0000475d 	.word	0x0000475d
    48e4:	40000c08 	.word	0x40000c08
    48e8:	40000c00 	.word	0x40000c00
    48ec:	0000476d 	.word	0x0000476d

000048f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    48f0:	b580      	push	{r7, lr}
    48f2:	b082      	sub	sp, #8
    48f4:	af00      	add	r7, sp, #0
    48f6:	1c02      	adds	r2, r0, #0
    48f8:	1dfb      	adds	r3, r7, #7
    48fa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    48fc:	46c0      	nop			; (mov r8, r8)
    48fe:	4b0d      	ldr	r3, [pc, #52]	; (4934 <system_gclk_gen_enable+0x44>)
    4900:	4798      	blx	r3
    4902:	1e03      	subs	r3, r0, #0
    4904:	d1fb      	bne.n	48fe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4906:	4b0c      	ldr	r3, [pc, #48]	; (4938 <system_gclk_gen_enable+0x48>)
    4908:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    490a:	4a0c      	ldr	r2, [pc, #48]	; (493c <system_gclk_gen_enable+0x4c>)
    490c:	1dfb      	adds	r3, r7, #7
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	4b07      	ldr	r3, [pc, #28]	; (4934 <system_gclk_gen_enable+0x44>)
    4916:	4798      	blx	r3
    4918:	1e03      	subs	r3, r0, #0
    491a:	d1fb      	bne.n	4914 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    491c:	4b08      	ldr	r3, [pc, #32]	; (4940 <system_gclk_gen_enable+0x50>)
    491e:	4a08      	ldr	r2, [pc, #32]	; (4940 <system_gclk_gen_enable+0x50>)
    4920:	6852      	ldr	r2, [r2, #4]
    4922:	2180      	movs	r1, #128	; 0x80
    4924:	0249      	lsls	r1, r1, #9
    4926:	430a      	orrs	r2, r1
    4928:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    492a:	4b06      	ldr	r3, [pc, #24]	; (4944 <system_gclk_gen_enable+0x54>)
    492c:	4798      	blx	r3
}
    492e:	46bd      	mov	sp, r7
    4930:	b002      	add	sp, #8
    4932:	bd80      	pop	{r7, pc}
    4934:	0000477d 	.word	0x0000477d
    4938:	0000475d 	.word	0x0000475d
    493c:	40000c04 	.word	0x40000c04
    4940:	40000c00 	.word	0x40000c00
    4944:	0000476d 	.word	0x0000476d

00004948 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4948:	b580      	push	{r7, lr}
    494a:	b086      	sub	sp, #24
    494c:	af00      	add	r7, sp, #0
    494e:	1c02      	adds	r2, r0, #0
    4950:	1dfb      	adds	r3, r7, #7
    4952:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4954:	46c0      	nop			; (mov r8, r8)
    4956:	4b2e      	ldr	r3, [pc, #184]	; (4a10 <system_gclk_gen_get_hz+0xc8>)
    4958:	4798      	blx	r3
    495a:	1e03      	subs	r3, r0, #0
    495c:	d1fb      	bne.n	4956 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    495e:	4b2d      	ldr	r3, [pc, #180]	; (4a14 <system_gclk_gen_get_hz+0xcc>)
    4960:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4962:	4a2d      	ldr	r2, [pc, #180]	; (4a18 <system_gclk_gen_get_hz+0xd0>)
    4964:	1dfb      	adds	r3, r7, #7
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	4b28      	ldr	r3, [pc, #160]	; (4a10 <system_gclk_gen_get_hz+0xc8>)
    496e:	4798      	blx	r3
    4970:	1e03      	subs	r3, r0, #0
    4972:	d1fb      	bne.n	496c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4974:	4b29      	ldr	r3, [pc, #164]	; (4a1c <system_gclk_gen_get_hz+0xd4>)
    4976:	685b      	ldr	r3, [r3, #4]
    4978:	0a1b      	lsrs	r3, r3, #8
    497a:	1c1a      	adds	r2, r3, #0
    497c:	231f      	movs	r3, #31
    497e:	4013      	ands	r3, r2
    4980:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4982:	1c18      	adds	r0, r3, #0
    4984:	4b26      	ldr	r3, [pc, #152]	; (4a20 <system_gclk_gen_get_hz+0xd8>)
    4986:	4798      	blx	r3
    4988:	1c03      	adds	r3, r0, #0
    498a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    498c:	4a22      	ldr	r2, [pc, #136]	; (4a18 <system_gclk_gen_get_hz+0xd0>)
    498e:	1dfb      	adds	r3, r7, #7
    4990:	781b      	ldrb	r3, [r3, #0]
    4992:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4994:	4b21      	ldr	r3, [pc, #132]	; (4a1c <system_gclk_gen_get_hz+0xd4>)
    4996:	685b      	ldr	r3, [r3, #4]
    4998:	0d1b      	lsrs	r3, r3, #20
    499a:	1c1a      	adds	r2, r3, #0
    499c:	2301      	movs	r3, #1
    499e:	4013      	ands	r3, r2
    49a0:	b2da      	uxtb	r2, r3
    49a2:	2313      	movs	r3, #19
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49a8:	4a1e      	ldr	r2, [pc, #120]	; (4a24 <system_gclk_gen_get_hz+0xdc>)
    49aa:	1dfb      	adds	r3, r7, #7
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    49b0:	46c0      	nop			; (mov r8, r8)
    49b2:	4b17      	ldr	r3, [pc, #92]	; (4a10 <system_gclk_gen_get_hz+0xc8>)
    49b4:	4798      	blx	r3
    49b6:	1e03      	subs	r3, r0, #0
    49b8:	d1fb      	bne.n	49b2 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49ba:	4b18      	ldr	r3, [pc, #96]	; (4a1c <system_gclk_gen_get_hz+0xd4>)
    49bc:	689b      	ldr	r3, [r3, #8]
    49be:	0a1b      	lsrs	r3, r3, #8
    49c0:	1c1a      	adds	r2, r3, #0
    49c2:	2300      	movs	r3, #0
    49c4:	439a      	bics	r2, r3
    49c6:	1c13      	adds	r3, r2, #0
    49c8:	b29b      	uxth	r3, r3
    49ca:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    49cc:	4b16      	ldr	r3, [pc, #88]	; (4a28 <system_gclk_gen_get_hz+0xe0>)
    49ce:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49d0:	2313      	movs	r3, #19
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	781b      	ldrb	r3, [r3, #0]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d109      	bne.n	49ee <system_gclk_gen_get_hz+0xa6>
    49da:	68fb      	ldr	r3, [r7, #12]
    49dc:	2b01      	cmp	r3, #1
    49de:	d906      	bls.n	49ee <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    49e0:	4b12      	ldr	r3, [pc, #72]	; (4a2c <system_gclk_gen_get_hz+0xe4>)
    49e2:	6978      	ldr	r0, [r7, #20]
    49e4:	68f9      	ldr	r1, [r7, #12]
    49e6:	4798      	blx	r3
    49e8:	1c03      	adds	r3, r0, #0
    49ea:	617b      	str	r3, [r7, #20]
    49ec:	e00a      	b.n	4a04 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    49ee:	2313      	movs	r3, #19
    49f0:	18fb      	adds	r3, r7, r3
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	2b00      	cmp	r3, #0
    49f6:	d005      	beq.n	4a04 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	3301      	adds	r3, #1
    49fc:	1c1a      	adds	r2, r3, #0
    49fe:	697b      	ldr	r3, [r7, #20]
    4a00:	40d3      	lsrs	r3, r2
    4a02:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4a04:	697b      	ldr	r3, [r7, #20]
}
    4a06:	1c18      	adds	r0, r3, #0
    4a08:	46bd      	mov	sp, r7
    4a0a:	b006      	add	sp, #24
    4a0c:	bd80      	pop	{r7, pc}
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	0000477d 	.word	0x0000477d
    4a14:	0000475d 	.word	0x0000475d
    4a18:	40000c04 	.word	0x40000c04
    4a1c:	40000c00 	.word	0x40000c00
    4a20:	00004295 	.word	0x00004295
    4a24:	40000c08 	.word	0x40000c08
    4a28:	0000476d 	.word	0x0000476d
    4a2c:	00007475 	.word	0x00007475

00004a30 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	1c02      	adds	r2, r0, #0
    4a38:	6039      	str	r1, [r7, #0]
    4a3a:	1dfb      	adds	r3, r7, #7
    4a3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4a3e:	1dfb      	adds	r3, r7, #7
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4a44:	683b      	ldr	r3, [r7, #0]
    4a46:	781b      	ldrb	r3, [r3, #0]
    4a48:	021b      	lsls	r3, r3, #8
    4a4a:	1c1a      	adds	r2, r3, #0
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	4313      	orrs	r3, r2
    4a50:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4a52:	1dfb      	adds	r3, r7, #7
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	1c18      	adds	r0, r3, #0
    4a58:	4b04      	ldr	r3, [pc, #16]	; (4a6c <system_gclk_chan_set_config+0x3c>)
    4a5a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4a5c:	4b04      	ldr	r3, [pc, #16]	; (4a70 <system_gclk_chan_set_config+0x40>)
    4a5e:	68fa      	ldr	r2, [r7, #12]
    4a60:	b292      	uxth	r2, r2
    4a62:	805a      	strh	r2, [r3, #2]
}
    4a64:	46bd      	mov	sp, r7
    4a66:	b004      	add	sp, #16
    4a68:	bd80      	pop	{r7, pc}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	00004ab9 	.word	0x00004ab9
    4a70:	40000c00 	.word	0x40000c00

00004a74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a74:	b580      	push	{r7, lr}
    4a76:	b082      	sub	sp, #8
    4a78:	af00      	add	r7, sp, #0
    4a7a:	1c02      	adds	r2, r0, #0
    4a7c:	1dfb      	adds	r3, r7, #7
    4a7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4a80:	4b09      	ldr	r3, [pc, #36]	; (4aa8 <system_gclk_chan_enable+0x34>)
    4a82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a84:	4a09      	ldr	r2, [pc, #36]	; (4aac <system_gclk_chan_enable+0x38>)
    4a86:	1dfb      	adds	r3, r7, #7
    4a88:	781b      	ldrb	r3, [r3, #0]
    4a8a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a8c:	4908      	ldr	r1, [pc, #32]	; (4ab0 <system_gclk_chan_enable+0x3c>)
    4a8e:	4b08      	ldr	r3, [pc, #32]	; (4ab0 <system_gclk_chan_enable+0x3c>)
    4a90:	885b      	ldrh	r3, [r3, #2]
    4a92:	b29b      	uxth	r3, r3
    4a94:	2280      	movs	r2, #128	; 0x80
    4a96:	01d2      	lsls	r2, r2, #7
    4a98:	4313      	orrs	r3, r2
    4a9a:	b29b      	uxth	r3, r3
    4a9c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4a9e:	4b05      	ldr	r3, [pc, #20]	; (4ab4 <system_gclk_chan_enable+0x40>)
    4aa0:	4798      	blx	r3
}
    4aa2:	46bd      	mov	sp, r7
    4aa4:	b002      	add	sp, #8
    4aa6:	bd80      	pop	{r7, pc}
    4aa8:	0000475d 	.word	0x0000475d
    4aac:	40000c02 	.word	0x40000c02
    4ab0:	40000c00 	.word	0x40000c00
    4ab4:	0000476d 	.word	0x0000476d

00004ab8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4ab8:	b580      	push	{r7, lr}
    4aba:	b084      	sub	sp, #16
    4abc:	af00      	add	r7, sp, #0
    4abe:	1c02      	adds	r2, r0, #0
    4ac0:	1dfb      	adds	r3, r7, #7
    4ac2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4ac4:	4b1d      	ldr	r3, [pc, #116]	; (4b3c <system_gclk_chan_disable+0x84>)
    4ac6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ac8:	4a1d      	ldr	r2, [pc, #116]	; (4b40 <system_gclk_chan_disable+0x88>)
    4aca:	1dfb      	adds	r3, r7, #7
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4ad0:	4b1c      	ldr	r3, [pc, #112]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4ad2:	885b      	ldrh	r3, [r3, #2]
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	0a1b      	lsrs	r3, r3, #8
    4ad8:	1c1a      	adds	r2, r3, #0
    4ada:	230f      	movs	r3, #15
    4adc:	4013      	ands	r3, r2
    4ade:	b2db      	uxtb	r3, r3
    4ae0:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4ae2:	4b18      	ldr	r3, [pc, #96]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4ae4:	885a      	ldrh	r2, [r3, #2]
    4ae6:	4918      	ldr	r1, [pc, #96]	; (4b48 <system_gclk_chan_disable+0x90>)
    4ae8:	400a      	ands	r2, r1
    4aea:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4aec:	4a15      	ldr	r2, [pc, #84]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4aee:	4b15      	ldr	r3, [pc, #84]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4af0:	885b      	ldrh	r3, [r3, #2]
    4af2:	b29b      	uxth	r3, r3
    4af4:	4915      	ldr	r1, [pc, #84]	; (4b4c <system_gclk_chan_disable+0x94>)
    4af6:	400b      	ands	r3, r1
    4af8:	b29b      	uxth	r3, r3
    4afa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4afc:	46c0      	nop			; (mov r8, r8)
    4afe:	4b11      	ldr	r3, [pc, #68]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4b00:	885b      	ldrh	r3, [r3, #2]
    4b02:	b29b      	uxth	r3, r3
    4b04:	1c1a      	adds	r2, r3, #0
    4b06:	2380      	movs	r3, #128	; 0x80
    4b08:	01db      	lsls	r3, r3, #7
    4b0a:	4013      	ands	r3, r2
    4b0c:	d1f7      	bne.n	4afe <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4b0e:	4b0d      	ldr	r3, [pc, #52]	; (4b44 <system_gclk_chan_disable+0x8c>)
    4b10:	68fa      	ldr	r2, [r7, #12]
    4b12:	b2d2      	uxtb	r2, r2
    4b14:	1c11      	adds	r1, r2, #0
    4b16:	220f      	movs	r2, #15
    4b18:	400a      	ands	r2, r1
    4b1a:	b2d2      	uxtb	r2, r2
    4b1c:	1c11      	adds	r1, r2, #0
    4b1e:	220f      	movs	r2, #15
    4b20:	400a      	ands	r2, r1
    4b22:	0210      	lsls	r0, r2, #8
    4b24:	885a      	ldrh	r2, [r3, #2]
    4b26:	4908      	ldr	r1, [pc, #32]	; (4b48 <system_gclk_chan_disable+0x90>)
    4b28:	400a      	ands	r2, r1
    4b2a:	1c11      	adds	r1, r2, #0
    4b2c:	1c02      	adds	r2, r0, #0
    4b2e:	430a      	orrs	r2, r1
    4b30:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    4b32:	4b07      	ldr	r3, [pc, #28]	; (4b50 <system_gclk_chan_disable+0x98>)
    4b34:	4798      	blx	r3
}
    4b36:	46bd      	mov	sp, r7
    4b38:	b004      	add	sp, #16
    4b3a:	bd80      	pop	{r7, pc}
    4b3c:	0000475d 	.word	0x0000475d
    4b40:	40000c02 	.word	0x40000c02
    4b44:	40000c00 	.word	0x40000c00
    4b48:	fffff0ff 	.word	0xfffff0ff
    4b4c:	ffffbfff 	.word	0xffffbfff
    4b50:	0000476d 	.word	0x0000476d

00004b54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4b54:	b580      	push	{r7, lr}
    4b56:	b084      	sub	sp, #16
    4b58:	af00      	add	r7, sp, #0
    4b5a:	1c02      	adds	r2, r0, #0
    4b5c:	1dfb      	adds	r3, r7, #7
    4b5e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4b60:	4b0e      	ldr	r3, [pc, #56]	; (4b9c <system_gclk_chan_get_hz+0x48>)
    4b62:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b64:	4a0e      	ldr	r2, [pc, #56]	; (4ba0 <system_gclk_chan_get_hz+0x4c>)
    4b66:	1dfb      	adds	r3, r7, #7
    4b68:	781b      	ldrb	r3, [r3, #0]
    4b6a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4b6c:	4b0d      	ldr	r3, [pc, #52]	; (4ba4 <system_gclk_chan_get_hz+0x50>)
    4b6e:	885b      	ldrh	r3, [r3, #2]
    4b70:	b29b      	uxth	r3, r3
    4b72:	0a1b      	lsrs	r3, r3, #8
    4b74:	1c1a      	adds	r2, r3, #0
    4b76:	230f      	movs	r3, #15
    4b78:	4013      	ands	r3, r2
    4b7a:	b2da      	uxtb	r2, r3
    4b7c:	230f      	movs	r3, #15
    4b7e:	18fb      	adds	r3, r7, r3
    4b80:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4b82:	4b09      	ldr	r3, [pc, #36]	; (4ba8 <system_gclk_chan_get_hz+0x54>)
    4b84:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4b86:	230f      	movs	r3, #15
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	1c18      	adds	r0, r3, #0
    4b8e:	4b07      	ldr	r3, [pc, #28]	; (4bac <system_gclk_chan_get_hz+0x58>)
    4b90:	4798      	blx	r3
    4b92:	1c03      	adds	r3, r0, #0
}
    4b94:	1c18      	adds	r0, r3, #0
    4b96:	46bd      	mov	sp, r7
    4b98:	b004      	add	sp, #16
    4b9a:	bd80      	pop	{r7, pc}
    4b9c:	0000475d 	.word	0x0000475d
    4ba0:	40000c02 	.word	0x40000c02
    4ba4:	40000c00 	.word	0x40000c00
    4ba8:	0000476d 	.word	0x0000476d
    4bac:	00004949 	.word	0x00004949

00004bb0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b084      	sub	sp, #16
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	1c02      	adds	r2, r0, #0
    4bb8:	1dfb      	adds	r3, r7, #7
    4bba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4bbc:	230f      	movs	r3, #15
    4bbe:	18fb      	adds	r3, r7, r3
    4bc0:	1dfa      	adds	r2, r7, #7
    4bc2:	7812      	ldrb	r2, [r2, #0]
    4bc4:	09d2      	lsrs	r2, r2, #7
    4bc6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4bc8:	230e      	movs	r3, #14
    4bca:	18fb      	adds	r3, r7, r3
    4bcc:	1dfa      	adds	r2, r7, #7
    4bce:	7812      	ldrb	r2, [r2, #0]
    4bd0:	0952      	lsrs	r2, r2, #5
    4bd2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4bd4:	4b0d      	ldr	r3, [pc, #52]	; (4c0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4bd6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4bd8:	230f      	movs	r3, #15
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	781b      	ldrb	r3, [r3, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d10f      	bne.n	4c02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4be2:	230f      	movs	r3, #15
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	781b      	ldrb	r3, [r3, #0]
    4be8:	009b      	lsls	r3, r3, #2
    4bea:	2210      	movs	r2, #16
    4bec:	4694      	mov	ip, r2
    4bee:	44bc      	add	ip, r7
    4bf0:	4463      	add	r3, ip
    4bf2:	3b08      	subs	r3, #8
    4bf4:	681a      	ldr	r2, [r3, #0]
    4bf6:	230e      	movs	r3, #14
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	01db      	lsls	r3, r3, #7
    4bfe:	18d3      	adds	r3, r2, r3
    4c00:	e000      	b.n	4c04 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4c02:	2300      	movs	r3, #0
	}
}
    4c04:	1c18      	adds	r0, r3, #0
    4c06:	46bd      	mov	sp, r7
    4c08:	b004      	add	sp, #16
    4c0a:	bd80      	pop	{r7, pc}
    4c0c:	41004400 	.word	0x41004400

00004c10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4c10:	b580      	push	{r7, lr}
    4c12:	b088      	sub	sp, #32
    4c14:	af00      	add	r7, sp, #0
    4c16:	60f8      	str	r0, [r7, #12]
    4c18:	60b9      	str	r1, [r7, #8]
    4c1a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4c1c:	2300      	movs	r3, #0
    4c1e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	78db      	ldrb	r3, [r3, #3]
    4c24:	2201      	movs	r2, #1
    4c26:	4053      	eors	r3, r2
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d035      	beq.n	4c9a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	781b      	ldrb	r3, [r3, #0]
    4c32:	2b80      	cmp	r3, #128	; 0x80
    4c34:	d00b      	beq.n	4c4e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4c36:	69fb      	ldr	r3, [r7, #28]
    4c38:	2280      	movs	r2, #128	; 0x80
    4c3a:	0252      	lsls	r2, r2, #9
    4c3c:	4313      	orrs	r3, r2
    4c3e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	781b      	ldrb	r3, [r3, #0]
    4c44:	061b      	lsls	r3, r3, #24
    4c46:	1c1a      	adds	r2, r3, #0
    4c48:	69fb      	ldr	r3, [r7, #28]
    4c4a:	4313      	orrs	r3, r2
    4c4c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	785b      	ldrb	r3, [r3, #1]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d003      	beq.n	4c5e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c5a:	2b02      	cmp	r3, #2
    4c5c:	d110      	bne.n	4c80 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4c5e:	69fb      	ldr	r3, [r7, #28]
    4c60:	2280      	movs	r2, #128	; 0x80
    4c62:	0292      	lsls	r2, r2, #10
    4c64:	4313      	orrs	r3, r2
    4c66:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	789b      	ldrb	r3, [r3, #2]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d004      	beq.n	4c7a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4c70:	69fb      	ldr	r3, [r7, #28]
    4c72:	2280      	movs	r2, #128	; 0x80
    4c74:	02d2      	lsls	r2, r2, #11
    4c76:	4313      	orrs	r3, r2
    4c78:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4c7a:	68fb      	ldr	r3, [r7, #12]
    4c7c:	68ba      	ldr	r2, [r7, #8]
    4c7e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	785b      	ldrb	r3, [r3, #1]
    4c84:	2b01      	cmp	r3, #1
    4c86:	d003      	beq.n	4c90 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c8c:	2b02      	cmp	r3, #2
    4c8e:	d107      	bne.n	4ca0 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4c90:	69fb      	ldr	r3, [r7, #28]
    4c92:	4a21      	ldr	r2, [pc, #132]	; (4d18 <_system_pinmux_config+0x108>)
    4c94:	4013      	ands	r3, r2
    4c96:	61fb      	str	r3, [r7, #28]
    4c98:	e002      	b.n	4ca0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4c9a:	68fb      	ldr	r3, [r7, #12]
    4c9c:	68ba      	ldr	r2, [r7, #8]
    4c9e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4ca0:	68bb      	ldr	r3, [r7, #8]
    4ca2:	041b      	lsls	r3, r3, #16
    4ca4:	0c1b      	lsrs	r3, r3, #16
    4ca6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4ca8:	68bb      	ldr	r3, [r7, #8]
    4caa:	0c1b      	lsrs	r3, r3, #16
    4cac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cae:	69ba      	ldr	r2, [r7, #24]
    4cb0:	69fb      	ldr	r3, [r7, #28]
    4cb2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4cb4:	22a0      	movs	r2, #160	; 0xa0
    4cb6:	05d2      	lsls	r2, r2, #23
    4cb8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cbe:	697a      	ldr	r2, [r7, #20]
    4cc0:	69fb      	ldr	r3, [r7, #28]
    4cc2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4cc4:	22d0      	movs	r2, #208	; 0xd0
    4cc6:	0612      	lsls	r2, r2, #24
    4cc8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	78db      	ldrb	r3, [r3, #3]
    4cd2:	2201      	movs	r2, #1
    4cd4:	4053      	eors	r3, r2
    4cd6:	b2db      	uxtb	r3, r3
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d01a      	beq.n	4d12 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4cdc:	69fa      	ldr	r2, [r7, #28]
    4cde:	2380      	movs	r3, #128	; 0x80
    4ce0:	02db      	lsls	r3, r3, #11
    4ce2:	4013      	ands	r3, r2
    4ce4:	d00a      	beq.n	4cfc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	789b      	ldrb	r3, [r3, #2]
    4cea:	2b01      	cmp	r3, #1
    4cec:	d103      	bne.n	4cf6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	68ba      	ldr	r2, [r7, #8]
    4cf2:	619a      	str	r2, [r3, #24]
    4cf4:	e002      	b.n	4cfc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	68ba      	ldr	r2, [r7, #8]
    4cfa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	785b      	ldrb	r3, [r3, #1]
    4d00:	2b01      	cmp	r3, #1
    4d02:	d003      	beq.n	4d0c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d08:	2b02      	cmp	r3, #2
    4d0a:	d102      	bne.n	4d12 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4d0c:	68fb      	ldr	r3, [r7, #12]
    4d0e:	68ba      	ldr	r2, [r7, #8]
    4d10:	609a      	str	r2, [r3, #8]
		}
	}
}
    4d12:	46bd      	mov	sp, r7
    4d14:	b008      	add	sp, #32
    4d16:	bd80      	pop	{r7, pc}
    4d18:	fffbffff 	.word	0xfffbffff

00004d1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	b084      	sub	sp, #16
    4d20:	af00      	add	r7, sp, #0
    4d22:	1c02      	adds	r2, r0, #0
    4d24:	6039      	str	r1, [r7, #0]
    4d26:	1dfb      	adds	r3, r7, #7
    4d28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4d2a:	1dfb      	adds	r3, r7, #7
    4d2c:	781b      	ldrb	r3, [r3, #0]
    4d2e:	1c18      	adds	r0, r3, #0
    4d30:	4b0b      	ldr	r3, [pc, #44]	; (4d60 <system_pinmux_pin_set_config+0x44>)
    4d32:	4798      	blx	r3
    4d34:	1c03      	adds	r3, r0, #0
    4d36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4d38:	1dfb      	adds	r3, r7, #7
    4d3a:	781b      	ldrb	r3, [r3, #0]
    4d3c:	221f      	movs	r2, #31
    4d3e:	4013      	ands	r3, r2
    4d40:	2201      	movs	r2, #1
    4d42:	409a      	lsls	r2, r3
    4d44:	1c13      	adds	r3, r2, #0
    4d46:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4d48:	68f9      	ldr	r1, [r7, #12]
    4d4a:	68ba      	ldr	r2, [r7, #8]
    4d4c:	683b      	ldr	r3, [r7, #0]
    4d4e:	1c08      	adds	r0, r1, #0
    4d50:	1c11      	adds	r1, r2, #0
    4d52:	1c1a      	adds	r2, r3, #0
    4d54:	4b03      	ldr	r3, [pc, #12]	; (4d64 <system_pinmux_pin_set_config+0x48>)
    4d56:	4798      	blx	r3
}
    4d58:	46bd      	mov	sp, r7
    4d5a:	b004      	add	sp, #16
    4d5c:	bd80      	pop	{r7, pc}
    4d5e:	46c0      	nop			; (mov r8, r8)
    4d60:	00004bb1 	.word	0x00004bb1
    4d64:	00004c11 	.word	0x00004c11

00004d68 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4d68:	b580      	push	{r7, lr}
    4d6a:	af00      	add	r7, sp, #0
	return;
    4d6c:	46c0      	nop			; (mov r8, r8)
}
    4d6e:	46bd      	mov	sp, r7
    4d70:	bd80      	pop	{r7, pc}
    4d72:	46c0      	nop			; (mov r8, r8)

00004d74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4d74:	b580      	push	{r7, lr}
    4d76:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4d78:	4b05      	ldr	r3, [pc, #20]	; (4d90 <system_init+0x1c>)
    4d7a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4d7c:	4b05      	ldr	r3, [pc, #20]	; (4d94 <system_init+0x20>)
    4d7e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4d80:	4b05      	ldr	r3, [pc, #20]	; (4d98 <system_init+0x24>)
    4d82:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4d84:	4b05      	ldr	r3, [pc, #20]	; (4d9c <system_init+0x28>)
    4d86:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4d88:	4b05      	ldr	r3, [pc, #20]	; (4da0 <system_init+0x2c>)
    4d8a:	4798      	blx	r3
}
    4d8c:	46bd      	mov	sp, r7
    4d8e:	bd80      	pop	{r7, pc}
    4d90:	0000457d 	.word	0x0000457d
    4d94:	0000407d 	.word	0x0000407d
    4d98:	00004d69 	.word	0x00004d69
    4d9c:	00000271 	.word	0x00000271
    4da0:	00004d69 	.word	0x00004d69

00004da4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4da4:	b580      	push	{r7, lr}
    4da6:	b082      	sub	sp, #8
    4da8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4daa:	4b2f      	ldr	r3, [pc, #188]	; (4e68 <Reset_Handler+0xc4>)
    4dac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4dae:	4b2f      	ldr	r3, [pc, #188]	; (4e6c <Reset_Handler+0xc8>)
    4db0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4db2:	687a      	ldr	r2, [r7, #4]
    4db4:	683b      	ldr	r3, [r7, #0]
    4db6:	429a      	cmp	r2, r3
    4db8:	d00c      	beq.n	4dd4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4dba:	e007      	b.n	4dcc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4dbc:	683b      	ldr	r3, [r7, #0]
    4dbe:	1d1a      	adds	r2, r3, #4
    4dc0:	603a      	str	r2, [r7, #0]
    4dc2:	687a      	ldr	r2, [r7, #4]
    4dc4:	1d11      	adds	r1, r2, #4
    4dc6:	6079      	str	r1, [r7, #4]
    4dc8:	6812      	ldr	r2, [r2, #0]
    4dca:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4dcc:	683a      	ldr	r2, [r7, #0]
    4dce:	4b28      	ldr	r3, [pc, #160]	; (4e70 <Reset_Handler+0xcc>)
    4dd0:	429a      	cmp	r2, r3
    4dd2:	d3f3      	bcc.n	4dbc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4dd4:	4b27      	ldr	r3, [pc, #156]	; (4e74 <Reset_Handler+0xd0>)
    4dd6:	603b      	str	r3, [r7, #0]
    4dd8:	e004      	b.n	4de4 <Reset_Handler+0x40>
                *pDest++ = 0;
    4dda:	683b      	ldr	r3, [r7, #0]
    4ddc:	1d1a      	adds	r2, r3, #4
    4dde:	603a      	str	r2, [r7, #0]
    4de0:	2200      	movs	r2, #0
    4de2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4de4:	683a      	ldr	r2, [r7, #0]
    4de6:	4b24      	ldr	r3, [pc, #144]	; (4e78 <Reset_Handler+0xd4>)
    4de8:	429a      	cmp	r2, r3
    4dea:	d3f6      	bcc.n	4dda <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4dec:	4b23      	ldr	r3, [pc, #140]	; (4e7c <Reset_Handler+0xd8>)
    4dee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4df0:	4b23      	ldr	r3, [pc, #140]	; (4e80 <Reset_Handler+0xdc>)
    4df2:	687a      	ldr	r2, [r7, #4]
    4df4:	21ff      	movs	r1, #255	; 0xff
    4df6:	438a      	bics	r2, r1
    4df8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4dfa:	4a22      	ldr	r2, [pc, #136]	; (4e84 <Reset_Handler+0xe0>)
    4dfc:	2390      	movs	r3, #144	; 0x90
    4dfe:	005b      	lsls	r3, r3, #1
    4e00:	2102      	movs	r1, #2
    4e02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e04:	4b20      	ldr	r3, [pc, #128]	; (4e88 <Reset_Handler+0xe4>)
    4e06:	78da      	ldrb	r2, [r3, #3]
    4e08:	2103      	movs	r1, #3
    4e0a:	438a      	bics	r2, r1
    4e0c:	1c11      	adds	r1, r2, #0
    4e0e:	2202      	movs	r2, #2
    4e10:	430a      	orrs	r2, r1
    4e12:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e14:	4b1c      	ldr	r3, [pc, #112]	; (4e88 <Reset_Handler+0xe4>)
    4e16:	78da      	ldrb	r2, [r3, #3]
    4e18:	210c      	movs	r1, #12
    4e1a:	438a      	bics	r2, r1
    4e1c:	1c11      	adds	r1, r2, #0
    4e1e:	2208      	movs	r2, #8
    4e20:	430a      	orrs	r2, r1
    4e22:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4e24:	4b19      	ldr	r3, [pc, #100]	; (4e8c <Reset_Handler+0xe8>)
    4e26:	7b9a      	ldrb	r2, [r3, #14]
    4e28:	2130      	movs	r1, #48	; 0x30
    4e2a:	438a      	bics	r2, r1
    4e2c:	1c11      	adds	r1, r2, #0
    4e2e:	2220      	movs	r2, #32
    4e30:	430a      	orrs	r2, r1
    4e32:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4e34:	4b15      	ldr	r3, [pc, #84]	; (4e8c <Reset_Handler+0xe8>)
    4e36:	7b9a      	ldrb	r2, [r3, #14]
    4e38:	210c      	movs	r1, #12
    4e3a:	438a      	bics	r2, r1
    4e3c:	1c11      	adds	r1, r2, #0
    4e3e:	2208      	movs	r2, #8
    4e40:	430a      	orrs	r2, r1
    4e42:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4e44:	4b11      	ldr	r3, [pc, #68]	; (4e8c <Reset_Handler+0xe8>)
    4e46:	7b9a      	ldrb	r2, [r3, #14]
    4e48:	2103      	movs	r1, #3
    4e4a:	438a      	bics	r2, r1
    4e4c:	1c11      	adds	r1, r2, #0
    4e4e:	2202      	movs	r2, #2
    4e50:	430a      	orrs	r2, r1
    4e52:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e54:	4b0e      	ldr	r3, [pc, #56]	; (4e90 <Reset_Handler+0xec>)
    4e56:	685a      	ldr	r2, [r3, #4]
    4e58:	2180      	movs	r1, #128	; 0x80
    4e5a:	430a      	orrs	r2, r1
    4e5c:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    4e5e:	4b0d      	ldr	r3, [pc, #52]	; (4e94 <Reset_Handler+0xf0>)
    4e60:	4798      	blx	r3

        /* Branch to main function */
        main();
    4e62:	4b0d      	ldr	r3, [pc, #52]	; (4e98 <Reset_Handler+0xf4>)
    4e64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4e66:	e7fe      	b.n	4e66 <Reset_Handler+0xc2>
    4e68:	00009164 	.word	0x00009164
    4e6c:	20000000 	.word	0x20000000
    4e70:	20000010 	.word	0x20000010
    4e74:	20000010 	.word	0x20000010
    4e78:	200002b8 	.word	0x200002b8
    4e7c:	00000000 	.word	0x00000000
    4e80:	e000ed00 	.word	0xe000ed00
    4e84:	41007000 	.word	0x41007000
    4e88:	41005000 	.word	0x41005000
    4e8c:	41004800 	.word	0x41004800
    4e90:	41004000 	.word	0x41004000
    4e94:	00008f65 	.word	0x00008f65
    4e98:	00006e15 	.word	0x00006e15

00004e9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4e9c:	b580      	push	{r7, lr}
    4e9e:	af00      	add	r7, sp, #0
        while (1) {
        }
    4ea0:	e7fe      	b.n	4ea0 <Dummy_Handler+0x4>
    4ea2:	46c0      	nop			; (mov r8, r8)

00004ea4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b084      	sub	sp, #16
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	1c02      	adds	r2, r0, #0
    4eac:	1dfb      	adds	r3, r7, #7
    4eae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4eb0:	230f      	movs	r3, #15
    4eb2:	18fb      	adds	r3, r7, r3
    4eb4:	1dfa      	adds	r2, r7, #7
    4eb6:	7812      	ldrb	r2, [r2, #0]
    4eb8:	09d2      	lsrs	r2, r2, #7
    4eba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ebc:	230e      	movs	r3, #14
    4ebe:	18fb      	adds	r3, r7, r3
    4ec0:	1dfa      	adds	r2, r7, #7
    4ec2:	7812      	ldrb	r2, [r2, #0]
    4ec4:	0952      	lsrs	r2, r2, #5
    4ec6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4ec8:	4b0d      	ldr	r3, [pc, #52]	; (4f00 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4eca:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4ecc:	230f      	movs	r3, #15
    4ece:	18fb      	adds	r3, r7, r3
    4ed0:	781b      	ldrb	r3, [r3, #0]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d10f      	bne.n	4ef6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4ed6:	230f      	movs	r3, #15
    4ed8:	18fb      	adds	r3, r7, r3
    4eda:	781b      	ldrb	r3, [r3, #0]
    4edc:	009b      	lsls	r3, r3, #2
    4ede:	2210      	movs	r2, #16
    4ee0:	4694      	mov	ip, r2
    4ee2:	44bc      	add	ip, r7
    4ee4:	4463      	add	r3, ip
    4ee6:	3b08      	subs	r3, #8
    4ee8:	681a      	ldr	r2, [r3, #0]
    4eea:	230e      	movs	r3, #14
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	01db      	lsls	r3, r3, #7
    4ef2:	18d3      	adds	r3, r2, r3
    4ef4:	e000      	b.n	4ef8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4ef6:	2300      	movs	r3, #0
	}
}
    4ef8:	1c18      	adds	r0, r3, #0
    4efa:	46bd      	mov	sp, r7
    4efc:	b004      	add	sp, #16
    4efe:	bd80      	pop	{r7, pc}
    4f00:	41004400 	.word	0x41004400

00004f04 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b082      	sub	sp, #8
    4f08:	af00      	add	r7, sp, #0
    4f0a:	1c02      	adds	r2, r0, #0
    4f0c:	1dfb      	adds	r3, r7, #7
    4f0e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f10:	1dfb      	adds	r3, r7, #7
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	1c18      	adds	r0, r3, #0
    4f16:	4b03      	ldr	r3, [pc, #12]	; (4f24 <port_get_group_from_gpio_pin+0x20>)
    4f18:	4798      	blx	r3
    4f1a:	1c03      	adds	r3, r0, #0
}
    4f1c:	1c18      	adds	r0, r3, #0
    4f1e:	46bd      	mov	sp, r7
    4f20:	b002      	add	sp, #8
    4f22:	bd80      	pop	{r7, pc}
    4f24:	00004ea5 	.word	0x00004ea5

00004f28 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	2200      	movs	r2, #0
    4f34:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	2201      	movs	r2, #1
    4f3a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	2200      	movs	r2, #0
    4f40:	709a      	strb	r2, [r3, #2]
}
    4f42:	46bd      	mov	sp, r7
    4f44:	b002      	add	sp, #8
    4f46:	bd80      	pop	{r7, pc}

00004f48 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4f48:	b580      	push	{r7, lr}
    4f4a:	b084      	sub	sp, #16
    4f4c:	af00      	add	r7, sp, #0
    4f4e:	1c02      	adds	r2, r0, #0
    4f50:	1dfb      	adds	r3, r7, #7
    4f52:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f54:	1dfb      	adds	r3, r7, #7
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	1c18      	adds	r0, r3, #0
    4f5a:	4b0b      	ldr	r3, [pc, #44]	; (4f88 <port_pin_get_input_level+0x40>)
    4f5c:	4798      	blx	r3
    4f5e:	1c03      	adds	r3, r0, #0
    4f60:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f62:	1dfb      	adds	r3, r7, #7
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	221f      	movs	r2, #31
    4f68:	4013      	ands	r3, r2
    4f6a:	2201      	movs	r2, #1
    4f6c:	409a      	lsls	r2, r3
    4f6e:	1c13      	adds	r3, r2, #0
    4f70:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4f72:	68fb      	ldr	r3, [r7, #12]
    4f74:	6a1b      	ldr	r3, [r3, #32]
    4f76:	68ba      	ldr	r2, [r7, #8]
    4f78:	4013      	ands	r3, r2
    4f7a:	1e5a      	subs	r2, r3, #1
    4f7c:	4193      	sbcs	r3, r2
    4f7e:	b2db      	uxtb	r3, r3
}
    4f80:	1c18      	adds	r0, r3, #0
    4f82:	46bd      	mov	sp, r7
    4f84:	b004      	add	sp, #16
    4f86:	bd80      	pop	{r7, pc}
    4f88:	00004f05 	.word	0x00004f05

00004f8c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b084      	sub	sp, #16
    4f90:	af00      	add	r7, sp, #0
    4f92:	1c02      	adds	r2, r0, #0
    4f94:	1dfb      	adds	r3, r7, #7
    4f96:	701a      	strb	r2, [r3, #0]
    4f98:	1dbb      	adds	r3, r7, #6
    4f9a:	1c0a      	adds	r2, r1, #0
    4f9c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f9e:	1dfb      	adds	r3, r7, #7
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	1c18      	adds	r0, r3, #0
    4fa4:	4b0c      	ldr	r3, [pc, #48]	; (4fd8 <port_pin_set_output_level+0x4c>)
    4fa6:	4798      	blx	r3
    4fa8:	1c03      	adds	r3, r0, #0
    4faa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4fac:	1dfb      	adds	r3, r7, #7
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	221f      	movs	r2, #31
    4fb2:	4013      	ands	r3, r2
    4fb4:	2201      	movs	r2, #1
    4fb6:	409a      	lsls	r2, r3
    4fb8:	1c13      	adds	r3, r2, #0
    4fba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4fbc:	1dbb      	adds	r3, r7, #6
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d003      	beq.n	4fcc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	68ba      	ldr	r2, [r7, #8]
    4fc8:	619a      	str	r2, [r3, #24]
    4fca:	e002      	b.n	4fd2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4fcc:	68fb      	ldr	r3, [r7, #12]
    4fce:	68ba      	ldr	r2, [r7, #8]
    4fd0:	615a      	str	r2, [r3, #20]
	}
}
    4fd2:	46bd      	mov	sp, r7
    4fd4:	b004      	add	sp, #16
    4fd6:	bd80      	pop	{r7, pc}
    4fd8:	00004f05 	.word	0x00004f05

00004fdc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4fe0:	4b03      	ldr	r3, [pc, #12]	; (4ff0 <system_interrupt_enable_global+0x14>)
    4fe2:	2201      	movs	r2, #1
    4fe4:	701a      	strb	r2, [r3, #0]
    4fe6:	f3bf 8f5f 	dmb	sy
    4fea:	b662      	cpsie	i
}
    4fec:	46bd      	mov	sp, r7
    4fee:	bd80      	pop	{r7, pc}
    4ff0:	20000000 	.word	0x20000000

00004ff4 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    4ff4:	b580      	push	{r7, lr}
    4ff6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4ff8:	b672      	cpsid	i
    4ffa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4ffe:	4b02      	ldr	r3, [pc, #8]	; (5008 <system_interrupt_disable_global+0x14>)
    5000:	2200      	movs	r2, #0
    5002:	701a      	strb	r2, [r3, #0]
}
    5004:	46bd      	mov	sp, r7
    5006:	bd80      	pop	{r7, pc}
    5008:	20000000 	.word	0x20000000

0000500c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	1c02      	adds	r2, r0, #0
    5014:	1dfb      	adds	r3, r7, #7
    5016:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5018:	4b06      	ldr	r3, [pc, #24]	; (5034 <system_interrupt_enable+0x28>)
    501a:	1dfa      	adds	r2, r7, #7
    501c:	7812      	ldrb	r2, [r2, #0]
    501e:	1c11      	adds	r1, r2, #0
    5020:	221f      	movs	r2, #31
    5022:	400a      	ands	r2, r1
    5024:	2101      	movs	r1, #1
    5026:	4091      	lsls	r1, r2
    5028:	1c0a      	adds	r2, r1, #0
    502a:	601a      	str	r2, [r3, #0]
}
    502c:	46bd      	mov	sp, r7
    502e:	b002      	add	sp, #8
    5030:	bd80      	pop	{r7, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	e000e100 	.word	0xe000e100

00005038 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    5038:	b580      	push	{r7, lr}
    503a:	b084      	sub	sp, #16
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	22a0      	movs	r2, #160	; 0xa0
    5044:	0112      	lsls	r2, r2, #4
    5046:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	2201      	movs	r2, #1
    504c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	2200      	movs	r2, #0
    5052:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	2200      	movs	r2, #0
    5058:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    505a:	230f      	movs	r3, #15
    505c:	18fb      	adds	r3, r7, r3
    505e:	2200      	movs	r2, #0
    5060:	701a      	strb	r2, [r3, #0]
    5062:	e00e      	b.n	5082 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    5064:	230f      	movs	r3, #15
    5066:	18fb      	adds	r3, r7, r3
    5068:	781a      	ldrb	r2, [r3, #0]
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	3202      	adds	r2, #2
    506e:	0092      	lsls	r2, r2, #2
    5070:	2100      	movs	r1, #0
    5072:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5074:	230f      	movs	r3, #15
    5076:	18fb      	adds	r3, r7, r3
    5078:	781a      	ldrb	r2, [r3, #0]
    507a:	230f      	movs	r3, #15
    507c:	18fb      	adds	r3, r7, r3
    507e:	3201      	adds	r2, #1
    5080:	701a      	strb	r2, [r3, #0]
    5082:	230f      	movs	r3, #15
    5084:	18fb      	adds	r3, r7, r3
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	2b01      	cmp	r3, #1
    508a:	d9eb      	bls.n	5064 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    508c:	46bd      	mov	sp, r7
    508e:	b004      	add	sp, #16
    5090:	bd80      	pop	{r7, pc}
    5092:	46c0      	nop			; (mov r8, r8)

00005094 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    5094:	b580      	push	{r7, lr}
    5096:	b084      	sub	sp, #16
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    50a2:	68fb      	ldr	r3, [r7, #12]
    50a4:	69db      	ldr	r3, [r3, #28]
    50a6:	2207      	movs	r2, #7
    50a8:	4013      	ands	r3, r2
    50aa:	1e5a      	subs	r2, r3, #1
    50ac:	4193      	sbcs	r3, r2
    50ae:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    50b0:	1c18      	adds	r0, r3, #0
    50b2:	46bd      	mov	sp, r7
    50b4:	b004      	add	sp, #16
    50b6:	bd80      	pop	{r7, pc}

000050b8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    50b8:	b580      	push	{r7, lr}
    50ba:	b082      	sub	sp, #8
    50bc:	af00      	add	r7, sp, #0
    50be:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    50c0:	46c0      	nop			; (mov r8, r8)
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	1c18      	adds	r0, r3, #0
    50c6:	4b03      	ldr	r3, [pc, #12]	; (50d4 <_i2c_master_wait_for_sync+0x1c>)
    50c8:	4798      	blx	r3
    50ca:	1e03      	subs	r3, r0, #0
    50cc:	d1f9      	bne.n	50c2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    50ce:	46bd      	mov	sp, r7
    50d0:	b002      	add	sp, #8
    50d2:	bd80      	pop	{r7, pc}
    50d4:	00005095 	.word	0x00005095

000050d8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b082      	sub	sp, #8
    50dc:	af00      	add	r7, sp, #0
    50de:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	2264      	movs	r2, #100	; 0x64
    50e4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	4a1a      	ldr	r2, [pc, #104]	; (5154 <i2c_master_get_config_defaults+0x7c>)
    50ea:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	2200      	movs	r2, #0
    50f0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	2200      	movs	r2, #0
    50f6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	2200      	movs	r2, #0
    50fc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	2280      	movs	r2, #128	; 0x80
    5102:	0392      	lsls	r2, r2, #14
    5104:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	2201      	movs	r2, #1
    510a:	4252      	negs	r2, r2
    510c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    510e:	687b      	ldr	r3, [r7, #4]
    5110:	2201      	movs	r2, #1
    5112:	4252      	negs	r2, r2
    5114:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5116:	687b      	ldr	r3, [r7, #4]
    5118:	2200      	movs	r2, #0
    511a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	2200      	movs	r2, #0
    5120:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    5122:	687b      	ldr	r3, [r7, #4]
    5124:	2224      	movs	r2, #36	; 0x24
    5126:	2100      	movs	r1, #0
    5128:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	2200      	movs	r2, #0
    512e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	222c      	movs	r2, #44	; 0x2c
    5134:	2100      	movs	r1, #0
    5136:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	222d      	movs	r2, #45	; 0x2d
    513c:	2100      	movs	r1, #0
    513e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	222e      	movs	r2, #46	; 0x2e
    5144:	2100      	movs	r1, #0
    5146:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	22d7      	movs	r2, #215	; 0xd7
    514c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    514e:	46bd      	mov	sp, r7
    5150:	b002      	add	sp, #8
    5152:	bd80      	pop	{r7, pc}
    5154:	00000d48 	.word	0x00000d48

00005158 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    5158:	b580      	push	{r7, lr}
    515a:	b084      	sub	sp, #16
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	681b      	ldr	r3, [r3, #0]
    5164:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    5166:	2300      	movs	r3, #0
    5168:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	1c18      	adds	r0, r3, #0
    516e:	4b14      	ldr	r3, [pc, #80]	; (51c0 <i2c_master_enable+0x68>)
    5170:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5172:	68bb      	ldr	r3, [r7, #8]
    5174:	681b      	ldr	r3, [r3, #0]
    5176:	2202      	movs	r2, #2
    5178:	431a      	orrs	r2, r3
    517a:	68bb      	ldr	r3, [r7, #8]
    517c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	1c18      	adds	r0, r3, #0
    5184:	4b0f      	ldr	r3, [pc, #60]	; (51c4 <i2c_master_enable+0x6c>)
    5186:	4798      	blx	r3
    5188:	1c03      	adds	r3, r0, #0
    518a:	1c18      	adds	r0, r3, #0
    518c:	4b0e      	ldr	r3, [pc, #56]	; (51c8 <i2c_master_enable+0x70>)
    518e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5190:	e00c      	b.n	51ac <i2c_master_enable+0x54>
		timeout_counter++;
    5192:	68fb      	ldr	r3, [r7, #12]
    5194:	3301      	adds	r3, #1
    5196:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	88db      	ldrh	r3, [r3, #6]
    519c:	1e1a      	subs	r2, r3, #0
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	429a      	cmp	r2, r3
    51a2:	d803      	bhi.n	51ac <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    51a4:	68bb      	ldr	r3, [r7, #8]
    51a6:	2210      	movs	r2, #16
    51a8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    51aa:	e006      	b.n	51ba <i2c_master_enable+0x62>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    51ac:	68bb      	ldr	r3, [r7, #8]
    51ae:	8b5b      	ldrh	r3, [r3, #26]
    51b0:	b29b      	uxth	r3, r3
    51b2:	1c1a      	adds	r2, r3, #0
    51b4:	2310      	movs	r3, #16
    51b6:	4013      	ands	r3, r2
    51b8:	d0eb      	beq.n	5192 <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    51ba:	46bd      	mov	sp, r7
    51bc:	b004      	add	sp, #16
    51be:	bd80      	pop	{r7, pc}
    51c0:	000050b9 	.word	0x000050b9
    51c4:	00003f2d 	.word	0x00003f2d
    51c8:	0000500d 	.word	0x0000500d

000051cc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    51cc:	b580      	push	{r7, lr}
    51ce:	b084      	sub	sp, #16
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	681b      	ldr	r3, [r3, #0]
    51d8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    51da:	68fb      	ldr	r3, [r7, #12]
    51dc:	69db      	ldr	r3, [r3, #28]
    51de:	1e5a      	subs	r2, r3, #1
    51e0:	4193      	sbcs	r3, r2
    51e2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    51e4:	1c18      	adds	r0, r3, #0
    51e6:	46bd      	mov	sp, r7
    51e8:	b004      	add	sp, #16
    51ea:	bd80      	pop	{r7, pc}

000051ec <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b082      	sub	sp, #8
    51f0:	af00      	add	r7, sp, #0
    51f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	2201      	movs	r2, #1
    51f8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	2200      	movs	r2, #0
    51fe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	2200      	movs	r2, #0
    5204:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	22c0      	movs	r2, #192	; 0xc0
    520a:	0392      	lsls	r2, r2, #14
    520c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	2200      	movs	r2, #0
    5212:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	2200      	movs	r2, #0
    5218:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	2201      	movs	r2, #1
    521e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	2201      	movs	r2, #1
    5224:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	2200      	movs	r2, #0
    522a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	2224      	movs	r2, #36	; 0x24
    5230:	2100      	movs	r1, #0
    5232:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5234:	687b      	ldr	r3, [r7, #4]
    5236:	3318      	adds	r3, #24
    5238:	1c18      	adds	r0, r3, #0
    523a:	2100      	movs	r1, #0
    523c:	220c      	movs	r2, #12
    523e:	4b0a      	ldr	r3, [pc, #40]	; (5268 <spi_get_config_defaults+0x7c>)
    5240:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	4a09      	ldr	r2, [pc, #36]	; (526c <spi_get_config_defaults+0x80>)
    5246:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	2200      	movs	r2, #0
    524c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	2200      	movs	r2, #0
    5252:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	2200      	movs	r2, #0
    5258:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	2200      	movs	r2, #0
    525e:	635a      	str	r2, [r3, #52]	; 0x34

};
    5260:	46bd      	mov	sp, r7
    5262:	b002      	add	sp, #8
    5264:	bd80      	pop	{r7, pc}
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	00008fc3 	.word	0x00008fc3
    526c:	000186a0 	.word	0x000186a0

00005270 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    5270:	b580      	push	{r7, lr}
    5272:	b082      	sub	sp, #8
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	220a      	movs	r2, #10
    527c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	2200      	movs	r2, #0
    5282:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	2200      	movs	r2, #0
    5288:	709a      	strb	r2, [r3, #2]
}
    528a:	46bd      	mov	sp, r7
    528c:	b002      	add	sp, #8
    528e:	bd80      	pop	{r7, pc}

00005290 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    5290:	b580      	push	{r7, lr}
    5292:	b084      	sub	sp, #16
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
    5298:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    529a:	683b      	ldr	r3, [r7, #0]
    529c:	781a      	ldrb	r2, [r3, #0]
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	785a      	ldrb	r2, [r3, #1]
    52a6:	687b      	ldr	r3, [r7, #4]
    52a8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	789a      	ldrb	r2, [r3, #2]
    52ae:	687b      	ldr	r3, [r7, #4]
    52b0:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    52b2:	230c      	movs	r3, #12
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	1c18      	adds	r0, r3, #0
    52b8:	4b0b      	ldr	r3, [pc, #44]	; (52e8 <spi_attach_slave+0x58>)
    52ba:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    52bc:	230c      	movs	r3, #12
    52be:	18fb      	adds	r3, r7, r3
    52c0:	2201      	movs	r2, #1
    52c2:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	781a      	ldrb	r2, [r3, #0]
    52c8:	230c      	movs	r3, #12
    52ca:	18fb      	adds	r3, r7, r3
    52cc:	1c10      	adds	r0, r2, #0
    52ce:	1c19      	adds	r1, r3, #0
    52d0:	4b06      	ldr	r3, [pc, #24]	; (52ec <spi_attach_slave+0x5c>)
    52d2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	1c18      	adds	r0, r3, #0
    52da:	2101      	movs	r1, #1
    52dc:	4b04      	ldr	r3, [pc, #16]	; (52f0 <spi_attach_slave+0x60>)
    52de:	4798      	blx	r3
}
    52e0:	46bd      	mov	sp, r7
    52e2:	b004      	add	sp, #16
    52e4:	bd80      	pop	{r7, pc}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	00004f29 	.word	0x00004f29
    52ec:	00004021 	.word	0x00004021
    52f0:	00004f8d 	.word	0x00004f8d

000052f4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    52f4:	b580      	push	{r7, lr}
    52f6:	b084      	sub	sp, #16
    52f8:	af00      	add	r7, sp, #0
    52fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	681b      	ldr	r3, [r3, #0]
    5300:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	1c18      	adds	r0, r3, #0
    5308:	4b0a      	ldr	r3, [pc, #40]	; (5334 <spi_enable+0x40>)
    530a:	4798      	blx	r3
    530c:	1c03      	adds	r3, r0, #0
    530e:	1c18      	adds	r0, r3, #0
    5310:	4b09      	ldr	r3, [pc, #36]	; (5338 <spi_enable+0x44>)
    5312:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    5314:	46c0      	nop			; (mov r8, r8)
    5316:	687b      	ldr	r3, [r7, #4]
    5318:	1c18      	adds	r0, r3, #0
    531a:	4b08      	ldr	r3, [pc, #32]	; (533c <spi_enable+0x48>)
    531c:	4798      	blx	r3
    531e:	1e03      	subs	r3, r0, #0
    5320:	d1f9      	bne.n	5316 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5322:	68fb      	ldr	r3, [r7, #12]
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	2202      	movs	r2, #2
    5328:	431a      	orrs	r2, r3
    532a:	68fb      	ldr	r3, [r7, #12]
    532c:	601a      	str	r2, [r3, #0]
}
    532e:	46bd      	mov	sp, r7
    5330:	b004      	add	sp, #16
    5332:	bd80      	pop	{r7, pc}
    5334:	00003f2d 	.word	0x00003f2d
    5338:	0000500d 	.word	0x0000500d
    533c:	000051cd 	.word	0x000051cd

00005340 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    5340:	b580      	push	{r7, lr}
    5342:	b084      	sub	sp, #16
    5344:	af00      	add	r7, sp, #0
    5346:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	68fb      	ldr	r3, [r7, #12]
    5352:	689b      	ldr	r3, [r3, #8]
    5354:	2202      	movs	r2, #2
    5356:	4013      	ands	r3, r2
    5358:	d1fa      	bne.n	5350 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    535a:	68fb      	ldr	r3, [r7, #12]
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	2202      	movs	r2, #2
    5360:	431a      	orrs	r2, r3
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	601a      	str	r2, [r3, #0]
}
    5366:	46bd      	mov	sp, r7
    5368:	b004      	add	sp, #16
    536a:	bd80      	pop	{r7, pc}

0000536c <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    536c:	b580      	push	{r7, lr}
    536e:	b082      	sub	sp, #8
    5370:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    5372:	1d3b      	adds	r3, r7, #4
    5374:	1c18      	adds	r0, r3, #0
    5376:	4b06      	ldr	r3, [pc, #24]	; (5390 <configure_port_pins+0x24>)
    5378:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    537a:	1d3b      	adds	r3, r7, #4
    537c:	2200      	movs	r2, #0
    537e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    5380:	1d3b      	adds	r3, r7, #4
    5382:	2003      	movs	r0, #3
    5384:	1c19      	adds	r1, r3, #0
    5386:	4b03      	ldr	r3, [pc, #12]	; (5394 <configure_port_pins+0x28>)
    5388:	4798      	blx	r3
}
    538a:	46bd      	mov	sp, r7
    538c:	b002      	add	sp, #8
    538e:	bd80      	pop	{r7, pc}
    5390:	00004f29 	.word	0x00004f29
    5394:	00004021 	.word	0x00004021

00005398 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    5398:	b580      	push	{r7, lr}
    539a:	b084      	sub	sp, #16
    539c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    539e:	1d3b      	adds	r3, r7, #4
    53a0:	1c18      	adds	r0, r3, #0
    53a2:	4b0b      	ldr	r3, [pc, #44]	; (53d0 <configure_extint_channel+0x38>)
    53a4:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    53a6:	1d3b      	adds	r3, r7, #4
    53a8:	2203      	movs	r2, #3
    53aa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    53ac:	1d3b      	adds	r3, r7, #4
    53ae:	2200      	movs	r2, #0
    53b0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    53b2:	1d3b      	adds	r3, r7, #4
    53b4:	2201      	movs	r2, #1
    53b6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    53b8:	1d3b      	adds	r3, r7, #4
    53ba:	2201      	movs	r2, #1
    53bc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    53be:	1d3b      	adds	r3, r7, #4
    53c0:	2003      	movs	r0, #3
    53c2:	1c19      	adds	r1, r3, #0
    53c4:	4b03      	ldr	r3, [pc, #12]	; (53d4 <configure_extint_channel+0x3c>)
    53c6:	4798      	blx	r3
}
    53c8:	46bd      	mov	sp, r7
    53ca:	b004      	add	sp, #16
    53cc:	bd80      	pop	{r7, pc}
    53ce:	46c0      	nop			; (mov r8, r8)
    53d0:	000003ad 	.word	0x000003ad
    53d4:	000003e1 	.word	0x000003e1

000053d8 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    53d8:	b580      	push	{r7, lr}
    53da:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    53dc:	4b05      	ldr	r3, [pc, #20]	; (53f4 <configure_extint_callbacks+0x1c>)
    53de:	1c18      	adds	r0, r3, #0
    53e0:	2103      	movs	r1, #3
    53e2:	2200      	movs	r2, #0
    53e4:	4b04      	ldr	r3, [pc, #16]	; (53f8 <configure_extint_callbacks+0x20>)
    53e6:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    53e8:	2003      	movs	r0, #3
    53ea:	2100      	movs	r1, #0
    53ec:	4b03      	ldr	r3, [pc, #12]	; (53fc <configure_extint_callbacks+0x24>)
    53ee:	4798      	blx	r3
}
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}
    53f4:	00005f35 	.word	0x00005f35
    53f8:	00000ed1 	.word	0x00000ed1
    53fc:	00000f35 	.word	0x00000f35

00005400 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    5400:	b580      	push	{r7, lr}
    5402:	b090      	sub	sp, #64	; 0x40
    5404:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    5406:	1d3b      	adds	r3, r7, #4
    5408:	1c18      	adds	r0, r3, #0
    540a:	4b22      	ldr	r3, [pc, #136]	; (5494 <configure_RFM69_spi+0x94>)
    540c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    540e:	1d3b      	adds	r3, r7, #4
    5410:	2212      	movs	r2, #18
    5412:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    5414:	4a20      	ldr	r2, [pc, #128]	; (5498 <configure_RFM69_spi+0x98>)
    5416:	1d3b      	adds	r3, r7, #4
    5418:	1c10      	adds	r0, r2, #0
    541a:	1c19      	adds	r1, r3, #0
    541c:	4b1f      	ldr	r3, [pc, #124]	; (549c <configure_RFM69_spi+0x9c>)
    541e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    5420:	2308      	movs	r3, #8
    5422:	18fb      	adds	r3, r7, r3
    5424:	1c18      	adds	r0, r3, #0
    5426:	4b1e      	ldr	r3, [pc, #120]	; (54a0 <configure_RFM69_spi+0xa0>)
    5428:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    542a:	2308      	movs	r3, #8
    542c:	18fb      	adds	r3, r7, r3
    542e:	22c0      	movs	r2, #192	; 0xc0
    5430:	0392      	lsls	r2, r2, #14
    5432:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    5434:	2308      	movs	r3, #8
    5436:	18fb      	adds	r3, r7, r3
    5438:	4a1a      	ldr	r2, [pc, #104]	; (54a4 <configure_RFM69_spi+0xa4>)
    543a:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    543c:	2308      	movs	r3, #8
    543e:	18fb      	adds	r3, r7, r3
    5440:	4a19      	ldr	r2, [pc, #100]	; (54a8 <configure_RFM69_spi+0xa8>)
    5442:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    5444:	2308      	movs	r3, #8
    5446:	18fb      	adds	r3, r7, r3
    5448:	2201      	movs	r2, #1
    544a:	4252      	negs	r2, r2
    544c:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    544e:	2308      	movs	r3, #8
    5450:	18fb      	adds	r3, r7, r3
    5452:	4a16      	ldr	r2, [pc, #88]	; (54ac <configure_RFM69_spi+0xac>)
    5454:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    5456:	2308      	movs	r3, #8
    5458:	18fb      	adds	r3, r7, r3
    545a:	2200      	movs	r2, #0
    545c:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    545e:	2308      	movs	r3, #8
    5460:	18fb      	adds	r3, r7, r3
    5462:	2200      	movs	r2, #0
    5464:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    5466:	4a12      	ldr	r2, [pc, #72]	; (54b0 <configure_RFM69_spi+0xb0>)
    5468:	4912      	ldr	r1, [pc, #72]	; (54b4 <configure_RFM69_spi+0xb4>)
    546a:	2308      	movs	r3, #8
    546c:	18fb      	adds	r3, r7, r3
    546e:	1c10      	adds	r0, r2, #0
    5470:	1c1a      	adds	r2, r3, #0
    5472:	4b11      	ldr	r3, [pc, #68]	; (54b8 <configure_RFM69_spi+0xb8>)
    5474:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    5476:	4b0e      	ldr	r3, [pc, #56]	; (54b0 <configure_RFM69_spi+0xb0>)
    5478:	1c18      	adds	r0, r3, #0
    547a:	4b10      	ldr	r3, [pc, #64]	; (54bc <configure_RFM69_spi+0xbc>)
    547c:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    547e:	4a0c      	ldr	r2, [pc, #48]	; (54b0 <configure_RFM69_spi+0xb0>)
    5480:	4b05      	ldr	r3, [pc, #20]	; (5498 <configure_RFM69_spi+0x98>)
    5482:	1c10      	adds	r0, r2, #0
    5484:	1c19      	adds	r1, r3, #0
    5486:	2200      	movs	r2, #0
    5488:	4b0d      	ldr	r3, [pc, #52]	; (54c0 <configure_RFM69_spi+0xc0>)
    548a:	4798      	blx	r3
}
    548c:	46bd      	mov	sp, r7
    548e:	b010      	add	sp, #64	; 0x40
    5490:	bd80      	pop	{r7, pc}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	00005271 	.word	0x00005271
    5498:	200002b4 	.word	0x200002b4
    549c:	00005291 	.word	0x00005291
    54a0:	000051ed 	.word	0x000051ed
    54a4:	00100002 	.word	0x00100002
    54a8:	00110002 	.word	0x00110002
    54ac:	00130002 	.word	0x00130002
    54b0:	20000234 	.word	0x20000234
    54b4:	42000c00 	.word	0x42000c00
    54b8:	00003359 	.word	0x00003359
    54bc:	000052f5 	.word	0x000052f5
    54c0:	00003645 	.word	0x00003645

000054c4 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    54c4:	b580      	push	{r7, lr}
    54c6:	b084      	sub	sp, #16
    54c8:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    54ca:	1c3b      	adds	r3, r7, #0
    54cc:	1c18      	adds	r0, r3, #0
    54ce:	4b0f      	ldr	r3, [pc, #60]	; (550c <configure_rtc_count+0x48>)
    54d0:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    54d2:	1c3b      	adds	r3, r7, #0
    54d4:	2200      	movs	r2, #0
    54d6:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    54d8:	1c3b      	adds	r3, r7, #0
    54da:	2200      	movs	r2, #0
    54dc:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    54de:	1c3b      	adds	r3, r7, #0
    54e0:	2201      	movs	r2, #1
    54e2:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    54e4:	4a0a      	ldr	r2, [pc, #40]	; (5510 <configure_rtc_count+0x4c>)
    54e6:	490b      	ldr	r1, [pc, #44]	; (5514 <configure_rtc_count+0x50>)
    54e8:	1c3b      	adds	r3, r7, #0
    54ea:	1c10      	adds	r0, r2, #0
    54ec:	1c1a      	adds	r2, r3, #0
    54ee:	4b0a      	ldr	r3, [pc, #40]	; (5518 <configure_rtc_count+0x54>)
    54f0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    54f2:	4b07      	ldr	r3, [pc, #28]	; (5510 <configure_rtc_count+0x4c>)
    54f4:	1c18      	adds	r0, r3, #0
    54f6:	4b09      	ldr	r3, [pc, #36]	; (551c <configure_rtc_count+0x58>)
    54f8:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    54fa:	4b05      	ldr	r3, [pc, #20]	; (5510 <configure_rtc_count+0x4c>)
    54fc:	4a08      	ldr	r2, [pc, #32]	; (5520 <configure_rtc_count+0x5c>)
    54fe:	1c18      	adds	r0, r3, #0
    5500:	1c11      	adds	r1, r2, #0
    5502:	4b08      	ldr	r3, [pc, #32]	; (5524 <configure_rtc_count+0x60>)
    5504:	4798      	blx	r3
}
    5506:	46bd      	mov	sp, r7
    5508:	b004      	add	sp, #16
    550a:	bd80      	pop	{r7, pc}
    550c:	00005039 	.word	0x00005039
    5510:	20000118 	.word	0x20000118
    5514:	40001400 	.word	0x40001400
    5518:	000007dd 	.word	0x000007dd
    551c:	000005d5 	.word	0x000005d5
    5520:	00002710 	.word	0x00002710
    5524:	000009c1 	.word	0x000009c1

00005528 <reset_millis>:

void reset_millis(void)
{
    5528:	b580      	push	{r7, lr}
    552a:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    552c:	4b05      	ldr	r3, [pc, #20]	; (5544 <reset_millis+0x1c>)
    552e:	1c18      	adds	r0, r3, #0
    5530:	2100      	movs	r1, #0
    5532:	4b05      	ldr	r3, [pc, #20]	; (5548 <reset_millis+0x20>)
    5534:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    5536:	4b03      	ldr	r3, [pc, #12]	; (5544 <reset_millis+0x1c>)
    5538:	1c18      	adds	r0, r3, #0
    553a:	4b04      	ldr	r3, [pc, #16]	; (554c <reset_millis+0x24>)
    553c:	4798      	blx	r3
}
    553e:	46bd      	mov	sp, r7
    5540:	bd80      	pop	{r7, pc}
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	20000118 	.word	0x20000118
    5548:	0000086d 	.word	0x0000086d
    554c:	000005d5 	.word	0x000005d5

00005550 <millis>:

uint32_t millis(void)
{
    5550:	b580      	push	{r7, lr}
    5552:	b082      	sub	sp, #8
    5554:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    5556:	2300      	movs	r3, #0
    5558:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    555a:	4b05      	ldr	r3, [pc, #20]	; (5570 <millis+0x20>)
    555c:	1c18      	adds	r0, r3, #0
    555e:	4b05      	ldr	r3, [pc, #20]	; (5574 <millis+0x24>)
    5560:	4798      	blx	r3
    5562:	1c03      	adds	r3, r0, #0
    5564:	607b      	str	r3, [r7, #4]
	return milli;
    5566:	687b      	ldr	r3, [r7, #4]
}
    5568:	1c18      	adds	r0, r3, #0
    556a:	46bd      	mov	sp, r7
    556c:	b002      	add	sp, #8
    556e:	bd80      	pop	{r7, pc}
    5570:	20000118 	.word	0x20000118
    5574:	000008cd 	.word	0x000008cd

00005578 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    5578:	b590      	push	{r4, r7, lr}
    557a:	b085      	sub	sp, #20
    557c:	af00      	add	r7, sp, #0
    557e:	1c04      	adds	r4, r0, #0
    5580:	6039      	str	r1, [r7, #0]
    5582:	1c10      	adds	r0, r2, #0
    5584:	1c19      	adds	r1, r3, #0
    5586:	1dfb      	adds	r3, r7, #7
    5588:	1c22      	adds	r2, r4, #0
    558a:	701a      	strb	r2, [r3, #0]
    558c:	1dbb      	adds	r3, r7, #6
    558e:	1c02      	adds	r2, r0, #0
    5590:	701a      	strb	r2, [r3, #0]
    5592:	1d7b      	adds	r3, r7, #5
    5594:	1c0a      	adds	r2, r1, #0
    5596:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    5598:	2001      	movs	r0, #1
    559a:	4b50      	ldr	r3, [pc, #320]	; (56dc <sendFrame+0x164>)
    559c:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	2027      	movs	r0, #39	; 0x27
    55a2:	4b4f      	ldr	r3, [pc, #316]	; (56e0 <sendFrame+0x168>)
    55a4:	4798      	blx	r3
    55a6:	1c03      	adds	r3, r0, #0
    55a8:	b2db      	uxtb	r3, r3
    55aa:	b25b      	sxtb	r3, r3
    55ac:	2b00      	cmp	r3, #0
    55ae:	daf7      	bge.n	55a0 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    55b0:	2025      	movs	r0, #37	; 0x25
    55b2:	2100      	movs	r1, #0
    55b4:	4b4b      	ldr	r3, [pc, #300]	; (56e4 <sendFrame+0x16c>)
    55b6:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    55b8:	1dbb      	adds	r3, r7, #6
    55ba:	781b      	ldrb	r3, [r3, #0]
    55bc:	2b3d      	cmp	r3, #61	; 0x3d
    55be:	d902      	bls.n	55c6 <sendFrame+0x4e>
    55c0:	1dbb      	adds	r3, r7, #6
    55c2:	223d      	movs	r2, #61	; 0x3d
    55c4:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    55c6:	230e      	movs	r3, #14
    55c8:	18fb      	adds	r3, r7, r3
    55ca:	2200      	movs	r2, #0
    55cc:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    55ce:	2320      	movs	r3, #32
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d004      	beq.n	55e2 <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    55d8:	230e      	movs	r3, #14
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2280      	movs	r2, #128	; 0x80
    55de:	701a      	strb	r2, [r3, #0]
    55e0:	e007      	b.n	55f2 <sendFrame+0x7a>
	else if (requestACK)
    55e2:	1d7b      	adds	r3, r7, #5
    55e4:	781b      	ldrb	r3, [r3, #0]
    55e6:	2b00      	cmp	r3, #0
    55e8:	d003      	beq.n	55f2 <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    55ea:	230e      	movs	r3, #14
    55ec:	18fb      	adds	r3, r7, r3
    55ee:	2240      	movs	r2, #64	; 0x40
    55f0:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	radioselect();
    55f2:	4b3d      	ldr	r3, [pc, #244]	; (56e8 <sendFrame+0x170>)
    55f4:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    55f6:	4a3d      	ldr	r2, [pc, #244]	; (56ec <sendFrame+0x174>)
    55f8:	4b3d      	ldr	r3, [pc, #244]	; (56f0 <sendFrame+0x178>)
    55fa:	1c10      	adds	r0, r2, #0
    55fc:	2180      	movs	r1, #128	; 0x80
    55fe:	1c1a      	adds	r2, r3, #0
    5600:	4b3c      	ldr	r3, [pc, #240]	; (56f4 <sendFrame+0x17c>)
    5602:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    5604:	1dbb      	adds	r3, r7, #6
    5606:	781b      	ldrb	r3, [r3, #0]
    5608:	b29b      	uxth	r3, r3
    560a:	3303      	adds	r3, #3
    560c:	b29a      	uxth	r2, r3
    560e:	4937      	ldr	r1, [pc, #220]	; (56ec <sendFrame+0x174>)
    5610:	4b37      	ldr	r3, [pc, #220]	; (56f0 <sendFrame+0x178>)
    5612:	1c08      	adds	r0, r1, #0
    5614:	1c11      	adds	r1, r2, #0
    5616:	1c1a      	adds	r2, r3, #0
    5618:	4b36      	ldr	r3, [pc, #216]	; (56f4 <sendFrame+0x17c>)
    561a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    561c:	1dfb      	adds	r3, r7, #7
    561e:	781b      	ldrb	r3, [r3, #0]
    5620:	b29a      	uxth	r2, r3
    5622:	4932      	ldr	r1, [pc, #200]	; (56ec <sendFrame+0x174>)
    5624:	4b32      	ldr	r3, [pc, #200]	; (56f0 <sendFrame+0x178>)
    5626:	1c08      	adds	r0, r1, #0
    5628:	1c11      	adds	r1, r2, #0
    562a:	1c1a      	adds	r2, r3, #0
    562c:	4b31      	ldr	r3, [pc, #196]	; (56f4 <sendFrame+0x17c>)
    562e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    5630:	4b31      	ldr	r3, [pc, #196]	; (56f8 <sendFrame+0x180>)
    5632:	781b      	ldrb	r3, [r3, #0]
    5634:	b2db      	uxtb	r3, r3
    5636:	b29a      	uxth	r2, r3
    5638:	492c      	ldr	r1, [pc, #176]	; (56ec <sendFrame+0x174>)
    563a:	4b2d      	ldr	r3, [pc, #180]	; (56f0 <sendFrame+0x178>)
    563c:	1c08      	adds	r0, r1, #0
    563e:	1c11      	adds	r1, r2, #0
    5640:	1c1a      	adds	r2, r3, #0
    5642:	4b2c      	ldr	r3, [pc, #176]	; (56f4 <sendFrame+0x17c>)
    5644:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    5646:	230e      	movs	r3, #14
    5648:	18fb      	adds	r3, r7, r3
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	b2db      	uxtb	r3, r3
    564e:	b29a      	uxth	r2, r3
    5650:	4926      	ldr	r1, [pc, #152]	; (56ec <sendFrame+0x174>)
    5652:	4b27      	ldr	r3, [pc, #156]	; (56f0 <sendFrame+0x178>)
    5654:	1c08      	adds	r0, r1, #0
    5656:	1c11      	adds	r1, r2, #0
    5658:	1c1a      	adds	r2, r3, #0
    565a:	4b26      	ldr	r3, [pc, #152]	; (56f4 <sendFrame+0x17c>)
    565c:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    565e:	230f      	movs	r3, #15
    5660:	18fb      	adds	r3, r7, r3
    5662:	2200      	movs	r2, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	e014      	b.n	5692 <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    5668:	230f      	movs	r3, #15
    566a:	18fb      	adds	r3, r7, r3
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	683a      	ldr	r2, [r7, #0]
    5670:	18d3      	adds	r3, r2, r3
    5672:	781b      	ldrb	r3, [r3, #0]
    5674:	b29a      	uxth	r2, r3
    5676:	491d      	ldr	r1, [pc, #116]	; (56ec <sendFrame+0x174>)
    5678:	4b1d      	ldr	r3, [pc, #116]	; (56f0 <sendFrame+0x178>)
    567a:	1c08      	adds	r0, r1, #0
    567c:	1c11      	adds	r1, r2, #0
    567e:	1c1a      	adds	r2, r3, #0
    5680:	4b1c      	ldr	r3, [pc, #112]	; (56f4 <sendFrame+0x17c>)
    5682:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    5684:	230f      	movs	r3, #15
    5686:	18fb      	adds	r3, r7, r3
    5688:	781a      	ldrb	r2, [r3, #0]
    568a:	230f      	movs	r3, #15
    568c:	18fb      	adds	r3, r7, r3
    568e:	3201      	adds	r2, #1
    5690:	701a      	strb	r2, [r3, #0]
    5692:	230f      	movs	r3, #15
    5694:	18fa      	adds	r2, r7, r3
    5696:	1dbb      	adds	r3, r7, #6
    5698:	7812      	ldrb	r2, [r2, #0]
    569a:	781b      	ldrb	r3, [r3, #0]
    569c:	429a      	cmp	r2, r3
    569e:	d3e3      	bcc.n	5668 <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    56a0:	4b16      	ldr	r3, [pc, #88]	; (56fc <sendFrame+0x184>)
    56a2:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    56a4:	2004      	movs	r0, #4
    56a6:	4b0d      	ldr	r3, [pc, #52]	; (56dc <sendFrame+0x164>)
    56a8:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    56aa:	4b15      	ldr	r3, [pc, #84]	; (5700 <sendFrame+0x188>)
    56ac:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	2003      	movs	r0, #3
    56b2:	4b14      	ldr	r3, [pc, #80]	; (5704 <sendFrame+0x18c>)
    56b4:	4798      	blx	r3
    56b6:	1c03      	adds	r3, r0, #0
    56b8:	1c1a      	adds	r2, r3, #0
    56ba:	2301      	movs	r3, #1
    56bc:	4053      	eors	r3, r2
    56be:	b2db      	uxtb	r3, r3
    56c0:	2b00      	cmp	r3, #0
    56c2:	d005      	beq.n	56d0 <sendFrame+0x158>
    56c4:	4b10      	ldr	r3, [pc, #64]	; (5708 <sendFrame+0x190>)
    56c6:	4798      	blx	r3
    56c8:	1e02      	subs	r2, r0, #0
    56ca:	4b10      	ldr	r3, [pc, #64]	; (570c <sendFrame+0x194>)
    56cc:	429a      	cmp	r2, r3
    56ce:	d9ef      	bls.n	56b0 <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    56d0:	2001      	movs	r0, #1
    56d2:	4b02      	ldr	r3, [pc, #8]	; (56dc <sendFrame+0x164>)
    56d4:	4798      	blx	r3
}
    56d6:	46bd      	mov	sp, r7
    56d8:	b005      	add	sp, #20
    56da:	bd90      	pop	{r4, r7, pc}
    56dc:	00005b31 	.word	0x00005b31
    56e0:	00006141 	.word	0x00006141
    56e4:	000061ad 	.word	0x000061ad
    56e8:	00006211 	.word	0x00006211
    56ec:	20000234 	.word	0x20000234
    56f0:	20000068 	.word	0x20000068
    56f4:	000034fd 	.word	0x000034fd
    56f8:	20000174 	.word	0x20000174
    56fc:	0000623d 	.word	0x0000623d
    5700:	00005529 	.word	0x00005529
    5704:	00004f49 	.word	0x00004f49
    5708:	00005551 	.word	0x00005551
    570c:	000003e7 	.word	0x000003e7

00005710 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    5710:	b580      	push	{r7, lr}
    5712:	b082      	sub	sp, #8
    5714:	af00      	add	r7, sp, #0
    5716:	1c02      	adds	r2, r0, #0
    5718:	1dfb      	adds	r3, r7, #7
    571a:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    571c:	4b1a      	ldr	r3, [pc, #104]	; (5788 <RFM_setHighPower+0x78>)
    571e:	1dfa      	adds	r2, r7, #7
    5720:	7812      	ldrb	r2, [r2, #0]
    5722:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    5724:	4b18      	ldr	r3, [pc, #96]	; (5788 <RFM_setHighPower+0x78>)
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	b2db      	uxtb	r3, r3
    572a:	2b00      	cmp	r3, #0
    572c:	d001      	beq.n	5732 <RFM_setHighPower+0x22>
    572e:	230f      	movs	r3, #15
    5730:	e000      	b.n	5734 <RFM_setHighPower+0x24>
    5732:	231a      	movs	r3, #26
    5734:	2013      	movs	r0, #19
    5736:	1c19      	adds	r1, r3, #0
    5738:	4b14      	ldr	r3, [pc, #80]	; (578c <RFM_setHighPower+0x7c>)
    573a:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    573c:	4b12      	ldr	r3, [pc, #72]	; (5788 <RFM_setHighPower+0x78>)
    573e:	781b      	ldrb	r3, [r3, #0]
    5740:	b2db      	uxtb	r3, r3
    5742:	2b00      	cmp	r3, #0
    5744:	d012      	beq.n	576c <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    5746:	2011      	movs	r0, #17
    5748:	4b11      	ldr	r3, [pc, #68]	; (5790 <RFM_setHighPower+0x80>)
    574a:	4798      	blx	r3
    574c:	1c03      	adds	r3, r0, #0
    574e:	b2db      	uxtb	r3, r3
    5750:	1c1a      	adds	r2, r3, #0
    5752:	231f      	movs	r3, #31
    5754:	4013      	ands	r3, r2
    5756:	b2db      	uxtb	r3, r3
    5758:	1c1a      	adds	r2, r3, #0
    575a:	2360      	movs	r3, #96	; 0x60
    575c:	4313      	orrs	r3, r2
    575e:	b2db      	uxtb	r3, r3
    5760:	b2db      	uxtb	r3, r3
    5762:	2011      	movs	r0, #17
    5764:	1c19      	adds	r1, r3, #0
    5766:	4b09      	ldr	r3, [pc, #36]	; (578c <RFM_setHighPower+0x7c>)
    5768:	4798      	blx	r3
    576a:	e009      	b.n	5780 <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    576c:	4b09      	ldr	r3, [pc, #36]	; (5794 <RFM_setHighPower+0x84>)
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	2280      	movs	r2, #128	; 0x80
    5772:	4252      	negs	r2, r2
    5774:	4313      	orrs	r3, r2
    5776:	b2db      	uxtb	r3, r3
    5778:	2011      	movs	r0, #17
    577a:	1c19      	adds	r1, r3, #0
    577c:	4b03      	ldr	r3, [pc, #12]	; (578c <RFM_setHighPower+0x7c>)
    577e:	4798      	blx	r3
}
    5780:	46bd      	mov	sp, r7
    5782:	b002      	add	sp, #8
    5784:	bd80      	pop	{r7, pc}
    5786:	46c0      	nop			; (mov r8, r8)
    5788:	20000230 	.word	0x20000230
    578c:	000061ad 	.word	0x000061ad
    5790:	00006141 	.word	0x00006141
    5794:	20000130 	.word	0x20000130

00005798 <RFM69>:

void RFM69()
{
    5798:	b580      	push	{r7, lr}
    579a:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    579c:	4b06      	ldr	r3, [pc, #24]	; (57b8 <RFM69+0x20>)
    579e:	2201      	movs	r2, #1
    57a0:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    57a2:	4b06      	ldr	r3, [pc, #24]	; (57bc <RFM69+0x24>)
    57a4:	2200      	movs	r2, #0
    57a6:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    57a8:	4b05      	ldr	r3, [pc, #20]	; (57c0 <RFM69+0x28>)
    57aa:	221f      	movs	r2, #31
    57ac:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    57ae:	4b05      	ldr	r3, [pc, #20]	; (57c4 <RFM69+0x2c>)
    57b0:	2200      	movs	r2, #0
    57b2:	701a      	strb	r2, [r3, #0]
}
    57b4:	46bd      	mov	sp, r7
    57b6:	bd80      	pop	{r7, pc}
    57b8:	2000022e 	.word	0x2000022e
    57bc:	2000017c 	.word	0x2000017c
    57c0:	20000130 	.word	0x20000130
    57c4:	20000230 	.word	0x20000230

000057c8 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    57c8:	b590      	push	{r4, r7, lr}
    57ca:	b091      	sub	sp, #68	; 0x44
    57cc:	af00      	add	r7, sp, #0
    57ce:	1c04      	adds	r4, r0, #0
    57d0:	1c08      	adds	r0, r1, #0
    57d2:	1c11      	adds	r1, r2, #0
    57d4:	1dfb      	adds	r3, r7, #7
    57d6:	1c22      	adds	r2, r4, #0
    57d8:	701a      	strb	r2, [r3, #0]
    57da:	1dbb      	adds	r3, r7, #6
    57dc:	1c02      	adds	r2, r0, #0
    57de:	701a      	strb	r2, [r3, #0]
    57e0:	1d7b      	adds	r3, r7, #5
    57e2:	1c0a      	adds	r2, r1, #0
    57e4:	701a      	strb	r2, [r3, #0]
  RFM69();
    57e6:	4bc2      	ldr	r3, [pc, #776]	; (5af0 <RFM_initialize+0x328>)
    57e8:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    57ea:	2310      	movs	r3, #16
    57ec:	18fb      	adds	r3, r7, r3
    57ee:	2201      	movs	r2, #1
    57f0:	701a      	strb	r2, [r3, #0]
    57f2:	2310      	movs	r3, #16
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	2204      	movs	r2, #4
    57f8:	705a      	strb	r2, [r3, #1]
    57fa:	2310      	movs	r3, #16
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	2202      	movs	r2, #2
    5800:	709a      	strb	r2, [r3, #2]
    5802:	2310      	movs	r3, #16
    5804:	18fb      	adds	r3, r7, r3
    5806:	2200      	movs	r2, #0
    5808:	70da      	strb	r2, [r3, #3]
    580a:	2310      	movs	r3, #16
    580c:	18fb      	adds	r3, r7, r3
    580e:	2203      	movs	r2, #3
    5810:	711a      	strb	r2, [r3, #4]
    5812:	2310      	movs	r3, #16
    5814:	18fb      	adds	r3, r7, r3
    5816:	2202      	movs	r2, #2
    5818:	715a      	strb	r2, [r3, #5]
    581a:	2310      	movs	r3, #16
    581c:	18fb      	adds	r3, r7, r3
    581e:	2204      	movs	r2, #4
    5820:	719a      	strb	r2, [r3, #6]
    5822:	2310      	movs	r3, #16
    5824:	18fb      	adds	r3, r7, r3
    5826:	2240      	movs	r2, #64	; 0x40
    5828:	71da      	strb	r2, [r3, #7]
    582a:	2310      	movs	r3, #16
    582c:	18fb      	adds	r3, r7, r3
    582e:	2205      	movs	r2, #5
    5830:	721a      	strb	r2, [r3, #8]
    5832:	2310      	movs	r3, #16
    5834:	18fb      	adds	r3, r7, r3
    5836:	2203      	movs	r2, #3
    5838:	725a      	strb	r2, [r3, #9]
    583a:	2310      	movs	r3, #16
    583c:	18fb      	adds	r3, r7, r3
    583e:	2206      	movs	r2, #6
    5840:	729a      	strb	r2, [r3, #10]
    5842:	2310      	movs	r3, #16
    5844:	18fb      	adds	r3, r7, r3
    5846:	2233      	movs	r2, #51	; 0x33
    5848:	72da      	strb	r2, [r3, #11]
    584a:	2310      	movs	r3, #16
    584c:	18fb      	adds	r3, r7, r3
    584e:	2207      	movs	r2, #7
    5850:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    5852:	1dfb      	adds	r3, r7, #7
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	2b1f      	cmp	r3, #31
    5858:	d00d      	beq.n	5876 <RFM_initialize+0xae>
    585a:	1dfb      	adds	r3, r7, #7
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	2b2b      	cmp	r3, #43	; 0x2b
    5860:	d007      	beq.n	5872 <RFM_initialize+0xaa>
    5862:	1dfb      	adds	r3, r7, #7
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	2b56      	cmp	r3, #86	; 0x56
    5868:	d101      	bne.n	586e <RFM_initialize+0xa6>
    586a:	23d9      	movs	r3, #217	; 0xd9
    586c:	e004      	b.n	5878 <RFM_initialize+0xb0>
    586e:	23e4      	movs	r3, #228	; 0xe4
    5870:	e002      	b.n	5878 <RFM_initialize+0xb0>
    5872:	236c      	movs	r3, #108	; 0x6c
    5874:	e000      	b.n	5878 <RFM_initialize+0xb0>
    5876:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    5878:	2210      	movs	r2, #16
    587a:	18ba      	adds	r2, r7, r2
    587c:	7353      	strb	r3, [r2, #13]
    587e:	2310      	movs	r3, #16
    5880:	18fb      	adds	r3, r7, r3
    5882:	2208      	movs	r2, #8
    5884:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    5886:	1dfb      	adds	r3, r7, #7
    5888:	781b      	ldrb	r3, [r3, #0]
    588a:	2b1f      	cmp	r3, #31
    588c:	d00d      	beq.n	58aa <RFM_initialize+0xe2>
    588e:	1dfb      	adds	r3, r7, #7
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	2b2b      	cmp	r3, #43	; 0x2b
    5894:	d007      	beq.n	58a6 <RFM_initialize+0xde>
    5896:	1dfb      	adds	r3, r7, #7
    5898:	781b      	ldrb	r3, [r3, #0]
    589a:	2b56      	cmp	r3, #86	; 0x56
    589c:	d101      	bne.n	58a2 <RFM_initialize+0xda>
    589e:	2300      	movs	r3, #0
    58a0:	e004      	b.n	58ac <RFM_initialize+0xe4>
    58a2:	23c0      	movs	r3, #192	; 0xc0
    58a4:	e002      	b.n	58ac <RFM_initialize+0xe4>
    58a6:	2340      	movs	r3, #64	; 0x40
    58a8:	e000      	b.n	58ac <RFM_initialize+0xe4>
    58aa:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    58ac:	2210      	movs	r2, #16
    58ae:	18ba      	adds	r2, r7, r2
    58b0:	73d3      	strb	r3, [r2, #15]
    58b2:	2310      	movs	r3, #16
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	2209      	movs	r2, #9
    58b8:	741a      	strb	r2, [r3, #16]
    58ba:	2310      	movs	r3, #16
    58bc:	18fb      	adds	r3, r7, r3
    58be:	2200      	movs	r2, #0
    58c0:	745a      	strb	r2, [r3, #17]
    58c2:	2310      	movs	r3, #16
    58c4:	18fb      	adds	r3, r7, r3
    58c6:	2219      	movs	r2, #25
    58c8:	749a      	strb	r2, [r3, #18]
    58ca:	2310      	movs	r3, #16
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	2242      	movs	r2, #66	; 0x42
    58d0:	74da      	strb	r2, [r3, #19]
    58d2:	2310      	movs	r3, #16
    58d4:	18fb      	adds	r3, r7, r3
    58d6:	2225      	movs	r2, #37	; 0x25
    58d8:	751a      	strb	r2, [r3, #20]
    58da:	2310      	movs	r3, #16
    58dc:	18fb      	adds	r3, r7, r3
    58de:	2240      	movs	r2, #64	; 0x40
    58e0:	755a      	strb	r2, [r3, #21]
    58e2:	2310      	movs	r3, #16
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	2226      	movs	r2, #38	; 0x26
    58e8:	759a      	strb	r2, [r3, #22]
    58ea:	2310      	movs	r3, #16
    58ec:	18fb      	adds	r3, r7, r3
    58ee:	2207      	movs	r2, #7
    58f0:	75da      	strb	r2, [r3, #23]
    58f2:	2310      	movs	r3, #16
    58f4:	18fb      	adds	r3, r7, r3
    58f6:	2228      	movs	r2, #40	; 0x28
    58f8:	761a      	strb	r2, [r3, #24]
    58fa:	2310      	movs	r3, #16
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	2210      	movs	r2, #16
    5900:	765a      	strb	r2, [r3, #25]
    5902:	2310      	movs	r3, #16
    5904:	18fb      	adds	r3, r7, r3
    5906:	2229      	movs	r2, #41	; 0x29
    5908:	769a      	strb	r2, [r3, #26]
    590a:	2310      	movs	r3, #16
    590c:	18fb      	adds	r3, r7, r3
    590e:	22dc      	movs	r2, #220	; 0xdc
    5910:	76da      	strb	r2, [r3, #27]
    5912:	2310      	movs	r3, #16
    5914:	18fb      	adds	r3, r7, r3
    5916:	222e      	movs	r2, #46	; 0x2e
    5918:	771a      	strb	r2, [r3, #28]
    591a:	2310      	movs	r3, #16
    591c:	18fb      	adds	r3, r7, r3
    591e:	2288      	movs	r2, #136	; 0x88
    5920:	775a      	strb	r2, [r3, #29]
    5922:	2310      	movs	r3, #16
    5924:	18fb      	adds	r3, r7, r3
    5926:	222f      	movs	r2, #47	; 0x2f
    5928:	779a      	strb	r2, [r3, #30]
    592a:	2310      	movs	r3, #16
    592c:	18fb      	adds	r3, r7, r3
    592e:	222d      	movs	r2, #45	; 0x2d
    5930:	77da      	strb	r2, [r3, #31]
    5932:	2310      	movs	r3, #16
    5934:	18fb      	adds	r3, r7, r3
    5936:	2220      	movs	r2, #32
    5938:	2130      	movs	r1, #48	; 0x30
    593a:	5499      	strb	r1, [r3, r2]
    593c:	2310      	movs	r3, #16
    593e:	18fb      	adds	r3, r7, r3
    5940:	1d7a      	adds	r2, r7, #5
    5942:	2121      	movs	r1, #33	; 0x21
    5944:	7812      	ldrb	r2, [r2, #0]
    5946:	545a      	strb	r2, [r3, r1]
    5948:	2310      	movs	r3, #16
    594a:	18fb      	adds	r3, r7, r3
    594c:	2222      	movs	r2, #34	; 0x22
    594e:	2137      	movs	r1, #55	; 0x37
    5950:	5499      	strb	r1, [r3, r2]
    5952:	2310      	movs	r3, #16
    5954:	18fb      	adds	r3, r7, r3
    5956:	2223      	movs	r2, #35	; 0x23
    5958:	2190      	movs	r1, #144	; 0x90
    595a:	5499      	strb	r1, [r3, r2]
    595c:	2310      	movs	r3, #16
    595e:	18fb      	adds	r3, r7, r3
    5960:	2224      	movs	r2, #36	; 0x24
    5962:	2138      	movs	r1, #56	; 0x38
    5964:	5499      	strb	r1, [r3, r2]
    5966:	2310      	movs	r3, #16
    5968:	18fb      	adds	r3, r7, r3
    596a:	2225      	movs	r2, #37	; 0x25
    596c:	2142      	movs	r1, #66	; 0x42
    596e:	5499      	strb	r1, [r3, r2]
    5970:	2310      	movs	r3, #16
    5972:	18fb      	adds	r3, r7, r3
    5974:	2226      	movs	r2, #38	; 0x26
    5976:	213c      	movs	r1, #60	; 0x3c
    5978:	5499      	strb	r1, [r3, r2]
    597a:	2310      	movs	r3, #16
    597c:	18fb      	adds	r3, r7, r3
    597e:	2227      	movs	r2, #39	; 0x27
    5980:	218f      	movs	r1, #143	; 0x8f
    5982:	5499      	strb	r1, [r3, r2]
    5984:	2310      	movs	r3, #16
    5986:	18fb      	adds	r3, r7, r3
    5988:	2228      	movs	r2, #40	; 0x28
    598a:	213d      	movs	r1, #61	; 0x3d
    598c:	5499      	strb	r1, [r3, r2]
    598e:	2310      	movs	r3, #16
    5990:	18fb      	adds	r3, r7, r3
    5992:	2229      	movs	r2, #41	; 0x29
    5994:	2112      	movs	r1, #18
    5996:	5499      	strb	r1, [r3, r2]
    5998:	2310      	movs	r3, #16
    599a:	18fb      	adds	r3, r7, r3
    599c:	222a      	movs	r2, #42	; 0x2a
    599e:	216f      	movs	r1, #111	; 0x6f
    59a0:	5499      	strb	r1, [r3, r2]
    59a2:	2310      	movs	r3, #16
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	222b      	movs	r2, #43	; 0x2b
    59a8:	2130      	movs	r1, #48	; 0x30
    59aa:	5499      	strb	r1, [r3, r2]
    59ac:	2310      	movs	r3, #16
    59ae:	18fb      	adds	r3, r7, r3
    59b0:	222c      	movs	r2, #44	; 0x2c
    59b2:	21ff      	movs	r1, #255	; 0xff
    59b4:	5499      	strb	r1, [r3, r2]
    59b6:	2310      	movs	r3, #16
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	222d      	movs	r2, #45	; 0x2d
    59bc:	2100      	movs	r1, #0
    59be:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    59c0:	4b4c      	ldr	r3, [pc, #304]	; (5af4 <RFM_initialize+0x32c>)
    59c2:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    59c4:	4b4c      	ldr	r3, [pc, #304]	; (5af8 <RFM_initialize+0x330>)
    59c6:	4798      	blx	r3
  configure_port_pins();
    59c8:	4b4c      	ldr	r3, [pc, #304]	; (5afc <RFM_initialize+0x334>)
    59ca:	4798      	blx	r3
  configure_extint_channel();
    59cc:	4b4c      	ldr	r3, [pc, #304]	; (5b00 <RFM_initialize+0x338>)
    59ce:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    59d0:	4b4c      	ldr	r3, [pc, #304]	; (5b04 <RFM_initialize+0x33c>)
    59d2:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    59d4:	230f      	movs	r3, #15
    59d6:	18fb      	adds	r3, r7, r3
    59d8:	2232      	movs	r2, #50	; 0x32
    59da:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    59dc:	202f      	movs	r0, #47	; 0x2f
    59de:	21aa      	movs	r1, #170	; 0xaa
    59e0:	4b49      	ldr	r3, [pc, #292]	; (5b08 <RFM_initialize+0x340>)
    59e2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    59e4:	202f      	movs	r0, #47	; 0x2f
    59e6:	4b49      	ldr	r3, [pc, #292]	; (5b0c <RFM_initialize+0x344>)
    59e8:	4798      	blx	r3
    59ea:	1e03      	subs	r3, r0, #0
    59ec:	2baa      	cmp	r3, #170	; 0xaa
    59ee:	d008      	beq.n	5a02 <RFM_initialize+0x23a>
    59f0:	4b47      	ldr	r3, [pc, #284]	; (5b10 <RFM_initialize+0x348>)
    59f2:	4798      	blx	r3
    59f4:	1c02      	adds	r2, r0, #0
    59f6:	230f      	movs	r3, #15
    59f8:	18fb      	adds	r3, r7, r3
    59fa:	781b      	ldrb	r3, [r3, #0]
    59fc:	b2db      	uxtb	r3, r3
    59fe:	429a      	cmp	r2, r3
    5a00:	d3ec      	bcc.n	59dc <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    5a02:	4b40      	ldr	r3, [pc, #256]	; (5b04 <RFM_initialize+0x33c>)
    5a04:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    5a06:	202f      	movs	r0, #47	; 0x2f
    5a08:	2155      	movs	r1, #85	; 0x55
    5a0a:	4b3f      	ldr	r3, [pc, #252]	; (5b08 <RFM_initialize+0x340>)
    5a0c:	4798      	blx	r3
    5a0e:	202f      	movs	r0, #47	; 0x2f
    5a10:	4b3e      	ldr	r3, [pc, #248]	; (5b0c <RFM_initialize+0x344>)
    5a12:	4798      	blx	r3
    5a14:	1e03      	subs	r3, r0, #0
    5a16:	2b55      	cmp	r3, #85	; 0x55
    5a18:	d008      	beq.n	5a2c <RFM_initialize+0x264>
    5a1a:	4b3d      	ldr	r3, [pc, #244]	; (5b10 <RFM_initialize+0x348>)
    5a1c:	4798      	blx	r3
    5a1e:	1c02      	adds	r2, r0, #0
    5a20:	230f      	movs	r3, #15
    5a22:	18fb      	adds	r3, r7, r3
    5a24:	781b      	ldrb	r3, [r3, #0]
    5a26:	b2db      	uxtb	r3, r3
    5a28:	429a      	cmp	r2, r3
    5a2a:	d3ec      	bcc.n	5a06 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    5a2c:	233f      	movs	r3, #63	; 0x3f
    5a2e:	18fb      	adds	r3, r7, r3
    5a30:	2200      	movs	r2, #0
    5a32:	701a      	strb	r2, [r3, #0]
    5a34:	e01a      	b.n	5a6c <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    5a36:	233f      	movs	r3, #63	; 0x3f
    5a38:	18fb      	adds	r3, r7, r3
    5a3a:	781a      	ldrb	r2, [r3, #0]
    5a3c:	2310      	movs	r3, #16
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	0052      	lsls	r2, r2, #1
    5a42:	5cd1      	ldrb	r1, [r2, r3]
    5a44:	233f      	movs	r3, #63	; 0x3f
    5a46:	18fb      	adds	r3, r7, r3
    5a48:	781b      	ldrb	r3, [r3, #0]
    5a4a:	2210      	movs	r2, #16
    5a4c:	18ba      	adds	r2, r7, r2
    5a4e:	005b      	lsls	r3, r3, #1
    5a50:	18d3      	adds	r3, r2, r3
    5a52:	3301      	adds	r3, #1
    5a54:	781b      	ldrb	r3, [r3, #0]
    5a56:	1c08      	adds	r0, r1, #0
    5a58:	1c19      	adds	r1, r3, #0
    5a5a:	4b2b      	ldr	r3, [pc, #172]	; (5b08 <RFM_initialize+0x340>)
    5a5c:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    5a5e:	233f      	movs	r3, #63	; 0x3f
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	781a      	ldrb	r2, [r3, #0]
    5a64:	233f      	movs	r3, #63	; 0x3f
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	3201      	adds	r2, #1
    5a6a:	701a      	strb	r2, [r3, #0]
    5a6c:	233f      	movs	r3, #63	; 0x3f
    5a6e:	18fb      	adds	r3, r7, r3
    5a70:	781a      	ldrb	r2, [r3, #0]
    5a72:	2310      	movs	r3, #16
    5a74:	18fb      	adds	r3, r7, r3
    5a76:	0052      	lsls	r2, r2, #1
    5a78:	5cd3      	ldrb	r3, [r2, r3]
    5a7a:	2bff      	cmp	r3, #255	; 0xff
    5a7c:	d1db      	bne.n	5a36 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    5a7e:	2000      	movs	r0, #0
    5a80:	4b24      	ldr	r3, [pc, #144]	; (5b14 <RFM_initialize+0x34c>)
    5a82:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    5a84:	4b24      	ldr	r3, [pc, #144]	; (5b18 <RFM_initialize+0x350>)
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	b2db      	uxtb	r3, r3
    5a8a:	1c18      	adds	r0, r3, #0
    5a8c:	4b23      	ldr	r3, [pc, #140]	; (5b1c <RFM_initialize+0x354>)
    5a8e:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    5a90:	2001      	movs	r0, #1
    5a92:	4b23      	ldr	r3, [pc, #140]	; (5b20 <RFM_initialize+0x358>)
    5a94:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    5a96:	4b1b      	ldr	r3, [pc, #108]	; (5b04 <RFM_initialize+0x33c>)
    5a98:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	2027      	movs	r0, #39	; 0x27
    5a9e:	4b1b      	ldr	r3, [pc, #108]	; (5b0c <RFM_initialize+0x344>)
    5aa0:	4798      	blx	r3
    5aa2:	1c03      	adds	r3, r0, #0
    5aa4:	b2db      	uxtb	r3, r3
    5aa6:	b25b      	sxtb	r3, r3
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	db08      	blt.n	5abe <RFM_initialize+0x2f6>
    5aac:	4b18      	ldr	r3, [pc, #96]	; (5b10 <RFM_initialize+0x348>)
    5aae:	4798      	blx	r3
    5ab0:	1c02      	adds	r2, r0, #0
    5ab2:	230f      	movs	r3, #15
    5ab4:	18fb      	adds	r3, r7, r3
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	b2db      	uxtb	r3, r3
    5aba:	429a      	cmp	r2, r3
    5abc:	d3ee      	bcc.n	5a9c <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
    5abe:	4b14      	ldr	r3, [pc, #80]	; (5b10 <RFM_initialize+0x348>)
    5ac0:	4798      	blx	r3
    5ac2:	1c02      	adds	r2, r0, #0
    5ac4:	230f      	movs	r3, #15
    5ac6:	18fb      	adds	r3, r7, r3
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	b2db      	uxtb	r3, r3
    5acc:	429a      	cmp	r2, r3
    5ace:	d301      	bcc.n	5ad4 <RFM_initialize+0x30c>
    return false;
    5ad0:	2300      	movs	r3, #0
    5ad2:	e009      	b.n	5ae8 <RFM_initialize+0x320>
  _inISR = false;
    5ad4:	4b13      	ldr	r3, [pc, #76]	; (5b24 <RFM_initialize+0x35c>)
    5ad6:	2200      	movs	r2, #0
    5ad8:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    5ada:	4b13      	ldr	r3, [pc, #76]	; (5b28 <RFM_initialize+0x360>)
    5adc:	4798      	blx	r3

  _address = nodeID;
    5ade:	4b13      	ldr	r3, [pc, #76]	; (5b2c <RFM_initialize+0x364>)
    5ae0:	1dba      	adds	r2, r7, #6
    5ae2:	7812      	ldrb	r2, [r2, #0]
    5ae4:	701a      	strb	r2, [r3, #0]
  return true;
    5ae6:	2301      	movs	r3, #1
}
    5ae8:	1c18      	adds	r0, r3, #0
    5aea:	46bd      	mov	sp, r7
    5aec:	b011      	add	sp, #68	; 0x44
    5aee:	bd90      	pop	{r4, r7, pc}
    5af0:	00005799 	.word	0x00005799
    5af4:	00005401 	.word	0x00005401
    5af8:	000054c5 	.word	0x000054c5
    5afc:	0000536d 	.word	0x0000536d
    5b00:	00005399 	.word	0x00005399
    5b04:	00005529 	.word	0x00005529
    5b08:	000061ad 	.word	0x000061ad
    5b0c:	00006141 	.word	0x00006141
    5b10:	00005551 	.word	0x00005551
    5b14:	00006041 	.word	0x00006041
    5b18:	20000230 	.word	0x20000230
    5b1c:	00005711 	.word	0x00005711
    5b20:	00005b31 	.word	0x00005b31
    5b24:	20000131 	.word	0x20000131
    5b28:	000053d9 	.word	0x000053d9
    5b2c:	20000174 	.word	0x20000174

00005b30 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b082      	sub	sp, #8
    5b34:	af00      	add	r7, sp, #0
    5b36:	1c02      	adds	r2, r0, #0
    5b38:	1dfb      	adds	r3, r7, #7
    5b3a:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    5b3c:	1dfb      	adds	r3, r7, #7
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	b29a      	uxth	r2, r3
    5b42:	4b4c      	ldr	r3, [pc, #304]	; (5c74 <setMode+0x144>)
    5b44:	881b      	ldrh	r3, [r3, #0]
    5b46:	b29b      	uxth	r3, r3
    5b48:	429a      	cmp	r2, r3
    5b4a:	d100      	bne.n	5b4e <setMode+0x1e>
    return;
    5b4c:	e08e      	b.n	5c6c <setMode+0x13c>

  switch (newMode) {
    5b4e:	1dfb      	adds	r3, r7, #7
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	2b04      	cmp	r3, #4
    5b54:	d900      	bls.n	5b58 <setMode+0x28>
    5b56:	e088      	b.n	5c6a <setMode+0x13a>
    5b58:	009a      	lsls	r2, r3, #2
    5b5a:	4b47      	ldr	r3, [pc, #284]	; (5c78 <setMode+0x148>)
    5b5c:	18d3      	adds	r3, r2, r3
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    5b62:	2001      	movs	r0, #1
    5b64:	4b45      	ldr	r3, [pc, #276]	; (5c7c <setMode+0x14c>)
    5b66:	4798      	blx	r3
    5b68:	1c03      	adds	r3, r0, #0
    5b6a:	b2db      	uxtb	r3, r3
    5b6c:	1c1a      	adds	r2, r3, #0
    5b6e:	231c      	movs	r3, #28
    5b70:	439a      	bics	r2, r3
    5b72:	1c13      	adds	r3, r2, #0
    5b74:	b2db      	uxtb	r3, r3
    5b76:	1c1a      	adds	r2, r3, #0
    5b78:	230c      	movs	r3, #12
    5b7a:	4313      	orrs	r3, r2
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	b2db      	uxtb	r3, r3
    5b80:	2001      	movs	r0, #1
    5b82:	1c19      	adds	r1, r3, #0
    5b84:	4b3e      	ldr	r3, [pc, #248]	; (5c80 <setMode+0x150>)
    5b86:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    5b88:	4b3e      	ldr	r3, [pc, #248]	; (5c84 <setMode+0x154>)
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	b2db      	uxtb	r3, r3
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d003      	beq.n	5b9a <setMode+0x6a>
    5b92:	2001      	movs	r0, #1
    5b94:	4b3c      	ldr	r3, [pc, #240]	; (5c88 <setMode+0x158>)
    5b96:	4798      	blx	r3
      break;
    5b98:	e053      	b.n	5c42 <setMode+0x112>
    5b9a:	e052      	b.n	5c42 <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    5b9c:	2001      	movs	r0, #1
    5b9e:	4b37      	ldr	r3, [pc, #220]	; (5c7c <setMode+0x14c>)
    5ba0:	4798      	blx	r3
    5ba2:	1c03      	adds	r3, r0, #0
    5ba4:	b2db      	uxtb	r3, r3
    5ba6:	1c1a      	adds	r2, r3, #0
    5ba8:	231c      	movs	r3, #28
    5baa:	439a      	bics	r2, r3
    5bac:	1c13      	adds	r3, r2, #0
    5bae:	b2db      	uxtb	r3, r3
    5bb0:	1c1a      	adds	r2, r3, #0
    5bb2:	2310      	movs	r3, #16
    5bb4:	4313      	orrs	r3, r2
    5bb6:	b2db      	uxtb	r3, r3
    5bb8:	b2db      	uxtb	r3, r3
    5bba:	2001      	movs	r0, #1
    5bbc:	1c19      	adds	r1, r3, #0
    5bbe:	4b30      	ldr	r3, [pc, #192]	; (5c80 <setMode+0x150>)
    5bc0:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    5bc2:	4b30      	ldr	r3, [pc, #192]	; (5c84 <setMode+0x154>)
    5bc4:	781b      	ldrb	r3, [r3, #0]
    5bc6:	b2db      	uxtb	r3, r3
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d003      	beq.n	5bd4 <setMode+0xa4>
    5bcc:	2000      	movs	r0, #0
    5bce:	4b2e      	ldr	r3, [pc, #184]	; (5c88 <setMode+0x158>)
    5bd0:	4798      	blx	r3
      break;
    5bd2:	e036      	b.n	5c42 <setMode+0x112>
    5bd4:	e035      	b.n	5c42 <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    5bd6:	2001      	movs	r0, #1
    5bd8:	4b28      	ldr	r3, [pc, #160]	; (5c7c <setMode+0x14c>)
    5bda:	4798      	blx	r3
    5bdc:	1c03      	adds	r3, r0, #0
    5bde:	b2db      	uxtb	r3, r3
    5be0:	1c1a      	adds	r2, r3, #0
    5be2:	231c      	movs	r3, #28
    5be4:	439a      	bics	r2, r3
    5be6:	1c13      	adds	r3, r2, #0
    5be8:	b2db      	uxtb	r3, r3
    5bea:	1c1a      	adds	r2, r3, #0
    5bec:	2308      	movs	r3, #8
    5bee:	4313      	orrs	r3, r2
    5bf0:	b2db      	uxtb	r3, r3
    5bf2:	b2db      	uxtb	r3, r3
    5bf4:	2001      	movs	r0, #1
    5bf6:	1c19      	adds	r1, r3, #0
    5bf8:	4b21      	ldr	r3, [pc, #132]	; (5c80 <setMode+0x150>)
    5bfa:	4798      	blx	r3
      break;
    5bfc:	e021      	b.n	5c42 <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    5bfe:	2001      	movs	r0, #1
    5c00:	4b1e      	ldr	r3, [pc, #120]	; (5c7c <setMode+0x14c>)
    5c02:	4798      	blx	r3
    5c04:	1c03      	adds	r3, r0, #0
    5c06:	b2db      	uxtb	r3, r3
    5c08:	1c1a      	adds	r2, r3, #0
    5c0a:	231c      	movs	r3, #28
    5c0c:	439a      	bics	r2, r3
    5c0e:	1c13      	adds	r3, r2, #0
    5c10:	b2db      	uxtb	r3, r3
    5c12:	1c1a      	adds	r2, r3, #0
    5c14:	2304      	movs	r3, #4
    5c16:	4313      	orrs	r3, r2
    5c18:	b2db      	uxtb	r3, r3
    5c1a:	b2db      	uxtb	r3, r3
    5c1c:	2001      	movs	r0, #1
    5c1e:	1c19      	adds	r1, r3, #0
    5c20:	4b17      	ldr	r3, [pc, #92]	; (5c80 <setMode+0x150>)
    5c22:	4798      	blx	r3
      break;
    5c24:	e00d      	b.n	5c42 <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    5c26:	2001      	movs	r0, #1
    5c28:	4b14      	ldr	r3, [pc, #80]	; (5c7c <setMode+0x14c>)
    5c2a:	4798      	blx	r3
    5c2c:	1c03      	adds	r3, r0, #0
    5c2e:	1c1a      	adds	r2, r3, #0
    5c30:	231c      	movs	r3, #28
    5c32:	439a      	bics	r2, r3
    5c34:	1c13      	adds	r3, r2, #0
    5c36:	b2db      	uxtb	r3, r3
    5c38:	2001      	movs	r0, #1
    5c3a:	1c19      	adds	r1, r3, #0
    5c3c:	4b10      	ldr	r3, [pc, #64]	; (5c80 <setMode+0x150>)
    5c3e:	4798      	blx	r3
      break;
    5c40:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    5c42:	46c0      	nop			; (mov r8, r8)
    5c44:	4b0b      	ldr	r3, [pc, #44]	; (5c74 <setMode+0x144>)
    5c46:	881b      	ldrh	r3, [r3, #0]
    5c48:	b29b      	uxth	r3, r3
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d107      	bne.n	5c5e <setMode+0x12e>
    5c4e:	2027      	movs	r0, #39	; 0x27
    5c50:	4b0a      	ldr	r3, [pc, #40]	; (5c7c <setMode+0x14c>)
    5c52:	4798      	blx	r3
    5c54:	1c03      	adds	r3, r0, #0
    5c56:	b2db      	uxtb	r3, r3
    5c58:	b25b      	sxtb	r3, r3
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	daf2      	bge.n	5c44 <setMode+0x114>

  _mode = newMode;
    5c5e:	1dfb      	adds	r3, r7, #7
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	b29a      	uxth	r2, r3
    5c64:	4b03      	ldr	r3, [pc, #12]	; (5c74 <setMode+0x144>)
    5c66:	801a      	strh	r2, [r3, #0]
    5c68:	e000      	b.n	5c6c <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    5c6a:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    5c6c:	46bd      	mov	sp, r7
    5c6e:	b002      	add	sp, #8
    5c70:	bd80      	pop	{r7, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	2000022e 	.word	0x2000022e
    5c78:	0000909c 	.word	0x0000909c
    5c7c:	00006141 	.word	0x00006141
    5c80:	000061ad 	.word	0x000061ad
    5c84:	20000230 	.word	0x20000230
    5c88:	00006269 	.word	0x00006269

00005c8c <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    5c90:	4b0b      	ldr	r3, [pc, #44]	; (5cc0 <canSend+0x34>)
    5c92:	881b      	ldrh	r3, [r3, #0]
    5c94:	b29b      	uxth	r3, r3
    5c96:	2b03      	cmp	r3, #3
    5c98:	d10e      	bne.n	5cb8 <canSend+0x2c>
    5c9a:	4b0a      	ldr	r3, [pc, #40]	; (5cc4 <canSend+0x38>)
    5c9c:	881b      	ldrh	r3, [r3, #0]
    5c9e:	b29b      	uxth	r3, r3
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d109      	bne.n	5cb8 <canSend+0x2c>
    5ca4:	4b08      	ldr	r3, [pc, #32]	; (5cc8 <canSend+0x3c>)
    5ca6:	4798      	blx	r3
    5ca8:	1c03      	adds	r3, r0, #0
    5caa:	335a      	adds	r3, #90	; 0x5a
    5cac:	da04      	bge.n	5cb8 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    5cae:	2001      	movs	r0, #1
    5cb0:	4b06      	ldr	r3, [pc, #24]	; (5ccc <canSend+0x40>)
    5cb2:	4798      	blx	r3
    return true;
    5cb4:	2301      	movs	r3, #1
    5cb6:	e000      	b.n	5cba <canSend+0x2e>
  }
  return false;
    5cb8:	2300      	movs	r3, #0
}
    5cba:	1c18      	adds	r0, r3, #0
    5cbc:	46bd      	mov	sp, r7
    5cbe:	bd80      	pop	{r7, pc}
    5cc0:	2000022e 	.word	0x2000022e
    5cc4:	200001fc 	.word	0x200001fc
    5cc8:	000060fd 	.word	0x000060fd
    5ccc:	00005b31 	.word	0x00005b31

00005cd0 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    5cd0:	b590      	push	{r4, r7, lr}
    5cd2:	b085      	sub	sp, #20
    5cd4:	af02      	add	r7, sp, #8
    5cd6:	1c04      	adds	r4, r0, #0
    5cd8:	6039      	str	r1, [r7, #0]
    5cda:	1c10      	adds	r0, r2, #0
    5cdc:	1c19      	adds	r1, r3, #0
    5cde:	1dfb      	adds	r3, r7, #7
    5ce0:	1c22      	adds	r2, r4, #0
    5ce2:	701a      	strb	r2, [r3, #0]
    5ce4:	1dbb      	adds	r3, r7, #6
    5ce6:	1c02      	adds	r2, r0, #0
    5ce8:	701a      	strb	r2, [r3, #0]
    5cea:	1d7b      	adds	r3, r7, #5
    5cec:	1c0a      	adds	r2, r1, #0
    5cee:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5cf0:	203d      	movs	r0, #61	; 0x3d
    5cf2:	4b17      	ldr	r3, [pc, #92]	; (5d50 <RFM_send+0x80>)
    5cf4:	4798      	blx	r3
    5cf6:	1c03      	adds	r3, r0, #0
    5cf8:	1c1a      	adds	r2, r3, #0
    5cfa:	2304      	movs	r3, #4
    5cfc:	4313      	orrs	r3, r2
    5cfe:	b2db      	uxtb	r3, r3
    5d00:	203d      	movs	r0, #61	; 0x3d
    5d02:	1c19      	adds	r1, r3, #0
    5d04:	4b13      	ldr	r3, [pc, #76]	; (5d54 <RFM_send+0x84>)
    5d06:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    5d08:	4b13      	ldr	r3, [pc, #76]	; (5d58 <RFM_send+0x88>)
    5d0a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    5d0c:	e001      	b.n	5d12 <RFM_send+0x42>
    5d0e:	4b13      	ldr	r3, [pc, #76]	; (5d5c <RFM_send+0x8c>)
    5d10:	4798      	blx	r3
    5d12:	4b13      	ldr	r3, [pc, #76]	; (5d60 <RFM_send+0x90>)
    5d14:	4798      	blx	r3
    5d16:	1c03      	adds	r3, r0, #0
    5d18:	1c1a      	adds	r2, r3, #0
    5d1a:	2301      	movs	r3, #1
    5d1c:	4053      	eors	r3, r2
    5d1e:	b2db      	uxtb	r3, r3
    5d20:	2b00      	cmp	r3, #0
    5d22:	d005      	beq.n	5d30 <RFM_send+0x60>
    5d24:	4b0f      	ldr	r3, [pc, #60]	; (5d64 <RFM_send+0x94>)
    5d26:	4798      	blx	r3
    5d28:	1e02      	subs	r2, r0, #0
    5d2a:	4b0f      	ldr	r3, [pc, #60]	; (5d68 <RFM_send+0x98>)
    5d2c:	429a      	cmp	r2, r3
    5d2e:	d9ee      	bls.n	5d0e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    5d30:	1dfb      	adds	r3, r7, #7
    5d32:	7818      	ldrb	r0, [r3, #0]
    5d34:	6839      	ldr	r1, [r7, #0]
    5d36:	1dbb      	adds	r3, r7, #6
    5d38:	781a      	ldrb	r2, [r3, #0]
    5d3a:	1d7b      	adds	r3, r7, #5
    5d3c:	781c      	ldrb	r4, [r3, #0]
    5d3e:	2300      	movs	r3, #0
    5d40:	9300      	str	r3, [sp, #0]
    5d42:	1c23      	adds	r3, r4, #0
    5d44:	4c09      	ldr	r4, [pc, #36]	; (5d6c <RFM_send+0x9c>)
    5d46:	47a0      	blx	r4
}
    5d48:	46bd      	mov	sp, r7
    5d4a:	b003      	add	sp, #12
    5d4c:	bd90      	pop	{r4, r7, pc}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	00006141 	.word	0x00006141
    5d54:	000061ad 	.word	0x000061ad
    5d58:	00005529 	.word	0x00005529
    5d5c:	00005fe5 	.word	0x00005fe5
    5d60:	00005c8d 	.word	0x00005c8d
    5d64:	00005551 	.word	0x00005551
    5d68:	000003e7 	.word	0x000003e7
    5d6c:	00005579 	.word	0x00005579

00005d70 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    5d70:	b580      	push	{r7, lr}
    5d72:	b082      	sub	sp, #8
    5d74:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    5d76:	4b5b      	ldr	r3, [pc, #364]	; (5ee4 <interruptHandler+0x174>)
    5d78:	881b      	ldrh	r3, [r3, #0]
    5d7a:	b29b      	uxth	r3, r3
    5d7c:	2b03      	cmp	r3, #3
    5d7e:	d000      	beq.n	5d82 <interruptHandler+0x12>
    5d80:	e0a7      	b.n	5ed2 <interruptHandler+0x162>
    5d82:	2028      	movs	r0, #40	; 0x28
    5d84:	4b58      	ldr	r3, [pc, #352]	; (5ee8 <interruptHandler+0x178>)
    5d86:	4798      	blx	r3
    5d88:	1c03      	adds	r3, r0, #0
    5d8a:	1c1a      	adds	r2, r3, #0
    5d8c:	2304      	movs	r3, #4
    5d8e:	4013      	ands	r3, r2
    5d90:	d100      	bne.n	5d94 <interruptHandler+0x24>
    5d92:	e09e      	b.n	5ed2 <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    5d94:	2001      	movs	r0, #1
    5d96:	4b55      	ldr	r3, [pc, #340]	; (5eec <interruptHandler+0x17c>)
    5d98:	4798      	blx	r3
    radioselect();
    5d9a:	4b55      	ldr	r3, [pc, #340]	; (5ef0 <interruptHandler+0x180>)
    5d9c:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    5d9e:	4a55      	ldr	r2, [pc, #340]	; (5ef4 <interruptHandler+0x184>)
    5da0:	4b55      	ldr	r3, [pc, #340]	; (5ef8 <interruptHandler+0x188>)
    5da2:	1c10      	adds	r0, r2, #0
    5da4:	2100      	movs	r1, #0
    5da6:	1c1a      	adds	r2, r3, #0
    5da8:	4b54      	ldr	r3, [pc, #336]	; (5efc <interruptHandler+0x18c>)
    5daa:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    5dac:	4a51      	ldr	r2, [pc, #324]	; (5ef4 <interruptHandler+0x184>)
    5dae:	4b54      	ldr	r3, [pc, #336]	; (5f00 <interruptHandler+0x190>)
    5db0:	1c10      	adds	r0, r2, #0
    5db2:	2100      	movs	r1, #0
    5db4:	1c1a      	adds	r2, r3, #0
    5db6:	4b51      	ldr	r3, [pc, #324]	; (5efc <interruptHandler+0x18c>)
    5db8:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    5dba:	4b51      	ldr	r3, [pc, #324]	; (5f00 <interruptHandler+0x190>)
    5dbc:	881b      	ldrh	r3, [r3, #0]
    5dbe:	b29b      	uxth	r3, r3
    5dc0:	2b42      	cmp	r3, #66	; 0x42
    5dc2:	d803      	bhi.n	5dcc <interruptHandler+0x5c>
    5dc4:	4b4e      	ldr	r3, [pc, #312]	; (5f00 <interruptHandler+0x190>)
    5dc6:	881b      	ldrh	r3, [r3, #0]
    5dc8:	b29a      	uxth	r2, r3
    5dca:	e000      	b.n	5dce <interruptHandler+0x5e>
    5dcc:	2242      	movs	r2, #66	; 0x42
    5dce:	4b4c      	ldr	r3, [pc, #304]	; (5f00 <interruptHandler+0x190>)
    5dd0:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    5dd2:	4a48      	ldr	r2, [pc, #288]	; (5ef4 <interruptHandler+0x184>)
    5dd4:	4b4b      	ldr	r3, [pc, #300]	; (5f04 <interruptHandler+0x194>)
    5dd6:	1c10      	adds	r0, r2, #0
    5dd8:	2100      	movs	r1, #0
    5dda:	1c1a      	adds	r2, r3, #0
    5ddc:	4b47      	ldr	r3, [pc, #284]	; (5efc <interruptHandler+0x18c>)
    5dde:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    5de0:	4b49      	ldr	r3, [pc, #292]	; (5f08 <interruptHandler+0x198>)
    5de2:	781b      	ldrb	r3, [r3, #0]
    5de4:	b2db      	uxtb	r3, r3
    5de6:	2201      	movs	r2, #1
    5de8:	4053      	eors	r3, r2
    5dea:	b2db      	uxtb	r3, r3
    5dec:	2b00      	cmp	r3, #0
    5dee:	d00d      	beq.n	5e0c <interruptHandler+0x9c>
    5df0:	4b46      	ldr	r3, [pc, #280]	; (5f0c <interruptHandler+0x19c>)
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	b2db      	uxtb	r3, r3
    5df6:	b29a      	uxth	r2, r3
    5df8:	4b42      	ldr	r3, [pc, #264]	; (5f04 <interruptHandler+0x194>)
    5dfa:	881b      	ldrh	r3, [r3, #0]
    5dfc:	b29b      	uxth	r3, r3
    5dfe:	429a      	cmp	r2, r3
    5e00:	d004      	beq.n	5e0c <interruptHandler+0x9c>
    5e02:	4b40      	ldr	r3, [pc, #256]	; (5f04 <interruptHandler+0x194>)
    5e04:	881b      	ldrh	r3, [r3, #0]
    5e06:	b29b      	uxth	r3, r3
    5e08:	2bff      	cmp	r3, #255	; 0xff
    5e0a:	d104      	bne.n	5e16 <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    5e0c:	4b3c      	ldr	r3, [pc, #240]	; (5f00 <interruptHandler+0x190>)
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	b29b      	uxth	r3, r3
    5e12:	2b02      	cmp	r3, #2
    5e14:	d807      	bhi.n	5e26 <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    5e16:	4b3a      	ldr	r3, [pc, #232]	; (5f00 <interruptHandler+0x190>)
    5e18:	2200      	movs	r2, #0
    5e1a:	801a      	strh	r2, [r3, #0]
      unselect();
    5e1c:	4b3c      	ldr	r3, [pc, #240]	; (5f10 <interruptHandler+0x1a0>)
    5e1e:	4798      	blx	r3
      receiveBegin();
    5e20:	4b3c      	ldr	r3, [pc, #240]	; (5f14 <interruptHandler+0x1a4>)
    5e22:	4798      	blx	r3
    5e24:	e05b      	b.n	5ede <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    5e26:	4b36      	ldr	r3, [pc, #216]	; (5f00 <interruptHandler+0x190>)
    5e28:	881b      	ldrh	r3, [r3, #0]
    5e2a:	b29b      	uxth	r3, r3
    5e2c:	3b03      	subs	r3, #3
    5e2e:	b29a      	uxth	r2, r3
    5e30:	4b39      	ldr	r3, [pc, #228]	; (5f18 <interruptHandler+0x1a8>)
    5e32:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    5e34:	4a2f      	ldr	r2, [pc, #188]	; (5ef4 <interruptHandler+0x184>)
    5e36:	4b39      	ldr	r3, [pc, #228]	; (5f1c <interruptHandler+0x1ac>)
    5e38:	1c10      	adds	r0, r2, #0
    5e3a:	2100      	movs	r1, #0
    5e3c:	1c1a      	adds	r2, r3, #0
    5e3e:	4b2f      	ldr	r3, [pc, #188]	; (5efc <interruptHandler+0x18c>)
    5e40:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    5e42:	1dbb      	adds	r3, r7, #6
    5e44:	2200      	movs	r2, #0
    5e46:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    5e48:	4a2a      	ldr	r2, [pc, #168]	; (5ef4 <interruptHandler+0x184>)
    5e4a:	1dbb      	adds	r3, r7, #6
    5e4c:	1c10      	adds	r0, r2, #0
    5e4e:	2100      	movs	r1, #0
    5e50:	1c1a      	adds	r2, r3, #0
    5e52:	4b2a      	ldr	r3, [pc, #168]	; (5efc <interruptHandler+0x18c>)
    5e54:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    5e56:	1dbb      	adds	r3, r7, #6
    5e58:	781b      	ldrb	r3, [r3, #0]
    5e5a:	b29b      	uxth	r3, r3
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	4013      	ands	r3, r2
    5e60:	b29a      	uxth	r2, r3
    5e62:	4b2f      	ldr	r3, [pc, #188]	; (5f20 <interruptHandler+0x1b0>)
    5e64:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    5e66:	1dbb      	adds	r3, r7, #6
    5e68:	781b      	ldrb	r3, [r3, #0]
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	2240      	movs	r2, #64	; 0x40
    5e6e:	4013      	ands	r3, r2
    5e70:	b29a      	uxth	r2, r3
    5e72:	4b2c      	ldr	r3, [pc, #176]	; (5f24 <interruptHandler+0x1b4>)
    5e74:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5e76:	1dfb      	adds	r3, r7, #7
    5e78:	2200      	movs	r2, #0
    5e7a:	701a      	strb	r2, [r3, #0]
    5e7c:	e00f      	b.n	5e9e <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    5e7e:	1dfb      	adds	r3, r7, #7
    5e80:	781b      	ldrb	r3, [r3, #0]
    5e82:	005a      	lsls	r2, r3, #1
    5e84:	4b28      	ldr	r3, [pc, #160]	; (5f28 <interruptHandler+0x1b8>)
    5e86:	18d3      	adds	r3, r2, r3
    5e88:	4a1a      	ldr	r2, [pc, #104]	; (5ef4 <interruptHandler+0x184>)
    5e8a:	1c10      	adds	r0, r2, #0
    5e8c:	2100      	movs	r1, #0
    5e8e:	1c1a      	adds	r2, r3, #0
    5e90:	4b1a      	ldr	r3, [pc, #104]	; (5efc <interruptHandler+0x18c>)
    5e92:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5e94:	1dfb      	adds	r3, r7, #7
    5e96:	781a      	ldrb	r2, [r3, #0]
    5e98:	1dfb      	adds	r3, r7, #7
    5e9a:	3201      	adds	r2, #1
    5e9c:	701a      	strb	r2, [r3, #0]
    5e9e:	1dfb      	adds	r3, r7, #7
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	b29a      	uxth	r2, r3
    5ea4:	4b1c      	ldr	r3, [pc, #112]	; (5f18 <interruptHandler+0x1a8>)
    5ea6:	881b      	ldrh	r3, [r3, #0]
    5ea8:	b29b      	uxth	r3, r3
    5eaa:	429a      	cmp	r2, r3
    5eac:	d3e7      	bcc.n	5e7e <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    5eae:	4b1a      	ldr	r3, [pc, #104]	; (5f18 <interruptHandler+0x1a8>)
    5eb0:	881b      	ldrh	r3, [r3, #0]
    5eb2:	b29b      	uxth	r3, r3
    5eb4:	2b3c      	cmp	r3, #60	; 0x3c
    5eb6:	d807      	bhi.n	5ec8 <interruptHandler+0x158>
    5eb8:	4b17      	ldr	r3, [pc, #92]	; (5f18 <interruptHandler+0x1a8>)
    5eba:	881b      	ldrh	r3, [r3, #0]
    5ebc:	b29b      	uxth	r3, r3
    5ebe:	1c1a      	adds	r2, r3, #0
    5ec0:	4b19      	ldr	r3, [pc, #100]	; (5f28 <interruptHandler+0x1b8>)
    5ec2:	0052      	lsls	r2, r2, #1
    5ec4:	2100      	movs	r1, #0
    5ec6:	52d1      	strh	r1, [r2, r3]
    unselect();
    5ec8:	4b11      	ldr	r3, [pc, #68]	; (5f10 <interruptHandler+0x1a0>)
    5eca:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    5ecc:	2003      	movs	r0, #3
    5ece:	4b07      	ldr	r3, [pc, #28]	; (5eec <interruptHandler+0x17c>)
    5ed0:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    5ed2:	4b16      	ldr	r3, [pc, #88]	; (5f2c <interruptHandler+0x1bc>)
    5ed4:	4798      	blx	r3
    5ed6:	1c03      	adds	r3, r0, #0
    5ed8:	1c1a      	adds	r2, r3, #0
    5eda:	4b15      	ldr	r3, [pc, #84]	; (5f30 <interruptHandler+0x1c0>)
    5edc:	801a      	strh	r2, [r3, #0]
}
    5ede:	46bd      	mov	sp, r7
    5ee0:	b002      	add	sp, #8
    5ee2:	bd80      	pop	{r7, pc}
    5ee4:	2000022e 	.word	0x2000022e
    5ee8:	00006141 	.word	0x00006141
    5eec:	00005b31 	.word	0x00005b31
    5ef0:	00006211 	.word	0x00006211
    5ef4:	20000234 	.word	0x20000234
    5ef8:	20000068 	.word	0x20000068
    5efc:	000034fd 	.word	0x000034fd
    5f00:	200001fc 	.word	0x200001fc
    5f04:	2000022c 	.word	0x2000022c
    5f08:	2000017c 	.word	0x2000017c
    5f0c:	20000174 	.word	0x20000174
    5f10:	0000623d 	.word	0x0000623d
    5f14:	00005f55 	.word	0x00005f55
    5f18:	2000017a 	.word	0x2000017a
    5f1c:	20000116 	.word	0x20000116
    5f20:	20000178 	.word	0x20000178
    5f24:	2000022a 	.word	0x2000022a
    5f28:	20000180 	.word	0x20000180
    5f2c:	000060fd 	.word	0x000060fd
    5f30:	20000270 	.word	0x20000270

00005f34 <isr0>:

// internal function
void isr0()
{ 
    5f34:	b580      	push	{r7, lr}
    5f36:	af00      	add	r7, sp, #0
	_inISR = true; 
    5f38:	4b04      	ldr	r3, [pc, #16]	; (5f4c <isr0+0x18>)
    5f3a:	2201      	movs	r2, #1
    5f3c:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    5f3e:	4b04      	ldr	r3, [pc, #16]	; (5f50 <isr0+0x1c>)
    5f40:	4798      	blx	r3
	_inISR = false;
    5f42:	4b02      	ldr	r3, [pc, #8]	; (5f4c <isr0+0x18>)
    5f44:	2200      	movs	r2, #0
    5f46:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    5f48:	46bd      	mov	sp, r7
    5f4a:	bd80      	pop	{r7, pc}
    5f4c:	20000131 	.word	0x20000131
    5f50:	00005d71 	.word	0x00005d71

00005f54 <receiveBegin>:

// internal function
void receiveBegin() {
    5f54:	b580      	push	{r7, lr}
    5f56:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    5f58:	4b18      	ldr	r3, [pc, #96]	; (5fbc <receiveBegin+0x68>)
    5f5a:	2200      	movs	r2, #0
    5f5c:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    5f5e:	4b18      	ldr	r3, [pc, #96]	; (5fc0 <receiveBegin+0x6c>)
    5f60:	2200      	movs	r2, #0
    5f62:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    5f64:	4b17      	ldr	r3, [pc, #92]	; (5fc4 <receiveBegin+0x70>)
    5f66:	2200      	movs	r2, #0
    5f68:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    5f6a:	4b17      	ldr	r3, [pc, #92]	; (5fc8 <receiveBegin+0x74>)
    5f6c:	2200      	movs	r2, #0
    5f6e:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    5f70:	4b16      	ldr	r3, [pc, #88]	; (5fcc <receiveBegin+0x78>)
    5f72:	2200      	movs	r2, #0
    5f74:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    5f76:	4b16      	ldr	r3, [pc, #88]	; (5fd0 <receiveBegin+0x7c>)
    5f78:	2200      	movs	r2, #0
    5f7a:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    5f7c:	4b15      	ldr	r3, [pc, #84]	; (5fd4 <receiveBegin+0x80>)
    5f7e:	2200      	movs	r2, #0
    5f80:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    5f82:	2028      	movs	r0, #40	; 0x28
    5f84:	4b14      	ldr	r3, [pc, #80]	; (5fd8 <receiveBegin+0x84>)
    5f86:	4798      	blx	r3
    5f88:	1c03      	adds	r3, r0, #0
    5f8a:	1c1a      	adds	r2, r3, #0
    5f8c:	2304      	movs	r3, #4
    5f8e:	4013      	ands	r3, r2
    5f90:	d00b      	beq.n	5faa <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5f92:	203d      	movs	r0, #61	; 0x3d
    5f94:	4b10      	ldr	r3, [pc, #64]	; (5fd8 <receiveBegin+0x84>)
    5f96:	4798      	blx	r3
    5f98:	1c03      	adds	r3, r0, #0
    5f9a:	1c1a      	adds	r2, r3, #0
    5f9c:	2304      	movs	r3, #4
    5f9e:	4313      	orrs	r3, r2
    5fa0:	b2db      	uxtb	r3, r3
    5fa2:	203d      	movs	r0, #61	; 0x3d
    5fa4:	1c19      	adds	r1, r3, #0
    5fa6:	4b0d      	ldr	r3, [pc, #52]	; (5fdc <receiveBegin+0x88>)
    5fa8:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    5faa:	2025      	movs	r0, #37	; 0x25
    5fac:	2140      	movs	r1, #64	; 0x40
    5fae:	4b0b      	ldr	r3, [pc, #44]	; (5fdc <receiveBegin+0x88>)
    5fb0:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    5fb2:	2003      	movs	r0, #3
    5fb4:	4b0a      	ldr	r3, [pc, #40]	; (5fe0 <receiveBegin+0x8c>)
    5fb6:	4798      	blx	r3
}
    5fb8:	46bd      	mov	sp, r7
    5fba:	bd80      	pop	{r7, pc}
    5fbc:	2000017a 	.word	0x2000017a
    5fc0:	20000116 	.word	0x20000116
    5fc4:	2000022c 	.word	0x2000022c
    5fc8:	200001fc 	.word	0x200001fc
    5fcc:	2000022a 	.word	0x2000022a
    5fd0:	20000178 	.word	0x20000178
    5fd4:	20000270 	.word	0x20000270
    5fd8:	00006141 	.word	0x00006141
    5fdc:	000061ad 	.word	0x000061ad
    5fe0:	00005b31 	.word	0x00005b31

00005fe4 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    5fe4:	b580      	push	{r7, lr}
    5fe6:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    5fe8:	4b0f      	ldr	r3, [pc, #60]	; (6028 <RFM_receiveDone+0x44>)
    5fea:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    5fec:	4b0f      	ldr	r3, [pc, #60]	; (602c <RFM_receiveDone+0x48>)
    5fee:	881b      	ldrh	r3, [r3, #0]
    5ff0:	b29b      	uxth	r3, r3
    5ff2:	2b03      	cmp	r3, #3
    5ff4:	d109      	bne.n	600a <RFM_receiveDone+0x26>
    5ff6:	4b0e      	ldr	r3, [pc, #56]	; (6030 <RFM_receiveDone+0x4c>)
    5ff8:	881b      	ldrh	r3, [r3, #0]
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d004      	beq.n	600a <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    6000:	2001      	movs	r0, #1
    6002:	4b0c      	ldr	r3, [pc, #48]	; (6034 <RFM_receiveDone+0x50>)
    6004:	4798      	blx	r3
    return true;
    6006:	2301      	movs	r3, #1
    6008:	e00b      	b.n	6022 <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    600a:	4b08      	ldr	r3, [pc, #32]	; (602c <RFM_receiveDone+0x48>)
    600c:	881b      	ldrh	r3, [r3, #0]
    600e:	b29b      	uxth	r3, r3
    6010:	2b03      	cmp	r3, #3
    6012:	d103      	bne.n	601c <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    6014:	4b08      	ldr	r3, [pc, #32]	; (6038 <RFM_receiveDone+0x54>)
    6016:	4798      	blx	r3
    return false;
    6018:	2300      	movs	r3, #0
    601a:	e002      	b.n	6022 <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    601c:	4b07      	ldr	r3, [pc, #28]	; (603c <RFM_receiveDone+0x58>)
    601e:	4798      	blx	r3
  return false;
    6020:	2300      	movs	r3, #0
}
    6022:	1c18      	adds	r0, r3, #0
    6024:	46bd      	mov	sp, r7
    6026:	bd80      	pop	{r7, pc}
    6028:	00004ff5 	.word	0x00004ff5
    602c:	2000022e 	.word	0x2000022e
    6030:	200001fc 	.word	0x200001fc
    6034:	00005b31 	.word	0x00005b31
    6038:	00004fdd 	.word	0x00004fdd
    603c:	00005f55 	.word	0x00005f55

00006040 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    6040:	b580      	push	{r7, lr}
    6042:	b084      	sub	sp, #16
    6044:	af00      	add	r7, sp, #0
    6046:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    6048:	2001      	movs	r0, #1
    604a:	4b24      	ldr	r3, [pc, #144]	; (60dc <RFM_encrypt+0x9c>)
    604c:	4798      	blx	r3
  if (key != 0)
    604e:	687b      	ldr	r3, [r7, #4]
    6050:	2b00      	cmp	r3, #0
    6052:	d029      	beq.n	60a8 <RFM_encrypt+0x68>
  {
    radioselect();
    6054:	4b22      	ldr	r3, [pc, #136]	; (60e0 <RFM_encrypt+0xa0>)
    6056:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    6058:	4a22      	ldr	r2, [pc, #136]	; (60e4 <RFM_encrypt+0xa4>)
    605a:	4b23      	ldr	r3, [pc, #140]	; (60e8 <RFM_encrypt+0xa8>)
    605c:	1c10      	adds	r0, r2, #0
    605e:	21be      	movs	r1, #190	; 0xbe
    6060:	1c1a      	adds	r2, r3, #0
    6062:	4b22      	ldr	r3, [pc, #136]	; (60ec <RFM_encrypt+0xac>)
    6064:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    6066:	230f      	movs	r3, #15
    6068:	18fb      	adds	r3, r7, r3
    606a:	2200      	movs	r2, #0
    606c:	701a      	strb	r2, [r3, #0]
    606e:	e014      	b.n	609a <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    6070:	230f      	movs	r3, #15
    6072:	18fb      	adds	r3, r7, r3
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	687a      	ldr	r2, [r7, #4]
    6078:	18d3      	adds	r3, r2, r3
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	b29a      	uxth	r2, r3
    607e:	4919      	ldr	r1, [pc, #100]	; (60e4 <RFM_encrypt+0xa4>)
    6080:	4b19      	ldr	r3, [pc, #100]	; (60e8 <RFM_encrypt+0xa8>)
    6082:	1c08      	adds	r0, r1, #0
    6084:	1c11      	adds	r1, r2, #0
    6086:	1c1a      	adds	r2, r3, #0
    6088:	4b18      	ldr	r3, [pc, #96]	; (60ec <RFM_encrypt+0xac>)
    608a:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    radioselect();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    608c:	230f      	movs	r3, #15
    608e:	18fb      	adds	r3, r7, r3
    6090:	781a      	ldrb	r2, [r3, #0]
    6092:	230f      	movs	r3, #15
    6094:	18fb      	adds	r3, r7, r3
    6096:	3201      	adds	r2, #1
    6098:	701a      	strb	r2, [r3, #0]
    609a:	230f      	movs	r3, #15
    609c:	18fb      	adds	r3, r7, r3
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	2b0f      	cmp	r3, #15
    60a2:	d9e5      	bls.n	6070 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    60a4:	4b12      	ldr	r3, [pc, #72]	; (60f0 <RFM_encrypt+0xb0>)
    60a6:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    60a8:	203d      	movs	r0, #61	; 0x3d
    60aa:	4b12      	ldr	r3, [pc, #72]	; (60f4 <RFM_encrypt+0xb4>)
    60ac:	4798      	blx	r3
    60ae:	1c03      	adds	r3, r0, #0
    60b0:	b2db      	uxtb	r3, r3
    60b2:	1c1a      	adds	r2, r3, #0
    60b4:	2301      	movs	r3, #1
    60b6:	439a      	bics	r2, r3
    60b8:	1c13      	adds	r3, r2, #0
    60ba:	b2da      	uxtb	r2, r3
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	1e59      	subs	r1, r3, #1
    60c0:	418b      	sbcs	r3, r1
    60c2:	b2db      	uxtb	r3, r3
    60c4:	b2db      	uxtb	r3, r3
    60c6:	4313      	orrs	r3, r2
    60c8:	b2db      	uxtb	r3, r3
    60ca:	b2db      	uxtb	r3, r3
    60cc:	203d      	movs	r0, #61	; 0x3d
    60ce:	1c19      	adds	r1, r3, #0
    60d0:	4b09      	ldr	r3, [pc, #36]	; (60f8 <RFM_encrypt+0xb8>)
    60d2:	4798      	blx	r3
}
    60d4:	46bd      	mov	sp, r7
    60d6:	b004      	add	sp, #16
    60d8:	bd80      	pop	{r7, pc}
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	00005b31 	.word	0x00005b31
    60e0:	00006211 	.word	0x00006211
    60e4:	20000234 	.word	0x20000234
    60e8:	20000068 	.word	0x20000068
    60ec:	000034fd 	.word	0x000034fd
    60f0:	0000623d 	.word	0x0000623d
    60f4:	00006141 	.word	0x00006141
    60f8:	000061ad 	.word	0x000061ad

000060fc <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    60fc:	b580      	push	{r7, lr}
    60fe:	b082      	sub	sp, #8
    6100:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    6102:	1dbb      	adds	r3, r7, #6
    6104:	2200      	movs	r2, #0
    6106:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    6108:	2024      	movs	r0, #36	; 0x24
    610a:	4b0c      	ldr	r3, [pc, #48]	; (613c <readRSSI+0x40>)
    610c:	4798      	blx	r3
    610e:	1c03      	adds	r3, r0, #0
    6110:	b29b      	uxth	r3, r3
    6112:	425b      	negs	r3, r3
    6114:	b29b      	uxth	r3, r3
    6116:	b29a      	uxth	r2, r3
    6118:	1dbb      	adds	r3, r7, #6
    611a:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    611c:	1dbb      	adds	r3, r7, #6
    611e:	881b      	ldrh	r3, [r3, #0]
    6120:	b29b      	uxth	r3, r3
    6122:	b21b      	sxth	r3, r3
    6124:	105b      	asrs	r3, r3, #1
    6126:	b29a      	uxth	r2, r3
    6128:	1dbb      	adds	r3, r7, #6
    612a:	801a      	strh	r2, [r3, #0]
  return rssi;
    612c:	1dbb      	adds	r3, r7, #6
    612e:	881b      	ldrh	r3, [r3, #0]
    6130:	b29b      	uxth	r3, r3
    6132:	b21b      	sxth	r3, r3
}
    6134:	1c18      	adds	r0, r3, #0
    6136:	46bd      	mov	sp, r7
    6138:	b002      	add	sp, #8
    613a:	bd80      	pop	{r7, pc}
    613c:	00006141 	.word	0x00006141

00006140 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    6140:	b580      	push	{r7, lr}
    6142:	b084      	sub	sp, #16
    6144:	af00      	add	r7, sp, #0
    6146:	1c02      	adds	r2, r0, #0
    6148:	1dbb      	adds	r3, r7, #6
    614a:	801a      	strh	r2, [r3, #0]
  radioselect();
    614c:	4b12      	ldr	r3, [pc, #72]	; (6198 <readReg+0x58>)
    614e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    6150:	1dbb      	adds	r3, r7, #6
    6152:	881b      	ldrh	r3, [r3, #0]
    6154:	b29b      	uxth	r3, r3
    6156:	227f      	movs	r2, #127	; 0x7f
    6158:	4013      	ands	r3, r2
    615a:	b29a      	uxth	r2, r3
    615c:	490f      	ldr	r1, [pc, #60]	; (619c <readReg+0x5c>)
    615e:	4b10      	ldr	r3, [pc, #64]	; (61a0 <readReg+0x60>)
    6160:	1c08      	adds	r0, r1, #0
    6162:	1c11      	adds	r1, r2, #0
    6164:	1c1a      	adds	r2, r3, #0
    6166:	4b0f      	ldr	r3, [pc, #60]	; (61a4 <readReg+0x64>)
    6168:	4798      	blx	r3
  volatile uint16_t regval = 0;
    616a:	230e      	movs	r3, #14
    616c:	18fb      	adds	r3, r7, r3
    616e:	2200      	movs	r2, #0
    6170:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    6172:	4a0a      	ldr	r2, [pc, #40]	; (619c <readReg+0x5c>)
    6174:	230e      	movs	r3, #14
    6176:	18fb      	adds	r3, r7, r3
    6178:	1c10      	adds	r0, r2, #0
    617a:	2100      	movs	r1, #0
    617c:	1c1a      	adds	r2, r3, #0
    617e:	4b09      	ldr	r3, [pc, #36]	; (61a4 <readReg+0x64>)
    6180:	4798      	blx	r3
  unselect();
    6182:	4b09      	ldr	r3, [pc, #36]	; (61a8 <readReg+0x68>)
    6184:	4798      	blx	r3
  return (uint8_t)regval;
    6186:	230e      	movs	r3, #14
    6188:	18fb      	adds	r3, r7, r3
    618a:	881b      	ldrh	r3, [r3, #0]
    618c:	b29b      	uxth	r3, r3
    618e:	b2db      	uxtb	r3, r3
}
    6190:	1c18      	adds	r0, r3, #0
    6192:	46bd      	mov	sp, r7
    6194:	b004      	add	sp, #16
    6196:	bd80      	pop	{r7, pc}
    6198:	00006211 	.word	0x00006211
    619c:	20000234 	.word	0x20000234
    61a0:	20000068 	.word	0x20000068
    61a4:	000034fd 	.word	0x000034fd
    61a8:	0000623d 	.word	0x0000623d

000061ac <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b082      	sub	sp, #8
    61b0:	af00      	add	r7, sp, #0
    61b2:	1c02      	adds	r2, r0, #0
    61b4:	1dfb      	adds	r3, r7, #7
    61b6:	701a      	strb	r2, [r3, #0]
    61b8:	1dbb      	adds	r3, r7, #6
    61ba:	1c0a      	adds	r2, r1, #0
    61bc:	701a      	strb	r2, [r3, #0]
  radioselect();
    61be:	4b0f      	ldr	r3, [pc, #60]	; (61fc <writeReg+0x50>)
    61c0:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    61c2:	1dfb      	adds	r3, r7, #7
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2280      	movs	r2, #128	; 0x80
    61c8:	4252      	negs	r2, r2
    61ca:	4313      	orrs	r3, r2
    61cc:	b2db      	uxtb	r3, r3
    61ce:	b29a      	uxth	r2, r3
    61d0:	490b      	ldr	r1, [pc, #44]	; (6200 <writeReg+0x54>)
    61d2:	4b0c      	ldr	r3, [pc, #48]	; (6204 <writeReg+0x58>)
    61d4:	1c08      	adds	r0, r1, #0
    61d6:	1c11      	adds	r1, r2, #0
    61d8:	1c1a      	adds	r2, r3, #0
    61da:	4b0b      	ldr	r3, [pc, #44]	; (6208 <writeReg+0x5c>)
    61dc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    61de:	1dbb      	adds	r3, r7, #6
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	b29a      	uxth	r2, r3
    61e4:	4906      	ldr	r1, [pc, #24]	; (6200 <writeReg+0x54>)
    61e6:	4b07      	ldr	r3, [pc, #28]	; (6204 <writeReg+0x58>)
    61e8:	1c08      	adds	r0, r1, #0
    61ea:	1c11      	adds	r1, r2, #0
    61ec:	1c1a      	adds	r2, r3, #0
    61ee:	4b06      	ldr	r3, [pc, #24]	; (6208 <writeReg+0x5c>)
    61f0:	4798      	blx	r3
  unselect();
    61f2:	4b06      	ldr	r3, [pc, #24]	; (620c <writeReg+0x60>)
    61f4:	4798      	blx	r3
}
    61f6:	46bd      	mov	sp, r7
    61f8:	b002      	add	sp, #8
    61fa:	bd80      	pop	{r7, pc}
    61fc:	00006211 	.word	0x00006211
    6200:	20000234 	.word	0x20000234
    6204:	20000068 	.word	0x20000068
    6208:	000034fd 	.word	0x000034fd
    620c:	0000623d 	.word	0x0000623d

00006210 <radioselect>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void radioselect() {
    6210:	b580      	push	{r7, lr}
    6212:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    6214:	4b05      	ldr	r3, [pc, #20]	; (622c <radioselect+0x1c>)
    6216:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    6218:	4a05      	ldr	r2, [pc, #20]	; (6230 <radioselect+0x20>)
    621a:	4b06      	ldr	r3, [pc, #24]	; (6234 <radioselect+0x24>)
    621c:	1c10      	adds	r0, r2, #0
    621e:	1c19      	adds	r1, r3, #0
    6220:	2201      	movs	r2, #1
    6222:	4b05      	ldr	r3, [pc, #20]	; (6238 <radioselect+0x28>)
    6224:	4798      	blx	r3
}
    6226:	46bd      	mov	sp, r7
    6228:	bd80      	pop	{r7, pc}
    622a:	46c0      	nop			; (mov r8, r8)
    622c:	00004ff5 	.word	0x00004ff5
    6230:	20000234 	.word	0x20000234
    6234:	200002b4 	.word	0x200002b4
    6238:	00003645 	.word	0x00003645

0000623c <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    623c:	b580      	push	{r7, lr}
    623e:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    6240:	4a05      	ldr	r2, [pc, #20]	; (6258 <unselect+0x1c>)
    6242:	4b06      	ldr	r3, [pc, #24]	; (625c <unselect+0x20>)
    6244:	1c10      	adds	r0, r2, #0
    6246:	1c19      	adds	r1, r3, #0
    6248:	2200      	movs	r2, #0
    624a:	4b05      	ldr	r3, [pc, #20]	; (6260 <unselect+0x24>)
    624c:	4798      	blx	r3
  maybeInterrupts();
    624e:	4b05      	ldr	r3, [pc, #20]	; (6264 <unselect+0x28>)
    6250:	4798      	blx	r3
}
    6252:	46bd      	mov	sp, r7
    6254:	bd80      	pop	{r7, pc}
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	20000234 	.word	0x20000234
    625c:	200002b4 	.word	0x200002b4
    6260:	00003645 	.word	0x00003645
    6264:	000062ad 	.word	0x000062ad

00006268 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    6268:	b580      	push	{r7, lr}
    626a:	b082      	sub	sp, #8
    626c:	af00      	add	r7, sp, #0
    626e:	1c02      	adds	r2, r0, #0
    6270:	1dfb      	adds	r3, r7, #7
    6272:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    6274:	1dfb      	adds	r3, r7, #7
    6276:	781b      	ldrb	r3, [r3, #0]
    6278:	2b00      	cmp	r3, #0
    627a:	d001      	beq.n	6280 <setHighPowerRegs+0x18>
    627c:	235d      	movs	r3, #93	; 0x5d
    627e:	e000      	b.n	6282 <setHighPowerRegs+0x1a>
    6280:	2355      	movs	r3, #85	; 0x55
    6282:	205a      	movs	r0, #90	; 0x5a
    6284:	1c19      	adds	r1, r3, #0
    6286:	4b08      	ldr	r3, [pc, #32]	; (62a8 <setHighPowerRegs+0x40>)
    6288:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    628a:	1dfb      	adds	r3, r7, #7
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	2b00      	cmp	r3, #0
    6290:	d001      	beq.n	6296 <setHighPowerRegs+0x2e>
    6292:	237c      	movs	r3, #124	; 0x7c
    6294:	e000      	b.n	6298 <setHighPowerRegs+0x30>
    6296:	2370      	movs	r3, #112	; 0x70
    6298:	205c      	movs	r0, #92	; 0x5c
    629a:	1c19      	adds	r1, r3, #0
    629c:	4b02      	ldr	r3, [pc, #8]	; (62a8 <setHighPowerRegs+0x40>)
    629e:	4798      	blx	r3
}
    62a0:	46bd      	mov	sp, r7
    62a2:	b002      	add	sp, #8
    62a4:	bd80      	pop	{r7, pc}
    62a6:	46c0      	nop			; (mov r8, r8)
    62a8:	000061ad 	.word	0x000061ad

000062ac <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    62ac:	b580      	push	{r7, lr}
    62ae:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    62b0:	4b05      	ldr	r3, [pc, #20]	; (62c8 <maybeInterrupts+0x1c>)
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	b2db      	uxtb	r3, r3
    62b6:	2201      	movs	r2, #1
    62b8:	4053      	eors	r3, r2
    62ba:	b2db      	uxtb	r3, r3
    62bc:	2b00      	cmp	r3, #0
    62be:	d001      	beq.n	62c4 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    62c0:	4b02      	ldr	r3, [pc, #8]	; (62cc <maybeInterrupts+0x20>)
    62c2:	4798      	blx	r3
}
    62c4:	46bd      	mov	sp, r7
    62c6:	bd80      	pop	{r7, pc}
    62c8:	20000131 	.word	0x20000131
    62cc:	00004fdd 	.word	0x00004fdd

000062d0 <configure_i2c_master>:
struct i2c_master_module i2c_master_instance;
void configure_i2c_master(void);


void configure_i2c_master(void)
{
    62d0:	b580      	push	{r7, lr}
    62d2:	b08e      	sub	sp, #56	; 0x38
    62d4:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    62d6:	1d3b      	adds	r3, r7, #4
    62d8:	1c18      	adds	r0, r3, #0
    62da:	4b0c      	ldr	r3, [pc, #48]	; (630c <configure_i2c_master+0x3c>)
    62dc:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    62de:	1d3b      	adds	r3, r7, #4
    62e0:	4a0b      	ldr	r2, [pc, #44]	; (6310 <configure_i2c_master+0x40>)
    62e2:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    62e4:	1d3b      	adds	r3, r7, #4
    62e6:	4a0b      	ldr	r2, [pc, #44]	; (6314 <configure_i2c_master+0x44>)
    62e8:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    62ea:	1d3b      	adds	r3, r7, #4
    62ec:	4a0a      	ldr	r2, [pc, #40]	; (6318 <configure_i2c_master+0x48>)
    62ee:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    62f0:	4a0a      	ldr	r2, [pc, #40]	; (631c <configure_i2c_master+0x4c>)
    62f2:	490b      	ldr	r1, [pc, #44]	; (6320 <configure_i2c_master+0x50>)
    62f4:	1d3b      	adds	r3, r7, #4
    62f6:	1c10      	adds	r0, r2, #0
    62f8:	1c1a      	adds	r2, r3, #0
    62fa:	4b0a      	ldr	r3, [pc, #40]	; (6324 <configure_i2c_master+0x54>)
    62fc:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    62fe:	4b07      	ldr	r3, [pc, #28]	; (631c <configure_i2c_master+0x4c>)
    6300:	1c18      	adds	r0, r3, #0
    6302:	4b09      	ldr	r3, [pc, #36]	; (6328 <configure_i2c_master+0x58>)
    6304:	4798      	blx	r3
}
    6306:	46bd      	mov	sp, r7
    6308:	b00e      	add	sp, #56	; 0x38
    630a:	bd80      	pop	{r7, pc}
    630c:	000050d9 	.word	0x000050d9
    6310:	00002710 	.word	0x00002710
    6314:	00160002 	.word	0x00160002
    6318:	00170002 	.word	0x00170002
    631c:	20000200 	.word	0x20000200
    6320:	42001400 	.word	0x42001400
    6324:	00001501 	.word	0x00001501
    6328:	00005159 	.word	0x00005159

0000632c <lipo_begin>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Initializes I2C and verifies communication with the BQ27441.
bool lipo_begin(void)
{
    632c:	b590      	push	{r4, r7, lr}
    632e:	b083      	sub	sp, #12
    6330:	af00      	add	r7, sp, #0
	uint16_t deviceID = 0;
    6332:	1dbb      	adds	r3, r7, #6
    6334:	2200      	movs	r2, #0
    6336:	801a      	strh	r2, [r3, #0]
	
	_userConfigControl = false;
    6338:	4b0d      	ldr	r3, [pc, #52]	; (6370 <lipo_begin+0x44>)
    633a:	2200      	movs	r2, #0
    633c:	701a      	strb	r2, [r3, #0]
	_sealFlag = false;
    633e:	4b0d      	ldr	r3, [pc, #52]	; (6374 <lipo_begin+0x48>)
    6340:	2200      	movs	r2, #0
    6342:	701a      	strb	r2, [r3, #0]
	_deviceAddress = BQ72441_I2C_ADDRESS;
    6344:	4b0c      	ldr	r3, [pc, #48]	; (6378 <lipo_begin+0x4c>)
    6346:	2255      	movs	r2, #85	; 0x55
    6348:	701a      	strb	r2, [r3, #0]
	configure_i2c_master(); // Initialize I2C master
    634a:	4b0c      	ldr	r3, [pc, #48]	; (637c <lipo_begin+0x50>)
    634c:	4798      	blx	r3
	
	deviceID = deviceType(); // Read deviceType from BQ27441
    634e:	1dbc      	adds	r4, r7, #6
    6350:	4b0b      	ldr	r3, [pc, #44]	; (6380 <lipo_begin+0x54>)
    6352:	4798      	blx	r3
    6354:	1c03      	adds	r3, r0, #0
    6356:	8023      	strh	r3, [r4, #0]
	
	if (deviceID == BQ27441_DEVICE_ID)
    6358:	1dbb      	adds	r3, r7, #6
    635a:	881b      	ldrh	r3, [r3, #0]
    635c:	4a09      	ldr	r2, [pc, #36]	; (6384 <lipo_begin+0x58>)
    635e:	4293      	cmp	r3, r2
    6360:	d101      	bne.n	6366 <lipo_begin+0x3a>
	{
		return true; // If device ID is valid, return true
    6362:	2301      	movs	r3, #1
    6364:	e000      	b.n	6368 <lipo_begin+0x3c>
	}
	
	return false; // Otherwise return false
    6366:	2300      	movs	r3, #0
}
    6368:	1c18      	adds	r0, r3, #0
    636a:	46bd      	mov	sp, r7
    636c:	b003      	add	sp, #12
    636e:	bd90      	pop	{r4, r7, pc}
    6370:	20000176 	.word	0x20000176
    6374:	20000228 	.word	0x20000228
    6378:	20000175 	.word	0x20000175
    637c:	000062d1 	.word	0x000062d1
    6380:	000064a9 	.word	0x000064a9
    6384:	00000421 	.word	0x00000421

00006388 <lipo_setCapacity>:

// Configures the design capacity of the connected battery.
bool lipo_setCapacity(uint16_t capacity)
{
    6388:	b590      	push	{r4, r7, lr}
    638a:	b085      	sub	sp, #20
    638c:	af00      	add	r7, sp, #0
    638e:	1c02      	adds	r2, r0, #0
    6390:	1dbb      	adds	r3, r7, #6
    6392:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	uint8_t capMSB = capacity >> 8;
    6394:	1dbb      	adds	r3, r7, #6
    6396:	881b      	ldrh	r3, [r3, #0]
    6398:	0a1b      	lsrs	r3, r3, #8
    639a:	b29a      	uxth	r2, r3
    639c:	230f      	movs	r3, #15
    639e:	18fb      	adds	r3, r7, r3
    63a0:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
    63a2:	230e      	movs	r3, #14
    63a4:	18fb      	adds	r3, r7, r3
    63a6:	1dba      	adds	r2, r7, #6
    63a8:	8812      	ldrh	r2, [r2, #0]
    63aa:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capMSB, capLSB};
    63ac:	230c      	movs	r3, #12
    63ae:	18fb      	adds	r3, r7, r3
    63b0:	220f      	movs	r2, #15
    63b2:	18ba      	adds	r2, r7, r2
    63b4:	7812      	ldrb	r2, [r2, #0]
    63b6:	701a      	strb	r2, [r3, #0]
    63b8:	230c      	movs	r3, #12
    63ba:	18fb      	adds	r3, r7, r3
    63bc:	220e      	movs	r2, #14
    63be:	18ba      	adds	r2, r7, r2
    63c0:	7812      	ldrb	r2, [r2, #0]
    63c2:	705a      	strb	r2, [r3, #1]
	return writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
    63c4:	230c      	movs	r3, #12
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	2052      	movs	r0, #82	; 0x52
    63ca:	210a      	movs	r1, #10
    63cc:	1c1a      	adds	r2, r3, #0
    63ce:	2302      	movs	r3, #2
    63d0:	4c03      	ldr	r4, [pc, #12]	; (63e0 <lipo_setCapacity+0x58>)
    63d2:	47a0      	blx	r4
    63d4:	1c03      	adds	r3, r0, #0
}
    63d6:	1c18      	adds	r0, r3, #0
    63d8:	46bd      	mov	sp, r7
    63da:	b005      	add	sp, #20
    63dc:	bd90      	pop	{r4, r7, pc}
    63de:	46c0      	nop			; (mov r8, r8)
    63e0:	00006999 	.word	0x00006999

000063e4 <lipo_current>:
	return readWord(BQ27441_COMMAND_VOLTAGE);
}

// Reads and returns the specified current measurement
int16_t lipo_current(current_measure type)
{
    63e4:	b580      	push	{r7, lr}
    63e6:	b084      	sub	sp, #16
    63e8:	af00      	add	r7, sp, #0
    63ea:	1c02      	adds	r2, r0, #0
    63ec:	1dfb      	adds	r3, r7, #7
    63ee:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
    63f0:	230e      	movs	r3, #14
    63f2:	18fb      	adds	r3, r7, r3
    63f4:	2200      	movs	r2, #0
    63f6:	801a      	strh	r2, [r3, #0]
	switch (type)
    63f8:	1dfb      	adds	r3, r7, #7
    63fa:	781b      	ldrb	r3, [r3, #0]
    63fc:	2b01      	cmp	r3, #1
    63fe:	d00c      	beq.n	641a <lipo_current+0x36>
    6400:	2b02      	cmp	r3, #2
    6402:	d013      	beq.n	642c <lipo_current+0x48>
    6404:	2b00      	cmp	r3, #0
    6406:	d11a      	bne.n	643e <lipo_current+0x5a>
	{
	case AVG:
		current = (int16_t) readWord(BQ27441_COMMAND_AVG_CURRENT);
    6408:	2010      	movs	r0, #16
    640a:	4b11      	ldr	r3, [pc, #68]	; (6450 <lipo_current+0x6c>)
    640c:	4798      	blx	r3
    640e:	1c03      	adds	r3, r0, #0
    6410:	1c1a      	adds	r2, r3, #0
    6412:	230e      	movs	r3, #14
    6414:	18fb      	adds	r3, r7, r3
    6416:	801a      	strh	r2, [r3, #0]
		break;
    6418:	e011      	b.n	643e <lipo_current+0x5a>
	case STBY:
		current = (int16_t) readWord(BQ27441_COMMAND_STDBY_CURRENT);
    641a:	2012      	movs	r0, #18
    641c:	4b0c      	ldr	r3, [pc, #48]	; (6450 <lipo_current+0x6c>)
    641e:	4798      	blx	r3
    6420:	1c03      	adds	r3, r0, #0
    6422:	1c1a      	adds	r2, r3, #0
    6424:	230e      	movs	r3, #14
    6426:	18fb      	adds	r3, r7, r3
    6428:	801a      	strh	r2, [r3, #0]
		break;
    642a:	e008      	b.n	643e <lipo_current+0x5a>
	case MAX:
		current = (int16_t) readWord(BQ27441_COMMAND_MAX_CURRENT);
    642c:	2014      	movs	r0, #20
    642e:	4b08      	ldr	r3, [pc, #32]	; (6450 <lipo_current+0x6c>)
    6430:	4798      	blx	r3
    6432:	1c03      	adds	r3, r0, #0
    6434:	1c1a      	adds	r2, r3, #0
    6436:	230e      	movs	r3, #14
    6438:	18fb      	adds	r3, r7, r3
    643a:	801a      	strh	r2, [r3, #0]
		break;
    643c:	46c0      	nop			; (mov r8, r8)
	}
	
	return current;
    643e:	230e      	movs	r3, #14
    6440:	18fb      	adds	r3, r7, r3
    6442:	881b      	ldrh	r3, [r3, #0]
    6444:	b21b      	sxth	r3, r3
}
    6446:	1c18      	adds	r0, r3, #0
    6448:	46bd      	mov	sp, r7
    644a:	b004      	add	sp, #16
    644c:	bd80      	pop	{r7, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	000066c9 	.word	0x000066c9

00006454 <lipo_soc>:
	return (int16_t) readWord(BQ27441_COMMAND_AVG_POWER);
}

// Reads and returns specified state of charge measurement
uint16_t lipo_soc(soc_measure type)
{
    6454:	b590      	push	{r4, r7, lr}
    6456:	b085      	sub	sp, #20
    6458:	af00      	add	r7, sp, #0
    645a:	1c02      	adds	r2, r0, #0
    645c:	1dfb      	adds	r3, r7, #7
    645e:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
    6460:	230e      	movs	r3, #14
    6462:	18fb      	adds	r3, r7, r3
    6464:	2200      	movs	r2, #0
    6466:	801a      	strh	r2, [r3, #0]
	switch (type)
    6468:	1dfb      	adds	r3, r7, #7
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	2b00      	cmp	r3, #0
    646e:	d002      	beq.n	6476 <lipo_soc+0x22>
    6470:	2b01      	cmp	r3, #1
    6472:	d008      	beq.n	6486 <lipo_soc+0x32>
    6474:	e00f      	b.n	6496 <lipo_soc+0x42>
	{
	case FILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC);
    6476:	230e      	movs	r3, #14
    6478:	18fc      	adds	r4, r7, r3
    647a:	201c      	movs	r0, #28
    647c:	4b09      	ldr	r3, [pc, #36]	; (64a4 <lipo_soc+0x50>)
    647e:	4798      	blx	r3
    6480:	1c03      	adds	r3, r0, #0
    6482:	8023      	strh	r3, [r4, #0]
		break;
    6484:	e007      	b.n	6496 <lipo_soc+0x42>
	case UNFILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL);
    6486:	230e      	movs	r3, #14
    6488:	18fc      	adds	r4, r7, r3
    648a:	2030      	movs	r0, #48	; 0x30
    648c:	4b05      	ldr	r3, [pc, #20]	; (64a4 <lipo_soc+0x50>)
    648e:	4798      	blx	r3
    6490:	1c03      	adds	r3, r0, #0
    6492:	8023      	strh	r3, [r4, #0]
		break;
    6494:	46c0      	nop			; (mov r8, r8)
	}
	
	return socRet;
    6496:	230e      	movs	r3, #14
    6498:	18fb      	adds	r3, r7, r3
    649a:	881b      	ldrh	r3, [r3, #0]
}
    649c:	1c18      	adds	r0, r3, #0
    649e:	46bd      	mov	sp, r7
    64a0:	b005      	add	sp, #20
    64a2:	bd90      	pop	{r4, r7, pc}
    64a4:	000066c9 	.word	0x000066c9

000064a8 <deviceType>:
 *************************** Control Sub-Commands ****************************
 *****************************************************************************/

// Read the device type - should be 0x0421
uint16_t deviceType(void)
{
    64a8:	b580      	push	{r7, lr}
    64aa:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_DEVICE_TYPE);
    64ac:	2001      	movs	r0, #1
    64ae:	4b03      	ldr	r3, [pc, #12]	; (64bc <deviceType+0x14>)
    64b0:	4798      	blx	r3
    64b2:	1c03      	adds	r3, r0, #0
}
    64b4:	1c18      	adds	r0, r3, #0
    64b6:	46bd      	mov	sp, r7
    64b8:	bd80      	pop	{r7, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	0000670d 	.word	0x0000670d

000064c0 <enterConfig>:

// Enter configuration mode - set userControl if calling from an Arduino sketch
// and you want control over when to exitConfig
bool enterConfig(bool userControl)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b084      	sub	sp, #16
    64c4:	af00      	add	r7, sp, #0
    64c6:	1c02      	adds	r2, r0, #0
    64c8:	1dfb      	adds	r3, r7, #7
    64ca:	701a      	strb	r2, [r3, #0]
	if (userControl) _userConfigControl = true;
    64cc:	1dfb      	adds	r3, r7, #7
    64ce:	781b      	ldrb	r3, [r3, #0]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d002      	beq.n	64da <enterConfig+0x1a>
    64d4:	4b1a      	ldr	r3, [pc, #104]	; (6540 <enterConfig+0x80>)
    64d6:	2201      	movs	r2, #1
    64d8:	701a      	strb	r2, [r3, #0]
	
	if (sealed())
    64da:	4b1a      	ldr	r3, [pc, #104]	; (6544 <enterConfig+0x84>)
    64dc:	4798      	blx	r3
    64de:	1e03      	subs	r3, r0, #0
    64e0:	d004      	beq.n	64ec <enterConfig+0x2c>
	{
		_sealFlag = true;
    64e2:	4b19      	ldr	r3, [pc, #100]	; (6548 <enterConfig+0x88>)
    64e4:	2201      	movs	r2, #1
    64e6:	701a      	strb	r2, [r3, #0]
		unseal(); // Must be unsealed before making changes
    64e8:	4b18      	ldr	r3, [pc, #96]	; (654c <enterConfig+0x8c>)
    64ea:	4798      	blx	r3
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
    64ec:	2013      	movs	r0, #19
    64ee:	4b18      	ldr	r3, [pc, #96]	; (6550 <enterConfig+0x90>)
    64f0:	4798      	blx	r3
    64f2:	1e03      	subs	r3, r0, #0
    64f4:	d01e      	beq.n	6534 <enterConfig+0x74>
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT - 1900;
    64f6:	230e      	movs	r3, #14
    64f8:	18fb      	adds	r3, r7, r3
    64fa:	2264      	movs	r2, #100	; 0x64
    64fc:	801a      	strh	r2, [r3, #0]
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    64fe:	46c0      	nop			; (mov r8, r8)
    6500:	230e      	movs	r3, #14
    6502:	18fb      	adds	r3, r7, r3
    6504:	881b      	ldrh	r3, [r3, #0]
    6506:	b29a      	uxth	r2, r3
    6508:	3a01      	subs	r2, #1
    650a:	b291      	uxth	r1, r2
    650c:	220e      	movs	r2, #14
    650e:	18ba      	adds	r2, r7, r2
    6510:	8011      	strh	r1, [r2, #0]
    6512:	2b00      	cmp	r3, #0
    6514:	d006      	beq.n	6524 <enterConfig+0x64>
    6516:	4b0f      	ldr	r3, [pc, #60]	; (6554 <enterConfig+0x94>)
    6518:	4798      	blx	r3
    651a:	1c03      	adds	r3, r0, #0
    651c:	1c1a      	adds	r2, r3, #0
    651e:	2310      	movs	r3, #16
    6520:	4013      	ands	r3, r2
    6522:	d0ed      	beq.n	6500 <enterConfig+0x40>
			  uint32_t time = millis();
			}
			*/
		}
		
		if (timeout > 0)
    6524:	230e      	movs	r3, #14
    6526:	18fb      	adds	r3, r7, r3
    6528:	2200      	movs	r2, #0
    652a:	5e9b      	ldrsh	r3, [r3, r2]
    652c:	2b00      	cmp	r3, #0
    652e:	dd01      	ble.n	6534 <enterConfig+0x74>
			return true;
    6530:	2301      	movs	r3, #1
    6532:	e000      	b.n	6536 <enterConfig+0x76>
	}
	
	return false;
    6534:	2300      	movs	r3, #0
}
    6536:	1c18      	adds	r0, r3, #0
    6538:	46bd      	mov	sp, r7
    653a:	b004      	add	sp, #16
    653c:	bd80      	pop	{r7, pc}
    653e:	46c0      	nop			; (mov r8, r8)
    6540:	20000176 	.word	0x20000176
    6544:	00006635 	.word	0x00006635
    6548:	20000228 	.word	0x20000228
    654c:	0000667d 	.word	0x0000667d
    6550:	000067ad 	.word	0x000067ad
    6554:	0000661d 	.word	0x0000661d

00006558 <exitConfig>:

// Exit configuration mode with the option to perform a resimulation
bool exitConfig(bool resim)
{
    6558:	b580      	push	{r7, lr}
    655a:	b084      	sub	sp, #16
    655c:	af00      	add	r7, sp, #0
    655e:	1c02      	adds	r2, r0, #0
    6560:	1dfb      	adds	r3, r7, #7
    6562:	701a      	strb	r2, [r3, #0]
	//    2. Execute the SOFT_RESET command
	// EXIT_CFGUPDATE exits config mode _without_ an OCV (open-circuit voltage)
	// measurement, and without resimulating to update unfiltered-SoC and SoC.
	// If a new OCV measurement or resimulation is desired, SOFT_RESET or
	// EXIT_RESIM should be used to exit config mode.
	if (resim)
    6564:	1dfb      	adds	r3, r7, #7
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	2b00      	cmp	r3, #0
    656a:	d036      	beq.n	65da <exitConfig+0x82>
	{
		if (softReset())
    656c:	4b1f      	ldr	r3, [pc, #124]	; (65ec <exitConfig+0x94>)
    656e:	4798      	blx	r3
    6570:	1e03      	subs	r3, r0, #0
    6572:	d030      	beq.n	65d6 <exitConfig+0x7e>
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
    6574:	230e      	movs	r3, #14
    6576:	18fb      	adds	r3, r7, r3
    6578:	22fa      	movs	r2, #250	; 0xfa
    657a:	00d2      	lsls	r2, r2, #3
    657c:	801a      	strh	r2, [r3, #0]
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    657e:	e00a      	b.n	6596 <exitConfig+0x3e>
			{
				uint32_t time = millis();
    6580:	4b1b      	ldr	r3, [pc, #108]	; (65f0 <exitConfig+0x98>)
    6582:	4798      	blx	r3
    6584:	1c03      	adds	r3, r0, #0
    6586:	60bb      	str	r3, [r7, #8]
				while(millis()-time < 1)
    6588:	46c0      	nop			; (mov r8, r8)
    658a:	4b19      	ldr	r3, [pc, #100]	; (65f0 <exitConfig+0x98>)
    658c:	4798      	blx	r3
    658e:	1e02      	subs	r2, r0, #0
    6590:	68bb      	ldr	r3, [r7, #8]
    6592:	429a      	cmp	r2, r3
    6594:	d0f9      	beq.n	658a <exitConfig+0x32>
	if (resim)
	{
		if (softReset())
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    6596:	230e      	movs	r3, #14
    6598:	18fb      	adds	r3, r7, r3
    659a:	881b      	ldrh	r3, [r3, #0]
    659c:	b29a      	uxth	r2, r3
    659e:	3a01      	subs	r2, #1
    65a0:	b291      	uxth	r1, r2
    65a2:	220e      	movs	r2, #14
    65a4:	18ba      	adds	r2, r7, r2
    65a6:	8011      	strh	r1, [r2, #0]
    65a8:	2b00      	cmp	r3, #0
    65aa:	d006      	beq.n	65ba <exitConfig+0x62>
    65ac:	4b11      	ldr	r3, [pc, #68]	; (65f4 <exitConfig+0x9c>)
    65ae:	4798      	blx	r3
    65b0:	1c03      	adds	r3, r0, #0
    65b2:	1c1a      	adds	r2, r3, #0
    65b4:	2310      	movs	r3, #16
    65b6:	4013      	ands	r3, r2
    65b8:	d1e2      	bne.n	6580 <exitConfig+0x28>
				{
					//Delay(1);
				}
			}

			if (timeout > 0)
    65ba:	230e      	movs	r3, #14
    65bc:	18fb      	adds	r3, r7, r3
    65be:	2200      	movs	r2, #0
    65c0:	5e9b      	ldrsh	r3, [r3, r2]
    65c2:	2b00      	cmp	r3, #0
    65c4:	dd07      	ble.n	65d6 <exitConfig+0x7e>
			{
				if (_sealFlag) seal(); // Seal back up if we IC was sealed coming in
    65c6:	4b0c      	ldr	r3, [pc, #48]	; (65f8 <exitConfig+0xa0>)
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	2b00      	cmp	r3, #0
    65cc:	d001      	beq.n	65d2 <exitConfig+0x7a>
    65ce:	4b0b      	ldr	r3, [pc, #44]	; (65fc <exitConfig+0xa4>)
    65d0:	4798      	blx	r3
				return true;
    65d2:	2301      	movs	r3, #1
    65d4:	e005      	b.n	65e2 <exitConfig+0x8a>
			}
		}
		return false;
    65d6:	2300      	movs	r3, #0
    65d8:	e003      	b.n	65e2 <exitConfig+0x8a>
	}
	else
	{
		return executeControlWord(BQ27441_CONTROL_EXIT_CFGUPDATE);
    65da:	2043      	movs	r0, #67	; 0x43
    65dc:	4b08      	ldr	r3, [pc, #32]	; (6600 <exitConfig+0xa8>)
    65de:	4798      	blx	r3
    65e0:	1c03      	adds	r3, r0, #0
	}	
}
    65e2:	1c18      	adds	r0, r3, #0
    65e4:	46bd      	mov	sp, r7
    65e6:	b004      	add	sp, #16
    65e8:	bd80      	pop	{r7, pc}
    65ea:	46c0      	nop			; (mov r8, r8)
    65ec:	000066b1 	.word	0x000066b1
    65f0:	00005551 	.word	0x00005551
    65f4:	00006605 	.word	0x00006605
    65f8:	20000228 	.word	0x20000228
    65fc:	00006661 	.word	0x00006661
    6600:	000067ad 	.word	0x000067ad

00006604 <flags>:

// Read the flags() command
uint16_t flags(void)
{
    6604:	b580      	push	{r7, lr}
    6606:	af00      	add	r7, sp, #0
	return readWord(BQ27441_COMMAND_FLAGS);
    6608:	2006      	movs	r0, #6
    660a:	4b03      	ldr	r3, [pc, #12]	; (6618 <flags+0x14>)
    660c:	4798      	blx	r3
    660e:	1c03      	adds	r3, r0, #0
}
    6610:	1c18      	adds	r0, r3, #0
    6612:	46bd      	mov	sp, r7
    6614:	bd80      	pop	{r7, pc}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	000066c9 	.word	0x000066c9

0000661c <status>:

// Read the CONTROL_STATUS subcommand of control()
uint16_t status(void)
{
    661c:	b580      	push	{r7, lr}
    661e:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_STATUS);
    6620:	2000      	movs	r0, #0
    6622:	4b03      	ldr	r3, [pc, #12]	; (6630 <status+0x14>)
    6624:	4798      	blx	r3
    6626:	1c03      	adds	r3, r0, #0
}
    6628:	1c18      	adds	r0, r3, #0
    662a:	46bd      	mov	sp, r7
    662c:	bd80      	pop	{r7, pc}
    662e:	46c0      	nop			; (mov r8, r8)
    6630:	0000670d 	.word	0x0000670d

00006634 <sealed>:

/***************************** Private Functions *****************************/

// Check if the BQ27441-G1A is sealed or not.
bool sealed(void)
{
    6634:	b590      	push	{r4, r7, lr}
    6636:	b083      	sub	sp, #12
    6638:	af00      	add	r7, sp, #0
	uint16_t stat = status();
    663a:	1dbc      	adds	r4, r7, #6
    663c:	4b07      	ldr	r3, [pc, #28]	; (665c <sealed+0x28>)
    663e:	4798      	blx	r3
    6640:	1c03      	adds	r3, r0, #0
    6642:	8023      	strh	r3, [r4, #0]
	return stat & BQ27441_STATUS_SS;
    6644:	1dbb      	adds	r3, r7, #6
    6646:	881a      	ldrh	r2, [r3, #0]
    6648:	2380      	movs	r3, #128	; 0x80
    664a:	019b      	lsls	r3, r3, #6
    664c:	4013      	ands	r3, r2
    664e:	1e5a      	subs	r2, r3, #1
    6650:	4193      	sbcs	r3, r2
    6652:	b2db      	uxtb	r3, r3
}
    6654:	1c18      	adds	r0, r3, #0
    6656:	46bd      	mov	sp, r7
    6658:	b003      	add	sp, #12
    665a:	bd90      	pop	{r4, r7, pc}
    665c:	0000661d 	.word	0x0000661d

00006660 <seal>:

// Seal the BQ27441-G1A
bool seal(void)
{
    6660:	b580      	push	{r7, lr}
    6662:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_SEALED);
    6664:	2020      	movs	r0, #32
    6666:	4b04      	ldr	r3, [pc, #16]	; (6678 <seal+0x18>)
    6668:	4798      	blx	r3
    666a:	1c03      	adds	r3, r0, #0
    666c:	1e5a      	subs	r2, r3, #1
    666e:	4193      	sbcs	r3, r2
    6670:	b2db      	uxtb	r3, r3
}
    6672:	1c18      	adds	r0, r3, #0
    6674:	46bd      	mov	sp, r7
    6676:	bd80      	pop	{r7, pc}
    6678:	0000670d 	.word	0x0000670d

0000667c <unseal>:

// UNseal the BQ27441-G1A
bool unseal(void)
{
    667c:	b580      	push	{r7, lr}
    667e:	af00      	add	r7, sp, #0
	// To unseal the BQ27441, write the key to the control
	// command. Then immediately write the same key to control again.
	if (readControlWord(BQ27441_UNSEAL_KEY))
    6680:	2380      	movs	r3, #128	; 0x80
    6682:	021b      	lsls	r3, r3, #8
    6684:	1c18      	adds	r0, r3, #0
    6686:	4b09      	ldr	r3, [pc, #36]	; (66ac <unseal+0x30>)
    6688:	4798      	blx	r3
    668a:	1e03      	subs	r3, r0, #0
    668c:	d009      	beq.n	66a2 <unseal+0x26>
	{
		return readControlWord(BQ27441_UNSEAL_KEY);
    668e:	2380      	movs	r3, #128	; 0x80
    6690:	021b      	lsls	r3, r3, #8
    6692:	1c18      	adds	r0, r3, #0
    6694:	4b05      	ldr	r3, [pc, #20]	; (66ac <unseal+0x30>)
    6696:	4798      	blx	r3
    6698:	1c03      	adds	r3, r0, #0
    669a:	1e5a      	subs	r2, r3, #1
    669c:	4193      	sbcs	r3, r2
    669e:	b2db      	uxtb	r3, r3
    66a0:	e000      	b.n	66a4 <unseal+0x28>
	}
	return false;
    66a2:	2300      	movs	r3, #0
}
    66a4:	1c18      	adds	r0, r3, #0
    66a6:	46bd      	mov	sp, r7
    66a8:	bd80      	pop	{r7, pc}
    66aa:	46c0      	nop			; (mov r8, r8)
    66ac:	0000670d 	.word	0x0000670d

000066b0 <softReset>:
	return writeExtendedData(BQ27441_ID_REGISTERS, 0, opConfigData, 2);	
}

// Issue a soft-reset to the BQ27441-G1A
bool softReset(void)
{
    66b0:	b580      	push	{r7, lr}
    66b2:	af00      	add	r7, sp, #0
	return executeControlWord(BQ27441_CONTROL_SOFT_RESET);
    66b4:	2042      	movs	r0, #66	; 0x42
    66b6:	4b03      	ldr	r3, [pc, #12]	; (66c4 <softReset+0x14>)
    66b8:	4798      	blx	r3
    66ba:	1c03      	adds	r3, r0, #0
}
    66bc:	1c18      	adds	r0, r3, #0
    66be:	46bd      	mov	sp, r7
    66c0:	bd80      	pop	{r7, pc}
    66c2:	46c0      	nop			; (mov r8, r8)
    66c4:	000067ad 	.word	0x000067ad

000066c8 <readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t readWord(uint16_t subAddress)
{
    66c8:	b580      	push	{r7, lr}
    66ca:	b084      	sub	sp, #16
    66cc:	af00      	add	r7, sp, #0
    66ce:	1c02      	adds	r2, r0, #0
    66d0:	1dbb      	adds	r3, r7, #6
    66d2:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	i2cReadBytes(subAddress, data, 2);
    66d4:	1dbb      	adds	r3, r7, #6
    66d6:	881b      	ldrh	r3, [r3, #0]
    66d8:	b2da      	uxtb	r2, r3
    66da:	230c      	movs	r3, #12
    66dc:	18fb      	adds	r3, r7, r3
    66de:	1c10      	adds	r0, r2, #0
    66e0:	1c19      	adds	r1, r3, #0
    66e2:	2202      	movs	r2, #2
    66e4:	4b08      	ldr	r3, [pc, #32]	; (6708 <readWord+0x40>)
    66e6:	4798      	blx	r3
	return ((uint16_t) data[1] << 8) | data[0];
    66e8:	230c      	movs	r3, #12
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	785b      	ldrb	r3, [r3, #1]
    66ee:	021b      	lsls	r3, r3, #8
    66f0:	b29a      	uxth	r2, r3
    66f2:	230c      	movs	r3, #12
    66f4:	18fb      	adds	r3, r7, r3
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	b29b      	uxth	r3, r3
    66fa:	4313      	orrs	r3, r2
    66fc:	b29b      	uxth	r3, r3
    66fe:	b29b      	uxth	r3, r3
}
    6700:	1c18      	adds	r0, r3, #0
    6702:	46bd      	mov	sp, r7
    6704:	b004      	add	sp, #16
    6706:	bd80      	pop	{r7, pc}
    6708:	00006ac1 	.word	0x00006ac1

0000670c <readControlWord>:

// Read a 16-bit subcommand() from the BQ27441-G1A's control()
uint16_t readControlWord(uint16_t function)
{
    670c:	b580      	push	{r7, lr}
    670e:	b086      	sub	sp, #24
    6710:	af00      	add	r7, sp, #0
    6712:	1c02      	adds	r2, r0, #0
    6714:	1dbb      	adds	r3, r7, #6
    6716:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    6718:	1dbb      	adds	r3, r7, #6
    671a:	881b      	ldrh	r3, [r3, #0]
    671c:	0a1b      	lsrs	r3, r3, #8
    671e:	b29a      	uxth	r2, r3
    6720:	2317      	movs	r3, #23
    6722:	18fb      	adds	r3, r7, r3
    6724:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    6726:	2316      	movs	r3, #22
    6728:	18fb      	adds	r3, r7, r3
    672a:	1dba      	adds	r2, r7, #6
    672c:	8812      	ldrh	r2, [r2, #0]
    672e:	701a      	strb	r2, [r3, #0]
	uint8_t command[3] = {0x00, subCommandLSB, subCommandMSB};
    6730:	2310      	movs	r3, #16
    6732:	18fb      	adds	r3, r7, r3
    6734:	2200      	movs	r2, #0
    6736:	701a      	strb	r2, [r3, #0]
    6738:	2310      	movs	r3, #16
    673a:	18fb      	adds	r3, r7, r3
    673c:	2216      	movs	r2, #22
    673e:	18ba      	adds	r2, r7, r2
    6740:	7812      	ldrb	r2, [r2, #0]
    6742:	705a      	strb	r2, [r3, #1]
    6744:	2310      	movs	r3, #16
    6746:	18fb      	adds	r3, r7, r3
    6748:	2217      	movs	r2, #23
    674a:	18ba      	adds	r2, r7, r2
    674c:	7812      	ldrb	r2, [r2, #0]
    674e:	709a      	strb	r2, [r3, #2]
	uint8_t data[2] = {0, 0};
    6750:	230c      	movs	r3, #12
    6752:	18fb      	adds	r3, r7, r3
    6754:	2200      	movs	r2, #0
    6756:	701a      	strb	r2, [r3, #0]
    6758:	230c      	movs	r3, #12
    675a:	18fb      	adds	r3, r7, r3
    675c:	2200      	movs	r2, #0
    675e:	705a      	strb	r2, [r3, #1]
	
	i2cWriteBytes((uint8_t) 0, command, 3);
    6760:	2310      	movs	r3, #16
    6762:	18fb      	adds	r3, r7, r3
    6764:	2000      	movs	r0, #0
    6766:	1c19      	adds	r1, r3, #0
    6768:	2203      	movs	r2, #3
    676a:	4b0e      	ldr	r3, [pc, #56]	; (67a4 <readControlWord+0x98>)
    676c:	4798      	blx	r3
	
	if (i2cReadBytes((uint8_t) 0, data, 2))
    676e:	230c      	movs	r3, #12
    6770:	18fb      	adds	r3, r7, r3
    6772:	2000      	movs	r0, #0
    6774:	1c19      	adds	r1, r3, #0
    6776:	2202      	movs	r2, #2
    6778:	4b0b      	ldr	r3, [pc, #44]	; (67a8 <readControlWord+0x9c>)
    677a:	4798      	blx	r3
    677c:	1e03      	subs	r3, r0, #0
    677e:	d00c      	beq.n	679a <readControlWord+0x8e>
	{
		return ((uint16_t)data[1] << 8) | data[0];
    6780:	230c      	movs	r3, #12
    6782:	18fb      	adds	r3, r7, r3
    6784:	785b      	ldrb	r3, [r3, #1]
    6786:	021b      	lsls	r3, r3, #8
    6788:	b29a      	uxth	r2, r3
    678a:	230c      	movs	r3, #12
    678c:	18fb      	adds	r3, r7, r3
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	b29b      	uxth	r3, r3
    6792:	4313      	orrs	r3, r2
    6794:	b29b      	uxth	r3, r3
    6796:	b29b      	uxth	r3, r3
    6798:	e000      	b.n	679c <readControlWord+0x90>
	}
	
	return false;
    679a:	2300      	movs	r3, #0
}
    679c:	1c18      	adds	r0, r3, #0
    679e:	46bd      	mov	sp, r7
    67a0:	b006      	add	sp, #24
    67a2:	bd80      	pop	{r7, pc}
    67a4:	00006bb9 	.word	0x00006bb9
    67a8:	00006ac1 	.word	0x00006ac1

000067ac <executeControlWord>:

// Execute a subcommand() from the BQ27441-G1A's control()
bool executeControlWord(uint16_t function)
{
    67ac:	b580      	push	{r7, lr}
    67ae:	b084      	sub	sp, #16
    67b0:	af00      	add	r7, sp, #0
    67b2:	1c02      	adds	r2, r0, #0
    67b4:	1dbb      	adds	r3, r7, #6
    67b6:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    67b8:	1dbb      	adds	r3, r7, #6
    67ba:	881b      	ldrh	r3, [r3, #0]
    67bc:	0a1b      	lsrs	r3, r3, #8
    67be:	b29a      	uxth	r2, r3
    67c0:	230f      	movs	r3, #15
    67c2:	18fb      	adds	r3, r7, r3
    67c4:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    67c6:	230e      	movs	r3, #14
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	1dba      	adds	r2, r7, #6
    67cc:	8812      	ldrh	r2, [r2, #0]
    67ce:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    67d0:	230c      	movs	r3, #12
    67d2:	18fb      	adds	r3, r7, r3
    67d4:	220e      	movs	r2, #14
    67d6:	18ba      	adds	r2, r7, r2
    67d8:	7812      	ldrb	r2, [r2, #0]
    67da:	701a      	strb	r2, [r3, #0]
    67dc:	230c      	movs	r3, #12
    67de:	18fb      	adds	r3, r7, r3
    67e0:	220f      	movs	r2, #15
    67e2:	18ba      	adds	r2, r7, r2
    67e4:	7812      	ldrb	r2, [r2, #0]
    67e6:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    67e8:	2308      	movs	r3, #8
    67ea:	18fb      	adds	r3, r7, r3
    67ec:	2200      	movs	r2, #0
    67ee:	701a      	strb	r2, [r3, #0]
    67f0:	2308      	movs	r3, #8
    67f2:	18fb      	adds	r3, r7, r3
    67f4:	2200      	movs	r2, #0
    67f6:	705a      	strb	r2, [r3, #1]
	
	if (i2cWriteBytes((uint8_t) 0, command, 2))
    67f8:	230c      	movs	r3, #12
    67fa:	18fb      	adds	r3, r7, r3
    67fc:	2000      	movs	r0, #0
    67fe:	1c19      	adds	r1, r3, #0
    6800:	2202      	movs	r2, #2
    6802:	4b05      	ldr	r3, [pc, #20]	; (6818 <executeControlWord+0x6c>)
    6804:	4798      	blx	r3
    6806:	1e03      	subs	r3, r0, #0
    6808:	d001      	beq.n	680e <executeControlWord+0x62>
		return true;
    680a:	2301      	movs	r3, #1
    680c:	e000      	b.n	6810 <executeControlWord+0x64>
	
	return false;
    680e:	2300      	movs	r3, #0
}
    6810:	1c18      	adds	r0, r3, #0
    6812:	46bd      	mov	sp, r7
    6814:	b004      	add	sp, #16
    6816:	bd80      	pop	{r7, pc}
    6818:	00006bb9 	.word	0x00006bb9

0000681c <blockDataControl>:
 ************************** Extended Data Commands ***************************
 *****************************************************************************/
 
// Issue a BlockDataControl() command to enable BlockData access
bool blockDataControl(void)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
	uint8_t enableByte = 0x00;
    6822:	1dfb      	adds	r3, r7, #7
    6824:	2200      	movs	r2, #0
    6826:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
    6828:	1dfb      	adds	r3, r7, #7
    682a:	2061      	movs	r0, #97	; 0x61
    682c:	1c19      	adds	r1, r3, #0
    682e:	2201      	movs	r2, #1
    6830:	4b04      	ldr	r3, [pc, #16]	; (6844 <blockDataControl+0x28>)
    6832:	4798      	blx	r3
    6834:	1c03      	adds	r3, r0, #0
    6836:	1e5a      	subs	r2, r3, #1
    6838:	4193      	sbcs	r3, r2
    683a:	b2db      	uxtb	r3, r3
}
    683c:	1c18      	adds	r0, r3, #0
    683e:	46bd      	mov	sp, r7
    6840:	b002      	add	sp, #8
    6842:	bd80      	pop	{r7, pc}
    6844:	00006bb9 	.word	0x00006bb9

00006848 <blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
bool blockDataClass(uint8_t id)
{
    6848:	b580      	push	{r7, lr}
    684a:	b082      	sub	sp, #8
    684c:	af00      	add	r7, sp, #0
    684e:	1c02      	adds	r2, r0, #0
    6850:	1dfb      	adds	r3, r7, #7
    6852:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
    6854:	1dfb      	adds	r3, r7, #7
    6856:	203e      	movs	r0, #62	; 0x3e
    6858:	1c19      	adds	r1, r3, #0
    685a:	2201      	movs	r2, #1
    685c:	4b04      	ldr	r3, [pc, #16]	; (6870 <blockDataClass+0x28>)
    685e:	4798      	blx	r3
    6860:	1c03      	adds	r3, r0, #0
    6862:	1e5a      	subs	r2, r3, #1
    6864:	4193      	sbcs	r3, r2
    6866:	b2db      	uxtb	r3, r3
}
    6868:	1c18      	adds	r0, r3, #0
    686a:	46bd      	mov	sp, r7
    686c:	b002      	add	sp, #8
    686e:	bd80      	pop	{r7, pc}
    6870:	00006bb9 	.word	0x00006bb9

00006874 <blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
bool blockDataOffset(uint8_t offset)
{
    6874:	b580      	push	{r7, lr}
    6876:	b082      	sub	sp, #8
    6878:	af00      	add	r7, sp, #0
    687a:	1c02      	adds	r2, r0, #0
    687c:	1dfb      	adds	r3, r7, #7
    687e:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
    6880:	1dfb      	adds	r3, r7, #7
    6882:	203f      	movs	r0, #63	; 0x3f
    6884:	1c19      	adds	r1, r3, #0
    6886:	2201      	movs	r2, #1
    6888:	4b04      	ldr	r3, [pc, #16]	; (689c <blockDataOffset+0x28>)
    688a:	4798      	blx	r3
    688c:	1c03      	adds	r3, r0, #0
    688e:	1e5a      	subs	r2, r3, #1
    6890:	4193      	sbcs	r3, r2
    6892:	b2db      	uxtb	r3, r3
}
    6894:	1c18      	adds	r0, r3, #0
    6896:	46bd      	mov	sp, r7
    6898:	b002      	add	sp, #8
    689a:	bd80      	pop	{r7, pc}
    689c:	00006bb9 	.word	0x00006bb9

000068a0 <blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t blockDataChecksum(void)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b082      	sub	sp, #8
    68a4:	af00      	add	r7, sp, #0
	uint8_t csum;
	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
    68a6:	1dfb      	adds	r3, r7, #7
    68a8:	2060      	movs	r0, #96	; 0x60
    68aa:	1c19      	adds	r1, r3, #0
    68ac:	2201      	movs	r2, #1
    68ae:	4b04      	ldr	r3, [pc, #16]	; (68c0 <blockDataChecksum+0x20>)
    68b0:	4798      	blx	r3
	return csum;
    68b2:	1dfb      	adds	r3, r7, #7
    68b4:	781b      	ldrb	r3, [r3, #0]
}
    68b6:	1c18      	adds	r0, r3, #0
    68b8:	46bd      	mov	sp, r7
    68ba:	b002      	add	sp, #8
    68bc:	bd80      	pop	{r7, pc}
    68be:	46c0      	nop			; (mov r8, r8)
    68c0:	00006ac1 	.word	0x00006ac1

000068c4 <writeBlockData>:
	return ret;
}

// Use BlockData() to write a byte to an offset of the loaded data
bool writeBlockData(uint8_t offset, uint8_t data)
{
    68c4:	b580      	push	{r7, lr}
    68c6:	b084      	sub	sp, #16
    68c8:	af00      	add	r7, sp, #0
    68ca:	1c02      	adds	r2, r0, #0
    68cc:	1dfb      	adds	r3, r7, #7
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	1dbb      	adds	r3, r7, #6
    68d2:	1c0a      	adds	r2, r1, #0
    68d4:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
    68d6:	230f      	movs	r3, #15
    68d8:	18fb      	adds	r3, r7, r3
    68da:	1dfa      	adds	r2, r7, #7
    68dc:	7812      	ldrb	r2, [r2, #0]
    68de:	3240      	adds	r2, #64	; 0x40
    68e0:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(address, &data, 1);
    68e2:	230f      	movs	r3, #15
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	781a      	ldrb	r2, [r3, #0]
    68e8:	1dbb      	adds	r3, r7, #6
    68ea:	1c10      	adds	r0, r2, #0
    68ec:	1c19      	adds	r1, r3, #0
    68ee:	2201      	movs	r2, #1
    68f0:	4b04      	ldr	r3, [pc, #16]	; (6904 <writeBlockData+0x40>)
    68f2:	4798      	blx	r3
    68f4:	1c03      	adds	r3, r0, #0
    68f6:	1e5a      	subs	r2, r3, #1
    68f8:	4193      	sbcs	r3, r2
    68fa:	b2db      	uxtb	r3, r3
}
    68fc:	1c18      	adds	r0, r3, #0
    68fe:	46bd      	mov	sp, r7
    6900:	b004      	add	sp, #16
    6902:	bd80      	pop	{r7, pc}
    6904:	00006bb9 	.word	0x00006bb9

00006908 <computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a 
// checksum based on the values.
uint8_t computeBlockChecksum(void)
{
    6908:	b580      	push	{r7, lr}
    690a:	b08a      	sub	sp, #40	; 0x28
    690c:	af00      	add	r7, sp, #0
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
    690e:	1c3b      	adds	r3, r7, #0
    6910:	2040      	movs	r0, #64	; 0x40
    6912:	1c19      	adds	r1, r3, #0
    6914:	2220      	movs	r2, #32
    6916:	4b14      	ldr	r3, [pc, #80]	; (6968 <computeBlockChecksum+0x60>)
    6918:	4798      	blx	r3

	uint8_t csum = 0;
    691a:	2327      	movs	r3, #39	; 0x27
    691c:	18fb      	adds	r3, r7, r3
    691e:	2200      	movs	r2, #0
    6920:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
    6922:	2300      	movs	r3, #0
    6924:	623b      	str	r3, [r7, #32]
    6926:	e00d      	b.n	6944 <computeBlockChecksum+0x3c>
	{
		csum += data[i];
    6928:	1c3a      	adds	r2, r7, #0
    692a:	6a3b      	ldr	r3, [r7, #32]
    692c:	18d3      	adds	r3, r2, r3
    692e:	7819      	ldrb	r1, [r3, #0]
    6930:	2327      	movs	r3, #39	; 0x27
    6932:	18fb      	adds	r3, r7, r3
    6934:	2227      	movs	r2, #39	; 0x27
    6936:	18ba      	adds	r2, r7, r2
    6938:	7812      	ldrb	r2, [r2, #0]
    693a:	188a      	adds	r2, r1, r2
    693c:	701a      	strb	r2, [r3, #0]
{
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);

	uint8_t csum = 0;
	for (int i=0; i<32; i++)
    693e:	6a3b      	ldr	r3, [r7, #32]
    6940:	3301      	adds	r3, #1
    6942:	623b      	str	r3, [r7, #32]
    6944:	6a3b      	ldr	r3, [r7, #32]
    6946:	2b1f      	cmp	r3, #31
    6948:	ddee      	ble.n	6928 <computeBlockChecksum+0x20>
	{
		csum += data[i];
	}
	csum = 255 - csum;
    694a:	2327      	movs	r3, #39	; 0x27
    694c:	18fb      	adds	r3, r7, r3
    694e:	2227      	movs	r2, #39	; 0x27
    6950:	18ba      	adds	r2, r7, r2
    6952:	7812      	ldrb	r2, [r2, #0]
    6954:	43d2      	mvns	r2, r2
    6956:	701a      	strb	r2, [r3, #0]
	
	return csum;
    6958:	2327      	movs	r3, #39	; 0x27
    695a:	18fb      	adds	r3, r7, r3
    695c:	781b      	ldrb	r3, [r3, #0]
}
    695e:	1c18      	adds	r0, r3, #0
    6960:	46bd      	mov	sp, r7
    6962:	b00a      	add	sp, #40	; 0x28
    6964:	bd80      	pop	{r7, pc}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	00006ac1 	.word	0x00006ac1

0000696c <writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
bool writeBlockChecksum(uint8_t csum)
{
    696c:	b580      	push	{r7, lr}
    696e:	b082      	sub	sp, #8
    6970:	af00      	add	r7, sp, #0
    6972:	1c02      	adds	r2, r0, #0
    6974:	1dfb      	adds	r3, r7, #7
    6976:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);	
    6978:	1dfb      	adds	r3, r7, #7
    697a:	2060      	movs	r0, #96	; 0x60
    697c:	1c19      	adds	r1, r3, #0
    697e:	2201      	movs	r2, #1
    6980:	4b04      	ldr	r3, [pc, #16]	; (6994 <writeBlockChecksum+0x28>)
    6982:	4798      	blx	r3
    6984:	1c03      	adds	r3, r0, #0
    6986:	1e5a      	subs	r2, r3, #1
    6988:	4193      	sbcs	r3, r2
    698a:	b2db      	uxtb	r3, r3
}
    698c:	1c18      	adds	r0, r3, #0
    698e:	46bd      	mov	sp, r7
    6990:	b002      	add	sp, #8
    6992:	bd80      	pop	{r7, pc}
    6994:	00006bb9 	.word	0x00006bb9

00006998 <writeExtendedData>:
}

// Write a specified number of bytes to extended data specifying a 
// class ID, position offset.
bool writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
    6998:	b590      	push	{r4, r7, lr}
    699a:	b085      	sub	sp, #20
    699c:	af00      	add	r7, sp, #0
    699e:	1c04      	adds	r4, r0, #0
    69a0:	1c08      	adds	r0, r1, #0
    69a2:	603a      	str	r2, [r7, #0]
    69a4:	1c19      	adds	r1, r3, #0
    69a6:	1dfb      	adds	r3, r7, #7
    69a8:	1c22      	adds	r2, r4, #0
    69aa:	701a      	strb	r2, [r3, #0]
    69ac:	1dbb      	adds	r3, r7, #6
    69ae:	1c02      	adds	r2, r0, #0
    69b0:	701a      	strb	r2, [r3, #0]
    69b2:	1d7b      	adds	r3, r7, #5
    69b4:	1c0a      	adds	r2, r1, #0
    69b6:	701a      	strb	r2, [r3, #0]
	if (len > 32)
    69b8:	1d7b      	adds	r3, r7, #5
    69ba:	781b      	ldrb	r3, [r3, #0]
    69bc:	2b20      	cmp	r3, #32
    69be:	d901      	bls.n	69c4 <writeExtendedData+0x2c>
		return false;
    69c0:	2300      	movs	r3, #0
    69c2:	e064      	b.n	6a8e <writeExtendedData+0xf6>
	
	if (!_userConfigControl) enterConfig(false);
    69c4:	4b34      	ldr	r3, [pc, #208]	; (6a98 <writeExtendedData+0x100>)
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	2201      	movs	r2, #1
    69ca:	4053      	eors	r3, r2
    69cc:	b2db      	uxtb	r3, r3
    69ce:	2b00      	cmp	r3, #0
    69d0:	d002      	beq.n	69d8 <writeExtendedData+0x40>
    69d2:	2000      	movs	r0, #0
    69d4:	4b31      	ldr	r3, [pc, #196]	; (6a9c <writeExtendedData+0x104>)
    69d6:	4798      	blx	r3
	
	if (!blockDataControl()) // // enable block data memory control
    69d8:	4b31      	ldr	r3, [pc, #196]	; (6aa0 <writeExtendedData+0x108>)
    69da:	4798      	blx	r3
    69dc:	1c03      	adds	r3, r0, #0
    69de:	1c1a      	adds	r2, r3, #0
    69e0:	2301      	movs	r3, #1
    69e2:	4053      	eors	r3, r2
    69e4:	b2db      	uxtb	r3, r3
    69e6:	2b00      	cmp	r3, #0
    69e8:	d001      	beq.n	69ee <writeExtendedData+0x56>
		return false; // Return false if enable fails
    69ea:	2300      	movs	r3, #0
    69ec:	e04f      	b.n	6a8e <writeExtendedData+0xf6>
	if (!blockDataClass(classID)) // Write class ID using DataBlockClass()
    69ee:	1dfb      	adds	r3, r7, #7
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	1c18      	adds	r0, r3, #0
    69f4:	4b2b      	ldr	r3, [pc, #172]	; (6aa4 <writeExtendedData+0x10c>)
    69f6:	4798      	blx	r3
    69f8:	1c03      	adds	r3, r0, #0
    69fa:	1c1a      	adds	r2, r3, #0
    69fc:	2301      	movs	r3, #1
    69fe:	4053      	eors	r3, r2
    6a00:	b2db      	uxtb	r3, r3
    6a02:	2b00      	cmp	r3, #0
    6a04:	d001      	beq.n	6a0a <writeExtendedData+0x72>
		return false;
    6a06:	2300      	movs	r3, #0
    6a08:	e041      	b.n	6a8e <writeExtendedData+0xf6>
	
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
    6a0a:	1dbb      	adds	r3, r7, #6
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	095b      	lsrs	r3, r3, #5
    6a10:	b2db      	uxtb	r3, r3
    6a12:	1c18      	adds	r0, r3, #0
    6a14:	4b24      	ldr	r3, [pc, #144]	; (6aa8 <writeExtendedData+0x110>)
    6a16:	4798      	blx	r3
	computeBlockChecksum(); // Compute checksum going in
    6a18:	4b24      	ldr	r3, [pc, #144]	; (6aac <writeExtendedData+0x114>)
    6a1a:	4798      	blx	r3
	uint8_t oldCsum = blockDataChecksum();
    6a1c:	230b      	movs	r3, #11
    6a1e:	18fc      	adds	r4, r7, r3
    6a20:	4b23      	ldr	r3, [pc, #140]	; (6ab0 <writeExtendedData+0x118>)
    6a22:	4798      	blx	r3
    6a24:	1c03      	adds	r3, r0, #0
    6a26:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
    6a28:	2300      	movs	r3, #0
    6a2a:	60fb      	str	r3, [r7, #12]
    6a2c:	e013      	b.n	6a56 <writeExtendedData+0xbe>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
    6a2e:	1dbb      	adds	r3, r7, #6
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	221f      	movs	r2, #31
    6a34:	4013      	ands	r3, r2
    6a36:	b2da      	uxtb	r2, r3
    6a38:	68fb      	ldr	r3, [r7, #12]
    6a3a:	b2db      	uxtb	r3, r3
    6a3c:	18d3      	adds	r3, r2, r3
    6a3e:	b2d9      	uxtb	r1, r3
    6a40:	68fb      	ldr	r3, [r7, #12]
    6a42:	683a      	ldr	r2, [r7, #0]
    6a44:	18d3      	adds	r3, r2, r3
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	1c08      	adds	r0, r1, #0
    6a4a:	1c19      	adds	r1, r3, #0
    6a4c:	4b19      	ldr	r3, [pc, #100]	; (6ab4 <writeExtendedData+0x11c>)
    6a4e:	4798      	blx	r3
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
	computeBlockChecksum(); // Compute checksum going in
	uint8_t oldCsum = blockDataChecksum();

	// Write data bytes:
	for (int i = 0; i < len; i++)
    6a50:	68fb      	ldr	r3, [r7, #12]
    6a52:	3301      	adds	r3, #1
    6a54:	60fb      	str	r3, [r7, #12]
    6a56:	1d7b      	adds	r3, r7, #5
    6a58:	781a      	ldrb	r2, [r3, #0]
    6a5a:	68fb      	ldr	r3, [r7, #12]
    6a5c:	429a      	cmp	r2, r3
    6a5e:	dce6      	bgt.n	6a2e <writeExtendedData+0x96>
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
	}
	
	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = computeBlockChecksum(); // Compute the new checksum
    6a60:	230a      	movs	r3, #10
    6a62:	18fc      	adds	r4, r7, r3
    6a64:	4b11      	ldr	r3, [pc, #68]	; (6aac <writeExtendedData+0x114>)
    6a66:	4798      	blx	r3
    6a68:	1c03      	adds	r3, r0, #0
    6a6a:	7023      	strb	r3, [r4, #0]
	writeBlockChecksum(newCsum);
    6a6c:	230a      	movs	r3, #10
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	1c18      	adds	r0, r3, #0
    6a74:	4b10      	ldr	r3, [pc, #64]	; (6ab8 <writeExtendedData+0x120>)
    6a76:	4798      	blx	r3

	if (!_userConfigControl) exitConfig(true);
    6a78:	4b07      	ldr	r3, [pc, #28]	; (6a98 <writeExtendedData+0x100>)
    6a7a:	781b      	ldrb	r3, [r3, #0]
    6a7c:	2201      	movs	r2, #1
    6a7e:	4053      	eors	r3, r2
    6a80:	b2db      	uxtb	r3, r3
    6a82:	2b00      	cmp	r3, #0
    6a84:	d002      	beq.n	6a8c <writeExtendedData+0xf4>
    6a86:	2001      	movs	r0, #1
    6a88:	4b0c      	ldr	r3, [pc, #48]	; (6abc <writeExtendedData+0x124>)
    6a8a:	4798      	blx	r3
	
	return true;
    6a8c:	2301      	movs	r3, #1
}
    6a8e:	1c18      	adds	r0, r3, #0
    6a90:	46bd      	mov	sp, r7
    6a92:	b005      	add	sp, #20
    6a94:	bd90      	pop	{r4, r7, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	20000176 	.word	0x20000176
    6a9c:	000064c1 	.word	0x000064c1
    6aa0:	0000681d 	.word	0x0000681d
    6aa4:	00006849 	.word	0x00006849
    6aa8:	00006875 	.word	0x00006875
    6aac:	00006909 	.word	0x00006909
    6ab0:	000068a1 	.word	0x000068a1
    6ab4:	000068c5 	.word	0x000068c5
    6ab8:	0000696d 	.word	0x0000696d
    6abc:	00006559 	.word	0x00006559

00006ac0 <i2cReadBytes>:
 ************************ I2C Read and Write Routines ************************
 *****************************************************************************/

// Read a specified number of bytes over I2C at a given subAddress
int16_t i2cReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b086      	sub	sp, #24
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6039      	str	r1, [r7, #0]
    6ac8:	1c11      	adds	r1, r2, #0
    6aca:	1dfb      	adds	r3, r7, #7
    6acc:	1c02      	adds	r2, r0, #0
    6ace:	701a      	strb	r2, [r3, #0]
    6ad0:	1dbb      	adds	r3, r7, #6
    6ad2:	1c0a      	adds	r2, r1, #0
    6ad4:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;	
    6ad6:	2316      	movs	r3, #22
    6ad8:	18fb      	adds	r3, r7, r3
    6ada:	22fa      	movs	r2, #250	; 0xfa
    6adc:	00d2      	lsls	r2, r2, #3
    6ade:	801a      	strh	r2, [r3, #0]

	uint8_t write_buffer = subAddress;
    6ae0:	2315      	movs	r3, #21
    6ae2:	18fb      	adds	r3, r7, r3
    6ae4:	1dfa      	adds	r2, r7, #7
    6ae6:	7812      	ldrb	r2, [r2, #0]
    6ae8:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6aea:	4b2f      	ldr	r3, [pc, #188]	; (6ba8 <i2cReadBytes+0xe8>)
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	b29a      	uxth	r2, r3
    6af0:	2308      	movs	r3, #8
    6af2:	18fb      	adds	r3, r7, r3
    6af4:	801a      	strh	r2, [r3, #0]
    6af6:	2308      	movs	r3, #8
    6af8:	18fb      	adds	r3, r7, r3
    6afa:	2201      	movs	r2, #1
    6afc:	805a      	strh	r2, [r3, #2]
    6afe:	2308      	movs	r3, #8
    6b00:	18fb      	adds	r3, r7, r3
    6b02:	2215      	movs	r2, #21
    6b04:	18ba      	adds	r2, r7, r2
    6b06:	605a      	str	r2, [r3, #4]
    6b08:	2308      	movs	r3, #8
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	2200      	movs	r2, #0
    6b0e:	721a      	strb	r2, [r3, #8]
    6b10:	2308      	movs	r3, #8
    6b12:	18fb      	adds	r3, r7, r3
    6b14:	2200      	movs	r2, #0
    6b16:	725a      	strb	r2, [r3, #9]
    6b18:	2308      	movs	r3, #8
    6b1a:	18fb      	adds	r3, r7, r3
    6b1c:	2200      	movs	r2, #0
    6b1e:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6b20:	e00b      	b.n	6b3a <i2cReadBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    6b22:	2316      	movs	r3, #22
    6b24:	18fb      	adds	r3, r7, r3
    6b26:	881b      	ldrh	r3, [r3, #0]
    6b28:	b29a      	uxth	r2, r3
    6b2a:	3a01      	subs	r2, #1
    6b2c:	b291      	uxth	r1, r2
    6b2e:	2216      	movs	r2, #22
    6b30:	18ba      	adds	r2, r7, r2
    6b32:	8011      	strh	r1, [r2, #0]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d000      	beq.n	6b3a <i2cReadBytes+0x7a>
			break;
    6b38:	e008      	b.n	6b4c <i2cReadBytes+0x8c>
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6b3a:	4a1c      	ldr	r2, [pc, #112]	; (6bac <i2cReadBytes+0xec>)
    6b3c:	2308      	movs	r3, #8
    6b3e:	18fb      	adds	r3, r7, r3
    6b40:	1c10      	adds	r0, r2, #0
    6b42:	1c19      	adds	r1, r3, #0
    6b44:	4b1a      	ldr	r3, [pc, #104]	; (6bb0 <i2cReadBytes+0xf0>)
    6b46:	4798      	blx	r3
    6b48:	1e03      	subs	r3, r0, #0
    6b4a:	d1ea      	bne.n	6b22 <i2cReadBytes+0x62>
		if (timeout--) {
			break;
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    6b4c:	2316      	movs	r3, #22
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	22fa      	movs	r2, #250	; 0xfa
    6b52:	00d2      	lsls	r2, r2, #3
    6b54:	801a      	strh	r2, [r3, #0]
	packet.data = dest;
    6b56:	2308      	movs	r3, #8
    6b58:	18fb      	adds	r3, r7, r3
    6b5a:	683a      	ldr	r2, [r7, #0]
    6b5c:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6b5e:	1dbb      	adds	r3, r7, #6
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	b29a      	uxth	r2, r3
    6b64:	2308      	movs	r3, #8
    6b66:	18fb      	adds	r3, r7, r3
    6b68:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6b6a:	e00b      	b.n	6b84 <i2cReadBytes+0xc4>
	STATUS_OK) {
		if (timeout--) {
    6b6c:	2316      	movs	r3, #22
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	881b      	ldrh	r3, [r3, #0]
    6b72:	b29a      	uxth	r2, r3
    6b74:	3a01      	subs	r2, #1
    6b76:	b291      	uxth	r1, r2
    6b78:	2216      	movs	r2, #22
    6b7a:	18ba      	adds	r2, r7, r2
    6b7c:	8011      	strh	r1, [r2, #0]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d000      	beq.n	6b84 <i2cReadBytes+0xc4>
			break;
    6b82:	e008      	b.n	6b96 <i2cReadBytes+0xd6>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = dest;
	packet.data_length = count;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6b84:	4a09      	ldr	r2, [pc, #36]	; (6bac <i2cReadBytes+0xec>)
    6b86:	2308      	movs	r3, #8
    6b88:	18fb      	adds	r3, r7, r3
    6b8a:	1c10      	adds	r0, r2, #0
    6b8c:	1c19      	adds	r1, r3, #0
    6b8e:	4b09      	ldr	r3, [pc, #36]	; (6bb4 <i2cReadBytes+0xf4>)
    6b90:	4798      	blx	r3
    6b92:	1e03      	subs	r3, r0, #0
    6b94:	d1ea      	bne.n	6b6c <i2cReadBytes+0xac>
		{
			dest[i] = Wire.read();
		}
	}*/
	
	return timeout;
    6b96:	2316      	movs	r3, #22
    6b98:	18fb      	adds	r3, r7, r3
    6b9a:	881b      	ldrh	r3, [r3, #0]
    6b9c:	b21b      	sxth	r3, r3
}
    6b9e:	1c18      	adds	r0, r3, #0
    6ba0:	46bd      	mov	sp, r7
    6ba2:	b006      	add	sp, #24
    6ba4:	bd80      	pop	{r7, pc}
    6ba6:	46c0      	nop			; (mov r8, r8)
    6ba8:	20000175 	.word	0x20000175
    6bac:	20000200 	.word	0x20000200
    6bb0:	00001b75 	.word	0x00001b75
    6bb4:	000019bd 	.word	0x000019bd

00006bb8 <i2cWriteBytes>:

// Write a specified number of bytes over I2C to a given subAddress
uint16_t i2cWriteBytes(uint8_t subAddress, uint8_t * src, uint8_t count)
{
    6bb8:	b580      	push	{r7, lr}
    6bba:	b086      	sub	sp, #24
    6bbc:	af00      	add	r7, sp, #0
    6bbe:	6039      	str	r1, [r7, #0]
    6bc0:	1c11      	adds	r1, r2, #0
    6bc2:	1dfb      	adds	r3, r7, #7
    6bc4:	1c02      	adds	r2, r0, #0
    6bc6:	701a      	strb	r2, [r3, #0]
    6bc8:	1dbb      	adds	r3, r7, #6
    6bca:	1c0a      	adds	r2, r1, #0
    6bcc:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;
    6bce:	2316      	movs	r3, #22
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	22fa      	movs	r2, #250	; 0xfa
    6bd4:	00d2      	lsls	r2, r2, #3
    6bd6:	801a      	strh	r2, [r3, #0]
	
	uint8_t write_buffer = subAddress;
    6bd8:	2315      	movs	r3, #21
    6bda:	18fb      	adds	r3, r7, r3
    6bdc:	1dfa      	adds	r2, r7, #7
    6bde:	7812      	ldrb	r2, [r2, #0]
    6be0:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6be2:	4b22      	ldr	r3, [pc, #136]	; (6c6c <i2cWriteBytes+0xb4>)
    6be4:	781b      	ldrb	r3, [r3, #0]
    6be6:	b29a      	uxth	r2, r3
    6be8:	2308      	movs	r3, #8
    6bea:	18fb      	adds	r3, r7, r3
    6bec:	801a      	strh	r2, [r3, #0]
    6bee:	2308      	movs	r3, #8
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	2201      	movs	r2, #1
    6bf4:	805a      	strh	r2, [r3, #2]
    6bf6:	2308      	movs	r3, #8
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	2215      	movs	r2, #21
    6bfc:	18ba      	adds	r2, r7, r2
    6bfe:	605a      	str	r2, [r3, #4]
    6c00:	2308      	movs	r3, #8
    6c02:	18fb      	adds	r3, r7, r3
    6c04:	2200      	movs	r2, #0
    6c06:	721a      	strb	r2, [r3, #8]
    6c08:	2308      	movs	r3, #8
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	2200      	movs	r2, #0
    6c0e:	725a      	strb	r2, [r3, #9]
    6c10:	2308      	movs	r3, #8
    6c12:	18fb      	adds	r3, r7, r3
    6c14:	2200      	movs	r2, #0
    6c16:	729a      	strb	r2, [r3, #10]
		if (timeout--) {
			break;
		}
	}
	*/
	timeout = BQ72441_I2C_TIMEOUT;
    6c18:	2316      	movs	r3, #22
    6c1a:	18fb      	adds	r3, r7, r3
    6c1c:	22fa      	movs	r2, #250	; 0xfa
    6c1e:	00d2      	lsls	r2, r2, #3
    6c20:	801a      	strh	r2, [r3, #0]
	packet.data = src;
    6c22:	2308      	movs	r3, #8
    6c24:	18fb      	adds	r3, r7, r3
    6c26:	683a      	ldr	r2, [r7, #0]
    6c28:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6c2a:	1dbb      	adds	r3, r7, #6
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	b29a      	uxth	r2, r3
    6c30:	2308      	movs	r3, #8
    6c32:	18fb      	adds	r3, r7, r3
    6c34:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6c36:	e00b      	b.n	6c50 <i2cWriteBytes+0x98>
	STATUS_OK) {
		if (timeout--) {
    6c38:	2316      	movs	r3, #22
    6c3a:	18fb      	adds	r3, r7, r3
    6c3c:	881b      	ldrh	r3, [r3, #0]
    6c3e:	b29a      	uxth	r2, r3
    6c40:	3a01      	subs	r2, #1
    6c42:	b291      	uxth	r1, r2
    6c44:	2216      	movs	r2, #22
    6c46:	18ba      	adds	r2, r7, r2
    6c48:	8011      	strh	r1, [r2, #0]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d000      	beq.n	6c50 <i2cWriteBytes+0x98>
			break;
    6c4e:	e008      	b.n	6c62 <i2cWriteBytes+0xaa>
	}
	*/
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = src;
	packet.data_length = count;
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6c50:	4a07      	ldr	r2, [pc, #28]	; (6c70 <i2cWriteBytes+0xb8>)
    6c52:	2308      	movs	r3, #8
    6c54:	18fb      	adds	r3, r7, r3
    6c56:	1c10      	adds	r0, r2, #0
    6c58:	1c19      	adds	r1, r3, #0
    6c5a:	4b06      	ldr	r3, [pc, #24]	; (6c74 <i2cWriteBytes+0xbc>)
    6c5c:	4798      	blx	r3
    6c5e:	1e03      	subs	r3, r0, #0
    6c60:	d1ea      	bne.n	6c38 <i2cWriteBytes+0x80>
	{
		Wire.write(src[i]);
	}	
	Wire.endTransmission(true);*/
	
	return true;	
    6c62:	2301      	movs	r3, #1
}
    6c64:	1c18      	adds	r0, r3, #0
    6c66:	46bd      	mov	sp, r7
    6c68:	b006      	add	sp, #24
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	20000175 	.word	0x20000175
    6c70:	20000200 	.word	0x20000200
    6c74:	00001b75 	.word	0x00001b75

00006c78 <configure_LED_PWM>:
void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    6c78:	b580      	push	{r7, lr}
    6c7a:	b0aa      	sub	sp, #168	; 0xa8
    6c7c:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    6c7e:	1d3b      	adds	r3, r7, #4
    6c80:	4a31      	ldr	r2, [pc, #196]	; (6d48 <configure_LED_PWM+0xd0>)
    6c82:	1c18      	adds	r0, r3, #0
    6c84:	1c11      	adds	r1, r2, #0
    6c86:	4b31      	ldr	r3, [pc, #196]	; (6d4c <configure_LED_PWM+0xd4>)
    6c88:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6c8a:	1d3b      	adds	r3, r7, #4
    6c8c:	4a30      	ldr	r2, [pc, #192]	; (6d50 <configure_LED_PWM+0xd8>)
    6c8e:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6c90:	1d3b      	adds	r3, r7, #4
    6c92:	2202      	movs	r2, #2
    6c94:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6c96:	1d3b      	adds	r3, r7, #4
    6c98:	2200      	movs	r2, #0
    6c9a:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6c9c:	1d3b      	adds	r3, r7, #4
    6c9e:	2200      	movs	r2, #0
    6ca0:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6ca2:	1d3b      	adds	r3, r7, #4
    6ca4:	2298      	movs	r2, #152	; 0x98
    6ca6:	2101      	movs	r1, #1
    6ca8:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6caa:	1d3b      	adds	r3, r7, #4
    6cac:	2299      	movs	r2, #153	; 0x99
    6cae:	2101      	movs	r1, #1
    6cb0:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    6cb2:	1d3b      	adds	r3, r7, #4
    6cb4:	2215      	movs	r2, #21
    6cb6:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    6cb8:	1d3b      	adds	r3, r7, #4
    6cba:	220e      	movs	r2, #14
    6cbc:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    6cbe:	1d3b      	adds	r3, r7, #4
    6cc0:	2205      	movs	r2, #5
    6cc2:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    6cc4:	1d3b      	adds	r3, r7, #4
    6cc6:	2205      	movs	r2, #5
    6cc8:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    6cca:	4a22      	ldr	r2, [pc, #136]	; (6d54 <configure_LED_PWM+0xdc>)
    6ccc:	491e      	ldr	r1, [pc, #120]	; (6d48 <configure_LED_PWM+0xd0>)
    6cce:	1d3b      	adds	r3, r7, #4
    6cd0:	1c10      	adds	r0, r2, #0
    6cd2:	1c1a      	adds	r2, r3, #0
    6cd4:	4b20      	ldr	r3, [pc, #128]	; (6d58 <configure_LED_PWM+0xe0>)
    6cd6:	4798      	blx	r3
	tcc_enable(&tcc0);
    6cd8:	4b1e      	ldr	r3, [pc, #120]	; (6d54 <configure_LED_PWM+0xdc>)
    6cda:	1c18      	adds	r0, r3, #0
    6cdc:	4b1f      	ldr	r3, [pc, #124]	; (6d5c <configure_LED_PWM+0xe4>)
    6cde:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    6ce0:	1d3b      	adds	r3, r7, #4
    6ce2:	4a1f      	ldr	r2, [pc, #124]	; (6d60 <configure_LED_PWM+0xe8>)
    6ce4:	1c18      	adds	r0, r3, #0
    6ce6:	1c11      	adds	r1, r2, #0
    6ce8:	4b18      	ldr	r3, [pc, #96]	; (6d4c <configure_LED_PWM+0xd4>)
    6cea:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6cec:	1d3b      	adds	r3, r7, #4
    6cee:	4a18      	ldr	r2, [pc, #96]	; (6d50 <configure_LED_PWM+0xd8>)
    6cf0:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6cf2:	1d3b      	adds	r3, r7, #4
    6cf4:	2202      	movs	r2, #2
    6cf6:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6cf8:	1d3b      	adds	r3, r7, #4
    6cfa:	2200      	movs	r2, #0
    6cfc:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6cfe:	1d3b      	adds	r3, r7, #4
    6d00:	2200      	movs	r2, #0
    6d02:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6d04:	1d3b      	adds	r3, r7, #4
    6d06:	2298      	movs	r2, #152	; 0x98
    6d08:	2101      	movs	r1, #1
    6d0a:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6d0c:	1d3b      	adds	r3, r7, #4
    6d0e:	2299      	movs	r2, #153	; 0x99
    6d10:	2101      	movs	r1, #1
    6d12:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    6d14:	1d3b      	adds	r3, r7, #4
    6d16:	2208      	movs	r2, #8
    6d18:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    6d1a:	1d3b      	adds	r3, r7, #4
    6d1c:	2207      	movs	r2, #7
    6d1e:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    6d20:	1d3b      	adds	r3, r7, #4
    6d22:	2205      	movs	r2, #5
    6d24:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    6d26:	1d3b      	adds	r3, r7, #4
    6d28:	2204      	movs	r2, #4
    6d2a:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    6d2c:	4a0d      	ldr	r2, [pc, #52]	; (6d64 <configure_LED_PWM+0xec>)
    6d2e:	490c      	ldr	r1, [pc, #48]	; (6d60 <configure_LED_PWM+0xe8>)
    6d30:	1d3b      	adds	r3, r7, #4
    6d32:	1c10      	adds	r0, r2, #0
    6d34:	1c1a      	adds	r2, r3, #0
    6d36:	4b08      	ldr	r3, [pc, #32]	; (6d58 <configure_LED_PWM+0xe0>)
    6d38:	4798      	blx	r3
	tcc_enable(&tcc1);
    6d3a:	4b0a      	ldr	r3, [pc, #40]	; (6d64 <configure_LED_PWM+0xec>)
    6d3c:	1c18      	adds	r0, r3, #0
    6d3e:	4b07      	ldr	r3, [pc, #28]	; (6d5c <configure_LED_PWM+0xe4>)
    6d40:	4798      	blx	r3
}
    6d42:	46bd      	mov	sp, r7
    6d44:	b02a      	add	sp, #168	; 0xa8
    6d46:	bd80      	pop	{r7, pc}
    6d48:	42002000 	.word	0x42002000
    6d4c:	0000216d 	.word	0x0000216d
    6d50:	0000ffff 	.word	0x0000ffff
    6d54:	20000134 	.word	0x20000134
    6d58:	000027c1 	.word	0x000027c1
    6d5c:	00005341 	.word	0x00005341
    6d60:	42002400 	.word	0x42002400
    6d64:	20000274 	.word	0x20000274

00006d68 <configure_IO_pins>:
///////////////////////////////////////////////////////////////////////////

// Configure the LED selection port as output
void configure_IO_pins(void)
{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b082      	sub	sp, #8
    6d6c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    6d6e:	1d3b      	adds	r3, r7, #4
    6d70:	1c18      	adds	r0, r3, #0
    6d72:	4b26      	ldr	r3, [pc, #152]	; (6e0c <configure_IO_pins+0xa4>)
    6d74:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    6d76:	1d3b      	adds	r3, r7, #4
    6d78:	2200      	movs	r2, #0
    6d7a:	701a      	strb	r2, [r3, #0]
	// Right Arrow Button
	port_pin_set_config(PIN_PA04, &config_port_pin);
    6d7c:	1d3b      	adds	r3, r7, #4
    6d7e:	2004      	movs	r0, #4
    6d80:	1c19      	adds	r1, r3, #0
    6d82:	4b23      	ldr	r3, [pc, #140]	; (6e10 <configure_IO_pins+0xa8>)
    6d84:	4798      	blx	r3
	// Hall Up*
	port_pin_set_config(PIN_PA06, &config_port_pin);
    6d86:	1d3b      	adds	r3, r7, #4
    6d88:	2006      	movs	r0, #6
    6d8a:	1c19      	adds	r1, r3, #0
    6d8c:	4b20      	ldr	r3, [pc, #128]	; (6e10 <configure_IO_pins+0xa8>)
    6d8e:	4798      	blx	r3
	// Hall Down*
	port_pin_set_config(PIN_PA09, &config_port_pin);
    6d90:	1d3b      	adds	r3, r7, #4
    6d92:	2009      	movs	r0, #9
    6d94:	1c19      	adds	r1, r3, #0
    6d96:	4b1e      	ldr	r3, [pc, #120]	; (6e10 <configure_IO_pins+0xa8>)
    6d98:	4798      	blx	r3
	// Hall Left*
	port_pin_set_config(PIN_PA10, &config_port_pin);
    6d9a:	1d3b      	adds	r3, r7, #4
    6d9c:	200a      	movs	r0, #10
    6d9e:	1c19      	adds	r1, r3, #0
    6da0:	4b1b      	ldr	r3, [pc, #108]	; (6e10 <configure_IO_pins+0xa8>)
    6da2:	4798      	blx	r3
	// Hall Right*
	port_pin_set_config(PIN_PA11, &config_port_pin);
    6da4:	1d3b      	adds	r3, r7, #4
    6da6:	200b      	movs	r0, #11
    6da8:	1c19      	adds	r1, r3, #0
    6daa:	4b19      	ldr	r3, [pc, #100]	; (6e10 <configure_IO_pins+0xa8>)
    6dac:	4798      	blx	r3
	// Down Arrow Button
	port_pin_set_config(PIN_PA12, &config_port_pin);
    6dae:	1d3b      	adds	r3, r7, #4
    6db0:	200c      	movs	r0, #12
    6db2:	1c19      	adds	r1, r3, #0
    6db4:	4b16      	ldr	r3, [pc, #88]	; (6e10 <configure_IO_pins+0xa8>)
    6db6:	4798      	blx	r3
	// Scroll Button
	port_pin_set_config(PIN_PA13, &config_port_pin);
    6db8:	1d3b      	adds	r3, r7, #4
    6dba:	200d      	movs	r0, #13
    6dbc:	1c19      	adds	r1, r3, #0
    6dbe:	4b14      	ldr	r3, [pc, #80]	; (6e10 <configure_IO_pins+0xa8>)
    6dc0:	4798      	blx	r3
	// Right Mouse Button
	port_pin_set_config(PIN_PA15, &config_port_pin);
    6dc2:	1d3b      	adds	r3, r7, #4
    6dc4:	200f      	movs	r0, #15
    6dc6:	1c19      	adds	r1, r3, #0
    6dc8:	4b11      	ldr	r3, [pc, #68]	; (6e10 <configure_IO_pins+0xa8>)
    6dca:	4798      	blx	r3
	// Up Arrow Button
	port_pin_set_config(PIN_PA20, &config_port_pin);
    6dcc:	1d3b      	adds	r3, r7, #4
    6dce:	2014      	movs	r0, #20
    6dd0:	1c19      	adds	r1, r3, #0
    6dd2:	4b0f      	ldr	r3, [pc, #60]	; (6e10 <configure_IO_pins+0xa8>)
    6dd4:	4798      	blx	r3
	// Left Mouse Button
	port_pin_set_config(PIN_PB02, &config_port_pin);
    6dd6:	1d3b      	adds	r3, r7, #4
    6dd8:	2022      	movs	r0, #34	; 0x22
    6dda:	1c19      	adds	r1, r3, #0
    6ddc:	4b0c      	ldr	r3, [pc, #48]	; (6e10 <configure_IO_pins+0xa8>)
    6dde:	4798      	blx	r3
	// Laser Button
	port_pin_set_config(PIN_PB03, &config_port_pin);
    6de0:	1d3b      	adds	r3, r7, #4
    6de2:	2023      	movs	r0, #35	; 0x23
    6de4:	1c19      	adds	r1, r3, #0
    6de6:	4b0a      	ldr	r3, [pc, #40]	; (6e10 <configure_IO_pins+0xa8>)
    6de8:	4798      	blx	r3
	// Left Arrow Button
	port_pin_set_config(PIN_PB09, &config_port_pin);
    6dea:	1d3b      	adds	r3, r7, #4
    6dec:	2029      	movs	r0, #41	; 0x29
    6dee:	1c19      	adds	r1, r3, #0
    6df0:	4b07      	ldr	r3, [pc, #28]	; (6e10 <configure_IO_pins+0xa8>)
    6df2:	4798      	blx	r3
	// Laser Output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    6df4:	1d3b      	adds	r3, r7, #4
    6df6:	2201      	movs	r2, #1
    6df8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB08, &config_port_pin);
    6dfa:	1d3b      	adds	r3, r7, #4
    6dfc:	2028      	movs	r0, #40	; 0x28
    6dfe:	1c19      	adds	r1, r3, #0
    6e00:	4b03      	ldr	r3, [pc, #12]	; (6e10 <configure_IO_pins+0xa8>)
    6e02:	4798      	blx	r3
}
    6e04:	46bd      	mov	sp, r7
    6e06:	b002      	add	sp, #8
    6e08:	bd80      	pop	{r7, pc}
    6e0a:	46c0      	nop			; (mov r8, r8)
    6e0c:	00004f29 	.word	0x00004f29
    6e10:	00004021 	.word	0x00004021

00006e14 <main>:


int main (void)
{
    6e14:	b590      	push	{r4, r7, lr}
    6e16:	b08d      	sub	sp, #52	; 0x34
    6e18:	af00      	add	r7, sp, #0
	int receivingNode = 0;
    6e1a:	2300      	movs	r3, #0
    6e1c:	627b      	str	r3, [r7, #36]	; 0x24
	bool calibrationLEDS = false;
    6e1e:	232f      	movs	r3, #47	; 0x2f
    6e20:	18fb      	adds	r3, r7, r3
    6e22:	2200      	movs	r2, #0
    6e24:	701a      	strb	r2, [r3, #0]

	uint16_t state = 0;
    6e26:	2322      	movs	r3, #34	; 0x22
    6e28:	18fb      	adds	r3, r7, r3
    6e2a:	2200      	movs	r2, #0
    6e2c:	801a      	strh	r2, [r3, #0]
	
    /* Initialize system */
	system_init();
    6e2e:	4bb5      	ldr	r3, [pc, #724]	; (7104 <main+0x2f0>)
    6e30:	4798      	blx	r3
	configure_LED_PWM();
    6e32:	4bb5      	ldr	r3, [pc, #724]	; (7108 <main+0x2f4>)
    6e34:	4798      	blx	r3
	configure_IO_pins();
    6e36:	4bb5      	ldr	r3, [pc, #724]	; (710c <main+0x2f8>)
    6e38:	4798      	blx	r3
	

	if(!lipo_begin())
    6e3a:	4bb5      	ldr	r3, [pc, #724]	; (7110 <main+0x2fc>)
    6e3c:	4798      	blx	r3
    6e3e:	1c03      	adds	r3, r0, #0
    6e40:	1c1a      	adds	r2, r3, #0
    6e42:	2301      	movs	r3, #1
    6e44:	4053      	eors	r3, r2
    6e46:	b2db      	uxtb	r3, r3
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d007      	beq.n	6e5c <main+0x48>
	{
		setTrackBallRGBW(0xFFFF, 0, 0, 0);
    6e4c:	4bb1      	ldr	r3, [pc, #708]	; (7114 <main+0x300>)
    6e4e:	1c18      	adds	r0, r3, #0
    6e50:	2100      	movs	r1, #0
    6e52:	2200      	movs	r2, #0
    6e54:	2300      	movs	r3, #0
    6e56:	4cb0      	ldr	r4, [pc, #704]	; (7118 <main+0x304>)
    6e58:	47a0      	blx	r4
    6e5a:	e006      	b.n	6e6a <main+0x56>
		//{ }
		
	}
	else
	{
		setTrackBallRGBW(0, 0xFFFF, 0, 0);
    6e5c:	4bad      	ldr	r3, [pc, #692]	; (7114 <main+0x300>)
    6e5e:	2000      	movs	r0, #0
    6e60:	1c19      	adds	r1, r3, #0
    6e62:	2200      	movs	r2, #0
    6e64:	2300      	movs	r3, #0
    6e66:	4cac      	ldr	r4, [pc, #688]	; (7118 <main+0x304>)
    6e68:	47a0      	blx	r4
		//for(int i = 0; i < 100000; i++)
		//{ }
	}

	lipo_setCapacity(Capacity);
    6e6a:	2396      	movs	r3, #150	; 0x96
    6e6c:	00db      	lsls	r3, r3, #3
    6e6e:	1c18      	adds	r0, r3, #0
    6e70:	4baa      	ldr	r3, [pc, #680]	; (711c <main+0x308>)
    6e72:	4798      	blx	r3
		}
	}
	*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    6e74:	205b      	movs	r0, #91	; 0x5b
    6e76:	2103      	movs	r1, #3
    6e78:	2200      	movs	r2, #0
    6e7a:	4ba9      	ldr	r3, [pc, #676]	; (7120 <main+0x30c>)
    6e7c:	4798      	blx	r3
	RFM_setHighPower(true);
    6e7e:	2001      	movs	r0, #1
    6e80:	4ba8      	ldr	r3, [pc, #672]	; (7124 <main+0x310>)
    6e82:	4798      	blx	r3
	if (ENCRYPT){
		RFM_encrypt(ENCRYPTKEY);
    6e84:	4ba8      	ldr	r3, [pc, #672]	; (7128 <main+0x314>)
    6e86:	1c18      	adds	r0, r3, #0
    6e88:	4ba8      	ldr	r3, [pc, #672]	; (712c <main+0x318>)
    6e8a:	4798      	blx	r3
	}


	int sendlength = 3; //number can be increased 
    6e8c:	2303      	movs	r3, #3
    6e8e:	61fb      	str	r3, [r7, #28]
	int index = 0;
    6e90:	2300      	movs	r3, #0
    6e92:	61bb      	str	r3, [r7, #24]
	int8_t sendbuffer[16];
	int16_t current = 0;
    6e94:	2316      	movs	r3, #22
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	2200      	movs	r2, #0
    6e9a:	801a      	strh	r2, [r3, #0]
	bool charging = false;
    6e9c:	232e      	movs	r3, #46	; 0x2e
    6e9e:	18fb      	adds	r3, r7, r3
    6ea0:	2200      	movs	r2, #0
    6ea2:	701a      	strb	r2, [r3, #0]

	init_wheel();
    6ea4:	4ba2      	ldr	r3, [pc, #648]	; (7130 <main+0x31c>)
    6ea6:	4798      	blx	r3
	
	while(1) //busy loop
	//sends data after receiving a request message from the dongle
	//sends X axis byte, Y axis byte, button byte
	{
		if (calibrationLEDS){
    6ea8:	232f      	movs	r3, #47	; 0x2f
    6eaa:	18fb      	adds	r3, r7, r3
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d001      	beq.n	6eb6 <main+0xa2>
			ColorCycle();
    6eb2:	4ba0      	ldr	r3, [pc, #640]	; (7134 <main+0x320>)
    6eb4:	4798      	blx	r3
			
		static bool button = 0;
		static bool lbutton = 0;
		static bool laserState = 0;

		button = port_pin_get_input_level(PIN_PB03);
    6eb6:	2023      	movs	r0, #35	; 0x23
    6eb8:	4b9f      	ldr	r3, [pc, #636]	; (7138 <main+0x324>)
    6eba:	4798      	blx	r3
    6ebc:	1c03      	adds	r3, r0, #0
    6ebe:	1c1a      	adds	r2, r3, #0
    6ec0:	4b9e      	ldr	r3, [pc, #632]	; (713c <main+0x328>)
    6ec2:	701a      	strb	r2, [r3, #0]
		if(button && !lbutton)
    6ec4:	4b9d      	ldr	r3, [pc, #628]	; (713c <main+0x328>)
    6ec6:	781b      	ldrb	r3, [r3, #0]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d01a      	beq.n	6f02 <main+0xee>
    6ecc:	4b9c      	ldr	r3, [pc, #624]	; (7140 <main+0x32c>)
    6ece:	781b      	ldrb	r3, [r3, #0]
    6ed0:	2201      	movs	r2, #1
    6ed2:	4053      	eors	r3, r2
    6ed4:	b2db      	uxtb	r3, r3
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d013      	beq.n	6f02 <main+0xee>
		{
			laserState = !laserState;
    6eda:	4b9a      	ldr	r3, [pc, #616]	; (7144 <main+0x330>)
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	1e5a      	subs	r2, r3, #1
    6ee0:	4193      	sbcs	r3, r2
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	2201      	movs	r2, #1
    6ee6:	4053      	eors	r3, r2
    6ee8:	b2db      	uxtb	r3, r3
    6eea:	1c1a      	adds	r2, r3, #0
    6eec:	2301      	movs	r3, #1
    6eee:	4013      	ands	r3, r2
    6ef0:	b2da      	uxtb	r2, r3
    6ef2:	4b94      	ldr	r3, [pc, #592]	; (7144 <main+0x330>)
    6ef4:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(PIN_PB08, laserState);
    6ef6:	4b93      	ldr	r3, [pc, #588]	; (7144 <main+0x330>)
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	2028      	movs	r0, #40	; 0x28
    6efc:	1c19      	adds	r1, r3, #0
    6efe:	4b92      	ldr	r3, [pc, #584]	; (7148 <main+0x334>)
    6f00:	4798      	blx	r3
		}

		//Do the wheel update
		update_values();
    6f02:	4b92      	ldr	r3, [pc, #584]	; (714c <main+0x338>)
    6f04:	4798      	blx	r3
		
		getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    6f06:	1d3a      	adds	r2, r7, #4
    6f08:	1d3b      	adds	r3, r7, #4
    6f0a:	3301      	adds	r3, #1
    6f0c:	1c10      	adds	r0, r2, #0
    6f0e:	1c19      	adds	r1, r3, #0
    6f10:	4b8f      	ldr	r3, [pc, #572]	; (7150 <main+0x33c>)
    6f12:	4798      	blx	r3
		
		lbutton = button;
    6f14:	4b89      	ldr	r3, [pc, #548]	; (713c <main+0x328>)
    6f16:	781a      	ldrb	r2, [r3, #0]
    6f18:	4b89      	ldr	r3, [pc, #548]	; (7140 <main+0x32c>)
    6f1a:	701a      	strb	r2, [r3, #0]
		//check if the RFM69 receives a  packet
		//only send info when a packet is received from dongle module			
		static int count = 0;
		if (RFM_receiveDone())// && RFM_SENDERID == 2) // Got one!  /*count >= 100)*/
    6f1c:	4b8d      	ldr	r3, [pc, #564]	; (7154 <main+0x340>)
    6f1e:	4798      	blx	r3
    6f20:	1e03      	subs	r3, r0, #0
    6f22:	d100      	bne.n	6f26 <main+0x112>
    6f24:	e097      	b.n	7056 <main+0x242>
		{
		    count = 0;
    6f26:	4b8c      	ldr	r3, [pc, #560]	; (7158 <main+0x344>)
    6f28:	2200      	movs	r2, #0
    6f2a:	601a      	str	r2, [r3, #0]
			receivingNode = RFM_SENDERID;
    6f2c:	4b8b      	ldr	r3, [pc, #556]	; (715c <main+0x348>)
    6f2e:	881b      	ldrh	r3, [r3, #0]
    6f30:	b29b      	uxth	r3, r3
    6f32:	627b      	str	r3, [r7, #36]	; 0x24
			if (RFM_DATA[0] == 'Y'){
    6f34:	4b8a      	ldr	r3, [pc, #552]	; (7160 <main+0x34c>)
    6f36:	881b      	ldrh	r3, [r3, #0]
    6f38:	b29b      	uxth	r3, r3
    6f3a:	2b59      	cmp	r3, #89	; 0x59
    6f3c:	d103      	bne.n	6f46 <main+0x132>
				calibrationLEDS = true;
    6f3e:	232f      	movs	r3, #47	; 0x2f
    6f40:	18fb      	adds	r3, r7, r3
    6f42:	2201      	movs	r2, #1
    6f44:	701a      	strb	r2, [r3, #0]
			}
			if (RFM_DATA[0] == 'N'){
    6f46:	4b86      	ldr	r3, [pc, #536]	; (7160 <main+0x34c>)
    6f48:	881b      	ldrh	r3, [r3, #0]
    6f4a:	b29b      	uxth	r3, r3
    6f4c:	2b4e      	cmp	r3, #78	; 0x4e
    6f4e:	d103      	bne.n	6f58 <main+0x144>
				calibrationLEDS = false;
    6f50:	232f      	movs	r3, #47	; 0x2f
    6f52:	18fb      	adds	r3, r7, r3
    6f54:	2200      	movs	r2, #0
    6f56:	701a      	strb	r2, [r3, #0]
			}
			// The actual message is contained in the RFM_DATA array,
			// and is RFM_DATALEN bytes in size:
			getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    6f58:	1d3a      	adds	r2, r7, #4
    6f5a:	1d3b      	adds	r3, r7, #4
    6f5c:	3301      	adds	r3, #1
    6f5e:	1c10      	adds	r0, r2, #0
    6f60:	1c19      	adds	r1, r3, #0
    6f62:	4b7b      	ldr	r3, [pc, #492]	; (7150 <main+0x33c>)
    6f64:	4798      	blx	r3

			sendbuffer[2] = 0;
    6f66:	1d3b      	adds	r3, r7, #4
    6f68:	2200      	movs	r2, #0
    6f6a:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA20) << 7); // Up
    6f6c:	2014      	movs	r0, #20
    6f6e:	4b72      	ldr	r3, [pc, #456]	; (7138 <main+0x324>)
    6f70:	4798      	blx	r3
    6f72:	1c03      	adds	r3, r0, #0
    6f74:	01d9      	lsls	r1, r3, #7
    6f76:	1d3b      	adds	r3, r7, #4
    6f78:	789a      	ldrb	r2, [r3, #2]
    6f7a:	b2cb      	uxtb	r3, r1
    6f7c:	4313      	orrs	r3, r2
    6f7e:	b2da      	uxtb	r2, r3
    6f80:	1d3b      	adds	r3, r7, #4
    6f82:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA12) << 6); // Down
    6f84:	200c      	movs	r0, #12
    6f86:	4b6c      	ldr	r3, [pc, #432]	; (7138 <main+0x324>)
    6f88:	4798      	blx	r3
    6f8a:	1c03      	adds	r3, r0, #0
    6f8c:	0199      	lsls	r1, r3, #6
    6f8e:	1d3b      	adds	r3, r7, #4
    6f90:	789a      	ldrb	r2, [r3, #2]
    6f92:	b2cb      	uxtb	r3, r1
    6f94:	4313      	orrs	r3, r2
    6f96:	b2da      	uxtb	r2, r3
    6f98:	1d3b      	adds	r3, r7, #4
    6f9a:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB09) << 5); // Left
    6f9c:	2029      	movs	r0, #41	; 0x29
    6f9e:	4b66      	ldr	r3, [pc, #408]	; (7138 <main+0x324>)
    6fa0:	4798      	blx	r3
    6fa2:	1c03      	adds	r3, r0, #0
    6fa4:	0159      	lsls	r1, r3, #5
    6fa6:	1d3b      	adds	r3, r7, #4
    6fa8:	789a      	ldrb	r2, [r3, #2]
    6faa:	b2cb      	uxtb	r3, r1
    6fac:	4313      	orrs	r3, r2
    6fae:	b2da      	uxtb	r2, r3
    6fb0:	1d3b      	adds	r3, r7, #4
    6fb2:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA04) << 4); // Right
    6fb4:	2004      	movs	r0, #4
    6fb6:	4b60      	ldr	r3, [pc, #384]	; (7138 <main+0x324>)
    6fb8:	4798      	blx	r3
    6fba:	1c03      	adds	r3, r0, #0
    6fbc:	0119      	lsls	r1, r3, #4
    6fbe:	1d3b      	adds	r3, r7, #4
    6fc0:	789a      	ldrb	r2, [r3, #2]
    6fc2:	b2cb      	uxtb	r3, r1
    6fc4:	4313      	orrs	r3, r2
    6fc6:	b2da      	uxtb	r2, r3
    6fc8:	1d3b      	adds	r3, r7, #4
    6fca:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB02) << 3); // Left Click
    6fcc:	2022      	movs	r0, #34	; 0x22
    6fce:	4b5a      	ldr	r3, [pc, #360]	; (7138 <main+0x324>)
    6fd0:	4798      	blx	r3
    6fd2:	1c03      	adds	r3, r0, #0
    6fd4:	00d9      	lsls	r1, r3, #3
    6fd6:	1d3b      	adds	r3, r7, #4
    6fd8:	789a      	ldrb	r2, [r3, #2]
    6fda:	b2cb      	uxtb	r3, r1
    6fdc:	4313      	orrs	r3, r2
    6fde:	b2da      	uxtb	r2, r3
    6fe0:	1d3b      	adds	r3, r7, #4
    6fe2:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA15) << 2); // Right Click
    6fe4:	200f      	movs	r0, #15
    6fe6:	4b54      	ldr	r3, [pc, #336]	; (7138 <main+0x324>)
    6fe8:	4798      	blx	r3
    6fea:	1c03      	adds	r3, r0, #0
    6fec:	0099      	lsls	r1, r3, #2
    6fee:	1d3b      	adds	r3, r7, #4
    6ff0:	789a      	ldrb	r2, [r3, #2]
    6ff2:	b2cb      	uxtb	r3, r1
    6ff4:	4313      	orrs	r3, r2
    6ff6:	b2da      	uxtb	r2, r3
    6ff8:	1d3b      	adds	r3, r7, #4
    6ffa:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (!port_pin_get_input_level(PIN_PA13) << 1); // Middle Click
    6ffc:	200d      	movs	r0, #13
    6ffe:	4b4e      	ldr	r3, [pc, #312]	; (7138 <main+0x324>)
    7000:	4798      	blx	r3
    7002:	1c03      	adds	r3, r0, #0
    7004:	1c1a      	adds	r2, r3, #0
    7006:	2301      	movs	r3, #1
    7008:	4053      	eors	r3, r2
    700a:	b2db      	uxtb	r3, r3
    700c:	0059      	lsls	r1, r3, #1
    700e:	1d3b      	adds	r3, r7, #4
    7010:	789a      	ldrb	r2, [r3, #2]
    7012:	b2cb      	uxtb	r3, r1
    7014:	4313      	orrs	r3, r2
    7016:	b2da      	uxtb	r2, r3
    7018:	1d3b      	adds	r3, r7, #4
    701a:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= laserState;								// Laser State
    701c:	1d3b      	adds	r3, r7, #4
    701e:	789a      	ldrb	r2, [r3, #2]
    7020:	4b48      	ldr	r3, [pc, #288]	; (7144 <main+0x330>)
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	b2db      	uxtb	r3, r3
    7026:	4313      	orrs	r3, r2
    7028:	b2da      	uxtb	r2, r3
    702a:	1d3b      	adds	r3, r7, #4
    702c:	709a      	strb	r2, [r3, #2]

			for(int i = 0; i < 1; i++) {}
    702e:	2300      	movs	r3, #0
    7030:	62bb      	str	r3, [r7, #40]	; 0x28
    7032:	e002      	b.n	703a <main+0x226>
    7034:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7036:	3301      	adds	r3, #1
    7038:	62bb      	str	r3, [r7, #40]	; 0x28
    703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    703c:	2b00      	cmp	r3, #0
    703e:	ddf9      	ble.n	7034 <main+0x220>
			RFM_send(receivingNode, sendbuffer, sendlength, false);
    7040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7042:	b2d9      	uxtb	r1, r3
    7044:	69fb      	ldr	r3, [r7, #28]
    7046:	b2db      	uxtb	r3, r3
    7048:	1d3a      	adds	r2, r7, #4
    704a:	1c08      	adds	r0, r1, #0
    704c:	1c11      	adds	r1, r2, #0
    704e:	1c1a      	adds	r2, r3, #0
    7050:	2300      	movs	r3, #0
    7052:	4c44      	ldr	r4, [pc, #272]	; (7164 <main+0x350>)
    7054:	47a0      	blx	r4
		}
		count++;
    7056:	4b40      	ldr	r3, [pc, #256]	; (7158 <main+0x344>)
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	1c5a      	adds	r2, r3, #1
    705c:	4b3e      	ldr	r3, [pc, #248]	; (7158 <main+0x344>)
    705e:	601a      	str	r2, [r3, #0]

		state = lipo_soc(FILTERED);
    7060:	2322      	movs	r3, #34	; 0x22
    7062:	18fc      	adds	r4, r7, r3
    7064:	2000      	movs	r0, #0
    7066:	4b40      	ldr	r3, [pc, #256]	; (7168 <main+0x354>)
    7068:	4798      	blx	r3
    706a:	1c03      	adds	r3, r0, #0
    706c:	8023      	strh	r3, [r4, #0]
		current = lipo_current(AVG);
    706e:	2316      	movs	r3, #22
    7070:	18fc      	adds	r4, r7, r3
    7072:	2000      	movs	r0, #0
    7074:	4b3d      	ldr	r3, [pc, #244]	; (716c <main+0x358>)
    7076:	4798      	blx	r3
    7078:	1c03      	adds	r3, r0, #0
    707a:	8023      	strh	r3, [r4, #0]

		if(current >= -1){
    707c:	2316      	movs	r3, #22
    707e:	18fb      	adds	r3, r7, r3
    7080:	2200      	movs	r2, #0
    7082:	5e9b      	ldrsh	r3, [r3, r2]
    7084:	3301      	adds	r3, #1
    7086:	db04      	blt.n	7092 <main+0x27e>
			charging = true;
    7088:	232e      	movs	r3, #46	; 0x2e
    708a:	18fb      	adds	r3, r7, r3
    708c:	2201      	movs	r2, #1
    708e:	701a      	strb	r2, [r3, #0]
    7090:	e003      	b.n	709a <main+0x286>
		}
		else{
			charging = false;
    7092:	232e      	movs	r3, #46	; 0x2e
    7094:	18fb      	adds	r3, r7, r3
    7096:	2200      	movs	r2, #0
    7098:	701a      	strb	r2, [r3, #0]
		}

		if(state > 10 && charging){
    709a:	2322      	movs	r3, #34	; 0x22
    709c:	18fb      	adds	r3, r7, r3
    709e:	881b      	ldrh	r3, [r3, #0]
    70a0:	2b0a      	cmp	r3, #10
    70a2:	d90b      	bls.n	70bc <main+0x2a8>
    70a4:	232e      	movs	r3, #46	; 0x2e
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	781b      	ldrb	r3, [r3, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d006      	beq.n	70bc <main+0x2a8>
			colorGradient(state);
    70ae:	2322      	movs	r3, #34	; 0x22
    70b0:	18fb      	adds	r3, r7, r3
    70b2:	881b      	ldrh	r3, [r3, #0]
    70b4:	1c18      	adds	r0, r3, #0
    70b6:	4b2e      	ldr	r3, [pc, #184]	; (7170 <main+0x35c>)
    70b8:	4798      	blx	r3
    70ba:	e022      	b.n	7102 <main+0x2ee>
		}
		else if(state > 10 && !charging){
    70bc:	2322      	movs	r3, #34	; 0x22
    70be:	18fb      	adds	r3, r7, r3
    70c0:	881b      	ldrh	r3, [r3, #0]
    70c2:	2b0a      	cmp	r3, #10
    70c4:	d90e      	bls.n	70e4 <main+0x2d0>
    70c6:	232e      	movs	r3, #46	; 0x2e
    70c8:	18fb      	adds	r3, r7, r3
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	2201      	movs	r2, #1
    70ce:	4053      	eors	r3, r2
    70d0:	b2db      	uxtb	r3, r3
    70d2:	2b00      	cmp	r3, #0
    70d4:	d006      	beq.n	70e4 <main+0x2d0>
			colorSolid(state);
    70d6:	2322      	movs	r3, #34	; 0x22
    70d8:	18fb      	adds	r3, r7, r3
    70da:	881b      	ldrh	r3, [r3, #0]
    70dc:	1c18      	adds	r0, r3, #0
    70de:	4b25      	ldr	r3, [pc, #148]	; (7174 <main+0x360>)
    70e0:	4798      	blx	r3
    70e2:	e00e      	b.n	7102 <main+0x2ee>
		}
		else if(state > 5){
    70e4:	2322      	movs	r3, #34	; 0x22
    70e6:	18fb      	adds	r3, r7, r3
    70e8:	881b      	ldrh	r3, [r3, #0]
    70ea:	2b05      	cmp	r3, #5
    70ec:	d902      	bls.n	70f4 <main+0x2e0>
			blinkRed();
    70ee:	4b22      	ldr	r3, [pc, #136]	; (7178 <main+0x364>)
    70f0:	4798      	blx	r3
    70f2:	e006      	b.n	7102 <main+0x2ee>
		}
		else{
			//Put into sleep mode, but I don't know how to do that
			while(lipo_soc(FILTERED) < 0x0005){}
    70f4:	46c0      	nop			; (mov r8, r8)
    70f6:	2000      	movs	r0, #0
    70f8:	4b1b      	ldr	r3, [pc, #108]	; (7168 <main+0x354>)
    70fa:	4798      	blx	r3
    70fc:	1e03      	subs	r3, r0, #0
    70fe:	2b04      	cmp	r3, #4
    7100:	d9f9      	bls.n	70f6 <main+0x2e2>
		}
	}
    7102:	e6d1      	b.n	6ea8 <main+0x94>
    7104:	00004d75 	.word	0x00004d75
    7108:	00006c79 	.word	0x00006c79
    710c:	00006d69 	.word	0x00006d69
    7110:	0000632d 	.word	0x0000632d
    7114:	0000ffff 	.word	0x0000ffff
    7118:	0000717d 	.word	0x0000717d
    711c:	00006389 	.word	0x00006389
    7120:	000057c9 	.word	0x000057c9
    7124:	00005711 	.word	0x00005711
    7128:	000090b0 	.word	0x000090b0
    712c:	00006041 	.word	0x00006041
    7130:	00000bb5 	.word	0x00000bb5
    7134:	000071f5 	.word	0x000071f5
    7138:	00004f49 	.word	0x00004f49
    713c:	2000006a 	.word	0x2000006a
    7140:	2000006b 	.word	0x2000006b
    7144:	2000006c 	.word	0x2000006c
    7148:	00004f8d 	.word	0x00004f8d
    714c:	00000bfd 	.word	0x00000bfd
    7150:	00000d6d 	.word	0x00000d6d
    7154:	00005fe5 	.word	0x00005fe5
    7158:	20000070 	.word	0x20000070
    715c:	20000116 	.word	0x20000116
    7160:	20000180 	.word	0x20000180
    7164:	00005cd1 	.word	0x00005cd1
    7168:	00006455 	.word	0x00006455
    716c:	000063e5 	.word	0x000063e5
    7170:	000072bd 	.word	0x000072bd
    7174:	00007411 	.word	0x00007411
    7178:	00007399 	.word	0x00007399

0000717c <setTrackBallRGBW>:
}

void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{	
    717c:	b5b0      	push	{r4, r5, r7, lr}
    717e:	b082      	sub	sp, #8
    7180:	af00      	add	r7, sp, #0
    7182:	1c05      	adds	r5, r0, #0
    7184:	1c0c      	adds	r4, r1, #0
    7186:	1c10      	adds	r0, r2, #0
    7188:	1c19      	adds	r1, r3, #0
    718a:	1dbb      	adds	r3, r7, #6
    718c:	1c2a      	adds	r2, r5, #0
    718e:	801a      	strh	r2, [r3, #0]
    7190:	1d3b      	adds	r3, r7, #4
    7192:	1c22      	adds	r2, r4, #0
    7194:	801a      	strh	r2, [r3, #0]
    7196:	1cbb      	adds	r3, r7, #2
    7198:	1c02      	adds	r2, r0, #0
    719a:	801a      	strh	r2, [r3, #0]
    719c:	1c3b      	adds	r3, r7, #0
    719e:	1c0a      	adds	r2, r1, #0
    71a0:	801a      	strh	r2, [r3, #0]
	/* WHITE */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), white);
    71a2:	1c3b      	adds	r3, r7, #0
    71a4:	881b      	ldrh	r3, [r3, #0]
    71a6:	4a10      	ldr	r2, [pc, #64]	; (71e8 <setTrackBallRGBW+0x6c>)
    71a8:	1c10      	adds	r0, r2, #0
    71aa:	2100      	movs	r1, #0
    71ac:	1c1a      	adds	r2, r3, #0
    71ae:	4b0f      	ldr	r3, [pc, #60]	; (71ec <setTrackBallRGBW+0x70>)
    71b0:	4798      	blx	r3
	/* GREEN */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    71b2:	1d3b      	adds	r3, r7, #4
    71b4:	881b      	ldrh	r3, [r3, #0]
    71b6:	4a0c      	ldr	r2, [pc, #48]	; (71e8 <setTrackBallRGBW+0x6c>)
    71b8:	1c10      	adds	r0, r2, #0
    71ba:	2103      	movs	r1, #3
    71bc:	1c1a      	adds	r2, r3, #0
    71be:	4b0b      	ldr	r3, [pc, #44]	; (71ec <setTrackBallRGBW+0x70>)
    71c0:	4798      	blx	r3
	/* BLUE */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), blue);
    71c2:	1cbb      	adds	r3, r7, #2
    71c4:	881b      	ldrh	r3, [r3, #0]
    71c6:	4a0a      	ldr	r2, [pc, #40]	; (71f0 <setTrackBallRGBW+0x74>)
    71c8:	1c10      	adds	r0, r2, #0
    71ca:	2100      	movs	r1, #0
    71cc:	1c1a      	adds	r2, r3, #0
    71ce:	4b07      	ldr	r3, [pc, #28]	; (71ec <setTrackBallRGBW+0x70>)
    71d0:	4798      	blx	r3
	/* RED */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), red);
    71d2:	1dbb      	adds	r3, r7, #6
    71d4:	881b      	ldrh	r3, [r3, #0]
    71d6:	4a06      	ldr	r2, [pc, #24]	; (71f0 <setTrackBallRGBW+0x74>)
    71d8:	1c10      	adds	r0, r2, #0
    71da:	2101      	movs	r1, #1
    71dc:	1c1a      	adds	r2, r3, #0
    71de:	4b03      	ldr	r3, [pc, #12]	; (71ec <setTrackBallRGBW+0x70>)
    71e0:	4798      	blx	r3
} 
    71e2:	46bd      	mov	sp, r7
    71e4:	b002      	add	sp, #8
    71e6:	bdb0      	pop	{r4, r5, r7, pc}
    71e8:	20000134 	.word	0x20000134
    71ec:	00002c75 	.word	0x00002c75
    71f0:	20000274 	.word	0x20000274

000071f4 <ColorCycle>:

void ColorCycle(void)
{
    71f4:	b598      	push	{r3, r4, r7, lr}
    71f6:	af00      	add	r7, sp, #0
	static int color = 0;
	static int speed = 100;
	static int index = 0;
	if(index == 0)
    71f8:	4b2b      	ldr	r3, [pc, #172]	; (72a8 <ColorCycle+0xb4>)
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	2b00      	cmp	r3, #0
    71fe:	d10e      	bne.n	721e <ColorCycle+0x2a>
	{
		setTrackBallRGBW(0xFFFF - color,color,0x0,0x0);
    7200:	4b2a      	ldr	r3, [pc, #168]	; (72ac <ColorCycle+0xb8>)
    7202:	681b      	ldr	r3, [r3, #0]
    7204:	b29b      	uxth	r3, r3
    7206:	43db      	mvns	r3, r3
    7208:	b29a      	uxth	r2, r3
    720a:	4b28      	ldr	r3, [pc, #160]	; (72ac <ColorCycle+0xb8>)
    720c:	681b      	ldr	r3, [r3, #0]
    720e:	b29b      	uxth	r3, r3
    7210:	1c10      	adds	r0, r2, #0
    7212:	1c19      	adds	r1, r3, #0
    7214:	2200      	movs	r2, #0
    7216:	2300      	movs	r3, #0
    7218:	4c25      	ldr	r4, [pc, #148]	; (72b0 <ColorCycle+0xbc>)
    721a:	47a0      	blx	r4
    721c:	e024      	b.n	7268 <ColorCycle+0x74>
	}
	else if(index == 1)
    721e:	4b22      	ldr	r3, [pc, #136]	; (72a8 <ColorCycle+0xb4>)
    7220:	681b      	ldr	r3, [r3, #0]
    7222:	2b01      	cmp	r3, #1
    7224:	d10e      	bne.n	7244 <ColorCycle+0x50>
	{
		setTrackBallRGBW(0x0,0xFFFF - color,color,0x0);
    7226:	4b21      	ldr	r3, [pc, #132]	; (72ac <ColorCycle+0xb8>)
    7228:	681b      	ldr	r3, [r3, #0]
    722a:	b29b      	uxth	r3, r3
    722c:	43db      	mvns	r3, r3
    722e:	b29a      	uxth	r2, r3
    7230:	4b1e      	ldr	r3, [pc, #120]	; (72ac <ColorCycle+0xb8>)
    7232:	681b      	ldr	r3, [r3, #0]
    7234:	b29b      	uxth	r3, r3
    7236:	2000      	movs	r0, #0
    7238:	1c11      	adds	r1, r2, #0
    723a:	1c1a      	adds	r2, r3, #0
    723c:	2300      	movs	r3, #0
    723e:	4c1c      	ldr	r4, [pc, #112]	; (72b0 <ColorCycle+0xbc>)
    7240:	47a0      	blx	r4
    7242:	e011      	b.n	7268 <ColorCycle+0x74>
	}
	else if(index == 2)
    7244:	4b18      	ldr	r3, [pc, #96]	; (72a8 <ColorCycle+0xb4>)
    7246:	681b      	ldr	r3, [r3, #0]
    7248:	2b02      	cmp	r3, #2
    724a:	d10d      	bne.n	7268 <ColorCycle+0x74>
	{
		setTrackBallRGBW(color,0x0,0xFFFF - color,0x0);
    724c:	4b17      	ldr	r3, [pc, #92]	; (72ac <ColorCycle+0xb8>)
    724e:	681b      	ldr	r3, [r3, #0]
    7250:	b29a      	uxth	r2, r3
    7252:	4b16      	ldr	r3, [pc, #88]	; (72ac <ColorCycle+0xb8>)
    7254:	681b      	ldr	r3, [r3, #0]
    7256:	b29b      	uxth	r3, r3
    7258:	43db      	mvns	r3, r3
    725a:	b29b      	uxth	r3, r3
    725c:	1c10      	adds	r0, r2, #0
    725e:	2100      	movs	r1, #0
    7260:	1c1a      	adds	r2, r3, #0
    7262:	2300      	movs	r3, #0
    7264:	4c12      	ldr	r4, [pc, #72]	; (72b0 <ColorCycle+0xbc>)
    7266:	47a0      	blx	r4
	}
	
	color += speed;
    7268:	4b10      	ldr	r3, [pc, #64]	; (72ac <ColorCycle+0xb8>)
    726a:	681a      	ldr	r2, [r3, #0]
    726c:	4b11      	ldr	r3, [pc, #68]	; (72b4 <ColorCycle+0xc0>)
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	18d2      	adds	r2, r2, r3
    7272:	4b0e      	ldr	r3, [pc, #56]	; (72ac <ColorCycle+0xb8>)
    7274:	601a      	str	r2, [r3, #0]
	if(color >= (0xFFFF - speed))
    7276:	4b0f      	ldr	r3, [pc, #60]	; (72b4 <ColorCycle+0xc0>)
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	4a0f      	ldr	r2, [pc, #60]	; (72b8 <ColorCycle+0xc4>)
    727c:	1ad2      	subs	r2, r2, r3
    727e:	4b0b      	ldr	r3, [pc, #44]	; (72ac <ColorCycle+0xb8>)
    7280:	681b      	ldr	r3, [r3, #0]
    7282:	429a      	cmp	r2, r3
    7284:	dc0e      	bgt.n	72a4 <ColorCycle+0xb0>
	{
		color = 0;
    7286:	4b09      	ldr	r3, [pc, #36]	; (72ac <ColorCycle+0xb8>)
    7288:	2200      	movs	r2, #0
    728a:	601a      	str	r2, [r3, #0]
		index++;
    728c:	4b06      	ldr	r3, [pc, #24]	; (72a8 <ColorCycle+0xb4>)
    728e:	681b      	ldr	r3, [r3, #0]
    7290:	1c5a      	adds	r2, r3, #1
    7292:	4b05      	ldr	r3, [pc, #20]	; (72a8 <ColorCycle+0xb4>)
    7294:	601a      	str	r2, [r3, #0]

		if(index > 2){
    7296:	4b04      	ldr	r3, [pc, #16]	; (72a8 <ColorCycle+0xb4>)
    7298:	681b      	ldr	r3, [r3, #0]
    729a:	2b02      	cmp	r3, #2
    729c:	dd02      	ble.n	72a4 <ColorCycle+0xb0>
			index = 0;
    729e:	4b02      	ldr	r3, [pc, #8]	; (72a8 <ColorCycle+0xb4>)
    72a0:	2200      	movs	r2, #0
    72a2:	601a      	str	r2, [r3, #0]
		}
		
	}
}
    72a4:	46bd      	mov	sp, r7
    72a6:	bd98      	pop	{r3, r4, r7, pc}
    72a8:	20000074 	.word	0x20000074
    72ac:	20000078 	.word	0x20000078
    72b0:	0000717d 	.word	0x0000717d
    72b4:	20000004 	.word	0x20000004
    72b8:	0000ffff 	.word	0x0000ffff

000072bc <colorGradient>:

void colorGradient(uint16_t state){
    72bc:	b590      	push	{r4, r7, lr}
    72be:	b083      	sub	sp, #12
    72c0:	af00      	add	r7, sp, #0
    72c2:	1c02      	adds	r2, r0, #0
    72c4:	1dbb      	adds	r3, r7, #6
    72c6:	801a      	strh	r2, [r3, #0]
	static int gradient = 0;
	static int updown = 0; //up = 1, down = 0
	static int speed = 100;
	
	//Now check if it's max faded
	if(gradient >= (0xFFFF - speed)){ //yes (max)
    72c8:	4b2e      	ldr	r3, [pc, #184]	; (7384 <colorGradient+0xc8>)
    72ca:	681b      	ldr	r3, [r3, #0]
    72cc:	4a2e      	ldr	r2, [pc, #184]	; (7388 <colorGradient+0xcc>)
    72ce:	1ad2      	subs	r2, r2, r3
    72d0:	4b2e      	ldr	r3, [pc, #184]	; (738c <colorGradient+0xd0>)
    72d2:	681b      	ldr	r3, [r3, #0]
    72d4:	429a      	cmp	r2, r3
    72d6:	dc03      	bgt.n	72e0 <colorGradient+0x24>
		updown = 0;
    72d8:	4b2d      	ldr	r3, [pc, #180]	; (7390 <colorGradient+0xd4>)
    72da:	2200      	movs	r2, #0
    72dc:	601a      	str	r2, [r3, #0]
    72de:	e006      	b.n	72ee <colorGradient+0x32>
	}
	else if(gradient <= 0){ //No, min
    72e0:	4b2a      	ldr	r3, [pc, #168]	; (738c <colorGradient+0xd0>)
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	2b00      	cmp	r3, #0
    72e6:	dc02      	bgt.n	72ee <colorGradient+0x32>
		updown = 1;
    72e8:	4b29      	ldr	r3, [pc, #164]	; (7390 <colorGradient+0xd4>)
    72ea:	2201      	movs	r2, #1
    72ec:	601a      	str	r2, [r3, #0]
	}

	//Increment or decrement
	if(updown){
    72ee:	4b28      	ldr	r3, [pc, #160]	; (7390 <colorGradient+0xd4>)
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d007      	beq.n	7306 <colorGradient+0x4a>
		gradient += speed;
    72f6:	4b25      	ldr	r3, [pc, #148]	; (738c <colorGradient+0xd0>)
    72f8:	681a      	ldr	r2, [r3, #0]
    72fa:	4b22      	ldr	r3, [pc, #136]	; (7384 <colorGradient+0xc8>)
    72fc:	681b      	ldr	r3, [r3, #0]
    72fe:	18d2      	adds	r2, r2, r3
    7300:	4b22      	ldr	r3, [pc, #136]	; (738c <colorGradient+0xd0>)
    7302:	601a      	str	r2, [r3, #0]
    7304:	e006      	b.n	7314 <colorGradient+0x58>
	}
	else{
		gradient -= speed;
    7306:	4b21      	ldr	r3, [pc, #132]	; (738c <colorGradient+0xd0>)
    7308:	681a      	ldr	r2, [r3, #0]
    730a:	4b1e      	ldr	r3, [pc, #120]	; (7384 <colorGradient+0xc8>)
    730c:	681b      	ldr	r3, [r3, #0]
    730e:	1ad2      	subs	r2, r2, r3
    7310:	4b1e      	ldr	r3, [pc, #120]	; (738c <colorGradient+0xd0>)
    7312:	601a      	str	r2, [r3, #0]
	}

	//See what color the RGB should be
	if(state > 65){ //green
    7314:	1dbb      	adds	r3, r7, #6
    7316:	881b      	ldrh	r3, [r3, #0]
    7318:	2b41      	cmp	r3, #65	; 0x41
    731a:	d90b      	bls.n	7334 <colorGradient+0x78>
		setTrackBallRGBW(0x0, 0xFFFF - gradient, 0x0000, 0x0000);
    731c:	4b1b      	ldr	r3, [pc, #108]	; (738c <colorGradient+0xd0>)
    731e:	681b      	ldr	r3, [r3, #0]
    7320:	b29b      	uxth	r3, r3
    7322:	43db      	mvns	r3, r3
    7324:	b29b      	uxth	r3, r3
    7326:	2000      	movs	r0, #0
    7328:	1c19      	adds	r1, r3, #0
    732a:	2200      	movs	r2, #0
    732c:	2300      	movs	r3, #0
    732e:	4c19      	ldr	r4, [pc, #100]	; (7394 <colorGradient+0xd8>)
    7330:	47a0      	blx	r4
    7332:	e023      	b.n	737c <colorGradient+0xc0>
	}
	else if(state > 25){ //yellow
    7334:	1dbb      	adds	r3, r7, #6
    7336:	881b      	ldrh	r3, [r3, #0]
    7338:	2b19      	cmp	r3, #25
    733a:	d910      	bls.n	735e <colorGradient+0xa2>
		//setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
		setTrackBallRGBW(0xFFFF - gradient, 0xFFFF - gradient, 0x0, 0x0);
    733c:	4b13      	ldr	r3, [pc, #76]	; (738c <colorGradient+0xd0>)
    733e:	681b      	ldr	r3, [r3, #0]
    7340:	b29b      	uxth	r3, r3
    7342:	43db      	mvns	r3, r3
    7344:	b29a      	uxth	r2, r3
    7346:	4b11      	ldr	r3, [pc, #68]	; (738c <colorGradient+0xd0>)
    7348:	681b      	ldr	r3, [r3, #0]
    734a:	b29b      	uxth	r3, r3
    734c:	43db      	mvns	r3, r3
    734e:	b29b      	uxth	r3, r3
    7350:	1c10      	adds	r0, r2, #0
    7352:	1c19      	adds	r1, r3, #0
    7354:	2200      	movs	r2, #0
    7356:	2300      	movs	r3, #0
    7358:	4c0e      	ldr	r4, [pc, #56]	; (7394 <colorGradient+0xd8>)
    735a:	47a0      	blx	r4
    735c:	e00e      	b.n	737c <colorGradient+0xc0>
	}
	else if(state > 10){ //red
    735e:	1dbb      	adds	r3, r7, #6
    7360:	881b      	ldrh	r3, [r3, #0]
    7362:	2b0a      	cmp	r3, #10
    7364:	d90a      	bls.n	737c <colorGradient+0xc0>
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
    7366:	4b09      	ldr	r3, [pc, #36]	; (738c <colorGradient+0xd0>)
    7368:	681b      	ldr	r3, [r3, #0]
    736a:	b29b      	uxth	r3, r3
    736c:	43db      	mvns	r3, r3
    736e:	b29b      	uxth	r3, r3
    7370:	1c18      	adds	r0, r3, #0
    7372:	2100      	movs	r1, #0
    7374:	2200      	movs	r2, #0
    7376:	2300      	movs	r3, #0
    7378:	4c06      	ldr	r4, [pc, #24]	; (7394 <colorGradient+0xd8>)
    737a:	47a0      	blx	r4
	}
	else{}
}
    737c:	46bd      	mov	sp, r7
    737e:	b003      	add	sp, #12
    7380:	bd90      	pop	{r4, r7, pc}
    7382:	46c0      	nop			; (mov r8, r8)
    7384:	20000008 	.word	0x20000008
    7388:	0000ffff 	.word	0x0000ffff
    738c:	2000007c 	.word	0x2000007c
    7390:	20000080 	.word	0x20000080
    7394:	0000717d 	.word	0x0000717d

00007398 <blinkRed>:


void blinkRed(void){
    7398:	b598      	push	{r3, r4, r7, lr}
    739a:	af00      	add	r7, sp, #0
	static int time_on = 200;
	static int count = 0;
	static int updown = 0;

	if(count >= time_on){
    739c:	4b17      	ldr	r3, [pc, #92]	; (73fc <blinkRed+0x64>)
    739e:	681a      	ldr	r2, [r3, #0]
    73a0:	4b17      	ldr	r3, [pc, #92]	; (7400 <blinkRed+0x68>)
    73a2:	681b      	ldr	r3, [r3, #0]
    73a4:	429a      	cmp	r2, r3
    73a6:	db03      	blt.n	73b0 <blinkRed+0x18>
		updown = 0;
    73a8:	4b16      	ldr	r3, [pc, #88]	; (7404 <blinkRed+0x6c>)
    73aa:	2200      	movs	r2, #0
    73ac:	601a      	str	r2, [r3, #0]
    73ae:	e006      	b.n	73be <blinkRed+0x26>
	}

	else if(count <= 0){
    73b0:	4b12      	ldr	r3, [pc, #72]	; (73fc <blinkRed+0x64>)
    73b2:	681b      	ldr	r3, [r3, #0]
    73b4:	2b00      	cmp	r3, #0
    73b6:	dc02      	bgt.n	73be <blinkRed+0x26>
		updown = 1;
    73b8:	4b12      	ldr	r3, [pc, #72]	; (7404 <blinkRed+0x6c>)
    73ba:	2201      	movs	r2, #1
    73bc:	601a      	str	r2, [r3, #0]
	}

	if(updown){
    73be:	4b11      	ldr	r3, [pc, #68]	; (7404 <blinkRed+0x6c>)
    73c0:	681b      	ldr	r3, [r3, #0]
    73c2:	2b00      	cmp	r3, #0
    73c4:	d00c      	beq.n	73e0 <blinkRed+0x48>
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
    73c6:	4b10      	ldr	r3, [pc, #64]	; (7408 <blinkRed+0x70>)
    73c8:	1c18      	adds	r0, r3, #0
    73ca:	2100      	movs	r1, #0
    73cc:	2200      	movs	r2, #0
    73ce:	2300      	movs	r3, #0
    73d0:	4c0e      	ldr	r4, [pc, #56]	; (740c <blinkRed+0x74>)
    73d2:	47a0      	blx	r4
		count++;
    73d4:	4b09      	ldr	r3, [pc, #36]	; (73fc <blinkRed+0x64>)
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	1c5a      	adds	r2, r3, #1
    73da:	4b08      	ldr	r3, [pc, #32]	; (73fc <blinkRed+0x64>)
    73dc:	601a      	str	r2, [r3, #0]
    73de:	e00a      	b.n	73f6 <blinkRed+0x5e>
	}
	else{
		setTrackBallRGBW(0x0, 0x0, 0x0, 0x0);
    73e0:	2000      	movs	r0, #0
    73e2:	2100      	movs	r1, #0
    73e4:	2200      	movs	r2, #0
    73e6:	2300      	movs	r3, #0
    73e8:	4c08      	ldr	r4, [pc, #32]	; (740c <blinkRed+0x74>)
    73ea:	47a0      	blx	r4
		count--;
    73ec:	4b03      	ldr	r3, [pc, #12]	; (73fc <blinkRed+0x64>)
    73ee:	681b      	ldr	r3, [r3, #0]
    73f0:	1e5a      	subs	r2, r3, #1
    73f2:	4b02      	ldr	r3, [pc, #8]	; (73fc <blinkRed+0x64>)
    73f4:	601a      	str	r2, [r3, #0]
	}
}
    73f6:	46bd      	mov	sp, r7
    73f8:	bd98      	pop	{r3, r4, r7, pc}
    73fa:	46c0      	nop			; (mov r8, r8)
    73fc:	20000084 	.word	0x20000084
    7400:	2000000c 	.word	0x2000000c
    7404:	20000088 	.word	0x20000088
    7408:	0000ffff 	.word	0x0000ffff
    740c:	0000717d 	.word	0x0000717d

00007410 <colorSolid>:

void colorSolid(uint16_t state){
    7410:	b590      	push	{r4, r7, lr}
    7412:	b083      	sub	sp, #12
    7414:	af00      	add	r7, sp, #0
    7416:	1c02      	adds	r2, r0, #0
    7418:	1dbb      	adds	r3, r7, #6
    741a:	801a      	strh	r2, [r3, #0]


	//See what color the RGB should be
	if(state > 65){ //green
    741c:	1dbb      	adds	r3, r7, #6
    741e:	881b      	ldrh	r3, [r3, #0]
    7420:	2b41      	cmp	r3, #65	; 0x41
    7422:	d907      	bls.n	7434 <colorSolid+0x24>
		setTrackBallRGBW(0x0, 0xFFFF, 0x0000, 0x0000);
    7424:	4b11      	ldr	r3, [pc, #68]	; (746c <colorSolid+0x5c>)
    7426:	2000      	movs	r0, #0
    7428:	1c19      	adds	r1, r3, #0
    742a:	2200      	movs	r2, #0
    742c:	2300      	movs	r3, #0
    742e:	4c10      	ldr	r4, [pc, #64]	; (7470 <colorSolid+0x60>)
    7430:	47a0      	blx	r4
    7432:	e018      	b.n	7466 <colorSolid+0x56>
	}
	else if(state > 25){ //yellow
    7434:	1dbb      	adds	r3, r7, #6
    7436:	881b      	ldrh	r3, [r3, #0]
    7438:	2b19      	cmp	r3, #25
    743a:	d909      	bls.n	7450 <colorSolid+0x40>
		setTrackBallRGBW(0x7000, 0xFFFF, 0x0, 0x1000);
    743c:	23e0      	movs	r3, #224	; 0xe0
    743e:	01da      	lsls	r2, r3, #7
    7440:	490a      	ldr	r1, [pc, #40]	; (746c <colorSolid+0x5c>)
    7442:	2380      	movs	r3, #128	; 0x80
    7444:	015b      	lsls	r3, r3, #5
    7446:	1c10      	adds	r0, r2, #0
    7448:	2200      	movs	r2, #0
    744a:	4c09      	ldr	r4, [pc, #36]	; (7470 <colorSolid+0x60>)
    744c:	47a0      	blx	r4
    744e:	e00a      	b.n	7466 <colorSolid+0x56>
	}
	else if(state > 10){ //red
    7450:	1dbb      	adds	r3, r7, #6
    7452:	881b      	ldrh	r3, [r3, #0]
    7454:	2b0a      	cmp	r3, #10
    7456:	d906      	bls.n	7466 <colorSolid+0x56>
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
    7458:	4b04      	ldr	r3, [pc, #16]	; (746c <colorSolid+0x5c>)
    745a:	1c18      	adds	r0, r3, #0
    745c:	2100      	movs	r1, #0
    745e:	2200      	movs	r2, #0
    7460:	2300      	movs	r3, #0
    7462:	4c03      	ldr	r4, [pc, #12]	; (7470 <colorSolid+0x60>)
    7464:	47a0      	blx	r4
	}
	else{}

    7466:	46bd      	mov	sp, r7
    7468:	b003      	add	sp, #12
    746a:	bd90      	pop	{r4, r7, pc}
    746c:	0000ffff 	.word	0x0000ffff
    7470:	0000717d 	.word	0x0000717d

00007474 <__aeabi_uidiv>:
    7474:	2200      	movs	r2, #0
    7476:	0843      	lsrs	r3, r0, #1
    7478:	428b      	cmp	r3, r1
    747a:	d374      	bcc.n	7566 <__aeabi_uidiv+0xf2>
    747c:	0903      	lsrs	r3, r0, #4
    747e:	428b      	cmp	r3, r1
    7480:	d35f      	bcc.n	7542 <__aeabi_uidiv+0xce>
    7482:	0a03      	lsrs	r3, r0, #8
    7484:	428b      	cmp	r3, r1
    7486:	d344      	bcc.n	7512 <__aeabi_uidiv+0x9e>
    7488:	0b03      	lsrs	r3, r0, #12
    748a:	428b      	cmp	r3, r1
    748c:	d328      	bcc.n	74e0 <__aeabi_uidiv+0x6c>
    748e:	0c03      	lsrs	r3, r0, #16
    7490:	428b      	cmp	r3, r1
    7492:	d30d      	bcc.n	74b0 <__aeabi_uidiv+0x3c>
    7494:	22ff      	movs	r2, #255	; 0xff
    7496:	0209      	lsls	r1, r1, #8
    7498:	ba12      	rev	r2, r2
    749a:	0c03      	lsrs	r3, r0, #16
    749c:	428b      	cmp	r3, r1
    749e:	d302      	bcc.n	74a6 <__aeabi_uidiv+0x32>
    74a0:	1212      	asrs	r2, r2, #8
    74a2:	0209      	lsls	r1, r1, #8
    74a4:	d065      	beq.n	7572 <__aeabi_uidiv+0xfe>
    74a6:	0b03      	lsrs	r3, r0, #12
    74a8:	428b      	cmp	r3, r1
    74aa:	d319      	bcc.n	74e0 <__aeabi_uidiv+0x6c>
    74ac:	e000      	b.n	74b0 <__aeabi_uidiv+0x3c>
    74ae:	0a09      	lsrs	r1, r1, #8
    74b0:	0bc3      	lsrs	r3, r0, #15
    74b2:	428b      	cmp	r3, r1
    74b4:	d301      	bcc.n	74ba <__aeabi_uidiv+0x46>
    74b6:	03cb      	lsls	r3, r1, #15
    74b8:	1ac0      	subs	r0, r0, r3
    74ba:	4152      	adcs	r2, r2
    74bc:	0b83      	lsrs	r3, r0, #14
    74be:	428b      	cmp	r3, r1
    74c0:	d301      	bcc.n	74c6 <__aeabi_uidiv+0x52>
    74c2:	038b      	lsls	r3, r1, #14
    74c4:	1ac0      	subs	r0, r0, r3
    74c6:	4152      	adcs	r2, r2
    74c8:	0b43      	lsrs	r3, r0, #13
    74ca:	428b      	cmp	r3, r1
    74cc:	d301      	bcc.n	74d2 <__aeabi_uidiv+0x5e>
    74ce:	034b      	lsls	r3, r1, #13
    74d0:	1ac0      	subs	r0, r0, r3
    74d2:	4152      	adcs	r2, r2
    74d4:	0b03      	lsrs	r3, r0, #12
    74d6:	428b      	cmp	r3, r1
    74d8:	d301      	bcc.n	74de <__aeabi_uidiv+0x6a>
    74da:	030b      	lsls	r3, r1, #12
    74dc:	1ac0      	subs	r0, r0, r3
    74de:	4152      	adcs	r2, r2
    74e0:	0ac3      	lsrs	r3, r0, #11
    74e2:	428b      	cmp	r3, r1
    74e4:	d301      	bcc.n	74ea <__aeabi_uidiv+0x76>
    74e6:	02cb      	lsls	r3, r1, #11
    74e8:	1ac0      	subs	r0, r0, r3
    74ea:	4152      	adcs	r2, r2
    74ec:	0a83      	lsrs	r3, r0, #10
    74ee:	428b      	cmp	r3, r1
    74f0:	d301      	bcc.n	74f6 <__aeabi_uidiv+0x82>
    74f2:	028b      	lsls	r3, r1, #10
    74f4:	1ac0      	subs	r0, r0, r3
    74f6:	4152      	adcs	r2, r2
    74f8:	0a43      	lsrs	r3, r0, #9
    74fa:	428b      	cmp	r3, r1
    74fc:	d301      	bcc.n	7502 <__aeabi_uidiv+0x8e>
    74fe:	024b      	lsls	r3, r1, #9
    7500:	1ac0      	subs	r0, r0, r3
    7502:	4152      	adcs	r2, r2
    7504:	0a03      	lsrs	r3, r0, #8
    7506:	428b      	cmp	r3, r1
    7508:	d301      	bcc.n	750e <__aeabi_uidiv+0x9a>
    750a:	020b      	lsls	r3, r1, #8
    750c:	1ac0      	subs	r0, r0, r3
    750e:	4152      	adcs	r2, r2
    7510:	d2cd      	bcs.n	74ae <__aeabi_uidiv+0x3a>
    7512:	09c3      	lsrs	r3, r0, #7
    7514:	428b      	cmp	r3, r1
    7516:	d301      	bcc.n	751c <__aeabi_uidiv+0xa8>
    7518:	01cb      	lsls	r3, r1, #7
    751a:	1ac0      	subs	r0, r0, r3
    751c:	4152      	adcs	r2, r2
    751e:	0983      	lsrs	r3, r0, #6
    7520:	428b      	cmp	r3, r1
    7522:	d301      	bcc.n	7528 <__aeabi_uidiv+0xb4>
    7524:	018b      	lsls	r3, r1, #6
    7526:	1ac0      	subs	r0, r0, r3
    7528:	4152      	adcs	r2, r2
    752a:	0943      	lsrs	r3, r0, #5
    752c:	428b      	cmp	r3, r1
    752e:	d301      	bcc.n	7534 <__aeabi_uidiv+0xc0>
    7530:	014b      	lsls	r3, r1, #5
    7532:	1ac0      	subs	r0, r0, r3
    7534:	4152      	adcs	r2, r2
    7536:	0903      	lsrs	r3, r0, #4
    7538:	428b      	cmp	r3, r1
    753a:	d301      	bcc.n	7540 <__aeabi_uidiv+0xcc>
    753c:	010b      	lsls	r3, r1, #4
    753e:	1ac0      	subs	r0, r0, r3
    7540:	4152      	adcs	r2, r2
    7542:	08c3      	lsrs	r3, r0, #3
    7544:	428b      	cmp	r3, r1
    7546:	d301      	bcc.n	754c <__aeabi_uidiv+0xd8>
    7548:	00cb      	lsls	r3, r1, #3
    754a:	1ac0      	subs	r0, r0, r3
    754c:	4152      	adcs	r2, r2
    754e:	0883      	lsrs	r3, r0, #2
    7550:	428b      	cmp	r3, r1
    7552:	d301      	bcc.n	7558 <__aeabi_uidiv+0xe4>
    7554:	008b      	lsls	r3, r1, #2
    7556:	1ac0      	subs	r0, r0, r3
    7558:	4152      	adcs	r2, r2
    755a:	0843      	lsrs	r3, r0, #1
    755c:	428b      	cmp	r3, r1
    755e:	d301      	bcc.n	7564 <__aeabi_uidiv+0xf0>
    7560:	004b      	lsls	r3, r1, #1
    7562:	1ac0      	subs	r0, r0, r3
    7564:	4152      	adcs	r2, r2
    7566:	1a41      	subs	r1, r0, r1
    7568:	d200      	bcs.n	756c <__aeabi_uidiv+0xf8>
    756a:	4601      	mov	r1, r0
    756c:	4152      	adcs	r2, r2
    756e:	4610      	mov	r0, r2
    7570:	4770      	bx	lr
    7572:	e7ff      	b.n	7574 <__aeabi_uidiv+0x100>
    7574:	b501      	push	{r0, lr}
    7576:	2000      	movs	r0, #0
    7578:	f000 f80c 	bl	7594 <__aeabi_idiv0>
    757c:	bd02      	pop	{r1, pc}
    757e:	46c0      	nop			; (mov r8, r8)

00007580 <__aeabi_uidivmod>:
    7580:	2900      	cmp	r1, #0
    7582:	d0f7      	beq.n	7574 <__aeabi_uidiv+0x100>
    7584:	b503      	push	{r0, r1, lr}
    7586:	f7ff ff75 	bl	7474 <__aeabi_uidiv>
    758a:	bc0e      	pop	{r1, r2, r3}
    758c:	4342      	muls	r2, r0
    758e:	1a89      	subs	r1, r1, r2
    7590:	4718      	bx	r3
    7592:	46c0      	nop			; (mov r8, r8)

00007594 <__aeabi_idiv0>:
    7594:	4770      	bx	lr
    7596:	46c0      	nop			; (mov r8, r8)

00007598 <__aeabi_dadd>:
    7598:	b5f0      	push	{r4, r5, r6, r7, lr}
    759a:	4645      	mov	r5, r8
    759c:	4657      	mov	r7, sl
    759e:	464e      	mov	r6, r9
    75a0:	4694      	mov	ip, r2
    75a2:	004c      	lsls	r4, r1, #1
    75a4:	030a      	lsls	r2, r1, #12
    75a6:	0fc9      	lsrs	r1, r1, #31
    75a8:	b4e0      	push	{r5, r6, r7}
    75aa:	4688      	mov	r8, r1
    75ac:	1c0e      	adds	r6, r1, #0
    75ae:	0319      	lsls	r1, r3, #12
    75b0:	0f47      	lsrs	r7, r0, #29
    75b2:	00c5      	lsls	r5, r0, #3
    75b4:	0a48      	lsrs	r0, r1, #9
    75b6:	4661      	mov	r1, ip
    75b8:	0f49      	lsrs	r1, r1, #29
    75ba:	4301      	orrs	r1, r0
    75bc:	4660      	mov	r0, ip
    75be:	0a52      	lsrs	r2, r2, #9
    75c0:	4317      	orrs	r7, r2
    75c2:	00c0      	lsls	r0, r0, #3
    75c4:	005a      	lsls	r2, r3, #1
    75c6:	0d64      	lsrs	r4, r4, #21
    75c8:	0d52      	lsrs	r2, r2, #21
    75ca:	0fdb      	lsrs	r3, r3, #31
    75cc:	4684      	mov	ip, r0
    75ce:	4598      	cmp	r8, r3
    75d0:	d100      	bne.n	75d4 <__aeabi_dadd+0x3c>
    75d2:	e0a7      	b.n	7724 <__aeabi_dadd+0x18c>
    75d4:	1aa0      	subs	r0, r4, r2
    75d6:	2800      	cmp	r0, #0
    75d8:	dc00      	bgt.n	75dc <__aeabi_dadd+0x44>
    75da:	e101      	b.n	77e0 <__aeabi_dadd+0x248>
    75dc:	2a00      	cmp	r2, #0
    75de:	d13d      	bne.n	765c <__aeabi_dadd+0xc4>
    75e0:	4663      	mov	r3, ip
    75e2:	430b      	orrs	r3, r1
    75e4:	d000      	beq.n	75e8 <__aeabi_dadd+0x50>
    75e6:	e0d4      	b.n	7792 <__aeabi_dadd+0x1fa>
    75e8:	076b      	lsls	r3, r5, #29
    75ea:	d100      	bne.n	75ee <__aeabi_dadd+0x56>
    75ec:	e088      	b.n	7700 <__aeabi_dadd+0x168>
    75ee:	230f      	movs	r3, #15
    75f0:	402b      	ands	r3, r5
    75f2:	2b04      	cmp	r3, #4
    75f4:	d100      	bne.n	75f8 <__aeabi_dadd+0x60>
    75f6:	e083      	b.n	7700 <__aeabi_dadd+0x168>
    75f8:	1d2a      	adds	r2, r5, #4
    75fa:	42aa      	cmp	r2, r5
    75fc:	41ad      	sbcs	r5, r5
    75fe:	2380      	movs	r3, #128	; 0x80
    7600:	426d      	negs	r5, r5
    7602:	197f      	adds	r7, r7, r5
    7604:	041b      	lsls	r3, r3, #16
    7606:	403b      	ands	r3, r7
    7608:	4646      	mov	r6, r8
    760a:	1c15      	adds	r5, r2, #0
    760c:	2b00      	cmp	r3, #0
    760e:	d100      	bne.n	7612 <__aeabi_dadd+0x7a>
    7610:	e07c      	b.n	770c <__aeabi_dadd+0x174>
    7612:	4bcc      	ldr	r3, [pc, #816]	; (7944 <__aeabi_dadd+0x3ac>)
    7614:	3401      	adds	r4, #1
    7616:	429c      	cmp	r4, r3
    7618:	d100      	bne.n	761c <__aeabi_dadd+0x84>
    761a:	e0fd      	b.n	7818 <__aeabi_dadd+0x280>
    761c:	1c3a      	adds	r2, r7, #0
    761e:	4bca      	ldr	r3, [pc, #808]	; (7948 <__aeabi_dadd+0x3b0>)
    7620:	08ed      	lsrs	r5, r5, #3
    7622:	401a      	ands	r2, r3
    7624:	0750      	lsls	r0, r2, #29
    7626:	0564      	lsls	r4, r4, #21
    7628:	0252      	lsls	r2, r2, #9
    762a:	4305      	orrs	r5, r0
    762c:	0b12      	lsrs	r2, r2, #12
    762e:	0d64      	lsrs	r4, r4, #21
    7630:	2100      	movs	r1, #0
    7632:	0312      	lsls	r2, r2, #12
    7634:	0d0b      	lsrs	r3, r1, #20
    7636:	051b      	lsls	r3, r3, #20
    7638:	0564      	lsls	r4, r4, #21
    763a:	0b12      	lsrs	r2, r2, #12
    763c:	431a      	orrs	r2, r3
    763e:	0863      	lsrs	r3, r4, #1
    7640:	4cc2      	ldr	r4, [pc, #776]	; (794c <__aeabi_dadd+0x3b4>)
    7642:	07f6      	lsls	r6, r6, #31
    7644:	4014      	ands	r4, r2
    7646:	431c      	orrs	r4, r3
    7648:	0064      	lsls	r4, r4, #1
    764a:	0864      	lsrs	r4, r4, #1
    764c:	4334      	orrs	r4, r6
    764e:	1c28      	adds	r0, r5, #0
    7650:	1c21      	adds	r1, r4, #0
    7652:	bc1c      	pop	{r2, r3, r4}
    7654:	4690      	mov	r8, r2
    7656:	4699      	mov	r9, r3
    7658:	46a2      	mov	sl, r4
    765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    765c:	4bb9      	ldr	r3, [pc, #740]	; (7944 <__aeabi_dadd+0x3ac>)
    765e:	429c      	cmp	r4, r3
    7660:	d0c2      	beq.n	75e8 <__aeabi_dadd+0x50>
    7662:	2380      	movs	r3, #128	; 0x80
    7664:	041b      	lsls	r3, r3, #16
    7666:	4319      	orrs	r1, r3
    7668:	2838      	cmp	r0, #56	; 0x38
    766a:	dd00      	ble.n	766e <__aeabi_dadd+0xd6>
    766c:	e0ec      	b.n	7848 <__aeabi_dadd+0x2b0>
    766e:	281f      	cmp	r0, #31
    7670:	dd00      	ble.n	7674 <__aeabi_dadd+0xdc>
    7672:	e121      	b.n	78b8 <__aeabi_dadd+0x320>
    7674:	2220      	movs	r2, #32
    7676:	1c0e      	adds	r6, r1, #0
    7678:	4663      	mov	r3, ip
    767a:	1a12      	subs	r2, r2, r0
    767c:	4096      	lsls	r6, r2
    767e:	40c3      	lsrs	r3, r0
    7680:	4333      	orrs	r3, r6
    7682:	4666      	mov	r6, ip
    7684:	4096      	lsls	r6, r2
    7686:	1c32      	adds	r2, r6, #0
    7688:	1e56      	subs	r6, r2, #1
    768a:	41b2      	sbcs	r2, r6
    768c:	4313      	orrs	r3, r2
    768e:	1c0a      	adds	r2, r1, #0
    7690:	40c2      	lsrs	r2, r0
    7692:	1aeb      	subs	r3, r5, r3
    7694:	429d      	cmp	r5, r3
    7696:	41b6      	sbcs	r6, r6
    7698:	1c1d      	adds	r5, r3, #0
    769a:	1aba      	subs	r2, r7, r2
    769c:	4276      	negs	r6, r6
    769e:	1b97      	subs	r7, r2, r6
    76a0:	023b      	lsls	r3, r7, #8
    76a2:	d400      	bmi.n	76a6 <__aeabi_dadd+0x10e>
    76a4:	e097      	b.n	77d6 <__aeabi_dadd+0x23e>
    76a6:	027a      	lsls	r2, r7, #9
    76a8:	0a56      	lsrs	r6, r2, #9
    76aa:	2e00      	cmp	r6, #0
    76ac:	d100      	bne.n	76b0 <__aeabi_dadd+0x118>
    76ae:	e0b6      	b.n	781e <__aeabi_dadd+0x286>
    76b0:	1c30      	adds	r0, r6, #0
    76b2:	f001 fc39 	bl	8f28 <__clzsi2>
    76b6:	1c03      	adds	r3, r0, #0
    76b8:	3b08      	subs	r3, #8
    76ba:	2b1f      	cmp	r3, #31
    76bc:	dd00      	ble.n	76c0 <__aeabi_dadd+0x128>
    76be:	e0b7      	b.n	7830 <__aeabi_dadd+0x298>
    76c0:	409e      	lsls	r6, r3
    76c2:	1c37      	adds	r7, r6, #0
    76c4:	2628      	movs	r6, #40	; 0x28
    76c6:	1c2a      	adds	r2, r5, #0
    76c8:	1a36      	subs	r6, r6, r0
    76ca:	40f2      	lsrs	r2, r6
    76cc:	1c16      	adds	r6, r2, #0
    76ce:	409d      	lsls	r5, r3
    76d0:	433e      	orrs	r6, r7
    76d2:	429c      	cmp	r4, r3
    76d4:	dd00      	ble.n	76d8 <__aeabi_dadd+0x140>
    76d6:	e0b2      	b.n	783e <__aeabi_dadd+0x2a6>
    76d8:	1b1c      	subs	r4, r3, r4
    76da:	1c62      	adds	r2, r4, #1
    76dc:	2a1f      	cmp	r2, #31
    76de:	dd00      	ble.n	76e2 <__aeabi_dadd+0x14a>
    76e0:	e0d8      	b.n	7894 <__aeabi_dadd+0x2fc>
    76e2:	231f      	movs	r3, #31
    76e4:	1c29      	adds	r1, r5, #0
    76e6:	1b1c      	subs	r4, r3, r4
    76e8:	1c33      	adds	r3, r6, #0
    76ea:	40a5      	lsls	r5, r4
    76ec:	40a3      	lsls	r3, r4
    76ee:	40d1      	lsrs	r1, r2
    76f0:	1e6c      	subs	r4, r5, #1
    76f2:	41a5      	sbcs	r5, r4
    76f4:	40d6      	lsrs	r6, r2
    76f6:	4319      	orrs	r1, r3
    76f8:	430d      	orrs	r5, r1
    76fa:	1c37      	adds	r7, r6, #0
    76fc:	2400      	movs	r4, #0
    76fe:	e773      	b.n	75e8 <__aeabi_dadd+0x50>
    7700:	2380      	movs	r3, #128	; 0x80
    7702:	041b      	lsls	r3, r3, #16
    7704:	403b      	ands	r3, r7
    7706:	4646      	mov	r6, r8
    7708:	d000      	beq.n	770c <__aeabi_dadd+0x174>
    770a:	e782      	b.n	7612 <__aeabi_dadd+0x7a>
    770c:	4b8d      	ldr	r3, [pc, #564]	; (7944 <__aeabi_dadd+0x3ac>)
    770e:	08ed      	lsrs	r5, r5, #3
    7710:	0778      	lsls	r0, r7, #29
    7712:	4305      	orrs	r5, r0
    7714:	08fa      	lsrs	r2, r7, #3
    7716:	429c      	cmp	r4, r3
    7718:	d032      	beq.n	7780 <__aeabi_dadd+0x1e8>
    771a:	0312      	lsls	r2, r2, #12
    771c:	0564      	lsls	r4, r4, #21
    771e:	0b12      	lsrs	r2, r2, #12
    7720:	0d64      	lsrs	r4, r4, #21
    7722:	e785      	b.n	7630 <__aeabi_dadd+0x98>
    7724:	1aa3      	subs	r3, r4, r2
    7726:	2b00      	cmp	r3, #0
    7728:	dc00      	bgt.n	772c <__aeabi_dadd+0x194>
    772a:	e094      	b.n	7856 <__aeabi_dadd+0x2be>
    772c:	2a00      	cmp	r2, #0
    772e:	d03c      	beq.n	77aa <__aeabi_dadd+0x212>
    7730:	4a84      	ldr	r2, [pc, #528]	; (7944 <__aeabi_dadd+0x3ac>)
    7732:	4294      	cmp	r4, r2
    7734:	d100      	bne.n	7738 <__aeabi_dadd+0x1a0>
    7736:	e757      	b.n	75e8 <__aeabi_dadd+0x50>
    7738:	2280      	movs	r2, #128	; 0x80
    773a:	0412      	lsls	r2, r2, #16
    773c:	4311      	orrs	r1, r2
    773e:	2b38      	cmp	r3, #56	; 0x38
    7740:	dc00      	bgt.n	7744 <__aeabi_dadd+0x1ac>
    7742:	e105      	b.n	7950 <__aeabi_dadd+0x3b8>
    7744:	4663      	mov	r3, ip
    7746:	4319      	orrs	r1, r3
    7748:	1e48      	subs	r0, r1, #1
    774a:	4181      	sbcs	r1, r0
    774c:	2200      	movs	r2, #0
    774e:	b2c8      	uxtb	r0, r1
    7750:	1940      	adds	r0, r0, r5
    7752:	42a8      	cmp	r0, r5
    7754:	419b      	sbcs	r3, r3
    7756:	1c05      	adds	r5, r0, #0
    7758:	19d2      	adds	r2, r2, r7
    775a:	425b      	negs	r3, r3
    775c:	18d7      	adds	r7, r2, r3
    775e:	023b      	lsls	r3, r7, #8
    7760:	d539      	bpl.n	77d6 <__aeabi_dadd+0x23e>
    7762:	4b78      	ldr	r3, [pc, #480]	; (7944 <__aeabi_dadd+0x3ac>)
    7764:	3401      	adds	r4, #1
    7766:	429c      	cmp	r4, r3
    7768:	d100      	bne.n	776c <__aeabi_dadd+0x1d4>
    776a:	e14c      	b.n	7a06 <__aeabi_dadd+0x46e>
    776c:	2001      	movs	r0, #1
    776e:	4a76      	ldr	r2, [pc, #472]	; (7948 <__aeabi_dadd+0x3b0>)
    7770:	086b      	lsrs	r3, r5, #1
    7772:	403a      	ands	r2, r7
    7774:	4028      	ands	r0, r5
    7776:	4318      	orrs	r0, r3
    7778:	07d5      	lsls	r5, r2, #31
    777a:	4305      	orrs	r5, r0
    777c:	0857      	lsrs	r7, r2, #1
    777e:	e733      	b.n	75e8 <__aeabi_dadd+0x50>
    7780:	1c2b      	adds	r3, r5, #0
    7782:	4313      	orrs	r3, r2
    7784:	d048      	beq.n	7818 <__aeabi_dadd+0x280>
    7786:	2380      	movs	r3, #128	; 0x80
    7788:	031b      	lsls	r3, r3, #12
    778a:	431a      	orrs	r2, r3
    778c:	0312      	lsls	r2, r2, #12
    778e:	0b12      	lsrs	r2, r2, #12
    7790:	e74e      	b.n	7630 <__aeabi_dadd+0x98>
    7792:	3801      	subs	r0, #1
    7794:	2800      	cmp	r0, #0
    7796:	d178      	bne.n	788a <__aeabi_dadd+0x2f2>
    7798:	4663      	mov	r3, ip
    779a:	1aee      	subs	r6, r5, r3
    779c:	42b5      	cmp	r5, r6
    779e:	419b      	sbcs	r3, r3
    77a0:	1a7a      	subs	r2, r7, r1
    77a2:	425b      	negs	r3, r3
    77a4:	1ad7      	subs	r7, r2, r3
    77a6:	1c35      	adds	r5, r6, #0
    77a8:	e77a      	b.n	76a0 <__aeabi_dadd+0x108>
    77aa:	1c02      	adds	r2, r0, #0
    77ac:	430a      	orrs	r2, r1
    77ae:	d100      	bne.n	77b2 <__aeabi_dadd+0x21a>
    77b0:	e71a      	b.n	75e8 <__aeabi_dadd+0x50>
    77b2:	3b01      	subs	r3, #1
    77b4:	2b00      	cmp	r3, #0
    77b6:	d000      	beq.n	77ba <__aeabi_dadd+0x222>
    77b8:	e0f2      	b.n	79a0 <__aeabi_dadd+0x408>
    77ba:	1940      	adds	r0, r0, r5
    77bc:	42a8      	cmp	r0, r5
    77be:	419b      	sbcs	r3, r3
    77c0:	19ca      	adds	r2, r1, r7
    77c2:	425b      	negs	r3, r3
    77c4:	18d7      	adds	r7, r2, r3
    77c6:	1c05      	adds	r5, r0, #0
    77c8:	e7c9      	b.n	775e <__aeabi_dadd+0x1c6>
    77ca:	1c13      	adds	r3, r2, #0
    77cc:	4333      	orrs	r3, r6
    77ce:	d100      	bne.n	77d2 <__aeabi_dadd+0x23a>
    77d0:	e118      	b.n	7a04 <__aeabi_dadd+0x46c>
    77d2:	1c17      	adds	r7, r2, #0
    77d4:	1c35      	adds	r5, r6, #0
    77d6:	4646      	mov	r6, r8
    77d8:	076b      	lsls	r3, r5, #29
    77da:	d000      	beq.n	77de <__aeabi_dadd+0x246>
    77dc:	e707      	b.n	75ee <__aeabi_dadd+0x56>
    77de:	e795      	b.n	770c <__aeabi_dadd+0x174>
    77e0:	2800      	cmp	r0, #0
    77e2:	d17a      	bne.n	78da <__aeabi_dadd+0x342>
    77e4:	1c62      	adds	r2, r4, #1
    77e6:	0552      	lsls	r2, r2, #21
    77e8:	0d52      	lsrs	r2, r2, #21
    77ea:	2a01      	cmp	r2, #1
    77ec:	dc00      	bgt.n	77f0 <__aeabi_dadd+0x258>
    77ee:	e0fb      	b.n	79e8 <__aeabi_dadd+0x450>
    77f0:	4662      	mov	r2, ip
    77f2:	1aaa      	subs	r2, r5, r2
    77f4:	4295      	cmp	r5, r2
    77f6:	41b6      	sbcs	r6, r6
    77f8:	4691      	mov	r9, r2
    77fa:	1a78      	subs	r0, r7, r1
    77fc:	4272      	negs	r2, r6
    77fe:	1a86      	subs	r6, r0, r2
    7800:	0232      	lsls	r2, r6, #8
    7802:	d400      	bmi.n	7806 <__aeabi_dadd+0x26e>
    7804:	e093      	b.n	792e <__aeabi_dadd+0x396>
    7806:	4662      	mov	r2, ip
    7808:	1b55      	subs	r5, r2, r5
    780a:	45ac      	cmp	ip, r5
    780c:	4180      	sbcs	r0, r0
    780e:	1bcf      	subs	r7, r1, r7
    7810:	4240      	negs	r0, r0
    7812:	1a3e      	subs	r6, r7, r0
    7814:	4698      	mov	r8, r3
    7816:	e748      	b.n	76aa <__aeabi_dadd+0x112>
    7818:	2200      	movs	r2, #0
    781a:	2500      	movs	r5, #0
    781c:	e708      	b.n	7630 <__aeabi_dadd+0x98>
    781e:	1c28      	adds	r0, r5, #0
    7820:	f001 fb82 	bl	8f28 <__clzsi2>
    7824:	3020      	adds	r0, #32
    7826:	1c03      	adds	r3, r0, #0
    7828:	3b08      	subs	r3, #8
    782a:	2b1f      	cmp	r3, #31
    782c:	dc00      	bgt.n	7830 <__aeabi_dadd+0x298>
    782e:	e747      	b.n	76c0 <__aeabi_dadd+0x128>
    7830:	3828      	subs	r0, #40	; 0x28
    7832:	4085      	lsls	r5, r0
    7834:	1c2e      	adds	r6, r5, #0
    7836:	2500      	movs	r5, #0
    7838:	429c      	cmp	r4, r3
    783a:	dc00      	bgt.n	783e <__aeabi_dadd+0x2a6>
    783c:	e74c      	b.n	76d8 <__aeabi_dadd+0x140>
    783e:	4a42      	ldr	r2, [pc, #264]	; (7948 <__aeabi_dadd+0x3b0>)
    7840:	1ae4      	subs	r4, r4, r3
    7842:	4016      	ands	r6, r2
    7844:	1c37      	adds	r7, r6, #0
    7846:	e6cf      	b.n	75e8 <__aeabi_dadd+0x50>
    7848:	4663      	mov	r3, ip
    784a:	4319      	orrs	r1, r3
    784c:	1e4b      	subs	r3, r1, #1
    784e:	4199      	sbcs	r1, r3
    7850:	2200      	movs	r2, #0
    7852:	b2cb      	uxtb	r3, r1
    7854:	e71d      	b.n	7692 <__aeabi_dadd+0xfa>
    7856:	2b00      	cmp	r3, #0
    7858:	d000      	beq.n	785c <__aeabi_dadd+0x2c4>
    785a:	e0f2      	b.n	7a42 <__aeabi_dadd+0x4aa>
    785c:	1c60      	adds	r0, r4, #1
    785e:	0543      	lsls	r3, r0, #21
    7860:	0d5b      	lsrs	r3, r3, #21
    7862:	2b01      	cmp	r3, #1
    7864:	dc00      	bgt.n	7868 <__aeabi_dadd+0x2d0>
    7866:	e0a4      	b.n	79b2 <__aeabi_dadd+0x41a>
    7868:	4b36      	ldr	r3, [pc, #216]	; (7944 <__aeabi_dadd+0x3ac>)
    786a:	4298      	cmp	r0, r3
    786c:	d100      	bne.n	7870 <__aeabi_dadd+0x2d8>
    786e:	e121      	b.n	7ab4 <__aeabi_dadd+0x51c>
    7870:	4663      	mov	r3, ip
    7872:	195c      	adds	r4, r3, r5
    7874:	42ac      	cmp	r4, r5
    7876:	419b      	sbcs	r3, r3
    7878:	19cf      	adds	r7, r1, r7
    787a:	425b      	negs	r3, r3
    787c:	18fa      	adds	r2, r7, r3
    787e:	0864      	lsrs	r4, r4, #1
    7880:	07d5      	lsls	r5, r2, #31
    7882:	4325      	orrs	r5, r4
    7884:	0857      	lsrs	r7, r2, #1
    7886:	1c04      	adds	r4, r0, #0
    7888:	e6ae      	b.n	75e8 <__aeabi_dadd+0x50>
    788a:	4b2e      	ldr	r3, [pc, #184]	; (7944 <__aeabi_dadd+0x3ac>)
    788c:	429c      	cmp	r4, r3
    788e:	d000      	beq.n	7892 <__aeabi_dadd+0x2fa>
    7890:	e6ea      	b.n	7668 <__aeabi_dadd+0xd0>
    7892:	e6a9      	b.n	75e8 <__aeabi_dadd+0x50>
    7894:	1c21      	adds	r1, r4, #0
    7896:	1c33      	adds	r3, r6, #0
    7898:	391f      	subs	r1, #31
    789a:	40cb      	lsrs	r3, r1
    789c:	1c19      	adds	r1, r3, #0
    789e:	2a20      	cmp	r2, #32
    78a0:	d100      	bne.n	78a4 <__aeabi_dadd+0x30c>
    78a2:	e082      	b.n	79aa <__aeabi_dadd+0x412>
    78a4:	233f      	movs	r3, #63	; 0x3f
    78a6:	1b1c      	subs	r4, r3, r4
    78a8:	40a6      	lsls	r6, r4
    78aa:	4335      	orrs	r5, r6
    78ac:	1e6e      	subs	r6, r5, #1
    78ae:	41b5      	sbcs	r5, r6
    78b0:	2700      	movs	r7, #0
    78b2:	430d      	orrs	r5, r1
    78b4:	2400      	movs	r4, #0
    78b6:	e78e      	b.n	77d6 <__aeabi_dadd+0x23e>
    78b8:	1c03      	adds	r3, r0, #0
    78ba:	1c0e      	adds	r6, r1, #0
    78bc:	3b20      	subs	r3, #32
    78be:	40de      	lsrs	r6, r3
    78c0:	2820      	cmp	r0, #32
    78c2:	d074      	beq.n	79ae <__aeabi_dadd+0x416>
    78c4:	2340      	movs	r3, #64	; 0x40
    78c6:	1a1b      	subs	r3, r3, r0
    78c8:	4099      	lsls	r1, r3
    78ca:	1c0b      	adds	r3, r1, #0
    78cc:	4662      	mov	r2, ip
    78ce:	4313      	orrs	r3, r2
    78d0:	1e59      	subs	r1, r3, #1
    78d2:	418b      	sbcs	r3, r1
    78d4:	2200      	movs	r2, #0
    78d6:	4333      	orrs	r3, r6
    78d8:	e6db      	b.n	7692 <__aeabi_dadd+0xfa>
    78da:	2c00      	cmp	r4, #0
    78dc:	d050      	beq.n	7980 <__aeabi_dadd+0x3e8>
    78de:	4c19      	ldr	r4, [pc, #100]	; (7944 <__aeabi_dadd+0x3ac>)
    78e0:	42a2      	cmp	r2, r4
    78e2:	d100      	bne.n	78e6 <__aeabi_dadd+0x34e>
    78e4:	e0a8      	b.n	7a38 <__aeabi_dadd+0x4a0>
    78e6:	2480      	movs	r4, #128	; 0x80
    78e8:	0424      	lsls	r4, r4, #16
    78ea:	4240      	negs	r0, r0
    78ec:	4327      	orrs	r7, r4
    78ee:	2838      	cmp	r0, #56	; 0x38
    78f0:	dd00      	ble.n	78f4 <__aeabi_dadd+0x35c>
    78f2:	e0d9      	b.n	7aa8 <__aeabi_dadd+0x510>
    78f4:	281f      	cmp	r0, #31
    78f6:	dd00      	ble.n	78fa <__aeabi_dadd+0x362>
    78f8:	e139      	b.n	7b6e <__aeabi_dadd+0x5d6>
    78fa:	2420      	movs	r4, #32
    78fc:	1c3e      	adds	r6, r7, #0
    78fe:	1a24      	subs	r4, r4, r0
    7900:	40a6      	lsls	r6, r4
    7902:	46b0      	mov	r8, r6
    7904:	1c2e      	adds	r6, r5, #0
    7906:	46a1      	mov	r9, r4
    7908:	40c6      	lsrs	r6, r0
    790a:	4644      	mov	r4, r8
    790c:	4326      	orrs	r6, r4
    790e:	464c      	mov	r4, r9
    7910:	40a5      	lsls	r5, r4
    7912:	1e6c      	subs	r4, r5, #1
    7914:	41a5      	sbcs	r5, r4
    7916:	40c7      	lsrs	r7, r0
    7918:	4335      	orrs	r5, r6
    791a:	4660      	mov	r0, ip
    791c:	1b45      	subs	r5, r0, r5
    791e:	1bcf      	subs	r7, r1, r7
    7920:	45ac      	cmp	ip, r5
    7922:	4189      	sbcs	r1, r1
    7924:	4249      	negs	r1, r1
    7926:	1a7f      	subs	r7, r7, r1
    7928:	1c14      	adds	r4, r2, #0
    792a:	4698      	mov	r8, r3
    792c:	e6b8      	b.n	76a0 <__aeabi_dadd+0x108>
    792e:	464b      	mov	r3, r9
    7930:	464d      	mov	r5, r9
    7932:	4333      	orrs	r3, r6
    7934:	d000      	beq.n	7938 <__aeabi_dadd+0x3a0>
    7936:	e6b8      	b.n	76aa <__aeabi_dadd+0x112>
    7938:	2600      	movs	r6, #0
    793a:	2700      	movs	r7, #0
    793c:	2400      	movs	r4, #0
    793e:	2500      	movs	r5, #0
    7940:	e6e4      	b.n	770c <__aeabi_dadd+0x174>
    7942:	46c0      	nop			; (mov r8, r8)
    7944:	000007ff 	.word	0x000007ff
    7948:	ff7fffff 	.word	0xff7fffff
    794c:	800fffff 	.word	0x800fffff
    7950:	2b1f      	cmp	r3, #31
    7952:	dc5b      	bgt.n	7a0c <__aeabi_dadd+0x474>
    7954:	2220      	movs	r2, #32
    7956:	1c08      	adds	r0, r1, #0
    7958:	1ad2      	subs	r2, r2, r3
    795a:	4090      	lsls	r0, r2
    795c:	4681      	mov	r9, r0
    795e:	4660      	mov	r0, ip
    7960:	4692      	mov	sl, r2
    7962:	40d8      	lsrs	r0, r3
    7964:	464a      	mov	r2, r9
    7966:	4310      	orrs	r0, r2
    7968:	4681      	mov	r9, r0
    796a:	4652      	mov	r2, sl
    796c:	4660      	mov	r0, ip
    796e:	4090      	lsls	r0, r2
    7970:	1c02      	adds	r2, r0, #0
    7972:	1e50      	subs	r0, r2, #1
    7974:	4182      	sbcs	r2, r0
    7976:	4648      	mov	r0, r9
    7978:	4310      	orrs	r0, r2
    797a:	1c0a      	adds	r2, r1, #0
    797c:	40da      	lsrs	r2, r3
    797e:	e6e7      	b.n	7750 <__aeabi_dadd+0x1b8>
    7980:	1c3c      	adds	r4, r7, #0
    7982:	432c      	orrs	r4, r5
    7984:	d058      	beq.n	7a38 <__aeabi_dadd+0x4a0>
    7986:	43c0      	mvns	r0, r0
    7988:	2800      	cmp	r0, #0
    798a:	d151      	bne.n	7a30 <__aeabi_dadd+0x498>
    798c:	4660      	mov	r0, ip
    798e:	1b45      	subs	r5, r0, r5
    7990:	45ac      	cmp	ip, r5
    7992:	4180      	sbcs	r0, r0
    7994:	1bcf      	subs	r7, r1, r7
    7996:	4240      	negs	r0, r0
    7998:	1a3f      	subs	r7, r7, r0
    799a:	1c14      	adds	r4, r2, #0
    799c:	4698      	mov	r8, r3
    799e:	e67f      	b.n	76a0 <__aeabi_dadd+0x108>
    79a0:	4a8f      	ldr	r2, [pc, #572]	; (7be0 <__aeabi_dadd+0x648>)
    79a2:	4294      	cmp	r4, r2
    79a4:	d000      	beq.n	79a8 <__aeabi_dadd+0x410>
    79a6:	e6ca      	b.n	773e <__aeabi_dadd+0x1a6>
    79a8:	e61e      	b.n	75e8 <__aeabi_dadd+0x50>
    79aa:	2600      	movs	r6, #0
    79ac:	e77d      	b.n	78aa <__aeabi_dadd+0x312>
    79ae:	2300      	movs	r3, #0
    79b0:	e78c      	b.n	78cc <__aeabi_dadd+0x334>
    79b2:	1c3b      	adds	r3, r7, #0
    79b4:	432b      	orrs	r3, r5
    79b6:	2c00      	cmp	r4, #0
    79b8:	d000      	beq.n	79bc <__aeabi_dadd+0x424>
    79ba:	e0bd      	b.n	7b38 <__aeabi_dadd+0x5a0>
    79bc:	2b00      	cmp	r3, #0
    79be:	d100      	bne.n	79c2 <__aeabi_dadd+0x42a>
    79c0:	e0f5      	b.n	7bae <__aeabi_dadd+0x616>
    79c2:	4663      	mov	r3, ip
    79c4:	430b      	orrs	r3, r1
    79c6:	d100      	bne.n	79ca <__aeabi_dadd+0x432>
    79c8:	e60e      	b.n	75e8 <__aeabi_dadd+0x50>
    79ca:	4663      	mov	r3, ip
    79cc:	195b      	adds	r3, r3, r5
    79ce:	42ab      	cmp	r3, r5
    79d0:	4180      	sbcs	r0, r0
    79d2:	19ca      	adds	r2, r1, r7
    79d4:	4240      	negs	r0, r0
    79d6:	1817      	adds	r7, r2, r0
    79d8:	023a      	lsls	r2, r7, #8
    79da:	d400      	bmi.n	79de <__aeabi_dadd+0x446>
    79dc:	e0fc      	b.n	7bd8 <__aeabi_dadd+0x640>
    79de:	4a81      	ldr	r2, [pc, #516]	; (7be4 <__aeabi_dadd+0x64c>)
    79e0:	1c1d      	adds	r5, r3, #0
    79e2:	4017      	ands	r7, r2
    79e4:	3401      	adds	r4, #1
    79e6:	e5ff      	b.n	75e8 <__aeabi_dadd+0x50>
    79e8:	1c3a      	adds	r2, r7, #0
    79ea:	432a      	orrs	r2, r5
    79ec:	2c00      	cmp	r4, #0
    79ee:	d151      	bne.n	7a94 <__aeabi_dadd+0x4fc>
    79f0:	2a00      	cmp	r2, #0
    79f2:	d000      	beq.n	79f6 <__aeabi_dadd+0x45e>
    79f4:	e085      	b.n	7b02 <__aeabi_dadd+0x56a>
    79f6:	4662      	mov	r2, ip
    79f8:	430a      	orrs	r2, r1
    79fa:	d003      	beq.n	7a04 <__aeabi_dadd+0x46c>
    79fc:	1c0f      	adds	r7, r1, #0
    79fe:	4665      	mov	r5, ip
    7a00:	4698      	mov	r8, r3
    7a02:	e5f1      	b.n	75e8 <__aeabi_dadd+0x50>
    7a04:	2600      	movs	r6, #0
    7a06:	2700      	movs	r7, #0
    7a08:	2500      	movs	r5, #0
    7a0a:	e67f      	b.n	770c <__aeabi_dadd+0x174>
    7a0c:	1c18      	adds	r0, r3, #0
    7a0e:	1c0a      	adds	r2, r1, #0
    7a10:	3820      	subs	r0, #32
    7a12:	40c2      	lsrs	r2, r0
    7a14:	2b20      	cmp	r3, #32
    7a16:	d100      	bne.n	7a1a <__aeabi_dadd+0x482>
    7a18:	e0a7      	b.n	7b6a <__aeabi_dadd+0x5d2>
    7a1a:	2040      	movs	r0, #64	; 0x40
    7a1c:	1ac0      	subs	r0, r0, r3
    7a1e:	4081      	lsls	r1, r0
    7a20:	1c08      	adds	r0, r1, #0
    7a22:	4663      	mov	r3, ip
    7a24:	4318      	orrs	r0, r3
    7a26:	1e41      	subs	r1, r0, #1
    7a28:	4188      	sbcs	r0, r1
    7a2a:	4310      	orrs	r0, r2
    7a2c:	2200      	movs	r2, #0
    7a2e:	e68f      	b.n	7750 <__aeabi_dadd+0x1b8>
    7a30:	4c6b      	ldr	r4, [pc, #428]	; (7be0 <__aeabi_dadd+0x648>)
    7a32:	42a2      	cmp	r2, r4
    7a34:	d000      	beq.n	7a38 <__aeabi_dadd+0x4a0>
    7a36:	e75a      	b.n	78ee <__aeabi_dadd+0x356>
    7a38:	1c0f      	adds	r7, r1, #0
    7a3a:	4665      	mov	r5, ip
    7a3c:	1c14      	adds	r4, r2, #0
    7a3e:	4698      	mov	r8, r3
    7a40:	e5d2      	b.n	75e8 <__aeabi_dadd+0x50>
    7a42:	2c00      	cmp	r4, #0
    7a44:	d13a      	bne.n	7abc <__aeabi_dadd+0x524>
    7a46:	1c38      	adds	r0, r7, #0
    7a48:	4328      	orrs	r0, r5
    7a4a:	d071      	beq.n	7b30 <__aeabi_dadd+0x598>
    7a4c:	43db      	mvns	r3, r3
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d018      	beq.n	7a84 <__aeabi_dadd+0x4ec>
    7a52:	4863      	ldr	r0, [pc, #396]	; (7be0 <__aeabi_dadd+0x648>)
    7a54:	4282      	cmp	r2, r0
    7a56:	d06b      	beq.n	7b30 <__aeabi_dadd+0x598>
    7a58:	2b38      	cmp	r3, #56	; 0x38
    7a5a:	dd00      	ble.n	7a5e <__aeabi_dadd+0x4c6>
    7a5c:	e09d      	b.n	7b9a <__aeabi_dadd+0x602>
    7a5e:	2b1f      	cmp	r3, #31
    7a60:	dd00      	ble.n	7a64 <__aeabi_dadd+0x4cc>
    7a62:	e0a7      	b.n	7bb4 <__aeabi_dadd+0x61c>
    7a64:	2020      	movs	r0, #32
    7a66:	1c3c      	adds	r4, r7, #0
    7a68:	1ac0      	subs	r0, r0, r3
    7a6a:	4084      	lsls	r4, r0
    7a6c:	46a1      	mov	r9, r4
    7a6e:	1c2c      	adds	r4, r5, #0
    7a70:	4682      	mov	sl, r0
    7a72:	40dc      	lsrs	r4, r3
    7a74:	4648      	mov	r0, r9
    7a76:	4304      	orrs	r4, r0
    7a78:	4650      	mov	r0, sl
    7a7a:	4085      	lsls	r5, r0
    7a7c:	1e68      	subs	r0, r5, #1
    7a7e:	4185      	sbcs	r5, r0
    7a80:	40df      	lsrs	r7, r3
    7a82:	4325      	orrs	r5, r4
    7a84:	4465      	add	r5, ip
    7a86:	4565      	cmp	r5, ip
    7a88:	419b      	sbcs	r3, r3
    7a8a:	187f      	adds	r7, r7, r1
    7a8c:	425b      	negs	r3, r3
    7a8e:	18ff      	adds	r7, r7, r3
    7a90:	1c14      	adds	r4, r2, #0
    7a92:	e664      	b.n	775e <__aeabi_dadd+0x1c6>
    7a94:	2a00      	cmp	r2, #0
    7a96:	d119      	bne.n	7acc <__aeabi_dadd+0x534>
    7a98:	4662      	mov	r2, ip
    7a9a:	430a      	orrs	r2, r1
    7a9c:	d077      	beq.n	7b8e <__aeabi_dadd+0x5f6>
    7a9e:	1c0f      	adds	r7, r1, #0
    7aa0:	4665      	mov	r5, ip
    7aa2:	4698      	mov	r8, r3
    7aa4:	4c4e      	ldr	r4, [pc, #312]	; (7be0 <__aeabi_dadd+0x648>)
    7aa6:	e59f      	b.n	75e8 <__aeabi_dadd+0x50>
    7aa8:	433d      	orrs	r5, r7
    7aaa:	1e6f      	subs	r7, r5, #1
    7aac:	41bd      	sbcs	r5, r7
    7aae:	2700      	movs	r7, #0
    7ab0:	b2ed      	uxtb	r5, r5
    7ab2:	e732      	b.n	791a <__aeabi_dadd+0x382>
    7ab4:	1c04      	adds	r4, r0, #0
    7ab6:	2700      	movs	r7, #0
    7ab8:	2500      	movs	r5, #0
    7aba:	e627      	b.n	770c <__aeabi_dadd+0x174>
    7abc:	4848      	ldr	r0, [pc, #288]	; (7be0 <__aeabi_dadd+0x648>)
    7abe:	4282      	cmp	r2, r0
    7ac0:	d036      	beq.n	7b30 <__aeabi_dadd+0x598>
    7ac2:	2080      	movs	r0, #128	; 0x80
    7ac4:	0400      	lsls	r0, r0, #16
    7ac6:	425b      	negs	r3, r3
    7ac8:	4307      	orrs	r7, r0
    7aca:	e7c5      	b.n	7a58 <__aeabi_dadd+0x4c0>
    7acc:	4662      	mov	r2, ip
    7ace:	430a      	orrs	r2, r1
    7ad0:	d049      	beq.n	7b66 <__aeabi_dadd+0x5ce>
    7ad2:	2480      	movs	r4, #128	; 0x80
    7ad4:	08ed      	lsrs	r5, r5, #3
    7ad6:	0778      	lsls	r0, r7, #29
    7ad8:	08fa      	lsrs	r2, r7, #3
    7ada:	0324      	lsls	r4, r4, #12
    7adc:	4328      	orrs	r0, r5
    7ade:	4222      	tst	r2, r4
    7ae0:	d009      	beq.n	7af6 <__aeabi_dadd+0x55e>
    7ae2:	08ce      	lsrs	r6, r1, #3
    7ae4:	4226      	tst	r6, r4
    7ae6:	d106      	bne.n	7af6 <__aeabi_dadd+0x55e>
    7ae8:	4662      	mov	r2, ip
    7aea:	074f      	lsls	r7, r1, #29
    7aec:	1c38      	adds	r0, r7, #0
    7aee:	08d2      	lsrs	r2, r2, #3
    7af0:	4310      	orrs	r0, r2
    7af2:	4698      	mov	r8, r3
    7af4:	1c32      	adds	r2, r6, #0
    7af6:	00d2      	lsls	r2, r2, #3
    7af8:	0f47      	lsrs	r7, r0, #29
    7afa:	4317      	orrs	r7, r2
    7afc:	00c5      	lsls	r5, r0, #3
    7afe:	4c38      	ldr	r4, [pc, #224]	; (7be0 <__aeabi_dadd+0x648>)
    7b00:	e572      	b.n	75e8 <__aeabi_dadd+0x50>
    7b02:	4662      	mov	r2, ip
    7b04:	430a      	orrs	r2, r1
    7b06:	d100      	bne.n	7b0a <__aeabi_dadd+0x572>
    7b08:	e56e      	b.n	75e8 <__aeabi_dadd+0x50>
    7b0a:	4662      	mov	r2, ip
    7b0c:	1aae      	subs	r6, r5, r2
    7b0e:	42b5      	cmp	r5, r6
    7b10:	4192      	sbcs	r2, r2
    7b12:	1a78      	subs	r0, r7, r1
    7b14:	4252      	negs	r2, r2
    7b16:	1a82      	subs	r2, r0, r2
    7b18:	0210      	lsls	r0, r2, #8
    7b1a:	d400      	bmi.n	7b1e <__aeabi_dadd+0x586>
    7b1c:	e655      	b.n	77ca <__aeabi_dadd+0x232>
    7b1e:	4662      	mov	r2, ip
    7b20:	1b55      	subs	r5, r2, r5
    7b22:	45ac      	cmp	ip, r5
    7b24:	4180      	sbcs	r0, r0
    7b26:	1bca      	subs	r2, r1, r7
    7b28:	4240      	negs	r0, r0
    7b2a:	1a17      	subs	r7, r2, r0
    7b2c:	4698      	mov	r8, r3
    7b2e:	e55b      	b.n	75e8 <__aeabi_dadd+0x50>
    7b30:	1c0f      	adds	r7, r1, #0
    7b32:	4665      	mov	r5, ip
    7b34:	1c14      	adds	r4, r2, #0
    7b36:	e557      	b.n	75e8 <__aeabi_dadd+0x50>
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d034      	beq.n	7ba6 <__aeabi_dadd+0x60e>
    7b3c:	4663      	mov	r3, ip
    7b3e:	430b      	orrs	r3, r1
    7b40:	d011      	beq.n	7b66 <__aeabi_dadd+0x5ce>
    7b42:	2480      	movs	r4, #128	; 0x80
    7b44:	08ed      	lsrs	r5, r5, #3
    7b46:	0778      	lsls	r0, r7, #29
    7b48:	08fa      	lsrs	r2, r7, #3
    7b4a:	0324      	lsls	r4, r4, #12
    7b4c:	4328      	orrs	r0, r5
    7b4e:	4222      	tst	r2, r4
    7b50:	d0d1      	beq.n	7af6 <__aeabi_dadd+0x55e>
    7b52:	08cb      	lsrs	r3, r1, #3
    7b54:	4223      	tst	r3, r4
    7b56:	d1ce      	bne.n	7af6 <__aeabi_dadd+0x55e>
    7b58:	4662      	mov	r2, ip
    7b5a:	074f      	lsls	r7, r1, #29
    7b5c:	1c38      	adds	r0, r7, #0
    7b5e:	08d2      	lsrs	r2, r2, #3
    7b60:	4310      	orrs	r0, r2
    7b62:	1c1a      	adds	r2, r3, #0
    7b64:	e7c7      	b.n	7af6 <__aeabi_dadd+0x55e>
    7b66:	4c1e      	ldr	r4, [pc, #120]	; (7be0 <__aeabi_dadd+0x648>)
    7b68:	e53e      	b.n	75e8 <__aeabi_dadd+0x50>
    7b6a:	2000      	movs	r0, #0
    7b6c:	e759      	b.n	7a22 <__aeabi_dadd+0x48a>
    7b6e:	1c04      	adds	r4, r0, #0
    7b70:	1c3e      	adds	r6, r7, #0
    7b72:	3c20      	subs	r4, #32
    7b74:	40e6      	lsrs	r6, r4
    7b76:	1c34      	adds	r4, r6, #0
    7b78:	2820      	cmp	r0, #32
    7b7a:	d02b      	beq.n	7bd4 <__aeabi_dadd+0x63c>
    7b7c:	2640      	movs	r6, #64	; 0x40
    7b7e:	1a30      	subs	r0, r6, r0
    7b80:	4087      	lsls	r7, r0
    7b82:	433d      	orrs	r5, r7
    7b84:	1e6f      	subs	r7, r5, #1
    7b86:	41bd      	sbcs	r5, r7
    7b88:	2700      	movs	r7, #0
    7b8a:	4325      	orrs	r5, r4
    7b8c:	e6c5      	b.n	791a <__aeabi_dadd+0x382>
    7b8e:	2780      	movs	r7, #128	; 0x80
    7b90:	2600      	movs	r6, #0
    7b92:	03ff      	lsls	r7, r7, #15
    7b94:	4c12      	ldr	r4, [pc, #72]	; (7be0 <__aeabi_dadd+0x648>)
    7b96:	2500      	movs	r5, #0
    7b98:	e5b8      	b.n	770c <__aeabi_dadd+0x174>
    7b9a:	433d      	orrs	r5, r7
    7b9c:	1e6f      	subs	r7, r5, #1
    7b9e:	41bd      	sbcs	r5, r7
    7ba0:	2700      	movs	r7, #0
    7ba2:	b2ed      	uxtb	r5, r5
    7ba4:	e76e      	b.n	7a84 <__aeabi_dadd+0x4ec>
    7ba6:	1c0f      	adds	r7, r1, #0
    7ba8:	4665      	mov	r5, ip
    7baa:	4c0d      	ldr	r4, [pc, #52]	; (7be0 <__aeabi_dadd+0x648>)
    7bac:	e51c      	b.n	75e8 <__aeabi_dadd+0x50>
    7bae:	1c0f      	adds	r7, r1, #0
    7bb0:	4665      	mov	r5, ip
    7bb2:	e519      	b.n	75e8 <__aeabi_dadd+0x50>
    7bb4:	1c1c      	adds	r4, r3, #0
    7bb6:	1c38      	adds	r0, r7, #0
    7bb8:	3c20      	subs	r4, #32
    7bba:	40e0      	lsrs	r0, r4
    7bbc:	1c04      	adds	r4, r0, #0
    7bbe:	2b20      	cmp	r3, #32
    7bc0:	d00c      	beq.n	7bdc <__aeabi_dadd+0x644>
    7bc2:	2040      	movs	r0, #64	; 0x40
    7bc4:	1ac3      	subs	r3, r0, r3
    7bc6:	409f      	lsls	r7, r3
    7bc8:	433d      	orrs	r5, r7
    7bca:	1e6f      	subs	r7, r5, #1
    7bcc:	41bd      	sbcs	r5, r7
    7bce:	2700      	movs	r7, #0
    7bd0:	4325      	orrs	r5, r4
    7bd2:	e757      	b.n	7a84 <__aeabi_dadd+0x4ec>
    7bd4:	2700      	movs	r7, #0
    7bd6:	e7d4      	b.n	7b82 <__aeabi_dadd+0x5ea>
    7bd8:	1c1d      	adds	r5, r3, #0
    7bda:	e5fc      	b.n	77d6 <__aeabi_dadd+0x23e>
    7bdc:	2700      	movs	r7, #0
    7bde:	e7f3      	b.n	7bc8 <__aeabi_dadd+0x630>
    7be0:	000007ff 	.word	0x000007ff
    7be4:	ff7fffff 	.word	0xff7fffff

00007be8 <__aeabi_ddiv>:
    7be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bea:	465f      	mov	r7, fp
    7bec:	4656      	mov	r6, sl
    7bee:	464d      	mov	r5, r9
    7bf0:	4644      	mov	r4, r8
    7bf2:	b4f0      	push	{r4, r5, r6, r7}
    7bf4:	030f      	lsls	r7, r1, #12
    7bf6:	b087      	sub	sp, #28
    7bf8:	4698      	mov	r8, r3
    7bfa:	004d      	lsls	r5, r1, #1
    7bfc:	0b3b      	lsrs	r3, r7, #12
    7bfe:	0fcc      	lsrs	r4, r1, #31
    7c00:	1c06      	adds	r6, r0, #0
    7c02:	4692      	mov	sl, r2
    7c04:	4681      	mov	r9, r0
    7c06:	469b      	mov	fp, r3
    7c08:	0d6d      	lsrs	r5, r5, #21
    7c0a:	9401      	str	r4, [sp, #4]
    7c0c:	d06b      	beq.n	7ce6 <__aeabi_ddiv+0xfe>
    7c0e:	4b66      	ldr	r3, [pc, #408]	; (7da8 <__aeabi_ddiv+0x1c0>)
    7c10:	429d      	cmp	r5, r3
    7c12:	d035      	beq.n	7c80 <__aeabi_ddiv+0x98>
    7c14:	2780      	movs	r7, #128	; 0x80
    7c16:	465b      	mov	r3, fp
    7c18:	037f      	lsls	r7, r7, #13
    7c1a:	431f      	orrs	r7, r3
    7c1c:	00f3      	lsls	r3, r6, #3
    7c1e:	4699      	mov	r9, r3
    7c20:	4b62      	ldr	r3, [pc, #392]	; (7dac <__aeabi_ddiv+0x1c4>)
    7c22:	00ff      	lsls	r7, r7, #3
    7c24:	0f40      	lsrs	r0, r0, #29
    7c26:	469c      	mov	ip, r3
    7c28:	4307      	orrs	r7, r0
    7c2a:	2300      	movs	r3, #0
    7c2c:	46bb      	mov	fp, r7
    7c2e:	2600      	movs	r6, #0
    7c30:	4465      	add	r5, ip
    7c32:	9300      	str	r3, [sp, #0]
    7c34:	4642      	mov	r2, r8
    7c36:	0317      	lsls	r7, r2, #12
    7c38:	0050      	lsls	r0, r2, #1
    7c3a:	0fd2      	lsrs	r2, r2, #31
    7c3c:	4653      	mov	r3, sl
    7c3e:	0b3f      	lsrs	r7, r7, #12
    7c40:	0d40      	lsrs	r0, r0, #21
    7c42:	4690      	mov	r8, r2
    7c44:	d100      	bne.n	7c48 <__aeabi_ddiv+0x60>
    7c46:	e072      	b.n	7d2e <__aeabi_ddiv+0x146>
    7c48:	4a57      	ldr	r2, [pc, #348]	; (7da8 <__aeabi_ddiv+0x1c0>)
    7c4a:	4290      	cmp	r0, r2
    7c4c:	d067      	beq.n	7d1e <__aeabi_ddiv+0x136>
    7c4e:	2380      	movs	r3, #128	; 0x80
    7c50:	035b      	lsls	r3, r3, #13
    7c52:	431f      	orrs	r7, r3
    7c54:	4653      	mov	r3, sl
    7c56:	4a55      	ldr	r2, [pc, #340]	; (7dac <__aeabi_ddiv+0x1c4>)
    7c58:	0f5b      	lsrs	r3, r3, #29
    7c5a:	00ff      	lsls	r7, r7, #3
    7c5c:	431f      	orrs	r7, r3
    7c5e:	4694      	mov	ip, r2
    7c60:	4653      	mov	r3, sl
    7c62:	2100      	movs	r1, #0
    7c64:	00db      	lsls	r3, r3, #3
    7c66:	4460      	add	r0, ip
    7c68:	4642      	mov	r2, r8
    7c6a:	4062      	eors	r2, r4
    7c6c:	4692      	mov	sl, r2
    7c6e:	1a2d      	subs	r5, r5, r0
    7c70:	430e      	orrs	r6, r1
    7c72:	2e0f      	cmp	r6, #15
    7c74:	d900      	bls.n	7c78 <__aeabi_ddiv+0x90>
    7c76:	e0a1      	b.n	7dbc <__aeabi_ddiv+0x1d4>
    7c78:	484d      	ldr	r0, [pc, #308]	; (7db0 <__aeabi_ddiv+0x1c8>)
    7c7a:	00b6      	lsls	r6, r6, #2
    7c7c:	5980      	ldr	r0, [r0, r6]
    7c7e:	4687      	mov	pc, r0
    7c80:	465b      	mov	r3, fp
    7c82:	431e      	orrs	r6, r3
    7c84:	d000      	beq.n	7c88 <__aeabi_ddiv+0xa0>
    7c86:	e076      	b.n	7d76 <__aeabi_ddiv+0x18e>
    7c88:	2300      	movs	r3, #0
    7c8a:	469b      	mov	fp, r3
    7c8c:	4699      	mov	r9, r3
    7c8e:	3302      	adds	r3, #2
    7c90:	2608      	movs	r6, #8
    7c92:	9300      	str	r3, [sp, #0]
    7c94:	e7ce      	b.n	7c34 <__aeabi_ddiv+0x4c>
    7c96:	4699      	mov	r9, r3
    7c98:	4643      	mov	r3, r8
    7c9a:	46bb      	mov	fp, r7
    7c9c:	9301      	str	r3, [sp, #4]
    7c9e:	9100      	str	r1, [sp, #0]
    7ca0:	9b00      	ldr	r3, [sp, #0]
    7ca2:	2b02      	cmp	r3, #2
    7ca4:	d16b      	bne.n	7d7e <__aeabi_ddiv+0x196>
    7ca6:	9b01      	ldr	r3, [sp, #4]
    7ca8:	469a      	mov	sl, r3
    7caa:	2100      	movs	r1, #0
    7cac:	4653      	mov	r3, sl
    7cae:	2201      	movs	r2, #1
    7cb0:	2700      	movs	r7, #0
    7cb2:	4689      	mov	r9, r1
    7cb4:	401a      	ands	r2, r3
    7cb6:	4b3c      	ldr	r3, [pc, #240]	; (7da8 <__aeabi_ddiv+0x1c0>)
    7cb8:	2100      	movs	r1, #0
    7cba:	033f      	lsls	r7, r7, #12
    7cbc:	0d0c      	lsrs	r4, r1, #20
    7cbe:	0524      	lsls	r4, r4, #20
    7cc0:	0b3f      	lsrs	r7, r7, #12
    7cc2:	4327      	orrs	r7, r4
    7cc4:	4c3b      	ldr	r4, [pc, #236]	; (7db4 <__aeabi_ddiv+0x1cc>)
    7cc6:	051b      	lsls	r3, r3, #20
    7cc8:	4027      	ands	r7, r4
    7cca:	431f      	orrs	r7, r3
    7ccc:	007f      	lsls	r7, r7, #1
    7cce:	07d2      	lsls	r2, r2, #31
    7cd0:	087f      	lsrs	r7, r7, #1
    7cd2:	4317      	orrs	r7, r2
    7cd4:	4648      	mov	r0, r9
    7cd6:	1c39      	adds	r1, r7, #0
    7cd8:	b007      	add	sp, #28
    7cda:	bc3c      	pop	{r2, r3, r4, r5}
    7cdc:	4690      	mov	r8, r2
    7cde:	4699      	mov	r9, r3
    7ce0:	46a2      	mov	sl, r4
    7ce2:	46ab      	mov	fp, r5
    7ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ce6:	4303      	orrs	r3, r0
    7ce8:	d03e      	beq.n	7d68 <__aeabi_ddiv+0x180>
    7cea:	465b      	mov	r3, fp
    7cec:	2b00      	cmp	r3, #0
    7cee:	d100      	bne.n	7cf2 <__aeabi_ddiv+0x10a>
    7cf0:	e19c      	b.n	802c <__aeabi_ddiv+0x444>
    7cf2:	4658      	mov	r0, fp
    7cf4:	f001 f918 	bl	8f28 <__clzsi2>
    7cf8:	2328      	movs	r3, #40	; 0x28
    7cfa:	1c31      	adds	r1, r6, #0
    7cfc:	1a1b      	subs	r3, r3, r0
    7cfe:	1c02      	adds	r2, r0, #0
    7d00:	465f      	mov	r7, fp
    7d02:	40d9      	lsrs	r1, r3
    7d04:	3a08      	subs	r2, #8
    7d06:	4097      	lsls	r7, r2
    7d08:	1c0b      	adds	r3, r1, #0
    7d0a:	4096      	lsls	r6, r2
    7d0c:	433b      	orrs	r3, r7
    7d0e:	469b      	mov	fp, r3
    7d10:	46b1      	mov	r9, r6
    7d12:	2300      	movs	r3, #0
    7d14:	4d28      	ldr	r5, [pc, #160]	; (7db8 <__aeabi_ddiv+0x1d0>)
    7d16:	2600      	movs	r6, #0
    7d18:	1a2d      	subs	r5, r5, r0
    7d1a:	9300      	str	r3, [sp, #0]
    7d1c:	e78a      	b.n	7c34 <__aeabi_ddiv+0x4c>
    7d1e:	4652      	mov	r2, sl
    7d20:	2103      	movs	r1, #3
    7d22:	433a      	orrs	r2, r7
    7d24:	d1a0      	bne.n	7c68 <__aeabi_ddiv+0x80>
    7d26:	2700      	movs	r7, #0
    7d28:	2300      	movs	r3, #0
    7d2a:	2102      	movs	r1, #2
    7d2c:	e79c      	b.n	7c68 <__aeabi_ddiv+0x80>
    7d2e:	4652      	mov	r2, sl
    7d30:	433a      	orrs	r2, r7
    7d32:	d015      	beq.n	7d60 <__aeabi_ddiv+0x178>
    7d34:	2f00      	cmp	r7, #0
    7d36:	d100      	bne.n	7d3a <__aeabi_ddiv+0x152>
    7d38:	e185      	b.n	8046 <__aeabi_ddiv+0x45e>
    7d3a:	1c38      	adds	r0, r7, #0
    7d3c:	f001 f8f4 	bl	8f28 <__clzsi2>
    7d40:	1c02      	adds	r2, r0, #0
    7d42:	2128      	movs	r1, #40	; 0x28
    7d44:	4650      	mov	r0, sl
    7d46:	1a89      	subs	r1, r1, r2
    7d48:	1c13      	adds	r3, r2, #0
    7d4a:	40c8      	lsrs	r0, r1
    7d4c:	4651      	mov	r1, sl
    7d4e:	3b08      	subs	r3, #8
    7d50:	4099      	lsls	r1, r3
    7d52:	409f      	lsls	r7, r3
    7d54:	1c0b      	adds	r3, r1, #0
    7d56:	4307      	orrs	r7, r0
    7d58:	4817      	ldr	r0, [pc, #92]	; (7db8 <__aeabi_ddiv+0x1d0>)
    7d5a:	2100      	movs	r1, #0
    7d5c:	1a80      	subs	r0, r0, r2
    7d5e:	e783      	b.n	7c68 <__aeabi_ddiv+0x80>
    7d60:	2700      	movs	r7, #0
    7d62:	2300      	movs	r3, #0
    7d64:	2101      	movs	r1, #1
    7d66:	e77f      	b.n	7c68 <__aeabi_ddiv+0x80>
    7d68:	2300      	movs	r3, #0
    7d6a:	469b      	mov	fp, r3
    7d6c:	4699      	mov	r9, r3
    7d6e:	3301      	adds	r3, #1
    7d70:	2604      	movs	r6, #4
    7d72:	9300      	str	r3, [sp, #0]
    7d74:	e75e      	b.n	7c34 <__aeabi_ddiv+0x4c>
    7d76:	2303      	movs	r3, #3
    7d78:	260c      	movs	r6, #12
    7d7a:	9300      	str	r3, [sp, #0]
    7d7c:	e75a      	b.n	7c34 <__aeabi_ddiv+0x4c>
    7d7e:	2b03      	cmp	r3, #3
    7d80:	d100      	bne.n	7d84 <__aeabi_ddiv+0x19c>
    7d82:	e23c      	b.n	81fe <__aeabi_ddiv+0x616>
    7d84:	2b01      	cmp	r3, #1
    7d86:	d000      	beq.n	7d8a <__aeabi_ddiv+0x1a2>
    7d88:	e1bf      	b.n	810a <__aeabi_ddiv+0x522>
    7d8a:	1c1a      	adds	r2, r3, #0
    7d8c:	9b01      	ldr	r3, [sp, #4]
    7d8e:	401a      	ands	r2, r3
    7d90:	2100      	movs	r1, #0
    7d92:	2300      	movs	r3, #0
    7d94:	2700      	movs	r7, #0
    7d96:	4689      	mov	r9, r1
    7d98:	e78e      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    7d9a:	2300      	movs	r3, #0
    7d9c:	2780      	movs	r7, #128	; 0x80
    7d9e:	4699      	mov	r9, r3
    7da0:	2200      	movs	r2, #0
    7da2:	033f      	lsls	r7, r7, #12
    7da4:	4b00      	ldr	r3, [pc, #0]	; (7da8 <__aeabi_ddiv+0x1c0>)
    7da6:	e787      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    7da8:	000007ff 	.word	0x000007ff
    7dac:	fffffc01 	.word	0xfffffc01
    7db0:	000090c4 	.word	0x000090c4
    7db4:	800fffff 	.word	0x800fffff
    7db8:	fffffc0d 	.word	0xfffffc0d
    7dbc:	45bb      	cmp	fp, r7
    7dbe:	d900      	bls.n	7dc2 <__aeabi_ddiv+0x1da>
    7dc0:	e151      	b.n	8066 <__aeabi_ddiv+0x47e>
    7dc2:	d100      	bne.n	7dc6 <__aeabi_ddiv+0x1de>
    7dc4:	e14c      	b.n	8060 <__aeabi_ddiv+0x478>
    7dc6:	464a      	mov	r2, r9
    7dc8:	9203      	str	r2, [sp, #12]
    7dca:	2200      	movs	r2, #0
    7dcc:	465c      	mov	r4, fp
    7dce:	4690      	mov	r8, r2
    7dd0:	3d01      	subs	r5, #1
    7dd2:	0e18      	lsrs	r0, r3, #24
    7dd4:	023f      	lsls	r7, r7, #8
    7dd6:	4338      	orrs	r0, r7
    7dd8:	021b      	lsls	r3, r3, #8
    7dda:	9301      	str	r3, [sp, #4]
    7ddc:	0c03      	lsrs	r3, r0, #16
    7dde:	4699      	mov	r9, r3
    7de0:	0403      	lsls	r3, r0, #16
    7de2:	0c1b      	lsrs	r3, r3, #16
    7de4:	4649      	mov	r1, r9
    7de6:	1c06      	adds	r6, r0, #0
    7de8:	1c20      	adds	r0, r4, #0
    7dea:	1c1f      	adds	r7, r3, #0
    7dec:	9300      	str	r3, [sp, #0]
    7dee:	f7ff fb41 	bl	7474 <__aeabi_uidiv>
    7df2:	1c02      	adds	r2, r0, #0
    7df4:	437a      	muls	r2, r7
    7df6:	9002      	str	r0, [sp, #8]
    7df8:	4649      	mov	r1, r9
    7dfa:	1c20      	adds	r0, r4, #0
    7dfc:	1c17      	adds	r7, r2, #0
    7dfe:	f7ff fbbf 	bl	7580 <__aeabi_uidivmod>
    7e02:	9b03      	ldr	r3, [sp, #12]
    7e04:	0409      	lsls	r1, r1, #16
    7e06:	0c1b      	lsrs	r3, r3, #16
    7e08:	4319      	orrs	r1, r3
    7e0a:	428f      	cmp	r7, r1
    7e0c:	d90c      	bls.n	7e28 <__aeabi_ddiv+0x240>
    7e0e:	9b02      	ldr	r3, [sp, #8]
    7e10:	1989      	adds	r1, r1, r6
    7e12:	3b01      	subs	r3, #1
    7e14:	428e      	cmp	r6, r1
    7e16:	d900      	bls.n	7e1a <__aeabi_ddiv+0x232>
    7e18:	e152      	b.n	80c0 <__aeabi_ddiv+0x4d8>
    7e1a:	428f      	cmp	r7, r1
    7e1c:	d800      	bhi.n	7e20 <__aeabi_ddiv+0x238>
    7e1e:	e14f      	b.n	80c0 <__aeabi_ddiv+0x4d8>
    7e20:	9b02      	ldr	r3, [sp, #8]
    7e22:	1989      	adds	r1, r1, r6
    7e24:	3b02      	subs	r3, #2
    7e26:	9302      	str	r3, [sp, #8]
    7e28:	1bcc      	subs	r4, r1, r7
    7e2a:	1c20      	adds	r0, r4, #0
    7e2c:	4649      	mov	r1, r9
    7e2e:	f7ff fb21 	bl	7474 <__aeabi_uidiv>
    7e32:	9f00      	ldr	r7, [sp, #0]
    7e34:	4683      	mov	fp, r0
    7e36:	4347      	muls	r7, r0
    7e38:	4649      	mov	r1, r9
    7e3a:	1c20      	adds	r0, r4, #0
    7e3c:	f7ff fba0 	bl	7580 <__aeabi_uidivmod>
    7e40:	9a03      	ldr	r2, [sp, #12]
    7e42:	040b      	lsls	r3, r1, #16
    7e44:	0414      	lsls	r4, r2, #16
    7e46:	0c24      	lsrs	r4, r4, #16
    7e48:	4323      	orrs	r3, r4
    7e4a:	429f      	cmp	r7, r3
    7e4c:	d90d      	bls.n	7e6a <__aeabi_ddiv+0x282>
    7e4e:	465a      	mov	r2, fp
    7e50:	199b      	adds	r3, r3, r6
    7e52:	3a01      	subs	r2, #1
    7e54:	429e      	cmp	r6, r3
    7e56:	d900      	bls.n	7e5a <__aeabi_ddiv+0x272>
    7e58:	e130      	b.n	80bc <__aeabi_ddiv+0x4d4>
    7e5a:	429f      	cmp	r7, r3
    7e5c:	d800      	bhi.n	7e60 <__aeabi_ddiv+0x278>
    7e5e:	e12d      	b.n	80bc <__aeabi_ddiv+0x4d4>
    7e60:	2202      	movs	r2, #2
    7e62:	4252      	negs	r2, r2
    7e64:	4694      	mov	ip, r2
    7e66:	199b      	adds	r3, r3, r6
    7e68:	44e3      	add	fp, ip
    7e6a:	9a02      	ldr	r2, [sp, #8]
    7e6c:	1bdb      	subs	r3, r3, r7
    7e6e:	0417      	lsls	r7, r2, #16
    7e70:	465a      	mov	r2, fp
    7e72:	433a      	orrs	r2, r7
    7e74:	4693      	mov	fp, r2
    7e76:	9c01      	ldr	r4, [sp, #4]
    7e78:	0c17      	lsrs	r7, r2, #16
    7e7a:	0c22      	lsrs	r2, r4, #16
    7e7c:	1c10      	adds	r0, r2, #0
    7e7e:	9204      	str	r2, [sp, #16]
    7e80:	465a      	mov	r2, fp
    7e82:	0411      	lsls	r1, r2, #16
    7e84:	0422      	lsls	r2, r4, #16
    7e86:	0c12      	lsrs	r2, r2, #16
    7e88:	1c14      	adds	r4, r2, #0
    7e8a:	0c09      	lsrs	r1, r1, #16
    7e8c:	437c      	muls	r4, r7
    7e8e:	9205      	str	r2, [sp, #20]
    7e90:	434a      	muls	r2, r1
    7e92:	4341      	muls	r1, r0
    7e94:	4347      	muls	r7, r0
    7e96:	1861      	adds	r1, r4, r1
    7e98:	0c10      	lsrs	r0, r2, #16
    7e9a:	1809      	adds	r1, r1, r0
    7e9c:	428c      	cmp	r4, r1
    7e9e:	d903      	bls.n	7ea8 <__aeabi_ddiv+0x2c0>
    7ea0:	2080      	movs	r0, #128	; 0x80
    7ea2:	0240      	lsls	r0, r0, #9
    7ea4:	4684      	mov	ip, r0
    7ea6:	4467      	add	r7, ip
    7ea8:	0c0c      	lsrs	r4, r1, #16
    7eaa:	0412      	lsls	r2, r2, #16
    7eac:	0408      	lsls	r0, r1, #16
    7eae:	0c12      	lsrs	r2, r2, #16
    7eb0:	193c      	adds	r4, r7, r4
    7eb2:	1881      	adds	r1, r0, r2
    7eb4:	42a3      	cmp	r3, r4
    7eb6:	d200      	bcs.n	7eba <__aeabi_ddiv+0x2d2>
    7eb8:	e0e5      	b.n	8086 <__aeabi_ddiv+0x49e>
    7eba:	d100      	bne.n	7ebe <__aeabi_ddiv+0x2d6>
    7ebc:	e0df      	b.n	807e <__aeabi_ddiv+0x496>
    7ebe:	1b1f      	subs	r7, r3, r4
    7ec0:	4643      	mov	r3, r8
    7ec2:	1a5c      	subs	r4, r3, r1
    7ec4:	45a0      	cmp	r8, r4
    7ec6:	4192      	sbcs	r2, r2
    7ec8:	4252      	negs	r2, r2
    7eca:	1abf      	subs	r7, r7, r2
    7ecc:	42b7      	cmp	r7, r6
    7ece:	d100      	bne.n	7ed2 <__aeabi_ddiv+0x2ea>
    7ed0:	e10e      	b.n	80f0 <__aeabi_ddiv+0x508>
    7ed2:	1c38      	adds	r0, r7, #0
    7ed4:	4649      	mov	r1, r9
    7ed6:	f7ff facd 	bl	7474 <__aeabi_uidiv>
    7eda:	9b00      	ldr	r3, [sp, #0]
    7edc:	9002      	str	r0, [sp, #8]
    7ede:	4343      	muls	r3, r0
    7ee0:	4649      	mov	r1, r9
    7ee2:	1c38      	adds	r0, r7, #0
    7ee4:	4698      	mov	r8, r3
    7ee6:	f7ff fb4b 	bl	7580 <__aeabi_uidivmod>
    7eea:	0c23      	lsrs	r3, r4, #16
    7eec:	040f      	lsls	r7, r1, #16
    7eee:	431f      	orrs	r7, r3
    7ef0:	45b8      	cmp	r8, r7
    7ef2:	d90c      	bls.n	7f0e <__aeabi_ddiv+0x326>
    7ef4:	9b02      	ldr	r3, [sp, #8]
    7ef6:	19bf      	adds	r7, r7, r6
    7ef8:	3b01      	subs	r3, #1
    7efa:	42be      	cmp	r6, r7
    7efc:	d900      	bls.n	7f00 <__aeabi_ddiv+0x318>
    7efe:	e0fb      	b.n	80f8 <__aeabi_ddiv+0x510>
    7f00:	45b8      	cmp	r8, r7
    7f02:	d800      	bhi.n	7f06 <__aeabi_ddiv+0x31e>
    7f04:	e0f8      	b.n	80f8 <__aeabi_ddiv+0x510>
    7f06:	9b02      	ldr	r3, [sp, #8]
    7f08:	19bf      	adds	r7, r7, r6
    7f0a:	3b02      	subs	r3, #2
    7f0c:	9302      	str	r3, [sp, #8]
    7f0e:	4643      	mov	r3, r8
    7f10:	1aff      	subs	r7, r7, r3
    7f12:	4649      	mov	r1, r9
    7f14:	1c38      	adds	r0, r7, #0
    7f16:	f7ff faad 	bl	7474 <__aeabi_uidiv>
    7f1a:	9b00      	ldr	r3, [sp, #0]
    7f1c:	9003      	str	r0, [sp, #12]
    7f1e:	4343      	muls	r3, r0
    7f20:	4649      	mov	r1, r9
    7f22:	1c38      	adds	r0, r7, #0
    7f24:	4698      	mov	r8, r3
    7f26:	f7ff fb2b 	bl	7580 <__aeabi_uidivmod>
    7f2a:	0424      	lsls	r4, r4, #16
    7f2c:	0409      	lsls	r1, r1, #16
    7f2e:	0c24      	lsrs	r4, r4, #16
    7f30:	4321      	orrs	r1, r4
    7f32:	4588      	cmp	r8, r1
    7f34:	d90c      	bls.n	7f50 <__aeabi_ddiv+0x368>
    7f36:	9b03      	ldr	r3, [sp, #12]
    7f38:	1989      	adds	r1, r1, r6
    7f3a:	3b01      	subs	r3, #1
    7f3c:	428e      	cmp	r6, r1
    7f3e:	d900      	bls.n	7f42 <__aeabi_ddiv+0x35a>
    7f40:	e0dc      	b.n	80fc <__aeabi_ddiv+0x514>
    7f42:	4588      	cmp	r8, r1
    7f44:	d800      	bhi.n	7f48 <__aeabi_ddiv+0x360>
    7f46:	e0d9      	b.n	80fc <__aeabi_ddiv+0x514>
    7f48:	9b03      	ldr	r3, [sp, #12]
    7f4a:	1989      	adds	r1, r1, r6
    7f4c:	3b02      	subs	r3, #2
    7f4e:	9303      	str	r3, [sp, #12]
    7f50:	4643      	mov	r3, r8
    7f52:	1ac9      	subs	r1, r1, r3
    7f54:	9b02      	ldr	r3, [sp, #8]
    7f56:	9a03      	ldr	r2, [sp, #12]
    7f58:	041b      	lsls	r3, r3, #16
    7f5a:	9c05      	ldr	r4, [sp, #20]
    7f5c:	431a      	orrs	r2, r3
    7f5e:	0c10      	lsrs	r0, r2, #16
    7f60:	0413      	lsls	r3, r2, #16
    7f62:	4691      	mov	r9, r2
    7f64:	1c22      	adds	r2, r4, #0
    7f66:	9f04      	ldr	r7, [sp, #16]
    7f68:	0c1b      	lsrs	r3, r3, #16
    7f6a:	435a      	muls	r2, r3
    7f6c:	4344      	muls	r4, r0
    7f6e:	437b      	muls	r3, r7
    7f70:	4378      	muls	r0, r7
    7f72:	18e3      	adds	r3, r4, r3
    7f74:	0c17      	lsrs	r7, r2, #16
    7f76:	19db      	adds	r3, r3, r7
    7f78:	429c      	cmp	r4, r3
    7f7a:	d903      	bls.n	7f84 <__aeabi_ddiv+0x39c>
    7f7c:	2480      	movs	r4, #128	; 0x80
    7f7e:	0264      	lsls	r4, r4, #9
    7f80:	46a4      	mov	ip, r4
    7f82:	4460      	add	r0, ip
    7f84:	0c1c      	lsrs	r4, r3, #16
    7f86:	0412      	lsls	r2, r2, #16
    7f88:	041b      	lsls	r3, r3, #16
    7f8a:	0c12      	lsrs	r2, r2, #16
    7f8c:	1900      	adds	r0, r0, r4
    7f8e:	189b      	adds	r3, r3, r2
    7f90:	4281      	cmp	r1, r0
    7f92:	d200      	bcs.n	7f96 <__aeabi_ddiv+0x3ae>
    7f94:	e096      	b.n	80c4 <__aeabi_ddiv+0x4dc>
    7f96:	d100      	bne.n	7f9a <__aeabi_ddiv+0x3b2>
    7f98:	e0fc      	b.n	8194 <__aeabi_ddiv+0x5ac>
    7f9a:	464a      	mov	r2, r9
    7f9c:	2301      	movs	r3, #1
    7f9e:	431a      	orrs	r2, r3
    7fa0:	4691      	mov	r9, r2
    7fa2:	4b9b      	ldr	r3, [pc, #620]	; (8210 <__aeabi_ddiv+0x628>)
    7fa4:	18eb      	adds	r3, r5, r3
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	dc00      	bgt.n	7fac <__aeabi_ddiv+0x3c4>
    7faa:	e099      	b.n	80e0 <__aeabi_ddiv+0x4f8>
    7fac:	464a      	mov	r2, r9
    7fae:	0752      	lsls	r2, r2, #29
    7fb0:	d00a      	beq.n	7fc8 <__aeabi_ddiv+0x3e0>
    7fb2:	220f      	movs	r2, #15
    7fb4:	4649      	mov	r1, r9
    7fb6:	400a      	ands	r2, r1
    7fb8:	2a04      	cmp	r2, #4
    7fba:	d005      	beq.n	7fc8 <__aeabi_ddiv+0x3e0>
    7fbc:	3104      	adds	r1, #4
    7fbe:	4549      	cmp	r1, r9
    7fc0:	4192      	sbcs	r2, r2
    7fc2:	4689      	mov	r9, r1
    7fc4:	4252      	negs	r2, r2
    7fc6:	4493      	add	fp, r2
    7fc8:	465a      	mov	r2, fp
    7fca:	01d2      	lsls	r2, r2, #7
    7fcc:	d506      	bpl.n	7fdc <__aeabi_ddiv+0x3f4>
    7fce:	465a      	mov	r2, fp
    7fd0:	4b90      	ldr	r3, [pc, #576]	; (8214 <__aeabi_ddiv+0x62c>)
    7fd2:	401a      	ands	r2, r3
    7fd4:	2380      	movs	r3, #128	; 0x80
    7fd6:	4693      	mov	fp, r2
    7fd8:	00db      	lsls	r3, r3, #3
    7fda:	18eb      	adds	r3, r5, r3
    7fdc:	4a8e      	ldr	r2, [pc, #568]	; (8218 <__aeabi_ddiv+0x630>)
    7fde:	4293      	cmp	r3, r2
    7fe0:	dd00      	ble.n	7fe4 <__aeabi_ddiv+0x3fc>
    7fe2:	e662      	b.n	7caa <__aeabi_ddiv+0xc2>
    7fe4:	464a      	mov	r2, r9
    7fe6:	4659      	mov	r1, fp
    7fe8:	08d2      	lsrs	r2, r2, #3
    7fea:	0749      	lsls	r1, r1, #29
    7fec:	4311      	orrs	r1, r2
    7fee:	465a      	mov	r2, fp
    7ff0:	4689      	mov	r9, r1
    7ff2:	0257      	lsls	r7, r2, #9
    7ff4:	4651      	mov	r1, sl
    7ff6:	2201      	movs	r2, #1
    7ff8:	055b      	lsls	r3, r3, #21
    7ffa:	0b3f      	lsrs	r7, r7, #12
    7ffc:	0d5b      	lsrs	r3, r3, #21
    7ffe:	400a      	ands	r2, r1
    8000:	e65a      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    8002:	2080      	movs	r0, #128	; 0x80
    8004:	465a      	mov	r2, fp
    8006:	0300      	lsls	r0, r0, #12
    8008:	4202      	tst	r2, r0
    800a:	d008      	beq.n	801e <__aeabi_ddiv+0x436>
    800c:	4207      	tst	r7, r0
    800e:	d106      	bne.n	801e <__aeabi_ddiv+0x436>
    8010:	4307      	orrs	r7, r0
    8012:	033f      	lsls	r7, r7, #12
    8014:	4699      	mov	r9, r3
    8016:	0b3f      	lsrs	r7, r7, #12
    8018:	4642      	mov	r2, r8
    801a:	4b80      	ldr	r3, [pc, #512]	; (821c <__aeabi_ddiv+0x634>)
    801c:	e64c      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    801e:	465f      	mov	r7, fp
    8020:	4307      	orrs	r7, r0
    8022:	033f      	lsls	r7, r7, #12
    8024:	0b3f      	lsrs	r7, r7, #12
    8026:	1c22      	adds	r2, r4, #0
    8028:	4b7c      	ldr	r3, [pc, #496]	; (821c <__aeabi_ddiv+0x634>)
    802a:	e645      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    802c:	f000 ff7c 	bl	8f28 <__clzsi2>
    8030:	1c03      	adds	r3, r0, #0
    8032:	3020      	adds	r0, #32
    8034:	2827      	cmp	r0, #39	; 0x27
    8036:	dc00      	bgt.n	803a <__aeabi_ddiv+0x452>
    8038:	e65e      	b.n	7cf8 <__aeabi_ddiv+0x110>
    803a:	3b08      	subs	r3, #8
    803c:	409e      	lsls	r6, r3
    803e:	2300      	movs	r3, #0
    8040:	46b3      	mov	fp, r6
    8042:	4699      	mov	r9, r3
    8044:	e665      	b.n	7d12 <__aeabi_ddiv+0x12a>
    8046:	4650      	mov	r0, sl
    8048:	f000 ff6e 	bl	8f28 <__clzsi2>
    804c:	1c02      	adds	r2, r0, #0
    804e:	3220      	adds	r2, #32
    8050:	2a27      	cmp	r2, #39	; 0x27
    8052:	dc00      	bgt.n	8056 <__aeabi_ddiv+0x46e>
    8054:	e675      	b.n	7d42 <__aeabi_ddiv+0x15a>
    8056:	4657      	mov	r7, sl
    8058:	3808      	subs	r0, #8
    805a:	4087      	lsls	r7, r0
    805c:	2300      	movs	r3, #0
    805e:	e67b      	b.n	7d58 <__aeabi_ddiv+0x170>
    8060:	4599      	cmp	r9, r3
    8062:	d200      	bcs.n	8066 <__aeabi_ddiv+0x47e>
    8064:	e6af      	b.n	7dc6 <__aeabi_ddiv+0x1de>
    8066:	465a      	mov	r2, fp
    8068:	4659      	mov	r1, fp
    806a:	0854      	lsrs	r4, r2, #1
    806c:	464a      	mov	r2, r9
    806e:	07c8      	lsls	r0, r1, #31
    8070:	0852      	lsrs	r2, r2, #1
    8072:	4302      	orrs	r2, r0
    8074:	9203      	str	r2, [sp, #12]
    8076:	464a      	mov	r2, r9
    8078:	07d2      	lsls	r2, r2, #31
    807a:	4690      	mov	r8, r2
    807c:	e6a9      	b.n	7dd2 <__aeabi_ddiv+0x1ea>
    807e:	2700      	movs	r7, #0
    8080:	4588      	cmp	r8, r1
    8082:	d300      	bcc.n	8086 <__aeabi_ddiv+0x49e>
    8084:	e71c      	b.n	7ec0 <__aeabi_ddiv+0x2d8>
    8086:	9f01      	ldr	r7, [sp, #4]
    8088:	465a      	mov	r2, fp
    808a:	46bc      	mov	ip, r7
    808c:	44e0      	add	r8, ip
    808e:	45b8      	cmp	r8, r7
    8090:	41bf      	sbcs	r7, r7
    8092:	427f      	negs	r7, r7
    8094:	19bf      	adds	r7, r7, r6
    8096:	18ff      	adds	r7, r7, r3
    8098:	3a01      	subs	r2, #1
    809a:	42be      	cmp	r6, r7
    809c:	d206      	bcs.n	80ac <__aeabi_ddiv+0x4c4>
    809e:	42bc      	cmp	r4, r7
    80a0:	d85f      	bhi.n	8162 <__aeabi_ddiv+0x57a>
    80a2:	d100      	bne.n	80a6 <__aeabi_ddiv+0x4be>
    80a4:	e09f      	b.n	81e6 <__aeabi_ddiv+0x5fe>
    80a6:	1b3f      	subs	r7, r7, r4
    80a8:	4693      	mov	fp, r2
    80aa:	e709      	b.n	7ec0 <__aeabi_ddiv+0x2d8>
    80ac:	42b7      	cmp	r7, r6
    80ae:	d1fa      	bne.n	80a6 <__aeabi_ddiv+0x4be>
    80b0:	9b01      	ldr	r3, [sp, #4]
    80b2:	4543      	cmp	r3, r8
    80b4:	d9f3      	bls.n	809e <__aeabi_ddiv+0x4b6>
    80b6:	1b37      	subs	r7, r6, r4
    80b8:	4693      	mov	fp, r2
    80ba:	e701      	b.n	7ec0 <__aeabi_ddiv+0x2d8>
    80bc:	4693      	mov	fp, r2
    80be:	e6d4      	b.n	7e6a <__aeabi_ddiv+0x282>
    80c0:	9302      	str	r3, [sp, #8]
    80c2:	e6b1      	b.n	7e28 <__aeabi_ddiv+0x240>
    80c4:	464a      	mov	r2, r9
    80c6:	1989      	adds	r1, r1, r6
    80c8:	3a01      	subs	r2, #1
    80ca:	428e      	cmp	r6, r1
    80cc:	d918      	bls.n	8100 <__aeabi_ddiv+0x518>
    80ce:	4691      	mov	r9, r2
    80d0:	4281      	cmp	r1, r0
    80d2:	d000      	beq.n	80d6 <__aeabi_ddiv+0x4ee>
    80d4:	e761      	b.n	7f9a <__aeabi_ddiv+0x3b2>
    80d6:	9a01      	ldr	r2, [sp, #4]
    80d8:	429a      	cmp	r2, r3
    80da:	d000      	beq.n	80de <__aeabi_ddiv+0x4f6>
    80dc:	e75d      	b.n	7f9a <__aeabi_ddiv+0x3b2>
    80de:	e760      	b.n	7fa2 <__aeabi_ddiv+0x3ba>
    80e0:	4f4f      	ldr	r7, [pc, #316]	; (8220 <__aeabi_ddiv+0x638>)
    80e2:	1b7f      	subs	r7, r7, r5
    80e4:	2f38      	cmp	r7, #56	; 0x38
    80e6:	dd13      	ble.n	8110 <__aeabi_ddiv+0x528>
    80e8:	2201      	movs	r2, #1
    80ea:	4653      	mov	r3, sl
    80ec:	401a      	ands	r2, r3
    80ee:	e64f      	b.n	7d90 <__aeabi_ddiv+0x1a8>
    80f0:	2301      	movs	r3, #1
    80f2:	425b      	negs	r3, r3
    80f4:	4699      	mov	r9, r3
    80f6:	e754      	b.n	7fa2 <__aeabi_ddiv+0x3ba>
    80f8:	9302      	str	r3, [sp, #8]
    80fa:	e708      	b.n	7f0e <__aeabi_ddiv+0x326>
    80fc:	9303      	str	r3, [sp, #12]
    80fe:	e727      	b.n	7f50 <__aeabi_ddiv+0x368>
    8100:	4288      	cmp	r0, r1
    8102:	d83c      	bhi.n	817e <__aeabi_ddiv+0x596>
    8104:	d074      	beq.n	81f0 <__aeabi_ddiv+0x608>
    8106:	4691      	mov	r9, r2
    8108:	e747      	b.n	7f9a <__aeabi_ddiv+0x3b2>
    810a:	9b01      	ldr	r3, [sp, #4]
    810c:	469a      	mov	sl, r3
    810e:	e748      	b.n	7fa2 <__aeabi_ddiv+0x3ba>
    8110:	2f1f      	cmp	r7, #31
    8112:	dc44      	bgt.n	819e <__aeabi_ddiv+0x5b6>
    8114:	4b43      	ldr	r3, [pc, #268]	; (8224 <__aeabi_ddiv+0x63c>)
    8116:	464a      	mov	r2, r9
    8118:	469c      	mov	ip, r3
    811a:	465b      	mov	r3, fp
    811c:	4465      	add	r5, ip
    811e:	40fa      	lsrs	r2, r7
    8120:	40ab      	lsls	r3, r5
    8122:	4313      	orrs	r3, r2
    8124:	464a      	mov	r2, r9
    8126:	40aa      	lsls	r2, r5
    8128:	1c15      	adds	r5, r2, #0
    812a:	1e6a      	subs	r2, r5, #1
    812c:	4195      	sbcs	r5, r2
    812e:	465a      	mov	r2, fp
    8130:	40fa      	lsrs	r2, r7
    8132:	432b      	orrs	r3, r5
    8134:	1c17      	adds	r7, r2, #0
    8136:	075a      	lsls	r2, r3, #29
    8138:	d009      	beq.n	814e <__aeabi_ddiv+0x566>
    813a:	220f      	movs	r2, #15
    813c:	401a      	ands	r2, r3
    813e:	2a04      	cmp	r2, #4
    8140:	d005      	beq.n	814e <__aeabi_ddiv+0x566>
    8142:	1d1a      	adds	r2, r3, #4
    8144:	429a      	cmp	r2, r3
    8146:	419b      	sbcs	r3, r3
    8148:	425b      	negs	r3, r3
    814a:	18ff      	adds	r7, r7, r3
    814c:	1c13      	adds	r3, r2, #0
    814e:	023a      	lsls	r2, r7, #8
    8150:	d53e      	bpl.n	81d0 <__aeabi_ddiv+0x5e8>
    8152:	4653      	mov	r3, sl
    8154:	2201      	movs	r2, #1
    8156:	2100      	movs	r1, #0
    8158:	401a      	ands	r2, r3
    815a:	2700      	movs	r7, #0
    815c:	2301      	movs	r3, #1
    815e:	4689      	mov	r9, r1
    8160:	e5aa      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    8162:	2302      	movs	r3, #2
    8164:	425b      	negs	r3, r3
    8166:	469c      	mov	ip, r3
    8168:	9a01      	ldr	r2, [sp, #4]
    816a:	44e3      	add	fp, ip
    816c:	4694      	mov	ip, r2
    816e:	44e0      	add	r8, ip
    8170:	4590      	cmp	r8, r2
    8172:	419b      	sbcs	r3, r3
    8174:	425b      	negs	r3, r3
    8176:	199b      	adds	r3, r3, r6
    8178:	19df      	adds	r7, r3, r7
    817a:	1b3f      	subs	r7, r7, r4
    817c:	e6a0      	b.n	7ec0 <__aeabi_ddiv+0x2d8>
    817e:	9f01      	ldr	r7, [sp, #4]
    8180:	464a      	mov	r2, r9
    8182:	007c      	lsls	r4, r7, #1
    8184:	42bc      	cmp	r4, r7
    8186:	41bf      	sbcs	r7, r7
    8188:	427f      	negs	r7, r7
    818a:	19bf      	adds	r7, r7, r6
    818c:	3a02      	subs	r2, #2
    818e:	19c9      	adds	r1, r1, r7
    8190:	9401      	str	r4, [sp, #4]
    8192:	e79c      	b.n	80ce <__aeabi_ddiv+0x4e6>
    8194:	2b00      	cmp	r3, #0
    8196:	d195      	bne.n	80c4 <__aeabi_ddiv+0x4dc>
    8198:	2200      	movs	r2, #0
    819a:	9201      	str	r2, [sp, #4]
    819c:	e79b      	b.n	80d6 <__aeabi_ddiv+0x4ee>
    819e:	465a      	mov	r2, fp
    81a0:	4b21      	ldr	r3, [pc, #132]	; (8228 <__aeabi_ddiv+0x640>)
    81a2:	1b5b      	subs	r3, r3, r5
    81a4:	40da      	lsrs	r2, r3
    81a6:	2f20      	cmp	r7, #32
    81a8:	d027      	beq.n	81fa <__aeabi_ddiv+0x612>
    81aa:	4b20      	ldr	r3, [pc, #128]	; (822c <__aeabi_ddiv+0x644>)
    81ac:	469c      	mov	ip, r3
    81ae:	465b      	mov	r3, fp
    81b0:	4465      	add	r5, ip
    81b2:	40ab      	lsls	r3, r5
    81b4:	4649      	mov	r1, r9
    81b6:	430b      	orrs	r3, r1
    81b8:	1e59      	subs	r1, r3, #1
    81ba:	418b      	sbcs	r3, r1
    81bc:	4313      	orrs	r3, r2
    81be:	2207      	movs	r2, #7
    81c0:	2700      	movs	r7, #0
    81c2:	401a      	ands	r2, r3
    81c4:	d007      	beq.n	81d6 <__aeabi_ddiv+0x5ee>
    81c6:	220f      	movs	r2, #15
    81c8:	2700      	movs	r7, #0
    81ca:	401a      	ands	r2, r3
    81cc:	2a04      	cmp	r2, #4
    81ce:	d1b8      	bne.n	8142 <__aeabi_ddiv+0x55a>
    81d0:	077a      	lsls	r2, r7, #29
    81d2:	027f      	lsls	r7, r7, #9
    81d4:	0b3f      	lsrs	r7, r7, #12
    81d6:	08db      	lsrs	r3, r3, #3
    81d8:	4313      	orrs	r3, r2
    81da:	4699      	mov	r9, r3
    81dc:	2201      	movs	r2, #1
    81de:	4653      	mov	r3, sl
    81e0:	401a      	ands	r2, r3
    81e2:	2300      	movs	r3, #0
    81e4:	e568      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    81e6:	4541      	cmp	r1, r8
    81e8:	d8bb      	bhi.n	8162 <__aeabi_ddiv+0x57a>
    81ea:	4693      	mov	fp, r2
    81ec:	2700      	movs	r7, #0
    81ee:	e667      	b.n	7ec0 <__aeabi_ddiv+0x2d8>
    81f0:	9c01      	ldr	r4, [sp, #4]
    81f2:	429c      	cmp	r4, r3
    81f4:	d3c3      	bcc.n	817e <__aeabi_ddiv+0x596>
    81f6:	4691      	mov	r9, r2
    81f8:	e76d      	b.n	80d6 <__aeabi_ddiv+0x4ee>
    81fa:	2300      	movs	r3, #0
    81fc:	e7da      	b.n	81b4 <__aeabi_ddiv+0x5cc>
    81fe:	2780      	movs	r7, #128	; 0x80
    8200:	465b      	mov	r3, fp
    8202:	033f      	lsls	r7, r7, #12
    8204:	431f      	orrs	r7, r3
    8206:	033f      	lsls	r7, r7, #12
    8208:	0b3f      	lsrs	r7, r7, #12
    820a:	9a01      	ldr	r2, [sp, #4]
    820c:	4b03      	ldr	r3, [pc, #12]	; (821c <__aeabi_ddiv+0x634>)
    820e:	e553      	b.n	7cb8 <__aeabi_ddiv+0xd0>
    8210:	000003ff 	.word	0x000003ff
    8214:	feffffff 	.word	0xfeffffff
    8218:	000007fe 	.word	0x000007fe
    821c:	000007ff 	.word	0x000007ff
    8220:	fffffc02 	.word	0xfffffc02
    8224:	0000041e 	.word	0x0000041e
    8228:	fffffbe2 	.word	0xfffffbe2
    822c:	0000043e 	.word	0x0000043e

00008230 <__aeabi_dmul>:
    8230:	b5f0      	push	{r4, r5, r6, r7, lr}
    8232:	465f      	mov	r7, fp
    8234:	4656      	mov	r6, sl
    8236:	464d      	mov	r5, r9
    8238:	4644      	mov	r4, r8
    823a:	b4f0      	push	{r4, r5, r6, r7}
    823c:	1c05      	adds	r5, r0, #0
    823e:	1c06      	adds	r6, r0, #0
    8240:	0308      	lsls	r0, r1, #12
    8242:	b087      	sub	sp, #28
    8244:	4699      	mov	r9, r3
    8246:	004f      	lsls	r7, r1, #1
    8248:	0b03      	lsrs	r3, r0, #12
    824a:	0fcc      	lsrs	r4, r1, #31
    824c:	4692      	mov	sl, r2
    824e:	469b      	mov	fp, r3
    8250:	0d7f      	lsrs	r7, r7, #21
    8252:	9401      	str	r4, [sp, #4]
    8254:	d067      	beq.n	8326 <__aeabi_dmul+0xf6>
    8256:	4b6c      	ldr	r3, [pc, #432]	; (8408 <__aeabi_dmul+0x1d8>)
    8258:	429f      	cmp	r7, r3
    825a:	d036      	beq.n	82ca <__aeabi_dmul+0x9a>
    825c:	2080      	movs	r0, #128	; 0x80
    825e:	465b      	mov	r3, fp
    8260:	0340      	lsls	r0, r0, #13
    8262:	4318      	orrs	r0, r3
    8264:	00c0      	lsls	r0, r0, #3
    8266:	0f6b      	lsrs	r3, r5, #29
    8268:	4318      	orrs	r0, r3
    826a:	4b68      	ldr	r3, [pc, #416]	; (840c <__aeabi_dmul+0x1dc>)
    826c:	4683      	mov	fp, r0
    826e:	469c      	mov	ip, r3
    8270:	2300      	movs	r3, #0
    8272:	4698      	mov	r8, r3
    8274:	00ee      	lsls	r6, r5, #3
    8276:	4467      	add	r7, ip
    8278:	9300      	str	r3, [sp, #0]
    827a:	464b      	mov	r3, r9
    827c:	4649      	mov	r1, r9
    827e:	031d      	lsls	r5, r3, #12
    8280:	0fc9      	lsrs	r1, r1, #31
    8282:	005b      	lsls	r3, r3, #1
    8284:	4652      	mov	r2, sl
    8286:	0b2d      	lsrs	r5, r5, #12
    8288:	0d5b      	lsrs	r3, r3, #21
    828a:	4689      	mov	r9, r1
    828c:	d100      	bne.n	8290 <__aeabi_dmul+0x60>
    828e:	e06e      	b.n	836e <__aeabi_dmul+0x13e>
    8290:	495d      	ldr	r1, [pc, #372]	; (8408 <__aeabi_dmul+0x1d8>)
    8292:	428b      	cmp	r3, r1
    8294:	d064      	beq.n	8360 <__aeabi_dmul+0x130>
    8296:	2080      	movs	r0, #128	; 0x80
    8298:	495c      	ldr	r1, [pc, #368]	; (840c <__aeabi_dmul+0x1dc>)
    829a:	0340      	lsls	r0, r0, #13
    829c:	468c      	mov	ip, r1
    829e:	2100      	movs	r1, #0
    82a0:	4305      	orrs	r5, r0
    82a2:	00ed      	lsls	r5, r5, #3
    82a4:	0f50      	lsrs	r0, r2, #29
    82a6:	4305      	orrs	r5, r0
    82a8:	00d2      	lsls	r2, r2, #3
    82aa:	4463      	add	r3, ip
    82ac:	4648      	mov	r0, r9
    82ae:	18ff      	adds	r7, r7, r3
    82b0:	1c7b      	adds	r3, r7, #1
    82b2:	469a      	mov	sl, r3
    82b4:	9b00      	ldr	r3, [sp, #0]
    82b6:	4060      	eors	r0, r4
    82b8:	9002      	str	r0, [sp, #8]
    82ba:	430b      	orrs	r3, r1
    82bc:	2b0f      	cmp	r3, #15
    82be:	d900      	bls.n	82c2 <__aeabi_dmul+0x92>
    82c0:	e0ac      	b.n	841c <__aeabi_dmul+0x1ec>
    82c2:	4853      	ldr	r0, [pc, #332]	; (8410 <__aeabi_dmul+0x1e0>)
    82c4:	009b      	lsls	r3, r3, #2
    82c6:	58c3      	ldr	r3, [r0, r3]
    82c8:	469f      	mov	pc, r3
    82ca:	465b      	mov	r3, fp
    82cc:	431d      	orrs	r5, r3
    82ce:	d000      	beq.n	82d2 <__aeabi_dmul+0xa2>
    82d0:	e082      	b.n	83d8 <__aeabi_dmul+0x1a8>
    82d2:	2308      	movs	r3, #8
    82d4:	9300      	str	r3, [sp, #0]
    82d6:	2300      	movs	r3, #0
    82d8:	469b      	mov	fp, r3
    82da:	3302      	adds	r3, #2
    82dc:	2600      	movs	r6, #0
    82de:	4698      	mov	r8, r3
    82e0:	e7cb      	b.n	827a <__aeabi_dmul+0x4a>
    82e2:	9b02      	ldr	r3, [sp, #8]
    82e4:	9301      	str	r3, [sp, #4]
    82e6:	4643      	mov	r3, r8
    82e8:	2b02      	cmp	r3, #2
    82ea:	d159      	bne.n	83a0 <__aeabi_dmul+0x170>
    82ec:	2401      	movs	r4, #1
    82ee:	2500      	movs	r5, #0
    82f0:	2600      	movs	r6, #0
    82f2:	9b01      	ldr	r3, [sp, #4]
    82f4:	401c      	ands	r4, r3
    82f6:	4b44      	ldr	r3, [pc, #272]	; (8408 <__aeabi_dmul+0x1d8>)
    82f8:	2100      	movs	r1, #0
    82fa:	032d      	lsls	r5, r5, #12
    82fc:	0d0a      	lsrs	r2, r1, #20
    82fe:	0512      	lsls	r2, r2, #20
    8300:	0b2d      	lsrs	r5, r5, #12
    8302:	4315      	orrs	r5, r2
    8304:	4a43      	ldr	r2, [pc, #268]	; (8414 <__aeabi_dmul+0x1e4>)
    8306:	051b      	lsls	r3, r3, #20
    8308:	4015      	ands	r5, r2
    830a:	431d      	orrs	r5, r3
    830c:	006d      	lsls	r5, r5, #1
    830e:	07e4      	lsls	r4, r4, #31
    8310:	086d      	lsrs	r5, r5, #1
    8312:	4325      	orrs	r5, r4
    8314:	1c30      	adds	r0, r6, #0
    8316:	1c29      	adds	r1, r5, #0
    8318:	b007      	add	sp, #28
    831a:	bc3c      	pop	{r2, r3, r4, r5}
    831c:	4690      	mov	r8, r2
    831e:	4699      	mov	r9, r3
    8320:	46a2      	mov	sl, r4
    8322:	46ab      	mov	fp, r5
    8324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8326:	432b      	orrs	r3, r5
    8328:	d04e      	beq.n	83c8 <__aeabi_dmul+0x198>
    832a:	465b      	mov	r3, fp
    832c:	2b00      	cmp	r3, #0
    832e:	d100      	bne.n	8332 <__aeabi_dmul+0x102>
    8330:	e185      	b.n	863e <__aeabi_dmul+0x40e>
    8332:	4658      	mov	r0, fp
    8334:	f000 fdf8 	bl	8f28 <__clzsi2>
    8338:	1c02      	adds	r2, r0, #0
    833a:	2328      	movs	r3, #40	; 0x28
    833c:	1c29      	adds	r1, r5, #0
    833e:	1a9b      	subs	r3, r3, r2
    8340:	1c16      	adds	r6, r2, #0
    8342:	4658      	mov	r0, fp
    8344:	40d9      	lsrs	r1, r3
    8346:	3e08      	subs	r6, #8
    8348:	40b0      	lsls	r0, r6
    834a:	1c0b      	adds	r3, r1, #0
    834c:	40b5      	lsls	r5, r6
    834e:	4303      	orrs	r3, r0
    8350:	469b      	mov	fp, r3
    8352:	1c2e      	adds	r6, r5, #0
    8354:	2300      	movs	r3, #0
    8356:	4f30      	ldr	r7, [pc, #192]	; (8418 <__aeabi_dmul+0x1e8>)
    8358:	9300      	str	r3, [sp, #0]
    835a:	1abf      	subs	r7, r7, r2
    835c:	4698      	mov	r8, r3
    835e:	e78c      	b.n	827a <__aeabi_dmul+0x4a>
    8360:	4651      	mov	r1, sl
    8362:	4329      	orrs	r1, r5
    8364:	d12e      	bne.n	83c4 <__aeabi_dmul+0x194>
    8366:	2500      	movs	r5, #0
    8368:	2200      	movs	r2, #0
    836a:	2102      	movs	r1, #2
    836c:	e79e      	b.n	82ac <__aeabi_dmul+0x7c>
    836e:	4651      	mov	r1, sl
    8370:	4329      	orrs	r1, r5
    8372:	d023      	beq.n	83bc <__aeabi_dmul+0x18c>
    8374:	2d00      	cmp	r5, #0
    8376:	d100      	bne.n	837a <__aeabi_dmul+0x14a>
    8378:	e154      	b.n	8624 <__aeabi_dmul+0x3f4>
    837a:	1c28      	adds	r0, r5, #0
    837c:	f000 fdd4 	bl	8f28 <__clzsi2>
    8380:	1c03      	adds	r3, r0, #0
    8382:	2128      	movs	r1, #40	; 0x28
    8384:	4650      	mov	r0, sl
    8386:	1ac9      	subs	r1, r1, r3
    8388:	1c1a      	adds	r2, r3, #0
    838a:	40c8      	lsrs	r0, r1
    838c:	4651      	mov	r1, sl
    838e:	3a08      	subs	r2, #8
    8390:	4091      	lsls	r1, r2
    8392:	4095      	lsls	r5, r2
    8394:	1c0a      	adds	r2, r1, #0
    8396:	4305      	orrs	r5, r0
    8398:	481f      	ldr	r0, [pc, #124]	; (8418 <__aeabi_dmul+0x1e8>)
    839a:	2100      	movs	r1, #0
    839c:	1ac3      	subs	r3, r0, r3
    839e:	e785      	b.n	82ac <__aeabi_dmul+0x7c>
    83a0:	2b03      	cmp	r3, #3
    83a2:	d100      	bne.n	83a6 <__aeabi_dmul+0x176>
    83a4:	e1c2      	b.n	872c <__aeabi_dmul+0x4fc>
    83a6:	2b01      	cmp	r3, #1
    83a8:	d000      	beq.n	83ac <__aeabi_dmul+0x17c>
    83aa:	e16d      	b.n	8688 <__aeabi_dmul+0x458>
    83ac:	4644      	mov	r4, r8
    83ae:	9b01      	ldr	r3, [sp, #4]
    83b0:	2500      	movs	r5, #0
    83b2:	401c      	ands	r4, r3
    83b4:	b2e4      	uxtb	r4, r4
    83b6:	2300      	movs	r3, #0
    83b8:	2600      	movs	r6, #0
    83ba:	e79d      	b.n	82f8 <__aeabi_dmul+0xc8>
    83bc:	2500      	movs	r5, #0
    83be:	2200      	movs	r2, #0
    83c0:	2101      	movs	r1, #1
    83c2:	e773      	b.n	82ac <__aeabi_dmul+0x7c>
    83c4:	2103      	movs	r1, #3
    83c6:	e771      	b.n	82ac <__aeabi_dmul+0x7c>
    83c8:	2304      	movs	r3, #4
    83ca:	9300      	str	r3, [sp, #0]
    83cc:	2300      	movs	r3, #0
    83ce:	469b      	mov	fp, r3
    83d0:	3301      	adds	r3, #1
    83d2:	2600      	movs	r6, #0
    83d4:	4698      	mov	r8, r3
    83d6:	e750      	b.n	827a <__aeabi_dmul+0x4a>
    83d8:	230c      	movs	r3, #12
    83da:	9300      	str	r3, [sp, #0]
    83dc:	3b09      	subs	r3, #9
    83de:	4698      	mov	r8, r3
    83e0:	e74b      	b.n	827a <__aeabi_dmul+0x4a>
    83e2:	2580      	movs	r5, #128	; 0x80
    83e4:	2400      	movs	r4, #0
    83e6:	032d      	lsls	r5, r5, #12
    83e8:	2600      	movs	r6, #0
    83ea:	4b07      	ldr	r3, [pc, #28]	; (8408 <__aeabi_dmul+0x1d8>)
    83ec:	e784      	b.n	82f8 <__aeabi_dmul+0xc8>
    83ee:	464b      	mov	r3, r9
    83f0:	46ab      	mov	fp, r5
    83f2:	1c16      	adds	r6, r2, #0
    83f4:	9301      	str	r3, [sp, #4]
    83f6:	4688      	mov	r8, r1
    83f8:	e775      	b.n	82e6 <__aeabi_dmul+0xb6>
    83fa:	9b02      	ldr	r3, [sp, #8]
    83fc:	46ab      	mov	fp, r5
    83fe:	1c16      	adds	r6, r2, #0
    8400:	9301      	str	r3, [sp, #4]
    8402:	4688      	mov	r8, r1
    8404:	e76f      	b.n	82e6 <__aeabi_dmul+0xb6>
    8406:	46c0      	nop			; (mov r8, r8)
    8408:	000007ff 	.word	0x000007ff
    840c:	fffffc01 	.word	0xfffffc01
    8410:	00009104 	.word	0x00009104
    8414:	800fffff 	.word	0x800fffff
    8418:	fffffc0d 	.word	0xfffffc0d
    841c:	0c33      	lsrs	r3, r6, #16
    841e:	0436      	lsls	r6, r6, #16
    8420:	0c36      	lsrs	r6, r6, #16
    8422:	469c      	mov	ip, r3
    8424:	1c33      	adds	r3, r6, #0
    8426:	0c14      	lsrs	r4, r2, #16
    8428:	0412      	lsls	r2, r2, #16
    842a:	0c12      	lsrs	r2, r2, #16
    842c:	4353      	muls	r3, r2
    842e:	4698      	mov	r8, r3
    8430:	4663      	mov	r3, ip
    8432:	4353      	muls	r3, r2
    8434:	4699      	mov	r9, r3
    8436:	4663      	mov	r3, ip
    8438:	4363      	muls	r3, r4
    843a:	9301      	str	r3, [sp, #4]
    843c:	1c33      	adds	r3, r6, #0
    843e:	4641      	mov	r1, r8
    8440:	4363      	muls	r3, r4
    8442:	0c09      	lsrs	r1, r1, #16
    8444:	444b      	add	r3, r9
    8446:	185b      	adds	r3, r3, r1
    8448:	4599      	cmp	r9, r3
    844a:	d905      	bls.n	8458 <__aeabi_dmul+0x228>
    844c:	2080      	movs	r0, #128	; 0x80
    844e:	0240      	lsls	r0, r0, #9
    8450:	4681      	mov	r9, r0
    8452:	9901      	ldr	r1, [sp, #4]
    8454:	4449      	add	r1, r9
    8456:	9101      	str	r1, [sp, #4]
    8458:	0c19      	lsrs	r1, r3, #16
    845a:	9103      	str	r1, [sp, #12]
    845c:	4641      	mov	r1, r8
    845e:	0409      	lsls	r1, r1, #16
    8460:	0c09      	lsrs	r1, r1, #16
    8462:	041b      	lsls	r3, r3, #16
    8464:	185b      	adds	r3, r3, r1
    8466:	9304      	str	r3, [sp, #16]
    8468:	0c2b      	lsrs	r3, r5, #16
    846a:	4698      	mov	r8, r3
    846c:	1c33      	adds	r3, r6, #0
    846e:	042d      	lsls	r5, r5, #16
    8470:	0c29      	lsrs	r1, r5, #16
    8472:	434b      	muls	r3, r1
    8474:	4660      	mov	r0, ip
    8476:	9300      	str	r3, [sp, #0]
    8478:	4643      	mov	r3, r8
    847a:	4665      	mov	r5, ip
    847c:	4358      	muls	r0, r3
    847e:	435e      	muls	r6, r3
    8480:	9b00      	ldr	r3, [sp, #0]
    8482:	434d      	muls	r5, r1
    8484:	0c1b      	lsrs	r3, r3, #16
    8486:	4699      	mov	r9, r3
    8488:	19ae      	adds	r6, r5, r6
    848a:	444e      	add	r6, r9
    848c:	4684      	mov	ip, r0
    848e:	42b5      	cmp	r5, r6
    8490:	d903      	bls.n	849a <__aeabi_dmul+0x26a>
    8492:	2380      	movs	r3, #128	; 0x80
    8494:	025b      	lsls	r3, r3, #9
    8496:	4699      	mov	r9, r3
    8498:	44cc      	add	ip, r9
    849a:	0c35      	lsrs	r5, r6, #16
    849c:	1c2b      	adds	r3, r5, #0
    849e:	9803      	ldr	r0, [sp, #12]
    84a0:	4463      	add	r3, ip
    84a2:	4684      	mov	ip, r0
    84a4:	9305      	str	r3, [sp, #20]
    84a6:	9b00      	ldr	r3, [sp, #0]
    84a8:	0436      	lsls	r6, r6, #16
    84aa:	041b      	lsls	r3, r3, #16
    84ac:	0c1b      	lsrs	r3, r3, #16
    84ae:	18f3      	adds	r3, r6, r3
    84b0:	449c      	add	ip, r3
    84b2:	4660      	mov	r0, ip
    84b4:	9003      	str	r0, [sp, #12]
    84b6:	4658      	mov	r0, fp
    84b8:	0405      	lsls	r5, r0, #16
    84ba:	0c06      	lsrs	r6, r0, #16
    84bc:	0c28      	lsrs	r0, r5, #16
    84be:	4684      	mov	ip, r0
    84c0:	4350      	muls	r0, r2
    84c2:	1c35      	adds	r5, r6, #0
    84c4:	4681      	mov	r9, r0
    84c6:	4660      	mov	r0, ip
    84c8:	4365      	muls	r5, r4
    84ca:	4344      	muls	r4, r0
    84cc:	4648      	mov	r0, r9
    84ce:	0c00      	lsrs	r0, r0, #16
    84d0:	4683      	mov	fp, r0
    84d2:	4372      	muls	r2, r6
    84d4:	1914      	adds	r4, r2, r4
    84d6:	445c      	add	r4, fp
    84d8:	42a2      	cmp	r2, r4
    84da:	d903      	bls.n	84e4 <__aeabi_dmul+0x2b4>
    84dc:	2280      	movs	r2, #128	; 0x80
    84de:	0252      	lsls	r2, r2, #9
    84e0:	4693      	mov	fp, r2
    84e2:	445d      	add	r5, fp
    84e4:	0c22      	lsrs	r2, r4, #16
    84e6:	18ad      	adds	r5, r5, r2
    84e8:	464a      	mov	r2, r9
    84ea:	0412      	lsls	r2, r2, #16
    84ec:	0c12      	lsrs	r2, r2, #16
    84ee:	0424      	lsls	r4, r4, #16
    84f0:	4640      	mov	r0, r8
    84f2:	18a4      	adds	r4, r4, r2
    84f4:	4662      	mov	r2, ip
    84f6:	434a      	muls	r2, r1
    84f8:	4371      	muls	r1, r6
    84fa:	4346      	muls	r6, r0
    84fc:	4660      	mov	r0, ip
    84fe:	9600      	str	r6, [sp, #0]
    8500:	4646      	mov	r6, r8
    8502:	4370      	muls	r0, r6
    8504:	4680      	mov	r8, r0
    8506:	0c10      	lsrs	r0, r2, #16
    8508:	4684      	mov	ip, r0
    850a:	4488      	add	r8, r1
    850c:	44e0      	add	r8, ip
    850e:	4541      	cmp	r1, r8
    8510:	d905      	bls.n	851e <__aeabi_dmul+0x2ee>
    8512:	2180      	movs	r1, #128	; 0x80
    8514:	0249      	lsls	r1, r1, #9
    8516:	468c      	mov	ip, r1
    8518:	9900      	ldr	r1, [sp, #0]
    851a:	4461      	add	r1, ip
    851c:	9100      	str	r1, [sp, #0]
    851e:	9801      	ldr	r0, [sp, #4]
    8520:	9903      	ldr	r1, [sp, #12]
    8522:	4684      	mov	ip, r0
    8524:	4461      	add	r1, ip
    8526:	4299      	cmp	r1, r3
    8528:	419b      	sbcs	r3, r3
    852a:	425b      	negs	r3, r3
    852c:	4699      	mov	r9, r3
    852e:	9805      	ldr	r0, [sp, #20]
    8530:	4643      	mov	r3, r8
    8532:	4684      	mov	ip, r0
    8534:	0412      	lsls	r2, r2, #16
    8536:	0c12      	lsrs	r2, r2, #16
    8538:	041b      	lsls	r3, r3, #16
    853a:	189b      	adds	r3, r3, r2
    853c:	4463      	add	r3, ip
    853e:	469c      	mov	ip, r3
    8540:	46ab      	mov	fp, r5
    8542:	4283      	cmp	r3, r0
    8544:	419b      	sbcs	r3, r3
    8546:	4640      	mov	r0, r8
    8548:	190a      	adds	r2, r1, r4
    854a:	44cc      	add	ip, r9
    854c:	42a2      	cmp	r2, r4
    854e:	4189      	sbcs	r1, r1
    8550:	44e3      	add	fp, ip
    8552:	45cc      	cmp	ip, r9
    8554:	41b6      	sbcs	r6, r6
    8556:	465c      	mov	r4, fp
    8558:	0c00      	lsrs	r0, r0, #16
    855a:	4680      	mov	r8, r0
    855c:	4249      	negs	r1, r1
    855e:	4276      	negs	r6, r6
    8560:	425b      	negs	r3, r3
    8562:	1864      	adds	r4, r4, r1
    8564:	4333      	orrs	r3, r6
    8566:	4498      	add	r8, r3
    8568:	428c      	cmp	r4, r1
    856a:	4189      	sbcs	r1, r1
    856c:	45ab      	cmp	fp, r5
    856e:	419b      	sbcs	r3, r3
    8570:	4249      	negs	r1, r1
    8572:	425b      	negs	r3, r3
    8574:	4319      	orrs	r1, r3
    8576:	1c0d      	adds	r5, r1, #0
    8578:	9b00      	ldr	r3, [sp, #0]
    857a:	4445      	add	r5, r8
    857c:	18ee      	adds	r6, r5, r3
    857e:	0276      	lsls	r6, r6, #9
    8580:	0de5      	lsrs	r5, r4, #23
    8582:	432e      	orrs	r6, r5
    8584:	46b3      	mov	fp, r6
    8586:	9b04      	ldr	r3, [sp, #16]
    8588:	0256      	lsls	r6, r2, #9
    858a:	431e      	orrs	r6, r3
    858c:	1e73      	subs	r3, r6, #1
    858e:	419e      	sbcs	r6, r3
    8590:	465b      	mov	r3, fp
    8592:	0dd2      	lsrs	r2, r2, #23
    8594:	4332      	orrs	r2, r6
    8596:	0266      	lsls	r6, r4, #9
    8598:	4316      	orrs	r6, r2
    859a:	01db      	lsls	r3, r3, #7
    859c:	d50a      	bpl.n	85b4 <__aeabi_dmul+0x384>
    859e:	2301      	movs	r3, #1
    85a0:	4033      	ands	r3, r6
    85a2:	0876      	lsrs	r6, r6, #1
    85a4:	431e      	orrs	r6, r3
    85a6:	465b      	mov	r3, fp
    85a8:	07db      	lsls	r3, r3, #31
    85aa:	431e      	orrs	r6, r3
    85ac:	465b      	mov	r3, fp
    85ae:	085b      	lsrs	r3, r3, #1
    85b0:	469b      	mov	fp, r3
    85b2:	4657      	mov	r7, sl
    85b4:	4b63      	ldr	r3, [pc, #396]	; (8744 <__aeabi_dmul+0x514>)
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	2b00      	cmp	r3, #0
    85ba:	dd5a      	ble.n	8672 <__aeabi_dmul+0x442>
    85bc:	0772      	lsls	r2, r6, #29
    85be:	d009      	beq.n	85d4 <__aeabi_dmul+0x3a4>
    85c0:	220f      	movs	r2, #15
    85c2:	4032      	ands	r2, r6
    85c4:	2a04      	cmp	r2, #4
    85c6:	d005      	beq.n	85d4 <__aeabi_dmul+0x3a4>
    85c8:	1d32      	adds	r2, r6, #4
    85ca:	42b2      	cmp	r2, r6
    85cc:	41b6      	sbcs	r6, r6
    85ce:	4276      	negs	r6, r6
    85d0:	44b3      	add	fp, r6
    85d2:	1c16      	adds	r6, r2, #0
    85d4:	465a      	mov	r2, fp
    85d6:	01d2      	lsls	r2, r2, #7
    85d8:	d506      	bpl.n	85e8 <__aeabi_dmul+0x3b8>
    85da:	465a      	mov	r2, fp
    85dc:	4b5a      	ldr	r3, [pc, #360]	; (8748 <__aeabi_dmul+0x518>)
    85de:	401a      	ands	r2, r3
    85e0:	2380      	movs	r3, #128	; 0x80
    85e2:	4693      	mov	fp, r2
    85e4:	00db      	lsls	r3, r3, #3
    85e6:	18fb      	adds	r3, r7, r3
    85e8:	4a58      	ldr	r2, [pc, #352]	; (874c <__aeabi_dmul+0x51c>)
    85ea:	4293      	cmp	r3, r2
    85ec:	dd34      	ble.n	8658 <__aeabi_dmul+0x428>
    85ee:	2401      	movs	r4, #1
    85f0:	9b02      	ldr	r3, [sp, #8]
    85f2:	2500      	movs	r5, #0
    85f4:	401c      	ands	r4, r3
    85f6:	2600      	movs	r6, #0
    85f8:	4b55      	ldr	r3, [pc, #340]	; (8750 <__aeabi_dmul+0x520>)
    85fa:	e67d      	b.n	82f8 <__aeabi_dmul+0xc8>
    85fc:	2080      	movs	r0, #128	; 0x80
    85fe:	465b      	mov	r3, fp
    8600:	0300      	lsls	r0, r0, #12
    8602:	4203      	tst	r3, r0
    8604:	d008      	beq.n	8618 <__aeabi_dmul+0x3e8>
    8606:	4205      	tst	r5, r0
    8608:	d106      	bne.n	8618 <__aeabi_dmul+0x3e8>
    860a:	4305      	orrs	r5, r0
    860c:	032d      	lsls	r5, r5, #12
    860e:	0b2d      	lsrs	r5, r5, #12
    8610:	464c      	mov	r4, r9
    8612:	1c16      	adds	r6, r2, #0
    8614:	4b4e      	ldr	r3, [pc, #312]	; (8750 <__aeabi_dmul+0x520>)
    8616:	e66f      	b.n	82f8 <__aeabi_dmul+0xc8>
    8618:	465d      	mov	r5, fp
    861a:	4305      	orrs	r5, r0
    861c:	032d      	lsls	r5, r5, #12
    861e:	0b2d      	lsrs	r5, r5, #12
    8620:	4b4b      	ldr	r3, [pc, #300]	; (8750 <__aeabi_dmul+0x520>)
    8622:	e669      	b.n	82f8 <__aeabi_dmul+0xc8>
    8624:	4650      	mov	r0, sl
    8626:	f000 fc7f 	bl	8f28 <__clzsi2>
    862a:	1c03      	adds	r3, r0, #0
    862c:	3320      	adds	r3, #32
    862e:	2b27      	cmp	r3, #39	; 0x27
    8630:	dc00      	bgt.n	8634 <__aeabi_dmul+0x404>
    8632:	e6a6      	b.n	8382 <__aeabi_dmul+0x152>
    8634:	4655      	mov	r5, sl
    8636:	3808      	subs	r0, #8
    8638:	4085      	lsls	r5, r0
    863a:	2200      	movs	r2, #0
    863c:	e6ac      	b.n	8398 <__aeabi_dmul+0x168>
    863e:	1c28      	adds	r0, r5, #0
    8640:	f000 fc72 	bl	8f28 <__clzsi2>
    8644:	1c02      	adds	r2, r0, #0
    8646:	3220      	adds	r2, #32
    8648:	2a27      	cmp	r2, #39	; 0x27
    864a:	dc00      	bgt.n	864e <__aeabi_dmul+0x41e>
    864c:	e675      	b.n	833a <__aeabi_dmul+0x10a>
    864e:	3808      	subs	r0, #8
    8650:	4085      	lsls	r5, r0
    8652:	2600      	movs	r6, #0
    8654:	46ab      	mov	fp, r5
    8656:	e67d      	b.n	8354 <__aeabi_dmul+0x124>
    8658:	465a      	mov	r2, fp
    865a:	08f6      	lsrs	r6, r6, #3
    865c:	0752      	lsls	r2, r2, #29
    865e:	4316      	orrs	r6, r2
    8660:	465a      	mov	r2, fp
    8662:	2401      	movs	r4, #1
    8664:	0255      	lsls	r5, r2, #9
    8666:	9a02      	ldr	r2, [sp, #8]
    8668:	055b      	lsls	r3, r3, #21
    866a:	0b2d      	lsrs	r5, r5, #12
    866c:	0d5b      	lsrs	r3, r3, #21
    866e:	4014      	ands	r4, r2
    8670:	e642      	b.n	82f8 <__aeabi_dmul+0xc8>
    8672:	4d38      	ldr	r5, [pc, #224]	; (8754 <__aeabi_dmul+0x524>)
    8674:	1bed      	subs	r5, r5, r7
    8676:	2d38      	cmp	r5, #56	; 0x38
    8678:	dd0a      	ble.n	8690 <__aeabi_dmul+0x460>
    867a:	2401      	movs	r4, #1
    867c:	9b02      	ldr	r3, [sp, #8]
    867e:	2500      	movs	r5, #0
    8680:	401c      	ands	r4, r3
    8682:	2600      	movs	r6, #0
    8684:	2300      	movs	r3, #0
    8686:	e637      	b.n	82f8 <__aeabi_dmul+0xc8>
    8688:	9b01      	ldr	r3, [sp, #4]
    868a:	4657      	mov	r7, sl
    868c:	9302      	str	r3, [sp, #8]
    868e:	e791      	b.n	85b4 <__aeabi_dmul+0x384>
    8690:	2d1f      	cmp	r5, #31
    8692:	dc25      	bgt.n	86e0 <__aeabi_dmul+0x4b0>
    8694:	4b30      	ldr	r3, [pc, #192]	; (8758 <__aeabi_dmul+0x528>)
    8696:	1c32      	adds	r2, r6, #0
    8698:	469c      	mov	ip, r3
    869a:	4467      	add	r7, ip
    869c:	40be      	lsls	r6, r7
    869e:	465b      	mov	r3, fp
    86a0:	40bb      	lsls	r3, r7
    86a2:	1c37      	adds	r7, r6, #0
    86a4:	40ea      	lsrs	r2, r5
    86a6:	1e7e      	subs	r6, r7, #1
    86a8:	41b7      	sbcs	r7, r6
    86aa:	4313      	orrs	r3, r2
    86ac:	433b      	orrs	r3, r7
    86ae:	1c1e      	adds	r6, r3, #0
    86b0:	465b      	mov	r3, fp
    86b2:	40eb      	lsrs	r3, r5
    86b4:	1c1d      	adds	r5, r3, #0
    86b6:	0773      	lsls	r3, r6, #29
    86b8:	d009      	beq.n	86ce <__aeabi_dmul+0x49e>
    86ba:	230f      	movs	r3, #15
    86bc:	4033      	ands	r3, r6
    86be:	2b04      	cmp	r3, #4
    86c0:	d005      	beq.n	86ce <__aeabi_dmul+0x49e>
    86c2:	1d33      	adds	r3, r6, #4
    86c4:	42b3      	cmp	r3, r6
    86c6:	41b6      	sbcs	r6, r6
    86c8:	4276      	negs	r6, r6
    86ca:	19ad      	adds	r5, r5, r6
    86cc:	1c1e      	adds	r6, r3, #0
    86ce:	022b      	lsls	r3, r5, #8
    86d0:	d520      	bpl.n	8714 <__aeabi_dmul+0x4e4>
    86d2:	2401      	movs	r4, #1
    86d4:	9b02      	ldr	r3, [sp, #8]
    86d6:	2500      	movs	r5, #0
    86d8:	401c      	ands	r4, r3
    86da:	2600      	movs	r6, #0
    86dc:	2301      	movs	r3, #1
    86de:	e60b      	b.n	82f8 <__aeabi_dmul+0xc8>
    86e0:	465a      	mov	r2, fp
    86e2:	4b1e      	ldr	r3, [pc, #120]	; (875c <__aeabi_dmul+0x52c>)
    86e4:	1bdb      	subs	r3, r3, r7
    86e6:	40da      	lsrs	r2, r3
    86e8:	1c13      	adds	r3, r2, #0
    86ea:	2d20      	cmp	r5, #32
    86ec:	d01c      	beq.n	8728 <__aeabi_dmul+0x4f8>
    86ee:	4a1c      	ldr	r2, [pc, #112]	; (8760 <__aeabi_dmul+0x530>)
    86f0:	4694      	mov	ip, r2
    86f2:	465a      	mov	r2, fp
    86f4:	4467      	add	r7, ip
    86f6:	40ba      	lsls	r2, r7
    86f8:	1c17      	adds	r7, r2, #0
    86fa:	433e      	orrs	r6, r7
    86fc:	1e72      	subs	r2, r6, #1
    86fe:	4196      	sbcs	r6, r2
    8700:	431e      	orrs	r6, r3
    8702:	2307      	movs	r3, #7
    8704:	2500      	movs	r5, #0
    8706:	4033      	ands	r3, r6
    8708:	d007      	beq.n	871a <__aeabi_dmul+0x4ea>
    870a:	230f      	movs	r3, #15
    870c:	2500      	movs	r5, #0
    870e:	4033      	ands	r3, r6
    8710:	2b04      	cmp	r3, #4
    8712:	d1d6      	bne.n	86c2 <__aeabi_dmul+0x492>
    8714:	076b      	lsls	r3, r5, #29
    8716:	026d      	lsls	r5, r5, #9
    8718:	0b2d      	lsrs	r5, r5, #12
    871a:	2401      	movs	r4, #1
    871c:	08f6      	lsrs	r6, r6, #3
    871e:	431e      	orrs	r6, r3
    8720:	9b02      	ldr	r3, [sp, #8]
    8722:	401c      	ands	r4, r3
    8724:	2300      	movs	r3, #0
    8726:	e5e7      	b.n	82f8 <__aeabi_dmul+0xc8>
    8728:	2700      	movs	r7, #0
    872a:	e7e6      	b.n	86fa <__aeabi_dmul+0x4ca>
    872c:	2580      	movs	r5, #128	; 0x80
    872e:	465b      	mov	r3, fp
    8730:	2401      	movs	r4, #1
    8732:	032d      	lsls	r5, r5, #12
    8734:	431d      	orrs	r5, r3
    8736:	9b01      	ldr	r3, [sp, #4]
    8738:	032d      	lsls	r5, r5, #12
    873a:	4023      	ands	r3, r4
    873c:	1c1c      	adds	r4, r3, #0
    873e:	0b2d      	lsrs	r5, r5, #12
    8740:	4b03      	ldr	r3, [pc, #12]	; (8750 <__aeabi_dmul+0x520>)
    8742:	e5d9      	b.n	82f8 <__aeabi_dmul+0xc8>
    8744:	000003ff 	.word	0x000003ff
    8748:	feffffff 	.word	0xfeffffff
    874c:	000007fe 	.word	0x000007fe
    8750:	000007ff 	.word	0x000007ff
    8754:	fffffc02 	.word	0xfffffc02
    8758:	0000041e 	.word	0x0000041e
    875c:	fffffbe2 	.word	0xfffffbe2
    8760:	0000043e 	.word	0x0000043e

00008764 <__aeabi_dsub>:
    8764:	b5f0      	push	{r4, r5, r6, r7, lr}
    8766:	464d      	mov	r5, r9
    8768:	4644      	mov	r4, r8
    876a:	465f      	mov	r7, fp
    876c:	4656      	mov	r6, sl
    876e:	b4f0      	push	{r4, r5, r6, r7}
    8770:	1c0e      	adds	r6, r1, #0
    8772:	1c11      	adds	r1, r2, #0
    8774:	0332      	lsls	r2, r6, #12
    8776:	0a52      	lsrs	r2, r2, #9
    8778:	0f47      	lsrs	r7, r0, #29
    877a:	4317      	orrs	r7, r2
    877c:	00c5      	lsls	r5, r0, #3
    877e:	031a      	lsls	r2, r3, #12
    8780:	0058      	lsls	r0, r3, #1
    8782:	0fdb      	lsrs	r3, r3, #31
    8784:	4699      	mov	r9, r3
    8786:	0a52      	lsrs	r2, r2, #9
    8788:	0f4b      	lsrs	r3, r1, #29
    878a:	b083      	sub	sp, #12
    878c:	431a      	orrs	r2, r3
    878e:	00cb      	lsls	r3, r1, #3
    8790:	9301      	str	r3, [sp, #4]
    8792:	4bcf      	ldr	r3, [pc, #828]	; (8ad0 <__aeabi_dsub+0x36c>)
    8794:	0074      	lsls	r4, r6, #1
    8796:	0ff6      	lsrs	r6, r6, #31
    8798:	0d64      	lsrs	r4, r4, #21
    879a:	46b0      	mov	r8, r6
    879c:	0d40      	lsrs	r0, r0, #21
    879e:	4298      	cmp	r0, r3
    87a0:	d100      	bne.n	87a4 <__aeabi_dsub+0x40>
    87a2:	e0e8      	b.n	8976 <__aeabi_dsub+0x212>
    87a4:	2301      	movs	r3, #1
    87a6:	4649      	mov	r1, r9
    87a8:	4059      	eors	r1, r3
    87aa:	1c0b      	adds	r3, r1, #0
    87ac:	429e      	cmp	r6, r3
    87ae:	d100      	bne.n	87b2 <__aeabi_dsub+0x4e>
    87b0:	e0b1      	b.n	8916 <__aeabi_dsub+0x1b2>
    87b2:	1a26      	subs	r6, r4, r0
    87b4:	2e00      	cmp	r6, #0
    87b6:	dc00      	bgt.n	87ba <__aeabi_dsub+0x56>
    87b8:	e11c      	b.n	89f4 <__aeabi_dsub+0x290>
    87ba:	2800      	cmp	r0, #0
    87bc:	d142      	bne.n	8844 <__aeabi_dsub+0xe0>
    87be:	1c13      	adds	r3, r2, #0
    87c0:	9901      	ldr	r1, [sp, #4]
    87c2:	430b      	orrs	r3, r1
    87c4:	d000      	beq.n	87c8 <__aeabi_dsub+0x64>
    87c6:	e0e6      	b.n	8996 <__aeabi_dsub+0x232>
    87c8:	076b      	lsls	r3, r5, #29
    87ca:	d100      	bne.n	87ce <__aeabi_dsub+0x6a>
    87cc:	e08e      	b.n	88ec <__aeabi_dsub+0x188>
    87ce:	230f      	movs	r3, #15
    87d0:	402b      	ands	r3, r5
    87d2:	2b04      	cmp	r3, #4
    87d4:	d100      	bne.n	87d8 <__aeabi_dsub+0x74>
    87d6:	e089      	b.n	88ec <__aeabi_dsub+0x188>
    87d8:	1d2a      	adds	r2, r5, #4
    87da:	42aa      	cmp	r2, r5
    87dc:	41ad      	sbcs	r5, r5
    87de:	2380      	movs	r3, #128	; 0x80
    87e0:	2601      	movs	r6, #1
    87e2:	4641      	mov	r1, r8
    87e4:	426d      	negs	r5, r5
    87e6:	197f      	adds	r7, r7, r5
    87e8:	041b      	lsls	r3, r3, #16
    87ea:	403b      	ands	r3, r7
    87ec:	400e      	ands	r6, r1
    87ee:	1c15      	adds	r5, r2, #0
    87f0:	2b00      	cmp	r3, #0
    87f2:	d100      	bne.n	87f6 <__aeabi_dsub+0x92>
    87f4:	e083      	b.n	88fe <__aeabi_dsub+0x19a>
    87f6:	4bb6      	ldr	r3, [pc, #728]	; (8ad0 <__aeabi_dsub+0x36c>)
    87f8:	3401      	adds	r4, #1
    87fa:	429c      	cmp	r4, r3
    87fc:	d100      	bne.n	8800 <__aeabi_dsub+0x9c>
    87fe:	e116      	b.n	8a2e <__aeabi_dsub+0x2ca>
    8800:	1c3a      	adds	r2, r7, #0
    8802:	4bb4      	ldr	r3, [pc, #720]	; (8ad4 <__aeabi_dsub+0x370>)
    8804:	08ed      	lsrs	r5, r5, #3
    8806:	401a      	ands	r2, r3
    8808:	0750      	lsls	r0, r2, #29
    880a:	0564      	lsls	r4, r4, #21
    880c:	0252      	lsls	r2, r2, #9
    880e:	4305      	orrs	r5, r0
    8810:	0b12      	lsrs	r2, r2, #12
    8812:	0d64      	lsrs	r4, r4, #21
    8814:	2100      	movs	r1, #0
    8816:	0312      	lsls	r2, r2, #12
    8818:	0d0b      	lsrs	r3, r1, #20
    881a:	051b      	lsls	r3, r3, #20
    881c:	0564      	lsls	r4, r4, #21
    881e:	0b12      	lsrs	r2, r2, #12
    8820:	431a      	orrs	r2, r3
    8822:	0863      	lsrs	r3, r4, #1
    8824:	4cac      	ldr	r4, [pc, #688]	; (8ad8 <__aeabi_dsub+0x374>)
    8826:	07f6      	lsls	r6, r6, #31
    8828:	4014      	ands	r4, r2
    882a:	431c      	orrs	r4, r3
    882c:	0064      	lsls	r4, r4, #1
    882e:	0864      	lsrs	r4, r4, #1
    8830:	4334      	orrs	r4, r6
    8832:	1c28      	adds	r0, r5, #0
    8834:	1c21      	adds	r1, r4, #0
    8836:	b003      	add	sp, #12
    8838:	bc3c      	pop	{r2, r3, r4, r5}
    883a:	4690      	mov	r8, r2
    883c:	4699      	mov	r9, r3
    883e:	46a2      	mov	sl, r4
    8840:	46ab      	mov	fp, r5
    8842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8844:	4ba2      	ldr	r3, [pc, #648]	; (8ad0 <__aeabi_dsub+0x36c>)
    8846:	429c      	cmp	r4, r3
    8848:	d0be      	beq.n	87c8 <__aeabi_dsub+0x64>
    884a:	2380      	movs	r3, #128	; 0x80
    884c:	041b      	lsls	r3, r3, #16
    884e:	431a      	orrs	r2, r3
    8850:	2e38      	cmp	r6, #56	; 0x38
    8852:	dd00      	ble.n	8856 <__aeabi_dsub+0xf2>
    8854:	e103      	b.n	8a5e <__aeabi_dsub+0x2fa>
    8856:	2e1f      	cmp	r6, #31
    8858:	dd00      	ble.n	885c <__aeabi_dsub+0xf8>
    885a:	e13f      	b.n	8adc <__aeabi_dsub+0x378>
    885c:	2020      	movs	r0, #32
    885e:	1b83      	subs	r3, r0, r6
    8860:	4699      	mov	r9, r3
    8862:	1c13      	adds	r3, r2, #0
    8864:	4649      	mov	r1, r9
    8866:	408b      	lsls	r3, r1
    8868:	469c      	mov	ip, r3
    886a:	9b01      	ldr	r3, [sp, #4]
    886c:	4660      	mov	r0, ip
    886e:	40f3      	lsrs	r3, r6
    8870:	4303      	orrs	r3, r0
    8872:	9801      	ldr	r0, [sp, #4]
    8874:	40f2      	lsrs	r2, r6
    8876:	4088      	lsls	r0, r1
    8878:	1c01      	adds	r1, r0, #0
    887a:	1e48      	subs	r0, r1, #1
    887c:	4181      	sbcs	r1, r0
    887e:	430b      	orrs	r3, r1
    8880:	1aeb      	subs	r3, r5, r3
    8882:	429d      	cmp	r5, r3
    8884:	4180      	sbcs	r0, r0
    8886:	1c1d      	adds	r5, r3, #0
    8888:	1aba      	subs	r2, r7, r2
    888a:	4240      	negs	r0, r0
    888c:	1a17      	subs	r7, r2, r0
    888e:	023b      	lsls	r3, r7, #8
    8890:	d400      	bmi.n	8894 <__aeabi_dsub+0x130>
    8892:	e0a8      	b.n	89e6 <__aeabi_dsub+0x282>
    8894:	027a      	lsls	r2, r7, #9
    8896:	0a56      	lsrs	r6, r2, #9
    8898:	2e00      	cmp	r6, #0
    889a:	d100      	bne.n	889e <__aeabi_dsub+0x13a>
    889c:	e0ca      	b.n	8a34 <__aeabi_dsub+0x2d0>
    889e:	1c30      	adds	r0, r6, #0
    88a0:	f000 fb42 	bl	8f28 <__clzsi2>
    88a4:	1c03      	adds	r3, r0, #0
    88a6:	3b08      	subs	r3, #8
    88a8:	2b1f      	cmp	r3, #31
    88aa:	dd00      	ble.n	88ae <__aeabi_dsub+0x14a>
    88ac:	e0cb      	b.n	8a46 <__aeabi_dsub+0x2e2>
    88ae:	2228      	movs	r2, #40	; 0x28
    88b0:	1c29      	adds	r1, r5, #0
    88b2:	1a12      	subs	r2, r2, r0
    88b4:	40d1      	lsrs	r1, r2
    88b6:	409e      	lsls	r6, r3
    88b8:	1c0a      	adds	r2, r1, #0
    88ba:	409d      	lsls	r5, r3
    88bc:	4332      	orrs	r2, r6
    88be:	429c      	cmp	r4, r3
    88c0:	dd00      	ble.n	88c4 <__aeabi_dsub+0x160>
    88c2:	e0c8      	b.n	8a56 <__aeabi_dsub+0x2f2>
    88c4:	1b1c      	subs	r4, r3, r4
    88c6:	1c67      	adds	r7, r4, #1
    88c8:	2f1f      	cmp	r7, #31
    88ca:	dd00      	ble.n	88ce <__aeabi_dsub+0x16a>
    88cc:	e0ed      	b.n	8aaa <__aeabi_dsub+0x346>
    88ce:	231f      	movs	r3, #31
    88d0:	1c29      	adds	r1, r5, #0
    88d2:	1b1c      	subs	r4, r3, r4
    88d4:	1c13      	adds	r3, r2, #0
    88d6:	40a5      	lsls	r5, r4
    88d8:	40a3      	lsls	r3, r4
    88da:	40f9      	lsrs	r1, r7
    88dc:	1e6c      	subs	r4, r5, #1
    88de:	41a5      	sbcs	r5, r4
    88e0:	40fa      	lsrs	r2, r7
    88e2:	4319      	orrs	r1, r3
    88e4:	430d      	orrs	r5, r1
    88e6:	1c17      	adds	r7, r2, #0
    88e8:	2400      	movs	r4, #0
    88ea:	e76d      	b.n	87c8 <__aeabi_dsub+0x64>
    88ec:	2380      	movs	r3, #128	; 0x80
    88ee:	2601      	movs	r6, #1
    88f0:	4642      	mov	r2, r8
    88f2:	041b      	lsls	r3, r3, #16
    88f4:	403b      	ands	r3, r7
    88f6:	4016      	ands	r6, r2
    88f8:	2b00      	cmp	r3, #0
    88fa:	d000      	beq.n	88fe <__aeabi_dsub+0x19a>
    88fc:	e77b      	b.n	87f6 <__aeabi_dsub+0x92>
    88fe:	4b74      	ldr	r3, [pc, #464]	; (8ad0 <__aeabi_dsub+0x36c>)
    8900:	08ed      	lsrs	r5, r5, #3
    8902:	0778      	lsls	r0, r7, #29
    8904:	4305      	orrs	r5, r0
    8906:	08fa      	lsrs	r2, r7, #3
    8908:	429c      	cmp	r4, r3
    890a:	d03b      	beq.n	8984 <__aeabi_dsub+0x220>
    890c:	0312      	lsls	r2, r2, #12
    890e:	0564      	lsls	r4, r4, #21
    8910:	0b12      	lsrs	r2, r2, #12
    8912:	0d64      	lsrs	r4, r4, #21
    8914:	e77e      	b.n	8814 <__aeabi_dsub+0xb0>
    8916:	1a23      	subs	r3, r4, r0
    8918:	469a      	mov	sl, r3
    891a:	2b00      	cmp	r3, #0
    891c:	dc00      	bgt.n	8920 <__aeabi_dsub+0x1bc>
    891e:	e0a5      	b.n	8a6c <__aeabi_dsub+0x308>
    8920:	2800      	cmp	r0, #0
    8922:	d044      	beq.n	89ae <__aeabi_dsub+0x24a>
    8924:	486a      	ldr	r0, [pc, #424]	; (8ad0 <__aeabi_dsub+0x36c>)
    8926:	4284      	cmp	r4, r0
    8928:	d100      	bne.n	892c <__aeabi_dsub+0x1c8>
    892a:	e74d      	b.n	87c8 <__aeabi_dsub+0x64>
    892c:	2080      	movs	r0, #128	; 0x80
    892e:	0400      	lsls	r0, r0, #16
    8930:	4302      	orrs	r2, r0
    8932:	4653      	mov	r3, sl
    8934:	2b38      	cmp	r3, #56	; 0x38
    8936:	dc00      	bgt.n	893a <__aeabi_dsub+0x1d6>
    8938:	e11c      	b.n	8b74 <__aeabi_dsub+0x410>
    893a:	9b01      	ldr	r3, [sp, #4]
    893c:	431a      	orrs	r2, r3
    893e:	1e51      	subs	r1, r2, #1
    8940:	418a      	sbcs	r2, r1
    8942:	b2d1      	uxtb	r1, r2
    8944:	2200      	movs	r2, #0
    8946:	1949      	adds	r1, r1, r5
    8948:	42a9      	cmp	r1, r5
    894a:	4180      	sbcs	r0, r0
    894c:	1c0d      	adds	r5, r1, #0
    894e:	19d2      	adds	r2, r2, r7
    8950:	4240      	negs	r0, r0
    8952:	1817      	adds	r7, r2, r0
    8954:	023b      	lsls	r3, r7, #8
    8956:	d546      	bpl.n	89e6 <__aeabi_dsub+0x282>
    8958:	4b5d      	ldr	r3, [pc, #372]	; (8ad0 <__aeabi_dsub+0x36c>)
    895a:	3401      	adds	r4, #1
    895c:	429c      	cmp	r4, r3
    895e:	d100      	bne.n	8962 <__aeabi_dsub+0x1fe>
    8960:	e169      	b.n	8c36 <__aeabi_dsub+0x4d2>
    8962:	2001      	movs	r0, #1
    8964:	4a5b      	ldr	r2, [pc, #364]	; (8ad4 <__aeabi_dsub+0x370>)
    8966:	086b      	lsrs	r3, r5, #1
    8968:	403a      	ands	r2, r7
    896a:	4028      	ands	r0, r5
    896c:	4318      	orrs	r0, r3
    896e:	07d5      	lsls	r5, r2, #31
    8970:	4305      	orrs	r5, r0
    8972:	0857      	lsrs	r7, r2, #1
    8974:	e728      	b.n	87c8 <__aeabi_dsub+0x64>
    8976:	1c13      	adds	r3, r2, #0
    8978:	9901      	ldr	r1, [sp, #4]
    897a:	430b      	orrs	r3, r1
    897c:	d100      	bne.n	8980 <__aeabi_dsub+0x21c>
    897e:	e711      	b.n	87a4 <__aeabi_dsub+0x40>
    8980:	464b      	mov	r3, r9
    8982:	e713      	b.n	87ac <__aeabi_dsub+0x48>
    8984:	1c2b      	adds	r3, r5, #0
    8986:	4313      	orrs	r3, r2
    8988:	d051      	beq.n	8a2e <__aeabi_dsub+0x2ca>
    898a:	2380      	movs	r3, #128	; 0x80
    898c:	031b      	lsls	r3, r3, #12
    898e:	431a      	orrs	r2, r3
    8990:	0312      	lsls	r2, r2, #12
    8992:	0b12      	lsrs	r2, r2, #12
    8994:	e73e      	b.n	8814 <__aeabi_dsub+0xb0>
    8996:	3e01      	subs	r6, #1
    8998:	2e00      	cmp	r6, #0
    899a:	d000      	beq.n	899e <__aeabi_dsub+0x23a>
    899c:	e080      	b.n	8aa0 <__aeabi_dsub+0x33c>
    899e:	1a69      	subs	r1, r5, r1
    89a0:	428d      	cmp	r5, r1
    89a2:	419b      	sbcs	r3, r3
    89a4:	1aba      	subs	r2, r7, r2
    89a6:	425b      	negs	r3, r3
    89a8:	1ad7      	subs	r7, r2, r3
    89aa:	1c0d      	adds	r5, r1, #0
    89ac:	e76f      	b.n	888e <__aeabi_dsub+0x12a>
    89ae:	1c10      	adds	r0, r2, #0
    89b0:	9b01      	ldr	r3, [sp, #4]
    89b2:	4318      	orrs	r0, r3
    89b4:	d100      	bne.n	89b8 <__aeabi_dsub+0x254>
    89b6:	e707      	b.n	87c8 <__aeabi_dsub+0x64>
    89b8:	2301      	movs	r3, #1
    89ba:	425b      	negs	r3, r3
    89bc:	469c      	mov	ip, r3
    89be:	44e2      	add	sl, ip
    89c0:	4653      	mov	r3, sl
    89c2:	2b00      	cmp	r3, #0
    89c4:	d000      	beq.n	89c8 <__aeabi_dsub+0x264>
    89c6:	e102      	b.n	8bce <__aeabi_dsub+0x46a>
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	19d2      	adds	r2, r2, r7
    89cc:	1959      	adds	r1, r3, r5
    89ce:	42a9      	cmp	r1, r5
    89d0:	419b      	sbcs	r3, r3
    89d2:	425b      	negs	r3, r3
    89d4:	18d7      	adds	r7, r2, r3
    89d6:	1c0d      	adds	r5, r1, #0
    89d8:	e7bc      	b.n	8954 <__aeabi_dsub+0x1f0>
    89da:	4663      	mov	r3, ip
    89dc:	4303      	orrs	r3, r0
    89de:	d100      	bne.n	89e2 <__aeabi_dsub+0x27e>
    89e0:	e128      	b.n	8c34 <__aeabi_dsub+0x4d0>
    89e2:	1c07      	adds	r7, r0, #0
    89e4:	4665      	mov	r5, ip
    89e6:	076b      	lsls	r3, r5, #29
    89e8:	d000      	beq.n	89ec <__aeabi_dsub+0x288>
    89ea:	e6f0      	b.n	87ce <__aeabi_dsub+0x6a>
    89ec:	2601      	movs	r6, #1
    89ee:	4643      	mov	r3, r8
    89f0:	401e      	ands	r6, r3
    89f2:	e784      	b.n	88fe <__aeabi_dsub+0x19a>
    89f4:	2e00      	cmp	r6, #0
    89f6:	d000      	beq.n	89fa <__aeabi_dsub+0x296>
    89f8:	e081      	b.n	8afe <__aeabi_dsub+0x39a>
    89fa:	1c60      	adds	r0, r4, #1
    89fc:	0540      	lsls	r0, r0, #21
    89fe:	0d40      	lsrs	r0, r0, #21
    8a00:	2801      	cmp	r0, #1
    8a02:	dc00      	bgt.n	8a06 <__aeabi_dsub+0x2a2>
    8a04:	e107      	b.n	8c16 <__aeabi_dsub+0x4b2>
    8a06:	9901      	ldr	r1, [sp, #4]
    8a08:	1a68      	subs	r0, r5, r1
    8a0a:	4684      	mov	ip, r0
    8a0c:	4565      	cmp	r5, ip
    8a0e:	41b6      	sbcs	r6, r6
    8a10:	1ab8      	subs	r0, r7, r2
    8a12:	4276      	negs	r6, r6
    8a14:	1b86      	subs	r6, r0, r6
    8a16:	0230      	lsls	r0, r6, #8
    8a18:	d400      	bmi.n	8a1c <__aeabi_dsub+0x2b8>
    8a1a:	e0a1      	b.n	8b60 <__aeabi_dsub+0x3fc>
    8a1c:	468c      	mov	ip, r1
    8a1e:	1b4d      	subs	r5, r1, r5
    8a20:	45ac      	cmp	ip, r5
    8a22:	4189      	sbcs	r1, r1
    8a24:	1bd2      	subs	r2, r2, r7
    8a26:	4249      	negs	r1, r1
    8a28:	1a56      	subs	r6, r2, r1
    8a2a:	4698      	mov	r8, r3
    8a2c:	e734      	b.n	8898 <__aeabi_dsub+0x134>
    8a2e:	2200      	movs	r2, #0
    8a30:	2500      	movs	r5, #0
    8a32:	e6ef      	b.n	8814 <__aeabi_dsub+0xb0>
    8a34:	1c28      	adds	r0, r5, #0
    8a36:	f000 fa77 	bl	8f28 <__clzsi2>
    8a3a:	3020      	adds	r0, #32
    8a3c:	1c03      	adds	r3, r0, #0
    8a3e:	3b08      	subs	r3, #8
    8a40:	2b1f      	cmp	r3, #31
    8a42:	dc00      	bgt.n	8a46 <__aeabi_dsub+0x2e2>
    8a44:	e733      	b.n	88ae <__aeabi_dsub+0x14a>
    8a46:	1c02      	adds	r2, r0, #0
    8a48:	3a28      	subs	r2, #40	; 0x28
    8a4a:	4095      	lsls	r5, r2
    8a4c:	1c2a      	adds	r2, r5, #0
    8a4e:	2500      	movs	r5, #0
    8a50:	429c      	cmp	r4, r3
    8a52:	dc00      	bgt.n	8a56 <__aeabi_dsub+0x2f2>
    8a54:	e736      	b.n	88c4 <__aeabi_dsub+0x160>
    8a56:	4f1f      	ldr	r7, [pc, #124]	; (8ad4 <__aeabi_dsub+0x370>)
    8a58:	1ae4      	subs	r4, r4, r3
    8a5a:	4017      	ands	r7, r2
    8a5c:	e6b4      	b.n	87c8 <__aeabi_dsub+0x64>
    8a5e:	9b01      	ldr	r3, [sp, #4]
    8a60:	431a      	orrs	r2, r3
    8a62:	1e51      	subs	r1, r2, #1
    8a64:	418a      	sbcs	r2, r1
    8a66:	b2d3      	uxtb	r3, r2
    8a68:	2200      	movs	r2, #0
    8a6a:	e709      	b.n	8880 <__aeabi_dsub+0x11c>
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d000      	beq.n	8a72 <__aeabi_dsub+0x30e>
    8a70:	e101      	b.n	8c76 <__aeabi_dsub+0x512>
    8a72:	1c60      	adds	r0, r4, #1
    8a74:	0543      	lsls	r3, r0, #21
    8a76:	0d5b      	lsrs	r3, r3, #21
    8a78:	2b01      	cmp	r3, #1
    8a7a:	dc00      	bgt.n	8a7e <__aeabi_dsub+0x31a>
    8a7c:	e0b0      	b.n	8be0 <__aeabi_dsub+0x47c>
    8a7e:	4b14      	ldr	r3, [pc, #80]	; (8ad0 <__aeabi_dsub+0x36c>)
    8a80:	4298      	cmp	r0, r3
    8a82:	d100      	bne.n	8a86 <__aeabi_dsub+0x322>
    8a84:	e11e      	b.n	8cc4 <__aeabi_dsub+0x560>
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	19d2      	adds	r2, r2, r7
    8a8a:	1959      	adds	r1, r3, r5
    8a8c:	42a9      	cmp	r1, r5
    8a8e:	419b      	sbcs	r3, r3
    8a90:	425b      	negs	r3, r3
    8a92:	18d2      	adds	r2, r2, r3
    8a94:	0849      	lsrs	r1, r1, #1
    8a96:	07d5      	lsls	r5, r2, #31
    8a98:	430d      	orrs	r5, r1
    8a9a:	0857      	lsrs	r7, r2, #1
    8a9c:	1c04      	adds	r4, r0, #0
    8a9e:	e693      	b.n	87c8 <__aeabi_dsub+0x64>
    8aa0:	4b0b      	ldr	r3, [pc, #44]	; (8ad0 <__aeabi_dsub+0x36c>)
    8aa2:	429c      	cmp	r4, r3
    8aa4:	d000      	beq.n	8aa8 <__aeabi_dsub+0x344>
    8aa6:	e6d3      	b.n	8850 <__aeabi_dsub+0xec>
    8aa8:	e68e      	b.n	87c8 <__aeabi_dsub+0x64>
    8aaa:	1c21      	adds	r1, r4, #0
    8aac:	1c13      	adds	r3, r2, #0
    8aae:	391f      	subs	r1, #31
    8ab0:	40cb      	lsrs	r3, r1
    8ab2:	1c19      	adds	r1, r3, #0
    8ab4:	2f20      	cmp	r7, #32
    8ab6:	d100      	bne.n	8aba <__aeabi_dsub+0x356>
    8ab8:	e08e      	b.n	8bd8 <__aeabi_dsub+0x474>
    8aba:	233f      	movs	r3, #63	; 0x3f
    8abc:	1b1c      	subs	r4, r3, r4
    8abe:	40a2      	lsls	r2, r4
    8ac0:	4315      	orrs	r5, r2
    8ac2:	1e6a      	subs	r2, r5, #1
    8ac4:	4195      	sbcs	r5, r2
    8ac6:	2700      	movs	r7, #0
    8ac8:	430d      	orrs	r5, r1
    8aca:	2400      	movs	r4, #0
    8acc:	e78b      	b.n	89e6 <__aeabi_dsub+0x282>
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	000007ff 	.word	0x000007ff
    8ad4:	ff7fffff 	.word	0xff7fffff
    8ad8:	800fffff 	.word	0x800fffff
    8adc:	1c33      	adds	r3, r6, #0
    8ade:	1c10      	adds	r0, r2, #0
    8ae0:	3b20      	subs	r3, #32
    8ae2:	40d8      	lsrs	r0, r3
    8ae4:	2e20      	cmp	r6, #32
    8ae6:	d079      	beq.n	8bdc <__aeabi_dsub+0x478>
    8ae8:	2340      	movs	r3, #64	; 0x40
    8aea:	1b9b      	subs	r3, r3, r6
    8aec:	409a      	lsls	r2, r3
    8aee:	1c13      	adds	r3, r2, #0
    8af0:	9a01      	ldr	r2, [sp, #4]
    8af2:	4313      	orrs	r3, r2
    8af4:	1e59      	subs	r1, r3, #1
    8af6:	418b      	sbcs	r3, r1
    8af8:	2200      	movs	r2, #0
    8afa:	4303      	orrs	r3, r0
    8afc:	e6c0      	b.n	8880 <__aeabi_dsub+0x11c>
    8afe:	2c00      	cmp	r4, #0
    8b00:	d053      	beq.n	8baa <__aeabi_dsub+0x446>
    8b02:	4cc7      	ldr	r4, [pc, #796]	; (8e20 <__aeabi_dsub+0x6bc>)
    8b04:	42a0      	cmp	r0, r4
    8b06:	d100      	bne.n	8b0a <__aeabi_dsub+0x3a6>
    8b08:	e0b0      	b.n	8c6c <__aeabi_dsub+0x508>
    8b0a:	2480      	movs	r4, #128	; 0x80
    8b0c:	4271      	negs	r1, r6
    8b0e:	4689      	mov	r9, r1
    8b10:	0424      	lsls	r4, r4, #16
    8b12:	4327      	orrs	r7, r4
    8b14:	4649      	mov	r1, r9
    8b16:	2938      	cmp	r1, #56	; 0x38
    8b18:	dd00      	ble.n	8b1c <__aeabi_dsub+0x3b8>
    8b1a:	e0cd      	b.n	8cb8 <__aeabi_dsub+0x554>
    8b1c:	291f      	cmp	r1, #31
    8b1e:	dd00      	ble.n	8b22 <__aeabi_dsub+0x3be>
    8b20:	e159      	b.n	8dd6 <__aeabi_dsub+0x672>
    8b22:	2420      	movs	r4, #32
    8b24:	1c3e      	adds	r6, r7, #0
    8b26:	1a61      	subs	r1, r4, r1
    8b28:	408e      	lsls	r6, r1
    8b2a:	468a      	mov	sl, r1
    8b2c:	46b0      	mov	r8, r6
    8b2e:	4649      	mov	r1, r9
    8b30:	1c2e      	adds	r6, r5, #0
    8b32:	40ce      	lsrs	r6, r1
    8b34:	4651      	mov	r1, sl
    8b36:	46b4      	mov	ip, r6
    8b38:	408d      	lsls	r5, r1
    8b3a:	4664      	mov	r4, ip
    8b3c:	4646      	mov	r6, r8
    8b3e:	4649      	mov	r1, r9
    8b40:	4326      	orrs	r6, r4
    8b42:	1e6c      	subs	r4, r5, #1
    8b44:	41a5      	sbcs	r5, r4
    8b46:	40cf      	lsrs	r7, r1
    8b48:	4335      	orrs	r5, r6
    8b4a:	9901      	ldr	r1, [sp, #4]
    8b4c:	1bd7      	subs	r7, r2, r7
    8b4e:	468c      	mov	ip, r1
    8b50:	1b4d      	subs	r5, r1, r5
    8b52:	45ac      	cmp	ip, r5
    8b54:	4192      	sbcs	r2, r2
    8b56:	4252      	negs	r2, r2
    8b58:	1abf      	subs	r7, r7, r2
    8b5a:	1c04      	adds	r4, r0, #0
    8b5c:	4698      	mov	r8, r3
    8b5e:	e696      	b.n	888e <__aeabi_dsub+0x12a>
    8b60:	4663      	mov	r3, ip
    8b62:	4665      	mov	r5, ip
    8b64:	4333      	orrs	r3, r6
    8b66:	d000      	beq.n	8b6a <__aeabi_dsub+0x406>
    8b68:	e696      	b.n	8898 <__aeabi_dsub+0x134>
    8b6a:	2600      	movs	r6, #0
    8b6c:	2700      	movs	r7, #0
    8b6e:	2400      	movs	r4, #0
    8b70:	2500      	movs	r5, #0
    8b72:	e6c4      	b.n	88fe <__aeabi_dsub+0x19a>
    8b74:	2b1f      	cmp	r3, #31
    8b76:	dc61      	bgt.n	8c3c <__aeabi_dsub+0x4d8>
    8b78:	2020      	movs	r0, #32
    8b7a:	1ac3      	subs	r3, r0, r3
    8b7c:	469b      	mov	fp, r3
    8b7e:	1c13      	adds	r3, r2, #0
    8b80:	4659      	mov	r1, fp
    8b82:	408b      	lsls	r3, r1
    8b84:	4651      	mov	r1, sl
    8b86:	4699      	mov	r9, r3
    8b88:	9b01      	ldr	r3, [sp, #4]
    8b8a:	40cb      	lsrs	r3, r1
    8b8c:	469c      	mov	ip, r3
    8b8e:	464b      	mov	r3, r9
    8b90:	4660      	mov	r0, ip
    8b92:	4303      	orrs	r3, r0
    8b94:	469c      	mov	ip, r3
    8b96:	465b      	mov	r3, fp
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	4099      	lsls	r1, r3
    8b9c:	4663      	mov	r3, ip
    8b9e:	1e48      	subs	r0, r1, #1
    8ba0:	4181      	sbcs	r1, r0
    8ba2:	4319      	orrs	r1, r3
    8ba4:	4653      	mov	r3, sl
    8ba6:	40da      	lsrs	r2, r3
    8ba8:	e6cd      	b.n	8946 <__aeabi_dsub+0x1e2>
    8baa:	1c3c      	adds	r4, r7, #0
    8bac:	432c      	orrs	r4, r5
    8bae:	d05d      	beq.n	8c6c <__aeabi_dsub+0x508>
    8bb0:	43f1      	mvns	r1, r6
    8bb2:	4689      	mov	r9, r1
    8bb4:	2900      	cmp	r1, #0
    8bb6:	d155      	bne.n	8c64 <__aeabi_dsub+0x500>
    8bb8:	9901      	ldr	r1, [sp, #4]
    8bba:	1bd2      	subs	r2, r2, r7
    8bbc:	468c      	mov	ip, r1
    8bbe:	1b4d      	subs	r5, r1, r5
    8bc0:	45ac      	cmp	ip, r5
    8bc2:	4189      	sbcs	r1, r1
    8bc4:	4249      	negs	r1, r1
    8bc6:	1a57      	subs	r7, r2, r1
    8bc8:	1c04      	adds	r4, r0, #0
    8bca:	4698      	mov	r8, r3
    8bcc:	e65f      	b.n	888e <__aeabi_dsub+0x12a>
    8bce:	4894      	ldr	r0, [pc, #592]	; (8e20 <__aeabi_dsub+0x6bc>)
    8bd0:	4284      	cmp	r4, r0
    8bd2:	d000      	beq.n	8bd6 <__aeabi_dsub+0x472>
    8bd4:	e6ad      	b.n	8932 <__aeabi_dsub+0x1ce>
    8bd6:	e5f7      	b.n	87c8 <__aeabi_dsub+0x64>
    8bd8:	2200      	movs	r2, #0
    8bda:	e771      	b.n	8ac0 <__aeabi_dsub+0x35c>
    8bdc:	2300      	movs	r3, #0
    8bde:	e787      	b.n	8af0 <__aeabi_dsub+0x38c>
    8be0:	1c3b      	adds	r3, r7, #0
    8be2:	432b      	orrs	r3, r5
    8be4:	2c00      	cmp	r4, #0
    8be6:	d000      	beq.n	8bea <__aeabi_dsub+0x486>
    8be8:	e0da      	b.n	8da0 <__aeabi_dsub+0x63c>
    8bea:	2b00      	cmp	r3, #0
    8bec:	d100      	bne.n	8bf0 <__aeabi_dsub+0x48c>
    8bee:	e113      	b.n	8e18 <__aeabi_dsub+0x6b4>
    8bf0:	1c13      	adds	r3, r2, #0
    8bf2:	9901      	ldr	r1, [sp, #4]
    8bf4:	430b      	orrs	r3, r1
    8bf6:	d100      	bne.n	8bfa <__aeabi_dsub+0x496>
    8bf8:	e5e6      	b.n	87c8 <__aeabi_dsub+0x64>
    8bfa:	1949      	adds	r1, r1, r5
    8bfc:	42a9      	cmp	r1, r5
    8bfe:	419b      	sbcs	r3, r3
    8c00:	19d2      	adds	r2, r2, r7
    8c02:	425b      	negs	r3, r3
    8c04:	18d7      	adds	r7, r2, r3
    8c06:	023b      	lsls	r3, r7, #8
    8c08:	d400      	bmi.n	8c0c <__aeabi_dsub+0x4a8>
    8c0a:	e121      	b.n	8e50 <__aeabi_dsub+0x6ec>
    8c0c:	4b85      	ldr	r3, [pc, #532]	; (8e24 <__aeabi_dsub+0x6c0>)
    8c0e:	1c0d      	adds	r5, r1, #0
    8c10:	401f      	ands	r7, r3
    8c12:	1c04      	adds	r4, r0, #0
    8c14:	e5d8      	b.n	87c8 <__aeabi_dsub+0x64>
    8c16:	1c38      	adds	r0, r7, #0
    8c18:	4328      	orrs	r0, r5
    8c1a:	2c00      	cmp	r4, #0
    8c1c:	d140      	bne.n	8ca0 <__aeabi_dsub+0x53c>
    8c1e:	2800      	cmp	r0, #0
    8c20:	d000      	beq.n	8c24 <__aeabi_dsub+0x4c0>
    8c22:	e083      	b.n	8d2c <__aeabi_dsub+0x5c8>
    8c24:	1c10      	adds	r0, r2, #0
    8c26:	9901      	ldr	r1, [sp, #4]
    8c28:	4308      	orrs	r0, r1
    8c2a:	d003      	beq.n	8c34 <__aeabi_dsub+0x4d0>
    8c2c:	1c17      	adds	r7, r2, #0
    8c2e:	1c0d      	adds	r5, r1, #0
    8c30:	4698      	mov	r8, r3
    8c32:	e5c9      	b.n	87c8 <__aeabi_dsub+0x64>
    8c34:	2600      	movs	r6, #0
    8c36:	2700      	movs	r7, #0
    8c38:	2500      	movs	r5, #0
    8c3a:	e660      	b.n	88fe <__aeabi_dsub+0x19a>
    8c3c:	4650      	mov	r0, sl
    8c3e:	1c13      	adds	r3, r2, #0
    8c40:	3820      	subs	r0, #32
    8c42:	40c3      	lsrs	r3, r0
    8c44:	1c18      	adds	r0, r3, #0
    8c46:	4653      	mov	r3, sl
    8c48:	2b20      	cmp	r3, #32
    8c4a:	d100      	bne.n	8c4e <__aeabi_dsub+0x4ea>
    8c4c:	e0c1      	b.n	8dd2 <__aeabi_dsub+0x66e>
    8c4e:	2340      	movs	r3, #64	; 0x40
    8c50:	4651      	mov	r1, sl
    8c52:	1a5b      	subs	r3, r3, r1
    8c54:	409a      	lsls	r2, r3
    8c56:	9901      	ldr	r1, [sp, #4]
    8c58:	4311      	orrs	r1, r2
    8c5a:	1e4a      	subs	r2, r1, #1
    8c5c:	4191      	sbcs	r1, r2
    8c5e:	2200      	movs	r2, #0
    8c60:	4301      	orrs	r1, r0
    8c62:	e670      	b.n	8946 <__aeabi_dsub+0x1e2>
    8c64:	4c6e      	ldr	r4, [pc, #440]	; (8e20 <__aeabi_dsub+0x6bc>)
    8c66:	42a0      	cmp	r0, r4
    8c68:	d000      	beq.n	8c6c <__aeabi_dsub+0x508>
    8c6a:	e753      	b.n	8b14 <__aeabi_dsub+0x3b0>
    8c6c:	1c17      	adds	r7, r2, #0
    8c6e:	9d01      	ldr	r5, [sp, #4]
    8c70:	1c04      	adds	r4, r0, #0
    8c72:	4698      	mov	r8, r3
    8c74:	e5a8      	b.n	87c8 <__aeabi_dsub+0x64>
    8c76:	2c00      	cmp	r4, #0
    8c78:	d128      	bne.n	8ccc <__aeabi_dsub+0x568>
    8c7a:	1c3c      	adds	r4, r7, #0
    8c7c:	432c      	orrs	r4, r5
    8c7e:	d100      	bne.n	8c82 <__aeabi_dsub+0x51e>
    8c80:	e08a      	b.n	8d98 <__aeabi_dsub+0x634>
    8c82:	43db      	mvns	r3, r3
    8c84:	469a      	mov	sl, r3
    8c86:	2b00      	cmp	r3, #0
    8c88:	d000      	beq.n	8c8c <__aeabi_dsub+0x528>
    8c8a:	e082      	b.n	8d92 <__aeabi_dsub+0x62e>
    8c8c:	9b01      	ldr	r3, [sp, #4]
    8c8e:	19d2      	adds	r2, r2, r7
    8c90:	469c      	mov	ip, r3
    8c92:	4465      	add	r5, ip
    8c94:	429d      	cmp	r5, r3
    8c96:	4189      	sbcs	r1, r1
    8c98:	4249      	negs	r1, r1
    8c9a:	1857      	adds	r7, r2, r1
    8c9c:	1c04      	adds	r4, r0, #0
    8c9e:	e659      	b.n	8954 <__aeabi_dsub+0x1f0>
    8ca0:	2800      	cmp	r0, #0
    8ca2:	d15b      	bne.n	8d5c <__aeabi_dsub+0x5f8>
    8ca4:	1c10      	adds	r0, r2, #0
    8ca6:	9901      	ldr	r1, [sp, #4]
    8ca8:	4308      	orrs	r0, r1
    8caa:	d100      	bne.n	8cae <__aeabi_dsub+0x54a>
    8cac:	e0a4      	b.n	8df8 <__aeabi_dsub+0x694>
    8cae:	1c17      	adds	r7, r2, #0
    8cb0:	1c0d      	adds	r5, r1, #0
    8cb2:	4698      	mov	r8, r3
    8cb4:	4c5a      	ldr	r4, [pc, #360]	; (8e20 <__aeabi_dsub+0x6bc>)
    8cb6:	e587      	b.n	87c8 <__aeabi_dsub+0x64>
    8cb8:	433d      	orrs	r5, r7
    8cba:	1e6f      	subs	r7, r5, #1
    8cbc:	41bd      	sbcs	r5, r7
    8cbe:	2700      	movs	r7, #0
    8cc0:	b2ed      	uxtb	r5, r5
    8cc2:	e742      	b.n	8b4a <__aeabi_dsub+0x3e6>
    8cc4:	1c04      	adds	r4, r0, #0
    8cc6:	2700      	movs	r7, #0
    8cc8:	2500      	movs	r5, #0
    8cca:	e618      	b.n	88fe <__aeabi_dsub+0x19a>
    8ccc:	4c54      	ldr	r4, [pc, #336]	; (8e20 <__aeabi_dsub+0x6bc>)
    8cce:	42a0      	cmp	r0, r4
    8cd0:	d062      	beq.n	8d98 <__aeabi_dsub+0x634>
    8cd2:	4653      	mov	r3, sl
    8cd4:	2480      	movs	r4, #128	; 0x80
    8cd6:	425b      	negs	r3, r3
    8cd8:	469a      	mov	sl, r3
    8cda:	0424      	lsls	r4, r4, #16
    8cdc:	4327      	orrs	r7, r4
    8cde:	4653      	mov	r3, sl
    8ce0:	2b38      	cmp	r3, #56	; 0x38
    8ce2:	dd00      	ble.n	8ce6 <__aeabi_dsub+0x582>
    8ce4:	e08e      	b.n	8e04 <__aeabi_dsub+0x6a0>
    8ce6:	2b1f      	cmp	r3, #31
    8ce8:	dd00      	ble.n	8cec <__aeabi_dsub+0x588>
    8cea:	e09d      	b.n	8e28 <__aeabi_dsub+0x6c4>
    8cec:	2420      	movs	r4, #32
    8cee:	1ae3      	subs	r3, r4, r3
    8cf0:	469b      	mov	fp, r3
    8cf2:	1c3b      	adds	r3, r7, #0
    8cf4:	4659      	mov	r1, fp
    8cf6:	408b      	lsls	r3, r1
    8cf8:	4651      	mov	r1, sl
    8cfa:	4699      	mov	r9, r3
    8cfc:	1c2b      	adds	r3, r5, #0
    8cfe:	40cb      	lsrs	r3, r1
    8d00:	469c      	mov	ip, r3
    8d02:	464b      	mov	r3, r9
    8d04:	4664      	mov	r4, ip
    8d06:	4323      	orrs	r3, r4
    8d08:	469c      	mov	ip, r3
    8d0a:	465b      	mov	r3, fp
    8d0c:	409d      	lsls	r5, r3
    8d0e:	4663      	mov	r3, ip
    8d10:	1e6c      	subs	r4, r5, #1
    8d12:	41a5      	sbcs	r5, r4
    8d14:	40cf      	lsrs	r7, r1
    8d16:	431d      	orrs	r5, r3
    8d18:	9b01      	ldr	r3, [sp, #4]
    8d1a:	18bf      	adds	r7, r7, r2
    8d1c:	469c      	mov	ip, r3
    8d1e:	4465      	add	r5, ip
    8d20:	429d      	cmp	r5, r3
    8d22:	4192      	sbcs	r2, r2
    8d24:	4252      	negs	r2, r2
    8d26:	18bf      	adds	r7, r7, r2
    8d28:	1c04      	adds	r4, r0, #0
    8d2a:	e613      	b.n	8954 <__aeabi_dsub+0x1f0>
    8d2c:	1c10      	adds	r0, r2, #0
    8d2e:	9901      	ldr	r1, [sp, #4]
    8d30:	4308      	orrs	r0, r1
    8d32:	d100      	bne.n	8d36 <__aeabi_dsub+0x5d2>
    8d34:	e548      	b.n	87c8 <__aeabi_dsub+0x64>
    8d36:	1a68      	subs	r0, r5, r1
    8d38:	4684      	mov	ip, r0
    8d3a:	4285      	cmp	r5, r0
    8d3c:	4180      	sbcs	r0, r0
    8d3e:	1abe      	subs	r6, r7, r2
    8d40:	4240      	negs	r0, r0
    8d42:	1a30      	subs	r0, r6, r0
    8d44:	0206      	lsls	r6, r0, #8
    8d46:	d400      	bmi.n	8d4a <__aeabi_dsub+0x5e6>
    8d48:	e647      	b.n	89da <__aeabi_dsub+0x276>
    8d4a:	468c      	mov	ip, r1
    8d4c:	1b4d      	subs	r5, r1, r5
    8d4e:	45ac      	cmp	ip, r5
    8d50:	4189      	sbcs	r1, r1
    8d52:	1bd2      	subs	r2, r2, r7
    8d54:	4249      	negs	r1, r1
    8d56:	1a57      	subs	r7, r2, r1
    8d58:	4698      	mov	r8, r3
    8d5a:	e535      	b.n	87c8 <__aeabi_dsub+0x64>
    8d5c:	1c10      	adds	r0, r2, #0
    8d5e:	9901      	ldr	r1, [sp, #4]
    8d60:	4308      	orrs	r0, r1
    8d62:	d034      	beq.n	8dce <__aeabi_dsub+0x66a>
    8d64:	2480      	movs	r4, #128	; 0x80
    8d66:	0778      	lsls	r0, r7, #29
    8d68:	08ed      	lsrs	r5, r5, #3
    8d6a:	08ff      	lsrs	r7, r7, #3
    8d6c:	0324      	lsls	r4, r4, #12
    8d6e:	4328      	orrs	r0, r5
    8d70:	4227      	tst	r7, r4
    8d72:	d008      	beq.n	8d86 <__aeabi_dsub+0x622>
    8d74:	08d6      	lsrs	r6, r2, #3
    8d76:	4226      	tst	r6, r4
    8d78:	d105      	bne.n	8d86 <__aeabi_dsub+0x622>
    8d7a:	08c9      	lsrs	r1, r1, #3
    8d7c:	0752      	lsls	r2, r2, #29
    8d7e:	430a      	orrs	r2, r1
    8d80:	1c10      	adds	r0, r2, #0
    8d82:	1c37      	adds	r7, r6, #0
    8d84:	4698      	mov	r8, r3
    8d86:	00ff      	lsls	r7, r7, #3
    8d88:	0f42      	lsrs	r2, r0, #29
    8d8a:	4317      	orrs	r7, r2
    8d8c:	00c5      	lsls	r5, r0, #3
    8d8e:	4c24      	ldr	r4, [pc, #144]	; (8e20 <__aeabi_dsub+0x6bc>)
    8d90:	e51a      	b.n	87c8 <__aeabi_dsub+0x64>
    8d92:	4c23      	ldr	r4, [pc, #140]	; (8e20 <__aeabi_dsub+0x6bc>)
    8d94:	42a0      	cmp	r0, r4
    8d96:	d1a2      	bne.n	8cde <__aeabi_dsub+0x57a>
    8d98:	1c17      	adds	r7, r2, #0
    8d9a:	9d01      	ldr	r5, [sp, #4]
    8d9c:	1c04      	adds	r4, r0, #0
    8d9e:	e513      	b.n	87c8 <__aeabi_dsub+0x64>
    8da0:	2b00      	cmp	r3, #0
    8da2:	d035      	beq.n	8e10 <__aeabi_dsub+0x6ac>
    8da4:	1c13      	adds	r3, r2, #0
    8da6:	9901      	ldr	r1, [sp, #4]
    8da8:	430b      	orrs	r3, r1
    8daa:	d010      	beq.n	8dce <__aeabi_dsub+0x66a>
    8dac:	2480      	movs	r4, #128	; 0x80
    8dae:	0778      	lsls	r0, r7, #29
    8db0:	08ed      	lsrs	r5, r5, #3
    8db2:	08ff      	lsrs	r7, r7, #3
    8db4:	0324      	lsls	r4, r4, #12
    8db6:	4328      	orrs	r0, r5
    8db8:	4227      	tst	r7, r4
    8dba:	d0e4      	beq.n	8d86 <__aeabi_dsub+0x622>
    8dbc:	08d3      	lsrs	r3, r2, #3
    8dbe:	4223      	tst	r3, r4
    8dc0:	d1e1      	bne.n	8d86 <__aeabi_dsub+0x622>
    8dc2:	08c9      	lsrs	r1, r1, #3
    8dc4:	0752      	lsls	r2, r2, #29
    8dc6:	430a      	orrs	r2, r1
    8dc8:	1c10      	adds	r0, r2, #0
    8dca:	1c1f      	adds	r7, r3, #0
    8dcc:	e7db      	b.n	8d86 <__aeabi_dsub+0x622>
    8dce:	4c14      	ldr	r4, [pc, #80]	; (8e20 <__aeabi_dsub+0x6bc>)
    8dd0:	e4fa      	b.n	87c8 <__aeabi_dsub+0x64>
    8dd2:	2200      	movs	r2, #0
    8dd4:	e73f      	b.n	8c56 <__aeabi_dsub+0x4f2>
    8dd6:	464c      	mov	r4, r9
    8dd8:	1c3e      	adds	r6, r7, #0
    8dda:	3c20      	subs	r4, #32
    8ddc:	40e6      	lsrs	r6, r4
    8dde:	4649      	mov	r1, r9
    8de0:	1c34      	adds	r4, r6, #0
    8de2:	2920      	cmp	r1, #32
    8de4:	d032      	beq.n	8e4c <__aeabi_dsub+0x6e8>
    8de6:	2640      	movs	r6, #64	; 0x40
    8de8:	1a76      	subs	r6, r6, r1
    8dea:	40b7      	lsls	r7, r6
    8dec:	433d      	orrs	r5, r7
    8dee:	1e6f      	subs	r7, r5, #1
    8df0:	41bd      	sbcs	r5, r7
    8df2:	2700      	movs	r7, #0
    8df4:	4325      	orrs	r5, r4
    8df6:	e6a8      	b.n	8b4a <__aeabi_dsub+0x3e6>
    8df8:	2780      	movs	r7, #128	; 0x80
    8dfa:	2600      	movs	r6, #0
    8dfc:	03ff      	lsls	r7, r7, #15
    8dfe:	4c08      	ldr	r4, [pc, #32]	; (8e20 <__aeabi_dsub+0x6bc>)
    8e00:	2500      	movs	r5, #0
    8e02:	e57c      	b.n	88fe <__aeabi_dsub+0x19a>
    8e04:	433d      	orrs	r5, r7
    8e06:	1e6f      	subs	r7, r5, #1
    8e08:	41bd      	sbcs	r5, r7
    8e0a:	2700      	movs	r7, #0
    8e0c:	b2ed      	uxtb	r5, r5
    8e0e:	e783      	b.n	8d18 <__aeabi_dsub+0x5b4>
    8e10:	1c17      	adds	r7, r2, #0
    8e12:	9d01      	ldr	r5, [sp, #4]
    8e14:	4c02      	ldr	r4, [pc, #8]	; (8e20 <__aeabi_dsub+0x6bc>)
    8e16:	e4d7      	b.n	87c8 <__aeabi_dsub+0x64>
    8e18:	1c17      	adds	r7, r2, #0
    8e1a:	9d01      	ldr	r5, [sp, #4]
    8e1c:	e4d4      	b.n	87c8 <__aeabi_dsub+0x64>
    8e1e:	46c0      	nop			; (mov r8, r8)
    8e20:	000007ff 	.word	0x000007ff
    8e24:	ff7fffff 	.word	0xff7fffff
    8e28:	4654      	mov	r4, sl
    8e2a:	1c3b      	adds	r3, r7, #0
    8e2c:	3c20      	subs	r4, #32
    8e2e:	40e3      	lsrs	r3, r4
    8e30:	1c1c      	adds	r4, r3, #0
    8e32:	4653      	mov	r3, sl
    8e34:	2b20      	cmp	r3, #32
    8e36:	d00d      	beq.n	8e54 <__aeabi_dsub+0x6f0>
    8e38:	2340      	movs	r3, #64	; 0x40
    8e3a:	4651      	mov	r1, sl
    8e3c:	1a5b      	subs	r3, r3, r1
    8e3e:	409f      	lsls	r7, r3
    8e40:	433d      	orrs	r5, r7
    8e42:	1e6f      	subs	r7, r5, #1
    8e44:	41bd      	sbcs	r5, r7
    8e46:	2700      	movs	r7, #0
    8e48:	4325      	orrs	r5, r4
    8e4a:	e765      	b.n	8d18 <__aeabi_dsub+0x5b4>
    8e4c:	2700      	movs	r7, #0
    8e4e:	e7cd      	b.n	8dec <__aeabi_dsub+0x688>
    8e50:	1c0d      	adds	r5, r1, #0
    8e52:	e5c8      	b.n	89e6 <__aeabi_dsub+0x282>
    8e54:	2700      	movs	r7, #0
    8e56:	e7f3      	b.n	8e40 <__aeabi_dsub+0x6dc>

00008e58 <__aeabi_d2iz>:
    8e58:	030b      	lsls	r3, r1, #12
    8e5a:	b530      	push	{r4, r5, lr}
    8e5c:	4c13      	ldr	r4, [pc, #76]	; (8eac <__aeabi_d2iz+0x54>)
    8e5e:	0b1a      	lsrs	r2, r3, #12
    8e60:	004b      	lsls	r3, r1, #1
    8e62:	1c05      	adds	r5, r0, #0
    8e64:	0d5b      	lsrs	r3, r3, #21
    8e66:	0fc9      	lsrs	r1, r1, #31
    8e68:	2000      	movs	r0, #0
    8e6a:	42a3      	cmp	r3, r4
    8e6c:	dd10      	ble.n	8e90 <__aeabi_d2iz+0x38>
    8e6e:	4810      	ldr	r0, [pc, #64]	; (8eb0 <__aeabi_d2iz+0x58>)
    8e70:	4283      	cmp	r3, r0
    8e72:	dc0e      	bgt.n	8e92 <__aeabi_d2iz+0x3a>
    8e74:	2080      	movs	r0, #128	; 0x80
    8e76:	4c0f      	ldr	r4, [pc, #60]	; (8eb4 <__aeabi_d2iz+0x5c>)
    8e78:	0340      	lsls	r0, r0, #13
    8e7a:	4302      	orrs	r2, r0
    8e7c:	1ae4      	subs	r4, r4, r3
    8e7e:	2c1f      	cmp	r4, #31
    8e80:	dd0a      	ble.n	8e98 <__aeabi_d2iz+0x40>
    8e82:	480d      	ldr	r0, [pc, #52]	; (8eb8 <__aeabi_d2iz+0x60>)
    8e84:	1ac3      	subs	r3, r0, r3
    8e86:	40da      	lsrs	r2, r3
    8e88:	1c13      	adds	r3, r2, #0
    8e8a:	4248      	negs	r0, r1
    8e8c:	4043      	eors	r3, r0
    8e8e:	1858      	adds	r0, r3, r1
    8e90:	bd30      	pop	{r4, r5, pc}
    8e92:	4b0a      	ldr	r3, [pc, #40]	; (8ebc <__aeabi_d2iz+0x64>)
    8e94:	18c8      	adds	r0, r1, r3
    8e96:	e7fb      	b.n	8e90 <__aeabi_d2iz+0x38>
    8e98:	1c28      	adds	r0, r5, #0
    8e9a:	40e0      	lsrs	r0, r4
    8e9c:	4c08      	ldr	r4, [pc, #32]	; (8ec0 <__aeabi_d2iz+0x68>)
    8e9e:	46a4      	mov	ip, r4
    8ea0:	4463      	add	r3, ip
    8ea2:	409a      	lsls	r2, r3
    8ea4:	1c13      	adds	r3, r2, #0
    8ea6:	4303      	orrs	r3, r0
    8ea8:	e7ef      	b.n	8e8a <__aeabi_d2iz+0x32>
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	000003fe 	.word	0x000003fe
    8eb0:	0000041d 	.word	0x0000041d
    8eb4:	00000433 	.word	0x00000433
    8eb8:	00000413 	.word	0x00000413
    8ebc:	7fffffff 	.word	0x7fffffff
    8ec0:	fffffbed 	.word	0xfffffbed

00008ec4 <__aeabi_ui2d>:
    8ec4:	b510      	push	{r4, lr}
    8ec6:	1e04      	subs	r4, r0, #0
    8ec8:	d010      	beq.n	8eec <__aeabi_ui2d+0x28>
    8eca:	f000 f82d 	bl	8f28 <__clzsi2>
    8ece:	4a14      	ldr	r2, [pc, #80]	; (8f20 <__aeabi_ui2d+0x5c>)
    8ed0:	1a12      	subs	r2, r2, r0
    8ed2:	280a      	cmp	r0, #10
    8ed4:	dc1a      	bgt.n	8f0c <__aeabi_ui2d+0x48>
    8ed6:	230b      	movs	r3, #11
    8ed8:	1c21      	adds	r1, r4, #0
    8eda:	1a1b      	subs	r3, r3, r0
    8edc:	40d9      	lsrs	r1, r3
    8ede:	3015      	adds	r0, #21
    8ee0:	030b      	lsls	r3, r1, #12
    8ee2:	0552      	lsls	r2, r2, #21
    8ee4:	4084      	lsls	r4, r0
    8ee6:	0b1b      	lsrs	r3, r3, #12
    8ee8:	0d52      	lsrs	r2, r2, #21
    8eea:	e001      	b.n	8ef0 <__aeabi_ui2d+0x2c>
    8eec:	2200      	movs	r2, #0
    8eee:	2300      	movs	r3, #0
    8ef0:	2100      	movs	r1, #0
    8ef2:	031b      	lsls	r3, r3, #12
    8ef4:	1c20      	adds	r0, r4, #0
    8ef6:	0b1c      	lsrs	r4, r3, #12
    8ef8:	0d0b      	lsrs	r3, r1, #20
    8efa:	051b      	lsls	r3, r3, #20
    8efc:	4323      	orrs	r3, r4
    8efe:	4c09      	ldr	r4, [pc, #36]	; (8f24 <__aeabi_ui2d+0x60>)
    8f00:	0512      	lsls	r2, r2, #20
    8f02:	4023      	ands	r3, r4
    8f04:	4313      	orrs	r3, r2
    8f06:	005b      	lsls	r3, r3, #1
    8f08:	0859      	lsrs	r1, r3, #1
    8f0a:	bd10      	pop	{r4, pc}
    8f0c:	1c03      	adds	r3, r0, #0
    8f0e:	3b0b      	subs	r3, #11
    8f10:	409c      	lsls	r4, r3
    8f12:	0552      	lsls	r2, r2, #21
    8f14:	0323      	lsls	r3, r4, #12
    8f16:	0b1b      	lsrs	r3, r3, #12
    8f18:	0d52      	lsrs	r2, r2, #21
    8f1a:	2400      	movs	r4, #0
    8f1c:	e7e8      	b.n	8ef0 <__aeabi_ui2d+0x2c>
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	0000041e 	.word	0x0000041e
    8f24:	800fffff 	.word	0x800fffff

00008f28 <__clzsi2>:
    8f28:	211c      	movs	r1, #28
    8f2a:	2301      	movs	r3, #1
    8f2c:	041b      	lsls	r3, r3, #16
    8f2e:	4298      	cmp	r0, r3
    8f30:	d301      	bcc.n	8f36 <__clzsi2+0xe>
    8f32:	0c00      	lsrs	r0, r0, #16
    8f34:	3910      	subs	r1, #16
    8f36:	0a1b      	lsrs	r3, r3, #8
    8f38:	4298      	cmp	r0, r3
    8f3a:	d301      	bcc.n	8f40 <__clzsi2+0x18>
    8f3c:	0a00      	lsrs	r0, r0, #8
    8f3e:	3908      	subs	r1, #8
    8f40:	091b      	lsrs	r3, r3, #4
    8f42:	4298      	cmp	r0, r3
    8f44:	d301      	bcc.n	8f4a <__clzsi2+0x22>
    8f46:	0900      	lsrs	r0, r0, #4
    8f48:	3904      	subs	r1, #4
    8f4a:	a202      	add	r2, pc, #8	; (adr r2, 8f54 <__clzsi2+0x2c>)
    8f4c:	5c10      	ldrb	r0, [r2, r0]
    8f4e:	1840      	adds	r0, r0, r1
    8f50:	4770      	bx	lr
    8f52:	46c0      	nop			; (mov r8, r8)
    8f54:	02020304 	.word	0x02020304
    8f58:	01010101 	.word	0x01010101
	...

00008f64 <__libc_init_array>:
    8f64:	4b0e      	ldr	r3, [pc, #56]	; (8fa0 <__libc_init_array+0x3c>)
    8f66:	b570      	push	{r4, r5, r6, lr}
    8f68:	2500      	movs	r5, #0
    8f6a:	1c1e      	adds	r6, r3, #0
    8f6c:	4c0d      	ldr	r4, [pc, #52]	; (8fa4 <__libc_init_array+0x40>)
    8f6e:	1ae4      	subs	r4, r4, r3
    8f70:	10a4      	asrs	r4, r4, #2
    8f72:	42a5      	cmp	r5, r4
    8f74:	d004      	beq.n	8f80 <__libc_init_array+0x1c>
    8f76:	00ab      	lsls	r3, r5, #2
    8f78:	58f3      	ldr	r3, [r6, r3]
    8f7a:	4798      	blx	r3
    8f7c:	3501      	adds	r5, #1
    8f7e:	e7f8      	b.n	8f72 <__libc_init_array+0xe>
    8f80:	f000 f8e0 	bl	9144 <_init>
    8f84:	4b08      	ldr	r3, [pc, #32]	; (8fa8 <__libc_init_array+0x44>)
    8f86:	2500      	movs	r5, #0
    8f88:	1c1e      	adds	r6, r3, #0
    8f8a:	4c08      	ldr	r4, [pc, #32]	; (8fac <__libc_init_array+0x48>)
    8f8c:	1ae4      	subs	r4, r4, r3
    8f8e:	10a4      	asrs	r4, r4, #2
    8f90:	42a5      	cmp	r5, r4
    8f92:	d004      	beq.n	8f9e <__libc_init_array+0x3a>
    8f94:	00ab      	lsls	r3, r5, #2
    8f96:	58f3      	ldr	r3, [r6, r3]
    8f98:	4798      	blx	r3
    8f9a:	3501      	adds	r5, #1
    8f9c:	e7f8      	b.n	8f90 <__libc_init_array+0x2c>
    8f9e:	bd70      	pop	{r4, r5, r6, pc}
    8fa0:	00009150 	.word	0x00009150
    8fa4:	00009150 	.word	0x00009150
    8fa8:	00009150 	.word	0x00009150
    8fac:	00009154 	.word	0x00009154

00008fb0 <memcpy>:
    8fb0:	2300      	movs	r3, #0
    8fb2:	b510      	push	{r4, lr}
    8fb4:	4293      	cmp	r3, r2
    8fb6:	d003      	beq.n	8fc0 <memcpy+0x10>
    8fb8:	5ccc      	ldrb	r4, [r1, r3]
    8fba:	54c4      	strb	r4, [r0, r3]
    8fbc:	3301      	adds	r3, #1
    8fbe:	e7f9      	b.n	8fb4 <memcpy+0x4>
    8fc0:	bd10      	pop	{r4, pc}

00008fc2 <memset>:
    8fc2:	1c03      	adds	r3, r0, #0
    8fc4:	1882      	adds	r2, r0, r2
    8fc6:	4293      	cmp	r3, r2
    8fc8:	d002      	beq.n	8fd0 <memset+0xe>
    8fca:	7019      	strb	r1, [r3, #0]
    8fcc:	3301      	adds	r3, #1
    8fce:	e7fa      	b.n	8fc6 <memset+0x4>
    8fd0:	4770      	bx	lr
	...

00008fd4 <tcc_modules>:
    8fd4:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00008fe0 <_tcc_gclk_ids>:
    8fe0:	1a1a 001b                                   ....

00008fe4 <_tcc_apbcmasks>:
    8fe4:	0100 0000 0200 0000 0400 0000               ............

00008ff0 <_tcc_maxs>:
    8ff0:	ffff 00ff ffff 00ff ffff 0000               ............

00008ffc <_tcc_cc_nums>:
    8ffc:	0204 0002                                   ....

00009000 <_tcc_ow_nums>:
    9000:	0408 0002                                   ....

00009004 <_tcc_intflag>:
    9004:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    9014:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    9024:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    9034:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    9044:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    9054:	42b2 0000 432e 0000 432e 0000 42d4 0000     .B...C...C...B..
    9064:	42ce 0000 42da 0000 42b8 0000 42e0 0000     .B...B...B...B..
    9074:	4314 0000 44d4 0000 4524 0000 4524 0000     .C...D..$E..$E..
    9084:	4520 0000 44c6 0000 44e6 0000 44b6 0000      E...D...D...D..
    9094:	44f8 0000 450a 0000 5c26 0000 5bfe 0000     .D...E..&\...[..
    90a4:	5bd6 0000 5b9c 0000 5b62 0000 4f54 5350     .[...[..b[..TOPS
    90b4:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....
    90c4:	7dbc 0000 7caa 0000 7d90 0000 7c96 0000     .}...|...}...|..
    90d4:	7d90 0000 7d9a 0000 7d90 0000 7c96 0000     .}...}...}...|..
    90e4:	7caa 0000 7caa 0000 7d9a 0000 7c96 0000     .|...|...}...|..
    90f4:	7ca0 0000 7ca0 0000 7ca0 0000 8002 0000     .|...|...|......
    9104:	841c 0000 83fa 0000 83fa 0000 83ee 0000     ................
    9114:	82e2 0000 82e2 0000 83e2 0000 83ee 0000     ................
    9124:	82e2 0000 83e2 0000 82e2 0000 83ee 0000     ................
    9134:	82e6 0000 82e6 0000 82e6 0000 85fc 0000     ................

00009144 <_init>:
    9144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9146:	46c0      	nop			; (mov r8, r8)
    9148:	bcf8      	pop	{r3, r4, r5, r6, r7}
    914a:	bc08      	pop	{r3}
    914c:	469e      	mov	lr, r3
    914e:	4770      	bx	lr

00009150 <__init_array_start>:
    9150:	000000dd 	.word	0x000000dd

00009154 <_fini>:
    9154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9156:	46c0      	nop			; (mov r8, r8)
    9158:	bcf8      	pop	{r3, r4, r5, r6, r7}
    915a:	bc08      	pop	{r3}
    915c:	469e      	mov	lr, r3
    915e:	4770      	bx	lr

00009160 <__fini_array_start>:
    9160:	000000b5 	.word	0x000000b5
